00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 344067797
00000                 | 	_clkmode = 32241403
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 344067797
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1ebf6fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 FB F5 80 FF 
00420 007 00 F0 65 FD | 	hubset	##32241400
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a FB F5 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##32241403
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 07 41 8A FF 
00440 00f 14 AA 6D FC | 	wrlong	##344067797, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E4 39 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 80 3D 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 58 3A 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 88 B4 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 38 2D 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 90 28 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 98 7D 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 78 34 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 08 AF 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 B8 EE 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 70 EC 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 48 FE 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc A8 59 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     B4 4A B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     78 5F B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): audio.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     B8 62 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     7C 6A B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     04 64 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     C8 61 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     6C 2F B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     64 2D B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     04 2D B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     94 2C B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     FC 44 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     48 48 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): audio.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     F4 5E B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     B8 66 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     44 60 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B6 01 00 FF 
00ccc     06 50 06 F6 | 	mov	local22, ##@LR__5447
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     28 2B B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     94 85 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     A4 63 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     98 4C B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     C8 4E B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): audio.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     80 5D B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     44 65 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     D0 5E B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     C4 29 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     D8 43 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     CC 43 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     5C 43 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     28 43 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     48 43 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     38 43 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     68 28 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     14 28 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     E4 27 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     7C 27 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     E4 3F B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     C0 40 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     64 26 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     10 26 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     E0 25 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     78 25 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     E0 3D B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B6 01 00 FF 
01328     07 50 06 F6 | 	mov	local22, ##@LR__5448
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     08 3F B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     A8 3E B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     FC 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     A0 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     F8 2B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     E8 2B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     F8 5D B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     D0 5D B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     A8 5D B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     48 52 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     98 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     88 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     78 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     B8 52 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     58 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     48 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     38 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     0C 51 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     35 4A 05 F6 | 	mov	COUNT_, #53
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     28 7D B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     60 7C B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     B6 01 00 FF 
018e0     08 16 06 F6 | 	mov	arg03, ##@LR__5449
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     50 7C B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     88 7B B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     B6 01 00 FF 
01940     09 2C 06 F6 | 	mov	local04, ##@LR__5450
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     40 2A 90 AD |  if_e	jmp	#LR__0210
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     08 78 B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     B6 01 00 FF 
01a00     0A 14 06 F6 | 	mov	arg02, ##@LR__5451
01a04     8C 56 B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     C8 77 B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     B6 01 00 FF 
01a40     0C 14 06 F6 | 	mov	arg02, ##@LR__5452
01a44     4C 56 B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     58 77 B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     B6 01 00 FF 
01ab0     0E 38 06 F6 | 	mov	local10, ##@LR__5453
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     D8 55 B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     F4 75 B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     F4 79 B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     2C 79 B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     30 75 B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     B8 79 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     F0 78 B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     B6 01 00 FF 
01be4     10 2C 06 F6 | 	mov	local04, ##@LR__5454
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     B6 01 00 FF 
01c34     11 30 06 F6 | 	mov	local06, ##@LR__5455
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     54 54 B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     B6 01 00 FF 
01c94     12 14 06 F6 | 	mov	arg02, ##@LR__5456
01c98     F8 53 B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     B6 01 00 FF 
01cec     13 14 06 F6 | 	mov	arg02, ##@LR__5457
01cf0     A0 53 B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     B6 01 00 FF 
01d44     14 14 06 F6 | 	mov	arg02, ##@LR__5458
01d48     48 53 B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     64 74 B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     94 2E B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     64 73 B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     B6 01 00 FF 
01ea4     15 14 06 F6 | 	mov	arg02, ##@LR__5459
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     E4 51 B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     E0 72 B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     B6 01 00 FF 
01f28     16 14 06 F6 | 	mov	arg02, ##@LR__5460
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     60 51 B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     4C 50 B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     B6 01 00 FF 
0203c     17 2C 06 F6 | 	mov	local04, ##@LR__5461
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     B6 01 00 FF 
02070     19 14 06 F6 | 	mov	arg02, ##@LR__5462
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     14 50 B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     E8 4F B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     B6 01 00 FF 
02178     1B 14 06 F6 | 	mov	arg02, ##@LR__5463
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     10 4F B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     B6 01 00 FF 
02194     1D 14 06 F6 | 	mov	arg02, ##@LR__5464
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     F4 4E B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     8C 6F B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     B6 01 00 FF 
021ec     1F 14 06 F6 | 	mov	arg02, ##@LR__5465
021f0     A0 4E B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     BC 6E B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     B6 01 00 FF 
02234     21 14 06 F6 | 	mov	arg02, ##@LR__5466
02238     58 4E B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     A4 6E B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     EC 4D B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     B6 01 00 FF 
023b8     23 14 06 F6 | 	mov	arg02, ##@LR__5467
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     C8 4C B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     B6 01 00 FF 
023d8     25 14 06 F6 | 	mov	arg02, ##@LR__5468
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     B0 4C B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     B6 01 00 FF 
023f0     27 30 06 F6 | 	mov	local06, ##@LR__5469
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     94 4C B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     B6 01 00 FF 
0240c     29 3C 06 F6 | 	mov	local12, ##@LR__5470
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     78 4C B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     B6 01 00 FF 
02428     2B 3A 06 F6 | 	mov	local11, ##@LR__5471
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     58 4C B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     B6 01 00 FF 
02448     2D 3A 06 F6 | 	mov	local11, ##@LR__5472
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     3C 4C B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     B6 01 00 FF 
02464     2F 40 06 F6 | 	mov	local14, ##@LR__5473
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     20 4C B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     B6 01 00 FF 
02480     31 5C 06 F6 | 	mov	local28, ##@LR__5474
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     00 4C B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     B6 01 00 FF 
024a0     33 5C 06 F6 | 	mov	local28, ##@LR__5475
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     E4 4B B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     B6 01 00 FF 
024bc     35 52 06 F6 | 	mov	local23, ##@LR__5476
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     C4 4B B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     B6 01 00 FF 
024dc     37 52 06 F6 | 	mov	local23, ##@LR__5477
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     A8 4B B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     B6 01 00 FF 
024f8     39 5E 06 F6 | 	mov	local29, ##@LR__5478
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     88 4B B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     B6 01 00 FF 
02518     3B 60 06 F6 | 	mov	local30, ##@LR__5479
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     68 4B B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     B6 01 00 FF 
02538     3D 62 06 F6 | 	mov	local31, ##@LR__5480
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     48 4B B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     48 4B B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     F8 6E B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     30 6E B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     04 69 B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     B6 01 00 FF 
027ec     3F 14 06 F6 | 	mov	arg02, ##@LR__5481
027f0     A0 48 B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     48 69 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     B6 01 00 FF 
02830     41 14 06 F6 | 	mov	arg02, ##@LR__5482
02834     5C 48 B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     7C 6B B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     18 47 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     B6 01 00 FF 
0290c     43 14 06 F6 | 	mov	arg02, ##@LR__5483
02910     80 47 B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     B6 01 00 FF 
0293c     48 14 06 F6 | 	mov	arg02, ##@LR__5484
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     48 47 B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	 							' then found
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     54 67 B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     B6 01 00 FF 
0299c     4D 14 06 F6 | 	mov	arg02, ##@LR__5485
029a0     F0 46 B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     94 66 B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     B6 01 00 FF 
02af8     4F 30 06 F6 | 	mov	local06, ##@LR__5486
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     B6 01 00 FF 
02b2c     51 16 06 F6 | 	mov	arg03, ##@LR__5487
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     F0 6A B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     04 65 B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     38 64 B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     B6 01 00 FF 
02cd0     53 14 06 F6 | 	mov	arg02, ##@LR__5488
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     B0 43 B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     B6 01 00 FF 
02cf0     59 14 06 F6 | 	mov	arg02, ##@LR__5489
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     98 43 B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     B6 01 00 FF 
02d08     60 14 06 F6 | 	mov	arg02, ##@LR__5490
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     80 43 B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     B6 01 00 FF 
02d3c     66 14 06 F6 | 	mov	arg02, ##@LR__5491
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     48 43 B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     B6 01 00 FF 
02d70     69 30 06 F6 | 	mov	local06, ##@LR__5492
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     B6 01 00 FF 
02dac     6B 14 06 F6 | 	mov	arg02, ##@LR__5493
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     D8 42 B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     B6 01 00 FF 
02de0     6F 30 06 F6 | 	mov	local06, ##@LR__5494
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     B6 01 00 FF 
02e00     71 14 06 F6 | 	mov	arg02, ##@LR__5495
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     88 42 B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     B6 01 00 FF 
02e18     76 14 06 F6 | 	mov	arg02, ##@LR__5496
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     70 42 B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     58 02 90 5D |  if_ne	jmp	#LR__0172
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     B6 01 00 FF 
02e4c     79 14 06 F6 | 	mov	arg02, ##@LR__5497
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     38 42 B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     B6 01 00 FF 
02e80     7F 30 06 F6 | 	mov	local06, ##@LR__5498
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B6 01 00 FF 
02eb0     81 14 06 F6 | 	mov	arg02, ##@LR__5499
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     D4 41 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B6 01 00 FF 
02ee4     8A 30 06 F6 | 	mov	local06, ##@LR__5500
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B6 01 00 FF 
02f14     8C 14 06 F6 | 	mov	arg02, ##@LR__5501
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     70 41 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B6 01 00 FF 
02f48     95 30 06 F6 | 	mov	local06, ##@LR__5502
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B6 01 00 FF 
02f78     97 14 06 F6 | 	mov	arg02, ##@LR__5503
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     0C 41 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B6 01 00 FF 
02fac     A0 30 06 F6 | 	mov	local06, ##@LR__5504
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B6 01 00 FF 
02fdc     A2 14 06 F6 | 	mov	arg02, ##@LR__5505
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     A8 40 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B6 01 00 FF 
03010     A5 30 06 F6 | 	mov	local06, ##@LR__5506
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
03020     37 2F 02 F6 | 	mov	local05, local37
03024     01 2E 06 F1 | 	add	local05, #1
03028     03 2E 66 F0 | 	shl	local05, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 2E 02 F1 | 	add	local05, objptr
03038     17 13 02 FB | 	rdlong	arg01, local05
0303c     B6 01 00 FF 
03040     A7 14 06 F6 | 	mov	arg02, ##@LR__5507
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     44 40 B2 FD | 	call	#__system___string_cmp
03050     00 FA 0D F2 | 	cmp	result1, #0 wz
03054     2C 00 90 5D |  if_ne	jmp	#LR__0171
03058     37 39 02 F6 | 	mov	local10, local37
0305c     01 38 06 F1 | 	add	local10, #1
03060     03 38 66 F0 | 	shl	local10, #3
03064     35 00 00 FF 
03068     0C E4 05 F1 | 	add	objptr, ##27148
0306c     F2 38 02 F1 | 	add	local10, objptr
03070     B6 01 00 FF 
03074     AD 30 06 F6 | 	mov	local06, ##@LR__5508
03078     1C 31 62 FC | 	wrlong	local06, local10
0307c     35 00 00 FF 
03080     0C E4 85 F1 | 	sub	objptr, ##27148
03084                 | LR__0171
03084                 | LR__0172
03084                 | ' 
03084                 | ' ' find part types 
03084                 | ' 
03084                 | ' for i=0 to k-1
03084     00 28 06 F6 | 	mov	local02, #0
03088     23 79 02 F6 | 	mov	local42, local17
0308c                 | LR__0173
0308c     3C 29 52 F2 | 	cmps	local02, local42 wc
03090     A4 07 90 3D |  if_ae	jmp	#LR__0185
03094     14 39 02 F6 | 	mov	local10, local02
03098     03 38 66 F0 | 	shl	local10, #3
0309c     35 00 00 FF 
030a0     0C E4 05 F1 | 	add	objptr, ##27148
030a4     F2 38 02 F1 | 	add	local10, objptr
030a8     14 3B 02 F6 | 	mov	local11, local02
030ac     1D 41 02 F6 | 	mov	local14, local11
030b0     20 3F 02 F6 | 	mov	local13, local14
030b4     03 3E 66 F0 | 	shl	local13, #3
030b8     F2 3E 02 F1 | 	add	local13, objptr
030bc     1F 13 02 FB | 	rdlong	arg01, local13
030c0     35 00 00 FF 
030c4     0C E4 85 F1 | 	sub	objptr, ##27148
030c8     70 1B B0 FD | 	call	#_isseparator
030cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
030d0     04 38 06 F1 | 	add	local10, #4
030d4     1C FB 61 FC | 	wrlong	result1, local10
030d8                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030d8     14 39 02 F6 | 	mov	local10, local02
030dc     03 38 66 F0 | 	shl	local10, #3
030e0     35 00 00 FF 
030e4     0C E4 05 F1 | 	add	objptr, ##27148
030e8     F2 38 02 F1 | 	add	local10, objptr
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C 3D 02 FB | 	rdlong	local12, local10
030f4     01 3C 56 F2 | 	cmps	local12, #1 wc
030f8     35 00 00 FF 
030fc     0C E4 85 F1 | 	sub	objptr, ##27148
03100     2C 07 90 3D |  if_ae	jmp	#LR__0184
03104     14 39 02 F6 | 	mov	local10, local02
03108     03 38 66 F0 | 	shl	local10, #3
0310c     35 00 00 FF 
03110     0C E4 05 F1 | 	add	objptr, ##27148
03114     F2 38 02 F1 | 	add	local10, objptr
03118     14 3B 02 F6 | 	mov	local11, local02
0311c     1D 41 02 F6 | 	mov	local14, local11
03120     20 3F 02 F6 | 	mov	local13, local14
03124     03 3E 66 F0 | 	shl	local13, #3
03128     F2 3E 02 F1 | 	add	local13, objptr
0312c     1F 13 02 FB | 	rdlong	arg01, local13
03130     35 00 00 FF 
03134     0C E4 85 F1 | 	sub	objptr, ##27148
03138     4C 13 B0 FD | 	call	#_isoperator
0313c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03140     04 38 06 F1 | 	add	local10, #4
03144     1C FB 61 FC | 	wrlong	result1, local10
03148                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03148     14 39 02 F6 | 	mov	local10, local02
0314c     03 38 66 F0 | 	shl	local10, #3
03150     35 00 00 FF 
03154     0C E4 05 F1 | 	add	objptr, ##27148
03158     F2 38 02 F1 | 	add	local10, objptr
0315c     04 38 06 F1 | 	add	local10, #4
03160     1C 3D 02 FB | 	rdlong	local12, local10
03164     01 3C 56 F2 | 	cmps	local12, #1 wc
03168     35 00 00 FF 
0316c     0C E4 85 F1 | 	sub	objptr, ##27148
03170     BC 06 90 3D |  if_ae	jmp	#LR__0184
03174     14 39 02 F6 | 	mov	local10, local02
03178     03 38 66 F0 | 	shl	local10, #3
0317c     35 00 00 FF 
03180     0C E4 05 F1 | 	add	objptr, ##27148
03184     F2 38 02 F1 | 	add	local10, objptr
03188     14 3B 02 F6 | 	mov	local11, local02
0318c     1D 41 02 F6 | 	mov	local14, local11
03190     20 3F 02 F6 | 	mov	local13, local14
03194     03 3E 66 F0 | 	shl	local13, #3
03198     F2 3E 02 F1 | 	add	local13, objptr
0319c     1F 13 02 FB | 	rdlong	arg01, local13
031a0     35 00 00 FF 
031a4     0C E4 85 F1 | 	sub	objptr, ##27148
031a8                 | ' 
031a8                 | ' select case s
031a8     B6 01 00 FF 
031ac     B2 15 06 F6 | 	mov	arg02, ##@LR__5599
031b0     E0 3E B2 FD | 	call	#__system___string_cmp
031b4     00 FA 0D F2 | 	cmp	result1, #0 wz
031b8     1B FA 05 A6 |  if_e	mov	result1, #27
031bc     00 FA 05 56 |  if_ne	mov	result1, #0
031c0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031c4     04 38 06 F1 | 	add	local10, #4
031c8     1C FB 61 FC | 	wrlong	result1, local10
031cc                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
031cc     14 39 02 F6 | 	mov	local10, local02
031d0     03 38 66 F0 | 	shl	local10, #3
031d4     35 00 00 FF 
031d8     0C E4 05 F1 | 	add	objptr, ##27148
031dc     F2 38 02 F1 | 	add	local10, objptr
031e0     04 38 06 F1 | 	add	local10, #4
031e4     1C 3D 02 FB | 	rdlong	local12, local10
031e8     01 3C 56 F2 | 	cmps	local12, #1 wc
031ec     35 00 00 FF 
031f0     0C E4 85 F1 | 	sub	objptr, ##27148
031f4     38 06 90 3D |  if_ae	jmp	#LR__0184
031f8     14 39 02 F6 | 	mov	local10, local02
031fc     03 38 66 F0 | 	shl	local10, #3
03200     35 00 00 FF 
03204     0C E4 05 F1 | 	add	objptr, ##27148
03208     F2 38 02 F1 | 	add	local10, objptr
0320c     14 3B 02 F6 | 	mov	local11, local02
03210     1D 41 02 F6 | 	mov	local14, local11
03214     20 3F 02 F6 | 	mov	local13, local14
03218     03 3E 66 F0 | 	shl	local13, #3
0321c     F2 3E 02 F1 | 	add	local13, objptr
03220     1F 13 02 FB | 	rdlong	arg01, local13
03224     35 00 00 FF 
03228     0C E4 85 F1 | 	sub	objptr, ##27148
0322c     0C 1C B0 FD | 	call	#_iscommand
03230     FD FA E1 F8 | 	getbyte	result1, result1, #0
03234     04 38 06 F1 | 	add	local10, #4
03238     1C FB 61 FC | 	wrlong	result1, local10
0323c                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0323c     14 39 02 F6 | 	mov	local10, local02
03240     03 38 66 F0 | 	shl	local10, #3
03244     35 00 00 FF 
03248     0C E4 05 F1 | 	add	objptr, ##27148
0324c     F2 38 02 F1 | 	add	local10, objptr
03250     04 38 06 F1 | 	add	local10, #4
03254     1C 3D 02 FB | 	rdlong	local12, local10
03258     01 3C 56 F2 | 	cmps	local12, #1 wc
0325c     35 00 00 FF 
03260     0C E4 85 F1 | 	sub	objptr, ##27148
03264     C8 05 90 3D |  if_ae	jmp	#LR__0184
03268     14 39 02 F6 | 	mov	local10, local02
0326c     03 38 66 F0 | 	shl	local10, #3
03270     35 00 00 FF 
03274     0C E4 05 F1 | 	add	objptr, ##27148
03278     F2 38 02 F1 | 	add	local10, objptr
0327c     14 3B 02 F6 | 	mov	local11, local02
03280     1D 41 02 F6 | 	mov	local14, local11
03284     20 3F 02 F6 | 	mov	local13, local14
03288     03 3E 66 F0 | 	shl	local13, #3
0328c     F2 5C 02 F6 | 	mov	local28, objptr
03290     F2 3E 02 F1 | 	add	local13, objptr
03294     1F 13 02 FB | 	rdlong	arg01, local13
03298     35 00 00 FF 
0329c     0C E4 85 F1 | 	sub	objptr, ##27148
032a0     D8 2C B0 FD | 	call	#_isfunction
032a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
032a8     04 38 06 F1 | 	add	local10, #4
032ac     1C FB 61 FC | 	wrlong	result1, local10
032b0                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032b0     14 39 02 F6 | 	mov	local10, local02
032b4     03 38 66 F0 | 	shl	local10, #3
032b8     35 00 00 FF 
032bc     0C E4 05 F1 | 	add	objptr, ##27148
032c0     F2 38 02 F1 | 	add	local10, objptr
032c4     04 38 06 F1 | 	add	local10, #4
032c8     1C 3D 02 FB | 	rdlong	local12, local10
032cc     01 3C 56 F2 | 	cmps	local12, #1 wc
032d0     35 00 00 FF 
032d4     0C E4 85 F1 | 	sub	objptr, ##27148
032d8     54 05 90 3D |  if_ae	jmp	#LR__0184
032dc     14 39 02 F6 | 	mov	local10, local02
032e0     03 38 66 F0 | 	shl	local10, #3
032e4     35 00 00 FF 
032e8     0C E4 05 F1 | 	add	objptr, ##27148
032ec     F2 38 02 F1 | 	add	local10, objptr
032f0     14 3B 02 F6 | 	mov	local11, local02
032f4     1D 41 02 F6 | 	mov	local14, local11
032f8     03 40 66 F0 | 	shl	local14, #3
032fc     F2 3E 02 F6 | 	mov	local13, objptr
03300     F2 40 02 F1 | 	add	local14, objptr
03304     20 13 02 FB | 	rdlong	arg01, local14
03308     35 00 00 FF 
0330c     0C E4 85 F1 | 	sub	objptr, ##27148
03310     BC 15 B0 FD | 	call	#_isnotename
03314     04 38 06 F1 | 	add	local10, #4
03318     1C FB 61 FC | 	wrlong	result1, local10
0331c                 | ' lparts(i).token=isnotename(lparts(i).part$) 
0331c                 | ' if lparts(i).token>0 then 
0331c     14 39 02 F6 | 	mov	local10, local02
03320     03 38 66 F0 | 	shl	local10, #3
03324     35 00 00 FF 
03328     0C E4 05 F1 | 	add	objptr, ##27148
0332c     F2 38 02 F1 | 	add	local10, objptr
03330     04 38 06 F1 | 	add	local10, #4
03334     1C 31 02 FB | 	rdlong	local06, local10
03338     01 30 56 F2 | 	cmps	local06, #1 wc
0333c     35 00 00 FF 
03340     0C E4 85 F1 | 	sub	objptr, ##27148
03344     8C 00 90 CD |  if_b	jmp	#LR__0174
03348     14 2F 02 F6 | 	mov	local05, local02
0334c     03 2E 66 F0 | 	shl	local05, #3
03350     35 00 00 FF 
03354     0C E4 05 F1 | 	add	objptr, ##27148
03358     F2 2E 02 F1 | 	add	local05, objptr
0335c     04 2E 06 F1 | 	add	local05, #4
03360     17 3D 02 FB | 	rdlong	local12, local05
03364     1E 13 02 F6 | 	mov	arg01, local12
03368     35 00 00 FF 
0336c     0C E4 85 F1 | 	sub	objptr, ##27148
03370     B0 3D B0 FD | 	call	#_getnoteval
03374     FD 7A 02 F6 | 	mov	local43, result1
03378     14 39 02 F6 | 	mov	local10, local02
0337c     03 38 66 F0 | 	shl	local10, #3
03380     35 00 00 FF 
03384     0C E4 05 F1 | 	add	objptr, ##27148
03388     F2 38 02 F1 | 	add	local10, objptr
0338c     3D 13 02 F6 | 	mov	arg01, local43
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     44 5F B2 FD | 	call	#__system__str_S
0339c     1C FB 61 FC | 	wrlong	result1, local10
033a0     14 2D 02 F6 | 	mov	local04, local02
033a4     16 2B 02 F6 | 	mov	local03, local04
033a8     15 39 02 F6 | 	mov	local10, local03
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     01 00 80 FF 
033c4     1C 05 68 FC | 	wrlong	##514, local10
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     5C 04 90 FD | 	jmp	#LR__0184
033d4                 | LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 41 02 F6 | 	mov	local14, local02
033ec     03 40 66 F0 | 	shl	local14, #3
033f0     F2 40 02 F1 | 	add	local14, objptr
033f4     20 13 02 FB | 	rdlong	arg01, local14
033f8     35 00 00 FF 
033fc     0C E4 85 F1 | 	sub	objptr, ##27148
03400     64 13 B0 FD | 	call	#_ischannel
03404     04 38 06 F1 | 	add	local10, #4
03408     1C FB 61 FC | 	wrlong	result1, local10
0340c                 | ' 
0340c                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
0340c                 | ' 
0340c                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
0340c     14 39 02 F6 | 	mov	local10, local02
03410     03 38 66 F0 | 	shl	local10, #3
03414     35 00 00 FF 
03418     0C E4 05 F1 | 	add	objptr, ##27148
0341c     F2 38 02 F1 | 	add	local10, objptr
03420     04 38 06 F1 | 	add	local10, #4
03424     1C 31 02 FB | 	rdlong	local06, local10
03428     01 30 56 F2 | 	cmps	local06, #1 wc
0342c     35 00 00 FF 
03430     0C E4 85 F1 | 	sub	objptr, ##27148
03434     74 00 90 CD |  if_b	jmp	#LR__0175
03438     14 39 02 F6 | 	mov	local10, local02
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     14 3B 02 F6 | 	mov	local11, local02
03450     1D 41 02 F6 | 	mov	local14, local11
03454     03 40 66 F0 | 	shl	local14, #3
03458     F2 3E 02 F6 | 	mov	local13, objptr
0345c     F2 40 02 F1 | 	add	local14, objptr
03460     20 13 02 FB | 	rdlong	arg01, local14
03464     01 3C 06 F6 | 	mov	local12, #1
03468     01 14 06 F6 | 	mov	arg02, #1
0346c     35 00 00 FF 
03470     0C E4 85 F1 | 	sub	objptr, ##27148
03474     F8 5C B2 FD | 	call	#__system__Right_S
03478     1C FB 61 FC | 	wrlong	result1, local10
0347c     14 2D 02 F6 | 	mov	local04, local02
03480     16 2B 02 F6 | 	mov	local03, local04
03484     15 39 02 F6 | 	mov	local10, local03
03488     03 38 66 F0 | 	shl	local10, #3
0348c     35 00 00 FF 
03490     0C E4 05 F1 | 	add	objptr, ##27148
03494     F2 38 02 F1 | 	add	local10, objptr
03498     04 38 06 F1 | 	add	local10, #4
0349c     1C 59 68 FC | 	wrlong	#44, local10
034a0     35 00 00 FF 
034a4     0C E4 85 F1 | 	sub	objptr, ##27148
034a8     84 03 90 FD | 	jmp	#LR__0184
034ac                 | LR__0175
034ac     14 39 02 F6 | 	mov	local10, local02
034b0     03 38 66 F0 | 	shl	local10, #3
034b4     35 00 00 FF 
034b8     0C E4 05 F1 | 	add	objptr, ##27148
034bc     F2 38 02 F1 | 	add	local10, objptr
034c0     14 3B 02 F6 | 	mov	local11, local02
034c4     1D 41 02 F6 | 	mov	local14, local11
034c8     03 40 66 F0 | 	shl	local14, #3
034cc     F2 3E 02 F6 | 	mov	local13, objptr
034d0     F2 40 02 F1 | 	add	local14, objptr
034d4     20 13 02 FB | 	rdlong	arg01, local14
034d8     35 00 00 FF 
034dc     0C E4 85 F1 | 	sub	objptr, ##27148
034e0     6C 13 B0 FD | 	call	#_isconstant
034e4     04 38 06 F1 | 	add	local10, #4
034e8     1C FB 61 FC | 	wrlong	result1, local10
034ec                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
034ec     14 39 02 F6 | 	mov	local10, local02
034f0     03 38 66 F0 | 	shl	local10, #3
034f4     35 00 00 FF 
034f8     0C E4 05 F1 | 	add	objptr, ##27148
034fc     F2 38 02 F1 | 	add	local10, objptr
03500     04 38 06 F1 | 	add	local10, #4
03504     1C 3D 02 FB | 	rdlong	local12, local10
03508     01 3C 56 F2 | 	cmps	local12, #1 wc
0350c     35 00 00 FF 
03510     0C E4 85 F1 | 	sub	objptr, ##27148
03514     94 00 90 CD |  if_b	jmp	#LR__0176
03518     14 39 02 F6 | 	mov	local10, local02
0351c     03 38 66 F0 | 	shl	local10, #3
03520     35 00 00 FF 
03524     0C E4 05 F1 | 	add	objptr, ##27148
03528     F2 38 02 F1 | 	add	local10, objptr
0352c     14 3D 02 F6 | 	mov	local12, local02
03530     1E 3B 02 F6 | 	mov	local11, local12
03534     1D 41 02 F6 | 	mov	local14, local11
03538     03 40 66 F0 | 	shl	local14, #3
0353c     F2 3E 02 F6 | 	mov	local13, objptr
03540     F2 40 02 F1 | 	add	local14, objptr
03544     04 40 06 F1 | 	add	local14, #4
03548     20 13 02 FB | 	rdlong	arg01, local14
0354c     04 40 86 F1 | 	sub	local14, #4
03550     35 00 00 FF 
03554     0C E4 85 F1 | 	sub	objptr, ##27148
03558     09 13 52 F6 | 	abs	arg01, arg01 wc
0355c     1F 7C C6 C9 |  if_b	decod	local44, #31
03560     00 7C 06 36 |  if_ae	mov	local44, #0
03564     78 65 B2 FD | 	call	#__system___float_fromuns
03568     3E FB 61 F5 | 	xor	result1, local44
0356c     FD 12 02 F6 | 	mov	arg01, result1
03570     6C 5D B2 FD | 	call	#__system__str_S
03574     1C FB 61 FC | 	wrlong	result1, local10
03578     14 2D 02 F6 | 	mov	local04, local02
0357c     16 2B 02 F6 | 	mov	local03, local04
03580     15 39 02 F6 | 	mov	local10, local03
03584     03 38 66 F0 | 	shl	local10, #3
03588     35 00 00 FF 
0358c     0C E4 05 F1 | 	add	objptr, ##27148
03590     F2 38 02 F1 | 	add	local10, objptr
03594     04 38 06 F1 | 	add	local10, #4
03598     01 00 80 FF 
0359c     1C 03 68 FC | 	wrlong	##513, local10
035a0     35 00 00 FF 
035a4     0C E4 85 F1 | 	sub	objptr, ##27148
035a8     84 02 90 FD | 	jmp	#LR__0184
035ac                 | LR__0176
035ac     14 2F 02 F6 | 	mov	local05, local02
035b0     03 2E 66 F0 | 	shl	local05, #3
035b4     35 00 00 FF 
035b8     0C E4 05 F1 | 	add	objptr, ##27148
035bc     F2 2E 02 F1 | 	add	local05, objptr
035c0     17 13 02 FB | 	rdlong	arg01, local05
035c4     35 00 00 FF 
035c8     0C E4 85 F1 | 	sub	objptr, ##27148
035cc     A0 33 B0 FD | 	call	#_isnum
035d0     FD 7E 02 F6 | 	mov	local45, result1
035d4     14 2F 02 F6 | 	mov	local05, local02
035d8     03 2E 66 F0 | 	shl	local05, #3
035dc     35 00 00 FF 
035e0     0C E4 05 F1 | 	add	objptr, ##27148
035e4     F2 2E 02 F1 | 	add	local05, objptr
035e8     17 13 02 FB | 	rdlong	arg01, local05
035ec     35 00 00 FF 
035f0     0C E4 85 F1 | 	sub	objptr, ##27148
035f4     64 37 B0 FD | 	call	#_isint
035f8     FD 80 02 F6 | 	mov	local46, result1
035fc     14 2F 02 F6 | 	mov	local05, local02
03600     03 2E 66 F0 | 	shl	local05, #3
03604     35 00 00 FF 
03608     0C E4 05 F1 | 	add	objptr, ##27148
0360c     F2 2E 02 F1 | 	add	local05, objptr
03610     17 13 02 FB | 	rdlong	arg01, local05
03614     35 00 00 FF 
03618     0C E4 85 F1 | 	sub	objptr, ##27148
0361c     E0 39 B0 FD | 	call	#_isdec
03620     FD 82 02 F6 | 	mov	local47, result1
03624                 | ' 
03624                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03624                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03624     00 7E 0E F2 | 	cmp	local45, #0 wz
03628     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0362c     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
03630     34 00 90 AD |  if_e	jmp	#LR__0177
03634     14 2D 02 F6 | 	mov	local04, local02
03638     16 2B 02 F6 | 	mov	local03, local04
0363c     15 39 02 F6 | 	mov	local10, local03
03640     03 38 66 F0 | 	shl	local10, #3
03644     35 00 00 FF 
03648     0C E4 05 F1 | 	add	objptr, ##27148
0364c     F2 38 02 F1 | 	add	local10, objptr
03650     04 38 06 F1 | 	add	local10, #4
03654     01 00 80 FF 
03658     1C 01 68 FC | 	wrlong	##512, local10
0365c     35 00 00 FF 
03660     0C E4 85 F1 | 	sub	objptr, ##27148
03664     C8 01 90 FD | 	jmp	#LR__0184
03668                 | LR__0177
03668                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03668     00 7E 0E F2 | 	cmp	local45, #0 wz
0366c     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03670     41 2D 22 56 |  if_ne	not	local04, local47
03674     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03678     34 00 90 AD |  if_e	jmp	#LR__0178
0367c     14 2D 02 F6 | 	mov	local04, local02
03680     16 2B 02 F6 | 	mov	local03, local04
03684     15 39 02 F6 | 	mov	local10, local03
03688     03 38 66 F0 | 	shl	local10, #3
0368c     35 00 00 FF 
03690     0C E4 05 F1 | 	add	objptr, ##27148
03694     F2 38 02 F1 | 	add	local10, objptr
03698     04 38 06 F1 | 	add	local10, #4
0369c     01 00 80 FF 
036a0     1C 03 68 FC | 	wrlong	##513, local10
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     80 01 90 FD | 	jmp	#LR__0184
036b0                 | LR__0178
036b0                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
036b0     00 7E 0E F2 | 	cmp	local45, #0 wz
036b4     40 2D 22 56 |  if_ne	not	local04, local46
036b8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
036bc     41 2B 22 56 |  if_ne	not	local03, local47
036c0     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
036c4     34 00 90 AD |  if_e	jmp	#LR__0179
036c8     14 2D 02 F6 | 	mov	local04, local02
036cc     16 2B 02 F6 | 	mov	local03, local04
036d0     15 39 02 F6 | 	mov	local10, local03
036d4     03 38 66 F0 | 	shl	local10, #3
036d8     35 00 00 FF 
036dc     0C E4 05 F1 | 	add	objptr, ##27148
036e0     F2 38 02 F1 | 	add	local10, objptr
036e4     04 38 06 F1 | 	add	local10, #4
036e8     01 00 80 FF 
036ec     1C 05 68 FC | 	wrlong	##514, local10
036f0     35 00 00 FF 
036f4     0C E4 85 F1 | 	sub	objptr, ##27148
036f8     34 01 90 FD | 	jmp	#LR__0184
036fc                 | LR__0179
036fc                 | ' 
036fc                 | ' if isstring(lparts(i).part$) then 
036fc     14 2F 02 F6 | 	mov	local05, local02
03700     03 2E 66 F0 | 	shl	local05, #3
03704     35 00 00 FF 
03708     0C E4 05 F1 | 	add	objptr, ##27148
0370c     F2 2E 02 F1 | 	add	local05, objptr
03710     17 13 02 FB | 	rdlong	arg01, local05
03714     35 00 00 FF 
03718     0C E4 85 F1 | 	sub	objptr, ##27148
0371c     A0 39 B0 FD | 	call	#_isstring
03720     00 FA 0D F2 | 	cmp	result1, #0 wz
03724     A8 00 90 AD |  if_e	jmp	#LR__0182
03728     14 39 02 F6 | 	mov	local10, local02
0372c     03 38 66 F0 | 	shl	local10, #3
03730     35 00 00 FF 
03734     0C E4 05 F1 | 	add	objptr, ##27148
03738     F2 38 02 F1 | 	add	local10, objptr
0373c     04 38 06 F1 | 	add	local10, #4
03740     01 00 80 FF 
03744     1C 07 68 FC | 	wrlong	##515, local10
03748     14 2D 02 F6 | 	mov	local04, local02
0374c     16 2B 02 F6 | 	mov	local03, local04
03750     15 39 02 F6 | 	mov	local10, local03
03754     03 38 66 F0 | 	shl	local10, #3
03758     F2 38 02 F1 | 	add	local10, objptr
0375c     14 41 02 F6 | 	mov	local14, local02
03760     03 40 66 F0 | 	shl	local14, #3
03764     F2 40 02 F1 | 	add	local14, objptr
03768     20 31 02 FB | 	rdlong	local06, local14
0376c     02 3C 06 F6 | 	mov	local12, #2
03770     14 51 02 F6 | 	mov	local22, local02
03774     28 53 02 F6 | 	mov	local23, local22
03778     03 52 66 F0 | 	shl	local23, #3
0377c     F2 54 02 F6 | 	mov	local24, objptr
03780     F2 52 02 F1 | 	add	local23, objptr
03784     29 13 02 FB | 	rdlong	arg01, local23
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     09 33 02 F6 | 	mov	local07, arg01
03794     97 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
03798                 | LR__0180
03798     19 FB C9 FA | 	rdbyte	result1, local07 wz
0379c     01 32 06 51 |  if_ne	add	local07, #1
037a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
037a4                 | LR__0181
037a4     09 33 82 F1 | 	sub	local07, arg01
037a8     19 3F 02 F6 | 	mov	local13, local07
037ac     1F 41 02 F6 | 	mov	local14, local13
037b0     02 40 86 F1 | 	sub	local14, #2
037b4     20 3B 02 F6 | 	mov	local11, local14
037b8     18 13 02 F6 | 	mov	arg01, local06
037bc     1E 15 02 F6 | 	mov	arg02, local12
037c0     1D 17 02 F6 | 	mov	arg03, local11
037c4     38 5A B2 FD | 	call	#__system__Mid_S
037c8     1C FB 61 FC | 	wrlong	result1, local10
037cc     60 00 90 FD | 	jmp	#LR__0184
037d0                 | LR__0182
037d0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
037d0     14 2B 02 F6 | 	mov	local03, local02
037d4     15 2F 02 F6 | 	mov	local05, local03
037d8     03 2E 66 F0 | 	shl	local05, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 2E 02 F1 | 	add	local05, objptr
037e8     17 13 02 FB | 	rdlong	arg01, local05
037ec     35 00 00 FF 
037f0     0C E4 85 F1 | 	sub	objptr, ##27148
037f4     04 2F B0 FD | 	call	#_isname
037f8     FD 2C 0A F6 | 	mov	local04, result1 wz
037fc     30 00 90 AD |  if_e	jmp	#LR__0183
03800     14 2D 02 F6 | 	mov	local04, local02
03804     16 2B 02 F6 | 	mov	local03, local04
03808     15 39 02 F6 | 	mov	local10, local03
0380c     03 38 66 F0 | 	shl	local10, #3
03810     35 00 00 FF 
03814     0C E4 05 F1 | 	add	objptr, ##27148
03818     F2 38 02 F1 | 	add	local10, objptr
0381c     04 38 06 F1 | 	add	local10, #4
03820     01 00 80 FF 
03824     1C 09 68 FC | 	wrlong	##516, local10
03828     35 00 00 FF 
0382c     0C E4 85 F1 | 	sub	objptr, ##27148
03830                 | LR__0183
03830                 | LR__0184
03830     01 28 06 F1 | 	add	local02, #1
03834     54 F8 9F FD | 	jmp	#LR__0173
03838                 | LR__0185
03838     23 39 02 F6 | 	mov	local10, local17
0383c     03 38 66 F0 | 	shl	local10, #3
03840     35 00 00 FF 
03844     0C E4 05 F1 | 	add	objptr, ##27148
03848     F2 38 02 F1 | 	add	local10, objptr
0384c     04 38 06 F1 | 	add	local10, #4
03850     1C FD 6B FC | 	wrlong	#510, local10
03854     23 39 02 F6 | 	mov	local10, local17
03858     03 38 66 F0 | 	shl	local10, #3
0385c     F2 38 02 F1 | 	add	local10, objptr
03860     B6 01 00 FF 
03864     AF 30 06 F6 | 	mov	local06, ##@LR__5509
03868     1C 31 62 FC | 	wrlong	local06, local10
0386c     10 00 00 FF 
03870     54 E4 05 F1 | 	add	objptr, ##8276
03874     F2 46 62 FC | 	wrlong	local17, objptr
03878     45 00 00 FF 
0387c     60 E4 85 F1 | 	sub	objptr, ##35424
03880                 | ' 
03880                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03880                 | ' 
03880                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03880                 | '  
03880                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03880     B6 01 00 FF 
03884     B0 14 06 F6 | 	mov	arg02, ##@LR__5510
03888     3B 13 02 F6 | 	mov	arg01, local41
0388c     04 38 B2 FD | 	call	#__system___string_cmp
03890     00 FA 0D F2 | 	cmp	result1, #0 wz
03894     F0 00 90 AD |  if_e	jmp	#LR__0186
03898     B6 01 00 FF 
0389c     B5 14 06 F6 | 	mov	arg02, ##@LR__5511
038a0     3B 13 02 F6 | 	mov	arg01, local41
038a4     EC 37 B2 FD | 	call	#__system___string_cmp
038a8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ac     D8 00 90 AD |  if_e	jmp	#LR__0186
038b0     B6 01 00 FF 
038b4     BA 30 06 F6 | 	mov	local06, ##@LR__5512
038b8     3B 13 02 F6 | 	mov	arg01, local41
038bc     18 15 02 F6 | 	mov	arg02, local06
038c0     D0 37 B2 FD | 	call	#__system___string_cmp
038c4     00 FA 0D F2 | 	cmp	result1, #0 wz
038c8     BC 00 90 AD |  if_e	jmp	#LR__0186
038cc     B6 01 00 FF 
038d0     BF 3C 06 F6 | 	mov	local12, ##@LR__5513
038d4     1E 31 02 F6 | 	mov	local06, local12
038d8     3B 13 02 F6 | 	mov	arg01, local41
038dc     18 15 02 F6 | 	mov	arg02, local06
038e0     B0 37 B2 FD | 	call	#__system___string_cmp
038e4     00 FA 0D F2 | 	cmp	result1, #0 wz
038e8     9C 00 90 AD |  if_e	jmp	#LR__0186
038ec     B6 01 00 FF 
038f0     C3 3A 06 F6 | 	mov	local11, ##@LR__5514
038f4     1D 3D 02 F6 | 	mov	local12, local11
038f8     3B 13 02 F6 | 	mov	arg01, local41
038fc     1E 15 02 F6 | 	mov	arg02, local12
03900     90 37 B2 FD | 	call	#__system___string_cmp
03904     FD 30 0A F6 | 	mov	local06, result1 wz
03908     7C 00 90 AD |  if_e	jmp	#LR__0186
0390c     B6 01 00 FF 
03910     C7 40 06 F6 | 	mov	local14, ##@LR__5515
03914     20 3B 02 F6 | 	mov	local11, local14
03918     3B 13 02 F6 | 	mov	arg01, local41
0391c     1D 15 02 F6 | 	mov	arg02, local11
03920     70 37 B2 FD | 	call	#__system___string_cmp
03924     FD 3C 0A F6 | 	mov	local12, result1 wz
03928     5C 00 90 AD |  if_e	jmp	#LR__0186
0392c     B6 01 00 FF 
03930     CA 3E 06 F6 | 	mov	local13, ##@LR__5516
03934     1F 41 02 F6 | 	mov	local14, local13
03938     3B 13 02 F6 | 	mov	arg01, local41
0393c     20 15 02 F6 | 	mov	arg02, local14
03940     50 37 B2 FD | 	call	#__system___string_cmp
03944     FD 3A 0A F6 | 	mov	local11, result1 wz
03948     3C 00 90 AD |  if_e	jmp	#LR__0186
0394c     B6 01 00 FF 
03950     CE 3E 06 F6 | 	mov	local13, ##@LR__5517
03954     3B 13 02 F6 | 	mov	arg01, local41
03958     1F 15 02 F6 | 	mov	arg02, local13
0395c     34 37 B2 FD | 	call	#__system___string_cmp
03960     FD 40 0A F6 | 	mov	local14, result1 wz
03964     20 00 90 AD |  if_e	jmp	#LR__0186
03968     B6 01 00 FF 
0396c     D4 50 06 F6 | 	mov	local22, ##@LR__5518
03970     28 5D 02 F6 | 	mov	local28, local22
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     2E 15 02 F6 | 	mov	arg02, local28
0397c     14 37 B2 FD | 	call	#__system___string_cmp
03980     FD 3E 0A F6 | 	mov	local13, result1 wz
03984     CC 00 90 5D |  if_ne	jmp	#LR__0187
03988                 | LR__0186
03988     37 5D 02 F6 | 	mov	local28, local37
0398c     01 5C 06 F1 | 	add	local28, #1
03990     2E 51 02 F6 | 	mov	local22, local28
03994     28 53 02 F6 | 	mov	local23, local22
03998     03 52 66 F0 | 	shl	local23, #3
0399c     35 00 00 FF 
039a0     0C E4 05 F1 | 	add	objptr, ##27148
039a4     F2 54 02 F6 | 	mov	local24, objptr
039a8     F2 52 02 F1 | 	add	local23, objptr
039ac     04 52 06 F1 | 	add	local23, #4
039b0     29 61 02 FB | 	rdlong	local30, local23
039b4     04 52 86 F1 | 	sub	local23, #4
039b8     30 5F 02 F6 | 	mov	local29, local30
039bc     01 00 00 FF 
039c0     04 5E 0E F2 | 	cmp	local29, ##516 wz
039c4     35 00 00 FF 
039c8     0C E4 85 F1 | 	sub	objptr, ##27148
039cc     84 00 90 5D |  if_ne	jmp	#LR__0187
039d0     37 85 02 F6 | 	mov	local48, local37
039d4     01 84 06 F1 | 	add	local48, #1
039d8     03 84 66 F0 | 	shl	local48, #3
039dc     35 00 00 FF 
039e0     0C E4 05 F1 | 	add	objptr, ##27148
039e4     F2 86 02 F6 | 	mov	local49, objptr
039e8     F2 84 02 F1 | 	add	local48, objptr
039ec     42 13 02 FB | 	rdlong	arg01, local48
039f0     01 14 06 F6 | 	mov	arg02, #1
039f4     35 00 00 FF 
039f8     0C E4 85 F1 | 	sub	objptr, ##27148
039fc     70 57 B2 FD | 	call	#__system__Right_S
03a00     FD 12 02 F6 | 	mov	arg01, result1
03a04     B6 01 00 FF 
03a08     D7 88 06 F6 | 	mov	local50, ##@LR__5519
03a0c     44 8B 02 F6 | 	mov	local51, local50
03a10     45 15 02 F6 | 	mov	arg02, local51
03a14     7C 36 B2 FD | 	call	#__system___string_cmp
03a18     FD 62 0A F6 | 	mov	local31, result1 wz
03a1c     34 00 90 AD |  if_e	jmp	#LR__0187
03a20     37 39 02 F6 | 	mov	local10, local37
03a24     01 38 06 F1 | 	add	local10, #1
03a28     03 38 66 F0 | 	shl	local10, #3
03a2c     35 00 00 FF 
03a30     0C E4 05 F1 | 	add	objptr, ##27148
03a34     F2 38 02 F1 | 	add	local10, objptr
03a38     01 00 00 FF 
03a3c     03 30 06 F6 | 	mov	local06, ##515
03a40     04 38 06 F1 | 	add	local10, #4
03a44     01 00 80 FF 
03a48     1C 07 68 FC | 	wrlong	##515, local10
03a4c     35 00 00 FF 
03a50     0C E4 85 F1 | 	sub	objptr, ##27148
03a54                 | LR__0187
03a54                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a54     B6 01 00 FF 
03a58     D9 14 06 F6 | 	mov	arg02, ##@LR__5520
03a5c     3B 13 02 F6 | 	mov	arg01, local41
03a60     30 36 B2 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     1C 00 90 AD |  if_e	jmp	#LR__0188
03a6c     B6 01 00 FF 
03a70     E0 2E 06 F6 | 	mov	local05, ##@LR__5521
03a74     3B 13 02 F6 | 	mov	arg01, local41
03a78     17 15 02 F6 | 	mov	arg02, local05
03a7c     14 36 B2 FD | 	call	#__system___string_cmp
03a80     00 FA 0D F2 | 	cmp	result1, #0 wz
03a84     CC 00 90 5D |  if_ne	jmp	#LR__0189
03a88                 | LR__0188
03a88     37 2F 02 F6 | 	mov	local05, local37
03a8c     01 2E 06 F1 | 	add	local05, #1
03a90     17 31 02 F6 | 	mov	local06, local05
03a94     03 30 66 F0 | 	shl	local06, #3
03a98     35 00 00 FF 
03a9c     0C E4 05 F1 | 	add	objptr, ##27148
03aa0     F2 3C 02 F6 | 	mov	local12, objptr
03aa4     F2 30 02 F1 | 	add	local06, objptr
03aa8     04 30 06 F1 | 	add	local06, #4
03aac     18 41 02 FB | 	rdlong	local14, local06
03ab0     04 30 86 F1 | 	sub	local06, #4
03ab4     20 3B 02 F6 | 	mov	local11, local14
03ab8     01 00 00 FF 
03abc     04 3A 0E F2 | 	cmp	local11, ##516 wz
03ac0     35 00 00 FF 
03ac4     0C E4 85 F1 | 	sub	objptr, ##27148
03ac8     88 00 90 5D |  if_ne	jmp	#LR__0189
03acc     37 53 02 F6 | 	mov	local23, local37
03ad0     01 52 06 F1 | 	add	local23, #1
03ad4     03 52 66 F0 | 	shl	local23, #3
03ad8     35 00 00 FF 
03adc     0C E4 05 F1 | 	add	objptr, ##27148
03ae0     F2 54 02 F6 | 	mov	local24, objptr
03ae4     F2 52 02 F1 | 	add	local23, objptr
03ae8     29 13 02 FB | 	rdlong	arg01, local23
03aec     01 14 06 F6 | 	mov	arg02, #1
03af0     35 00 00 FF 
03af4     0C E4 85 F1 | 	sub	objptr, ##27148
03af8     74 56 B2 FD | 	call	#__system__Right_S
03afc     FD 12 02 F6 | 	mov	arg01, result1
03b00     B6 01 00 FF 
03b04     E6 50 06 F6 | 	mov	local22, ##@LR__5522
03b08     28 5D 02 F6 | 	mov	local28, local22
03b0c     2E 15 02 F6 | 	mov	arg02, local28
03b10     80 35 B2 FD | 	call	#__system___string_cmp
03b14     FD 3E 0A F6 | 	mov	local13, result1 wz
03b18     38 00 90 AD |  if_e	jmp	#LR__0189
03b1c     37 39 02 F6 | 	mov	local10, local37
03b20     01 38 06 F1 | 	add	local10, #1
03b24     03 38 66 F0 | 	shl	local10, #3
03b28     35 00 00 FF 
03b2c     0C E4 05 F1 | 	add	objptr, ##27148
03b30     F2 2E 02 F6 | 	mov	local05, objptr
03b34     F2 38 02 F1 | 	add	local10, objptr
03b38     01 00 00 FF 
03b3c     03 30 06 F6 | 	mov	local06, ##515
03b40     04 38 06 F1 | 	add	local10, #4
03b44     01 00 80 FF 
03b48     1C 07 68 FC | 	wrlong	##515, local10
03b4c     35 00 00 FF 
03b50     0C E4 85 F1 | 	sub	objptr, ##27148
03b54                 | LR__0189
03b54                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03b54     B6 01 00 FF 
03b58     E8 14 06 F6 | 	mov	arg02, ##@LR__5523
03b5c     3B 13 02 F6 | 	mov	arg01, local41
03b60     30 35 B2 FD | 	call	#__system___string_cmp
03b64     00 FA 0D F2 | 	cmp	result1, #0 wz
03b68     C8 00 90 5D |  if_ne	jmp	#LR__0190
03b6c     37 2F 02 F6 | 	mov	local05, local37
03b70     01 2E 06 F1 | 	add	local05, #1
03b74     03 2E 66 F0 | 	shl	local05, #3
03b78     35 00 00 FF 
03b7c     0C E4 05 F1 | 	add	objptr, ##27148
03b80     F2 30 02 F6 | 	mov	local06, objptr
03b84     F2 2E 02 F1 | 	add	local05, objptr
03b88     04 2E 06 F1 | 	add	local05, #4
03b8c     17 3B 02 FB | 	rdlong	local11, local05
03b90     04 2E 86 F1 | 	sub	local05, #4
03b94     1D 3D 02 F6 | 	mov	local12, local11
03b98     01 00 00 FF 
03b9c     04 3C 0E F2 | 	cmp	local12, ##516 wz
03ba0     35 00 00 FF 
03ba4     0C E4 85 F1 | 	sub	objptr, ##27148
03ba8     88 00 90 5D |  if_ne	jmp	#LR__0190
03bac     37 51 02 F6 | 	mov	local22, local37
03bb0     01 50 06 F1 | 	add	local22, #1
03bb4     03 50 66 F0 | 	shl	local22, #3
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 52 02 F6 | 	mov	local23, objptr
03bc4     F2 50 02 F1 | 	add	local22, objptr
03bc8     28 13 02 FB | 	rdlong	arg01, local22
03bcc     01 14 06 F6 | 	mov	arg02, #1
03bd0     35 00 00 FF 
03bd4     0C E4 85 F1 | 	sub	objptr, ##27148
03bd8     94 55 B2 FD | 	call	#__system__Right_S
03bdc     FD 12 02 F6 | 	mov	arg01, result1
03be0     B6 01 00 FF 
03be4     ED 5C 06 F6 | 	mov	local28, ##@LR__5524
03be8     2E 3F 02 F6 | 	mov	local13, local28
03bec     1F 15 02 F6 | 	mov	arg02, local13
03bf0     A0 34 B2 FD | 	call	#__system___string_cmp
03bf4     FD 40 0A F6 | 	mov	local14, result1 wz
03bf8     38 00 90 AD |  if_e	jmp	#LR__0190
03bfc     37 39 02 F6 | 	mov	local10, local37
03c00     01 38 06 F1 | 	add	local10, #1
03c04     03 38 66 F0 | 	shl	local10, #3
03c08     35 00 00 FF 
03c0c     0C E4 05 F1 | 	add	objptr, ##27148
03c10     F2 2E 02 F6 | 	mov	local05, objptr
03c14     F2 38 02 F1 | 	add	local10, objptr
03c18     01 00 00 FF 
03c1c     03 30 06 F6 | 	mov	local06, ##515
03c20     04 38 06 F1 | 	add	local10, #4
03c24     01 00 80 FF 
03c28     1C 07 68 FC | 	wrlong	##515, local10
03c2c     35 00 00 FF 
03c30     0C E4 85 F1 | 	sub	objptr, ##27148
03c34                 | LR__0190
03c34                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c34     B6 01 00 FF 
03c38     EF 14 06 F6 | 	mov	arg02, ##@LR__5525
03c3c     3B 13 02 F6 | 	mov	arg01, local41
03c40     50 34 B2 FD | 	call	#__system___string_cmp
03c44     00 FA 0D F2 | 	cmp	result1, #0 wz
03c48     C8 00 90 5D |  if_ne	jmp	#LR__0191
03c4c     37 2F 02 F6 | 	mov	local05, local37
03c50     03 2E 06 F1 | 	add	local05, #3
03c54     03 2E 66 F0 | 	shl	local05, #3
03c58     35 00 00 FF 
03c5c     0C E4 05 F1 | 	add	objptr, ##27148
03c60     F2 30 02 F6 | 	mov	local06, objptr
03c64     F2 2E 02 F1 | 	add	local05, objptr
03c68     04 2E 06 F1 | 	add	local05, #4
03c6c     17 3B 02 FB | 	rdlong	local11, local05
03c70     04 2E 86 F1 | 	sub	local05, #4
03c74     1D 3D 02 F6 | 	mov	local12, local11
03c78     01 00 00 FF 
03c7c     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c80     35 00 00 FF 
03c84     0C E4 85 F1 | 	sub	objptr, ##27148
03c88     88 00 90 5D |  if_ne	jmp	#LR__0191
03c8c     37 51 02 F6 | 	mov	local22, local37
03c90     03 50 06 F1 | 	add	local22, #3
03c94     03 50 66 F0 | 	shl	local22, #3
03c98     35 00 00 FF 
03c9c     0C E4 05 F1 | 	add	objptr, ##27148
03ca0     F2 52 02 F6 | 	mov	local23, objptr
03ca4     F2 50 02 F1 | 	add	local22, objptr
03ca8     28 13 02 FB | 	rdlong	arg01, local22
03cac     01 14 06 F6 | 	mov	arg02, #1
03cb0     35 00 00 FF 
03cb4     0C E4 85 F1 | 	sub	objptr, ##27148
03cb8     B4 54 B2 FD | 	call	#__system__Right_S
03cbc     FD 12 02 F6 | 	mov	arg01, result1
03cc0     B6 01 00 FF 
03cc4     F4 5C 06 F6 | 	mov	local28, ##@LR__5526
03cc8     2E 3F 02 F6 | 	mov	local13, local28
03ccc     1F 15 02 F6 | 	mov	arg02, local13
03cd0     C0 33 B2 FD | 	call	#__system___string_cmp
03cd4     FD 40 0A F6 | 	mov	local14, result1 wz
03cd8     38 00 90 AD |  if_e	jmp	#LR__0191
03cdc     37 39 02 F6 | 	mov	local10, local37
03ce0     03 38 06 F1 | 	add	local10, #3
03ce4     03 38 66 F0 | 	shl	local10, #3
03ce8     35 00 00 FF 
03cec     0C E4 05 F1 | 	add	objptr, ##27148
03cf0     F2 2E 02 F6 | 	mov	local05, objptr
03cf4     F2 38 02 F1 | 	add	local10, objptr
03cf8     01 00 00 FF 
03cfc     03 30 06 F6 | 	mov	local06, ##515
03d00     04 38 06 F1 | 	add	local10, #4
03d04     01 00 80 FF 
03d08     1C 07 68 FC | 	wrlong	##515, local10
03d0c     35 00 00 FF 
03d10     0C E4 85 F1 | 	sub	objptr, ##27148
03d14                 | LR__0191
03d14                 | ' 
03d14                 | ' ' cd needs special treatment..
03d14                 | ' 
03d14                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d14     B6 01 00 FF 
03d18     F6 14 06 F6 | 	mov	arg02, ##@LR__5527
03d1c     3B 13 02 F6 | 	mov	arg01, local41
03d20     70 33 B2 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     38 00 90 5D |  if_ne	jmp	#LR__0192
03d2c     37 39 02 F6 | 	mov	local10, local37
03d30     01 38 06 F1 | 	add	local10, #1
03d34     03 38 66 F0 | 	shl	local10, #3
03d38     35 00 00 FF 
03d3c     0C E4 05 F1 | 	add	objptr, ##27148
03d40     F2 2E 02 F6 | 	mov	local05, objptr
03d44     F2 38 02 F1 | 	add	local10, objptr
03d48     01 00 00 FF 
03d4c     03 30 06 F6 | 	mov	local06, ##515
03d50     04 38 06 F1 | 	add	local10, #4
03d54     01 00 80 FF 
03d58     1C 07 68 FC | 	wrlong	##515, local10
03d5c     35 00 00 FF 
03d60     0C E4 85 F1 | 	sub	objptr, ##27148
03d64                 | LR__0192
03d64                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d64     B6 01 00 FF 
03d68     F9 14 06 F6 | 	mov	arg02, ##@LR__5528
03d6c     3B 13 02 F6 | 	mov	arg01, local41
03d70     20 33 B2 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     A4 00 90 5D |  if_ne	jmp	#LR__0193
03d7c     37 31 02 F6 | 	mov	local06, local37
03d80     01 30 06 F1 | 	add	local06, #1
03d84     03 30 66 F0 | 	shl	local06, #3
03d88     35 00 00 FF 
03d8c     0C E4 05 F1 | 	add	objptr, ##27148
03d90     F2 3C 02 F6 | 	mov	local12, objptr
03d94     F2 30 02 F1 | 	add	local06, objptr
03d98     18 13 02 FB | 	rdlong	arg01, local06
03d9c     B6 01 00 FF 
03da0     FD 2E 06 F6 | 	mov	local05, ##@LR__5529
03da4     17 15 02 F6 | 	mov	arg02, local05
03da8     35 00 00 FF 
03dac     0C E4 85 F1 | 	sub	objptr, ##27148
03db0     E0 32 B2 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     64 00 90 5D |  if_ne	jmp	#LR__0193
03dbc     37 39 02 F6 | 	mov	local10, local37
03dc0     01 38 06 F1 | 	add	local10, #1
03dc4     03 38 66 F0 | 	shl	local10, #3
03dc8     35 00 00 FF 
03dcc     0C E4 05 F1 | 	add	objptr, ##27148
03dd0     F2 38 02 F1 | 	add	local10, objptr
03dd4     04 38 06 F1 | 	add	local10, #4
03dd8     01 00 80 FF 
03ddc     1C 07 68 FC | 	wrlong	##515, local10
03de0     37 39 02 F6 | 	mov	local10, local37
03de4     01 38 06 F1 | 	add	local10, #1
03de8     03 38 66 F0 | 	shl	local10, #3
03dec     F2 38 02 F1 | 	add	local10, objptr
03df0     B6 01 00 FF 
03df4     FF 30 06 F6 | 	mov	local06, ##@LR__5530
03df8     1C 31 62 FC | 	wrlong	local06, local10
03dfc     37 39 02 F6 | 	mov	local10, local37
03e00     03 38 66 F0 | 	shl	local10, #3
03e04     F2 2E 02 F6 | 	mov	local05, objptr
03e08     F2 38 02 F1 | 	add	local10, objptr
03e0c     C3 30 06 F6 | 	mov	local06, #195
03e10     04 38 06 F1 | 	add	local10, #4
03e14     1C 87 69 FC | 	wrlong	#195, local10
03e18     35 00 00 FF 
03e1c     0C E4 85 F1 | 	sub	objptr, ##27148
03e20                 | LR__0193
03e20                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e20     B6 01 00 FF 
03e24     02 39 06 F6 | 	mov	local10, ##@LR__5531
03e28     3B 13 02 F6 | 	mov	arg01, local41
03e2c     1C 15 02 F6 | 	mov	arg02, local10
03e30     60 32 B2 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     04 01 90 5D |  if_ne	jmp	#LR__0196
03e3c     37 31 02 F6 | 	mov	local06, local37
03e40     01 30 06 F1 | 	add	local06, #1
03e44     03 30 66 F0 | 	shl	local06, #3
03e48     35 00 00 FF 
03e4c     0C E4 05 F1 | 	add	objptr, ##27148
03e50     F2 3C 02 F6 | 	mov	local12, objptr
03e54     F2 30 02 F1 | 	add	local06, objptr
03e58     18 13 02 FB | 	rdlong	arg01, local06
03e5c     B6 01 00 FF 
03e60     05 2F 06 F6 | 	mov	local05, ##@LR__5532
03e64     17 39 02 F6 | 	mov	local10, local05
03e68     1C 15 02 F6 | 	mov	arg02, local10
03e6c     35 00 00 FF 
03e70     0C E4 85 F1 | 	sub	objptr, ##27148
03e74     1C 32 B2 FD | 	call	#__system___string_cmp
03e78     00 FA 0D F2 | 	cmp	result1, #0 wz
03e7c     C0 00 90 5D |  if_ne	jmp	#LR__0196
03e80     37 39 02 F6 | 	mov	local10, local37
03e84     01 38 06 F1 | 	add	local10, #1
03e88     03 38 66 F0 | 	shl	local10, #3
03e8c     35 00 00 FF 
03e90     0C E4 05 F1 | 	add	objptr, ##27148
03e94     F2 2E 02 F6 | 	mov	local05, objptr
03e98     F2 38 02 F1 | 	add	local10, objptr
03e9c     01 00 00 FF 
03ea0     03 30 06 F6 | 	mov	local06, ##515
03ea4     04 38 06 F1 | 	add	local10, #4
03ea8     01 00 80 FF 
03eac     1C 07 68 FC | 	wrlong	##515, local10
03eb0     04 38 86 F1 | 	sub	local10, #4
03eb4     37 29 02 F6 | 	mov	local02, local37
03eb8     02 28 06 F1 | 	add	local02, #2
03ebc     23 8D 02 F6 | 	mov	local52, local17
03ec0     01 8C 06 F1 | 	add	local52, #1
03ec4     35 00 00 FF 
03ec8     0C E4 85 F1 | 	sub	objptr, ##27148
03ecc                 | LR__0194
03ecc     46 29 52 F2 | 	cmps	local02, local52 wc
03ed0     6C 00 90 3D |  if_ae	jmp	#LR__0195
03ed4     14 39 02 F6 | 	mov	local10, local02
03ed8     03 38 66 F0 | 	shl	local10, #3
03edc     35 00 00 FF 
03ee0     0C E4 05 F1 | 	add	objptr, ##27148
03ee4     F2 38 02 F1 | 	add	local10, objptr
03ee8     1C 8F 02 FB | 	rdlong	local53, local10
03eec     37 39 02 F6 | 	mov	local10, local37
03ef0     01 38 06 F1 | 	add	local10, #1
03ef4     03 38 66 F0 | 	shl	local10, #3
03ef8     F2 2E 02 F6 | 	mov	local05, objptr
03efc     F2 38 02 F1 | 	add	local10, objptr
03f00     37 3B 02 F6 | 	mov	local11, local37
03f04     01 3A 06 F1 | 	add	local11, #1
03f08     1D 41 02 F6 | 	mov	local14, local11
03f0c     03 40 66 F0 | 	shl	local14, #3
03f10     F2 3E 02 F6 | 	mov	local13, objptr
03f14     F2 40 02 F1 | 	add	local14, objptr
03f18     20 13 02 FB | 	rdlong	arg01, local14
03f1c     47 3D 02 F6 | 	mov	local12, local53
03f20     1E 15 02 F6 | 	mov	arg02, local12
03f24     35 00 00 FF 
03f28     0C E4 85 F1 | 	sub	objptr, ##27148
03f2c     98 31 B2 FD | 	call	#__system___string_concat
03f30     FD 30 02 F6 | 	mov	local06, result1
03f34     1C 31 62 FC | 	wrlong	local06, local10
03f38     01 28 06 F1 | 	add	local02, #1
03f3c     8C FF 9F FD | 	jmp	#LR__0194
03f40                 | LR__0195
03f40                 | LR__0196
03f40                 | ' 
03f40                 | ' ' determine a type of the line and compile it
03f40                 | ' 
03f40                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f40     35 00 00 FF 
03f44     0C E4 05 F1 | 	add	objptr, ##27148
03f48     F2 12 02 FB | 	rdlong	arg01, objptr
03f4c     35 00 00 FF 
03f50     0C E4 85 F1 | 	sub	objptr, ##27148
03f54     A8 30 B0 FD | 	call	#_isdec
03f58     00 FA 0D F2 | 	cmp	result1, #0 wz
03f5c     30 00 90 AD |  if_e	jmp	#LR__0197
03f60     35 00 00 FF 
03f64     0C E4 05 F1 | 	add	objptr, ##27148
03f68     F2 12 02 FB | 	rdlong	arg01, objptr
03f6c     35 00 00 FF 
03f70     0C E4 85 F1 | 	sub	objptr, ##27148
03f74     00 14 06 F6 | 	mov	arg02, #0
03f78     E0 65 B2 FD | 	call	#__system____builtin_atoi
03f7c     52 00 00 FF 
03f80     B0 E4 05 F1 | 	add	objptr, ##42160
03f84     F2 FA 61 FC | 	wrlong	result1, objptr
03f88     52 00 00 FF 
03f8c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f90                 | LR__0197
03f90                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f90     52 00 00 FF 
03f94     B0 E4 05 F1 | 	add	objptr, ##42160
03f98     F2 2C 02 FB | 	rdlong	local04, objptr
03f9c     52 00 00 FF 
03fa0     B0 E4 85 F1 | 	sub	objptr, ##42160
03fa4     01 2C 16 F2 | 	cmp	local04, #1 wc
03fa8     40 00 90 CD |  if_b	jmp	#LR__0198
03fac     01 46 0E F2 | 	cmp	local17, #1 wz
03fb0     37 00 00 AF 
03fb4     24 E4 05 A1 |  if_e	add	objptr, ##28196
03fb8     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03fbc     37 00 00 AF 
03fc0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03fc4     17 39 02 A6 |  if_e	mov	local10, local05
03fc8     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03fcc     1C 00 90 5D |  if_ne	jmp	#LR__0198
03fd0     52 00 00 FF 
03fd4     B0 E4 05 F1 | 	add	objptr, ##42160
03fd8     F2 12 02 FB | 	rdlong	arg01, objptr
03fdc     52 00 00 FF 
03fe0     B0 E4 85 F1 | 	sub	objptr, ##42160
03fe4     C4 31 B0 FD | 	call	#_deleteline
03fe8     C8 03 90 FD | 	jmp	#LR__0209
03fec                 | LR__0198
03fec                 | ' 
03fec                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fec     37 00 00 FF 
03ff0     24 E4 05 F1 | 	add	objptr, ##28196
03ff4     F2 2C 0A FB | 	rdlong	local04, objptr wz
03ff8     37 00 00 FF 
03ffc     24 E4 85 F1 | 	sub	objptr, ##28196
04000     20 00 90 AD |  if_e	jmp	#LR__0199
04004     37 00 00 FF 
04008     24 E4 05 F1 | 	add	objptr, ##28196
0400c     F2 2E 02 FB | 	rdlong	local05, objptr
04010     37 00 00 FF 
04014     24 E4 85 F1 | 	sub	objptr, ##28196
04018     17 39 02 F6 | 	mov	local10, local05
0401c     03 38 0E F2 | 	cmp	local10, #3 wz
04020     C0 00 90 5D |  if_ne	jmp	#LR__0201
04024                 | LR__0199
04024     35 00 00 FF 
04028     20 E4 05 F1 | 	add	objptr, ##27168
0402c     F2 3C 02 FB | 	rdlong	local12, objptr
04030     35 00 00 FF 
04034     20 E4 85 F1 | 	sub	objptr, ##27168
04038     1B 3C 0E F2 | 	cmp	local12, #27 wz
0403c     A4 00 90 AD |  if_e	jmp	#LR__0201
04040     52 00 00 FF 
04044     B0 E4 05 F1 | 	add	objptr, ##42160
04048     F2 12 02 FB | 	rdlong	arg01, objptr
0404c     1B 00 00 FF 
04050     8C E4 85 F1 | 	sub	objptr, ##13964
04054     F2 16 02 FB | 	rdlong	arg03, objptr
04058     37 00 00 FF 
0405c     24 E4 85 F1 | 	sub	objptr, ##28196
04060     00 14 06 F6 | 	mov	arg02, #0
04064     C0 45 B0 FD | 	call	#_compile
04068     FD 26 0A F6 | 	mov	local01, result1 wz
0406c                 | '   err=compile(linenum,0,cont) 
0406c                 | '   if err<>0 then printerror(err,linenum): goto 101
0406c     20 00 90 AD |  if_e	jmp	#LR__0200
04070     52 00 00 FF 
04074     B0 E4 05 F1 | 	add	objptr, ##42160
04078     F2 14 02 FB | 	rdlong	arg02, objptr
0407c     52 00 00 FF 
04080     B0 E4 85 F1 | 	sub	objptr, ##42160
04084     13 13 02 F6 | 	mov	arg01, local01
04088     34 F5 B1 FD | 	call	#_printerror
0408c     44 03 90 FD | 	jmp	#LR__0210
04090                 | LR__0200
04090                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
04090     52 00 00 FF 
04094     F4 E4 05 F1 | 	add	objptr, ##42228
04098     F2 12 02 FB | 	rdlong	arg01, objptr
0409c     52 00 00 FF 
040a0     F4 E4 85 F1 | 	sub	objptr, ##42228
040a4     B6 01 00 FF 
040a8     07 15 06 F6 | 	mov	arg02, ##@LR__5533
040ac     E4 2F B2 FD | 	call	#__system___string_cmp
040b0     00 FA 0D F2 | 	cmp	result1, #0 wz
040b4     FC 02 90 AD |  if_e	jmp	#LR__0209
040b8     52 00 00 FF 
040bc     F4 E4 05 F1 | 	add	objptr, ##42228
040c0     F2 2C 02 FB | 	rdlong	local04, objptr
040c4     1B 00 00 FF 
040c8     D8 E4 85 F1 | 	sub	objptr, ##14040
040cc     F2 2C 62 FC | 	wrlong	local04, objptr
040d0     08 E4 05 F1 | 	add	objptr, #8
040d4     F2 08 68 FC | 	wrlong	#4, objptr
040d8     37 00 00 FF 
040dc     24 E4 85 F1 | 	sub	objptr, ##28196
040e0     B0 D7 9F FD | 	jmp	#LR__0070
040e4                 | LR__0201
040e4                 | '       							
040e4                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040e4     37 00 00 FF 
040e8     24 E4 05 F1 | 	add	objptr, ##28196
040ec     F2 2C 02 FB | 	rdlong	local04, objptr
040f0     37 00 00 FF 
040f4     24 E4 85 F1 | 	sub	objptr, ##28196
040f8     01 2C 0E F2 | 	cmp	local04, #1 wz
040fc     37 00 00 5F 
04100     24 E4 05 51 |  if_ne	add	objptr, ##28196
04104     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04108     37 00 00 5F 
0410c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04110     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04114     C0 00 90 5D |  if_ne	jmp	#LR__0203
04118     35 00 00 FF 
0411c     18 E4 05 F1 | 	add	objptr, ##27160
04120     F2 3C 02 FB | 	rdlong	local12, objptr
04124     35 00 00 FF 
04128     18 E4 85 F1 | 	sub	objptr, ##27160
0412c     1B 3C 0E F2 | 	cmp	local12, #27 wz
04130     A4 00 90 AD |  if_e	jmp	#LR__0203
04134     52 00 00 FF 
04138     B0 E4 05 F1 | 	add	objptr, ##42160
0413c     F2 12 02 FB | 	rdlong	arg01, objptr
04140     1B 00 00 FF 
04144     8C E4 85 F1 | 	sub	objptr, ##13964
04148     F2 16 02 FB | 	rdlong	arg03, objptr
0414c     37 00 00 FF 
04150     24 E4 85 F1 | 	sub	objptr, ##28196
04154     00 14 06 F6 | 	mov	arg02, #0
04158     CC 44 B0 FD | 	call	#_compile
0415c     FD 26 0A F6 | 	mov	local01, result1 wz
04160                 | '   err=compile(linenum,0,cont) 
04160                 | '   if err<>0 then printerror(err,linenum): goto 101
04160     20 00 90 AD |  if_e	jmp	#LR__0202
04164     52 00 00 FF 
04168     B0 E4 05 F1 | 	add	objptr, ##42160
0416c     F2 14 02 FB | 	rdlong	arg02, objptr
04170     52 00 00 FF 
04174     B0 E4 85 F1 | 	sub	objptr, ##42160
04178     13 13 02 F6 | 	mov	arg01, local01
0417c     40 F4 B1 FD | 	call	#_printerror
04180     50 02 90 FD | 	jmp	#LR__0210
04184                 | LR__0202
04184                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04184     52 00 00 FF 
04188     F4 E4 05 F1 | 	add	objptr, ##42228
0418c     F2 12 02 FB | 	rdlong	arg01, objptr
04190     52 00 00 FF 
04194     F4 E4 85 F1 | 	sub	objptr, ##42228
04198     B6 01 00 FF 
0419c     08 15 06 F6 | 	mov	arg02, ##@LR__5534
041a0     F0 2E B2 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     08 02 90 AD |  if_e	jmp	#LR__0209
041ac     52 00 00 FF 
041b0     F4 E4 05 F1 | 	add	objptr, ##42228
041b4     F2 2C 02 FB | 	rdlong	local04, objptr
041b8     1B 00 00 FF 
041bc     D8 E4 85 F1 | 	sub	objptr, ##14040
041c0     F2 2C 62 FC | 	wrlong	local04, objptr
041c4     08 E4 05 F1 | 	add	objptr, #8
041c8     F2 08 68 FC | 	wrlong	#4, objptr
041cc     37 00 00 FF 
041d0     24 E4 85 F1 | 	sub	objptr, ##28196
041d4     BC D6 9F FD | 	jmp	#LR__0070
041d8                 | LR__0203
041d8                 | ' 							 
041d8                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
041d8     37 00 00 FF 
041dc     24 E4 05 F1 | 	add	objptr, ##28196
041e0     F2 2C 0A FB | 	rdlong	local04, objptr wz
041e4     37 00 00 FF 
041e8     24 E4 85 F1 | 	sub	objptr, ##28196
041ec     37 00 00 5F 
041f0     24 E4 05 51 |  if_ne	add	objptr, ##28196
041f4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
041f8     37 00 00 5F 
041fc     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04200     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
04204     35 00 00 AF 
04208     20 E4 05 A1 |  if_e	add	objptr, ##27168
0420c     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04210     35 00 00 AF 
04214     20 E4 85 A1 |  if_e	sub	objptr, ##27168
04218     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
0421c     A4 00 90 5D |  if_ne	jmp	#LR__0205
04220     52 00 00 FF 
04224     B0 E4 05 F1 | 	add	objptr, ##42160
04228     F2 12 02 FB | 	rdlong	arg01, objptr
0422c     1B 00 00 FF 
04230     8C E4 85 F1 | 	sub	objptr, ##13964
04234     F2 16 02 FB | 	rdlong	arg03, objptr
04238     37 00 00 FF 
0423c     24 E4 85 F1 | 	sub	objptr, ##28196
04240     00 14 06 F6 | 	mov	arg02, #0
04244     A8 44 B0 FD | 	call	#_compile_assign
04248     FD 26 0A F6 | 	mov	local01, result1 wz
0424c                 | '   err=compile_assign(linenum,0,cont)
0424c                 | '   if err<>0 then printerror(err,linenum): goto 101
0424c     20 00 90 AD |  if_e	jmp	#LR__0204
04250     52 00 00 FF 
04254     B0 E4 05 F1 | 	add	objptr, ##42160
04258     F2 14 02 FB | 	rdlong	arg02, objptr
0425c     52 00 00 FF 
04260     B0 E4 85 F1 | 	sub	objptr, ##42160
04264     13 13 02 F6 | 	mov	arg01, local01
04268     54 F3 B1 FD | 	call	#_printerror
0426c     64 01 90 FD | 	jmp	#LR__0210
04270                 | LR__0204
04270                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
04270     52 00 00 FF 
04274     F4 E4 05 F1 | 	add	objptr, ##42228
04278     F2 12 02 FB | 	rdlong	arg01, objptr
0427c     52 00 00 FF 
04280     F4 E4 85 F1 | 	sub	objptr, ##42228
04284     B6 01 00 FF 
04288     09 15 06 F6 | 	mov	arg02, ##@LR__5535
0428c     04 2E B2 FD | 	call	#__system___string_cmp
04290     00 FA 0D F2 | 	cmp	result1, #0 wz
04294     1C 01 90 AD |  if_e	jmp	#LR__0209
04298     52 00 00 FF 
0429c     F4 E4 05 F1 | 	add	objptr, ##42228
042a0     F2 2C 02 FB | 	rdlong	local04, objptr
042a4     1B 00 00 FF 
042a8     D8 E4 85 F1 | 	sub	objptr, ##14040
042ac     F2 2C 62 FC | 	wrlong	local04, objptr
042b0     08 E4 05 F1 | 	add	objptr, #8
042b4     F2 08 68 FC | 	wrlong	#4, objptr
042b8     37 00 00 FF 
042bc     24 E4 85 F1 | 	sub	objptr, ##28196
042c0     D0 D5 9F FD | 	jmp	#LR__0070
042c4                 | LR__0205
042c4                 | '     							 
042c4                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
042c4     37 00 00 FF 
042c8     24 E4 05 F1 | 	add	objptr, ##28196
042cc     F2 2C 02 FB | 	rdlong	local04, objptr
042d0     37 00 00 FF 
042d4     24 E4 85 F1 | 	sub	objptr, ##28196
042d8     01 2C 0E F2 | 	cmp	local04, #1 wz
042dc     37 00 00 5F 
042e0     24 E4 05 51 |  if_ne	add	objptr, ##28196
042e4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
042e8     37 00 00 5F 
042ec     24 E4 85 51 |  if_ne	sub	objptr, ##28196
042f0     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
042f4     35 00 00 AF 
042f8     18 E4 05 A1 |  if_e	add	objptr, ##27160
042fc     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04300     35 00 00 AF 
04304     18 E4 85 A1 |  if_e	sub	objptr, ##27160
04308     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
0430c     A4 00 90 5D |  if_ne	jmp	#LR__0208
04310     52 00 00 FF 
04314     B0 E4 05 F1 | 	add	objptr, ##42160
04318     F2 12 02 FB | 	rdlong	arg01, objptr
0431c     1B 00 00 FF 
04320     8C E4 85 F1 | 	sub	objptr, ##13964
04324     F2 16 02 FB | 	rdlong	arg03, objptr
04328     37 00 00 FF 
0432c     24 E4 85 F1 | 	sub	objptr, ##28196
04330     00 14 06 F6 | 	mov	arg02, #0
04334     B8 43 B0 FD | 	call	#_compile_assign
04338     FD 26 0A F6 | 	mov	local01, result1 wz
0433c                 | '   err=compile_assign(linenum,0,cont) 
0433c                 | '   if err<>0 then printerror(err,linenum): goto 101
0433c     20 00 90 AD |  if_e	jmp	#LR__0206
04340     52 00 00 FF 
04344     B0 E4 05 F1 | 	add	objptr, ##42160
04348     F2 14 02 FB | 	rdlong	arg02, objptr
0434c     52 00 00 FF 
04350     B0 E4 85 F1 | 	sub	objptr, ##42160
04354     13 13 02 F6 | 	mov	arg01, local01
04358     64 F2 B1 FD | 	call	#_printerror
0435c     74 00 90 FD | 	jmp	#LR__0210
04360                 | LR__0206
04360                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
04360     52 00 00 FF 
04364     F4 E4 05 F1 | 	add	objptr, ##42228
04368     F2 12 02 FB | 	rdlong	arg01, objptr
0436c     52 00 00 FF 
04370     F4 E4 85 F1 | 	sub	objptr, ##42228
04374     B6 01 00 FF 
04378     0A 15 06 F6 | 	mov	arg02, ##@LR__5536
0437c     14 2D B2 FD | 	call	#__system___string_cmp
04380     00 FA 4D F2 | 	cmps	result1, #0 wz
04384     2C 00 90 AD |  if_e	jmp	#LR__0207
04388     52 00 00 FF 
0438c     F4 E4 05 F1 | 	add	objptr, ##42228
04390     F2 2C 02 FB | 	rdlong	local04, objptr
04394     1B 00 00 FF 
04398     D8 E4 85 F1 | 	sub	objptr, ##14040
0439c     F2 2C 62 FC | 	wrlong	local04, objptr
043a0     08 E4 05 F1 | 	add	objptr, #8
043a4     F2 08 68 FC | 	wrlong	#4, objptr
043a8     37 00 00 FF 
043ac     24 E4 85 F1 | 	sub	objptr, ##28196
043b0     E0 D4 9F FD | 	jmp	#LR__0070
043b4                 | LR__0207
043b4                 | LR__0208
043b4                 | LR__0209
043b4                 | ' 
043b4                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
043b4     52 00 00 FF 
043b8     B0 E4 05 F1 | 	add	objptr, ##42160
043bc     F2 2C 0A FB | 	rdlong	local04, objptr wz
043c0     52 00 00 FF 
043c4     B0 E4 85 F1 | 	sub	objptr, ##42160
043c8     B0 00 90 5D |  if_ne	jmp	#LR__0213
043cc     02 12 06 F6 | 	mov	arg01, #2
043d0     30 92 B0 FD | 	call	#_execute_line
043d4                 | LR__0210
043d4                 | '   execute_line(2)
043d4                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
043d4     52 00 00 FF 
043d8     D4 E4 05 F1 | 	add	objptr, ##42196
043dc     F2 2C 0A FB | 	rdlong	local04, objptr wz
043e0     52 00 00 FF 
043e4     D4 E4 85 F1 | 	sub	objptr, ##42196
043e8     20 00 90 5D |  if_ne	jmp	#LR__0211
043ec     B6 01 00 FF 
043f0     0B 13 06 F6 | 	mov	arg01, ##@LR__5537
043f4                 | ' 
043f4                 | ' write(text)
043f4     40 13 B2 FD | 	call	#_hg010b_spin2_write
043f8                 | ' crlf
043f8     3C 18 B2 FD | 	call	#_hg010b_spin2_crlf
043fc     B6 01 00 FF 
04400     0C 13 06 F6 | 	mov	arg01, ##@LR__5538
04404                 | ' 
04404                 | ' write(text)
04404     30 13 B2 FD | 	call	#_hg010b_spin2_write
04408                 | ' crlf
04408     2C 18 B2 FD | 	call	#_hg010b_spin2_crlf
0440c                 | LR__0211
0440c                 | '     if inload=1 andalso err>0 then print fullline$
0440c     52 00 00 FF 
04410     D4 E4 05 F1 | 	add	objptr, ##42196
04414     F2 2C 02 FB | 	rdlong	local04, objptr
04418     52 00 00 FF 
0441c     D4 E4 85 F1 | 	sub	objptr, ##42196
04420     01 2C 0E F2 | 	cmp	local04, #1 wz
04424     54 00 90 5D |  if_ne	jmp	#LR__0212
04428     01 26 56 F2 | 	cmps	local01, #1 wc
0442c     4C 00 90 CD |  if_b	jmp	#LR__0212
04430     00 12 06 F6 | 	mov	arg01, #0
04434     5C 89 B2 FD | 	call	#__system___getiolock_0616
04438     FD 12 02 F6 | 	mov	arg01, result1
0443c     2C 2C B2 FD | 	call	#__system___lockmem
04440     37 00 00 FF 
04444     20 E4 05 F1 | 	add	objptr, ##28192
04448     F2 14 02 FB | 	rdlong	arg02, objptr
0444c     37 00 00 FF 
04450     20 E4 85 F1 | 	sub	objptr, ##28192
04454     00 12 06 F6 | 	mov	arg01, #0
04458     00 16 06 F6 | 	mov	arg03, #0
0445c     00 39 B2 FD | 	call	#__system___basic_print_string
04460     00 12 06 F6 | 	mov	arg01, #0
04464     0A 14 06 F6 | 	mov	arg02, #10
04468     00 16 06 F6 | 	mov	arg03, #0
0446c     98 38 B2 FD | 	call	#__system___basic_print_char
04470     00 12 06 F6 | 	mov	arg01, #0
04474     1C 89 B2 FD | 	call	#__system___getiolock_0616
04478     FD 00 68 FC | 	wrlong	#0, result1
0447c                 | LR__0212
0447c                 | LR__0213
0447c     A7 F0 03 F6 | 	mov	ptra, fp
04480     B2 00 A0 FD | 	call	#popregs_
04484                 | _interpret_ret
04484     2D 00 64 FD | 	ret
04488                 | 
04488                 | ' 
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' '
04488                 | ' '                          END OF TOKENIZER MAIN CODE
04488                 | ' '
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' 
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' 
04488                 | ' ' Check if the part is an operator, return a token or 0 if not found
04488                 | ' 
04488                 | ' function isoperator(s as string) as ubyte
04488                 | _isoperator
04488     01 4A 05 F6 | 	mov	COUNT_, #1
0448c     A8 00 A0 FD | 	call	#pushregs_
04490                 | ' 
04490                 | ' select case s
04490     09 27 02 F6 | 	mov	local01, arg01
04494     B6 01 00 FF 
04498     12 15 06 F6 | 	mov	arg02, ##@LR__5539
0449c     13 13 02 F6 | 	mov	arg01, local01
044a0     F0 2B B2 FD | 	call	#__system___string_cmp
044a4     00 FA 0D F2 | 	cmp	result1, #0 wz
044a8     FC 01 90 AD |  if_e	jmp	#LR__0220
044ac     B6 01 00 FF 
044b0     14 15 06 F6 | 	mov	arg02, ##@LR__5540
044b4     13 13 02 F6 | 	mov	arg01, local01
044b8     D8 2B B2 FD | 	call	#__system___string_cmp
044bc     00 FA 0D F2 | 	cmp	result1, #0 wz
044c0     EC 01 90 AD |  if_e	jmp	#LR__0221
044c4     B6 01 00 FF 
044c8     16 15 06 F6 | 	mov	arg02, ##@LR__5541
044cc     13 13 02 F6 | 	mov	arg01, local01
044d0     C0 2B B2 FD | 	call	#__system___string_cmp
044d4     00 FA 0D F2 | 	cmp	result1, #0 wz
044d8     DC 01 90 AD |  if_e	jmp	#LR__0222
044dc     B6 01 00 FF 
044e0     19 15 06 F6 | 	mov	arg02, ##@LR__5542
044e4     13 13 02 F6 | 	mov	arg01, local01
044e8     A8 2B B2 FD | 	call	#__system___string_cmp
044ec     00 FA 0D F2 | 	cmp	result1, #0 wz
044f0     CC 01 90 AD |  if_e	jmp	#LR__0223
044f4     B6 01 00 FF 
044f8     1D 15 06 F6 | 	mov	arg02, ##@LR__5543
044fc     13 13 02 F6 | 	mov	arg01, local01
04500     90 2B B2 FD | 	call	#__system___string_cmp
04504     00 FA 0D F2 | 	cmp	result1, #0 wz
04508     BC 01 90 AD |  if_e	jmp	#LR__0224
0450c     B6 01 00 FF 
04510     1F 15 06 F6 | 	mov	arg02, ##@LR__5544
04514     13 13 02 F6 | 	mov	arg01, local01
04518     78 2B B2 FD | 	call	#__system___string_cmp
0451c     00 FA 0D F2 | 	cmp	result1, #0 wz
04520     AC 01 90 AD |  if_e	jmp	#LR__0225
04524     B6 01 00 FF 
04528     21 15 06 F6 | 	mov	arg02, ##@LR__5545
0452c     13 13 02 F6 | 	mov	arg01, local01
04530     60 2B B2 FD | 	call	#__system___string_cmp
04534     00 FA 0D F2 | 	cmp	result1, #0 wz
04538     9C 01 90 AD |  if_e	jmp	#LR__0226
0453c     B6 01 00 FF 
04540     25 15 06 F6 | 	mov	arg02, ##@LR__5546
04544     13 13 02 F6 | 	mov	arg01, local01
04548     48 2B B2 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     8C 01 90 AD |  if_e	jmp	#LR__0227
04554     B6 01 00 FF 
04558     29 15 06 F6 | 	mov	arg02, ##@LR__5547
0455c     13 13 02 F6 | 	mov	arg01, local01
04560     30 2B B2 FD | 	call	#__system___string_cmp
04564     00 FA 0D F2 | 	cmp	result1, #0 wz
04568     7C 01 90 AD |  if_e	jmp	#LR__0228
0456c     B6 01 00 FF 
04570     2D 15 06 F6 | 	mov	arg02, ##@LR__5548
04574     13 13 02 F6 | 	mov	arg01, local01
04578     18 2B B2 FD | 	call	#__system___string_cmp
0457c     00 FA 0D F2 | 	cmp	result1, #0 wz
04580     6C 01 90 AD |  if_e	jmp	#LR__0229
04584     B6 01 00 FF 
04588     31 15 06 F6 | 	mov	arg02, ##@LR__5549
0458c     13 13 02 F6 | 	mov	arg01, local01
04590     00 2B B2 FD | 	call	#__system___string_cmp
04594     00 FA 0D F2 | 	cmp	result1, #0 wz
04598     5C 01 90 AD |  if_e	jmp	#LR__0230
0459c     B6 01 00 FF 
045a0     35 15 06 F6 | 	mov	arg02, ##@LR__5550
045a4     13 13 02 F6 | 	mov	arg01, local01
045a8     E8 2A B2 FD | 	call	#__system___string_cmp
045ac     00 FA 0D F2 | 	cmp	result1, #0 wz
045b0     4C 01 90 AD |  if_e	jmp	#LR__0231
045b4     B6 01 00 FF 
045b8     37 15 06 F6 | 	mov	arg02, ##@LR__5551
045bc     13 13 02 F6 | 	mov	arg01, local01
045c0     D0 2A B2 FD | 	call	#__system___string_cmp
045c4     00 FA 0D F2 | 	cmp	result1, #0 wz
045c8     3C 01 90 AD |  if_e	jmp	#LR__0232
045cc     B6 01 00 FF 
045d0     3B 15 06 F6 | 	mov	arg02, ##@LR__5552
045d4     13 13 02 F6 | 	mov	arg01, local01
045d8     B8 2A B2 FD | 	call	#__system___string_cmp
045dc     00 FA 0D F2 | 	cmp	result1, #0 wz
045e0     2C 01 90 AD |  if_e	jmp	#LR__0233
045e4     B6 01 00 FF 
045e8     3D 15 06 F6 | 	mov	arg02, ##@LR__5553
045ec     13 13 02 F6 | 	mov	arg01, local01
045f0     A0 2A B2 FD | 	call	#__system___string_cmp
045f4     00 FA 0D F2 | 	cmp	result1, #0 wz
045f8     1C 01 90 AD |  if_e	jmp	#LR__0234
045fc     B6 01 00 FF 
04600     3F 15 06 F6 | 	mov	arg02, ##@LR__5554
04604     13 13 02 F6 | 	mov	arg01, local01
04608     88 2A B2 FD | 	call	#__system___string_cmp
0460c     00 FA 0D F2 | 	cmp	result1, #0 wz
04610     0C 01 90 AD |  if_e	jmp	#LR__0235
04614     B6 01 00 FF 
04618     42 15 06 F6 | 	mov	arg02, ##@LR__5555
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     70 2A B2 FD | 	call	#__system___string_cmp
04624     00 FA 0D F2 | 	cmp	result1, #0 wz
04628     FC 00 90 AD |  if_e	jmp	#LR__0236
0462c     B6 01 00 FF 
04630     45 15 06 F6 | 	mov	arg02, ##@LR__5556
04634     13 13 02 F6 | 	mov	arg01, local01
04638     58 2A B2 FD | 	call	#__system___string_cmp
0463c     00 FA 0D F2 | 	cmp	result1, #0 wz
04640     EC 00 90 AD |  if_e	jmp	#LR__0237
04644     B6 01 00 FF 
04648     47 15 06 F6 | 	mov	arg02, ##@LR__5557
0464c     13 13 02 F6 | 	mov	arg01, local01
04650     40 2A B2 FD | 	call	#__system___string_cmp
04654     00 FA 0D F2 | 	cmp	result1, #0 wz
04658     DC 00 90 AD |  if_e	jmp	#LR__0238
0465c     B6 01 00 FF 
04660     49 15 06 F6 | 	mov	arg02, ##@LR__5558
04664     13 13 02 F6 | 	mov	arg01, local01
04668     28 2A B2 FD | 	call	#__system___string_cmp
0466c     00 FA 0D F2 | 	cmp	result1, #0 wz
04670     CC 00 90 AD |  if_e	jmp	#LR__0239
04674     B6 01 00 FF 
04678     4C 15 06 F6 | 	mov	arg02, ##@LR__5559
0467c     13 13 02 F6 | 	mov	arg01, local01
04680     10 2A B2 FD | 	call	#__system___string_cmp
04684     00 FA 0D F2 | 	cmp	result1, #0 wz
04688     BC 00 90 AD |  if_e	jmp	#LR__0240
0468c     B6 01 00 FF 
04690     4F 15 06 F6 | 	mov	arg02, ##@LR__5560
04694     13 13 02 F6 | 	mov	arg01, local01
04698     F8 29 B2 FD | 	call	#__system___string_cmp
0469c     00 FA 0D F2 | 	cmp	result1, #0 wz
046a0     AC 00 90 AD |  if_e	jmp	#LR__0241
046a4     B0 00 90 FD | 	jmp	#LR__0242
046a8                 | LR__0220
046a8     01 FA 05 F6 | 	mov	result1, #1
046ac     AC 00 90 FD | 	jmp	#LR__0243
046b0                 | LR__0221
046b0     02 FA 05 F6 | 	mov	result1, #2
046b4     A4 00 90 FD | 	jmp	#LR__0243
046b8                 | LR__0222
046b8     03 FA 05 F6 | 	mov	result1, #3
046bc     9C 00 90 FD | 	jmp	#LR__0243
046c0                 | LR__0223
046c0     04 FA 05 F6 | 	mov	result1, #4
046c4     94 00 90 FD | 	jmp	#LR__0243
046c8                 | LR__0224
046c8     05 FA 05 F6 | 	mov	result1, #5
046cc     8C 00 90 FD | 	jmp	#LR__0243
046d0                 | LR__0225
046d0     06 FA 05 F6 | 	mov	result1, #6
046d4     84 00 90 FD | 	jmp	#LR__0243
046d8                 | LR__0226
046d8     07 FA 05 F6 | 	mov	result1, #7
046dc     7C 00 90 FD | 	jmp	#LR__0243
046e0                 | LR__0227
046e0     08 FA 05 F6 | 	mov	result1, #8
046e4     74 00 90 FD | 	jmp	#LR__0243
046e8                 | LR__0228
046e8     09 FA 05 F6 | 	mov	result1, #9
046ec     6C 00 90 FD | 	jmp	#LR__0243
046f0                 | LR__0229
046f0     0A FA 05 F6 | 	mov	result1, #10
046f4     64 00 90 FD | 	jmp	#LR__0243
046f8                 | LR__0230
046f8     0B FA 05 F6 | 	mov	result1, #11
046fc     5C 00 90 FD | 	jmp	#LR__0243
04700                 | LR__0231
04700     0C FA 05 F6 | 	mov	result1, #12
04704     54 00 90 FD | 	jmp	#LR__0243
04708                 | LR__0232
04708     0D FA 05 F6 | 	mov	result1, #13
0470c     4C 00 90 FD | 	jmp	#LR__0243
04710                 | LR__0233
04710     0E FA 05 F6 | 	mov	result1, #14
04714     44 00 90 FD | 	jmp	#LR__0243
04718                 | LR__0234
04718     1B FA 05 F6 | 	mov	result1, #27
0471c     3C 00 90 FD | 	jmp	#LR__0243
04720                 | LR__0235
04720     27 FA 05 F6 | 	mov	result1, #39
04724     34 00 90 FD | 	jmp	#LR__0243
04728                 | LR__0236
04728     26 FA 05 F6 | 	mov	result1, #38
0472c     2C 00 90 FD | 	jmp	#LR__0243
04730                 | LR__0237
04730     10 FA 05 F6 | 	mov	result1, #16
04734     24 00 90 FD | 	jmp	#LR__0243
04738                 | LR__0238
04738     0F FA 05 F6 | 	mov	result1, #15
0473c     1C 00 90 FD | 	jmp	#LR__0243
04740                 | LR__0239
04740     2A FA 05 F6 | 	mov	result1, #42
04744     14 00 90 FD | 	jmp	#LR__0243
04748                 | LR__0240
04748     28 FA 05 F6 | 	mov	result1, #40
0474c     0C 00 90 FD | 	jmp	#LR__0243
04750                 | LR__0241
04750     29 FA 05 F6 | 	mov	result1, #41
04754     04 00 90 FD | 	jmp	#LR__0243
04758                 | LR__0242
04758     00 FA 05 F6 | 	mov	result1, #0
0475c                 | LR__0243
0475c     A7 F0 03 F6 | 	mov	ptra, fp
04760     B2 00 A0 FD | 	call	#popregs_
04764                 | _isoperator_ret
04764     2D 00 64 FD | 	ret
04768                 | 
04768                 | ' 
04768                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04768                 | ' 
04768                 | ' function ischannel(s as string) as ulong
04768                 | _ischannel
04768     02 4A 05 F6 | 	mov	COUNT_, #2
0476c     A8 00 A0 FD | 	call	#pushregs_
04770                 | ' if left$(s,1)<>"#" then return 0
04770     09 27 02 F6 | 	mov	local01, arg01
04774     01 14 06 F6 | 	mov	arg02, #1
04778     6C 49 B2 FD | 	call	#__system__Left_S
0477c     FD 12 02 F6 | 	mov	arg01, result1
04780     B6 01 00 FF 
04784     52 15 06 F6 | 	mov	arg02, ##@LR__5561
04788     08 29 B2 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     00 FA 05 56 |  if_ne	mov	result1, #0
04794     AC 00 90 5D |  if_ne	jmp	#LR__0254
04798                 | ' if len(s)<>2 then return 0
04798     13 13 02 F6 | 	mov	arg01, local01
0479c     09 29 02 F6 | 	mov	local02, arg01
047a0     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
047a4                 | LR__0250
047a4     14 FB C9 FA | 	rdbyte	result1, local02 wz
047a8     01 28 06 51 |  if_ne	add	local02, #1
047ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
047b0                 | LR__0251
047b0     09 29 82 F1 | 	sub	local02, arg01
047b4     14 FB 01 F6 | 	mov	result1, local02
047b8     02 FA 0D F2 | 	cmp	result1, #2 wz
047bc     00 FA 05 56 |  if_ne	mov	result1, #0
047c0     80 00 90 5D |  if_ne	jmp	#LR__0254
047c4                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
047c4     13 13 02 F6 | 	mov	arg01, local01
047c8     01 14 06 F6 | 	mov	arg02, #1
047cc     A0 49 B2 FD | 	call	#__system__Right_S
047d0     FD 12 02 F6 | 	mov	arg01, result1
047d4     B6 01 00 FF 
047d8     54 15 06 F6 | 	mov	arg02, ##@LR__5562
047dc     B4 28 B2 FD | 	call	#__system___string_cmp
047e0     00 FA 55 F2 | 	cmps	result1, #0 wc
047e4     24 00 90 CD |  if_b	jmp	#LR__0252
047e8     13 13 02 F6 | 	mov	arg01, local01
047ec     01 14 06 F6 | 	mov	arg02, #1
047f0     7C 49 B2 FD | 	call	#__system__Right_S
047f4     FD 12 02 F6 | 	mov	arg01, result1
047f8     B6 01 00 FF 
047fc     56 15 06 F6 | 	mov	arg02, ##@LR__5563
04800     90 28 B2 FD | 	call	#__system___string_cmp
04804     01 FA 55 F2 | 	cmps	result1, #1 wc
04808     08 00 90 CD |  if_b	jmp	#LR__0253
0480c                 | LR__0252
0480c     00 FA 05 F6 | 	mov	result1, #0
04810     30 00 90 FD | 	jmp	#LR__0254
04814                 | LR__0253
04814                 | ' return token_channel+val(right$(s,1))
04814     13 13 02 F6 | 	mov	arg01, local01
04818     01 14 06 F6 | 	mov	arg02, #1
0481c     50 49 B2 FD | 	call	#__system__Right_S
04820     FD 12 02 F6 | 	mov	arg01, result1
04824     C8 5E B2 FD | 	call	#__system____builtin_atof
04828     FD 14 02 F6 | 	mov	arg02, result1
0482c     00 18 21 FF 
04830     00 12 06 F6 | 	mov	arg01, ##1110441984
04834     DC 52 B2 FD | 	call	#__system___float_add
04838     FD 12 02 F6 | 	mov	arg01, result1
0483c     00 14 06 F6 | 	mov	arg02, #0
04840     68 5B B2 FD | 	call	#__system___float_tointeger
04844                 | LR__0254
04844     A7 F0 03 F6 | 	mov	ptra, fp
04848     B2 00 A0 FD | 	call	#popregs_
0484c                 | _ischannel_ret
0484c     2D 00 64 FD | 	ret
04850                 | 
04850                 | ' 
04850                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04850                 | ' ' todo: add spin2/pasm constants for pin control
04850                 | ' 
04850                 | ' function isconstant(s as string) as integer
04850                 | _isconstant
04850     01 4A 05 F6 | 	mov	COUNT_, #1
04854     A8 00 A0 FD | 	call	#pushregs_
04858                 | ' 
04858                 | ' select case s
04858     09 27 02 F6 | 	mov	local01, arg01
0485c     B6 01 00 FF 
04860     58 15 06 F6 | 	mov	arg02, ##@LR__5564
04864     13 13 02 F6 | 	mov	arg01, local01
04868     28 28 B2 FD | 	call	#__system___string_cmp
0486c     00 FA 0D F2 | 	cmp	result1, #0 wz
04870     34 00 90 AD |  if_e	jmp	#LR__0260
04874     B6 01 00 FF 
04878     5E 15 06 F6 | 	mov	arg02, ##@LR__5565
0487c     13 13 02 F6 | 	mov	arg01, local01
04880     10 28 B2 FD | 	call	#__system___string_cmp
04884     00 FA 0D F2 | 	cmp	result1, #0 wz
04888     24 00 90 AD |  if_e	jmp	#LR__0261
0488c     B6 01 00 FF 
04890     65 15 06 F6 | 	mov	arg02, ##@LR__5566
04894     13 13 02 F6 | 	mov	arg01, local01
04898     F8 27 B2 FD | 	call	#__system___string_cmp
0489c     00 FA 0D F2 | 	cmp	result1, #0 wz
048a0     14 00 90 AD |  if_e	jmp	#LR__0262
048a4     18 00 90 FD | 	jmp	#LR__0263
048a8                 | LR__0260
048a8     01 FA 05 F6 | 	mov	result1, #1
048ac     14 00 90 FD | 	jmp	#LR__0264
048b0                 | LR__0261
048b0     02 FA 05 F6 | 	mov	result1, #2
048b4     0C 00 90 FD | 	jmp	#LR__0264
048b8                 | LR__0262
048b8     04 FA 05 F6 | 	mov	result1, #4
048bc     04 00 90 FD | 	jmp	#LR__0264
048c0                 | LR__0263
048c0     00 FA 05 F6 | 	mov	result1, #0
048c4                 | LR__0264
048c4     A7 F0 03 F6 | 	mov	ptra, fp
048c8     B2 00 A0 FD | 	call	#popregs_
048cc                 | _isconstant_ret
048cc     2D 00 64 FD | 	ret
048d0                 | 
048d0                 | ' 
048d0                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
048d0                 | ' 
048d0                 | ' function isnotename(s as string) as ulong
048d0                 | _isnotename
048d0     07 4A 05 F6 | 	mov	COUNT_, #7
048d4     A8 00 A0 FD | 	call	#pushregs_
048d8                 | ' if left$(s,1)<>"#" then return 0
048d8     09 27 02 F6 | 	mov	local01, arg01
048dc     01 14 06 F6 | 	mov	arg02, #1
048e0     04 48 B2 FD | 	call	#__system__Left_S
048e4     FD 12 02 F6 | 	mov	arg01, result1
048e8     B6 01 00 FF 
048ec     6D 15 06 F6 | 	mov	arg02, ##@LR__5567
048f0     A0 27 B2 FD | 	call	#__system___string_cmp
048f4     00 FA 0D F2 | 	cmp	result1, #0 wz
048f8     00 FA 05 56 |  if_ne	mov	result1, #0
048fc     30 03 90 5D |  if_ne	jmp	#LR__0293
04900                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04900     13 13 02 F6 | 	mov	arg01, local01
04904     03 14 06 F6 | 	mov	arg02, #3
04908     01 16 06 F6 | 	mov	arg03, #1
0490c     F0 48 B2 FD | 	call	#__system__Mid_S
04910     FD 12 02 F6 | 	mov	arg01, result1
04914     B6 01 00 FF 
04918     6F 15 06 F6 | 	mov	arg02, ##@LR__5568
0491c     74 27 B2 FD | 	call	#__system___string_cmp
04920     00 FA 0D F2 | 	cmp	result1, #0 wz
04924     18 00 90 5D |  if_ne	jmp	#LR__0270
04928     13 13 02 F6 | 	mov	arg01, local01
0492c     02 14 06 F6 | 	mov	arg02, #2
04930     02 16 06 F6 | 	mov	arg03, #2
04934     C8 48 B2 FD | 	call	#__system__Mid_S
04938     FD 28 02 F6 | 	mov	local02, result1
0493c     14 00 90 FD | 	jmp	#LR__0271
04940                 | LR__0270
04940     13 13 02 F6 | 	mov	arg01, local01
04944     02 14 06 F6 | 	mov	arg02, #2
04948     01 16 06 F6 | 	mov	arg03, #1
0494c     B0 48 B2 FD | 	call	#__system__Mid_S
04950     FD 28 02 F6 | 	mov	local02, result1
04954                 | LR__0271
04954                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04954     13 13 02 F6 | 	mov	arg01, local01
04958     09 2B 02 F6 | 	mov	local03, arg01
0495c     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
04960                 | LR__0272
04960     15 FB C9 FA | 	rdbyte	result1, local03 wz
04964     01 2A 06 51 |  if_ne	add	local03, #1
04968     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
0496c                 | LR__0273
0496c     09 2B 82 F1 | 	sub	local03, arg01
04970     15 15 02 F6 | 	mov	arg02, local03
04974     01 14 86 F1 | 	sub	arg02, #1
04978     13 13 02 F6 | 	mov	arg01, local01
0497c     01 16 06 F6 | 	mov	arg03, #1
04980     7C 48 B2 FD | 	call	#__system__Mid_S
04984     FD 12 02 F6 | 	mov	arg01, result1
04988     B6 01 00 FF 
0498c     71 15 06 F6 | 	mov	arg02, ##@LR__5569
04990     00 27 B2 FD | 	call	#__system___string_cmp
04994     00 FA 0D F2 | 	cmp	result1, #0 wz
04998     28 00 90 AD |  if_e	jmp	#LR__0274
0499c     13 13 02 F6 | 	mov	arg01, local01
049a0     01 14 06 F6 | 	mov	arg02, #1
049a4     C8 47 B2 FD | 	call	#__system__Right_S
049a8     FD 12 02 F6 | 	mov	arg01, result1
049ac     40 5D B2 FD | 	call	#__system____builtin_atof
049b0     FD 12 02 F6 | 	mov	arg01, result1
049b4     00 14 06 F6 | 	mov	arg02, #0
049b8     F0 59 B2 FD | 	call	#__system___float_tointeger
049bc     FD 2C 02 F6 | 	mov	local04, result1
049c0     34 00 90 FD | 	jmp	#LR__0275
049c4                 | LR__0274
049c4     13 13 02 F6 | 	mov	arg01, local01
049c8     01 14 06 F6 | 	mov	arg02, #1
049cc     A0 47 B2 FD | 	call	#__system__Right_S
049d0     FD 12 02 F6 | 	mov	arg01, result1
049d4     18 5D B2 FD | 	call	#__system____builtin_atof
049d8     FD 14 02 F6 | 	mov	arg02, result1
049dc     00 C0 5F FF 
049e0     00 12 06 F6 | 	mov	arg01, ##-1082130432
049e4     FC 54 B2 FD | 	call	#__system___float_mul
049e8     FD 12 02 F6 | 	mov	arg01, result1
049ec     00 14 06 F6 | 	mov	arg02, #0
049f0     B8 59 B2 FD | 	call	#__system___float_tointeger
049f4     FD 2C 02 F6 | 	mov	local04, result1
049f8                 | LR__0275
049f8                 | ' 
049f8                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049f8     00 2C 0E F2 | 	cmp	local04, #0 wz
049fc     24 00 90 5D |  if_ne	jmp	#LR__0276
04a00     13 13 02 F6 | 	mov	arg01, local01
04a04     01 14 06 F6 | 	mov	arg02, #1
04a08     64 47 B2 FD | 	call	#__system__Right_S
04a0c     FD 12 02 F6 | 	mov	arg01, result1
04a10     B6 01 00 FF 
04a14     73 15 06 F6 | 	mov	arg02, ##@LR__5570
04a18     78 26 B2 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     04 2C 06 56 |  if_ne	mov	local04, #4
04a24                 | LR__0276
04a24                 | ' 
04a24                 | ' select case s1
04a24     14 2F 02 F6 | 	mov	local05, local02
04a28     B6 01 00 FF 
04a2c     75 15 06 F6 | 	mov	arg02, ##@LR__5571
04a30     17 13 02 F6 | 	mov	arg01, local05
04a34     5C 26 B2 FD | 	call	#__system___string_cmp
04a38     00 FA 0D F2 | 	cmp	result1, #0 wz
04a3c     24 01 90 AD |  if_e	jmp	#LR__0277
04a40     B6 01 00 FF 
04a44     77 15 06 F6 | 	mov	arg02, ##@LR__5572
04a48     17 13 02 F6 | 	mov	arg01, local05
04a4c     44 26 B2 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     18 01 90 AD |  if_e	jmp	#LR__0278
04a58     B6 01 00 FF 
04a5c     7A 15 06 F6 | 	mov	arg02, ##@LR__5573
04a60     17 13 02 F6 | 	mov	arg01, local05
04a64     2C 26 B2 FD | 	call	#__system___string_cmp
04a68     00 FA 0D F2 | 	cmp	result1, #0 wz
04a6c     0C 01 90 AD |  if_e	jmp	#LR__0279
04a70     B6 01 00 FF 
04a74     7C 15 06 F6 | 	mov	arg02, ##@LR__5574
04a78     17 13 02 F6 | 	mov	arg01, local05
04a7c     14 26 B2 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     00 01 90 AD |  if_e	jmp	#LR__0280
04a88     B6 01 00 FF 
04a8c     7F 15 06 F6 | 	mov	arg02, ##@LR__5575
04a90     17 13 02 F6 | 	mov	arg01, local05
04a94     FC 25 B2 FD | 	call	#__system___string_cmp
04a98     00 FA 0D F2 | 	cmp	result1, #0 wz
04a9c     F4 00 90 AD |  if_e	jmp	#LR__0281
04aa0     B6 01 00 FF 
04aa4     81 15 06 F6 | 	mov	arg02, ##@LR__5576
04aa8     17 13 02 F6 | 	mov	arg01, local05
04aac     E4 25 B2 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     E8 00 90 AD |  if_e	jmp	#LR__0282
04ab8     B6 01 00 FF 
04abc     83 15 06 F6 | 	mov	arg02, ##@LR__5577
04ac0     17 13 02 F6 | 	mov	arg01, local05
04ac4     CC 25 B2 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     DC 00 90 AD |  if_e	jmp	#LR__0283
04ad0     B6 01 00 FF 
04ad4     86 15 06 F6 | 	mov	arg02, ##@LR__5578
04ad8     17 13 02 F6 | 	mov	arg01, local05
04adc     B4 25 B2 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     D0 00 90 AD |  if_e	jmp	#LR__0284
04ae8     B6 01 00 FF 
04aec     88 15 06 F6 | 	mov	arg02, ##@LR__5579
04af0     17 13 02 F6 | 	mov	arg01, local05
04af4     9C 25 B2 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     C4 00 90 AD |  if_e	jmp	#LR__0285
04b00     B6 01 00 FF 
04b04     8B 15 06 F6 | 	mov	arg02, ##@LR__5580
04b08     17 13 02 F6 | 	mov	arg01, local05
04b0c     84 25 B2 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     B8 00 90 AD |  if_e	jmp	#LR__0286
04b18     B6 01 00 FF 
04b1c     8D 15 06 F6 | 	mov	arg02, ##@LR__5581
04b20     17 13 02 F6 | 	mov	arg01, local05
04b24     6C 25 B2 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     AC 00 90 AD |  if_e	jmp	#LR__0287
04b30     B6 01 00 FF 
04b34     90 15 06 F6 | 	mov	arg02, ##@LR__5582
04b38     17 13 02 F6 | 	mov	arg01, local05
04b3c     54 25 B2 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     A0 00 90 AD |  if_e	jmp	#LR__0288
04b48     B6 01 00 FF 
04b4c     92 15 06 F6 | 	mov	arg02, ##@LR__5583
04b50     17 13 02 F6 | 	mov	arg01, local05
04b54     3C 25 B2 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     94 00 90 AD |  if_e	jmp	#LR__0289
04b60     9C 00 90 FD | 	jmp	#LR__0290
04b64                 | LR__0277
04b64     01 00 00 FF 
04b68     00 31 06 F6 | 	mov	local06, ##768
04b6c     98 00 90 FD | 	jmp	#LR__0291
04b70                 | LR__0278
04b70     01 00 00 FF 
04b74     01 31 06 F6 | 	mov	local06, ##769
04b78     8C 00 90 FD | 	jmp	#LR__0291
04b7c                 | LR__0279
04b7c     01 00 00 FF 
04b80     02 31 06 F6 | 	mov	local06, ##770
04b84     80 00 90 FD | 	jmp	#LR__0291
04b88                 | LR__0280
04b88     01 00 00 FF 
04b8c     03 31 06 F6 | 	mov	local06, ##771
04b90     74 00 90 FD | 	jmp	#LR__0291
04b94                 | LR__0281
04b94     01 00 00 FF 
04b98     04 31 06 F6 | 	mov	local06, ##772
04b9c     68 00 90 FD | 	jmp	#LR__0291
04ba0                 | LR__0282
04ba0     01 00 00 FF 
04ba4     05 31 06 F6 | 	mov	local06, ##773
04ba8     5C 00 90 FD | 	jmp	#LR__0291
04bac                 | LR__0283
04bac     01 00 00 FF 
04bb0     06 31 06 F6 | 	mov	local06, ##774
04bb4     50 00 90 FD | 	jmp	#LR__0291
04bb8                 | LR__0284
04bb8     01 00 00 FF 
04bbc     07 31 06 F6 | 	mov	local06, ##775
04bc0     44 00 90 FD | 	jmp	#LR__0291
04bc4                 | LR__0285
04bc4     01 00 00 FF 
04bc8     08 31 06 F6 | 	mov	local06, ##776
04bcc     38 00 90 FD | 	jmp	#LR__0291
04bd0                 | LR__0286
04bd0     01 00 00 FF 
04bd4     09 31 06 F6 | 	mov	local06, ##777
04bd8     2C 00 90 FD | 	jmp	#LR__0291
04bdc                 | LR__0287
04bdc     01 00 00 FF 
04be0     0A 31 06 F6 | 	mov	local06, ##778
04be4     20 00 90 FD | 	jmp	#LR__0291
04be8                 | LR__0288
04be8     01 00 00 FF 
04bec     0B 31 06 F6 | 	mov	local06, ##779
04bf0     14 00 90 FD | 	jmp	#LR__0291
04bf4                 | LR__0289
04bf4     01 00 00 FF 
04bf8     0B 31 06 F6 | 	mov	local06, ##779
04bfc     08 00 90 FD | 	jmp	#LR__0291
04c00                 | LR__0290
04c00     00 FA 05 F6 | 	mov	result1, #0
04c04     28 00 90 FD | 	jmp	#LR__0293
04c08                 | LR__0291
04c08                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04c08     FF FF 7F FF 
04c0c     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04c10     18 00 90 CD |  if_b	jmp	#LR__0292
04c14     0A 2C 56 F2 | 	cmps	local04, #10 wc
04c18     16 33 02 C6 |  if_b	mov	local07, local04
04c1c     01 32 66 C0 |  if_b	shl	local07, #1
04c20     16 33 02 C1 |  if_b	add	local07, local04
04c24     02 32 66 C0 |  if_b	shl	local07, #2
04c28     19 31 02 C1 |  if_b	add	local06, local07
04c2c                 | LR__0292
04c2c                 | ' return token
04c2c     18 FB 01 F6 | 	mov	result1, local06
04c30                 | LR__0293
04c30     A7 F0 03 F6 | 	mov	ptra, fp
04c34     B2 00 A0 FD | 	call	#popregs_
04c38                 | _isnotename_ret
04c38     2D 00 64 FD | 	ret
04c3c                 | 
04c3c                 | ' 
04c3c                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c3c                 | ' 
04c3c                 | ' function isseparator(s as string) as ubyte
04c3c                 | _isseparator
04c3c     01 4A 05 F6 | 	mov	COUNT_, #1
04c40     A8 00 A0 FD | 	call	#pushregs_
04c44                 | ' 
04c44                 | ' select case s
04c44     09 27 02 F6 | 	mov	local01, arg01
04c48     B6 01 00 FF 
04c4c     94 15 06 F6 | 	mov	arg02, ##@LR__5584
04c50     13 13 02 F6 | 	mov	arg01, local01
04c54     3C 24 B2 FD | 	call	#__system___string_cmp
04c58     00 FA 0D F2 | 	cmp	result1, #0 wz
04c5c     54 01 90 AD |  if_e	jmp	#LR__0300
04c60     B6 01 00 FF 
04c64     96 15 06 F6 | 	mov	arg02, ##@LR__5585
04c68     13 13 02 F6 | 	mov	arg01, local01
04c6c     24 24 B2 FD | 	call	#__system___string_cmp
04c70     00 FA 0D F2 | 	cmp	result1, #0 wz
04c74     44 01 90 AD |  if_e	jmp	#LR__0301
04c78     B6 01 00 FF 
04c7c     98 15 06 F6 | 	mov	arg02, ##@LR__5586
04c80     13 13 02 F6 | 	mov	arg01, local01
04c84     0C 24 B2 FD | 	call	#__system___string_cmp
04c88     00 FA 0D F2 | 	cmp	result1, #0 wz
04c8c     34 01 90 AD |  if_e	jmp	#LR__0302
04c90     B6 01 00 FF 
04c94     9A 15 06 F6 | 	mov	arg02, ##@LR__5587
04c98     13 13 02 F6 | 	mov	arg01, local01
04c9c     F4 23 B2 FD | 	call	#__system___string_cmp
04ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca4     24 01 90 AD |  if_e	jmp	#LR__0303
04ca8     B6 01 00 FF 
04cac     9C 15 06 F6 | 	mov	arg02, ##@LR__5588
04cb0     13 13 02 F6 | 	mov	arg01, local01
04cb4     DC 23 B2 FD | 	call	#__system___string_cmp
04cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cbc     14 01 90 AD |  if_e	jmp	#LR__0304
04cc0     B6 01 00 FF 
04cc4     9E 15 06 F6 | 	mov	arg02, ##@LR__5589
04cc8     13 13 02 F6 | 	mov	arg01, local01
04ccc     C4 23 B2 FD | 	call	#__system___string_cmp
04cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd4     04 01 90 AD |  if_e	jmp	#LR__0305
04cd8     B6 01 00 FF 
04cdc     A0 15 06 F6 | 	mov	arg02, ##@LR__5590
04ce0     13 13 02 F6 | 	mov	arg01, local01
04ce4     AC 23 B2 FD | 	call	#__system___string_cmp
04ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cec     F4 00 90 AD |  if_e	jmp	#LR__0306
04cf0     B6 01 00 FF 
04cf4     A2 15 06 F6 | 	mov	arg02, ##@LR__5591
04cf8     13 13 02 F6 | 	mov	arg01, local01
04cfc     94 23 B2 FD | 	call	#__system___string_cmp
04d00     00 FA 0D F2 | 	cmp	result1, #0 wz
04d04     E4 00 90 AD |  if_e	jmp	#LR__0307
04d08     B6 01 00 FF 
04d0c     A4 15 06 F6 | 	mov	arg02, ##@LR__5592
04d10     13 13 02 F6 | 	mov	arg01, local01
04d14     7C 23 B2 FD | 	call	#__system___string_cmp
04d18     00 FA 0D F2 | 	cmp	result1, #0 wz
04d1c     D4 00 90 AD |  if_e	jmp	#LR__0308
04d20     B6 01 00 FF 
04d24     A6 15 06 F6 | 	mov	arg02, ##@LR__5593
04d28     13 13 02 F6 | 	mov	arg01, local01
04d2c     64 23 B2 FD | 	call	#__system___string_cmp
04d30     00 FA 0D F2 | 	cmp	result1, #0 wz
04d34     C4 00 90 AD |  if_e	jmp	#LR__0309
04d38     B6 01 00 FF 
04d3c     A8 15 06 F6 | 	mov	arg02, ##@LR__5594
04d40     13 13 02 F6 | 	mov	arg01, local01
04d44     4C 23 B2 FD | 	call	#__system___string_cmp
04d48     00 FA 0D F2 | 	cmp	result1, #0 wz
04d4c     B4 00 90 AD |  if_e	jmp	#LR__0310
04d50     B6 01 00 FF 
04d54     AA 15 06 F6 | 	mov	arg02, ##@LR__5595
04d58     13 13 02 F6 | 	mov	arg01, local01
04d5c     34 23 B2 FD | 	call	#__system___string_cmp
04d60     00 FA 0D F2 | 	cmp	result1, #0 wz
04d64     A4 00 90 AD |  if_e	jmp	#LR__0311
04d68     B6 01 00 FF 
04d6c     AC 15 06 F6 | 	mov	arg02, ##@LR__5596
04d70     13 13 02 F6 | 	mov	arg01, local01
04d74     1C 23 B2 FD | 	call	#__system___string_cmp
04d78     00 FA 0D F2 | 	cmp	result1, #0 wz
04d7c     94 00 90 AD |  if_e	jmp	#LR__0312
04d80     B6 01 00 FF 
04d84     AE 15 06 F6 | 	mov	arg02, ##@LR__5597
04d88     13 13 02 F6 | 	mov	arg01, local01
04d8c     04 23 B2 FD | 	call	#__system___string_cmp
04d90     00 FA 0D F2 | 	cmp	result1, #0 wz
04d94     84 00 90 AD |  if_e	jmp	#LR__0313
04d98     B6 01 00 FF 
04d9c     B0 15 06 F6 | 	mov	arg02, ##@LR__5598
04da0     13 13 02 F6 | 	mov	arg01, local01
04da4     EC 22 B2 FD | 	call	#__system___string_cmp
04da8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dac     74 00 90 AD |  if_e	jmp	#LR__0314
04db0     78 00 90 FD | 	jmp	#LR__0315
04db4                 | LR__0300
04db4     01 FA 05 F6 | 	mov	result1, #1
04db8     74 00 90 FD | 	jmp	#LR__0316
04dbc                 | LR__0301
04dbc     02 FA 05 F6 | 	mov	result1, #2
04dc0     6C 00 90 FD | 	jmp	#LR__0316
04dc4                 | LR__0302
04dc4     1B FA 05 F6 | 	mov	result1, #27
04dc8     64 00 90 FD | 	jmp	#LR__0316
04dcc                 | LR__0303
04dcc     11 FA 05 F6 | 	mov	result1, #17
04dd0     5C 00 90 FD | 	jmp	#LR__0316
04dd4                 | LR__0304
04dd4     05 FA 05 F6 | 	mov	result1, #5
04dd8     54 00 90 FD | 	jmp	#LR__0316
04ddc                 | LR__0305
04ddc     06 FA 05 F6 | 	mov	result1, #6
04de0     4C 00 90 FD | 	jmp	#LR__0316
04de4                 | LR__0306
04de4     12 FA 05 F6 | 	mov	result1, #18
04de8     44 00 90 FD | 	jmp	#LR__0316
04dec                 | LR__0307
04dec     13 FA 05 F6 | 	mov	result1, #19
04df0     3C 00 90 FD | 	jmp	#LR__0316
04df4                 | LR__0308
04df4     0C FA 05 F6 | 	mov	result1, #12
04df8     34 00 90 FD | 	jmp	#LR__0316
04dfc                 | LR__0309
04dfc     14 FA 05 F6 | 	mov	result1, #20
04e00     2C 00 90 FD | 	jmp	#LR__0316
04e04                 | LR__0310
04e04     15 FA 05 F6 | 	mov	result1, #21
04e08     24 00 90 FD | 	jmp	#LR__0316
04e0c                 | LR__0311
04e0c     16 FA 05 F6 | 	mov	result1, #22
04e10     1C 00 90 FD | 	jmp	#LR__0316
04e14                 | LR__0312
04e14     FF FB 05 F6 | 	mov	result1, #511
04e18     14 00 90 FD | 	jmp	#LR__0316
04e1c                 | LR__0313
04e1c     0F FA 05 F6 | 	mov	result1, #15
04e20     0C 00 90 FD | 	jmp	#LR__0316
04e24                 | LR__0314
04e24     10 FA 05 F6 | 	mov	result1, #16
04e28     04 00 90 FD | 	jmp	#LR__0316
04e2c                 | LR__0315
04e2c     00 FA 05 F6 | 	mov	result1, #0
04e30                 | LR__0316
04e30     A7 F0 03 F6 | 	mov	ptra, fp
04e34     B2 00 A0 FD | 	call	#popregs_
04e38                 | _isseparator_ret
04e38     2D 00 64 FD | 	ret
04e3c                 | 
04e3c                 | ' 
04e3c                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e3c                 | ' 
04e3c                 | ' function iscommand(s as string) as ubyte
04e3c                 | _iscommand
04e3c     01 4A 05 F6 | 	mov	COUNT_, #1
04e40     A8 00 A0 FD | 	call	#pushregs_
04e44                 | ' 
04e44                 | ' select case s
04e44     09 27 02 F6 | 	mov	local01, arg01
04e48     B6 01 00 FF 
04e4c     B4 15 06 F6 | 	mov	arg02, ##@LR__5600
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     3C 22 B2 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     C4 0C 90 AD |  if_e	jmp	#LR__0320
04e60     B6 01 00 FF 
04e64     B9 15 06 F6 | 	mov	arg02, ##@LR__5601
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     24 22 B2 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     B4 0C 90 AD |  if_e	jmp	#LR__0321
04e78     B6 01 00 FF 
04e7c     BC 15 06 F6 | 	mov	arg02, ##@LR__5602
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     0C 22 B2 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     A4 0C 90 AD |  if_e	jmp	#LR__0322
04e90     B6 01 00 FF 
04e94     C1 15 06 F6 | 	mov	arg02, ##@LR__5603
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     F4 21 B2 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     94 0C 90 AD |  if_e	jmp	#LR__0323
04ea8     B6 01 00 FF 
04eac     C5 15 06 F6 | 	mov	arg02, ##@LR__5604
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     DC 21 B2 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     84 0C 90 AD |  if_e	jmp	#LR__0324
04ec0     B6 01 00 FF 
04ec4     CA 15 06 F6 | 	mov	arg02, ##@LR__5605
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     C4 21 B2 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     74 0C 90 AD |  if_e	jmp	#LR__0325
04ed8     B6 01 00 FF 
04edc     CE 15 06 F6 | 	mov	arg02, ##@LR__5606
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     AC 21 B2 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     64 0C 90 AD |  if_e	jmp	#LR__0326
04ef0     B6 01 00 FF 
04ef4     D1 15 06 F6 | 	mov	arg02, ##@LR__5607
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     94 21 B2 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     54 0C 90 AD |  if_e	jmp	#LR__0327
04f08     B6 01 00 FF 
04f0c     DC 15 06 F6 | 	mov	arg02, ##@LR__5608
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     7C 21 B2 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     44 0C 90 AD |  if_e	jmp	#LR__0328
04f20     B6 01 00 FF 
04f24     E0 15 06 F6 | 	mov	arg02, ##@LR__5609
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     64 21 B2 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     34 0C 90 AD |  if_e	jmp	#LR__0329
04f38     B6 01 00 FF 
04f3c     EA 15 06 F6 | 	mov	arg02, ##@LR__5610
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     4C 21 B2 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     24 0C 90 AD |  if_e	jmp	#LR__0330
04f50     B6 01 00 FF 
04f54     EE 15 06 F6 | 	mov	arg02, ##@LR__5611
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     34 21 B2 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     14 0C 90 AD |  if_e	jmp	#LR__0331
04f68     B6 01 00 FF 
04f6c     F8 15 06 F6 | 	mov	arg02, ##@LR__5612
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     1C 21 B2 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     04 0C 90 AD |  if_e	jmp	#LR__0332
04f80     B6 01 00 FF 
04f84     FC 15 06 F6 | 	mov	arg02, ##@LR__5613
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     04 21 B2 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     F4 0B 90 AD |  if_e	jmp	#LR__0333
04f98     B7 01 00 FF 
04f9c     07 14 06 F6 | 	mov	arg02, ##@LR__5614
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     EC 20 B2 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     E4 0B 90 AD |  if_e	jmp	#LR__0334
04fb0     B7 01 00 FF 
04fb4     0B 14 06 F6 | 	mov	arg02, ##@LR__5615
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     D4 20 B2 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     D4 0B 90 AD |  if_e	jmp	#LR__0335
04fc8     B7 01 00 FF 
04fcc     12 14 06 F6 | 	mov	arg02, ##@LR__5616
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     BC 20 B2 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     C4 0B 90 AD |  if_e	jmp	#LR__0336
04fe0     B7 01 00 FF 
04fe4     16 14 06 F6 | 	mov	arg02, ##@LR__5617
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     A4 20 B2 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     B4 0B 90 AD |  if_e	jmp	#LR__0337
04ff8     B7 01 00 FF 
04ffc     1C 14 06 F6 | 	mov	arg02, ##@LR__5618
05000     13 13 02 F6 | 	mov	arg01, local01
05004     8C 20 B2 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     A4 0B 90 AD |  if_e	jmp	#LR__0338
05010     B7 01 00 FF 
05014     22 14 06 F6 | 	mov	arg02, ##@LR__5619
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     74 20 B2 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     94 0B 90 AD |  if_e	jmp	#LR__0339
05028     B7 01 00 FF 
0502c     26 14 06 F6 | 	mov	arg02, ##@LR__5620
05030     13 13 02 F6 | 	mov	arg01, local01
05034     5C 20 B2 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     84 0B 90 AD |  if_e	jmp	#LR__0340
05040     B7 01 00 FF 
05044     2E 14 06 F6 | 	mov	arg02, ##@LR__5621
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     44 20 B2 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     74 0B 90 AD |  if_e	jmp	#LR__0341
05058     B7 01 00 FF 
0505c     34 14 06 F6 | 	mov	arg02, ##@LR__5622
05060     13 13 02 F6 | 	mov	arg01, local01
05064     2C 20 B2 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     64 0B 90 AD |  if_e	jmp	#LR__0342
05070     B7 01 00 FF 
05074     37 14 06 F6 | 	mov	arg02, ##@LR__5623
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     14 20 B2 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     54 0B 90 AD |  if_e	jmp	#LR__0343
05088     B7 01 00 FF 
0508c     3C 14 06 F6 | 	mov	arg02, ##@LR__5624
05090     13 13 02 F6 | 	mov	arg01, local01
05094     FC 1F B2 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     44 0B 90 AD |  if_e	jmp	#LR__0344
050a0     B7 01 00 FF 
050a4     43 14 06 F6 | 	mov	arg02, ##@LR__5625
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     E4 1F B2 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     34 0B 90 AD |  if_e	jmp	#LR__0345
050b8     B7 01 00 FF 
050bc     48 14 06 F6 | 	mov	arg02, ##@LR__5626
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     CC 1F B2 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     24 0B 90 AD |  if_e	jmp	#LR__0346
050d0     B7 01 00 FF 
050d4     4F 14 06 F6 | 	mov	arg02, ##@LR__5627
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     B4 1F B2 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     14 0B 90 AD |  if_e	jmp	#LR__0347
050e8     B7 01 00 FF 
050ec     56 14 06 F6 | 	mov	arg02, ##@LR__5628
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     9C 1F B2 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     04 0B 90 AD |  if_e	jmp	#LR__0348
05100     B7 01 00 FF 
05104     60 14 06 F6 | 	mov	arg02, ##@LR__5629
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     84 1F B2 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     F4 0A 90 AD |  if_e	jmp	#LR__0349
05118     B7 01 00 FF 
0511c     64 14 06 F6 | 	mov	arg02, ##@LR__5630
05120     13 13 02 F6 | 	mov	arg01, local01
05124     6C 1F B2 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     E4 0A 90 AD |  if_e	jmp	#LR__0350
05130     B7 01 00 FF 
05134     68 14 06 F6 | 	mov	arg02, ##@LR__5631
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     54 1F B2 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     D4 0A 90 AD |  if_e	jmp	#LR__0351
05148     B7 01 00 FF 
0514c     6F 14 06 F6 | 	mov	arg02, ##@LR__5632
05150     13 13 02 F6 | 	mov	arg01, local01
05154     3C 1F B2 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     C4 0A 90 AD |  if_e	jmp	#LR__0352
05160     B7 01 00 FF 
05164     73 14 06 F6 | 	mov	arg02, ##@LR__5633
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     24 1F B2 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     B4 0A 90 AD |  if_e	jmp	#LR__0353
05178     B7 01 00 FF 
0517c     77 14 06 F6 | 	mov	arg02, ##@LR__5634
05180     13 13 02 F6 | 	mov	arg01, local01
05184     0C 1F B2 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     A4 0A 90 AD |  if_e	jmp	#LR__0354
05190     B7 01 00 FF 
05194     7D 14 06 F6 | 	mov	arg02, ##@LR__5635
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     F4 1E B2 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     94 0A 90 AD |  if_e	jmp	#LR__0355
051a8     B7 01 00 FF 
051ac     82 14 06 F6 | 	mov	arg02, ##@LR__5636
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     DC 1E B2 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     84 0A 90 AD |  if_e	jmp	#LR__0356
051c0     B7 01 00 FF 
051c4     89 14 06 F6 | 	mov	arg02, ##@LR__5637
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     C4 1E B2 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     74 0A 90 AD |  if_e	jmp	#LR__0357
051d8     B7 01 00 FF 
051dc     8D 14 06 F6 | 	mov	arg02, ##@LR__5638
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     AC 1E B2 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     64 0A 90 AD |  if_e	jmp	#LR__0358
051f0     B7 01 00 FF 
051f4     92 14 06 F6 | 	mov	arg02, ##@LR__5639
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     94 1E B2 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     54 0A 90 AD |  if_e	jmp	#LR__0359
05208     B7 01 00 FF 
0520c     96 14 06 F6 | 	mov	arg02, ##@LR__5640
05210     13 13 02 F6 | 	mov	arg01, local01
05214     7C 1E B2 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     44 0A 90 AD |  if_e	jmp	#LR__0360
05220     B7 01 00 FF 
05224     9C 14 06 F6 | 	mov	arg02, ##@LR__5641
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     64 1E B2 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     34 0A 90 AD |  if_e	jmp	#LR__0361
05238     B7 01 00 FF 
0523c     9F 14 06 F6 | 	mov	arg02, ##@LR__5642
05240     13 13 02 F6 | 	mov	arg01, local01
05244     4C 1E B2 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     24 0A 90 AD |  if_e	jmp	#LR__0362
05250     B7 01 00 FF 
05254     A7 14 06 F6 | 	mov	arg02, ##@LR__5643
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     34 1E B2 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     14 0A 90 AD |  if_e	jmp	#LR__0363
05268     B7 01 00 FF 
0526c     AB 14 06 F6 | 	mov	arg02, ##@LR__5644
05270     13 13 02 F6 | 	mov	arg01, local01
05274     1C 1E B2 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     04 0A 90 AD |  if_e	jmp	#LR__0364
05280     B7 01 00 FF 
05284     B0 14 06 F6 | 	mov	arg02, ##@LR__5645
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     04 1E B2 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     F4 09 90 AD |  if_e	jmp	#LR__0365
05298     B7 01 00 FF 
0529c     B4 14 06 F6 | 	mov	arg02, ##@LR__5646
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     EC 1D B2 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     E4 09 90 AD |  if_e	jmp	#LR__0366
052b0     B7 01 00 FF 
052b4     B9 14 06 F6 | 	mov	arg02, ##@LR__5647
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     D4 1D B2 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     D4 09 90 AD |  if_e	jmp	#LR__0367
052c8     B7 01 00 FF 
052cc     BD 14 06 F6 | 	mov	arg02, ##@LR__5648
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     BC 1D B2 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     C4 09 90 AD |  if_e	jmp	#LR__0368
052e0     B7 01 00 FF 
052e4     C0 14 06 F6 | 	mov	arg02, ##@LR__5649
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     A4 1D B2 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     B4 09 90 AD |  if_e	jmp	#LR__0369
052f8     B7 01 00 FF 
052fc     C6 14 06 F6 | 	mov	arg02, ##@LR__5650
05300     13 13 02 F6 | 	mov	arg01, local01
05304     8C 1D B2 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     A4 09 90 AD |  if_e	jmp	#LR__0370
05310     B7 01 00 FF 
05314     CA 14 06 F6 | 	mov	arg02, ##@LR__5651
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     74 1D B2 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     94 09 90 AD |  if_e	jmp	#LR__0371
05328     B7 01 00 FF 
0532c     CE 14 06 F6 | 	mov	arg02, ##@LR__5652
05330     13 13 02 F6 | 	mov	arg01, local01
05334     5C 1D B2 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     84 09 90 AD |  if_e	jmp	#LR__0372
05340     B7 01 00 FF 
05344     D4 14 06 F6 | 	mov	arg02, ##@LR__5653
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     44 1D B2 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     74 09 90 AD |  if_e	jmp	#LR__0373
05358     B7 01 00 FF 
0535c     D9 14 06 F6 | 	mov	arg02, ##@LR__5654
05360     13 13 02 F6 | 	mov	arg01, local01
05364     2C 1D B2 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     64 09 90 AD |  if_e	jmp	#LR__0374
05370     B7 01 00 FF 
05374     DC 14 06 F6 | 	mov	arg02, ##@LR__5655
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     14 1D B2 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     54 09 90 AD |  if_e	jmp	#LR__0375
05388     B7 01 00 FF 
0538c     DF 14 06 F6 | 	mov	arg02, ##@LR__5656
05390     13 13 02 F6 | 	mov	arg01, local01
05394     FC 1C B2 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     44 09 90 AD |  if_e	jmp	#LR__0376
053a0     B7 01 00 FF 
053a4     E3 14 06 F6 | 	mov	arg02, ##@LR__5657
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     E4 1C B2 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     34 09 90 AD |  if_e	jmp	#LR__0377
053b8     B7 01 00 FF 
053bc     E6 14 06 F6 | 	mov	arg02, ##@LR__5658
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     CC 1C B2 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     24 09 90 AD |  if_e	jmp	#LR__0378
053d0     B7 01 00 FF 
053d4     EC 14 06 F6 | 	mov	arg02, ##@LR__5659
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     B4 1C B2 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     14 09 90 AD |  if_e	jmp	#LR__0379
053e8     B7 01 00 FF 
053ec     F1 14 06 F6 | 	mov	arg02, ##@LR__5660
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     9C 1C B2 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     04 09 90 AD |  if_e	jmp	#LR__0380
05400     B7 01 00 FF 
05404     F4 14 06 F6 | 	mov	arg02, ##@LR__5661
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     84 1C B2 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     F4 08 90 AD |  if_e	jmp	#LR__0381
05418     B7 01 00 FF 
0541c     F9 14 06 F6 | 	mov	arg02, ##@LR__5662
05420     13 13 02 F6 | 	mov	arg01, local01
05424     6C 1C B2 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     E4 08 90 AD |  if_e	jmp	#LR__0382
05430     B7 01 00 FF 
05434     FD 14 06 F6 | 	mov	arg02, ##@LR__5663
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     54 1C B2 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     D4 08 90 AD |  if_e	jmp	#LR__0383
05448     B7 01 00 FF 
0544c     03 15 06 F6 | 	mov	arg02, ##@LR__5664
05450     13 13 02 F6 | 	mov	arg01, local01
05454     3C 1C B2 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     C4 08 90 AD |  if_e	jmp	#LR__0384
05460     B7 01 00 FF 
05464     09 15 06 F6 | 	mov	arg02, ##@LR__5665
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     24 1C B2 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     B4 08 90 AD |  if_e	jmp	#LR__0385
05478     B7 01 00 FF 
0547c     0E 15 06 F6 | 	mov	arg02, ##@LR__5666
05480     13 13 02 F6 | 	mov	arg01, local01
05484     0C 1C B2 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     A4 08 90 AD |  if_e	jmp	#LR__0386
05490     B7 01 00 FF 
05494     11 15 06 F6 | 	mov	arg02, ##@LR__5667
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     F4 1B B2 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     94 08 90 AD |  if_e	jmp	#LR__0387
054a8     B7 01 00 FF 
054ac     17 15 06 F6 | 	mov	arg02, ##@LR__5668
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     DC 1B B2 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     84 08 90 AD |  if_e	jmp	#LR__0388
054c0     B7 01 00 FF 
054c4     1B 15 06 F6 | 	mov	arg02, ##@LR__5669
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     C4 1B B2 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     74 08 90 AD |  if_e	jmp	#LR__0389
054d8     B7 01 00 FF 
054dc     20 15 06 F6 | 	mov	arg02, ##@LR__5670
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     AC 1B B2 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     64 08 90 AD |  if_e	jmp	#LR__0390
054f0     B7 01 00 FF 
054f4     23 15 06 F6 | 	mov	arg02, ##@LR__5671
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     94 1B B2 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     54 08 90 AD |  if_e	jmp	#LR__0391
05508     B7 01 00 FF 
0550c     26 15 06 F6 | 	mov	arg02, ##@LR__5672
05510     13 13 02 F6 | 	mov	arg01, local01
05514     7C 1B B2 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     44 08 90 AD |  if_e	jmp	#LR__0392
05520     B7 01 00 FF 
05524     2B 15 06 F6 | 	mov	arg02, ##@LR__5673
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     64 1B B2 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     34 08 90 AD |  if_e	jmp	#LR__0393
05538     B7 01 00 FF 
0553c     31 15 06 F6 | 	mov	arg02, ##@LR__5674
05540     13 13 02 F6 | 	mov	arg01, local01
05544     4C 1B B2 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     24 08 90 AD |  if_e	jmp	#LR__0394
05550     B7 01 00 FF 
05554     35 15 06 F6 | 	mov	arg02, ##@LR__5675
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     34 1B B2 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     14 08 90 AD |  if_e	jmp	#LR__0395
05568     B7 01 00 FF 
0556c     3E 15 06 F6 | 	mov	arg02, ##@LR__5676
05570     13 13 02 F6 | 	mov	arg01, local01
05574     1C 1B B2 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     04 08 90 AD |  if_e	jmp	#LR__0396
05580     B7 01 00 FF 
05584     44 15 06 F6 | 	mov	arg02, ##@LR__5677
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     04 1B B2 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     F4 07 90 AD |  if_e	jmp	#LR__0397
05598     B7 01 00 FF 
0559c     4A 15 06 F6 | 	mov	arg02, ##@LR__5678
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     EC 1A B2 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     E4 07 90 AD |  if_e	jmp	#LR__0398
055b0     B7 01 00 FF 
055b4     53 15 06 F6 | 	mov	arg02, ##@LR__5679
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     D4 1A B2 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     D4 07 90 AD |  if_e	jmp	#LR__0399
055c8     B7 01 00 FF 
055cc     5D 15 06 F6 | 	mov	arg02, ##@LR__5680
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     BC 1A B2 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     C4 07 90 AD |  if_e	jmp	#LR__0400
055e0     B7 01 00 FF 
055e4     66 15 06 F6 | 	mov	arg02, ##@LR__5681
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     A4 1A B2 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     B4 07 90 AD |  if_e	jmp	#LR__0401
055f8     B7 01 00 FF 
055fc     6B 15 06 F6 | 	mov	arg02, ##@LR__5682
05600     13 13 02 F6 | 	mov	arg01, local01
05604     8C 1A B2 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     A4 07 90 AD |  if_e	jmp	#LR__0402
05610     B7 01 00 FF 
05614     6E 15 06 F6 | 	mov	arg02, ##@LR__5683
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     74 1A B2 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     94 07 90 AD |  if_e	jmp	#LR__0403
05628     B7 01 00 FF 
0562c     73 15 06 F6 | 	mov	arg02, ##@LR__5684
05630     13 13 02 F6 | 	mov	arg01, local01
05634     5C 1A B2 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     84 07 90 AD |  if_e	jmp	#LR__0404
05640     B7 01 00 FF 
05644     77 15 06 F6 | 	mov	arg02, ##@LR__5685
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     44 1A B2 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     74 07 90 AD |  if_e	jmp	#LR__0405
05658     B7 01 00 FF 
0565c     7C 15 06 F6 | 	mov	arg02, ##@LR__5686
05660     13 13 02 F6 | 	mov	arg01, local01
05664     2C 1A B2 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     64 07 90 AD |  if_e	jmp	#LR__0406
05670     B7 01 00 FF 
05674     80 15 06 F6 | 	mov	arg02, ##@LR__5687
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     14 1A B2 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     54 07 90 AD |  if_e	jmp	#LR__0407
05688     B7 01 00 FF 
0568c     89 15 06 F6 | 	mov	arg02, ##@LR__5688
05690     13 13 02 F6 | 	mov	arg01, local01
05694     FC 19 B2 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     44 07 90 AD |  if_e	jmp	#LR__0408
056a0     B7 01 00 FF 
056a4     8E 15 06 F6 | 	mov	arg02, ##@LR__5689
056a8     13 13 02 F6 | 	mov	arg01, local01
056ac     E4 19 B2 FD | 	call	#__system___string_cmp
056b0     00 FA 0D F2 | 	cmp	result1, #0 wz
056b4     34 07 90 AD |  if_e	jmp	#LR__0409
056b8     B7 01 00 FF 
056bc     94 15 06 F6 | 	mov	arg02, ##@LR__5690
056c0     13 13 02 F6 | 	mov	arg01, local01
056c4     CC 19 B2 FD | 	call	#__system___string_cmp
056c8     00 FA 0D F2 | 	cmp	result1, #0 wz
056cc     24 07 90 AD |  if_e	jmp	#LR__0410
056d0     B7 01 00 FF 
056d4     96 15 06 F6 | 	mov	arg02, ##@LR__5691
056d8     13 13 02 F6 | 	mov	arg01, local01
056dc     B4 19 B2 FD | 	call	#__system___string_cmp
056e0     00 FA 0D F2 | 	cmp	result1, #0 wz
056e4     14 07 90 AD |  if_e	jmp	#LR__0411
056e8     B7 01 00 FF 
056ec     9A 15 06 F6 | 	mov	arg02, ##@LR__5692
056f0     13 13 02 F6 | 	mov	arg01, local01
056f4     9C 19 B2 FD | 	call	#__system___string_cmp
056f8     00 FA 0D F2 | 	cmp	result1, #0 wz
056fc     04 07 90 AD |  if_e	jmp	#LR__0412
05700     B7 01 00 FF 
05704     9E 15 06 F6 | 	mov	arg02, ##@LR__5693
05708     13 13 02 F6 | 	mov	arg01, local01
0570c     84 19 B2 FD | 	call	#__system___string_cmp
05710     00 FA 0D F2 | 	cmp	result1, #0 wz
05714     F4 06 90 AD |  if_e	jmp	#LR__0413
05718     B7 01 00 FF 
0571c     A3 15 06 F6 | 	mov	arg02, ##@LR__5694
05720     13 13 02 F6 | 	mov	arg01, local01
05724     6C 19 B2 FD | 	call	#__system___string_cmp
05728     00 FA 0D F2 | 	cmp	result1, #0 wz
0572c     E4 06 90 AD |  if_e	jmp	#LR__0414
05730     B7 01 00 FF 
05734     AB 15 06 F6 | 	mov	arg02, ##@LR__5695
05738     13 13 02 F6 | 	mov	arg01, local01
0573c     54 19 B2 FD | 	call	#__system___string_cmp
05740     00 FA 0D F2 | 	cmp	result1, #0 wz
05744     D4 06 90 AD |  if_e	jmp	#LR__0415
05748     B7 01 00 FF 
0574c     AF 15 06 F6 | 	mov	arg02, ##@LR__5696
05750     13 13 02 F6 | 	mov	arg01, local01
05754     3C 19 B2 FD | 	call	#__system___string_cmp
05758     00 FA 0D F2 | 	cmp	result1, #0 wz
0575c     C4 06 90 AD |  if_e	jmp	#LR__0416
05760     B7 01 00 FF 
05764     B1 15 06 F6 | 	mov	arg02, ##@LR__5697
05768     13 13 02 F6 | 	mov	arg01, local01
0576c     24 19 B2 FD | 	call	#__system___string_cmp
05770     00 FA 0D F2 | 	cmp	result1, #0 wz
05774     B4 06 90 AD |  if_e	jmp	#LR__0417
05778     B7 01 00 FF 
0577c     B9 15 06 F6 | 	mov	arg02, ##@LR__5698
05780     13 13 02 F6 | 	mov	arg01, local01
05784     0C 19 B2 FD | 	call	#__system___string_cmp
05788     00 FA 0D F2 | 	cmp	result1, #0 wz
0578c     A4 06 90 AD |  if_e	jmp	#LR__0418
05790     B7 01 00 FF 
05794     C8 15 06 F6 | 	mov	arg02, ##@LR__5699
05798     13 13 02 F6 | 	mov	arg01, local01
0579c     F4 18 B2 FD | 	call	#__system___string_cmp
057a0     00 FA 0D F2 | 	cmp	result1, #0 wz
057a4     94 06 90 AD |  if_e	jmp	#LR__0419
057a8     B7 01 00 FF 
057ac     CC 15 06 F6 | 	mov	arg02, ##@LR__5700
057b0     13 13 02 F6 | 	mov	arg01, local01
057b4     DC 18 B2 FD | 	call	#__system___string_cmp
057b8     00 FA 0D F2 | 	cmp	result1, #0 wz
057bc     84 06 90 AD |  if_e	jmp	#LR__0420
057c0     B7 01 00 FF 
057c4     D3 15 06 F6 | 	mov	arg02, ##@LR__5701
057c8     13 13 02 F6 | 	mov	arg01, local01
057cc     C4 18 B2 FD | 	call	#__system___string_cmp
057d0     00 FA 0D F2 | 	cmp	result1, #0 wz
057d4     74 06 90 AD |  if_e	jmp	#LR__0421
057d8     B7 01 00 FF 
057dc     D7 15 06 F6 | 	mov	arg02, ##@LR__5702
057e0     13 13 02 F6 | 	mov	arg01, local01
057e4     AC 18 B2 FD | 	call	#__system___string_cmp
057e8     00 FA 0D F2 | 	cmp	result1, #0 wz
057ec     64 06 90 AD |  if_e	jmp	#LR__0422
057f0     B7 01 00 FF 
057f4     DC 15 06 F6 | 	mov	arg02, ##@LR__5703
057f8     13 13 02 F6 | 	mov	arg01, local01
057fc     94 18 B2 FD | 	call	#__system___string_cmp
05800     00 FA 0D F2 | 	cmp	result1, #0 wz
05804     54 06 90 AD |  if_e	jmp	#LR__0423
05808     B7 01 00 FF 
0580c     DF 15 06 F6 | 	mov	arg02, ##@LR__5704
05810     13 13 02 F6 | 	mov	arg01, local01
05814     7C 18 B2 FD | 	call	#__system___string_cmp
05818     00 FA 0D F2 | 	cmp	result1, #0 wz
0581c     44 06 90 AD |  if_e	jmp	#LR__0424
05820     B7 01 00 FF 
05824     E8 15 06 F6 | 	mov	arg02, ##@LR__5705
05828     13 13 02 F6 | 	mov	arg01, local01
0582c     64 18 B2 FD | 	call	#__system___string_cmp
05830     00 FA 0D F2 | 	cmp	result1, #0 wz
05834     34 06 90 AD |  if_e	jmp	#LR__0425
05838     B7 01 00 FF 
0583c     EC 15 06 F6 | 	mov	arg02, ##@LR__5706
05840     13 13 02 F6 | 	mov	arg01, local01
05844     4C 18 B2 FD | 	call	#__system___string_cmp
05848     00 FA 0D F2 | 	cmp	result1, #0 wz
0584c     24 06 90 AD |  if_e	jmp	#LR__0426
05850     B7 01 00 FF 
05854     F5 15 06 F6 | 	mov	arg02, ##@LR__5707
05858     13 13 02 F6 | 	mov	arg01, local01
0585c     34 18 B2 FD | 	call	#__system___string_cmp
05860     00 FA 0D F2 | 	cmp	result1, #0 wz
05864     14 06 90 AD |  if_e	jmp	#LR__0427
05868     B7 01 00 FF 
0586c     F9 15 06 F6 | 	mov	arg02, ##@LR__5708
05870     13 13 02 F6 | 	mov	arg01, local01
05874     1C 18 B2 FD | 	call	#__system___string_cmp
05878     00 FA 0D F2 | 	cmp	result1, #0 wz
0587c     04 06 90 AD |  if_e	jmp	#LR__0428
05880     B8 01 00 FF 
05884     00 14 06 F6 | 	mov	arg02, ##@LR__5709
05888     13 13 02 F6 | 	mov	arg01, local01
0588c     04 18 B2 FD | 	call	#__system___string_cmp
05890     00 FA 0D F2 | 	cmp	result1, #0 wz
05894     F4 05 90 AD |  if_e	jmp	#LR__0429
05898     B8 01 00 FF 
0589c     04 14 06 F6 | 	mov	arg02, ##@LR__5710
058a0     13 13 02 F6 | 	mov	arg01, local01
058a4     EC 17 B2 FD | 	call	#__system___string_cmp
058a8     00 FA 0D F2 | 	cmp	result1, #0 wz
058ac     E4 05 90 AD |  if_e	jmp	#LR__0430
058b0     B8 01 00 FF 
058b4     0B 14 06 F6 | 	mov	arg02, ##@LR__5711
058b8     13 13 02 F6 | 	mov	arg01, local01
058bc     D4 17 B2 FD | 	call	#__system___string_cmp
058c0     00 FA 0D F2 | 	cmp	result1, #0 wz
058c4     D4 05 90 AD |  if_e	jmp	#LR__0431
058c8     B8 01 00 FF 
058cc     0F 14 06 F6 | 	mov	arg02, ##@LR__5712
058d0     13 13 02 F6 | 	mov	arg01, local01
058d4     BC 17 B2 FD | 	call	#__system___string_cmp
058d8     00 FA 0D F2 | 	cmp	result1, #0 wz
058dc     C4 05 90 AD |  if_e	jmp	#LR__0432
058e0     B8 01 00 FF 
058e4     16 14 06 F6 | 	mov	arg02, ##@LR__5713
058e8     13 13 02 F6 | 	mov	arg01, local01
058ec     A4 17 B2 FD | 	call	#__system___string_cmp
058f0     00 FA 0D F2 | 	cmp	result1, #0 wz
058f4     B4 05 90 AD |  if_e	jmp	#LR__0433
058f8     B8 01 00 FF 
058fc     1A 14 06 F6 | 	mov	arg02, ##@LR__5714
05900     13 13 02 F6 | 	mov	arg01, local01
05904     8C 17 B2 FD | 	call	#__system___string_cmp
05908     00 FA 0D F2 | 	cmp	result1, #0 wz
0590c     A4 05 90 AD |  if_e	jmp	#LR__0434
05910     B8 01 00 FF 
05914     25 14 06 F6 | 	mov	arg02, ##@LR__5715
05918     13 13 02 F6 | 	mov	arg01, local01
0591c     74 17 B2 FD | 	call	#__system___string_cmp
05920     00 FA 0D F2 | 	cmp	result1, #0 wz
05924     94 05 90 AD |  if_e	jmp	#LR__0435
05928     B8 01 00 FF 
0592c     29 14 06 F6 | 	mov	arg02, ##@LR__5716
05930     13 13 02 F6 | 	mov	arg01, local01
05934     5C 17 B2 FD | 	call	#__system___string_cmp
05938     00 FA 0D F2 | 	cmp	result1, #0 wz
0593c     84 05 90 AD |  if_e	jmp	#LR__0436
05940     B8 01 00 FF 
05944     30 14 06 F6 | 	mov	arg02, ##@LR__5717
05948     13 13 02 F6 | 	mov	arg01, local01
0594c     44 17 B2 FD | 	call	#__system___string_cmp
05950     00 FA 0D F2 | 	cmp	result1, #0 wz
05954     74 05 90 AD |  if_e	jmp	#LR__0437
05958     B8 01 00 FF 
0595c     34 14 06 F6 | 	mov	arg02, ##@LR__5718
05960     13 13 02 F6 | 	mov	arg01, local01
05964     2C 17 B2 FD | 	call	#__system___string_cmp
05968     00 FA 0D F2 | 	cmp	result1, #0 wz
0596c     64 05 90 AD |  if_e	jmp	#LR__0438
05970     B8 01 00 FF 
05974     3C 14 06 F6 | 	mov	arg02, ##@LR__5719
05978     13 13 02 F6 | 	mov	arg01, local01
0597c     14 17 B2 FD | 	call	#__system___string_cmp
05980     00 FA 0D F2 | 	cmp	result1, #0 wz
05984     54 05 90 AD |  if_e	jmp	#LR__0439
05988     B8 01 00 FF 
0598c     40 14 06 F6 | 	mov	arg02, ##@LR__5720
05990     13 13 02 F6 | 	mov	arg01, local01
05994     FC 16 B2 FD | 	call	#__system___string_cmp
05998     00 FA 0D F2 | 	cmp	result1, #0 wz
0599c     44 05 90 AD |  if_e	jmp	#LR__0440
059a0     B8 01 00 FF 
059a4     47 14 06 F6 | 	mov	arg02, ##@LR__5721
059a8     13 13 02 F6 | 	mov	arg01, local01
059ac     E4 16 B2 FD | 	call	#__system___string_cmp
059b0     00 FA 0D F2 | 	cmp	result1, #0 wz
059b4     34 05 90 AD |  if_e	jmp	#LR__0441
059b8     B8 01 00 FF 
059bc     4E 14 06 F6 | 	mov	arg02, ##@LR__5722
059c0     13 13 02 F6 | 	mov	arg01, local01
059c4     CC 16 B2 FD | 	call	#__system___string_cmp
059c8     00 FA 0D F2 | 	cmp	result1, #0 wz
059cc     24 05 90 AD |  if_e	jmp	#LR__0442
059d0     B8 01 00 FF 
059d4     52 14 06 F6 | 	mov	arg02, ##@LR__5723
059d8     13 13 02 F6 | 	mov	arg01, local01
059dc     B4 16 B2 FD | 	call	#__system___string_cmp
059e0     00 FA 0D F2 | 	cmp	result1, #0 wz
059e4     14 05 90 AD |  if_e	jmp	#LR__0443
059e8     B8 01 00 FF 
059ec     58 14 06 F6 | 	mov	arg02, ##@LR__5724
059f0     13 13 02 F6 | 	mov	arg01, local01
059f4     9C 16 B2 FD | 	call	#__system___string_cmp
059f8     00 FA 0D F2 | 	cmp	result1, #0 wz
059fc     04 05 90 AD |  if_e	jmp	#LR__0444
05a00     B8 01 00 FF 
05a04     5C 14 06 F6 | 	mov	arg02, ##@LR__5725
05a08     13 13 02 F6 | 	mov	arg01, local01
05a0c     84 16 B2 FD | 	call	#__system___string_cmp
05a10     00 FA 0D F2 | 	cmp	result1, #0 wz
05a14     F4 04 90 AD |  if_e	jmp	#LR__0445
05a18     B8 01 00 FF 
05a1c     63 14 06 F6 | 	mov	arg02, ##@LR__5726
05a20     13 13 02 F6 | 	mov	arg01, local01
05a24     6C 16 B2 FD | 	call	#__system___string_cmp
05a28     00 FA 0D F2 | 	cmp	result1, #0 wz
05a2c     E4 04 90 AD |  if_e	jmp	#LR__0446
05a30     B8 01 00 FF 
05a34     68 14 06 F6 | 	mov	arg02, ##@LR__5727
05a38     13 13 02 F6 | 	mov	arg01, local01
05a3c     54 16 B2 FD | 	call	#__system___string_cmp
05a40     00 FA 0D F2 | 	cmp	result1, #0 wz
05a44     D4 04 90 AD |  if_e	jmp	#LR__0447
05a48     B8 01 00 FF 
05a4c     6D 14 06 F6 | 	mov	arg02, ##@LR__5728
05a50     13 13 02 F6 | 	mov	arg01, local01
05a54     3C 16 B2 FD | 	call	#__system___string_cmp
05a58     00 FA 0D F2 | 	cmp	result1, #0 wz
05a5c     C4 04 90 AD |  if_e	jmp	#LR__0448
05a60     B8 01 00 FF 
05a64     74 14 06 F6 | 	mov	arg02, ##@LR__5729
05a68     13 13 02 F6 | 	mov	arg01, local01
05a6c     24 16 B2 FD | 	call	#__system___string_cmp
05a70     00 FA 0D F2 | 	cmp	result1, #0 wz
05a74     B4 04 90 AD |  if_e	jmp	#LR__0449
05a78     B8 01 00 FF 
05a7c     77 14 06 F6 | 	mov	arg02, ##@LR__5730
05a80     13 13 02 F6 | 	mov	arg01, local01
05a84     0C 16 B2 FD | 	call	#__system___string_cmp
05a88     00 FA 0D F2 | 	cmp	result1, #0 wz
05a8c     A4 04 90 AD |  if_e	jmp	#LR__0450
05a90     B8 01 00 FF 
05a94     81 14 06 F6 | 	mov	arg02, ##@LR__5731
05a98     13 13 02 F6 | 	mov	arg01, local01
05a9c     F4 15 B2 FD | 	call	#__system___string_cmp
05aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa4     94 04 90 AD |  if_e	jmp	#LR__0451
05aa8     B8 01 00 FF 
05aac     85 14 06 F6 | 	mov	arg02, ##@LR__5732
05ab0     13 13 02 F6 | 	mov	arg01, local01
05ab4     DC 15 B2 FD | 	call	#__system___string_cmp
05ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
05abc     84 04 90 AD |  if_e	jmp	#LR__0452
05ac0     B8 01 00 FF 
05ac4     8D 14 06 F6 | 	mov	arg02, ##@LR__5733
05ac8     13 13 02 F6 | 	mov	arg01, local01
05acc     C4 15 B2 FD | 	call	#__system___string_cmp
05ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad4     74 04 90 AD |  if_e	jmp	#LR__0453
05ad8     B8 01 00 FF 
05adc     91 14 06 F6 | 	mov	arg02, ##@LR__5734
05ae0     13 13 02 F6 | 	mov	arg01, local01
05ae4     AC 15 B2 FD | 	call	#__system___string_cmp
05ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
05aec     64 04 90 AD |  if_e	jmp	#LR__0454
05af0     B8 01 00 FF 
05af4     97 14 06 F6 | 	mov	arg02, ##@LR__5735
05af8     13 13 02 F6 | 	mov	arg01, local01
05afc     94 15 B2 FD | 	call	#__system___string_cmp
05b00     00 FA 0D F2 | 	cmp	result1, #0 wz
05b04     54 04 90 AD |  if_e	jmp	#LR__0455
05b08     B8 01 00 FF 
05b0c     9D 14 06 F6 | 	mov	arg02, ##@LR__5736
05b10     13 13 02 F6 | 	mov	arg01, local01
05b14     7C 15 B2 FD | 	call	#__system___string_cmp
05b18     00 FA 0D F2 | 	cmp	result1, #0 wz
05b1c     44 04 90 AD |  if_e	jmp	#LR__0456
05b20     48 04 90 FD | 	jmp	#LR__0457
05b24                 | LR__0320
05b24     5C FA 05 F6 | 	mov	result1, #92
05b28     44 04 90 FD | 	jmp	#LR__0458
05b2c                 | LR__0321
05b2c     5C FA 05 F6 | 	mov	result1, #92
05b30     3C 04 90 FD | 	jmp	#LR__0458
05b34                 | LR__0322
05b34     B9 FA 05 F6 | 	mov	result1, #185
05b38     34 04 90 FD | 	jmp	#LR__0458
05b3c                 | LR__0323
05b3c     47 FA 05 F6 | 	mov	result1, #71
05b40     2C 04 90 FD | 	jmp	#LR__0458
05b44                 | LR__0324
05b44     59 FA 05 F6 | 	mov	result1, #89
05b48     24 04 90 FD | 	jmp	#LR__0458
05b4c                 | LR__0325
05b4c     59 FA 05 F6 | 	mov	result1, #89
05b50     1C 04 90 FD | 	jmp	#LR__0458
05b54                 | LR__0326
05b54     C3 FA 05 F6 | 	mov	result1, #195
05b58     14 04 90 FD | 	jmp	#LR__0458
05b5c                 | LR__0327
05b5c     AE FA 05 F6 | 	mov	result1, #174
05b60     0C 04 90 FD | 	jmp	#LR__0458
05b64                 | LR__0328
05b64     AE FA 05 F6 | 	mov	result1, #174
05b68     04 04 90 FD | 	jmp	#LR__0458
05b6c                 | LR__0329
05b6c     B1 FA 05 F6 | 	mov	result1, #177
05b70     FC 03 90 FD | 	jmp	#LR__0458
05b74                 | LR__0330
05b74     B1 FA 05 F6 | 	mov	result1, #177
05b78     F4 03 90 FD | 	jmp	#LR__0458
05b7c                 | LR__0331
05b7c     AF FA 05 F6 | 	mov	result1, #175
05b80     EC 03 90 FD | 	jmp	#LR__0458
05b84                 | LR__0332
05b84     AF FA 05 F6 | 	mov	result1, #175
05b88     E4 03 90 FD | 	jmp	#LR__0458
05b8c                 | LR__0333
05b8c     B0 FA 05 F6 | 	mov	result1, #176
05b90     DC 03 90 FD | 	jmp	#LR__0458
05b94                 | LR__0334
05b94     B0 FA 05 F6 | 	mov	result1, #176
05b98     D4 03 90 FD | 	jmp	#LR__0458
05b9c                 | LR__0335
05b9c     45 FA 05 F6 | 	mov	result1, #69
05ba0     CC 03 90 FD | 	jmp	#LR__0458
05ba4                 | LR__0336
05ba4     45 FA 05 F6 | 	mov	result1, #69
05ba8     C4 03 90 FD | 	jmp	#LR__0458
05bac                 | LR__0337
05bac     69 FA 05 F6 | 	mov	result1, #105
05bb0     BC 03 90 FD | 	jmp	#LR__0458
05bb4                 | LR__0338
05bb4     B4 FA 05 F6 | 	mov	result1, #180
05bb8     B4 03 90 FD | 	jmp	#LR__0458
05bbc                 | LR__0339
05bbc     40 FA 05 F6 | 	mov	result1, #64
05bc0     AC 03 90 FD | 	jmp	#LR__0458
05bc4                 | LR__0340
05bc4     CF FA 05 F6 | 	mov	result1, #207
05bc8     A4 03 90 FD | 	jmp	#LR__0458
05bcc                 | LR__0341
05bcc     49 FA 05 F6 | 	mov	result1, #73
05bd0     9C 03 90 FD | 	jmp	#LR__0458
05bd4                 | LR__0342
05bd4     49 FA 05 F6 | 	mov	result1, #73
05bd8     94 03 90 FD | 	jmp	#LR__0458
05bdc                 | LR__0343
05bdc     C4 FA 05 F6 | 	mov	result1, #196
05be0     8C 03 90 FD | 	jmp	#LR__0458
05be4                 | LR__0344
05be4     68 FA 05 F6 | 	mov	result1, #104
05be8     84 03 90 FD | 	jmp	#LR__0458
05bec                 | LR__0345
05bec     B7 FA 05 F6 | 	mov	result1, #183
05bf0     7C 03 90 FD | 	jmp	#LR__0458
05bf4                 | LR__0346
05bf4     73 FA 05 F6 | 	mov	result1, #115
05bf8     74 03 90 FD | 	jmp	#LR__0458
05bfc                 | LR__0347
05bfc     74 FA 05 F6 | 	mov	result1, #116
05c00     6C 03 90 FD | 	jmp	#LR__0458
05c04                 | LR__0348
05c04     6C FA 05 F6 | 	mov	result1, #108
05c08     64 03 90 FD | 	jmp	#LR__0458
05c0c                 | LR__0349
05c0c     6C FA 05 F6 | 	mov	result1, #108
05c10     5C 03 90 FD | 	jmp	#LR__0458
05c14                 | LR__0350
05c14     89 FA 05 F6 | 	mov	result1, #137
05c18     54 03 90 FD | 	jmp	#LR__0458
05c1c                 | LR__0351
05c1c     C2 FA 05 F6 | 	mov	result1, #194
05c20     4C 03 90 FD | 	jmp	#LR__0458
05c24                 | LR__0352
05c24     72 FA 05 F6 | 	mov	result1, #114
05c28     44 03 90 FD | 	jmp	#LR__0458
05c2c                 | LR__0353
05c2c     5D FA 05 F6 | 	mov	result1, #93
05c30     3C 03 90 FD | 	jmp	#LR__0458
05c34                 | LR__0354
05c34     96 FA 05 F6 | 	mov	result1, #150
05c38     34 03 90 FD | 	jmp	#LR__0458
05c3c                 | LR__0355
05c3c     43 FA 05 F6 | 	mov	result1, #67
05c40     2C 03 90 FD | 	jmp	#LR__0458
05c44                 | LR__0356
05c44     43 FA 05 F6 | 	mov	result1, #67
05c48     24 03 90 FD | 	jmp	#LR__0458
05c4c                 | LR__0357
05c4c     43 FA 05 F6 | 	mov	result1, #67
05c50     1C 03 90 FD | 	jmp	#LR__0458
05c54                 | LR__0358
05c54     5A FA 05 F6 | 	mov	result1, #90
05c58     14 03 90 FD | 	jmp	#LR__0458
05c5c                 | LR__0359
05c5c     AB FA 05 F6 | 	mov	result1, #171
05c60     0C 03 90 FD | 	jmp	#LR__0458
05c64                 | LR__0360
05c64     BD FA 05 F6 | 	mov	result1, #189
05c68     04 03 90 FD | 	jmp	#LR__0458
05c6c                 | LR__0361
05c6c     BD FA 05 F6 | 	mov	result1, #189
05c70     FC 02 90 FD | 	jmp	#LR__0458
05c74                 | LR__0362
05c74     46 FA 05 F6 | 	mov	result1, #70
05c78     F4 02 90 FD | 	jmp	#LR__0458
05c7c                 | LR__0363
05c7c     46 FA 05 F6 | 	mov	result1, #70
05c80     EC 02 90 FD | 	jmp	#LR__0458
05c84                 | LR__0364
05c84     71 FA 05 F6 | 	mov	result1, #113
05c88     E4 02 90 FD | 	jmp	#LR__0458
05c8c                 | LR__0365
05c8c     71 FA 05 F6 | 	mov	result1, #113
05c90     DC 02 90 FD | 	jmp	#LR__0458
05c94                 | LR__0366
05c94     60 FA 05 F6 | 	mov	result1, #96
05c98     D4 02 90 FD | 	jmp	#LR__0458
05c9c                 | LR__0367
05c9c     4A FA 05 F6 | 	mov	result1, #74
05ca0     CC 02 90 FD | 	jmp	#LR__0458
05ca4                 | LR__0368
05ca4     4A FA 05 F6 | 	mov	result1, #74
05ca8     C4 02 90 FD | 	jmp	#LR__0458
05cac                 | LR__0369
05cac     48 FA 05 F6 | 	mov	result1, #72
05cb0     BC 02 90 FD | 	jmp	#LR__0458
05cb4                 | LR__0370
05cb4     48 FA 05 F6 | 	mov	result1, #72
05cb8     B4 02 90 FD | 	jmp	#LR__0458
05cbc                 | LR__0371
05cbc     BB FA 05 F6 | 	mov	result1, #187
05cc0     AC 02 90 FD | 	jmp	#LR__0458
05cc4                 | LR__0372
05cc4     A9 FA 05 F6 | 	mov	result1, #169
05cc8     A4 02 90 FD | 	jmp	#LR__0458
05ccc                 | LR__0373
05ccc     4E FA 05 F6 | 	mov	result1, #78
05cd0     9C 02 90 FD | 	jmp	#LR__0458
05cd4                 | LR__0374
05cd4     4E FA 05 F6 | 	mov	result1, #78
05cd8     94 02 90 FD | 	jmp	#LR__0458
05cdc                 | LR__0375
05cdc     58 FA 05 F6 | 	mov	result1, #88
05ce0     8C 02 90 FD | 	jmp	#LR__0458
05ce4                 | LR__0376
05ce4     5F FA 05 F6 | 	mov	result1, #95
05ce8     84 02 90 FD | 	jmp	#LR__0458
05cec                 | LR__0377
05cec     5F FA 05 F6 | 	mov	result1, #95
05cf0     7C 02 90 FD | 	jmp	#LR__0458
05cf4                 | LR__0378
05cf4     B5 FA 05 F6 | 	mov	result1, #181
05cf8     74 02 90 FD | 	jmp	#LR__0458
05cfc                 | LR__0379
05cfc     4C FA 05 F6 | 	mov	result1, #76
05d00     6C 02 90 FD | 	jmp	#LR__0458
05d04                 | LR__0380
05d04     4C FA 05 F6 | 	mov	result1, #76
05d08     64 02 90 FD | 	jmp	#LR__0458
05d0c                 | LR__0381
05d0c     52 FA 05 F6 | 	mov	result1, #82
05d10     5C 02 90 FD | 	jmp	#LR__0458
05d14                 | LR__0382
05d14     52 FA 05 F6 | 	mov	result1, #82
05d18     54 02 90 FD | 	jmp	#LR__0458
05d1c                 | LR__0383
05d1c     97 FA 05 F6 | 	mov	result1, #151
05d20     4C 02 90 FD | 	jmp	#LR__0458
05d24                 | LR__0384
05d24     C6 FA 05 F6 | 	mov	result1, #198
05d28     44 02 90 FD | 	jmp	#LR__0458
05d2c                 | LR__0385
05d2c     61 FA 05 F6 | 	mov	result1, #97
05d30     3C 02 90 FD | 	jmp	#LR__0458
05d34                 | LR__0386
05d34     61 FA 05 F6 | 	mov	result1, #97
05d38     34 02 90 FD | 	jmp	#LR__0458
05d3c                 | LR__0387
05d3c     63 FA 05 F6 | 	mov	result1, #99
05d40     2C 02 90 FD | 	jmp	#LR__0458
05d44                 | LR__0388
05d44     41 FA 05 F6 | 	mov	result1, #65
05d48     24 02 90 FD | 	jmp	#LR__0458
05d4c                 | LR__0389
05d4c     4B FA 05 F6 | 	mov	result1, #75
05d50     1C 02 90 FD | 	jmp	#LR__0458
05d54                 | LR__0390
05d54     4B FA 05 F6 | 	mov	result1, #75
05d58     14 02 90 FD | 	jmp	#LR__0458
05d5c                 | LR__0391
05d5c     C1 FA 05 F6 | 	mov	result1, #193
05d60     0C 02 90 FD | 	jmp	#LR__0458
05d64                 | LR__0392
05d64     B3 FA 05 F6 | 	mov	result1, #179
05d68     04 02 90 FD | 	jmp	#LR__0458
05d6c                 | LR__0393
05d6c     5E FA 05 F6 | 	mov	result1, #94
05d70     FC 01 90 FD | 	jmp	#LR__0458
05d74                 | LR__0394
05d74     5E FA 05 F6 | 	mov	result1, #94
05d78     F4 01 90 FD | 	jmp	#LR__0458
05d7c                 | LR__0395
05d7c     7C FA 05 F6 | 	mov	result1, #124
05d80     EC 01 90 FD | 	jmp	#LR__0458
05d84                 | LR__0396
05d84     7E FA 05 F6 | 	mov	result1, #126
05d88     E4 01 90 FD | 	jmp	#LR__0458
05d8c                 | LR__0397
05d8c     7D FA 05 F6 | 	mov	result1, #125
05d90     DC 01 90 FD | 	jmp	#LR__0458
05d94                 | LR__0398
05d94     7F FA 05 F6 | 	mov	result1, #127
05d98     D4 01 90 FD | 	jmp	#LR__0458
05d9c                 | LR__0399
05d9c     80 FA 05 F6 | 	mov	result1, #128
05da0     CC 01 90 FD | 	jmp	#LR__0458
05da4                 | LR__0400
05da4     55 FA 05 F6 | 	mov	result1, #85
05da8     C4 01 90 FD | 	jmp	#LR__0458
05dac                 | LR__0401
05dac     75 FA 05 F6 | 	mov	result1, #117
05db0     BC 01 90 FD | 	jmp	#LR__0458
05db4                 | LR__0402
05db4     75 FA 05 F6 | 	mov	result1, #117
05db8     B4 01 90 FD | 	jmp	#LR__0458
05dbc                 | LR__0403
05dbc     42 FA 05 F6 | 	mov	result1, #66
05dc0     AC 01 90 FD | 	jmp	#LR__0458
05dc4                 | LR__0404
05dc4     42 FA 05 F6 | 	mov	result1, #66
05dc8     A4 01 90 FD | 	jmp	#LR__0458
05dcc                 | LR__0405
05dcc     95 FA 05 F6 | 	mov	result1, #149
05dd0     9C 01 90 FD | 	jmp	#LR__0458
05dd4                 | LR__0406
05dd4     AC FA 05 F6 | 	mov	result1, #172
05dd8     94 01 90 FD | 	jmp	#LR__0458
05ddc                 | LR__0407
05ddc     81 FA 05 F6 | 	mov	result1, #129
05de0     8C 01 90 FD | 	jmp	#LR__0458
05de4                 | LR__0408
05de4     81 FA 05 F6 | 	mov	result1, #129
05de8     84 01 90 FD | 	jmp	#LR__0458
05dec                 | LR__0409
05dec     44 FA 05 F6 | 	mov	result1, #68
05df0     7C 01 90 FD | 	jmp	#LR__0458
05df4                 | LR__0410
05df4     44 FA 05 F6 | 	mov	result1, #68
05df8     74 01 90 FD | 	jmp	#LR__0458
05dfc                 | LR__0411
05dfc     BC FA 05 F6 | 	mov	result1, #188
05e00     6C 01 90 FD | 	jmp	#LR__0458
05e04                 | LR__0412
05e04     88 FA 05 F6 | 	mov	result1, #136
05e08     64 01 90 FD | 	jmp	#LR__0458
05e0c                 | LR__0413
05e0c     B6 FA 05 F6 | 	mov	result1, #182
05e10     5C 01 90 FD | 	jmp	#LR__0458
05e14                 | LR__0414
05e14     92 FA 05 F6 | 	mov	result1, #146
05e18     54 01 90 FD | 	jmp	#LR__0458
05e1c                 | LR__0415
05e1c     BE FA 05 F6 | 	mov	result1, #190
05e20     4C 01 90 FD | 	jmp	#LR__0458
05e24                 | LR__0416
05e24     BE FA 05 F6 | 	mov	result1, #190
05e28     44 01 90 FD | 	jmp	#LR__0458
05e2c                 | LR__0417
05e2c     C7 FA 05 F6 | 	mov	result1, #199
05e30     3C 01 90 FD | 	jmp	#LR__0458
05e34                 | LR__0418
05e34     D4 FA 05 F6 | 	mov	result1, #212
05e38     34 01 90 FD | 	jmp	#LR__0458
05e3c                 | LR__0419
05e3c     D4 FA 05 F6 | 	mov	result1, #212
05e40     2C 01 90 FD | 	jmp	#LR__0458
05e44                 | LR__0420
05e44     AA FA 05 F6 | 	mov	result1, #170
05e48     24 01 90 FD | 	jmp	#LR__0458
05e4c                 | LR__0421
05e4c     4D FA 05 F6 | 	mov	result1, #77
05e50     1C 01 90 FD | 	jmp	#LR__0458
05e54                 | LR__0422
05e54     51 FA 05 F6 | 	mov	result1, #81
05e58     14 01 90 FD | 	jmp	#LR__0458
05e5c                 | LR__0423
05e5c     51 FA 05 F6 | 	mov	result1, #81
05e60     0C 01 90 FD | 	jmp	#LR__0458
05e64                 | LR__0424
05e64     D2 FA 05 F6 | 	mov	result1, #210
05e68     04 01 90 FD | 	jmp	#LR__0458
05e6c                 | LR__0425
05e6c     D2 FA 05 F6 | 	mov	result1, #210
05e70     FC 00 90 FD | 	jmp	#LR__0458
05e74                 | LR__0426
05e74     8E FA 05 F6 | 	mov	result1, #142
05e78     F4 00 90 FD | 	jmp	#LR__0458
05e7c                 | LR__0427
05e7c     8E FA 05 F6 | 	mov	result1, #142
05e80     EC 00 90 FD | 	jmp	#LR__0458
05e84                 | LR__0428
05e84     90 FA 05 F6 | 	mov	result1, #144
05e88     E4 00 90 FD | 	jmp	#LR__0458
05e8c                 | LR__0429
05e8c     90 FA 05 F6 | 	mov	result1, #144
05e90     DC 00 90 FD | 	jmp	#LR__0458
05e94                 | LR__0430
05e94     8D FA 05 F6 | 	mov	result1, #141
05e98     D4 00 90 FD | 	jmp	#LR__0458
05e9c                 | LR__0431
05e9c     8D FA 05 F6 | 	mov	result1, #141
05ea0     CC 00 90 FD | 	jmp	#LR__0458
05ea4                 | LR__0432
05ea4     8C FA 05 F6 | 	mov	result1, #140
05ea8     C4 00 90 FD | 	jmp	#LR__0458
05eac                 | LR__0433
05eac     8C FA 05 F6 | 	mov	result1, #140
05eb0     BC 00 90 FD | 	jmp	#LR__0458
05eb4                 | LR__0434
05eb4     91 FA 05 F6 | 	mov	result1, #145
05eb8     B4 00 90 FD | 	jmp	#LR__0458
05ebc                 | LR__0435
05ebc     91 FA 05 F6 | 	mov	result1, #145
05ec0     AC 00 90 FD | 	jmp	#LR__0458
05ec4                 | LR__0436
05ec4     8B FA 05 F6 | 	mov	result1, #139
05ec8     A4 00 90 FD | 	jmp	#LR__0458
05ecc                 | LR__0437
05ecc     8B FA 05 F6 | 	mov	result1, #139
05ed0     9C 00 90 FD | 	jmp	#LR__0458
05ed4                 | LR__0438
05ed4     8F FA 05 F6 | 	mov	result1, #143
05ed8     94 00 90 FD | 	jmp	#LR__0458
05edc                 | LR__0439
05edc     8F FA 05 F6 | 	mov	result1, #143
05ee0     8C 00 90 FD | 	jmp	#LR__0458
05ee4                 | LR__0440
05ee4     8F FA 05 F6 | 	mov	result1, #143
05ee8     84 00 90 FD | 	jmp	#LR__0458
05eec                 | LR__0441
05eec     B2 FA 05 F6 | 	mov	result1, #178
05ef0     7C 00 90 FD | 	jmp	#LR__0458
05ef4                 | LR__0442
05ef4     B2 FA 05 F6 | 	mov	result1, #178
05ef8     74 00 90 FD | 	jmp	#LR__0458
05efc                 | LR__0443
05efc     75 FA 05 F6 | 	mov	result1, #117
05f00     6C 00 90 FD | 	jmp	#LR__0458
05f04                 | LR__0444
05f04     75 FA 05 F6 | 	mov	result1, #117
05f08     64 00 90 FD | 	jmp	#LR__0458
05f0c                 | LR__0445
05f0c     6D FA 05 F6 | 	mov	result1, #109
05f10     5C 00 90 FD | 	jmp	#LR__0458
05f14                 | LR__0446
05f14     6D FA 05 F6 | 	mov	result1, #109
05f18     54 00 90 FD | 	jmp	#LR__0458
05f1c                 | LR__0447
05f1c     5B FA 05 F6 | 	mov	result1, #91
05f20     4C 00 90 FD | 	jmp	#LR__0458
05f24                 | LR__0448
05f24     56 FA 05 F6 | 	mov	result1, #86
05f28     44 00 90 FD | 	jmp	#LR__0458
05f2c                 | LR__0449
05f2c     56 FA 05 F6 | 	mov	result1, #86
05f30     3C 00 90 FD | 	jmp	#LR__0458
05f34                 | LR__0450
05f34     70 FA 05 F6 | 	mov	result1, #112
05f38     34 00 90 FD | 	jmp	#LR__0458
05f3c                 | LR__0451
05f3c     70 FA 05 F6 | 	mov	result1, #112
05f40     2C 00 90 FD | 	jmp	#LR__0458
05f44                 | LR__0452
05f44     57 FA 05 F6 | 	mov	result1, #87
05f48     24 00 90 FD | 	jmp	#LR__0458
05f4c                 | LR__0453
05f4c     57 FA 05 F6 | 	mov	result1, #87
05f50     1C 00 90 FD | 	jmp	#LR__0458
05f54                 | LR__0454
05f54     79 FA 05 F6 | 	mov	result1, #121
05f58     14 00 90 FD | 	jmp	#LR__0458
05f5c                 | LR__0455
05f5c     77 FA 05 F6 | 	mov	result1, #119
05f60     0C 00 90 FD | 	jmp	#LR__0458
05f64                 | LR__0456
05f64     78 FA 05 F6 | 	mov	result1, #120
05f68     04 00 90 FD | 	jmp	#LR__0458
05f6c                 | LR__0457
05f6c     00 FA 05 F6 | 	mov	result1, #0
05f70                 | LR__0458
05f70     A7 F0 03 F6 | 	mov	ptra, fp
05f74     B2 00 A0 FD | 	call	#popregs_
05f78                 | _iscommand_ret
05f78     2D 00 64 FD | 	ret
05f7c                 | 
05f7c                 | ' 
05f7c                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05f7c                 | ' 
05f7c                 | ' function isfunction(s as string) as ubyte
05f7c                 | _isfunction
05f7c     01 4A 05 F6 | 	mov	COUNT_, #1
05f80     A8 00 A0 FD | 	call	#pushregs_
05f84                 | ' 
05f84                 | ' select case s
05f84     09 27 02 F6 | 	mov	local01, arg01
05f88     B8 01 00 FF 
05f8c     A3 14 06 F6 | 	mov	arg02, ##@LR__5737
05f90     13 13 02 F6 | 	mov	arg01, local01
05f94     FC 10 B2 FD | 	call	#__system___string_cmp
05f98     00 FA 0D F2 | 	cmp	result1, #0 wz
05f9c     74 05 90 AD |  if_e	jmp	#LR__0460
05fa0     B8 01 00 FF 
05fa4     A7 14 06 F6 | 	mov	arg02, ##@LR__5738
05fa8     13 13 02 F6 | 	mov	arg01, local01
05fac     E4 10 B2 FD | 	call	#__system___string_cmp
05fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
05fb4     64 05 90 AD |  if_e	jmp	#LR__0461
05fb8     B8 01 00 FF 
05fbc     AC 14 06 F6 | 	mov	arg02, ##@LR__5739
05fc0     13 13 02 F6 | 	mov	arg01, local01
05fc4     CC 10 B2 FD | 	call	#__system___string_cmp
05fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fcc     54 05 90 AD |  if_e	jmp	#LR__0462
05fd0     B8 01 00 FF 
05fd4     B0 14 06 F6 | 	mov	arg02, ##@LR__5740
05fd8     13 13 02 F6 | 	mov	arg01, local01
05fdc     B4 10 B2 FD | 	call	#__system___string_cmp
05fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
05fe4     44 05 90 AD |  if_e	jmp	#LR__0463
05fe8     B8 01 00 FF 
05fec     B5 14 06 F6 | 	mov	arg02, ##@LR__5741
05ff0     13 13 02 F6 | 	mov	arg01, local01
05ff4     9C 10 B2 FD | 	call	#__system___string_cmp
05ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ffc     34 05 90 AD |  if_e	jmp	#LR__0464
06000     B8 01 00 FF 
06004     B9 14 06 F6 | 	mov	arg02, ##@LR__5742
06008     13 13 02 F6 | 	mov	arg01, local01
0600c     84 10 B2 FD | 	call	#__system___string_cmp
06010     00 FA 0D F2 | 	cmp	result1, #0 wz
06014     24 05 90 AD |  if_e	jmp	#LR__0465
06018     B8 01 00 FF 
0601c     BE 14 06 F6 | 	mov	arg02, ##@LR__5743
06020     13 13 02 F6 | 	mov	arg01, local01
06024     6C 10 B2 FD | 	call	#__system___string_cmp
06028     00 FA 0D F2 | 	cmp	result1, #0 wz
0602c     14 05 90 AD |  if_e	jmp	#LR__0466
06030     B8 01 00 FF 
06034     C2 14 06 F6 | 	mov	arg02, ##@LR__5744
06038     13 13 02 F6 | 	mov	arg01, local01
0603c     54 10 B2 FD | 	call	#__system___string_cmp
06040     00 FA 0D F2 | 	cmp	result1, #0 wz
06044     04 05 90 AD |  if_e	jmp	#LR__0467
06048     B8 01 00 FF 
0604c     C7 14 06 F6 | 	mov	arg02, ##@LR__5745
06050     13 13 02 F6 | 	mov	arg01, local01
06054     3C 10 B2 FD | 	call	#__system___string_cmp
06058     00 FA 0D F2 | 	cmp	result1, #0 wz
0605c     F4 04 90 AD |  if_e	jmp	#LR__0468
06060     B8 01 00 FF 
06064     CC 14 06 F6 | 	mov	arg02, ##@LR__5746
06068     13 13 02 F6 | 	mov	arg01, local01
0606c     24 10 B2 FD | 	call	#__system___string_cmp
06070     00 FA 0D F2 | 	cmp	result1, #0 wz
06074     E4 04 90 AD |  if_e	jmp	#LR__0469
06078     B8 01 00 FF 
0607c     D4 14 06 F6 | 	mov	arg02, ##@LR__5747
06080     13 13 02 F6 | 	mov	arg01, local01
06084     0C 10 B2 FD | 	call	#__system___string_cmp
06088     00 FA 0D F2 | 	cmp	result1, #0 wz
0608c     D4 04 90 AD |  if_e	jmp	#LR__0470
06090     B8 01 00 FF 
06094     D8 14 06 F6 | 	mov	arg02, ##@LR__5748
06098     13 13 02 F6 | 	mov	arg01, local01
0609c     F4 0F B2 FD | 	call	#__system___string_cmp
060a0     00 FA 0D F2 | 	cmp	result1, #0 wz
060a4     C4 04 90 AD |  if_e	jmp	#LR__0471
060a8     B8 01 00 FF 
060ac     DE 14 06 F6 | 	mov	arg02, ##@LR__5749
060b0     13 13 02 F6 | 	mov	arg01, local01
060b4     DC 0F B2 FD | 	call	#__system___string_cmp
060b8     00 FA 0D F2 | 	cmp	result1, #0 wz
060bc     B4 04 90 AD |  if_e	jmp	#LR__0472
060c0     B8 01 00 FF 
060c4     E7 14 06 F6 | 	mov	arg02, ##@LR__5750
060c8     13 13 02 F6 | 	mov	arg01, local01
060cc     C4 0F B2 FD | 	call	#__system___string_cmp
060d0     00 FA 0D F2 | 	cmp	result1, #0 wz
060d4     A4 04 90 AD |  if_e	jmp	#LR__0473
060d8     B8 01 00 FF 
060dc     EB 14 06 F6 | 	mov	arg02, ##@LR__5751
060e0     13 13 02 F6 | 	mov	arg01, local01
060e4     AC 0F B2 FD | 	call	#__system___string_cmp
060e8     00 FA 0D F2 | 	cmp	result1, #0 wz
060ec     94 04 90 AD |  if_e	jmp	#LR__0474
060f0     B8 01 00 FF 
060f4     EF 14 06 F6 | 	mov	arg02, ##@LR__5752
060f8     13 13 02 F6 | 	mov	arg01, local01
060fc     94 0F B2 FD | 	call	#__system___string_cmp
06100     00 FA 0D F2 | 	cmp	result1, #0 wz
06104     84 04 90 AD |  if_e	jmp	#LR__0475
06108     B8 01 00 FF 
0610c     F3 14 06 F6 | 	mov	arg02, ##@LR__5753
06110     13 13 02 F6 | 	mov	arg01, local01
06114     7C 0F B2 FD | 	call	#__system___string_cmp
06118     00 FA 0D F2 | 	cmp	result1, #0 wz
0611c     74 04 90 AD |  if_e	jmp	#LR__0476
06120     B8 01 00 FF 
06124     FC 14 06 F6 | 	mov	arg02, ##@LR__5754
06128     13 13 02 F6 | 	mov	arg01, local01
0612c     64 0F B2 FD | 	call	#__system___string_cmp
06130     00 FA 0D F2 | 	cmp	result1, #0 wz
06134     64 04 90 AD |  if_e	jmp	#LR__0477
06138     B8 01 00 FF 
0613c     05 15 06 F6 | 	mov	arg02, ##@LR__5755
06140     13 13 02 F6 | 	mov	arg01, local01
06144     4C 0F B2 FD | 	call	#__system___string_cmp
06148     00 FA 0D F2 | 	cmp	result1, #0 wz
0614c     54 04 90 AD |  if_e	jmp	#LR__0478
06150     B8 01 00 FF 
06154     09 15 06 F6 | 	mov	arg02, ##@LR__5756
06158     13 13 02 F6 | 	mov	arg01, local01
0615c     34 0F B2 FD | 	call	#__system___string_cmp
06160     00 FA 0D F2 | 	cmp	result1, #0 wz
06164     44 04 90 AD |  if_e	jmp	#LR__0479
06168     B8 01 00 FF 
0616c     17 15 06 F6 | 	mov	arg02, ##@LR__5757
06170     13 13 02 F6 | 	mov	arg01, local01
06174     1C 0F B2 FD | 	call	#__system___string_cmp
06178     00 FA 0D F2 | 	cmp	result1, #0 wz
0617c     34 04 90 AD |  if_e	jmp	#LR__0480
06180     B8 01 00 FF 
06184     24 15 06 F6 | 	mov	arg02, ##@LR__5758
06188     13 13 02 F6 | 	mov	arg01, local01
0618c     04 0F B2 FD | 	call	#__system___string_cmp
06190     00 FA 0D F2 | 	cmp	result1, #0 wz
06194     24 04 90 AD |  if_e	jmp	#LR__0481
06198     B8 01 00 FF 
0619c     2C 15 06 F6 | 	mov	arg02, ##@LR__5759
061a0     13 13 02 F6 | 	mov	arg01, local01
061a4     EC 0E B2 FD | 	call	#__system___string_cmp
061a8     00 FA 0D F2 | 	cmp	result1, #0 wz
061ac     14 04 90 AD |  if_e	jmp	#LR__0482
061b0     B8 01 00 FF 
061b4     30 15 06 F6 | 	mov	arg02, ##@LR__5760
061b8     13 13 02 F6 | 	mov	arg01, local01
061bc     D4 0E B2 FD | 	call	#__system___string_cmp
061c0     00 FA 0D F2 | 	cmp	result1, #0 wz
061c4     04 04 90 AD |  if_e	jmp	#LR__0483
061c8     B8 01 00 FF 
061cc     35 15 06 F6 | 	mov	arg02, ##@LR__5761
061d0     13 13 02 F6 | 	mov	arg01, local01
061d4     BC 0E B2 FD | 	call	#__system___string_cmp
061d8     00 FA 0D F2 | 	cmp	result1, #0 wz
061dc     F4 03 90 AD |  if_e	jmp	#LR__0484
061e0     B8 01 00 FF 
061e4     3C 15 06 F6 | 	mov	arg02, ##@LR__5762
061e8     13 13 02 F6 | 	mov	arg01, local01
061ec     A4 0E B2 FD | 	call	#__system___string_cmp
061f0     00 FA 0D F2 | 	cmp	result1, #0 wz
061f4     E4 03 90 AD |  if_e	jmp	#LR__0485
061f8     B8 01 00 FF 
061fc     40 15 06 F6 | 	mov	arg02, ##@LR__5763
06200     13 13 02 F6 | 	mov	arg01, local01
06204     8C 0E B2 FD | 	call	#__system___string_cmp
06208     00 FA 0D F2 | 	cmp	result1, #0 wz
0620c     D4 03 90 AD |  if_e	jmp	#LR__0486
06210     B8 01 00 FF 
06214     46 15 06 F6 | 	mov	arg02, ##@LR__5764
06218     13 13 02 F6 | 	mov	arg01, local01
0621c     74 0E B2 FD | 	call	#__system___string_cmp
06220     00 FA 0D F2 | 	cmp	result1, #0 wz
06224     C4 03 90 AD |  if_e	jmp	#LR__0487
06228     B8 01 00 FF 
0622c     4A 15 06 F6 | 	mov	arg02, ##@LR__5765
06230     13 13 02 F6 | 	mov	arg01, local01
06234     5C 0E B2 FD | 	call	#__system___string_cmp
06238     00 FA 0D F2 | 	cmp	result1, #0 wz
0623c     B4 03 90 AD |  if_e	jmp	#LR__0488
06240     B8 01 00 FF 
06244     4E 15 06 F6 | 	mov	arg02, ##@LR__5766
06248     13 13 02 F6 | 	mov	arg01, local01
0624c     44 0E B2 FD | 	call	#__system___string_cmp
06250     00 FA 0D F2 | 	cmp	result1, #0 wz
06254     A4 03 90 AD |  if_e	jmp	#LR__0489
06258     B8 01 00 FF 
0625c     54 15 06 F6 | 	mov	arg02, ##@LR__5767
06260     13 13 02 F6 | 	mov	arg01, local01
06264     2C 0E B2 FD | 	call	#__system___string_cmp
06268     00 FA 0D F2 | 	cmp	result1, #0 wz
0626c     94 03 90 AD |  if_e	jmp	#LR__0490
06270     B8 01 00 FF 
06274     5B 15 06 F6 | 	mov	arg02, ##@LR__5768
06278     13 13 02 F6 | 	mov	arg01, local01
0627c     14 0E B2 FD | 	call	#__system___string_cmp
06280     00 FA 0D F2 | 	cmp	result1, #0 wz
06284     84 03 90 AD |  if_e	jmp	#LR__0491
06288     B8 01 00 FF 
0628c     61 15 06 F6 | 	mov	arg02, ##@LR__5769
06290     13 13 02 F6 | 	mov	arg01, local01
06294     FC 0D B2 FD | 	call	#__system___string_cmp
06298     00 FA 0D F2 | 	cmp	result1, #0 wz
0629c     74 03 90 AD |  if_e	jmp	#LR__0492
062a0     B8 01 00 FF 
062a4     66 15 06 F6 | 	mov	arg02, ##@LR__5770
062a8     13 13 02 F6 | 	mov	arg01, local01
062ac     E4 0D B2 FD | 	call	#__system___string_cmp
062b0     00 FA 0D F2 | 	cmp	result1, #0 wz
062b4     64 03 90 AD |  if_e	jmp	#LR__0493
062b8     B8 01 00 FF 
062bc     6D 15 06 F6 | 	mov	arg02, ##@LR__5771
062c0     13 13 02 F6 | 	mov	arg01, local01
062c4     CC 0D B2 FD | 	call	#__system___string_cmp
062c8     00 FA 0D F2 | 	cmp	result1, #0 wz
062cc     54 03 90 AD |  if_e	jmp	#LR__0494
062d0     B8 01 00 FF 
062d4     74 15 06 F6 | 	mov	arg02, ##@LR__5772
062d8     13 13 02 F6 | 	mov	arg01, local01
062dc     B4 0D B2 FD | 	call	#__system___string_cmp
062e0     00 FA 0D F2 | 	cmp	result1, #0 wz
062e4     44 03 90 AD |  if_e	jmp	#LR__0495
062e8     B8 01 00 FF 
062ec     7B 15 06 F6 | 	mov	arg02, ##@LR__5773
062f0     13 13 02 F6 | 	mov	arg01, local01
062f4     9C 0D B2 FD | 	call	#__system___string_cmp
062f8     00 FA 0D F2 | 	cmp	result1, #0 wz
062fc     34 03 90 AD |  if_e	jmp	#LR__0496
06300     B8 01 00 FF 
06304     82 15 06 F6 | 	mov	arg02, ##@LR__5774
06308     13 13 02 F6 | 	mov	arg01, local01
0630c     84 0D B2 FD | 	call	#__system___string_cmp
06310     00 FA 0D F2 | 	cmp	result1, #0 wz
06314     24 03 90 AD |  if_e	jmp	#LR__0497
06318     B8 01 00 FF 
0631c     87 15 06 F6 | 	mov	arg02, ##@LR__5775
06320     13 13 02 F6 | 	mov	arg01, local01
06324     6C 0D B2 FD | 	call	#__system___string_cmp
06328     00 FA 0D F2 | 	cmp	result1, #0 wz
0632c     14 03 90 AD |  if_e	jmp	#LR__0498
06330     B8 01 00 FF 
06334     8C 15 06 F6 | 	mov	arg02, ##@LR__5776
06338     13 13 02 F6 | 	mov	arg01, local01
0633c     54 0D B2 FD | 	call	#__system___string_cmp
06340     00 FA 0D F2 | 	cmp	result1, #0 wz
06344     04 03 90 AD |  if_e	jmp	#LR__0499
06348     B8 01 00 FF 
0634c     91 15 06 F6 | 	mov	arg02, ##@LR__5777
06350     13 13 02 F6 | 	mov	arg01, local01
06354     3C 0D B2 FD | 	call	#__system___string_cmp
06358     00 FA 0D F2 | 	cmp	result1, #0 wz
0635c     F4 02 90 AD |  if_e	jmp	#LR__0500
06360     B8 01 00 FF 
06364     97 15 06 F6 | 	mov	arg02, ##@LR__5778
06368     13 13 02 F6 | 	mov	arg01, local01
0636c     24 0D B2 FD | 	call	#__system___string_cmp
06370     00 FA 0D F2 | 	cmp	result1, #0 wz
06374     E4 02 90 AD |  if_e	jmp	#LR__0501
06378     B8 01 00 FF 
0637c     9D 15 06 F6 | 	mov	arg02, ##@LR__5779
06380     13 13 02 F6 | 	mov	arg01, local01
06384     0C 0D B2 FD | 	call	#__system___string_cmp
06388     00 FA 0D F2 | 	cmp	result1, #0 wz
0638c     D4 02 90 AD |  if_e	jmp	#LR__0502
06390     B8 01 00 FF 
06394     A3 15 06 F6 | 	mov	arg02, ##@LR__5780
06398     13 13 02 F6 | 	mov	arg01, local01
0639c     F4 0C B2 FD | 	call	#__system___string_cmp
063a0     00 FA 0D F2 | 	cmp	result1, #0 wz
063a4     C4 02 90 AD |  if_e	jmp	#LR__0503
063a8     B8 01 00 FF 
063ac     A8 15 06 F6 | 	mov	arg02, ##@LR__5781
063b0     13 13 02 F6 | 	mov	arg01, local01
063b4     DC 0C B2 FD | 	call	#__system___string_cmp
063b8     00 FA 0D F2 | 	cmp	result1, #0 wz
063bc     B4 02 90 AD |  if_e	jmp	#LR__0504
063c0     B8 01 00 FF 
063c4     AD 15 06 F6 | 	mov	arg02, ##@LR__5782
063c8     13 13 02 F6 | 	mov	arg01, local01
063cc     C4 0C B2 FD | 	call	#__system___string_cmp
063d0     00 FA 0D F2 | 	cmp	result1, #0 wz
063d4     A4 02 90 AD |  if_e	jmp	#LR__0505
063d8     B8 01 00 FF 
063dc     B5 15 06 F6 | 	mov	arg02, ##@LR__5783
063e0     13 13 02 F6 | 	mov	arg01, local01
063e4     AC 0C B2 FD | 	call	#__system___string_cmp
063e8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ec     94 02 90 AD |  if_e	jmp	#LR__0506
063f0     B8 01 00 FF 
063f4     BB 15 06 F6 | 	mov	arg02, ##@LR__5784
063f8     13 13 02 F6 | 	mov	arg01, local01
063fc     94 0C B2 FD | 	call	#__system___string_cmp
06400     00 FA 0D F2 | 	cmp	result1, #0 wz
06404     84 02 90 AD |  if_e	jmp	#LR__0507
06408     B8 01 00 FF 
0640c     C2 15 06 F6 | 	mov	arg02, ##@LR__5785
06410     13 13 02 F6 | 	mov	arg01, local01
06414     7C 0C B2 FD | 	call	#__system___string_cmp
06418     00 FA 0D F2 | 	cmp	result1, #0 wz
0641c     74 02 90 AD |  if_e	jmp	#LR__0508
06420     B8 01 00 FF 
06424     C8 15 06 F6 | 	mov	arg02, ##@LR__5786
06428     13 13 02 F6 | 	mov	arg01, local01
0642c     64 0C B2 FD | 	call	#__system___string_cmp
06430     00 FA 0D F2 | 	cmp	result1, #0 wz
06434     64 02 90 AD |  if_e	jmp	#LR__0509
06438     B8 01 00 FF 
0643c     CE 15 06 F6 | 	mov	arg02, ##@LR__5787
06440     13 13 02 F6 | 	mov	arg01, local01
06444     4C 0C B2 FD | 	call	#__system___string_cmp
06448     00 FA 0D F2 | 	cmp	result1, #0 wz
0644c     54 02 90 AD |  if_e	jmp	#LR__0510
06450     B8 01 00 FF 
06454     D2 15 06 F6 | 	mov	arg02, ##@LR__5788
06458     13 13 02 F6 | 	mov	arg01, local01
0645c     34 0C B2 FD | 	call	#__system___string_cmp
06460     00 FA 0D F2 | 	cmp	result1, #0 wz
06464     44 02 90 AD |  if_e	jmp	#LR__0511
06468     B8 01 00 FF 
0646c     D6 15 06 F6 | 	mov	arg02, ##@LR__5789
06470     13 13 02 F6 | 	mov	arg01, local01
06474     1C 0C B2 FD | 	call	#__system___string_cmp
06478     00 FA 0D F2 | 	cmp	result1, #0 wz
0647c     34 02 90 AD |  if_e	jmp	#LR__0512
06480     B8 01 00 FF 
06484     DA 15 06 F6 | 	mov	arg02, ##@LR__5790
06488     13 13 02 F6 | 	mov	arg01, local01
0648c     04 0C B2 FD | 	call	#__system___string_cmp
06490     00 FA 0D F2 | 	cmp	result1, #0 wz
06494     24 02 90 AD |  if_e	jmp	#LR__0513
06498     B8 01 00 FF 
0649c     E0 15 06 F6 | 	mov	arg02, ##@LR__5791
064a0     13 13 02 F6 | 	mov	arg01, local01
064a4     EC 0B B2 FD | 	call	#__system___string_cmp
064a8     00 FA 0D F2 | 	cmp	result1, #0 wz
064ac     14 02 90 AD |  if_e	jmp	#LR__0514
064b0     B8 01 00 FF 
064b4     E6 15 06 F6 | 	mov	arg02, ##@LR__5792
064b8     13 13 02 F6 | 	mov	arg01, local01
064bc     D4 0B B2 FD | 	call	#__system___string_cmp
064c0     00 FA 0D F2 | 	cmp	result1, #0 wz
064c4     04 02 90 AD |  if_e	jmp	#LR__0515
064c8     B8 01 00 FF 
064cc     EB 15 06 F6 | 	mov	arg02, ##@LR__5793
064d0     13 13 02 F6 | 	mov	arg01, local01
064d4     BC 0B B2 FD | 	call	#__system___string_cmp
064d8     00 FA 0D F2 | 	cmp	result1, #0 wz
064dc     F4 01 90 AD |  if_e	jmp	#LR__0516
064e0     B8 01 00 FF 
064e4     EF 15 06 F6 | 	mov	arg02, ##@LR__5794
064e8     13 13 02 F6 | 	mov	arg01, local01
064ec     A4 0B B2 FD | 	call	#__system___string_cmp
064f0     00 FA 0D F2 | 	cmp	result1, #0 wz
064f4     E4 01 90 AD |  if_e	jmp	#LR__0517
064f8     B8 01 00 FF 
064fc     F3 15 06 F6 | 	mov	arg02, ##@LR__5795
06500     13 13 02 F6 | 	mov	arg01, local01
06504     8C 0B B2 FD | 	call	#__system___string_cmp
06508     00 FA 0D F2 | 	cmp	result1, #0 wz
0650c     D4 01 90 AD |  if_e	jmp	#LR__0518
06510     D8 01 90 FD | 	jmp	#LR__0519
06514                 | LR__0460
06514     9E FA 05 F6 | 	mov	result1, #158
06518     D4 01 90 FD | 	jmp	#LR__0520
0651c                 | LR__0461
0651c     85 FA 05 F6 | 	mov	result1, #133
06520     CC 01 90 FD | 	jmp	#LR__0520
06524                 | LR__0462
06524     9B FA 05 F6 | 	mov	result1, #155
06528     C4 01 90 FD | 	jmp	#LR__0520
0652c                 | LR__0463
0652c     9B FA 05 F6 | 	mov	result1, #155
06530     BC 01 90 FD | 	jmp	#LR__0520
06534                 | LR__0464
06534     A7 FA 05 F6 | 	mov	result1, #167
06538     B4 01 90 FD | 	jmp	#LR__0520
0653c                 | LR__0465
0653c     84 FA 05 F6 | 	mov	result1, #132
06540     AC 01 90 FD | 	jmp	#LR__0520
06544                 | LR__0466
06544     86 FA 05 F6 | 	mov	result1, #134
06548     A4 01 90 FD | 	jmp	#LR__0520
0654c                 | LR__0467
0654c     A2 FA 05 F6 | 	mov	result1, #162
06550     9C 01 90 FD | 	jmp	#LR__0520
06554                 | LR__0468
06554     9F FA 05 F6 | 	mov	result1, #159
06558     94 01 90 FD | 	jmp	#LR__0520
0655c                 | LR__0469
0655c     C0 FA 05 F6 | 	mov	result1, #192
06560     8C 01 90 FD | 	jmp	#LR__0520
06564                 | LR__0470
06564     82 FA 05 F6 | 	mov	result1, #130
06568     84 01 90 FD | 	jmp	#LR__0520
0656c                 | LR__0471
0656c     99 FA 05 F6 | 	mov	result1, #153
06570     7C 01 90 FD | 	jmp	#LR__0520
06574                 | LR__0472
06574     C5 FA 05 F6 | 	mov	result1, #197
06578     74 01 90 FD | 	jmp	#LR__0520
0657c                 | LR__0473
0657c     C5 FA 05 F6 | 	mov	result1, #197
06580     6C 01 90 FD | 	jmp	#LR__0520
06584                 | LR__0474
06584     9C FA 05 F6 | 	mov	result1, #156
06588     64 01 90 FD | 	jmp	#LR__0520
0658c                 | LR__0475
0658c     D3 FA 05 F6 | 	mov	result1, #211
06590     5C 01 90 FD | 	jmp	#LR__0520
06594                 | LR__0476
06594     D3 FA 05 F6 | 	mov	result1, #211
06598     54 01 90 FD | 	jmp	#LR__0520
0659c                 | LR__0477
0659c     6F FA 05 F6 | 	mov	result1, #111
065a0     4C 01 90 FD | 	jmp	#LR__0520
065a4                 | LR__0478
065a4     6F FA 05 F6 | 	mov	result1, #111
065a8     44 01 90 FD | 	jmp	#LR__0520
065ac                 | LR__0479
065ac     93 FA 05 F6 | 	mov	result1, #147
065b0     3C 01 90 FD | 	jmp	#LR__0520
065b4                 | LR__0480
065b4     94 FA 05 F6 | 	mov	result1, #148
065b8     34 01 90 FD | 	jmp	#LR__0520
065bc                 | LR__0481
065bc     62 FA 05 F6 | 	mov	result1, #98
065c0     2C 01 90 FD | 	jmp	#LR__0520
065c4                 | LR__0482
065c4     62 FA 05 F6 | 	mov	result1, #98
065c8     24 01 90 FD | 	jmp	#LR__0520
065cc                 | LR__0483
065cc     A3 FA 05 F6 | 	mov	result1, #163
065d0     1C 01 90 FD | 	jmp	#LR__0520
065d4                 | LR__0484
065d4     9D FA 05 F6 | 	mov	result1, #157
065d8     14 01 90 FD | 	jmp	#LR__0520
065dc                 | LR__0485
065dc     8A FA 05 F6 | 	mov	result1, #138
065e0     0C 01 90 FD | 	jmp	#LR__0520
065e4                 | LR__0486
065e4     A4 FA 05 F6 | 	mov	result1, #164
065e8     04 01 90 FD | 	jmp	#LR__0520
065ec                 | LR__0487
065ec     A8 FA 05 F6 | 	mov	result1, #168
065f0     FC 00 90 FD | 	jmp	#LR__0520
065f4                 | LR__0488
065f4     AD FA 05 F6 | 	mov	result1, #173
065f8     F4 00 90 FD | 	jmp	#LR__0520
065fc                 | LR__0489
065fc     9A FA 05 F6 | 	mov	result1, #154
06600     EC 00 90 FD | 	jmp	#LR__0520
06604                 | LR__0490
06604     D1 FA 05 F6 | 	mov	result1, #209
06608     E4 00 90 FD | 	jmp	#LR__0520
0660c                 | LR__0491
0660c     D0 FA 05 F6 | 	mov	result1, #208
06610     DC 00 90 FD | 	jmp	#LR__0520
06614                 | LR__0492
06614     A6 FA 05 F6 | 	mov	result1, #166
06618     D4 00 90 FD | 	jmp	#LR__0520
0661c                 | LR__0493
0661c     66 FA 05 F6 | 	mov	result1, #102
06620     CC 00 90 FD | 	jmp	#LR__0520
06624                 | LR__0494
06624     67 FA 05 F6 | 	mov	result1, #103
06628     C4 00 90 FD | 	jmp	#LR__0520
0662c                 | LR__0495
0662c     64 FA 05 F6 | 	mov	result1, #100
06630     BC 00 90 FD | 	jmp	#LR__0520
06634                 | LR__0496
06634     65 FA 05 F6 | 	mov	result1, #101
06638     B4 00 90 FD | 	jmp	#LR__0520
0663c                 | LR__0497
0663c     C8 FA 05 F6 | 	mov	result1, #200
06640     AC 00 90 FD | 	jmp	#LR__0520
06644                 | LR__0498
06644     C9 FA 05 F6 | 	mov	result1, #201
06648     A4 00 90 FD | 	jmp	#LR__0520
0664c                 | LR__0499
0664c     CA FA 05 F6 | 	mov	result1, #202
06650     9C 00 90 FD | 	jmp	#LR__0520
06654                 | LR__0500
06654     CC FA 05 F6 | 	mov	result1, #204
06658     94 00 90 FD | 	jmp	#LR__0520
0665c                 | LR__0501
0665c     CD FA 05 F6 | 	mov	result1, #205
06660     8C 00 90 FD | 	jmp	#LR__0520
06664                 | LR__0502
06664     CE FA 05 F6 | 	mov	result1, #206
06668     84 00 90 FD | 	jmp	#LR__0520
0666c                 | LR__0503
0666c     CB FA 05 F6 | 	mov	result1, #203
06670     7C 00 90 FD | 	jmp	#LR__0520
06674                 | LR__0504
06674     98 FA 05 F6 | 	mov	result1, #152
06678     74 00 90 FD | 	jmp	#LR__0520
0667c                 | LR__0505
0667c     7B FA 05 F6 | 	mov	result1, #123
06680     6C 00 90 FD | 	jmp	#LR__0520
06684                 | LR__0506
06684     76 FA 05 F6 | 	mov	result1, #118
06688     64 00 90 FD | 	jmp	#LR__0520
0668c                 | LR__0507
0668c     A5 FA 05 F6 | 	mov	result1, #165
06690     5C 00 90 FD | 	jmp	#LR__0520
06694                 | LR__0508
06694     7A FA 05 F6 | 	mov	result1, #122
06698     54 00 90 FD | 	jmp	#LR__0520
0669c                 | LR__0509
0669c     BF FA 05 F6 | 	mov	result1, #191
066a0     4C 00 90 FD | 	jmp	#LR__0520
066a4                 | LR__0510
066a4     54 FA 05 F6 | 	mov	result1, #84
066a8     44 00 90 FD | 	jmp	#LR__0520
066ac                 | LR__0511
066ac     6B FA 05 F6 | 	mov	result1, #107
066b0     3C 00 90 FD | 	jmp	#LR__0520
066b4                 | LR__0512
066b4     87 FA 05 F6 | 	mov	result1, #135
066b8     34 00 90 FD | 	jmp	#LR__0520
066bc                 | LR__0513
066bc     6A FA 05 F6 | 	mov	result1, #106
066c0     2C 00 90 FD | 	jmp	#LR__0520
066c4                 | LR__0514
066c4     6E FA 05 F6 | 	mov	result1, #110
066c8     24 00 90 FD | 	jmp	#LR__0520
066cc                 | LR__0515
066cc     A1 FA 05 F6 | 	mov	result1, #161
066d0     1C 00 90 FD | 	jmp	#LR__0520
066d4                 | LR__0516
066d4     83 FA 05 F6 | 	mov	result1, #131
066d8     14 00 90 FD | 	jmp	#LR__0520
066dc                 | LR__0517
066dc     A0 FA 05 F6 | 	mov	result1, #160
066e0     0C 00 90 FD | 	jmp	#LR__0520
066e4                 | LR__0518
066e4     9B FA 05 F6 | 	mov	result1, #155
066e8     04 00 90 FD | 	jmp	#LR__0520
066ec                 | LR__0519
066ec     00 FA 05 F6 | 	mov	result1, #0
066f0                 | LR__0520
066f0     A7 F0 03 F6 | 	mov	ptra, fp
066f4     B2 00 A0 FD | 	call	#popregs_
066f8                 | _isfunction_ret
066f8     2D 00 64 FD | 	ret
066fc                 | 
066fc                 | ' 
066fc                 | ' ' Check if the part is a name
066fc                 | ' 
066fc                 | ' function isname(s as string) as boolean
066fc                 | _isname
066fc     0D 4A 05 F6 | 	mov	COUNT_, #13
06700     A8 00 A0 FD | 	call	#pushregs_
06704     09 27 02 F6 | 	mov	local01, arg01
06708     09 29 02 F6 | 	mov	local02, arg01
0670c     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
06710                 | LR__0530
06710     14 FB C9 FA | 	rdbyte	result1, local02 wz
06714     01 28 06 51 |  if_ne	add	local02, #1
06718     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
0671c                 | LR__0531
0671c     09 29 82 F1 | 	sub	local02, arg01
06720     14 FB 01 F6 | 	mov	result1, local02
06724     FD 2A 0A F6 | 	mov	local03, result1 wz
06728     00 FA 05 A6 |  if_e	mov	result1, #0
0672c     34 02 90 AD |  if_e	jmp	#LR__0543
06730     13 13 02 F6 | 	mov	arg01, local01
06734     01 14 06 F6 | 	mov	arg02, #1
06738     01 16 06 F6 | 	mov	arg03, #1
0673c     C0 2A B2 FD | 	call	#__system__Mid_S
06740     FD 2C 02 F6 | 	mov	local04, result1
06744                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06744     B8 01 00 FF 
06748     FA 15 06 F6 | 	mov	arg02, ##@LR__5796
0674c     16 13 02 F6 | 	mov	arg01, local04
06750     40 09 B2 FD | 	call	#__system___string_cmp
06754     00 FA 55 F2 | 	cmps	result1, #0 wc
06758     18 00 90 CD |  if_b	jmp	#LR__0532
0675c     B8 01 00 FF 
06760     FC 15 06 F6 | 	mov	arg02, ##@LR__5797
06764     16 13 02 F6 | 	mov	arg01, local04
06768     28 09 B2 FD | 	call	#__system___string_cmp
0676c     01 FA 55 F2 | 	cmps	result1, #1 wc
06770     1C 00 90 CD |  if_b	jmp	#LR__0533
06774                 | LR__0532
06774     B8 01 00 FF 
06778     FE 15 06 F6 | 	mov	arg02, ##@LR__5798
0677c     16 13 02 F6 | 	mov	arg01, local04
06780     10 09 B2 FD | 	call	#__system___string_cmp
06784     00 FA 0D F2 | 	cmp	result1, #0 wz
06788     00 FA 05 56 |  if_ne	mov	result1, #0
0678c     D4 01 90 5D |  if_ne	jmp	#LR__0543
06790                 | LR__0533
06790                 | ' if l>2 then 
06790     03 2A 56 F2 | 	cmps	local03, #3 wc
06794     C8 01 90 CD |  if_b	jmp	#LR__0542
06798                 | '   for i=2 to l
06798     02 2E 06 F6 | 	mov	local05, #2
0679c     15 31 02 F6 | 	mov	local06, local03
067a0     01 30 06 F1 | 	add	local06, #1
067a4                 | LR__0534
067a4     18 2F 52 F2 | 	cmps	local05, local06 wc
067a8     B4 01 90 3D |  if_ae	jmp	#LR__0541
067ac     13 13 02 F6 | 	mov	arg01, local01
067b0     17 15 02 F6 | 	mov	arg02, local05
067b4     01 16 06 F6 | 	mov	arg03, #1
067b8     44 2A B2 FD | 	call	#__system__Mid_S
067bc     FD 2C 02 F6 | 	mov	local04, result1
067c0                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
067c0     15 2F 52 F2 | 	cmps	local05, local03 wc
067c4     9C 00 90 3D |  if_ae	jmp	#LR__0537
067c8     B9 01 00 FF 
067cc     00 14 06 F6 | 	mov	arg02, ##@LR__5799
067d0     16 13 02 F6 | 	mov	arg01, local04
067d4     BC 08 B2 FD | 	call	#__system___string_cmp
067d8     00 FA 55 F2 | 	cmps	result1, #0 wc
067dc     18 00 90 CD |  if_b	jmp	#LR__0535
067e0     B9 01 00 FF 
067e4     02 14 06 F6 | 	mov	arg02, ##@LR__5800
067e8     16 13 02 F6 | 	mov	arg01, local04
067ec     A4 08 B2 FD | 	call	#__system___string_cmp
067f0     01 FA 55 F2 | 	cmps	result1, #1 wc
067f4     6C 00 90 CD |  if_b	jmp	#LR__0537
067f8                 | LR__0535
067f8     B9 01 00 FF 
067fc     04 14 06 F6 | 	mov	arg02, ##@LR__5801
06800     16 13 02 F6 | 	mov	arg01, local04
06804     8C 08 B2 FD | 	call	#__system___string_cmp
06808     00 FA 55 F2 | 	cmps	result1, #0 wc
0680c     18 00 90 CD |  if_b	jmp	#LR__0536
06810     B9 01 00 FF 
06814     06 14 06 F6 | 	mov	arg02, ##@LR__5802
06818     16 13 02 F6 | 	mov	arg01, local04
0681c     74 08 B2 FD | 	call	#__system___string_cmp
06820     01 FA 55 F2 | 	cmps	result1, #1 wc
06824     3C 00 90 CD |  if_b	jmp	#LR__0537
06828                 | LR__0536
06828     B9 01 00 FF 
0682c     08 32 06 F6 | 	mov	local07, ##@LR__5803
06830     16 13 02 F6 | 	mov	arg01, local04
06834     19 15 02 F6 | 	mov	arg02, local07
06838     58 08 B2 FD | 	call	#__system___string_cmp
0683c     00 FA 0D F2 | 	cmp	result1, #0 wz
06840     20 00 90 AD |  if_e	jmp	#LR__0537
06844     B9 01 00 FF 
06848     0A 34 06 F6 | 	mov	local08, ##@LR__5804
0684c     16 13 02 F6 | 	mov	arg01, local04
06850     1A 15 02 F6 | 	mov	arg02, local08
06854     3C 08 B2 FD | 	call	#__system___string_cmp
06858     FD 36 0A F6 | 	mov	local09, result1 wz
0685c     00 FA 05 56 |  if_ne	mov	result1, #0
06860     00 01 90 5D |  if_ne	jmp	#LR__0543
06864                 | LR__0537
06864                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06864     15 2F 0A F2 | 	cmp	local05, local03 wz
06868     EC 00 90 5D |  if_ne	jmp	#LR__0540
0686c     B9 01 00 FF 
06870     0C 38 06 F6 | 	mov	local10, ##@LR__5805
06874     16 13 02 F6 | 	mov	arg01, local04
06878     1C 15 02 F6 | 	mov	arg02, local10
0687c     14 08 B2 FD | 	call	#__system___string_cmp
06880     FD 3A 02 F6 | 	mov	local11, result1
06884     00 3A 56 F2 | 	cmps	local11, #0 wc
06888     1C 00 90 CD |  if_b	jmp	#LR__0538
0688c     B9 01 00 FF 
06890     0E 14 06 F6 | 	mov	arg02, ##@LR__5806
06894     16 13 02 F6 | 	mov	arg01, local04
06898     F8 07 B2 FD | 	call	#__system___string_cmp
0689c     FD 38 02 F6 | 	mov	local10, result1
068a0     01 38 56 F2 | 	cmps	local10, #1 wc
068a4     B0 00 90 CD |  if_b	jmp	#LR__0540
068a8                 | LR__0538
068a8     B9 01 00 FF 
068ac     10 14 06 F6 | 	mov	arg02, ##@LR__5807
068b0     16 13 02 F6 | 	mov	arg01, local04
068b4     DC 07 B2 FD | 	call	#__system___string_cmp
068b8     00 FA 55 F2 | 	cmps	result1, #0 wc
068bc     1C 00 90 CD |  if_b	jmp	#LR__0539
068c0     B9 01 00 FF 
068c4     12 36 06 F6 | 	mov	local09, ##@LR__5808
068c8     16 13 02 F6 | 	mov	arg01, local04
068cc     1B 15 02 F6 | 	mov	arg02, local09
068d0     C0 07 B2 FD | 	call	#__system___string_cmp
068d4     01 FA 55 F2 | 	cmps	result1, #1 wc
068d8     7C 00 90 CD |  if_b	jmp	#LR__0540
068dc                 | LR__0539
068dc     B9 01 00 FF 
068e0     14 36 06 F6 | 	mov	local09, ##@LR__5809
068e4     16 13 02 F6 | 	mov	arg01, local04
068e8     1B 15 02 F6 | 	mov	arg02, local09
068ec     A4 07 B2 FD | 	call	#__system___string_cmp
068f0     00 FA 4D F2 | 	cmps	result1, #0 wz
068f4     60 00 90 AD |  if_e	jmp	#LR__0540
068f8     B9 01 00 FF 
068fc     16 34 06 F6 | 	mov	local08, ##@LR__5810
06900     16 13 02 F6 | 	mov	arg01, local04
06904     1A 15 02 F6 | 	mov	arg02, local08
06908     88 07 B2 FD | 	call	#__system___string_cmp
0690c     FD 36 0A F6 | 	mov	local09, result1 wz
06910     44 00 90 AD |  if_e	jmp	#LR__0540
06914     B9 01 00 FF 
06918     18 3C 06 F6 | 	mov	local12, ##@LR__5811
0691c     1E 35 02 F6 | 	mov	local08, local12
06920     16 13 02 F6 | 	mov	arg01, local04
06924     1A 15 02 F6 | 	mov	arg02, local08
06928     68 07 B2 FD | 	call	#__system___string_cmp
0692c     FD 32 0A F6 | 	mov	local07, result1 wz
06930     24 00 90 AD |  if_e	jmp	#LR__0540
06934     B9 01 00 FF 
06938     1A 3E 06 F6 | 	mov	local13, ##@LR__5812
0693c     1F 3D 02 F6 | 	mov	local12, local13
06940     16 13 02 F6 | 	mov	arg01, local04
06944     1E 15 02 F6 | 	mov	arg02, local12
06948     48 07 B2 FD | 	call	#__system___string_cmp
0694c     FD 34 0A F6 | 	mov	local08, result1 wz
06950     00 FA 05 56 |  if_ne	mov	result1, #0
06954     0C 00 90 5D |  if_ne	jmp	#LR__0543
06958                 | LR__0540
06958     01 2E 06 F1 | 	add	local05, #1
0695c     44 FE 9F FD | 	jmp	#LR__0534
06960                 | LR__0541
06960                 | LR__0542
06960                 | ' return true
06960     01 FA 65 F6 | 	neg	result1, #1
06964                 | LR__0543
06964     A7 F0 03 F6 | 	mov	ptra, fp
06968     B2 00 A0 FD | 	call	#popregs_
0696c                 | _isname_ret
0696c     2D 00 64 FD | 	ret
06970                 | 
06970                 | ' 
06970                 | ' ' Check if the part is a number.  
06970                 | ' 
06970                 | ' function isnum(s as string) as boolean 
06970                 | _isnum
06970     13 4A 05 F6 | 	mov	COUNT_, #19
06974     A8 00 A0 FD | 	call	#pushregs_
06978     09 27 02 F6 | 	mov	local01, arg01
0697c     00 28 06 F6 | 	mov	local02, #0
06980     00 2A 06 F6 | 	mov	local03, #0
06984     13 13 02 F6 | 	mov	arg01, local01
06988     09 2D 02 F6 | 	mov	local04, arg01
0698c     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
06990                 | LR__0550
06990     16 FB C9 FA | 	rdbyte	result1, local04 wz
06994     01 2C 06 51 |  if_ne	add	local04, #1
06998     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
0699c                 | LR__0551
0699c     09 2D 82 F1 | 	sub	local04, arg01
069a0     16 FB 01 F6 | 	mov	result1, local04
069a4     FD 2E 0A F6 | 	mov	local05, result1 wz
069a8     00 FA 05 A6 |  if_e	mov	result1, #0
069ac     A0 03 90 AD |  if_e	jmp	#LR__0566
069b0     13 13 02 F6 | 	mov	arg01, local01
069b4     01 14 06 F6 | 	mov	arg02, #1
069b8     01 16 06 F6 | 	mov	arg03, #1
069bc     40 28 B2 FD | 	call	#__system__Mid_S
069c0     FD 30 02 F6 | 	mov	local06, result1
069c4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
069c4     B9 01 00 FF 
069c8     1C 14 06 F6 | 	mov	arg02, ##@LR__5813
069cc     18 13 02 F6 | 	mov	arg01, local06
069d0     C0 06 B2 FD | 	call	#__system___string_cmp
069d4     00 FA 55 F2 | 	cmps	result1, #0 wc
069d8     1C 00 90 CD |  if_b	jmp	#LR__0552
069dc     B9 01 00 FF 
069e0     1E 32 06 F6 | 	mov	local07, ##@LR__5814
069e4     18 13 02 F6 | 	mov	arg01, local06
069e8     19 15 02 F6 | 	mov	arg02, local07
069ec     A4 06 B2 FD | 	call	#__system___string_cmp
069f0     01 FA 55 F2 | 	cmps	result1, #1 wc
069f4     84 00 90 CD |  if_b	jmp	#LR__0553
069f8                 | LR__0552
069f8     B9 01 00 FF 
069fc     20 34 06 F6 | 	mov	local08, ##@LR__5815
06a00     1A 33 02 F6 | 	mov	local07, local08
06a04     18 13 02 F6 | 	mov	arg01, local06
06a08     19 15 02 F6 | 	mov	arg02, local07
06a0c     84 06 B2 FD | 	call	#__system___string_cmp
06a10     00 FA 0D F2 | 	cmp	result1, #0 wz
06a14     64 00 90 AD |  if_e	jmp	#LR__0553
06a18     B9 01 00 FF 
06a1c     22 36 06 F6 | 	mov	local09, ##@LR__5816
06a20     1B 35 02 F6 | 	mov	local08, local09
06a24     18 13 02 F6 | 	mov	arg01, local06
06a28     1A 15 02 F6 | 	mov	arg02, local08
06a2c     64 06 B2 FD | 	call	#__system___string_cmp
06a30     FD 32 0A F6 | 	mov	local07, result1 wz
06a34     44 00 90 AD |  if_e	jmp	#LR__0553
06a38     B9 01 00 FF 
06a3c     24 38 06 F6 | 	mov	local10, ##@LR__5817
06a40     1C 37 02 F6 | 	mov	local09, local10
06a44     18 13 02 F6 | 	mov	arg01, local06
06a48     1B 15 02 F6 | 	mov	arg02, local09
06a4c     44 06 B2 FD | 	call	#__system___string_cmp
06a50     FD 34 0A F6 | 	mov	local08, result1 wz
06a54     24 00 90 AD |  if_e	jmp	#LR__0553
06a58     B9 01 00 FF 
06a5c     26 3A 06 F6 | 	mov	local11, ##@LR__5818
06a60     1D 39 02 F6 | 	mov	local10, local11
06a64     18 13 02 F6 | 	mov	arg01, local06
06a68     1C 15 02 F6 | 	mov	arg02, local10
06a6c     24 06 B2 FD | 	call	#__system___string_cmp
06a70     FD 36 0A F6 | 	mov	local09, result1 wz
06a74     00 FA 05 56 |  if_ne	mov	result1, #0
06a78     D4 02 90 5D |  if_ne	jmp	#LR__0566
06a7c                 | LR__0553
06a7c                 | ' if m$="." then ds=1
06a7c     B9 01 00 FF 
06a80     28 14 06 F6 | 	mov	arg02, ##@LR__5819
06a84     18 13 02 F6 | 	mov	arg01, local06
06a88     08 06 B2 FD | 	call	#__system___string_cmp
06a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a90     01 28 06 A6 |  if_e	mov	local02, #1
06a94                 | ' if m$="$" then hex=1 else hex=0
06a94     B9 01 00 FF 
06a98     2A 14 06 F6 | 	mov	arg02, ##@LR__5820
06a9c     18 13 02 F6 | 	mov	arg01, local06
06aa0     F0 05 B2 FD | 	call	#__system___string_cmp
06aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
06aa8     01 3C 06 A6 |  if_e	mov	local12, #1
06aac     00 3C 06 56 |  if_ne	mov	local12, #0
06ab0                 | ' if m$="%" then bin=1 else bin=0
06ab0     B9 01 00 FF 
06ab4     2C 14 06 F6 | 	mov	arg02, ##@LR__5821
06ab8     18 13 02 F6 | 	mov	arg01, local06
06abc     D4 05 B2 FD | 	call	#__system___string_cmp
06ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
06ac4     01 3E 06 A6 |  if_e	mov	local13, #1
06ac8     00 3E 06 56 |  if_ne	mov	local13, #0
06acc                 | ' if l>1 then 
06acc     02 2E 56 F2 | 	cmps	local05, #2 wc
06ad0     78 02 90 CD |  if_b	jmp	#LR__0565
06ad4                 | '   for i=2 to l
06ad4     02 40 06 F6 | 	mov	local14, #2
06ad8     17 43 02 F6 | 	mov	local15, local05
06adc     01 42 06 F1 | 	add	local15, #1
06ae0                 | LR__0554
06ae0     21 41 52 F2 | 	cmps	local14, local15 wc
06ae4     64 02 90 3D |  if_ae	jmp	#LR__0564
06ae8     13 13 02 F6 | 	mov	arg01, local01
06aec     20 15 02 F6 | 	mov	arg02, local14
06af0     01 16 06 F6 | 	mov	arg03, #1
06af4     08 27 B2 FD | 	call	#__system__Mid_S
06af8     FD 30 02 F6 | 	mov	local06, result1
06afc     00 44 06 F6 | 	mov	local16, #0
06b00                 | '     m$=mid$(s,i,1) : b=false
06b00                 | '     if m$>="0" andalso m$<="9" then b=true  
06b00     B9 01 00 FF 
06b04     2E 14 06 F6 | 	mov	arg02, ##@LR__5822
06b08     18 13 02 F6 | 	mov	arg01, local06
06b0c     84 05 B2 FD | 	call	#__system___string_cmp
06b10     00 FA 55 F2 | 	cmps	result1, #0 wc
06b14     1C 00 90 CD |  if_b	jmp	#LR__0555
06b18     B9 01 00 FF 
06b1c     30 32 06 F6 | 	mov	local07, ##@LR__5823
06b20     18 13 02 F6 | 	mov	arg01, local06
06b24     19 15 02 F6 | 	mov	arg02, local07
06b28     68 05 B2 FD | 	call	#__system___string_cmp
06b2c     01 FA 55 F2 | 	cmps	result1, #1 wc
06b30     01 44 66 C6 |  if_b	neg	local16, #1
06b34                 | LR__0555
06b34                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06b34     B9 01 00 FF 
06b38     32 14 06 F6 | 	mov	arg02, ##@LR__5824
06b3c     18 13 02 F6 | 	mov	arg01, local06
06b40     50 05 B2 FD | 	call	#__system___string_cmp
06b44     00 FA 0D F2 | 	cmp	result1, #0 wz
06b48     7C 00 90 AD |  if_e	jmp	#LR__0556
06b4c     B9 01 00 FF 
06b50     34 32 06 F6 | 	mov	local07, ##@LR__5825
06b54     18 13 02 F6 | 	mov	arg01, local06
06b58     19 15 02 F6 | 	mov	arg02, local07
06b5c     34 05 B2 FD | 	call	#__system___string_cmp
06b60     00 FA 0D F2 | 	cmp	result1, #0 wz
06b64     60 00 90 AD |  if_e	jmp	#LR__0556
06b68     B9 01 00 FF 
06b6c     36 34 06 F6 | 	mov	local08, ##@LR__5826
06b70     1A 33 02 F6 | 	mov	local07, local08
06b74     18 13 02 F6 | 	mov	arg01, local06
06b78     19 15 02 F6 | 	mov	arg02, local07
06b7c     14 05 B2 FD | 	call	#__system___string_cmp
06b80     00 FA 0D F2 | 	cmp	result1, #0 wz
06b84     40 00 90 AD |  if_e	jmp	#LR__0556
06b88     B9 01 00 FF 
06b8c     38 36 06 F6 | 	mov	local09, ##@LR__5827
06b90     1B 35 02 F6 | 	mov	local08, local09
06b94     18 13 02 F6 | 	mov	arg01, local06
06b98     1A 15 02 F6 | 	mov	arg02, local08
06b9c     F4 04 B2 FD | 	call	#__system___string_cmp
06ba0     FD 32 0A F6 | 	mov	local07, result1 wz
06ba4     20 00 90 AD |  if_e	jmp	#LR__0556
06ba8     B9 01 00 FF 
06bac     3A 38 06 F6 | 	mov	local10, ##@LR__5828
06bb0     1C 37 02 F6 | 	mov	local09, local10
06bb4     18 13 02 F6 | 	mov	arg01, local06
06bb8     1B 15 02 F6 | 	mov	arg02, local09
06bbc     D4 04 B2 FD | 	call	#__system___string_cmp
06bc0     FD 34 0A F6 | 	mov	local08, result1 wz
06bc4     04 00 90 5D |  if_ne	jmp	#LR__0557
06bc8                 | LR__0556
06bc8     01 44 66 F6 | 	neg	local16, #1
06bcc                 | LR__0557
06bcc                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06bcc     01 3C 0E F2 | 	cmp	local12, #1 wz
06bd0     34 00 90 5D |  if_ne	jmp	#LR__0558
06bd4     B9 01 00 FF 
06bd8     3C 14 06 F6 | 	mov	arg02, ##@LR__5829
06bdc     18 13 02 F6 | 	mov	arg01, local06
06be0     B0 04 B2 FD | 	call	#__system___string_cmp
06be4     00 FA 55 F2 | 	cmps	result1, #0 wc
06be8     1C 00 90 CD |  if_b	jmp	#LR__0558
06bec     B9 01 00 FF 
06bf0     3E 32 06 F6 | 	mov	local07, ##@LR__5830
06bf4     18 13 02 F6 | 	mov	arg01, local06
06bf8     19 15 02 F6 | 	mov	arg02, local07
06bfc     94 04 B2 FD | 	call	#__system___string_cmp
06c00     01 FA 55 F2 | 	cmps	result1, #1 wc
06c04     01 44 66 C6 |  if_b	neg	local16, #1
06c08                 | LR__0558
06c08                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06c08     01 3E 0E F2 | 	cmp	local13, #1 wz
06c0c     58 00 90 5D |  if_ne	jmp	#LR__0560
06c10     B9 01 00 FF 
06c14     40 14 06 F6 | 	mov	arg02, ##@LR__5831
06c18     18 13 02 F6 | 	mov	arg01, local06
06c1c     74 04 B2 FD | 	call	#__system___string_cmp
06c20     00 FA 55 F2 | 	cmps	result1, #0 wc
06c24     1C 00 90 CD |  if_b	jmp	#LR__0559
06c28     B9 01 00 FF 
06c2c     42 32 06 F6 | 	mov	local07, ##@LR__5832
06c30     18 13 02 F6 | 	mov	arg01, local06
06c34     19 15 02 F6 | 	mov	arg02, local07
06c38     58 04 B2 FD | 	call	#__system___string_cmp
06c3c     01 FA 55 F2 | 	cmps	result1, #1 wc
06c40     24 00 90 CD |  if_b	jmp	#LR__0560
06c44                 | LR__0559
06c44     B9 01 00 FF 
06c48     44 34 06 F6 | 	mov	local08, ##@LR__5833
06c4c     1A 33 02 F6 | 	mov	local07, local08
06c50     18 13 02 F6 | 	mov	arg01, local06
06c54     19 15 02 F6 | 	mov	arg02, local07
06c58     38 04 B2 FD | 	call	#__system___string_cmp
06c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
06c60     00 FA 05 56 |  if_ne	mov	result1, #0
06c64     E8 00 90 5D |  if_ne	jmp	#LR__0566
06c68                 | LR__0560
06c68                 | '     if not b then return false
06c68     22 45 22 F6 | 	not	local16, local16
06c6c     00 44 0E F2 | 	cmp	local16, #0 wz
06c70     00 FA 05 56 |  if_ne	mov	result1, #0
06c74     D8 00 90 5D |  if_ne	jmp	#LR__0566
06c78                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06c78     B9 01 00 FF 
06c7c     46 14 06 F6 | 	mov	arg02, ##@LR__5834
06c80     18 13 02 F6 | 	mov	arg01, local06
06c84     0C 04 B2 FD | 	call	#__system___string_cmp
06c88     00 FA 0D F2 | 	cmp	result1, #0 wz
06c8c     3C 00 90 5D |  if_ne	jmp	#LR__0561
06c90     20 15 02 F6 | 	mov	arg02, local14
06c94     01 14 86 F1 | 	sub	arg02, #1
06c98     13 13 02 F6 | 	mov	arg01, local01
06c9c     01 16 06 F6 | 	mov	arg03, #1
06ca0     5C 25 B2 FD | 	call	#__system__Mid_S
06ca4     FD 12 02 F6 | 	mov	arg01, result1
06ca8     4C 27 B2 FD | 	call	#__system__LCase_S
06cac     FD 12 02 F6 | 	mov	arg01, result1
06cb0     B9 01 00 FF 
06cb4     48 32 06 F6 | 	mov	local07, ##@LR__5835
06cb8     19 15 02 F6 | 	mov	arg02, local07
06cbc     D4 03 B2 FD | 	call	#__system___string_cmp
06cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
06cc4     00 FA 05 56 |  if_ne	mov	result1, #0
06cc8     84 00 90 5D |  if_ne	jmp	#LR__0566
06ccc                 | LR__0561
06ccc                 | '     if m$="." then ds+=1: if ds>1 then return false
06ccc     B9 01 00 FF 
06cd0     4A 14 06 F6 | 	mov	arg02, ##@LR__5836
06cd4     18 13 02 F6 | 	mov	arg01, local06
06cd8     B8 03 B2 FD | 	call	#__system___string_cmp
06cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
06ce0     01 28 06 A1 |  if_e	add	local02, #1
06ce4     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06ce8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06cec     60 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06cf0                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06cf0     B9 01 00 FF 
06cf4     4C 46 06 F6 | 	mov	local17, ##@LR__5837
06cf8     23 49 02 F6 | 	mov	local18, local17
06cfc     18 13 02 F6 | 	mov	arg01, local06
06d00     24 15 02 F6 | 	mov	arg02, local18
06d04     8C 03 B2 FD | 	call	#__system___string_cmp
06d08     FD 4A 0A F6 | 	mov	local19, result1 wz
06d0c     20 00 90 AD |  if_e	jmp	#LR__0562
06d10     B9 01 00 FF 
06d14     4E 32 06 F6 | 	mov	local07, ##@LR__5838
06d18     19 47 02 F6 | 	mov	local17, local07
06d1c     18 13 02 F6 | 	mov	arg01, local06
06d20     23 15 02 F6 | 	mov	arg02, local17
06d24     6C 03 B2 FD | 	call	#__system___string_cmp
06d28     FD 48 0A F6 | 	mov	local18, result1 wz
06d2c     14 00 90 5D |  if_ne	jmp	#LR__0563
06d30                 | LR__0562
06d30     01 2A 06 F1 | 	add	local03, #1
06d34     00 3C 0E F2 | 	cmp	local12, #0 wz
06d38     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06d3c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06d40     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06d44                 | LR__0563
06d44     01 40 06 F1 | 	add	local14, #1
06d48     94 FD 9F FD | 	jmp	#LR__0554
06d4c                 | LR__0564
06d4c                 | LR__0565
06d4c                 | ' return true
06d4c     01 FA 65 F6 | 	neg	result1, #1
06d50                 | LR__0566
06d50     A7 F0 03 F6 | 	mov	ptra, fp
06d54     B2 00 A0 FD | 	call	#popregs_
06d58                 | _isnum_ret
06d58     2D 00 64 FD | 	ret
06d5c                 | 
06d5c                 | '   
06d5c                 | ' ' Check if the part is an integer number.    
06d5c                 | '   
06d5c                 | ' function isint(s as string) as boolean
06d5c                 | _isint
06d5c     0E 4A 05 F6 | 	mov	COUNT_, #14
06d60     A8 00 A0 FD | 	call	#pushregs_
06d64     09 27 02 F6 | 	mov	local01, arg01
06d68     09 29 02 F6 | 	mov	local02, arg01
06d6c     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06d70                 | LR__0570
06d70     14 FB C9 FA | 	rdbyte	result1, local02 wz
06d74     01 28 06 51 |  if_ne	add	local02, #1
06d78     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06d7c                 | LR__0571
06d7c     09 29 82 F1 | 	sub	local02, arg01
06d80     14 FB 01 F6 | 	mov	result1, local02
06d84     FD 2A 0A F6 | 	mov	local03, result1 wz
06d88     00 FA 05 A6 |  if_e	mov	result1, #0
06d8c     64 02 90 AD |  if_e	jmp	#LR__0584
06d90     13 13 02 F6 | 	mov	arg01, local01
06d94     01 14 06 F6 | 	mov	arg02, #1
06d98     01 16 06 F6 | 	mov	arg03, #1
06d9c     60 24 B2 FD | 	call	#__system__Mid_S
06da0     FD 2C 02 F6 | 	mov	local04, result1
06da4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06da4     B9 01 00 FF 
06da8     50 14 06 F6 | 	mov	arg02, ##@LR__5839
06dac     16 13 02 F6 | 	mov	arg01, local04
06db0     E0 02 B2 FD | 	call	#__system___string_cmp
06db4     00 FA 55 F2 | 	cmps	result1, #0 wc
06db8     1C 00 90 CD |  if_b	jmp	#LR__0572
06dbc     B9 01 00 FF 
06dc0     52 2E 06 F6 | 	mov	local05, ##@LR__5840
06dc4     16 13 02 F6 | 	mov	arg01, local04
06dc8     17 15 02 F6 | 	mov	arg02, local05
06dcc     C4 02 B2 FD | 	call	#__system___string_cmp
06dd0     01 FA 55 F2 | 	cmps	result1, #1 wc
06dd4     64 00 90 CD |  if_b	jmp	#LR__0573
06dd8                 | LR__0572
06dd8     B9 01 00 FF 
06ddc     54 30 06 F6 | 	mov	local06, ##@LR__5841
06de0     18 2F 02 F6 | 	mov	local05, local06
06de4     16 13 02 F6 | 	mov	arg01, local04
06de8     17 15 02 F6 | 	mov	arg02, local05
06dec     A4 02 B2 FD | 	call	#__system___string_cmp
06df0     00 FA 0D F2 | 	cmp	result1, #0 wz
06df4     44 00 90 AD |  if_e	jmp	#LR__0573
06df8     B9 01 00 FF 
06dfc     56 32 06 F6 | 	mov	local07, ##@LR__5842
06e00     19 31 02 F6 | 	mov	local06, local07
06e04     16 13 02 F6 | 	mov	arg01, local04
06e08     18 15 02 F6 | 	mov	arg02, local06
06e0c     84 02 B2 FD | 	call	#__system___string_cmp
06e10     FD 2E 0A F6 | 	mov	local05, result1 wz
06e14     24 00 90 AD |  if_e	jmp	#LR__0573
06e18     B9 01 00 FF 
06e1c     58 34 06 F6 | 	mov	local08, ##@LR__5843
06e20     1A 33 02 F6 | 	mov	local07, local08
06e24     16 13 02 F6 | 	mov	arg01, local04
06e28     19 15 02 F6 | 	mov	arg02, local07
06e2c     64 02 B2 FD | 	call	#__system___string_cmp
06e30     FD 30 0A F6 | 	mov	local06, result1 wz
06e34     00 FA 05 56 |  if_ne	mov	result1, #0
06e38     B8 01 90 5D |  if_ne	jmp	#LR__0584
06e3c                 | LR__0573
06e3c                 | ' if m$="$" then hex=1 else hex=0
06e3c     B9 01 00 FF 
06e40     5A 14 06 F6 | 	mov	arg02, ##@LR__5844
06e44     16 13 02 F6 | 	mov	arg01, local04
06e48     48 02 B2 FD | 	call	#__system___string_cmp
06e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e50     01 36 06 A6 |  if_e	mov	local09, #1
06e54     00 36 06 56 |  if_ne	mov	local09, #0
06e58                 | ' if m$="%" then bin=1 else bin=0
06e58     B9 01 00 FF 
06e5c     5C 14 06 F6 | 	mov	arg02, ##@LR__5845
06e60     16 13 02 F6 | 	mov	arg01, local04
06e64     2C 02 B2 FD | 	call	#__system___string_cmp
06e68     00 FA 0D F2 | 	cmp	result1, #0 wz
06e6c     01 38 06 A6 |  if_e	mov	local10, #1
06e70     00 38 06 56 |  if_ne	mov	local10, #0
06e74                 | ' if l>1 then 
06e74     02 2A 56 F2 | 	cmps	local03, #2 wc
06e78     74 01 90 CD |  if_b	jmp	#LR__0583
06e7c                 | '   for i=2 to l
06e7c     02 3A 06 F6 | 	mov	local11, #2
06e80     15 3D 02 F6 | 	mov	local12, local03
06e84     01 3C 06 F1 | 	add	local12, #1
06e88                 | LR__0574
06e88     1E 3B 52 F2 | 	cmps	local11, local12 wc
06e8c     60 01 90 3D |  if_ae	jmp	#LR__0582
06e90     13 13 02 F6 | 	mov	arg01, local01
06e94     1D 15 02 F6 | 	mov	arg02, local11
06e98     01 16 06 F6 | 	mov	arg03, #1
06e9c     60 23 B2 FD | 	call	#__system__Mid_S
06ea0     FD 2C 02 F6 | 	mov	local04, result1
06ea4                 | '     m$=mid$(s,i,1) 
06ea4                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06ea4     00 36 0E F2 | 	cmp	local09, #0 wz
06ea8     50 00 90 5D |  if_ne	jmp	#LR__0576
06eac     B9 01 00 FF 
06eb0     5E 14 06 F6 | 	mov	arg02, ##@LR__5846
06eb4     16 13 02 F6 | 	mov	arg01, local04
06eb8     D8 01 B2 FD | 	call	#__system___string_cmp
06ebc     00 FA 55 F2 | 	cmps	result1, #0 wc
06ec0     18 00 90 CD |  if_b	jmp	#LR__0575
06ec4     B9 01 00 FF 
06ec8     60 14 06 F6 | 	mov	arg02, ##@LR__5847
06ecc     16 13 02 F6 | 	mov	arg01, local04
06ed0     C0 01 B2 FD | 	call	#__system___string_cmp
06ed4     01 FA 55 F2 | 	cmps	result1, #1 wc
06ed8     20 00 90 CD |  if_b	jmp	#LR__0576
06edc                 | LR__0575
06edc     B9 01 00 FF 
06ee0     62 30 06 F6 | 	mov	local06, ##@LR__5848
06ee4     16 13 02 F6 | 	mov	arg01, local04
06ee8     18 15 02 F6 | 	mov	arg02, local06
06eec     A4 01 B2 FD | 	call	#__system___string_cmp
06ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
06ef4     00 FA 05 56 |  if_ne	mov	result1, #0
06ef8     F8 00 90 5D |  if_ne	jmp	#LR__0584
06efc                 | LR__0576
06efc                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06efc     01 36 0E F2 | 	cmp	local09, #1 wz
06f00     90 00 90 5D |  if_ne	jmp	#LR__0579
06f04     B9 01 00 FF 
06f08     64 14 06 F6 | 	mov	arg02, ##@LR__5849
06f0c     16 13 02 F6 | 	mov	arg01, local04
06f10     80 01 B2 FD | 	call	#__system___string_cmp
06f14     00 FA 55 F2 | 	cmps	result1, #0 wc
06f18     1C 00 90 CD |  if_b	jmp	#LR__0577
06f1c     B9 01 00 FF 
06f20     66 14 06 F6 | 	mov	arg02, ##@LR__5850
06f24     16 13 02 F6 | 	mov	arg01, local04
06f28     68 01 B2 FD | 	call	#__system___string_cmp
06f2c     FD 3E 02 F6 | 	mov	local13, result1
06f30     01 3E 56 F2 | 	cmps	local13, #1 wc
06f34     5C 00 90 CD |  if_b	jmp	#LR__0579
06f38                 | LR__0577
06f38     B9 01 00 FF 
06f3c     68 2E 06 F6 | 	mov	local05, ##@LR__5851
06f40     16 13 02 F6 | 	mov	arg01, local04
06f44     17 15 02 F6 | 	mov	arg02, local05
06f48     48 01 B2 FD | 	call	#__system___string_cmp
06f4c     FD 40 02 F6 | 	mov	local14, result1
06f50     00 40 56 F2 | 	cmps	local14, #0 wc
06f54     1C 00 90 CD |  if_b	jmp	#LR__0578
06f58     B9 01 00 FF 
06f5c     6A 32 06 F6 | 	mov	local07, ##@LR__5852
06f60     16 13 02 F6 | 	mov	arg01, local04
06f64     19 15 02 F6 | 	mov	arg02, local07
06f68     28 01 B2 FD | 	call	#__system___string_cmp
06f6c     01 FA 55 F2 | 	cmps	result1, #1 wc
06f70     20 00 90 CD |  if_b	jmp	#LR__0579
06f74                 | LR__0578
06f74     B9 01 00 FF 
06f78     6C 34 06 F6 | 	mov	local08, ##@LR__5853
06f7c     16 13 02 F6 | 	mov	arg01, local04
06f80     1A 15 02 F6 | 	mov	arg02, local08
06f84     0C 01 B2 FD | 	call	#__system___string_cmp
06f88     00 FA 0D F2 | 	cmp	result1, #0 wz
06f8c     00 FA 05 56 |  if_ne	mov	result1, #0
06f90     60 00 90 5D |  if_ne	jmp	#LR__0584
06f94                 | LR__0579
06f94                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06f94     01 38 0E F2 | 	cmp	local10, #1 wz
06f98     4C 00 90 5D |  if_ne	jmp	#LR__0581
06f9c     B9 01 00 FF 
06fa0     6E 14 06 F6 | 	mov	arg02, ##@LR__5854
06fa4     16 13 02 F6 | 	mov	arg01, local04
06fa8     E8 00 B2 FD | 	call	#__system___string_cmp
06fac     00 FA 55 F2 | 	cmps	result1, #0 wc
06fb0     18 00 90 CD |  if_b	jmp	#LR__0580
06fb4     B9 01 00 FF 
06fb8     70 14 06 F6 | 	mov	arg02, ##@LR__5855
06fbc     16 13 02 F6 | 	mov	arg01, local04
06fc0     D0 00 B2 FD | 	call	#__system___string_cmp
06fc4     01 FA 55 F2 | 	cmps	result1, #1 wc
06fc8     1C 00 90 CD |  if_b	jmp	#LR__0581
06fcc                 | LR__0580
06fcc     B9 01 00 FF 
06fd0     72 14 06 F6 | 	mov	arg02, ##@LR__5856
06fd4     16 13 02 F6 | 	mov	arg01, local04
06fd8     B8 00 B2 FD | 	call	#__system___string_cmp
06fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
06fe0     00 FA 05 56 |  if_ne	mov	result1, #0
06fe4     0C 00 90 5D |  if_ne	jmp	#LR__0584
06fe8                 | LR__0581
06fe8     01 3A 06 F1 | 	add	local11, #1
06fec     98 FE 9F FD | 	jmp	#LR__0574
06ff0                 | LR__0582
06ff0                 | LR__0583
06ff0                 | ' return true
06ff0     01 FA 65 F6 | 	neg	result1, #1
06ff4                 | LR__0584
06ff4     A7 F0 03 F6 | 	mov	ptra, fp
06ff8     B2 00 A0 FD | 	call	#popregs_
06ffc                 | _isint_ret
06ffc     2D 00 64 FD | 	ret
07000                 | 
07000                 | ' 
07000                 | ' ' Check if the part is a positive decimal number.  
07000                 | ' 
07000                 | ' function isdec(s as string) as boolean
07000                 | _isdec
07000     05 4A 05 F6 | 	mov	COUNT_, #5
07004     A8 00 A0 FD | 	call	#pushregs_
07008     09 27 02 F6 | 	mov	local01, arg01
0700c     09 29 02 F6 | 	mov	local02, arg01
07010     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
07014                 | LR__0590
07014     14 FB C9 FA | 	rdbyte	result1, local02 wz
07018     01 28 06 51 |  if_ne	add	local02, #1
0701c     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
07020                 | LR__0591
07020     09 29 82 F1 | 	sub	local02, arg01
07024     14 FB 01 F6 | 	mov	result1, local02
07028     FD 28 0A F6 | 	mov	local02, result1 wz
0702c     00 FA 05 A6 |  if_e	mov	result1, #0
07030     80 00 90 AD |  if_e	jmp	#LR__0596
07034                 | ' for i=1 to l
07034     01 2A 06 F6 | 	mov	local03, #1
07038     14 2D 02 F6 | 	mov	local04, local02
0703c     01 2C 06 F1 | 	add	local04, #1
07040                 | LR__0592
07040     16 2B 52 F2 | 	cmps	local03, local04 wc
07044     68 00 90 3D |  if_ae	jmp	#LR__0595
07048     13 13 02 F6 | 	mov	arg01, local01
0704c     15 15 02 F6 | 	mov	arg02, local03
07050     01 16 06 F6 | 	mov	arg03, #1
07054     A8 21 B2 FD | 	call	#__system__Mid_S
07058     FD 2E 02 F6 | 	mov	local05, result1
0705c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0705c     B9 01 00 FF 
07060     74 14 06 F6 | 	mov	arg02, ##@LR__5857
07064     17 13 02 F6 | 	mov	arg01, local05
07068     28 00 B2 FD | 	call	#__system___string_cmp
0706c     00 FA 55 F2 | 	cmps	result1, #0 wc
07070     18 00 90 CD |  if_b	jmp	#LR__0593
07074     B9 01 00 FF 
07078     76 14 06 F6 | 	mov	arg02, ##@LR__5858
0707c     17 13 02 F6 | 	mov	arg01, local05
07080     10 00 B2 FD | 	call	#__system___string_cmp
07084     01 FA 55 F2 | 	cmps	result1, #1 wc
07088     1C 00 90 CD |  if_b	jmp	#LR__0594
0708c                 | LR__0593
0708c     B9 01 00 FF 
07090     78 14 06 F6 | 	mov	arg02, ##@LR__5859
07094     17 13 02 F6 | 	mov	arg01, local05
07098     F8 FF B1 FD | 	call	#__system___string_cmp
0709c     00 FA 0D F2 | 	cmp	result1, #0 wz
070a0     00 FA 05 56 |  if_ne	mov	result1, #0
070a4     0C 00 90 5D |  if_ne	jmp	#LR__0596
070a8                 | LR__0594
070a8     01 2A 06 F1 | 	add	local03, #1
070ac     90 FF 9F FD | 	jmp	#LR__0592
070b0                 | LR__0595
070b0                 | ' return true
070b0     01 FA 65 F6 | 	neg	result1, #1
070b4                 | LR__0596
070b4     A7 F0 03 F6 | 	mov	ptra, fp
070b8     B2 00 A0 FD | 	call	#popregs_
070bc                 | _isdec_ret
070bc     2D 00 64 FD | 	ret
070c0                 | 
070c0                 | ' 
070c0                 | ' ' Check if the part is a string.  
070c0                 | ' 
070c0                 | ' function isstring(s as string) as boolean
070c0                 | _isstring
070c0     01 4A 05 F6 | 	mov	COUNT_, #1
070c4     A8 00 A0 FD | 	call	#pushregs_
070c8                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
070c8     09 27 02 F6 | 	mov	local01, arg01
070cc     01 14 06 F6 | 	mov	arg02, #1
070d0     14 20 B2 FD | 	call	#__system__Left_S
070d4     FD 12 02 F6 | 	mov	arg01, result1
070d8     B9 01 00 FF 
070dc     7A 14 06 F6 | 	mov	arg02, ##@LR__5860
070e0     B0 FF B1 FD | 	call	#__system___string_cmp
070e4     00 FA 4D F2 | 	cmps	result1, #0 wz
070e8     28 00 90 5D |  if_ne	jmp	#LR__0600
070ec     13 13 02 F6 | 	mov	arg01, local01
070f0     01 14 06 F6 | 	mov	arg02, #1
070f4     78 20 B2 FD | 	call	#__system__Right_S
070f8     FD 12 02 F6 | 	mov	arg01, result1
070fc     B9 01 00 FF 
07100     7C 14 06 F6 | 	mov	arg02, ##@LR__5861
07104     8C FF B1 FD | 	call	#__system___string_cmp
07108     00 FA 4D F2 | 	cmps	result1, #0 wz
0710c     01 FA 65 A6 |  if_e	neg	result1, #1
07110     04 00 90 AD |  if_e	jmp	#LR__0601
07114                 | LR__0600
07114     00 FA 05 F6 | 	mov	result1, #0
07118                 | LR__0601
07118     A7 F0 03 F6 | 	mov	ptra, fp
0711c     B2 00 A0 FD | 	call	#popregs_
07120                 | _isstring_ret
07120     2D 00 64 FD | 	ret
07124                 | 
07124                 | ' 
07124                 | ' ' getnoteval. Returns the frequency of note token
07124                 | ' 
07124                 | ' function getnoteval(token) as single
07124                 | _getnoteval
07124     02 4A 05 F6 | 	mov	COUNT_, #2
07128     A8 00 A0 FD | 	call	#pushregs_
0712c     01 00 00 FF 
07130     00 13 86 F1 | 	sub	arg01, ##768
07134     09 15 52 F6 | 	abs	arg02, arg01 wc
07138     0C 14 16 FD | 	qdiv	arg02, #12
0713c     14 00 00 FF 
07140     D8 E4 05 F1 | 	add	objptr, ##10456
07144     19 14 62 FD | 	getqy	arg02
07148     0A 15 82 F6 | 	negc	arg02, arg02
0714c     02 14 66 F0 | 	shl	arg02, #2
07150     F2 14 02 F1 | 	add	arg02, objptr
07154     0A 27 02 FB | 	rdlong	local01, arg02
07158     09 15 52 F6 | 	abs	arg02, arg01 wc
0715c     0C 14 16 FD | 	qdiv	arg02, #12
07160     14 00 00 FF 
07164     D8 E4 85 F1 | 	sub	objptr, ##10456
07168     01 12 06 F6 | 	mov	arg01, #1
0716c                 | ' noteexp=1+(note/12) 
0716c                 | ' return (2.0^noteexp)*notebase
0716c     18 14 62 FD | 	getqx	arg02
07170     0A 13 82 F3 | 	sumc	arg01, arg02
07174     09 13 52 F6 | 	abs	arg01, arg01 wc
07178     1F 28 C6 C9 |  if_b	decod	local02, #31
0717c     00 28 06 36 |  if_ae	mov	local02, #0
07180     5C 29 B2 FD | 	call	#__system___float_fromuns
07184     14 FB 61 F5 | 	xor	result1, local02
07188     FD 14 02 F6 | 	mov	arg02, result1
0718c     1E 12 C6 F9 | 	decod	arg01, #30
07190     58 3C B2 FD | 	call	#__system____builtin_powf
07194     FD 12 02 F6 | 	mov	arg01, result1
07198     13 15 02 F6 | 	mov	arg02, local01
0719c     44 2D B2 FD | 	call	#__system___float_mul
071a0     A7 F0 03 F6 | 	mov	ptra, fp
071a4     B2 00 A0 FD | 	call	#popregs_
071a8                 | _getnoteval_ret
071a8     2D 00 64 FD | 	ret
071ac                 | 
071ac                 | ' 
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' 
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' '
071ac                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
071ac                 | ' '
071ac                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
071ac                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
071ac                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
071ac                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
071ac                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
071ac                 | ' ' 
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' 
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' ' Helper functions to manage program lines
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' 
071ac                 | ' '----- delete a line from a program
071ac                 | ' 
071ac                 | ' function deleteline(aline as ulong) as integer
071ac                 | _deleteline
071ac     02 4A 05 F6 | 	mov	COUNT_, #2
071b0     A8 00 A0 FD | 	call	#pushregs_
071b4     2C F0 07 F1 | 	add	ptra, #44
071b8     04 4E 05 F1 | 	add	fp, #4
071bc     A7 12 62 FC | 	wrlong	arg01, fp
071c0     4A 00 00 FF 
071c4     88 E4 05 F1 | 	add	objptr, ##38024
071c8     F2 26 02 FB | 	rdlong	local01, objptr
071cc     0C 4E 05 F1 | 	add	fp, #12
071d0     A7 26 62 FC | 	wrlong	local01, fp
071d4     10 4E 85 F1 | 	sub	fp, #16
071d8                 | ' 
071d8                 | ' searchptr=programstart
071d8                 | ' do
071d8     3E 00 00 FF 
071dc     BC E5 85 F1 | 	sub	objptr, ##32188
071e0                 | LR__0610
071e0     14 4E 05 F1 | 	add	fp, #20
071e4     A7 12 02 F6 | 	mov	arg01, fp
071e8     04 4E 85 F1 | 	sub	fp, #4
071ec     A7 14 02 FB | 	rdlong	arg02, fp
071f0     10 4E 85 F1 | 	sub	fp, #16
071f4     18 16 06 F6 | 	mov	arg03, #24
071f8     78 F1 B1 FD | 	call	#_psram_spin2_read1
071fc     10 4E 05 F1 | 	add	fp, #16
07200     A7 26 02 FB | 	rdlong	local01, fp
07204     08 4E 85 F1 | 	sub	fp, #8
07208     A7 26 62 FC | 	wrlong	local01, fp
0720c     20 4E 05 F1 | 	add	fp, #32
07210     A7 26 02 FB | 	rdlong	local01, fp
07214     18 4E 85 F1 | 	sub	fp, #24
07218     A7 26 62 FC | 	wrlong	local01, fp
0721c     04 4E 05 F1 | 	add	fp, #4
07220     A7 26 02 FB | 	rdlong	local01, fp
07224     10 4E 85 F1 | 	sub	fp, #16
07228     A7 16 02 FB | 	rdlong	arg03, fp
0722c     04 4E 85 F1 | 	sub	fp, #4
07230     0B 27 12 F2 | 	cmp	local01, arg03 wc
07234     28 4E 05 C1 |  if_b	add	fp, #40
07238     A7 28 02 CB |  if_b	rdlong	local02, fp
0723c     28 4E 85 C1 |  if_b	sub	fp, #40
07240     FF FF 3F CF 
07244     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07248     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0610
0724c     0B 00 00 FF 
07250     CC E4 85 F1 | 	sub	objptr, ##5836
07254                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07254     14 4E 05 F1 | 	add	fp, #20
07258     A7 26 02 FB | 	rdlong	local01, fp
0725c     10 4E 85 F1 | 	sub	fp, #16
07260     A7 28 02 FB | 	rdlong	local02, fp
07264     04 4E 85 F1 | 	sub	fp, #4
07268     14 27 0A F2 | 	cmp	local01, local02 wz
0726c     01 FA 65 56 |  if_ne	neg	result1, #1
07270     34 02 90 5D |  if_ne	jmp	#LR__0615
07274     08 4E 05 F1 | 	add	fp, #8
07278     A7 12 02 FB | 	rdlong	arg01, fp
0727c     08 4E 85 F1 | 	sub	fp, #8
07280     01 14 66 F6 | 	neg	arg02, #1
07284     D8 C4 B1 FD | 	call	#_pslpoke
07288                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07288                 | ' 
07288                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07288     28 4E 05 F1 | 	add	fp, #40
0728c     A7 26 02 FB | 	rdlong	local01, fp
07290     28 4E 85 F1 | 	sub	fp, #40
07294     FF FF 3F FF 
07298     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
0729c     24 4E 05 A1 |  if_e	add	fp, #36
072a0     A7 28 02 AB |  if_e	rdlong	local02, fp
072a4     24 4E 85 A1 |  if_e	sub	fp, #36
072a8     FF FF 7F AF 
072ac     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
072b0     88 00 90 5D |  if_ne	jmp	#LR__0611
072b4     4A 00 00 FF 
072b8     88 E4 05 F1 | 	add	objptr, ##38024
072bc     00 04 80 FF 
072c0     F2 00 68 FC | 	wrlong	##524288, objptr
072c4     07 00 00 FF 
072c8     2C E4 85 F1 | 	sub	objptr, ##3628
072cc     00 04 80 FF 
072d0     F2 00 68 FC | 	wrlong	##524288, objptr
072d4     07 00 00 FF 
072d8     30 E4 05 F1 | 	add	objptr, ##3632
072dc     F2 00 68 FC | 	wrlong	#0, objptr
072e0     04 E4 05 F1 | 	add	objptr, #4
072e4     FF FF FF FF 
072e8     F2 FE 6B FC | 	wrlong	##-1, objptr
072ec     4A 00 00 FF 
072f0     90 E4 85 F1 | 	sub	objptr, ##38032
072f4     00 12 06 F6 | 	mov	arg01, #0
072f8     01 14 66 F6 | 	neg	arg02, #1
072fc     60 C4 B1 FD | 	call	#_pslpoke
07300     10 12 06 F6 | 	mov	arg01, #16
07304     01 14 66 F6 | 	neg	arg02, #1
07308     54 C4 B1 FD | 	call	#_pslpoke
0730c     14 12 06 F6 | 	mov	arg01, #20
07310     1E 14 CE F9 | 	bmask	arg02, #30
07314     48 C4 B1 FD | 	call	#_pslpoke
07318     50 00 00 FF 
0731c     B8 E4 05 F1 | 	add	objptr, ##41144
07320     00 04 80 FF 
07324     F2 00 68 FC | 	wrlong	##524288, objptr
07328     04 E4 05 F1 | 	add	objptr, #4
0732c     00 04 80 FF 
07330     F2 00 68 FC | 	wrlong	##524288, objptr
07334     50 00 00 FF 
07338     BC E4 85 F1 | 	sub	objptr, ##41148
0733c                 | LR__0611
0733c                 | ' 
0733c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
0733c     28 4E 05 F1 | 	add	fp, #40
07340     A7 26 02 FB | 	rdlong	local01, fp
07344     28 4E 85 F1 | 	sub	fp, #40
07348     FF FF 3F FF 
0734c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07350     74 00 90 5D |  if_ne	jmp	#LR__0612
07354     24 4E 05 F1 | 	add	fp, #36
07358     A7 28 02 FB | 	rdlong	local02, fp
0735c     24 4E 85 F1 | 	sub	fp, #36
07360     FF FF 7F FF 
07364     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07368     5C 00 90 AD |  if_e	jmp	#LR__0612
0736c     24 4E 05 F1 | 	add	fp, #36
07370     A7 12 02 FB | 	rdlong	arg01, fp
07374     24 4E 85 F1 | 	sub	fp, #36
07378     14 12 06 F1 | 	add	arg01, #20
0737c     1E 14 CE F9 | 	bmask	arg02, #30
07380     DC C3 B1 FD | 	call	#_pslpoke
07384     24 4E 05 F1 | 	add	fp, #36
07388     A7 26 02 FB | 	rdlong	local01, fp
0738c     4A 00 00 FF 
07390     90 E4 05 F1 | 	add	objptr, ##38032
07394     F2 26 62 FC | 	wrlong	local01, objptr
07398     4A 00 00 FF 
0739c     90 E4 85 F1 | 	sub	objptr, ##38032
073a0     A7 12 02 FB | 	rdlong	arg01, fp
073a4     24 4E 85 F1 | 	sub	fp, #36
073a8     E4 C4 B1 FD | 	call	#_pslpeek
073ac     4A 00 00 FF 
073b0     8C E4 05 F1 | 	add	objptr, ##38028
073b4     F2 FA 61 FC | 	wrlong	result1, objptr
073b8     4A 00 00 FF 
073bc     8C E4 85 F1 | 	sub	objptr, ##38028
073c0                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
073c0                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
073c0                 | '   lastline=pslpeek(header(4))
073c0                 | '   return 0
073c0     00 FA 05 F6 | 	mov	result1, #0
073c4     E0 00 90 FD | 	jmp	#LR__0615
073c8                 | LR__0612
073c8                 | ' 
073c8                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
073c8     28 4E 05 F1 | 	add	fp, #40
073cc     A7 26 02 FB | 	rdlong	local01, fp
073d0     28 4E 85 F1 | 	sub	fp, #40
073d4     FF FF 3F FF 
073d8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
073dc     58 00 90 AD |  if_e	jmp	#LR__0613
073e0     24 4E 05 F1 | 	add	fp, #36
073e4     A7 28 02 FB | 	rdlong	local02, fp
073e8     24 4E 85 F1 | 	sub	fp, #36
073ec     FF FF 7F FF 
073f0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
073f4     40 00 90 5D |  if_ne	jmp	#LR__0613
073f8     28 4E 05 F1 | 	add	fp, #40
073fc     A7 12 02 FB | 	rdlong	arg01, fp
07400     28 4E 85 F1 | 	sub	fp, #40
07404     10 12 06 F1 | 	add	arg01, #16
07408     01 14 66 F6 | 	neg	arg02, #1
0740c     50 C3 B1 FD | 	call	#_pslpoke
07410     28 4E 05 F1 | 	add	fp, #40
07414     A7 26 02 FB | 	rdlong	local01, fp
07418     28 4E 85 F1 | 	sub	fp, #40
0741c     4A 00 00 FF 
07420     88 E4 05 F1 | 	add	objptr, ##38024
07424     F2 26 62 FC | 	wrlong	local01, objptr
07428     4A 00 00 FF 
0742c     88 E4 85 F1 | 	sub	objptr, ##38024
07430                 | ' '   print "deleted first line"
07430                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
07430                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
07430                 | '   return 0
07430     00 FA 05 F6 | 	mov	result1, #0
07434     70 00 90 FD | 	jmp	#LR__0615
07438                 | LR__0613
07438                 | ' 
07438                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
07438     28 4E 05 F1 | 	add	fp, #40
0743c     A7 26 02 FB | 	rdlong	local01, fp
07440     28 4E 85 F1 | 	sub	fp, #40
07444     FF FF 3F FF 
07448     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
0744c     24 4E 05 51 |  if_ne	add	fp, #36
07450     A7 28 02 5B |  if_ne	rdlong	local02, fp
07454     24 4E 85 51 |  if_ne	sub	fp, #36
07458     FF FF 7F 5F 
0745c     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
07460     40 00 90 AD |  if_e	jmp	#LR__0614
07464     28 4E 05 F1 | 	add	fp, #40
07468     A7 12 02 FB | 	rdlong	arg01, fp
0746c     10 12 06 F1 | 	add	arg01, #16
07470     04 4E 85 F1 | 	sub	fp, #4
07474     A7 14 02 FB | 	rdlong	arg02, fp
07478     24 4E 85 F1 | 	sub	fp, #36
0747c     E0 C2 B1 FD | 	call	#_pslpoke
07480     24 4E 05 F1 | 	add	fp, #36
07484     A7 12 02 FB | 	rdlong	arg01, fp
07488     14 12 06 F1 | 	add	arg01, #20
0748c     04 4E 05 F1 | 	add	fp, #4
07490     A7 14 02 FB | 	rdlong	arg02, fp
07494     28 4E 85 F1 | 	sub	fp, #40
07498     C4 C2 B1 FD | 	call	#_pslpoke
0749c                 | '    pslpoke(header(5)+16,header(4))  
0749c                 | '    pslpoke(header(4)+20, header(5))
0749c                 | '    return 0
0749c     00 FA 05 F6 | 	mov	result1, #0
074a0     04 00 90 FD | 	jmp	#LR__0615
074a4                 | LR__0614
074a4     00 FA 05 F6 | 	mov	result1, #0
074a8                 | LR__0615
074a8     A7 F0 03 F6 | 	mov	ptra, fp
074ac     B2 00 A0 FD | 	call	#popregs_
074b0                 | _deleteline_ret
074b0     2D 00 64 FD | 	ret
074b4                 | 
074b4                 | ' 
074b4                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
074b4                 | ' 
074b4                 | ' sub save_line
074b4                 | _save_line
074b4     03 4A 05 F6 | 	mov	COUNT_, #3
074b8     A8 00 A0 FD | 	call	#pushregs_
074bc     4A 00 00 FF 
074c0     7C E4 05 F1 | 	add	objptr, ##38012
074c4     F2 16 02 FB | 	rdlong	arg03, objptr
074c8     01 16 06 F1 | 	add	arg03, #1
074cc     05 00 00 FF 
074d0     18 E4 85 F1 | 	sub	objptr, ##2584
074d4     F2 14 02 FB | 	rdlong	arg02, objptr
074d8     0B 15 02 FD | 	qmul	arg02, arg03
074dc     0E 00 00 FF 
074e0     44 E4 85 F1 | 	sub	objptr, ##7236
074e4     F2 12 02 FB | 	rdlong	arg01, objptr
074e8     37 00 00 FF 
074ec     20 E4 85 F1 | 	sub	objptr, ##28192
074f0     09 27 02 F6 | 	mov	local01, arg01
074f4     18 28 62 FD | 	getqx	local02
074f8     97 06 48 FB | 	callpa	#(@LR__0621-@LR__0620)>>2,fcache_load_ptr_
074fc                 | LR__0620
074fc     13 FB C9 FA | 	rdbyte	result1, local01 wz
07500     01 26 06 51 |  if_ne	add	local01, #1
07504     F4 FF 9F 5D |  if_ne	jmp	#LR__0620
07508                 | LR__0621
07508     09 27 82 F1 | 	sub	local01, arg01
0750c     03 26 CE F7 | 	test	local01, #3 wz
07510     02 26 46 50 |  if_ne	shr	local01, #2
07514     01 26 06 51 |  if_ne	add	local01, #1
07518     02 26 66 50 |  if_ne	shl	local01, #2
0751c     14 2B 02 F6 | 	mov	local03, local02
07520     13 2B 02 F1 | 	add	local03, local01
07524     43 00 00 FF 
07528     5C E4 05 F1 | 	add	objptr, ##34396
0752c     F2 16 02 FB | 	rdlong	arg03, objptr
07530     14 17 02 F1 | 	add	arg03, local02
07534     04 00 00 FF 
07538     28 E4 05 F1 | 	add	objptr, ##2088
0753c     F2 16 62 FC | 	wrlong	arg03, objptr
07540     04 E4 05 F1 | 	add	objptr, #4
07544     F2 26 62 FC | 	wrlong	local01, objptr
07548     0C E4 85 F1 | 	sub	objptr, #12
0754c     F2 12 02 F6 | 	mov	arg01, objptr
07550     04 00 00 FF 
07554     20 E4 85 F1 | 	sub	objptr, ##2080
07558     F2 14 02 FB | 	rdlong	arg02, objptr
0755c     14 17 02 F6 | 	mov	arg03, local02
07560     37 00 00 FF 
07564     90 E5 85 F1 | 	sub	objptr, ##28560
07568     A4 EE B1 FD | 	call	#_psram_spin2_write
0756c     2B 00 00 FF 
07570     54 E5 05 F1 | 	add	objptr, ##22356
07574     F2 12 02 FB | 	rdlong	arg01, objptr
07578     0C 00 00 FF 
0757c     3C E4 05 F1 | 	add	objptr, ##6204
07580     F2 14 02 FB | 	rdlong	arg02, objptr
07584     14 15 02 F1 | 	add	arg02, local02
07588     13 17 02 F6 | 	mov	arg03, local01
0758c     37 00 00 FF 
07590     90 E5 85 F1 | 	sub	objptr, ##28560
07594     78 EE B1 FD | 	call	#_psram_spin2_write
07598     37 00 00 FF 
0759c     90 E5 05 F1 | 	add	objptr, ##28560
075a0     F2 26 02 FB | 	rdlong	local01, objptr
075a4     15 27 02 F1 | 	add	local01, local03
075a8     F2 26 62 FC | 	wrlong	local01, objptr
075ac     43 00 00 FF 
075b0     5C E4 85 F1 | 	sub	objptr, ##34396
075b4     A7 F0 03 F6 | 	mov	ptra, fp
075b8     B2 00 A0 FD | 	call	#popregs_
075bc                 | _save_line_ret
075bc     2D 00 64 FD | 	ret
075c0                 | 
075c0                 | ' 
075c0                 | ' '----- Insert a new line into the middle of the program
075c0                 | ' 
075c0                 | ' function insertline(aline as ulong) as integer
075c0                 | _insertline
075c0     02 4A 05 F6 | 	mov	COUNT_, #2
075c4     A8 00 A0 FD | 	call	#pushregs_
075c8     28 F0 07 F1 | 	add	ptra, #40
075cc     04 4E 05 F1 | 	add	fp, #4
075d0     A7 12 62 FC | 	wrlong	arg01, fp
075d4     4A 00 00 FF 
075d8     88 E4 05 F1 | 	add	objptr, ##38024
075dc     F2 26 02 FB | 	rdlong	local01, objptr
075e0     04 4E 05 F1 | 	add	fp, #4
075e4     A7 26 62 FC | 	wrlong	local01, fp
075e8     08 4E 85 F1 | 	sub	fp, #8
075ec                 | ' 
075ec                 | ' do
075ec     3E 00 00 FF 
075f0     BC E5 85 F1 | 	sub	objptr, ##32188
075f4                 | LR__0630
075f4     10 4E 05 F1 | 	add	fp, #16
075f8     A7 12 02 F6 | 	mov	arg01, fp
075fc     08 4E 85 F1 | 	sub	fp, #8
07600     A7 14 02 FB | 	rdlong	arg02, fp
07604     08 4E 85 F1 | 	sub	fp, #8
07608     18 16 06 F6 | 	mov	arg03, #24
0760c     64 ED B1 FD | 	call	#_psram_spin2_read1
07610     08 4E 05 F1 | 	add	fp, #8
07614     A7 26 02 FB | 	rdlong	local01, fp
07618     04 4E 05 F1 | 	add	fp, #4
0761c     A7 26 62 FC | 	wrlong	local01, fp
07620     18 4E 05 F1 | 	add	fp, #24
07624     A7 26 02 FB | 	rdlong	local01, fp
07628     1C 4E 85 F1 | 	sub	fp, #28
0762c     A7 26 62 FC | 	wrlong	local01, fp
07630     08 4E 05 F1 | 	add	fp, #8
07634     A7 26 02 FB | 	rdlong	local01, fp
07638     0C 4E 85 F1 | 	sub	fp, #12
0763c     A7 16 02 FB | 	rdlong	arg03, fp
07640     04 4E 85 F1 | 	sub	fp, #4
07644     0B 27 12 F2 | 	cmp	local01, arg03 wc
07648     24 4E 05 C1 |  if_b	add	fp, #36
0764c     A7 28 02 CB |  if_b	rdlong	local02, fp
07650     24 4E 85 C1 |  if_b	sub	fp, #36
07654     FF FF 3F CF 
07658     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0765c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0630
07660     0B 00 00 FF 
07664     CC E4 85 F1 | 	sub	objptr, ##5836
07668                 | ' 
07668                 | ' if header(0)=aline then return -1 				' delete it first
07668     10 4E 05 F1 | 	add	fp, #16
0766c     A7 26 02 FB | 	rdlong	local01, fp
07670     0C 4E 85 F1 | 	sub	fp, #12
07674     A7 28 02 FB | 	rdlong	local02, fp
07678     04 4E 85 F1 | 	sub	fp, #4
0767c     14 27 0A F2 | 	cmp	local01, local02 wz
07680     01 FA 65 A6 |  if_e	neg	result1, #1
07684     48 01 90 AD |  if_e	jmp	#LR__0633
07688                 | ' if header(0)<aline then return -2 				' end of program reached
07688     10 4E 05 F1 | 	add	fp, #16
0768c     A7 26 02 FB | 	rdlong	local01, fp
07690     0C 4E 85 F1 | 	sub	fp, #12
07694     A7 16 02 FB | 	rdlong	arg03, fp
07698     04 4E 85 F1 | 	sub	fp, #4
0769c     0B 27 12 F2 | 	cmp	local01, arg03 wc
076a0     02 FA 65 C6 |  if_b	neg	result1, #2
076a4     28 01 90 CD |  if_b	jmp	#LR__0633
076a8                 | ' 
076a8                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
076a8     20 4E 05 F1 | 	add	fp, #32
076ac     A7 26 02 FB | 	rdlong	local01, fp
076b0     20 4E 85 F1 | 	sub	fp, #32
076b4     FF FF 7F FF 
076b8     FF 27 0E F2 | 	cmp	local01, ##-1 wz
076bc     78 00 90 5D |  if_ne	jmp	#LR__0631
076c0     43 00 00 FF 
076c4     5C E4 05 F1 | 	add	objptr, ##34396
076c8     F2 26 02 FB | 	rdlong	local01, objptr
076cc     07 00 00 FF 
076d0     2C E4 05 F1 | 	add	objptr, ##3628
076d4     F2 26 62 FC | 	wrlong	local01, objptr
076d8     0C 4E 05 F1 | 	add	fp, #12
076dc     A7 12 02 FB | 	rdlong	arg01, fp
076e0     0C 4E 85 F1 | 	sub	fp, #12
076e4     10 12 06 F1 | 	add	arg01, #16
076e8     07 00 00 FF 
076ec     2C E4 85 F1 | 	sub	objptr, ##3628
076f0     F2 14 02 FB | 	rdlong	arg02, objptr
076f4     43 00 00 FF 
076f8     5C E4 85 F1 | 	sub	objptr, ##34396
076fc     60 C0 B1 FD | 	call	#_pslpoke
07700     47 00 00 FF 
07704     8C E4 05 F1 | 	add	objptr, ##36492
07708     FF FF FF FF 
0770c     F2 FE 6B FC | 	wrlong	##-1, objptr
07710     0C 4E 05 F1 | 	add	fp, #12
07714     A7 26 02 FB | 	rdlong	local01, fp
07718     0C 4E 85 F1 | 	sub	fp, #12
0771c     04 E4 05 F1 | 	add	objptr, #4
07720     F2 26 62 FC | 	wrlong	local01, objptr
07724     47 00 00 FF 
07728     90 E4 85 F1 | 	sub	objptr, ##36496
0772c     84 FD BF FD | 	call	#_save_line
07730                 | '   programstart=programptr
07730                 | '   pslpoke(lineptr2+16,programptr)
07730                 | '   ucompiledline(4)=$FFFF_FFFF
07730                 | '   ucompiledline(5)=lineptr2
07730                 | '   save_line
07730                 | '   return 0
07730     00 FA 05 F6 | 	mov	result1, #0
07734     98 00 90 FD | 	jmp	#LR__0633
07738                 | LR__0631
07738                 | ' 
07738                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07738     20 4E 05 F1 | 	add	fp, #32
0773c     A7 26 02 FB | 	rdlong	local01, fp
07740     20 4E 85 F1 | 	sub	fp, #32
07744     FF FF 7F FF 
07748     FF 27 0E F2 | 	cmp	local01, ##-1 wz
0774c     7C 00 90 AD |  if_e	jmp	#LR__0632
07750     20 4E 05 F1 | 	add	fp, #32
07754     A7 26 02 FB | 	rdlong	local01, fp
07758     47 00 00 FF 
0775c     8C E4 05 F1 | 	add	objptr, ##36492
07760     F2 26 62 FC | 	wrlong	local01, objptr
07764     14 4E 85 F1 | 	sub	fp, #20
07768     A7 26 02 FB | 	rdlong	local01, fp
0776c     04 E4 05 F1 | 	add	objptr, #4
07770     F2 26 62 FC | 	wrlong	local01, objptr
07774     A7 12 02 FB | 	rdlong	arg01, fp
07778     0C 4E 85 F1 | 	sub	fp, #12
0777c     10 12 06 F1 | 	add	arg01, #16
07780     04 00 00 FF 
07784     34 E4 85 F1 | 	sub	objptr, ##2100
07788     F2 14 02 FB | 	rdlong	arg02, objptr
0778c     43 00 00 FF 
07790     5C E4 85 F1 | 	sub	objptr, ##34396
07794     C8 BF B1 FD | 	call	#_pslpoke
07798     20 4E 05 F1 | 	add	fp, #32
0779c     A7 12 02 FB | 	rdlong	arg01, fp
077a0     20 4E 85 F1 | 	sub	fp, #32
077a4     14 12 06 F1 | 	add	arg01, #20
077a8     43 00 00 FF 
077ac     5C E4 05 F1 | 	add	objptr, ##34396
077b0     F2 14 02 FB | 	rdlong	arg02, objptr
077b4     43 00 00 FF 
077b8     5C E4 85 F1 | 	sub	objptr, ##34396
077bc     A0 BF B1 FD | 	call	#_pslpoke
077c0     F0 FC BF FD | 	call	#_save_line
077c4                 | '   ucompiledline(4)=header(4)
077c4                 | '   ucompiledline(5)=lineptr2
077c4                 | '   pslpoke(lineptr2+16,programptr)
077c4                 | '   pslpoke(header(4)+20,programptr)
077c4                 | '   save_line
077c4                 | '   return 0
077c4     00 FA 05 F6 | 	mov	result1, #0
077c8     04 00 90 FD | 	jmp	#LR__0633
077cc                 | LR__0632
077cc     00 FA 05 F6 | 	mov	result1, #0
077d0                 | LR__0633
077d0     A7 F0 03 F6 | 	mov	ptra, fp
077d4     B2 00 A0 FD | 	call	#popregs_
077d8                 | _insertline_ret
077d8     2D 00 64 FD | 	ret
077dc                 | 
077dc                 | ' 
077dc                 | ' '----- Adds a new line at the end of the program
077dc                 | ' 
077dc                 | ' sub add_line_at_end(aline) 
077dc                 | _add_line_at_end
077dc     4A 00 00 FF 
077e0     8C E4 05 F1 | 	add	objptr, ##38028
077e4     F2 12 62 FC | 	wrlong	arg01, objptr
077e8     04 E4 05 F1 | 	add	objptr, #4
077ec     F2 14 02 FB | 	rdlong	arg02, objptr
077f0     03 00 00 FF 
077f4     04 E4 85 F1 | 	sub	objptr, ##1540
077f8     F2 14 62 FC | 	wrlong	arg02, objptr
077fc     03 00 00 FF 
07800     04 E4 05 F1 | 	add	objptr, ##1540
07804     F2 12 02 FB | 	rdlong	arg01, objptr
07808     14 12 06 F1 | 	add	arg01, #20
0780c     07 00 00 FF 
07810     34 E4 85 F1 | 	sub	objptr, ##3636
07814     F2 14 02 FB | 	rdlong	arg02, objptr
07818     43 00 00 FF 
0781c     5C E4 85 F1 | 	sub	objptr, ##34396
07820     3C BF B1 FD | 	call	#_pslpoke
07824     43 00 00 FF 
07828     5C E4 05 F1 | 	add	objptr, ##34396
0782c     F2 14 02 FB | 	rdlong	arg02, objptr
07830     07 00 00 FF 
07834     34 E4 05 F1 | 	add	objptr, ##3636
07838     F2 14 62 FC | 	wrlong	arg02, objptr
0783c     03 00 00 FF 
07840     00 E4 85 F1 | 	sub	objptr, ##1536
07844     FF FF BF FF 
07848     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0784c                 | ' 
0784c                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
0784c                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
0784c     04 00 00 FF 
07850     34 E4 85 F1 | 	sub	objptr, ##2100
07854     F2 14 02 FB | 	rdlong	arg02, objptr
07858     43 00 00 FF 
0785c     5C E4 85 F1 | 	sub	objptr, ##34396
07860     00 04 00 FF 
07864     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07868     47 00 00 AF 
0786c     8C E4 05 A1 |  if_e	add	objptr, ##36492
07870     FF FF FF AF 
07874     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07878     47 00 00 AF 
0787c     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07880     30 FC BF FD | 	call	#_save_line
07884     43 00 00 FF 
07888     5C E4 05 F1 | 	add	objptr, ##34396
0788c     F2 12 02 FB | 	rdlong	arg01, objptr
07890     43 00 00 FF 
07894     5C E4 85 F1 | 	sub	objptr, ##34396
07898     01 14 66 F6 | 	neg	arg02, #1
0789c     C0 BE B1 FD | 	call	#_pslpoke
078a0                 | _add_line_at_end_ret
078a0     2D 00 64 FD | 	ret
078a4                 | 
078a4                 | ' 
078a4                 | ' '--------------------------------------------------------------------------------------------------------------------------
078a4                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
078a4                 | ' '--------------------------------------------------------------------------------------------------------------------------
078a4                 | ' 
078a4                 | ' '--------------------------------------------------------------------------------------------------------------------------
078a4                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
078a4                 | ' '--------------------------------------------------------------------------------------------------------------------------
078a4                 | ' 
078a4                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
078a4                 | ' 
078a4                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
078a4                 | _compile_immediate
078a4     0A 4A 05 F6 | 	mov	COUNT_, #10
078a8     A8 00 A0 FD | 	call	#pushregs_
078ac                 | _compile_immediate_enter
078ac     09 2D 02 F6 | 	mov	local04, arg01
078b0     0A 2F 02 F6 | 	mov	local05, arg02
078b4     00 30 06 F6 | 	mov	local06, #0
078b8     00 32 06 F6 | 	mov	local07, #0
078bc     00 34 06 F6 | 	mov	local08, #0
078c0                 | ' 
078c0                 | ' ' linetype=cont+1
078c0                 | ' ' 1 : this is the first part of the line that will continue
078c0                 | ' ' 2 - this is the continuation of the line
078c0                 | ' ' 3 - this is the last continued line
078c0                 | ' ' 4 - this is the one and only part
078c0                 | ' ' 5 - continued after if/else
078c0                 | ' 
078c0                 | ' err=0
078c0                 | ' cmd=0
078c0                 | ' vars=0
078c0                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
078c0     02 2C 0E F2 | 	cmp	local04, #2 wz
078c4     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
078c8     24 00 90 5D |  if_ne	jmp	#LR__0640
078cc     35 00 00 FF 
078d0     10 E4 05 F1 | 	add	objptr, ##27152
078d4     F2 32 02 FB | 	rdlong	local07, objptr
078d8     01 36 06 F6 | 	mov	local09, #1
078dc     02 00 00 FF 
078e0     34 E4 05 F1 | 	add	objptr, ##1076
078e4     F2 02 68 FC | 	wrlong	#1, objptr
078e8     37 00 00 FF 
078ec     44 E4 85 F1 | 	sub	objptr, ##28228
078f0                 | LR__0640
078f0                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
078f0     04 2C 0E F2 | 	cmp	local04, #4 wz
078f4     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
078f8     30 00 90 5D |  if_ne	jmp	#LR__0641
078fc     35 00 00 FF 
07900     18 E4 05 F1 | 	add	objptr, ##27160
07904     F2 32 02 FB | 	rdlong	local07, objptr
07908     02 36 06 F6 | 	mov	local09, #2
0790c     02 00 00 FF 
07910     2C E4 05 F1 | 	add	objptr, ##1068
07914     F2 04 68 FC | 	wrlong	#2, objptr
07918     13 00 00 FF 
0791c     38 E4 05 F1 | 	add	objptr, ##9784
07920     F2 04 68 FC | 	wrlong	#2, objptr
07924     4A 00 00 FF 
07928     7C E4 85 F1 | 	sub	objptr, ##38012
0792c                 | LR__0641
0792c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
0792c     05 2C 0E F2 | 	cmp	local04, #5 wz
07930     40 00 90 5D |  if_ne	jmp	#LR__0642
07934     37 00 00 FF 
07938     44 E4 05 F1 | 	add	objptr, ##28228
0793c     F2 FC 01 FB | 	rdlong	result2, objptr
07940     FE 36 02 F6 | 	mov	local09, result2
07944     03 36 66 F0 | 	shl	local09, #3
07948     02 00 00 FF 
0794c     38 E4 85 F1 | 	sub	objptr, ##1080
07950     F2 36 02 F1 | 	add	local09, objptr
07954     04 36 06 F1 | 	add	local09, #4
07958     1B 33 02 FB | 	rdlong	local07, local09
0795c     01 FC 05 F1 | 	add	result2, #1
07960     02 00 00 FF 
07964     38 E4 05 F1 | 	add	objptr, ##1080
07968     F2 FC 61 FC | 	wrlong	result2, objptr
0796c     37 00 00 FF 
07970     44 E4 85 F1 | 	sub	objptr, ##28228
07974                 | LR__0642
07974                 | ' 
07974                 | ' 'print  "In compile_immediate cmd=:", cmd
07974                 | ' 451 select case cmd
07974     5C 32 0E F2 | 	cmp	local07, #92 wz
07978     D8 02 90 AD |  if_e	jmp	#LR__0643
0797c     B9 32 0E F2 | 	cmp	local07, #185 wz
07980     DC 02 90 AD |  if_e	jmp	#LR__0644
07984     47 32 0E F2 | 	cmp	local07, #71 wz
07988     E4 02 90 AD |  if_e	jmp	#LR__0645
0798c     59 32 0E F2 | 	cmp	local07, #89 wz
07990     EC 02 90 AD |  if_e	jmp	#LR__0646
07994     C3 32 0E F2 | 	cmp	local07, #195 wz
07998     F4 02 90 AD |  if_e	jmp	#LR__0647
0799c     45 32 0E F2 | 	cmp	local07, #69 wz
079a0     F8 02 90 AD |  if_e	jmp	#LR__0648
079a4     69 32 0E F2 | 	cmp	local07, #105 wz
079a8     00 03 90 AD |  if_e	jmp	#LR__0649
079ac     40 32 0E F2 | 	cmp	local07, #64 wz
079b0     F0 06 90 AD |  if_e	jmp	#LR__0724
079b4     B4 32 0E F2 | 	cmp	local07, #180 wz
079b8     FC 02 90 AD |  if_e	jmp	#LR__0650
079bc     49 32 0E F2 | 	cmp	local07, #73 wz
079c0     00 03 90 AD |  if_e	jmp	#LR__0651
079c4     C4 32 0E F2 | 	cmp	local07, #196 wz
079c8     04 03 90 AD |  if_e	jmp	#LR__0652
079cc     AE 32 0E F2 | 	cmp	local07, #174 wz
079d0     08 03 90 AD |  if_e	jmp	#LR__0653
079d4     B0 32 0E F2 | 	cmp	local07, #176 wz
079d8     0C 03 90 AD |  if_e	jmp	#LR__0654
079dc     AF 32 0E F2 | 	cmp	local07, #175 wz
079e0     10 03 90 AD |  if_e	jmp	#LR__0655
079e4     B1 32 0E F2 | 	cmp	local07, #177 wz
079e8     14 03 90 AD |  if_e	jmp	#LR__0656
079ec     CF 32 0E F2 | 	cmp	local07, #207 wz
079f0     18 03 90 AD |  if_e	jmp	#LR__0657
079f4     68 32 0E F2 | 	cmp	local07, #104 wz
079f8     1C 03 90 AD |  if_e	jmp	#LR__0658
079fc     B7 32 0E F2 | 	cmp	local07, #183 wz
07a00     A0 06 90 AD |  if_e	jmp	#LR__0724
07a04     74 32 0E F2 | 	cmp	local07, #116 wz
07a08     18 03 90 AD |  if_e	jmp	#LR__0659
07a0c     73 32 0E F2 | 	cmp	local07, #115 wz
07a10     20 03 90 AD |  if_e	jmp	#LR__0660
07a14     6C 32 0E F2 | 	cmp	local07, #108 wz
07a18     28 03 90 AD |  if_e	jmp	#LR__0661
07a1c     89 32 0E F2 | 	cmp	local07, #137 wz
07a20     80 06 90 AD |  if_e	jmp	#LR__0724
07a24     C2 32 0E F2 | 	cmp	local07, #194 wz
07a28     28 03 90 AD |  if_e	jmp	#LR__0662
07a2c     72 32 0E F2 | 	cmp	local07, #114 wz
07a30     2C 03 90 AD |  if_e	jmp	#LR__0663
07a34     5D 32 0E F2 | 	cmp	local07, #93 wz
07a38     30 03 90 AD |  if_e	jmp	#LR__0664
07a3c     96 32 0E F2 | 	cmp	local07, #150 wz
07a40     38 03 90 AD |  if_e	jmp	#LR__0665
07a44     43 32 0E F2 | 	cmp	local07, #67 wz
07a48     3C 03 90 AD |  if_e	jmp	#LR__0666
07a4c     5A 32 0E F2 | 	cmp	local07, #90 wz
07a50     44 03 90 AD |  if_e	jmp	#LR__0667
07a54     AB 32 0E F2 | 	cmp	local07, #171 wz
07a58     48 06 90 AD |  if_e	jmp	#LR__0724
07a5c     BD 32 0E F2 | 	cmp	local07, #189 wz
07a60     44 03 90 AD |  if_e	jmp	#LR__0668
07a64     BB 32 0E F2 | 	cmp	local07, #187 wz
07a68     4C 03 90 AD |  if_e	jmp	#LR__0669
07a6c     4E 32 0E F2 | 	cmp	local07, #78 wz
07a70     54 03 90 AD |  if_e	jmp	#LR__0670
07a74     A9 32 0E F2 | 	cmp	local07, #169 wz
07a78     6C 03 90 AD |  if_e	jmp	#LR__0672
07a7c     46 32 0E F2 | 	cmp	local07, #70 wz
07a80     84 03 90 AD |  if_e	jmp	#LR__0674
07a84     71 32 0E F2 | 	cmp	local07, #113 wz
07a88     8C 03 90 AD |  if_e	jmp	#LR__0675
07a8c     60 32 0E F2 | 	cmp	local07, #96 wz
07a90     90 03 90 AD |  if_e	jmp	#LR__0676
07a94     4A 32 0E F2 | 	cmp	local07, #74 wz
07a98     94 03 90 AD |  if_e	jmp	#LR__0677
07a9c     48 32 0E F2 | 	cmp	local07, #72 wz
07aa0     98 03 90 AD |  if_e	jmp	#LR__0678
07aa4     58 32 0E F2 | 	cmp	local07, #88 wz
07aa8     A0 03 90 AD |  if_e	jmp	#LR__0679
07aac     5F 32 0E F2 | 	cmp	local07, #95 wz
07ab0     A8 03 90 AD |  if_e	jmp	#LR__0680
07ab4     B5 32 0E F2 | 	cmp	local07, #181 wz
07ab8     AC 03 90 AD |  if_e	jmp	#LR__0681
07abc     8A 32 0E F2 | 	cmp	local07, #138 wz
07ac0     B4 03 90 AD |  if_e	jmp	#LR__0682
07ac4     4C 32 0E F2 | 	cmp	local07, #76 wz
07ac8     B8 03 90 AD |  if_e	jmp	#LR__0683
07acc     52 32 0E F2 | 	cmp	local07, #82 wz
07ad0     C0 03 90 AD |  if_e	jmp	#LR__0684
07ad4     97 32 0E F2 | 	cmp	local07, #151 wz
07ad8     C8 03 90 AD |  if_e	jmp	#LR__0685
07adc     C6 32 0E F2 | 	cmp	local07, #198 wz
07ae0     CC 03 90 AD |  if_e	jmp	#LR__0686
07ae4     61 32 0E F2 | 	cmp	local07, #97 wz
07ae8     D0 03 90 AD |  if_e	jmp	#LR__0687
07aec     63 32 0E F2 | 	cmp	local07, #99 wz
07af0     D4 03 90 AD |  if_e	jmp	#LR__0688
07af4     41 32 0E F2 | 	cmp	local07, #65 wz
07af8     A8 05 90 AD |  if_e	jmp	#LR__0724
07afc     4B 32 0E F2 | 	cmp	local07, #75 wz
07b00     D0 03 90 AD |  if_e	jmp	#LR__0689
07b04     C1 32 0E F2 | 	cmp	local07, #193 wz
07b08     D4 03 90 AD |  if_e	jmp	#LR__0690
07b0c     B3 32 0E F2 | 	cmp	local07, #179 wz
07b10     D8 03 90 AD |  if_e	jmp	#LR__0691
07b14     5E 32 0E F2 | 	cmp	local07, #94 wz
07b18     DC 03 90 AD |  if_e	jmp	#LR__0692
07b1c     7C 32 0E F2 | 	cmp	local07, #124 wz
07b20     E0 03 90 AD |  if_e	jmp	#LR__0693
07b24     7D 32 0E F2 | 	cmp	local07, #125 wz
07b28     E4 03 90 AD |  if_e	jmp	#LR__0694
07b2c     7E 32 0E F2 | 	cmp	local07, #126 wz
07b30     E8 03 90 AD |  if_e	jmp	#LR__0695
07b34     7F 32 0E F2 | 	cmp	local07, #127 wz
07b38     EC 03 90 AD |  if_e	jmp	#LR__0696
07b3c     80 32 0E F2 | 	cmp	local07, #128 wz
07b40     F0 03 90 AD |  if_e	jmp	#LR__0697
07b44     55 32 0E F2 | 	cmp	local07, #85 wz
07b48     F4 03 90 AD |  if_e	jmp	#LR__0698
07b4c     75 32 0E F2 | 	cmp	local07, #117 wz
07b50     F8 03 90 AD |  if_e	jmp	#LR__0699
07b54     42 32 0E F2 | 	cmp	local07, #66 wz
07b58     00 04 90 AD |  if_e	jmp	#LR__0700
07b5c     95 32 0E F2 | 	cmp	local07, #149 wz
07b60     08 04 90 AD |  if_e	jmp	#LR__0701
07b64     AC 32 0E F2 | 	cmp	local07, #172 wz
07b68     38 05 90 AD |  if_e	jmp	#LR__0724
07b6c     81 32 0E F2 | 	cmp	local07, #129 wz
07b70     04 04 90 AD |  if_e	jmp	#LR__0702
07b74     44 32 0E F2 | 	cmp	local07, #68 wz
07b78     08 04 90 AD |  if_e	jmp	#LR__0703
07b7c     BC 32 0E F2 | 	cmp	local07, #188 wz
07b80     0C 04 90 AD |  if_e	jmp	#LR__0704
07b84     88 32 0E F2 | 	cmp	local07, #136 wz
07b88     18 05 90 AD |  if_e	jmp	#LR__0724
07b8c     B6 32 0E F2 | 	cmp	local07, #182 wz
07b90     0C 04 90 AD |  if_e	jmp	#LR__0705
07b94     92 32 0E F2 | 	cmp	local07, #146 wz
07b98     14 04 90 AD |  if_e	jmp	#LR__0706
07b9c     BE 32 0E F2 | 	cmp	local07, #190 wz
07ba0     BC 05 90 AD |  if_e	jmp	#LR__0725
07ba4     C7 32 0E F2 | 	cmp	local07, #199 wz
07ba8     D4 32 0E 52 |  if_ne	cmp	local07, #212 wz
07bac     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07bb0     F0 04 90 AD |  if_e	jmp	#LR__0724
07bb4     4D 32 0E F2 | 	cmp	local07, #77 wz
07bb8     00 04 90 AD |  if_e	jmp	#LR__0707
07bbc     51 32 0E F2 | 	cmp	local07, #81 wz
07bc0     08 04 90 AD |  if_e	jmp	#LR__0708
07bc4     D2 32 0E F2 | 	cmp	local07, #210 wz
07bc8     10 04 90 AD |  if_e	jmp	#LR__0709
07bcc     8E 32 0E F2 | 	cmp	local07, #142 wz
07bd0     18 04 90 AD |  if_e	jmp	#LR__0710
07bd4     90 32 0E F2 | 	cmp	local07, #144 wz
07bd8     1C 04 90 AD |  if_e	jmp	#LR__0711
07bdc     8D 32 0E F2 | 	cmp	local07, #141 wz
07be0     20 04 90 AD |  if_e	jmp	#LR__0712
07be4     8C 32 0E F2 | 	cmp	local07, #140 wz
07be8     24 04 90 AD |  if_e	jmp	#LR__0713
07bec     91 32 0E F2 | 	cmp	local07, #145 wz
07bf0     28 04 90 AD |  if_e	jmp	#LR__0714
07bf4     8B 32 0E F2 | 	cmp	local07, #139 wz
07bf8     2C 04 90 AD |  if_e	jmp	#LR__0715
07bfc     8F 32 0E F2 | 	cmp	local07, #143 wz
07c00     30 04 90 AD |  if_e	jmp	#LR__0716
07c04     B2 32 0E F2 | 	cmp	local07, #178 wz
07c08     34 04 90 AD |  if_e	jmp	#LR__0717
07c0c     6D 32 0E F2 | 	cmp	local07, #109 wz
07c10     3C 04 90 AD |  if_e	jmp	#LR__0718
07c14     70 32 0E F2 | 	cmp	local07, #112 wz
07c18     88 04 90 AD |  if_e	jmp	#LR__0724
07c1c     56 32 0E F2 | 	cmp	local07, #86 wz
07c20     38 04 90 AD |  if_e	jmp	#LR__0719
07c24     57 32 0E F2 | 	cmp	local07, #87 wz
07c28     78 04 90 AD |  if_e	jmp	#LR__0724
07c2c     79 32 0E F2 | 	cmp	local07, #121 wz
07c30     34 04 90 AD |  if_e	jmp	#LR__0720
07c34     77 32 0E F2 | 	cmp	local07, #119 wz
07c38     38 04 90 AD |  if_e	jmp	#LR__0721
07c3c     78 32 0E F2 | 	cmp	local07, #120 wz
07c40     3C 04 90 AD |  if_e	jmp	#LR__0722
07c44     01 00 00 FF 
07c48     04 32 0E F2 | 	cmp	local07, ##516 wz
07c4c     3C 04 90 AD |  if_e	jmp	#LR__0723
07c50     0C 05 90 FD | 	jmp	#LR__0725
07c54                 | LR__0643
07c54     58 0B B0 FD | 	call	#_compile_fun_2p
07c58     FD 30 02 F6 | 	mov	local06, result1
07c5c     44 04 90 FD | 	jmp	#LR__0724
07c60                 | LR__0644
07c60     1C 0E B0 FD | 	call	#_compile_fun_varp
07c64     FD 34 02 F6 | 	mov	local08, result1
07c68     FE 30 02 F6 | 	mov	local06, result2
07c6c     34 04 90 FD | 	jmp	#LR__0724
07c70                 | LR__0645
07c70     0C 0E B0 FD | 	call	#_compile_fun_varp
07c74     FD 34 02 F6 | 	mov	local08, result1
07c78     FE 30 02 F6 | 	mov	local06, result2
07c7c     24 04 90 FD | 	jmp	#LR__0724
07c80                 | LR__0646
07c80     FC 0D B0 FD | 	call	#_compile_fun_varp
07c84     FD 34 02 F6 | 	mov	local08, result1
07c88     FE 30 02 F6 | 	mov	local06, result2
07c8c     14 04 90 FD | 	jmp	#LR__0724
07c90                 | LR__0647
07c90                 | ' return expr()
07c90     58 42 B0 FD | 	call	#_expr
07c94     FD 30 02 F6 | 	mov	local06, result1
07c98     08 04 90 FD | 	jmp	#LR__0724
07c9c                 | LR__0648
07c9c     E0 0D B0 FD | 	call	#_compile_fun_varp
07ca0     FD 34 02 F6 | 	mov	local08, result1
07ca4     FE 30 02 F6 | 	mov	local06, result2
07ca8     F8 03 90 FD | 	jmp	#LR__0724
07cac                 | LR__0649
07cac                 | ' return expr()
07cac     3C 42 B0 FD | 	call	#_expr
07cb0     FD 30 02 F6 | 	mov	local06, result1
07cb4     EC 03 90 FD | 	jmp	#LR__0724
07cb8                 | LR__0650
07cb8                 | ' return expr()
07cb8     30 42 B0 FD | 	call	#_expr
07cbc     FD 30 02 F6 | 	mov	local06, result1
07cc0     E0 03 90 FD | 	jmp	#LR__0724
07cc4                 | LR__0651
07cc4                 | ' return expr()
07cc4     24 42 B0 FD | 	call	#_expr
07cc8     FD 30 02 F6 | 	mov	local06, result1
07ccc     D4 03 90 FD | 	jmp	#LR__0724
07cd0                 | LR__0652
07cd0     DC 0A B0 FD | 	call	#_compile_fun_2p
07cd4     FD 30 02 F6 | 	mov	local06, result1
07cd8     C8 03 90 FD | 	jmp	#LR__0724
07cdc                 | LR__0653
07cdc     D0 0A B0 FD | 	call	#_compile_fun_2p
07ce0     FD 30 02 F6 | 	mov	local06, result1
07ce4     BC 03 90 FD | 	jmp	#LR__0724
07ce8                 | LR__0654
07ce8     C4 0A B0 FD | 	call	#_compile_fun_2p
07cec     FD 30 02 F6 | 	mov	local06, result1
07cf0     B0 03 90 FD | 	jmp	#LR__0724
07cf4                 | LR__0655
07cf4     B8 0A B0 FD | 	call	#_compile_fun_2p
07cf8     FD 30 02 F6 | 	mov	local06, result1
07cfc     A4 03 90 FD | 	jmp	#LR__0724
07d00                 | LR__0656
07d00     AC 0A B0 FD | 	call	#_compile_fun_2p
07d04     FD 30 02 F6 | 	mov	local06, result1
07d08     98 03 90 FD | 	jmp	#LR__0724
07d0c                 | LR__0657
07d0c                 | ' return expr()
07d0c     DC 41 B0 FD | 	call	#_expr
07d10     FD 30 02 F6 | 	mov	local06, result1
07d14     8C 03 90 FD | 	jmp	#LR__0724
07d18                 | LR__0658
07d18                 | ' return expr()
07d18     D0 41 B0 FD | 	call	#_expr
07d1c     FD 30 02 F6 | 	mov	local06, result1
07d20     80 03 90 FD | 	jmp	#LR__0724
07d24                 | LR__0659
07d24     58 0D B0 FD | 	call	#_compile_fun_varp
07d28     FD 34 02 F6 | 	mov	local08, result1
07d2c     FE 30 02 F6 | 	mov	local06, result2
07d30     70 03 90 FD | 	jmp	#LR__0724
07d34                 | LR__0660
07d34     48 0D B0 FD | 	call	#_compile_fun_varp
07d38     FD 34 02 F6 | 	mov	local08, result1
07d3c     FE 30 02 F6 | 	mov	local06, result2
07d40     60 03 90 FD | 	jmp	#LR__0724
07d44                 | LR__0661
07d44     38 0D B0 FD | 	call	#_compile_fun_varp
07d48     FD 34 02 F6 | 	mov	local08, result1
07d4c     FE 30 02 F6 | 	mov	local06, result2
07d50     50 03 90 FD | 	jmp	#LR__0724
07d54                 | LR__0662
07d54                 | ' return expr()
07d54     94 41 B0 FD | 	call	#_expr
07d58     FD 30 02 F6 | 	mov	local06, result1
07d5c     44 03 90 FD | 	jmp	#LR__0724
07d60                 | LR__0663
07d60     40 22 B0 FD | 	call	#_compile_dim
07d64     FD 30 02 F6 | 	mov	local06, result1
07d68     F4 03 90 FD | 	jmp	#LR__0725
07d6c                 | LR__0664
07d6c     10 0D B0 FD | 	call	#_compile_fun_varp
07d70     FD 34 02 F6 | 	mov	local08, result1
07d74     FE 30 02 F6 | 	mov	local06, result2
07d78     28 03 90 FD | 	jmp	#LR__0724
07d7c                 | LR__0665
07d7c     30 0A B0 FD | 	call	#_compile_fun_2p
07d80     FD 30 02 F6 | 	mov	local06, result1
07d84     1C 03 90 FD | 	jmp	#LR__0724
07d88                 | LR__0666
07d88     F4 0C B0 FD | 	call	#_compile_fun_varp
07d8c     FD 34 02 F6 | 	mov	local08, result1
07d90     FE 30 02 F6 | 	mov	local06, result2
07d94     0C 03 90 FD | 	jmp	#LR__0724
07d98                 | LR__0667
07d98     17 13 02 F6 | 	mov	arg01, local05
07d9c     CC 20 B0 FD | 	call	#_compile_else
07da0     FD 30 02 F6 | 	mov	local06, result1
07da4     B8 03 90 FD | 	jmp	#LR__0725
07da8                 | LR__0668
07da8     D4 0C B0 FD | 	call	#_compile_fun_varp
07dac     FD 34 02 F6 | 	mov	local08, result1
07db0     FE 30 02 F6 | 	mov	local06, result2
07db4     EC 02 90 FD | 	jmp	#LR__0724
07db8                 | LR__0669
07db8     C4 0C B0 FD | 	call	#_compile_fun_varp
07dbc     FD 34 02 F6 | 	mov	local08, result1
07dc0     FE 30 02 F6 | 	mov	local06, result2
07dc4     DC 02 90 FD | 	jmp	#LR__0724
07dc8                 | LR__0670
07dc8     01 2E 16 F2 | 	cmp	local05, #1 wc
07dcc     08 00 90 CD |  if_b	jmp	#LR__0671
07dd0     6C 33 B0 FD | 	call	#_compile_goto
07dd4     88 03 90 FD | 	jmp	#LR__0725
07dd8                 | LR__0671
07dd8     19 12 06 F6 | 	mov	arg01, #25
07ddc     00 14 06 F6 | 	mov	arg02, #0
07de0     DC B7 B1 FD | 	call	#_printerror
07de4     78 03 90 FD | 	jmp	#LR__0725
07de8                 | LR__0672
07de8     01 2E 16 F2 | 	cmp	local05, #1 wc
07dec     08 00 90 CD |  if_b	jmp	#LR__0673
07df0     E8 32 B0 FD | 	call	#_compile_gosub
07df4     68 03 90 FD | 	jmp	#LR__0725
07df8                 | LR__0673
07df8     19 12 06 F6 | 	mov	arg01, #25
07dfc     00 14 06 F6 | 	mov	arg02, #0
07e00     BC B7 B1 FD | 	call	#_printerror
07e04     58 03 90 FD | 	jmp	#LR__0725
07e08                 | LR__0674
07e08     74 0C B0 FD | 	call	#_compile_fun_varp
07e0c     FD 34 02 F6 | 	mov	local08, result1
07e10     FE 30 02 F6 | 	mov	local06, result2
07e14     8C 02 90 FD | 	jmp	#LR__0724
07e18                 | LR__0675
07e18     0C 0B B0 FD | 	call	#_compile_fun_4p
07e1c     FD 30 02 F6 | 	mov	local06, result1
07e20     80 02 90 FD | 	jmp	#LR__0724
07e24                 | LR__0676
07e24                 | ' return expr()
07e24     C4 40 B0 FD | 	call	#_expr
07e28     FD 30 02 F6 | 	mov	local06, result1
07e2c     74 02 90 FD | 	jmp	#LR__0724
07e30                 | LR__0677
07e30     44 28 B0 FD | 	call	#_compile_for
07e34     FD 30 02 F6 | 	mov	local06, result1
07e38     24 03 90 FD | 	jmp	#LR__0725
07e3c                 | LR__0678
07e3c     40 0C B0 FD | 	call	#_compile_fun_varp
07e40     FD 34 02 F6 | 	mov	local08, result1
07e44     FE 30 02 F6 | 	mov	local06, result2
07e48     58 02 90 FD | 	jmp	#LR__0724
07e4c                 | LR__0679
07e4c     17 13 02 F6 | 	mov	arg01, local05
07e50     90 1E B0 FD | 	call	#_compile_if
07e54     FD 30 02 F6 | 	mov	local06, result1
07e58     04 03 90 FD | 	jmp	#LR__0725
07e5c                 | LR__0680
07e5c                 | ' return expr()
07e5c     8C 40 B0 FD | 	call	#_expr
07e60     FD 30 02 F6 | 	mov	local06, result1
07e64     3C 02 90 FD | 	jmp	#LR__0724
07e68                 | LR__0681
07e68     E0 0D B0 FD | 	call	#_compile_input
07e6c     FD 34 02 F6 | 	mov	local08, result1
07e70     FE 30 02 F6 | 	mov	local06, result2
07e74     2C 02 90 FD | 	jmp	#LR__0724
07e78                 | LR__0682
07e78                 | ' return expr()
07e78     70 40 B0 FD | 	call	#_expr
07e7c     FD 30 02 F6 | 	mov	local06, result1
07e80     20 02 90 FD | 	jmp	#LR__0724
07e84                 | LR__0683
07e84     F8 0B B0 FD | 	call	#_compile_fun_varp
07e88     FD 34 02 F6 | 	mov	local08, result1
07e8c     FE 30 02 F6 | 	mov	local06, result2
07e90     10 02 90 FD | 	jmp	#LR__0724
07e94                 | LR__0684
07e94     E8 0B B0 FD | 	call	#_compile_fun_varp
07e98     FD 34 02 F6 | 	mov	local08, result1
07e9c     FE 30 02 F6 | 	mov	local06, result2
07ea0     00 02 90 FD | 	jmp	#LR__0724
07ea4                 | LR__0685
07ea4     08 09 B0 FD | 	call	#_compile_fun_2p
07ea8     FD 30 02 F6 | 	mov	local06, result1
07eac     F4 01 90 FD | 	jmp	#LR__0724
07eb0                 | LR__0686
07eb0                 | ' return expr()
07eb0     38 40 B0 FD | 	call	#_expr
07eb4     FD 30 02 F6 | 	mov	local06, result1
07eb8     E8 01 90 FD | 	jmp	#LR__0724
07ebc                 | LR__0687
07ebc                 | ' return expr()
07ebc     2C 40 B0 FD | 	call	#_expr
07ec0     FD 30 02 F6 | 	mov	local06, result1
07ec4     DC 01 90 FD | 	jmp	#LR__0724
07ec8                 | LR__0688
07ec8                 | ' return expr()
07ec8     20 40 B0 FD | 	call	#_expr
07ecc     FD 30 02 F6 | 	mov	local06, result1
07ed0     D0 01 90 FD | 	jmp	#LR__0724
07ed4                 | LR__0689
07ed4     6C 30 B0 FD | 	call	#_compile_next
07ed8     FD 30 02 F6 | 	mov	local06, result1
07edc     80 02 90 FD | 	jmp	#LR__0725
07ee0                 | LR__0690
07ee0     4C 36 B0 FD | 	call	#_compile_on
07ee4     FD 30 02 F6 | 	mov	local06, result1
07ee8     74 02 90 FD | 	jmp	#LR__0725
07eec                 | LR__0691
07eec     48 09 B0 FD | 	call	#_compile_fun_3p
07ef0     FD 30 02 F6 | 	mov	local06, result1
07ef4     AC 01 90 FD | 	jmp	#LR__0724
07ef8                 | LR__0692
07ef8                 | ' return expr()
07ef8     F0 3F B0 FD | 	call	#_expr
07efc     FD 30 02 F6 | 	mov	local06, result1
07f00     A0 01 90 FD | 	jmp	#LR__0724
07f04                 | LR__0693
07f04                 | ' return expr()
07f04     E4 3F B0 FD | 	call	#_expr
07f08     FD 30 02 F6 | 	mov	local06, result1
07f0c     94 01 90 FD | 	jmp	#LR__0724
07f10                 | LR__0694
07f10                 | ' return expr()
07f10     D8 3F B0 FD | 	call	#_expr
07f14     FD 30 02 F6 | 	mov	local06, result1
07f18     88 01 90 FD | 	jmp	#LR__0724
07f1c                 | LR__0695
07f1c                 | ' return expr()
07f1c     CC 3F B0 FD | 	call	#_expr
07f20     FD 30 02 F6 | 	mov	local06, result1
07f24     7C 01 90 FD | 	jmp	#LR__0724
07f28                 | LR__0696
07f28     FC 09 B0 FD | 	call	#_compile_fun_4p
07f2c     FD 30 02 F6 | 	mov	local06, result1
07f30     70 01 90 FD | 	jmp	#LR__0724
07f34                 | LR__0697
07f34                 | ' return expr()
07f34     B4 3F B0 FD | 	call	#_expr
07f38     FD 30 02 F6 | 	mov	local06, result1
07f3c     64 01 90 FD | 	jmp	#LR__0724
07f40                 | LR__0698
07f40     6C 08 B0 FD | 	call	#_compile_fun_2p
07f44     FD 30 02 F6 | 	mov	local06, result1
07f48     58 01 90 FD | 	jmp	#LR__0724
07f4c                 | LR__0699
07f4c     30 0B B0 FD | 	call	#_compile_fun_varp
07f50     FD 34 02 F6 | 	mov	local08, result1
07f54     FE 30 02 F6 | 	mov	local06, result2
07f58     48 01 90 FD | 	jmp	#LR__0724
07f5c                 | LR__0700
07f5c     20 0B B0 FD | 	call	#_compile_fun_varp
07f60     FD 34 02 F6 | 	mov	local08, result1
07f64     FE 30 02 F6 | 	mov	local06, result2
07f68     38 01 90 FD | 	jmp	#LR__0724
07f6c                 | LR__0701
07f6c     40 08 B0 FD | 	call	#_compile_fun_2p
07f70     FD 30 02 F6 | 	mov	local06, result1
07f74     2C 01 90 FD | 	jmp	#LR__0724
07f78                 | LR__0702
07f78     34 08 B0 FD | 	call	#_compile_fun_2p
07f7c     FD 30 02 F6 | 	mov	local06, result1
07f80     20 01 90 FD | 	jmp	#LR__0724
07f84                 | LR__0703
07f84     84 16 B0 FD | 	call	#_compile_print
07f88     FD 30 02 F6 | 	mov	local06, result1
07f8c     D0 01 90 FD | 	jmp	#LR__0725
07f90                 | LR__0704
07f90     EC 0A B0 FD | 	call	#_compile_fun_varp
07f94     FD 34 02 F6 | 	mov	local08, result1
07f98     FE 30 02 F6 | 	mov	local06, result2
07f9c     04 01 90 FD | 	jmp	#LR__0724
07fa0                 | LR__0705
07fa0     B8 0B B0 FD | 	call	#_compile_read
07fa4     FD 34 02 F6 | 	mov	local08, result1
07fa8     FE 30 02 F6 | 	mov	local06, result2
07fac     F4 00 90 FD | 	jmp	#LR__0724
07fb0                 | LR__0706
07fb0                 | ' return expr()
07fb0     38 3F B0 FD | 	call	#_expr
07fb4     FD 30 02 F6 | 	mov	local06, result1
07fb8     E8 00 90 FD | 	jmp	#LR__0724
07fbc                 | LR__0707
07fbc     C0 0A B0 FD | 	call	#_compile_fun_varp
07fc0     FD 34 02 F6 | 	mov	local08, result1
07fc4     FE 30 02 F6 | 	mov	local06, result2
07fc8     D8 00 90 FD | 	jmp	#LR__0724
07fcc                 | LR__0708
07fcc     B0 0A B0 FD | 	call	#_compile_fun_varp
07fd0     FD 34 02 F6 | 	mov	local08, result1
07fd4     FE 30 02 F6 | 	mov	local06, result2
07fd8     C8 00 90 FD | 	jmp	#LR__0724
07fdc                 | LR__0709
07fdc     A0 0A B0 FD | 	call	#_compile_fun_varp
07fe0     FD 34 02 F6 | 	mov	local08, result1
07fe4     FE 30 02 F6 | 	mov	local06, result2
07fe8     B8 00 90 FD | 	jmp	#LR__0724
07fec                 | LR__0710
07fec     C0 07 B0 FD | 	call	#_compile_fun_2p
07ff0     FD 30 02 F6 | 	mov	local06, result1
07ff4     AC 00 90 FD | 	jmp	#LR__0724
07ff8                 | LR__0711
07ff8     B4 07 B0 FD | 	call	#_compile_fun_2p
07ffc     FD 30 02 F6 | 	mov	local06, result1
08000     A0 00 90 FD | 	jmp	#LR__0724
08004                 | LR__0712
08004     A8 07 B0 FD | 	call	#_compile_fun_2p
08008     FD 30 02 F6 | 	mov	local06, result1
0800c     94 00 90 FD | 	jmp	#LR__0724
08010                 | LR__0713
08010     9C 07 B0 FD | 	call	#_compile_fun_2p
08014     FD 30 02 F6 | 	mov	local06, result1
08018     88 00 90 FD | 	jmp	#LR__0724
0801c                 | LR__0714
0801c     90 07 B0 FD | 	call	#_compile_fun_2p
08020     FD 30 02 F6 | 	mov	local06, result1
08024     7C 00 90 FD | 	jmp	#LR__0724
08028                 | LR__0715
08028     84 07 B0 FD | 	call	#_compile_fun_2p
0802c     FD 30 02 F6 | 	mov	local06, result1
08030     70 00 90 FD | 	jmp	#LR__0724
08034                 | LR__0716
08034     78 07 B0 FD | 	call	#_compile_fun_2p
08038     FD 30 02 F6 | 	mov	local06, result1
0803c     64 00 90 FD | 	jmp	#LR__0724
08040                 | LR__0717
08040     3C 0A B0 FD | 	call	#_compile_fun_varp
08044     FD 34 02 F6 | 	mov	local08, result1
08048     FE 30 02 F6 | 	mov	local06, result2
0804c     54 00 90 FD | 	jmp	#LR__0724
08050                 | LR__0718
08050     E4 07 B0 FD | 	call	#_compile_fun_3p
08054     FD 30 02 F6 | 	mov	local06, result1
08058     48 00 90 FD | 	jmp	#LR__0724
0805c                 | LR__0719
0805c                 | ' return expr()
0805c     8C 3E B0 FD | 	call	#_expr
08060     FD 30 02 F6 | 	mov	local06, result1
08064     3C 00 90 FD | 	jmp	#LR__0724
08068                 | LR__0720
08068     44 07 B0 FD | 	call	#_compile_fun_2p
0806c     FD 30 02 F6 | 	mov	local06, result1
08070     30 00 90 FD | 	jmp	#LR__0724
08074                 | LR__0721
08074     38 07 B0 FD | 	call	#_compile_fun_2p
08078     FD 30 02 F6 | 	mov	local06, result1
0807c     24 00 90 FD | 	jmp	#LR__0724
08080                 | LR__0722
08080     2C 07 B0 FD | 	call	#_compile_fun_2p
08084     FD 30 02 F6 | 	mov	local06, result1
08088     18 00 90 FD | 	jmp	#LR__0724
0808c                 | LR__0723
0808c     1C 13 B0 FD | 	call	#_compile_array_assign
08090     FD 30 02 F6 | 	mov	local06, result1
08094     0E 30 0E F2 | 	cmp	local06, #14 wz
08098     C4 00 90 5D |  if_ne	jmp	#LR__0725
0809c                 | ' return 23
0809c     17 30 06 F6 | 	mov	local06, #23
080a0     BC 00 90 FD | 	jmp	#LR__0725
080a4                 | ' return 23
080a4                 | LR__0724
080a4     19 2B 02 F6 | 	mov	local03, local07
080a8     1A 27 02 F6 | 	mov	local01, local08
080ac     13 37 02 F6 | 	mov	local09, local01
080b0     14 39 02 F6 | 	mov	local10, local02
080b4     15 33 02 F6 | 	mov	local07, local03
080b8     4A 00 00 FF 
080bc     7C E4 05 F1 | 	add	objptr, ##38012
080c0     F2 26 02 FB | 	rdlong	local01, objptr
080c4     13 35 02 F6 | 	mov	local08, local01
080c8     01 34 66 F0 | 	shl	local08, #1
080cc     13 35 02 F1 | 	add	local08, local01
080d0     02 34 66 F0 | 	shl	local08, #2
080d4     03 00 00 FF 
080d8     00 E4 85 F1 | 	sub	objptr, ##1536
080dc     F2 34 02 F1 | 	add	local08, objptr
080e0     1A 37 62 FC | 	wrlong	local09, local08
080e4     03 00 00 FF 
080e8     00 E4 05 F1 | 	add	objptr, ##1536
080ec     F2 26 02 FB | 	rdlong	local01, objptr
080f0     13 37 02 F6 | 	mov	local09, local01
080f4     01 36 66 F0 | 	shl	local09, #1
080f8     13 37 02 F1 | 	add	local09, local01
080fc     02 36 66 F0 | 	shl	local09, #2
08100     03 00 00 FF 
08104     00 E4 85 F1 | 	sub	objptr, ##1536
08108     F2 36 02 F1 | 	add	local09, objptr
0810c     04 36 06 F1 | 	add	local09, #4
08110     1B 39 62 FC | 	wrlong	local10, local09
08114     03 00 00 FF 
08118     00 E4 05 F1 | 	add	objptr, ##1536
0811c     F2 26 02 FB | 	rdlong	local01, objptr
08120     13 39 02 F6 | 	mov	local10, local01
08124     01 38 66 F0 | 	shl	local10, #1
08128     13 39 02 F1 | 	add	local10, local01
0812c     02 38 66 F0 | 	shl	local10, #2
08130     03 00 00 FF 
08134     00 E4 85 F1 | 	sub	objptr, ##1536
08138     F2 38 02 F1 | 	add	local10, objptr
0813c     08 38 06 F1 | 	add	local10, #8
08140     1C 33 62 FC | 	wrlong	local07, local10
08144     03 00 00 FF 
08148     00 E4 05 F1 | 	add	objptr, ##1536
0814c     F2 36 02 FB | 	rdlong	local09, objptr
08150     01 36 06 F1 | 	add	local09, #1
08154     F2 36 62 FC | 	wrlong	local09, objptr
08158     4A 00 00 FF 
0815c     7C E4 85 F1 | 	sub	objptr, ##38012
08160                 | LR__0725
08160                 | ' 
08160                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
08160                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
08160     03 2C 0E F2 | 	cmp	local04, #3 wz
08164     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08168     38 00 90 5D |  if_ne	jmp	#LR__0726
0816c     4A 00 00 FF 
08170     7C E4 05 F1 | 	add	objptr, ##38012
08174     F2 38 02 FB | 	rdlong	local10, objptr
08178     1C 27 02 F6 | 	mov	local01, local10
0817c     01 26 66 F0 | 	shl	local01, #1
08180     1C 27 02 F1 | 	add	local01, local10
08184     02 26 66 F0 | 	shl	local01, #2
08188     03 00 00 FF 
0818c     00 E4 85 F1 | 	sub	objptr, ##1536
08190     F2 26 02 F1 | 	add	local01, objptr
08194     08 26 06 F1 | 	add	local01, #8
08198     13 FD 6B FC | 	wrlong	#510, local01
0819c     47 00 00 FF 
081a0     7C E4 85 F1 | 	sub	objptr, ##36476
081a4                 | LR__0726
081a4                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
081a4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
081a4     4A 00 00 FF 
081a8     7C E4 05 F1 | 	add	objptr, ##38012
081ac     F2 26 02 FB | 	rdlong	local01, objptr
081b0     4A 00 00 FF 
081b4     7C E4 85 F1 | 	sub	objptr, ##38012
081b8     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
081bc                 | LR__0727
081bc     13 39 02 F6 | 	mov	local10, local01
081c0     01 38 66 F0 | 	shl	local10, #1
081c4     13 39 02 F1 | 	add	local10, local01
081c8     02 38 66 F0 | 	shl	local10, #2
081cc     47 00 00 FF 
081d0     7C E4 05 F1 | 	add	objptr, ##36476
081d4     F2 38 02 F1 | 	add	local10, objptr
081d8     08 38 06 F1 | 	add	local10, #8
081dc     1C 39 02 FB | 	rdlong	local10, local10
081e0     9B 38 0E F2 | 	cmp	local10, #155 wz
081e4     47 00 00 FF 
081e8     7C E4 85 F1 | 	sub	objptr, ##36476
081ec     70 00 90 5D |  if_ne	jmp	#LR__0728
081f0     13 37 02 F6 | 	mov	local09, local01
081f4     01 36 86 F1 | 	sub	local09, #1
081f8     1B 39 02 F6 | 	mov	local10, local09
081fc     01 38 66 F0 | 	shl	local10, #1
08200     1B 39 02 F1 | 	add	local10, local09
08204     02 38 66 F0 | 	shl	local10, #2
08208     47 00 00 FF 
0820c     7C E4 05 F1 | 	add	objptr, ##36476
08210     F2 38 02 F1 | 	add	local10, objptr
08214     08 38 06 F1 | 	add	local10, #8
08218     1C 39 02 FB | 	rdlong	local10, local10
0821c     11 38 0E F2 | 	cmp	local10, #17 wz
08220     47 00 00 FF 
08224     7C E4 85 F1 | 	sub	objptr, ##36476
08228     34 00 90 5D |  if_ne	jmp	#LR__0728
0822c     13 37 02 F6 | 	mov	local09, local01
08230     01 36 86 F1 | 	sub	local09, #1
08234     1B 39 02 F6 | 	mov	local10, local09
08238     01 38 66 F0 | 	shl	local10, #1
0823c     1B 39 02 F1 | 	add	local10, local09
08240     02 38 66 F0 | 	shl	local10, #2
08244     47 00 00 FF 
08248     7C E4 05 F1 | 	add	objptr, ##36476
0824c     F2 38 02 F1 | 	add	local10, objptr
08250     08 38 06 F1 | 	add	local10, #8
08254     1C 25 68 FC | 	wrlong	#18, local10
08258     47 00 00 FF 
0825c     7C E4 85 F1 | 	sub	objptr, ##36476
08260                 | LR__0728
08260     01 26 86 F1 | 	sub	local01, #1
08264     01 26 56 F2 | 	cmps	local01, #1 wc
08268     50 FF 9F 3D |  if_ae	jmp	#LR__0727
0826c                 | LR__0729
0826c                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0826c                 | ' return err
0826c     18 FB 01 F6 | 	mov	result1, local06
08270     A7 F0 03 F6 | 	mov	ptra, fp
08274     B2 00 A0 FD | 	call	#popregs_
08278                 | _compile_immediate_ret
08278     2D 00 64 FD | 	ret
0827c                 | 
0827c                 | ' 
0827c                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
0827c                 | ' 
0827c                 | ' function compile_immediate_assign(linetype as ulong) as ulong
0827c                 | _compile_immediate_assign
0827c     0C 4A 05 F6 | 	mov	COUNT_, #12
08280     A8 00 A0 FD | 	call	#pushregs_
08284     09 2D 02 F6 | 	mov	local04, arg01
08288     FF 2A 06 F6 | 	mov	local03, #255
0828c     01 2E 66 F6 | 	neg	local05, #1
08290     00 30 06 F6 | 	mov	local06, #0
08294                 | ' 
08294                 | ' t1.result_type=result_error : t1.result.uresult=0
08294                 | ' i=-1: j=-1 : err=0
08294                 | ' 
08294                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
08294     02 2C 0E F2 | 	cmp	local04, #2 wz
08298     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
0829c     35 00 00 AF 
082a0     0C E4 05 A1 |  if_e	add	objptr, ##27148
082a4     F2 32 02 AB |  if_e	rdlong	local07, objptr
082a8     02 00 00 AF 
082ac     38 E4 05 A1 |  if_e	add	objptr, ##1080
082b0     F2 04 68 AC |  if_e	wrlong	#2, objptr
082b4     37 00 00 AF 
082b8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
082bc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
082bc     04 2C 0E F2 | 	cmp	local04, #4 wz
082c0     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
082c4     2C 00 90 5D |  if_ne	jmp	#LR__0730
082c8     35 00 00 FF 
082cc     14 E4 05 F1 | 	add	objptr, ##27156
082d0     F2 32 02 FB | 	rdlong	local07, objptr
082d4     02 00 00 FF 
082d8     30 E4 05 F1 | 	add	objptr, ##1072
082dc     F2 06 68 FC | 	wrlong	#3, objptr
082e0     13 00 00 FF 
082e4     38 E4 05 F1 | 	add	objptr, ##9784
082e8     F2 04 68 FC | 	wrlong	#2, objptr
082ec     4A 00 00 FF 
082f0     7C E4 85 F1 | 	sub	objptr, ##38012
082f4                 | LR__0730
082f4                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
082f4     05 2C 0E F2 | 	cmp	local04, #5 wz
082f8     3C 00 90 5D |  if_ne	jmp	#LR__0731
082fc     37 00 00 FF 
08300     44 E4 05 F1 | 	add	objptr, ##28228
08304     F2 FA 01 FB | 	rdlong	result1, objptr
08308     FD 32 02 F6 | 	mov	local07, result1
0830c     03 32 66 F0 | 	shl	local07, #3
08310     02 00 00 FF 
08314     38 E4 85 F1 | 	sub	objptr, ##1080
08318     F2 32 02 F1 | 	add	local07, objptr
0831c     19 33 02 FB | 	rdlong	local07, local07
08320     02 FA 05 F1 | 	add	result1, #2
08324     02 00 00 FF 
08328     38 E4 05 F1 | 	add	objptr, ##1080
0832c     F2 FA 61 FC | 	wrlong	result1, objptr
08330     37 00 00 FF 
08334     44 E4 85 F1 | 	sub	objptr, ##28228
08338                 | LR__0731
08338     19 13 02 F6 | 	mov	arg01, local07
0833c     01 14 06 F6 | 	mov	arg02, #1
08340     2C 0E B2 FD | 	call	#__system__Right_S
08344     FD 34 02 F6 | 	mov	local08, result1
08348     A0 3B B0 FD | 	call	#_expr
0834c                 | ' 
0834c                 | ' suffix2$=right$(varname2$,1)
0834c                 | ' expr()
0834c                 | ' if varnum>0 then					' try to find a variable
0834c     35 00 00 FF 
08350     08 E4 05 F1 | 	add	objptr, ##27144
08354     F2 36 02 FB | 	rdlong	local09, objptr
08358     35 00 00 FF 
0835c     08 E4 85 F1 | 	sub	objptr, ##27144
08360     01 36 56 F2 | 	cmps	local09, #1 wc
08364     58 00 90 CD |  if_b	jmp	#LR__0734
08368                 | '   for i=0 to varnum-1
08368     00 38 06 F6 | 	mov	local10, #0
0836c     35 00 00 FF 
08370     08 E4 05 F1 | 	add	objptr, ##27144
08374     F2 3A 02 FB | 	rdlong	local11, objptr
08378     35 00 00 FF 
0837c     08 E4 85 F1 | 	sub	objptr, ##27144
08380                 | LR__0732
08380     1D 39 52 F2 | 	cmps	local10, local11 wc
08384     38 00 90 3D |  if_ae	jmp	#LR__0733
08388                 | '     if variables(i).name=varname2$ then j=i : exit
08388     1C 37 02 F6 | 	mov	local09, local10
0838c     04 36 66 F0 | 	shl	local09, #4
08390     14 00 00 FF 
08394     F8 E5 05 F1 | 	add	objptr, ##10744
08398     F2 36 02 F1 | 	add	local09, objptr
0839c     1B 13 02 FB | 	rdlong	arg01, local09
083a0     19 15 02 F6 | 	mov	arg02, local07
083a4     14 00 00 FF 
083a8     F8 E5 85 F1 | 	sub	objptr, ##10744
083ac     E4 EC B1 FD | 	call	#__system___string_cmp
083b0     00 FA 0D F2 | 	cmp	result1, #0 wz
083b4     1C 2F 02 A6 |  if_e	mov	local05, local10
083b8     01 38 06 51 |  if_ne	add	local10, #1
083bc     C0 FF 9F 5D |  if_ne	jmp	#LR__0732
083c0                 | LR__0733
083c0                 | LR__0734
083c0                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
083c0     FF FF 7F FF 
083c4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
083c8     60 00 90 5D |  if_ne	jmp	#LR__0735
083cc     35 00 00 FF 
083d0     08 E4 05 F1 | 	add	objptr, ##27144
083d4     F2 36 02 FB | 	rdlong	local09, objptr
083d8     35 00 00 FF 
083dc     08 E4 85 F1 | 	sub	objptr, ##27144
083e0     02 00 00 FF 
083e4     00 36 56 F2 | 	cmps	local09, ##1024 wc
083e8     40 00 90 3D |  if_ae	jmp	#LR__0735
083ec     35 00 00 FF 
083f0     08 E4 05 F1 | 	add	objptr, ##27144
083f4     F2 3A 02 FB | 	rdlong	local11, objptr
083f8     04 3A 66 F0 | 	shl	local11, #4
083fc     20 00 00 FF 
08400     10 E4 85 F1 | 	sub	objptr, ##16400
08404     F2 3A 02 F1 | 	add	local11, objptr
08408     1D 33 62 FC | 	wrlong	local07, local11
0840c     20 00 00 FF 
08410     10 E4 05 F1 | 	add	objptr, ##16400
08414     F2 36 02 FB | 	rdlong	local09, objptr
08418     1B 2F 02 F6 | 	mov	local05, local09
0841c     01 36 06 F1 | 	add	local09, #1
08420     F2 36 62 FC | 	wrlong	local09, objptr
08424     35 00 00 FF 
08428     08 E4 85 F1 | 	sub	objptr, ##27144
0842c                 | LR__0735
0842c                 | ' if varnum>=maxvars then
0842c     35 00 00 FF 
08430     08 E4 05 F1 | 	add	objptr, ##27144
08434     F2 36 02 FB | 	rdlong	local09, objptr
08438     35 00 00 FF 
0843c     08 E4 85 F1 | 	sub	objptr, ##27144
08440     02 00 00 FF 
08444     00 36 56 F2 | 	cmps	local09, ##1024 wc
08448     2D 30 06 36 |  if_ae	mov	local06, #45
0844c     C8 01 90 3D |  if_ae	jmp	#LR__0740
08450     17 27 02 F6 | 	mov	local01, local05
08454     17 2A 06 F6 | 	mov	local03, #23
08458     13 37 02 F6 | 	mov	local09, local01
0845c     14 3D 02 F6 | 	mov	local12, local02
08460     15 27 02 F6 | 	mov	local01, local03
08464     4A 00 00 FF 
08468     7C E4 05 F1 | 	add	objptr, ##38012
0846c     F2 3A 02 FB | 	rdlong	local11, objptr
08470     1D 39 02 F6 | 	mov	local10, local11
08474     01 38 66 F0 | 	shl	local10, #1
08478     1D 39 02 F1 | 	add	local10, local11
0847c     02 38 66 F0 | 	shl	local10, #2
08480     03 00 00 FF 
08484     00 E4 85 F1 | 	sub	objptr, ##1536
08488     F2 38 02 F1 | 	add	local10, objptr
0848c     1C 37 62 FC | 	wrlong	local09, local10
08490     03 00 00 FF 
08494     00 E4 05 F1 | 	add	objptr, ##1536
08498     F2 36 02 FB | 	rdlong	local09, objptr
0849c     1B 3B 02 F6 | 	mov	local11, local09
084a0     01 3A 66 F0 | 	shl	local11, #1
084a4     1B 3B 02 F1 | 	add	local11, local09
084a8     02 3A 66 F0 | 	shl	local11, #2
084ac     03 00 00 FF 
084b0     00 E4 85 F1 | 	sub	objptr, ##1536
084b4     F2 3A 02 F1 | 	add	local11, objptr
084b8     04 3A 06 F1 | 	add	local11, #4
084bc     1D 3D 62 FC | 	wrlong	local12, local11
084c0     03 00 00 FF 
084c4     00 E4 05 F1 | 	add	objptr, ##1536
084c8     F2 36 02 FB | 	rdlong	local09, objptr
084cc     1B 3D 02 F6 | 	mov	local12, local09
084d0     01 3C 66 F0 | 	shl	local12, #1
084d4     1B 3D 02 F1 | 	add	local12, local09
084d8     02 3C 66 F0 | 	shl	local12, #2
084dc     03 00 00 FF 
084e0     00 E4 85 F1 | 	sub	objptr, ##1536
084e4     F2 3C 02 F1 | 	add	local12, objptr
084e8     08 3C 06 F1 | 	add	local12, #8
084ec     1E 27 62 FC | 	wrlong	local01, local12
084f0     03 00 00 FF 
084f4     00 E4 05 F1 | 	add	objptr, ##1536
084f8     F2 36 02 FB | 	rdlong	local09, objptr
084fc     01 36 06 F1 | 	add	local09, #1
08500     F2 36 62 FC | 	wrlong	local09, objptr
08504     4A 00 00 FF 
08508     7C E4 85 F1 | 	sub	objptr, ##38012
0850c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0850c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0850c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0850c     03 2C 0E F2 | 	cmp	local04, #3 wz
08510     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08514     38 00 90 5D |  if_ne	jmp	#LR__0736
08518     4A 00 00 FF 
0851c     7C E4 05 F1 | 	add	objptr, ##38012
08520     F2 3C 02 FB | 	rdlong	local12, objptr
08524     1E 27 02 F6 | 	mov	local01, local12
08528     01 26 66 F0 | 	shl	local01, #1
0852c     1E 27 02 F1 | 	add	local01, local12
08530     02 26 66 F0 | 	shl	local01, #2
08534     03 00 00 FF 
08538     00 E4 85 F1 | 	sub	objptr, ##1536
0853c     F2 26 02 F1 | 	add	local01, objptr
08540     08 26 06 F1 | 	add	local01, #8
08544     13 FD 6B FC | 	wrlong	#510, local01
08548     47 00 00 FF 
0854c     7C E4 85 F1 | 	sub	objptr, ##36476
08550                 | LR__0736
08550                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08550     4A 00 00 FF 
08554     7C E4 05 F1 | 	add	objptr, ##38012
08558     F2 38 02 FB | 	rdlong	local10, objptr
0855c     4A 00 00 FF 
08560     7C E4 85 F1 | 	sub	objptr, ##38012
08564     97 58 48 FB | 	callpa	#(@LR__0739-@LR__0737)>>2,fcache_load_ptr_
08568                 | LR__0737
08568     1C 3D 02 F6 | 	mov	local12, local10
0856c     01 3C 66 F0 | 	shl	local12, #1
08570     1C 3D 02 F1 | 	add	local12, local10
08574     02 3C 66 F0 | 	shl	local12, #2
08578     47 00 00 FF 
0857c     7C E4 05 F1 | 	add	objptr, ##36476
08580     F2 3C 02 F1 | 	add	local12, objptr
08584     08 3C 06 F1 | 	add	local12, #8
08588     1E 3D 02 FB | 	rdlong	local12, local12
0858c     9B 3C 0E F2 | 	cmp	local12, #155 wz
08590     47 00 00 FF 
08594     7C E4 85 F1 | 	sub	objptr, ##36476
08598     70 00 90 5D |  if_ne	jmp	#LR__0738
0859c     1C 3D 02 F6 | 	mov	local12, local10
085a0     01 3C 86 F1 | 	sub	local12, #1
085a4     1E 27 02 F6 | 	mov	local01, local12
085a8     01 26 66 F0 | 	shl	local01, #1
085ac     1E 27 02 F1 | 	add	local01, local12
085b0     02 26 66 F0 | 	shl	local01, #2
085b4     47 00 00 FF 
085b8     7C E4 05 F1 | 	add	objptr, ##36476
085bc     F2 26 02 F1 | 	add	local01, objptr
085c0     08 26 06 F1 | 	add	local01, #8
085c4     13 27 02 FB | 	rdlong	local01, local01
085c8     11 26 0E F2 | 	cmp	local01, #17 wz
085cc     47 00 00 FF 
085d0     7C E4 85 F1 | 	sub	objptr, ##36476
085d4     34 00 90 5D |  if_ne	jmp	#LR__0738
085d8     1C 3D 02 F6 | 	mov	local12, local10
085dc     01 3C 86 F1 | 	sub	local12, #1
085e0     1E 27 02 F6 | 	mov	local01, local12
085e4     01 26 66 F0 | 	shl	local01, #1
085e8     1E 27 02 F1 | 	add	local01, local12
085ec     02 26 66 F0 | 	shl	local01, #2
085f0     47 00 00 FF 
085f4     7C E4 05 F1 | 	add	objptr, ##36476
085f8     F2 26 02 F1 | 	add	local01, objptr
085fc     08 26 06 F1 | 	add	local01, #8
08600     13 25 68 FC | 	wrlong	#18, local01
08604     47 00 00 FF 
08608     7C E4 85 F1 | 	sub	objptr, ##36476
0860c                 | LR__0738
0860c     01 38 86 F1 | 	sub	local10, #1
08610     01 38 56 F2 | 	cmps	local10, #1 wc
08614     50 FF 9F 3D |  if_ae	jmp	#LR__0737
08618                 | LR__0739
08618                 | LR__0740
08618                 | ' return err
08618     18 FB 01 F6 | 	mov	result1, local06
0861c     A7 F0 03 F6 | 	mov	ptra, fp
08620     B2 00 A0 FD | 	call	#popregs_
08624                 | _compile_immediate_assign_ret
08624     2D 00 64 FD | 	ret
08628                 | 
08628                 | ' 
08628                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08628                 | ' 
08628                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08628                 | _compile
08628     03 4A 05 F6 | 	mov	COUNT_, #3
0862c     A8 00 A0 FD | 	call	#pushregs_
08630     09 27 02 F6 | 	mov	local01, arg01
08634     0B 29 02 F6 | 	mov	local02, arg03
08638     47 00 00 FF 
0863c     7C E4 05 F1 | 	add	objptr, ##36476
08640     F2 26 62 FC | 	wrlong	local01, objptr
08644     04 E4 05 F1 | 	add	objptr, #4
08648     F2 14 62 FC | 	wrlong	arg02, objptr
0864c     47 00 00 FF 
08650     80 E4 85 F1 | 	sub	objptr, ##36480
08654     14 13 02 F6 | 	mov	arg01, local02
08658     01 12 06 F1 | 	add	arg01, #1
0865c     13 15 02 F6 | 	mov	arg02, local01
08660     40 F2 BF FD | 	call	#_compile_immediate
08664     FD 2A 0A F6 | 	mov	local03, result1 wz
08668                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08668                 | ' ucompiledline(0)=alinemajor
08668                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08668                 | ' 
08668                 | ' ' cont: 
08668                 | ' ' 0 - this is the first part of the line that will continue
08668                 | ' ' 1 - this is the continuation of the line
08668                 | ' ' 2 - this is the last continued line
08668                 | ' ' 3 - this is the one and only part
08668                 | ' 
08668                 | ' err=compile_immediate(cont+1,alinemajor) 
08668                 | ' if err=0 andalso alinemajor>0 then
08668     74 00 90 5D |  if_ne	jmp	#LR__0755
0866c     01 26 16 F2 | 	cmp	local01, #1 wc
08670     6C 00 90 CD |  if_b	jmp	#LR__0755
08674                 | '   if cont=3 orelse cont=2 then 
08674     03 28 0E F2 | 	cmp	local02, #3 wz
08678     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0867c     60 00 90 5D |  if_ne	jmp	#LR__0754
08680                 | '     if alinemajor >lastline then 
08680     4A 00 00 FF 
08684     8C E4 05 F1 | 	add	objptr, ##38028
08688     F2 14 02 FB | 	rdlong	arg02, objptr
0868c     4A 00 00 FF 
08690     8C E4 85 F1 | 	sub	objptr, ##38028
08694     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08698     0C 00 90 ED |  if_be	jmp	#LR__0750
0869c     13 13 02 F6 | 	mov	arg01, local01
086a0     38 F1 BF FD | 	call	#_add_line_at_end
086a4     38 00 90 FD | 	jmp	#LR__0753
086a8                 | LR__0750
086a8     13 13 02 F6 | 	mov	arg01, local01
086ac     FC EA BF FD | 	call	#_deleteline
086b0                 | '       deleteline(alinemajor)  
086b0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
086b0     4A 00 00 FF 
086b4     8C E4 05 F1 | 	add	objptr, ##38028
086b8     F2 14 02 FB | 	rdlong	arg02, objptr
086bc     4A 00 00 FF 
086c0     8C E4 85 F1 | 	sub	objptr, ##38028
086c4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
086c8     0C 00 90 ED |  if_be	jmp	#LR__0751
086cc     13 13 02 F6 | 	mov	arg01, local01
086d0     08 F1 BF FD | 	call	#_add_line_at_end
086d4     08 00 90 FD | 	jmp	#LR__0752
086d8                 | LR__0751
086d8     13 13 02 F6 | 	mov	arg01, local01
086dc     E0 EE BF FD | 	call	#_insertline
086e0                 | LR__0752
086e0                 | LR__0753
086e0                 | LR__0754
086e0                 | LR__0755
086e0                 | ' return err
086e0     15 FB 01 F6 | 	mov	result1, local03
086e4     A7 F0 03 F6 | 	mov	ptra, fp
086e8     B2 00 A0 FD | 	call	#popregs_
086ec                 | _compile_ret
086ec     2D 00 64 FD | 	ret
086f0                 | 
086f0                 | ' 
086f0                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
086f0                 | ' 
086f0                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
086f0                 | _compile_assign
086f0     03 4A 05 F6 | 	mov	COUNT_, #3
086f4     A8 00 A0 FD | 	call	#pushregs_
086f8     09 27 02 F6 | 	mov	local01, arg01
086fc     0B 29 02 F6 | 	mov	local02, arg03
08700     47 00 00 FF 
08704     7C E4 05 F1 | 	add	objptr, ##36476
08708     F2 26 62 FC | 	wrlong	local01, objptr
0870c     04 E4 05 F1 | 	add	objptr, #4
08710     F2 14 62 FC | 	wrlong	arg02, objptr
08714     47 00 00 FF 
08718     80 E4 85 F1 | 	sub	objptr, ##36480
0871c     14 13 02 F6 | 	mov	arg01, local02
08720     01 12 06 F1 | 	add	arg01, #1
08724     54 FB BF FD | 	call	#_compile_immediate_assign
08728     FD 2A 02 F6 | 	mov	local03, result1
0872c                 | ' 
0872c                 | ' ucompiledline(0)=alinemajor
0872c                 | ' ucompiledline(1)=alineminor
0872c                 | ' 
0872c                 | ' err=compile_immediate_assign(cont+1) 
0872c                 | ' if alinemajor>0 then
0872c     01 26 16 F2 | 	cmp	local01, #1 wc
08730     6C 00 90 CD |  if_b	jmp	#LR__0765
08734                 | '   if cont=3 orelse cont=2 then 
08734     03 28 0E F2 | 	cmp	local02, #3 wz
08738     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0873c     60 00 90 5D |  if_ne	jmp	#LR__0764
08740                 | '     if alinemajor >lastline then 
08740     4A 00 00 FF 
08744     8C E4 05 F1 | 	add	objptr, ##38028
08748     F2 14 02 FB | 	rdlong	arg02, objptr
0874c     4A 00 00 FF 
08750     8C E4 85 F1 | 	sub	objptr, ##38028
08754     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08758     0C 00 90 ED |  if_be	jmp	#LR__0760
0875c     13 13 02 F6 | 	mov	arg01, local01
08760     78 F0 BF FD | 	call	#_add_line_at_end
08764     38 00 90 FD | 	jmp	#LR__0763
08768                 | LR__0760
08768     13 13 02 F6 | 	mov	arg01, local01
0876c     3C EA BF FD | 	call	#_deleteline
08770                 | '       deleteline(alinemajor)  
08770                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08770     4A 00 00 FF 
08774     8C E4 05 F1 | 	add	objptr, ##38028
08778     F2 14 02 FB | 	rdlong	arg02, objptr
0877c     4A 00 00 FF 
08780     8C E4 85 F1 | 	sub	objptr, ##38028
08784     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08788     0C 00 90 ED |  if_be	jmp	#LR__0761
0878c     13 13 02 F6 | 	mov	arg01, local01
08790     48 F0 BF FD | 	call	#_add_line_at_end
08794     08 00 90 FD | 	jmp	#LR__0762
08798                 | LR__0761
08798     13 13 02 F6 | 	mov	arg01, local01
0879c     20 EE BF FD | 	call	#_insertline
087a0                 | LR__0762
087a0                 | LR__0763
087a0                 | LR__0764
087a0                 | LR__0765
087a0                 | ' return err
087a0     15 FB 01 F6 | 	mov	result1, local03
087a4     A7 F0 03 F6 | 	mov	ptra, fp
087a8     B2 00 A0 FD | 	call	#popregs_
087ac                 | _compile_assign_ret
087ac     2D 00 64 FD | 	ret
087b0                 | 
087b0                 | ' 
087b0                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
087b0                 | ' 
087b0                 | ' function compile_fun_2p() as ulong
087b0                 | _compile_fun_2p
087b0     01 4A 05 F6 | 	mov	COUNT_, #1
087b4     A8 00 A0 FD | 	call	#pushregs_
087b8     30 37 B0 FD | 	call	#_expr
087bc     FD 26 02 F6 | 	mov	local01, result1
087c0                 | ' err=expr() : if err>0 then return err
087c0     01 26 16 F2 | 	cmp	local01, #1 wc
087c4     13 FB 01 36 |  if_ae	mov	result1, local01
087c8     60 00 90 3D |  if_ae	jmp	#LR__0770
087cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
087cc     37 00 00 FF 
087d0     44 E4 05 F1 | 	add	objptr, ##28228
087d4     F2 26 02 FB | 	rdlong	local01, objptr
087d8     03 26 66 F0 | 	shl	local01, #3
087dc     02 00 00 FF 
087e0     38 E4 85 F1 | 	sub	objptr, ##1080
087e4     F2 26 02 F1 | 	add	local01, objptr
087e8     04 26 06 F1 | 	add	local01, #4
087ec     13 27 02 FB | 	rdlong	local01, local01
087f0     11 26 0E F2 | 	cmp	local01, #17 wz
087f4     35 00 00 FF 
087f8     0C E4 85 F1 | 	sub	objptr, ##27148
087fc     15 FA 05 56 |  if_ne	mov	result1, #21
08800     28 00 90 5D |  if_ne	jmp	#LR__0770
08804     37 00 00 FF 
08808     44 E4 05 F1 | 	add	objptr, ##28228
0880c     F2 26 02 FB | 	rdlong	local01, objptr
08810     01 26 06 F1 | 	add	local01, #1
08814     F2 26 62 FC | 	wrlong	local01, objptr
08818     37 00 00 FF 
0881c     44 E4 85 F1 | 	sub	objptr, ##28228
08820     C8 36 B0 FD | 	call	#_expr
08824                 | ' err=expr() : if err>0 then return err
08824     01 FA 15 F2 | 	cmp	result1, #1 wc
08828                 | ' return 0
08828     00 FA 05 C6 |  if_b	mov	result1, #0
0882c                 | LR__0770
0882c     A7 F0 03 F6 | 	mov	ptra, fp
08830     B2 00 A0 FD | 	call	#popregs_
08834                 | _compile_fun_2p_ret
08834     2D 00 64 FD | 	ret
08838                 | 
08838                 | ' 
08838                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08838                 | ' 
08838                 | ' function compile_fun_3p() as ulong
08838                 | _compile_fun_3p
08838     01 4A 05 F6 | 	mov	COUNT_, #1
0883c     A8 00 A0 FD | 	call	#pushregs_
08840     A8 36 B0 FD | 	call	#_expr
08844     FD 26 02 F6 | 	mov	local01, result1
08848                 | ' err=expr() : if err>0 then return err
08848     01 26 16 F2 | 	cmp	local01, #1 wc
0884c     13 FB 01 36 |  if_ae	mov	result1, local01
08850     C8 00 90 3D |  if_ae	jmp	#LR__0780
08854                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08854     37 00 00 FF 
08858     44 E4 05 F1 | 	add	objptr, ##28228
0885c     F2 26 02 FB | 	rdlong	local01, objptr
08860     03 26 66 F0 | 	shl	local01, #3
08864     02 00 00 FF 
08868     38 E4 85 F1 | 	sub	objptr, ##1080
0886c     F2 26 02 F1 | 	add	local01, objptr
08870     04 26 06 F1 | 	add	local01, #4
08874     13 27 02 FB | 	rdlong	local01, local01
08878     11 26 0E F2 | 	cmp	local01, #17 wz
0887c     35 00 00 FF 
08880     0C E4 85 F1 | 	sub	objptr, ##27148
08884     15 FA 05 56 |  if_ne	mov	result1, #21
08888     90 00 90 5D |  if_ne	jmp	#LR__0780
0888c     37 00 00 FF 
08890     44 E4 05 F1 | 	add	objptr, ##28228
08894     F2 26 02 FB | 	rdlong	local01, objptr
08898     01 26 06 F1 | 	add	local01, #1
0889c     F2 26 62 FC | 	wrlong	local01, objptr
088a0     37 00 00 FF 
088a4     44 E4 85 F1 | 	sub	objptr, ##28228
088a8     40 36 B0 FD | 	call	#_expr
088ac     FD 26 02 F6 | 	mov	local01, result1
088b0                 | ' err=expr() : if err>0 then return err
088b0     01 26 16 F2 | 	cmp	local01, #1 wc
088b4     13 FB 01 36 |  if_ae	mov	result1, local01
088b8     60 00 90 3D |  if_ae	jmp	#LR__0780
088bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088bc     37 00 00 FF 
088c0     44 E4 05 F1 | 	add	objptr, ##28228
088c4     F2 26 02 FB | 	rdlong	local01, objptr
088c8     03 26 66 F0 | 	shl	local01, #3
088cc     02 00 00 FF 
088d0     38 E4 85 F1 | 	sub	objptr, ##1080
088d4     F2 26 02 F1 | 	add	local01, objptr
088d8     04 26 06 F1 | 	add	local01, #4
088dc     13 27 02 FB | 	rdlong	local01, local01
088e0     11 26 0E F2 | 	cmp	local01, #17 wz
088e4     35 00 00 FF 
088e8     0C E4 85 F1 | 	sub	objptr, ##27148
088ec     15 FA 05 56 |  if_ne	mov	result1, #21
088f0     28 00 90 5D |  if_ne	jmp	#LR__0780
088f4     37 00 00 FF 
088f8     44 E4 05 F1 | 	add	objptr, ##28228
088fc     F2 26 02 FB | 	rdlong	local01, objptr
08900     01 26 06 F1 | 	add	local01, #1
08904     F2 26 62 FC | 	wrlong	local01, objptr
08908     37 00 00 FF 
0890c     44 E4 85 F1 | 	sub	objptr, ##28228
08910     D8 35 B0 FD | 	call	#_expr
08914                 | ' err=expr() : if err>0 then return err
08914     01 FA 15 F2 | 	cmp	result1, #1 wc
08918                 | ' return 0
08918     00 FA 05 C6 |  if_b	mov	result1, #0
0891c                 | LR__0780
0891c     A7 F0 03 F6 | 	mov	ptra, fp
08920     B2 00 A0 FD | 	call	#popregs_
08924                 | _compile_fun_3p_ret
08924     2D 00 64 FD | 	ret
08928                 | 
08928                 | ' 
08928                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08928                 | ' 
08928                 | ' function compile_fun_4p() as ulong
08928                 | _compile_fun_4p
08928     01 4A 05 F6 | 	mov	COUNT_, #1
0892c     A8 00 A0 FD | 	call	#pushregs_
08930     B8 35 B0 FD | 	call	#_expr
08934     FD 26 02 F6 | 	mov	local01, result1
08938                 | ' err=expr() : if err>0 then return err
08938     01 26 16 F2 | 	cmp	local01, #1 wc
0893c     13 FB 01 36 |  if_ae	mov	result1, local01
08940     30 01 90 3D |  if_ae	jmp	#LR__0790
08944                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08944     37 00 00 FF 
08948     44 E4 05 F1 | 	add	objptr, ##28228
0894c     F2 26 02 FB | 	rdlong	local01, objptr
08950     03 26 66 F0 | 	shl	local01, #3
08954     02 00 00 FF 
08958     38 E4 85 F1 | 	sub	objptr, ##1080
0895c     F2 26 02 F1 | 	add	local01, objptr
08960     04 26 06 F1 | 	add	local01, #4
08964     13 27 02 FB | 	rdlong	local01, local01
08968     11 26 0E F2 | 	cmp	local01, #17 wz
0896c     35 00 00 FF 
08970     0C E4 85 F1 | 	sub	objptr, ##27148
08974     15 FA 05 56 |  if_ne	mov	result1, #21
08978     F8 00 90 5D |  if_ne	jmp	#LR__0790
0897c     37 00 00 FF 
08980     44 E4 05 F1 | 	add	objptr, ##28228
08984     F2 26 02 FB | 	rdlong	local01, objptr
08988     01 26 06 F1 | 	add	local01, #1
0898c     F2 26 62 FC | 	wrlong	local01, objptr
08990     37 00 00 FF 
08994     44 E4 85 F1 | 	sub	objptr, ##28228
08998     50 35 B0 FD | 	call	#_expr
0899c     FD 26 02 F6 | 	mov	local01, result1
089a0                 | ' err=expr() : if err>0 then return err
089a0     01 26 16 F2 | 	cmp	local01, #1 wc
089a4     13 FB 01 36 |  if_ae	mov	result1, local01
089a8     C8 00 90 3D |  if_ae	jmp	#LR__0790
089ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
089ac     37 00 00 FF 
089b0     44 E4 05 F1 | 	add	objptr, ##28228
089b4     F2 26 02 FB | 	rdlong	local01, objptr
089b8     03 26 66 F0 | 	shl	local01, #3
089bc     02 00 00 FF 
089c0     38 E4 85 F1 | 	sub	objptr, ##1080
089c4     F2 26 02 F1 | 	add	local01, objptr
089c8     04 26 06 F1 | 	add	local01, #4
089cc     13 27 02 FB | 	rdlong	local01, local01
089d0     11 26 0E F2 | 	cmp	local01, #17 wz
089d4     35 00 00 FF 
089d8     0C E4 85 F1 | 	sub	objptr, ##27148
089dc     15 FA 05 56 |  if_ne	mov	result1, #21
089e0     90 00 90 5D |  if_ne	jmp	#LR__0790
089e4     37 00 00 FF 
089e8     44 E4 05 F1 | 	add	objptr, ##28228
089ec     F2 26 02 FB | 	rdlong	local01, objptr
089f0     01 26 06 F1 | 	add	local01, #1
089f4     F2 26 62 FC | 	wrlong	local01, objptr
089f8     37 00 00 FF 
089fc     44 E4 85 F1 | 	sub	objptr, ##28228
08a00     E8 34 B0 FD | 	call	#_expr
08a04     FD 26 02 F6 | 	mov	local01, result1
08a08                 | ' err=expr() : if err>0 then return err
08a08     01 26 16 F2 | 	cmp	local01, #1 wc
08a0c     13 FB 01 36 |  if_ae	mov	result1, local01
08a10     60 00 90 3D |  if_ae	jmp	#LR__0790
08a14                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08a14     37 00 00 FF 
08a18     44 E4 05 F1 | 	add	objptr, ##28228
08a1c     F2 26 02 FB | 	rdlong	local01, objptr
08a20     03 26 66 F0 | 	shl	local01, #3
08a24     02 00 00 FF 
08a28     38 E4 85 F1 | 	sub	objptr, ##1080
08a2c     F2 26 02 F1 | 	add	local01, objptr
08a30     04 26 06 F1 | 	add	local01, #4
08a34     13 27 02 FB | 	rdlong	local01, local01
08a38     11 26 0E F2 | 	cmp	local01, #17 wz
08a3c     35 00 00 FF 
08a40     0C E4 85 F1 | 	sub	objptr, ##27148
08a44     15 FA 05 56 |  if_ne	mov	result1, #21
08a48     28 00 90 5D |  if_ne	jmp	#LR__0790
08a4c     37 00 00 FF 
08a50     44 E4 05 F1 | 	add	objptr, ##28228
08a54     F2 26 02 FB | 	rdlong	local01, objptr
08a58     01 26 06 F1 | 	add	local01, #1
08a5c     F2 26 62 FC | 	wrlong	local01, objptr
08a60     37 00 00 FF 
08a64     44 E4 85 F1 | 	sub	objptr, ##28228
08a68     80 34 B0 FD | 	call	#_expr
08a6c                 | ' err=expr() : if err>0 then return err
08a6c     01 FA 15 F2 | 	cmp	result1, #1 wc
08a70                 | ' return 0
08a70     00 FA 05 C6 |  if_b	mov	result1, #0
08a74                 | LR__0790
08a74     A7 F0 03 F6 | 	mov	ptra, fp
08a78     B2 00 A0 FD | 	call	#popregs_
08a7c                 | _compile_fun_4p_ret
08a7c     2D 00 64 FD | 	ret
08a80                 | 
08a80                 | ' 
08a80                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08a80                 | ' 
08a80                 | ' function compile_fun_varp() as ulong,ulong 
08a80                 | _compile_fun_varp
08a80     03 4A 05 F6 | 	mov	COUNT_, #3
08a84     A8 00 A0 FD | 	call	#pushregs_
08a88     00 26 06 F6 | 	mov	local01, #0
08a8c                 | ' 
08a8c                 | ' i=0 : err=0
08a8c                 | ' if lparts(ct).token<>token_end then
08a8c     37 00 00 FF 
08a90     44 E4 05 F1 | 	add	objptr, ##28228
08a94     F2 28 02 FB | 	rdlong	local02, objptr
08a98     03 28 66 F0 | 	shl	local02, #3
08a9c     02 00 00 FF 
08aa0     38 E4 85 F1 | 	sub	objptr, ##1080
08aa4     F2 28 02 F1 | 	add	local02, objptr
08aa8     04 28 06 F1 | 	add	local02, #4
08aac     14 29 02 FB | 	rdlong	local02, local02
08ab0     FE 29 0E F2 | 	cmp	local02, #510 wz
08ab4     35 00 00 FF 
08ab8     0C E4 85 F1 | 	sub	objptr, ##27148
08abc     88 00 90 AD |  if_e	jmp	#LR__0801
08ac0                 | '   do
08ac0                 | LR__0800
08ac0     28 34 B0 FD | 	call	#_expr
08ac4     01 26 06 F1 | 	add	local01, #1
08ac8                 | '     expr()
08ac8                 | '     i+=1
08ac8                 | '     if lparts(ct).token=token_comma then ct+=1
08ac8     37 00 00 FF 
08acc     44 E4 05 F1 | 	add	objptr, ##28228
08ad0     F2 28 02 FB | 	rdlong	local02, objptr
08ad4     03 28 66 F0 | 	shl	local02, #3
08ad8     02 00 00 FF 
08adc     38 E4 85 F1 | 	sub	objptr, ##1080
08ae0     F2 28 02 F1 | 	add	local02, objptr
08ae4     04 28 06 F1 | 	add	local02, #4
08ae8     14 29 02 FB | 	rdlong	local02, local02
08aec     11 28 0E F2 | 	cmp	local02, #17 wz
08af0     35 00 00 FF 
08af4     0C E4 85 F1 | 	sub	objptr, ##27148
08af8     37 00 00 AF 
08afc     44 E4 05 A1 |  if_e	add	objptr, ##28228
08b00     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08b04     01 2A 06 A1 |  if_e	add	local03, #1
08b08     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08b0c     37 00 00 AF 
08b10     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08b14                 | '     if lparts(ct).token=token_end then exit loop
08b14     37 00 00 FF 
08b18     44 E4 05 F1 | 	add	objptr, ##28228
08b1c     F2 28 02 FB | 	rdlong	local02, objptr
08b20     03 28 66 F0 | 	shl	local02, #3
08b24     02 00 00 FF 
08b28     38 E4 85 F1 | 	sub	objptr, ##1080
08b2c     F2 28 02 F1 | 	add	local02, objptr
08b30     04 28 06 F1 | 	add	local02, #4
08b34     14 29 02 FB | 	rdlong	local02, local02
08b38     FE 29 0E F2 | 	cmp	local02, #510 wz
08b3c     35 00 00 FF 
08b40     0C E4 85 F1 | 	sub	objptr, ##27148
08b44     78 FF 9F 5D |  if_ne	jmp	#LR__0800
08b48                 | LR__0801
08b48                 | ' return i,err
08b48     13 FB 01 F6 | 	mov	result1, local01
08b4c     00 FC 05 F6 | 	mov	result2, #0
08b50     A7 F0 03 F6 | 	mov	ptra, fp
08b54     B2 00 A0 FD | 	call	#popregs_
08b58                 | _compile_fun_varp_ret
08b58     2D 00 64 FD | 	ret
08b5c                 | 
08b5c                 | ' 
08b5c                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08b5c                 | ' 
08b5c                 | ' function compile_read() as ulong,ulong 
08b5c                 | _compile_read
08b5c     04 4A 05 F6 | 	mov	COUNT_, #4
08b60     A8 00 A0 FD | 	call	#pushregs_
08b64     00 26 06 F6 | 	mov	local01, #0
08b68                 | ' 
08b68                 | ' i=0 : err=0
08b68                 | ' if lparts(ct).token<>token_end then
08b68     37 00 00 FF 
08b6c     44 E4 05 F1 | 	add	objptr, ##28228
08b70     F2 28 02 FB | 	rdlong	local02, objptr
08b74     03 28 66 F0 | 	shl	local02, #3
08b78     02 00 00 FF 
08b7c     38 E4 85 F1 | 	sub	objptr, ##1080
08b80     F2 28 02 F1 | 	add	local02, objptr
08b84     04 28 06 F1 | 	add	local02, #4
08b88     14 29 02 FB | 	rdlong	local02, local02
08b8c     FE 29 0E F2 | 	cmp	local02, #510 wz
08b90     35 00 00 FF 
08b94     0C E4 85 F1 | 	sub	objptr, ##27148
08b98     98 00 90 AD |  if_e	jmp	#LR__0811
08b9c                 | '   do
08b9c                 | LR__0810
08b9c     B8 2F B0 FD | 	call	#_getaddr
08ba0     FD 2A 02 F6 | 	mov	local03, result1
08ba4     37 00 00 FF 
08ba8     44 E4 05 F1 | 	add	objptr, ##28228
08bac     F2 28 02 FB | 	rdlong	local02, objptr
08bb0     01 28 06 F1 | 	add	local02, #1
08bb4     F2 28 62 FC | 	wrlong	local02, objptr
08bb8     01 26 06 F1 | 	add	local01, #1
08bbc                 | '     err=getaddr() :ct+=1
08bbc                 | '     i+=1 
08bbc                 | '     if lparts(ct).token=token_comma then ct+=1 
08bbc     03 28 66 F0 | 	shl	local02, #3
08bc0     02 00 00 FF 
08bc4     38 E4 85 F1 | 	sub	objptr, ##1080
08bc8     F2 28 02 F1 | 	add	local02, objptr
08bcc     04 28 06 F1 | 	add	local02, #4
08bd0     14 29 02 FB | 	rdlong	local02, local02
08bd4     11 28 0E F2 | 	cmp	local02, #17 wz
08bd8     35 00 00 FF 
08bdc     0C E4 85 F1 | 	sub	objptr, ##27148
08be0     37 00 00 AF 
08be4     44 E4 05 A1 |  if_e	add	objptr, ##28228
08be8     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08bec     01 2C 06 A1 |  if_e	add	local04, #1
08bf0     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08bf4     37 00 00 AF 
08bf8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08bfc                 | '     if lparts(ct).token=token_end then exit loop
08bfc     37 00 00 FF 
08c00     44 E4 05 F1 | 	add	objptr, ##28228
08c04     F2 28 02 FB | 	rdlong	local02, objptr
08c08     03 28 66 F0 | 	shl	local02, #3
08c0c     02 00 00 FF 
08c10     38 E4 85 F1 | 	sub	objptr, ##1080
08c14     F2 28 02 F1 | 	add	local02, objptr
08c18     04 28 06 F1 | 	add	local02, #4
08c1c     14 29 02 FB | 	rdlong	local02, local02
08c20     FE 29 0E F2 | 	cmp	local02, #510 wz
08c24     35 00 00 FF 
08c28     0C E4 85 F1 | 	sub	objptr, ##27148
08c2c     08 00 90 AD |  if_e	jmp	#LR__0812
08c30     68 FF 9F FD | 	jmp	#LR__0810
08c34                 | LR__0811
08c34     36 2A 06 F6 | 	mov	local03, #54
08c38                 | LR__0812
08c38                 | ' return i,err
08c38     13 FB 01 F6 | 	mov	result1, local01
08c3c     15 FD 01 F6 | 	mov	result2, local03
08c40     A7 F0 03 F6 | 	mov	ptra, fp
08c44     B2 00 A0 FD | 	call	#popregs_
08c48                 | _compile_read_ret
08c48     2D 00 64 FD | 	ret
08c4c                 | 
08c4c                 | ' 
08c4c                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08c4c                 | ' 
08c4c                 | ' function compile_input() as ulong,ulong 
08c4c                 | _compile_input
08c4c     0F 4A 05 F6 | 	mov	COUNT_, #15
08c50     A8 00 A0 FD | 	call	#pushregs_
08c54                 | ' 
08c54                 | ' if lparts(ct).token=token_string then
08c54     37 00 00 FF 
08c58     44 E4 05 F1 | 	add	objptr, ##28228
08c5c     F2 16 02 FB | 	rdlong	arg03, objptr
08c60     03 16 66 F0 | 	shl	arg03, #3
08c64     02 00 00 FF 
08c68     38 E4 85 F1 | 	sub	objptr, ##1080
08c6c     F2 16 02 F1 | 	add	arg03, objptr
08c70     04 16 06 F1 | 	add	arg03, #4
08c74     0B FD 01 FB | 	rdlong	result2, arg03
08c78     01 00 00 FF 
08c7c     03 FC 0D F2 | 	cmp	result2, ##515 wz
08c80     35 00 00 FF 
08c84     0C E4 85 F1 | 	sub	objptr, ##27148
08c88     38 06 90 5D |  if_ne	jmp	#LR__0827
08c8c     37 00 00 FF 
08c90     44 E4 05 F1 | 	add	objptr, ##28228
08c94     F2 14 02 FB | 	rdlong	arg02, objptr
08c98     03 14 66 F0 | 	shl	arg02, #3
08c9c     02 00 00 FF 
08ca0     38 E4 85 F1 | 	sub	objptr, ##1080
08ca4     F2 14 02 F1 | 	add	arg02, objptr
08ca8     0A 13 02 FB | 	rdlong	arg01, arg02
08cac     35 00 00 FF 
08cb0     0C E4 85 F1 | 	sub	objptr, ##27148
08cb4     09 2D 02 F6 | 	mov	local04, arg01
08cb8     97 06 48 FB | 	callpa	#(@LR__0821-@LR__0820)>>2,fcache_load_ptr_
08cbc                 | LR__0820
08cbc     16 FB C9 FA | 	rdbyte	result1, local04 wz
08cc0     01 2C 06 51 |  if_ne	add	local04, #1
08cc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0820
08cc8                 | LR__0821
08cc8     09 2D 82 F1 | 	sub	local04, arg01
08ccc     16 FB 01 F6 | 	mov	result1, local04
08cd0     52 00 00 FF 
08cd4     F0 E4 05 F1 | 	add	objptr, ##42224
08cd8     F2 FA 61 FC | 	wrlong	result1, objptr
08cdc     58 E4 85 F1 | 	sub	objptr, #88
08ce0     F2 12 02 FB | 	rdlong	arg01, objptr
08ce4     FD 12 82 F1 | 	sub	arg01, result1
08ce8     04 12 86 F1 | 	sub	arg01, #4
08cec     03 12 26 F5 | 	andn	arg01, #3
08cf0     F2 12 62 FC | 	wrlong	arg01, objptr
08cf4     58 E4 05 F1 | 	add	objptr, #88
08cf8     F2 14 02 FB | 	rdlong	arg02, objptr
08cfc     52 00 00 FF 
08d00     F0 E4 85 F1 | 	sub	objptr, ##42224
08d04     58 AA B1 FD | 	call	#_pslpoke
08d08                 | '   pslpoke memtop,l
08d08                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d08     01 2E 06 F6 | 	mov	local05, #1
08d0c     52 00 00 FF 
08d10     F0 E4 05 F1 | 	add	objptr, ##42224
08d14     F2 30 02 FB | 	rdlong	local06, objptr
08d18     52 00 00 FF 
08d1c     F0 E4 85 F1 | 	sub	objptr, ##42224
08d20     01 30 06 F1 | 	add	local06, #1
08d24                 | LR__0822
08d24     18 2F 52 F2 | 	cmps	local05, local06 wc
08d28     5C 00 90 3D |  if_ae	jmp	#LR__0823
08d2c     52 00 00 FF 
08d30     98 E4 05 F1 | 	add	objptr, ##42136
08d34     F2 32 02 FB | 	rdlong	local07, objptr
08d38     03 32 06 F1 | 	add	local07, #3
08d3c     17 33 02 F1 | 	add	local07, local05
08d40     1B 00 00 FF 
08d44     54 E4 85 F1 | 	sub	objptr, ##13908
08d48     F2 14 02 FB | 	rdlong	arg02, objptr
08d4c     03 14 66 F0 | 	shl	arg02, #3
08d50     02 00 00 FF 
08d54     38 E4 85 F1 | 	sub	objptr, ##1080
08d58     F2 14 02 F1 | 	add	arg02, objptr
08d5c     0A 13 02 FB | 	rdlong	arg01, arg02
08d60     17 15 02 F6 | 	mov	arg02, local05
08d64     01 16 06 F6 | 	mov	arg03, #1
08d68     35 00 00 FF 
08d6c     0C E4 85 F1 | 	sub	objptr, ##27148
08d70     8C 04 B2 FD | 	call	#__system__Mid_S
08d74     FD 14 C2 FA | 	rdbyte	arg02, result1
08d78     19 13 02 F6 | 	mov	arg01, local07
08d7c     70 AA B1 FD | 	call	#_pspoke
08d80     01 2E 06 F1 | 	add	local05, #1
08d84     9C FF 9F FD | 	jmp	#LR__0822
08d88                 | LR__0823
08d88     52 00 00 FF 
08d8c     98 E4 05 F1 | 	add	objptr, ##42136
08d90     F2 26 02 FB | 	rdlong	local01, objptr
08d94     2B 2A 06 F6 | 	mov	local03, #43
08d98     13 35 02 F6 | 	mov	local08, local01
08d9c     14 33 02 F6 | 	mov	local07, local02
08da0     15 37 02 F6 | 	mov	local09, local03
08da4     08 00 00 FF 
08da8     1C E4 85 F1 | 	sub	objptr, ##4124
08dac     F2 30 02 FB | 	rdlong	local06, objptr
08db0     18 2F 02 F6 | 	mov	local05, local06
08db4     01 2E 66 F0 | 	shl	local05, #1
08db8     18 2F 02 F1 | 	add	local05, local06
08dbc     02 2E 66 F0 | 	shl	local05, #2
08dc0     03 00 00 FF 
08dc4     00 E4 85 F1 | 	sub	objptr, ##1536
08dc8     F2 2E 02 F1 | 	add	local05, objptr
08dcc     17 35 62 FC | 	wrlong	local08, local05
08dd0     03 00 00 FF 
08dd4     00 E4 05 F1 | 	add	objptr, ##1536
08dd8     F2 34 02 FB | 	rdlong	local08, objptr
08ddc     1A 31 02 F6 | 	mov	local06, local08
08de0     01 30 66 F0 | 	shl	local06, #1
08de4     1A 31 02 F1 | 	add	local06, local08
08de8     02 30 66 F0 | 	shl	local06, #2
08dec     03 00 00 FF 
08df0     00 E4 85 F1 | 	sub	objptr, ##1536
08df4     F2 30 02 F1 | 	add	local06, objptr
08df8     04 30 06 F1 | 	add	local06, #4
08dfc     18 33 62 FC | 	wrlong	local07, local06
08e00     03 00 00 FF 
08e04     00 E4 05 F1 | 	add	objptr, ##1536
08e08     F2 34 02 FB | 	rdlong	local08, objptr
08e0c     1A 33 02 F6 | 	mov	local07, local08
08e10     01 32 66 F0 | 	shl	local07, #1
08e14     1A 33 02 F1 | 	add	local07, local08
08e18     02 32 66 F0 | 	shl	local07, #2
08e1c     03 00 00 FF 
08e20     00 E4 85 F1 | 	sub	objptr, ##1536
08e24     F2 32 02 F1 | 	add	local07, objptr
08e28     08 32 06 F1 | 	add	local07, #8
08e2c     19 37 62 FC | 	wrlong	local09, local07
08e30     03 00 00 FF 
08e34     00 E4 05 F1 | 	add	objptr, ##1536
08e38     F2 34 02 FB | 	rdlong	local08, objptr
08e3c     01 34 06 F1 | 	add	local08, #1
08e40     F2 34 62 FC | 	wrlong	local08, objptr
08e44     13 00 00 FF 
08e48     38 E4 85 F1 | 	sub	objptr, ##9784
08e4c     F2 34 02 FB | 	rdlong	local08, objptr
08e50     01 34 06 F1 | 	add	local08, #1
08e54     F2 34 62 FC | 	wrlong	local08, objptr
08e58                 | '   t1.result.uresult=memtop
08e58                 | '   t1.result_type=result_string2  
08e58                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08e58                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e58     03 34 66 F0 | 	shl	local08, #3
08e5c     02 00 00 FF 
08e60     38 E4 85 F1 | 	sub	objptr, ##1080
08e64     F2 34 02 F1 | 	add	local08, objptr
08e68     04 34 06 F1 | 	add	local08, #4
08e6c     1A 35 02 FB | 	rdlong	local08, local08
08e70     11 34 0E F2 | 	cmp	local08, #17 wz
08e74     35 00 00 FF 
08e78     0C E4 85 F1 | 	sub	objptr, ##27148
08e7c     60 01 90 5D |  if_ne	jmp	#LR__0824
08e80     21 2A 06 F6 | 	mov	local03, #33
08e84     13 35 02 F6 | 	mov	local08, local01
08e88     14 33 02 F6 | 	mov	local07, local02
08e8c     15 39 02 F6 | 	mov	local10, local03
08e90     4A 00 00 FF 
08e94     7C E4 05 F1 | 	add	objptr, ##38012
08e98     F2 3A 02 FB | 	rdlong	local11, objptr
08e9c     1D 3D 02 F6 | 	mov	local12, local11
08ea0     01 3C 66 F0 | 	shl	local12, #1
08ea4     1D 3D 02 F1 | 	add	local12, local11
08ea8     02 3C 66 F0 | 	shl	local12, #2
08eac     03 00 00 FF 
08eb0     00 E4 85 F1 | 	sub	objptr, ##1536
08eb4     F2 3C 02 F1 | 	add	local12, objptr
08eb8     1E 35 62 FC | 	wrlong	local08, local12
08ebc     03 00 00 FF 
08ec0     00 E4 05 F1 | 	add	objptr, ##1536
08ec4     F2 3E 02 FB | 	rdlong	local13, objptr
08ec8     1F 35 02 F6 | 	mov	local08, local13
08ecc     01 34 66 F0 | 	shl	local08, #1
08ed0     1F 35 02 F1 | 	add	local08, local13
08ed4     02 34 66 F0 | 	shl	local08, #2
08ed8     03 00 00 FF 
08edc     00 E4 85 F1 | 	sub	objptr, ##1536
08ee0     F2 34 02 F1 | 	add	local08, objptr
08ee4     04 34 06 F1 | 	add	local08, #4
08ee8     1A 33 62 FC | 	wrlong	local07, local08
08eec     03 00 00 FF 
08ef0     00 E4 05 F1 | 	add	objptr, ##1536
08ef4     F2 34 02 FB | 	rdlong	local08, objptr
08ef8     1A 41 02 F6 | 	mov	local14, local08
08efc     01 40 66 F0 | 	shl	local14, #1
08f00     1A 41 02 F1 | 	add	local14, local08
08f04     02 40 66 F0 | 	shl	local14, #2
08f08     03 00 00 FF 
08f0c     00 E4 85 F1 | 	sub	objptr, ##1536
08f10     F2 40 02 F1 | 	add	local14, objptr
08f14     08 40 06 F1 | 	add	local14, #8
08f18     20 39 62 FC | 	wrlong	local10, local14
08f1c     03 00 00 FF 
08f20     00 E4 05 F1 | 	add	objptr, ##1536
08f24     F2 34 02 FB | 	rdlong	local08, objptr
08f28     01 34 06 F1 | 	add	local08, #1
08f2c     F2 34 62 FC | 	wrlong	local08, objptr
08f30     44 2A 06 F6 | 	mov	local03, #68
08f34     13 35 02 F6 | 	mov	local08, local01
08f38     14 33 02 F6 | 	mov	local07, local02
08f3c     15 39 02 F6 | 	mov	local10, local03
08f40     F2 40 02 FB | 	rdlong	local14, objptr
08f44     20 3F 02 F6 | 	mov	local13, local14
08f48     01 3E 66 F0 | 	shl	local13, #1
08f4c     20 3F 02 F1 | 	add	local13, local14
08f50     02 3E 66 F0 | 	shl	local13, #2
08f54     03 00 00 FF 
08f58     00 E4 85 F1 | 	sub	objptr, ##1536
08f5c     F2 3E 02 F1 | 	add	local13, objptr
08f60     1F 35 62 FC | 	wrlong	local08, local13
08f64     03 00 00 FF 
08f68     00 E4 05 F1 | 	add	objptr, ##1536
08f6c     F2 40 02 FB | 	rdlong	local14, objptr
08f70     20 3F 02 F6 | 	mov	local13, local14
08f74     01 3E 66 F0 | 	shl	local13, #1
08f78     20 3F 02 F1 | 	add	local13, local14
08f7c     02 3E 66 F0 | 	shl	local13, #2
08f80     03 00 00 FF 
08f84     00 E4 85 F1 | 	sub	objptr, ##1536
08f88     F2 3E 02 F1 | 	add	local13, objptr
08f8c     04 3E 06 F1 | 	add	local13, #4
08f90     1F 33 62 FC | 	wrlong	local07, local13
08f94     03 00 00 FF 
08f98     00 E4 05 F1 | 	add	objptr, ##1536
08f9c     F2 3E 02 FB | 	rdlong	local13, objptr
08fa0     1F 41 02 F6 | 	mov	local14, local13
08fa4     01 40 66 F0 | 	shl	local14, #1
08fa8     1F 41 02 F1 | 	add	local14, local13
08fac     02 40 66 F0 | 	shl	local14, #2
08fb0     03 00 00 FF 
08fb4     00 E4 85 F1 | 	sub	objptr, ##1536
08fb8     F2 40 02 F1 | 	add	local14, objptr
08fbc     08 40 06 F1 | 	add	local14, #8
08fc0     20 39 62 FC | 	wrlong	local10, local14
08fc4     03 00 00 FF 
08fc8     00 E4 05 F1 | 	add	objptr, ##1536
08fcc     F2 34 02 FB | 	rdlong	local08, objptr
08fd0     01 34 06 F1 | 	add	local08, #1
08fd4     F2 34 62 FC | 	wrlong	local08, objptr
08fd8     4A 00 00 FF 
08fdc     7C E4 85 F1 | 	sub	objptr, ##38012
08fe0                 | LR__0824
08fe0                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08fe0     37 00 00 FF 
08fe4     44 E4 05 F1 | 	add	objptr, ##28228
08fe8     F2 34 02 FB | 	rdlong	local08, objptr
08fec     03 34 66 F0 | 	shl	local08, #3
08ff0     02 00 00 FF 
08ff4     38 E4 85 F1 | 	sub	objptr, ##1080
08ff8     F2 34 02 F1 | 	add	local08, objptr
08ffc     04 34 06 F1 | 	add	local08, #4
09000     1A 41 02 FB | 	rdlong	local14, local08
09004     12 40 0E F2 | 	cmp	local14, #18 wz
09008     35 00 00 FF 
0900c     0C E4 85 F1 | 	sub	objptr, ##27148
09010     60 01 90 5D |  if_ne	jmp	#LR__0825
09014     22 2A 06 F6 | 	mov	local03, #34
09018     13 35 02 F6 | 	mov	local08, local01
0901c     14 33 02 F6 | 	mov	local07, local02
09020     15 39 02 F6 | 	mov	local10, local03
09024     4A 00 00 FF 
09028     7C E4 05 F1 | 	add	objptr, ##38012
0902c     F2 40 02 FB | 	rdlong	local14, objptr
09030     20 3F 02 F6 | 	mov	local13, local14
09034     01 3E 66 F0 | 	shl	local13, #1
09038     20 3F 02 F1 | 	add	local13, local14
0903c     02 3E 66 F0 | 	shl	local13, #2
09040     03 00 00 FF 
09044     00 E4 85 F1 | 	sub	objptr, ##1536
09048     F2 3E 02 F1 | 	add	local13, objptr
0904c     1F 35 62 FC | 	wrlong	local08, local13
09050     03 00 00 FF 
09054     00 E4 05 F1 | 	add	objptr, ##1536
09058     F2 40 02 FB | 	rdlong	local14, objptr
0905c     20 35 02 F6 | 	mov	local08, local14
09060     01 34 66 F0 | 	shl	local08, #1
09064     20 35 02 F1 | 	add	local08, local14
09068     02 34 66 F0 | 	shl	local08, #2
0906c     03 00 00 FF 
09070     00 E4 85 F1 | 	sub	objptr, ##1536
09074     F2 34 02 F1 | 	add	local08, objptr
09078     04 34 06 F1 | 	add	local08, #4
0907c     1A 33 62 FC | 	wrlong	local07, local08
09080     03 00 00 FF 
09084     00 E4 05 F1 | 	add	objptr, ##1536
09088     F2 34 02 FB | 	rdlong	local08, objptr
0908c     1A 41 02 F6 | 	mov	local14, local08
09090     01 40 66 F0 | 	shl	local14, #1
09094     1A 41 02 F1 | 	add	local14, local08
09098     02 40 66 F0 | 	shl	local14, #2
0909c     03 00 00 FF 
090a0     00 E4 85 F1 | 	sub	objptr, ##1536
090a4     F2 40 02 F1 | 	add	local14, objptr
090a8     08 40 06 F1 | 	add	local14, #8
090ac     20 39 62 FC | 	wrlong	local10, local14
090b0     03 00 00 FF 
090b4     00 E4 05 F1 | 	add	objptr, ##1536
090b8     F2 34 02 FB | 	rdlong	local08, objptr
090bc     01 34 06 F1 | 	add	local08, #1
090c0     F2 34 62 FC | 	wrlong	local08, objptr
090c4     44 2A 06 F6 | 	mov	local03, #68
090c8     13 35 02 F6 | 	mov	local08, local01
090cc     14 33 02 F6 | 	mov	local07, local02
090d0     15 39 02 F6 | 	mov	local10, local03
090d4     F2 40 02 FB | 	rdlong	local14, objptr
090d8     20 3F 02 F6 | 	mov	local13, local14
090dc     01 3E 66 F0 | 	shl	local13, #1
090e0     20 3F 02 F1 | 	add	local13, local14
090e4     02 3E 66 F0 | 	shl	local13, #2
090e8     03 00 00 FF 
090ec     00 E4 85 F1 | 	sub	objptr, ##1536
090f0     F2 3E 02 F1 | 	add	local13, objptr
090f4     1F 35 62 FC | 	wrlong	local08, local13
090f8     03 00 00 FF 
090fc     00 E4 05 F1 | 	add	objptr, ##1536
09100     F2 40 02 FB | 	rdlong	local14, objptr
09104     20 3F 02 F6 | 	mov	local13, local14
09108     01 3E 66 F0 | 	shl	local13, #1
0910c     20 3F 02 F1 | 	add	local13, local14
09110     02 3E 66 F0 | 	shl	local13, #2
09114     03 00 00 FF 
09118     00 E4 85 F1 | 	sub	objptr, ##1536
0911c     F2 3E 02 F1 | 	add	local13, objptr
09120     04 3E 06 F1 | 	add	local13, #4
09124     1F 33 62 FC | 	wrlong	local07, local13
09128     03 00 00 FF 
0912c     00 E4 05 F1 | 	add	objptr, ##1536
09130     F2 3E 02 FB | 	rdlong	local13, objptr
09134     1F 41 02 F6 | 	mov	local14, local13
09138     01 40 66 F0 | 	shl	local14, #1
0913c     1F 41 02 F1 | 	add	local14, local13
09140     02 40 66 F0 | 	shl	local14, #2
09144     03 00 00 FF 
09148     00 E4 85 F1 | 	sub	objptr, ##1536
0914c     F2 40 02 F1 | 	add	local14, objptr
09150     08 40 06 F1 | 	add	local14, #8
09154     20 39 62 FC | 	wrlong	local10, local14
09158     03 00 00 FF 
0915c     00 E4 05 F1 | 	add	objptr, ##1536
09160     F2 34 02 FB | 	rdlong	local08, objptr
09164     01 34 06 F1 | 	add	local08, #1
09168     F2 34 62 FC | 	wrlong	local08, objptr
0916c     4A 00 00 FF 
09170     7C E4 85 F1 | 	sub	objptr, ##38012
09174                 | LR__0825
09174                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
09174     37 00 00 FF 
09178     44 E4 05 F1 | 	add	objptr, ##28228
0917c     F2 34 02 FB | 	rdlong	local08, objptr
09180     03 34 66 F0 | 	shl	local08, #3
09184     02 00 00 FF 
09188     38 E4 85 F1 | 	sub	objptr, ##1080
0918c     F2 34 02 F1 | 	add	local08, objptr
09190     04 34 06 F1 | 	add	local08, #4
09194     1A 41 02 FB | 	rdlong	local14, local08
09198     12 40 0E F2 | 	cmp	local14, #18 wz
0919c     35 00 00 FF 
091a0     0C E4 85 F1 | 	sub	objptr, ##27148
091a4     00 01 90 AD |  if_e	jmp	#LR__0826
091a8     37 00 00 FF 
091ac     44 E4 05 F1 | 	add	objptr, ##28228
091b0     F2 34 02 FB | 	rdlong	local08, objptr
091b4     03 34 66 F0 | 	shl	local08, #3
091b8     02 00 00 FF 
091bc     38 E4 85 F1 | 	sub	objptr, ##1080
091c0     F2 34 02 F1 | 	add	local08, objptr
091c4     04 34 06 F1 | 	add	local08, #4
091c8     1A 41 02 FB | 	rdlong	local14, local08
091cc     11 40 0E F2 | 	cmp	local14, #17 wz
091d0     35 00 00 FF 
091d4     0C E4 85 F1 | 	sub	objptr, ##27148
091d8     CC 00 90 AD |  if_e	jmp	#LR__0826
091dc     44 2A 06 F6 | 	mov	local03, #68
091e0     13 35 02 F6 | 	mov	local08, local01
091e4     14 33 02 F6 | 	mov	local07, local02
091e8     15 39 02 F6 | 	mov	local10, local03
091ec     4A 00 00 FF 
091f0     7C E4 05 F1 | 	add	objptr, ##38012
091f4     F2 40 02 FB | 	rdlong	local14, objptr
091f8     20 3F 02 F6 | 	mov	local13, local14
091fc     01 3E 66 F0 | 	shl	local13, #1
09200     20 3F 02 F1 | 	add	local13, local14
09204     02 3E 66 F0 | 	shl	local13, #2
09208     03 00 00 FF 
0920c     00 E4 85 F1 | 	sub	objptr, ##1536
09210     F2 3E 02 F1 | 	add	local13, objptr
09214     1F 35 62 FC | 	wrlong	local08, local13
09218     03 00 00 FF 
0921c     00 E4 05 F1 | 	add	objptr, ##1536
09220     F2 40 02 FB | 	rdlong	local14, objptr
09224     20 3F 02 F6 | 	mov	local13, local14
09228     01 3E 66 F0 | 	shl	local13, #1
0922c     20 3F 02 F1 | 	add	local13, local14
09230     02 3E 66 F0 | 	shl	local13, #2
09234     03 00 00 FF 
09238     00 E4 85 F1 | 	sub	objptr, ##1536
0923c     F2 3E 02 F1 | 	add	local13, objptr
09240     04 3E 06 F1 | 	add	local13, #4
09244     1F 33 62 FC | 	wrlong	local07, local13
09248     03 00 00 FF 
0924c     00 E4 05 F1 | 	add	objptr, ##1536
09250     F2 3E 02 FB | 	rdlong	local13, objptr
09254     1F 41 02 F6 | 	mov	local14, local13
09258     01 40 66 F0 | 	shl	local14, #1
0925c     1F 41 02 F1 | 	add	local14, local13
09260     02 40 66 F0 | 	shl	local14, #2
09264     03 00 00 FF 
09268     00 E4 85 F1 | 	sub	objptr, ##1536
0926c     F2 40 02 F1 | 	add	local14, objptr
09270     08 40 06 F1 | 	add	local14, #8
09274     20 39 62 FC | 	wrlong	local10, local14
09278     03 00 00 FF 
0927c     00 E4 05 F1 | 	add	objptr, ##1536
09280     F2 34 02 FB | 	rdlong	local08, objptr
09284     01 34 06 F1 | 	add	local08, #1
09288     F2 34 62 FC | 	wrlong	local08, objptr
0928c     13 00 00 FF 
09290     38 E4 85 F1 | 	sub	objptr, ##9784
09294     F2 34 02 FB | 	rdlong	local08, objptr
09298     01 34 86 F1 | 	sub	local08, #1
0929c     F2 34 62 FC | 	wrlong	local08, objptr
092a0     37 00 00 FF 
092a4     44 E4 85 F1 | 	sub	objptr, ##28228
092a8                 | LR__0826
092a8     37 00 00 FF 
092ac     44 E4 05 F1 | 	add	objptr, ##28228
092b0     F2 34 02 FB | 	rdlong	local08, objptr
092b4     01 34 06 F1 | 	add	local08, #1
092b8     F2 34 62 FC | 	wrlong	local08, objptr
092bc     37 00 00 FF 
092c0     44 E4 85 F1 | 	sub	objptr, ##28228
092c4                 | LR__0827
092c4     00 2E 06 F6 | 	mov	local05, #0
092c8                 | ' i=0 : err=0
092c8                 | ' if lparts(ct).token<>token_end then
092c8     37 00 00 FF 
092cc     44 E4 05 F1 | 	add	objptr, ##28228
092d0     F2 40 02 FB | 	rdlong	local14, objptr
092d4     03 40 66 F0 | 	shl	local14, #3
092d8     02 00 00 FF 
092dc     38 E4 85 F1 | 	sub	objptr, ##1080
092e0     F2 40 02 F1 | 	add	local14, objptr
092e4     04 40 06 F1 | 	add	local14, #4
092e8     20 41 02 FB | 	rdlong	local14, local14
092ec     FE 41 0E F2 | 	cmp	local14, #510 wz
092f0     35 00 00 FF 
092f4     0C E4 85 F1 | 	sub	objptr, ##27148
092f8     98 00 90 AD |  if_e	jmp	#LR__0829
092fc                 | '   do
092fc                 | LR__0828
092fc     58 28 B0 FD | 	call	#_getaddr
09300     FD 42 02 F6 | 	mov	local15, result1
09304     37 00 00 FF 
09308     44 E4 05 F1 | 	add	objptr, ##28228
0930c     F2 40 02 FB | 	rdlong	local14, objptr
09310     01 40 06 F1 | 	add	local14, #1
09314     F2 40 62 FC | 	wrlong	local14, objptr
09318     01 2E 06 F1 | 	add	local05, #1
0931c                 | '     err=getaddr() :ct+=1
0931c                 | '     i+=1 
0931c                 | '     if lparts(ct).token=token_comma then ct+=1 
0931c     03 40 66 F0 | 	shl	local14, #3
09320     02 00 00 FF 
09324     38 E4 85 F1 | 	sub	objptr, ##1080
09328     F2 40 02 F1 | 	add	local14, objptr
0932c     04 40 06 F1 | 	add	local14, #4
09330     20 41 02 FB | 	rdlong	local14, local14
09334     11 40 0E F2 | 	cmp	local14, #17 wz
09338     35 00 00 FF 
0933c     0C E4 85 F1 | 	sub	objptr, ##27148
09340     37 00 00 AF 
09344     44 E4 05 A1 |  if_e	add	objptr, ##28228
09348     F2 34 02 AB |  if_e	rdlong	local08, objptr
0934c     01 34 06 A1 |  if_e	add	local08, #1
09350     F2 34 62 AC |  if_e	wrlong	local08, objptr
09354     37 00 00 AF 
09358     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0935c                 | '     if lparts(ct).token=token_end then exit loop
0935c     37 00 00 FF 
09360     44 E4 05 F1 | 	add	objptr, ##28228
09364     F2 40 02 FB | 	rdlong	local14, objptr
09368     03 40 66 F0 | 	shl	local14, #3
0936c     02 00 00 FF 
09370     38 E4 85 F1 | 	sub	objptr, ##1080
09374     F2 40 02 F1 | 	add	local14, objptr
09378     04 40 06 F1 | 	add	local14, #4
0937c     20 41 02 FB | 	rdlong	local14, local14
09380     FE 41 0E F2 | 	cmp	local14, #510 wz
09384     35 00 00 FF 
09388     0C E4 85 F1 | 	sub	objptr, ##27148
0938c     08 00 90 AD |  if_e	jmp	#LR__0830
09390     68 FF 9F FD | 	jmp	#LR__0828
09394                 | LR__0829
09394     36 42 06 F6 | 	mov	local15, #54
09398                 | LR__0830
09398                 | ' return i,err
09398     17 FB 01 F6 | 	mov	result1, local05
0939c     21 FD 01 F6 | 	mov	result2, local15
093a0     A7 F0 03 F6 | 	mov	ptra, fp
093a4     B2 00 A0 FD | 	call	#popregs_
093a8                 | _compile_input_ret
093a8     2D 00 64 FD | 	ret
093ac                 | 
093ac                 | ' 
093ac                 | ' '----- compile assign to an array element
093ac                 | ' 
093ac                 | ' function compile_array_assign() as ulong 
093ac                 | _compile_array_assign
093ac     0B 4A 05 F6 | 	mov	COUNT_, #11
093b0     A8 00 A0 FD | 	call	#pushregs_
093b4     00 2C 06 F6 | 	mov	local04, #0
093b8     00 2E 06 F6 | 	mov	local05, #0
093bc     37 00 00 FF 
093c0     44 E4 05 F1 | 	add	objptr, ##28228
093c4     F2 30 02 FB | 	rdlong	local06, objptr
093c8     18 FB 01 F6 | 	mov	result1, local06
093cc     01 FA 85 F1 | 	sub	result1, #1
093d0     03 FA 65 F0 | 	shl	result1, #3
093d4     02 00 00 FF 
093d8     38 E4 85 F1 | 	sub	objptr, ##1080
093dc     F2 FA 01 F1 | 	add	result1, objptr
093e0     FD 32 02 FB | 	rdlong	local07, result1
093e4                 | ' numpar=0 : err=0
093e4                 | ' varname$=lparts(ct-1).part$
093e4                 | ' if lparts(ct).token=token_lpar then
093e4     03 30 66 F0 | 	shl	local06, #3
093e8     F2 30 02 F1 | 	add	local06, objptr
093ec     04 30 06 F1 | 	add	local06, #4
093f0     18 31 02 FB | 	rdlong	local06, local06
093f4     15 30 0E F2 | 	cmp	local06, #21 wz
093f8     35 00 00 FF 
093fc     0C E4 85 F1 | 	sub	objptr, ##27148
09400     F4 01 90 5D |  if_ne	jmp	#LR__0844
09404     37 00 00 FF 
09408     44 E4 05 F1 | 	add	objptr, ##28228
0940c     F2 34 02 FB | 	rdlong	local08, objptr
09410     01 34 06 F1 | 	add	local08, #1
09414     F2 34 62 FC | 	wrlong	local08, objptr
09418     37 00 00 FF 
0941c     44 E4 85 F1 | 	sub	objptr, ##28228
09420                 | '   ct+=1 											' omit this lpar, this is for expr list
09420                 | '   do
09420                 | LR__0840
09420     C8 2A B0 FD | 	call	#_expr
09424     37 00 00 FF 
09428     44 E4 05 F1 | 	add	objptr, ##28228
0942c     F2 30 02 FB | 	rdlong	local06, objptr
09430     01 30 06 F1 | 	add	local06, #1
09434     F2 30 62 FC | 	wrlong	local06, objptr
09438     01 2C 06 F1 | 	add	local04, #1
0943c     01 30 86 F1 | 	sub	local06, #1
09440     03 30 66 F0 | 	shl	local06, #3
09444     02 00 00 FF 
09448     38 E4 85 F1 | 	sub	objptr, ##1080
0944c     F2 30 02 F1 | 	add	local06, objptr
09450     04 30 06 F1 | 	add	local06, #4
09454     18 35 02 FB | 	rdlong	local08, local06
09458     14 34 0E F2 | 	cmp	local08, #20 wz
0945c     35 00 00 FF 
09460     0C E4 85 F1 | 	sub	objptr, ##27148
09464     34 00 90 AD |  if_e	jmp	#LR__0841
09468     37 00 00 FF 
0946c     44 E4 05 F1 | 	add	objptr, ##28228
09470     F2 34 02 FB | 	rdlong	local08, objptr
09474     03 34 66 F0 | 	shl	local08, #3
09478     02 00 00 FF 
0947c     38 E4 85 F1 | 	sub	objptr, ##1080
09480     F2 34 02 F1 | 	add	local08, objptr
09484     04 34 06 F1 | 	add	local08, #4
09488     1A 35 02 FB | 	rdlong	local08, local08
0948c     FE 35 0E F2 | 	cmp	local08, #510 wz
09490     35 00 00 FF 
09494     0C E4 85 F1 | 	sub	objptr, ##27148
09498     84 FF 9F 5D |  if_ne	jmp	#LR__0840
0949c                 | LR__0841
0949c     37 00 00 FF 
094a0     44 E4 05 F1 | 	add	objptr, ##28228
094a4     F2 34 02 FB | 	rdlong	local08, objptr
094a8     01 34 06 F1 | 	add	local08, #1
094ac     F2 34 62 FC | 	wrlong	local08, objptr
094b0     37 00 00 FF 
094b4     44 E4 85 F1 | 	sub	objptr, ##28228
094b8     30 2A B0 FD | 	call	#_expr
094bc     01 36 66 F6 | 	neg	local09, #1
094c0     00 38 06 F6 | 	mov	local10, #0
094c4                 | '   ct+=1 : expr()
094c4                 | '   j=-1 : i=0 
094c4                 | '   do 
094c4                 | LR__0842
094c4                 | '     if variables(i).name=varname$ then j=i: exit loop
094c4     1C 31 02 F6 | 	mov	local06, local10
094c8     04 30 66 F0 | 	shl	local06, #4
094cc     14 00 00 FF 
094d0     F8 E5 05 F1 | 	add	objptr, ##10744
094d4     F2 30 02 F1 | 	add	local06, objptr
094d8     18 13 02 FB | 	rdlong	arg01, local06
094dc     19 15 02 F6 | 	mov	arg02, local07
094e0     14 00 00 FF 
094e4     F8 E5 85 F1 | 	sub	objptr, ##10744
094e8     A8 DB B1 FD | 	call	#__system___string_cmp
094ec     00 FA 0D F2 | 	cmp	result1, #0 wz
094f0     1C 37 02 A6 |  if_e	mov	local09, local10
094f4     20 00 90 AD |  if_e	jmp	#LR__0843
094f8     01 38 06 F1 | 	add	local10, #1
094fc     35 00 00 FF 
09500     08 E4 05 F1 | 	add	objptr, ##27144
09504     F2 34 02 FB | 	rdlong	local08, objptr
09508     35 00 00 FF 
0950c     08 E4 85 F1 | 	sub	objptr, ##27144
09510     1A 39 5A F2 | 	cmps	local10, local08 wcz
09514     AC FF 9F ED |  if_be	jmp	#LR__0842
09518                 | LR__0843
09518     1B 27 02 F6 | 	mov	local01, local09
0951c     16 29 02 F6 | 	mov	local02, local04
09520     17 2A 06 F6 | 	mov	local03, #23
09524     13 35 02 F6 | 	mov	local08, local01
09528     14 3B 02 F6 | 	mov	local11, local02
0952c     15 33 02 F6 | 	mov	local07, local03
09530     4A 00 00 FF 
09534     7C E4 05 F1 | 	add	objptr, ##38012
09538     F2 26 02 FB | 	rdlong	local01, objptr
0953c     13 37 02 F6 | 	mov	local09, local01
09540     01 36 66 F0 | 	shl	local09, #1
09544     13 37 02 F1 | 	add	local09, local01
09548     02 36 66 F0 | 	shl	local09, #2
0954c     03 00 00 FF 
09550     00 E4 85 F1 | 	sub	objptr, ##1536
09554     F2 36 02 F1 | 	add	local09, objptr
09558     1B 35 62 FC | 	wrlong	local08, local09
0955c     03 00 00 FF 
09560     00 E4 05 F1 | 	add	objptr, ##1536
09564     F2 26 02 FB | 	rdlong	local01, objptr
09568     13 37 02 F6 | 	mov	local09, local01
0956c     01 36 66 F0 | 	shl	local09, #1
09570     13 37 02 F1 | 	add	local09, local01
09574     02 36 66 F0 | 	shl	local09, #2
09578     03 00 00 FF 
0957c     00 E4 85 F1 | 	sub	objptr, ##1536
09580     F2 36 02 F1 | 	add	local09, objptr
09584     04 36 06 F1 | 	add	local09, #4
09588     1B 3B 62 FC | 	wrlong	local11, local09
0958c     03 00 00 FF 
09590     00 E4 05 F1 | 	add	objptr, ##1536
09594     F2 3A 02 FB | 	rdlong	local11, objptr
09598     1D 27 02 F6 | 	mov	local01, local11
0959c     01 26 66 F0 | 	shl	local01, #1
095a0     1D 27 02 F1 | 	add	local01, local11
095a4     02 26 66 F0 | 	shl	local01, #2
095a8     03 00 00 FF 
095ac     00 E4 85 F1 | 	sub	objptr, ##1536
095b0     F2 26 02 F1 | 	add	local01, objptr
095b4     08 26 06 F1 | 	add	local01, #8
095b8     13 33 62 FC | 	wrlong	local07, local01
095bc     03 00 00 FF 
095c0     00 E4 05 F1 | 	add	objptr, ##1536
095c4     F2 34 02 FB | 	rdlong	local08, objptr
095c8     01 34 06 F1 | 	add	local08, #1
095cc     F2 34 62 FC | 	wrlong	local08, objptr
095d0                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
095d0                 | '   if numpar>3 then err=45
095d0     04 2C 16 F2 | 	cmp	local04, #4 wc
095d4     2D 2E 06 36 |  if_ae	mov	local05, #45
095d8                 | '   if i>varnum then err=20
095d8     15 00 00 FF 
095dc     74 E4 85 F1 | 	sub	objptr, ##10868
095e0     F2 34 02 FB | 	rdlong	local08, objptr
095e4     35 00 00 FF 
095e8     08 E4 85 F1 | 	sub	objptr, ##27144
095ec     1A 39 5A F2 | 	cmps	local10, local08 wcz
095f0     14 2E 06 16 |  if_a	mov	local05, #20
095f4     04 00 90 FD | 	jmp	#LR__0845
095f8                 | LR__0844
095f8     0E 2E 06 F6 | 	mov	local05, #14
095fc                 | LR__0845
095fc                 | ' return err
095fc     17 FB 01 F6 | 	mov	result1, local05
09600     A7 F0 03 F6 | 	mov	ptra, fp
09604     B2 00 A0 FD | 	call	#popregs_
09608                 | _compile_array_assign_ret
09608     2D 00 64 FD | 	ret
0960c                 | 
0960c                 | ' 
0960c                 | ' '----- compile print command with its ";" and "," modifiers
0960c                 | ' 
0960c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0960c                 | _compile_print
0960c     0B 4A 05 F6 | 	mov	COUNT_, #11
09610     A8 00 A0 FD | 	call	#pushregs_
09614     00 26 06 F6 | 	mov	local01, #0
09618     1D 2A 06 F6 | 	mov	local03, #29
0961c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0961c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0961c     37 00 00 FF 
09620     44 E4 05 F1 | 	add	objptr, ##28228
09624     F2 2C 02 FB | 	rdlong	local04, objptr
09628     03 2C 66 F0 | 	shl	local04, #3
0962c     02 00 00 FF 
09630     38 E4 85 F1 | 	sub	objptr, ##1080
09634     F2 2C 02 F1 | 	add	local04, objptr
09638     04 2C 06 F1 | 	add	local04, #4
0963c     16 2D 02 FB | 	rdlong	local04, local04
09640     FE 2D 0E F2 | 	cmp	local04, #510 wz
09644     35 00 00 FF 
09648     0C E4 85 F1 | 	sub	objptr, ##27148
0964c     68 01 90 5D |  if_ne	jmp	#LR__0850
09650     20 2A 06 F6 | 	mov	local03, #32
09654     13 2F 02 F6 | 	mov	local05, local01
09658     14 31 02 F6 | 	mov	local06, local02
0965c     15 33 02 F6 | 	mov	local07, local03
09660     4A 00 00 FF 
09664     7C E4 05 F1 | 	add	objptr, ##38012
09668     F2 34 02 FB | 	rdlong	local08, objptr
0966c     1A 37 02 F6 | 	mov	local09, local08
09670     01 36 66 F0 | 	shl	local09, #1
09674     1A 37 02 F1 | 	add	local09, local08
09678     02 36 66 F0 | 	shl	local09, #2
0967c     03 00 00 FF 
09680     00 E4 85 F1 | 	sub	objptr, ##1536
09684     F2 36 02 F1 | 	add	local09, objptr
09688     1B 2F 62 FC | 	wrlong	local05, local09
0968c     03 00 00 FF 
09690     00 E4 05 F1 | 	add	objptr, ##1536
09694     F2 2E 02 FB | 	rdlong	local05, objptr
09698     17 39 02 F6 | 	mov	local10, local05
0969c     01 38 66 F0 | 	shl	local10, #1
096a0     17 39 02 F1 | 	add	local10, local05
096a4     02 38 66 F0 | 	shl	local10, #2
096a8     03 00 00 FF 
096ac     00 E4 85 F1 | 	sub	objptr, ##1536
096b0     F2 38 02 F1 | 	add	local10, objptr
096b4     04 38 06 F1 | 	add	local10, #4
096b8     1C 31 62 FC | 	wrlong	local06, local10
096bc     03 00 00 FF 
096c0     00 E4 05 F1 | 	add	objptr, ##1536
096c4     F2 2E 02 FB | 	rdlong	local05, objptr
096c8     17 3B 02 F6 | 	mov	local11, local05
096cc     01 3A 66 F0 | 	shl	local11, #1
096d0     17 3B 02 F1 | 	add	local11, local05
096d4     02 3A 66 F0 | 	shl	local11, #2
096d8     03 00 00 FF 
096dc     00 E4 85 F1 | 	sub	objptr, ##1536
096e0     F2 3A 02 F1 | 	add	local11, objptr
096e4     08 3A 06 F1 | 	add	local11, #8
096e8     1D 33 62 FC | 	wrlong	local07, local11
096ec     03 00 00 FF 
096f0     00 E4 05 F1 | 	add	objptr, ##1536
096f4     F2 2E 02 FB | 	rdlong	local05, objptr
096f8     01 2E 06 F1 | 	add	local05, #1
096fc     F2 2E 62 FC | 	wrlong	local05, objptr
09700     44 2A 06 F6 | 	mov	local03, #68
09704     13 2F 02 F6 | 	mov	local05, local01
09708     14 31 02 F6 | 	mov	local06, local02
0970c     15 33 02 F6 | 	mov	local07, local03
09710     F2 34 02 FB | 	rdlong	local08, objptr
09714     1A 37 02 F6 | 	mov	local09, local08
09718     01 36 66 F0 | 	shl	local09, #1
0971c     1A 37 02 F1 | 	add	local09, local08
09720     02 36 66 F0 | 	shl	local09, #2
09724     03 00 00 FF 
09728     00 E4 85 F1 | 	sub	objptr, ##1536
0972c     F2 36 02 F1 | 	add	local09, objptr
09730     1B 2F 62 FC | 	wrlong	local05, local09
09734     03 00 00 FF 
09738     00 E4 05 F1 | 	add	objptr, ##1536
0973c     F2 3A 02 FB | 	rdlong	local11, objptr
09740     1D 39 02 F6 | 	mov	local10, local11
09744     01 38 66 F0 | 	shl	local10, #1
09748     1D 39 02 F1 | 	add	local10, local11
0974c     02 38 66 F0 | 	shl	local10, #2
09750     03 00 00 FF 
09754     00 E4 85 F1 | 	sub	objptr, ##1536
09758     F2 38 02 F1 | 	add	local10, objptr
0975c     04 38 06 F1 | 	add	local10, #4
09760     1C 31 62 FC | 	wrlong	local06, local10
09764     03 00 00 FF 
09768     00 E4 05 F1 | 	add	objptr, ##1536
0976c     F2 38 02 FB | 	rdlong	local10, objptr
09770     1C 3B 02 F6 | 	mov	local11, local10
09774     01 3A 66 F0 | 	shl	local11, #1
09778     1C 3B 02 F1 | 	add	local11, local10
0977c     02 3A 66 F0 | 	shl	local11, #2
09780     03 00 00 FF 
09784     00 E4 85 F1 | 	sub	objptr, ##1536
09788     F2 3A 02 F1 | 	add	local11, objptr
0978c     08 3A 06 F1 | 	add	local11, #8
09790     1D 33 62 FC | 	wrlong	local07, local11
09794     03 00 00 FF 
09798     00 E4 05 F1 | 	add	objptr, ##1536
0979c     F2 2E 02 FB | 	rdlong	local05, objptr
097a0     01 2E 06 F1 | 	add	local05, #1
097a4     F2 2E 62 FC | 	wrlong	local05, objptr
097a8     4A 00 00 FF 
097ac     7C E4 85 F1 | 	sub	objptr, ##38012
097b0     00 FA 05 F6 | 	mov	result1, #0
097b4     20 05 90 FD | 	jmp	#LR__0857
097b8                 | LR__0850
097b8                 | ' do
097b8                 | LR__0851
097b8     30 27 B0 FD | 	call	#_expr
097bc                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
097bc                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
097bc     37 00 00 FF 
097c0     44 E4 05 F1 | 	add	objptr, ##28228
097c4     F2 2C 02 FB | 	rdlong	local04, objptr
097c8     03 2C 66 F0 | 	shl	local04, #3
097cc     02 00 00 FF 
097d0     38 E4 85 F1 | 	sub	objptr, ##1080
097d4     F2 2C 02 F1 | 	add	local04, objptr
097d8     04 2C 06 F1 | 	add	local04, #4
097dc     16 35 02 FB | 	rdlong	local08, local04
097e0     11 34 0E F2 | 	cmp	local08, #17 wz
097e4     35 00 00 FF 
097e8     0C E4 85 F1 | 	sub	objptr, ##27148
097ec     60 01 90 5D |  if_ne	jmp	#LR__0852
097f0     21 2A 06 F6 | 	mov	local03, #33
097f4     13 2F 02 F6 | 	mov	local05, local01
097f8     14 31 02 F6 | 	mov	local06, local02
097fc     15 33 02 F6 | 	mov	local07, local03
09800     4A 00 00 FF 
09804     7C E4 05 F1 | 	add	objptr, ##38012
09808     F2 34 02 FB | 	rdlong	local08, objptr
0980c     1A 37 02 F6 | 	mov	local09, local08
09810     01 36 66 F0 | 	shl	local09, #1
09814     1A 37 02 F1 | 	add	local09, local08
09818     02 36 66 F0 | 	shl	local09, #2
0981c     03 00 00 FF 
09820     00 E4 85 F1 | 	sub	objptr, ##1536
09824     F2 36 02 F1 | 	add	local09, objptr
09828     1B 2F 62 FC | 	wrlong	local05, local09
0982c     03 00 00 FF 
09830     00 E4 05 F1 | 	add	objptr, ##1536
09834     F2 3A 02 FB | 	rdlong	local11, objptr
09838     1D 39 02 F6 | 	mov	local10, local11
0983c     01 38 66 F0 | 	shl	local10, #1
09840     1D 39 02 F1 | 	add	local10, local11
09844     02 38 66 F0 | 	shl	local10, #2
09848     03 00 00 FF 
0984c     00 E4 85 F1 | 	sub	objptr, ##1536
09850     F2 38 02 F1 | 	add	local10, objptr
09854     04 38 06 F1 | 	add	local10, #4
09858     1C 31 62 FC | 	wrlong	local06, local10
0985c     03 00 00 FF 
09860     00 E4 05 F1 | 	add	objptr, ##1536
09864     F2 2E 02 FB | 	rdlong	local05, objptr
09868     17 3B 02 F6 | 	mov	local11, local05
0986c     01 3A 66 F0 | 	shl	local11, #1
09870     17 3B 02 F1 | 	add	local11, local05
09874     02 3A 66 F0 | 	shl	local11, #2
09878     03 00 00 FF 
0987c     00 E4 85 F1 | 	sub	objptr, ##1536
09880     F2 3A 02 F1 | 	add	local11, objptr
09884     08 3A 06 F1 | 	add	local11, #8
09888     1D 33 62 FC | 	wrlong	local07, local11
0988c     03 00 00 FF 
09890     00 E4 05 F1 | 	add	objptr, ##1536
09894     F2 2E 02 FB | 	rdlong	local05, objptr
09898     01 2E 06 F1 | 	add	local05, #1
0989c     F2 2E 62 FC | 	wrlong	local05, objptr
098a0     44 2A 06 F6 | 	mov	local03, #68
098a4     13 2F 02 F6 | 	mov	local05, local01
098a8     14 31 02 F6 | 	mov	local06, local02
098ac     15 33 02 F6 | 	mov	local07, local03
098b0     F2 34 02 FB | 	rdlong	local08, objptr
098b4     1A 37 02 F6 | 	mov	local09, local08
098b8     01 36 66 F0 | 	shl	local09, #1
098bc     1A 37 02 F1 | 	add	local09, local08
098c0     02 36 66 F0 | 	shl	local09, #2
098c4     03 00 00 FF 
098c8     00 E4 85 F1 | 	sub	objptr, ##1536
098cc     F2 36 02 F1 | 	add	local09, objptr
098d0     1B 2F 62 FC | 	wrlong	local05, local09
098d4     03 00 00 FF 
098d8     00 E4 05 F1 | 	add	objptr, ##1536
098dc     F2 3A 02 FB | 	rdlong	local11, objptr
098e0     1D 39 02 F6 | 	mov	local10, local11
098e4     01 38 66 F0 | 	shl	local10, #1
098e8     1D 39 02 F1 | 	add	local10, local11
098ec     02 38 66 F0 | 	shl	local10, #2
098f0     03 00 00 FF 
098f4     00 E4 85 F1 | 	sub	objptr, ##1536
098f8     F2 38 02 F1 | 	add	local10, objptr
098fc     04 38 06 F1 | 	add	local10, #4
09900     1C 31 62 FC | 	wrlong	local06, local10
09904     03 00 00 FF 
09908     00 E4 05 F1 | 	add	objptr, ##1536
0990c     F2 38 02 FB | 	rdlong	local10, objptr
09910     1C 3B 02 F6 | 	mov	local11, local10
09914     01 3A 66 F0 | 	shl	local11, #1
09918     1C 3B 02 F1 | 	add	local11, local10
0991c     02 3A 66 F0 | 	shl	local11, #2
09920     03 00 00 FF 
09924     00 E4 85 F1 | 	sub	objptr, ##1536
09928     F2 3A 02 F1 | 	add	local11, objptr
0992c     08 3A 06 F1 | 	add	local11, #8
09930     1D 33 62 FC | 	wrlong	local07, local11
09934     03 00 00 FF 
09938     00 E4 05 F1 | 	add	objptr, ##1536
0993c     F2 2E 02 FB | 	rdlong	local05, objptr
09940     01 2E 06 F1 | 	add	local05, #1
09944     F2 2E 62 FC | 	wrlong	local05, objptr
09948     4A 00 00 FF 
0994c     7C E4 85 F1 | 	sub	objptr, ##38012
09950                 | LR__0852
09950                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09950     37 00 00 FF 
09954     44 E4 05 F1 | 	add	objptr, ##28228
09958     F2 2C 02 FB | 	rdlong	local04, objptr
0995c     03 2C 66 F0 | 	shl	local04, #3
09960     02 00 00 FF 
09964     38 E4 85 F1 | 	sub	objptr, ##1080
09968     F2 2C 02 F1 | 	add	local04, objptr
0996c     04 2C 06 F1 | 	add	local04, #4
09970     16 35 02 FB | 	rdlong	local08, local04
09974     12 34 0E F2 | 	cmp	local08, #18 wz
09978     35 00 00 FF 
0997c     0C E4 85 F1 | 	sub	objptr, ##27148
09980     60 01 90 5D |  if_ne	jmp	#LR__0853
09984     22 2A 06 F6 | 	mov	local03, #34
09988     13 2F 02 F6 | 	mov	local05, local01
0998c     14 31 02 F6 | 	mov	local06, local02
09990     15 33 02 F6 | 	mov	local07, local03
09994     4A 00 00 FF 
09998     7C E4 05 F1 | 	add	objptr, ##38012
0999c     F2 34 02 FB | 	rdlong	local08, objptr
099a0     1A 37 02 F6 | 	mov	local09, local08
099a4     01 36 66 F0 | 	shl	local09, #1
099a8     1A 37 02 F1 | 	add	local09, local08
099ac     02 36 66 F0 | 	shl	local09, #2
099b0     03 00 00 FF 
099b4     00 E4 85 F1 | 	sub	objptr, ##1536
099b8     F2 36 02 F1 | 	add	local09, objptr
099bc     1B 2F 62 FC | 	wrlong	local05, local09
099c0     03 00 00 FF 
099c4     00 E4 05 F1 | 	add	objptr, ##1536
099c8     F2 3A 02 FB | 	rdlong	local11, objptr
099cc     1D 39 02 F6 | 	mov	local10, local11
099d0     01 38 66 F0 | 	shl	local10, #1
099d4     1D 39 02 F1 | 	add	local10, local11
099d8     02 38 66 F0 | 	shl	local10, #2
099dc     03 00 00 FF 
099e0     00 E4 85 F1 | 	sub	objptr, ##1536
099e4     F2 38 02 F1 | 	add	local10, objptr
099e8     04 38 06 F1 | 	add	local10, #4
099ec     1C 31 62 FC | 	wrlong	local06, local10
099f0     03 00 00 FF 
099f4     00 E4 05 F1 | 	add	objptr, ##1536
099f8     F2 2E 02 FB | 	rdlong	local05, objptr
099fc     17 3B 02 F6 | 	mov	local11, local05
09a00     01 3A 66 F0 | 	shl	local11, #1
09a04     17 3B 02 F1 | 	add	local11, local05
09a08     02 3A 66 F0 | 	shl	local11, #2
09a0c     03 00 00 FF 
09a10     00 E4 85 F1 | 	sub	objptr, ##1536
09a14     F2 3A 02 F1 | 	add	local11, objptr
09a18     08 3A 06 F1 | 	add	local11, #8
09a1c     1D 33 62 FC | 	wrlong	local07, local11
09a20     03 00 00 FF 
09a24     00 E4 05 F1 | 	add	objptr, ##1536
09a28     F2 2E 02 FB | 	rdlong	local05, objptr
09a2c     01 2E 06 F1 | 	add	local05, #1
09a30     F2 2E 62 FC | 	wrlong	local05, objptr
09a34     44 2A 06 F6 | 	mov	local03, #68
09a38     13 2F 02 F6 | 	mov	local05, local01
09a3c     14 31 02 F6 | 	mov	local06, local02
09a40     15 33 02 F6 | 	mov	local07, local03
09a44     F2 34 02 FB | 	rdlong	local08, objptr
09a48     1A 37 02 F6 | 	mov	local09, local08
09a4c     01 36 66 F0 | 	shl	local09, #1
09a50     1A 37 02 F1 | 	add	local09, local08
09a54     02 36 66 F0 | 	shl	local09, #2
09a58     03 00 00 FF 
09a5c     00 E4 85 F1 | 	sub	objptr, ##1536
09a60     F2 36 02 F1 | 	add	local09, objptr
09a64     1B 2F 62 FC | 	wrlong	local05, local09
09a68     03 00 00 FF 
09a6c     00 E4 05 F1 | 	add	objptr, ##1536
09a70     F2 3A 02 FB | 	rdlong	local11, objptr
09a74     1D 39 02 F6 | 	mov	local10, local11
09a78     01 38 66 F0 | 	shl	local10, #1
09a7c     1D 39 02 F1 | 	add	local10, local11
09a80     02 38 66 F0 | 	shl	local10, #2
09a84     03 00 00 FF 
09a88     00 E4 85 F1 | 	sub	objptr, ##1536
09a8c     F2 38 02 F1 | 	add	local10, objptr
09a90     04 38 06 F1 | 	add	local10, #4
09a94     1C 31 62 FC | 	wrlong	local06, local10
09a98     03 00 00 FF 
09a9c     00 E4 05 F1 | 	add	objptr, ##1536
09aa0     F2 38 02 FB | 	rdlong	local10, objptr
09aa4     1C 3B 02 F6 | 	mov	local11, local10
09aa8     01 3A 66 F0 | 	shl	local11, #1
09aac     1C 3B 02 F1 | 	add	local11, local10
09ab0     02 3A 66 F0 | 	shl	local11, #2
09ab4     03 00 00 FF 
09ab8     00 E4 85 F1 | 	sub	objptr, ##1536
09abc     F2 3A 02 F1 | 	add	local11, objptr
09ac0     08 3A 06 F1 | 	add	local11, #8
09ac4     1D 33 62 FC | 	wrlong	local07, local11
09ac8     03 00 00 FF 
09acc     00 E4 05 F1 | 	add	objptr, ##1536
09ad0     F2 2E 02 FB | 	rdlong	local05, objptr
09ad4     01 2E 06 F1 | 	add	local05, #1
09ad8     F2 2E 62 FC | 	wrlong	local05, objptr
09adc     4A 00 00 FF 
09ae0     7C E4 85 F1 | 	sub	objptr, ##38012
09ae4                 | LR__0853
09ae4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09ae4     37 00 00 FF 
09ae8     44 E4 05 F1 | 	add	objptr, ##28228
09aec     F2 2C 02 FB | 	rdlong	local04, objptr
09af0     03 2C 66 F0 | 	shl	local04, #3
09af4     02 00 00 FF 
09af8     38 E4 85 F1 | 	sub	objptr, ##1080
09afc     F2 2C 02 F1 | 	add	local04, objptr
09b00     04 2C 06 F1 | 	add	local04, #4
09b04     16 35 02 FB | 	rdlong	local08, local04
09b08     FE 35 0E F2 | 	cmp	local08, #510 wz
09b0c     35 00 00 FF 
09b10     0C E4 85 F1 | 	sub	objptr, ##27148
09b14     B8 00 90 5D |  if_ne	jmp	#LR__0854
09b18     44 2A 06 F6 | 	mov	local03, #68
09b1c     13 2F 02 F6 | 	mov	local05, local01
09b20     14 31 02 F6 | 	mov	local06, local02
09b24     15 33 02 F6 | 	mov	local07, local03
09b28     4A 00 00 FF 
09b2c     7C E4 05 F1 | 	add	objptr, ##38012
09b30     F2 34 02 FB | 	rdlong	local08, objptr
09b34     1A 37 02 F6 | 	mov	local09, local08
09b38     01 36 66 F0 | 	shl	local09, #1
09b3c     1A 37 02 F1 | 	add	local09, local08
09b40     02 36 66 F0 | 	shl	local09, #2
09b44     03 00 00 FF 
09b48     00 E4 85 F1 | 	sub	objptr, ##1536
09b4c     F2 36 02 F1 | 	add	local09, objptr
09b50     1B 2F 62 FC | 	wrlong	local05, local09
09b54     03 00 00 FF 
09b58     00 E4 05 F1 | 	add	objptr, ##1536
09b5c     F2 3A 02 FB | 	rdlong	local11, objptr
09b60     1D 39 02 F6 | 	mov	local10, local11
09b64     01 38 66 F0 | 	shl	local10, #1
09b68     1D 39 02 F1 | 	add	local10, local11
09b6c     02 38 66 F0 | 	shl	local10, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 38 02 F1 | 	add	local10, objptr
09b7c     04 38 06 F1 | 	add	local10, #4
09b80     1C 31 62 FC | 	wrlong	local06, local10
09b84     03 00 00 FF 
09b88     00 E4 05 F1 | 	add	objptr, ##1536
09b8c     F2 38 02 FB | 	rdlong	local10, objptr
09b90     1C 3B 02 F6 | 	mov	local11, local10
09b94     01 3A 66 F0 | 	shl	local11, #1
09b98     1C 3B 02 F1 | 	add	local11, local10
09b9c     02 3A 66 F0 | 	shl	local11, #2
09ba0     03 00 00 FF 
09ba4     00 E4 85 F1 | 	sub	objptr, ##1536
09ba8     F2 3A 02 F1 | 	add	local11, objptr
09bac     08 3A 06 F1 | 	add	local11, #8
09bb0     1D 33 62 FC | 	wrlong	local07, local11
09bb4     03 00 00 FF 
09bb8     00 E4 05 F1 | 	add	objptr, ##1536
09bbc     F2 2E 02 FB | 	rdlong	local05, objptr
09bc0     01 2E 06 F1 | 	add	local05, #1
09bc4     F2 2E 62 FC | 	wrlong	local05, objptr
09bc8     4A 00 00 FF 
09bcc     7C E4 85 F1 | 	sub	objptr, ##38012
09bd0                 | LR__0854
09bd0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09bd0     37 00 00 FF 
09bd4     44 E4 05 F1 | 	add	objptr, ##28228
09bd8     F2 2C 02 FB | 	rdlong	local04, objptr
09bdc     03 2C 66 F0 | 	shl	local04, #3
09be0     02 00 00 FF 
09be4     38 E4 85 F1 | 	sub	objptr, ##1080
09be8     F2 2C 02 F1 | 	add	local04, objptr
09bec     04 2C 06 F1 | 	add	local04, #4
09bf0     16 35 02 FB | 	rdlong	local08, local04
09bf4     11 34 0E F2 | 	cmp	local08, #17 wz
09bf8     35 00 00 FF 
09bfc     0C E4 85 F1 | 	sub	objptr, ##27148
09c00     6C 00 90 AD |  if_e	jmp	#LR__0855
09c04     37 00 00 FF 
09c08     44 E4 05 F1 | 	add	objptr, ##28228
09c0c     F2 34 02 FB | 	rdlong	local08, objptr
09c10     03 34 66 F0 | 	shl	local08, #3
09c14     02 00 00 FF 
09c18     38 E4 85 F1 | 	sub	objptr, ##1080
09c1c     F2 34 02 F1 | 	add	local08, objptr
09c20     04 34 06 F1 | 	add	local08, #4
09c24     1A 35 02 FB | 	rdlong	local08, local08
09c28     12 34 0E F2 | 	cmp	local08, #18 wz
09c2c     35 00 00 FF 
09c30     0C E4 85 F1 | 	sub	objptr, ##27148
09c34     38 00 90 AD |  if_e	jmp	#LR__0855
09c38     37 00 00 FF 
09c3c     44 E4 05 F1 | 	add	objptr, ##28228
09c40     F2 3A 02 FB | 	rdlong	local11, objptr
09c44     03 3A 66 F0 | 	shl	local11, #3
09c48     02 00 00 FF 
09c4c     38 E4 85 F1 | 	sub	objptr, ##1080
09c50     F2 3A 02 F1 | 	add	local11, objptr
09c54     04 3A 06 F1 | 	add	local11, #4
09c58     1D 3B 02 FB | 	rdlong	local11, local11
09c5c     FE 3B 0E F2 | 	cmp	local11, #510 wz
09c60     35 00 00 FF 
09c64     0C E4 85 F1 | 	sub	objptr, ##27148
09c68     16 FA 05 56 |  if_ne	mov	result1, #22
09c6c     68 00 90 5D |  if_ne	jmp	#LR__0857
09c70                 | LR__0855
09c70     37 00 00 FF 
09c74     44 E4 05 F1 | 	add	objptr, ##28228
09c78     F2 2C 02 FB | 	rdlong	local04, objptr
09c7c     01 2C 06 F1 | 	add	local04, #1
09c80     F2 2C 62 FC | 	wrlong	local04, objptr
09c84     03 2C 66 F0 | 	shl	local04, #3
09c88     02 00 00 FF 
09c8c     38 E4 85 F1 | 	sub	objptr, ##1080
09c90     F2 2C 02 F1 | 	add	local04, objptr
09c94     04 2C 06 F1 | 	add	local04, #4
09c98     16 35 02 FB | 	rdlong	local08, local04
09c9c     FE 35 0E F2 | 	cmp	local08, #510 wz
09ca0     35 00 00 FF 
09ca4     0C E4 85 F1 | 	sub	objptr, ##27148
09ca8     28 00 90 AD |  if_e	jmp	#LR__0856
09cac     37 00 00 FF 
09cb0     44 E4 05 F1 | 	add	objptr, ##28228
09cb4     F2 3A 02 FB | 	rdlong	local11, objptr
09cb8     0E 00 00 FF 
09cbc     1C E4 05 F1 | 	add	objptr, ##7196
09cc0     F2 38 02 FB | 	rdlong	local10, objptr
09cc4     45 00 00 FF 
09cc8     60 E4 85 F1 | 	sub	objptr, ##35424
09ccc     1C 3B 52 F2 | 	cmps	local11, local10 wc
09cd0     E4 FA 9F CD |  if_b	jmp	#LR__0851
09cd4                 | LR__0856
09cd4                 | ' return 0
09cd4     00 FA 05 F6 | 	mov	result1, #0
09cd8                 | LR__0857
09cd8     A7 F0 03 F6 | 	mov	ptra, fp
09cdc     B2 00 A0 FD | 	call	#popregs_
09ce0                 | _compile_print_ret
09ce0     2D 00 64 FD | 	ret
09ce4                 | 
09ce4                 | ' 
09ce4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ce4                 | ' 
09ce4                 | ' function compile_if(aline as ulong) as ulong  
09ce4                 | _compile_if
09ce4     09 4A 05 F6 | 	mov	COUNT_, #9
09ce8     A8 00 A0 FD | 	call	#pushregs_
09cec                 | _compile_if_enter
09cec     09 2D 02 F6 | 	mov	local04, arg01
09cf0                 | ' return expr()
09cf0     F8 21 B0 FD | 	call	#_expr
09cf4     37 00 00 FF 
09cf8     44 E4 05 F1 | 	add	objptr, ##28228
09cfc     F2 14 02 FB | 	rdlong	arg02, objptr
09d00     0A 2F 02 F6 | 	mov	local05, arg02
09d04     03 2E 66 F0 | 	shl	local05, #3
09d08     02 00 00 FF 
09d0c     38 E4 85 F1 | 	sub	objptr, ##1080
09d10     F2 2E 02 F1 | 	add	local05, objptr
09d14     04 2E 06 F1 | 	add	local05, #4
09d18     17 2F 02 FB | 	rdlong	local05, local05
09d1c     01 14 06 F1 | 	add	arg02, #1
09d20     02 00 00 FF 
09d24     38 E4 05 F1 | 	add	objptr, ##1080
09d28     F2 14 62 FC | 	wrlong	arg02, objptr
09d2c     37 00 00 FF 
09d30     44 E4 85 F1 | 	sub	objptr, ##28228
09d34                 | ' 
09d34                 | ' err=compile_fun_1p()
09d34                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09d34     5B 2E 0E F2 | 	cmp	local05, #91 wz
09d38     34 FA 05 56 |  if_ne	mov	result1, #52
09d3c     20 01 90 5D |  if_ne	jmp	#LR__0862
09d40     58 2A 06 F6 | 	mov	local03, #88
09d44     13 31 02 F6 | 	mov	local06, local01
09d48     14 33 02 F6 | 	mov	local07, local02
09d4c     15 15 02 F6 | 	mov	arg02, local03
09d50     4A 00 00 FF 
09d54     7C E4 05 F1 | 	add	objptr, ##38012
09d58     F2 12 02 FB | 	rdlong	arg01, objptr
09d5c     09 35 02 F6 | 	mov	local08, arg01
09d60     01 34 66 F0 | 	shl	local08, #1
09d64     09 35 02 F1 | 	add	local08, arg01
09d68     02 34 66 F0 | 	shl	local08, #2
09d6c     03 00 00 FF 
09d70     00 E4 85 F1 | 	sub	objptr, ##1536
09d74     F2 34 02 F1 | 	add	local08, objptr
09d78     1A 31 62 FC | 	wrlong	local06, local08
09d7c     03 00 00 FF 
09d80     00 E4 05 F1 | 	add	objptr, ##1536
09d84     F2 30 02 FB | 	rdlong	local06, objptr
09d88     18 13 02 F6 | 	mov	arg01, local06
09d8c     01 12 66 F0 | 	shl	arg01, #1
09d90     18 13 02 F1 | 	add	arg01, local06
09d94     02 12 66 F0 | 	shl	arg01, #2
09d98     03 00 00 FF 
09d9c     00 E4 85 F1 | 	sub	objptr, ##1536
09da0     F2 12 02 F1 | 	add	arg01, objptr
09da4     04 12 06 F1 | 	add	arg01, #4
09da8     09 33 62 FC | 	wrlong	local07, arg01
09dac     03 00 00 FF 
09db0     00 E4 05 F1 | 	add	objptr, ##1536
09db4     F2 30 02 FB | 	rdlong	local06, objptr
09db8     18 13 02 F6 | 	mov	arg01, local06
09dbc     01 12 66 F0 | 	shl	arg01, #1
09dc0     18 13 02 F1 | 	add	arg01, local06
09dc4     02 12 66 F0 | 	shl	arg01, #2
09dc8     03 00 00 FF 
09dcc     00 E4 85 F1 | 	sub	objptr, ##1536
09dd0     F2 12 02 F1 | 	add	arg01, objptr
09dd4     08 12 06 F1 | 	add	arg01, #8
09dd8     09 15 62 FC | 	wrlong	arg02, arg01
09ddc     03 00 00 FF 
09de0     00 E4 05 F1 | 	add	objptr, ##1536
09de4     F2 30 02 FB | 	rdlong	local06, objptr
09de8     01 30 06 F1 | 	add	local06, #1
09dec     F2 30 62 FC | 	wrlong	local06, objptr
09df0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09df0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09df0     13 00 00 FF 
09df4     38 E4 85 F1 | 	sub	objptr, ##9784
09df8     F2 14 02 FB | 	rdlong	arg02, objptr
09dfc     01 14 06 F1 | 	add	arg02, #1
09e00     03 14 66 F0 | 	shl	arg02, #3
09e04     02 00 00 FF 
09e08     38 E4 85 F1 | 	sub	objptr, ##1080
09e0c     F2 14 02 F1 | 	add	arg02, objptr
09e10     0A 13 02 FB | 	rdlong	arg01, arg02
09e14     35 00 00 FF 
09e18     0C E4 85 F1 | 	sub	objptr, ##27148
09e1c                 | ' 
09e1c                 | ' select case s
09e1c     B6 01 00 FF 
09e20     B2 15 06 F6 | 	mov	arg02, ##@LR__5599
09e24     6C D2 B1 FD | 	call	#__system___string_cmp
09e28     00 FA 0D F2 | 	cmp	result1, #0 wz
09e2c     1B FA 05 A6 |  if_e	mov	result1, #27
09e30     00 FA 05 56 |  if_ne	mov	result1, #0
09e34     00 FA 0D F2 | 	cmp	result1, #0 wz
09e38     10 00 90 AD |  if_e	jmp	#LR__0860
09e3c     05 12 06 F6 | 	mov	arg01, #5
09e40     38 E4 BF FD | 	call	#_compile_immediate_assign
09e44     FD 36 02 F6 | 	mov	local09, result1
09e48     10 00 90 FD | 	jmp	#LR__0861
09e4c                 | LR__0860
09e4c     05 12 06 F6 | 	mov	arg01, #5
09e50     16 15 02 F6 | 	mov	arg02, local04
09e54     4C DA BF FD | 	call	#_compile_immediate
09e58     FD 36 02 F6 | 	mov	local09, result1
09e5c                 | LR__0861
09e5c                 | ' return err
09e5c     1B FB 01 F6 | 	mov	result1, local09
09e60                 | LR__0862
09e60     A7 F0 03 F6 | 	mov	ptra, fp
09e64     B2 00 A0 FD | 	call	#popregs_
09e68                 | _compile_if_ret
09e68     2D 00 64 FD | 	ret
09e6c                 | 
09e6c                 | ' 
09e6c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09e6c                 | ' 
09e6c                 | ' function compile_else(aline as ulong) as ulong  
09e6c                 | _compile_else
09e6c     07 4A 05 F6 | 	mov	COUNT_, #7
09e70     A8 00 A0 FD | 	call	#pushregs_
09e74                 | _compile_else_enter
09e74     09 2D 02 F6 | 	mov	local04, arg01
09e78     5A 2A 06 F6 | 	mov	local03, #90
09e7c     13 2F 02 F6 | 	mov	local05, local01
09e80     14 31 02 F6 | 	mov	local06, local02
09e84     15 27 02 F6 | 	mov	local01, local03
09e88     4A 00 00 FF 
09e8c     7C E4 05 F1 | 	add	objptr, ##38012
09e90     F2 14 02 FB | 	rdlong	arg02, objptr
09e94     0A 13 02 F6 | 	mov	arg01, arg02
09e98     01 12 66 F0 | 	shl	arg01, #1
09e9c     0A 13 02 F1 | 	add	arg01, arg02
09ea0     02 12 66 F0 | 	shl	arg01, #2
09ea4     03 00 00 FF 
09ea8     00 E4 85 F1 | 	sub	objptr, ##1536
09eac     F2 12 02 F1 | 	add	arg01, objptr
09eb0     09 2F 62 FC | 	wrlong	local05, arg01
09eb4     03 00 00 FF 
09eb8     00 E4 05 F1 | 	add	objptr, ##1536
09ebc     F2 2E 02 FB | 	rdlong	local05, objptr
09ec0     17 15 02 F6 | 	mov	arg02, local05
09ec4     01 14 66 F0 | 	shl	arg02, #1
09ec8     17 15 02 F1 | 	add	arg02, local05
09ecc     02 14 66 F0 | 	shl	arg02, #2
09ed0     03 00 00 FF 
09ed4     00 E4 85 F1 | 	sub	objptr, ##1536
09ed8     F2 14 02 F1 | 	add	arg02, objptr
09edc     04 14 06 F1 | 	add	arg02, #4
09ee0     0A 31 62 FC | 	wrlong	local06, arg02
09ee4     03 00 00 FF 
09ee8     00 E4 05 F1 | 	add	objptr, ##1536
09eec     F2 30 02 FB | 	rdlong	local06, objptr
09ef0     18 2F 02 F6 | 	mov	local05, local06
09ef4     01 2E 66 F0 | 	shl	local05, #1
09ef8     18 2F 02 F1 | 	add	local05, local06
09efc     02 2E 66 F0 | 	shl	local05, #2
09f00     03 00 00 FF 
09f04     00 E4 85 F1 | 	sub	objptr, ##1536
09f08     F2 2E 02 F1 | 	add	local05, objptr
09f0c     08 2E 06 F1 | 	add	local05, #8
09f10     17 27 62 FC | 	wrlong	local01, local05
09f14     03 00 00 FF 
09f18     00 E4 05 F1 | 	add	objptr, ##1536
09f1c     F2 2E 02 FB | 	rdlong	local05, objptr
09f20     01 2E 06 F1 | 	add	local05, #1
09f24     F2 2E 62 FC | 	wrlong	local05, objptr
09f28                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09f28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f28     13 00 00 FF 
09f2c     38 E4 85 F1 | 	sub	objptr, ##9784
09f30     F2 30 02 FB | 	rdlong	local06, objptr
09f34     01 30 06 F1 | 	add	local06, #1
09f38     03 30 66 F0 | 	shl	local06, #3
09f3c     02 00 00 FF 
09f40     38 E4 85 F1 | 	sub	objptr, ##1080
09f44     F2 30 02 F1 | 	add	local06, objptr
09f48     18 13 02 FB | 	rdlong	arg01, local06
09f4c     35 00 00 FF 
09f50     0C E4 85 F1 | 	sub	objptr, ##27148
09f54                 | ' 
09f54                 | ' select case s
09f54     B6 01 00 FF 
09f58     B2 15 06 F6 | 	mov	arg02, ##@LR__5599
09f5c     34 D1 B1 FD | 	call	#__system___string_cmp
09f60     00 FA 0D F2 | 	cmp	result1, #0 wz
09f64     1B FA 05 A6 |  if_e	mov	result1, #27
09f68     00 FA 05 56 |  if_ne	mov	result1, #0
09f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f70     10 00 90 AD |  if_e	jmp	#LR__0870
09f74     05 12 06 F6 | 	mov	arg01, #5
09f78     00 E3 BF FD | 	call	#_compile_immediate_assign
09f7c     FD 32 02 F6 | 	mov	local07, result1
09f80     10 00 90 FD | 	jmp	#LR__0871
09f84                 | LR__0870
09f84     05 12 06 F6 | 	mov	arg01, #5
09f88     16 15 02 F6 | 	mov	arg02, local04
09f8c     14 D9 BF FD | 	call	#_compile_immediate
09f90     FD 32 02 F6 | 	mov	local07, result1
09f94                 | LR__0871
09f94                 | ' return err
09f94     19 FB 01 F6 | 	mov	result1, local07
09f98     A7 F0 03 F6 | 	mov	ptra, fp
09f9c     B2 00 A0 FD | 	call	#popregs_
09fa0                 | _compile_else_ret
09fa0     2D 00 64 FD | 	ret
09fa4                 | 
09fa4                 | ' 
09fa4                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09fa4                 | ' 
09fa4                 | ' function compile_dim() as ulong  
09fa4                 | _compile_dim
09fa4     11 4A 05 F6 | 	mov	COUNT_, #17
09fa8     A8 00 A0 FD | 	call	#pushregs_
09fac     01 26 06 F6 | 	mov	local01, #1
09fb0     01 28 06 F6 | 	mov	local02, #1
09fb4     01 2A 06 F6 | 	mov	local03, #1
09fb8                 | ' 
09fb8                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09fb8                 | ' if isname(lparts(ct).part$) then 
09fb8     37 00 00 FF 
09fbc     44 E4 05 F1 | 	add	objptr, ##28228
09fc0     F2 18 02 FB | 	rdlong	arg04, objptr
09fc4     03 18 66 F0 | 	shl	arg04, #3
09fc8     02 00 00 FF 
09fcc     38 E4 85 F1 | 	sub	objptr, ##1080
09fd0     F2 18 02 F1 | 	add	arg04, objptr
09fd4     0C 13 02 FB | 	rdlong	arg01, arg04
09fd8     35 00 00 FF 
09fdc     0C E4 85 F1 | 	sub	objptr, ##27148
09fe0     18 C7 BF FD | 	call	#_isname
09fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
09fe8     78 05 90 AD |  if_e	jmp	#LR__0903
09fec     37 00 00 FF 
09ff0     44 E4 05 F1 | 	add	objptr, ##28228
09ff4     F2 2C 02 FB | 	rdlong	local04, objptr
09ff8     03 2C 66 F0 | 	shl	local04, #3
09ffc     02 00 00 FF 
0a000     38 E4 85 F1 | 	sub	objptr, ##1080
0a004     F2 2C 02 F1 | 	add	local04, objptr
0a008     16 2F 02 FB | 	rdlong	local05, local04
0a00c     01 30 66 F6 | 	neg	local06, #1
0a010                 | '   varname2$=lparts(ct).part$ 
0a010                 | '   j=-1
0a010                 | '   if varnum>0 then
0a010     04 E4 85 F1 | 	sub	objptr, #4
0a014     F2 32 02 FB | 	rdlong	local07, objptr
0a018     35 00 00 FF 
0a01c     08 E4 85 F1 | 	sub	objptr, ##27144
0a020     01 32 56 F2 | 	cmps	local07, #1 wc
0a024     58 00 90 CD |  if_b	jmp	#LR__0882
0a028                 | '     for i=0 to varnum-1
0a028     00 34 06 F6 | 	mov	local08, #0
0a02c     35 00 00 FF 
0a030     08 E4 05 F1 | 	add	objptr, ##27144
0a034     F2 36 02 FB | 	rdlong	local09, objptr
0a038     35 00 00 FF 
0a03c     08 E4 85 F1 | 	sub	objptr, ##27144
0a040                 | LR__0880
0a040     1B 35 52 F2 | 	cmps	local08, local09 wc
0a044     38 00 90 3D |  if_ae	jmp	#LR__0881
0a048                 | '       if variables(i).name=varname2$ then j=i : exit
0a048     1A 2D 02 F6 | 	mov	local04, local08
0a04c     04 2C 66 F0 | 	shl	local04, #4
0a050     14 00 00 FF 
0a054     F8 E5 05 F1 | 	add	objptr, ##10744
0a058     F2 2C 02 F1 | 	add	local04, objptr
0a05c     16 13 02 FB | 	rdlong	arg01, local04
0a060     17 15 02 F6 | 	mov	arg02, local05
0a064     14 00 00 FF 
0a068     F8 E5 85 F1 | 	sub	objptr, ##10744
0a06c     24 D0 B1 FD | 	call	#__system___string_cmp
0a070     00 FA 0D F2 | 	cmp	result1, #0 wz
0a074     1A 31 02 A6 |  if_e	mov	local06, local08
0a078     01 34 06 51 |  if_ne	add	local08, #1
0a07c     C0 FF 9F 5D |  if_ne	jmp	#LR__0880
0a080                 | LR__0881
0a080                 | LR__0882
0a080                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a080     FF FF 7F FF 
0a084     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0a088     35 00 00 AF 
0a08c     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a090     F2 30 02 AB |  if_e	rdlong	local06, objptr
0a094     35 00 00 AF 
0a098     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a09c     78 00 90 AD |  if_e	jmp	#LR__0883
0a0a0     00 12 06 F6 | 	mov	arg01, #0
0a0a4     EC 2C B2 FD | 	call	#__system___getiolock_0616
0a0a8     FD 12 02 F6 | 	mov	arg01, result1
0a0ac     BC CF B1 FD | 	call	#__system___lockmem
0a0b0     B9 01 00 FF 
0a0b4     7E 14 06 F6 | 	mov	arg02, ##@LR__5862
0a0b8     00 12 06 F6 | 	mov	arg01, #0
0a0bc     00 16 06 F6 | 	mov	arg03, #0
0a0c0     9C DC B1 FD | 	call	#__system___basic_print_string
0a0c4     52 00 00 FF 
0a0c8     B0 E4 05 F1 | 	add	objptr, ##42160
0a0cc     F2 14 02 FB | 	rdlong	arg02, objptr
0a0d0     52 00 00 FF 
0a0d4     B0 E4 85 F1 | 	sub	objptr, ##42160
0a0d8     00 12 06 F6 | 	mov	arg01, #0
0a0dc     00 16 06 F6 | 	mov	arg03, #0
0a0e0     0A 18 06 F6 | 	mov	arg04, #10
0a0e4     FC DC B1 FD | 	call	#__system___basic_print_unsigned
0a0e8     B9 01 00 FF 
0a0ec     8C 14 06 F6 | 	mov	arg02, ##@LR__5863
0a0f0     00 12 06 F6 | 	mov	arg01, #0
0a0f4     00 16 06 F6 | 	mov	arg03, #0
0a0f8     64 DC B1 FD | 	call	#__system___basic_print_string
0a0fc     00 12 06 F6 | 	mov	arg01, #0
0a100     0A 14 06 F6 | 	mov	arg02, #10
0a104     00 16 06 F6 | 	mov	arg03, #0
0a108     FC DB B1 FD | 	call	#__system___basic_print_char
0a10c     00 12 06 F6 | 	mov	arg01, #0
0a110     80 2C B2 FD | 	call	#__system___getiolock_0616
0a114     FD 00 68 FC | 	wrlong	#0, result1
0a118                 | LR__0883
0a118                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a118     37 00 00 FF 
0a11c     44 E4 05 F1 | 	add	objptr, ##28228
0a120     F2 14 02 FB | 	rdlong	arg02, objptr
0a124     01 14 06 F1 | 	add	arg02, #1
0a128     03 14 66 F0 | 	shl	arg02, #3
0a12c     02 00 00 FF 
0a130     38 E4 85 F1 | 	sub	objptr, ##1080
0a134     F2 14 02 F1 | 	add	arg02, objptr
0a138     0A 13 02 FB | 	rdlong	arg01, arg02
0a13c     B9 01 00 FF 
0a140     AD 14 06 F6 | 	mov	arg02, ##@LR__5864
0a144     35 00 00 FF 
0a148     0C E4 85 F1 | 	sub	objptr, ##27148
0a14c     44 CF B1 FD | 	call	#__system___string_cmp
0a150     00 FA 0D F2 | 	cmp	result1, #0 wz
0a154     44 00 90 AD |  if_e	jmp	#LR__0884
0a158     37 00 00 FF 
0a15c     44 E4 05 F1 | 	add	objptr, ##28228
0a160     F2 36 02 FB | 	rdlong	local09, objptr
0a164     01 36 06 F1 | 	add	local09, #1
0a168     03 36 66 F0 | 	shl	local09, #3
0a16c     02 00 00 FF 
0a170     38 E4 85 F1 | 	sub	objptr, ##1080
0a174     F2 36 02 F1 | 	add	local09, objptr
0a178     1B 13 02 FB | 	rdlong	arg01, local09
0a17c     B9 01 00 FF 
0a180     AF 14 06 F6 | 	mov	arg02, ##@LR__5865
0a184     35 00 00 FF 
0a188     0C E4 85 F1 | 	sub	objptr, ##27148
0a18c     04 CF B1 FD | 	call	#__system___string_cmp
0a190     00 FA 0D F2 | 	cmp	result1, #0 wz
0a194     2B FA 05 56 |  if_ne	mov	result1, #43
0a198     D0 04 90 5D |  if_ne	jmp	#LR__0905
0a19c                 | LR__0884
0a19c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a19c     37 00 00 FF 
0a1a0     44 E4 05 F1 | 	add	objptr, ##28228
0a1a4     F2 14 02 FB | 	rdlong	arg02, objptr
0a1a8     01 14 06 F1 | 	add	arg02, #1
0a1ac     03 14 66 F0 | 	shl	arg02, #3
0a1b0     02 00 00 FF 
0a1b4     38 E4 85 F1 | 	sub	objptr, ##1080
0a1b8     F2 14 02 F1 | 	add	arg02, objptr
0a1bc     0A 13 02 FB | 	rdlong	arg01, arg02
0a1c0     B9 01 00 FF 
0a1c4     B2 14 06 F6 | 	mov	arg02, ##@LR__5866
0a1c8     35 00 00 FF 
0a1cc     0C E4 85 F1 | 	sub	objptr, ##27148
0a1d0     C0 CE B1 FD | 	call	#__system___string_cmp
0a1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1d8     37 00 00 AF 
0a1dc     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a1e0     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a1e4     37 00 00 AF 
0a1e8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a1ec     01 38 06 A1 |  if_e	add	local10, #1
0a1f0     5C 01 90 AD |  if_e	jmp	#LR__0889
0a1f4     37 00 00 FF 
0a1f8     44 E4 05 F1 | 	add	objptr, ##28228
0a1fc     F2 38 02 FB | 	rdlong	local10, objptr
0a200     37 00 00 FF 
0a204     44 E4 85 F1 | 	sub	objptr, ##28228
0a208     02 38 06 F1 | 	add	local10, #2
0a20c     00 3A 06 F6 | 	mov	local11, #0
0a210                 | '   l=ct+2 : m=0 : do
0a210                 | LR__0885
0a210                 | '   if isdec(lparts(l).part$) then 
0a210     1C 2D 02 F6 | 	mov	local04, local10
0a214     03 2C 66 F0 | 	shl	local04, #3
0a218     35 00 00 FF 
0a21c     0C E4 05 F1 | 	add	objptr, ##27148
0a220     F2 2C 02 F1 | 	add	local04, objptr
0a224     16 13 02 FB | 	rdlong	arg01, local04
0a228     35 00 00 FF 
0a22c     0C E4 85 F1 | 	sub	objptr, ##27148
0a230     CC CD BF FD | 	call	#_isdec
0a234     00 FA 0D F2 | 	cmp	result1, #0 wz
0a238     44 00 90 AD |  if_e	jmp	#LR__0886
0a23c     1D 3D 02 F6 | 	mov	local12, local11
0a240     13 3D 06 F1 | 	add	local12, #local01
0a244     1C 37 02 F6 | 	mov	local09, local10
0a248     03 36 66 F0 | 	shl	local09, #3
0a24c     35 00 00 FF 
0a250     0C E4 05 F1 | 	add	objptr, ##27148
0a254     F2 36 02 F1 | 	add	local09, objptr
0a258     1B 13 02 FB | 	rdlong	arg01, local09
0a25c     00 14 06 F6 | 	mov	arg02, #0
0a260     35 00 00 FF 
0a264     0C E4 85 F1 | 	sub	objptr, ##27148
0a268     F0 02 B2 FD | 	call	#__system____builtin_atoi
0a26c     FD 3E 02 F6 | 	mov	local13, result1
0a270                 | 	'.live	local13
0a270                 | 	'.live	local12
0a270     00 3C 8E F9 | 	altd	local12, #0
0a274     1F 3D 02 F6 | 	mov	local12, local13
0a278     01 3A 06 F1 | 	add	local11, #1
0a27c     08 00 90 FD | 	jmp	#LR__0887
0a280                 | LR__0886
0a280                 | '     return(17)
0a280     11 FA 05 F6 | 	mov	result1, #17
0a284     E4 03 90 FD | 	jmp	#LR__0905
0a288                 | LR__0887
0a288                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a288     1C 2D 02 F6 | 	mov	local04, local10
0a28c     01 2C 06 F1 | 	add	local04, #1
0a290     03 2C 66 F0 | 	shl	local04, #3
0a294     35 00 00 FF 
0a298     0C E4 05 F1 | 	add	objptr, ##27148
0a29c     F2 2C 02 F1 | 	add	local04, objptr
0a2a0     16 13 02 FB | 	rdlong	arg01, local04
0a2a4     B9 01 00 FF 
0a2a8     B5 14 06 F6 | 	mov	arg02, ##@LR__5867
0a2ac     35 00 00 FF 
0a2b0     0C E4 85 F1 | 	sub	objptr, ##27148
0a2b4     DC CD B1 FD | 	call	#__system___string_cmp
0a2b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2bc     3C 00 90 AD |  if_e	jmp	#LR__0888
0a2c0     1C 3F 02 F6 | 	mov	local13, local10
0a2c4     01 3E 06 F1 | 	add	local13, #1
0a2c8     03 3E 66 F0 | 	shl	local13, #3
0a2cc     35 00 00 FF 
0a2d0     0C E4 05 F1 | 	add	objptr, ##27148
0a2d4     F2 3E 02 F1 | 	add	local13, objptr
0a2d8     1F 13 02 FB | 	rdlong	arg01, local13
0a2dc     B9 01 00 FF 
0a2e0     B7 14 06 F6 | 	mov	arg02, ##@LR__5868
0a2e4     35 00 00 FF 
0a2e8     0C E4 85 F1 | 	sub	objptr, ##27148
0a2ec     A4 CD B1 FD | 	call	#__system___string_cmp
0a2f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f4     2C FA 05 56 |  if_ne	mov	result1, #44
0a2f8     70 03 90 5D |  if_ne	jmp	#LR__0905
0a2fc                 | LR__0888
0a2fc     02 38 06 F1 | 	add	local10, #2
0a300     1C 2D 02 F6 | 	mov	local04, local10
0a304     01 2C 86 F1 | 	sub	local04, #1
0a308     03 2C 66 F0 | 	shl	local04, #3
0a30c     35 00 00 FF 
0a310     0C E4 05 F1 | 	add	objptr, ##27148
0a314     F2 2C 02 F1 | 	add	local04, objptr
0a318     16 13 02 FB | 	rdlong	arg01, local04
0a31c     B9 01 00 FF 
0a320     B9 14 06 F6 | 	mov	arg02, ##@LR__5869
0a324     35 00 00 FF 
0a328     0C E4 85 F1 | 	sub	objptr, ##27148
0a32c     64 CD B1 FD | 	call	#__system___string_cmp
0a330     00 FA 0D F2 | 	cmp	result1, #0 wz
0a334     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a338     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0885
0a33c                 | '   if m>3 then return 45
0a33c     04 3A 56 F2 | 	cmps	local11, #4 wc
0a340     2D FA 05 36 |  if_ae	mov	result1, #45
0a344     24 03 90 3D |  if_ae	jmp	#LR__0905
0a348     00 41 06 F6 | 	mov	local14, #256
0a34c     0C 42 06 F6 | 	mov	local15, #12
0a350                 | LR__0889
0a350                 | '   arraytype=array_no_type : esize=12
0a350                 | ' 1350 
0a350                 | '   if lparts(l).part$="as" then
0a350     1C 2D 02 F6 | 	mov	local04, local10
0a354     03 2C 66 F0 | 	shl	local04, #3
0a358     35 00 00 FF 
0a35c     0C E4 05 F1 | 	add	objptr, ##27148
0a360     F2 2C 02 F1 | 	add	local04, objptr
0a364     16 13 02 FB | 	rdlong	arg01, local04
0a368     B9 01 00 FF 
0a36c     BB 14 06 F6 | 	mov	arg02, ##@LR__5870
0a370     35 00 00 FF 
0a374     0C E4 85 F1 | 	sub	objptr, ##27148
0a378     18 CD B1 FD | 	call	#__system___string_cmp
0a37c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a380     E8 01 90 5D |  if_ne	jmp	#LR__0904
0a384                 | '     select case lparts(l+1).part$
0a384     1C 3D 02 F6 | 	mov	local12, local10
0a388     01 3C 06 F1 | 	add	local12, #1
0a38c     03 3C 66 F0 | 	shl	local12, #3
0a390     35 00 00 FF 
0a394     0C E4 05 F1 | 	add	objptr, ##27148
0a398     F2 3C 02 F1 | 	add	local12, objptr
0a39c     1E 45 02 FB | 	rdlong	local16, local12
0a3a0     B9 01 00 FF 
0a3a4     BE 14 06 F6 | 	mov	arg02, ##@LR__5871
0a3a8     22 13 02 F6 | 	mov	arg01, local16
0a3ac     35 00 00 FF 
0a3b0     0C E4 85 F1 | 	sub	objptr, ##27148
0a3b4     DC CC B1 FD | 	call	#__system___string_cmp
0a3b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3bc     0C 01 90 AD |  if_e	jmp	#LR__0890
0a3c0     B9 01 00 FF 
0a3c4     C3 14 06 F6 | 	mov	arg02, ##@LR__5872
0a3c8     22 13 02 F6 | 	mov	arg01, local16
0a3cc     C4 CC B1 FD | 	call	#__system___string_cmp
0a3d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3d4     00 01 90 AD |  if_e	jmp	#LR__0891
0a3d8     B9 01 00 FF 
0a3dc     C9 14 06 F6 | 	mov	arg02, ##@LR__5873
0a3e0     22 13 02 F6 | 	mov	arg01, local16
0a3e4     AC CC B1 FD | 	call	#__system___string_cmp
0a3e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3ec     F4 00 90 AD |  if_e	jmp	#LR__0892
0a3f0     B9 01 00 FF 
0a3f4     CF 14 06 F6 | 	mov	arg02, ##@LR__5874
0a3f8     22 13 02 F6 | 	mov	arg01, local16
0a3fc     94 CC B1 FD | 	call	#__system___string_cmp
0a400     00 FA 0D F2 | 	cmp	result1, #0 wz
0a404     E8 00 90 AD |  if_e	jmp	#LR__0893
0a408     B9 01 00 FF 
0a40c     D6 14 06 F6 | 	mov	arg02, ##@LR__5875
0a410     22 13 02 F6 | 	mov	arg01, local16
0a414     7C CC B1 FD | 	call	#__system___string_cmp
0a418     00 FA 0D F2 | 	cmp	result1, #0 wz
0a41c     DC 00 90 AD |  if_e	jmp	#LR__0894
0a420     B9 01 00 FF 
0a424     DB 14 06 F6 | 	mov	arg02, ##@LR__5876
0a428     22 13 02 F6 | 	mov	arg01, local16
0a42c     64 CC B1 FD | 	call	#__system___string_cmp
0a430     00 FA 0D F2 | 	cmp	result1, #0 wz
0a434     D0 00 90 AD |  if_e	jmp	#LR__0895
0a438     B9 01 00 FF 
0a43c     E3 14 06 F6 | 	mov	arg02, ##@LR__5877
0a440     22 13 02 F6 | 	mov	arg01, local16
0a444     4C CC B1 FD | 	call	#__system___string_cmp
0a448     00 FA 0D F2 | 	cmp	result1, #0 wz
0a44c     C4 00 90 AD |  if_e	jmp	#LR__0896
0a450     B9 01 00 FF 
0a454     E9 14 06 F6 | 	mov	arg02, ##@LR__5878
0a458     22 13 02 F6 | 	mov	arg01, local16
0a45c     34 CC B1 FD | 	call	#__system___string_cmp
0a460     00 FA 0D F2 | 	cmp	result1, #0 wz
0a464     B8 00 90 AD |  if_e	jmp	#LR__0897
0a468     B9 01 00 FF 
0a46c     EF 14 06 F6 | 	mov	arg02, ##@LR__5879
0a470     22 13 02 F6 | 	mov	arg01, local16
0a474     1C CC B1 FD | 	call	#__system___string_cmp
0a478     00 FA 0D F2 | 	cmp	result1, #0 wz
0a47c     AC 00 90 AD |  if_e	jmp	#LR__0898
0a480     B9 01 00 FF 
0a484     F6 14 06 F6 | 	mov	arg02, ##@LR__5880
0a488     22 13 02 F6 | 	mov	arg01, local16
0a48c     04 CC B1 FD | 	call	#__system___string_cmp
0a490     00 FA 0D F2 | 	cmp	result1, #0 wz
0a494     A0 00 90 AD |  if_e	jmp	#LR__0899
0a498     B9 01 00 FF 
0a49c     FD 14 06 F6 | 	mov	arg02, ##@LR__5881
0a4a0     22 13 02 F6 | 	mov	arg01, local16
0a4a4     EC CB B1 FD | 	call	#__system___string_cmp
0a4a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4ac     94 00 90 AD |  if_e	jmp	#LR__0900
0a4b0     B9 01 00 FF 
0a4b4     04 15 06 F6 | 	mov	arg02, ##@LR__5882
0a4b8     22 13 02 F6 | 	mov	arg01, local16
0a4bc     D4 CB B1 FD | 	call	#__system___string_cmp
0a4c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4c4     88 00 90 AD |  if_e	jmp	#LR__0901
0a4c8     90 00 90 FD | 	jmp	#LR__0902
0a4cc                 | LR__0890
0a4cc     01 41 06 F6 | 	mov	local14, #257
0a4d0     01 42 06 F6 | 	mov	local15, #1
0a4d4     94 00 90 FD | 	jmp	#LR__0904
0a4d8                 | LR__0891
0a4d8     02 41 06 F6 | 	mov	local14, #258
0a4dc     01 42 06 F6 | 	mov	local15, #1
0a4e0     88 00 90 FD | 	jmp	#LR__0904
0a4e4                 | LR__0892
0a4e4     03 41 06 F6 | 	mov	local14, #259
0a4e8     02 42 06 F6 | 	mov	local15, #2
0a4ec     7C 00 90 FD | 	jmp	#LR__0904
0a4f0                 | LR__0893
0a4f0     04 41 06 F6 | 	mov	local14, #260
0a4f4     02 42 06 F6 | 	mov	local15, #2
0a4f8     70 00 90 FD | 	jmp	#LR__0904
0a4fc                 | LR__0894
0a4fc     05 41 06 F6 | 	mov	local14, #261
0a500     04 42 06 F6 | 	mov	local15, #4
0a504     64 00 90 FD | 	jmp	#LR__0904
0a508                 | LR__0895
0a508     05 41 06 F6 | 	mov	local14, #261
0a50c     04 42 06 F6 | 	mov	local15, #4
0a510     58 00 90 FD | 	jmp	#LR__0904
0a514                 | LR__0896
0a514     06 41 06 F6 | 	mov	local14, #262
0a518     04 42 06 F6 | 	mov	local15, #4
0a51c     4C 00 90 FD | 	jmp	#LR__0904
0a520                 | LR__0897
0a520     07 41 06 F6 | 	mov	local14, #263
0a524     08 42 06 F6 | 	mov	local15, #8
0a528     40 00 90 FD | 	jmp	#LR__0904
0a52c                 | LR__0898
0a52c     08 41 06 F6 | 	mov	local14, #264
0a530     08 42 06 F6 | 	mov	local15, #8
0a534     34 00 90 FD | 	jmp	#LR__0904
0a538                 | LR__0899
0a538     09 41 06 F6 | 	mov	local14, #265
0a53c     04 42 06 F6 | 	mov	local15, #4
0a540     28 00 90 FD | 	jmp	#LR__0904
0a544                 | LR__0900
0a544     0A 41 06 F6 | 	mov	local14, #266
0a548     08 42 06 F6 | 	mov	local15, #8
0a54c     1C 00 90 FD | 	jmp	#LR__0904
0a550                 | LR__0901
0a550     0B 41 06 F6 | 	mov	local14, #267
0a554     04 42 06 F6 | 	mov	local15, #4
0a558     10 00 90 FD | 	jmp	#LR__0904
0a55c                 | LR__0902
0a55c     2F FA 05 F6 | 	mov	result1, #47
0a560     08 01 90 FD | 	jmp	#LR__0905
0a564                 | LR__0903
0a564                 | '   return 46
0a564     2E FA 05 F6 | 	mov	result1, #46
0a568     00 01 90 FD | 	jmp	#LR__0905
0a56c                 | LR__0904
0a56c     13 43 02 FD | 	qmul	local15, local01
0a570     18 32 62 FD | 	getqx	local07
0a574     14 33 02 FD | 	qmul	local07, local02
0a578     18 44 62 FD | 	getqx	local16
0a57c     15 45 02 FD | 	qmul	local16, local03
0a580     52 00 00 FF 
0a584     98 E4 05 F1 | 	add	objptr, ##42136
0a588     F2 46 02 FB | 	rdlong	local17, objptr
0a58c     20 15 02 F6 | 	mov	arg02, local14
0a590     18 44 62 FD | 	getqx	local16
0a594     22 47 82 F1 | 	sub	local17, local16
0a598     10 46 86 F1 | 	sub	local17, #16
0a59c     0F 46 26 F5 | 	andn	local17, #15
0a5a0     F2 46 62 FC | 	wrlong	local17, objptr
0a5a4     52 00 00 FF 
0a5a8     98 E4 85 F1 | 	sub	objptr, ##42136
0a5ac     23 13 02 F6 | 	mov	arg01, local17
0a5b0     F4 91 B1 FD | 	call	#_psdpoke
0a5b4     23 13 02 F6 | 	mov	arg01, local17
0a5b8     02 12 06 F1 | 	add	arg01, #2
0a5bc     21 15 02 F6 | 	mov	arg02, local15
0a5c0     E4 91 B1 FD | 	call	#_psdpoke
0a5c4     23 13 02 F6 | 	mov	arg01, local17
0a5c8     04 12 06 F1 | 	add	arg01, #4
0a5cc     13 15 02 F6 | 	mov	arg02, local01
0a5d0     8C 91 B1 FD | 	call	#_pslpoke
0a5d4     23 13 02 F6 | 	mov	arg01, local17
0a5d8     08 12 06 F1 | 	add	arg01, #8
0a5dc     14 15 02 F6 | 	mov	arg02, local02
0a5e0     7C 91 B1 FD | 	call	#_pslpoke
0a5e4     23 13 02 F6 | 	mov	arg01, local17
0a5e8     0C 12 06 F1 | 	add	arg01, #12
0a5ec     15 15 02 F6 | 	mov	arg02, local03
0a5f0     6C 91 B1 FD | 	call	#_pslpoke
0a5f4     18 3D 02 F6 | 	mov	local12, local06
0a5f8     04 3C 66 F0 | 	shl	local12, #4
0a5fc     14 00 00 FF 
0a600     F8 E5 05 F1 | 	add	objptr, ##10744
0a604     F2 3C 02 F1 | 	add	local12, objptr
0a608     1E 2F 62 FC | 	wrlong	local05, local12
0a60c     18 3D 02 F6 | 	mov	local12, local06
0a610     04 3C 66 F0 | 	shl	local12, #4
0a614     F2 3C 02 F1 | 	add	local12, objptr
0a618     04 3C 06 F1 | 	add	local12, #4
0a61c     1E 47 62 FC | 	wrlong	local17, local12
0a620     18 3D 02 F6 | 	mov	local12, local06
0a624     04 3C 66 F0 | 	shl	local12, #4
0a628     F2 3C 02 F1 | 	add	local12, objptr
0a62c     0C 3C 06 F1 | 	add	local12, #12
0a630     1E 41 62 FC | 	wrlong	local14, local12
0a634                 | ' memtop=arrayptr
0a634                 | ' psdpoke arrayptr,arraytype 
0a634                 | ' psdpoke arrayptr+2,esize 
0a634                 | ' pslpoke arrayptr+4,dims(0)
0a634                 | ' pslpoke arrayptr+8,dims(1)
0a634                 | ' pslpoke arrayptr+12,dims(2)
0a634                 | ' variables(j).name=varname2$
0a634                 | ' variables(j).value.uresult=arrayptr
0a634                 | ' variables(j).vartype=arraytype
0a634                 | ' if j=varnum then varnum+=1
0a634     20 00 00 FF 
0a638     10 E4 05 F1 | 	add	objptr, ##16400
0a63c     F2 32 02 FB | 	rdlong	local07, objptr
0a640     35 00 00 FF 
0a644     08 E4 85 F1 | 	sub	objptr, ##27144
0a648     19 31 0A F2 | 	cmp	local06, local07 wz
0a64c     35 00 00 AF 
0a650     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a654     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a658     01 32 06 A1 |  if_e	add	local07, #1
0a65c     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a660     35 00 00 AF 
0a664     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a668                 | ' return 0
0a668     00 FA 05 F6 | 	mov	result1, #0
0a66c                 | LR__0905
0a66c     A7 F0 03 F6 | 	mov	ptra, fp
0a670     B2 00 A0 FD | 	call	#popregs_
0a674                 | _compile_dim_ret
0a674     2D 00 64 FD | 	ret
0a678                 | 
0a678                 | ' 
0a678                 | ' '----- compile 'for' command. 
0a678                 | ' 
0a678                 | ' function compile_for() as ulong  
0a678                 | _compile_for
0a678     0E 4A 05 F6 | 	mov	COUNT_, #14
0a67c     A8 00 A0 FD | 	call	#pushregs_
0a680                 | ' 
0a680                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a680     37 00 00 FF 
0a684     44 E4 05 F1 | 	add	objptr, ##28228
0a688     F2 14 02 FB | 	rdlong	arg02, objptr
0a68c     01 14 06 F1 | 	add	arg02, #1
0a690     03 14 66 F0 | 	shl	arg02, #3
0a694     02 00 00 FF 
0a698     38 E4 85 F1 | 	sub	objptr, ##1080
0a69c     F2 14 02 F1 | 	add	arg02, objptr
0a6a0     0A 13 02 FB | 	rdlong	arg01, arg02
0a6a4     35 00 00 FF 
0a6a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a6ac                 | ' 
0a6ac                 | ' select case s
0a6ac     B6 01 00 FF 
0a6b0     B2 15 06 F6 | 	mov	arg02, ##@LR__5599
0a6b4     DC C9 B1 FD | 	call	#__system___string_cmp
0a6b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6bc     1B FA 05 A6 |  if_e	mov	result1, #27
0a6c0     00 FA 05 56 |  if_ne	mov	result1, #0
0a6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6c8     0C 00 90 AD |  if_e	jmp	#LR__0910
0a6cc     05 12 06 F6 | 	mov	arg01, #5
0a6d0     A8 DB BF FD | 	call	#_compile_immediate_assign
0a6d4     08 00 90 FD | 	jmp	#LR__0911
0a6d8                 | LR__0910
0a6d8     20 FA 05 F6 | 	mov	result1, #32
0a6dc     58 08 90 FD | 	jmp	#LR__0927
0a6e0                 | LR__0911
0a6e0     4A 00 00 FF 
0a6e4     7C E4 05 F1 | 	add	objptr, ##38012
0a6e8     F2 14 02 FB | 	rdlong	arg02, objptr
0a6ec     0A 13 02 F6 | 	mov	arg01, arg02
0a6f0     01 12 86 F1 | 	sub	arg01, #1
0a6f4     09 2D 02 F6 | 	mov	local04, arg01
0a6f8     01 2C 66 F0 | 	shl	local04, #1
0a6fc     09 2D 02 F1 | 	add	local04, arg01
0a700     02 2C 66 F0 | 	shl	local04, #2
0a704     03 00 00 FF 
0a708     00 E4 85 F1 | 	sub	objptr, ##1536
0a70c     F2 2C 02 F1 | 	add	local04, objptr
0a710     16 27 02 FB | 	rdlong	local01, local04
0a714     04 2C 06 F1 | 	add	local04, #4
0a718     16 2F 02 FB | 	rdlong	local05, local04
0a71c     01 14 86 F1 | 	sub	arg02, #1
0a720     0A 2D 02 F6 | 	mov	local04, arg02
0a724     01 2C 66 F0 | 	shl	local04, #1
0a728     0A 2D 02 F1 | 	add	local04, arg02
0a72c     02 2C 66 F0 | 	shl	local04, #2
0a730     F2 30 02 F6 | 	mov	local06, objptr
0a734     F2 2C 02 F1 | 	add	local04, objptr
0a738     08 2C 06 F1 | 	add	local04, #8
0a73c     16 2D 02 FB | 	rdlong	local04, local04
0a740     17 29 02 F6 | 	mov	local02, local05
0a744     16 2B 02 F6 | 	mov	local03, local04
0a748                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a748     17 2A 0E F2 | 	cmp	local03, #23 wz
0a74c     47 00 00 FF 
0a750     7C E4 85 F1 | 	sub	objptr, ##36476
0a754     22 FA 05 56 |  if_ne	mov	result1, #34
0a758     DC 07 90 5D |  if_ne	jmp	#LR__0927
0a75c     13 33 02 F6 | 	mov	local07, local01
0a760                 | ' varnum=t1.result.uresult
0a760                 | ' if lparts(ct).part$<>"to" then return 33
0a760     37 00 00 FF 
0a764     44 E4 05 F1 | 	add	objptr, ##28228
0a768     F2 2C 02 FB | 	rdlong	local04, objptr
0a76c     03 2C 66 F0 | 	shl	local04, #3
0a770     02 00 00 FF 
0a774     38 E4 85 F1 | 	sub	objptr, ##1080
0a778     F2 2C 02 F1 | 	add	local04, objptr
0a77c     16 13 02 FB | 	rdlong	arg01, local04
0a780     B9 01 00 FF 
0a784     0B 15 06 F6 | 	mov	arg02, ##@LR__5883
0a788     35 00 00 FF 
0a78c     0C E4 85 F1 | 	sub	objptr, ##27148
0a790     00 C9 B1 FD | 	call	#__system___string_cmp
0a794     00 FA 0D F2 | 	cmp	result1, #0 wz
0a798     21 FA 05 56 |  if_ne	mov	result1, #33
0a79c     98 07 90 5D |  if_ne	jmp	#LR__0927
0a7a0     37 00 00 FF 
0a7a4     44 E4 05 F1 | 	add	objptr, ##28228
0a7a8     F2 34 02 FB | 	rdlong	local08, objptr
0a7ac     01 34 06 F1 | 	add	local08, #1
0a7b0     F2 34 62 FC | 	wrlong	local08, objptr
0a7b4     37 00 00 FF 
0a7b8     44 E4 85 F1 | 	sub	objptr, ##28228
0a7bc     2C 17 B0 FD | 	call	#_expr
0a7c0                 | ' ct+=1
0a7c0                 | ' expr()  										' there is "to" value pushed on the stack
0a7c0                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a7c0     37 00 00 FF 
0a7c4     44 E4 05 F1 | 	add	objptr, ##28228
0a7c8     F2 2C 02 FB | 	rdlong	local04, objptr
0a7cc     03 2C 66 F0 | 	shl	local04, #3
0a7d0     02 00 00 FF 
0a7d4     38 E4 85 F1 | 	sub	objptr, ##1080
0a7d8     F2 2C 02 F1 | 	add	local04, objptr
0a7dc     16 13 02 FB | 	rdlong	arg01, local04
0a7e0     B9 01 00 FF 
0a7e4     0E 15 06 F6 | 	mov	arg02, ##@LR__5884
0a7e8     35 00 00 FF 
0a7ec     0C E4 85 F1 | 	sub	objptr, ##27148
0a7f0     A0 C8 B1 FD | 	call	#__system___string_cmp
0a7f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7f8     48 00 90 AD |  if_e	jmp	#LR__0912
0a7fc     37 00 00 FF 
0a800     44 E4 05 F1 | 	add	objptr, ##28228
0a804     F2 2C 02 FB | 	rdlong	local04, objptr
0a808     03 2C 66 F0 | 	shl	local04, #3
0a80c     02 00 00 FF 
0a810     38 E4 85 F1 | 	sub	objptr, ##1080
0a814     F2 2C 02 F1 | 	add	local04, objptr
0a818     16 13 02 FB | 	rdlong	arg01, local04
0a81c     02 14 06 F6 | 	mov	arg02, #2
0a820     35 00 00 FF 
0a824     0C E4 85 F1 | 	sub	objptr, ##27148
0a828     BC E8 B1 FD | 	call	#__system__Left_S
0a82c     FD 12 02 F6 | 	mov	arg01, result1
0a830     B9 01 00 FF 
0a834     13 15 06 F6 | 	mov	arg02, ##@LR__5885
0a838     58 C8 B1 FD | 	call	#__system___string_cmp
0a83c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a840     9C 05 90 5D |  if_ne	jmp	#LR__0925
0a844                 | LR__0912
0a844                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a844     37 00 00 FF 
0a848     44 E4 05 F1 | 	add	objptr, ##28228
0a84c     F2 2C 02 FB | 	rdlong	local04, objptr
0a850     03 2C 66 F0 | 	shl	local04, #3
0a854     02 00 00 FF 
0a858     38 E4 85 F1 | 	sub	objptr, ##1080
0a85c     F2 2C 02 F1 | 	add	local04, objptr
0a860     16 13 02 FB | 	rdlong	arg01, local04
0a864     02 14 06 F6 | 	mov	arg02, #2
0a868     35 00 00 FF 
0a86c     0C E4 85 F1 | 	sub	objptr, ##27148
0a870     74 E8 B1 FD | 	call	#__system__Left_S
0a874     FD 12 02 F6 | 	mov	arg01, result1
0a878     B9 01 00 FF 
0a87c     16 15 06 F6 | 	mov	arg02, ##@LR__5886
0a880     10 C8 B1 FD | 	call	#__system___string_cmp
0a884     00 FA 0D F2 | 	cmp	result1, #0 wz
0a888     30 05 90 5D |  if_ne	jmp	#LR__0924
0a88c     37 00 00 FF 
0a890     44 E4 05 F1 | 	add	objptr, ##28228
0a894     F2 2C 02 FB | 	rdlong	local04, objptr
0a898     03 2C 66 F0 | 	shl	local04, #3
0a89c     02 00 00 FF 
0a8a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a8a4     F2 2C 02 F1 | 	add	local04, objptr
0a8a8     16 13 02 FB | 	rdlong	arg01, local04
0a8ac     35 00 00 FF 
0a8b0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8b4     09 37 02 F6 | 	mov	local09, arg01
0a8b8     97 06 48 FB | 	callpa	#(@LR__0914-@LR__0913)>>2,fcache_load_ptr_
0a8bc                 | LR__0913
0a8bc     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a8c0     01 36 06 51 |  if_ne	add	local09, #1
0a8c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0913
0a8c8                 | LR__0914
0a8c8     09 37 82 F1 | 	sub	local09, arg01
0a8cc     03 36 56 F2 | 	cmps	local09, #3 wc
0a8d0     E8 04 90 CD |  if_b	jmp	#LR__0924
0a8d4     37 00 00 FF 
0a8d8     44 E4 05 F1 | 	add	objptr, ##28228
0a8dc     F2 2C 02 FB | 	rdlong	local04, objptr
0a8e0     16 39 02 F6 | 	mov	local10, local04
0a8e4     03 38 66 F0 | 	shl	local10, #3
0a8e8     02 00 00 FF 
0a8ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a8f0     F2 38 02 F1 | 	add	local10, objptr
0a8f4     03 2C 66 F0 | 	shl	local04, #3
0a8f8     F2 2C 02 F1 | 	add	local04, objptr
0a8fc     16 2D 02 FB | 	rdlong	local04, local04
0a900     02 00 00 FF 
0a904     38 E4 05 F1 | 	add	objptr, ##1080
0a908     F2 12 02 FB | 	rdlong	arg01, objptr
0a90c     03 12 66 F0 | 	shl	arg01, #3
0a910     02 00 00 FF 
0a914     38 E4 85 F1 | 	sub	objptr, ##1080
0a918     F2 12 02 F1 | 	add	arg01, objptr
0a91c     09 13 02 FB | 	rdlong	arg01, arg01
0a920     35 00 00 FF 
0a924     0C E4 85 F1 | 	sub	objptr, ##27148
0a928     09 37 02 F6 | 	mov	local09, arg01
0a92c     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0a930                 | LR__0915
0a930     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a934     01 36 06 51 |  if_ne	add	local09, #1
0a938     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0a93c                 | LR__0916
0a93c     09 37 82 F1 | 	sub	local09, arg01
0a940     1B 15 02 F6 | 	mov	arg02, local09
0a944     02 14 86 F1 | 	sub	arg02, #2
0a948     16 13 02 F6 | 	mov	arg01, local04
0a94c     20 E8 B1 FD | 	call	#__system__Right_S
0a950     1C FB 61 FC | 	wrlong	result1, local10
0a954     37 00 00 FF 
0a958     44 E4 05 F1 | 	add	objptr, ##28228
0a95c     F2 2C 02 FB | 	rdlong	local04, objptr
0a960     16 39 02 F6 | 	mov	local10, local04
0a964     03 38 66 F0 | 	shl	local10, #3
0a968     02 00 00 FF 
0a96c     38 E4 85 F1 | 	sub	objptr, ##1080
0a970     F2 38 02 F1 | 	add	local10, objptr
0a974     03 2C 66 F0 | 	shl	local04, #3
0a978     F2 2C 02 F1 | 	add	local04, objptr
0a97c     16 13 02 FB | 	rdlong	arg01, local04
0a980     35 00 00 FF 
0a984     0C E4 85 F1 | 	sub	objptr, ##27148
0a988     F0 B5 BF FD | 	call	#_isfunction
0a98c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a990     04 38 06 F1 | 	add	local10, #4
0a994     1C FB 61 FC | 	wrlong	result1, local10
0a998                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a998     37 00 00 FF 
0a99c     44 E4 05 F1 | 	add	objptr, ##28228
0a9a0     F2 38 02 FB | 	rdlong	local10, objptr
0a9a4     03 38 66 F0 | 	shl	local10, #3
0a9a8     02 00 00 FF 
0a9ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a9b0     F2 38 02 F1 | 	add	local10, objptr
0a9b4     04 38 06 F1 | 	add	local10, #4
0a9b8     1C 2D 02 FB | 	rdlong	local04, local10
0a9bc     01 2C 56 F2 | 	cmps	local04, #1 wc
0a9c0     35 00 00 FF 
0a9c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a9c8     D4 03 90 3D |  if_ae	jmp	#LR__0923
0a9cc     37 00 00 FF 
0a9d0     44 E4 05 F1 | 	add	objptr, ##28228
0a9d4     F2 2C 02 FB | 	rdlong	local04, objptr
0a9d8     16 39 02 F6 | 	mov	local10, local04
0a9dc     03 38 66 F0 | 	shl	local10, #3
0a9e0     02 00 00 FF 
0a9e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a9e8     F2 38 02 F1 | 	add	local10, objptr
0a9ec     03 2C 66 F0 | 	shl	local04, #3
0a9f0     F2 2C 02 F1 | 	add	local04, objptr
0a9f4     16 13 02 FB | 	rdlong	arg01, local04
0a9f8     35 00 00 FF 
0a9fc     0C E4 85 F1 | 	sub	objptr, ##27148
0aa00     CC 9E BF FD | 	call	#_isnotename
0aa04     04 38 06 F1 | 	add	local10, #4
0aa08     1C FB 61 FC | 	wrlong	result1, local10
0aa0c                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aa0c                 | '     if lparts(ct).token>0 then 
0aa0c     37 00 00 FF 
0aa10     44 E4 05 F1 | 	add	objptr, ##28228
0aa14     F2 38 02 FB | 	rdlong	local10, objptr
0aa18     03 38 66 F0 | 	shl	local10, #3
0aa1c     02 00 00 FF 
0aa20     38 E4 85 F1 | 	sub	objptr, ##1080
0aa24     F2 38 02 F1 | 	add	local10, objptr
0aa28     04 38 06 F1 | 	add	local10, #4
0aa2c     1C 2D 02 FB | 	rdlong	local04, local10
0aa30     01 2C 56 F2 | 	cmps	local04, #1 wc
0aa34     35 00 00 FF 
0aa38     0C E4 85 F1 | 	sub	objptr, ##27148
0aa3c     94 00 90 CD |  if_b	jmp	#LR__0917
0aa40     37 00 00 FF 
0aa44     44 E4 05 F1 | 	add	objptr, ##28228
0aa48     F2 38 02 FB | 	rdlong	local10, objptr
0aa4c     03 38 66 F0 | 	shl	local10, #3
0aa50     02 00 00 FF 
0aa54     38 E4 85 F1 | 	sub	objptr, ##1080
0aa58     F2 38 02 F1 | 	add	local10, objptr
0aa5c     04 38 06 F1 | 	add	local10, #4
0aa60     1C 13 02 FB | 	rdlong	arg01, local10
0aa64     35 00 00 FF 
0aa68     0C E4 85 F1 | 	sub	objptr, ##27148
0aa6c     B4 C6 BF FD | 	call	#_getnoteval
0aa70     FD 12 02 F6 | 	mov	arg01, result1
0aa74     37 00 00 FF 
0aa78     44 E4 05 F1 | 	add	objptr, ##28228
0aa7c     F2 38 02 FB | 	rdlong	local10, objptr
0aa80     03 38 66 F0 | 	shl	local10, #3
0aa84     02 00 00 FF 
0aa88     38 E4 85 F1 | 	sub	objptr, ##1080
0aa8c     F2 38 02 F1 | 	add	local10, objptr
0aa90     35 00 00 FF 
0aa94     0C E4 85 F1 | 	sub	objptr, ##27148
0aa98     44 E8 B1 FD | 	call	#__system__str_S
0aa9c     1C FB 61 FC | 	wrlong	result1, local10
0aaa0     37 00 00 FF 
0aaa4     44 E4 05 F1 | 	add	objptr, ##28228
0aaa8     F2 38 02 FB | 	rdlong	local10, objptr
0aaac     03 38 66 F0 | 	shl	local10, #3
0aab0     02 00 00 FF 
0aab4     38 E4 85 F1 | 	sub	objptr, ##1080
0aab8     F2 38 02 F1 | 	add	local10, objptr
0aabc     04 38 06 F1 | 	add	local10, #4
0aac0     01 00 80 FF 
0aac4     1C 05 68 FC | 	wrlong	##514, local10
0aac8     35 00 00 FF 
0aacc     0C E4 85 F1 | 	sub	objptr, ##27148
0aad0     CC 02 90 FD | 	jmp	#LR__0923
0aad4                 | LR__0917
0aad4     37 00 00 FF 
0aad8     44 E4 05 F1 | 	add	objptr, ##28228
0aadc     F2 2C 02 FB | 	rdlong	local04, objptr
0aae0     16 39 02 F6 | 	mov	local10, local04
0aae4     03 38 66 F0 | 	shl	local10, #3
0aae8     02 00 00 FF 
0aaec     38 E4 85 F1 | 	sub	objptr, ##1080
0aaf0     F2 38 02 F1 | 	add	local10, objptr
0aaf4     03 2C 66 F0 | 	shl	local04, #3
0aaf8     F2 2C 02 F1 | 	add	local04, objptr
0aafc     16 13 02 FB | 	rdlong	arg01, local04
0ab00     35 00 00 FF 
0ab04     0C E4 85 F1 | 	sub	objptr, ##27148
0ab08     44 9D BF FD | 	call	#_isconstant
0ab0c     04 38 06 F1 | 	add	local10, #4
0ab10     1C FB 61 FC | 	wrlong	result1, local10
0ab14                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ab14     37 00 00 FF 
0ab18     44 E4 05 F1 | 	add	objptr, ##28228
0ab1c     F2 38 02 FB | 	rdlong	local10, objptr
0ab20     03 38 66 F0 | 	shl	local10, #3
0ab24     02 00 00 FF 
0ab28     38 E4 85 F1 | 	sub	objptr, ##1080
0ab2c     F2 38 02 F1 | 	add	local10, objptr
0ab30     04 38 06 F1 | 	add	local10, #4
0ab34     1C 2D 02 FB | 	rdlong	local04, local10
0ab38     01 2C 56 F2 | 	cmps	local04, #1 wc
0ab3c     35 00 00 FF 
0ab40     0C E4 85 F1 | 	sub	objptr, ##27148
0ab44     8C 00 90 CD |  if_b	jmp	#LR__0918
0ab48     37 00 00 FF 
0ab4c     44 E4 05 F1 | 	add	objptr, ##28228
0ab50     F2 34 02 FB | 	rdlong	local08, objptr
0ab54     1A 39 02 F6 | 	mov	local10, local08
0ab58     03 38 66 F0 | 	shl	local10, #3
0ab5c     02 00 00 FF 
0ab60     38 E4 85 F1 | 	sub	objptr, ##1080
0ab64     F2 38 02 F1 | 	add	local10, objptr
0ab68     03 34 66 F0 | 	shl	local08, #3
0ab6c     F2 34 02 F1 | 	add	local08, objptr
0ab70     04 34 06 F1 | 	add	local08, #4
0ab74     1A 13 02 FB | 	rdlong	arg01, local08
0ab78     35 00 00 FF 
0ab7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab80     09 13 52 F6 | 	abs	arg01, arg01 wc
0ab84     1F 3A C6 C9 |  if_b	decod	local11, #31
0ab88     00 3A 06 36 |  if_ae	mov	local11, #0
0ab8c     50 EF B1 FD | 	call	#__system___float_fromuns
0ab90     1D FB 61 F5 | 	xor	result1, local11
0ab94     FD 12 02 F6 | 	mov	arg01, result1
0ab98     44 E7 B1 FD | 	call	#__system__str_S
0ab9c     1C FB 61 FC | 	wrlong	result1, local10
0aba0     37 00 00 FF 
0aba4     44 E4 05 F1 | 	add	objptr, ##28228
0aba8     F2 38 02 FB | 	rdlong	local10, objptr
0abac     03 38 66 F0 | 	shl	local10, #3
0abb0     02 00 00 FF 
0abb4     38 E4 85 F1 | 	sub	objptr, ##1080
0abb8     F2 38 02 F1 | 	add	local10, objptr
0abbc     04 38 06 F1 | 	add	local10, #4
0abc0     01 00 80 FF 
0abc4     1C 03 68 FC | 	wrlong	##513, local10
0abc8     35 00 00 FF 
0abcc     0C E4 85 F1 | 	sub	objptr, ##27148
0abd0     CC 01 90 FD | 	jmp	#LR__0923
0abd4                 | LR__0918
0abd4     37 00 00 FF 
0abd8     44 E4 05 F1 | 	add	objptr, ##28228
0abdc     F2 38 02 FB | 	rdlong	local10, objptr
0abe0     03 38 66 F0 | 	shl	local10, #3
0abe4     02 00 00 FF 
0abe8     38 E4 85 F1 | 	sub	objptr, ##1080
0abec     F2 38 02 F1 | 	add	local10, objptr
0abf0     1C 13 02 FB | 	rdlong	arg01, local10
0abf4     35 00 00 FF 
0abf8     0C E4 85 F1 | 	sub	objptr, ##27148
0abfc     70 BD BF FD | 	call	#_isnum
0ac00     FD 3C 02 F6 | 	mov	local12, result1
0ac04     37 00 00 FF 
0ac08     44 E4 05 F1 | 	add	objptr, ##28228
0ac0c     F2 38 02 FB | 	rdlong	local10, objptr
0ac10     03 38 66 F0 | 	shl	local10, #3
0ac14     02 00 00 FF 
0ac18     38 E4 85 F1 | 	sub	objptr, ##1080
0ac1c     F2 38 02 F1 | 	add	local10, objptr
0ac20     1C 13 02 FB | 	rdlong	arg01, local10
0ac24     35 00 00 FF 
0ac28     0C E4 85 F1 | 	sub	objptr, ##27148
0ac2c     2C C1 BF FD | 	call	#_isint
0ac30     FD 3E 02 F6 | 	mov	local13, result1
0ac34     37 00 00 FF 
0ac38     44 E4 05 F1 | 	add	objptr, ##28228
0ac3c     F2 38 02 FB | 	rdlong	local10, objptr
0ac40     03 38 66 F0 | 	shl	local10, #3
0ac44     02 00 00 FF 
0ac48     38 E4 85 F1 | 	sub	objptr, ##1080
0ac4c     F2 38 02 F1 | 	add	local10, objptr
0ac50     1C 13 02 FB | 	rdlong	arg01, local10
0ac54     35 00 00 FF 
0ac58     0C E4 85 F1 | 	sub	objptr, ##27148
0ac5c     A0 C3 BF FD | 	call	#_isdec
0ac60     FD 40 02 F6 | 	mov	local14, result1
0ac64                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ac64                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ac64     00 3C 0E F2 | 	cmp	local12, #0 wz
0ac68     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ac6c     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ac70     34 00 90 AD |  if_e	jmp	#LR__0919
0ac74     37 00 00 FF 
0ac78     44 E4 05 F1 | 	add	objptr, ##28228
0ac7c     F2 38 02 FB | 	rdlong	local10, objptr
0ac80     03 38 66 F0 | 	shl	local10, #3
0ac84     02 00 00 FF 
0ac88     38 E4 85 F1 | 	sub	objptr, ##1080
0ac8c     F2 38 02 F1 | 	add	local10, objptr
0ac90     04 38 06 F1 | 	add	local10, #4
0ac94     01 00 80 FF 
0ac98     1C 01 68 FC | 	wrlong	##512, local10
0ac9c     35 00 00 FF 
0aca0     0C E4 85 F1 | 	sub	objptr, ##27148
0aca4     F8 00 90 FD | 	jmp	#LR__0923
0aca8                 | LR__0919
0aca8                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0aca8     00 3C 0E F2 | 	cmp	local12, #0 wz
0acac     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0acb0     20 35 22 56 |  if_ne	not	local08, local14
0acb4     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0acb8     34 00 90 AD |  if_e	jmp	#LR__0920
0acbc     37 00 00 FF 
0acc0     44 E4 05 F1 | 	add	objptr, ##28228
0acc4     F2 38 02 FB | 	rdlong	local10, objptr
0acc8     03 38 66 F0 | 	shl	local10, #3
0accc     02 00 00 FF 
0acd0     38 E4 85 F1 | 	sub	objptr, ##1080
0acd4     F2 38 02 F1 | 	add	local10, objptr
0acd8     04 38 06 F1 | 	add	local10, #4
0acdc     01 00 80 FF 
0ace0     1C 03 68 FC | 	wrlong	##513, local10
0ace4     35 00 00 FF 
0ace8     0C E4 85 F1 | 	sub	objptr, ##27148
0acec     B0 00 90 FD | 	jmp	#LR__0923
0acf0                 | LR__0920
0acf0                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0acf0     00 3C 0E F2 | 	cmp	local12, #0 wz
0acf4     1F 3F 22 56 |  if_ne	not	local13, local13
0acf8     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0acfc     20 41 22 56 |  if_ne	not	local14, local14
0ad00     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ad04     34 00 90 AD |  if_e	jmp	#LR__0921
0ad08     37 00 00 FF 
0ad0c     44 E4 05 F1 | 	add	objptr, ##28228
0ad10     F2 38 02 FB | 	rdlong	local10, objptr
0ad14     03 38 66 F0 | 	shl	local10, #3
0ad18     02 00 00 FF 
0ad1c     38 E4 85 F1 | 	sub	objptr, ##1080
0ad20     F2 38 02 F1 | 	add	local10, objptr
0ad24     04 38 06 F1 | 	add	local10, #4
0ad28     01 00 80 FF 
0ad2c     1C 05 68 FC | 	wrlong	##514, local10
0ad30     35 00 00 FF 
0ad34     0C E4 85 F1 | 	sub	objptr, ##27148
0ad38     64 00 90 FD | 	jmp	#LR__0923
0ad3c                 | LR__0921
0ad3c                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ad3c     37 00 00 FF 
0ad40     44 E4 05 F1 | 	add	objptr, ##28228
0ad44     F2 38 02 FB | 	rdlong	local10, objptr
0ad48     03 38 66 F0 | 	shl	local10, #3
0ad4c     02 00 00 FF 
0ad50     38 E4 85 F1 | 	sub	objptr, ##1080
0ad54     F2 38 02 F1 | 	add	local10, objptr
0ad58     1C 13 02 FB | 	rdlong	arg01, local10
0ad5c     35 00 00 FF 
0ad60     0C E4 85 F1 | 	sub	objptr, ##27148
0ad64     94 B9 BF FD | 	call	#_isname
0ad68     00 FA 0D F2 | 	cmp	result1, #0 wz
0ad6c     30 00 90 AD |  if_e	jmp	#LR__0922
0ad70     37 00 00 FF 
0ad74     44 E4 05 F1 | 	add	objptr, ##28228
0ad78     F2 38 02 FB | 	rdlong	local10, objptr
0ad7c     03 38 66 F0 | 	shl	local10, #3
0ad80     02 00 00 FF 
0ad84     38 E4 85 F1 | 	sub	objptr, ##1080
0ad88     F2 38 02 F1 | 	add	local10, objptr
0ad8c     04 38 06 F1 | 	add	local10, #4
0ad90     01 00 80 FF 
0ad94     1C 09 68 FC | 	wrlong	##516, local10
0ad98     35 00 00 FF 
0ad9c     0C E4 85 F1 | 	sub	objptr, ##27148
0ada0                 | LR__0922
0ada0                 | LR__0923
0ada0     37 00 00 FF 
0ada4     44 E4 05 F1 | 	add	objptr, ##28228
0ada8     F2 34 02 FB | 	rdlong	local08, objptr
0adac     01 34 86 F1 | 	sub	local08, #1
0adb0     F2 34 62 FC | 	wrlong	local08, objptr
0adb4     37 00 00 FF 
0adb8     44 E4 85 F1 | 	sub	objptr, ##28228
0adbc                 | LR__0924
0adbc     37 00 00 FF 
0adc0     44 E4 05 F1 | 	add	objptr, ##28228
0adc4     F2 34 02 FB | 	rdlong	local08, objptr
0adc8     01 34 06 F1 | 	add	local08, #1
0adcc     F2 34 62 FC | 	wrlong	local08, objptr
0add0     37 00 00 FF 
0add4     44 E4 85 F1 | 	sub	objptr, ##28228
0add8     10 11 B0 FD | 	call	#_expr
0addc     78 00 90 FD | 	jmp	#LR__0926
0ade0                 | LR__0925
0ade0     4A 00 00 FF 
0ade4     7C E4 05 F1 | 	add	objptr, ##38012
0ade8     F2 40 02 FB | 	rdlong	local14, objptr
0adec     20 39 02 F6 | 	mov	local10, local14
0adf0     01 38 66 F0 | 	shl	local10, #1
0adf4     20 39 02 F1 | 	add	local10, local14
0adf8     02 38 66 F0 | 	shl	local10, #2
0adfc     03 00 00 FF 
0ae00     00 E4 85 F1 | 	sub	objptr, ##1536
0ae04     F2 38 02 F1 | 	add	local10, objptr
0ae08     08 38 06 F1 | 	add	local10, #8
0ae0c     1C 39 68 FC | 	wrlong	#28, local10
0ae10     03 00 00 FF 
0ae14     00 E4 05 F1 | 	add	objptr, ##1536
0ae18     F2 40 02 FB | 	rdlong	local14, objptr
0ae1c     20 39 02 F6 | 	mov	local10, local14
0ae20     01 38 66 F0 | 	shl	local10, #1
0ae24     20 39 02 F1 | 	add	local10, local14
0ae28     02 38 66 F0 | 	shl	local10, #2
0ae2c     03 00 00 FF 
0ae30     00 E4 85 F1 | 	sub	objptr, ##1536
0ae34     F2 38 02 F1 | 	add	local10, objptr
0ae38     1C 03 68 FC | 	wrlong	#1, local10
0ae3c     03 00 00 FF 
0ae40     00 E4 05 F1 | 	add	objptr, ##1536
0ae44     F2 34 02 FB | 	rdlong	local08, objptr
0ae48     01 34 06 F1 | 	add	local08, #1
0ae4c     F2 34 62 FC | 	wrlong	local08, objptr
0ae50     4A 00 00 FF 
0ae54     7C E4 85 F1 | 	sub	objptr, ##38012
0ae58                 | LR__0926
0ae58     4A 00 00 FF 
0ae5c     7C E4 05 F1 | 	add	objptr, ##38012
0ae60     F2 40 02 FB | 	rdlong	local14, objptr
0ae64     20 39 02 F6 | 	mov	local10, local14
0ae68     01 38 66 F0 | 	shl	local10, #1
0ae6c     20 39 02 F1 | 	add	local10, local14
0ae70     02 38 66 F0 | 	shl	local10, #2
0ae74     03 00 00 FF 
0ae78     00 E4 85 F1 | 	sub	objptr, ##1536
0ae7c     F2 38 02 F1 | 	add	local10, objptr
0ae80     08 38 06 F1 | 	add	local10, #8
0ae84     1C 39 68 FC | 	wrlong	#28, local10
0ae88     03 00 00 FF 
0ae8c     00 E4 05 F1 | 	add	objptr, ##1536
0ae90     F2 40 02 FB | 	rdlong	local14, objptr
0ae94     20 39 02 F6 | 	mov	local10, local14
0ae98     01 38 66 F0 | 	shl	local10, #1
0ae9c     20 39 02 F1 | 	add	local10, local14
0aea0     02 38 66 F0 | 	shl	local10, #2
0aea4     03 00 00 FF 
0aea8     00 E4 85 F1 | 	sub	objptr, ##1536
0aeac     F2 38 02 F1 | 	add	local10, objptr
0aeb0     1C 33 62 FC | 	wrlong	local07, local10
0aeb4     03 00 00 FF 
0aeb8     00 E4 05 F1 | 	add	objptr, ##1536
0aebc     F2 40 02 FB | 	rdlong	local14, objptr
0aec0     01 40 06 F1 | 	add	local14, #1
0aec4     F2 40 62 FC | 	wrlong	local14, objptr
0aec8     20 39 02 F6 | 	mov	local10, local14
0aecc     01 38 66 F0 | 	shl	local10, #1
0aed0     20 39 02 F1 | 	add	local10, local14
0aed4     02 38 66 F0 | 	shl	local10, #2
0aed8     03 00 00 FF 
0aedc     00 E4 85 F1 | 	sub	objptr, ##1536
0aee0     F2 38 02 F1 | 	add	local10, objptr
0aee4     08 38 06 F1 | 	add	local10, #8
0aee8     1C 95 68 FC | 	wrlong	#74, local10
0aeec     03 00 00 FF 
0aef0     00 E4 05 F1 | 	add	objptr, ##1536
0aef4     F2 40 02 FB | 	rdlong	local14, objptr
0aef8     20 39 02 F6 | 	mov	local10, local14
0aefc     01 38 66 F0 | 	shl	local10, #1
0af00     20 39 02 F1 | 	add	local10, local14
0af04     02 38 66 F0 | 	shl	local10, #2
0af08     03 00 00 FF 
0af0c     00 E4 85 F1 | 	sub	objptr, ##1536
0af10     F2 38 02 F1 | 	add	local10, objptr
0af14     1C 01 68 FC | 	wrlong	#0, local10
0af18     03 00 00 FF 
0af1c     00 E4 05 F1 | 	add	objptr, ##1536
0af20     F2 34 02 FB | 	rdlong	local08, objptr
0af24     01 34 06 F1 | 	add	local08, #1
0af28     F2 34 62 FC | 	wrlong	local08, objptr
0af2c     4A 00 00 FF 
0af30     7C E4 85 F1 | 	sub	objptr, ##38012
0af34                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0af34                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af34                 | ' return 0
0af34     00 FA 05 F6 | 	mov	result1, #0
0af38                 | LR__0927
0af38     A7 F0 03 F6 | 	mov	ptra, fp
0af3c     B2 00 A0 FD | 	call	#popregs_
0af40                 | _compile_for_ret
0af40     2D 00 64 FD | 	ret
0af44                 | 
0af44                 | ' 
0af44                 | ' '----- compile 'next' command. 
0af44                 | ' 
0af44                 | ' function compile_next() as ulong
0af44                 | _compile_next
0af44     04 4A 05 F6 | 	mov	COUNT_, #4
0af48     A8 00 A0 FD | 	call	#pushregs_
0af4c     37 00 00 FF 
0af50     44 E4 05 F1 | 	add	objptr, ##28228
0af54     F2 14 02 FB | 	rdlong	arg02, objptr
0af58     03 14 66 F0 | 	shl	arg02, #3
0af5c     02 00 00 FF 
0af60     38 E4 85 F1 | 	sub	objptr, ##1080
0af64     F2 14 02 F1 | 	add	arg02, objptr
0af68     0A 27 02 FB | 	rdlong	local01, arg02
0af6c                 | ' 
0af6c                 | ' varname$=lparts(ct).part$ 
0af6c                 | ' if varnum=0 then return 35
0af6c     04 E4 85 F1 | 	sub	objptr, #4
0af70     F2 14 0A FB | 	rdlong	arg02, objptr wz
0af74     35 00 00 FF 
0af78     08 E4 85 F1 | 	sub	objptr, ##27144
0af7c     23 FA 05 A6 |  if_e	mov	result1, #35
0af80     4C 01 90 AD |  if_e	jmp	#LR__0932
0af84     01 28 66 F6 | 	neg	local02, #1
0af88                 | ' j=-1
0af88                 | ' for i=0 to varnum-1
0af88     00 2A 06 F6 | 	mov	local03, #0
0af8c     35 00 00 FF 
0af90     08 E4 05 F1 | 	add	objptr, ##27144
0af94     F2 2C 02 FB | 	rdlong	local04, objptr
0af98     35 00 00 FF 
0af9c     08 E4 85 F1 | 	sub	objptr, ##27144
0afa0                 | LR__0930
0afa0     16 2B 12 F2 | 	cmp	local03, local04 wc
0afa4     38 00 90 3D |  if_ae	jmp	#LR__0931
0afa8                 | '   if variables(i).name=varname$ then j=i : exit
0afa8     15 15 02 F6 | 	mov	arg02, local03
0afac     04 14 66 F0 | 	shl	arg02, #4
0afb0     14 00 00 FF 
0afb4     F8 E5 05 F1 | 	add	objptr, ##10744
0afb8     F2 14 02 F1 | 	add	arg02, objptr
0afbc     0A 13 02 FB | 	rdlong	arg01, arg02
0afc0     13 15 02 F6 | 	mov	arg02, local01
0afc4     14 00 00 FF 
0afc8     F8 E5 85 F1 | 	sub	objptr, ##10744
0afcc     C4 C0 B1 FD | 	call	#__system___string_cmp
0afd0     00 FA 0D F2 | 	cmp	result1, #0 wz
0afd4     15 29 02 A6 |  if_e	mov	local02, local03
0afd8     01 2A 06 51 |  if_ne	add	local03, #1
0afdc     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0afe0                 | LR__0931
0afe0                 | ' if j=-1 then return 35
0afe0     FF FF 7F FF 
0afe4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0afe8     23 FA 05 A6 |  if_e	mov	result1, #35
0afec     E0 00 90 AD |  if_e	jmp	#LR__0932
0aff0     4A 00 00 FF 
0aff4     7C E4 05 F1 | 	add	objptr, ##38012
0aff8     F2 2C 02 FB | 	rdlong	local04, objptr
0affc     16 2B 02 F6 | 	mov	local03, local04
0b000     01 2A 66 F0 | 	shl	local03, #1
0b004     16 2B 02 F1 | 	add	local03, local04
0b008     02 2A 66 F0 | 	shl	local03, #2
0b00c     03 00 00 FF 
0b010     00 E4 85 F1 | 	sub	objptr, ##1536
0b014     F2 2A 02 F1 | 	add	local03, objptr
0b018     08 2A 06 F1 | 	add	local03, #8
0b01c     15 39 68 FC | 	wrlong	#28, local03
0b020     03 00 00 FF 
0b024     00 E4 05 F1 | 	add	objptr, ##1536
0b028     F2 2C 02 FB | 	rdlong	local04, objptr
0b02c     16 2B 02 F6 | 	mov	local03, local04
0b030     01 2A 66 F0 | 	shl	local03, #1
0b034     16 2B 02 F1 | 	add	local03, local04
0b038     02 2A 66 F0 | 	shl	local03, #2
0b03c     03 00 00 FF 
0b040     00 E4 85 F1 | 	sub	objptr, ##1536
0b044     F2 2A 02 F1 | 	add	local03, objptr
0b048     15 29 62 FC | 	wrlong	local02, local03
0b04c     03 00 00 FF 
0b050     00 E4 05 F1 | 	add	objptr, ##1536
0b054     F2 2C 02 FB | 	rdlong	local04, objptr
0b058     01 2C 06 F1 | 	add	local04, #1
0b05c     F2 2C 62 FC | 	wrlong	local04, objptr
0b060     16 2B 02 F6 | 	mov	local03, local04
0b064     01 2A 66 F0 | 	shl	local03, #1
0b068     16 2B 02 F1 | 	add	local03, local04
0b06c     02 2A 66 F0 | 	shl	local03, #2
0b070     03 00 00 FF 
0b074     00 E4 85 F1 | 	sub	objptr, ##1536
0b078     F2 2A 02 F1 | 	add	local03, objptr
0b07c     08 2A 06 F1 | 	add	local03, #8
0b080     15 97 68 FC | 	wrlong	#75, local03
0b084     03 00 00 FF 
0b088     00 E4 05 F1 | 	add	objptr, ##1536
0b08c     F2 2C 02 FB | 	rdlong	local04, objptr
0b090     16 2B 02 F6 | 	mov	local03, local04
0b094     01 2A 66 F0 | 	shl	local03, #1
0b098     16 2B 02 F1 | 	add	local03, local04
0b09c     02 2A 66 F0 | 	shl	local03, #2
0b0a0     03 00 00 FF 
0b0a4     00 E4 85 F1 | 	sub	objptr, ##1536
0b0a8     F2 2A 02 F1 | 	add	local03, objptr
0b0ac     15 01 68 FC | 	wrlong	#0, local03
0b0b0     03 00 00 FF 
0b0b4     00 E4 05 F1 | 	add	objptr, ##1536
0b0b8     F2 2C 02 FB | 	rdlong	local04, objptr
0b0bc     01 2C 06 F1 | 	add	local04, #1
0b0c0     F2 2C 62 FC | 	wrlong	local04, objptr
0b0c4     4A 00 00 FF 
0b0c8     7C E4 85 F1 | 	sub	objptr, ##38012
0b0cc                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b0cc                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b0cc                 | ' return 0
0b0cc     00 FA 05 F6 | 	mov	result1, #0
0b0d0                 | LR__0932
0b0d0     A7 F0 03 F6 | 	mov	ptra, fp
0b0d4     B2 00 A0 FD | 	call	#popregs_
0b0d8                 | _compile_next_ret
0b0d8     2D 00 64 FD | 	ret
0b0dc                 | 
0b0dc                 | ' 
0b0dc                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b0dc                 | ' 
0b0dc                 | ' function compile_gosub() as ulong
0b0dc                 | _compile_gosub
0b0dc     02 4A 05 F6 | 	mov	COUNT_, #2
0b0e0     A8 00 A0 FD | 	call	#pushregs_
0b0e4     4A 00 00 FF 
0b0e8     7C E4 05 F1 | 	add	objptr, ##38012
0b0ec     F2 26 02 FB | 	rdlong	local01, objptr
0b0f0     13 29 02 F6 | 	mov	local02, local01
0b0f4     01 28 66 F0 | 	shl	local02, #1
0b0f8     13 29 02 F1 | 	add	local02, local01
0b0fc     02 28 66 F0 | 	shl	local02, #2
0b100     03 00 00 FF 
0b104     00 E4 85 F1 | 	sub	objptr, ##1536
0b108     F2 28 02 F1 | 	add	local02, objptr
0b10c     08 28 06 F1 | 	add	local02, #8
0b110     14 53 69 FC | 	wrlong	#169, local02
0b114     03 00 00 FF 
0b118     00 E4 05 F1 | 	add	objptr, ##1536
0b11c     F2 28 02 FB | 	rdlong	local02, objptr
0b120     01 28 06 F1 | 	add	local02, #1
0b124     F2 28 62 FC | 	wrlong	local02, objptr
0b128     4A 00 00 FF 
0b12c     7C E4 85 F1 | 	sub	objptr, ##38012
0b130     0C 00 B0 FD | 	call	#_compile_goto
0b134                 | ' compiledline(lineptr).result_type=token_gosub
0b134                 | ' lineptr+=1
0b134                 | ' err=compile_goto()
0b134                 | ' return err
0b134     A7 F0 03 F6 | 	mov	ptra, fp
0b138     B2 00 A0 FD | 	call	#popregs_
0b13c                 | _compile_gosub_ret
0b13c     2D 00 64 FD | 	ret
0b140                 | 
0b140                 | ' 
0b140                 | ' '----- compile 'goto' 
0b140                 | ' 
0b140                 | ' function compile_goto() as ulong
0b140                 | _compile_goto
0b140     03 4A 05 F6 | 	mov	COUNT_, #3
0b144     A8 00 A0 FD | 	call	#pushregs_
0b148     34 F0 07 F1 | 	add	ptra, #52
0b14c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b14c     37 00 00 FF 
0b150     44 E4 05 F1 | 	add	objptr, ##28228
0b154     F2 16 02 FB | 	rdlong	arg03, objptr
0b158     03 16 66 F0 | 	shl	arg03, #3
0b15c     02 00 00 FF 
0b160     38 E4 85 F1 | 	sub	objptr, ##1080
0b164     F2 16 02 F1 | 	add	arg03, objptr
0b168     04 16 06 F1 | 	add	arg03, #4
0b16c     0B 17 02 FB | 	rdlong	arg03, arg03
0b170     01 00 00 FF 
0b174     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b178     35 00 00 FF 
0b17c     0C E4 85 F1 | 	sub	objptr, ##27148
0b180     CC 02 90 5D |  if_ne	jmp	#LR__0945
0b184     37 00 00 FF 
0b188     44 E4 05 F1 | 	add	objptr, ##28228
0b18c     F2 16 02 FB | 	rdlong	arg03, objptr
0b190     01 16 06 F1 | 	add	arg03, #1
0b194     03 16 66 F0 | 	shl	arg03, #3
0b198     02 00 00 FF 
0b19c     38 E4 85 F1 | 	sub	objptr, ##1080
0b1a0     F2 16 02 F1 | 	add	arg03, objptr
0b1a4     04 16 06 F1 | 	add	arg03, #4
0b1a8     0B 17 02 FB | 	rdlong	arg03, arg03
0b1ac     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b1b0     35 00 00 FF 
0b1b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b1b8     94 02 90 5D |  if_ne	jmp	#LR__0945
0b1bc     37 00 00 FF 
0b1c0     44 E4 05 F1 | 	add	objptr, ##28228
0b1c4     F2 16 02 FB | 	rdlong	arg03, objptr
0b1c8     03 16 66 F0 | 	shl	arg03, #3
0b1cc     02 00 00 FF 
0b1d0     38 E4 85 F1 | 	sub	objptr, ##1080
0b1d4     F2 16 02 F1 | 	add	arg03, objptr
0b1d8     0B 13 02 FB | 	rdlong	arg01, arg03
0b1dc     00 14 06 F6 | 	mov	arg02, #0
0b1e0     35 00 00 FF 
0b1e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b1e8     70 F3 B1 FD | 	call	#__system____builtin_atoi
0b1ec     04 4E 05 F1 | 	add	fp, #4
0b1f0     A7 FA 61 FC | 	wrlong	result1, fp
0b1f4     4A 00 00 FF 
0b1f8     7C E4 05 F1 | 	add	objptr, ##38012
0b1fc     F2 26 02 FB | 	rdlong	local01, objptr
0b200     13 29 02 F6 | 	mov	local02, local01
0b204     01 28 66 F0 | 	shl	local02, #1
0b208     13 29 02 F1 | 	add	local02, local01
0b20c     02 28 66 F0 | 	shl	local02, #2
0b210     03 00 00 FF 
0b214     00 E4 85 F1 | 	sub	objptr, ##1536
0b218     F2 28 02 F1 | 	add	local02, objptr
0b21c     08 28 06 F1 | 	add	local02, #8
0b220     14 9D 68 FC | 	wrlong	#78, local02
0b224     03 00 00 FF 
0b228     0C E4 05 F1 | 	add	objptr, ##1548
0b22c     F2 2A 02 FB | 	rdlong	local03, objptr
0b230     4A 00 00 FF 
0b234     88 E4 85 F1 | 	sub	objptr, ##38024
0b238     04 4E 05 F1 | 	add	fp, #4
0b23c     A7 2A 62 FC | 	wrlong	local03, fp
0b240     08 4E 85 F1 | 	sub	fp, #8
0b244                 | '   gotoline=val%(lparts(ct).part$) 
0b244                 | '   compiledline(lineptr).result_type=token_fast_goto
0b244                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b244                 | '   do
0b244                 | LR__0940
0b244     10 4E 05 F1 | 	add	fp, #16
0b248     A7 12 02 F6 | 	mov	arg01, fp
0b24c     08 4E 85 F1 | 	sub	fp, #8
0b250     A7 14 02 FB | 	rdlong	arg02, fp
0b254     08 4E 85 F1 | 	sub	fp, #8
0b258     18 16 06 F6 | 	mov	arg03, #24
0b25c     0B 00 00 FF 
0b260     CC E4 05 F1 | 	add	objptr, ##5836
0b264     0C B1 B1 FD | 	call	#_psram_spin2_read1
0b268     0B 00 00 FF 
0b26c     CC E4 85 F1 | 	sub	objptr, ##5836
0b270                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b270                 | '     if gotoheader(0)<>$FFFFFFFF then
0b270     10 4E 05 F1 | 	add	fp, #16
0b274     A7 2A 02 FB | 	rdlong	local03, fp
0b278     10 4E 85 F1 | 	sub	fp, #16
0b27c     FF FF 7F FF 
0b280     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b284     24 00 90 AD |  if_e	jmp	#LR__0941
0b288     08 4E 05 F1 | 	add	fp, #8
0b28c     A7 2A 02 FB | 	rdlong	local03, fp
0b290     04 4E 05 F1 | 	add	fp, #4
0b294     A7 2A 62 FC | 	wrlong	local03, fp
0b298     18 4E 05 F1 | 	add	fp, #24
0b29c     A7 2A 02 FB | 	rdlong	local03, fp
0b2a0     1C 4E 85 F1 | 	sub	fp, #28
0b2a4     A7 2A 62 FC | 	wrlong	local03, fp
0b2a8     08 4E 85 F1 | 	sub	fp, #8
0b2ac                 | LR__0941
0b2ac     24 4E 05 F1 | 	add	fp, #36
0b2b0     A7 2A 02 FB | 	rdlong	local03, fp
0b2b4     24 4E 85 F1 | 	sub	fp, #36
0b2b8     FF FF 3F FF 
0b2bc     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b2c0     10 4E 05 51 |  if_ne	add	fp, #16
0b2c4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b2c8     10 4E 85 51 |  if_ne	sub	fp, #16
0b2cc     FF FF 7F 5F 
0b2d0     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b2d4     1C 00 90 AD |  if_e	jmp	#LR__0942
0b2d8     10 4E 05 F1 | 	add	fp, #16
0b2dc     A7 2A 02 FB | 	rdlong	local03, fp
0b2e0     0C 4E 85 F1 | 	sub	fp, #12
0b2e4     A7 28 02 FB | 	rdlong	local02, fp
0b2e8     04 4E 85 F1 | 	sub	fp, #4
0b2ec     14 2B 0A F2 | 	cmp	local03, local02 wz
0b2f0     50 FF 9F 5D |  if_ne	jmp	#LR__0940
0b2f4                 | LR__0942
0b2f4                 | '   if gotoheader(0)=gotoline then
0b2f4     10 4E 05 F1 | 	add	fp, #16
0b2f8     A7 2A 02 FB | 	rdlong	local03, fp
0b2fc     0C 4E 85 F1 | 	sub	fp, #12
0b300     A7 26 02 FB | 	rdlong	local01, fp
0b304     04 4E 85 F1 | 	sub	fp, #4
0b308     13 2B 0A F2 | 	cmp	local03, local01 wz
0b30c     7C 00 90 5D |  if_ne	jmp	#LR__0943
0b310     4A 00 00 FF 
0b314     7C E4 05 F1 | 	add	objptr, ##38012
0b318     F2 26 02 FB | 	rdlong	local01, objptr
0b31c     13 29 02 F6 | 	mov	local02, local01
0b320     01 28 66 F0 | 	shl	local02, #1
0b324     13 29 02 F1 | 	add	local02, local01
0b328     02 28 66 F0 | 	shl	local02, #2
0b32c     03 00 00 FF 
0b330     00 E4 85 F1 | 	sub	objptr, ##1536
0b334     F2 28 02 F1 | 	add	local02, objptr
0b338     0C 4E 05 F1 | 	add	fp, #12
0b33c     A7 2A 02 FB | 	rdlong	local03, fp
0b340     14 2B 62 FC | 	wrlong	local03, local02
0b344     03 00 00 FF 
0b348     00 E4 05 F1 | 	add	objptr, ##1536
0b34c     F2 26 02 FB | 	rdlong	local01, objptr
0b350     13 29 02 F6 | 	mov	local02, local01
0b354     01 28 66 F0 | 	shl	local02, #1
0b358     13 29 02 F1 | 	add	local02, local01
0b35c     02 28 66 F0 | 	shl	local02, #2
0b360     03 00 00 FF 
0b364     00 E4 85 F1 | 	sub	objptr, ##1536
0b368     F2 28 02 F1 | 	add	local02, objptr
0b36c     08 4E 85 F1 | 	sub	fp, #8
0b370     A7 2A 02 FB | 	rdlong	local03, fp
0b374     04 4E 85 F1 | 	sub	fp, #4
0b378     04 28 06 F1 | 	add	local02, #4
0b37c     14 2B 62 FC | 	wrlong	local03, local02
0b380     47 00 00 FF 
0b384     7C E4 85 F1 | 	sub	objptr, ##36476
0b388     A4 00 90 FD | 	jmp	#LR__0944
0b38c                 | LR__0943
0b38c     4A 00 00 FF 
0b390     7C E4 05 F1 | 	add	objptr, ##38012
0b394     F2 26 02 FB | 	rdlong	local01, objptr
0b398     13 29 02 F6 | 	mov	local02, local01
0b39c     01 28 66 F0 | 	shl	local02, #1
0b3a0     13 29 02 F1 | 	add	local02, local01
0b3a4     02 28 66 F0 | 	shl	local02, #2
0b3a8     03 00 00 FF 
0b3ac     00 E4 85 F1 | 	sub	objptr, ##1536
0b3b0     F2 28 02 F1 | 	add	local02, objptr
0b3b4     00 00 C0 FF 
0b3b8     14 01 68 FC | 	wrlong	##-2147483648, local02
0b3bc     03 00 00 FF 
0b3c0     00 E4 05 F1 | 	add	objptr, ##1536
0b3c4     F2 26 02 FB | 	rdlong	local01, objptr
0b3c8     13 29 02 F6 | 	mov	local02, local01
0b3cc     01 28 66 F0 | 	shl	local02, #1
0b3d0     13 29 02 F1 | 	add	local02, local01
0b3d4     02 28 66 F0 | 	shl	local02, #2
0b3d8     03 00 00 FF 
0b3dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b3e0     F2 28 02 F1 | 	add	local02, objptr
0b3e4     04 4E 05 F1 | 	add	fp, #4
0b3e8     A7 2A 02 FB | 	rdlong	local03, fp
0b3ec     04 4E 85 F1 | 	sub	fp, #4
0b3f0     04 28 06 F1 | 	add	local02, #4
0b3f4     14 2B 62 FC | 	wrlong	local03, local02
0b3f8     03 00 00 FF 
0b3fc     00 E4 05 F1 | 	add	objptr, ##1536
0b400     F2 26 02 FB | 	rdlong	local01, objptr
0b404     13 29 02 F6 | 	mov	local02, local01
0b408     01 28 66 F0 | 	shl	local02, #1
0b40c     13 29 02 F1 | 	add	local02, local01
0b410     02 28 66 F0 | 	shl	local02, #2
0b414     03 00 00 FF 
0b418     00 E4 85 F1 | 	sub	objptr, ##1536
0b41c     F2 28 02 F1 | 	add	local02, objptr
0b420     08 28 06 F1 | 	add	local02, #8
0b424     14 A7 68 FC | 	wrlong	#83, local02
0b428     47 00 00 FF 
0b42c     7C E4 85 F1 | 	sub	objptr, ##36476
0b430                 | LR__0944
0b430     4A 00 00 FF 
0b434     7C E4 05 F1 | 	add	objptr, ##38012
0b438     F2 2A 02 FB | 	rdlong	local03, objptr
0b43c     01 2A 06 F1 | 	add	local03, #1
0b440     F2 2A 62 FC | 	wrlong	local03, objptr
0b444     4A 00 00 FF 
0b448     7C E4 85 F1 | 	sub	objptr, ##38012
0b44c     D0 00 90 FD | 	jmp	#LR__0946
0b450                 | LR__0945
0b450     98 0A B0 FD | 	call	#_expr
0b454     30 4E 05 F1 | 	add	fp, #48
0b458     A7 9E 68 FC | 	wrlong	#79, fp
0b45c     08 4E 85 F1 | 	sub	fp, #8
0b460     A7 00 68 FC | 	wrlong	#0, fp
0b464     04 4E 05 F1 | 	add	fp, #4
0b468     A7 2A 02 FB | 	rdlong	local03, fp
0b46c     04 4E 05 F1 | 	add	fp, #4
0b470     A7 26 02 FB | 	rdlong	local01, fp
0b474     30 4E 85 F1 | 	sub	fp, #48
0b478     4A 00 00 FF 
0b47c     7C E4 05 F1 | 	add	objptr, ##38012
0b480     F2 28 02 FB | 	rdlong	local02, objptr
0b484     14 17 02 F6 | 	mov	arg03, local02
0b488     01 16 66 F0 | 	shl	arg03, #1
0b48c     14 17 02 F1 | 	add	arg03, local02
0b490     02 16 66 F0 | 	shl	arg03, #2
0b494     03 00 00 FF 
0b498     00 E4 85 F1 | 	sub	objptr, ##1536
0b49c     F2 16 02 F1 | 	add	arg03, objptr
0b4a0     0B 01 68 FC | 	wrlong	#0, arg03
0b4a4     03 00 00 FF 
0b4a8     00 E4 05 F1 | 	add	objptr, ##1536
0b4ac     F2 28 02 FB | 	rdlong	local02, objptr
0b4b0     14 17 02 F6 | 	mov	arg03, local02
0b4b4     01 16 66 F0 | 	shl	arg03, #1
0b4b8     14 17 02 F1 | 	add	arg03, local02
0b4bc     02 16 66 F0 | 	shl	arg03, #2
0b4c0     03 00 00 FF 
0b4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c8     F2 16 02 F1 | 	add	arg03, objptr
0b4cc     04 16 06 F1 | 	add	arg03, #4
0b4d0     0B 2B 62 FC | 	wrlong	local03, arg03
0b4d4     03 00 00 FF 
0b4d8     00 E4 05 F1 | 	add	objptr, ##1536
0b4dc     F2 2A 02 FB | 	rdlong	local03, objptr
0b4e0     15 29 02 F6 | 	mov	local02, local03
0b4e4     01 28 66 F0 | 	shl	local02, #1
0b4e8     15 29 02 F1 | 	add	local02, local03
0b4ec     02 28 66 F0 | 	shl	local02, #2
0b4f0     03 00 00 FF 
0b4f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4f8     F2 28 02 F1 | 	add	local02, objptr
0b4fc     08 28 06 F1 | 	add	local02, #8
0b500     14 27 62 FC | 	wrlong	local01, local02
0b504     03 00 00 FF 
0b508     00 E4 05 F1 | 	add	objptr, ##1536
0b50c     F2 2A 02 FB | 	rdlong	local03, objptr
0b510     01 2A 06 F1 | 	add	local03, #1
0b514     F2 2A 62 FC | 	wrlong	local03, objptr
0b518     4A 00 00 FF 
0b51c     7C E4 85 F1 | 	sub	objptr, ##38012
0b520                 | LR__0946
0b520                 | ' return 0
0b520     00 FA 05 F6 | 	mov	result1, #0
0b524     A7 F0 03 F6 | 	mov	ptra, fp
0b528     B2 00 A0 FD | 	call	#popregs_
0b52c                 | _compile_goto_ret
0b52c     2D 00 64 FD | 	ret
0b530                 | 
0b530                 | ' 
0b530                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b530                 | ' 
0b530                 | ' function compile_on() as ulong
0b530                 | _compile_on
0b530     04 4A 05 F6 | 	mov	COUNT_, #4
0b534     A8 00 A0 FD | 	call	#pushregs_
0b538     B0 09 B0 FD | 	call	#_expr
0b53c     00 26 06 F6 | 	mov	local01, #0
0b540     4A 00 00 FF 
0b544     7C E4 05 F1 | 	add	objptr, ##38012
0b548     F2 14 02 FB | 	rdlong	arg02, objptr
0b54c     0A 13 02 F6 | 	mov	arg01, arg02
0b550     01 12 66 F0 | 	shl	arg01, #1
0b554     0A 13 02 F1 | 	add	arg01, arg02
0b558     02 12 66 F0 | 	shl	arg01, #2
0b55c     03 00 00 FF 
0b560     00 E4 85 F1 | 	sub	objptr, ##1536
0b564     F2 12 02 F1 | 	add	arg01, objptr
0b568     08 12 06 F1 | 	add	arg01, #8
0b56c     09 83 69 FC | 	wrlong	#193, arg01
0b570     03 00 00 FF 
0b574     00 E4 05 F1 | 	add	objptr, ##1536
0b578     F2 14 02 FB | 	rdlong	arg02, objptr
0b57c     0A 29 02 F6 | 	mov	local02, arg02
0b580     01 14 06 F1 | 	add	arg02, #1
0b584     F2 14 62 FC | 	wrlong	arg02, objptr
0b588                 | ' expr()
0b588                 | ' 'print lparts(ct).part$ 'ok
0b588                 | ' numpar=0
0b588                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b588                 | ' if lparts(ct).part$="goto" then
0b588     13 00 00 FF 
0b58c     38 E4 85 F1 | 	sub	objptr, ##9784
0b590     F2 14 02 FB | 	rdlong	arg02, objptr
0b594     03 14 66 F0 | 	shl	arg02, #3
0b598     02 00 00 FF 
0b59c     38 E4 85 F1 | 	sub	objptr, ##1080
0b5a0     F2 14 02 F1 | 	add	arg02, objptr
0b5a4     0A 13 02 FB | 	rdlong	arg01, arg02
0b5a8     B9 01 00 FF 
0b5ac     19 15 06 F6 | 	mov	arg02, ##@LR__5887
0b5b0     35 00 00 FF 
0b5b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b5b8     D8 BA B1 FD | 	call	#__system___string_cmp
0b5bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b5c0     14 02 90 5D |  if_ne	jmp	#LR__0955
0b5c4     37 00 00 FF 
0b5c8     44 E4 05 F1 | 	add	objptr, ##28228
0b5cc     F2 2A 02 FB | 	rdlong	local03, objptr
0b5d0     37 00 00 FF 
0b5d4     44 E4 85 F1 | 	sub	objptr, ##28228
0b5d8     01 2A 06 F1 | 	add	local03, #1
0b5dc                 | '   i=ct+1
0b5dc                 | '   do
0b5dc                 | LR__0950
0b5dc                 | '     if lparts(i).token=token_decimal then
0b5dc     15 FB 01 F6 | 	mov	result1, local03
0b5e0     03 FA 65 F0 | 	shl	result1, #3
0b5e4     35 00 00 FF 
0b5e8     0C E4 05 F1 | 	add	objptr, ##27148
0b5ec     F2 FA 01 F1 | 	add	result1, objptr
0b5f0     04 FA 05 F1 | 	add	result1, #4
0b5f4     FD FA 01 FB | 	rdlong	result1, result1
0b5f8     01 00 00 FF 
0b5fc     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b600     35 00 00 FF 
0b604     0C E4 85 F1 | 	sub	objptr, ##27148
0b608     DC 00 90 5D |  if_ne	jmp	#LR__0951
0b60c     4A 00 00 FF 
0b610     7C E4 05 F1 | 	add	objptr, ##38012
0b614     F2 FA 01 FB | 	rdlong	result1, objptr
0b618     FD 14 02 F6 | 	mov	arg02, result1
0b61c     01 14 66 F0 | 	shl	arg02, #1
0b620     FD 14 02 F1 | 	add	arg02, result1
0b624     02 14 66 F0 | 	shl	arg02, #2
0b628     03 00 00 FF 
0b62c     00 E4 85 F1 | 	sub	objptr, ##1536
0b630     F2 14 02 F1 | 	add	arg02, objptr
0b634     00 00 C0 FF 
0b638     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b63c     03 00 00 FF 
0b640     00 E4 05 F1 | 	add	objptr, ##1536
0b644     F2 14 02 FB | 	rdlong	arg02, objptr
0b648     0A 2D 02 F6 | 	mov	local04, arg02
0b64c     01 2C 66 F0 | 	shl	local04, #1
0b650     0A 2D 02 F1 | 	add	local04, arg02
0b654     02 2C 66 F0 | 	shl	local04, #2
0b658     03 00 00 FF 
0b65c     00 E4 85 F1 | 	sub	objptr, ##1536
0b660     F2 2C 02 F1 | 	add	local04, objptr
0b664     15 15 02 F6 | 	mov	arg02, local03
0b668     03 14 66 F0 | 	shl	arg02, #3
0b66c     12 00 00 FF 
0b670     70 E4 85 F1 | 	sub	objptr, ##9328
0b674     F2 14 02 F1 | 	add	arg02, objptr
0b678     0A 13 02 FB | 	rdlong	arg01, arg02
0b67c     00 14 06 F6 | 	mov	arg02, #0
0b680     35 00 00 FF 
0b684     0C E4 85 F1 | 	sub	objptr, ##27148
0b688     D0 EE B1 FD | 	call	#__system____builtin_atoi
0b68c     04 2C 06 F1 | 	add	local04, #4
0b690     16 FB 61 FC | 	wrlong	result1, local04
0b694     4A 00 00 FF 
0b698     7C E4 05 F1 | 	add	objptr, ##38012
0b69c     F2 14 02 FB | 	rdlong	arg02, objptr
0b6a0     0A 2D 02 F6 | 	mov	local04, arg02
0b6a4     01 2C 66 F0 | 	shl	local04, #1
0b6a8     0A 2D 02 F1 | 	add	local04, arg02
0b6ac     02 2C 66 F0 | 	shl	local04, #2
0b6b0     03 00 00 FF 
0b6b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b6b8     F2 2C 02 F1 | 	add	local04, objptr
0b6bc     08 2C 06 F1 | 	add	local04, #8
0b6c0     16 A7 68 FC | 	wrlong	#83, local04
0b6c4     03 00 00 FF 
0b6c8     00 E4 05 F1 | 	add	objptr, ##1536
0b6cc     F2 2C 02 FB | 	rdlong	local04, objptr
0b6d0     01 2C 06 F1 | 	add	local04, #1
0b6d4     F2 2C 62 FC | 	wrlong	local04, objptr
0b6d8     4A 00 00 FF 
0b6dc     7C E4 85 F1 | 	sub	objptr, ##38012
0b6e0     01 26 06 F1 | 	add	local01, #1
0b6e4     08 00 90 FD | 	jmp	#LR__0952
0b6e8                 | LR__0951
0b6e8                 | '       return 17
0b6e8     11 FA 05 F6 | 	mov	result1, #17
0b6ec     5C 04 90 FD | 	jmp	#LR__0965
0b6f0                 | LR__0952
0b6f0     01 2A 06 F1 | 	add	local03, #1
0b6f4                 | '     i+=1
0b6f4                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b6f4     15 2D 02 F6 | 	mov	local04, local03
0b6f8     03 2C 66 F0 | 	shl	local04, #3
0b6fc     35 00 00 FF 
0b700     0C E4 05 F1 | 	add	objptr, ##27148
0b704     F2 2C 02 F1 | 	add	local04, objptr
0b708     04 2C 06 F1 | 	add	local04, #4
0b70c     16 2D 02 FB | 	rdlong	local04, local04
0b710     11 2C 0E F2 | 	cmp	local04, #17 wz
0b714     35 00 00 FF 
0b718     0C E4 85 F1 | 	sub	objptr, ##27148
0b71c     30 00 90 AD |  if_e	jmp	#LR__0953
0b720     15 2D 02 F6 | 	mov	local04, local03
0b724     03 2C 66 F0 | 	shl	local04, #3
0b728     35 00 00 FF 
0b72c     0C E4 05 F1 | 	add	objptr, ##27148
0b730     F2 2C 02 F1 | 	add	local04, objptr
0b734     04 2C 06 F1 | 	add	local04, #4
0b738     16 2D 02 FB | 	rdlong	local04, local04
0b73c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b740     35 00 00 FF 
0b744     0C E4 85 F1 | 	sub	objptr, ##27148
0b748     15 FA 05 56 |  if_ne	mov	result1, #21
0b74c     FC 03 90 5D |  if_ne	jmp	#LR__0965
0b750                 | LR__0953
0b750                 | '     if lparts(i).token=token_end then exit loop
0b750     15 2D 02 F6 | 	mov	local04, local03
0b754     03 2C 66 F0 | 	shl	local04, #3
0b758     35 00 00 FF 
0b75c     0C E4 05 F1 | 	add	objptr, ##27148
0b760     F2 2C 02 F1 | 	add	local04, objptr
0b764     04 2C 06 F1 | 	add	local04, #4
0b768     16 2D 02 FB | 	rdlong	local04, local04
0b76c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b770     35 00 00 FF 
0b774     0C E4 85 F1 | 	sub	objptr, ##27148
0b778     30 00 90 AD |  if_e	jmp	#LR__0954
0b77c     01 2A 06 F1 | 	add	local03, #1
0b780     15 2D 02 F6 | 	mov	local04, local03
0b784     03 2C 66 F0 | 	shl	local04, #3
0b788     35 00 00 FF 
0b78c     0C E4 05 F1 | 	add	objptr, ##27148
0b790     F2 2C 02 F1 | 	add	local04, objptr
0b794     04 2C 06 F1 | 	add	local04, #4
0b798     16 2D 02 FB | 	rdlong	local04, local04
0b79c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b7a0     35 00 00 FF 
0b7a4     0C E4 85 F1 | 	sub	objptr, ##27148
0b7a8     30 FE 9F 5D |  if_ne	jmp	#LR__0950
0b7ac                 | LR__0954
0b7ac     14 2D 02 F6 | 	mov	local04, local02
0b7b0     01 2C 66 F0 | 	shl	local04, #1
0b7b4     14 2D 02 F1 | 	add	local04, local02
0b7b8     02 2C 66 F0 | 	shl	local04, #2
0b7bc     47 00 00 FF 
0b7c0     7C E4 05 F1 | 	add	objptr, ##36476
0b7c4     F2 2C 02 F1 | 	add	local04, objptr
0b7c8     04 2C 06 F1 | 	add	local04, #4
0b7cc     16 03 68 FC | 	wrlong	#1, local04
0b7d0     47 00 00 FF 
0b7d4     7C E4 85 F1 | 	sub	objptr, ##36476
0b7d8                 | LR__0955
0b7d8                 | ' 
0b7d8                 | ' if lparts(ct).part$="gosub" then
0b7d8     37 00 00 FF 
0b7dc     44 E4 05 F1 | 	add	objptr, ##28228
0b7e0     F2 2A 02 FB | 	rdlong	local03, objptr
0b7e4     03 2A 66 F0 | 	shl	local03, #3
0b7e8     02 00 00 FF 
0b7ec     38 E4 85 F1 | 	sub	objptr, ##1080
0b7f0     F2 2A 02 F1 | 	add	local03, objptr
0b7f4     15 13 02 FB | 	rdlong	arg01, local03
0b7f8     B9 01 00 FF 
0b7fc     1E 15 06 F6 | 	mov	arg02, ##@LR__5888
0b800     35 00 00 FF 
0b804     0C E4 85 F1 | 	sub	objptr, ##27148
0b808     88 B8 B1 FD | 	call	#__system___string_cmp
0b80c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b810     84 02 90 5D |  if_ne	jmp	#LR__0961
0b814     37 00 00 FF 
0b818     44 E4 05 F1 | 	add	objptr, ##28228
0b81c     F2 2A 02 FB | 	rdlong	local03, objptr
0b820     37 00 00 FF 
0b824     44 E4 85 F1 | 	sub	objptr, ##28228
0b828     01 2A 06 F1 | 	add	local03, #1
0b82c                 | '   i=ct+1
0b82c                 | '   do
0b82c                 | LR__0956
0b82c                 | '     if lparts(i).token=token_decimal then
0b82c     15 2D 02 F6 | 	mov	local04, local03
0b830     03 2C 66 F0 | 	shl	local04, #3
0b834     35 00 00 FF 
0b838     0C E4 05 F1 | 	add	objptr, ##27148
0b83c     F2 2C 02 F1 | 	add	local04, objptr
0b840     04 2C 06 F1 | 	add	local04, #4
0b844     16 2D 02 FB | 	rdlong	local04, local04
0b848     01 00 00 FF 
0b84c     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b850     35 00 00 FF 
0b854     0C E4 85 F1 | 	sub	objptr, ##27148
0b858     4C 01 90 5D |  if_ne	jmp	#LR__0957
0b85c     4A 00 00 FF 
0b860     7C E4 05 F1 | 	add	objptr, ##38012
0b864     F2 FA 01 FB | 	rdlong	result1, objptr
0b868     FD 2C 02 F6 | 	mov	local04, result1
0b86c     01 2C 66 F0 | 	shl	local04, #1
0b870     FD 2C 02 F1 | 	add	local04, result1
0b874     02 2C 66 F0 | 	shl	local04, #2
0b878     03 00 00 FF 
0b87c     00 E4 85 F1 | 	sub	objptr, ##1536
0b880     F2 2C 02 F1 | 	add	local04, objptr
0b884     08 2C 06 F1 | 	add	local04, #8
0b888     16 53 69 FC | 	wrlong	#169, local04
0b88c     03 00 00 FF 
0b890     00 E4 05 F1 | 	add	objptr, ##1536
0b894     F2 FA 01 FB | 	rdlong	result1, objptr
0b898     01 FA 05 F1 | 	add	result1, #1
0b89c     F2 FA 61 FC | 	wrlong	result1, objptr
0b8a0     FD 2C 02 F6 | 	mov	local04, result1
0b8a4     01 2C 66 F0 | 	shl	local04, #1
0b8a8     FD 2C 02 F1 | 	add	local04, result1
0b8ac     02 2C 66 F0 | 	shl	local04, #2
0b8b0     03 00 00 FF 
0b8b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b8b8     F2 2C 02 F1 | 	add	local04, objptr
0b8bc     00 00 C0 FF 
0b8c0     16 01 68 FC | 	wrlong	##-2147483648, local04
0b8c4     03 00 00 FF 
0b8c8     00 E4 05 F1 | 	add	objptr, ##1536
0b8cc     F2 FA 01 FB | 	rdlong	result1, objptr
0b8d0     FD 2C 02 F6 | 	mov	local04, result1
0b8d4     01 2C 66 F0 | 	shl	local04, #1
0b8d8     FD 2C 02 F1 | 	add	local04, result1
0b8dc     02 2C 66 F0 | 	shl	local04, #2
0b8e0     03 00 00 FF 
0b8e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b8e8     F2 2C 02 F1 | 	add	local04, objptr
0b8ec     15 13 02 F6 | 	mov	arg01, local03
0b8f0     03 12 66 F0 | 	shl	arg01, #3
0b8f4     12 00 00 FF 
0b8f8     70 E4 85 F1 | 	sub	objptr, ##9328
0b8fc     F2 12 02 F1 | 	add	arg01, objptr
0b900     09 13 02 FB | 	rdlong	arg01, arg01
0b904     00 14 06 F6 | 	mov	arg02, #0
0b908     35 00 00 FF 
0b90c     0C E4 85 F1 | 	sub	objptr, ##27148
0b910     48 EC B1 FD | 	call	#__system____builtin_atoi
0b914     04 2C 06 F1 | 	add	local04, #4
0b918     16 FB 61 FC | 	wrlong	result1, local04
0b91c     4A 00 00 FF 
0b920     7C E4 05 F1 | 	add	objptr, ##38012
0b924     F2 12 02 FB | 	rdlong	arg01, objptr
0b928     09 2D 02 F6 | 	mov	local04, arg01
0b92c     01 2C 66 F0 | 	shl	local04, #1
0b930     09 2D 02 F1 | 	add	local04, arg01
0b934     02 2C 66 F0 | 	shl	local04, #2
0b938     03 00 00 FF 
0b93c     00 E4 85 F1 | 	sub	objptr, ##1536
0b940     F2 2C 02 F1 | 	add	local04, objptr
0b944     08 2C 06 F1 | 	add	local04, #8
0b948     16 A7 68 FC | 	wrlong	#83, local04
0b94c     03 00 00 FF 
0b950     00 E4 05 F1 | 	add	objptr, ##1536
0b954     F2 12 02 FB | 	rdlong	arg01, objptr
0b958     01 12 06 F1 | 	add	arg01, #1
0b95c     F2 12 62 FC | 	wrlong	arg01, objptr
0b960     01 26 06 F1 | 	add	local01, #1
0b964     09 2D 02 F6 | 	mov	local04, arg01
0b968     01 2C 66 F0 | 	shl	local04, #1
0b96c     09 2D 02 F1 | 	add	local04, arg01
0b970     02 2C 66 F0 | 	shl	local04, #2
0b974     03 00 00 FF 
0b978     00 E4 85 F1 | 	sub	objptr, ##1536
0b97c     F2 2C 02 F1 | 	add	local04, objptr
0b980     08 2C 06 F1 | 	add	local04, #8
0b984     16 5B 68 FC | 	wrlong	#45, local04
0b988     03 00 00 FF 
0b98c     00 E4 05 F1 | 	add	objptr, ##1536
0b990     F2 2C 02 FB | 	rdlong	local04, objptr
0b994     01 2C 06 F1 | 	add	local04, #1
0b998     F2 2C 62 FC | 	wrlong	local04, objptr
0b99c     4A 00 00 FF 
0b9a0     7C E4 85 F1 | 	sub	objptr, ##38012
0b9a4     08 00 90 FD | 	jmp	#LR__0958
0b9a8                 | LR__0957
0b9a8                 | '       return 17
0b9a8     11 FA 05 F6 | 	mov	result1, #17
0b9ac     9C 01 90 FD | 	jmp	#LR__0965
0b9b0                 | LR__0958
0b9b0     01 2A 06 F1 | 	add	local03, #1
0b9b4                 | '     i+=1
0b9b4                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b9b4     15 2D 02 F6 | 	mov	local04, local03
0b9b8     03 2C 66 F0 | 	shl	local04, #3
0b9bc     35 00 00 FF 
0b9c0     0C E4 05 F1 | 	add	objptr, ##27148
0b9c4     F2 2C 02 F1 | 	add	local04, objptr
0b9c8     04 2C 06 F1 | 	add	local04, #4
0b9cc     16 2D 02 FB | 	rdlong	local04, local04
0b9d0     11 2C 0E F2 | 	cmp	local04, #17 wz
0b9d4     35 00 00 FF 
0b9d8     0C E4 85 F1 | 	sub	objptr, ##27148
0b9dc     30 00 90 AD |  if_e	jmp	#LR__0959
0b9e0     15 2D 02 F6 | 	mov	local04, local03
0b9e4     03 2C 66 F0 | 	shl	local04, #3
0b9e8     35 00 00 FF 
0b9ec     0C E4 05 F1 | 	add	objptr, ##27148
0b9f0     F2 2C 02 F1 | 	add	local04, objptr
0b9f4     04 2C 06 F1 | 	add	local04, #4
0b9f8     16 2D 02 FB | 	rdlong	local04, local04
0b9fc     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ba00     35 00 00 FF 
0ba04     0C E4 85 F1 | 	sub	objptr, ##27148
0ba08     15 FA 05 56 |  if_ne	mov	result1, #21
0ba0c     3C 01 90 5D |  if_ne	jmp	#LR__0965
0ba10                 | LR__0959
0ba10                 | '     if lparts(i).token=token_end then exit loop
0ba10     15 2D 02 F6 | 	mov	local04, local03
0ba14     03 2C 66 F0 | 	shl	local04, #3
0ba18     35 00 00 FF 
0ba1c     0C E4 05 F1 | 	add	objptr, ##27148
0ba20     F2 2C 02 F1 | 	add	local04, objptr
0ba24     04 2C 06 F1 | 	add	local04, #4
0ba28     16 2D 02 FB | 	rdlong	local04, local04
0ba2c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ba30     35 00 00 FF 
0ba34     0C E4 85 F1 | 	sub	objptr, ##27148
0ba38     30 00 90 AD |  if_e	jmp	#LR__0960
0ba3c     01 2A 06 F1 | 	add	local03, #1
0ba40     15 2D 02 F6 | 	mov	local04, local03
0ba44     03 2C 66 F0 | 	shl	local04, #3
0ba48     35 00 00 FF 
0ba4c     0C E4 05 F1 | 	add	objptr, ##27148
0ba50     F2 2C 02 F1 | 	add	local04, objptr
0ba54     04 2C 06 F1 | 	add	local04, #4
0ba58     16 2D 02 FB | 	rdlong	local04, local04
0ba5c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ba60     35 00 00 FF 
0ba64     0C E4 85 F1 | 	sub	objptr, ##27148
0ba68     C0 FD 9F 5D |  if_ne	jmp	#LR__0956
0ba6c                 | LR__0960
0ba6c     14 2D 02 F6 | 	mov	local04, local02
0ba70     01 2C 66 F0 | 	shl	local04, #1
0ba74     14 2D 02 F1 | 	add	local04, local02
0ba78     02 2C 66 F0 | 	shl	local04, #2
0ba7c     47 00 00 FF 
0ba80     7C E4 05 F1 | 	add	objptr, ##36476
0ba84     F2 2C 02 F1 | 	add	local04, objptr
0ba88     04 2C 06 F1 | 	add	local04, #4
0ba8c     16 07 68 FC | 	wrlong	#3, local04
0ba90     47 00 00 FF 
0ba94     7C E4 85 F1 | 	sub	objptr, ##36476
0ba98                 | LR__0961
0ba98     14 2B 02 F6 | 	mov	local03, local02
0ba9c     01 2A 66 F0 | 	shl	local03, #1
0baa0     14 2B 02 F1 | 	add	local03, local02
0baa4     02 2A 66 F0 | 	shl	local03, #2
0baa8     47 00 00 FF 
0baac     7C E4 05 F1 | 	add	objptr, ##36476
0bab0     F2 2A 02 F1 | 	add	local03, objptr
0bab4     15 27 62 FC | 	wrlong	local01, local03
0bab8                 | ' compiledline(onlineptr).result.uresult=numpar
0bab8                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0bab8     03 00 00 FF 
0babc     00 E4 05 F1 | 	add	objptr, ##1536
0bac0     F2 2A 02 FB | 	rdlong	local03, objptr
0bac4     4A 00 00 FF 
0bac8     7C E4 85 F1 | 	sub	objptr, ##38012
0bacc     97 3C 48 FB | 	callpa	#(@LR__0964-@LR__0962)>>2,fcache_load_ptr_
0bad0                 | LR__0962
0bad0     15 2D 02 F6 | 	mov	local04, local03
0bad4     01 2C 66 F0 | 	shl	local04, #1
0bad8     15 2D 02 F1 | 	add	local04, local03
0badc     02 2C 66 F0 | 	shl	local04, #2
0bae0     47 00 00 FF 
0bae4     7C E4 05 F1 | 	add	objptr, ##36476
0bae8     F2 2C 02 F1 | 	add	local04, objptr
0baec     08 2C 06 F1 | 	add	local04, #8
0baf0     16 2D 02 FB | 	rdlong	local04, local04
0baf4     2D 2C 0E F2 | 	cmp	local04, #45 wz
0baf8     47 00 00 FF 
0bafc     7C E4 85 F1 | 	sub	objptr, ##36476
0bb00     38 00 90 5D |  if_ne	jmp	#LR__0963
0bb04     15 2D 02 F6 | 	mov	local04, local03
0bb08     01 2C 66 F0 | 	shl	local04, #1
0bb0c     15 2D 02 F1 | 	add	local04, local03
0bb10     02 2C 66 F0 | 	shl	local04, #2
0bb14     47 00 00 FF 
0bb18     7C E4 05 F1 | 	add	objptr, ##36476
0bb1c     F2 2C 02 F1 | 	add	local04, objptr
0bb20     03 00 00 FF 
0bb24     00 E4 05 F1 | 	add	objptr, ##1536
0bb28     F2 26 02 FB | 	rdlong	local01, objptr
0bb2c     4A 00 00 FF 
0bb30     7C E4 85 F1 | 	sub	objptr, ##38012
0bb34     02 26 86 F1 | 	sub	local01, #2
0bb38     16 27 62 FC | 	wrlong	local01, local04
0bb3c                 | LR__0963
0bb3c     01 2A 86 F1 | 	sub	local03, #1
0bb40     14 2B 52 F2 | 	cmps	local03, local02 wc
0bb44     88 FF 9F 3D |  if_ae	jmp	#LR__0962
0bb48                 | LR__0964
0bb48                 | ' return 0
0bb48     00 FA 05 F6 | 	mov	result1, #0
0bb4c                 | LR__0965
0bb4c     A7 F0 03 F6 | 	mov	ptra, fp
0bb50     B2 00 A0 FD | 	call	#popregs_
0bb54                 | _compile_on_ret
0bb54     2D 00 64 FD | 	ret
0bb58                 | 
0bb58                 | ' 
0bb58                 | ' '----- A helper for compile_input and compile_read
0bb58                 | '  
0bb58                 | ' function getaddr() as ulong
0bb58                 | _getaddr
0bb58     0B 4A 05 F6 | 	mov	COUNT_, #11
0bb5c     A8 00 A0 FD | 	call	#pushregs_
0bb60     37 00 00 FF 
0bb64     44 E4 05 F1 | 	add	objptr, ##28228
0bb68     F2 2C 02 FB | 	rdlong	local04, objptr
0bb6c     03 2C 66 F0 | 	shl	local04, #3
0bb70     02 00 00 FF 
0bb74     38 E4 85 F1 | 	sub	objptr, ##1080
0bb78     F2 2C 02 F1 | 	add	local04, objptr
0bb7c     16 2F 02 FB | 	rdlong	local05, local04
0bb80     01 30 66 F6 | 	neg	local06, #1
0bb84                 | ' 
0bb84                 | ' varname$=lparts(ct).part$
0bb84                 | ' j=-1
0bb84                 | ' 
0bb84                 | ' for i=0 to varnum-1
0bb84     00 32 06 F6 | 	mov	local07, #0
0bb88     04 E4 85 F1 | 	sub	objptr, #4
0bb8c     F2 34 02 FB | 	rdlong	local08, objptr
0bb90     35 00 00 FF 
0bb94     08 E4 85 F1 | 	sub	objptr, ##27144
0bb98                 | LR__0970
0bb98     1A 33 52 F2 | 	cmps	local07, local08 wc
0bb9c     38 00 90 3D |  if_ae	jmp	#LR__0971
0bba0                 | '   if variables(i).name=varname$ then j=i : exit
0bba0     19 2D 02 F6 | 	mov	local04, local07
0bba4     04 2C 66 F0 | 	shl	local04, #4
0bba8     14 00 00 FF 
0bbac     F8 E5 05 F1 | 	add	objptr, ##10744
0bbb0     F2 2C 02 F1 | 	add	local04, objptr
0bbb4     16 13 02 FB | 	rdlong	arg01, local04
0bbb8     17 15 02 F6 | 	mov	arg02, local05
0bbbc     14 00 00 FF 
0bbc0     F8 E5 85 F1 | 	sub	objptr, ##10744
0bbc4     CC B4 B1 FD | 	call	#__system___string_cmp
0bbc8     00 FA 0D F2 | 	cmp	result1, #0 wz
0bbcc     19 31 02 A6 |  if_e	mov	local06, local07
0bbd0     01 32 06 51 |  if_ne	add	local07, #1
0bbd4     C0 FF 9F 5D |  if_ne	jmp	#LR__0970
0bbd8                 | LR__0971
0bbd8                 | ' if  j=-1 andalso varnum<maxvars then   
0bbd8     FF FF 7F FF 
0bbdc     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bbe0     A8 00 90 5D |  if_ne	jmp	#LR__0972
0bbe4     35 00 00 FF 
0bbe8     08 E4 05 F1 | 	add	objptr, ##27144
0bbec     F2 34 02 FB | 	rdlong	local08, objptr
0bbf0     35 00 00 FF 
0bbf4     08 E4 85 F1 | 	sub	objptr, ##27144
0bbf8     02 00 00 FF 
0bbfc     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bc00     88 00 90 3D |  if_ae	jmp	#LR__0972
0bc04     35 00 00 FF 
0bc08     08 E4 05 F1 | 	add	objptr, ##27144
0bc0c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc10     04 2C 66 F0 | 	shl	local04, #4
0bc14     20 00 00 FF 
0bc18     10 E4 85 F1 | 	sub	objptr, ##16400
0bc1c     F2 2C 02 F1 | 	add	local04, objptr
0bc20     16 2F 62 FC | 	wrlong	local05, local04
0bc24     20 00 00 FF 
0bc28     10 E4 05 F1 | 	add	objptr, ##16400
0bc2c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc30     04 2C 66 F0 | 	shl	local04, #4
0bc34     20 00 00 FF 
0bc38     10 E4 85 F1 | 	sub	objptr, ##16400
0bc3c     F2 2C 02 F1 | 	add	local04, objptr
0bc40     04 2C 06 F1 | 	add	local04, #4
0bc44     16 01 68 FC | 	wrlong	#0, local04
0bc48     20 00 00 FF 
0bc4c     10 E4 05 F1 | 	add	objptr, ##16400
0bc50     F2 2C 02 FB | 	rdlong	local04, objptr
0bc54     04 2C 66 F0 | 	shl	local04, #4
0bc58     20 00 00 FF 
0bc5c     10 E4 85 F1 | 	sub	objptr, ##16400
0bc60     F2 2C 02 F1 | 	add	local04, objptr
0bc64     0C 2C 06 F1 | 	add	local04, #12
0bc68     16 39 68 FC | 	wrlong	#28, local04
0bc6c     20 00 00 FF 
0bc70     10 E4 05 F1 | 	add	objptr, ##16400
0bc74     F2 34 02 FB | 	rdlong	local08, objptr
0bc78     1A 31 02 F6 | 	mov	local06, local08
0bc7c     01 34 06 F1 | 	add	local08, #1
0bc80     F2 34 62 FC | 	wrlong	local08, objptr
0bc84     35 00 00 FF 
0bc88     08 E4 85 F1 | 	sub	objptr, ##27144
0bc8c                 | LR__0972
0bc8c     00 34 06 F6 | 	mov	local08, #0
0bc90                 | ' numpar=0
0bc90                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bc90     37 00 00 FF 
0bc94     44 E4 05 F1 | 	add	objptr, ##28228
0bc98     F2 2C 02 FB | 	rdlong	local04, objptr
0bc9c     01 2C 06 F1 | 	add	local04, #1
0bca0     03 2C 66 F0 | 	shl	local04, #3
0bca4     02 00 00 FF 
0bca8     38 E4 85 F1 | 	sub	objptr, ##1080
0bcac     F2 2C 02 F1 | 	add	local04, objptr
0bcb0     04 2C 06 F1 | 	add	local04, #4
0bcb4     16 33 02 FB | 	rdlong	local07, local04
0bcb8     15 32 0E F2 | 	cmp	local07, #21 wz
0bcbc     35 00 00 FF 
0bcc0     0C E4 85 F1 | 	sub	objptr, ##27148
0bcc4     54 01 90 5D |  if_ne	jmp	#LR__0977
0bcc8     37 00 00 FF 
0bccc     44 E4 05 F1 | 	add	objptr, ##28228
0bcd0     F2 36 02 FB | 	rdlong	local09, objptr
0bcd4     01 36 06 F1 | 	add	local09, #1
0bcd8     F2 36 62 FC | 	wrlong	local09, objptr
0bcdc     37 00 00 FF 
0bce0     44 E4 85 F1 | 	sub	objptr, ##28228
0bce4                 | '   ct+=1 											' omit this lpar, this is for expr list
0bce4                 | '   do
0bce4                 | LR__0973
0bce4     37 00 00 FF 
0bce8     44 E4 05 F1 | 	add	objptr, ##28228
0bcec     F2 2C 02 FB | 	rdlong	local04, objptr
0bcf0     01 2C 06 F1 | 	add	local04, #1
0bcf4     F2 2C 62 FC | 	wrlong	local04, objptr
0bcf8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bcf8                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bcf8     03 2C 66 F0 | 	shl	local04, #3
0bcfc     02 00 00 FF 
0bd00     38 E4 85 F1 | 	sub	objptr, ##1080
0bd04     F2 2C 02 F1 | 	add	local04, objptr
0bd08     04 2C 06 F1 | 	add	local04, #4
0bd0c     16 37 02 FB | 	rdlong	local09, local04
0bd10     15 36 0E F2 | 	cmp	local09, #21 wz
0bd14     35 00 00 FF 
0bd18     0C E4 85 F1 | 	sub	objptr, ##27148
0bd1c     44 00 90 5D |  if_ne	jmp	#LR__0974
0bd20     37 00 00 FF 
0bd24     44 E4 05 F1 | 	add	objptr, ##28228
0bd28     F2 36 02 FB | 	rdlong	local09, objptr
0bd2c     01 36 06 F1 | 	add	local09, #1
0bd30     F2 36 62 FC | 	wrlong	local09, objptr
0bd34     37 00 00 FF 
0bd38     44 E4 85 F1 | 	sub	objptr, ##28228
0bd3c     AC 01 B0 FD | 	call	#_expr
0bd40     FD 38 02 F6 | 	mov	local10, result1
0bd44     37 00 00 FF 
0bd48     44 E4 05 F1 | 	add	objptr, ##28228
0bd4c     F2 36 02 FB | 	rdlong	local09, objptr
0bd50     01 36 06 F1 | 	add	local09, #1
0bd54     F2 36 62 FC | 	wrlong	local09, objptr
0bd58     37 00 00 FF 
0bd5c     44 E4 85 F1 | 	sub	objptr, ##28228
0bd60     08 00 90 FD | 	jmp	#LR__0975
0bd64                 | LR__0974
0bd64     84 01 B0 FD | 	call	#_expr
0bd68     FD 38 02 F6 | 	mov	local10, result1
0bd6c                 | LR__0975
0bd6c                 | '     if err>0 then return err
0bd6c     01 38 56 F2 | 	cmps	local10, #1 wc
0bd70     1C FB 01 36 |  if_ae	mov	result1, local10
0bd74     68 01 90 3D |  if_ae	jmp	#LR__0978
0bd78     01 34 06 F1 | 	add	local08, #1
0bd7c     37 00 00 FF 
0bd80     44 E4 05 F1 | 	add	objptr, ##28228
0bd84     F2 2C 02 FB | 	rdlong	local04, objptr
0bd88     03 2C 66 F0 | 	shl	local04, #3
0bd8c     02 00 00 FF 
0bd90     38 E4 85 F1 | 	sub	objptr, ##1080
0bd94     F2 2C 02 F1 | 	add	local04, objptr
0bd98     04 2C 06 F1 | 	add	local04, #4
0bd9c     16 39 02 FB | 	rdlong	local10, local04
0bda0     14 38 0E F2 | 	cmp	local10, #20 wz
0bda4     35 00 00 FF 
0bda8     0C E4 85 F1 | 	sub	objptr, ##27148
0bdac     34 00 90 AD |  if_e	jmp	#LR__0976
0bdb0     37 00 00 FF 
0bdb4     44 E4 05 F1 | 	add	objptr, ##28228
0bdb8     F2 38 02 FB | 	rdlong	local10, objptr
0bdbc     03 38 66 F0 | 	shl	local10, #3
0bdc0     02 00 00 FF 
0bdc4     38 E4 85 F1 | 	sub	objptr, ##1080
0bdc8     F2 38 02 F1 | 	add	local10, objptr
0bdcc     04 38 06 F1 | 	add	local10, #4
0bdd0     1C 39 02 FB | 	rdlong	local10, local10
0bdd4     FE 39 0E F2 | 	cmp	local10, #510 wz
0bdd8     35 00 00 FF 
0bddc     0C E4 85 F1 | 	sub	objptr, ##27148
0bde0     00 FF 9F 5D |  if_ne	jmp	#LR__0973
0bde4                 | LR__0976
0bde4                 | '     if lparts(ct).token=token_end then return 14
0bde4     37 00 00 FF 
0bde8     44 E4 05 F1 | 	add	objptr, ##28228
0bdec     F2 2C 02 FB | 	rdlong	local04, objptr
0bdf0     03 2C 66 F0 | 	shl	local04, #3
0bdf4     02 00 00 FF 
0bdf8     38 E4 85 F1 | 	sub	objptr, ##1080
0bdfc     F2 2C 02 F1 | 	add	local04, objptr
0be00     04 2C 06 F1 | 	add	local04, #4
0be04     16 39 02 FB | 	rdlong	local10, local04
0be08     FE 39 0E F2 | 	cmp	local10, #510 wz
0be0c     35 00 00 FF 
0be10     0C E4 85 F1 | 	sub	objptr, ##27148
0be14     0E FA 05 A6 |  if_e	mov	result1, #14
0be18     C4 00 90 AD |  if_e	jmp	#LR__0978
0be1c                 | LR__0977
0be1c     1A 29 02 F6 | 	mov	local02, local08
0be20     12 2A 06 F6 | 	mov	local03, #18
0be24     18 27 02 F6 | 	mov	local01, local06
0be28     13 37 02 F6 | 	mov	local09, local01
0be2c     14 3B 02 F6 | 	mov	local11, local02
0be30     15 27 02 F6 | 	mov	local01, local03
0be34     4A 00 00 FF 
0be38     7C E4 05 F1 | 	add	objptr, ##38012
0be3c     F2 38 02 FB | 	rdlong	local10, objptr
0be40     1C 35 02 F6 | 	mov	local08, local10
0be44     01 34 66 F0 | 	shl	local08, #1
0be48     1C 35 02 F1 | 	add	local08, local10
0be4c     02 34 66 F0 | 	shl	local08, #2
0be50     03 00 00 FF 
0be54     00 E4 85 F1 | 	sub	objptr, ##1536
0be58     F2 34 02 F1 | 	add	local08, objptr
0be5c     1A 37 62 FC | 	wrlong	local09, local08
0be60     03 00 00 FF 
0be64     00 E4 05 F1 | 	add	objptr, ##1536
0be68     F2 38 02 FB | 	rdlong	local10, objptr
0be6c     1C 37 02 F6 | 	mov	local09, local10
0be70     01 36 66 F0 | 	shl	local09, #1
0be74     1C 37 02 F1 | 	add	local09, local10
0be78     02 36 66 F0 | 	shl	local09, #2
0be7c     03 00 00 FF 
0be80     00 E4 85 F1 | 	sub	objptr, ##1536
0be84     F2 36 02 F1 | 	add	local09, objptr
0be88     04 36 06 F1 | 	add	local09, #4
0be8c     1B 3B 62 FC | 	wrlong	local11, local09
0be90     03 00 00 FF 
0be94     00 E4 05 F1 | 	add	objptr, ##1536
0be98     F2 3A 02 FB | 	rdlong	local11, objptr
0be9c     1D 39 02 F6 | 	mov	local10, local11
0bea0     01 38 66 F0 | 	shl	local10, #1
0bea4     1D 39 02 F1 | 	add	local10, local11
0bea8     02 38 66 F0 | 	shl	local10, #2
0beac     03 00 00 FF 
0beb0     00 E4 85 F1 | 	sub	objptr, ##1536
0beb4     F2 38 02 F1 | 	add	local10, objptr
0beb8     08 38 06 F1 | 	add	local10, #8
0bebc     1C 27 62 FC | 	wrlong	local01, local10
0bec0     03 00 00 FF 
0bec4     00 E4 05 F1 | 	add	objptr, ##1536
0bec8     F2 36 02 FB | 	rdlong	local09, objptr
0becc     01 36 06 F1 | 	add	local09, #1
0bed0     F2 36 62 FC | 	wrlong	local09, objptr
0bed4     4A 00 00 FF 
0bed8     7C E4 85 F1 | 	sub	objptr, ##38012
0bedc                 | ' t2.result.twowords(1)=numpar
0bedc                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bedc                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bedc                 | ' return 0
0bedc     00 FA 05 F6 | 	mov	result1, #0
0bee0                 | LR__0978
0bee0     A7 F0 03 F6 | 	mov	ptra, fp
0bee4     B2 00 A0 FD | 	call	#popregs_
0bee8                 | _getaddr_ret
0bee8     2D 00 64 FD | 	ret
0beec                 | 
0beec                 | ' 
0beec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' '--------------------------------------------- 
0beec                 | ' 
0beec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0beec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' 
0beec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' '
0beec                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0beec                 | ' '
0beec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' 
0beec                 | ' function expr() as ulong 
0beec                 | _expr
0beec     07 4A 05 F6 | 	mov	COUNT_, #7
0bef0     A8 00 A0 FD | 	call	#pushregs_
0bef4                 | _expr_enter
0bef4     37 00 00 FF 
0bef8     44 E4 05 F1 | 	add	objptr, ##28228
0befc     F2 2C 02 FB | 	rdlong	local04, objptr
0bf00     03 2C 66 F0 | 	shl	local04, #3
0bf04     02 00 00 FF 
0bf08     38 E4 85 F1 | 	sub	objptr, ##1080
0bf0c     F2 2C 02 F1 | 	add	local04, objptr
0bf10     04 2C 06 F1 | 	add	local04, #4
0bf14     16 2F 02 FB | 	rdlong	local05, local04
0bf18                 | ' 
0bf18                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bf18     FE 2F 0E F2 | 	cmp	local05, #510 wz
0bf1c     35 00 00 FF 
0bf20     0C E4 85 F1 | 	sub	objptr, ##27148
0bf24     C4 00 90 5D |  if_ne	jmp	#LR__0980
0bf28     1D 26 06 F6 | 	mov	local01, #29
0bf2c     FF 2A 06 F6 | 	mov	local03, #255
0bf30     13 31 02 F6 | 	mov	local06, local01
0bf34     14 33 02 F6 | 	mov	local07, local02
0bf38     15 27 02 F6 | 	mov	local01, local03
0bf3c     4A 00 00 FF 
0bf40     7C E4 05 F1 | 	add	objptr, ##38012
0bf44     F2 2E 02 FB | 	rdlong	local05, objptr
0bf48     17 2D 02 F6 | 	mov	local04, local05
0bf4c     01 2C 66 F0 | 	shl	local04, #1
0bf50     17 2D 02 F1 | 	add	local04, local05
0bf54     02 2C 66 F0 | 	shl	local04, #2
0bf58     03 00 00 FF 
0bf5c     00 E4 85 F1 | 	sub	objptr, ##1536
0bf60     F2 2C 02 F1 | 	add	local04, objptr
0bf64     16 31 62 FC | 	wrlong	local06, local04
0bf68     03 00 00 FF 
0bf6c     00 E4 05 F1 | 	add	objptr, ##1536
0bf70     F2 30 02 FB | 	rdlong	local06, objptr
0bf74     18 2F 02 F6 | 	mov	local05, local06
0bf78     01 2E 66 F0 | 	shl	local05, #1
0bf7c     18 2F 02 F1 | 	add	local05, local06
0bf80     02 2E 66 F0 | 	shl	local05, #2
0bf84     03 00 00 FF 
0bf88     00 E4 85 F1 | 	sub	objptr, ##1536
0bf8c     F2 2E 02 F1 | 	add	local05, objptr
0bf90     04 2E 06 F1 | 	add	local05, #4
0bf94     17 33 62 FC | 	wrlong	local07, local05
0bf98     03 00 00 FF 
0bf9c     00 E4 05 F1 | 	add	objptr, ##1536
0bfa0     F2 32 02 FB | 	rdlong	local07, objptr
0bfa4     19 31 02 F6 | 	mov	local06, local07
0bfa8     01 30 66 F0 | 	shl	local06, #1
0bfac     19 31 02 F1 | 	add	local06, local07
0bfb0     02 30 66 F0 | 	shl	local06, #2
0bfb4     03 00 00 FF 
0bfb8     00 E4 85 F1 | 	sub	objptr, ##1536
0bfbc     F2 30 02 F1 | 	add	local06, objptr
0bfc0     08 30 06 F1 | 	add	local06, #8
0bfc4     18 27 62 FC | 	wrlong	local01, local06
0bfc8     03 00 00 FF 
0bfcc     00 E4 05 F1 | 	add	objptr, ##1536
0bfd0     F2 30 02 FB | 	rdlong	local06, objptr
0bfd4     01 30 06 F1 | 	add	local06, #1
0bfd8     F2 30 62 FC | 	wrlong	local06, objptr
0bfdc     4A 00 00 FF 
0bfe0     7C E4 85 F1 | 	sub	objptr, ##38012
0bfe4     1D FA 05 F6 | 	mov	result1, #29
0bfe8     64 01 90 FD | 	jmp	#LR__0983
0bfec                 | LR__0980
0bfec     00 26 06 F6 | 	mov	local01, #0
0bff0     68 01 B0 FD | 	call	#_addsub
0bff4                 | ' t3.result.uresult=0
0bff4                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bff4                 | ' if err>0 then return err
0bff4     01 FA 15 F2 | 	cmp	result1, #1 wc
0bff8     54 01 90 3D |  if_ae	jmp	#LR__0983
0bffc     37 00 00 FF 
0c000     44 E4 05 F1 | 	add	objptr, ##28228
0c004     F2 2C 02 FB | 	rdlong	local04, objptr
0c008     03 2C 66 F0 | 	shl	local04, #3
0c00c     02 00 00 FF 
0c010     38 E4 85 F1 | 	sub	objptr, ##1080
0c014     F2 2C 02 F1 | 	add	local04, objptr
0c018     04 2C 06 F1 | 	add	local04, #4
0c01c     16 2F 02 FB | 	rdlong	local05, local04
0c020                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0c020                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0c020     35 00 00 FF 
0c024     0C E4 85 F1 | 	sub	objptr, ##27148
0c028                 | LR__0981
0c028     1B 2E 0E F2 | 	cmp	local05, #27 wz
0c02c     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0c030     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0c034     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0c038     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0c03c     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0c040     08 01 90 5D |  if_ne	jmp	#LR__0982
0c044     37 00 00 FF 
0c048     44 E4 05 F1 | 	add	objptr, ##28228
0c04c     F2 30 02 FB | 	rdlong	local06, objptr
0c050     01 30 06 F1 | 	add	local06, #1
0c054     F2 30 62 FC | 	wrlong	local06, objptr
0c058     37 00 00 FF 
0c05c     44 E4 85 F1 | 	sub	objptr, ##28228
0c060     F8 00 B0 FD | 	call	#_addsub
0c064                 | '   ct+=1
0c064                 | '   err=addsub() : if err>0 then return err
0c064     01 FA 15 F2 | 	cmp	result1, #1 wc
0c068     E4 00 90 3D |  if_ae	jmp	#LR__0983
0c06c     17 2B 02 F6 | 	mov	local03, local05
0c070     13 31 02 F6 | 	mov	local06, local01
0c074     14 33 02 F6 | 	mov	local07, local02
0c078     15 2F 02 F6 | 	mov	local05, local03
0c07c     4A 00 00 FF 
0c080     7C E4 05 F1 | 	add	objptr, ##38012
0c084     F2 2C 02 FB | 	rdlong	local04, objptr
0c088     16 FB 01 F6 | 	mov	result1, local04
0c08c     01 FA 65 F0 | 	shl	result1, #1
0c090     16 FB 01 F1 | 	add	result1, local04
0c094     02 FA 65 F0 | 	shl	result1, #2
0c098     03 00 00 FF 
0c09c     00 E4 85 F1 | 	sub	objptr, ##1536
0c0a0     F2 FA 01 F1 | 	add	result1, objptr
0c0a4     FD 30 62 FC | 	wrlong	local06, result1
0c0a8     03 00 00 FF 
0c0ac     00 E4 05 F1 | 	add	objptr, ##1536
0c0b0     F2 30 02 FB | 	rdlong	local06, objptr
0c0b4     18 2D 02 F6 | 	mov	local04, local06
0c0b8     01 2C 66 F0 | 	shl	local04, #1
0c0bc     18 2D 02 F1 | 	add	local04, local06
0c0c0     02 2C 66 F0 | 	shl	local04, #2
0c0c4     03 00 00 FF 
0c0c8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0cc     F2 2C 02 F1 | 	add	local04, objptr
0c0d0     04 2C 06 F1 | 	add	local04, #4
0c0d4     16 33 62 FC | 	wrlong	local07, local04
0c0d8     03 00 00 FF 
0c0dc     00 E4 05 F1 | 	add	objptr, ##1536
0c0e0     F2 32 02 FB | 	rdlong	local07, objptr
0c0e4     19 31 02 F6 | 	mov	local06, local07
0c0e8     01 30 66 F0 | 	shl	local06, #1
0c0ec     19 31 02 F1 | 	add	local06, local07
0c0f0     02 30 66 F0 | 	shl	local06, #2
0c0f4     03 00 00 FF 
0c0f8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0fc     F2 30 02 F1 | 	add	local06, objptr
0c100     08 30 06 F1 | 	add	local06, #8
0c104     18 2F 62 FC | 	wrlong	local05, local06
0c108     03 00 00 FF 
0c10c     00 E4 05 F1 | 	add	objptr, ##1536
0c110     F2 30 02 FB | 	rdlong	local06, objptr
0c114     01 30 06 F1 | 	add	local06, #1
0c118     F2 30 62 FC | 	wrlong	local06, objptr
0c11c     13 00 00 FF 
0c120     38 E4 85 F1 | 	sub	objptr, ##9784
0c124     F2 2C 02 FB | 	rdlong	local04, objptr
0c128     03 2C 66 F0 | 	shl	local04, #3
0c12c     02 00 00 FF 
0c130     38 E4 85 F1 | 	sub	objptr, ##1080
0c134     F2 2C 02 F1 | 	add	local04, objptr
0c138     04 2C 06 F1 | 	add	local04, #4
0c13c     16 2F 02 FB | 	rdlong	local05, local04
0c140     35 00 00 FF 
0c144     0C E4 85 F1 | 	sub	objptr, ##27148
0c148     DC FE 9F FD | 	jmp	#LR__0981
0c14c                 | LR__0982
0c14c                 | ' return 0  
0c14c     00 FA 05 F6 | 	mov	result1, #0
0c150                 | LR__0983
0c150     A7 F0 03 F6 | 	mov	ptra, fp
0c154     B2 00 A0 FD | 	call	#popregs_
0c158                 | _expr_ret
0c158     2D 00 64 FD | 	ret
0c15c                 | 
0c15c                 | ' 
0c15c                 | ' ' Second level operators : add, sub, logic
0c15c                 | ' 
0c15c                 | ' function addsub() as ulong
0c15c                 | _addsub
0c15c     07 4A 05 F6 | 	mov	COUNT_, #7
0c160     A8 00 A0 FD | 	call	#pushregs_
0c164                 | _addsub_enter
0c164     00 26 06 F6 | 	mov	local01, #0
0c168     60 01 B0 FD | 	call	#_muldiv
0c16c                 | ' 
0c16c                 | ' t3.result.uresult=0
0c16c                 | ' err=muldiv() : if err>0 then return err           			 
0c16c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c170     4C 01 90 3D |  if_ae	jmp	#LR__0992
0c174     37 00 00 FF 
0c178     44 E4 05 F1 | 	add	objptr, ##28228
0c17c     F2 2C 02 FB | 	rdlong	local04, objptr
0c180     03 2C 66 F0 | 	shl	local04, #3
0c184     02 00 00 FF 
0c188     38 E4 85 F1 | 	sub	objptr, ##1080
0c18c     F2 2C 02 F1 | 	add	local04, objptr
0c190     04 2C 06 F1 | 	add	local04, #4
0c194     16 2F 02 FB | 	rdlong	local05, local04
0c198                 | ' op = lparts(ct).token				 
0c198                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c198     35 00 00 FF 
0c19c     0C E4 85 F1 | 	sub	objptr, ##27148
0c1a0                 | LR__0990
0c1a0     01 2E 0E F2 | 	cmp	local05, #1 wz
0c1a4     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c1a8     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c1ac     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c1b0     08 01 90 5D |  if_ne	jmp	#LR__0991
0c1b4     37 00 00 FF 
0c1b8     44 E4 05 F1 | 	add	objptr, ##28228
0c1bc     F2 2C 02 FB | 	rdlong	local04, objptr
0c1c0     01 2C 06 F1 | 	add	local04, #1
0c1c4     F2 2C 62 FC | 	wrlong	local04, objptr
0c1c8     37 00 00 FF 
0c1cc     44 E4 85 F1 | 	sub	objptr, ##28228
0c1d0     F8 00 B0 FD | 	call	#_muldiv
0c1d4                 | '   ct+=1
0c1d4                 | '   err=muldiv() : if err>0 then return err   
0c1d4     01 FA 15 F2 | 	cmp	result1, #1 wc
0c1d8     E4 00 90 3D |  if_ae	jmp	#LR__0992
0c1dc     17 2B 02 F6 | 	mov	local03, local05
0c1e0     13 31 02 F6 | 	mov	local06, local01
0c1e4     14 33 02 F6 | 	mov	local07, local02
0c1e8     15 2F 02 F6 | 	mov	local05, local03
0c1ec     4A 00 00 FF 
0c1f0     7C E4 05 F1 | 	add	objptr, ##38012
0c1f4     F2 2C 02 FB | 	rdlong	local04, objptr
0c1f8     16 FB 01 F6 | 	mov	result1, local04
0c1fc     01 FA 65 F0 | 	shl	result1, #1
0c200     16 FB 01 F1 | 	add	result1, local04
0c204     02 FA 65 F0 | 	shl	result1, #2
0c208     03 00 00 FF 
0c20c     00 E4 85 F1 | 	sub	objptr, ##1536
0c210     F2 FA 01 F1 | 	add	result1, objptr
0c214     FD 30 62 FC | 	wrlong	local06, result1
0c218     03 00 00 FF 
0c21c     00 E4 05 F1 | 	add	objptr, ##1536
0c220     F2 30 02 FB | 	rdlong	local06, objptr
0c224     18 2D 02 F6 | 	mov	local04, local06
0c228     01 2C 66 F0 | 	shl	local04, #1
0c22c     18 2D 02 F1 | 	add	local04, local06
0c230     02 2C 66 F0 | 	shl	local04, #2
0c234     03 00 00 FF 
0c238     00 E4 85 F1 | 	sub	objptr, ##1536
0c23c     F2 2C 02 F1 | 	add	local04, objptr
0c240     04 2C 06 F1 | 	add	local04, #4
0c244     16 33 62 FC | 	wrlong	local07, local04
0c248     03 00 00 FF 
0c24c     00 E4 05 F1 | 	add	objptr, ##1536
0c250     F2 32 02 FB | 	rdlong	local07, objptr
0c254     19 31 02 F6 | 	mov	local06, local07
0c258     01 30 66 F0 | 	shl	local06, #1
0c25c     19 31 02 F1 | 	add	local06, local07
0c260     02 30 66 F0 | 	shl	local06, #2
0c264     03 00 00 FF 
0c268     00 E4 85 F1 | 	sub	objptr, ##1536
0c26c     F2 30 02 F1 | 	add	local06, objptr
0c270     08 30 06 F1 | 	add	local06, #8
0c274     18 2F 62 FC | 	wrlong	local05, local06
0c278     03 00 00 FF 
0c27c     00 E4 05 F1 | 	add	objptr, ##1536
0c280     F2 30 02 FB | 	rdlong	local06, objptr
0c284     01 30 06 F1 | 	add	local06, #1
0c288     F2 30 62 FC | 	wrlong	local06, objptr
0c28c     13 00 00 FF 
0c290     38 E4 85 F1 | 	sub	objptr, ##9784
0c294     F2 2C 02 FB | 	rdlong	local04, objptr
0c298     03 2C 66 F0 | 	shl	local04, #3
0c29c     02 00 00 FF 
0c2a0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2a4     F2 2C 02 F1 | 	add	local04, objptr
0c2a8     04 2C 06 F1 | 	add	local04, #4
0c2ac     16 2F 02 FB | 	rdlong	local05, local04
0c2b0     35 00 00 FF 
0c2b4     0C E4 85 F1 | 	sub	objptr, ##27148
0c2b8     E4 FE 9F FD | 	jmp	#LR__0990
0c2bc                 | LR__0991
0c2bc                 | ' return 0
0c2bc     00 FA 05 F6 | 	mov	result1, #0
0c2c0                 | LR__0992
0c2c0     A7 F0 03 F6 | 	mov	ptra, fp
0c2c4     B2 00 A0 FD | 	call	#popregs_
0c2c8                 | _addsub_ret
0c2c8     2D 00 64 FD | 	ret
0c2cc                 | 
0c2cc                 | ' 
0c2cc                 | ' ' Third level operators : mul,div,shift,power
0c2cc                 | ' 
0c2cc                 | ' function muldiv() as ulong
0c2cc                 | _muldiv
0c2cc     07 4A 05 F6 | 	mov	COUNT_, #7
0c2d0     A8 00 A0 FD | 	call	#pushregs_
0c2d4                 | _muldiv_enter
0c2d4     00 26 06 F6 | 	mov	local01, #0
0c2d8     6C 01 B0 FD | 	call	#_getvalue
0c2dc                 | ' 
0c2dc                 | ' t3.result.uresult=0
0c2dc                 | ' err=getvalue() : if err>0 then return err     
0c2dc     01 FA 15 F2 | 	cmp	result1, #1 wc
0c2e0     58 01 90 3D |  if_ae	jmp	#LR__1002
0c2e4     37 00 00 FF 
0c2e8     44 E4 05 F1 | 	add	objptr, ##28228
0c2ec     F2 2C 02 FB | 	rdlong	local04, objptr
0c2f0     03 2C 66 F0 | 	shl	local04, #3
0c2f4     02 00 00 FF 
0c2f8     38 E4 85 F1 | 	sub	objptr, ##1080
0c2fc     F2 2C 02 F1 | 	add	local04, objptr
0c300     04 2C 06 F1 | 	add	local04, #4
0c304     16 2F 02 FB | 	rdlong	local05, local04
0c308                 | ' op = lparts(ct).token
0c308                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c308     35 00 00 FF 
0c30c     0C E4 85 F1 | 	sub	objptr, ##27148
0c310                 | LR__1000
0c310     05 2E 0E F2 | 	cmp	local05, #5 wz
0c314     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c318     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c31c     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c320     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c324     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c328     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c32c     08 01 90 5D |  if_ne	jmp	#LR__1001
0c330     37 00 00 FF 
0c334     44 E4 05 F1 | 	add	objptr, ##28228
0c338     F2 2C 02 FB | 	rdlong	local04, objptr
0c33c     01 2C 06 F1 | 	add	local04, #1
0c340     F2 2C 62 FC | 	wrlong	local04, objptr
0c344     37 00 00 FF 
0c348     44 E4 85 F1 | 	sub	objptr, ##28228
0c34c     F8 00 B0 FD | 	call	#_getvalue
0c350                 | '   ct+=1
0c350                 | '   err=getvalue() :if err>0 then return err   
0c350     01 FA 15 F2 | 	cmp	result1, #1 wc
0c354     E4 00 90 3D |  if_ae	jmp	#LR__1002
0c358     17 2B 02 F6 | 	mov	local03, local05
0c35c     13 31 02 F6 | 	mov	local06, local01
0c360     14 33 02 F6 | 	mov	local07, local02
0c364     15 2F 02 F6 | 	mov	local05, local03
0c368     4A 00 00 FF 
0c36c     7C E4 05 F1 | 	add	objptr, ##38012
0c370     F2 2C 02 FB | 	rdlong	local04, objptr
0c374     16 FB 01 F6 | 	mov	result1, local04
0c378     01 FA 65 F0 | 	shl	result1, #1
0c37c     16 FB 01 F1 | 	add	result1, local04
0c380     02 FA 65 F0 | 	shl	result1, #2
0c384     03 00 00 FF 
0c388     00 E4 85 F1 | 	sub	objptr, ##1536
0c38c     F2 FA 01 F1 | 	add	result1, objptr
0c390     FD 30 62 FC | 	wrlong	local06, result1
0c394     03 00 00 FF 
0c398     00 E4 05 F1 | 	add	objptr, ##1536
0c39c     F2 30 02 FB | 	rdlong	local06, objptr
0c3a0     18 2D 02 F6 | 	mov	local04, local06
0c3a4     01 2C 66 F0 | 	shl	local04, #1
0c3a8     18 2D 02 F1 | 	add	local04, local06
0c3ac     02 2C 66 F0 | 	shl	local04, #2
0c3b0     03 00 00 FF 
0c3b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c3b8     F2 2C 02 F1 | 	add	local04, objptr
0c3bc     04 2C 06 F1 | 	add	local04, #4
0c3c0     16 33 62 FC | 	wrlong	local07, local04
0c3c4     03 00 00 FF 
0c3c8     00 E4 05 F1 | 	add	objptr, ##1536
0c3cc     F2 32 02 FB | 	rdlong	local07, objptr
0c3d0     19 31 02 F6 | 	mov	local06, local07
0c3d4     01 30 66 F0 | 	shl	local06, #1
0c3d8     19 31 02 F1 | 	add	local06, local07
0c3dc     02 30 66 F0 | 	shl	local06, #2
0c3e0     03 00 00 FF 
0c3e4     00 E4 85 F1 | 	sub	objptr, ##1536
0c3e8     F2 30 02 F1 | 	add	local06, objptr
0c3ec     08 30 06 F1 | 	add	local06, #8
0c3f0     18 2F 62 FC | 	wrlong	local05, local06
0c3f4     03 00 00 FF 
0c3f8     00 E4 05 F1 | 	add	objptr, ##1536
0c3fc     F2 30 02 FB | 	rdlong	local06, objptr
0c400     01 30 06 F1 | 	add	local06, #1
0c404     F2 30 62 FC | 	wrlong	local06, objptr
0c408     13 00 00 FF 
0c40c     38 E4 85 F1 | 	sub	objptr, ##9784
0c410     F2 2C 02 FB | 	rdlong	local04, objptr
0c414     03 2C 66 F0 | 	shl	local04, #3
0c418     02 00 00 FF 
0c41c     38 E4 85 F1 | 	sub	objptr, ##1080
0c420     F2 2C 02 F1 | 	add	local04, objptr
0c424     04 2C 06 F1 | 	add	local04, #4
0c428     16 2F 02 FB | 	rdlong	local05, local04
0c42c     35 00 00 FF 
0c430     0C E4 85 F1 | 	sub	objptr, ##27148
0c434     D8 FE 9F FD | 	jmp	#LR__1000
0c438                 | LR__1001
0c438                 | ' return 0
0c438     00 FA 05 F6 | 	mov	result1, #0
0c43c                 | LR__1002
0c43c     A7 F0 03 F6 | 	mov	ptra, fp
0c440     B2 00 A0 FD | 	call	#popregs_
0c444                 | _muldiv_ret
0c444     2D 00 64 FD | 	ret
0c448                 | 
0c448                 | ' 
0c448                 | ' ' Get a value for operations
0c448                 | ' 
0c448                 | ' function getvalue()  as ulong
0c448                 | _getvalue
0c448     0B 4A 05 F6 | 	mov	COUNT_, #11
0c44c     A8 00 A0 FD | 	call	#pushregs_
0c450                 | _getvalue_enter
0c450     01 2C 06 F6 | 	mov	local04, #1
0c454     00 26 06 F6 | 	mov	local01, #0
0c458     1D 2A 06 F6 | 	mov	local03, #29
0c45c     37 00 00 FF 
0c460     44 E4 05 F1 | 	add	objptr, ##28228
0c464     F2 16 02 FB | 	rdlong	arg03, objptr
0c468     03 16 66 F0 | 	shl	arg03, #3
0c46c     02 00 00 FF 
0c470     38 E4 85 F1 | 	sub	objptr, ##1080
0c474     F2 16 02 F1 | 	add	arg03, objptr
0c478     04 16 06 F1 | 	add	arg03, #4
0c47c     0B 2F 02 FB | 	rdlong	local05, arg03
0c480                 | ' 
0c480                 | ' m=1											' for negative numbers
0c480                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c480                 | ' op=lparts(ct).token
0c480                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c480     02 2E 0E F2 | 	cmp	local05, #2 wz
0c484     35 00 00 FF 
0c488     0C E4 85 F1 | 	sub	objptr, ##27148
0c48c     38 00 90 5D |  if_ne	jmp	#LR__1010
0c490     01 2C 66 F6 | 	neg	local04, #1
0c494     37 00 00 FF 
0c498     44 E4 05 F1 | 	add	objptr, ##28228
0c49c     F2 2E 02 FB | 	rdlong	local05, objptr
0c4a0     01 2E 06 F1 | 	add	local05, #1
0c4a4     F2 2E 62 FC | 	wrlong	local05, objptr
0c4a8     03 2E 66 F0 | 	shl	local05, #3
0c4ac     02 00 00 FF 
0c4b0     38 E4 85 F1 | 	sub	objptr, ##1080
0c4b4     F2 2E 02 F1 | 	add	local05, objptr
0c4b8     04 2E 06 F1 | 	add	local05, #4
0c4bc     17 2F 02 FB | 	rdlong	local05, local05
0c4c0     35 00 00 FF 
0c4c4     0C E4 85 F1 | 	sub	objptr, ##27148
0c4c8                 | LR__1010
0c4c8                 | ' select case op
0c4c8     01 00 00 FF 
0c4cc     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c4d0     44 00 90 AD |  if_e	jmp	#LR__1011
0c4d4     01 00 00 FF 
0c4d8     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c4dc     90 01 90 AD |  if_e	jmp	#LR__1014
0c4e0     01 00 00 FF 
0c4e4     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c4e8     44 04 90 AD |  if_e	jmp	#LR__1021
0c4ec     01 00 00 FF 
0c4f0     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c4f4     A8 05 90 AD |  if_e	jmp	#LR__1024
0c4f8     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c4fc     78 07 90 AD |  if_e	jmp	#LR__1029
0c500     01 00 00 FF 
0c504     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c508     70 08 90 AD |  if_e	jmp	#LR__1030
0c50c     15 2E 0E F2 | 	cmp	local05, #21 wz
0c510     98 08 90 AD |  if_e	jmp	#LR__1031
0c514     10 09 90 FD | 	jmp	#LR__1032
0c518                 | LR__1011
0c518                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c518     01 2C 0E F2 | 	cmp	local04, #1 wz
0c51c     3C 00 90 5D |  if_ne	jmp	#LR__1012
0c520     37 00 00 FF 
0c524     44 E4 05 F1 | 	add	objptr, ##28228
0c528     F2 2E 02 FB | 	rdlong	local05, objptr
0c52c     03 2E 66 F0 | 	shl	local05, #3
0c530     02 00 00 FF 
0c534     38 E4 85 F1 | 	sub	objptr, ##1080
0c538     F2 2E 02 F1 | 	add	local05, objptr
0c53c     17 13 02 FB | 	rdlong	arg01, local05
0c540     00 14 06 F6 | 	mov	arg02, #0
0c544     35 00 00 FF 
0c548     0C E4 85 F1 | 	sub	objptr, ##27148
0c54c     0C E0 B1 FD | 	call	#__system____builtin_atoi
0c550     FD 2C 02 FD | 	qmul	local04, result1
0c554     18 26 62 FD | 	getqx	local01
0c558     1C 2A 06 F6 | 	mov	local03, #28
0c55c                 | LR__1012
0c55c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c55c     FF FF 7F FF 
0c560     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c564     3C 00 90 5D |  if_ne	jmp	#LR__1013
0c568     37 00 00 FF 
0c56c     44 E4 05 F1 | 	add	objptr, ##28228
0c570     F2 2E 02 FB | 	rdlong	local05, objptr
0c574     03 2E 66 F0 | 	shl	local05, #3
0c578     02 00 00 FF 
0c57c     38 E4 85 F1 | 	sub	objptr, ##1080
0c580     F2 2E 02 F1 | 	add	local05, objptr
0c584     17 13 02 FB | 	rdlong	arg01, local05
0c588     00 14 06 F6 | 	mov	arg02, #0
0c58c     35 00 00 FF 
0c590     0C E4 85 F1 | 	sub	objptr, ##27148
0c594     C4 DF B1 FD | 	call	#__system____builtin_atoi
0c598     FD 2C 02 FD | 	qmul	local04, result1
0c59c     18 26 62 FD | 	getqx	local01
0c5a0     1C 2A 06 F6 | 	mov	local03, #28
0c5a4                 | LR__1013
0c5a4     13 31 02 F6 | 	mov	local06, local01
0c5a8     14 33 02 F6 | 	mov	local07, local02
0c5ac     15 2F 02 F6 | 	mov	local05, local03
0c5b0     4A 00 00 FF 
0c5b4     7C E4 05 F1 | 	add	objptr, ##38012
0c5b8     F2 26 02 FB | 	rdlong	local01, objptr
0c5bc     13 2D 02 F6 | 	mov	local04, local01
0c5c0     01 2C 66 F0 | 	shl	local04, #1
0c5c4     13 2D 02 F1 | 	add	local04, local01
0c5c8     02 2C 66 F0 | 	shl	local04, #2
0c5cc     03 00 00 FF 
0c5d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5d4     F2 2C 02 F1 | 	add	local04, objptr
0c5d8     16 31 62 FC | 	wrlong	local06, local04
0c5dc     03 00 00 FF 
0c5e0     00 E4 05 F1 | 	add	objptr, ##1536
0c5e4     F2 30 02 FB | 	rdlong	local06, objptr
0c5e8     18 27 02 F6 | 	mov	local01, local06
0c5ec     01 26 66 F0 | 	shl	local01, #1
0c5f0     18 27 02 F1 | 	add	local01, local06
0c5f4     02 26 66 F0 | 	shl	local01, #2
0c5f8     03 00 00 FF 
0c5fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c600     F2 26 02 F1 | 	add	local01, objptr
0c604     04 26 06 F1 | 	add	local01, #4
0c608     13 33 62 FC | 	wrlong	local07, local01
0c60c     03 00 00 FF 
0c610     00 E4 05 F1 | 	add	objptr, ##1536
0c614     F2 32 02 FB | 	rdlong	local07, objptr
0c618     19 31 02 F6 | 	mov	local06, local07
0c61c     01 30 66 F0 | 	shl	local06, #1
0c620     19 31 02 F1 | 	add	local06, local07
0c624     02 30 66 F0 | 	shl	local06, #2
0c628     03 00 00 FF 
0c62c     00 E4 85 F1 | 	sub	objptr, ##1536
0c630     F2 30 02 F1 | 	add	local06, objptr
0c634     08 30 06 F1 | 	add	local06, #8
0c638     18 2F 62 FC | 	wrlong	local05, local06
0c63c     03 00 00 FF 
0c640     00 E4 05 F1 | 	add	objptr, ##1536
0c644     F2 30 02 FB | 	rdlong	local06, objptr
0c648     01 30 06 F1 | 	add	local06, #1
0c64c     F2 30 62 FC | 	wrlong	local06, objptr
0c650     13 00 00 FF 
0c654     38 E4 85 F1 | 	sub	objptr, ##9784
0c658     F2 30 02 FB | 	rdlong	local06, objptr
0c65c     01 30 06 F1 | 	add	local06, #1
0c660     F2 30 62 FC | 	wrlong	local06, objptr
0c664     37 00 00 FF 
0c668     44 E4 85 F1 | 	sub	objptr, ##28228
0c66c     E4 07 90 FD | 	jmp	#LR__1033
0c670                 | LR__1014
0c670                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c670     37 00 00 FF 
0c674     44 E4 05 F1 | 	add	objptr, ##28228
0c678     F2 16 02 FB | 	rdlong	arg03, objptr
0c67c     03 16 66 F0 | 	shl	arg03, #3
0c680     02 00 00 FF 
0c684     38 E4 85 F1 | 	sub	objptr, ##1080
0c688     F2 16 02 F1 | 	add	arg03, objptr
0c68c     0B 13 02 FB | 	rdlong	arg01, arg03
0c690     01 14 06 F6 | 	mov	arg02, #1
0c694     35 00 00 FF 
0c698     0C E4 85 F1 | 	sub	objptr, ##27148
0c69c     48 CA B1 FD | 	call	#__system__Left_S
0c6a0     FD 12 02 F6 | 	mov	arg01, result1
0c6a4     B9 01 00 FF 
0c6a8     24 15 06 F6 | 	mov	arg02, ##@LR__5889
0c6ac     E4 A9 B1 FD | 	call	#__system___string_cmp
0c6b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c6b4     94 00 90 5D |  if_ne	jmp	#LR__1017
0c6b8     37 00 00 FF 
0c6bc     44 E4 05 F1 | 	add	objptr, ##28228
0c6c0     F2 32 02 FB | 	rdlong	local07, objptr
0c6c4     19 31 02 F6 | 	mov	local06, local07
0c6c8     03 30 66 F0 | 	shl	local06, #3
0c6cc     02 00 00 FF 
0c6d0     38 E4 85 F1 | 	sub	objptr, ##1080
0c6d4     F2 30 02 F1 | 	add	local06, objptr
0c6d8     B9 01 00 FF 
0c6dc     26 2F 06 F6 | 	mov	local05, ##@LR__5890
0c6e0     03 32 66 F0 | 	shl	local07, #3
0c6e4     F2 32 02 F1 | 	add	local07, objptr
0c6e8     19 33 02 FB | 	rdlong	local07, local07
0c6ec     02 00 00 FF 
0c6f0     38 E4 05 F1 | 	add	objptr, ##1080
0c6f4     F2 26 02 FB | 	rdlong	local01, objptr
0c6f8     03 26 66 F0 | 	shl	local01, #3
0c6fc     02 00 00 FF 
0c700     38 E4 85 F1 | 	sub	objptr, ##1080
0c704     F2 26 02 F1 | 	add	local01, objptr
0c708     13 13 02 FB | 	rdlong	arg01, local01
0c70c     35 00 00 FF 
0c710     0C E4 85 F1 | 	sub	objptr, ##27148
0c714     09 35 02 F6 | 	mov	local08, arg01
0c718     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c71c                 | LR__1015
0c71c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c720     01 34 06 51 |  if_ne	add	local08, #1
0c724     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c728                 | LR__1016
0c728     09 35 82 F1 | 	sub	local08, arg01
0c72c     1A 15 02 F6 | 	mov	arg02, local08
0c730     01 14 86 F1 | 	sub	arg02, #1
0c734     19 13 02 F6 | 	mov	arg01, local07
0c738     34 CA B1 FD | 	call	#__system__Right_S
0c73c     FD 14 02 F6 | 	mov	arg02, result1
0c740     17 13 02 F6 | 	mov	arg01, local05
0c744     80 A9 B1 FD | 	call	#__system___string_concat
0c748     18 FB 61 FC | 	wrlong	result1, local06
0c74c                 | LR__1017
0c74c                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c74c     37 00 00 FF 
0c750     44 E4 05 F1 | 	add	objptr, ##28228
0c754     F2 16 02 FB | 	rdlong	arg03, objptr
0c758     03 16 66 F0 | 	shl	arg03, #3
0c75c     02 00 00 FF 
0c760     38 E4 85 F1 | 	sub	objptr, ##1080
0c764     F2 16 02 F1 | 	add	arg03, objptr
0c768     0B 13 02 FB | 	rdlong	arg01, arg03
0c76c     01 14 06 F6 | 	mov	arg02, #1
0c770     35 00 00 FF 
0c774     0C E4 85 F1 | 	sub	objptr, ##27148
0c778     6C C9 B1 FD | 	call	#__system__Left_S
0c77c     FD 12 02 F6 | 	mov	arg01, result1
0c780     B9 01 00 FF 
0c784     29 15 06 F6 | 	mov	arg02, ##@LR__5891
0c788     08 A9 B1 FD | 	call	#__system___string_cmp
0c78c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c790     94 00 90 5D |  if_ne	jmp	#LR__1020
0c794     37 00 00 FF 
0c798     44 E4 05 F1 | 	add	objptr, ##28228
0c79c     F2 32 02 FB | 	rdlong	local07, objptr
0c7a0     19 31 02 F6 | 	mov	local06, local07
0c7a4     03 30 66 F0 | 	shl	local06, #3
0c7a8     02 00 00 FF 
0c7ac     38 E4 85 F1 | 	sub	objptr, ##1080
0c7b0     F2 30 02 F1 | 	add	local06, objptr
0c7b4     B9 01 00 FF 
0c7b8     2B 2F 06 F6 | 	mov	local05, ##@LR__5892
0c7bc     03 32 66 F0 | 	shl	local07, #3
0c7c0     F2 32 02 F1 | 	add	local07, objptr
0c7c4     19 33 02 FB | 	rdlong	local07, local07
0c7c8     02 00 00 FF 
0c7cc     38 E4 05 F1 | 	add	objptr, ##1080
0c7d0     F2 26 02 FB | 	rdlong	local01, objptr
0c7d4     03 26 66 F0 | 	shl	local01, #3
0c7d8     02 00 00 FF 
0c7dc     38 E4 85 F1 | 	sub	objptr, ##1080
0c7e0     F2 26 02 F1 | 	add	local01, objptr
0c7e4     13 13 02 FB | 	rdlong	arg01, local01
0c7e8     35 00 00 FF 
0c7ec     0C E4 85 F1 | 	sub	objptr, ##27148
0c7f0     09 35 02 F6 | 	mov	local08, arg01
0c7f4     97 06 48 FB | 	callpa	#(@LR__1019-@LR__1018)>>2,fcache_load_ptr_
0c7f8                 | LR__1018
0c7f8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c7fc     01 34 06 51 |  if_ne	add	local08, #1
0c800     F4 FF 9F 5D |  if_ne	jmp	#LR__1018
0c804                 | LR__1019
0c804     09 35 82 F1 | 	sub	local08, arg01
0c808     1A 15 02 F6 | 	mov	arg02, local08
0c80c     01 14 86 F1 | 	sub	arg02, #1
0c810     19 13 02 F6 | 	mov	arg01, local07
0c814     58 C9 B1 FD | 	call	#__system__Right_S
0c818     FD 14 02 F6 | 	mov	arg02, result1
0c81c     17 13 02 F6 | 	mov	arg01, local05
0c820     A4 A8 B1 FD | 	call	#__system___string_concat
0c824     18 FB 61 FC | 	wrlong	result1, local06
0c828                 | LR__1020
0c828     37 00 00 FF 
0c82c     44 E4 05 F1 | 	add	objptr, ##28228
0c830     F2 30 02 FB | 	rdlong	local06, objptr
0c834     03 30 66 F0 | 	shl	local06, #3
0c838     02 00 00 FF 
0c83c     38 E4 85 F1 | 	sub	objptr, ##1080
0c840     F2 30 02 F1 | 	add	local06, objptr
0c844     18 13 02 FB | 	rdlong	arg01, local06
0c848     00 14 06 F6 | 	mov	arg02, #0
0c84c     35 00 00 FF 
0c850     0C E4 85 F1 | 	sub	objptr, ##27148
0c854     04 DD B1 FD | 	call	#__system____builtin_atoi
0c858     FD 2C 02 FD | 	qmul	local04, result1
0c85c     4A 00 00 FF 
0c860     7C E4 05 F1 | 	add	objptr, ##38012
0c864     F2 30 02 FB | 	rdlong	local06, objptr
0c868     18 37 02 F6 | 	mov	local09, local06
0c86c     01 36 66 F0 | 	shl	local09, #1
0c870     18 37 02 F1 | 	add	local09, local06
0c874     02 36 66 F0 | 	shl	local09, #2
0c878     03 00 00 FF 
0c87c     00 E4 85 F1 | 	sub	objptr, ##1536
0c880     F2 36 02 F1 | 	add	local09, objptr
0c884     03 00 00 FF 
0c888     00 E4 05 F1 | 	add	objptr, ##1536
0c88c     18 26 62 FD | 	getqx	local01
0c890     1C 2A 06 F6 | 	mov	local03, #28
0c894     13 31 02 F6 | 	mov	local06, local01
0c898     14 33 02 F6 | 	mov	local07, local02
0c89c     1B 31 62 FC | 	wrlong	local06, local09
0c8a0     15 37 02 F6 | 	mov	local09, local03
0c8a4     F2 30 02 FB | 	rdlong	local06, objptr
0c8a8     18 2F 02 F6 | 	mov	local05, local06
0c8ac     01 2E 66 F0 | 	shl	local05, #1
0c8b0     18 2F 02 F1 | 	add	local05, local06
0c8b4     02 2E 66 F0 | 	shl	local05, #2
0c8b8     03 00 00 FF 
0c8bc     00 E4 85 F1 | 	sub	objptr, ##1536
0c8c0     F2 2E 02 F1 | 	add	local05, objptr
0c8c4     04 2E 06 F1 | 	add	local05, #4
0c8c8     17 33 62 FC | 	wrlong	local07, local05
0c8cc     03 00 00 FF 
0c8d0     00 E4 05 F1 | 	add	objptr, ##1536
0c8d4     F2 32 02 FB | 	rdlong	local07, objptr
0c8d8     19 31 02 F6 | 	mov	local06, local07
0c8dc     01 30 66 F0 | 	shl	local06, #1
0c8e0     19 31 02 F1 | 	add	local06, local07
0c8e4     02 30 66 F0 | 	shl	local06, #2
0c8e8     03 00 00 FF 
0c8ec     00 E4 85 F1 | 	sub	objptr, ##1536
0c8f0     F2 30 02 F1 | 	add	local06, objptr
0c8f4     08 30 06 F1 | 	add	local06, #8
0c8f8     18 37 62 FC | 	wrlong	local09, local06
0c8fc     03 00 00 FF 
0c900     00 E4 05 F1 | 	add	objptr, ##1536
0c904     F2 30 02 FB | 	rdlong	local06, objptr
0c908     01 30 06 F1 | 	add	local06, #1
0c90c     F2 30 62 FC | 	wrlong	local06, objptr
0c910     13 00 00 FF 
0c914     38 E4 85 F1 | 	sub	objptr, ##9784
0c918     F2 30 02 FB | 	rdlong	local06, objptr
0c91c     01 30 06 F1 | 	add	local06, #1
0c920     F2 30 62 FC | 	wrlong	local06, objptr
0c924     37 00 00 FF 
0c928     44 E4 85 F1 | 	sub	objptr, ##28228
0c92c     24 05 90 FD | 	jmp	#LR__1033
0c930                 | LR__1021
0c930                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c930     01 2C 0E F2 | 	cmp	local04, #1 wz
0c934     48 00 90 5D |  if_ne	jmp	#LR__1022
0c938     00 C0 1F FF 
0c93c     00 30 06 F6 | 	mov	local06, ##1065353216
0c940     37 00 00 FF 
0c944     44 E4 05 F1 | 	add	objptr, ##28228
0c948     F2 36 02 FB | 	rdlong	local09, objptr
0c94c     03 36 66 F0 | 	shl	local09, #3
0c950     02 00 00 FF 
0c954     38 E4 85 F1 | 	sub	objptr, ##1080
0c958     F2 36 02 F1 | 	add	local09, objptr
0c95c     1B 13 02 FB | 	rdlong	arg01, local09
0c960     35 00 00 FF 
0c964     0C E4 85 F1 | 	sub	objptr, ##27148
0c968     84 DD B1 FD | 	call	#__system____builtin_atof
0c96c     FD 14 02 F6 | 	mov	arg02, result1
0c970     18 13 02 F6 | 	mov	arg01, local06
0c974     6C D5 B1 FD | 	call	#__system___float_mul
0c978     FD 26 02 F6 | 	mov	local01, result1
0c97c     1E 2A 06 F6 | 	mov	local03, #30
0c980                 | LR__1022
0c980                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c980     FF FF 7F FF 
0c984     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c988     48 00 90 5D |  if_ne	jmp	#LR__1023
0c98c     00 C0 5F FF 
0c990     00 30 06 F6 | 	mov	local06, ##-1082130432
0c994     37 00 00 FF 
0c998     44 E4 05 F1 | 	add	objptr, ##28228
0c99c     F2 36 02 FB | 	rdlong	local09, objptr
0c9a0     03 36 66 F0 | 	shl	local09, #3
0c9a4     02 00 00 FF 
0c9a8     38 E4 85 F1 | 	sub	objptr, ##1080
0c9ac     F2 36 02 F1 | 	add	local09, objptr
0c9b0     1B 13 02 FB | 	rdlong	arg01, local09
0c9b4     35 00 00 FF 
0c9b8     0C E4 85 F1 | 	sub	objptr, ##27148
0c9bc     30 DD B1 FD | 	call	#__system____builtin_atof
0c9c0     FD 14 02 F6 | 	mov	arg02, result1
0c9c4     18 13 02 F6 | 	mov	arg01, local06
0c9c8     18 D5 B1 FD | 	call	#__system___float_mul
0c9cc     FD 26 02 F6 | 	mov	local01, result1
0c9d0     1E 2A 06 F6 | 	mov	local03, #30
0c9d4                 | LR__1023
0c9d4     13 31 02 F6 | 	mov	local06, local01
0c9d8     14 33 02 F6 | 	mov	local07, local02
0c9dc     15 2F 02 F6 | 	mov	local05, local03
0c9e0     4A 00 00 FF 
0c9e4     7C E4 05 F1 | 	add	objptr, ##38012
0c9e8     F2 26 02 FB | 	rdlong	local01, objptr
0c9ec     13 37 02 F6 | 	mov	local09, local01
0c9f0     01 36 66 F0 | 	shl	local09, #1
0c9f4     13 37 02 F1 | 	add	local09, local01
0c9f8     02 36 66 F0 | 	shl	local09, #2
0c9fc     03 00 00 FF 
0ca00     00 E4 85 F1 | 	sub	objptr, ##1536
0ca04     F2 36 02 F1 | 	add	local09, objptr
0ca08     1B 31 62 FC | 	wrlong	local06, local09
0ca0c     03 00 00 FF 
0ca10     00 E4 05 F1 | 	add	objptr, ##1536
0ca14     F2 36 02 FB | 	rdlong	local09, objptr
0ca18     1B 31 02 F6 | 	mov	local06, local09
0ca1c     01 30 66 F0 | 	shl	local06, #1
0ca20     1B 31 02 F1 | 	add	local06, local09
0ca24     02 30 66 F0 | 	shl	local06, #2
0ca28     03 00 00 FF 
0ca2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca30     F2 30 02 F1 | 	add	local06, objptr
0ca34     04 30 06 F1 | 	add	local06, #4
0ca38     18 33 62 FC | 	wrlong	local07, local06
0ca3c     03 00 00 FF 
0ca40     00 E4 05 F1 | 	add	objptr, ##1536
0ca44     F2 36 02 FB | 	rdlong	local09, objptr
0ca48     1B 33 02 F6 | 	mov	local07, local09
0ca4c     01 32 66 F0 | 	shl	local07, #1
0ca50     1B 33 02 F1 | 	add	local07, local09
0ca54     02 32 66 F0 | 	shl	local07, #2
0ca58     03 00 00 FF 
0ca5c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca60     F2 32 02 F1 | 	add	local07, objptr
0ca64     08 32 06 F1 | 	add	local07, #8
0ca68     19 2F 62 FC | 	wrlong	local05, local07
0ca6c     03 00 00 FF 
0ca70     00 E4 05 F1 | 	add	objptr, ##1536
0ca74     F2 30 02 FB | 	rdlong	local06, objptr
0ca78     01 30 06 F1 | 	add	local06, #1
0ca7c     F2 30 62 FC | 	wrlong	local06, objptr
0ca80     13 00 00 FF 
0ca84     38 E4 85 F1 | 	sub	objptr, ##9784
0ca88     F2 30 02 FB | 	rdlong	local06, objptr
0ca8c     01 30 06 F1 | 	add	local06, #1
0ca90     F2 30 62 FC | 	wrlong	local06, objptr
0ca94     37 00 00 FF 
0ca98     44 E4 85 F1 | 	sub	objptr, ##28228
0ca9c     B4 03 90 FD | 	jmp	#LR__1033
0caa0                 | LR__1024
0caa0     37 00 00 FF 
0caa4     44 E4 05 F1 | 	add	objptr, ##28228
0caa8     F2 16 02 FB | 	rdlong	arg03, objptr
0caac     03 16 66 F0 | 	shl	arg03, #3
0cab0     02 00 00 FF 
0cab4     38 E4 85 F1 | 	sub	objptr, ##1080
0cab8     F2 16 02 F1 | 	add	arg03, objptr
0cabc     0B 13 02 FB | 	rdlong	arg01, arg03
0cac0     35 00 00 FF 
0cac4     0C E4 85 F1 | 	sub	objptr, ##27148
0cac8     09 35 02 F6 | 	mov	local08, arg01
0cacc     97 06 48 FB | 	callpa	#(@LR__1026-@LR__1025)>>2,fcache_load_ptr_
0cad0                 | LR__1025
0cad0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0cad4     01 34 06 51 |  if_ne	add	local08, #1
0cad8     F4 FF 9F 5D |  if_ne	jmp	#LR__1025
0cadc                 | LR__1026
0cadc     09 35 82 F1 | 	sub	local08, arg01
0cae0     1A FB 01 F6 | 	mov	result1, local08
0cae4     52 00 00 FF 
0cae8     F0 E4 05 F1 | 	add	objptr, ##42224
0caec     F2 FA 61 FC | 	wrlong	result1, objptr
0caf0     58 E4 85 F1 | 	sub	objptr, #88
0caf4     F2 12 02 FB | 	rdlong	arg01, objptr
0caf8     FD 12 82 F1 | 	sub	arg01, result1
0cafc     04 12 86 F1 | 	sub	arg01, #4
0cb00     03 12 26 F5 | 	andn	arg01, #3
0cb04     F2 12 62 FC | 	wrlong	arg01, objptr
0cb08     58 E4 05 F1 | 	add	objptr, #88
0cb0c     F2 14 02 FB | 	rdlong	arg02, objptr
0cb10     52 00 00 FF 
0cb14     F0 E4 85 F1 | 	sub	objptr, ##42224
0cb18     44 6C B1 FD | 	call	#_pslpoke
0cb1c                 | '     pslpoke memtop,l
0cb1c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0cb1c     01 38 06 F6 | 	mov	local10, #1
0cb20     52 00 00 FF 
0cb24     F0 E4 05 F1 | 	add	objptr, ##42224
0cb28     F2 3A 02 FB | 	rdlong	local11, objptr
0cb2c     52 00 00 FF 
0cb30     F0 E4 85 F1 | 	sub	objptr, ##42224
0cb34     01 3A 06 F1 | 	add	local11, #1
0cb38                 | LR__1027
0cb38     1D 39 52 F2 | 	cmps	local10, local11 wc
0cb3c     5C 00 90 3D |  if_ae	jmp	#LR__1028
0cb40     52 00 00 FF 
0cb44     98 E4 05 F1 | 	add	objptr, ##42136
0cb48     F2 32 02 FB | 	rdlong	local07, objptr
0cb4c     03 32 06 F1 | 	add	local07, #3
0cb50     1C 33 02 F1 | 	add	local07, local10
0cb54     1B 00 00 FF 
0cb58     54 E4 85 F1 | 	sub	objptr, ##13908
0cb5c     F2 36 02 FB | 	rdlong	local09, objptr
0cb60     03 36 66 F0 | 	shl	local09, #3
0cb64     02 00 00 FF 
0cb68     38 E4 85 F1 | 	sub	objptr, ##1080
0cb6c     F2 36 02 F1 | 	add	local09, objptr
0cb70     1B 13 02 FB | 	rdlong	arg01, local09
0cb74     1C 15 02 F6 | 	mov	arg02, local10
0cb78     01 16 06 F6 | 	mov	arg03, #1
0cb7c     35 00 00 FF 
0cb80     0C E4 85 F1 | 	sub	objptr, ##27148
0cb84     78 C6 B1 FD | 	call	#__system__Mid_S
0cb88     FD 14 C2 FA | 	rdbyte	arg02, result1
0cb8c     19 13 02 F6 | 	mov	arg01, local07
0cb90     5C 6C B1 FD | 	call	#_pspoke
0cb94     01 38 06 F1 | 	add	local10, #1
0cb98     9C FF 9F FD | 	jmp	#LR__1027
0cb9c                 | LR__1028
0cb9c     52 00 00 FF 
0cba0     98 E4 05 F1 | 	add	objptr, ##42136
0cba4     F2 26 02 FB | 	rdlong	local01, objptr
0cba8     2B 2A 06 F6 | 	mov	local03, #43
0cbac     13 31 02 F6 | 	mov	local06, local01
0cbb0     14 33 02 F6 | 	mov	local07, local02
0cbb4     15 3B 02 F6 | 	mov	local11, local03
0cbb8     08 00 00 FF 
0cbbc     1C E4 85 F1 | 	sub	objptr, ##4124
0cbc0     F2 38 02 FB | 	rdlong	local10, objptr
0cbc4     1C 37 02 F6 | 	mov	local09, local10
0cbc8     01 36 66 F0 | 	shl	local09, #1
0cbcc     1C 37 02 F1 | 	add	local09, local10
0cbd0     02 36 66 F0 | 	shl	local09, #2
0cbd4     03 00 00 FF 
0cbd8     00 E4 85 F1 | 	sub	objptr, ##1536
0cbdc     F2 36 02 F1 | 	add	local09, objptr
0cbe0     1B 31 62 FC | 	wrlong	local06, local09
0cbe4     03 00 00 FF 
0cbe8     00 E4 05 F1 | 	add	objptr, ##1536
0cbec     F2 38 02 FB | 	rdlong	local10, objptr
0cbf0     1C 37 02 F6 | 	mov	local09, local10
0cbf4     01 36 66 F0 | 	shl	local09, #1
0cbf8     1C 37 02 F1 | 	add	local09, local10
0cbfc     02 36 66 F0 | 	shl	local09, #2
0cc00     03 00 00 FF 
0cc04     00 E4 85 F1 | 	sub	objptr, ##1536
0cc08     F2 36 02 F1 | 	add	local09, objptr
0cc0c     04 36 06 F1 | 	add	local09, #4
0cc10     1B 33 62 FC | 	wrlong	local07, local09
0cc14     03 00 00 FF 
0cc18     00 E4 05 F1 | 	add	objptr, ##1536
0cc1c     F2 38 02 FB | 	rdlong	local10, objptr
0cc20     1C 37 02 F6 | 	mov	local09, local10
0cc24     01 36 66 F0 | 	shl	local09, #1
0cc28     1C 37 02 F1 | 	add	local09, local10
0cc2c     02 36 66 F0 | 	shl	local09, #2
0cc30     03 00 00 FF 
0cc34     00 E4 85 F1 | 	sub	objptr, ##1536
0cc38     F2 36 02 F1 | 	add	local09, objptr
0cc3c     08 36 06 F1 | 	add	local09, #8
0cc40     1B 3B 62 FC | 	wrlong	local11, local09
0cc44     03 00 00 FF 
0cc48     00 E4 05 F1 | 	add	objptr, ##1536
0cc4c     F2 30 02 FB | 	rdlong	local06, objptr
0cc50     01 30 06 F1 | 	add	local06, #1
0cc54     F2 30 62 FC | 	wrlong	local06, objptr
0cc58     13 00 00 FF 
0cc5c     38 E4 85 F1 | 	sub	objptr, ##9784
0cc60     F2 30 02 FB | 	rdlong	local06, objptr
0cc64     01 30 06 F1 | 	add	local06, #1
0cc68     F2 30 62 FC | 	wrlong	local06, objptr
0cc6c     37 00 00 FF 
0cc70     44 E4 85 F1 | 	sub	objptr, ##28228
0cc74     DC 01 90 FD | 	jmp	#LR__1033
0cc78                 | LR__1029
0cc78     2C 2A 06 F6 | 	mov	local03, #44
0cc7c     37 00 00 FF 
0cc80     44 E4 05 F1 | 	add	objptr, ##28228
0cc84     F2 30 02 FB | 	rdlong	local06, objptr
0cc88     03 30 66 F0 | 	shl	local06, #3
0cc8c     02 00 00 FF 
0cc90     38 E4 85 F1 | 	sub	objptr, ##1080
0cc94     F2 30 02 F1 | 	add	local06, objptr
0cc98     18 13 02 FB | 	rdlong	arg01, local06
0cc9c     00 14 06 F6 | 	mov	arg02, #0
0cca0     35 00 00 FF 
0cca4     0C E4 85 F1 | 	sub	objptr, ##27148
0cca8     B0 D8 B1 FD | 	call	#__system____builtin_atoi
0ccac     FD 26 02 F6 | 	mov	local01, result1
0ccb0     13 31 02 F6 | 	mov	local06, local01
0ccb4     14 33 02 F6 | 	mov	local07, local02
0ccb8     15 3B 02 F6 | 	mov	local11, local03
0ccbc     4A 00 00 FF 
0ccc0     7C E4 05 F1 | 	add	objptr, ##38012
0ccc4     F2 38 02 FB | 	rdlong	local10, objptr
0ccc8     1C 37 02 F6 | 	mov	local09, local10
0cccc     01 36 66 F0 | 	shl	local09, #1
0ccd0     1C 37 02 F1 | 	add	local09, local10
0ccd4     02 36 66 F0 | 	shl	local09, #2
0ccd8     03 00 00 FF 
0ccdc     00 E4 85 F1 | 	sub	objptr, ##1536
0cce0     F2 36 02 F1 | 	add	local09, objptr
0cce4     1B 31 62 FC | 	wrlong	local06, local09
0cce8     03 00 00 FF 
0ccec     00 E4 05 F1 | 	add	objptr, ##1536
0ccf0     F2 38 02 FB | 	rdlong	local10, objptr
0ccf4     1C 37 02 F6 | 	mov	local09, local10
0ccf8     01 36 66 F0 | 	shl	local09, #1
0ccfc     1C 37 02 F1 | 	add	local09, local10
0cd00     02 36 66 F0 | 	shl	local09, #2
0cd04     03 00 00 FF 
0cd08     00 E4 85 F1 | 	sub	objptr, ##1536
0cd0c     F2 36 02 F1 | 	add	local09, objptr
0cd10     04 36 06 F1 | 	add	local09, #4
0cd14     1B 33 62 FC | 	wrlong	local07, local09
0cd18     03 00 00 FF 
0cd1c     00 E4 05 F1 | 	add	objptr, ##1536
0cd20     F2 38 02 FB | 	rdlong	local10, objptr
0cd24     1C 37 02 F6 | 	mov	local09, local10
0cd28     01 36 66 F0 | 	shl	local09, #1
0cd2c     1C 37 02 F1 | 	add	local09, local10
0cd30     02 36 66 F0 | 	shl	local09, #2
0cd34     03 00 00 FF 
0cd38     00 E4 85 F1 | 	sub	objptr, ##1536
0cd3c     F2 36 02 F1 | 	add	local09, objptr
0cd40     08 36 06 F1 | 	add	local09, #8
0cd44     1B 3B 62 FC | 	wrlong	local11, local09
0cd48     03 00 00 FF 
0cd4c     00 E4 05 F1 | 	add	objptr, ##1536
0cd50     F2 30 02 FB | 	rdlong	local06, objptr
0cd54     01 30 06 F1 | 	add	local06, #1
0cd58     F2 30 62 FC | 	wrlong	local06, objptr
0cd5c     13 00 00 FF 
0cd60     38 E4 85 F1 | 	sub	objptr, ##9784
0cd64     F2 30 02 FB | 	rdlong	local06, objptr
0cd68     01 30 06 F1 | 	add	local06, #1
0cd6c     F2 30 62 FC | 	wrlong	local06, objptr
0cd70     37 00 00 FF 
0cd74     44 E4 85 F1 | 	sub	objptr, ##28228
0cd78     D8 00 90 FD | 	jmp	#LR__1033
0cd7c                 | LR__1030
0cd7c     16 13 02 F6 | 	mov	arg01, local04
0cd80     24 04 B0 FD | 	call	#_getvar
0cd84     37 00 00 FF 
0cd88     44 E4 05 F1 | 	add	objptr, ##28228
0cd8c     F2 30 02 FB | 	rdlong	local06, objptr
0cd90     01 30 06 F1 | 	add	local06, #1
0cd94     F2 30 62 FC | 	wrlong	local06, objptr
0cd98     37 00 00 FF 
0cd9c     44 E4 85 F1 | 	sub	objptr, ##28228
0cda0                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cda0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cda4     B0 00 90 3D |  if_ae	jmp	#LR__1034
0cda8     A8 00 90 FD | 	jmp	#LR__1033
0cdac                 | LR__1031
0cdac     37 00 00 FF 
0cdb0     44 E4 05 F1 | 	add	objptr, ##28228
0cdb4     F2 30 02 FB | 	rdlong	local06, objptr
0cdb8     01 30 06 F1 | 	add	local06, #1
0cdbc     F2 30 62 FC | 	wrlong	local06, objptr
0cdc0     37 00 00 FF 
0cdc4     44 E4 85 F1 | 	sub	objptr, ##28228
0cdc8     20 F1 BF FD | 	call	#_expr
0cdcc                 | '     ct+=1
0cdcc                 | '     err=expr() : if err>0 then return err 
0cdcc     01 FA 55 F2 | 	cmps	result1, #1 wc
0cdd0     84 00 90 3D |  if_ae	jmp	#LR__1034
0cdd4                 | '     if lparts(ct).token=token_rpar then ct+=1
0cdd4     37 00 00 FF 
0cdd8     44 E4 05 F1 | 	add	objptr, ##28228
0cddc     F2 3A 02 FB | 	rdlong	local11, objptr
0cde0     03 3A 66 F0 | 	shl	local11, #3
0cde4     02 00 00 FF 
0cde8     38 E4 85 F1 | 	sub	objptr, ##1080
0cdec     F2 3A 02 F1 | 	add	local11, objptr
0cdf0     04 3A 06 F1 | 	add	local11, #4
0cdf4     1D 3B 02 FB | 	rdlong	local11, local11
0cdf8     14 3A 0E F2 | 	cmp	local11, #20 wz
0cdfc     35 00 00 FF 
0ce00     0C E4 85 F1 | 	sub	objptr, ##27148
0ce04     4C 00 90 5D |  if_ne	jmp	#LR__1033
0ce08     37 00 00 FF 
0ce0c     44 E4 05 F1 | 	add	objptr, ##28228
0ce10     F2 30 02 FB | 	rdlong	local06, objptr
0ce14     01 30 06 F1 | 	add	local06, #1
0ce18     F2 30 62 FC | 	wrlong	local06, objptr
0ce1c     37 00 00 FF 
0ce20     44 E4 85 F1 | 	sub	objptr, ##28228
0ce24     2C 00 90 FD | 	jmp	#LR__1033
0ce28                 | LR__1032
0ce28     16 13 02 F6 | 	mov	arg01, local04
0ce2c     34 00 B0 FD | 	call	#_getfun
0ce30     37 00 00 FF 
0ce34     44 E4 05 F1 | 	add	objptr, ##28228
0ce38     F2 30 02 FB | 	rdlong	local06, objptr
0ce3c     01 30 06 F1 | 	add	local06, #1
0ce40     F2 30 62 FC | 	wrlong	local06, objptr
0ce44     37 00 00 FF 
0ce48     44 E4 85 F1 | 	sub	objptr, ##28228
0ce4c                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0ce4c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce50     04 00 90 3D |  if_ae	jmp	#LR__1034
0ce54                 | LR__1033
0ce54                 | ' return 0  
0ce54     00 FA 05 F6 | 	mov	result1, #0
0ce58                 | LR__1034
0ce58     A7 F0 03 F6 | 	mov	ptra, fp
0ce5c     B2 00 A0 FD | 	call	#popregs_
0ce60                 | _getvalue_ret
0ce60     2D 00 64 FD | 	ret
0ce64                 | 
0ce64                 | ' 
0ce64                 | ' ' Get a function result 
0ce64                 | ' 
0ce64                 | ' function getfun(m as integer) as ulong
0ce64                 | _getfun
0ce64     0F 4A 05 F6 | 	mov	COUNT_, #15
0ce68     A8 00 A0 FD | 	call	#pushregs_
0ce6c                 | _getfun_enter
0ce6c     09 2D 02 F6 | 	mov	local04, arg01
0ce70     37 00 00 FF 
0ce74     44 E4 05 F1 | 	add	objptr, ##28228
0ce78     F2 2E 02 FB | 	rdlong	local05, objptr
0ce7c     17 31 02 F6 | 	mov	local06, local05
0ce80     00 32 06 F6 | 	mov	local07, #0
0ce84                 | ' oldct=ct
0ce84                 | ' numpar=0
0ce84                 | ' if lparts(ct+1).token=token_lpar then
0ce84     01 2E 06 F1 | 	add	local05, #1
0ce88     03 2E 66 F0 | 	shl	local05, #3
0ce8c     02 00 00 FF 
0ce90     38 E4 85 F1 | 	sub	objptr, ##1080
0ce94     F2 2E 02 F1 | 	add	local05, objptr
0ce98     04 2E 06 F1 | 	add	local05, #4
0ce9c     17 2F 02 FB | 	rdlong	local05, local05
0cea0     15 2E 0E F2 | 	cmp	local05, #21 wz
0cea4     35 00 00 FF 
0cea8     0C E4 85 F1 | 	sub	objptr, ##27148
0ceac     54 01 90 5D |  if_ne	jmp	#LR__1044
0ceb0     37 00 00 FF 
0ceb4     44 E4 05 F1 | 	add	objptr, ##28228
0ceb8     F2 34 02 FB | 	rdlong	local08, objptr
0cebc     01 34 06 F1 | 	add	local08, #1
0cec0     F2 34 62 FC | 	wrlong	local08, objptr
0cec4     37 00 00 FF 
0cec8     44 E4 85 F1 | 	sub	objptr, ##28228
0cecc                 | '   ct+=1 											' omit this lpar, this is for expr list
0cecc                 | '   do
0cecc                 | LR__1040
0cecc     37 00 00 FF 
0ced0     44 E4 05 F1 | 	add	objptr, ##28228
0ced4     F2 2E 02 FB | 	rdlong	local05, objptr
0ced8     01 2E 06 F1 | 	add	local05, #1
0cedc     F2 2E 62 FC | 	wrlong	local05, objptr
0cee0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cee0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cee0     03 2E 66 F0 | 	shl	local05, #3
0cee4     02 00 00 FF 
0cee8     38 E4 85 F1 | 	sub	objptr, ##1080
0ceec     F2 2E 02 F1 | 	add	local05, objptr
0cef0     04 2E 06 F1 | 	add	local05, #4
0cef4     17 35 02 FB | 	rdlong	local08, local05
0cef8     15 34 0E F2 | 	cmp	local08, #21 wz
0cefc     35 00 00 FF 
0cf00     0C E4 85 F1 | 	sub	objptr, ##27148
0cf04     44 00 90 5D |  if_ne	jmp	#LR__1041
0cf08     37 00 00 FF 
0cf0c     44 E4 05 F1 | 	add	objptr, ##28228
0cf10     F2 34 02 FB | 	rdlong	local08, objptr
0cf14     01 34 06 F1 | 	add	local08, #1
0cf18     F2 34 62 FC | 	wrlong	local08, objptr
0cf1c     37 00 00 FF 
0cf20     44 E4 85 F1 | 	sub	objptr, ##28228
0cf24     C4 EF BF FD | 	call	#_expr
0cf28     FD 36 02 F6 | 	mov	local09, result1
0cf2c     37 00 00 FF 
0cf30     44 E4 05 F1 | 	add	objptr, ##28228
0cf34     F2 34 02 FB | 	rdlong	local08, objptr
0cf38     01 34 06 F1 | 	add	local08, #1
0cf3c     F2 34 62 FC | 	wrlong	local08, objptr
0cf40     37 00 00 FF 
0cf44     44 E4 85 F1 | 	sub	objptr, ##28228
0cf48     08 00 90 FD | 	jmp	#LR__1042
0cf4c                 | LR__1041
0cf4c     9C EF BF FD | 	call	#_expr
0cf50     FD 36 02 F6 | 	mov	local09, result1
0cf54                 | LR__1042
0cf54                 | '     if err>0 then return err
0cf54     01 36 16 F2 | 	cmp	local09, #1 wc
0cf58     1B FB 01 36 |  if_ae	mov	result1, local09
0cf5c     3C 02 90 3D |  if_ae	jmp	#LR__1046
0cf60     01 32 06 F1 | 	add	local07, #1
0cf64     37 00 00 FF 
0cf68     44 E4 05 F1 | 	add	objptr, ##28228
0cf6c     F2 2E 02 FB | 	rdlong	local05, objptr
0cf70     03 2E 66 F0 | 	shl	local05, #3
0cf74     02 00 00 FF 
0cf78     38 E4 85 F1 | 	sub	objptr, ##1080
0cf7c     F2 2E 02 F1 | 	add	local05, objptr
0cf80     04 2E 06 F1 | 	add	local05, #4
0cf84     17 37 02 FB | 	rdlong	local09, local05
0cf88     14 36 0E F2 | 	cmp	local09, #20 wz
0cf8c     35 00 00 FF 
0cf90     0C E4 85 F1 | 	sub	objptr, ##27148
0cf94     34 00 90 AD |  if_e	jmp	#LR__1043
0cf98     37 00 00 FF 
0cf9c     44 E4 05 F1 | 	add	objptr, ##28228
0cfa0     F2 36 02 FB | 	rdlong	local09, objptr
0cfa4     03 36 66 F0 | 	shl	local09, #3
0cfa8     02 00 00 FF 
0cfac     38 E4 85 F1 | 	sub	objptr, ##1080
0cfb0     F2 36 02 F1 | 	add	local09, objptr
0cfb4     04 36 06 F1 | 	add	local09, #4
0cfb8     1B 37 02 FB | 	rdlong	local09, local09
0cfbc     FE 37 0E F2 | 	cmp	local09, #510 wz
0cfc0     35 00 00 FF 
0cfc4     0C E4 85 F1 | 	sub	objptr, ##27148
0cfc8     00 FF 9F 5D |  if_ne	jmp	#LR__1040
0cfcc                 | LR__1043
0cfcc                 | '   if lparts(ct).token=token_end then return 14
0cfcc     37 00 00 FF 
0cfd0     44 E4 05 F1 | 	add	objptr, ##28228
0cfd4     F2 2E 02 FB | 	rdlong	local05, objptr
0cfd8     03 2E 66 F0 | 	shl	local05, #3
0cfdc     02 00 00 FF 
0cfe0     38 E4 85 F1 | 	sub	objptr, ##1080
0cfe4     F2 2E 02 F1 | 	add	local05, objptr
0cfe8     04 2E 06 F1 | 	add	local05, #4
0cfec     17 37 02 FB | 	rdlong	local09, local05
0cff0     FE 37 0E F2 | 	cmp	local09, #510 wz
0cff4     35 00 00 FF 
0cff8     0C E4 85 F1 | 	sub	objptr, ##27148
0cffc     0E FA 05 A6 |  if_e	mov	result1, #14
0d000     98 01 90 AD |  if_e	jmp	#LR__1046
0d004                 | LR__1044
0d004     19 27 02 F6 | 	mov	local01, local07
0d008     03 30 66 F0 | 	shl	local06, #3
0d00c     35 00 00 FF 
0d010     0C E4 05 F1 | 	add	objptr, ##27148
0d014     F2 30 02 F1 | 	add	local06, objptr
0d018     04 30 06 F1 | 	add	local06, #4
0d01c     18 2B 02 FB | 	rdlong	local03, local06
0d020     13 35 02 F6 | 	mov	local08, local01
0d024     14 39 02 F6 | 	mov	local10, local02
0d028     15 3B 02 F6 | 	mov	local11, local03
0d02c     15 00 00 FF 
0d030     70 E4 05 F1 | 	add	objptr, ##10864
0d034     F2 3C 02 FB | 	rdlong	local12, objptr
0d038     1E 3F 02 F6 | 	mov	local13, local12
0d03c     01 3E 66 F0 | 	shl	local13, #1
0d040     1E 3F 02 F1 | 	add	local13, local12
0d044     02 3E 66 F0 | 	shl	local13, #2
0d048     03 00 00 FF 
0d04c     00 E4 85 F1 | 	sub	objptr, ##1536
0d050     F2 3E 02 F1 | 	add	local13, objptr
0d054     1F 35 62 FC | 	wrlong	local08, local13
0d058     03 00 00 FF 
0d05c     00 E4 05 F1 | 	add	objptr, ##1536
0d060     F2 34 02 FB | 	rdlong	local08, objptr
0d064     1A 41 02 F6 | 	mov	local14, local08
0d068     01 40 66 F0 | 	shl	local14, #1
0d06c     1A 41 02 F1 | 	add	local14, local08
0d070     02 40 66 F0 | 	shl	local14, #2
0d074     03 00 00 FF 
0d078     00 E4 85 F1 | 	sub	objptr, ##1536
0d07c     F2 40 02 F1 | 	add	local14, objptr
0d080     04 40 06 F1 | 	add	local14, #4
0d084     20 39 62 FC | 	wrlong	local10, local14
0d088     03 00 00 FF 
0d08c     00 E4 05 F1 | 	add	objptr, ##1536
0d090     F2 34 02 FB | 	rdlong	local08, objptr
0d094     1A 43 02 F6 | 	mov	local15, local08
0d098     01 42 66 F0 | 	shl	local15, #1
0d09c     1A 43 02 F1 | 	add	local15, local08
0d0a0     02 42 66 F0 | 	shl	local15, #2
0d0a4     03 00 00 FF 
0d0a8     00 E4 85 F1 | 	sub	objptr, ##1536
0d0ac     F2 42 02 F1 | 	add	local15, objptr
0d0b0     08 42 06 F1 | 	add	local15, #8
0d0b4     21 3B 62 FC | 	wrlong	local11, local15
0d0b8     03 00 00 FF 
0d0bc     00 E4 05 F1 | 	add	objptr, ##1536
0d0c0     F2 34 02 FB | 	rdlong	local08, objptr
0d0c4     01 34 06 F1 | 	add	local08, #1
0d0c8     F2 34 62 FC | 	wrlong	local08, objptr
0d0cc     4A 00 00 FF 
0d0d0     7C E4 85 F1 | 	sub	objptr, ##38012
0d0d4                 | ' t2.result.uresult=numpar
0d0d4                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d0d4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d0d4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d0d4     FF FF 7F FF 
0d0d8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d0dc     B8 00 90 5D |  if_ne	jmp	#LR__1045
0d0e0     15 2A 06 F6 | 	mov	local03, #21
0d0e4     13 35 02 F6 | 	mov	local08, local01
0d0e8     14 39 02 F6 | 	mov	local10, local02
0d0ec     15 3B 02 F6 | 	mov	local11, local03
0d0f0     4A 00 00 FF 
0d0f4     7C E4 05 F1 | 	add	objptr, ##38012
0d0f8     F2 3C 02 FB | 	rdlong	local12, objptr
0d0fc     1E 3F 02 F6 | 	mov	local13, local12
0d100     01 3E 66 F0 | 	shl	local13, #1
0d104     1E 3F 02 F1 | 	add	local13, local12
0d108     02 3E 66 F0 | 	shl	local13, #2
0d10c     03 00 00 FF 
0d110     00 E4 85 F1 | 	sub	objptr, ##1536
0d114     F2 3E 02 F1 | 	add	local13, objptr
0d118     1F 35 62 FC | 	wrlong	local08, local13
0d11c     03 00 00 FF 
0d120     00 E4 05 F1 | 	add	objptr, ##1536
0d124     F2 42 02 FB | 	rdlong	local15, objptr
0d128     21 41 02 F6 | 	mov	local14, local15
0d12c     01 40 66 F0 | 	shl	local14, #1
0d130     21 41 02 F1 | 	add	local14, local15
0d134     02 40 66 F0 | 	shl	local14, #2
0d138     03 00 00 FF 
0d13c     00 E4 85 F1 | 	sub	objptr, ##1536
0d140     F2 40 02 F1 | 	add	local14, objptr
0d144     04 40 06 F1 | 	add	local14, #4
0d148     20 39 62 FC | 	wrlong	local10, local14
0d14c     03 00 00 FF 
0d150     00 E4 05 F1 | 	add	objptr, ##1536
0d154     F2 40 02 FB | 	rdlong	local14, objptr
0d158     20 43 02 F6 | 	mov	local15, local14
0d15c     01 42 66 F0 | 	shl	local15, #1
0d160     20 43 02 F1 | 	add	local15, local14
0d164     02 42 66 F0 | 	shl	local15, #2
0d168     03 00 00 FF 
0d16c     00 E4 85 F1 | 	sub	objptr, ##1536
0d170     F2 42 02 F1 | 	add	local15, objptr
0d174     08 42 06 F1 | 	add	local15, #8
0d178     21 3B 62 FC | 	wrlong	local11, local15
0d17c     03 00 00 FF 
0d180     00 E4 05 F1 | 	add	objptr, ##1536
0d184     F2 34 02 FB | 	rdlong	local08, objptr
0d188     01 34 06 F1 | 	add	local08, #1
0d18c     F2 34 62 FC | 	wrlong	local08, objptr
0d190     4A 00 00 FF 
0d194     7C E4 85 F1 | 	sub	objptr, ##38012
0d198                 | LR__1045
0d198                 | ' return 0
0d198     00 FA 05 F6 | 	mov	result1, #0
0d19c                 | LR__1046
0d19c     A7 F0 03 F6 | 	mov	ptra, fp
0d1a0     B2 00 A0 FD | 	call	#popregs_
0d1a4                 | _getfun_ret
0d1a4     2D 00 64 FD | 	ret
0d1a8                 | 
0d1a8                 | '   
0d1a8                 | '   
0d1a8                 | ' function getvar(m as integer) as ulong
0d1a8                 | _getvar
0d1a8     11 4A 05 F6 | 	mov	COUNT_, #17
0d1ac     A8 00 A0 FD | 	call	#pushregs_
0d1b0                 | _getvar_enter
0d1b0     09 2D 02 F6 | 	mov	local04, arg01
0d1b4     37 00 00 FF 
0d1b8     44 E4 05 F1 | 	add	objptr, ##28228
0d1bc     F2 2E 02 FB | 	rdlong	local05, objptr
0d1c0     03 2E 66 F0 | 	shl	local05, #3
0d1c4     02 00 00 FF 
0d1c8     38 E4 85 F1 | 	sub	objptr, ##1080
0d1cc     F2 2E 02 F1 | 	add	local05, objptr
0d1d0     17 31 02 FB | 	rdlong	local06, local05
0d1d4     01 32 66 F6 | 	neg	local07, #1
0d1d8                 | ' 
0d1d8                 | ' varname$=lparts(ct).part$
0d1d8                 | ' j=-1
0d1d8                 | ' 
0d1d8                 | ' for i=0 to varnum-1
0d1d8     00 34 06 F6 | 	mov	local08, #0
0d1dc     04 E4 85 F1 | 	sub	objptr, #4
0d1e0     F2 36 02 FB | 	rdlong	local09, objptr
0d1e4     35 00 00 FF 
0d1e8     08 E4 85 F1 | 	sub	objptr, ##27144
0d1ec                 | LR__1050
0d1ec     1B 35 52 F2 | 	cmps	local08, local09 wc
0d1f0     38 00 90 3D |  if_ae	jmp	#LR__1051
0d1f4                 | '   if variables(i).name=varname$ then j=i : exit
0d1f4     1A 2F 02 F6 | 	mov	local05, local08
0d1f8     04 2E 66 F0 | 	shl	local05, #4
0d1fc     14 00 00 FF 
0d200     F8 E5 05 F1 | 	add	objptr, ##10744
0d204     F2 2E 02 F1 | 	add	local05, objptr
0d208     17 13 02 FB | 	rdlong	arg01, local05
0d20c     18 15 02 F6 | 	mov	arg02, local06
0d210     14 00 00 FF 
0d214     F8 E5 85 F1 | 	sub	objptr, ##10744
0d218     78 9E B1 FD | 	call	#__system___string_cmp
0d21c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d220     1A 33 02 A6 |  if_e	mov	local07, local08
0d224     01 34 06 51 |  if_ne	add	local08, #1
0d228     C0 FF 9F 5D |  if_ne	jmp	#LR__1050
0d22c                 | LR__1051
0d22c                 | ' if  j=-1 andalso varnum<maxvars then   
0d22c     FF FF 7F FF 
0d230     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d234     A8 00 90 5D |  if_ne	jmp	#LR__1052
0d238     35 00 00 FF 
0d23c     08 E4 05 F1 | 	add	objptr, ##27144
0d240     F2 36 02 FB | 	rdlong	local09, objptr
0d244     35 00 00 FF 
0d248     08 E4 85 F1 | 	sub	objptr, ##27144
0d24c     02 00 00 FF 
0d250     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d254     88 00 90 3D |  if_ae	jmp	#LR__1052
0d258     35 00 00 FF 
0d25c     08 E4 05 F1 | 	add	objptr, ##27144
0d260     F2 2E 02 FB | 	rdlong	local05, objptr
0d264     04 2E 66 F0 | 	shl	local05, #4
0d268     20 00 00 FF 
0d26c     10 E4 85 F1 | 	sub	objptr, ##16400
0d270     F2 2E 02 F1 | 	add	local05, objptr
0d274     17 31 62 FC | 	wrlong	local06, local05
0d278     20 00 00 FF 
0d27c     10 E4 05 F1 | 	add	objptr, ##16400
0d280     F2 2E 02 FB | 	rdlong	local05, objptr
0d284     04 2E 66 F0 | 	shl	local05, #4
0d288     20 00 00 FF 
0d28c     10 E4 85 F1 | 	sub	objptr, ##16400
0d290     F2 2E 02 F1 | 	add	local05, objptr
0d294     04 2E 06 F1 | 	add	local05, #4
0d298     17 01 68 FC | 	wrlong	#0, local05
0d29c     20 00 00 FF 
0d2a0     10 E4 05 F1 | 	add	objptr, ##16400
0d2a4     F2 2E 02 FB | 	rdlong	local05, objptr
0d2a8     04 2E 66 F0 | 	shl	local05, #4
0d2ac     20 00 00 FF 
0d2b0     10 E4 85 F1 | 	sub	objptr, ##16400
0d2b4     F2 2E 02 F1 | 	add	local05, objptr
0d2b8     0C 2E 06 F1 | 	add	local05, #12
0d2bc     17 39 68 FC | 	wrlong	#28, local05
0d2c0     20 00 00 FF 
0d2c4     10 E4 05 F1 | 	add	objptr, ##16400
0d2c8     F2 36 02 FB | 	rdlong	local09, objptr
0d2cc     1B 33 02 F6 | 	mov	local07, local09
0d2d0     01 36 06 F1 | 	add	local09, #1
0d2d4     F2 36 62 FC | 	wrlong	local09, objptr
0d2d8     35 00 00 FF 
0d2dc     08 E4 85 F1 | 	sub	objptr, ##27144
0d2e0                 | LR__1052
0d2e0     00 36 06 F6 | 	mov	local09, #0
0d2e4                 | ' numpar=0
0d2e4                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d2e4     37 00 00 FF 
0d2e8     44 E4 05 F1 | 	add	objptr, ##28228
0d2ec     F2 2E 02 FB | 	rdlong	local05, objptr
0d2f0     01 2E 06 F1 | 	add	local05, #1
0d2f4     03 2E 66 F0 | 	shl	local05, #3
0d2f8     02 00 00 FF 
0d2fc     38 E4 85 F1 | 	sub	objptr, ##1080
0d300     F2 2E 02 F1 | 	add	local05, objptr
0d304     04 2E 06 F1 | 	add	local05, #4
0d308     17 35 02 FB | 	rdlong	local08, local05
0d30c     15 34 0E F2 | 	cmp	local08, #21 wz
0d310     35 00 00 FF 
0d314     0C E4 85 F1 | 	sub	objptr, ##27148
0d318     54 01 90 5D |  if_ne	jmp	#LR__1057
0d31c     37 00 00 FF 
0d320     44 E4 05 F1 | 	add	objptr, ##28228
0d324     F2 38 02 FB | 	rdlong	local10, objptr
0d328     01 38 06 F1 | 	add	local10, #1
0d32c     F2 38 62 FC | 	wrlong	local10, objptr
0d330     37 00 00 FF 
0d334     44 E4 85 F1 | 	sub	objptr, ##28228
0d338                 | '   ct+=1 											' omit this lpar, this is for expr list
0d338                 | '   do
0d338                 | LR__1053
0d338     37 00 00 FF 
0d33c     44 E4 05 F1 | 	add	objptr, ##28228
0d340     F2 2E 02 FB | 	rdlong	local05, objptr
0d344     01 2E 06 F1 | 	add	local05, #1
0d348     F2 2E 62 FC | 	wrlong	local05, objptr
0d34c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d34c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d34c     03 2E 66 F0 | 	shl	local05, #3
0d350     02 00 00 FF 
0d354     38 E4 85 F1 | 	sub	objptr, ##1080
0d358     F2 2E 02 F1 | 	add	local05, objptr
0d35c     04 2E 06 F1 | 	add	local05, #4
0d360     17 39 02 FB | 	rdlong	local10, local05
0d364     15 38 0E F2 | 	cmp	local10, #21 wz
0d368     35 00 00 FF 
0d36c     0C E4 85 F1 | 	sub	objptr, ##27148
0d370     44 00 90 5D |  if_ne	jmp	#LR__1054
0d374     37 00 00 FF 
0d378     44 E4 05 F1 | 	add	objptr, ##28228
0d37c     F2 38 02 FB | 	rdlong	local10, objptr
0d380     01 38 06 F1 | 	add	local10, #1
0d384     F2 38 62 FC | 	wrlong	local10, objptr
0d388     37 00 00 FF 
0d38c     44 E4 85 F1 | 	sub	objptr, ##28228
0d390     58 EB BF FD | 	call	#_expr
0d394     FD 3A 02 F6 | 	mov	local11, result1
0d398     37 00 00 FF 
0d39c     44 E4 05 F1 | 	add	objptr, ##28228
0d3a0     F2 38 02 FB | 	rdlong	local10, objptr
0d3a4     01 38 06 F1 | 	add	local10, #1
0d3a8     F2 38 62 FC | 	wrlong	local10, objptr
0d3ac     37 00 00 FF 
0d3b0     44 E4 85 F1 | 	sub	objptr, ##28228
0d3b4     08 00 90 FD | 	jmp	#LR__1055
0d3b8                 | LR__1054
0d3b8     30 EB BF FD | 	call	#_expr
0d3bc     FD 3A 02 F6 | 	mov	local11, result1
0d3c0                 | LR__1055
0d3c0                 | '     if err>0 then return err
0d3c0     01 3A 56 F2 | 	cmps	local11, #1 wc
0d3c4     1D FB 01 36 |  if_ae	mov	result1, local11
0d3c8     2C 02 90 3D |  if_ae	jmp	#LR__1059
0d3cc     01 36 06 F1 | 	add	local09, #1
0d3d0     37 00 00 FF 
0d3d4     44 E4 05 F1 | 	add	objptr, ##28228
0d3d8     F2 2E 02 FB | 	rdlong	local05, objptr
0d3dc     03 2E 66 F0 | 	shl	local05, #3
0d3e0     02 00 00 FF 
0d3e4     38 E4 85 F1 | 	sub	objptr, ##1080
0d3e8     F2 2E 02 F1 | 	add	local05, objptr
0d3ec     04 2E 06 F1 | 	add	local05, #4
0d3f0     17 3B 02 FB | 	rdlong	local11, local05
0d3f4     14 3A 0E F2 | 	cmp	local11, #20 wz
0d3f8     35 00 00 FF 
0d3fc     0C E4 85 F1 | 	sub	objptr, ##27148
0d400     34 00 90 AD |  if_e	jmp	#LR__1056
0d404     37 00 00 FF 
0d408     44 E4 05 F1 | 	add	objptr, ##28228
0d40c     F2 3A 02 FB | 	rdlong	local11, objptr
0d410     03 3A 66 F0 | 	shl	local11, #3
0d414     02 00 00 FF 
0d418     38 E4 85 F1 | 	sub	objptr, ##1080
0d41c     F2 3A 02 F1 | 	add	local11, objptr
0d420     04 3A 06 F1 | 	add	local11, #4
0d424     1D 3B 02 FB | 	rdlong	local11, local11
0d428     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d42c     35 00 00 FF 
0d430     0C E4 85 F1 | 	sub	objptr, ##27148
0d434     00 FF 9F 5D |  if_ne	jmp	#LR__1053
0d438                 | LR__1056
0d438                 | '     if lparts(ct).token=token_end then return 14
0d438     37 00 00 FF 
0d43c     44 E4 05 F1 | 	add	objptr, ##28228
0d440     F2 2E 02 FB | 	rdlong	local05, objptr
0d444     03 2E 66 F0 | 	shl	local05, #3
0d448     02 00 00 FF 
0d44c     38 E4 85 F1 | 	sub	objptr, ##1080
0d450     F2 2E 02 F1 | 	add	local05, objptr
0d454     04 2E 06 F1 | 	add	local05, #4
0d458     17 3B 02 FB | 	rdlong	local11, local05
0d45c     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d460     35 00 00 FF 
0d464     0C E4 85 F1 | 	sub	objptr, ##27148
0d468     0E FA 05 A6 |  if_e	mov	result1, #14
0d46c     88 01 90 AD |  if_e	jmp	#LR__1059
0d470                 | LR__1057
0d470     1B 29 02 F6 | 	mov	local02, local09
0d474     11 2A 06 F6 | 	mov	local03, #17
0d478     19 27 02 F6 | 	mov	local01, local07
0d47c     13 39 02 F6 | 	mov	local10, local01
0d480     14 3D 02 F6 | 	mov	local12, local02
0d484     15 3F 02 F6 | 	mov	local13, local03
0d488     4A 00 00 FF 
0d48c     7C E4 05 F1 | 	add	objptr, ##38012
0d490     F2 40 02 FB | 	rdlong	local14, objptr
0d494     20 43 02 F6 | 	mov	local15, local14
0d498     01 42 66 F0 | 	shl	local15, #1
0d49c     20 43 02 F1 | 	add	local15, local14
0d4a0     02 42 66 F0 | 	shl	local15, #2
0d4a4     03 00 00 FF 
0d4a8     00 E4 85 F1 | 	sub	objptr, ##1536
0d4ac     F2 42 02 F1 | 	add	local15, objptr
0d4b0     21 39 62 FC | 	wrlong	local10, local15
0d4b4     03 00 00 FF 
0d4b8     00 E4 05 F1 | 	add	objptr, ##1536
0d4bc     F2 38 02 FB | 	rdlong	local10, objptr
0d4c0     1C 45 02 F6 | 	mov	local16, local10
0d4c4     01 44 66 F0 | 	shl	local16, #1
0d4c8     1C 45 02 F1 | 	add	local16, local10
0d4cc     02 44 66 F0 | 	shl	local16, #2
0d4d0     03 00 00 FF 
0d4d4     00 E4 85 F1 | 	sub	objptr, ##1536
0d4d8     F2 44 02 F1 | 	add	local16, objptr
0d4dc     04 44 06 F1 | 	add	local16, #4
0d4e0     22 3D 62 FC | 	wrlong	local12, local16
0d4e4     03 00 00 FF 
0d4e8     00 E4 05 F1 | 	add	objptr, ##1536
0d4ec     F2 38 02 FB | 	rdlong	local10, objptr
0d4f0     1C 47 02 F6 | 	mov	local17, local10
0d4f4     01 46 66 F0 | 	shl	local17, #1
0d4f8     1C 47 02 F1 | 	add	local17, local10
0d4fc     02 46 66 F0 | 	shl	local17, #2
0d500     03 00 00 FF 
0d504     00 E4 85 F1 | 	sub	objptr, ##1536
0d508     F2 46 02 F1 | 	add	local17, objptr
0d50c     08 46 06 F1 | 	add	local17, #8
0d510     23 3F 62 FC | 	wrlong	local13, local17
0d514     03 00 00 FF 
0d518     00 E4 05 F1 | 	add	objptr, ##1536
0d51c     F2 38 02 FB | 	rdlong	local10, objptr
0d520     01 38 06 F1 | 	add	local10, #1
0d524     F2 38 62 FC | 	wrlong	local10, objptr
0d528     4A 00 00 FF 
0d52c     7C E4 85 F1 | 	sub	objptr, ##38012
0d530                 | ' t2.result.twowords(1)=numpar
0d530                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d530                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d530                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d530     FF FF 7F FF 
0d534     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d538     B8 00 90 5D |  if_ne	jmp	#LR__1058
0d53c     15 2A 06 F6 | 	mov	local03, #21
0d540     13 39 02 F6 | 	mov	local10, local01
0d544     14 3D 02 F6 | 	mov	local12, local02
0d548     15 3F 02 F6 | 	mov	local13, local03
0d54c     4A 00 00 FF 
0d550     7C E4 05 F1 | 	add	objptr, ##38012
0d554     F2 40 02 FB | 	rdlong	local14, objptr
0d558     20 43 02 F6 | 	mov	local15, local14
0d55c     01 42 66 F0 | 	shl	local15, #1
0d560     20 43 02 F1 | 	add	local15, local14
0d564     02 42 66 F0 | 	shl	local15, #2
0d568     03 00 00 FF 
0d56c     00 E4 85 F1 | 	sub	objptr, ##1536
0d570     F2 42 02 F1 | 	add	local15, objptr
0d574     21 39 62 FC | 	wrlong	local10, local15
0d578     03 00 00 FF 
0d57c     00 E4 05 F1 | 	add	objptr, ##1536
0d580     F2 46 02 FB | 	rdlong	local17, objptr
0d584     23 45 02 F6 | 	mov	local16, local17
0d588     01 44 66 F0 | 	shl	local16, #1
0d58c     23 45 02 F1 | 	add	local16, local17
0d590     02 44 66 F0 | 	shl	local16, #2
0d594     03 00 00 FF 
0d598     00 E4 85 F1 | 	sub	objptr, ##1536
0d59c     F2 44 02 F1 | 	add	local16, objptr
0d5a0     04 44 06 F1 | 	add	local16, #4
0d5a4     22 3D 62 FC | 	wrlong	local12, local16
0d5a8     03 00 00 FF 
0d5ac     00 E4 05 F1 | 	add	objptr, ##1536
0d5b0     F2 44 02 FB | 	rdlong	local16, objptr
0d5b4     22 47 02 F6 | 	mov	local17, local16
0d5b8     01 46 66 F0 | 	shl	local17, #1
0d5bc     22 47 02 F1 | 	add	local17, local16
0d5c0     02 46 66 F0 | 	shl	local17, #2
0d5c4     03 00 00 FF 
0d5c8     00 E4 85 F1 | 	sub	objptr, ##1536
0d5cc     F2 46 02 F1 | 	add	local17, objptr
0d5d0     08 46 06 F1 | 	add	local17, #8
0d5d4     23 3F 62 FC | 	wrlong	local13, local17
0d5d8     03 00 00 FF 
0d5dc     00 E4 05 F1 | 	add	objptr, ##1536
0d5e0     F2 38 02 FB | 	rdlong	local10, objptr
0d5e4     01 38 06 F1 | 	add	local10, #1
0d5e8     F2 38 62 FC | 	wrlong	local10, objptr
0d5ec     4A 00 00 FF 
0d5f0     7C E4 85 F1 | 	sub	objptr, ##38012
0d5f4                 | LR__1058
0d5f4                 | ' return 0
0d5f4     00 FA 05 F6 | 	mov	result1, #0
0d5f8                 | LR__1059
0d5f8     A7 F0 03 F6 | 	mov	ptra, fp
0d5fc     B2 00 A0 FD | 	call	#popregs_
0d600                 | _getvar_ret
0d600     2D 00 64 FD | 	ret
0d604                 | 
0d604                 | ' 
0d604                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d604                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' 
0d604                 | ' 
0d604                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' '                                                                                                                                       -
0d604                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d604                 | ' '                                                                                                                                       -
0d604                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' 
0d604                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d604                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' 
0d604                 | ' function execute_line (astart=0 as integer) as integer
0d604                 | _execute_line
0d604     04 4A 05 F6 | 	mov	COUNT_, #4
0d608     A8 00 A0 FD | 	call	#pushregs_
0d60c     50 00 00 FF 
0d610     BC E4 05 F1 | 	add	objptr, ##41148
0d614     F2 00 68 FC | 	wrlong	#0, objptr
0d618                 | ' 
0d618                 | ' runptr2=0
0d618                 | ' for lineptr_e=astart to lineptr-1
0d618     06 00 00 FF 
0d61c     3C E4 85 F1 | 	sub	objptr, ##3132
0d620     F2 12 62 FC | 	wrlong	arg01, objptr
0d624     04 E4 85 F1 | 	sub	objptr, #4
0d628     F2 26 02 FB | 	rdlong	local01, objptr
0d62c     4A 00 00 FF 
0d630     7C E4 85 F1 | 	sub	objptr, ##38012
0d634                 | LR__1060
0d634     4A 00 00 FF 
0d638     80 E4 05 F1 | 	add	objptr, ##38016
0d63c     F2 FA 01 FB | 	rdlong	result1, objptr
0d640     4A 00 00 FF 
0d644     80 E4 85 F1 | 	sub	objptr, ##38016
0d648     13 FB 51 F2 | 	cmps	result1, local01 wc
0d64c     98 00 90 3D |  if_ae	jmp	#LR__1061
0d650     4A 00 00 FF 
0d654     80 E4 05 F1 | 	add	objptr, ##38016
0d658     F2 FA 01 FB | 	rdlong	result1, objptr
0d65c     FD 28 02 F6 | 	mov	local02, result1
0d660     01 28 66 F0 | 	shl	local02, #1
0d664     FD 28 02 F1 | 	add	local02, result1
0d668     02 28 66 F0 | 	shl	local02, #2
0d66c     03 00 00 FF 
0d670     04 E4 85 F1 | 	sub	objptr, ##1540
0d674     F2 28 02 F1 | 	add	local02, objptr
0d678     08 28 06 F1 | 	add	local02, #8
0d67c     14 29 02 FB | 	rdlong	local02, local02
0d680     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d684     02 28 66 F0 | 	shl	local02, #2
0d688     04 00 00 FF 
0d68c     1C E4 85 F1 | 	sub	objptr, ##2076
0d690     F2 28 02 F1 | 	add	local02, objptr
0d694     14 29 02 FB | 	rdlong	local02, local02
0d698     14 2B 02 F6 | 	mov	local03, local02
0d69c     13 28 46 F7 | 	zerox	local02, #19
0d6a0     14 2A 46 F0 | 	shr	local03, #20
0d6a4     02 2A 66 F0 | 	shl	local03, #2
0d6a8     ED 2A 02 F1 | 	add	local03, __methods__
0d6ac     15 2B 02 FB | 	rdlong	local03, local03
0d6b0     43 00 00 FF 
0d6b4     60 E4 85 F1 | 	sub	objptr, ##34400
0d6b8     F2 2C 02 F6 | 	mov	local04, objptr
0d6bc     14 E5 01 F6 | 	mov	objptr, local02
0d6c0     2D 2A 62 FD | 	call	local03
0d6c4     16 E5 01 F6 | 	mov	objptr, local04
0d6c8     4A 00 00 FF 
0d6cc     80 E4 05 F1 | 	add	objptr, ##38016
0d6d0     F2 2C 02 FB | 	rdlong	local04, objptr
0d6d4     01 2C 06 F1 | 	add	local04, #1
0d6d8     F2 2C 62 FC | 	wrlong	local04, objptr
0d6dc     4A 00 00 FF 
0d6e0     80 E4 85 F1 | 	sub	objptr, ##38016
0d6e4     4C FF 9F FD | 	jmp	#LR__1060
0d6e8                 | LR__1061
0d6e8                 | ' return runptr2
0d6e8     50 00 00 FF 
0d6ec     BC E4 05 F1 | 	add	objptr, ##41148
0d6f0     F2 FA 01 FB | 	rdlong	result1, objptr
0d6f4     50 00 00 FF 
0d6f8     BC E4 85 F1 | 	sub	objptr, ##41148
0d6fc     A7 F0 03 F6 | 	mov	ptra, fp
0d700     B2 00 A0 FD | 	call	#popregs_
0d704                 | _execute_line_ret
0d704     2D 00 64 FD | 	ret
0d708                 | 
0d708                 | ' 
0d708                 | ' 
0d708                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d708                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d708                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d708                 | ' 
0d708                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d708                 | ' 
0d708                 | ' function pop() as expr_result
0d708                 | _pop
0d708                 | ' if stackpointer=0 then
0d708     43 00 00 FF 
0d70c     58 E4 05 F1 | 	add	objptr, ##34392
0d710     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d714     43 00 00 FF 
0d718     58 E4 85 F1 | 	sub	objptr, ##34392
0d71c     FF 04 06 A6 |  if_e	mov	_var03, #255
0d720     18 00 06 A6 |  if_e	mov	_var01, #24
0d724     68 00 90 AD |  if_e	jmp	#LR__1070
0d728     43 00 00 FF 
0d72c     58 E4 05 F1 | 	add	objptr, ##34392
0d730     F2 FA 01 FB | 	rdlong	result1, objptr
0d734     01 FA 85 F1 | 	sub	result1, #1
0d738     F2 FA 61 FC | 	wrlong	result1, objptr
0d73c     FD FE 01 F6 | 	mov	result3, result1
0d740     01 FE 65 F0 | 	shl	result3, #1
0d744     FD FE 01 F1 | 	add	result3, result1
0d748     02 FE 65 F0 | 	shl	result3, #2
0d74c     0C 00 00 FF 
0d750     0C E4 85 F1 | 	sub	objptr, ##6156
0d754     F2 FE 01 F1 | 	add	result3, objptr
0d758     FF 00 02 FB | 	rdlong	_var01, result3
0d75c     04 FE 05 F1 | 	add	result3, #4
0d760     FF FE 01 FB | 	rdlong	result3, result3
0d764     FD FC 01 F6 | 	mov	result2, result1
0d768     01 FC 65 F0 | 	shl	result2, #1
0d76c     FD FC 01 F1 | 	add	result2, result1
0d770     02 FC 65 F0 | 	shl	result2, #2
0d774     F2 FC 01 F1 | 	add	result2, objptr
0d778     08 FC 05 F1 | 	add	result2, #8
0d77c     FE FA 01 FB | 	rdlong	result1, result2
0d780     FF 02 02 F6 | 	mov	_var02, result3
0d784     FD 04 02 F6 | 	mov	_var03, result1
0d788     37 00 00 FF 
0d78c     4C E4 85 F1 | 	sub	objptr, ##28236
0d790                 | LR__1070
0d790                 | ' return t1
0d790     01 FD 01 F6 | 	mov	result2, _var02
0d794     02 FF 01 F6 | 	mov	result3, _var03
0d798     00 FB 01 F6 | 	mov	result1, _var01
0d79c                 | _pop_ret
0d79c     2D 00 64 FD | 	ret
0d7a0                 | 
0d7a0                 | ' 
0d7a0                 | ' sub push(t1 as expr_result )
0d7a0                 | _push
0d7a0                 | ' if stackpointer<maxstack then 
0d7a0     43 00 00 FF 
0d7a4     58 E4 05 F1 | 	add	objptr, ##34392
0d7a8     F2 00 02 FB | 	rdlong	_var01, objptr
0d7ac     43 00 00 FF 
0d7b0     58 E4 85 F1 | 	sub	objptr, ##34392
0d7b4     01 00 00 FF 
0d7b8     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d7bc     BC 00 90 3D |  if_ae	jmp	#LR__1080
0d7c0     09 01 02 FB | 	rdlong	_var01, arg01
0d7c4     04 12 06 F1 | 	add	arg01, #4
0d7c8     09 03 02 FB | 	rdlong	_var02, arg01
0d7cc     04 12 06 F1 | 	add	arg01, #4
0d7d0     09 13 02 FB | 	rdlong	arg01, arg01
0d7d4     43 00 00 FF 
0d7d8     58 E4 05 F1 | 	add	objptr, ##34392
0d7dc     F2 04 02 FB | 	rdlong	_var03, objptr
0d7e0     02 07 02 F6 | 	mov	_var04, _var03
0d7e4     01 06 66 F0 | 	shl	_var04, #1
0d7e8     02 07 02 F1 | 	add	_var04, _var03
0d7ec     02 06 66 F0 | 	shl	_var04, #2
0d7f0     0C 00 00 FF 
0d7f4     0C E4 85 F1 | 	sub	objptr, ##6156
0d7f8     F2 06 02 F1 | 	add	_var04, objptr
0d7fc     03 01 62 FC | 	wrlong	_var01, _var04
0d800     0C 00 00 FF 
0d804     0C E4 05 F1 | 	add	objptr, ##6156
0d808     F2 06 02 FB | 	rdlong	_var04, objptr
0d80c     03 05 02 F6 | 	mov	_var03, _var04
0d810     01 04 66 F0 | 	shl	_var03, #1
0d814     03 05 02 F1 | 	add	_var03, _var04
0d818     02 04 66 F0 | 	shl	_var03, #2
0d81c     0C 00 00 FF 
0d820     0C E4 85 F1 | 	sub	objptr, ##6156
0d824     F2 04 02 F1 | 	add	_var03, objptr
0d828     04 04 06 F1 | 	add	_var03, #4
0d82c     02 03 62 FC | 	wrlong	_var02, _var03
0d830     0C 00 00 FF 
0d834     0C E4 05 F1 | 	add	objptr, ##6156
0d838     F2 06 02 FB | 	rdlong	_var04, objptr
0d83c     03 05 02 F6 | 	mov	_var03, _var04
0d840     01 04 66 F0 | 	shl	_var03, #1
0d844     03 05 02 F1 | 	add	_var03, _var04
0d848     02 04 66 F0 | 	shl	_var03, #2
0d84c     0C 00 00 FF 
0d850     0C E4 85 F1 | 	sub	objptr, ##6156
0d854     F2 04 02 F1 | 	add	_var03, objptr
0d858     08 04 06 F1 | 	add	_var03, #8
0d85c     02 13 62 FC | 	wrlong	arg01, _var03
0d860     0C 00 00 FF 
0d864     0C E4 05 F1 | 	add	objptr, ##6156
0d868     F2 00 02 FB | 	rdlong	_var01, objptr
0d86c     01 00 06 F1 | 	add	_var01, #1
0d870     F2 00 62 FC | 	wrlong	_var01, objptr
0d874     43 00 00 FF 
0d878     58 E4 85 F1 | 	sub	objptr, ##34392
0d87c                 | LR__1080
0d87c                 | _push_ret
0d87c     2D 00 64 FD | 	ret
0d880                 | 
0d880                 | ' 
0d880                 | ' ' -------------------------------- Runtime converting functions
0d880                 | ' 
0d880                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d880                 | ' 
0d880                 | ' function  convertstring(psaddr as ulong) as string
0d880                 | _convertstring
0d880     04 4A 05 F6 | 	mov	COUNT_, #4
0d884     A8 00 A0 FD | 	call	#pushregs_
0d888     09 27 02 F6 | 	mov	local01, arg01
0d88c     00 60 B1 FD | 	call	#_pslpeek
0d890     FD 28 02 F6 | 	mov	local02, result1
0d894     B9 01 00 FF 
0d898     2E 2B 06 F6 | 	mov	local03, ##@LR__5893
0d89c                 | ' l=pslpeek(psaddr) 
0d89c                 | ' s="" 
0d89c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d89c     01 2C 06 F6 | 	mov	local04, #1
0d8a0     01 28 06 F1 | 	add	local02, #1
0d8a4                 | LR__1090
0d8a4     14 2D 52 F2 | 	cmps	local04, local02 wc
0d8a8     30 00 90 3D |  if_ae	jmp	#LR__1091
0d8ac     13 13 02 F6 | 	mov	arg01, local01
0d8b0     03 12 06 F1 | 	add	arg01, #3
0d8b4     16 13 02 F1 | 	add	arg01, local04
0d8b8     7C 5F B1 FD | 	call	#_pspeek
0d8bc     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d8c0     E8 B9 B1 FD | 	call	#__system__Chr_S
0d8c4     FD 14 02 F6 | 	mov	arg02, result1
0d8c8     15 13 02 F6 | 	mov	arg01, local03
0d8cc     F8 97 B1 FD | 	call	#__system___string_concat
0d8d0     FD 2A 02 F6 | 	mov	local03, result1
0d8d4     01 2C 06 F1 | 	add	local04, #1
0d8d8     C8 FF 9F FD | 	jmp	#LR__1090
0d8dc                 | LR__1091
0d8dc                 | ' return s
0d8dc     15 FB 01 F6 | 	mov	result1, local03
0d8e0     A7 F0 03 F6 | 	mov	ptra, fp
0d8e4     B2 00 A0 FD | 	call	#popregs_
0d8e8                 | _convertstring_ret
0d8e8     2D 00 64 FD | 	ret
0d8ec                 | 
0d8ec                 | ' 
0d8ec                 | ' ' converts a variable to an integer
0d8ec                 | ' 
0d8ec                 | ' function converttoint (t1 as expr_result) as integer 
0d8ec                 | _converttoint
0d8ec     02 4A 05 F6 | 	mov	COUNT_, #2
0d8f0     A8 00 A0 FD | 	call	#pushregs_
0d8f4     09 27 02 F6 | 	mov	local01, arg01
0d8f8                 | ' 
0d8f8                 | ' select case t1.result_type
0d8f8     08 26 06 F1 | 	add	local01, #8
0d8fc     13 29 02 FB | 	rdlong	local02, local01
0d900     08 26 86 F1 | 	sub	local01, #8
0d904     1C 28 0E F2 | 	cmp	local02, #28 wz
0d908     2C 00 90 AD |  if_e	jmp	#LR__1100
0d90c     1D 28 0E F2 | 	cmp	local02, #29 wz
0d910     2C 00 90 AD |  if_e	jmp	#LR__1101
0d914     1E 28 0E F2 | 	cmp	local02, #30 wz
0d918     2C 00 90 AD |  if_e	jmp	#LR__1102
0d91c     1F 28 0E F2 | 	cmp	local02, #31 wz
0d920     34 00 90 AD |  if_e	jmp	#LR__1103
0d924     2B 28 0E F2 | 	cmp	local02, #43 wz
0d928     44 00 90 AD |  if_e	jmp	#LR__1104
0d92c     2C 28 0E F2 | 	cmp	local02, #44 wz
0d930     5C 00 90 AD |  if_e	jmp	#LR__1105
0d934     60 00 90 FD | 	jmp	#LR__1106
0d938                 | LR__1100
0d938     13 FB 01 FB | 	rdlong	result1, local01
0d93c     5C 00 90 FD | 	jmp	#LR__1107
0d940                 | LR__1101
0d940     13 FB 01 FB | 	rdlong	result1, local01
0d944     54 00 90 FD | 	jmp	#LR__1107
0d948                 | LR__1102
0d948     13 13 02 FB | 	rdlong	arg01, local01
0d94c     01 14 06 F6 | 	mov	arg02, #1
0d950     58 CA B1 FD | 	call	#__system___float_tointeger
0d954     44 00 90 FD | 	jmp	#LR__1107
0d958                 | LR__1103
0d958     13 13 02 FB | 	rdlong	arg01, local01
0d95c     90 CD B1 FD | 	call	#__system____builtin_atof
0d960     FD 12 02 F6 | 	mov	arg01, result1
0d964     01 14 06 F6 | 	mov	arg02, #1
0d968     40 CA B1 FD | 	call	#__system___float_tointeger
0d96c     2C 00 90 FD | 	jmp	#LR__1107
0d970                 | LR__1104
0d970     13 13 02 FB | 	rdlong	arg01, local01
0d974     08 FF BF FD | 	call	#_convertstring
0d978     FD 12 02 F6 | 	mov	arg01, result1
0d97c     70 CD B1 FD | 	call	#__system____builtin_atof
0d980     FD 12 02 F6 | 	mov	arg01, result1
0d984     01 14 06 F6 | 	mov	arg02, #1
0d988     20 CA B1 FD | 	call	#__system___float_tointeger
0d98c     0C 00 90 FD | 	jmp	#LR__1107
0d990                 | LR__1105
0d990     13 FB 01 FB | 	rdlong	result1, local01
0d994     04 00 90 FD | 	jmp	#LR__1107
0d998                 | LR__1106
0d998     00 FA 05 F6 | 	mov	result1, #0
0d99c                 | LR__1107
0d99c     A7 F0 03 F6 | 	mov	ptra, fp
0d9a0     B2 00 A0 FD | 	call	#popregs_
0d9a4                 | _converttoint_ret
0d9a4     2D 00 64 FD | 	ret
0d9a8                 | 
0d9a8                 | ' 
0d9a8                 | ' ' converts a variable to float
0d9a8                 | ' 
0d9a8                 | ' function converttofloat (t1 as expr_result) as single
0d9a8                 | _converttofloat
0d9a8     03 4A 05 F6 | 	mov	COUNT_, #3
0d9ac     A8 00 A0 FD | 	call	#pushregs_
0d9b0     09 27 02 F6 | 	mov	local01, arg01
0d9b4                 | ' 
0d9b4                 | ' select case t1.result_type
0d9b4     08 26 06 F1 | 	add	local01, #8
0d9b8     13 29 02 FB | 	rdlong	local02, local01
0d9bc     08 26 86 F1 | 	sub	local01, #8
0d9c0     1C 28 0E F2 | 	cmp	local02, #28 wz
0d9c4     24 00 90 AD |  if_e	jmp	#LR__1110
0d9c8     1D 28 0E F2 | 	cmp	local02, #29 wz
0d9cc     38 00 90 AD |  if_e	jmp	#LR__1111
0d9d0     1E 28 0E F2 | 	cmp	local02, #30 wz
0d9d4     3C 00 90 AD |  if_e	jmp	#LR__1112
0d9d8     1F 28 0E F2 | 	cmp	local02, #31 wz
0d9dc     3C 00 90 AD |  if_e	jmp	#LR__1113
0d9e0     2B 28 0E F2 | 	cmp	local02, #43 wz
0d9e4     40 00 90 AD |  if_e	jmp	#LR__1114
0d9e8     50 00 90 FD | 	jmp	#LR__1115
0d9ec                 | LR__1110
0d9ec     13 13 02 FB | 	rdlong	arg01, local01
0d9f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9f4     1F 2A C6 C9 |  if_b	decod	local03, #31
0d9f8     00 2A 06 36 |  if_ae	mov	local03, #0
0d9fc     E0 C0 B1 FD | 	call	#__system___float_fromuns
0da00     15 FB 61 F5 | 	xor	result1, local03
0da04     38 00 90 FD | 	jmp	#LR__1116
0da08                 | LR__1111
0da08     13 13 02 FB | 	rdlong	arg01, local01
0da0c     D0 C0 B1 FD | 	call	#__system___float_fromuns
0da10     2C 00 90 FD | 	jmp	#LR__1116
0da14                 | LR__1112
0da14     13 FB 01 FB | 	rdlong	result1, local01
0da18     24 00 90 FD | 	jmp	#LR__1116
0da1c                 | LR__1113
0da1c     13 13 02 FB | 	rdlong	arg01, local01
0da20     CC CC B1 FD | 	call	#__system____builtin_atof
0da24     18 00 90 FD | 	jmp	#LR__1116
0da28                 | LR__1114
0da28     13 13 02 FB | 	rdlong	arg01, local01
0da2c     50 FE BF FD | 	call	#_convertstring
0da30     FD 12 02 F6 | 	mov	arg01, result1
0da34     B8 CC B1 FD | 	call	#__system____builtin_atof
0da38     04 00 90 FD | 	jmp	#LR__1116
0da3c                 | LR__1115
0da3c     00 FA 05 F6 | 	mov	result1, #0
0da40                 | LR__1116
0da40     A7 F0 03 F6 | 	mov	ptra, fp
0da44     B2 00 A0 FD | 	call	#popregs_
0da48                 | _converttofloat_ret
0da48     2D 00 64 FD | 	ret
0da4c                 | 
0da4c                 | ' 
0da4c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da4c                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0da4c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da4c                 | ' 
0da4c                 | ' 
0da4c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da4c                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0da4c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da4c                 | ' 
0da4c                 | ' '-------------------- abs
0da4c                 | ' 
0da4c                 | ' sub do_abs
0da4c                 | _do_abs
0da4c     01 4A 05 F6 | 	mov	COUNT_, #1
0da50     A8 00 A0 FD | 	call	#pushregs_
0da54     0C F0 07 F1 | 	add	ptra, #12
0da58     AC FC BF FD | 	call	#_pop
0da5c     FF 26 02 F6 | 	mov	local01, result3
0da60     A7 FA 61 FC | 	wrlong	result1, fp
0da64     04 4E 05 F1 | 	add	fp, #4
0da68     A7 FC 61 FC | 	wrlong	result2, fp
0da6c     04 4E 05 F1 | 	add	fp, #4
0da70     A7 26 62 FC | 	wrlong	local01, fp
0da74                 | ' 
0da74                 | ' t1=pop()
0da74                 | ' if t1.result_type=result_int then 
0da74     08 4E 85 F1 | 	sub	fp, #8
0da78     1C 26 0E F2 | 	cmp	local01, #28 wz
0da7c     A7 12 02 AB |  if_e	rdlong	arg01, fp
0da80     09 27 42 A6 |  if_e	abs	local01, arg01
0da84     A7 26 62 AC |  if_e	wrlong	local01, fp
0da88     2C 00 90 AD |  if_e	jmp	#LR__1120
0da8c     08 4E 05 F1 | 	add	fp, #8
0da90     A7 26 02 FB | 	rdlong	local01, fp
0da94     08 4E 85 F1 | 	sub	fp, #8
0da98     1E 26 0E F2 | 	cmp	local01, #30 wz
0da9c     A7 FA 01 AB |  if_e	rdlong	result1, fp
0daa0     1F FA 05 A4 |  if_e	bitl	result1, #31
0daa4     A7 FA 61 AC |  if_e	wrlong	result1, fp
0daa8     08 4E 05 51 |  if_ne	add	fp, #8
0daac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dab0     08 4E 85 51 |  if_ne	sub	fp, #8
0dab4     A7 50 68 5C |  if_ne	wrlong	#40, fp
0dab8                 | LR__1120
0dab8     A7 12 02 F6 | 	mov	arg01, fp
0dabc     E0 FC BF FD | 	call	#_push
0dac0     A7 F0 03 F6 | 	mov	ptra, fp
0dac4     B2 00 A0 FD | 	call	#popregs_
0dac8                 | _do_abs_ret
0dac8     2D 00 64 FD | 	ret
0dacc                 | 
0dacc                 | ' 
0dacc                 | ' '-------------------- acos
0dacc                 | ' 
0dacc                 | ' sub do_acos
0dacc                 | _do_acos
0dacc     01 4A 05 F6 | 	mov	COUNT_, #1
0dad0     A8 00 A0 FD | 	call	#pushregs_
0dad4     10 F0 07 F1 | 	add	ptra, #16
0dad8     4A 00 00 FF 
0dadc     80 E4 05 F1 | 	add	objptr, ##38016
0dae0     F2 26 02 FB | 	rdlong	local01, objptr
0dae4     13 17 02 F6 | 	mov	arg03, local01
0dae8     01 16 66 F0 | 	shl	arg03, #1
0daec     13 17 02 F1 | 	add	arg03, local01
0daf0     02 16 66 F0 | 	shl	arg03, #2
0daf4     03 00 00 FF 
0daf8     04 E4 85 F1 | 	sub	objptr, ##1540
0dafc     F2 16 02 F1 | 	add	arg03, objptr
0db00     0B 17 02 FB | 	rdlong	arg03, arg03
0db04     0C 4E 05 F1 | 	add	fp, #12
0db08     A7 16 62 FC | 	wrlong	arg03, fp
0db0c                 | ' 
0db0c                 | ' numpar=compiledline(lineptr_e).result.uresult
0db0c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0db0c     0C 4E 85 F1 | 	sub	fp, #12
0db10     02 16 16 F2 | 	cmp	arg03, #2 wc
0db14     47 00 00 FF 
0db18     7C E4 85 F1 | 	sub	objptr, ##36476
0db1c     0C 4E 05 C1 |  if_b	add	fp, #12
0db20     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0db24     0C 4E 85 C1 |  if_b	sub	fp, #12
0db28     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0db2c     00 12 06 F6 | 	mov	arg01, #0
0db30     60 F2 B1 FD | 	call	#__system___getiolock_0616
0db34     FD 12 02 F6 | 	mov	arg01, result1
0db38     30 95 B1 FD | 	call	#__system___lockmem
0db3c     B9 01 00 FF 
0db40     2F 15 06 F6 | 	mov	arg02, ##@LR__5894
0db44     00 12 06 F6 | 	mov	arg01, #0
0db48     00 16 06 F6 | 	mov	arg03, #0
0db4c     10 A2 B1 FD | 	call	#__system___basic_print_string
0db50     00 12 06 F6 | 	mov	arg01, #0
0db54     3C F2 B1 FD | 	call	#__system___getiolock_0616
0db58     FD 00 68 FC | 	wrlong	#0, result1
0db5c     27 12 06 F6 | 	mov	arg01, #39
0db60     00 14 06 F6 | 	mov	arg02, #0
0db64     58 5A B1 FD | 	call	#_printerror
0db68     64 00 90 FD | 	jmp	#LR__1131
0db6c                 | LR__1130
0db6c     98 FB BF FD | 	call	#_pop
0db70     FF 26 02 F6 | 	mov	local01, result3
0db74     A7 FA 61 FC | 	wrlong	result1, fp
0db78     04 4E 05 F1 | 	add	fp, #4
0db7c     A7 FC 61 FC | 	wrlong	result2, fp
0db80     04 4E 05 F1 | 	add	fp, #4
0db84     A7 26 62 FC | 	wrlong	local01, fp
0db88     08 4E 85 F1 | 	sub	fp, #8
0db8c     A7 12 02 F6 | 	mov	arg01, fp
0db90     14 FE BF FD | 	call	#_converttofloat
0db94     FD 12 02 F6 | 	mov	arg01, result1
0db98     88 CE B1 FD | 	call	#__system____builtin_acosf
0db9c     FD 12 02 F6 | 	mov	arg01, result1
0dba0     52 00 00 FF 
0dba4     AC E4 05 F1 | 	add	objptr, ##42156
0dba8     F2 14 02 FB | 	rdlong	arg02, objptr
0dbac     52 00 00 FF 
0dbb0     AC E4 85 F1 | 	sub	objptr, ##42156
0dbb4     2C C3 B1 FD | 	call	#__system___float_mul
0dbb8     A7 FA 61 FC | 	wrlong	result1, fp
0dbbc     08 4E 05 F1 | 	add	fp, #8
0dbc0     A7 3C 68 FC | 	wrlong	#30, fp
0dbc4     08 4E 85 F1 | 	sub	fp, #8
0dbc8     A7 12 02 F6 | 	mov	arg01, fp
0dbcc     D0 FB BF FD | 	call	#_push
0dbd0                 | LR__1131
0dbd0     A7 F0 03 F6 | 	mov	ptra, fp
0dbd4     B2 00 A0 FD | 	call	#popregs_
0dbd8                 | _do_acos_ret
0dbd8     2D 00 64 FD | 	ret
0dbdc                 | 
0dbdc                 | ' 
0dbdc                 | ' '-------------------- asc
0dbdc                 | ' 
0dbdc                 | ' sub do_asc
0dbdc                 | _do_asc
0dbdc     01 4A 05 F6 | 	mov	COUNT_, #1
0dbe0     A8 00 A0 FD | 	call	#pushregs_
0dbe4     14 F0 07 F1 | 	add	ptra, #20
0dbe8     4A 00 00 FF 
0dbec     80 E4 05 F1 | 	add	objptr, ##38016
0dbf0     F2 26 02 FB | 	rdlong	local01, objptr
0dbf4     13 17 02 F6 | 	mov	arg03, local01
0dbf8     01 16 66 F0 | 	shl	arg03, #1
0dbfc     13 17 02 F1 | 	add	arg03, local01
0dc00     02 16 66 F0 | 	shl	arg03, #2
0dc04     03 00 00 FF 
0dc08     04 E4 85 F1 | 	sub	objptr, ##1540
0dc0c     F2 16 02 F1 | 	add	arg03, objptr
0dc10     0B 17 02 FB | 	rdlong	arg03, arg03
0dc14     0C 4E 05 F1 | 	add	fp, #12
0dc18     A7 16 62 FC | 	wrlong	arg03, fp
0dc1c                 | ' 
0dc1c                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc1c                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0dc1c     0C 4E 85 F1 | 	sub	fp, #12
0dc20     02 16 16 F2 | 	cmp	arg03, #2 wc
0dc24     47 00 00 FF 
0dc28     7C E4 85 F1 | 	sub	objptr, ##36476
0dc2c     0C 4E 05 C1 |  if_b	add	fp, #12
0dc30     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dc34     0C 4E 85 C1 |  if_b	sub	fp, #12
0dc38     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dc3c     00 12 06 F6 | 	mov	arg01, #0
0dc40     50 F1 B1 FD | 	call	#__system___getiolock_0616
0dc44     FD 12 02 F6 | 	mov	arg01, result1
0dc48     20 94 B1 FD | 	call	#__system___lockmem
0dc4c     B9 01 00 FF 
0dc50     36 15 06 F6 | 	mov	arg02, ##@LR__5895
0dc54     00 12 06 F6 | 	mov	arg01, #0
0dc58     00 16 06 F6 | 	mov	arg03, #0
0dc5c     00 A1 B1 FD | 	call	#__system___basic_print_string
0dc60     00 12 06 F6 | 	mov	arg01, #0
0dc64     2C F1 B1 FD | 	call	#__system___getiolock_0616
0dc68     FD 00 68 FC | 	wrlong	#0, result1
0dc6c     27 12 06 F6 | 	mov	arg01, #39
0dc70     00 14 06 F6 | 	mov	arg02, #0
0dc74     48 59 B1 FD | 	call	#_printerror
0dc78     B4 00 90 FD | 	jmp	#LR__1143
0dc7c                 | LR__1140
0dc7c     88 FA BF FD | 	call	#_pop
0dc80     FF 16 02 F6 | 	mov	arg03, result3
0dc84     A7 FA 61 FC | 	wrlong	result1, fp
0dc88     04 4E 05 F1 | 	add	fp, #4
0dc8c     A7 FC 61 FC | 	wrlong	result2, fp
0dc90     04 4E 05 F1 | 	add	fp, #4
0dc94     A7 16 62 FC | 	wrlong	arg03, fp
0dc98                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dc98     08 4E 85 F1 | 	sub	fp, #8
0dc9c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0dca0     18 00 90 5D |  if_ne	jmp	#LR__1141
0dca4     A7 12 02 FB | 	rdlong	arg01, fp
0dca8     D4 FB BF FD | 	call	#_convertstring
0dcac     A7 FA 61 FC | 	wrlong	result1, fp
0dcb0     08 4E 05 F1 | 	add	fp, #8
0dcb4     A7 3E 68 FC | 	wrlong	#31, fp
0dcb8     08 4E 85 F1 | 	sub	fp, #8
0dcbc                 | LR__1141
0dcbc                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dcbc     08 4E 05 F1 | 	add	fp, #8
0dcc0     A7 16 02 FB | 	rdlong	arg03, fp
0dcc4     08 4E 85 F1 | 	sub	fp, #8
0dcc8     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dccc     40 00 90 AD |  if_e	jmp	#LR__1142
0dcd0     00 12 06 F6 | 	mov	arg01, #0
0dcd4     BC F0 B1 FD | 	call	#__system___getiolock_0616
0dcd8     FD 12 02 F6 | 	mov	arg01, result1
0dcdc     8C 93 B1 FD | 	call	#__system___lockmem
0dce0     B9 01 00 FF 
0dce4     3C 15 06 F6 | 	mov	arg02, ##@LR__5896
0dce8     00 12 06 F6 | 	mov	arg01, #0
0dcec     00 16 06 F6 | 	mov	arg03, #0
0dcf0     6C A0 B1 FD | 	call	#__system___basic_print_string
0dcf4     00 12 06 F6 | 	mov	arg01, #0
0dcf8     98 F0 B1 FD | 	call	#__system___getiolock_0616
0dcfc     FD 00 68 FC | 	wrlong	#0, result1
0dd00     0F 12 06 F6 | 	mov	arg01, #15
0dd04     00 14 06 F6 | 	mov	arg02, #0
0dd08     B4 58 B1 FD | 	call	#_printerror
0dd0c     20 00 90 FD | 	jmp	#LR__1143
0dd10                 | LR__1142
0dd10     A7 26 02 FB | 	rdlong	local01, fp
0dd14     13 27 C2 FA | 	rdbyte	local01, local01
0dd18     A7 26 62 FC | 	wrlong	local01, fp
0dd1c     08 4E 05 F1 | 	add	fp, #8
0dd20     A7 38 68 FC | 	wrlong	#28, fp
0dd24     08 4E 85 F1 | 	sub	fp, #8
0dd28     A7 12 02 F6 | 	mov	arg01, fp
0dd2c     70 FA BF FD | 	call	#_push
0dd30                 | LR__1143
0dd30     A7 F0 03 F6 | 	mov	ptra, fp
0dd34     B2 00 A0 FD | 	call	#popregs_
0dd38                 | _do_asc_ret
0dd38     2D 00 64 FD | 	ret
0dd3c                 | 
0dd3c                 | ' 
0dd3c                 | ' '-------------------- asin
0dd3c                 | ' 
0dd3c                 | ' sub do_asin
0dd3c                 | _do_asin
0dd3c     01 4A 05 F6 | 	mov	COUNT_, #1
0dd40     A8 00 A0 FD | 	call	#pushregs_
0dd44     10 F0 07 F1 | 	add	ptra, #16
0dd48     4A 00 00 FF 
0dd4c     80 E4 05 F1 | 	add	objptr, ##38016
0dd50     F2 26 02 FB | 	rdlong	local01, objptr
0dd54     13 17 02 F6 | 	mov	arg03, local01
0dd58     01 16 66 F0 | 	shl	arg03, #1
0dd5c     13 17 02 F1 | 	add	arg03, local01
0dd60     02 16 66 F0 | 	shl	arg03, #2
0dd64     03 00 00 FF 
0dd68     04 E4 85 F1 | 	sub	objptr, ##1540
0dd6c     F2 16 02 F1 | 	add	arg03, objptr
0dd70     0B 17 02 FB | 	rdlong	arg03, arg03
0dd74     0C 4E 05 F1 | 	add	fp, #12
0dd78     A7 16 62 FC | 	wrlong	arg03, fp
0dd7c                 | ' 
0dd7c                 | ' numpar=compiledline(lineptr_e).result.uresult
0dd7c                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dd7c     0C 4E 85 F1 | 	sub	fp, #12
0dd80     02 16 16 F2 | 	cmp	arg03, #2 wc
0dd84     47 00 00 FF 
0dd88     7C E4 85 F1 | 	sub	objptr, ##36476
0dd8c     0C 4E 05 C1 |  if_b	add	fp, #12
0dd90     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd94     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd98     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dd9c     00 12 06 F6 | 	mov	arg01, #0
0dda0     F0 EF B1 FD | 	call	#__system___getiolock_0616
0dda4     FD 12 02 F6 | 	mov	arg01, result1
0dda8     C0 92 B1 FD | 	call	#__system___lockmem
0ddac     B9 01 00 FF 
0ddb0     42 15 06 F6 | 	mov	arg02, ##@LR__5897
0ddb4     00 12 06 F6 | 	mov	arg01, #0
0ddb8     00 16 06 F6 | 	mov	arg03, #0
0ddbc     A0 9F B1 FD | 	call	#__system___basic_print_string
0ddc0     00 12 06 F6 | 	mov	arg01, #0
0ddc4     CC EF B1 FD | 	call	#__system___getiolock_0616
0ddc8     FD 00 68 FC | 	wrlong	#0, result1
0ddcc     27 12 06 F6 | 	mov	arg01, #39
0ddd0     00 14 06 F6 | 	mov	arg02, #0
0ddd4     E8 57 B1 FD | 	call	#_printerror
0ddd8     64 00 90 FD | 	jmp	#LR__1151
0dddc                 | LR__1150
0dddc     28 F9 BF FD | 	call	#_pop
0dde0     FF 26 02 F6 | 	mov	local01, result3
0dde4     A7 FA 61 FC | 	wrlong	result1, fp
0dde8     04 4E 05 F1 | 	add	fp, #4
0ddec     A7 FC 61 FC | 	wrlong	result2, fp
0ddf0     04 4E 05 F1 | 	add	fp, #4
0ddf4     A7 26 62 FC | 	wrlong	local01, fp
0ddf8     08 4E 85 F1 | 	sub	fp, #8
0ddfc     A7 12 02 F6 | 	mov	arg01, fp
0de00     A4 FB BF FD | 	call	#_converttofloat
0de04     FD 12 02 F6 | 	mov	arg01, result1
0de08     CC CB B1 FD | 	call	#__system____builtin_asinf
0de0c     FD 12 02 F6 | 	mov	arg01, result1
0de10     52 00 00 FF 
0de14     AC E4 05 F1 | 	add	objptr, ##42156
0de18     F2 14 02 FB | 	rdlong	arg02, objptr
0de1c     52 00 00 FF 
0de20     AC E4 85 F1 | 	sub	objptr, ##42156
0de24     BC C0 B1 FD | 	call	#__system___float_mul
0de28     A7 FA 61 FC | 	wrlong	result1, fp
0de2c     08 4E 05 F1 | 	add	fp, #8
0de30     A7 3C 68 FC | 	wrlong	#30, fp
0de34     08 4E 85 F1 | 	sub	fp, #8
0de38     A7 12 02 F6 | 	mov	arg01, fp
0de3c     60 F9 BF FD | 	call	#_push
0de40                 | LR__1151
0de40     A7 F0 03 F6 | 	mov	ptra, fp
0de44     B2 00 A0 FD | 	call	#popregs_
0de48                 | _do_asin_ret
0de48     2D 00 64 FD | 	ret
0de4c                 | 
0de4c                 | ' 
0de4c                 | ' '-------------------- atn
0de4c                 | ' 
0de4c                 | ' sub do_atn
0de4c                 | _do_atn
0de4c     01 4A 05 F6 | 	mov	COUNT_, #1
0de50     A8 00 A0 FD | 	call	#pushregs_
0de54     10 F0 07 F1 | 	add	ptra, #16
0de58     4A 00 00 FF 
0de5c     80 E4 05 F1 | 	add	objptr, ##38016
0de60     F2 26 02 FB | 	rdlong	local01, objptr
0de64     13 17 02 F6 | 	mov	arg03, local01
0de68     01 16 66 F0 | 	shl	arg03, #1
0de6c     13 17 02 F1 | 	add	arg03, local01
0de70     02 16 66 F0 | 	shl	arg03, #2
0de74     03 00 00 FF 
0de78     04 E4 85 F1 | 	sub	objptr, ##1540
0de7c     F2 16 02 F1 | 	add	arg03, objptr
0de80     0B 17 02 FB | 	rdlong	arg03, arg03
0de84     0C 4E 05 F1 | 	add	fp, #12
0de88     A7 16 62 FC | 	wrlong	arg03, fp
0de8c                 | ' 
0de8c                 | ' numpar=compiledline(lineptr_e).result.uresult
0de8c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0de8c     0C 4E 85 F1 | 	sub	fp, #12
0de90     02 16 16 F2 | 	cmp	arg03, #2 wc
0de94     47 00 00 FF 
0de98     7C E4 85 F1 | 	sub	objptr, ##36476
0de9c     0C 4E 05 C1 |  if_b	add	fp, #12
0dea0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dea4     0C 4E 85 C1 |  if_b	sub	fp, #12
0dea8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0deac     00 12 06 F6 | 	mov	arg01, #0
0deb0     E0 EE B1 FD | 	call	#__system___getiolock_0616
0deb4     FD 12 02 F6 | 	mov	arg01, result1
0deb8     B0 91 B1 FD | 	call	#__system___lockmem
0debc     B9 01 00 FF 
0dec0     49 15 06 F6 | 	mov	arg02, ##@LR__5898
0dec4     00 12 06 F6 | 	mov	arg01, #0
0dec8     00 16 06 F6 | 	mov	arg03, #0
0decc     90 9E B1 FD | 	call	#__system___basic_print_string
0ded0     00 12 06 F6 | 	mov	arg01, #0
0ded4     BC EE B1 FD | 	call	#__system___getiolock_0616
0ded8     FD 00 68 FC | 	wrlong	#0, result1
0dedc     27 12 06 F6 | 	mov	arg01, #39
0dee0     00 14 06 F6 | 	mov	arg02, #0
0dee4     D8 56 B1 FD | 	call	#_printerror
0dee8     6C 00 90 FD | 	jmp	#LR__1161
0deec                 | LR__1160
0deec     18 F8 BF FD | 	call	#_pop
0def0     FF 26 02 F6 | 	mov	local01, result3
0def4     A7 FA 61 FC | 	wrlong	result1, fp
0def8     04 4E 05 F1 | 	add	fp, #4
0defc     A7 FC 61 FC | 	wrlong	result2, fp
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 26 62 FC | 	wrlong	local01, fp
0df08     08 4E 85 F1 | 	sub	fp, #8
0df0c     A7 12 02 F6 | 	mov	arg01, fp
0df10     94 FA BF FD | 	call	#_converttofloat
0df14     FD 12 02 F6 | 	mov	arg01, result1
0df18     00 C0 1F FF 
0df1c     00 14 06 F6 | 	mov	arg02, ##1065353216
0df20     4C CB B1 FD | 	call	#__system____builtin_atan2f
0df24     FD 12 02 F6 | 	mov	arg01, result1
0df28     52 00 00 FF 
0df2c     AC E4 05 F1 | 	add	objptr, ##42156
0df30     F2 14 02 FB | 	rdlong	arg02, objptr
0df34     52 00 00 FF 
0df38     AC E4 85 F1 | 	sub	objptr, ##42156
0df3c     A4 BF B1 FD | 	call	#__system___float_mul
0df40     A7 FA 61 FC | 	wrlong	result1, fp
0df44     08 4E 05 F1 | 	add	fp, #8
0df48     A7 3C 68 FC | 	wrlong	#30, fp
0df4c     08 4E 85 F1 | 	sub	fp, #8
0df50     A7 12 02 F6 | 	mov	arg01, fp
0df54     48 F8 BF FD | 	call	#_push
0df58                 | LR__1161
0df58     A7 F0 03 F6 | 	mov	ptra, fp
0df5c     B2 00 A0 FD | 	call	#popregs_
0df60                 | _do_atn_ret
0df60     2D 00 64 FD | 	ret
0df64                 | 
0df64                 | ' 
0df64                 | ' '-------------------- beep
0df64                 | ' 
0df64                 | ' sub do_beep
0df64                 | _do_beep
0df64     02 4A 05 F6 | 	mov	COUNT_, #2
0df68     A8 00 A0 FD | 	call	#pushregs_
0df6c     20 F0 07 F1 | 	add	ptra, #32
0df70     94 F7 BF FD | 	call	#_pop
0df74     FD 26 02 F6 | 	mov	local01, result1
0df78     FE 1C 02 F6 | 	mov	arg06, result2
0df7c     FF 28 02 F6 | 	mov	local02, result3
0df80     0C 4E 05 F1 | 	add	fp, #12
0df84     A7 26 62 FC | 	wrlong	local01, fp
0df88     04 4E 05 F1 | 	add	fp, #4
0df8c     A7 1C 62 FC | 	wrlong	arg06, fp
0df90     04 4E 05 F1 | 	add	fp, #4
0df94     A7 28 62 FC | 	wrlong	local02, fp
0df98     14 4E 85 F1 | 	sub	fp, #20
0df9c     68 F7 BF FD | 	call	#_pop
0dfa0     A7 FA 61 FC | 	wrlong	result1, fp
0dfa4     04 4E 05 F1 | 	add	fp, #4
0dfa8     A7 FC 61 FC | 	wrlong	result2, fp
0dfac     04 4E 05 F1 | 	add	fp, #4
0dfb0     A7 FE 61 FC | 	wrlong	result3, fp
0dfb4                 | ' 
0dfb4                 | ' t2=pop()
0dfb4                 | ' t1=pop()
0dfb4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dfb4     08 4E 85 F1 | 	sub	fp, #8
0dfb8     1C FE 0D F2 | 	cmp	result3, #28 wz
0dfbc     08 4E 05 51 |  if_ne	add	fp, #8
0dfc0     A7 28 02 5B |  if_ne	rdlong	local02, fp
0dfc4     08 4E 85 51 |  if_ne	sub	fp, #8
0dfc8     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0dfcc     A7 26 02 AB |  if_e	rdlong	local01, fp
0dfd0     18 4E 05 A1 |  if_e	add	fp, #24
0dfd4     A7 26 62 AC |  if_e	wrlong	local01, fp
0dfd8     18 4E 85 A1 |  if_e	sub	fp, #24
0dfdc     14 00 90 AD |  if_e	jmp	#LR__1170
0dfe0     A7 12 02 F6 | 	mov	arg01, fp
0dfe4     04 F9 BF FD | 	call	#_converttoint
0dfe8     18 4E 05 F1 | 	add	fp, #24
0dfec     A7 FA 61 FC | 	wrlong	result1, fp
0dff0     18 4E 85 F1 | 	sub	fp, #24
0dff4                 | LR__1170
0dff4     1C 4E 05 F1 | 	add	fp, #28
0dff8     A7 FE 48 FC | 	wrbyte	#127, fp
0dffc     01 4E 05 F1 | 	add	fp, #1
0e000     A7 00 49 FC | 	wrbyte	#128, fp
0e004     01 4E 85 F1 | 	sub	fp, #1
0e008     A7 14 02 F6 | 	mov	arg02, fp
0e00c     04 4E 85 F1 | 	sub	fp, #4
0e010     A7 16 02 FB | 	rdlong	arg03, fp
0e014     18 4E 85 F1 | 	sub	fp, #24
0e018     01 16 66 F0 | 	shl	arg03, #1
0e01c     07 12 06 F6 | 	mov	arg01, #7
0e020     0E 18 C6 F9 | 	decod	arg04, #14
0e024     02 1A 06 F6 | 	mov	arg05, #2
0e028     00 1C 06 F6 | 	mov	arg06, #0
0e02c     0B 00 00 FF 
0e030     CC E4 05 F1 | 	add	objptr, ##5836
0e034     20 8C B1 FD | 	call	#_audio096_spin2_play8
0e038     0B 00 00 FF 
0e03c     CC E4 85 F1 | 	sub	objptr, ##5836
0e040     0C 4E 05 F1 | 	add	fp, #12
0e044     A7 12 02 F6 | 	mov	arg01, fp
0e048     0C 4E 85 F1 | 	sub	fp, #12
0e04c     50 F7 BF FD | 	call	#_push
0e050     60 EA B0 FD | 	call	#_do_waitms
0e054     07 12 06 F6 | 	mov	arg01, #7
0e058     0B 00 00 FF 
0e05c     CC E4 05 F1 | 	add	objptr, ##5836
0e060     98 8C B1 FD | 	call	#_audio096_spin2_stop
0e064     0B 00 00 FF 
0e068     CC E4 85 F1 | 	sub	objptr, ##5836
0e06c     A7 F0 03 F6 | 	mov	ptra, fp
0e070     B2 00 A0 FD | 	call	#popregs_
0e074                 | _do_beep_ret
0e074     2D 00 64 FD | 	ret
0e078                 | 
0e078                 | ' 
0e078                 | ' '-------------------- blit
0e078                 | ' 
0e078                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0e078                 | ' sub do_blit
0e078                 | _do_blit
0e078     02 4A 05 F6 | 	mov	COUNT_, #2
0e07c     A8 00 A0 FD | 	call	#pushregs_
0e080     3C F0 07 F1 | 	add	ptra, #60
0e084     4A 00 00 FF 
0e088     80 E4 05 F1 | 	add	objptr, ##38016
0e08c     F2 26 02 FB | 	rdlong	local01, objptr
0e090     13 25 02 F6 | 	mov	arg10, local01
0e094     01 24 66 F0 | 	shl	arg10, #1
0e098     13 25 02 F1 | 	add	arg10, local01
0e09c     02 24 66 F0 | 	shl	arg10, #2
0e0a0     03 00 00 FF 
0e0a4     04 E4 85 F1 | 	sub	objptr, ##1540
0e0a8     F2 24 02 F1 | 	add	arg10, objptr
0e0ac     12 25 02 FB | 	rdlong	arg10, arg10
0e0b0     38 4E 05 F1 | 	add	fp, #56
0e0b4     A7 24 62 FC | 	wrlong	arg10, fp
0e0b8                 | ' 
0e0b8                 | ' numpar=compiledline(lineptr_e).result.uresult
0e0b8                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0e0b8     38 4E 85 F1 | 	sub	fp, #56
0e0bc     0A 24 0E F2 | 	cmp	arg10, #10 wz
0e0c0     47 00 00 FF 
0e0c4     7C E4 85 F1 | 	sub	objptr, ##36476
0e0c8     38 4E 05 51 |  if_ne	add	fp, #56
0e0cc     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e0d0     38 4E 85 51 |  if_ne	sub	fp, #56
0e0d4     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0e0d8     50 00 90 AD |  if_e	jmp	#LR__1180
0e0dc     00 12 06 F6 | 	mov	arg01, #0
0e0e0     B0 EC B1 FD | 	call	#__system___getiolock_0616
0e0e4     FD 12 02 F6 | 	mov	arg01, result1
0e0e8     80 8F B1 FD | 	call	#__system___lockmem
0e0ec     B9 01 00 FF 
0e0f0     4F 15 06 F6 | 	mov	arg02, ##@LR__5899
0e0f4     00 12 06 F6 | 	mov	arg01, #0
0e0f8     00 16 06 F6 | 	mov	arg03, #0
0e0fc     60 9C B1 FD | 	call	#__system___basic_print_string
0e100     00 12 06 F6 | 	mov	arg01, #0
0e104     8C EC B1 FD | 	call	#__system___getiolock_0616
0e108     FD 00 68 FC | 	wrlong	#0, result1
0e10c     50 00 00 FF 
0e110     F0 E4 05 F1 | 	add	objptr, ##41200
0e114     F2 14 02 FB | 	rdlong	arg02, objptr
0e118     50 00 00 FF 
0e11c     F0 E4 85 F1 | 	sub	objptr, ##41200
0e120     27 12 06 F6 | 	mov	arg01, #39
0e124     98 54 B1 FD | 	call	#_printerror
0e128     44 01 90 FD | 	jmp	#LR__1185
0e12c                 | LR__1180
0e12c                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e12c     38 4E 05 F1 | 	add	fp, #56
0e130     A7 28 02 FB | 	rdlong	local02, fp
0e134     01 28 86 F1 | 	sub	local02, #1
0e138     04 4E 85 F1 | 	sub	fp, #4
0e13c     A7 28 62 FC | 	wrlong	local02, fp
0e140     34 4E 85 F1 | 	sub	fp, #52
0e144                 | LR__1181
0e144     38 4E 05 F1 | 	add	fp, #56
0e148     A7 26 02 FB | 	rdlong	local01, fp
0e14c     01 26 86 F1 | 	sub	local01, #1
0e150     04 4E 85 F1 | 	sub	fp, #4
0e154     A7 24 02 FB | 	rdlong	arg10, fp
0e158     34 4E 85 F1 | 	sub	fp, #52
0e15c     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e160     54 00 90 1D |  if_a	jmp	#LR__1182
0e164     A0 F5 BF FD | 	call	#_pop
0e168     A7 FA 61 FC | 	wrlong	result1, fp
0e16c     04 4E 05 F1 | 	add	fp, #4
0e170     A7 FC 61 FC | 	wrlong	result2, fp
0e174     04 4E 05 F1 | 	add	fp, #4
0e178     A7 FE 61 FC | 	wrlong	result3, fp
0e17c     2C 4E 05 F1 | 	add	fp, #44
0e180     A7 28 02 FB | 	rdlong	local02, fp
0e184     02 28 66 F0 | 	shl	local02, #2
0e188     28 4E 85 F1 | 	sub	fp, #40
0e18c     A7 28 02 F1 | 	add	local02, fp
0e190     0C 4E 85 F1 | 	sub	fp, #12
0e194     A7 12 02 F6 | 	mov	arg01, fp
0e198     50 F7 BF FD | 	call	#_converttoint
0e19c     14 FB 61 FC | 	wrlong	result1, local02
0e1a0     34 4E 05 F1 | 	add	fp, #52
0e1a4     A7 28 02 FB | 	rdlong	local02, fp
0e1a8     01 28 86 F1 | 	sub	local02, #1
0e1ac     A7 28 62 FC | 	wrlong	local02, fp
0e1b0     34 4E 85 F1 | 	sub	fp, #52
0e1b4     8C FF 9F FD | 	jmp	#LR__1181
0e1b8                 | LR__1182
0e1b8                 | ' if numpar=10 then 
0e1b8     38 4E 05 F1 | 	add	fp, #56
0e1bc     A7 28 02 FB | 	rdlong	local02, fp
0e1c0     38 4E 85 F1 | 	sub	fp, #56
0e1c4     0A 28 0E F2 | 	cmp	local02, #10 wz
0e1c8     5C 00 90 5D |  if_ne	jmp	#LR__1183
0e1cc     0C 4E 05 F1 | 	add	fp, #12
0e1d0     A7 12 02 FB | 	rdlong	arg01, fp
0e1d4     04 4E 05 F1 | 	add	fp, #4
0e1d8     A7 14 02 FB | 	rdlong	arg02, fp
0e1dc     04 4E 05 F1 | 	add	fp, #4
0e1e0     A7 16 02 FB | 	rdlong	arg03, fp
0e1e4     04 4E 05 F1 | 	add	fp, #4
0e1e8     A7 18 02 FB | 	rdlong	arg04, fp
0e1ec     04 4E 05 F1 | 	add	fp, #4
0e1f0     A7 1A 02 FB | 	rdlong	arg05, fp
0e1f4     04 4E 05 F1 | 	add	fp, #4
0e1f8     A7 1C 02 FB | 	rdlong	arg06, fp
0e1fc     04 4E 05 F1 | 	add	fp, #4
0e200     A7 1E 02 FB | 	rdlong	arg07, fp
0e204     04 4E 05 F1 | 	add	fp, #4
0e208     A7 20 02 FB | 	rdlong	arg08, fp
0e20c     04 4E 05 F1 | 	add	fp, #4
0e210     A7 22 02 FB | 	rdlong	arg09, fp
0e214     04 4E 05 F1 | 	add	fp, #4
0e218     A7 24 02 FB | 	rdlong	arg10, fp
0e21c     30 4E 85 F1 | 	sub	fp, #48
0e220     C4 7B B1 FD | 	call	#_hg010b_spin2_blit
0e224     48 00 90 FD | 	jmp	#LR__1184
0e228                 | LR__1183
0e228     F2 1E 02 FB | 	rdlong	arg07, objptr
0e22c     0C 4E 05 F1 | 	add	fp, #12
0e230     A7 14 02 FB | 	rdlong	arg02, fp
0e234     04 4E 05 F1 | 	add	fp, #4
0e238     A7 16 02 FB | 	rdlong	arg03, fp
0e23c     04 4E 05 F1 | 	add	fp, #4
0e240     A7 18 02 FB | 	rdlong	arg04, fp
0e244     04 4E 05 F1 | 	add	fp, #4
0e248     A7 1A 02 FB | 	rdlong	arg05, fp
0e24c     04 4E 05 F1 | 	add	fp, #4
0e250     A7 20 02 FB | 	rdlong	arg08, fp
0e254     04 4E 05 F1 | 	add	fp, #4
0e258     A7 22 02 FB | 	rdlong	arg09, fp
0e25c     20 4E 85 F1 | 	sub	fp, #32
0e260     0F 13 02 F6 | 	mov	arg01, arg07
0e264     0A 1C C6 F9 | 	decod	arg06, #10
0e268     0A 24 C6 F9 | 	decod	arg10, #10
0e26c     78 7B B1 FD | 	call	#_hg010b_spin2_blit
0e270                 | LR__1184
0e270                 | LR__1185
0e270     A7 F0 03 F6 | 	mov	ptra, fp
0e274     B2 00 A0 FD | 	call	#popregs_
0e278                 | _do_blit_ret
0e278     2D 00 64 FD | 	ret
0e27c                 | 
0e27c                 | ' 
0e27c                 | ' 
0e27c                 | ' '-------------------- bin$
0e27c                 | ' 
0e27c                 | ' sub do_bin
0e27c                 | _do_bin
0e27c     01 4A 05 F6 | 	mov	COUNT_, #1
0e280     A8 00 A0 FD | 	call	#pushregs_
0e284     18 F0 07 F1 | 	add	ptra, #24
0e288     4A 00 00 FF 
0e28c     80 E4 05 F1 | 	add	objptr, ##38016
0e290     F2 26 02 FB | 	rdlong	local01, objptr
0e294     13 17 02 F6 | 	mov	arg03, local01
0e298     01 16 66 F0 | 	shl	arg03, #1
0e29c     13 17 02 F1 | 	add	arg03, local01
0e2a0     02 16 66 F0 | 	shl	arg03, #2
0e2a4     03 00 00 FF 
0e2a8     04 E4 85 F1 | 	sub	objptr, ##1540
0e2ac     F2 16 02 F1 | 	add	arg03, objptr
0e2b0     0B 17 02 FB | 	rdlong	arg03, arg03
0e2b4     0C 4E 05 F1 | 	add	fp, #12
0e2b8     A7 16 62 FC | 	wrlong	arg03, fp
0e2bc                 | ' 
0e2bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0e2bc                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e2bc     0C 4E 85 F1 | 	sub	fp, #12
0e2c0     03 16 16 F2 | 	cmp	arg03, #3 wc
0e2c4     47 00 00 FF 
0e2c8     7C E4 85 F1 | 	sub	objptr, ##36476
0e2cc     0C 4E 05 C1 |  if_b	add	fp, #12
0e2d0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e2d4     0C 4E 85 C1 |  if_b	sub	fp, #12
0e2d8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1190
0e2dc     00 12 06 F6 | 	mov	arg01, #0
0e2e0     B0 EA B1 FD | 	call	#__system___getiolock_0616
0e2e4     FD 12 02 F6 | 	mov	arg01, result1
0e2e8     80 8D B1 FD | 	call	#__system___lockmem
0e2ec     B9 01 00 FF 
0e2f0     56 15 06 F6 | 	mov	arg02, ##@LR__5900
0e2f4     00 12 06 F6 | 	mov	arg01, #0
0e2f8     00 16 06 F6 | 	mov	arg03, #0
0e2fc     60 9A B1 FD | 	call	#__system___basic_print_string
0e300     00 12 06 F6 | 	mov	arg01, #0
0e304     8C EA B1 FD | 	call	#__system___getiolock_0616
0e308     FD 00 68 FC | 	wrlong	#0, result1
0e30c     27 12 06 F6 | 	mov	arg01, #39
0e310     00 14 06 F6 | 	mov	arg02, #0
0e314     A8 52 B1 FD | 	call	#_printerror
0e318     B8 00 90 FD | 	jmp	#LR__1193
0e31c                 | LR__1190
0e31c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e31c     0C 4E 05 F1 | 	add	fp, #12
0e320     A7 26 02 FB | 	rdlong	local01, fp
0e324     0C 4E 85 F1 | 	sub	fp, #12
0e328     02 26 0E F2 | 	cmp	local01, #2 wz
0e32c     38 00 90 5D |  if_ne	jmp	#LR__1191
0e330     D4 F3 BF FD | 	call	#_pop
0e334     FF 26 02 F6 | 	mov	local01, result3
0e338     A7 FA 61 FC | 	wrlong	result1, fp
0e33c     04 4E 05 F1 | 	add	fp, #4
0e340     A7 FC 61 FC | 	wrlong	result2, fp
0e344     04 4E 05 F1 | 	add	fp, #4
0e348     A7 26 62 FC | 	wrlong	local01, fp
0e34c     08 4E 85 F1 | 	sub	fp, #8
0e350     A7 12 02 F6 | 	mov	arg01, fp
0e354     94 F5 BF FD | 	call	#_converttoint
0e358     14 4E 05 F1 | 	add	fp, #20
0e35c     A7 FA 61 FC | 	wrlong	result1, fp
0e360     14 4E 85 F1 | 	sub	fp, #20
0e364     0C 00 90 FD | 	jmp	#LR__1192
0e368                 | LR__1191
0e368     14 4E 05 F1 | 	add	fp, #20
0e36c     A7 00 68 FC | 	wrlong	#0, fp
0e370     14 4E 85 F1 | 	sub	fp, #20
0e374                 | LR__1192
0e374     90 F3 BF FD | 	call	#_pop
0e378     FF 26 02 F6 | 	mov	local01, result3
0e37c     A7 FA 61 FC | 	wrlong	result1, fp
0e380     04 4E 05 F1 | 	add	fp, #4
0e384     A7 FC 61 FC | 	wrlong	result2, fp
0e388     04 4E 05 F1 | 	add	fp, #4
0e38c     A7 26 62 FC | 	wrlong	local01, fp
0e390     08 4E 85 F1 | 	sub	fp, #8
0e394     A7 12 02 F6 | 	mov	arg01, fp
0e398     50 F5 BF FD | 	call	#_converttoint
0e39c     10 4E 05 F1 | 	add	fp, #16
0e3a0     A7 FA 61 FC | 	wrlong	result1, fp
0e3a4     FD 12 02 F6 | 	mov	arg01, result1
0e3a8     04 4E 05 F1 | 	add	fp, #4
0e3ac     A7 14 02 FB | 	rdlong	arg02, fp
0e3b0     14 4E 85 F1 | 	sub	fp, #20
0e3b4     02 16 06 F6 | 	mov	arg03, #2
0e3b8     80 AF B1 FD | 	call	#__system__Number_S
0e3bc     A7 FA 61 FC | 	wrlong	result1, fp
0e3c0     08 4E 05 F1 | 	add	fp, #8
0e3c4     A7 3E 68 FC | 	wrlong	#31, fp
0e3c8     08 4E 85 F1 | 	sub	fp, #8
0e3cc     A7 12 02 F6 | 	mov	arg01, fp
0e3d0     CC F3 BF FD | 	call	#_push
0e3d4                 | LR__1193
0e3d4     A7 F0 03 F6 | 	mov	ptra, fp
0e3d8     B2 00 A0 FD | 	call	#popregs_
0e3dc                 | _do_bin_ret
0e3dc     2D 00 64 FD | 	ret
0e3e0                 | 
0e3e0                 | ' 
0e3e0                 | ' '-------------------- box
0e3e0                 | ' 
0e3e0                 | ' sub do_box
0e3e0                 | _do_box
0e3e0     03 4A 05 F6 | 	mov	COUNT_, #3
0e3e4     A8 00 A0 FD | 	call	#pushregs_
0e3e8     30 F0 07 F1 | 	add	ptra, #48
0e3ec     18 F3 BF FD | 	call	#_pop
0e3f0     FD 1A 02 F6 | 	mov	arg05, result1
0e3f4     FE 18 02 F6 | 	mov	arg04, result2
0e3f8     FF 16 02 F6 | 	mov	arg03, result3
0e3fc     24 4E 05 F1 | 	add	fp, #36
0e400     A7 1A 62 FC | 	wrlong	arg05, fp
0e404     04 4E 05 F1 | 	add	fp, #4
0e408     A7 18 62 FC | 	wrlong	arg04, fp
0e40c     04 4E 05 F1 | 	add	fp, #4
0e410     A7 16 62 FC | 	wrlong	arg03, fp
0e414     2C 4E 85 F1 | 	sub	fp, #44
0e418     EC F2 BF FD | 	call	#_pop
0e41c     FD 1A 02 F6 | 	mov	arg05, result1
0e420     FE 18 02 F6 | 	mov	arg04, result2
0e424     FF 16 02 F6 | 	mov	arg03, result3
0e428     18 4E 05 F1 | 	add	fp, #24
0e42c     A7 1A 62 FC | 	wrlong	arg05, fp
0e430     04 4E 05 F1 | 	add	fp, #4
0e434     A7 18 62 FC | 	wrlong	arg04, fp
0e438     04 4E 05 F1 | 	add	fp, #4
0e43c     A7 16 62 FC | 	wrlong	arg03, fp
0e440     20 4E 85 F1 | 	sub	fp, #32
0e444     C0 F2 BF FD | 	call	#_pop
0e448     FD 1A 02 F6 | 	mov	arg05, result1
0e44c     FE 18 02 F6 | 	mov	arg04, result2
0e450     FF 26 02 F6 | 	mov	local01, result3
0e454     0C 4E 05 F1 | 	add	fp, #12
0e458     A7 1A 62 FC | 	wrlong	arg05, fp
0e45c     04 4E 05 F1 | 	add	fp, #4
0e460     A7 18 62 FC | 	wrlong	arg04, fp
0e464     04 4E 05 F1 | 	add	fp, #4
0e468     A7 26 62 FC | 	wrlong	local01, fp
0e46c     14 4E 85 F1 | 	sub	fp, #20
0e470     94 F2 BF FD | 	call	#_pop
0e474     A7 FA 61 FC | 	wrlong	result1, fp
0e478     04 4E 05 F1 | 	add	fp, #4
0e47c     A7 FC 61 FC | 	wrlong	result2, fp
0e480     04 4E 05 F1 | 	add	fp, #4
0e484     A7 FE 61 FC | 	wrlong	result3, fp
0e488                 | ' 
0e488                 | ' t4=pop()
0e488                 | ' t3=pop()
0e488                 | ' t2=pop()
0e488                 | ' t1=pop()
0e488                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e488     FF 1A 02 F6 | 	mov	arg05, result3
0e48c     08 4E 85 F1 | 	sub	fp, #8
0e490     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e494     08 4E 05 51 |  if_ne	add	fp, #8
0e498     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e49c     08 4E 85 51 |  if_ne	sub	fp, #8
0e4a0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e4a4     A8 00 90 5D |  if_ne	jmp	#LR__1200
0e4a8     14 4E 05 F1 | 	add	fp, #20
0e4ac     A7 26 02 FB | 	rdlong	local01, fp
0e4b0     14 4E 85 F1 | 	sub	fp, #20
0e4b4     1C 26 0E F2 | 	cmp	local01, #28 wz
0e4b8     14 4E 05 51 |  if_ne	add	fp, #20
0e4bc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e4c0     14 4E 85 51 |  if_ne	sub	fp, #20
0e4c4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e4c8     84 00 90 5D |  if_ne	jmp	#LR__1200
0e4cc     20 4E 05 F1 | 	add	fp, #32
0e4d0     A7 26 02 FB | 	rdlong	local01, fp
0e4d4     20 4E 85 F1 | 	sub	fp, #32
0e4d8     1C 26 0E F2 | 	cmp	local01, #28 wz
0e4dc     20 4E 05 51 |  if_ne	add	fp, #32
0e4e0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e4e4     20 4E 85 51 |  if_ne	sub	fp, #32
0e4e8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e4ec     60 00 90 5D |  if_ne	jmp	#LR__1200
0e4f0     2C 4E 05 F1 | 	add	fp, #44
0e4f4     A7 26 02 FB | 	rdlong	local01, fp
0e4f8     2C 4E 85 F1 | 	sub	fp, #44
0e4fc     1C 26 0E F2 | 	cmp	local01, #28 wz
0e500     2C 4E 05 51 |  if_ne	add	fp, #44
0e504     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e508     2C 4E 85 51 |  if_ne	sub	fp, #44
0e50c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e510     3C 00 90 5D |  if_ne	jmp	#LR__1200
0e514     A7 12 02 FB | 	rdlong	arg01, fp
0e518     0C 4E 05 F1 | 	add	fp, #12
0e51c     A7 14 02 FB | 	rdlong	arg02, fp
0e520     0C 4E 05 F1 | 	add	fp, #12
0e524     A7 16 02 FB | 	rdlong	arg03, fp
0e528     0C 4E 05 F1 | 	add	fp, #12
0e52c     A7 18 02 FB | 	rdlong	arg04, fp
0e530     24 4E 85 F1 | 	sub	fp, #36
0e534     37 00 00 FF 
0e538     28 E4 05 F1 | 	add	objptr, ##28200
0e53c     F2 1A 02 FB | 	rdlong	arg05, objptr
0e540     37 00 00 FF 
0e544     28 E4 85 F1 | 	sub	objptr, ##28200
0e548     34 6B B1 FD | 	call	#_hg010b_spin2_box
0e54c                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e54c     6C 00 90 FD | 	jmp	#LR__1201
0e550                 | LR__1200
0e550     A7 12 02 F6 | 	mov	arg01, fp
0e554     94 F3 BF FD | 	call	#_converttoint
0e558     FD 28 02 F6 | 	mov	local02, result1
0e55c     0C 4E 05 F1 | 	add	fp, #12
0e560     A7 12 02 F6 | 	mov	arg01, fp
0e564     0C 4E 85 F1 | 	sub	fp, #12
0e568     80 F3 BF FD | 	call	#_converttoint
0e56c     FD 2A 02 F6 | 	mov	local03, result1
0e570     18 4E 05 F1 | 	add	fp, #24
0e574     A7 12 02 F6 | 	mov	arg01, fp
0e578     18 4E 85 F1 | 	sub	fp, #24
0e57c     6C F3 BF FD | 	call	#_converttoint
0e580     FD 26 02 F6 | 	mov	local01, result1
0e584     24 4E 05 F1 | 	add	fp, #36
0e588     A7 12 02 F6 | 	mov	arg01, fp
0e58c     24 4E 85 F1 | 	sub	fp, #36
0e590     58 F3 BF FD | 	call	#_converttoint
0e594     FD 18 02 F6 | 	mov	arg04, result1
0e598     37 00 00 FF 
0e59c     28 E4 05 F1 | 	add	objptr, ##28200
0e5a0     F2 1A 02 FB | 	rdlong	arg05, objptr
0e5a4     37 00 00 FF 
0e5a8     28 E4 85 F1 | 	sub	objptr, ##28200
0e5ac     14 13 02 F6 | 	mov	arg01, local02
0e5b0     15 15 02 F6 | 	mov	arg02, local03
0e5b4     13 17 02 F6 | 	mov	arg03, local01
0e5b8     C4 6A B1 FD | 	call	#_hg010b_spin2_box
0e5bc                 | LR__1201
0e5bc     A7 F0 03 F6 | 	mov	ptra, fp
0e5c0     B2 00 A0 FD | 	call	#popregs_
0e5c4                 | _do_box_ret
0e5c4     2D 00 64 FD | 	ret
0e5c8                 | 
0e5c8                 | ' 
0e5c8                 | ' '-------------------- brun
0e5c8                 | ' 
0e5c8                 | ' sub do_brun
0e5c8                 | _do_brun
0e5c8     08 4A 05 F6 | 	mov	COUNT_, #8
0e5cc     A8 00 A0 FD | 	call	#pushregs_
0e5d0     34 F1 BF FD | 	call	#_pop
0e5d4     FE 1A 02 F6 | 	mov	arg05, result2
0e5d8     FF 18 02 F6 | 	mov	arg04, result3
0e5dc     FD 26 02 F6 | 	mov	local01, result1
0e5e0     0D 29 02 F6 | 	mov	local02, arg05
0e5e4     0C 2B 02 F6 | 	mov	local03, arg04
0e5e8                 | ' 
0e5e8                 | ' t1=pop() 
0e5e8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e5e8     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e5ec     10 00 90 5D |  if_ne	jmp	#LR__1210
0e5f0     13 13 02 F6 | 	mov	arg01, local01
0e5f4     88 F2 BF FD | 	call	#_convertstring
0e5f8     FD 26 02 F6 | 	mov	local01, result1
0e5fc     1F 2A 06 F6 | 	mov	local03, #31
0e600                 | LR__1210
0e600                 | ' if t1.result_type=result_string then
0e600     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e604     EC 01 90 5D |  if_ne	jmp	#LR__1214
0e608     13 2D 02 F6 | 	mov	local04, local01
0e60c                 | '   filename=t1.result.sresult
0e60c                 | '   if left$(filename,1)="/" then 
0e60c     16 13 02 F6 | 	mov	arg01, local04
0e610     01 14 06 F6 | 	mov	arg02, #1
0e614     D0 AA B1 FD | 	call	#__system__Left_S
0e618     FD 12 02 F6 | 	mov	arg01, result1
0e61c     B9 01 00 FF 
0e620     5D 15 06 F6 | 	mov	arg02, ##@LR__5901
0e624     6C 8A B1 FD | 	call	#__system___string_cmp
0e628     00 FA 0D F2 | 	cmp	result1, #0 wz
0e62c     16 2F 02 A6 |  if_e	mov	local05, local04
0e630     14 00 90 AD |  if_e	jmp	#LR__1211
0e634     B9 01 00 FF 
0e638     5F 13 06 F6 | 	mov	arg01, ##@LR__5902
0e63c     16 15 02 F6 | 	mov	arg02, local04
0e640     84 8A B1 FD | 	call	#__system___string_concat
0e644     FD 2E 02 F6 | 	mov	local05, result1
0e648                 | LR__1211
0e648                 | '   open fullfilename for input as #9
0e648     09 12 06 F6 | 	mov	arg01, #9
0e64c     17 15 02 F6 | 	mov	arg02, local05
0e650     00 16 06 F6 | 	mov	arg03, #0
0e654     18 96 B1 FD | 	call	#__system___basic_open_string
0e658     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e65c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e660     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e664     FD 30 0A F6 | 	mov	local06, result1 wz
0e668                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e668     8C 00 90 AD |  if_e	jmp	#LR__1212
0e66c     00 12 06 F6 | 	mov	arg01, #0
0e670     20 E7 B1 FD | 	call	#__system___getiolock_0616
0e674     FD 12 02 F6 | 	mov	arg01, result1
0e678     F0 89 B1 FD | 	call	#__system___lockmem
0e67c     B9 01 00 FF 
0e680     68 15 06 F6 | 	mov	arg02, ##@LR__5903
0e684     00 12 06 F6 | 	mov	arg01, #0
0e688     00 16 06 F6 | 	mov	arg03, #0
0e68c     D0 96 B1 FD | 	call	#__system___basic_print_string
0e690     00 12 06 F6 | 	mov	arg01, #0
0e694     18 15 02 F6 | 	mov	arg02, local06
0e698     00 16 06 F6 | 	mov	arg03, #0
0e69c     0A 18 06 F6 | 	mov	arg04, #10
0e6a0     00 97 B1 FD | 	call	#__system___basic_print_integer
0e6a4     B9 01 00 FF 
0e6a8     76 15 06 F6 | 	mov	arg02, ##@LR__5904
0e6ac     00 12 06 F6 | 	mov	arg01, #0
0e6b0     00 16 06 F6 | 	mov	arg03, #0
0e6b4     A8 96 B1 FD | 	call	#__system___basic_print_string
0e6b8     18 13 02 F6 | 	mov	arg01, local06
0e6bc     38 B3 B1 FD | 	call	#__system___strerror
0e6c0     FD 14 02 F6 | 	mov	arg02, result1
0e6c4     00 12 06 F6 | 	mov	arg01, #0
0e6c8     00 16 06 F6 | 	mov	arg03, #0
0e6cc     90 96 B1 FD | 	call	#__system___basic_print_string
0e6d0     00 12 06 F6 | 	mov	arg01, #0
0e6d4     0A 14 06 F6 | 	mov	arg02, #10
0e6d8     00 16 06 F6 | 	mov	arg03, #0
0e6dc     28 96 B1 FD | 	call	#__system___basic_print_char
0e6e0     00 12 06 F6 | 	mov	arg01, #0
0e6e4     AC E6 B1 FD | 	call	#__system___getiolock_0616
0e6e8     FD 00 68 FC | 	wrlong	#0, result1
0e6ec     09 12 06 F6 | 	mov	arg01, #9
0e6f0     D0 DC B1 FD | 	call	#__system__close
0e6f4     FC 00 90 FD | 	jmp	#LR__1215
0e6f8                 | LR__1212
0e6f8     01 32 06 F6 | 	mov	local07, #1
0e6fc     00 34 06 F6 | 	mov	local08, #0
0e700                 | '   do
0e700                 | LR__1213
0e700                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e700     4E 00 00 FF 
0e704     B4 E4 05 F1 | 	add	objptr, ##40116
0e708     F2 16 02 F6 | 	mov	arg03, objptr
0e70c     4E 00 00 FF 
0e710     B4 E4 85 F1 | 	sub	objptr, ##40116
0e714     09 12 06 F6 | 	mov	arg01, #9
0e718     19 15 02 F6 | 	mov	arg02, local07
0e71c     0A 18 C6 F9 | 	decod	arg04, #10
0e720     01 1A 06 F6 | 	mov	arg05, #1
0e724     B4 97 B1 FD | 	call	#__system___basic_get
0e728     FD 30 02 F6 | 	mov	local06, result1
0e72c     FD 32 02 F1 | 	add	local07, result1
0e730     4E 00 00 FF 
0e734     B4 E4 05 F1 | 	add	objptr, ##40116
0e738     F2 12 02 F6 | 	mov	arg01, objptr
0e73c     1A 15 02 F6 | 	mov	arg02, local08
0e740     0A 16 C6 F9 | 	decod	arg03, #10
0e744     42 00 00 FF 
0e748     E8 E5 85 F1 | 	sub	objptr, ##34280
0e74c     C0 7C B1 FD | 	call	#_psram_spin2_write
0e750     0B 00 00 FF 
0e754     CC E4 85 F1 | 	sub	objptr, ##5836
0e758     18 35 02 F1 | 	add	local08, local06
0e75c     02 00 00 FF 
0e760     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e764     E0 03 00 AF 
0e768     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e76c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1213
0e770     36 00 00 FF 
0e774     FC E5 05 F1 | 	add	objptr, ##28156
0e778     F2 12 02 FB | 	rdlong	arg01, objptr
0e77c     03 12 62 FD | 	cogstop	arg01
0e780     04 E4 05 F1 | 	add	objptr, #4
0e784     F2 12 02 FB | 	rdlong	arg01, objptr
0e788     03 12 62 FD | 	cogstop	arg01
0e78c     04 E4 05 F1 | 	add	objptr, #4
0e790     F2 12 02 FB | 	rdlong	arg01, objptr
0e794     03 12 62 FD | 	cogstop	arg01
0e798     19 00 00 FF 
0e79c     3C E5 05 F1 | 	add	objptr, ##13116
0e7a0     F2 12 02 FB | 	rdlong	arg01, objptr
0e7a4     03 12 62 FD | 	cogstop	arg01
0e7a8     18 00 00 FF 
0e7ac     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e7b0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e7b4     18 00 00 FF 
0e7b8     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e7bc     19 00 00 FF 
0e7c0     34 E5 85 F1 | 	sub	objptr, ##13108
0e7c4     1E 34 06 F6 | 	mov	local08, #30
0e7c8     28 E4 61 FD | 	setq	objptr
0e7cc     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e7d0     01 34 66 C6 |  if_b	neg	local08, #1
0e7d4     1B 00 00 FF 
0e7d8     0C E5 05 F1 | 	add	objptr, ##14092
0e7dc     F2 34 62 FC | 	wrlong	local08, objptr
0e7e0     52 00 00 FF 
0e7e4     18 E5 85 F1 | 	sub	objptr, ##42264
0e7e8     00 12 06 F6 | 	mov	arg01, #0
0e7ec     01 12 62 FD | 	cogid	arg01
0e7f0     03 12 62 FD | 	cogstop	arg01
0e7f4                 | LR__1214
0e7f4                 | LR__1215
0e7f4     A7 F0 03 F6 | 	mov	ptra, fp
0e7f8     B2 00 A0 FD | 	call	#popregs_
0e7fc                 | _do_brun_ret
0e7fc     2D 00 64 FD | 	ret
0e800                 | 
0e800                 | ' 
0e800                 | ' '-------------------- cd
0e800                 | ' 
0e800                 | ' sub do_cd
0e800                 | _do_cd
0e800     06 4A 05 F6 | 	mov	COUNT_, #6
0e804     A8 00 A0 FD | 	call	#pushregs_
0e808     B9 01 00 FF 
0e80c     79 13 06 F6 | 	mov	arg01, ##@LR__5905
0e810     31 14 06 F6 | 	mov	arg02, #49
0e814     B4 E6 B1 FD | 	call	#__system___basic_dir
0e818     EC EE BF FD | 	call	#_pop
0e81c     FE 18 02 F6 | 	mov	arg04, result2
0e820     FF 16 02 F6 | 	mov	arg03, result3
0e824     FD 26 02 F6 | 	mov	local01, result1
0e828     0C 29 02 F6 | 	mov	local02, arg04
0e82c     0B 2B 02 F6 | 	mov	local03, arg03
0e830                 | ' t1=pop()
0e830                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e830     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e834     10 00 90 5D |  if_ne	jmp	#LR__1220
0e838     13 13 02 F6 | 	mov	arg01, local01
0e83c     40 F0 BF FD | 	call	#_convertstring
0e840     FD 26 02 F6 | 	mov	local01, result1
0e844     1F 2A 06 F6 | 	mov	local03, #31
0e848                 | LR__1220
0e848                 | ' if t1.result_type<>result_string then printerror(15): return
0e848     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e84c     10 00 90 AD |  if_e	jmp	#LR__1221
0e850     0F 12 06 F6 | 	mov	arg01, #15
0e854     00 14 06 F6 | 	mov	arg02, #0
0e858     64 4D B1 FD | 	call	#_printerror
0e85c     48 05 90 FD | 	jmp	#LR__1239
0e860                 | LR__1221
0e860     13 2D 02 F6 | 	mov	local04, local01
0e864                 | ' newdir$=t1.result.sresult
0e864                 | ' if newdir$=".." then 
0e864     B9 01 00 FF 
0e868     7B 15 06 F6 | 	mov	arg02, ##@LR__5906
0e86c     16 13 02 F6 | 	mov	arg01, local04
0e870     20 88 B1 FD | 	call	#__system___string_cmp
0e874     00 FA 0D F2 | 	cmp	result1, #0 wz
0e878     C4 01 90 5D |  if_ne	jmp	#LR__1228
0e87c     4A 00 00 FF 
0e880     94 E4 05 F1 | 	add	objptr, ##38036
0e884     F2 12 02 FB | 	rdlong	arg01, objptr
0e888     4A 00 00 FF 
0e88c     94 E4 85 F1 | 	sub	objptr, ##38036
0e890     09 2F 02 F6 | 	mov	local05, arg01
0e894     97 06 48 FB | 	callpa	#(@LR__1223-@LR__1222)>>2,fcache_load_ptr_
0e898                 | LR__1222
0e898     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e89c     01 2E 06 51 |  if_ne	add	local05, #1
0e8a0     F4 FF 9F 5D |  if_ne	jmp	#LR__1222
0e8a4                 | LR__1223
0e8a4     17 13 C2 F2 | 	subr	arg01, local05
0e8a8     4A 00 00 FF 
0e8ac     94 E4 05 F1 | 	add	objptr, ##38036
0e8b0     F2 14 02 FB | 	rdlong	arg02, objptr
0e8b4     4A 00 00 FF 
0e8b8     94 E4 85 F1 | 	sub	objptr, ##38036
0e8bc     B9 01 00 FF 
0e8c0     7E 17 06 F6 | 	mov	arg03, ##@LR__5907
0e8c4     6C AE B1 FD | 	call	#__system__InstrRev
0e8c8     FD 2C 02 F6 | 	mov	local04, result1
0e8cc                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e8cc     02 2C 56 F2 | 	cmps	local04, #2 wc
0e8d0     28 00 90 CD |  if_b	jmp	#LR__1224
0e8d4     4A 00 00 FF 
0e8d8     94 E4 05 F1 | 	add	objptr, ##38036
0e8dc     F2 12 02 FB | 	rdlong	arg01, objptr
0e8e0     4A 00 00 FF 
0e8e4     94 E4 85 F1 | 	sub	objptr, ##38036
0e8e8     01 2C 86 F1 | 	sub	local04, #1
0e8ec     16 15 02 F6 | 	mov	arg02, local04
0e8f0     F4 A7 B1 FD | 	call	#__system__Left_S
0e8f4     FD 2C 02 F6 | 	mov	local04, result1
0e8f8     08 00 90 FD | 	jmp	#LR__1225
0e8fc                 | LR__1224
0e8fc     B9 01 00 FF 
0e900     80 2D 06 F6 | 	mov	local04, ##@LR__5908
0e904                 | LR__1225
0e904     16 13 02 F6 | 	mov	arg01, local04
0e908     EC 8D B1 FD | 	call	#__system___chdir
0e90c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e910     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e914     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e918     FD 30 0A F6 | 	mov	local06, result1 wz
0e91c                 | '   chdir newdir$
0e91c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e91c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e920     A4 00 90 AD |  if_e	jmp	#LR__1226
0e924     00 12 06 F6 | 	mov	arg01, #0
0e928     68 E4 B1 FD | 	call	#__system___getiolock_0616
0e92c     FD 12 02 F6 | 	mov	arg01, result1
0e930     38 87 B1 FD | 	call	#__system___lockmem
0e934     B9 01 00 FF 
0e938     82 15 06 F6 | 	mov	arg02, ##@LR__5909
0e93c     00 12 06 F6 | 	mov	arg01, #0
0e940     00 16 06 F6 | 	mov	arg03, #0
0e944     18 94 B1 FD | 	call	#__system___basic_print_string
0e948     00 12 06 F6 | 	mov	arg01, #0
0e94c     18 15 02 F6 | 	mov	arg02, local06
0e950     00 16 06 F6 | 	mov	arg03, #0
0e954     0A 18 06 F6 | 	mov	arg04, #10
0e958     48 94 B1 FD | 	call	#__system___basic_print_integer
0e95c     B9 01 00 FF 
0e960     90 15 06 F6 | 	mov	arg02, ##@LR__5910
0e964     00 12 06 F6 | 	mov	arg01, #0
0e968     00 16 06 F6 | 	mov	arg03, #0
0e96c     F0 93 B1 FD | 	call	#__system___basic_print_string
0e970     45 00 00 FF 
0e974     50 E5 05 F1 | 	add	objptr, ##35664
0e978     F2 14 02 FB | 	rdlong	arg02, objptr
0e97c     45 00 00 FF 
0e980     50 E5 85 F1 | 	sub	objptr, ##35664
0e984     00 12 06 F6 | 	mov	arg01, #0
0e988     00 16 06 F6 | 	mov	arg03, #0
0e98c     D0 93 B1 FD | 	call	#__system___basic_print_string
0e990     00 12 06 F6 | 	mov	arg01, #0
0e994     0A 14 06 F6 | 	mov	arg02, #10
0e998     00 16 06 F6 | 	mov	arg03, #0
0e99c     68 93 B1 FD | 	call	#__system___basic_print_char
0e9a0     00 12 06 F6 | 	mov	arg01, #0
0e9a4     EC E3 B1 FD | 	call	#__system___getiolock_0616
0e9a8     FD 00 68 FC | 	wrlong	#0, result1
0e9ac     4A 00 00 FF 
0e9b0     94 E4 05 F1 | 	add	objptr, ##38036
0e9b4     F2 12 02 FB | 	rdlong	arg01, objptr
0e9b8     4A 00 00 FF 
0e9bc     94 E4 85 F1 | 	sub	objptr, ##38036
0e9c0     34 8D B1 FD | 	call	#__system___chdir
0e9c4     14 00 90 FD | 	jmp	#LR__1227
0e9c8                 | LR__1226
0e9c8     4A 00 00 FF 
0e9cc     94 E4 05 F1 | 	add	objptr, ##38036
0e9d0     F2 2C 62 FC | 	wrlong	local04, objptr
0e9d4     4A 00 00 FF 
0e9d8     94 E4 85 F1 | 	sub	objptr, ##38036
0e9dc                 | LR__1227
0e9dc                 | '   print "Current directory: ";currentdir$
0e9dc     00 12 06 F6 | 	mov	arg01, #0
0e9e0     B0 E3 B1 FD | 	call	#__system___getiolock_0616
0e9e4     FD 12 02 F6 | 	mov	arg01, result1
0e9e8     80 86 B1 FD | 	call	#__system___lockmem
0e9ec     B9 01 00 FF 
0e9f0     93 15 06 F6 | 	mov	arg02, ##@LR__5911
0e9f4     00 12 06 F6 | 	mov	arg01, #0
0e9f8     00 16 06 F6 | 	mov	arg03, #0
0e9fc     60 93 B1 FD | 	call	#__system___basic_print_string
0ea00     4A 00 00 FF 
0ea04     94 E4 05 F1 | 	add	objptr, ##38036
0ea08     F2 14 02 FB | 	rdlong	arg02, objptr
0ea0c     4A 00 00 FF 
0ea10     94 E4 85 F1 | 	sub	objptr, ##38036
0ea14     00 12 06 F6 | 	mov	arg01, #0
0ea18     00 16 06 F6 | 	mov	arg03, #0
0ea1c     40 93 B1 FD | 	call	#__system___basic_print_string
0ea20     00 12 06 F6 | 	mov	arg01, #0
0ea24     0A 14 06 F6 | 	mov	arg02, #10
0ea28     00 16 06 F6 | 	mov	arg03, #0
0ea2c     D8 92 B1 FD | 	call	#__system___basic_print_char
0ea30     00 12 06 F6 | 	mov	arg01, #0
0ea34     5C E3 B1 FD | 	call	#__system___getiolock_0616
0ea38     FD 00 68 FC | 	wrlong	#0, result1
0ea3c                 | '   return
0ea3c     68 03 90 FD | 	jmp	#LR__1239
0ea40                 | LR__1228
0ea40                 | ' if left$(newdir$,1)="/" then 
0ea40     16 13 02 F6 | 	mov	arg01, local04
0ea44     01 14 06 F6 | 	mov	arg02, #1
0ea48     9C A6 B1 FD | 	call	#__system__Left_S
0ea4c     FD 12 02 F6 | 	mov	arg01, result1
0ea50     B9 01 00 FF 
0ea54     A7 15 06 F6 | 	mov	arg02, ##@LR__5912
0ea58     38 86 B1 FD | 	call	#__system___string_cmp
0ea5c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea60     3C 01 90 5D |  if_ne	jmp	#LR__1231
0ea64     16 13 02 F6 | 	mov	arg01, local04
0ea68     8C 8C B1 FD | 	call	#__system___chdir
0ea6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ea70     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ea74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ea78     FD 30 0A F6 | 	mov	local06, result1 wz
0ea7c                 | '   chdir(newdir$)
0ea7c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ea7c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ea80     A4 00 90 AD |  if_e	jmp	#LR__1229
0ea84     00 12 06 F6 | 	mov	arg01, #0
0ea88     08 E3 B1 FD | 	call	#__system___getiolock_0616
0ea8c     FD 12 02 F6 | 	mov	arg01, result1
0ea90     D8 85 B1 FD | 	call	#__system___lockmem
0ea94     B9 01 00 FF 
0ea98     A9 15 06 F6 | 	mov	arg02, ##@LR__5913
0ea9c     00 12 06 F6 | 	mov	arg01, #0
0eaa0     00 16 06 F6 | 	mov	arg03, #0
0eaa4     B8 92 B1 FD | 	call	#__system___basic_print_string
0eaa8     00 12 06 F6 | 	mov	arg01, #0
0eaac     18 15 02 F6 | 	mov	arg02, local06
0eab0     00 16 06 F6 | 	mov	arg03, #0
0eab4     0A 18 06 F6 | 	mov	arg04, #10
0eab8     E8 92 B1 FD | 	call	#__system___basic_print_integer
0eabc     B9 01 00 FF 
0eac0     B7 15 06 F6 | 	mov	arg02, ##@LR__5914
0eac4     00 12 06 F6 | 	mov	arg01, #0
0eac8     00 16 06 F6 | 	mov	arg03, #0
0eacc     90 92 B1 FD | 	call	#__system___basic_print_string
0ead0     45 00 00 FF 
0ead4     50 E5 05 F1 | 	add	objptr, ##35664
0ead8     F2 14 02 FB | 	rdlong	arg02, objptr
0eadc     45 00 00 FF 
0eae0     50 E5 85 F1 | 	sub	objptr, ##35664
0eae4     00 12 06 F6 | 	mov	arg01, #0
0eae8     00 16 06 F6 | 	mov	arg03, #0
0eaec     70 92 B1 FD | 	call	#__system___basic_print_string
0eaf0     00 12 06 F6 | 	mov	arg01, #0
0eaf4     0A 14 06 F6 | 	mov	arg02, #10
0eaf8     00 16 06 F6 | 	mov	arg03, #0
0eafc     08 92 B1 FD | 	call	#__system___basic_print_char
0eb00     00 12 06 F6 | 	mov	arg01, #0
0eb04     8C E2 B1 FD | 	call	#__system___getiolock_0616
0eb08     FD 00 68 FC | 	wrlong	#0, result1
0eb0c     4A 00 00 FF 
0eb10     94 E4 05 F1 | 	add	objptr, ##38036
0eb14     F2 12 02 FB | 	rdlong	arg01, objptr
0eb18     4A 00 00 FF 
0eb1c     94 E4 85 F1 | 	sub	objptr, ##38036
0eb20     D4 8B B1 FD | 	call	#__system___chdir
0eb24     14 00 90 FD | 	jmp	#LR__1230
0eb28                 | LR__1229
0eb28     4A 00 00 FF 
0eb2c     94 E4 05 F1 | 	add	objptr, ##38036
0eb30     F2 2C 62 FC | 	wrlong	local04, objptr
0eb34     4A 00 00 FF 
0eb38     94 E4 85 F1 | 	sub	objptr, ##38036
0eb3c                 | LR__1230
0eb3c                 | '   print "Current directory: ";currentdir$
0eb3c     00 12 06 F6 | 	mov	arg01, #0
0eb40     50 E2 B1 FD | 	call	#__system___getiolock_0616
0eb44     FD 12 02 F6 | 	mov	arg01, result1
0eb48     20 85 B1 FD | 	call	#__system___lockmem
0eb4c     B9 01 00 FF 
0eb50     BA 15 06 F6 | 	mov	arg02, ##@LR__5915
0eb54     00 12 06 F6 | 	mov	arg01, #0
0eb58     00 16 06 F6 | 	mov	arg03, #0
0eb5c     00 92 B1 FD | 	call	#__system___basic_print_string
0eb60     4A 00 00 FF 
0eb64     94 E4 05 F1 | 	add	objptr, ##38036
0eb68     F2 14 02 FB | 	rdlong	arg02, objptr
0eb6c     4A 00 00 FF 
0eb70     94 E4 85 F1 | 	sub	objptr, ##38036
0eb74     00 12 06 F6 | 	mov	arg01, #0
0eb78     00 16 06 F6 | 	mov	arg03, #0
0eb7c     E0 91 B1 FD | 	call	#__system___basic_print_string
0eb80     00 12 06 F6 | 	mov	arg01, #0
0eb84     0A 14 06 F6 | 	mov	arg02, #10
0eb88     00 16 06 F6 | 	mov	arg03, #0
0eb8c     78 91 B1 FD | 	call	#__system___basic_print_char
0eb90     00 12 06 F6 | 	mov	arg01, #0
0eb94     FC E1 B1 FD | 	call	#__system___getiolock_0616
0eb98     FD 00 68 FC | 	wrlong	#0, result1
0eb9c                 | '   return
0eb9c     08 02 90 FD | 	jmp	#LR__1239
0eba0                 | LR__1231
0eba0                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0eba0     4A 00 00 FF 
0eba4     94 E4 05 F1 | 	add	objptr, ##38036
0eba8     F2 12 02 FB | 	rdlong	arg01, objptr
0ebac     4A 00 00 FF 
0ebb0     94 E4 85 F1 | 	sub	objptr, ##38036
0ebb4     B9 01 00 FF 
0ebb8     CE 15 06 F6 | 	mov	arg02, ##@LR__5916
0ebbc     D4 84 B1 FD | 	call	#__system___string_cmp
0ebc0     00 FA 0D F2 | 	cmp	result1, #0 wz
0ebc4     34 00 90 AD |  if_e	jmp	#LR__1232
0ebc8     4A 00 00 FF 
0ebcc     94 E4 05 F1 | 	add	objptr, ##38036
0ebd0     F2 12 02 FB | 	rdlong	arg01, objptr
0ebd4     4A 00 00 FF 
0ebd8     94 E4 85 F1 | 	sub	objptr, ##38036
0ebdc     B9 01 00 FF 
0ebe0     D0 15 06 F6 | 	mov	arg02, ##@LR__5917
0ebe4     E0 84 B1 FD | 	call	#__system___string_concat
0ebe8     FD 12 02 F6 | 	mov	arg01, result1
0ebec     16 15 02 F6 | 	mov	arg02, local04
0ebf0     D4 84 B1 FD | 	call	#__system___string_concat
0ebf4     FD 2C 02 F6 | 	mov	local04, result1
0ebf8     20 00 90 FD | 	jmp	#LR__1233
0ebfc                 | LR__1232
0ebfc     4A 00 00 FF 
0ec00     94 E4 05 F1 | 	add	objptr, ##38036
0ec04     F2 12 02 FB | 	rdlong	arg01, objptr
0ec08     4A 00 00 FF 
0ec0c     94 E4 85 F1 | 	sub	objptr, ##38036
0ec10     16 15 02 F6 | 	mov	arg02, local04
0ec14     B0 84 B1 FD | 	call	#__system___string_concat
0ec18     FD 2C 02 F6 | 	mov	local04, result1
0ec1c                 | LR__1233
0ec1c                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ec1c     16 13 02 F6 | 	mov	arg01, local04
0ec20     01 14 06 F6 | 	mov	arg02, #1
0ec24     48 A5 B1 FD | 	call	#__system__Right_S
0ec28     FD 12 02 F6 | 	mov	arg01, result1
0ec2c     B9 01 00 FF 
0ec30     D2 15 06 F6 | 	mov	arg02, ##@LR__5918
0ec34     5C 84 B1 FD | 	call	#__system___string_cmp
0ec38     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec3c     30 00 90 5D |  if_ne	jmp	#LR__1236
0ec40     16 13 02 F6 | 	mov	arg01, local04
0ec44     09 2F 02 F6 | 	mov	local05, arg01
0ec48     97 06 48 FB | 	callpa	#(@LR__1235-@LR__1234)>>2,fcache_load_ptr_
0ec4c                 | LR__1234
0ec4c     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ec50     01 2E 06 51 |  if_ne	add	local05, #1
0ec54     F4 FF 9F 5D |  if_ne	jmp	#LR__1234
0ec58                 | LR__1235
0ec58     09 2F 82 F1 | 	sub	local05, arg01
0ec5c     17 15 02 F6 | 	mov	arg02, local05
0ec60     01 14 86 F1 | 	sub	arg02, #1
0ec64     16 13 02 F6 | 	mov	arg01, local04
0ec68     7C A4 B1 FD | 	call	#__system__Left_S
0ec6c     FD 2C 02 F6 | 	mov	local04, result1
0ec70                 | LR__1236
0ec70     16 13 02 F6 | 	mov	arg01, local04
0ec74     80 8A B1 FD | 	call	#__system___chdir
0ec78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ec7c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ec80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ec84     FD 30 0A F6 | 	mov	local06, result1 wz
0ec88                 | '   chdir(newdir$)
0ec88                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ec88     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ec8c     A4 00 90 AD |  if_e	jmp	#LR__1237
0ec90     00 12 06 F6 | 	mov	arg01, #0
0ec94     FC E0 B1 FD | 	call	#__system___getiolock_0616
0ec98     FD 12 02 F6 | 	mov	arg01, result1
0ec9c     CC 83 B1 FD | 	call	#__system___lockmem
0eca0     B9 01 00 FF 
0eca4     D4 15 06 F6 | 	mov	arg02, ##@LR__5919
0eca8     00 12 06 F6 | 	mov	arg01, #0
0ecac     00 16 06 F6 | 	mov	arg03, #0
0ecb0     AC 90 B1 FD | 	call	#__system___basic_print_string
0ecb4     00 12 06 F6 | 	mov	arg01, #0
0ecb8     18 15 02 F6 | 	mov	arg02, local06
0ecbc     00 16 06 F6 | 	mov	arg03, #0
0ecc0     0A 18 06 F6 | 	mov	arg04, #10
0ecc4     DC 90 B1 FD | 	call	#__system___basic_print_integer
0ecc8     B9 01 00 FF 
0eccc     E2 15 06 F6 | 	mov	arg02, ##@LR__5920
0ecd0     00 12 06 F6 | 	mov	arg01, #0
0ecd4     00 16 06 F6 | 	mov	arg03, #0
0ecd8     84 90 B1 FD | 	call	#__system___basic_print_string
0ecdc     45 00 00 FF 
0ece0     50 E5 05 F1 | 	add	objptr, ##35664
0ece4     F2 14 02 FB | 	rdlong	arg02, objptr
0ece8     45 00 00 FF 
0ecec     50 E5 85 F1 | 	sub	objptr, ##35664
0ecf0     00 12 06 F6 | 	mov	arg01, #0
0ecf4     00 16 06 F6 | 	mov	arg03, #0
0ecf8     64 90 B1 FD | 	call	#__system___basic_print_string
0ecfc     00 12 06 F6 | 	mov	arg01, #0
0ed00     0A 14 06 F6 | 	mov	arg02, #10
0ed04     00 16 06 F6 | 	mov	arg03, #0
0ed08     FC 8F B1 FD | 	call	#__system___basic_print_char
0ed0c     00 12 06 F6 | 	mov	arg01, #0
0ed10     80 E0 B1 FD | 	call	#__system___getiolock_0616
0ed14     FD 00 68 FC | 	wrlong	#0, result1
0ed18     4A 00 00 FF 
0ed1c     94 E4 05 F1 | 	add	objptr, ##38036
0ed20     F2 12 02 FB | 	rdlong	arg01, objptr
0ed24     4A 00 00 FF 
0ed28     94 E4 85 F1 | 	sub	objptr, ##38036
0ed2c     C8 89 B1 FD | 	call	#__system___chdir
0ed30     14 00 90 FD | 	jmp	#LR__1238
0ed34                 | LR__1237
0ed34     4A 00 00 FF 
0ed38     94 E4 05 F1 | 	add	objptr, ##38036
0ed3c     F2 2C 62 FC | 	wrlong	local04, objptr
0ed40     4A 00 00 FF 
0ed44     94 E4 85 F1 | 	sub	objptr, ##38036
0ed48                 | LR__1238
0ed48                 | '   print "Current directory: ";currentdir$
0ed48     00 12 06 F6 | 	mov	arg01, #0
0ed4c     44 E0 B1 FD | 	call	#__system___getiolock_0616
0ed50     FD 12 02 F6 | 	mov	arg01, result1
0ed54     14 83 B1 FD | 	call	#__system___lockmem
0ed58     B9 01 00 FF 
0ed5c     E5 15 06 F6 | 	mov	arg02, ##@LR__5921
0ed60     00 12 06 F6 | 	mov	arg01, #0
0ed64     00 16 06 F6 | 	mov	arg03, #0
0ed68     F4 8F B1 FD | 	call	#__system___basic_print_string
0ed6c     4A 00 00 FF 
0ed70     94 E4 05 F1 | 	add	objptr, ##38036
0ed74     F2 14 02 FB | 	rdlong	arg02, objptr
0ed78     4A 00 00 FF 
0ed7c     94 E4 85 F1 | 	sub	objptr, ##38036
0ed80     00 12 06 F6 | 	mov	arg01, #0
0ed84     00 16 06 F6 | 	mov	arg03, #0
0ed88     D4 8F B1 FD | 	call	#__system___basic_print_string
0ed8c     00 12 06 F6 | 	mov	arg01, #0
0ed90     0A 14 06 F6 | 	mov	arg02, #10
0ed94     00 16 06 F6 | 	mov	arg03, #0
0ed98     6C 8F B1 FD | 	call	#__system___basic_print_char
0ed9c     00 12 06 F6 | 	mov	arg01, #0
0eda0     F0 DF B1 FD | 	call	#__system___getiolock_0616
0eda4     FD 00 68 FC | 	wrlong	#0, result1
0eda8                 | LR__1239
0eda8     A7 F0 03 F6 | 	mov	ptra, fp
0edac     B2 00 A0 FD | 	call	#popregs_
0edb0                 | _do_cd_ret
0edb0     2D 00 64 FD | 	ret
0edb4                 | 
0edb4                 | ' 
0edb4                 | ' '-------------------- changefreq
0edb4                 | ' 
0edb4                 | ' sub do_changefreq
0edb4                 | _do_changefreq
0edb4     04 4A 05 F6 | 	mov	COUNT_, #4
0edb8     A8 00 A0 FD | 	call	#pushregs_
0edbc     28 F0 07 F1 | 	add	ptra, #40
0edc0     44 E9 BF FD | 	call	#_pop
0edc4     FF 14 02 F6 | 	mov	arg02, result3
0edc8     A7 FA 61 FC | 	wrlong	result1, fp
0edcc     04 4E 05 F1 | 	add	fp, #4
0edd0     A7 FC 61 FC | 	wrlong	result2, fp
0edd4     04 4E 05 F1 | 	add	fp, #4
0edd8     A7 14 62 FC | 	wrlong	arg02, fp
0eddc     08 4E 85 F1 | 	sub	fp, #8
0ede0     A7 12 02 F6 | 	mov	arg01, fp
0ede4     C0 EB BF FD | 	call	#_converttofloat
0ede8     24 4E 05 F1 | 	add	fp, #36
0edec     A7 FA 61 FC | 	wrlong	result1, fp
0edf0     24 4E 85 F1 | 	sub	fp, #36
0edf4     FD 14 02 F6 | 	mov	arg02, result1
0edf8     FC 16 20 FF 
0edfc     54 12 06 F6 | 	mov	arg01, ##1076754516
0ee00     B0 C0 B1 FD | 	call	#__system____builtin_logbase
0ee04     FD 26 02 F6 | 	mov	local01, result1
0ee08     1E 14 C6 F9 | 	decod	arg02, #30
0ee0c     FC 16 20 FF 
0ee10     54 12 06 F6 | 	mov	arg01, ##1076754516
0ee14     9C C0 B1 FD | 	call	#__system____builtin_logbase
0ee18     FD 14 02 F6 | 	mov	arg02, result1
0ee1c     13 13 02 F6 | 	mov	arg01, local01
0ee20     C4 B2 B1 FD | 	call	#__system___float_div
0ee24     FD 12 02 F6 | 	mov	arg01, result1
0ee28     00 14 06 F6 | 	mov	arg02, #0
0ee2c     7C B5 B1 FD | 	call	#__system___float_tointeger
0ee30     10 4E 05 F1 | 	add	fp, #16
0ee34     A7 FA 61 FC | 	wrlong	result1, fp
0ee38     1E 26 C6 F9 | 	decod	local01, #30
0ee3c     FD 12 02 F6 | 	mov	arg01, result1
0ee40     10 4E 85 F1 | 	sub	fp, #16
0ee44     05 12 06 F1 | 	add	arg01, #5
0ee48     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee4c     1F 28 C6 C9 |  if_b	decod	local02, #31
0ee50     00 28 06 36 |  if_ae	mov	local02, #0
0ee54     88 AC B1 FD | 	call	#__system___float_fromuns
0ee58     14 FB 61 F5 | 	xor	result1, local02
0ee5c     FD 14 02 F6 | 	mov	arg02, result1
0ee60     13 13 02 F6 | 	mov	arg01, local01
0ee64     84 BF B1 FD | 	call	#__system____builtin_powf
0ee68     FD 12 02 F6 | 	mov	arg01, result1
0ee6c     01 14 06 F6 | 	mov	arg02, #1
0ee70     38 B5 B1 FD | 	call	#__system___float_tointeger
0ee74     14 4E 05 F1 | 	add	fp, #20
0ee78     A7 FA 61 FC | 	wrlong	result1, fp
0ee7c                 | ' skip=round(2^(lfreq+5))
0ee7c                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ee7c     14 4E 85 F1 | 	sub	fp, #20
0ee80     40 00 00 FF 
0ee84     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ee88     30 00 90 CD |  if_b	jmp	#LR__1240
0ee8c     14 4E 05 F1 | 	add	fp, #20
0ee90     A7 26 02 FB | 	rdlong	local01, fp
0ee94     13 27 52 F6 | 	abs	local01, local01 wc
0ee98     0F 26 46 F0 | 	shr	local01, #15
0ee9c     13 27 82 F6 | 	negc	local01, local01
0eea0     04 4E 05 F1 | 	add	fp, #4
0eea4     A7 26 62 FC | 	wrlong	local01, fp
0eea8     04 4E 85 F1 | 	sub	fp, #4
0eeac     40 00 80 FF 
0eeb0     A7 00 68 FC | 	wrlong	##32768, fp
0eeb4     14 4E 85 F1 | 	sub	fp, #20
0eeb8     0C 00 90 FD | 	jmp	#LR__1241
0eebc                 | LR__1240
0eebc     18 4E 05 F1 | 	add	fp, #24
0eec0     A7 02 68 FC | 	wrlong	#1, fp
0eec4     18 4E 85 F1 | 	sub	fp, #24
0eec8                 | LR__1241
0eec8     24 4E 05 F1 | 	add	fp, #36
0eecc     A7 14 02 FB | 	rdlong	arg02, fp
0eed0     24 4E 85 F1 | 	sub	fp, #36
0eed4     3E 2C 25 FF 
0eed8     3C 12 06 F6 | 	mov	arg01, ##1247312956
0eedc     08 B2 B1 FD | 	call	#__system___float_div
0eee0     FD 26 02 F6 | 	mov	local01, result1
0eee4     18 4E 05 F1 | 	add	fp, #24
0eee8     A7 12 02 FB | 	rdlong	arg01, fp
0eeec     18 4E 85 F1 | 	sub	fp, #24
0eef0     09 13 52 F6 | 	abs	arg01, arg01 wc
0eef4     1F 28 C6 C9 |  if_b	decod	local02, #31
0eef8     00 28 06 36 |  if_ae	mov	local02, #0
0eefc     E0 AB B1 FD | 	call	#__system___float_fromuns
0ef00     14 FB 61 F5 | 	xor	result1, local02
0ef04     FD 2A 02 F6 | 	mov	local03, result1
0ef08     1E 2C C6 F9 | 	decod	local04, #30
0ef0c     0D 12 06 F6 | 	mov	arg01, #13
0ef10     10 4E 05 F1 | 	add	fp, #16
0ef14     A7 14 02 FB | 	rdlong	arg02, fp
0ef18     10 4E 85 F1 | 	sub	fp, #16
0ef1c     0A 13 82 F1 | 	sub	arg01, arg02
0ef20     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef24     1F 28 C6 C9 |  if_b	decod	local02, #31
0ef28     00 28 06 36 |  if_ae	mov	local02, #0
0ef2c     B0 AB B1 FD | 	call	#__system___float_fromuns
0ef30     14 FB 61 F5 | 	xor	result1, local02
0ef34     FD 14 02 F6 | 	mov	arg02, result1
0ef38     16 13 02 F6 | 	mov	arg01, local04
0ef3c     AC BE B1 FD | 	call	#__system____builtin_powf
0ef40     FD 14 02 F6 | 	mov	arg02, result1
0ef44     15 13 02 F6 | 	mov	arg01, local03
0ef48     98 AF B1 FD | 	call	#__system___float_mul
0ef4c     FD 14 02 F6 | 	mov	arg02, result1
0ef50     13 13 02 F6 | 	mov	arg01, local01
0ef54     90 B1 B1 FD | 	call	#__system___float_div
0ef58     FD 12 02 F6 | 	mov	arg01, result1
0ef5c     01 14 06 F6 | 	mov	arg02, #1
0ef60     48 B4 B1 FD | 	call	#__system___float_tointeger
0ef64     FD 26 02 F6 | 	mov	local01, result1
0ef68     1C 4E 05 F1 | 	add	fp, #28
0ef6c     A7 26 62 FC | 	wrlong	local01, fp
0ef70     1C 4E 85 F1 | 	sub	fp, #28
0ef74     90 E7 BF FD | 	call	#_pop
0ef78     FF 2C 02 F6 | 	mov	local04, result3
0ef7c     A7 FA 61 FC | 	wrlong	result1, fp
0ef80     04 4E 05 F1 | 	add	fp, #4
0ef84     A7 FC 61 FC | 	wrlong	result2, fp
0ef88     04 4E 05 F1 | 	add	fp, #4
0ef8c     A7 2C 62 FC | 	wrlong	local04, fp
0ef90     08 4E 85 F1 | 	sub	fp, #8
0ef94     A7 12 02 F6 | 	mov	arg01, fp
0ef98     50 E9 BF FD | 	call	#_converttoint
0ef9c     FD 2A 52 F6 | 	abs	local03, result1 wc
0efa0     07 2A 06 F5 | 	and	local03, #7
0efa4     15 2B 82 F6 | 	negc	local03, local03
0efa8     0C 4E 05 F1 | 	add	fp, #12
0efac     A7 2A 62 FC | 	wrlong	local03, fp
0efb0     08 4E 05 F1 | 	add	fp, #8
0efb4     A7 26 02 FB | 	rdlong	local01, fp
0efb8     10 26 66 F0 | 	shl	local01, #16
0efbc     08 4E 05 F1 | 	add	fp, #8
0efc0     A7 2C 02 FB | 	rdlong	local04, fp
0efc4     16 27 02 F1 | 	add	local01, local04
0efc8     04 4E 05 F1 | 	add	fp, #4
0efcc     A7 26 62 FC | 	wrlong	local01, fp
0efd0                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0efd0     37 00 00 FF 
0efd4     10 E4 05 F1 | 	add	objptr, ##28176
0efd8     F2 12 02 FB | 	rdlong	arg01, objptr
0efdc     37 00 00 FF 
0efe0     10 E4 85 F1 | 	sub	objptr, ##28176
0efe4     14 4E 85 F1 | 	sub	fp, #20
0efe8     A7 2C 02 FB | 	rdlong	local04, fp
0efec     0C 4E 85 F1 | 	sub	fp, #12
0eff0     06 2C 66 F0 | 	shl	local04, #6
0eff4     16 13 02 F1 | 	add	arg01, local04
0eff8     08 12 06 F1 | 	add	arg01, #8
0effc     09 FB 01 FB | 	rdlong	result1, arg01
0f000     1B FA 2D F4 | 	testbn	result1, #27 wz
0f004     3C 00 90 5D |  if_ne	jmp	#LR__1242
0f008     37 00 00 FF 
0f00c     10 E4 05 F1 | 	add	objptr, ##28176
0f010     F2 12 02 FB | 	rdlong	arg01, objptr
0f014     37 00 00 FF 
0f018     10 E4 85 F1 | 	sub	objptr, ##28176
0f01c     0C 4E 05 F1 | 	add	fp, #12
0f020     A7 2C 02 FB | 	rdlong	local04, fp
0f024     06 2C 66 F0 | 	shl	local04, #6
0f028     16 13 02 F1 | 	add	arg01, local04
0f02c     18 12 06 F1 | 	add	arg01, #24
0f030     14 4E 05 F1 | 	add	fp, #20
0f034     A7 14 02 FB | 	rdlong	arg02, fp
0f038     20 4E 85 F1 | 	sub	fp, #32
0f03c     09 15 62 FC | 	wrlong	arg02, arg01
0f040     80 00 90 FD | 	jmp	#LR__1243
0f044                 | LR__1242
0f044     37 00 00 FF 
0f048     10 E4 05 F1 | 	add	objptr, ##28176
0f04c     F2 26 02 FB | 	rdlong	local01, objptr
0f050     37 00 00 FF 
0f054     10 E4 85 F1 | 	sub	objptr, ##28176
0f058     0C 4E 05 F1 | 	add	fp, #12
0f05c     A7 2C 02 FB | 	rdlong	local04, fp
0f060     06 2C 66 F0 | 	shl	local04, #6
0f064     16 27 02 F1 | 	add	local01, local04
0f068     18 26 06 F1 | 	add	local01, #24
0f06c     18 4E 05 F1 | 	add	fp, #24
0f070     A7 14 02 FB | 	rdlong	arg02, fp
0f074     24 4E 85 F1 | 	sub	fp, #36
0f078     3E 2C 25 FF 
0f07c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f080     64 B0 B1 FD | 	call	#__system___float_div
0f084     FD 12 02 F6 | 	mov	arg01, result1
0f088     01 14 06 F6 | 	mov	arg02, #1
0f08c     1C B3 B1 FD | 	call	#__system___float_tointeger
0f090     13 FB 51 FC | 	wrword	result1, local01
0f094     37 00 00 FF 
0f098     10 E4 05 F1 | 	add	objptr, ##28176
0f09c     F2 12 02 FB | 	rdlong	arg01, objptr
0f0a0     37 00 00 FF 
0f0a4     10 E4 85 F1 | 	sub	objptr, ##28176
0f0a8     0C 4E 05 F1 | 	add	fp, #12
0f0ac     A7 2C 02 FB | 	rdlong	local04, fp
0f0b0     0C 4E 85 F1 | 	sub	fp, #12
0f0b4     06 2C 66 F0 | 	shl	local04, #6
0f0b8     16 13 02 F1 | 	add	arg01, local04
0f0bc     1A 12 06 F1 | 	add	arg01, #26
0f0c0     09 01 5A FC | 	wrword	#256, arg01
0f0c4                 | LR__1243
0f0c4     A7 F0 03 F6 | 	mov	ptra, fp
0f0c8     B2 00 A0 FD | 	call	#popregs_
0f0cc                 | _do_changefreq_ret
0f0cc     2D 00 64 FD | 	ret
0f0d0                 | 
0f0d0                 | ' 
0f0d0                 | ' '-------------------- changepan
0f0d0                 | ' 
0f0d0                 | ' sub do_changepan
0f0d0                 | _do_changepan
0f0d0     01 4A 05 F6 | 	mov	COUNT_, #1
0f0d4     A8 00 A0 FD | 	call	#pushregs_
0f0d8     14 F0 07 F1 | 	add	ptra, #20
0f0dc     28 E6 BF FD | 	call	#_pop
0f0e0     A7 FA 61 FC | 	wrlong	result1, fp
0f0e4     04 4E 05 F1 | 	add	fp, #4
0f0e8     A7 FC 61 FC | 	wrlong	result2, fp
0f0ec     04 4E 05 F1 | 	add	fp, #4
0f0f0     A7 FE 61 FC | 	wrlong	result3, fp
0f0f4     08 4E 85 F1 | 	sub	fp, #8
0f0f8     00 00 23 FF 
0f0fc     00 26 06 F6 | 	mov	local01, ##1174405120
0f100     A7 12 02 F6 | 	mov	arg01, fp
0f104     A0 E8 BF FD | 	call	#_converttofloat
0f108     FD 14 02 F6 | 	mov	arg02, result1
0f10c     13 13 02 F6 | 	mov	arg01, local01
0f110     D0 AD B1 FD | 	call	#__system___float_mul
0f114     FD 12 02 F6 | 	mov	arg01, result1
0f118     01 14 06 F6 | 	mov	arg02, #1
0f11c     8C B2 B1 FD | 	call	#__system___float_tointeger
0f120     0D 26 C6 F9 | 	decod	local01, #13
0f124     FD 26 02 F1 | 	add	local01, result1
0f128     10 4E 05 F1 | 	add	fp, #16
0f12c     A7 26 62 FC | 	wrlong	local01, fp
0f130                 | ' 
0f130                 | ' t1=pop()
0f130                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f130                 | ' if pan<0 then pan=0
0f130     10 4E 85 F1 | 	sub	fp, #16
0f134     00 26 56 F2 | 	cmps	local01, #0 wc
0f138     10 4E 05 C1 |  if_b	add	fp, #16
0f13c     A7 00 68 CC |  if_b	wrlong	#0, fp
0f140     10 4E 85 C1 |  if_b	sub	fp, #16
0f144                 | ' if pan>16384 then pan=16384
0f144     10 4E 05 F1 | 	add	fp, #16
0f148     A7 26 02 FB | 	rdlong	local01, fp
0f14c     10 4E 85 F1 | 	sub	fp, #16
0f150     20 00 00 FF 
0f154     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f158     10 4E 05 31 |  if_ae	add	fp, #16
0f15c     20 00 80 3F 
0f160     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f164     10 4E 85 31 |  if_ae	sub	fp, #16
0f168     9C E5 BF FD | 	call	#_pop
0f16c     FF 26 02 F6 | 	mov	local01, result3
0f170     A7 FA 61 FC | 	wrlong	result1, fp
0f174     04 4E 05 F1 | 	add	fp, #4
0f178     A7 FC 61 FC | 	wrlong	result2, fp
0f17c     04 4E 05 F1 | 	add	fp, #4
0f180     A7 26 62 FC | 	wrlong	local01, fp
0f184     08 4E 85 F1 | 	sub	fp, #8
0f188     A7 12 02 F6 | 	mov	arg01, fp
0f18c     5C E7 BF FD | 	call	#_converttoint
0f190     FD 26 52 F6 | 	abs	local01, result1 wc
0f194     07 26 06 F5 | 	and	local01, #7
0f198     13 27 82 F6 | 	negc	local01, local01
0f19c     0C 4E 05 F1 | 	add	fp, #12
0f1a0     A7 26 62 FC | 	wrlong	local01, fp
0f1a4     37 00 00 FF 
0f1a8     10 E4 05 F1 | 	add	objptr, ##28176
0f1ac     F2 12 02 FB | 	rdlong	arg01, objptr
0f1b0     37 00 00 FF 
0f1b4     10 E4 85 F1 | 	sub	objptr, ##28176
0f1b8     06 26 66 F0 | 	shl	local01, #6
0f1bc     13 13 02 F1 | 	add	arg01, local01
0f1c0     16 12 06 F1 | 	add	arg01, #22
0f1c4     04 4E 05 F1 | 	add	fp, #4
0f1c8     A7 14 02 FB | 	rdlong	arg02, fp
0f1cc     10 4E 85 F1 | 	sub	fp, #16
0f1d0     09 15 52 FC | 	wrword	arg02, arg01
0f1d4     A7 F0 03 F6 | 	mov	ptra, fp
0f1d8     B2 00 A0 FD | 	call	#popregs_
0f1dc                 | _do_changepan_ret
0f1dc     2D 00 64 FD | 	ret
0f1e0                 | 
0f1e0                 | ' 
0f1e0                 | ' '-------------------- changevol
0f1e0                 | ' 
0f1e0                 | ' sub do_changevol
0f1e0                 | _do_changevol
0f1e0     00 4A 05 F6 | 	mov	COUNT_, #0
0f1e4     A8 00 A0 FD | 	call	#pushregs_
0f1e8     14 F0 07 F1 | 	add	ptra, #20
0f1ec     18 E5 BF FD | 	call	#_pop
0f1f0     FF 14 02 F6 | 	mov	arg02, result3
0f1f4     A7 FA 61 FC | 	wrlong	result1, fp
0f1f8     04 4E 05 F1 | 	add	fp, #4
0f1fc     A7 FC 61 FC | 	wrlong	result2, fp
0f200     04 4E 05 F1 | 	add	fp, #4
0f204     A7 14 62 FC | 	wrlong	arg02, fp
0f208     08 4E 85 F1 | 	sub	fp, #8
0f20c     A7 12 02 F6 | 	mov	arg01, fp
0f210     94 E7 BF FD | 	call	#_converttofloat
0f214     FD 12 02 F6 | 	mov	arg01, result1
0f218     00 3D 22 FF 
0f21c     00 14 06 F6 | 	mov	arg02, ##1148846080
0f220     C0 AC B1 FD | 	call	#__system___float_mul
0f224     FD 12 02 F6 | 	mov	arg01, result1
0f228     01 14 06 F6 | 	mov	arg02, #1
0f22c     7C B1 B1 FD | 	call	#__system___float_tointeger
0f230     FD 14 52 F6 | 	abs	arg02, result1 wc
0f234     0D 14 46 F7 | 	zerox	arg02, #13
0f238     0A 15 82 F6 | 	negc	arg02, arg02
0f23c     10 4E 05 F1 | 	add	fp, #16
0f240     A7 14 62 FC | 	wrlong	arg02, fp
0f244     10 4E 85 F1 | 	sub	fp, #16
0f248     BC E4 BF FD | 	call	#_pop
0f24c     FF 14 02 F6 | 	mov	arg02, result3
0f250     A7 FA 61 FC | 	wrlong	result1, fp
0f254     04 4E 05 F1 | 	add	fp, #4
0f258     A7 FC 61 FC | 	wrlong	result2, fp
0f25c     04 4E 05 F1 | 	add	fp, #4
0f260     A7 14 62 FC | 	wrlong	arg02, fp
0f264     08 4E 85 F1 | 	sub	fp, #8
0f268     A7 12 02 F6 | 	mov	arg01, fp
0f26c     7C E6 BF FD | 	call	#_converttoint
0f270     FD 14 52 F6 | 	abs	arg02, result1 wc
0f274     07 14 06 F5 | 	and	arg02, #7
0f278     0A 15 82 F6 | 	negc	arg02, arg02
0f27c     0C 4E 05 F1 | 	add	fp, #12
0f280     A7 14 62 FC | 	wrlong	arg02, fp
0f284     37 00 00 FF 
0f288     10 E4 05 F1 | 	add	objptr, ##28176
0f28c     F2 12 02 FB | 	rdlong	arg01, objptr
0f290     37 00 00 FF 
0f294     10 E4 85 F1 | 	sub	objptr, ##28176
0f298     06 14 66 F0 | 	shl	arg02, #6
0f29c     0A 13 02 F1 | 	add	arg01, arg02
0f2a0     14 12 06 F1 | 	add	arg01, #20
0f2a4     04 4E 05 F1 | 	add	fp, #4
0f2a8     A7 14 02 FB | 	rdlong	arg02, fp
0f2ac     10 4E 85 F1 | 	sub	fp, #16
0f2b0     09 15 52 FC | 	wrword	arg02, arg01
0f2b4     A7 F0 03 F6 | 	mov	ptra, fp
0f2b8     B2 00 A0 FD | 	call	#popregs_
0f2bc                 | _do_changevol_ret
0f2bc     2D 00 64 FD | 	ret
0f2c0                 | 
0f2c0                 | ' 
0f2c0                 | ' '-------------------- changewav
0f2c0                 | ' 
0f2c0                 | ' sub do_changewav
0f2c0                 | _do_changewav
0f2c0     00 4A 05 F6 | 	mov	COUNT_, #0
0f2c4     A8 00 A0 FD | 	call	#pushregs_
0f2c8     14 F0 07 F1 | 	add	ptra, #20
0f2cc     38 E4 BF FD | 	call	#_pop
0f2d0     FF 14 02 F6 | 	mov	arg02, result3
0f2d4     A7 FA 61 FC | 	wrlong	result1, fp
0f2d8     04 4E 05 F1 | 	add	fp, #4
0f2dc     A7 FC 61 FC | 	wrlong	result2, fp
0f2e0     04 4E 05 F1 | 	add	fp, #4
0f2e4     A7 14 62 FC | 	wrlong	arg02, fp
0f2e8     08 4E 85 F1 | 	sub	fp, #8
0f2ec     A7 12 02 F6 | 	mov	arg01, fp
0f2f0     F8 E5 BF FD | 	call	#_converttoint
0f2f4     10 4E 05 F1 | 	add	fp, #16
0f2f8     A7 FA 61 FC | 	wrlong	result1, fp
0f2fc                 | ' 
0f2fc                 | ' t1=pop()
0f2fc                 | ' wave=converttoint(t1)
0f2fc                 | ' if wave<0 then wave=0
0f2fc     FD 14 02 F6 | 	mov	arg02, result1
0f300     10 4E 85 F1 | 	sub	fp, #16
0f304     00 14 56 F2 | 	cmps	arg02, #0 wc
0f308     10 4E 05 C1 |  if_b	add	fp, #16
0f30c     A7 00 68 CC |  if_b	wrlong	#0, fp
0f310     10 4E 85 C1 |  if_b	sub	fp, #16
0f314     F0 E3 BF FD | 	call	#_pop
0f318     FF 14 02 F6 | 	mov	arg02, result3
0f31c     A7 FA 61 FC | 	wrlong	result1, fp
0f320     04 4E 05 F1 | 	add	fp, #4
0f324     A7 FC 61 FC | 	wrlong	result2, fp
0f328     04 4E 05 F1 | 	add	fp, #4
0f32c     A7 14 62 FC | 	wrlong	arg02, fp
0f330     08 4E 85 F1 | 	sub	fp, #8
0f334     A7 12 02 F6 | 	mov	arg01, fp
0f338     B0 E5 BF FD | 	call	#_converttoint
0f33c     FD 14 52 F6 | 	abs	arg02, result1 wc
0f340     07 14 06 F5 | 	and	arg02, #7
0f344     0A 15 82 F6 | 	negc	arg02, arg02
0f348     0C 4E 05 F1 | 	add	fp, #12
0f34c     A7 14 62 FC | 	wrlong	arg02, fp
0f350                 | ' if wave <32 then 
0f350     04 4E 05 F1 | 	add	fp, #4
0f354     A7 14 02 FB | 	rdlong	arg02, fp
0f358     10 4E 85 F1 | 	sub	fp, #16
0f35c     20 14 56 F2 | 	cmps	arg02, #32 wc
0f360     48 00 90 3D |  if_ae	jmp	#LR__1250
0f364     37 00 00 FF 
0f368     10 E4 05 F1 | 	add	objptr, ##28176
0f36c     F2 12 02 FB | 	rdlong	arg01, objptr
0f370     37 00 00 FF 
0f374     10 E4 85 F1 | 	sub	objptr, ##28176
0f378     0C 4E 05 F1 | 	add	fp, #12
0f37c     A7 14 02 FB | 	rdlong	arg02, fp
0f380     06 14 66 F0 | 	shl	arg02, #6
0f384     0A 13 02 F1 | 	add	arg01, arg02
0f388     08 12 06 F1 | 	add	arg01, #8
0f38c     04 4E 05 F1 | 	add	fp, #4
0f390     A7 14 02 FB | 	rdlong	arg02, fp
0f394     10 4E 85 F1 | 	sub	fp, #16
0f398     0B 14 66 F0 | 	shl	arg02, #11
0f39c     00 00 40 FF 
0f3a0     00 14 06 F1 | 	add	arg02, ##-2147483648
0f3a4     09 15 62 FC | 	wrlong	arg02, arg01
0f3a8     34 00 90 FD | 	jmp	#LR__1251
0f3ac                 | LR__1250
0f3ac     37 00 00 FF 
0f3b0     10 E4 05 F1 | 	add	objptr, ##28176
0f3b4     F2 12 02 FB | 	rdlong	arg01, objptr
0f3b8     37 00 00 FF 
0f3bc     10 E4 85 F1 | 	sub	objptr, ##28176
0f3c0     0C 4E 05 F1 | 	add	fp, #12
0f3c4     A7 14 02 FB | 	rdlong	arg02, fp
0f3c8     0C 4E 85 F1 | 	sub	fp, #12
0f3cc     06 14 66 F0 | 	shl	arg02, #6
0f3d0     0A 13 02 F1 | 	add	arg01, arg02
0f3d4     08 12 06 F1 | 	add	arg01, #8
0f3d8     00 00 C4 FF 
0f3dc     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f3e0                 | LR__1251
0f3e0     A7 F0 03 F6 | 	mov	ptra, fp
0f3e4     B2 00 A0 FD | 	call	#popregs_
0f3e8                 | _do_changewav_ret
0f3e8     2D 00 64 FD | 	ret
0f3ec                 | 
0f3ec                 | ' 
0f3ec                 | ' '-------------------- chr$
0f3ec                 | ' 
0f3ec                 | ' sub do_chr
0f3ec                 | _do_chr
0f3ec     01 4A 05 F6 | 	mov	COUNT_, #1
0f3f0     A8 00 A0 FD | 	call	#pushregs_
0f3f4     14 F0 07 F1 | 	add	ptra, #20
0f3f8     4A 00 00 FF 
0f3fc     80 E4 05 F1 | 	add	objptr, ##38016
0f400     F2 26 02 FB | 	rdlong	local01, objptr
0f404     13 17 02 F6 | 	mov	arg03, local01
0f408     01 16 66 F0 | 	shl	arg03, #1
0f40c     13 17 02 F1 | 	add	arg03, local01
0f410     02 16 66 F0 | 	shl	arg03, #2
0f414     03 00 00 FF 
0f418     04 E4 85 F1 | 	sub	objptr, ##1540
0f41c     F2 16 02 F1 | 	add	arg03, objptr
0f420     0B 17 02 FB | 	rdlong	arg03, arg03
0f424     0C 4E 05 F1 | 	add	fp, #12
0f428     A7 16 62 FC | 	wrlong	arg03, fp
0f42c                 | ' 
0f42c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f42c                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f42c     0C 4E 85 F1 | 	sub	fp, #12
0f430     02 16 16 F2 | 	cmp	arg03, #2 wc
0f434     47 00 00 FF 
0f438     7C E4 85 F1 | 	sub	objptr, ##36476
0f43c     0C 4E 05 C1 |  if_b	add	fp, #12
0f440     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f444     0C 4E 85 C1 |  if_b	sub	fp, #12
0f448     40 00 90 4D |  if_c_and_nz	jmp	#LR__1260
0f44c     00 12 06 F6 | 	mov	arg01, #0
0f450     40 D9 B1 FD | 	call	#__system___getiolock_0616
0f454     FD 12 02 F6 | 	mov	arg01, result1
0f458     10 7C B1 FD | 	call	#__system___lockmem
0f45c     B9 01 00 FF 
0f460     F9 15 06 F6 | 	mov	arg02, ##@LR__5922
0f464     00 12 06 F6 | 	mov	arg01, #0
0f468     00 16 06 F6 | 	mov	arg03, #0
0f46c     F0 88 B1 FD | 	call	#__system___basic_print_string
0f470     00 12 06 F6 | 	mov	arg01, #0
0f474     1C D9 B1 FD | 	call	#__system___getiolock_0616
0f478     FD 00 68 FC | 	wrlong	#0, result1
0f47c     27 12 06 F6 | 	mov	arg01, #39
0f480     00 14 06 F6 | 	mov	arg02, #0
0f484     38 41 B1 FD | 	call	#_printerror
0f488     54 00 90 FD | 	jmp	#LR__1261
0f48c                 | LR__1260
0f48c     78 E2 BF FD | 	call	#_pop
0f490     FF 26 02 F6 | 	mov	local01, result3
0f494     A7 FA 61 FC | 	wrlong	result1, fp
0f498     04 4E 05 F1 | 	add	fp, #4
0f49c     A7 FC 61 FC | 	wrlong	result2, fp
0f4a0     04 4E 05 F1 | 	add	fp, #4
0f4a4     A7 26 62 FC | 	wrlong	local01, fp
0f4a8     08 4E 85 F1 | 	sub	fp, #8
0f4ac     A7 12 02 F6 | 	mov	arg01, fp
0f4b0     38 E4 BF FD | 	call	#_converttoint
0f4b4     10 4E 05 F1 | 	add	fp, #16
0f4b8     A7 FA 61 FC | 	wrlong	result1, fp
0f4bc     FD 12 02 F6 | 	mov	arg01, result1
0f4c0     10 4E 85 F1 | 	sub	fp, #16
0f4c4     E4 9D B1 FD | 	call	#__system__Chr_S
0f4c8     A7 FA 61 FC | 	wrlong	result1, fp
0f4cc     08 4E 05 F1 | 	add	fp, #8
0f4d0     A7 3E 68 FC | 	wrlong	#31, fp
0f4d4     08 4E 85 F1 | 	sub	fp, #8
0f4d8     A7 12 02 F6 | 	mov	arg01, fp
0f4dc     C0 E2 BF FD | 	call	#_push
0f4e0                 | LR__1261
0f4e0     A7 F0 03 F6 | 	mov	ptra, fp
0f4e4     B2 00 A0 FD | 	call	#popregs_
0f4e8                 | _do_chr_ret
0f4e8     2D 00 64 FD | 	ret
0f4ec                 | 
0f4ec                 | ' 
0f4ec                 | ' '-------------------- circle
0f4ec                 | ' 
0f4ec                 | ' sub do_circle
0f4ec                 | _do_circle
0f4ec     02 4A 05 F6 | 	mov	COUNT_, #2
0f4f0     A8 00 A0 FD | 	call	#pushregs_
0f4f4     24 F0 07 F1 | 	add	ptra, #36
0f4f8     0C E2 BF FD | 	call	#_pop
0f4fc     FD 18 02 F6 | 	mov	arg04, result1
0f500     FE 16 02 F6 | 	mov	arg03, result2
0f504     FF 14 02 F6 | 	mov	arg02, result3
0f508     18 4E 05 F1 | 	add	fp, #24
0f50c     A7 18 62 FC | 	wrlong	arg04, fp
0f510     04 4E 05 F1 | 	add	fp, #4
0f514     A7 16 62 FC | 	wrlong	arg03, fp
0f518     04 4E 05 F1 | 	add	fp, #4
0f51c     A7 14 62 FC | 	wrlong	arg02, fp
0f520     20 4E 85 F1 | 	sub	fp, #32
0f524     E0 E1 BF FD | 	call	#_pop
0f528     FD 18 02 F6 | 	mov	arg04, result1
0f52c     FE 16 02 F6 | 	mov	arg03, result2
0f530     FF 26 02 F6 | 	mov	local01, result3
0f534     0C 4E 05 F1 | 	add	fp, #12
0f538     A7 18 62 FC | 	wrlong	arg04, fp
0f53c     04 4E 05 F1 | 	add	fp, #4
0f540     A7 16 62 FC | 	wrlong	arg03, fp
0f544     04 4E 05 F1 | 	add	fp, #4
0f548     A7 26 62 FC | 	wrlong	local01, fp
0f54c     14 4E 85 F1 | 	sub	fp, #20
0f550     B4 E1 BF FD | 	call	#_pop
0f554     A7 FA 61 FC | 	wrlong	result1, fp
0f558     04 4E 05 F1 | 	add	fp, #4
0f55c     A7 FC 61 FC | 	wrlong	result2, fp
0f560     04 4E 05 F1 | 	add	fp, #4
0f564     A7 FE 61 FC | 	wrlong	result3, fp
0f568                 | ' 
0f568                 | ' t3=pop()
0f568                 | ' t2=pop()
0f568                 | ' t1=pop()
0f568                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f568     FF 18 02 F6 | 	mov	arg04, result3
0f56c     08 4E 85 F1 | 	sub	fp, #8
0f570     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f574     08 4E 05 51 |  if_ne	add	fp, #8
0f578     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f57c     08 4E 85 51 |  if_ne	sub	fp, #8
0f580     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f584     7C 00 90 5D |  if_ne	jmp	#LR__1270
0f588     14 4E 05 F1 | 	add	fp, #20
0f58c     A7 26 02 FB | 	rdlong	local01, fp
0f590     14 4E 85 F1 | 	sub	fp, #20
0f594     1C 26 0E F2 | 	cmp	local01, #28 wz
0f598     14 4E 05 51 |  if_ne	add	fp, #20
0f59c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f5a0     14 4E 85 51 |  if_ne	sub	fp, #20
0f5a4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f5a8     58 00 90 5D |  if_ne	jmp	#LR__1270
0f5ac     20 4E 05 F1 | 	add	fp, #32
0f5b0     A7 26 02 FB | 	rdlong	local01, fp
0f5b4     20 4E 85 F1 | 	sub	fp, #32
0f5b8     1C 26 0E F2 | 	cmp	local01, #28 wz
0f5bc     20 4E 05 51 |  if_ne	add	fp, #32
0f5c0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f5c4     20 4E 85 51 |  if_ne	sub	fp, #32
0f5c8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f5cc     34 00 90 5D |  if_ne	jmp	#LR__1270
0f5d0     A7 12 02 FB | 	rdlong	arg01, fp
0f5d4     0C 4E 05 F1 | 	add	fp, #12
0f5d8     A7 14 02 FB | 	rdlong	arg02, fp
0f5dc     0C 4E 05 F1 | 	add	fp, #12
0f5e0     A7 16 02 FB | 	rdlong	arg03, fp
0f5e4     18 4E 85 F1 | 	sub	fp, #24
0f5e8     37 00 00 FF 
0f5ec     28 E4 05 F1 | 	add	objptr, ##28200
0f5f0     F2 18 02 FB | 	rdlong	arg04, objptr
0f5f4     37 00 00 FF 
0f5f8     28 E4 85 F1 | 	sub	objptr, ##28200
0f5fc     B4 58 B1 FD | 	call	#_hg010b_spin2_circle
0f600                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f600     54 00 90 FD | 	jmp	#LR__1271
0f604                 | LR__1270
0f604     A7 12 02 F6 | 	mov	arg01, fp
0f608     E0 E2 BF FD | 	call	#_converttoint
0f60c     FD 26 02 F6 | 	mov	local01, result1
0f610     0C 4E 05 F1 | 	add	fp, #12
0f614     A7 12 02 F6 | 	mov	arg01, fp
0f618     0C 4E 85 F1 | 	sub	fp, #12
0f61c     CC E2 BF FD | 	call	#_converttoint
0f620     FD 28 02 F6 | 	mov	local02, result1
0f624     18 4E 05 F1 | 	add	fp, #24
0f628     A7 12 02 F6 | 	mov	arg01, fp
0f62c     18 4E 85 F1 | 	sub	fp, #24
0f630     B8 E2 BF FD | 	call	#_converttoint
0f634     FD 16 02 F6 | 	mov	arg03, result1
0f638     37 00 00 FF 
0f63c     28 E4 05 F1 | 	add	objptr, ##28200
0f640     F2 18 02 FB | 	rdlong	arg04, objptr
0f644     37 00 00 FF 
0f648     28 E4 85 F1 | 	sub	objptr, ##28200
0f64c     13 13 02 F6 | 	mov	arg01, local01
0f650     14 15 02 F6 | 	mov	arg02, local02
0f654     5C 58 B1 FD | 	call	#_hg010b_spin2_circle
0f658                 | LR__1271
0f658     A7 F0 03 F6 | 	mov	ptra, fp
0f65c     B2 00 A0 FD | 	call	#popregs_
0f660                 | _do_circle_ret
0f660     2D 00 64 FD | 	ret
0f664                 | 
0f664                 | ' 
0f664                 | ' '-------------------- click
0f664                 | ' 
0f664                 | ' sub do_click
0f664                 | _do_click
0f664     A0 E0 BF FD | 	call	#_pop
0f668     00 FA 4D F2 | 	cmps	result1, #0 wz
0f66c                 | ' 
0f66c                 | ' t1=pop()
0f66c                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f66c     50 00 00 AF 
0f670     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f674     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f678     50 00 00 FF 
0f67c     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f680     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f684     50 00 00 5F 
0f688     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f68c                 | _do_click_ret
0f68c     2D 00 64 FD | 	ret
0f690                 | 
0f690                 | ' 
0f690                 | ' '-------------------- close
0f690                 | ' 
0f690                 | ' sub do_close
0f690                 | _do_close
0f690     03 4A 05 F6 | 	mov	COUNT_, #3
0f694     A8 00 A0 FD | 	call	#pushregs_
0f698     6C E0 BF FD | 	call	#_pop
0f69c     FD 26 02 F6 | 	mov	local01, result1
0f6a0     FF 16 02 F6 | 	mov	arg03, result3
0f6a4     FE 28 02 F6 | 	mov	local02, result2
0f6a8     0B 2B 02 F6 | 	mov	local03, arg03
0f6ac                 | ' 
0f6ac                 | ' numpar=compiledline(lineptr_e).result.uresult
0f6ac                 | ' t1=pop()
0f6ac                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f6ac     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f6b0     44 00 90 AD |  if_e	jmp	#LR__1280
0f6b4     00 12 06 F6 | 	mov	arg01, #0
0f6b8     D8 D6 B1 FD | 	call	#__system___getiolock_0616
0f6bc     FD 12 02 F6 | 	mov	arg01, result1
0f6c0     A8 79 B1 FD | 	call	#__system___lockmem
0f6c4     BA 01 00 FF 
0f6c8     00 14 06 F6 | 	mov	arg02, ##@LR__5923
0f6cc     00 12 06 F6 | 	mov	arg01, #0
0f6d0     00 16 06 F6 | 	mov	arg03, #0
0f6d4     88 86 B1 FD | 	call	#__system___basic_print_string
0f6d8     00 12 06 F6 | 	mov	arg01, #0
0f6dc     0A 14 06 F6 | 	mov	arg02, #10
0f6e0     00 16 06 F6 | 	mov	arg03, #0
0f6e4     20 86 B1 FD | 	call	#__system___basic_print_char
0f6e8     00 12 06 F6 | 	mov	arg01, #0
0f6ec     A4 D6 B1 FD | 	call	#__system___getiolock_0616
0f6f0     FD 00 68 FC | 	wrlong	#0, result1
0f6f4     08 00 90 FD | 	jmp	#LR__1281
0f6f8                 | LR__1280
0f6f8                 | ' channel  = t1.result.iresult
0f6f8                 | ' close #channel
0f6f8     13 13 02 F6 | 	mov	arg01, local01
0f6fc     C4 CC B1 FD | 	call	#__system__close
0f700                 | LR__1281
0f700     A7 F0 03 F6 | 	mov	ptra, fp
0f704     B2 00 A0 FD | 	call	#popregs_
0f708                 | _do_close_ret
0f708     2D 00 64 FD | 	ret
0f70c                 | 
0f70c                 | ' 
0f70c                 | ' '-------------------- cls
0f70c                 | ' 
0f70c                 | ' sub do_cls
0f70c                 | _do_cls
0f70c     37 00 00 FF 
0f710     3C E4 05 F1 | 	add	objptr, ##28220
0f714     F2 12 02 FB | 	rdlong	arg01, objptr
0f718     04 E4 85 F1 | 	sub	objptr, #4
0f71c     F2 14 02 FB | 	rdlong	arg02, objptr
0f720     37 00 00 FF 
0f724     38 E4 85 F1 | 	sub	objptr, ##28216
0f728     4C 5C B1 FD | 	call	#_hg010b_spin2_cls
0f72c     37 00 00 FF 
0f730     3C E4 05 F1 | 	add	objptr, ##28220
0f734     F2 14 02 FB | 	rdlong	arg02, objptr
0f738     14 E4 85 F1 | 	sub	objptr, #20
0f73c     F2 14 62 FC | 	wrlong	arg02, objptr
0f740     37 00 00 FF 
0f744     28 E4 85 F1 | 	sub	objptr, ##28200
0f748                 | _do_cls_ret
0f748     2D 00 64 FD | 	ret
0f74c                 | 
0f74c                 | ' 
0f74c                 | ' sub do_coginit
0f74c                 | _do_coginit
0f74c     00 4A 05 F6 | 	mov	COUNT_, #0
0f750     A8 00 A0 FD | 	call	#pushregs_
0f754     08 00 00 FF 
0f758     1C F0 07 F1 | 	add	ptra, ##4124
0f75c     4A 00 00 FF 
0f760     80 E4 05 F1 | 	add	objptr, ##38016
0f764     F2 FA 01 FB | 	rdlong	result1, objptr
0f768     FD FC 01 F6 | 	mov	result2, result1
0f76c     01 FC 65 F0 | 	shl	result2, #1
0f770     FD FC 01 F1 | 	add	result2, result1
0f774     02 FC 65 F0 | 	shl	result2, #2
0f778     03 00 00 FF 
0f77c     04 E4 85 F1 | 	sub	objptr, ##1540
0f780     F2 FC 01 F1 | 	add	result2, objptr
0f784     FE FC 01 FB | 	rdlong	result2, result2
0f788     A7 FC 61 FC | 	wrlong	result2, fp
0f78c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f78c                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f78c     02 FC 55 F2 | 	cmps	result2, #2 wc
0f790     47 00 00 FF 
0f794     7C E4 85 F1 | 	sub	objptr, ##36476
0f798     0C 00 90 CD |  if_b	jmp	#LR__1290
0f79c     A7 FA 01 FB | 	rdlong	result1, fp
0f7a0     04 FA 55 F2 | 	cmps	result1, #4 wc
0f7a4     40 00 90 CD |  if_b	jmp	#LR__1291
0f7a8                 | LR__1290
0f7a8     00 12 06 F6 | 	mov	arg01, #0
0f7ac     E4 D5 B1 FD | 	call	#__system___getiolock_0616
0f7b0     FD 12 02 F6 | 	mov	arg01, result1
0f7b4     B4 78 B1 FD | 	call	#__system___lockmem
0f7b8     BA 01 00 FF 
0f7bc     12 14 06 F6 | 	mov	arg02, ##@LR__5924
0f7c0     00 12 06 F6 | 	mov	arg01, #0
0f7c4     00 16 06 F6 | 	mov	arg03, #0
0f7c8     94 85 B1 FD | 	call	#__system___basic_print_string
0f7cc     00 12 06 F6 | 	mov	arg01, #0
0f7d0     C0 D5 B1 FD | 	call	#__system___getiolock_0616
0f7d4     FD 00 68 FC | 	wrlong	#0, result1
0f7d8     27 12 06 F6 | 	mov	arg01, #39
0f7dc     00 14 06 F6 | 	mov	arg02, #0
0f7e0     DC 3D B1 FD | 	call	#_printerror
0f7e4     94 01 90 FD | 	jmp	#LR__1295
0f7e8                 | LR__1291
0f7e8     1C DF BF FD | 	call	#_pop
0f7ec     FF 16 02 F6 | 	mov	arg03, result3
0f7f0     08 00 00 FF 
0f7f4     10 4E 05 F1 | 	add	fp, ##4112
0f7f8     A7 FA 61 FC | 	wrlong	result1, fp
0f7fc     04 4E 05 F1 | 	add	fp, #4
0f800     A7 FC 61 FC | 	wrlong	result2, fp
0f804     04 4E 05 F1 | 	add	fp, #4
0f808     A7 16 62 FC | 	wrlong	arg03, fp
0f80c     08 4E 85 F1 | 	sub	fp, #8
0f810     A7 12 02 F6 | 	mov	arg01, fp
0f814     08 00 00 FF 
0f818     10 4E 85 F1 | 	sub	fp, ##4112
0f81c     CC E0 BF FD | 	call	#_converttoint
0f820     FD 16 02 F6 | 	mov	arg03, result1
0f824     04 4E 05 F1 | 	add	fp, #4
0f828     A7 16 62 FC | 	wrlong	arg03, fp
0f82c     04 4E 85 F1 | 	sub	fp, #4
0f830     D4 DE BF FD | 	call	#_pop
0f834     FF 16 02 F6 | 	mov	arg03, result3
0f838     08 00 00 FF 
0f83c     10 4E 05 F1 | 	add	fp, ##4112
0f840     A7 FA 61 FC | 	wrlong	result1, fp
0f844     04 4E 05 F1 | 	add	fp, #4
0f848     A7 FC 61 FC | 	wrlong	result2, fp
0f84c     04 4E 05 F1 | 	add	fp, #4
0f850     A7 16 62 FC | 	wrlong	arg03, fp
0f854     08 4E 85 F1 | 	sub	fp, #8
0f858     A7 12 02 F6 | 	mov	arg01, fp
0f85c     08 00 00 FF 
0f860     10 4E 85 F1 | 	sub	fp, ##4112
0f864     84 E0 BF FD | 	call	#_converttoint
0f868     08 4E 05 F1 | 	add	fp, #8
0f86c     A7 FA 61 FC | 	wrlong	result1, fp
0f870     08 4E 85 F1 | 	sub	fp, #8
0f874                 | ' t1=pop()
0f874                 | ' ptra_val=converttoint(t1)
0f874                 | ' t1=pop()
0f874                 | ' addrval=converttoint(t1)
0f874                 | ' if numpar=3 then 
0f874     A7 FA 01 FB | 	rdlong	result1, fp
0f878     03 FA 0D F2 | 	cmp	result1, #3 wz
0f87c     48 00 90 5D |  if_ne	jmp	#LR__1292
0f880     84 DE BF FD | 	call	#_pop
0f884     FF 16 02 F6 | 	mov	arg03, result3
0f888     08 00 00 FF 
0f88c     10 4E 05 F1 | 	add	fp, ##4112
0f890     A7 FA 61 FC | 	wrlong	result1, fp
0f894     04 4E 05 F1 | 	add	fp, #4
0f898     A7 FC 61 FC | 	wrlong	result2, fp
0f89c     04 4E 05 F1 | 	add	fp, #4
0f8a0     A7 16 62 FC | 	wrlong	arg03, fp
0f8a4     08 4E 85 F1 | 	sub	fp, #8
0f8a8     A7 12 02 F6 | 	mov	arg01, fp
0f8ac     08 00 00 FF 
0f8b0     10 4E 85 F1 | 	sub	fp, ##4112
0f8b4     34 E0 BF FD | 	call	#_converttoint
0f8b8     0C 4E 05 F1 | 	add	fp, #12
0f8bc     A7 FA 61 FC | 	wrlong	result1, fp
0f8c0     0C 4E 85 F1 | 	sub	fp, #12
0f8c4     0C 00 90 FD | 	jmp	#LR__1293
0f8c8                 | LR__1292
0f8c8     0C 4E 05 F1 | 	add	fp, #12
0f8cc     A7 20 68 FC | 	wrlong	#16, fp
0f8d0     0C 4E 85 F1 | 	sub	fp, #12
0f8d4                 | LR__1293
0f8d4                 | '     
0f8d4                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f8d4     08 4E 05 F1 | 	add	fp, #8
0f8d8     A7 16 02 FB | 	rdlong	arg03, fp
0f8dc     08 4E 85 F1 | 	sub	fp, #8
0f8e0     00 04 00 FF 
0f8e4     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0f8e8     40 00 90 CD |  if_b	jmp	#LR__1294
0f8ec     10 4E 05 F1 | 	add	fp, #16
0f8f0     A7 12 02 F6 | 	mov	arg01, fp
0f8f4     08 4E 85 F1 | 	sub	fp, #8
0f8f8     A7 14 02 FB | 	rdlong	arg02, fp
0f8fc     08 4E 85 F1 | 	sub	fp, #8
0f900     0C 16 C6 F9 | 	decod	arg03, #12
0f904     0B 00 00 FF 
0f908     CC E4 05 F1 | 	add	objptr, ##5836
0f90c     64 6A B1 FD | 	call	#_psram_spin2_read1
0f910     0B 00 00 FF 
0f914     CC E4 85 F1 | 	sub	objptr, ##5836
0f918     10 4E 05 F1 | 	add	fp, #16
0f91c     A7 FA 01 F6 | 	mov	result1, fp
0f920     08 4E 85 F1 | 	sub	fp, #8
0f924     A7 FA 61 FC | 	wrlong	result1, fp
0f928     08 4E 85 F1 | 	sub	fp, #8
0f92c                 | LR__1294
0f92c     0C 4E 05 F1 | 	add	fp, #12
0f930     A7 FA 01 FB | 	rdlong	result1, fp
0f934     04 4E 85 F1 | 	sub	fp, #4
0f938     A7 14 02 FB | 	rdlong	arg02, fp
0f93c     04 4E 85 F1 | 	sub	fp, #4
0f940     A7 16 02 FB | 	rdlong	arg03, fp
0f944                 | ' 
0f944                 | '  asm
0f944     28 16 62 FD | 	setq	arg03
0f948     0A FB F1 FC | 	coginit	result1, arg02 wc
0f94c                 | '  
0f94c                 | ' return cog 
0f94c     08 4E 05 F1 | 	add	fp, #8
0f950     A7 FA 61 FC | 	wrlong	result1, fp
0f954     08 00 00 FF 
0f958     04 4E 05 F1 | 	add	fp, ##4100
0f95c     A7 FA 61 FC | 	wrlong	result1, fp
0f960     08 4E 05 F1 | 	add	fp, #8
0f964     A7 38 68 FC | 	wrlong	#28, fp
0f968     08 4E 85 F1 | 	sub	fp, #8
0f96c     A7 12 02 F6 | 	mov	arg01, fp
0f970     08 00 00 FF 
0f974     10 4E 85 F1 | 	sub	fp, ##4112
0f978     24 DE BF FD | 	call	#_push
0f97c                 | LR__1295
0f97c     A7 F0 03 F6 | 	mov	ptra, fp
0f980     B2 00 A0 FD | 	call	#popregs_
0f984                 | _do_coginit_ret
0f984     2D 00 64 FD | 	ret
0f988                 | 
0f988                 | ' 
0f988                 | ' '-------------------- cogstop
0f988                 | ' 
0f988                 | ' sub do_cogstop
0f988                 | _do_cogstop
0f988     00 4A 05 F6 | 	mov	COUNT_, #0
0f98c     A8 00 A0 FD | 	call	#pushregs_
0f990     0C F0 07 F1 | 	add	ptra, #12
0f994     70 DD BF FD | 	call	#_pop
0f998     A7 FA 61 FC | 	wrlong	result1, fp
0f99c     04 4E 05 F1 | 	add	fp, #4
0f9a0     A7 FC 61 FC | 	wrlong	result2, fp
0f9a4     04 4E 05 F1 | 	add	fp, #4
0f9a8     A7 FE 61 FC | 	wrlong	result3, fp
0f9ac     08 4E 85 F1 | 	sub	fp, #8
0f9b0     A7 12 02 F6 | 	mov	arg01, fp
0f9b4     34 DF BF FD | 	call	#_converttoint
0f9b8     03 FA 61 FD | 	cogstop	result1
0f9bc     A7 F0 03 F6 | 	mov	ptra, fp
0f9c0     B2 00 A0 FD | 	call	#popregs_
0f9c4                 | _do_cogstop_ret
0f9c4     2D 00 64 FD | 	ret
0f9c8                 | 
0f9c8                 | ' 
0f9c8                 | ' '-------------------- color
0f9c8                 | ' 
0f9c8                 | ' sub do_color
0f9c8                 | _do_color
0f9c8     03 4A 05 F6 | 	mov	COUNT_, #3
0f9cc     A8 00 A0 FD | 	call	#pushregs_
0f9d0     34 DD BF FD | 	call	#_pop
0f9d4     FD 26 02 F6 | 	mov	local01, result1
0f9d8     FE 28 02 F6 | 	mov	local02, result2
0f9dc     FF 2A 02 F6 | 	mov	local03, result3
0f9e0     37 00 00 FF 
0f9e4     28 E4 05 F1 | 	add	objptr, ##28200
0f9e8     F2 26 62 FC | 	wrlong	local01, objptr
0f9ec     37 00 00 FF 
0f9f0     28 E4 85 F1 | 	sub	objptr, ##28200
0f9f4     A7 F0 03 F6 | 	mov	ptra, fp
0f9f8     B2 00 A0 FD | 	call	#popregs_
0f9fc                 | _do_color_ret
0f9fc     2D 00 64 FD | 	ret
0fa00                 | 
0fa00                 | ' 
0fa00                 | ' '-------------------- copy
0fa00                 | ' 
0fa00                 | ' sub do_copy
0fa00                 | _do_copy
0fa00     08 4A 05 F6 | 	mov	COUNT_, #8
0fa04     A8 00 A0 FD | 	call	#pushregs_
0fa08     FC DC BF FD | 	call	#_pop
0fa0c     FD 26 02 F6 | 	mov	local01, result1
0fa10     FE 1A 02 F6 | 	mov	arg05, result2
0fa14     FF 18 02 F6 | 	mov	arg04, result3
0fa18     0D 29 02 F6 | 	mov	local02, arg05
0fa1c     0C 2B 02 F6 | 	mov	local03, arg04
0fa20     E4 DC BF FD | 	call	#_pop
0fa24     FE 1A 02 F6 | 	mov	arg05, result2
0fa28     FF 18 02 F6 | 	mov	arg04, result3
0fa2c     FD 2C 02 F6 | 	mov	local04, result1
0fa30     0D 2F 02 F6 | 	mov	local05, arg05
0fa34     0C 31 02 F6 | 	mov	local06, arg04
0fa38                 | ' 
0fa38                 | ' t1=pop()
0fa38                 | ' t2=pop()
0fa38                 | ' if t2.result_type=result_string2 then 
0fa38     2B 30 0E F2 | 	cmp	local06, #43 wz
0fa3c     10 00 90 5D |  if_ne	jmp	#LR__1300
0fa40     16 13 02 F6 | 	mov	arg01, local04
0fa44     38 DE BF FD | 	call	#_convertstring
0fa48     FD 32 02 F6 | 	mov	local07, result1
0fa4c     2C 00 90 FD | 	jmp	#LR__1302
0fa50                 | LR__1300
0fa50     1F 30 0E F2 | 	cmp	local06, #31 wz
0fa54     16 33 02 A6 |  if_e	mov	local07, local04
0fa58     20 00 90 AD |  if_e	jmp	#LR__1301
0fa5c     50 00 00 FF 
0fa60     F0 E4 05 F1 | 	add	objptr, ##41200
0fa64     F2 14 02 FB | 	rdlong	arg02, objptr
0fa68     50 00 00 FF 
0fa6c     F0 E4 85 F1 | 	sub	objptr, ##41200
0fa70     0F 12 06 F6 | 	mov	arg01, #15
0fa74     48 3B B1 FD | 	call	#_printerror
0fa78                 | '   printerror(15,runheader(0)) : return
0fa78     50 03 90 FD | 	jmp	#LR__1309
0fa7c                 | LR__1301
0fa7c                 | LR__1302
0fa7c                 | ' if t1.result_type=result_string2 then 
0fa7c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fa80     10 00 90 5D |  if_ne	jmp	#LR__1303
0fa84     13 13 02 F6 | 	mov	arg01, local01
0fa88     F4 DD BF FD | 	call	#_convertstring
0fa8c     FD 34 02 F6 | 	mov	local08, result1
0fa90     2C 00 90 FD | 	jmp	#LR__1305
0fa94                 | LR__1303
0fa94     1F 2A 0E F2 | 	cmp	local03, #31 wz
0fa98     13 35 02 A6 |  if_e	mov	local08, local01
0fa9c     20 00 90 AD |  if_e	jmp	#LR__1304
0faa0     50 00 00 FF 
0faa4     F0 E4 05 F1 | 	add	objptr, ##41200
0faa8     F2 14 02 FB | 	rdlong	arg02, objptr
0faac     50 00 00 FF 
0fab0     F0 E4 85 F1 | 	sub	objptr, ##41200
0fab4     0F 12 06 F6 | 	mov	arg01, #15
0fab8     04 3B B1 FD | 	call	#_printerror
0fabc                 | '   printerror(15,runheader(0)) : return
0fabc     0C 03 90 FD | 	jmp	#LR__1309
0fac0                 | LR__1304
0fac0                 | LR__1305
0fac0                 | ' 
0fac0                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0fac0     09 12 06 F6 | 	mov	arg01, #9
0fac4     19 15 02 F6 | 	mov	arg02, local07
0fac8     00 16 06 F6 | 	mov	arg03, #0
0facc     A0 81 B1 FD | 	call	#__system___basic_open_string
0fad0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fad4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fad8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fadc     52 00 00 FF 
0fae0     D8 E4 05 F1 | 	add	objptr, ##42200
0fae4     F2 FA 61 FC | 	wrlong	result1, objptr
0fae8     52 00 00 FF 
0faec     D8 E4 85 F1 | 	sub	objptr, ##42200
0faf0     0C 01 90 AD |  if_e	jmp	#LR__1306
0faf4     00 12 06 F6 | 	mov	arg01, #0
0faf8     98 D2 B1 FD | 	call	#__system___getiolock_0616
0fafc     FD 12 02 F6 | 	mov	arg01, result1
0fb00     68 75 B1 FD | 	call	#__system___lockmem
0fb04     BA 01 00 FF 
0fb08     1C 14 06 F6 | 	mov	arg02, ##@LR__5925
0fb0c     00 12 06 F6 | 	mov	arg01, #0
0fb10     00 16 06 F6 | 	mov	arg03, #0
0fb14     48 82 B1 FD | 	call	#__system___basic_print_string
0fb18     52 00 00 FF 
0fb1c     D8 E4 05 F1 | 	add	objptr, ##42200
0fb20     F2 14 02 FB | 	rdlong	arg02, objptr
0fb24     52 00 00 FF 
0fb28     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb2c     00 12 06 F6 | 	mov	arg01, #0
0fb30     00 16 06 F6 | 	mov	arg03, #0
0fb34     0A 18 06 F6 | 	mov	arg04, #10
0fb38     68 82 B1 FD | 	call	#__system___basic_print_integer
0fb3c     BA 01 00 FF 
0fb40     2C 14 06 F6 | 	mov	arg02, ##@LR__5926
0fb44     00 12 06 F6 | 	mov	arg01, #0
0fb48     00 16 06 F6 | 	mov	arg03, #0
0fb4c     10 82 B1 FD | 	call	#__system___basic_print_string
0fb50     50 00 00 FF 
0fb54     F0 E4 05 F1 | 	add	objptr, ##41200
0fb58     F2 14 02 FB | 	rdlong	arg02, objptr
0fb5c     50 00 00 FF 
0fb60     F0 E4 85 F1 | 	sub	objptr, ##41200
0fb64     00 12 06 F6 | 	mov	arg01, #0
0fb68     00 16 06 F6 | 	mov	arg03, #0
0fb6c     0A 18 06 F6 | 	mov	arg04, #10
0fb70     70 82 B1 FD | 	call	#__system___basic_print_unsigned
0fb74     BA 01 00 FF 
0fb78     36 14 06 F6 | 	mov	arg02, ##@LR__5927
0fb7c     00 12 06 F6 | 	mov	arg01, #0
0fb80     00 16 06 F6 | 	mov	arg03, #0
0fb84     D8 81 B1 FD | 	call	#__system___basic_print_string
0fb88     00 34 06 F6 | 	mov	local08, #0
0fb8c     52 00 00 FF 
0fb90     D8 E4 05 F1 | 	add	objptr, ##42200
0fb94     F2 12 02 FB | 	rdlong	arg01, objptr
0fb98     52 00 00 FF 
0fb9c     D8 E4 85 F1 | 	sub	objptr, ##42200
0fba0     54 9E B1 FD | 	call	#__system___strerror
0fba4     FD 14 02 F6 | 	mov	arg02, result1
0fba8     1A 13 02 F6 | 	mov	arg01, local08
0fbac     00 16 06 F6 | 	mov	arg03, #0
0fbb0     AC 81 B1 FD | 	call	#__system___basic_print_string
0fbb4     BA 01 00 FF 
0fbb8     39 14 06 F6 | 	mov	arg02, ##@LR__5928
0fbbc     00 12 06 F6 | 	mov	arg01, #0
0fbc0     00 16 06 F6 | 	mov	arg03, #0
0fbc4     98 81 B1 FD | 	call	#__system___basic_print_string
0fbc8     00 12 06 F6 | 	mov	arg01, #0
0fbcc     19 15 02 F6 | 	mov	arg02, local07
0fbd0     00 16 06 F6 | 	mov	arg03, #0
0fbd4     88 81 B1 FD | 	call	#__system___basic_print_string
0fbd8     00 12 06 F6 | 	mov	arg01, #0
0fbdc     0A 14 06 F6 | 	mov	arg02, #10
0fbe0     00 16 06 F6 | 	mov	arg03, #0
0fbe4     20 81 B1 FD | 	call	#__system___basic_print_char
0fbe8     00 12 06 F6 | 	mov	arg01, #0
0fbec     A4 D1 B1 FD | 	call	#__system___getiolock_0616
0fbf0     FD 00 68 FC | 	wrlong	#0, result1
0fbf4     09 12 06 F6 | 	mov	arg01, #9
0fbf8     C8 C7 B1 FD | 	call	#__system__close
0fbfc     CC 01 90 FD | 	jmp	#LR__1309
0fc00                 | LR__1306
0fc00                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fc00     08 12 06 F6 | 	mov	arg01, #8
0fc04     1A 15 02 F6 | 	mov	arg02, local08
0fc08     0D 16 06 F6 | 	mov	arg03, #13
0fc0c     60 80 B1 FD | 	call	#__system___basic_open_string
0fc10     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fc14     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fc18     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fc1c     52 00 00 FF 
0fc20     D8 E4 05 F1 | 	add	objptr, ##42200
0fc24     F2 FA 61 FC | 	wrlong	result1, objptr
0fc28     52 00 00 FF 
0fc2c     D8 E4 85 F1 | 	sub	objptr, ##42200
0fc30     0C 01 90 AD |  if_e	jmp	#LR__1307
0fc34     00 12 06 F6 | 	mov	arg01, #0
0fc38     58 D1 B1 FD | 	call	#__system___getiolock_0616
0fc3c     FD 12 02 F6 | 	mov	arg01, result1
0fc40     28 74 B1 FD | 	call	#__system___lockmem
0fc44     BA 01 00 FF 
0fc48     47 14 06 F6 | 	mov	arg02, ##@LR__5929
0fc4c     00 12 06 F6 | 	mov	arg01, #0
0fc50     00 16 06 F6 | 	mov	arg03, #0
0fc54     08 81 B1 FD | 	call	#__system___basic_print_string
0fc58     52 00 00 FF 
0fc5c     D8 E4 05 F1 | 	add	objptr, ##42200
0fc60     F2 14 02 FB | 	rdlong	arg02, objptr
0fc64     52 00 00 FF 
0fc68     D8 E4 85 F1 | 	sub	objptr, ##42200
0fc6c     00 12 06 F6 | 	mov	arg01, #0
0fc70     00 16 06 F6 | 	mov	arg03, #0
0fc74     0A 18 06 F6 | 	mov	arg04, #10
0fc78     28 81 B1 FD | 	call	#__system___basic_print_integer
0fc7c     BA 01 00 FF 
0fc80     57 14 06 F6 | 	mov	arg02, ##@LR__5930
0fc84     00 12 06 F6 | 	mov	arg01, #0
0fc88     00 16 06 F6 | 	mov	arg03, #0
0fc8c     D0 80 B1 FD | 	call	#__system___basic_print_string
0fc90     50 00 00 FF 
0fc94     F0 E4 05 F1 | 	add	objptr, ##41200
0fc98     F2 14 02 FB | 	rdlong	arg02, objptr
0fc9c     50 00 00 FF 
0fca0     F0 E4 85 F1 | 	sub	objptr, ##41200
0fca4     00 12 06 F6 | 	mov	arg01, #0
0fca8     00 16 06 F6 | 	mov	arg03, #0
0fcac     0A 18 06 F6 | 	mov	arg04, #10
0fcb0     30 81 B1 FD | 	call	#__system___basic_print_unsigned
0fcb4     BA 01 00 FF 
0fcb8     61 14 06 F6 | 	mov	arg02, ##@LR__5931
0fcbc     00 12 06 F6 | 	mov	arg01, #0
0fcc0     00 16 06 F6 | 	mov	arg03, #0
0fcc4     98 80 B1 FD | 	call	#__system___basic_print_string
0fcc8     00 32 06 F6 | 	mov	local07, #0
0fccc     52 00 00 FF 
0fcd0     D8 E4 05 F1 | 	add	objptr, ##42200
0fcd4     F2 12 02 FB | 	rdlong	arg01, objptr
0fcd8     52 00 00 FF 
0fcdc     D8 E4 85 F1 | 	sub	objptr, ##42200
0fce0     14 9D B1 FD | 	call	#__system___strerror
0fce4     FD 14 02 F6 | 	mov	arg02, result1
0fce8     19 13 02 F6 | 	mov	arg01, local07
0fcec     00 16 06 F6 | 	mov	arg03, #0
0fcf0     6C 80 B1 FD | 	call	#__system___basic_print_string
0fcf4     BA 01 00 FF 
0fcf8     64 14 06 F6 | 	mov	arg02, ##@LR__5932
0fcfc     00 12 06 F6 | 	mov	arg01, #0
0fd00     00 16 06 F6 | 	mov	arg03, #0
0fd04     58 80 B1 FD | 	call	#__system___basic_print_string
0fd08     00 12 06 F6 | 	mov	arg01, #0
0fd0c     1A 15 02 F6 | 	mov	arg02, local08
0fd10     00 16 06 F6 | 	mov	arg03, #0
0fd14     48 80 B1 FD | 	call	#__system___basic_print_string
0fd18     00 12 06 F6 | 	mov	arg01, #0
0fd1c     0A 14 06 F6 | 	mov	arg02, #10
0fd20     00 16 06 F6 | 	mov	arg03, #0
0fd24     E0 7F B1 FD | 	call	#__system___basic_print_char
0fd28     00 12 06 F6 | 	mov	arg01, #0
0fd2c     64 D0 B1 FD | 	call	#__system___getiolock_0616
0fd30     FD 00 68 FC | 	wrlong	#0, result1
0fd34     08 12 06 F6 | 	mov	arg01, #8
0fd38     88 C6 B1 FD | 	call	#__system__close
0fd3c     8C 00 90 FD | 	jmp	#LR__1309
0fd40                 | LR__1307
0fd40                 | ' 
0fd40                 | ' do
0fd40                 | LR__1308
0fd40                 | '   get #9,,block(0),1024,r
0fd40     4E 00 00 FF 
0fd44     B4 E4 05 F1 | 	add	objptr, ##40116
0fd48     F2 16 02 F6 | 	mov	arg03, objptr
0fd4c     4E 00 00 FF 
0fd50     B4 E4 85 F1 | 	sub	objptr, ##40116
0fd54     09 12 06 F6 | 	mov	arg01, #9
0fd58     00 14 06 F6 | 	mov	arg02, #0
0fd5c     0A 18 C6 F9 | 	decod	arg04, #10
0fd60     01 1A 06 F6 | 	mov	arg05, #1
0fd64     74 81 B1 FD | 	call	#__system___basic_get
0fd68     52 00 00 FF 
0fd6c     10 E5 05 F1 | 	add	objptr, ##42256
0fd70     F2 FA 61 FC | 	wrlong	result1, objptr
0fd74                 | '   put #8,,block(0),r
0fd74     04 00 00 FF 
0fd78     5C E4 85 F1 | 	sub	objptr, ##2140
0fd7c     F2 16 02 F6 | 	mov	arg03, objptr
0fd80     FD 18 02 F6 | 	mov	arg04, result1
0fd84     4E 00 00 FF 
0fd88     B4 E4 85 F1 | 	sub	objptr, ##40116
0fd8c     08 12 06 F6 | 	mov	arg01, #8
0fd90     00 14 06 F6 | 	mov	arg02, #0
0fd94     01 1A 06 F6 | 	mov	arg05, #1
0fd98     D4 80 B1 FD | 	call	#__system___basic_put
0fd9c     52 00 00 FF 
0fda0     10 E5 05 F1 | 	add	objptr, ##42256
0fda4     F2 34 02 FB | 	rdlong	local08, objptr
0fda8     52 00 00 FF 
0fdac     10 E5 85 F1 | 	sub	objptr, ##42256
0fdb0     02 00 00 FF 
0fdb4     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fdb8     84 FF 9F AD |  if_e	jmp	#LR__1308
0fdbc                 | ' close #8
0fdbc     08 12 06 F6 | 	mov	arg01, #8
0fdc0     00 C6 B1 FD | 	call	#__system__close
0fdc4                 | ' close #9
0fdc4     09 12 06 F6 | 	mov	arg01, #9
0fdc8     F8 C5 B1 FD | 	call	#__system__close
0fdcc                 | LR__1309
0fdcc     A7 F0 03 F6 | 	mov	ptra, fp
0fdd0     B2 00 A0 FD | 	call	#popregs_
0fdd4                 | _do_copy_ret
0fdd4     2D 00 64 FD | 	ret
0fdd8                 | 
0fdd8                 | ' 
0fdd8                 | ' '-------------------- cos
0fdd8                 | ' 
0fdd8                 | ' sub do_cos
0fdd8                 | _do_cos
0fdd8     01 4A 05 F6 | 	mov	COUNT_, #1
0fddc     A8 00 A0 FD | 	call	#pushregs_
0fde0     10 F0 07 F1 | 	add	ptra, #16
0fde4     4A 00 00 FF 
0fde8     80 E4 05 F1 | 	add	objptr, ##38016
0fdec     F2 26 02 FB | 	rdlong	local01, objptr
0fdf0     13 17 02 F6 | 	mov	arg03, local01
0fdf4     01 16 66 F0 | 	shl	arg03, #1
0fdf8     13 17 02 F1 | 	add	arg03, local01
0fdfc     02 16 66 F0 | 	shl	arg03, #2
0fe00     03 00 00 FF 
0fe04     04 E4 85 F1 | 	sub	objptr, ##1540
0fe08     F2 16 02 F1 | 	add	arg03, objptr
0fe0c     0B 17 02 FB | 	rdlong	arg03, arg03
0fe10     0C 4E 05 F1 | 	add	fp, #12
0fe14     A7 16 62 FC | 	wrlong	arg03, fp
0fe18                 | ' 
0fe18                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe18                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fe18     0C 4E 85 F1 | 	sub	fp, #12
0fe1c     02 16 16 F2 | 	cmp	arg03, #2 wc
0fe20     47 00 00 FF 
0fe24     7C E4 85 F1 | 	sub	objptr, ##36476
0fe28     0C 4E 05 C1 |  if_b	add	fp, #12
0fe2c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0fe30     0C 4E 85 C1 |  if_b	sub	fp, #12
0fe34     40 00 90 4D |  if_c_and_nz	jmp	#LR__1310
0fe38     00 12 06 F6 | 	mov	arg01, #0
0fe3c     54 CF B1 FD | 	call	#__system___getiolock_0616
0fe40     FD 12 02 F6 | 	mov	arg01, result1
0fe44     24 72 B1 FD | 	call	#__system___lockmem
0fe48     BA 01 00 FF 
0fe4c     72 14 06 F6 | 	mov	arg02, ##@LR__5933
0fe50     00 12 06 F6 | 	mov	arg01, #0
0fe54     00 16 06 F6 | 	mov	arg03, #0
0fe58     04 7F B1 FD | 	call	#__system___basic_print_string
0fe5c     00 12 06 F6 | 	mov	arg01, #0
0fe60     30 CF B1 FD | 	call	#__system___getiolock_0616
0fe64     FD 00 68 FC | 	wrlong	#0, result1
0fe68     27 12 06 F6 | 	mov	arg01, #39
0fe6c     00 14 06 F6 | 	mov	arg02, #0
0fe70     4C 37 B1 FD | 	call	#_printerror
0fe74     78 00 90 FD | 	jmp	#LR__1311
0fe78                 | LR__1310
0fe78     8C D8 BF FD | 	call	#_pop
0fe7c     A7 FA 61 FC | 	wrlong	result1, fp
0fe80     04 4E 05 F1 | 	add	fp, #4
0fe84     A7 FC 61 FC | 	wrlong	result2, fp
0fe88     04 4E 05 F1 | 	add	fp, #4
0fe8c     A7 FE 61 FC | 	wrlong	result3, fp
0fe90     08 4E 85 F1 | 	sub	fp, #8
0fe94     52 00 00 FF 
0fe98     A8 E4 05 F1 | 	add	objptr, ##42152
0fe9c     F2 26 02 FB | 	rdlong	local01, objptr
0fea0     52 00 00 FF 
0fea4     A8 E4 85 F1 | 	sub	objptr, ##42152
0fea8     A7 12 02 F6 | 	mov	arg01, fp
0feac     F8 DA BF FD | 	call	#_converttofloat
0feb0     FD 14 02 F6 | 	mov	arg02, result1
0feb4     13 13 02 F6 | 	mov	arg01, local01
0feb8     28 A0 B1 FD | 	call	#__system___float_mul
0febc     FD 14 02 F6 | 	mov	arg02, result1
0fec0     87 E4 1F FF 
0fec4     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fec8     1F 14 E6 F4 | 	bitnot	arg02, #31
0fecc     44 9C B1 FD | 	call	#__system___float_add
0fed0     FD 12 02 F6 | 	mov	arg01, result1
0fed4     6C A9 B1 FD | 	call	#__system____builtin_sinf
0fed8     A7 FA 61 FC | 	wrlong	result1, fp
0fedc     08 4E 05 F1 | 	add	fp, #8
0fee0     A7 3C 68 FC | 	wrlong	#30, fp
0fee4     08 4E 85 F1 | 	sub	fp, #8
0fee8     A7 12 02 F6 | 	mov	arg01, fp
0feec     B0 D8 BF FD | 	call	#_push
0fef0                 | LR__1311
0fef0     A7 F0 03 F6 | 	mov	ptra, fp
0fef4     B2 00 A0 FD | 	call	#popregs_
0fef8                 | _do_cos_ret
0fef8     2D 00 64 FD | 	ret
0fefc                 | 
0fefc                 | ' 
0fefc                 | ' '-------------------- cursor
0fefc                 | ' 
0fefc                 | ' sub do_cursor
0fefc                 | _do_cursor
0fefc     08 D8 BF FD | 	call	#_pop
0ff00     00 FA 4D F2 | 	cmps	result1, #0 wz
0ff04                 | ' t1=pop()
0ff04                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0ff04     14 00 90 5D |  if_ne	jmp	#LR__1320
0ff08     11 12 06 F6 | 	mov	arg01, #17
0ff0c     00 14 06 F6 | 	mov	arg02, #0
0ff10     00 16 06 F6 | 	mov	arg03, #0
0ff14     10 47 B1 FD | 	call	#_hg010b_spin2_setspritesize
0ff18     10 00 90 FD | 	jmp	#LR__1321
0ff1c                 | LR__1320
0ff1c     11 12 06 F6 | 	mov	arg01, #17
0ff20     08 14 06 F6 | 	mov	arg02, #8
0ff24     10 16 06 F6 | 	mov	arg03, #16
0ff28     FC 46 B1 FD | 	call	#_hg010b_spin2_setspritesize
0ff2c                 | LR__1321
0ff2c                 | _do_cursor_ret
0ff2c     2D 00 64 FD | 	ret
0ff30                 | 
0ff30                 | ' 
0ff30                 | ' '-------------------- defenv
0ff30                 | ' 
0ff30                 | ' sub do_defenv
0ff30                 | _do_defenv
0ff30     08 4A 05 F6 | 	mov	COUNT_, #8
0ff34     A8 00 A0 FD | 	call	#pushregs_
0ff38     58 F0 07 F1 | 	add	ptra, #88
0ff3c     4A 00 00 FF 
0ff40     80 E4 05 F1 | 	add	objptr, ##38016
0ff44     F2 26 02 FB | 	rdlong	local01, objptr
0ff48     13 1B 02 F6 | 	mov	arg05, local01
0ff4c     01 1A 66 F0 | 	shl	arg05, #1
0ff50     13 1B 02 F1 | 	add	arg05, local01
0ff54     02 1A 66 F0 | 	shl	arg05, #2
0ff58     03 00 00 FF 
0ff5c     04 E4 85 F1 | 	sub	objptr, ##1540
0ff60     F2 1A 02 F1 | 	add	arg05, objptr
0ff64     0D 1B 02 FB | 	rdlong	arg05, arg05
0ff68     10 4E 05 F1 | 	add	fp, #16
0ff6c     A7 1A 62 FC | 	wrlong	arg05, fp
0ff70                 | ' 
0ff70                 | ' numpar=compiledline(lineptr_e).result.uresult
0ff70                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0ff70     10 4E 85 F1 | 	sub	fp, #16
0ff74     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ff78     47 00 00 FF 
0ff7c     7C E4 85 F1 | 	sub	objptr, ##36476
0ff80     10 4E 05 51 |  if_ne	add	fp, #16
0ff84     A7 26 02 5B |  if_ne	rdlong	local01, fp
0ff88     10 4E 85 51 |  if_ne	sub	fp, #16
0ff8c     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0ff90     8C 0A 90 5D |  if_ne	jmp	#LR__1351
0ff94                 | ' 
0ff94                 | ' if numpar=2 then						' env from .h2 or from a pointer
0ff94     10 4E 05 F1 | 	add	fp, #16
0ff98     A7 26 02 FB | 	rdlong	local01, fp
0ff9c     10 4E 85 F1 | 	sub	fp, #16
0ffa0     02 26 0E F2 | 	cmp	local01, #2 wz
0ffa4     24 04 90 5D |  if_ne	jmp	#LR__1343
0ffa8     5C D7 BF FD | 	call	#_pop
0ffac     FF 1A 02 F6 | 	mov	arg05, result3
0ffb0     40 4E 05 F1 | 	add	fp, #64
0ffb4     A7 FA 61 FC | 	wrlong	result1, fp
0ffb8     04 4E 05 F1 | 	add	fp, #4
0ffbc     A7 FC 61 FC | 	wrlong	result2, fp
0ffc0     04 4E 05 F1 | 	add	fp, #4
0ffc4     A7 1A 62 FC | 	wrlong	arg05, fp
0ffc8                 | '   t1=pop()
0ffc8                 | '   if t1.result_type=result_string2 then 
0ffc8     48 4E 85 F1 | 	sub	fp, #72
0ffcc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ffd0     20 00 90 5D |  if_ne	jmp	#LR__1330
0ffd4     40 4E 05 F1 | 	add	fp, #64
0ffd8     A7 12 02 FB | 	rdlong	arg01, fp
0ffdc     40 4E 85 F1 | 	sub	fp, #64
0ffe0     9C D8 BF FD | 	call	#_convertstring
0ffe4     4C 4E 05 F1 | 	add	fp, #76
0ffe8     A7 FA 61 FC | 	wrlong	result1, fp
0ffec     4C 4E 85 F1 | 	sub	fp, #76
0fff0     58 00 90 FD | 	jmp	#LR__1333
0fff4                 | LR__1330
0fff4     48 4E 05 F1 | 	add	fp, #72
0fff8     A7 26 02 FB | 	rdlong	local01, fp
0fffc     48 4E 85 F1 | 	sub	fp, #72
10000     1F 26 0E F2 | 	cmp	local01, #31 wz
10004     18 00 90 5D |  if_ne	jmp	#LR__1331
10008     40 4E 05 F1 | 	add	fp, #64
1000c     A7 26 02 FB | 	rdlong	local01, fp
10010     0C 4E 05 F1 | 	add	fp, #12
10014     A7 26 62 FC | 	wrlong	local01, fp
10018     4C 4E 85 F1 | 	sub	fp, #76
1001c     2C 00 90 FD | 	jmp	#LR__1332
10020                 | LR__1331
10020     BA 01 00 FF 
10024     78 26 06 F6 | 	mov	local01, ##@LR__5934
10028     4C 4E 05 F1 | 	add	fp, #76
1002c     A7 26 62 FC | 	wrlong	local01, fp
10030     0C 4E 85 F1 | 	sub	fp, #12
10034     A7 12 02 F6 | 	mov	arg01, fp
10038     40 4E 85 F1 | 	sub	fp, #64
1003c     AC D8 BF FD | 	call	#_converttoint
10040     1C 4E 05 F1 | 	add	fp, #28
10044     A7 FA 61 FC | 	wrlong	result1, fp
10048     1C 4E 85 F1 | 	sub	fp, #28
1004c                 | LR__1332
1004c                 | LR__1333
1004c                 | '   if s1<>"" then 
1004c     4C 4E 05 F1 | 	add	fp, #76
10050     A7 12 02 FB | 	rdlong	arg01, fp
10054     4C 4E 85 F1 | 	sub	fp, #76
10058     BA 01 00 FF 
1005c     79 14 06 F6 | 	mov	arg02, ##@LR__5935
10060     30 70 B1 FD | 	call	#__system___string_cmp
10064     00 FA 0D F2 | 	cmp	result1, #0 wz
10068     24 02 90 AD |  if_e	jmp	#LR__1337
1006c     98 D6 BF FD | 	call	#_pop
10070     FF 26 02 F6 | 	mov	local01, result3
10074     40 4E 05 F1 | 	add	fp, #64
10078     A7 FA 61 FC | 	wrlong	result1, fp
1007c     04 4E 05 F1 | 	add	fp, #4
10080     A7 FC 61 FC | 	wrlong	result2, fp
10084     04 4E 05 F1 | 	add	fp, #4
10088     A7 26 62 FC | 	wrlong	local01, fp
1008c     08 4E 85 F1 | 	sub	fp, #8
10090     A7 12 02 F6 | 	mov	arg01, fp
10094     40 4E 85 F1 | 	sub	fp, #64
10098     50 D8 BF FD | 	call	#_converttoint
1009c     18 4E 05 F1 | 	add	fp, #24
100a0     A7 FA 61 FC | 	wrlong	result1, fp
100a4     18 4E 85 F1 | 	sub	fp, #24
100a8                 | '     t1=pop()
100a8                 | '     channel=converttoint(t1) 
100a8                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
100a8     09 12 06 F6 | 	mov	arg01, #9
100ac     14 C3 B1 FD | 	call	#__system__close
100b0     09 26 06 F6 | 	mov	local01, #9
100b4     BA 01 00 FF 
100b8     7A 12 06 F6 | 	mov	arg01, ##@LR__5936
100bc     4C 4E 05 F1 | 	add	fp, #76
100c0     A7 14 02 FB | 	rdlong	arg02, fp
100c4     4C 4E 85 F1 | 	sub	fp, #76
100c8     FC 6F B1 FD | 	call	#__system___string_concat
100cc     FD 14 02 F6 | 	mov	arg02, result1
100d0     13 13 02 F6 | 	mov	arg01, local01
100d4     00 16 06 F6 | 	mov	arg03, #0
100d8     94 7B B1 FD | 	call	#__system___basic_open_string
100dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
100e0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
100e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
100e8     0C 4E 05 F1 | 	add	fp, #12
100ec     A7 FA 61 FC | 	wrlong	result1, fp
100f0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
100f0     0C 4E 85 F1 | 	sub	fp, #12
100f4     A0 00 90 AD |  if_e	jmp	#LR__1334
100f8     00 12 06 F6 | 	mov	arg01, #0
100fc     94 CC B1 FD | 	call	#__system___getiolock_0616
10100     FD 12 02 F6 | 	mov	arg01, result1
10104     64 6F B1 FD | 	call	#__system___lockmem
10108     BA 01 00 FF 
1010c     87 14 06 F6 | 	mov	arg02, ##@LR__5937
10110     00 12 06 F6 | 	mov	arg01, #0
10114     00 16 06 F6 | 	mov	arg03, #0
10118     44 7C B1 FD | 	call	#__system___basic_print_string
1011c     0C 4E 05 F1 | 	add	fp, #12
10120     A7 14 02 FB | 	rdlong	arg02, fp
10124     0C 4E 85 F1 | 	sub	fp, #12
10128     00 12 06 F6 | 	mov	arg01, #0
1012c     00 16 06 F6 | 	mov	arg03, #0
10130     0A 18 06 F6 | 	mov	arg04, #10
10134     6C 7C B1 FD | 	call	#__system___basic_print_integer
10138     BA 01 00 FF 
1013c     95 14 06 F6 | 	mov	arg02, ##@LR__5938
10140     00 12 06 F6 | 	mov	arg01, #0
10144     00 16 06 F6 | 	mov	arg03, #0
10148     14 7C B1 FD | 	call	#__system___basic_print_string
1014c     00 26 06 F6 | 	mov	local01, #0
10150     0C 4E 05 F1 | 	add	fp, #12
10154     A7 12 02 FB | 	rdlong	arg01, fp
10158     0C 4E 85 F1 | 	sub	fp, #12
1015c     98 98 B1 FD | 	call	#__system___strerror
10160     FD 14 02 F6 | 	mov	arg02, result1
10164     13 13 02 F6 | 	mov	arg01, local01
10168     00 16 06 F6 | 	mov	arg03, #0
1016c     F0 7B B1 FD | 	call	#__system___basic_print_string
10170     00 12 06 F6 | 	mov	arg01, #0
10174     0A 14 06 F6 | 	mov	arg02, #10
10178     00 16 06 F6 | 	mov	arg03, #0
1017c     88 7B B1 FD | 	call	#__system___basic_print_char
10180     00 12 06 F6 | 	mov	arg01, #0
10184     0C CC B1 FD | 	call	#__system___getiolock_0616
10188     FD 00 68 FC | 	wrlong	#0, result1
1018c     09 12 06 F6 | 	mov	arg01, #9
10190     30 C2 B1 FD | 	call	#__system__close
10194     88 08 90 FD | 	jmp	#LR__1351
10198                 | LR__1334
10198                 | '     get #9,17,envbuf8(channel,0),256
10198     18 4E 05 F1 | 	add	fp, #24
1019c     A7 1A 02 FB | 	rdlong	arg05, fp
101a0     18 4E 85 F1 | 	sub	fp, #24
101a4     0D 17 02 F6 | 	mov	arg03, arg05
101a8     09 16 66 F0 | 	shl	arg03, #9
101ac     0D 17 02 F1 | 	add	arg03, arg05
101b0     0C 00 00 FF 
101b4     D8 E4 05 F1 | 	add	objptr, ##6360
101b8     F2 16 02 F1 | 	add	arg03, objptr
101bc     09 12 06 F6 | 	mov	arg01, #9
101c0     11 14 06 F6 | 	mov	arg02, #17
101c4     00 19 06 F6 | 	mov	arg04, #256
101c8     01 1A 06 F6 | 	mov	arg05, #1
101cc     0C 00 00 FF 
101d0     D8 E4 85 F1 | 	sub	objptr, ##6360
101d4     04 7D B1 FD | 	call	#__system___basic_get
101d8                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
101d8     14 4E 05 F1 | 	add	fp, #20
101dc     A7 FE 69 FC | 	wrlong	#255, fp
101e0     14 4E 85 F1 | 	sub	fp, #20
101e4     0C 00 00 FF 
101e8     D8 E4 05 F1 | 	add	objptr, ##6360
101ec     97 30 48 FB | 	callpa	#(@LR__1336-@LR__1335)>>2,fcache_load_ptr_
101f0                 | LR__1335
101f0     18 4E 05 F1 | 	add	fp, #24
101f4     A7 16 02 FB | 	rdlong	arg03, fp
101f8     0B 27 02 F6 | 	mov	local01, arg03
101fc     09 26 66 F0 | 	shl	local01, #9
10200     F2 26 02 F1 | 	add	local01, objptr
10204     04 4E 85 F1 | 	sub	fp, #4
10208     A7 1A 02 FB | 	rdlong	arg05, fp
1020c     0D 19 02 F6 | 	mov	arg04, arg05
10210     01 18 66 F0 | 	shl	arg04, #1
10214     13 19 02 F1 | 	add	arg04, local01
10218     0B 27 02 F6 | 	mov	local01, arg03
1021c     09 26 66 F0 | 	shl	local01, #9
10220     0B 27 02 F1 | 	add	local01, arg03
10224     F2 26 02 F1 | 	add	local01, objptr
10228     13 1B 02 F1 | 	add	arg05, local01
1022c     0D 27 C2 FA | 	rdbyte	local01, arg05
10230     00 27 06 FA | 	mul	local01, #256
10234     0C 27 52 FC | 	wrword	local01, arg04
10238     A7 26 02 FB | 	rdlong	local01, fp
1023c     01 26 86 F1 | 	sub	local01, #1
10240     A7 26 62 FC | 	wrlong	local01, fp
10244     14 4E 85 F1 | 	sub	fp, #20
10248     00 26 56 F2 | 	cmps	local01, #0 wc
1024c     A0 FF 9F 3D |  if_ae	jmp	#LR__1335
10250                 | LR__1336
10250     0C 00 00 FF 
10254     D8 E4 85 F1 | 	sub	objptr, ##6360
10258                 | '     close #9
10258     09 12 06 F6 | 	mov	arg01, #9
1025c     64 C1 B1 FD | 	call	#__system__close
10260     18 4E 05 F1 | 	add	fp, #24
10264     A7 26 02 FB | 	rdlong	local01, fp
10268     18 4E 85 F1 | 	sub	fp, #24
1026c     09 26 66 F0 | 	shl	local01, #9
10270     0C 00 00 FF 
10274     D8 E4 05 F1 | 	add	objptr, ##6360
10278     F2 26 02 F1 | 	add	local01, objptr
1027c     FE 27 06 F1 | 	add	local01, #510
10280     13 01 58 FC | 	wrword	#0, local01
10284                 | '     envbuf(channel,255)=0                                                              
10284                 | '     return
10284     0C 00 00 FF 
10288     D8 E4 85 F1 | 	sub	objptr, ##6360
1028c     90 07 90 FD | 	jmp	#LR__1351
10290                 | LR__1337
10290                 | '     if wptr < $80000 then 
10290     1C 4E 05 F1 | 	add	fp, #28
10294     A7 28 02 FB | 	rdlong	local02, fp
10298     1C 4E 85 F1 | 	sub	fp, #28
1029c     00 04 00 FF 
102a0     00 28 56 F2 | 	cmps	local02, ##524288 wc
102a4     7C 00 90 3D |  if_ae	jmp	#LR__1340
102a8                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
102a8     14 4E 05 F1 | 	add	fp, #20
102ac     A7 00 68 FC | 	wrlong	#0, fp
102b0     14 4E 85 F1 | 	sub	fp, #20
102b4     0C 00 00 FF 
102b8     D8 E4 05 F1 | 	add	objptr, ##6360
102bc     97 2C 48 FB | 	callpa	#(@LR__1339-@LR__1338)>>2,fcache_load_ptr_
102c0                 | LR__1338
102c0     18 4E 05 F1 | 	add	fp, #24
102c4     A7 28 02 FB | 	rdlong	local02, fp
102c8     09 28 66 F0 | 	shl	local02, #9
102cc     F2 28 02 F1 | 	add	local02, objptr
102d0     04 4E 85 F1 | 	sub	fp, #4
102d4     A7 26 02 FB | 	rdlong	local01, fp
102d8     13 1B 02 F6 | 	mov	arg05, local01
102dc     01 1A 66 F0 | 	shl	arg05, #1
102e0     14 1B 02 F1 | 	add	arg05, local02
102e4     08 4E 05 F1 | 	add	fp, #8
102e8     A7 12 02 FB | 	rdlong	arg01, fp
102ec     01 26 66 F0 | 	shl	local01, #1
102f0     13 13 02 F1 | 	add	arg01, local01
102f4     09 FB E1 FA | 	rdword	result1, arg01
102f8     0D FB 51 FC | 	wrword	result1, arg05
102fc     08 4E 85 F1 | 	sub	fp, #8
10300     A7 28 02 FB | 	rdlong	local02, fp
10304     01 28 06 F1 | 	add	local02, #1
10308     A7 28 62 FC | 	wrlong	local02, fp
1030c     14 4E 85 F1 | 	sub	fp, #20
10310     00 29 56 F2 | 	cmps	local02, #256 wc
10314     A8 FF 9F CD |  if_b	jmp	#LR__1338
10318                 | LR__1339
10318     0C 00 00 FF 
1031c     D8 E4 85 F1 | 	sub	objptr, ##6360
10320     78 00 90 FD | 	jmp	#LR__1342
10324                 | LR__1340
10324                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
10324     14 4E 05 F1 | 	add	fp, #20
10328     A7 00 68 FC | 	wrlong	#0, fp
1032c     14 4E 85 F1 | 	sub	fp, #20
10330                 | LR__1341
10330     18 4E 05 F1 | 	add	fp, #24
10334     A7 28 02 FB | 	rdlong	local02, fp
10338     09 28 66 F0 | 	shl	local02, #9
1033c     0C 00 00 FF 
10340     D8 E4 05 F1 | 	add	objptr, ##6360
10344     F2 28 02 F1 | 	add	local02, objptr
10348     04 4E 85 F1 | 	sub	fp, #4
1034c     A7 26 02 FB | 	rdlong	local01, fp
10350     13 2B 02 F6 | 	mov	local03, local01
10354     01 2A 66 F0 | 	shl	local03, #1
10358     14 2B 02 F1 | 	add	local03, local02
1035c     08 4E 05 F1 | 	add	fp, #8
10360     A7 12 02 FB | 	rdlong	arg01, fp
10364     1C 4E 85 F1 | 	sub	fp, #28
10368     01 26 66 F0 | 	shl	local01, #1
1036c     13 13 02 F1 | 	add	arg01, local01
10370     0C 00 00 FF 
10374     D8 E4 85 F1 | 	sub	objptr, ##6360
10378     6C 35 B1 FD | 	call	#_psdpeek
1037c     15 FB 51 FC | 	wrword	result1, local03
10380     14 4E 05 F1 | 	add	fp, #20
10384     A7 2A 02 FB | 	rdlong	local03, fp
10388     01 2A 06 F1 | 	add	local03, #1
1038c     A7 2A 62 FC | 	wrlong	local03, fp
10390     14 4E 85 F1 | 	sub	fp, #20
10394     00 2B 56 F2 | 	cmps	local03, #256 wc
10398     94 FF 9F CD |  if_b	jmp	#LR__1341
1039c                 | LR__1342
1039c     18 4E 05 F1 | 	add	fp, #24
103a0     A7 2A 02 FB | 	rdlong	local03, fp
103a4     18 4E 85 F1 | 	sub	fp, #24
103a8     09 2A 66 F0 | 	shl	local03, #9
103ac     0C 00 00 FF 
103b0     D8 E4 05 F1 | 	add	objptr, ##6360
103b4     F2 2A 02 F1 | 	add	local03, objptr
103b8     FE 2B 06 F1 | 	add	local03, #510
103bc     15 01 58 FC | 	wrword	#0, local03
103c0                 | '     envbuf(channel,255)=0
103c0                 | '     return   
103c0     0C 00 00 FF 
103c4     D8 E4 85 F1 | 	sub	objptr, ##6360
103c8     54 06 90 FD | 	jmp	#LR__1351
103cc                 | LR__1343
103cc                 | ' 
103cc                 | ' if numpar=5 then   						 'simple adsr
103cc     10 4E 05 F1 | 	add	fp, #16
103d0     A7 28 02 FB | 	rdlong	local02, fp
103d4     10 4E 85 F1 | 	sub	fp, #16
103d8     05 28 0E F2 | 	cmp	local02, #5 wz
103dc     14 06 90 5D |  if_ne	jmp	#LR__1350
103e0     24 D3 BF FD | 	call	#_pop
103e4     FF 26 02 F6 | 	mov	local01, result3
103e8     40 4E 05 F1 | 	add	fp, #64
103ec     A7 FA 61 FC | 	wrlong	result1, fp
103f0     04 4E 05 F1 | 	add	fp, #4
103f4     A7 FC 61 FC | 	wrlong	result2, fp
103f8     04 4E 05 F1 | 	add	fp, #4
103fc     A7 26 62 FC | 	wrlong	local01, fp
10400     08 4E 85 F1 | 	sub	fp, #8
10404     A7 12 02 F6 | 	mov	arg01, fp
10408     40 4E 85 F1 | 	sub	fp, #64
1040c     98 D5 BF FD | 	call	#_converttofloat
10410     FD 28 02 F6 | 	mov	local02, result1
10414     2C 4E 05 F1 | 	add	fp, #44
10418     A7 28 62 FC | 	wrlong	local02, fp
1041c     2C 4E 85 F1 | 	sub	fp, #44
10420     E4 D2 BF FD | 	call	#_pop
10424     FF 26 02 F6 | 	mov	local01, result3
10428     40 4E 05 F1 | 	add	fp, #64
1042c     A7 FA 61 FC | 	wrlong	result1, fp
10430     04 4E 05 F1 | 	add	fp, #4
10434     A7 FC 61 FC | 	wrlong	result2, fp
10438     04 4E 05 F1 | 	add	fp, #4
1043c     A7 26 62 FC | 	wrlong	local01, fp
10440     08 4E 85 F1 | 	sub	fp, #8
10444     A7 12 02 F6 | 	mov	arg01, fp
10448     40 4E 85 F1 | 	sub	fp, #64
1044c     58 D5 BF FD | 	call	#_converttofloat
10450     FD 28 02 F6 | 	mov	local02, result1
10454     28 4E 05 F1 | 	add	fp, #40
10458     A7 28 62 FC | 	wrlong	local02, fp
1045c     28 4E 85 F1 | 	sub	fp, #40
10460     A4 D2 BF FD | 	call	#_pop
10464     FF 26 02 F6 | 	mov	local01, result3
10468     40 4E 05 F1 | 	add	fp, #64
1046c     A7 FA 61 FC | 	wrlong	result1, fp
10470     04 4E 05 F1 | 	add	fp, #4
10474     A7 FC 61 FC | 	wrlong	result2, fp
10478     04 4E 05 F1 | 	add	fp, #4
1047c     A7 26 62 FC | 	wrlong	local01, fp
10480     08 4E 85 F1 | 	sub	fp, #8
10484     A7 12 02 F6 | 	mov	arg01, fp
10488     40 4E 85 F1 | 	sub	fp, #64
1048c     18 D5 BF FD | 	call	#_converttofloat
10490     FD 28 02 F6 | 	mov	local02, result1
10494     24 4E 05 F1 | 	add	fp, #36
10498     A7 28 62 FC | 	wrlong	local02, fp
1049c     24 4E 85 F1 | 	sub	fp, #36
104a0     64 D2 BF FD | 	call	#_pop
104a4     FF 26 02 F6 | 	mov	local01, result3
104a8     40 4E 05 F1 | 	add	fp, #64
104ac     A7 FA 61 FC | 	wrlong	result1, fp
104b0     04 4E 05 F1 | 	add	fp, #4
104b4     A7 FC 61 FC | 	wrlong	result2, fp
104b8     04 4E 05 F1 | 	add	fp, #4
104bc     A7 26 62 FC | 	wrlong	local01, fp
104c0     08 4E 85 F1 | 	sub	fp, #8
104c4     A7 12 02 F6 | 	mov	arg01, fp
104c8     40 4E 85 F1 | 	sub	fp, #64
104cc     D8 D4 BF FD | 	call	#_converttofloat
104d0     FD 28 02 F6 | 	mov	local02, result1
104d4     20 4E 05 F1 | 	add	fp, #32
104d8     A7 28 62 FC | 	wrlong	local02, fp
104dc     20 4E 85 F1 | 	sub	fp, #32
104e0     24 D2 BF FD | 	call	#_pop
104e4     FF 26 02 F6 | 	mov	local01, result3
104e8     40 4E 05 F1 | 	add	fp, #64
104ec     A7 FA 61 FC | 	wrlong	result1, fp
104f0     04 4E 05 F1 | 	add	fp, #4
104f4     A7 FC 61 FC | 	wrlong	result2, fp
104f8     04 4E 05 F1 | 	add	fp, #4
104fc     A7 26 62 FC | 	wrlong	local01, fp
10500     08 4E 85 F1 | 	sub	fp, #8
10504     A7 12 02 F6 | 	mov	arg01, fp
10508     40 4E 85 F1 | 	sub	fp, #64
1050c     DC D3 BF FD | 	call	#_converttoint
10510     18 4E 05 F1 | 	add	fp, #24
10514     A7 FA 61 FC | 	wrlong	result1, fp
10518                 | '   t1=pop() : rr=converttofloat(t1)
10518                 | '   t1=pop() : ss=converttofloat(t1) 
10518                 | '   t1=pop() : dd=converttofloat(t1)
10518                 | '   t1=pop() : aa=converttofloat(t1)
10518                 | '   t1=pop() : channel=converttoint(t1)
10518                 | '   if ss<0.0 then ss=0.0 
10518     10 4E 05 F1 | 	add	fp, #16
1051c     A7 12 02 FB | 	rdlong	arg01, fp
10520     28 4E 85 F1 | 	sub	fp, #40
10524     00 14 06 F6 | 	mov	arg02, #0
10528     01 16 06 F6 | 	mov	arg03, #1
1052c     E8 9D B1 FD | 	call	#__system___float_cmp
10530     00 FA 55 F2 | 	cmps	result1, #0 wc
10534     28 4E 05 C1 |  if_b	add	fp, #40
10538     A7 00 68 CC |  if_b	wrlong	#0, fp
1053c     28 4E 85 C1 |  if_b	sub	fp, #40
10540                 | '   if ss>1.0 then ss=1.0
10540     28 4E 05 F1 | 	add	fp, #40
10544     A7 12 02 FB | 	rdlong	arg01, fp
10548     28 4E 85 F1 | 	sub	fp, #40
1054c     00 C0 1F FF 
10550     00 14 06 F6 | 	mov	arg02, ##1065353216
10554     01 16 66 F6 | 	neg	arg03, #1
10558     BC 9D B1 FD | 	call	#__system___float_cmp
1055c     01 FA 55 F2 | 	cmps	result1, #1 wc
10560     28 4E 05 31 |  if_ae	add	fp, #40
10564     00 C0 9F 3F 
10568     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
1056c     28 4E 85 31 |  if_ae	sub	fp, #40
10570     20 4E 05 F1 | 	add	fp, #32
10574     A7 12 02 FB | 	rdlong	arg01, fp
10578     04 4E 05 F1 | 	add	fp, #4
1057c     A7 14 02 FB | 	rdlong	arg02, fp
10580     24 4E 85 F1 | 	sub	fp, #36
10584     8C 95 B1 FD | 	call	#__system___float_add
10588     FD 12 02 F6 | 	mov	arg01, result1
1058c     2C 4E 05 F1 | 	add	fp, #44
10590     A7 14 02 FB | 	rdlong	arg02, fp
10594     2C 4E 85 F1 | 	sub	fp, #44
10598     78 95 B1 FD | 	call	#__system___float_add
1059c     30 4E 05 F1 | 	add	fp, #48
105a0     A7 FA 61 FC | 	wrlong	result1, fp
105a4     FD 14 02 F6 | 	mov	arg02, result1
105a8     30 4E 85 F1 | 	sub	fp, #48
105ac     00 C0 21 FF 
105b0     00 12 06 F6 | 	mov	arg01, ##1132462080
105b4     30 9B B1 FD | 	call	#__system___float_div
105b8     34 4E 05 F1 | 	add	fp, #52
105bc     A7 FA 61 FC | 	wrlong	result1, fp
105c0     14 4E 85 F1 | 	sub	fp, #20
105c4     A7 12 02 FB | 	rdlong	arg01, fp
105c8     FD 14 02 F6 | 	mov	arg02, result1
105cc     20 4E 85 F1 | 	sub	fp, #32
105d0     10 99 B1 FD | 	call	#__system___float_mul
105d4     FD 12 02 F6 | 	mov	arg01, result1
105d8     01 14 06 F6 | 	mov	arg02, #1
105dc     CC 9D B1 FD | 	call	#__system___float_tointeger
105e0     A7 FA 61 FC | 	wrlong	result1, fp
105e4     24 4E 05 F1 | 	add	fp, #36
105e8     A7 12 02 FB | 	rdlong	arg01, fp
105ec     10 4E 05 F1 | 	add	fp, #16
105f0     A7 14 02 FB | 	rdlong	arg02, fp
105f4     34 4E 85 F1 | 	sub	fp, #52
105f8     E8 98 B1 FD | 	call	#__system___float_mul
105fc     FD 12 02 F6 | 	mov	arg01, result1
10600     01 14 06 F6 | 	mov	arg02, #1
10604     A4 9D B1 FD | 	call	#__system___float_tointeger
10608     04 4E 05 F1 | 	add	fp, #4
1060c     A7 FA 61 FC | 	wrlong	result1, fp
10610     28 4E 05 F1 | 	add	fp, #40
10614     A7 12 02 FB | 	rdlong	arg01, fp
10618     08 4E 05 F1 | 	add	fp, #8
1061c     A7 14 02 FB | 	rdlong	arg02, fp
10620     34 4E 85 F1 | 	sub	fp, #52
10624     BC 98 B1 FD | 	call	#__system___float_mul
10628     FD 12 02 F6 | 	mov	arg01, result1
1062c     01 14 06 F6 | 	mov	arg02, #1
10630     78 9D B1 FD | 	call	#__system___float_tointeger
10634     0C 4E 05 F1 | 	add	fp, #12
10638     A7 FA 61 FC | 	wrlong	result1, fp
1063c     0C 4E 85 F1 | 	sub	fp, #12
10640     F8 BF 23 FF 
10644     00 28 06 F6 | 	mov	local02, ##1199566848
10648     A7 12 02 FB | 	rdlong	arg01, fp
1064c     09 13 52 F6 | 	abs	arg01, arg01 wc
10650     1F 2C C6 C9 |  if_b	decod	local04, #31
10654     00 2C 06 36 |  if_ae	mov	local04, #0
10658     84 94 B1 FD | 	call	#__system___float_fromuns
1065c     16 FB 61 F5 | 	xor	result1, local04
10660     FD 14 02 F6 | 	mov	arg02, result1
10664     14 13 02 F6 | 	mov	arg01, local02
10668     7C 9A B1 FD | 	call	#__system___float_div
1066c     38 4E 05 F1 | 	add	fp, #56
10670     A7 FA 61 FC | 	wrlong	result1, fp
10674     F8 BF 23 FF 
10678     00 28 06 F6 | 	mov	local02, ##1199566848
1067c     10 4E 85 F1 | 	sub	fp, #16
10680     A7 14 02 FB | 	rdlong	arg02, fp
10684     28 4E 85 F1 | 	sub	fp, #40
10688     F8 BF 23 FF 
1068c     00 12 06 F6 | 	mov	arg01, ##1199566848
10690     50 98 B1 FD | 	call	#__system___float_mul
10694     FD 14 02 F6 | 	mov	arg02, result1
10698     14 13 02 F6 | 	mov	arg01, local02
1069c     1F 14 E6 F4 | 	bitnot	arg02, #31
106a0     70 94 B1 FD | 	call	#__system___float_add
106a4     FD 28 02 F6 | 	mov	local02, result1
106a8     04 4E 05 F1 | 	add	fp, #4
106ac     A7 12 02 FB | 	rdlong	arg01, fp
106b0     04 4E 85 F1 | 	sub	fp, #4
106b4     09 13 52 F6 | 	abs	arg01, arg01 wc
106b8     1F 2C C6 C9 |  if_b	decod	local04, #31
106bc     00 2C 06 36 |  if_ae	mov	local04, #0
106c0     1C 94 B1 FD | 	call	#__system___float_fromuns
106c4     16 FB 61 F5 | 	xor	result1, local04
106c8     FD 14 02 F6 | 	mov	arg02, result1
106cc     14 13 02 F6 | 	mov	arg01, local02
106d0     14 9A B1 FD | 	call	#__system___float_div
106d4     24 4E 05 F1 | 	add	fp, #36
106d8     A7 FA 61 FC | 	wrlong	result1, fp
106dc     04 4E 05 F1 | 	add	fp, #4
106e0     A7 14 02 FB | 	rdlong	arg02, fp
106e4     28 4E 85 F1 | 	sub	fp, #40
106e8     F8 BF 23 FF 
106ec     00 12 06 F6 | 	mov	arg01, ##1199566848
106f0     F0 97 B1 FD | 	call	#__system___float_mul
106f4     FD 28 02 F6 | 	mov	local02, result1
106f8     0C 4E 05 F1 | 	add	fp, #12
106fc     A7 12 02 FB | 	rdlong	arg01, fp
10700     0C 4E 85 F1 | 	sub	fp, #12
10704     09 13 52 F6 | 	abs	arg01, arg01 wc
10708     1F 2C C6 C9 |  if_b	decod	local04, #31
1070c     00 2C 06 36 |  if_ae	mov	local04, #0
10710     CC 93 B1 FD | 	call	#__system___float_fromuns
10714     16 FB 61 F5 | 	xor	result1, local04
10718     FD 14 02 F6 | 	mov	arg02, result1
1071c     14 13 02 F6 | 	mov	arg01, local02
10720     C4 99 B1 FD | 	call	#__system___float_div
10724     3C 4E 05 F1 | 	add	fp, #60
10728     A7 FA 61 FC | 	wrlong	result1, fp
1072c     24 4E 85 F1 | 	sub	fp, #36
10730     A7 2E 02 FB | 	rdlong	local05, fp
10734     18 4E 85 F1 | 	sub	fp, #24
10738     01 2E 66 F0 | 	shl	local05, #1
1073c     52 00 00 FF 
10740     B4 E4 05 F1 | 	add	objptr, ##42164
10744     F2 2E 02 F1 | 	add	local05, objptr
10748     A7 30 02 FB | 	rdlong	local06, fp
1074c     04 4E 05 F1 | 	add	fp, #4
10750     A7 2A 02 FB | 	rdlong	local03, fp
10754     15 31 02 F1 | 	add	local06, local03
10758     17 31 52 FC | 	wrword	local06, local05
1075c     1C 4E 05 F1 | 	add	fp, #28
10760     A7 00 68 FC | 	wrlong	#0, fp
10764                 | '   fulltime=aa+dd+rr
10764                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10764                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10764                 | '   suspoints(channel)=a+d
10764                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10764     0C 4E 85 F1 | 	sub	fp, #12
10768     A7 00 68 FC | 	wrlong	#0, fp
1076c     14 4E 85 F1 | 	sub	fp, #20
10770     A7 32 02 FB | 	rdlong	local07, fp
10774     52 00 00 FF 
10778     B4 E4 85 F1 | 	sub	objptr, ##42164
1077c                 | LR__1344
1077c     14 4E 05 F1 | 	add	fp, #20
10780     A7 28 02 FB | 	rdlong	local02, fp
10784     14 4E 85 F1 | 	sub	fp, #20
10788     19 29 52 F2 | 	cmps	local02, local07 wc
1078c     80 00 90 3D |  if_ae	jmp	#LR__1345
10790     18 4E 05 F1 | 	add	fp, #24
10794     A7 30 02 FB | 	rdlong	local06, fp
10798     09 30 66 F0 | 	shl	local06, #9
1079c     0C 00 00 FF 
107a0     D8 E4 05 F1 | 	add	objptr, ##6360
107a4     F2 30 02 F1 | 	add	local06, objptr
107a8     04 4E 85 F1 | 	sub	fp, #4
107ac     A7 2E 02 FB | 	rdlong	local05, fp
107b0     01 2E 66 F0 | 	shl	local05, #1
107b4     18 2F 02 F1 | 	add	local05, local06
107b8     0C 4E 05 F1 | 	add	fp, #12
107bc     A7 12 02 FB | 	rdlong	arg01, fp
107c0     20 4E 85 F1 | 	sub	fp, #32
107c4     0C 00 00 FF 
107c8     D8 E4 85 F1 | 	sub	objptr, ##6360
107cc     01 14 06 F6 | 	mov	arg02, #1
107d0     D8 9B B1 FD | 	call	#__system___float_tointeger
107d4     17 FB 51 FC | 	wrword	result1, local05
107d8     20 4E 05 F1 | 	add	fp, #32
107dc     A7 12 02 FB | 	rdlong	arg01, fp
107e0     18 4E 05 F1 | 	add	fp, #24
107e4     A7 14 02 FB | 	rdlong	arg02, fp
107e8     38 4E 85 F1 | 	sub	fp, #56
107ec     24 93 B1 FD | 	call	#__system___float_add
107f0     20 4E 05 F1 | 	add	fp, #32
107f4     A7 FA 61 FC | 	wrlong	result1, fp
107f8     0C 4E 85 F1 | 	sub	fp, #12
107fc     A7 30 02 FB | 	rdlong	local06, fp
10800     01 30 06 F1 | 	add	local06, #1
10804     A7 30 62 FC | 	wrlong	local06, fp
10808     14 4E 85 F1 | 	sub	fp, #20
1080c     6C FF 9F FD | 	jmp	#LR__1344
10810                 | LR__1345
10810                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10810     A7 28 02 FB | 	rdlong	local02, fp
10814     14 4E 05 F1 | 	add	fp, #20
10818     A7 28 62 FC | 	wrlong	local02, fp
1081c     14 4E 85 F1 | 	sub	fp, #20
10820     A7 34 02 FB | 	rdlong	local08, fp
10824     04 4E 05 F1 | 	add	fp, #4
10828     A7 28 02 FB | 	rdlong	local02, fp
1082c     04 4E 85 F1 | 	sub	fp, #4
10830     14 35 02 F1 | 	add	local08, local02
10834                 | LR__1346
10834     14 4E 05 F1 | 	add	fp, #20
10838     A7 28 02 FB | 	rdlong	local02, fp
1083c     14 4E 85 F1 | 	sub	fp, #20
10840     1A 29 52 F2 | 	cmps	local02, local08 wc
10844     A8 00 90 3D |  if_ae	jmp	#LR__1347
10848     18 4E 05 F1 | 	add	fp, #24
1084c     A7 32 02 FB | 	rdlong	local07, fp
10850     09 32 66 F0 | 	shl	local07, #9
10854     0C 00 00 FF 
10858     D8 E4 05 F1 | 	add	objptr, ##6360
1085c     F2 32 02 F1 | 	add	local07, objptr
10860     04 4E 85 F1 | 	sub	fp, #4
10864     A7 30 02 FB | 	rdlong	local06, fp
10868     01 30 66 F0 | 	shl	local06, #1
1086c     19 31 02 F1 | 	add	local06, local07
10870     0C 4E 05 F1 | 	add	fp, #12
10874     A7 12 02 FB | 	rdlong	arg01, fp
10878     20 4E 85 F1 | 	sub	fp, #32
1087c     0C 00 00 FF 
10880     D8 E4 85 F1 | 	sub	objptr, ##6360
10884     01 14 06 F6 | 	mov	arg02, #1
10888     20 9B B1 FD | 	call	#__system___float_tointeger
1088c     18 FB 51 FC | 	wrword	result1, local06
10890     20 4E 05 F1 | 	add	fp, #32
10894     A7 12 02 FB | 	rdlong	arg01, fp
10898     04 4E 05 F1 | 	add	fp, #4
1089c     A7 14 02 FB | 	rdlong	arg02, fp
108a0     24 4E 85 F1 | 	sub	fp, #36
108a4     1F 14 E6 F4 | 	bitnot	arg02, #31
108a8     68 92 B1 FD | 	call	#__system___float_add
108ac     20 4E 05 F1 | 	add	fp, #32
108b0     A7 FA 61 FC | 	wrlong	result1, fp
108b4     20 4E 85 F1 | 	sub	fp, #32
108b8     FD 12 02 F6 | 	mov	arg01, result1
108bc     00 14 06 F6 | 	mov	arg02, #0
108c0     01 16 06 F6 | 	mov	arg03, #1
108c4     50 9A B1 FD | 	call	#__system___float_cmp
108c8     00 FA 55 F2 | 	cmps	result1, #0 wc
108cc     20 4E 05 C1 |  if_b	add	fp, #32
108d0     A7 00 68 CC |  if_b	wrlong	#0, fp
108d4     20 4E 85 C1 |  if_b	sub	fp, #32
108d8     14 4E 05 F1 | 	add	fp, #20
108dc     A7 32 02 FB | 	rdlong	local07, fp
108e0     01 32 06 F1 | 	add	local07, #1
108e4     A7 32 62 FC | 	wrlong	local07, fp
108e8     14 4E 85 F1 | 	sub	fp, #20
108ec     44 FF 9F FD | 	jmp	#LR__1346
108f0                 | LR__1347
108f0                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
108f0     A7 28 02 FB | 	rdlong	local02, fp
108f4     04 4E 05 F1 | 	add	fp, #4
108f8     A7 34 02 FB | 	rdlong	local08, fp
108fc     1A 29 02 F1 | 	add	local02, local08
10900     10 4E 05 F1 | 	add	fp, #16
10904     A7 28 62 FC | 	wrlong	local02, fp
10908     14 4E 85 F1 | 	sub	fp, #20
1090c                 | LR__1348
1090c     14 4E 05 F1 | 	add	fp, #20
10910     A7 2E 02 FB | 	rdlong	local05, fp
10914     14 4E 85 F1 | 	sub	fp, #20
10918     00 2F 56 F2 | 	cmps	local05, #256 wc
1091c     A8 00 90 3D |  if_ae	jmp	#LR__1349
10920     18 4E 05 F1 | 	add	fp, #24
10924     A7 34 02 FB | 	rdlong	local08, fp
10928     09 34 66 F0 | 	shl	local08, #9
1092c     0C 00 00 FF 
10930     D8 E4 05 F1 | 	add	objptr, ##6360
10934     F2 34 02 F1 | 	add	local08, objptr
10938     04 4E 85 F1 | 	sub	fp, #4
1093c     A7 32 02 FB | 	rdlong	local07, fp
10940     01 32 66 F0 | 	shl	local07, #1
10944     1A 33 02 F1 | 	add	local07, local08
10948     0C 4E 05 F1 | 	add	fp, #12
1094c     A7 12 02 FB | 	rdlong	arg01, fp
10950     20 4E 85 F1 | 	sub	fp, #32
10954     0C 00 00 FF 
10958     D8 E4 85 F1 | 	sub	objptr, ##6360
1095c     01 14 06 F6 | 	mov	arg02, #1
10960     48 9A B1 FD | 	call	#__system___float_tointeger
10964     19 FB 51 FC | 	wrword	result1, local07
10968     20 4E 05 F1 | 	add	fp, #32
1096c     A7 12 02 FB | 	rdlong	arg01, fp
10970     1C 4E 05 F1 | 	add	fp, #28
10974     A7 14 02 FB | 	rdlong	arg02, fp
10978     3C 4E 85 F1 | 	sub	fp, #60
1097c     1F 14 E6 F4 | 	bitnot	arg02, #31
10980     90 91 B1 FD | 	call	#__system___float_add
10984     20 4E 05 F1 | 	add	fp, #32
10988     A7 FA 61 FC | 	wrlong	result1, fp
1098c     20 4E 85 F1 | 	sub	fp, #32
10990     FD 12 02 F6 | 	mov	arg01, result1
10994     00 14 06 F6 | 	mov	arg02, #0
10998     01 16 06 F6 | 	mov	arg03, #1
1099c     78 99 B1 FD | 	call	#__system___float_cmp
109a0     00 FA 55 F2 | 	cmps	result1, #0 wc
109a4     20 4E 05 C1 |  if_b	add	fp, #32
109a8     A7 00 68 CC |  if_b	wrlong	#0, fp
109ac     20 4E 85 C1 |  if_b	sub	fp, #32
109b0     14 4E 05 F1 | 	add	fp, #20
109b4     A7 34 02 FB | 	rdlong	local08, fp
109b8     01 34 06 F1 | 	add	local08, #1
109bc     A7 34 62 FC | 	wrlong	local08, fp
109c0     14 4E 85 F1 | 	sub	fp, #20
109c4     44 FF 9F FD | 	jmp	#LR__1348
109c8                 | LR__1349
109c8     18 4E 05 F1 | 	add	fp, #24
109cc     A7 2E 02 FB | 	rdlong	local05, fp
109d0     18 4E 85 F1 | 	sub	fp, #24
109d4     09 2E 66 F0 | 	shl	local05, #9
109d8     0C 00 00 FF 
109dc     D8 E4 05 F1 | 	add	objptr, ##6360
109e0     F2 2E 02 F1 | 	add	local05, objptr
109e4     FE 2F 06 F1 | 	add	local05, #510
109e8     17 01 58 FC | 	wrword	#0, local05
109ec     0C 00 00 FF 
109f0     D8 E4 85 F1 | 	sub	objptr, ##6360
109f4                 | LR__1350
109f4     18 4E 05 F1 | 	add	fp, #24
109f8     A7 2E 02 FB | 	rdlong	local05, fp
109fc     18 4E 85 F1 | 	sub	fp, #24
10a00     09 2E 66 F0 | 	shl	local05, #9
10a04     0C 00 00 FF 
10a08     D8 E4 05 F1 | 	add	objptr, ##6360
10a0c     F2 2E 02 F1 | 	add	local05, objptr
10a10     FE 2F 06 F1 | 	add	local05, #510
10a14     17 01 58 FC | 	wrword	#0, local05
10a18     0C 00 00 FF 
10a1c     D8 E4 85 F1 | 	sub	objptr, ##6360
10a20                 | LR__1351
10a20     A7 F0 03 F6 | 	mov	ptra, fp
10a24     B2 00 A0 FD | 	call	#popregs_
10a28                 | _do_defenv_ret
10a28     2D 00 64 FD | 	ret
10a2c                 | 
10a2c                 | ' 
10a2c                 | ' '-------------------- defsnd
10a2c                 | ' 
10a2c                 | ' sub do_defsnd
10a2c                 | _do_defsnd
10a2c     04 4A 05 F6 | 	mov	COUNT_, #4
10a30     A8 00 A0 FD | 	call	#pushregs_
10a34     88 F0 07 F1 | 	add	ptra, #136
10a38     4A 00 00 FF 
10a3c     80 E4 05 F1 | 	add	objptr, ##38016
10a40     F2 1A 02 FB | 	rdlong	arg05, objptr
10a44     0D 19 02 F6 | 	mov	arg04, arg05
10a48     01 18 66 F0 | 	shl	arg04, #1
10a4c     0D 19 02 F1 | 	add	arg04, arg05
10a50     02 18 66 F0 | 	shl	arg04, #2
10a54     03 00 00 FF 
10a58     04 E4 85 F1 | 	sub	objptr, ##1540
10a5c     F2 18 02 F1 | 	add	arg04, objptr
10a60     0C 1B 02 FB | 	rdlong	arg05, arg04
10a64     A7 1A 62 FC | 	wrlong	arg05, fp
10a68                 | ' 
10a68                 | ' numpar=compiledline(lineptr_e).result.uresult
10a68                 | ' 
10a68                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10a68                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10a68                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10a68                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10a68                 | ' 
10a68                 | ' if numpar<2 then return
10a68     02 1A 56 F2 | 	cmps	arg05, #2 wc
10a6c     47 00 00 FF 
10a70     7C E4 85 F1 | 	sub	objptr, ##36476
10a74     94 08 90 CD |  if_b	jmp	#LR__1383
10a78                 | '  
10a78                 | ' if numpar=2 then
10a78     A7 1A 02 FB | 	rdlong	arg05, fp
10a7c     02 1A 0E F2 | 	cmp	arg05, #2 wz
10a80     A0 03 90 5D |  if_ne	jmp	#LR__1370
10a84     80 CC BF FD | 	call	#_pop
10a88     FF 1A 02 F6 | 	mov	arg05, result3
10a8c     2C 4E 05 F1 | 	add	fp, #44
10a90     A7 FA 61 FC | 	wrlong	result1, fp
10a94     04 4E 05 F1 | 	add	fp, #4
10a98     A7 FC 61 FC | 	wrlong	result2, fp
10a9c     04 4E 05 F1 | 	add	fp, #4
10aa0     A7 1A 62 FC | 	wrlong	arg05, fp
10aa4                 | '   t1=pop()
10aa4                 | '   if t1.result_type=result_string2 then 
10aa4     34 4E 85 F1 | 	sub	fp, #52
10aa8     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10aac     20 00 90 5D |  if_ne	jmp	#LR__1360
10ab0     2C 4E 05 F1 | 	add	fp, #44
10ab4     A7 12 02 FB | 	rdlong	arg01, fp
10ab8     2C 4E 85 F1 | 	sub	fp, #44
10abc     C0 CD BF FD | 	call	#_convertstring
10ac0     38 4E 05 F1 | 	add	fp, #56
10ac4     A7 FA 61 FC | 	wrlong	result1, fp
10ac8     38 4E 85 F1 | 	sub	fp, #56
10acc     58 00 90 FD | 	jmp	#LR__1363
10ad0                 | LR__1360
10ad0     34 4E 05 F1 | 	add	fp, #52
10ad4     A7 1A 02 FB | 	rdlong	arg05, fp
10ad8     34 4E 85 F1 | 	sub	fp, #52
10adc     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10ae0     18 00 90 5D |  if_ne	jmp	#LR__1361
10ae4     2C 4E 05 F1 | 	add	fp, #44
10ae8     A7 1A 02 FB | 	rdlong	arg05, fp
10aec     0C 4E 05 F1 | 	add	fp, #12
10af0     A7 1A 62 FC | 	wrlong	arg05, fp
10af4     38 4E 85 F1 | 	sub	fp, #56
10af8     2C 00 90 FD | 	jmp	#LR__1362
10afc                 | LR__1361
10afc     BA 01 00 FF 
10b00     98 1A 06 F6 | 	mov	arg05, ##@LR__5939
10b04     38 4E 05 F1 | 	add	fp, #56
10b08     A7 1A 62 FC | 	wrlong	arg05, fp
10b0c     0C 4E 85 F1 | 	sub	fp, #12
10b10     A7 12 02 F6 | 	mov	arg01, fp
10b14     2C 4E 85 F1 | 	sub	fp, #44
10b18     D0 CD BF FD | 	call	#_converttoint
10b1c     14 4E 05 F1 | 	add	fp, #20
10b20     A7 FA 61 FC | 	wrlong	result1, fp
10b24     14 4E 85 F1 | 	sub	fp, #20
10b28                 | LR__1362
10b28                 | LR__1363
10b28                 | '   if s<>"" then 
10b28     38 4E 05 F1 | 	add	fp, #56
10b2c     A7 12 02 FB | 	rdlong	arg01, fp
10b30     38 4E 85 F1 | 	sub	fp, #56
10b34     BA 01 00 FF 
10b38     99 14 06 F6 | 	mov	arg02, ##@LR__5940
10b3c     54 65 B1 FD | 	call	#__system___string_cmp
10b40     00 FA 0D F2 | 	cmp	result1, #0 wz
10b44     E0 01 90 AD |  if_e	jmp	#LR__1366
10b48     BC CB BF FD | 	call	#_pop
10b4c     FF 1A 02 F6 | 	mov	arg05, result3
10b50     2C 4E 05 F1 | 	add	fp, #44
10b54     A7 FA 61 FC | 	wrlong	result1, fp
10b58     04 4E 05 F1 | 	add	fp, #4
10b5c     A7 FC 61 FC | 	wrlong	result2, fp
10b60     04 4E 05 F1 | 	add	fp, #4
10b64     A7 1A 62 FC | 	wrlong	arg05, fp
10b68     08 4E 85 F1 | 	sub	fp, #8
10b6c     A7 12 02 F6 | 	mov	arg01, fp
10b70     2C 4E 85 F1 | 	sub	fp, #44
10b74     74 CD BF FD | 	call	#_converttoint
10b78     10 4E 05 F1 | 	add	fp, #16
10b7c     A7 FA 61 FC | 	wrlong	result1, fp
10b80                 | '     t1=pop()
10b80                 | '     channel=converttoint(t1) : if channel>31 then return
10b80     FD 1A 02 F6 | 	mov	arg05, result1
10b84     10 4E 85 F1 | 	sub	fp, #16
10b88     20 1A 56 F2 | 	cmps	arg05, #32 wc
10b8c     7C 07 90 3D |  if_ae	jmp	#LR__1383
10b90                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10b90     09 12 06 F6 | 	mov	arg01, #9
10b94     2C B8 B1 FD | 	call	#__system__close
10b98     09 26 06 F6 | 	mov	local01, #9
10b9c     BA 01 00 FF 
10ba0     9A 12 06 F6 | 	mov	arg01, ##@LR__5941
10ba4     38 4E 05 F1 | 	add	fp, #56
10ba8     A7 14 02 FB | 	rdlong	arg02, fp
10bac     38 4E 85 F1 | 	sub	fp, #56
10bb0     14 65 B1 FD | 	call	#__system___string_concat
10bb4     FD 14 02 F6 | 	mov	arg02, result1
10bb8     13 13 02 F6 | 	mov	arg01, local01
10bbc     00 16 06 F6 | 	mov	arg03, #0
10bc0     AC 70 B1 FD | 	call	#__system___basic_open_string
10bc4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10bc8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10bcc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10bd0     52 00 00 FF 
10bd4     10 E5 05 F1 | 	add	objptr, ##42256
10bd8     F2 FA 61 FC | 	wrlong	result1, objptr
10bdc                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10bdc     52 00 00 FF 
10be0     10 E5 85 F1 | 	sub	objptr, ##42256
10be4     B0 00 90 AD |  if_e	jmp	#LR__1364
10be8     00 12 06 F6 | 	mov	arg01, #0
10bec     A4 C1 B1 FD | 	call	#__system___getiolock_0616
10bf0     FD 12 02 F6 | 	mov	arg01, result1
10bf4     74 64 B1 FD | 	call	#__system___lockmem
10bf8     BA 01 00 FF 
10bfc     A7 14 06 F6 | 	mov	arg02, ##@LR__5942
10c00     00 12 06 F6 | 	mov	arg01, #0
10c04     00 16 06 F6 | 	mov	arg03, #0
10c08     54 71 B1 FD | 	call	#__system___basic_print_string
10c0c     52 00 00 FF 
10c10     10 E5 05 F1 | 	add	objptr, ##42256
10c14     F2 14 02 FB | 	rdlong	arg02, objptr
10c18     52 00 00 FF 
10c1c     10 E5 85 F1 | 	sub	objptr, ##42256
10c20     00 12 06 F6 | 	mov	arg01, #0
10c24     00 16 06 F6 | 	mov	arg03, #0
10c28     0A 18 06 F6 | 	mov	arg04, #10
10c2c     74 71 B1 FD | 	call	#__system___basic_print_integer
10c30     BA 01 00 FF 
10c34     B5 14 06 F6 | 	mov	arg02, ##@LR__5943
10c38     00 12 06 F6 | 	mov	arg01, #0
10c3c     00 16 06 F6 | 	mov	arg03, #0
10c40     1C 71 B1 FD | 	call	#__system___basic_print_string
10c44     00 26 06 F6 | 	mov	local01, #0
10c48     52 00 00 FF 
10c4c     10 E5 05 F1 | 	add	objptr, ##42256
10c50     F2 12 02 FB | 	rdlong	arg01, objptr
10c54     52 00 00 FF 
10c58     10 E5 85 F1 | 	sub	objptr, ##42256
10c5c     98 8D B1 FD | 	call	#__system___strerror
10c60     FD 14 02 F6 | 	mov	arg02, result1
10c64     13 13 02 F6 | 	mov	arg01, local01
10c68     00 16 06 F6 | 	mov	arg03, #0
10c6c     F0 70 B1 FD | 	call	#__system___basic_print_string
10c70     00 12 06 F6 | 	mov	arg01, #0
10c74     0A 14 06 F6 | 	mov	arg02, #10
10c78     00 16 06 F6 | 	mov	arg03, #0
10c7c     88 70 B1 FD | 	call	#__system___basic_print_char
10c80     00 12 06 F6 | 	mov	arg01, #0
10c84     0C C1 B1 FD | 	call	#__system___getiolock_0616
10c88     FD 00 68 FC | 	wrlong	#0, result1
10c8c     09 12 06 F6 | 	mov	arg01, #9
10c90     30 B7 B1 FD | 	call	#__system__close
10c94     74 06 90 FD | 	jmp	#LR__1383
10c98                 | LR__1364
10c98                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10c98     04 4E 05 F1 | 	add	fp, #4
10c9c     A7 00 68 FC | 	wrlong	#0, fp
10ca0                 | LR__1365
10ca0     A7 26 02 FB | 	rdlong	local01, fp
10ca4     01 26 66 F0 | 	shl	local01, #1
10ca8     11 14 06 F6 | 	mov	arg02, #17
10cac     13 15 02 F1 | 	add	arg02, local01
10cb0     78 4E 05 F1 | 	add	fp, #120
10cb4     A7 16 02 F6 | 	mov	arg03, fp
10cb8     7C 4E 85 F1 | 	sub	fp, #124
10cbc     09 12 06 F6 | 	mov	arg01, #9
10cc0     01 18 06 F6 | 	mov	arg04, #1
10cc4     02 1A 06 F6 | 	mov	arg05, #2
10cc8     10 72 B1 FD | 	call	#__system___basic_get
10ccc     10 4E 05 F1 | 	add	fp, #16
10cd0     A7 12 02 FB | 	rdlong	arg01, fp
10cd4     0B 12 66 F0 | 	shl	arg01, #11
10cd8     0C 4E 85 F1 | 	sub	fp, #12
10cdc     A7 26 02 FB | 	rdlong	local01, fp
10ce0     01 26 66 F0 | 	shl	local01, #1
10ce4     13 13 02 F1 | 	add	arg01, local01
10ce8     78 4E 05 F1 | 	add	fp, #120
10cec     A7 14 E2 FA | 	rdword	arg02, fp
10cf0     7C 4E 85 F1 | 	sub	fp, #124
10cf4     0F 14 66 F7 | 	signx	arg02, #15
10cf8     AC 2A B1 FD | 	call	#_psdpoke
10cfc     04 4E 05 F1 | 	add	fp, #4
10d00     A7 26 02 FB | 	rdlong	local01, fp
10d04     01 26 06 F1 | 	add	local01, #1
10d08     A7 26 62 FC | 	wrlong	local01, fp
10d0c     02 00 00 FF 
10d10     01 26 56 F2 | 	cmps	local01, ##1025 wc
10d14     88 FF 9F CD |  if_b	jmp	#LR__1365
10d18     04 4E 85 F1 | 	sub	fp, #4
10d1c                 | '     close #9
10d1c     09 12 06 F6 | 	mov	arg01, #9
10d20     A0 B6 B1 FD | 	call	#__system__close
10d24                 | '     return
10d24     E4 05 90 FD | 	jmp	#LR__1383
10d28                 | LR__1366
10d28                 | '     if wptr < ($80000 - 2048) then 
10d28     14 4E 05 F1 | 	add	fp, #20
10d2c     A7 26 02 FB | 	rdlong	local01, fp
10d30     14 4E 85 F1 | 	sub	fp, #20
10d34     FC 03 00 FF 
10d38     00 26 56 F2 | 	cmps	local01, ##522240 wc
10d3c     70 00 90 3D |  if_ae	jmp	#LR__1368
10d40                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10d40     04 4E 05 F1 | 	add	fp, #4
10d44     A7 00 68 FC | 	wrlong	#0, fp
10d48     04 4E 85 F1 | 	sub	fp, #4
10d4c                 | LR__1367
10d4c     10 4E 05 F1 | 	add	fp, #16
10d50     A7 26 02 FB | 	rdlong	local01, fp
10d54     0B 26 66 F0 | 	shl	local01, #11
10d58     0C 4E 85 F1 | 	sub	fp, #12
10d5c     A7 1A 02 FB | 	rdlong	arg05, fp
10d60     0D 19 02 F6 | 	mov	arg04, arg05
10d64     01 18 66 F0 | 	shl	arg04, #1
10d68     0C 27 02 F1 | 	add	local01, arg04
10d6c     10 4E 05 F1 | 	add	fp, #16
10d70     A7 12 02 FB | 	rdlong	arg01, fp
10d74     14 4E 85 F1 | 	sub	fp, #20
10d78     01 1A 66 F0 | 	shl	arg05, #1
10d7c     0D 13 02 F1 | 	add	arg01, arg05
10d80     09 15 E2 FA | 	rdword	arg02, arg01
10d84     13 13 02 F6 | 	mov	arg01, local01
10d88     1C 2A B1 FD | 	call	#_psdpoke
10d8c     04 4E 05 F1 | 	add	fp, #4
10d90     A7 26 02 FB | 	rdlong	local01, fp
10d94     01 26 06 F1 | 	add	local01, #1
10d98     A7 26 62 FC | 	wrlong	local01, fp
10d9c     04 4E 85 F1 | 	sub	fp, #4
10da0     02 00 00 FF 
10da4     00 26 56 F2 | 	cmps	local01, ##1024 wc
10da8     A0 FF 9F CD |  if_b	jmp	#LR__1367
10dac     5C 05 90 FD | 	jmp	#LR__1383
10db0                 | LR__1368
10db0                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10db0     04 4E 05 F1 | 	add	fp, #4
10db4     A7 00 68 FC | 	wrlong	#0, fp
10db8     04 4E 85 F1 | 	sub	fp, #4
10dbc                 | LR__1369
10dbc     10 4E 05 F1 | 	add	fp, #16
10dc0     A7 26 02 FB | 	rdlong	local01, fp
10dc4     0B 26 66 F0 | 	shl	local01, #11
10dc8     0C 4E 85 F1 | 	sub	fp, #12
10dcc     A7 1A 02 FB | 	rdlong	arg05, fp
10dd0     0D 19 02 F6 | 	mov	arg04, arg05
10dd4     01 18 66 F0 | 	shl	arg04, #1
10dd8     0C 27 02 F1 | 	add	local01, arg04
10ddc     10 4E 05 F1 | 	add	fp, #16
10de0     A7 12 02 FB | 	rdlong	arg01, fp
10de4     14 4E 85 F1 | 	sub	fp, #20
10de8     01 1A 66 F0 | 	shl	arg05, #1
10dec     0D 13 02 F1 | 	add	arg01, arg05
10df0     F4 2A B1 FD | 	call	#_psdpeek
10df4     FD 14 02 F6 | 	mov	arg02, result1
10df8     13 13 02 F6 | 	mov	arg01, local01
10dfc     A8 29 B1 FD | 	call	#_psdpoke
10e00     04 4E 05 F1 | 	add	fp, #4
10e04     A7 26 02 FB | 	rdlong	local01, fp
10e08     01 26 06 F1 | 	add	local01, #1
10e0c     A7 26 62 FC | 	wrlong	local01, fp
10e10     04 4E 85 F1 | 	sub	fp, #4
10e14     02 00 00 FF 
10e18     00 26 56 F2 | 	cmps	local01, ##1024 wc
10e1c     9C FF 9F CD |  if_b	jmp	#LR__1369
10e20                 | '     return 
10e20     E8 04 90 FD | 	jmp	#LR__1383
10e24                 | '   return
10e24                 | LR__1370
10e24                 | ' for i=0 to 15 : harm(i)=0: next i  
10e24     04 4E 05 F1 | 	add	fp, #4
10e28     A7 00 68 FC | 	wrlong	#0, fp
10e2c     97 16 48 FB | 	callpa	#(@LR__1372-@LR__1371)>>2,fcache_load_ptr_
10e30                 | LR__1371
10e30     A7 26 02 FB | 	rdlong	local01, fp
10e34     02 26 66 F0 | 	shl	local01, #2
10e38     38 4E 05 F1 | 	add	fp, #56
10e3c     A7 26 02 F1 | 	add	local01, fp
10e40     13 01 68 FC | 	wrlong	#0, local01
10e44     38 4E 85 F1 | 	sub	fp, #56
10e48     A7 26 02 FB | 	rdlong	local01, fp
10e4c     01 26 06 F1 | 	add	local01, #1
10e50     A7 26 62 FC | 	wrlong	local01, fp
10e54     10 26 56 F2 | 	cmps	local01, #16 wc
10e58     D4 FF 9F CD |  if_b	jmp	#LR__1371
10e5c                 | LR__1372
10e5c     04 4E 85 F1 | 	sub	fp, #4
10e60                 | ' for i=numpar to 2 step -1 
10e60     A7 26 02 FB | 	rdlong	local01, fp
10e64     04 4E 05 F1 | 	add	fp, #4
10e68     A7 26 62 FC | 	wrlong	local01, fp
10e6c     04 4E 85 F1 | 	sub	fp, #4
10e70                 | LR__1373
10e70     94 C8 BF FD | 	call	#_pop
10e74     2C 4E 05 F1 | 	add	fp, #44
10e78     A7 FA 61 FC | 	wrlong	result1, fp
10e7c     04 4E 05 F1 | 	add	fp, #4
10e80     A7 FC 61 FC | 	wrlong	result2, fp
10e84     04 4E 05 F1 | 	add	fp, #4
10e88     A7 FE 61 FC | 	wrlong	result3, fp
10e8c     30 4E 85 F1 | 	sub	fp, #48
10e90     A7 26 02 FB | 	rdlong	local01, fp
10e94     02 26 86 F1 | 	sub	local01, #2
10e98     02 26 66 F0 | 	shl	local01, #2
10e9c     38 4E 05 F1 | 	add	fp, #56
10ea0     A7 26 02 F1 | 	add	local01, fp
10ea4     10 4E 85 F1 | 	sub	fp, #16
10ea8     A7 12 02 F6 | 	mov	arg01, fp
10eac     2C 4E 85 F1 | 	sub	fp, #44
10eb0     F4 CA BF FD | 	call	#_converttofloat
10eb4     13 FB 61 FC | 	wrlong	result1, local01
10eb8     04 4E 05 F1 | 	add	fp, #4
10ebc     A7 26 02 FB | 	rdlong	local01, fp
10ec0     01 26 86 F1 | 	sub	local01, #1
10ec4     A7 26 62 FC | 	wrlong	local01, fp
10ec8     04 4E 85 F1 | 	sub	fp, #4
10ecc     02 26 56 F2 | 	cmps	local01, #2 wc
10ed0     9C FF 9F 3D |  if_ae	jmp	#LR__1373
10ed4     30 C8 BF FD | 	call	#_pop
10ed8     FF 26 02 F6 | 	mov	local01, result3
10edc     2C 4E 05 F1 | 	add	fp, #44
10ee0     A7 FA 61 FC | 	wrlong	result1, fp
10ee4     04 4E 05 F1 | 	add	fp, #4
10ee8     A7 FC 61 FC | 	wrlong	result2, fp
10eec     04 4E 05 F1 | 	add	fp, #4
10ef0     A7 26 62 FC | 	wrlong	local01, fp
10ef4     08 4E 85 F1 | 	sub	fp, #8
10ef8     A7 12 02 F6 | 	mov	arg01, fp
10efc     2C 4E 85 F1 | 	sub	fp, #44
10f00     E8 C9 BF FD | 	call	#_converttoint
10f04     10 4E 05 F1 | 	add	fp, #16
10f08     A7 FA 61 FC | 	wrlong	result1, fp
10f0c                 | ' t1=pop()
10f0c                 | ' channel=converttoint(t1) : : if channel>31 then return
10f0c     FD 26 02 F6 | 	mov	local01, result1
10f10     10 4E 85 F1 | 	sub	fp, #16
10f14     20 26 56 F2 | 	cmps	local01, #32 wc
10f18     F0 03 90 3D |  if_ae	jmp	#LR__1383
10f1c     20 4E 05 F1 | 	add	fp, #32
10f20     A7 00 68 FC | 	wrlong	#0, fp
10f24                 | ' max=0
10f24                 | ' if harm(0)<0 then
10f24     1C 4E 05 F1 | 	add	fp, #28
10f28     A7 12 02 FB | 	rdlong	arg01, fp
10f2c     3C 4E 85 F1 | 	sub	fp, #60
10f30     00 14 06 F6 | 	mov	arg02, #0
10f34     01 16 06 F6 | 	mov	arg03, #1
10f38     DC 93 B1 FD | 	call	#__system___float_cmp
10f3c     00 FA 55 F2 | 	cmps	result1, #0 wc
10f40     04 01 90 3D |  if_ae	jmp	#LR__1376
10f44     3C 4E 05 F1 | 	add	fp, #60
10f48     A7 FA 01 FB | 	rdlong	result1, fp
10f4c     1F FA 05 F4 | 	bitl	result1, #31
10f50     24 4E 85 F1 | 	sub	fp, #36
10f54     A7 FA 61 FC | 	wrlong	result1, fp
10f58     28 4E 05 F1 | 	add	fp, #40
10f5c     A7 FA 01 FB | 	rdlong	result1, fp
10f60     1F FA 05 F4 | 	bitl	result1, #31
10f64     24 4E 85 F1 | 	sub	fp, #36
10f68     A7 FA 61 FC | 	wrlong	result1, fp
10f6c     20 4E 05 F1 | 	add	fp, #32
10f70     00 C0 9F FF 
10f74     A7 00 68 FC | 	wrlong	##1065353216, fp
10f78     24 4E 85 F1 | 	sub	fp, #36
10f7c     A7 26 02 FB | 	rdlong	local01, fp
10f80     28 4E 05 F1 | 	add	fp, #40
10f84     A7 26 62 FC | 	wrlong	local01, fp
10f88     24 4E 85 F1 | 	sub	fp, #36
10f8c     A7 26 02 FB | 	rdlong	local01, fp
10f90     28 4E 05 F1 | 	add	fp, #40
10f94     A7 26 62 FC | 	wrlong	local01, fp
10f98                 | '   harm(0)=1
10f98                 | '   harm(1)=even
10f98                 | '   harm(2)=odd
10f98                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10f98     40 4E 85 F1 | 	sub	fp, #64
10f9c     A7 06 68 FC | 	wrlong	#3, fp
10fa0                 | LR__1374
10fa0     A7 1A 02 FB | 	rdlong	arg05, fp
10fa4     0D 29 02 F6 | 	mov	local02, arg05
10fa8     02 28 66 F0 | 	shl	local02, #2
10fac     38 4E 05 F1 | 	add	fp, #56
10fb0     A7 28 02 F1 | 	add	local02, fp
10fb4     02 1A 86 F1 | 	sub	arg05, #2
10fb8     02 1A 66 F0 | 	shl	arg05, #2
10fbc     A7 1A 02 F1 | 	add	arg05, fp
10fc0     0D 13 02 FB | 	rdlong	arg01, arg05
10fc4     24 4E 85 F1 | 	sub	fp, #36
10fc8     A7 14 02 FB | 	rdlong	arg02, fp
10fcc     18 4E 85 F1 | 	sub	fp, #24
10fd0     10 8F B1 FD | 	call	#__system___float_mul
10fd4     14 FB 61 FC | 	wrlong	result1, local02
10fd8     04 4E 05 F1 | 	add	fp, #4
10fdc     A7 2A 02 FB | 	rdlong	local03, fp
10fe0     02 2A 06 F1 | 	add	local03, #2
10fe4     A7 2A 62 FC | 	wrlong	local03, fp
10fe8     10 2A 56 F2 | 	cmps	local03, #16 wc
10fec     B0 FF 9F CD |  if_b	jmp	#LR__1374
10ff0                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10ff0     A7 08 68 FC | 	wrlong	#4, fp
10ff4                 | LR__1375
10ff4     A7 2A 02 FB | 	rdlong	local03, fp
10ff8     15 29 02 F6 | 	mov	local02, local03
10ffc     02 28 66 F0 | 	shl	local02, #2
11000     38 4E 05 F1 | 	add	fp, #56
11004     A7 28 02 F1 | 	add	local02, fp
11008     02 2A 86 F1 | 	sub	local03, #2
1100c     02 2A 66 F0 | 	shl	local03, #2
11010     A7 2A 02 F1 | 	add	local03, fp
11014     15 13 02 FB | 	rdlong	arg01, local03
11018     20 4E 85 F1 | 	sub	fp, #32
1101c     A7 14 02 FB | 	rdlong	arg02, fp
11020     1C 4E 85 F1 | 	sub	fp, #28
11024     BC 8E B1 FD | 	call	#__system___float_mul
11028     14 FB 61 FC | 	wrlong	result1, local02
1102c     04 4E 05 F1 | 	add	fp, #4
11030     A7 2A 02 FB | 	rdlong	local03, fp
11034     02 2A 06 F1 | 	add	local03, #2
11038     A7 2A 62 FC | 	wrlong	local03, fp
1103c     0F 2A 56 F2 | 	cmps	local03, #15 wc
11040     B0 FF 9F CD |  if_b	jmp	#LR__1375
11044     04 4E 85 F1 | 	sub	fp, #4
11048                 | LR__1376
11048                 | ' if harm(0)>=0 then ' synthesize with harmonics
11048     3C 4E 05 F1 | 	add	fp, #60
1104c     A7 12 02 FB | 	rdlong	arg01, fp
11050     3C 4E 85 F1 | 	sub	fp, #60
11054     00 14 06 F6 | 	mov	arg02, #0
11058     01 16 66 F6 | 	neg	arg03, #1
1105c     B8 92 B1 FD | 	call	#__system___float_cmp
11060     00 FA 55 F2 | 	cmps	result1, #0 wc
11064     A4 02 90 CD |  if_b	jmp	#LR__1382
11068                 | '   for i=0 to 1023
11068     04 4E 05 F1 | 	add	fp, #4
1106c     A7 00 68 FC | 	wrlong	#0, fp
11070     04 4E 85 F1 | 	sub	fp, #4
11074                 | LR__1377
11074     24 4E 05 F1 | 	add	fp, #36
11078     A7 00 68 FC | 	wrlong	#0, fp
1107c                 | '     spl=0
1107c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
1107c     1C 4E 85 F1 | 	sub	fp, #28
11080     A7 00 68 FC | 	wrlong	#0, fp
11084                 | LR__1378
11084     A7 28 02 FB | 	rdlong	local02, fp
11088     02 28 66 F0 | 	shl	local02, #2
1108c     34 4E 05 F1 | 	add	fp, #52
11090     A7 28 02 F1 | 	add	local02, fp
11094     14 2B 02 FB | 	rdlong	local03, local02
11098     87 E4 1D FF 
1109c     DB 29 06 F6 | 	mov	local02, ##1003032539
110a0     38 4E 85 F1 | 	sub	fp, #56
110a4     A7 12 02 FB | 	rdlong	arg01, fp
110a8     04 4E 85 F1 | 	sub	fp, #4
110ac     09 13 52 F6 | 	abs	arg01, arg01 wc
110b0     1F 2C C6 C9 |  if_b	decod	local04, #31
110b4     00 2C 06 36 |  if_ae	mov	local04, #0
110b8     24 8A B1 FD | 	call	#__system___float_fromuns
110bc     16 FB 61 F5 | 	xor	result1, local04
110c0     FD 14 02 F6 | 	mov	arg02, result1
110c4     14 13 02 F6 | 	mov	arg01, local02
110c8     18 8E B1 FD | 	call	#__system___float_mul
110cc     FD 28 02 F6 | 	mov	local02, result1
110d0     08 4E 05 F1 | 	add	fp, #8
110d4     A7 12 02 FB | 	rdlong	arg01, fp
110d8     08 4E 85 F1 | 	sub	fp, #8
110dc     01 12 06 F1 | 	add	arg01, #1
110e0     09 13 52 F6 | 	abs	arg01, arg01 wc
110e4     1F 2C C6 C9 |  if_b	decod	local04, #31
110e8     00 2C 06 36 |  if_ae	mov	local04, #0
110ec     F0 89 B1 FD | 	call	#__system___float_fromuns
110f0     16 FB 61 F5 | 	xor	result1, local04
110f4     FD 14 02 F6 | 	mov	arg02, result1
110f8     14 13 02 F6 | 	mov	arg01, local02
110fc     E4 8D B1 FD | 	call	#__system___float_mul
11100     FD 12 02 F6 | 	mov	arg01, result1
11104     3C 97 B1 FD | 	call	#__system____builtin_sinf
11108     FD 14 02 F6 | 	mov	arg02, result1
1110c     15 13 02 F6 | 	mov	arg01, local03
11110     D0 8D B1 FD | 	call	#__system___float_mul
11114     FD 14 02 F6 | 	mov	arg02, result1
11118     24 4E 05 F1 | 	add	fp, #36
1111c     A7 12 02 FB | 	rdlong	arg01, fp
11120     24 4E 85 F1 | 	sub	fp, #36
11124     EC 89 B1 FD | 	call	#__system___float_add
11128     24 4E 05 F1 | 	add	fp, #36
1112c     A7 FA 61 FC | 	wrlong	result1, fp
11130     1C 4E 85 F1 | 	sub	fp, #28
11134     A7 16 02 FB | 	rdlong	arg03, fp
11138     01 16 06 F1 | 	add	arg03, #1
1113c     A7 16 62 FC | 	wrlong	arg03, fp
11140     10 16 56 F2 | 	cmps	arg03, #16 wc
11144     3C FF 9F CD |  if_b	jmp	#LR__1378
11148                 | '     if abs(spl)>max then max=abs(spl)  
11148     1C 4E 05 F1 | 	add	fp, #28
1114c     A7 12 02 FB | 	rdlong	arg01, fp
11150     1F 12 06 F4 | 	bitl	arg01, #31
11154     04 4E 85 F1 | 	sub	fp, #4
11158     A7 14 02 FB | 	rdlong	arg02, fp
1115c     20 4E 85 F1 | 	sub	fp, #32
11160     01 16 66 F6 | 	neg	arg03, #1
11164     B0 91 B1 FD | 	call	#__system___float_cmp
11168     01 FA 55 F2 | 	cmps	result1, #1 wc
1116c     18 00 90 CD |  if_b	jmp	#LR__1379
11170     24 4E 05 F1 | 	add	fp, #36
11174     A7 FA 01 FB | 	rdlong	result1, fp
11178     1F FA 05 F4 | 	bitl	result1, #31
1117c     04 4E 85 F1 | 	sub	fp, #4
11180     A7 FA 61 FC | 	wrlong	result1, fp
11184     20 4E 85 F1 | 	sub	fp, #32
11188                 | LR__1379
11188     04 4E 05 F1 | 	add	fp, #4
1118c     A7 2A 02 FB | 	rdlong	local03, fp
11190     01 2A 06 F1 | 	add	local03, #1
11194     A7 2A 62 FC | 	wrlong	local03, fp
11198     04 4E 85 F1 | 	sub	fp, #4
1119c     02 00 00 FF 
111a0     00 2A 56 F2 | 	cmps	local03, ##1024 wc
111a4     CC FE 9F CD |  if_b	jmp	#LR__1377
111a8                 | '   for i=0 to 1023
111a8     04 4E 05 F1 | 	add	fp, #4
111ac     A7 00 68 FC | 	wrlong	#0, fp
111b0     04 4E 85 F1 | 	sub	fp, #4
111b4                 | LR__1380
111b4     24 4E 05 F1 | 	add	fp, #36
111b8     A7 00 68 FC | 	wrlong	#0, fp
111bc                 | '     spl=0
111bc                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
111bc     1C 4E 85 F1 | 	sub	fp, #28
111c0     A7 00 68 FC | 	wrlong	#0, fp
111c4                 | LR__1381
111c4     A7 2A 02 FB | 	rdlong	local03, fp
111c8     02 2A 66 F0 | 	shl	local03, #2
111cc     34 4E 05 F1 | 	add	fp, #52
111d0     A7 2A 02 F1 | 	add	local03, fp
111d4     15 2B 02 FB | 	rdlong	local03, local03
111d8     1C 4E 85 F1 | 	sub	fp, #28
111dc     A7 14 02 FB | 	rdlong	arg02, fp
111e0     20 4E 85 F1 | 	sub	fp, #32
111e4     58 7F 23 FF 
111e8     00 12 06 F6 | 	mov	arg01, ##1191096320
111ec     F8 8E B1 FD | 	call	#__system___float_div
111f0     FD 14 02 F6 | 	mov	arg02, result1
111f4     15 13 02 F6 | 	mov	arg01, local03
111f8     E8 8C B1 FD | 	call	#__system___float_mul
111fc     FD 2A 02 F6 | 	mov	local03, result1
11200     87 E4 1D FF 
11204     DB 29 06 F6 | 	mov	local02, ##1003032539
11208     04 4E 05 F1 | 	add	fp, #4
1120c     A7 12 02 FB | 	rdlong	arg01, fp
11210     04 4E 85 F1 | 	sub	fp, #4
11214     09 13 52 F6 | 	abs	arg01, arg01 wc
11218     1F 2C C6 C9 |  if_b	decod	local04, #31
1121c     00 2C 06 36 |  if_ae	mov	local04, #0
11220     BC 88 B1 FD | 	call	#__system___float_fromuns
11224     16 FB 61 F5 | 	xor	result1, local04
11228     FD 14 02 F6 | 	mov	arg02, result1
1122c     14 13 02 F6 | 	mov	arg01, local02
11230     B0 8C B1 FD | 	call	#__system___float_mul
11234     FD 28 02 F6 | 	mov	local02, result1
11238     08 4E 05 F1 | 	add	fp, #8
1123c     A7 12 02 FB | 	rdlong	arg01, fp
11240     08 4E 85 F1 | 	sub	fp, #8
11244     01 12 06 F1 | 	add	arg01, #1
11248     09 13 52 F6 | 	abs	arg01, arg01 wc
1124c     1F 2C C6 C9 |  if_b	decod	local04, #31
11250     00 2C 06 36 |  if_ae	mov	local04, #0
11254     88 88 B1 FD | 	call	#__system___float_fromuns
11258     16 FB 61 F5 | 	xor	result1, local04
1125c     FD 14 02 F6 | 	mov	arg02, result1
11260     14 13 02 F6 | 	mov	arg01, local02
11264     7C 8C B1 FD | 	call	#__system___float_mul
11268     FD 12 02 F6 | 	mov	arg01, result1
1126c     D4 95 B1 FD | 	call	#__system____builtin_sinf
11270     FD 14 02 F6 | 	mov	arg02, result1
11274     15 13 02 F6 | 	mov	arg01, local03
11278     68 8C B1 FD | 	call	#__system___float_mul
1127c     FD 14 02 F6 | 	mov	arg02, result1
11280     24 4E 05 F1 | 	add	fp, #36
11284     A7 12 02 FB | 	rdlong	arg01, fp
11288     24 4E 85 F1 | 	sub	fp, #36
1128c     84 88 B1 FD | 	call	#__system___float_add
11290     24 4E 05 F1 | 	add	fp, #36
11294     A7 FA 61 FC | 	wrlong	result1, fp
11298     1C 4E 85 F1 | 	sub	fp, #28
1129c     A7 2A 02 FB | 	rdlong	local03, fp
112a0     01 2A 06 F1 | 	add	local03, #1
112a4     A7 2A 62 FC | 	wrlong	local03, fp
112a8     10 2A 56 F2 | 	cmps	local03, #16 wc
112ac     14 FF 9F CD |  if_b	jmp	#LR__1381
112b0     08 4E 05 F1 | 	add	fp, #8
112b4     A7 2A 02 FB | 	rdlong	local03, fp
112b8     0B 2A 66 F0 | 	shl	local03, #11
112bc     0C 4E 85 F1 | 	sub	fp, #12
112c0     A7 28 02 FB | 	rdlong	local02, fp
112c4     01 28 66 F0 | 	shl	local02, #1
112c8     14 2B 02 F1 | 	add	local03, local02
112cc     20 4E 05 F1 | 	add	fp, #32
112d0     A7 12 02 FB | 	rdlong	arg01, fp
112d4     24 4E 85 F1 | 	sub	fp, #36
112d8     01 14 06 F6 | 	mov	arg02, #1
112dc     CC 90 B1 FD | 	call	#__system___float_tointeger
112e0     FD 14 02 F6 | 	mov	arg02, result1
112e4     15 13 02 F6 | 	mov	arg01, local03
112e8     BC 24 B1 FD | 	call	#_psdpoke
112ec     04 4E 05 F1 | 	add	fp, #4
112f0     A7 2A 02 FB | 	rdlong	local03, fp
112f4     01 2A 06 F1 | 	add	local03, #1
112f8     A7 2A 62 FC | 	wrlong	local03, fp
112fc     04 4E 85 F1 | 	sub	fp, #4
11300     02 00 00 FF 
11304     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11308     A8 FE 9F CD |  if_b	jmp	#LR__1380
1130c                 | LR__1382
1130c                 | LR__1383
1130c     A7 F0 03 F6 | 	mov	ptra, fp
11310     B2 00 A0 FD | 	call	#popregs_
11314                 | _do_defsnd_ret
11314     2D 00 64 FD | 	ret
11318                 | 
11318                 | ' 
11318                 | ' '-------------------- defsprite
11318                 | ' 
11318                 | ' sub do_defsprite
11318                 | _do_defsprite
11318     07 4A 05 F6 | 	mov	COUNT_, #7
1131c     A8 00 A0 FD | 	call	#pushregs_
11320     60 F0 07 F1 | 	add	ptra, #96
11324     E0 C3 BF FD | 	call	#_pop
11328     FD 16 02 F6 | 	mov	arg03, result1
1132c     FE 14 02 F6 | 	mov	arg02, result2
11330     FF 12 02 F6 | 	mov	arg01, result3
11334     30 4E 05 F1 | 	add	fp, #48
11338     A7 16 62 FC | 	wrlong	arg03, fp
1133c     04 4E 05 F1 | 	add	fp, #4
11340     A7 14 62 FC | 	wrlong	arg02, fp
11344     04 4E 05 F1 | 	add	fp, #4
11348     A7 12 62 FC | 	wrlong	arg01, fp
1134c     38 4E 85 F1 | 	sub	fp, #56
11350     B4 C3 BF FD | 	call	#_pop
11354     FD 16 02 F6 | 	mov	arg03, result1
11358     FE 14 02 F6 | 	mov	arg02, result2
1135c     FF 12 02 F6 | 	mov	arg01, result3
11360     24 4E 05 F1 | 	add	fp, #36
11364     A7 16 62 FC | 	wrlong	arg03, fp
11368     04 4E 05 F1 | 	add	fp, #4
1136c     A7 14 62 FC | 	wrlong	arg02, fp
11370     04 4E 05 F1 | 	add	fp, #4
11374     A7 12 62 FC | 	wrlong	arg01, fp
11378     2C 4E 85 F1 | 	sub	fp, #44
1137c     88 C3 BF FD | 	call	#_pop
11380     FD 16 02 F6 | 	mov	arg03, result1
11384     FE 14 02 F6 | 	mov	arg02, result2
11388     FF 12 02 F6 | 	mov	arg01, result3
1138c     18 4E 05 F1 | 	add	fp, #24
11390     A7 16 62 FC | 	wrlong	arg03, fp
11394     04 4E 05 F1 | 	add	fp, #4
11398     A7 14 62 FC | 	wrlong	arg02, fp
1139c     04 4E 05 F1 | 	add	fp, #4
113a0     A7 12 62 FC | 	wrlong	arg01, fp
113a4     20 4E 85 F1 | 	sub	fp, #32
113a8     5C C3 BF FD | 	call	#_pop
113ac     FD 16 02 F6 | 	mov	arg03, result1
113b0     FE 14 02 F6 | 	mov	arg02, result2
113b4     FF 12 02 F6 | 	mov	arg01, result3
113b8     0C 4E 05 F1 | 	add	fp, #12
113bc     A7 16 62 FC | 	wrlong	arg03, fp
113c0     04 4E 05 F1 | 	add	fp, #4
113c4     A7 14 62 FC | 	wrlong	arg02, fp
113c8     04 4E 05 F1 | 	add	fp, #4
113cc     A7 12 62 FC | 	wrlong	arg01, fp
113d0     14 4E 85 F1 | 	sub	fp, #20
113d4     30 C3 BF FD | 	call	#_pop
113d8     FF 16 02 F6 | 	mov	arg03, result3
113dc     A7 FA 61 FC | 	wrlong	result1, fp
113e0     04 4E 05 F1 | 	add	fp, #4
113e4     A7 FC 61 FC | 	wrlong	result2, fp
113e8     04 4E 05 F1 | 	add	fp, #4
113ec     A7 16 62 FC | 	wrlong	arg03, fp
113f0     08 4E 85 F1 | 	sub	fp, #8
113f4     A7 12 02 F6 | 	mov	arg01, fp
113f8     F0 C4 BF FD | 	call	#_converttoint
113fc     3C 4E 05 F1 | 	add	fp, #60
11400     A7 FA 61 FC | 	wrlong	result1, fp
11404     30 4E 85 F1 | 	sub	fp, #48
11408     A7 12 02 F6 | 	mov	arg01, fp
1140c     0C 4E 85 F1 | 	sub	fp, #12
11410     D8 C4 BF FD | 	call	#_converttoint
11414     40 4E 05 F1 | 	add	fp, #64
11418     A7 FA 61 FC | 	wrlong	result1, fp
1141c     28 4E 85 F1 | 	sub	fp, #40
11420     A7 12 02 F6 | 	mov	arg01, fp
11424     18 4E 85 F1 | 	sub	fp, #24
11428     C0 C4 BF FD | 	call	#_converttoint
1142c     44 4E 05 F1 | 	add	fp, #68
11430     A7 FA 61 FC | 	wrlong	result1, fp
11434     20 4E 85 F1 | 	sub	fp, #32
11438     A7 12 02 F6 | 	mov	arg01, fp
1143c     24 4E 85 F1 | 	sub	fp, #36
11440     A8 C4 BF FD | 	call	#_converttoint
11444     48 4E 05 F1 | 	add	fp, #72
11448     A7 FA 61 FC | 	wrlong	result1, fp
1144c     18 4E 85 F1 | 	sub	fp, #24
11450     A7 12 02 F6 | 	mov	arg01, fp
11454     30 4E 85 F1 | 	sub	fp, #48
11458     90 C4 BF FD | 	call	#_converttoint
1145c     4C 4E 05 F1 | 	add	fp, #76
11460     A7 FA 61 FC | 	wrlong	result1, fp
11464                 | ' 
11464                 | ' t5=pop()
11464                 | ' t4=pop()
11464                 | ' t3=pop()
11464                 | ' t2=pop()
11464                 | ' t1=pop()
11464                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
11464                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
11464     10 4E 85 F1 | 	sub	fp, #16
11468     A7 16 02 FB | 	rdlong	arg03, fp
1146c     3C 4E 85 F1 | 	sub	fp, #60
11470     02 16 66 F0 | 	shl	arg03, #2
11474     52 00 00 FF 
11478     54 E4 05 F1 | 	add	objptr, ##42068
1147c     F2 16 02 F1 | 	add	arg03, objptr
11480     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11484     52 00 00 FF 
11488     54 E4 85 F1 | 	sub	objptr, ##42068
1148c     2C 00 90 AD |  if_e	jmp	#LR__1390
11490     3C 4E 05 F1 | 	add	fp, #60
11494     A7 16 02 FB | 	rdlong	arg03, fp
11498     3C 4E 85 F1 | 	sub	fp, #60
1149c     02 16 66 F0 | 	shl	arg03, #2
114a0     52 00 00 FF 
114a4     54 E4 05 F1 | 	add	objptr, ##42068
114a8     F2 16 02 F1 | 	add	arg03, objptr
114ac     0B 13 02 FB | 	rdlong	arg01, arg03
114b0     52 00 00 FF 
114b4     54 E4 85 F1 | 	sub	objptr, ##42068
114b8     8C 9E B1 FD | 	call	#__system___gc_free
114bc                 | LR__1390
114bc     3C 4E 05 F1 | 	add	fp, #60
114c0     A7 26 02 FB | 	rdlong	local01, fp
114c4     0C 4E 05 F1 | 	add	fp, #12
114c8     A7 16 02 FB | 	rdlong	arg03, fp
114cc     04 4E 05 F1 | 	add	fp, #4
114d0     A7 14 02 FB | 	rdlong	arg02, fp
114d4     0A 17 02 FD | 	qmul	arg03, arg02
114d8     02 26 66 F0 | 	shl	local01, #2
114dc     52 00 00 FF 
114e0     54 E4 05 F1 | 	add	objptr, ##42068
114e4     F2 26 02 F1 | 	add	local01, objptr
114e8     4C 4E 85 F1 | 	sub	fp, #76
114ec     52 00 00 FF 
114f0     54 E4 85 F1 | 	sub	objptr, ##42068
114f4     18 12 62 FD | 	getqx	arg01
114f8     10 9D B1 FD | 	call	#__system___gc_alloc_managed
114fc     13 FB 61 FC | 	wrlong	result1, local01
11500                 | ' for y=a3 to a3+a5-1
11500     44 4E 05 F1 | 	add	fp, #68
11504     A7 28 02 FB | 	rdlong	local02, fp
11508     0C 4E 05 F1 | 	add	fp, #12
1150c     A7 28 62 FC | 	wrlong	local02, fp
11510     0C 4E 85 F1 | 	sub	fp, #12
11514     A7 2A 02 FB | 	rdlong	local03, fp
11518     08 4E 05 F1 | 	add	fp, #8
1151c     A7 2C 02 FB | 	rdlong	local04, fp
11520     4C 4E 85 F1 | 	sub	fp, #76
11524     16 2B 02 F1 | 	add	local03, local04
11528                 | LR__1391
11528     50 4E 05 F1 | 	add	fp, #80
1152c     A7 28 02 FB | 	rdlong	local02, fp
11530     50 4E 85 F1 | 	sub	fp, #80
11534     15 29 52 F2 | 	cmps	local02, local03 wc
11538     F4 00 90 3D |  if_ae	jmp	#LR__1394
1153c                 | '   for x=a2 to a4+a2-1
1153c     40 4E 05 F1 | 	add	fp, #64
11540     A7 26 02 FB | 	rdlong	local01, fp
11544     14 4E 05 F1 | 	add	fp, #20
11548     A7 26 62 FC | 	wrlong	local01, fp
1154c     0C 4E 85 F1 | 	sub	fp, #12
11550     A7 2E 02 FB | 	rdlong	local05, fp
11554     08 4E 85 F1 | 	sub	fp, #8
11558     A7 30 02 FB | 	rdlong	local06, fp
1155c     40 4E 85 F1 | 	sub	fp, #64
11560     18 2F 02 F1 | 	add	local05, local06
11564                 | LR__1392
11564     54 4E 05 F1 | 	add	fp, #84
11568     A7 26 02 FB | 	rdlong	local01, fp
1156c     54 4E 85 F1 | 	sub	fp, #84
11570     17 27 52 F2 | 	cmps	local01, local05 wc
11574     A0 00 90 3D |  if_ae	jmp	#LR__1393
11578     3C 4E 05 F1 | 	add	fp, #60
1157c     A7 30 02 FB | 	rdlong	local06, fp
11580     18 4E 05 F1 | 	add	fp, #24
11584     A7 2C 02 FB | 	rdlong	local04, fp
11588     14 4E 85 F1 | 	sub	fp, #20
1158c     A7 28 02 FB | 	rdlong	local02, fp
11590     10 4E 05 F1 | 	add	fp, #16
11594     A7 26 02 FB | 	rdlong	local01, fp
11598     13 17 02 F6 | 	mov	arg03, local01
1159c     0C 4E 85 F1 | 	sub	fp, #12
115a0     A7 14 02 FB | 	rdlong	arg02, fp
115a4     0A 17 82 F1 | 	sub	arg03, arg02
115a8     04 4E 05 F1 | 	add	fp, #4
115ac     A7 14 02 FB | 	rdlong	arg02, fp
115b0     0A 17 02 FD | 	qmul	arg03, arg02
115b4     02 30 66 F0 | 	shl	local06, #2
115b8     52 00 00 FF 
115bc     54 E4 05 F1 | 	add	objptr, ##42068
115c0     F2 30 02 F1 | 	add	local06, objptr
115c4     18 31 02 FB | 	rdlong	local06, local06
115c8     16 33 02 F6 | 	mov	local07, local04
115cc     14 33 82 F1 | 	sub	local07, local02
115d0     52 00 00 FF 
115d4     54 E4 85 F1 | 	sub	objptr, ##42068
115d8     F2 12 02 FB | 	rdlong	arg01, objptr
115dc     16 13 02 F1 | 	add	arg01, local04
115e0     48 4E 85 F1 | 	sub	fp, #72
115e4     0A 26 66 F0 | 	shl	local01, #10
115e8     13 13 02 F1 | 	add	arg01, local01
115ec     18 2C 62 FD | 	getqx	local04
115f0     16 33 02 F1 | 	add	local07, local04
115f4     18 33 02 F1 | 	add	local07, local06
115f8     3C 22 B1 FD | 	call	#_pspeek
115fc     19 FB 41 FC | 	wrbyte	result1, local07
11600     54 4E 05 F1 | 	add	fp, #84
11604     A7 32 02 FB | 	rdlong	local07, fp
11608     01 32 06 F1 | 	add	local07, #1
1160c     A7 32 62 FC | 	wrlong	local07, fp
11610     54 4E 85 F1 | 	sub	fp, #84
11614     4C FF 9F FD | 	jmp	#LR__1392
11618                 | LR__1393
11618     50 4E 05 F1 | 	add	fp, #80
1161c     A7 32 02 FB | 	rdlong	local07, fp
11620     01 32 06 F1 | 	add	local07, #1
11624     A7 32 62 FC | 	wrlong	local07, fp
11628     50 4E 85 F1 | 	sub	fp, #80
1162c     F8 FE 9F FD | 	jmp	#LR__1391
11630                 | LR__1394
11630     3C 4E 05 F1 | 	add	fp, #60
11634     A7 32 02 FB | 	rdlong	local07, fp
11638     19 13 02 F6 | 	mov	arg01, local07
1163c     3C 4E 85 F1 | 	sub	fp, #60
11640     02 32 66 F0 | 	shl	local07, #2
11644     52 00 00 FF 
11648     54 E4 05 F1 | 	add	objptr, ##42068
1164c     F2 32 02 F1 | 	add	local07, objptr
11650     19 15 02 FB | 	rdlong	arg02, local07
11654     52 00 00 FF 
11658     54 E4 85 F1 | 	sub	objptr, ##42068
1165c     38 2F B1 FD | 	call	#_hg010b_spin2_setspriteptr
11660     3C 4E 05 F1 | 	add	fp, #60
11664     A7 12 02 FB | 	rdlong	arg01, fp
11668     0C 4E 05 F1 | 	add	fp, #12
1166c     A7 14 02 FB | 	rdlong	arg02, fp
11670     04 4E 05 F1 | 	add	fp, #4
11674     A7 16 02 FB | 	rdlong	arg03, fp
11678     4C 4E 85 F1 | 	sub	fp, #76
1167c     A8 2F B1 FD | 	call	#_hg010b_spin2_setspritesize
11680     A7 F0 03 F6 | 	mov	ptra, fp
11684     B2 00 A0 FD | 	call	#popregs_
11688                 | _do_defsprite_ret
11688     2D 00 64 FD | 	ret
1168c                 | 
1168c                 | ' 
1168c                 | ' '-------------------- deg
1168c                 | ' 
1168c                 | ' sub do_deg
1168c                 | _do_deg
1168c     52 00 00 FF 
11690     A8 E4 05 F1 | 	add	objptr, ##42152
11694     7D 47 9E FF 
11698     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1169c     04 E4 05 F1 | 	add	objptr, #4
116a0     97 32 A1 FF 
116a4     F2 C2 69 FC | 	wrlong	##1113927393, objptr
116a8     52 00 00 FF 
116ac     AC E4 85 F1 | 	sub	objptr, ##42156
116b0                 | _do_deg_ret
116b0     2D 00 64 FD | 	ret
116b4                 | 
116b4                 | ' 
116b4                 | ' '-------------------- delete
116b4                 | ' 
116b4                 | ' sub do_delete
116b4                 | _do_delete
116b4     05 4A 05 F6 | 	mov	COUNT_, #5
116b8     A8 00 A0 FD | 	call	#pushregs_
116bc     48 C0 BF FD | 	call	#_pop
116c0     FE 18 02 F6 | 	mov	arg04, result2
116c4     FF 16 02 F6 | 	mov	arg03, result3
116c8     FD 26 02 F6 | 	mov	local01, result1
116cc     0C 29 02 F6 | 	mov	local02, arg04
116d0     0B 2B 02 F6 | 	mov	local03, arg03
116d4                 | ' 
116d4                 | ' t1=pop()
116d4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
116d4     2B 2A 0E F2 | 	cmp	local03, #43 wz
116d8     10 00 90 5D |  if_ne	jmp	#LR__1400
116dc     13 13 02 F6 | 	mov	arg01, local01
116e0     9C C1 BF FD | 	call	#_convertstring
116e4     FD 26 02 F6 | 	mov	local01, result1
116e8     1F 2A 06 F6 | 	mov	local03, #31
116ec                 | LR__1400
116ec                 | ' if t1.result_type<>result_string then printerror(15): return
116ec     1F 2A 0E F2 | 	cmp	local03, #31 wz
116f0     10 00 90 AD |  if_e	jmp	#LR__1401
116f4     0F 12 06 F6 | 	mov	arg01, #15
116f8     00 14 06 F6 | 	mov	arg02, #0
116fc     C0 1E B1 FD | 	call	#_printerror
11700     E0 00 90 FD | 	jmp	#LR__1405
11704                 | LR__1401
11704                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
11704     4A 00 00 FF 
11708     94 E4 05 F1 | 	add	objptr, ##38036
1170c     F2 12 02 FB | 	rdlong	arg01, objptr
11710     4A 00 00 FF 
11714     94 E4 85 F1 | 	sub	objptr, ##38036
11718     BA 01 00 FF 
1171c     B8 14 06 F6 | 	mov	arg02, ##@LR__5944
11720     70 59 B1 FD | 	call	#__system___string_cmp
11724     00 FA 0D F2 | 	cmp	result1, #0 wz
11728     34 00 90 AD |  if_e	jmp	#LR__1402
1172c     4A 00 00 FF 
11730     94 E4 05 F1 | 	add	objptr, ##38036
11734     F2 12 02 FB | 	rdlong	arg01, objptr
11738     4A 00 00 FF 
1173c     94 E4 85 F1 | 	sub	objptr, ##38036
11740     BA 01 00 FF 
11744     BA 14 06 F6 | 	mov	arg02, ##@LR__5945
11748     7C 59 B1 FD | 	call	#__system___string_concat
1174c     FD 12 02 F6 | 	mov	arg01, result1
11750     13 15 02 F6 | 	mov	arg02, local01
11754     70 59 B1 FD | 	call	#__system___string_concat
11758     FD 2C 02 F6 | 	mov	local04, result1
1175c     14 00 90 FD | 	jmp	#LR__1403
11760                 | LR__1402
11760     BA 01 00 FF 
11764     BC 12 06 F6 | 	mov	arg01, ##@LR__5946
11768     13 15 02 F6 | 	mov	arg02, local01
1176c     58 59 B1 FD | 	call	#__system___string_concat
11770     FD 2C 02 F6 | 	mov	local04, result1
11774                 | LR__1403
11774     16 13 02 F6 | 	mov	arg01, local04
11778     BC 80 B1 FD | 	call	#__system___remove
1177c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11780     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11784     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11788     FD 2E 0A F6 | 	mov	local05, result1 wz
1178c                 | ' kill filename$
1178c                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
1178c     54 00 90 AD |  if_e	jmp	#LR__1404
11790     00 12 06 F6 | 	mov	arg01, #0
11794     FC B5 B1 FD | 	call	#__system___getiolock_0616
11798     FD 12 02 F6 | 	mov	arg01, result1
1179c     CC 58 B1 FD | 	call	#__system___lockmem
117a0     BA 01 00 FF 
117a4     BE 14 06 F6 | 	mov	arg02, ##@LR__5947
117a8     00 12 06 F6 | 	mov	arg01, #0
117ac     00 16 06 F6 | 	mov	arg03, #0
117b0     AC 65 B1 FD | 	call	#__system___basic_print_string
117b4     00 12 06 F6 | 	mov	arg01, #0
117b8     17 15 02 F6 | 	mov	arg02, local05
117bc     00 16 06 F6 | 	mov	arg03, #0
117c0     0A 18 06 F6 | 	mov	arg04, #10
117c4     DC 65 B1 FD | 	call	#__system___basic_print_integer
117c8     00 12 06 F6 | 	mov	arg01, #0
117cc     0A 14 06 F6 | 	mov	arg02, #10
117d0     00 16 06 F6 | 	mov	arg03, #0
117d4     30 65 B1 FD | 	call	#__system___basic_print_char
117d8     00 12 06 F6 | 	mov	arg01, #0
117dc     B4 B5 B1 FD | 	call	#__system___getiolock_0616
117e0     FD 00 68 FC | 	wrlong	#0, result1
117e4                 | LR__1404
117e4                 | LR__1405
117e4     A7 F0 03 F6 | 	mov	ptra, fp
117e8     B2 00 A0 FD | 	call	#popregs_
117ec                 | _do_delete_ret
117ec     2D 00 64 FD | 	ret
117f0                 | 
117f0                 | ' 
117f0                 | ' '-------------------- dir
117f0                 | ' 
117f0                 | ' sub do_dir
117f0                 | _do_dir
117f0     13 4A 05 F6 | 	mov	COUNT_, #19
117f4     A8 00 A0 FD | 	call	#pushregs_
117f8     01 00 00 FF 
117fc     38 F0 07 F1 | 	add	ptra, ##568
11800                 | ' 
11800                 | ' print "Current directory: "; currentdir$ 
11800     00 12 06 F6 | 	mov	arg01, #0
11804     8C B5 B1 FD | 	call	#__system___getiolock_0616
11808     FD 12 02 F6 | 	mov	arg01, result1
1180c     5C 58 B1 FD | 	call	#__system___lockmem
11810     BA 01 00 FF 
11814     F6 14 06 F6 | 	mov	arg02, ##@LR__5948
11818     00 12 06 F6 | 	mov	arg01, #0
1181c     00 16 06 F6 | 	mov	arg03, #0
11820     3C 65 B1 FD | 	call	#__system___basic_print_string
11824     4A 00 00 FF 
11828     94 E4 05 F1 | 	add	objptr, ##38036
1182c     F2 14 02 FB | 	rdlong	arg02, objptr
11830     4A 00 00 FF 
11834     94 E4 85 F1 | 	sub	objptr, ##38036
11838     00 12 06 F6 | 	mov	arg01, #0
1183c     00 16 06 F6 | 	mov	arg03, #0
11840     1C 65 B1 FD | 	call	#__system___basic_print_string
11844     00 12 06 F6 | 	mov	arg01, #0
11848     0A 14 06 F6 | 	mov	arg02, #10
1184c     00 16 06 F6 | 	mov	arg03, #0
11850     B4 64 B1 FD | 	call	#__system___basic_print_char
11854     01 26 06 F6 | 	mov	local01, #1
11858     00 12 06 F6 | 	mov	arg01, #0
1185c     34 B5 B1 FD | 	call	#__system___getiolock_0616
11860     FD 00 68 FC | 	wrlong	#0, result1
11864     00 28 06 F6 | 	mov	local02, #0
11868     00 2A 06 F6 | 	mov	local03, #0
1186c                 | ' px=0
1186c                 | ' for i=0 to 127: filelist(i)="" : next i
1186c     00 2C 06 F6 | 	mov	local04, #0
11870     1C 4E 05 F1 | 	add	fp, #28
11874     97 12 48 FB | 	callpa	#(@LR__1411-@LR__1410)>>2,fcache_load_ptr_
11878                 | LR__1410
11878     16 2F 02 F6 | 	mov	local05, local04
1187c     02 2E 66 F0 | 	shl	local05, #2
11880     A7 2E 02 F1 | 	add	local05, fp
11884     BA 01 00 FF 
11888     0A 31 06 F6 | 	mov	local06, ##@LR__5949
1188c     17 31 62 FC | 	wrlong	local06, local05
11890     01 2C 06 F1 | 	add	local04, #1
11894     80 2C 56 F2 | 	cmps	local04, #128 wc
11898     DC FF 9F CD |  if_b	jmp	#LR__1410
1189c                 | LR__1411
1189c     1C 4E 85 F1 | 	sub	fp, #28
118a0     BA 01 00 FF 
118a4     0B 13 06 F6 | 	mov	arg01, ##@LR__5950
118a8     10 14 06 F6 | 	mov	arg02, #16
118ac     1C B6 B1 FD | 	call	#__system___basic_dir
118b0     FD 32 02 F6 | 	mov	local07, result1
118b4     00 34 06 F6 | 	mov	local08, #0
118b8                 | ' filename=dir$("*", fbDirectory)
118b8                 | ' n=0
118b8                 | ' while filename <> "" andalso filename <> nil andalso n<128
118b8                 | LR__1412
118b8     BA 01 00 FF 
118bc     0D 37 06 F6 | 	mov	local09, ##@LR__5951
118c0     19 13 02 F6 | 	mov	arg01, local07
118c4     1B 15 02 F6 | 	mov	arg02, local09
118c8     C8 57 B1 FD | 	call	#__system___string_cmp
118cc     00 FA 0D F2 | 	cmp	result1, #0 wz
118d0     68 00 90 AD |  if_e	jmp	#LR__1413
118d4     00 36 06 F6 | 	mov	local09, #0
118d8     19 13 02 F6 | 	mov	arg01, local07
118dc     00 14 06 F6 | 	mov	arg02, #0
118e0     B0 57 B1 FD | 	call	#__system___string_cmp
118e4     00 FA 0D F2 | 	cmp	result1, #0 wz
118e8     50 00 90 AD |  if_e	jmp	#LR__1413
118ec     80 34 56 F2 | 	cmps	local08, #128 wc
118f0     48 00 90 3D |  if_ae	jmp	#LR__1413
118f4     BA 01 00 FF 
118f8     0E 13 06 F6 | 	mov	arg01, ##@LR__5952
118fc     19 15 02 F6 | 	mov	arg02, local07
11900     C4 57 B1 FD | 	call	#__system___string_concat
11904     FD 32 02 F6 | 	mov	local07, result1
11908     1A 2F 02 F6 | 	mov	local05, local08
1190c     02 2E 66 F0 | 	shl	local05, #2
11910     1C 4E 05 F1 | 	add	fp, #28
11914     A7 2E 02 F1 | 	add	local05, fp
11918     17 33 62 FC | 	wrlong	local07, local05
1191c     01 34 06 F1 | 	add	local08, #1
11920     00 2E 06 F6 | 	mov	local05, #0
11924     00 12 06 F6 | 	mov	arg01, #0
11928     00 14 06 F6 | 	mov	arg02, #0
1192c     1C 4E 85 F1 | 	sub	fp, #28
11930     98 B5 B1 FD | 	call	#__system___basic_dir
11934     FD 32 02 F6 | 	mov	local07, result1
11938     7C FF 9F FD | 	jmp	#LR__1412
1193c                 | LR__1413
1193c                 | ' for i=0 to n-1			' now sort this
1193c     00 2C 06 F6 | 	mov	local04, #0
11940     1A 39 02 F6 | 	mov	local10, local08
11944                 | LR__1414
11944     1C 2D 52 F2 | 	cmps	local04, local10 wc
11948     DC 00 90 3D |  if_ae	jmp	#LR__1418
1194c     00 3A 06 F6 | 	mov	local11, #0
11950                 | '   swapped=false
11950                 | '   for j=0 to n-i-2
11950     00 3C 06 F6 | 	mov	local12, #0
11954     1A 3F 02 F6 | 	mov	local13, local08
11958     16 3F 82 F1 | 	sub	local13, local04
1195c     01 3E 86 F1 | 	sub	local13, #1
11960                 | LR__1415
11960     1F 3D 52 F2 | 	cmps	local12, local13 wc
11964     B0 00 90 3D |  if_ae	jmp	#LR__1417
11968                 | '     if filelist(j) > filelist(j+1) then
11968     1E 37 02 F6 | 	mov	local09, local12
1196c     02 36 66 F0 | 	shl	local09, #2
11970     1C 4E 05 F1 | 	add	fp, #28
11974     A7 36 02 F1 | 	add	local09, fp
11978     1B 13 02 FB | 	rdlong	arg01, local09
1197c     1E 37 02 F6 | 	mov	local09, local12
11980     01 36 06 F1 | 	add	local09, #1
11984     1B 31 02 F6 | 	mov	local06, local09
11988     02 30 66 F0 | 	shl	local06, #2
1198c     A7 26 02 F6 | 	mov	local01, fp
11990     A7 30 02 F1 | 	add	local06, fp
11994     18 2F 02 FB | 	rdlong	local05, local06
11998     17 15 02 F6 | 	mov	arg02, local05
1199c     1C 4E 85 F1 | 	sub	fp, #28
119a0     F0 56 B1 FD | 	call	#__system___string_cmp
119a4     01 FA 55 F2 | 	cmps	result1, #1 wc
119a8     64 00 90 CD |  if_b	jmp	#LR__1416
119ac     1E 37 02 F6 | 	mov	local09, local12
119b0     01 36 06 F1 | 	add	local09, #1
119b4     02 36 66 F0 | 	shl	local09, #2
119b8     1C 4E 05 F1 | 	add	fp, #28
119bc     A7 36 02 F1 | 	add	local09, fp
119c0     1B 3B 02 FB | 	rdlong	local11, local09
119c4     1E 31 02 F6 | 	mov	local06, local12
119c8     02 30 66 F0 | 	shl	local06, #2
119cc     A7 30 02 F1 | 	add	local06, fp
119d0     18 2F 02 FB | 	rdlong	local05, local06
119d4     1E 37 02 F6 | 	mov	local09, local12
119d8     1B 31 02 F6 | 	mov	local06, local09
119dc     02 30 66 F0 | 	shl	local06, #2
119e0     A7 26 02 F6 | 	mov	local01, fp
119e4     A7 30 02 F1 | 	add	local06, fp
119e8     18 3B 62 FC | 	wrlong	local11, local06
119ec     1E 29 02 F6 | 	mov	local02, local12
119f0     01 28 06 F1 | 	add	local02, #1
119f4     14 41 02 F6 | 	mov	local14, local02
119f8     02 40 66 F0 | 	shl	local14, #2
119fc     A7 42 02 F6 | 	mov	local15, fp
11a00     A7 40 02 F1 | 	add	local14, fp
11a04     20 2F 62 FC | 	wrlong	local05, local14
11a08     01 3A 66 F6 | 	neg	local11, #1
11a0c     1C 4E 85 F1 | 	sub	fp, #28
11a10                 | LR__1416
11a10     01 3C 06 F1 | 	add	local12, #1
11a14     48 FF 9F FD | 	jmp	#LR__1415
11a18                 | LR__1417
11a18                 | ' if not swapped then exit for
11a18     1D 45 22 F6 | 	not	local16, local11
11a1c     00 44 0E F2 | 	cmp	local16, #0 wz
11a20     01 2C 06 A1 |  if_e	add	local04, #1
11a24     1C FF 9F AD |  if_e	jmp	#LR__1414
11a28                 | LR__1418
11a28                 | ' for i=0 to n-1
11a28     00 2C 06 F6 | 	mov	local04, #0
11a2c     1A 47 02 F6 | 	mov	local17, local08
11a30                 | LR__1419
11a30     23 2D 52 F2 | 	cmps	local04, local17 wc
11a34     94 00 90 3D |  if_ae	jmp	#LR__1421
11a38                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11a38     00 12 06 F6 | 	mov	arg01, #0
11a3c     54 B3 B1 FD | 	call	#__system___getiolock_0616
11a40     FD 12 02 F6 | 	mov	arg01, result1
11a44     24 56 B1 FD | 	call	#__system___lockmem
11a48     16 29 02 F6 | 	mov	local02, local04
11a4c     02 28 66 F0 | 	shl	local02, #2
11a50     1C 4E 05 F1 | 	add	fp, #28
11a54     A7 40 02 F6 | 	mov	local14, fp
11a58     A7 28 02 F1 | 	add	local02, fp
11a5c     14 15 02 FB | 	rdlong	arg02, local02
11a60     00 26 06 F6 | 	mov	local01, #0
11a64     00 12 06 F6 | 	mov	arg01, #0
11a68     00 16 06 F6 | 	mov	arg03, #0
11a6c     1C 4E 85 F1 | 	sub	fp, #28
11a70     EC 62 B1 FD | 	call	#__system___basic_print_string
11a74     00 12 06 F6 | 	mov	arg01, #0
11a78     18 B3 B1 FD | 	call	#__system___getiolock_0616
11a7c     FD 00 68 FC | 	wrlong	#0, result1
11a80     40 2A 06 F1 | 	add	local03, #64
11a84     15 13 02 F6 | 	mov	arg01, local03
11a88     E8 37 B1 FD | 	call	#_hg010b_spin2_setcursorx
11a8c     00 2B 56 F2 | 	cmps	local03, #256 wc
11a90     30 00 90 CD |  if_b	jmp	#LR__1420
11a94     00 2A 06 F6 | 	mov	local03, #0
11a98     00 12 06 F6 | 	mov	arg01, #0
11a9c     F4 B2 B1 FD | 	call	#__system___getiolock_0616
11aa0     FD 12 02 F6 | 	mov	arg01, result1
11aa4     C4 55 B1 FD | 	call	#__system___lockmem
11aa8     00 12 06 F6 | 	mov	arg01, #0
11aac     0A 14 06 F6 | 	mov	arg02, #10
11ab0     00 16 06 F6 | 	mov	arg03, #0
11ab4     50 62 B1 FD | 	call	#__system___basic_print_char
11ab8     00 12 06 F6 | 	mov	arg01, #0
11abc     D4 B2 B1 FD | 	call	#__system___getiolock_0616
11ac0     FD 00 68 FC | 	wrlong	#0, result1
11ac4                 | LR__1420
11ac4     01 2C 06 F1 | 	add	local04, #1
11ac8     64 FF 9F FD | 	jmp	#LR__1419
11acc                 | LR__1421
11acc                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11acc     80 34 56 F2 | 	cmps	local08, #128 wc
11ad0     44 00 90 CD |  if_b	jmp	#LR__1422
11ad4     00 12 06 F6 | 	mov	arg01, #0
11ad8     B8 B2 B1 FD | 	call	#__system___getiolock_0616
11adc     FD 12 02 F6 | 	mov	arg01, result1
11ae0     88 55 B1 FD | 	call	#__system___lockmem
11ae4     BA 01 00 FF 
11ae8     15 15 06 F6 | 	mov	arg02, ##@LR__5953
11aec     00 12 06 F6 | 	mov	arg01, #0
11af0     00 16 06 F6 | 	mov	arg03, #0
11af4     68 62 B1 FD | 	call	#__system___basic_print_string
11af8     00 12 06 F6 | 	mov	arg01, #0
11afc     0A 14 06 F6 | 	mov	arg02, #10
11b00     00 16 06 F6 | 	mov	arg03, #0
11b04     00 62 B1 FD | 	call	#__system___basic_print_char
11b08     00 12 06 F6 | 	mov	arg01, #0
11b0c     84 B2 B1 FD | 	call	#__system___getiolock_0616
11b10     FD 00 68 FC | 	wrlong	#0, result1
11b14     00 26 06 F6 | 	mov	local01, #0
11b18                 | LR__1422
11b18                 | ' print
11b18     00 12 06 F6 | 	mov	arg01, #0
11b1c     74 B2 B1 FD | 	call	#__system___getiolock_0616
11b20     FD 12 02 F6 | 	mov	arg01, result1
11b24     44 55 B1 FD | 	call	#__system___lockmem
11b28     00 12 06 F6 | 	mov	arg01, #0
11b2c     0A 14 06 F6 | 	mov	arg02, #10
11b30     00 16 06 F6 | 	mov	arg03, #0
11b34     D0 61 B1 FD | 	call	#__system___basic_print_char
11b38     00 12 06 F6 | 	mov	arg01, #0
11b3c     54 B2 B1 FD | 	call	#__system___getiolock_0616
11b40     FD 00 68 FC | 	wrlong	#0, result1
11b44     00 30 06 F6 | 	mov	local06, #0
11b48     00 34 06 F6 | 	mov	local08, #0
11b4c     00 2A 06 F6 | 	mov	local03, #0
11b50                 | ' return cursor_y
11b50     3E E4 05 F1 | 	add	objptr, #62
11b54     F2 48 C2 FA | 	rdbyte	local18, objptr
11b58     3E E4 85 F1 | 	sub	objptr, #62
11b5c     BA 01 00 FF 
11b60     47 13 06 F6 | 	mov	arg01, ##@LR__5954
11b64     21 14 06 F6 | 	mov	arg02, #33
11b68     60 B3 B1 FD | 	call	#__system___basic_dir
11b6c     FD 32 02 F6 | 	mov	local07, result1
11b70                 | ' n=0
11b70                 | ' px=0: py=v.getcursory()
11b70                 | ' filename = dir$("*", fbNormal )   
11b70                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11b70                 | LR__1423
11b70     BA 01 00 FF 
11b74     49 37 06 F6 | 	mov	local09, ##@LR__5955
11b78     19 13 02 F6 | 	mov	arg01, local07
11b7c     1B 15 02 F6 | 	mov	arg02, local09
11b80     10 55 B1 FD | 	call	#__system___string_cmp
11b84     00 FA 0D F2 | 	cmp	result1, #0 wz
11b88     54 00 90 AD |  if_e	jmp	#LR__1424
11b8c     00 36 06 F6 | 	mov	local09, #0
11b90     19 13 02 F6 | 	mov	arg01, local07
11b94     00 14 06 F6 | 	mov	arg02, #0
11b98     F8 54 B1 FD | 	call	#__system___string_cmp
11b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
11ba0     3C 00 90 AD |  if_e	jmp	#LR__1424
11ba4     80 34 56 F2 | 	cmps	local08, #128 wc
11ba8     34 00 90 3D |  if_ae	jmp	#LR__1424
11bac     1A 2F 02 F6 | 	mov	local05, local08
11bb0     02 2E 66 F0 | 	shl	local05, #2
11bb4     1C 4E 05 F1 | 	add	fp, #28
11bb8     A7 2E 02 F1 | 	add	local05, fp
11bbc     17 33 62 FC | 	wrlong	local07, local05
11bc0     01 34 06 F1 | 	add	local08, #1
11bc4     00 2E 06 F6 | 	mov	local05, #0
11bc8     00 12 06 F6 | 	mov	arg01, #0
11bcc     00 14 06 F6 | 	mov	arg02, #0
11bd0     1C 4E 85 F1 | 	sub	fp, #28
11bd4     F4 B2 B1 FD | 	call	#__system___basic_dir
11bd8     FD 32 02 F6 | 	mov	local07, result1
11bdc     90 FF 9F FD | 	jmp	#LR__1423
11be0                 | LR__1424
11be0                 | ' for i =0 to n-1
11be0     00 2C 06 F6 | 	mov	local04, #0
11be4                 | LR__1425
11be4     1A 2D 52 F2 | 	cmps	local04, local08 wc
11be8     D8 00 90 3D |  if_ae	jmp	#LR__1429
11bec     00 3A 06 F6 | 	mov	local11, #0
11bf0                 | '   swapped=false
11bf0                 | '   for j=0 to n-i-2
11bf0     00 3C 06 F6 | 	mov	local12, #0
11bf4     1A 4B 02 F6 | 	mov	local19, local08
11bf8     16 4B 82 F1 | 	sub	local19, local04
11bfc     01 4A 86 F1 | 	sub	local19, #1
11c00                 | LR__1426
11c00     25 3D 52 F2 | 	cmps	local12, local19 wc
11c04     AC 00 90 3D |  if_ae	jmp	#LR__1428
11c08                 | '     if filelist(j) > filelist(j+1) then
11c08     1E 37 02 F6 | 	mov	local09, local12
11c0c     02 36 66 F0 | 	shl	local09, #2
11c10     1C 4E 05 F1 | 	add	fp, #28
11c14     A7 36 02 F1 | 	add	local09, fp
11c18     1B 13 02 FB | 	rdlong	arg01, local09
11c1c     1E 37 02 F6 | 	mov	local09, local12
11c20     01 36 06 F1 | 	add	local09, #1
11c24     1B 31 02 F6 | 	mov	local06, local09
11c28     02 30 66 F0 | 	shl	local06, #2
11c2c     A7 26 02 F6 | 	mov	local01, fp
11c30     A7 30 02 F1 | 	add	local06, fp
11c34     18 2F 02 FB | 	rdlong	local05, local06
11c38     17 15 02 F6 | 	mov	arg02, local05
11c3c     1C 4E 85 F1 | 	sub	fp, #28
11c40     50 54 B1 FD | 	call	#__system___string_cmp
11c44     01 FA 55 F2 | 	cmps	result1, #1 wc
11c48     60 00 90 CD |  if_b	jmp	#LR__1427
11c4c     1E 37 02 F6 | 	mov	local09, local12
11c50     01 36 06 F1 | 	add	local09, #1
11c54     02 36 66 F0 | 	shl	local09, #2
11c58     1C 4E 05 F1 | 	add	fp, #28
11c5c     A7 36 02 F1 | 	add	local09, fp
11c60     1B 45 02 FB | 	rdlong	local16, local09
11c64     1E 31 02 F6 | 	mov	local06, local12
11c68     02 30 66 F0 | 	shl	local06, #2
11c6c     A7 30 02 F1 | 	add	local06, fp
11c70     18 2F 02 FB | 	rdlong	local05, local06
11c74     1E 37 02 F6 | 	mov	local09, local12
11c78     1B 31 02 F6 | 	mov	local06, local09
11c7c     02 30 66 F0 | 	shl	local06, #2
11c80     A7 26 02 F6 | 	mov	local01, fp
11c84     A7 30 02 F1 | 	add	local06, fp
11c88     18 45 62 FC | 	wrlong	local16, local06
11c8c     1E 41 02 F6 | 	mov	local14, local12
11c90     01 40 06 F1 | 	add	local14, #1
11c94     02 40 66 F0 | 	shl	local14, #2
11c98     A7 42 02 F6 | 	mov	local15, fp
11c9c     A7 40 02 F1 | 	add	local14, fp
11ca0     20 2F 62 FC | 	wrlong	local05, local14
11ca4     01 3A 66 F6 | 	neg	local11, #1
11ca8     1C 4E 85 F1 | 	sub	fp, #28
11cac                 | LR__1427
11cac     01 3C 06 F1 | 	add	local12, #1
11cb0     4C FF 9F FD | 	jmp	#LR__1426
11cb4                 | LR__1428
11cb4                 | ' if not swapped then exit for
11cb4     1D 45 22 F6 | 	not	local16, local11
11cb8     00 44 0E F2 | 	cmp	local16, #0 wz
11cbc     01 2C 06 A1 |  if_e	add	local04, #1
11cc0     20 FF 9F AD |  if_e	jmp	#LR__1425
11cc4                 | LR__1429
11cc4                 | ' for i=0 to n-1
11cc4     00 2C 06 F6 | 	mov	local04, #0
11cc8                 | LR__1430
11cc8     1A 2D 52 F2 | 	cmps	local04, local08 wc
11ccc     8C 00 90 3D |  if_ae	jmp	#LR__1432
11cd0                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11cd0     00 12 06 F6 | 	mov	arg01, #0
11cd4     BC B0 B1 FD | 	call	#__system___getiolock_0616
11cd8     FD 12 02 F6 | 	mov	arg01, result1
11cdc     8C 53 B1 FD | 	call	#__system___lockmem
11ce0     16 29 02 F6 | 	mov	local02, local04
11ce4     02 28 66 F0 | 	shl	local02, #2
11ce8     1C 4E 05 F1 | 	add	fp, #28
11cec     A7 28 02 F1 | 	add	local02, fp
11cf0     14 15 02 FB | 	rdlong	arg02, local02
11cf4     00 12 06 F6 | 	mov	arg01, #0
11cf8     00 16 06 F6 | 	mov	arg03, #0
11cfc     1C 4E 85 F1 | 	sub	fp, #28
11d00     5C 60 B1 FD | 	call	#__system___basic_print_string
11d04     00 12 06 F6 | 	mov	arg01, #0
11d08     88 B0 B1 FD | 	call	#__system___getiolock_0616
11d0c     FD 00 68 FC | 	wrlong	#0, result1
11d10     40 2A 06 F1 | 	add	local03, #64
11d14     15 13 02 F6 | 	mov	arg01, local03
11d18     58 35 B1 FD | 	call	#_hg010b_spin2_setcursorx
11d1c     00 2B 56 F2 | 	cmps	local03, #256 wc
11d20     30 00 90 CD |  if_b	jmp	#LR__1431
11d24     00 2A 06 F6 | 	mov	local03, #0
11d28     00 12 06 F6 | 	mov	arg01, #0
11d2c     64 B0 B1 FD | 	call	#__system___getiolock_0616
11d30     FD 12 02 F6 | 	mov	arg01, result1
11d34     34 53 B1 FD | 	call	#__system___lockmem
11d38     00 12 06 F6 | 	mov	arg01, #0
11d3c     0A 14 06 F6 | 	mov	arg02, #10
11d40     00 16 06 F6 | 	mov	arg03, #0
11d44     C0 5F B1 FD | 	call	#__system___basic_print_char
11d48     00 12 06 F6 | 	mov	arg01, #0
11d4c     44 B0 B1 FD | 	call	#__system___getiolock_0616
11d50     FD 00 68 FC | 	wrlong	#0, result1
11d54                 | LR__1431
11d54     01 2C 06 F1 | 	add	local04, #1
11d58     6C FF 9F FD | 	jmp	#LR__1430
11d5c                 | LR__1432
11d5c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11d5c     80 34 56 F2 | 	cmps	local08, #128 wc
11d60     40 00 90 CD |  if_b	jmp	#LR__1433
11d64     00 12 06 F6 | 	mov	arg01, #0
11d68     28 B0 B1 FD | 	call	#__system___getiolock_0616
11d6c     FD 12 02 F6 | 	mov	arg01, result1
11d70     F8 52 B1 FD | 	call	#__system___lockmem
11d74     BA 01 00 FF 
11d78     4A 15 06 F6 | 	mov	arg02, ##@LR__5956
11d7c     00 12 06 F6 | 	mov	arg01, #0
11d80     00 16 06 F6 | 	mov	arg03, #0
11d84     D8 5F B1 FD | 	call	#__system___basic_print_string
11d88     00 12 06 F6 | 	mov	arg01, #0
11d8c     0A 14 06 F6 | 	mov	arg02, #10
11d90     00 16 06 F6 | 	mov	arg03, #0
11d94     70 5F B1 FD | 	call	#__system___basic_print_char
11d98     00 12 06 F6 | 	mov	arg01, #0
11d9c     F4 AF B1 FD | 	call	#__system___getiolock_0616
11da0     FD 00 68 FC | 	wrlong	#0, result1
11da4                 | LR__1433
11da4                 | ' print
11da4     00 12 06 F6 | 	mov	arg01, #0
11da8     E8 AF B1 FD | 	call	#__system___getiolock_0616
11dac     FD 12 02 F6 | 	mov	arg01, result1
11db0     B8 52 B1 FD | 	call	#__system___lockmem
11db4     00 12 06 F6 | 	mov	arg01, #0
11db8     0A 14 06 F6 | 	mov	arg02, #10
11dbc     00 16 06 F6 | 	mov	arg03, #0
11dc0     44 5F B1 FD | 	call	#__system___basic_print_char
11dc4     00 12 06 F6 | 	mov	arg01, #0
11dc8     C8 AF B1 FD | 	call	#__system___getiolock_0616
11dcc     FD 00 68 FC | 	wrlong	#0, result1
11dd0     A7 F0 03 F6 | 	mov	ptra, fp
11dd4     B2 00 A0 FD | 	call	#popregs_
11dd8                 | _do_dir_ret
11dd8     2D 00 64 FD | 	ret
11ddc                 | 
11ddc                 | ' 
11ddc                 | ' '-------------------- dpeek
11ddc                 | ' 
11ddc                 | ' sub do_dpeek
11ddc                 | _do_dpeek
11ddc     00 4A 05 F6 | 	mov	COUNT_, #0
11de0     A8 00 A0 FD | 	call	#pushregs_
11de4     14 F0 07 F1 | 	add	ptra, #20
11de8     1C B9 BF FD | 	call	#_pop
11dec     A7 FA 61 FC | 	wrlong	result1, fp
11df0     04 4E 05 F1 | 	add	fp, #4
11df4     A7 FC 61 FC | 	wrlong	result2, fp
11df8     04 4E 05 F1 | 	add	fp, #4
11dfc     A7 FE 61 FC | 	wrlong	result3, fp
11e00     08 4E 85 F1 | 	sub	fp, #8
11e04     A7 12 02 F6 | 	mov	arg01, fp
11e08     E0 BA BF FD | 	call	#_converttoint
11e0c     0C 4E 05 F1 | 	add	fp, #12
11e10     A7 FA 61 FC | 	wrlong	result1, fp
11e14                 | ' 
11e14                 | ' t1=pop()
11e14                 | ' a=converttoint(t1)
11e14                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11e14     0C 4E 85 F1 | 	sub	fp, #12
11e18     00 04 00 FF 
11e1c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11e20     1C 00 90 3D |  if_ae	jmp	#LR__1440
11e24     0C 4E 05 F1 | 	add	fp, #12
11e28     A7 12 02 FB | 	rdlong	arg01, fp
11e2c     09 FB E1 FA | 	rdword	result1, arg01
11e30     04 4E 05 F1 | 	add	fp, #4
11e34     A7 FA 61 FC | 	wrlong	result1, fp
11e38     10 4E 85 F1 | 	sub	fp, #16
11e3c     1C 00 90 FD | 	jmp	#LR__1441
11e40                 | LR__1440
11e40     0C 4E 05 F1 | 	add	fp, #12
11e44     A7 12 02 FB | 	rdlong	arg01, fp
11e48     0C 4E 85 F1 | 	sub	fp, #12
11e4c     98 1A B1 FD | 	call	#_psdpeek
11e50     10 4E 05 F1 | 	add	fp, #16
11e54     A7 FA 61 FC | 	wrlong	result1, fp
11e58     10 4E 85 F1 | 	sub	fp, #16
11e5c                 | LR__1441
11e5c     08 4E 05 F1 | 	add	fp, #8
11e60     A7 3A 68 FC | 	wrlong	#29, fp
11e64     08 4E 05 F1 | 	add	fp, #8
11e68     A7 12 02 FB | 	rdlong	arg01, fp
11e6c     10 4E 85 F1 | 	sub	fp, #16
11e70     A7 12 62 FC | 	wrlong	arg01, fp
11e74     A7 12 02 F6 | 	mov	arg01, fp
11e78     24 B9 BF FD | 	call	#_push
11e7c     A7 F0 03 F6 | 	mov	ptra, fp
11e80     B2 00 A0 FD | 	call	#popregs_
11e84                 | _do_dpeek_ret
11e84     2D 00 64 FD | 	ret
11e88                 | 
11e88                 | ' 
11e88                 | ' '-------------------- dpoke
11e88                 | ' 
11e88                 | ' sub do_dpoke
11e88                 | _do_dpoke
11e88     01 4A 05 F6 | 	mov	COUNT_, #1
11e8c     A8 00 A0 FD | 	call	#pushregs_
11e90     20 F0 07 F1 | 	add	ptra, #32
11e94     70 B8 BF FD | 	call	#_pop
11e98     FD 14 02 F6 | 	mov	arg02, result1
11e9c     FE 12 02 F6 | 	mov	arg01, result2
11ea0     FF 26 02 F6 | 	mov	local01, result3
11ea4     A7 14 62 FC | 	wrlong	arg02, fp
11ea8     04 4E 05 F1 | 	add	fp, #4
11eac     A7 12 62 FC | 	wrlong	arg01, fp
11eb0     04 4E 05 F1 | 	add	fp, #4
11eb4     A7 26 62 FC | 	wrlong	local01, fp
11eb8     08 4E 85 F1 | 	sub	fp, #8
11ebc     48 B8 BF FD | 	call	#_pop
11ec0     FF 26 02 F6 | 	mov	local01, result3
11ec4     0C 4E 05 F1 | 	add	fp, #12
11ec8     A7 FA 61 FC | 	wrlong	result1, fp
11ecc     04 4E 05 F1 | 	add	fp, #4
11ed0     A7 FC 61 FC | 	wrlong	result2, fp
11ed4     04 4E 05 F1 | 	add	fp, #4
11ed8     A7 26 62 FC | 	wrlong	local01, fp
11edc     08 4E 85 F1 | 	sub	fp, #8
11ee0     A7 12 02 F6 | 	mov	arg01, fp
11ee4     0C 4E 85 F1 | 	sub	fp, #12
11ee8     00 BA BF FD | 	call	#_converttoint
11eec     18 4E 05 F1 | 	add	fp, #24
11ef0     A7 FA 61 FC | 	wrlong	result1, fp
11ef4     18 4E 85 F1 | 	sub	fp, #24
11ef8     A7 12 02 F6 | 	mov	arg01, fp
11efc     EC B9 BF FD | 	call	#_converttoint
11f00     1C 4E 05 F1 | 	add	fp, #28
11f04     A7 FA 61 FC | 	wrlong	result1, fp
11f08                 | ' 
11f08                 | ' t1=pop() 'value
11f08                 | ' t2=pop() 
11f08                 | ' a=converttoint(t2) : v=converttoint(t1)
11f08                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11f08     04 4E 85 F1 | 	sub	fp, #4
11f0c     A7 26 02 FB | 	rdlong	local01, fp
11f10     18 4E 85 F1 | 	sub	fp, #24
11f14     00 04 00 FF 
11f18     00 26 16 F2 | 	cmp	local01, ##524288 wc
11f1c     1C 00 90 3D |  if_ae	jmp	#LR__1450
11f20     18 4E 05 F1 | 	add	fp, #24
11f24     A7 12 02 FB | 	rdlong	arg01, fp
11f28     04 4E 05 F1 | 	add	fp, #4
11f2c     A7 14 02 FB | 	rdlong	arg02, fp
11f30     1C 4E 85 F1 | 	sub	fp, #28
11f34     09 15 52 FC | 	wrword	arg02, arg01
11f38     18 00 90 FD | 	jmp	#LR__1451
11f3c                 | LR__1450
11f3c     18 4E 05 F1 | 	add	fp, #24
11f40     A7 12 02 FB | 	rdlong	arg01, fp
11f44     04 4E 05 F1 | 	add	fp, #4
11f48     A7 14 02 FB | 	rdlong	arg02, fp
11f4c     1C 4E 85 F1 | 	sub	fp, #28
11f50     54 18 B1 FD | 	call	#_psdpoke
11f54                 | LR__1451
11f54     A7 F0 03 F6 | 	mov	ptra, fp
11f58     B2 00 A0 FD | 	call	#popregs_
11f5c                 | _do_dpoke_ret
11f5c     2D 00 64 FD | 	ret
11f60                 | 
11f60                 | ' '-------------------- draw
11f60                 | ' 
11f60                 | ' sub do_draw
11f60                 | _do_draw
11f60     00 4A 05 F6 | 	mov	COUNT_, #0
11f64     A8 00 A0 FD | 	call	#pushregs_
11f68     20 F0 07 F1 | 	add	ptra, #32
11f6c     98 B7 BF FD | 	call	#_pop
11f70     FD 1A 02 F6 | 	mov	arg05, result1
11f74     FE 18 02 F6 | 	mov	arg04, result2
11f78     FF 16 02 F6 | 	mov	arg03, result3
11f7c     0C 4E 05 F1 | 	add	fp, #12
11f80     A7 1A 62 FC | 	wrlong	arg05, fp
11f84     04 4E 05 F1 | 	add	fp, #4
11f88     A7 18 62 FC | 	wrlong	arg04, fp
11f8c     04 4E 05 F1 | 	add	fp, #4
11f90     A7 16 62 FC | 	wrlong	arg03, fp
11f94     14 4E 85 F1 | 	sub	fp, #20
11f98     6C B7 BF FD | 	call	#_pop
11f9c     FF 1A 02 F6 | 	mov	arg05, result3
11fa0     A7 FA 61 FC | 	wrlong	result1, fp
11fa4     04 4E 05 F1 | 	add	fp, #4
11fa8     A7 FC 61 FC | 	wrlong	result2, fp
11fac     04 4E 05 F1 | 	add	fp, #4
11fb0     A7 1A 62 FC | 	wrlong	arg05, fp
11fb4     08 4E 85 F1 | 	sub	fp, #8
11fb8     A7 12 02 F6 | 	mov	arg01, fp
11fbc     2C B9 BF FD | 	call	#_converttoint
11fc0     18 4E 05 F1 | 	add	fp, #24
11fc4     A7 FA 61 FC | 	wrlong	result1, fp
11fc8     0C 4E 85 F1 | 	sub	fp, #12
11fcc     A7 12 02 F6 | 	mov	arg01, fp
11fd0     0C 4E 85 F1 | 	sub	fp, #12
11fd4     14 B9 BF FD | 	call	#_converttoint
11fd8     1C 4E 05 F1 | 	add	fp, #28
11fdc     A7 FA 61 FC | 	wrlong	result1, fp
11fe0     37 00 00 FF 
11fe4     2C E4 05 F1 | 	add	objptr, ##28204
11fe8     F2 12 02 FB | 	rdlong	arg01, objptr
11fec     04 E4 05 F1 | 	add	objptr, #4
11ff0     F2 14 02 FB | 	rdlong	arg02, objptr
11ff4     04 4E 85 F1 | 	sub	fp, #4
11ff8     A7 16 02 FB | 	rdlong	arg03, fp
11ffc     FD 18 02 F6 | 	mov	arg04, result1
12000     18 4E 85 F1 | 	sub	fp, #24
12004     08 E4 85 F1 | 	sub	objptr, #8
12008     F2 1A 02 FB | 	rdlong	arg05, objptr
1200c     37 00 00 FF 
12010     28 E4 85 F1 | 	sub	objptr, ##28200
12014     0C 29 B1 FD | 	call	#_hg010b_spin2_draw
12018     18 4E 05 F1 | 	add	fp, #24
1201c     A7 1A 02 FB | 	rdlong	arg05, fp
12020     37 00 00 FF 
12024     2C E4 05 F1 | 	add	objptr, ##28204
12028     F2 1A 62 FC | 	wrlong	arg05, objptr
1202c     04 4E 05 F1 | 	add	fp, #4
12030     A7 1A 02 FB | 	rdlong	arg05, fp
12034     1C 4E 85 F1 | 	sub	fp, #28
12038     04 E4 05 F1 | 	add	objptr, #4
1203c     F2 1A 62 FC | 	wrlong	arg05, objptr
12040     37 00 00 FF 
12044     30 E4 85 F1 | 	sub	objptr, ##28208
12048     A7 F0 03 F6 | 	mov	ptra, fp
1204c     B2 00 A0 FD | 	call	#popregs_
12050                 | _do_draw_ret
12050     2D 00 64 FD | 	ret
12054                 | 
12054                 | ' 
12054                 | ' '-------------------- else
12054                 | ' 
12054                 | ' sub do_else
12054                 | _do_else
12054     4A 00 00 FF 
12058     7C E4 05 F1 | 	add	objptr, ##38012
1205c     F2 00 02 FB | 	rdlong	_var01, objptr
12060     01 00 86 F1 | 	sub	_var01, #1
12064     04 E4 05 F1 | 	add	objptr, #4
12068     F2 00 62 FC | 	wrlong	_var01, objptr
1206c     4A 00 00 FF 
12070     80 E4 85 F1 | 	sub	objptr, ##38016
12074                 | _do_else_ret
12074     2D 00 64 FD | 	ret
12078                 | 
12078                 | ' 
12078                 | ' '-------------------- end
12078                 | ' 
12078                 | ' sub do_end
12078                 | _do_end
12078     4A 00 00 FF 
1207c     7C E4 05 F1 | 	add	objptr, ##38012
12080     F2 00 02 FB | 	rdlong	_var01, objptr
12084     01 00 86 F1 | 	sub	_var01, #1
12088     04 E4 05 F1 | 	add	objptr, #4
1208c     F2 00 62 FC | 	wrlong	_var01, objptr
12090     06 00 00 FF 
12094     38 E4 05 F1 | 	add	objptr, ##3128
12098     FF FF BF FF 
1209c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
120a0     50 00 00 FF 
120a4     B8 E4 85 F1 | 	sub	objptr, ##41144
120a8                 | _do_end_ret
120a8     2D 00 64 FD | 	ret
120ac                 | 
120ac                 | ' 
120ac                 | ' '-------------------- enter
120ac                 | ' 
120ac                 | ' sub do_enter
120ac                 | _do_enter
120ac     02 00 00 FF 
120b0     D2 12 06 F6 | 	mov	arg01, ##1234
120b4     AC 2F B0 FD | 	call	#_do_load
120b8                 | _do_enter_ret
120b8     2D 00 64 FD | 	ret
120bc                 | 
120bc                 | ' 
120bc                 | ' '------------------- error processing
120bc                 | ' 
120bc                 | ' sub do_error
120bc                 | _do_error
120bc     01 4A 05 F6 | 	mov	COUNT_, #1
120c0     A8 00 A0 FD | 	call	#pushregs_
120c4     4A 00 00 FF 
120c8     80 E4 05 F1 | 	add	objptr, ##38016
120cc     F2 18 02 FB | 	rdlong	arg04, objptr
120d0     0C 17 02 F6 | 	mov	arg03, arg04
120d4     01 16 66 F0 | 	shl	arg03, #1
120d8     0C 17 02 F1 | 	add	arg03, arg04
120dc     02 16 66 F0 | 	shl	arg03, #2
120e0     03 00 00 FF 
120e4     04 E4 85 F1 | 	sub	objptr, ##1540
120e8     F2 16 02 F1 | 	add	arg03, objptr
120ec     0B 27 02 FB | 	rdlong	local01, arg03
120f0                 | ' r=compiledline(lineptr_e).result.uresult
120f0                 | ' print "Error ";r;": ";errors$(r)
120f0     00 12 06 F6 | 	mov	arg01, #0
120f4     47 00 00 FF 
120f8     7C E4 85 F1 | 	sub	objptr, ##36476
120fc     94 AC B1 FD | 	call	#__system___getiolock_0616
12100     FD 12 02 F6 | 	mov	arg01, result1
12104     64 4F B1 FD | 	call	#__system___lockmem
12108     BA 01 00 FF 
1210c     7C 15 06 F6 | 	mov	arg02, ##@LR__5957
12110     00 12 06 F6 | 	mov	arg01, #0
12114     00 16 06 F6 | 	mov	arg03, #0
12118     44 5C B1 FD | 	call	#__system___basic_print_string
1211c     00 12 06 F6 | 	mov	arg01, #0
12120     13 15 02 F6 | 	mov	arg02, local01
12124     00 16 06 F6 | 	mov	arg03, #0
12128     0A 18 06 F6 | 	mov	arg04, #10
1212c     B4 5C B1 FD | 	call	#__system___basic_print_unsigned
12130     BA 01 00 FF 
12134     83 15 06 F6 | 	mov	arg02, ##@LR__5958
12138     00 12 06 F6 | 	mov	arg01, #0
1213c     00 16 06 F6 | 	mov	arg03, #0
12140     1C 5C B1 FD | 	call	#__system___basic_print_string
12144     02 26 66 F0 | 	shl	local01, #2
12148     45 00 00 FF 
1214c     7C E4 05 F1 | 	add	objptr, ##35452
12150     F2 26 02 F1 | 	add	local01, objptr
12154     13 15 02 FB | 	rdlong	arg02, local01
12158     00 12 06 F6 | 	mov	arg01, #0
1215c     00 16 06 F6 | 	mov	arg03, #0
12160     45 00 00 FF 
12164     7C E4 85 F1 | 	sub	objptr, ##35452
12168     F4 5B B1 FD | 	call	#__system___basic_print_string
1216c     00 12 06 F6 | 	mov	arg01, #0
12170     0A 14 06 F6 | 	mov	arg02, #10
12174     00 16 06 F6 | 	mov	arg03, #0
12178     8C 5B B1 FD | 	call	#__system___basic_print_char
1217c     00 12 06 F6 | 	mov	arg01, #0
12180     10 AC B1 FD | 	call	#__system___getiolock_0616
12184     FD 00 68 FC | 	wrlong	#0, result1
12188     A7 F0 03 F6 | 	mov	ptra, fp
1218c     B2 00 A0 FD | 	call	#popregs_
12190                 | _do_error_ret
12190     2D 00 64 FD | 	ret
12194                 | 
12194                 | ' 
12194                 | ' '-------------------- fcircle
12194                 | ' 
12194                 | ' sub do_fcircle
12194                 | _do_fcircle
12194     02 4A 05 F6 | 	mov	COUNT_, #2
12198     A8 00 A0 FD | 	call	#pushregs_
1219c     24 F0 07 F1 | 	add	ptra, #36
121a0     64 B5 BF FD | 	call	#_pop
121a4     FD 14 02 F6 | 	mov	arg02, result1
121a8     FE 18 02 F6 | 	mov	arg04, result2
121ac     FF 16 02 F6 | 	mov	arg03, result3
121b0     18 4E 05 F1 | 	add	fp, #24
121b4     A7 14 62 FC | 	wrlong	arg02, fp
121b8     04 4E 05 F1 | 	add	fp, #4
121bc     A7 18 62 FC | 	wrlong	arg04, fp
121c0     04 4E 05 F1 | 	add	fp, #4
121c4     A7 16 62 FC | 	wrlong	arg03, fp
121c8     20 4E 85 F1 | 	sub	fp, #32
121cc     38 B5 BF FD | 	call	#_pop
121d0     FD 14 02 F6 | 	mov	arg02, result1
121d4     FE 18 02 F6 | 	mov	arg04, result2
121d8     FF 16 02 F6 | 	mov	arg03, result3
121dc     0C 4E 05 F1 | 	add	fp, #12
121e0     A7 14 62 FC | 	wrlong	arg02, fp
121e4     04 4E 05 F1 | 	add	fp, #4
121e8     A7 18 62 FC | 	wrlong	arg04, fp
121ec     04 4E 05 F1 | 	add	fp, #4
121f0     A7 16 62 FC | 	wrlong	arg03, fp
121f4     14 4E 85 F1 | 	sub	fp, #20
121f8     0C B5 BF FD | 	call	#_pop
121fc     FF 14 02 F6 | 	mov	arg02, result3
12200     A7 FA 61 FC | 	wrlong	result1, fp
12204     04 4E 05 F1 | 	add	fp, #4
12208     A7 FC 61 FC | 	wrlong	result2, fp
1220c     04 4E 05 F1 | 	add	fp, #4
12210     A7 14 62 FC | 	wrlong	arg02, fp
12214     08 4E 85 F1 | 	sub	fp, #8
12218     A7 12 02 F6 | 	mov	arg01, fp
1221c     CC B6 BF FD | 	call	#_converttoint
12220     FD 26 02 F6 | 	mov	local01, result1
12224     0C 4E 05 F1 | 	add	fp, #12
12228     A7 12 02 F6 | 	mov	arg01, fp
1222c     0C 4E 85 F1 | 	sub	fp, #12
12230     B8 B6 BF FD | 	call	#_converttoint
12234     FD 28 02 F6 | 	mov	local02, result1
12238     18 4E 05 F1 | 	add	fp, #24
1223c     A7 12 02 F6 | 	mov	arg01, fp
12240     18 4E 85 F1 | 	sub	fp, #24
12244     A4 B6 BF FD | 	call	#_converttoint
12248     FD 16 02 F6 | 	mov	arg03, result1
1224c     37 00 00 FF 
12250     28 E4 05 F1 | 	add	objptr, ##28200
12254     F2 18 02 FB | 	rdlong	arg04, objptr
12258     37 00 00 FF 
1225c     28 E4 85 F1 | 	sub	objptr, ##28200
12260     13 13 02 F6 | 	mov	arg01, local01
12264     14 15 02 F6 | 	mov	arg02, local02
12268     3C 2B B1 FD | 	call	#_hg010b_spin2_fcircle
1226c     A7 F0 03 F6 | 	mov	ptra, fp
12270     B2 00 A0 FD | 	call	#popregs_
12274                 | _do_fcircle_ret
12274     2D 00 64 FD | 	ret
12278                 | 
12278                 | ' 
12278                 | ' '-------------------- fill
12278                 | ' 
12278                 | ' sub do_fill
12278                 | _do_fill
12278     03 4A 05 F6 | 	mov	COUNT_, #3
1227c     A8 00 A0 FD | 	call	#pushregs_
12280     30 F0 07 F1 | 	add	ptra, #48
12284     80 B4 BF FD | 	call	#_pop
12288     FD 16 02 F6 | 	mov	arg03, result1
1228c     FE 14 02 F6 | 	mov	arg02, result2
12290     FF 18 02 F6 | 	mov	arg04, result3
12294     24 4E 05 F1 | 	add	fp, #36
12298     A7 16 62 FC | 	wrlong	arg03, fp
1229c     04 4E 05 F1 | 	add	fp, #4
122a0     A7 14 62 FC | 	wrlong	arg02, fp
122a4     04 4E 05 F1 | 	add	fp, #4
122a8     A7 18 62 FC | 	wrlong	arg04, fp
122ac     2C 4E 85 F1 | 	sub	fp, #44
122b0     54 B4 BF FD | 	call	#_pop
122b4     FD 16 02 F6 | 	mov	arg03, result1
122b8     FE 14 02 F6 | 	mov	arg02, result2
122bc     FF 18 02 F6 | 	mov	arg04, result3
122c0     18 4E 05 F1 | 	add	fp, #24
122c4     A7 16 62 FC | 	wrlong	arg03, fp
122c8     04 4E 05 F1 | 	add	fp, #4
122cc     A7 14 62 FC | 	wrlong	arg02, fp
122d0     04 4E 05 F1 | 	add	fp, #4
122d4     A7 18 62 FC | 	wrlong	arg04, fp
122d8     20 4E 85 F1 | 	sub	fp, #32
122dc     28 B4 BF FD | 	call	#_pop
122e0     FD 16 02 F6 | 	mov	arg03, result1
122e4     FE 14 02 F6 | 	mov	arg02, result2
122e8     FF 18 02 F6 | 	mov	arg04, result3
122ec     0C 4E 05 F1 | 	add	fp, #12
122f0     A7 16 62 FC | 	wrlong	arg03, fp
122f4     04 4E 05 F1 | 	add	fp, #4
122f8     A7 14 62 FC | 	wrlong	arg02, fp
122fc     04 4E 05 F1 | 	add	fp, #4
12300     A7 18 62 FC | 	wrlong	arg04, fp
12304     14 4E 85 F1 | 	sub	fp, #20
12308     FC B3 BF FD | 	call	#_pop
1230c     FF 16 02 F6 | 	mov	arg03, result3
12310     A7 FA 61 FC | 	wrlong	result1, fp
12314     04 4E 05 F1 | 	add	fp, #4
12318     A7 FC 61 FC | 	wrlong	result2, fp
1231c     04 4E 05 F1 | 	add	fp, #4
12320     A7 16 62 FC | 	wrlong	arg03, fp
12324     08 4E 85 F1 | 	sub	fp, #8
12328     A7 12 02 F6 | 	mov	arg01, fp
1232c     BC B5 BF FD | 	call	#_converttoint
12330     FD 26 02 F6 | 	mov	local01, result1
12334     0C 4E 05 F1 | 	add	fp, #12
12338     A7 12 02 F6 | 	mov	arg01, fp
1233c     0C 4E 85 F1 | 	sub	fp, #12
12340     A8 B5 BF FD | 	call	#_converttoint
12344     FD 28 02 F6 | 	mov	local02, result1
12348     18 4E 05 F1 | 	add	fp, #24
1234c     A7 12 02 F6 | 	mov	arg01, fp
12350     18 4E 85 F1 | 	sub	fp, #24
12354     94 B5 BF FD | 	call	#_converttoint
12358     FD 2A 02 F6 | 	mov	local03, result1
1235c     24 4E 05 F1 | 	add	fp, #36
12360     A7 12 02 F6 | 	mov	arg01, fp
12364     24 4E 85 F1 | 	sub	fp, #36
12368     80 B5 BF FD | 	call	#_converttoint
1236c     FD 18 02 F6 | 	mov	arg04, result1
12370     13 13 02 F6 | 	mov	arg01, local01
12374     14 15 02 F6 | 	mov	arg02, local02
12378     15 17 02 F6 | 	mov	arg03, local03
1237c     94 27 B1 FD | 	call	#_hg010b_spin2_fill
12380     A7 F0 03 F6 | 	mov	ptra, fp
12384     B2 00 A0 FD | 	call	#popregs_
12388                 | _do_fill_ret
12388     2D 00 64 FD | 	ret
1238c                 | 
1238c                 | ' 
1238c                 | ' '-------------------- font
1238c                 | ' 
1238c                 | ' sub do_font
1238c                 | _do_font
1238c     03 4A 05 F6 | 	mov	COUNT_, #3
12390     A8 00 A0 FD | 	call	#pushregs_
12394     70 B3 BF FD | 	call	#_pop
12398     FD 26 02 F6 | 	mov	local01, result1
1239c     FE 28 02 F6 | 	mov	local02, result2
123a0     FF 2A 02 F6 | 	mov	local03, result3
123a4                 | ' 
123a4                 | ' t1=pop() 
123a4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
123a4     1E 2A 0E F2 | 	cmp	local03, #30 wz
123a8     10 00 90 5D |  if_ne	jmp	#LR__1460
123ac     13 13 02 F6 | 	mov	arg01, local01
123b0     00 14 06 F6 | 	mov	arg02, #0
123b4     F4 7F B1 FD | 	call	#__system___float_tointeger
123b8     FD 26 02 F6 | 	mov	local01, result1
123bc                 | LR__1460
123bc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
123bc     1F 2A 0E F2 | 	cmp	local03, #31 wz
123c0     18 00 90 5D |  if_ne	jmp	#LR__1461
123c4     13 13 02 F6 | 	mov	arg01, local01
123c8     24 83 B1 FD | 	call	#__system____builtin_atof
123cc     FD 12 02 F6 | 	mov	arg01, result1
123d0     00 14 06 F6 | 	mov	arg02, #0
123d4     D4 7F B1 FD | 	call	#__system___float_tointeger
123d8     FD 26 02 F6 | 	mov	local01, result1
123dc                 | LR__1461
123dc     37 00 00 FF 
123e0     40 E4 05 F1 | 	add	objptr, ##28224
123e4     F2 26 62 FC | 	wrlong	local01, objptr
123e8     37 00 00 FF 
123ec     40 E4 85 F1 | 	sub	objptr, ##28224
123f0     02 26 66 F0 | 	shl	local01, #2
123f4     13 13 02 F6 | 	mov	arg01, local01
123f8     FC 2D B1 FD | 	call	#_hg010b_spin2_setfontfamily
123fc     A7 F0 03 F6 | 	mov	ptra, fp
12400     B2 00 A0 FD | 	call	#popregs_
12404                 | _do_font_ret
12404     2D 00 64 FD | 	ret
12408                 | 
12408                 | ' 
12408                 | ' '-------------------- for
12408                 | ' 
12408                 | ' sub do_for()
12408                 | _do_for
12408     01 4A 05 F6 | 	mov	COUNT_, #1
1240c     A8 00 A0 FD | 	call	#pushregs_
12410     10 F0 07 F1 | 	add	ptra, #16
12414     50 00 00 FF 
12418     30 E5 05 F1 | 	add	objptr, ##41264
1241c     F2 12 02 FB | 	rdlong	arg01, objptr
12420     01 12 06 F1 | 	add	arg01, #1
12424     F2 12 62 FC | 	wrlong	arg01, objptr
12428     50 00 00 FF 
1242c     30 E5 85 F1 | 	sub	objptr, ##41264
12430     D4 B2 BF FD | 	call	#_pop
12434     A7 FA 61 FC | 	wrlong	result1, fp
12438     04 4E 05 F1 | 	add	fp, #4
1243c     A7 FC 61 FC | 	wrlong	result2, fp
12440     04 4E 05 F1 | 	add	fp, #4
12444     A7 FE 61 FC | 	wrlong	result3, fp
12448     08 4E 85 F1 | 	sub	fp, #8
1244c     50 00 00 FF 
12450     30 E5 05 F1 | 	add	objptr, ##41264
12454     F2 12 02 FB | 	rdlong	arg01, objptr
12458     09 27 02 F6 | 	mov	local01, arg01
1245c     02 26 66 F0 | 	shl	local01, #2
12460     09 27 02 F1 | 	add	local01, arg01
12464     02 26 66 F0 | 	shl	local01, #2
12468     06 00 00 FF 
1246c     98 E4 85 F1 | 	sub	objptr, ##3224
12470     F2 26 02 F1 | 	add	local01, objptr
12474     A7 12 02 FB | 	rdlong	arg01, fp
12478     08 26 06 F1 | 	add	local01, #8
1247c     13 13 62 FC | 	wrlong	arg01, local01
12480     4A 00 00 FF 
12484     98 E4 85 F1 | 	sub	objptr, ##38040
12488     7C B2 BF FD | 	call	#_pop
1248c     A7 FA 61 FC | 	wrlong	result1, fp
12490     04 4E 05 F1 | 	add	fp, #4
12494     A7 FC 61 FC | 	wrlong	result2, fp
12498     04 4E 05 F1 | 	add	fp, #4
1249c     A7 FE 61 FC | 	wrlong	result3, fp
124a0     08 4E 85 F1 | 	sub	fp, #8
124a4     50 00 00 FF 
124a8     30 E5 05 F1 | 	add	objptr, ##41264
124ac     F2 12 02 FB | 	rdlong	arg01, objptr
124b0     09 27 02 F6 | 	mov	local01, arg01
124b4     02 26 66 F0 | 	shl	local01, #2
124b8     09 27 02 F1 | 	add	local01, arg01
124bc     02 26 66 F0 | 	shl	local01, #2
124c0     06 00 00 FF 
124c4     98 E4 85 F1 | 	sub	objptr, ##3224
124c8     F2 26 02 F1 | 	add	local01, objptr
124cc     A7 12 02 F6 | 	mov	arg01, fp
124d0     4A 00 00 FF 
124d4     98 E4 85 F1 | 	sub	objptr, ##38040
124d8     10 B4 BF FD | 	call	#_converttoint
124dc     FD 12 02 F6 | 	mov	arg01, result1
124e0     0C 26 06 F1 | 	add	local01, #12
124e4     13 13 62 FC | 	wrlong	arg01, local01
124e8     1C B2 BF FD | 	call	#_pop
124ec     A7 FA 61 FC | 	wrlong	result1, fp
124f0     04 4E 05 F1 | 	add	fp, #4
124f4     A7 FC 61 FC | 	wrlong	result2, fp
124f8     04 4E 05 F1 | 	add	fp, #4
124fc     A7 FE 61 FC | 	wrlong	result3, fp
12500     08 4E 85 F1 | 	sub	fp, #8
12504     50 00 00 FF 
12508     30 E5 05 F1 | 	add	objptr, ##41264
1250c     F2 12 02 FB | 	rdlong	arg01, objptr
12510     09 27 02 F6 | 	mov	local01, arg01
12514     02 26 66 F0 | 	shl	local01, #2
12518     09 27 02 F1 | 	add	local01, arg01
1251c     02 26 66 F0 | 	shl	local01, #2
12520     06 00 00 FF 
12524     98 E4 85 F1 | 	sub	objptr, ##3224
12528     F2 26 02 F1 | 	add	local01, objptr
1252c     A7 12 02 F6 | 	mov	arg01, fp
12530     4A 00 00 FF 
12534     98 E4 85 F1 | 	sub	objptr, ##38040
12538     B0 B3 BF FD | 	call	#_converttoint
1253c     10 26 06 F1 | 	add	local01, #16
12540     13 FB 61 FC | 	wrlong	result1, local01
12544                 | ' fortop+=1
12544                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12544                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12544                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12544                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12544     4A 00 00 FF 
12548     80 E4 05 F1 | 	add	objptr, ##38016
1254c     F2 12 02 FB | 	rdlong	arg01, objptr
12550     09 27 02 F6 | 	mov	local01, arg01
12554     01 26 66 F0 | 	shl	local01, #1
12558     09 27 02 F1 | 	add	local01, arg01
1255c     02 26 66 F0 | 	shl	local01, #2
12560     03 00 00 FF 
12564     04 E4 85 F1 | 	sub	objptr, ##1540
12568     F2 26 02 F1 | 	add	local01, objptr
1256c     08 26 06 F1 | 	add	local01, #8
12570     13 27 02 FB | 	rdlong	local01, local01
12574     FE 27 0E F2 | 	cmp	local01, #510 wz
12578     47 00 00 FF 
1257c     7C E4 85 F1 | 	sub	objptr, ##36476
12580     70 00 90 5D |  if_ne	jmp	#LR__1470
12584     50 00 00 FF 
12588     30 E5 05 F1 | 	add	objptr, ##41264
1258c     F2 12 02 FB | 	rdlong	arg01, objptr
12590     09 27 02 F6 | 	mov	local01, arg01
12594     02 26 66 F0 | 	shl	local01, #2
12598     09 27 02 F1 | 	add	local01, arg01
1259c     02 26 66 F0 | 	shl	local01, #2
125a0     06 00 00 FF 
125a4     98 E4 85 F1 | 	sub	objptr, ##3224
125a8     F2 26 02 F1 | 	add	local01, objptr
125ac     06 00 00 FF 
125b0     20 E4 05 F1 | 	add	objptr, ##3104
125b4     F2 12 02 FB | 	rdlong	arg01, objptr
125b8     13 13 62 FC | 	wrlong	arg01, local01
125bc     78 E4 05 F1 | 	add	objptr, #120
125c0     F2 12 02 FB | 	rdlong	arg01, objptr
125c4     09 27 02 F6 | 	mov	local01, arg01
125c8     02 26 66 F0 | 	shl	local01, #2
125cc     09 27 02 F1 | 	add	local01, arg01
125d0     02 26 66 F0 | 	shl	local01, #2
125d4     06 00 00 FF 
125d8     98 E4 85 F1 | 	sub	objptr, ##3224
125dc     F2 26 02 F1 | 	add	local01, objptr
125e0     04 26 06 F1 | 	add	local01, #4
125e4     13 01 68 FC | 	wrlong	#0, local01
125e8     4A 00 00 FF 
125ec     98 E4 85 F1 | 	sub	objptr, ##38040
125f0     78 00 90 FD | 	jmp	#LR__1471
125f4                 | LR__1470
125f4     50 00 00 FF 
125f8     30 E5 05 F1 | 	add	objptr, ##41264
125fc     F2 12 02 FB | 	rdlong	arg01, objptr
12600     09 27 02 F6 | 	mov	local01, arg01
12604     02 26 66 F0 | 	shl	local01, #2
12608     09 27 02 F1 | 	add	local01, arg01
1260c     02 26 66 F0 | 	shl	local01, #2
12610     06 00 00 FF 
12614     98 E4 85 F1 | 	sub	objptr, ##3224
12618     F2 26 02 F1 | 	add	local01, objptr
1261c     06 00 00 FF 
12620     28 E4 05 F1 | 	add	objptr, ##3112
12624     F2 12 02 FB | 	rdlong	arg01, objptr
12628     13 13 62 FC | 	wrlong	arg01, local01
1262c     70 E4 05 F1 | 	add	objptr, #112
12630     F2 12 02 FB | 	rdlong	arg01, objptr
12634     09 27 02 F6 | 	mov	local01, arg01
12638     02 26 66 F0 | 	shl	local01, #2
1263c     09 27 02 F1 | 	add	local01, arg01
12640     02 26 66 F0 | 	shl	local01, #2
12644     06 00 00 FF 
12648     98 E4 85 F1 | 	sub	objptr, ##3224
1264c     F2 26 02 F1 | 	add	local01, objptr
12650     18 E4 85 F1 | 	sub	objptr, #24
12654     F2 12 02 FB | 	rdlong	arg01, objptr
12658     4A 00 00 FF 
1265c     80 E4 85 F1 | 	sub	objptr, ##38016
12660     01 12 06 F1 | 	add	arg01, #1
12664     04 26 06 F1 | 	add	local01, #4
12668     13 13 62 FC | 	wrlong	arg01, local01
1266c                 | LR__1471
1266c     A7 F0 03 F6 | 	mov	ptra, fp
12670     B2 00 A0 FD | 	call	#popregs_
12674                 | _do_for_ret
12674     2D 00 64 FD | 	ret
12678                 | 
12678                 | ' 
12678                 | ' '-------------------- frame
12678                 | ' 
12678                 | ' sub do_frame
12678                 | _do_frame
12678     03 4A 05 F6 | 	mov	COUNT_, #3
1267c     A8 00 A0 FD | 	call	#pushregs_
12680     30 F0 07 F1 | 	add	ptra, #48
12684     80 B0 BF FD | 	call	#_pop
12688     FD 16 02 F6 | 	mov	arg03, result1
1268c     FE 14 02 F6 | 	mov	arg02, result2
12690     FF 1A 02 F6 | 	mov	arg05, result3
12694     24 4E 05 F1 | 	add	fp, #36
12698     A7 16 62 FC | 	wrlong	arg03, fp
1269c     04 4E 05 F1 | 	add	fp, #4
126a0     A7 14 62 FC | 	wrlong	arg02, fp
126a4     04 4E 05 F1 | 	add	fp, #4
126a8     A7 1A 62 FC | 	wrlong	arg05, fp
126ac     2C 4E 85 F1 | 	sub	fp, #44
126b0     54 B0 BF FD | 	call	#_pop
126b4     FD 16 02 F6 | 	mov	arg03, result1
126b8     FE 14 02 F6 | 	mov	arg02, result2
126bc     FF 1A 02 F6 | 	mov	arg05, result3
126c0     18 4E 05 F1 | 	add	fp, #24
126c4     A7 16 62 FC | 	wrlong	arg03, fp
126c8     04 4E 05 F1 | 	add	fp, #4
126cc     A7 14 62 FC | 	wrlong	arg02, fp
126d0     04 4E 05 F1 | 	add	fp, #4
126d4     A7 1A 62 FC | 	wrlong	arg05, fp
126d8     20 4E 85 F1 | 	sub	fp, #32
126dc     28 B0 BF FD | 	call	#_pop
126e0     FD 16 02 F6 | 	mov	arg03, result1
126e4     FE 14 02 F6 | 	mov	arg02, result2
126e8     FF 1A 02 F6 | 	mov	arg05, result3
126ec     0C 4E 05 F1 | 	add	fp, #12
126f0     A7 16 62 FC | 	wrlong	arg03, fp
126f4     04 4E 05 F1 | 	add	fp, #4
126f8     A7 14 62 FC | 	wrlong	arg02, fp
126fc     04 4E 05 F1 | 	add	fp, #4
12700     A7 1A 62 FC | 	wrlong	arg05, fp
12704     14 4E 85 F1 | 	sub	fp, #20
12708     FC AF BF FD | 	call	#_pop
1270c     FF 16 02 F6 | 	mov	arg03, result3
12710     A7 FA 61 FC | 	wrlong	result1, fp
12714     04 4E 05 F1 | 	add	fp, #4
12718     A7 FC 61 FC | 	wrlong	result2, fp
1271c     04 4E 05 F1 | 	add	fp, #4
12720     A7 16 62 FC | 	wrlong	arg03, fp
12724     08 4E 85 F1 | 	sub	fp, #8
12728     A7 12 02 F6 | 	mov	arg01, fp
1272c     BC B1 BF FD | 	call	#_converttoint
12730     FD 26 02 F6 | 	mov	local01, result1
12734     0C 4E 05 F1 | 	add	fp, #12
12738     A7 12 02 F6 | 	mov	arg01, fp
1273c     0C 4E 85 F1 | 	sub	fp, #12
12740     A8 B1 BF FD | 	call	#_converttoint
12744     FD 28 02 F6 | 	mov	local02, result1
12748     18 4E 05 F1 | 	add	fp, #24
1274c     A7 12 02 F6 | 	mov	arg01, fp
12750     18 4E 85 F1 | 	sub	fp, #24
12754     94 B1 BF FD | 	call	#_converttoint
12758     FD 2A 02 F6 | 	mov	local03, result1
1275c     24 4E 05 F1 | 	add	fp, #36
12760     A7 12 02 F6 | 	mov	arg01, fp
12764     24 4E 85 F1 | 	sub	fp, #36
12768     80 B1 BF FD | 	call	#_converttoint
1276c     FD 18 02 F6 | 	mov	arg04, result1
12770     37 00 00 FF 
12774     28 E4 05 F1 | 	add	objptr, ##28200
12778     F2 1A 02 FB | 	rdlong	arg05, objptr
1277c     37 00 00 FF 
12780     28 E4 85 F1 | 	sub	objptr, ##28200
12784     13 13 02 F6 | 	mov	arg01, local01
12788     14 15 02 F6 | 	mov	arg02, local02
1278c     15 17 02 F6 | 	mov	arg03, local03
12790     6C 28 B1 FD | 	call	#_hg010b_spin2_frame
12794     A7 F0 03 F6 | 	mov	ptra, fp
12798     B2 00 A0 FD | 	call	#popregs_
1279c                 | _do_frame_ret
1279c     2D 00 64 FD | 	ret
127a0                 | 
127a0                 | ' 
127a0                 | ' '-------------------- framebuf
127a0                 | ' 
127a0                 | ' sub do_framebuf
127a0                 | _do_framebuf
127a0     00 4A 05 F6 | 	mov	COUNT_, #0
127a4     A8 00 A0 FD | 	call	#pushregs_
127a8     0C F0 07 F1 | 	add	ptra, #12
127ac     08 4E 05 F1 | 	add	fp, #8
127b0     A7 3A 68 FC | 	wrlong	#29, fp
127b4     F2 12 02 FB | 	rdlong	arg01, objptr
127b8     08 4E 85 F1 | 	sub	fp, #8
127bc     A7 12 62 FC | 	wrlong	arg01, fp
127c0     A7 12 02 F6 | 	mov	arg01, fp
127c4     D8 AF BF FD | 	call	#_push
127c8     A7 F0 03 F6 | 	mov	ptra, fp
127cc     B2 00 A0 FD | 	call	#popregs_
127d0                 | _do_framebuf_ret
127d0     2D 00 64 FD | 	ret
127d4                 | 
127d4                 | ' '-------------------- fre
127d4                 | ' 
127d4                 | ' sub do_fre
127d4                 | _do_fre
127d4     01 4A 05 F6 | 	mov	COUNT_, #1
127d8     A8 00 A0 FD | 	call	#pushregs_
127dc     0C F0 07 F1 | 	add	ptra, #12
127e0     52 00 00 FF 
127e4     98 E4 05 F1 | 	add	objptr, ##42136
127e8     F2 12 02 FB | 	rdlong	arg01, objptr
127ec     0F 00 00 FF 
127f0     3C E4 85 F1 | 	sub	objptr, ##7740
127f4     F2 26 02 FB | 	rdlong	local01, objptr
127f8     13 13 82 F1 | 	sub	arg01, local01
127fc     0F 00 00 FF 
12800     B4 E4 05 F1 | 	add	objptr, ##7860
12804     F2 12 62 FC | 	wrlong	arg01, objptr
12808     08 4E 05 F1 | 	add	fp, #8
1280c     A7 3A 68 FC | 	wrlong	#29, fp
12810     08 4E 85 F1 | 	sub	fp, #8
12814     F2 26 02 FB | 	rdlong	local01, objptr
12818     52 00 00 FF 
1281c     10 E5 85 F1 | 	sub	objptr, ##42256
12820     A7 26 62 FC | 	wrlong	local01, fp
12824     A7 12 02 F6 | 	mov	arg01, fp
12828     74 AF BF FD | 	call	#_push
1282c     A7 F0 03 F6 | 	mov	ptra, fp
12830     B2 00 A0 FD | 	call	#popregs_
12834                 | _do_fre_ret
12834     2D 00 64 FD | 	ret
12838                 | 
12838                 | ' 
12838                 | ' '-------------------- get
12838                 | ' 
12838                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12838                 | _do_get
12838     09 4A 05 F6 | 	mov	COUNT_, #9
1283c     A8 00 A0 FD | 	call	#pushregs_
12840     40 F0 07 F1 | 	add	ptra, #64
12844     4A 00 00 FF 
12848     80 E4 05 F1 | 	add	objptr, ##38016
1284c     F2 1A 02 FB | 	rdlong	arg05, objptr
12850     0D 19 02 F6 | 	mov	arg04, arg05
12854     01 18 66 F0 | 	shl	arg04, #1
12858     0D 19 02 F1 | 	add	arg04, arg05
1285c     02 18 66 F0 | 	shl	arg04, #2
12860     03 00 00 FF 
12864     04 E4 85 F1 | 	sub	objptr, ##1540
12868     F2 18 02 F1 | 	add	arg04, objptr
1286c     0C 1B 02 FB | 	rdlong	arg05, arg04
12870     A7 1A 62 FC | 	wrlong	arg05, fp
12874                 | ' 
12874                 | ' numpar=compiledline(lineptr_e).result.uresult
12874                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
12874     04 1A 0E F2 | 	cmp	arg05, #4 wz
12878     47 00 00 FF 
1287c     7C E4 85 F1 | 	sub	objptr, ##36476
12880     48 00 90 5D |  if_ne	jmp	#LR__1480
12884     80 AE BF FD | 	call	#_pop
12888     FF 1A 02 F6 | 	mov	arg05, result3
1288c     1C 4E 05 F1 | 	add	fp, #28
12890     A7 FA 61 FC | 	wrlong	result1, fp
12894     04 4E 05 F1 | 	add	fp, #4
12898     A7 FC 61 FC | 	wrlong	result2, fp
1289c     04 4E 05 F1 | 	add	fp, #4
128a0     A7 1A 62 FC | 	wrlong	arg05, fp
128a4     08 4E 85 F1 | 	sub	fp, #8
128a8     A7 12 02 F6 | 	mov	arg01, fp
128ac     1C 4E 85 F1 | 	sub	fp, #28
128b0     38 B0 BF FD | 	call	#_converttoint
128b4     52 00 00 FF 
128b8     0C E5 05 F1 | 	add	objptr, ##42252
128bc     F2 FA 61 FC | 	wrlong	result1, objptr
128c0     52 00 00 FF 
128c4     0C E5 85 F1 | 	sub	objptr, ##42252
128c8     18 00 90 FD | 	jmp	#LR__1481
128cc                 | LR__1480
128cc     52 00 00 FF 
128d0     0C E5 05 F1 | 	add	objptr, ##42252
128d4     FF FF FF FF 
128d8     F2 FE 6B FC | 	wrlong	##-1, objptr
128dc     52 00 00 FF 
128e0     0C E5 85 F1 | 	sub	objptr, ##42252
128e4                 | LR__1481
128e4                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
128e4     A7 16 02 FB | 	rdlong	arg03, fp
128e8     03 16 56 F2 | 	cmps	arg03, #3 wc
128ec     40 00 90 CD |  if_b	jmp	#LR__1482
128f0     14 AE BF FD | 	call	#_pop
128f4     FF 16 02 F6 | 	mov	arg03, result3
128f8     1C 4E 05 F1 | 	add	fp, #28
128fc     A7 FA 61 FC | 	wrlong	result1, fp
12900     04 4E 05 F1 | 	add	fp, #4
12904     A7 FC 61 FC | 	wrlong	result2, fp
12908     04 4E 05 F1 | 	add	fp, #4
1290c     A7 16 62 FC | 	wrlong	arg03, fp
12910     08 4E 85 F1 | 	sub	fp, #8
12914     A7 12 02 F6 | 	mov	arg01, fp
12918     1C 4E 85 F1 | 	sub	fp, #28
1291c     CC AF BF FD | 	call	#_converttoint
12920     08 4E 05 F1 | 	add	fp, #8
12924     A7 FA 61 FC | 	wrlong	result1, fp
12928     08 4E 85 F1 | 	sub	fp, #8
1292c     0C 00 90 FD | 	jmp	#LR__1483
12930                 | LR__1482
12930     08 4E 05 F1 | 	add	fp, #8
12934     A7 02 68 FC | 	wrlong	#1, fp
12938     08 4E 85 F1 | 	sub	fp, #8
1293c                 | LR__1483
1293c                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
1293c     A7 16 02 FB | 	rdlong	arg03, fp
12940     02 16 56 F2 | 	cmps	arg03, #2 wc
12944     3C 00 90 CD |  if_b	jmp	#LR__1484
12948     BC AD BF FD | 	call	#_pop
1294c     FF 16 02 F6 | 	mov	arg03, result3
12950     1C 4E 05 F1 | 	add	fp, #28
12954     A7 FA 61 FC | 	wrlong	result1, fp
12958     04 4E 05 F1 | 	add	fp, #4
1295c     A7 FC 61 FC | 	wrlong	result2, fp
12960     04 4E 05 F1 | 	add	fp, #4
12964     A7 16 62 FC | 	wrlong	arg03, fp
12968     08 4E 85 F1 | 	sub	fp, #8
1296c     A7 12 02 F6 | 	mov	arg01, fp
12970     1C 4E 85 F1 | 	sub	fp, #28
12974     74 AF BF FD | 	call	#_converttoint
12978     0C 4E 05 F1 | 	add	fp, #12
1297c     A7 FA 61 FC | 	wrlong	result1, fp
12980     0C 4E 85 F1 | 	sub	fp, #12
12984                 | LR__1484
12984     80 AD BF FD | 	call	#_pop
12988     FF 16 02 F6 | 	mov	arg03, result3
1298c     1C 4E 05 F1 | 	add	fp, #28
12990     A7 FA 61 FC | 	wrlong	result1, fp
12994     04 4E 05 F1 | 	add	fp, #4
12998     A7 FC 61 FC | 	wrlong	result2, fp
1299c     04 4E 05 F1 | 	add	fp, #4
129a0     A7 16 62 FC | 	wrlong	arg03, fp
129a4     08 4E 85 F1 | 	sub	fp, #8
129a8     A7 12 02 F6 | 	mov	arg01, fp
129ac     1C 4E 85 F1 | 	sub	fp, #28
129b0     38 AF BF FD | 	call	#_converttoint
129b4     04 4E 05 F1 | 	add	fp, #4
129b8     A7 FA 61 FC | 	wrlong	result1, fp
129bc     10 4E 05 F1 | 	add	fp, #16
129c0     A7 16 02 FB | 	rdlong	arg03, fp
129c4     14 4E 85 F1 | 	sub	fp, #20
129c8     02 16 66 F0 | 	shl	arg03, #2
129cc     50 00 00 FF 
129d0     C4 E4 05 F1 | 	add	objptr, ##41156
129d4     F2 26 02 F6 | 	mov	local01, objptr
129d8     F2 16 02 F1 | 	add	arg03, objptr
129dc     0B 01 68 FC | 	wrlong	#0, arg03
129e0                 | ' t1=pop() : channel=converttoint(t1)
129e0                 | ' getres(j)=0
129e0                 | ' if pos>=0 then
129e0     02 00 00 FF 
129e4     48 E4 05 F1 | 	add	objptr, ##1096
129e8     F2 28 02 FB | 	rdlong	local02, objptr
129ec     52 00 00 FF 
129f0     0C E5 85 F1 | 	sub	objptr, ##42252
129f4     00 28 56 F2 | 	cmps	local02, #0 wc
129f8     F0 01 90 CD |  if_b	jmp	#LR__1491
129fc                 | '   for i=0 to  amount/1024
129fc     10 4E 05 F1 | 	add	fp, #16
12a00     A7 00 68 FC | 	wrlong	#0, fp
12a04     08 4E 85 F1 | 	sub	fp, #8
12a08     A7 2A 02 FB | 	rdlong	local03, fp
12a0c     08 4E 85 F1 | 	sub	fp, #8
12a10     15 2D 52 F6 | 	abs	local04, local03 wc
12a14     0A 2C 46 F0 | 	shr	local04, #10
12a18     16 2D 82 F6 | 	negc	local04, local04
12a1c     01 2C 06 F1 | 	add	local04, #1
12a20                 | LR__1485
12a20     10 4E 05 F1 | 	add	fp, #16
12a24     A7 2A 02 FB | 	rdlong	local03, fp
12a28     10 4E 85 F1 | 	sub	fp, #16
12a2c     16 2B 52 F2 | 	cmps	local03, local04 wc
12a30     9C 03 90 3D |  if_ae	jmp	#LR__1499
12a34                 | '     get #channel,pos+1,block(0),amount,r
12a34     04 4E 05 F1 | 	add	fp, #4
12a38     A7 12 02 FB | 	rdlong	arg01, fp
12a3c     52 00 00 FF 
12a40     0C E5 05 F1 | 	add	objptr, ##42252
12a44     F2 14 02 FB | 	rdlong	arg02, objptr
12a48     01 14 06 F1 | 	add	arg02, #1
12a4c     04 00 00 FF 
12a50     58 E4 85 F1 | 	sub	objptr, ##2136
12a54     F2 16 02 F6 | 	mov	arg03, objptr
12a58     4E 00 00 FF 
12a5c     B4 E4 85 F1 | 	sub	objptr, ##40116
12a60     04 4E 05 F1 | 	add	fp, #4
12a64     A7 18 02 FB | 	rdlong	arg04, fp
12a68     08 4E 85 F1 | 	sub	fp, #8
12a6c     01 1A 06 F6 | 	mov	arg05, #1
12a70     68 54 B1 FD | 	call	#__system___basic_get
12a74     18 4E 05 F1 | 	add	fp, #24
12a78     A7 FA 61 FC | 	wrlong	result1, fp
12a7c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12a7c     0C 4E 85 F1 | 	sub	fp, #12
12a80     A7 28 02 FB | 	rdlong	local02, fp
12a84     0C 4E 85 F1 | 	sub	fp, #12
12a88     00 04 00 FF 
12a8c     00 28 56 F2 | 	cmps	local02, ##524288 wc
12a90     7C 00 90 3D |  if_ae	jmp	#LR__1487
12a94     14 4E 05 F1 | 	add	fp, #20
12a98     A7 00 68 FC | 	wrlong	#0, fp
12a9c     04 4E 05 F1 | 	add	fp, #4
12aa0     A7 2E 02 FB | 	rdlong	local05, fp
12aa4     18 4E 85 F1 | 	sub	fp, #24
12aa8                 | LR__1486
12aa8     14 4E 05 F1 | 	add	fp, #20
12aac     A7 28 02 FB | 	rdlong	local02, fp
12ab0     14 4E 85 F1 | 	sub	fp, #20
12ab4     17 29 52 F2 | 	cmps	local02, local05 wc
12ab8     D8 00 90 3D |  if_ae	jmp	#LR__1490
12abc     0C 4E 05 F1 | 	add	fp, #12
12ac0     A7 12 02 FB | 	rdlong	arg01, fp
12ac4     04 4E 05 F1 | 	add	fp, #4
12ac8     A7 2A 02 FB | 	rdlong	local03, fp
12acc     0A 2A 66 F0 | 	shl	local03, #10
12ad0     15 13 02 F1 | 	add	arg01, local03
12ad4     04 4E 05 F1 | 	add	fp, #4
12ad8     A7 2A 02 FB | 	rdlong	local03, fp
12adc     15 13 02 F1 | 	add	arg01, local03
12ae0     4E 00 00 FF 
12ae4     B4 E4 05 F1 | 	add	objptr, ##40116
12ae8     F2 2A 02 F1 | 	add	local03, objptr
12aec     15 15 C2 FA | 	rdbyte	arg02, local03
12af0     09 15 42 FC | 	wrbyte	arg02, arg01
12af4     4E 00 00 FF 
12af8     B4 E4 85 F1 | 	sub	objptr, ##40116
12afc     A7 2A 02 FB | 	rdlong	local03, fp
12b00     01 2A 06 F1 | 	add	local03, #1
12b04     A7 2A 62 FC | 	wrlong	local03, fp
12b08     14 4E 85 F1 | 	sub	fp, #20
12b0c     98 FF 9F FD | 	jmp	#LR__1486
12b10                 | LR__1487
12b10     14 4E 05 F1 | 	add	fp, #20
12b14     A7 00 68 FC | 	wrlong	#0, fp
12b18     04 4E 05 F1 | 	add	fp, #4
12b1c     A7 30 02 FB | 	rdlong	local06, fp
12b20     18 4E 85 F1 | 	sub	fp, #24
12b24                 | LR__1488
12b24     14 4E 05 F1 | 	add	fp, #20
12b28     A7 28 02 FB | 	rdlong	local02, fp
12b2c     14 4E 85 F1 | 	sub	fp, #20
12b30     18 29 52 F2 | 	cmps	local02, local06 wc
12b34     5C 00 90 3D |  if_ae	jmp	#LR__1489
12b38     0C 4E 05 F1 | 	add	fp, #12
12b3c     A7 12 02 FB | 	rdlong	arg01, fp
12b40     04 4E 05 F1 | 	add	fp, #4
12b44     A7 2E 02 FB | 	rdlong	local05, fp
12b48     0A 2E 66 F0 | 	shl	local05, #10
12b4c     17 13 02 F1 | 	add	arg01, local05
12b50     04 4E 05 F1 | 	add	fp, #4
12b54     A7 2E 02 FB | 	rdlong	local05, fp
12b58     17 13 02 F1 | 	add	arg01, local05
12b5c     14 4E 85 F1 | 	sub	fp, #20
12b60     4E 00 00 FF 
12b64     B4 E4 05 F1 | 	add	objptr, ##40116
12b68     F2 2E 02 F1 | 	add	local05, objptr
12b6c     17 15 C2 FA | 	rdbyte	arg02, local05
12b70     4E 00 00 FF 
12b74     B4 E4 85 F1 | 	sub	objptr, ##40116
12b78     74 0C B1 FD | 	call	#_pspoke
12b7c     14 4E 05 F1 | 	add	fp, #20
12b80     A7 2E 02 FB | 	rdlong	local05, fp
12b84     01 2E 06 F1 | 	add	local05, #1
12b88     A7 2E 62 FC | 	wrlong	local05, fp
12b8c     14 4E 85 F1 | 	sub	fp, #20
12b90     90 FF 9F FD | 	jmp	#LR__1488
12b94                 | LR__1489
12b94                 | LR__1490
12b94     14 4E 05 F1 | 	add	fp, #20
12b98     A7 30 02 FB | 	rdlong	local06, fp
12b9c     18 2B 02 F6 | 	mov	local03, local06
12ba0     02 2A 66 F0 | 	shl	local03, #2
12ba4     50 00 00 FF 
12ba8     C4 E4 05 F1 | 	add	objptr, ##41156
12bac     F2 2A 02 F1 | 	add	local03, objptr
12bb0     02 30 66 F0 | 	shl	local06, #2
12bb4     F2 30 02 F1 | 	add	local06, objptr
12bb8     18 31 02 FB | 	rdlong	local06, local06
12bbc     04 4E 05 F1 | 	add	fp, #4
12bc0     A7 2E 02 FB | 	rdlong	local05, fp
12bc4     17 31 02 F1 | 	add	local06, local05
12bc8     15 31 62 FC | 	wrlong	local06, local03
12bcc     08 4E 85 F1 | 	sub	fp, #8
12bd0     A7 30 02 FB | 	rdlong	local06, fp
12bd4     01 30 06 F1 | 	add	local06, #1
12bd8     A7 30 62 FC | 	wrlong	local06, fp
12bdc     10 4E 85 F1 | 	sub	fp, #16
12be0     50 00 00 FF 
12be4     C4 E4 85 F1 | 	sub	objptr, ##41156
12be8     34 FE 9F FD | 	jmp	#LR__1485
12bec                 | LR__1491
12bec                 | '   for i=0 to  amount/1024
12bec     10 4E 05 F1 | 	add	fp, #16
12bf0     A7 00 68 FC | 	wrlong	#0, fp
12bf4     08 4E 85 F1 | 	sub	fp, #8
12bf8     A7 2A 02 FB | 	rdlong	local03, fp
12bfc     08 4E 85 F1 | 	sub	fp, #8
12c00     15 33 52 F6 | 	abs	local07, local03 wc
12c04     0A 32 46 F0 | 	shr	local07, #10
12c08     19 33 82 F6 | 	negc	local07, local07
12c0c     01 32 06 F1 | 	add	local07, #1
12c10                 | LR__1492
12c10     10 4E 05 F1 | 	add	fp, #16
12c14     A7 2A 02 FB | 	rdlong	local03, fp
12c18     10 4E 85 F1 | 	sub	fp, #16
12c1c     19 2B 52 F2 | 	cmps	local03, local07 wc
12c20     AC 01 90 3D |  if_ae	jmp	#LR__1498
12c24                 | '     get #channel,,block(0),amount,r
12c24     04 4E 05 F1 | 	add	fp, #4
12c28     A7 12 02 FB | 	rdlong	arg01, fp
12c2c     4E 00 00 FF 
12c30     B4 E4 05 F1 | 	add	objptr, ##40116
12c34     F2 16 02 F6 | 	mov	arg03, objptr
12c38     4E 00 00 FF 
12c3c     B4 E4 85 F1 | 	sub	objptr, ##40116
12c40     04 4E 05 F1 | 	add	fp, #4
12c44     A7 18 02 FB | 	rdlong	arg04, fp
12c48     08 4E 85 F1 | 	sub	fp, #8
12c4c     00 14 06 F6 | 	mov	arg02, #0
12c50     01 1A 06 F6 | 	mov	arg05, #1
12c54     84 52 B1 FD | 	call	#__system___basic_get
12c58     18 4E 05 F1 | 	add	fp, #24
12c5c     A7 FA 61 FC | 	wrlong	result1, fp
12c60                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12c60     0C 4E 85 F1 | 	sub	fp, #12
12c64     A7 28 02 FB | 	rdlong	local02, fp
12c68     0C 4E 85 F1 | 	sub	fp, #12
12c6c     00 04 00 FF 
12c70     00 28 56 F2 | 	cmps	local02, ##524288 wc
12c74     7C 00 90 3D |  if_ae	jmp	#LR__1494
12c78     14 4E 05 F1 | 	add	fp, #20
12c7c     A7 00 68 FC | 	wrlong	#0, fp
12c80     04 4E 05 F1 | 	add	fp, #4
12c84     A7 34 02 FB | 	rdlong	local08, fp
12c88     18 4E 85 F1 | 	sub	fp, #24
12c8c                 | LR__1493
12c8c     14 4E 05 F1 | 	add	fp, #20
12c90     A7 28 02 FB | 	rdlong	local02, fp
12c94     14 4E 85 F1 | 	sub	fp, #20
12c98     1A 29 52 F2 | 	cmps	local02, local08 wc
12c9c     D8 00 90 3D |  if_ae	jmp	#LR__1497
12ca0     0C 4E 05 F1 | 	add	fp, #12
12ca4     A7 12 02 FB | 	rdlong	arg01, fp
12ca8     04 4E 05 F1 | 	add	fp, #4
12cac     A7 30 02 FB | 	rdlong	local06, fp
12cb0     0A 30 66 F0 | 	shl	local06, #10
12cb4     18 13 02 F1 | 	add	arg01, local06
12cb8     04 4E 05 F1 | 	add	fp, #4
12cbc     A7 30 02 FB | 	rdlong	local06, fp
12cc0     18 13 02 F1 | 	add	arg01, local06
12cc4     4E 00 00 FF 
12cc8     B4 E4 05 F1 | 	add	objptr, ##40116
12ccc     F2 30 02 F1 | 	add	local06, objptr
12cd0     18 15 C2 FA | 	rdbyte	arg02, local06
12cd4     09 15 42 FC | 	wrbyte	arg02, arg01
12cd8     4E 00 00 FF 
12cdc     B4 E4 85 F1 | 	sub	objptr, ##40116
12ce0     A7 30 02 FB | 	rdlong	local06, fp
12ce4     01 30 06 F1 | 	add	local06, #1
12ce8     A7 30 62 FC | 	wrlong	local06, fp
12cec     14 4E 85 F1 | 	sub	fp, #20
12cf0     98 FF 9F FD | 	jmp	#LR__1493
12cf4                 | LR__1494
12cf4     14 4E 05 F1 | 	add	fp, #20
12cf8     A7 00 68 FC | 	wrlong	#0, fp
12cfc     04 4E 05 F1 | 	add	fp, #4
12d00     A7 36 02 FB | 	rdlong	local09, fp
12d04     18 4E 85 F1 | 	sub	fp, #24
12d08                 | LR__1495
12d08     14 4E 05 F1 | 	add	fp, #20
12d0c     A7 28 02 FB | 	rdlong	local02, fp
12d10     14 4E 85 F1 | 	sub	fp, #20
12d14     1B 29 52 F2 | 	cmps	local02, local09 wc
12d18     5C 00 90 3D |  if_ae	jmp	#LR__1496
12d1c     0C 4E 05 F1 | 	add	fp, #12
12d20     A7 12 02 FB | 	rdlong	arg01, fp
12d24     04 4E 05 F1 | 	add	fp, #4
12d28     A7 34 02 FB | 	rdlong	local08, fp
12d2c     0A 34 66 F0 | 	shl	local08, #10
12d30     1A 13 02 F1 | 	add	arg01, local08
12d34     04 4E 05 F1 | 	add	fp, #4
12d38     A7 34 02 FB | 	rdlong	local08, fp
12d3c     1A 13 02 F1 | 	add	arg01, local08
12d40     14 4E 85 F1 | 	sub	fp, #20
12d44     4E 00 00 FF 
12d48     B4 E4 05 F1 | 	add	objptr, ##40116
12d4c     F2 34 02 F1 | 	add	local08, objptr
12d50     1A 15 C2 FA | 	rdbyte	arg02, local08
12d54     4E 00 00 FF 
12d58     B4 E4 85 F1 | 	sub	objptr, ##40116
12d5c     90 0A B1 FD | 	call	#_pspoke
12d60     14 4E 05 F1 | 	add	fp, #20
12d64     A7 34 02 FB | 	rdlong	local08, fp
12d68     01 34 06 F1 | 	add	local08, #1
12d6c     A7 34 62 FC | 	wrlong	local08, fp
12d70     14 4E 85 F1 | 	sub	fp, #20
12d74     90 FF 9F FD | 	jmp	#LR__1495
12d78                 | LR__1496
12d78                 | LR__1497
12d78     14 4E 05 F1 | 	add	fp, #20
12d7c     A7 36 02 FB | 	rdlong	local09, fp
12d80     1B 31 02 F6 | 	mov	local06, local09
12d84     02 30 66 F0 | 	shl	local06, #2
12d88     50 00 00 FF 
12d8c     C4 E4 05 F1 | 	add	objptr, ##41156
12d90     F2 30 02 F1 | 	add	local06, objptr
12d94     02 36 66 F0 | 	shl	local09, #2
12d98     F2 36 02 F1 | 	add	local09, objptr
12d9c     1B 37 02 FB | 	rdlong	local09, local09
12da0     04 4E 05 F1 | 	add	fp, #4
12da4     A7 34 02 FB | 	rdlong	local08, fp
12da8     1A 37 02 F1 | 	add	local09, local08
12dac     18 37 62 FC | 	wrlong	local09, local06
12db0     08 4E 85 F1 | 	sub	fp, #8
12db4     A7 36 02 FB | 	rdlong	local09, fp
12db8     01 36 06 F1 | 	add	local09, #1
12dbc     A7 36 62 FC | 	wrlong	local09, fp
12dc0     10 4E 85 F1 | 	sub	fp, #16
12dc4     50 00 00 FF 
12dc8     C4 E4 85 F1 | 	sub	objptr, ##41156
12dcc     40 FE 9F FD | 	jmp	#LR__1492
12dd0                 | LR__1498
12dd0                 | LR__1499
12dd0     A7 F0 03 F6 | 	mov	ptra, fp
12dd4     B2 00 A0 FD | 	call	#popregs_
12dd8                 | _do_get_ret
12dd8     2D 00 64 FD | 	ret
12ddc                 | 
12ddc                 | ' 
12ddc                 | ' '-------------------- getcolor
12ddc                 | ' 
12ddc                 | ' sub do_getcolor
12ddc                 | _do_getcolor
12ddc     01 4A 05 F6 | 	mov	COUNT_, #1
12de0     A8 00 A0 FD | 	call	#pushregs_
12de4     10 F0 07 F1 | 	add	ptra, #16
12de8     4A 00 00 FF 
12dec     80 E4 05 F1 | 	add	objptr, ##38016
12df0     F2 26 02 FB | 	rdlong	local01, objptr
12df4     13 17 02 F6 | 	mov	arg03, local01
12df8     01 16 66 F0 | 	shl	arg03, #1
12dfc     13 17 02 F1 | 	add	arg03, local01
12e00     02 16 66 F0 | 	shl	arg03, #2
12e04     03 00 00 FF 
12e08     04 E4 85 F1 | 	sub	objptr, ##1540
12e0c     F2 16 02 F1 | 	add	arg03, objptr
12e10     0B 17 02 FB | 	rdlong	arg03, arg03
12e14     0C 4E 05 F1 | 	add	fp, #12
12e18     A7 16 62 FC | 	wrlong	arg03, fp
12e1c                 | ' 
12e1c                 | ' numpar=compiledline(lineptr_e).result.uresult
12e1c                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12e1c     0C 4E 85 F1 | 	sub	fp, #12
12e20     02 16 16 F2 | 	cmp	arg03, #2 wc
12e24     47 00 00 FF 
12e28     7C E4 85 F1 | 	sub	objptr, ##36476
12e2c     0C 4E 05 C1 |  if_b	add	fp, #12
12e30     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12e34     0C 4E 85 C1 |  if_b	sub	fp, #12
12e38     40 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12e3c     00 12 06 F6 | 	mov	arg01, #0
12e40     50 9F B1 FD | 	call	#__system___getiolock_0616
12e44     FD 12 02 F6 | 	mov	arg01, result1
12e48     20 42 B1 FD | 	call	#__system___lockmem
12e4c     BA 01 00 FF 
12e50     86 15 06 F6 | 	mov	arg02, ##@LR__5959
12e54     00 12 06 F6 | 	mov	arg01, #0
12e58     00 16 06 F6 | 	mov	arg03, #0
12e5c     00 4F B1 FD | 	call	#__system___basic_print_string
12e60     00 12 06 F6 | 	mov	arg01, #0
12e64     2C 9F B1 FD | 	call	#__system___getiolock_0616
12e68     FD 00 68 FC | 	wrlong	#0, result1
12e6c     27 12 06 F6 | 	mov	arg01, #39
12e70     00 14 06 F6 | 	mov	arg02, #0
12e74     48 07 B1 FD | 	call	#_printerror
12e78     60 00 90 FD | 	jmp	#LR__1501
12e7c                 | LR__1500
12e7c     88 A8 BF FD | 	call	#_pop
12e80     A7 FA 61 FC | 	wrlong	result1, fp
12e84     04 4E 05 F1 | 	add	fp, #4
12e88     A7 FC 61 FC | 	wrlong	result2, fp
12e8c     04 4E 05 F1 | 	add	fp, #4
12e90     A7 FE 61 FC | 	wrlong	result3, fp
12e94     08 4E 85 F1 | 	sub	fp, #8
12e98     A7 12 02 F6 | 	mov	arg01, fp
12e9c     4C AA BF FD | 	call	#_converttoint
12ea0     FD 12 02 F6 | 	mov	arg01, result1
12ea4                 | ' 
12ea4                 | ' return long[palette_ptr+4*color]
12ea4     1C E4 05 F1 | 	add	objptr, #28
12ea8     F2 FA 01 FB | 	rdlong	result1, objptr
12eac     1C E4 85 F1 | 	sub	objptr, #28
12eb0     02 12 66 F0 | 	shl	arg01, #2
12eb4     09 FB 01 F1 | 	add	result1, arg01
12eb8     FD FA 01 FB | 	rdlong	result1, result1
12ebc     08 FA C5 F0 | 	sar	result1, #8
12ec0     F8 FA 05 F4 | 	bitl	result1, #248
12ec4     A7 FA 61 FC | 	wrlong	result1, fp
12ec8     08 4E 05 F1 | 	add	fp, #8
12ecc     A7 3A 68 FC | 	wrlong	#29, fp
12ed0     08 4E 85 F1 | 	sub	fp, #8
12ed4     A7 12 02 F6 | 	mov	arg01, fp
12ed8     C4 A8 BF FD | 	call	#_push
12edc                 | LR__1501
12edc     A7 F0 03 F6 | 	mov	ptra, fp
12ee0     B2 00 A0 FD | 	call	#popregs_
12ee4                 | _do_getcolor_ret
12ee4     2D 00 64 FD | 	ret
12ee8                 | 
12ee8                 | ' 
12ee8                 | ' '-------------------- getenvsustain
12ee8                 | ' 
12ee8                 | ' sub do_getenvsustain
12ee8                 | _do_getenvsustain
12ee8     01 4A 05 F6 | 	mov	COUNT_, #1
12eec     A8 00 A0 FD | 	call	#pushregs_
12ef0     10 F0 07 F1 | 	add	ptra, #16
12ef4     4A 00 00 FF 
12ef8     80 E4 05 F1 | 	add	objptr, ##38016
12efc     F2 26 02 FB | 	rdlong	local01, objptr
12f00     13 17 02 F6 | 	mov	arg03, local01
12f04     01 16 66 F0 | 	shl	arg03, #1
12f08     13 17 02 F1 | 	add	arg03, local01
12f0c     02 16 66 F0 | 	shl	arg03, #2
12f10     03 00 00 FF 
12f14     04 E4 85 F1 | 	sub	objptr, ##1540
12f18     F2 16 02 F1 | 	add	arg03, objptr
12f1c     0B 17 02 FB | 	rdlong	arg03, arg03
12f20     0C 4E 05 F1 | 	add	fp, #12
12f24     A7 16 62 FC | 	wrlong	arg03, fp
12f28                 | ' 
12f28                 | ' numpar=compiledline(lineptr_e).result.uresult
12f28                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12f28     0C 4E 85 F1 | 	sub	fp, #12
12f2c     02 16 16 F2 | 	cmp	arg03, #2 wc
12f30     47 00 00 FF 
12f34     7C E4 85 F1 | 	sub	objptr, ##36476
12f38     0C 4E 05 C1 |  if_b	add	fp, #12
12f3c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12f40     0C 4E 85 C1 |  if_b	sub	fp, #12
12f44     40 00 90 4D |  if_c_and_nz	jmp	#LR__1510
12f48     00 12 06 F6 | 	mov	arg01, #0
12f4c     44 9E B1 FD | 	call	#__system___getiolock_0616
12f50     FD 12 02 F6 | 	mov	arg01, result1
12f54     14 41 B1 FD | 	call	#__system___lockmem
12f58     BA 01 00 FF 
12f5c     90 15 06 F6 | 	mov	arg02, ##@LR__5960
12f60     00 12 06 F6 | 	mov	arg01, #0
12f64     00 16 06 F6 | 	mov	arg03, #0
12f68     F4 4D B1 FD | 	call	#__system___basic_print_string
12f6c     00 12 06 F6 | 	mov	arg01, #0
12f70     20 9E B1 FD | 	call	#__system___getiolock_0616
12f74     FD 00 68 FC | 	wrlong	#0, result1
12f78     27 12 06 F6 | 	mov	arg01, #39
12f7c     00 14 06 F6 | 	mov	arg02, #0
12f80     3C 06 B1 FD | 	call	#_printerror
12f84     64 00 90 FD | 	jmp	#LR__1511
12f88                 | LR__1510
12f88     7C A7 BF FD | 	call	#_pop
12f8c     FD 26 02 F6 | 	mov	local01, result1
12f90     FE 16 02 F6 | 	mov	arg03, result2
12f94     A7 26 62 FC | 	wrlong	local01, fp
12f98     04 4E 05 F1 | 	add	fp, #4
12f9c     A7 16 62 FC | 	wrlong	arg03, fp
12fa0     04 4E 05 F1 | 	add	fp, #4
12fa4     A7 FE 61 FC | 	wrlong	result3, fp
12fa8     08 4E 85 F1 | 	sub	fp, #8
12fac     A7 12 02 F6 | 	mov	arg01, fp
12fb0     38 A9 BF FD | 	call	#_converttoint
12fb4     FD 26 02 F6 | 	mov	local01, result1
12fb8     01 26 66 F0 | 	shl	local01, #1
12fbc     52 00 00 FF 
12fc0     B4 E4 05 F1 | 	add	objptr, ##42164
12fc4     F2 26 02 F1 | 	add	local01, objptr
12fc8     13 27 E2 FA | 	rdword	local01, local01
12fcc     A7 26 62 FC | 	wrlong	local01, fp
12fd0     08 4E 05 F1 | 	add	fp, #8
12fd4     A7 38 68 FC | 	wrlong	#28, fp
12fd8     08 4E 85 F1 | 	sub	fp, #8
12fdc     A7 12 02 F6 | 	mov	arg01, fp
12fe0     52 00 00 FF 
12fe4     B4 E4 85 F1 | 	sub	objptr, ##42164
12fe8     B4 A7 BF FD | 	call	#_push
12fec                 | LR__1511
12fec     A7 F0 03 F6 | 	mov	ptra, fp
12ff0     B2 00 A0 FD | 	call	#popregs_
12ff4                 | _do_getenvsustain_ret
12ff4     2D 00 64 FD | 	ret
12ff8                 | 
12ff8                 | ' 
12ff8                 | ' '-------------------- getnotevalue
12ff8                 | ' 
12ff8                 | ' sub do_getnotevalue
12ff8                 | _do_getnotevalue
12ff8     01 4A 05 F6 | 	mov	COUNT_, #1
12ffc     A8 00 A0 FD | 	call	#pushregs_
13000     1C F0 07 F1 | 	add	ptra, #28
13004     00 A7 BF FD | 	call	#_pop
13008     FF 14 02 F6 | 	mov	arg02, result3
1300c     10 4E 05 F1 | 	add	fp, #16
13010     A7 FA 61 FC | 	wrlong	result1, fp
13014     04 4E 05 F1 | 	add	fp, #4
13018     A7 FC 61 FC | 	wrlong	result2, fp
1301c     04 4E 05 F1 | 	add	fp, #4
13020     A7 14 62 FC | 	wrlong	arg02, fp
13024     08 4E 85 F1 | 	sub	fp, #8
13028     A7 12 02 F6 | 	mov	arg01, fp
1302c     10 4E 85 F1 | 	sub	fp, #16
13030     B8 A8 BF FD | 	call	#_converttoint
13034     FD 14 52 F6 | 	abs	arg02, result1 wc
13038     0C 14 16 FD | 	qdiv	arg02, #12
1303c     0C 4E 05 F1 | 	add	fp, #12
13040     A7 FA 61 FC | 	wrlong	result1, fp
13044     14 00 00 FF 
13048     D8 E4 05 F1 | 	add	objptr, ##10456
1304c     08 4E 85 F1 | 	sub	fp, #8
13050     19 14 62 FD | 	getqy	arg02
13054     0A 15 82 F6 | 	negc	arg02, arg02
13058     02 14 66 F0 | 	shl	arg02, #2
1305c     F2 14 02 F1 | 	add	arg02, objptr
13060     0A 15 02 FB | 	rdlong	arg02, arg02
13064     A7 14 62 FC | 	wrlong	arg02, fp
13068     08 4E 05 F1 | 	add	fp, #8
1306c     A7 14 02 FB | 	rdlong	arg02, fp
13070     0A 15 52 F6 | 	abs	arg02, arg02 wc
13074     0C 14 16 FD | 	qdiv	arg02, #12
13078     0C 4E 85 F1 | 	sub	fp, #12
1307c     14 00 00 FF 
13080     D8 E4 85 F1 | 	sub	objptr, ##10456
13084     18 14 62 FD | 	getqx	arg02
13088     0A 13 82 F6 | 	negc	arg01, arg02
1308c     09 13 52 F6 | 	abs	arg01, arg01 wc
13090     1F 26 C6 C9 |  if_b	decod	local01, #31
13094     00 26 06 36 |  if_ae	mov	local01, #0
13098     44 6A B1 FD | 	call	#__system___float_fromuns
1309c     13 FB 61 F5 | 	xor	result1, local01
130a0     08 4E 05 F1 | 	add	fp, #8
130a4     A7 FA 61 FC | 	wrlong	result1, fp
130a8     FD 14 02 F6 | 	mov	arg02, result1
130ac     08 4E 85 F1 | 	sub	fp, #8
130b0     1E 12 C6 F9 | 	decod	arg01, #30
130b4     34 7D B1 FD | 	call	#__system____builtin_powf
130b8     FD 12 02 F6 | 	mov	arg01, result1
130bc     04 4E 05 F1 | 	add	fp, #4
130c0     A7 14 02 FB | 	rdlong	arg02, fp
130c4     04 4E 85 F1 | 	sub	fp, #4
130c8     18 6E B1 FD | 	call	#__system___float_mul
130cc     A7 FA 61 FC | 	wrlong	result1, fp
130d0     10 4E 05 F1 | 	add	fp, #16
130d4     A7 FA 61 FC | 	wrlong	result1, fp
130d8     08 4E 05 F1 | 	add	fp, #8
130dc     A7 3C 68 FC | 	wrlong	#30, fp
130e0     08 4E 85 F1 | 	sub	fp, #8
130e4     A7 12 02 F6 | 	mov	arg01, fp
130e8     10 4E 85 F1 | 	sub	fp, #16
130ec     B0 A6 BF FD | 	call	#_push
130f0     A7 F0 03 F6 | 	mov	ptra, fp
130f4     B2 00 A0 FD | 	call	#popregs_
130f8                 | _do_getnotevalue_ret
130f8     2D 00 64 FD | 	ret
130fc                 | 
130fc                 | ' 
130fc                 | ' '-------------------- getpixel
130fc                 | ' 
130fc                 | ' sub do_getpixel
130fc                 | _do_getpixel
130fc     00 4A 05 F6 | 	mov	COUNT_, #0
13100     A8 00 A0 FD | 	call	#pushregs_
13104     24 F0 07 F1 | 	add	ptra, #36
13108     4A 00 00 FF 
1310c     80 E4 05 F1 | 	add	objptr, ##38016
13110     F2 16 02 FB | 	rdlong	arg03, objptr
13114     0B 15 02 F6 | 	mov	arg02, arg03
13118     01 14 66 F0 | 	shl	arg02, #1
1311c     0B 15 02 F1 | 	add	arg02, arg03
13120     02 14 66 F0 | 	shl	arg02, #2
13124     03 00 00 FF 
13128     04 E4 85 F1 | 	sub	objptr, ##1540
1312c     F2 14 02 F1 | 	add	arg02, objptr
13130     0A 17 02 FB | 	rdlong	arg03, arg02
13134     18 4E 05 F1 | 	add	fp, #24
13138     A7 16 62 FC | 	wrlong	arg03, fp
1313c                 | ' 
1313c                 | ' numpar=compiledline(lineptr_e).result.uresult
1313c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
1313c     18 4E 85 F1 | 	sub	fp, #24
13140     02 16 0E F2 | 	cmp	arg03, #2 wz
13144     47 00 00 FF 
13148     7C E4 85 F1 | 	sub	objptr, ##36476
1314c     40 00 90 AD |  if_e	jmp	#LR__1520
13150     00 12 06 F6 | 	mov	arg01, #0
13154     3C 9C B1 FD | 	call	#__system___getiolock_0616
13158     FD 12 02 F6 | 	mov	arg01, result1
1315c     0C 3F B1 FD | 	call	#__system___lockmem
13160     BA 01 00 FF 
13164     A0 15 06 F6 | 	mov	arg02, ##@LR__5961
13168     00 12 06 F6 | 	mov	arg01, #0
1316c     00 16 06 F6 | 	mov	arg03, #0
13170     EC 4B B1 FD | 	call	#__system___basic_print_string
13174     00 12 06 F6 | 	mov	arg01, #0
13178     18 9C B1 FD | 	call	#__system___getiolock_0616
1317c     FD 00 68 FC | 	wrlong	#0, result1
13180     27 12 06 F6 | 	mov	arg01, #39
13184     00 14 06 F6 | 	mov	arg02, #0
13188     34 04 B1 FD | 	call	#_printerror
1318c     B4 00 90 FD | 	jmp	#LR__1521
13190                 | LR__1520
13190     74 A5 BF FD | 	call	#_pop
13194     FD 16 02 F6 | 	mov	arg03, result1
13198     FE 14 02 F6 | 	mov	arg02, result2
1319c     FF 12 02 F6 | 	mov	arg01, result3
131a0     0C 4E 05 F1 | 	add	fp, #12
131a4     A7 16 62 FC | 	wrlong	arg03, fp
131a8     04 4E 05 F1 | 	add	fp, #4
131ac     A7 14 62 FC | 	wrlong	arg02, fp
131b0     04 4E 05 F1 | 	add	fp, #4
131b4     A7 12 62 FC | 	wrlong	arg01, fp
131b8     14 4E 85 F1 | 	sub	fp, #20
131bc     48 A5 BF FD | 	call	#_pop
131c0     FF 16 02 F6 | 	mov	arg03, result3
131c4     A7 FA 61 FC | 	wrlong	result1, fp
131c8     04 4E 05 F1 | 	add	fp, #4
131cc     A7 FC 61 FC | 	wrlong	result2, fp
131d0     04 4E 05 F1 | 	add	fp, #4
131d4     A7 16 62 FC | 	wrlong	arg03, fp
131d8     08 4E 85 F1 | 	sub	fp, #8
131dc     A7 12 02 F6 | 	mov	arg01, fp
131e0     08 A7 BF FD | 	call	#_converttoint
131e4     1C 4E 05 F1 | 	add	fp, #28
131e8     A7 FA 61 FC | 	wrlong	result1, fp
131ec     10 4E 85 F1 | 	sub	fp, #16
131f0     A7 12 02 F6 | 	mov	arg01, fp
131f4     0C 4E 85 F1 | 	sub	fp, #12
131f8     F0 A6 BF FD | 	call	#_converttoint
131fc     FD 16 02 F6 | 	mov	arg03, result1
13200     20 4E 05 F1 | 	add	fp, #32
13204     A7 16 62 FC | 	wrlong	arg03, fp
13208     F2 12 02 FB | 	rdlong	arg01, objptr
1320c     04 4E 85 F1 | 	sub	fp, #4
13210     A7 FE 01 FB | 	rdlong	result3, fp
13214     FF 12 02 F1 | 	add	arg01, result3
13218     1C 4E 85 F1 | 	sub	fp, #28
1321c     0A 16 66 F0 | 	shl	arg03, #10
13220     0B 13 02 F1 | 	add	arg01, arg03
13224     10 06 B1 FD | 	call	#_pspeek
13228     FD FA E1 F8 | 	getbyte	result1, result1, #0
1322c     A7 FA 61 FC | 	wrlong	result1, fp
13230     08 4E 05 F1 | 	add	fp, #8
13234     A7 3A 68 FC | 	wrlong	#29, fp
13238     08 4E 85 F1 | 	sub	fp, #8
1323c     A7 12 02 F6 | 	mov	arg01, fp
13240     5C A5 BF FD | 	call	#_push
13244                 | LR__1521
13244     A7 F0 03 F6 | 	mov	ptra, fp
13248     B2 00 A0 FD | 	call	#popregs_
1324c                 | _do_getpixel_ret
1324c     2D 00 64 FD | 	ret
13250                 | 
13250                 | ' 
13250                 | ' '-------------------- gettime
13250                 | ' 
13250                 | ' sub do_gettime
13250                 | _do_gettime
13250     02 4A 05 F6 | 	mov	COUNT_, #2
13254     A8 00 A0 FD | 	call	#pushregs_
13258     14 F0 07 F1 | 	add	ptra, #20
1325c                 | ' 
1325c                 | ' const asm 
1325c     1A 26 72 FD | 	getct	local01 wc
13260     1A 28 62 FD | 	getct	local02
13264                 | ' return hi1, lo1
13264     14 FD 01 F6 | 	mov	result2, local02
13268     A7 26 62 FC | 	wrlong	local01, fp
1326c     04 4E 05 F1 | 	add	fp, #4
13270     A7 FC 61 FC | 	wrlong	result2, fp
13274     0C 4E 05 F1 | 	add	fp, #12
13278     A7 3A 68 FC | 	wrlong	#29, fp
1327c     0C 4E 85 F1 | 	sub	fp, #12
13280     A7 12 02 FB | 	rdlong	arg01, fp
13284     04 4E 05 F1 | 	add	fp, #4
13288     A7 12 62 FC | 	wrlong	arg01, fp
1328c     08 4E 85 F1 | 	sub	fp, #8
13290     A7 12 02 FB | 	rdlong	arg01, fp
13294     0C 4E 05 F1 | 	add	fp, #12
13298     A7 12 62 FC | 	wrlong	arg01, fp
1329c     04 4E 85 F1 | 	sub	fp, #4
132a0     A7 12 02 F6 | 	mov	arg01, fp
132a4     08 4E 85 F1 | 	sub	fp, #8
132a8     F4 A4 BF FD | 	call	#_push
132ac     A7 F0 03 F6 | 	mov	ptra, fp
132b0     B2 00 A0 FD | 	call	#popregs_
132b4                 | _do_gettime_ret
132b4     2D 00 64 FD | 	ret
132b8                 | 
132b8                 | ' 
132b8                 | ' '-------------------- gosub
132b8                 | ' 
132b8                 | ' sub do_gosub()
132b8                 | _do_gosub
132b8     50 00 00 FF 
132bc     34 E5 05 F1 | 	add	objptr, ##41268
132c0     F2 00 02 FB | 	rdlong	_var01, objptr
132c4     01 00 06 F1 | 	add	_var01, #1
132c8     F2 00 62 FC | 	wrlong	_var01, objptr
132cc                 | ' gosubtop+=1
132cc                 | ' if compiledline(lineptr_e+1).result_type=token_end then
132cc     06 00 00 FF 
132d0     B4 E4 85 F1 | 	sub	objptr, ##3252
132d4     F2 00 02 FB | 	rdlong	_var01, objptr
132d8     01 00 06 F1 | 	add	_var01, #1
132dc     00 03 02 F6 | 	mov	_var02, _var01
132e0     01 02 66 F0 | 	shl	_var02, #1
132e4     00 03 02 F1 | 	add	_var02, _var01
132e8     02 02 66 F0 | 	shl	_var02, #2
132ec     03 00 00 FF 
132f0     04 E4 85 F1 | 	sub	objptr, ##1540
132f4     F2 02 02 F1 | 	add	_var02, objptr
132f8     08 02 06 F1 | 	add	_var02, #8
132fc     01 03 02 FB | 	rdlong	_var02, _var02
13300     FE 03 0E F2 | 	cmp	_var02, #510 wz
13304     47 00 00 FF 
13308     7C E4 85 F1 | 	sub	objptr, ##36476
1330c     58 00 90 5D |  if_ne	jmp	#LR__1530
13310     50 00 00 FF 
13314     34 E5 05 F1 | 	add	objptr, ##41268
13318     F2 02 02 FB | 	rdlong	_var02, objptr
1331c     03 02 66 F0 | 	shl	_var02, #3
13320     03 00 00 FF 
13324     88 E5 85 F1 | 	sub	objptr, ##1928
13328     F2 02 02 F1 | 	add	_var02, objptr
1332c     03 00 00 FF 
13330     0C E5 05 F1 | 	add	objptr, ##1804
13334     F2 00 02 FB | 	rdlong	_var01, objptr
13338     01 01 62 FC | 	wrlong	_var01, _var02
1333c     7C E4 05 F1 | 	add	objptr, #124
13340     F2 02 02 FB | 	rdlong	_var02, objptr
13344     03 02 66 F0 | 	shl	_var02, #3
13348     03 00 00 FF 
1334c     88 E5 85 F1 | 	sub	objptr, ##1928
13350     F2 02 02 F1 | 	add	_var02, objptr
13354     04 02 06 F1 | 	add	_var02, #4
13358     01 01 68 FC | 	wrlong	#0, _var02
1335c     4C 00 00 FF 
13360     AC E5 85 F1 | 	sub	objptr, ##39340
13364     64 00 90 FD | 	jmp	#LR__1531
13368                 | LR__1530
13368     50 00 00 FF 
1336c     34 E5 05 F1 | 	add	objptr, ##41268
13370     F2 02 02 FB | 	rdlong	_var02, objptr
13374     03 02 66 F0 | 	shl	_var02, #3
13378     03 00 00 FF 
1337c     88 E5 85 F1 | 	sub	objptr, ##1928
13380     F2 02 02 F1 | 	add	_var02, objptr
13384     03 00 00 FF 
13388     14 E5 05 F1 | 	add	objptr, ##1812
1338c     F2 00 02 FB | 	rdlong	_var01, objptr
13390     01 01 62 FC | 	wrlong	_var01, _var02
13394     74 E4 05 F1 | 	add	objptr, #116
13398     F2 02 02 FB | 	rdlong	_var02, objptr
1339c     03 02 66 F0 | 	shl	_var02, #3
133a0     03 00 00 FF 
133a4     88 E5 85 F1 | 	sub	objptr, ##1928
133a8     F2 02 02 F1 | 	add	_var02, objptr
133ac     02 00 00 FF 
133b0     2C E5 85 F1 | 	sub	objptr, ##1324
133b4     F2 00 02 FB | 	rdlong	_var01, objptr
133b8     4A 00 00 FF 
133bc     80 E4 85 F1 | 	sub	objptr, ##38016
133c0     02 00 06 F1 | 	add	_var01, #2
133c4     04 02 06 F1 | 	add	_var02, #4
133c8     01 01 62 FC | 	wrlong	_var01, _var02
133cc                 | LR__1531
133cc                 | _do_gosub_ret
133cc     2D 00 64 FD | 	ret
133d0                 | 
133d0                 | ' 
133d0                 | ' '--------------------- goto
133d0                 | ' 
133d0                 | ' '------- fast goto
133d0                 | ' 
133d0                 | ' sub do_fast_goto
133d0                 | _do_fast_goto
133d0     02 4A 05 F6 | 	mov	COUNT_, #2
133d4     A8 00 A0 FD | 	call	#pushregs_
133d8                 | _do_fast_goto_enter
133d8     4A 00 00 FF 
133dc     80 E4 05 F1 | 	add	objptr, ##38016
133e0     F2 12 02 FB | 	rdlong	arg01, objptr
133e4     09 27 02 F6 | 	mov	local01, arg01
133e8     01 26 66 F0 | 	shl	local01, #1
133ec     09 27 02 F1 | 	add	local01, arg01
133f0     02 26 66 F0 | 	shl	local01, #2
133f4     03 00 00 FF 
133f8     04 E4 85 F1 | 	sub	objptr, ##1540
133fc     F2 26 02 F1 | 	add	local01, objptr
13400     13 29 02 FB | 	rdlong	local02, local01
13404     14 13 02 F6 | 	mov	arg01, local02
13408     47 00 00 FF 
1340c     7C E4 85 F1 | 	sub	objptr, ##36476
13410     7C 04 B1 FD | 	call	#_pslpeek
13414     FD 12 02 F6 | 	mov	arg01, result1
13418                 | ' 
13418                 | ' testptr=compiledline(lineptr_e).result.uresult
13418                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
13418                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
13418     4A 00 00 FF 
1341c     80 E4 05 F1 | 	add	objptr, ##38016
13420     F2 FA 01 FB | 	rdlong	result1, objptr
13424     FD 26 02 F6 | 	mov	local01, result1
13428     01 26 66 F0 | 	shl	local01, #1
1342c     FD 26 02 F1 | 	add	local01, result1
13430     02 26 66 F0 | 	shl	local01, #2
13434     03 00 00 FF 
13438     04 E4 85 F1 | 	sub	objptr, ##1540
1343c     F2 26 02 F1 | 	add	local01, objptr
13440     04 26 06 F1 | 	add	local01, #4
13444     13 27 02 FB | 	rdlong	local01, local01
13448     13 13 0A F2 | 	cmp	arg01, local01 wz
1344c     47 00 00 FF 
13450     7C E4 85 F1 | 	sub	objptr, ##36476
13454     58 00 90 5D |  if_ne	jmp	#LR__1540
13458     50 00 00 FF 
1345c     B8 E4 05 F1 | 	add	objptr, ##41144
13460     F2 28 62 FC | 	wrlong	local02, objptr
13464     06 00 00 FF 
13468     3C E4 85 F1 | 	sub	objptr, ##3132
1346c     F2 28 02 FB | 	rdlong	local02, objptr
13470     01 28 86 F1 | 	sub	local02, #1
13474     04 E4 05 F1 | 	add	objptr, #4
13478     F2 28 62 FC | 	wrlong	local02, objptr
1347c                 | '   runptr=testptr
1347c                 | '   lineptr_e=lineptr-1
1347c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
1347c     06 00 00 FF 
13480     84 E4 05 F1 | 	add	objptr, ##3204
13484     F2 28 02 FB | 	rdlong	local02, objptr
13488     50 00 00 FF 
1348c     04 E5 85 F1 | 	sub	objptr, ##41220
13490     FF FF 3F FF 
13494     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13498     50 00 00 AF 
1349c     04 E5 05 A1 |  if_e	add	objptr, ##41220
134a0     F2 00 68 AC |  if_e	wrlong	#0, objptr
134a4     50 00 00 AF 
134a8     04 E5 85 A1 |  if_e	sub	objptr, ##41220
134ac     04 00 90 FD | 	jmp	#LR__1541
134b0                 | LR__1540
134b0     0C 00 B0 FD | 	call	#_do_find_goto
134b4                 | LR__1541
134b4     A7 F0 03 F6 | 	mov	ptra, fp
134b8     B2 00 A0 FD | 	call	#popregs_
134bc                 | _do_fast_goto_ret
134bc     2D 00 64 FD | 	ret
134c0                 | 
134c0                 | ' 
134c0                 | ' '------- find goto  
134c0                 | ' 
134c0                 | ' sub do_find_goto
134c0                 | _do_find_goto
134c0     03 4A 05 F6 | 	mov	COUNT_, #3
134c4     A8 00 A0 FD | 	call	#pushregs_
134c8     24 F0 07 F1 | 	add	ptra, #36
134cc                 | _do_find_goto_enter
134cc     4A 00 00 FF 
134d0     80 E4 05 F1 | 	add	objptr, ##38016
134d4     F2 26 02 FB | 	rdlong	local01, objptr
134d8     13 29 02 F6 | 	mov	local02, local01
134dc     01 28 66 F0 | 	shl	local02, #1
134e0     13 29 02 F1 | 	add	local02, local01
134e4     02 28 66 F0 | 	shl	local02, #2
134e8     03 00 00 FF 
134ec     04 E4 85 F1 | 	sub	objptr, ##1540
134f0     F2 28 02 F1 | 	add	local02, objptr
134f4     04 28 06 F1 | 	add	local02, #4
134f8     14 29 02 FB | 	rdlong	local02, local02
134fc     A7 28 62 FC | 	wrlong	local02, fp
13500     03 00 00 FF 
13504     0C E4 05 F1 | 	add	objptr, ##1548
13508     F2 2A 02 FB | 	rdlong	local03, objptr
1350c     4A 00 00 FF 
13510     88 E4 85 F1 | 	sub	objptr, ##38024
13514     04 4E 05 F1 | 	add	fp, #4
13518     A7 2A 62 FC | 	wrlong	local03, fp
1351c     04 4E 85 F1 | 	sub	fp, #4
13520                 | ' 
13520                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
13520                 | ' gotoptr=programstart
13520                 | ' do
13520                 | LR__1550
13520     0C 4E 05 F1 | 	add	fp, #12
13524     A7 12 02 F6 | 	mov	arg01, fp
13528     08 4E 85 F1 | 	sub	fp, #8
1352c     A7 14 02 FB | 	rdlong	arg02, fp
13530     04 4E 85 F1 | 	sub	fp, #4
13534     18 16 06 F6 | 	mov	arg03, #24
13538     0B 00 00 FF 
1353c     CC E4 05 F1 | 	add	objptr, ##5836
13540     30 2E B1 FD | 	call	#_psram_spin2_read1
13544     0B 00 00 FF 
13548     CC E4 85 F1 | 	sub	objptr, ##5836
1354c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
1354c                 | '   if gotoheader(0)<>$FFFFFFFF then
1354c     0C 4E 05 F1 | 	add	fp, #12
13550     A7 2A 02 FB | 	rdlong	local03, fp
13554     0C 4E 85 F1 | 	sub	fp, #12
13558     FF FF 7F FF 
1355c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
13560     24 00 90 AD |  if_e	jmp	#LR__1551
13564     04 4E 05 F1 | 	add	fp, #4
13568     A7 2A 02 FB | 	rdlong	local03, fp
1356c     04 4E 05 F1 | 	add	fp, #4
13570     A7 2A 62 FC | 	wrlong	local03, fp
13574     18 4E 05 F1 | 	add	fp, #24
13578     A7 2A 02 FB | 	rdlong	local03, fp
1357c     1C 4E 85 F1 | 	sub	fp, #28
13580     A7 2A 62 FC | 	wrlong	local03, fp
13584     04 4E 85 F1 | 	sub	fp, #4
13588                 | LR__1551
13588     20 4E 05 F1 | 	add	fp, #32
1358c     A7 2A 02 FB | 	rdlong	local03, fp
13590     20 4E 85 F1 | 	sub	fp, #32
13594     FF FF 3F FF 
13598     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1359c     0C 4E 05 51 |  if_ne	add	fp, #12
135a0     A7 26 02 5B |  if_ne	rdlong	local01, fp
135a4     0C 4E 85 51 |  if_ne	sub	fp, #12
135a8     FF FF 7F 5F 
135ac     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
135b0     18 00 90 AD |  if_e	jmp	#LR__1552
135b4     0C 4E 05 F1 | 	add	fp, #12
135b8     A7 2A 02 FB | 	rdlong	local03, fp
135bc     0C 4E 85 F1 | 	sub	fp, #12
135c0     A7 28 02 FB | 	rdlong	local02, fp
135c4     14 2B 0A F2 | 	cmp	local03, local02 wz
135c8     54 FF 9F 5D |  if_ne	jmp	#LR__1550
135cc                 | LR__1552
135cc                 | ' 
135cc                 | ' if gotoheader(0)=gotoline then
135cc     0C 4E 05 F1 | 	add	fp, #12
135d0     A7 2A 02 FB | 	rdlong	local03, fp
135d4     0C 4E 85 F1 | 	sub	fp, #12
135d8     A7 26 02 FB | 	rdlong	local01, fp
135dc     13 2B 0A F2 | 	cmp	local03, local01 wz
135e0     D8 00 90 5D |  if_ne	jmp	#LR__1553
135e4     4A 00 00 FF 
135e8     80 E4 05 F1 | 	add	objptr, ##38016
135ec     F2 26 02 FB | 	rdlong	local01, objptr
135f0     13 29 02 F6 | 	mov	local02, local01
135f4     01 28 66 F0 | 	shl	local02, #1
135f8     13 29 02 F1 | 	add	local02, local01
135fc     02 28 66 F0 | 	shl	local02, #2
13600     03 00 00 FF 
13604     04 E4 85 F1 | 	sub	objptr, ##1540
13608     F2 28 02 F1 | 	add	local02, objptr
1360c     08 4E 05 F1 | 	add	fp, #8
13610     A7 2A 02 FB | 	rdlong	local03, fp
13614     14 2B 62 FC | 	wrlong	local03, local02
13618     03 00 00 FF 
1361c     04 E4 05 F1 | 	add	objptr, ##1540
13620     F2 26 02 FB | 	rdlong	local01, objptr
13624     13 29 02 F6 | 	mov	local02, local01
13628     01 28 66 F0 | 	shl	local02, #1
1362c     13 29 02 F1 | 	add	local02, local01
13630     02 28 66 F0 | 	shl	local02, #2
13634     03 00 00 FF 
13638     04 E4 85 F1 | 	sub	objptr, ##1540
1363c     F2 28 02 F1 | 	add	local02, objptr
13640     08 28 06 F1 | 	add	local02, #8
13644     14 9D 68 FC | 	wrlong	#78, local02
13648     03 00 00 FF 
1364c     04 E4 05 F1 | 	add	objptr, ##1540
13650     F2 28 02 FB | 	rdlong	local02, objptr
13654     14 13 02 F6 | 	mov	arg01, local02
13658     01 12 66 F0 | 	shl	arg01, #1
1365c     14 13 02 F1 | 	add	arg01, local02
13660     02 12 66 F0 | 	shl	arg01, #2
13664     03 00 00 FF 
13668     04 E4 85 F1 | 	sub	objptr, ##1540
1366c     F2 12 02 F1 | 	add	arg01, objptr
13670     09 00 00 FF 
13674     44 E4 05 F1 | 	add	objptr, ##4676
13678     F2 14 02 FB | 	rdlong	arg02, objptr
1367c     02 2A 06 F6 | 	mov	local03, #2
13680     14 2B 02 F1 | 	add	local03, local02
13684     0B 00 00 FF 
13688     5C E4 85 F1 | 	sub	objptr, ##5724
1368c     F2 16 02 FB | 	rdlong	arg03, objptr
13690     0B 2B 02 FD | 	qmul	local03, arg03
13694     08 4E 85 F1 | 	sub	fp, #8
13698     39 00 00 FF 
1369c     98 E5 85 F1 | 	sub	objptr, ##29592
136a0     18 2A 62 FD | 	getqx	local03
136a4     15 15 02 F1 | 	add	arg02, local03
136a8     64 2D B1 FD | 	call	#_psram_spin2_write
136ac     0B 00 00 FF 
136b0     CC E4 85 F1 | 	sub	objptr, ##5836
136b4     18 FD BF FD | 	call	#_do_fast_goto
136b8     0C 00 90 FD | 	jmp	#LR__1554
136bc                 | LR__1553
136bc     26 12 06 F6 | 	mov	arg01, #38
136c0     00 14 06 F6 | 	mov	arg02, #0
136c4     F8 FE B0 FD | 	call	#_printerror
136c8                 | LR__1554
136c8     A7 F0 03 F6 | 	mov	ptra, fp
136cc     B2 00 A0 FD | 	call	#popregs_
136d0                 | _do_find_goto_ret
136d0     2D 00 64 FD | 	ret
136d4                 | 
136d4                 | ' 
136d4                 | ' '------- slow goto  
136d4                 | ' 
136d4                 | ' sub do_slow_goto
136d4                 | _do_slow_goto
136d4     02 4A 05 F6 | 	mov	COUNT_, #2
136d8     A8 00 A0 FD | 	call	#pushregs_
136dc     30 F0 07 F1 | 	add	ptra, #48
136e0     24 A0 BF FD | 	call	#_pop
136e4     FF 26 02 F6 | 	mov	local01, result3
136e8     24 4E 05 F1 | 	add	fp, #36
136ec     A7 FA 61 FC | 	wrlong	result1, fp
136f0     04 4E 05 F1 | 	add	fp, #4
136f4     A7 FC 61 FC | 	wrlong	result2, fp
136f8     04 4E 05 F1 | 	add	fp, #4
136fc     A7 26 62 FC | 	wrlong	local01, fp
13700     08 4E 85 F1 | 	sub	fp, #8
13704     A7 12 02 F6 | 	mov	arg01, fp
13708     24 4E 85 F1 | 	sub	fp, #36
1370c     DC A1 BF FD | 	call	#_converttoint
13710     A7 FA 61 FC | 	wrlong	result1, fp
13714     4A 00 00 FF 
13718     88 E4 05 F1 | 	add	objptr, ##38024
1371c     F2 28 02 FB | 	rdlong	local02, objptr
13720     4A 00 00 FF 
13724     88 E4 85 F1 | 	sub	objptr, ##38024
13728     04 4E 05 F1 | 	add	fp, #4
1372c     A7 28 62 FC | 	wrlong	local02, fp
13730     04 4E 85 F1 | 	sub	fp, #4
13734                 | ' 
13734                 | ' t1=pop() : gotoline=converttoint(t1)
13734                 | ' gotoptr=programstart
13734                 | ' do
13734                 | LR__1560
13734     0C 4E 05 F1 | 	add	fp, #12
13738     A7 12 02 F6 | 	mov	arg01, fp
1373c     08 4E 85 F1 | 	sub	fp, #8
13740     A7 14 02 FB | 	rdlong	arg02, fp
13744     04 4E 85 F1 | 	sub	fp, #4
13748     18 16 06 F6 | 	mov	arg03, #24
1374c     0B 00 00 FF 
13750     CC E4 05 F1 | 	add	objptr, ##5836
13754     1C 2C B1 FD | 	call	#_psram_spin2_read1
13758     0B 00 00 FF 
1375c     CC E4 85 F1 | 	sub	objptr, ##5836
13760                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13760                 | '   if gotoheader(0)<>$FFFFFFFF then
13760     0C 4E 05 F1 | 	add	fp, #12
13764     A7 28 02 FB | 	rdlong	local02, fp
13768     0C 4E 85 F1 | 	sub	fp, #12
1376c     FF FF 7F FF 
13770     FF 29 0E F2 | 	cmp	local02, ##-1 wz
13774     24 00 90 AD |  if_e	jmp	#LR__1561
13778     04 4E 05 F1 | 	add	fp, #4
1377c     A7 28 02 FB | 	rdlong	local02, fp
13780     04 4E 05 F1 | 	add	fp, #4
13784     A7 28 62 FC | 	wrlong	local02, fp
13788     18 4E 05 F1 | 	add	fp, #24
1378c     A7 28 02 FB | 	rdlong	local02, fp
13790     1C 4E 85 F1 | 	sub	fp, #28
13794     A7 28 62 FC | 	wrlong	local02, fp
13798     04 4E 85 F1 | 	sub	fp, #4
1379c                 | LR__1561
1379c     20 4E 05 F1 | 	add	fp, #32
137a0     A7 28 02 FB | 	rdlong	local02, fp
137a4     20 4E 85 F1 | 	sub	fp, #32
137a8     FF FF 3F FF 
137ac     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
137b0     0C 4E 05 51 |  if_ne	add	fp, #12
137b4     A7 26 02 5B |  if_ne	rdlong	local01, fp
137b8     0C 4E 85 51 |  if_ne	sub	fp, #12
137bc     FF FF 7F 5F 
137c0     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
137c4     18 00 90 AD |  if_e	jmp	#LR__1562
137c8     0C 4E 05 F1 | 	add	fp, #12
137cc     A7 28 02 FB | 	rdlong	local02, fp
137d0     0C 4E 85 F1 | 	sub	fp, #12
137d4     A7 16 02 FB | 	rdlong	arg03, fp
137d8     0B 29 0A F2 | 	cmp	local02, arg03 wz
137dc     54 FF 9F 5D |  if_ne	jmp	#LR__1560
137e0                 | LR__1562
137e0                 | ' if gotoheader(0)=gotoline then  
137e0     0C 4E 05 F1 | 	add	fp, #12
137e4     A7 28 02 FB | 	rdlong	local02, fp
137e8     0C 4E 85 F1 | 	sub	fp, #12
137ec     A7 26 02 FB | 	rdlong	local01, fp
137f0     13 29 0A F2 | 	cmp	local02, local01 wz
137f4     60 00 90 5D |  if_ne	jmp	#LR__1563
137f8     08 4E 05 F1 | 	add	fp, #8
137fc     A7 28 02 FB | 	rdlong	local02, fp
13800     08 4E 85 F1 | 	sub	fp, #8
13804     50 00 00 FF 
13808     B8 E4 05 F1 | 	add	objptr, ##41144
1380c     F2 28 62 FC | 	wrlong	local02, objptr
13810     06 00 00 FF 
13814     3C E4 85 F1 | 	sub	objptr, ##3132
13818     F2 28 02 FB | 	rdlong	local02, objptr
1381c     01 28 86 F1 | 	sub	local02, #1
13820     04 E4 05 F1 | 	add	objptr, #4
13824     F2 28 62 FC | 	wrlong	local02, objptr
13828                 | '    runptr=oldgotoptr
13828                 | '    lineptr_e=lineptr-1
13828                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13828     06 00 00 FF 
1382c     84 E4 05 F1 | 	add	objptr, ##3204
13830     F2 28 02 FB | 	rdlong	local02, objptr
13834     50 00 00 FF 
13838     04 E5 85 F1 | 	sub	objptr, ##41220
1383c     FF FF 3F FF 
13840     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13844     50 00 00 AF 
13848     04 E5 05 A1 |  if_e	add	objptr, ##41220
1384c     F2 00 68 AC |  if_e	wrlong	#0, objptr
13850     50 00 00 AF 
13854     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13858                 | LR__1563
13858     A7 F0 03 F6 | 	mov	ptra, fp
1385c     B2 00 A0 FD | 	call	#popregs_
13860                 | _do_slow_goto_ret
13860     2D 00 64 FD | 	ret
13864                 | 
13864                 | ' 
13864                 | ' ' ----------------  hex$
13864                 | ' 
13864                 | ' sub do_hex
13864                 | _do_hex
13864     01 4A 05 F6 | 	mov	COUNT_, #1
13868     A8 00 A0 FD | 	call	#pushregs_
1386c     18 F0 07 F1 | 	add	ptra, #24
13870     4A 00 00 FF 
13874     80 E4 05 F1 | 	add	objptr, ##38016
13878     F2 26 02 FB | 	rdlong	local01, objptr
1387c     13 17 02 F6 | 	mov	arg03, local01
13880     01 16 66 F0 | 	shl	arg03, #1
13884     13 17 02 F1 | 	add	arg03, local01
13888     02 16 66 F0 | 	shl	arg03, #2
1388c     03 00 00 FF 
13890     04 E4 85 F1 | 	sub	objptr, ##1540
13894     F2 16 02 F1 | 	add	arg03, objptr
13898     0B 17 02 FB | 	rdlong	arg03, arg03
1389c     0C 4E 05 F1 | 	add	fp, #12
138a0     A7 16 62 FC | 	wrlong	arg03, fp
138a4                 | ' 
138a4                 | ' numpar=compiledline(lineptr_e).result.uresult
138a4                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
138a4     0C 4E 85 F1 | 	sub	fp, #12
138a8     03 16 16 F2 | 	cmp	arg03, #3 wc
138ac     47 00 00 FF 
138b0     7C E4 85 F1 | 	sub	objptr, ##36476
138b4     0C 4E 05 C1 |  if_b	add	fp, #12
138b8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
138bc     0C 4E 85 C1 |  if_b	sub	fp, #12
138c0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1570
138c4     00 12 06 F6 | 	mov	arg01, #0
138c8     C8 94 B1 FD | 	call	#__system___getiolock_0616
138cc     FD 12 02 F6 | 	mov	arg01, result1
138d0     98 37 B1 FD | 	call	#__system___lockmem
138d4     BA 01 00 FF 
138d8     AB 15 06 F6 | 	mov	arg02, ##@LR__5962
138dc     00 12 06 F6 | 	mov	arg01, #0
138e0     00 16 06 F6 | 	mov	arg03, #0
138e4     78 44 B1 FD | 	call	#__system___basic_print_string
138e8     00 12 06 F6 | 	mov	arg01, #0
138ec     A4 94 B1 FD | 	call	#__system___getiolock_0616
138f0     FD 00 68 FC | 	wrlong	#0, result1
138f4     27 12 06 F6 | 	mov	arg01, #39
138f8     00 14 06 F6 | 	mov	arg02, #0
138fc     C0 FC B0 FD | 	call	#_printerror
13900     B8 00 90 FD | 	jmp	#LR__1573
13904                 | LR__1570
13904                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13904     0C 4E 05 F1 | 	add	fp, #12
13908     A7 26 02 FB | 	rdlong	local01, fp
1390c     0C 4E 85 F1 | 	sub	fp, #12
13910     02 26 0E F2 | 	cmp	local01, #2 wz
13914     38 00 90 5D |  if_ne	jmp	#LR__1571
13918     EC 9D BF FD | 	call	#_pop
1391c     FF 26 02 F6 | 	mov	local01, result3
13920     A7 FA 61 FC | 	wrlong	result1, fp
13924     04 4E 05 F1 | 	add	fp, #4
13928     A7 FC 61 FC | 	wrlong	result2, fp
1392c     04 4E 05 F1 | 	add	fp, #4
13930     A7 26 62 FC | 	wrlong	local01, fp
13934     08 4E 85 F1 | 	sub	fp, #8
13938     A7 12 02 F6 | 	mov	arg01, fp
1393c     AC 9F BF FD | 	call	#_converttoint
13940     14 4E 05 F1 | 	add	fp, #20
13944     A7 FA 61 FC | 	wrlong	result1, fp
13948     14 4E 85 F1 | 	sub	fp, #20
1394c     0C 00 90 FD | 	jmp	#LR__1572
13950                 | LR__1571
13950     14 4E 05 F1 | 	add	fp, #20
13954     A7 10 68 FC | 	wrlong	#8, fp
13958     14 4E 85 F1 | 	sub	fp, #20
1395c                 | LR__1572
1395c     A8 9D BF FD | 	call	#_pop
13960     FF 26 02 F6 | 	mov	local01, result3
13964     A7 FA 61 FC | 	wrlong	result1, fp
13968     04 4E 05 F1 | 	add	fp, #4
1396c     A7 FC 61 FC | 	wrlong	result2, fp
13970     04 4E 05 F1 | 	add	fp, #4
13974     A7 26 62 FC | 	wrlong	local01, fp
13978     08 4E 85 F1 | 	sub	fp, #8
1397c     A7 12 02 F6 | 	mov	arg01, fp
13980     68 9F BF FD | 	call	#_converttoint
13984     10 4E 05 F1 | 	add	fp, #16
13988     A7 FA 61 FC | 	wrlong	result1, fp
1398c     FD 12 02 F6 | 	mov	arg01, result1
13990     04 4E 05 F1 | 	add	fp, #4
13994     A7 14 02 FB | 	rdlong	arg02, fp
13998     14 4E 85 F1 | 	sub	fp, #20
1399c     10 16 06 F6 | 	mov	arg03, #16
139a0     98 59 B1 FD | 	call	#__system__Number_S
139a4     A7 FA 61 FC | 	wrlong	result1, fp
139a8     08 4E 05 F1 | 	add	fp, #8
139ac     A7 3E 68 FC | 	wrlong	#31, fp
139b0     08 4E 85 F1 | 	sub	fp, #8
139b4     A7 12 02 F6 | 	mov	arg01, fp
139b8     E4 9D BF FD | 	call	#_push
139bc                 | LR__1573
139bc     A7 F0 03 F6 | 	mov	ptra, fp
139c0     B2 00 A0 FD | 	call	#popregs_
139c4                 | _do_hex_ret
139c4     2D 00 64 FD | 	ret
139c8                 | 
139c8                 | ' 
139c8                 | ' ' ----------------  if
139c8                 | ' 
139c8                 | ' sub do_if
139c8                 | _do_if
139c8     05 4A 05 F6 | 	mov	COUNT_, #5
139cc     A8 00 A0 FD | 	call	#pushregs_
139d0     34 9D BF FD | 	call	#_pop
139d4     FD 26 0A F6 | 	mov	local01, result1 wz
139d8     FE 28 02 F6 | 	mov	local02, result2
139dc     FF 2A 02 F6 | 	mov	local03, result3
139e0                 | ' t1=pop()
139e0                 | ' ' if uresult=0, jump over else
139e0                 | ' if t1.result.uresult = 0 then 
139e0     BC 00 90 5D |  if_ne	jmp	#LR__1582
139e4                 | '   for i=lineptr_e to lineptr-1
139e4     4A 00 00 FF 
139e8     80 E4 05 F1 | 	add	objptr, ##38016
139ec     F2 2C 02 FB | 	rdlong	local04, objptr
139f0     04 E4 85 F1 | 	sub	objptr, #4
139f4     F2 2E 02 FB | 	rdlong	local05, objptr
139f8     4A 00 00 FF 
139fc     7C E4 85 F1 | 	sub	objptr, ##38012
13a00                 | LR__1580
13a00     17 2D 52 F2 | 	cmps	local04, local05 wc
13a04     78 00 90 3D |  if_ae	jmp	#LR__1581
13a08     16 FF 01 F6 | 	mov	result3, local04
13a0c     01 FE 65 F0 | 	shl	result3, #1
13a10     16 FF 01 F1 | 	add	result3, local04
13a14     02 FE 65 F0 | 	shl	result3, #2
13a18     47 00 00 FF 
13a1c     7C E4 05 F1 | 	add	objptr, ##36476
13a20     F2 FE 01 F1 | 	add	result3, objptr
13a24     FF 26 02 FB | 	rdlong	local01, result3
13a28     04 FE 05 F1 | 	add	result3, #4
13a2c     FF FC 01 FB | 	rdlong	result2, result3
13a30     16 FF 01 F6 | 	mov	result3, local04
13a34     01 FE 65 F0 | 	shl	result3, #1
13a38     16 FF 01 F1 | 	add	result3, local04
13a3c     02 FE 65 F0 | 	shl	result3, #2
13a40     F2 FE 01 F1 | 	add	result3, objptr
13a44     08 FE 05 F1 | 	add	result3, #8
13a48     FF FE 01 FB | 	rdlong	result3, result3
13a4c     FE 28 02 F6 | 	mov	local02, result2
13a50     FF 2A 02 F6 | 	mov	local03, result3
13a54                 | '     t1=compiledline(i)
13a54                 | '     if t1.result_type=token_else then lineptr_e=i : return
13a54     5A 2A 0E F2 | 	cmp	local03, #90 wz
13a58     47 00 00 FF 
13a5c     7C E4 85 F1 | 	sub	objptr, ##36476
13a60     4A 00 00 AF 
13a64     80 E4 05 A1 |  if_e	add	objptr, ##38016
13a68     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13a6c     4A 00 00 AF 
13a70     80 E4 85 A1 |  if_e	sub	objptr, ##38016
13a74     28 00 90 AD |  if_e	jmp	#LR__1583
13a78     01 2C 06 F1 | 	add	local04, #1
13a7c     80 FF 9F FD | 	jmp	#LR__1580
13a80                 | LR__1581
13a80     4A 00 00 FF 
13a84     7C E4 05 F1 | 	add	objptr, ##38012
13a88     F2 2E 02 FB | 	rdlong	local05, objptr
13a8c     01 2E 86 F1 | 	sub	local05, #1
13a90     04 E4 05 F1 | 	add	objptr, #4
13a94     F2 2E 62 FC | 	wrlong	local05, objptr
13a98     4A 00 00 FF 
13a9c     80 E4 85 F1 | 	sub	objptr, ##38016
13aa0                 | LR__1582
13aa0                 | LR__1583
13aa0     A7 F0 03 F6 | 	mov	ptra, fp
13aa4     B2 00 A0 FD | 	call	#popregs_
13aa8                 | _do_if_ret
13aa8     2D 00 64 FD | 	ret
13aac                 | 
13aac                 | ' 
13aac                 | ' ' ----------------  inkey$
13aac                 | ' 
13aac                 | ' sub do_inkey
13aac                 | _do_inkey
13aac     02 4A 05 F6 | 	mov	COUNT_, #2
13ab0     A8 00 A0 FD | 	call	#pushregs_
13ab4     0C F0 07 F1 | 	add	ptra, #12
13ab8     E4 2C B1 FD | 	call	#_usbnew_spin2_get_key
13abc     45 00 00 FF 
13ac0     74 E4 05 F1 | 	add	objptr, ##35444
13ac4     F2 FA 61 FC | 	wrlong	result1, objptr
13ac8                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13ac8     45 00 00 FF 
13acc     74 E4 85 F1 | 	sub	objptr, ##35444
13ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
13ad4     94 00 90 AD |  if_e	jmp	#LR__1591
13ad8     45 00 00 FF 
13adc     74 E4 05 F1 | 	add	objptr, ##35444
13ae0     F2 1C 02 FB | 	rdlong	arg06, objptr
13ae4     45 00 00 FF 
13ae8     74 E4 85 F1 | 	sub	objptr, ##35444
13aec     00 00 40 FF 
13af0     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13af4     45 00 00 CF 
13af8     74 E4 05 C1 |  if_b	add	objptr, ##35444
13afc     F2 26 02 CB |  if_b	rdlong	local01, objptr
13b00     45 00 00 CF 
13b04     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13b08     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13b0c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13b10     58 00 90 3D |  if_ae	jmp	#LR__1591
13b14                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
13b14     50 00 00 FF 
13b18     3C E5 05 F1 | 	add	objptr, ##41276
13b1c     F2 1C 02 FB | 	rdlong	arg06, objptr
13b20     50 00 00 FF 
13b24     3C E5 85 F1 | 	sub	objptr, ##41276
13b28     01 1C 0E F2 | 	cmp	arg06, #1 wz
13b2c     3C 00 90 5D |  if_ne	jmp	#LR__1590
13b30     52 00 00 FF 
13b34     A4 E4 05 F1 | 	add	objptr, ##42148
13b38     F2 14 02 FB | 	rdlong	arg02, objptr
13b3c     04 E4 85 F1 | 	sub	objptr, #4
13b40     F2 1A 02 FB | 	rdlong	arg05, objptr
13b44     07 12 06 F6 | 	mov	arg01, #7
13b48     56 00 00 FF 
13b4c     44 16 06 F6 | 	mov	arg03, ##44100
13b50     0C 18 C6 F9 | 	decod	arg04, #12
13b54     01 1C 66 F6 | 	neg	arg06, #1
13b58     46 00 00 FF 
13b5c     D4 E5 85 F1 | 	sub	objptr, ##36308
13b60     28 30 B1 FD | 	call	#_audio096_spin2_play
13b64     0B 00 00 FF 
13b68     CC E4 85 F1 | 	sub	objptr, ##5836
13b6c                 | LR__1590
13b6c                 | LR__1591
13b6c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13b6c     45 00 00 FF 
13b70     74 E4 05 F1 | 	add	objptr, ##35444
13b74     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13b78     45 00 00 FF 
13b7c     74 E4 85 F1 | 	sub	objptr, ##35444
13b80     D4 01 90 AD |  if_e	jmp	#LR__1600
13b84     45 00 00 FF 
13b88     74 E4 05 F1 | 	add	objptr, ##35444
13b8c     F2 1C 02 FB | 	rdlong	arg06, objptr
13b90     45 00 00 FF 
13b94     74 E4 85 F1 | 	sub	objptr, ##35444
13b98     00 00 40 FF 
13b9c     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13ba0     45 00 00 CF 
13ba4     74 E4 05 C1 |  if_b	add	objptr, ##35444
13ba8     F2 26 02 CB |  if_b	rdlong	local01, objptr
13bac     45 00 00 CF 
13bb0     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13bb4     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13bb8     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13bbc     98 01 90 3D |  if_ae	jmp	#LR__1600
13bc0                 | '   if leds and 2 = 2 then 
13bc0     52 00 00 FF 
13bc4     E0 E4 05 F1 | 	add	objptr, ##42208
13bc8     F2 26 0A FB | 	rdlong	local01, objptr wz
13bcc     52 00 00 FF 
13bd0     E0 E4 85 F1 | 	sub	objptr, ##42208
13bd4     58 01 90 AD |  if_e	jmp	#LR__1599
13bd8                 | '     if key>96 andalso key<123 then
13bd8     45 00 00 FF 
13bdc     74 E4 05 F1 | 	add	objptr, ##35444
13be0     F2 26 02 FB | 	rdlong	local01, objptr
13be4     45 00 00 FF 
13be8     74 E4 85 F1 | 	sub	objptr, ##35444
13bec     61 26 16 F2 | 	cmp	local01, #97 wc
13bf0     3C 00 90 CD |  if_b	jmp	#LR__1592
13bf4     45 00 00 FF 
13bf8     74 E4 05 F1 | 	add	objptr, ##35444
13bfc     F2 26 02 FB | 	rdlong	local01, objptr
13c00     45 00 00 FF 
13c04     74 E4 85 F1 | 	sub	objptr, ##35444
13c08     7B 26 16 F2 | 	cmp	local01, #123 wc
13c0c     20 00 90 3D |  if_ae	jmp	#LR__1592
13c10     45 00 00 FF 
13c14     74 E4 05 F1 | 	add	objptr, ##35444
13c18     F2 26 02 FB | 	rdlong	local01, objptr
13c1c     20 26 86 F1 | 	sub	local01, #32
13c20     F2 26 62 FC | 	wrlong	local01, objptr
13c24     45 00 00 FF 
13c28     74 E4 85 F1 | 	sub	objptr, ##35444
13c2c     00 01 90 FD | 	jmp	#LR__1598
13c30                 | LR__1592
13c30     45 00 00 FF 
13c34     74 E4 05 F1 | 	add	objptr, ##35444
13c38     F2 26 02 FB | 	rdlong	local01, objptr
13c3c     45 00 00 FF 
13c40     74 E4 85 F1 | 	sub	objptr, ##35444
13c44     41 26 16 F2 | 	cmp	local01, #65 wc
13c48     3C 00 90 CD |  if_b	jmp	#LR__1593
13c4c     45 00 00 FF 
13c50     74 E4 05 F1 | 	add	objptr, ##35444
13c54     F2 26 02 FB | 	rdlong	local01, objptr
13c58     45 00 00 FF 
13c5c     74 E4 85 F1 | 	sub	objptr, ##35444
13c60     5B 26 16 F2 | 	cmp	local01, #91 wc
13c64     20 00 90 3D |  if_ae	jmp	#LR__1593
13c68     45 00 00 FF 
13c6c     74 E4 05 F1 | 	add	objptr, ##35444
13c70     F2 26 02 FB | 	rdlong	local01, objptr
13c74     20 26 06 F1 | 	add	local01, #32
13c78     F2 26 62 FC | 	wrlong	local01, objptr
13c7c     45 00 00 FF 
13c80     74 E4 85 F1 | 	sub	objptr, ##35444
13c84     A8 00 90 FD | 	jmp	#LR__1597
13c88                 | LR__1593
13c88     45 00 00 FF 
13c8c     74 E4 05 F1 | 	add	objptr, ##35444
13c90     F2 26 02 FB | 	rdlong	local01, objptr
13c94     45 00 00 FF 
13c98     74 E4 85 F1 | 	sub	objptr, ##35444
13c9c     17 26 16 F2 | 	cmp	local01, #23 wc
13ca0     3C 00 90 CD |  if_b	jmp	#LR__1594
13ca4     45 00 00 FF 
13ca8     74 E4 05 F1 | 	add	objptr, ##35444
13cac     F2 26 02 FB | 	rdlong	local01, objptr
13cb0     45 00 00 FF 
13cb4     74 E4 85 F1 | 	sub	objptr, ##35444
13cb8     20 26 16 F2 | 	cmp	local01, #32 wc
13cbc     20 00 90 3D |  if_ae	jmp	#LR__1594
13cc0     45 00 00 FF 
13cc4     74 E4 05 F1 | 	add	objptr, ##35444
13cc8     F2 26 02 FB | 	rdlong	local01, objptr
13ccc     09 26 86 F1 | 	sub	local01, #9
13cd0     F2 26 62 FC | 	wrlong	local01, objptr
13cd4     45 00 00 FF 
13cd8     74 E4 85 F1 | 	sub	objptr, ##35444
13cdc     50 00 90 FD | 	jmp	#LR__1596
13ce0                 | LR__1594
13ce0     45 00 00 FF 
13ce4     74 E4 05 F1 | 	add	objptr, ##35444
13ce8     F2 28 02 FB | 	rdlong	local02, objptr
13cec     45 00 00 FF 
13cf0     74 E4 85 F1 | 	sub	objptr, ##35444
13cf4     0E 28 16 F2 | 	cmp	local02, #14 wc
13cf8     34 00 90 CD |  if_b	jmp	#LR__1595
13cfc     45 00 00 FF 
13d00     74 E4 05 F1 | 	add	objptr, ##35444
13d04     F2 26 02 FB | 	rdlong	local01, objptr
13d08     45 00 00 FF 
13d0c     74 E4 85 F1 | 	sub	objptr, ##35444
13d10     17 26 16 F2 | 	cmp	local01, #23 wc
13d14     52 00 00 CF 
13d18     E4 E4 05 C1 |  if_b	add	objptr, ##42212
13d1c     F2 28 02 CB |  if_b	rdlong	local02, objptr
13d20     27 28 06 C1 |  if_b	add	local02, #39
13d24     F2 28 62 CC |  if_b	wrlong	local02, objptr
13d28     52 00 00 CF 
13d2c     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
13d30                 | LR__1595
13d30                 | LR__1596
13d30                 | LR__1597
13d30                 | LR__1598
13d30                 | LR__1599
13d30     45 00 00 FF 
13d34     74 E4 05 F1 | 	add	objptr, ##35444
13d38     F2 12 02 FB | 	rdlong	arg01, objptr
13d3c     45 00 00 FF 
13d40     74 E4 85 F1 | 	sub	objptr, ##35444
13d44     F8 FB B0 FD | 	call	#_scantochar
13d48     FD 12 02 F6 | 	mov	arg01, result1
13d4c     5C 55 B1 FD | 	call	#__system__Chr_S
13d50     A7 FA 61 FC | 	wrlong	result1, fp
13d54     0C 00 90 FD | 	jmp	#LR__1601
13d58                 | LR__1600
13d58     BA 01 00 FF 
13d5c     B2 29 06 F6 | 	mov	local02, ##@LR__5963
13d60     A7 28 62 FC | 	wrlong	local02, fp
13d64                 | LR__1601
13d64     08 4E 05 F1 | 	add	fp, #8
13d68     A7 3E 68 FC | 	wrlong	#31, fp
13d6c     08 4E 85 F1 | 	sub	fp, #8
13d70     A7 12 02 F6 | 	mov	arg01, fp
13d74     28 9A BF FD | 	call	#_push
13d78     A7 F0 03 F6 | 	mov	ptra, fp
13d7c     B2 00 A0 FD | 	call	#popregs_
13d80                 | _do_inkey_ret
13d80     2D 00 64 FD | 	ret
13d84                 | 
13d84                 | ' 
13d84                 | ' ' ----------------  ink
13d84                 | ' 
13d84                 | ' sub do_ink
13d84                 | _do_ink
13d84     00 4A 05 F6 | 	mov	COUNT_, #0
13d88     A8 00 A0 FD | 	call	#pushregs_
13d8c     0C F0 07 F1 | 	add	ptra, #12
13d90     74 99 BF FD | 	call	#_pop
13d94     FF 14 02 F6 | 	mov	arg02, result3
13d98     A7 FA 61 FC | 	wrlong	result1, fp
13d9c     04 4E 05 F1 | 	add	fp, #4
13da0     A7 FC 61 FC | 	wrlong	result2, fp
13da4     04 4E 05 F1 | 	add	fp, #4
13da8     A7 14 62 FC | 	wrlong	arg02, fp
13dac     08 4E 85 F1 | 	sub	fp, #8
13db0     A7 12 02 F6 | 	mov	arg01, fp
13db4     34 9B BF FD | 	call	#_converttoint
13db8     37 00 00 FF 
13dbc     3C E4 05 F1 | 	add	objptr, ##28220
13dc0     F2 FA 61 FC | 	wrlong	result1, objptr
13dc4     04 E4 85 F1 | 	sub	objptr, #4
13dc8     F2 14 02 FB | 	rdlong	arg02, objptr
13dcc                 | ' 
13dcc                 | ' write_color:=ff
13dcc     36 00 00 FF 
13dd0     F7 E5 85 F1 | 	sub	objptr, ##28151
13dd4     F2 FA 61 FC | 	wrlong	result1, objptr
13dd8                 | ' write_background:=bb
13dd8     04 E4 05 F1 | 	add	objptr, #4
13ddc     F2 14 62 FC | 	wrlong	arg02, objptr
13de0     36 00 00 FF 
13de4     F7 E5 05 F1 | 	add	objptr, ##28151
13de8     F2 12 02 FB | 	rdlong	arg01, objptr
13dec     37 00 00 FF 
13df0     3C E4 85 F1 | 	sub	objptr, ##28220
13df4     C8 03 B1 FD | 	call	#_hg010b_spin2_setcursorcolor
13df8     A7 F0 03 F6 | 	mov	ptra, fp
13dfc     B2 00 A0 FD | 	call	#popregs_
13e00                 | _do_ink_ret
13e00     2D 00 64 FD | 	ret
13e04                 | 
13e04                 | ' 
13e04                 | ' ' ----------------  int
13e04                 | ' 
13e04                 | ' sub do_int
13e04                 | _do_int
13e04     02 4A 05 F6 | 	mov	COUNT_, #2
13e08     A8 00 A0 FD | 	call	#pushregs_
13e0c     10 F0 07 F1 | 	add	ptra, #16
13e10     F4 98 BF FD | 	call	#_pop
13e14     FE 26 02 F6 | 	mov	local01, result2
13e18     FF 28 02 F6 | 	mov	local02, result3
13e1c     A7 FA 61 FC | 	wrlong	result1, fp
13e20     04 4E 05 F1 | 	add	fp, #4
13e24     A7 26 62 FC | 	wrlong	local01, fp
13e28     04 4E 05 F1 | 	add	fp, #4
13e2c     A7 28 62 FC | 	wrlong	local02, fp
13e30                 | ' 
13e30                 | ' t1=pop()
13e30                 | ' select case t1.result_type
13e30     08 4E 85 F1 | 	sub	fp, #8
13e34     1E 28 0E F2 | 	cmp	local02, #30 wz
13e38     14 00 90 AD |  if_e	jmp	#LR__1610
13e3c     1F 28 0E F2 | 	cmp	local02, #31 wz
13e40     20 00 90 AD |  if_e	jmp	#LR__1611
13e44     2B 28 0E F2 | 	cmp	local02, #43 wz
13e48     34 00 90 AD |  if_e	jmp	#LR__1612
13e4c     50 00 90 FD | 	jmp	#LR__1613
13e50                 | LR__1610
13e50     A7 12 02 FB | 	rdlong	arg01, fp
13e54     00 14 06 F6 | 	mov	arg02, #0
13e58     50 65 B1 FD | 	call	#__system___float_tointeger
13e5c     A7 FA 61 FC | 	wrlong	result1, fp
13e60     3C 00 90 FD | 	jmp	#LR__1613
13e64                 | LR__1611
13e64     A7 12 02 FB | 	rdlong	arg01, fp
13e68     84 68 B1 FD | 	call	#__system____builtin_atof
13e6c     FD 12 02 F6 | 	mov	arg01, result1
13e70     00 14 06 F6 | 	mov	arg02, #0
13e74     34 65 B1 FD | 	call	#__system___float_tointeger
13e78     A7 FA 61 FC | 	wrlong	result1, fp
13e7c     20 00 90 FD | 	jmp	#LR__1613
13e80                 | LR__1612
13e80     A7 12 02 FB | 	rdlong	arg01, fp
13e84     F8 99 BF FD | 	call	#_convertstring
13e88     FD 12 02 F6 | 	mov	arg01, result1
13e8c     60 68 B1 FD | 	call	#__system____builtin_atof
13e90     FD 12 02 F6 | 	mov	arg01, result1
13e94     00 14 06 F6 | 	mov	arg02, #0
13e98     10 65 B1 FD | 	call	#__system___float_tointeger
13e9c     A7 FA 61 FC | 	wrlong	result1, fp
13ea0                 | LR__1613
13ea0     08 4E 05 F1 | 	add	fp, #8
13ea4     A7 38 68 FC | 	wrlong	#28, fp
13ea8     08 4E 85 F1 | 	sub	fp, #8
13eac     A7 12 02 F6 | 	mov	arg01, fp
13eb0     EC 98 BF FD | 	call	#_push
13eb4     A7 F0 03 F6 | 	mov	ptra, fp
13eb8     B2 00 A0 FD | 	call	#popregs_
13ebc                 | _do_int_ret
13ebc     2D 00 64 FD | 	ret
13ec0                 | 
13ec0                 | ' 
13ec0                 | ' ' ----------------  input
13ec0                 | ' 
13ec0                 | ' sub do_input
13ec0                 | _do_input
13ec0     11 4A 05 F6 | 	mov	COUNT_, #17
13ec4     A8 00 A0 FD | 	call	#pushregs_
13ec8     50 F1 07 F1 | 	add	ptra, #336
13ecc     4A 00 00 FF 
13ed0     80 E4 05 F1 | 	add	objptr, ##38016
13ed4     F2 FE 01 FB | 	rdlong	result3, objptr
13ed8     FF FC 01 F6 | 	mov	result2, result3
13edc     01 FC 65 F0 | 	shl	result2, #1
13ee0     FF FC 01 F1 | 	add	result2, result3
13ee4     02 FC 65 F0 | 	shl	result2, #2
13ee8     03 00 00 FF 
13eec     04 E4 85 F1 | 	sub	objptr, ##1540
13ef0     F2 FC 01 F1 | 	add	result2, objptr
13ef4     FE FC 01 FB | 	rdlong	result2, result2
13ef8     08 4E 05 F1 | 	add	fp, #8
13efc     A7 FC 61 FC | 	wrlong	result2, fp
13f00                 | ' 
13f00                 | ' numpar=compiledline(lineptr_e).result.uresult
13f00                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13f00     08 4E 85 F1 | 	sub	fp, #8
13f04     01 FC 15 F2 | 	cmp	result2, #1 wc
13f08     47 00 00 FF 
13f0c     7C E4 85 F1 | 	sub	objptr, ##36476
13f10     14 00 90 CD |  if_b	jmp	#LR__1620
13f14     08 4E 05 F1 | 	add	fp, #8
13f18     A7 FC 01 FB | 	rdlong	result2, fp
13f1c     08 4E 85 F1 | 	sub	fp, #8
13f20     41 FC 15 F2 | 	cmp	result2, #65 wc
13f24     50 00 90 CD |  if_b	jmp	#LR__1621
13f28                 | LR__1620
13f28     00 12 06 F6 | 	mov	arg01, #0
13f2c     64 8E B1 FD | 	call	#__system___getiolock_0616
13f30     FD 12 02 F6 | 	mov	arg01, result1
13f34     34 31 B1 FD | 	call	#__system___lockmem
13f38     BA 01 00 FF 
13f3c     B3 15 06 F6 | 	mov	arg02, ##@LR__5964
13f40     00 12 06 F6 | 	mov	arg01, #0
13f44     00 16 06 F6 | 	mov	arg03, #0
13f48     14 3E B1 FD | 	call	#__system___basic_print_string
13f4c     00 12 06 F6 | 	mov	arg01, #0
13f50     40 8E B1 FD | 	call	#__system___getiolock_0616
13f54     FD 00 68 FC | 	wrlong	#0, result1
13f58     50 00 00 FF 
13f5c     F0 E4 05 F1 | 	add	objptr, ##41200
13f60     F2 14 02 FB | 	rdlong	arg02, objptr
13f64     50 00 00 FF 
13f68     F0 E4 85 F1 | 	sub	objptr, ##41200
13f6c     27 12 06 F6 | 	mov	arg01, #39
13f70     4C F6 B0 FD | 	call	#_printerror
13f74     44 0B 90 FD | 	jmp	#LR__1670
13f78                 | LR__1621
13f78     08 4E 05 F1 | 	add	fp, #8
13f7c     A7 FC 01 FB | 	rdlong	result2, fp
13f80     01 FC 85 F1 | 	sub	result2, #1
13f84     28 4F 05 F1 | 	add	fp, #296
13f88     A7 FC 61 FC | 	wrlong	result2, fp
13f8c     3C E4 05 F1 | 	add	objptr, #60
13f90     F2 FC E1 FA | 	rdword	result2, objptr
13f94     FE FC 51 F6 | 	abs	result2, result2 wc
13f98     01 FC 45 F0 | 	shr	result2, #1
13f9c     FE FC 81 F6 | 	negc	result2, result2
13fa0     0C 4E 05 F1 | 	add	fp, #12
13fa4     A7 FC 61 FC | 	wrlong	result2, fp
13fa8     02 E4 05 F1 | 	add	objptr, #2
13fac     F2 26 C2 FA | 	rdbyte	local01, objptr
13fb0     3E E4 85 F1 | 	sub	objptr, #62
13fb4     04 4E 05 F1 | 	add	fp, #4
13fb8     A7 26 62 FC | 	wrlong	local01, fp
13fbc     40 4F 85 F1 | 	sub	fp, #320
13fc0                 | ' i=numpar-1
13fc0                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13fc0                 | ' do
13fc0                 | LR__1622
13fc0     40 C8 BE FD | 	call	#_edit
13fc4     A7 FA 61 FC | 	wrlong	result1, fp
13fc8                 | ' 
13fc8                 | '   line$=edit()
13fc8                 | ' 
13fc8                 | '   if v.cursor_y=cpy+1 then
13fc8     3E E4 05 F1 | 	add	objptr, #62
13fcc     F2 26 C2 FA | 	rdbyte	local01, objptr
13fd0     3E E4 85 F1 | 	sub	objptr, #62
13fd4     40 4F 05 F1 | 	add	fp, #320
13fd8     A7 16 02 FB | 	rdlong	arg03, fp
13fdc     40 4F 85 F1 | 	sub	fp, #320
13fe0     01 16 06 F1 | 	add	arg03, #1
13fe4     0B 27 0A F2 | 	cmp	local01, arg03 wz
13fe8     6C 00 90 5D |  if_ne	jmp	#LR__1625
13fec     A7 26 02 FB | 	rdlong	local01, fp
13ff0     13 13 02 F6 | 	mov	arg01, local01
13ff4     09 29 02 F6 | 	mov	local02, arg01
13ff8     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
13ffc                 | LR__1623
13ffc     14 FB C9 FA | 	rdbyte	result1, local02 wz
14000     01 28 06 51 |  if_ne	add	local02, #1
14004     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
14008                 | LR__1624
14008     09 29 82 F1 | 	sub	local02, arg01
1400c     14 15 02 F6 | 	mov	arg02, local02
14010     3C 4F 05 F1 | 	add	fp, #316
14014     A7 16 02 FB | 	rdlong	arg03, fp
14018     3C 4F 85 F1 | 	sub	fp, #316
1401c     0B 15 82 F1 | 	sub	arg02, arg03
14020     37 00 00 FF 
14024     34 E4 05 F1 | 	add	objptr, ##28212
14028     F2 16 02 FB | 	rdlong	arg03, objptr
1402c     37 00 00 FF 
14030     34 E4 85 F1 | 	sub	objptr, ##28212
14034     0B 15 02 F1 | 	add	arg02, arg03
14038     13 13 02 F6 | 	mov	arg01, local01
1403c     30 51 B1 FD | 	call	#__system__Right_S
14040     FD 12 02 F6 | 	mov	arg01, result1
14044     30 55 B1 FD | 	call	#__system__RTrim_S
14048     FD 12 02 F6 | 	mov	arg01, result1
1404c     68 54 B1 FD | 	call	#__system__LTrim_S
14050     A7 FA 61 FC | 	wrlong	result1, fp
14054     14 00 90 FD | 	jmp	#LR__1626
14058                 | LR__1625
14058     A7 12 02 FB | 	rdlong	arg01, fp
1405c     18 55 B1 FD | 	call	#__system__RTrim_S
14060     FD 12 02 F6 | 	mov	arg01, result1
14064     50 54 B1 FD | 	call	#__system__LTrim_S
14068     A7 FA 61 FC | 	wrlong	result1, fp
1406c                 | LR__1626
1406c                 | '   do
1406c                 | LR__1627
1406c     A7 14 02 FB | 	rdlong	arg02, fp
14070     BA 01 00 FF 
14074     BE 17 06 F6 | 	mov	arg03, ##@LR__5965
14078     01 12 06 F6 | 	mov	arg01, #1
1407c     B0 55 B1 FD | 	call	#__system__Instr
14080     0C 4E 05 F1 | 	add	fp, #12
14084     A7 FA 61 FC | 	wrlong	result1, fp
14088                 | '    comma=instr(1,line$,",")  
14088                 | '    if comma>0  then 
14088     0C 4E 85 F1 | 	sub	fp, #12
1408c     01 FA 15 F2 | 	cmp	result1, #1 wc
14090     68 00 90 CD |  if_b	jmp	#LR__1630
14094     A7 12 02 FB | 	rdlong	arg01, fp
14098     0C 4E 05 F1 | 	add	fp, #12
1409c     A7 14 02 FB | 	rdlong	arg02, fp
140a0     0C 4E 85 F1 | 	sub	fp, #12
140a4     01 14 86 F1 | 	sub	arg02, #1
140a8     3C 50 B1 FD | 	call	#__system__Left_S
140ac     04 4E 05 F1 | 	add	fp, #4
140b0     A7 FA 61 FC | 	wrlong	result1, fp
140b4     04 4E 85 F1 | 	sub	fp, #4
140b8     A7 26 02 FB | 	rdlong	local01, fp
140bc     13 13 02 F6 | 	mov	arg01, local01
140c0     09 29 02 F6 | 	mov	local02, arg01
140c4     97 06 48 FB | 	callpa	#(@LR__1629-@LR__1628)>>2,fcache_load_ptr_
140c8                 | LR__1628
140c8     14 FB C9 FA | 	rdbyte	result1, local02 wz
140cc     01 28 06 51 |  if_ne	add	local02, #1
140d0     F4 FF 9F 5D |  if_ne	jmp	#LR__1628
140d4                 | LR__1629
140d4     09 29 82 F1 | 	sub	local02, arg01
140d8     14 15 02 F6 | 	mov	arg02, local02
140dc     0C 4E 05 F1 | 	add	fp, #12
140e0     A7 16 02 FB | 	rdlong	arg03, fp
140e4     0C 4E 85 F1 | 	sub	fp, #12
140e8     0B 15 82 F1 | 	sub	arg02, arg03
140ec     13 13 02 F6 | 	mov	arg01, local01
140f0     7C 50 B1 FD | 	call	#__system__Right_S
140f4     A7 FA 61 FC | 	wrlong	result1, fp
140f8     28 00 90 FD | 	jmp	#LR__1631
140fc                 | LR__1630
140fc     A7 12 02 FB | 	rdlong	arg01, fp
14100     74 54 B1 FD | 	call	#__system__RTrim_S
14104     FD 12 02 F6 | 	mov	arg01, result1
14108     AC 53 B1 FD | 	call	#__system__LTrim_S
1410c     04 4E 05 F1 | 	add	fp, #4
14110     A7 FA 61 FC | 	wrlong	result1, fp
14114     04 4E 85 F1 | 	sub	fp, #4
14118     BA 01 00 FF 
1411c     C0 27 06 F6 | 	mov	local01, ##@LR__5966
14120     A7 26 62 FC | 	wrlong	local01, fp
14124                 | LR__1631
14124     30 4F 05 F1 | 	add	fp, #304
14128     A7 26 02 FB | 	rdlong	local01, fp
1412c     02 26 66 F0 | 	shl	local01, #2
14130     04 4F 85 F1 | 	sub	fp, #260
14134     A7 26 02 F1 | 	add	local01, fp
14138     28 4E 85 F1 | 	sub	fp, #40
1413c     A7 FA 01 FB | 	rdlong	result1, fp
14140     13 FB 61 FC | 	wrlong	result1, local01
14144     2C 4F 05 F1 | 	add	fp, #300
14148     A7 26 02 FB | 	rdlong	local01, fp
1414c     01 26 86 F1 | 	sub	local01, #1
14150     A7 26 62 FC | 	wrlong	local01, fp
14154     30 4F 85 F1 | 	sub	fp, #304
14158     00 26 56 F2 | 	cmps	local01, #0 wc
1415c     18 00 90 CD |  if_b	jmp	#LR__1632
14160     A7 12 02 FB | 	rdlong	arg01, fp
14164     BA 01 00 FF 
14168     C1 15 06 F6 | 	mov	arg02, ##@LR__5967
1416c     24 2F B1 FD | 	call	#__system___string_cmp
14170     00 FA 0D F2 | 	cmp	result1, #0 wz
14174     F4 FE 9F 5D |  if_ne	jmp	#LR__1627
14178                 | LR__1632
14178     30 4F 05 F1 | 	add	fp, #304
1417c     A7 26 02 FB | 	rdlong	local01, fp
14180     30 4F 85 F1 | 	sub	fp, #304
14184     00 26 56 F2 | 	cmps	local01, #0 wc
14188     34 FE 9F 3D |  if_ae	jmp	#LR__1622
1418c                 | ' 
1418c                 | ' for i=0 to numpar-1
1418c     30 4F 05 F1 | 	add	fp, #304
14190     A7 00 68 FC | 	wrlong	#0, fp
14194     28 4F 85 F1 | 	sub	fp, #296
14198     A7 2A 02 FB | 	rdlong	local03, fp
1419c     08 4E 85 F1 | 	sub	fp, #8
141a0                 | LR__1633
141a0     30 4F 05 F1 | 	add	fp, #304
141a4     A7 2C 02 FB | 	rdlong	local04, fp
141a8     30 4F 85 F1 | 	sub	fp, #304
141ac     16 27 02 F6 | 	mov	local01, local04
141b0     15 27 52 F2 | 	cmps	local01, local03 wc
141b4     04 09 90 3D |  if_ae	jmp	#LR__1669
141b8                 | ' 
141b8                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
141b8     30 4F 05 F1 | 	add	fp, #304
141bc     A7 16 02 FB | 	rdlong	arg03, fp
141c0     02 16 66 F0 | 	shl	arg03, #2
141c4     04 4F 85 F1 | 	sub	fp, #260
141c8     A7 16 02 F1 | 	add	arg03, fp
141cc     0B 13 02 FB | 	rdlong	arg01, arg03
141d0     2C 4E 85 F1 | 	sub	fp, #44
141d4     98 27 BF FD | 	call	#_isnum
141d8     FD 2E 02 F6 | 	mov	local05, result1
141dc     30 4F 05 F1 | 	add	fp, #304
141e0     A7 16 02 FB | 	rdlong	arg03, fp
141e4     02 16 66 F0 | 	shl	arg03, #2
141e8     04 4F 85 F1 | 	sub	fp, #260
141ec     A7 30 02 F6 | 	mov	local06, fp
141f0     A7 16 02 F1 | 	add	arg03, fp
141f4     0B 13 02 FB | 	rdlong	arg01, arg03
141f8     2C 4E 85 F1 | 	sub	fp, #44
141fc     5C 2B BF FD | 	call	#_isint
14200     FD 2E 2A F5 | 	andn	local05, result1 wz
14204     52 00 00 5F 
14208     10 E5 05 51 |  if_ne	add	objptr, ##42256
1420c     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
14210     52 00 00 5F 
14214     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14218                 | '   if isint(args(i)) then r=result_int 
14218     30 4F 05 F1 | 	add	fp, #304
1421c     A7 2E 02 FB | 	rdlong	local05, fp
14220     02 2E 66 F0 | 	shl	local05, #2
14224     04 4F 85 F1 | 	sub	fp, #260
14228     A7 2E 02 F1 | 	add	local05, fp
1422c     17 13 02 FB | 	rdlong	arg01, local05
14230     2C 4E 85 F1 | 	sub	fp, #44
14234     24 2B BF FD | 	call	#_isint
14238     00 FA 0D F2 | 	cmp	result1, #0 wz
1423c     52 00 00 5F 
14240     10 E5 05 51 |  if_ne	add	objptr, ##42256
14244     F2 38 68 5C |  if_ne	wrlong	#28, objptr
14248     52 00 00 5F 
1424c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14250                 | '   if isdec(args(i)) then r=result_uint 
14250     30 4F 05 F1 | 	add	fp, #304
14254     A7 2E 02 FB | 	rdlong	local05, fp
14258     02 2E 66 F0 | 	shl	local05, #2
1425c     04 4F 85 F1 | 	sub	fp, #260
14260     A7 2E 02 F1 | 	add	local05, fp
14264     17 13 02 FB | 	rdlong	arg01, local05
14268     2C 4E 85 F1 | 	sub	fp, #44
1426c     90 2D BF FD | 	call	#_isdec
14270     00 FA 0D F2 | 	cmp	result1, #0 wz
14274     52 00 00 5F 
14278     10 E5 05 51 |  if_ne	add	objptr, ##42256
1427c     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
14280     52 00 00 5F 
14284     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14288                 | '   if not isnum(args(i)) then 
14288     30 4F 05 F1 | 	add	fp, #304
1428c     A7 32 02 FB | 	rdlong	local07, fp
14290     19 35 02 F6 | 	mov	local08, local07
14294     02 34 66 F0 | 	shl	local08, #2
14298     04 4F 85 F1 | 	sub	fp, #260
1429c     A7 36 02 F6 | 	mov	local09, fp
142a0     A7 34 02 F1 | 	add	local08, fp
142a4     1A 13 02 FB | 	rdlong	arg01, local08
142a8     2C 4E 85 F1 | 	sub	fp, #44
142ac     C0 26 BF FD | 	call	#_isnum
142b0     FD 2E 22 F6 | 	not	local05, result1
142b4     00 2E 0E F2 | 	cmp	local05, #0 wz
142b8     44 01 90 AD |  if_e	jmp	#LR__1638
142bc     52 00 00 FF 
142c0     10 E5 05 F1 | 	add	objptr, ##42256
142c4     F2 56 68 FC | 	wrlong	#43, objptr
142c8     52 00 00 FF 
142cc     10 E5 85 F1 | 	sub	objptr, ##42256
142d0     04 4E 05 F1 | 	add	fp, #4
142d4     A7 12 02 FB | 	rdlong	arg01, fp
142d8     04 4E 85 F1 | 	sub	fp, #4
142dc     09 29 02 F6 | 	mov	local02, arg01
142e0     97 06 48 FB | 	callpa	#(@LR__1635-@LR__1634)>>2,fcache_load_ptr_
142e4                 | LR__1634
142e4     14 FB C9 FA | 	rdbyte	result1, local02 wz
142e8     01 28 06 51 |  if_ne	add	local02, #1
142ec     F4 FF 9F 5D |  if_ne	jmp	#LR__1634
142f0                 | LR__1635
142f0     09 29 82 F1 | 	sub	local02, arg01
142f4     14 33 02 F6 | 	mov	local07, local02
142f8     38 4F 05 F1 | 	add	fp, #312
142fc     A7 32 62 FC | 	wrlong	local07, fp
14300     52 00 00 FF 
14304     98 E4 05 F1 | 	add	objptr, ##42136
14308     F2 12 02 FB | 	rdlong	arg01, objptr
1430c     19 13 82 F1 | 	sub	arg01, local07
14310     04 12 86 F1 | 	sub	arg01, #4
14314     03 12 26 F5 | 	andn	arg01, #3
14318     F2 12 62 FC | 	wrlong	arg01, objptr
1431c     52 00 00 FF 
14320     98 E4 85 F1 | 	sub	objptr, ##42136
14324     A7 14 02 FB | 	rdlong	arg02, fp
14328     38 4F 85 F1 | 	sub	fp, #312
1432c     30 F4 B0 FD | 	call	#_pslpoke
14330                 | '     pslpoke memtop,l
14330                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
14330     34 4F 05 F1 | 	add	fp, #308
14334     A7 02 68 FC | 	wrlong	#1, fp
14338     04 4E 05 F1 | 	add	fp, #4
1433c     A7 38 02 FB | 	rdlong	local10, fp
14340     38 4F 85 F1 | 	sub	fp, #312
14344     01 38 06 F1 | 	add	local10, #1
14348                 | LR__1636
14348     34 4F 05 F1 | 	add	fp, #308
1434c     A7 2E 02 FB | 	rdlong	local05, fp
14350     34 4F 85 F1 | 	sub	fp, #308
14354     1C 2F 52 F2 | 	cmps	local05, local10 wc
14358     84 00 90 3D |  if_ae	jmp	#LR__1637
1435c     52 00 00 FF 
14360     98 E4 05 F1 | 	add	objptr, ##42136
14364     F2 32 02 FB | 	rdlong	local07, objptr
14368     52 00 00 FF 
1436c     98 E4 85 F1 | 	sub	objptr, ##42136
14370     03 32 06 F1 | 	add	local07, #3
14374     34 4F 05 F1 | 	add	fp, #308
14378     A7 3A 02 FB | 	rdlong	local11, fp
1437c     1D 33 02 F1 | 	add	local07, local11
14380     04 4E 85 F1 | 	sub	fp, #4
14384     A7 3C 02 FB | 	rdlong	local12, fp
14388     02 3C 66 F0 | 	shl	local12, #2
1438c     04 4F 85 F1 | 	sub	fp, #260
14390     A7 3E 02 F6 | 	mov	local13, fp
14394     A7 3C 02 F1 | 	add	local12, fp
14398     1E 13 02 FB | 	rdlong	arg01, local12
1439c     2C 4E 85 F1 | 	sub	fp, #44
143a0     01 40 06 F6 | 	mov	local14, #1
143a4     1D 15 02 F6 | 	mov	arg02, local11
143a8     01 16 06 F6 | 	mov	arg03, #1
143ac     50 4E B1 FD | 	call	#__system__Mid_S
143b0     FD 14 C2 FA | 	rdbyte	arg02, result1
143b4     19 13 02 F6 | 	mov	arg01, local07
143b8     34 F4 B0 FD | 	call	#_pspoke
143bc     34 4F 05 F1 | 	add	fp, #308
143c0     A7 34 02 FB | 	rdlong	local08, fp
143c4     1A 33 02 F6 | 	mov	local07, local08
143c8     1A 31 02 F6 | 	mov	local06, local08
143cc     18 37 02 F6 | 	mov	local09, local06
143d0     01 36 06 F1 | 	add	local09, #1
143d4     A7 36 62 FC | 	wrlong	local09, fp
143d8     34 4F 85 F1 | 	sub	fp, #308
143dc     68 FF 9F FD | 	jmp	#LR__1636
143e0                 | LR__1637
143e0     52 00 00 FF 
143e4     98 E4 05 F1 | 	add	objptr, ##42136
143e8     F2 2E 02 FB | 	rdlong	local05, objptr
143ec     52 00 00 FF 
143f0     98 E4 85 F1 | 	sub	objptr, ##42136
143f4     10 4E 05 F1 | 	add	fp, #16
143f8     A7 2E 62 FC | 	wrlong	local05, fp
143fc     10 4E 85 F1 | 	sub	fp, #16
14400                 | LR__1638
14400     04 93 BF FD | 	call	#_pop
14404     FE 2E 02 F6 | 	mov	local05, result2
14408     FF 42 02 F6 | 	mov	local15, result3
1440c     1C 4E 05 F1 | 	add	fp, #28
14410     A7 FA 61 FC | 	wrlong	result1, fp
14414     04 4E 05 F1 | 	add	fp, #4
14418     A7 2E 62 FC | 	wrlong	local05, fp
1441c     04 4E 05 F1 | 	add	fp, #4
14420     A7 42 62 FC | 	wrlong	local15, fp
14424     04 4E 85 F1 | 	sub	fp, #4
14428     A7 44 02 FB | 	rdlong	local16, fp
1442c     0C 4E 85 F1 | 	sub	fp, #12
14430     A7 44 62 FC | 	wrlong	local16, fp
14434                 | '   t1=pop() : vartype=t1.result.twowords(1)
14434                 | '   select case vartype
14434     14 4E 85 F1 | 	sub	fp, #20
14438     22 47 0A F6 | 	mov	local17, local16 wz
1443c     64 00 90 AD |  if_e	jmp	#LR__1639
14440     00 47 0E F2 | 	cmp	local17, #256 wz
14444     6C 00 90 AD |  if_e	jmp	#LR__1640
14448     01 47 0E F2 | 	cmp	local17, #257 wz
1444c     74 00 90 AD |  if_e	jmp	#LR__1641
14450     02 47 0E F2 | 	cmp	local17, #258 wz
14454     7C 00 90 AD |  if_e	jmp	#LR__1642
14458     03 47 0E F2 | 	cmp	local17, #259 wz
1445c     84 00 90 AD |  if_e	jmp	#LR__1643
14460     04 47 0E F2 | 	cmp	local17, #260 wz
14464     8C 00 90 AD |  if_e	jmp	#LR__1644
14468     05 47 0E F2 | 	cmp	local17, #261 wz
1446c     94 00 90 AD |  if_e	jmp	#LR__1645
14470     06 47 0E F2 | 	cmp	local17, #262 wz
14474     9C 00 90 AD |  if_e	jmp	#LR__1646
14478     07 47 0E F2 | 	cmp	local17, #263 wz
1447c     A4 00 90 AD |  if_e	jmp	#LR__1647
14480     08 47 0E F2 | 	cmp	local17, #264 wz
14484     AC 00 90 AD |  if_e	jmp	#LR__1648
14488     09 47 0E F2 | 	cmp	local17, #265 wz
1448c     B4 00 90 AD |  if_e	jmp	#LR__1649
14490     0A 47 0E F2 | 	cmp	local17, #266 wz
14494     BC 00 90 AD |  if_e	jmp	#LR__1650
14498     0B 47 0E F2 | 	cmp	local17, #267 wz
1449c     C4 00 90 AD |  if_e	jmp	#LR__1651
144a0     D0 00 90 FD | 	jmp	#LR__1652
144a4                 | LR__1639
144a4     18 4E 05 F1 | 	add	fp, #24
144a8     A7 18 68 FC | 	wrlong	#12, fp
144ac     18 4E 85 F1 | 	sub	fp, #24
144b0     CC 00 90 FD | 	jmp	#LR__1653
144b4                 | LR__1640
144b4     18 4E 05 F1 | 	add	fp, #24
144b8     A7 18 68 FC | 	wrlong	#12, fp
144bc     18 4E 85 F1 | 	sub	fp, #24
144c0     BC 00 90 FD | 	jmp	#LR__1653
144c4                 | LR__1641
144c4     18 4E 05 F1 | 	add	fp, #24
144c8     A7 02 68 FC | 	wrlong	#1, fp
144cc     18 4E 85 F1 | 	sub	fp, #24
144d0     AC 00 90 FD | 	jmp	#LR__1653
144d4                 | LR__1642
144d4     18 4E 05 F1 | 	add	fp, #24
144d8     A7 02 68 FC | 	wrlong	#1, fp
144dc     18 4E 85 F1 | 	sub	fp, #24
144e0     9C 00 90 FD | 	jmp	#LR__1653
144e4                 | LR__1643
144e4     18 4E 05 F1 | 	add	fp, #24
144e8     A7 04 68 FC | 	wrlong	#2, fp
144ec     18 4E 85 F1 | 	sub	fp, #24
144f0     8C 00 90 FD | 	jmp	#LR__1653
144f4                 | LR__1644
144f4     18 4E 05 F1 | 	add	fp, #24
144f8     A7 04 68 FC | 	wrlong	#2, fp
144fc     18 4E 85 F1 | 	sub	fp, #24
14500     7C 00 90 FD | 	jmp	#LR__1653
14504                 | LR__1645
14504     18 4E 05 F1 | 	add	fp, #24
14508     A7 08 68 FC | 	wrlong	#4, fp
1450c     18 4E 85 F1 | 	sub	fp, #24
14510     6C 00 90 FD | 	jmp	#LR__1653
14514                 | LR__1646
14514     18 4E 05 F1 | 	add	fp, #24
14518     A7 08 68 FC | 	wrlong	#4, fp
1451c     18 4E 85 F1 | 	sub	fp, #24
14520     5C 00 90 FD | 	jmp	#LR__1653
14524                 | LR__1647
14524     18 4E 05 F1 | 	add	fp, #24
14528     A7 10 68 FC | 	wrlong	#8, fp
1452c     18 4E 85 F1 | 	sub	fp, #24
14530     4C 00 90 FD | 	jmp	#LR__1653
14534                 | LR__1648
14534     18 4E 05 F1 | 	add	fp, #24
14538     A7 10 68 FC | 	wrlong	#8, fp
1453c     18 4E 85 F1 | 	sub	fp, #24
14540     3C 00 90 FD | 	jmp	#LR__1653
14544                 | LR__1649
14544     18 4E 05 F1 | 	add	fp, #24
14548     A7 0C 68 FC | 	wrlong	#6, fp
1454c     18 4E 85 F1 | 	sub	fp, #24
14550     2C 00 90 FD | 	jmp	#LR__1653
14554                 | LR__1650
14554     18 4E 05 F1 | 	add	fp, #24
14558     A7 10 68 FC | 	wrlong	#8, fp
1455c     18 4E 85 F1 | 	sub	fp, #24
14560     1C 00 90 FD | 	jmp	#LR__1653
14564                 | LR__1651
14564     18 4E 05 F1 | 	add	fp, #24
14568     A7 0A 68 FC | 	wrlong	#5, fp
1456c     18 4E 85 F1 | 	sub	fp, #24
14570     0C 00 90 FD | 	jmp	#LR__1653
14574                 | LR__1652
14574     18 4E 05 F1 | 	add	fp, #24
14578     A7 18 68 FC | 	wrlong	#12, fp
1457c     18 4E 85 F1 | 	sub	fp, #24
14580                 | LR__1653
14580                 | '   if esize=12 andalso t1.result.uresult<$80000 then
14580     18 4E 05 F1 | 	add	fp, #24
14584     A7 44 02 FB | 	rdlong	local16, fp
14588     18 4E 85 F1 | 	sub	fp, #24
1458c     0C 44 0E F2 | 	cmp	local16, #12 wz
14590     74 01 90 5D |  if_ne	jmp	#LR__1658
14594     1C 4E 05 F1 | 	add	fp, #28
14598     A7 32 02 FB | 	rdlong	local07, fp
1459c     1C 4E 85 F1 | 	sub	fp, #28
145a0     00 04 00 FF 
145a4     00 32 16 F2 | 	cmp	local07, ##524288 wc
145a8     5C 01 90 3D |  if_ae	jmp	#LR__1658
145ac                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
145ac     52 00 00 FF 
145b0     10 E5 05 F1 | 	add	objptr, ##42256
145b4     F2 44 02 FB | 	rdlong	local16, objptr
145b8     52 00 00 FF 
145bc     10 E5 85 F1 | 	sub	objptr, ##42256
145c0     1C 44 0E F2 | 	cmp	local16, #28 wz
145c4     38 00 90 5D |  if_ne	jmp	#LR__1654
145c8     1C 4E 05 F1 | 	add	fp, #28
145cc     A7 44 02 FB | 	rdlong	local16, fp
145d0     14 4F 05 F1 | 	add	fp, #276
145d4     A7 32 02 FB | 	rdlong	local07, fp
145d8     19 35 02 F6 | 	mov	local08, local07
145dc     02 34 66 F0 | 	shl	local08, #2
145e0     04 4F 85 F1 | 	sub	fp, #260
145e4     A7 36 02 F6 | 	mov	local09, fp
145e8     A7 34 02 F1 | 	add	local08, fp
145ec     1A 13 02 FB | 	rdlong	arg01, local08
145f0     00 14 06 F6 | 	mov	arg02, #0
145f4     2C 4E 85 F1 | 	sub	fp, #44
145f8     60 5F B1 FD | 	call	#__system____builtin_atoi
145fc     22 FB 61 FC | 	wrlong	result1, local16
14600                 | LR__1654
14600                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
14600     52 00 00 FF 
14604     10 E5 05 F1 | 	add	objptr, ##42256
14608     F2 44 02 FB | 	rdlong	local16, objptr
1460c     52 00 00 FF 
14610     10 E5 85 F1 | 	sub	objptr, ##42256
14614     1D 44 0E F2 | 	cmp	local16, #29 wz
14618     38 00 90 5D |  if_ne	jmp	#LR__1655
1461c     1C 4E 05 F1 | 	add	fp, #28
14620     A7 44 02 FB | 	rdlong	local16, fp
14624     14 4F 05 F1 | 	add	fp, #276
14628     A7 32 02 FB | 	rdlong	local07, fp
1462c     19 35 02 F6 | 	mov	local08, local07
14630     02 34 66 F0 | 	shl	local08, #2
14634     04 4F 85 F1 | 	sub	fp, #260
14638     A7 36 02 F6 | 	mov	local09, fp
1463c     A7 34 02 F1 | 	add	local08, fp
14640     1A 13 02 FB | 	rdlong	arg01, local08
14644     00 14 06 F6 | 	mov	arg02, #0
14648     2C 4E 85 F1 | 	sub	fp, #44
1464c     0C 5F B1 FD | 	call	#__system____builtin_atoi
14650     22 FB 61 FC | 	wrlong	result1, local16
14654                 | LR__1655
14654                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
14654     52 00 00 FF 
14658     10 E5 05 F1 | 	add	objptr, ##42256
1465c     F2 44 02 FB | 	rdlong	local16, objptr
14660     52 00 00 FF 
14664     10 E5 85 F1 | 	sub	objptr, ##42256
14668     1E 44 0E F2 | 	cmp	local16, #30 wz
1466c     3C 00 90 5D |  if_ne	jmp	#LR__1656
14670     30 4F 05 F1 | 	add	fp, #304
14674     A7 32 02 FB | 	rdlong	local07, fp
14678     02 32 66 F0 | 	shl	local07, #2
1467c     04 4F 85 F1 | 	sub	fp, #260
14680     A7 34 02 F6 | 	mov	local08, fp
14684     A7 32 02 F1 | 	add	local07, fp
14688     19 13 02 FB | 	rdlong	arg01, local07
1468c     2C 4E 85 F1 | 	sub	fp, #44
14690     5C 60 B1 FD | 	call	#__system____builtin_atof
14694     28 4E 05 F1 | 	add	fp, #40
14698     A7 FA 61 FC | 	wrlong	result1, fp
1469c     0C 4E 85 F1 | 	sub	fp, #12
146a0     A7 44 02 FB | 	rdlong	local16, fp
146a4     1C 4E 85 F1 | 	sub	fp, #28
146a8     22 FB 61 FC | 	wrlong	result1, local16
146ac                 | LR__1656
146ac                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
146ac     52 00 00 FF 
146b0     10 E5 05 F1 | 	add	objptr, ##42256
146b4     F2 44 02 FB | 	rdlong	local16, objptr
146b8     52 00 00 FF 
146bc     10 E5 85 F1 | 	sub	objptr, ##42256
146c0     2B 44 0E F2 | 	cmp	local16, #43 wz
146c4     18 00 90 5D |  if_ne	jmp	#LR__1657
146c8     1C 4E 05 F1 | 	add	fp, #28
146cc     A7 12 02 FB | 	rdlong	arg01, fp
146d0     0C 4E 85 F1 | 	sub	fp, #12
146d4     A7 14 02 FB | 	rdlong	arg02, fp
146d8     10 4E 85 F1 | 	sub	fp, #16
146dc     09 15 62 FC | 	wrlong	arg02, arg01
146e0                 | LR__1657
146e0     1C 4E 05 F1 | 	add	fp, #28
146e4     A7 12 02 FB | 	rdlong	arg01, fp
146e8     1C 4E 85 F1 | 	sub	fp, #28
146ec     08 12 06 F1 | 	add	arg01, #8
146f0     52 00 00 FF 
146f4     10 E5 05 F1 | 	add	objptr, ##42256
146f8     F2 14 02 FB | 	rdlong	arg02, objptr
146fc     52 00 00 FF 
14700     10 E5 85 F1 | 	sub	objptr, ##42256
14704     09 15 62 FC | 	wrlong	arg02, arg01
14708                 | LR__1658
14708                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
14708     18 4E 05 F1 | 	add	fp, #24
1470c     A7 44 02 FB | 	rdlong	local16, fp
14710     18 4E 85 F1 | 	sub	fp, #24
14714     0C 44 0E F2 | 	cmp	local16, #12 wz
14718     94 01 90 5D |  if_ne	jmp	#LR__1663
1471c     1C 4E 05 F1 | 	add	fp, #28
14720     A7 32 02 FB | 	rdlong	local07, fp
14724     1C 4E 85 F1 | 	sub	fp, #28
14728     00 04 00 FF 
1472c     00 32 16 F2 | 	cmp	local07, ##524288 wc
14730     7C 01 90 CD |  if_b	jmp	#LR__1663
14734                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
14734     52 00 00 FF 
14738     10 E5 05 F1 | 	add	objptr, ##42256
1473c     F2 44 02 FB | 	rdlong	local16, objptr
14740     52 00 00 FF 
14744     10 E5 85 F1 | 	sub	objptr, ##42256
14748     1C 44 0E F2 | 	cmp	local16, #28 wz
1474c     40 00 90 5D |  if_ne	jmp	#LR__1659
14750     1C 4E 05 F1 | 	add	fp, #28
14754     A7 44 02 FB | 	rdlong	local16, fp
14758     14 4F 05 F1 | 	add	fp, #276
1475c     A7 32 02 FB | 	rdlong	local07, fp
14760     19 35 02 F6 | 	mov	local08, local07
14764     02 34 66 F0 | 	shl	local08, #2
14768     04 4F 85 F1 | 	sub	fp, #260
1476c     A7 36 02 F6 | 	mov	local09, fp
14770     A7 34 02 F1 | 	add	local08, fp
14774     1A 13 02 FB | 	rdlong	arg01, local08
14778     00 14 06 F6 | 	mov	arg02, #0
1477c     2C 4E 85 F1 | 	sub	fp, #44
14780     D8 5D B1 FD | 	call	#__system____builtin_atoi
14784     FD 14 02 F6 | 	mov	arg02, result1
14788     22 13 02 F6 | 	mov	arg01, local16
1478c     D0 EF B0 FD | 	call	#_pslpoke
14790                 | LR__1659
14790                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
14790     52 00 00 FF 
14794     10 E5 05 F1 | 	add	objptr, ##42256
14798     F2 44 02 FB | 	rdlong	local16, objptr
1479c     52 00 00 FF 
147a0     10 E5 85 F1 | 	sub	objptr, ##42256
147a4     1D 44 0E F2 | 	cmp	local16, #29 wz
147a8     40 00 90 5D |  if_ne	jmp	#LR__1660
147ac     1C 4E 05 F1 | 	add	fp, #28
147b0     A7 44 02 FB | 	rdlong	local16, fp
147b4     14 4F 05 F1 | 	add	fp, #276
147b8     A7 32 02 FB | 	rdlong	local07, fp
147bc     19 35 02 F6 | 	mov	local08, local07
147c0     02 34 66 F0 | 	shl	local08, #2
147c4     04 4F 85 F1 | 	sub	fp, #260
147c8     A7 36 02 F6 | 	mov	local09, fp
147cc     A7 34 02 F1 | 	add	local08, fp
147d0     1A 13 02 FB | 	rdlong	arg01, local08
147d4     00 14 06 F6 | 	mov	arg02, #0
147d8     2C 4E 85 F1 | 	sub	fp, #44
147dc     7C 5D B1 FD | 	call	#__system____builtin_atoi
147e0     FD 14 02 F6 | 	mov	arg02, result1
147e4     22 13 02 F6 | 	mov	arg01, local16
147e8     74 EF B0 FD | 	call	#_pslpoke
147ec                 | LR__1660
147ec                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
147ec     52 00 00 FF 
147f0     10 E5 05 F1 | 	add	objptr, ##42256
147f4     F2 44 02 FB | 	rdlong	local16, objptr
147f8     52 00 00 FF 
147fc     10 E5 85 F1 | 	sub	objptr, ##42256
14800     1E 44 0E F2 | 	cmp	local16, #30 wz
14804     4C 00 90 5D |  if_ne	jmp	#LR__1661
14808     30 4F 05 F1 | 	add	fp, #304
1480c     A7 32 02 FB | 	rdlong	local07, fp
14810     02 32 66 F0 | 	shl	local07, #2
14814     04 4F 85 F1 | 	sub	fp, #260
14818     A7 34 02 F6 | 	mov	local08, fp
1481c     A7 32 02 F1 | 	add	local07, fp
14820     19 13 02 FB | 	rdlong	arg01, local07
14824     2C 4E 85 F1 | 	sub	fp, #44
14828     C4 5E B1 FD | 	call	#__system____builtin_atof
1482c     28 4E 05 F1 | 	add	fp, #40
14830     A7 FA 61 FC | 	wrlong	result1, fp
14834     0C 4E 85 F1 | 	sub	fp, #12
14838     A7 44 02 FB | 	rdlong	local16, fp
1483c     0C 4E 05 F1 | 	add	fp, #12
14840     A7 12 02 F6 | 	mov	arg01, fp
14844     28 4E 85 F1 | 	sub	fp, #40
14848     09 15 02 FB | 	rdlong	arg02, arg01
1484c     22 13 02 F6 | 	mov	arg01, local16
14850     0C EF B0 FD | 	call	#_pslpoke
14854                 | LR__1661
14854                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
14854     52 00 00 FF 
14858     10 E5 05 F1 | 	add	objptr, ##42256
1485c     F2 44 02 FB | 	rdlong	local16, objptr
14860     52 00 00 FF 
14864     10 E5 85 F1 | 	sub	objptr, ##42256
14868     2B 44 0E F2 | 	cmp	local16, #43 wz
1486c     18 00 90 5D |  if_ne	jmp	#LR__1662
14870     1C 4E 05 F1 | 	add	fp, #28
14874     A7 12 02 FB | 	rdlong	arg01, fp
14878     0C 4E 85 F1 | 	sub	fp, #12
1487c     A7 14 02 FB | 	rdlong	arg02, fp
14880     10 4E 85 F1 | 	sub	fp, #16
14884     D8 EE B0 FD | 	call	#_pslpoke
14888                 | LR__1662
14888     1C 4E 05 F1 | 	add	fp, #28
1488c     A7 12 02 FB | 	rdlong	arg01, fp
14890     1C 4E 85 F1 | 	sub	fp, #28
14894     08 12 06 F1 | 	add	arg01, #8
14898     52 00 00 FF 
1489c     10 E5 05 F1 | 	add	objptr, ##42256
148a0     F2 14 02 FB | 	rdlong	arg02, objptr
148a4     52 00 00 FF 
148a8     10 E5 85 F1 | 	sub	objptr, ##42256
148ac     B0 EE B0 FD | 	call	#_pslpoke
148b0                 | LR__1663
148b0                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
148b0     18 4E 05 F1 | 	add	fp, #24
148b4     A7 44 02 FB | 	rdlong	local16, fp
148b8     18 4E 85 F1 | 	sub	fp, #24
148bc     05 44 0E F2 | 	cmp	local16, #5 wz
148c0     52 00 00 AF 
148c4     10 E5 05 A1 |  if_e	add	objptr, ##42256
148c8     F2 42 02 AB |  if_e	rdlong	local15, objptr
148cc     52 00 00 AF 
148d0     10 E5 85 A1 |  if_e	sub	objptr, ##42256
148d4     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
148d8     18 00 90 5D |  if_ne	jmp	#LR__1664
148dc     1C 4E 05 F1 | 	add	fp, #28
148e0     A7 12 02 FB | 	rdlong	arg01, fp
148e4     0C 4E 85 F1 | 	sub	fp, #12
148e8     A7 14 02 FB | 	rdlong	arg02, fp
148ec     10 4E 85 F1 | 	sub	fp, #16
148f0     6C EE B0 FD | 	call	#_pslpoke
148f4                 | LR__1664
148f4                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
148f4     18 4E 05 F1 | 	add	fp, #24
148f8     A7 44 02 FB | 	rdlong	local16, fp
148fc     18 4E 85 F1 | 	sub	fp, #24
14900     04 44 0E F2 | 	cmp	local16, #4 wz
14904     54 00 90 5D |  if_ne	jmp	#LR__1665
14908     52 00 00 FF 
1490c     10 E5 05 F1 | 	add	objptr, ##42256
14910     F2 42 02 FB | 	rdlong	local15, objptr
14914     52 00 00 FF 
14918     10 E5 85 F1 | 	sub	objptr, ##42256
1491c     2B 42 0E F2 | 	cmp	local15, #43 wz
14920     38 00 90 AD |  if_e	jmp	#LR__1665
14924     1C 4E 05 F1 | 	add	fp, #28
14928     A7 44 02 FB | 	rdlong	local16, fp
1492c     14 4F 05 F1 | 	add	fp, #276
14930     A7 34 02 FB | 	rdlong	local08, fp
14934     02 34 66 F0 | 	shl	local08, #2
14938     04 4F 85 F1 | 	sub	fp, #260
1493c     A7 34 02 F1 | 	add	local08, fp
14940     1A 13 02 FB | 	rdlong	arg01, local08
14944     00 14 06 F6 | 	mov	arg02, #0
14948     2C 4E 85 F1 | 	sub	fp, #44
1494c     0C 5C B1 FD | 	call	#__system____builtin_atoi
14950     FD 14 02 F6 | 	mov	arg02, result1
14954     22 13 02 F6 | 	mov	arg01, local16
14958     04 EE B0 FD | 	call	#_pslpoke
1495c                 | LR__1665
1495c                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1495c     18 4E 05 F1 | 	add	fp, #24
14960     A7 44 02 FB | 	rdlong	local16, fp
14964     18 4E 85 F1 | 	sub	fp, #24
14968     02 44 0E F2 | 	cmp	local16, #2 wz
1496c     54 00 90 5D |  if_ne	jmp	#LR__1666
14970     52 00 00 FF 
14974     10 E5 05 F1 | 	add	objptr, ##42256
14978     F2 42 02 FB | 	rdlong	local15, objptr
1497c     52 00 00 FF 
14980     10 E5 85 F1 | 	sub	objptr, ##42256
14984     2B 42 0E F2 | 	cmp	local15, #43 wz
14988     38 00 90 AD |  if_e	jmp	#LR__1666
1498c     1C 4E 05 F1 | 	add	fp, #28
14990     A7 44 02 FB | 	rdlong	local16, fp
14994     14 4F 05 F1 | 	add	fp, #276
14998     A7 34 02 FB | 	rdlong	local08, fp
1499c     02 34 66 F0 | 	shl	local08, #2
149a0     04 4F 85 F1 | 	sub	fp, #260
149a4     A7 34 02 F1 | 	add	local08, fp
149a8     1A 13 02 FB | 	rdlong	arg01, local08
149ac     00 14 06 F6 | 	mov	arg02, #0
149b0     2C 4E 85 F1 | 	sub	fp, #44
149b4     A4 5B B1 FD | 	call	#__system____builtin_atoi
149b8     FD 14 02 F6 | 	mov	arg02, result1
149bc     22 13 02 F6 | 	mov	arg01, local16
149c0     E4 ED B0 FD | 	call	#_psdpoke
149c4                 | LR__1666
149c4                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
149c4     18 4E 05 F1 | 	add	fp, #24
149c8     A7 44 02 FB | 	rdlong	local16, fp
149cc     18 4E 85 F1 | 	sub	fp, #24
149d0     01 44 0E F2 | 	cmp	local16, #1 wz
149d4     54 00 90 5D |  if_ne	jmp	#LR__1667
149d8     52 00 00 FF 
149dc     10 E5 05 F1 | 	add	objptr, ##42256
149e0     F2 42 02 FB | 	rdlong	local15, objptr
149e4     52 00 00 FF 
149e8     10 E5 85 F1 | 	sub	objptr, ##42256
149ec     2B 42 0E F2 | 	cmp	local15, #43 wz
149f0     38 00 90 AD |  if_e	jmp	#LR__1667
149f4     1C 4E 05 F1 | 	add	fp, #28
149f8     A7 44 02 FB | 	rdlong	local16, fp
149fc     14 4F 05 F1 | 	add	fp, #276
14a00     A7 34 02 FB | 	rdlong	local08, fp
14a04     02 34 66 F0 | 	shl	local08, #2
14a08     04 4F 85 F1 | 	sub	fp, #260
14a0c     A7 34 02 F1 | 	add	local08, fp
14a10     1A 13 02 FB | 	rdlong	arg01, local08
14a14     00 14 06 F6 | 	mov	arg02, #0
14a18     2C 4E 85 F1 | 	sub	fp, #44
14a1c     3C 5B B1 FD | 	call	#__system____builtin_atoi
14a20     FD 14 02 F6 | 	mov	arg02, result1
14a24     22 13 02 F6 | 	mov	arg01, local16
14a28     C4 ED B0 FD | 	call	#_pspoke
14a2c                 | LR__1667
14a2c                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14a2c     18 4E 05 F1 | 	add	fp, #24
14a30     A7 44 02 FB | 	rdlong	local16, fp
14a34     18 4E 85 F1 | 	sub	fp, #24
14a38     06 44 0E F2 | 	cmp	local16, #6 wz
14a3c     64 00 90 5D |  if_ne	jmp	#LR__1668
14a40     52 00 00 FF 
14a44     10 E5 05 F1 | 	add	objptr, ##42256
14a48     F2 42 02 FB | 	rdlong	local15, objptr
14a4c     52 00 00 FF 
14a50     10 E5 85 F1 | 	sub	objptr, ##42256
14a54     2B 42 0E F2 | 	cmp	local15, #43 wz
14a58     48 00 90 AD |  if_e	jmp	#LR__1668
14a5c     30 4F 05 F1 | 	add	fp, #304
14a60     A7 32 02 FB | 	rdlong	local07, fp
14a64     02 32 66 F0 | 	shl	local07, #2
14a68     04 4F 85 F1 | 	sub	fp, #260
14a6c     A7 32 02 F1 | 	add	local07, fp
14a70     19 13 02 FB | 	rdlong	arg01, local07
14a74     2C 4E 85 F1 | 	sub	fp, #44
14a78     74 5C B1 FD | 	call	#__system____builtin_atof
14a7c     28 4E 05 F1 | 	add	fp, #40
14a80     A7 FA 61 FC | 	wrlong	result1, fp
14a84     0C 4E 85 F1 | 	sub	fp, #12
14a88     A7 44 02 FB | 	rdlong	local16, fp
14a8c     0C 4E 05 F1 | 	add	fp, #12
14a90     A7 12 02 F6 | 	mov	arg01, fp
14a94     28 4E 85 F1 | 	sub	fp, #40
14a98     09 15 02 FB | 	rdlong	arg02, arg01
14a9c     22 13 02 F6 | 	mov	arg01, local16
14aa0     BC EC B0 FD | 	call	#_pslpoke
14aa4                 | LR__1668
14aa4     30 4F 05 F1 | 	add	fp, #304
14aa8     A7 42 02 FB | 	rdlong	local15, fp
14aac     01 42 06 F1 | 	add	local15, #1
14ab0     A7 42 62 FC | 	wrlong	local15, fp
14ab4     30 4F 85 F1 | 	sub	fp, #304
14ab8     E4 F6 9F FD | 	jmp	#LR__1633
14abc                 | LR__1669
14abc                 | LR__1670
14abc     A7 F0 03 F6 | 	mov	ptra, fp
14ac0     B2 00 A0 FD | 	call	#popregs_
14ac4                 | _do_input_ret
14ac4     2D 00 64 FD | 	ret
14ac8                 | 
14ac8                 | ' 
14ac8                 | ' ' ----------------  left$
14ac8                 | ' 
14ac8                 | ' sub do_left
14ac8                 | _do_left
14ac8     00 4A 05 F6 | 	mov	COUNT_, #0
14acc     A8 00 A0 FD | 	call	#pushregs_
14ad0     14 F0 07 F1 | 	add	ptra, #20
14ad4     4A 00 00 FF 
14ad8     80 E4 05 F1 | 	add	objptr, ##38016
14adc     F2 16 02 FB | 	rdlong	arg03, objptr
14ae0     0B 15 02 F6 | 	mov	arg02, arg03
14ae4     01 14 66 F0 | 	shl	arg02, #1
14ae8     0B 15 02 F1 | 	add	arg02, arg03
14aec     02 14 66 F0 | 	shl	arg02, #2
14af0     03 00 00 FF 
14af4     04 E4 85 F1 | 	sub	objptr, ##1540
14af8     F2 14 02 F1 | 	add	arg02, objptr
14afc     0A 17 02 FB | 	rdlong	arg03, arg02
14b00     0C 4E 05 F1 | 	add	fp, #12
14b04     A7 16 62 FC | 	wrlong	arg03, fp
14b08                 | ' 
14b08                 | ' numpar=compiledline(lineptr_e).result.uresult
14b08                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
14b08     0C 4E 85 F1 | 	sub	fp, #12
14b0c     02 16 0E F2 | 	cmp	arg03, #2 wz
14b10     47 00 00 FF 
14b14     7C E4 85 F1 | 	sub	objptr, ##36476
14b18     40 00 90 AD |  if_e	jmp	#LR__1680
14b1c     00 12 06 F6 | 	mov	arg01, #0
14b20     70 82 B1 FD | 	call	#__system___getiolock_0616
14b24     FD 12 02 F6 | 	mov	arg01, result1
14b28     40 25 B1 FD | 	call	#__system___lockmem
14b2c     BA 01 00 FF 
14b30     C2 15 06 F6 | 	mov	arg02, ##@LR__5968
14b34     00 12 06 F6 | 	mov	arg01, #0
14b38     00 16 06 F6 | 	mov	arg03, #0
14b3c     20 32 B1 FD | 	call	#__system___basic_print_string
14b40     00 12 06 F6 | 	mov	arg01, #0
14b44     4C 82 B1 FD | 	call	#__system___getiolock_0616
14b48     FD 00 68 FC | 	wrlong	#0, result1
14b4c     27 12 06 F6 | 	mov	arg01, #39
14b50     00 14 06 F6 | 	mov	arg02, #0
14b54     68 EA B0 FD | 	call	#_printerror
14b58     EC 00 90 FD | 	jmp	#LR__1683
14b5c                 | LR__1680
14b5c     A8 8B BF FD | 	call	#_pop
14b60     FF 16 02 F6 | 	mov	arg03, result3
14b64     A7 FA 61 FC | 	wrlong	result1, fp
14b68     04 4E 05 F1 | 	add	fp, #4
14b6c     A7 FC 61 FC | 	wrlong	result2, fp
14b70     04 4E 05 F1 | 	add	fp, #4
14b74     A7 16 62 FC | 	wrlong	arg03, fp
14b78     08 4E 85 F1 | 	sub	fp, #8
14b7c     A7 12 02 F6 | 	mov	arg01, fp
14b80     68 8D BF FD | 	call	#_converttoint
14b84     FD 16 02 F6 | 	mov	arg03, result1
14b88     10 4E 05 F1 | 	add	fp, #16
14b8c     A7 16 62 FC | 	wrlong	arg03, fp
14b90     10 4E 85 F1 | 	sub	fp, #16
14b94     70 8B BF FD | 	call	#_pop
14b98     FF 16 02 F6 | 	mov	arg03, result3
14b9c     A7 FA 61 FC | 	wrlong	result1, fp
14ba0     04 4E 05 F1 | 	add	fp, #4
14ba4     A7 FC 61 FC | 	wrlong	result2, fp
14ba8     04 4E 05 F1 | 	add	fp, #4
14bac     A7 16 62 FC | 	wrlong	arg03, fp
14bb0                 | ' t1=pop() : arg=converttoint(t1)
14bb0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14bb0     08 4E 85 F1 | 	sub	fp, #8
14bb4     2B 16 0E F2 | 	cmp	arg03, #43 wz
14bb8     18 00 90 5D |  if_ne	jmp	#LR__1681
14bbc     A7 12 02 FB | 	rdlong	arg01, fp
14bc0     BC 8C BF FD | 	call	#_convertstring
14bc4     A7 FA 61 FC | 	wrlong	result1, fp
14bc8     08 4E 05 F1 | 	add	fp, #8
14bcc     A7 3E 68 FC | 	wrlong	#31, fp
14bd0     08 4E 85 F1 | 	sub	fp, #8
14bd4                 | LR__1681
14bd4                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14bd4     08 4E 05 F1 | 	add	fp, #8
14bd8     A7 16 02 FB | 	rdlong	arg03, fp
14bdc     08 4E 85 F1 | 	sub	fp, #8
14be0     1F 16 0E F2 | 	cmp	arg03, #31 wz
14be4     40 00 90 AD |  if_e	jmp	#LR__1682
14be8     00 12 06 F6 | 	mov	arg01, #0
14bec     A4 81 B1 FD | 	call	#__system___getiolock_0616
14bf0     FD 12 02 F6 | 	mov	arg01, result1
14bf4     74 24 B1 FD | 	call	#__system___lockmem
14bf8     BA 01 00 FF 
14bfc     CA 15 06 F6 | 	mov	arg02, ##@LR__5969
14c00     00 12 06 F6 | 	mov	arg01, #0
14c04     00 16 06 F6 | 	mov	arg03, #0
14c08     54 31 B1 FD | 	call	#__system___basic_print_string
14c0c     00 12 06 F6 | 	mov	arg01, #0
14c10     80 81 B1 FD | 	call	#__system___getiolock_0616
14c14     FD 00 68 FC | 	wrlong	#0, result1
14c18     0F 12 06 F6 | 	mov	arg01, #15
14c1c     00 14 06 F6 | 	mov	arg02, #0
14c20     9C E9 B0 FD | 	call	#_printerror
14c24     20 00 90 FD | 	jmp	#LR__1683
14c28                 | LR__1682
14c28     A7 12 02 FB | 	rdlong	arg01, fp
14c2c     10 4E 05 F1 | 	add	fp, #16
14c30     A7 14 02 FB | 	rdlong	arg02, fp
14c34     10 4E 85 F1 | 	sub	fp, #16
14c38     AC 44 B1 FD | 	call	#__system__Left_S
14c3c     A7 FA 61 FC | 	wrlong	result1, fp
14c40     A7 12 02 F6 | 	mov	arg01, fp
14c44     58 8B BF FD | 	call	#_push
14c48                 | LR__1683
14c48     A7 F0 03 F6 | 	mov	ptra, fp
14c4c     B2 00 A0 FD | 	call	#popregs_
14c50                 | _do_left_ret
14c50     2D 00 64 FD | 	ret
14c54                 | 
14c54                 | ' 
14c54                 | ' ' ----------------  len
14c54                 | ' 
14c54                 | ' sub do_len
14c54                 | _do_len
14c54     02 4A 05 F6 | 	mov	COUNT_, #2
14c58     A8 00 A0 FD | 	call	#pushregs_
14c5c     14 F0 07 F1 | 	add	ptra, #20
14c60     4A 00 00 FF 
14c64     80 E4 05 F1 | 	add	objptr, ##38016
14c68     F2 26 02 FB | 	rdlong	local01, objptr
14c6c     13 17 02 F6 | 	mov	arg03, local01
14c70     01 16 66 F0 | 	shl	arg03, #1
14c74     13 17 02 F1 | 	add	arg03, local01
14c78     02 16 66 F0 | 	shl	arg03, #2
14c7c     03 00 00 FF 
14c80     04 E4 85 F1 | 	sub	objptr, ##1540
14c84     F2 16 02 F1 | 	add	arg03, objptr
14c88     0B 17 02 FB | 	rdlong	arg03, arg03
14c8c     0C 4E 05 F1 | 	add	fp, #12
14c90     A7 16 62 FC | 	wrlong	arg03, fp
14c94                 | ' 
14c94                 | ' numpar=compiledline(lineptr_e).result.uresult
14c94                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14c94     0C 4E 85 F1 | 	sub	fp, #12
14c98     02 16 16 F2 | 	cmp	arg03, #2 wc
14c9c     47 00 00 FF 
14ca0     7C E4 85 F1 | 	sub	objptr, ##36476
14ca4     0C 4E 05 C1 |  if_b	add	fp, #12
14ca8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14cac     0C 4E 85 C1 |  if_b	sub	fp, #12
14cb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1690
14cb4     00 12 06 F6 | 	mov	arg01, #0
14cb8     D8 80 B1 FD | 	call	#__system___getiolock_0616
14cbc     FD 12 02 F6 | 	mov	arg01, result1
14cc0     A8 23 B1 FD | 	call	#__system___lockmem
14cc4     BA 01 00 FF 
14cc8     D2 15 06 F6 | 	mov	arg02, ##@LR__5970
14ccc     00 12 06 F6 | 	mov	arg01, #0
14cd0     00 16 06 F6 | 	mov	arg03, #0
14cd4     88 30 B1 FD | 	call	#__system___basic_print_string
14cd8     00 12 06 F6 | 	mov	arg01, #0
14cdc     B4 80 B1 FD | 	call	#__system___getiolock_0616
14ce0     FD 00 68 FC | 	wrlong	#0, result1
14ce4     27 12 06 F6 | 	mov	arg01, #39
14ce8     00 14 06 F6 | 	mov	arg02, #0
14cec     D0 E8 B0 FD | 	call	#_printerror
14cf0     C8 00 90 FD | 	jmp	#LR__1695
14cf4                 | LR__1690
14cf4     10 8A BF FD | 	call	#_pop
14cf8     FF 16 02 F6 | 	mov	arg03, result3
14cfc     A7 FA 61 FC | 	wrlong	result1, fp
14d00     04 4E 05 F1 | 	add	fp, #4
14d04     A7 FC 61 FC | 	wrlong	result2, fp
14d08     04 4E 05 F1 | 	add	fp, #4
14d0c     A7 16 62 FC | 	wrlong	arg03, fp
14d10                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14d10     08 4E 85 F1 | 	sub	fp, #8
14d14     2B 16 0E F2 | 	cmp	arg03, #43 wz
14d18     18 00 90 5D |  if_ne	jmp	#LR__1691
14d1c     A7 12 02 FB | 	rdlong	arg01, fp
14d20     5C 8B BF FD | 	call	#_convertstring
14d24     A7 FA 61 FC | 	wrlong	result1, fp
14d28     08 4E 05 F1 | 	add	fp, #8
14d2c     A7 3E 68 FC | 	wrlong	#31, fp
14d30     08 4E 85 F1 | 	sub	fp, #8
14d34                 | LR__1691
14d34                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14d34     08 4E 05 F1 | 	add	fp, #8
14d38     A7 16 02 FB | 	rdlong	arg03, fp
14d3c     08 4E 85 F1 | 	sub	fp, #8
14d40     1F 16 0E F2 | 	cmp	arg03, #31 wz
14d44     40 00 90 AD |  if_e	jmp	#LR__1692
14d48     00 12 06 F6 | 	mov	arg01, #0
14d4c     44 80 B1 FD | 	call	#__system___getiolock_0616
14d50     FD 12 02 F6 | 	mov	arg01, result1
14d54     14 23 B1 FD | 	call	#__system___lockmem
14d58     BA 01 00 FF 
14d5c     D8 15 06 F6 | 	mov	arg02, ##@LR__5971
14d60     00 12 06 F6 | 	mov	arg01, #0
14d64     00 16 06 F6 | 	mov	arg03, #0
14d68     F4 2F B1 FD | 	call	#__system___basic_print_string
14d6c     00 12 06 F6 | 	mov	arg01, #0
14d70     20 80 B1 FD | 	call	#__system___getiolock_0616
14d74     FD 00 68 FC | 	wrlong	#0, result1
14d78     0F 12 06 F6 | 	mov	arg01, #15
14d7c     00 14 06 F6 | 	mov	arg02, #0
14d80     3C E8 B0 FD | 	call	#_printerror
14d84     34 00 90 FD | 	jmp	#LR__1695
14d88                 | LR__1692
14d88     A7 12 02 FB | 	rdlong	arg01, fp
14d8c     09 29 02 F6 | 	mov	local02, arg01
14d90     97 06 48 FB | 	callpa	#(@LR__1694-@LR__1693)>>2,fcache_load_ptr_
14d94                 | LR__1693
14d94     14 FB C9 FA | 	rdbyte	result1, local02 wz
14d98     01 28 06 51 |  if_ne	add	local02, #1
14d9c     F4 FF 9F 5D |  if_ne	jmp	#LR__1693
14da0                 | LR__1694
14da0     09 29 82 F1 | 	sub	local02, arg01
14da4     A7 28 62 FC | 	wrlong	local02, fp
14da8     08 4E 05 F1 | 	add	fp, #8
14dac     A7 38 68 FC | 	wrlong	#28, fp
14db0     08 4E 85 F1 | 	sub	fp, #8
14db4     A7 12 02 F6 | 	mov	arg01, fp
14db8     E4 89 BF FD | 	call	#_push
14dbc                 | LR__1695
14dbc     A7 F0 03 F6 | 	mov	ptra, fp
14dc0     B2 00 A0 FD | 	call	#popregs_
14dc4                 | _do_len_ret
14dc4     2D 00 64 FD | 	ret
14dc8                 | 
14dc8                 | ' 
14dc8                 | ' ' ----------------  list
14dc8                 | ' 
14dc8                 | ' sub do_list
14dc8                 | _do_list
14dc8     02 4A 05 F6 | 	mov	COUNT_, #2
14dcc     A8 00 A0 FD | 	call	#pushregs_
14dd0     B8 F0 07 F1 | 	add	ptra, #184
14dd4     04 4E 05 F1 | 	add	fp, #4
14dd8     A7 00 68 FC | 	wrlong	#0, fp
14ddc     04 4E 05 F1 | 	add	fp, #4
14de0     FF FF BF FF 
14de4     A7 FE 6B FC | 	wrlong	##2147483647, fp
14de8     08 4E 85 F1 | 	sub	fp, #8
14dec     4A 00 00 FF 
14df0     80 E4 05 F1 | 	add	objptr, ##38016
14df4     F2 26 02 FB | 	rdlong	local01, objptr
14df8     13 17 02 F6 | 	mov	arg03, local01
14dfc     01 16 66 F0 | 	shl	arg03, #1
14e00     13 17 02 F1 | 	add	arg03, local01
14e04     02 16 66 F0 | 	shl	arg03, #2
14e08     03 00 00 FF 
14e0c     04 E4 85 F1 | 	sub	objptr, ##1540
14e10     F2 16 02 F1 | 	add	arg03, objptr
14e14     0B 17 02 FB | 	rdlong	arg03, arg03
14e18     A7 16 62 FC | 	wrlong	arg03, fp
14e1c                 | ' 
14e1c                 | ' startline=0 : endline=$7FFFFFFF
14e1c                 | ' numpar=compiledline(lineptr_e).result.uresult
14e1c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14e1c     01 16 0E F2 | 	cmp	arg03, #1 wz
14e20     47 00 00 FF 
14e24     7C E4 85 F1 | 	sub	objptr, ##36476
14e28     3C 00 90 5D |  if_ne	jmp	#LR__1700
14e2c     D8 88 BF FD | 	call	#_pop
14e30     FF 26 02 F6 | 	mov	local01, result3
14e34     0C 4E 05 F1 | 	add	fp, #12
14e38     A7 FA 61 FC | 	wrlong	result1, fp
14e3c     04 4E 05 F1 | 	add	fp, #4
14e40     A7 FC 61 FC | 	wrlong	result2, fp
14e44     04 4E 05 F1 | 	add	fp, #4
14e48     A7 26 62 FC | 	wrlong	local01, fp
14e4c     08 4E 85 F1 | 	sub	fp, #8
14e50     A7 12 02 F6 | 	mov	arg01, fp
14e54     0C 4E 85 F1 | 	sub	fp, #12
14e58     90 8A BF FD | 	call	#_converttoint
14e5c     04 4E 05 F1 | 	add	fp, #4
14e60     A7 FA 61 FC | 	wrlong	result1, fp
14e64     04 4E 85 F1 | 	sub	fp, #4
14e68                 | LR__1700
14e68                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14e68     A7 16 02 FB | 	rdlong	arg03, fp
14e6c     02 16 0E F2 | 	cmp	arg03, #2 wz
14e70     7C 00 90 5D |  if_ne	jmp	#LR__1701
14e74     90 88 BF FD | 	call	#_pop
14e78     FF 26 02 F6 | 	mov	local01, result3
14e7c     0C 4E 05 F1 | 	add	fp, #12
14e80     A7 FA 61 FC | 	wrlong	result1, fp
14e84     04 4E 05 F1 | 	add	fp, #4
14e88     A7 FC 61 FC | 	wrlong	result2, fp
14e8c     04 4E 05 F1 | 	add	fp, #4
14e90     A7 26 62 FC | 	wrlong	local01, fp
14e94     08 4E 85 F1 | 	sub	fp, #8
14e98     A7 12 02 F6 | 	mov	arg01, fp
14e9c     0C 4E 85 F1 | 	sub	fp, #12
14ea0     48 8A BF FD | 	call	#_converttoint
14ea4     FD 26 02 F6 | 	mov	local01, result1
14ea8     08 4E 05 F1 | 	add	fp, #8
14eac     A7 26 62 FC | 	wrlong	local01, fp
14eb0     08 4E 85 F1 | 	sub	fp, #8
14eb4     50 88 BF FD | 	call	#_pop
14eb8     FF 26 02 F6 | 	mov	local01, result3
14ebc     0C 4E 05 F1 | 	add	fp, #12
14ec0     A7 FA 61 FC | 	wrlong	result1, fp
14ec4     04 4E 05 F1 | 	add	fp, #4
14ec8     A7 FC 61 FC | 	wrlong	result2, fp
14ecc     04 4E 05 F1 | 	add	fp, #4
14ed0     A7 26 62 FC | 	wrlong	local01, fp
14ed4     08 4E 85 F1 | 	sub	fp, #8
14ed8     A7 12 02 F6 | 	mov	arg01, fp
14edc     0C 4E 85 F1 | 	sub	fp, #12
14ee0     08 8A BF FD | 	call	#_converttoint
14ee4     04 4E 05 F1 | 	add	fp, #4
14ee8     A7 FA 61 FC | 	wrlong	result1, fp
14eec     04 4E 85 F1 | 	sub	fp, #4
14ef0                 | LR__1701
14ef0                 | ' 
14ef0                 | ' 
14ef0                 | ' print
14ef0     00 12 06 F6 | 	mov	arg01, #0
14ef4     9C 7E B1 FD | 	call	#__system___getiolock_0616
14ef8     FD 12 02 F6 | 	mov	arg01, result1
14efc     6C 21 B1 FD | 	call	#__system___lockmem
14f00     00 12 06 F6 | 	mov	arg01, #0
14f04     0A 14 06 F6 | 	mov	arg02, #10
14f08     00 16 06 F6 | 	mov	arg03, #0
14f0c     F8 2D B1 FD | 	call	#__system___basic_print_char
14f10     00 12 06 F6 | 	mov	arg01, #0
14f14     7C 7E B1 FD | 	call	#__system___getiolock_0616
14f18     FD 00 68 FC | 	wrlong	#0, result1
14f1c     4A 00 00 FF 
14f20     88 E4 05 F1 | 	add	objptr, ##38024
14f24     F2 28 02 FB | 	rdlong	local02, objptr
14f28     08 00 00 FF 
14f2c     94 E4 05 F1 | 	add	objptr, ##4244
14f30     F2 28 62 FC | 	wrlong	local02, objptr
14f34     52 00 00 FF 
14f38     1C E5 85 F1 | 	sub	objptr, ##42268
14f3c                 | ' do 
14f3c                 | LR__1702
14f3c     20 4E 05 F1 | 	add	fp, #32
14f40     A7 12 02 F6 | 	mov	arg01, fp
14f44     20 4E 85 F1 | 	sub	fp, #32
14f48     52 00 00 FF 
14f4c     1C E5 05 F1 | 	add	objptr, ##42268
14f50     F2 14 02 FB | 	rdlong	arg02, objptr
14f54     18 16 06 F6 | 	mov	arg03, #24
14f58     47 00 00 FF 
14f5c     50 E4 85 F1 | 	sub	objptr, ##36432
14f60     10 14 B1 FD | 	call	#_psram_spin2_read1
14f64     0B 00 00 FF 
14f68     CC E4 85 F1 | 	sub	objptr, ##5836
14f6c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14f6c                 | '   
14f6c                 | '   if header(0)<> $FFFFFFFF then
14f6c     20 4E 05 F1 | 	add	fp, #32
14f70     A7 28 02 FB | 	rdlong	local02, fp
14f74     20 4E 85 F1 | 	sub	fp, #32
14f78     FF FF 7F FF 
14f7c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14f80     A8 00 90 AD |  if_e	jmp	#LR__1704
14f84     38 4E 05 F1 | 	add	fp, #56
14f88     3F 16 06 F6 | 	mov	arg03, #63
14f8c     28 16 62 FD | 	setq	arg03
14f90     A7 00 68 FC | 	wrlong	#0, fp
14f94     A7 12 02 F6 | 	mov	arg01, fp
14f98     10 4E 85 F1 | 	sub	fp, #16
14f9c     A7 14 02 FB | 	rdlong	arg02, fp
14fa0     04 4E 05 F1 | 	add	fp, #4
14fa4     A7 16 02 FB | 	rdlong	arg03, fp
14fa8     2C 4E 85 F1 | 	sub	fp, #44
14fac     0B 00 00 FF 
14fb0     CC E4 05 F1 | 	add	objptr, ##5836
14fb4     BC 13 B1 FD | 	call	#_psram_spin2_read1
14fb8     0B 00 00 FF 
14fbc     CC E4 85 F1 | 	sub	objptr, ##5836
14fc0                 | '     longfill(linebuf,0,64)
14fc0                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14fc0                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14fc0     20 4E 05 F1 | 	add	fp, #32
14fc4     A7 28 02 FB | 	rdlong	local02, fp
14fc8     1C 4E 85 F1 | 	sub	fp, #28
14fcc     A7 26 02 FB | 	rdlong	local01, fp
14fd0     04 4E 85 F1 | 	sub	fp, #4
14fd4     13 29 52 F2 | 	cmps	local02, local01 wc
14fd8     30 00 90 CD |  if_b	jmp	#LR__1703
14fdc     20 4E 05 F1 | 	add	fp, #32
14fe0     A7 28 02 FB | 	rdlong	local02, fp
14fe4     18 4E 85 F1 | 	sub	fp, #24
14fe8     A7 16 02 FB | 	rdlong	arg03, fp
14fec     08 4E 85 F1 | 	sub	fp, #8
14ff0     0B 29 5A F2 | 	cmps	local02, arg03 wcz
14ff4     14 00 90 1D |  if_a	jmp	#LR__1703
14ff8     38 4E 05 F1 | 	add	fp, #56
14ffc     A7 12 02 F6 | 	mov	arg01, fp
15000     38 4E 85 F1 | 	sub	fp, #56
15004                 | ' 
15004                 | ' write(text)
15004     30 07 B1 FD | 	call	#_hg010b_spin2_write
15008                 | ' crlf
15008     2C 0C B1 FD | 	call	#_hg010b_spin2_crlf
1500c                 | LR__1703
1500c     34 4E 05 F1 | 	add	fp, #52
15010     A7 28 02 FB | 	rdlong	local02, fp
15014     34 4E 85 F1 | 	sub	fp, #52
15018     52 00 00 FF 
1501c     1C E5 05 F1 | 	add	objptr, ##42268
15020     F2 28 62 FC | 	wrlong	local02, objptr
15024     52 00 00 FF 
15028     1C E5 85 F1 | 	sub	objptr, ##42268
1502c                 | LR__1704
1502c     34 4E 05 F1 | 	add	fp, #52
15030     A7 28 02 FB | 	rdlong	local02, fp
15034     34 4E 85 F1 | 	sub	fp, #52
15038     FF FF 3F FF 
1503c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
15040     20 4E 05 51 |  if_ne	add	fp, #32
15044     A7 26 02 5B |  if_ne	rdlong	local01, fp
15048     20 4E 85 51 |  if_ne	sub	fp, #32
1504c     FF FF 7F 5F 
15050     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
15054     E4 FE 9F 5D |  if_ne	jmp	#LR__1702
15058     A7 F0 03 F6 | 	mov	ptra, fp
1505c     B2 00 A0 FD | 	call	#popregs_
15060                 | _do_list_ret
15060     2D 00 64 FD | 	ret
15064                 | 
15064                 | ' 
15064                 | ' '-------------------- load
15064                 | ' 
15064                 | ' sub do_load(amode=0 as integer)  
15064                 | _do_load
15064     01 4A 05 F6 | 	mov	COUNT_, #1
15068     A8 00 A0 FD | 	call	#pushregs_
1506c     AC F0 07 F1 | 	add	ptra, #172
15070     A7 12 62 FC | 	wrlong	arg01, fp
15074     52 00 00 FF 
15078     D4 E4 05 F1 | 	add	objptr, ##42196
1507c     F2 02 68 FC | 	wrlong	#1, objptr
15080     08 00 00 FF 
15084     54 E4 85 F1 | 	sub	objptr, ##4180
15088     F2 14 02 FB | 	rdlong	arg02, objptr
1508c     0A 13 02 F6 | 	mov	arg01, arg02
15090     01 12 66 F0 | 	shl	arg01, #1
15094     0A 13 02 F1 | 	add	arg01, arg02
15098     02 12 66 F0 | 	shl	arg01, #2
1509c     03 00 00 FF 
150a0     04 E4 85 F1 | 	sub	objptr, ##1540
150a4     F2 12 02 F1 | 	add	arg01, objptr
150a8     09 15 02 FB | 	rdlong	arg02, arg01
150ac     1C 4E 05 F1 | 	add	fp, #28
150b0     A7 14 62 FC | 	wrlong	arg02, fp
150b4     8C 4E 05 F1 | 	add	fp, #140
150b8     A7 12 02 F6 | 	mov	arg01, fp
150bc     47 00 00 FF 
150c0     7C E4 85 F1 | 	sub	objptr, ##36476
150c4     80 4E 85 F1 | 	sub	fp, #128
150c8     09 4F 61 FC | 	wrlong	fp, arg01
150cc                 | ' 
150cc                 | ' inload=1
150cc                 | ' numpar=compiledline(lineptr_e).result.uresult
150cc                 | ' lpoke varptr(line2$),varptr(line2)
150cc                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
150cc     0C 4E 85 F1 | 	sub	fp, #12
150d0     A7 26 02 FB | 	rdlong	local01, fp
150d4     1C 4E 85 F1 | 	sub	fp, #28
150d8     01 26 56 F2 | 	cmps	local01, #1 wc
150dc     24 00 90 CD |  if_b	jmp	#LR__1710
150e0     24 86 BF FD | 	call	#_pop
150e4     04 4E 05 F1 | 	add	fp, #4
150e8     A7 FA 61 FC | 	wrlong	result1, fp
150ec     04 4E 05 F1 | 	add	fp, #4
150f0     A7 FC 61 FC | 	wrlong	result2, fp
150f4     04 4E 05 F1 | 	add	fp, #4
150f8     A7 FE 61 FC | 	wrlong	result3, fp
150fc     0C 4E 85 F1 | 	sub	fp, #12
15100     28 00 90 FD | 	jmp	#LR__1711
15104                 | LR__1710
15104     52 00 00 FF 
15108     C4 E4 05 F1 | 	add	objptr, ##42180
1510c     F2 26 02 FB | 	rdlong	local01, objptr
15110     52 00 00 FF 
15114     C4 E4 85 F1 | 	sub	objptr, ##42180
15118     04 4E 05 F1 | 	add	fp, #4
1511c     A7 26 62 FC | 	wrlong	local01, fp
15120     08 4E 05 F1 | 	add	fp, #8
15124     A7 3E 68 FC | 	wrlong	#31, fp
15128     0C 4E 85 F1 | 	sub	fp, #12
1512c                 | LR__1711
1512c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
1512c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
1512c     0C 4E 05 F1 | 	add	fp, #12
15130     A7 26 02 FB | 	rdlong	local01, fp
15134     0C 4E 85 F1 | 	sub	fp, #12
15138     2B 26 0E F2 | 	cmp	local01, #43 wz
1513c     24 00 90 5D |  if_ne	jmp	#LR__1712
15140     04 4E 05 F1 | 	add	fp, #4
15144     A7 12 02 FB | 	rdlong	arg01, fp
15148     04 4E 85 F1 | 	sub	fp, #4
1514c     30 87 BF FD | 	call	#_convertstring
15150     04 4E 05 F1 | 	add	fp, #4
15154     A7 FA 61 FC | 	wrlong	result1, fp
15158     08 4E 05 F1 | 	add	fp, #8
1515c     A7 3E 68 FC | 	wrlong	#31, fp
15160     0C 4E 85 F1 | 	sub	fp, #12
15164                 | LR__1712
15164                 | ' if t1.result_type=result_string then
15164     0C 4E 05 F1 | 	add	fp, #12
15168     A7 26 02 FB | 	rdlong	local01, fp
1516c     0C 4E 85 F1 | 	sub	fp, #12
15170     1F 26 0E F2 | 	cmp	local01, #31 wz
15174     E0 02 90 5D |  if_ne	jmp	#LR__1718
15178                 | '   if amode<>1234 then do_new
15178     A7 26 02 FB | 	rdlong	local01, fp
1517c     02 00 00 FF 
15180     D2 26 0E F2 | 	cmp	local01, ##1234 wz
15184     2C 0F B0 5D |  if_ne	call	#_do_new
15188                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
15188     04 4E 05 F1 | 	add	fp, #4
1518c     A7 12 02 FB | 	rdlong	arg01, fp
15190     04 4E 85 F1 | 	sub	fp, #4
15194     BA 01 00 FF 
15198     DE 15 06 F6 | 	mov	arg02, ##@LR__5972
1519c     F4 1E B1 FD | 	call	#__system___string_cmp
151a0     00 FA 0D F2 | 	cmp	result1, #0 wz
151a4     24 00 90 5D |  if_ne	jmp	#LR__1713
151a8     52 00 00 FF 
151ac     C4 E4 05 F1 | 	add	objptr, ##42180
151b0     F2 26 02 FB | 	rdlong	local01, objptr
151b4     52 00 00 FF 
151b8     C4 E4 85 F1 | 	sub	objptr, ##42180
151bc     04 4E 05 F1 | 	add	fp, #4
151c0     A7 26 62 FC | 	wrlong	local01, fp
151c4     04 4E 85 F1 | 	sub	fp, #4
151c8     20 00 90 FD | 	jmp	#LR__1714
151cc                 | LR__1713
151cc     04 4E 05 F1 | 	add	fp, #4
151d0     A7 26 02 FB | 	rdlong	local01, fp
151d4     04 4E 85 F1 | 	sub	fp, #4
151d8     52 00 00 FF 
151dc     C4 E4 05 F1 | 	add	objptr, ##42180
151e0     F2 26 62 FC | 	wrlong	local01, objptr
151e4     52 00 00 FF 
151e8     C4 E4 85 F1 | 	sub	objptr, ##42180
151ec                 | LR__1714
151ec                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
151ec     09 12 06 F6 | 	mov	arg01, #9
151f0     D0 71 B1 FD | 	call	#__system__close
151f4     09 26 06 F6 | 	mov	local01, #9
151f8     4A 00 00 FF 
151fc     94 E4 05 F1 | 	add	objptr, ##38036
15200     F2 12 02 FB | 	rdlong	arg01, objptr
15204     4A 00 00 FF 
15208     94 E4 85 F1 | 	sub	objptr, ##38036
1520c     BA 01 00 FF 
15210     DF 15 06 F6 | 	mov	arg02, ##@LR__5973
15214     B0 1E B1 FD | 	call	#__system___string_concat
15218     FD 12 02 F6 | 	mov	arg01, result1
1521c     04 4E 05 F1 | 	add	fp, #4
15220     A7 14 02 FB | 	rdlong	arg02, fp
15224     04 4E 85 F1 | 	sub	fp, #4
15228     9C 1E B1 FD | 	call	#__system___string_concat
1522c     FD 14 02 F6 | 	mov	arg02, result1
15230     13 13 02 F6 | 	mov	arg01, local01
15234     00 16 06 F6 | 	mov	arg03, #0
15238     34 2A B1 FD | 	call	#__system___basic_open_string
1523c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15240     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15244     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15248     14 4E 05 F1 | 	add	fp, #20
1524c     A7 FA 61 FC | 	wrlong	result1, fp
15250                 | '   r=geterr() 
15250                 | '   if r then 
15250     14 4E 85 F1 | 	sub	fp, #20
15254     50 01 90 AD |  if_e	jmp	#LR__1716
15258                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15258     09 12 06 F6 | 	mov	arg01, #9
1525c     64 71 B1 FD | 	call	#__system__close
15260     09 26 06 F6 | 	mov	local01, #9
15264     4A 00 00 FF 
15268     94 E4 05 F1 | 	add	objptr, ##38036
1526c     F2 12 02 FB | 	rdlong	arg01, objptr
15270     4A 00 00 FF 
15274     94 E4 85 F1 | 	sub	objptr, ##38036
15278     BA 01 00 FF 
1527c     E1 15 06 F6 | 	mov	arg02, ##@LR__5974
15280     44 1E B1 FD | 	call	#__system___string_concat
15284     FD 12 02 F6 | 	mov	arg01, result1
15288     04 4E 05 F1 | 	add	fp, #4
1528c     A7 14 02 FB | 	rdlong	arg02, fp
15290     04 4E 85 F1 | 	sub	fp, #4
15294     30 1E B1 FD | 	call	#__system___string_concat
15298     FD 12 02 F6 | 	mov	arg01, result1
1529c     BA 01 00 FF 
152a0     E3 15 06 F6 | 	mov	arg02, ##@LR__5975
152a4     20 1E B1 FD | 	call	#__system___string_concat
152a8     FD 14 02 F6 | 	mov	arg02, result1
152ac     13 13 02 F6 | 	mov	arg01, local01
152b0     00 16 06 F6 | 	mov	arg03, #0
152b4     B8 29 B1 FD | 	call	#__system___basic_open_string
152b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
152bc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
152c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
152c4     14 4E 05 F1 | 	add	fp, #20
152c8     A7 FA 61 FC | 	wrlong	result1, fp
152cc                 | '     r=geterr() 
152cc                 | '     if r then 
152cc     14 4E 85 F1 | 	sub	fp, #20
152d0     A0 00 90 AD |  if_e	jmp	#LR__1715
152d4                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
152d4     00 12 06 F6 | 	mov	arg01, #0
152d8     B8 7A B1 FD | 	call	#__system___getiolock_0616
152dc     FD 12 02 F6 | 	mov	arg01, result1
152e0     88 1D B1 FD | 	call	#__system___lockmem
152e4     BA 01 00 FF 
152e8     E8 15 06 F6 | 	mov	arg02, ##@LR__5976
152ec     00 12 06 F6 | 	mov	arg01, #0
152f0     00 16 06 F6 | 	mov	arg03, #0
152f4     68 2A B1 FD | 	call	#__system___basic_print_string
152f8     14 4E 05 F1 | 	add	fp, #20
152fc     A7 14 02 FB | 	rdlong	arg02, fp
15300     14 4E 85 F1 | 	sub	fp, #20
15304     00 12 06 F6 | 	mov	arg01, #0
15308     00 16 06 F6 | 	mov	arg03, #0
1530c     0A 18 06 F6 | 	mov	arg04, #10
15310     90 2A B1 FD | 	call	#__system___basic_print_integer
15314     BA 01 00 FF 
15318     F6 15 06 F6 | 	mov	arg02, ##@LR__5977
1531c     00 12 06 F6 | 	mov	arg01, #0
15320     00 16 06 F6 | 	mov	arg03, #0
15324     38 2A B1 FD | 	call	#__system___basic_print_string
15328     00 26 06 F6 | 	mov	local01, #0
1532c     14 4E 05 F1 | 	add	fp, #20
15330     A7 12 02 FB | 	rdlong	arg01, fp
15334     14 4E 85 F1 | 	sub	fp, #20
15338     BC 46 B1 FD | 	call	#__system___strerror
1533c     FD 14 02 F6 | 	mov	arg02, result1
15340     13 13 02 F6 | 	mov	arg01, local01
15344     00 16 06 F6 | 	mov	arg03, #0
15348     14 2A B1 FD | 	call	#__system___basic_print_string
1534c     00 12 06 F6 | 	mov	arg01, #0
15350     0A 14 06 F6 | 	mov	arg02, #10
15354     00 16 06 F6 | 	mov	arg03, #0
15358     AC 29 B1 FD | 	call	#__system___basic_print_char
1535c     00 12 06 F6 | 	mov	arg01, #0
15360     30 7A B1 FD | 	call	#__system___getiolock_0616
15364     FD 00 68 FC | 	wrlong	#0, result1
15368     09 12 06 F6 | 	mov	arg01, #9
1536c     54 70 B1 FD | 	call	#__system__close
15370     94 01 90 FD | 	jmp	#LR__1720
15374                 | LR__1715
15374     52 00 00 FF 
15378     C4 E4 05 F1 | 	add	objptr, ##42180
1537c     F2 12 02 FB | 	rdlong	arg01, objptr
15380     52 00 00 FF 
15384     C4 E4 85 F1 | 	sub	objptr, ##42180
15388     BA 01 00 FF 
1538c     F9 15 06 F6 | 	mov	arg02, ##@LR__5978
15390     34 1D B1 FD | 	call	#__system___string_concat
15394     52 00 00 FF 
15398     C4 E4 05 F1 | 	add	objptr, ##42180
1539c     F2 FA 61 FC | 	wrlong	result1, objptr
153a0     52 00 00 FF 
153a4     C4 E4 85 F1 | 	sub	objptr, ##42180
153a8                 | LR__1716
153a8                 | '   close #9: open currentdir$+"/"+loadname for input as #9
153a8     09 12 06 F6 | 	mov	arg01, #9
153ac     14 70 B1 FD | 	call	#__system__close
153b0     09 26 06 F6 | 	mov	local01, #9
153b4     4A 00 00 FF 
153b8     94 E4 05 F1 | 	add	objptr, ##38036
153bc     F2 12 02 FB | 	rdlong	arg01, objptr
153c0     4A 00 00 FF 
153c4     94 E4 85 F1 | 	sub	objptr, ##38036
153c8     BA 01 00 FF 
153cc     FE 15 06 F6 | 	mov	arg02, ##@LR__5979
153d0     F4 1C B1 FD | 	call	#__system___string_concat
153d4     FD 12 02 F6 | 	mov	arg01, result1
153d8     52 00 00 FF 
153dc     C4 E4 05 F1 | 	add	objptr, ##42180
153e0     F2 14 02 FB | 	rdlong	arg02, objptr
153e4     52 00 00 FF 
153e8     C4 E4 85 F1 | 	sub	objptr, ##42180
153ec     D8 1C B1 FD | 	call	#__system___string_concat
153f0     FD 14 02 F6 | 	mov	arg02, result1
153f4     13 13 02 F6 | 	mov	arg01, local01
153f8     00 16 06 F6 | 	mov	arg03, #0
153fc     70 28 B1 FD | 	call	#__system___basic_open_string
15400                 | '   do
15400                 | LR__1717
15400     09 12 06 F6 | 	mov	arg01, #9
15404     70 1E B1 FD | 	call	#__system___basic_read_line
15408     FD 26 02 F6 | 	mov	local01, result1
1540c     37 00 00 FF 
15410     1C E4 05 F1 | 	add	objptr, ##28188
15414     F2 26 62 FC | 	wrlong	local01, objptr
15418     37 00 00 FF 
1541c     1C E4 85 F1 | 	sub	objptr, ##28188
15420     04 C4 BE FD | 	call	#_interpret
15424     37 00 00 FF 
15428     1C E4 05 F1 | 	add	objptr, ##28188
1542c     F2 12 02 FB | 	rdlong	arg01, objptr
15430     37 00 00 FF 
15434     1C E4 85 F1 | 	sub	objptr, ##28188
15438     BB 01 00 FF 
1543c     00 14 06 F6 | 	mov	arg02, ##@LR__5980
15440     50 1C B1 FD | 	call	#__system___string_cmp
15444     00 FA 0D F2 | 	cmp	result1, #0 wz
15448     B4 FF 9F 5D |  if_ne	jmp	#LR__1717
1544c                 | '   close #9   
1544c     09 12 06 F6 | 	mov	arg01, #9
15450     70 6F B1 FD | 	call	#__system__close
15454     0C 00 90 FD | 	jmp	#LR__1719
15458                 | LR__1718
15458     1E 12 06 F6 | 	mov	arg01, #30
1545c     00 14 06 F6 | 	mov	arg02, #0
15460     5C E1 B0 FD | 	call	#_printerror
15464                 | LR__1719
15464                 | ' print "Loaded ";currentdir$+"/"+loadname
15464     00 12 06 F6 | 	mov	arg01, #0
15468     28 79 B1 FD | 	call	#__system___getiolock_0616
1546c     FD 12 02 F6 | 	mov	arg01, result1
15470     F8 1B B1 FD | 	call	#__system___lockmem
15474     BB 01 00 FF 
15478     01 14 06 F6 | 	mov	arg02, ##@LR__5981
1547c     00 12 06 F6 | 	mov	arg01, #0
15480     00 16 06 F6 | 	mov	arg03, #0
15484     D8 28 B1 FD | 	call	#__system___basic_print_string
15488     00 26 06 F6 | 	mov	local01, #0
1548c     4A 00 00 FF 
15490     94 E4 05 F1 | 	add	objptr, ##38036
15494     F2 12 02 FB | 	rdlong	arg01, objptr
15498     4A 00 00 FF 
1549c     94 E4 85 F1 | 	sub	objptr, ##38036
154a0     BB 01 00 FF 
154a4     09 14 06 F6 | 	mov	arg02, ##@LR__5982
154a8     1C 1C B1 FD | 	call	#__system___string_concat
154ac     FD 12 02 F6 | 	mov	arg01, result1
154b0     52 00 00 FF 
154b4     C4 E4 05 F1 | 	add	objptr, ##42180
154b8     F2 14 02 FB | 	rdlong	arg02, objptr
154bc     52 00 00 FF 
154c0     C4 E4 85 F1 | 	sub	objptr, ##42180
154c4     00 1C B1 FD | 	call	#__system___string_concat
154c8     FD 14 02 F6 | 	mov	arg02, result1
154cc     13 13 02 F6 | 	mov	arg01, local01
154d0     00 16 06 F6 | 	mov	arg03, #0
154d4     88 28 B1 FD | 	call	#__system___basic_print_string
154d8     00 12 06 F6 | 	mov	arg01, #0
154dc     0A 14 06 F6 | 	mov	arg02, #10
154e0     00 16 06 F6 | 	mov	arg03, #0
154e4     20 28 B1 FD | 	call	#__system___basic_print_char
154e8     00 12 06 F6 | 	mov	arg01, #0
154ec     A4 78 B1 FD | 	call	#__system___getiolock_0616
154f0     FD 00 68 FC | 	wrlong	#0, result1
154f4     52 00 00 FF 
154f8     D4 E4 05 F1 | 	add	objptr, ##42196
154fc     F2 00 68 FC | 	wrlong	#0, objptr
15500     52 00 00 FF 
15504     D4 E4 85 F1 | 	sub	objptr, ##42196
15508                 | LR__1720
15508     A7 F0 03 F6 | 	mov	ptra, fp
1550c     B2 00 A0 FD | 	call	#popregs_
15510                 | _do_load_ret
15510     2D 00 64 FD | 	ret
15514                 | 
15514                 | ' 
15514                 | ' '-------------------- log
15514                 | ' 
15514                 | ' sub do_log
15514                 | _do_log
15514     01 4A 05 F6 | 	mov	COUNT_, #1
15518     A8 00 A0 FD | 	call	#pushregs_
1551c     14 F0 07 F1 | 	add	ptra, #20
15520     4A 00 00 FF 
15524     80 E4 05 F1 | 	add	objptr, ##38016
15528     F2 26 02 FB | 	rdlong	local01, objptr
1552c     13 17 02 F6 | 	mov	arg03, local01
15530     01 16 66 F0 | 	shl	arg03, #1
15534     13 17 02 F1 | 	add	arg03, local01
15538     02 16 66 F0 | 	shl	arg03, #2
1553c     03 00 00 FF 
15540     04 E4 85 F1 | 	sub	objptr, ##1540
15544     F2 16 02 F1 | 	add	arg03, objptr
15548     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1554c     0C 4E 05 F1 | 	add	fp, #12
15550     A7 16 62 FC | 	wrlong	arg03, fp
15554                 | ' 
15554                 | ' numpar=compiledline(lineptr_e).result.uresult
15554                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15554     0C 4E 85 F1 | 	sub	fp, #12
15558     47 00 00 FF 
1555c     7C E4 85 F1 | 	sub	objptr, ##36476
15560     0C 4E 05 51 |  if_ne	add	fp, #12
15564     A7 26 02 5B |  if_ne	rdlong	local01, fp
15568     0C 4E 85 51 |  if_ne	sub	fp, #12
1556c     03 26 16 52 |  if_ne	cmp	local01, #3 wc
15570     40 00 90 4D |  if_c_and_nz	jmp	#LR__1730
15574     00 12 06 F6 | 	mov	arg01, #0
15578     18 78 B1 FD | 	call	#__system___getiolock_0616
1557c     FD 12 02 F6 | 	mov	arg01, result1
15580     E8 1A B1 FD | 	call	#__system___lockmem
15584     BB 01 00 FF 
15588     0B 14 06 F6 | 	mov	arg02, ##@LR__5983
1558c     00 12 06 F6 | 	mov	arg01, #0
15590     00 16 06 F6 | 	mov	arg03, #0
15594     C8 27 B1 FD | 	call	#__system___basic_print_string
15598     00 12 06 F6 | 	mov	arg01, #0
1559c     F4 77 B1 FD | 	call	#__system___getiolock_0616
155a0     FD 00 68 FC | 	wrlong	#0, result1
155a4     27 12 06 F6 | 	mov	arg01, #39
155a8     00 14 06 F6 | 	mov	arg02, #0
155ac     10 E0 B0 FD | 	call	#_printerror
155b0     D0 00 90 FD | 	jmp	#LR__1733
155b4                 | LR__1730
155b4                 | ' if numpar=2 then 
155b4     0C 4E 05 F1 | 	add	fp, #12
155b8     A7 26 02 FB | 	rdlong	local01, fp
155bc     0C 4E 85 F1 | 	sub	fp, #12
155c0     02 26 0E F2 | 	cmp	local01, #2 wz
155c4     48 00 90 5D |  if_ne	jmp	#LR__1731
155c8     3C 81 BF FD | 	call	#_pop
155cc     FF 26 02 F6 | 	mov	local01, result3
155d0     A7 FA 61 FC | 	wrlong	result1, fp
155d4     04 4E 05 F1 | 	add	fp, #4
155d8     A7 FC 61 FC | 	wrlong	result2, fp
155dc     04 4E 05 F1 | 	add	fp, #4
155e0     A7 26 62 FC | 	wrlong	local01, fp
155e4     08 4E 85 F1 | 	sub	fp, #8
155e8     A7 12 02 F6 | 	mov	arg01, fp
155ec     B8 83 BF FD | 	call	#_converttofloat
155f0     FD 14 02 F6 | 	mov	arg02, result1
155f4     FC 16 20 FF 
155f8     54 12 06 F6 | 	mov	arg01, ##1076754516
155fc     B4 58 B1 FD | 	call	#__system____builtin_logbase
15600     10 4E 05 F1 | 	add	fp, #16
15604     A7 FA 61 FC | 	wrlong	result1, fp
15608     10 4E 85 F1 | 	sub	fp, #16
1560c     10 00 90 FD | 	jmp	#LR__1732
15610                 | LR__1731
15610     10 4E 05 F1 | 	add	fp, #16
15614     00 C0 9F FF 
15618     A7 00 68 FC | 	wrlong	##1065353216, fp
1561c     10 4E 85 F1 | 	sub	fp, #16
15620                 | LR__1732
15620     E4 80 BF FD | 	call	#_pop
15624     FF 26 02 F6 | 	mov	local01, result3
15628     A7 FA 61 FC | 	wrlong	result1, fp
1562c     04 4E 05 F1 | 	add	fp, #4
15630     A7 FC 61 FC | 	wrlong	result2, fp
15634     04 4E 05 F1 | 	add	fp, #4
15638     A7 26 62 FC | 	wrlong	local01, fp
1563c     08 4E 85 F1 | 	sub	fp, #8
15640     A7 12 02 F6 | 	mov	arg01, fp
15644     60 83 BF FD | 	call	#_converttofloat
15648     FD 14 02 F6 | 	mov	arg02, result1
1564c     FC 16 20 FF 
15650     54 12 06 F6 | 	mov	arg01, ##1076754516
15654     5C 58 B1 FD | 	call	#__system____builtin_logbase
15658     FD 12 02 F6 | 	mov	arg01, result1
1565c     10 4E 05 F1 | 	add	fp, #16
15660     A7 14 02 FB | 	rdlong	arg02, fp
15664     10 4E 85 F1 | 	sub	fp, #16
15668     7C 4A B1 FD | 	call	#__system___float_div
1566c     A7 FA 61 FC | 	wrlong	result1, fp
15670     08 4E 05 F1 | 	add	fp, #8
15674     A7 3C 68 FC | 	wrlong	#30, fp
15678     08 4E 85 F1 | 	sub	fp, #8
1567c     A7 12 02 F6 | 	mov	arg01, fp
15680     1C 81 BF FD | 	call	#_push
15684                 | LR__1733
15684     A7 F0 03 F6 | 	mov	ptra, fp
15688     B2 00 A0 FD | 	call	#popregs_
1568c                 | _do_log_ret
1568c     2D 00 64 FD | 	ret
15690                 | 
15690                 | ' 
15690                 | ' '-------------------- lpeek
15690                 | ' 
15690                 | ' sub do_lpeek
15690                 | _do_lpeek
15690     00 4A 05 F6 | 	mov	COUNT_, #0
15694     A8 00 A0 FD | 	call	#pushregs_
15698     14 F0 07 F1 | 	add	ptra, #20
1569c     68 80 BF FD | 	call	#_pop
156a0     A7 FA 61 FC | 	wrlong	result1, fp
156a4     04 4E 05 F1 | 	add	fp, #4
156a8     A7 FC 61 FC | 	wrlong	result2, fp
156ac     04 4E 05 F1 | 	add	fp, #4
156b0     A7 FE 61 FC | 	wrlong	result3, fp
156b4     08 4E 85 F1 | 	sub	fp, #8
156b8     A7 12 02 F6 | 	mov	arg01, fp
156bc     2C 82 BF FD | 	call	#_converttoint
156c0     0C 4E 05 F1 | 	add	fp, #12
156c4     A7 FA 61 FC | 	wrlong	result1, fp
156c8                 | ' 
156c8                 | ' t1=pop()
156c8                 | ' a=converttoint(t1)
156c8                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
156c8     0C 4E 85 F1 | 	sub	fp, #12
156cc     00 04 00 FF 
156d0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
156d4     1C 00 90 3D |  if_ae	jmp	#LR__1740
156d8     0C 4E 05 F1 | 	add	fp, #12
156dc     A7 12 02 FB | 	rdlong	arg01, fp
156e0     09 FB 01 FB | 	rdlong	result1, arg01
156e4     04 4E 05 F1 | 	add	fp, #4
156e8     A7 FA 61 FC | 	wrlong	result1, fp
156ec     10 4E 85 F1 | 	sub	fp, #16
156f0     1C 00 90 FD | 	jmp	#LR__1741
156f4                 | LR__1740
156f4     0C 4E 05 F1 | 	add	fp, #12
156f8     A7 12 02 FB | 	rdlong	arg01, fp
156fc     0C 4E 85 F1 | 	sub	fp, #12
15700     8C E1 B0 FD | 	call	#_pslpeek
15704     10 4E 05 F1 | 	add	fp, #16
15708     A7 FA 61 FC | 	wrlong	result1, fp
1570c     10 4E 85 F1 | 	sub	fp, #16
15710                 | LR__1741
15710     08 4E 05 F1 | 	add	fp, #8
15714     A7 3A 68 FC | 	wrlong	#29, fp
15718     08 4E 05 F1 | 	add	fp, #8
1571c     A7 12 02 FB | 	rdlong	arg01, fp
15720     10 4E 85 F1 | 	sub	fp, #16
15724     A7 12 62 FC | 	wrlong	arg01, fp
15728     A7 12 02 F6 | 	mov	arg01, fp
1572c     70 80 BF FD | 	call	#_push
15730     A7 F0 03 F6 | 	mov	ptra, fp
15734     B2 00 A0 FD | 	call	#popregs_
15738                 | _do_lpeek_ret
15738     2D 00 64 FD | 	ret
1573c                 | 
1573c                 | ' 
1573c                 | ' '-------------------- lpoke
1573c                 | ' 
1573c                 | ' sub do_lpoke
1573c                 | _do_lpoke
1573c     01 4A 05 F6 | 	mov	COUNT_, #1
15740     A8 00 A0 FD | 	call	#pushregs_
15744     20 F0 07 F1 | 	add	ptra, #32
15748     BC 7F BF FD | 	call	#_pop
1574c     FD 14 02 F6 | 	mov	arg02, result1
15750     FE 12 02 F6 | 	mov	arg01, result2
15754     FF 26 02 F6 | 	mov	local01, result3
15758     A7 14 62 FC | 	wrlong	arg02, fp
1575c     04 4E 05 F1 | 	add	fp, #4
15760     A7 12 62 FC | 	wrlong	arg01, fp
15764     04 4E 05 F1 | 	add	fp, #4
15768     A7 26 62 FC | 	wrlong	local01, fp
1576c     08 4E 85 F1 | 	sub	fp, #8
15770     94 7F BF FD | 	call	#_pop
15774     FF 26 02 F6 | 	mov	local01, result3
15778     0C 4E 05 F1 | 	add	fp, #12
1577c     A7 FA 61 FC | 	wrlong	result1, fp
15780     04 4E 05 F1 | 	add	fp, #4
15784     A7 FC 61 FC | 	wrlong	result2, fp
15788     04 4E 05 F1 | 	add	fp, #4
1578c     A7 26 62 FC | 	wrlong	local01, fp
15790     08 4E 85 F1 | 	sub	fp, #8
15794     A7 12 02 F6 | 	mov	arg01, fp
15798     0C 4E 85 F1 | 	sub	fp, #12
1579c     4C 81 BF FD | 	call	#_converttoint
157a0     18 4E 05 F1 | 	add	fp, #24
157a4     A7 FA 61 FC | 	wrlong	result1, fp
157a8     18 4E 85 F1 | 	sub	fp, #24
157ac     A7 12 02 F6 | 	mov	arg01, fp
157b0     38 81 BF FD | 	call	#_converttoint
157b4     1C 4E 05 F1 | 	add	fp, #28
157b8     A7 FA 61 FC | 	wrlong	result1, fp
157bc                 | ' 
157bc                 | ' t1=pop() 'value
157bc                 | ' t2=pop() 
157bc                 | ' a=converttoint(t2) : v=converttoint(t1)
157bc                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
157bc     04 4E 85 F1 | 	sub	fp, #4
157c0     A7 26 02 FB | 	rdlong	local01, fp
157c4     18 4E 85 F1 | 	sub	fp, #24
157c8     00 04 00 FF 
157cc     00 26 16 F2 | 	cmp	local01, ##524288 wc
157d0     1C 00 90 3D |  if_ae	jmp	#LR__1750
157d4     18 4E 05 F1 | 	add	fp, #24
157d8     A7 12 02 FB | 	rdlong	arg01, fp
157dc     04 4E 05 F1 | 	add	fp, #4
157e0     A7 14 02 FB | 	rdlong	arg02, fp
157e4     1C 4E 85 F1 | 	sub	fp, #28
157e8     09 15 62 FC | 	wrlong	arg02, arg01
157ec     18 00 90 FD | 	jmp	#LR__1751
157f0                 | LR__1750
157f0     18 4E 05 F1 | 	add	fp, #24
157f4     A7 12 02 FB | 	rdlong	arg01, fp
157f8     04 4E 05 F1 | 	add	fp, #4
157fc     A7 14 02 FB | 	rdlong	arg02, fp
15800     1C 4E 85 F1 | 	sub	fp, #28
15804     58 DF B0 FD | 	call	#_pslpoke
15808                 | LR__1751
15808     A7 F0 03 F6 | 	mov	ptra, fp
1580c     B2 00 A0 FD | 	call	#popregs_
15810                 | _do_lpoke_ret
15810     2D 00 64 FD | 	ret
15814                 | 
15814                 | ' 
15814                 | ' '-------------------- memlo
15814                 | ' 
15814                 | ' sub do_memlo
15814                 | _do_memlo
15814     00 4A 05 F6 | 	mov	COUNT_, #0
15818     A8 00 A0 FD | 	call	#pushregs_
1581c     0C F0 07 F1 | 	add	ptra, #12
15820     43 00 00 FF 
15824     5C E4 05 F1 | 	add	objptr, ##34396
15828     F2 12 02 FB | 	rdlong	arg01, objptr
1582c     43 00 00 FF 
15830     5C E4 85 F1 | 	sub	objptr, ##34396
15834     A7 12 62 FC | 	wrlong	arg01, fp
15838     08 4E 05 F1 | 	add	fp, #8
1583c     A7 3A 68 FC | 	wrlong	#29, fp
15840     08 4E 85 F1 | 	sub	fp, #8
15844     A7 12 02 F6 | 	mov	arg01, fp
15848     54 7F BF FD | 	call	#_push
1584c     A7 F0 03 F6 | 	mov	ptra, fp
15850     B2 00 A0 FD | 	call	#popregs_
15854                 | _do_memlo_ret
15854     2D 00 64 FD | 	ret
15858                 | 
15858                 | ' 
15858                 | ' '-------------------- memtop
15858                 | ' 
15858                 | ' sub do_memtop
15858                 | _do_memtop
15858     00 4A 05 F6 | 	mov	COUNT_, #0
1585c     A8 00 A0 FD | 	call	#pushregs_
15860     0C F0 07 F1 | 	add	ptra, #12
15864     52 00 00 FF 
15868     98 E4 05 F1 | 	add	objptr, ##42136
1586c     F2 12 02 FB | 	rdlong	arg01, objptr
15870     52 00 00 FF 
15874     98 E4 85 F1 | 	sub	objptr, ##42136
15878     A7 12 62 FC | 	wrlong	arg01, fp
1587c     08 4E 05 F1 | 	add	fp, #8
15880     A7 3A 68 FC | 	wrlong	#29, fp
15884     08 4E 85 F1 | 	sub	fp, #8
15888     A7 12 02 F6 | 	mov	arg01, fp
1588c     10 7F BF FD | 	call	#_push
15890     A7 F0 03 F6 | 	mov	ptra, fp
15894     B2 00 A0 FD | 	call	#popregs_
15898                 | _do_memtop_ret
15898     2D 00 64 FD | 	ret
1589c                 | 
1589c                 | ' 
1589c                 | ' '-------------------- mid$
1589c                 | ' 
1589c                 | ' sub do_mid
1589c                 | _do_mid
1589c     00 4A 05 F6 | 	mov	COUNT_, #0
158a0     A8 00 A0 FD | 	call	#pushregs_
158a4     18 F0 07 F1 | 	add	ptra, #24
158a8     4A 00 00 FF 
158ac     80 E4 05 F1 | 	add	objptr, ##38016
158b0     F2 16 02 FB | 	rdlong	arg03, objptr
158b4     0B 15 02 F6 | 	mov	arg02, arg03
158b8     01 14 66 F0 | 	shl	arg02, #1
158bc     0B 15 02 F1 | 	add	arg02, arg03
158c0     02 14 66 F0 | 	shl	arg02, #2
158c4     03 00 00 FF 
158c8     04 E4 85 F1 | 	sub	objptr, ##1540
158cc     F2 14 02 F1 | 	add	arg02, objptr
158d0     0A 17 02 FB | 	rdlong	arg03, arg02
158d4     0C 4E 05 F1 | 	add	fp, #12
158d8     A7 16 62 FC | 	wrlong	arg03, fp
158dc                 | ' 
158dc                 | ' numpar=compiledline(lineptr_e).result.uresult
158dc                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
158dc     0C 4E 85 F1 | 	sub	fp, #12
158e0     03 16 0E F2 | 	cmp	arg03, #3 wz
158e4     47 00 00 FF 
158e8     7C E4 85 F1 | 	sub	objptr, ##36476
158ec     40 00 90 AD |  if_e	jmp	#LR__1760
158f0     00 12 06 F6 | 	mov	arg01, #0
158f4     9C 74 B1 FD | 	call	#__system___getiolock_0616
158f8     FD 12 02 F6 | 	mov	arg01, result1
158fc     6C 17 B1 FD | 	call	#__system___lockmem
15900     BB 01 00 FF 
15904     11 14 06 F6 | 	mov	arg02, ##@LR__5984
15908     00 12 06 F6 | 	mov	arg01, #0
1590c     00 16 06 F6 | 	mov	arg03, #0
15910     4C 24 B1 FD | 	call	#__system___basic_print_string
15914     00 12 06 F6 | 	mov	arg01, #0
15918     78 74 B1 FD | 	call	#__system___getiolock_0616
1591c     FD 00 68 FC | 	wrlong	#0, result1
15920     27 12 06 F6 | 	mov	arg01, #39
15924     00 14 06 F6 | 	mov	arg02, #0
15928     94 DC B0 FD | 	call	#_printerror
1592c     2C 01 90 FD | 	jmp	#LR__1763
15930                 | LR__1760
15930     D4 7D BF FD | 	call	#_pop
15934     FF 16 02 F6 | 	mov	arg03, result3
15938     A7 FA 61 FC | 	wrlong	result1, fp
1593c     04 4E 05 F1 | 	add	fp, #4
15940     A7 FC 61 FC | 	wrlong	result2, fp
15944     04 4E 05 F1 | 	add	fp, #4
15948     A7 16 62 FC | 	wrlong	arg03, fp
1594c     08 4E 85 F1 | 	sub	fp, #8
15950     A7 12 02 F6 | 	mov	arg01, fp
15954     94 7F BF FD | 	call	#_converttoint
15958     FD 16 02 F6 | 	mov	arg03, result1
1595c     14 4E 05 F1 | 	add	fp, #20
15960     A7 16 62 FC | 	wrlong	arg03, fp
15964     14 4E 85 F1 | 	sub	fp, #20
15968     9C 7D BF FD | 	call	#_pop
1596c     FF 16 02 F6 | 	mov	arg03, result3
15970     A7 FA 61 FC | 	wrlong	result1, fp
15974     04 4E 05 F1 | 	add	fp, #4
15978     A7 FC 61 FC | 	wrlong	result2, fp
1597c     04 4E 05 F1 | 	add	fp, #4
15980     A7 16 62 FC | 	wrlong	arg03, fp
15984     08 4E 85 F1 | 	sub	fp, #8
15988     A7 12 02 F6 | 	mov	arg01, fp
1598c     5C 7F BF FD | 	call	#_converttoint
15990     FD 16 02 F6 | 	mov	arg03, result1
15994     10 4E 05 F1 | 	add	fp, #16
15998     A7 16 62 FC | 	wrlong	arg03, fp
1599c     10 4E 85 F1 | 	sub	fp, #16
159a0     64 7D BF FD | 	call	#_pop
159a4     FF 16 02 F6 | 	mov	arg03, result3
159a8     A7 FA 61 FC | 	wrlong	result1, fp
159ac     04 4E 05 F1 | 	add	fp, #4
159b0     A7 FC 61 FC | 	wrlong	result2, fp
159b4     04 4E 05 F1 | 	add	fp, #4
159b8     A7 16 62 FC | 	wrlong	arg03, fp
159bc                 | ' t1=pop() : arg2=converttoint(t1)
159bc                 | ' t1=pop() : arg1=converttoint(t1)
159bc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
159bc     08 4E 85 F1 | 	sub	fp, #8
159c0     2B 16 0E F2 | 	cmp	arg03, #43 wz
159c4     18 00 90 5D |  if_ne	jmp	#LR__1761
159c8     A7 12 02 FB | 	rdlong	arg01, fp
159cc     B0 7E BF FD | 	call	#_convertstring
159d0     A7 FA 61 FC | 	wrlong	result1, fp
159d4     08 4E 05 F1 | 	add	fp, #8
159d8     A7 3E 68 FC | 	wrlong	#31, fp
159dc     08 4E 85 F1 | 	sub	fp, #8
159e0                 | LR__1761
159e0                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
159e0     08 4E 05 F1 | 	add	fp, #8
159e4     A7 16 02 FB | 	rdlong	arg03, fp
159e8     08 4E 85 F1 | 	sub	fp, #8
159ec     1F 16 0E F2 | 	cmp	arg03, #31 wz
159f0     40 00 90 AD |  if_e	jmp	#LR__1762
159f4     00 12 06 F6 | 	mov	arg01, #0
159f8     98 73 B1 FD | 	call	#__system___getiolock_0616
159fc     FD 12 02 F6 | 	mov	arg01, result1
15a00     68 16 B1 FD | 	call	#__system___lockmem
15a04     BB 01 00 FF 
15a08     18 14 06 F6 | 	mov	arg02, ##@LR__5985
15a0c     00 12 06 F6 | 	mov	arg01, #0
15a10     00 16 06 F6 | 	mov	arg03, #0
15a14     48 23 B1 FD | 	call	#__system___basic_print_string
15a18     00 12 06 F6 | 	mov	arg01, #0
15a1c     74 73 B1 FD | 	call	#__system___getiolock_0616
15a20     FD 00 68 FC | 	wrlong	#0, result1
15a24     0F 12 06 F6 | 	mov	arg01, #15
15a28     00 14 06 F6 | 	mov	arg02, #0
15a2c     90 DB B0 FD | 	call	#_printerror
15a30     28 00 90 FD | 	jmp	#LR__1763
15a34                 | LR__1762
15a34     A7 12 02 FB | 	rdlong	arg01, fp
15a38     10 4E 05 F1 | 	add	fp, #16
15a3c     A7 14 02 FB | 	rdlong	arg02, fp
15a40     04 4E 05 F1 | 	add	fp, #4
15a44     A7 16 02 FB | 	rdlong	arg03, fp
15a48     14 4E 85 F1 | 	sub	fp, #20
15a4c     B0 37 B1 FD | 	call	#__system__Mid_S
15a50     A7 FA 61 FC | 	wrlong	result1, fp
15a54     A7 12 02 F6 | 	mov	arg01, fp
15a58     44 7D BF FD | 	call	#_push
15a5c                 | LR__1763
15a5c     A7 F0 03 F6 | 	mov	ptra, fp
15a60     B2 00 A0 FD | 	call	#popregs_
15a64                 | _do_mid_ret
15a64     2D 00 64 FD | 	ret
15a68                 | 
15a68                 | ' 
15a68                 | ' '-------------------- mkdir
15a68                 | ' 
15a68                 | ' sub do_mkdir
15a68                 | _do_mkdir
15a68     04 4A 05 F6 | 	mov	COUNT_, #4
15a6c     A8 00 A0 FD | 	call	#pushregs_
15a70     94 7C BF FD | 	call	#_pop
15a74     FE 18 02 F6 | 	mov	arg04, result2
15a78     FF 16 02 F6 | 	mov	arg03, result3
15a7c     FD 26 02 F6 | 	mov	local01, result1
15a80     0C 29 02 F6 | 	mov	local02, arg04
15a84     0B 2B 02 F6 | 	mov	local03, arg03
15a88                 | ' 
15a88                 | ' t1=pop()
15a88                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15a88     2B 2A 0E F2 | 	cmp	local03, #43 wz
15a8c     10 00 90 5D |  if_ne	jmp	#LR__1770
15a90     13 13 02 F6 | 	mov	arg01, local01
15a94     E8 7D BF FD | 	call	#_convertstring
15a98     FD 26 02 F6 | 	mov	local01, result1
15a9c     1F 2A 06 F6 | 	mov	local03, #31
15aa0                 | LR__1770
15aa0                 | ' if t1.result_type<>result_string then printerror(15): return
15aa0     1F 2A 0E F2 | 	cmp	local03, #31 wz
15aa4     10 00 90 AD |  if_e	jmp	#LR__1771
15aa8     0F 12 06 F6 | 	mov	arg01, #15
15aac     00 14 06 F6 | 	mov	arg02, #0
15ab0     0C DB B0 FD | 	call	#_printerror
15ab4     64 00 90 FD | 	jmp	#LR__1773
15ab8                 | LR__1771
15ab8     13 13 02 F6 | 	mov	arg01, local01
15abc     7C 3E B1 FD | 	call	#__system___mkdir
15ac0     FD 2C 0A F6 | 	mov	local04, result1 wz
15ac4                 | ' filename$=t1.result.sresult
15ac4                 | ' err=mkdir(filename$)
15ac4                 | ' 'err=geterr() : 
15ac4                 | ' if err<>0 then print "Cannot create a directory: system error "; err
15ac4     54 00 90 AD |  if_e	jmp	#LR__1772
15ac8     00 12 06 F6 | 	mov	arg01, #0
15acc     C4 72 B1 FD | 	call	#__system___getiolock_0616
15ad0     FD 12 02 F6 | 	mov	arg01, result1
15ad4     94 15 B1 FD | 	call	#__system___lockmem
15ad8     BB 01 00 FF 
15adc     1F 14 06 F6 | 	mov	arg02, ##@LR__5986
15ae0     00 12 06 F6 | 	mov	arg01, #0
15ae4     00 16 06 F6 | 	mov	arg03, #0
15ae8     74 22 B1 FD | 	call	#__system___basic_print_string
15aec     00 12 06 F6 | 	mov	arg01, #0
15af0     16 15 02 F6 | 	mov	arg02, local04
15af4     00 16 06 F6 | 	mov	arg03, #0
15af8     0A 18 06 F6 | 	mov	arg04, #10
15afc     A4 22 B1 FD | 	call	#__system___basic_print_integer
15b00     00 12 06 F6 | 	mov	arg01, #0
15b04     0A 14 06 F6 | 	mov	arg02, #10
15b08     00 16 06 F6 | 	mov	arg03, #0
15b0c     F8 21 B1 FD | 	call	#__system___basic_print_char
15b10     00 12 06 F6 | 	mov	arg01, #0
15b14     7C 72 B1 FD | 	call	#__system___getiolock_0616
15b18     FD 00 68 FC | 	wrlong	#0, result1
15b1c                 | LR__1772
15b1c                 | LR__1773
15b1c     A7 F0 03 F6 | 	mov	ptra, fp
15b20     B2 00 A0 FD | 	call	#popregs_
15b24                 | _do_mkdir_ret
15b24     2D 00 64 FD | 	ret
15b28                 | 
15b28                 | ' 
15b28                 | ' '-------------------- mode
15b28                 | ' 
15b28                 | ' sub do_mode
15b28                 | _do_mode
15b28     05 4A 05 F6 | 	mov	COUNT_, #5
15b2c     A8 00 A0 FD | 	call	#pushregs_
15b30     D4 7B BF FD | 	call	#_pop
15b34     FD 26 02 F6 | 	mov	local01, result1
15b38     FE 28 02 F6 | 	mov	local02, result2
15b3c     FF 2A 02 F6 | 	mov	local03, result3
15b40                 | ' t1=pop() 
15b40                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15b40     1E 2A 0E F2 | 	cmp	local03, #30 wz
15b44     10 00 90 5D |  if_ne	jmp	#LR__1780
15b48     13 13 02 F6 | 	mov	arg01, local01
15b4c     00 14 06 F6 | 	mov	arg02, #0
15b50     58 48 B1 FD | 	call	#__system___float_tointeger
15b54     FD 26 02 F6 | 	mov	local01, result1
15b58                 | LR__1780
15b58                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15b58     1F 2A 0E F2 | 	cmp	local03, #31 wz
15b5c     18 00 90 5D |  if_ne	jmp	#LR__1781
15b60     13 13 02 F6 | 	mov	arg01, local01
15b64     88 4B B1 FD | 	call	#__system____builtin_atof
15b68     FD 12 02 F6 | 	mov	arg01, result1
15b6c     00 14 06 F6 | 	mov	arg02, #0
15b70     38 48 B1 FD | 	call	#__system___float_tointeger
15b74     FD 26 02 F6 | 	mov	local01, result1
15b78                 | LR__1781
15b78                 | ' select case t1.result.iresult
15b78     13 2D 02 F6 | 	mov	local04, local01
15b7c     06 2C 26 F3 | 	fle	local04, #6
15b80     30 2C 62 FD | 	jmprel	local04
15b84                 | LR__1782
15b84     18 00 90 FD | 	jmp	#LR__1783
15b88     AC 00 90 FD | 	jmp	#LR__1784
15b8c     14 01 90 FD | 	jmp	#LR__1785
15b90     7C 01 90 FD | 	jmp	#LR__1786
15b94     E4 01 90 FD | 	jmp	#LR__1787
15b98     78 02 90 FD | 	jmp	#LR__1788
15b9c     08 03 90 FD | 	jmp	#LR__1789
15ba0                 | LR__1783
15ba0     37 00 00 FF 
15ba4     40 E4 05 F1 | 	add	objptr, ##28224
15ba8     F2 02 68 FC | 	wrlong	#1, objptr
15bac     04 E4 85 F1 | 	sub	objptr, #4
15bb0     F2 34 69 FC | 	wrlong	#154, objptr
15bb4     19 00 00 FF 
15bb8     00 E5 05 F1 | 	add	objptr, ##13056
15bbc     F2 02 68 FC | 	wrlong	#1, objptr
15bc0     19 00 00 FF 
15bc4     04 E5 85 F1 | 	sub	objptr, ##13060
15bc8     F2 26 69 FC | 	wrlong	#147, objptr
15bcc     37 00 00 FF 
15bd0     38 E4 85 F1 | 	sub	objptr, ##28216
15bd4     04 12 06 F6 | 	mov	arg01, #4
15bd8     1C F6 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15bdc     37 00 00 FF 
15be0     3C E4 05 F1 | 	add	objptr, ##28220
15be4     F2 12 02 FB | 	rdlong	arg01, objptr
15be8     04 E4 85 F1 | 	sub	objptr, #4
15bec     F2 14 02 FB | 	rdlong	arg02, objptr
15bf0                 | ' 
15bf0                 | ' write_color:=ff
15bf0     36 00 00 FF 
15bf4     F7 E5 85 F1 | 	sub	objptr, ##28151
15bf8     F2 12 62 FC | 	wrlong	arg01, objptr
15bfc                 | ' write_background:=bb
15bfc     04 E4 05 F1 | 	add	objptr, #4
15c00     F2 14 62 FC | 	wrlong	arg02, objptr
15c04     01 00 00 FF 
15c08     00 EA 05 F1 | 	add	ptr__dat__, ##512
15c0c     52 00 00 FF 
15c10     5F E4 05 F1 | 	add	objptr, ##42079
15c14     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15c18     04 E4 85 F1 | 	sub	objptr, #4
15c1c     03 00 80 FF 
15c20     F2 30 69 FC | 	wrlong	##1688, objptr
15c24     52 00 00 FF 
15c28     A0 E4 85 F1 | 	sub	objptr, ##42144
15c2c     01 00 00 FF 
15c30     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15c34     70 02 90 FD | 	jmp	#LR__1789
15c38                 | LR__1784
15c38     37 00 00 FF 
15c3c     40 E4 05 F1 | 	add	objptr, ##28224
15c40     F2 00 68 FC | 	wrlong	#0, objptr
15c44     04 E4 85 F1 | 	sub	objptr, #4
15c48     F2 2E 68 FC | 	wrlong	#23, objptr
15c4c     19 00 00 FF 
15c50     00 E5 05 F1 | 	add	objptr, ##13056
15c54     F2 00 68 FC | 	wrlong	#0, objptr
15c58     19 00 00 FF 
15c5c     04 E5 85 F1 | 	sub	objptr, ##13060
15c60     F2 00 68 FC | 	wrlong	#0, objptr
15c64     37 00 00 FF 
15c68     38 E4 85 F1 | 	sub	objptr, ##28216
15c6c     00 12 06 F6 | 	mov	arg01, #0
15c70     84 F5 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15c74     37 00 00 FF 
15c78     3C E4 05 F1 | 	add	objptr, ##28220
15c7c     F2 12 02 FB | 	rdlong	arg01, objptr
15c80     04 E4 85 F1 | 	sub	objptr, #4
15c84     F2 14 02 FB | 	rdlong	arg02, objptr
15c88                 | ' 
15c88                 | ' write_color:=ff
15c88     36 00 00 FF 
15c8c     F7 E5 85 F1 | 	sub	objptr, ##28151
15c90     F2 12 62 FC | 	wrlong	arg01, objptr
15c94                 | ' write_background:=bb
15c94     04 E4 05 F1 | 	add	objptr, #4
15c98     F2 14 62 FC | 	wrlong	arg02, objptr
15c9c     45 E4 85 F1 | 	sub	objptr, #69
15ca0     04 02 90 FD | 	jmp	#LR__1789
15ca4                 | LR__1785
15ca4     37 00 00 FF 
15ca8     40 E4 05 F1 | 	add	objptr, ##28224
15cac     F2 00 68 FC | 	wrlong	#0, objptr
15cb0     04 E4 85 F1 | 	sub	objptr, #4
15cb4     F2 6A 69 FC | 	wrlong	#181, objptr
15cb8     19 00 00 FF 
15cbc     00 E5 05 F1 | 	add	objptr, ##13056
15cc0     F2 00 68 FC | 	wrlong	#0, objptr
15cc4     19 00 00 FF 
15cc8     04 E5 85 F1 | 	sub	objptr, ##13060
15ccc     F2 00 68 FC | 	wrlong	#0, objptr
15cd0     37 00 00 FF 
15cd4     38 E4 85 F1 | 	sub	objptr, ##28216
15cd8     00 12 06 F6 | 	mov	arg01, #0
15cdc     18 F5 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15ce0     37 00 00 FF 
15ce4     3C E4 05 F1 | 	add	objptr, ##28220
15ce8     F2 12 02 FB | 	rdlong	arg01, objptr
15cec     04 E4 85 F1 | 	sub	objptr, #4
15cf0     F2 14 02 FB | 	rdlong	arg02, objptr
15cf4                 | ' 
15cf4                 | ' write_color:=ff
15cf4     36 00 00 FF 
15cf8     F7 E5 85 F1 | 	sub	objptr, ##28151
15cfc     F2 12 62 FC | 	wrlong	arg01, objptr
15d00                 | ' write_background:=bb
15d00     04 E4 05 F1 | 	add	objptr, #4
15d04     F2 14 62 FC | 	wrlong	arg02, objptr
15d08     45 E4 85 F1 | 	sub	objptr, #69
15d0c     98 01 90 FD | 	jmp	#LR__1789
15d10                 | LR__1786
15d10     37 00 00 FF 
15d14     40 E4 05 F1 | 	add	objptr, ##28224
15d18     F2 00 68 FC | 	wrlong	#0, objptr
15d1c     04 E4 85 F1 | 	sub	objptr, #4
15d20     F2 1E 68 FC | 	wrlong	#15, objptr
15d24     19 00 00 FF 
15d28     00 E5 05 F1 | 	add	objptr, ##13056
15d2c     F2 00 68 FC | 	wrlong	#0, objptr
15d30     19 00 00 FF 
15d34     04 E5 85 F1 | 	sub	objptr, ##13060
15d38     F2 00 68 FC | 	wrlong	#0, objptr
15d3c     37 00 00 FF 
15d40     38 E4 85 F1 | 	sub	objptr, ##28216
15d44     00 12 06 F6 | 	mov	arg01, #0
15d48     AC F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15d4c     37 00 00 FF 
15d50     3C E4 05 F1 | 	add	objptr, ##28220
15d54     F2 12 02 FB | 	rdlong	arg01, objptr
15d58     04 E4 85 F1 | 	sub	objptr, #4
15d5c     F2 14 02 FB | 	rdlong	arg02, objptr
15d60                 | ' 
15d60                 | ' write_color:=ff
15d60     36 00 00 FF 
15d64     F7 E5 85 F1 | 	sub	objptr, ##28151
15d68     F2 12 62 FC | 	wrlong	arg01, objptr
15d6c                 | ' write_background:=bb
15d6c     04 E4 05 F1 | 	add	objptr, #4
15d70     F2 14 62 FC | 	wrlong	arg02, objptr
15d74     45 E4 85 F1 | 	sub	objptr, #69
15d78     2C 01 90 FD | 	jmp	#LR__1789
15d7c                 | LR__1787
15d7c     37 00 00 FF 
15d80     40 E4 05 F1 | 	add	objptr, ##28224
15d84     F2 02 68 FC | 	wrlong	#1, objptr
15d88     04 E4 85 F1 | 	sub	objptr, #4
15d8c     F2 02 68 FC | 	wrlong	#1, objptr
15d90     19 00 00 FF 
15d94     00 E5 05 F1 | 	add	objptr, ##13056
15d98     F2 02 68 FC | 	wrlong	#1, objptr
15d9c     19 00 00 FF 
15da0     04 E5 85 F1 | 	sub	objptr, ##13060
15da4     F2 1C 68 FC | 	wrlong	#14, objptr
15da8     37 00 00 FF 
15dac     38 E4 85 F1 | 	sub	objptr, ##28216
15db0     04 12 06 F6 | 	mov	arg01, #4
15db4     40 F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15db8     37 00 00 FF 
15dbc     3C E4 05 F1 | 	add	objptr, ##28220
15dc0     F2 12 02 FB | 	rdlong	arg01, objptr
15dc4     04 E4 85 F1 | 	sub	objptr, #4
15dc8     F2 14 02 FB | 	rdlong	arg02, objptr
15dcc                 | ' 
15dcc                 | ' write_color:=ff
15dcc     36 00 00 FF 
15dd0     F7 E5 85 F1 | 	sub	objptr, ##28151
15dd4     F2 12 62 FC | 	wrlong	arg01, objptr
15dd8                 | ' write_background:=bb
15dd8     04 E4 05 F1 | 	add	objptr, #4
15ddc     F2 14 62 FC | 	wrlong	arg02, objptr
15de0     07 00 00 FF 
15de4     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15de8     52 00 00 FF 
15dec     5F E4 05 F1 | 	add	objptr, ##42079
15df0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15df4     04 E4 85 F1 | 	sub	objptr, #4
15df8     03 00 80 FF 
15dfc     F2 30 69 FC | 	wrlong	##1688, objptr
15e00     52 00 00 FF 
15e04     A0 E4 85 F1 | 	sub	objptr, ##42144
15e08     07 00 00 FF 
15e0c     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15e10     94 00 90 FD | 	jmp	#LR__1789
15e14                 | LR__1788
15e14     37 00 00 FF 
15e18     40 E4 05 F1 | 	add	objptr, ##28224
15e1c     F2 04 68 FC | 	wrlong	#2, objptr
15e20     04 E4 85 F1 | 	sub	objptr, #4
15e24     F2 02 68 FC | 	wrlong	#1, objptr
15e28     19 00 00 FF 
15e2c     00 E5 05 F1 | 	add	objptr, ##13056
15e30     F2 02 68 FC | 	wrlong	#1, objptr
15e34     19 00 00 FF 
15e38     04 E5 85 F1 | 	sub	objptr, ##13060
15e3c     F2 0E 68 FC | 	wrlong	#7, objptr
15e40     37 00 00 FF 
15e44     38 E4 85 F1 | 	sub	objptr, ##28216
15e48     08 12 06 F6 | 	mov	arg01, #8
15e4c     A8 F3 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15e50     37 00 00 FF 
15e54     3C E4 05 F1 | 	add	objptr, ##28220
15e58     F2 12 02 FB | 	rdlong	arg01, objptr
15e5c     04 E4 85 F1 | 	sub	objptr, #4
15e60     F2 14 02 FB | 	rdlong	arg02, objptr
15e64                 | ' 
15e64                 | ' write_color:=ff
15e64     36 00 00 FF 
15e68     F7 E5 85 F1 | 	sub	objptr, ##28151
15e6c     F2 12 62 FC | 	wrlong	arg01, objptr
15e70                 | ' write_background:=bb
15e70     04 E4 05 F1 | 	add	objptr, #4
15e74     F2 14 62 FC | 	wrlong	arg02, objptr
15e78     07 00 00 FF 
15e7c     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15e80     52 00 00 FF 
15e84     5F E4 05 F1 | 	add	objptr, ##42079
15e88     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15e8c     04 E4 85 F1 | 	sub	objptr, #4
15e90     03 00 80 FF 
15e94     F2 30 69 FC | 	wrlong	##1688, objptr
15e98     52 00 00 FF 
15e9c     A0 E4 85 F1 | 	sub	objptr, ##42144
15ea0     07 00 00 FF 
15ea4     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15ea8                 | LR__1789
15ea8     52 00 00 FF 
15eac     9C E4 05 F1 | 	add	objptr, ##42140
15eb0     F2 26 62 FC | 	wrlong	local01, objptr
15eb4     04 E4 85 F1 | 	sub	objptr, #4
15eb8     F2 12 02 FB | 	rdlong	arg01, objptr
15ebc     0F 00 00 FF 
15ec0     3C E4 85 F1 | 	sub	objptr, ##7740
15ec4     F2 2E 02 FB | 	rdlong	local05, objptr
15ec8     43 00 00 FF 
15ecc     5C E4 85 F1 | 	sub	objptr, ##34396
15ed0     17 13 82 F1 | 	sub	arg01, local05
15ed4     00 14 06 F6 | 	mov	arg02, #0
15ed8     0A 16 06 F6 | 	mov	arg03, #10
15edc     5C 34 B1 FD | 	call	#__system__Number_S
15ee0     FD 12 02 F6 | 	mov	arg01, result1
15ee4     BB 01 00 FF 
15ee8     48 14 06 F6 | 	mov	arg02, ##@LR__5987
15eec     D8 11 B1 FD | 	call	#__system___string_concat
15ef0     50 00 00 FF 
15ef4     38 E5 05 F1 | 	add	objptr, ##41272
15ef8     F2 FA 61 FC | 	wrlong	result1, objptr
15efc     19 00 00 FF 
15f00     FC E4 85 F1 | 	sub	objptr, ##13052
15f04     F2 12 02 FB | 	rdlong	arg01, objptr
15f08     04 E4 85 F1 | 	sub	objptr, #4
15f0c     F2 14 02 FB | 	rdlong	arg02, objptr
15f10     37 00 00 FF 
15f14     38 E4 85 F1 | 	sub	objptr, ##28216
15f18     5C F4 B0 FD | 	call	#_hg010b_spin2_cls
15f1c     BB 01 00 FF 
15f20     5A 12 06 F6 | 	mov	arg01, ##@LR__5988
15f24                 | ' 
15f24                 | ' write(text)
15f24     10 F8 B0 FD | 	call	#_hg010b_spin2_write
15f28                 | ' crlf
15f28     0C FD B0 FD | 	call	#_hg010b_spin2_crlf
15f2c     18 00 00 FF 
15f30     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15f34     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15f38     18 00 00 FF 
15f3c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
15f40                 | ' 
15f40                 | ' write(text)
15f40     F4 F7 B0 FD | 	call	#_hg010b_spin2_write
15f44                 | ' crlf
15f44     F0 FC B0 FD | 	call	#_hg010b_spin2_crlf
15f48     50 00 00 FF 
15f4c     38 E5 05 F1 | 	add	objptr, ##41272
15f50     F2 12 02 FB | 	rdlong	arg01, objptr
15f54     50 00 00 FF 
15f58     38 E5 85 F1 | 	sub	objptr, ##41272
15f5c                 | ' 
15f5c                 | ' write(text)
15f5c     D8 F7 B0 FD | 	call	#_hg010b_spin2_write
15f60                 | ' crlf
15f60     D4 FC B0 FD | 	call	#_hg010b_spin2_crlf
15f64     A7 F0 03 F6 | 	mov	ptra, fp
15f68     B2 00 A0 FD | 	call	#popregs_
15f6c                 | _do_mode_ret
15f6c     2D 00 64 FD | 	ret
15f70                 | 
15f70                 | ' 
15f70                 | ' '-------------------- mouse
15f70                 | ' 
15f70                 | ' sub do_mouse
15f70                 | _do_mouse
15f70     94 77 BF FD | 	call	#_pop
15f74     00 FA 4D F2 | 	cmps	result1, #0 wz
15f78                 | ' 
15f78                 | ' t1=pop()
15f78                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15f78     14 00 90 5D |  if_ne	jmp	#LR__1790
15f7c     10 12 06 F6 | 	mov	arg01, #16
15f80     00 14 06 F6 | 	mov	arg02, #0
15f84     00 16 06 F6 | 	mov	arg03, #0
15f88     9C E6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15f8c     10 00 90 FD | 	jmp	#LR__1791
15f90                 | LR__1790
15f90     10 12 06 F6 | 	mov	arg01, #16
15f94     20 14 06 F6 | 	mov	arg02, #32
15f98     20 16 06 F6 | 	mov	arg03, #32
15f9c     88 E6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15fa0                 | LR__1791
15fa0                 | _do_mouse_ret
15fa0     2D 00 64 FD | 	ret
15fa4                 | 
15fa4                 | ' 
15fa4                 | ' '-------------------- mousek
15fa4                 | ' 
15fa4                 | ' sub do_mousek
15fa4                 | _do_mousek
15fa4     00 4A 05 F6 | 	mov	COUNT_, #0
15fa8     A8 00 A0 FD | 	call	#pushregs_
15fac     0C F0 07 F1 | 	add	ptra, #12
15fb0     08 4E 05 F1 | 	add	fp, #8
15fb4     A7 3A 68 FC | 	wrlong	#29, fp
15fb8     08 4E 85 F1 | 	sub	fp, #8
15fbc     51 00 00 FF 
15fc0     50 E5 05 F1 | 	add	objptr, ##41808
15fc4     F2 12 02 FB | 	rdlong	arg01, objptr
15fc8     51 00 00 FF 
15fcc     50 E5 85 F1 | 	sub	objptr, ##41808
15fd0     A7 12 62 FC | 	wrlong	arg01, fp
15fd4     A7 12 02 F6 | 	mov	arg01, fp
15fd8     C4 77 BF FD | 	call	#_push
15fdc     A7 F0 03 F6 | 	mov	ptra, fp
15fe0     B2 00 A0 FD | 	call	#popregs_
15fe4                 | _do_mousek_ret
15fe4     2D 00 64 FD | 	ret
15fe8                 | 
15fe8                 | ' 
15fe8                 | ' '-------------------- mousew
15fe8                 | ' 
15fe8                 | ' sub do_mousew
15fe8                 | _do_mousew
15fe8     00 4A 05 F6 | 	mov	COUNT_, #0
15fec     A8 00 A0 FD | 	call	#pushregs_
15ff0     0C F0 07 F1 | 	add	ptra, #12
15ff4     08 4E 05 F1 | 	add	fp, #8
15ff8     A7 38 68 FC | 	wrlong	#28, fp
15ffc     08 4E 85 F1 | 	sub	fp, #8
16000     51 00 00 FF 
16004     54 E5 05 F1 | 	add	objptr, ##41812
16008     F2 12 02 FB | 	rdlong	arg01, objptr
1600c     51 00 00 FF 
16010     54 E5 85 F1 | 	sub	objptr, ##41812
16014     A7 12 62 FC | 	wrlong	arg01, fp
16018     A7 12 02 F6 | 	mov	arg01, fp
1601c     80 77 BF FD | 	call	#_push
16020     A7 F0 03 F6 | 	mov	ptra, fp
16024     B2 00 A0 FD | 	call	#popregs_
16028                 | _do_mousew_ret
16028     2D 00 64 FD | 	ret
1602c                 | 
1602c                 | ' 
1602c                 | ' '-------------------- mousex
1602c                 | ' 
1602c                 | ' sub do_mousex
1602c                 | _do_mousex
1602c     00 4A 05 F6 | 	mov	COUNT_, #0
16030     A8 00 A0 FD | 	call	#pushregs_
16034     0C F0 07 F1 | 	add	ptra, #12
16038     08 4E 05 F1 | 	add	fp, #8
1603c     A7 3A 68 FC | 	wrlong	#29, fp
16040     08 4E 85 F1 | 	sub	fp, #8
16044     51 00 00 FF 
16048     48 E5 05 F1 | 	add	objptr, ##41800
1604c     F2 12 02 FB | 	rdlong	arg01, objptr
16050     51 00 00 FF 
16054     48 E5 85 F1 | 	sub	objptr, ##41800
16058     A7 12 62 FC | 	wrlong	arg01, fp
1605c     A7 12 02 F6 | 	mov	arg01, fp
16060     3C 77 BF FD | 	call	#_push
16064     A7 F0 03 F6 | 	mov	ptra, fp
16068     B2 00 A0 FD | 	call	#popregs_
1606c                 | _do_mousex_ret
1606c     2D 00 64 FD | 	ret
16070                 | 
16070                 | ' 
16070                 | ' '-------------------- mousey
16070                 | ' 
16070                 | ' sub do_mousey
16070                 | _do_mousey
16070     00 4A 05 F6 | 	mov	COUNT_, #0
16074     A8 00 A0 FD | 	call	#pushregs_
16078     0C F0 07 F1 | 	add	ptra, #12
1607c     08 4E 05 F1 | 	add	fp, #8
16080     A7 3A 68 FC | 	wrlong	#29, fp
16084     08 4E 85 F1 | 	sub	fp, #8
16088     51 00 00 FF 
1608c     4C E5 05 F1 | 	add	objptr, ##41804
16090     F2 12 02 FB | 	rdlong	arg01, objptr
16094     51 00 00 FF 
16098     4C E5 85 F1 | 	sub	objptr, ##41804
1609c     A7 12 62 FC | 	wrlong	arg01, fp
160a0     A7 12 02 F6 | 	mov	arg01, fp
160a4     F8 76 BF FD | 	call	#_push
160a8     A7 F0 03 F6 | 	mov	ptra, fp
160ac     B2 00 A0 FD | 	call	#popregs_
160b0                 | _do_mousey_ret
160b0     2D 00 64 FD | 	ret
160b4                 | 
160b4                 | ' 
160b4                 | ' '------------------ new
160b4                 | ' 
160b4                 | ' sub do_new
160b4                 | _do_new
160b4     03 4A 05 F6 | 	mov	COUNT_, #3
160b8     A8 00 A0 FD | 	call	#pushregs_
160bc                 | ' 
160bc                 | ' if inrun=1 then inrun=2
160bc     50 00 00 FF 
160c0     EC E4 05 F1 | 	add	objptr, ##41196
160c4     F2 16 02 FB | 	rdlong	arg03, objptr
160c8     50 00 00 FF 
160cc     EC E4 85 F1 | 	sub	objptr, ##41196
160d0     01 16 0E F2 | 	cmp	arg03, #1 wz
160d4     50 00 00 AF 
160d8     EC E4 05 A1 |  if_e	add	objptr, ##41196
160dc     F2 04 68 AC |  if_e	wrlong	#2, objptr
160e0     50 00 00 AF 
160e4     EC E4 85 A1 |  if_e	sub	objptr, ##41196
160e8     13 12 C6 F9 | 	decod	arg01, #19
160ec     01 14 66 F6 | 	neg	arg02, #1
160f0     6C D6 B0 FD | 	call	#_pslpoke
160f4     35 00 00 FF 
160f8     08 E4 05 F1 | 	add	objptr, ##27144
160fc     F2 00 68 FC | 	wrlong	#0, objptr
16100                 | ' pslpoke(memlo,$FFFFFFFF)
16100                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
16100     00 26 06 F6 | 	mov	local01, #0
16104     20 00 00 FF 
16108     10 E4 85 F1 | 	sub	objptr, ##16400
1610c     97 1E 48 FB | 	callpa	#(@LR__1801-@LR__1800)>>2,fcache_load_ptr_
16110                 | LR__1800
16110     13 17 02 F6 | 	mov	arg03, local01
16114     04 16 66 F0 | 	shl	arg03, #4
16118     F2 16 02 F1 | 	add	arg03, objptr
1611c     BB 01 00 FF 
16120     5B 14 06 F6 | 	mov	arg02, ##@LR__5989
16124     0B 15 62 FC | 	wrlong	arg02, arg03
16128     13 29 02 F6 | 	mov	local02, local01
1612c     04 28 66 F0 | 	shl	local02, #4
16130     F2 28 02 F1 | 	add	local02, objptr
16134     0C 28 06 F1 | 	add	local02, #12
16138     14 01 68 FC | 	wrlong	#0, local02
1613c     01 26 06 F1 | 	add	local01, #1
16140     02 00 00 FF 
16144     01 26 56 F2 | 	cmps	local01, ##1025 wc
16148     C4 FF 9F CD |  if_b	jmp	#LR__1800
1614c                 | LR__1801
1614c     35 00 00 FF 
16150     90 E4 05 F1 | 	add	objptr, ##27280
16154     00 04 80 FF 
16158     F2 00 68 FC | 	wrlong	##524288, objptr
1615c     06 00 00 FF 
16160     30 E4 05 F1 | 	add	objptr, ##3120
16164     00 04 80 FF 
16168     F2 00 68 FC | 	wrlong	##524288, objptr
1616c     04 E4 05 F1 | 	add	objptr, #4
16170     00 04 80 FF 
16174     F2 00 68 FC | 	wrlong	##524288, objptr
16178     0D 00 00 FF 
1617c     64 E4 85 F1 | 	sub	objptr, ##6756
16180     F2 00 68 FC | 	wrlong	#0, objptr
16184     07 00 00 FF 
16188     24 E4 05 F1 | 	add	objptr, ##3620
1618c     F2 00 68 FC | 	wrlong	#0, objptr
16190     07 00 00 FF 
16194     20 E4 85 F1 | 	sub	objptr, ##3616
16198     00 04 80 FF 
1619c     F2 00 68 FC | 	wrlong	##524288, objptr
161a0     0D 00 00 FF 
161a4     D0 E4 05 F1 | 	add	objptr, ##6864
161a8     F2 00 68 FC | 	wrlong	#0, objptr
161ac     BB 01 00 FF 
161b0     5C 2A 06 F6 | 	mov	local03, ##@LR__5990
161b4     01 00 00 FF 
161b8     B0 E5 05 F1 | 	add	objptr, ##944
161bc     F2 2A 62 FC | 	wrlong	local03, objptr
161c0     08 00 00 FF 
161c4     50 E4 85 F1 | 	sub	objptr, ##4176
161c8     F2 00 68 FC | 	wrlong	#0, objptr
161cc     04 E4 05 F1 | 	add	objptr, #4
161d0     FF FF FF FF 
161d4     F2 FE 6B FC | 	wrlong	##-1, objptr
161d8     06 00 00 FF 
161dc     A0 E4 05 F1 | 	add	objptr, ##3232
161e0     F2 00 68 FC | 	wrlong	#0, objptr
161e4     04 E4 05 F1 | 	add	objptr, #4
161e8     F2 00 68 FC | 	wrlong	#0, objptr
161ec                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
161ec                 | ' stackpointer=0
161ec                 | ' lineptr=0 
161ec                 | ' programptr=memlo ': stringptr=0
161ec                 | ' dataptr=0 : readline=""
161ec                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
161ec                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
161ec     00 26 06 F6 | 	mov	local01, #0
161f0     06 00 00 FF 
161f4     9C E4 85 F1 | 	sub	objptr, ##3228
161f8     97 16 48 FB | 	callpa	#(@LR__1803-@LR__1802)>>2,fcache_load_ptr_
161fc                 | LR__1802
161fc     13 29 02 F6 | 	mov	local02, local01
16200     02 28 66 F0 | 	shl	local02, #2
16204     13 29 02 F1 | 	add	local02, local01
16208     02 28 66 F0 | 	shl	local02, #2
1620c     F2 28 02 F1 | 	add	local02, objptr
16210     08 28 06 F1 | 	add	local02, #8
16214     FF FF FF FF 
16218     14 FF 6B FC | 	wrlong	##-1, local02
1621c     01 26 06 F1 | 	add	local01, #1
16220     41 26 56 F2 | 	cmps	local01, #65 wc
16224     D4 FF 9F CD |  if_b	jmp	#LR__1802
16228                 | LR__1803
16228     4A 00 00 FF 
1622c     98 E4 85 F1 | 	sub	objptr, ##38040
16230                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
16230     00 26 06 F6 | 	mov	local01, #0
16234                 | LR__1804
16234     13 29 02 F6 | 	mov	local02, local01
16238     02 28 66 F0 | 	shl	local02, #2
1623c     52 00 00 FF 
16240     54 E4 05 F1 | 	add	objptr, ##42068
16244     F2 28 02 F1 | 	add	local02, objptr
16248     14 2B 0A FB | 	rdlong	local03, local02 wz
1624c     52 00 00 FF 
16250     54 E4 85 F1 | 	sub	objptr, ##42068
16254     34 00 90 AD |  if_e	jmp	#LR__1805
16258     13 13 02 F6 | 	mov	arg01, local01
1625c     00 14 06 F6 | 	mov	arg02, #0
16260     00 16 06 F6 | 	mov	arg03, #0
16264     C0 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
16268     13 29 02 F6 | 	mov	local02, local01
1626c     02 28 66 F0 | 	shl	local02, #2
16270     52 00 00 FF 
16274     54 E4 05 F1 | 	add	objptr, ##42068
16278     F2 28 02 F1 | 	add	local02, objptr
1627c     14 13 02 FB | 	rdlong	arg01, local02
16280     52 00 00 FF 
16284     54 E4 85 F1 | 	sub	objptr, ##42068
16288     BC 50 B1 FD | 	call	#__system___gc_free
1628c                 | LR__1805
1628c     01 26 06 F1 | 	add	local01, #1
16290     10 26 56 F2 | 	cmps	local01, #16 wc
16294     9C FF 9F CD |  if_b	jmp	#LR__1804
16298     52 00 00 FF 
1629c     A8 E4 05 F1 | 	add	objptr, ##42152
162a0     00 C0 9F FF 
162a4     F2 00 68 FC | 	wrlong	##1065353216, objptr
162a8     04 E4 05 F1 | 	add	objptr, #4
162ac     00 C0 9F FF 
162b0     F2 00 68 FC | 	wrlong	##1065353216, objptr
162b4     52 00 00 FF 
162b8     A8 E4 85 F1 | 	sub	objptr, ##42152
162bc     F2 2A 02 FB | 	rdlong	local03, objptr
162c0     52 00 00 FF 
162c4     94 E4 05 F1 | 	add	objptr, ##42132
162c8     F2 2A 62 FC | 	wrlong	local03, objptr
162cc     52 00 00 FF 
162d0     98 E4 85 F1 | 	sub	objptr, ##42136
162d4     11 12 06 F6 | 	mov	arg01, #17
162d8     08 14 06 F6 | 	mov	arg02, #8
162dc     10 16 06 F6 | 	mov	arg03, #16
162e0     44 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
162e4     10 12 06 F6 | 	mov	arg01, #16
162e8     20 14 06 F6 | 	mov	arg02, #32
162ec     20 16 06 F6 | 	mov	arg03, #32
162f0     34 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
162f4     BB 01 00 FF 
162f8     5D 2A 06 F6 | 	mov	local03, ##@LR__5991
162fc     52 00 00 FF 
16300     C4 E4 05 F1 | 	add	objptr, ##42180
16304     F2 2A 62 FC | 	wrlong	local03, objptr
16308     52 00 00 FF 
1630c     C4 E4 85 F1 | 	sub	objptr, ##42180
16310     A4 C6 B0 FD | 	call	#_init_audio
16314     A7 F0 03 F6 | 	mov	ptra, fp
16318     B2 00 A0 FD | 	call	#popregs_
1631c                 | _do_new_ret
1631c     2D 00 64 FD | 	ret
16320                 | 
16320                 | ' 
16320                 | ' '-------------------- next
16320                 | ' 
16320                 | ' sub do_next()
16320                 | _do_next
16320     04 4A 05 F6 | 	mov	COUNT_, #4
16324     A8 00 A0 FD | 	call	#pushregs_
16328     DC 73 BF FD | 	call	#_pop
1632c     FD 26 02 F6 | 	mov	local01, result1
16330     FE 28 02 F6 | 	mov	local02, result2
16334     FF 2A 02 F6 | 	mov	local03, result3
16338                 | ' t1=pop() :varnum=t1.result.uresult
16338                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
16338     50 00 00 FF 
1633c     30 E5 05 F1 | 	add	objptr, ##41264
16340     F2 14 02 FB | 	rdlong	arg02, objptr
16344     0A 13 02 F6 | 	mov	arg01, arg02
16348     02 12 66 F0 | 	shl	arg01, #2
1634c     0A 13 02 F1 | 	add	arg01, arg02
16350     02 12 66 F0 | 	shl	arg01, #2
16354     06 00 00 FF 
16358     98 E4 85 F1 | 	sub	objptr, ##3224
1635c     F2 12 02 F1 | 	add	arg01, objptr
16360     08 12 06 F1 | 	add	arg01, #8
16364     09 15 02 FB | 	rdlong	arg02, arg01
16368     13 15 0A F2 | 	cmp	arg02, local01 wz
1636c     4A 00 00 FF 
16370     98 E4 85 F1 | 	sub	objptr, ##38040
16374     10 00 90 AD |  if_e	jmp	#LR__1810
16378     25 12 06 F6 | 	mov	arg01, #37
1637c     00 14 06 F6 | 	mov	arg02, #0
16380     3C D2 B0 FD | 	call	#_printerror
16384     54 03 90 FD | 	jmp	#LR__1817
16388                 | LR__1810
16388                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16388     13 15 02 F6 | 	mov	arg02, local01
1638c     04 14 66 F0 | 	shl	arg02, #4
16390     14 00 00 FF 
16394     F8 E5 05 F1 | 	add	objptr, ##10744
16398     F2 14 02 F1 | 	add	arg02, objptr
1639c     0C 14 06 F1 | 	add	arg02, #12
163a0     0A 15 02 FB | 	rdlong	arg02, arg02
163a4     1E 14 0E F2 | 	cmp	arg02, #30 wz
163a8     14 00 00 FF 
163ac     F8 E5 85 F1 | 	sub	objptr, ##10744
163b0     54 00 90 5D |  if_ne	jmp	#LR__1811
163b4     13 15 02 F6 | 	mov	arg02, local01
163b8     04 14 66 F0 | 	shl	arg02, #4
163bc     14 00 00 FF 
163c0     F8 E5 05 F1 | 	add	objptr, ##10744
163c4     F2 14 02 F1 | 	add	arg02, objptr
163c8     0C 14 06 F1 | 	add	arg02, #12
163cc     0A 39 68 FC | 	wrlong	#28, arg02
163d0     13 2D 02 F6 | 	mov	local04, local01
163d4     04 2C 66 F0 | 	shl	local04, #4
163d8     F2 2C 02 F1 | 	add	local04, objptr
163dc     13 15 02 F6 | 	mov	arg02, local01
163e0     04 14 66 F0 | 	shl	arg02, #4
163e4     F2 14 02 F1 | 	add	arg02, objptr
163e8     04 14 06 F1 | 	add	arg02, #4
163ec     0A 13 02 FB | 	rdlong	arg01, arg02
163f0     14 00 00 FF 
163f4     F8 E5 85 F1 | 	sub	objptr, ##10744
163f8     01 14 06 F6 | 	mov	arg02, #1
163fc     AC 3F B1 FD | 	call	#__system___float_tointeger
16400     04 2C 06 F1 | 	add	local04, #4
16404     16 FB 61 FC | 	wrlong	result1, local04
16408                 | LR__1811
16408     50 00 00 FF 
1640c     30 E5 05 F1 | 	add	objptr, ##41264
16410     F2 2C 02 FB | 	rdlong	local04, objptr
16414     16 15 02 F6 | 	mov	arg02, local04
16418     02 14 66 F0 | 	shl	arg02, #2
1641c     16 15 02 F1 | 	add	arg02, local04
16420     02 14 66 F0 | 	shl	arg02, #2
16424     06 00 00 FF 
16428     98 E4 85 F1 | 	sub	objptr, ##3224
1642c     F2 14 02 F1 | 	add	arg02, objptr
16430     0C 14 06 F1 | 	add	arg02, #12
16434     0A FF 01 FB | 	rdlong	result3, arg02
16438     13 2D 02 F6 | 	mov	local04, local01
1643c     04 2C 66 F0 | 	shl	local04, #4
16440     35 00 00 FF 
16444     A0 E4 85 F1 | 	sub	objptr, ##27296
16448     F2 2C 02 F1 | 	add	local04, objptr
1644c     13 15 02 F6 | 	mov	arg02, local01
16450     04 14 66 F0 | 	shl	arg02, #4
16454     F2 14 02 F1 | 	add	arg02, objptr
16458     04 14 06 F1 | 	add	arg02, #4
1645c     0A 13 02 FB | 	rdlong	arg01, arg02
16460     FF 12 02 F1 | 	add	arg01, result3
16464     04 2C 06 F1 | 	add	local04, #4
16468     16 13 62 FC | 	wrlong	arg01, local04
1646c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
1646c                 | ' if fortable(fortop).stepval>=0 then
1646c     3B 00 00 FF 
16470     38 E5 05 F1 | 	add	objptr, ##30520
16474     F2 2C 02 FB | 	rdlong	local04, objptr
16478     16 13 02 F6 | 	mov	arg01, local04
1647c     02 12 66 F0 | 	shl	arg01, #2
16480     16 13 02 F1 | 	add	arg01, local04
16484     02 12 66 F0 | 	shl	arg01, #2
16488     06 00 00 FF 
1648c     98 E4 85 F1 | 	sub	objptr, ##3224
16490     F2 12 02 F1 | 	add	arg01, objptr
16494     0C 12 06 F1 | 	add	arg01, #12
16498     09 13 02 FB | 	rdlong	arg01, arg01
1649c     00 12 56 F2 | 	cmps	arg01, #0 wc
164a0     4A 00 00 FF 
164a4     98 E4 85 F1 | 	sub	objptr, ##38040
164a8     78 00 90 CD |  if_b	jmp	#LR__1812
164ac                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
164ac     04 26 66 F0 | 	shl	local01, #4
164b0     14 00 00 FF 
164b4     F8 E5 05 F1 | 	add	objptr, ##10744
164b8     F2 26 02 F1 | 	add	local01, objptr
164bc     3B 00 00 FF 
164c0     38 E5 05 F1 | 	add	objptr, ##30520
164c4     F2 12 02 FB | 	rdlong	arg01, objptr
164c8     09 2D 02 F6 | 	mov	local04, arg01
164cc     02 2C 66 F0 | 	shl	local04, #2
164d0     09 2D 02 F1 | 	add	local04, arg01
164d4     02 2C 66 F0 | 	shl	local04, #2
164d8     06 00 00 FF 
164dc     98 E4 85 F1 | 	sub	objptr, ##3224
164e0     F2 2C 02 F1 | 	add	local04, objptr
164e4     04 26 06 F1 | 	add	local01, #4
164e8     13 27 02 FB | 	rdlong	local01, local01
164ec     10 2C 06 F1 | 	add	local04, #16
164f0     16 2D 02 FB | 	rdlong	local04, local04
164f4     16 27 5A F2 | 	cmps	local01, local04 wcz
164f8     4A 00 00 FF 
164fc     98 E4 85 F1 | 	sub	objptr, ##38040
16500     9C 00 90 ED |  if_be	jmp	#LR__1814
16504     50 00 00 FF 
16508     30 E5 05 F1 | 	add	objptr, ##41264
1650c     F2 2C 02 FB | 	rdlong	local04, objptr
16510     01 2C 86 F1 | 	sub	local04, #1
16514     F2 2C 62 FC | 	wrlong	local04, objptr
16518     50 00 00 FF 
1651c     30 E5 85 F1 | 	sub	objptr, ##41264
16520     B8 01 90 FD | 	jmp	#LR__1817
16524                 | LR__1812
16524                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
16524     13 2D 02 F6 | 	mov	local04, local01
16528     04 2C 66 F0 | 	shl	local04, #4
1652c     14 00 00 FF 
16530     F8 E5 05 F1 | 	add	objptr, ##10744
16534     F2 2C 02 F1 | 	add	local04, objptr
16538     3B 00 00 FF 
1653c     38 E5 05 F1 | 	add	objptr, ##30520
16540     F2 26 02 FB | 	rdlong	local01, objptr
16544     13 13 02 F6 | 	mov	arg01, local01
16548     02 12 66 F0 | 	shl	arg01, #2
1654c     13 13 02 F1 | 	add	arg01, local01
16550     02 12 66 F0 | 	shl	arg01, #2
16554     06 00 00 FF 
16558     98 E4 85 F1 | 	sub	objptr, ##3224
1655c     F2 12 02 F1 | 	add	arg01, objptr
16560     04 2C 06 F1 | 	add	local04, #4
16564     16 2D 02 FB | 	rdlong	local04, local04
16568     10 12 06 F1 | 	add	arg01, #16
1656c     09 13 02 FB | 	rdlong	arg01, arg01
16570     09 2D 52 F2 | 	cmps	local04, arg01 wc
16574     4A 00 00 FF 
16578     98 E4 85 F1 | 	sub	objptr, ##38040
1657c     20 00 90 3D |  if_ae	jmp	#LR__1813
16580     50 00 00 FF 
16584     30 E5 05 F1 | 	add	objptr, ##41264
16588     F2 2C 02 FB | 	rdlong	local04, objptr
1658c     01 2C 86 F1 | 	sub	local04, #1
16590     F2 2C 62 FC | 	wrlong	local04, objptr
16594     50 00 00 FF 
16598     30 E5 85 F1 | 	sub	objptr, ##41264
1659c     3C 01 90 FD | 	jmp	#LR__1817
165a0                 | LR__1813
165a0                 | LR__1814
165a0                 | ' ' if not returned, goto pointer 
165a0                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
165a0     50 00 00 FF 
165a4     EC E4 05 F1 | 	add	objptr, ##41196
165a8     F2 2C 02 FB | 	rdlong	local04, objptr
165ac     50 00 00 FF 
165b0     EC E4 85 F1 | 	sub	objptr, ##41196
165b4     01 2C 16 F2 | 	cmp	local04, #1 wc
165b8     DC 00 90 CD |  if_b	jmp	#LR__1815
165bc     50 00 00 FF 
165c0     30 E5 05 F1 | 	add	objptr, ##41264
165c4     F2 2C 02 FB | 	rdlong	local04, objptr
165c8     16 27 02 F6 | 	mov	local01, local04
165cc     02 26 66 F0 | 	shl	local01, #2
165d0     16 27 02 F1 | 	add	local01, local04
165d4     02 26 66 F0 | 	shl	local01, #2
165d8     06 00 00 FF 
165dc     98 E4 85 F1 | 	sub	objptr, ##3224
165e0     F2 26 02 F1 | 	add	local01, objptr
165e4     06 00 00 FF 
165e8     20 E4 05 F1 | 	add	objptr, ##3104
165ec     F2 2C 02 FB | 	rdlong	local04, objptr
165f0     50 00 00 FF 
165f4     B8 E4 85 F1 | 	sub	objptr, ##41144
165f8     13 27 02 FB | 	rdlong	local01, local01
165fc     13 2D 0A F2 | 	cmp	local04, local01 wz
16600     94 00 90 AD |  if_e	jmp	#LR__1815
16604     50 00 00 FF 
16608     30 E5 05 F1 | 	add	objptr, ##41264
1660c     F2 2C 02 FB | 	rdlong	local04, objptr
16610     16 27 02 F6 | 	mov	local01, local04
16614     02 26 66 F0 | 	shl	local01, #2
16618     16 27 02 F1 | 	add	local01, local04
1661c     02 26 66 F0 | 	shl	local01, #2
16620     06 00 00 FF 
16624     98 E4 85 F1 | 	sub	objptr, ##3224
16628     F2 26 02 F1 | 	add	local01, objptr
1662c     13 27 02 FB | 	rdlong	local01, local01
16630     06 00 00 FF 
16634     20 E4 05 F1 | 	add	objptr, ##3104
16638     F2 26 62 FC | 	wrlong	local01, objptr
1663c     78 E4 05 F1 | 	add	objptr, #120
16640     F2 2C 02 FB | 	rdlong	local04, objptr
16644     16 27 02 F6 | 	mov	local01, local04
16648     02 26 66 F0 | 	shl	local01, #2
1664c     16 27 02 F1 | 	add	local01, local04
16650     02 26 66 F0 | 	shl	local01, #2
16654     06 00 00 FF 
16658     98 E4 85 F1 | 	sub	objptr, ##3224
1665c     F2 26 02 F1 | 	add	local01, objptr
16660     04 26 06 F1 | 	add	local01, #4
16664     13 27 02 FB | 	rdlong	local01, local01
16668     06 00 00 FF 
1666c     24 E4 05 F1 | 	add	objptr, ##3108
16670     F2 26 62 FC | 	wrlong	local01, objptr
16674     06 00 00 FF 
16678     40 E4 85 F1 | 	sub	objptr, ##3136
1667c     F2 2C 02 FB | 	rdlong	local04, objptr
16680     01 2C 86 F1 | 	sub	local04, #1
16684     04 E4 05 F1 | 	add	objptr, #4
16688     F2 2C 62 FC | 	wrlong	local04, objptr
1668c     4A 00 00 FF 
16690     80 E4 85 F1 | 	sub	objptr, ##38016
16694     44 00 90 FD | 	jmp	#LR__1816
16698                 | LR__1815
16698     50 00 00 FF 
1669c     30 E5 05 F1 | 	add	objptr, ##41264
166a0     F2 2C 02 FB | 	rdlong	local04, objptr
166a4     16 27 02 F6 | 	mov	local01, local04
166a8     02 26 66 F0 | 	shl	local01, #2
166ac     16 27 02 F1 | 	add	local01, local04
166b0     02 26 66 F0 | 	shl	local01, #2
166b4     06 00 00 FF 
166b8     98 E4 85 F1 | 	sub	objptr, ##3224
166bc     F2 26 02 F1 | 	add	local01, objptr
166c0     04 26 06 F1 | 	add	local01, #4
166c4     13 27 02 FB | 	rdlong	local01, local01
166c8     01 26 86 F1 | 	sub	local01, #1
166cc     18 E4 85 F1 | 	sub	objptr, #24
166d0     F2 26 62 FC | 	wrlong	local01, objptr
166d4     4A 00 00 FF 
166d8     80 E4 85 F1 | 	sub	objptr, ##38016
166dc                 | LR__1816
166dc                 | LR__1817
166dc     A7 F0 03 F6 | 	mov	ptra, fp
166e0     B2 00 A0 FD | 	call	#popregs_
166e4                 | _do_next_ret
166e4     2D 00 64 FD | 	ret
166e8                 | 
166e8                 | ' 
166e8                 | ' '-------------------- no command (print "Unknown command")
166e8                 | ' 
166e8                 | ' sub do_no_command
166e8                 | _do_no_command
166e8     50 00 00 FF 
166ec     F0 E4 05 F1 | 	add	objptr, ##41200
166f0     F2 14 02 FB | 	rdlong	arg02, objptr
166f4     50 00 00 FF 
166f8     F0 E4 85 F1 | 	sub	objptr, ##41200
166fc     17 12 06 F6 | 	mov	arg01, #23
16700     BC CE B0 FD | 	call	#_printerror
16704                 | _do_no_command_ret
16704     2D 00 64 FD | 	ret
16708                 | 
16708                 | ' 
16708                 | ' '-------------------- nothing
16708                 | ' 
16708                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
16708                 | _do_nothing
16708                 | _do_nothing_ret
16708     2D 00 64 FD | 	ret
1670c                 | 
1670c                 | ' 
1670c                 | ' '-------------------- on
1670c                 | ' 
1670c                 | ' sub do_on
1670c                 | _do_on
1670c     01 4A 05 F6 | 	mov	COUNT_, #1
16710     A8 00 A0 FD | 	call	#pushregs_
16714     18 F0 07 F1 | 	add	ptra, #24
16718     4A 00 00 FF 
1671c     80 E4 05 F1 | 	add	objptr, ##38016
16720     F2 12 02 FB | 	rdlong	arg01, objptr
16724     09 FD 01 F6 | 	mov	result2, arg01
16728     01 FC 65 F0 | 	shl	result2, #1
1672c     09 FD 01 F1 | 	add	result2, arg01
16730     02 FC 65 F0 | 	shl	result2, #2
16734     03 00 00 FF 
16738     04 E4 85 F1 | 	sub	objptr, ##1540
1673c     F2 FC 01 F1 | 	add	result2, objptr
16740     FE 12 02 FB | 	rdlong	arg01, result2
16744     14 4E 05 F1 | 	add	fp, #20
16748     A7 12 62 FC | 	wrlong	arg01, fp
1674c     03 00 00 FF 
16750     04 E4 05 F1 | 	add	objptr, ##1540
16754     F2 12 02 FB | 	rdlong	arg01, objptr
16758     09 27 02 F6 | 	mov	local01, arg01
1675c     01 26 66 F0 | 	shl	local01, #1
16760     09 27 02 F1 | 	add	local01, arg01
16764     02 26 66 F0 | 	shl	local01, #2
16768     03 00 00 FF 
1676c     04 E4 85 F1 | 	sub	objptr, ##1540
16770     F2 26 02 F1 | 	add	local01, objptr
16774     04 26 06 F1 | 	add	local01, #4
16778     13 27 02 FB | 	rdlong	local01, local01
1677c     08 4E 85 F1 | 	sub	fp, #8
16780     A7 26 62 FC | 	wrlong	local01, fp
16784     0C 4E 85 F1 | 	sub	fp, #12
16788     47 00 00 FF 
1678c     7C E4 85 F1 | 	sub	objptr, ##36476
16790     74 6F BF FD | 	call	#_pop
16794     FF 26 02 F6 | 	mov	local01, result3
16798     A7 FA 61 FC | 	wrlong	result1, fp
1679c     04 4E 05 F1 | 	add	fp, #4
167a0     A7 FC 61 FC | 	wrlong	result2, fp
167a4     04 4E 05 F1 | 	add	fp, #4
167a8     A7 26 62 FC | 	wrlong	local01, fp
167ac     08 4E 85 F1 | 	sub	fp, #8
167b0     A7 12 02 F6 | 	mov	arg01, fp
167b4     34 71 BF FD | 	call	#_converttoint
167b8     10 4E 05 F1 | 	add	fp, #16
167bc     A7 FA 61 FC | 	wrlong	result1, fp
167c0                 | ' 
167c0                 | ' numpar=compiledline(lineptr_e).result.uresult
167c0                 | ' skip=compiledline(lineptr_e).result.twowords(1)
167c0                 | ' t1=pop()
167c0                 | ' t=converttoint(t1)
167c0                 | ' if t<1 orelse t>numpar then return
167c0     10 4E 85 F1 | 	sub	fp, #16
167c4     01 FA 55 F2 | 	cmps	result1, #1 wc
167c8     58 00 90 CD |  if_b	jmp	#LR__1820
167cc     10 4E 05 F1 | 	add	fp, #16
167d0     A7 26 02 FB | 	rdlong	local01, fp
167d4     04 4E 05 F1 | 	add	fp, #4
167d8     A7 12 02 FB | 	rdlong	arg01, fp
167dc     14 4E 85 F1 | 	sub	fp, #20
167e0     09 27 5A F2 | 	cmps	local01, arg01 wcz
167e4     3C 00 90 1D |  if_a	jmp	#LR__1820
167e8     10 4E 05 F1 | 	add	fp, #16
167ec     A7 26 02 FB | 	rdlong	local01, fp
167f0     01 26 86 F1 | 	sub	local01, #1
167f4     04 4E 85 F1 | 	sub	fp, #4
167f8     A7 12 02 FB | 	rdlong	arg01, fp
167fc     13 13 02 FD | 	qmul	arg01, local01
16800     4A 00 00 FF 
16804     80 E4 05 F1 | 	add	objptr, ##38016
16808     F2 26 02 FB | 	rdlong	local01, objptr
1680c     0C 4E 85 F1 | 	sub	fp, #12
16810     18 12 62 FD | 	getqx	arg01
16814     09 27 02 F1 | 	add	local01, arg01
16818     F2 26 62 FC | 	wrlong	local01, objptr
1681c     4A 00 00 FF 
16820     80 E4 85 F1 | 	sub	objptr, ##38016
16824                 | LR__1820
16824     A7 F0 03 F6 | 	mov	ptra, fp
16828     B2 00 A0 FD | 	call	#popregs_
1682c                 | _do_on_ret
1682c     2D 00 64 FD | 	ret
16830                 | 
16830                 | ' 
16830                 | ' '-------------------- open
16830                 | ' 
16830                 | ' sub do_open
16830                 | _do_open
16830     02 4A 05 F6 | 	mov	COUNT_, #2
16834     A8 00 A0 FD | 	call	#pushregs_
16838     20 F0 07 F1 | 	add	ptra, #32
1683c     4A 00 00 FF 
16840     80 E4 05 F1 | 	add	objptr, ##38016
16844     F2 16 02 FB | 	rdlong	arg03, objptr
16848     0B 15 02 F6 | 	mov	arg02, arg03
1684c     01 14 66 F0 | 	shl	arg02, #1
16850     0B 15 02 F1 | 	add	arg02, arg03
16854     02 14 66 F0 | 	shl	arg02, #2
16858     03 00 00 FF 
1685c     04 E4 85 F1 | 	sub	objptr, ##1540
16860     F2 14 02 F1 | 	add	arg02, objptr
16864     0A 17 02 FB | 	rdlong	arg03, arg02
16868     10 4E 05 F1 | 	add	fp, #16
1686c     A7 16 62 FC | 	wrlong	arg03, fp
16870     10 4E 85 F1 | 	sub	fp, #16
16874     47 00 00 FF 
16878     7C E4 85 F1 | 	sub	objptr, ##36476
1687c     88 6E BF FD | 	call	#_pop
16880     FF 16 02 F6 | 	mov	arg03, result3
16884     A7 FA 61 FC | 	wrlong	result1, fp
16888     04 4E 05 F1 | 	add	fp, #4
1688c     A7 FC 61 FC | 	wrlong	result2, fp
16890     04 4E 05 F1 | 	add	fp, #4
16894     A7 16 62 FC | 	wrlong	arg03, fp
16898                 | ' 
16898                 | ' numpar=compiledline(lineptr_e).result.uresult
16898                 | ' 
16898                 | ' t1=pop()
16898                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16898     08 4E 85 F1 | 	sub	fp, #8
1689c     2B 16 0E F2 | 	cmp	arg03, #43 wz
168a0     18 00 90 5D |  if_ne	jmp	#LR__1830
168a4     A7 12 02 FB | 	rdlong	arg01, fp
168a8     D4 6F BF FD | 	call	#_convertstring
168ac     A7 FA 61 FC | 	wrlong	result1, fp
168b0     08 4E 05 F1 | 	add	fp, #8
168b4     A7 3E 68 FC | 	wrlong	#31, fp
168b8     08 4E 85 F1 | 	sub	fp, #8
168bc                 | LR__1830
168bc                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
168bc     08 4E 05 F1 | 	add	fp, #8
168c0     A7 16 02 FB | 	rdlong	arg03, fp
168c4     08 4E 85 F1 | 	sub	fp, #8
168c8     1F 16 0E F2 | 	cmp	arg03, #31 wz
168cc     44 00 90 AD |  if_e	jmp	#LR__1831
168d0     00 12 06 F6 | 	mov	arg01, #0
168d4     BC 64 B1 FD | 	call	#__system___getiolock_0616
168d8     FD 12 02 F6 | 	mov	arg01, result1
168dc     8C 07 B1 FD | 	call	#__system___lockmem
168e0     BB 01 00 FF 
168e4     68 14 06 F6 | 	mov	arg02, ##@LR__5992
168e8     00 12 06 F6 | 	mov	arg01, #0
168ec     00 16 06 F6 | 	mov	arg03, #0
168f0     6C 14 B1 FD | 	call	#__system___basic_print_string
168f4     00 12 06 F6 | 	mov	arg01, #0
168f8     0A 14 06 F6 | 	mov	arg02, #10
168fc     00 16 06 F6 | 	mov	arg03, #0
16900     04 14 B1 FD | 	call	#__system___basic_print_char
16904     00 12 06 F6 | 	mov	arg01, #0
16908     88 64 B1 FD | 	call	#__system___getiolock_0616
1690c     FD 00 68 FC | 	wrlong	#0, result1
16910     28 02 90 FD | 	jmp	#LR__1842
16914                 | LR__1831
16914     A7 16 02 FB | 	rdlong	arg03, fp
16918     0C 4E 05 F1 | 	add	fp, #12
1691c     A7 16 62 FC | 	wrlong	arg03, fp
16920     0C 4E 85 F1 | 	sub	fp, #12
16924     E0 6D BF FD | 	call	#_pop
16928     FF 16 02 F6 | 	mov	arg03, result3
1692c     A7 FA 61 FC | 	wrlong	result1, fp
16930     04 4E 05 F1 | 	add	fp, #4
16934     A7 FC 61 FC | 	wrlong	result2, fp
16938     04 4E 05 F1 | 	add	fp, #4
1693c     A7 16 62 FC | 	wrlong	arg03, fp
16940                 | ' filename=t1.result.sresult
16940                 | ' t1=pop()
16940                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16940     08 4E 85 F1 | 	sub	fp, #8
16944     2B 16 0E F2 | 	cmp	arg03, #43 wz
16948     18 00 90 5D |  if_ne	jmp	#LR__1832
1694c     A7 12 02 FB | 	rdlong	arg01, fp
16950     2C 6F BF FD | 	call	#_convertstring
16954     A7 FA 61 FC | 	wrlong	result1, fp
16958     08 4E 05 F1 | 	add	fp, #8
1695c     A7 3E 68 FC | 	wrlong	#31, fp
16960     08 4E 85 F1 | 	sub	fp, #8
16964                 | LR__1832
16964     14 4E 05 F1 | 	add	fp, #20
16968     A7 00 68 FC | 	wrlong	#0, fp
1696c                 | ' mode=0
1696c                 | ' if t1.result_type=result_string then
1696c     0C 4E 85 F1 | 	sub	fp, #12
16970     A7 14 02 FB | 	rdlong	arg02, fp
16974     08 4E 85 F1 | 	sub	fp, #8
16978     1F 14 0E F2 | 	cmp	arg02, #31 wz
1697c     64 00 90 5D |  if_ne	jmp	#LR__1833
16980                 | '   if t1.result.sresult="read" then mode=1
16980     A7 12 02 FB | 	rdlong	arg01, fp
16984     BB 01 00 FF 
16988     7A 14 06 F6 | 	mov	arg02, ##@LR__5993
1698c     04 07 B1 FD | 	call	#__system___string_cmp
16990     00 FA 0D F2 | 	cmp	result1, #0 wz
16994     14 4E 05 A1 |  if_e	add	fp, #20
16998     A7 02 68 AC |  if_e	wrlong	#1, fp
1699c     14 4E 85 A1 |  if_e	sub	fp, #20
169a0                 | '   if t1.result.sresult="write" then mode=2
169a0     A7 12 02 FB | 	rdlong	arg01, fp
169a4     BB 01 00 FF 
169a8     7F 14 06 F6 | 	mov	arg02, ##@LR__5994
169ac     E4 06 B1 FD | 	call	#__system___string_cmp
169b0     00 FA 0D F2 | 	cmp	result1, #0 wz
169b4     14 4E 05 A1 |  if_e	add	fp, #20
169b8     A7 04 68 AC |  if_e	wrlong	#2, fp
169bc     14 4E 85 A1 |  if_e	sub	fp, #20
169c0                 | '   if t1.result.sresult="append" then mode=4
169c0     A7 12 02 FB | 	rdlong	arg01, fp
169c4     BB 01 00 FF 
169c8     85 14 06 F6 | 	mov	arg02, ##@LR__5995
169cc     C4 06 B1 FD | 	call	#__system___string_cmp
169d0     00 FA 0D F2 | 	cmp	result1, #0 wz
169d4     14 4E 05 A1 |  if_e	add	fp, #20
169d8     A7 08 68 AC |  if_e	wrlong	#4, fp
169dc     14 4E 85 A1 |  if_e	sub	fp, #20
169e0     14 00 90 FD | 	jmp	#LR__1834
169e4                 | LR__1833
169e4     A7 12 02 F6 | 	mov	arg01, fp
169e8     00 6F BF FD | 	call	#_converttoint
169ec     14 4E 05 F1 | 	add	fp, #20
169f0     A7 FA 61 FC | 	wrlong	result1, fp
169f4     14 4E 85 F1 | 	sub	fp, #20
169f8                 | LR__1834
169f8     0C 6D BF FD | 	call	#_pop
169fc     FF 16 02 F6 | 	mov	arg03, result3
16a00     A7 FA 61 FC | 	wrlong	result1, fp
16a04     04 4E 05 F1 | 	add	fp, #4
16a08     A7 FC 61 FC | 	wrlong	result2, fp
16a0c     04 4E 05 F1 | 	add	fp, #4
16a10     A7 16 62 FC | 	wrlong	arg03, fp
16a14                 | ' t1=pop()
16a14                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
16a14     08 4E 85 F1 | 	sub	fp, #8
16a18     2C 16 0E F2 | 	cmp	arg03, #44 wz
16a1c     44 00 90 AD |  if_e	jmp	#LR__1835
16a20     00 12 06 F6 | 	mov	arg01, #0
16a24     6C 63 B1 FD | 	call	#__system___getiolock_0616
16a28     FD 12 02 F6 | 	mov	arg01, result1
16a2c     3C 06 B1 FD | 	call	#__system___lockmem
16a30     BB 01 00 FF 
16a34     8C 14 06 F6 | 	mov	arg02, ##@LR__5996
16a38     00 12 06 F6 | 	mov	arg01, #0
16a3c     00 16 06 F6 | 	mov	arg03, #0
16a40     1C 13 B1 FD | 	call	#__system___basic_print_string
16a44     00 12 06 F6 | 	mov	arg01, #0
16a48     0A 14 06 F6 | 	mov	arg02, #10
16a4c     00 16 06 F6 | 	mov	arg03, #0
16a50     B4 12 B1 FD | 	call	#__system___basic_print_char
16a54     00 12 06 F6 | 	mov	arg01, #0
16a58     38 63 B1 FD | 	call	#__system___getiolock_0616
16a5c     FD 00 68 FC | 	wrlong	#0, result1
16a60     D8 00 90 FD | 	jmp	#LR__1842
16a64                 | LR__1835
16a64     A7 26 02 FB | 	rdlong	local01, fp
16a68     18 4E 05 F1 | 	add	fp, #24
16a6c     A7 26 62 FC | 	wrlong	local01, fp
16a70                 | ' channel  = t1.result.iresult
16a70                 | ' select case  mode
16a70     04 4E 85 F1 | 	sub	fp, #4
16a74     A7 28 02 FB | 	rdlong	local02, fp
16a78     14 4E 85 F1 | 	sub	fp, #20
16a7c     01 28 86 F1 | 	sub	local02, #1
16a80     04 28 26 F3 | 	fle	local02, #4
16a84     30 28 62 FD | 	jmprel	local02
16a88                 | LR__1836
16a88     10 00 90 FD | 	jmp	#LR__1837
16a8c     2C 00 90 FD | 	jmp	#LR__1838
16a90     68 00 90 FD | 	jmp	#LR__1840
16a94     44 00 90 FD | 	jmp	#LR__1839
16a98     60 00 90 FD | 	jmp	#LR__1840
16a9c                 | LR__1837
16a9c     18 4E 05 F1 | 	add	fp, #24
16aa0     A7 12 02 FB | 	rdlong	arg01, fp
16aa4     0C 4E 85 F1 | 	sub	fp, #12
16aa8     A7 14 02 FB | 	rdlong	arg02, fp
16aac     0C 4E 85 F1 | 	sub	fp, #12
16ab0     00 16 06 F6 | 	mov	arg03, #0
16ab4     B8 11 B1 FD | 	call	#__system___basic_open_string
16ab8     80 00 90 FD | 	jmp	#LR__1841
16abc                 | LR__1838
16abc     18 4E 05 F1 | 	add	fp, #24
16ac0     A7 12 02 FB | 	rdlong	arg01, fp
16ac4     0C 4E 85 F1 | 	sub	fp, #12
16ac8     A7 14 02 FB | 	rdlong	arg02, fp
16acc     0C 4E 85 F1 | 	sub	fp, #12
16ad0     0D 16 06 F6 | 	mov	arg03, #13
16ad4     98 11 B1 FD | 	call	#__system___basic_open_string
16ad8     60 00 90 FD | 	jmp	#LR__1841
16adc                 | LR__1839
16adc     18 4E 05 F1 | 	add	fp, #24
16ae0     A7 12 02 FB | 	rdlong	arg01, fp
16ae4     0C 4E 85 F1 | 	sub	fp, #12
16ae8     A7 14 02 FB | 	rdlong	arg02, fp
16aec     0C 4E 85 F1 | 	sub	fp, #12
16af0     25 16 06 F6 | 	mov	arg03, #37
16af4     78 11 B1 FD | 	call	#__system___basic_open_string
16af8     40 00 90 FD | 	jmp	#LR__1841
16afc                 | LR__1840
16afc     00 12 06 F6 | 	mov	arg01, #0
16b00     90 62 B1 FD | 	call	#__system___getiolock_0616
16b04     FD 12 02 F6 | 	mov	arg01, result1
16b08     60 05 B1 FD | 	call	#__system___lockmem
16b0c     BB 01 00 FF 
16b10     9E 14 06 F6 | 	mov	arg02, ##@LR__5997
16b14     00 12 06 F6 | 	mov	arg01, #0
16b18     00 16 06 F6 | 	mov	arg03, #0
16b1c     40 12 B1 FD | 	call	#__system___basic_print_string
16b20     00 12 06 F6 | 	mov	arg01, #0
16b24     0A 14 06 F6 | 	mov	arg02, #10
16b28     00 16 06 F6 | 	mov	arg03, #0
16b2c     D8 11 B1 FD | 	call	#__system___basic_print_char
16b30     00 12 06 F6 | 	mov	arg01, #0
16b34     5C 62 B1 FD | 	call	#__system___getiolock_0616
16b38     FD 00 68 FC | 	wrlong	#0, result1
16b3c                 | LR__1841
16b3c                 | LR__1842
16b3c     A7 F0 03 F6 | 	mov	ptra, fp
16b40     B2 00 A0 FD | 	call	#popregs_
16b44                 | _do_open_ret
16b44     2D 00 64 FD | 	ret
16b48                 | 
16b48                 | ' 
16b48                 | ' ' ------------------ padh
16b48                 | ' 
16b48                 | ' sub do_padh
16b48                 | _do_padh
16b48     01 4A 05 F6 | 	mov	COUNT_, #1
16b4c     A8 00 A0 FD | 	call	#pushregs_
16b50     14 F0 07 F1 | 	add	ptra, #20
16b54     4A 00 00 FF 
16b58     80 E4 05 F1 | 	add	objptr, ##38016
16b5c     F2 26 02 FB | 	rdlong	local01, objptr
16b60     13 17 02 F6 | 	mov	arg03, local01
16b64     01 16 66 F0 | 	shl	arg03, #1
16b68     13 17 02 F1 | 	add	arg03, local01
16b6c     02 16 66 F0 | 	shl	arg03, #2
16b70     03 00 00 FF 
16b74     04 E4 85 F1 | 	sub	objptr, ##1540
16b78     F2 16 02 F1 | 	add	arg03, objptr
16b7c     0B 17 02 FB | 	rdlong	arg03, arg03
16b80     0C 4E 05 F1 | 	add	fp, #12
16b84     A7 16 62 FC | 	wrlong	arg03, fp
16b88                 | ' 
16b88                 | ' numpar=compiledline(lineptr_e).result.uresult
16b88                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
16b88     0C 4E 85 F1 | 	sub	fp, #12
16b8c     02 16 16 F2 | 	cmp	arg03, #2 wc
16b90     47 00 00 FF 
16b94     7C E4 85 F1 | 	sub	objptr, ##36476
16b98     40 00 90 CD |  if_b	jmp	#LR__1850
16b9c     00 12 06 F6 | 	mov	arg01, #0
16ba0     F0 61 B1 FD | 	call	#__system___getiolock_0616
16ba4     FD 12 02 F6 | 	mov	arg01, result1
16ba8     C0 04 B1 FD | 	call	#__system___lockmem
16bac     BB 01 00 FF 
16bb0     B1 14 06 F6 | 	mov	arg02, ##@LR__5998
16bb4     00 12 06 F6 | 	mov	arg01, #0
16bb8     00 16 06 F6 | 	mov	arg03, #0
16bbc     A0 11 B1 FD | 	call	#__system___basic_print_string
16bc0     00 12 06 F6 | 	mov	arg01, #0
16bc4     CC 61 B1 FD | 	call	#__system___getiolock_0616
16bc8     FD 00 68 FC | 	wrlong	#0, result1
16bcc     27 12 06 F6 | 	mov	arg01, #39
16bd0     00 14 06 F6 | 	mov	arg02, #0
16bd4     E8 C9 B0 FD | 	call	#_printerror
16bd8     F0 00 90 FD | 	jmp	#LR__1854
16bdc                 | LR__1850
16bdc                 | ' if numpar=0 then 
16bdc     0C 4E 05 F1 | 	add	fp, #12
16be0     A7 FE 09 FB | 	rdlong	result3, fp wz
16be4     0C 4E 85 F1 | 	sub	fp, #12
16be8     30 00 90 5D |  if_ne	jmp	#LR__1851
16bec     51 00 00 FF 
16bf0     AC E5 05 F1 | 	add	objptr, ##41900
16bf4     F2 26 02 FB | 	rdlong	local01, objptr
16bf8     51 00 00 FF 
16bfc     AC E5 85 F1 | 	sub	objptr, ##41900
16c00     A7 26 62 FC | 	wrlong	local01, fp
16c04     08 4E 05 F1 | 	add	fp, #8
16c08     A7 38 68 FC | 	wrlong	#28, fp
16c0c     08 4E 85 F1 | 	sub	fp, #8
16c10     A7 12 02 F6 | 	mov	arg01, fp
16c14     88 6B BF FD | 	call	#_push
16c18                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
16c18     B0 00 90 FD | 	jmp	#LR__1854
16c1c                 | LR__1851
16c1c     E8 6A BF FD | 	call	#_pop
16c20     A7 FA 61 FC | 	wrlong	result1, fp
16c24     04 4E 05 F1 | 	add	fp, #4
16c28     A7 FC 61 FC | 	wrlong	result2, fp
16c2c     04 4E 05 F1 | 	add	fp, #4
16c30     A7 FE 61 FC | 	wrlong	result3, fp
16c34                 | ' t1=pop()
16c34                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16c34     08 4E 85 F1 | 	sub	fp, #8
16c38     1C FE 0D F2 | 	cmp	result3, #28 wz
16c3c     08 4E 05 51 |  if_ne	add	fp, #8
16c40     A7 26 02 5B |  if_ne	rdlong	local01, fp
16c44     08 4E 85 51 |  if_ne	sub	fp, #8
16c48     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16c4c     70 00 90 5D |  if_ne	jmp	#LR__1853
16c50     A7 26 02 FB | 	rdlong	local01, fp
16c54     52 00 00 FF 
16c58     08 E5 05 F1 | 	add	objptr, ##42248
16c5c     F2 26 62 FC | 	wrlong	local01, objptr
16c60                 | '   q=t1.result.uresult
16c60                 | '   if q<7 then 
16c60     52 00 00 FF 
16c64     08 E5 85 F1 | 	sub	objptr, ##42248
16c68     07 26 56 F2 | 	cmps	local01, #7 wc
16c6c     40 00 90 3D |  if_ae	jmp	#LR__1852
16c70     52 00 00 FF 
16c74     08 E5 05 F1 | 	add	objptr, ##42248
16c78     F2 26 02 FB | 	rdlong	local01, objptr
16c7c     02 26 66 F0 | 	shl	local01, #2
16c80     5C E5 85 F1 | 	sub	objptr, #348
16c84     F2 26 02 F1 | 	add	local01, objptr
16c88     13 27 02 FB | 	rdlong	local01, local01
16c8c     A7 26 62 FC | 	wrlong	local01, fp
16c90     08 4E 05 F1 | 	add	fp, #8
16c94     A7 38 68 FC | 	wrlong	#28, fp
16c98     08 4E 85 F1 | 	sub	fp, #8
16c9c     A7 12 02 F6 | 	mov	arg01, fp
16ca0     51 00 00 FF 
16ca4     AC E5 85 F1 | 	sub	objptr, ##41900
16ca8     F4 6A BF FD | 	call	#_push
16cac                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16cac     1C 00 90 FD | 	jmp	#LR__1854
16cb0                 | LR__1852
16cb0     29 12 06 F6 | 	mov	arg01, #41
16cb4     00 14 06 F6 | 	mov	arg02, #0
16cb8     04 C9 B0 FD | 	call	#_printerror
16cbc                 | '      printerror(41) : return
16cbc     0C 00 90 FD | 	jmp	#LR__1854
16cc0                 | LR__1853
16cc0     29 12 06 F6 | 	mov	arg01, #41
16cc4     00 14 06 F6 | 	mov	arg02, #0
16cc8     F4 C8 B0 FD | 	call	#_printerror
16ccc                 | LR__1854
16ccc     A7 F0 03 F6 | 	mov	ptra, fp
16cd0     B2 00 A0 FD | 	call	#popregs_
16cd4                 | _do_padh_ret
16cd4     2D 00 64 FD | 	ret
16cd8                 | 
16cd8                 | ' 
16cd8                 | ' ' ------------------ padrx
16cd8                 | ' 
16cd8                 | ' sub do_padrx
16cd8                 | _do_padrx
16cd8     02 4A 05 F6 | 	mov	COUNT_, #2
16cdc     A8 00 A0 FD | 	call	#pushregs_
16ce0     14 F0 07 F1 | 	add	ptra, #20
16ce4     4A 00 00 FF 
16ce8     80 E4 05 F1 | 	add	objptr, ##38016
16cec     F2 26 02 FB | 	rdlong	local01, objptr
16cf0     13 17 02 F6 | 	mov	arg03, local01
16cf4     01 16 66 F0 | 	shl	arg03, #1
16cf8     13 17 02 F1 | 	add	arg03, local01
16cfc     02 16 66 F0 | 	shl	arg03, #2
16d00     03 00 00 FF 
16d04     04 E4 85 F1 | 	sub	objptr, ##1540
16d08     F2 16 02 F1 | 	add	arg03, objptr
16d0c     0B 17 02 FB | 	rdlong	arg03, arg03
16d10     0C 4E 05 F1 | 	add	fp, #12
16d14     A7 16 62 FC | 	wrlong	arg03, fp
16d18                 | ' 
16d18                 | ' numpar=compiledline(lineptr_e).result.uresult
16d18                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
16d18     0C 4E 85 F1 | 	sub	fp, #12
16d1c     02 16 16 F2 | 	cmp	arg03, #2 wc
16d20     47 00 00 FF 
16d24     7C E4 85 F1 | 	sub	objptr, ##36476
16d28     40 00 90 CD |  if_b	jmp	#LR__1860
16d2c     00 12 06 F6 | 	mov	arg01, #0
16d30     60 60 B1 FD | 	call	#__system___getiolock_0616
16d34     FD 12 02 F6 | 	mov	arg01, result1
16d38     30 03 B1 FD | 	call	#__system___lockmem
16d3c     BB 01 00 FF 
16d40     B8 14 06 F6 | 	mov	arg02, ##@LR__5999
16d44     00 12 06 F6 | 	mov	arg01, #0
16d48     00 16 06 F6 | 	mov	arg03, #0
16d4c     10 10 B1 FD | 	call	#__system___basic_print_string
16d50     00 12 06 F6 | 	mov	arg01, #0
16d54     3C 60 B1 FD | 	call	#__system___getiolock_0616
16d58     FD 00 68 FC | 	wrlong	#0, result1
16d5c     27 12 06 F6 | 	mov	arg01, #39
16d60     00 14 06 F6 | 	mov	arg02, #0
16d64     58 C8 B0 FD | 	call	#_printerror
16d68     E0 01 90 FD | 	jmp	#LR__1864
16d6c                 | LR__1860
16d6c                 | ' if numpar=0 then 
16d6c     0C 4E 05 F1 | 	add	fp, #12
16d70     A7 FE 09 FB | 	rdlong	result3, fp wz
16d74     0C 4E 85 F1 | 	sub	fp, #12
16d78     A8 00 90 5D |  if_ne	jmp	#LR__1861
16d7c     00 C0 1B FF 
16d80     00 26 06 F6 | 	mov	local01, ##931135488
16d84     51 00 00 FF 
16d88     C8 E5 05 F1 | 	add	objptr, ##41928
16d8c     F2 12 02 FB | 	rdlong	arg01, objptr
16d90     51 00 00 FF 
16d94     C8 E5 85 F1 | 	sub	objptr, ##41928
16d98     09 13 52 F6 | 	abs	arg01, arg01 wc
16d9c     1F 28 C6 C9 |  if_b	decod	local02, #31
16da0     00 28 06 36 |  if_ae	mov	local02, #0
16da4     38 2D B1 FD | 	call	#__system___float_fromuns
16da8     14 FB 61 F5 | 	xor	result1, local02
16dac     FD 12 02 F6 | 	mov	arg01, result1
16db0     FF 7F 23 FF 
16db4     00 14 06 F6 | 	mov	arg02, ##1191181824
16db8     2C 33 B1 FD | 	call	#__system___float_div
16dbc     FD 14 02 F6 | 	mov	arg02, result1
16dc0     13 13 02 F6 | 	mov	arg01, local01
16dc4     4C 2D B1 FD | 	call	#__system___float_add
16dc8     10 4E 05 F1 | 	add	fp, #16
16dcc     A7 FA 61 FC | 	wrlong	result1, fp
16dd0                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16dd0     10 4E 85 F1 | 	sub	fp, #16
16dd4     1F FA 05 F4 | 	bitl	result1, #31
16dd8     FD 12 02 F6 | 	mov	arg01, result1
16ddc     89 41 1D FF 
16de0     6F 14 06 F6 | 	mov	arg02, ##981668463
16de4     01 16 06 F6 | 	mov	arg03, #1
16de8     2C 35 B1 FD | 	call	#__system___float_cmp
16dec     00 FA 55 F2 | 	cmps	result1, #0 wc
16df0     10 4E 05 C1 |  if_b	add	fp, #16
16df4     A7 00 68 CC |  if_b	wrlong	#0, fp
16df8     10 4E 85 C1 |  if_b	sub	fp, #16
16dfc     10 4E 05 F1 | 	add	fp, #16
16e00     A7 26 02 FB | 	rdlong	local01, fp
16e04     10 4E 85 F1 | 	sub	fp, #16
16e08     A7 26 62 FC | 	wrlong	local01, fp
16e0c     08 4E 05 F1 | 	add	fp, #8
16e10     A7 3C 68 FC | 	wrlong	#30, fp
16e14     08 4E 85 F1 | 	sub	fp, #8
16e18     A7 12 02 F6 | 	mov	arg01, fp
16e1c     80 69 BF FD | 	call	#_push
16e20                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16e20     28 01 90 FD | 	jmp	#LR__1864
16e24                 | LR__1861
16e24     E0 68 BF FD | 	call	#_pop
16e28     A7 FA 61 FC | 	wrlong	result1, fp
16e2c     04 4E 05 F1 | 	add	fp, #4
16e30     A7 FC 61 FC | 	wrlong	result2, fp
16e34     04 4E 05 F1 | 	add	fp, #4
16e38     A7 FE 61 FC | 	wrlong	result3, fp
16e3c                 | ' t1=pop()
16e3c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16e3c     08 4E 85 F1 | 	sub	fp, #8
16e40     1C FE 0D F2 | 	cmp	result3, #28 wz
16e44     08 4E 05 51 |  if_ne	add	fp, #8
16e48     A7 26 02 5B |  if_ne	rdlong	local01, fp
16e4c     08 4E 85 51 |  if_ne	sub	fp, #8
16e50     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16e54     E8 00 90 5D |  if_ne	jmp	#LR__1863
16e58     A7 26 02 FB | 	rdlong	local01, fp
16e5c     52 00 00 FF 
16e60     08 E5 05 F1 | 	add	objptr, ##42248
16e64     F2 26 62 FC | 	wrlong	local01, objptr
16e68                 | '   q=t1.result.uresult
16e68                 | '   if q<7 then 
16e68     52 00 00 FF 
16e6c     08 E5 85 F1 | 	sub	objptr, ##42248
16e70     07 26 56 F2 | 	cmps	local01, #7 wc
16e74     B8 00 90 3D |  if_ae	jmp	#LR__1862
16e78     00 C0 1B FF 
16e7c     00 26 06 F6 | 	mov	local01, ##931135488
16e80     52 00 00 FF 
16e84     08 E5 05 F1 | 	add	objptr, ##42248
16e88     F2 16 02 FB | 	rdlong	arg03, objptr
16e8c     02 16 66 F0 | 	shl	arg03, #2
16e90     40 E5 85 F1 | 	sub	objptr, #320
16e94     F2 16 02 F1 | 	add	arg03, objptr
16e98     0B 13 02 FB | 	rdlong	arg01, arg03
16e9c     51 00 00 FF 
16ea0     C8 E5 85 F1 | 	sub	objptr, ##41928
16ea4     09 13 52 F6 | 	abs	arg01, arg01 wc
16ea8     1F 28 C6 C9 |  if_b	decod	local02, #31
16eac     00 28 06 36 |  if_ae	mov	local02, #0
16eb0     2C 2C B1 FD | 	call	#__system___float_fromuns
16eb4     14 FB 61 F5 | 	xor	result1, local02
16eb8     FD 12 02 F6 | 	mov	arg01, result1
16ebc     FF 7F 23 FF 
16ec0     00 14 06 F6 | 	mov	arg02, ##1191181824
16ec4     20 32 B1 FD | 	call	#__system___float_div
16ec8     FD 14 02 F6 | 	mov	arg02, result1
16ecc     13 13 02 F6 | 	mov	arg01, local01
16ed0     40 2C B1 FD | 	call	#__system___float_add
16ed4     10 4E 05 F1 | 	add	fp, #16
16ed8     A7 FA 61 FC | 	wrlong	result1, fp
16edc                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16edc     10 4E 85 F1 | 	sub	fp, #16
16ee0     1F FA 05 F4 | 	bitl	result1, #31
16ee4     FD 12 02 F6 | 	mov	arg01, result1
16ee8     89 41 1D FF 
16eec     6F 14 06 F6 | 	mov	arg02, ##981668463
16ef0     01 16 06 F6 | 	mov	arg03, #1
16ef4     20 34 B1 FD | 	call	#__system___float_cmp
16ef8     00 FA 55 F2 | 	cmps	result1, #0 wc
16efc     10 4E 05 C1 |  if_b	add	fp, #16
16f00     A7 00 68 CC |  if_b	wrlong	#0, fp
16f04     10 4E 85 C1 |  if_b	sub	fp, #16
16f08     10 4E 05 F1 | 	add	fp, #16
16f0c     A7 26 02 FB | 	rdlong	local01, fp
16f10     10 4E 85 F1 | 	sub	fp, #16
16f14     A7 26 62 FC | 	wrlong	local01, fp
16f18     08 4E 05 F1 | 	add	fp, #8
16f1c     A7 3C 68 FC | 	wrlong	#30, fp
16f20     08 4E 85 F1 | 	sub	fp, #8
16f24     A7 12 02 F6 | 	mov	arg01, fp
16f28     74 68 BF FD | 	call	#_push
16f2c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f2c     1C 00 90 FD | 	jmp	#LR__1864
16f30                 | LR__1862
16f30     29 12 06 F6 | 	mov	arg01, #41
16f34     00 14 06 F6 | 	mov	arg02, #0
16f38     84 C6 B0 FD | 	call	#_printerror
16f3c                 | '      printerror(41) : return
16f3c     0C 00 90 FD | 	jmp	#LR__1864
16f40                 | LR__1863
16f40     29 12 06 F6 | 	mov	arg01, #41
16f44     00 14 06 F6 | 	mov	arg02, #0
16f48     74 C6 B0 FD | 	call	#_printerror
16f4c                 | LR__1864
16f4c     A7 F0 03 F6 | 	mov	ptra, fp
16f50     B2 00 A0 FD | 	call	#popregs_
16f54                 | _do_padrx_ret
16f54     2D 00 64 FD | 	ret
16f58                 | 
16f58                 | ' 
16f58                 | ' ' ------------------ padry
16f58                 | ' 
16f58                 | ' sub do_padry
16f58                 | _do_padry
16f58     02 4A 05 F6 | 	mov	COUNT_, #2
16f5c     A8 00 A0 FD | 	call	#pushregs_
16f60     14 F0 07 F1 | 	add	ptra, #20
16f64     4A 00 00 FF 
16f68     80 E4 05 F1 | 	add	objptr, ##38016
16f6c     F2 26 02 FB | 	rdlong	local01, objptr
16f70     13 17 02 F6 | 	mov	arg03, local01
16f74     01 16 66 F0 | 	shl	arg03, #1
16f78     13 17 02 F1 | 	add	arg03, local01
16f7c     02 16 66 F0 | 	shl	arg03, #2
16f80     03 00 00 FF 
16f84     04 E4 85 F1 | 	sub	objptr, ##1540
16f88     F2 16 02 F1 | 	add	arg03, objptr
16f8c     0B 17 02 FB | 	rdlong	arg03, arg03
16f90     0C 4E 05 F1 | 	add	fp, #12
16f94     A7 16 62 FC | 	wrlong	arg03, fp
16f98                 | ' 
16f98                 | ' numpar=compiledline(lineptr_e).result.uresult
16f98                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16f98     0C 4E 85 F1 | 	sub	fp, #12
16f9c     02 16 16 F2 | 	cmp	arg03, #2 wc
16fa0     47 00 00 FF 
16fa4     7C E4 85 F1 | 	sub	objptr, ##36476
16fa8     40 00 90 CD |  if_b	jmp	#LR__1870
16fac     00 12 06 F6 | 	mov	arg01, #0
16fb0     E0 5D B1 FD | 	call	#__system___getiolock_0616
16fb4     FD 12 02 F6 | 	mov	arg01, result1
16fb8     B0 00 B1 FD | 	call	#__system___lockmem
16fbc     BB 01 00 FF 
16fc0     C0 14 06 F6 | 	mov	arg02, ##@LR__6000
16fc4     00 12 06 F6 | 	mov	arg01, #0
16fc8     00 16 06 F6 | 	mov	arg03, #0
16fcc     90 0D B1 FD | 	call	#__system___basic_print_string
16fd0     00 12 06 F6 | 	mov	arg01, #0
16fd4     BC 5D B1 FD | 	call	#__system___getiolock_0616
16fd8     FD 00 68 FC | 	wrlong	#0, result1
16fdc     27 12 06 F6 | 	mov	arg01, #39
16fe0     00 14 06 F6 | 	mov	arg02, #0
16fe4     D8 C5 B0 FD | 	call	#_printerror
16fe8     E0 01 90 FD | 	jmp	#LR__1874
16fec                 | LR__1870
16fec                 | ' if numpar=0 then 
16fec     0C 4E 05 F1 | 	add	fp, #12
16ff0     A7 FE 09 FB | 	rdlong	result3, fp wz
16ff4     0C 4E 85 F1 | 	sub	fp, #12
16ff8     A8 00 90 5D |  if_ne	jmp	#LR__1871
16ffc     00 C0 1B FF 
17000     00 26 06 F6 | 	mov	local01, ##931135488
17004     51 00 00 FF 
17008     E4 E5 05 F1 | 	add	objptr, ##41956
1700c     F2 12 02 FB | 	rdlong	arg01, objptr
17010     51 00 00 FF 
17014     E4 E5 85 F1 | 	sub	objptr, ##41956
17018     09 13 52 F6 | 	abs	arg01, arg01 wc
1701c     1F 28 C6 C9 |  if_b	decod	local02, #31
17020     00 28 06 36 |  if_ae	mov	local02, #0
17024     B8 2A B1 FD | 	call	#__system___float_fromuns
17028     14 FB 61 F5 | 	xor	result1, local02
1702c     FD 12 02 F6 | 	mov	arg01, result1
17030     FF 7F 23 FF 
17034     00 14 06 F6 | 	mov	arg02, ##1191181824
17038     AC 30 B1 FD | 	call	#__system___float_div
1703c     FD 14 02 F6 | 	mov	arg02, result1
17040     13 13 02 F6 | 	mov	arg01, local01
17044     CC 2A B1 FD | 	call	#__system___float_add
17048     10 4E 05 F1 | 	add	fp, #16
1704c     A7 FA 61 FC | 	wrlong	result1, fp
17050                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17050     10 4E 85 F1 | 	sub	fp, #16
17054     1F FA 05 F4 | 	bitl	result1, #31
17058     FD 12 02 F6 | 	mov	arg01, result1
1705c     89 41 1D FF 
17060     6F 14 06 F6 | 	mov	arg02, ##981668463
17064     01 16 06 F6 | 	mov	arg03, #1
17068     AC 32 B1 FD | 	call	#__system___float_cmp
1706c     00 FA 55 F2 | 	cmps	result1, #0 wc
17070     10 4E 05 C1 |  if_b	add	fp, #16
17074     A7 00 68 CC |  if_b	wrlong	#0, fp
17078     10 4E 85 C1 |  if_b	sub	fp, #16
1707c     10 4E 05 F1 | 	add	fp, #16
17080     A7 26 02 FB | 	rdlong	local01, fp
17084     10 4E 85 F1 | 	sub	fp, #16
17088     A7 26 62 FC | 	wrlong	local01, fp
1708c     08 4E 05 F1 | 	add	fp, #8
17090     A7 3C 68 FC | 	wrlong	#30, fp
17094     08 4E 85 F1 | 	sub	fp, #8
17098     A7 12 02 F6 | 	mov	arg01, fp
1709c     00 67 BF FD | 	call	#_push
170a0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
170a0     28 01 90 FD | 	jmp	#LR__1874
170a4                 | LR__1871
170a4     60 66 BF FD | 	call	#_pop
170a8     A7 FA 61 FC | 	wrlong	result1, fp
170ac     04 4E 05 F1 | 	add	fp, #4
170b0     A7 FC 61 FC | 	wrlong	result2, fp
170b4     04 4E 05 F1 | 	add	fp, #4
170b8     A7 FE 61 FC | 	wrlong	result3, fp
170bc                 | ' t1=pop()
170bc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
170bc     08 4E 85 F1 | 	sub	fp, #8
170c0     1C FE 0D F2 | 	cmp	result3, #28 wz
170c4     08 4E 05 51 |  if_ne	add	fp, #8
170c8     A7 26 02 5B |  if_ne	rdlong	local01, fp
170cc     08 4E 85 51 |  if_ne	sub	fp, #8
170d0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
170d4     E8 00 90 5D |  if_ne	jmp	#LR__1873
170d8     A7 26 02 FB | 	rdlong	local01, fp
170dc     52 00 00 FF 
170e0     08 E5 05 F1 | 	add	objptr, ##42248
170e4     F2 26 62 FC | 	wrlong	local01, objptr
170e8                 | '   q=t1.result.uresult
170e8                 | '   if q<7 then 
170e8     52 00 00 FF 
170ec     08 E5 85 F1 | 	sub	objptr, ##42248
170f0     07 26 56 F2 | 	cmps	local01, #7 wc
170f4     B8 00 90 3D |  if_ae	jmp	#LR__1872
170f8     00 C0 1B FF 
170fc     00 26 06 F6 | 	mov	local01, ##931135488
17100     52 00 00 FF 
17104     08 E5 05 F1 | 	add	objptr, ##42248
17108     F2 16 02 FB | 	rdlong	arg03, objptr
1710c     02 16 66 F0 | 	shl	arg03, #2
17110     24 E5 85 F1 | 	sub	objptr, #292
17114     F2 16 02 F1 | 	add	arg03, objptr
17118     0B 13 02 FB | 	rdlong	arg01, arg03
1711c     51 00 00 FF 
17120     E4 E5 85 F1 | 	sub	objptr, ##41956
17124     09 13 52 F6 | 	abs	arg01, arg01 wc
17128     1F 28 C6 C9 |  if_b	decod	local02, #31
1712c     00 28 06 36 |  if_ae	mov	local02, #0
17130     AC 29 B1 FD | 	call	#__system___float_fromuns
17134     14 FB 61 F5 | 	xor	result1, local02
17138     FD 12 02 F6 | 	mov	arg01, result1
1713c     FF 7F 23 FF 
17140     00 14 06 F6 | 	mov	arg02, ##1191181824
17144     A0 2F B1 FD | 	call	#__system___float_div
17148     FD 14 02 F6 | 	mov	arg02, result1
1714c     13 13 02 F6 | 	mov	arg01, local01
17150     C0 29 B1 FD | 	call	#__system___float_add
17154     10 4E 05 F1 | 	add	fp, #16
17158     A7 FA 61 FC | 	wrlong	result1, fp
1715c                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1715c     10 4E 85 F1 | 	sub	fp, #16
17160     1F FA 05 F4 | 	bitl	result1, #31
17164     FD 12 02 F6 | 	mov	arg01, result1
17168     89 41 1D FF 
1716c     6F 14 06 F6 | 	mov	arg02, ##981668463
17170     01 16 06 F6 | 	mov	arg03, #1
17174     A0 31 B1 FD | 	call	#__system___float_cmp
17178     00 FA 55 F2 | 	cmps	result1, #0 wc
1717c     10 4E 05 C1 |  if_b	add	fp, #16
17180     A7 00 68 CC |  if_b	wrlong	#0, fp
17184     10 4E 85 C1 |  if_b	sub	fp, #16
17188     10 4E 05 F1 | 	add	fp, #16
1718c     A7 26 02 FB | 	rdlong	local01, fp
17190     10 4E 85 F1 | 	sub	fp, #16
17194     A7 26 62 FC | 	wrlong	local01, fp
17198     08 4E 05 F1 | 	add	fp, #8
1719c     A7 3C 68 FC | 	wrlong	#30, fp
171a0     08 4E 85 F1 | 	sub	fp, #8
171a4     A7 12 02 F6 | 	mov	arg01, fp
171a8     F4 65 BF FD | 	call	#_push
171ac                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
171ac     1C 00 90 FD | 	jmp	#LR__1874
171b0                 | LR__1872
171b0     29 12 06 F6 | 	mov	arg01, #41
171b4     00 14 06 F6 | 	mov	arg02, #0
171b8     04 C4 B0 FD | 	call	#_printerror
171bc                 | '      printerror(41) : return
171bc     0C 00 90 FD | 	jmp	#LR__1874
171c0                 | LR__1873
171c0     29 12 06 F6 | 	mov	arg01, #41
171c4     00 14 06 F6 | 	mov	arg02, #0
171c8     F4 C3 B0 FD | 	call	#_printerror
171cc                 | LR__1874
171cc     A7 F0 03 F6 | 	mov	ptra, fp
171d0     B2 00 A0 FD | 	call	#popregs_
171d4                 | _do_padry_ret
171d4     2D 00 64 FD | 	ret
171d8                 | 
171d8                 | ' 
171d8                 | ' ' ------------------ padrz
171d8                 | ' 
171d8                 | ' sub do_padrz
171d8                 | _do_padrz
171d8     02 4A 05 F6 | 	mov	COUNT_, #2
171dc     A8 00 A0 FD | 	call	#pushregs_
171e0     14 F0 07 F1 | 	add	ptra, #20
171e4     4A 00 00 FF 
171e8     80 E4 05 F1 | 	add	objptr, ##38016
171ec     F2 26 02 FB | 	rdlong	local01, objptr
171f0     13 17 02 F6 | 	mov	arg03, local01
171f4     01 16 66 F0 | 	shl	arg03, #1
171f8     13 17 02 F1 | 	add	arg03, local01
171fc     02 16 66 F0 | 	shl	arg03, #2
17200     03 00 00 FF 
17204     04 E4 85 F1 | 	sub	objptr, ##1540
17208     F2 16 02 F1 | 	add	arg03, objptr
1720c     0B 17 02 FB | 	rdlong	arg03, arg03
17210     0C 4E 05 F1 | 	add	fp, #12
17214     A7 16 62 FC | 	wrlong	arg03, fp
17218                 | ' 
17218                 | ' numpar=compiledline(lineptr_e).result.uresult
17218                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
17218     0C 4E 85 F1 | 	sub	fp, #12
1721c     02 16 16 F2 | 	cmp	arg03, #2 wc
17220     47 00 00 FF 
17224     7C E4 85 F1 | 	sub	objptr, ##36476
17228     40 00 90 CD |  if_b	jmp	#LR__1880
1722c     00 12 06 F6 | 	mov	arg01, #0
17230     60 5B B1 FD | 	call	#__system___getiolock_0616
17234     FD 12 02 F6 | 	mov	arg01, result1
17238     30 FE B0 FD | 	call	#__system___lockmem
1723c     BB 01 00 FF 
17240     C8 14 06 F6 | 	mov	arg02, ##@LR__6001
17244     00 12 06 F6 | 	mov	arg01, #0
17248     00 16 06 F6 | 	mov	arg03, #0
1724c     10 0B B1 FD | 	call	#__system___basic_print_string
17250     00 12 06 F6 | 	mov	arg01, #0
17254     3C 5B B1 FD | 	call	#__system___getiolock_0616
17258     FD 00 68 FC | 	wrlong	#0, result1
1725c     27 12 06 F6 | 	mov	arg01, #39
17260     00 14 06 F6 | 	mov	arg02, #0
17264     58 C3 B0 FD | 	call	#_printerror
17268     E0 01 90 FD | 	jmp	#LR__1884
1726c                 | LR__1880
1726c                 | ' if numpar=0 then 
1726c     0C 4E 05 F1 | 	add	fp, #12
17270     A7 FE 09 FB | 	rdlong	result3, fp wz
17274     0C 4E 85 F1 | 	sub	fp, #12
17278     A8 00 90 5D |  if_ne	jmp	#LR__1881
1727c     00 C0 1B FF 
17280     00 26 06 F6 | 	mov	local01, ##931135488
17284     52 00 00 FF 
17288     00 E4 05 F1 | 	add	objptr, ##41984
1728c     F2 12 02 FB | 	rdlong	arg01, objptr
17290     52 00 00 FF 
17294     00 E4 85 F1 | 	sub	objptr, ##41984
17298     09 13 52 F6 | 	abs	arg01, arg01 wc
1729c     1F 28 C6 C9 |  if_b	decod	local02, #31
172a0     00 28 06 36 |  if_ae	mov	local02, #0
172a4     38 28 B1 FD | 	call	#__system___float_fromuns
172a8     14 FB 61 F5 | 	xor	result1, local02
172ac     FD 12 02 F6 | 	mov	arg01, result1
172b0     FF 7F 23 FF 
172b4     00 14 06 F6 | 	mov	arg02, ##1191181824
172b8     2C 2E B1 FD | 	call	#__system___float_div
172bc     FD 14 02 F6 | 	mov	arg02, result1
172c0     13 13 02 F6 | 	mov	arg01, local01
172c4     4C 28 B1 FD | 	call	#__system___float_add
172c8     10 4E 05 F1 | 	add	fp, #16
172cc     A7 FA 61 FC | 	wrlong	result1, fp
172d0                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
172d0     10 4E 85 F1 | 	sub	fp, #16
172d4     1F FA 05 F4 | 	bitl	result1, #31
172d8     FD 12 02 F6 | 	mov	arg01, result1
172dc     89 41 1D FF 
172e0     6F 14 06 F6 | 	mov	arg02, ##981668463
172e4     01 16 06 F6 | 	mov	arg03, #1
172e8     2C 30 B1 FD | 	call	#__system___float_cmp
172ec     00 FA 55 F2 | 	cmps	result1, #0 wc
172f0     10 4E 05 C1 |  if_b	add	fp, #16
172f4     A7 00 68 CC |  if_b	wrlong	#0, fp
172f8     10 4E 85 C1 |  if_b	sub	fp, #16
172fc     10 4E 05 F1 | 	add	fp, #16
17300     A7 26 02 FB | 	rdlong	local01, fp
17304     10 4E 85 F1 | 	sub	fp, #16
17308     A7 26 62 FC | 	wrlong	local01, fp
1730c     08 4E 05 F1 | 	add	fp, #8
17310     A7 3C 68 FC | 	wrlong	#30, fp
17314     08 4E 85 F1 | 	sub	fp, #8
17318     A7 12 02 F6 | 	mov	arg01, fp
1731c     80 64 BF FD | 	call	#_push
17320                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17320     28 01 90 FD | 	jmp	#LR__1884
17324                 | LR__1881
17324     E0 63 BF FD | 	call	#_pop
17328     A7 FA 61 FC | 	wrlong	result1, fp
1732c     04 4E 05 F1 | 	add	fp, #4
17330     A7 FC 61 FC | 	wrlong	result2, fp
17334     04 4E 05 F1 | 	add	fp, #4
17338     A7 FE 61 FC | 	wrlong	result3, fp
1733c                 | ' t1=pop()
1733c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1733c     08 4E 85 F1 | 	sub	fp, #8
17340     1C FE 0D F2 | 	cmp	result3, #28 wz
17344     08 4E 05 51 |  if_ne	add	fp, #8
17348     A7 26 02 5B |  if_ne	rdlong	local01, fp
1734c     08 4E 85 51 |  if_ne	sub	fp, #8
17350     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17354     E8 00 90 5D |  if_ne	jmp	#LR__1883
17358     A7 26 02 FB | 	rdlong	local01, fp
1735c     52 00 00 FF 
17360     08 E5 05 F1 | 	add	objptr, ##42248
17364     F2 26 62 FC | 	wrlong	local01, objptr
17368                 | '   q=t1.result.uresult
17368                 | '   if q<7 then 
17368     52 00 00 FF 
1736c     08 E5 85 F1 | 	sub	objptr, ##42248
17370     07 26 56 F2 | 	cmps	local01, #7 wc
17374     B8 00 90 3D |  if_ae	jmp	#LR__1882
17378     00 C0 1B FF 
1737c     00 26 06 F6 | 	mov	local01, ##931135488
17380     52 00 00 FF 
17384     08 E5 05 F1 | 	add	objptr, ##42248
17388     F2 16 02 FB | 	rdlong	arg03, objptr
1738c     02 16 66 F0 | 	shl	arg03, #2
17390     08 E5 85 F1 | 	sub	objptr, #264
17394     F2 16 02 F1 | 	add	arg03, objptr
17398     0B 13 02 FB | 	rdlong	arg01, arg03
1739c     52 00 00 FF 
173a0     00 E4 85 F1 | 	sub	objptr, ##41984
173a4     09 13 52 F6 | 	abs	arg01, arg01 wc
173a8     1F 28 C6 C9 |  if_b	decod	local02, #31
173ac     00 28 06 36 |  if_ae	mov	local02, #0
173b0     2C 27 B1 FD | 	call	#__system___float_fromuns
173b4     14 FB 61 F5 | 	xor	result1, local02
173b8     FD 12 02 F6 | 	mov	arg01, result1
173bc     FF 7F 23 FF 
173c0     00 14 06 F6 | 	mov	arg02, ##1191181824
173c4     20 2D B1 FD | 	call	#__system___float_div
173c8     FD 14 02 F6 | 	mov	arg02, result1
173cc     13 13 02 F6 | 	mov	arg01, local01
173d0     40 27 B1 FD | 	call	#__system___float_add
173d4     10 4E 05 F1 | 	add	fp, #16
173d8     A7 FA 61 FC | 	wrlong	result1, fp
173dc                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
173dc     10 4E 85 F1 | 	sub	fp, #16
173e0     1F FA 05 F4 | 	bitl	result1, #31
173e4     FD 12 02 F6 | 	mov	arg01, result1
173e8     89 41 1D FF 
173ec     6F 14 06 F6 | 	mov	arg02, ##981668463
173f0     01 16 06 F6 | 	mov	arg03, #1
173f4     20 2F B1 FD | 	call	#__system___float_cmp
173f8     00 FA 55 F2 | 	cmps	result1, #0 wc
173fc     10 4E 05 C1 |  if_b	add	fp, #16
17400     A7 00 68 CC |  if_b	wrlong	#0, fp
17404     10 4E 85 C1 |  if_b	sub	fp, #16
17408     10 4E 05 F1 | 	add	fp, #16
1740c     A7 26 02 FB | 	rdlong	local01, fp
17410     10 4E 85 F1 | 	sub	fp, #16
17414     A7 26 62 FC | 	wrlong	local01, fp
17418     08 4E 05 F1 | 	add	fp, #8
1741c     A7 3C 68 FC | 	wrlong	#30, fp
17420     08 4E 85 F1 | 	sub	fp, #8
17424     A7 12 02 F6 | 	mov	arg01, fp
17428     74 63 BF FD | 	call	#_push
1742c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1742c     1C 00 90 FD | 	jmp	#LR__1884
17430                 | LR__1882
17430     29 12 06 F6 | 	mov	arg01, #41
17434     00 14 06 F6 | 	mov	arg02, #0
17438     84 C1 B0 FD | 	call	#_printerror
1743c                 | '      printerror(41) : return
1743c     0C 00 90 FD | 	jmp	#LR__1884
17440                 | LR__1883
17440     29 12 06 F6 | 	mov	arg01, #41
17444     00 14 06 F6 | 	mov	arg02, #0
17448     74 C1 B0 FD | 	call	#_printerror
1744c                 | LR__1884
1744c     A7 F0 03 F6 | 	mov	ptra, fp
17450     B2 00 A0 FD | 	call	#popregs_
17454                 | _do_padrz_ret
17454     2D 00 64 FD | 	ret
17458                 | 
17458                 | ' ' ------------------ padx
17458                 | ' 
17458                 | ' sub do_padx
17458                 | _do_padx
17458     02 4A 05 F6 | 	mov	COUNT_, #2
1745c     A8 00 A0 FD | 	call	#pushregs_
17460     14 F0 07 F1 | 	add	ptra, #20
17464     4A 00 00 FF 
17468     80 E4 05 F1 | 	add	objptr, ##38016
1746c     F2 26 02 FB | 	rdlong	local01, objptr
17470     13 17 02 F6 | 	mov	arg03, local01
17474     01 16 66 F0 | 	shl	arg03, #1
17478     13 17 02 F1 | 	add	arg03, local01
1747c     02 16 66 F0 | 	shl	arg03, #2
17480     03 00 00 FF 
17484     04 E4 85 F1 | 	sub	objptr, ##1540
17488     F2 16 02 F1 | 	add	arg03, objptr
1748c     0B 17 02 FB | 	rdlong	arg03, arg03
17490     0C 4E 05 F1 | 	add	fp, #12
17494     A7 16 62 FC | 	wrlong	arg03, fp
17498                 | ' 
17498                 | ' numpar=compiledline(lineptr_e).result.uresult
17498                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
17498     0C 4E 85 F1 | 	sub	fp, #12
1749c     02 16 16 F2 | 	cmp	arg03, #2 wc
174a0     47 00 00 FF 
174a4     7C E4 85 F1 | 	sub	objptr, ##36476
174a8     40 00 90 CD |  if_b	jmp	#LR__1890
174ac     00 12 06 F6 | 	mov	arg01, #0
174b0     E0 58 B1 FD | 	call	#__system___getiolock_0616
174b4     FD 12 02 F6 | 	mov	arg01, result1
174b8     B0 FB B0 FD | 	call	#__system___lockmem
174bc     BB 01 00 FF 
174c0     D0 14 06 F6 | 	mov	arg02, ##@LR__6002
174c4     00 12 06 F6 | 	mov	arg01, #0
174c8     00 16 06 F6 | 	mov	arg03, #0
174cc     90 08 B1 FD | 	call	#__system___basic_print_string
174d0     00 12 06 F6 | 	mov	arg01, #0
174d4     BC 58 B1 FD | 	call	#__system___getiolock_0616
174d8     FD 00 68 FC | 	wrlong	#0, result1
174dc     27 12 06 F6 | 	mov	arg01, #39
174e0     00 14 06 F6 | 	mov	arg02, #0
174e4     D8 C0 B0 FD | 	call	#_printerror
174e8     E0 01 90 FD | 	jmp	#LR__1894
174ec                 | LR__1890
174ec                 | ' if numpar=0 then 
174ec     0C 4E 05 F1 | 	add	fp, #12
174f0     A7 FE 09 FB | 	rdlong	result3, fp wz
174f4     0C 4E 85 F1 | 	sub	fp, #12
174f8     A8 00 90 5D |  if_ne	jmp	#LR__1891
174fc     00 C0 1B FF 
17500     00 26 06 F6 | 	mov	local01, ##931135488
17504     51 00 00 FF 
17508     58 E5 05 F1 | 	add	objptr, ##41816
1750c     F2 12 02 FB | 	rdlong	arg01, objptr
17510     51 00 00 FF 
17514     58 E5 85 F1 | 	sub	objptr, ##41816
17518     09 13 52 F6 | 	abs	arg01, arg01 wc
1751c     1F 28 C6 C9 |  if_b	decod	local02, #31
17520     00 28 06 36 |  if_ae	mov	local02, #0
17524     B8 25 B1 FD | 	call	#__system___float_fromuns
17528     14 FB 61 F5 | 	xor	result1, local02
1752c     FD 12 02 F6 | 	mov	arg01, result1
17530     FF 7F 23 FF 
17534     00 14 06 F6 | 	mov	arg02, ##1191181824
17538     AC 2B B1 FD | 	call	#__system___float_div
1753c     FD 14 02 F6 | 	mov	arg02, result1
17540     13 13 02 F6 | 	mov	arg01, local01
17544     CC 25 B1 FD | 	call	#__system___float_add
17548     10 4E 05 F1 | 	add	fp, #16
1754c     A7 FA 61 FC | 	wrlong	result1, fp
17550                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17550     10 4E 85 F1 | 	sub	fp, #16
17554     1F FA 05 F4 | 	bitl	result1, #31
17558     FD 12 02 F6 | 	mov	arg01, result1
1755c     89 41 1D FF 
17560     6F 14 06 F6 | 	mov	arg02, ##981668463
17564     01 16 06 F6 | 	mov	arg03, #1
17568     AC 2D B1 FD | 	call	#__system___float_cmp
1756c     00 FA 55 F2 | 	cmps	result1, #0 wc
17570     10 4E 05 C1 |  if_b	add	fp, #16
17574     A7 00 68 CC |  if_b	wrlong	#0, fp
17578     10 4E 85 C1 |  if_b	sub	fp, #16
1757c     10 4E 05 F1 | 	add	fp, #16
17580     A7 26 02 FB | 	rdlong	local01, fp
17584     10 4E 85 F1 | 	sub	fp, #16
17588     A7 26 62 FC | 	wrlong	local01, fp
1758c     08 4E 05 F1 | 	add	fp, #8
17590     A7 3C 68 FC | 	wrlong	#30, fp
17594     08 4E 85 F1 | 	sub	fp, #8
17598     A7 12 02 F6 | 	mov	arg01, fp
1759c     00 62 BF FD | 	call	#_push
175a0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
175a0     28 01 90 FD | 	jmp	#LR__1894
175a4                 | LR__1891
175a4     60 61 BF FD | 	call	#_pop
175a8     A7 FA 61 FC | 	wrlong	result1, fp
175ac     04 4E 05 F1 | 	add	fp, #4
175b0     A7 FC 61 FC | 	wrlong	result2, fp
175b4     04 4E 05 F1 | 	add	fp, #4
175b8     A7 FE 61 FC | 	wrlong	result3, fp
175bc                 | ' t1=pop()
175bc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
175bc     08 4E 85 F1 | 	sub	fp, #8
175c0     1C FE 0D F2 | 	cmp	result3, #28 wz
175c4     08 4E 05 51 |  if_ne	add	fp, #8
175c8     A7 26 02 5B |  if_ne	rdlong	local01, fp
175cc     08 4E 85 51 |  if_ne	sub	fp, #8
175d0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
175d4     E8 00 90 5D |  if_ne	jmp	#LR__1893
175d8     A7 26 02 FB | 	rdlong	local01, fp
175dc     52 00 00 FF 
175e0     08 E5 05 F1 | 	add	objptr, ##42248
175e4     F2 26 62 FC | 	wrlong	local01, objptr
175e8                 | '   q=t1.result.uresult
175e8                 | '   if q<7 then 
175e8     52 00 00 FF 
175ec     08 E5 85 F1 | 	sub	objptr, ##42248
175f0     07 26 56 F2 | 	cmps	local01, #7 wc
175f4     B8 00 90 3D |  if_ae	jmp	#LR__1892
175f8     00 C0 1B FF 
175fc     00 26 06 F6 | 	mov	local01, ##931135488
17600     52 00 00 FF 
17604     08 E5 05 F1 | 	add	objptr, ##42248
17608     F2 16 02 FB | 	rdlong	arg03, objptr
1760c     02 16 66 F0 | 	shl	arg03, #2
17610     B0 E5 85 F1 | 	sub	objptr, #432
17614     F2 16 02 F1 | 	add	arg03, objptr
17618     0B 13 02 FB | 	rdlong	arg01, arg03
1761c     51 00 00 FF 
17620     58 E5 85 F1 | 	sub	objptr, ##41816
17624     09 13 52 F6 | 	abs	arg01, arg01 wc
17628     1F 28 C6 C9 |  if_b	decod	local02, #31
1762c     00 28 06 36 |  if_ae	mov	local02, #0
17630     AC 24 B1 FD | 	call	#__system___float_fromuns
17634     14 FB 61 F5 | 	xor	result1, local02
17638     FD 12 02 F6 | 	mov	arg01, result1
1763c     FF 7F 23 FF 
17640     00 14 06 F6 | 	mov	arg02, ##1191181824
17644     A0 2A B1 FD | 	call	#__system___float_div
17648     FD 14 02 F6 | 	mov	arg02, result1
1764c     13 13 02 F6 | 	mov	arg01, local01
17650     C0 24 B1 FD | 	call	#__system___float_add
17654     10 4E 05 F1 | 	add	fp, #16
17658     A7 FA 61 FC | 	wrlong	result1, fp
1765c                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1765c     10 4E 85 F1 | 	sub	fp, #16
17660     1F FA 05 F4 | 	bitl	result1, #31
17664     FD 12 02 F6 | 	mov	arg01, result1
17668     89 41 1D FF 
1766c     6F 14 06 F6 | 	mov	arg02, ##981668463
17670     01 16 06 F6 | 	mov	arg03, #1
17674     A0 2C B1 FD | 	call	#__system___float_cmp
17678     00 FA 55 F2 | 	cmps	result1, #0 wc
1767c     10 4E 05 C1 |  if_b	add	fp, #16
17680     A7 00 68 CC |  if_b	wrlong	#0, fp
17684     10 4E 85 C1 |  if_b	sub	fp, #16
17688     10 4E 05 F1 | 	add	fp, #16
1768c     A7 26 02 FB | 	rdlong	local01, fp
17690     10 4E 85 F1 | 	sub	fp, #16
17694     A7 26 62 FC | 	wrlong	local01, fp
17698     08 4E 05 F1 | 	add	fp, #8
1769c     A7 3C 68 FC | 	wrlong	#30, fp
176a0     08 4E 85 F1 | 	sub	fp, #8
176a4     A7 12 02 F6 | 	mov	arg01, fp
176a8     F4 60 BF FD | 	call	#_push
176ac                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
176ac     1C 00 90 FD | 	jmp	#LR__1894
176b0                 | LR__1892
176b0     29 12 06 F6 | 	mov	arg01, #41
176b4     00 14 06 F6 | 	mov	arg02, #0
176b8     04 BF B0 FD | 	call	#_printerror
176bc                 | '      printerror(41) : return
176bc     0C 00 90 FD | 	jmp	#LR__1894
176c0                 | LR__1893
176c0     29 12 06 F6 | 	mov	arg01, #41
176c4     00 14 06 F6 | 	mov	arg02, #0
176c8     F4 BE B0 FD | 	call	#_printerror
176cc                 | LR__1894
176cc     A7 F0 03 F6 | 	mov	ptra, fp
176d0     B2 00 A0 FD | 	call	#popregs_
176d4                 | _do_padx_ret
176d4     2D 00 64 FD | 	ret
176d8                 | 
176d8                 | ' 
176d8                 | ' ' ------------------ pady
176d8                 | ' 
176d8                 | ' sub do_pady
176d8                 | _do_pady
176d8     02 4A 05 F6 | 	mov	COUNT_, #2
176dc     A8 00 A0 FD | 	call	#pushregs_
176e0     14 F0 07 F1 | 	add	ptra, #20
176e4     4A 00 00 FF 
176e8     80 E4 05 F1 | 	add	objptr, ##38016
176ec     F2 26 02 FB | 	rdlong	local01, objptr
176f0     13 17 02 F6 | 	mov	arg03, local01
176f4     01 16 66 F0 | 	shl	arg03, #1
176f8     13 17 02 F1 | 	add	arg03, local01
176fc     02 16 66 F0 | 	shl	arg03, #2
17700     03 00 00 FF 
17704     04 E4 85 F1 | 	sub	objptr, ##1540
17708     F2 16 02 F1 | 	add	arg03, objptr
1770c     0B 17 02 FB | 	rdlong	arg03, arg03
17710     0C 4E 05 F1 | 	add	fp, #12
17714     A7 16 62 FC | 	wrlong	arg03, fp
17718                 | ' 
17718                 | ' numpar=compiledline(lineptr_e).result.uresult
17718                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
17718     0C 4E 85 F1 | 	sub	fp, #12
1771c     02 16 16 F2 | 	cmp	arg03, #2 wc
17720     47 00 00 FF 
17724     7C E4 85 F1 | 	sub	objptr, ##36476
17728     40 00 90 CD |  if_b	jmp	#LR__1900
1772c     00 12 06 F6 | 	mov	arg01, #0
17730     60 56 B1 FD | 	call	#__system___getiolock_0616
17734     FD 12 02 F6 | 	mov	arg01, result1
17738     30 F9 B0 FD | 	call	#__system___lockmem
1773c     BB 01 00 FF 
17740     D7 14 06 F6 | 	mov	arg02, ##@LR__6003
17744     00 12 06 F6 | 	mov	arg01, #0
17748     00 16 06 F6 | 	mov	arg03, #0
1774c     10 06 B1 FD | 	call	#__system___basic_print_string
17750     00 12 06 F6 | 	mov	arg01, #0
17754     3C 56 B1 FD | 	call	#__system___getiolock_0616
17758     FD 00 68 FC | 	wrlong	#0, result1
1775c     27 12 06 F6 | 	mov	arg01, #39
17760     00 14 06 F6 | 	mov	arg02, #0
17764     58 BE B0 FD | 	call	#_printerror
17768     E0 01 90 FD | 	jmp	#LR__1904
1776c                 | LR__1900
1776c                 | ' if numpar=0 then 
1776c     0C 4E 05 F1 | 	add	fp, #12
17770     A7 FE 09 FB | 	rdlong	result3, fp wz
17774     0C 4E 85 F1 | 	sub	fp, #12
17778     A8 00 90 5D |  if_ne	jmp	#LR__1901
1777c     00 C0 1B FF 
17780     00 26 06 F6 | 	mov	local01, ##931135488
17784     51 00 00 FF 
17788     74 E5 05 F1 | 	add	objptr, ##41844
1778c     F2 12 02 FB | 	rdlong	arg01, objptr
17790     51 00 00 FF 
17794     74 E5 85 F1 | 	sub	objptr, ##41844
17798     09 13 52 F6 | 	abs	arg01, arg01 wc
1779c     1F 28 C6 C9 |  if_b	decod	local02, #31
177a0     00 28 06 36 |  if_ae	mov	local02, #0
177a4     38 23 B1 FD | 	call	#__system___float_fromuns
177a8     14 FB 61 F5 | 	xor	result1, local02
177ac     FD 12 02 F6 | 	mov	arg01, result1
177b0     FF 7F 23 FF 
177b4     00 14 06 F6 | 	mov	arg02, ##1191181824
177b8     2C 29 B1 FD | 	call	#__system___float_div
177bc     FD 14 02 F6 | 	mov	arg02, result1
177c0     13 13 02 F6 | 	mov	arg01, local01
177c4     4C 23 B1 FD | 	call	#__system___float_add
177c8     10 4E 05 F1 | 	add	fp, #16
177cc     A7 FA 61 FC | 	wrlong	result1, fp
177d0                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
177d0     10 4E 85 F1 | 	sub	fp, #16
177d4     1F FA 05 F4 | 	bitl	result1, #31
177d8     FD 12 02 F6 | 	mov	arg01, result1
177dc     89 41 1D FF 
177e0     6F 14 06 F6 | 	mov	arg02, ##981668463
177e4     01 16 06 F6 | 	mov	arg03, #1
177e8     2C 2B B1 FD | 	call	#__system___float_cmp
177ec     00 FA 55 F2 | 	cmps	result1, #0 wc
177f0     10 4E 05 C1 |  if_b	add	fp, #16
177f4     A7 00 68 CC |  if_b	wrlong	#0, fp
177f8     10 4E 85 C1 |  if_b	sub	fp, #16
177fc     10 4E 05 F1 | 	add	fp, #16
17800     A7 26 02 FB | 	rdlong	local01, fp
17804     10 4E 85 F1 | 	sub	fp, #16
17808     A7 26 62 FC | 	wrlong	local01, fp
1780c     08 4E 05 F1 | 	add	fp, #8
17810     A7 3C 68 FC | 	wrlong	#30, fp
17814     08 4E 85 F1 | 	sub	fp, #8
17818     A7 12 02 F6 | 	mov	arg01, fp
1781c     80 5F BF FD | 	call	#_push
17820                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17820     28 01 90 FD | 	jmp	#LR__1904
17824                 | LR__1901
17824     E0 5E BF FD | 	call	#_pop
17828     A7 FA 61 FC | 	wrlong	result1, fp
1782c     04 4E 05 F1 | 	add	fp, #4
17830     A7 FC 61 FC | 	wrlong	result2, fp
17834     04 4E 05 F1 | 	add	fp, #4
17838     A7 FE 61 FC | 	wrlong	result3, fp
1783c                 | ' t1=pop()
1783c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1783c     08 4E 85 F1 | 	sub	fp, #8
17840     1C FE 0D F2 | 	cmp	result3, #28 wz
17844     08 4E 05 51 |  if_ne	add	fp, #8
17848     A7 26 02 5B |  if_ne	rdlong	local01, fp
1784c     08 4E 85 51 |  if_ne	sub	fp, #8
17850     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17854     E8 00 90 5D |  if_ne	jmp	#LR__1903
17858     A7 26 02 FB | 	rdlong	local01, fp
1785c     52 00 00 FF 
17860     08 E5 05 F1 | 	add	objptr, ##42248
17864     F2 26 62 FC | 	wrlong	local01, objptr
17868                 | '   q=t1.result.uresult
17868                 | '   if q<7 then 
17868     52 00 00 FF 
1786c     08 E5 85 F1 | 	sub	objptr, ##42248
17870     07 26 56 F2 | 	cmps	local01, #7 wc
17874     B8 00 90 3D |  if_ae	jmp	#LR__1902
17878     00 C0 1B FF 
1787c     00 26 06 F6 | 	mov	local01, ##931135488
17880     52 00 00 FF 
17884     08 E5 05 F1 | 	add	objptr, ##42248
17888     F2 16 02 FB | 	rdlong	arg03, objptr
1788c     02 16 66 F0 | 	shl	arg03, #2
17890     94 E5 85 F1 | 	sub	objptr, #404
17894     F2 16 02 F1 | 	add	arg03, objptr
17898     0B 13 02 FB | 	rdlong	arg01, arg03
1789c     51 00 00 FF 
178a0     74 E5 85 F1 | 	sub	objptr, ##41844
178a4     09 13 52 F6 | 	abs	arg01, arg01 wc
178a8     1F 28 C6 C9 |  if_b	decod	local02, #31
178ac     00 28 06 36 |  if_ae	mov	local02, #0
178b0     2C 22 B1 FD | 	call	#__system___float_fromuns
178b4     14 FB 61 F5 | 	xor	result1, local02
178b8     FD 12 02 F6 | 	mov	arg01, result1
178bc     FF 7F 23 FF 
178c0     00 14 06 F6 | 	mov	arg02, ##1191181824
178c4     20 28 B1 FD | 	call	#__system___float_div
178c8     FD 14 02 F6 | 	mov	arg02, result1
178cc     13 13 02 F6 | 	mov	arg01, local01
178d0     40 22 B1 FD | 	call	#__system___float_add
178d4     10 4E 05 F1 | 	add	fp, #16
178d8     A7 FA 61 FC | 	wrlong	result1, fp
178dc                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
178dc     10 4E 85 F1 | 	sub	fp, #16
178e0     1F FA 05 F4 | 	bitl	result1, #31
178e4     FD 12 02 F6 | 	mov	arg01, result1
178e8     89 41 1D FF 
178ec     6F 14 06 F6 | 	mov	arg02, ##981668463
178f0     01 16 06 F6 | 	mov	arg03, #1
178f4     20 2A B1 FD | 	call	#__system___float_cmp
178f8     00 FA 55 F2 | 	cmps	result1, #0 wc
178fc     10 4E 05 C1 |  if_b	add	fp, #16
17900     A7 00 68 CC |  if_b	wrlong	#0, fp
17904     10 4E 85 C1 |  if_b	sub	fp, #16
17908     10 4E 05 F1 | 	add	fp, #16
1790c     A7 26 02 FB | 	rdlong	local01, fp
17910     10 4E 85 F1 | 	sub	fp, #16
17914     A7 26 62 FC | 	wrlong	local01, fp
17918     08 4E 05 F1 | 	add	fp, #8
1791c     A7 3C 68 FC | 	wrlong	#30, fp
17920     08 4E 85 F1 | 	sub	fp, #8
17924     A7 12 02 F6 | 	mov	arg01, fp
17928     74 5E BF FD | 	call	#_push
1792c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1792c     1C 00 90 FD | 	jmp	#LR__1904
17930                 | LR__1902
17930     29 12 06 F6 | 	mov	arg01, #41
17934     00 14 06 F6 | 	mov	arg02, #0
17938     84 BC B0 FD | 	call	#_printerror
1793c                 | '      printerror(41) : return
1793c     0C 00 90 FD | 	jmp	#LR__1904
17940                 | LR__1903
17940     29 12 06 F6 | 	mov	arg01, #41
17944     00 14 06 F6 | 	mov	arg02, #0
17948     74 BC B0 FD | 	call	#_printerror
1794c                 | LR__1904
1794c     A7 F0 03 F6 | 	mov	ptra, fp
17950     B2 00 A0 FD | 	call	#popregs_
17954                 | _do_pady_ret
17954     2D 00 64 FD | 	ret
17958                 | 
17958                 | ' 
17958                 | ' ' ------------------ padz
17958                 | ' 
17958                 | ' sub do_padz
17958                 | _do_padz
17958     02 4A 05 F6 | 	mov	COUNT_, #2
1795c     A8 00 A0 FD | 	call	#pushregs_
17960     14 F0 07 F1 | 	add	ptra, #20
17964     4A 00 00 FF 
17968     80 E4 05 F1 | 	add	objptr, ##38016
1796c     F2 26 02 FB | 	rdlong	local01, objptr
17970     13 17 02 F6 | 	mov	arg03, local01
17974     01 16 66 F0 | 	shl	arg03, #1
17978     13 17 02 F1 | 	add	arg03, local01
1797c     02 16 66 F0 | 	shl	arg03, #2
17980     03 00 00 FF 
17984     04 E4 85 F1 | 	sub	objptr, ##1540
17988     F2 16 02 F1 | 	add	arg03, objptr
1798c     0B 17 02 FB | 	rdlong	arg03, arg03
17990     0C 4E 05 F1 | 	add	fp, #12
17994     A7 16 62 FC | 	wrlong	arg03, fp
17998                 | ' 
17998                 | ' numpar=compiledline(lineptr_e).result.uresult
17998                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
17998     0C 4E 85 F1 | 	sub	fp, #12
1799c     02 16 16 F2 | 	cmp	arg03, #2 wc
179a0     47 00 00 FF 
179a4     7C E4 85 F1 | 	sub	objptr, ##36476
179a8     40 00 90 CD |  if_b	jmp	#LR__1910
179ac     00 12 06 F6 | 	mov	arg01, #0
179b0     E0 53 B1 FD | 	call	#__system___getiolock_0616
179b4     FD 12 02 F6 | 	mov	arg01, result1
179b8     B0 F6 B0 FD | 	call	#__system___lockmem
179bc     BB 01 00 FF 
179c0     DE 14 06 F6 | 	mov	arg02, ##@LR__6004
179c4     00 12 06 F6 | 	mov	arg01, #0
179c8     00 16 06 F6 | 	mov	arg03, #0
179cc     90 03 B1 FD | 	call	#__system___basic_print_string
179d0     00 12 06 F6 | 	mov	arg01, #0
179d4     BC 53 B1 FD | 	call	#__system___getiolock_0616
179d8     FD 00 68 FC | 	wrlong	#0, result1
179dc     27 12 06 F6 | 	mov	arg01, #39
179e0     00 14 06 F6 | 	mov	arg02, #0
179e4     D8 BB B0 FD | 	call	#_printerror
179e8     E0 01 90 FD | 	jmp	#LR__1914
179ec                 | LR__1910
179ec                 | ' if numpar=0 then 
179ec     0C 4E 05 F1 | 	add	fp, #12
179f0     A7 FE 09 FB | 	rdlong	result3, fp wz
179f4     0C 4E 85 F1 | 	sub	fp, #12
179f8     A8 00 90 5D |  if_ne	jmp	#LR__1911
179fc     00 C0 1B FF 
17a00     00 26 06 F6 | 	mov	local01, ##931135488
17a04     51 00 00 FF 
17a08     90 E5 05 F1 | 	add	objptr, ##41872
17a0c     F2 12 02 FB | 	rdlong	arg01, objptr
17a10     51 00 00 FF 
17a14     90 E5 85 F1 | 	sub	objptr, ##41872
17a18     09 13 52 F6 | 	abs	arg01, arg01 wc
17a1c     1F 28 C6 C9 |  if_b	decod	local02, #31
17a20     00 28 06 36 |  if_ae	mov	local02, #0
17a24     B8 20 B1 FD | 	call	#__system___float_fromuns
17a28     14 FB 61 F5 | 	xor	result1, local02
17a2c     FD 12 02 F6 | 	mov	arg01, result1
17a30     FF 7F 23 FF 
17a34     00 14 06 F6 | 	mov	arg02, ##1191181824
17a38     AC 26 B1 FD | 	call	#__system___float_div
17a3c     FD 14 02 F6 | 	mov	arg02, result1
17a40     13 13 02 F6 | 	mov	arg01, local01
17a44     CC 20 B1 FD | 	call	#__system___float_add
17a48     10 4E 05 F1 | 	add	fp, #16
17a4c     A7 FA 61 FC | 	wrlong	result1, fp
17a50                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17a50     10 4E 85 F1 | 	sub	fp, #16
17a54     1F FA 05 F4 | 	bitl	result1, #31
17a58     FD 12 02 F6 | 	mov	arg01, result1
17a5c     89 41 1D FF 
17a60     6F 14 06 F6 | 	mov	arg02, ##981668463
17a64     01 16 06 F6 | 	mov	arg03, #1
17a68     AC 28 B1 FD | 	call	#__system___float_cmp
17a6c     00 FA 55 F2 | 	cmps	result1, #0 wc
17a70     10 4E 05 C1 |  if_b	add	fp, #16
17a74     A7 00 68 CC |  if_b	wrlong	#0, fp
17a78     10 4E 85 C1 |  if_b	sub	fp, #16
17a7c     10 4E 05 F1 | 	add	fp, #16
17a80     A7 26 02 FB | 	rdlong	local01, fp
17a84     10 4E 85 F1 | 	sub	fp, #16
17a88     A7 26 62 FC | 	wrlong	local01, fp
17a8c     08 4E 05 F1 | 	add	fp, #8
17a90     A7 3C 68 FC | 	wrlong	#30, fp
17a94     08 4E 85 F1 | 	sub	fp, #8
17a98     A7 12 02 F6 | 	mov	arg01, fp
17a9c     00 5D BF FD | 	call	#_push
17aa0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17aa0     28 01 90 FD | 	jmp	#LR__1914
17aa4                 | LR__1911
17aa4     60 5C BF FD | 	call	#_pop
17aa8     A7 FA 61 FC | 	wrlong	result1, fp
17aac     04 4E 05 F1 | 	add	fp, #4
17ab0     A7 FC 61 FC | 	wrlong	result2, fp
17ab4     04 4E 05 F1 | 	add	fp, #4
17ab8     A7 FE 61 FC | 	wrlong	result3, fp
17abc                 | ' t1=pop()
17abc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17abc     08 4E 85 F1 | 	sub	fp, #8
17ac0     1C FE 0D F2 | 	cmp	result3, #28 wz
17ac4     08 4E 05 51 |  if_ne	add	fp, #8
17ac8     A7 26 02 5B |  if_ne	rdlong	local01, fp
17acc     08 4E 85 51 |  if_ne	sub	fp, #8
17ad0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17ad4     E8 00 90 5D |  if_ne	jmp	#LR__1913
17ad8     A7 26 02 FB | 	rdlong	local01, fp
17adc     52 00 00 FF 
17ae0     08 E5 05 F1 | 	add	objptr, ##42248
17ae4     F2 26 62 FC | 	wrlong	local01, objptr
17ae8                 | '   q=t1.result.uresult
17ae8                 | '   if q<7 then 
17ae8     52 00 00 FF 
17aec     08 E5 85 F1 | 	sub	objptr, ##42248
17af0     07 26 56 F2 | 	cmps	local01, #7 wc
17af4     B8 00 90 3D |  if_ae	jmp	#LR__1912
17af8     00 C0 1B FF 
17afc     00 26 06 F6 | 	mov	local01, ##931135488
17b00     52 00 00 FF 
17b04     08 E5 05 F1 | 	add	objptr, ##42248
17b08     F2 16 02 FB | 	rdlong	arg03, objptr
17b0c     02 16 66 F0 | 	shl	arg03, #2
17b10     78 E5 85 F1 | 	sub	objptr, #376
17b14     F2 16 02 F1 | 	add	arg03, objptr
17b18     0B 13 02 FB | 	rdlong	arg01, arg03
17b1c     51 00 00 FF 
17b20     90 E5 85 F1 | 	sub	objptr, ##41872
17b24     09 13 52 F6 | 	abs	arg01, arg01 wc
17b28     1F 28 C6 C9 |  if_b	decod	local02, #31
17b2c     00 28 06 36 |  if_ae	mov	local02, #0
17b30     AC 1F B1 FD | 	call	#__system___float_fromuns
17b34     14 FB 61 F5 | 	xor	result1, local02
17b38     FD 12 02 F6 | 	mov	arg01, result1
17b3c     FF 7F 23 FF 
17b40     00 14 06 F6 | 	mov	arg02, ##1191181824
17b44     A0 25 B1 FD | 	call	#__system___float_div
17b48     FD 14 02 F6 | 	mov	arg02, result1
17b4c     13 13 02 F6 | 	mov	arg01, local01
17b50     C0 1F B1 FD | 	call	#__system___float_add
17b54     10 4E 05 F1 | 	add	fp, #16
17b58     A7 FA 61 FC | 	wrlong	result1, fp
17b5c                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17b5c     10 4E 85 F1 | 	sub	fp, #16
17b60     1F FA 05 F4 | 	bitl	result1, #31
17b64     FD 12 02 F6 | 	mov	arg01, result1
17b68     89 41 1D FF 
17b6c     6F 14 06 F6 | 	mov	arg02, ##981668463
17b70     01 16 06 F6 | 	mov	arg03, #1
17b74     A0 27 B1 FD | 	call	#__system___float_cmp
17b78     00 FA 55 F2 | 	cmps	result1, #0 wc
17b7c     10 4E 05 C1 |  if_b	add	fp, #16
17b80     A7 00 68 CC |  if_b	wrlong	#0, fp
17b84     10 4E 85 C1 |  if_b	sub	fp, #16
17b88     10 4E 05 F1 | 	add	fp, #16
17b8c     A7 26 02 FB | 	rdlong	local01, fp
17b90     10 4E 85 F1 | 	sub	fp, #16
17b94     A7 26 62 FC | 	wrlong	local01, fp
17b98     08 4E 05 F1 | 	add	fp, #8
17b9c     A7 3C 68 FC | 	wrlong	#30, fp
17ba0     08 4E 85 F1 | 	sub	fp, #8
17ba4     A7 12 02 F6 | 	mov	arg01, fp
17ba8     F4 5B BF FD | 	call	#_push
17bac                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17bac     1C 00 90 FD | 	jmp	#LR__1914
17bb0                 | LR__1912
17bb0     29 12 06 F6 | 	mov	arg01, #41
17bb4     00 14 06 F6 | 	mov	arg02, #0
17bb8     04 BA B0 FD | 	call	#_printerror
17bbc                 | '      printerror(41) : return
17bbc     0C 00 90 FD | 	jmp	#LR__1914
17bc0                 | LR__1913
17bc0     29 12 06 F6 | 	mov	arg01, #41
17bc4     00 14 06 F6 | 	mov	arg02, #0
17bc8     F4 B9 B0 FD | 	call	#_printerror
17bcc                 | LR__1914
17bcc     A7 F0 03 F6 | 	mov	ptra, fp
17bd0     B2 00 A0 FD | 	call	#popregs_
17bd4                 | _do_padz_ret
17bd4     2D 00 64 FD | 	ret
17bd8                 | 
17bd8                 | ' 
17bd8                 | ' '-------------------- paper
17bd8                 | ' 
17bd8                 | ' sub do_paper
17bd8                 | _do_paper
17bd8     03 4A 05 F6 | 	mov	COUNT_, #3
17bdc     A8 00 A0 FD | 	call	#pushregs_
17be0     24 5B BF FD | 	call	#_pop
17be4     FD 26 02 F6 | 	mov	local01, result1
17be8     FE 28 02 F6 | 	mov	local02, result2
17bec     FF 2A 02 F6 | 	mov	local03, result3
17bf0                 | ' t1=pop() 
17bf0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
17bf0     1E 2A 0E F2 | 	cmp	local03, #30 wz
17bf4     10 00 90 5D |  if_ne	jmp	#LR__1920
17bf8     13 13 02 F6 | 	mov	arg01, local01
17bfc     00 14 06 F6 | 	mov	arg02, #0
17c00     A8 27 B1 FD | 	call	#__system___float_tointeger
17c04     FD 26 02 F6 | 	mov	local01, result1
17c08                 | LR__1920
17c08                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
17c08     1F 2A 0E F2 | 	cmp	local03, #31 wz
17c0c     18 00 90 5D |  if_ne	jmp	#LR__1921
17c10     13 13 02 F6 | 	mov	arg01, local01
17c14     D8 2A B1 FD | 	call	#__system____builtin_atof
17c18     FD 12 02 F6 | 	mov	arg01, result1
17c1c     00 14 06 F6 | 	mov	arg02, #0
17c20     88 27 B1 FD | 	call	#__system___float_tointeger
17c24     FD 26 02 F6 | 	mov	local01, result1
17c28                 | LR__1921
17c28     37 00 00 FF 
17c2c     38 E4 05 F1 | 	add	objptr, ##28216
17c30     F2 26 62 FC | 	wrlong	local01, objptr
17c34     04 E4 05 F1 | 	add	objptr, #4
17c38     F2 12 02 FB | 	rdlong	arg01, objptr
17c3c                 | ' 
17c3c                 | ' write_color:=ff
17c3c     36 00 00 FF 
17c40     FB E5 85 F1 | 	sub	objptr, ##28155
17c44     F2 12 62 FC | 	wrlong	arg01, objptr
17c48                 | ' write_background:=bb
17c48     04 E4 05 F1 | 	add	objptr, #4
17c4c     F2 26 62 FC | 	wrlong	local01, objptr
17c50     45 E4 85 F1 | 	sub	objptr, #69
17c54     A7 F0 03 F6 | 	mov	ptra, fp
17c58     B2 00 A0 FD | 	call	#popregs_
17c5c                 | _do_paper_ret
17c5c     2D 00 64 FD | 	ret
17c60                 | 
17c60                 | ' 
17c60                 | ' '-------------------- peek
17c60                 | ' 
17c60                 | ' sub do_peek
17c60                 | _do_peek
17c60     00 4A 05 F6 | 	mov	COUNT_, #0
17c64     A8 00 A0 FD | 	call	#pushregs_
17c68     14 F0 07 F1 | 	add	ptra, #20
17c6c     98 5A BF FD | 	call	#_pop
17c70     A7 FA 61 FC | 	wrlong	result1, fp
17c74     04 4E 05 F1 | 	add	fp, #4
17c78     A7 FC 61 FC | 	wrlong	result2, fp
17c7c     04 4E 05 F1 | 	add	fp, #4
17c80     A7 FE 61 FC | 	wrlong	result3, fp
17c84     08 4E 85 F1 | 	sub	fp, #8
17c88     A7 12 02 F6 | 	mov	arg01, fp
17c8c     5C 5C BF FD | 	call	#_converttoint
17c90     0C 4E 05 F1 | 	add	fp, #12
17c94     A7 FA 61 FC | 	wrlong	result1, fp
17c98                 | ' 
17c98                 | ' t1=pop()
17c98                 | ' a=converttoint(t1)
17c98                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17c98     0C 4E 85 F1 | 	sub	fp, #12
17c9c     00 04 00 FF 
17ca0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17ca4     1C 00 90 3D |  if_ae	jmp	#LR__1930
17ca8     0C 4E 05 F1 | 	add	fp, #12
17cac     A7 12 02 FB | 	rdlong	arg01, fp
17cb0     09 FB C1 FA | 	rdbyte	result1, arg01
17cb4     04 4E 05 F1 | 	add	fp, #4
17cb8     A7 FA 61 FC | 	wrlong	result1, fp
17cbc     10 4E 85 F1 | 	sub	fp, #16
17cc0     20 00 90 FD | 	jmp	#LR__1931
17cc4                 | LR__1930
17cc4     0C 4E 05 F1 | 	add	fp, #12
17cc8     A7 12 02 FB | 	rdlong	arg01, fp
17ccc     0C 4E 85 F1 | 	sub	fp, #12
17cd0     64 BB B0 FD | 	call	#_pspeek
17cd4     FD FA E1 F8 | 	getbyte	result1, result1, #0
17cd8     10 4E 05 F1 | 	add	fp, #16
17cdc     A7 FA 61 FC | 	wrlong	result1, fp
17ce0     10 4E 85 F1 | 	sub	fp, #16
17ce4                 | LR__1931
17ce4     08 4E 05 F1 | 	add	fp, #8
17ce8     A7 3A 68 FC | 	wrlong	#29, fp
17cec     08 4E 05 F1 | 	add	fp, #8
17cf0     A7 12 02 FB | 	rdlong	arg01, fp
17cf4     10 4E 85 F1 | 	sub	fp, #16
17cf8     A7 12 62 FC | 	wrlong	arg01, fp
17cfc     A7 12 02 F6 | 	mov	arg01, fp
17d00     9C 5A BF FD | 	call	#_push
17d04     A7 F0 03 F6 | 	mov	ptra, fp
17d08     B2 00 A0 FD | 	call	#popregs_
17d0c                 | _do_peek_ret
17d0c     2D 00 64 FD | 	ret
17d10                 | 
17d10                 | ' 
17d10                 | ' '-------------------- pinfloat
17d10                 | ' 
17d10                 | ' sub do_pinfloat
17d10                 | _do_pinfloat
17d10     00 4A 05 F6 | 	mov	COUNT_, #0
17d14     A8 00 A0 FD | 	call	#pushregs_
17d18     0C F0 07 F1 | 	add	ptra, #12
17d1c     E8 59 BF FD | 	call	#_pop
17d20     A7 FA 61 FC | 	wrlong	result1, fp
17d24     04 4E 05 F1 | 	add	fp, #4
17d28     A7 FC 61 FC | 	wrlong	result2, fp
17d2c     04 4E 05 F1 | 	add	fp, #4
17d30     A7 FE 61 FC | 	wrlong	result3, fp
17d34     08 4E 85 F1 | 	sub	fp, #8
17d38     A7 12 02 F6 | 	mov	arg01, fp
17d3c     AC 5B BF FD | 	call	#_converttoint
17d40     50 FA 61 FD | 	fltl	result1
17d44     A7 F0 03 F6 | 	mov	ptra, fp
17d48     B2 00 A0 FD | 	call	#popregs_
17d4c                 | _do_pinfloat_ret
17d4c     2D 00 64 FD | 	ret
17d50                 | 
17d50                 | ' 
17d50                 | ' '-------------------- pinhi
17d50                 | ' 
17d50                 | ' sub do_pinhi
17d50                 | _do_pinhi
17d50     00 4A 05 F6 | 	mov	COUNT_, #0
17d54     A8 00 A0 FD | 	call	#pushregs_
17d58     0C F0 07 F1 | 	add	ptra, #12
17d5c     A8 59 BF FD | 	call	#_pop
17d60     A7 FA 61 FC | 	wrlong	result1, fp
17d64     04 4E 05 F1 | 	add	fp, #4
17d68     A7 FC 61 FC | 	wrlong	result2, fp
17d6c     04 4E 05 F1 | 	add	fp, #4
17d70     A7 FE 61 FC | 	wrlong	result3, fp
17d74     08 4E 85 F1 | 	sub	fp, #8
17d78     A7 12 02 F6 | 	mov	arg01, fp
17d7c     6C 5B BF FD | 	call	#_converttoint
17d80     59 FA 61 FD | 	drvh	result1
17d84     A7 F0 03 F6 | 	mov	ptra, fp
17d88     B2 00 A0 FD | 	call	#popregs_
17d8c                 | _do_pinhi_ret
17d8c     2D 00 64 FD | 	ret
17d90                 | 
17d90                 | ' 
17d90                 | ' '-------------------- pinlo
17d90                 | ' 
17d90                 | ' sub do_pinlo
17d90                 | _do_pinlo
17d90     00 4A 05 F6 | 	mov	COUNT_, #0
17d94     A8 00 A0 FD | 	call	#pushregs_
17d98     0C F0 07 F1 | 	add	ptra, #12
17d9c     68 59 BF FD | 	call	#_pop
17da0     A7 FA 61 FC | 	wrlong	result1, fp
17da4     04 4E 05 F1 | 	add	fp, #4
17da8     A7 FC 61 FC | 	wrlong	result2, fp
17dac     04 4E 05 F1 | 	add	fp, #4
17db0     A7 FE 61 FC | 	wrlong	result3, fp
17db4     08 4E 85 F1 | 	sub	fp, #8
17db8     A7 12 02 F6 | 	mov	arg01, fp
17dbc     2C 5B BF FD | 	call	#_converttoint
17dc0     58 FA 61 FD | 	drvl	result1
17dc4     A7 F0 03 F6 | 	mov	ptra, fp
17dc8     B2 00 A0 FD | 	call	#popregs_
17dcc                 | _do_pinlo_ret
17dcc     2D 00 64 FD | 	ret
17dd0                 | 
17dd0                 | ' 
17dd0                 | ' '-------------------- pinread
17dd0                 | ' 
17dd0                 | ' sub do_pinread
17dd0                 | _do_pinread
17dd0     00 4A 05 F6 | 	mov	COUNT_, #0
17dd4     A8 00 A0 FD | 	call	#pushregs_
17dd8     0C F0 07 F1 | 	add	ptra, #12
17ddc     28 59 BF FD | 	call	#_pop
17de0     A7 FA 61 FC | 	wrlong	result1, fp
17de4     04 4E 05 F1 | 	add	fp, #4
17de8     A7 FC 61 FC | 	wrlong	result2, fp
17dec     04 4E 05 F1 | 	add	fp, #4
17df0     A7 FE 61 FC | 	wrlong	result3, fp
17df4     08 4E 85 F1 | 	sub	fp, #8
17df8     A7 12 02 F6 | 	mov	arg01, fp
17dfc     EC 5A BF FD | 	call	#_converttoint
17e00     FD 12 02 F6 | 	mov	arg01, result1
17e04     20 12 CE F7 | 	test	arg01, #32 wz
17e08     FF FB 01 56 |  if_ne	mov	result1, inb
17e0c     FE FB 01 A6 |  if_e	mov	result1, ina
17e10     09 FB 41 F0 | 	shr	result1, arg01
17e14     06 12 46 F0 | 	shr	arg01, #6
17e18     09 FB 41 F7 | 	zerox	result1, arg01
17e1c     52 00 00 FF 
17e20     10 E5 05 F1 | 	add	objptr, ##42256
17e24     F2 FA 61 FC | 	wrlong	result1, objptr
17e28     52 00 00 FF 
17e2c     10 E5 85 F1 | 	sub	objptr, ##42256
17e30     08 4E 05 F1 | 	add	fp, #8
17e34     A7 3A 68 FC | 	wrlong	#29, fp
17e38     08 4E 85 F1 | 	sub	fp, #8
17e3c     A7 08 68 FC | 	wrlong	#4, fp
17e40     A7 12 02 F6 | 	mov	arg01, fp
17e44     58 59 BF FD | 	call	#_push
17e48     A7 F0 03 F6 | 	mov	ptra, fp
17e4c     B2 00 A0 FD | 	call	#popregs_
17e50                 | _do_pinread_ret
17e50     2D 00 64 FD | 	ret
17e54                 | 
17e54                 | ' 
17e54                 | ' '-------------------- pinstart
17e54                 | ' 
17e54                 | ' sub do_pinstart
17e54                 | _do_pinstart
17e54     03 4A 05 F6 | 	mov	COUNT_, #3
17e58     A8 00 A0 FD | 	call	#pushregs_
17e5c     30 F0 07 F1 | 	add	ptra, #48
17e60     A4 58 BF FD | 	call	#_pop
17e64     FD 16 02 F6 | 	mov	arg03, result1
17e68     FE 14 02 F6 | 	mov	arg02, result2
17e6c     FF 18 02 F6 | 	mov	arg04, result3
17e70     A7 16 62 FC | 	wrlong	arg03, fp
17e74     04 4E 05 F1 | 	add	fp, #4
17e78     A7 14 62 FC | 	wrlong	arg02, fp
17e7c     04 4E 05 F1 | 	add	fp, #4
17e80     A7 18 62 FC | 	wrlong	arg04, fp
17e84     08 4E 85 F1 | 	sub	fp, #8
17e88     7C 58 BF FD | 	call	#_pop
17e8c     FD 16 02 F6 | 	mov	arg03, result1
17e90     FE 14 02 F6 | 	mov	arg02, result2
17e94     FF 18 02 F6 | 	mov	arg04, result3
17e98     0C 4E 05 F1 | 	add	fp, #12
17e9c     A7 16 62 FC | 	wrlong	arg03, fp
17ea0     04 4E 05 F1 | 	add	fp, #4
17ea4     A7 14 62 FC | 	wrlong	arg02, fp
17ea8     04 4E 05 F1 | 	add	fp, #4
17eac     A7 18 62 FC | 	wrlong	arg04, fp
17eb0     14 4E 85 F1 | 	sub	fp, #20
17eb4     50 58 BF FD | 	call	#_pop
17eb8     FD 16 02 F6 | 	mov	arg03, result1
17ebc     FE 14 02 F6 | 	mov	arg02, result2
17ec0     FF 18 02 F6 | 	mov	arg04, result3
17ec4     18 4E 05 F1 | 	add	fp, #24
17ec8     A7 16 62 FC | 	wrlong	arg03, fp
17ecc     04 4E 05 F1 | 	add	fp, #4
17ed0     A7 14 62 FC | 	wrlong	arg02, fp
17ed4     04 4E 05 F1 | 	add	fp, #4
17ed8     A7 18 62 FC | 	wrlong	arg04, fp
17edc     20 4E 85 F1 | 	sub	fp, #32
17ee0     24 58 BF FD | 	call	#_pop
17ee4     FF 16 02 F6 | 	mov	arg03, result3
17ee8     24 4E 05 F1 | 	add	fp, #36
17eec     A7 FA 61 FC | 	wrlong	result1, fp
17ef0     04 4E 05 F1 | 	add	fp, #4
17ef4     A7 FC 61 FC | 	wrlong	result2, fp
17ef8     04 4E 05 F1 | 	add	fp, #4
17efc     A7 16 62 FC | 	wrlong	arg03, fp
17f00     08 4E 85 F1 | 	sub	fp, #8
17f04     A7 12 02 F6 | 	mov	arg01, fp
17f08     24 4E 85 F1 | 	sub	fp, #36
17f0c     DC 59 BF FD | 	call	#_converttoint
17f10     FD 26 02 F6 | 	mov	local01, result1
17f14     18 4E 05 F1 | 	add	fp, #24
17f18     A7 12 02 F6 | 	mov	arg01, fp
17f1c     18 4E 85 F1 | 	sub	fp, #24
17f20     C8 59 BF FD | 	call	#_converttoint
17f24     FD 28 02 F6 | 	mov	local02, result1
17f28     0C 4E 05 F1 | 	add	fp, #12
17f2c     A7 12 02 F6 | 	mov	arg01, fp
17f30     0C 4E 85 F1 | 	sub	fp, #12
17f34     B4 59 BF FD | 	call	#_converttoint
17f38     FD 2A 02 F6 | 	mov	local03, result1
17f3c     A7 12 02 F6 | 	mov	arg01, fp
17f40     A8 59 BF FD | 	call	#_converttoint
17f44     40 26 62 FD | 	dirl	local01
17f48     13 29 02 FC | 	wrpin	local02, local01
17f4c     13 2B 12 FC | 	wxpin	local03, local01
17f50     13 FB 21 FC | 	wypin	result1, local01
17f54     41 26 62 FD | 	dirh	local01
17f58     A7 F0 03 F6 | 	mov	ptra, fp
17f5c     B2 00 A0 FD | 	call	#popregs_
17f60                 | _do_pinstart_ret
17f60     2D 00 64 FD | 	ret
17f64                 | 
17f64                 | ' 
17f64                 | ' '-------------------- pintoggle
17f64                 | ' 
17f64                 | ' sub do_pintoggle
17f64                 | _do_pintoggle
17f64     00 4A 05 F6 | 	mov	COUNT_, #0
17f68     A8 00 A0 FD | 	call	#pushregs_
17f6c     0C F0 07 F1 | 	add	ptra, #12
17f70     94 57 BF FD | 	call	#_pop
17f74     A7 FA 61 FC | 	wrlong	result1, fp
17f78     04 4E 05 F1 | 	add	fp, #4
17f7c     A7 FC 61 FC | 	wrlong	result2, fp
17f80     04 4E 05 F1 | 	add	fp, #4
17f84     A7 FE 61 FC | 	wrlong	result3, fp
17f88     08 4E 85 F1 | 	sub	fp, #8
17f8c     A7 12 02 F6 | 	mov	arg01, fp
17f90     58 59 BF FD | 	call	#_converttoint
17f94     5F FA 61 FD | 	drvnot	result1
17f98     A7 F0 03 F6 | 	mov	ptra, fp
17f9c     B2 00 A0 FD | 	call	#popregs_
17fa0                 | _do_pintoggle_ret
17fa0     2D 00 64 FD | 	ret
17fa4                 | 
17fa4                 | ' 
17fa4                 | ' '-------------------- pinwrite
17fa4                 | ' 
17fa4                 | ' sub do_pinwrite
17fa4                 | _do_pinwrite
17fa4     01 4A 05 F6 | 	mov	COUNT_, #1
17fa8     A8 00 A0 FD | 	call	#pushregs_
17fac     18 F0 07 F1 | 	add	ptra, #24
17fb0     54 57 BF FD | 	call	#_pop
17fb4     FD 14 02 F6 | 	mov	arg02, result1
17fb8     FE 12 02 F6 | 	mov	arg01, result2
17fbc     FF 26 02 F6 | 	mov	local01, result3
17fc0     A7 14 62 FC | 	wrlong	arg02, fp
17fc4     04 4E 05 F1 | 	add	fp, #4
17fc8     A7 12 62 FC | 	wrlong	arg01, fp
17fcc     04 4E 05 F1 | 	add	fp, #4
17fd0     A7 26 62 FC | 	wrlong	local01, fp
17fd4     08 4E 85 F1 | 	sub	fp, #8
17fd8     2C 57 BF FD | 	call	#_pop
17fdc     FF 26 02 F6 | 	mov	local01, result3
17fe0     0C 4E 05 F1 | 	add	fp, #12
17fe4     A7 FA 61 FC | 	wrlong	result1, fp
17fe8     04 4E 05 F1 | 	add	fp, #4
17fec     A7 FC 61 FC | 	wrlong	result2, fp
17ff0     04 4E 05 F1 | 	add	fp, #4
17ff4     A7 26 62 FC | 	wrlong	local01, fp
17ff8     08 4E 85 F1 | 	sub	fp, #8
17ffc     A7 12 02 F6 | 	mov	arg01, fp
18000     0C 4E 85 F1 | 	sub	fp, #12
18004     E4 58 BF FD | 	call	#_converttoint
18008     FD 26 02 F6 | 	mov	local01, result1
1800c     A7 12 02 F6 | 	mov	arg01, fp
18010     D8 58 BF FD | 	call	#_converttoint
18014     FD 14 02 F6 | 	mov	arg02, result1
18018     13 13 02 F6 | 	mov	arg01, local01
1801c     00 F2 B0 FD | 	call	#__system___pinwrite
18020     A7 F0 03 F6 | 	mov	ptra, fp
18024     B2 00 A0 FD | 	call	#popregs_
18028                 | _do_pinwrite_ret
18028     2D 00 64 FD | 	ret
1802c                 | 
1802c                 | ' 
1802c                 | ' '-------------------- play
1802c                 | ' 
1802c                 | ' sub do_play
1802c                 | _do_play
1802c     08 4A 05 F6 | 	mov	COUNT_, #8
18030     A8 00 A0 FD | 	call	#pushregs_
18034     7C F0 07 F1 | 	add	ptra, #124
18038     68 4E 05 F1 | 	add	fp, #104
1803c     77 CC A1 FF 
18040     A7 7C 6B FC | 	wrlong	##1134096318, fp
18044                 | ' speed_coeff=305.873
18044                 | ' 
18044                 | ' for i=0 to 8 : params(i)=-2.0 : next i
18044     64 4E 85 F1 | 	sub	fp, #100
18048     A7 00 68 FC | 	wrlong	#0, fp
1804c     97 18 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
18050                 | LR__1940
18050     A7 16 02 FB | 	rdlong	arg03, fp
18054     02 16 66 F0 | 	shl	arg03, #2
18058     34 4E 05 F1 | 	add	fp, #52
1805c     A7 16 02 F1 | 	add	arg03, fp
18060     00 00 E0 FF 
18064     0B 01 68 FC | 	wrlong	##-1073741824, arg03
18068     34 4E 85 F1 | 	sub	fp, #52
1806c     A7 26 02 FB | 	rdlong	local01, fp
18070     01 26 06 F1 | 	add	local01, #1
18074     A7 26 62 FC | 	wrlong	local01, fp
18078     09 26 56 F2 | 	cmps	local01, #9 wc
1807c     D0 FF 9F CD |  if_b	jmp	#LR__1940
18080                 | LR__1941
18080     04 4E 85 F1 | 	sub	fp, #4
18084     4A 00 00 FF 
18088     80 E4 05 F1 | 	add	objptr, ##38016
1808c     F2 28 02 FB | 	rdlong	local02, objptr
18090     14 2B 02 F6 | 	mov	local03, local02
18094     01 2A 66 F0 | 	shl	local03, #1
18098     14 2B 02 F1 | 	add	local03, local02
1809c     02 2A 66 F0 | 	shl	local03, #2
180a0     03 00 00 FF 
180a4     04 E4 85 F1 | 	sub	objptr, ##1540
180a8     F2 2A 02 F1 | 	add	local03, objptr
180ac     15 2D 02 FB | 	rdlong	local04, local03
180b0     A7 2C 62 FC | 	wrlong	local04, fp
180b4                 | ' numpar=compiledline(lineptr_e).result.uresult
180b4                 | ' for i=numpar to 1 step -1 
180b4     04 4E 05 F1 | 	add	fp, #4
180b8     A7 2C 62 FC | 	wrlong	local04, fp
180bc     04 4E 85 F1 | 	sub	fp, #4
180c0     47 00 00 FF 
180c4     7C E4 85 F1 | 	sub	objptr, ##36476
180c8                 | LR__1942
180c8     3C 56 BF FD | 	call	#_pop
180cc     5C 4E 05 F1 | 	add	fp, #92
180d0     A7 FA 61 FC | 	wrlong	result1, fp
180d4     04 4E 05 F1 | 	add	fp, #4
180d8     A7 FC 61 FC | 	wrlong	result2, fp
180dc     04 4E 05 F1 | 	add	fp, #4
180e0     A7 FE 61 FC | 	wrlong	result3, fp
180e4     60 4E 85 F1 | 	sub	fp, #96
180e8     A7 2A 02 FB | 	rdlong	local03, fp
180ec     01 2A 86 F1 | 	sub	local03, #1
180f0     02 2A 66 F0 | 	shl	local03, #2
180f4     34 4E 05 F1 | 	add	fp, #52
180f8     A7 2A 02 F1 | 	add	local03, fp
180fc     24 4E 05 F1 | 	add	fp, #36
18100     A7 2E 02 F6 | 	mov	local05, fp
18104     17 13 02 F6 | 	mov	arg01, local05
18108     5C 4E 85 F1 | 	sub	fp, #92
1810c     98 58 BF FD | 	call	#_converttofloat
18110     15 FB 61 FC | 	wrlong	result1, local03
18114     04 4E 05 F1 | 	add	fp, #4
18118     A7 26 02 FB | 	rdlong	local01, fp
1811c     01 26 86 F1 | 	sub	local01, #1
18120     A7 26 62 FC | 	wrlong	local01, fp
18124     04 4E 85 F1 | 	sub	fp, #4
18128     01 26 56 F2 | 	cmps	local01, #1 wc
1812c     98 FF 9F 3D |  if_ae	jmp	#LR__1942
18130                 | ' 
18130                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
18130     38 4E 05 F1 | 	add	fp, #56
18134     A7 12 02 FB | 	rdlong	arg01, fp
18138     38 4E 85 F1 | 	sub	fp, #56
1813c     00 14 06 F6 | 	mov	arg02, #0
18140     01 16 06 F6 | 	mov	arg03, #1
18144     D0 21 B1 FD | 	call	#__system___float_cmp
18148     00 FA 55 F2 | 	cmps	result1, #0 wc
1814c     0C 4E 05 C1 |  if_b	add	fp, #12
18150     A7 00 68 CC |  if_b	wrlong	#0, fp
18154     0C 4E 85 C1 |  if_b	sub	fp, #12
18158     2C 00 90 CD |  if_b	jmp	#LR__1943
1815c     38 4E 05 F1 | 	add	fp, #56
18160     A7 12 02 FB | 	rdlong	arg01, fp
18164     38 4E 85 F1 | 	sub	fp, #56
18168     01 14 06 F6 | 	mov	arg02, #1
1816c     3C 22 B1 FD | 	call	#__system___float_tointeger
18170     FD 26 52 F6 | 	abs	local01, result1 wc
18174     07 26 06 F5 | 	and	local01, #7
18178     13 27 82 F6 | 	negc	local01, local01
1817c     0C 4E 05 F1 | 	add	fp, #12
18180     A7 26 62 FC | 	wrlong	local01, fp
18184     0C 4E 85 F1 | 	sub	fp, #12
18188                 | LR__1943
18188                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
18188     3C 4E 05 F1 | 	add	fp, #60
1818c     A7 12 02 FB | 	rdlong	arg01, fp
18190     3C 4E 85 F1 | 	sub	fp, #60
18194     00 14 06 F6 | 	mov	arg02, #0
18198     01 16 06 F6 | 	mov	arg03, #1
1819c     78 21 B1 FD | 	call	#__system___float_cmp
181a0     00 FA 55 F2 | 	cmps	result1, #0 wc
181a4     40 00 90 3D |  if_ae	jmp	#LR__1944
181a8     0C 4E 05 F1 | 	add	fp, #12
181ac     A7 28 02 FB | 	rdlong	local02, fp
181b0     14 2B 02 F6 | 	mov	local03, local02
181b4     01 2A 66 F0 | 	shl	local03, #1
181b8     14 2B 02 F1 | 	add	local03, local02
181bc     03 2A 66 F0 | 	shl	local03, #3
181c0     14 00 00 FF 
181c4     38 E5 05 F1 | 	add	objptr, ##10552
181c8     F2 2A 02 F1 | 	add	local03, objptr
181cc     15 31 02 FB | 	rdlong	local06, local03
181d0     60 4E 05 F1 | 	add	fp, #96
181d4     A7 30 62 FC | 	wrlong	local06, fp
181d8     6C 4E 85 F1 | 	sub	fp, #108
181dc     14 00 00 FF 
181e0     38 E5 85 F1 | 	sub	objptr, ##10552
181e4     44 00 90 FD | 	jmp	#LR__1945
181e8                 | LR__1944
181e8     3C 4E 05 F1 | 	add	fp, #60
181ec     A7 2C 02 FB | 	rdlong	local04, fp
181f0     30 4E 05 F1 | 	add	fp, #48
181f4     A7 2C 62 FC | 	wrlong	local04, fp
181f8     60 4E 85 F1 | 	sub	fp, #96
181fc     A7 28 02 FB | 	rdlong	local02, fp
18200     14 2B 02 F6 | 	mov	local03, local02
18204     01 2A 66 F0 | 	shl	local03, #1
18208     14 2B 02 F1 | 	add	local03, local02
1820c     03 2A 66 F0 | 	shl	local03, #3
18210     14 00 00 FF 
18214     38 E5 05 F1 | 	add	objptr, ##10552
18218     F2 2A 02 F1 | 	add	local03, objptr
1821c     0C 4E 85 F1 | 	sub	fp, #12
18220     15 2D 62 FC | 	wrlong	local04, local03
18224     14 00 00 FF 
18228     38 E5 85 F1 | 	sub	objptr, ##10552
1822c                 | LR__1945
1822c                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
1822c     40 4E 05 F1 | 	add	fp, #64
18230     A7 12 02 FB | 	rdlong	arg01, fp
18234     40 4E 85 F1 | 	sub	fp, #64
18238     00 14 06 F6 | 	mov	arg02, #0
1823c     01 16 06 F6 | 	mov	arg03, #1
18240     D4 20 B1 FD | 	call	#__system___float_cmp
18244     00 FA 55 F2 | 	cmps	result1, #0 wc
18248     24 00 90 CD |  if_b	jmp	#LR__1946
1824c     40 4E 05 F1 | 	add	fp, #64
18250     A7 12 02 FB | 	rdlong	arg01, fp
18254     40 4E 85 F1 | 	sub	fp, #64
18258     20 0E 23 FF 
1825c     00 14 06 F6 | 	mov	arg02, ##1176256512
18260     01 16 66 F6 | 	neg	arg03, #1
18264     B0 20 B1 FD | 	call	#__system___float_cmp
18268     01 FA 55 F2 | 	cmps	result1, #1 wc
1826c     48 00 90 CD |  if_b	jmp	#LR__1947
18270                 | LR__1946
18270     0C 4E 05 F1 | 	add	fp, #12
18274     A7 2A 02 FB | 	rdlong	local03, fp
18278     15 33 02 F6 | 	mov	local07, local03
1827c     01 32 66 F0 | 	shl	local07, #1
18280     15 33 02 F1 | 	add	local07, local03
18284     03 32 66 F0 | 	shl	local07, #3
18288     14 00 00 FF 
1828c     38 E5 05 F1 | 	add	objptr, ##10552
18290     F2 32 02 F1 | 	add	local07, objptr
18294     06 32 06 F1 | 	add	local07, #6
18298     19 2F E2 FA | 	rdword	local05, local07
1829c     17 2D 32 F9 | 	getword	local04, local05, #0
182a0     1C 4E 05 F1 | 	add	fp, #28
182a4     A7 2C 62 FC | 	wrlong	local04, fp
182a8     28 4E 85 F1 | 	sub	fp, #40
182ac     14 00 00 FF 
182b0     38 E5 85 F1 | 	sub	objptr, ##10552
182b4     54 00 90 FD | 	jmp	#LR__1948
182b8                 | LR__1947
182b8     40 4E 05 F1 | 	add	fp, #64
182bc     A7 12 02 FB | 	rdlong	arg01, fp
182c0     40 4E 85 F1 | 	sub	fp, #64
182c4     01 14 06 F6 | 	mov	arg02, #1
182c8     E0 20 B1 FD | 	call	#__system___float_tointeger
182cc     28 4E 05 F1 | 	add	fp, #40
182d0     A7 FA 61 FC | 	wrlong	result1, fp
182d4     1C 4E 85 F1 | 	sub	fp, #28
182d8     A7 28 02 FB | 	rdlong	local02, fp
182dc     14 2B 02 F6 | 	mov	local03, local02
182e0     01 2A 66 F0 | 	shl	local03, #1
182e4     14 2B 02 F1 | 	add	local03, local02
182e8     03 2A 66 F0 | 	shl	local03, #3
182ec     14 00 00 FF 
182f0     38 E5 05 F1 | 	add	objptr, ##10552
182f4     F2 2A 02 F1 | 	add	local03, objptr
182f8     0C 4E 85 F1 | 	sub	fp, #12
182fc     06 2A 06 F1 | 	add	local03, #6
18300     15 FB 51 FC | 	wrword	result1, local03
18304     14 00 00 FF 
18308     38 E5 85 F1 | 	sub	objptr, ##10552
1830c                 | LR__1948
1830c                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
1830c     44 4E 05 F1 | 	add	fp, #68
18310     A7 12 02 FB | 	rdlong	arg01, fp
18314     44 4E 85 F1 | 	sub	fp, #68
18318     00 14 06 F6 | 	mov	arg02, #0
1831c     01 16 06 F6 | 	mov	arg03, #1
18320     F4 1F B1 FD | 	call	#__system___float_cmp
18324     00 FA 55 F2 | 	cmps	result1, #0 wc
18328     24 00 90 CD |  if_b	jmp	#LR__1949
1832c     44 4E 05 F1 | 	add	fp, #68
18330     A7 12 02 FB | 	rdlong	arg01, fp
18334     44 4E 85 F1 | 	sub	fp, #68
18338     89 C1 20 FF 
1833c     6F 14 06 F6 | 	mov	arg02, ##1099108975
18340     01 16 66 F6 | 	neg	arg03, #1
18344     D0 1F B1 FD | 	call	#__system___float_cmp
18348     01 FA 55 F2 | 	cmps	result1, #1 wc
1834c     44 00 90 CD |  if_b	jmp	#LR__1950
18350                 | LR__1949
18350     0C 4E 05 F1 | 	add	fp, #12
18354     A7 28 02 FB | 	rdlong	local02, fp
18358     14 2B 02 F6 | 	mov	local03, local02
1835c     01 2A 66 F0 | 	shl	local03, #1
18360     14 2B 02 F1 | 	add	local03, local02
18364     03 2A 66 F0 | 	shl	local03, #3
18368     14 00 00 FF 
1836c     38 E5 05 F1 | 	add	objptr, ##10552
18370     F2 2A 02 F1 | 	add	local03, objptr
18374     0C 2A 06 F1 | 	add	local03, #12
18378     15 31 02 FB | 	rdlong	local06, local03
1837c     68 4E 05 F1 | 	add	fp, #104
18380     A7 30 62 FC | 	wrlong	local06, fp
18384     74 4E 85 F1 | 	sub	fp, #116
18388     14 00 00 FF 
1838c     38 E5 85 F1 | 	sub	objptr, ##10552
18390     48 00 90 FD | 	jmp	#LR__1951
18394                 | LR__1950
18394     44 4E 05 F1 | 	add	fp, #68
18398     A7 2C 02 FB | 	rdlong	local04, fp
1839c     30 4E 05 F1 | 	add	fp, #48
183a0     A7 2C 62 FC | 	wrlong	local04, fp
183a4     68 4E 85 F1 | 	sub	fp, #104
183a8     A7 28 02 FB | 	rdlong	local02, fp
183ac     14 2B 02 F6 | 	mov	local03, local02
183b0     01 2A 66 F0 | 	shl	local03, #1
183b4     14 2B 02 F1 | 	add	local03, local02
183b8     03 2A 66 F0 | 	shl	local03, #3
183bc     14 00 00 FF 
183c0     38 E5 05 F1 | 	add	objptr, ##10552
183c4     F2 2A 02 F1 | 	add	local03, objptr
183c8     0C 4E 85 F1 | 	sub	fp, #12
183cc     0C 2A 06 F1 | 	add	local03, #12
183d0     15 2D 62 FC | 	wrlong	local04, local03
183d4     14 00 00 FF 
183d8     38 E5 85 F1 | 	sub	objptr, ##10552
183dc                 | LR__1951
183dc                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
183dc     48 4E 05 F1 | 	add	fp, #72
183e0     A7 12 02 FB | 	rdlong	arg01, fp
183e4     48 4E 85 F1 | 	sub	fp, #72
183e8     00 14 06 F6 | 	mov	arg02, #0
183ec     01 16 06 F6 | 	mov	arg03, #1
183f0     24 1F B1 FD | 	call	#__system___float_cmp
183f4     00 FA 55 F2 | 	cmps	result1, #0 wc
183f8     24 00 90 CD |  if_b	jmp	#LR__1952
183fc     48 4E 05 F1 | 	add	fp, #72
18400     A7 12 02 FB | 	rdlong	arg01, fp
18404     48 4E 85 F1 | 	sub	fp, #72
18408     00 00 21 FF 
1840c     00 14 06 F6 | 	mov	arg02, ##1107296256
18410     01 16 66 F6 | 	neg	arg03, #1
18414     00 1F B1 FD | 	call	#__system___float_cmp
18418     01 FA 55 F2 | 	cmps	result1, #1 wc
1841c     48 00 90 CD |  if_b	jmp	#LR__1953
18420                 | LR__1952
18420     0C 4E 05 F1 | 	add	fp, #12
18424     A7 2A 02 FB | 	rdlong	local03, fp
18428     15 33 02 F6 | 	mov	local07, local03
1842c     01 32 66 F0 | 	shl	local07, #1
18430     15 33 02 F1 | 	add	local07, local03
18434     03 32 66 F0 | 	shl	local07, #3
18438     14 00 00 FF 
1843c     38 E5 05 F1 | 	add	objptr, ##10552
18440     F2 32 02 F1 | 	add	local07, objptr
18444     04 32 06 F1 | 	add	local07, #4
18448     19 2F C2 FA | 	rdbyte	local05, local07
1844c     17 2D E2 F8 | 	getbyte	local04, local05, #0
18450     14 4E 05 F1 | 	add	fp, #20
18454     A7 2C 62 FC | 	wrlong	local04, fp
18458     20 4E 85 F1 | 	sub	fp, #32
1845c     14 00 00 FF 
18460     38 E5 85 F1 | 	sub	objptr, ##10552
18464     54 00 90 FD | 	jmp	#LR__1954
18468                 | LR__1953
18468     48 4E 05 F1 | 	add	fp, #72
1846c     A7 12 02 FB | 	rdlong	arg01, fp
18470     48 4E 85 F1 | 	sub	fp, #72
18474     01 14 06 F6 | 	mov	arg02, #1
18478     30 1F B1 FD | 	call	#__system___float_tointeger
1847c     20 4E 05 F1 | 	add	fp, #32
18480     A7 FA 61 FC | 	wrlong	result1, fp
18484     14 4E 85 F1 | 	sub	fp, #20
18488     A7 28 02 FB | 	rdlong	local02, fp
1848c     14 2B 02 F6 | 	mov	local03, local02
18490     01 2A 66 F0 | 	shl	local03, #1
18494     14 2B 02 F1 | 	add	local03, local02
18498     03 2A 66 F0 | 	shl	local03, #3
1849c     14 00 00 FF 
184a0     38 E5 05 F1 | 	add	objptr, ##10552
184a4     F2 2A 02 F1 | 	add	local03, objptr
184a8     0C 4E 85 F1 | 	sub	fp, #12
184ac     04 2A 06 F1 | 	add	local03, #4
184b0     15 FB 41 FC | 	wrbyte	result1, local03
184b4     14 00 00 FF 
184b8     38 E5 85 F1 | 	sub	objptr, ##10552
184bc                 | LR__1954
184bc                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
184bc     4C 4E 05 F1 | 	add	fp, #76
184c0     A7 12 02 FB | 	rdlong	arg01, fp
184c4     4C 4E 85 F1 | 	sub	fp, #76
184c8     00 14 06 F6 | 	mov	arg02, #0
184cc     01 16 06 F6 | 	mov	arg03, #1
184d0     44 1E B1 FD | 	call	#__system___float_cmp
184d4     00 FA 55 F2 | 	cmps	result1, #0 wc
184d8     24 00 90 CD |  if_b	jmp	#LR__1955
184dc     4C 4E 05 F1 | 	add	fp, #76
184e0     A7 12 02 FB | 	rdlong	arg01, fp
184e4     4C 4E 85 F1 | 	sub	fp, #76
184e8     00 80 20 FF 
184ec     00 14 06 F6 | 	mov	arg02, ##1090519040
184f0     01 16 66 F6 | 	neg	arg03, #1
184f4     20 1E B1 FD | 	call	#__system___float_cmp
184f8     01 FA 55 F2 | 	cmps	result1, #1 wc
184fc     48 00 90 CD |  if_b	jmp	#LR__1956
18500                 | LR__1955
18500     0C 4E 05 F1 | 	add	fp, #12
18504     A7 2A 02 FB | 	rdlong	local03, fp
18508     15 33 02 F6 | 	mov	local07, local03
1850c     01 32 66 F0 | 	shl	local07, #1
18510     15 33 02 F1 | 	add	local07, local03
18514     03 32 66 F0 | 	shl	local07, #3
18518     14 00 00 FF 
1851c     38 E5 05 F1 | 	add	objptr, ##10552
18520     F2 32 02 F1 | 	add	local07, objptr
18524     05 32 06 F1 | 	add	local07, #5
18528     19 2F C2 FA | 	rdbyte	local05, local07
1852c     17 2D E2 F8 | 	getbyte	local04, local05, #0
18530     18 4E 05 F1 | 	add	fp, #24
18534     A7 2C 62 FC | 	wrlong	local04, fp
18538     24 4E 85 F1 | 	sub	fp, #36
1853c     14 00 00 FF 
18540     38 E5 85 F1 | 	sub	objptr, ##10552
18544     54 00 90 FD | 	jmp	#LR__1957
18548                 | LR__1956
18548     4C 4E 05 F1 | 	add	fp, #76
1854c     A7 12 02 FB | 	rdlong	arg01, fp
18550     4C 4E 85 F1 | 	sub	fp, #76
18554     01 14 06 F6 | 	mov	arg02, #1
18558     50 1E B1 FD | 	call	#__system___float_tointeger
1855c     24 4E 05 F1 | 	add	fp, #36
18560     A7 FA 61 FC | 	wrlong	result1, fp
18564     18 4E 85 F1 | 	sub	fp, #24
18568     A7 28 02 FB | 	rdlong	local02, fp
1856c     14 2B 02 F6 | 	mov	local03, local02
18570     01 2A 66 F0 | 	shl	local03, #1
18574     14 2B 02 F1 | 	add	local03, local02
18578     03 2A 66 F0 | 	shl	local03, #3
1857c     14 00 00 FF 
18580     38 E5 05 F1 | 	add	objptr, ##10552
18584     F2 2A 02 F1 | 	add	local03, objptr
18588     0C 4E 85 F1 | 	sub	fp, #12
1858c     05 2A 06 F1 | 	add	local03, #5
18590     15 FB 41 FC | 	wrbyte	result1, local03
18594     14 00 00 FF 
18598     38 E5 85 F1 | 	sub	objptr, ##10552
1859c                 | LR__1957
1859c                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
1859c     50 4E 05 F1 | 	add	fp, #80
185a0     A7 12 02 FB | 	rdlong	arg01, fp
185a4     50 4E 85 F1 | 	sub	fp, #80
185a8     00 14 06 F6 | 	mov	arg02, #0
185ac     01 16 06 F6 | 	mov	arg03, #1
185b0     64 1D B1 FD | 	call	#__system___float_cmp
185b4     00 FA 55 F2 | 	cmps	result1, #0 wc
185b8     24 00 90 CD |  if_b	jmp	#LR__1958
185bc     50 4E 05 F1 | 	add	fp, #80
185c0     A7 12 02 FB | 	rdlong	arg01, fp
185c4     50 4E 85 F1 | 	sub	fp, #80
185c8     00 3D 22 FF 
185cc     00 14 06 F6 | 	mov	arg02, ##1148846080
185d0     01 16 66 F6 | 	neg	arg03, #1
185d4     40 1D B1 FD | 	call	#__system___float_cmp
185d8     01 FA 55 F2 | 	cmps	result1, #1 wc
185dc     44 00 90 CD |  if_b	jmp	#LR__1959
185e0                 | LR__1958
185e0     0C 4E 05 F1 | 	add	fp, #12
185e4     A7 28 02 FB | 	rdlong	local02, fp
185e8     14 2B 02 F6 | 	mov	local03, local02
185ec     01 2A 66 F0 | 	shl	local03, #1
185f0     14 2B 02 F1 | 	add	local03, local02
185f4     03 2A 66 F0 | 	shl	local03, #3
185f8     14 00 00 FF 
185fc     38 E5 05 F1 | 	add	objptr, ##10552
18600     F2 2A 02 F1 | 	add	local03, objptr
18604     08 2A 06 F1 | 	add	local03, #8
18608     15 31 02 FB | 	rdlong	local06, local03
1860c     6C 4E 05 F1 | 	add	fp, #108
18610     A7 30 62 FC | 	wrlong	local06, fp
18614     78 4E 85 F1 | 	sub	fp, #120
18618     14 00 00 FF 
1861c     38 E5 85 F1 | 	sub	objptr, ##10552
18620     48 00 90 FD | 	jmp	#LR__1960
18624                 | LR__1959
18624     50 4E 05 F1 | 	add	fp, #80
18628     A7 30 02 FB | 	rdlong	local06, fp
1862c     28 4E 05 F1 | 	add	fp, #40
18630     A7 30 62 FC | 	wrlong	local06, fp
18634     6C 4E 85 F1 | 	sub	fp, #108
18638     A7 28 02 FB | 	rdlong	local02, fp
1863c     14 2B 02 F6 | 	mov	local03, local02
18640     01 2A 66 F0 | 	shl	local03, #1
18644     14 2B 02 F1 | 	add	local03, local02
18648     03 2A 66 F0 | 	shl	local03, #3
1864c     14 00 00 FF 
18650     38 E5 05 F1 | 	add	objptr, ##10552
18654     F2 2A 02 F1 | 	add	local03, objptr
18658     0C 4E 85 F1 | 	sub	fp, #12
1865c     08 2A 06 F1 | 	add	local03, #8
18660     15 31 62 FC | 	wrlong	local06, local03
18664     14 00 00 FF 
18668     38 E5 85 F1 | 	sub	objptr, ##10552
1866c                 | LR__1960
1866c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
1866c     54 4E 05 F1 | 	add	fp, #84
18670     A7 12 02 FB | 	rdlong	arg01, fp
18674     54 4E 85 F1 | 	sub	fp, #84
18678     00 C0 5F FF 
1867c     00 14 06 F6 | 	mov	arg02, ##-1082130432
18680     01 16 06 F6 | 	mov	arg03, #1
18684     90 1C B1 FD | 	call	#__system___float_cmp
18688     00 FA 55 F2 | 	cmps	result1, #0 wc
1868c     24 00 90 CD |  if_b	jmp	#LR__1961
18690     54 4E 05 F1 | 	add	fp, #84
18694     A7 12 02 FB | 	rdlong	arg01, fp
18698     54 4E 85 F1 | 	sub	fp, #84
1869c     00 C0 1F FF 
186a0     00 14 06 F6 | 	mov	arg02, ##1065353216
186a4     01 16 66 F6 | 	neg	arg03, #1
186a8     6C 1C B1 FD | 	call	#__system___float_cmp
186ac     01 FA 55 F2 | 	cmps	result1, #1 wc
186b0     44 00 90 CD |  if_b	jmp	#LR__1962
186b4                 | LR__1961
186b4     0C 4E 05 F1 | 	add	fp, #12
186b8     A7 28 02 FB | 	rdlong	local02, fp
186bc     14 2B 02 F6 | 	mov	local03, local02
186c0     01 2A 66 F0 | 	shl	local03, #1
186c4     14 2B 02 F1 | 	add	local03, local02
186c8     03 2A 66 F0 | 	shl	local03, #3
186cc     14 00 00 FF 
186d0     38 E5 05 F1 | 	add	objptr, ##10552
186d4     F2 2A 02 F1 | 	add	local03, objptr
186d8     10 2A 06 F1 | 	add	local03, #16
186dc     15 31 02 FB | 	rdlong	local06, local03
186e0     64 4E 05 F1 | 	add	fp, #100
186e4     A7 30 62 FC | 	wrlong	local06, fp
186e8     70 4E 85 F1 | 	sub	fp, #112
186ec     14 00 00 FF 
186f0     38 E5 85 F1 | 	sub	objptr, ##10552
186f4     48 00 90 FD | 	jmp	#LR__1963
186f8                 | LR__1962
186f8     54 4E 05 F1 | 	add	fp, #84
186fc     A7 30 02 FB | 	rdlong	local06, fp
18700     1C 4E 05 F1 | 	add	fp, #28
18704     A7 30 62 FC | 	wrlong	local06, fp
18708     64 4E 85 F1 | 	sub	fp, #100
1870c     A7 28 02 FB | 	rdlong	local02, fp
18710     14 2B 02 F6 | 	mov	local03, local02
18714     01 2A 66 F0 | 	shl	local03, #1
18718     14 2B 02 F1 | 	add	local03, local02
1871c     03 2A 66 F0 | 	shl	local03, #3
18720     14 00 00 FF 
18724     38 E5 05 F1 | 	add	objptr, ##10552
18728     F2 2A 02 F1 | 	add	local03, objptr
1872c     0C 4E 85 F1 | 	sub	fp, #12
18730     10 2A 06 F1 | 	add	local03, #16
18734     15 31 62 FC | 	wrlong	local06, local03
18738     14 00 00 FF 
1873c     38 E5 85 F1 | 	sub	objptr, ##10552
18740                 | LR__1963
18740                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
18740     58 4E 05 F1 | 	add	fp, #88
18744     A7 12 02 FB | 	rdlong	arg01, fp
18748     58 4E 85 F1 | 	sub	fp, #88
1874c     00 14 06 F6 | 	mov	arg02, #0
18750     01 16 06 F6 | 	mov	arg03, #1
18754     C0 1B B1 FD | 	call	#__system___float_cmp
18758     00 FA 55 F2 | 	cmps	result1, #0 wc
1875c     24 00 90 CD |  if_b	jmp	#LR__1964
18760     58 4E 05 F1 | 	add	fp, #88
18764     A7 12 02 FB | 	rdlong	arg01, fp
18768     58 4E 85 F1 | 	sub	fp, #88
1876c     80 BF 21 FF 
18770     00 14 06 F6 | 	mov	arg02, ##1132396544
18774     01 16 66 F6 | 	neg	arg03, #1
18778     9C 1B B1 FD | 	call	#__system___float_cmp
1877c     01 FA 55 F2 | 	cmps	result1, #1 wc
18780     44 00 90 CD |  if_b	jmp	#LR__1965
18784                 | LR__1964
18784     0C 4E 05 F1 | 	add	fp, #12
18788     A7 2A 02 FB | 	rdlong	local03, fp
1878c     15 33 02 F6 | 	mov	local07, local03
18790     01 32 66 F0 | 	shl	local07, #1
18794     15 33 02 F1 | 	add	local07, local03
18798     03 32 66 F0 | 	shl	local07, #3
1879c     14 00 00 FF 
187a0     38 E5 05 F1 | 	add	objptr, ##10552
187a4     F2 32 02 F1 | 	add	local07, objptr
187a8     14 32 06 F1 | 	add	local07, #20
187ac     19 2D E2 FA | 	rdword	local04, local07
187b0     20 4E 05 F1 | 	add	fp, #32
187b4     A7 2C 62 FC | 	wrlong	local04, fp
187b8     2C 4E 85 F1 | 	sub	fp, #44
187bc     14 00 00 FF 
187c0     38 E5 85 F1 | 	sub	objptr, ##10552
187c4     54 00 90 FD | 	jmp	#LR__1966
187c8                 | LR__1965
187c8     58 4E 05 F1 | 	add	fp, #88
187cc     A7 12 02 FB | 	rdlong	arg01, fp
187d0     58 4E 85 F1 | 	sub	fp, #88
187d4     01 14 06 F6 | 	mov	arg02, #1
187d8     D0 1B B1 FD | 	call	#__system___float_tointeger
187dc     2C 4E 05 F1 | 	add	fp, #44
187e0     A7 FA 61 FC | 	wrlong	result1, fp
187e4     20 4E 85 F1 | 	sub	fp, #32
187e8     A7 28 02 FB | 	rdlong	local02, fp
187ec     14 2B 02 F6 | 	mov	local03, local02
187f0     01 2A 66 F0 | 	shl	local03, #1
187f4     14 2B 02 F1 | 	add	local03, local02
187f8     03 2A 66 F0 | 	shl	local03, #3
187fc     14 00 00 FF 
18800     38 E5 05 F1 | 	add	objptr, ##10552
18804     F2 2A 02 F1 | 	add	local03, objptr
18808     0C 4E 85 F1 | 	sub	fp, #12
1880c     14 2A 06 F1 | 	add	local03, #20
18810     15 FB 51 FC | 	wrword	result1, local03
18814     14 00 00 FF 
18818     38 E5 85 F1 | 	sub	objptr, ##10552
1881c                 | LR__1966
1881c     6C 4E 05 F1 | 	add	fp, #108
18820     A7 14 02 FB | 	rdlong	arg02, fp
18824     6C 4E 85 F1 | 	sub	fp, #108
18828     FC 16 20 FF 
1882c     54 12 06 F6 | 	mov	arg01, ##1076754516
18830     80 26 B1 FD | 	call	#__system____builtin_logbase
18834     FD 2C 02 F6 | 	mov	local04, result1
18838     1E 14 C6 F9 | 	decod	arg02, #30
1883c     FC 16 20 FF 
18840     54 12 06 F6 | 	mov	arg01, ##1076754516
18844     6C 26 B1 FD | 	call	#__system____builtin_logbase
18848     FD 14 02 F6 | 	mov	arg02, result1
1884c     16 13 02 F6 | 	mov	arg01, local04
18850     94 18 B1 FD | 	call	#__system___float_div
18854     FD 12 02 F6 | 	mov	arg01, result1
18858     00 14 06 F6 | 	mov	arg02, #0
1885c     4C 1B B1 FD | 	call	#__system___float_tointeger
18860     30 4E 05 F1 | 	add	fp, #48
18864     A7 FA 61 FC | 	wrlong	result1, fp
18868     1E 2C C6 F9 | 	decod	local04, #30
1886c     FD 12 02 F6 | 	mov	arg01, result1
18870     30 4E 85 F1 | 	sub	fp, #48
18874     05 12 06 F1 | 	add	arg01, #5
18878     09 13 52 F6 | 	abs	arg01, arg01 wc
1887c     1F 34 C6 C9 |  if_b	decod	local08, #31
18880     00 34 06 36 |  if_ae	mov	local08, #0
18884     58 12 B1 FD | 	call	#__system___float_fromuns
18888     1A FB 61 F5 | 	xor	result1, local08
1888c     FD 14 02 F6 | 	mov	arg02, result1
18890     16 13 02 F6 | 	mov	arg01, local04
18894     54 25 B1 FD | 	call	#__system____builtin_powf
18898     FD 12 02 F6 | 	mov	arg01, result1
1889c     01 14 06 F6 | 	mov	arg02, #1
188a0     08 1B B1 FD | 	call	#__system___float_tointeger
188a4     10 4E 05 F1 | 	add	fp, #16
188a8     A7 FA 61 FC | 	wrlong	result1, fp
188ac                 | ' skip=round(2^(lfreq+5))
188ac                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
188ac     10 4E 85 F1 | 	sub	fp, #16
188b0     40 00 00 FF 
188b4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
188b8     30 00 90 CD |  if_b	jmp	#LR__1967
188bc     10 4E 05 F1 | 	add	fp, #16
188c0     A7 26 02 FB | 	rdlong	local01, fp
188c4     13 2D 52 F6 | 	abs	local04, local01 wc
188c8     0F 2C 46 F0 | 	shr	local04, #15
188cc     16 2D 82 F6 | 	negc	local04, local04
188d0     0C 4E 85 F1 | 	sub	fp, #12
188d4     A7 2C 62 FC | 	wrlong	local04, fp
188d8     0C 4E 05 F1 | 	add	fp, #12
188dc     40 00 80 FF 
188e0     A7 00 68 FC | 	wrlong	##32768, fp
188e4     10 4E 85 F1 | 	sub	fp, #16
188e8     0C 00 90 FD | 	jmp	#LR__1968
188ec                 | LR__1967
188ec     04 4E 05 F1 | 	add	fp, #4
188f0     A7 02 68 FC | 	wrlong	#1, fp
188f4     04 4E 85 F1 | 	sub	fp, #4
188f8                 | LR__1968
188f8     6C 4E 05 F1 | 	add	fp, #108
188fc     A7 14 02 FB | 	rdlong	arg02, fp
18900     6C 4E 85 F1 | 	sub	fp, #108
18904     3E 2C 25 FF 
18908     3C 12 06 F6 | 	mov	arg01, ##1247312956
1890c     D8 17 B1 FD | 	call	#__system___float_div
18910     FD 2C 02 F6 | 	mov	local04, result1
18914     04 4E 05 F1 | 	add	fp, #4
18918     A7 12 02 FB | 	rdlong	arg01, fp
1891c     04 4E 85 F1 | 	sub	fp, #4
18920     09 13 52 F6 | 	abs	arg01, arg01 wc
18924     1F 34 C6 C9 |  if_b	decod	local08, #31
18928     00 34 06 36 |  if_ae	mov	local08, #0
1892c     B0 11 B1 FD | 	call	#__system___float_fromuns
18930     1A FB 61 F5 | 	xor	result1, local08
18934     FD 26 02 F6 | 	mov	local01, result1
18938     1E 28 C6 F9 | 	decod	local02, #30
1893c     0D 12 06 F6 | 	mov	arg01, #13
18940     30 4E 05 F1 | 	add	fp, #48
18944     A7 30 02 FB | 	rdlong	local06, fp
18948     30 4E 85 F1 | 	sub	fp, #48
1894c     18 13 82 F1 | 	sub	arg01, local06
18950     09 13 52 F6 | 	abs	arg01, arg01 wc
18954     1F 34 C6 C9 |  if_b	decod	local08, #31
18958     00 34 06 36 |  if_ae	mov	local08, #0
1895c     80 11 B1 FD | 	call	#__system___float_fromuns
18960     1A FB 61 F5 | 	xor	result1, local08
18964     FD 14 02 F6 | 	mov	arg02, result1
18968     14 13 02 F6 | 	mov	arg01, local02
1896c     7C 24 B1 FD | 	call	#__system____builtin_powf
18970     FD 14 02 F6 | 	mov	arg02, result1
18974     13 13 02 F6 | 	mov	arg01, local01
18978     68 15 B1 FD | 	call	#__system___float_mul
1897c     FD 14 02 F6 | 	mov	arg02, result1
18980     16 13 02 F6 | 	mov	arg01, local04
18984     60 17 B1 FD | 	call	#__system___float_div
18988     FD 12 02 F6 | 	mov	arg01, result1
1898c     01 14 06 F6 | 	mov	arg02, #1
18990     18 1A B1 FD | 	call	#__system___float_tointeger
18994     34 4E 05 F1 | 	add	fp, #52
18998     A7 FA 61 FC | 	wrlong	result1, fp
1899c     34 4E 05 F1 | 	add	fp, #52
189a0     A7 12 02 FB | 	rdlong	arg01, fp
189a4     10 4E 05 F1 | 	add	fp, #16
189a8     A7 14 02 FB | 	rdlong	arg02, fp
189ac     78 4E 85 F1 | 	sub	fp, #120
189b0     34 17 B1 FD | 	call	#__system___float_div
189b4     FD 12 02 F6 | 	mov	arg01, result1
189b8     01 14 06 F6 | 	mov	arg02, #1
189bc     EC 19 B1 FD | 	call	#__system___float_tointeger
189c0     FD 2C 02 F6 | 	mov	local04, result1
189c4     14 4E 05 F1 | 	add	fp, #20
189c8     A7 2C 62 FC | 	wrlong	local04, fp
189cc     5C 4E 05 F1 | 	add	fp, #92
189d0     A7 14 02 FB | 	rdlong	arg02, fp
189d4     70 4E 85 F1 | 	sub	fp, #112
189d8     00 00 23 FF 
189dc     00 12 06 F6 | 	mov	arg01, ##1174405120
189e0     00 15 B1 FD | 	call	#__system___float_mul
189e4     FD 12 02 F6 | 	mov	arg01, result1
189e8     01 14 06 F6 | 	mov	arg02, #1
189ec     BC 19 B1 FD | 	call	#__system___float_tointeger
189f0     0D 2C C6 F9 | 	decod	local04, #13
189f4     FD 2C 02 F1 | 	add	local04, result1
189f8     18 4E 05 F1 | 	add	fp, #24
189fc     A7 2C 62 FC | 	wrlong	local04, fp
18a00     5C 4E 05 F1 | 	add	fp, #92
18a04     A7 14 02 FB | 	rdlong	arg02, fp
18a08     74 4E 85 F1 | 	sub	fp, #116
18a0c     00 3D 22 FF 
18a10     00 12 06 F6 | 	mov	arg01, ##1148846080
18a14     CC 14 B1 FD | 	call	#__system___float_mul
18a18     FD 12 02 F6 | 	mov	arg01, result1
18a1c     01 14 06 F6 | 	mov	arg02, #1
18a20     88 19 B1 FD | 	call	#__system___float_tointeger
18a24     1C 4E 05 F1 | 	add	fp, #28
18a28     A7 FA 61 FC | 	wrlong	result1, fp
18a2c     37 00 00 FF 
18a30     10 E4 05 F1 | 	add	objptr, ##28176
18a34     F2 2C 02 FB | 	rdlong	local04, objptr
18a38     37 00 00 FF 
18a3c     10 E4 85 F1 | 	sub	objptr, ##28176
18a40     10 4E 85 F1 | 	sub	fp, #16
18a44     A7 28 02 FB | 	rdlong	local02, fp
18a48     06 28 66 F0 | 	shl	local02, #6
18a4c     14 2D 02 F1 | 	add	local04, local02
18a50     04 4E 85 F1 | 	sub	fp, #4
18a54     A7 2C 62 FC | 	wrlong	local04, fp
18a58                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
18a58                 | ' speed=round(speed_coeff/slen)
18a58                 | ' ipan=8192+round(8192*pan)
18a58                 | ' ivol=round(1000.0*vol)
18a58                 | ' base2=base+64*channel
18a58                 | ' if wave <32 then 
18a58     18 4E 05 F1 | 	add	fp, #24
18a5c     A7 2C 02 FB | 	rdlong	local04, fp
18a60     20 4E 85 F1 | 	sub	fp, #32
18a64     20 2C 56 F2 | 	cmps	local04, #32 wc
18a68     2C 00 90 3D |  if_ae	jmp	#LR__1969
18a6c     08 4E 05 F1 | 	add	fp, #8
18a70     A7 12 02 FB | 	rdlong	arg01, fp
18a74     08 12 06 F1 | 	add	arg01, #8
18a78     18 4E 05 F1 | 	add	fp, #24
18a7c     A7 14 02 FB | 	rdlong	arg02, fp
18a80     20 4E 85 F1 | 	sub	fp, #32
18a84     0B 14 66 F0 | 	shl	arg02, #11
18a88     00 00 60 FF 
18a8c     00 14 06 F1 | 	add	arg02, ##-1073741824
18a90     09 15 62 FC | 	wrlong	arg02, arg01
18a94     18 00 90 FD | 	jmp	#LR__1970
18a98                 | LR__1969
18a98     08 4E 05 F1 | 	add	fp, #8
18a9c     A7 12 02 FB | 	rdlong	arg01, fp
18aa0     08 4E 85 F1 | 	sub	fp, #8
18aa4     08 12 06 F1 | 	add	arg01, #8
18aa8     00 00 E4 FF 
18aac     09 01 68 FC | 	wrlong	##-939524096, arg01
18ab0                 | LR__1970
18ab0     08 4E 05 F1 | 	add	fp, #8
18ab4     A7 12 02 FB | 	rdlong	arg01, fp
18ab8     10 12 06 F1 | 	add	arg01, #16
18abc     04 00 80 FF 
18ac0     09 01 68 FC | 	wrlong	##2048, arg01
18ac4     A7 12 02 FB | 	rdlong	arg01, fp
18ac8     0C 12 06 F1 | 	add	arg01, #12
18acc     09 01 68 FC | 	wrlong	#0, arg01
18ad0     A7 12 02 FB | 	rdlong	arg01, fp
18ad4     14 12 06 F1 | 	add	arg01, #20
18ad8     14 4E 05 F1 | 	add	fp, #20
18adc     A7 14 02 FB | 	rdlong	arg02, fp
18ae0     09 15 52 FC | 	wrword	arg02, arg01
18ae4     14 4E 85 F1 | 	sub	fp, #20
18ae8     A7 12 02 FB | 	rdlong	arg01, fp
18aec     16 12 06 F1 | 	add	arg01, #22
18af0     10 4E 05 F1 | 	add	fp, #16
18af4     A7 14 02 FB | 	rdlong	arg02, fp
18af8     09 15 52 FC | 	wrword	arg02, arg01
18afc                 | ' lpoke base2+16,2048
18afc                 | ' lpoke base2+12,0
18afc                 | ' dpoke base2+20,ivol 
18afc                 | ' dpoke base2+22,ipan 
18afc                 | ' if wave<32 then
18afc     08 4E 05 F1 | 	add	fp, #8
18b00     A7 2C 02 FB | 	rdlong	local04, fp
18b04     20 4E 85 F1 | 	sub	fp, #32
18b08     20 2C 56 F2 | 	cmps	local04, #32 wc
18b0c     38 00 90 3D |  if_ae	jmp	#LR__1971
18b10     08 4E 05 F1 | 	add	fp, #8
18b14     A7 12 02 FB | 	rdlong	arg01, fp
18b18     18 12 06 F1 | 	add	arg01, #24
18b1c     2C 4E 05 F1 | 	add	fp, #44
18b20     A7 14 02 FB | 	rdlong	arg02, fp
18b24     09 15 52 FC | 	wrword	arg02, arg01
18b28     2C 4E 85 F1 | 	sub	fp, #44
18b2c     A7 12 02 FB | 	rdlong	arg01, fp
18b30     1A 12 06 F1 | 	add	arg01, #26
18b34     08 4E 05 F1 | 	add	fp, #8
18b38     A7 14 02 FB | 	rdlong	arg02, fp
18b3c     10 4E 85 F1 | 	sub	fp, #16
18b40     09 15 52 FC | 	wrword	arg02, arg01
18b44     48 00 90 FD | 	jmp	#LR__1972
18b48                 | LR__1971
18b48     08 4E 05 F1 | 	add	fp, #8
18b4c     A7 2C 02 FB | 	rdlong	local04, fp
18b50     18 2C 06 F1 | 	add	local04, #24
18b54     64 4E 05 F1 | 	add	fp, #100
18b58     A7 14 02 FB | 	rdlong	arg02, fp
18b5c     6C 4E 85 F1 | 	sub	fp, #108
18b60     3E 2C 25 FF 
18b64     3C 12 06 F6 | 	mov	arg01, ##1247312956
18b68     7C 15 B1 FD | 	call	#__system___float_div
18b6c     FD 12 02 F6 | 	mov	arg01, result1
18b70     01 14 06 F6 | 	mov	arg02, #1
18b74     34 18 B1 FD | 	call	#__system___float_tointeger
18b78     16 FB 51 FC | 	wrword	result1, local04
18b7c     08 4E 05 F1 | 	add	fp, #8
18b80     A7 12 02 FB | 	rdlong	arg01, fp
18b84     08 4E 85 F1 | 	sub	fp, #8
18b88     1A 12 06 F1 | 	add	arg01, #26
18b8c     09 01 5A FC | 	wrword	#256, arg01
18b90                 | LR__1972
18b90     08 4E 05 F1 | 	add	fp, #8
18b94     A7 12 02 FB | 	rdlong	arg01, fp
18b98     1C 12 06 F1 | 	add	arg01, #28
18b9c     09 01 68 FC | 	wrlong	#0, arg01
18ba0     A7 12 02 FB | 	rdlong	arg01, fp
18ba4     20 12 06 F1 | 	add	arg01, #32
18ba8     09 01 68 FC | 	wrlong	#0, arg01
18bac                 | ' lpoke base2+28,$0000_0000
18bac                 | ' lpoke base2+32,0 
18bac                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
18bac     1C 4E 05 F1 | 	add	fp, #28
18bb0     A7 2C 02 FB | 	rdlong	local04, fp
18bb4     24 4E 85 F1 | 	sub	fp, #36
18bb8     08 2C 0E F2 | 	cmp	local04, #8 wz
18bbc     18 00 90 5D |  if_ne	jmp	#LR__1973
18bc0     08 4E 05 F1 | 	add	fp, #8
18bc4     A7 12 02 FB | 	rdlong	arg01, fp
18bc8     08 4E 85 F1 | 	sub	fp, #8
18bcc     24 12 06 F1 | 	add	arg01, #36
18bd0     09 01 68 FC | 	wrlong	#0, arg01
18bd4     34 00 90 FD | 	jmp	#LR__1974
18bd8                 | LR__1973
18bd8     08 4E 05 F1 | 	add	fp, #8
18bdc     A7 12 02 FB | 	rdlong	arg01, fp
18be0     24 12 06 F1 | 	add	arg01, #36
18be4     1C 4E 05 F1 | 	add	fp, #28
18be8     A7 14 02 FB | 	rdlong	arg02, fp
18bec     24 4E 85 F1 | 	sub	fp, #36
18bf0     09 14 66 F0 | 	shl	arg02, #9
18bf4     0C 00 00 FF 
18bf8     D8 E4 05 F1 | 	add	objptr, ##6360
18bfc     F2 14 02 F1 | 	add	arg02, objptr
18c00     0C 00 00 FF 
18c04     D8 E4 85 F1 | 	sub	objptr, ##6360
18c08     09 15 62 FC | 	wrlong	arg02, arg01
18c0c                 | LR__1974
18c0c     08 4E 05 F1 | 	add	fp, #8
18c10     A7 12 02 FB | 	rdlong	arg01, fp
18c14     28 12 06 F1 | 	add	arg01, #40
18c18     0C 4E 05 F1 | 	add	fp, #12
18c1c     A7 14 02 FB | 	rdlong	arg02, fp
18c20     09 15 62 FC | 	wrlong	arg02, arg01
18c24     0C 4E 85 F1 | 	sub	fp, #12
18c28     A7 12 02 FB | 	rdlong	arg01, fp
18c2c     2C 12 06 F1 | 	add	arg01, #44
18c30     24 4E 05 F1 | 	add	fp, #36
18c34     A7 14 02 FB | 	rdlong	arg02, fp
18c38     09 15 62 FC | 	wrlong	arg02, arg01
18c3c                 | ' lpoke base2+40,speed 
18c3c                 | ' lpoke base2+44,sus 
18c3c                 | ' if delay>0 then waitms(delay) 
18c3c     04 4E 85 F1 | 	sub	fp, #4
18c40     A7 2C 02 FB | 	rdlong	local04, fp
18c44     28 4E 85 F1 | 	sub	fp, #40
18c48     01 2C 56 F2 | 	cmps	local04, #1 wc
18c4c     28 4E 05 31 |  if_ae	add	fp, #40
18c50     A7 12 02 3B |  if_ae	rdlong	arg01, fp
18c54     28 4E 85 31 |  if_ae	sub	fp, #40
18c58     04 E7 B0 3D |  if_ae	call	#__system___waitms
18c5c     A7 F0 03 F6 | 	mov	ptra, fp
18c60     B2 00 A0 FD | 	call	#popregs_
18c64                 | _do_play_ret
18c64     2D 00 64 FD | 	ret
18c68                 | 
18c68                 | ' 
18c68                 | ' '-------------------- plot
18c68                 | ' 
18c68                 | ' sub do_plot
18c68                 | _do_plot
18c68     00 4A 05 F6 | 	mov	COUNT_, #0
18c6c     A8 00 A0 FD | 	call	#pushregs_
18c70     20 F0 07 F1 | 	add	ptra, #32
18c74     90 4A BF FD | 	call	#_pop
18c78     FD 16 02 F6 | 	mov	arg03, result1
18c7c     FE 14 02 F6 | 	mov	arg02, result2
18c80     FF 12 02 F6 | 	mov	arg01, result3
18c84     0C 4E 05 F1 | 	add	fp, #12
18c88     A7 16 62 FC | 	wrlong	arg03, fp
18c8c     04 4E 05 F1 | 	add	fp, #4
18c90     A7 14 62 FC | 	wrlong	arg02, fp
18c94     04 4E 05 F1 | 	add	fp, #4
18c98     A7 12 62 FC | 	wrlong	arg01, fp
18c9c     14 4E 85 F1 | 	sub	fp, #20
18ca0     64 4A BF FD | 	call	#_pop
18ca4     FF 16 02 F6 | 	mov	arg03, result3
18ca8     A7 FA 61 FC | 	wrlong	result1, fp
18cac     04 4E 05 F1 | 	add	fp, #4
18cb0     A7 FC 61 FC | 	wrlong	result2, fp
18cb4     04 4E 05 F1 | 	add	fp, #4
18cb8     A7 16 62 FC | 	wrlong	arg03, fp
18cbc     08 4E 85 F1 | 	sub	fp, #8
18cc0     A7 12 02 F6 | 	mov	arg01, fp
18cc4     24 4C BF FD | 	call	#_converttoint
18cc8     18 4E 05 F1 | 	add	fp, #24
18ccc     A7 FA 61 FC | 	wrlong	result1, fp
18cd0     0C 4E 85 F1 | 	sub	fp, #12
18cd4     A7 12 02 F6 | 	mov	arg01, fp
18cd8     0C 4E 85 F1 | 	sub	fp, #12
18cdc     0C 4C BF FD | 	call	#_converttoint
18ce0     1C 4E 05 F1 | 	add	fp, #28
18ce4     A7 FA 61 FC | 	wrlong	result1, fp
18ce8     04 4E 85 F1 | 	sub	fp, #4
18cec     A7 16 02 FB | 	rdlong	arg03, fp
18cf0     37 00 00 FF 
18cf4     2C E4 05 F1 | 	add	objptr, ##28204
18cf8     F2 16 62 FC | 	wrlong	arg03, objptr
18cfc     04 4E 05 F1 | 	add	fp, #4
18d00     A7 14 02 FB | 	rdlong	arg02, fp
18d04     1C 4E 85 F1 | 	sub	fp, #28
18d08     04 E4 05 F1 | 	add	objptr, #4
18d0c     F2 14 62 FC | 	wrlong	arg02, objptr
18d10     04 E4 85 F1 | 	sub	objptr, #4
18d14     F2 12 02 FB | 	rdlong	arg01, objptr
18d18     04 E4 85 F1 | 	sub	objptr, #4
18d1c     F2 16 02 FB | 	rdlong	arg03, objptr
18d20     37 00 00 FF 
18d24     28 E4 85 F1 | 	sub	objptr, ##28200
18d28     48 B9 B0 FD | 	call	#_hg010b_spin2_putpixel
18d2c     A7 F0 03 F6 | 	mov	ptra, fp
18d30     B2 00 A0 FD | 	call	#popregs_
18d34                 | _do_plot_ret
18d34     2D 00 64 FD | 	ret
18d38                 | 
18d38                 | ' 
18d38                 | ' '-------------------- poke
18d38                 | ' 
18d38                 | ' sub do_poke
18d38                 | _do_poke
18d38     01 4A 05 F6 | 	mov	COUNT_, #1
18d3c     A8 00 A0 FD | 	call	#pushregs_
18d40     20 F0 07 F1 | 	add	ptra, #32
18d44     C0 49 BF FD | 	call	#_pop
18d48     FD 14 02 F6 | 	mov	arg02, result1
18d4c     FE 12 02 F6 | 	mov	arg01, result2
18d50     FF 26 02 F6 | 	mov	local01, result3
18d54     A7 14 62 FC | 	wrlong	arg02, fp
18d58     04 4E 05 F1 | 	add	fp, #4
18d5c     A7 12 62 FC | 	wrlong	arg01, fp
18d60     04 4E 05 F1 | 	add	fp, #4
18d64     A7 26 62 FC | 	wrlong	local01, fp
18d68     08 4E 85 F1 | 	sub	fp, #8
18d6c     98 49 BF FD | 	call	#_pop
18d70     FF 26 02 F6 | 	mov	local01, result3
18d74     0C 4E 05 F1 | 	add	fp, #12
18d78     A7 FA 61 FC | 	wrlong	result1, fp
18d7c     04 4E 05 F1 | 	add	fp, #4
18d80     A7 FC 61 FC | 	wrlong	result2, fp
18d84     04 4E 05 F1 | 	add	fp, #4
18d88     A7 26 62 FC | 	wrlong	local01, fp
18d8c     08 4E 85 F1 | 	sub	fp, #8
18d90     A7 12 02 F6 | 	mov	arg01, fp
18d94     0C 4E 85 F1 | 	sub	fp, #12
18d98     50 4B BF FD | 	call	#_converttoint
18d9c     18 4E 05 F1 | 	add	fp, #24
18da0     A7 FA 61 FC | 	wrlong	result1, fp
18da4     18 4E 85 F1 | 	sub	fp, #24
18da8     A7 12 02 F6 | 	mov	arg01, fp
18dac     3C 4B BF FD | 	call	#_converttoint
18db0     1C 4E 05 F1 | 	add	fp, #28
18db4     A7 FA 61 FC | 	wrlong	result1, fp
18db8                 | ' t1=pop() 'value
18db8                 | ' t2=pop() 
18db8                 | ' a=converttoint(t2) : v=converttoint(t1)
18db8                 | ' if a<$80000 then poke a,v else pspoke a,v
18db8     04 4E 85 F1 | 	sub	fp, #4
18dbc     A7 26 02 FB | 	rdlong	local01, fp
18dc0     18 4E 85 F1 | 	sub	fp, #24
18dc4     00 04 00 FF 
18dc8     00 26 16 F2 | 	cmp	local01, ##524288 wc
18dcc     1C 00 90 3D |  if_ae	jmp	#LR__1980
18dd0     18 4E 05 F1 | 	add	fp, #24
18dd4     A7 12 02 FB | 	rdlong	arg01, fp
18dd8     04 4E 05 F1 | 	add	fp, #4
18ddc     A7 14 02 FB | 	rdlong	arg02, fp
18de0     1C 4E 85 F1 | 	sub	fp, #28
18de4     09 15 42 FC | 	wrbyte	arg02, arg01
18de8     18 00 90 FD | 	jmp	#LR__1981
18dec                 | LR__1980
18dec     18 4E 05 F1 | 	add	fp, #24
18df0     A7 12 02 FB | 	rdlong	arg01, fp
18df4     04 4E 05 F1 | 	add	fp, #4
18df8     A7 14 02 FB | 	rdlong	arg02, fp
18dfc     1C 4E 85 F1 | 	sub	fp, #28
18e00     EC A9 B0 FD | 	call	#_pspoke
18e04                 | LR__1981
18e04     A7 F0 03 F6 | 	mov	ptra, fp
18e08     B2 00 A0 FD | 	call	#popregs_
18e0c                 | _do_poke_ret
18e0c     2D 00 64 FD | 	ret
18e10                 | 
18e10                 | ' 
18e10                 | ' '-------------------- pop
18e10                 | ' 
18e10                 | ' sub do_pop()
18e10                 | _do_pop
18e10                 | ' if gosubtop>0 then  gosubtop -=1 
18e10     50 00 00 FF 
18e14     34 E5 05 F1 | 	add	objptr, ##41268
18e18     F2 00 02 FB | 	rdlong	_var01, objptr
18e1c     50 00 00 FF 
18e20     34 E5 85 F1 | 	sub	objptr, ##41268
18e24     01 00 56 F2 | 	cmps	_var01, #1 wc
18e28     50 00 00 3F 
18e2c     34 E5 05 31 |  if_ae	add	objptr, ##41268
18e30     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
18e34     01 00 86 31 |  if_ae	sub	_var01, #1
18e38     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
18e3c     50 00 00 3F 
18e40     34 E5 85 31 |  if_ae	sub	objptr, ##41268
18e44                 | _do_pop_ret
18e44     2D 00 64 FD | 	ret
18e48                 | 
18e48                 | ' 
18e48                 | ' '-------------------- position
18e48                 | ' 
18e48                 | ' sub do_position
18e48                 | _do_position
18e48     01 4A 05 F6 | 	mov	COUNT_, #1
18e4c     A8 00 A0 FD | 	call	#pushregs_
18e50     18 F0 07 F1 | 	add	ptra, #24
18e54     B0 48 BF FD | 	call	#_pop
18e58     FD 14 02 F6 | 	mov	arg02, result1
18e5c     FE 12 02 F6 | 	mov	arg01, result2
18e60     FF 26 02 F6 | 	mov	local01, result3
18e64     A7 14 62 FC | 	wrlong	arg02, fp
18e68     04 4E 05 F1 | 	add	fp, #4
18e6c     A7 12 62 FC | 	wrlong	arg01, fp
18e70     04 4E 05 F1 | 	add	fp, #4
18e74     A7 26 62 FC | 	wrlong	local01, fp
18e78     08 4E 85 F1 | 	sub	fp, #8
18e7c     88 48 BF FD | 	call	#_pop
18e80     FF 26 02 F6 | 	mov	local01, result3
18e84     0C 4E 05 F1 | 	add	fp, #12
18e88     A7 FA 61 FC | 	wrlong	result1, fp
18e8c     04 4E 05 F1 | 	add	fp, #4
18e90     A7 FC 61 FC | 	wrlong	result2, fp
18e94     04 4E 05 F1 | 	add	fp, #4
18e98     A7 26 62 FC | 	wrlong	local01, fp
18e9c     08 4E 85 F1 | 	sub	fp, #8
18ea0     A7 12 02 F6 | 	mov	arg01, fp
18ea4     0C 4E 85 F1 | 	sub	fp, #12
18ea8     40 4A BF FD | 	call	#_converttoint
18eac     FD 26 02 F6 | 	mov	local01, result1
18eb0     A7 12 02 F6 | 	mov	arg01, fp
18eb4     34 4A BF FD | 	call	#_converttoint
18eb8     FD 14 02 F6 | 	mov	arg02, result1
18ebc     13 13 02 F6 | 	mov	arg01, local01
18ec0     74 C3 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18ec4     A7 F0 03 F6 | 	mov	ptra, fp
18ec8     B2 00 A0 FD | 	call	#popregs_
18ecc                 | _do_position_ret
18ecc     2D 00 64 FD | 	ret
18ed0                 | 
18ed0                 | ' 
18ed0                 | ' '-------------------- print
18ed0                 | ' 
18ed0                 | ' sub do_print  
18ed0                 | _do_print
18ed0     0B 4A 05 F6 | 	mov	COUNT_, #11
18ed4     A8 00 A0 FD | 	call	#pushregs_
18ed8     00 2C 06 F6 | 	mov	local04, #0
18edc     28 48 BF FD | 	call	#_pop
18ee0     FD 2E 02 F6 | 	mov	local05, result1
18ee4     FE 30 02 F6 | 	mov	local06, result2
18ee8     FF 32 02 F6 | 	mov	local07, result3
18eec     17 27 02 F6 | 	mov	local01, local05
18ef0     18 29 02 F6 | 	mov	local02, local06
18ef4     19 2B 02 F6 | 	mov	local03, local07
18ef8                 | '  
18ef8                 | ' r=0
18ef8                 | ' t1=pop() 
18ef8                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18ef8     21 2A 0E F2 | 	cmp	local03, #33 wz
18efc     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18f00     20 00 90 5D |  if_ne	jmp	#LR__1990
18f04     15 2D 02 F6 | 	mov	local04, local03
18f08     FC 47 BF FD | 	call	#_pop
18f0c     FD 2E 02 F6 | 	mov	local05, result1
18f10     FE 30 02 F6 | 	mov	local06, result2
18f14     FF 32 02 F6 | 	mov	local07, result3
18f18     17 27 02 F6 | 	mov	local01, local05
18f1c     18 29 02 F6 | 	mov	local02, local06
18f20     19 2B 02 F6 | 	mov	local03, local07
18f24                 | LR__1990
18f24                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18f24     20 2A 0E F2 | 	cmp	local03, #32 wz
18f28     15 2D 02 A6 |  if_e	mov	local04, local03
18f2c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18f2c     FF 2A 0E F2 | 	cmp	local03, #255 wz
18f30     10 00 90 5D |  if_ne	jmp	#LR__1991
18f34     13 13 02 F6 | 	mov	arg01, local01
18f38     00 14 06 F6 | 	mov	arg02, #0
18f3c     80 A6 B0 FD | 	call	#_printerror
18f40     D4 04 90 FD | 	jmp	#LR__2010
18f44                 | LR__1991
18f44                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18f44     2B 2A 0E F2 | 	cmp	local03, #43 wz
18f48     14 00 90 5D |  if_ne	jmp	#LR__1992
18f4c     13 13 02 F6 | 	mov	arg01, local01
18f50     2C 49 BF FD | 	call	#_convertstring
18f54     FD 2E 02 F6 | 	mov	local05, result1
18f58     17 27 02 F6 | 	mov	local01, local05
18f5c     1F 2A 06 F6 | 	mov	local03, #31
18f60                 | LR__1992
18f60                 | ' 
18f60                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18f60     2C 2A 0E F2 | 	cmp	local03, #44 wz
18f64     80 00 90 5D |  if_ne	jmp	#LR__1993
18f68     00 12 06 F6 | 	mov	arg01, #0
18f6c     24 3E B1 FD | 	call	#__system___getiolock_0616
18f70     FD 12 02 F6 | 	mov	arg01, result1
18f74     F4 E0 B0 FD | 	call	#__system___lockmem
18f78     BB 01 00 FF 
18f7c     E5 14 06 F6 | 	mov	arg02, ##@LR__6005
18f80     00 12 06 F6 | 	mov	arg01, #0
18f84     00 16 06 F6 | 	mov	arg03, #0
18f88     D4 ED B0 FD | 	call	#__system___basic_print_string
18f8c     0A 34 06 F6 | 	mov	local08, #10
18f90     00 12 06 F6 | 	mov	arg01, #0
18f94     13 15 02 F6 | 	mov	arg02, local01
18f98     00 16 06 F6 | 	mov	arg03, #0
18f9c     0A 18 06 F6 | 	mov	arg04, #10
18fa0     00 EE B0 FD | 	call	#__system___basic_print_integer
18fa4     FD 36 02 F6 | 	mov	local09, result1
18fa8     00 12 06 F6 | 	mov	arg01, #0
18fac     0A 14 06 F6 | 	mov	arg02, #10
18fb0     00 16 06 F6 | 	mov	arg03, #0
18fb4     50 ED B0 FD | 	call	#__system___basic_print_char
18fb8     01 38 06 F6 | 	mov	local10, #1
18fbc     00 12 06 F6 | 	mov	arg01, #0
18fc0     D0 3D B1 FD | 	call	#__system___getiolock_0616
18fc4     FD 00 68 FC | 	wrlong	#0, result1
18fc8     00 3A 06 F6 | 	mov	local11, #0
18fcc     38 47 BF FD | 	call	#_pop
18fd0     FD 2E 02 F6 | 	mov	local05, result1
18fd4     FE 30 02 F6 | 	mov	local06, result2
18fd8     FF 32 02 F6 | 	mov	local07, result3
18fdc     17 27 02 F6 | 	mov	local01, local05
18fe0     18 29 02 F6 | 	mov	local02, local06
18fe4     19 2B 02 F6 | 	mov	local03, local07
18fe8                 | LR__1993
18fe8                 | ' 
18fe8                 | ' if r=print_mod_comma  then
18fe8     21 2C 0E F2 | 	cmp	local04, #33 wz
18fec     AC 01 90 5D |  if_ne	jmp	#LR__1998
18ff0                 | '   if t1.result_type=result_int then print t1.result.iresult,
18ff0     1C 2A 0E F2 | 	cmp	local03, #28 wz
18ff4     64 00 90 5D |  if_ne	jmp	#LR__1994
18ff8     00 12 06 F6 | 	mov	arg01, #0
18ffc     94 3D B1 FD | 	call	#__system___getiolock_0616
19000     FD 12 02 F6 | 	mov	arg01, result1
19004     64 E0 B0 FD | 	call	#__system___lockmem
19008     00 30 06 F6 | 	mov	local06, #0
1900c     00 12 06 F6 | 	mov	arg01, #0
19010     13 15 02 F6 | 	mov	arg02, local01
19014     00 16 06 F6 | 	mov	arg03, #0
19018     0A 18 06 F6 | 	mov	arg04, #10
1901c     84 ED B0 FD | 	call	#__system___basic_print_integer
19020     FD 32 02 F6 | 	mov	local07, result1
19024     18 2F 02 F6 | 	mov	local05, local06
19028     19 2F 02 F1 | 	add	local05, local07
1902c     00 3A 06 F6 | 	mov	local11, #0
19030     00 12 06 F6 | 	mov	arg01, #0
19034     09 14 06 F6 | 	mov	arg02, #9
19038     00 16 06 F6 | 	mov	arg03, #0
1903c     C8 EC B0 FD | 	call	#__system___basic_print_char
19040     FD 36 02 F6 | 	mov	local09, result1
19044     FD 2E 02 F1 | 	add	local05, result1
19048     00 12 06 F6 | 	mov	arg01, #0
1904c     44 3D B1 FD | 	call	#__system___getiolock_0616
19050     FD 00 68 FC | 	wrlong	#0, result1
19054     00 FA 05 F6 | 	mov	result1, #0
19058     00 38 06 F6 | 	mov	local10, #0
1905c                 | LR__1994
1905c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1905c     1D 2A 0E F2 | 	cmp	local03, #29 wz
19060     64 00 90 5D |  if_ne	jmp	#LR__1995
19064     00 12 06 F6 | 	mov	arg01, #0
19068     28 3D B1 FD | 	call	#__system___getiolock_0616
1906c     FD 12 02 F6 | 	mov	arg01, result1
19070     F8 DF B0 FD | 	call	#__system___lockmem
19074     00 30 06 F6 | 	mov	local06, #0
19078     00 12 06 F6 | 	mov	arg01, #0
1907c     13 15 02 F6 | 	mov	arg02, local01
19080     00 16 06 F6 | 	mov	arg03, #0
19084     0A 18 06 F6 | 	mov	arg04, #10
19088     58 ED B0 FD | 	call	#__system___basic_print_unsigned
1908c     FD 32 02 F6 | 	mov	local07, result1
19090     18 2F 02 F6 | 	mov	local05, local06
19094     19 2F 02 F1 | 	add	local05, local07
19098     00 3A 06 F6 | 	mov	local11, #0
1909c     00 12 06 F6 | 	mov	arg01, #0
190a0     09 14 06 F6 | 	mov	arg02, #9
190a4     00 16 06 F6 | 	mov	arg03, #0
190a8     5C EC B0 FD | 	call	#__system___basic_print_char
190ac     FD 36 02 F6 | 	mov	local09, result1
190b0     FD 2E 02 F1 | 	add	local05, result1
190b4     00 12 06 F6 | 	mov	arg01, #0
190b8     D8 3C B1 FD | 	call	#__system___getiolock_0616
190bc     FD 00 68 FC | 	wrlong	#0, result1
190c0     00 FA 05 F6 | 	mov	result1, #0
190c4     00 38 06 F6 | 	mov	local10, #0
190c8                 | LR__1995
190c8                 | '   if t1.result_type=result_float then print t1.result.fresult,
190c8     1E 2A 0E F2 | 	cmp	local03, #30 wz
190cc     64 00 90 5D |  if_ne	jmp	#LR__1996
190d0     00 12 06 F6 | 	mov	arg01, #0
190d4     BC 3C B1 FD | 	call	#__system___getiolock_0616
190d8     FD 12 02 F6 | 	mov	arg01, result1
190dc     8C DF B0 FD | 	call	#__system___lockmem
190e0     00 30 06 F6 | 	mov	local06, #0
190e4     00 12 06 F6 | 	mov	arg01, #0
190e8     13 15 02 F6 | 	mov	arg02, local01
190ec     00 16 06 F6 | 	mov	arg03, #0
190f0     23 18 06 F6 | 	mov	arg04, #35
190f4     04 14 B1 FD | 	call	#__system___basic_print_float
190f8     FD 32 02 F6 | 	mov	local07, result1
190fc     18 2F 02 F6 | 	mov	local05, local06
19100     19 2F 02 F1 | 	add	local05, local07
19104     00 3A 06 F6 | 	mov	local11, #0
19108     00 12 06 F6 | 	mov	arg01, #0
1910c     09 14 06 F6 | 	mov	arg02, #9
19110     00 16 06 F6 | 	mov	arg03, #0
19114     F0 EB B0 FD | 	call	#__system___basic_print_char
19118     FD 36 02 F6 | 	mov	local09, result1
1911c     FD 2E 02 F1 | 	add	local05, result1
19120     00 12 06 F6 | 	mov	arg01, #0
19124     6C 3C B1 FD | 	call	#__system___getiolock_0616
19128     FD 00 68 FC | 	wrlong	#0, result1
1912c     00 FA 05 F6 | 	mov	result1, #0
19130     00 38 06 F6 | 	mov	local10, #0
19134                 | LR__1996
19134                 | '   if t1.result_type=result_string then print t1.result.sresult,
19134     1F 2A 0E F2 | 	cmp	local03, #31 wz
19138     60 00 90 5D |  if_ne	jmp	#LR__1997
1913c     00 12 06 F6 | 	mov	arg01, #0
19140     50 3C B1 FD | 	call	#__system___getiolock_0616
19144     FD 12 02 F6 | 	mov	arg01, result1
19148     20 DF B0 FD | 	call	#__system___lockmem
1914c     00 30 06 F6 | 	mov	local06, #0
19150     00 12 06 F6 | 	mov	arg01, #0
19154     13 15 02 F6 | 	mov	arg02, local01
19158     00 16 06 F6 | 	mov	arg03, #0
1915c     00 EC B0 FD | 	call	#__system___basic_print_string
19160     FD 32 02 F6 | 	mov	local07, result1
19164     18 2F 02 F6 | 	mov	local05, local06
19168     19 2F 02 F1 | 	add	local05, local07
1916c     00 3A 06 F6 | 	mov	local11, #0
19170     00 12 06 F6 | 	mov	arg01, #0
19174     09 14 06 F6 | 	mov	arg02, #9
19178     00 16 06 F6 | 	mov	arg03, #0
1917c     88 EB B0 FD | 	call	#__system___basic_print_char
19180     FD 36 02 F6 | 	mov	local09, result1
19184     FD 2E 02 F1 | 	add	local05, result1
19188     00 12 06 F6 | 	mov	arg01, #0
1918c     04 3C B1 FD | 	call	#__system___getiolock_0616
19190     FD 00 68 FC | 	wrlong	#0, result1
19194     00 FA 05 F6 | 	mov	result1, #0
19198     00 38 06 F6 | 	mov	local10, #0
1919c                 | LR__1997
1919c                 | LR__1998
1919c                 | ' if r=print_mod_semicolon then 
1919c     22 2C 0E F2 | 	cmp	local04, #34 wz
191a0     1C 01 90 5D |  if_ne	jmp	#LR__2003
191a4                 | '   if t1.result_type=result_int then print t1.result.iresult;
191a4     1C 2A 0E F2 | 	cmp	local03, #28 wz
191a8     50 00 90 5D |  if_ne	jmp	#LR__1999
191ac     00 12 06 F6 | 	mov	arg01, #0
191b0     E0 3B B1 FD | 	call	#__system___getiolock_0616
191b4     FD 12 02 F6 | 	mov	arg01, result1
191b8     B0 DE B0 FD | 	call	#__system___lockmem
191bc     00 30 06 F6 | 	mov	local06, #0
191c0     00 38 06 F6 | 	mov	local10, #0
191c4     0A 3A 06 F6 | 	mov	local11, #10
191c8     00 12 06 F6 | 	mov	arg01, #0
191cc     13 15 02 F6 | 	mov	arg02, local01
191d0     00 16 06 F6 | 	mov	arg03, #0
191d4     0A 18 06 F6 | 	mov	arg04, #10
191d8     C8 EB B0 FD | 	call	#__system___basic_print_integer
191dc     FD 32 02 F6 | 	mov	local07, result1
191e0     18 2F 02 F6 | 	mov	local05, local06
191e4     19 2F 02 F1 | 	add	local05, local07
191e8     00 12 06 F6 | 	mov	arg01, #0
191ec     A4 3B B1 FD | 	call	#__system___getiolock_0616
191f0     FD 00 68 FC | 	wrlong	#0, result1
191f4     00 FA 05 F6 | 	mov	result1, #0
191f8     00 36 06 F6 | 	mov	local09, #0
191fc                 | LR__1999
191fc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
191fc     1D 2A 0E F2 | 	cmp	local03, #29 wz
19200     50 00 90 5D |  if_ne	jmp	#LR__2000
19204     00 12 06 F6 | 	mov	arg01, #0
19208     88 3B B1 FD | 	call	#__system___getiolock_0616
1920c     FD 12 02 F6 | 	mov	arg01, result1
19210     58 DE B0 FD | 	call	#__system___lockmem
19214     00 30 06 F6 | 	mov	local06, #0
19218     00 38 06 F6 | 	mov	local10, #0
1921c     0A 3A 06 F6 | 	mov	local11, #10
19220     00 12 06 F6 | 	mov	arg01, #0
19224     13 15 02 F6 | 	mov	arg02, local01
19228     00 16 06 F6 | 	mov	arg03, #0
1922c     0A 18 06 F6 | 	mov	arg04, #10
19230     B0 EB B0 FD | 	call	#__system___basic_print_unsigned
19234     FD 32 02 F6 | 	mov	local07, result1
19238     18 2F 02 F6 | 	mov	local05, local06
1923c     19 2F 02 F1 | 	add	local05, local07
19240     00 12 06 F6 | 	mov	arg01, #0
19244     4C 3B B1 FD | 	call	#__system___getiolock_0616
19248     FD 00 68 FC | 	wrlong	#0, result1
1924c     00 FA 05 F6 | 	mov	result1, #0
19250     00 36 06 F6 | 	mov	local09, #0
19254                 | LR__2000
19254                 | '   if t1.result_type=result_float then print t1.result.fresult;
19254     1E 2A 0E F2 | 	cmp	local03, #30 wz
19258     30 00 90 5D |  if_ne	jmp	#LR__2001
1925c     00 12 06 F6 | 	mov	arg01, #0
19260     30 3B B1 FD | 	call	#__system___getiolock_0616
19264     FD 12 02 F6 | 	mov	arg01, result1
19268     00 DE B0 FD | 	call	#__system___lockmem
1926c     00 12 06 F6 | 	mov	arg01, #0
19270     13 15 02 F6 | 	mov	arg02, local01
19274     00 16 06 F6 | 	mov	arg03, #0
19278     23 18 06 F6 | 	mov	arg04, #35
1927c     7C 12 B1 FD | 	call	#__system___basic_print_float
19280     00 12 06 F6 | 	mov	arg01, #0
19284     0C 3B B1 FD | 	call	#__system___getiolock_0616
19288     FD 00 68 FC | 	wrlong	#0, result1
1928c                 | LR__2001
1928c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1928c     1F 2A 0E F2 | 	cmp	local03, #31 wz
19290     2C 00 90 5D |  if_ne	jmp	#LR__2002
19294     00 12 06 F6 | 	mov	arg01, #0
19298     F8 3A B1 FD | 	call	#__system___getiolock_0616
1929c     FD 12 02 F6 | 	mov	arg01, result1
192a0     C8 DD B0 FD | 	call	#__system___lockmem
192a4     00 12 06 F6 | 	mov	arg01, #0
192a8     13 15 02 F6 | 	mov	arg02, local01
192ac     00 16 06 F6 | 	mov	arg03, #0
192b0     AC EA B0 FD | 	call	#__system___basic_print_string
192b4     00 12 06 F6 | 	mov	arg01, #0
192b8     D8 3A B1 FD | 	call	#__system___getiolock_0616
192bc     FD 00 68 FC | 	wrlong	#0, result1
192c0                 | LR__2002
192c0                 | LR__2003
192c0                 | ' if r=0 then 
192c0     00 2C 0E F2 | 	cmp	local04, #0 wz
192c4     1C 01 90 5D |  if_ne	jmp	#LR__2008
192c8                 | '   if t1.result_type=result_int then print t1.result.iresult
192c8     1C 2A 0E F2 | 	cmp	local03, #28 wz
192cc     40 00 90 5D |  if_ne	jmp	#LR__2004
192d0     00 12 06 F6 | 	mov	arg01, #0
192d4     BC 3A B1 FD | 	call	#__system___getiolock_0616
192d8     FD 12 02 F6 | 	mov	arg01, result1
192dc     8C DD B0 FD | 	call	#__system___lockmem
192e0     00 12 06 F6 | 	mov	arg01, #0
192e4     13 15 02 F6 | 	mov	arg02, local01
192e8     00 16 06 F6 | 	mov	arg03, #0
192ec     0A 18 06 F6 | 	mov	arg04, #10
192f0     B0 EA B0 FD | 	call	#__system___basic_print_integer
192f4     00 12 06 F6 | 	mov	arg01, #0
192f8     0A 14 06 F6 | 	mov	arg02, #10
192fc     00 16 06 F6 | 	mov	arg03, #0
19300     04 EA B0 FD | 	call	#__system___basic_print_char
19304     00 12 06 F6 | 	mov	arg01, #0
19308     88 3A B1 FD | 	call	#__system___getiolock_0616
1930c     FD 00 68 FC | 	wrlong	#0, result1
19310                 | LR__2004
19310                 | '   if t1.result_type=result_uint then print t1.result.uresult
19310     1D 2A 0E F2 | 	cmp	local03, #29 wz
19314     40 00 90 5D |  if_ne	jmp	#LR__2005
19318     00 12 06 F6 | 	mov	arg01, #0
1931c     74 3A B1 FD | 	call	#__system___getiolock_0616
19320     FD 12 02 F6 | 	mov	arg01, result1
19324     44 DD B0 FD | 	call	#__system___lockmem
19328     00 12 06 F6 | 	mov	arg01, #0
1932c     13 15 02 F6 | 	mov	arg02, local01
19330     00 16 06 F6 | 	mov	arg03, #0
19334     0A 18 06 F6 | 	mov	arg04, #10
19338     A8 EA B0 FD | 	call	#__system___basic_print_unsigned
1933c     00 12 06 F6 | 	mov	arg01, #0
19340     0A 14 06 F6 | 	mov	arg02, #10
19344     00 16 06 F6 | 	mov	arg03, #0
19348     BC E9 B0 FD | 	call	#__system___basic_print_char
1934c     00 12 06 F6 | 	mov	arg01, #0
19350     40 3A B1 FD | 	call	#__system___getiolock_0616
19354     FD 00 68 FC | 	wrlong	#0, result1
19358                 | LR__2005
19358                 | '   if t1.result_type=result_float then print t1.result.fresult
19358     1E 2A 0E F2 | 	cmp	local03, #30 wz
1935c     40 00 90 5D |  if_ne	jmp	#LR__2006
19360     00 12 06 F6 | 	mov	arg01, #0
19364     2C 3A B1 FD | 	call	#__system___getiolock_0616
19368     FD 12 02 F6 | 	mov	arg01, result1
1936c     FC DC B0 FD | 	call	#__system___lockmem
19370     00 12 06 F6 | 	mov	arg01, #0
19374     13 15 02 F6 | 	mov	arg02, local01
19378     00 16 06 F6 | 	mov	arg03, #0
1937c     23 18 06 F6 | 	mov	arg04, #35
19380     78 11 B1 FD | 	call	#__system___basic_print_float
19384     00 12 06 F6 | 	mov	arg01, #0
19388     0A 14 06 F6 | 	mov	arg02, #10
1938c     00 16 06 F6 | 	mov	arg03, #0
19390     74 E9 B0 FD | 	call	#__system___basic_print_char
19394     00 12 06 F6 | 	mov	arg01, #0
19398     F8 39 B1 FD | 	call	#__system___getiolock_0616
1939c     FD 00 68 FC | 	wrlong	#0, result1
193a0                 | LR__2006
193a0                 | '   if t1.result_type=result_string then print t1.result.sresult
193a0     1F 2A 0E F2 | 	cmp	local03, #31 wz
193a4     3C 00 90 5D |  if_ne	jmp	#LR__2007
193a8     00 12 06 F6 | 	mov	arg01, #0
193ac     E4 39 B1 FD | 	call	#__system___getiolock_0616
193b0     FD 12 02 F6 | 	mov	arg01, result1
193b4     B4 DC B0 FD | 	call	#__system___lockmem
193b8     00 12 06 F6 | 	mov	arg01, #0
193bc     13 15 02 F6 | 	mov	arg02, local01
193c0     00 16 06 F6 | 	mov	arg03, #0
193c4     98 E9 B0 FD | 	call	#__system___basic_print_string
193c8     00 12 06 F6 | 	mov	arg01, #0
193cc     0A 14 06 F6 | 	mov	arg02, #10
193d0     00 16 06 F6 | 	mov	arg03, #0
193d4     30 E9 B0 FD | 	call	#__system___basic_print_char
193d8     00 12 06 F6 | 	mov	arg01, #0
193dc     B4 39 B1 FD | 	call	#__system___getiolock_0616
193e0     FD 00 68 FC | 	wrlong	#0, result1
193e4                 | LR__2007
193e4                 | LR__2008
193e4                 | ' if r=print_mod_empty then print
193e4     20 2C 0E F2 | 	cmp	local04, #32 wz
193e8     2C 00 90 5D |  if_ne	jmp	#LR__2009
193ec     00 12 06 F6 | 	mov	arg01, #0
193f0     A0 39 B1 FD | 	call	#__system___getiolock_0616
193f4     FD 12 02 F6 | 	mov	arg01, result1
193f8     70 DC B0 FD | 	call	#__system___lockmem
193fc     00 12 06 F6 | 	mov	arg01, #0
19400     0A 14 06 F6 | 	mov	arg02, #10
19404     00 16 06 F6 | 	mov	arg03, #0
19408     FC E8 B0 FD | 	call	#__system___basic_print_char
1940c     00 12 06 F6 | 	mov	arg01, #0
19410     80 39 B1 FD | 	call	#__system___getiolock_0616
19414     FD 00 68 FC | 	wrlong	#0, result1
19418                 | LR__2009
19418                 | LR__2010
19418     A7 F0 03 F6 | 	mov	ptra, fp
1941c     B2 00 A0 FD | 	call	#popregs_
19420                 | _do_print_ret
19420     2D 00 64 FD | 	ret
19424                 | 
19424                 | ' 
19424                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
19424                 | ' 
19424                 | ' sub do_push
19424                 | _do_push
19424                 | ' if stackpointer<maxstack then 
19424     43 00 00 FF 
19428     58 E4 05 F1 | 	add	objptr, ##34392
1942c     F2 00 02 FB | 	rdlong	_var01, objptr
19430     43 00 00 FF 
19434     58 E4 85 F1 | 	sub	objptr, ##34392
19438     01 00 00 FF 
1943c     00 00 56 F2 | 	cmps	_var01, ##512 wc
19440     F8 00 90 3D |  if_ae	jmp	#LR__2020
19444     4A 00 00 FF 
19448     80 E4 05 F1 | 	add	objptr, ##38016
1944c     F2 02 02 FB | 	rdlong	_var02, objptr
19450     01 05 02 F6 | 	mov	_var03, _var02
19454     01 04 66 F0 | 	shl	_var03, #1
19458     01 05 02 F1 | 	add	_var03, _var02
1945c     02 04 66 F0 | 	shl	_var03, #2
19460     03 00 00 FF 
19464     04 E4 85 F1 | 	sub	objptr, ##1540
19468     F2 04 02 F1 | 	add	_var03, objptr
1946c     02 01 02 FB | 	rdlong	_var01, _var03
19470     04 04 06 F1 | 	add	_var03, #4
19474     02 07 02 FB | 	rdlong	_var04, _var03
19478     01 05 02 F6 | 	mov	_var03, _var02
1947c     01 04 66 F0 | 	shl	_var03, #1
19480     01 05 02 F1 | 	add	_var03, _var02
19484     02 04 66 F0 | 	shl	_var03, #2
19488     F2 04 02 F1 | 	add	_var03, objptr
1948c     08 04 06 F1 | 	add	_var03, #8
19490     02 03 02 FB | 	rdlong	_var02, _var03
19494     04 00 00 FF 
19498     24 E4 85 F1 | 	sub	objptr, ##2084
1949c     F2 04 02 FB | 	rdlong	_var03, objptr
194a0     02 09 02 F6 | 	mov	_var05, _var03
194a4     01 08 66 F0 | 	shl	_var05, #1
194a8     02 09 02 F1 | 	add	_var05, _var03
194ac     02 08 66 F0 | 	shl	_var05, #2
194b0     0C 00 00 FF 
194b4     0C E4 85 F1 | 	sub	objptr, ##6156
194b8     F2 08 02 F1 | 	add	_var05, objptr
194bc     04 01 62 FC | 	wrlong	_var01, _var05
194c0     0C 00 00 FF 
194c4     0C E4 05 F1 | 	add	objptr, ##6156
194c8     F2 08 02 FB | 	rdlong	_var05, objptr
194cc     04 05 02 F6 | 	mov	_var03, _var05
194d0     01 04 66 F0 | 	shl	_var03, #1
194d4     04 05 02 F1 | 	add	_var03, _var05
194d8     02 04 66 F0 | 	shl	_var03, #2
194dc     0C 00 00 FF 
194e0     0C E4 85 F1 | 	sub	objptr, ##6156
194e4     F2 04 02 F1 | 	add	_var03, objptr
194e8     04 04 06 F1 | 	add	_var03, #4
194ec     02 07 62 FC | 	wrlong	_var04, _var03
194f0     0C 00 00 FF 
194f4     0C E4 05 F1 | 	add	objptr, ##6156
194f8     F2 08 02 FB | 	rdlong	_var05, objptr
194fc     04 07 02 F6 | 	mov	_var04, _var05
19500     01 06 66 F0 | 	shl	_var04, #1
19504     04 07 02 F1 | 	add	_var04, _var05
19508     02 06 66 F0 | 	shl	_var04, #2
1950c     0C 00 00 FF 
19510     0C E4 85 F1 | 	sub	objptr, ##6156
19514     F2 06 02 F1 | 	add	_var04, objptr
19518     08 06 06 F1 | 	add	_var04, #8
1951c     03 03 62 FC | 	wrlong	_var02, _var04
19520     0C 00 00 FF 
19524     0C E4 05 F1 | 	add	objptr, ##6156
19528     F2 00 02 FB | 	rdlong	_var01, objptr
1952c     01 00 06 F1 | 	add	_var01, #1
19530     F2 00 62 FC | 	wrlong	_var01, objptr
19534     43 00 00 FF 
19538     58 E4 85 F1 | 	sub	objptr, ##34392
1953c                 | LR__2020
1953c                 | _do_push_ret
1953c     2D 00 64 FD | 	ret
19540                 | 
19540                 | ' 
19540                 | ' '-------------------- put
19540                 | ' 
19540                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
19540                 | _do_put
19540     03 4A 05 F6 | 	mov	COUNT_, #3
19544     A8 00 A0 FD | 	call	#pushregs_
19548     28 F0 07 F1 | 	add	ptra, #40
1954c     4A 00 00 FF 
19550     80 E4 05 F1 | 	add	objptr, ##38016
19554     F2 1A 02 FB | 	rdlong	arg05, objptr
19558     0D 19 02 F6 | 	mov	arg04, arg05
1955c     01 18 66 F0 | 	shl	arg04, #1
19560     0D 19 02 F1 | 	add	arg04, arg05
19564     02 18 66 F0 | 	shl	arg04, #2
19568     03 00 00 FF 
1956c     04 E4 85 F1 | 	sub	objptr, ##1540
19570     F2 18 02 F1 | 	add	arg04, objptr
19574     0C 1B 02 FB | 	rdlong	arg05, arg04
19578     A7 1A 62 FC | 	wrlong	arg05, fp
1957c                 | ' 
1957c                 | ' numpar=compiledline(lineptr_e).result.uresult
1957c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1957c     04 1A 0E F2 | 	cmp	arg05, #4 wz
19580     47 00 00 FF 
19584     7C E4 85 F1 | 	sub	objptr, ##36476
19588     48 00 90 5D |  if_ne	jmp	#LR__2030
1958c     78 41 BF FD | 	call	#_pop
19590     FF 1A 02 F6 | 	mov	arg05, result3
19594     1C 4E 05 F1 | 	add	fp, #28
19598     A7 FA 61 FC | 	wrlong	result1, fp
1959c     04 4E 05 F1 | 	add	fp, #4
195a0     A7 FC 61 FC | 	wrlong	result2, fp
195a4     04 4E 05 F1 | 	add	fp, #4
195a8     A7 1A 62 FC | 	wrlong	arg05, fp
195ac     08 4E 85 F1 | 	sub	fp, #8
195b0     A7 12 02 F6 | 	mov	arg01, fp
195b4     1C 4E 85 F1 | 	sub	fp, #28
195b8     30 43 BF FD | 	call	#_converttoint
195bc     52 00 00 FF 
195c0     0C E5 05 F1 | 	add	objptr, ##42252
195c4     F2 FA 61 FC | 	wrlong	result1, objptr
195c8     52 00 00 FF 
195cc     0C E5 85 F1 | 	sub	objptr, ##42252
195d0     18 00 90 FD | 	jmp	#LR__2031
195d4                 | LR__2030
195d4     52 00 00 FF 
195d8     0C E5 05 F1 | 	add	objptr, ##42252
195dc     FF FF FF FF 
195e0     F2 FE 6B FC | 	wrlong	##-1, objptr
195e4     52 00 00 FF 
195e8     0C E5 85 F1 | 	sub	objptr, ##42252
195ec                 | LR__2031
195ec                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
195ec     A7 1A 02 FB | 	rdlong	arg05, fp
195f0     03 1A 56 F2 | 	cmps	arg05, #3 wc
195f4     40 00 90 CD |  if_b	jmp	#LR__2032
195f8     0C 41 BF FD | 	call	#_pop
195fc     FF 1A 02 F6 | 	mov	arg05, result3
19600     1C 4E 05 F1 | 	add	fp, #28
19604     A7 FA 61 FC | 	wrlong	result1, fp
19608     04 4E 05 F1 | 	add	fp, #4
1960c     A7 FC 61 FC | 	wrlong	result2, fp
19610     04 4E 05 F1 | 	add	fp, #4
19614     A7 1A 62 FC | 	wrlong	arg05, fp
19618     08 4E 85 F1 | 	sub	fp, #8
1961c     A7 12 02 F6 | 	mov	arg01, fp
19620     1C 4E 85 F1 | 	sub	fp, #28
19624     C4 42 BF FD | 	call	#_converttoint
19628     08 4E 05 F1 | 	add	fp, #8
1962c     A7 FA 61 FC | 	wrlong	result1, fp
19630     08 4E 85 F1 | 	sub	fp, #8
19634     0C 00 90 FD | 	jmp	#LR__2033
19638                 | LR__2032
19638     08 4E 05 F1 | 	add	fp, #8
1963c     A7 02 68 FC | 	wrlong	#1, fp
19640     08 4E 85 F1 | 	sub	fp, #8
19644                 | LR__2033
19644                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
19644     A7 18 02 FB | 	rdlong	arg04, fp
19648     02 18 56 F2 | 	cmps	arg04, #2 wc
1964c     3C 00 90 CD |  if_b	jmp	#LR__2034
19650     B4 40 BF FD | 	call	#_pop
19654     FF 18 02 F6 | 	mov	arg04, result3
19658     1C 4E 05 F1 | 	add	fp, #28
1965c     A7 FA 61 FC | 	wrlong	result1, fp
19660     04 4E 05 F1 | 	add	fp, #4
19664     A7 FC 61 FC | 	wrlong	result2, fp
19668     04 4E 05 F1 | 	add	fp, #4
1966c     A7 18 62 FC | 	wrlong	arg04, fp
19670     08 4E 85 F1 | 	sub	fp, #8
19674     A7 12 02 F6 | 	mov	arg01, fp
19678     1C 4E 85 F1 | 	sub	fp, #28
1967c     6C 42 BF FD | 	call	#_converttoint
19680     0C 4E 05 F1 | 	add	fp, #12
19684     A7 FA 61 FC | 	wrlong	result1, fp
19688     0C 4E 85 F1 | 	sub	fp, #12
1968c                 | LR__2034
1968c     78 40 BF FD | 	call	#_pop
19690     FF 18 02 F6 | 	mov	arg04, result3
19694     1C 4E 05 F1 | 	add	fp, #28
19698     A7 FA 61 FC | 	wrlong	result1, fp
1969c     04 4E 05 F1 | 	add	fp, #4
196a0     A7 FC 61 FC | 	wrlong	result2, fp
196a4     04 4E 05 F1 | 	add	fp, #4
196a8     A7 18 62 FC | 	wrlong	arg04, fp
196ac     08 4E 85 F1 | 	sub	fp, #8
196b0     A7 12 02 F6 | 	mov	arg01, fp
196b4     1C 4E 85 F1 | 	sub	fp, #28
196b8     30 42 BF FD | 	call	#_converttoint
196bc     04 4E 05 F1 | 	add	fp, #4
196c0     A7 FA 61 FC | 	wrlong	result1, fp
196c4     10 4E 05 F1 | 	add	fp, #16
196c8     A7 26 02 FB | 	rdlong	local01, fp
196cc     14 4E 85 F1 | 	sub	fp, #20
196d0     02 26 66 F0 | 	shl	local01, #2
196d4     50 00 00 FF 
196d8     C4 E4 05 F1 | 	add	objptr, ##41156
196dc     F2 26 02 F1 | 	add	local01, objptr
196e0     13 01 68 FC | 	wrlong	#0, local01
196e4                 | ' t1=pop() : channel=converttoint(t1)
196e4                 | ' getres(j)=0
196e4                 | ' if pos>=0 then
196e4     02 00 00 FF 
196e8     48 E4 05 F1 | 	add	objptr, ##1096
196ec     F2 28 02 FB | 	rdlong	local02, objptr
196f0     52 00 00 FF 
196f4     0C E5 85 F1 | 	sub	objptr, ##42252
196f8     00 28 56 F2 | 	cmps	local02, #0 wc
196fc     C0 01 90 CD |  if_b	jmp	#LR__2040
19700     10 4E 05 F1 | 	add	fp, #16
19704     A7 00 68 FC | 	wrlong	#0, fp
19708     10 4E 85 F1 | 	sub	fp, #16
1970c                 | '    i=0: do
1970c                 | LR__2035
1970c     14 4E 05 F1 | 	add	fp, #20
19710     A7 00 68 FC | 	wrlong	#0, fp
19714     14 4E 85 F1 | 	sub	fp, #20
19718                 | '    j=0: do    
19718                 | LR__2036
19718                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19718     0C 4E 05 F1 | 	add	fp, #12
1971c     A7 28 02 FB | 	rdlong	local02, fp
19720     0C 4E 85 F1 | 	sub	fp, #12
19724     00 04 00 FF 
19728     00 28 56 F2 | 	cmps	local02, ##524288 wc
1972c     4C 00 90 3D |  if_ae	jmp	#LR__2037
19730     14 4E 05 F1 | 	add	fp, #20
19734     A7 28 02 FB | 	rdlong	local02, fp
19738     14 27 02 F6 | 	mov	local01, local02
1973c     4E 00 00 FF 
19740     B4 E4 05 F1 | 	add	objptr, ##40116
19744     F2 26 02 F1 | 	add	local01, objptr
19748     08 4E 85 F1 | 	sub	fp, #8
1974c     A7 12 02 FB | 	rdlong	arg01, fp
19750     04 4E 05 F1 | 	add	fp, #4
19754     A7 18 02 FB | 	rdlong	arg04, fp
19758     0A 18 66 F0 | 	shl	arg04, #10
1975c     0C 13 02 F1 | 	add	arg01, arg04
19760     10 4E 85 F1 | 	sub	fp, #16
19764     14 13 02 F1 | 	add	arg01, local02
19768     09 FB C1 FA | 	rdbyte	result1, arg01
1976c     4E 00 00 FF 
19770     B4 E4 85 F1 | 	sub	objptr, ##40116
19774     13 FB 41 FC | 	wrbyte	result1, local01
19778     48 00 90 FD | 	jmp	#LR__2038
1977c                 | LR__2037
1977c     14 4E 05 F1 | 	add	fp, #20
19780     A7 28 02 FB | 	rdlong	local02, fp
19784     14 27 02 F6 | 	mov	local01, local02
19788     4E 00 00 FF 
1978c     B4 E4 05 F1 | 	add	objptr, ##40116
19790     F2 26 02 F1 | 	add	local01, objptr
19794     08 4E 85 F1 | 	sub	fp, #8
19798     A7 12 02 FB | 	rdlong	arg01, fp
1979c     04 4E 05 F1 | 	add	fp, #4
197a0     A7 18 02 FB | 	rdlong	arg04, fp
197a4     0A 18 66 F0 | 	shl	arg04, #10
197a8     0C 13 02 F1 | 	add	arg01, arg04
197ac     10 4E 85 F1 | 	sub	fp, #16
197b0     14 13 02 F1 | 	add	arg01, local02
197b4     4E 00 00 FF 
197b8     B4 E4 85 F1 | 	sub	objptr, ##40116
197bc     78 A0 B0 FD | 	call	#_pspeek
197c0     13 FB 41 FC | 	wrbyte	result1, local01
197c4                 | LR__2038
197c4     14 4E 05 F1 | 	add	fp, #20
197c8     A7 28 02 FB | 	rdlong	local02, fp
197cc     01 28 06 F1 | 	add	local02, #1
197d0     A7 28 62 FC | 	wrlong	local02, fp
197d4     14 4E 85 F1 | 	sub	fp, #20
197d8     02 00 00 FF 
197dc     00 28 56 F2 | 	cmps	local02, ##1024 wc
197e0     2C 00 90 3D |  if_ae	jmp	#LR__2039
197e4     10 4E 05 F1 | 	add	fp, #16
197e8     A7 26 02 FB | 	rdlong	local01, fp
197ec     0A 26 66 F0 | 	shl	local01, #10
197f0     04 4E 05 F1 | 	add	fp, #4
197f4     A7 28 02 FB | 	rdlong	local02, fp
197f8     14 27 02 F1 | 	add	local01, local02
197fc     0C 4E 85 F1 | 	sub	fp, #12
19800     A7 28 02 FB | 	rdlong	local02, fp
19804     08 4E 85 F1 | 	sub	fp, #8
19808     14 27 5A F2 | 	cmps	local01, local02 wcz
1980c     08 FF 9F ED |  if_be	jmp	#LR__2036
19810                 | LR__2039
19810                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
19810     04 4E 05 F1 | 	add	fp, #4
19814     A7 12 02 FB | 	rdlong	arg01, fp
19818     52 00 00 FF 
1981c     0C E5 05 F1 | 	add	objptr, ##42252
19820     F2 14 02 FB | 	rdlong	arg02, objptr
19824     01 14 06 F1 | 	add	arg02, #1
19828     04 00 00 FF 
1982c     58 E4 85 F1 | 	sub	objptr, ##2136
19830     F2 16 02 F6 | 	mov	arg03, objptr
19834     4E 00 00 FF 
19838     B4 E4 85 F1 | 	sub	objptr, ##40116
1983c     04 4E 05 F1 | 	add	fp, #4
19840     A7 18 02 FB | 	rdlong	arg04, fp
19844     08 4E 85 F1 | 	sub	fp, #8
19848     01 1A 06 F6 | 	mov	arg05, #1
1984c     20 E6 B0 FD | 	call	#__system___basic_put
19850     18 4E 05 F1 | 	add	fp, #24
19854     A7 FA 61 FC | 	wrlong	result1, fp
19858     14 4E 85 F1 | 	sub	fp, #20
1985c     A7 26 02 FB | 	rdlong	local01, fp
19860     02 26 66 F0 | 	shl	local01, #2
19864     50 00 00 FF 
19868     C4 E4 05 F1 | 	add	objptr, ##41156
1986c     F2 26 02 F1 | 	add	local01, objptr
19870     13 FB 61 FC | 	wrlong	result1, local01
19874                 | '    if 1024*i+j>amount then exit loop
19874     0C 4E 05 F1 | 	add	fp, #12
19878     A7 28 02 FB | 	rdlong	local02, fp
1987c     0A 28 66 F0 | 	shl	local02, #10
19880     04 4E 05 F1 | 	add	fp, #4
19884     A7 26 02 FB | 	rdlong	local01, fp
19888     13 29 02 F1 | 	add	local02, local01
1988c     0C 4E 85 F1 | 	sub	fp, #12
19890     A7 26 02 FB | 	rdlong	local01, fp
19894     08 4E 85 F1 | 	sub	fp, #8
19898     13 29 5A F2 | 	cmps	local02, local01 wcz
1989c     50 00 00 FF 
198a0     C4 E4 85 F1 | 	sub	objptr, ##41156
198a4     CC 01 90 1D |  if_a	jmp	#LR__2047
198a8     10 4E 05 F1 | 	add	fp, #16
198ac     A7 28 02 FB | 	rdlong	local02, fp
198b0     01 28 06 F1 | 	add	local02, #1
198b4     A7 28 62 FC | 	wrlong	local02, fp
198b8     10 4E 85 F1 | 	sub	fp, #16
198bc     4C FE 9F FD | 	jmp	#LR__2035
198c0                 | LR__2040
198c0     10 4E 05 F1 | 	add	fp, #16
198c4     A7 00 68 FC | 	wrlong	#0, fp
198c8     10 4E 85 F1 | 	sub	fp, #16
198cc                 | '    i=0: do
198cc                 | LR__2041
198cc     14 4E 05 F1 | 	add	fp, #20
198d0     A7 00 68 FC | 	wrlong	#0, fp
198d4     14 4E 85 F1 | 	sub	fp, #20
198d8                 | '    j=0: do  
198d8                 | LR__2042
198d8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
198d8     0C 4E 05 F1 | 	add	fp, #12
198dc     A7 28 02 FB | 	rdlong	local02, fp
198e0     0C 4E 85 F1 | 	sub	fp, #12
198e4     00 04 00 FF 
198e8     00 28 56 F2 | 	cmps	local02, ##524288 wc
198ec     4C 00 90 3D |  if_ae	jmp	#LR__2043
198f0     14 4E 05 F1 | 	add	fp, #20
198f4     A7 28 02 FB | 	rdlong	local02, fp
198f8     14 27 02 F6 | 	mov	local01, local02
198fc     4E 00 00 FF 
19900     B4 E4 05 F1 | 	add	objptr, ##40116
19904     F2 26 02 F1 | 	add	local01, objptr
19908     08 4E 85 F1 | 	sub	fp, #8
1990c     A7 12 02 FB | 	rdlong	arg01, fp
19910     04 4E 05 F1 | 	add	fp, #4
19914     A7 18 02 FB | 	rdlong	arg04, fp
19918     0A 18 66 F0 | 	shl	arg04, #10
1991c     0C 13 02 F1 | 	add	arg01, arg04
19920     10 4E 85 F1 | 	sub	fp, #16
19924     14 13 02 F1 | 	add	arg01, local02
19928     09 FB C1 FA | 	rdbyte	result1, arg01
1992c     4E 00 00 FF 
19930     B4 E4 85 F1 | 	sub	objptr, ##40116
19934     13 FB 41 FC | 	wrbyte	result1, local01
19938     48 00 90 FD | 	jmp	#LR__2044
1993c                 | LR__2043
1993c     14 4E 05 F1 | 	add	fp, #20
19940     A7 28 02 FB | 	rdlong	local02, fp
19944     14 27 02 F6 | 	mov	local01, local02
19948     4E 00 00 FF 
1994c     B4 E4 05 F1 | 	add	objptr, ##40116
19950     F2 26 02 F1 | 	add	local01, objptr
19954     08 4E 85 F1 | 	sub	fp, #8
19958     A7 12 02 FB | 	rdlong	arg01, fp
1995c     04 4E 05 F1 | 	add	fp, #4
19960     A7 18 02 FB | 	rdlong	arg04, fp
19964     0A 18 66 F0 | 	shl	arg04, #10
19968     0C 13 02 F1 | 	add	arg01, arg04
1996c     10 4E 85 F1 | 	sub	fp, #16
19970     14 13 02 F1 | 	add	arg01, local02
19974     4E 00 00 FF 
19978     B4 E4 85 F1 | 	sub	objptr, ##40116
1997c     B8 9E B0 FD | 	call	#_pspeek
19980     13 FB 41 FC | 	wrbyte	result1, local01
19984                 | LR__2044
19984     14 4E 05 F1 | 	add	fp, #20
19988     A7 28 02 FB | 	rdlong	local02, fp
1998c     01 28 06 F1 | 	add	local02, #1
19990     A7 28 62 FC | 	wrlong	local02, fp
19994     14 4E 85 F1 | 	sub	fp, #20
19998     02 00 00 FF 
1999c     00 28 56 F2 | 	cmps	local02, ##1024 wc
199a0     2C 00 90 3D |  if_ae	jmp	#LR__2045
199a4     10 4E 05 F1 | 	add	fp, #16
199a8     A7 26 02 FB | 	rdlong	local01, fp
199ac     0A 26 66 F0 | 	shl	local01, #10
199b0     04 4E 05 F1 | 	add	fp, #4
199b4     A7 28 02 FB | 	rdlong	local02, fp
199b8     14 27 02 F1 | 	add	local01, local02
199bc     0C 4E 85 F1 | 	sub	fp, #12
199c0     A7 28 02 FB | 	rdlong	local02, fp
199c4     08 4E 85 F1 | 	sub	fp, #8
199c8     14 27 5A F2 | 	cmps	local01, local02 wcz
199cc     08 FF 9F ED |  if_be	jmp	#LR__2042
199d0                 | LR__2045
199d0                 | '    put #channel,,block(0),amount, r : getres(channel)=r
199d0     04 4E 05 F1 | 	add	fp, #4
199d4     A7 12 02 FB | 	rdlong	arg01, fp
199d8     4E 00 00 FF 
199dc     B4 E4 05 F1 | 	add	objptr, ##40116
199e0     F2 16 02 F6 | 	mov	arg03, objptr
199e4     4E 00 00 FF 
199e8     B4 E4 85 F1 | 	sub	objptr, ##40116
199ec     04 4E 05 F1 | 	add	fp, #4
199f0     A7 18 02 FB | 	rdlong	arg04, fp
199f4     08 4E 85 F1 | 	sub	fp, #8
199f8     00 14 06 F6 | 	mov	arg02, #0
199fc     01 1A 06 F6 | 	mov	arg05, #1
19a00     6C E4 B0 FD | 	call	#__system___basic_put
19a04     18 4E 05 F1 | 	add	fp, #24
19a08     A7 FA 61 FC | 	wrlong	result1, fp
19a0c     14 4E 85 F1 | 	sub	fp, #20
19a10     A7 26 02 FB | 	rdlong	local01, fp
19a14     02 26 66 F0 | 	shl	local01, #2
19a18     50 00 00 FF 
19a1c     C4 E4 05 F1 | 	add	objptr, ##41156
19a20     F2 26 02 F1 | 	add	local01, objptr
19a24     13 FB 61 FC | 	wrlong	result1, local01
19a28                 | '    if 1024*i+j>amount then exit loop
19a28     0C 4E 05 F1 | 	add	fp, #12
19a2c     A7 28 02 FB | 	rdlong	local02, fp
19a30     0A 28 66 F0 | 	shl	local02, #10
19a34     04 4E 05 F1 | 	add	fp, #4
19a38     A7 26 02 FB | 	rdlong	local01, fp
19a3c     13 29 02 F1 | 	add	local02, local01
19a40     0C 4E 85 F1 | 	sub	fp, #12
19a44     A7 2A 02 FB | 	rdlong	local03, fp
19a48     08 4E 85 F1 | 	sub	fp, #8
19a4c     15 29 5A F2 | 	cmps	local02, local03 wcz
19a50     50 00 00 FF 
19a54     C4 E4 85 F1 | 	sub	objptr, ##41156
19a58     18 00 90 1D |  if_a	jmp	#LR__2046
19a5c     10 4E 05 F1 | 	add	fp, #16
19a60     A7 28 02 FB | 	rdlong	local02, fp
19a64     01 28 06 F1 | 	add	local02, #1
19a68     A7 28 62 FC | 	wrlong	local02, fp
19a6c     10 4E 85 F1 | 	sub	fp, #16
19a70     58 FE 9F FD | 	jmp	#LR__2041
19a74                 | LR__2046
19a74                 | LR__2047
19a74     A7 F0 03 F6 | 	mov	ptra, fp
19a78     B2 00 A0 FD | 	call	#popregs_
19a7c                 | _do_put_ret
19a7c     2D 00 64 FD | 	ret
19a80                 | 
19a80                 | ' 
19a80                 | ' '-------------------- rad
19a80                 | ' 
19a80                 | ' sub do_rad
19a80                 | _do_rad
19a80     52 00 00 FF 
19a84     A8 E4 05 F1 | 	add	objptr, ##42152
19a88     00 C0 9F FF 
19a8c     F2 00 68 FC | 	wrlong	##1065353216, objptr
19a90     04 E4 05 F1 | 	add	objptr, #4
19a94     00 C0 9F FF 
19a98     F2 00 68 FC | 	wrlong	##1065353216, objptr
19a9c     52 00 00 FF 
19aa0     AC E4 85 F1 | 	sub	objptr, ##42156
19aa4                 | _do_rad_ret
19aa4     2D 00 64 FD | 	ret
19aa8                 | 
19aa8                 | ' 
19aa8                 | ' '-------------------- rdpin
19aa8                 | ' 
19aa8                 | ' sub do_rdpin
19aa8                 | _do_rdpin
19aa8     00 4A 05 F6 | 	mov	COUNT_, #0
19aac     A8 00 A0 FD | 	call	#pushregs_
19ab0     0C F0 07 F1 | 	add	ptra, #12
19ab4     50 3C BF FD | 	call	#_pop
19ab8     A7 FA 61 FC | 	wrlong	result1, fp
19abc     04 4E 05 F1 | 	add	fp, #4
19ac0     A7 FC 61 FC | 	wrlong	result2, fp
19ac4     04 4E 05 F1 | 	add	fp, #4
19ac8     A7 FE 61 FC | 	wrlong	result3, fp
19acc     08 4E 85 F1 | 	sub	fp, #8
19ad0     A7 12 02 F6 | 	mov	arg01, fp
19ad4     14 3E BF FD | 	call	#_converttoint
19ad8     FD FA 89 FA | 	rdpin	result1, result1
19adc     52 00 00 FF 
19ae0     10 E5 05 F1 | 	add	objptr, ##42256
19ae4     F2 FA 61 FC | 	wrlong	result1, objptr
19ae8     52 00 00 FF 
19aec     10 E5 85 F1 | 	sub	objptr, ##42256
19af0     08 4E 05 F1 | 	add	fp, #8
19af4     A7 3A 68 FC | 	wrlong	#29, fp
19af8     08 4E 85 F1 | 	sub	fp, #8
19afc     A7 08 68 FC | 	wrlong	#4, fp
19b00     A7 12 02 F6 | 	mov	arg01, fp
19b04     98 3C BF FD | 	call	#_push
19b08     A7 F0 03 F6 | 	mov	ptra, fp
19b0c     B2 00 A0 FD | 	call	#popregs_
19b10                 | _do_rdpin_ret
19b10     2D 00 64 FD | 	ret
19b14                 | 
19b14                 | ' 
19b14                 | ' ' ----------------  read
19b14                 | ' 
19b14                 | ' function read_next_line() as string
19b14                 | _read_next_line
19b14     07 4A 05 F6 | 	mov	COUNT_, #7
19b18     A8 00 A0 FD | 	call	#pushregs_
19b1c                 | ' if dataptr=$7FFFFFFF then return("")
19b1c     50 00 00 FF 
19b20     2C E5 05 F1 | 	add	objptr, ##41260
19b24     F2 26 02 FB | 	rdlong	local01, objptr
19b28     50 00 00 FF 
19b2c     2C E5 85 F1 | 	sub	objptr, ##41260
19b30     FF FF 3F FF 
19b34     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19b38     BB 01 00 AF 
19b3c     0C FB 05 A6 |  if_e	mov	result1, ##@LR__6006
19b40     BC 01 90 AD |  if_e	jmp	#LR__2057
19b44                 | ' do
19b44                 | LR__2050
19b44     50 00 00 FF 
19b48     08 E5 05 F1 | 	add	objptr, ##41224
19b4c     F2 12 02 F6 | 	mov	arg01, objptr
19b50     24 E4 05 F1 | 	add	objptr, #36
19b54     F2 14 02 FB | 	rdlong	arg02, objptr
19b58     24 16 06 F6 | 	mov	arg03, #36
19b5c     45 00 00 FF 
19b60     60 E4 85 F1 | 	sub	objptr, ##35424
19b64     0C C8 B0 FD | 	call	#_psram_spin2_read1
19b68                 | '  ' print dataptr
19b68                 | '   psram.read1(varptr(dataheader),dataptr,36) 
19b68                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
19b68     45 00 00 FF 
19b6c     3C E4 05 F1 | 	add	objptr, ##35388
19b70     F2 26 02 FB | 	rdlong	local01, objptr
19b74     50 00 00 FF 
19b78     08 E5 85 F1 | 	sub	objptr, ##41224
19b7c     FF FF 7F FF 
19b80     FF 27 0E F2 | 	cmp	local01, ##-1 wz
19b84     50 00 00 5F 
19b88     1C E5 05 51 |  if_ne	add	objptr, ##41244
19b8c     F2 26 02 5B |  if_ne	rdlong	local01, objptr
19b90     10 E4 05 51 |  if_ne	add	objptr, #16
19b94     F2 26 62 5C |  if_ne	wrlong	local01, objptr
19b98     50 00 00 5F 
19b9c     2C E5 85 51 |  if_ne	sub	objptr, ##41260
19ba0     50 00 00 FF 
19ba4     1C E5 05 F1 | 	add	objptr, ##41244
19ba8     F2 26 02 FB | 	rdlong	local01, objptr
19bac     50 00 00 FF 
19bb0     1C E5 85 F1 | 	sub	objptr, ##41244
19bb4     FF FF 3F FF 
19bb8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19bbc     50 00 00 5F 
19bc0     08 E5 05 51 |  if_ne	add	objptr, ##41224
19bc4     F2 28 02 5B |  if_ne	rdlong	local02, objptr
19bc8     50 00 00 5F 
19bcc     08 E5 85 51 |  if_ne	sub	objptr, ##41224
19bd0     FF FF 7F 5F 
19bd4     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
19bd8     50 00 00 5F 
19bdc     28 E5 05 51 |  if_ne	add	objptr, ##41256
19be0     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
19be4     50 00 00 5F 
19be8     28 E5 85 51 |  if_ne	sub	objptr, ##41256
19bec     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
19bf0     50 FF 9F 5D |  if_ne	jmp	#LR__2050
19bf4                 | ' if dataheader(8)=token_data then 
19bf4     50 00 00 FF 
19bf8     28 E5 05 F1 | 	add	objptr, ##41256
19bfc     F2 26 02 FB | 	rdlong	local01, objptr
19c00     50 00 00 FF 
19c04     28 E5 85 F1 | 	sub	objptr, ##41256
19c08     B7 26 0E F2 | 	cmp	local01, #183 wz
19c0c     E0 00 90 5D |  if_ne	jmp	#LR__2055
19c10     50 00 00 FF 
19c14     10 E5 05 F1 | 	add	objptr, ##41232
19c18     F2 26 02 FB | 	rdlong	local01, objptr
19c1c     01 00 00 FF 
19c20     E0 E5 05 F1 | 	add	objptr, ##992
19c24     F2 26 62 FC | 	wrlong	local01, objptr
19c28     01 00 00 FF 
19c2c     DC E5 85 F1 | 	sub	objptr, ##988
19c30     F2 2C 02 FB | 	rdlong	local04, objptr
19c34     01 00 00 FF 
19c38     D4 E5 05 F1 | 	add	objptr, ##980
19c3c     F2 2C 62 FC | 	wrlong	local04, objptr
19c40                 | '  'print "data found at line "; dataheader(0)
19c40                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
19c40     00 2E 06 F6 | 	mov	local05, #0
19c44     52 00 00 FF 
19c48     E8 E4 85 F1 | 	sub	objptr, ##42216
19c4c                 | LR__2051
19c4c     16 2F 52 F2 | 	cmps	local05, local04 wc
19c50     3C 00 90 3D |  if_ae	jmp	#LR__2052
19c54     52 00 00 FF 
19c58     F0 E4 05 F1 | 	add	objptr, ##42224
19c5c     F2 12 02 FB | 	rdlong	arg01, objptr
19c60     52 00 00 FF 
19c64     F0 E4 85 F1 | 	sub	objptr, ##42224
19c68     17 13 02 F1 | 	add	arg01, local05
19c6c     C8 9B B0 FD | 	call	#_pspeek
19c70     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
19c74     34 F6 B0 FD | 	call	#__system__Chr_S
19c78     FD 14 02 F6 | 	mov	arg02, result1
19c7c     18 13 02 F6 | 	mov	arg01, local06
19c80     44 D4 B0 FD | 	call	#__system___string_concat
19c84     FD 30 02 F6 | 	mov	local06, result1
19c88     01 2E 06 F1 | 	add	local05, #1
19c8c     BC FF 9F FD | 	jmp	#LR__2051
19c90                 | LR__2052
19c90     BB 01 00 FF 
19c94     0D 17 06 F6 | 	mov	arg03, ##@LR__6007
19c98     01 12 06 F6 | 	mov	arg01, #1
19c9c     18 15 02 F6 | 	mov	arg02, local06
19ca0     8C F9 B0 FD | 	call	#__system__Instr
19ca4     FD 2E 02 F6 | 	mov	local05, result1
19ca8     18 13 02 F6 | 	mov	arg01, local06
19cac     09 33 02 F6 | 	mov	local07, arg01
19cb0     97 06 48 FB | 	callpa	#(@LR__2054-@LR__2053)>>2,fcache_load_ptr_
19cb4                 | LR__2053
19cb4     19 FB C9 FA | 	rdbyte	result1, local07 wz
19cb8     01 32 06 51 |  if_ne	add	local07, #1
19cbc     F4 FF 9F 5D |  if_ne	jmp	#LR__2053
19cc0                 | LR__2054
19cc0     09 33 82 F1 | 	sub	local07, arg01
19cc4     19 15 02 F6 | 	mov	arg02, local07
19cc8     17 15 82 F1 | 	sub	arg02, local05
19ccc     04 14 86 F1 | 	sub	arg02, #4
19cd0     18 13 02 F6 | 	mov	arg01, local06
19cd4     98 F4 B0 FD | 	call	#__system__Right_S
19cd8     FD 12 02 F6 | 	mov	arg01, result1
19cdc     98 F8 B0 FD | 	call	#__system__RTrim_S
19ce0     FD 12 02 F6 | 	mov	arg01, result1
19ce4     D0 F7 B0 FD | 	call	#__system__LTrim_S
19ce8     FD 30 02 F6 | 	mov	local06, result1
19cec     0C 00 90 FD | 	jmp	#LR__2056
19cf0                 | LR__2055
19cf0                 | '   return ("") 'todo proper err
19cf0     BB 01 00 FF 
19cf4     12 FB 05 F6 | 	mov	result1, ##@LR__6008
19cf8     04 00 90 FD | 	jmp	#LR__2057
19cfc                 | LR__2056
19cfc                 | ' return readline
19cfc     18 FB 01 F6 | 	mov	result1, local06
19d00                 | LR__2057
19d00     A7 F0 03 F6 | 	mov	ptra, fp
19d04     B2 00 A0 FD | 	call	#popregs_
19d08                 | _read_next_line_ret
19d08     2D 00 64 FD | 	ret
19d0c                 | 
19d0c                 | ' 
19d0c                 | ' sub do_read
19d0c                 | _do_read
19d0c     11 4A 05 F6 | 	mov	COUNT_, #17
19d10     A8 00 A0 FD | 	call	#pushregs_
19d14     58 F1 07 F1 | 	add	ptra, #344
19d18     4A 00 00 FF 
19d1c     80 E4 05 F1 | 	add	objptr, ##38016
19d20     F2 FE 01 FB | 	rdlong	result3, objptr
19d24     FF FC 01 F6 | 	mov	result2, result3
19d28     01 FC 65 F0 | 	shl	result2, #1
19d2c     FF FC 01 F1 | 	add	result2, result3
19d30     02 FC 65 F0 | 	shl	result2, #2
19d34     03 00 00 FF 
19d38     04 E4 85 F1 | 	sub	objptr, ##1540
19d3c     F2 FC 01 F1 | 	add	result2, objptr
19d40     FE FC 01 FB | 	rdlong	result2, result2
19d44     08 4E 05 F1 | 	add	fp, #8
19d48     A7 FC 61 FC | 	wrlong	result2, fp
19d4c                 | ' 
19d4c                 | ' 
19d4c                 | ' numpar=compiledline(lineptr_e).result.uresult
19d4c                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
19d4c     08 4E 85 F1 | 	sub	fp, #8
19d50     01 FC 15 F2 | 	cmp	result2, #1 wc
19d54     47 00 00 FF 
19d58     7C E4 85 F1 | 	sub	objptr, ##36476
19d5c     14 00 90 CD |  if_b	jmp	#LR__2060
19d60     08 4E 05 F1 | 	add	fp, #8
19d64     A7 FC 01 FB | 	rdlong	result2, fp
19d68     08 4E 85 F1 | 	sub	fp, #8
19d6c     41 FC 15 F2 | 	cmp	result2, #65 wc
19d70     50 00 90 CD |  if_b	jmp	#LR__2061
19d74                 | LR__2060
19d74     00 12 06 F6 | 	mov	arg01, #0
19d78     18 30 B1 FD | 	call	#__system___getiolock_0616
19d7c     FD 12 02 F6 | 	mov	arg01, result1
19d80     E8 D2 B0 FD | 	call	#__system___lockmem
19d84     BB 01 00 FF 
19d88     13 15 06 F6 | 	mov	arg02, ##@LR__6009
19d8c     00 12 06 F6 | 	mov	arg01, #0
19d90     00 16 06 F6 | 	mov	arg03, #0
19d94     C8 DF B0 FD | 	call	#__system___basic_print_string
19d98     00 12 06 F6 | 	mov	arg01, #0
19d9c     F4 2F B1 FD | 	call	#__system___getiolock_0616
19da0     FD 00 68 FC | 	wrlong	#0, result1
19da4     50 00 00 FF 
19da8     F0 E4 05 F1 | 	add	objptr, ##41200
19dac     F2 14 02 FB | 	rdlong	arg02, objptr
19db0     50 00 00 FF 
19db4     F0 E4 85 F1 | 	sub	objptr, ##41200
19db8     27 12 06 F6 | 	mov	arg01, #39
19dbc     00 98 B0 FD | 	call	#_printerror
19dc0     D0 0C 90 FD | 	jmp	#LR__2111
19dc4                 | LR__2061
19dc4     08 4E 05 F1 | 	add	fp, #8
19dc8     A7 16 02 FB | 	rdlong	arg03, fp
19dcc     01 16 86 F1 | 	sub	arg03, #1
19dd0     28 4F 05 F1 | 	add	fp, #296
19dd4     A7 16 62 FC | 	wrlong	arg03, fp
19dd8     30 4F 85 F1 | 	sub	fp, #304
19ddc                 | ' i=numpar-1
19ddc                 | ' if readline="" then readline=read_next_line() ': print readline
19ddc     52 00 00 FF 
19de0     DC E4 05 F1 | 	add	objptr, ##42204
19de4     F2 12 02 FB | 	rdlong	arg01, objptr
19de8     52 00 00 FF 
19dec     DC E4 85 F1 | 	sub	objptr, ##42204
19df0     BB 01 00 FF 
19df4     1D 15 06 F6 | 	mov	arg02, ##@LR__6010
19df8     98 D2 B0 FD | 	call	#__system___string_cmp
19dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
19e00     18 00 90 5D |  if_ne	jmp	#LR__2062
19e04     0C FD BF FD | 	call	#_read_next_line
19e08     52 00 00 FF 
19e0c     DC E4 05 F1 | 	add	objptr, ##42204
19e10     F2 FA 61 FC | 	wrlong	result1, objptr
19e14     52 00 00 FF 
19e18     DC E4 85 F1 | 	sub	objptr, ##42204
19e1c                 | LR__2062
19e1c                 | ' if readline="" then printerror(55,runheader(0)) :return
19e1c     52 00 00 FF 
19e20     DC E4 05 F1 | 	add	objptr, ##42204
19e24     F2 12 02 FB | 	rdlong	arg01, objptr
19e28     52 00 00 FF 
19e2c     DC E4 85 F1 | 	sub	objptr, ##42204
19e30     BB 01 00 FF 
19e34     1E 15 06 F6 | 	mov	arg02, ##@LR__6011
19e38     58 D2 B0 FD | 	call	#__system___string_cmp
19e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
19e40     20 00 90 5D |  if_ne	jmp	#LR__2063
19e44     50 00 00 FF 
19e48     F0 E4 05 F1 | 	add	objptr, ##41200
19e4c     F2 14 02 FB | 	rdlong	arg02, objptr
19e50     50 00 00 FF 
19e54     F0 E4 85 F1 | 	sub	objptr, ##41200
19e58     37 12 06 F6 | 	mov	arg01, #55
19e5c     60 97 B0 FD | 	call	#_printerror
19e60     30 0C 90 FD | 	jmp	#LR__2111
19e64                 | LR__2063
19e64     34 4F 05 F1 | 	add	fp, #308
19e68     A7 00 68 FC | 	wrlong	#0, fp
19e6c     2C 4F 85 F1 | 	sub	fp, #300
19e70     A7 26 02 FB | 	rdlong	local01, fp
19e74     01 26 86 F1 | 	sub	local01, #1
19e78     28 4F 05 F1 | 	add	fp, #296
19e7c     A7 26 62 FC | 	wrlong	local01, fp
19e80     30 4F 85 F1 | 	sub	fp, #304
19e84                 | ' j=0
19e84                 | ' i=numpar-1
19e84                 | ' do
19e84                 | LR__2064
19e84                 | '   do
19e84                 | LR__2065
19e84     52 00 00 FF 
19e88     DC E4 05 F1 | 	add	objptr, ##42204
19e8c     F2 14 02 FB | 	rdlong	arg02, objptr
19e90     52 00 00 FF 
19e94     DC E4 85 F1 | 	sub	objptr, ##42204
19e98     BB 01 00 FF 
19e9c     1F 17 06 F6 | 	mov	arg03, ##@LR__6012
19ea0     01 12 06 F6 | 	mov	arg01, #1
19ea4     88 F7 B0 FD | 	call	#__system__Instr
19ea8     0C 4E 05 F1 | 	add	fp, #12
19eac     A7 FA 61 FC | 	wrlong	result1, fp
19eb0                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
19eb0     0C 4E 85 F1 | 	sub	fp, #12
19eb4     01 FA 15 F2 | 	cmp	result1, #1 wc
19eb8     3C 00 90 CD |  if_b	jmp	#LR__2066
19ebc     52 00 00 FF 
19ec0     DC E4 05 F1 | 	add	objptr, ##42204
19ec4     F2 12 02 FB | 	rdlong	arg01, objptr
19ec8     52 00 00 FF 
19ecc     DC E4 85 F1 | 	sub	objptr, ##42204
19ed0     0C 4E 05 F1 | 	add	fp, #12
19ed4     A7 14 02 FB | 	rdlong	arg02, fp
19ed8     0C 4E 85 F1 | 	sub	fp, #12
19edc     01 14 86 F1 | 	sub	arg02, #1
19ee0     04 F2 B0 FD | 	call	#__system__Left_S
19ee4     52 00 00 FF 
19ee8     DC E4 05 F1 | 	add	objptr, ##42204
19eec     F2 FA 61 FC | 	wrlong	result1, objptr
19ef0     52 00 00 FF 
19ef4     DC E4 85 F1 | 	sub	objptr, ##42204
19ef8                 | LR__2066
19ef8     52 00 00 FF 
19efc     DC E4 05 F1 | 	add	objptr, ##42204
19f00     F2 14 02 FB | 	rdlong	arg02, objptr
19f04     52 00 00 FF 
19f08     DC E4 85 F1 | 	sub	objptr, ##42204
19f0c     BB 01 00 FF 
19f10     21 17 06 F6 | 	mov	arg03, ##@LR__6013
19f14     01 12 06 F6 | 	mov	arg01, #1
19f18     14 F7 B0 FD | 	call	#__system__Instr
19f1c     0C 4E 05 F1 | 	add	fp, #12
19f20     A7 FA 61 FC | 	wrlong	result1, fp
19f24                 | '     comma=instr(1,readline,",")  
19f24                 | '       if comma>0  then 
19f24     0C 4E 85 F1 | 	sub	fp, #12
19f28     01 FA 15 F2 | 	cmp	result1, #1 wc
19f2c     98 00 90 CD |  if_b	jmp	#LR__2069
19f30     52 00 00 FF 
19f34     DC E4 05 F1 | 	add	objptr, ##42204
19f38     F2 12 02 FB | 	rdlong	arg01, objptr
19f3c     52 00 00 FF 
19f40     DC E4 85 F1 | 	sub	objptr, ##42204
19f44     0C 4E 05 F1 | 	add	fp, #12
19f48     A7 14 02 FB | 	rdlong	arg02, fp
19f4c     0C 4E 85 F1 | 	sub	fp, #12
19f50     01 14 86 F1 | 	sub	arg02, #1
19f54     90 F1 B0 FD | 	call	#__system__Left_S
19f58     04 4E 05 F1 | 	add	fp, #4
19f5c     A7 FA 61 FC | 	wrlong	result1, fp
19f60     04 4E 85 F1 | 	sub	fp, #4
19f64     52 00 00 FF 
19f68     DC E4 05 F1 | 	add	objptr, ##42204
19f6c     F2 12 02 FB | 	rdlong	arg01, objptr
19f70     09 27 02 F6 | 	mov	local01, arg01
19f74     52 00 00 FF 
19f78     DC E4 85 F1 | 	sub	objptr, ##42204
19f7c     09 29 02 F6 | 	mov	local02, arg01
19f80     97 06 48 FB | 	callpa	#(@LR__2068-@LR__2067)>>2,fcache_load_ptr_
19f84                 | LR__2067
19f84     14 FB C9 FA | 	rdbyte	result1, local02 wz
19f88     01 28 06 51 |  if_ne	add	local02, #1
19f8c     F4 FF 9F 5D |  if_ne	jmp	#LR__2067
19f90                 | LR__2068
19f90     09 29 82 F1 | 	sub	local02, arg01
19f94     14 15 02 F6 | 	mov	arg02, local02
19f98     0C 4E 05 F1 | 	add	fp, #12
19f9c     A7 16 02 FB | 	rdlong	arg03, fp
19fa0     0C 4E 85 F1 | 	sub	fp, #12
19fa4     0B 15 82 F1 | 	sub	arg02, arg03
19fa8     13 13 02 F6 | 	mov	arg01, local01
19fac     C0 F1 B0 FD | 	call	#__system__Right_S
19fb0     52 00 00 FF 
19fb4     DC E4 05 F1 | 	add	objptr, ##42204
19fb8     F2 FA 61 FC | 	wrlong	result1, objptr
19fbc     52 00 00 FF 
19fc0     DC E4 85 F1 | 	sub	objptr, ##42204
19fc4     48 00 90 FD | 	jmp	#LR__2070
19fc8                 | LR__2069
19fc8     52 00 00 FF 
19fcc     DC E4 05 F1 | 	add	objptr, ##42204
19fd0     F2 12 02 FB | 	rdlong	arg01, objptr
19fd4     52 00 00 FF 
19fd8     DC E4 85 F1 | 	sub	objptr, ##42204
19fdc     98 F5 B0 FD | 	call	#__system__RTrim_S
19fe0     FD 12 02 F6 | 	mov	arg01, result1
19fe4     D0 F4 B0 FD | 	call	#__system__LTrim_S
19fe8     04 4E 05 F1 | 	add	fp, #4
19fec     A7 FA 61 FC | 	wrlong	result1, fp
19ff0     04 4E 85 F1 | 	sub	fp, #4
19ff4     BB 01 00 FF 
19ff8     23 27 06 F6 | 	mov	local01, ##@LR__6014
19ffc     52 00 00 FF 
1a000     DC E4 05 F1 | 	add	objptr, ##42204
1a004     F2 26 62 FC | 	wrlong	local01, objptr
1a008     52 00 00 FF 
1a00c     DC E4 85 F1 | 	sub	objptr, ##42204
1a010                 | LR__2070
1a010                 | '      
1a010                 | '      if part$<>"" then j=j+1
1a010     04 4E 05 F1 | 	add	fp, #4
1a014     A7 12 02 FB | 	rdlong	arg01, fp
1a018     04 4E 85 F1 | 	sub	fp, #4
1a01c     BB 01 00 FF 
1a020     24 15 06 F6 | 	mov	arg02, ##@LR__6015
1a024     6C D0 B0 FD | 	call	#__system___string_cmp
1a028     00 FA 0D F2 | 	cmp	result1, #0 wz
1a02c     34 4F 05 51 |  if_ne	add	fp, #308
1a030     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a034     01 26 06 51 |  if_ne	add	local01, #1
1a038     A7 26 62 5C |  if_ne	wrlong	local01, fp
1a03c     34 4F 85 51 |  if_ne	sub	fp, #308
1a040     30 4F 05 F1 | 	add	fp, #304
1a044     A7 26 02 FB | 	rdlong	local01, fp
1a048     02 26 66 F0 | 	shl	local01, #2
1a04c     04 4F 85 F1 | 	sub	fp, #260
1a050     A7 26 02 F1 | 	add	local01, fp
1a054     28 4E 85 F1 | 	sub	fp, #40
1a058     A7 FA 01 FB | 	rdlong	result1, fp
1a05c     13 FB 61 FC | 	wrlong	result1, local01
1a060     2C 4F 05 F1 | 	add	fp, #300
1a064     A7 26 02 FB | 	rdlong	local01, fp
1a068     01 26 86 F1 | 	sub	local01, #1
1a06c     A7 26 62 FC | 	wrlong	local01, fp
1a070     30 4F 85 F1 | 	sub	fp, #304
1a074                 | '      args(i)=part$  
1a074                 | '      i=i-1
1a074                 | '     if readline="" then readline=read_next_line() 
1a074     52 00 00 FF 
1a078     DC E4 05 F1 | 	add	objptr, ##42204
1a07c     F2 12 02 FB | 	rdlong	arg01, objptr
1a080     52 00 00 FF 
1a084     DC E4 85 F1 | 	sub	objptr, ##42204
1a088     BB 01 00 FF 
1a08c     25 15 06 F6 | 	mov	arg02, ##@LR__6016
1a090     00 D0 B0 FD | 	call	#__system___string_cmp
1a094     00 FA 0D F2 | 	cmp	result1, #0 wz
1a098     18 00 90 5D |  if_ne	jmp	#LR__2071
1a09c     74 FA BF FD | 	call	#_read_next_line
1a0a0     52 00 00 FF 
1a0a4     DC E4 05 F1 | 	add	objptr, ##42204
1a0a8     F2 FA 61 FC | 	wrlong	result1, objptr
1a0ac     52 00 00 FF 
1a0b0     DC E4 85 F1 | 	sub	objptr, ##42204
1a0b4                 | LR__2071
1a0b4     30 4F 05 F1 | 	add	fp, #304
1a0b8     A7 26 02 FB | 	rdlong	local01, fp
1a0bc     30 4F 85 F1 | 	sub	fp, #304
1a0c0     00 26 56 F2 | 	cmps	local01, #0 wc
1a0c4     28 00 90 CD |  if_b	jmp	#LR__2072
1a0c8     52 00 00 FF 
1a0cc     DC E4 05 F1 | 	add	objptr, ##42204
1a0d0     F2 12 02 FB | 	rdlong	arg01, objptr
1a0d4     52 00 00 FF 
1a0d8     DC E4 85 F1 | 	sub	objptr, ##42204
1a0dc     BB 01 00 FF 
1a0e0     26 15 06 F6 | 	mov	arg02, ##@LR__6017
1a0e4     AC CF B0 FD | 	call	#__system___string_cmp
1a0e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a0ec     94 FD 9F 5D |  if_ne	jmp	#LR__2065
1a0f0                 | LR__2072
1a0f0     30 4F 05 F1 | 	add	fp, #304
1a0f4     A7 26 02 FB | 	rdlong	local01, fp
1a0f8     30 4F 85 F1 | 	sub	fp, #304
1a0fc     00 26 56 F2 | 	cmps	local01, #0 wc
1a100     80 FD 9F 3D |  if_ae	jmp	#LR__2064
1a104                 | ' if j<numpar then printerror(55,runheader(0))
1a104     34 4F 05 F1 | 	add	fp, #308
1a108     A7 26 02 FB | 	rdlong	local01, fp
1a10c     2C 4F 85 F1 | 	sub	fp, #300
1a110     A7 16 02 FB | 	rdlong	arg03, fp
1a114     08 4E 85 F1 | 	sub	fp, #8
1a118     0B 27 52 F2 | 	cmps	local01, arg03 wc
1a11c     50 00 00 CF 
1a120     F0 E4 05 C1 |  if_b	add	objptr, ##41200
1a124     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1a128     50 00 00 CF 
1a12c     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
1a130     37 12 06 C6 |  if_b	mov	arg01, #55
1a134     88 94 B0 CD |  if_b	call	#_printerror
1a138                 | ' 
1a138                 | ' for i=0 to numpar-1
1a138     30 4F 05 F1 | 	add	fp, #304
1a13c     A7 00 68 FC | 	wrlong	#0, fp
1a140     28 4F 85 F1 | 	sub	fp, #296
1a144     A7 2A 02 FB | 	rdlong	local03, fp
1a148     08 4E 85 F1 | 	sub	fp, #8
1a14c                 | LR__2073
1a14c     30 4F 05 F1 | 	add	fp, #304
1a150     A7 2C 02 FB | 	rdlong	local04, fp
1a154     30 4F 85 F1 | 	sub	fp, #304
1a158     16 27 02 F6 | 	mov	local01, local04
1a15c     15 27 52 F2 | 	cmps	local01, local03 wc
1a160     30 09 90 3D |  if_ae	jmp	#LR__2110
1a164                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1a164     30 4F 05 F1 | 	add	fp, #304
1a168     A7 16 02 FB | 	rdlong	arg03, fp
1a16c     02 16 66 F0 | 	shl	arg03, #2
1a170     04 4F 85 F1 | 	sub	fp, #260
1a174     A7 16 02 F1 | 	add	arg03, fp
1a178     0B 13 02 FB | 	rdlong	arg01, arg03
1a17c     2C 4E 85 F1 | 	sub	fp, #44
1a180     EC C7 BE FD | 	call	#_isnum
1a184     FD 2E 02 F6 | 	mov	local05, result1
1a188     30 4F 05 F1 | 	add	fp, #304
1a18c     A7 16 02 FB | 	rdlong	arg03, fp
1a190     02 16 66 F0 | 	shl	arg03, #2
1a194     04 4F 85 F1 | 	sub	fp, #260
1a198     A7 30 02 F6 | 	mov	local06, fp
1a19c     A7 16 02 F1 | 	add	arg03, fp
1a1a0     0B 13 02 FB | 	rdlong	arg01, arg03
1a1a4     2C 4E 85 F1 | 	sub	fp, #44
1a1a8     B0 CB BE FD | 	call	#_isint
1a1ac     FD 2E 2A F5 | 	andn	local05, result1 wz
1a1b0     52 00 00 5F 
1a1b4     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a1b8     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1a1bc     52 00 00 5F 
1a1c0     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a1c4                 | '   if isint(args(i)) then r=result_int 
1a1c4     30 4F 05 F1 | 	add	fp, #304
1a1c8     A7 2E 02 FB | 	rdlong	local05, fp
1a1cc     02 2E 66 F0 | 	shl	local05, #2
1a1d0     04 4F 85 F1 | 	sub	fp, #260
1a1d4     A7 2E 02 F1 | 	add	local05, fp
1a1d8     17 13 02 FB | 	rdlong	arg01, local05
1a1dc     2C 4E 85 F1 | 	sub	fp, #44
1a1e0     78 CB BE FD | 	call	#_isint
1a1e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a1e8     52 00 00 5F 
1a1ec     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a1f0     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1a1f4     52 00 00 5F 
1a1f8     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a1fc                 | '   if isdec(args(i)) then r=result_uint 
1a1fc     30 4F 05 F1 | 	add	fp, #304
1a200     A7 2E 02 FB | 	rdlong	local05, fp
1a204     02 2E 66 F0 | 	shl	local05, #2
1a208     04 4F 85 F1 | 	sub	fp, #260
1a20c     A7 2E 02 F1 | 	add	local05, fp
1a210     17 13 02 FB | 	rdlong	arg01, local05
1a214     2C 4E 85 F1 | 	sub	fp, #44
1a218     E4 CD BE FD | 	call	#_isdec
1a21c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a220     52 00 00 5F 
1a224     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a228     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1a22c     52 00 00 5F 
1a230     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a234                 | '   if not isnum(args(i)) then 
1a234     30 4F 05 F1 | 	add	fp, #304
1a238     A7 2E 02 FB | 	rdlong	local05, fp
1a23c     02 2E 66 F0 | 	shl	local05, #2
1a240     04 4F 85 F1 | 	sub	fp, #260
1a244     A7 2E 02 F1 | 	add	local05, fp
1a248     17 13 02 FB | 	rdlong	arg01, local05
1a24c     2C 4E 85 F1 | 	sub	fp, #44
1a250     1C C7 BE FD | 	call	#_isnum
1a254     FD 2E 22 F6 | 	not	local05, result1
1a258     00 2E 0E F2 | 	cmp	local05, #0 wz
1a25c     4C 01 90 AD |  if_e	jmp	#LR__2078
1a260     52 00 00 FF 
1a264     10 E5 05 F1 | 	add	objptr, ##42256
1a268     F2 56 68 FC | 	wrlong	#43, objptr
1a26c     52 00 00 FF 
1a270     10 E5 85 F1 | 	sub	objptr, ##42256
1a274     30 4F 05 F1 | 	add	fp, #304
1a278     A7 16 02 FB | 	rdlong	arg03, fp
1a27c     02 16 66 F0 | 	shl	arg03, #2
1a280     04 4F 85 F1 | 	sub	fp, #260
1a284     A7 16 02 F1 | 	add	arg03, fp
1a288     0B 13 02 FB | 	rdlong	arg01, arg03
1a28c     2C 4E 85 F1 | 	sub	fp, #44
1a290     09 29 02 F6 | 	mov	local02, arg01
1a294     97 06 48 FB | 	callpa	#(@LR__2075-@LR__2074)>>2,fcache_load_ptr_
1a298                 | LR__2074
1a298     14 FB C9 FA | 	rdbyte	result1, local02 wz
1a29c     01 28 06 51 |  if_ne	add	local02, #1
1a2a0     F4 FF 9F 5D |  if_ne	jmp	#LR__2074
1a2a4                 | LR__2075
1a2a4     09 29 82 F1 | 	sub	local02, arg01
1a2a8     14 FB 01 F6 | 	mov	result1, local02
1a2ac     38 4F 05 F1 | 	add	fp, #312
1a2b0     A7 FA 61 FC | 	wrlong	result1, fp
1a2b4     52 00 00 FF 
1a2b8     98 E4 05 F1 | 	add	objptr, ##42136
1a2bc     F2 12 02 FB | 	rdlong	arg01, objptr
1a2c0     FD 12 82 F1 | 	sub	arg01, result1
1a2c4     04 12 86 F1 | 	sub	arg01, #4
1a2c8     03 12 26 F5 | 	andn	arg01, #3
1a2cc     F2 12 62 FC | 	wrlong	arg01, objptr
1a2d0     52 00 00 FF 
1a2d4     98 E4 85 F1 | 	sub	objptr, ##42136
1a2d8     A7 14 02 FB | 	rdlong	arg02, fp
1a2dc     38 4F 85 F1 | 	sub	fp, #312
1a2e0     7C 94 B0 FD | 	call	#_pslpoke
1a2e4                 | '     pslpoke memtop,l
1a2e4                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1a2e4     34 4F 05 F1 | 	add	fp, #308
1a2e8     A7 02 68 FC | 	wrlong	#1, fp
1a2ec     04 4E 05 F1 | 	add	fp, #4
1a2f0     A7 32 02 FB | 	rdlong	local07, fp
1a2f4     38 4F 85 F1 | 	sub	fp, #312
1a2f8     01 32 06 F1 | 	add	local07, #1
1a2fc                 | LR__2076
1a2fc     34 4F 05 F1 | 	add	fp, #308
1a300     A7 2E 02 FB | 	rdlong	local05, fp
1a304     34 4F 85 F1 | 	sub	fp, #308
1a308     19 2F 52 F2 | 	cmps	local05, local07 wc
1a30c     7C 00 90 3D |  if_ae	jmp	#LR__2077
1a310     52 00 00 FF 
1a314     98 E4 05 F1 | 	add	objptr, ##42136
1a318     F2 30 02 FB | 	rdlong	local06, objptr
1a31c     52 00 00 FF 
1a320     98 E4 85 F1 | 	sub	objptr, ##42136
1a324     03 30 06 F1 | 	add	local06, #3
1a328     34 4F 05 F1 | 	add	fp, #308
1a32c     A7 34 02 FB | 	rdlong	local08, fp
1a330     1A 31 02 F1 | 	add	local06, local08
1a334     04 4E 85 F1 | 	sub	fp, #4
1a338     A7 36 02 FB | 	rdlong	local09, fp
1a33c     02 36 66 F0 | 	shl	local09, #2
1a340     04 4F 85 F1 | 	sub	fp, #260
1a344     A7 38 02 F6 | 	mov	local10, fp
1a348     A7 36 02 F1 | 	add	local09, fp
1a34c     1B 13 02 FB | 	rdlong	arg01, local09
1a350     2C 4E 85 F1 | 	sub	fp, #44
1a354     01 3A 06 F6 | 	mov	local11, #1
1a358     1A 15 02 F6 | 	mov	arg02, local08
1a35c     01 16 06 F6 | 	mov	arg03, #1
1a360     9C EE B0 FD | 	call	#__system__Mid_S
1a364     FD 14 C2 FA | 	rdbyte	arg02, result1
1a368     18 13 02 F6 | 	mov	arg01, local06
1a36c     80 94 B0 FD | 	call	#_pspoke
1a370     34 4F 05 F1 | 	add	fp, #308
1a374     A7 30 02 FB | 	rdlong	local06, fp
1a378     18 2F 02 F6 | 	mov	local05, local06
1a37c     01 2E 06 F1 | 	add	local05, #1
1a380     A7 2E 62 FC | 	wrlong	local05, fp
1a384     34 4F 85 F1 | 	sub	fp, #308
1a388     70 FF 9F FD | 	jmp	#LR__2076
1a38c                 | LR__2077
1a38c     52 00 00 FF 
1a390     98 E4 05 F1 | 	add	objptr, ##42136
1a394     F2 2E 02 FB | 	rdlong	local05, objptr
1a398     52 00 00 FF 
1a39c     98 E4 85 F1 | 	sub	objptr, ##42136
1a3a0     10 4E 05 F1 | 	add	fp, #16
1a3a4     A7 2E 62 FC | 	wrlong	local05, fp
1a3a8     10 4E 85 F1 | 	sub	fp, #16
1a3ac                 | LR__2078
1a3ac     58 33 BF FD | 	call	#_pop
1a3b0     1C 4E 05 F1 | 	add	fp, #28
1a3b4     A7 FA 61 FC | 	wrlong	result1, fp
1a3b8     04 4E 05 F1 | 	add	fp, #4
1a3bc     A7 FC 61 FC | 	wrlong	result2, fp
1a3c0     04 4E 05 F1 | 	add	fp, #4
1a3c4     A7 FE 61 FC | 	wrlong	result3, fp
1a3c8                 | '   t1=pop() 
1a3c8                 | '   if i>=numpar-j then
1a3c8     1C 4E 85 F1 | 	sub	fp, #28
1a3cc     A7 2E 02 FB | 	rdlong	local05, fp
1a3d0     17 3D 02 F6 | 	mov	local12, local05
1a3d4     2C 4F 05 F1 | 	add	fp, #300
1a3d8     A7 3E 02 FB | 	rdlong	local13, fp
1a3dc     1F 41 02 F6 | 	mov	local14, local13
1a3e0     20 3D 82 F1 | 	sub	local12, local14
1a3e4     04 4E 85 F1 | 	sub	fp, #4
1a3e8     A7 42 02 FB | 	rdlong	local15, fp
1a3ec     30 4F 85 F1 | 	sub	fp, #304
1a3f0     21 45 02 F6 | 	mov	local16, local15
1a3f4     1E 45 52 F2 | 	cmps	local16, local12 wc
1a3f8     80 06 90 CD |  if_b	jmp	#LR__2109
1a3fc     20 4E 05 F1 | 	add	fp, #32
1a400     A7 3C 02 FB | 	rdlong	local12, fp
1a404     0C 4E 85 F1 | 	sub	fp, #12
1a408     A7 3C 62 FC | 	wrlong	local12, fp
1a40c                 | '     vartype=t1.result.twowords(1)
1a40c                 | '     select case vartype
1a40c     14 4E 85 F1 | 	sub	fp, #20
1a410     1E 47 0A F6 | 	mov	local17, local12 wz
1a414     64 00 90 AD |  if_e	jmp	#LR__2079
1a418     00 47 0E F2 | 	cmp	local17, #256 wz
1a41c     6C 00 90 AD |  if_e	jmp	#LR__2080
1a420     01 47 0E F2 | 	cmp	local17, #257 wz
1a424     74 00 90 AD |  if_e	jmp	#LR__2081
1a428     02 47 0E F2 | 	cmp	local17, #258 wz
1a42c     7C 00 90 AD |  if_e	jmp	#LR__2082
1a430     03 47 0E F2 | 	cmp	local17, #259 wz
1a434     84 00 90 AD |  if_e	jmp	#LR__2083
1a438     04 47 0E F2 | 	cmp	local17, #260 wz
1a43c     8C 00 90 AD |  if_e	jmp	#LR__2084
1a440     05 47 0E F2 | 	cmp	local17, #261 wz
1a444     94 00 90 AD |  if_e	jmp	#LR__2085
1a448     06 47 0E F2 | 	cmp	local17, #262 wz
1a44c     9C 00 90 AD |  if_e	jmp	#LR__2086
1a450     07 47 0E F2 | 	cmp	local17, #263 wz
1a454     A4 00 90 AD |  if_e	jmp	#LR__2087
1a458     08 47 0E F2 | 	cmp	local17, #264 wz
1a45c     AC 00 90 AD |  if_e	jmp	#LR__2088
1a460     09 47 0E F2 | 	cmp	local17, #265 wz
1a464     B4 00 90 AD |  if_e	jmp	#LR__2089
1a468     0A 47 0E F2 | 	cmp	local17, #266 wz
1a46c     BC 00 90 AD |  if_e	jmp	#LR__2090
1a470     0B 47 0E F2 | 	cmp	local17, #267 wz
1a474     C4 00 90 AD |  if_e	jmp	#LR__2091
1a478     D0 00 90 FD | 	jmp	#LR__2092
1a47c                 | LR__2079
1a47c     18 4E 05 F1 | 	add	fp, #24
1a480     A7 18 68 FC | 	wrlong	#12, fp
1a484     18 4E 85 F1 | 	sub	fp, #24
1a488     CC 00 90 FD | 	jmp	#LR__2093
1a48c                 | LR__2080
1a48c     18 4E 05 F1 | 	add	fp, #24
1a490     A7 18 68 FC | 	wrlong	#12, fp
1a494     18 4E 85 F1 | 	sub	fp, #24
1a498     BC 00 90 FD | 	jmp	#LR__2093
1a49c                 | LR__2081
1a49c     18 4E 05 F1 | 	add	fp, #24
1a4a0     A7 02 68 FC | 	wrlong	#1, fp
1a4a4     18 4E 85 F1 | 	sub	fp, #24
1a4a8     AC 00 90 FD | 	jmp	#LR__2093
1a4ac                 | LR__2082
1a4ac     18 4E 05 F1 | 	add	fp, #24
1a4b0     A7 02 68 FC | 	wrlong	#1, fp
1a4b4     18 4E 85 F1 | 	sub	fp, #24
1a4b8     9C 00 90 FD | 	jmp	#LR__2093
1a4bc                 | LR__2083
1a4bc     18 4E 05 F1 | 	add	fp, #24
1a4c0     A7 04 68 FC | 	wrlong	#2, fp
1a4c4     18 4E 85 F1 | 	sub	fp, #24
1a4c8     8C 00 90 FD | 	jmp	#LR__2093
1a4cc                 | LR__2084
1a4cc     18 4E 05 F1 | 	add	fp, #24
1a4d0     A7 04 68 FC | 	wrlong	#2, fp
1a4d4     18 4E 85 F1 | 	sub	fp, #24
1a4d8     7C 00 90 FD | 	jmp	#LR__2093
1a4dc                 | LR__2085
1a4dc     18 4E 05 F1 | 	add	fp, #24
1a4e0     A7 08 68 FC | 	wrlong	#4, fp
1a4e4     18 4E 85 F1 | 	sub	fp, #24
1a4e8     6C 00 90 FD | 	jmp	#LR__2093
1a4ec                 | LR__2086
1a4ec     18 4E 05 F1 | 	add	fp, #24
1a4f0     A7 08 68 FC | 	wrlong	#4, fp
1a4f4     18 4E 85 F1 | 	sub	fp, #24
1a4f8     5C 00 90 FD | 	jmp	#LR__2093
1a4fc                 | LR__2087
1a4fc     18 4E 05 F1 | 	add	fp, #24
1a500     A7 10 68 FC | 	wrlong	#8, fp
1a504     18 4E 85 F1 | 	sub	fp, #24
1a508     4C 00 90 FD | 	jmp	#LR__2093
1a50c                 | LR__2088
1a50c     18 4E 05 F1 | 	add	fp, #24
1a510     A7 10 68 FC | 	wrlong	#8, fp
1a514     18 4E 85 F1 | 	sub	fp, #24
1a518     3C 00 90 FD | 	jmp	#LR__2093
1a51c                 | LR__2089
1a51c     18 4E 05 F1 | 	add	fp, #24
1a520     A7 0C 68 FC | 	wrlong	#6, fp
1a524     18 4E 85 F1 | 	sub	fp, #24
1a528     2C 00 90 FD | 	jmp	#LR__2093
1a52c                 | LR__2090
1a52c     18 4E 05 F1 | 	add	fp, #24
1a530     A7 10 68 FC | 	wrlong	#8, fp
1a534     18 4E 85 F1 | 	sub	fp, #24
1a538     1C 00 90 FD | 	jmp	#LR__2093
1a53c                 | LR__2091
1a53c     18 4E 05 F1 | 	add	fp, #24
1a540     A7 0A 68 FC | 	wrlong	#5, fp
1a544     18 4E 85 F1 | 	sub	fp, #24
1a548     0C 00 90 FD | 	jmp	#LR__2093
1a54c                 | LR__2092
1a54c     18 4E 05 F1 | 	add	fp, #24
1a550     A7 18 68 FC | 	wrlong	#12, fp
1a554     18 4E 85 F1 | 	sub	fp, #24
1a558                 | LR__2093
1a558                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1a558     18 4E 05 F1 | 	add	fp, #24
1a55c     A7 3C 02 FB | 	rdlong	local12, fp
1a560     18 4E 85 F1 | 	sub	fp, #24
1a564     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a568     74 01 90 5D |  if_ne	jmp	#LR__2098
1a56c     1C 4E 05 F1 | 	add	fp, #28
1a570     A7 3E 02 FB | 	rdlong	local13, fp
1a574     1C 4E 85 F1 | 	sub	fp, #28
1a578     00 04 00 FF 
1a57c     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a580     5C 01 90 3D |  if_ae	jmp	#LR__2098
1a584                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1a584     52 00 00 FF 
1a588     10 E5 05 F1 | 	add	objptr, ##42256
1a58c     F2 3C 02 FB | 	rdlong	local12, objptr
1a590     52 00 00 FF 
1a594     10 E5 85 F1 | 	sub	objptr, ##42256
1a598     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a59c     38 00 90 5D |  if_ne	jmp	#LR__2094
1a5a0     1C 4E 05 F1 | 	add	fp, #28
1a5a4     A7 3C 02 FB | 	rdlong	local12, fp
1a5a8     14 4F 05 F1 | 	add	fp, #276
1a5ac     A7 3E 02 FB | 	rdlong	local13, fp
1a5b0     1F 45 02 F6 | 	mov	local16, local13
1a5b4     02 44 66 F0 | 	shl	local16, #2
1a5b8     04 4F 85 F1 | 	sub	fp, #260
1a5bc     A7 42 02 F6 | 	mov	local15, fp
1a5c0     A7 44 02 F1 | 	add	local16, fp
1a5c4     22 13 02 FB | 	rdlong	arg01, local16
1a5c8     00 14 06 F6 | 	mov	arg02, #0
1a5cc     2C 4E 85 F1 | 	sub	fp, #44
1a5d0     88 FF B0 FD | 	call	#__system____builtin_atoi
1a5d4     1E FB 61 FC | 	wrlong	result1, local12
1a5d8                 | LR__2094
1a5d8                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1a5d8     52 00 00 FF 
1a5dc     10 E5 05 F1 | 	add	objptr, ##42256
1a5e0     F2 3C 02 FB | 	rdlong	local12, objptr
1a5e4     52 00 00 FF 
1a5e8     10 E5 85 F1 | 	sub	objptr, ##42256
1a5ec     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a5f0     38 00 90 5D |  if_ne	jmp	#LR__2095
1a5f4     1C 4E 05 F1 | 	add	fp, #28
1a5f8     A7 3C 02 FB | 	rdlong	local12, fp
1a5fc     14 4F 05 F1 | 	add	fp, #276
1a600     A7 3E 02 FB | 	rdlong	local13, fp
1a604     1F 45 02 F6 | 	mov	local16, local13
1a608     02 44 66 F0 | 	shl	local16, #2
1a60c     04 4F 85 F1 | 	sub	fp, #260
1a610     A7 42 02 F6 | 	mov	local15, fp
1a614     A7 44 02 F1 | 	add	local16, fp
1a618     22 13 02 FB | 	rdlong	arg01, local16
1a61c     00 14 06 F6 | 	mov	arg02, #0
1a620     2C 4E 85 F1 | 	sub	fp, #44
1a624     34 FF B0 FD | 	call	#__system____builtin_atoi
1a628     1E FB 61 FC | 	wrlong	result1, local12
1a62c                 | LR__2095
1a62c                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1a62c     52 00 00 FF 
1a630     10 E5 05 F1 | 	add	objptr, ##42256
1a634     F2 3C 02 FB | 	rdlong	local12, objptr
1a638     52 00 00 FF 
1a63c     10 E5 85 F1 | 	sub	objptr, ##42256
1a640     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a644     3C 00 90 5D |  if_ne	jmp	#LR__2096
1a648     30 4F 05 F1 | 	add	fp, #304
1a64c     A7 3E 02 FB | 	rdlong	local13, fp
1a650     02 3E 66 F0 | 	shl	local13, #2
1a654     04 4F 85 F1 | 	sub	fp, #260
1a658     A7 44 02 F6 | 	mov	local16, fp
1a65c     A7 3E 02 F1 | 	add	local13, fp
1a660     1F 13 02 FB | 	rdlong	arg01, local13
1a664     2C 4E 85 F1 | 	sub	fp, #44
1a668     84 00 B1 FD | 	call	#__system____builtin_atof
1a66c     28 4E 05 F1 | 	add	fp, #40
1a670     A7 FA 61 FC | 	wrlong	result1, fp
1a674     0C 4E 85 F1 | 	sub	fp, #12
1a678     A7 3C 02 FB | 	rdlong	local12, fp
1a67c     1C 4E 85 F1 | 	sub	fp, #28
1a680     1E FB 61 FC | 	wrlong	result1, local12
1a684                 | LR__2096
1a684                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1a684     52 00 00 FF 
1a688     10 E5 05 F1 | 	add	objptr, ##42256
1a68c     F2 3C 02 FB | 	rdlong	local12, objptr
1a690     52 00 00 FF 
1a694     10 E5 85 F1 | 	sub	objptr, ##42256
1a698     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a69c     18 00 90 5D |  if_ne	jmp	#LR__2097
1a6a0     1C 4E 05 F1 | 	add	fp, #28
1a6a4     A7 12 02 FB | 	rdlong	arg01, fp
1a6a8     0C 4E 85 F1 | 	sub	fp, #12
1a6ac     A7 14 02 FB | 	rdlong	arg02, fp
1a6b0     10 4E 85 F1 | 	sub	fp, #16
1a6b4     09 15 62 FC | 	wrlong	arg02, arg01
1a6b8                 | LR__2097
1a6b8     1C 4E 05 F1 | 	add	fp, #28
1a6bc     A7 12 02 FB | 	rdlong	arg01, fp
1a6c0     1C 4E 85 F1 | 	sub	fp, #28
1a6c4     08 12 06 F1 | 	add	arg01, #8
1a6c8     52 00 00 FF 
1a6cc     10 E5 05 F1 | 	add	objptr, ##42256
1a6d0     F2 14 02 FB | 	rdlong	arg02, objptr
1a6d4     52 00 00 FF 
1a6d8     10 E5 85 F1 | 	sub	objptr, ##42256
1a6dc     09 15 62 FC | 	wrlong	arg02, arg01
1a6e0                 | LR__2098
1a6e0                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1a6e0     18 4E 05 F1 | 	add	fp, #24
1a6e4     A7 3C 02 FB | 	rdlong	local12, fp
1a6e8     18 4E 85 F1 | 	sub	fp, #24
1a6ec     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a6f0     94 01 90 5D |  if_ne	jmp	#LR__2103
1a6f4     1C 4E 05 F1 | 	add	fp, #28
1a6f8     A7 3E 02 FB | 	rdlong	local13, fp
1a6fc     1C 4E 85 F1 | 	sub	fp, #28
1a700     00 04 00 FF 
1a704     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a708     7C 01 90 CD |  if_b	jmp	#LR__2103
1a70c                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1a70c     52 00 00 FF 
1a710     10 E5 05 F1 | 	add	objptr, ##42256
1a714     F2 3C 02 FB | 	rdlong	local12, objptr
1a718     52 00 00 FF 
1a71c     10 E5 85 F1 | 	sub	objptr, ##42256
1a720     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a724     40 00 90 5D |  if_ne	jmp	#LR__2099
1a728     1C 4E 05 F1 | 	add	fp, #28
1a72c     A7 3C 02 FB | 	rdlong	local12, fp
1a730     14 4F 05 F1 | 	add	fp, #276
1a734     A7 3E 02 FB | 	rdlong	local13, fp
1a738     1F 45 02 F6 | 	mov	local16, local13
1a73c     02 44 66 F0 | 	shl	local16, #2
1a740     04 4F 85 F1 | 	sub	fp, #260
1a744     A7 42 02 F6 | 	mov	local15, fp
1a748     A7 44 02 F1 | 	add	local16, fp
1a74c     22 13 02 FB | 	rdlong	arg01, local16
1a750     00 14 06 F6 | 	mov	arg02, #0
1a754     2C 4E 85 F1 | 	sub	fp, #44
1a758     00 FE B0 FD | 	call	#__system____builtin_atoi
1a75c     FD 14 02 F6 | 	mov	arg02, result1
1a760     1E 13 02 F6 | 	mov	arg01, local12
1a764     F8 8F B0 FD | 	call	#_pslpoke
1a768                 | LR__2099
1a768                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1a768     52 00 00 FF 
1a76c     10 E5 05 F1 | 	add	objptr, ##42256
1a770     F2 3C 02 FB | 	rdlong	local12, objptr
1a774     52 00 00 FF 
1a778     10 E5 85 F1 | 	sub	objptr, ##42256
1a77c     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a780     40 00 90 5D |  if_ne	jmp	#LR__2100
1a784     1C 4E 05 F1 | 	add	fp, #28
1a788     A7 3C 02 FB | 	rdlong	local12, fp
1a78c     14 4F 05 F1 | 	add	fp, #276
1a790     A7 3E 02 FB | 	rdlong	local13, fp
1a794     1F 45 02 F6 | 	mov	local16, local13
1a798     02 44 66 F0 | 	shl	local16, #2
1a79c     04 4F 85 F1 | 	sub	fp, #260
1a7a0     A7 42 02 F6 | 	mov	local15, fp
1a7a4     A7 44 02 F1 | 	add	local16, fp
1a7a8     22 13 02 FB | 	rdlong	arg01, local16
1a7ac     00 14 06 F6 | 	mov	arg02, #0
1a7b0     2C 4E 85 F1 | 	sub	fp, #44
1a7b4     A4 FD B0 FD | 	call	#__system____builtin_atoi
1a7b8     FD 14 02 F6 | 	mov	arg02, result1
1a7bc     1E 13 02 F6 | 	mov	arg01, local12
1a7c0     9C 8F B0 FD | 	call	#_pslpoke
1a7c4                 | LR__2100
1a7c4                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a7c4     52 00 00 FF 
1a7c8     10 E5 05 F1 | 	add	objptr, ##42256
1a7cc     F2 3C 02 FB | 	rdlong	local12, objptr
1a7d0     52 00 00 FF 
1a7d4     10 E5 85 F1 | 	sub	objptr, ##42256
1a7d8     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a7dc     4C 00 90 5D |  if_ne	jmp	#LR__2101
1a7e0     30 4F 05 F1 | 	add	fp, #304
1a7e4     A7 3E 02 FB | 	rdlong	local13, fp
1a7e8     02 3E 66 F0 | 	shl	local13, #2
1a7ec     04 4F 85 F1 | 	sub	fp, #260
1a7f0     A7 44 02 F6 | 	mov	local16, fp
1a7f4     A7 3E 02 F1 | 	add	local13, fp
1a7f8     1F 13 02 FB | 	rdlong	arg01, local13
1a7fc     2C 4E 85 F1 | 	sub	fp, #44
1a800     EC FE B0 FD | 	call	#__system____builtin_atof
1a804     28 4E 05 F1 | 	add	fp, #40
1a808     A7 FA 61 FC | 	wrlong	result1, fp
1a80c     0C 4E 85 F1 | 	sub	fp, #12
1a810     A7 3C 02 FB | 	rdlong	local12, fp
1a814     0C 4E 05 F1 | 	add	fp, #12
1a818     A7 12 02 F6 | 	mov	arg01, fp
1a81c     28 4E 85 F1 | 	sub	fp, #40
1a820     09 15 02 FB | 	rdlong	arg02, arg01
1a824     1E 13 02 F6 | 	mov	arg01, local12
1a828     34 8F B0 FD | 	call	#_pslpoke
1a82c                 | LR__2101
1a82c                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a82c     52 00 00 FF 
1a830     10 E5 05 F1 | 	add	objptr, ##42256
1a834     F2 3C 02 FB | 	rdlong	local12, objptr
1a838     52 00 00 FF 
1a83c     10 E5 85 F1 | 	sub	objptr, ##42256
1a840     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a844     18 00 90 5D |  if_ne	jmp	#LR__2102
1a848     1C 4E 05 F1 | 	add	fp, #28
1a84c     A7 12 02 FB | 	rdlong	arg01, fp
1a850     0C 4E 85 F1 | 	sub	fp, #12
1a854     A7 14 02 FB | 	rdlong	arg02, fp
1a858     10 4E 85 F1 | 	sub	fp, #16
1a85c     00 8F B0 FD | 	call	#_pslpoke
1a860                 | LR__2102
1a860     1C 4E 05 F1 | 	add	fp, #28
1a864     A7 12 02 FB | 	rdlong	arg01, fp
1a868     1C 4E 85 F1 | 	sub	fp, #28
1a86c     08 12 06 F1 | 	add	arg01, #8
1a870     52 00 00 FF 
1a874     10 E5 05 F1 | 	add	objptr, ##42256
1a878     F2 14 02 FB | 	rdlong	arg02, objptr
1a87c     52 00 00 FF 
1a880     10 E5 85 F1 | 	sub	objptr, ##42256
1a884     D8 8E B0 FD | 	call	#_pslpoke
1a888                 | LR__2103
1a888                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a888     18 4E 05 F1 | 	add	fp, #24
1a88c     A7 3C 02 FB | 	rdlong	local12, fp
1a890     18 4E 85 F1 | 	sub	fp, #24
1a894     05 3C 0E F2 | 	cmp	local12, #5 wz
1a898     52 00 00 AF 
1a89c     10 E5 05 A1 |  if_e	add	objptr, ##42256
1a8a0     F2 40 02 AB |  if_e	rdlong	local14, objptr
1a8a4     52 00 00 AF 
1a8a8     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1a8ac     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1a8b0     18 00 90 5D |  if_ne	jmp	#LR__2104
1a8b4     1C 4E 05 F1 | 	add	fp, #28
1a8b8     A7 12 02 FB | 	rdlong	arg01, fp
1a8bc     0C 4E 85 F1 | 	sub	fp, #12
1a8c0     A7 14 02 FB | 	rdlong	arg02, fp
1a8c4     10 4E 85 F1 | 	sub	fp, #16
1a8c8     94 8E B0 FD | 	call	#_pslpoke
1a8cc                 | LR__2104
1a8cc                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1a8cc     18 4E 05 F1 | 	add	fp, #24
1a8d0     A7 3C 02 FB | 	rdlong	local12, fp
1a8d4     18 4E 85 F1 | 	sub	fp, #24
1a8d8     04 3C 0E F2 | 	cmp	local12, #4 wz
1a8dc     54 00 90 5D |  if_ne	jmp	#LR__2105
1a8e0     52 00 00 FF 
1a8e4     10 E5 05 F1 | 	add	objptr, ##42256
1a8e8     F2 40 02 FB | 	rdlong	local14, objptr
1a8ec     52 00 00 FF 
1a8f0     10 E5 85 F1 | 	sub	objptr, ##42256
1a8f4     2B 40 0E F2 | 	cmp	local14, #43 wz
1a8f8     38 00 90 AD |  if_e	jmp	#LR__2105
1a8fc     1C 4E 05 F1 | 	add	fp, #28
1a900     A7 3C 02 FB | 	rdlong	local12, fp
1a904     14 4F 05 F1 | 	add	fp, #276
1a908     A7 44 02 FB | 	rdlong	local16, fp
1a90c     02 44 66 F0 | 	shl	local16, #2
1a910     04 4F 85 F1 | 	sub	fp, #260
1a914     A7 44 02 F1 | 	add	local16, fp
1a918     22 13 02 FB | 	rdlong	arg01, local16
1a91c     00 14 06 F6 | 	mov	arg02, #0
1a920     2C 4E 85 F1 | 	sub	fp, #44
1a924     34 FC B0 FD | 	call	#__system____builtin_atoi
1a928     FD 14 02 F6 | 	mov	arg02, result1
1a92c     1E 13 02 F6 | 	mov	arg01, local12
1a930     2C 8E B0 FD | 	call	#_pslpoke
1a934                 | LR__2105
1a934                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1a934     18 4E 05 F1 | 	add	fp, #24
1a938     A7 3C 02 FB | 	rdlong	local12, fp
1a93c     18 4E 85 F1 | 	sub	fp, #24
1a940     02 3C 0E F2 | 	cmp	local12, #2 wz
1a944     54 00 90 5D |  if_ne	jmp	#LR__2106
1a948     52 00 00 FF 
1a94c     10 E5 05 F1 | 	add	objptr, ##42256
1a950     F2 40 02 FB | 	rdlong	local14, objptr
1a954     52 00 00 FF 
1a958     10 E5 85 F1 | 	sub	objptr, ##42256
1a95c     2B 40 0E F2 | 	cmp	local14, #43 wz
1a960     38 00 90 AD |  if_e	jmp	#LR__2106
1a964     1C 4E 05 F1 | 	add	fp, #28
1a968     A7 3C 02 FB | 	rdlong	local12, fp
1a96c     14 4F 05 F1 | 	add	fp, #276
1a970     A7 44 02 FB | 	rdlong	local16, fp
1a974     02 44 66 F0 | 	shl	local16, #2
1a978     04 4F 85 F1 | 	sub	fp, #260
1a97c     A7 44 02 F1 | 	add	local16, fp
1a980     22 13 02 FB | 	rdlong	arg01, local16
1a984     00 14 06 F6 | 	mov	arg02, #0
1a988     2C 4E 85 F1 | 	sub	fp, #44
1a98c     CC FB B0 FD | 	call	#__system____builtin_atoi
1a990     FD 14 02 F6 | 	mov	arg02, result1
1a994     1E 13 02 F6 | 	mov	arg01, local12
1a998     0C 8E B0 FD | 	call	#_psdpoke
1a99c                 | LR__2106
1a99c                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1a99c     18 4E 05 F1 | 	add	fp, #24
1a9a0     A7 3C 02 FB | 	rdlong	local12, fp
1a9a4     18 4E 85 F1 | 	sub	fp, #24
1a9a8     01 3C 0E F2 | 	cmp	local12, #1 wz
1a9ac     54 00 90 5D |  if_ne	jmp	#LR__2107
1a9b0     52 00 00 FF 
1a9b4     10 E5 05 F1 | 	add	objptr, ##42256
1a9b8     F2 40 02 FB | 	rdlong	local14, objptr
1a9bc     52 00 00 FF 
1a9c0     10 E5 85 F1 | 	sub	objptr, ##42256
1a9c4     2B 40 0E F2 | 	cmp	local14, #43 wz
1a9c8     38 00 90 AD |  if_e	jmp	#LR__2107
1a9cc     1C 4E 05 F1 | 	add	fp, #28
1a9d0     A7 3C 02 FB | 	rdlong	local12, fp
1a9d4     14 4F 05 F1 | 	add	fp, #276
1a9d8     A7 44 02 FB | 	rdlong	local16, fp
1a9dc     02 44 66 F0 | 	shl	local16, #2
1a9e0     04 4F 85 F1 | 	sub	fp, #260
1a9e4     A7 44 02 F1 | 	add	local16, fp
1a9e8     22 13 02 FB | 	rdlong	arg01, local16
1a9ec     00 14 06 F6 | 	mov	arg02, #0
1a9f0     2C 4E 85 F1 | 	sub	fp, #44
1a9f4     64 FB B0 FD | 	call	#__system____builtin_atoi
1a9f8     FD 14 02 F6 | 	mov	arg02, result1
1a9fc     1E 13 02 F6 | 	mov	arg01, local12
1aa00     EC 8D B0 FD | 	call	#_pspoke
1aa04                 | LR__2107
1aa04                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1aa04     18 4E 05 F1 | 	add	fp, #24
1aa08     A7 3C 02 FB | 	rdlong	local12, fp
1aa0c     18 4E 85 F1 | 	sub	fp, #24
1aa10     06 3C 0E F2 | 	cmp	local12, #6 wz
1aa14     64 00 90 5D |  if_ne	jmp	#LR__2108
1aa18     52 00 00 FF 
1aa1c     10 E5 05 F1 | 	add	objptr, ##42256
1aa20     F2 40 02 FB | 	rdlong	local14, objptr
1aa24     52 00 00 FF 
1aa28     10 E5 85 F1 | 	sub	objptr, ##42256
1aa2c     2B 40 0E F2 | 	cmp	local14, #43 wz
1aa30     48 00 90 AD |  if_e	jmp	#LR__2108
1aa34     30 4F 05 F1 | 	add	fp, #304
1aa38     A7 3E 02 FB | 	rdlong	local13, fp
1aa3c     02 3E 66 F0 | 	shl	local13, #2
1aa40     04 4F 85 F1 | 	sub	fp, #260
1aa44     A7 3E 02 F1 | 	add	local13, fp
1aa48     1F 13 02 FB | 	rdlong	arg01, local13
1aa4c     2C 4E 85 F1 | 	sub	fp, #44
1aa50     9C FC B0 FD | 	call	#__system____builtin_atof
1aa54     28 4E 05 F1 | 	add	fp, #40
1aa58     A7 FA 61 FC | 	wrlong	result1, fp
1aa5c     0C 4E 85 F1 | 	sub	fp, #12
1aa60     A7 3C 02 FB | 	rdlong	local12, fp
1aa64     0C 4E 05 F1 | 	add	fp, #12
1aa68     A7 12 02 F6 | 	mov	arg01, fp
1aa6c     28 4E 85 F1 | 	sub	fp, #40
1aa70     09 15 02 FB | 	rdlong	arg02, arg01
1aa74     1E 13 02 F6 | 	mov	arg01, local12
1aa78     E4 8C B0 FD | 	call	#_pslpoke
1aa7c                 | LR__2108
1aa7c                 | LR__2109
1aa7c     30 4F 05 F1 | 	add	fp, #304
1aa80     A7 40 02 FB | 	rdlong	local14, fp
1aa84     01 40 06 F1 | 	add	local14, #1
1aa88     A7 40 62 FC | 	wrlong	local14, fp
1aa8c     30 4F 85 F1 | 	sub	fp, #304
1aa90     B8 F6 9F FD | 	jmp	#LR__2073
1aa94                 | LR__2110
1aa94                 | LR__2111
1aa94     A7 F0 03 F6 | 	mov	ptra, fp
1aa98     B2 00 A0 FD | 	call	#popregs_
1aa9c                 | _do_read_ret
1aa9c     2D 00 64 FD | 	ret
1aaa0                 | 
1aaa0                 | ' 
1aaa0                 | ' '------------------- release
1aaa0                 | ' 
1aaa0                 | ' sub do_release
1aaa0                 | _do_release
1aaa0     00 4A 05 F6 | 	mov	COUNT_, #0
1aaa4     A8 00 A0 FD | 	call	#pushregs_
1aaa8     10 F0 07 F1 | 	add	ptra, #16
1aaac     58 2C BF FD | 	call	#_pop
1aab0     FF 14 02 F6 | 	mov	arg02, result3
1aab4     A7 FA 61 FC | 	wrlong	result1, fp
1aab8     04 4E 05 F1 | 	add	fp, #4
1aabc     A7 FC 61 FC | 	wrlong	result2, fp
1aac0     04 4E 05 F1 | 	add	fp, #4
1aac4     A7 14 62 FC | 	wrlong	arg02, fp
1aac8     08 4E 85 F1 | 	sub	fp, #8
1aacc     A7 12 02 F6 | 	mov	arg01, fp
1aad0     18 2E BF FD | 	call	#_converttoint
1aad4     0C 4E 05 F1 | 	add	fp, #12
1aad8     A7 FA 61 FC | 	wrlong	result1, fp
1aadc                 | ' 
1aadc                 | ' t1=pop()
1aadc                 | ' channel=converttoint(t1)
1aadc                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1aadc     0C 4E 85 F1 | 	sub	fp, #12
1aae0     00 FA 55 F2 | 	cmps	result1, #0 wc
1aae4     44 00 90 CD |  if_b	jmp	#LR__2120
1aae8     0C 4E 05 F1 | 	add	fp, #12
1aaec     A7 14 02 FB | 	rdlong	arg02, fp
1aaf0     0C 4E 85 F1 | 	sub	fp, #12
1aaf4     08 14 56 F2 | 	cmps	arg02, #8 wc
1aaf8     30 00 90 3D |  if_ae	jmp	#LR__2120
1aafc     37 00 00 FF 
1ab00     10 E4 05 F1 | 	add	objptr, ##28176
1ab04     F2 12 02 FB | 	rdlong	arg01, objptr
1ab08     37 00 00 FF 
1ab0c     10 E4 85 F1 | 	sub	objptr, ##28176
1ab10     0C 4E 05 F1 | 	add	fp, #12
1ab14     A7 14 02 FB | 	rdlong	arg02, fp
1ab18     0C 4E 85 F1 | 	sub	fp, #12
1ab1c     06 14 66 F0 | 	shl	arg02, #6
1ab20     0A 13 02 F1 | 	add	arg01, arg02
1ab24     2C 12 06 F1 | 	add	arg01, #44
1ab28     09 FF 69 FC | 	wrlong	#255, arg01
1ab2c                 | LR__2120
1ab2c     A7 F0 03 F6 | 	mov	ptra, fp
1ab30     B2 00 A0 FD | 	call	#popregs_
1ab34                 | _do_release_ret
1ab34     2D 00 64 FD | 	ret
1ab38                 | 
1ab38                 | ' 
1ab38                 | ' '------------------- restore
1ab38                 | ' 
1ab38                 | ' sub do_restore()
1ab38                 | _do_restore
1ab38     4A 00 00 FF 
1ab3c     88 E4 05 F1 | 	add	objptr, ##38024
1ab40     F2 00 02 FB | 	rdlong	_var01, objptr
1ab44     06 00 00 FF 
1ab48     A4 E4 05 F1 | 	add	objptr, ##3236
1ab4c     F2 00 62 FC | 	wrlong	_var01, objptr
1ab50     BB 01 00 FF 
1ab54     27 01 06 F6 | 	mov	_var01, ##@LR__6018
1ab58     01 00 00 FF 
1ab5c     B0 E5 05 F1 | 	add	objptr, ##944
1ab60     F2 00 62 FC | 	wrlong	_var01, objptr
1ab64     52 00 00 FF 
1ab68     DC E4 85 F1 | 	sub	objptr, ##42204
1ab6c                 | _do_restore_ret
1ab6c     2D 00 64 FD | 	ret
1ab70                 | 
1ab70                 | ' 
1ab70                 | ' '------------------- restorepalette
1ab70                 | ' 
1ab70                 | ' sub do_restorepalette()
1ab70                 | _do_restorepalette
1ab70     AC 94 B0 FD | 	call	#_hg010b_spin2_restorepalette
1ab74                 | _do_restorepalette_ret
1ab74     2D 00 64 FD | 	ret
1ab78                 | 
1ab78                 | ' '------------------- return
1ab78                 | ' 
1ab78                 | ' sub do_return()
1ab78                 | _do_return
1ab78                 | ' if gosubtop>0 then
1ab78     50 00 00 FF 
1ab7c     34 E5 05 F1 | 	add	objptr, ##41268
1ab80     F2 00 02 FB | 	rdlong	_var01, objptr
1ab84     50 00 00 FF 
1ab88     34 E5 85 F1 | 	sub	objptr, ##41268
1ab8c     01 00 56 F2 | 	cmps	_var01, #1 wc
1ab90     8C 00 90 CD |  if_b	jmp	#LR__2130
1ab94     50 00 00 FF 
1ab98     34 E5 05 F1 | 	add	objptr, ##41268
1ab9c     F2 00 02 FB | 	rdlong	_var01, objptr
1aba0     03 00 66 F0 | 	shl	_var01, #3
1aba4     03 00 00 FF 
1aba8     88 E5 85 F1 | 	sub	objptr, ##1928
1abac     F2 00 02 F1 | 	add	_var01, objptr
1abb0     00 01 02 FB | 	rdlong	_var01, _var01
1abb4     03 00 00 FF 
1abb8     0C E5 05 F1 | 	add	objptr, ##1804
1abbc     F2 00 62 FC | 	wrlong	_var01, objptr
1abc0     7C E4 05 F1 | 	add	objptr, #124
1abc4     F2 00 02 FB | 	rdlong	_var01, objptr
1abc8     03 00 66 F0 | 	shl	_var01, #3
1abcc     03 00 00 FF 
1abd0     88 E5 85 F1 | 	sub	objptr, ##1928
1abd4     F2 00 02 F1 | 	add	_var01, objptr
1abd8     04 00 06 F1 | 	add	_var01, #4
1abdc     00 01 02 FB | 	rdlong	_var01, _var01
1abe0     03 00 00 FF 
1abe4     10 E5 05 F1 | 	add	objptr, ##1808
1abe8     F2 00 62 FC | 	wrlong	_var01, objptr
1abec     06 00 00 FF 
1abf0     40 E4 85 F1 | 	sub	objptr, ##3136
1abf4     F2 00 02 FB | 	rdlong	_var01, objptr
1abf8     01 00 86 F1 | 	sub	_var01, #1
1abfc     04 E4 05 F1 | 	add	objptr, #4
1ac00     F2 00 62 FC | 	wrlong	_var01, objptr
1ac04     06 00 00 FF 
1ac08     B4 E4 05 F1 | 	add	objptr, ##3252
1ac0c     F2 00 02 FB | 	rdlong	_var01, objptr
1ac10     01 00 86 F1 | 	sub	_var01, #1
1ac14     F2 00 62 FC | 	wrlong	_var01, objptr
1ac18     50 00 00 FF 
1ac1c     34 E5 85 F1 | 	sub	objptr, ##41268
1ac20                 | LR__2130
1ac20                 | _do_return_ret
1ac20     2D 00 64 FD | 	ret
1ac24                 | 
1ac24                 | ' 
1ac24                 | ' '------------------- right$
1ac24                 | ' 
1ac24                 | ' sub do_right
1ac24                 | _do_right
1ac24     00 4A 05 F6 | 	mov	COUNT_, #0
1ac28     A8 00 A0 FD | 	call	#pushregs_
1ac2c     14 F0 07 F1 | 	add	ptra, #20
1ac30     4A 00 00 FF 
1ac34     80 E4 05 F1 | 	add	objptr, ##38016
1ac38     F2 16 02 FB | 	rdlong	arg03, objptr
1ac3c     0B 15 02 F6 | 	mov	arg02, arg03
1ac40     01 14 66 F0 | 	shl	arg02, #1
1ac44     0B 15 02 F1 | 	add	arg02, arg03
1ac48     02 14 66 F0 | 	shl	arg02, #2
1ac4c     03 00 00 FF 
1ac50     04 E4 85 F1 | 	sub	objptr, ##1540
1ac54     F2 14 02 F1 | 	add	arg02, objptr
1ac58     0A 17 02 FB | 	rdlong	arg03, arg02
1ac5c     0C 4E 05 F1 | 	add	fp, #12
1ac60     A7 16 62 FC | 	wrlong	arg03, fp
1ac64                 | ' 
1ac64                 | ' numpar=compiledline(lineptr_e).result.uresult
1ac64                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1ac64     0C 4E 85 F1 | 	sub	fp, #12
1ac68     02 16 0E F2 | 	cmp	arg03, #2 wz
1ac6c     47 00 00 FF 
1ac70     7C E4 85 F1 | 	sub	objptr, ##36476
1ac74     40 00 90 AD |  if_e	jmp	#LR__2140
1ac78     00 12 06 F6 | 	mov	arg01, #0
1ac7c     14 21 B1 FD | 	call	#__system___getiolock_0616
1ac80     FD 12 02 F6 | 	mov	arg01, result1
1ac84     E4 C3 B0 FD | 	call	#__system___lockmem
1ac88     BB 01 00 FF 
1ac8c     28 15 06 F6 | 	mov	arg02, ##@LR__6019
1ac90     00 12 06 F6 | 	mov	arg01, #0
1ac94     00 16 06 F6 | 	mov	arg03, #0
1ac98     C4 D0 B0 FD | 	call	#__system___basic_print_string
1ac9c     00 12 06 F6 | 	mov	arg01, #0
1aca0     F0 20 B1 FD | 	call	#__system___getiolock_0616
1aca4     FD 00 68 FC | 	wrlong	#0, result1
1aca8     27 12 06 F6 | 	mov	arg01, #39
1acac     00 14 06 F6 | 	mov	arg02, #0
1acb0     0C 89 B0 FD | 	call	#_printerror
1acb4     EC 00 90 FD | 	jmp	#LR__2143
1acb8                 | LR__2140
1acb8     4C 2A BF FD | 	call	#_pop
1acbc     FF 16 02 F6 | 	mov	arg03, result3
1acc0     A7 FA 61 FC | 	wrlong	result1, fp
1acc4     04 4E 05 F1 | 	add	fp, #4
1acc8     A7 FC 61 FC | 	wrlong	result2, fp
1accc     04 4E 05 F1 | 	add	fp, #4
1acd0     A7 16 62 FC | 	wrlong	arg03, fp
1acd4     08 4E 85 F1 | 	sub	fp, #8
1acd8     A7 12 02 F6 | 	mov	arg01, fp
1acdc     0C 2C BF FD | 	call	#_converttoint
1ace0     FD 16 02 F6 | 	mov	arg03, result1
1ace4     10 4E 05 F1 | 	add	fp, #16
1ace8     A7 16 62 FC | 	wrlong	arg03, fp
1acec     10 4E 85 F1 | 	sub	fp, #16
1acf0     14 2A BF FD | 	call	#_pop
1acf4     FF 16 02 F6 | 	mov	arg03, result3
1acf8     A7 FA 61 FC | 	wrlong	result1, fp
1acfc     04 4E 05 F1 | 	add	fp, #4
1ad00     A7 FC 61 FC | 	wrlong	result2, fp
1ad04     04 4E 05 F1 | 	add	fp, #4
1ad08     A7 16 62 FC | 	wrlong	arg03, fp
1ad0c                 | ' t1=pop() : arg=converttoint(t1)
1ad0c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1ad0c     08 4E 85 F1 | 	sub	fp, #8
1ad10     2B 16 0E F2 | 	cmp	arg03, #43 wz
1ad14     18 00 90 5D |  if_ne	jmp	#LR__2141
1ad18     A7 12 02 FB | 	rdlong	arg01, fp
1ad1c     60 2B BF FD | 	call	#_convertstring
1ad20     A7 FA 61 FC | 	wrlong	result1, fp
1ad24     08 4E 05 F1 | 	add	fp, #8
1ad28     A7 3E 68 FC | 	wrlong	#31, fp
1ad2c     08 4E 85 F1 | 	sub	fp, #8
1ad30                 | LR__2141
1ad30                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1ad30     08 4E 05 F1 | 	add	fp, #8
1ad34     A7 16 02 FB | 	rdlong	arg03, fp
1ad38     08 4E 85 F1 | 	sub	fp, #8
1ad3c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1ad40     40 00 90 AD |  if_e	jmp	#LR__2142
1ad44     00 12 06 F6 | 	mov	arg01, #0
1ad48     48 20 B1 FD | 	call	#__system___getiolock_0616
1ad4c     FD 12 02 F6 | 	mov	arg01, result1
1ad50     18 C3 B0 FD | 	call	#__system___lockmem
1ad54     BB 01 00 FF 
1ad58     31 15 06 F6 | 	mov	arg02, ##@LR__6020
1ad5c     00 12 06 F6 | 	mov	arg01, #0
1ad60     00 16 06 F6 | 	mov	arg03, #0
1ad64     F8 CF B0 FD | 	call	#__system___basic_print_string
1ad68     00 12 06 F6 | 	mov	arg01, #0
1ad6c     24 20 B1 FD | 	call	#__system___getiolock_0616
1ad70     FD 00 68 FC | 	wrlong	#0, result1
1ad74     0F 12 06 F6 | 	mov	arg01, #15
1ad78     00 14 06 F6 | 	mov	arg02, #0
1ad7c     40 88 B0 FD | 	call	#_printerror
1ad80     20 00 90 FD | 	jmp	#LR__2143
1ad84                 | LR__2142
1ad84     A7 12 02 FB | 	rdlong	arg01, fp
1ad88     10 4E 05 F1 | 	add	fp, #16
1ad8c     A7 14 02 FB | 	rdlong	arg02, fp
1ad90     10 4E 85 F1 | 	sub	fp, #16
1ad94     D8 E3 B0 FD | 	call	#__system__Right_S
1ad98     A7 FA 61 FC | 	wrlong	result1, fp
1ad9c     A7 12 02 F6 | 	mov	arg01, fp
1ada0     FC 29 BF FD | 	call	#_push
1ada4                 | LR__2143
1ada4     A7 F0 03 F6 | 	mov	ptra, fp
1ada8     B2 00 A0 FD | 	call	#popregs_
1adac                 | _do_right_ret
1adac     2D 00 64 FD | 	ret
1adb0                 | 
1adb0                 | ' 
1adb0                 | ' '------------------- rnd
1adb0                 | ' 
1adb0                 | ' sub do_rnd
1adb0                 | _do_rnd
1adb0     01 4A 05 F6 | 	mov	COUNT_, #1
1adb4     A8 00 A0 FD | 	call	#pushregs_
1adb8     10 F0 07 F1 | 	add	ptra, #16
1adbc     4A 00 00 FF 
1adc0     80 E4 05 F1 | 	add	objptr, ##38016
1adc4     F2 26 02 FB | 	rdlong	local01, objptr
1adc8     13 17 02 F6 | 	mov	arg03, local01
1adcc     01 16 66 F0 | 	shl	arg03, #1
1add0     13 17 02 F1 | 	add	arg03, local01
1add4     02 16 66 F0 | 	shl	arg03, #2
1add8     03 00 00 FF 
1addc     04 E4 85 F1 | 	sub	objptr, ##1540
1ade0     F2 16 02 F1 | 	add	arg03, objptr
1ade4     0B 17 02 FB | 	rdlong	arg03, arg03
1ade8     0C 4E 05 F1 | 	add	fp, #12
1adec     A7 16 62 FC | 	wrlong	arg03, fp
1adf0                 | ' 
1adf0                 | ' numpar=compiledline(lineptr_e).result.uresult
1adf0                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1adf0     0C 4E 85 F1 | 	sub	fp, #12
1adf4     02 16 16 F2 | 	cmp	arg03, #2 wc
1adf8     47 00 00 FF 
1adfc     7C E4 85 F1 | 	sub	objptr, ##36476
1ae00     40 00 90 CD |  if_b	jmp	#LR__2150
1ae04     00 12 06 F6 | 	mov	arg01, #0
1ae08     88 1F B1 FD | 	call	#__system___getiolock_0616
1ae0c     FD 12 02 F6 | 	mov	arg01, result1
1ae10     58 C2 B0 FD | 	call	#__system___lockmem
1ae14     BB 01 00 FF 
1ae18     3A 15 06 F6 | 	mov	arg02, ##@LR__6021
1ae1c     00 12 06 F6 | 	mov	arg01, #0
1ae20     00 16 06 F6 | 	mov	arg03, #0
1ae24     38 CF B0 FD | 	call	#__system___basic_print_string
1ae28     00 12 06 F6 | 	mov	arg01, #0
1ae2c     64 1F B1 FD | 	call	#__system___getiolock_0616
1ae30     FD 00 68 FC | 	wrlong	#0, result1
1ae34     27 12 06 F6 | 	mov	arg01, #39
1ae38     00 14 06 F6 | 	mov	arg02, #0
1ae3c     80 87 B0 FD | 	call	#_printerror
1ae40     30 01 90 FD | 	jmp	#LR__2157
1ae44                 | LR__2150
1ae44                 | ' if numpar=0 then
1ae44     0C 4E 05 F1 | 	add	fp, #12
1ae48     A7 FE 09 FB | 	rdlong	result3, fp wz
1ae4c     0C 4E 85 F1 | 	sub	fp, #12
1ae50     20 00 90 5D |  if_ne	jmp	#LR__2151
1ae54     08 4E 05 F1 | 	add	fp, #8
1ae58     A7 3A 68 FC | 	wrlong	#29, fp
1ae5c     08 4E 85 F1 | 	sub	fp, #8
1ae60     1B FA 61 FD | 	getrnd	result1
1ae64     A7 FA 61 FC | 	wrlong	result1, fp
1ae68     A7 12 02 F6 | 	mov	arg01, fp
1ae6c     30 29 BF FD | 	call	#_push
1ae70     00 01 90 FD | 	jmp	#LR__2156
1ae74                 | LR__2151
1ae74     90 28 BF FD | 	call	#_pop
1ae78     A7 FA 61 FC | 	wrlong	result1, fp
1ae7c     04 4E 05 F1 | 	add	fp, #4
1ae80     A7 FC 61 FC | 	wrlong	result2, fp
1ae84     04 4E 05 F1 | 	add	fp, #4
1ae88     A7 FE 61 FC | 	wrlong	result3, fp
1ae8c                 | '   t1=pop()
1ae8c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1ae8c     08 4E 85 F1 | 	sub	fp, #8
1ae90     1C FE 0D F2 | 	cmp	result3, #28 wz
1ae94     08 4E 05 51 |  if_ne	add	fp, #8
1ae98     A7 26 02 5B |  if_ne	rdlong	local01, fp
1ae9c     08 4E 85 51 |  if_ne	sub	fp, #8
1aea0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1aea4     2C 00 90 5D |  if_ne	jmp	#LR__2152
1aea8     1B FA 61 FD | 	getrnd	result1
1aeac     A7 26 02 FB | 	rdlong	local01, fp
1aeb0     13 FB 11 FD | 	qdiv	result1, local01
1aeb4     A7 12 02 F6 | 	mov	arg01, fp
1aeb8     19 26 62 FD | 	getqy	local01
1aebc     A7 26 62 FC | 	wrlong	local01, fp
1aec0     08 4E 05 F1 | 	add	fp, #8
1aec4     A7 3A 68 FC | 	wrlong	#29, fp
1aec8     08 4E 85 F1 | 	sub	fp, #8
1aecc     D0 28 BF FD | 	call	#_push
1aed0     A0 00 90 FD | 	jmp	#LR__2155
1aed4                 | LR__2152
1aed4     08 4E 05 F1 | 	add	fp, #8
1aed8     A7 26 02 FB | 	rdlong	local01, fp
1aedc     08 4E 85 F1 | 	sub	fp, #8
1aee0     1E 26 0E F2 | 	cmp	local01, #30 wz
1aee4     48 00 90 5D |  if_ne	jmp	#LR__2153
1aee8     A7 12 02 FB | 	rdlong	arg01, fp
1aeec     00 C0 24 FF 
1aef0     00 14 06 F6 | 	mov	arg02, ##1233125376
1aef4     F0 F1 B0 FD | 	call	#__system___float_div
1aef8     FD 26 02 F6 | 	mov	local01, result1
1aefc     1B 12 62 FD | 	getrnd	arg01
1af00     74 13 06 F4 | 	bitl	arg01, #372
1af04     D8 EB B0 FD | 	call	#__system___float_fromuns
1af08     FD 14 02 F6 | 	mov	arg02, result1
1af0c     13 13 02 F6 | 	mov	arg01, local01
1af10     D0 EF B0 FD | 	call	#__system___float_mul
1af14     A7 FA 61 FC | 	wrlong	result1, fp
1af18     08 4E 05 F1 | 	add	fp, #8
1af1c     A7 3C 68 FC | 	wrlong	#30, fp
1af20     08 4E 85 F1 | 	sub	fp, #8
1af24     A7 12 02 F6 | 	mov	arg01, fp
1af28     74 28 BF FD | 	call	#_push
1af2c     44 00 90 FD | 	jmp	#LR__2154
1af30                 | LR__2153
1af30                 | '     print "rnd: "; : printerror(40) 
1af30     00 12 06 F6 | 	mov	arg01, #0
1af34     5C 1E B1 FD | 	call	#__system___getiolock_0616
1af38     FD 12 02 F6 | 	mov	arg01, result1
1af3c     2C C1 B0 FD | 	call	#__system___lockmem
1af40     BB 01 00 FF 
1af44     40 15 06 F6 | 	mov	arg02, ##@LR__6022
1af48     00 12 06 F6 | 	mov	arg01, #0
1af4c     00 16 06 F6 | 	mov	arg03, #0
1af50     0C CE B0 FD | 	call	#__system___basic_print_string
1af54     00 12 06 F6 | 	mov	arg01, #0
1af58     38 1E B1 FD | 	call	#__system___getiolock_0616
1af5c     FD 00 68 FC | 	wrlong	#0, result1
1af60     28 12 06 F6 | 	mov	arg01, #40
1af64     00 14 06 F6 | 	mov	arg02, #0
1af68     54 86 B0 FD | 	call	#_printerror
1af6c     A7 12 02 F6 | 	mov	arg01, fp
1af70     2C 28 BF FD | 	call	#_push
1af74                 | LR__2154
1af74                 | LR__2155
1af74                 | LR__2156
1af74                 | LR__2157
1af74     A7 F0 03 F6 | 	mov	ptra, fp
1af78     B2 00 A0 FD | 	call	#popregs_
1af7c                 | _do_rnd_ret
1af7c     2D 00 64 FD | 	ret
1af80                 | 
1af80                 | ' 
1af80                 | ' '-------------------- round
1af80                 | ' 
1af80                 | ' sub do_round
1af80                 | _do_round
1af80     00 4A 05 F6 | 	mov	COUNT_, #0
1af84     A8 00 A0 FD | 	call	#pushregs_
1af88     0C F0 07 F1 | 	add	ptra, #12
1af8c     78 27 BF FD | 	call	#_pop
1af90     A7 FA 61 FC | 	wrlong	result1, fp
1af94     04 4E 05 F1 | 	add	fp, #4
1af98     A7 FC 61 FC | 	wrlong	result2, fp
1af9c     04 4E 05 F1 | 	add	fp, #4
1afa0     A7 FE 61 FC | 	wrlong	result3, fp
1afa4     08 4E 85 F1 | 	sub	fp, #8
1afa8     A7 12 02 F6 | 	mov	arg01, fp
1afac     3C 29 BF FD | 	call	#_converttoint
1afb0     A7 FA 61 FC | 	wrlong	result1, fp
1afb4     08 4E 05 F1 | 	add	fp, #8
1afb8     A7 38 68 FC | 	wrlong	#28, fp
1afbc     08 4E 85 F1 | 	sub	fp, #8
1afc0     A7 12 02 F6 | 	mov	arg01, fp
1afc4     D8 27 BF FD | 	call	#_push
1afc8     A7 F0 03 F6 | 	mov	ptra, fp
1afcc     B2 00 A0 FD | 	call	#popregs_
1afd0                 | _do_round_ret
1afd0     2D 00 64 FD | 	ret
1afd4                 | 
1afd4                 | ' 
1afd4                 | ' '-------------------- rqpin
1afd4                 | ' 
1afd4                 | ' sub do_rqpin
1afd4                 | _do_rqpin
1afd4     00 4A 05 F6 | 	mov	COUNT_, #0
1afd8     A8 00 A0 FD | 	call	#pushregs_
1afdc     0C F0 07 F1 | 	add	ptra, #12
1afe0     24 27 BF FD | 	call	#_pop
1afe4     A7 FA 61 FC | 	wrlong	result1, fp
1afe8     04 4E 05 F1 | 	add	fp, #4
1afec     A7 FC 61 FC | 	wrlong	result2, fp
1aff0     04 4E 05 F1 | 	add	fp, #4
1aff4     A7 FE 61 FC | 	wrlong	result3, fp
1aff8     08 4E 85 F1 | 	sub	fp, #8
1affc     A7 12 02 F6 | 	mov	arg01, fp
1b000     E8 28 BF FD | 	call	#_converttoint
1b004     FD 12 02 F6 | 	mov	arg01, result1
1b008     00 FA 05 F6 | 	mov	result1, #0
1b00c     09 FB 81 FA | 	rqpin	result1, arg01
1b010     52 00 00 FF 
1b014     10 E5 05 F1 | 	add	objptr, ##42256
1b018     F2 FA 61 FC | 	wrlong	result1, objptr
1b01c     52 00 00 FF 
1b020     10 E5 85 F1 | 	sub	objptr, ##42256
1b024     08 4E 05 F1 | 	add	fp, #8
1b028     A7 3A 68 FC | 	wrlong	#29, fp
1b02c     08 4E 85 F1 | 	sub	fp, #8
1b030     A7 08 68 FC | 	wrlong	#4, fp
1b034     A7 12 02 F6 | 	mov	arg01, fp
1b038     64 27 BF FD | 	call	#_push
1b03c     A7 F0 03 F6 | 	mov	ptra, fp
1b040     B2 00 A0 FD | 	call	#popregs_
1b044                 | _do_rqpin_ret
1b044     2D 00 64 FD | 	ret
1b048                 | 
1b048                 | ' 
1b048                 | ' ' ------------------ run
1b048                 | ' 
1b048                 | ' sub do_run
1b048                 | _do_run
1b048     04 4A 05 F6 | 	mov	COUNT_, #4
1b04c     A8 00 A0 FD | 	call	#pushregs_
1b050     4A 00 00 FF 
1b054     80 E4 05 F1 | 	add	objptr, ##38016
1b058     F2 26 02 FB | 	rdlong	local01, objptr
1b05c     06 00 00 FF 
1b060     38 E4 05 F1 | 	add	objptr, ##3128
1b064     F2 28 02 FB | 	rdlong	local02, objptr
1b068     04 E4 05 F1 | 	add	objptr, #4
1b06c     F2 2A 02 FB | 	rdlong	local03, objptr
1b070     13 19 02 F6 | 	mov	arg04, local01
1b074     0C 17 02 F6 | 	mov	arg03, arg04
1b078     01 16 66 F0 | 	shl	arg03, #1
1b07c     0C 17 02 F1 | 	add	arg03, arg04
1b080     02 16 66 F0 | 	shl	arg03, #2
1b084     09 00 00 FF 
1b088     40 E4 85 F1 | 	sub	objptr, ##4672
1b08c     F2 16 02 F1 | 	add	arg03, objptr
1b090     0B 15 02 FB | 	rdlong	arg02, arg03
1b094                 | ' 
1b094                 | ' r_lineptr_e=lineptr_e
1b094                 | ' r_runptr=runptr
1b094                 | ' r_runptr2=runptr2
1b094                 | ' 
1b094                 | ' numpar=compiledline(lineptr_e).result.uresult
1b094                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1b094     01 14 0E F2 | 	cmp	arg02, #1 wz
1b098     47 00 00 FF 
1b09c     7C E4 85 F1 | 	sub	objptr, ##36476
1b0a0     00 12 06 A6 |  if_e	mov	arg01, #0
1b0a4     BC 9F BF AD |  if_e	call	#_do_load
1b0a8     4A 00 00 FF 
1b0ac     88 E4 05 F1 | 	add	objptr, ##38024
1b0b0     F2 18 02 FB | 	rdlong	arg04, objptr
1b0b4     06 00 00 FF 
1b0b8     30 E4 05 F1 | 	add	objptr, ##3120
1b0bc     F2 18 62 FC | 	wrlong	arg04, objptr
1b0c0     04 E4 05 F1 | 	add	objptr, #4
1b0c4     F2 00 68 FC | 	wrlong	#0, objptr
1b0c8     04 E4 05 F1 | 	add	objptr, #4
1b0cc     FF FF FF FF 
1b0d0     F2 FE 6B FC | 	wrlong	##-1, objptr
1b0d4     06 00 00 FF 
1b0d8     38 E4 85 F1 | 	sub	objptr, ##3128
1b0dc     F2 18 02 FB | 	rdlong	arg04, objptr
1b0e0     06 00 00 FF 
1b0e4     A4 E4 05 F1 | 	add	objptr, ##3236
1b0e8     F2 18 62 FC | 	wrlong	arg04, objptr
1b0ec     BB 01 00 FF 
1b0f0     46 19 06 F6 | 	mov	arg04, ##@LR__6023
1b0f4     01 00 00 FF 
1b0f8     B0 E5 05 F1 | 	add	objptr, ##944
1b0fc     F2 18 62 FC | 	wrlong	arg04, objptr
1b100                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1b100                 | ' dataptr=programstart : readline="" ' reset the data pointer
1b100                 | ' if inrun>0 then 
1b100     01 00 00 FF 
1b104     F0 E5 85 F1 | 	sub	objptr, ##1008
1b108     F2 18 02 FB | 	rdlong	arg04, objptr
1b10c     50 00 00 FF 
1b110     EC E4 85 F1 | 	sub	objptr, ##41196
1b114     01 18 16 F2 | 	cmp	arg04, #1 wc
1b118     30 00 90 CD |  if_b	jmp	#LR__2160
1b11c     50 00 00 FF 
1b120     F0 E4 05 F1 | 	add	objptr, ##41200
1b124     F2 12 02 F6 | 	mov	arg01, objptr
1b128     38 E4 85 F1 | 	sub	objptr, #56
1b12c     F2 14 02 FB | 	rdlong	arg02, objptr
1b130     18 16 06 F6 | 	mov	arg03, #24
1b134     44 00 00 FF 
1b138     EC E5 85 F1 | 	sub	objptr, ##35308
1b13c     34 B2 B0 FD | 	call	#_psram_spin2_read1
1b140     0B 00 00 FF 
1b144     CC E4 85 F1 | 	sub	objptr, ##5836
1b148                 | '   psram.read1(varptr(runheader),runptr,24)  
1b148                 | '   return
1b148     0C 03 90 FD | 	jmp	#LR__2167
1b14c                 | LR__2160
1b14c     50 00 00 FF 
1b150     EC E4 05 F1 | 	add	objptr, ##41196
1b154     F2 02 68 FC | 	wrlong	#1, objptr
1b158     04 E4 05 F1 | 	add	objptr, #4
1b15c     F2 12 02 F6 | 	mov	arg01, objptr
1b160     38 E4 85 F1 | 	sub	objptr, #56
1b164     F2 14 02 FB | 	rdlong	arg02, objptr
1b168     18 16 06 F6 | 	mov	arg03, #24
1b16c     44 00 00 FF 
1b170     EC E5 85 F1 | 	sub	objptr, ##35308
1b174     FC B1 B0 FD | 	call	#_psram_spin2_read1
1b178                 | ' inrun=1
1b178                 | ' psram.read1(varptr(runheader),runptr,24) 
1b178                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1b178     45 00 00 FF 
1b17c     24 E4 05 F1 | 	add	objptr, ##35364
1b180     F2 2C 02 FB | 	rdlong	local04, objptr
1b184     50 00 00 FF 
1b188     F0 E4 85 F1 | 	sub	objptr, ##41200
1b18c     FF FF 7F FF 
1b190     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1b194     50 00 00 AF 
1b198     EC E4 05 A1 |  if_e	add	objptr, ##41196
1b19c     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b1a0     50 00 00 AF 
1b1a4     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1b1a8     AC 02 90 AD |  if_e	jmp	#LR__2167
1b1ac                 | ' do 
1b1ac                 | LR__2161
1b1ac                 | '   if runptr<>oldrunptr then
1b1ac     50 00 00 FF 
1b1b0     B8 E4 05 F1 | 	add	objptr, ##41144
1b1b4     F2 2C 02 FB | 	rdlong	local04, objptr
1b1b8     08 E4 05 F1 | 	add	objptr, #8
1b1bc     F2 18 02 FB | 	rdlong	arg04, objptr
1b1c0     50 00 00 FF 
1b1c4     C0 E4 85 F1 | 	sub	objptr, ##41152
1b1c8     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1b1cc     CC 00 90 AD |  if_e	jmp	#LR__2162
1b1d0     50 00 00 FF 
1b1d4     F0 E4 05 F1 | 	add	objptr, ##41200
1b1d8     F2 12 02 F6 | 	mov	arg01, objptr
1b1dc     38 E4 85 F1 | 	sub	objptr, #56
1b1e0     F2 14 02 FB | 	rdlong	arg02, objptr
1b1e4     18 16 06 F6 | 	mov	arg03, #24
1b1e8     44 00 00 FF 
1b1ec     EC E5 85 F1 | 	sub	objptr, ##35308
1b1f0     80 B1 B0 FD | 	call	#_psram_spin2_read1
1b1f4     3B 00 00 FF 
1b1f8     B0 E5 05 F1 | 	add	objptr, ##30640
1b1fc     F2 12 02 F6 | 	mov	arg01, objptr
1b200     09 00 00 FF 
1b204     3C E4 05 F1 | 	add	objptr, ##4668
1b208     F2 14 02 FB | 	rdlong	arg02, objptr
1b20c     0B 00 00 FF 
1b210     54 E4 85 F1 | 	sub	objptr, ##5716
1b214     F2 2C 02 FB | 	rdlong	local04, objptr
1b218     01 2C 66 F0 | 	shl	local04, #1
1b21c     16 15 02 F1 | 	add	arg02, local04
1b220     0B 00 00 FF 
1b224     94 E4 05 F1 | 	add	objptr, ##5780
1b228     F2 16 02 FB | 	rdlong	arg03, objptr
1b22c     40 E4 85 F1 | 	sub	objptr, #64
1b230     F2 2C 02 FB | 	rdlong	local04, objptr
1b234     16 17 82 F1 | 	sub	arg03, local04
1b238     44 00 00 FF 
1b23c     EC E5 85 F1 | 	sub	objptr, ##35308
1b240     30 B1 B0 FD | 	call	#_psram_spin2_read1
1b244     45 00 00 FF 
1b248     2C E4 05 F1 | 	add	objptr, ##35372
1b24c     F2 2C 02 FB | 	rdlong	local04, objptr
1b250     40 E4 85 F1 | 	sub	objptr, #64
1b254     F2 14 02 FB | 	rdlong	arg02, objptr
1b258     0A 2D 82 F1 | 	sub	local04, arg02
1b25c     0B 00 00 FF 
1b260     54 E4 85 F1 | 	sub	objptr, ##5716
1b264     F2 14 02 FB | 	rdlong	arg02, objptr
1b268     0A 2D 12 FD | 	qdiv	local04, arg02
1b26c     05 00 00 FF 
1b270     18 E4 05 F1 | 	add	objptr, ##2584
1b274     18 2C 62 FD | 	getqx	local04
1b278     03 2C 86 F1 | 	sub	local04, #3
1b27c     F2 2C 62 FC | 	wrlong	local04, objptr
1b280     06 00 00 FF 
1b284     3C E4 05 F1 | 	add	objptr, ##3132
1b288     F2 2C 02 FB | 	rdlong	local04, objptr
1b28c     08 E4 05 F1 | 	add	objptr, #8
1b290     F2 2C 62 FC | 	wrlong	local04, objptr
1b294     50 00 00 FF 
1b298     C0 E4 85 F1 | 	sub	objptr, ##41152
1b29c                 | LR__2162
1b29c     50 00 00 FF 
1b2a0     04 E5 05 F1 | 	add	objptr, ##41220
1b2a4     F2 2C 02 FB | 	rdlong	local04, objptr
1b2a8     4C E4 85 F1 | 	sub	objptr, #76
1b2ac     F2 2C 62 FC | 	wrlong	local04, objptr
1b2b0     04 E4 05 F1 | 	add	objptr, #4
1b2b4     F2 12 02 FB | 	rdlong	arg01, objptr
1b2b8     50 00 00 FF 
1b2bc     BC E4 85 F1 | 	sub	objptr, ##41148
1b2c0     40 23 BF FD | 	call	#_execute_line
1b2c4     50 00 00 FF 
1b2c8     BC E4 05 F1 | 	add	objptr, ##41148
1b2cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b2d0     04 E4 85 F1 | 	sub	objptr, #4
1b2d4     F2 2C 02 FB | 	rdlong	local04, objptr
1b2d8     50 00 00 FF 
1b2dc     B8 E4 85 F1 | 	sub	objptr, ##41144
1b2e0     FF FF 3F FF 
1b2e4     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b2e8     4C 00 90 AD |  if_e	jmp	#LR__2165
1b2ec     E0 12 06 F6 | 	mov	arg01, #224
1b2f0     10 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1b2f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b2f8     10 00 90 5D |  if_ne	jmp	#LR__2163
1b2fc     E4 12 06 F6 | 	mov	arg01, #228
1b300     00 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1b304     00 FA 0D F2 | 	cmp	result1, #0 wz
1b308     10 00 90 AD |  if_e	jmp	#LR__2164
1b30c                 | LR__2163
1b30c     06 12 06 F6 | 	mov	arg01, #6
1b310     F0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b314     00 FA 0D F2 | 	cmp	result1, #0 wz
1b318     1C 00 90 5D |  if_ne	jmp	#LR__2165
1b31c                 | LR__2164
1b31c     50 00 00 FF 
1b320     EC E4 05 F1 | 	add	objptr, ##41196
1b324     F2 2C 02 FB | 	rdlong	local04, objptr
1b328     50 00 00 FF 
1b32c     EC E4 85 F1 | 	sub	objptr, ##41196
1b330     02 2C 0E F2 | 	cmp	local04, #2 wz
1b334     74 FE 9F 5D |  if_ne	jmp	#LR__2161
1b338                 | LR__2165
1b338                 | '   ''do whatever kbm.peek_latest_key()=$106 
1b338                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1b338     50 00 00 FF 
1b33c     B8 E4 05 F1 | 	add	objptr, ##41144
1b340     F2 2C 02 FB | 	rdlong	local04, objptr
1b344     50 00 00 FF 
1b348     B8 E4 85 F1 | 	sub	objptr, ##41144
1b34c     FF FF 3F FF 
1b350     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b354     AC 00 90 AD |  if_e	jmp	#LR__2166
1b358     50 00 00 FF 
1b35c     EC E4 05 F1 | 	add	objptr, ##41196
1b360     F2 2C 02 FB | 	rdlong	local04, objptr
1b364     50 00 00 FF 
1b368     EC E4 85 F1 | 	sub	objptr, ##41196
1b36c     01 2C 0E F2 | 	cmp	local04, #1 wz
1b370     90 00 90 5D |  if_ne	jmp	#LR__2166
1b374                 | '   print: print "Stopped at line ";runheader(0) 
1b374     00 12 06 F6 | 	mov	arg01, #0
1b378     18 1A B1 FD | 	call	#__system___getiolock_0616
1b37c     FD 12 02 F6 | 	mov	arg01, result1
1b380     E8 BC B0 FD | 	call	#__system___lockmem
1b384     00 12 06 F6 | 	mov	arg01, #0
1b388     0A 14 06 F6 | 	mov	arg02, #10
1b38c     00 16 06 F6 | 	mov	arg03, #0
1b390     74 C9 B0 FD | 	call	#__system___basic_print_char
1b394     00 12 06 F6 | 	mov	arg01, #0
1b398     F8 19 B1 FD | 	call	#__system___getiolock_0616
1b39c     FD 00 68 FC | 	wrlong	#0, result1
1b3a0     00 12 06 F6 | 	mov	arg01, #0
1b3a4     EC 19 B1 FD | 	call	#__system___getiolock_0616
1b3a8     FD 12 02 F6 | 	mov	arg01, result1
1b3ac     BC BC B0 FD | 	call	#__system___lockmem
1b3b0     BB 01 00 FF 
1b3b4     47 15 06 F6 | 	mov	arg02, ##@LR__6024
1b3b8     00 12 06 F6 | 	mov	arg01, #0
1b3bc     00 16 06 F6 | 	mov	arg03, #0
1b3c0     9C C9 B0 FD | 	call	#__system___basic_print_string
1b3c4     50 00 00 FF 
1b3c8     F0 E4 05 F1 | 	add	objptr, ##41200
1b3cc     F2 14 02 FB | 	rdlong	arg02, objptr
1b3d0     50 00 00 FF 
1b3d4     F0 E4 85 F1 | 	sub	objptr, ##41200
1b3d8     00 12 06 F6 | 	mov	arg01, #0
1b3dc     00 16 06 F6 | 	mov	arg03, #0
1b3e0     0A 18 06 F6 | 	mov	arg04, #10
1b3e4     FC C9 B0 FD | 	call	#__system___basic_print_unsigned
1b3e8     00 12 06 F6 | 	mov	arg01, #0
1b3ec     0A 14 06 F6 | 	mov	arg02, #10
1b3f0     00 16 06 F6 | 	mov	arg03, #0
1b3f4     10 C9 B0 FD | 	call	#__system___basic_print_char
1b3f8     00 12 06 F6 | 	mov	arg01, #0
1b3fc     94 19 B1 FD | 	call	#__system___getiolock_0616
1b400     FD 00 68 FC | 	wrlong	#0, result1
1b404                 | LR__2166
1b404     50 00 00 FF 
1b408     EC E4 05 F1 | 	add	objptr, ##41196
1b40c     F2 00 68 FC | 	wrlong	#0, objptr
1b410     06 00 00 FF 
1b414     6C E4 85 F1 | 	sub	objptr, ##3180
1b418     F2 26 62 FC | 	wrlong	local01, objptr
1b41c     06 00 00 FF 
1b420     38 E4 05 F1 | 	add	objptr, ##3128
1b424     F2 28 62 FC | 	wrlong	local02, objptr
1b428     04 E4 05 F1 | 	add	objptr, #4
1b42c     F2 2A 62 FC | 	wrlong	local03, objptr
1b430     50 00 00 FF 
1b434     BC E4 85 F1 | 	sub	objptr, ##41148
1b438     11 12 06 F6 | 	mov	arg01, #17
1b43c     08 14 06 F6 | 	mov	arg02, #8
1b440     10 16 06 F6 | 	mov	arg03, #16
1b444     E0 91 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b448     10 12 06 F6 | 	mov	arg01, #16
1b44c     20 14 06 F6 | 	mov	arg02, #32
1b450     20 16 06 F6 | 	mov	arg03, #32
1b454     D0 91 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b458                 | LR__2167
1b458     A7 F0 03 F6 | 	mov	ptra, fp
1b45c     B2 00 A0 FD | 	call	#popregs_
1b460                 | _do_run_ret
1b460     2D 00 64 FD | 	ret
1b464                 | 
1b464                 | ' 
1b464                 | ' ' ------------------ save
1b464                 | ' 
1b464                 | ' sub do_save                        
1b464                 | _do_save
1b464     04 4A 05 F6 | 	mov	COUNT_, #4
1b468     A8 00 A0 FD | 	call	#pushregs_
1b46c     B8 F0 07 F1 | 	add	ptra, #184
1b470     4A 00 00 FF 
1b474     80 E4 05 F1 | 	add	objptr, ##38016
1b478     F2 26 02 FB | 	rdlong	local01, objptr
1b47c     13 29 02 F6 | 	mov	local02, local01
1b480     01 28 66 F0 | 	shl	local02, #1
1b484     13 29 02 F1 | 	add	local02, local01
1b488     02 28 66 F0 | 	shl	local02, #2
1b48c     03 00 00 FF 
1b490     04 E4 85 F1 | 	sub	objptr, ##1540
1b494     F2 28 02 F1 | 	add	local02, objptr
1b498     14 2B 02 FB | 	rdlong	local03, local02
1b49c     10 4E 05 F1 | 	add	fp, #16
1b4a0     A7 2A 62 FC | 	wrlong	local03, fp
1b4a4                 | ' 
1b4a4                 | ' numpar=compiledline(lineptr_e).result.uresult
1b4a4                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1b4a4     10 4E 85 F1 | 	sub	fp, #16
1b4a8     01 2A 56 F2 | 	cmps	local03, #1 wc
1b4ac     47 00 00 FF 
1b4b0     7C E4 85 F1 | 	sub	objptr, ##36476
1b4b4     20 00 90 CD |  if_b	jmp	#LR__2170
1b4b8     4C 22 BF FD | 	call	#_pop
1b4bc     A7 FA 61 FC | 	wrlong	result1, fp
1b4c0     04 4E 05 F1 | 	add	fp, #4
1b4c4     A7 FC 61 FC | 	wrlong	result2, fp
1b4c8     04 4E 05 F1 | 	add	fp, #4
1b4cc     A7 FE 61 FC | 	wrlong	result3, fp
1b4d0     08 4E 85 F1 | 	sub	fp, #8
1b4d4     24 00 90 FD | 	jmp	#LR__2171
1b4d8                 | LR__2170
1b4d8     52 00 00 FF 
1b4dc     C4 E4 05 F1 | 	add	objptr, ##42180
1b4e0     F2 2A 02 FB | 	rdlong	local03, objptr
1b4e4     52 00 00 FF 
1b4e8     C4 E4 85 F1 | 	sub	objptr, ##42180
1b4ec     A7 2A 62 FC | 	wrlong	local03, fp
1b4f0     08 4E 05 F1 | 	add	fp, #8
1b4f4     A7 3E 68 FC | 	wrlong	#31, fp
1b4f8     08 4E 85 F1 | 	sub	fp, #8
1b4fc                 | LR__2171
1b4fc                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1b4fc     4A 00 00 FF 
1b500     88 E4 05 F1 | 	add	objptr, ##38024
1b504     F2 12 02 FB | 	rdlong	arg01, objptr
1b508     4A 00 00 FF 
1b50c     88 E4 85 F1 | 	sub	objptr, ##38024
1b510     7C 83 B0 FD | 	call	#_pslpeek
1b514     FF FF 7F FF 
1b518     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b51c     10 00 90 5D |  if_ne	jmp	#LR__2172
1b520     1B 12 06 F6 | 	mov	arg01, #27
1b524     00 14 06 F6 | 	mov	arg02, #0
1b528     94 80 B0 FD | 	call	#_printerror
1b52c     CC 02 90 FD | 	jmp	#LR__2178
1b530                 | LR__2172
1b530                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b530     08 4E 05 F1 | 	add	fp, #8
1b534     A7 2A 02 FB | 	rdlong	local03, fp
1b538     08 4E 85 F1 | 	sub	fp, #8
1b53c     2B 2A 0E F2 | 	cmp	local03, #43 wz
1b540     18 00 90 5D |  if_ne	jmp	#LR__2173
1b544     A7 12 02 FB | 	rdlong	arg01, fp
1b548     34 23 BF FD | 	call	#_convertstring
1b54c     A7 FA 61 FC | 	wrlong	result1, fp
1b550     08 4E 05 F1 | 	add	fp, #8
1b554     A7 3E 68 FC | 	wrlong	#31, fp
1b558     08 4E 85 F1 | 	sub	fp, #8
1b55c                 | LR__2173
1b55c                 | ' if t1.result_type=result_string then
1b55c     08 4E 05 F1 | 	add	fp, #8
1b560     A7 2A 02 FB | 	rdlong	local03, fp
1b564     08 4E 85 F1 | 	sub	fp, #8
1b568     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b56c     8C 02 90 5D |  if_ne	jmp	#LR__2177
1b570                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1b570     A7 12 02 FB | 	rdlong	arg01, fp
1b574     BB 01 00 FF 
1b578     58 15 06 F6 | 	mov	arg02, ##@LR__6025
1b57c     14 BB B0 FD | 	call	#__system___string_cmp
1b580     00 FA 0D F2 | 	cmp	result1, #0 wz
1b584     52 00 00 AF 
1b588     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1b58c     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1b590     A7 2A 62 AC |  if_e	wrlong	local03, fp
1b594     52 00 00 AF 
1b598     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1b59c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b5a0     52 00 00 5F 
1b5a4     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1b5a8     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1b5ac     52 00 00 5F 
1b5b0     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1b5b4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1b5b4     09 12 06 F6 | 	mov	arg01, #9
1b5b8     08 0E B1 FD | 	call	#__system__close
1b5bc     09 2A 06 F6 | 	mov	local03, #9
1b5c0     4A 00 00 FF 
1b5c4     94 E4 05 F1 | 	add	objptr, ##38036
1b5c8     F2 12 02 FB | 	rdlong	arg01, objptr
1b5cc     4A 00 00 FF 
1b5d0     94 E4 85 F1 | 	sub	objptr, ##38036
1b5d4     BB 01 00 FF 
1b5d8     59 15 06 F6 | 	mov	arg02, ##@LR__6026
1b5dc     E8 BA B0 FD | 	call	#__system___string_concat
1b5e0     FD 12 02 F6 | 	mov	arg01, result1
1b5e4     A7 14 02 FB | 	rdlong	arg02, fp
1b5e8     DC BA B0 FD | 	call	#__system___string_concat
1b5ec     FD 14 02 F6 | 	mov	arg02, result1
1b5f0     15 13 02 F6 | 	mov	arg01, local03
1b5f4     0D 16 06 F6 | 	mov	arg03, #13
1b5f8     74 C6 B0 FD | 	call	#__system___basic_open_string
1b5fc     4A 00 00 FF 
1b600     88 E4 05 F1 | 	add	objptr, ##38024
1b604     F2 2A 02 FB | 	rdlong	local03, objptr
1b608     4A 00 00 FF 
1b60c     88 E4 85 F1 | 	sub	objptr, ##38024
1b610     B0 4E 05 F1 | 	add	fp, #176
1b614     A7 2A 62 FC | 	wrlong	local03, fp
1b618     B0 4E 85 F1 | 	sub	fp, #176
1b61c                 | '   saveptr=programstart
1b61c                 | '   do
1b61c                 | LR__2174
1b61c     14 4E 05 F1 | 	add	fp, #20
1b620     A7 12 02 F6 | 	mov	arg01, fp
1b624     9C 4E 05 F1 | 	add	fp, #156
1b628     A7 14 02 FB | 	rdlong	arg02, fp
1b62c     B0 4E 85 F1 | 	sub	fp, #176
1b630     18 16 06 F6 | 	mov	arg03, #24
1b634     0B 00 00 FF 
1b638     CC E4 05 F1 | 	add	objptr, ##5836
1b63c     34 AD B0 FD | 	call	#_psram_spin2_read1
1b640     2C 4E 05 F1 | 	add	fp, #44
1b644     A7 12 02 F6 | 	mov	arg01, fp
1b648     10 4E 85 F1 | 	sub	fp, #16
1b64c     A7 14 02 FB | 	rdlong	arg02, fp
1b650     04 4E 05 F1 | 	add	fp, #4
1b654     A7 16 02 FB | 	rdlong	arg03, fp
1b658     20 4E 85 F1 | 	sub	fp, #32
1b65c     14 AD B0 FD | 	call	#_psram_spin2_read1
1b660     0B 00 00 FF 
1b664     CC E4 85 F1 | 	sub	objptr, ##5836
1b668     BB 01 00 FF 
1b66c     5B 2B 06 F6 | 	mov	local03, ##@LR__6027
1b670     AC 4E 05 F1 | 	add	fp, #172
1b674     A7 2A 62 FC | 	wrlong	local03, fp
1b678                 | '     psram.read1(varptr(header(0)),saveptr,24)
1b678                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1b678                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1b678     A0 4E 85 F1 | 	sub	fp, #160
1b67c     A7 02 68 FC | 	wrlong	#1, fp
1b680     14 4E 05 F1 | 	add	fp, #20
1b684     A7 2C 02 FB | 	rdlong	local04, fp
1b688     20 4E 85 F1 | 	sub	fp, #32
1b68c     01 2C 06 F1 | 	add	local04, #1
1b690                 | LR__2175
1b690     0C 4E 05 F1 | 	add	fp, #12
1b694     A7 2A 02 FB | 	rdlong	local03, fp
1b698     0C 4E 85 F1 | 	sub	fp, #12
1b69c     16 2B 52 F2 | 	cmps	local03, local04 wc
1b6a0     54 00 90 3D |  if_ae	jmp	#LR__2176
1b6a4     AC 4E 05 F1 | 	add	fp, #172
1b6a8     A7 26 02 FB | 	rdlong	local01, fp
1b6ac     A0 4E 85 F1 | 	sub	fp, #160
1b6b0     A7 2A 02 FB | 	rdlong	local03, fp
1b6b4     01 2A 86 F1 | 	sub	local03, #1
1b6b8     20 4E 05 F1 | 	add	fp, #32
1b6bc     A7 2A 02 F1 | 	add	local03, fp
1b6c0     15 13 C2 FA | 	rdbyte	arg01, local03
1b6c4     2C 4E 85 F1 | 	sub	fp, #44
1b6c8     E0 DB B0 FD | 	call	#__system__Chr_S
1b6cc     FD 14 02 F6 | 	mov	arg02, result1
1b6d0     13 13 02 F6 | 	mov	arg01, local01
1b6d4     F0 B9 B0 FD | 	call	#__system___string_concat
1b6d8     AC 4E 05 F1 | 	add	fp, #172
1b6dc     A7 FA 61 FC | 	wrlong	result1, fp
1b6e0     A0 4E 85 F1 | 	sub	fp, #160
1b6e4     A7 2A 02 FB | 	rdlong	local03, fp
1b6e8     01 2A 06 F1 | 	add	local03, #1
1b6ec     A7 2A 62 FC | 	wrlong	local03, fp
1b6f0     0C 4E 85 F1 | 	sub	fp, #12
1b6f4     98 FF 9F FD | 	jmp	#LR__2175
1b6f8                 | LR__2176
1b6f8                 | '     print #9, saveline$
1b6f8     09 12 06 F6 | 	mov	arg01, #9
1b6fc     94 16 B1 FD | 	call	#__system___getiolock_0616
1b700     FD 12 02 F6 | 	mov	arg01, result1
1b704     64 B9 B0 FD | 	call	#__system___lockmem
1b708     AC 4E 05 F1 | 	add	fp, #172
1b70c     A7 14 02 FB | 	rdlong	arg02, fp
1b710     AC 4E 85 F1 | 	sub	fp, #172
1b714     09 12 06 F6 | 	mov	arg01, #9
1b718     00 16 06 F6 | 	mov	arg03, #0
1b71c     40 C6 B0 FD | 	call	#__system___basic_print_string
1b720     09 12 06 F6 | 	mov	arg01, #9
1b724     0A 14 06 F6 | 	mov	arg02, #10
1b728     00 16 06 F6 | 	mov	arg03, #0
1b72c     D8 C5 B0 FD | 	call	#__system___basic_print_char
1b730     09 12 06 F6 | 	mov	arg01, #9
1b734     5C 16 B1 FD | 	call	#__system___getiolock_0616
1b738     FD 00 68 FC | 	wrlong	#0, result1
1b73c     28 4E 05 F1 | 	add	fp, #40
1b740     A7 2A 02 FB | 	rdlong	local03, fp
1b744     88 4E 05 F1 | 	add	fp, #136
1b748     A7 2A 62 FC | 	wrlong	local03, fp
1b74c     88 4E 85 F1 | 	sub	fp, #136
1b750     A7 2A 02 FB | 	rdlong	local03, fp
1b754     28 4E 85 F1 | 	sub	fp, #40
1b758     FF FF 3F FF 
1b75c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1b760     B8 FE 9F 5D |  if_ne	jmp	#LR__2174
1b764                 | '   close #9  
1b764     09 12 06 F6 | 	mov	arg01, #9
1b768     58 0C B1 FD | 	call	#__system__close
1b76c                 | '   print "Saved as ";currentdir$+"/"+loadname
1b76c     00 12 06 F6 | 	mov	arg01, #0
1b770     20 16 B1 FD | 	call	#__system___getiolock_0616
1b774     FD 12 02 F6 | 	mov	arg01, result1
1b778     F0 B8 B0 FD | 	call	#__system___lockmem
1b77c     BB 01 00 FF 
1b780     5C 15 06 F6 | 	mov	arg02, ##@LR__6028
1b784     00 12 06 F6 | 	mov	arg01, #0
1b788     00 16 06 F6 | 	mov	arg03, #0
1b78c     D0 C5 B0 FD | 	call	#__system___basic_print_string
1b790     00 28 06 F6 | 	mov	local02, #0
1b794     4A 00 00 FF 
1b798     94 E4 05 F1 | 	add	objptr, ##38036
1b79c     F2 12 02 FB | 	rdlong	arg01, objptr
1b7a0     4A 00 00 FF 
1b7a4     94 E4 85 F1 | 	sub	objptr, ##38036
1b7a8     BB 01 00 FF 
1b7ac     66 15 06 F6 | 	mov	arg02, ##@LR__6029
1b7b0     14 B9 B0 FD | 	call	#__system___string_concat
1b7b4     FD 12 02 F6 | 	mov	arg01, result1
1b7b8     52 00 00 FF 
1b7bc     C4 E4 05 F1 | 	add	objptr, ##42180
1b7c0     F2 14 02 FB | 	rdlong	arg02, objptr
1b7c4     52 00 00 FF 
1b7c8     C4 E4 85 F1 | 	sub	objptr, ##42180
1b7cc     F8 B8 B0 FD | 	call	#__system___string_concat
1b7d0     FD 14 02 F6 | 	mov	arg02, result1
1b7d4     14 13 02 F6 | 	mov	arg01, local02
1b7d8     00 16 06 F6 | 	mov	arg03, #0
1b7dc     80 C5 B0 FD | 	call	#__system___basic_print_string
1b7e0     00 12 06 F6 | 	mov	arg01, #0
1b7e4     0A 14 06 F6 | 	mov	arg02, #10
1b7e8     00 16 06 F6 | 	mov	arg03, #0
1b7ec     18 C5 B0 FD | 	call	#__system___basic_print_char
1b7f0     00 12 06 F6 | 	mov	arg01, #0
1b7f4     9C 15 B1 FD | 	call	#__system___getiolock_0616
1b7f8     FD 00 68 FC | 	wrlong	#0, result1
1b7fc                 | LR__2177
1b7fc                 | LR__2178
1b7fc     A7 F0 03 F6 | 	mov	ptra, fp
1b800     B2 00 A0 FD | 	call	#popregs_
1b804                 | _do_save_ret
1b804     2D 00 64 FD | 	ret
1b808                 | 
1b808                 | ' 
1b808                 | ' ' ------------------ setcolor
1b808                 | ' 
1b808                 | ' sub do_setcolor
1b808                 | _do_setcolor
1b808     00 4A 05 F6 | 	mov	COUNT_, #0
1b80c     A8 00 A0 FD | 	call	#pushregs_
1b810     20 F0 07 F1 | 	add	ptra, #32
1b814     4A 00 00 FF 
1b818     80 E4 05 F1 | 	add	objptr, ##38016
1b81c     F2 18 02 FB | 	rdlong	arg04, objptr
1b820     0C 17 02 F6 | 	mov	arg03, arg04
1b824     01 16 66 F0 | 	shl	arg03, #1
1b828     0C 17 02 F1 | 	add	arg03, arg04
1b82c     02 16 66 F0 | 	shl	arg03, #2
1b830     03 00 00 FF 
1b834     04 E4 85 F1 | 	sub	objptr, ##1540
1b838     F2 16 02 F1 | 	add	arg03, objptr
1b83c     0B 19 02 FB | 	rdlong	arg04, arg03
1b840     1C 4E 05 F1 | 	add	fp, #28
1b844     A7 18 62 FC | 	wrlong	arg04, fp
1b848                 | ' 
1b848                 | ' numpar=compiledline(lineptr_e).result.uresult
1b848                 | ' 
1b848                 | ' if numpar=4 then
1b848     1C 4E 85 F1 | 	sub	fp, #28
1b84c     04 18 0E F2 | 	cmp	arg04, #4 wz
1b850     47 00 00 FF 
1b854     7C E4 85 F1 | 	sub	objptr, ##36476
1b858     E0 00 90 5D |  if_ne	jmp	#LR__2180
1b85c     A8 1E BF FD | 	call	#_pop
1b860     FF 18 02 F6 | 	mov	arg04, result3
1b864     A7 FA 61 FC | 	wrlong	result1, fp
1b868     04 4E 05 F1 | 	add	fp, #4
1b86c     A7 FC 61 FC | 	wrlong	result2, fp
1b870     04 4E 05 F1 | 	add	fp, #4
1b874     A7 18 62 FC | 	wrlong	arg04, fp
1b878     08 4E 85 F1 | 	sub	fp, #8
1b87c     A7 12 02 F6 | 	mov	arg01, fp
1b880     68 20 BF FD | 	call	#_converttoint
1b884     FD 18 02 F6 | 	mov	arg04, result1
1b888     14 4E 05 F1 | 	add	fp, #20
1b88c     A7 18 62 FC | 	wrlong	arg04, fp
1b890     14 4E 85 F1 | 	sub	fp, #20
1b894     70 1E BF FD | 	call	#_pop
1b898     FF 18 02 F6 | 	mov	arg04, result3
1b89c     A7 FA 61 FC | 	wrlong	result1, fp
1b8a0     04 4E 05 F1 | 	add	fp, #4
1b8a4     A7 FC 61 FC | 	wrlong	result2, fp
1b8a8     04 4E 05 F1 | 	add	fp, #4
1b8ac     A7 18 62 FC | 	wrlong	arg04, fp
1b8b0     08 4E 85 F1 | 	sub	fp, #8
1b8b4     A7 12 02 F6 | 	mov	arg01, fp
1b8b8     30 20 BF FD | 	call	#_converttoint
1b8bc     FD 18 02 F6 | 	mov	arg04, result1
1b8c0     10 4E 05 F1 | 	add	fp, #16
1b8c4     A7 18 62 FC | 	wrlong	arg04, fp
1b8c8     10 4E 85 F1 | 	sub	fp, #16
1b8cc     38 1E BF FD | 	call	#_pop
1b8d0     FF 18 02 F6 | 	mov	arg04, result3
1b8d4     A7 FA 61 FC | 	wrlong	result1, fp
1b8d8     04 4E 05 F1 | 	add	fp, #4
1b8dc     A7 FC 61 FC | 	wrlong	result2, fp
1b8e0     04 4E 05 F1 | 	add	fp, #4
1b8e4     A7 18 62 FC | 	wrlong	arg04, fp
1b8e8     08 4E 85 F1 | 	sub	fp, #8
1b8ec     A7 12 02 F6 | 	mov	arg01, fp
1b8f0     F8 1F BF FD | 	call	#_converttoint
1b8f4     FD 18 02 F6 | 	mov	arg04, result1
1b8f8     0C 4E 05 F1 | 	add	fp, #12
1b8fc     A7 18 62 FC | 	wrlong	arg04, fp
1b900     0C 4E 85 F1 | 	sub	fp, #12
1b904     00 1E BF FD | 	call	#_pop
1b908     FF 18 02 F6 | 	mov	arg04, result3
1b90c     A7 FA 61 FC | 	wrlong	result1, fp
1b910     04 4E 05 F1 | 	add	fp, #4
1b914     A7 FC 61 FC | 	wrlong	result2, fp
1b918     04 4E 05 F1 | 	add	fp, #4
1b91c     A7 18 62 FC | 	wrlong	arg04, fp
1b920     08 4E 85 F1 | 	sub	fp, #8
1b924     A7 12 02 F6 | 	mov	arg01, fp
1b928     C0 1F BF FD | 	call	#_converttoint
1b92c     18 4E 05 F1 | 	add	fp, #24
1b930     A7 FA 61 FC | 	wrlong	result1, fp
1b934     18 4E 85 F1 | 	sub	fp, #24
1b938     04 01 90 FD | 	jmp	#LR__2183
1b93c                 | LR__2180
1b93c     1C 4E 05 F1 | 	add	fp, #28
1b940     A7 18 02 FB | 	rdlong	arg04, fp
1b944     1C 4E 85 F1 | 	sub	fp, #28
1b948     02 18 0E F2 | 	cmp	arg04, #2 wz
1b94c     A0 00 90 5D |  if_ne	jmp	#LR__2181
1b950     B4 1D BF FD | 	call	#_pop
1b954     FF 18 02 F6 | 	mov	arg04, result3
1b958     A7 FA 61 FC | 	wrlong	result1, fp
1b95c     04 4E 05 F1 | 	add	fp, #4
1b960     A7 FC 61 FC | 	wrlong	result2, fp
1b964     04 4E 05 F1 | 	add	fp, #4
1b968     A7 18 62 FC | 	wrlong	arg04, fp
1b96c     08 4E 85 F1 | 	sub	fp, #8
1b970     A7 12 02 F6 | 	mov	arg01, fp
1b974     74 1F BF FD | 	call	#_converttoint
1b978     18 4E 05 F1 | 	add	fp, #24
1b97c     A7 FA 61 FC | 	wrlong	result1, fp
1b980     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b984     04 4E 85 F1 | 	sub	fp, #4
1b988     A7 FA 61 FC | 	wrlong	result1, fp
1b98c     04 4E 05 F1 | 	add	fp, #4
1b990     A7 18 02 FB | 	rdlong	arg04, fp
1b994     0C 19 EA F8 | 	getbyte	arg04, arg04, #1
1b998     08 4E 85 F1 | 	sub	fp, #8
1b99c     A7 18 62 FC | 	wrlong	arg04, fp
1b9a0     08 4E 05 F1 | 	add	fp, #8
1b9a4     A7 18 02 FB | 	rdlong	arg04, fp
1b9a8     0C 19 F2 F8 | 	getbyte	arg04, arg04, #2
1b9ac     0C 4E 85 F1 | 	sub	fp, #12
1b9b0     A7 18 62 FC | 	wrlong	arg04, fp
1b9b4     0C 4E 85 F1 | 	sub	fp, #12
1b9b8     4C 1D BF FD | 	call	#_pop
1b9bc     FF 18 02 F6 | 	mov	arg04, result3
1b9c0     A7 FA 61 FC | 	wrlong	result1, fp
1b9c4     04 4E 05 F1 | 	add	fp, #4
1b9c8     A7 FC 61 FC | 	wrlong	result2, fp
1b9cc     04 4E 05 F1 | 	add	fp, #4
1b9d0     A7 18 62 FC | 	wrlong	arg04, fp
1b9d4     08 4E 85 F1 | 	sub	fp, #8
1b9d8     A7 12 02 F6 | 	mov	arg01, fp
1b9dc     0C 1F BF FD | 	call	#_converttoint
1b9e0     18 4E 05 F1 | 	add	fp, #24
1b9e4     A7 FA 61 FC | 	wrlong	result1, fp
1b9e8     18 4E 85 F1 | 	sub	fp, #24
1b9ec     50 00 90 FD | 	jmp	#LR__2182
1b9f0                 | LR__2181
1b9f0                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1b9f0     00 12 06 F6 | 	mov	arg01, #0
1b9f4     9C 13 B1 FD | 	call	#__system___getiolock_0616
1b9f8     FD 12 02 F6 | 	mov	arg01, result1
1b9fc     6C B6 B0 FD | 	call	#__system___lockmem
1ba00     BB 01 00 FF 
1ba04     68 15 06 F6 | 	mov	arg02, ##@LR__6030
1ba08     00 12 06 F6 | 	mov	arg01, #0
1ba0c     00 16 06 F6 | 	mov	arg03, #0
1ba10     4C C3 B0 FD | 	call	#__system___basic_print_string
1ba14     00 12 06 F6 | 	mov	arg01, #0
1ba18     78 13 B1 FD | 	call	#__system___getiolock_0616
1ba1c     FD 00 68 FC | 	wrlong	#0, result1
1ba20     50 00 00 FF 
1ba24     F0 E4 05 F1 | 	add	objptr, ##41200
1ba28     F2 14 02 FB | 	rdlong	arg02, objptr
1ba2c     50 00 00 FF 
1ba30     F0 E4 85 F1 | 	sub	objptr, ##41200
1ba34     27 12 06 F6 | 	mov	arg01, #39
1ba38     84 7B B0 FD | 	call	#_printerror
1ba3c     28 00 90 FD | 	jmp	#LR__2184
1ba40                 | LR__2182
1ba40                 | LR__2183
1ba40     18 4E 05 F1 | 	add	fp, #24
1ba44     A7 12 02 FB | 	rdlong	arg01, fp
1ba48     0C 4E 85 F1 | 	sub	fp, #12
1ba4c     A7 14 02 FB | 	rdlong	arg02, fp
1ba50     04 4E 05 F1 | 	add	fp, #4
1ba54     A7 16 02 FB | 	rdlong	arg03, fp
1ba58     04 4E 05 F1 | 	add	fp, #4
1ba5c     A7 18 02 FB | 	rdlong	arg04, fp
1ba60     14 4E 85 F1 | 	sub	fp, #20
1ba64     E0 98 B0 FD | 	call	#_hg010b_spin2_setcolor
1ba68                 | LR__2184
1ba68     A7 F0 03 F6 | 	mov	ptra, fp
1ba6c     B2 00 A0 FD | 	call	#popregs_
1ba70                 | _do_setcolor_ret
1ba70     2D 00 64 FD | 	ret
1ba74                 | 
1ba74                 | ' 
1ba74                 | ' ' ------------------ setdelay
1ba74                 | ' 
1ba74                 | ' sub do_setdelay
1ba74                 | _do_setdelay
1ba74     02 4A 05 F6 | 	mov	COUNT_, #2
1ba78     A8 00 A0 FD | 	call	#pushregs_
1ba7c     18 F0 07 F1 | 	add	ptra, #24
1ba80     84 1C BF FD | 	call	#_pop
1ba84     FD 12 02 F6 | 	mov	arg01, result1
1ba88     FE 26 02 F6 | 	mov	local01, result2
1ba8c     FF 28 02 F6 | 	mov	local02, result3
1ba90     A7 12 62 FC | 	wrlong	arg01, fp
1ba94     04 4E 05 F1 | 	add	fp, #4
1ba98     A7 26 62 FC | 	wrlong	local01, fp
1ba9c     04 4E 05 F1 | 	add	fp, #4
1baa0     A7 28 62 FC | 	wrlong	local02, fp
1baa4     08 4E 85 F1 | 	sub	fp, #8
1baa8     5C 1C BF FD | 	call	#_pop
1baac     FD 28 02 F6 | 	mov	local02, result1
1bab0     0C 4E 05 F1 | 	add	fp, #12
1bab4     A7 28 62 FC | 	wrlong	local02, fp
1bab8     04 4E 05 F1 | 	add	fp, #4
1babc     A7 FC 61 FC | 	wrlong	result2, fp
1bac0     04 4E 05 F1 | 	add	fp, #4
1bac4     A7 FE 61 FC | 	wrlong	result3, fp
1bac8     08 4E 85 F1 | 	sub	fp, #8
1bacc     A7 12 02 F6 | 	mov	arg01, fp
1bad0     0C 4E 85 F1 | 	sub	fp, #12
1bad4     14 1E BF FD | 	call	#_converttoint
1bad8     FD 28 02 F6 | 	mov	local02, result1
1badc     14 27 02 F6 | 	mov	local01, local02
1bae0     01 26 66 F0 | 	shl	local01, #1
1bae4     14 27 02 F1 | 	add	local01, local02
1bae8     03 26 66 F0 | 	shl	local01, #3
1baec     14 00 00 FF 
1baf0     38 E5 05 F1 | 	add	objptr, ##10552
1baf4     F2 26 02 F1 | 	add	local01, objptr
1baf8     A7 12 02 F6 | 	mov	arg01, fp
1bafc     14 00 00 FF 
1bb00     38 E5 85 F1 | 	sub	objptr, ##10552
1bb04     E4 1D BF FD | 	call	#_converttoint
1bb08     06 26 06 F1 | 	add	local01, #6
1bb0c     13 FB 51 FC | 	wrword	result1, local01
1bb10     A7 F0 03 F6 | 	mov	ptra, fp
1bb14     B2 00 A0 FD | 	call	#popregs_
1bb18                 | _do_setdelay_ret
1bb18     2D 00 64 FD | 	ret
1bb1c                 | 
1bb1c                 | ' 
1bb1c                 | ' ' ------------------ setenv
1bb1c                 | ' 
1bb1c                 | ' sub do_setenv
1bb1c                 | _do_setenv
1bb1c     02 4A 05 F6 | 	mov	COUNT_, #2
1bb20     A8 00 A0 FD | 	call	#pushregs_
1bb24     18 F0 07 F1 | 	add	ptra, #24
1bb28     DC 1B BF FD | 	call	#_pop
1bb2c     FD 12 02 F6 | 	mov	arg01, result1
1bb30     FE 26 02 F6 | 	mov	local01, result2
1bb34     FF 28 02 F6 | 	mov	local02, result3
1bb38     A7 12 62 FC | 	wrlong	arg01, fp
1bb3c     04 4E 05 F1 | 	add	fp, #4
1bb40     A7 26 62 FC | 	wrlong	local01, fp
1bb44     04 4E 05 F1 | 	add	fp, #4
1bb48     A7 28 62 FC | 	wrlong	local02, fp
1bb4c     08 4E 85 F1 | 	sub	fp, #8
1bb50     B4 1B BF FD | 	call	#_pop
1bb54     FD 28 02 F6 | 	mov	local02, result1
1bb58     0C 4E 05 F1 | 	add	fp, #12
1bb5c     A7 28 62 FC | 	wrlong	local02, fp
1bb60     04 4E 05 F1 | 	add	fp, #4
1bb64     A7 FC 61 FC | 	wrlong	result2, fp
1bb68     04 4E 05 F1 | 	add	fp, #4
1bb6c     A7 FE 61 FC | 	wrlong	result3, fp
1bb70     08 4E 85 F1 | 	sub	fp, #8
1bb74     A7 12 02 F6 | 	mov	arg01, fp
1bb78     0C 4E 85 F1 | 	sub	fp, #12
1bb7c     6C 1D BF FD | 	call	#_converttoint
1bb80     FD 28 02 F6 | 	mov	local02, result1
1bb84     14 27 02 F6 | 	mov	local01, local02
1bb88     01 26 66 F0 | 	shl	local01, #1
1bb8c     14 27 02 F1 | 	add	local01, local02
1bb90     03 26 66 F0 | 	shl	local01, #3
1bb94     14 00 00 FF 
1bb98     38 E5 05 F1 | 	add	objptr, ##10552
1bb9c     F2 26 02 F1 | 	add	local01, objptr
1bba0     A7 12 02 F6 | 	mov	arg01, fp
1bba4     14 00 00 FF 
1bba8     38 E5 85 F1 | 	sub	objptr, ##10552
1bbac     3C 1D BF FD | 	call	#_converttoint
1bbb0     05 26 06 F1 | 	add	local01, #5
1bbb4     13 FB 41 FC | 	wrbyte	result1, local01
1bbb8     A7 F0 03 F6 | 	mov	ptra, fp
1bbbc     B2 00 A0 FD | 	call	#popregs_
1bbc0                 | _do_setenv_ret
1bbc0     2D 00 64 FD | 	ret
1bbc4                 | 
1bbc4                 | ' 
1bbc4                 | ' ' ------------------ setlen
1bbc4                 | ' 
1bbc4                 | ' sub do_setlen
1bbc4                 | _do_setlen
1bbc4     02 4A 05 F6 | 	mov	COUNT_, #2
1bbc8     A8 00 A0 FD | 	call	#pushregs_
1bbcc     18 F0 07 F1 | 	add	ptra, #24
1bbd0     34 1B BF FD | 	call	#_pop
1bbd4     FD 12 02 F6 | 	mov	arg01, result1
1bbd8     FE 26 02 F6 | 	mov	local01, result2
1bbdc     FF 28 02 F6 | 	mov	local02, result3
1bbe0     A7 12 62 FC | 	wrlong	arg01, fp
1bbe4     04 4E 05 F1 | 	add	fp, #4
1bbe8     A7 26 62 FC | 	wrlong	local01, fp
1bbec     04 4E 05 F1 | 	add	fp, #4
1bbf0     A7 28 62 FC | 	wrlong	local02, fp
1bbf4     08 4E 85 F1 | 	sub	fp, #8
1bbf8     0C 1B BF FD | 	call	#_pop
1bbfc     FD 28 02 F6 | 	mov	local02, result1
1bc00     0C 4E 05 F1 | 	add	fp, #12
1bc04     A7 28 62 FC | 	wrlong	local02, fp
1bc08     04 4E 05 F1 | 	add	fp, #4
1bc0c     A7 FC 61 FC | 	wrlong	result2, fp
1bc10     04 4E 05 F1 | 	add	fp, #4
1bc14     A7 FE 61 FC | 	wrlong	result3, fp
1bc18     08 4E 85 F1 | 	sub	fp, #8
1bc1c     A7 12 02 F6 | 	mov	arg01, fp
1bc20     0C 4E 85 F1 | 	sub	fp, #12
1bc24     C4 1C BF FD | 	call	#_converttoint
1bc28     FD 28 02 F6 | 	mov	local02, result1
1bc2c     14 27 02 F6 | 	mov	local01, local02
1bc30     01 26 66 F0 | 	shl	local01, #1
1bc34     14 27 02 F1 | 	add	local01, local02
1bc38     03 26 66 F0 | 	shl	local01, #3
1bc3c     14 00 00 FF 
1bc40     38 E5 05 F1 | 	add	objptr, ##10552
1bc44     F2 26 02 F1 | 	add	local01, objptr
1bc48     A7 12 02 F6 | 	mov	arg01, fp
1bc4c     14 00 00 FF 
1bc50     38 E5 85 F1 | 	sub	objptr, ##10552
1bc54     50 1D BF FD | 	call	#_converttofloat
1bc58     08 26 06 F1 | 	add	local01, #8
1bc5c     13 FB 61 FC | 	wrlong	result1, local01
1bc60     A7 F0 03 F6 | 	mov	ptra, fp
1bc64     B2 00 A0 FD | 	call	#popregs_
1bc68                 | _do_setlen_ret
1bc68     2D 00 64 FD | 	ret
1bc6c                 | 
1bc6c                 | ' 
1bc6c                 | ' ' ------------------ setpan
1bc6c                 | ' 
1bc6c                 | ' sub do_setpan
1bc6c                 | _do_setpan
1bc6c     02 4A 05 F6 | 	mov	COUNT_, #2
1bc70     A8 00 A0 FD | 	call	#pushregs_
1bc74     18 F0 07 F1 | 	add	ptra, #24
1bc78     8C 1A BF FD | 	call	#_pop
1bc7c     FD 12 02 F6 | 	mov	arg01, result1
1bc80     FE 26 02 F6 | 	mov	local01, result2
1bc84     FF 28 02 F6 | 	mov	local02, result3
1bc88     A7 12 62 FC | 	wrlong	arg01, fp
1bc8c     04 4E 05 F1 | 	add	fp, #4
1bc90     A7 26 62 FC | 	wrlong	local01, fp
1bc94     04 4E 05 F1 | 	add	fp, #4
1bc98     A7 28 62 FC | 	wrlong	local02, fp
1bc9c     08 4E 85 F1 | 	sub	fp, #8
1bca0     64 1A BF FD | 	call	#_pop
1bca4     FD 28 02 F6 | 	mov	local02, result1
1bca8     0C 4E 05 F1 | 	add	fp, #12
1bcac     A7 28 62 FC | 	wrlong	local02, fp
1bcb0     04 4E 05 F1 | 	add	fp, #4
1bcb4     A7 FC 61 FC | 	wrlong	result2, fp
1bcb8     04 4E 05 F1 | 	add	fp, #4
1bcbc     A7 FE 61 FC | 	wrlong	result3, fp
1bcc0     08 4E 85 F1 | 	sub	fp, #8
1bcc4     A7 12 02 F6 | 	mov	arg01, fp
1bcc8     0C 4E 85 F1 | 	sub	fp, #12
1bccc     1C 1C BF FD | 	call	#_converttoint
1bcd0     FD 28 02 F6 | 	mov	local02, result1
1bcd4     14 27 02 F6 | 	mov	local01, local02
1bcd8     01 26 66 F0 | 	shl	local01, #1
1bcdc     14 27 02 F1 | 	add	local01, local02
1bce0     03 26 66 F0 | 	shl	local01, #3
1bce4     14 00 00 FF 
1bce8     38 E5 05 F1 | 	add	objptr, ##10552
1bcec     F2 26 02 F1 | 	add	local01, objptr
1bcf0     A7 12 02 F6 | 	mov	arg01, fp
1bcf4     14 00 00 FF 
1bcf8     38 E5 85 F1 | 	sub	objptr, ##10552
1bcfc     A8 1C BF FD | 	call	#_converttofloat
1bd00     10 26 06 F1 | 	add	local01, #16
1bd04     13 FB 61 FC | 	wrlong	result1, local01
1bd08     A7 F0 03 F6 | 	mov	ptra, fp
1bd0c     B2 00 A0 FD | 	call	#popregs_
1bd10                 | _do_setpan_ret
1bd10     2D 00 64 FD | 	ret
1bd14                 | 
1bd14                 | ' 
1bd14                 | ' ' ------------------ setsustain
1bd14                 | ' 
1bd14                 | ' sub do_setsustain
1bd14                 | _do_setsustain
1bd14     02 4A 05 F6 | 	mov	COUNT_, #2
1bd18     A8 00 A0 FD | 	call	#pushregs_
1bd1c     18 F0 07 F1 | 	add	ptra, #24
1bd20     E4 19 BF FD | 	call	#_pop
1bd24     FD 12 02 F6 | 	mov	arg01, result1
1bd28     FE 26 02 F6 | 	mov	local01, result2
1bd2c     FF 28 02 F6 | 	mov	local02, result3
1bd30     A7 12 62 FC | 	wrlong	arg01, fp
1bd34     04 4E 05 F1 | 	add	fp, #4
1bd38     A7 26 62 FC | 	wrlong	local01, fp
1bd3c     04 4E 05 F1 | 	add	fp, #4
1bd40     A7 28 62 FC | 	wrlong	local02, fp
1bd44     08 4E 85 F1 | 	sub	fp, #8
1bd48     BC 19 BF FD | 	call	#_pop
1bd4c     FD 28 02 F6 | 	mov	local02, result1
1bd50     0C 4E 05 F1 | 	add	fp, #12
1bd54     A7 28 62 FC | 	wrlong	local02, fp
1bd58     04 4E 05 F1 | 	add	fp, #4
1bd5c     A7 FC 61 FC | 	wrlong	result2, fp
1bd60     04 4E 05 F1 | 	add	fp, #4
1bd64     A7 FE 61 FC | 	wrlong	result3, fp
1bd68     08 4E 85 F1 | 	sub	fp, #8
1bd6c     A7 12 02 F6 | 	mov	arg01, fp
1bd70     0C 4E 85 F1 | 	sub	fp, #12
1bd74     74 1B BF FD | 	call	#_converttoint
1bd78     FD 28 02 F6 | 	mov	local02, result1
1bd7c     14 27 02 F6 | 	mov	local01, local02
1bd80     01 26 66 F0 | 	shl	local01, #1
1bd84     14 27 02 F1 | 	add	local01, local02
1bd88     03 26 66 F0 | 	shl	local01, #3
1bd8c     14 00 00 FF 
1bd90     38 E5 05 F1 | 	add	objptr, ##10552
1bd94     F2 26 02 F1 | 	add	local01, objptr
1bd98     A7 12 02 F6 | 	mov	arg01, fp
1bd9c     14 00 00 FF 
1bda0     38 E5 85 F1 | 	sub	objptr, ##10552
1bda4     44 1B BF FD | 	call	#_converttoint
1bda8     14 26 06 F1 | 	add	local01, #20
1bdac     13 FB 51 FC | 	wrword	result1, local01
1bdb0     A7 F0 03 F6 | 	mov	ptra, fp
1bdb4     B2 00 A0 FD | 	call	#popregs_
1bdb8                 | _do_setsustain_ret
1bdb8     2D 00 64 FD | 	ret
1bdbc                 | 
1bdbc                 | ' 
1bdbc                 | ' ' ------------------ setvol
1bdbc                 | ' 
1bdbc                 | ' sub do_setvol
1bdbc                 | _do_setvol
1bdbc     02 4A 05 F6 | 	mov	COUNT_, #2
1bdc0     A8 00 A0 FD | 	call	#pushregs_
1bdc4     18 F0 07 F1 | 	add	ptra, #24
1bdc8     3C 19 BF FD | 	call	#_pop
1bdcc     FD 12 02 F6 | 	mov	arg01, result1
1bdd0     FE 26 02 F6 | 	mov	local01, result2
1bdd4     FF 28 02 F6 | 	mov	local02, result3
1bdd8     A7 12 62 FC | 	wrlong	arg01, fp
1bddc     04 4E 05 F1 | 	add	fp, #4
1bde0     A7 26 62 FC | 	wrlong	local01, fp
1bde4     04 4E 05 F1 | 	add	fp, #4
1bde8     A7 28 62 FC | 	wrlong	local02, fp
1bdec     08 4E 85 F1 | 	sub	fp, #8
1bdf0     14 19 BF FD | 	call	#_pop
1bdf4     FD 28 02 F6 | 	mov	local02, result1
1bdf8     0C 4E 05 F1 | 	add	fp, #12
1bdfc     A7 28 62 FC | 	wrlong	local02, fp
1be00     04 4E 05 F1 | 	add	fp, #4
1be04     A7 FC 61 FC | 	wrlong	result2, fp
1be08     04 4E 05 F1 | 	add	fp, #4
1be0c     A7 FE 61 FC | 	wrlong	result3, fp
1be10     08 4E 85 F1 | 	sub	fp, #8
1be14     A7 12 02 F6 | 	mov	arg01, fp
1be18     0C 4E 85 F1 | 	sub	fp, #12
1be1c     CC 1A BF FD | 	call	#_converttoint
1be20     FD 28 02 F6 | 	mov	local02, result1
1be24     14 27 02 F6 | 	mov	local01, local02
1be28     01 26 66 F0 | 	shl	local01, #1
1be2c     14 27 02 F1 | 	add	local01, local02
1be30     03 26 66 F0 | 	shl	local01, #3
1be34     14 00 00 FF 
1be38     38 E5 05 F1 | 	add	objptr, ##10552
1be3c     F2 26 02 F1 | 	add	local01, objptr
1be40     A7 12 02 F6 | 	mov	arg01, fp
1be44     14 00 00 FF 
1be48     38 E5 85 F1 | 	sub	objptr, ##10552
1be4c     58 1B BF FD | 	call	#_converttofloat
1be50     0C 26 06 F1 | 	add	local01, #12
1be54     13 FB 61 FC | 	wrlong	result1, local01
1be58     A7 F0 03 F6 | 	mov	ptra, fp
1be5c     B2 00 A0 FD | 	call	#popregs_
1be60                 | _do_setvol_ret
1be60     2D 00 64 FD | 	ret
1be64                 | 
1be64                 | ' 
1be64                 | ' ' ------------------ setwave
1be64                 | ' 
1be64                 | ' sub do_setwave
1be64                 | _do_setwave
1be64     02 4A 05 F6 | 	mov	COUNT_, #2
1be68     A8 00 A0 FD | 	call	#pushregs_
1be6c     18 F0 07 F1 | 	add	ptra, #24
1be70     94 18 BF FD | 	call	#_pop
1be74     FD 12 02 F6 | 	mov	arg01, result1
1be78     FE 26 02 F6 | 	mov	local01, result2
1be7c     FF 28 02 F6 | 	mov	local02, result3
1be80     A7 12 62 FC | 	wrlong	arg01, fp
1be84     04 4E 05 F1 | 	add	fp, #4
1be88     A7 26 62 FC | 	wrlong	local01, fp
1be8c     04 4E 05 F1 | 	add	fp, #4
1be90     A7 28 62 FC | 	wrlong	local02, fp
1be94     08 4E 85 F1 | 	sub	fp, #8
1be98     6C 18 BF FD | 	call	#_pop
1be9c     FD 28 02 F6 | 	mov	local02, result1
1bea0     0C 4E 05 F1 | 	add	fp, #12
1bea4     A7 28 62 FC | 	wrlong	local02, fp
1bea8     04 4E 05 F1 | 	add	fp, #4
1beac     A7 FC 61 FC | 	wrlong	result2, fp
1beb0     04 4E 05 F1 | 	add	fp, #4
1beb4     A7 FE 61 FC | 	wrlong	result3, fp
1beb8     08 4E 85 F1 | 	sub	fp, #8
1bebc     A7 12 02 F6 | 	mov	arg01, fp
1bec0     0C 4E 85 F1 | 	sub	fp, #12
1bec4     24 1A BF FD | 	call	#_converttoint
1bec8     FD 28 02 F6 | 	mov	local02, result1
1becc     14 27 02 F6 | 	mov	local01, local02
1bed0     01 26 66 F0 | 	shl	local01, #1
1bed4     14 27 02 F1 | 	add	local01, local02
1bed8     03 26 66 F0 | 	shl	local01, #3
1bedc     14 00 00 FF 
1bee0     38 E5 05 F1 | 	add	objptr, ##10552
1bee4     F2 26 02 F1 | 	add	local01, objptr
1bee8     A7 12 02 F6 | 	mov	arg01, fp
1beec     14 00 00 FF 
1bef0     38 E5 85 F1 | 	sub	objptr, ##10552
1bef4     F4 19 BF FD | 	call	#_converttoint
1bef8     04 26 06 F1 | 	add	local01, #4
1befc     13 FB 41 FC | 	wrbyte	result1, local01
1bf00     A7 F0 03 F6 | 	mov	ptra, fp
1bf04     B2 00 A0 FD | 	call	#popregs_
1bf08                 | _do_setwave_ret
1bf08     2D 00 64 FD | 	ret
1bf0c                 | 
1bf0c                 | ' 
1bf0c                 | ' ' ------------------ shutup
1bf0c                 | ' 
1bf0c                 | ' sub do_shutup
1bf0c                 | _do_shutup
1bf0c     03 4A 05 F6 | 	mov	COUNT_, #3
1bf10     A8 00 A0 FD | 	call	#pushregs_
1bf14     18 F0 07 F1 | 	add	ptra, #24
1bf18     4A 00 00 FF 
1bf1c     80 E4 05 F1 | 	add	objptr, ##38016
1bf20     F2 26 02 FB | 	rdlong	local01, objptr
1bf24     13 29 02 F6 | 	mov	local02, local01
1bf28     01 28 66 F0 | 	shl	local02, #1
1bf2c     13 29 02 F1 | 	add	local02, local01
1bf30     02 28 66 F0 | 	shl	local02, #2
1bf34     03 00 00 FF 
1bf38     04 E4 85 F1 | 	sub	objptr, ##1540
1bf3c     F2 28 02 F1 | 	add	local02, objptr
1bf40     14 2B 0A FB | 	rdlong	local03, local02 wz
1bf44     14 4E 05 F1 | 	add	fp, #20
1bf48     A7 2A 62 FC | 	wrlong	local03, fp
1bf4c                 | ' 
1bf4c                 | ' numpar=compiledline(lineptr_e).result.uresult
1bf4c                 | ' if numpar=0 then
1bf4c     14 4E 85 F1 | 	sub	fp, #20
1bf50     47 00 00 FF 
1bf54     7C E4 85 F1 | 	sub	objptr, ##36476
1bf58     50 00 90 5D |  if_ne	jmp	#LR__2192
1bf5c                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1bf5c     10 4E 05 F1 | 	add	fp, #16
1bf60     A7 00 68 FC | 	wrlong	#0, fp
1bf64     37 00 00 FF 
1bf68     10 E4 05 F1 | 	add	objptr, ##28176
1bf6c     97 16 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1bf70                 | LR__2190
1bf70     F2 12 02 FB | 	rdlong	arg01, objptr
1bf74     A7 2A 02 FB | 	rdlong	local03, fp
1bf78     06 2A 66 F0 | 	shl	local03, #6
1bf7c     15 13 02 F1 | 	add	arg01, local03
1bf80     14 12 06 F1 | 	add	arg01, #20
1bf84     09 01 58 FC | 	wrword	#0, arg01
1bf88     A7 2A 02 FB | 	rdlong	local03, fp
1bf8c     01 2A 06 F1 | 	add	local03, #1
1bf90     A7 2A 62 FC | 	wrlong	local03, fp
1bf94     08 2A 56 F2 | 	cmps	local03, #8 wc
1bf98     D4 FF 9F CD |  if_b	jmp	#LR__2190
1bf9c                 | LR__2191
1bf9c     37 00 00 FF 
1bfa0     10 E4 85 F1 | 	sub	objptr, ##28176
1bfa4     10 4E 85 F1 | 	sub	fp, #16
1bfa8     64 00 90 FD | 	jmp	#LR__2193
1bfac                 | LR__2192
1bfac     58 17 BF FD | 	call	#_pop
1bfb0     FF 26 02 F6 | 	mov	local01, result3
1bfb4     A7 FA 61 FC | 	wrlong	result1, fp
1bfb8     04 4E 05 F1 | 	add	fp, #4
1bfbc     A7 FC 61 FC | 	wrlong	result2, fp
1bfc0     04 4E 05 F1 | 	add	fp, #4
1bfc4     A7 26 62 FC | 	wrlong	local01, fp
1bfc8     08 4E 85 F1 | 	sub	fp, #8
1bfcc     A7 12 02 F6 | 	mov	arg01, fp
1bfd0     18 19 BF FD | 	call	#_converttoint
1bfd4     FD 2A 52 F6 | 	abs	local03, result1 wc
1bfd8     07 2A 06 F5 | 	and	local03, #7
1bfdc     15 29 82 F6 | 	negc	local02, local03
1bfe0     0C 4E 05 F1 | 	add	fp, #12
1bfe4     A7 28 62 FC | 	wrlong	local02, fp
1bfe8     37 00 00 FF 
1bfec     10 E4 05 F1 | 	add	objptr, ##28176
1bff0     F2 12 02 FB | 	rdlong	arg01, objptr
1bff4     37 00 00 FF 
1bff8     10 E4 85 F1 | 	sub	objptr, ##28176
1bffc     0C 4E 85 F1 | 	sub	fp, #12
1c000     06 28 66 F0 | 	shl	local02, #6
1c004     14 13 02 F1 | 	add	arg01, local02
1c008     14 12 06 F1 | 	add	arg01, #20
1c00c     09 01 58 FC | 	wrword	#0, arg01
1c010                 | LR__2193
1c010     A7 F0 03 F6 | 	mov	ptra, fp
1c014     B2 00 A0 FD | 	call	#popregs_
1c018                 | _do_shutup_ret
1c018     2D 00 64 FD | 	ret
1c01c                 | 
1c01c                 | ' 
1c01c                 | ' ' ------------------ sin
1c01c                 | ' 
1c01c                 | ' sub do_sin
1c01c                 | _do_sin
1c01c     01 4A 05 F6 | 	mov	COUNT_, #1
1c020     A8 00 A0 FD | 	call	#pushregs_
1c024     10 F0 07 F1 | 	add	ptra, #16
1c028     4A 00 00 FF 
1c02c     80 E4 05 F1 | 	add	objptr, ##38016
1c030     F2 26 02 FB | 	rdlong	local01, objptr
1c034     13 17 02 F6 | 	mov	arg03, local01
1c038     01 16 66 F0 | 	shl	arg03, #1
1c03c     13 17 02 F1 | 	add	arg03, local01
1c040     02 16 66 F0 | 	shl	arg03, #2
1c044     03 00 00 FF 
1c048     04 E4 85 F1 | 	sub	objptr, ##1540
1c04c     F2 16 02 F1 | 	add	arg03, objptr
1c050     0B 17 02 FB | 	rdlong	arg03, arg03
1c054     0C 4E 05 F1 | 	add	fp, #12
1c058     A7 16 62 FC | 	wrlong	arg03, fp
1c05c                 | ' 
1c05c                 | ' numpar=compiledline(lineptr_e).result.uresult
1c05c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1c05c     0C 4E 85 F1 | 	sub	fp, #12
1c060     02 16 16 F2 | 	cmp	arg03, #2 wc
1c064     47 00 00 FF 
1c068     7C E4 85 F1 | 	sub	objptr, ##36476
1c06c     0C 4E 05 C1 |  if_b	add	fp, #12
1c070     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c074     0C 4E 85 C1 |  if_b	sub	fp, #12
1c078     40 00 90 4D |  if_c_and_nz	jmp	#LR__2200
1c07c     00 12 06 F6 | 	mov	arg01, #0
1c080     10 0D B1 FD | 	call	#__system___getiolock_0616
1c084     FD 12 02 F6 | 	mov	arg01, result1
1c088     E0 AF B0 FD | 	call	#__system___lockmem
1c08c     BB 01 00 FF 
1c090     73 15 06 F6 | 	mov	arg02, ##@LR__6031
1c094     00 12 06 F6 | 	mov	arg01, #0
1c098     00 16 06 F6 | 	mov	arg03, #0
1c09c     C0 BC B0 FD | 	call	#__system___basic_print_string
1c0a0     00 12 06 F6 | 	mov	arg01, #0
1c0a4     EC 0C B1 FD | 	call	#__system___getiolock_0616
1c0a8     FD 00 68 FC | 	wrlong	#0, result1
1c0ac     27 12 06 F6 | 	mov	arg01, #39
1c0b0     00 14 06 F6 | 	mov	arg02, #0
1c0b4     08 75 B0 FD | 	call	#_printerror
1c0b8     64 00 90 FD | 	jmp	#LR__2201
1c0bc                 | LR__2200
1c0bc     48 16 BF FD | 	call	#_pop
1c0c0     A7 FA 61 FC | 	wrlong	result1, fp
1c0c4     04 4E 05 F1 | 	add	fp, #4
1c0c8     A7 FC 61 FC | 	wrlong	result2, fp
1c0cc     04 4E 05 F1 | 	add	fp, #4
1c0d0     A7 FE 61 FC | 	wrlong	result3, fp
1c0d4     08 4E 85 F1 | 	sub	fp, #8
1c0d8     52 00 00 FF 
1c0dc     A8 E4 05 F1 | 	add	objptr, ##42152
1c0e0     F2 26 02 FB | 	rdlong	local01, objptr
1c0e4     52 00 00 FF 
1c0e8     A8 E4 85 F1 | 	sub	objptr, ##42152
1c0ec     A7 12 02 F6 | 	mov	arg01, fp
1c0f0     B4 18 BF FD | 	call	#_converttofloat
1c0f4     FD 14 02 F6 | 	mov	arg02, result1
1c0f8     13 13 02 F6 | 	mov	arg01, local01
1c0fc     E4 DD B0 FD | 	call	#__system___float_mul
1c100     FD 12 02 F6 | 	mov	arg01, result1
1c104     3C E7 B0 FD | 	call	#__system____builtin_sinf
1c108     A7 FA 61 FC | 	wrlong	result1, fp
1c10c     08 4E 05 F1 | 	add	fp, #8
1c110     A7 3C 68 FC | 	wrlong	#30, fp
1c114     08 4E 85 F1 | 	sub	fp, #8
1c118     A7 12 02 F6 | 	mov	arg01, fp
1c11c     80 16 BF FD | 	call	#_push
1c120                 | LR__2201
1c120     A7 F0 03 F6 | 	mov	ptra, fp
1c124     B2 00 A0 FD | 	call	#popregs_
1c128                 | _do_sin_ret
1c128     2D 00 64 FD | 	ret
1c12c                 | 
1c12c                 | ' 
1c12c                 | ' ' ------------------ skip
1c12c                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1c12c                 | ' 
1c12c                 | ' sub do_skip
1c12c                 | _do_skip
1c12c     4A 00 00 FF 
1c130     80 E4 05 F1 | 	add	objptr, ##38016
1c134     F2 00 02 FB | 	rdlong	_var01, objptr
1c138     00 03 02 F6 | 	mov	_var02, _var01
1c13c     01 02 66 F0 | 	shl	_var02, #1
1c140     00 03 02 F1 | 	add	_var02, _var01
1c144     02 02 66 F0 | 	shl	_var02, #2
1c148     03 00 00 FF 
1c14c     04 E4 85 F1 | 	sub	objptr, ##1540
1c150     F2 02 02 F1 | 	add	_var02, objptr
1c154     01 03 02 FB | 	rdlong	_var02, _var02
1c158     01 02 86 F1 | 	sub	_var02, #1
1c15c     03 00 00 FF 
1c160     04 E4 05 F1 | 	add	objptr, ##1540
1c164     F2 02 62 FC | 	wrlong	_var02, objptr
1c168     4A 00 00 FF 
1c16c     80 E4 85 F1 | 	sub	objptr, ##38016
1c170                 | _do_skip_ret
1c170     2D 00 64 FD | 	ret
1c174                 | 
1c174                 | ' 
1c174                 | ' ' ------------------ sprite
1c174                 | ' 
1c174                 | ' sub do_sprite
1c174                 | _do_sprite
1c174     00 4A 05 F6 | 	mov	COUNT_, #0
1c178     A8 00 A0 FD | 	call	#pushregs_
1c17c     30 F0 07 F1 | 	add	ptra, #48
1c180     84 15 BF FD | 	call	#_pop
1c184     FD 16 02 F6 | 	mov	arg03, result1
1c188     FE 14 02 F6 | 	mov	arg02, result2
1c18c     FF 12 02 F6 | 	mov	arg01, result3
1c190     18 4E 05 F1 | 	add	fp, #24
1c194     A7 16 62 FC | 	wrlong	arg03, fp
1c198     04 4E 05 F1 | 	add	fp, #4
1c19c     A7 14 62 FC | 	wrlong	arg02, fp
1c1a0     04 4E 05 F1 | 	add	fp, #4
1c1a4     A7 12 62 FC | 	wrlong	arg01, fp
1c1a8     20 4E 85 F1 | 	sub	fp, #32
1c1ac     58 15 BF FD | 	call	#_pop
1c1b0     FD 16 02 F6 | 	mov	arg03, result1
1c1b4     FE 14 02 F6 | 	mov	arg02, result2
1c1b8     FF 12 02 F6 | 	mov	arg01, result3
1c1bc     0C 4E 05 F1 | 	add	fp, #12
1c1c0     A7 16 62 FC | 	wrlong	arg03, fp
1c1c4     04 4E 05 F1 | 	add	fp, #4
1c1c8     A7 14 62 FC | 	wrlong	arg02, fp
1c1cc     04 4E 05 F1 | 	add	fp, #4
1c1d0     A7 12 62 FC | 	wrlong	arg01, fp
1c1d4     14 4E 85 F1 | 	sub	fp, #20
1c1d8     2C 15 BF FD | 	call	#_pop
1c1dc     FF 16 02 F6 | 	mov	arg03, result3
1c1e0     A7 FA 61 FC | 	wrlong	result1, fp
1c1e4     04 4E 05 F1 | 	add	fp, #4
1c1e8     A7 FC 61 FC | 	wrlong	result2, fp
1c1ec     04 4E 05 F1 | 	add	fp, #4
1c1f0     A7 16 62 FC | 	wrlong	arg03, fp
1c1f4     08 4E 85 F1 | 	sub	fp, #8
1c1f8     A7 12 02 F6 | 	mov	arg01, fp
1c1fc     EC 16 BF FD | 	call	#_converttoint
1c200     24 4E 05 F1 | 	add	fp, #36
1c204     A7 FA 61 FC | 	wrlong	result1, fp
1c208     18 4E 85 F1 | 	sub	fp, #24
1c20c     A7 12 02 F6 | 	mov	arg01, fp
1c210     0C 4E 85 F1 | 	sub	fp, #12
1c214     D4 16 BF FD | 	call	#_converttoint
1c218     28 4E 05 F1 | 	add	fp, #40
1c21c     A7 FA 61 FC | 	wrlong	result1, fp
1c220     10 4E 85 F1 | 	sub	fp, #16
1c224     A7 12 02 F6 | 	mov	arg01, fp
1c228     18 4E 85 F1 | 	sub	fp, #24
1c22c     BC 16 BF FD | 	call	#_converttoint
1c230     2C 4E 05 F1 | 	add	fp, #44
1c234     A7 FA 61 FC | 	wrlong	result1, fp
1c238     08 4E 85 F1 | 	sub	fp, #8
1c23c     A7 12 02 FB | 	rdlong	arg01, fp
1c240     04 4E 05 F1 | 	add	fp, #4
1c244     A7 14 02 FB | 	rdlong	arg02, fp
1c248     FD 16 02 F6 | 	mov	arg03, result1
1c24c     28 4E 85 F1 | 	sub	fp, #40
1c250     6C 83 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c254     A7 F0 03 F6 | 	mov	ptra, fp
1c258     B2 00 A0 FD | 	call	#popregs_
1c25c                 | _do_sprite_ret
1c25c     2D 00 64 FD | 	ret
1c260                 | 
1c260                 | ' 
1c260                 | ' ' ------------------ sqr
1c260                 | ' 
1c260                 | ' sub do_sqr
1c260                 | _do_sqr
1c260     01 4A 05 F6 | 	mov	COUNT_, #1
1c264     A8 00 A0 FD | 	call	#pushregs_
1c268     10 F0 07 F1 | 	add	ptra, #16
1c26c     4A 00 00 FF 
1c270     80 E4 05 F1 | 	add	objptr, ##38016
1c274     F2 26 02 FB | 	rdlong	local01, objptr
1c278     13 17 02 F6 | 	mov	arg03, local01
1c27c     01 16 66 F0 | 	shl	arg03, #1
1c280     13 17 02 F1 | 	add	arg03, local01
1c284     02 16 66 F0 | 	shl	arg03, #2
1c288     03 00 00 FF 
1c28c     04 E4 85 F1 | 	sub	objptr, ##1540
1c290     F2 16 02 F1 | 	add	arg03, objptr
1c294     0B 17 02 FB | 	rdlong	arg03, arg03
1c298     0C 4E 05 F1 | 	add	fp, #12
1c29c     A7 16 62 FC | 	wrlong	arg03, fp
1c2a0                 | ' 
1c2a0                 | ' numpar=compiledline(lineptr_e).result.uresult
1c2a0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1c2a0     0C 4E 85 F1 | 	sub	fp, #12
1c2a4     02 16 16 F2 | 	cmp	arg03, #2 wc
1c2a8     47 00 00 FF 
1c2ac     7C E4 85 F1 | 	sub	objptr, ##36476
1c2b0     0C 4E 05 C1 |  if_b	add	fp, #12
1c2b4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c2b8     0C 4E 85 C1 |  if_b	sub	fp, #12
1c2bc     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1c2c0     00 12 06 F6 | 	mov	arg01, #0
1c2c4     CC 0A B1 FD | 	call	#__system___getiolock_0616
1c2c8     FD 12 02 F6 | 	mov	arg01, result1
1c2cc     9C AD B0 FD | 	call	#__system___lockmem
1c2d0     BB 01 00 FF 
1c2d4     79 15 06 F6 | 	mov	arg02, ##@LR__6032
1c2d8     00 12 06 F6 | 	mov	arg01, #0
1c2dc     00 16 06 F6 | 	mov	arg03, #0
1c2e0     7C BA B0 FD | 	call	#__system___basic_print_string
1c2e4     00 12 06 F6 | 	mov	arg01, #0
1c2e8     A8 0A B1 FD | 	call	#__system___getiolock_0616
1c2ec     FD 00 68 FC | 	wrlong	#0, result1
1c2f0     27 12 06 F6 | 	mov	arg01, #39
1c2f4     00 14 06 F6 | 	mov	arg02, #0
1c2f8     C4 72 B0 FD | 	call	#_printerror
1c2fc     48 00 90 FD | 	jmp	#LR__2211
1c300                 | LR__2210
1c300     04 14 BF FD | 	call	#_pop
1c304     FF 26 02 F6 | 	mov	local01, result3
1c308     A7 FA 61 FC | 	wrlong	result1, fp
1c30c     04 4E 05 F1 | 	add	fp, #4
1c310     A7 FC 61 FC | 	wrlong	result2, fp
1c314     04 4E 05 F1 | 	add	fp, #4
1c318     A7 26 62 FC | 	wrlong	local01, fp
1c31c     08 4E 85 F1 | 	sub	fp, #8
1c320     A7 12 02 F6 | 	mov	arg01, fp
1c324     80 16 BF FD | 	call	#_converttofloat
1c328     FD 12 02 F6 | 	mov	arg01, result1
1c32c     DC DA B0 FD | 	call	#__system___float_sqrt
1c330     A7 FA 61 FC | 	wrlong	result1, fp
1c334     08 4E 05 F1 | 	add	fp, #8
1c338     A7 3C 68 FC | 	wrlong	#30, fp
1c33c     08 4E 85 F1 | 	sub	fp, #8
1c340     A7 12 02 F6 | 	mov	arg01, fp
1c344     58 14 BF FD | 	call	#_push
1c348                 | LR__2211
1c348     A7 F0 03 F6 | 	mov	ptra, fp
1c34c     B2 00 A0 FD | 	call	#popregs_
1c350                 | _do_sqr_ret
1c350     2D 00 64 FD | 	ret
1c354                 | 
1c354                 | ' 
1c354                 | ' ' ------------------ stick
1c354                 | ' 
1c354                 | ' sub do_stick
1c354                 | _do_stick
1c354     01 4A 05 F6 | 	mov	COUNT_, #1
1c358     A8 00 A0 FD | 	call	#pushregs_
1c35c     10 F0 07 F1 | 	add	ptra, #16
1c360     4A 00 00 FF 
1c364     80 E4 05 F1 | 	add	objptr, ##38016
1c368     F2 26 02 FB | 	rdlong	local01, objptr
1c36c     13 17 02 F6 | 	mov	arg03, local01
1c370     01 16 66 F0 | 	shl	arg03, #1
1c374     13 17 02 F1 | 	add	arg03, local01
1c378     02 16 66 F0 | 	shl	arg03, #2
1c37c     03 00 00 FF 
1c380     04 E4 85 F1 | 	sub	objptr, ##1540
1c384     F2 16 02 F1 | 	add	arg03, objptr
1c388     0B 17 02 FB | 	rdlong	arg03, arg03
1c38c     0C 4E 05 F1 | 	add	fp, #12
1c390     A7 16 62 FC | 	wrlong	arg03, fp
1c394                 | ' 
1c394                 | ' numpar=compiledline(lineptr_e).result.uresult
1c394                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1c394     0C 4E 85 F1 | 	sub	fp, #12
1c398     02 16 16 F2 | 	cmp	arg03, #2 wc
1c39c     47 00 00 FF 
1c3a0     7C E4 85 F1 | 	sub	objptr, ##36476
1c3a4     40 00 90 CD |  if_b	jmp	#LR__2220
1c3a8     00 12 06 F6 | 	mov	arg01, #0
1c3ac     E4 09 B1 FD | 	call	#__system___getiolock_0616
1c3b0     FD 12 02 F6 | 	mov	arg01, result1
1c3b4     B4 AC B0 FD | 	call	#__system___lockmem
1c3b8     BB 01 00 FF 
1c3bc     7F 15 06 F6 | 	mov	arg02, ##@LR__6033
1c3c0     00 12 06 F6 | 	mov	arg01, #0
1c3c4     00 16 06 F6 | 	mov	arg03, #0
1c3c8     94 B9 B0 FD | 	call	#__system___basic_print_string
1c3cc     00 12 06 F6 | 	mov	arg01, #0
1c3d0     C0 09 B1 FD | 	call	#__system___getiolock_0616
1c3d4     FD 00 68 FC | 	wrlong	#0, result1
1c3d8     27 12 06 F6 | 	mov	arg01, #39
1c3dc     00 14 06 F6 | 	mov	arg02, #0
1c3e0     DC 71 B0 FD | 	call	#_printerror
1c3e4     F0 00 90 FD | 	jmp	#LR__2224
1c3e8                 | LR__2220
1c3e8                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1c3e8     0C 4E 05 F1 | 	add	fp, #12
1c3ec     A7 FE 09 FB | 	rdlong	result3, fp wz
1c3f0     0C 4E 85 F1 | 	sub	fp, #12
1c3f4     30 00 90 5D |  if_ne	jmp	#LR__2221
1c3f8     52 00 00 FF 
1c3fc     1C E4 05 F1 | 	add	objptr, ##42012
1c400     F2 26 02 FB | 	rdlong	local01, objptr
1c404     52 00 00 FF 
1c408     1C E4 85 F1 | 	sub	objptr, ##42012
1c40c     A7 26 62 FC | 	wrlong	local01, fp
1c410     08 4E 05 F1 | 	add	fp, #8
1c414     A7 3A 68 FC | 	wrlong	#29, fp
1c418     08 4E 85 F1 | 	sub	fp, #8
1c41c     A7 12 02 F6 | 	mov	arg01, fp
1c420     7C 13 BF FD | 	call	#_push
1c424     B0 00 90 FD | 	jmp	#LR__2224
1c428                 | LR__2221
1c428     DC 12 BF FD | 	call	#_pop
1c42c     A7 FA 61 FC | 	wrlong	result1, fp
1c430     04 4E 05 F1 | 	add	fp, #4
1c434     A7 FC 61 FC | 	wrlong	result2, fp
1c438     04 4E 05 F1 | 	add	fp, #4
1c43c     A7 FE 61 FC | 	wrlong	result3, fp
1c440                 | ' t1=pop()
1c440                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c440     08 4E 85 F1 | 	sub	fp, #8
1c444     1C FE 0D F2 | 	cmp	result3, #28 wz
1c448     08 4E 05 51 |  if_ne	add	fp, #8
1c44c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c450     08 4E 85 51 |  if_ne	sub	fp, #8
1c454     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c458     70 00 90 5D |  if_ne	jmp	#LR__2223
1c45c     A7 26 02 FB | 	rdlong	local01, fp
1c460     52 00 00 FF 
1c464     08 E5 05 F1 | 	add	objptr, ##42248
1c468     F2 26 62 FC | 	wrlong	local01, objptr
1c46c                 | '   q=t1.result.uresult
1c46c                 | '   if q<7 then 
1c46c     52 00 00 FF 
1c470     08 E5 85 F1 | 	sub	objptr, ##42248
1c474     07 26 56 F2 | 	cmps	local01, #7 wc
1c478     40 00 90 3D |  if_ae	jmp	#LR__2222
1c47c     52 00 00 FF 
1c480     08 E5 05 F1 | 	add	objptr, ##42248
1c484     F2 26 02 FB | 	rdlong	local01, objptr
1c488     02 26 66 F0 | 	shl	local01, #2
1c48c     EC E4 85 F1 | 	sub	objptr, #236
1c490     F2 26 02 F1 | 	add	local01, objptr
1c494     13 27 02 FB | 	rdlong	local01, local01
1c498     A7 26 62 FC | 	wrlong	local01, fp
1c49c     08 4E 05 F1 | 	add	fp, #8
1c4a0     A7 3A 68 FC | 	wrlong	#29, fp
1c4a4     08 4E 85 F1 | 	sub	fp, #8
1c4a8     A7 12 02 F6 | 	mov	arg01, fp
1c4ac     52 00 00 FF 
1c4b0     1C E4 85 F1 | 	sub	objptr, ##42012
1c4b4     E8 12 BF FD | 	call	#_push
1c4b8                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1c4b8     1C 00 90 FD | 	jmp	#LR__2224
1c4bc                 | LR__2222
1c4bc     29 12 06 F6 | 	mov	arg01, #41
1c4c0     00 14 06 F6 | 	mov	arg02, #0
1c4c4     F8 70 B0 FD | 	call	#_printerror
1c4c8                 | '      printerror(41) : return
1c4c8     0C 00 90 FD | 	jmp	#LR__2224
1c4cc                 | LR__2223
1c4cc     29 12 06 F6 | 	mov	arg01, #41
1c4d0     00 14 06 F6 | 	mov	arg02, #0
1c4d4     E8 70 B0 FD | 	call	#_printerror
1c4d8                 | LR__2224
1c4d8     A7 F0 03 F6 | 	mov	ptra, fp
1c4dc     B2 00 A0 FD | 	call	#popregs_
1c4e0                 | _do_stick_ret
1c4e0     2D 00 64 FD | 	ret
1c4e4                 | 
1c4e4                 | ' 
1c4e4                 | ' ' ------------------ strig
1c4e4                 | ' 
1c4e4                 | ' sub do_strig
1c4e4                 | _do_strig
1c4e4     01 4A 05 F6 | 	mov	COUNT_, #1
1c4e8     A8 00 A0 FD | 	call	#pushregs_
1c4ec     10 F0 07 F1 | 	add	ptra, #16
1c4f0     4A 00 00 FF 
1c4f4     80 E4 05 F1 | 	add	objptr, ##38016
1c4f8     F2 26 02 FB | 	rdlong	local01, objptr
1c4fc     13 17 02 F6 | 	mov	arg03, local01
1c500     01 16 66 F0 | 	shl	arg03, #1
1c504     13 17 02 F1 | 	add	arg03, local01
1c508     02 16 66 F0 | 	shl	arg03, #2
1c50c     03 00 00 FF 
1c510     04 E4 85 F1 | 	sub	objptr, ##1540
1c514     F2 16 02 F1 | 	add	arg03, objptr
1c518     0B 17 02 FB | 	rdlong	arg03, arg03
1c51c     0C 4E 05 F1 | 	add	fp, #12
1c520     A7 16 62 FC | 	wrlong	arg03, fp
1c524                 | ' 
1c524                 | ' numpar=compiledline(lineptr_e).result.uresult
1c524                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1c524     0C 4E 85 F1 | 	sub	fp, #12
1c528     02 16 16 F2 | 	cmp	arg03, #2 wc
1c52c     47 00 00 FF 
1c530     7C E4 85 F1 | 	sub	objptr, ##36476
1c534     40 00 90 CD |  if_b	jmp	#LR__2230
1c538     00 12 06 F6 | 	mov	arg01, #0
1c53c     54 08 B1 FD | 	call	#__system___getiolock_0616
1c540     FD 12 02 F6 | 	mov	arg01, result1
1c544     24 AB B0 FD | 	call	#__system___lockmem
1c548     BB 01 00 FF 
1c54c     87 15 06 F6 | 	mov	arg02, ##@LR__6034
1c550     00 12 06 F6 | 	mov	arg01, #0
1c554     00 16 06 F6 | 	mov	arg03, #0
1c558     04 B8 B0 FD | 	call	#__system___basic_print_string
1c55c     00 12 06 F6 | 	mov	arg01, #0
1c560     30 08 B1 FD | 	call	#__system___getiolock_0616
1c564     FD 00 68 FC | 	wrlong	#0, result1
1c568     27 12 06 F6 | 	mov	arg01, #39
1c56c     00 14 06 F6 | 	mov	arg02, #0
1c570     4C 70 B0 FD | 	call	#_printerror
1c574     F0 00 90 FD | 	jmp	#LR__2234
1c578                 | LR__2230
1c578                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1c578     0C 4E 05 F1 | 	add	fp, #12
1c57c     A7 FE 09 FB | 	rdlong	result3, fp wz
1c580     0C 4E 85 F1 | 	sub	fp, #12
1c584     30 00 90 5D |  if_ne	jmp	#LR__2231
1c588     52 00 00 FF 
1c58c     38 E4 05 F1 | 	add	objptr, ##42040
1c590     F2 26 02 FB | 	rdlong	local01, objptr
1c594     52 00 00 FF 
1c598     38 E4 85 F1 | 	sub	objptr, ##42040
1c59c     A7 26 62 FC | 	wrlong	local01, fp
1c5a0     08 4E 05 F1 | 	add	fp, #8
1c5a4     A7 3A 68 FC | 	wrlong	#29, fp
1c5a8     08 4E 85 F1 | 	sub	fp, #8
1c5ac     A7 12 02 F6 | 	mov	arg01, fp
1c5b0     EC 11 BF FD | 	call	#_push
1c5b4     B0 00 90 FD | 	jmp	#LR__2234
1c5b8                 | LR__2231
1c5b8     4C 11 BF FD | 	call	#_pop
1c5bc     A7 FA 61 FC | 	wrlong	result1, fp
1c5c0     04 4E 05 F1 | 	add	fp, #4
1c5c4     A7 FC 61 FC | 	wrlong	result2, fp
1c5c8     04 4E 05 F1 | 	add	fp, #4
1c5cc     A7 FE 61 FC | 	wrlong	result3, fp
1c5d0                 | ' t1=pop()
1c5d0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c5d0     08 4E 85 F1 | 	sub	fp, #8
1c5d4     1C FE 0D F2 | 	cmp	result3, #28 wz
1c5d8     08 4E 05 51 |  if_ne	add	fp, #8
1c5dc     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c5e0     08 4E 85 51 |  if_ne	sub	fp, #8
1c5e4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c5e8     70 00 90 5D |  if_ne	jmp	#LR__2233
1c5ec     A7 26 02 FB | 	rdlong	local01, fp
1c5f0     52 00 00 FF 
1c5f4     08 E5 05 F1 | 	add	objptr, ##42248
1c5f8     F2 26 62 FC | 	wrlong	local01, objptr
1c5fc                 | '   q=t1.result.uresult
1c5fc                 | '   if q<7 then 
1c5fc     52 00 00 FF 
1c600     08 E5 85 F1 | 	sub	objptr, ##42248
1c604     07 26 56 F2 | 	cmps	local01, #7 wc
1c608     40 00 90 3D |  if_ae	jmp	#LR__2232
1c60c     52 00 00 FF 
1c610     08 E5 05 F1 | 	add	objptr, ##42248
1c614     F2 26 02 FB | 	rdlong	local01, objptr
1c618     02 26 66 F0 | 	shl	local01, #2
1c61c     D0 E4 85 F1 | 	sub	objptr, #208
1c620     F2 26 02 F1 | 	add	local01, objptr
1c624     13 27 02 FB | 	rdlong	local01, local01
1c628     A7 26 62 FC | 	wrlong	local01, fp
1c62c     08 4E 05 F1 | 	add	fp, #8
1c630     A7 3A 68 FC | 	wrlong	#29, fp
1c634     08 4E 85 F1 | 	sub	fp, #8
1c638     A7 12 02 F6 | 	mov	arg01, fp
1c63c     52 00 00 FF 
1c640     38 E4 85 F1 | 	sub	objptr, ##42040
1c644     58 11 BF FD | 	call	#_push
1c648                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1c648     1C 00 90 FD | 	jmp	#LR__2234
1c64c                 | LR__2232
1c64c     29 12 06 F6 | 	mov	arg01, #41
1c650     00 14 06 F6 | 	mov	arg02, #0
1c654     68 6F B0 FD | 	call	#_printerror
1c658                 | '      printerror(41) : return
1c658     0C 00 90 FD | 	jmp	#LR__2234
1c65c                 | LR__2233
1c65c     29 12 06 F6 | 	mov	arg01, #41
1c660     00 14 06 F6 | 	mov	arg02, #0
1c664     58 6F B0 FD | 	call	#_printerror
1c668                 | LR__2234
1c668     A7 F0 03 F6 | 	mov	ptra, fp
1c66c     B2 00 A0 FD | 	call	#popregs_
1c670                 | _do_strig_ret
1c670     2D 00 64 FD | 	ret
1c674                 | 
1c674                 | ' 
1c674                 | ' ' ------------------ tan
1c674                 | ' 
1c674                 | ' sub do_tan
1c674                 | _do_tan
1c674     01 4A 05 F6 | 	mov	COUNT_, #1
1c678     A8 00 A0 FD | 	call	#pushregs_
1c67c     10 F0 07 F1 | 	add	ptra, #16
1c680     4A 00 00 FF 
1c684     80 E4 05 F1 | 	add	objptr, ##38016
1c688     F2 26 02 FB | 	rdlong	local01, objptr
1c68c     13 17 02 F6 | 	mov	arg03, local01
1c690     01 16 66 F0 | 	shl	arg03, #1
1c694     13 17 02 F1 | 	add	arg03, local01
1c698     02 16 66 F0 | 	shl	arg03, #2
1c69c     03 00 00 FF 
1c6a0     04 E4 85 F1 | 	sub	objptr, ##1540
1c6a4     F2 16 02 F1 | 	add	arg03, objptr
1c6a8     0B 17 02 FB | 	rdlong	arg03, arg03
1c6ac     0C 4E 05 F1 | 	add	fp, #12
1c6b0     A7 16 62 FC | 	wrlong	arg03, fp
1c6b4                 | ' 
1c6b4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c6b4                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1c6b4     0C 4E 85 F1 | 	sub	fp, #12
1c6b8     02 16 16 F2 | 	cmp	arg03, #2 wc
1c6bc     47 00 00 FF 
1c6c0     7C E4 85 F1 | 	sub	objptr, ##36476
1c6c4     0C 4E 05 C1 |  if_b	add	fp, #12
1c6c8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c6cc     0C 4E 85 C1 |  if_b	sub	fp, #12
1c6d0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2240
1c6d4     00 12 06 F6 | 	mov	arg01, #0
1c6d8     B8 06 B1 FD | 	call	#__system___getiolock_0616
1c6dc     FD 12 02 F6 | 	mov	arg01, result1
1c6e0     88 A9 B0 FD | 	call	#__system___lockmem
1c6e4     BB 01 00 FF 
1c6e8     8F 15 06 F6 | 	mov	arg02, ##@LR__6035
1c6ec     00 12 06 F6 | 	mov	arg01, #0
1c6f0     00 16 06 F6 | 	mov	arg03, #0
1c6f4     68 B6 B0 FD | 	call	#__system___basic_print_string
1c6f8     00 12 06 F6 | 	mov	arg01, #0
1c6fc     94 06 B1 FD | 	call	#__system___getiolock_0616
1c700     FD 00 68 FC | 	wrlong	#0, result1
1c704     27 12 06 F6 | 	mov	arg01, #39
1c708     00 14 06 F6 | 	mov	arg02, #0
1c70c     B0 6E B0 FD | 	call	#_printerror
1c710     64 00 90 FD | 	jmp	#LR__2241
1c714                 | LR__2240
1c714     F0 0F BF FD | 	call	#_pop
1c718     A7 FA 61 FC | 	wrlong	result1, fp
1c71c     04 4E 05 F1 | 	add	fp, #4
1c720     A7 FC 61 FC | 	wrlong	result2, fp
1c724     04 4E 05 F1 | 	add	fp, #4
1c728     A7 FE 61 FC | 	wrlong	result3, fp
1c72c     08 4E 85 F1 | 	sub	fp, #8
1c730     52 00 00 FF 
1c734     A8 E4 05 F1 | 	add	objptr, ##42152
1c738     F2 26 02 FB | 	rdlong	local01, objptr
1c73c     52 00 00 FF 
1c740     A8 E4 85 F1 | 	sub	objptr, ##42152
1c744     A7 12 02 F6 | 	mov	arg01, fp
1c748     5C 12 BF FD | 	call	#_converttofloat
1c74c     FD 14 02 F6 | 	mov	arg02, result1
1c750     13 13 02 F6 | 	mov	arg01, local01
1c754     8C D7 B0 FD | 	call	#__system___float_mul
1c758     FD 12 02 F6 | 	mov	arg01, result1
1c75c     30 E2 B0 FD | 	call	#__system____builtin_tanf
1c760     A7 FA 61 FC | 	wrlong	result1, fp
1c764     08 4E 05 F1 | 	add	fp, #8
1c768     A7 3C 68 FC | 	wrlong	#30, fp
1c76c     08 4E 85 F1 | 	sub	fp, #8
1c770     A7 12 02 F6 | 	mov	arg01, fp
1c774     28 10 BF FD | 	call	#_push
1c778                 | LR__2241
1c778     A7 F0 03 F6 | 	mov	ptra, fp
1c77c     B2 00 A0 FD | 	call	#popregs_
1c780                 | _do_tan_ret
1c780     2D 00 64 FD | 	ret
1c784                 | 
1c784                 | ' 
1c784                 | ' ' ------------------ val
1c784                 | ' 
1c784                 | ' sub do_val
1c784                 | _do_val
1c784     03 4A 05 F6 | 	mov	COUNT_, #3
1c788     A8 00 A0 FD | 	call	#pushregs_
1c78c     20 F0 07 F1 | 	add	ptra, #32
1c790     4A 00 00 FF 
1c794     80 E4 05 F1 | 	add	objptr, ##38016
1c798     F2 16 02 FB | 	rdlong	arg03, objptr
1c79c     0B 27 02 F6 | 	mov	local01, arg03
1c7a0     01 26 66 F0 | 	shl	local01, #1
1c7a4     0B 27 02 F1 | 	add	local01, arg03
1c7a8     02 26 66 F0 | 	shl	local01, #2
1c7ac     03 00 00 FF 
1c7b0     04 E4 85 F1 | 	sub	objptr, ##1540
1c7b4     F2 26 02 F1 | 	add	local01, objptr
1c7b8     13 17 02 FB | 	rdlong	arg03, local01
1c7bc     0C 4E 05 F1 | 	add	fp, #12
1c7c0     A7 16 62 FC | 	wrlong	arg03, fp
1c7c4                 | ' 
1c7c4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c7c4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1c7c4     0C 4E 85 F1 | 	sub	fp, #12
1c7c8     02 16 16 F2 | 	cmp	arg03, #2 wc
1c7cc     47 00 00 FF 
1c7d0     7C E4 85 F1 | 	sub	objptr, ##36476
1c7d4     0C 4E 05 C1 |  if_b	add	fp, #12
1c7d8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c7dc     0C 4E 85 C1 |  if_b	sub	fp, #12
1c7e0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2250
1c7e4     00 12 06 F6 | 	mov	arg01, #0
1c7e8     A8 05 B1 FD | 	call	#__system___getiolock_0616
1c7ec     FD 12 02 F6 | 	mov	arg01, result1
1c7f0     78 A8 B0 FD | 	call	#__system___lockmem
1c7f4     BB 01 00 FF 
1c7f8     95 15 06 F6 | 	mov	arg02, ##@LR__6036
1c7fc     00 12 06 F6 | 	mov	arg01, #0
1c800     00 16 06 F6 | 	mov	arg03, #0
1c804     58 B5 B0 FD | 	call	#__system___basic_print_string
1c808     00 12 06 F6 | 	mov	arg01, #0
1c80c     84 05 B1 FD | 	call	#__system___getiolock_0616
1c810     FD 00 68 FC | 	wrlong	#0, result1
1c814     27 12 06 F6 | 	mov	arg01, #39
1c818     00 14 06 F6 | 	mov	arg02, #0
1c81c     A0 6D B0 FD | 	call	#_printerror
1c820     60 02 90 FD | 	jmp	#LR__2263
1c824                 | LR__2250
1c824     E0 0E BF FD | 	call	#_pop
1c828     FF 16 02 F6 | 	mov	arg03, result3
1c82c     A7 FA 61 FC | 	wrlong	result1, fp
1c830     04 4E 05 F1 | 	add	fp, #4
1c834     A7 FC 61 FC | 	wrlong	result2, fp
1c838     04 4E 05 F1 | 	add	fp, #4
1c83c     A7 16 62 FC | 	wrlong	arg03, fp
1c840                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1c840     08 4E 85 F1 | 	sub	fp, #8
1c844     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c848     18 00 90 5D |  if_ne	jmp	#LR__2251
1c84c     A7 12 02 FB | 	rdlong	arg01, fp
1c850     2C 10 BF FD | 	call	#_convertstring
1c854     A7 FA 61 FC | 	wrlong	result1, fp
1c858     08 4E 05 F1 | 	add	fp, #8
1c85c     A7 3E 68 FC | 	wrlong	#31, fp
1c860     08 4E 85 F1 | 	sub	fp, #8
1c864                 | LR__2251
1c864                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1c864     08 4E 05 F1 | 	add	fp, #8
1c868     A7 16 02 FB | 	rdlong	arg03, fp
1c86c     08 4E 85 F1 | 	sub	fp, #8
1c870     1F 16 0E F2 | 	cmp	arg03, #31 wz
1c874     40 00 90 AD |  if_e	jmp	#LR__2252
1c878     00 12 06 F6 | 	mov	arg01, #0
1c87c     14 05 B1 FD | 	call	#__system___getiolock_0616
1c880     FD 12 02 F6 | 	mov	arg01, result1
1c884     E4 A7 B0 FD | 	call	#__system___lockmem
1c888     BB 01 00 FF 
1c88c     9B 15 06 F6 | 	mov	arg02, ##@LR__6037
1c890     00 12 06 F6 | 	mov	arg01, #0
1c894     00 16 06 F6 | 	mov	arg03, #0
1c898     C4 B4 B0 FD | 	call	#__system___basic_print_string
1c89c     00 12 06 F6 | 	mov	arg01, #0
1c8a0     F0 04 B1 FD | 	call	#__system___getiolock_0616
1c8a4     FD 00 68 FC | 	wrlong	#0, result1
1c8a8     0F 12 06 F6 | 	mov	arg01, #15
1c8ac     00 14 06 F6 | 	mov	arg02, #0
1c8b0     0C 6D B0 FD | 	call	#_printerror
1c8b4     CC 01 90 FD | 	jmp	#LR__2263
1c8b8                 | LR__2252
1c8b8                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c8b8     A7 12 02 FB | 	rdlong	arg01, fp
1c8bc     01 14 06 F6 | 	mov	arg02, #1
1c8c0     24 C8 B0 FD | 	call	#__system__Left_S
1c8c4     FD 12 02 F6 | 	mov	arg01, result1
1c8c8     BB 01 00 FF 
1c8cc     A1 15 06 F6 | 	mov	arg02, ##@LR__6038
1c8d0     C0 A7 B0 FD | 	call	#__system___string_cmp
1c8d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c8d8     48 00 90 5D |  if_ne	jmp	#LR__2255
1c8dc     BB 01 00 FF 
1c8e0     A3 27 06 F6 | 	mov	local01, ##@LR__6039
1c8e4     A7 16 02 FB | 	rdlong	arg03, fp
1c8e8     0B 13 02 F6 | 	mov	arg01, arg03
1c8ec     09 29 02 F6 | 	mov	local02, arg01
1c8f0     97 06 48 FB | 	callpa	#(@LR__2254-@LR__2253)>>2,fcache_load_ptr_
1c8f4                 | LR__2253
1c8f4     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c8f8     01 28 06 51 |  if_ne	add	local02, #1
1c8fc     F4 FF 9F 5D |  if_ne	jmp	#LR__2253
1c900                 | LR__2254
1c900     09 29 82 F1 | 	sub	local02, arg01
1c904     14 15 02 F6 | 	mov	arg02, local02
1c908     01 14 86 F1 | 	sub	arg02, #1
1c90c     0B 13 02 F6 | 	mov	arg01, arg03
1c910     5C C8 B0 FD | 	call	#__system__Right_S
1c914     FD 14 02 F6 | 	mov	arg02, result1
1c918     13 13 02 F6 | 	mov	arg01, local01
1c91c     A8 A7 B0 FD | 	call	#__system___string_concat
1c920     A7 FA 61 FC | 	wrlong	result1, fp
1c924                 | LR__2255
1c924                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c924     A7 12 02 FB | 	rdlong	arg01, fp
1c928     01 14 06 F6 | 	mov	arg02, #1
1c92c     B8 C7 B0 FD | 	call	#__system__Left_S
1c930     FD 12 02 F6 | 	mov	arg01, result1
1c934     BB 01 00 FF 
1c938     A6 15 06 F6 | 	mov	arg02, ##@LR__6040
1c93c     54 A7 B0 FD | 	call	#__system___string_cmp
1c940     00 FA 0D F2 | 	cmp	result1, #0 wz
1c944     48 00 90 5D |  if_ne	jmp	#LR__2258
1c948     BB 01 00 FF 
1c94c     A8 27 06 F6 | 	mov	local01, ##@LR__6041
1c950     A7 16 02 FB | 	rdlong	arg03, fp
1c954     0B 13 02 F6 | 	mov	arg01, arg03
1c958     09 29 02 F6 | 	mov	local02, arg01
1c95c     97 06 48 FB | 	callpa	#(@LR__2257-@LR__2256)>>2,fcache_load_ptr_
1c960                 | LR__2256
1c960     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c964     01 28 06 51 |  if_ne	add	local02, #1
1c968     F4 FF 9F 5D |  if_ne	jmp	#LR__2256
1c96c                 | LR__2257
1c96c     09 29 82 F1 | 	sub	local02, arg01
1c970     14 15 02 F6 | 	mov	arg02, local02
1c974     01 14 86 F1 | 	sub	arg02, #1
1c978     0B 13 02 F6 | 	mov	arg01, arg03
1c97c     F0 C7 B0 FD | 	call	#__system__Right_S
1c980     FD 14 02 F6 | 	mov	arg02, result1
1c984     13 13 02 F6 | 	mov	arg01, local01
1c988     3C A7 B0 FD | 	call	#__system___string_concat
1c98c     A7 FA 61 FC | 	wrlong	result1, fp
1c990                 | LR__2258
1c990     A7 12 02 FB | 	rdlong	arg01, fp
1c994     58 DD B0 FD | 	call	#__system____builtin_atof
1c998     1C 4E 05 F1 | 	add	fp, #28
1c99c     A7 FA 61 FC | 	wrlong	result1, fp
1c9a0     1C 4E 85 F1 | 	sub	fp, #28
1c9a4     A7 12 02 FB | 	rdlong	arg01, fp
1c9a8     00 14 06 F6 | 	mov	arg02, #0
1c9ac     AC DB B0 FD | 	call	#__system____builtin_atoi
1c9b0     18 4E 05 F1 | 	add	fp, #24
1c9b4     A7 FA 61 FC | 	wrlong	result1, fp
1c9b8                 | ' fval=val(t1.result.sresult)
1c9b8                 | ' ival=val%(t1.result.sresult)
1c9b8                 | ' if fval=ival then
1c9b8     04 4E 05 F1 | 	add	fp, #4
1c9bc     A7 26 02 FB | 	rdlong	local01, fp
1c9c0     1C 4E 85 F1 | 	sub	fp, #28
1c9c4     FD 12 52 F6 | 	abs	arg01, result1 wc
1c9c8     1F 2A C6 C9 |  if_b	decod	local03, #31
1c9cc     00 2A 06 36 |  if_ae	mov	local03, #0
1c9d0     0C D1 B0 FD | 	call	#__system___float_fromuns
1c9d4     15 FB 61 F5 | 	xor	result1, local03
1c9d8     FD 14 02 F6 | 	mov	arg02, result1
1c9dc     13 13 02 F6 | 	mov	arg01, local01
1c9e0     01 16 06 F6 | 	mov	arg03, #1
1c9e4     30 D9 B0 FD | 	call	#__system___float_cmp
1c9e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c9ec     20 00 90 5D |  if_ne	jmp	#LR__2259
1c9f0     18 4E 05 F1 | 	add	fp, #24
1c9f4     A7 26 02 FB | 	rdlong	local01, fp
1c9f8     18 4E 85 F1 | 	sub	fp, #24
1c9fc     A7 26 62 FC | 	wrlong	local01, fp
1ca00     08 4E 05 F1 | 	add	fp, #8
1ca04     A7 38 68 FC | 	wrlong	#28, fp
1ca08     08 4E 85 F1 | 	sub	fp, #8
1ca0c     6C 00 90 FD | 	jmp	#LR__2262
1ca10                 | LR__2259
1ca10                 | '   if fval=0 andalso ival<>0 then
1ca10     1C 4E 05 F1 | 	add	fp, #28
1ca14     A7 12 02 FB | 	rdlong	arg01, fp
1ca18     1C 4E 85 F1 | 	sub	fp, #28
1ca1c     00 14 06 F6 | 	mov	arg02, #0
1ca20     01 16 06 F6 | 	mov	arg03, #1
1ca24     F0 D8 B0 FD | 	call	#__system___float_cmp
1ca28     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca2c     30 00 90 5D |  if_ne	jmp	#LR__2260
1ca30     18 4E 05 F1 | 	add	fp, #24
1ca34     A7 26 0A FB | 	rdlong	local01, fp wz
1ca38     18 4E 85 F1 | 	sub	fp, #24
1ca3c     20 00 90 AD |  if_e	jmp	#LR__2260
1ca40     18 4E 05 F1 | 	add	fp, #24
1ca44     A7 26 02 FB | 	rdlong	local01, fp
1ca48     18 4E 85 F1 | 	sub	fp, #24
1ca4c     A7 26 62 FC | 	wrlong	local01, fp
1ca50     08 4E 05 F1 | 	add	fp, #8
1ca54     A7 38 68 FC | 	wrlong	#28, fp
1ca58     08 4E 85 F1 | 	sub	fp, #8
1ca5c     1C 00 90 FD | 	jmp	#LR__2261
1ca60                 | LR__2260
1ca60     1C 4E 05 F1 | 	add	fp, #28
1ca64     A7 26 02 FB | 	rdlong	local01, fp
1ca68     1C 4E 85 F1 | 	sub	fp, #28
1ca6c     A7 26 62 FC | 	wrlong	local01, fp
1ca70     08 4E 05 F1 | 	add	fp, #8
1ca74     A7 3C 68 FC | 	wrlong	#30, fp
1ca78     08 4E 85 F1 | 	sub	fp, #8
1ca7c                 | LR__2261
1ca7c                 | LR__2262
1ca7c     A7 12 02 F6 | 	mov	arg01, fp
1ca80     1C 0D BF FD | 	call	#_push
1ca84                 | LR__2263
1ca84     A7 F0 03 F6 | 	mov	ptra, fp
1ca88     B2 00 A0 FD | 	call	#popregs_
1ca8c                 | _do_val_ret
1ca8c     2D 00 64 FD | 	ret
1ca90                 | 
1ca90                 | ' 
1ca90                 | ' ' ------------------ waitclock
1ca90                 | ' 
1ca90                 | ' sub do_waitclock
1ca90                 | _do_waitclock
1ca90     52 00 00 FF 
1ca94     94 E4 05 F1 | 	add	objptr, ##42132
1ca98     F2 00 02 FB | 	rdlong	_var01, objptr
1ca9c                 | ' c=hkcnt
1ca9c                 | ' do: loop until hkcnt<>c
1ca9c                 | LR__2270
1ca9c     F2 02 02 FB | 	rdlong	_var02, objptr
1caa0     00 03 0A F2 | 	cmp	_var02, _var01 wz
1caa4     F4 FF 9F AD |  if_e	jmp	#LR__2270
1caa8     52 00 00 FF 
1caac     94 E4 85 F1 | 	sub	objptr, ##42132
1cab0                 | _do_waitclock_ret
1cab0     2D 00 64 FD | 	ret
1cab4                 | 
1cab4                 | ' 
1cab4                 | ' ' ------------------ waitms
1cab4                 | ' 
1cab4                 | ' sub do_waitms
1cab4                 | _do_waitms
1cab4     01 4A 05 F6 | 	mov	COUNT_, #1
1cab8     A8 00 A0 FD | 	call	#pushregs_
1cabc     18 F0 07 F1 | 	add	ptra, #24
1cac0     44 0C BF FD | 	call	#_pop
1cac4     A7 FA 61 FC | 	wrlong	result1, fp
1cac8     04 4E 05 F1 | 	add	fp, #4
1cacc     A7 FC 61 FC | 	wrlong	result2, fp
1cad0     04 4E 05 F1 | 	add	fp, #4
1cad4     A7 FE 61 FC | 	wrlong	result3, fp
1cad8     08 4E 85 F1 | 	sub	fp, #8
1cadc     A7 12 02 F6 | 	mov	arg01, fp
1cae0     08 0E BF FD | 	call	#_converttoint
1cae4     0C 4E 05 F1 | 	add	fp, #12
1cae8     A7 FA 61 FC | 	wrlong	result1, fp
1caec                 | ' 
1caec                 | ' t1=pop()  
1caec                 | ' t=converttoint(t1)
1caec                 | ' if t<0 then return
1caec     0C 4E 85 F1 | 	sub	fp, #12
1caf0     00 FA 55 F2 | 	cmps	result1, #0 wc
1caf4     E4 00 90 CD |  if_b	jmp	#LR__2286
1caf8                 | ' if t < 1000 then 
1caf8     0C 4E 05 F1 | 	add	fp, #12
1cafc     A7 12 02 FB | 	rdlong	arg01, fp
1cb00     0C 4E 85 F1 | 	sub	fp, #12
1cb04     01 00 00 FF 
1cb08     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1cb0c     14 00 90 3D |  if_ae	jmp	#LR__2280
1cb10     0C 4E 05 F1 | 	add	fp, #12
1cb14     A7 12 02 FB | 	rdlong	arg01, fp
1cb18     0C 4E 85 F1 | 	sub	fp, #12
1cb1c     40 A8 B0 FD | 	call	#__system___waitms
1cb20     B8 00 90 FD | 	jmp	#LR__2285
1cb24                 | LR__2280
1cb24     10 4E 05 F1 | 	add	fp, #16
1cb28     A7 02 68 FC | 	wrlong	#1, fp
1cb2c     04 4E 85 F1 | 	sub	fp, #4
1cb30     A7 12 02 FB | 	rdlong	arg01, fp
1cb34     09 13 52 F6 | 	abs	arg01, arg01 wc
1cb38     01 00 00 FF 
1cb3c     E8 13 16 FD | 	qdiv	arg01, ##1000
1cb40                 | '   for i=1 to t/1000
1cb40     0C 4E 85 F1 | 	sub	fp, #12
1cb44     18 26 62 FD | 	getqx	local01
1cb48     13 27 82 F6 | 	negc	local01, local01
1cb4c     01 26 06 F1 | 	add	local01, #1
1cb50                 | LR__2281
1cb50     10 4E 05 F1 | 	add	fp, #16
1cb54     A7 12 02 FB | 	rdlong	arg01, fp
1cb58     10 4E 85 F1 | 	sub	fp, #16
1cb5c     13 13 52 F2 | 	cmps	arg01, local01 wc
1cb60     54 00 90 3D |  if_ae	jmp	#LR__2284
1cb64     01 00 00 FF 
1cb68     E8 13 06 F6 | 	mov	arg01, ##1000
1cb6c     F0 A7 B0 FD | 	call	#__system___waitms
1cb70                 | '     waitms(1000)
1cb70                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1cb70     E0 12 06 F6 | 	mov	arg01, #224
1cb74     8C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1cb78     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb7c     10 00 90 5D |  if_ne	jmp	#LR__2282
1cb80     E4 12 06 F6 | 	mov	arg01, #228
1cb84     7C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1cb88     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb8c     10 00 90 AD |  if_e	jmp	#LR__2283
1cb90                 | LR__2282
1cb90     06 12 06 F6 | 	mov	arg01, #6
1cb94     6C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1cb98     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb9c     3C 00 90 5D |  if_ne	jmp	#LR__2286
1cba0                 | LR__2283
1cba0     10 4E 05 F1 | 	add	fp, #16
1cba4     A7 12 02 FB | 	rdlong	arg01, fp
1cba8     01 12 06 F1 | 	add	arg01, #1
1cbac     A7 12 62 FC | 	wrlong	arg01, fp
1cbb0     10 4E 85 F1 | 	sub	fp, #16
1cbb4     98 FF 9F FD | 	jmp	#LR__2281
1cbb8                 | LR__2284
1cbb8     0C 4E 05 F1 | 	add	fp, #12
1cbbc     A7 26 02 FB | 	rdlong	local01, fp
1cbc0     13 27 52 F6 | 	abs	local01, local01 wc
1cbc4     01 00 00 FF 
1cbc8     E8 27 16 FD | 	qdiv	local01, ##1000
1cbcc     0C 4E 85 F1 | 	sub	fp, #12
1cbd0     19 26 62 FD | 	getqy	local01
1cbd4     13 13 82 F6 | 	negc	arg01, local01
1cbd8     84 A7 B0 FD | 	call	#__system___waitms
1cbdc                 | LR__2285
1cbdc                 | LR__2286
1cbdc     A7 F0 03 F6 | 	mov	ptra, fp
1cbe0     B2 00 A0 FD | 	call	#popregs_
1cbe4                 | _do_waitms_ret
1cbe4     2D 00 64 FD | 	ret
1cbe8                 | 
1cbe8                 | ' 
1cbe8                 | ' ' ------------------ waitvbl
1cbe8                 | ' 
1cbe8                 | ' sub do_waitvbl
1cbe8                 | _do_waitvbl
1cbe8     01 12 06 F6 | 	mov	arg01, #1
1cbec     E8 86 B0 FD | 	call	#_hg010b_spin2_waitvbl
1cbf0                 | _do_waitvbl_ret
1cbf0     2D 00 64 FD | 	ret
1cbf4                 | 
1cbf4                 | ' 
1cbf4                 | ' ' ------------------ wrpin
1cbf4                 | ' 
1cbf4                 | ' sub do_wrpin
1cbf4                 | _do_wrpin
1cbf4     01 4A 05 F6 | 	mov	COUNT_, #1
1cbf8     A8 00 A0 FD | 	call	#pushregs_
1cbfc     18 F0 07 F1 | 	add	ptra, #24
1cc00     04 0B BF FD | 	call	#_pop
1cc04     FD 14 02 F6 | 	mov	arg02, result1
1cc08     FE 12 02 F6 | 	mov	arg01, result2
1cc0c     FF 26 02 F6 | 	mov	local01, result3
1cc10     A7 14 62 FC | 	wrlong	arg02, fp
1cc14     04 4E 05 F1 | 	add	fp, #4
1cc18     A7 12 62 FC | 	wrlong	arg01, fp
1cc1c     04 4E 05 F1 | 	add	fp, #4
1cc20     A7 26 62 FC | 	wrlong	local01, fp
1cc24     08 4E 85 F1 | 	sub	fp, #8
1cc28     DC 0A BF FD | 	call	#_pop
1cc2c     FF 26 02 F6 | 	mov	local01, result3
1cc30     0C 4E 05 F1 | 	add	fp, #12
1cc34     A7 FA 61 FC | 	wrlong	result1, fp
1cc38     04 4E 05 F1 | 	add	fp, #4
1cc3c     A7 FC 61 FC | 	wrlong	result2, fp
1cc40     04 4E 05 F1 | 	add	fp, #4
1cc44     A7 26 62 FC | 	wrlong	local01, fp
1cc48     08 4E 85 F1 | 	sub	fp, #8
1cc4c     A7 12 02 F6 | 	mov	arg01, fp
1cc50     0C 4E 85 F1 | 	sub	fp, #12
1cc54     94 0C BF FD | 	call	#_converttoint
1cc58     FD 26 02 F6 | 	mov	local01, result1
1cc5c     A7 12 02 F6 | 	mov	arg01, fp
1cc60     88 0C BF FD | 	call	#_converttoint
1cc64     13 FB 01 FC | 	wrpin	result1, local01
1cc68     A7 F0 03 F6 | 	mov	ptra, fp
1cc6c     B2 00 A0 FD | 	call	#popregs_
1cc70                 | _do_wrpin_ret
1cc70     2D 00 64 FD | 	ret
1cc74                 | 
1cc74                 | ' 
1cc74                 | ' ' ------------------ wxpin
1cc74                 | ' 
1cc74                 | ' sub do_wxpin
1cc74                 | _do_wxpin
1cc74     01 4A 05 F6 | 	mov	COUNT_, #1
1cc78     A8 00 A0 FD | 	call	#pushregs_
1cc7c     18 F0 07 F1 | 	add	ptra, #24
1cc80     84 0A BF FD | 	call	#_pop
1cc84     FD 14 02 F6 | 	mov	arg02, result1
1cc88     FE 12 02 F6 | 	mov	arg01, result2
1cc8c     FF 26 02 F6 | 	mov	local01, result3
1cc90     A7 14 62 FC | 	wrlong	arg02, fp
1cc94     04 4E 05 F1 | 	add	fp, #4
1cc98     A7 12 62 FC | 	wrlong	arg01, fp
1cc9c     04 4E 05 F1 | 	add	fp, #4
1cca0     A7 26 62 FC | 	wrlong	local01, fp
1cca4     08 4E 85 F1 | 	sub	fp, #8
1cca8     5C 0A BF FD | 	call	#_pop
1ccac     FF 26 02 F6 | 	mov	local01, result3
1ccb0     0C 4E 05 F1 | 	add	fp, #12
1ccb4     A7 FA 61 FC | 	wrlong	result1, fp
1ccb8     04 4E 05 F1 | 	add	fp, #4
1ccbc     A7 FC 61 FC | 	wrlong	result2, fp
1ccc0     04 4E 05 F1 | 	add	fp, #4
1ccc4     A7 26 62 FC | 	wrlong	local01, fp
1ccc8     08 4E 85 F1 | 	sub	fp, #8
1cccc     A7 12 02 F6 | 	mov	arg01, fp
1ccd0     0C 4E 85 F1 | 	sub	fp, #12
1ccd4     14 0C BF FD | 	call	#_converttoint
1ccd8     FD 26 02 F6 | 	mov	local01, result1
1ccdc     A7 12 02 F6 | 	mov	arg01, fp
1cce0     08 0C BF FD | 	call	#_converttoint
1cce4     13 FB 11 FC | 	wxpin	result1, local01
1cce8     A7 F0 03 F6 | 	mov	ptra, fp
1ccec     B2 00 A0 FD | 	call	#popregs_
1ccf0                 | _do_wxpin_ret
1ccf0     2D 00 64 FD | 	ret
1ccf4                 | 
1ccf4                 | ' 
1ccf4                 | ' ' ------------------ wypin
1ccf4                 | ' 
1ccf4                 | ' sub do_wypin
1ccf4                 | _do_wypin
1ccf4     01 4A 05 F6 | 	mov	COUNT_, #1
1ccf8     A8 00 A0 FD | 	call	#pushregs_
1ccfc     18 F0 07 F1 | 	add	ptra, #24
1cd00     04 0A BF FD | 	call	#_pop
1cd04     FD 14 02 F6 | 	mov	arg02, result1
1cd08     FE 12 02 F6 | 	mov	arg01, result2
1cd0c     FF 26 02 F6 | 	mov	local01, result3
1cd10     A7 14 62 FC | 	wrlong	arg02, fp
1cd14     04 4E 05 F1 | 	add	fp, #4
1cd18     A7 12 62 FC | 	wrlong	arg01, fp
1cd1c     04 4E 05 F1 | 	add	fp, #4
1cd20     A7 26 62 FC | 	wrlong	local01, fp
1cd24     08 4E 85 F1 | 	sub	fp, #8
1cd28     DC 09 BF FD | 	call	#_pop
1cd2c     FF 26 02 F6 | 	mov	local01, result3
1cd30     0C 4E 05 F1 | 	add	fp, #12
1cd34     A7 FA 61 FC | 	wrlong	result1, fp
1cd38     04 4E 05 F1 | 	add	fp, #4
1cd3c     A7 FC 61 FC | 	wrlong	result2, fp
1cd40     04 4E 05 F1 | 	add	fp, #4
1cd44     A7 26 62 FC | 	wrlong	local01, fp
1cd48     08 4E 85 F1 | 	sub	fp, #8
1cd4c     A7 12 02 F6 | 	mov	arg01, fp
1cd50     0C 4E 85 F1 | 	sub	fp, #12
1cd54     94 0B BF FD | 	call	#_converttoint
1cd58     FD 26 02 F6 | 	mov	local01, result1
1cd5c     A7 12 02 F6 | 	mov	arg01, fp
1cd60     88 0B BF FD | 	call	#_converttoint
1cd64     13 FB 21 FC | 	wypin	result1, local01
1cd68     A7 F0 03 F6 | 	mov	ptra, fp
1cd6c     B2 00 A0 FD | 	call	#popregs_
1cd70                 | _do_wypin_ret
1cd70     2D 00 64 FD | 	ret
1cd74                 | 
1cd74                 | ' 
1cd74                 | ' 
1cd74                 | ' 
1cd74                 | ' 
1cd74                 | ' 
1cd74                 | ' 
1cd74                 | ' 
1cd74                 | ' 
1cd74                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cd74                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1cd74                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cd74                 | ' 
1cd74                 | ' 
1cd74                 | ' '------------------ Assign
1cd74                 | ' 
1cd74                 | ' sub do_assign
1cd74                 | _do_assign
1cd74     05 4A 05 F6 | 	mov	COUNT_, #5
1cd78     A8 00 A0 FD | 	call	#pushregs_
1cd7c     44 F0 07 F1 | 	add	ptra, #68
1cd80     4A 00 00 FF 
1cd84     80 E4 05 F1 | 	add	objptr, ##38016
1cd88     F2 16 02 FB | 	rdlong	arg03, objptr
1cd8c     0B 15 02 F6 | 	mov	arg02, arg03
1cd90     01 14 66 F0 | 	shl	arg02, #1
1cd94     0B 15 02 F1 | 	add	arg02, arg03
1cd98     02 14 66 F0 | 	shl	arg02, #2
1cd9c     03 00 00 FF 
1cda0     04 E4 85 F1 | 	sub	objptr, ##1540
1cda4     F2 14 02 F1 | 	add	arg02, objptr
1cda8     0A 15 02 FB | 	rdlong	arg02, arg02
1cdac     18 4E 05 F1 | 	add	fp, #24
1cdb0     A7 14 62 FC | 	wrlong	arg02, fp
1cdb4                 | ' 
1cdb4                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1cdb4                 | ' if variables(varnum).vartype<array_no_type then 
1cdb4     18 4E 85 F1 | 	sub	fp, #24
1cdb8     04 14 66 F0 | 	shl	arg02, #4
1cdbc     32 00 00 FF 
1cdc0     84 E4 85 F1 | 	sub	objptr, ##25732
1cdc4     F2 14 02 F1 | 	add	arg02, objptr
1cdc8     0C 14 06 F1 | 	add	arg02, #12
1cdcc     0A 17 02 FB | 	rdlong	arg03, arg02
1cdd0     00 17 16 F2 | 	cmp	arg03, #256 wc
1cdd4     14 00 00 FF 
1cdd8     F8 E5 85 F1 | 	sub	objptr, ##10744
1cddc     18 01 90 3D |  if_ae	jmp	#LR__2290
1cde0     24 09 BF FD | 	call	#_pop
1cde4     A7 FA 61 FC | 	wrlong	result1, fp
1cde8     04 4E 05 F1 | 	add	fp, #4
1cdec     A7 FC 61 FC | 	wrlong	result2, fp
1cdf0     04 4E 05 F1 | 	add	fp, #4
1cdf4     A7 FE 61 FC | 	wrlong	result3, fp
1cdf8     08 4E 85 F1 | 	sub	fp, #8
1cdfc     A7 16 02 FB | 	rdlong	arg03, fp
1ce00     04 4E 05 F1 | 	add	fp, #4
1ce04     A7 14 02 FB | 	rdlong	arg02, fp
1ce08     14 4E 05 F1 | 	add	fp, #20
1ce0c     A7 12 02 FB | 	rdlong	arg01, fp
1ce10     04 12 66 F0 | 	shl	arg01, #4
1ce14     14 00 00 FF 
1ce18     F8 E5 05 F1 | 	add	objptr, ##10744
1ce1c     F2 12 02 F1 | 	add	arg01, objptr
1ce20     04 12 06 F1 | 	add	arg01, #4
1ce24     09 17 62 FC | 	wrlong	arg03, arg01
1ce28     A7 16 02 FB | 	rdlong	arg03, fp
1ce2c     04 16 66 F0 | 	shl	arg03, #4
1ce30     F2 16 02 F1 | 	add	arg03, objptr
1ce34     08 16 06 F1 | 	add	arg03, #8
1ce38     0B 15 62 FC | 	wrlong	arg02, arg03
1ce3c     A7 16 02 FB | 	rdlong	arg03, fp
1ce40     04 16 66 F0 | 	shl	arg03, #4
1ce44     F2 16 02 F1 | 	add	arg03, objptr
1ce48     10 4E 85 F1 | 	sub	fp, #16
1ce4c     A7 14 02 FB | 	rdlong	arg02, fp
1ce50     0C 16 06 F1 | 	add	arg03, #12
1ce54     0B 15 62 FC | 	wrlong	arg02, arg03
1ce58                 | '   t1=pop() 
1ce58                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1ce58                 | '   if variables(varnum).vartype<>result_string2 then return
1ce58     10 4E 05 F1 | 	add	fp, #16
1ce5c     A7 16 02 FB | 	rdlong	arg03, fp
1ce60     18 4E 85 F1 | 	sub	fp, #24
1ce64     04 16 66 F0 | 	shl	arg03, #4
1ce68     F2 16 02 F1 | 	add	arg03, objptr
1ce6c     0C 16 06 F1 | 	add	arg03, #12
1ce70     0B 17 02 FB | 	rdlong	arg03, arg03
1ce74     2B 16 0E F2 | 	cmp	arg03, #43 wz
1ce78     14 00 00 FF 
1ce7c     F8 E5 85 F1 | 	sub	objptr, ##10744
1ce80     EC 04 90 5D |  if_ne	jmp	#LR__2313
1ce84     18 4E 05 F1 | 	add	fp, #24
1ce88     A7 16 02 FB | 	rdlong	arg03, fp
1ce8c     0B 27 02 F6 | 	mov	local01, arg03
1ce90     04 26 66 F0 | 	shl	local01, #4
1ce94     14 00 00 FF 
1ce98     F8 E5 05 F1 | 	add	objptr, ##10744
1ce9c     F2 26 02 F1 | 	add	local01, objptr
1cea0     18 4E 85 F1 | 	sub	fp, #24
1cea4     04 16 66 F0 | 	shl	arg03, #4
1cea8     F2 16 02 F1 | 	add	arg03, objptr
1ceac     04 16 06 F1 | 	add	arg03, #4
1ceb0     0B 13 02 FB | 	rdlong	arg01, arg03
1ceb4     14 00 00 FF 
1ceb8     F8 E5 85 F1 | 	sub	objptr, ##10744
1cebc     C0 09 BF FD | 	call	#_convertstring
1cec0     04 26 06 F1 | 	add	local01, #4
1cec4     13 FB 61 FC | 	wrlong	result1, local01
1cec8     18 4E 05 F1 | 	add	fp, #24
1cecc     A7 26 02 FB | 	rdlong	local01, fp
1ced0     18 4E 85 F1 | 	sub	fp, #24
1ced4     04 26 66 F0 | 	shl	local01, #4
1ced8     14 00 00 FF 
1cedc     F8 E5 05 F1 | 	add	objptr, ##10744
1cee0     F2 26 02 F1 | 	add	local01, objptr
1cee4     0C 26 06 F1 | 	add	local01, #12
1cee8     13 3F 68 FC | 	wrlong	#31, local01
1ceec                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1ceec                 | '   variables(varnum).vartype=result_string
1ceec                 | '   return
1ceec     14 00 00 FF 
1cef0     F8 E5 85 F1 | 	sub	objptr, ##10744
1cef4     78 04 90 FD | 	jmp	#LR__2313
1cef8                 | LR__2290
1cef8                 | ' for i=0 to 2 : arrid(i)=0 : next i
1cef8     1C 4E 05 F1 | 	add	fp, #28
1cefc     A7 00 68 FC | 	wrlong	#0, fp
1cf00     97 16 48 FB | 	callpa	#(@LR__2292-@LR__2291)>>2,fcache_load_ptr_
1cf04                 | LR__2291
1cf04     A7 26 02 FB | 	rdlong	local01, fp
1cf08     02 26 66 F0 | 	shl	local01, #2
1cf0c     18 4E 05 F1 | 	add	fp, #24
1cf10     A7 26 02 F1 | 	add	local01, fp
1cf14     13 01 68 FC | 	wrlong	#0, local01
1cf18     18 4E 85 F1 | 	sub	fp, #24
1cf1c     A7 26 02 FB | 	rdlong	local01, fp
1cf20     01 26 06 F1 | 	add	local01, #1
1cf24     A7 26 62 FC | 	wrlong	local01, fp
1cf28     03 26 16 F2 | 	cmp	local01, #3 wc
1cf2c     D4 FF 9F CD |  if_b	jmp	#LR__2291
1cf30                 | LR__2292
1cf30     4A 00 00 FF 
1cf34     80 E4 05 F1 | 	add	objptr, ##38016
1cf38     F2 16 02 FB | 	rdlong	arg03, objptr
1cf3c     0B 27 02 F6 | 	mov	local01, arg03
1cf40     01 26 66 F0 | 	shl	local01, #1
1cf44     0B 27 02 F1 | 	add	local01, arg03
1cf48     02 26 66 F0 | 	shl	local01, #2
1cf4c     03 00 00 FF 
1cf50     04 E4 85 F1 | 	sub	objptr, ##1540
1cf54     F2 26 02 F1 | 	add	local01, objptr
1cf58     04 26 06 F1 | 	add	local01, #4
1cf5c     13 29 02 FB | 	rdlong	local02, local01
1cf60     04 4E 05 F1 | 	add	fp, #4
1cf64     A7 28 62 FC | 	wrlong	local02, fp
1cf68     20 4E 85 F1 | 	sub	fp, #32
1cf6c     47 00 00 FF 
1cf70     7C E4 85 F1 | 	sub	objptr, ##36476
1cf74     90 07 BF FD | 	call	#_pop
1cf78     A7 FA 61 FC | 	wrlong	result1, fp
1cf7c     04 4E 05 F1 | 	add	fp, #4
1cf80     A7 FC 61 FC | 	wrlong	result2, fp
1cf84     04 4E 05 F1 | 	add	fp, #4
1cf88     A7 FE 61 FC | 	wrlong	result3, fp
1cf8c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1cf8c                 | ' t1=pop() ' var value
1cf8c                 | ' if numpar>0 then
1cf8c     18 4E 05 F1 | 	add	fp, #24
1cf90     A7 2A 02 FB | 	rdlong	local03, fp
1cf94     20 4E 85 F1 | 	sub	fp, #32
1cf98     01 2A 16 F2 | 	cmp	local03, #1 wc
1cf9c     78 00 90 CD |  if_b	jmp	#LR__2295
1cfa0                 | '   for i=numpar to 1 step -1
1cfa0     20 4E 05 F1 | 	add	fp, #32
1cfa4     A7 2C 0A FB | 	rdlong	local04, fp wz
1cfa8     04 4E 85 F1 | 	sub	fp, #4
1cfac     A7 2C 62 FC | 	wrlong	local04, fp
1cfb0     1C 4E 85 F1 | 	sub	fp, #28
1cfb4     60 00 90 AD |  if_e	jmp	#LR__2294
1cfb8                 | LR__2293
1cfb8     4C 07 BF FD | 	call	#_pop
1cfbc     0C 4E 05 F1 | 	add	fp, #12
1cfc0     A7 FA 61 FC | 	wrlong	result1, fp
1cfc4     04 4E 05 F1 | 	add	fp, #4
1cfc8     A7 FC 61 FC | 	wrlong	result2, fp
1cfcc     04 4E 05 F1 | 	add	fp, #4
1cfd0     A7 FE 61 FC | 	wrlong	result3, fp
1cfd4     08 4E 05 F1 | 	add	fp, #8
1cfd8     A7 2A 02 FB | 	rdlong	local03, fp
1cfdc     01 2A 86 F1 | 	sub	local03, #1
1cfe0     02 2A 66 F0 | 	shl	local03, #2
1cfe4     18 4E 05 F1 | 	add	fp, #24
1cfe8     A7 2A 02 F1 | 	add	local03, fp
1cfec     28 4E 85 F1 | 	sub	fp, #40
1cff0     A7 12 02 F6 | 	mov	arg01, fp
1cff4     0C 4E 85 F1 | 	sub	fp, #12
1cff8     F0 08 BF FD | 	call	#_converttoint
1cffc     15 FB 61 FC | 	wrlong	result1, local03
1d000     1C 4E 05 F1 | 	add	fp, #28
1d004     A7 2C 02 FB | 	rdlong	local04, fp
1d008     01 2C 8E F1 | 	sub	local04, #1 wz
1d00c     A7 2C 62 FC | 	wrlong	local04, fp
1d010     1C 4E 85 F1 | 	sub	fp, #28
1d014     A0 FF 9F 5D |  if_ne	jmp	#LR__2293
1d018                 | LR__2294
1d018                 | LR__2295
1d018     18 4E 05 F1 | 	add	fp, #24
1d01c     A7 26 02 FB | 	rdlong	local01, fp
1d020     04 26 66 F0 | 	shl	local01, #4
1d024     14 00 00 FF 
1d028     F8 E5 05 F1 | 	add	objptr, ##10744
1d02c     F2 26 02 F1 | 	add	local01, objptr
1d030     04 26 06 F1 | 	add	local01, #4
1d034     13 13 02 FB | 	rdlong	arg01, local01
1d038     0C 4E 05 F1 | 	add	fp, #12
1d03c     A7 12 62 FC | 	wrlong	arg01, fp
1d040     24 4E 85 F1 | 	sub	fp, #36
1d044     14 00 00 FF 
1d048     F8 E5 85 F1 | 	sub	objptr, ##10744
1d04c     40 68 B0 FD | 	call	#_pslpeek
1d050     FD 2C 32 F9 | 	getword	local04, result1, #0
1d054     28 4E 05 F1 | 	add	fp, #40
1d058     A7 2C 62 FC | 	wrlong	local04, fp
1d05c     04 4E 85 F1 | 	sub	fp, #4
1d060     A7 12 02 FB | 	rdlong	arg01, fp
1d064     24 4E 85 F1 | 	sub	fp, #36
1d068     02 12 06 F1 | 	add	arg01, #2
1d06c     C8 67 B0 FD | 	call	#_pspeek
1d070     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d074     2C 4E 05 F1 | 	add	fp, #44
1d078     A7 FA 61 FC | 	wrlong	result1, fp
1d07c                 | ' esize=pspeek(arrptr+2)
1d07c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1d07c     08 4E 85 F1 | 	sub	fp, #8
1d080     A7 12 02 FB | 	rdlong	arg01, fp
1d084     24 4E 85 F1 | 	sub	fp, #36
1d088     04 12 06 F1 | 	add	arg01, #4
1d08c     00 68 B0 FD | 	call	#_pslpeek
1d090     FD 2C 02 F6 | 	mov	local04, result1
1d094     34 4E 05 F1 | 	add	fp, #52
1d098     A7 26 02 FB | 	rdlong	local01, fp
1d09c     34 4E 85 F1 | 	sub	fp, #52
1d0a0     16 27 12 F2 | 	cmp	local01, local04 wc
1d0a4     54 00 90 3D |  if_ae	jmp	#LR__2296
1d0a8     24 4E 05 F1 | 	add	fp, #36
1d0ac     A7 12 02 FB | 	rdlong	arg01, fp
1d0b0     24 4E 85 F1 | 	sub	fp, #36
1d0b4     08 12 06 F1 | 	add	arg01, #8
1d0b8     D4 67 B0 FD | 	call	#_pslpeek
1d0bc     FD 26 02 F6 | 	mov	local01, result1
1d0c0     38 4E 05 F1 | 	add	fp, #56
1d0c4     A7 2C 02 FB | 	rdlong	local04, fp
1d0c8     38 4E 85 F1 | 	sub	fp, #56
1d0cc     13 2D 12 F2 | 	cmp	local04, local01 wc
1d0d0     28 00 90 3D |  if_ae	jmp	#LR__2296
1d0d4     24 4E 05 F1 | 	add	fp, #36
1d0d8     A7 12 02 FB | 	rdlong	arg01, fp
1d0dc     24 4E 85 F1 | 	sub	fp, #36
1d0e0     0C 12 06 F1 | 	add	arg01, #12
1d0e4     A8 67 B0 FD | 	call	#_pslpeek
1d0e8     3C 4E 05 F1 | 	add	fp, #60
1d0ec     A7 2C 02 FB | 	rdlong	local04, fp
1d0f0     3C 4E 85 F1 | 	sub	fp, #60
1d0f4     FD 2C 12 F2 | 	cmp	local04, result1 wc
1d0f8     10 00 90 CD |  if_b	jmp	#LR__2297
1d0fc                 | LR__2296
1d0fc     31 12 06 F6 | 	mov	arg01, #49
1d100     00 14 06 F6 | 	mov	arg02, #0
1d104     B8 64 B0 FD | 	call	#_printerror
1d108     64 02 90 FD | 	jmp	#LR__2313
1d10c                 | LR__2297
1d10c     24 4E 05 F1 | 	add	fp, #36
1d110     A7 12 02 FB | 	rdlong	arg01, fp
1d114     09 2D 02 F6 | 	mov	local04, arg01
1d118     10 2C 06 F1 | 	add	local04, #16
1d11c     24 4E 85 F1 | 	sub	fp, #36
1d120     04 12 06 F1 | 	add	arg01, #4
1d124     68 67 B0 FD | 	call	#_pslpeek
1d128     FD 26 02 F6 | 	mov	local01, result1
1d12c     38 4E 05 F1 | 	add	fp, #56
1d130     A7 28 02 FB | 	rdlong	local02, fp
1d134     14 27 02 FD | 	qmul	local01, local02
1d138     04 4E 85 F1 | 	sub	fp, #4
1d13c     A7 2A 02 FB | 	rdlong	local03, fp
1d140     10 4E 85 F1 | 	sub	fp, #16
1d144     A7 12 02 FB | 	rdlong	arg01, fp
1d148     24 4E 85 F1 | 	sub	fp, #36
1d14c     08 12 06 F1 | 	add	arg01, #8
1d150     18 28 62 FD | 	getqx	local02
1d154     14 2B 02 F1 | 	add	local03, local02
1d158     34 67 B0 FD | 	call	#_pslpeek
1d15c     FD 28 02 F6 | 	mov	local02, result1
1d160     24 4E 05 F1 | 	add	fp, #36
1d164     A7 12 02 FB | 	rdlong	arg01, fp
1d168     24 4E 85 F1 | 	sub	fp, #36
1d16c     04 12 06 F1 | 	add	arg01, #4
1d170     1C 67 B0 FD | 	call	#_pslpeek
1d174     FD 28 02 FD | 	qmul	local02, result1
1d178     3C 4E 05 F1 | 	add	fp, #60
1d17c     A7 28 02 FB | 	rdlong	local02, fp
1d180     18 26 62 FD | 	getqx	local01
1d184     14 27 02 FD | 	qmul	local01, local02
1d188     10 4E 85 F1 | 	sub	fp, #16
1d18c     A7 28 02 FB | 	rdlong	local02, fp
1d190     18 26 62 FD | 	getqx	local01
1d194     13 2B 02 F1 | 	add	local03, local01
1d198     15 29 02 FD | 	qmul	local02, local03
1d19c     04 4E 05 F1 | 	add	fp, #4
1d1a0                 | ' 
1d1a0                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1d1a0                 | ' select case arrtype
1d1a0     18 2A 62 FD | 	getqx	local03
1d1a4     15 2D 02 F1 | 	add	local04, local03
1d1a8     A7 2C 62 FC | 	wrlong	local04, fp
1d1ac     08 4E 85 F1 | 	sub	fp, #8
1d1b0     A7 2E 02 FB | 	rdlong	local05, fp
1d1b4     28 4E 85 F1 | 	sub	fp, #40
1d1b8     00 2F 86 F1 | 	sub	local05, #256
1d1bc     0C 2E 26 F3 | 	fle	local05, #12
1d1c0     30 2E 62 FD | 	jmprel	local05
1d1c4                 | LR__2298
1d1c4     30 00 90 FD | 	jmp	#LR__2299
1d1c8     58 00 90 FD | 	jmp	#LR__2300
1d1cc     6C 00 90 FD | 	jmp	#LR__2301
1d1d0     80 00 90 FD | 	jmp	#LR__2302
1d1d4     B0 00 90 FD | 	jmp	#LR__2303
1d1d8     E0 00 90 FD | 	jmp	#LR__2304
1d1dc     F4 00 90 FD | 	jmp	#LR__2305
1d1e0     08 01 90 FD | 	jmp	#LR__2306
1d1e4     1C 01 90 FD | 	jmp	#LR__2307
1d1e8     30 01 90 FD | 	jmp	#LR__2308
1d1ec     44 01 90 FD | 	jmp	#LR__2309
1d1f0     58 01 90 FD | 	jmp	#LR__2310
1d1f4     6C 01 90 FD | 	jmp	#LR__2311
1d1f8                 | LR__2299
1d1f8     A7 12 02 F6 | 	mov	arg01, fp
1d1fc     30 4E 05 F1 | 	add	fp, #48
1d200     A7 14 02 FB | 	rdlong	arg02, fp
1d204     30 4E 85 F1 | 	sub	fp, #48
1d208     0C 16 06 F6 | 	mov	arg03, #12
1d20c     0B 00 00 FF 
1d210     CC E4 05 F1 | 	add	objptr, ##5836
1d214     F8 91 B0 FD | 	call	#_psram_spin2_write
1d218     0B 00 00 FF 
1d21c     CC E4 85 F1 | 	sub	objptr, ##5836
1d220     4C 01 90 FD | 	jmp	#LR__2312
1d224                 | LR__2300
1d224     30 4E 05 F1 | 	add	fp, #48
1d228     A7 12 02 FB | 	rdlong	arg01, fp
1d22c     30 4E 85 F1 | 	sub	fp, #48
1d230     A7 14 02 FB | 	rdlong	arg02, fp
1d234     B8 65 B0 FD | 	call	#_pspoke
1d238     34 01 90 FD | 	jmp	#LR__2312
1d23c                 | LR__2301
1d23c     30 4E 05 F1 | 	add	fp, #48
1d240     A7 12 02 FB | 	rdlong	arg01, fp
1d244     30 4E 85 F1 | 	sub	fp, #48
1d248     A7 14 02 FB | 	rdlong	arg02, fp
1d24c     A0 65 B0 FD | 	call	#_pspoke
1d250     1C 01 90 FD | 	jmp	#LR__2312
1d254                 | LR__2302
1d254     30 4E 05 F1 | 	add	fp, #48
1d258     A7 12 02 FB | 	rdlong	arg01, fp
1d25c     30 4E 85 F1 | 	sub	fp, #48
1d260     A7 14 02 FB | 	rdlong	arg02, fp
1d264     88 65 B0 FD | 	call	#_pspoke
1d268     30 4E 05 F1 | 	add	fp, #48
1d26c     A7 12 02 FB | 	rdlong	arg01, fp
1d270     30 4E 85 F1 | 	sub	fp, #48
1d274     01 12 06 F1 | 	add	arg01, #1
1d278     A7 14 02 FB | 	rdlong	arg02, fp
1d27c     08 14 46 F0 | 	shr	arg02, #8
1d280     6C 65 B0 FD | 	call	#_pspoke
1d284     E8 00 90 FD | 	jmp	#LR__2312
1d288                 | LR__2303
1d288     30 4E 05 F1 | 	add	fp, #48
1d28c     A7 12 02 FB | 	rdlong	arg01, fp
1d290     30 4E 85 F1 | 	sub	fp, #48
1d294     A7 14 02 FB | 	rdlong	arg02, fp
1d298     54 65 B0 FD | 	call	#_pspoke
1d29c     30 4E 05 F1 | 	add	fp, #48
1d2a0     A7 12 02 FB | 	rdlong	arg01, fp
1d2a4     30 4E 85 F1 | 	sub	fp, #48
1d2a8     01 12 06 F1 | 	add	arg01, #1
1d2ac     A7 14 02 FB | 	rdlong	arg02, fp
1d2b0     08 14 46 F0 | 	shr	arg02, #8
1d2b4     38 65 B0 FD | 	call	#_pspoke
1d2b8     B4 00 90 FD | 	jmp	#LR__2312
1d2bc                 | LR__2304
1d2bc     30 4E 05 F1 | 	add	fp, #48
1d2c0     A7 12 02 FB | 	rdlong	arg01, fp
1d2c4     30 4E 85 F1 | 	sub	fp, #48
1d2c8     A7 14 02 FB | 	rdlong	arg02, fp
1d2cc     90 64 B0 FD | 	call	#_pslpoke
1d2d0     9C 00 90 FD | 	jmp	#LR__2312
1d2d4                 | LR__2305
1d2d4     30 4E 05 F1 | 	add	fp, #48
1d2d8     A7 12 02 FB | 	rdlong	arg01, fp
1d2dc     30 4E 85 F1 | 	sub	fp, #48
1d2e0     A7 14 02 FB | 	rdlong	arg02, fp
1d2e4     78 64 B0 FD | 	call	#_pslpoke
1d2e8     84 00 90 FD | 	jmp	#LR__2312
1d2ec                 | LR__2306
1d2ec     30 4E 05 F1 | 	add	fp, #48
1d2f0     A7 12 02 FB | 	rdlong	arg01, fp
1d2f4     30 4E 85 F1 | 	sub	fp, #48
1d2f8     A7 14 02 FB | 	rdlong	arg02, fp
1d2fc     60 64 B0 FD | 	call	#_pslpoke
1d300     6C 00 90 FD | 	jmp	#LR__2312
1d304                 | LR__2307
1d304     30 4E 05 F1 | 	add	fp, #48
1d308     A7 12 02 FB | 	rdlong	arg01, fp
1d30c     30 4E 85 F1 | 	sub	fp, #48
1d310     A7 14 02 FB | 	rdlong	arg02, fp
1d314     48 64 B0 FD | 	call	#_pslpoke
1d318     54 00 90 FD | 	jmp	#LR__2312
1d31c                 | LR__2308
1d31c     30 4E 05 F1 | 	add	fp, #48
1d320     A7 12 02 FB | 	rdlong	arg01, fp
1d324     30 4E 85 F1 | 	sub	fp, #48
1d328     A7 14 02 FB | 	rdlong	arg02, fp
1d32c     30 64 B0 FD | 	call	#_pslpoke
1d330     3C 00 90 FD | 	jmp	#LR__2312
1d334                 | LR__2309
1d334     30 4E 05 F1 | 	add	fp, #48
1d338     A7 12 02 FB | 	rdlong	arg01, fp
1d33c     30 4E 85 F1 | 	sub	fp, #48
1d340     A7 14 02 FB | 	rdlong	arg02, fp
1d344     18 64 B0 FD | 	call	#_pslpoke
1d348     24 00 90 FD | 	jmp	#LR__2312
1d34c                 | LR__2310
1d34c     30 4E 05 F1 | 	add	fp, #48
1d350     A7 12 02 FB | 	rdlong	arg01, fp
1d354     30 4E 85 F1 | 	sub	fp, #48
1d358     A7 14 02 FB | 	rdlong	arg02, fp
1d35c     00 64 B0 FD | 	call	#_pslpoke
1d360     0C 00 90 FD | 	jmp	#LR__2312
1d364                 | LR__2311
1d364     32 12 06 F6 | 	mov	arg01, #50
1d368     00 14 06 F6 | 	mov	arg02, #0
1d36c     50 62 B0 FD | 	call	#_printerror
1d370                 | LR__2312
1d370                 | LR__2313
1d370     A7 F0 03 F6 | 	mov	ptra, fp
1d374     B2 00 A0 FD | 	call	#popregs_
1d378                 | _do_assign_ret
1d378     2D 00 64 FD | 	ret
1d37c                 | 
1d37c                 | ' 
1d37c                 | ' 
1d37c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1d37c                 | ' 
1d37c                 | ' sub do_getvar
1d37c                 | _do_getvar
1d37c     04 4A 05 F6 | 	mov	COUNT_, #4
1d380     A8 00 A0 FD | 	call	#pushregs_
1d384     3C F0 07 F1 | 	add	ptra, #60
1d388                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d388     4A 00 00 FF 
1d38c     80 E4 05 F1 | 	add	objptr, ##38016
1d390     F2 26 02 FB | 	rdlong	local01, objptr
1d394     13 17 02 F6 | 	mov	arg03, local01
1d398     01 16 66 F0 | 	shl	arg03, #1
1d39c     13 17 02 F1 | 	add	arg03, local01
1d3a0     02 16 66 F0 | 	shl	arg03, #2
1d3a4     03 00 00 FF 
1d3a8     04 E4 85 F1 | 	sub	objptr, ##1540
1d3ac     F2 16 02 F1 | 	add	arg03, objptr
1d3b0     04 16 06 F1 | 	add	arg03, #4
1d3b4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1d3b8     47 00 00 FF 
1d3bc     7C E4 85 F1 | 	sub	objptr, ##36476
1d3c0     C4 00 90 5D |  if_ne	jmp	#LR__2321
1d3c4     4A 00 00 FF 
1d3c8     80 E4 05 F1 | 	add	objptr, ##38016
1d3cc     F2 26 02 FB | 	rdlong	local01, objptr
1d3d0     13 13 02 F6 | 	mov	arg01, local01
1d3d4     01 12 66 F0 | 	shl	arg01, #1
1d3d8     13 13 02 F1 | 	add	arg01, local01
1d3dc     02 12 66 F0 | 	shl	arg01, #2
1d3e0     03 00 00 FF 
1d3e4     04 E4 85 F1 | 	sub	objptr, ##1540
1d3e8     F2 12 02 F1 | 	add	arg01, objptr
1d3ec     09 27 02 FB | 	rdlong	local01, arg01
1d3f0     04 26 66 F0 | 	shl	local01, #4
1d3f4     32 00 00 FF 
1d3f8     84 E4 85 F1 | 	sub	objptr, ##25732
1d3fc     F2 26 02 F1 | 	add	local01, objptr
1d400     04 26 06 F1 | 	add	local01, #4
1d404     13 13 02 FB | 	rdlong	arg01, local01
1d408     04 26 06 F1 | 	add	local01, #4
1d40c     13 27 02 FB | 	rdlong	local01, local01
1d410     A7 12 62 FC | 	wrlong	arg01, fp
1d414     04 4E 05 F1 | 	add	fp, #4
1d418     A7 26 62 FC | 	wrlong	local01, fp
1d41c     35 00 00 FF 
1d420     88 E4 05 F1 | 	add	objptr, ##27272
1d424     F2 26 02 FB | 	rdlong	local01, objptr
1d428     13 13 02 F6 | 	mov	arg01, local01
1d42c     01 12 66 F0 | 	shl	arg01, #1
1d430     13 13 02 F1 | 	add	arg01, local01
1d434     02 12 66 F0 | 	shl	arg01, #2
1d438     03 00 00 FF 
1d43c     04 E4 85 F1 | 	sub	objptr, ##1540
1d440     F2 12 02 F1 | 	add	arg01, objptr
1d444     09 27 02 FB | 	rdlong	local01, arg01
1d448     04 26 66 F0 | 	shl	local01, #4
1d44c     32 00 00 FF 
1d450     84 E4 85 F1 | 	sub	objptr, ##25732
1d454     F2 26 02 F1 | 	add	local01, objptr
1d458     0C 26 06 F1 | 	add	local01, #12
1d45c     13 27 02 FB | 	rdlong	local01, local01
1d460     04 4E 05 F1 | 	add	fp, #4
1d464     A7 26 62 FC | 	wrlong	local01, fp
1d468                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1d468                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d468                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1d468     08 4E 85 F1 | 	sub	fp, #8
1d46c     00 27 16 F2 | 	cmp	local01, #256 wc
1d470     14 00 00 FF 
1d474     F8 E5 85 F1 | 	sub	objptr, ##10744
1d478     0C 00 90 3D |  if_ae	jmp	#LR__2320
1d47c     A7 12 02 F6 | 	mov	arg01, fp
1d480     1C 03 BF FD | 	call	#_push
1d484     A0 04 90 FD | 	jmp	#LR__2342
1d488                 | LR__2320
1d488                 | LR__2321
1d488     4A 00 00 FF 
1d48c     80 E4 05 F1 | 	add	objptr, ##38016
1d490     F2 16 02 FB | 	rdlong	arg03, objptr
1d494     0B 15 02 F6 | 	mov	arg02, arg03
1d498     01 14 66 F0 | 	shl	arg02, #1
1d49c     0B 15 02 F1 | 	add	arg02, arg03
1d4a0     02 14 66 F0 | 	shl	arg02, #2
1d4a4     03 00 00 FF 
1d4a8     04 E4 85 F1 | 	sub	objptr, ##1540
1d4ac     F2 14 02 F1 | 	add	arg02, objptr
1d4b0     0A 17 02 FB | 	rdlong	arg03, arg02
1d4b4     04 16 66 F0 | 	shl	arg03, #4
1d4b8     32 00 00 FF 
1d4bc     84 E4 85 F1 | 	sub	objptr, ##25732
1d4c0     F2 16 02 F1 | 	add	arg03, objptr
1d4c4     04 16 06 F1 | 	add	arg03, #4
1d4c8     0B 13 02 FB | 	rdlong	arg01, arg03
1d4cc     0C 4E 05 F1 | 	add	fp, #12
1d4d0     A7 12 62 FC | 	wrlong	arg01, fp
1d4d4     0C 4E 85 F1 | 	sub	fp, #12
1d4d8     14 00 00 FF 
1d4dc     F8 E5 85 F1 | 	sub	objptr, ##10744
1d4e0     AC 63 B0 FD | 	call	#_pslpeek
1d4e4     FD FA 31 F9 | 	getword	result1, result1, #0
1d4e8     10 4E 05 F1 | 	add	fp, #16
1d4ec     A7 FA 61 FC | 	wrlong	result1, fp
1d4f0     4A 00 00 FF 
1d4f4     80 E4 05 F1 | 	add	objptr, ##38016
1d4f8     F2 16 02 FB | 	rdlong	arg03, objptr
1d4fc     0B 15 02 F6 | 	mov	arg02, arg03
1d500     01 14 66 F0 | 	shl	arg02, #1
1d504     0B 15 02 F1 | 	add	arg02, arg03
1d508     02 14 66 F0 | 	shl	arg02, #2
1d50c     03 00 00 FF 
1d510     04 E4 85 F1 | 	sub	objptr, ##1540
1d514     F2 14 02 F1 | 	add	arg02, objptr
1d518     04 14 06 F1 | 	add	arg02, #4
1d51c     0A 17 02 FB | 	rdlong	arg03, arg02
1d520     04 4E 05 F1 | 	add	fp, #4
1d524     A7 16 62 FC | 	wrlong	arg03, fp
1d528     08 4E 85 F1 | 	sub	fp, #8
1d52c     A7 12 02 FB | 	rdlong	arg01, fp
1d530     0C 4E 85 F1 | 	sub	fp, #12
1d534     02 12 06 F1 | 	add	arg01, #2
1d538     47 00 00 FF 
1d53c     7C E4 85 F1 | 	sub	objptr, ##36476
1d540     F4 62 B0 FD | 	call	#_pspeek
1d544     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d548     18 4E 05 F1 | 	add	fp, #24
1d54c     A7 FA 61 FC | 	wrlong	result1, fp
1d550     0C 4E 85 F1 | 	sub	fp, #12
1d554     A7 12 02 FB | 	rdlong	arg01, fp
1d558     0C 4E 85 F1 | 	sub	fp, #12
1d55c     04 12 06 F1 | 	add	arg01, #4
1d560     2C 63 B0 FD | 	call	#_pslpeek
1d564     1C 4E 05 F1 | 	add	fp, #28
1d568     A7 FA 61 FC | 	wrlong	result1, fp
1d56c     10 4E 85 F1 | 	sub	fp, #16
1d570     A7 12 02 FB | 	rdlong	arg01, fp
1d574     0C 4E 85 F1 | 	sub	fp, #12
1d578     08 12 06 F1 | 	add	arg01, #8
1d57c     10 63 B0 FD | 	call	#_pslpeek
1d580     20 4E 05 F1 | 	add	fp, #32
1d584     A7 FA 61 FC | 	wrlong	result1, fp
1d588     14 4E 85 F1 | 	sub	fp, #20
1d58c     A7 12 02 FB | 	rdlong	arg01, fp
1d590     0C 4E 85 F1 | 	sub	fp, #12
1d594     0C 12 06 F1 | 	add	arg01, #12
1d598     F4 62 B0 FD | 	call	#_pslpeek
1d59c     24 4E 05 F1 | 	add	fp, #36
1d5a0     A7 FA 61 FC | 	wrlong	result1, fp
1d5a4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1d5a4                 | ' esize=pspeek(arrptr+2)
1d5a4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1d5a4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1d5a4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1d5a4                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1d5a4     10 4E 85 F1 | 	sub	fp, #16
1d5a8     A7 16 02 FB | 	rdlong	arg03, fp
1d5ac     14 4E 85 F1 | 	sub	fp, #20
1d5b0     03 16 16 F2 | 	cmp	arg03, #3 wc
1d5b4     38 00 90 CD |  if_b	jmp	#LR__2322
1d5b8     4C 01 BF FD | 	call	#_pop
1d5bc     FF 16 02 F6 | 	mov	arg03, result3
1d5c0     A7 FA 61 FC | 	wrlong	result1, fp
1d5c4     04 4E 05 F1 | 	add	fp, #4
1d5c8     A7 FC 61 FC | 	wrlong	result2, fp
1d5cc     04 4E 05 F1 | 	add	fp, #4
1d5d0     A7 16 62 FC | 	wrlong	arg03, fp
1d5d4     08 4E 85 F1 | 	sub	fp, #8
1d5d8     A7 12 02 F6 | 	mov	arg01, fp
1d5dc     0C 03 BF FD | 	call	#_converttoint
1d5e0     30 4E 05 F1 | 	add	fp, #48
1d5e4     A7 FA 61 FC | 	wrlong	result1, fp
1d5e8     30 4E 85 F1 | 	sub	fp, #48
1d5ec     0C 00 90 FD | 	jmp	#LR__2323
1d5f0                 | LR__2322
1d5f0     30 4E 05 F1 | 	add	fp, #48
1d5f4     A7 00 68 FC | 	wrlong	#0, fp
1d5f8     30 4E 85 F1 | 	sub	fp, #48
1d5fc                 | LR__2323
1d5fc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d5fc     14 4E 05 F1 | 	add	fp, #20
1d600     A7 16 02 FB | 	rdlong	arg03, fp
1d604     14 4E 85 F1 | 	sub	fp, #20
1d608     02 16 16 F2 | 	cmp	arg03, #2 wc
1d60c     38 00 90 CD |  if_b	jmp	#LR__2324
1d610     F4 00 BF FD | 	call	#_pop
1d614     FF 16 02 F6 | 	mov	arg03, result3
1d618     A7 FA 61 FC | 	wrlong	result1, fp
1d61c     04 4E 05 F1 | 	add	fp, #4
1d620     A7 FC 61 FC | 	wrlong	result2, fp
1d624     04 4E 05 F1 | 	add	fp, #4
1d628     A7 16 62 FC | 	wrlong	arg03, fp
1d62c     08 4E 85 F1 | 	sub	fp, #8
1d630     A7 12 02 F6 | 	mov	arg01, fp
1d634     B4 02 BF FD | 	call	#_converttoint
1d638     2C 4E 05 F1 | 	add	fp, #44
1d63c     A7 FA 61 FC | 	wrlong	result1, fp
1d640     2C 4E 85 F1 | 	sub	fp, #44
1d644     0C 00 90 FD | 	jmp	#LR__2325
1d648                 | LR__2324
1d648     2C 4E 05 F1 | 	add	fp, #44
1d64c     A7 00 68 FC | 	wrlong	#0, fp
1d650     2C 4E 85 F1 | 	sub	fp, #44
1d654                 | LR__2325
1d654                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d654     14 4E 05 F1 | 	add	fp, #20
1d658     A7 16 02 FB | 	rdlong	arg03, fp
1d65c     14 4E 85 F1 | 	sub	fp, #20
1d660     01 16 16 F2 | 	cmp	arg03, #1 wc
1d664     38 00 90 CD |  if_b	jmp	#LR__2326
1d668     9C 00 BF FD | 	call	#_pop
1d66c     FF 16 02 F6 | 	mov	arg03, result3
1d670     A7 FA 61 FC | 	wrlong	result1, fp
1d674     04 4E 05 F1 | 	add	fp, #4
1d678     A7 FC 61 FC | 	wrlong	result2, fp
1d67c     04 4E 05 F1 | 	add	fp, #4
1d680     A7 16 62 FC | 	wrlong	arg03, fp
1d684     08 4E 85 F1 | 	sub	fp, #8
1d688     A7 12 02 F6 | 	mov	arg01, fp
1d68c     5C 02 BF FD | 	call	#_converttoint
1d690     28 4E 05 F1 | 	add	fp, #40
1d694     A7 FA 61 FC | 	wrlong	result1, fp
1d698     28 4E 85 F1 | 	sub	fp, #40
1d69c     0C 00 90 FD | 	jmp	#LR__2327
1d6a0                 | LR__2326
1d6a0     28 4E 05 F1 | 	add	fp, #40
1d6a4     A7 00 68 FC | 	wrlong	#0, fp
1d6a8     28 4E 85 F1 | 	sub	fp, #40
1d6ac                 | LR__2327
1d6ac     0C 4E 05 F1 | 	add	fp, #12
1d6b0     A7 28 02 FB | 	rdlong	local02, fp
1d6b4     1C 4E 05 F1 | 	add	fp, #28
1d6b8     A7 2A 02 FB | 	rdlong	local03, fp
1d6bc     04 4E 05 F1 | 	add	fp, #4
1d6c0     A7 FC 01 FB | 	rdlong	result2, fp
1d6c4     10 4E 85 F1 | 	sub	fp, #16
1d6c8     A7 FE 01 FB | 	rdlong	result3, fp
1d6cc     FF FC 01 FD | 	qmul	result2, result3
1d6d0     10 28 06 F1 | 	add	local02, #16
1d6d4     14 4E 05 F1 | 	add	fp, #20
1d6d8     A7 FC 01 FB | 	rdlong	result2, fp
1d6dc     18 FA 61 FD | 	getqx	result1
1d6e0     FF FC 01 FD | 	qmul	result2, result3
1d6e4     FD 2A 02 F1 | 	add	local03, result1
1d6e8     10 4E 85 F1 | 	sub	fp, #16
1d6ec     A7 FE 01 FB | 	rdlong	result3, fp
1d6f0     18 FC 61 FD | 	getqx	result2
1d6f4     FF FC 01 FD | 	qmul	result2, result3
1d6f8     08 4E 85 F1 | 	sub	fp, #8
1d6fc     A7 FE 01 FB | 	rdlong	result3, fp
1d700     18 FC 61 FD | 	getqx	result2
1d704     FE 2A 02 F1 | 	add	local03, result2
1d708     FF 2A 02 FD | 	qmul	local03, result3
1d70c     1C 4E 05 F1 | 	add	fp, #28
1d710                 | ' 
1d710                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1d710                 | ' 
1d710                 | ' select case vartype
1d710     18 FC 61 FD | 	getqx	result2
1d714     FE 28 02 F1 | 	add	local02, result2
1d718     A7 28 62 FC | 	wrlong	local02, fp
1d71c     24 4E 85 F1 | 	sub	fp, #36
1d720     A7 2C 02 FB | 	rdlong	local04, fp
1d724     10 4E 85 F1 | 	sub	fp, #16
1d728     00 2D 86 F1 | 	sub	local04, #256
1d72c     0C 2C 26 F3 | 	fle	local04, #12
1d730     30 2C 62 FD | 	jmprel	local04
1d734                 | LR__2328
1d734     30 00 90 FD | 	jmp	#LR__2329
1d738     58 00 90 FD | 	jmp	#LR__2330
1d73c     8C 00 90 FD | 	jmp	#LR__2331
1d740     AC 00 90 FD | 	jmp	#LR__2332
1d744     E8 00 90 FD | 	jmp	#LR__2333
1d748     08 01 90 FD | 	jmp	#LR__2334
1d74c     24 01 90 FD | 	jmp	#LR__2335
1d750     40 01 90 FD | 	jmp	#LR__2336
1d754     50 01 90 FD | 	jmp	#LR__2337
1d758     60 01 90 FD | 	jmp	#LR__2338
1d75c     7C 01 90 FD | 	jmp	#LR__2339
1d760     8C 01 90 FD | 	jmp	#LR__2340
1d764     B8 01 90 FD | 	jmp	#LR__2341
1d768                 | LR__2329
1d768     A7 12 02 F6 | 	mov	arg01, fp
1d76c     34 4E 05 F1 | 	add	fp, #52
1d770     A7 14 02 FB | 	rdlong	arg02, fp
1d774     34 4E 85 F1 | 	sub	fp, #52
1d778     0C 16 06 F6 | 	mov	arg03, #12
1d77c     0B 00 00 FF 
1d780     CC E4 05 F1 | 	add	objptr, ##5836
1d784     EC 8B B0 FD | 	call	#_psram_spin2_read1
1d788     0B 00 00 FF 
1d78c     CC E4 85 F1 | 	sub	objptr, ##5836
1d790     8C 01 90 FD | 	jmp	#LR__2341
1d794                 | LR__2330
1d794     08 4E 05 F1 | 	add	fp, #8
1d798     A7 38 68 FC | 	wrlong	#28, fp
1d79c     2C 4E 05 F1 | 	add	fp, #44
1d7a0     A7 12 02 FB | 	rdlong	arg01, fp
1d7a4     34 4E 85 F1 | 	sub	fp, #52
1d7a8     8C 60 B0 FD | 	call	#_pspeek
1d7ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d7b0     A7 FA 61 FC | 	wrlong	result1, fp
1d7b4     80 FA 15 F2 | 	cmp	result1, #128 wc
1d7b8     00 27 66 36 |  if_ae	neg	local01, #256
1d7bc     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d7c0     15 27 42 35 |  if_ae	or	local01, local03
1d7c4     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d7c8     54 01 90 FD | 	jmp	#LR__2341
1d7cc                 | LR__2331
1d7cc     08 4E 05 F1 | 	add	fp, #8
1d7d0     A7 3A 68 FC | 	wrlong	#29, fp
1d7d4     2C 4E 05 F1 | 	add	fp, #44
1d7d8     A7 12 02 FB | 	rdlong	arg01, fp
1d7dc     34 4E 85 F1 | 	sub	fp, #52
1d7e0     54 60 B0 FD | 	call	#_pspeek
1d7e4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d7e8     A7 FA 61 FC | 	wrlong	result1, fp
1d7ec     30 01 90 FD | 	jmp	#LR__2341
1d7f0                 | LR__2332
1d7f0     08 4E 05 F1 | 	add	fp, #8
1d7f4     A7 38 68 FC | 	wrlong	#28, fp
1d7f8     2C 4E 05 F1 | 	add	fp, #44
1d7fc     A7 12 02 FB | 	rdlong	arg01, fp
1d800     34 4E 85 F1 | 	sub	fp, #52
1d804     88 60 B0 FD | 	call	#_pslpeek
1d808     FD FA 31 F9 | 	getword	result1, result1, #0
1d80c     A7 FA 61 FC | 	wrlong	result1, fp
1d810     40 00 00 FF 
1d814     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1d818     FF 7F 00 3F 
1d81c     00 27 06 36 |  if_ae	mov	local01, ##16776960
1d820     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d824     15 27 42 35 |  if_ae	or	local01, local03
1d828     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d82c     F0 00 90 FD | 	jmp	#LR__2341
1d830                 | LR__2333
1d830     08 4E 05 F1 | 	add	fp, #8
1d834     A7 3A 68 FC | 	wrlong	#29, fp
1d838     2C 4E 05 F1 | 	add	fp, #44
1d83c     A7 12 02 FB | 	rdlong	arg01, fp
1d840     34 4E 85 F1 | 	sub	fp, #52
1d844     48 60 B0 FD | 	call	#_pslpeek
1d848     FD FA 31 F9 | 	getword	result1, result1, #0
1d84c     A7 FA 61 FC | 	wrlong	result1, fp
1d850     CC 00 90 FD | 	jmp	#LR__2341
1d854                 | LR__2334
1d854     08 4E 05 F1 | 	add	fp, #8
1d858     A7 38 68 FC | 	wrlong	#28, fp
1d85c     2C 4E 05 F1 | 	add	fp, #44
1d860     A7 12 02 FB | 	rdlong	arg01, fp
1d864     34 4E 85 F1 | 	sub	fp, #52
1d868     24 60 B0 FD | 	call	#_pslpeek
1d86c     A7 FA 61 FC | 	wrlong	result1, fp
1d870     AC 00 90 FD | 	jmp	#LR__2341
1d874                 | LR__2335
1d874     08 4E 05 F1 | 	add	fp, #8
1d878     A7 3A 68 FC | 	wrlong	#29, fp
1d87c     2C 4E 05 F1 | 	add	fp, #44
1d880     A7 12 02 FB | 	rdlong	arg01, fp
1d884     34 4E 85 F1 | 	sub	fp, #52
1d888     04 60 B0 FD | 	call	#_pslpeek
1d88c     A7 FA 61 FC | 	wrlong	result1, fp
1d890     8C 00 90 FD | 	jmp	#LR__2341
1d894                 | LR__2336
1d894     08 4E 05 F1 | 	add	fp, #8
1d898     A7 FE 69 FC | 	wrlong	#255, fp
1d89c     08 4E 85 F1 | 	sub	fp, #8
1d8a0     A7 60 68 FC | 	wrlong	#48, fp
1d8a4     78 00 90 FD | 	jmp	#LR__2341
1d8a8                 | LR__2337
1d8a8     08 4E 05 F1 | 	add	fp, #8
1d8ac     A7 FE 69 FC | 	wrlong	#255, fp
1d8b0     08 4E 85 F1 | 	sub	fp, #8
1d8b4     A7 60 68 FC | 	wrlong	#48, fp
1d8b8     64 00 90 FD | 	jmp	#LR__2341
1d8bc                 | LR__2338
1d8bc     08 4E 05 F1 | 	add	fp, #8
1d8c0     A7 3C 68 FC | 	wrlong	#30, fp
1d8c4     2C 4E 05 F1 | 	add	fp, #44
1d8c8     A7 12 02 FB | 	rdlong	arg01, fp
1d8cc     34 4E 85 F1 | 	sub	fp, #52
1d8d0     BC 5F B0 FD | 	call	#_pslpeek
1d8d4     A7 FA 61 FC | 	wrlong	result1, fp
1d8d8     44 00 90 FD | 	jmp	#LR__2341
1d8dc                 | LR__2339
1d8dc     08 4E 05 F1 | 	add	fp, #8
1d8e0     A7 FE 69 FC | 	wrlong	#255, fp
1d8e4     08 4E 85 F1 | 	sub	fp, #8
1d8e8     A7 60 68 FC | 	wrlong	#48, fp
1d8ec     30 00 90 FD | 	jmp	#LR__2341
1d8f0                 | LR__2340
1d8f0     08 4E 05 F1 | 	add	fp, #8
1d8f4     A7 3E 68 FC | 	wrlong	#31, fp
1d8f8     2C 4E 05 F1 | 	add	fp, #44
1d8fc     A7 12 02 FB | 	rdlong	arg01, fp
1d900     34 4E 85 F1 | 	sub	fp, #52
1d904     88 5F B0 FD | 	call	#_pslpeek
1d908     A7 FA 61 FC | 	wrlong	result1, fp
1d90c     00 04 00 FF 
1d910     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1d914     08 4E 05 31 |  if_ae	add	fp, #8
1d918     A7 56 68 3C |  if_ae	wrlong	#43, fp
1d91c     08 4E 85 31 |  if_ae	sub	fp, #8
1d920                 | LR__2341
1d920     A7 12 02 F6 | 	mov	arg01, fp
1d924     78 FE BE FD | 	call	#_push
1d928                 | LR__2342
1d928     A7 F0 03 F6 | 	mov	ptra, fp
1d92c     B2 00 A0 FD | 	call	#popregs_
1d930                 | _do_getvar_ret
1d930     2D 00 64 FD | 	ret
1d934                 | 
1d934                 | ' 
1d934                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1d934                 | ' 
1d934                 | ' sub do_getaddr
1d934                 | _do_getaddr
1d934     01 4A 05 F6 | 	mov	COUNT_, #1
1d938     A8 00 A0 FD | 	call	#pushregs_
1d93c     38 F0 07 F1 | 	add	ptra, #56
1d940                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1d940                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d940     4A 00 00 FF 
1d944     80 E4 05 F1 | 	add	objptr, ##38016
1d948     F2 12 02 FB | 	rdlong	arg01, objptr
1d94c     09 FD 01 F6 | 	mov	result2, arg01
1d950     01 FC 65 F0 | 	shl	result2, #1
1d954     09 FD 01 F1 | 	add	result2, arg01
1d958     02 FC 65 F0 | 	shl	result2, #2
1d95c     03 00 00 FF 
1d960     04 E4 85 F1 | 	sub	objptr, ##1540
1d964     F2 FC 01 F1 | 	add	result2, objptr
1d968     04 FC 05 F1 | 	add	result2, #4
1d96c     FE FC 09 FB | 	rdlong	result2, result2 wz
1d970     47 00 00 FF 
1d974     7C E4 85 F1 | 	sub	objptr, ##36476
1d978     10 01 90 5D |  if_ne	jmp	#LR__2350
1d97c     4A 00 00 FF 
1d980     80 E4 05 F1 | 	add	objptr, ##38016
1d984     F2 12 02 FB | 	rdlong	arg01, objptr
1d988     09 FD 01 F6 | 	mov	result2, arg01
1d98c     01 FC 65 F0 | 	shl	result2, #1
1d990     09 FD 01 F1 | 	add	result2, arg01
1d994     02 FC 65 F0 | 	shl	result2, #2
1d998     03 00 00 FF 
1d99c     04 E4 85 F1 | 	sub	objptr, ##1540
1d9a0     F2 FC 01 F1 | 	add	result2, objptr
1d9a4     FE 12 02 FB | 	rdlong	arg01, result2
1d9a8     04 12 66 F0 | 	shl	arg01, #4
1d9ac     32 00 00 FF 
1d9b0     84 E4 85 F1 | 	sub	objptr, ##25732
1d9b4     F2 12 02 F1 | 	add	arg01, objptr
1d9b8     0C 12 06 F1 | 	add	arg01, #12
1d9bc     09 13 02 FB | 	rdlong	arg01, arg01
1d9c0     08 4E 05 F1 | 	add	fp, #8
1d9c4     A7 12 62 FC | 	wrlong	arg01, fp
1d9c8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d9c8                 | '    if t1.result_type>=array_no_type then goto 2200
1d9c8     08 4E 85 F1 | 	sub	fp, #8
1d9cc     00 13 16 F2 | 	cmp	arg01, #256 wc
1d9d0     14 00 00 FF 
1d9d4     F8 E5 85 F1 | 	sub	objptr, ##10744
1d9d8     B0 00 90 3D |  if_ae	jmp	#LR__2351
1d9dc     4A 00 00 FF 
1d9e0     80 E4 05 F1 | 	add	objptr, ##38016
1d9e4     F2 12 02 FB | 	rdlong	arg01, objptr
1d9e8     09 FF 01 F6 | 	mov	result3, arg01
1d9ec     01 FE 65 F0 | 	shl	result3, #1
1d9f0     09 FF 01 F1 | 	add	result3, arg01
1d9f4     02 FE 65 F0 | 	shl	result3, #2
1d9f8     03 00 00 FF 
1d9fc     04 E4 85 F1 | 	sub	objptr, ##1540
1da00     F2 FE 01 F1 | 	add	result3, objptr
1da04     FF FA 01 FB | 	rdlong	result1, result3
1da08     04 FA 65 F0 | 	shl	result1, #4
1da0c     32 00 00 FF 
1da10     84 E4 85 F1 | 	sub	objptr, ##25732
1da14     F2 FA 01 F1 | 	add	result1, objptr
1da18     04 FA 05 F1 | 	add	result1, #4
1da1c     A7 FA 61 FC | 	wrlong	result1, fp
1da20     35 00 00 FF 
1da24     88 E4 05 F1 | 	add	objptr, ##27272
1da28     F2 FE 01 FB | 	rdlong	result3, objptr
1da2c     FF 12 02 F6 | 	mov	arg01, result3
1da30     01 12 66 F0 | 	shl	arg01, #1
1da34     FF 12 02 F1 | 	add	arg01, result3
1da38     02 12 66 F0 | 	shl	arg01, #2
1da3c     03 00 00 FF 
1da40     04 E4 85 F1 | 	sub	objptr, ##1540
1da44     F2 12 02 F1 | 	add	arg01, objptr
1da48     09 13 02 FB | 	rdlong	arg01, arg01
1da4c     04 12 66 F0 | 	shl	arg01, #4
1da50     32 00 00 FF 
1da54     84 E4 85 F1 | 	sub	objptr, ##25732
1da58     F2 12 02 F1 | 	add	arg01, objptr
1da5c     0C 12 06 F1 | 	add	arg01, #12
1da60     09 13 02 FB | 	rdlong	arg01, arg01
1da64     04 4E 05 F1 | 	add	fp, #4
1da68     A7 12 62 FC | 	wrlong	arg01, fp
1da6c     04 4E 05 F1 | 	add	fp, #4
1da70     A7 3A 68 FC | 	wrlong	#29, fp
1da74     08 4E 85 F1 | 	sub	fp, #8
1da78     A7 12 02 F6 | 	mov	arg01, fp
1da7c     14 00 00 FF 
1da80     F8 E5 85 F1 | 	sub	objptr, ##10744
1da84     18 FD BE FD | 	call	#_push
1da88                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1da88                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1da88                 | '   t1.result_type=result_uint
1da88                 | '   push t1 : return
1da88     2C 03 90 FD | 	jmp	#LR__2360
1da8c                 | LR__2350
1da8c                 | LR__2351
1da8c     4A 00 00 FF 
1da90     80 E4 05 F1 | 	add	objptr, ##38016
1da94     F2 FE 01 FB | 	rdlong	result3, objptr
1da98     FF FC 01 F6 | 	mov	result2, result3
1da9c     01 FC 65 F0 | 	shl	result2, #1
1daa0     FF FC 01 F1 | 	add	result2, result3
1daa4     02 FC 65 F0 | 	shl	result2, #2
1daa8     03 00 00 FF 
1daac     04 E4 85 F1 | 	sub	objptr, ##1540
1dab0     F2 FC 01 F1 | 	add	result2, objptr
1dab4     FE FE 01 FB | 	rdlong	result3, result2
1dab8     04 FE 65 F0 | 	shl	result3, #4
1dabc     32 00 00 FF 
1dac0     84 E4 85 F1 | 	sub	objptr, ##25732
1dac4     F2 FE 01 F1 | 	add	result3, objptr
1dac8     04 FE 05 F1 | 	add	result3, #4
1dacc     FF FE 01 FB | 	rdlong	result3, result3
1dad0     0C 4E 05 F1 | 	add	fp, #12
1dad4     A7 FE 61 FC | 	wrlong	result3, fp
1dad8     35 00 00 FF 
1dadc     88 E4 05 F1 | 	add	objptr, ##27272
1dae0     F2 FE 01 FB | 	rdlong	result3, objptr
1dae4     FF 12 02 F6 | 	mov	arg01, result3
1dae8     01 12 66 F0 | 	shl	arg01, #1
1daec     FF 12 02 F1 | 	add	arg01, result3
1daf0     02 12 66 F0 | 	shl	arg01, #2
1daf4     03 00 00 FF 
1daf8     04 E4 85 F1 | 	sub	objptr, ##1540
1dafc     F2 12 02 F1 | 	add	arg01, objptr
1db00     09 13 02 FB | 	rdlong	arg01, arg01
1db04     04 12 66 F0 | 	shl	arg01, #4
1db08     32 00 00 FF 
1db0c     84 E4 85 F1 | 	sub	objptr, ##25732
1db10     F2 12 02 F1 | 	add	arg01, objptr
1db14     0C 12 06 F1 | 	add	arg01, #12
1db18     09 13 02 FB | 	rdlong	arg01, arg01
1db1c     08 4E 85 F1 | 	sub	fp, #8
1db20     A7 12 62 FC | 	wrlong	arg01, fp
1db24     08 4E 05 F1 | 	add	fp, #8
1db28     A7 12 02 FB | 	rdlong	arg01, fp
1db2c     0C 4E 85 F1 | 	sub	fp, #12
1db30     14 00 00 FF 
1db34     F8 E5 85 F1 | 	sub	objptr, ##10744
1db38     54 5D B0 FD | 	call	#_pslpeek
1db3c     FD FA 31 F9 | 	getword	result1, result1, #0
1db40     10 4E 05 F1 | 	add	fp, #16
1db44     A7 FA 61 FC | 	wrlong	result1, fp
1db48     4A 00 00 FF 
1db4c     80 E4 05 F1 | 	add	objptr, ##38016
1db50     F2 FE 01 FB | 	rdlong	result3, objptr
1db54     FF 12 02 F6 | 	mov	arg01, result3
1db58     01 12 66 F0 | 	shl	arg01, #1
1db5c     FF 12 02 F1 | 	add	arg01, result3
1db60     02 12 66 F0 | 	shl	arg01, #2
1db64     03 00 00 FF 
1db68     04 E4 85 F1 | 	sub	objptr, ##1540
1db6c     F2 12 02 F1 | 	add	arg01, objptr
1db70     04 12 06 F1 | 	add	arg01, #4
1db74     09 13 02 FB | 	rdlong	arg01, arg01
1db78     04 4E 05 F1 | 	add	fp, #4
1db7c     A7 12 62 FC | 	wrlong	arg01, fp
1db80     08 4E 85 F1 | 	sub	fp, #8
1db84     A7 12 02 FB | 	rdlong	arg01, fp
1db88     0C 4E 85 F1 | 	sub	fp, #12
1db8c     02 12 06 F1 | 	add	arg01, #2
1db90     47 00 00 FF 
1db94     7C E4 85 F1 | 	sub	objptr, ##36476
1db98     9C 5C B0 FD | 	call	#_pspeek
1db9c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dba0     18 4E 05 F1 | 	add	fp, #24
1dba4     A7 FA 61 FC | 	wrlong	result1, fp
1dba8     0C 4E 85 F1 | 	sub	fp, #12
1dbac     A7 12 02 FB | 	rdlong	arg01, fp
1dbb0     0C 4E 85 F1 | 	sub	fp, #12
1dbb4     04 12 06 F1 | 	add	arg01, #4
1dbb8     D4 5C B0 FD | 	call	#_pslpeek
1dbbc     1C 4E 05 F1 | 	add	fp, #28
1dbc0     A7 FA 61 FC | 	wrlong	result1, fp
1dbc4     10 4E 85 F1 | 	sub	fp, #16
1dbc8     A7 12 02 FB | 	rdlong	arg01, fp
1dbcc     0C 4E 85 F1 | 	sub	fp, #12
1dbd0     08 12 06 F1 | 	add	arg01, #8
1dbd4     B8 5C B0 FD | 	call	#_pslpeek
1dbd8     20 4E 05 F1 | 	add	fp, #32
1dbdc     A7 FA 61 FC | 	wrlong	result1, fp
1dbe0     14 4E 85 F1 | 	sub	fp, #20
1dbe4     A7 12 02 FB | 	rdlong	arg01, fp
1dbe8     0C 4E 85 F1 | 	sub	fp, #12
1dbec     0C 12 06 F1 | 	add	arg01, #12
1dbf0     9C 5C B0 FD | 	call	#_pslpeek
1dbf4     24 4E 05 F1 | 	add	fp, #36
1dbf8     A7 FA 61 FC | 	wrlong	result1, fp
1dbfc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1dbfc                 | ' esize=pspeek(arrptr+2)
1dbfc                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1dbfc                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1dbfc                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1dbfc                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1dbfc     10 4E 85 F1 | 	sub	fp, #16
1dc00     A7 12 02 FB | 	rdlong	arg01, fp
1dc04     14 4E 85 F1 | 	sub	fp, #20
1dc08     03 12 16 F2 | 	cmp	arg01, #3 wc
1dc0c     34 00 90 CD |  if_b	jmp	#LR__2352
1dc10     F4 FA BE FD | 	call	#_pop
1dc14     A7 FA 61 FC | 	wrlong	result1, fp
1dc18     04 4E 05 F1 | 	add	fp, #4
1dc1c     A7 FC 61 FC | 	wrlong	result2, fp
1dc20     04 4E 05 F1 | 	add	fp, #4
1dc24     A7 FE 61 FC | 	wrlong	result3, fp
1dc28     08 4E 85 F1 | 	sub	fp, #8
1dc2c     A7 12 02 F6 | 	mov	arg01, fp
1dc30     B8 FC BE FD | 	call	#_converttoint
1dc34     30 4E 05 F1 | 	add	fp, #48
1dc38     A7 FA 61 FC | 	wrlong	result1, fp
1dc3c     30 4E 85 F1 | 	sub	fp, #48
1dc40     0C 00 90 FD | 	jmp	#LR__2353
1dc44                 | LR__2352
1dc44     30 4E 05 F1 | 	add	fp, #48
1dc48     A7 00 68 FC | 	wrlong	#0, fp
1dc4c     30 4E 85 F1 | 	sub	fp, #48
1dc50                 | LR__2353
1dc50                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1dc50     14 4E 05 F1 | 	add	fp, #20
1dc54     A7 12 02 FB | 	rdlong	arg01, fp
1dc58     14 4E 85 F1 | 	sub	fp, #20
1dc5c     02 12 16 F2 | 	cmp	arg01, #2 wc
1dc60     34 00 90 CD |  if_b	jmp	#LR__2354
1dc64     A0 FA BE FD | 	call	#_pop
1dc68     A7 FA 61 FC | 	wrlong	result1, fp
1dc6c     04 4E 05 F1 | 	add	fp, #4
1dc70     A7 FC 61 FC | 	wrlong	result2, fp
1dc74     04 4E 05 F1 | 	add	fp, #4
1dc78     A7 FE 61 FC | 	wrlong	result3, fp
1dc7c     08 4E 85 F1 | 	sub	fp, #8
1dc80     A7 12 02 F6 | 	mov	arg01, fp
1dc84     64 FC BE FD | 	call	#_converttoint
1dc88     2C 4E 05 F1 | 	add	fp, #44
1dc8c     A7 FA 61 FC | 	wrlong	result1, fp
1dc90     2C 4E 85 F1 | 	sub	fp, #44
1dc94     0C 00 90 FD | 	jmp	#LR__2355
1dc98                 | LR__2354
1dc98     2C 4E 05 F1 | 	add	fp, #44
1dc9c     A7 00 68 FC | 	wrlong	#0, fp
1dca0     2C 4E 85 F1 | 	sub	fp, #44
1dca4                 | LR__2355
1dca4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1dca4     14 4E 05 F1 | 	add	fp, #20
1dca8     A7 12 02 FB | 	rdlong	arg01, fp
1dcac     14 4E 85 F1 | 	sub	fp, #20
1dcb0     01 12 16 F2 | 	cmp	arg01, #1 wc
1dcb4     34 00 90 CD |  if_b	jmp	#LR__2356
1dcb8     4C FA BE FD | 	call	#_pop
1dcbc     A7 FA 61 FC | 	wrlong	result1, fp
1dcc0     04 4E 05 F1 | 	add	fp, #4
1dcc4     A7 FC 61 FC | 	wrlong	result2, fp
1dcc8     04 4E 05 F1 | 	add	fp, #4
1dccc     A7 FE 61 FC | 	wrlong	result3, fp
1dcd0     08 4E 85 F1 | 	sub	fp, #8
1dcd4     A7 12 02 F6 | 	mov	arg01, fp
1dcd8     10 FC BE FD | 	call	#_converttoint
1dcdc     28 4E 05 F1 | 	add	fp, #40
1dce0     A7 FA 61 FC | 	wrlong	result1, fp
1dce4     28 4E 85 F1 | 	sub	fp, #40
1dce8     0C 00 90 FD | 	jmp	#LR__2357
1dcec                 | LR__2356
1dcec     28 4E 05 F1 | 	add	fp, #40
1dcf0     A7 00 68 FC | 	wrlong	#0, fp
1dcf4     28 4E 85 F1 | 	sub	fp, #40
1dcf8                 | LR__2357
1dcf8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1dcf8                 | ' if numpar>0 then
1dcf8     14 4E 05 F1 | 	add	fp, #20
1dcfc     A7 FE 01 FB | 	rdlong	result3, fp
1dd00     14 4E 85 F1 | 	sub	fp, #20
1dd04     01 FE 15 F2 | 	cmp	result3, #1 wc
1dd08     8C 00 90 CD |  if_b	jmp	#LR__2358
1dd0c     0C 4E 05 F1 | 	add	fp, #12
1dd10     A7 FC 01 FB | 	rdlong	result2, fp
1dd14     1C 4E 05 F1 | 	add	fp, #28
1dd18     A7 FE 01 FB | 	rdlong	result3, fp
1dd1c     04 4E 05 F1 | 	add	fp, #4
1dd20     A7 12 02 FB | 	rdlong	arg01, fp
1dd24     10 4E 85 F1 | 	sub	fp, #16
1dd28     A7 FA 01 FB | 	rdlong	result1, fp
1dd2c     FD 12 02 FD | 	qmul	arg01, result1
1dd30     10 FC 05 F1 | 	add	result2, #16
1dd34     14 4E 05 F1 | 	add	fp, #20
1dd38     A7 26 02 FB | 	rdlong	local01, fp
1dd3c     18 12 62 FD | 	getqx	arg01
1dd40     FD 26 02 FD | 	qmul	local01, result1
1dd44     09 FF 01 F1 | 	add	result3, arg01
1dd48     10 4E 85 F1 | 	sub	fp, #16
1dd4c     A7 26 02 FB | 	rdlong	local01, fp
1dd50     18 FA 61 FD | 	getqx	result1
1dd54     13 FB 01 FD | 	qmul	result1, local01
1dd58     08 4E 85 F1 | 	sub	fp, #8
1dd5c     A7 26 02 FB | 	rdlong	local01, fp
1dd60     18 FA 61 FD | 	getqx	result1
1dd64     FD FE 01 F1 | 	add	result3, result1
1dd68     13 FF 01 FD | 	qmul	result3, local01
1dd6c     1C 4E 05 F1 | 	add	fp, #28
1dd70     18 26 62 FD | 	getqx	local01
1dd74     13 FD 01 F1 | 	add	result2, local01
1dd78     A7 FC 61 FC | 	wrlong	result2, fp
1dd7c     2C 4E 85 F1 | 	sub	fp, #44
1dd80     A7 3A 68 FC | 	wrlong	#29, fp
1dd84     2C 4E 05 F1 | 	add	fp, #44
1dd88     A7 26 02 FB | 	rdlong	local01, fp
1dd8c     34 4E 85 F1 | 	sub	fp, #52
1dd90     A7 26 62 FC | 	wrlong	local01, fp
1dd94     18 00 90 FD | 	jmp	#LR__2359
1dd98                 | LR__2358
1dd98     08 4E 05 F1 | 	add	fp, #8
1dd9c     A7 3A 68 FC | 	wrlong	#29, fp
1dda0     04 4E 05 F1 | 	add	fp, #4
1dda4     A7 26 02 FB | 	rdlong	local01, fp
1dda8     0C 4E 85 F1 | 	sub	fp, #12
1ddac     A7 26 62 FC | 	wrlong	local01, fp
1ddb0                 | LR__2359
1ddb0     A7 12 02 F6 | 	mov	arg01, fp
1ddb4     E8 F9 BE FD | 	call	#_push
1ddb8                 | LR__2360
1ddb8     A7 F0 03 F6 | 	mov	ptra, fp
1ddbc     B2 00 A0 FD | 	call	#popregs_
1ddc0                 | _do_getaddr_ret
1ddc0     2D 00 64 FD | 	ret
1ddc4                 | 
1ddc4                 | ' 
1ddc4                 | ' 
1ddc4                 | ' 
1ddc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ddc4                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1ddc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ddc4                 | ' 
1ddc4                 | ' '--------------------------------- AND 
1ddc4                 | ' 
1ddc4                 | ' sub do_and 
1ddc4                 | _do_and
1ddc4     03 4A 05 F6 | 	mov	COUNT_, #3
1ddc8     A8 00 A0 FD | 	call	#pushregs_
1ddcc     18 F0 07 F1 | 	add	ptra, #24
1ddd0     34 F9 BE FD | 	call	#_pop
1ddd4     FD 12 02 F6 | 	mov	arg01, result1
1ddd8     FE 26 02 F6 | 	mov	local01, result2
1dddc     FF 28 02 F6 | 	mov	local02, result3
1dde0     0C 4E 05 F1 | 	add	fp, #12
1dde4     A7 12 62 FC | 	wrlong	arg01, fp
1dde8     04 4E 05 F1 | 	add	fp, #4
1ddec     A7 26 62 FC | 	wrlong	local01, fp
1ddf0     04 4E 05 F1 | 	add	fp, #4
1ddf4     A7 28 62 FC | 	wrlong	local02, fp
1ddf8     14 4E 85 F1 | 	sub	fp, #20
1ddfc     08 F9 BE FD | 	call	#_pop
1de00     FF 2A 02 F6 | 	mov	local03, result3
1de04     A7 FA 61 FC | 	wrlong	result1, fp
1de08     04 4E 05 F1 | 	add	fp, #4
1de0c     A7 FC 61 FC | 	wrlong	result2, fp
1de10     04 4E 05 F1 | 	add	fp, #4
1de14     A7 2A 62 FC | 	wrlong	local03, fp
1de18                 | ' 
1de18                 | ' t2=pop()
1de18                 | ' t1=pop()
1de18                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1de18     08 4E 85 F1 | 	sub	fp, #8
1de1c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1de20     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de24     A7 2A 62 AC |  if_e	wrlong	local03, fp
1de28     08 4E 05 A1 |  if_e	add	fp, #8
1de2c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1de30     08 4E 85 A1 |  if_e	sub	fp, #8
1de34                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1de34     14 4E 05 F1 | 	add	fp, #20
1de38     A7 2A 02 FB | 	rdlong	local03, fp
1de3c     14 4E 85 F1 | 	sub	fp, #20
1de40     1C 2A 0E F2 | 	cmp	local03, #28 wz
1de44     18 00 90 5D |  if_ne	jmp	#LR__2370
1de48     0C 4E 05 F1 | 	add	fp, #12
1de4c     A7 2A 02 FB | 	rdlong	local03, fp
1de50     A7 2A 62 FC | 	wrlong	local03, fp
1de54     08 4E 05 F1 | 	add	fp, #8
1de58     A7 3A 68 FC | 	wrlong	#29, fp
1de5c     14 4E 85 F1 | 	sub	fp, #20
1de60                 | LR__2370
1de60                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1de60     08 4E 05 F1 | 	add	fp, #8
1de64     A7 2A 02 FB | 	rdlong	local03, fp
1de68     08 4E 85 F1 | 	sub	fp, #8
1de6c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1de70     14 4E 05 51 |  if_ne	add	fp, #20
1de74     A7 28 02 5B |  if_ne	rdlong	local02, fp
1de78     14 4E 85 51 |  if_ne	sub	fp, #20
1de7c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1de80     08 4E 05 51 |  if_ne	add	fp, #8
1de84     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1de88     08 4E 85 51 |  if_ne	sub	fp, #8
1de8c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1de90     14 4E 05 51 |  if_ne	add	fp, #20
1de94     14 4E 85 51 |  if_ne	sub	fp, #20
1de98     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1de9c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1dea0     08 4E 05 A1 |  if_e	add	fp, #8
1dea4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1dea8     08 4E 85 A1 |  if_e	sub	fp, #8
1deac     18 00 90 AD |  if_e	jmp	#LR__2371
1deb0     A7 2A 02 FB | 	rdlong	local03, fp
1deb4     0C 4E 05 F1 | 	add	fp, #12
1deb8     A7 26 02 FB | 	rdlong	local01, fp
1debc     0C 4E 85 F1 | 	sub	fp, #12
1dec0     13 2B 02 F5 | 	and	local03, local01
1dec4     A7 2A 62 FC | 	wrlong	local03, fp
1dec8                 | LR__2371
1dec8     A7 12 02 F6 | 	mov	arg01, fp
1decc     D0 F8 BE FD | 	call	#_push
1ded0     A7 F0 03 F6 | 	mov	ptra, fp
1ded4     B2 00 A0 FD | 	call	#popregs_
1ded8                 | _do_and_ret
1ded8     2D 00 64 FD | 	ret
1dedc                 | 
1dedc                 | ' 
1dedc                 | ' '--------------------------------- DIV (integer divide)
1dedc                 | ' 
1dedc                 | ' sub do_div 
1dedc                 | _do_div
1dedc     01 4A 05 F6 | 	mov	COUNT_, #1
1dee0     A8 00 A0 FD | 	call	#pushregs_
1dee4     18 F0 07 F1 | 	add	ptra, #24
1dee8     1C F8 BE FD | 	call	#_pop
1deec     FD 92 02 F6 | 	mov	muldivb_, result1
1def0     FE 90 02 F6 | 	mov	muldiva_, result2
1def4     FF 26 02 F6 | 	mov	local01, result3
1def8     0C 4E 05 F1 | 	add	fp, #12
1defc     A7 92 62 FC | 	wrlong	muldivb_, fp
1df00     04 4E 05 F1 | 	add	fp, #4
1df04     A7 90 62 FC | 	wrlong	muldiva_, fp
1df08     04 4E 05 F1 | 	add	fp, #4
1df0c     A7 26 62 FC | 	wrlong	local01, fp
1df10     14 4E 85 F1 | 	sub	fp, #20
1df14     F0 F7 BE FD | 	call	#_pop
1df18     A7 FA 61 FC | 	wrlong	result1, fp
1df1c     04 4E 05 F1 | 	add	fp, #4
1df20     A7 FC 61 FC | 	wrlong	result2, fp
1df24     04 4E 05 F1 | 	add	fp, #4
1df28     A7 FE 61 FC | 	wrlong	result3, fp
1df2c                 | ' 
1df2c                 | ' t2=pop()
1df2c                 | ' t1=pop()
1df2c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1df2c     08 4E 85 F1 | 	sub	fp, #8
1df30     1F FE 0D F2 | 	cmp	result3, #31 wz
1df34     14 4E 05 51 |  if_ne	add	fp, #20
1df38     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1df3c     14 4E 85 51 |  if_ne	sub	fp, #20
1df40     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1df44     A7 14 68 AC |  if_e	wrlong	#10, fp
1df48     08 4E 05 A1 |  if_e	add	fp, #8
1df4c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1df50     08 4E 85 A1 |  if_e	sub	fp, #8
1df54     90 01 90 AD |  if_e	jmp	#LR__2386
1df58                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1df58     08 4E 05 F1 | 	add	fp, #8
1df5c     A7 92 02 FB | 	rdlong	muldivb_, fp
1df60     08 4E 85 F1 | 	sub	fp, #8
1df64     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1df68     1C 00 90 5D |  if_ne	jmp	#LR__2380
1df6c     08 4E 05 F1 | 	add	fp, #8
1df70     A7 38 68 FC | 	wrlong	#28, fp
1df74     08 4E 85 F1 | 	sub	fp, #8
1df78     A7 12 02 FB | 	rdlong	arg01, fp
1df7c     00 14 06 F6 | 	mov	arg02, #0
1df80     28 C4 B0 FD | 	call	#__system___float_tointeger
1df84     A7 FA 61 FC | 	wrlong	result1, fp
1df88                 | LR__2380
1df88                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1df88     14 4E 05 F1 | 	add	fp, #20
1df8c     A7 92 02 FB | 	rdlong	muldivb_, fp
1df90     14 4E 85 F1 | 	sub	fp, #20
1df94     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1df98     28 00 90 5D |  if_ne	jmp	#LR__2381
1df9c     14 4E 05 F1 | 	add	fp, #20
1dfa0     A7 38 68 FC | 	wrlong	#28, fp
1dfa4     08 4E 85 F1 | 	sub	fp, #8
1dfa8     A7 12 02 FB | 	rdlong	arg01, fp
1dfac     0C 4E 85 F1 | 	sub	fp, #12
1dfb0     00 14 06 F6 | 	mov	arg02, #0
1dfb4     F4 C3 B0 FD | 	call	#__system___float_tointeger
1dfb8     0C 4E 05 F1 | 	add	fp, #12
1dfbc     A7 FA 61 FC | 	wrlong	result1, fp
1dfc0     0C 4E 85 F1 | 	sub	fp, #12
1dfc4                 | LR__2381
1dfc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1dfc4     08 4E 05 F1 | 	add	fp, #8
1dfc8     A7 92 02 FB | 	rdlong	muldivb_, fp
1dfcc     08 4E 85 F1 | 	sub	fp, #8
1dfd0     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1dfd4     14 4E 05 A1 |  if_e	add	fp, #20
1dfd8     A7 26 02 AB |  if_e	rdlong	local01, fp
1dfdc     14 4E 85 A1 |  if_e	sub	fp, #20
1dfe0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1dfe4     20 00 90 5D |  if_ne	jmp	#LR__2382
1dfe8     0C 4E 05 F1 | 	add	fp, #12
1dfec     A7 26 02 FB | 	rdlong	local01, fp
1dff0     0C 4E 85 F1 | 	sub	fp, #12
1dff4     A7 92 02 FB | 	rdlong	muldivb_, fp
1dff8     13 93 12 FD | 	qdiv	muldivb_, local01
1dffc     18 26 62 FD | 	getqx	local01
1e000     A7 26 62 FC | 	wrlong	local01, fp
1e004     E0 00 90 FD | 	jmp	#LR__2386
1e008                 | LR__2382
1e008                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1e008     08 4E 05 F1 | 	add	fp, #8
1e00c     A7 92 02 FB | 	rdlong	muldivb_, fp
1e010     08 4E 85 F1 | 	sub	fp, #8
1e014     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1e018     14 4E 05 A1 |  if_e	add	fp, #20
1e01c     A7 26 02 AB |  if_e	rdlong	local01, fp
1e020     14 4E 85 A1 |  if_e	sub	fp, #20
1e024     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e028     2C 00 90 5D |  if_ne	jmp	#LR__2383
1e02c     0C 4E 05 F1 | 	add	fp, #12
1e030     A7 26 02 FB | 	rdlong	local01, fp
1e034     0C 4E 85 F1 | 	sub	fp, #12
1e038     A7 92 02 FB | 	rdlong	muldivb_, fp
1e03c     13 93 12 FD | 	qdiv	muldivb_, local01
1e040     18 26 62 FD | 	getqx	local01
1e044     A7 26 62 FC | 	wrlong	local01, fp
1e048     08 4E 05 F1 | 	add	fp, #8
1e04c     A7 38 68 FC | 	wrlong	#28, fp
1e050     08 4E 85 F1 | 	sub	fp, #8
1e054     90 00 90 FD | 	jmp	#LR__2386
1e058                 | LR__2383
1e058                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1e058     08 4E 05 F1 | 	add	fp, #8
1e05c     A7 92 02 FB | 	rdlong	muldivb_, fp
1e060     08 4E 85 F1 | 	sub	fp, #8
1e064     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1e068     14 4E 05 A1 |  if_e	add	fp, #20
1e06c     A7 26 02 AB |  if_e	rdlong	local01, fp
1e070     14 4E 85 A1 |  if_e	sub	fp, #20
1e074     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e078     1C 00 90 5D |  if_ne	jmp	#LR__2384
1e07c     A7 90 02 FB | 	rdlong	muldiva_, fp
1e080     0C 4E 05 F1 | 	add	fp, #12
1e084     A7 92 02 FB | 	rdlong	muldivb_, fp
1e088     0C 4E 85 F1 | 	sub	fp, #12
1e08c     BA 00 A0 FD | 	call	#divide_
1e090     A7 92 62 FC | 	wrlong	muldivb_, fp
1e094     50 00 90 FD | 	jmp	#LR__2386
1e098                 | LR__2384
1e098                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1e098     08 4E 05 F1 | 	add	fp, #8
1e09c     A7 92 02 FB | 	rdlong	muldivb_, fp
1e0a0     08 4E 85 F1 | 	sub	fp, #8
1e0a4     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1e0a8     14 4E 05 A1 |  if_e	add	fp, #20
1e0ac     A7 26 02 AB |  if_e	rdlong	local01, fp
1e0b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e0b4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e0b8     1C 00 90 5D |  if_ne	jmp	#LR__2385
1e0bc     A7 90 02 FB | 	rdlong	muldiva_, fp
1e0c0     0C 4E 05 F1 | 	add	fp, #12
1e0c4     A7 92 02 FB | 	rdlong	muldivb_, fp
1e0c8     0C 4E 85 F1 | 	sub	fp, #12
1e0cc     BA 00 A0 FD | 	call	#divide_
1e0d0     A7 92 62 FC | 	wrlong	muldivb_, fp
1e0d4     10 00 90 FD | 	jmp	#LR__2386
1e0d8                 | LR__2385
1e0d8     A7 16 68 FC | 	wrlong	#11, fp
1e0dc     08 4E 05 F1 | 	add	fp, #8
1e0e0     A7 FE 69 FC | 	wrlong	#255, fp
1e0e4     08 4E 85 F1 | 	sub	fp, #8
1e0e8                 | LR__2386
1e0e8     A7 12 02 F6 | 	mov	arg01, fp
1e0ec     B0 F6 BE FD | 	call	#_push
1e0f0     A7 F0 03 F6 | 	mov	ptra, fp
1e0f4     B2 00 A0 FD | 	call	#popregs_
1e0f8                 | _do_div_ret
1e0f8     2D 00 64 FD | 	ret
1e0fc                 | 
1e0fc                 | ' 
1e0fc                 | ' '--------------------------------- equal (=)
1e0fc                 | ' 
1e0fc                 | ' sub do_eq
1e0fc                 | _do_eq
1e0fc     05 4A 05 F6 | 	mov	COUNT_, #5
1e100     A8 00 A0 FD | 	call	#pushregs_
1e104     18 F0 07 F1 | 	add	ptra, #24
1e108     FC F5 BE FD | 	call	#_pop
1e10c     FD 26 02 F6 | 	mov	local01, result1
1e110     FE 28 02 F6 | 	mov	local02, result2
1e114     FF 2A 02 F6 | 	mov	local03, result3
1e118     0C 4E 05 F1 | 	add	fp, #12
1e11c     A7 26 62 FC | 	wrlong	local01, fp
1e120     04 4E 05 F1 | 	add	fp, #4
1e124     A7 28 62 FC | 	wrlong	local02, fp
1e128     04 4E 05 F1 | 	add	fp, #4
1e12c     A7 2A 62 FC | 	wrlong	local03, fp
1e130     14 4E 85 F1 | 	sub	fp, #20
1e134     D0 F5 BE FD | 	call	#_pop
1e138     FF 2A 02 F6 | 	mov	local03, result3
1e13c     A7 FA 61 FC | 	wrlong	result1, fp
1e140     04 4E 05 F1 | 	add	fp, #4
1e144     A7 FC 61 FC | 	wrlong	result2, fp
1e148     04 4E 05 F1 | 	add	fp, #4
1e14c     A7 2A 62 FC | 	wrlong	local03, fp
1e150                 | ' 
1e150                 | ' t2=pop()
1e150                 | ' t1=pop()
1e150                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1e150     08 4E 85 F1 | 	sub	fp, #8
1e154     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e158     14 4E 05 A1 |  if_e	add	fp, #20
1e15c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e160     14 4E 85 A1 |  if_e	sub	fp, #20
1e164     16 2B 02 A6 |  if_e	mov	local03, local04
1e168     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e16c     28 00 90 5D |  if_ne	jmp	#LR__2390
1e170     00 26 06 F6 | 	mov	local01, #0
1e174     A7 12 02 FB | 	rdlong	arg01, fp
1e178     0C 4E 05 F1 | 	add	fp, #12
1e17c     A7 14 02 FB | 	rdlong	arg02, fp
1e180     0C 4E 85 F1 | 	sub	fp, #12
1e184     0C 8F B0 FD | 	call	#__system___string_cmp
1e188     00 FA 0D F2 | 	cmp	result1, #0 wz
1e18c     00 26 26 A6 |  if_e	not	local01, #0
1e190     A7 26 62 FC | 	wrlong	local01, fp
1e194     20 04 90 FD | 	jmp	#LR__2403
1e198                 | LR__2390
1e198                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1e198     08 4E 05 F1 | 	add	fp, #8
1e19c     A7 26 02 FB | 	rdlong	local01, fp
1e1a0     08 4E 85 F1 | 	sub	fp, #8
1e1a4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e1a8     14 4E 05 A1 |  if_e	add	fp, #20
1e1ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e1b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e1b4     16 2B 02 A6 |  if_e	mov	local03, local04
1e1b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e1bc     2C 00 90 5D |  if_ne	jmp	#LR__2391
1e1c0     00 26 06 F6 | 	mov	local01, #0
1e1c4     A7 12 02 FB | 	rdlong	arg01, fp
1e1c8     0C 4E 05 F1 | 	add	fp, #12
1e1cc     A7 14 02 FB | 	rdlong	arg02, fp
1e1d0     0C 4E 85 F1 | 	sub	fp, #12
1e1d4     01 16 06 F6 | 	mov	arg03, #1
1e1d8     3C C1 B0 FD | 	call	#__system___float_cmp
1e1dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e1e0     00 26 26 A6 |  if_e	not	local01, #0
1e1e4     A7 26 62 FC | 	wrlong	local01, fp
1e1e8     CC 03 90 FD | 	jmp	#LR__2403
1e1ec                 | LR__2391
1e1ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1e1ec     08 4E 05 F1 | 	add	fp, #8
1e1f0     A7 26 02 FB | 	rdlong	local01, fp
1e1f4     08 4E 85 F1 | 	sub	fp, #8
1e1f8     1E 26 0E F2 | 	cmp	local01, #30 wz
1e1fc     14 4E 05 A1 |  if_e	add	fp, #20
1e200     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e204     14 4E 85 A1 |  if_e	sub	fp, #20
1e208     16 2B 02 A6 |  if_e	mov	local03, local04
1e20c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e210     48 00 90 5D |  if_ne	jmp	#LR__2392
1e214     00 26 06 F6 | 	mov	local01, #0
1e218     A7 28 02 FB | 	rdlong	local02, fp
1e21c     0C 4E 05 F1 | 	add	fp, #12
1e220     A7 12 02 FB | 	rdlong	arg01, fp
1e224     0C 4E 85 F1 | 	sub	fp, #12
1e228     09 13 52 F6 | 	abs	arg01, arg01 wc
1e22c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e230     00 2E 06 36 |  if_ae	mov	local05, #0
1e234     A8 B8 B0 FD | 	call	#__system___float_fromuns
1e238     17 FB 61 F5 | 	xor	result1, local05
1e23c     FD 14 02 F6 | 	mov	arg02, result1
1e240     14 13 02 F6 | 	mov	arg01, local02
1e244     01 16 06 F6 | 	mov	arg03, #1
1e248     CC C0 B0 FD | 	call	#__system___float_cmp
1e24c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e250     00 26 26 A6 |  if_e	not	local01, #0
1e254     A7 26 62 FC | 	wrlong	local01, fp
1e258     5C 03 90 FD | 	jmp	#LR__2403
1e25c                 | LR__2392
1e25c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1e25c     08 4E 05 F1 | 	add	fp, #8
1e260     A7 26 02 FB | 	rdlong	local01, fp
1e264     08 4E 85 F1 | 	sub	fp, #8
1e268     1E 26 0E F2 | 	cmp	local01, #30 wz
1e26c     14 4E 05 A1 |  if_e	add	fp, #20
1e270     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e274     14 4E 85 A1 |  if_e	sub	fp, #20
1e278     16 2B 02 A6 |  if_e	mov	local03, local04
1e27c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e280     38 00 90 5D |  if_ne	jmp	#LR__2393
1e284     00 26 06 F6 | 	mov	local01, #0
1e288     A7 28 02 FB | 	rdlong	local02, fp
1e28c     0C 4E 05 F1 | 	add	fp, #12
1e290     A7 12 02 FB | 	rdlong	arg01, fp
1e294     0C 4E 85 F1 | 	sub	fp, #12
1e298     44 B8 B0 FD | 	call	#__system___float_fromuns
1e29c     FD 14 02 F6 | 	mov	arg02, result1
1e2a0     14 13 02 F6 | 	mov	arg01, local02
1e2a4     01 16 06 F6 | 	mov	arg03, #1
1e2a8     6C C0 B0 FD | 	call	#__system___float_cmp
1e2ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1e2b0     00 26 26 A6 |  if_e	not	local01, #0
1e2b4     A7 26 62 FC | 	wrlong	local01, fp
1e2b8     FC 02 90 FD | 	jmp	#LR__2403
1e2bc                 | LR__2393
1e2bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1e2bc     08 4E 05 F1 | 	add	fp, #8
1e2c0     A7 26 02 FB | 	rdlong	local01, fp
1e2c4     08 4E 85 F1 | 	sub	fp, #8
1e2c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e2cc     14 4E 05 A1 |  if_e	add	fp, #20
1e2d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2d4     14 4E 85 A1 |  if_e	sub	fp, #20
1e2d8     16 2B 02 A6 |  if_e	mov	local03, local04
1e2dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e2e0     44 00 90 5D |  if_ne	jmp	#LR__2394
1e2e4     00 26 06 F6 | 	mov	local01, #0
1e2e8     A7 12 02 FB | 	rdlong	arg01, fp
1e2ec     09 13 52 F6 | 	abs	arg01, arg01 wc
1e2f0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e2f4     00 2E 06 36 |  if_ae	mov	local05, #0
1e2f8     E4 B7 B0 FD | 	call	#__system___float_fromuns
1e2fc     17 FB 61 F5 | 	xor	result1, local05
1e300     FD 12 02 F6 | 	mov	arg01, result1
1e304     0C 4E 05 F1 | 	add	fp, #12
1e308     A7 14 02 FB | 	rdlong	arg02, fp
1e30c     0C 4E 85 F1 | 	sub	fp, #12
1e310     01 16 06 F6 | 	mov	arg03, #1
1e314     00 C0 B0 FD | 	call	#__system___float_cmp
1e318     00 FA 0D F2 | 	cmp	result1, #0 wz
1e31c     00 26 26 A6 |  if_e	not	local01, #0
1e320     A7 26 62 FC | 	wrlong	local01, fp
1e324     90 02 90 FD | 	jmp	#LR__2403
1e328                 | LR__2394
1e328                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1e328     08 4E 05 F1 | 	add	fp, #8
1e32c     A7 26 02 FB | 	rdlong	local01, fp
1e330     08 4E 85 F1 | 	sub	fp, #8
1e334     1C 26 0E F2 | 	cmp	local01, #28 wz
1e338     14 4E 05 A1 |  if_e	add	fp, #20
1e33c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e340     14 4E 85 A1 |  if_e	sub	fp, #20
1e344     16 2B 02 A6 |  if_e	mov	local03, local04
1e348     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e34c     24 00 90 5D |  if_ne	jmp	#LR__2395
1e350     00 26 06 F6 | 	mov	local01, #0
1e354     A7 28 02 FB | 	rdlong	local02, fp
1e358     0C 4E 05 F1 | 	add	fp, #12
1e35c     A7 2A 02 FB | 	rdlong	local03, fp
1e360     0C 4E 85 F1 | 	sub	fp, #12
1e364     15 29 0A F2 | 	cmp	local02, local03 wz
1e368     01 26 66 A6 |  if_e	neg	local01, #1
1e36c     A7 26 62 FC | 	wrlong	local01, fp
1e370     44 02 90 FD | 	jmp	#LR__2403
1e374                 | LR__2395
1e374                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1e374     08 4E 05 F1 | 	add	fp, #8
1e378     A7 26 02 FB | 	rdlong	local01, fp
1e37c     08 4E 85 F1 | 	sub	fp, #8
1e380     1C 26 0E F2 | 	cmp	local01, #28 wz
1e384     14 4E 05 A1 |  if_e	add	fp, #20
1e388     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e38c     14 4E 85 A1 |  if_e	sub	fp, #20
1e390     16 2B 02 A6 |  if_e	mov	local03, local04
1e394     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e398     24 00 90 5D |  if_ne	jmp	#LR__2396
1e39c     00 26 06 F6 | 	mov	local01, #0
1e3a0     A7 28 02 FB | 	rdlong	local02, fp
1e3a4     0C 4E 05 F1 | 	add	fp, #12
1e3a8     A7 2A 02 FB | 	rdlong	local03, fp
1e3ac     0C 4E 85 F1 | 	sub	fp, #12
1e3b0     15 29 0A F2 | 	cmp	local02, local03 wz
1e3b4     01 26 66 A6 |  if_e	neg	local01, #1
1e3b8     A7 26 62 FC | 	wrlong	local01, fp
1e3bc     F8 01 90 FD | 	jmp	#LR__2403
1e3c0                 | LR__2396
1e3c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1e3c0     08 4E 05 F1 | 	add	fp, #8
1e3c4     A7 26 02 FB | 	rdlong	local01, fp
1e3c8     08 4E 85 F1 | 	sub	fp, #8
1e3cc     1D 26 0E F2 | 	cmp	local01, #29 wz
1e3d0     14 4E 05 A1 |  if_e	add	fp, #20
1e3d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3d8     14 4E 85 A1 |  if_e	sub	fp, #20
1e3dc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e3e0     34 00 90 5D |  if_ne	jmp	#LR__2397
1e3e4     00 26 06 F6 | 	mov	local01, #0
1e3e8     A7 12 02 FB | 	rdlong	arg01, fp
1e3ec     F0 B6 B0 FD | 	call	#__system___float_fromuns
1e3f0     FD 12 02 F6 | 	mov	arg01, result1
1e3f4     0C 4E 05 F1 | 	add	fp, #12
1e3f8     A7 14 02 FB | 	rdlong	arg02, fp
1e3fc     0C 4E 85 F1 | 	sub	fp, #12
1e400     01 16 06 F6 | 	mov	arg03, #1
1e404     10 BF B0 FD | 	call	#__system___float_cmp
1e408     00 FA 0D F2 | 	cmp	result1, #0 wz
1e40c     00 26 26 A6 |  if_e	not	local01, #0
1e410     A7 26 62 FC | 	wrlong	local01, fp
1e414     A0 01 90 FD | 	jmp	#LR__2403
1e418                 | LR__2397
1e418                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1e418     08 4E 05 F1 | 	add	fp, #8
1e41c     A7 26 02 FB | 	rdlong	local01, fp
1e420     08 4E 85 F1 | 	sub	fp, #8
1e424     1D 26 0E F2 | 	cmp	local01, #29 wz
1e428     14 4E 05 A1 |  if_e	add	fp, #20
1e42c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e430     14 4E 85 A1 |  if_e	sub	fp, #20
1e434     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e438     24 00 90 5D |  if_ne	jmp	#LR__2398
1e43c     00 26 06 F6 | 	mov	local01, #0
1e440     A7 28 02 FB | 	rdlong	local02, fp
1e444     0C 4E 05 F1 | 	add	fp, #12
1e448     A7 2A 02 FB | 	rdlong	local03, fp
1e44c     0C 4E 85 F1 | 	sub	fp, #12
1e450     15 29 0A F2 | 	cmp	local02, local03 wz
1e454     01 26 66 A6 |  if_e	neg	local01, #1
1e458     A7 26 62 FC | 	wrlong	local01, fp
1e45c     58 01 90 FD | 	jmp	#LR__2403
1e460                 | LR__2398
1e460                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1e460     08 4E 05 F1 | 	add	fp, #8
1e464     A7 26 02 FB | 	rdlong	local01, fp
1e468     08 4E 85 F1 | 	sub	fp, #8
1e46c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e470     14 4E 05 A1 |  if_e	add	fp, #20
1e474     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e478     14 4E 85 A1 |  if_e	sub	fp, #20
1e47c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e480     24 00 90 5D |  if_ne	jmp	#LR__2399
1e484     00 26 06 F6 | 	mov	local01, #0
1e488     A7 28 02 FB | 	rdlong	local02, fp
1e48c     0C 4E 05 F1 | 	add	fp, #12
1e490     A7 2A 02 FB | 	rdlong	local03, fp
1e494     0C 4E 85 F1 | 	sub	fp, #12
1e498     15 29 0A F2 | 	cmp	local02, local03 wz
1e49c     01 26 66 A6 |  if_e	neg	local01, #1
1e4a0     A7 26 62 FC | 	wrlong	local01, fp
1e4a4     10 01 90 FD | 	jmp	#LR__2403
1e4a8                 | LR__2399
1e4a8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1e4a8     08 4E 05 F1 | 	add	fp, #8
1e4ac     A7 26 02 FB | 	rdlong	local01, fp
1e4b0     08 4E 85 F1 | 	sub	fp, #8
1e4b4     2B 26 0E F2 | 	cmp	local01, #43 wz
1e4b8     14 4E 05 A1 |  if_e	add	fp, #20
1e4bc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e4c0     14 4E 85 A1 |  if_e	sub	fp, #20
1e4c4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e4c8     30 00 90 5D |  if_ne	jmp	#LR__2400
1e4cc     00 26 06 F6 | 	mov	local01, #0
1e4d0     A7 12 02 FB | 	rdlong	arg01, fp
1e4d4     A8 F3 BE FD | 	call	#_convertstring
1e4d8     FD 12 02 F6 | 	mov	arg01, result1
1e4dc     0C 4E 05 F1 | 	add	fp, #12
1e4e0     A7 14 02 FB | 	rdlong	arg02, fp
1e4e4     0C 4E 85 F1 | 	sub	fp, #12
1e4e8     A8 8B B0 FD | 	call	#__system___string_cmp
1e4ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1e4f0     00 26 26 A6 |  if_e	not	local01, #0
1e4f4     A7 26 62 FC | 	wrlong	local01, fp
1e4f8     BC 00 90 FD | 	jmp	#LR__2403
1e4fc                 | LR__2400
1e4fc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1e4fc     08 4E 05 F1 | 	add	fp, #8
1e500     A7 26 02 FB | 	rdlong	local01, fp
1e504     08 4E 85 F1 | 	sub	fp, #8
1e508     1F 26 0E F2 | 	cmp	local01, #31 wz
1e50c     14 4E 05 A1 |  if_e	add	fp, #20
1e510     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e514     14 4E 85 A1 |  if_e	sub	fp, #20
1e518     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e51c     34 00 90 5D |  if_ne	jmp	#LR__2401
1e520     00 26 06 F6 | 	mov	local01, #0
1e524     A7 28 02 FB | 	rdlong	local02, fp
1e528     0C 4E 05 F1 | 	add	fp, #12
1e52c     A7 12 02 FB | 	rdlong	arg01, fp
1e530     0C 4E 85 F1 | 	sub	fp, #12
1e534     48 F3 BE FD | 	call	#_convertstring
1e538     FD 14 02 F6 | 	mov	arg02, result1
1e53c     14 13 02 F6 | 	mov	arg01, local02
1e540     50 8B B0 FD | 	call	#__system___string_cmp
1e544     00 FA 0D F2 | 	cmp	result1, #0 wz
1e548     00 26 26 A6 |  if_e	not	local01, #0
1e54c     A7 26 62 FC | 	wrlong	local01, fp
1e550     64 00 90 FD | 	jmp	#LR__2403
1e554                 | LR__2401
1e554                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1e554     08 4E 05 F1 | 	add	fp, #8
1e558     A7 26 02 FB | 	rdlong	local01, fp
1e55c     08 4E 85 F1 | 	sub	fp, #8
1e560     2B 26 0E F2 | 	cmp	local01, #43 wz
1e564     14 4E 05 A1 |  if_e	add	fp, #20
1e568     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e56c     14 4E 85 A1 |  if_e	sub	fp, #20
1e570     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e574     3C 00 90 5D |  if_ne	jmp	#LR__2402
1e578     00 26 06 F6 | 	mov	local01, #0
1e57c     A7 12 02 FB | 	rdlong	arg01, fp
1e580     FC F2 BE FD | 	call	#_convertstring
1e584     FD 28 02 F6 | 	mov	local02, result1
1e588     0C 4E 05 F1 | 	add	fp, #12
1e58c     A7 12 02 FB | 	rdlong	arg01, fp
1e590     0C 4E 85 F1 | 	sub	fp, #12
1e594     E8 F2 BE FD | 	call	#_convertstring
1e598     FD 14 02 F6 | 	mov	arg02, result1
1e59c     14 13 02 F6 | 	mov	arg01, local02
1e5a0     F0 8A B0 FD | 	call	#__system___string_cmp
1e5a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e5a8     00 26 26 A6 |  if_e	not	local01, #0
1e5ac     A7 26 62 FC | 	wrlong	local01, fp
1e5b0     04 00 90 FD | 	jmp	#LR__2403
1e5b4                 | LR__2402
1e5b4     A7 00 68 FC | 	wrlong	#0, fp
1e5b8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e5b8                 | LR__2403
1e5b8     08 4E 05 F1 | 	add	fp, #8
1e5bc     A7 38 68 FC | 	wrlong	#28, fp
1e5c0     08 4E 85 F1 | 	sub	fp, #8
1e5c4     A7 12 02 F6 | 	mov	arg01, fp
1e5c8     D4 F1 BE FD | 	call	#_push
1e5cc     A7 F0 03 F6 | 	mov	ptra, fp
1e5d0     B2 00 A0 FD | 	call	#popregs_
1e5d4                 | _do_eq_ret
1e5d4     2D 00 64 FD | 	ret
1e5d8                 | 
1e5d8                 | ' 
1e5d8                 | ' '--------------------------------- fdiv (/) - float divide
1e5d8                 | ' 
1e5d8                 | ' sub do_fdiv 
1e5d8                 | _do_fdiv
1e5d8     02 4A 05 F6 | 	mov	COUNT_, #2
1e5dc     A8 00 A0 FD | 	call	#pushregs_
1e5e0     18 F0 07 F1 | 	add	ptra, #24
1e5e4     20 F1 BE FD | 	call	#_pop
1e5e8     FD 14 02 F6 | 	mov	arg02, result1
1e5ec     FE 12 02 F6 | 	mov	arg01, result2
1e5f0     FF 26 02 F6 | 	mov	local01, result3
1e5f4     0C 4E 05 F1 | 	add	fp, #12
1e5f8     A7 14 62 FC | 	wrlong	arg02, fp
1e5fc     04 4E 05 F1 | 	add	fp, #4
1e600     A7 12 62 FC | 	wrlong	arg01, fp
1e604     04 4E 05 F1 | 	add	fp, #4
1e608     A7 26 62 FC | 	wrlong	local01, fp
1e60c     14 4E 85 F1 | 	sub	fp, #20
1e610     F4 F0 BE FD | 	call	#_pop
1e614     A7 FA 61 FC | 	wrlong	result1, fp
1e618     04 4E 05 F1 | 	add	fp, #4
1e61c     A7 FC 61 FC | 	wrlong	result2, fp
1e620     04 4E 05 F1 | 	add	fp, #4
1e624     A7 FE 61 FC | 	wrlong	result3, fp
1e628                 | ' 
1e628                 | ' t2=pop()
1e628                 | ' t1=pop()
1e628                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1e628     08 4E 85 F1 | 	sub	fp, #8
1e62c     1F FE 0D F2 | 	cmp	result3, #31 wz
1e630     14 4E 05 51 |  if_ne	add	fp, #20
1e634     A7 26 02 5B |  if_ne	rdlong	local01, fp
1e638     14 4E 85 51 |  if_ne	sub	fp, #20
1e63c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1e640     A7 14 68 AC |  if_e	wrlong	#10, fp
1e644     08 4E 05 A1 |  if_e	add	fp, #8
1e648     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e64c     08 4E 85 A1 |  if_e	sub	fp, #8
1e650     38 01 90 AD |  if_e	jmp	#LR__2415
1e654                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e654     08 4E 05 F1 | 	add	fp, #8
1e658     A7 14 02 FB | 	rdlong	arg02, fp
1e65c     08 4E 85 F1 | 	sub	fp, #8
1e660     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e664     28 00 90 5D |  if_ne	jmp	#LR__2410
1e668     08 4E 05 F1 | 	add	fp, #8
1e66c     A7 3C 68 FC | 	wrlong	#30, fp
1e670     08 4E 85 F1 | 	sub	fp, #8
1e674     A7 12 02 FB | 	rdlong	arg01, fp
1e678     09 13 52 F6 | 	abs	arg01, arg01 wc
1e67c     1F 28 C6 C9 |  if_b	decod	local02, #31
1e680     00 28 06 36 |  if_ae	mov	local02, #0
1e684     58 B4 B0 FD | 	call	#__system___float_fromuns
1e688     14 FB 61 F5 | 	xor	result1, local02
1e68c     A7 FA 61 FC | 	wrlong	result1, fp
1e690                 | LR__2410
1e690                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1e690     08 4E 05 F1 | 	add	fp, #8
1e694     A7 14 02 FB | 	rdlong	arg02, fp
1e698     08 4E 85 F1 | 	sub	fp, #8
1e69c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e6a0     18 00 90 5D |  if_ne	jmp	#LR__2411
1e6a4     08 4E 05 F1 | 	add	fp, #8
1e6a8     A7 3C 68 FC | 	wrlong	#30, fp
1e6ac     08 4E 85 F1 | 	sub	fp, #8
1e6b0     A7 12 02 FB | 	rdlong	arg01, fp
1e6b4     28 B4 B0 FD | 	call	#__system___float_fromuns
1e6b8     A7 FA 61 FC | 	wrlong	result1, fp
1e6bc                 | LR__2411
1e6bc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e6bc     14 4E 05 F1 | 	add	fp, #20
1e6c0     A7 14 02 FB | 	rdlong	arg02, fp
1e6c4     14 4E 85 F1 | 	sub	fp, #20
1e6c8     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e6cc     34 00 90 5D |  if_ne	jmp	#LR__2412
1e6d0     14 4E 05 F1 | 	add	fp, #20
1e6d4     A7 3C 68 FC | 	wrlong	#30, fp
1e6d8     08 4E 85 F1 | 	sub	fp, #8
1e6dc     A7 12 02 FB | 	rdlong	arg01, fp
1e6e0     0C 4E 85 F1 | 	sub	fp, #12
1e6e4     09 13 52 F6 | 	abs	arg01, arg01 wc
1e6e8     1F 28 C6 C9 |  if_b	decod	local02, #31
1e6ec     00 28 06 36 |  if_ae	mov	local02, #0
1e6f0     EC B3 B0 FD | 	call	#__system___float_fromuns
1e6f4     14 FB 61 F5 | 	xor	result1, local02
1e6f8     0C 4E 05 F1 | 	add	fp, #12
1e6fc     A7 FA 61 FC | 	wrlong	result1, fp
1e700     0C 4E 85 F1 | 	sub	fp, #12
1e704                 | LR__2412
1e704                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e704     14 4E 05 F1 | 	add	fp, #20
1e708     A7 14 02 FB | 	rdlong	arg02, fp
1e70c     14 4E 85 F1 | 	sub	fp, #20
1e710     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e714     24 00 90 5D |  if_ne	jmp	#LR__2413
1e718     14 4E 05 F1 | 	add	fp, #20
1e71c     A7 3C 68 FC | 	wrlong	#30, fp
1e720     08 4E 85 F1 | 	sub	fp, #8
1e724     A7 12 02 FB | 	rdlong	arg01, fp
1e728     0C 4E 85 F1 | 	sub	fp, #12
1e72c     B0 B3 B0 FD | 	call	#__system___float_fromuns
1e730     0C 4E 05 F1 | 	add	fp, #12
1e734     A7 FA 61 FC | 	wrlong	result1, fp
1e738     0C 4E 85 F1 | 	sub	fp, #12
1e73c                 | LR__2413
1e73c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1e73c     08 4E 05 F1 | 	add	fp, #8
1e740     A7 14 02 FB | 	rdlong	arg02, fp
1e744     08 4E 85 F1 | 	sub	fp, #8
1e748     1E 14 0E F2 | 	cmp	arg02, #30 wz
1e74c     14 4E 05 A1 |  if_e	add	fp, #20
1e750     A7 26 02 AB |  if_e	rdlong	local01, fp
1e754     14 4E 85 A1 |  if_e	sub	fp, #20
1e758     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1e75c     1C 00 90 5D |  if_ne	jmp	#LR__2414
1e760     A7 12 02 FB | 	rdlong	arg01, fp
1e764     0C 4E 05 F1 | 	add	fp, #12
1e768     A7 14 02 FB | 	rdlong	arg02, fp
1e76c     0C 4E 85 F1 | 	sub	fp, #12
1e770     74 B9 B0 FD | 	call	#__system___float_div
1e774     A7 FA 61 FC | 	wrlong	result1, fp
1e778     10 00 90 FD | 	jmp	#LR__2415
1e77c                 | LR__2414
1e77c     A7 16 68 FC | 	wrlong	#11, fp
1e780     08 4E 05 F1 | 	add	fp, #8
1e784     A7 FE 69 FC | 	wrlong	#255, fp
1e788     08 4E 85 F1 | 	sub	fp, #8
1e78c                 | LR__2415
1e78c     A7 12 02 F6 | 	mov	arg01, fp
1e790     0C F0 BE FD | 	call	#_push
1e794     A7 F0 03 F6 | 	mov	ptra, fp
1e798     B2 00 A0 FD | 	call	#popregs_
1e79c                 | _do_fdiv_ret
1e79c     2D 00 64 FD | 	ret
1e7a0                 | 
1e7a0                 | ' 
1e7a0                 | ' '--------------------------------- greater or equal (>=)
1e7a0                 | ' 
1e7a0                 | ' sub do_ge
1e7a0                 | _do_ge
1e7a0     05 4A 05 F6 | 	mov	COUNT_, #5
1e7a4     A8 00 A0 FD | 	call	#pushregs_
1e7a8     18 F0 07 F1 | 	add	ptra, #24
1e7ac     58 EF BE FD | 	call	#_pop
1e7b0     FD 26 02 F6 | 	mov	local01, result1
1e7b4     FE 28 02 F6 | 	mov	local02, result2
1e7b8     FF 2A 02 F6 | 	mov	local03, result3
1e7bc     0C 4E 05 F1 | 	add	fp, #12
1e7c0     A7 26 62 FC | 	wrlong	local01, fp
1e7c4     04 4E 05 F1 | 	add	fp, #4
1e7c8     A7 28 62 FC | 	wrlong	local02, fp
1e7cc     04 4E 05 F1 | 	add	fp, #4
1e7d0     A7 2A 62 FC | 	wrlong	local03, fp
1e7d4     14 4E 85 F1 | 	sub	fp, #20
1e7d8     2C EF BE FD | 	call	#_pop
1e7dc     FF 2A 02 F6 | 	mov	local03, result3
1e7e0     A7 FA 61 FC | 	wrlong	result1, fp
1e7e4     04 4E 05 F1 | 	add	fp, #4
1e7e8     A7 FC 61 FC | 	wrlong	result2, fp
1e7ec     04 4E 05 F1 | 	add	fp, #4
1e7f0     A7 2A 62 FC | 	wrlong	local03, fp
1e7f4                 | ' 
1e7f4                 | ' t2=pop()
1e7f4                 | ' t1=pop()
1e7f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1e7f4     08 4E 85 F1 | 	sub	fp, #8
1e7f8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e7fc     14 4E 05 A1 |  if_e	add	fp, #20
1e800     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e804     14 4E 85 A1 |  if_e	sub	fp, #20
1e808     16 2B 02 A6 |  if_e	mov	local03, local04
1e80c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e810     28 00 90 5D |  if_ne	jmp	#LR__2420
1e814     00 26 06 F6 | 	mov	local01, #0
1e818     A7 12 02 FB | 	rdlong	arg01, fp
1e81c     0C 4E 05 F1 | 	add	fp, #12
1e820     A7 14 02 FB | 	rdlong	arg02, fp
1e824     0C 4E 85 F1 | 	sub	fp, #12
1e828     68 88 B0 FD | 	call	#__system___string_cmp
1e82c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e830     00 26 26 36 |  if_ae	not	local01, #0
1e834     A7 26 62 FC | 	wrlong	local01, fp
1e838     24 04 90 FD | 	jmp	#LR__2433
1e83c                 | LR__2420
1e83c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1e83c     08 4E 05 F1 | 	add	fp, #8
1e840     A7 26 02 FB | 	rdlong	local01, fp
1e844     08 4E 85 F1 | 	sub	fp, #8
1e848     1E 26 0E F2 | 	cmp	local01, #30 wz
1e84c     14 4E 05 A1 |  if_e	add	fp, #20
1e850     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e854     14 4E 85 A1 |  if_e	sub	fp, #20
1e858     16 2B 02 A6 |  if_e	mov	local03, local04
1e85c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e860     2C 00 90 5D |  if_ne	jmp	#LR__2421
1e864     00 26 06 F6 | 	mov	local01, #0
1e868     A7 12 02 FB | 	rdlong	arg01, fp
1e86c     0C 4E 05 F1 | 	add	fp, #12
1e870     A7 14 02 FB | 	rdlong	arg02, fp
1e874     0C 4E 85 F1 | 	sub	fp, #12
1e878     01 16 66 F6 | 	neg	arg03, #1
1e87c     98 BA B0 FD | 	call	#__system___float_cmp
1e880     00 FA 55 F2 | 	cmps	result1, #0 wc
1e884     00 26 26 36 |  if_ae	not	local01, #0
1e888     A7 26 62 FC | 	wrlong	local01, fp
1e88c     D0 03 90 FD | 	jmp	#LR__2433
1e890                 | LR__2421
1e890                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1e890     08 4E 05 F1 | 	add	fp, #8
1e894     A7 26 02 FB | 	rdlong	local01, fp
1e898     08 4E 85 F1 | 	sub	fp, #8
1e89c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e8a0     14 4E 05 A1 |  if_e	add	fp, #20
1e8a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8a8     14 4E 85 A1 |  if_e	sub	fp, #20
1e8ac     16 2B 02 A6 |  if_e	mov	local03, local04
1e8b0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e8b4     48 00 90 5D |  if_ne	jmp	#LR__2422
1e8b8     00 26 06 F6 | 	mov	local01, #0
1e8bc     A7 28 02 FB | 	rdlong	local02, fp
1e8c0     0C 4E 05 F1 | 	add	fp, #12
1e8c4     A7 12 02 FB | 	rdlong	arg01, fp
1e8c8     0C 4E 85 F1 | 	sub	fp, #12
1e8cc     09 13 52 F6 | 	abs	arg01, arg01 wc
1e8d0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e8d4     00 2E 06 36 |  if_ae	mov	local05, #0
1e8d8     04 B2 B0 FD | 	call	#__system___float_fromuns
1e8dc     17 FB 61 F5 | 	xor	result1, local05
1e8e0     FD 14 02 F6 | 	mov	arg02, result1
1e8e4     14 13 02 F6 | 	mov	arg01, local02
1e8e8     01 16 66 F6 | 	neg	arg03, #1
1e8ec     28 BA B0 FD | 	call	#__system___float_cmp
1e8f0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e8f4     00 26 26 36 |  if_ae	not	local01, #0
1e8f8     A7 26 62 FC | 	wrlong	local01, fp
1e8fc     60 03 90 FD | 	jmp	#LR__2433
1e900                 | LR__2422
1e900                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1e900     08 4E 05 F1 | 	add	fp, #8
1e904     A7 26 02 FB | 	rdlong	local01, fp
1e908     08 4E 85 F1 | 	sub	fp, #8
1e90c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e910     14 4E 05 A1 |  if_e	add	fp, #20
1e914     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e918     14 4E 85 A1 |  if_e	sub	fp, #20
1e91c     16 2B 02 A6 |  if_e	mov	local03, local04
1e920     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e924     38 00 90 5D |  if_ne	jmp	#LR__2423
1e928     00 26 06 F6 | 	mov	local01, #0
1e92c     A7 28 02 FB | 	rdlong	local02, fp
1e930     0C 4E 05 F1 | 	add	fp, #12
1e934     A7 12 02 FB | 	rdlong	arg01, fp
1e938     0C 4E 85 F1 | 	sub	fp, #12
1e93c     A0 B1 B0 FD | 	call	#__system___float_fromuns
1e940     FD 14 02 F6 | 	mov	arg02, result1
1e944     14 13 02 F6 | 	mov	arg01, local02
1e948     01 16 66 F6 | 	neg	arg03, #1
1e94c     C8 B9 B0 FD | 	call	#__system___float_cmp
1e950     00 FA 55 F2 | 	cmps	result1, #0 wc
1e954     00 26 26 36 |  if_ae	not	local01, #0
1e958     A7 26 62 FC | 	wrlong	local01, fp
1e95c     00 03 90 FD | 	jmp	#LR__2433
1e960                 | LR__2423
1e960                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1e960     08 4E 05 F1 | 	add	fp, #8
1e964     A7 26 02 FB | 	rdlong	local01, fp
1e968     08 4E 85 F1 | 	sub	fp, #8
1e96c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e970     14 4E 05 A1 |  if_e	add	fp, #20
1e974     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e978     14 4E 85 A1 |  if_e	sub	fp, #20
1e97c     16 2B 02 A6 |  if_e	mov	local03, local04
1e980     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e984     44 00 90 5D |  if_ne	jmp	#LR__2424
1e988     00 26 06 F6 | 	mov	local01, #0
1e98c     A7 12 02 FB | 	rdlong	arg01, fp
1e990     09 13 52 F6 | 	abs	arg01, arg01 wc
1e994     1F 2E C6 C9 |  if_b	decod	local05, #31
1e998     00 2E 06 36 |  if_ae	mov	local05, #0
1e99c     40 B1 B0 FD | 	call	#__system___float_fromuns
1e9a0     17 FB 61 F5 | 	xor	result1, local05
1e9a4     FD 12 02 F6 | 	mov	arg01, result1
1e9a8     0C 4E 05 F1 | 	add	fp, #12
1e9ac     A7 14 02 FB | 	rdlong	arg02, fp
1e9b0     0C 4E 85 F1 | 	sub	fp, #12
1e9b4     01 16 66 F6 | 	neg	arg03, #1
1e9b8     5C B9 B0 FD | 	call	#__system___float_cmp
1e9bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1e9c0     00 26 26 36 |  if_ae	not	local01, #0
1e9c4     A7 26 62 FC | 	wrlong	local01, fp
1e9c8     94 02 90 FD | 	jmp	#LR__2433
1e9cc                 | LR__2424
1e9cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1e9cc     08 4E 05 F1 | 	add	fp, #8
1e9d0     A7 26 02 FB | 	rdlong	local01, fp
1e9d4     08 4E 85 F1 | 	sub	fp, #8
1e9d8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e9dc     14 4E 05 A1 |  if_e	add	fp, #20
1e9e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e9e4     14 4E 85 A1 |  if_e	sub	fp, #20
1e9e8     16 2B 02 A6 |  if_e	mov	local03, local04
1e9ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e9f0     24 00 90 5D |  if_ne	jmp	#LR__2425
1e9f4     00 26 06 F6 | 	mov	local01, #0
1e9f8     A7 28 02 FB | 	rdlong	local02, fp
1e9fc     0C 4E 05 F1 | 	add	fp, #12
1ea00     A7 2A 02 FB | 	rdlong	local03, fp
1ea04     0C 4E 85 F1 | 	sub	fp, #12
1ea08     15 29 52 F2 | 	cmps	local02, local03 wc
1ea0c     01 26 66 36 |  if_ae	neg	local01, #1
1ea10     A7 26 62 FC | 	wrlong	local01, fp
1ea14     48 02 90 FD | 	jmp	#LR__2433
1ea18                 | LR__2425
1ea18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1ea18     08 4E 05 F1 | 	add	fp, #8
1ea1c     A7 26 02 FB | 	rdlong	local01, fp
1ea20     08 4E 85 F1 | 	sub	fp, #8
1ea24     1C 26 0E F2 | 	cmp	local01, #28 wz
1ea28     14 4E 05 A1 |  if_e	add	fp, #20
1ea2c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ea30     14 4E 85 A1 |  if_e	sub	fp, #20
1ea34     16 2B 02 A6 |  if_e	mov	local03, local04
1ea38     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ea3c     24 00 90 5D |  if_ne	jmp	#LR__2426
1ea40     00 26 06 F6 | 	mov	local01, #0
1ea44     A7 28 02 FB | 	rdlong	local02, fp
1ea48     0C 4E 05 F1 | 	add	fp, #12
1ea4c     A7 2A 02 FB | 	rdlong	local03, fp
1ea50     0C 4E 85 F1 | 	sub	fp, #12
1ea54     15 29 52 F2 | 	cmps	local02, local03 wc
1ea58     01 26 66 36 |  if_ae	neg	local01, #1
1ea5c     A7 26 62 FC | 	wrlong	local01, fp
1ea60     FC 01 90 FD | 	jmp	#LR__2433
1ea64                 | LR__2426
1ea64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1ea64     08 4E 05 F1 | 	add	fp, #8
1ea68     A7 26 02 FB | 	rdlong	local01, fp
1ea6c     08 4E 85 F1 | 	sub	fp, #8
1ea70     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea74     14 4E 05 A1 |  if_e	add	fp, #20
1ea78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ea7c     14 4E 85 A1 |  if_e	sub	fp, #20
1ea80     16 2B 02 A6 |  if_e	mov	local03, local04
1ea84     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ea88     34 00 90 5D |  if_ne	jmp	#LR__2427
1ea8c     00 26 06 F6 | 	mov	local01, #0
1ea90     A7 12 02 FB | 	rdlong	arg01, fp
1ea94     48 B0 B0 FD | 	call	#__system___float_fromuns
1ea98     FD 12 02 F6 | 	mov	arg01, result1
1ea9c     0C 4E 05 F1 | 	add	fp, #12
1eaa0     A7 14 02 FB | 	rdlong	arg02, fp
1eaa4     0C 4E 85 F1 | 	sub	fp, #12
1eaa8     01 16 66 F6 | 	neg	arg03, #1
1eaac     68 B8 B0 FD | 	call	#__system___float_cmp
1eab0     00 FA 55 F2 | 	cmps	result1, #0 wc
1eab4     00 26 26 36 |  if_ae	not	local01, #0
1eab8     A7 26 62 FC | 	wrlong	local01, fp
1eabc     A0 01 90 FD | 	jmp	#LR__2433
1eac0                 | LR__2427
1eac0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1eac0     08 4E 05 F1 | 	add	fp, #8
1eac4     A7 26 02 FB | 	rdlong	local01, fp
1eac8     08 4E 85 F1 | 	sub	fp, #8
1eacc     1D 26 0E F2 | 	cmp	local01, #29 wz
1ead0     14 4E 05 A1 |  if_e	add	fp, #20
1ead4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ead8     14 4E 85 A1 |  if_e	sub	fp, #20
1eadc     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1eae0     24 00 90 5D |  if_ne	jmp	#LR__2428
1eae4     00 26 06 F6 | 	mov	local01, #0
1eae8     A7 28 02 FB | 	rdlong	local02, fp
1eaec     0C 4E 05 F1 | 	add	fp, #12
1eaf0     A7 2A 02 FB | 	rdlong	local03, fp
1eaf4     0C 4E 85 F1 | 	sub	fp, #12
1eaf8     15 29 52 F2 | 	cmps	local02, local03 wc
1eafc     01 26 66 36 |  if_ae	neg	local01, #1
1eb00     A7 26 62 FC | 	wrlong	local01, fp
1eb04     58 01 90 FD | 	jmp	#LR__2433
1eb08                 | LR__2428
1eb08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1eb08     08 4E 05 F1 | 	add	fp, #8
1eb0c     A7 26 02 FB | 	rdlong	local01, fp
1eb10     08 4E 85 F1 | 	sub	fp, #8
1eb14     1D 26 0E F2 | 	cmp	local01, #29 wz
1eb18     14 4E 05 A1 |  if_e	add	fp, #20
1eb1c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb20     14 4E 85 A1 |  if_e	sub	fp, #20
1eb24     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eb28     24 00 90 5D |  if_ne	jmp	#LR__2429
1eb2c     00 26 06 F6 | 	mov	local01, #0
1eb30     A7 28 02 FB | 	rdlong	local02, fp
1eb34     0C 4E 05 F1 | 	add	fp, #12
1eb38     A7 2A 02 FB | 	rdlong	local03, fp
1eb3c     0C 4E 85 F1 | 	sub	fp, #12
1eb40     15 29 12 F2 | 	cmp	local02, local03 wc
1eb44     01 26 66 36 |  if_ae	neg	local01, #1
1eb48     A7 26 62 FC | 	wrlong	local01, fp
1eb4c     10 01 90 FD | 	jmp	#LR__2433
1eb50                 | LR__2429
1eb50                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1eb50     08 4E 05 F1 | 	add	fp, #8
1eb54     A7 26 02 FB | 	rdlong	local01, fp
1eb58     08 4E 85 F1 | 	sub	fp, #8
1eb5c     2B 26 0E F2 | 	cmp	local01, #43 wz
1eb60     14 4E 05 A1 |  if_e	add	fp, #20
1eb64     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb68     14 4E 85 A1 |  if_e	sub	fp, #20
1eb6c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1eb70     30 00 90 5D |  if_ne	jmp	#LR__2430
1eb74     00 26 06 F6 | 	mov	local01, #0
1eb78     A7 12 02 FB | 	rdlong	arg01, fp
1eb7c     00 ED BE FD | 	call	#_convertstring
1eb80     FD 12 02 F6 | 	mov	arg01, result1
1eb84     0C 4E 05 F1 | 	add	fp, #12
1eb88     A7 14 02 FB | 	rdlong	arg02, fp
1eb8c     0C 4E 85 F1 | 	sub	fp, #12
1eb90     00 85 B0 FD | 	call	#__system___string_cmp
1eb94     00 FA 55 F2 | 	cmps	result1, #0 wc
1eb98     00 26 26 36 |  if_ae	not	local01, #0
1eb9c     A7 26 62 FC | 	wrlong	local01, fp
1eba0     BC 00 90 FD | 	jmp	#LR__2433
1eba4                 | LR__2430
1eba4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1eba4     08 4E 05 F1 | 	add	fp, #8
1eba8     A7 26 02 FB | 	rdlong	local01, fp
1ebac     08 4E 85 F1 | 	sub	fp, #8
1ebb0     1F 26 0E F2 | 	cmp	local01, #31 wz
1ebb4     14 4E 05 A1 |  if_e	add	fp, #20
1ebb8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ebbc     14 4E 85 A1 |  if_e	sub	fp, #20
1ebc0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ebc4     34 00 90 5D |  if_ne	jmp	#LR__2431
1ebc8     00 26 06 F6 | 	mov	local01, #0
1ebcc     A7 28 02 FB | 	rdlong	local02, fp
1ebd0     0C 4E 05 F1 | 	add	fp, #12
1ebd4     A7 12 02 FB | 	rdlong	arg01, fp
1ebd8     0C 4E 85 F1 | 	sub	fp, #12
1ebdc     A0 EC BE FD | 	call	#_convertstring
1ebe0     FD 14 02 F6 | 	mov	arg02, result1
1ebe4     14 13 02 F6 | 	mov	arg01, local02
1ebe8     A8 84 B0 FD | 	call	#__system___string_cmp
1ebec     00 FA 55 F2 | 	cmps	result1, #0 wc
1ebf0     00 26 26 36 |  if_ae	not	local01, #0
1ebf4     A7 26 62 FC | 	wrlong	local01, fp
1ebf8     64 00 90 FD | 	jmp	#LR__2433
1ebfc                 | LR__2431
1ebfc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1ebfc     08 4E 05 F1 | 	add	fp, #8
1ec00     A7 26 02 FB | 	rdlong	local01, fp
1ec04     08 4E 85 F1 | 	sub	fp, #8
1ec08     2B 26 0E F2 | 	cmp	local01, #43 wz
1ec0c     14 4E 05 A1 |  if_e	add	fp, #20
1ec10     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ec14     14 4E 85 A1 |  if_e	sub	fp, #20
1ec18     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ec1c     3C 00 90 5D |  if_ne	jmp	#LR__2432
1ec20     00 26 06 F6 | 	mov	local01, #0
1ec24     A7 12 02 FB | 	rdlong	arg01, fp
1ec28     54 EC BE FD | 	call	#_convertstring
1ec2c     FD 28 02 F6 | 	mov	local02, result1
1ec30     0C 4E 05 F1 | 	add	fp, #12
1ec34     A7 12 02 FB | 	rdlong	arg01, fp
1ec38     0C 4E 85 F1 | 	sub	fp, #12
1ec3c     40 EC BE FD | 	call	#_convertstring
1ec40     FD 14 02 F6 | 	mov	arg02, result1
1ec44     14 13 02 F6 | 	mov	arg01, local02
1ec48     48 84 B0 FD | 	call	#__system___string_cmp
1ec4c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ec50     00 26 26 36 |  if_ae	not	local01, #0
1ec54     A7 26 62 FC | 	wrlong	local01, fp
1ec58     04 00 90 FD | 	jmp	#LR__2433
1ec5c                 | LR__2432
1ec5c     A7 00 68 FC | 	wrlong	#0, fp
1ec60                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ec60                 | LR__2433
1ec60     08 4E 05 F1 | 	add	fp, #8
1ec64     A7 38 68 FC | 	wrlong	#28, fp
1ec68     08 4E 85 F1 | 	sub	fp, #8
1ec6c                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ec6c     A7 26 0A FB | 	rdlong	local01, fp wz
1ec70     A7 02 68 5C |  if_ne	wrlong	#1, fp
1ec74     A7 12 02 F6 | 	mov	arg01, fp
1ec78     24 EB BE FD | 	call	#_push
1ec7c     A7 F0 03 F6 | 	mov	ptra, fp
1ec80     B2 00 A0 FD | 	call	#popregs_
1ec84                 | _do_ge_ret
1ec84     2D 00 64 FD | 	ret
1ec88                 | 
1ec88                 | ' 
1ec88                 | ' '--------------------------------- greater than (>)
1ec88                 | ' 
1ec88                 | ' sub do_gt
1ec88                 | _do_gt
1ec88     05 4A 05 F6 | 	mov	COUNT_, #5
1ec8c     A8 00 A0 FD | 	call	#pushregs_
1ec90     18 F0 07 F1 | 	add	ptra, #24
1ec94     70 EA BE FD | 	call	#_pop
1ec98     FD 26 02 F6 | 	mov	local01, result1
1ec9c     FE 28 02 F6 | 	mov	local02, result2
1eca0     FF 2A 02 F6 | 	mov	local03, result3
1eca4     0C 4E 05 F1 | 	add	fp, #12
1eca8     A7 26 62 FC | 	wrlong	local01, fp
1ecac     04 4E 05 F1 | 	add	fp, #4
1ecb0     A7 28 62 FC | 	wrlong	local02, fp
1ecb4     04 4E 05 F1 | 	add	fp, #4
1ecb8     A7 2A 62 FC | 	wrlong	local03, fp
1ecbc     14 4E 85 F1 | 	sub	fp, #20
1ecc0     44 EA BE FD | 	call	#_pop
1ecc4     FF 2A 02 F6 | 	mov	local03, result3
1ecc8     A7 FA 61 FC | 	wrlong	result1, fp
1eccc     04 4E 05 F1 | 	add	fp, #4
1ecd0     A7 FC 61 FC | 	wrlong	result2, fp
1ecd4     04 4E 05 F1 | 	add	fp, #4
1ecd8     A7 2A 62 FC | 	wrlong	local03, fp
1ecdc                 | ' 
1ecdc                 | ' t2=pop()
1ecdc                 | ' t1=pop()
1ecdc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1ecdc     08 4E 85 F1 | 	sub	fp, #8
1ece0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ece4     14 4E 05 A1 |  if_e	add	fp, #20
1ece8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ecec     14 4E 85 A1 |  if_e	sub	fp, #20
1ecf0     16 2B 02 A6 |  if_e	mov	local03, local04
1ecf4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ecf8     28 00 90 5D |  if_ne	jmp	#LR__2440
1ecfc     00 26 06 F6 | 	mov	local01, #0
1ed00     A7 12 02 FB | 	rdlong	arg01, fp
1ed04     0C 4E 05 F1 | 	add	fp, #12
1ed08     A7 14 02 FB | 	rdlong	arg02, fp
1ed0c     0C 4E 85 F1 | 	sub	fp, #12
1ed10     80 83 B0 FD | 	call	#__system___string_cmp
1ed14     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed18     00 26 26 36 |  if_ae	not	local01, #0
1ed1c     A7 26 62 FC | 	wrlong	local01, fp
1ed20     20 04 90 FD | 	jmp	#LR__2453
1ed24                 | LR__2440
1ed24                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1ed24     08 4E 05 F1 | 	add	fp, #8
1ed28     A7 26 02 FB | 	rdlong	local01, fp
1ed2c     08 4E 85 F1 | 	sub	fp, #8
1ed30     1E 26 0E F2 | 	cmp	local01, #30 wz
1ed34     14 4E 05 A1 |  if_e	add	fp, #20
1ed38     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed3c     14 4E 85 A1 |  if_e	sub	fp, #20
1ed40     16 2B 02 A6 |  if_e	mov	local03, local04
1ed44     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ed48     2C 00 90 5D |  if_ne	jmp	#LR__2441
1ed4c     00 26 06 F6 | 	mov	local01, #0
1ed50     A7 12 02 FB | 	rdlong	arg01, fp
1ed54     0C 4E 05 F1 | 	add	fp, #12
1ed58     A7 14 02 FB | 	rdlong	arg02, fp
1ed5c     0C 4E 85 F1 | 	sub	fp, #12
1ed60     01 16 66 F6 | 	neg	arg03, #1
1ed64     B0 B5 B0 FD | 	call	#__system___float_cmp
1ed68     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed6c     00 26 26 36 |  if_ae	not	local01, #0
1ed70     A7 26 62 FC | 	wrlong	local01, fp
1ed74     CC 03 90 FD | 	jmp	#LR__2453
1ed78                 | LR__2441
1ed78                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1ed78     08 4E 05 F1 | 	add	fp, #8
1ed7c     A7 26 02 FB | 	rdlong	local01, fp
1ed80     08 4E 85 F1 | 	sub	fp, #8
1ed84     1E 26 0E F2 | 	cmp	local01, #30 wz
1ed88     14 4E 05 A1 |  if_e	add	fp, #20
1ed8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed90     14 4E 85 A1 |  if_e	sub	fp, #20
1ed94     16 2B 02 A6 |  if_e	mov	local03, local04
1ed98     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ed9c     48 00 90 5D |  if_ne	jmp	#LR__2442
1eda0     00 26 06 F6 | 	mov	local01, #0
1eda4     A7 28 02 FB | 	rdlong	local02, fp
1eda8     0C 4E 05 F1 | 	add	fp, #12
1edac     A7 12 02 FB | 	rdlong	arg01, fp
1edb0     0C 4E 85 F1 | 	sub	fp, #12
1edb4     09 13 52 F6 | 	abs	arg01, arg01 wc
1edb8     1F 2E C6 C9 |  if_b	decod	local05, #31
1edbc     00 2E 06 36 |  if_ae	mov	local05, #0
1edc0     1C AD B0 FD | 	call	#__system___float_fromuns
1edc4     17 FB 61 F5 | 	xor	result1, local05
1edc8     FD 14 02 F6 | 	mov	arg02, result1
1edcc     14 13 02 F6 | 	mov	arg01, local02
1edd0     01 16 66 F6 | 	neg	arg03, #1
1edd4     40 B5 B0 FD | 	call	#__system___float_cmp
1edd8     01 FA 55 F2 | 	cmps	result1, #1 wc
1eddc     00 26 26 36 |  if_ae	not	local01, #0
1ede0     A7 26 62 FC | 	wrlong	local01, fp
1ede4     5C 03 90 FD | 	jmp	#LR__2453
1ede8                 | LR__2442
1ede8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1ede8     08 4E 05 F1 | 	add	fp, #8
1edec     A7 26 02 FB | 	rdlong	local01, fp
1edf0     08 4E 85 F1 | 	sub	fp, #8
1edf4     1E 26 0E F2 | 	cmp	local01, #30 wz
1edf8     14 4E 05 A1 |  if_e	add	fp, #20
1edfc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee00     14 4E 85 A1 |  if_e	sub	fp, #20
1ee04     16 2B 02 A6 |  if_e	mov	local03, local04
1ee08     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee0c     38 00 90 5D |  if_ne	jmp	#LR__2443
1ee10     00 26 06 F6 | 	mov	local01, #0
1ee14     A7 28 02 FB | 	rdlong	local02, fp
1ee18     0C 4E 05 F1 | 	add	fp, #12
1ee1c     A7 12 02 FB | 	rdlong	arg01, fp
1ee20     0C 4E 85 F1 | 	sub	fp, #12
1ee24     B8 AC B0 FD | 	call	#__system___float_fromuns
1ee28     FD 14 02 F6 | 	mov	arg02, result1
1ee2c     14 13 02 F6 | 	mov	arg01, local02
1ee30     01 16 66 F6 | 	neg	arg03, #1
1ee34     E0 B4 B0 FD | 	call	#__system___float_cmp
1ee38     01 FA 55 F2 | 	cmps	result1, #1 wc
1ee3c     00 26 26 36 |  if_ae	not	local01, #0
1ee40     A7 26 62 FC | 	wrlong	local01, fp
1ee44     FC 02 90 FD | 	jmp	#LR__2453
1ee48                 | LR__2443
1ee48                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1ee48     08 4E 05 F1 | 	add	fp, #8
1ee4c     A7 26 02 FB | 	rdlong	local01, fp
1ee50     08 4E 85 F1 | 	sub	fp, #8
1ee54     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee58     14 4E 05 A1 |  if_e	add	fp, #20
1ee5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee60     14 4E 85 A1 |  if_e	sub	fp, #20
1ee64     16 2B 02 A6 |  if_e	mov	local03, local04
1ee68     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ee6c     44 00 90 5D |  if_ne	jmp	#LR__2444
1ee70     00 26 06 F6 | 	mov	local01, #0
1ee74     A7 12 02 FB | 	rdlong	arg01, fp
1ee78     09 13 52 F6 | 	abs	arg01, arg01 wc
1ee7c     1F 2E C6 C9 |  if_b	decod	local05, #31
1ee80     00 2E 06 36 |  if_ae	mov	local05, #0
1ee84     58 AC B0 FD | 	call	#__system___float_fromuns
1ee88     17 FB 61 F5 | 	xor	result1, local05
1ee8c     FD 12 02 F6 | 	mov	arg01, result1
1ee90     0C 4E 05 F1 | 	add	fp, #12
1ee94     A7 14 02 FB | 	rdlong	arg02, fp
1ee98     0C 4E 85 F1 | 	sub	fp, #12
1ee9c     01 16 66 F6 | 	neg	arg03, #1
1eea0     74 B4 B0 FD | 	call	#__system___float_cmp
1eea4     01 FA 55 F2 | 	cmps	result1, #1 wc
1eea8     00 26 26 36 |  if_ae	not	local01, #0
1eeac     A7 26 62 FC | 	wrlong	local01, fp
1eeb0     90 02 90 FD | 	jmp	#LR__2453
1eeb4                 | LR__2444
1eeb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1eeb4     08 4E 05 F1 | 	add	fp, #8
1eeb8     A7 26 02 FB | 	rdlong	local01, fp
1eebc     08 4E 85 F1 | 	sub	fp, #8
1eec0     1C 26 0E F2 | 	cmp	local01, #28 wz
1eec4     14 4E 05 A1 |  if_e	add	fp, #20
1eec8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eecc     14 4E 85 A1 |  if_e	sub	fp, #20
1eed0     16 2B 02 A6 |  if_e	mov	local03, local04
1eed4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eed8     24 00 90 5D |  if_ne	jmp	#LR__2445
1eedc     00 26 06 F6 | 	mov	local01, #0
1eee0     A7 28 02 FB | 	rdlong	local02, fp
1eee4     0C 4E 05 F1 | 	add	fp, #12
1eee8     A7 2A 02 FB | 	rdlong	local03, fp
1eeec     0C 4E 85 F1 | 	sub	fp, #12
1eef0     15 29 5A F2 | 	cmps	local02, local03 wcz
1eef4     01 26 66 16 |  if_a	neg	local01, #1
1eef8     A7 26 62 FC | 	wrlong	local01, fp
1eefc     44 02 90 FD | 	jmp	#LR__2453
1ef00                 | LR__2445
1ef00                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1ef00     08 4E 05 F1 | 	add	fp, #8
1ef04     A7 26 02 FB | 	rdlong	local01, fp
1ef08     08 4E 85 F1 | 	sub	fp, #8
1ef0c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ef10     14 4E 05 A1 |  if_e	add	fp, #20
1ef14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef18     14 4E 85 A1 |  if_e	sub	fp, #20
1ef1c     16 2B 02 A6 |  if_e	mov	local03, local04
1ef20     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ef24     24 00 90 5D |  if_ne	jmp	#LR__2446
1ef28     00 26 06 F6 | 	mov	local01, #0
1ef2c     A7 28 02 FB | 	rdlong	local02, fp
1ef30     0C 4E 05 F1 | 	add	fp, #12
1ef34     A7 2A 02 FB | 	rdlong	local03, fp
1ef38     0C 4E 85 F1 | 	sub	fp, #12
1ef3c     15 29 5A F2 | 	cmps	local02, local03 wcz
1ef40     01 26 66 16 |  if_a	neg	local01, #1
1ef44     A7 26 62 FC | 	wrlong	local01, fp
1ef48     F8 01 90 FD | 	jmp	#LR__2453
1ef4c                 | LR__2446
1ef4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1ef4c     08 4E 05 F1 | 	add	fp, #8
1ef50     A7 26 02 FB | 	rdlong	local01, fp
1ef54     08 4E 85 F1 | 	sub	fp, #8
1ef58     1D 26 0E F2 | 	cmp	local01, #29 wz
1ef5c     14 4E 05 A1 |  if_e	add	fp, #20
1ef60     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef64     14 4E 85 A1 |  if_e	sub	fp, #20
1ef68     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ef6c     34 00 90 5D |  if_ne	jmp	#LR__2447
1ef70     00 26 06 F6 | 	mov	local01, #0
1ef74     A7 12 02 FB | 	rdlong	arg01, fp
1ef78     64 AB B0 FD | 	call	#__system___float_fromuns
1ef7c     FD 12 02 F6 | 	mov	arg01, result1
1ef80     0C 4E 05 F1 | 	add	fp, #12
1ef84     A7 14 02 FB | 	rdlong	arg02, fp
1ef88     0C 4E 85 F1 | 	sub	fp, #12
1ef8c     01 16 66 F6 | 	neg	arg03, #1
1ef90     84 B3 B0 FD | 	call	#__system___float_cmp
1ef94     01 FA 55 F2 | 	cmps	result1, #1 wc
1ef98     00 26 26 36 |  if_ae	not	local01, #0
1ef9c     A7 26 62 FC | 	wrlong	local01, fp
1efa0     A0 01 90 FD | 	jmp	#LR__2453
1efa4                 | LR__2447
1efa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1efa4     08 4E 05 F1 | 	add	fp, #8
1efa8     A7 26 02 FB | 	rdlong	local01, fp
1efac     08 4E 85 F1 | 	sub	fp, #8
1efb0     1D 26 0E F2 | 	cmp	local01, #29 wz
1efb4     14 4E 05 A1 |  if_e	add	fp, #20
1efb8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efbc     14 4E 85 A1 |  if_e	sub	fp, #20
1efc0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1efc4     24 00 90 5D |  if_ne	jmp	#LR__2448
1efc8     00 26 06 F6 | 	mov	local01, #0
1efcc     A7 28 02 FB | 	rdlong	local02, fp
1efd0     0C 4E 05 F1 | 	add	fp, #12
1efd4     A7 2A 02 FB | 	rdlong	local03, fp
1efd8     0C 4E 85 F1 | 	sub	fp, #12
1efdc     15 29 5A F2 | 	cmps	local02, local03 wcz
1efe0     01 26 66 16 |  if_a	neg	local01, #1
1efe4     A7 26 62 FC | 	wrlong	local01, fp
1efe8     58 01 90 FD | 	jmp	#LR__2453
1efec                 | LR__2448
1efec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1efec     08 4E 05 F1 | 	add	fp, #8
1eff0     A7 26 02 FB | 	rdlong	local01, fp
1eff4     08 4E 85 F1 | 	sub	fp, #8
1eff8     1D 26 0E F2 | 	cmp	local01, #29 wz
1effc     14 4E 05 A1 |  if_e	add	fp, #20
1f000     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f004     14 4E 85 A1 |  if_e	sub	fp, #20
1f008     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f00c     24 00 90 5D |  if_ne	jmp	#LR__2449
1f010     00 26 06 F6 | 	mov	local01, #0
1f014     A7 28 02 FB | 	rdlong	local02, fp
1f018     0C 4E 05 F1 | 	add	fp, #12
1f01c     A7 2A 02 FB | 	rdlong	local03, fp
1f020     0C 4E 85 F1 | 	sub	fp, #12
1f024     15 29 1A F2 | 	cmp	local02, local03 wcz
1f028     01 26 66 16 |  if_a	neg	local01, #1
1f02c     A7 26 62 FC | 	wrlong	local01, fp
1f030     10 01 90 FD | 	jmp	#LR__2453
1f034                 | LR__2449
1f034                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1f034     08 4E 05 F1 | 	add	fp, #8
1f038     A7 26 02 FB | 	rdlong	local01, fp
1f03c     08 4E 85 F1 | 	sub	fp, #8
1f040     2B 26 0E F2 | 	cmp	local01, #43 wz
1f044     14 4E 05 A1 |  if_e	add	fp, #20
1f048     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f04c     14 4E 85 A1 |  if_e	sub	fp, #20
1f050     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f054     30 00 90 5D |  if_ne	jmp	#LR__2450
1f058     00 26 06 F6 | 	mov	local01, #0
1f05c     A7 12 02 FB | 	rdlong	arg01, fp
1f060     1C E8 BE FD | 	call	#_convertstring
1f064     FD 12 02 F6 | 	mov	arg01, result1
1f068     0C 4E 05 F1 | 	add	fp, #12
1f06c     A7 14 02 FB | 	rdlong	arg02, fp
1f070     0C 4E 85 F1 | 	sub	fp, #12
1f074     1C 80 B0 FD | 	call	#__system___string_cmp
1f078     01 FA 55 F2 | 	cmps	result1, #1 wc
1f07c     00 26 26 36 |  if_ae	not	local01, #0
1f080     A7 26 62 FC | 	wrlong	local01, fp
1f084     BC 00 90 FD | 	jmp	#LR__2453
1f088                 | LR__2450
1f088                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1f088     08 4E 05 F1 | 	add	fp, #8
1f08c     A7 26 02 FB | 	rdlong	local01, fp
1f090     08 4E 85 F1 | 	sub	fp, #8
1f094     1F 26 0E F2 | 	cmp	local01, #31 wz
1f098     14 4E 05 A1 |  if_e	add	fp, #20
1f09c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f0a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f0a4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f0a8     34 00 90 5D |  if_ne	jmp	#LR__2451
1f0ac     00 26 06 F6 | 	mov	local01, #0
1f0b0     A7 28 02 FB | 	rdlong	local02, fp
1f0b4     0C 4E 05 F1 | 	add	fp, #12
1f0b8     A7 12 02 FB | 	rdlong	arg01, fp
1f0bc     0C 4E 85 F1 | 	sub	fp, #12
1f0c0     BC E7 BE FD | 	call	#_convertstring
1f0c4     FD 14 02 F6 | 	mov	arg02, result1
1f0c8     14 13 02 F6 | 	mov	arg01, local02
1f0cc     C4 7F B0 FD | 	call	#__system___string_cmp
1f0d0     01 FA 55 F2 | 	cmps	result1, #1 wc
1f0d4     00 26 26 36 |  if_ae	not	local01, #0
1f0d8     A7 26 62 FC | 	wrlong	local01, fp
1f0dc     64 00 90 FD | 	jmp	#LR__2453
1f0e0                 | LR__2451
1f0e0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1f0e0     08 4E 05 F1 | 	add	fp, #8
1f0e4     A7 26 02 FB | 	rdlong	local01, fp
1f0e8     08 4E 85 F1 | 	sub	fp, #8
1f0ec     2B 26 0E F2 | 	cmp	local01, #43 wz
1f0f0     14 4E 05 A1 |  if_e	add	fp, #20
1f0f4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f0f8     14 4E 85 A1 |  if_e	sub	fp, #20
1f0fc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f100     3C 00 90 5D |  if_ne	jmp	#LR__2452
1f104     00 26 06 F6 | 	mov	local01, #0
1f108     A7 12 02 FB | 	rdlong	arg01, fp
1f10c     70 E7 BE FD | 	call	#_convertstring
1f110     FD 28 02 F6 | 	mov	local02, result1
1f114     0C 4E 05 F1 | 	add	fp, #12
1f118     A7 12 02 FB | 	rdlong	arg01, fp
1f11c     0C 4E 85 F1 | 	sub	fp, #12
1f120     5C E7 BE FD | 	call	#_convertstring
1f124     FD 14 02 F6 | 	mov	arg02, result1
1f128     14 13 02 F6 | 	mov	arg01, local02
1f12c     64 7F B0 FD | 	call	#__system___string_cmp
1f130     01 FA 55 F2 | 	cmps	result1, #1 wc
1f134     00 26 26 36 |  if_ae	not	local01, #0
1f138     A7 26 62 FC | 	wrlong	local01, fp
1f13c     04 00 90 FD | 	jmp	#LR__2453
1f140                 | LR__2452
1f140     A7 00 68 FC | 	wrlong	#0, fp
1f144                 | LR__2453
1f144     08 4E 05 F1 | 	add	fp, #8
1f148     A7 38 68 FC | 	wrlong	#28, fp
1f14c     08 4E 85 F1 | 	sub	fp, #8
1f150                 | ' t1.result.uresult=0
1f150                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f150     A7 26 0A FB | 	rdlong	local01, fp wz
1f154     A7 02 68 5C |  if_ne	wrlong	#1, fp
1f158     A7 12 02 F6 | 	mov	arg01, fp
1f15c     40 E6 BE FD | 	call	#_push
1f160     A7 F0 03 F6 | 	mov	ptra, fp
1f164     B2 00 A0 FD | 	call	#popregs_
1f168                 | _do_gt_ret
1f168     2D 00 64 FD | 	ret
1f16c                 | 
1f16c                 | ' 
1f16c                 | ' '--------------------------------- less or equal (<=)
1f16c                 | ' 
1f16c                 | ' sub do_le
1f16c                 | _do_le
1f16c     05 4A 05 F6 | 	mov	COUNT_, #5
1f170     A8 00 A0 FD | 	call	#pushregs_
1f174     18 F0 07 F1 | 	add	ptra, #24
1f178     8C E5 BE FD | 	call	#_pop
1f17c     FD 26 02 F6 | 	mov	local01, result1
1f180     FE 28 02 F6 | 	mov	local02, result2
1f184     FF 2A 02 F6 | 	mov	local03, result3
1f188     0C 4E 05 F1 | 	add	fp, #12
1f18c     A7 26 62 FC | 	wrlong	local01, fp
1f190     04 4E 05 F1 | 	add	fp, #4
1f194     A7 28 62 FC | 	wrlong	local02, fp
1f198     04 4E 05 F1 | 	add	fp, #4
1f19c     A7 2A 62 FC | 	wrlong	local03, fp
1f1a0     14 4E 85 F1 | 	sub	fp, #20
1f1a4     60 E5 BE FD | 	call	#_pop
1f1a8     FF 2A 02 F6 | 	mov	local03, result3
1f1ac     A7 FA 61 FC | 	wrlong	result1, fp
1f1b0     04 4E 05 F1 | 	add	fp, #4
1f1b4     A7 FC 61 FC | 	wrlong	result2, fp
1f1b8     04 4E 05 F1 | 	add	fp, #4
1f1bc     A7 2A 62 FC | 	wrlong	local03, fp
1f1c0                 | ' 
1f1c0                 | ' t2=pop()
1f1c0                 | ' t1=pop()
1f1c0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1f1c0     08 4E 85 F1 | 	sub	fp, #8
1f1c4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f1c8     14 4E 05 A1 |  if_e	add	fp, #20
1f1cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1d0     14 4E 85 A1 |  if_e	sub	fp, #20
1f1d4     16 2B 02 A6 |  if_e	mov	local03, local04
1f1d8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f1dc     28 00 90 5D |  if_ne	jmp	#LR__2460
1f1e0     00 26 06 F6 | 	mov	local01, #0
1f1e4     A7 12 02 FB | 	rdlong	arg01, fp
1f1e8     0C 4E 05 F1 | 	add	fp, #12
1f1ec     A7 14 02 FB | 	rdlong	arg02, fp
1f1f0     0C 4E 85 F1 | 	sub	fp, #12
1f1f4     9C 7E B0 FD | 	call	#__system___string_cmp
1f1f8     01 FA 55 F2 | 	cmps	result1, #1 wc
1f1fc     00 26 26 C6 |  if_b	not	local01, #0
1f200     A7 26 62 FC | 	wrlong	local01, fp
1f204     20 04 90 FD | 	jmp	#LR__2473
1f208                 | LR__2460
1f208                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1f208     08 4E 05 F1 | 	add	fp, #8
1f20c     A7 26 02 FB | 	rdlong	local01, fp
1f210     08 4E 85 F1 | 	sub	fp, #8
1f214     1E 26 0E F2 | 	cmp	local01, #30 wz
1f218     14 4E 05 A1 |  if_e	add	fp, #20
1f21c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f220     14 4E 85 A1 |  if_e	sub	fp, #20
1f224     16 2B 02 A6 |  if_e	mov	local03, local04
1f228     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f22c     2C 00 90 5D |  if_ne	jmp	#LR__2461
1f230     00 26 06 F6 | 	mov	local01, #0
1f234     A7 12 02 FB | 	rdlong	arg01, fp
1f238     0C 4E 05 F1 | 	add	fp, #12
1f23c     A7 14 02 FB | 	rdlong	arg02, fp
1f240     0C 4E 85 F1 | 	sub	fp, #12
1f244     01 16 06 F6 | 	mov	arg03, #1
1f248     CC B0 B0 FD | 	call	#__system___float_cmp
1f24c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f250     00 26 26 C6 |  if_b	not	local01, #0
1f254     A7 26 62 FC | 	wrlong	local01, fp
1f258     CC 03 90 FD | 	jmp	#LR__2473
1f25c                 | LR__2461
1f25c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1f25c     08 4E 05 F1 | 	add	fp, #8
1f260     A7 26 02 FB | 	rdlong	local01, fp
1f264     08 4E 85 F1 | 	sub	fp, #8
1f268     1E 26 0E F2 | 	cmp	local01, #30 wz
1f26c     14 4E 05 A1 |  if_e	add	fp, #20
1f270     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f274     14 4E 85 A1 |  if_e	sub	fp, #20
1f278     16 2B 02 A6 |  if_e	mov	local03, local04
1f27c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f280     48 00 90 5D |  if_ne	jmp	#LR__2462
1f284     00 26 06 F6 | 	mov	local01, #0
1f288     A7 28 02 FB | 	rdlong	local02, fp
1f28c     0C 4E 05 F1 | 	add	fp, #12
1f290     A7 12 02 FB | 	rdlong	arg01, fp
1f294     0C 4E 85 F1 | 	sub	fp, #12
1f298     09 13 52 F6 | 	abs	arg01, arg01 wc
1f29c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f2a0     00 2E 06 36 |  if_ae	mov	local05, #0
1f2a4     38 A8 B0 FD | 	call	#__system___float_fromuns
1f2a8     17 FB 61 F5 | 	xor	result1, local05
1f2ac     FD 14 02 F6 | 	mov	arg02, result1
1f2b0     14 13 02 F6 | 	mov	arg01, local02
1f2b4     01 16 06 F6 | 	mov	arg03, #1
1f2b8     5C B0 B0 FD | 	call	#__system___float_cmp
1f2bc     01 FA 55 F2 | 	cmps	result1, #1 wc
1f2c0     00 26 26 C6 |  if_b	not	local01, #0
1f2c4     A7 26 62 FC | 	wrlong	local01, fp
1f2c8     5C 03 90 FD | 	jmp	#LR__2473
1f2cc                 | LR__2462
1f2cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1f2cc     08 4E 05 F1 | 	add	fp, #8
1f2d0     A7 26 02 FB | 	rdlong	local01, fp
1f2d4     08 4E 85 F1 | 	sub	fp, #8
1f2d8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f2dc     14 4E 05 A1 |  if_e	add	fp, #20
1f2e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f2e8     16 2B 02 A6 |  if_e	mov	local03, local04
1f2ec     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f2f0     38 00 90 5D |  if_ne	jmp	#LR__2463
1f2f4     00 26 06 F6 | 	mov	local01, #0
1f2f8     A7 28 02 FB | 	rdlong	local02, fp
1f2fc     0C 4E 05 F1 | 	add	fp, #12
1f300     A7 12 02 FB | 	rdlong	arg01, fp
1f304     0C 4E 85 F1 | 	sub	fp, #12
1f308     D4 A7 B0 FD | 	call	#__system___float_fromuns
1f30c     FD 14 02 F6 | 	mov	arg02, result1
1f310     14 13 02 F6 | 	mov	arg01, local02
1f314     01 16 06 F6 | 	mov	arg03, #1
1f318     FC AF B0 FD | 	call	#__system___float_cmp
1f31c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f320     00 26 26 C6 |  if_b	not	local01, #0
1f324     A7 26 62 FC | 	wrlong	local01, fp
1f328     FC 02 90 FD | 	jmp	#LR__2473
1f32c                 | LR__2463
1f32c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1f32c     08 4E 05 F1 | 	add	fp, #8
1f330     A7 26 02 FB | 	rdlong	local01, fp
1f334     08 4E 85 F1 | 	sub	fp, #8
1f338     1C 26 0E F2 | 	cmp	local01, #28 wz
1f33c     14 4E 05 A1 |  if_e	add	fp, #20
1f340     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f344     14 4E 85 A1 |  if_e	sub	fp, #20
1f348     16 2B 02 A6 |  if_e	mov	local03, local04
1f34c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f350     44 00 90 5D |  if_ne	jmp	#LR__2464
1f354     00 26 06 F6 | 	mov	local01, #0
1f358     A7 12 02 FB | 	rdlong	arg01, fp
1f35c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f360     1F 2E C6 C9 |  if_b	decod	local05, #31
1f364     00 2E 06 36 |  if_ae	mov	local05, #0
1f368     74 A7 B0 FD | 	call	#__system___float_fromuns
1f36c     17 FB 61 F5 | 	xor	result1, local05
1f370     FD 12 02 F6 | 	mov	arg01, result1
1f374     0C 4E 05 F1 | 	add	fp, #12
1f378     A7 14 02 FB | 	rdlong	arg02, fp
1f37c     0C 4E 85 F1 | 	sub	fp, #12
1f380     01 16 06 F6 | 	mov	arg03, #1
1f384     90 AF B0 FD | 	call	#__system___float_cmp
1f388     01 FA 55 F2 | 	cmps	result1, #1 wc
1f38c     00 26 26 C6 |  if_b	not	local01, #0
1f390     A7 26 62 FC | 	wrlong	local01, fp
1f394     90 02 90 FD | 	jmp	#LR__2473
1f398                 | LR__2464
1f398                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1f398     08 4E 05 F1 | 	add	fp, #8
1f39c     A7 26 02 FB | 	rdlong	local01, fp
1f3a0     08 4E 85 F1 | 	sub	fp, #8
1f3a4     1C 26 0E F2 | 	cmp	local01, #28 wz
1f3a8     14 4E 05 A1 |  if_e	add	fp, #20
1f3ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f3b4     16 2B 02 A6 |  if_e	mov	local03, local04
1f3b8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f3bc     24 00 90 5D |  if_ne	jmp	#LR__2465
1f3c0     00 26 06 F6 | 	mov	local01, #0
1f3c4     A7 28 02 FB | 	rdlong	local02, fp
1f3c8     0C 4E 05 F1 | 	add	fp, #12
1f3cc     A7 2A 02 FB | 	rdlong	local03, fp
1f3d0     0C 4E 85 F1 | 	sub	fp, #12
1f3d4     15 29 5A F2 | 	cmps	local02, local03 wcz
1f3d8     01 26 66 E6 |  if_be	neg	local01, #1
1f3dc     A7 26 62 FC | 	wrlong	local01, fp
1f3e0     44 02 90 FD | 	jmp	#LR__2473
1f3e4                 | LR__2465
1f3e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1f3e4     08 4E 05 F1 | 	add	fp, #8
1f3e8     A7 26 02 FB | 	rdlong	local01, fp
1f3ec     08 4E 85 F1 | 	sub	fp, #8
1f3f0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f3f4     14 4E 05 A1 |  if_e	add	fp, #20
1f3f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3fc     14 4E 85 A1 |  if_e	sub	fp, #20
1f400     16 2B 02 A6 |  if_e	mov	local03, local04
1f404     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f408     24 00 90 5D |  if_ne	jmp	#LR__2466
1f40c     00 26 06 F6 | 	mov	local01, #0
1f410     A7 28 02 FB | 	rdlong	local02, fp
1f414     0C 4E 05 F1 | 	add	fp, #12
1f418     A7 2A 02 FB | 	rdlong	local03, fp
1f41c     0C 4E 85 F1 | 	sub	fp, #12
1f420     15 29 5A F2 | 	cmps	local02, local03 wcz
1f424     01 26 66 E6 |  if_be	neg	local01, #1
1f428     A7 26 62 FC | 	wrlong	local01, fp
1f42c     F8 01 90 FD | 	jmp	#LR__2473
1f430                 | LR__2466
1f430                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1f430     08 4E 05 F1 | 	add	fp, #8
1f434     A7 26 02 FB | 	rdlong	local01, fp
1f438     08 4E 85 F1 | 	sub	fp, #8
1f43c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f440     14 4E 05 A1 |  if_e	add	fp, #20
1f444     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f448     14 4E 85 A1 |  if_e	sub	fp, #20
1f44c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f450     34 00 90 5D |  if_ne	jmp	#LR__2467
1f454     00 26 06 F6 | 	mov	local01, #0
1f458     A7 12 02 FB | 	rdlong	arg01, fp
1f45c     80 A6 B0 FD | 	call	#__system___float_fromuns
1f460     FD 12 02 F6 | 	mov	arg01, result1
1f464     0C 4E 05 F1 | 	add	fp, #12
1f468     A7 14 02 FB | 	rdlong	arg02, fp
1f46c     0C 4E 85 F1 | 	sub	fp, #12
1f470     01 16 06 F6 | 	mov	arg03, #1
1f474     A0 AE B0 FD | 	call	#__system___float_cmp
1f478     01 FA 55 F2 | 	cmps	result1, #1 wc
1f47c     00 26 26 C6 |  if_b	not	local01, #0
1f480     A7 26 62 FC | 	wrlong	local01, fp
1f484     A0 01 90 FD | 	jmp	#LR__2473
1f488                 | LR__2467
1f488                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1f488     08 4E 05 F1 | 	add	fp, #8
1f48c     A7 26 02 FB | 	rdlong	local01, fp
1f490     08 4E 85 F1 | 	sub	fp, #8
1f494     1D 26 0E F2 | 	cmp	local01, #29 wz
1f498     14 4E 05 A1 |  if_e	add	fp, #20
1f49c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f4a4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f4a8     24 00 90 5D |  if_ne	jmp	#LR__2468
1f4ac     00 26 06 F6 | 	mov	local01, #0
1f4b0     A7 28 02 FB | 	rdlong	local02, fp
1f4b4     0C 4E 05 F1 | 	add	fp, #12
1f4b8     A7 2A 02 FB | 	rdlong	local03, fp
1f4bc     0C 4E 85 F1 | 	sub	fp, #12
1f4c0     15 29 5A F2 | 	cmps	local02, local03 wcz
1f4c4     01 26 66 E6 |  if_be	neg	local01, #1
1f4c8     A7 26 62 FC | 	wrlong	local01, fp
1f4cc     58 01 90 FD | 	jmp	#LR__2473
1f4d0                 | LR__2468
1f4d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1f4d0     08 4E 05 F1 | 	add	fp, #8
1f4d4     A7 26 02 FB | 	rdlong	local01, fp
1f4d8     08 4E 85 F1 | 	sub	fp, #8
1f4dc     1D 26 0E F2 | 	cmp	local01, #29 wz
1f4e0     14 4E 05 A1 |  if_e	add	fp, #20
1f4e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4e8     14 4E 85 A1 |  if_e	sub	fp, #20
1f4ec     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f4f0     24 00 90 5D |  if_ne	jmp	#LR__2469
1f4f4     00 26 06 F6 | 	mov	local01, #0
1f4f8     A7 28 02 FB | 	rdlong	local02, fp
1f4fc     0C 4E 05 F1 | 	add	fp, #12
1f500     A7 2A 02 FB | 	rdlong	local03, fp
1f504     0C 4E 85 F1 | 	sub	fp, #12
1f508     15 29 1A F2 | 	cmp	local02, local03 wcz
1f50c     01 26 66 E6 |  if_be	neg	local01, #1
1f510     A7 26 62 FC | 	wrlong	local01, fp
1f514     10 01 90 FD | 	jmp	#LR__2473
1f518                 | LR__2469
1f518                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1f518     08 4E 05 F1 | 	add	fp, #8
1f51c     A7 26 02 FB | 	rdlong	local01, fp
1f520     08 4E 85 F1 | 	sub	fp, #8
1f524     2B 26 0E F2 | 	cmp	local01, #43 wz
1f528     14 4E 05 A1 |  if_e	add	fp, #20
1f52c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f530     14 4E 85 A1 |  if_e	sub	fp, #20
1f534     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f538     30 00 90 5D |  if_ne	jmp	#LR__2470
1f53c     00 26 06 F6 | 	mov	local01, #0
1f540     A7 12 02 FB | 	rdlong	arg01, fp
1f544     38 E3 BE FD | 	call	#_convertstring
1f548     FD 12 02 F6 | 	mov	arg01, result1
1f54c     0C 4E 05 F1 | 	add	fp, #12
1f550     A7 14 02 FB | 	rdlong	arg02, fp
1f554     0C 4E 85 F1 | 	sub	fp, #12
1f558     38 7B B0 FD | 	call	#__system___string_cmp
1f55c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f560     00 26 26 C6 |  if_b	not	local01, #0
1f564     A7 26 62 FC | 	wrlong	local01, fp
1f568     BC 00 90 FD | 	jmp	#LR__2473
1f56c                 | LR__2470
1f56c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1f56c     08 4E 05 F1 | 	add	fp, #8
1f570     A7 26 02 FB | 	rdlong	local01, fp
1f574     08 4E 85 F1 | 	sub	fp, #8
1f578     1F 26 0E F2 | 	cmp	local01, #31 wz
1f57c     14 4E 05 A1 |  if_e	add	fp, #20
1f580     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f584     14 4E 85 A1 |  if_e	sub	fp, #20
1f588     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f58c     34 00 90 5D |  if_ne	jmp	#LR__2471
1f590     00 26 06 F6 | 	mov	local01, #0
1f594     A7 28 02 FB | 	rdlong	local02, fp
1f598     0C 4E 05 F1 | 	add	fp, #12
1f59c     A7 12 02 FB | 	rdlong	arg01, fp
1f5a0     0C 4E 85 F1 | 	sub	fp, #12
1f5a4     D8 E2 BE FD | 	call	#_convertstring
1f5a8     FD 14 02 F6 | 	mov	arg02, result1
1f5ac     14 13 02 F6 | 	mov	arg01, local02
1f5b0     E0 7A B0 FD | 	call	#__system___string_cmp
1f5b4     01 FA 55 F2 | 	cmps	result1, #1 wc
1f5b8     00 26 26 C6 |  if_b	not	local01, #0
1f5bc     A7 26 62 FC | 	wrlong	local01, fp
1f5c0     64 00 90 FD | 	jmp	#LR__2473
1f5c4                 | LR__2471
1f5c4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1f5c4     08 4E 05 F1 | 	add	fp, #8
1f5c8     A7 26 02 FB | 	rdlong	local01, fp
1f5cc     08 4E 85 F1 | 	sub	fp, #8
1f5d0     2B 26 0E F2 | 	cmp	local01, #43 wz
1f5d4     14 4E 05 A1 |  if_e	add	fp, #20
1f5d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f5dc     14 4E 85 A1 |  if_e	sub	fp, #20
1f5e0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f5e4     3C 00 90 5D |  if_ne	jmp	#LR__2472
1f5e8     00 26 06 F6 | 	mov	local01, #0
1f5ec     A7 12 02 FB | 	rdlong	arg01, fp
1f5f0     8C E2 BE FD | 	call	#_convertstring
1f5f4     FD 28 02 F6 | 	mov	local02, result1
1f5f8     0C 4E 05 F1 | 	add	fp, #12
1f5fc     A7 12 02 FB | 	rdlong	arg01, fp
1f600     0C 4E 85 F1 | 	sub	fp, #12
1f604     78 E2 BE FD | 	call	#_convertstring
1f608     FD 14 02 F6 | 	mov	arg02, result1
1f60c     14 13 02 F6 | 	mov	arg01, local02
1f610     80 7A B0 FD | 	call	#__system___string_cmp
1f614     01 FA 55 F2 | 	cmps	result1, #1 wc
1f618     00 26 26 C6 |  if_b	not	local01, #0
1f61c     A7 26 62 FC | 	wrlong	local01, fp
1f620     04 00 90 FD | 	jmp	#LR__2473
1f624                 | LR__2472
1f624     A7 00 68 FC | 	wrlong	#0, fp
1f628                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f628                 | LR__2473
1f628     08 4E 05 F1 | 	add	fp, #8
1f62c     A7 38 68 FC | 	wrlong	#28, fp
1f630     08 4E 85 F1 | 	sub	fp, #8
1f634     A7 12 02 F6 | 	mov	arg01, fp
1f638     64 E1 BE FD | 	call	#_push
1f63c     A7 F0 03 F6 | 	mov	ptra, fp
1f640     B2 00 A0 FD | 	call	#popregs_
1f644                 | _do_le_ret
1f644     2D 00 64 FD | 	ret
1f648                 | 
1f648                 | ' 
1f648                 | ' '--------------------------------- less than (<)
1f648                 | ' 
1f648                 | ' sub do_lt
1f648                 | _do_lt
1f648     05 4A 05 F6 | 	mov	COUNT_, #5
1f64c     A8 00 A0 FD | 	call	#pushregs_
1f650     18 F0 07 F1 | 	add	ptra, #24
1f654     B0 E0 BE FD | 	call	#_pop
1f658     FD 26 02 F6 | 	mov	local01, result1
1f65c     FE 28 02 F6 | 	mov	local02, result2
1f660     FF 2A 02 F6 | 	mov	local03, result3
1f664     0C 4E 05 F1 | 	add	fp, #12
1f668     A7 26 62 FC | 	wrlong	local01, fp
1f66c     04 4E 05 F1 | 	add	fp, #4
1f670     A7 28 62 FC | 	wrlong	local02, fp
1f674     04 4E 05 F1 | 	add	fp, #4
1f678     A7 2A 62 FC | 	wrlong	local03, fp
1f67c     14 4E 85 F1 | 	sub	fp, #20
1f680     84 E0 BE FD | 	call	#_pop
1f684     FF 2A 02 F6 | 	mov	local03, result3
1f688     A7 FA 61 FC | 	wrlong	result1, fp
1f68c     04 4E 05 F1 | 	add	fp, #4
1f690     A7 FC 61 FC | 	wrlong	result2, fp
1f694     04 4E 05 F1 | 	add	fp, #4
1f698     A7 2A 62 FC | 	wrlong	local03, fp
1f69c                 | ' 
1f69c                 | ' t2=pop()
1f69c                 | ' t1=pop()
1f69c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1f69c     08 4E 85 F1 | 	sub	fp, #8
1f6a0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f6a4     14 4E 05 A1 |  if_e	add	fp, #20
1f6a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6ac     14 4E 85 A1 |  if_e	sub	fp, #20
1f6b0     16 2B 02 A6 |  if_e	mov	local03, local04
1f6b4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f6b8     28 00 90 5D |  if_ne	jmp	#LR__2480
1f6bc     00 26 06 F6 | 	mov	local01, #0
1f6c0     A7 12 02 FB | 	rdlong	arg01, fp
1f6c4     0C 4E 05 F1 | 	add	fp, #12
1f6c8     A7 14 02 FB | 	rdlong	arg02, fp
1f6cc     0C 4E 85 F1 | 	sub	fp, #12
1f6d0     C0 79 B0 FD | 	call	#__system___string_cmp
1f6d4     00 FA 55 F2 | 	cmps	result1, #0 wc
1f6d8     00 26 26 C6 |  if_b	not	local01, #0
1f6dc     A7 26 62 FC | 	wrlong	local01, fp
1f6e0     10 04 90 FD | 	jmp	#LR__2493
1f6e4                 | LR__2480
1f6e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1f6e4     08 4E 05 F1 | 	add	fp, #8
1f6e8     A7 26 02 FB | 	rdlong	local01, fp
1f6ec     08 4E 85 F1 | 	sub	fp, #8
1f6f0     1E 26 0E F2 | 	cmp	local01, #30 wz
1f6f4     14 4E 05 A1 |  if_e	add	fp, #20
1f6f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6fc     14 4E 85 A1 |  if_e	sub	fp, #20
1f700     16 2B 02 A6 |  if_e	mov	local03, local04
1f704     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f708     2C 00 90 5D |  if_ne	jmp	#LR__2481
1f70c     00 26 06 F6 | 	mov	local01, #0
1f710     A7 12 02 FB | 	rdlong	arg01, fp
1f714     0C 4E 05 F1 | 	add	fp, #12
1f718     A7 14 02 FB | 	rdlong	arg02, fp
1f71c     0C 4E 85 F1 | 	sub	fp, #12
1f720     01 16 06 F6 | 	mov	arg03, #1
1f724     F0 AB B0 FD | 	call	#__system___float_cmp
1f728     00 FA 55 F2 | 	cmps	result1, #0 wc
1f72c     00 26 26 C6 |  if_b	not	local01, #0
1f730     A7 26 62 FC | 	wrlong	local01, fp
1f734     BC 03 90 FD | 	jmp	#LR__2493
1f738                 | LR__2481
1f738                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1f738     08 4E 05 F1 | 	add	fp, #8
1f73c     A7 26 02 FB | 	rdlong	local01, fp
1f740     08 4E 85 F1 | 	sub	fp, #8
1f744     1E 26 0E F2 | 	cmp	local01, #30 wz
1f748     14 4E 05 A1 |  if_e	add	fp, #20
1f74c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f750     14 4E 85 A1 |  if_e	sub	fp, #20
1f754     16 2B 02 A6 |  if_e	mov	local03, local04
1f758     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f75c     48 00 90 5D |  if_ne	jmp	#LR__2482
1f760     00 26 06 F6 | 	mov	local01, #0
1f764     A7 28 02 FB | 	rdlong	local02, fp
1f768     0C 4E 05 F1 | 	add	fp, #12
1f76c     A7 12 02 FB | 	rdlong	arg01, fp
1f770     0C 4E 85 F1 | 	sub	fp, #12
1f774     09 13 52 F6 | 	abs	arg01, arg01 wc
1f778     1F 2E C6 C9 |  if_b	decod	local05, #31
1f77c     00 2E 06 36 |  if_ae	mov	local05, #0
1f780     5C A3 B0 FD | 	call	#__system___float_fromuns
1f784     17 FB 61 F5 | 	xor	result1, local05
1f788     FD 14 02 F6 | 	mov	arg02, result1
1f78c     14 13 02 F6 | 	mov	arg01, local02
1f790     01 16 06 F6 | 	mov	arg03, #1
1f794     80 AB B0 FD | 	call	#__system___float_cmp
1f798     00 FA 55 F2 | 	cmps	result1, #0 wc
1f79c     00 26 26 C6 |  if_b	not	local01, #0
1f7a0     A7 26 62 FC | 	wrlong	local01, fp
1f7a4     4C 03 90 FD | 	jmp	#LR__2493
1f7a8                 | LR__2482
1f7a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1f7a8     08 4E 05 F1 | 	add	fp, #8
1f7ac     A7 26 02 FB | 	rdlong	local01, fp
1f7b0     08 4E 85 F1 | 	sub	fp, #8
1f7b4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f7b8     14 4E 05 A1 |  if_e	add	fp, #20
1f7bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7c0     14 4E 85 A1 |  if_e	sub	fp, #20
1f7c4     16 2B 02 A6 |  if_e	mov	local03, local04
1f7c8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f7cc     38 00 90 5D |  if_ne	jmp	#LR__2483
1f7d0     00 26 06 F6 | 	mov	local01, #0
1f7d4     A7 28 02 FB | 	rdlong	local02, fp
1f7d8     0C 4E 05 F1 | 	add	fp, #12
1f7dc     A7 12 02 FB | 	rdlong	arg01, fp
1f7e0     0C 4E 85 F1 | 	sub	fp, #12
1f7e4     F8 A2 B0 FD | 	call	#__system___float_fromuns
1f7e8     FD 14 02 F6 | 	mov	arg02, result1
1f7ec     14 13 02 F6 | 	mov	arg01, local02
1f7f0     01 16 06 F6 | 	mov	arg03, #1
1f7f4     20 AB B0 FD | 	call	#__system___float_cmp
1f7f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f7fc     00 26 26 C6 |  if_b	not	local01, #0
1f800     A7 26 62 FC | 	wrlong	local01, fp
1f804     EC 02 90 FD | 	jmp	#LR__2493
1f808                 | LR__2483
1f808                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1f808     08 4E 05 F1 | 	add	fp, #8
1f80c     A7 26 02 FB | 	rdlong	local01, fp
1f810     08 4E 85 F1 | 	sub	fp, #8
1f814     1C 26 0E F2 | 	cmp	local01, #28 wz
1f818     14 4E 05 A1 |  if_e	add	fp, #20
1f81c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f820     14 4E 85 A1 |  if_e	sub	fp, #20
1f824     16 2B 02 A6 |  if_e	mov	local03, local04
1f828     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f82c     44 00 90 5D |  if_ne	jmp	#LR__2484
1f830     00 26 06 F6 | 	mov	local01, #0
1f834     A7 12 02 FB | 	rdlong	arg01, fp
1f838     09 13 52 F6 | 	abs	arg01, arg01 wc
1f83c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f840     00 2E 06 36 |  if_ae	mov	local05, #0
1f844     98 A2 B0 FD | 	call	#__system___float_fromuns
1f848     17 FB 61 F5 | 	xor	result1, local05
1f84c     FD 12 02 F6 | 	mov	arg01, result1
1f850     0C 4E 05 F1 | 	add	fp, #12
1f854     A7 14 02 FB | 	rdlong	arg02, fp
1f858     0C 4E 85 F1 | 	sub	fp, #12
1f85c     01 16 06 F6 | 	mov	arg03, #1
1f860     B4 AA B0 FD | 	call	#__system___float_cmp
1f864     00 FA 55 F2 | 	cmps	result1, #0 wc
1f868     00 26 26 C6 |  if_b	not	local01, #0
1f86c     A7 26 62 FC | 	wrlong	local01, fp
1f870     80 02 90 FD | 	jmp	#LR__2493
1f874                 | LR__2484
1f874                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1f874     08 4E 05 F1 | 	add	fp, #8
1f878     A7 26 02 FB | 	rdlong	local01, fp
1f87c     08 4E 85 F1 | 	sub	fp, #8
1f880     1C 26 0E F2 | 	cmp	local01, #28 wz
1f884     14 4E 05 A1 |  if_e	add	fp, #20
1f888     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f88c     14 4E 85 A1 |  if_e	sub	fp, #20
1f890     16 2B 02 A6 |  if_e	mov	local03, local04
1f894     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f898     20 00 90 5D |  if_ne	jmp	#LR__2485
1f89c     A7 28 02 FB | 	rdlong	local02, fp
1f8a0     0C 4E 05 F1 | 	add	fp, #12
1f8a4     A7 2A 02 FB | 	rdlong	local03, fp
1f8a8     0C 4E 85 F1 | 	sub	fp, #12
1f8ac     15 29 52 F2 | 	cmps	local02, local03 wc
1f8b0     13 27 A2 F1 | 	subx	local01, local01
1f8b4     A7 26 62 FC | 	wrlong	local01, fp
1f8b8     38 02 90 FD | 	jmp	#LR__2493
1f8bc                 | LR__2485
1f8bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1f8bc     08 4E 05 F1 | 	add	fp, #8
1f8c0     A7 26 02 FB | 	rdlong	local01, fp
1f8c4     08 4E 85 F1 | 	sub	fp, #8
1f8c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f8cc     14 4E 05 A1 |  if_e	add	fp, #20
1f8d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f8d4     14 4E 85 A1 |  if_e	sub	fp, #20
1f8d8     16 2B 02 A6 |  if_e	mov	local03, local04
1f8dc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f8e0     20 00 90 5D |  if_ne	jmp	#LR__2486
1f8e4     A7 28 02 FB | 	rdlong	local02, fp
1f8e8     0C 4E 05 F1 | 	add	fp, #12
1f8ec     A7 2A 02 FB | 	rdlong	local03, fp
1f8f0     0C 4E 85 F1 | 	sub	fp, #12
1f8f4     15 29 52 F2 | 	cmps	local02, local03 wc
1f8f8     13 27 A2 F1 | 	subx	local01, local01
1f8fc     A7 26 62 FC | 	wrlong	local01, fp
1f900     F0 01 90 FD | 	jmp	#LR__2493
1f904                 | LR__2486
1f904                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1f904     08 4E 05 F1 | 	add	fp, #8
1f908     A7 26 02 FB | 	rdlong	local01, fp
1f90c     08 4E 85 F1 | 	sub	fp, #8
1f910     1D 26 0E F2 | 	cmp	local01, #29 wz
1f914     14 4E 05 A1 |  if_e	add	fp, #20
1f918     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f91c     14 4E 85 A1 |  if_e	sub	fp, #20
1f920     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f924     34 00 90 5D |  if_ne	jmp	#LR__2487
1f928     00 26 06 F6 | 	mov	local01, #0
1f92c     A7 12 02 FB | 	rdlong	arg01, fp
1f930     AC A1 B0 FD | 	call	#__system___float_fromuns
1f934     FD 12 02 F6 | 	mov	arg01, result1
1f938     0C 4E 05 F1 | 	add	fp, #12
1f93c     A7 14 02 FB | 	rdlong	arg02, fp
1f940     0C 4E 85 F1 | 	sub	fp, #12
1f944     01 16 06 F6 | 	mov	arg03, #1
1f948     CC A9 B0 FD | 	call	#__system___float_cmp
1f94c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f950     00 26 26 C6 |  if_b	not	local01, #0
1f954     A7 26 62 FC | 	wrlong	local01, fp
1f958     98 01 90 FD | 	jmp	#LR__2493
1f95c                 | LR__2487
1f95c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1f95c     08 4E 05 F1 | 	add	fp, #8
1f960     A7 26 02 FB | 	rdlong	local01, fp
1f964     08 4E 85 F1 | 	sub	fp, #8
1f968     1D 26 0E F2 | 	cmp	local01, #29 wz
1f96c     14 4E 05 A1 |  if_e	add	fp, #20
1f970     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f974     14 4E 85 A1 |  if_e	sub	fp, #20
1f978     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f97c     20 00 90 5D |  if_ne	jmp	#LR__2488
1f980     A7 28 02 FB | 	rdlong	local02, fp
1f984     0C 4E 05 F1 | 	add	fp, #12
1f988     A7 2A 02 FB | 	rdlong	local03, fp
1f98c     0C 4E 85 F1 | 	sub	fp, #12
1f990     15 29 52 F2 | 	cmps	local02, local03 wc
1f994     13 27 A2 F1 | 	subx	local01, local01
1f998     A7 26 62 FC | 	wrlong	local01, fp
1f99c     54 01 90 FD | 	jmp	#LR__2493
1f9a0                 | LR__2488
1f9a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1f9a0     08 4E 05 F1 | 	add	fp, #8
1f9a4     A7 26 02 FB | 	rdlong	local01, fp
1f9a8     08 4E 85 F1 | 	sub	fp, #8
1f9ac     1D 26 0E F2 | 	cmp	local01, #29 wz
1f9b0     14 4E 05 A1 |  if_e	add	fp, #20
1f9b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9b8     14 4E 85 A1 |  if_e	sub	fp, #20
1f9bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f9c0     20 00 90 5D |  if_ne	jmp	#LR__2489
1f9c4     A7 28 02 FB | 	rdlong	local02, fp
1f9c8     0C 4E 05 F1 | 	add	fp, #12
1f9cc     A7 2A 02 FB | 	rdlong	local03, fp
1f9d0     0C 4E 85 F1 | 	sub	fp, #12
1f9d4     15 29 12 F2 | 	cmp	local02, local03 wc
1f9d8     13 27 A2 F1 | 	subx	local01, local01
1f9dc     A7 26 62 FC | 	wrlong	local01, fp
1f9e0     10 01 90 FD | 	jmp	#LR__2493
1f9e4                 | LR__2489
1f9e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1f9e4     08 4E 05 F1 | 	add	fp, #8
1f9e8     A7 26 02 FB | 	rdlong	local01, fp
1f9ec     08 4E 85 F1 | 	sub	fp, #8
1f9f0     2B 26 0E F2 | 	cmp	local01, #43 wz
1f9f4     14 4E 05 A1 |  if_e	add	fp, #20
1f9f8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9fc     14 4E 85 A1 |  if_e	sub	fp, #20
1fa00     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fa04     30 00 90 5D |  if_ne	jmp	#LR__2490
1fa08     00 26 06 F6 | 	mov	local01, #0
1fa0c     A7 12 02 FB | 	rdlong	arg01, fp
1fa10     6C DE BE FD | 	call	#_convertstring
1fa14     FD 12 02 F6 | 	mov	arg01, result1
1fa18     0C 4E 05 F1 | 	add	fp, #12
1fa1c     A7 14 02 FB | 	rdlong	arg02, fp
1fa20     0C 4E 85 F1 | 	sub	fp, #12
1fa24     6C 76 B0 FD | 	call	#__system___string_cmp
1fa28     00 FA 55 F2 | 	cmps	result1, #0 wc
1fa2c     00 26 26 C6 |  if_b	not	local01, #0
1fa30     A7 26 62 FC | 	wrlong	local01, fp
1fa34     BC 00 90 FD | 	jmp	#LR__2493
1fa38                 | LR__2490
1fa38                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1fa38     08 4E 05 F1 | 	add	fp, #8
1fa3c     A7 26 02 FB | 	rdlong	local01, fp
1fa40     08 4E 85 F1 | 	sub	fp, #8
1fa44     1F 26 0E F2 | 	cmp	local01, #31 wz
1fa48     14 4E 05 A1 |  if_e	add	fp, #20
1fa4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa50     14 4E 85 A1 |  if_e	sub	fp, #20
1fa54     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa58     34 00 90 5D |  if_ne	jmp	#LR__2491
1fa5c     00 26 06 F6 | 	mov	local01, #0
1fa60     A7 28 02 FB | 	rdlong	local02, fp
1fa64     0C 4E 05 F1 | 	add	fp, #12
1fa68     A7 12 02 FB | 	rdlong	arg01, fp
1fa6c     0C 4E 85 F1 | 	sub	fp, #12
1fa70     0C DE BE FD | 	call	#_convertstring
1fa74     FD 14 02 F6 | 	mov	arg02, result1
1fa78     14 13 02 F6 | 	mov	arg01, local02
1fa7c     14 76 B0 FD | 	call	#__system___string_cmp
1fa80     00 FA 55 F2 | 	cmps	result1, #0 wc
1fa84     00 26 26 C6 |  if_b	not	local01, #0
1fa88     A7 26 62 FC | 	wrlong	local01, fp
1fa8c     64 00 90 FD | 	jmp	#LR__2493
1fa90                 | LR__2491
1fa90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1fa90     08 4E 05 F1 | 	add	fp, #8
1fa94     A7 26 02 FB | 	rdlong	local01, fp
1fa98     08 4E 85 F1 | 	sub	fp, #8
1fa9c     2B 26 0E F2 | 	cmp	local01, #43 wz
1faa0     14 4E 05 A1 |  if_e	add	fp, #20
1faa4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1faa8     14 4E 85 A1 |  if_e	sub	fp, #20
1faac     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fab0     3C 00 90 5D |  if_ne	jmp	#LR__2492
1fab4     00 26 06 F6 | 	mov	local01, #0
1fab8     A7 12 02 FB | 	rdlong	arg01, fp
1fabc     C0 DD BE FD | 	call	#_convertstring
1fac0     FD 28 02 F6 | 	mov	local02, result1
1fac4     0C 4E 05 F1 | 	add	fp, #12
1fac8     A7 12 02 FB | 	rdlong	arg01, fp
1facc     0C 4E 85 F1 | 	sub	fp, #12
1fad0     AC DD BE FD | 	call	#_convertstring
1fad4     FD 14 02 F6 | 	mov	arg02, result1
1fad8     14 13 02 F6 | 	mov	arg01, local02
1fadc     B4 75 B0 FD | 	call	#__system___string_cmp
1fae0     00 FA 55 F2 | 	cmps	result1, #0 wc
1fae4     00 26 26 C6 |  if_b	not	local01, #0
1fae8     A7 26 62 FC | 	wrlong	local01, fp
1faec     04 00 90 FD | 	jmp	#LR__2493
1faf0                 | LR__2492
1faf0     A7 00 68 FC | 	wrlong	#0, fp
1faf4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1faf4                 | LR__2493
1faf4     08 4E 05 F1 | 	add	fp, #8
1faf8     A7 38 68 FC | 	wrlong	#28, fp
1fafc     08 4E 85 F1 | 	sub	fp, #8
1fb00     A7 12 02 F6 | 	mov	arg01, fp
1fb04     98 DC BE FD | 	call	#_push
1fb08     A7 F0 03 F6 | 	mov	ptra, fp
1fb0c     B2 00 A0 FD | 	call	#popregs_
1fb10                 | _do_lt_ret
1fb10     2D 00 64 FD | 	ret
1fb14                 | 
1fb14                 | ' 
1fb14                 | ' '--------------------------------- minus (-)
1fb14                 | ' 
1fb14                 | ' sub do_minus
1fb14                 | _do_minus
1fb14     05 4A 05 F6 | 	mov	COUNT_, #5
1fb18     A8 00 A0 FD | 	call	#pushregs_
1fb1c     18 F0 07 F1 | 	add	ptra, #24
1fb20     E4 DB BE FD | 	call	#_pop
1fb24     FD 26 02 F6 | 	mov	local01, result1
1fb28     FE 28 02 F6 | 	mov	local02, result2
1fb2c     FF 2A 02 F6 | 	mov	local03, result3
1fb30     0C 4E 05 F1 | 	add	fp, #12
1fb34     A7 26 62 FC | 	wrlong	local01, fp
1fb38     04 4E 05 F1 | 	add	fp, #4
1fb3c     A7 28 62 FC | 	wrlong	local02, fp
1fb40     04 4E 05 F1 | 	add	fp, #4
1fb44     A7 2A 62 FC | 	wrlong	local03, fp
1fb48     14 4E 85 F1 | 	sub	fp, #20
1fb4c     B8 DB BE FD | 	call	#_pop
1fb50     FF 2A 02 F6 | 	mov	local03, result3
1fb54     A7 FA 61 FC | 	wrlong	result1, fp
1fb58     04 4E 05 F1 | 	add	fp, #4
1fb5c     A7 FC 61 FC | 	wrlong	result2, fp
1fb60     04 4E 05 F1 | 	add	fp, #4
1fb64     A7 2A 62 FC | 	wrlong	local03, fp
1fb68                 | ' 
1fb68                 | ' t2=pop()
1fb68                 | ' t1=pop()
1fb68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1fb68     08 4E 85 F1 | 	sub	fp, #8
1fb6c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fb70     14 4E 05 A1 |  if_e	add	fp, #20
1fb74     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb78     14 4E 85 A1 |  if_e	sub	fp, #20
1fb7c     16 2B 02 A6 |  if_e	mov	local03, local04
1fb80     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fb84     5C 00 90 5D |  if_ne	jmp	#LR__2501
1fb88                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1fb88     0C 4E 05 F1 | 	add	fp, #12
1fb8c     A7 26 02 FB | 	rdlong	local01, fp
1fb90     0C 4E 85 F1 | 	sub	fp, #12
1fb94     A7 2A 02 FB | 	rdlong	local03, fp
1fb98     15 27 12 F2 | 	cmp	local01, local03 wc
1fb9c     1C 00 90 3D |  if_ae	jmp	#LR__2500
1fba0     A7 26 02 FB | 	rdlong	local01, fp
1fba4     0C 4E 05 F1 | 	add	fp, #12
1fba8     A7 28 02 FB | 	rdlong	local02, fp
1fbac     0C 4E 85 F1 | 	sub	fp, #12
1fbb0     14 27 82 F1 | 	sub	local01, local02
1fbb4     A7 26 62 FC | 	wrlong	local01, fp
1fbb8     F4 02 90 FD | 	jmp	#LR__2510
1fbbc                 | LR__2500
1fbbc     A7 26 02 FB | 	rdlong	local01, fp
1fbc0     0C 4E 05 F1 | 	add	fp, #12
1fbc4     A7 28 02 FB | 	rdlong	local02, fp
1fbc8     0C 4E 85 F1 | 	sub	fp, #12
1fbcc     14 27 82 F1 | 	sub	local01, local02
1fbd0     A7 26 62 FC | 	wrlong	local01, fp
1fbd4     08 4E 05 F1 | 	add	fp, #8
1fbd8     A7 38 68 FC | 	wrlong	#28, fp
1fbdc     08 4E 85 F1 | 	sub	fp, #8
1fbe0     CC 02 90 FD | 	jmp	#LR__2510
1fbe4                 | LR__2501
1fbe4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1fbe4     08 4E 05 F1 | 	add	fp, #8
1fbe8     A7 26 02 FB | 	rdlong	local01, fp
1fbec     08 4E 85 F1 | 	sub	fp, #8
1fbf0     1D 26 0E F2 | 	cmp	local01, #29 wz
1fbf4     14 4E 05 A1 |  if_e	add	fp, #20
1fbf8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fbfc     14 4E 85 A1 |  if_e	sub	fp, #20
1fc00     16 2B 02 A6 |  if_e	mov	local03, local04
1fc04     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fc08     28 00 90 5D |  if_ne	jmp	#LR__2502
1fc0c     A7 26 02 FB | 	rdlong	local01, fp
1fc10     0C 4E 05 F1 | 	add	fp, #12
1fc14     A7 28 02 FB | 	rdlong	local02, fp
1fc18     0C 4E 85 F1 | 	sub	fp, #12
1fc1c     14 27 82 F1 | 	sub	local01, local02
1fc20     A7 26 62 FC | 	wrlong	local01, fp
1fc24     08 4E 05 F1 | 	add	fp, #8
1fc28     A7 38 68 FC | 	wrlong	#28, fp
1fc2c     08 4E 85 F1 | 	sub	fp, #8
1fc30     7C 02 90 FD | 	jmp	#LR__2510
1fc34                 | LR__2502
1fc34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1fc34     08 4E 05 F1 | 	add	fp, #8
1fc38     A7 26 02 FB | 	rdlong	local01, fp
1fc3c     08 4E 85 F1 | 	sub	fp, #8
1fc40     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc44     14 4E 05 A1 |  if_e	add	fp, #20
1fc48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc4c     14 4E 85 A1 |  if_e	sub	fp, #20
1fc50     16 2B 02 A6 |  if_e	mov	local03, local04
1fc54     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fc58     34 00 90 5D |  if_ne	jmp	#LR__2503
1fc5c     A7 12 02 FB | 	rdlong	arg01, fp
1fc60     7C 9E B0 FD | 	call	#__system___float_fromuns
1fc64     FD 12 02 F6 | 	mov	arg01, result1
1fc68     0C 4E 05 F1 | 	add	fp, #12
1fc6c     A7 14 02 FB | 	rdlong	arg02, fp
1fc70     0C 4E 85 F1 | 	sub	fp, #12
1fc74     1F 14 E6 F4 | 	bitnot	arg02, #31
1fc78     98 9E B0 FD | 	call	#__system___float_add
1fc7c     A7 FA 61 FC | 	wrlong	result1, fp
1fc80     08 4E 05 F1 | 	add	fp, #8
1fc84     A7 3C 68 FC | 	wrlong	#30, fp
1fc88     08 4E 85 F1 | 	sub	fp, #8
1fc8c     20 02 90 FD | 	jmp	#LR__2510
1fc90                 | LR__2503
1fc90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1fc90     08 4E 05 F1 | 	add	fp, #8
1fc94     A7 26 02 FB | 	rdlong	local01, fp
1fc98     08 4E 85 F1 | 	sub	fp, #8
1fc9c     1C 26 0E F2 | 	cmp	local01, #28 wz
1fca0     14 4E 05 A1 |  if_e	add	fp, #20
1fca4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fca8     14 4E 85 A1 |  if_e	sub	fp, #20
1fcac     16 2B 02 A6 |  if_e	mov	local03, local04
1fcb0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fcb4     1C 00 90 5D |  if_ne	jmp	#LR__2504
1fcb8     A7 26 02 FB | 	rdlong	local01, fp
1fcbc     0C 4E 05 F1 | 	add	fp, #12
1fcc0     A7 28 02 FB | 	rdlong	local02, fp
1fcc4     0C 4E 85 F1 | 	sub	fp, #12
1fcc8     14 27 82 F1 | 	sub	local01, local02
1fccc     A7 26 62 FC | 	wrlong	local01, fp
1fcd0     DC 01 90 FD | 	jmp	#LR__2510
1fcd4                 | LR__2504
1fcd4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1fcd4     08 4E 05 F1 | 	add	fp, #8
1fcd8     A7 26 02 FB | 	rdlong	local01, fp
1fcdc     08 4E 85 F1 | 	sub	fp, #8
1fce0     1C 26 0E F2 | 	cmp	local01, #28 wz
1fce4     14 4E 05 A1 |  if_e	add	fp, #20
1fce8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcec     14 4E 85 A1 |  if_e	sub	fp, #20
1fcf0     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fcf4     1C 00 90 5D |  if_ne	jmp	#LR__2505
1fcf8     A7 26 02 FB | 	rdlong	local01, fp
1fcfc     0C 4E 05 F1 | 	add	fp, #12
1fd00     A7 28 02 FB | 	rdlong	local02, fp
1fd04     0C 4E 85 F1 | 	sub	fp, #12
1fd08     14 27 82 F1 | 	sub	local01, local02
1fd0c     A7 26 62 FC | 	wrlong	local01, fp
1fd10     9C 01 90 FD | 	jmp	#LR__2510
1fd14                 | LR__2505
1fd14                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1fd14     08 4E 05 F1 | 	add	fp, #8
1fd18     A7 26 02 FB | 	rdlong	local01, fp
1fd1c     08 4E 85 F1 | 	sub	fp, #8
1fd20     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd24     14 4E 05 A1 |  if_e	add	fp, #20
1fd28     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fd2c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd30     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fd34     44 00 90 5D |  if_ne	jmp	#LR__2506
1fd38     A7 12 02 FB | 	rdlong	arg01, fp
1fd3c     09 13 52 F6 | 	abs	arg01, arg01 wc
1fd40     1F 2E C6 C9 |  if_b	decod	local05, #31
1fd44     00 2E 06 36 |  if_ae	mov	local05, #0
1fd48     94 9D B0 FD | 	call	#__system___float_fromuns
1fd4c     17 FB 61 F5 | 	xor	result1, local05
1fd50     FD 12 02 F6 | 	mov	arg01, result1
1fd54     0C 4E 05 F1 | 	add	fp, #12
1fd58     A7 14 02 FB | 	rdlong	arg02, fp
1fd5c     0C 4E 85 F1 | 	sub	fp, #12
1fd60     1F 14 E6 F4 | 	bitnot	arg02, #31
1fd64     AC 9D B0 FD | 	call	#__system___float_add
1fd68     A7 FA 61 FC | 	wrlong	result1, fp
1fd6c     08 4E 05 F1 | 	add	fp, #8
1fd70     A7 3C 68 FC | 	wrlong	#30, fp
1fd74     08 4E 85 F1 | 	sub	fp, #8
1fd78     34 01 90 FD | 	jmp	#LR__2510
1fd7c                 | LR__2506
1fd7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1fd7c     08 4E 05 F1 | 	add	fp, #8
1fd80     A7 26 02 FB | 	rdlong	local01, fp
1fd84     08 4E 85 F1 | 	sub	fp, #8
1fd88     1E 26 0E F2 | 	cmp	local01, #30 wz
1fd8c     14 4E 05 A1 |  if_e	add	fp, #20
1fd90     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fd94     14 4E 85 A1 |  if_e	sub	fp, #20
1fd98     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fd9c     2C 00 90 5D |  if_ne	jmp	#LR__2507
1fda0     A7 26 02 FB | 	rdlong	local01, fp
1fda4     0C 4E 05 F1 | 	add	fp, #12
1fda8     A7 12 02 FB | 	rdlong	arg01, fp
1fdac     0C 4E 85 F1 | 	sub	fp, #12
1fdb0     2C 9D B0 FD | 	call	#__system___float_fromuns
1fdb4     FD 14 02 F6 | 	mov	arg02, result1
1fdb8     13 13 02 F6 | 	mov	arg01, local01
1fdbc     1F 14 E6 F4 | 	bitnot	arg02, #31
1fdc0     50 9D B0 FD | 	call	#__system___float_add
1fdc4     A7 FA 61 FC | 	wrlong	result1, fp
1fdc8     E4 00 90 FD | 	jmp	#LR__2510
1fdcc                 | LR__2507
1fdcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1fdcc     08 4E 05 F1 | 	add	fp, #8
1fdd0     A7 26 02 FB | 	rdlong	local01, fp
1fdd4     08 4E 85 F1 | 	sub	fp, #8
1fdd8     1E 26 0E F2 | 	cmp	local01, #30 wz
1fddc     14 4E 05 A1 |  if_e	add	fp, #20
1fde0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fde4     14 4E 85 A1 |  if_e	sub	fp, #20
1fde8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fdec     3C 00 90 5D |  if_ne	jmp	#LR__2508
1fdf0     A7 26 02 FB | 	rdlong	local01, fp
1fdf4     0C 4E 05 F1 | 	add	fp, #12
1fdf8     A7 12 02 FB | 	rdlong	arg01, fp
1fdfc     0C 4E 85 F1 | 	sub	fp, #12
1fe00     09 13 52 F6 | 	abs	arg01, arg01 wc
1fe04     1F 2E C6 C9 |  if_b	decod	local05, #31
1fe08     00 2E 06 36 |  if_ae	mov	local05, #0
1fe0c     D0 9C B0 FD | 	call	#__system___float_fromuns
1fe10     17 FB 61 F5 | 	xor	result1, local05
1fe14     FD 14 02 F6 | 	mov	arg02, result1
1fe18     13 13 02 F6 | 	mov	arg01, local01
1fe1c     1F 14 E6 F4 | 	bitnot	arg02, #31
1fe20     F0 9C B0 FD | 	call	#__system___float_add
1fe24     A7 FA 61 FC | 	wrlong	result1, fp
1fe28     84 00 90 FD | 	jmp	#LR__2510
1fe2c                 | LR__2508
1fe2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1fe2c     08 4E 05 F1 | 	add	fp, #8
1fe30     A7 26 02 FB | 	rdlong	local01, fp
1fe34     08 4E 85 F1 | 	sub	fp, #8
1fe38     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe3c     14 4E 05 A1 |  if_e	add	fp, #20
1fe40     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe44     14 4E 85 A1 |  if_e	sub	fp, #20
1fe48     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fe4c     20 00 90 5D |  if_ne	jmp	#LR__2509
1fe50     A7 12 02 FB | 	rdlong	arg01, fp
1fe54     0C 4E 05 F1 | 	add	fp, #12
1fe58     A7 14 02 FB | 	rdlong	arg02, fp
1fe5c     0C 4E 85 F1 | 	sub	fp, #12
1fe60     1F 14 E6 F4 | 	bitnot	arg02, #31
1fe64     AC 9C B0 FD | 	call	#__system___float_add
1fe68     A7 FA 61 FC | 	wrlong	result1, fp
1fe6c     40 00 90 FD | 	jmp	#LR__2510
1fe70                 | LR__2509
1fe70                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1fe70     08 4E 05 F1 | 	add	fp, #8
1fe74     A7 26 02 FB | 	rdlong	local01, fp
1fe78     08 4E 85 F1 | 	sub	fp, #8
1fe7c     1F 26 0E F2 | 	cmp	local01, #31 wz
1fe80     14 4E 05 51 |  if_ne	add	fp, #20
1fe84     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fe88     14 4E 85 51 |  if_ne	sub	fp, #20
1fe8c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1fe90     A7 06 68 AC |  if_e	wrlong	#3, fp
1fe94     08 4E 05 A1 |  if_e	add	fp, #8
1fe98     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fe9c     08 4E 85 A1 |  if_e	sub	fp, #8
1fea0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1fea4     08 4E 05 51 |  if_ne	add	fp, #8
1fea8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1feac     08 4E 85 51 |  if_ne	sub	fp, #8
1feb0                 | LR__2510
1feb0     A7 12 02 F6 | 	mov	arg01, fp
1feb4     E8 D8 BE FD | 	call	#_push
1feb8     A7 F0 03 F6 | 	mov	ptra, fp
1febc     B2 00 A0 FD | 	call	#popregs_
1fec0                 | _do_minus_ret
1fec0     2D 00 64 FD | 	ret
1fec4                 | 
1fec4                 | ' 
1fec4                 | ' '--------------------------------- negative (-), one argument negative
1fec4                 | ' 
1fec4                 | ' sub do_negative
1fec4                 | _do_negative
1fec4     02 4A 05 F6 | 	mov	COUNT_, #2
1fec8     A8 00 A0 FD | 	call	#pushregs_
1fecc     0C F0 07 F1 | 	add	ptra, #12
1fed0     34 D8 BE FD | 	call	#_pop
1fed4     FF 26 02 F6 | 	mov	local01, result3
1fed8     A7 FA 61 FC | 	wrlong	result1, fp
1fedc     04 4E 05 F1 | 	add	fp, #4
1fee0     A7 FC 61 FC | 	wrlong	result2, fp
1fee4     04 4E 05 F1 | 	add	fp, #4
1fee8     A7 26 62 FC | 	wrlong	local01, fp
1feec                 | ' 
1feec                 | ' t1=pop()
1feec                 | ' if t1.result_type=result_int then 
1feec     08 4E 85 F1 | 	sub	fp, #8
1fef0     1C 26 0E F2 | 	cmp	local01, #28 wz
1fef4     A7 28 02 AB |  if_e	rdlong	local02, fp
1fef8     14 27 62 A6 |  if_e	neg	local01, local02
1fefc     A7 26 62 AC |  if_e	wrlong	local01, fp
1ff00     5C 00 90 AD |  if_e	jmp	#LR__2522
1ff04     08 4E 05 F1 | 	add	fp, #8
1ff08     A7 26 02 FB | 	rdlong	local01, fp
1ff0c     08 4E 85 F1 | 	sub	fp, #8
1ff10     1D 26 0E F2 | 	cmp	local01, #29 wz
1ff14     1C 00 90 5D |  if_ne	jmp	#LR__2520
1ff18     A7 28 02 FB | 	rdlong	local02, fp
1ff1c     14 27 62 F6 | 	neg	local01, local02
1ff20     A7 26 62 FC | 	wrlong	local01, fp
1ff24     08 4E 05 F1 | 	add	fp, #8
1ff28     A7 38 68 FC | 	wrlong	#28, fp
1ff2c     08 4E 85 F1 | 	sub	fp, #8
1ff30     2C 00 90 FD | 	jmp	#LR__2521
1ff34                 | LR__2520
1ff34     08 4E 05 F1 | 	add	fp, #8
1ff38     A7 26 02 FB | 	rdlong	local01, fp
1ff3c     08 4E 85 F1 | 	sub	fp, #8
1ff40     1E 26 0E F2 | 	cmp	local01, #30 wz
1ff44     A7 FA 01 AB |  if_e	rdlong	result1, fp
1ff48     1F FA E5 A4 |  if_e	bitnot	result1, #31
1ff4c     A7 FA 61 AC |  if_e	wrlong	result1, fp
1ff50     08 4E 05 51 |  if_ne	add	fp, #8
1ff54     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ff58     08 4E 85 51 |  if_ne	sub	fp, #8
1ff5c     A7 50 68 5C |  if_ne	wrlong	#40, fp
1ff60                 | LR__2521
1ff60                 | LR__2522
1ff60     A7 12 02 F6 | 	mov	arg01, fp
1ff64     38 D8 BE FD | 	call	#_push
1ff68     A7 F0 03 F6 | 	mov	ptra, fp
1ff6c     B2 00 A0 FD | 	call	#popregs_
1ff70                 | _do_negative_ret
1ff70     2D 00 64 FD | 	ret
1ff74                 | 
1ff74                 | ' 
1ff74                 | ' '--------------------------------- MOD (modulo)
1ff74                 | ' 
1ff74                 | ' sub do_mod 
1ff74                 | _do_mod
1ff74     01 4A 05 F6 | 	mov	COUNT_, #1
1ff78     A8 00 A0 FD | 	call	#pushregs_
1ff7c     18 F0 07 F1 | 	add	ptra, #24
1ff80     84 D7 BE FD | 	call	#_pop
1ff84     FD 92 02 F6 | 	mov	muldivb_, result1
1ff88     FE 90 02 F6 | 	mov	muldiva_, result2
1ff8c     FF 26 02 F6 | 	mov	local01, result3
1ff90     0C 4E 05 F1 | 	add	fp, #12
1ff94     A7 92 62 FC | 	wrlong	muldivb_, fp
1ff98     04 4E 05 F1 | 	add	fp, #4
1ff9c     A7 90 62 FC | 	wrlong	muldiva_, fp
1ffa0     04 4E 05 F1 | 	add	fp, #4
1ffa4     A7 26 62 FC | 	wrlong	local01, fp
1ffa8     14 4E 85 F1 | 	sub	fp, #20
1ffac     58 D7 BE FD | 	call	#_pop
1ffb0     A7 FA 61 FC | 	wrlong	result1, fp
1ffb4     04 4E 05 F1 | 	add	fp, #4
1ffb8     A7 FC 61 FC | 	wrlong	result2, fp
1ffbc     04 4E 05 F1 | 	add	fp, #4
1ffc0     A7 FE 61 FC | 	wrlong	result3, fp
1ffc4                 | ' 
1ffc4                 | ' t2=pop()
1ffc4                 | ' t1=pop()
1ffc4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1ffc4     08 4E 85 F1 | 	sub	fp, #8
1ffc8     1F FE 0D F2 | 	cmp	result3, #31 wz
1ffcc     14 4E 05 51 |  if_ne	add	fp, #20
1ffd0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1ffd4     14 4E 85 51 |  if_ne	sub	fp, #20
1ffd8     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1ffdc     A7 14 68 AC |  if_e	wrlong	#10, fp
1ffe0     08 4E 05 A1 |  if_e	add	fp, #8
1ffe4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ffe8     08 4E 85 A1 |  if_e	sub	fp, #8
1ffec     90 01 90 AD |  if_e	jmp	#LR__2536
1fff0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1fff0     08 4E 05 F1 | 	add	fp, #8
1fff4     A7 92 02 FB | 	rdlong	muldivb_, fp
1fff8     08 4E 85 F1 | 	sub	fp, #8
1fffc     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
20000     1C 00 90 5D |  if_ne	jmp	#LR__2530
20004     08 4E 05 F1 | 	add	fp, #8
20008     A7 38 68 FC | 	wrlong	#28, fp
2000c     08 4E 85 F1 | 	sub	fp, #8
20010     A7 12 02 FB | 	rdlong	arg01, fp
20014     00 14 06 F6 | 	mov	arg02, #0
20018     90 A3 B0 FD | 	call	#__system___float_tointeger
2001c     A7 FA 61 FC | 	wrlong	result1, fp
20020                 | LR__2530
20020                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
20020     14 4E 05 F1 | 	add	fp, #20
20024     A7 92 02 FB | 	rdlong	muldivb_, fp
20028     14 4E 85 F1 | 	sub	fp, #20
2002c     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
20030     28 00 90 5D |  if_ne	jmp	#LR__2531
20034     14 4E 05 F1 | 	add	fp, #20
20038     A7 38 68 FC | 	wrlong	#28, fp
2003c     08 4E 85 F1 | 	sub	fp, #8
20040     A7 12 02 FB | 	rdlong	arg01, fp
20044     0C 4E 85 F1 | 	sub	fp, #12
20048     00 14 06 F6 | 	mov	arg02, #0
2004c     5C A3 B0 FD | 	call	#__system___float_tointeger
20050     0C 4E 05 F1 | 	add	fp, #12
20054     A7 FA 61 FC | 	wrlong	result1, fp
20058     0C 4E 85 F1 | 	sub	fp, #12
2005c                 | LR__2531
2005c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
2005c     08 4E 05 F1 | 	add	fp, #8
20060     A7 92 02 FB | 	rdlong	muldivb_, fp
20064     08 4E 85 F1 | 	sub	fp, #8
20068     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
2006c     14 4E 05 A1 |  if_e	add	fp, #20
20070     A7 26 02 AB |  if_e	rdlong	local01, fp
20074     14 4E 85 A1 |  if_e	sub	fp, #20
20078     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
2007c     20 00 90 5D |  if_ne	jmp	#LR__2532
20080     0C 4E 05 F1 | 	add	fp, #12
20084     A7 26 02 FB | 	rdlong	local01, fp
20088     0C 4E 85 F1 | 	sub	fp, #12
2008c     A7 92 02 FB | 	rdlong	muldivb_, fp
20090     13 93 12 FD | 	qdiv	muldivb_, local01
20094     19 26 62 FD | 	getqy	local01
20098     A7 26 62 FC | 	wrlong	local01, fp
2009c     E0 00 90 FD | 	jmp	#LR__2536
200a0                 | LR__2532
200a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
200a0     08 4E 05 F1 | 	add	fp, #8
200a4     A7 92 02 FB | 	rdlong	muldivb_, fp
200a8     08 4E 85 F1 | 	sub	fp, #8
200ac     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
200b0     14 4E 05 A1 |  if_e	add	fp, #20
200b4     A7 26 02 AB |  if_e	rdlong	local01, fp
200b8     14 4E 85 A1 |  if_e	sub	fp, #20
200bc     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
200c0     2C 00 90 5D |  if_ne	jmp	#LR__2533
200c4     0C 4E 05 F1 | 	add	fp, #12
200c8     A7 26 02 FB | 	rdlong	local01, fp
200cc     0C 4E 85 F1 | 	sub	fp, #12
200d0     A7 92 02 FB | 	rdlong	muldivb_, fp
200d4     13 93 12 FD | 	qdiv	muldivb_, local01
200d8     19 26 62 FD | 	getqy	local01
200dc     A7 26 62 FC | 	wrlong	local01, fp
200e0     08 4E 05 F1 | 	add	fp, #8
200e4     A7 38 68 FC | 	wrlong	#28, fp
200e8     08 4E 85 F1 | 	sub	fp, #8
200ec     90 00 90 FD | 	jmp	#LR__2536
200f0                 | LR__2533
200f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
200f0     08 4E 05 F1 | 	add	fp, #8
200f4     A7 92 02 FB | 	rdlong	muldivb_, fp
200f8     08 4E 85 F1 | 	sub	fp, #8
200fc     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
20100     14 4E 05 A1 |  if_e	add	fp, #20
20104     A7 26 02 AB |  if_e	rdlong	local01, fp
20108     14 4E 85 A1 |  if_e	sub	fp, #20
2010c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
20110     1C 00 90 5D |  if_ne	jmp	#LR__2534
20114     A7 90 02 FB | 	rdlong	muldiva_, fp
20118     0C 4E 05 F1 | 	add	fp, #12
2011c     A7 92 02 FB | 	rdlong	muldivb_, fp
20120     0C 4E 85 F1 | 	sub	fp, #12
20124     BA 00 A0 FD | 	call	#divide_
20128     A7 90 62 FC | 	wrlong	muldiva_, fp
2012c     50 00 90 FD | 	jmp	#LR__2536
20130                 | LR__2534
20130                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
20130     08 4E 05 F1 | 	add	fp, #8
20134     A7 92 02 FB | 	rdlong	muldivb_, fp
20138     08 4E 85 F1 | 	sub	fp, #8
2013c     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
20140     14 4E 05 A1 |  if_e	add	fp, #20
20144     A7 26 02 AB |  if_e	rdlong	local01, fp
20148     14 4E 85 A1 |  if_e	sub	fp, #20
2014c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
20150     1C 00 90 5D |  if_ne	jmp	#LR__2535
20154     A7 90 02 FB | 	rdlong	muldiva_, fp
20158     0C 4E 05 F1 | 	add	fp, #12
2015c     A7 92 02 FB | 	rdlong	muldivb_, fp
20160     0C 4E 85 F1 | 	sub	fp, #12
20164     BA 00 A0 FD | 	call	#divide_
20168     A7 90 62 FC | 	wrlong	muldiva_, fp
2016c     10 00 90 FD | 	jmp	#LR__2536
20170                 | LR__2535
20170     A7 16 68 FC | 	wrlong	#11, fp
20174     08 4E 05 F1 | 	add	fp, #8
20178     A7 FE 69 FC | 	wrlong	#255, fp
2017c     08 4E 85 F1 | 	sub	fp, #8
20180                 | LR__2536
20180     A7 12 02 F6 | 	mov	arg01, fp
20184     18 D6 BE FD | 	call	#_push
20188     A7 F0 03 F6 | 	mov	ptra, fp
2018c     B2 00 A0 FD | 	call	#popregs_
20190                 | _do_mod_ret
20190     2D 00 64 FD | 	ret
20194                 | 
20194                 | ' 
20194                 | ' '--------------------------------- mul (*)
20194                 | ' 
20194                 | ' sub do_mul
20194                 | _do_mul
20194     05 4A 05 F6 | 	mov	COUNT_, #5
20198     A8 00 A0 FD | 	call	#pushregs_
2019c     18 F0 07 F1 | 	add	ptra, #24
201a0     64 D5 BE FD | 	call	#_pop
201a4     FD 26 02 F6 | 	mov	local01, result1
201a8     FE 28 02 F6 | 	mov	local02, result2
201ac     FF 2A 02 F6 | 	mov	local03, result3
201b0     0C 4E 05 F1 | 	add	fp, #12
201b4     A7 26 62 FC | 	wrlong	local01, fp
201b8     04 4E 05 F1 | 	add	fp, #4
201bc     A7 28 62 FC | 	wrlong	local02, fp
201c0     04 4E 05 F1 | 	add	fp, #4
201c4     A7 2A 62 FC | 	wrlong	local03, fp
201c8     14 4E 85 F1 | 	sub	fp, #20
201cc     38 D5 BE FD | 	call	#_pop
201d0     FF 2A 02 F6 | 	mov	local03, result3
201d4     A7 FA 61 FC | 	wrlong	result1, fp
201d8     04 4E 05 F1 | 	add	fp, #4
201dc     A7 FC 61 FC | 	wrlong	result2, fp
201e0     04 4E 05 F1 | 	add	fp, #4
201e4     A7 2A 62 FC | 	wrlong	local03, fp
201e8                 | ' 
201e8                 | ' t2=pop()
201e8                 | ' t1=pop()
201e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
201e8     08 4E 85 F1 | 	sub	fp, #8
201ec     1D 2A 0E F2 | 	cmp	local03, #29 wz
201f0     14 4E 05 A1 |  if_e	add	fp, #20
201f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
201f8     14 4E 85 A1 |  if_e	sub	fp, #20
201fc     16 2B 02 A6 |  if_e	mov	local03, local04
20200     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20204     20 00 90 5D |  if_ne	jmp	#LR__2540
20208     A7 28 02 FB | 	rdlong	local02, fp
2020c     0C 4E 05 F1 | 	add	fp, #12
20210     A7 2A 02 FB | 	rdlong	local03, fp
20214     15 29 02 FD | 	qmul	local02, local03
20218     0C 4E 85 F1 | 	sub	fp, #12
2021c     18 26 62 FD | 	getqx	local01
20220     A7 26 62 FC | 	wrlong	local01, fp
20224     C4 02 90 FD | 	jmp	#LR__2549
20228                 | LR__2540
20228                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
20228     08 4E 05 F1 | 	add	fp, #8
2022c     A7 26 02 FB | 	rdlong	local01, fp
20230     08 4E 85 F1 | 	sub	fp, #8
20234     1D 26 0E F2 | 	cmp	local01, #29 wz
20238     14 4E 05 A1 |  if_e	add	fp, #20
2023c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20240     14 4E 85 A1 |  if_e	sub	fp, #20
20244     16 2B 02 A6 |  if_e	mov	local03, local04
20248     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2024c     2C 00 90 5D |  if_ne	jmp	#LR__2541
20250     A7 28 02 FB | 	rdlong	local02, fp
20254     0C 4E 05 F1 | 	add	fp, #12
20258     A7 2A 02 FB | 	rdlong	local03, fp
2025c     15 29 02 FD | 	qmul	local02, local03
20260     0C 4E 85 F1 | 	sub	fp, #12
20264     18 26 62 FD | 	getqx	local01
20268     A7 26 62 FC | 	wrlong	local01, fp
2026c     08 4E 05 F1 | 	add	fp, #8
20270     A7 38 68 FC | 	wrlong	#28, fp
20274     08 4E 85 F1 | 	sub	fp, #8
20278     70 02 90 FD | 	jmp	#LR__2549
2027c                 | LR__2541
2027c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
2027c     08 4E 05 F1 | 	add	fp, #8
20280     A7 26 02 FB | 	rdlong	local01, fp
20284     08 4E 85 F1 | 	sub	fp, #8
20288     1D 26 0E F2 | 	cmp	local01, #29 wz
2028c     14 4E 05 A1 |  if_e	add	fp, #20
20290     A7 2C 02 AB |  if_e	rdlong	local04, fp
20294     14 4E 85 A1 |  if_e	sub	fp, #20
20298     16 2B 02 A6 |  if_e	mov	local03, local04
2029c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
202a0     30 00 90 5D |  if_ne	jmp	#LR__2542
202a4     A7 12 02 FB | 	rdlong	arg01, fp
202a8     34 98 B0 FD | 	call	#__system___float_fromuns
202ac     FD 12 02 F6 | 	mov	arg01, result1
202b0     0C 4E 05 F1 | 	add	fp, #12
202b4     A7 14 02 FB | 	rdlong	arg02, fp
202b8     0C 4E 85 F1 | 	sub	fp, #12
202bc     24 9C B0 FD | 	call	#__system___float_mul
202c0     A7 FA 61 FC | 	wrlong	result1, fp
202c4     08 4E 05 F1 | 	add	fp, #8
202c8     A7 3C 68 FC | 	wrlong	#30, fp
202cc     08 4E 85 F1 | 	sub	fp, #8
202d0     18 02 90 FD | 	jmp	#LR__2549
202d4                 | LR__2542
202d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
202d4     08 4E 05 F1 | 	add	fp, #8
202d8     A7 26 02 FB | 	rdlong	local01, fp
202dc     08 4E 85 F1 | 	sub	fp, #8
202e0     1C 26 0E F2 | 	cmp	local01, #28 wz
202e4     14 4E 05 A1 |  if_e	add	fp, #20
202e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
202ec     14 4E 85 A1 |  if_e	sub	fp, #20
202f0     16 2B 02 A6 |  if_e	mov	local03, local04
202f4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
202f8     20 00 90 5D |  if_ne	jmp	#LR__2543
202fc     A7 28 02 FB | 	rdlong	local02, fp
20300     0C 4E 05 F1 | 	add	fp, #12
20304     A7 2A 02 FB | 	rdlong	local03, fp
20308     15 29 02 FD | 	qmul	local02, local03
2030c     0C 4E 85 F1 | 	sub	fp, #12
20310     18 26 62 FD | 	getqx	local01
20314     A7 26 62 FC | 	wrlong	local01, fp
20318     D0 01 90 FD | 	jmp	#LR__2549
2031c                 | LR__2543
2031c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
2031c     08 4E 05 F1 | 	add	fp, #8
20320     A7 26 02 FB | 	rdlong	local01, fp
20324     08 4E 85 F1 | 	sub	fp, #8
20328     1C 26 0E F2 | 	cmp	local01, #28 wz
2032c     14 4E 05 A1 |  if_e	add	fp, #20
20330     A7 2C 02 AB |  if_e	rdlong	local04, fp
20334     14 4E 85 A1 |  if_e	sub	fp, #20
20338     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
2033c     20 00 90 5D |  if_ne	jmp	#LR__2544
20340     A7 28 02 FB | 	rdlong	local02, fp
20344     0C 4E 05 F1 | 	add	fp, #12
20348     A7 2A 02 FB | 	rdlong	local03, fp
2034c     15 29 02 FD | 	qmul	local02, local03
20350     0C 4E 85 F1 | 	sub	fp, #12
20354     18 26 62 FD | 	getqx	local01
20358     A7 26 62 FC | 	wrlong	local01, fp
2035c     8C 01 90 FD | 	jmp	#LR__2549
20360                 | LR__2544
20360                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
20360     08 4E 05 F1 | 	add	fp, #8
20364     A7 26 02 FB | 	rdlong	local01, fp
20368     08 4E 85 F1 | 	sub	fp, #8
2036c     1C 26 0E F2 | 	cmp	local01, #28 wz
20370     14 4E 05 A1 |  if_e	add	fp, #20
20374     A7 2A 02 AB |  if_e	rdlong	local03, fp
20378     14 4E 85 A1 |  if_e	sub	fp, #20
2037c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20380     40 00 90 5D |  if_ne	jmp	#LR__2545
20384     A7 12 02 FB | 	rdlong	arg01, fp
20388     09 13 52 F6 | 	abs	arg01, arg01 wc
2038c     1F 2E C6 C9 |  if_b	decod	local05, #31
20390     00 2E 06 36 |  if_ae	mov	local05, #0
20394     48 97 B0 FD | 	call	#__system___float_fromuns
20398     17 FB 61 F5 | 	xor	result1, local05
2039c     FD 12 02 F6 | 	mov	arg01, result1
203a0     0C 4E 05 F1 | 	add	fp, #12
203a4     A7 14 02 FB | 	rdlong	arg02, fp
203a8     0C 4E 85 F1 | 	sub	fp, #12
203ac     34 9B B0 FD | 	call	#__system___float_mul
203b0     A7 FA 61 FC | 	wrlong	result1, fp
203b4     08 4E 05 F1 | 	add	fp, #8
203b8     A7 3C 68 FC | 	wrlong	#30, fp
203bc     08 4E 85 F1 | 	sub	fp, #8
203c0     28 01 90 FD | 	jmp	#LR__2549
203c4                 | LR__2545
203c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
203c4     08 4E 05 F1 | 	add	fp, #8
203c8     A7 26 02 FB | 	rdlong	local01, fp
203cc     08 4E 85 F1 | 	sub	fp, #8
203d0     1E 26 0E F2 | 	cmp	local01, #30 wz
203d4     14 4E 05 A1 |  if_e	add	fp, #20
203d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
203dc     14 4E 85 A1 |  if_e	sub	fp, #20
203e0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
203e4     28 00 90 5D |  if_ne	jmp	#LR__2546
203e8     A7 26 02 FB | 	rdlong	local01, fp
203ec     0C 4E 05 F1 | 	add	fp, #12
203f0     A7 12 02 FB | 	rdlong	arg01, fp
203f4     0C 4E 85 F1 | 	sub	fp, #12
203f8     E4 96 B0 FD | 	call	#__system___float_fromuns
203fc     FD 14 02 F6 | 	mov	arg02, result1
20400     13 13 02 F6 | 	mov	arg01, local01
20404     DC 9A B0 FD | 	call	#__system___float_mul
20408     A7 FA 61 FC | 	wrlong	result1, fp
2040c     DC 00 90 FD | 	jmp	#LR__2549
20410                 | LR__2546
20410                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
20410     08 4E 05 F1 | 	add	fp, #8
20414     A7 26 02 FB | 	rdlong	local01, fp
20418     08 4E 85 F1 | 	sub	fp, #8
2041c     1E 26 0E F2 | 	cmp	local01, #30 wz
20420     14 4E 05 A1 |  if_e	add	fp, #20
20424     A7 2A 02 AB |  if_e	rdlong	local03, fp
20428     14 4E 85 A1 |  if_e	sub	fp, #20
2042c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20430     38 00 90 5D |  if_ne	jmp	#LR__2547
20434     A7 26 02 FB | 	rdlong	local01, fp
20438     0C 4E 05 F1 | 	add	fp, #12
2043c     A7 12 02 FB | 	rdlong	arg01, fp
20440     0C 4E 85 F1 | 	sub	fp, #12
20444     09 13 52 F6 | 	abs	arg01, arg01 wc
20448     1F 2E C6 C9 |  if_b	decod	local05, #31
2044c     00 2E 06 36 |  if_ae	mov	local05, #0
20450     8C 96 B0 FD | 	call	#__system___float_fromuns
20454     17 FB 61 F5 | 	xor	result1, local05
20458     FD 14 02 F6 | 	mov	arg02, result1
2045c     13 13 02 F6 | 	mov	arg01, local01
20460     80 9A B0 FD | 	call	#__system___float_mul
20464     A7 FA 61 FC | 	wrlong	result1, fp
20468     80 00 90 FD | 	jmp	#LR__2549
2046c                 | LR__2547
2046c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
2046c     08 4E 05 F1 | 	add	fp, #8
20470     A7 26 02 FB | 	rdlong	local01, fp
20474     08 4E 85 F1 | 	sub	fp, #8
20478     1E 26 0E F2 | 	cmp	local01, #30 wz
2047c     14 4E 05 A1 |  if_e	add	fp, #20
20480     A7 2A 02 AB |  if_e	rdlong	local03, fp
20484     14 4E 85 A1 |  if_e	sub	fp, #20
20488     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2048c     1C 00 90 5D |  if_ne	jmp	#LR__2548
20490     A7 12 02 FB | 	rdlong	arg01, fp
20494     0C 4E 05 F1 | 	add	fp, #12
20498     A7 14 02 FB | 	rdlong	arg02, fp
2049c     0C 4E 85 F1 | 	sub	fp, #12
204a0     40 9A B0 FD | 	call	#__system___float_mul
204a4     A7 FA 61 FC | 	wrlong	result1, fp
204a8     40 00 90 FD | 	jmp	#LR__2549
204ac                 | LR__2548
204ac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
204ac     08 4E 05 F1 | 	add	fp, #8
204b0     A7 26 02 FB | 	rdlong	local01, fp
204b4     08 4E 85 F1 | 	sub	fp, #8
204b8     1F 26 0E F2 | 	cmp	local01, #31 wz
204bc     14 4E 05 51 |  if_ne	add	fp, #20
204c0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
204c4     14 4E 85 51 |  if_ne	sub	fp, #20
204c8     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
204cc     A7 10 68 AC |  if_e	wrlong	#8, fp
204d0     08 4E 05 A1 |  if_e	add	fp, #8
204d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
204d8     08 4E 85 A1 |  if_e	sub	fp, #8
204dc     A7 12 68 5C |  if_ne	wrlong	#9, fp
204e0     08 4E 05 51 |  if_ne	add	fp, #8
204e4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
204e8     08 4E 85 51 |  if_ne	sub	fp, #8
204ec                 | LR__2549
204ec     A7 12 02 F6 | 	mov	arg01, fp
204f0     AC D2 BE FD | 	call	#_push
204f4     A7 F0 03 F6 | 	mov	ptra, fp
204f8     B2 00 A0 FD | 	call	#popregs_
204fc                 | _do_mul_ret
204fc     2D 00 64 FD | 	ret
20500                 | 
20500                 | ' 
20500                 | ' '--------------------------------- not equal (<>)
20500                 | ' 
20500                 | ' sub do_ne
20500                 | _do_ne
20500     05 4A 05 F6 | 	mov	COUNT_, #5
20504     A8 00 A0 FD | 	call	#pushregs_
20508     18 F0 07 F1 | 	add	ptra, #24
2050c     F8 D1 BE FD | 	call	#_pop
20510     FD 26 02 F6 | 	mov	local01, result1
20514     FE 28 02 F6 | 	mov	local02, result2
20518     FF 2A 02 F6 | 	mov	local03, result3
2051c     0C 4E 05 F1 | 	add	fp, #12
20520     A7 26 62 FC | 	wrlong	local01, fp
20524     04 4E 05 F1 | 	add	fp, #4
20528     A7 28 62 FC | 	wrlong	local02, fp
2052c     04 4E 05 F1 | 	add	fp, #4
20530     A7 2A 62 FC | 	wrlong	local03, fp
20534     14 4E 85 F1 | 	sub	fp, #20
20538     CC D1 BE FD | 	call	#_pop
2053c     FF 2A 02 F6 | 	mov	local03, result3
20540     A7 FA 61 FC | 	wrlong	result1, fp
20544     04 4E 05 F1 | 	add	fp, #4
20548     A7 FC 61 FC | 	wrlong	result2, fp
2054c     04 4E 05 F1 | 	add	fp, #4
20550     A7 2A 62 FC | 	wrlong	local03, fp
20554                 | ' 
20554                 | ' t2=pop()
20554                 | ' t1=pop()
20554                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
20554     08 4E 85 F1 | 	sub	fp, #8
20558     1F 2A 0E F2 | 	cmp	local03, #31 wz
2055c     14 4E 05 A1 |  if_e	add	fp, #20
20560     A7 2C 02 AB |  if_e	rdlong	local04, fp
20564     14 4E 85 A1 |  if_e	sub	fp, #20
20568     16 2B 02 A6 |  if_e	mov	local03, local04
2056c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20570     28 00 90 5D |  if_ne	jmp	#LR__2550
20574     00 26 06 F6 | 	mov	local01, #0
20578     A7 12 02 FB | 	rdlong	arg01, fp
2057c     0C 4E 05 F1 | 	add	fp, #12
20580     A7 14 02 FB | 	rdlong	arg02, fp
20584     0C 4E 85 F1 | 	sub	fp, #12
20588     08 6B B0 FD | 	call	#__system___string_cmp
2058c     00 FA 0D F2 | 	cmp	result1, #0 wz
20590     00 26 26 56 |  if_ne	not	local01, #0
20594     A7 26 62 FC | 	wrlong	local01, fp
20598     20 04 90 FD | 	jmp	#LR__2563
2059c                 | LR__2550
2059c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
2059c     08 4E 05 F1 | 	add	fp, #8
205a0     A7 26 02 FB | 	rdlong	local01, fp
205a4     08 4E 85 F1 | 	sub	fp, #8
205a8     1E 26 0E F2 | 	cmp	local01, #30 wz
205ac     14 4E 05 A1 |  if_e	add	fp, #20
205b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
205b4     14 4E 85 A1 |  if_e	sub	fp, #20
205b8     16 2B 02 A6 |  if_e	mov	local03, local04
205bc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
205c0     2C 00 90 5D |  if_ne	jmp	#LR__2551
205c4     00 26 06 F6 | 	mov	local01, #0
205c8     A7 12 02 FB | 	rdlong	arg01, fp
205cc     0C 4E 05 F1 | 	add	fp, #12
205d0     A7 14 02 FB | 	rdlong	arg02, fp
205d4     0C 4E 85 F1 | 	sub	fp, #12
205d8     01 16 06 F6 | 	mov	arg03, #1
205dc     38 9D B0 FD | 	call	#__system___float_cmp
205e0     00 FA 0D F2 | 	cmp	result1, #0 wz
205e4     00 26 26 56 |  if_ne	not	local01, #0
205e8     A7 26 62 FC | 	wrlong	local01, fp
205ec     CC 03 90 FD | 	jmp	#LR__2563
205f0                 | LR__2551
205f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
205f0     08 4E 05 F1 | 	add	fp, #8
205f4     A7 26 02 FB | 	rdlong	local01, fp
205f8     08 4E 85 F1 | 	sub	fp, #8
205fc     1E 26 0E F2 | 	cmp	local01, #30 wz
20600     14 4E 05 A1 |  if_e	add	fp, #20
20604     A7 2C 02 AB |  if_e	rdlong	local04, fp
20608     14 4E 85 A1 |  if_e	sub	fp, #20
2060c     16 2B 02 A6 |  if_e	mov	local03, local04
20610     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20614     48 00 90 5D |  if_ne	jmp	#LR__2552
20618     00 26 06 F6 | 	mov	local01, #0
2061c     A7 28 02 FB | 	rdlong	local02, fp
20620     0C 4E 05 F1 | 	add	fp, #12
20624     A7 12 02 FB | 	rdlong	arg01, fp
20628     0C 4E 85 F1 | 	sub	fp, #12
2062c     09 13 52 F6 | 	abs	arg01, arg01 wc
20630     1F 2E C6 C9 |  if_b	decod	local05, #31
20634     00 2E 06 36 |  if_ae	mov	local05, #0
20638     A4 94 B0 FD | 	call	#__system___float_fromuns
2063c     17 FB 61 F5 | 	xor	result1, local05
20640     FD 14 02 F6 | 	mov	arg02, result1
20644     14 13 02 F6 | 	mov	arg01, local02
20648     01 16 06 F6 | 	mov	arg03, #1
2064c     C8 9C B0 FD | 	call	#__system___float_cmp
20650     00 FA 0D F2 | 	cmp	result1, #0 wz
20654     00 26 26 56 |  if_ne	not	local01, #0
20658     A7 26 62 FC | 	wrlong	local01, fp
2065c     5C 03 90 FD | 	jmp	#LR__2563
20660                 | LR__2552
20660                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
20660     08 4E 05 F1 | 	add	fp, #8
20664     A7 26 02 FB | 	rdlong	local01, fp
20668     08 4E 85 F1 | 	sub	fp, #8
2066c     1E 26 0E F2 | 	cmp	local01, #30 wz
20670     14 4E 05 A1 |  if_e	add	fp, #20
20674     A7 2C 02 AB |  if_e	rdlong	local04, fp
20678     14 4E 85 A1 |  if_e	sub	fp, #20
2067c     16 2B 02 A6 |  if_e	mov	local03, local04
20680     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20684     38 00 90 5D |  if_ne	jmp	#LR__2553
20688     00 26 06 F6 | 	mov	local01, #0
2068c     A7 28 02 FB | 	rdlong	local02, fp
20690     0C 4E 05 F1 | 	add	fp, #12
20694     A7 12 02 FB | 	rdlong	arg01, fp
20698     0C 4E 85 F1 | 	sub	fp, #12
2069c     40 94 B0 FD | 	call	#__system___float_fromuns
206a0     FD 14 02 F6 | 	mov	arg02, result1
206a4     14 13 02 F6 | 	mov	arg01, local02
206a8     01 16 06 F6 | 	mov	arg03, #1
206ac     68 9C B0 FD | 	call	#__system___float_cmp
206b0     00 FA 0D F2 | 	cmp	result1, #0 wz
206b4     00 26 26 56 |  if_ne	not	local01, #0
206b8     A7 26 62 FC | 	wrlong	local01, fp
206bc     FC 02 90 FD | 	jmp	#LR__2563
206c0                 | LR__2553
206c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
206c0     08 4E 05 F1 | 	add	fp, #8
206c4     A7 26 02 FB | 	rdlong	local01, fp
206c8     08 4E 85 F1 | 	sub	fp, #8
206cc     1C 26 0E F2 | 	cmp	local01, #28 wz
206d0     14 4E 05 A1 |  if_e	add	fp, #20
206d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
206d8     14 4E 85 A1 |  if_e	sub	fp, #20
206dc     16 2B 02 A6 |  if_e	mov	local03, local04
206e0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
206e4     44 00 90 5D |  if_ne	jmp	#LR__2554
206e8     00 26 06 F6 | 	mov	local01, #0
206ec     A7 12 02 FB | 	rdlong	arg01, fp
206f0     09 13 52 F6 | 	abs	arg01, arg01 wc
206f4     1F 2E C6 C9 |  if_b	decod	local05, #31
206f8     00 2E 06 36 |  if_ae	mov	local05, #0
206fc     E0 93 B0 FD | 	call	#__system___float_fromuns
20700     17 FB 61 F5 | 	xor	result1, local05
20704     FD 12 02 F6 | 	mov	arg01, result1
20708     0C 4E 05 F1 | 	add	fp, #12
2070c     A7 14 02 FB | 	rdlong	arg02, fp
20710     0C 4E 85 F1 | 	sub	fp, #12
20714     01 16 06 F6 | 	mov	arg03, #1
20718     FC 9B B0 FD | 	call	#__system___float_cmp
2071c     00 FA 0D F2 | 	cmp	result1, #0 wz
20720     00 26 26 56 |  if_ne	not	local01, #0
20724     A7 26 62 FC | 	wrlong	local01, fp
20728     90 02 90 FD | 	jmp	#LR__2563
2072c                 | LR__2554
2072c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
2072c     08 4E 05 F1 | 	add	fp, #8
20730     A7 26 02 FB | 	rdlong	local01, fp
20734     08 4E 85 F1 | 	sub	fp, #8
20738     1C 26 0E F2 | 	cmp	local01, #28 wz
2073c     14 4E 05 A1 |  if_e	add	fp, #20
20740     A7 2C 02 AB |  if_e	rdlong	local04, fp
20744     14 4E 85 A1 |  if_e	sub	fp, #20
20748     16 2B 02 A6 |  if_e	mov	local03, local04
2074c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20750     24 00 90 5D |  if_ne	jmp	#LR__2555
20754     00 26 06 F6 | 	mov	local01, #0
20758     A7 28 02 FB | 	rdlong	local02, fp
2075c     0C 4E 05 F1 | 	add	fp, #12
20760     A7 2A 02 FB | 	rdlong	local03, fp
20764     0C 4E 85 F1 | 	sub	fp, #12
20768     15 29 0A F2 | 	cmp	local02, local03 wz
2076c     01 26 66 56 |  if_ne	neg	local01, #1
20770     A7 26 62 FC | 	wrlong	local01, fp
20774     44 02 90 FD | 	jmp	#LR__2563
20778                 | LR__2555
20778                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
20778     08 4E 05 F1 | 	add	fp, #8
2077c     A7 26 02 FB | 	rdlong	local01, fp
20780     08 4E 85 F1 | 	sub	fp, #8
20784     1C 26 0E F2 | 	cmp	local01, #28 wz
20788     14 4E 05 A1 |  if_e	add	fp, #20
2078c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20790     14 4E 85 A1 |  if_e	sub	fp, #20
20794     16 2B 02 A6 |  if_e	mov	local03, local04
20798     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2079c     24 00 90 5D |  if_ne	jmp	#LR__2556
207a0     00 26 06 F6 | 	mov	local01, #0
207a4     A7 28 02 FB | 	rdlong	local02, fp
207a8     0C 4E 05 F1 | 	add	fp, #12
207ac     A7 2A 02 FB | 	rdlong	local03, fp
207b0     0C 4E 85 F1 | 	sub	fp, #12
207b4     15 29 0A F2 | 	cmp	local02, local03 wz
207b8     01 26 66 56 |  if_ne	neg	local01, #1
207bc     A7 26 62 FC | 	wrlong	local01, fp
207c0     F8 01 90 FD | 	jmp	#LR__2563
207c4                 | LR__2556
207c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
207c4     08 4E 05 F1 | 	add	fp, #8
207c8     A7 26 02 FB | 	rdlong	local01, fp
207cc     08 4E 85 F1 | 	sub	fp, #8
207d0     1D 26 0E F2 | 	cmp	local01, #29 wz
207d4     14 4E 05 A1 |  if_e	add	fp, #20
207d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
207dc     14 4E 85 A1 |  if_e	sub	fp, #20
207e0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
207e4     34 00 90 5D |  if_ne	jmp	#LR__2557
207e8     00 26 06 F6 | 	mov	local01, #0
207ec     A7 12 02 FB | 	rdlong	arg01, fp
207f0     EC 92 B0 FD | 	call	#__system___float_fromuns
207f4     FD 12 02 F6 | 	mov	arg01, result1
207f8     0C 4E 05 F1 | 	add	fp, #12
207fc     A7 14 02 FB | 	rdlong	arg02, fp
20800     0C 4E 85 F1 | 	sub	fp, #12
20804     01 16 06 F6 | 	mov	arg03, #1
20808     0C 9B B0 FD | 	call	#__system___float_cmp
2080c     00 FA 0D F2 | 	cmp	result1, #0 wz
20810     00 26 26 56 |  if_ne	not	local01, #0
20814     A7 26 62 FC | 	wrlong	local01, fp
20818     A0 01 90 FD | 	jmp	#LR__2563
2081c                 | LR__2557
2081c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
2081c     08 4E 05 F1 | 	add	fp, #8
20820     A7 26 02 FB | 	rdlong	local01, fp
20824     08 4E 85 F1 | 	sub	fp, #8
20828     1D 26 0E F2 | 	cmp	local01, #29 wz
2082c     14 4E 05 A1 |  if_e	add	fp, #20
20830     A7 2A 02 AB |  if_e	rdlong	local03, fp
20834     14 4E 85 A1 |  if_e	sub	fp, #20
20838     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2083c     24 00 90 5D |  if_ne	jmp	#LR__2558
20840     00 26 06 F6 | 	mov	local01, #0
20844     A7 28 02 FB | 	rdlong	local02, fp
20848     0C 4E 05 F1 | 	add	fp, #12
2084c     A7 2A 02 FB | 	rdlong	local03, fp
20850     0C 4E 85 F1 | 	sub	fp, #12
20854     15 29 0A F2 | 	cmp	local02, local03 wz
20858     01 26 66 56 |  if_ne	neg	local01, #1
2085c     A7 26 62 FC | 	wrlong	local01, fp
20860     58 01 90 FD | 	jmp	#LR__2563
20864                 | LR__2558
20864                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
20864     08 4E 05 F1 | 	add	fp, #8
20868     A7 26 02 FB | 	rdlong	local01, fp
2086c     08 4E 85 F1 | 	sub	fp, #8
20870     1D 26 0E F2 | 	cmp	local01, #29 wz
20874     14 4E 05 A1 |  if_e	add	fp, #20
20878     A7 2A 02 AB |  if_e	rdlong	local03, fp
2087c     14 4E 85 A1 |  if_e	sub	fp, #20
20880     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20884     24 00 90 5D |  if_ne	jmp	#LR__2559
20888     00 26 06 F6 | 	mov	local01, #0
2088c     A7 28 02 FB | 	rdlong	local02, fp
20890     0C 4E 05 F1 | 	add	fp, #12
20894     A7 2A 02 FB | 	rdlong	local03, fp
20898     0C 4E 85 F1 | 	sub	fp, #12
2089c     15 29 0A F2 | 	cmp	local02, local03 wz
208a0     01 26 66 56 |  if_ne	neg	local01, #1
208a4     A7 26 62 FC | 	wrlong	local01, fp
208a8     10 01 90 FD | 	jmp	#LR__2563
208ac                 | LR__2559
208ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
208ac     08 4E 05 F1 | 	add	fp, #8
208b0     A7 26 02 FB | 	rdlong	local01, fp
208b4     08 4E 85 F1 | 	sub	fp, #8
208b8     2B 26 0E F2 | 	cmp	local01, #43 wz
208bc     14 4E 05 A1 |  if_e	add	fp, #20
208c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
208c4     14 4E 85 A1 |  if_e	sub	fp, #20
208c8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
208cc     30 00 90 5D |  if_ne	jmp	#LR__2560
208d0     00 26 06 F6 | 	mov	local01, #0
208d4     A7 12 02 FB | 	rdlong	arg01, fp
208d8     A4 CF BE FD | 	call	#_convertstring
208dc     FD 12 02 F6 | 	mov	arg01, result1
208e0     0C 4E 05 F1 | 	add	fp, #12
208e4     A7 14 02 FB | 	rdlong	arg02, fp
208e8     0C 4E 85 F1 | 	sub	fp, #12
208ec     A4 67 B0 FD | 	call	#__system___string_cmp
208f0     00 FA 0D F2 | 	cmp	result1, #0 wz
208f4     00 26 26 56 |  if_ne	not	local01, #0
208f8     A7 26 62 FC | 	wrlong	local01, fp
208fc     BC 00 90 FD | 	jmp	#LR__2563
20900                 | LR__2560
20900                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
20900     08 4E 05 F1 | 	add	fp, #8
20904     A7 26 02 FB | 	rdlong	local01, fp
20908     08 4E 85 F1 | 	sub	fp, #8
2090c     1F 26 0E F2 | 	cmp	local01, #31 wz
20910     14 4E 05 A1 |  if_e	add	fp, #20
20914     A7 2A 02 AB |  if_e	rdlong	local03, fp
20918     14 4E 85 A1 |  if_e	sub	fp, #20
2091c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20920     34 00 90 5D |  if_ne	jmp	#LR__2561
20924     00 26 06 F6 | 	mov	local01, #0
20928     A7 28 02 FB | 	rdlong	local02, fp
2092c     0C 4E 05 F1 | 	add	fp, #12
20930     A7 12 02 FB | 	rdlong	arg01, fp
20934     0C 4E 85 F1 | 	sub	fp, #12
20938     44 CF BE FD | 	call	#_convertstring
2093c     FD 14 02 F6 | 	mov	arg02, result1
20940     14 13 02 F6 | 	mov	arg01, local02
20944     4C 67 B0 FD | 	call	#__system___string_cmp
20948     00 FA 0D F2 | 	cmp	result1, #0 wz
2094c     00 26 26 56 |  if_ne	not	local01, #0
20950     A7 26 62 FC | 	wrlong	local01, fp
20954     64 00 90 FD | 	jmp	#LR__2563
20958                 | LR__2561
20958                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
20958     08 4E 05 F1 | 	add	fp, #8
2095c     A7 26 02 FB | 	rdlong	local01, fp
20960     08 4E 85 F1 | 	sub	fp, #8
20964     2B 26 0E F2 | 	cmp	local01, #43 wz
20968     14 4E 05 A1 |  if_e	add	fp, #20
2096c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20970     14 4E 85 A1 |  if_e	sub	fp, #20
20974     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20978     3C 00 90 5D |  if_ne	jmp	#LR__2562
2097c     00 26 06 F6 | 	mov	local01, #0
20980     A7 12 02 FB | 	rdlong	arg01, fp
20984     F8 CE BE FD | 	call	#_convertstring
20988     FD 28 02 F6 | 	mov	local02, result1
2098c     0C 4E 05 F1 | 	add	fp, #12
20990     A7 12 02 FB | 	rdlong	arg01, fp
20994     0C 4E 85 F1 | 	sub	fp, #12
20998     E4 CE BE FD | 	call	#_convertstring
2099c     FD 14 02 F6 | 	mov	arg02, result1
209a0     14 13 02 F6 | 	mov	arg01, local02
209a4     EC 66 B0 FD | 	call	#__system___string_cmp
209a8     00 FA 0D F2 | 	cmp	result1, #0 wz
209ac     00 26 26 56 |  if_ne	not	local01, #0
209b0     A7 26 62 FC | 	wrlong	local01, fp
209b4     04 00 90 FD | 	jmp	#LR__2563
209b8                 | LR__2562
209b8     A7 00 68 FC | 	wrlong	#0, fp
209bc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
209bc                 | LR__2563
209bc     08 4E 05 F1 | 	add	fp, #8
209c0     A7 38 68 FC | 	wrlong	#28, fp
209c4     08 4E 85 F1 | 	sub	fp, #8
209c8     A7 12 02 F6 | 	mov	arg01, fp
209cc     D0 CD BE FD | 	call	#_push
209d0     A7 F0 03 F6 | 	mov	ptra, fp
209d4     B2 00 A0 FD | 	call	#popregs_
209d8                 | _do_ne_ret
209d8     2D 00 64 FD | 	ret
209dc                 | 
209dc                 | ' 
209dc                 | ' '--------------------------------- OR
209dc                 | ' 
209dc                 | ' sub do_or 
209dc                 | _do_or
209dc     03 4A 05 F6 | 	mov	COUNT_, #3
209e0     A8 00 A0 FD | 	call	#pushregs_
209e4     18 F0 07 F1 | 	add	ptra, #24
209e8     1C CD BE FD | 	call	#_pop
209ec     FD 12 02 F6 | 	mov	arg01, result1
209f0     FE 26 02 F6 | 	mov	local01, result2
209f4     FF 28 02 F6 | 	mov	local02, result3
209f8     0C 4E 05 F1 | 	add	fp, #12
209fc     A7 12 62 FC | 	wrlong	arg01, fp
20a00     04 4E 05 F1 | 	add	fp, #4
20a04     A7 26 62 FC | 	wrlong	local01, fp
20a08     04 4E 05 F1 | 	add	fp, #4
20a0c     A7 28 62 FC | 	wrlong	local02, fp
20a10     14 4E 85 F1 | 	sub	fp, #20
20a14     F0 CC BE FD | 	call	#_pop
20a18     FF 2A 02 F6 | 	mov	local03, result3
20a1c     A7 FA 61 FC | 	wrlong	result1, fp
20a20     04 4E 05 F1 | 	add	fp, #4
20a24     A7 FC 61 FC | 	wrlong	result2, fp
20a28     04 4E 05 F1 | 	add	fp, #4
20a2c     A7 2A 62 FC | 	wrlong	local03, fp
20a30                 | ' 
20a30                 | ' t2=pop()
20a30                 | ' t1=pop()
20a30                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20a30     08 4E 85 F1 | 	sub	fp, #8
20a34     1C 2A 0E F2 | 	cmp	local03, #28 wz
20a38     A7 2A 02 AB |  if_e	rdlong	local03, fp
20a3c     A7 2A 62 AC |  if_e	wrlong	local03, fp
20a40     08 4E 05 A1 |  if_e	add	fp, #8
20a44     A7 3A 68 AC |  if_e	wrlong	#29, fp
20a48     08 4E 85 A1 |  if_e	sub	fp, #8
20a4c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20a4c     14 4E 05 F1 | 	add	fp, #20
20a50     A7 2A 02 FB | 	rdlong	local03, fp
20a54     14 4E 85 F1 | 	sub	fp, #20
20a58     1C 2A 0E F2 | 	cmp	local03, #28 wz
20a5c     18 00 90 5D |  if_ne	jmp	#LR__2570
20a60     0C 4E 05 F1 | 	add	fp, #12
20a64     A7 2A 02 FB | 	rdlong	local03, fp
20a68     A7 2A 62 FC | 	wrlong	local03, fp
20a6c     08 4E 05 F1 | 	add	fp, #8
20a70     A7 3A 68 FC | 	wrlong	#29, fp
20a74     14 4E 85 F1 | 	sub	fp, #20
20a78                 | LR__2570
20a78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
20a78     08 4E 05 F1 | 	add	fp, #8
20a7c     A7 2A 02 FB | 	rdlong	local03, fp
20a80     08 4E 85 F1 | 	sub	fp, #8
20a84     1F 2A 0E F2 | 	cmp	local03, #31 wz
20a88     14 4E 05 51 |  if_ne	add	fp, #20
20a8c     A7 28 02 5B |  if_ne	rdlong	local02, fp
20a90     14 4E 85 51 |  if_ne	sub	fp, #20
20a94     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20a98     08 4E 05 51 |  if_ne	add	fp, #8
20a9c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20aa0     08 4E 85 51 |  if_ne	sub	fp, #8
20aa4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20aa8     14 4E 05 51 |  if_ne	add	fp, #20
20aac     14 4E 85 51 |  if_ne	sub	fp, #20
20ab0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20ab4     A7 0C 68 AC |  if_e	wrlong	#6, fp
20ab8     08 4E 05 A1 |  if_e	add	fp, #8
20abc     A7 FE 69 AC |  if_e	wrlong	#255, fp
20ac0     08 4E 85 A1 |  if_e	sub	fp, #8
20ac4     18 00 90 AD |  if_e	jmp	#LR__2571
20ac8     A7 2A 02 FB | 	rdlong	local03, fp
20acc     0C 4E 05 F1 | 	add	fp, #12
20ad0     A7 26 02 FB | 	rdlong	local01, fp
20ad4     0C 4E 85 F1 | 	sub	fp, #12
20ad8     13 2B 42 F5 | 	or	local03, local01
20adc     A7 2A 62 FC | 	wrlong	local03, fp
20ae0                 | LR__2571
20ae0     A7 12 02 F6 | 	mov	arg01, fp
20ae4     B8 CC BE FD | 	call	#_push
20ae8     A7 F0 03 F6 | 	mov	ptra, fp
20aec     B2 00 A0 FD | 	call	#popregs_
20af0                 | _do_or_ret
20af0     2D 00 64 FD | 	ret
20af4                 | 
20af4                 | ' 
20af4                 | ' '--------------------------------- plus (+)
20af4                 | ' 
20af4                 | ' sub do_plus 
20af4                 | _do_plus
20af4     05 4A 05 F6 | 	mov	COUNT_, #5
20af8     A8 00 A0 FD | 	call	#pushregs_
20afc     18 F0 07 F1 | 	add	ptra, #24
20b00     04 CC BE FD | 	call	#_pop
20b04     FD 26 02 F6 | 	mov	local01, result1
20b08     FE 28 02 F6 | 	mov	local02, result2
20b0c     FF 2A 02 F6 | 	mov	local03, result3
20b10     0C 4E 05 F1 | 	add	fp, #12
20b14     A7 26 62 FC | 	wrlong	local01, fp
20b18     04 4E 05 F1 | 	add	fp, #4
20b1c     A7 28 62 FC | 	wrlong	local02, fp
20b20     04 4E 05 F1 | 	add	fp, #4
20b24     A7 2A 62 FC | 	wrlong	local03, fp
20b28     14 4E 85 F1 | 	sub	fp, #20
20b2c     D8 CB BE FD | 	call	#_pop
20b30     FF 2A 02 F6 | 	mov	local03, result3
20b34     A7 FA 61 FC | 	wrlong	result1, fp
20b38     04 4E 05 F1 | 	add	fp, #4
20b3c     A7 FC 61 FC | 	wrlong	result2, fp
20b40     04 4E 05 F1 | 	add	fp, #4
20b44     A7 2A 62 FC | 	wrlong	local03, fp
20b48                 | ' 
20b48                 | ' t2=pop()
20b48                 | ' t1=pop()
20b48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
20b48     08 4E 85 F1 | 	sub	fp, #8
20b4c     1D 2A 0E F2 | 	cmp	local03, #29 wz
20b50     14 4E 05 A1 |  if_e	add	fp, #20
20b54     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b58     14 4E 85 A1 |  if_e	sub	fp, #20
20b5c     16 2B 02 A6 |  if_e	mov	local03, local04
20b60     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20b64     1C 00 90 5D |  if_ne	jmp	#LR__2580
20b68     A7 26 02 FB | 	rdlong	local01, fp
20b6c     0C 4E 05 F1 | 	add	fp, #12
20b70     A7 28 02 FB | 	rdlong	local02, fp
20b74     0C 4E 85 F1 | 	sub	fp, #12
20b78     14 27 02 F1 | 	add	local01, local02
20b7c     A7 26 62 FC | 	wrlong	local01, fp
20b80     48 04 90 FD | 	jmp	#LR__2595
20b84                 | LR__2580
20b84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
20b84     08 4E 05 F1 | 	add	fp, #8
20b88     A7 26 02 FB | 	rdlong	local01, fp
20b8c     08 4E 85 F1 | 	sub	fp, #8
20b90     1D 26 0E F2 | 	cmp	local01, #29 wz
20b94     14 4E 05 A1 |  if_e	add	fp, #20
20b98     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b9c     14 4E 85 A1 |  if_e	sub	fp, #20
20ba0     16 2B 02 A6 |  if_e	mov	local03, local04
20ba4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20ba8     28 00 90 5D |  if_ne	jmp	#LR__2581
20bac     A7 26 02 FB | 	rdlong	local01, fp
20bb0     0C 4E 05 F1 | 	add	fp, #12
20bb4     A7 28 02 FB | 	rdlong	local02, fp
20bb8     0C 4E 85 F1 | 	sub	fp, #12
20bbc     14 27 02 F1 | 	add	local01, local02
20bc0     A7 26 62 FC | 	wrlong	local01, fp
20bc4     08 4E 05 F1 | 	add	fp, #8
20bc8     A7 38 68 FC | 	wrlong	#28, fp
20bcc     08 4E 85 F1 | 	sub	fp, #8
20bd0     F8 03 90 FD | 	jmp	#LR__2595
20bd4                 | LR__2581
20bd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20bd4     08 4E 05 F1 | 	add	fp, #8
20bd8     A7 26 02 FB | 	rdlong	local01, fp
20bdc     08 4E 85 F1 | 	sub	fp, #8
20be0     1D 26 0E F2 | 	cmp	local01, #29 wz
20be4     14 4E 05 A1 |  if_e	add	fp, #20
20be8     A7 2C 02 AB |  if_e	rdlong	local04, fp
20bec     14 4E 85 A1 |  if_e	sub	fp, #20
20bf0     16 2B 02 A6 |  if_e	mov	local03, local04
20bf4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20bf8     30 00 90 5D |  if_ne	jmp	#LR__2582
20bfc     A7 12 02 FB | 	rdlong	arg01, fp
20c00     DC 8E B0 FD | 	call	#__system___float_fromuns
20c04     FD 12 02 F6 | 	mov	arg01, result1
20c08     0C 4E 05 F1 | 	add	fp, #12
20c0c     A7 14 02 FB | 	rdlong	arg02, fp
20c10     0C 4E 85 F1 | 	sub	fp, #12
20c14     FC 8E B0 FD | 	call	#__system___float_add
20c18     A7 FA 61 FC | 	wrlong	result1, fp
20c1c     08 4E 05 F1 | 	add	fp, #8
20c20     A7 3C 68 FC | 	wrlong	#30, fp
20c24     08 4E 85 F1 | 	sub	fp, #8
20c28     A0 03 90 FD | 	jmp	#LR__2595
20c2c                 | LR__2582
20c2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
20c2c     08 4E 05 F1 | 	add	fp, #8
20c30     A7 26 02 FB | 	rdlong	local01, fp
20c34     08 4E 85 F1 | 	sub	fp, #8
20c38     1C 26 0E F2 | 	cmp	local01, #28 wz
20c3c     14 4E 05 A1 |  if_e	add	fp, #20
20c40     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c44     14 4E 85 A1 |  if_e	sub	fp, #20
20c48     16 2B 02 A6 |  if_e	mov	local03, local04
20c4c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20c50     1C 00 90 5D |  if_ne	jmp	#LR__2583
20c54     A7 26 02 FB | 	rdlong	local01, fp
20c58     0C 4E 05 F1 | 	add	fp, #12
20c5c     A7 28 02 FB | 	rdlong	local02, fp
20c60     0C 4E 85 F1 | 	sub	fp, #12
20c64     14 27 02 F1 | 	add	local01, local02
20c68     A7 26 62 FC | 	wrlong	local01, fp
20c6c     5C 03 90 FD | 	jmp	#LR__2595
20c70                 | LR__2583
20c70                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
20c70     08 4E 05 F1 | 	add	fp, #8
20c74     A7 26 02 FB | 	rdlong	local01, fp
20c78     08 4E 85 F1 | 	sub	fp, #8
20c7c     1C 26 0E F2 | 	cmp	local01, #28 wz
20c80     14 4E 05 A1 |  if_e	add	fp, #20
20c84     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c88     14 4E 85 A1 |  if_e	sub	fp, #20
20c8c     16 2B 02 A6 |  if_e	mov	local03, local04
20c90     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20c94     1C 00 90 5D |  if_ne	jmp	#LR__2584
20c98     A7 26 02 FB | 	rdlong	local01, fp
20c9c     0C 4E 05 F1 | 	add	fp, #12
20ca0     A7 28 02 FB | 	rdlong	local02, fp
20ca4     0C 4E 85 F1 | 	sub	fp, #12
20ca8     14 27 02 F1 | 	add	local01, local02
20cac     A7 26 62 FC | 	wrlong	local01, fp
20cb0     18 03 90 FD | 	jmp	#LR__2595
20cb4                 | LR__2584
20cb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20cb4     08 4E 05 F1 | 	add	fp, #8
20cb8     A7 26 02 FB | 	rdlong	local01, fp
20cbc     08 4E 85 F1 | 	sub	fp, #8
20cc0     1C 26 0E F2 | 	cmp	local01, #28 wz
20cc4     14 4E 05 A1 |  if_e	add	fp, #20
20cc8     A7 2C 02 AB |  if_e	rdlong	local04, fp
20ccc     14 4E 85 A1 |  if_e	sub	fp, #20
20cd0     16 2B 02 A6 |  if_e	mov	local03, local04
20cd4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20cd8     40 00 90 5D |  if_ne	jmp	#LR__2585
20cdc     A7 12 02 FB | 	rdlong	arg01, fp
20ce0     09 13 52 F6 | 	abs	arg01, arg01 wc
20ce4     1F 2E C6 C9 |  if_b	decod	local05, #31
20ce8     00 2E 06 36 |  if_ae	mov	local05, #0
20cec     F0 8D B0 FD | 	call	#__system___float_fromuns
20cf0     17 FB 61 F5 | 	xor	result1, local05
20cf4     FD 12 02 F6 | 	mov	arg01, result1
20cf8     0C 4E 05 F1 | 	add	fp, #12
20cfc     A7 14 02 FB | 	rdlong	arg02, fp
20d00     0C 4E 85 F1 | 	sub	fp, #12
20d04     0C 8E B0 FD | 	call	#__system___float_add
20d08     A7 FA 61 FC | 	wrlong	result1, fp
20d0c     08 4E 05 F1 | 	add	fp, #8
20d10     A7 3C 68 FC | 	wrlong	#30, fp
20d14     08 4E 85 F1 | 	sub	fp, #8
20d18     B0 02 90 FD | 	jmp	#LR__2595
20d1c                 | LR__2585
20d1c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
20d1c     08 4E 05 F1 | 	add	fp, #8
20d20     A7 26 02 FB | 	rdlong	local01, fp
20d24     08 4E 85 F1 | 	sub	fp, #8
20d28     1E 26 0E F2 | 	cmp	local01, #30 wz
20d2c     14 4E 05 A1 |  if_e	add	fp, #20
20d30     A7 2C 02 AB |  if_e	rdlong	local04, fp
20d34     14 4E 85 A1 |  if_e	sub	fp, #20
20d38     16 2B 02 A6 |  if_e	mov	local03, local04
20d3c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20d40     28 00 90 5D |  if_ne	jmp	#LR__2586
20d44     A7 26 02 FB | 	rdlong	local01, fp
20d48     0C 4E 05 F1 | 	add	fp, #12
20d4c     A7 12 02 FB | 	rdlong	arg01, fp
20d50     0C 4E 85 F1 | 	sub	fp, #12
20d54     88 8D B0 FD | 	call	#__system___float_fromuns
20d58     FD 14 02 F6 | 	mov	arg02, result1
20d5c     13 13 02 F6 | 	mov	arg01, local01
20d60     B0 8D B0 FD | 	call	#__system___float_add
20d64     A7 FA 61 FC | 	wrlong	result1, fp
20d68     60 02 90 FD | 	jmp	#LR__2595
20d6c                 | LR__2586
20d6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
20d6c     08 4E 05 F1 | 	add	fp, #8
20d70     A7 26 02 FB | 	rdlong	local01, fp
20d74     08 4E 85 F1 | 	sub	fp, #8
20d78     1E 26 0E F2 | 	cmp	local01, #30 wz
20d7c     14 4E 05 A1 |  if_e	add	fp, #20
20d80     A7 2C 02 AB |  if_e	rdlong	local04, fp
20d84     14 4E 85 A1 |  if_e	sub	fp, #20
20d88     16 2B 02 A6 |  if_e	mov	local03, local04
20d8c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20d90     38 00 90 5D |  if_ne	jmp	#LR__2587
20d94     A7 26 02 FB | 	rdlong	local01, fp
20d98     0C 4E 05 F1 | 	add	fp, #12
20d9c     A7 12 02 FB | 	rdlong	arg01, fp
20da0     0C 4E 85 F1 | 	sub	fp, #12
20da4     09 13 52 F6 | 	abs	arg01, arg01 wc
20da8     1F 2E C6 C9 |  if_b	decod	local05, #31
20dac     00 2E 06 36 |  if_ae	mov	local05, #0
20db0     2C 8D B0 FD | 	call	#__system___float_fromuns
20db4     17 FB 61 F5 | 	xor	result1, local05
20db8     FD 14 02 F6 | 	mov	arg02, result1
20dbc     13 13 02 F6 | 	mov	arg01, local01
20dc0     50 8D B0 FD | 	call	#__system___float_add
20dc4     A7 FA 61 FC | 	wrlong	result1, fp
20dc8     00 02 90 FD | 	jmp	#LR__2595
20dcc                 | LR__2587
20dcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
20dcc     08 4E 05 F1 | 	add	fp, #8
20dd0     A7 26 02 FB | 	rdlong	local01, fp
20dd4     08 4E 85 F1 | 	sub	fp, #8
20dd8     1E 26 0E F2 | 	cmp	local01, #30 wz
20ddc     14 4E 05 A1 |  if_e	add	fp, #20
20de0     A7 2C 02 AB |  if_e	rdlong	local04, fp
20de4     14 4E 85 A1 |  if_e	sub	fp, #20
20de8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20dec     1C 00 90 5D |  if_ne	jmp	#LR__2588
20df0     A7 12 02 FB | 	rdlong	arg01, fp
20df4     0C 4E 05 F1 | 	add	fp, #12
20df8     A7 14 02 FB | 	rdlong	arg02, fp
20dfc     0C 4E 85 F1 | 	sub	fp, #12
20e00     10 8D B0 FD | 	call	#__system___float_add
20e04     A7 FA 61 FC | 	wrlong	result1, fp
20e08     C0 01 90 FD | 	jmp	#LR__2595
20e0c                 | LR__2588
20e0c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20e0c     08 4E 05 F1 | 	add	fp, #8
20e10     A7 26 02 FB | 	rdlong	local01, fp
20e14     08 4E 85 F1 | 	sub	fp, #8
20e18     1F 26 0E F2 | 	cmp	local01, #31 wz
20e1c     24 00 90 5D |  if_ne	jmp	#LR__2589
20e20     14 4E 05 F1 | 	add	fp, #20
20e24     A7 2A 02 FB | 	rdlong	local03, fp
20e28     14 4E 85 F1 | 	sub	fp, #20
20e2c     1F 2A 0E F2 | 	cmp	local03, #31 wz
20e30     A7 04 68 5C |  if_ne	wrlong	#2, fp
20e34     08 4E 05 51 |  if_ne	add	fp, #8
20e38     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20e3c     08 4E 85 51 |  if_ne	sub	fp, #8
20e40     88 01 90 5D |  if_ne	jmp	#LR__2595
20e44                 | LR__2589
20e44                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20e44     14 4E 05 F1 | 	add	fp, #20
20e48     A7 26 02 FB | 	rdlong	local01, fp
20e4c     14 4E 85 F1 | 	sub	fp, #20
20e50     1F 26 0E F2 | 	cmp	local01, #31 wz
20e54     24 00 90 5D |  if_ne	jmp	#LR__2590
20e58     08 4E 05 F1 | 	add	fp, #8
20e5c     A7 2A 02 FB | 	rdlong	local03, fp
20e60     08 4E 85 F1 | 	sub	fp, #8
20e64     1F 2A 0E F2 | 	cmp	local03, #31 wz
20e68     A7 04 68 5C |  if_ne	wrlong	#2, fp
20e6c     08 4E 05 51 |  if_ne	add	fp, #8
20e70     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20e74     08 4E 85 51 |  if_ne	sub	fp, #8
20e78     50 01 90 5D |  if_ne	jmp	#LR__2595
20e7c                 | LR__2590
20e7c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
20e7c     08 4E 05 F1 | 	add	fp, #8
20e80     A7 26 02 FB | 	rdlong	local01, fp
20e84     08 4E 85 F1 | 	sub	fp, #8
20e88     1F 26 0E F2 | 	cmp	local01, #31 wz
20e8c     14 4E 05 A1 |  if_e	add	fp, #20
20e90     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e94     14 4E 85 A1 |  if_e	sub	fp, #20
20e98     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20e9c     1C 00 90 5D |  if_ne	jmp	#LR__2591
20ea0     A7 12 02 FB | 	rdlong	arg01, fp
20ea4     0C 4E 05 F1 | 	add	fp, #12
20ea8     A7 14 02 FB | 	rdlong	arg02, fp
20eac     0C 4E 85 F1 | 	sub	fp, #12
20eb0     14 62 B0 FD | 	call	#__system___string_concat
20eb4     A7 FA 61 FC | 	wrlong	result1, fp
20eb8     10 01 90 FD | 	jmp	#LR__2595
20ebc                 | LR__2591
20ebc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
20ebc     08 4E 05 F1 | 	add	fp, #8
20ec0     A7 26 02 FB | 	rdlong	local01, fp
20ec4     08 4E 85 F1 | 	sub	fp, #8
20ec8     2B 26 0E F2 | 	cmp	local01, #43 wz
20ecc     14 4E 05 A1 |  if_e	add	fp, #20
20ed0     A7 2A 02 AB |  if_e	rdlong	local03, fp
20ed4     14 4E 85 A1 |  if_e	sub	fp, #20
20ed8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20edc     30 00 90 5D |  if_ne	jmp	#LR__2592
20ee0     A7 12 02 FB | 	rdlong	arg01, fp
20ee4     98 C9 BE FD | 	call	#_convertstring
20ee8     FD 12 02 F6 | 	mov	arg01, result1
20eec     0C 4E 05 F1 | 	add	fp, #12
20ef0     A7 14 02 FB | 	rdlong	arg02, fp
20ef4     0C 4E 85 F1 | 	sub	fp, #12
20ef8     CC 61 B0 FD | 	call	#__system___string_concat
20efc     A7 FA 61 FC | 	wrlong	result1, fp
20f00     08 4E 05 F1 | 	add	fp, #8
20f04     A7 3E 68 FC | 	wrlong	#31, fp
20f08     08 4E 85 F1 | 	sub	fp, #8
20f0c     BC 00 90 FD | 	jmp	#LR__2595
20f10                 | LR__2592
20f10                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
20f10     08 4E 05 F1 | 	add	fp, #8
20f14     A7 26 02 FB | 	rdlong	local01, fp
20f18     08 4E 85 F1 | 	sub	fp, #8
20f1c     1F 26 0E F2 | 	cmp	local01, #31 wz
20f20     14 4E 05 A1 |  if_e	add	fp, #20
20f24     A7 2A 02 AB |  if_e	rdlong	local03, fp
20f28     14 4E 85 A1 |  if_e	sub	fp, #20
20f2c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20f30     28 00 90 5D |  if_ne	jmp	#LR__2593
20f34     A7 26 02 FB | 	rdlong	local01, fp
20f38     0C 4E 05 F1 | 	add	fp, #12
20f3c     A7 12 02 FB | 	rdlong	arg01, fp
20f40     0C 4E 85 F1 | 	sub	fp, #12
20f44     38 C9 BE FD | 	call	#_convertstring
20f48     FD 14 02 F6 | 	mov	arg02, result1
20f4c     13 13 02 F6 | 	mov	arg01, local01
20f50     74 61 B0 FD | 	call	#__system___string_concat
20f54     A7 FA 61 FC | 	wrlong	result1, fp
20f58     70 00 90 FD | 	jmp	#LR__2595
20f5c                 | LR__2593
20f5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
20f5c     08 4E 05 F1 | 	add	fp, #8
20f60     A7 26 02 FB | 	rdlong	local01, fp
20f64     08 4E 85 F1 | 	sub	fp, #8
20f68     2B 26 0E F2 | 	cmp	local01, #43 wz
20f6c     14 4E 05 A1 |  if_e	add	fp, #20
20f70     A7 2A 02 AB |  if_e	rdlong	local03, fp
20f74     14 4E 85 A1 |  if_e	sub	fp, #20
20f78     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20f7c     3C 00 90 5D |  if_ne	jmp	#LR__2594
20f80     A7 12 02 FB | 	rdlong	arg01, fp
20f84     F8 C8 BE FD | 	call	#_convertstring
20f88     FD 26 02 F6 | 	mov	local01, result1
20f8c     0C 4E 05 F1 | 	add	fp, #12
20f90     A7 12 02 FB | 	rdlong	arg01, fp
20f94     0C 4E 85 F1 | 	sub	fp, #12
20f98     E4 C8 BE FD | 	call	#_convertstring
20f9c     FD 14 02 F6 | 	mov	arg02, result1
20fa0     13 13 02 F6 | 	mov	arg01, local01
20fa4     20 61 B0 FD | 	call	#__system___string_concat
20fa8     A7 FA 61 FC | 	wrlong	result1, fp
20fac     08 4E 05 F1 | 	add	fp, #8
20fb0     A7 3E 68 FC | 	wrlong	#31, fp
20fb4     08 4E 85 F1 | 	sub	fp, #8
20fb8     10 00 90 FD | 	jmp	#LR__2595
20fbc                 | LR__2594
20fbc     A7 08 68 FC | 	wrlong	#4, fp
20fc0     08 4E 05 F1 | 	add	fp, #8
20fc4     A7 FE 69 FC | 	wrlong	#255, fp
20fc8     08 4E 85 F1 | 	sub	fp, #8
20fcc                 | LR__2595
20fcc     A7 12 02 F6 | 	mov	arg01, fp
20fd0     CC C7 BE FD | 	call	#_push
20fd4     A7 F0 03 F6 | 	mov	ptra, fp
20fd8     B2 00 A0 FD | 	call	#popregs_
20fdc                 | _do_plus_ret
20fdc     2D 00 64 FD | 	ret
20fe0                 | 
20fe0                 | ' 
20fe0                 | ' '--------------------------------- power (^)
20fe0                 | ' 
20fe0                 | ' sub do_power 
20fe0                 | _do_power
20fe0     02 4A 05 F6 | 	mov	COUNT_, #2
20fe4     A8 00 A0 FD | 	call	#pushregs_
20fe8     18 F0 07 F1 | 	add	ptra, #24
20fec     18 C7 BE FD | 	call	#_pop
20ff0     FD 14 02 F6 | 	mov	arg02, result1
20ff4     FE 12 02 F6 | 	mov	arg01, result2
20ff8     FF 26 02 F6 | 	mov	local01, result3
20ffc     0C 4E 05 F1 | 	add	fp, #12
21000     A7 14 62 FC | 	wrlong	arg02, fp
21004     04 4E 05 F1 | 	add	fp, #4
21008     A7 12 62 FC | 	wrlong	arg01, fp
2100c     04 4E 05 F1 | 	add	fp, #4
21010     A7 26 62 FC | 	wrlong	local01, fp
21014     14 4E 85 F1 | 	sub	fp, #20
21018     EC C6 BE FD | 	call	#_pop
2101c     A7 FA 61 FC | 	wrlong	result1, fp
21020     04 4E 05 F1 | 	add	fp, #4
21024     A7 FC 61 FC | 	wrlong	result2, fp
21028     04 4E 05 F1 | 	add	fp, #4
2102c     A7 FE 61 FC | 	wrlong	result3, fp
21030                 | ' 
21030                 | ' t2=pop()
21030                 | ' t1=pop()
21030                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
21030     08 4E 85 F1 | 	sub	fp, #8
21034     1F FE 0D F2 | 	cmp	result3, #31 wz
21038     14 4E 05 51 |  if_ne	add	fp, #20
2103c     A7 26 02 5B |  if_ne	rdlong	local01, fp
21040     14 4E 85 51 |  if_ne	sub	fp, #20
21044     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
21048     A7 18 68 AC |  if_e	wrlong	#12, fp
2104c     08 4E 05 A1 |  if_e	add	fp, #8
21050     A7 FE 69 AC |  if_e	wrlong	#255, fp
21054     08 4E 85 A1 |  if_e	sub	fp, #8
21058     38 01 90 AD |  if_e	jmp	#LR__2605
2105c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
2105c     08 4E 05 F1 | 	add	fp, #8
21060     A7 14 02 FB | 	rdlong	arg02, fp
21064     08 4E 85 F1 | 	sub	fp, #8
21068     1C 14 0E F2 | 	cmp	arg02, #28 wz
2106c     28 00 90 5D |  if_ne	jmp	#LR__2600
21070     08 4E 05 F1 | 	add	fp, #8
21074     A7 3C 68 FC | 	wrlong	#30, fp
21078     08 4E 85 F1 | 	sub	fp, #8
2107c     A7 12 02 FB | 	rdlong	arg01, fp
21080     09 13 52 F6 | 	abs	arg01, arg01 wc
21084     1F 28 C6 C9 |  if_b	decod	local02, #31
21088     00 28 06 36 |  if_ae	mov	local02, #0
2108c     50 8A B0 FD | 	call	#__system___float_fromuns
21090     14 FB 61 F5 | 	xor	result1, local02
21094     A7 FA 61 FC | 	wrlong	result1, fp
21098                 | LR__2600
21098                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
21098     08 4E 05 F1 | 	add	fp, #8
2109c     A7 14 02 FB | 	rdlong	arg02, fp
210a0     08 4E 85 F1 | 	sub	fp, #8
210a4     1D 14 0E F2 | 	cmp	arg02, #29 wz
210a8     18 00 90 5D |  if_ne	jmp	#LR__2601
210ac     08 4E 05 F1 | 	add	fp, #8
210b0     A7 3C 68 FC | 	wrlong	#30, fp
210b4     08 4E 85 F1 | 	sub	fp, #8
210b8     A7 12 02 FB | 	rdlong	arg01, fp
210bc     20 8A B0 FD | 	call	#__system___float_fromuns
210c0     A7 FA 61 FC | 	wrlong	result1, fp
210c4                 | LR__2601
210c4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
210c4     14 4E 05 F1 | 	add	fp, #20
210c8     A7 14 02 FB | 	rdlong	arg02, fp
210cc     14 4E 85 F1 | 	sub	fp, #20
210d0     1C 14 0E F2 | 	cmp	arg02, #28 wz
210d4     34 00 90 5D |  if_ne	jmp	#LR__2602
210d8     14 4E 05 F1 | 	add	fp, #20
210dc     A7 3C 68 FC | 	wrlong	#30, fp
210e0     08 4E 85 F1 | 	sub	fp, #8
210e4     A7 12 02 FB | 	rdlong	arg01, fp
210e8     0C 4E 85 F1 | 	sub	fp, #12
210ec     09 13 52 F6 | 	abs	arg01, arg01 wc
210f0     1F 28 C6 C9 |  if_b	decod	local02, #31
210f4     00 28 06 36 |  if_ae	mov	local02, #0
210f8     E4 89 B0 FD | 	call	#__system___float_fromuns
210fc     14 FB 61 F5 | 	xor	result1, local02
21100     0C 4E 05 F1 | 	add	fp, #12
21104     A7 FA 61 FC | 	wrlong	result1, fp
21108     0C 4E 85 F1 | 	sub	fp, #12
2110c                 | LR__2602
2110c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
2110c     14 4E 05 F1 | 	add	fp, #20
21110     A7 14 02 FB | 	rdlong	arg02, fp
21114     14 4E 85 F1 | 	sub	fp, #20
21118     1D 14 0E F2 | 	cmp	arg02, #29 wz
2111c     24 00 90 5D |  if_ne	jmp	#LR__2603
21120     14 4E 05 F1 | 	add	fp, #20
21124     A7 3C 68 FC | 	wrlong	#30, fp
21128     08 4E 85 F1 | 	sub	fp, #8
2112c     A7 12 02 FB | 	rdlong	arg01, fp
21130     0C 4E 85 F1 | 	sub	fp, #12
21134     A8 89 B0 FD | 	call	#__system___float_fromuns
21138     0C 4E 05 F1 | 	add	fp, #12
2113c     A7 FA 61 FC | 	wrlong	result1, fp
21140     0C 4E 85 F1 | 	sub	fp, #12
21144                 | LR__2603
21144                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
21144     08 4E 05 F1 | 	add	fp, #8
21148     A7 14 02 FB | 	rdlong	arg02, fp
2114c     08 4E 85 F1 | 	sub	fp, #8
21150     1E 14 0E F2 | 	cmp	arg02, #30 wz
21154     14 4E 05 A1 |  if_e	add	fp, #20
21158     A7 26 02 AB |  if_e	rdlong	local01, fp
2115c     14 4E 85 A1 |  if_e	sub	fp, #20
21160     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
21164     1C 00 90 5D |  if_ne	jmp	#LR__2604
21168     A7 12 02 FB | 	rdlong	arg01, fp
2116c     0C 4E 05 F1 | 	add	fp, #12
21170     A7 14 02 FB | 	rdlong	arg02, fp
21174     0C 4E 85 F1 | 	sub	fp, #12
21178     70 9C B0 FD | 	call	#__system____builtin_powf
2117c     A7 FA 61 FC | 	wrlong	result1, fp
21180     10 00 90 FD | 	jmp	#LR__2605
21184                 | LR__2604
21184     A7 1A 68 FC | 	wrlong	#13, fp
21188     08 4E 05 F1 | 	add	fp, #8
2118c     A7 FE 69 FC | 	wrlong	#255, fp
21190     08 4E 85 F1 | 	sub	fp, #8
21194                 | LR__2605
21194     A7 12 02 F6 | 	mov	arg01, fp
21198     04 C6 BE FD | 	call	#_push
2119c     A7 F0 03 F6 | 	mov	ptra, fp
211a0     B2 00 A0 FD | 	call	#popregs_
211a4                 | _do_power_ret
211a4     2D 00 64 FD | 	ret
211a8                 | 
211a8                 | ' 
211a8                 | ' '--------------------------------- SHL
211a8                 | ' 
211a8                 | ' sub do_shl 
211a8                 | _do_shl
211a8     03 4A 05 F6 | 	mov	COUNT_, #3
211ac     A8 00 A0 FD | 	call	#pushregs_
211b0     18 F0 07 F1 | 	add	ptra, #24
211b4     50 C5 BE FD | 	call	#_pop
211b8     FD 12 02 F6 | 	mov	arg01, result1
211bc     FE 26 02 F6 | 	mov	local01, result2
211c0     FF 28 02 F6 | 	mov	local02, result3
211c4     0C 4E 05 F1 | 	add	fp, #12
211c8     A7 12 62 FC | 	wrlong	arg01, fp
211cc     04 4E 05 F1 | 	add	fp, #4
211d0     A7 26 62 FC | 	wrlong	local01, fp
211d4     04 4E 05 F1 | 	add	fp, #4
211d8     A7 28 62 FC | 	wrlong	local02, fp
211dc     14 4E 85 F1 | 	sub	fp, #20
211e0     24 C5 BE FD | 	call	#_pop
211e4     FF 2A 02 F6 | 	mov	local03, result3
211e8     A7 FA 61 FC | 	wrlong	result1, fp
211ec     04 4E 05 F1 | 	add	fp, #4
211f0     A7 FC 61 FC | 	wrlong	result2, fp
211f4     04 4E 05 F1 | 	add	fp, #4
211f8     A7 2A 62 FC | 	wrlong	local03, fp
211fc                 | ' 
211fc                 | ' t2=pop()
211fc                 | ' t1=pop()
211fc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
211fc     08 4E 85 F1 | 	sub	fp, #8
21200     1C 2A 0E F2 | 	cmp	local03, #28 wz
21204     A7 2A 02 AB |  if_e	rdlong	local03, fp
21208     A7 2A 62 AC |  if_e	wrlong	local03, fp
2120c     08 4E 05 A1 |  if_e	add	fp, #8
21210     A7 3A 68 AC |  if_e	wrlong	#29, fp
21214     08 4E 85 A1 |  if_e	sub	fp, #8
21218                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
21218     14 4E 05 F1 | 	add	fp, #20
2121c     A7 2A 02 FB | 	rdlong	local03, fp
21220     14 4E 85 F1 | 	sub	fp, #20
21224     1C 2A 0E F2 | 	cmp	local03, #28 wz
21228     18 00 90 5D |  if_ne	jmp	#LR__2610
2122c     0C 4E 05 F1 | 	add	fp, #12
21230     A7 2A 02 FB | 	rdlong	local03, fp
21234     A7 2A 62 FC | 	wrlong	local03, fp
21238     08 4E 05 F1 | 	add	fp, #8
2123c     A7 3A 68 FC | 	wrlong	#29, fp
21240     14 4E 85 F1 | 	sub	fp, #20
21244                 | LR__2610
21244                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
21244     08 4E 05 F1 | 	add	fp, #8
21248     A7 2A 02 FB | 	rdlong	local03, fp
2124c     08 4E 85 F1 | 	sub	fp, #8
21250     1F 2A 0E F2 | 	cmp	local03, #31 wz
21254     14 4E 05 51 |  if_ne	add	fp, #20
21258     A7 28 02 5B |  if_ne	rdlong	local02, fp
2125c     14 4E 85 51 |  if_ne	sub	fp, #20
21260     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21264     08 4E 05 51 |  if_ne	add	fp, #8
21268     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2126c     08 4E 85 51 |  if_ne	sub	fp, #8
21270     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21274     14 4E 05 51 |  if_ne	add	fp, #20
21278     14 4E 85 51 |  if_ne	sub	fp, #20
2127c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21280     A7 0C 68 AC |  if_e	wrlong	#6, fp
21284     08 4E 05 A1 |  if_e	add	fp, #8
21288     A7 FE 69 AC |  if_e	wrlong	#255, fp
2128c     08 4E 85 A1 |  if_e	sub	fp, #8
21290     18 00 90 AD |  if_e	jmp	#LR__2611
21294     A7 2A 02 FB | 	rdlong	local03, fp
21298     0C 4E 05 F1 | 	add	fp, #12
2129c     A7 26 02 FB | 	rdlong	local01, fp
212a0     0C 4E 85 F1 | 	sub	fp, #12
212a4     13 2B 62 F0 | 	shl	local03, local01
212a8     A7 2A 62 FC | 	wrlong	local03, fp
212ac                 | LR__2611
212ac     A7 12 02 F6 | 	mov	arg01, fp
212b0     EC C4 BE FD | 	call	#_push
212b4     A7 F0 03 F6 | 	mov	ptra, fp
212b8     B2 00 A0 FD | 	call	#popregs_
212bc                 | _do_shl_ret
212bc     2D 00 64 FD | 	ret
212c0                 | 
212c0                 | ' 
212c0                 | ' '--------------------------------- SHR
212c0                 | ' 
212c0                 | ' sub do_shr 
212c0                 | _do_shr
212c0     03 4A 05 F6 | 	mov	COUNT_, #3
212c4     A8 00 A0 FD | 	call	#pushregs_
212c8     18 F0 07 F1 | 	add	ptra, #24
212cc     38 C4 BE FD | 	call	#_pop
212d0     FD 12 02 F6 | 	mov	arg01, result1
212d4     FE 26 02 F6 | 	mov	local01, result2
212d8     FF 28 02 F6 | 	mov	local02, result3
212dc     0C 4E 05 F1 | 	add	fp, #12
212e0     A7 12 62 FC | 	wrlong	arg01, fp
212e4     04 4E 05 F1 | 	add	fp, #4
212e8     A7 26 62 FC | 	wrlong	local01, fp
212ec     04 4E 05 F1 | 	add	fp, #4
212f0     A7 28 62 FC | 	wrlong	local02, fp
212f4     14 4E 85 F1 | 	sub	fp, #20
212f8     0C C4 BE FD | 	call	#_pop
212fc     FF 2A 02 F6 | 	mov	local03, result3
21300     A7 FA 61 FC | 	wrlong	result1, fp
21304     04 4E 05 F1 | 	add	fp, #4
21308     A7 FC 61 FC | 	wrlong	result2, fp
2130c     04 4E 05 F1 | 	add	fp, #4
21310     A7 2A 62 FC | 	wrlong	local03, fp
21314                 | ' 
21314                 | ' t2=pop()
21314                 | ' t1=pop()
21314                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
21314     08 4E 85 F1 | 	sub	fp, #8
21318     1C 2A 0E F2 | 	cmp	local03, #28 wz
2131c     A7 2A 02 AB |  if_e	rdlong	local03, fp
21320     A7 2A 62 AC |  if_e	wrlong	local03, fp
21324     08 4E 05 A1 |  if_e	add	fp, #8
21328     A7 3A 68 AC |  if_e	wrlong	#29, fp
2132c     08 4E 85 A1 |  if_e	sub	fp, #8
21330                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
21330     14 4E 05 F1 | 	add	fp, #20
21334     A7 2A 02 FB | 	rdlong	local03, fp
21338     14 4E 85 F1 | 	sub	fp, #20
2133c     1C 2A 0E F2 | 	cmp	local03, #28 wz
21340     18 00 90 5D |  if_ne	jmp	#LR__2620
21344     0C 4E 05 F1 | 	add	fp, #12
21348     A7 2A 02 FB | 	rdlong	local03, fp
2134c     A7 2A 62 FC | 	wrlong	local03, fp
21350     08 4E 05 F1 | 	add	fp, #8
21354     A7 3A 68 FC | 	wrlong	#29, fp
21358     14 4E 85 F1 | 	sub	fp, #20
2135c                 | LR__2620
2135c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
2135c     08 4E 05 F1 | 	add	fp, #8
21360     A7 2A 02 FB | 	rdlong	local03, fp
21364     08 4E 85 F1 | 	sub	fp, #8
21368     1F 2A 0E F2 | 	cmp	local03, #31 wz
2136c     14 4E 05 51 |  if_ne	add	fp, #20
21370     A7 28 02 5B |  if_ne	rdlong	local02, fp
21374     14 4E 85 51 |  if_ne	sub	fp, #20
21378     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
2137c     08 4E 05 51 |  if_ne	add	fp, #8
21380     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21384     08 4E 85 51 |  if_ne	sub	fp, #8
21388     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
2138c     14 4E 05 51 |  if_ne	add	fp, #20
21390     14 4E 85 51 |  if_ne	sub	fp, #20
21394     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21398     A7 0C 68 AC |  if_e	wrlong	#6, fp
2139c     08 4E 05 A1 |  if_e	add	fp, #8
213a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
213a4     08 4E 85 A1 |  if_e	sub	fp, #8
213a8     18 00 90 AD |  if_e	jmp	#LR__2621
213ac     A7 2A 02 FB | 	rdlong	local03, fp
213b0     0C 4E 05 F1 | 	add	fp, #12
213b4     A7 26 02 FB | 	rdlong	local01, fp
213b8     0C 4E 85 F1 | 	sub	fp, #12
213bc     13 2B 42 F0 | 	shr	local03, local01
213c0     A7 2A 62 FC | 	wrlong	local03, fp
213c4                 | LR__2621
213c4     A7 12 02 F6 | 	mov	arg01, fp
213c8     D4 C3 BE FD | 	call	#_push
213cc     A7 F0 03 F6 | 	mov	ptra, fp
213d0     B2 00 A0 FD | 	call	#popregs_
213d4                 | _do_shr_ret
213d4     2D 00 64 FD | 	ret
213d8                 | 
213d8                 | ' 
213d8                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
213d8                 | ' 
213d8                 | ' ''----------------------------------------------------------------------------------------------------
213d8                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
213d8                 | ' ''----------------------------------------------------------------------------------------------------
213d8                 | ' 
213d8                 | ' ''--------------------------- Command function pointers
213d8                 | ' 
213d8                 | ' sub init_commands
213d8                 | _init_commands
213d8                 | ' 
213d8                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
213d8     00 00 06 F6 | 	mov	_var01, #0
213dc     97 16 48 FB | 	callpa	#(@LR__2631-@LR__2630)>>2,fcache_load_ptr_
213e0                 | LR__2630
213e0     00 FB 01 F6 | 	mov	result1, _var01
213e4     02 FA 65 F0 | 	shl	result1, #2
213e8     43 00 00 FF 
213ec     60 E4 05 F1 | 	add	objptr, ##34400
213f0     F2 FA 01 F1 | 	add	result1, objptr
213f4     43 00 00 FF 
213f8     60 E4 85 F1 | 	sub	objptr, ##34400
213fc     FD E4 61 FC | 	wrlong	objptr, result1
21400     01 00 06 F1 | 	add	_var01, #1
21404     00 01 56 F2 | 	cmps	_var01, #256 wc
21408     D4 FF 9F CD |  if_b	jmp	#LR__2630
2140c                 | LR__2631
2140c     F2 FA 01 F6 | 	mov	result1, objptr
21410     14 FA 25 F4 | 	bith	result1, #20
21414     43 00 00 FF 
21418     64 E4 05 F1 | 	add	objptr, ##34404
2141c     F2 FA 61 FC | 	wrlong	result1, objptr
21420     43 00 00 FF 
21424     64 E4 85 F1 | 	sub	objptr, ##34404
21428     F2 FA 01 F6 | 	mov	result1, objptr
2142c     15 FA 25 F4 | 	bith	result1, #21
21430     43 00 00 FF 
21434     68 E4 05 F1 | 	add	objptr, ##34408
21438     F2 FA 61 FC | 	wrlong	result1, objptr
2143c     43 00 00 FF 
21440     68 E4 85 F1 | 	sub	objptr, ##34408
21444     F2 FA 01 F6 | 	mov	result1, objptr
21448     34 FA 25 F4 | 	bith	result1, #52
2144c     43 00 00 FF 
21450     6C E4 05 F1 | 	add	objptr, ##34412
21454     F2 FA 61 FC | 	wrlong	result1, objptr
21458     43 00 00 FF 
2145c     6C E4 85 F1 | 	sub	objptr, ##34412
21460     F2 FA 01 F6 | 	mov	result1, objptr
21464     16 FA 25 F4 | 	bith	result1, #22
21468     43 00 00 FF 
2146c     74 E4 05 F1 | 	add	objptr, ##34420
21470     F2 FA 61 FC | 	wrlong	result1, objptr
21474     43 00 00 FF 
21478     74 E4 85 F1 | 	sub	objptr, ##34420
2147c     F2 FA 01 F6 | 	mov	result1, objptr
21480     00 28 00 FF 
21484     00 FA 45 F5 | 	or	result1, ##5242880
21488     43 00 00 FF 
2148c     78 E4 05 F1 | 	add	objptr, ##34424
21490     F2 FA 61 FC | 	wrlong	result1, objptr
21494     43 00 00 FF 
21498     78 E4 85 F1 | 	sub	objptr, ##34424
2149c     F2 FA 01 F6 | 	mov	result1, objptr
214a0     35 FA 25 F4 | 	bith	result1, #53
214a4     43 00 00 FF 
214a8     7C E4 05 F1 | 	add	objptr, ##34428
214ac     F2 FA 61 FC | 	wrlong	result1, objptr
214b0     43 00 00 FF 
214b4     7C E4 85 F1 | 	sub	objptr, ##34428
214b8     F2 FA 01 F6 | 	mov	result1, objptr
214bc     54 FA 25 F4 | 	bith	result1, #84
214c0     43 00 00 FF 
214c4     80 E4 05 F1 | 	add	objptr, ##34432
214c8     F2 FA 61 FC | 	wrlong	result1, objptr
214cc     43 00 00 FF 
214d0     80 E4 85 F1 | 	sub	objptr, ##34432
214d4     F2 FA 01 F6 | 	mov	result1, objptr
214d8     17 FA 25 F4 | 	bith	result1, #23
214dc     43 00 00 FF 
214e0     84 E4 05 F1 | 	add	objptr, ##34436
214e4     F2 FA 61 FC | 	wrlong	result1, objptr
214e8     43 00 00 FF 
214ec     84 E4 85 F1 | 	sub	objptr, ##34436
214f0     F2 FA 01 F6 | 	mov	result1, objptr
214f4     00 48 00 FF 
214f8     00 FA 45 F5 | 	or	result1, ##9437184
214fc     43 00 00 FF 
21500     88 E4 05 F1 | 	add	objptr, ##34440
21504     F2 FA 61 FC | 	wrlong	result1, objptr
21508     43 00 00 FF 
2150c     88 E4 85 F1 | 	sub	objptr, ##34440
21510     F2 FA 01 F6 | 	mov	result1, objptr
21514     00 50 00 FF 
21518     00 FA 45 F5 | 	or	result1, ##10485760
2151c     43 00 00 FF 
21520     8C E4 05 F1 | 	add	objptr, ##34444
21524     F2 FA 61 FC | 	wrlong	result1, objptr
21528     43 00 00 FF 
2152c     8C E4 85 F1 | 	sub	objptr, ##34444
21530     F2 FA 01 F6 | 	mov	result1, objptr
21534     00 58 00 FF 
21538     00 FA 45 F5 | 	or	result1, ##11534336
2153c     43 00 00 FF 
21540     90 E4 05 F1 | 	add	objptr, ##34448
21544     F2 FA 61 FC | 	wrlong	result1, objptr
21548     43 00 00 FF 
2154c     90 E4 85 F1 | 	sub	objptr, ##34448
21550     F2 FA 01 F6 | 	mov	result1, objptr
21554     36 FA 25 F4 | 	bith	result1, #54
21558     43 00 00 FF 
2155c     A4 E4 05 F1 | 	add	objptr, ##34468
21560     F2 FA 61 FC | 	wrlong	result1, objptr
21564     43 00 00 FF 
21568     A4 E4 85 F1 | 	sub	objptr, ##34468
2156c     F2 FA 01 F6 | 	mov	result1, objptr
21570     00 68 00 FF 
21574     00 FA 45 F5 | 	or	result1, ##13631488
21578     43 00 00 FF 
2157c     D4 E4 05 F1 | 	add	objptr, ##34516
21580     F2 FA 61 FC | 	wrlong	result1, objptr
21584     43 00 00 FF 
21588     D4 E4 85 F1 | 	sub	objptr, ##34516
2158c     F2 FA 01 F6 | 	mov	result1, objptr
21590     00 68 00 FF 
21594     00 FA 45 F5 | 	or	result1, ##13631488
21598     43 00 00 FF 
2159c     D0 E4 05 F1 | 	add	objptr, ##34512
215a0     F2 FA 61 FC | 	wrlong	result1, objptr
215a4     43 00 00 FF 
215a8     D0 E4 85 F1 | 	sub	objptr, ##34512
215ac     F2 FA 01 F6 | 	mov	result1, objptr
215b0     00 68 00 FF 
215b4     00 FA 45 F5 | 	or	result1, ##13631488
215b8     43 00 00 FF 
215bc     D8 E4 05 F1 | 	add	objptr, ##34520
215c0     F2 FA 61 FC | 	wrlong	result1, objptr
215c4     43 00 00 FF 
215c8     D8 E4 85 F1 | 	sub	objptr, ##34520
215cc     F2 FA 01 F6 | 	mov	result1, objptr
215d0     00 68 00 FF 
215d4     00 FA 45 F5 | 	or	result1, ##13631488
215d8     43 00 00 FF 
215dc     DC E4 05 F1 | 	add	objptr, ##34524
215e0     F2 FA 61 FC | 	wrlong	result1, objptr
215e4     43 00 00 FF 
215e8     DC E4 85 F1 | 	sub	objptr, ##34524
215ec     F2 FA 01 F6 | 	mov	result1, objptr
215f0     00 68 00 FF 
215f4     00 FA 45 F5 | 	or	result1, ##13631488
215f8     43 00 00 FF 
215fc     0C E5 05 F1 | 	add	objptr, ##34572
21600     F2 FA 61 FC | 	wrlong	result1, objptr
21604     43 00 00 FF 
21608     0C E5 85 F1 | 	sub	objptr, ##34572
2160c     F2 FA 01 F6 | 	mov	result1, objptr
21610     55 FA 25 F4 | 	bith	result1, #85
21614     43 00 00 FF 
21618     BC E4 05 F1 | 	add	objptr, ##34492
2161c     F2 FA 61 FC | 	wrlong	result1, objptr
21620     43 00 00 FF 
21624     BC E4 85 F1 | 	sub	objptr, ##34492
21628     F2 FA 01 F6 | 	mov	result1, objptr
2162c     00 68 00 FF 
21630     00 FA 45 F5 | 	or	result1, ##13631488
21634     43 00 00 FF 
21638     10 E5 05 F1 | 	add	objptr, ##34576
2163c     F2 FA 61 FC | 	wrlong	result1, objptr
21640     43 00 00 FF 
21644     10 E5 85 F1 | 	sub	objptr, ##34576
21648     F2 FA 01 F6 | 	mov	result1, objptr
2164c     00 68 00 FF 
21650     00 FA 45 F5 | 	or	result1, ##13631488
21654     43 00 00 FF 
21658     E0 E4 05 F1 | 	add	objptr, ##34528
2165c     F2 FA 61 FC | 	wrlong	result1, objptr
21660     43 00 00 FF 
21664     E0 E4 85 F1 | 	sub	objptr, ##34528
21668     F2 FA 01 F6 | 	mov	result1, objptr
2166c     00 68 00 FF 
21670     00 FA 45 F5 | 	or	result1, ##13631488
21674     43 00 00 FF 
21678     E4 E4 05 F1 | 	add	objptr, ##34532
2167c     F2 FA 61 FC | 	wrlong	result1, objptr
21680     43 00 00 FF 
21684     E4 E4 85 F1 | 	sub	objptr, ##34532
21688     F2 FA 01 F6 | 	mov	result1, objptr
2168c     00 68 00 FF 
21690     00 FA 45 F5 | 	or	result1, ##13631488
21694     43 00 00 FF 
21698     E8 E4 05 F1 | 	add	objptr, ##34536
2169c     F2 FA 61 FC | 	wrlong	result1, objptr
216a0     43 00 00 FF 
216a4     E8 E4 85 F1 | 	sub	objptr, ##34536
216a8     F2 FA 01 F6 | 	mov	result1, objptr
216ac     74 FA 25 F4 | 	bith	result1, #116
216b0     43 00 00 FF 
216b4     60 E5 05 F1 | 	add	objptr, ##34656
216b8     F2 FA 61 FC | 	wrlong	result1, objptr
216bc     43 00 00 FF 
216c0     60 E5 85 F1 | 	sub	objptr, ##34656
216c4     F2 FA 01 F6 | 	mov	result1, objptr
216c8     18 FA 25 F4 | 	bith	result1, #24
216cc     43 00 00 FF 
216d0     64 E5 05 F1 | 	add	objptr, ##34660
216d4     F2 FA 61 FC | 	wrlong	result1, objptr
216d8     43 00 00 FF 
216dc     64 E5 85 F1 | 	sub	objptr, ##34660
216e0     F2 FA 01 F6 | 	mov	result1, objptr
216e4     00 88 00 FF 
216e8     00 FA 45 F5 | 	or	result1, ##17825792
216ec     43 00 00 FF 
216f0     68 E5 05 F1 | 	add	objptr, ##34664
216f4     F2 FA 61 FC | 	wrlong	result1, objptr
216f8     43 00 00 FF 
216fc     68 E5 85 F1 | 	sub	objptr, ##34664
21700     F2 FA 01 F6 | 	mov	result1, objptr
21704     00 90 00 FF 
21708     00 FA 45 F5 | 	or	result1, ##18874368
2170c     43 00 00 FF 
21710     6C E5 05 F1 | 	add	objptr, ##34668
21714     F2 FA 61 FC | 	wrlong	result1, objptr
21718     43 00 00 FF 
2171c     6C E5 85 F1 | 	sub	objptr, ##34668
21720     F2 FA 01 F6 | 	mov	result1, objptr
21724     00 98 00 FF 
21728     00 FA 45 F5 | 	or	result1, ##19922944
2172c     43 00 00 FF 
21730     70 E5 05 F1 | 	add	objptr, ##34672
21734     F2 FA 61 FC | 	wrlong	result1, objptr
21738     43 00 00 FF 
2173c     70 E5 85 F1 | 	sub	objptr, ##34672
21740     F2 FA 01 F6 | 	mov	result1, objptr
21744     00 A0 00 FF 
21748     00 FA 45 F5 | 	or	result1, ##20971520
2174c     43 00 00 FF 
21750     74 E5 05 F1 | 	add	objptr, ##34676
21754     F2 FA 61 FC | 	wrlong	result1, objptr
21758     43 00 00 FF 
2175c     74 E5 85 F1 | 	sub	objptr, ##34676
21760     F2 FA 01 F6 | 	mov	result1, objptr
21764     00 A8 00 FF 
21768     00 FA 45 F5 | 	or	result1, ##22020096
2176c     43 00 00 FF 
21770     78 E5 05 F1 | 	add	objptr, ##34680
21774     F2 FA 61 FC | 	wrlong	result1, objptr
21778     43 00 00 FF 
2177c     78 E5 85 F1 | 	sub	objptr, ##34680
21780     F2 FA 01 F6 | 	mov	result1, objptr
21784     00 B0 00 FF 
21788     00 FA 45 F5 | 	or	result1, ##23068672
2178c     43 00 00 FF 
21790     7C E5 05 F1 | 	add	objptr, ##34684
21794     F2 FA 61 FC | 	wrlong	result1, objptr
21798     43 00 00 FF 
2179c     7C E5 85 F1 | 	sub	objptr, ##34684
217a0     F2 FA 01 F6 | 	mov	result1, objptr
217a4     00 B8 00 FF 
217a8     00 FA 45 F5 | 	or	result1, ##24117248
217ac     43 00 00 FF 
217b0     80 E5 05 F1 | 	add	objptr, ##34688
217b4     F2 FA 61 FC | 	wrlong	result1, objptr
217b8     43 00 00 FF 
217bc     80 E5 85 F1 | 	sub	objptr, ##34688
217c0     F2 FA 01 F6 | 	mov	result1, objptr
217c4     37 FA 25 F4 | 	bith	result1, #55
217c8     43 00 00 FF 
217cc     84 E5 05 F1 | 	add	objptr, ##34692
217d0     F2 FA 61 FC | 	wrlong	result1, objptr
217d4     43 00 00 FF 
217d8     84 E5 85 F1 | 	sub	objptr, ##34692
217dc     F2 FA 01 F6 | 	mov	result1, objptr
217e0     00 C8 00 FF 
217e4     00 FA 45 F5 | 	or	result1, ##26214400
217e8     43 00 00 FF 
217ec     88 E5 05 F1 | 	add	objptr, ##34696
217f0     F2 FA 61 FC | 	wrlong	result1, objptr
217f4     43 00 00 FF 
217f8     88 E5 85 F1 | 	sub	objptr, ##34696
217fc     F2 FA 01 F6 | 	mov	result1, objptr
21800     00 D0 00 FF 
21804     00 FA 45 F5 | 	or	result1, ##27262976
21808     43 00 00 FF 
2180c     8C E5 05 F1 | 	add	objptr, ##34700
21810     F2 FA 61 FC | 	wrlong	result1, objptr
21814     43 00 00 FF 
21818     8C E5 85 F1 | 	sub	objptr, ##34700
2181c     F2 FA 01 F6 | 	mov	result1, objptr
21820     00 D8 00 FF 
21824     00 FA 45 F5 | 	or	result1, ##28311552
21828     43 00 00 FF 
2182c     90 E5 05 F1 | 	add	objptr, ##34704
21830     F2 FA 61 FC | 	wrlong	result1, objptr
21834     43 00 00 FF 
21838     90 E5 85 F1 | 	sub	objptr, ##34704
2183c     F2 FA 01 F6 | 	mov	result1, objptr
21840     56 FA 25 F4 | 	bith	result1, #86
21844     43 00 00 FF 
21848     94 E5 05 F1 | 	add	objptr, ##34708
2184c     F2 FA 61 FC | 	wrlong	result1, objptr
21850     43 00 00 FF 
21854     94 E5 85 F1 | 	sub	objptr, ##34708
21858     F2 FA 01 F6 | 	mov	result1, objptr
2185c     00 E8 00 FF 
21860     00 FA 45 F5 | 	or	result1, ##30408704
21864     45 00 00 FF 
21868     5C E4 05 F1 | 	add	objptr, ##35420
2186c     F2 FA 61 FC | 	wrlong	result1, objptr
21870     45 00 00 FF 
21874     5C E4 85 F1 | 	sub	objptr, ##35420
21878     F2 FA 01 F6 | 	mov	result1, objptr
2187c     75 FA 25 F4 | 	bith	result1, #117
21880     43 00 00 FF 
21884     98 E5 05 F1 | 	add	objptr, ##34712
21888     F2 FA 61 FC | 	wrlong	result1, objptr
2188c     43 00 00 FF 
21890     98 E5 85 F1 | 	sub	objptr, ##34712
21894     F2 FA 01 F6 | 	mov	result1, objptr
21898     94 FA 25 F4 | 	bith	result1, #148
2189c     43 00 00 FF 
218a0     AC E5 05 F1 | 	add	objptr, ##34732
218a4     F2 FA 61 FC | 	wrlong	result1, objptr
218a8     43 00 00 FF 
218ac     AC E5 85 F1 | 	sub	objptr, ##34732
218b0     F2 FA 01 F6 | 	mov	result1, objptr
218b4     19 FA 25 F4 | 	bith	result1, #25
218b8     43 00 00 FF 
218bc     9C E5 05 F1 | 	add	objptr, ##34716
218c0     F2 FA 61 FC | 	wrlong	result1, objptr
218c4     43 00 00 FF 
218c8     9C E5 85 F1 | 	sub	objptr, ##34716
218cc     F2 FA 01 F6 | 	mov	result1, objptr
218d0     00 08 01 FF 
218d4     00 FA 45 F5 | 	or	result1, ##34603008
218d8     43 00 00 FF 
218dc     B8 E4 05 F1 | 	add	objptr, ##34488
218e0     F2 FA 61 FC | 	wrlong	result1, objptr
218e4     43 00 00 FF 
218e8     B8 E4 85 F1 | 	sub	objptr, ##34488
218ec     F2 FA 01 F6 | 	mov	result1, objptr
218f0     00 10 01 FF 
218f4     00 FA 45 F5 | 	or	result1, ##35651584
218f8     43 00 00 FF 
218fc     A4 E5 05 F1 | 	add	objptr, ##34724
21900     F2 FA 61 FC | 	wrlong	result1, objptr
21904     43 00 00 FF 
21908     A4 E5 85 F1 | 	sub	objptr, ##34724
2190c     F2 FA 01 F6 | 	mov	result1, objptr
21910     00 18 01 FF 
21914     00 FA 45 F5 | 	or	result1, ##36700160
21918     43 00 00 FF 
2191c     A8 E5 05 F1 | 	add	objptr, ##34728
21920     F2 FA 61 FC | 	wrlong	result1, objptr
21924     43 00 00 FF 
21928     A8 E5 85 F1 | 	sub	objptr, ##34728
2192c     F2 FA 01 F6 | 	mov	result1, objptr
21930     00 20 01 FF 
21934     00 FA 45 F5 | 	or	result1, ##37748736
21938     43 00 00 FF 
2193c     B4 E5 05 F1 | 	add	objptr, ##34740
21940     F2 FA 61 FC | 	wrlong	result1, objptr
21944     43 00 00 FF 
21948     B4 E5 85 F1 | 	sub	objptr, ##34740
2194c     F2 FA 01 F6 | 	mov	result1, objptr
21950     00 28 01 FF 
21954     00 FA 45 F5 | 	or	result1, ##38797312
21958     43 00 00 FF 
2195c     B8 E5 05 F1 | 	add	objptr, ##34744
21960     F2 FA 61 FC | 	wrlong	result1, objptr
21964     43 00 00 FF 
21968     B8 E5 85 F1 | 	sub	objptr, ##34744
2196c     F2 FA 01 F6 | 	mov	result1, objptr
21970     00 30 01 FF 
21974     00 FA 45 F5 | 	or	result1, ##39845888
21978     43 00 00 FF 
2197c     BC E5 05 F1 | 	add	objptr, ##34748
21980     F2 FA 61 FC | 	wrlong	result1, objptr
21984     43 00 00 FF 
21988     BC E5 85 F1 | 	sub	objptr, ##34748
2198c     F2 FA 01 F6 | 	mov	result1, objptr
21990     00 38 01 FF 
21994     00 FA 45 F5 | 	or	result1, ##40894464
21998     43 00 00 FF 
2199c     C0 E5 05 F1 | 	add	objptr, ##34752
219a0     F2 FA 61 FC | 	wrlong	result1, objptr
219a4     43 00 00 FF 
219a8     C0 E5 85 F1 | 	sub	objptr, ##34752
219ac     F2 FA 01 F6 | 	mov	result1, objptr
219b0     00 40 01 FF 
219b4     00 FA 45 F5 | 	or	result1, ##41943040
219b8     43 00 00 FF 
219bc     C8 E5 05 F1 | 	add	objptr, ##34760
219c0     F2 FA 61 FC | 	wrlong	result1, objptr
219c4     43 00 00 FF 
219c8     C8 E5 85 F1 | 	sub	objptr, ##34760
219cc     F2 FA 01 F6 | 	mov	result1, objptr
219d0     00 08 01 FF 
219d4     00 FA 45 F5 | 	or	result1, ##34603008
219d8     43 00 00 FF 
219dc     CC E5 05 F1 | 	add	objptr, ##34764
219e0     F2 FA 61 FC | 	wrlong	result1, objptr
219e4     43 00 00 FF 
219e8     CC E5 85 F1 | 	sub	objptr, ##34764
219ec     F2 FA 01 F6 | 	mov	result1, objptr
219f0     00 48 01 FF 
219f4     00 FA 45 F5 | 	or	result1, ##42991616
219f8     43 00 00 FF 
219fc     CC E4 05 F1 | 	add	objptr, ##34508
21a00     F2 FA 61 FC | 	wrlong	result1, objptr
21a04     43 00 00 FF 
21a08     CC E4 85 F1 | 	sub	objptr, ##34508
21a0c     F2 FA 01 F6 | 	mov	result1, objptr
21a10     00 50 01 FF 
21a14     00 FA 45 F5 | 	or	result1, ##44040192
21a18     43 00 00 FF 
21a1c     FC E4 05 F1 | 	add	objptr, ##34556
21a20     F2 FA 61 FC | 	wrlong	result1, objptr
21a24     43 00 00 FF 
21a28     FC E4 85 F1 | 	sub	objptr, ##34556
21a2c     F2 FA 01 F6 | 	mov	result1, objptr
21a30     00 58 01 FF 
21a34     00 FA 45 F5 | 	or	result1, ##45088768
21a38     43 00 00 FF 
21a3c     F8 E4 05 F1 | 	add	objptr, ##34552
21a40     F2 FA 61 FC | 	wrlong	result1, objptr
21a44     43 00 00 FF 
21a48     F8 E4 85 F1 | 	sub	objptr, ##34552
21a4c     F2 FA 01 F6 | 	mov	result1, objptr
21a50     00 60 01 FF 
21a54     00 FA 45 F5 | 	or	result1, ##46137344
21a58     43 00 00 FF 
21a5c     9C E4 05 F1 | 	add	objptr, ##34460
21a60     F2 FA 61 FC | 	wrlong	result1, objptr
21a64     43 00 00 FF 
21a68     9C E4 85 F1 | 	sub	objptr, ##34460
21a6c     F2 FA 01 F6 | 	mov	result1, objptr
21a70     00 68 01 FF 
21a74     00 FA 45 F5 | 	or	result1, ##47185920
21a78     43 00 00 FF 
21a7c     A0 E4 05 F1 | 	add	objptr, ##34464
21a80     F2 FA 61 FC | 	wrlong	result1, objptr
21a84     43 00 00 FF 
21a88     A0 E4 85 F1 | 	sub	objptr, ##34464
21a8c     F2 FA 01 F6 | 	mov	result1, objptr
21a90     00 70 01 FF 
21a94     00 FA 45 F5 | 	or	result1, ##48234496
21a98     43 00 00 FF 
21a9c     08 E5 05 F1 | 	add	objptr, ##34568
21aa0     F2 FA 61 FC | 	wrlong	result1, objptr
21aa4     43 00 00 FF 
21aa8     08 E5 85 F1 | 	sub	objptr, ##34568
21aac     F2 FA 01 F6 | 	mov	result1, objptr
21ab0     00 78 01 FF 
21ab4     00 FA 45 F5 | 	or	result1, ##49283072
21ab8     43 00 00 FF 
21abc     B0 E5 05 F1 | 	add	objptr, ##34736
21ac0     F2 FA 61 FC | 	wrlong	result1, objptr
21ac4     43 00 00 FF 
21ac8     B0 E5 85 F1 | 	sub	objptr, ##34736
21acc     F2 FA 01 F6 | 	mov	result1, objptr
21ad0     38 FA 25 F4 | 	bith	result1, #56
21ad4     43 00 00 FF 
21ad8     C4 E5 05 F1 | 	add	objptr, ##34756
21adc     F2 FA 61 FC | 	wrlong	result1, objptr
21ae0     43 00 00 FF 
21ae4     C4 E5 85 F1 | 	sub	objptr, ##34756
21ae8     F2 FA 01 F6 | 	mov	result1, objptr
21aec     00 88 01 FF 
21af0     00 FA 45 F5 | 	or	result1, ##51380224
21af4     43 00 00 FF 
21af8     D0 E5 05 F1 | 	add	objptr, ##34768
21afc     F2 FA 61 FC | 	wrlong	result1, objptr
21b00     43 00 00 FF 
21b04     D0 E5 85 F1 | 	sub	objptr, ##34768
21b08     F2 FA 01 F6 | 	mov	result1, objptr
21b0c     00 90 01 FF 
21b10     00 FA 45 F5 | 	or	result1, ##52428800
21b14     43 00 00 FF 
21b18     D4 E5 05 F1 | 	add	objptr, ##34772
21b1c     F2 FA 61 FC | 	wrlong	result1, objptr
21b20     43 00 00 FF 
21b24     D4 E5 85 F1 | 	sub	objptr, ##34772
21b28     F2 FA 01 F6 | 	mov	result1, objptr
21b2c     00 98 01 FF 
21b30     00 FA 45 F5 | 	or	result1, ##53477376
21b34     43 00 00 FF 
21b38     D8 E5 05 F1 | 	add	objptr, ##34776
21b3c     F2 FA 61 FC | 	wrlong	result1, objptr
21b40     43 00 00 FF 
21b44     D8 E5 85 F1 | 	sub	objptr, ##34776
21b48     F2 FA 01 F6 | 	mov	result1, objptr
21b4c     00 A0 01 FF 
21b50     00 FA 45 F5 | 	or	result1, ##54525952
21b54     43 00 00 FF 
21b58     DC E5 05 F1 | 	add	objptr, ##34780
21b5c     F2 FA 61 FC | 	wrlong	result1, objptr
21b60     43 00 00 FF 
21b64     DC E5 85 F1 | 	sub	objptr, ##34780
21b68     F2 FA 01 F6 | 	mov	result1, objptr
21b6c     00 A8 01 FF 
21b70     00 FA 45 F5 | 	or	result1, ##55574528
21b74     43 00 00 FF 
21b78     E0 E5 05 F1 | 	add	objptr, ##34784
21b7c     F2 FA 61 FC | 	wrlong	result1, objptr
21b80     43 00 00 FF 
21b84     E0 E5 85 F1 | 	sub	objptr, ##34784
21b88     F2 FA 01 F6 | 	mov	result1, objptr
21b8c     00 B0 01 FF 
21b90     00 FA 45 F5 | 	or	result1, ##56623104
21b94     43 00 00 FF 
21b98     E4 E5 05 F1 | 	add	objptr, ##34788
21b9c     F2 FA 61 FC | 	wrlong	result1, objptr
21ba0     43 00 00 FF 
21ba4     E4 E5 85 F1 | 	sub	objptr, ##34788
21ba8     F2 FA 01 F6 | 	mov	result1, objptr
21bac     94 FA 25 F4 | 	bith	result1, #148
21bb0     43 00 00 FF 
21bb4     AC E5 05 F1 | 	add	objptr, ##34732
21bb8     F2 FA 61 FC | 	wrlong	result1, objptr
21bbc     43 00 00 FF 
21bc0     AC E5 85 F1 | 	sub	objptr, ##34732
21bc4     F2 FA 01 F6 | 	mov	result1, objptr
21bc8     00 B8 01 FF 
21bcc     00 FA 45 F5 | 	or	result1, ##57671680
21bd0     43 00 00 FF 
21bd4     EC E5 05 F1 | 	add	objptr, ##34796
21bd8     F2 FA 61 FC | 	wrlong	result1, objptr
21bdc     43 00 00 FF 
21be0     EC E5 85 F1 | 	sub	objptr, ##34796
21be4     F2 FA 01 F6 | 	mov	result1, objptr
21be8     57 FA 25 F4 | 	bith	result1, #87
21bec     43 00 00 FF 
21bf0     E8 E5 05 F1 | 	add	objptr, ##34792
21bf4     F2 FA 61 FC | 	wrlong	result1, objptr
21bf8     43 00 00 FF 
21bfc     E8 E5 85 F1 | 	sub	objptr, ##34792
21c00     F2 FA 01 F6 | 	mov	result1, objptr
21c04     00 C8 01 FF 
21c08     00 FA 45 F5 | 	or	result1, ##59768832
21c0c     44 00 00 FF 
21c10     00 E4 05 F1 | 	add	objptr, ##34816
21c14     F2 FA 61 FC | 	wrlong	result1, objptr
21c18     44 00 00 FF 
21c1c     00 E4 85 F1 | 	sub	objptr, ##34816
21c20     F2 FA 01 F6 | 	mov	result1, objptr
21c24     00 D0 01 FF 
21c28     00 FA 45 F5 | 	or	result1, ##60817408
21c2c     44 00 00 FF 
21c30     04 E4 05 F1 | 	add	objptr, ##34820
21c34     F2 FA 61 FC | 	wrlong	result1, objptr
21c38     44 00 00 FF 
21c3c     04 E4 85 F1 | 	sub	objptr, ##34820
21c40     F2 FA 01 F6 | 	mov	result1, objptr
21c44     00 D8 01 FF 
21c48     00 FA 45 F5 | 	or	result1, ##61865984
21c4c     43 00 00 FF 
21c50     F0 E5 05 F1 | 	add	objptr, ##34800
21c54     F2 FA 61 FC | 	wrlong	result1, objptr
21c58     43 00 00 FF 
21c5c     F0 E5 85 F1 | 	sub	objptr, ##34800
21c60     F2 FA 01 F6 | 	mov	result1, objptr
21c64     76 FA 25 F4 | 	bith	result1, #118
21c68     43 00 00 FF 
21c6c     F4 E5 05 F1 | 	add	objptr, ##34804
21c70     F2 FA 61 FC | 	wrlong	result1, objptr
21c74     43 00 00 FF 
21c78     F4 E5 85 F1 | 	sub	objptr, ##34804
21c7c     F2 FA 01 F6 | 	mov	result1, objptr
21c80     00 E8 01 FF 
21c84     00 FA 45 F5 | 	or	result1, ##63963136
21c88     43 00 00 FF 
21c8c     F8 E5 05 F1 | 	add	objptr, ##34808
21c90     F2 FA 61 FC | 	wrlong	result1, objptr
21c94     43 00 00 FF 
21c98     F8 E5 85 F1 | 	sub	objptr, ##34808
21c9c     F2 FA 01 F6 | 	mov	result1, objptr
21ca0     95 FA 25 F4 | 	bith	result1, #149
21ca4     43 00 00 FF 
21ca8     FC E5 05 F1 | 	add	objptr, ##34812
21cac     F2 FA 61 FC | 	wrlong	result1, objptr
21cb0     43 00 00 FF 
21cb4     FC E5 85 F1 | 	sub	objptr, ##34812
21cb8     F2 FA 01 F6 | 	mov	result1, objptr
21cbc     B4 FA 25 F4 | 	bith	result1, #180
21cc0     44 00 00 FF 
21cc4     0C E4 05 F1 | 	add	objptr, ##34828
21cc8     F2 FA 61 FC | 	wrlong	result1, objptr
21ccc     44 00 00 FF 
21cd0     0C E4 85 F1 | 	sub	objptr, ##34828
21cd4     F2 FA 01 F6 | 	mov	result1, objptr
21cd8     1A FA 25 F4 | 	bith	result1, #26
21cdc     44 00 00 FF 
21ce0     08 E4 05 F1 | 	add	objptr, ##34824
21ce4     F2 FA 61 FC | 	wrlong	result1, objptr
21ce8     44 00 00 FF 
21cec     08 E4 85 F1 | 	sub	objptr, ##34824
21cf0     F2 FA 01 F6 | 	mov	result1, objptr
21cf4     00 08 02 FF 
21cf8     00 FA 45 F5 | 	or	result1, ##68157440
21cfc     44 00 00 FF 
21d00     18 E4 05 F1 | 	add	objptr, ##34840
21d04     F2 FA 61 FC | 	wrlong	result1, objptr
21d08     44 00 00 FF 
21d0c     18 E4 85 F1 | 	sub	objptr, ##34840
21d10     F2 FA 01 F6 | 	mov	result1, objptr
21d14     00 10 02 FF 
21d18     00 FA 45 F5 | 	or	result1, ##69206016
21d1c     44 00 00 FF 
21d20     14 E4 05 F1 | 	add	objptr, ##34836
21d24     F2 FA 61 FC | 	wrlong	result1, objptr
21d28     44 00 00 FF 
21d2c     14 E4 85 F1 | 	sub	objptr, ##34836
21d30     F2 FA 01 F6 | 	mov	result1, objptr
21d34     00 18 02 FF 
21d38     00 FA 45 F5 | 	or	result1, ##70254592
21d3c     44 00 00 FF 
21d40     10 E4 05 F1 | 	add	objptr, ##34832
21d44     F2 FA 61 FC | 	wrlong	result1, objptr
21d48     44 00 00 FF 
21d4c     10 E4 85 F1 | 	sub	objptr, ##34832
21d50     F2 FA 01 F6 | 	mov	result1, objptr
21d54     00 20 02 FF 
21d58     00 FA 45 F5 | 	or	result1, ##71303168
21d5c     44 00 00 FF 
21d60     1C E4 05 F1 | 	add	objptr, ##34844
21d64     F2 FA 61 FC | 	wrlong	result1, objptr
21d68     44 00 00 FF 
21d6c     1C E4 85 F1 | 	sub	objptr, ##34844
21d70     F2 FA 01 F6 | 	mov	result1, objptr
21d74     00 28 02 FF 
21d78     00 FA 45 F5 | 	or	result1, ##72351744
21d7c     44 00 00 FF 
21d80     20 E4 05 F1 | 	add	objptr, ##34848
21d84     F2 FA 61 FC | 	wrlong	result1, objptr
21d88     44 00 00 FF 
21d8c     20 E4 85 F1 | 	sub	objptr, ##34848
21d90     F2 FA 01 F6 | 	mov	result1, objptr
21d94     00 30 02 FF 
21d98     00 FA 45 F5 | 	or	result1, ##73400320
21d9c     43 00 00 FF 
21da0     B4 E4 05 F1 | 	add	objptr, ##34484
21da4     F2 FA 61 FC | 	wrlong	result1, objptr
21da8     43 00 00 FF 
21dac     B4 E4 85 F1 | 	sub	objptr, ##34484
21db0     F2 FA 01 F6 | 	mov	result1, objptr
21db4     00 38 02 FF 
21db8     00 FA 45 F5 | 	or	result1, ##74448896
21dbc     44 00 00 FF 
21dc0     38 E4 05 F1 | 	add	objptr, ##34872
21dc4     F2 FA 61 FC | 	wrlong	result1, objptr
21dc8     44 00 00 FF 
21dcc     38 E4 85 F1 | 	sub	objptr, ##34872
21dd0     F2 FA 01 F6 | 	mov	result1, objptr
21dd4     00 40 02 FF 
21dd8     00 FA 45 F5 | 	or	result1, ##75497472
21ddc     44 00 00 FF 
21de0     48 E4 05 F1 | 	add	objptr, ##34888
21de4     F2 FA 61 FC | 	wrlong	result1, objptr
21de8     44 00 00 FF 
21dec     48 E4 85 F1 | 	sub	objptr, ##34888
21df0     F2 FA 01 F6 | 	mov	result1, objptr
21df4     00 48 02 FF 
21df8     00 FA 45 F5 | 	or	result1, ##76546048
21dfc     44 00 00 FF 
21e00     4C E4 05 F1 | 	add	objptr, ##34892
21e04     F2 FA 61 FC | 	wrlong	result1, objptr
21e08     44 00 00 FF 
21e0c     4C E4 85 F1 | 	sub	objptr, ##34892
21e10     F2 FA 01 F6 | 	mov	result1, objptr
21e14     00 50 02 FF 
21e18     00 FA 45 F5 | 	or	result1, ##77594624
21e1c     44 00 00 FF 
21e20     44 E4 05 F1 | 	add	objptr, ##34884
21e24     F2 FA 61 FC | 	wrlong	result1, objptr
21e28     44 00 00 FF 
21e2c     44 E4 85 F1 | 	sub	objptr, ##34884
21e30     F2 FA 01 F6 | 	mov	result1, objptr
21e34     00 58 02 FF 
21e38     00 FA 45 F5 | 	or	result1, ##78643200
21e3c     44 00 00 FF 
21e40     3C E4 05 F1 | 	add	objptr, ##34876
21e44     F2 FA 61 FC | 	wrlong	result1, objptr
21e48     44 00 00 FF 
21e4c     3C E4 85 F1 | 	sub	objptr, ##34876
21e50     F2 FA 01 F6 | 	mov	result1, objptr
21e54     00 60 02 FF 
21e58     00 FA 45 F5 | 	or	result1, ##79691776
21e5c     44 00 00 FF 
21e60     40 E4 05 F1 | 	add	objptr, ##34880
21e64     F2 FA 61 FC | 	wrlong	result1, objptr
21e68     44 00 00 FF 
21e6c     40 E4 85 F1 | 	sub	objptr, ##34880
21e70     F2 FA 01 F6 | 	mov	result1, objptr
21e74     00 68 02 FF 
21e78     00 FA 45 F5 | 	or	result1, ##80740352
21e7c     44 00 00 FF 
21e80     50 E4 05 F1 | 	add	objptr, ##34896
21e84     F2 FA 61 FC | 	wrlong	result1, objptr
21e88     44 00 00 FF 
21e8c     50 E4 85 F1 | 	sub	objptr, ##34896
21e90     F2 FA 01 F6 | 	mov	result1, objptr
21e94     00 70 02 FF 
21e98     00 FA 45 F5 | 	or	result1, ##81788928
21e9c     44 00 00 FF 
21ea0     54 E4 05 F1 | 	add	objptr, ##34900
21ea4     F2 FA 61 FC | 	wrlong	result1, objptr
21ea8     44 00 00 FF 
21eac     54 E4 85 F1 | 	sub	objptr, ##34900
21eb0     F2 FA 01 F6 | 	mov	result1, objptr
21eb4     00 78 02 FF 
21eb8     00 FA 45 F5 | 	or	result1, ##82837504
21ebc     44 00 00 FF 
21ec0     58 E4 05 F1 | 	add	objptr, ##34904
21ec4     F2 FA 61 FC | 	wrlong	result1, objptr
21ec8     44 00 00 FF 
21ecc     58 E4 85 F1 | 	sub	objptr, ##34904
21ed0     F2 FA 01 F6 | 	mov	result1, objptr
21ed4     00 80 02 FF 
21ed8     00 FA 45 F5 | 	or	result1, ##83886080
21edc     44 00 00 FF 
21ee0     5C E4 05 F1 | 	add	objptr, ##34908
21ee4     F2 FA 61 FC | 	wrlong	result1, objptr
21ee8     44 00 00 FF 
21eec     5C E4 85 F1 | 	sub	objptr, ##34908
21ef0     F2 FA 01 F6 | 	mov	result1, objptr
21ef4     00 88 02 FF 
21ef8     00 FA 45 F5 | 	or	result1, ##84934656
21efc     44 00 00 FF 
21f00     60 E4 05 F1 | 	add	objptr, ##34912
21f04     F2 FA 61 FC | 	wrlong	result1, objptr
21f08     44 00 00 FF 
21f0c     60 E4 85 F1 | 	sub	objptr, ##34912
21f10     F2 FA 01 F6 | 	mov	result1, objptr
21f14     00 90 02 FF 
21f18     00 FA 45 F5 | 	or	result1, ##85983232
21f1c     44 00 00 FF 
21f20     64 E4 05 F1 | 	add	objptr, ##34916
21f24     F2 FA 61 FC | 	wrlong	result1, objptr
21f28     44 00 00 FF 
21f2c     64 E4 85 F1 | 	sub	objptr, ##34916
21f30     F2 FA 01 F6 | 	mov	result1, objptr
21f34     00 98 02 FF 
21f38     00 FA 45 F5 | 	or	result1, ##87031808
21f3c     44 00 00 FF 
21f40     68 E4 05 F1 | 	add	objptr, ##34920
21f44     F2 FA 61 FC | 	wrlong	result1, objptr
21f48     44 00 00 FF 
21f4c     68 E4 85 F1 | 	sub	objptr, ##34920
21f50     F2 FA 01 F6 | 	mov	result1, objptr
21f54     00 A0 02 FF 
21f58     00 FA 45 F5 | 	or	result1, ##88080384
21f5c     44 00 00 FF 
21f60     6C E4 05 F1 | 	add	objptr, ##34924
21f64     F2 FA 61 FC | 	wrlong	result1, objptr
21f68     44 00 00 FF 
21f6c     6C E4 85 F1 | 	sub	objptr, ##34924
21f70     F2 FA 01 F6 | 	mov	result1, objptr
21f74     00 A8 02 FF 
21f78     00 FA 45 F5 | 	or	result1, ##89128960
21f7c     44 00 00 FF 
21f80     78 E4 05 F1 | 	add	objptr, ##34936
21f84     F2 FA 61 FC | 	wrlong	result1, objptr
21f88     44 00 00 FF 
21f8c     78 E4 85 F1 | 	sub	objptr, ##34936
21f90     F2 FA 01 F6 | 	mov	result1, objptr
21f94     00 B0 02 FF 
21f98     00 FA 45 F5 | 	or	result1, ##90177536
21f9c     44 00 00 FF 
21fa0     70 E4 05 F1 | 	add	objptr, ##34928
21fa4     F2 FA 61 FC | 	wrlong	result1, objptr
21fa8     44 00 00 FF 
21fac     70 E4 85 F1 | 	sub	objptr, ##34928
21fb0     F2 FA 01 F6 | 	mov	result1, objptr
21fb4     00 B8 02 FF 
21fb8     00 FA 45 F5 | 	or	result1, ##91226112
21fbc     44 00 00 FF 
21fc0     74 E4 05 F1 | 	add	objptr, ##34932
21fc4     F2 FA 61 FC | 	wrlong	result1, objptr
21fc8     44 00 00 FF 
21fcc     74 E4 85 F1 | 	sub	objptr, ##34932
21fd0     F2 FA 01 F6 | 	mov	result1, objptr
21fd4     00 C0 02 FF 
21fd8     00 FA 45 F5 | 	or	result1, ##92274688
21fdc     44 00 00 FF 
21fe0     7C E4 05 F1 | 	add	objptr, ##34940
21fe4     F2 FA 61 FC | 	wrlong	result1, objptr
21fe8     44 00 00 FF 
21fec     7C E4 85 F1 | 	sub	objptr, ##34940
21ff0     F2 FA 01 F6 | 	mov	result1, objptr
21ff4     00 C8 02 FF 
21ff8     00 FA 45 F5 | 	or	result1, ##93323264
21ffc     44 00 00 FF 
22000     24 E4 05 F1 | 	add	objptr, ##34852
22004     F2 FA 61 FC | 	wrlong	result1, objptr
22008     44 00 00 FF 
2200c     24 E4 85 F1 | 	sub	objptr, ##34852
22010     F2 FA 01 F6 | 	mov	result1, objptr
22014     00 D0 02 FF 
22018     00 FA 45 F5 | 	or	result1, ##94371840
2201c     44 00 00 FF 
22020     2C E4 05 F1 | 	add	objptr, ##34860
22024     F2 FA 61 FC | 	wrlong	result1, objptr
22028     44 00 00 FF 
2202c     2C E4 85 F1 | 	sub	objptr, ##34860
22030     F2 FA 01 F6 | 	mov	result1, objptr
22034     00 D8 02 FF 
22038     00 FA 45 F5 | 	or	result1, ##95420416
2203c     44 00 00 FF 
22040     30 E4 05 F1 | 	add	objptr, ##34864
22044     F2 FA 61 FC | 	wrlong	result1, objptr
22048     44 00 00 FF 
2204c     30 E4 85 F1 | 	sub	objptr, ##34864
22050     F2 FA 01 F6 | 	mov	result1, objptr
22054     00 E0 02 FF 
22058     00 FA 45 F5 | 	or	result1, ##96468992
2205c     44 00 00 FF 
22060     80 E4 05 F1 | 	add	objptr, ##34944
22064     F2 FA 61 FC | 	wrlong	result1, objptr
22068     44 00 00 FF 
2206c     80 E4 85 F1 | 	sub	objptr, ##34944
22070     F2 FA 01 F6 | 	mov	result1, objptr
22074     00 E8 02 FF 
22078     00 FA 45 F5 | 	or	result1, ##97517568
2207c     44 00 00 FF 
22080     84 E4 05 F1 | 	add	objptr, ##34948
22084     F2 FA 61 FC | 	wrlong	result1, objptr
22088     44 00 00 FF 
2208c     84 E4 85 F1 | 	sub	objptr, ##34948
22090     F2 FA 01 F6 | 	mov	result1, objptr
22094     00 F0 02 FF 
22098     00 FA 45 F5 | 	or	result1, ##98566144
2209c     44 00 00 FF 
220a0     88 E4 05 F1 | 	add	objptr, ##34952
220a4     F2 FA 61 FC | 	wrlong	result1, objptr
220a8     44 00 00 FF 
220ac     88 E4 85 F1 | 	sub	objptr, ##34952
220b0     F2 FA 01 F6 | 	mov	result1, objptr
220b4     00 F8 02 FF 
220b8     00 FA 45 F5 | 	or	result1, ##99614720
220bc     44 00 00 FF 
220c0     34 E4 05 F1 | 	add	objptr, ##34868
220c4     F2 FA 61 FC | 	wrlong	result1, objptr
220c8     44 00 00 FF 
220cc     34 E4 85 F1 | 	sub	objptr, ##34868
220d0     F2 FA 01 F6 | 	mov	result1, objptr
220d4     39 FA 25 F4 | 	bith	result1, #57
220d8     44 00 00 FF 
220dc     98 E4 05 F1 | 	add	objptr, ##34968
220e0     F2 FA 61 FC | 	wrlong	result1, objptr
220e4     44 00 00 FF 
220e8     98 E4 85 F1 | 	sub	objptr, ##34968
220ec     F2 FA 01 F6 | 	mov	result1, objptr
220f0     00 08 03 FF 
220f4     00 FA 45 F5 | 	or	result1, ##101711872
220f8     44 00 00 FF 
220fc     A0 E4 05 F1 | 	add	objptr, ##34976
22100     F2 FA 61 FC | 	wrlong	result1, objptr
22104     44 00 00 FF 
22108     A0 E4 85 F1 | 	sub	objptr, ##34976
2210c     F2 FA 01 F6 | 	mov	result1, objptr
22110     00 10 03 FF 
22114     00 FA 45 F5 | 	or	result1, ##102760448
22118     44 00 00 FF 
2211c     94 E4 05 F1 | 	add	objptr, ##34964
22120     F2 FA 61 FC | 	wrlong	result1, objptr
22124     44 00 00 FF 
22128     94 E4 85 F1 | 	sub	objptr, ##34964
2212c     F2 FA 01 F6 | 	mov	result1, objptr
22130     00 18 03 FF 
22134     00 FA 45 F5 | 	or	result1, ##103809024
22138     44 00 00 FF 
2213c     90 E4 05 F1 | 	add	objptr, ##34960
22140     F2 FA 61 FC | 	wrlong	result1, objptr
22144     44 00 00 FF 
22148     90 E4 85 F1 | 	sub	objptr, ##34960
2214c     F2 FA 01 F6 | 	mov	result1, objptr
22150     00 20 03 FF 
22154     00 FA 45 F5 | 	or	result1, ##104857600
22158     44 00 00 FF 
2215c     8C E4 05 F1 | 	add	objptr, ##34956
22160     F2 FA 61 FC | 	wrlong	result1, objptr
22164     44 00 00 FF 
22168     8C E4 85 F1 | 	sub	objptr, ##34956
2216c     F2 FA 01 F6 | 	mov	result1, objptr
22170     00 28 03 FF 
22174     00 FA 45 F5 | 	or	result1, ##105906176
22178     44 00 00 FF 
2217c     9C E4 05 F1 | 	add	objptr, ##34972
22180     F2 FA 61 FC | 	wrlong	result1, objptr
22184     44 00 00 FF 
22188     9C E4 85 F1 | 	sub	objptr, ##34972
2218c     F2 FA 01 F6 | 	mov	result1, objptr
22190     00 30 03 FF 
22194     00 FA 45 F5 | 	or	result1, ##106954752
22198     44 00 00 FF 
2219c     A4 E4 05 F1 | 	add	objptr, ##34980
221a0     F2 FA 61 FC | 	wrlong	result1, objptr
221a4     44 00 00 FF 
221a8     A4 E4 85 F1 | 	sub	objptr, ##34980
221ac     F2 FA 01 F6 | 	mov	result1, objptr
221b0     00 38 03 FF 
221b4     00 FA 45 F5 | 	or	result1, ##108003328
221b8     44 00 00 FF 
221bc     A8 E4 05 F1 | 	add	objptr, ##34984
221c0     F2 FA 61 FC | 	wrlong	result1, objptr
221c4     44 00 00 FF 
221c8     A8 E4 85 F1 | 	sub	objptr, ##34984
221cc     F2 FA 01 F6 | 	mov	result1, objptr
221d0     00 40 03 FF 
221d4     00 FA 45 F5 | 	or	result1, ##109051904
221d8     44 00 00 FF 
221dc     AC E4 05 F1 | 	add	objptr, ##34988
221e0     F2 FA 61 FC | 	wrlong	result1, objptr
221e4     44 00 00 FF 
221e8     AC E4 85 F1 | 	sub	objptr, ##34988
221ec     F2 FA 01 F6 | 	mov	result1, objptr
221f0     00 48 03 FF 
221f4     00 FA 45 F5 | 	or	result1, ##110100480
221f8     44 00 00 FF 
221fc     B4 E4 05 F1 | 	add	objptr, ##34996
22200     F2 FA 61 FC | 	wrlong	result1, objptr
22204     44 00 00 FF 
22208     B4 E4 85 F1 | 	sub	objptr, ##34996
2220c     F2 FA 01 F6 | 	mov	result1, objptr
22210     00 50 03 FF 
22214     00 FA 45 F5 | 	or	result1, ##111149056
22218     44 00 00 FF 
2221c     B8 E4 05 F1 | 	add	objptr, ##35000
22220     F2 FA 61 FC | 	wrlong	result1, objptr
22224     44 00 00 FF 
22228     B8 E4 85 F1 | 	sub	objptr, ##35000
2222c     F2 FA 01 F6 | 	mov	result1, objptr
22230     00 58 03 FF 
22234     00 FA 45 F5 | 	or	result1, ##112197632
22238     44 00 00 FF 
2223c     BC E4 05 F1 | 	add	objptr, ##35004
22240     F2 FA 61 FC | 	wrlong	result1, objptr
22244     44 00 00 FF 
22248     BC E4 85 F1 | 	sub	objptr, ##35004
2224c     F2 FA 01 F6 | 	mov	result1, objptr
22250     00 60 03 FF 
22254     00 FA 45 F5 | 	or	result1, ##113246208
22258     44 00 00 FF 
2225c     C0 E4 05 F1 | 	add	objptr, ##35008
22260     F2 FA 61 FC | 	wrlong	result1, objptr
22264     44 00 00 FF 
22268     C0 E4 85 F1 | 	sub	objptr, ##35008
2226c     F2 FA 01 F6 | 	mov	result1, objptr
22270     00 68 03 FF 
22274     00 FA 45 F5 | 	or	result1, ##114294784
22278     44 00 00 FF 
2227c     C4 E4 05 F1 | 	add	objptr, ##35012
22280     F2 FA 61 FC | 	wrlong	result1, objptr
22284     44 00 00 FF 
22288     C4 E4 85 F1 | 	sub	objptr, ##35012
2228c     F2 FA 01 F6 | 	mov	result1, objptr
22290     00 70 03 FF 
22294     00 FA 45 F5 | 	or	result1, ##115343360
22298     44 00 00 FF 
2229c     C8 E4 05 F1 | 	add	objptr, ##35016
222a0     F2 FA 61 FC | 	wrlong	result1, objptr
222a4     44 00 00 FF 
222a8     C8 E4 85 F1 | 	sub	objptr, ##35016
222ac     F2 FA 01 F6 | 	mov	result1, objptr
222b0     00 08 01 FF 
222b4     00 FA 45 F5 | 	or	result1, ##34603008
222b8     44 00 00 FF 
222bc     CC E4 05 F1 | 	add	objptr, ##35020
222c0     F2 FA 61 FC | 	wrlong	result1, objptr
222c4     44 00 00 FF 
222c8     CC E4 85 F1 | 	sub	objptr, ##35020
222cc     F2 FA 01 F6 | 	mov	result1, objptr
222d0     00 78 03 FF 
222d4     00 FA 45 F5 | 	or	result1, ##116391936
222d8     44 00 00 FF 
222dc     D0 E4 05 F1 | 	add	objptr, ##35024
222e0     F2 FA 61 FC | 	wrlong	result1, objptr
222e4     44 00 00 FF 
222e8     D0 E4 85 F1 | 	sub	objptr, ##35024
222ec     F2 FA 01 F6 | 	mov	result1, objptr
222f0     58 FA 25 F4 | 	bith	result1, #88
222f4     44 00 00 FF 
222f8     B0 E4 05 F1 | 	add	objptr, ##34992
222fc     F2 FA 61 FC | 	wrlong	result1, objptr
22300     44 00 00 FF 
22304     B0 E4 85 F1 | 	sub	objptr, ##34992
22308     F2 FA 01 F6 | 	mov	result1, objptr
2230c     00 88 03 FF 
22310     00 FA 45 F5 | 	or	result1, ##118489088
22314     43 00 00 FF 
22318     A8 E4 05 F1 | 	add	objptr, ##34472
2231c     F2 FA 61 FC | 	wrlong	result1, objptr
22320     43 00 00 FF 
22324     A8 E4 85 F1 | 	sub	objptr, ##34472
22328     F2 FA 01 F6 | 	mov	result1, objptr
2232c     00 90 03 FF 
22330     00 FA 45 F5 | 	or	result1, ##119537664
22334     44 00 00 FF 
22338     D4 E4 05 F1 | 	add	objptr, ##35028
2233c     F2 FA 61 FC | 	wrlong	result1, objptr
22340     44 00 00 FF 
22344     D4 E4 85 F1 | 	sub	objptr, ##35028
22348     F2 FA 01 F6 | 	mov	result1, objptr
2234c     00 98 03 FF 
22350     00 FA 45 F5 | 	or	result1, ##120586240
22354     44 00 00 FF 
22358     D8 E4 05 F1 | 	add	objptr, ##35032
2235c     F2 FA 61 FC | 	wrlong	result1, objptr
22360     44 00 00 FF 
22364     D8 E4 85 F1 | 	sub	objptr, ##35032
22368     F2 FA 01 F6 | 	mov	result1, objptr
2236c     00 A0 03 FF 
22370     00 FA 45 F5 | 	or	result1, ##121634816
22374     44 00 00 FF 
22378     EC E4 05 F1 | 	add	objptr, ##35052
2237c     F2 FA 61 FC | 	wrlong	result1, objptr
22380     44 00 00 FF 
22384     EC E4 85 F1 | 	sub	objptr, ##35052
22388     F2 FA 01 F6 | 	mov	result1, objptr
2238c     00 A8 03 FF 
22390     00 FA 45 F5 | 	or	result1, ##122683392
22394     44 00 00 FF 
22398     E8 E4 05 F1 | 	add	objptr, ##35048
2239c     F2 FA 61 FC | 	wrlong	result1, objptr
223a0     44 00 00 FF 
223a4     E8 E4 85 F1 | 	sub	objptr, ##35048
223a8     F2 FA 01 F6 | 	mov	result1, objptr
223ac     00 B0 03 FF 
223b0     00 FA 45 F5 | 	or	result1, ##123731968
223b4     44 00 00 FF 
223b8     E0 E4 05 F1 | 	add	objptr, ##35040
223bc     F2 FA 61 FC | 	wrlong	result1, objptr
223c0     44 00 00 FF 
223c4     E0 E4 85 F1 | 	sub	objptr, ##35040
223c8     F2 FA 01 F6 | 	mov	result1, objptr
223cc     00 B8 03 FF 
223d0     00 FA 45 F5 | 	or	result1, ##124780544
223d4     44 00 00 FF 
223d8     DC E4 05 F1 | 	add	objptr, ##35036
223dc     F2 FA 61 FC | 	wrlong	result1, objptr
223e0     44 00 00 FF 
223e4     DC E4 85 F1 | 	sub	objptr, ##35036
223e8     F2 FA 01 F6 | 	mov	result1, objptr
223ec     77 FA 25 F4 | 	bith	result1, #119
223f0     44 00 00 FF 
223f4     FC E4 05 F1 | 	add	objptr, ##35068
223f8     F2 FA 61 FC | 	wrlong	result1, objptr
223fc     44 00 00 FF 
22400     FC E4 85 F1 | 	sub	objptr, ##35068
22404     F2 FA 01 F6 | 	mov	result1, objptr
22408     00 C8 03 FF 
2240c     00 FA 45 F5 | 	or	result1, ##126877696
22410     44 00 00 FF 
22414     F0 E4 05 F1 | 	add	objptr, ##35056
22418     F2 FA 61 FC | 	wrlong	result1, objptr
2241c     44 00 00 FF 
22420     F0 E4 85 F1 | 	sub	objptr, ##35056
22424     F2 FA 01 F6 | 	mov	result1, objptr
22428     00 D0 03 FF 
2242c     00 FA 45 F5 | 	or	result1, ##127926272
22430     44 00 00 FF 
22434     F4 E4 05 F1 | 	add	objptr, ##35060
22438     F2 FA 61 FC | 	wrlong	result1, objptr
2243c     44 00 00 FF 
22440     F4 E4 85 F1 | 	sub	objptr, ##35060
22444     F2 FA 01 F6 | 	mov	result1, objptr
22448     00 D8 03 FF 
2244c     00 FA 45 F5 | 	or	result1, ##128974848
22450     44 00 00 FF 
22454     F8 E4 05 F1 | 	add	objptr, ##35064
22458     F2 FA 61 FC | 	wrlong	result1, objptr
2245c     44 00 00 FF 
22460     F8 E4 85 F1 | 	sub	objptr, ##35064
22464     F2 FA 01 F6 | 	mov	result1, objptr
22468     96 FA 25 F4 | 	bith	result1, #150
2246c     44 00 00 FF 
22470     00 E5 05 F1 | 	add	objptr, ##35072
22474     F2 FA 61 FC | 	wrlong	result1, objptr
22478     44 00 00 FF 
2247c     00 E5 85 F1 | 	sub	objptr, ##35072
22480     F2 FA 01 F6 | 	mov	result1, objptr
22484     00 E8 03 FF 
22488     00 FA 45 F5 | 	or	result1, ##131072000
2248c     44 00 00 FF 
22490     04 E5 05 F1 | 	add	objptr, ##35076
22494     F2 FA 61 FC | 	wrlong	result1, objptr
22498     44 00 00 FF 
2249c     04 E5 85 F1 | 	sub	objptr, ##35076
224a0     F2 FA 01 F6 | 	mov	result1, objptr
224a4     B5 FA 25 F4 | 	bith	result1, #181
224a8     44 00 00 FF 
224ac     08 E5 05 F1 | 	add	objptr, ##35080
224b0     F2 FA 61 FC | 	wrlong	result1, objptr
224b4     44 00 00 FF 
224b8     08 E5 85 F1 | 	sub	objptr, ##35080
224bc     F2 FA 01 F6 | 	mov	result1, objptr
224c0     D4 FA 25 F4 | 	bith	result1, #212
224c4     44 00 00 FF 
224c8     0C E5 05 F1 | 	add	objptr, ##35084
224cc     F2 FA 61 FC | 	wrlong	result1, objptr
224d0     44 00 00 FF 
224d4     0C E5 85 F1 | 	sub	objptr, ##35084
224d8     F2 FA 01 F6 | 	mov	result1, objptr
224dc     1B FA 25 F4 | 	bith	result1, #27
224e0     44 00 00 FF 
224e4     10 E5 05 F1 | 	add	objptr, ##35088
224e8     F2 FA 61 FC | 	wrlong	result1, objptr
224ec     44 00 00 FF 
224f0     10 E5 85 F1 | 	sub	objptr, ##35088
224f4     F2 FA 01 F6 | 	mov	result1, objptr
224f8     00 08 04 FF 
224fc     00 FA 45 F5 | 	or	result1, ##135266304
22500     44 00 00 FF 
22504     14 E5 05 F1 | 	add	objptr, ##35092
22508     F2 FA 61 FC | 	wrlong	result1, objptr
2250c     44 00 00 FF 
22510     14 E5 85 F1 | 	sub	objptr, ##35092
22514     F2 FA 01 F6 | 	mov	result1, objptr
22518     00 10 04 FF 
2251c     00 FA 45 F5 | 	or	result1, ##136314880
22520     44 00 00 FF 
22524     1C E5 05 F1 | 	add	objptr, ##35100
22528     F2 FA 61 FC | 	wrlong	result1, objptr
2252c     44 00 00 FF 
22530     1C E5 85 F1 | 	sub	objptr, ##35100
22534     F2 FA 01 F6 | 	mov	result1, objptr
22538     00 18 04 FF 
2253c     00 FA 45 F5 | 	or	result1, ##137363456
22540     44 00 00 FF 
22544     20 E5 05 F1 | 	add	objptr, ##35104
22548     F2 FA 61 FC | 	wrlong	result1, objptr
2254c     44 00 00 FF 
22550     20 E5 85 F1 | 	sub	objptr, ##35104
22554     F2 FA 01 F6 | 	mov	result1, objptr
22558     00 20 04 FF 
2255c     00 FA 45 F5 | 	or	result1, ##138412032
22560     44 00 00 FF 
22564     24 E5 05 F1 | 	add	objptr, ##35108
22568     F2 FA 61 FC | 	wrlong	result1, objptr
2256c     44 00 00 FF 
22570     24 E5 85 F1 | 	sub	objptr, ##35108
22574     F2 FA 01 F6 | 	mov	result1, objptr
22578     00 28 04 FF 
2257c     00 FA 45 F5 | 	or	result1, ##139460608
22580     44 00 00 FF 
22584     18 E5 05 F1 | 	add	objptr, ##35096
22588     F2 FA 61 FC | 	wrlong	result1, objptr
2258c     44 00 00 FF 
22590     18 E5 85 F1 | 	sub	objptr, ##35096
22594     F2 FA 01 F6 | 	mov	result1, objptr
22598     00 30 04 FF 
2259c     00 FA 45 F5 | 	or	result1, ##140509184
225a0     44 00 00 FF 
225a4     28 E5 05 F1 | 	add	objptr, ##35112
225a8     F2 FA 61 FC | 	wrlong	result1, objptr
225ac     44 00 00 FF 
225b0     28 E5 85 F1 | 	sub	objptr, ##35112
225b4     F2 FA 01 F6 | 	mov	result1, objptr
225b8     00 38 04 FF 
225bc     00 FA 45 F5 | 	or	result1, ##141557760
225c0     44 00 00 FF 
225c4     5C E5 05 F1 | 	add	objptr, ##35164
225c8     F2 FA 61 FC | 	wrlong	result1, objptr
225cc     44 00 00 FF 
225d0     5C E5 85 F1 | 	sub	objptr, ##35164
225d4     F2 FA 01 F6 | 	mov	result1, objptr
225d8     00 40 04 FF 
225dc     00 FA 45 F5 | 	or	result1, ##142606336
225e0     44 00 00 FF 
225e4     54 E5 05 F1 | 	add	objptr, ##35156
225e8     F2 FA 61 FC | 	wrlong	result1, objptr
225ec     44 00 00 FF 
225f0     54 E5 85 F1 | 	sub	objptr, ##35156
225f4     F2 FA 01 F6 | 	mov	result1, objptr
225f8     00 48 04 FF 
225fc     00 FA 45 F5 | 	or	result1, ##143654912
22600     44 00 00 FF 
22604     2C E5 05 F1 | 	add	objptr, ##35116
22608     F2 FA 61 FC | 	wrlong	result1, objptr
2260c     44 00 00 FF 
22610     2C E5 85 F1 | 	sub	objptr, ##35116
22614     F2 FA 01 F6 | 	mov	result1, objptr
22618     00 50 04 FF 
2261c     00 FA 45 F5 | 	or	result1, ##144703488
22620     44 00 00 FF 
22624     30 E5 05 F1 | 	add	objptr, ##35120
22628     F2 FA 61 FC | 	wrlong	result1, objptr
2262c     44 00 00 FF 
22630     30 E5 85 F1 | 	sub	objptr, ##35120
22634     F2 FA 01 F6 | 	mov	result1, objptr
22638     00 58 04 FF 
2263c     00 FA 45 F5 | 	or	result1, ##145752064
22640     44 00 00 FF 
22644     4C E5 05 F1 | 	add	objptr, ##35148
22648     F2 FA 61 FC | 	wrlong	result1, objptr
2264c     44 00 00 FF 
22650     4C E5 85 F1 | 	sub	objptr, ##35148
22654     F2 FA 01 F6 | 	mov	result1, objptr
22658     00 60 04 FF 
2265c     00 FA 45 F5 | 	or	result1, ##146800640
22660     44 00 00 FF 
22664     50 E5 05 F1 | 	add	objptr, ##35152
22668     F2 FA 61 FC | 	wrlong	result1, objptr
2266c     44 00 00 FF 
22670     50 E5 85 F1 | 	sub	objptr, ##35152
22674     F2 FA 01 F6 | 	mov	result1, objptr
22678     00 68 04 FF 
2267c     00 FA 45 F5 | 	or	result1, ##147849216
22680     44 00 00 FF 
22684     6C E5 05 F1 | 	add	objptr, ##35180
22688     F2 FA 61 FC | 	wrlong	result1, objptr
2268c     44 00 00 FF 
22690     6C E5 85 F1 | 	sub	objptr, ##35180
22694     F2 FA 01 F6 | 	mov	result1, objptr
22698     00 70 04 FF 
2269c     00 FA 45 F5 | 	or	result1, ##148897792
226a0     44 00 00 FF 
226a4     68 E5 05 F1 | 	add	objptr, ##35176
226a8     F2 FA 61 FC | 	wrlong	result1, objptr
226ac     44 00 00 FF 
226b0     68 E5 85 F1 | 	sub	objptr, ##35176
226b4     F2 FA 01 F6 | 	mov	result1, objptr
226b8     00 78 04 FF 
226bc     00 FA 45 F5 | 	or	result1, ##149946368
226c0     44 00 00 FF 
226c4     78 E5 05 F1 | 	add	objptr, ##35192
226c8     F2 FA 61 FC | 	wrlong	result1, objptr
226cc     44 00 00 FF 
226d0     78 E5 85 F1 | 	sub	objptr, ##35192
226d4     F2 FA 01 F6 | 	mov	result1, objptr
226d8     00 80 04 FF 
226dc     00 FA 45 F5 | 	or	result1, ##150994944
226e0     44 00 00 FF 
226e4     44 E5 05 F1 | 	add	objptr, ##35140
226e8     F2 FA 61 FC | 	wrlong	result1, objptr
226ec     44 00 00 FF 
226f0     44 E5 85 F1 | 	sub	objptr, ##35140
226f4     F2 FA 01 F6 | 	mov	result1, objptr
226f8     00 88 04 FF 
226fc     00 FA 45 F5 | 	or	result1, ##152043520
22700     44 00 00 FF 
22704     74 E5 05 F1 | 	add	objptr, ##35188
22708     F2 FA 61 FC | 	wrlong	result1, objptr
2270c     44 00 00 FF 
22710     74 E5 85 F1 | 	sub	objptr, ##35188
22714     F2 FA 01 F6 | 	mov	result1, objptr
22718     00 90 04 FF 
2271c     00 FA 45 F5 | 	or	result1, ##153092096
22720     44 00 00 FF 
22724     64 E5 05 F1 | 	add	objptr, ##35172
22728     F2 FA 61 FC | 	wrlong	result1, objptr
2272c     44 00 00 FF 
22730     64 E5 85 F1 | 	sub	objptr, ##35172
22734     F2 FA 01 F6 | 	mov	result1, objptr
22738     00 98 04 FF 
2273c     00 FA 45 F5 | 	or	result1, ##154140672
22740     43 00 00 FF 
22744     14 E5 05 F1 | 	add	objptr, ##34580
22748     F2 FA 61 FC | 	wrlong	result1, objptr
2274c     43 00 00 FF 
22750     14 E5 85 F1 | 	sub	objptr, ##34580
22754     F2 FA 01 F6 | 	mov	result1, objptr
22758     00 A0 04 FF 
2275c     00 FA 45 F5 | 	or	result1, ##155189248
22760     44 00 00 FF 
22764     34 E5 05 F1 | 	add	objptr, ##35124
22768     F2 FA 61 FC | 	wrlong	result1, objptr
2276c     44 00 00 FF 
22770     34 E5 85 F1 | 	sub	objptr, ##35124
22774     F2 FA 01 F6 | 	mov	result1, objptr
22778     00 08 01 FF 
2277c     00 FA 45 F5 | 	or	result1, ##34603008
22780     44 00 00 FF 
22784     3C E5 05 F1 | 	add	objptr, ##35132
22788     F2 FA 61 FC | 	wrlong	result1, objptr
2278c     44 00 00 FF 
22790     3C E5 85 F1 | 	sub	objptr, ##35132
22794     F2 FA 01 F6 | 	mov	result1, objptr
22798     00 A8 04 FF 
2279c     00 FA 45 F5 | 	or	result1, ##156237824
227a0     44 00 00 FF 
227a4     38 E5 05 F1 | 	add	objptr, ##35128
227a8     F2 FA 61 FC | 	wrlong	result1, objptr
227ac     44 00 00 FF 
227b0     38 E5 85 F1 | 	sub	objptr, ##35128
227b4     F2 FA 01 F6 | 	mov	result1, objptr
227b8     00 B0 04 FF 
227bc     00 FA 45 F5 | 	or	result1, ##157286400
227c0     44 00 00 FF 
227c4     7C E5 05 F1 | 	add	objptr, ##35196
227c8     F2 FA 61 FC | 	wrlong	result1, objptr
227cc     44 00 00 FF 
227d0     7C E5 85 F1 | 	sub	objptr, ##35196
227d4     F2 FA 01 F6 | 	mov	result1, objptr
227d8     00 B8 04 FF 
227dc     00 FA 45 F5 | 	or	result1, ##158334976
227e0     44 00 00 FF 
227e4     80 E5 05 F1 | 	add	objptr, ##35200
227e8     F2 FA 61 FC | 	wrlong	result1, objptr
227ec     44 00 00 FF 
227f0     80 E5 85 F1 | 	sub	objptr, ##35200
227f4     F2 FA 01 F6 | 	mov	result1, objptr
227f8     00 C0 04 FF 
227fc     00 FA 45 F5 | 	or	result1, ##159383552
22800     44 00 00 FF 
22804     84 E5 05 F1 | 	add	objptr, ##35204
22808     F2 FA 61 FC | 	wrlong	result1, objptr
2280c     44 00 00 FF 
22810     84 E5 85 F1 | 	sub	objptr, ##35204
22814     F2 FA 01 F6 | 	mov	result1, objptr
22818     00 C8 04 FF 
2281c     00 FA 45 F5 | 	or	result1, ##160432128
22820     44 00 00 FF 
22824     88 E5 05 F1 | 	add	objptr, ##35208
22828     F2 FA 61 FC | 	wrlong	result1, objptr
2282c     44 00 00 FF 
22830     88 E5 85 F1 | 	sub	objptr, ##35208
22834     F2 FA 01 F6 | 	mov	result1, objptr
22838     00 D0 04 FF 
2283c     00 FA 45 F5 | 	or	result1, ##161480704
22840     44 00 00 FF 
22844     90 E5 05 F1 | 	add	objptr, ##35216
22848     F2 FA 61 FC | 	wrlong	result1, objptr
2284c     44 00 00 FF 
22850     90 E5 85 F1 | 	sub	objptr, ##35216
22854     F2 FA 01 F6 | 	mov	result1, objptr
22858     00 D8 04 FF 
2285c     00 FA 45 F5 | 	or	result1, ##162529280
22860     44 00 00 FF 
22864     94 E5 05 F1 | 	add	objptr, ##35220
22868     F2 FA 61 FC | 	wrlong	result1, objptr
2286c     44 00 00 FF 
22870     94 E5 85 F1 | 	sub	objptr, ##35220
22874     F2 FA 01 F6 | 	mov	result1, objptr
22878     00 E0 04 FF 
2287c     00 FA 45 F5 | 	or	result1, ##163577856
22880     44 00 00 FF 
22884     98 E5 05 F1 | 	add	objptr, ##35224
22888     F2 FA 61 FC | 	wrlong	result1, objptr
2288c     44 00 00 FF 
22890     98 E5 85 F1 | 	sub	objptr, ##35224
22894     F2 FA 01 F6 | 	mov	result1, objptr
22898     00 E8 04 FF 
2289c     00 FA 45 F5 | 	or	result1, ##164626432
228a0     44 00 00 FF 
228a4     8C E5 05 F1 | 	add	objptr, ##35212
228a8     F2 FA 61 FC | 	wrlong	result1, objptr
228ac     44 00 00 FF 
228b0     8C E5 85 F1 | 	sub	objptr, ##35212
228b4     F2 FA 01 F6 | 	mov	result1, objptr
228b8     00 F0 04 FF 
228bc     00 FA 45 F5 | 	or	result1, ##165675008
228c0     44 00 00 FF 
228c4     70 E5 05 F1 | 	add	objptr, ##35184
228c8     F2 FA 61 FC | 	wrlong	result1, objptr
228cc     44 00 00 FF 
228d0     70 E5 85 F1 | 	sub	objptr, ##35184
228d4     F2 FA 01 F6 | 	mov	result1, objptr
228d8     00 F8 04 FF 
228dc     00 FA 45 F5 | 	or	result1, ##166723584
228e0     44 00 00 FF 
228e4     60 E5 05 F1 | 	add	objptr, ##35168
228e8     F2 FA 61 FC | 	wrlong	result1, objptr
228ec     44 00 00 FF 
228f0     60 E5 85 F1 | 	sub	objptr, ##35168
228f4     F2 FA 01 F6 | 	mov	result1, objptr
228f8     00 00 05 FF 
228fc     00 FA 45 F5 | 	or	result1, ##167772160
22900     44 00 00 FF 
22904     9C E5 05 F1 | 	add	objptr, ##35228
22908     F2 FA 61 FC | 	wrlong	result1, objptr
2290c     44 00 00 FF 
22910     9C E5 85 F1 | 	sub	objptr, ##35228
22914     F2 FA 01 F6 | 	mov	result1, objptr
22918     00 08 05 FF 
2291c     00 FA 45 F5 | 	or	result1, ##168820736
22920     44 00 00 FF 
22924     A0 E5 05 F1 | 	add	objptr, ##35232
22928     F2 FA 61 FC | 	wrlong	result1, objptr
2292c     44 00 00 FF 
22930     A0 E5 85 F1 | 	sub	objptr, ##35232
22934     F2 FA 01 F6 | 	mov	result1, objptr
22938     00 10 05 FF 
2293c     00 FA 45 F5 | 	or	result1, ##169869312
22940     44 00 00 FF 
22944     A4 E5 05 F1 | 	add	objptr, ##35236
22948     F2 FA 61 FC | 	wrlong	result1, objptr
2294c     44 00 00 FF 
22950     A4 E5 85 F1 | 	sub	objptr, ##35236
22954     F2 FA 01 F6 | 	mov	result1, objptr
22958     00 18 05 FF 
2295c     00 FA 45 F5 | 	or	result1, ##170917888
22960     44 00 00 FF 
22964     A8 E5 05 F1 | 	add	objptr, ##35240
22968     F2 FA 61 FC | 	wrlong	result1, objptr
2296c     44 00 00 FF 
22970     A8 E5 85 F1 | 	sub	objptr, ##35240
22974     F2 FA 01 F6 | 	mov	result1, objptr
22978     00 20 05 FF 
2297c     00 FA 45 F5 | 	or	result1, ##171966464
22980     44 00 00 FF 
22984     AC E5 05 F1 | 	add	objptr, ##35244
22988     F2 FA 61 FC | 	wrlong	result1, objptr
2298c     44 00 00 FF 
22990     AC E5 85 F1 | 	sub	objptr, ##35244
22994     F2 FA 01 F6 | 	mov	result1, objptr
22998     00 28 05 FF 
2299c     00 FA 45 F5 | 	or	result1, ##173015040
229a0     44 00 00 FF 
229a4     B0 E5 05 F1 | 	add	objptr, ##35248
229a8     F2 FA 61 FC | 	wrlong	result1, objptr
229ac     44 00 00 FF 
229b0     B0 E5 85 F1 | 	sub	objptr, ##35248
229b4                 | _init_commands_ret
229b4     2D 00 64 FD | 	ret
229b8                 | 
229b8                 | ' 
229b8                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
229b8                 | ' 
229b8                 | ' sub init_audio
229b8                 | _init_audio
229b8     06 4A 05 F6 | 	mov	COUNT_, #6
229bc     A8 00 A0 FD | 	call	#pushregs_
229c0     00 C0 1F FF 
229c4     00 26 06 F6 | 	mov	local01, ##1065353216
229c8                 | ' 
229c8                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
229c8     00 28 06 F6 | 	mov	local02, #0
229cc                 | LR__2640
229cc     14 2B 02 F6 | 	mov	local03, local02
229d0     01 2A 66 F0 | 	shl	local03, #1
229d4     58 7F 23 FF 
229d8     00 2C 06 F6 | 	mov	local04, ##1191096320
229dc     14 13 52 F6 | 	abs	arg01, local02 wc
229e0     1F 2E C6 C9 |  if_b	decod	local05, #31
229e4     00 2E 06 36 |  if_ae	mov	local05, #0
229e8     F4 70 B0 FD | 	call	#__system___float_fromuns
229ec     17 FB 61 F5 | 	xor	result1, local05
229f0     FD 12 02 F6 | 	mov	arg01, result1
229f4     87 24 20 FF 
229f8     DB 15 06 F6 | 	mov	arg02, ##1078530011
229fc     E4 74 B0 FD | 	call	#__system___float_mul
22a00     FD 12 02 F6 | 	mov	arg01, result1
22a04     00 00 22 FF 
22a08     00 14 06 F6 | 	mov	arg02, ##1140850688
22a0c     D8 76 B0 FD | 	call	#__system___float_div
22a10     FD 12 02 F6 | 	mov	arg01, result1
22a14     2C 7E B0 FD | 	call	#__system____builtin_sinf
22a18     FD 14 02 F6 | 	mov	arg02, result1
22a1c     16 13 02 F6 | 	mov	arg01, local04
22a20     C0 74 B0 FD | 	call	#__system___float_mul
22a24     FD 12 02 F6 | 	mov	arg01, result1
22a28     01 14 06 F6 | 	mov	arg02, #1
22a2c     7C 79 B0 FD | 	call	#__system___float_tointeger
22a30     FD 14 02 F6 | 	mov	arg02, result1
22a34     15 13 02 F6 | 	mov	arg01, local03
22a38     6C 0D B0 FD | 	call	#_psdpoke
22a3c     01 28 06 F1 | 	add	local02, #1
22a40     02 00 00 FF 
22a44     00 28 56 F2 | 	cmps	local02, ##1024 wc
22a48     80 FF 9F CD |  if_b	jmp	#LR__2640
22a4c                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
22a4c     00 28 06 F6 | 	mov	local02, #0
22a50                 | LR__2641
22a50     14 15 02 F6 | 	mov	arg02, local02
22a54     01 14 66 F0 | 	shl	arg02, #1
22a58     0B 12 C6 F9 | 	decod	arg01, #11
22a5c     0A 13 02 F1 | 	add	arg01, arg02
22a60     14 2D 02 F6 | 	mov	local04, local02
22a64     07 2C 66 F0 | 	shl	local04, #7
22a68     14 2D 82 F1 | 	sub	local04, local02
22a6c     C0 FF 7F FF 
22a70     00 15 06 F6 | 	mov	arg02, ##-32512
22a74     16 15 02 F1 | 	add	arg02, local04
22a78     2C 0D B0 FD | 	call	#_psdpoke
22a7c     09 2C C6 F9 | 	decod	local04, #9
22a80     14 2D 02 F1 | 	add	local04, local02
22a84     01 2C 66 F0 | 	shl	local04, #1
22a88     0B 12 C6 F9 | 	decod	arg01, #11
22a8c     16 13 02 F1 | 	add	arg01, local04
22a90     14 2F 02 F6 | 	mov	local05, local02
22a94     07 2E 66 F0 | 	shl	local05, #7
22a98     14 2F 82 F1 | 	sub	local05, local02
22a9c     3F 00 00 FF 
22aa0     00 15 06 F6 | 	mov	arg02, ##32512
22aa4     17 15 82 F1 | 	sub	arg02, local05
22aa8     FC 0C B0 FD | 	call	#_psdpoke
22aac     01 28 06 F1 | 	add	local02, #1
22ab0     01 00 00 FF 
22ab4     00 28 56 F2 | 	cmps	local02, ##512 wc
22ab8     94 FF 9F CD |  if_b	jmp	#LR__2641
22abc                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
22abc     00 28 06 F6 | 	mov	local02, #0
22ac0                 | LR__2642
22ac0     14 2F 02 F6 | 	mov	local05, local02
22ac4     01 2E 66 F0 | 	shl	local05, #1
22ac8     0C 12 C6 F9 | 	decod	arg01, #12
22acc     17 13 02 F1 | 	add	arg01, local05
22ad0     14 2F 02 F6 | 	mov	local05, local02
22ad4     06 2E 66 F0 | 	shl	local05, #6
22ad8     14 2F 82 F1 | 	sub	local05, local02
22adc     C1 FF 7F FF 
22ae0     00 14 06 F6 | 	mov	arg02, ##-32256
22ae4     17 15 02 F1 | 	add	arg02, local05
22ae8     BC 0C B0 FD | 	call	#_psdpoke
22aec     01 28 06 F1 | 	add	local02, #1
22af0     02 00 00 FF 
22af4     00 28 56 F2 | 	cmps	local02, ##1024 wc
22af8     C4 FF 9F CD |  if_b	jmp	#LR__2642
22afc                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
22afc     00 28 06 F6 | 	mov	local02, #0
22b00                 | LR__2643
22b00     14 2F 02 F6 | 	mov	local05, local02
22b04     01 2E 66 F0 | 	shl	local05, #1
22b08     0C 00 00 FF 
22b0c     00 12 06 F6 | 	mov	arg01, ##6144
22b10     17 13 02 F1 | 	add	arg01, local05
22b14     C0 FF 7F FF 
22b18     A8 14 06 F6 | 	mov	arg02, ##-32600
22b1c     88 0C B0 FD | 	call	#_psdpoke
22b20     01 28 06 F1 | 	add	local02, #1
22b24     80 28 56 F2 | 	cmps	local02, #128 wc
22b28     D4 FF 9F CD |  if_b	jmp	#LR__2643
22b2c     80 28 06 F6 | 	mov	local02, #128
22b30                 | LR__2644
22b30     14 2F 02 F6 | 	mov	local05, local02
22b34     01 2E 66 F0 | 	shl	local05, #1
22b38     0C 00 00 FF 
22b3c     00 12 06 F6 | 	mov	arg01, ##6144
22b40     17 13 02 F1 | 	add	arg01, local05
22b44     3F 00 00 FF 
22b48     58 15 06 F6 | 	mov	arg02, ##32600
22b4c     58 0C B0 FD | 	call	#_psdpoke
22b50     01 28 06 F1 | 	add	local02, #1
22b54     02 00 00 FF 
22b58     00 28 16 F2 | 	cmp	local02, ##1024 wc
22b5c     D0 FF 9F CD |  if_b	jmp	#LR__2644
22b60                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
22b60     00 28 06 F6 | 	mov	local02, #0
22b64                 | LR__2645
22b64     14 2F 02 F6 | 	mov	local05, local02
22b68     01 2E 66 F0 | 	shl	local05, #1
22b6c     0D 12 C6 F9 | 	decod	arg01, #13
22b70     17 13 02 F1 | 	add	arg01, local05
22b74     C0 FF 7F FF 
22b78     A8 14 06 F6 | 	mov	arg02, ##-32600
22b7c     28 0C B0 FD | 	call	#_psdpoke
22b80     01 28 06 F1 | 	add	local02, #1
22b84     01 00 00 FF 
22b88     00 28 56 F2 | 	cmps	local02, ##512 wc
22b8c     D4 FF 9F CD |  if_b	jmp	#LR__2645
22b90     09 28 C6 F9 | 	decod	local02, #9
22b94                 | LR__2646
22b94     14 2F 02 F6 | 	mov	local05, local02
22b98     01 2E 66 F0 | 	shl	local05, #1
22b9c     0D 12 C6 F9 | 	decod	arg01, #13
22ba0     17 13 02 F1 | 	add	arg01, local05
22ba4     3F 00 00 FF 
22ba8     58 15 06 F6 | 	mov	arg02, ##32600
22bac     F8 0B B0 FD | 	call	#_psdpoke
22bb0     01 28 06 F1 | 	add	local02, #1
22bb4     02 00 00 FF 
22bb8     00 28 16 F2 | 	cmp	local02, ##1024 wc
22bbc     D4 FF 9F CD |  if_b	jmp	#LR__2646
22bc0                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
22bc0     00 28 06 F6 | 	mov	local02, #0
22bc4                 | LR__2647
22bc4     14 2F 02 F6 | 	mov	local05, local02
22bc8     01 2E 66 F0 | 	shl	local05, #1
22bcc     14 00 00 FF 
22bd0     00 12 06 F6 | 	mov	arg01, ##10240
22bd4     17 13 02 F1 | 	add	arg01, local05
22bd8     C0 FF 7F FF 
22bdc     A8 14 06 F6 | 	mov	arg02, ##-32600
22be0     C4 0B B0 FD | 	call	#_psdpoke
22be4     01 28 06 F1 | 	add	local02, #1
22be8     00 29 56 F2 | 	cmps	local02, #256 wc
22bec     D4 FF 9F CD |  if_b	jmp	#LR__2647
22bf0     00 29 06 F6 | 	mov	local02, #256
22bf4                 | LR__2648
22bf4     14 2F 02 F6 | 	mov	local05, local02
22bf8     01 2E 66 F0 | 	shl	local05, #1
22bfc     14 00 00 FF 
22c00     00 12 06 F6 | 	mov	arg01, ##10240
22c04     17 13 02 F1 | 	add	arg01, local05
22c08     3F 00 00 FF 
22c0c     58 15 06 F6 | 	mov	arg02, ##32600
22c10     94 0B B0 FD | 	call	#_psdpoke
22c14     01 28 06 F1 | 	add	local02, #1
22c18     02 00 00 FF 
22c1c     00 28 16 F2 | 	cmp	local02, ##1024 wc
22c20     D0 FF 9F CD |  if_b	jmp	#LR__2648
22c24                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
22c24     18 00 00 FF 
22c28     00 28 06 F6 | 	mov	local02, ##12288
22c2c                 | LR__2649
22c2c     14 13 02 F6 | 	mov	arg01, local02
22c30     00 14 06 F6 | 	mov	arg02, #0
22c34     28 0B B0 FD | 	call	#_pslpoke
22c38     04 28 06 F1 | 	add	local02, #4
22c3c     77 00 00 FF 
22c40     FD 29 56 F2 | 	cmps	local02, ##61437 wc
22c44     E4 FF 9F CD |  if_b	jmp	#LR__2649
22c48                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
22c48     00 28 06 F6 | 	mov	local02, #0
22c4c                 | LR__2650
22c4c     14 2F 02 F6 | 	mov	local05, local02
22c50     01 2E 66 F0 | 	shl	local05, #1
22c54     78 00 00 FF 
22c58     00 2A 06 F6 | 	mov	local03, ##61440
22c5c     17 2B 02 F1 | 	add	local03, local05
22c60     12 00 00 FF 
22c64     BA EA 05 F1 | 	add	ptr__dat__, ##9402
22c68     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22c6c     12 00 00 FF 
22c70     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
22c74     10 12 06 F1 | 	add	arg01, #16
22c78     14 15 02 F6 | 	mov	arg02, local02
22c7c     01 14 66 F0 | 	shl	arg02, #1
22c80     0A 13 02 F1 | 	add	arg01, arg02
22c84     09 15 E2 FA | 	rdword	arg02, arg01
22c88     15 13 02 F6 | 	mov	arg01, local03
22c8c     18 0B B0 FD | 	call	#_psdpoke
22c90     01 28 06 F1 | 	add	local02, #1
22c94     02 00 00 FF 
22c98     00 28 56 F2 | 	cmps	local02, ##1024 wc
22c9c     AC FF 9F CD |  if_b	jmp	#LR__2650
22ca0                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
22ca0     00 28 06 F6 | 	mov	local02, #0
22ca4                 | LR__2651
22ca4     14 2F 02 F6 | 	mov	local05, local02
22ca8     01 2E 66 F0 | 	shl	local05, #1
22cac     7C 00 00 FF 
22cb0     00 2A 06 F6 | 	mov	local03, ##63488
22cb4     17 2B 02 F1 | 	add	local03, local05
22cb8     0E 00 00 FF 
22cbc     AA EA 05 F1 | 	add	ptr__dat__, ##7338
22cc0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22cc4     0E 00 00 FF 
22cc8     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
22ccc     10 12 06 F1 | 	add	arg01, #16
22cd0     14 15 02 F6 | 	mov	arg02, local02
22cd4     01 14 66 F0 | 	shl	arg02, #1
22cd8     0A 13 02 F1 | 	add	arg01, arg02
22cdc     09 15 E2 FA | 	rdword	arg02, arg01
22ce0     15 13 02 F6 | 	mov	arg01, local03
22ce4     C0 0A B0 FD | 	call	#_psdpoke
22ce8     01 28 06 F1 | 	add	local02, #1
22cec     02 00 00 FF 
22cf0     00 28 56 F2 | 	cmps	local02, ##1024 wc
22cf4     AC FF 9F CD |  if_b	jmp	#LR__2651
22cf8                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
22cf8     00 28 06 F6 | 	mov	local02, #0
22cfc     0C 00 00 FF 
22d00     D8 E4 05 F1 | 	add	objptr, ##6360
22d04     97 18 48 FB | 	callpa	#(@LR__2653-@LR__2652)>>2,fcache_load_ptr_
22d08                 | LR__2652
22d08     14 2F 02 F6 | 	mov	local05, local02
22d0c     01 2E 66 F0 | 	shl	local05, #1
22d10     F2 2E 02 F1 | 	add	local05, objptr
22d14     14 2B 02 F6 | 	mov	local03, local02
22d18     08 2A 66 F0 | 	shl	local03, #8
22d1c     7F 00 00 FF 
22d20     00 31 06 F6 | 	mov	local06, ##65280
22d24     15 31 82 F1 | 	sub	local06, local03
22d28     17 31 52 FC | 	wrword	local06, local05
22d2c     01 28 06 F1 | 	add	local02, #1
22d30     00 29 56 F2 | 	cmps	local02, #256 wc
22d34     D0 FF 9F CD |  if_b	jmp	#LR__2652
22d38                 | LR__2653
22d38     0C 00 00 FF 
22d3c     D8 E4 85 F1 | 	sub	objptr, ##6360
22d40                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
22d40     00 28 06 F6 | 	mov	local02, #0
22d44                 | LR__2654
22d44     14 2F 02 F6 | 	mov	local05, local02
22d48     01 2E 66 F0 | 	shl	local05, #1
22d4c     0D 00 00 FF 
22d50     D8 E4 05 F1 | 	add	objptr, ##6872
22d54     F2 2E 02 F1 | 	add	local05, objptr
22d58     80 BF 23 FF 
22d5c     00 12 06 F6 | 	mov	arg01, ##1199505408
22d60     13 15 02 F6 | 	mov	arg02, local01
22d64     0D 00 00 FF 
22d68     D8 E4 85 F1 | 	sub	objptr, ##6872
22d6c     74 71 B0 FD | 	call	#__system___float_mul
22d70     FD 12 02 F6 | 	mov	arg01, result1
22d74     01 14 06 F6 | 	mov	arg02, #1
22d78     30 76 B0 FD | 	call	#__system___float_tointeger
22d7c     17 FB 51 FC | 	wrword	result1, local05
22d80     13 13 02 F6 | 	mov	arg01, local01
22d84     CC BC 1F FF 
22d88     9A 15 06 F6 | 	mov	arg02, ##1064933786
22d8c     54 71 B0 FD | 	call	#__system___float_mul
22d90     FD 26 02 F6 | 	mov	local01, result1
22d94     01 28 06 F1 | 	add	local02, #1
22d98     00 29 56 F2 | 	cmps	local02, #256 wc
22d9c     A4 FF 9F CD |  if_b	jmp	#LR__2654
22da0     0E 00 00 FF 
22da4     D6 E4 05 F1 | 	add	objptr, ##7382
22da8     F2 00 58 FC | 	wrword	#0, objptr
22dac                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
22dac     00 28 06 F6 | 	mov	local02, #0
22db0     02 E4 05 F1 | 	add	objptr, #2
22db4     97 10 48 FB | 	callpa	#(@LR__2656-@LR__2655)>>2,fcache_load_ptr_
22db8                 | LR__2655
22db8     14 2F 02 F6 | 	mov	local05, local02
22dbc     01 2E 66 F0 | 	shl	local05, #1
22dc0     F2 2E 02 F1 | 	add	local05, objptr
22dc4     7F 00 80 FF 
22dc8     17 01 5A FC | 	wrword	##65280, local05
22dcc     01 28 06 F1 | 	add	local02, #1
22dd0     FF 28 56 F2 | 	cmps	local02, #255 wc
22dd4     E0 FF 9F CD |  if_b	jmp	#LR__2655
22dd8                 | LR__2656
22dd8     FE E5 05 F1 | 	add	objptr, #510
22ddc     F2 00 58 FC | 	wrword	#0, objptr
22de0                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
22de0     00 28 06 F6 | 	mov	local02, #0
22de4     02 E4 05 F1 | 	add	objptr, #2
22de8     97 52 48 FB | 	callpa	#(@LR__2661-@LR__2657)>>2,fcache_load_ptr_
22dec                 | LR__2657
22dec     14 2F 02 F6 | 	mov	local05, local02
22df0     01 2E 66 F0 | 	shl	local05, #1
22df4     F2 2E 02 F1 | 	add	local05, objptr
22df8     14 31 02 F6 | 	mov	local06, local02
22dfc     0C 30 66 F0 | 	shl	local06, #12
22e00     17 31 52 FC | 	wrword	local06, local05
22e04     01 28 06 F1 | 	add	local02, #1
22e08     10 28 56 F2 | 	cmps	local02, #16 wc
22e0c     DC FF 9F CD |  if_b	jmp	#LR__2657
22e10                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
22e10     10 28 06 F6 | 	mov	local02, #16
22e14                 | LR__2658
22e14     14 2F 02 F6 | 	mov	local05, local02
22e18     01 2E 66 F0 | 	shl	local05, #1
22e1c     F2 2E 02 F1 | 	add	local05, objptr
22e20     7F 00 80 FF 
22e24     17 01 5A FC | 	wrword	##65280, local05
22e28     01 28 06 F1 | 	add	local02, #1
22e2c     F0 28 16 F2 | 	cmp	local02, #240 wc
22e30     E0 FF 9F CD |  if_b	jmp	#LR__2658
22e34                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
22e34     F0 28 06 F6 | 	mov	local02, #240
22e38                 | LR__2659
22e38     14 2F 02 F6 | 	mov	local05, local02
22e3c     01 2E 66 F0 | 	shl	local05, #1
22e40     F2 2E 02 F1 | 	add	local05, objptr
22e44     FF 2A 06 F6 | 	mov	local03, #255
22e48     14 2B 82 F1 | 	sub	local03, local02
22e4c     0C 2A 66 F0 | 	shl	local03, #12
22e50     17 2B 52 FC | 	wrword	local03, local05
22e54     01 28 06 F1 | 	add	local02, #1
22e58     00 29 16 F2 | 	cmp	local02, #256 wc
22e5c     D8 FF 9F CD |  if_b	jmp	#LR__2659
22e60                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
22e60     00 28 06 F6 | 	mov	local02, #0
22e64     01 00 00 FF 
22e68     00 E4 05 F1 | 	add	objptr, ##512
22e6c                 | LR__2660
22e6c     14 2F 02 F6 | 	mov	local05, local02
22e70     01 2E 66 F0 | 	shl	local05, #1
22e74     F2 2E 02 F1 | 	add	local05, objptr
22e78     14 31 02 F6 | 	mov	local06, local02
22e7c     08 30 66 F0 | 	shl	local06, #8
22e80     17 31 52 FC | 	wrword	local06, local05
22e84     01 28 06 F1 | 	add	local02, #1
22e88     00 29 56 F2 | 	cmps	local02, #256 wc
22e8c     DC FF 9F CD |  if_b	jmp	#LR__2660
22e90                 | LR__2661
22e90     FE E5 05 F1 | 	add	objptr, #510
22e94     F2 00 58 FC | 	wrword	#0, objptr
22e98                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
22e98     00 28 06 F6 | 	mov	local02, #0
22e9c     02 E4 05 F1 | 	add	objptr, #2
22ea0     97 6A 48 FB | 	callpa	#(@LR__2666-@LR__2662)>>2,fcache_load_ptr_
22ea4                 | LR__2662
22ea4     14 2F 02 F6 | 	mov	local05, local02
22ea8     01 2E 66 F0 | 	shl	local05, #1
22eac     F2 2E 02 F1 | 	add	local05, objptr
22eb0     14 31 02 F6 | 	mov	local06, local02
22eb4     04 30 66 F0 | 	shl	local06, #4
22eb8     14 31 02 F1 | 	add	local06, local02
22ebc     04 30 66 F0 | 	shl	local06, #4
22ec0     17 31 52 FC | 	wrword	local06, local05
22ec4     01 28 06 F1 | 	add	local02, #1
22ec8     F0 28 56 F2 | 	cmps	local02, #240 wc
22ecc     D4 FF 9F CD |  if_b	jmp	#LR__2662
22ed0     F0 28 06 F6 | 	mov	local02, #240
22ed4                 | LR__2663
22ed4     14 2F 02 F6 | 	mov	local05, local02
22ed8     01 2E 66 F0 | 	shl	local05, #1
22edc     F2 2E 02 F1 | 	add	local05, objptr
22ee0     FF 2A 06 F6 | 	mov	local03, #255
22ee4     14 2B 82 F1 | 	sub	local03, local02
22ee8     0C 2A 66 F0 | 	shl	local03, #12
22eec     17 2B 52 FC | 	wrword	local03, local05
22ef0     01 28 06 F1 | 	add	local02, #1
22ef4     00 29 16 F2 | 	cmp	local02, #256 wc
22ef8     D8 FF 9F CD |  if_b	jmp	#LR__2663
22efc                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
22efc     00 28 06 F6 | 	mov	local02, #0
22f00     01 00 00 FF 
22f04     00 E4 05 F1 | 	add	objptr, ##512
22f08                 | LR__2664
22f08     14 2F 02 F6 | 	mov	local05, local02
22f0c     01 2E 66 F0 | 	shl	local05, #1
22f10     F2 2E 02 F1 | 	add	local05, objptr
22f14     14 31 02 F6 | 	mov	local06, local02
22f18     09 30 66 F0 | 	shl	local06, #9
22f1c     17 31 52 FC | 	wrword	local06, local05
22f20     FF 2E 06 F6 | 	mov	local05, #255
22f24     14 2F 82 F1 | 	sub	local05, local02
22f28     01 2E 66 F0 | 	shl	local05, #1
22f2c     F2 2E 02 F1 | 	add	local05, objptr
22f30     14 31 02 F6 | 	mov	local06, local02
22f34     09 30 66 F0 | 	shl	local06, #9
22f38     17 31 52 FC | 	wrword	local06, local05
22f3c     01 28 06 F1 | 	add	local02, #1
22f40     80 28 56 F2 | 	cmps	local02, #128 wc
22f44     C0 FF 9F CD |  if_b	jmp	#LR__2664
22f48                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
22f48     00 28 06 F6 | 	mov	local02, #0
22f4c     01 00 00 FF 
22f50     00 E4 05 F1 | 	add	objptr, ##512
22f54                 | LR__2665
22f54     14 2F 02 F6 | 	mov	local05, local02
22f58     01 2E 66 F0 | 	shl	local05, #1
22f5c     F2 2E 02 F1 | 	add	local05, objptr
22f60     14 31 02 F6 | 	mov	local06, local02
22f64     0D 30 66 F0 | 	shl	local06, #13
22f68     17 31 52 FC | 	wrword	local06, local05
22f6c     01 28 06 F1 | 	add	local02, #1
22f70     08 28 56 F2 | 	cmps	local02, #8 wc
22f74     DC FF 9F CD |  if_b	jmp	#LR__2665
22f78                 | LR__2666
22f78                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
22f78     08 28 06 F6 | 	mov	local02, #8
22f7c     97 42 48 FB | 	callpa	#(@LR__2670-@LR__2667)>>2,fcache_load_ptr_
22f80                 | LR__2667
22f80     14 2F 02 F6 | 	mov	local05, local02
22f84     01 2E 66 F0 | 	shl	local05, #1
22f88     F2 2E 02 F1 | 	add	local05, objptr
22f8c     14 27 02 F6 | 	mov	local01, local02
22f90     08 26 86 F1 | 	sub	local01, #8
22f94     0B 26 66 F0 | 	shl	local01, #11
22f98     7F 00 00 FF 
22f9c     00 31 06 F6 | 	mov	local06, ##65280
22fa0     13 31 82 F1 | 	sub	local06, local01
22fa4     17 31 52 FC | 	wrword	local06, local05
22fa8     01 28 06 F1 | 	add	local02, #1
22fac     18 28 16 F2 | 	cmp	local02, #24 wc
22fb0     CC FF 9F CD |  if_b	jmp	#LR__2667
22fb4                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
22fb4     18 28 06 F6 | 	mov	local02, #24
22fb8                 | LR__2668
22fb8     14 2F 02 F6 | 	mov	local05, local02
22fbc     01 2E 66 F0 | 	shl	local05, #1
22fc0     F2 2E 02 F1 | 	add	local05, objptr
22fc4     40 00 80 FF 
22fc8     17 01 58 FC | 	wrword	##32768, local05
22fcc     01 28 06 F1 | 	add	local02, #1
22fd0     81 28 16 F2 | 	cmp	local02, #129 wc
22fd4     E0 FF 9F CD |  if_b	jmp	#LR__2668
22fd8                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
22fd8     81 28 06 F6 | 	mov	local02, #129
22fdc                 | LR__2669
22fdc     14 2F 02 F6 | 	mov	local05, local02
22fe0     01 2E 66 F0 | 	shl	local05, #1
22fe4     F2 2E 02 F1 | 	add	local05, objptr
22fe8     FF 2A 06 F6 | 	mov	local03, #255
22fec     14 2B 82 F1 | 	sub	local03, local02
22ff0     08 2A 66 F0 | 	shl	local03, #8
22ff4     17 2B 52 FC | 	wrword	local03, local05
22ff8     01 28 06 F1 | 	add	local02, #1
22ffc     00 29 16 F2 | 	cmp	local02, #256 wc
23000     D8 FF 9F CD |  if_b	jmp	#LR__2669
23004                 | LR__2670
23004     3E 00 00 FF 
23008     EA E5 05 F1 | 	add	objptr, ##32234
2300c     F2 00 59 FC | 	wrword	#128, objptr
23010     52 00 00 FF 
23014     C2 E4 85 F1 | 	sub	objptr, ##42178
23018                 | ' for i=0 to 7
23018     00 28 06 F6 | 	mov	local02, #0
2301c     97 8E 48 FB | 	callpa	#(@LR__2672-@LR__2671)>>2,fcache_load_ptr_
23020                 | LR__2671
23020     14 2F 02 F6 | 	mov	local05, local02
23024     01 2E 66 F0 | 	shl	local05, #1
23028     14 2F 02 F1 | 	add	local05, local02
2302c     03 2E 66 F0 | 	shl	local05, #3
23030     14 00 00 FF 
23034     38 E5 05 F1 | 	add	objptr, ##10552
23038     F2 2E 02 F1 | 	add	local05, objptr
2303c     00 EE A1 FF 
23040     17 01 68 FC | 	wrlong	##1138491392, local05
23044     14 2F 02 F6 | 	mov	local05, local02
23048     01 2E 66 F0 | 	shl	local05, #1
2304c     14 2F 02 F1 | 	add	local05, local02
23050     03 2E 66 F0 | 	shl	local05, #3
23054     F2 2E 02 F1 | 	add	local05, objptr
23058     04 2E 06 F1 | 	add	local05, #4
2305c     17 29 42 FC | 	wrbyte	local02, local05
23060     14 2F 02 F6 | 	mov	local05, local02
23064     01 2E 66 F0 | 	shl	local05, #1
23068     14 2F 02 F1 | 	add	local05, local02
2306c     03 2E 66 F0 | 	shl	local05, #3
23070     F2 2E 02 F1 | 	add	local05, objptr
23074     05 2E 06 F1 | 	add	local05, #5
23078     17 29 42 FC | 	wrbyte	local02, local05
2307c     14 2F 02 F6 | 	mov	local05, local02
23080     01 2E 66 F0 | 	shl	local05, #1
23084     14 2F 02 F1 | 	add	local05, local02
23088     03 2E 66 F0 | 	shl	local05, #3
2308c     F2 2E 02 F1 | 	add	local05, objptr
23090     06 2E 06 F1 | 	add	local05, #6
23094     17 01 58 FC | 	wrword	#0, local05
23098     14 2F 02 F6 | 	mov	local05, local02
2309c     01 2E 66 F0 | 	shl	local05, #1
230a0     14 2F 02 F1 | 	add	local05, local02
230a4     03 2E 66 F0 | 	shl	local05, #3
230a8     F2 2E 02 F1 | 	add	local05, objptr
230ac     08 2E 06 F1 | 	add	local05, #8
230b0     00 C0 9F FF 
230b4     17 01 68 FC | 	wrlong	##1065353216, local05
230b8     14 2F 02 F6 | 	mov	local05, local02
230bc     01 2E 66 F0 | 	shl	local05, #1
230c0     14 2F 02 F1 | 	add	local05, local02
230c4     03 2E 66 F0 | 	shl	local05, #3
230c8     F2 2E 02 F1 | 	add	local05, objptr
230cc     0C 2E 06 F1 | 	add	local05, #12
230d0     00 40 A0 FF 
230d4     17 01 68 FC | 	wrlong	##1082130432, local05
230d8     14 2F 02 F6 | 	mov	local05, local02
230dc     01 2E 66 F0 | 	shl	local05, #1
230e0     14 2F 02 F1 | 	add	local05, local02
230e4     03 2E 66 F0 | 	shl	local05, #3
230e8     F2 2E 02 F1 | 	add	local05, objptr
230ec     10 2E 06 F1 | 	add	local05, #16
230f0     17 01 68 FC | 	wrlong	#0, local05
230f4     14 2F 02 F6 | 	mov	local05, local02
230f8     01 2E 66 F0 | 	shl	local05, #1
230fc     14 2F 02 F1 | 	add	local05, local02
23100     03 2E 66 F0 | 	shl	local05, #3
23104     F2 2E 02 F1 | 	add	local05, objptr
23108     14 2E 06 F1 | 	add	local05, #20
2310c     17 FF 59 FC | 	wrword	#255, local05
23110     14 2F 02 F6 | 	mov	local05, local02
23114     01 2E 66 F0 | 	shl	local05, #1
23118     3D 00 00 FF 
2311c     7C E5 05 F1 | 	add	objptr, ##31612
23120     F2 2E 02 F1 | 	add	local05, objptr
23124     17 FF 59 FC | 	wrword	#255, local05
23128     01 28 06 F1 | 	add	local02, #1
2312c     08 28 56 F2 | 	cmps	local02, #8 wc
23130     52 00 00 FF 
23134     B4 E4 85 F1 | 	sub	objptr, ##42164
23138     E4 FE 9F CD |  if_b	jmp	#LR__2671
2313c                 | LR__2672
2313c     00 6E 20 FF 
23140     00 30 06 F6 | 	mov	local06, ##1088159744
23144                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
23144     03 2E 06 F6 | 	mov	local05, #3
23148                 | LR__2673
23148     18 13 02 F6 | 	mov	arg01, local06
2314c     CE C3 1F FF 
23150     7D 14 06 F6 | 	mov	arg02, ##1065852029
23154     8C 6D B0 FD | 	call	#__system___float_mul
23158     FD 30 02 F6 | 	mov	local06, result1
2315c     FA 2F 6E FB | 	djnz	local05, #LR__2673
23160     00 28 06 F6 | 	mov	local02, #0
23164                 | LR__2674
23164     14 2D 02 F6 | 	mov	local04, local02
23168     02 2C 66 F0 | 	shl	local04, #2
2316c     14 00 00 FF 
23170     D8 E4 05 F1 | 	add	objptr, ##10456
23174     F2 2C 02 F1 | 	add	local04, objptr
23178     16 31 62 FC | 	wrlong	local06, local04
2317c     18 13 02 F6 | 	mov	arg01, local06
23180     CE C3 1F FF 
23184     7D 14 06 F6 | 	mov	arg02, ##1065852029
23188     14 00 00 FF 
2318c     D8 E4 85 F1 | 	sub	objptr, ##10456
23190     50 6D B0 FD | 	call	#__system___float_mul
23194     FD 30 02 F6 | 	mov	local06, result1
23198     01 28 06 F1 | 	add	local02, #1
2319c     0C 28 56 F2 | 	cmps	local02, #12 wc
231a0     C0 FF 9F CD |  if_b	jmp	#LR__2674
231a4     14 00 00 FF 
231a8     08 E5 05 F1 | 	add	objptr, ##10504
231ac     F2 50 6B FC | 	wrlong	#424, objptr
231b0     04 E4 05 F1 | 	add	objptr, #4
231b4     F2 20 6B FC | 	wrlong	#400, objptr
231b8     04 E4 05 F1 | 	add	objptr, #4
231bc     F2 F2 6A FC | 	wrlong	#377, objptr
231c0     04 E4 05 F1 | 	add	objptr, #4
231c4     F2 C8 6A FC | 	wrlong	#356, objptr
231c8     04 E4 05 F1 | 	add	objptr, #4
231cc     F2 A0 6A FC | 	wrlong	#336, objptr
231d0     04 E4 05 F1 | 	add	objptr, #4
231d4     F2 7A 6A FC | 	wrlong	#317, objptr
231d8     04 E4 05 F1 | 	add	objptr, #4
231dc     F2 58 6A FC | 	wrlong	#300, objptr
231e0     04 E4 05 F1 | 	add	objptr, #4
231e4     F2 36 6A FC | 	wrlong	#283, objptr
231e8     04 E4 05 F1 | 	add	objptr, #4
231ec     F2 16 6A FC | 	wrlong	#267, objptr
231f0     04 E4 05 F1 | 	add	objptr, #4
231f4     F2 F8 69 FC | 	wrlong	#252, objptr
231f8     04 E4 05 F1 | 	add	objptr, #4
231fc     F2 DC 69 FC | 	wrlong	#238, objptr
23200     04 E4 05 F1 | 	add	objptr, #4
23204     F2 C0 69 FC | 	wrlong	#224, objptr
23208     3D 00 00 FF 
2320c     8E E5 05 F1 | 	add	objptr, ##31630
23210     F2 00 59 FC | 	wrword	#128, objptr
23214     02 E4 85 F1 | 	sub	objptr, #2
23218     F2 00 59 FC | 	wrword	#128, objptr
2321c     52 00 00 FF 
23220     C0 E4 85 F1 | 	sub	objptr, ##42176
23224     A7 F0 03 F6 | 	mov	ptra, fp
23228     B2 00 A0 FD | 	call	#popregs_
2322c                 | _init_audio_ret
2322c     2D 00 64 FD | 	ret
23230                 | 
23230                 | ' 
23230                 | ' '------------------- Error messages
23230                 | ' 
23230                 | ' sub init_error_strings
23230                 | _init_error_strings
23230     BB 01 00 FF 
23234     AB 01 06 F6 | 	mov	_var01, ##@LR__6042
23238     45 00 00 FF 
2323c     7C E4 05 F1 | 	add	objptr, ##35452
23240     F2 00 62 FC | 	wrlong	_var01, objptr
23244     BB 01 00 FF 
23248     AC 01 06 F6 | 	mov	_var01, ##@LR__6043
2324c     04 E4 05 F1 | 	add	objptr, #4
23250     F2 00 62 FC | 	wrlong	_var01, objptr
23254     BB 01 00 FF 
23258     D0 01 06 F6 | 	mov	_var01, ##@LR__6044
2325c     04 E4 05 F1 | 	add	objptr, #4
23260     F2 00 62 FC | 	wrlong	_var01, objptr
23264     BB 01 00 FF 
23268     F0 01 06 F6 | 	mov	_var01, ##@LR__6045
2326c     04 E4 05 F1 | 	add	objptr, #4
23270     F2 00 62 FC | 	wrlong	_var01, objptr
23274     BC 01 00 FF 
23278     09 00 06 F6 | 	mov	_var01, ##@LR__6046
2327c     04 E4 05 F1 | 	add	objptr, #4
23280     F2 00 62 FC | 	wrlong	_var01, objptr
23284     BC 01 00 FF 
23288     24 00 06 F6 | 	mov	_var01, ##@LR__6047
2328c     04 E4 05 F1 | 	add	objptr, #4
23290     F2 00 62 FC | 	wrlong	_var01, objptr
23294     BC 01 00 FF 
23298     45 00 06 F6 | 	mov	_var01, ##@LR__6048
2329c     04 E4 05 F1 | 	add	objptr, #4
232a0     F2 00 62 FC | 	wrlong	_var01, objptr
232a4     BC 01 00 FF 
232a8     72 00 06 F6 | 	mov	_var01, ##@LR__6049
232ac     04 E4 05 F1 | 	add	objptr, #4
232b0     F2 00 62 FC | 	wrlong	_var01, objptr
232b4     BC 01 00 FF 
232b8     9C 00 06 F6 | 	mov	_var01, ##@LR__6050
232bc     04 E4 05 F1 | 	add	objptr, #4
232c0     F2 00 62 FC | 	wrlong	_var01, objptr
232c4     BC 01 00 FF 
232c8     B4 00 06 F6 | 	mov	_var01, ##@LR__6051
232cc     04 E4 05 F1 | 	add	objptr, #4
232d0     F2 00 62 FC | 	wrlong	_var01, objptr
232d4     BC 01 00 FF 
232d8     D4 00 06 F6 | 	mov	_var01, ##@LR__6052
232dc     04 E4 05 F1 | 	add	objptr, #4
232e0     F2 00 62 FC | 	wrlong	_var01, objptr
232e4     BC 01 00 FF 
232e8     EA 00 06 F6 | 	mov	_var01, ##@LR__6053
232ec     04 E4 05 F1 | 	add	objptr, #4
232f0     F2 00 62 FC | 	wrlong	_var01, objptr
232f4     BC 01 00 FF 
232f8     07 01 06 F6 | 	mov	_var01, ##@LR__6054
232fc     04 E4 05 F1 | 	add	objptr, #4
23300     F2 00 62 FC | 	wrlong	_var01, objptr
23304     BC 01 00 FF 
23308     2A 01 06 F6 | 	mov	_var01, ##@LR__6055
2330c     04 E4 05 F1 | 	add	objptr, #4
23310     F2 00 62 FC | 	wrlong	_var01, objptr
23314     BC 01 00 FF 
23318     50 01 06 F6 | 	mov	_var01, ##@LR__6056
2331c     04 E4 05 F1 | 	add	objptr, #4
23320     F2 00 62 FC | 	wrlong	_var01, objptr
23324     BC 01 00 FF 
23328     6B 01 06 F6 | 	mov	_var01, ##@LR__6057
2332c     04 E4 05 F1 | 	add	objptr, #4
23330     F2 00 62 FC | 	wrlong	_var01, objptr
23334     BC 01 00 FF 
23338     7B 01 06 F6 | 	mov	_var01, ##@LR__6058
2333c     04 E4 05 F1 | 	add	objptr, #4
23340     F2 00 62 FC | 	wrlong	_var01, objptr
23344     BC 01 00 FF 
23348     8A 01 06 F6 | 	mov	_var01, ##@LR__6059
2334c     04 E4 05 F1 | 	add	objptr, #4
23350     F2 00 62 FC | 	wrlong	_var01, objptr
23354     BC 01 00 FF 
23358     A4 01 06 F6 | 	mov	_var01, ##@LR__6060
2335c     04 E4 05 F1 | 	add	objptr, #4
23360     F2 00 62 FC | 	wrlong	_var01, objptr
23364     BC 01 00 FF 
23368     B5 01 06 F6 | 	mov	_var01, ##@LR__6061
2336c     04 E4 05 F1 | 	add	objptr, #4
23370     F2 00 62 FC | 	wrlong	_var01, objptr
23374     BC 01 00 FF 
23378     CC 01 06 F6 | 	mov	_var01, ##@LR__6062
2337c     04 E4 05 F1 | 	add	objptr, #4
23380     F2 00 62 FC | 	wrlong	_var01, objptr
23384     BC 01 00 FF 
23388     DF 01 06 F6 | 	mov	_var01, ##@LR__6063
2338c     04 E4 05 F1 | 	add	objptr, #4
23390     F2 00 62 FC | 	wrlong	_var01, objptr
23394     BC 01 00 FF 
23398     EE 01 06 F6 | 	mov	_var01, ##@LR__6064
2339c     04 E4 05 F1 | 	add	objptr, #4
233a0     F2 00 62 FC | 	wrlong	_var01, objptr
233a4     BD 01 00 FF 
233a8     0A 00 06 F6 | 	mov	_var01, ##@LR__6065
233ac     04 E4 05 F1 | 	add	objptr, #4
233b0     F2 00 62 FC | 	wrlong	_var01, objptr
233b4     BD 01 00 FF 
233b8     1A 00 06 F6 | 	mov	_var01, ##@LR__6066
233bc     04 E4 05 F1 | 	add	objptr, #4
233c0     F2 00 62 FC | 	wrlong	_var01, objptr
233c4     BD 01 00 FF 
233c8     2A 00 06 F6 | 	mov	_var01, ##@LR__6067
233cc     04 E4 05 F1 | 	add	objptr, #4
233d0     F2 00 62 FC | 	wrlong	_var01, objptr
233d4     BD 01 00 FF 
233d8     5D 00 06 F6 | 	mov	_var01, ##@LR__6068
233dc     04 E4 05 F1 | 	add	objptr, #4
233e0     F2 00 62 FC | 	wrlong	_var01, objptr
233e4     BD 01 00 FF 
233e8     78 00 06 F6 | 	mov	_var01, ##@LR__6069
233ec     04 E4 05 F1 | 	add	objptr, #4
233f0     F2 00 62 FC | 	wrlong	_var01, objptr
233f4     BD 01 00 FF 
233f8     8D 00 06 F6 | 	mov	_var01, ##@LR__6070
233fc     04 E4 05 F1 | 	add	objptr, #4
23400     F2 00 62 FC | 	wrlong	_var01, objptr
23404     BD 01 00 FF 
23408     99 00 06 F6 | 	mov	_var01, ##@LR__6071
2340c     04 E4 05 F1 | 	add	objptr, #4
23410     F2 00 62 FC | 	wrlong	_var01, objptr
23414     BD 01 00 FF 
23418     AA 00 06 F6 | 	mov	_var01, ##@LR__6072
2341c     04 E4 05 F1 | 	add	objptr, #4
23420     F2 00 62 FC | 	wrlong	_var01, objptr
23424     BD 01 00 FF 
23428     BA 00 06 F6 | 	mov	_var01, ##@LR__6073
2342c     04 E4 05 F1 | 	add	objptr, #4
23430     F2 00 62 FC | 	wrlong	_var01, objptr
23434     BD 01 00 FF 
23438     D5 00 06 F6 | 	mov	_var01, ##@LR__6074
2343c     04 E4 05 F1 | 	add	objptr, #4
23440     F2 00 62 FC | 	wrlong	_var01, objptr
23444     BD 01 00 FF 
23448     E5 00 06 F6 | 	mov	_var01, ##@LR__6075
2344c     04 E4 05 F1 | 	add	objptr, #4
23450     F2 00 62 FC | 	wrlong	_var01, objptr
23454     BD 01 00 FF 
23458     F3 00 06 F6 | 	mov	_var01, ##@LR__6076
2345c     04 E4 05 F1 | 	add	objptr, #4
23460     F2 00 62 FC | 	wrlong	_var01, objptr
23464     BD 01 00 FF 
23468     0D 01 06 F6 | 	mov	_var01, ##@LR__6077
2346c     04 E4 05 F1 | 	add	objptr, #4
23470     F2 00 62 FC | 	wrlong	_var01, objptr
23474     BD 01 00 FF 
23478     40 01 06 F6 | 	mov	_var01, ##@LR__6078
2347c     04 E4 05 F1 | 	add	objptr, #4
23480     F2 00 62 FC | 	wrlong	_var01, objptr
23484     BD 01 00 FF 
23488     58 01 06 F6 | 	mov	_var01, ##@LR__6079
2348c     04 E4 05 F1 | 	add	objptr, #4
23490     F2 00 62 FC | 	wrlong	_var01, objptr
23494     BD 01 00 FF 
23498     73 01 06 F6 | 	mov	_var01, ##@LR__6080
2349c     04 E4 05 F1 | 	add	objptr, #4
234a0     F2 00 62 FC | 	wrlong	_var01, objptr
234a4     BD 01 00 FF 
234a8     90 01 06 F6 | 	mov	_var01, ##@LR__6081
234ac     04 E4 05 F1 | 	add	objptr, #4
234b0     F2 00 62 FC | 	wrlong	_var01, objptr
234b4     BD 01 00 FF 
234b8     A9 01 06 F6 | 	mov	_var01, ##@LR__6082
234bc     04 E4 05 F1 | 	add	objptr, #4
234c0     F2 00 62 FC | 	wrlong	_var01, objptr
234c4     BD 01 00 FF 
234c8     C8 01 06 F6 | 	mov	_var01, ##@LR__6083
234cc     04 E4 05 F1 | 	add	objptr, #4
234d0     F2 00 62 FC | 	wrlong	_var01, objptr
234d4     BD 01 00 FF 
234d8     D6 01 06 F6 | 	mov	_var01, ##@LR__6084
234dc     04 E4 05 F1 | 	add	objptr, #4
234e0     F2 00 62 FC | 	wrlong	_var01, objptr
234e4     BE 01 00 FF 
234e8     03 00 06 F6 | 	mov	_var01, ##@LR__6085
234ec     04 E4 05 F1 | 	add	objptr, #4
234f0     F2 00 62 FC | 	wrlong	_var01, objptr
234f4     BE 01 00 FF 
234f8     10 00 06 F6 | 	mov	_var01, ##@LR__6086
234fc     04 E4 05 F1 | 	add	objptr, #4
23500     F2 00 62 FC | 	wrlong	_var01, objptr
23504     BE 01 00 FF 
23508     24 00 06 F6 | 	mov	_var01, ##@LR__6087
2350c     04 E4 05 F1 | 	add	objptr, #4
23510     F2 00 62 FC | 	wrlong	_var01, objptr
23514     BE 01 00 FF 
23518     48 00 06 F6 | 	mov	_var01, ##@LR__6088
2351c     04 E4 05 F1 | 	add	objptr, #4
23520     F2 00 62 FC | 	wrlong	_var01, objptr
23524     BE 01 00 FF 
23528     5F 00 06 F6 | 	mov	_var01, ##@LR__6089
2352c     04 E4 05 F1 | 	add	objptr, #4
23530     F2 00 62 FC | 	wrlong	_var01, objptr
23534     BE 01 00 FF 
23538     72 00 06 F6 | 	mov	_var01, ##@LR__6090
2353c     04 E4 05 F1 | 	add	objptr, #4
23540     F2 00 62 FC | 	wrlong	_var01, objptr
23544     BE 01 00 FF 
23548     89 00 06 F6 | 	mov	_var01, ##@LR__6091
2354c     04 E4 05 F1 | 	add	objptr, #4
23550     F2 00 62 FC | 	wrlong	_var01, objptr
23554     BE 01 00 FF 
23558     A2 00 06 F6 | 	mov	_var01, ##@LR__6092
2355c     04 E4 05 F1 | 	add	objptr, #4
23560     F2 00 62 FC | 	wrlong	_var01, objptr
23564     BE 01 00 FF 
23568     C4 00 06 F6 | 	mov	_var01, ##@LR__6093
2356c     04 E4 05 F1 | 	add	objptr, #4
23570     F2 00 62 FC | 	wrlong	_var01, objptr
23574     BE 01 00 FF 
23578     D7 00 06 F6 | 	mov	_var01, ##@LR__6094
2357c     04 E4 05 F1 | 	add	objptr, #4
23580     F2 00 62 FC | 	wrlong	_var01, objptr
23584     BE 01 00 FF 
23588     E7 00 06 F6 | 	mov	_var01, ##@LR__6095
2358c     04 E4 05 F1 | 	add	objptr, #4
23590     F2 00 62 FC | 	wrlong	_var01, objptr
23594     BE 01 00 FF 
23598     FF 00 06 F6 | 	mov	_var01, ##@LR__6096
2359c     04 E4 05 F1 | 	add	objptr, #4
235a0     F2 00 62 FC | 	wrlong	_var01, objptr
235a4     BE 01 00 FF 
235a8     16 01 06 F6 | 	mov	_var01, ##@LR__6097
235ac     04 E4 05 F1 | 	add	objptr, #4
235b0     F2 00 62 FC | 	wrlong	_var01, objptr
235b4     45 00 00 FF 
235b8     58 E5 85 F1 | 	sub	objptr, ##35672
235bc                 | _init_error_strings_ret
235bc     2D 00 64 FD | 	ret
235c0                 | 
235c0                 | '         
235c0                 | ' sub printerror(err as integer, linenum=0 as integer)
235c0                 | _printerror
235c0     02 4A 05 F6 | 	mov	COUNT_, #2
235c4     A8 00 A0 FD | 	call	#pushregs_
235c8     09 27 02 F6 | 	mov	local01, arg01
235cc     0A 29 02 F6 | 	mov	local02, arg02
235d0     BE 01 00 FF 
235d4     23 13 06 F6 | 	mov	arg01, ##@LR__6098
235d8     5C 21 B0 FD | 	call	#_hg010b_spin2_write
235dc     13 13 02 F6 | 	mov	arg01, local01
235e0     F8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
235e4     FD 12 02 F6 | 	mov	arg01, result1
235e8     4C 21 B0 FD | 	call	#_hg010b_spin2_write
235ec     BE 01 00 FF 
235f0     2A 13 06 F6 | 	mov	arg01, ##@LR__6099
235f4     40 21 B0 FD | 	call	#_hg010b_spin2_write
235f8     02 26 66 F0 | 	shl	local01, #2
235fc     45 00 00 FF 
23600     7C E4 05 F1 | 	add	objptr, ##35452
23604     F2 26 02 F1 | 	add	local01, objptr
23608     13 13 02 FB | 	rdlong	arg01, local01
2360c     45 00 00 FF 
23610     7C E4 85 F1 | 	sub	objptr, ##35452
23614     20 21 B0 FD | 	call	#_hg010b_spin2_write
23618                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
23618                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
23618     01 28 56 F2 | 	cmps	local02, #1 wc
2361c     24 00 90 CD |  if_b	jmp	#LR__2680
23620     BE 01 00 FF 
23624     2E 13 06 F6 | 	mov	arg01, ##@LR__6100
23628     0C 21 B0 FD | 	call	#_hg010b_spin2_write
2362c     14 13 02 F6 | 	mov	arg01, local02
23630     A8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
23634     FD 12 02 F6 | 	mov	arg01, result1
23638                 | ' 
23638                 | ' write(text)
23638     FC 20 B0 FD | 	call	#_hg010b_spin2_write
2363c                 | ' crlf
2363c     F8 25 B0 FD | 	call	#_hg010b_spin2_crlf
23640     10 00 90 FD | 	jmp	#LR__2681
23644                 | LR__2680
23644     BE 01 00 FF 
23648     38 13 06 F6 | 	mov	arg01, ##@LR__6101
2364c                 | ' 
2364c                 | ' write(text)
2364c     E8 20 B0 FD | 	call	#_hg010b_spin2_write
23650                 | ' crlf
23650     E4 25 B0 FD | 	call	#_hg010b_spin2_crlf
23654                 | LR__2681
23654     A7 F0 03 F6 | 	mov	ptra, fp
23658     B2 00 A0 FD | 	call	#popregs_
2365c                 | _printerror_ret
2365c     2D 00 64 FD | 	ret
23660                 | 
23660                 | ' 
23660                 | ' '' ------------------------------- Hardware start/stop/initialization 
23660                 | ' 
23660                 | ' sub startpsram
23660                 | _startpsram
23660     00 12 06 F6 | 	mov	arg01, #0
23664     0A 14 C6 F9 | 	decod	arg02, #10
23668     0B 16 06 F6 | 	mov	arg03, #11
2366c     07 18 06 F6 | 	mov	arg04, #7
23670     0B 00 00 FF 
23674     CC E4 05 F1 | 	add	objptr, ##5836
23678     CC 2A B0 FD | 	call	#_psram_spin2_startx
2367c     2B 00 00 FF 
23680     3C E5 05 F1 | 	add	objptr, ##22332
23684     F2 FA 61 FC | 	wrlong	result1, objptr
23688                 | '     return $7FF00 + cog*12
23688     0C E4 05 F1 | 	add	objptr, #12
2368c     FF 03 80 FF 
23690     F2 00 6A FC | 	wrlong	##524032, objptr
23694     37 00 00 FF 
23698     14 E4 85 F1 | 	sub	objptr, ##28180
2369c                 | _startpsram_ret
2369c     2D 00 64 FD | 	ret
236a0                 | 
236a0                 | ' 
236a0                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
236a0                 | _startvideo
236a0     01 4A 05 F6 | 	mov	COUNT_, #1
236a4     A8 00 A0 FD | 	call	#pushregs_
236a8     37 00 00 FF 
236ac     14 E4 05 F1 | 	add	objptr, ##28180
236b0     F2 18 02 FB | 	rdlong	arg04, objptr
236b4     37 00 00 FF 
236b8     14 E4 85 F1 | 	sub	objptr, ##28180
236bc     0A 13 02 F6 | 	mov	arg01, arg02
236c0     0C 15 02 F6 | 	mov	arg02, arg04
236c4     18 08 B0 FD | 	call	#_hg010b_spin2_start
236c8     37 00 00 FF 
236cc     00 E4 05 F1 | 	add	objptr, ##28160
236d0     F2 FA 61 FC | 	wrlong	result1, objptr
236d4                 | ' 
236d4                 | ' videocog=v.start(pin,mbox)
236d4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
236d4     00 26 06 F6 | 	mov	local01, #0
236d8     2B 00 00 FF 
236dc     34 E5 85 F1 | 	sub	objptr, ##22324
236e0                 | LR__2690
236e0     13 13 02 F6 | 	mov	arg01, local01
236e4     00 28 00 FF 
236e8     00 14 06 F6 | 	mov	arg02, ##5242880
236ec     B0 2E B0 FD | 	call	#_psram_spin2_setQos
236f0     01 26 06 F1 | 	add	local01, #1
236f4     08 26 56 F2 | 	cmps	local01, #8 wc
236f8     E4 FF 9F CD |  if_b	jmp	#LR__2690
236fc     2B 00 00 FF 
23700     34 E5 05 F1 | 	add	objptr, ##22324
23704     F2 12 02 FB | 	rdlong	arg01, objptr
23708     7A 00 02 FF 
2370c     00 14 06 F6 | 	mov	arg02, ##67171328
23710     2B 00 00 FF 
23714     34 E5 85 F1 | 	sub	objptr, ##22324
23718     84 2E B0 FD | 	call	#_psram_spin2_setQos
2371c     0B 00 00 FF 
23720     CC E4 85 F1 | 	sub	objptr, ##5836
23724                 | ' psram.setQoS(videocog, $0400f400) 
23724                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
23724     F2 14 02 F6 | 	mov	arg02, objptr
23728     00 30 05 FF 
2372c     00 14 46 F5 | 	or	arg02, ##174063616
23730     00 16 06 F6 | 	mov	arg03, #0
23734     00 18 06 F6 | 	mov	arg04, #0
23738     00 12 06 F6 | 	mov	arg01, #0
2373c     D4 43 B0 FD | 	call	#__system___basic_open
23740                 | ' return videocog
23740     37 00 00 FF 
23744     00 E4 05 F1 | 	add	objptr, ##28160
23748     F2 FA 01 FB | 	rdlong	result1, objptr
2374c     37 00 00 FF 
23750     00 E4 85 F1 | 	sub	objptr, ##28160
23754     A7 F0 03 F6 | 	mov	ptra, fp
23758     B2 00 A0 FD | 	call	#popregs_
2375c                 | _startvideo_ret
2375c     2D 00 64 FD | 	ret
23760                 | 
23760                 | ' 
23760                 | ' 
23760                 | ' 
23760                 | ' '' ------------------------------- Convenient psram peek/poke
23760                 | ' 
23760                 | ' sub pslpoke(addr as ulong,value as ulong)
23760                 | _pslpoke
23760     00 4A 05 F6 | 	mov	COUNT_, #0
23764     A8 00 A0 FD | 	call	#pushregs_
23768     08 F0 07 F1 | 	add	ptra, #8
2376c     A7 12 62 FC | 	wrlong	arg01, fp
23770     04 4E 05 F1 | 	add	fp, #4
23774     A7 14 62 FC | 	wrlong	arg02, fp
23778     A7 12 02 F6 | 	mov	arg01, fp
2377c     04 4E 85 F1 | 	sub	fp, #4
23780     A7 14 02 FB | 	rdlong	arg02, fp
23784     04 16 06 F6 | 	mov	arg03, #4
23788     0B 00 00 FF 
2378c     CC E4 05 F1 | 	add	objptr, ##5836
23790     7C 2C B0 FD | 	call	#_psram_spin2_write
23794     0B 00 00 FF 
23798     CC E4 85 F1 | 	sub	objptr, ##5836
2379c     A7 F0 03 F6 | 	mov	ptra, fp
237a0     B2 00 A0 FD | 	call	#popregs_
237a4                 | _pslpoke_ret
237a4     2D 00 64 FD | 	ret
237a8                 | 
237a8                 | ' 
237a8                 | ' sub psdpoke(addr as ulong,value as ulong)
237a8                 | _psdpoke
237a8     00 4A 05 F6 | 	mov	COUNT_, #0
237ac     A8 00 A0 FD | 	call	#pushregs_
237b0     08 F0 07 F1 | 	add	ptra, #8
237b4     A7 12 62 FC | 	wrlong	arg01, fp
237b8     04 4E 05 F1 | 	add	fp, #4
237bc     A7 14 62 FC | 	wrlong	arg02, fp
237c0     A7 12 02 F6 | 	mov	arg01, fp
237c4     04 4E 85 F1 | 	sub	fp, #4
237c8     A7 14 02 FB | 	rdlong	arg02, fp
237cc     02 16 06 F6 | 	mov	arg03, #2
237d0     0B 00 00 FF 
237d4     CC E4 05 F1 | 	add	objptr, ##5836
237d8     34 2C B0 FD | 	call	#_psram_spin2_write
237dc     0B 00 00 FF 
237e0     CC E4 85 F1 | 	sub	objptr, ##5836
237e4     A7 F0 03 F6 | 	mov	ptra, fp
237e8     B2 00 A0 FD | 	call	#popregs_
237ec                 | _psdpoke_ret
237ec     2D 00 64 FD | 	ret
237f0                 | 
237f0                 | ' 
237f0                 | ' sub pspoke(addr as ulong,value as ulong)
237f0                 | _pspoke
237f0     00 4A 05 F6 | 	mov	COUNT_, #0
237f4     A8 00 A0 FD | 	call	#pushregs_
237f8     08 F0 07 F1 | 	add	ptra, #8
237fc     A7 12 62 FC | 	wrlong	arg01, fp
23800     04 4E 05 F1 | 	add	fp, #4
23804     A7 14 62 FC | 	wrlong	arg02, fp
23808     A7 12 02 F6 | 	mov	arg01, fp
2380c     04 4E 85 F1 | 	sub	fp, #4
23810     A7 14 02 FB | 	rdlong	arg02, fp
23814     01 16 06 F6 | 	mov	arg03, #1
23818     0B 00 00 FF 
2381c     CC E4 05 F1 | 	add	objptr, ##5836
23820     EC 2B B0 FD | 	call	#_psram_spin2_write
23824     0B 00 00 FF 
23828     CC E4 85 F1 | 	sub	objptr, ##5836
2382c     A7 F0 03 F6 | 	mov	ptra, fp
23830     B2 00 A0 FD | 	call	#popregs_
23834                 | _pspoke_ret
23834     2D 00 64 FD | 	ret
23838                 | 
23838                 | ' 
23838                 | ' function pspeek(adr as ulong) as ubyte
23838                 | _pspeek
23838     00 4A 05 F6 | 	mov	COUNT_, #0
2383c     A8 00 A0 FD | 	call	#pushregs_
23840     0C F0 07 F1 | 	add	ptra, #12
23844     04 4E 05 F1 | 	add	fp, #4
23848     A7 12 62 FC | 	wrlong	arg01, fp
2384c     04 4E 05 F1 | 	add	fp, #4
23850     A7 12 02 F6 | 	mov	arg01, fp
23854     04 4E 85 F1 | 	sub	fp, #4
23858     A7 14 02 FB | 	rdlong	arg02, fp
2385c     04 4E 85 F1 | 	sub	fp, #4
23860     01 16 06 F6 | 	mov	arg03, #1
23864     0B 00 00 FF 
23868     CC E4 05 F1 | 	add	objptr, ##5836
2386c     04 2B B0 FD | 	call	#_psram_spin2_read1
23870     0B 00 00 FF 
23874     CC E4 85 F1 | 	sub	objptr, ##5836
23878                 | ' psram.read1(varptr(res),adr,1)
23878                 | ' return res
23878     08 4E 05 F1 | 	add	fp, #8
2387c     A7 FA C1 FA | 	rdbyte	result1, fp
23880     08 4E 85 F1 | 	sub	fp, #8
23884     A7 F0 03 F6 | 	mov	ptra, fp
23888     B2 00 A0 FD | 	call	#popregs_
2388c                 | _pspeek_ret
2388c     2D 00 64 FD | 	ret
23890                 | 
23890                 | ' 
23890                 | ' function pslpeek(adr as ulong) as ulong
23890                 | _pslpeek
23890     00 4A 05 F6 | 	mov	COUNT_, #0
23894     A8 00 A0 FD | 	call	#pushregs_
23898     0C F0 07 F1 | 	add	ptra, #12
2389c     04 4E 05 F1 | 	add	fp, #4
238a0     A7 12 62 FC | 	wrlong	arg01, fp
238a4     04 4E 05 F1 | 	add	fp, #4
238a8     A7 12 02 F6 | 	mov	arg01, fp
238ac     04 4E 85 F1 | 	sub	fp, #4
238b0     A7 14 02 FB | 	rdlong	arg02, fp
238b4     04 4E 85 F1 | 	sub	fp, #4
238b8     04 16 06 F6 | 	mov	arg03, #4
238bc     0B 00 00 FF 
238c0     CC E4 05 F1 | 	add	objptr, ##5836
238c4     AC 2A B0 FD | 	call	#_psram_spin2_read1
238c8     0B 00 00 FF 
238cc     CC E4 85 F1 | 	sub	objptr, ##5836
238d0                 | ' psram.read1(varptr(res),adr,4)
238d0                 | ' return res
238d0     08 4E 05 F1 | 	add	fp, #8
238d4     A7 FA 01 FB | 	rdlong	result1, fp
238d8     08 4E 85 F1 | 	sub	fp, #8
238dc     A7 F0 03 F6 | 	mov	ptra, fp
238e0     B2 00 A0 FD | 	call	#popregs_
238e4                 | _pslpeek_ret
238e4     2D 00 64 FD | 	ret
238e8                 | 
238e8                 | ' 
238e8                 | ' function psdpeek(adr as ulong) as ulong
238e8                 | _psdpeek
238e8     00 4A 05 F6 | 	mov	COUNT_, #0
238ec     A8 00 A0 FD | 	call	#pushregs_
238f0     0C F0 07 F1 | 	add	ptra, #12
238f4     04 4E 05 F1 | 	add	fp, #4
238f8     A7 12 62 FC | 	wrlong	arg01, fp
238fc     04 4E 05 F1 | 	add	fp, #4
23900     A7 12 02 F6 | 	mov	arg01, fp
23904     04 4E 85 F1 | 	sub	fp, #4
23908     A7 14 02 FB | 	rdlong	arg02, fp
2390c     04 4E 85 F1 | 	sub	fp, #4
23910     02 16 06 F6 | 	mov	arg03, #2
23914     0B 00 00 FF 
23918     CC E4 05 F1 | 	add	objptr, ##5836
2391c     54 2A B0 FD | 	call	#_psram_spin2_read1
23920     0B 00 00 FF 
23924     CC E4 85 F1 | 	sub	objptr, ##5836
23928                 | ' psram.read1(varptr(res),adr,2)
23928                 | ' return res
23928     08 4E 05 F1 | 	add	fp, #8
2392c     A7 FA E1 FA | 	rdword	result1, fp
23930     08 4E 85 F1 | 	sub	fp, #8
23934     A7 F0 03 F6 | 	mov	ptra, fp
23938     B2 00 A0 FD | 	call	#popregs_
2393c                 | _psdpeek_ret
2393c     2D 00 64 FD | 	ret
23940                 | 
23940                 | ' 
23940                 | ' '' ------------------------------- USB keyboard scan to char translator
23940                 | ' 
23940                 | ' function scantochar(key)
23940                 | _scantochar
23940                 | ' 
23940                 | ' select case (key shr 8) and 255
23940     09 01 02 F6 | 	mov	_var01, arg01
23944     08 00 C6 F0 | 	sar	_var01, #8
23948     FF 00 0E F5 | 	and	_var01, #255 wz
2394c     24 00 90 AD |  if_e	jmp	#LR__2700
23950     02 00 0E F2 | 	cmp	_var01, #2 wz
23954     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
23958     30 00 90 AD |  if_e	jmp	#LR__2701
2395c     40 00 0E F2 | 	cmp	_var01, #64 wz
23960     44 00 90 AD |  if_e	jmp	#LR__2702
23964     42 00 0E F2 | 	cmp	_var01, #66 wz
23968     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
2396c     70 00 90 5D |  if_ne	jmp	#LR__2704
23970     50 00 90 FD | 	jmp	#LR__2703
23974                 | LR__2700
23974     09 FB 01 F6 | 	mov	result1, arg01
23978     7F FA 05 F5 | 	and	result1, #127
2397c     02 FA 65 F0 | 	shl	result1, #2
23980     F5 FA 01 F1 | 	add	result1, ptr__dat__
23984     FD FA C1 FA | 	rdbyte	result1, result1
23988     54 00 90 FD | 	jmp	#_scantochar_ret
2398c                 | LR__2701
2398c     09 FB 01 F6 | 	mov	result1, arg01
23990     7F FA 05 F5 | 	and	result1, #127
23994     02 FA 65 F0 | 	shl	result1, #2
23998     01 FA 05 F1 | 	add	result1, #1
2399c     F5 FA 01 F1 | 	add	result1, ptr__dat__
239a0     FD FA C1 FA | 	rdbyte	result1, result1
239a4     38 00 90 FD | 	jmp	#_scantochar_ret
239a8                 | LR__2702
239a8     09 FB 01 F6 | 	mov	result1, arg01
239ac     7F FA 05 F5 | 	and	result1, #127
239b0     02 FA 65 F0 | 	shl	result1, #2
239b4     02 FA 05 F1 | 	add	result1, #2
239b8     F5 FA 01 F1 | 	add	result1, ptr__dat__
239bc     FD FA C1 FA | 	rdbyte	result1, result1
239c0     1C 00 90 FD | 	jmp	#_scantochar_ret
239c4                 | LR__2703
239c4     09 FB 01 F6 | 	mov	result1, arg01
239c8     7F FA 05 F5 | 	and	result1, #127
239cc     02 FA 65 F0 | 	shl	result1, #2
239d0     03 FA 05 F1 | 	add	result1, #3
239d4     F5 FA 01 F1 | 	add	result1, ptr__dat__
239d8     FD FA C1 FA | 	rdbyte	result1, result1
239dc     00 00 90 FD | 	jmp	#_scantochar_ret
239e0                 | LR__2704
239e0                 | _scantochar_ret
239e0     2D 00 64 FD | 	ret
239e4                 | 
239e4                 | _program
239e4     01 4A 05 F6 | 	mov	COUNT_, #1
239e8     A8 00 A0 FD | 	call	#pushregs_
239ec     70 FC BF FD | 	call	#_startpsram
239f0     40 12 06 F6 | 	mov	arg01, #64
239f4     00 14 06 F6 | 	mov	arg02, #0
239f8     00 16 06 F6 | 	mov	arg03, #0
239fc     A0 FC BF FD | 	call	#_startvideo
23a00     37 00 00 FF 
23a04     14 E4 05 F1 | 	add	objptr, ##28180
23a08     F2 12 02 FB | 	rdlong	arg01, objptr
23a0c     00 14 06 F6 | 	mov	arg02, #0
23a10     FB 03 00 FF 
23a14     00 17 06 F6 | 	mov	arg03, ##521984
23a18     2B 00 00 FF 
23a1c     48 E5 85 F1 | 	sub	objptr, ##22344
23a20     74 2F B0 FD | 	call	#_audio096_spin2_start
23a24     FE 16 02 F6 | 	mov	arg03, result2
23a28     2B 00 00 FF 
23a2c     30 E5 05 F1 | 	add	objptr, ##22320
23a30     F2 FA 61 FC | 	wrlong	result1, objptr
23a34     14 E4 05 F1 | 	add	objptr, #20
23a38     F2 16 62 FC | 	wrlong	arg03, objptr
23a3c     37 00 00 FF 
23a40     10 E4 85 F1 | 	sub	objptr, ##28176
23a44     32 12 06 F6 | 	mov	arg01, #50
23a48     14 39 B0 FD | 	call	#__system___waitms
23a4c     37 00 00 FF 
23a50     10 E4 05 F1 | 	add	objptr, ##28176
23a54     F2 12 02 FB | 	rdlong	arg01, objptr
23a58     37 00 00 FF 
23a5c     10 E4 85 F1 | 	sub	objptr, ##28176
23a60     14 12 06 F1 | 	add	arg01, #20
23a64     20 00 80 FF 
23a68     09 01 58 FC | 	wrword	##16384, arg01
23a6c     38 2C B0 FD | 	call	#_usbnew_spin2_start
23a70     37 00 00 FF 
23a74     04 E4 05 F1 | 	add	objptr, ##28164
23a78     F2 FA 61 FC | 	wrlong	result1, objptr
23a7c                 | '   mouse_limits[0] := xlim
23a7c     0F 00 00 FF 
23a80     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
23a84     01 00 80 FF 
23a88     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
23a8c                 | '   mouse_limits[1] := ylim
23a8c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23a90     01 00 80 FF 
23a94     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
23a98     36 00 00 FF 
23a9c     F3 E4 85 F1 | 	sub	objptr, ##27891
23aa0     F2 12 02 F6 | 	mov	arg01, objptr
23aa4     11 E5 85 F1 | 	sub	objptr, #273
23aa8     C4 12 06 F1 | 	add	arg01, #196
23aac                 | '   mouse_outptr := ptr
23aac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23ab0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
23ab4     0F 00 00 FF 
23ab8     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
23abc     16 00 00 FF 
23ac0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
23ac4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
23ac8     16 00 00 FF 
23acc     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
23ad0     10 12 06 F6 | 	mov	arg01, #16
23ad4     C0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
23ad8     10 12 06 F6 | 	mov	arg01, #16
23adc     20 14 06 F6 | 	mov	arg02, #32
23ae0     20 16 06 F6 | 	mov	arg03, #32
23ae4     40 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
23ae8     09 12 C6 F9 | 	decod	arg01, #9
23aec     2C 15 06 F6 | 	mov	arg02, #300
23af0     0C 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
23af4     F2 16 02 F6 | 	mov	arg03, objptr
23af8     50 00 00 FF 
23afc     44 E5 05 F1 | 	add	objptr, ##41284
23b00     F2 14 02 F6 | 	mov	arg02, objptr
23b04     0A 17 62 FC | 	wrlong	arg03, arg02
23b08     04 14 06 F1 | 	add	arg02, #4
23b0c     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
23b10     EF 14 02 F6 | 	mov	arg02, entryptr__
23b14     1E FA 05 F6 | 	mov	result1, #30
23b18     28 E4 61 FD | 	setq	objptr
23b1c     0A FB F1 FC | 	coginit	result1, arg02 wc
23b20     01 FA 65 C6 |  if_b	neg	result1, #1
23b24     04 E4 85 F1 | 	sub	objptr, #4
23b28     F2 FA 61 FC | 	wrlong	result1, objptr
23b2c     01 00 00 FF 
23b30     54 E5 05 F1 | 	add	objptr, ##852
23b34     F2 00 68 FC | 	wrlong	#0, objptr
23b38     1B 00 00 FF 
23b3c     60 E4 85 F1 | 	sub	objptr, ##13920
23b40     F2 04 68 FC | 	wrlong	#2, objptr
23b44     04 E4 05 F1 | 	add	objptr, #4
23b48     F2 26 69 FC | 	wrlong	#147, objptr
23b4c     04 E4 05 F1 | 	add	objptr, #4
23b50     F2 34 69 FC | 	wrlong	#154, objptr
23b54     04 E4 05 F1 | 	add	objptr, #4
23b58     F2 08 68 FC | 	wrlong	#4, objptr
23b5c     04 E4 85 F1 | 	sub	objptr, #4
23b60     F2 16 02 FB | 	rdlong	arg03, objptr
23b64     14 E4 85 F1 | 	sub	objptr, #20
23b68     F2 16 62 FC | 	wrlong	arg03, objptr
23b6c     04 E4 05 F1 | 	add	objptr, #4
23b70     F2 00 68 FC | 	wrlong	#0, objptr
23b74     04 E4 05 F1 | 	add	objptr, #4
23b78     F2 00 68 FC | 	wrlong	#0, objptr
23b7c     19 00 00 FF 
23b80     0C E5 05 F1 | 	add	objptr, ##13068
23b84     F2 02 68 FC | 	wrlong	#1, objptr
23b88     01 00 00 FF 
23b8c     60 E5 05 F1 | 	add	objptr, ##864
23b90     F2 00 68 FC | 	wrlong	#0, objptr
23b94     01 00 00 FF 
23b98     00 EA 05 F1 | 	add	ptr__dat__, ##512
23b9c     08 E4 05 F1 | 	add	objptr, #8
23ba0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
23ba4     04 E4 85 F1 | 	sub	objptr, #4
23ba8     03 00 80 FF 
23bac     F2 3C 69 FC | 	wrlong	##1694, objptr
23bb0     0D 00 00 FF 
23bb4     3C E4 85 F1 | 	sub	objptr, ##6716
23bb8     F2 18 68 FC | 	wrlong	#12, objptr
23bbc     45 00 00 FF 
23bc0     64 E4 85 F1 | 	sub	objptr, ##35428
23bc4     01 00 00 FF 
23bc8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
23bcc     08 D8 BF FD | 	call	#_init_commands
23bd0     5C F6 BF FD | 	call	#_init_error_strings
23bd4     E0 ED BF FD | 	call	#_init_audio
23bd8     D8 24 BF FD | 	call	#_do_new
23bdc     37 00 00 FF 
23be0     3C E4 05 F1 | 	add	objptr, ##28220
23be4     F2 12 02 FB | 	rdlong	arg01, objptr
23be8     04 E4 85 F1 | 	sub	objptr, #4
23bec     F2 14 02 FB | 	rdlong	arg02, objptr
23bf0     37 00 00 FF 
23bf4     38 E4 85 F1 | 	sub	objptr, ##28216
23bf8     7C 17 B0 FD | 	call	#_hg010b_spin2_cls
23bfc     37 00 00 FF 
23c00     40 E4 05 F1 | 	add	objptr, ##28224
23c04     F2 12 02 FB | 	rdlong	arg01, objptr
23c08     37 00 00 FF 
23c0c     40 E4 85 F1 | 	sub	objptr, ##28224
23c10     E4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
23c14                 | ' 
23c14                 | ' leading_spaces:=amount
23c14     01 00 00 FF 
23c18     B6 E4 05 F1 | 	add	objptr, ##694
23c1c     F2 04 68 FC | 	wrlong	#2, objptr
23c20     01 00 00 FF 
23c24     B6 E4 85 F1 | 	sub	objptr, ##694
23c28     BE 01 00 FF 
23c2c     39 27 06 F6 | 	mov	local01, ##@LR__6102
23c30     3D 12 06 F6 | 	mov	arg01, #61
23c34     3C 14 06 F6 | 	mov	arg02, #60
23c38     3B 16 06 F6 | 	mov	arg03, #59
23c3c     3A 18 06 F6 | 	mov	arg04, #58
23c40     AC 81 B0 FD | 	call	#__system___vfs_open_sdcardx
23c44     FD 14 02 F6 | 	mov	arg02, result1
23c48     13 13 02 F6 | 	mov	arg01, local01
23c4c     E8 37 B0 FD | 	call	#__system___mount
23c50     BE 01 00 FF 
23c54     3D 13 06 F6 | 	mov	arg01, ##@LR__6103
23c58     9C 3A B0 FD | 	call	#__system___chdir
23c5c     BE 01 00 FF 
23c60     45 27 06 F6 | 	mov	local01, ##@LR__6104
23c64     4A 00 00 FF 
23c68     94 E4 05 F1 | 	add	objptr, ##38036
23c6c     F2 26 62 FC | 	wrlong	local01, objptr
23c70     13 00 00 FF 
23c74     60 E4 85 F1 | 	sub	objptr, ##9824
23c78     F2 12 02 FB | 	rdlong	arg01, objptr
23c7c     37 00 00 FF 
23c80     34 E4 85 F1 | 	sub	objptr, ##28212
23c84     01 12 66 F0 | 	shl	arg01, #1
23c88     01 14 06 F6 | 	mov	arg02, #1
23c8c     A8 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23c90                 | ' init_commands
23c90                 | ' init_error_strings
23c90                 | ' init_audio
23c90                 | ' do_new
23c90                 | ' cls(ink, paper)
23c90                 | ' v.setfontfamily(font) 				' use ST Mono font
23c90                 | ' v.setleadingspaces(2)
23c90                 | ' mount "/sd", _vfs_open_sdcard()
23c90                 | ' chdir "/sd/bas"
23c90                 | ' currentdir$="/sd/bas"
23c90                 | ' position 2*editor_spaces,1 : print ver$
23c90     00 12 06 F6 | 	mov	arg01, #0
23c94     FC 90 B0 FD | 	call	#__system___getiolock_0616
23c98     FD 12 02 F6 | 	mov	arg01, result1
23c9c     CC 33 B0 FD | 	call	#__system___lockmem
23ca0     18 00 00 FF 
23ca4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
23ca8     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
23cac     18 00 00 FF 
23cb0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
23cb4     00 12 06 F6 | 	mov	arg01, #0
23cb8     00 16 06 F6 | 	mov	arg03, #0
23cbc     A0 40 B0 FD | 	call	#__system___basic_print_string
23cc0     00 12 06 F6 | 	mov	arg01, #0
23cc4     0A 14 06 F6 | 	mov	arg02, #10
23cc8     00 16 06 F6 | 	mov	arg03, #0
23ccc     38 40 B0 FD | 	call	#__system___basic_print_char
23cd0     00 12 06 F6 | 	mov	arg01, #0
23cd4     BC 90 B0 FD | 	call	#__system___getiolock_0616
23cd8     FD 00 68 FC | 	wrlong	#0, result1
23cdc     52 00 00 FF 
23ce0     98 E4 05 F1 | 	add	objptr, ##42136
23ce4     F2 12 02 FB | 	rdlong	arg01, objptr
23ce8     0F 00 00 FF 
23cec     3C E4 85 F1 | 	sub	objptr, ##7740
23cf0     F2 26 02 FB | 	rdlong	local01, objptr
23cf4     43 00 00 FF 
23cf8     5C E4 85 F1 | 	sub	objptr, ##34396
23cfc     13 13 82 F1 | 	sub	arg01, local01
23d00     00 14 06 F6 | 	mov	arg02, #0
23d04     0A 16 06 F6 | 	mov	arg03, #10
23d08     30 56 B0 FD | 	call	#__system__Number_S
23d0c     FD 12 02 F6 | 	mov	arg01, result1
23d10     BE 01 00 FF 
23d14     4D 15 06 F6 | 	mov	arg02, ##@LR__6105
23d18     AC 33 B0 FD | 	call	#__system___string_concat
23d1c     FD 26 02 F6 | 	mov	local01, result1
23d20     50 00 00 FF 
23d24     38 E5 05 F1 | 	add	objptr, ##41272
23d28     F2 26 62 FC | 	wrlong	local01, objptr
23d2c     50 00 00 FF 
23d30     38 E5 85 F1 | 	sub	objptr, ##41272
23d34                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
23d34     00 12 06 F6 | 	mov	arg01, #0
23d38     58 90 B0 FD | 	call	#__system___getiolock_0616
23d3c     FD 12 02 F6 | 	mov	arg01, result1
23d40     28 33 B0 FD | 	call	#__system___lockmem
23d44     50 00 00 FF 
23d48     38 E5 05 F1 | 	add	objptr, ##41272
23d4c     F2 14 02 FB | 	rdlong	arg02, objptr
23d50     50 00 00 FF 
23d54     38 E5 85 F1 | 	sub	objptr, ##41272
23d58     00 12 06 F6 | 	mov	arg01, #0
23d5c     00 16 06 F6 | 	mov	arg03, #0
23d60     FC 3F B0 FD | 	call	#__system___basic_print_string
23d64     00 12 06 F6 | 	mov	arg01, #0
23d68     0A 14 06 F6 | 	mov	arg02, #10
23d6c     00 16 06 F6 | 	mov	arg03, #0
23d70     94 3F B0 FD | 	call	#__system___basic_print_char
23d74     00 12 06 F6 | 	mov	arg01, #0
23d78     18 90 B0 FD | 	call	#__system___getiolock_0616
23d7c     FD 00 68 FC | 	wrlong	#0, result1
23d80     37 00 00 FF 
23d84     34 E4 05 F1 | 	add	objptr, ##28212
23d88     F2 12 02 FB | 	rdlong	arg01, objptr
23d8c     37 00 00 FF 
23d90     34 E4 85 F1 | 	sub	objptr, ##28212
23d94     01 12 66 F0 | 	shl	arg01, #1
23d98     04 14 06 F6 | 	mov	arg02, #4
23d9c     98 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23da0                 | ' position 2*editor_spaces,4 : print "Ready"
23da0     00 12 06 F6 | 	mov	arg01, #0
23da4     EC 8F B0 FD | 	call	#__system___getiolock_0616
23da8     FD 12 02 F6 | 	mov	arg01, result1
23dac     BC 32 B0 FD | 	call	#__system___lockmem
23db0     BE 01 00 FF 
23db4     5F 15 06 F6 | 	mov	arg02, ##@LR__6106
23db8     00 12 06 F6 | 	mov	arg01, #0
23dbc     00 16 06 F6 | 	mov	arg03, #0
23dc0     9C 3F B0 FD | 	call	#__system___basic_print_string
23dc4     00 12 06 F6 | 	mov	arg01, #0
23dc8     0A 14 06 F6 | 	mov	arg02, #10
23dcc     00 16 06 F6 | 	mov	arg03, #0
23dd0     34 3F B0 FD | 	call	#__system___basic_print_char
23dd4     00 12 06 F6 | 	mov	arg01, #0
23dd8     B8 8F B0 FD | 	call	#__system___getiolock_0616
23ddc     FD 00 68 FC | 	wrlong	#0, result1
23de0     00 14 06 F6 | 	mov	arg02, #0
23de4     01 14 D6 F7 | 	test	arg02, #1 wc
23de8     5A 4C 64 FD | 	drvc	#38
23dec     01 14 D6 F7 | 	test	arg02, #1 wc
23df0     5A 4E 64 FD | 	drvc	#39
23df4     BE 01 00 FF 
23df8     65 27 06 F6 | 	mov	local01, ##@LR__6107
23dfc     52 00 00 FF 
23e00     C4 E4 05 F1 | 	add	objptr, ##42180
23e04     F2 26 62 FC | 	wrlong	local01, objptr
23e08     04 E4 05 F1 | 	add	objptr, #4
23e0c     FF FF FF FF 
23e10     F2 FE 6B FC | 	wrlong	##-1, objptr
23e14     0C E4 05 F1 | 	add	objptr, #12
23e18     F2 00 68 FC | 	wrlong	#0, objptr
23e1c     52 00 00 FF 
23e20     D4 E4 85 F1 | 	sub	objptr, ##42196
23e24                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
23e24                 | ' loadname="noname.bas"
23e24                 | ' do_insert=-1
23e24                 | ' inload=0
23e24                 | ' 
23e24                 | ' open "/sd/bas/autorun.bas" for input as #9
23e24     BE 01 00 FF 
23e28     70 15 06 F6 | 	mov	arg02, ##@LR__6108
23e2c     09 12 06 F6 | 	mov	arg01, #9
23e30     00 16 06 F6 | 	mov	arg03, #0
23e34     38 3E B0 FD | 	call	#__system___basic_open_string
23e38     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23e3c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
23e40     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23e44     52 00 00 FF 
23e48     D8 E4 05 F1 | 	add	objptr, ##42200
23e4c     F2 FA 61 FC | 	wrlong	result1, objptr
23e50     52 00 00 FF 
23e54     D8 E4 85 F1 | 	sub	objptr, ##42200
23e58                 | ' err=geterr()
23e58                 | ' close #9
23e58     09 12 06 F6 | 	mov	arg01, #9
23e5c     64 85 B0 FD | 	call	#__system__close
23e60                 | ' if err=0 then line$="run autorun.bas" : interpret
23e60     52 00 00 FF 
23e64     D8 E4 05 F1 | 	add	objptr, ##42200
23e68     F2 26 0A FB | 	rdlong	local01, objptr wz
23e6c     52 00 00 FF 
23e70     D8 E4 85 F1 | 	sub	objptr, ##42200
23e74     BE 01 00 AF 
23e78     84 27 06 A6 |  if_e	mov	local01, ##@LR__6109
23e7c     37 00 00 AF 
23e80     1C E4 05 A1 |  if_e	add	objptr, ##28188
23e84     F2 26 62 AC |  if_e	wrlong	local01, objptr
23e88     37 00 00 AF 
23e8c     1C E4 85 A1 |  if_e	sub	objptr, ##28188
23e90     94 D9 BD AD |  if_e	call	#_interpret
23e94                 | ' 
23e94                 | ' 
23e94                 | ' '-------------------------------------------------------------------------------------------------------- 
23e94                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
23e94                 | ' '--------------------------------------------------------------------------------------------------------
23e94                 | ' 
23e94                 | ' do
23e94                 | LR__2710
23e94     6C C9 BD FD | 	call	#_edit
23e98     FD 26 02 F6 | 	mov	local01, result1
23e9c     37 00 00 FF 
23ea0     1C E4 05 F1 | 	add	objptr, ##28188
23ea4     F2 26 62 FC | 	wrlong	local01, objptr
23ea8     37 00 00 FF 
23eac     1C E4 85 F1 | 	sub	objptr, ##28188
23eb0     74 D9 BD FD | 	call	#_interpret
23eb4     BE 01 00 FF 
23eb8     94 27 06 F6 | 	mov	local01, ##@LR__6110
23ebc     37 00 00 FF 
23ec0     1C E4 05 F1 | 	add	objptr, ##28188
23ec4     F2 26 62 FC | 	wrlong	local01, objptr
23ec8     37 00 00 FF 
23ecc     1C E4 85 F1 | 	sub	objptr, ##28188
23ed0     C0 FF 9F FD | 	jmp	#LR__2710
23ed4     A7 F0 03 F6 | 	mov	ptra, fp
23ed8     B2 00 A0 FD | 	call	#popregs_
23edc                 | _program_ret
23edc     2D 00 64 FD | 	ret
23ee0                 | 
23ee0                 | ' '' this is not a main program.
23ee0                 | ' 
23ee0                 | ' '****************************************************************************************************************
23ee0                 | ' '                                                                                                             	*
23ee0                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
23ee0                 | ' '                                                                                                            	*
23ee0                 | ' ' base - HDMI base pin												*
23ee0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
23ee0                 | ' '														*
23ee0                 | ' '														*
23ee0                 | ' '****************************************************************************************************************
23ee0                 | ' 
23ee0                 | ' pub start(base,mb):result |i
23ee0                 | _hg010b_spin2_start
23ee0                 | ' 
23ee0                 | ' '--------------------------- initialize pointers and variables
23ee0                 | ' 
23ee0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
23ee0     34 E4 05 F1 | 	add	objptr, #52
23ee4     F2 FA 01 F6 | 	mov	result1, objptr
23ee8     28 E4 85 F1 | 	sub	objptr, #40
23eec     F2 FA 61 FC | 	wrlong	result1, objptr
23ef0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
23ef0                 | ' hdmibase:=base							' HDMI base pin, 8*n
23ef0     18 E4 05 F1 | 	add	objptr, #24
23ef4     F2 12 62 FC | 	wrlong	arg01, objptr
23ef8                 | ' mailbox_ptr:=mb		
23ef8     04 E4 05 F1 | 	add	objptr, #4
23efc     F2 14 62 FC | 	wrlong	arg02, objptr
23f00                 | ' mailbox0:=mb				' PSRAM mailbox pointer
23f00     C1 E5 05 F1 | 	add	objptr, #449
23f04     F2 14 62 FC | 	wrlong	arg02, objptr
23f08                 | ' sprite_ptr:=@spr1ptr
23f08     D8 E4 85 F1 | 	sub	objptr, #216
23f0c     F2 FA 01 F6 | 	mov	result1, objptr
23f10     E5 E4 85 F1 | 	sub	objptr, #229
23f14     F2 FA 61 FC | 	wrlong	result1, objptr
23f18                 | ' 
23f18                 | ' 		'
23f18                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
23f18     E5 E4 05 F1 | 	add	objptr, #229
23f1c     F2 FA 01 FB | 	rdlong	result1, objptr
23f20     D0 FA 05 F1 | 	add	result1, #208
23f24     FD 10 58 FC | 	wrword	#8, result1
23f28                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
23f28     F2 16 02 FB | 	rdlong	arg03, objptr
23f2c     D2 16 06 F1 | 	add	arg03, #210
23f30     0B 21 58 FC | 	wrword	#16, arg03
23f34                 | ' leading_spaces:=0				'
23f34     A5 E5 05 F1 | 	add	objptr, #421
23f38     F2 00 68 FC | 	wrlong	#0, objptr
23f3c                 | ' 
23f3c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
23f3c     99 E4 85 F1 | 	sub	objptr, #153
23f40     00 00 A0 FF 
23f44     F2 0E 68 FC | 	wrlong	##1073741831, objptr
23f48                 | ' emptydl[1]:=0
23f48     04 E4 05 F1 | 	add	objptr, #4
23f4c     F2 00 68 FC | 	wrlong	#0, objptr
23f50                 | ' 
23f50                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
23f50                 | ' 
23f50                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
23f50     28 E5 85 F1 | 	sub	objptr, #296
23f54     F2 02 68 FC | 	wrlong	#1, objptr
23f58                 | ' if s_debug<>0
23f58                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
23f58     20 00 80 FF 
23f5c     F2 00 68 FC | 	wrlong	##16384, objptr
23f60     F9 E4 85 F1 | 	sub	objptr, #249
23f64                 | ' setmode()							' set the mode, see below
23f64     18 03 B0 FD | 	call	#_hg010b_spin2_setmode
23f68                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
23f68     49 E4 05 F1 | 	add	objptr, #73
23f6c     F2 FA 01 F6 | 	mov	result1, objptr
23f70     35 E4 85 F1 | 	sub	objptr, #53
23f74     F2 FA 61 FC | 	wrlong	result1, objptr
23f78                 | ' cursor_ptr:=@cursor_x						
23f78     28 E4 05 F1 | 	add	objptr, #40
23f7c     F2 16 02 F6 | 	mov	arg03, objptr
23f80     2C E4 85 F1 | 	sub	objptr, #44
23f84     F2 16 62 FC | 	wrlong	arg03, objptr
23f88                 | ' fontnum:=0  							' start with a PC type font 
23f88     55 E4 05 F1 | 	add	objptr, #85
23f8c     F2 00 68 FC | 	wrlong	#0, objptr
23f90                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
23f90     1C E4 05 F1 | 	add	objptr, #28
23f94     F2 12 02 F6 | 	mov	arg01, objptr
23f98     81 E4 85 F1 | 	sub	objptr, #129
23f9c     1C 00 00 FF 
23fa0     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14464
23fa4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23fa8     1C 00 00 FF 
23fac     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14464
23fb0     10 16 06 F6 | 	mov	arg03, #16
23fb4     64 2F B0 FD | 	call	#__system____builtin_memmove
23fb8                 | ' leading_spaces:=0
23fb8     01 00 00 FF 
23fbc     B6 E4 05 F1 | 	add	objptr, ##694
23fc0     F2 00 68 FC | 	wrlong	#0, objptr
23fc4     01 00 00 FF 
23fc8     B6 E4 85 F1 | 	sub	objptr, ##694
23fcc                 | ' '---------------------------- initialize a cursor (MSDOS type)
23fcc                 | ' 
23fcc                 | ' initcursor(154)
23fcc     9A 12 06 F6 | 	mov	arg01, #154
23fd0     78 00 B0 FD | 	call	#_hg010b_spin2_initcursor
23fd4                 | ' 
23fd4                 | ' '---------------------------- start the cog
23fd4                 | ' 
23fd4                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
23fd4     1C 00 00 FF 
23fd8     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14480
23fdc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23fe0     1C 00 00 FF 
23fe4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14480
23fe8     14 E4 05 F1 | 	add	objptr, #20
23fec     10 FA 05 F6 | 	mov	result1, #16
23ff0     28 E4 61 FD | 	setq	objptr
23ff4     0A FB F1 FC | 	coginit	result1, arg02 wc
23ff8     01 FA 65 C6 |  if_b	neg	result1, #1
23ffc     1C E4 05 F1 | 	add	objptr, #28
24000     F2 FA 61 FC | 	wrlong	result1, objptr
24004     30 E4 85 F1 | 	sub	objptr, #48
24008                 | ' waitms(40)							' wait for stabilize
24008     28 12 06 F6 | 	mov	arg01, #40
2400c     50 33 B0 FD | 	call	#__system___waitms
24010                 | ' return cog							' return the driver's cog #
24010     30 E4 05 F1 | 	add	objptr, #48
24014     F2 FA 01 FB | 	rdlong	result1, objptr
24018     30 E4 85 F1 | 	sub	objptr, #48
2401c                 | _hg010b_spin2_start_ret
2401c     2D 00 64 FD | 	ret
24020                 | 
24020                 | ' 
24020                 | ' 
24020                 | ' '**************************************************************************************************************** 
24020                 | ' '                                                                                                             	*
24020                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
24020                 | ' '  Mode number - see start() above or bits below								*
24020                 | ' '                                                                                                             	*
24020                 | ' '****************************************************************************************************************
24020                 | ' 
24020                 | ' 
24020                 | ' pub restorepalette()
24020                 | _hg010b_spin2_restorepalette
24020                 | ' 
24020                 | ' longmove(@ataripalette,@ataripalette2,256)
24020     18 00 00 FF 
24024     40 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
24028     F7 12 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
2402c     02 00 00 FF 
24030     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
24034     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
24038     1A 00 00 FF 
2403c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
24040     00 17 06 F6 | 	mov	arg03, #256
24044     68 2F B0 FD | 	call	#__system__longmove
24048                 | _hg010b_spin2_restorepalette_ret
24048     2D 00 64 FD | 	ret
2404c                 | 
2404c                 | ' 
2404c                 | ' '---------------------------- initialize a cursor (MSDOS type)
2404c                 | ' pub initcursor(color) |i
2404c                 | _hg010b_spin2_initcursor
2404c     03 4A 05 F6 | 	mov	COUNT_, #3
24050     A8 00 A0 FD | 	call	#pushregs_
24054     09 27 02 F6 | 	mov	local01, arg01
24058                 | ' 
24058                 | ' cursor_x:=0							' place the cursor at 0:0
24058     3C E4 05 F1 | 	add	objptr, #60
2405c     F2 00 58 FC | 	wrword	#0, objptr
24060                 | ' cursor_y:=0
24060     02 E4 05 F1 | 	add	objptr, #2
24064     F2 00 48 FC | 	wrbyte	#0, objptr
24068                 | ' repeat i from 0 to 111
24068     00 28 06 F6 | 	mov	local02, #0
2406c     F8 E5 05 F1 | 	add	objptr, #504
24070     97 1A 48 FB | 	callpa	#(@LR__2722-@LR__2720)>>2,fcache_load_ptr_
24074                 | LR__2720
24074                 | '   cursor[i]:=0
24074     14 2B 02 F6 | 	mov	local03, local02
24078     F2 2A 02 F1 | 	add	local03, objptr
2407c     15 01 48 FC | 	wrbyte	#0, local03
24080     01 28 06 F1 | 	add	local02, #1
24084     70 28 56 F2 | 	cmps	local02, #112 wc
24088     E8 FF 9F CD |  if_b	jmp	#LR__2720
2408c                 | ' repeat i from 112 to 127
2408c     70 28 06 F6 | 	mov	local02, #112
24090                 | LR__2721
24090                 | '   cursor[i]:=color  
24090     14 2B 02 F6 | 	mov	local03, local02
24094     F2 2A 02 F1 | 	add	local03, objptr
24098     15 27 42 FC | 	wrbyte	local01, local03
2409c     01 28 06 F1 | 	add	local02, #1
240a0     80 28 16 F2 | 	cmp	local02, #128 wc
240a4     E8 FF 9F CD |  if_b	jmp	#LR__2721
240a8                 | LR__2722
240a8                 | ' 'repeat i from 0 to 127
240a8                 | ' '  if ((i/8)//2)
240a8                 | ' '    cursor[i]:=15
240a8                 | ' '  else
240a8                 | ' '    cursor[i]:=0
240a8                 | ' '  if i>=120    
240a8                 | ' '    cursor[i]:=40
240a8                 | ' setspriteptr(17,@cursor)
240a8     F2 14 02 F6 | 	mov	arg02, objptr
240ac     01 00 00 FF 
240b0     36 E4 85 F1 | 	sub	objptr, ##566
240b4     11 12 06 F6 | 	mov	arg01, #17
240b8     DC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
240bc                 | ' setspritesize(17,8,16)
240bc     11 12 06 F6 | 	mov	arg01, #17
240c0     08 14 06 F6 | 	mov	arg02, #8
240c4     10 16 06 F6 | 	mov	arg03, #16
240c8     5C 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
240cc                 | ' setspritepos(17,0,0)
240cc     11 12 06 F6 | 	mov	arg01, #17
240d0     00 14 06 F6 | 	mov	arg02, #0
240d4     00 16 06 F6 | 	mov	arg03, #0
240d8     E4 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
240dc                 | ' cursorshape:=14
240dc     0B 00 00 FF 
240e0     C6 E4 05 F1 | 	add	objptr, ##5830
240e4     F2 1C 68 FC | 	wrlong	#14, objptr
240e8                 | ' cursorcolor:=color
240e8     04 E4 85 F1 | 	sub	objptr, #4
240ec     F2 26 62 FC | 	wrlong	local01, objptr
240f0     0B 00 00 FF 
240f4     C2 E4 85 F1 | 	sub	objptr, ##5826
240f8     A7 F0 03 F6 | 	mov	ptra, fp
240fc     B2 00 A0 FD | 	call	#popregs_
24100                 | _hg010b_spin2_initcursor_ret
24100     2D 00 64 FD | 	ret
24104                 | 
24104                 | ' 
24104                 | ' pub setcursorshape(shape) | i
24104                 | _hg010b_spin2_setcursorshape
24104                 | ' 
24104                 | ' cursorshape:=shape
24104     0B 00 00 FF 
24108     C6 E4 05 F1 | 	add	objptr, ##5830
2410c     F2 12 62 FC | 	wrlong	arg01, objptr
24110                 | ' repeat i from 0 to (8*cursorshape)-1
24110     00 00 06 F6 | 	mov	_var01, #0
24114     09 03 02 F6 | 	mov	_var02, arg01
24118     03 02 66 F0 | 	shl	_var02, #3
2411c     01 02 86 F1 | 	sub	_var02, #1
24120     00 02 56 F2 | 	cmps	_var02, #0 wc
24124     01 04 86 F6 | 	negc	_var03, #1
24128     02 07 02 F6 | 	mov	_var04, _var03
2412c     02 03 02 F1 | 	add	_var02, _var03
24130     0A 00 00 FF 
24134     90 E4 85 F1 | 	sub	objptr, ##5264
24138     97 0C 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
2413c                 | LR__2730
2413c                 | '   cursor[i]:=0
2413c     00 05 02 F6 | 	mov	_var03, _var01
24140     F2 04 02 F1 | 	add	_var03, objptr
24144     02 01 48 FC | 	wrbyte	#0, _var03
24148     03 01 02 F1 | 	add	_var01, _var04
2414c     01 01 0A F2 | 	cmp	_var01, _var02 wz
24150     E8 FF 9F 5D |  if_ne	jmp	#LR__2730
24154                 | LR__2731
24154                 | ' repeat i from 8*cursorshape to 127
24154     0A 00 00 FF 
24158     90 E4 05 F1 | 	add	objptr, ##5264
2415c     F2 06 02 FB | 	rdlong	_var04, objptr
24160     03 01 02 F6 | 	mov	_var01, _var04
24164     03 00 66 F0 | 	shl	_var01, #3
24168     0B 00 00 FF 
2416c     C6 E4 85 F1 | 	sub	objptr, ##5830
24170     03 06 66 F0 | 	shl	_var04, #3
24174     80 06 56 F2 | 	cmps	_var04, #128 wc
24178     01 04 A6 F6 | 	negnc	_var03, #1
2417c     7F 02 06 F6 | 	mov	_var02, #127
24180     02 03 02 F1 | 	add	_var02, _var03
24184     97 1A 48 FB | 	callpa	#(@LR__2733-@LR__2732)>>2,fcache_load_ptr_
24188                 | LR__2732
24188                 | '   cursor[i]:=cursorcolor
24188     00 07 02 F6 | 	mov	_var04, _var01
2418c     01 00 00 FF 
24190     36 E4 05 F1 | 	add	objptr, ##566
24194     F2 06 02 F1 | 	add	_var04, objptr
24198     0A 00 00 FF 
2419c     8C E4 05 F1 | 	add	objptr, ##5260
241a0     F2 12 02 FB | 	rdlong	arg01, objptr
241a4     0B 00 00 FF 
241a8     C2 E4 85 F1 | 	sub	objptr, ##5826
241ac     03 13 42 FC | 	wrbyte	arg01, _var04
241b0     02 01 02 F1 | 	add	_var01, _var03
241b4     01 01 0A F2 | 	cmp	_var01, _var02 wz
241b8     CC FF 9F 5D |  if_ne	jmp	#LR__2732
241bc                 | LR__2733
241bc                 | _hg010b_spin2_setcursorshape_ret
241bc     2D 00 64 FD | 	ret
241c0                 | 
241c0                 | ' 
241c0                 | ' pub setcursorcolor(color) | i
241c0                 | _hg010b_spin2_setcursorcolor
241c0                 | ' 
241c0                 | ' cursorcolor:=color
241c0     0B 00 00 FF 
241c4     C2 E4 05 F1 | 	add	objptr, ##5826
241c8     F2 12 62 FC | 	wrlong	arg01, objptr
241cc                 | ' repeat i from 0 to (8*cursorshape)-1
241cc     00 12 06 F6 | 	mov	arg01, #0
241d0     04 E4 05 F1 | 	add	objptr, #4
241d4     F2 00 02 FB | 	rdlong	_var01, objptr
241d8     03 00 66 F0 | 	shl	_var01, #3
241dc     01 00 86 F1 | 	sub	_var01, #1
241e0     00 00 56 F2 | 	cmps	_var01, #0 wc
241e4     01 02 86 F6 | 	negc	_var02, #1
241e8     01 05 02 F6 | 	mov	_var03, _var02
241ec     01 01 02 F1 | 	add	_var01, _var02
241f0     0A 00 00 FF 
241f4     90 E4 85 F1 | 	sub	objptr, ##5264
241f8     97 0C 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
241fc                 | LR__2740
241fc                 | '   cursor[i]:=0
241fc     09 03 02 F6 | 	mov	_var02, arg01
24200     F2 02 02 F1 | 	add	_var02, objptr
24204     01 01 48 FC | 	wrbyte	#0, _var02
24208     02 13 02 F1 | 	add	arg01, _var03
2420c     00 13 0A F2 | 	cmp	arg01, _var01 wz
24210     E8 FF 9F 5D |  if_ne	jmp	#LR__2740
24214                 | LR__2741
24214                 | ' repeat i from 8*cursorshape to 127
24214     0A 00 00 FF 
24218     90 E4 05 F1 | 	add	objptr, ##5264
2421c     F2 04 02 FB | 	rdlong	_var03, objptr
24220     02 13 02 F6 | 	mov	arg01, _var03
24224     03 12 66 F0 | 	shl	arg01, #3
24228     0B 00 00 FF 
2422c     C6 E4 85 F1 | 	sub	objptr, ##5830
24230     03 04 66 F0 | 	shl	_var03, #3
24234     80 04 56 F2 | 	cmps	_var03, #128 wc
24238     01 02 A6 F6 | 	negnc	_var02, #1
2423c     7F 00 06 F6 | 	mov	_var01, #127
24240     01 01 02 F1 | 	add	_var01, _var02
24244     97 1A 48 FB | 	callpa	#(@LR__2743-@LR__2742)>>2,fcache_load_ptr_
24248                 | LR__2742
24248                 | '   cursor[i]:=cursorcolor
24248     09 05 02 F6 | 	mov	_var03, arg01
2424c     01 00 00 FF 
24250     36 E4 05 F1 | 	add	objptr, ##566
24254     F2 04 02 F1 | 	add	_var03, objptr
24258     0A 00 00 FF 
2425c     8C E4 05 F1 | 	add	objptr, ##5260
24260     F2 06 02 FB | 	rdlong	_var04, objptr
24264     0B 00 00 FF 
24268     C2 E4 85 F1 | 	sub	objptr, ##5826
2426c     02 07 42 FC | 	wrbyte	_var04, _var03
24270     01 13 02 F1 | 	add	arg01, _var02
24274     00 13 0A F2 | 	cmp	arg01, _var01 wz
24278     CC FF 9F 5D |  if_ne	jmp	#LR__2742
2427c                 | LR__2743
2427c                 | _hg010b_spin2_setcursorcolor_ret
2427c     2D 00 64 FD | 	ret
24280                 | 
24280                 | '   
24280                 | '   
24280                 | '   
24280                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
24280                 | _hg010b_spin2_setmode
24280     02 4A 05 F6 | 	mov	COUNT_, #2
24284     A8 00 A0 FD | 	call	#pushregs_
24288                 | ' 
24288                 | ' 
24288                 | ' dl_ptr:=@emptydl[0]
24288     01 00 00 FF 
2428c     1D E4 05 F1 | 	add	objptr, ##541
24290     F2 1A 02 F6 | 	mov	arg05, objptr
24294     FD E5 85 F1 | 	sub	objptr, #509
24298     F2 1A 62 FC | 	wrlong	arg05, objptr
2429c                 | ' 
2429c                 | ' if cog>0 
2429c     10 E4 05 F1 | 	add	objptr, #16
242a0     F2 1A 02 FB | 	rdlong	arg05, objptr
242a4     30 E4 85 F1 | 	sub	objptr, #48
242a8     01 1A 56 F2 | 	cmps	arg05, #1 wc
242ac                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
242ac     01 12 06 36 |  if_ae	mov	arg01, #1
242b0     24 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
242b4                 | ' xres:=1024
242b4     01 00 00 FF 
242b8     26 E4 05 F1 | 	add	objptr, ##550
242bc     02 00 80 FF 
242c0     F2 00 68 FC | 	wrlong	##1024, objptr
242c4                 | ' yres:=600
242c4     04 E4 05 F1 | 	add	objptr, #4
242c8     01 00 80 FF 
242cc     F2 B0 68 FC | 	wrlong	##600, objptr
242d0                 | ' ppl:=(timings[3])
242d0     1C 00 00 FF 
242d4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
242d8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
242dc     51 E5 85 F1 | 	sub	objptr, #337
242e0     F2 1A 62 FC | 	wrlong	arg05, objptr
242e4                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
242e4     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
242e8     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
242ec     01 26 66 F0 | 	shl	local01, #1
242f0     80 E4 85 F1 | 	sub	objptr, #128
242f4     F2 26 62 FC | 	wrlong	local01, objptr
242f8                 | ' cpl1:=cpl '' todo remove
242f8     04 E4 05 F1 | 	add	objptr, #4
242fc     F2 26 62 FC | 	wrlong	local01, objptr
24300                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
24300     04 00 00 FF 
24304     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
24308     41 E4 85 F1 | 	sub	objptr, #65
2430c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
24310                 | ' repeat i from 0 to 3
24310     00 28 06 F6 | 	mov	local02, #0
24314     04 00 00 FF 
24318     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
2431c     08 E4 05 F1 | 	add	objptr, #8
24320     97 20 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
24324                 | LR__2750
24324                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
24324     14 27 02 F6 | 	mov	local01, local02
24328     02 26 66 F0 | 	shl	local01, #2
2432c     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
24330     F2 1A 02 FB | 	rdlong	arg05, objptr
24334     11 1A 66 F0 | 	shl	arg05, #17
24338     13 27 02 FB | 	rdlong	local01, local01
2433c     0D 27 02 F1 | 	add	local01, arg05
24340     80 40 38 FF 
24344     00 26 06 F1 | 	add	local01, ##1887502336
24348     14 1B 02 F6 | 	mov	arg05, local02
2434c     02 1A 66 F0 | 	shl	arg05, #2
24350     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
24354     0D 27 62 FC | 	wrlong	local01, arg05
24358     01 28 06 F1 | 	add	local02, #1
2435c     04 28 56 F2 | 	cmps	local02, #4 wc
24360     C0 FF 9F CD |  if_b	jmp	#LR__2750
24364                 | LR__2751
24364     24 E4 85 F1 | 	sub	objptr, #36
24368                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
24368     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
2436c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
24370     1C 00 00 FF 
24374     64 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14436
24378     14 26 66 FC | 	wrlong	local01, #20
2437c                 | ' 'hubset(timings[10])
2437c                 | ' waitms(1)                                                   	' wait for stabilization
2437c     01 12 06 F6 | 	mov	arg01, #1
24380     DC 2F B0 FD | 	call	#__system___waitms
24384     1C 00 00 FF 
24388     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
2438c     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
24390     61 E4 05 F1 | 	add	objptr, #97
24394     F2 28 62 FC | 	wrlong	local02, objptr
24398     14 27 52 F6 | 	abs	local01, local02 wc
2439c     04 26 46 F0 | 	shr	local01, #4
243a0     13 27 82 F6 | 	negc	local01, local01
243a4     9C E4 05 F1 | 	add	objptr, #156
243a8     F2 26 62 FC | 	wrlong	local01, objptr
243ac     A4 E4 85 F1 | 	sub	objptr, #164
243b0     F2 28 02 FB | 	rdlong	local02, objptr
243b4     08 E4 05 F1 | 	add	objptr, #8
243b8     F2 26 02 FB | 	rdlong	local01, objptr
243bc     13 29 02 FD | 	qmul	local02, local01
243c0                 | ' lines:=timings[11]
243c0                 | ' t_lines:=lines/16
243c0                 | ' buflen:=cpl*lines						' framebuffer length in longs
243c0     29 E4 85 F1 | 	sub	objptr, #41
243c4     19 26 C6 F9 | 	decod	local01, #25
243c8     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
243cc     18 28 62 FD | 	getqx	local02
243d0     F2 28 62 FC | 	wrlong	local02, objptr
243d4     38 E4 85 F1 | 	sub	objptr, #56
243d8     02 28 66 F0 | 	shl	local02, #2
243dc     14 27 82 F1 | 	sub	local01, local02
243e0     F2 26 62 FC | 	wrlong	local01, objptr
243e4     FD E4 05 F1 | 	add	objptr, #253
243e8     F2 28 02 FB | 	rdlong	local02, objptr
243ec     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
243f0     0D 29 02 FD | 	qmul	local02, arg05
243f4                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
243f4                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
243f4     F9 E4 85 F1 | 	sub	objptr, #249
243f8                 | ' mode_ptr:=@timings						' set pointers to timings
243f8     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
243fc                 | ' graphmode:=1024+512+192+48							' det global variable
243fc                 | ' makedl(graphmode)							' make a DL for the mode
243fc     03 00 00 FF 
24400     F0 12 06 F6 | 	mov	arg01, ##1776
24404     18 28 62 FD | 	getqx	local02
24408     14 27 82 F1 | 	sub	local01, local02
2440c     F2 26 62 FC | 	wrlong	local01, objptr
24410     14 E4 05 F1 | 	add	objptr, #20
24414     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
24418     79 E4 05 F1 | 	add	objptr, #121
2441c     03 00 80 FF 
24420     F2 E0 69 FC | 	wrlong	##1776, objptr
24424     91 E4 85 F1 | 	sub	objptr, #145
24428     1C 00 00 FF 
2442c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
24430     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
24434                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
24434     F2 26 02 FB | 	rdlong	local01, objptr
24438     DD E4 05 F1 | 	add	objptr, #221
2443c     F2 26 62 FC | 	wrlong	local01, objptr
24440                 | ' s_font_ptr:=font_ptr
24440     D5 E4 85 F1 | 	sub	objptr, #213
24444     F2 26 02 FB | 	rdlong	local01, objptr
24448     D9 E4 05 F1 | 	add	objptr, #217
2444c     F2 26 62 FC | 	wrlong	local01, objptr
24450                 | ' s_lines:=lines
24450     80 E4 85 F1 | 	sub	objptr, #128
24454     F2 26 02 FB | 	rdlong	local01, objptr
24458     84 E4 05 F1 | 	add	objptr, #132
2445c     F2 26 62 FC | 	wrlong	local01, objptr
24460                 | ' s_buflen:=buflen
24460     AD E4 85 F1 | 	sub	objptr, #173
24464     F2 26 02 FB | 	rdlong	local01, objptr
24468     B5 E4 05 F1 | 	add	objptr, #181
2446c     F2 26 62 FC | 	wrlong	local01, objptr
24470                 | ' s_cpl:=cpl
24470     94 E4 85 F1 | 	sub	objptr, #148
24474     F2 26 02 FB | 	rdlong	local01, objptr
24478     90 E4 05 F1 | 	add	objptr, #144
2447c     F2 26 62 FC | 	wrlong	local01, objptr
24480                 | ' s_cpl1:=cpl
24480     90 E4 85 F1 | 	sub	objptr, #144
24484     F2 26 02 FB | 	rdlong	local01, objptr
24488     98 E4 05 F1 | 	add	objptr, #152
2448c     F2 26 62 FC | 	wrlong	local01, objptr
24490                 | ' st_lines:=t_lines
24490     0C E4 05 F1 | 	add	objptr, #12
24494     F2 26 02 FB | 	rdlong	local01, objptr
24498     04 E4 05 F1 | 	add	objptr, #4
2449c     F2 26 62 FC | 	wrlong	local01, objptr
244a0                 | ' ppl:=ppl/xzoom  
244a0     28 E4 85 F1 | 	sub	objptr, #40
244a4     F2 90 02 FB | 	rdlong	muldiva_, objptr
244a8     2C E4 05 F1 | 	add	objptr, #44
244ac     F2 92 02 FB | 	rdlong	muldivb_, objptr
244b0     05 E5 85 F1 | 	sub	objptr, #261
244b4     BA 00 A0 FD | 	call	#divide_
244b8     D9 E4 05 F1 | 	add	objptr, #217
244bc     F2 92 62 FC | 	wrlong	muldivb_, objptr
244c0                 | ' s_ppl:=ppl
244c0     1C E4 05 F1 | 	add	objptr, #28
244c4     F2 92 62 FC | 	wrlong	muldivb_, objptr
244c8     F5 E4 85 F1 | 	sub	objptr, #245
244cc                 | ' waitms(20)							' wait 
244cc     14 12 06 F6 | 	mov	arg01, #20
244d0     8C 2E B0 FD | 	call	#__system___waitms
244d4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
244d4     04 E4 05 F1 | 	add	objptr, #4
244d8     F2 12 02 FB | 	rdlong	arg01, objptr
244dc     04 E4 85 F1 | 	sub	objptr, #4
244e0     F2 16 02 FB | 	rdlong	arg03, objptr
244e4     09 17 82 F1 | 	sub	arg03, arg01
244e8     20 14 06 F6 | 	mov	arg02, #32
244ec     00 18 06 F6 | 	mov	arg04, #0
244f0     01 1A 06 F6 | 	mov	arg05, #1
244f4     0B 00 00 FF 
244f8     CC E4 05 F1 | 	add	objptr, ##5836
244fc     AC 1F B0 FD | 	call	#_psram_spin2_fill
24500     0B 00 00 FF 
24504     CC E4 85 F1 | 	sub	objptr, ##5836
24508     A7 F0 03 F6 | 	mov	ptra, fp
2450c     B2 00 A0 FD | 	call	#popregs_
24510                 | _hg010b_spin2_setmode_ret
24510     2D 00 64 FD | 	ret
24514                 | 
24514                 | ' 
24514                 | ' '****************************************************************************************************************
24514                 | ' '                                                                                                             	*
24514                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
24514                 | ' '                                                                                                             	*
24514                 | ' '****************************************************************************************************************
24514                 | ' 
24514                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
24514                 | _hg010b_spin2_makedl
24514                 | ' 
24514                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
24514                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
24514                 | ' repeat i from 0 to 11                                                           ' clear DL
24514     00 00 06 F6 | 	mov	_var01, #0
24518     ED E5 05 F1 | 	add	objptr, #493
2451c     97 0E 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
24520                 | LR__2760
24520                 | '   displaylist[i]:=0 
24520     00 03 02 F6 | 	mov	_var02, _var01
24524     02 02 66 F0 | 	shl	_var02, #2
24528     F2 02 02 F1 | 	add	_var02, objptr
2452c     01 01 68 FC | 	wrlong	#0, _var02
24530     01 00 06 F1 | 	add	_var01, #1
24534     0C 00 56 F2 | 	cmps	_var01, #12 wc
24538     E4 FF 9F CD |  if_b	jmp	#LR__2760
2453c                 | LR__2761
2453c                 | '                         ' 
2453c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
2453c     8C E5 85 F1 | 	sub	objptr, #396
24540     F2 02 02 FB | 	rdlong	_var02, objptr
24544     14 02 66 F0 | 	shl	_var02, #20
24548     01 02 06 F1 | 	add	_var02, #1
2454c     04 E4 85 F1 | 	sub	objptr, #4
24550     F2 00 02 FB | 	rdlong	_var01, objptr
24554     02 00 66 F0 | 	shl	_var01, #2
24558     04 00 66 F0 | 	shl	_var01, #4
2455c     00 03 02 F1 | 	add	_var02, _var01
24560     90 E5 05 F1 | 	add	objptr, #400
24564     F2 02 62 FC | 	wrlong	_var02, objptr
24568     ED E5 85 F1 | 	sub	objptr, #493
2456c                 | ' displaylist[1]:=buf_ptr<<4+%10  
2456c     F2 02 02 FB | 	rdlong	_var02, objptr
24570     04 02 66 F0 | 	shl	_var02, #4
24574     02 02 06 F1 | 	add	_var02, #2
24578     F1 E5 05 F1 | 	add	objptr, #497
2457c     F2 02 62 FC | 	wrlong	_var02, objptr
24580                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
24580     04 E4 85 F1 | 	sub	objptr, #4
24584     F2 02 02 F6 | 	mov	_var02, objptr
24588     CD E5 85 F1 | 	sub	objptr, #461
2458c     F2 02 62 FC | 	wrlong	_var02, objptr
24590     20 E4 85 F1 | 	sub	objptr, #32
24594                 | _hg010b_spin2_makedl_ret
24594     2D 00 64 FD | 	ret
24598                 | 
24598                 | ' 
24598                 | ' 
24598                 | ' '****************************************************************************************************************
24598                 | ' '                                                                        					*
24598                 | ' '  Graphic primitives                                                    					*
24598                 | ' '                                                                        					*
24598                 | ' '****************************************************************************************************************
24598                 | ' 
24598                 | ' pub setspriteptr(num,ptr)
24598                 | _hg010b_spin2_setspriteptr
24598                 | ' long[@spr1ptr+12*num]:=ptr
24598     11 E5 05 F1 | 	add	objptr, #273
2459c     F2 00 02 F6 | 	mov	_var01, objptr
245a0     09 03 02 F6 | 	mov	_var02, arg01
245a4     01 02 66 F0 | 	shl	_var02, #1
245a8     09 03 02 F1 | 	add	_var02, arg01
245ac     02 02 66 F0 | 	shl	_var02, #2
245b0     01 01 02 F1 | 	add	_var01, _var02
245b4     00 15 62 FC | 	wrlong	arg02, _var01
245b8     11 E5 85 F1 | 	sub	objptr, #273
245bc                 | _hg010b_spin2_setspriteptr_ret
245bc     2D 00 64 FD | 	ret
245c0                 | 
245c0                 | ' 
245c0                 | ' pub setspritepos(num,x,y)
245c0                 | _hg010b_spin2_setspritepos
245c0                 | ' if y>601
245c0     01 00 00 FF 
245c4     5A 16 56 F2 | 	cmps	arg03, ##602 wc
245c8                 | '   y:=601
245c8     01 00 00 3F 
245cc     59 16 06 36 |  if_ae	mov	arg03, ##601
245d0                 | ' if x>1024
245d0     02 00 00 FF 
245d4     01 14 56 F2 | 	cmps	arg02, ##1025 wc
245d8                 | '   x:=1024
245d8     0A 14 C6 39 |  if_ae	decod	arg02, #10
245dc                 | ' word[@spr1ptr+12*num+4]:=x
245dc     11 E5 05 F1 | 	add	objptr, #273
245e0     F2 00 02 F6 | 	mov	_var01, objptr
245e4     09 03 02 F6 | 	mov	_var02, arg01
245e8     01 02 66 F0 | 	shl	_var02, #1
245ec     09 03 02 F1 | 	add	_var02, arg01
245f0     02 02 66 F0 | 	shl	_var02, #2
245f4     01 01 02 F1 | 	add	_var01, _var02
245f8     04 00 06 F1 | 	add	_var01, #4
245fc     00 15 52 FC | 	wrword	arg02, _var01
24600                 | ' word[@spr1ptr+12*num+6]:=y
24600     F2 00 02 F6 | 	mov	_var01, objptr
24604     09 03 02 F6 | 	mov	_var02, arg01
24608     01 02 66 F0 | 	shl	_var02, #1
2460c     09 03 02 F1 | 	add	_var02, arg01
24610     02 02 66 F0 | 	shl	_var02, #2
24614     01 01 02 F1 | 	add	_var01, _var02
24618     06 00 06 F1 | 	add	_var01, #6
2461c     00 17 52 FC | 	wrword	arg03, _var01
24620     11 E5 85 F1 | 	sub	objptr, #273
24624                 | _hg010b_spin2_setspritepos_ret
24624     2D 00 64 FD | 	ret
24628                 | 
24628                 | ' 
24628                 | ' pub setspritesize(num,w,h)
24628                 | _hg010b_spin2_setspritesize
24628                 | ' word[@spr1ptr+12*num+8]:=w
24628     11 E5 05 F1 | 	add	objptr, #273
2462c     F2 00 02 F6 | 	mov	_var01, objptr
24630     09 03 02 F6 | 	mov	_var02, arg01
24634     01 02 66 F0 | 	shl	_var02, #1
24638     09 03 02 F1 | 	add	_var02, arg01
2463c     02 02 66 F0 | 	shl	_var02, #2
24640     01 01 02 F1 | 	add	_var01, _var02
24644     08 00 06 F1 | 	add	_var01, #8
24648     00 15 52 FC | 	wrword	arg02, _var01
2464c                 | ' word[@spr1ptr+12*num+10]:=h
2464c     F2 00 02 F6 | 	mov	_var01, objptr
24650     09 03 02 F6 | 	mov	_var02, arg01
24654     01 02 66 F0 | 	shl	_var02, #1
24658     09 03 02 F1 | 	add	_var02, arg01
2465c     02 02 66 F0 | 	shl	_var02, #2
24660     01 01 02 F1 | 	add	_var01, _var02
24664     0A 00 06 F1 | 	add	_var01, #10
24668     00 17 52 FC | 	wrword	arg03, _var01
2466c     11 E5 85 F1 | 	sub	objptr, #273
24670                 | _hg010b_spin2_setspritesize_ret
24670     2D 00 64 FD | 	ret
24674                 | 
24674                 | ' 
24674                 | ' 
24674                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
24674                 | ' 
24674                 | ' 
24674                 | ' pub putpixel(x,y,c)
24674                 | _hg010b_spin2_putpixel
24674     04 4A 05 F6 | 	mov	COUNT_, #4
24678     A8 00 A0 FD | 	call	#pushregs_
2467c     09 27 02 F6 | 	mov	local01, arg01
24680                 | ' 
24680                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
24680     00 28 06 F6 | 	mov	local02, #0
24684     00 26 56 F2 | 	cmps	local01, #0 wc
24688     01 28 66 36 |  if_ae	neg	local02, #1
2468c     E9 E4 05 F1 | 	add	objptr, #233
24690     F2 1A 02 FB | 	rdlong	arg05, objptr
24694     02 1A 66 F0 | 	shl	arg05, #2
24698     0D 27 52 F2 | 	cmps	local01, arg05 wc
2469c     15 2B A2 F1 | 	subx	local03, local03
246a0     15 29 02 F5 | 	and	local02, local03
246a4     00 2A 06 F6 | 	mov	local03, #0
246a8     00 14 56 F2 | 	cmps	arg02, #0 wc
246ac     01 2A 66 36 |  if_ae	neg	local03, #1
246b0     15 29 02 F5 | 	and	local02, local03
246b4     04 E4 85 F1 | 	sub	objptr, #4
246b8     F2 2A 02 FB | 	rdlong	local03, objptr
246bc     E5 E4 85 F1 | 	sub	objptr, #229
246c0     15 15 52 F2 | 	cmps	arg02, local03 wc
246c4     16 2D A2 F1 | 	subx	local04, local04
246c8     16 29 CA F7 | 	test	local02, local04 wz
246cc     48 00 90 AD |  if_e	jmp	#LR__2770
246d0     DD E4 05 F1 | 	add	objptr, #221
246d4     F2 12 02 FB | 	rdlong	arg01, objptr
246d8     14 E4 05 F1 | 	add	objptr, #20
246dc     F2 2C 02 FB | 	rdlong	local04, objptr
246e0     02 2C 66 F0 | 	shl	local04, #2
246e4     0A 2D 02 FD | 	qmul	local04, arg02
246e8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
246e8     0B 15 02 F6 | 	mov	arg02, arg03
246ec     01 16 06 F6 | 	mov	arg03, #1
246f0     00 18 06 F6 | 	mov	arg04, #0
246f4     01 1A 06 F6 | 	mov	arg05, #1
246f8     0A 00 00 FF 
246fc     DB E5 05 F1 | 	add	objptr, ##5595
24700     18 2C 62 FD | 	getqx	local04
24704     13 2D 02 F1 | 	add	local04, local01
24708     16 13 02 F1 | 	add	arg01, local04
2470c     9C 1D B0 FD | 	call	#_psram_spin2_fill
24710     0B 00 00 FF 
24714     CC E4 85 F1 | 	sub	objptr, ##5836
24718                 | LR__2770
24718     A7 F0 03 F6 | 	mov	ptra, fp
2471c     B2 00 A0 FD | 	call	#popregs_
24720                 | _hg010b_spin2_putpixel_ret
24720     2D 00 64 FD | 	ret
24724                 | 
24724                 | ' 
24724                 | ' pub putpixel2(x,y,c)
24724                 | _hg010b_spin2_putpixel2
24724     02 4A 05 F6 | 	mov	COUNT_, #2
24728     A8 00 A0 FD | 	call	#pushregs_
2472c     DD E4 05 F1 | 	add	objptr, #221
24730     F2 26 02 FB | 	rdlong	local01, objptr
24734     14 E4 05 F1 | 	add	objptr, #20
24738     F2 1A 02 FB | 	rdlong	arg05, objptr
2473c     02 1A 66 F0 | 	shl	arg05, #2
24740     0A 1B 02 FD | 	qmul	arg05, arg02
24744                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24744     0B 15 02 F6 | 	mov	arg02, arg03
24748     01 16 06 F6 | 	mov	arg03, #1
2474c     00 18 06 F6 | 	mov	arg04, #0
24750     01 1A 06 F6 | 	mov	arg05, #1
24754     0A 00 00 FF 
24758     DB E5 05 F1 | 	add	objptr, ##5595
2475c     18 28 62 FD | 	getqx	local02
24760     09 29 02 F1 | 	add	local02, arg01
24764     14 27 02 F1 | 	add	local01, local02
24768     13 13 02 F6 | 	mov	arg01, local01
2476c     3C 1D B0 FD | 	call	#_psram_spin2_fill
24770     0B 00 00 FF 
24774     CC E4 85 F1 | 	sub	objptr, ##5836
24778     A7 F0 03 F6 | 	mov	ptra, fp
2477c     B2 00 A0 FD | 	call	#popregs_
24780                 | _hg010b_spin2_putpixel2_ret
24780     2D 00 64 FD | 	ret
24784                 | 
24784                 | ' 
24784                 | ' pub getpixel2(x,y): c 
24784                 | _hg010b_spin2_getpixel2
24784     02 4A 05 F6 | 	mov	COUNT_, #2
24788     A8 00 A0 FD | 	call	#pushregs_
2478c     0C F0 07 F1 | 	add	ptra, #12
24790     04 4E 05 F1 | 	add	fp, #4
24794     A7 12 62 FC | 	wrlong	arg01, fp
24798     04 4E 05 F1 | 	add	fp, #4
2479c     A7 14 62 FC | 	wrlong	arg02, fp
247a0     08 4E 85 F1 | 	sub	fp, #8
247a4     A7 00 68 FC | 	wrlong	#0, fp
247a8     A7 12 02 F6 | 	mov	arg01, fp
247ac     DD E4 05 F1 | 	add	objptr, #221
247b0     F2 14 02 FB | 	rdlong	arg02, objptr
247b4     14 E4 05 F1 | 	add	objptr, #20
247b8     F2 16 02 FB | 	rdlong	arg03, objptr
247bc     02 16 66 F0 | 	shl	arg03, #2
247c0     08 4E 05 F1 | 	add	fp, #8
247c4     A7 FA 01 FB | 	rdlong	result1, fp
247c8     FD 16 02 FD | 	qmul	arg03, result1
247cc                 | ' 
247cc                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
247cc     04 4E 85 F1 | 	sub	fp, #4
247d0     A7 26 02 FB | 	rdlong	local01, fp
247d4     04 4E 85 F1 | 	sub	fp, #4
247d8     01 16 06 F6 | 	mov	arg03, #1
247dc     0A 00 00 FF 
247e0     DB E5 05 F1 | 	add	objptr, ##5595
247e4     18 28 62 FD | 	getqx	local02
247e8     13 29 02 F1 | 	add	local02, local01
247ec     14 15 02 F1 | 	add	arg02, local02
247f0     80 1B B0 FD | 	call	#_psram_spin2_read1
247f4     0B 00 00 FF 
247f8     CC E4 85 F1 | 	sub	objptr, ##5836
247fc                 | ' return c
247fc     A7 FA 01 FB | 	rdlong	result1, fp
24800     A7 F0 03 F6 | 	mov	ptra, fp
24804     B2 00 A0 FD | 	call	#popregs_
24808                 | _hg010b_spin2_getpixel2_ret
24808     2D 00 64 FD | 	ret
2480c                 | 
2480c                 | '   
2480c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
2480c                 | ' 
2480c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
2480c                 | _hg010b_spin2_fastline
2480c     02 4A 05 F6 | 	mov	COUNT_, #2
24810     A8 00 A0 FD | 	call	#pushregs_
24814     09 27 02 F6 | 	mov	local01, arg01
24818     0A 29 02 F6 | 	mov	local02, arg02
2481c                 | ' 
2481c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
2481c     00 16 56 F2 | 	cmps	arg03, #0 wc
24820     F4 00 90 CD |  if_b	jmp	#LR__2780
24824     01 00 00 FF 
24828     2A E4 05 F1 | 	add	objptr, ##554
2482c     F2 1A 02 FB | 	rdlong	arg05, objptr
24830     01 00 00 FF 
24834     2A E4 85 F1 | 	sub	objptr, ##554
24838     0D 17 52 F2 | 	cmps	arg03, arg05 wc
2483c     D8 00 90 3D |  if_ae	jmp	#LR__2780
24840     00 26 56 F2 | 	cmps	local01, #0 wc
24844     00 28 56 C2 |  if_b	cmps	local02, #0 wc
24848     CC 00 90 CD |  if_b	jmp	#LR__2780
2484c     01 00 00 FF 
24850     26 E4 05 F1 | 	add	objptr, ##550
24854     F2 1A 02 FB | 	rdlong	arg05, objptr
24858     01 00 00 FF 
2485c     26 E4 85 F1 | 	sub	objptr, ##550
24860     0D 27 5A F2 | 	cmps	local01, arg05 wcz
24864     01 00 00 1F 
24868     26 E4 05 11 |  if_a	add	objptr, ##550
2486c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
24870     01 00 00 1F 
24874     26 E4 85 11 |  if_a	sub	objptr, ##550
24878     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
2487c                 | '   return
2487c     98 00 90 1D |  if_a	jmp	#LR__2780
24880     14 27 5A F2 | 	cmps	local01, local02 wcz
24884     13 1B 02 16 |  if_a	mov	arg05, local01
24888     14 27 02 16 |  if_a	mov	local01, local02
2488c     0D 29 02 16 |  if_a	mov	local02, arg05
24890     00 26 56 F2 | 	cmps	local01, #0 wc
24894     00 26 06 C6 |  if_b	mov	local01, #0
24898     01 00 00 FF 
2489c     26 E4 05 F1 | 	add	objptr, ##550
248a0     F2 1A 02 FB | 	rdlong	arg05, objptr
248a4     01 00 00 FF 
248a8     26 E4 85 F1 | 	sub	objptr, ##550
248ac     0D 29 52 F2 | 	cmps	local02, arg05 wc
248b0     01 00 00 3F 
248b4     26 E4 05 31 |  if_ae	add	objptr, ##550
248b8     F2 28 02 3B |  if_ae	rdlong	local02, objptr
248bc     01 00 00 3F 
248c0     26 E4 85 31 |  if_ae	sub	objptr, ##550
248c4     DD E4 05 F1 | 	add	objptr, #221
248c8     F2 12 02 FB | 	rdlong	arg01, objptr
248cc     14 E4 05 F1 | 	add	objptr, #20
248d0     F2 1A 02 FB | 	rdlong	arg05, objptr
248d4     02 1A 66 F0 | 	shl	arg05, #2
248d8     0B 1B 02 FD | 	qmul	arg05, arg03
248dc                 | ' if x1>x2
248dc                 | '   x1,x2:=x2,x1
248dc                 | ' if x1<0 
248dc                 | '   x1:=0
248dc                 | ' if x2>=xres
248dc                 | '   x2:=xres-1  
248dc     01 28 86 31 |  if_ae	sub	local02, #1
248e0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
248e0     01 16 06 F6 | 	mov	arg03, #1
248e4     14 17 02 F1 | 	add	arg03, local02
248e8     13 17 82 F1 | 	sub	arg03, local01
248ec     0C 15 02 F6 | 	mov	arg02, arg04
248f0     00 18 06 F6 | 	mov	arg04, #0
248f4     01 1A 06 F6 | 	mov	arg05, #1
248f8     0A 00 00 FF 
248fc     DB E5 05 F1 | 	add	objptr, ##5595
24900     18 28 62 FD | 	getqx	local02
24904     13 29 02 F1 | 	add	local02, local01
24908     14 13 02 F1 | 	add	arg01, local02
2490c     9C 1B B0 FD | 	call	#_psram_spin2_fill
24910     0B 00 00 FF 
24914     CC E4 85 F1 | 	sub	objptr, ##5836
24918                 | LR__2780
24918     A7 F0 03 F6 | 	mov	ptra, fp
2491c     B2 00 A0 FD | 	call	#popregs_
24920                 | _hg010b_spin2_fastline_ret
24920     2D 00 64 FD | 	ret
24924                 | 
24924                 | ' 
24924                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
24924                 | _hg010b_spin2_draw
24924     0E 4A 05 F6 | 	mov	COUNT_, #14
24928     A8 00 A0 FD | 	call	#pushregs_
2492c     09 27 02 F6 | 	mov	local01, arg01
24930     0A 29 02 F6 | 	mov	local02, arg02
24934     0B 2B 02 F6 | 	mov	local03, arg03
24938     0C 2D 02 F6 | 	mov	local04, arg04
2493c     0D 2F 02 F6 | 	mov	local05, arg05
24940                 | ' 
24940                 | ' if (y1==y2)
24940     16 29 0A F2 | 	cmp	local02, local04 wz
24944     18 00 90 5D |  if_ne	jmp	#LR__2790
24948                 | '   fastline(x1,x2,y1,c)
24948     13 13 02 F6 | 	mov	arg01, local01
2494c     15 15 02 F6 | 	mov	arg02, local03
24950     14 17 02 F6 | 	mov	arg03, local02
24954     17 19 02 F6 | 	mov	arg04, local05
24958     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
2495c     F8 00 90 FD | 	jmp	#LR__2796
24960                 | LR__2790
24960                 | ' else  
24960                 | '   x:=x1
24960     13 31 02 F6 | 	mov	local06, local01
24964                 | '   y:=y1
24964     14 33 02 F6 | 	mov	local07, local02
24968                 | ' 
24968                 | '   if (x1<x2) 
24968     15 27 52 F2 | 	cmps	local01, local03 wc
2496c                 | '     xi:=1
2496c     01 34 06 C6 |  if_b	mov	local08, #1
24970                 | '     dx:=x2-x1
24970     15 37 02 C6 |  if_b	mov	local09, local03
24974     13 37 82 C1 |  if_b	sub	local09, local01
24978                 | '   else
24978                 | '     xi:=-1
24978     01 34 66 36 |  if_ae	neg	local08, #1
2497c                 | '     dx:=x1-x2
2497c     15 27 82 31 |  if_ae	sub	local01, local03
24980     13 37 02 36 |  if_ae	mov	local09, local01
24984                 | '   
24984                 | '   if (y1<y2) 
24984     16 29 52 F2 | 	cmps	local02, local04 wc
24988                 | '     yi:=1
24988     01 38 06 C6 |  if_b	mov	local10, #1
2498c                 | '     dy:=y2-y1
2498c     16 3B 02 C6 |  if_b	mov	local11, local04
24990     14 3B 82 C1 |  if_b	sub	local11, local02
24994                 | '   else
24994                 | '     yi:=-1
24994     01 38 66 36 |  if_ae	neg	local10, #1
24998                 | '     dy:=y1-y2
24998     16 29 82 31 |  if_ae	sub	local02, local04
2499c     14 3B 02 36 |  if_ae	mov	local11, local02
249a0                 | ' 
249a0                 | '   putpixel(x,y,c)
249a0     17 17 02 F6 | 	mov	arg03, local05
249a4     18 13 02 F6 | 	mov	arg01, local06
249a8     19 15 02 F6 | 	mov	arg02, local07
249ac     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
249b0                 | ' 
249b0                 | '   if (dx>dy)
249b0     1D 37 5A F2 | 	cmps	local09, local11 wcz
249b4     50 00 90 ED |  if_be	jmp	#LR__2792
249b8                 | '     ai:=(dy-dx)*2
249b8     1D 3D 02 F6 | 	mov	local12, local11
249bc     1B 3D 82 F1 | 	sub	local12, local09
249c0     01 3C 66 F0 | 	shl	local12, #1
249c4                 | '     bi:=dy*2
249c4     01 3A 66 F0 | 	shl	local11, #1
249c8     1D 3F 02 F6 | 	mov	local13, local11
249cc                 | '     d:= bi-dx
249cc     1F 41 02 F6 | 	mov	local14, local13
249d0     1B 41 82 F1 | 	sub	local14, local09
249d4                 | '     repeat while (x<>x2) 
249d4                 | LR__2791
249d4     15 31 0A F2 | 	cmp	local06, local03 wz
249d8     7C 00 90 AD |  if_e	jmp	#LR__2795
249dc                 | '       if (d>=0) 
249dc     00 40 56 F2 | 	cmps	local14, #0 wc
249e0                 | '         x+=xi
249e0     1A 31 02 31 |  if_ae	add	local06, local08
249e4                 | '         y+=yi
249e4     1C 33 02 31 |  if_ae	add	local07, local10
249e8                 | '         d+=ai
249e8     1E 41 02 31 |  if_ae	add	local14, local12
249ec                 | '       else
249ec                 | '         d+=bi
249ec     1F 41 02 C1 |  if_b	add	local14, local13
249f0                 | '         x+=xi
249f0     1A 31 02 C1 |  if_b	add	local06, local08
249f4                 | '       putpixel(x,y,c)
249f4     18 13 02 F6 | 	mov	arg01, local06
249f8     19 15 02 F6 | 	mov	arg02, local07
249fc     17 17 02 F6 | 	mov	arg03, local05
24a00     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
24a04     CC FF 9F FD | 	jmp	#LR__2791
24a08                 | LR__2792
24a08                 | '   else
24a08                 | '     ai:=(dx-dy)*2
24a08     1B 3D 02 F6 | 	mov	local12, local09
24a0c     1D 3D 82 F1 | 	sub	local12, local11
24a10     01 3C 66 F0 | 	shl	local12, #1
24a14                 | '     bi:=dx*2
24a14     01 36 66 F0 | 	shl	local09, #1
24a18     1B 3F 02 F6 | 	mov	local13, local09
24a1c                 | '     d:=bi-dy
24a1c     1F 41 02 F6 | 	mov	local14, local13
24a20     1D 41 82 F1 | 	sub	local14, local11
24a24                 | '     repeat while (y<>y2)
24a24                 | LR__2793
24a24     16 33 0A F2 | 	cmp	local07, local04 wz
24a28     2C 00 90 AD |  if_e	jmp	#LR__2794
24a2c                 | '       if (d>=0)
24a2c     00 40 56 F2 | 	cmps	local14, #0 wc
24a30                 | '         x+=xi
24a30     1A 31 02 31 |  if_ae	add	local06, local08
24a34                 | '         y+=yi
24a34     1C 33 02 31 |  if_ae	add	local07, local10
24a38                 | '         d+=ai
24a38     1E 41 02 31 |  if_ae	add	local14, local12
24a3c                 | '       else
24a3c                 | '         d+=bi
24a3c     1F 41 02 C1 |  if_b	add	local14, local13
24a40                 | '         y+=yi
24a40     1C 33 02 C1 |  if_b	add	local07, local10
24a44                 | '       putpixel(x, y,c)
24a44     18 13 02 F6 | 	mov	arg01, local06
24a48     19 15 02 F6 | 	mov	arg02, local07
24a4c     17 17 02 F6 | 	mov	arg03, local05
24a50     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
24a54     CC FF 9F FD | 	jmp	#LR__2793
24a58                 | LR__2794
24a58                 | LR__2795
24a58                 | LR__2796
24a58     A7 F0 03 F6 | 	mov	ptra, fp
24a5c     B2 00 A0 FD | 	call	#popregs_
24a60                 | _hg010b_spin2_draw_ret
24a60     2D 00 64 FD | 	ret
24a64                 | 
24a64                 | '  
24a64                 | ' pub fillpush(val) 
24a64                 | _hg010b_spin2_fillpush
24a64                 | ' fillstack[fillptr]:=val
24a64     0B 00 00 FF 
24a68     BA E4 05 F1 | 	add	objptr, ##5818
24a6c     F2 00 02 FB | 	rdlong	_var01, objptr
24a70     02 00 66 F0 | 	shl	_var01, #2
24a74     0A 00 00 FF 
24a78     00 E4 85 F1 | 	sub	objptr, ##5120
24a7c     F2 00 02 F1 | 	add	_var01, objptr
24a80     00 13 62 FC | 	wrlong	arg01, _var01
24a84                 | ' fillptr+=1   
24a84     0A 00 00 FF 
24a88     00 E4 05 F1 | 	add	objptr, ##5120
24a8c     F2 00 02 FB | 	rdlong	_var01, objptr
24a90     01 00 06 F1 | 	add	_var01, #1
24a94     F2 00 62 FC | 	wrlong	_var01, objptr
24a98     0B 00 00 FF 
24a9c     BA E4 85 F1 | 	sub	objptr, ##5818
24aa0                 | _hg010b_spin2_fillpush_ret
24aa0     2D 00 64 FD | 	ret
24aa4                 | 
24aa4                 | ' 
24aa4                 | '     
24aa4                 | ' pub fillpop() : val
24aa4                 | _hg010b_spin2_fillpop
24aa4                 | ' 
24aa4                 | ' fillptr-=1
24aa4     0B 00 00 FF 
24aa8     BA E4 05 F1 | 	add	objptr, ##5818
24aac     F2 FA 01 FB | 	rdlong	result1, objptr
24ab0     01 FA 85 F1 | 	sub	result1, #1
24ab4     F2 FA 61 FC | 	wrlong	result1, objptr
24ab8                 | ' if fillptr<0
24ab8     0B 00 00 FF 
24abc     BA E4 85 F1 | 	sub	objptr, ##5818
24ac0     00 FA 55 F2 | 	cmps	result1, #0 wc
24ac4                 | '   fillptr:=0
24ac4     0B 00 00 CF 
24ac8     BA E4 05 C1 |  if_b	add	objptr, ##5818
24acc     F2 00 68 CC |  if_b	wrlong	#0, objptr
24ad0     0B 00 00 CF 
24ad4     BA E4 85 C1 |  if_b	sub	objptr, ##5818
24ad8                 | '   val:=-12345
24ad8     E7 FF 7F CF 
24adc     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
24ae0     28 00 90 CD |  if_b	jmp	#LR__2800
24ae4                 | ' else 
24ae4                 | '   val:=fillstack[fillptr]
24ae4     0B 00 00 FF 
24ae8     BA E4 05 F1 | 	add	objptr, ##5818
24aec     F2 00 02 FB | 	rdlong	_var01, objptr
24af0     02 00 66 F0 | 	shl	_var01, #2
24af4     0A 00 00 FF 
24af8     00 E4 85 F1 | 	sub	objptr, ##5120
24afc     F2 00 02 F1 | 	add	_var01, objptr
24b00     00 01 02 FB | 	rdlong	_var01, _var01
24b04     01 00 00 FF 
24b08     BA E4 85 F1 | 	sub	objptr, ##698
24b0c                 | LR__2800
24b0c                 | ' return val
24b0c     00 FB 01 F6 | 	mov	result1, _var01
24b10                 | _hg010b_spin2_fillpop_ret
24b10     2D 00 64 FD | 	ret
24b14                 | 
24b14                 | ' 
24b14                 | '       
24b14                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
24b14                 | _hg010b_spin2_fill
24b14     0B 4A 05 F6 | 	mov	COUNT_, #11
24b18     A8 00 A0 FD | 	call	#pushregs_
24b1c                 | ' 
24b1c                 | ' newcolor:=newcolor & 255
24b1c     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
24b20                 | ' oldcolor:=oldcolor & 255
24b20     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
24b24                 | ' 
24b24                 | ' if (oldcolor == newcolor) 
24b24     13 29 0A F2 | 	cmp	local02, local01 wz
24b28                 | '   return
24b28     70 02 90 AD |  if_e	jmp	#LR__2819
24b2c                 | ' 
24b2c                 | ' fillptr:=0
24b2c     0B 00 00 FF 
24b30     BA E4 05 F1 | 	add	objptr, ##5818
24b34     F2 00 68 FC | 	wrlong	#0, objptr
24b38                 | ' fillmax:=0
24b38     04 E4 05 F1 | 	add	objptr, #4
24b3c     F2 00 68 FC | 	wrlong	#0, objptr
24b40     0B 00 00 FF 
24b44     BE E4 85 F1 | 	sub	objptr, ##5822
24b48                 | ' fillpush(x)
24b48     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
24b4c                 | ' fillpush(y)
24b4c     0A 13 02 F6 | 	mov	arg01, arg02
24b50     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
24b54                 | ' y:=fillpop()
24b54     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
24b58     FD 2A 02 F6 | 	mov	local03, result1
24b5c                 | ' x:=fillpop()
24b5c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
24b60     FD 2C 02 F6 | 	mov	local04, result1
24b64                 | ' 'pinhigh(38)
24b64                 | ' repeat while (x>-1)       
24b64                 | LR__2810
24b64     00 2C 56 F2 | 	cmps	local04, #0 wc
24b68     30 02 90 CD |  if_b	jmp	#LR__2818
24b6c                 | '  ' pintoggle(39)
24b6c                 | '   x1 := x
24b6c     16 2F 02 F6 | 	mov	local05, local04
24b70                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
24b70                 | LR__2811
24b70     00 30 06 F6 | 	mov	local06, #0
24b74     00 32 06 F6 | 	mov	local07, #0
24b78     00 2E 56 F2 | 	cmps	local05, #0 wc
24b7c     01 32 66 36 |  if_ae	neg	local07, #1
24b80     00 32 0E F2 | 	cmp	local07, #0 wz
24b84     00 30 26 56 |  if_ne	not	local06, #0
24b88     00 34 06 F6 | 	mov	local08, #0
24b8c     00 36 06 F6 | 	mov	local09, #0
24b90     15 15 02 F6 | 	mov	arg02, local03
24b94     17 13 02 F6 | 	mov	arg01, local05
24b98     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24b9c     14 FB 09 F2 | 	cmp	result1, local02 wz
24ba0     00 36 26 A6 |  if_e	not	local09, #0
24ba4     00 36 0E F2 | 	cmp	local09, #0 wz
24ba8     00 34 26 56 |  if_ne	not	local08, #0
24bac     1A 31 CA F7 | 	test	local06, local08 wz
24bb0                 | '     x1--
24bb0     01 2E 86 51 |  if_ne	sub	local05, #1
24bb4     B8 FF 9F 5D |  if_ne	jmp	#LR__2811
24bb8                 | '   x1++
24bb8     01 2E 06 F1 | 	add	local05, #1
24bbc                 | '   spanabove := 0
24bbc     00 38 06 F6 | 	mov	local10, #0
24bc0                 | '   spanbelow := 0
24bc0     00 3A 06 F6 | 	mov	local11, #0
24bc4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
24bc4                 | LR__2812
24bc4     00 30 06 F6 | 	mov	local06, #0
24bc8     02 00 00 FF 
24bcc     00 2E 56 F2 | 	cmps	local05, ##1024 wc
24bd0     00 30 26 C6 |  if_b	not	local06, #0
24bd4     00 34 06 F6 | 	mov	local08, #0
24bd8     00 36 06 F6 | 	mov	local09, #0
24bdc     15 15 02 F6 | 	mov	arg02, local03
24be0     17 13 02 F6 | 	mov	arg01, local05
24be4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
24be8     14 FB 09 F2 | 	cmp	result1, local02 wz
24bec     00 36 26 A6 |  if_e	not	local09, #0
24bf0     00 36 0E F2 | 	cmp	local09, #0 wz
24bf4     00 34 26 56 |  if_ne	not	local08, #0
24bf8     1A 31 CA F7 | 	test	local06, local08 wz
24bfc     88 01 90 AD |  if_e	jmp	#LR__2817
24c00                 | '     putpixel2 (x1,y, newcolor & 255)
24c00     13 17 E2 F8 | 	getbyte	arg03, local01, #0
24c04     17 13 02 F6 | 	mov	arg01, local05
24c08     15 15 02 F6 | 	mov	arg02, local03
24c0c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
24c10                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
24c10     00 30 06 F6 | 	mov	local06, #0
24c14     00 32 06 F6 | 	mov	local07, #0
24c18     00 38 0E F2 | 	cmp	local10, #0 wz
24c1c     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
24c20     01 32 66 26 |  if_nc_and_z	neg	local07, #1
24c24     00 32 0E F2 | 	cmp	local07, #0 wz
24c28     00 30 26 56 |  if_ne	not	local06, #0
24c2c     00 34 06 F6 | 	mov	local08, #0
24c30     00 36 06 F6 | 	mov	local09, #0
24c34     15 15 02 F6 | 	mov	arg02, local03
24c38     01 14 86 F1 | 	sub	arg02, #1
24c3c     17 13 02 F6 | 	mov	arg01, local05
24c40     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24c44     14 FB 09 F2 | 	cmp	result1, local02 wz
24c48     00 36 26 A6 |  if_e	not	local09, #0
24c4c     00 36 0E F2 | 	cmp	local09, #0 wz
24c50     00 34 26 56 |  if_ne	not	local08, #0
24c54     1A 31 CA F7 | 	test	local06, local08 wz
24c58     1C 00 90 AD |  if_e	jmp	#LR__2813
24c5c                 | '       fillpush(x1)
24c5c     17 13 02 F6 | 	mov	arg01, local05
24c60     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
24c64                 | '       fillpush(y-1)
24c64     15 13 02 F6 | 	mov	arg01, local03
24c68     01 12 86 F1 | 	sub	arg01, #1
24c6c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
24c70                 | '       spanabove := 1 
24c70     01 38 06 F6 | 	mov	local10, #1
24c74     4C 00 90 FD | 	jmp	#LR__2814
24c78                 | LR__2813
24c78                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
24c78     00 30 06 F6 | 	mov	local06, #0
24c7c     00 32 06 F6 | 	mov	local07, #0
24c80     00 38 0E F2 | 	cmp	local10, #0 wz
24c84     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
24c88     01 32 66 16 |  if_a	neg	local07, #1
24c8c     00 32 0E F2 | 	cmp	local07, #0 wz
24c90     00 30 26 56 |  if_ne	not	local06, #0
24c94     00 34 06 F6 | 	mov	local08, #0
24c98     00 36 06 F6 | 	mov	local09, #0
24c9c     15 15 02 F6 | 	mov	arg02, local03
24ca0     01 14 86 F1 | 	sub	arg02, #1
24ca4     17 13 02 F6 | 	mov	arg01, local05
24ca8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24cac     14 FB 09 F2 | 	cmp	result1, local02 wz
24cb0     00 36 26 56 |  if_ne	not	local09, #0
24cb4     00 36 0E F2 | 	cmp	local09, #0 wz
24cb8     00 34 26 56 |  if_ne	not	local08, #0
24cbc     1A 31 CA F7 | 	test	local06, local08 wz
24cc0                 | '       spanabove := 0 
24cc0     00 38 06 56 |  if_ne	mov	local10, #0
24cc4                 | LR__2814
24cc4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
24cc4     00 30 06 F6 | 	mov	local06, #0
24cc8     00 32 06 F6 | 	mov	local07, #0
24ccc     00 3A 0E F2 | 	cmp	local11, #0 wz
24cd0     01 00 00 AF 
24cd4     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
24cd8     01 32 66 86 |  if_c_and_z	neg	local07, #1
24cdc     00 32 0E F2 | 	cmp	local07, #0 wz
24ce0     00 30 26 56 |  if_ne	not	local06, #0
24ce4     00 34 06 F6 | 	mov	local08, #0
24ce8     00 36 06 F6 | 	mov	local09, #0
24cec     15 15 02 F6 | 	mov	arg02, local03
24cf0     01 14 06 F1 | 	add	arg02, #1
24cf4     17 13 02 F6 | 	mov	arg01, local05
24cf8     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24cfc     14 FB 09 F2 | 	cmp	result1, local02 wz
24d00     00 36 26 A6 |  if_e	not	local09, #0
24d04     00 36 0E F2 | 	cmp	local09, #0 wz
24d08     00 34 26 56 |  if_ne	not	local08, #0
24d0c     1A 31 CA F7 | 	test	local06, local08 wz
24d10     1C 00 90 AD |  if_e	jmp	#LR__2815
24d14                 | '       fillpush(x1)
24d14     17 13 02 F6 | 	mov	arg01, local05
24d18     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
24d1c                 | '       fillpush(y + 1)
24d1c     15 13 02 F6 | 	mov	arg01, local03
24d20     01 12 06 F1 | 	add	arg01, #1
24d24     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
24d28                 | '       spanBelow := 1
24d28     01 3A 06 F6 | 	mov	local11, #1
24d2c     50 00 90 FD | 	jmp	#LR__2816
24d30                 | LR__2815
24d30                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
24d30     00 30 06 F6 | 	mov	local06, #0
24d34     00 32 06 F6 | 	mov	local07, #0
24d38     00 3A 0E F2 | 	cmp	local11, #0 wz
24d3c     01 00 00 5F 
24d40     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
24d44     01 32 66 46 |  if_c_and_nz	neg	local07, #1
24d48     00 32 0E F2 | 	cmp	local07, #0 wz
24d4c     00 30 26 56 |  if_ne	not	local06, #0
24d50     00 34 06 F6 | 	mov	local08, #0
24d54     00 36 06 F6 | 	mov	local09, #0
24d58     15 15 02 F6 | 	mov	arg02, local03
24d5c     01 14 06 F1 | 	add	arg02, #1
24d60     17 13 02 F6 | 	mov	arg01, local05
24d64     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
24d68     14 FB 09 F2 | 	cmp	result1, local02 wz
24d6c     00 36 26 56 |  if_ne	not	local09, #0
24d70     00 36 0E F2 | 	cmp	local09, #0 wz
24d74     00 34 26 56 |  if_ne	not	local08, #0
24d78     1A 31 CA F7 | 	test	local06, local08 wz
24d7c                 | '       spanbelow := 0
24d7c     00 3A 06 56 |  if_ne	mov	local11, #0
24d80                 | LR__2816
24d80                 | '     x1++
24d80     01 2E 06 F1 | 	add	local05, #1
24d84     3C FE 9F FD | 	jmp	#LR__2812
24d88                 | LR__2817
24d88                 | '   y:=fillpop()
24d88     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
24d8c     FD 2A 02 F6 | 	mov	local03, result1
24d90                 | '   x:=fillpop()
24d90     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
24d94     FD 2C 02 F6 | 	mov	local04, result1
24d98     C8 FD 9F FD | 	jmp	#LR__2810
24d9c                 | LR__2818
24d9c                 | LR__2819
24d9c     A7 F0 03 F6 | 	mov	ptra, fp
24da0     B2 00 A0 FD | 	call	#popregs_
24da4                 | _hg010b_spin2_fill_ret
24da4     2D 00 64 FD | 	ret
24da8                 | 
24da8                 | ' 'pinlow(38)    
24da8                 | ' 
24da8                 | ' '-- A filled circle -----------------------------------------------------
24da8                 | ' 
24da8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
24da8                 | _hg010b_spin2_fcircle
24da8     08 4A 05 F6 | 	mov	COUNT_, #8
24dac     A8 00 A0 FD | 	call	#pushregs_
24db0     0B 27 02 F6 | 	mov	local01, arg03
24db4     FF FF 7F FF 
24db8     FE 27 06 FD | 	qmul	local01, ##-2
24dbc     09 29 02 F6 | 	mov	local02, arg01
24dc0     0A 2B 02 F6 | 	mov	local03, arg02
24dc4     0C 2D 02 F6 | 	mov	local04, arg04
24dc8                 | ' 
24dc8                 | ' d:=5-4*r
24dc8     13 19 02 F6 | 	mov	arg04, local01
24dcc     02 18 66 F0 | 	shl	arg04, #2
24dd0     05 2E 06 F6 | 	mov	local05, #5
24dd4     0C 2F 82 F1 | 	sub	local05, arg04
24dd8                 | ' x:=0
24dd8     00 30 06 F6 | 	mov	local06, #0
24ddc                 | ' y:=r
24ddc                 | ' da:=(-2*r+5)*4
24ddc                 | ' db:=3*4
24ddc     0C 32 06 F6 | 	mov	local07, #12
24de0                 | ' repeat while (x<=y) 
24de0     18 34 62 FD | 	getqx	local08
24de4     05 34 06 F1 | 	add	local08, #5
24de8     02 34 66 F0 | 	shl	local08, #2
24dec                 | LR__2820
24dec     13 31 5A F2 | 	cmps	local06, local01 wcz
24df0     B4 00 90 1D |  if_a	jmp	#LR__2822
24df4                 | '   fastline(x0-x,x0+x,y0-y,c)
24df4     14 13 02 F6 | 	mov	arg01, local02
24df8     18 13 82 F1 | 	sub	arg01, local06
24dfc     14 15 02 F6 | 	mov	arg02, local02
24e00     18 15 02 F1 | 	add	arg02, local06
24e04     15 17 02 F6 | 	mov	arg03, local03
24e08     13 17 82 F1 | 	sub	arg03, local01
24e0c     16 19 02 F6 | 	mov	arg04, local04
24e10     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24e14                 | '   fastline(x0-x,x0+x,y0+y,c)
24e14     14 13 02 F6 | 	mov	arg01, local02
24e18     18 13 82 F1 | 	sub	arg01, local06
24e1c     14 15 02 F6 | 	mov	arg02, local02
24e20     18 15 02 F1 | 	add	arg02, local06
24e24     15 17 02 F6 | 	mov	arg03, local03
24e28     13 17 02 F1 | 	add	arg03, local01
24e2c     16 19 02 F6 | 	mov	arg04, local04
24e30     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24e34                 | '   fastline(x0-y,x0+y,y0-x,c)
24e34     14 13 02 F6 | 	mov	arg01, local02
24e38     13 13 82 F1 | 	sub	arg01, local01
24e3c     14 15 02 F6 | 	mov	arg02, local02
24e40     13 15 02 F1 | 	add	arg02, local01
24e44     15 17 02 F6 | 	mov	arg03, local03
24e48     18 17 82 F1 | 	sub	arg03, local06
24e4c     16 19 02 F6 | 	mov	arg04, local04
24e50     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24e54                 | '   fastline(x0-y,x0+y,y0+x,c)
24e54     14 13 02 F6 | 	mov	arg01, local02
24e58     13 13 82 F1 | 	sub	arg01, local01
24e5c     14 15 02 F6 | 	mov	arg02, local02
24e60     13 15 02 F1 | 	add	arg02, local01
24e64     15 17 02 F6 | 	mov	arg03, local03
24e68     18 17 02 F1 | 	add	arg03, local06
24e6c     16 19 02 F6 | 	mov	arg04, local04
24e70     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
24e74                 | '   if d>0 
24e74     01 2E 56 F2 | 	cmps	local05, #1 wc
24e78     18 00 90 CD |  if_b	jmp	#LR__2821
24e7c                 | '     d+=da
24e7c     1A 2F 02 F1 | 	add	local05, local08
24e80                 | '     y-=1
24e80     01 26 86 F1 | 	sub	local01, #1
24e84                 | '     x+=1
24e84     01 30 06 F1 | 	add	local06, #1
24e88                 | '     da+=4*4
24e88     10 34 06 F1 | 	add	local08, #16
24e8c                 | '     db+=2*4
24e8c     08 32 06 F1 | 	add	local07, #8
24e90     58 FF 9F FD | 	jmp	#LR__2820
24e94                 | LR__2821
24e94                 | '   else
24e94                 | '     d+=db
24e94     19 2F 02 F1 | 	add	local05, local07
24e98                 | '     x+=1
24e98     01 30 06 F1 | 	add	local06, #1
24e9c                 | '     da+=2*4
24e9c     08 34 06 F1 | 	add	local08, #8
24ea0                 | '     db+=2*4
24ea0     08 32 06 F1 | 	add	local07, #8
24ea4     44 FF 9F FD | 	jmp	#LR__2820
24ea8                 | LR__2822
24ea8     A7 F0 03 F6 | 	mov	ptra, fp
24eac     B2 00 A0 FD | 	call	#popregs_
24eb0                 | _hg010b_spin2_fcircle_ret
24eb0     2D 00 64 FD | 	ret
24eb4                 | 
24eb4                 | '  
24eb4                 | ' '-- A circle ------------------------------------------------------------ 
24eb4                 | '  
24eb4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
24eb4                 | _hg010b_spin2_circle
24eb4     08 4A 05 F6 | 	mov	COUNT_, #8
24eb8     A8 00 A0 FD | 	call	#pushregs_
24ebc     0B 27 02 F6 | 	mov	local01, arg03
24ec0     FF FF 7F FF 
24ec4     FE 27 06 FD | 	qmul	local01, ##-2
24ec8     09 29 02 F6 | 	mov	local02, arg01
24ecc     0A 2B 02 F6 | 	mov	local03, arg02
24ed0     0C 2D 02 F6 | 	mov	local04, arg04
24ed4                 | ' 
24ed4                 | '  
24ed4                 | ' d:=5-4*r
24ed4     13 19 02 F6 | 	mov	arg04, local01
24ed8     02 18 66 F0 | 	shl	arg04, #2
24edc     05 2E 06 F6 | 	mov	local05, #5
24ee0     0C 2F 82 F1 | 	sub	local05, arg04
24ee4                 | ' x:=0
24ee4     00 30 06 F6 | 	mov	local06, #0
24ee8                 | ' y:=r
24ee8                 | ' da:=(-2*r+5)*4
24ee8                 | ' db:=3*4
24ee8     0C 32 06 F6 | 	mov	local07, #12
24eec                 | ' repeat while (x<=y) 
24eec     18 34 62 FD | 	getqx	local08
24ef0     05 34 06 F1 | 	add	local08, #5
24ef4     02 34 66 F0 | 	shl	local08, #2
24ef8                 | LR__2830
24ef8     13 31 5A F2 | 	cmps	local06, local01 wcz
24efc     F4 00 90 1D |  if_a	jmp	#LR__2832
24f00                 | '   putpixel(x0-x,y0-y,c)
24f00     14 13 02 F6 | 	mov	arg01, local02
24f04     18 13 82 F1 | 	sub	arg01, local06
24f08     15 15 02 F6 | 	mov	arg02, local03
24f0c     13 15 82 F1 | 	sub	arg02, local01
24f10     16 17 02 F6 | 	mov	arg03, local04
24f14     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24f18                 | '   putpixel(x0-x,y0+y,c)
24f18     14 13 02 F6 | 	mov	arg01, local02
24f1c     18 13 82 F1 | 	sub	arg01, local06
24f20     15 15 02 F6 | 	mov	arg02, local03
24f24     13 15 02 F1 | 	add	arg02, local01
24f28     16 17 02 F6 | 	mov	arg03, local04
24f2c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24f30                 | '   putpixel(x0+x,y0-y,c)
24f30     14 13 02 F6 | 	mov	arg01, local02
24f34     18 13 02 F1 | 	add	arg01, local06
24f38     15 15 02 F6 | 	mov	arg02, local03
24f3c     13 15 82 F1 | 	sub	arg02, local01
24f40     16 17 02 F6 | 	mov	arg03, local04
24f44     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24f48                 | '   putpixel(x0+x,y0+y,c)
24f48     14 13 02 F6 | 	mov	arg01, local02
24f4c     18 13 02 F1 | 	add	arg01, local06
24f50     15 15 02 F6 | 	mov	arg02, local03
24f54     13 15 02 F1 | 	add	arg02, local01
24f58     16 17 02 F6 | 	mov	arg03, local04
24f5c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24f60                 | '   putpixel(x0-y,y0-x,c)
24f60     14 13 02 F6 | 	mov	arg01, local02
24f64     13 13 82 F1 | 	sub	arg01, local01
24f68     15 15 02 F6 | 	mov	arg02, local03
24f6c     18 15 82 F1 | 	sub	arg02, local06
24f70     16 17 02 F6 | 	mov	arg03, local04
24f74     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24f78                 | '   putpixel(x0-y,y0+x,c)
24f78     14 13 02 F6 | 	mov	arg01, local02
24f7c     13 13 82 F1 | 	sub	arg01, local01
24f80     15 15 02 F6 | 	mov	arg02, local03
24f84     18 15 02 F1 | 	add	arg02, local06
24f88     16 17 02 F6 | 	mov	arg03, local04
24f8c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24f90                 | '   putpixel(x0+y,y0-x,c)
24f90     14 13 02 F6 | 	mov	arg01, local02
24f94     13 13 02 F1 | 	add	arg01, local01
24f98     15 15 02 F6 | 	mov	arg02, local03
24f9c     18 15 82 F1 | 	sub	arg02, local06
24fa0     16 17 02 F6 | 	mov	arg03, local04
24fa4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24fa8                 | '   putpixel(x0+y,y0+x,c)
24fa8     14 13 02 F6 | 	mov	arg01, local02
24fac     13 13 02 F1 | 	add	arg01, local01
24fb0     15 15 02 F6 | 	mov	arg02, local03
24fb4     18 15 02 F1 | 	add	arg02, local06
24fb8     16 17 02 F6 | 	mov	arg03, local04
24fbc     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24fc0                 | '   if d>0 
24fc0     01 2E 56 F2 | 	cmps	local05, #1 wc
24fc4     18 00 90 CD |  if_b	jmp	#LR__2831
24fc8                 | '     d+=da
24fc8     1A 2F 02 F1 | 	add	local05, local08
24fcc                 | '     y-=1
24fcc     01 26 86 F1 | 	sub	local01, #1
24fd0                 | '     x+=1
24fd0     01 30 06 F1 | 	add	local06, #1
24fd4                 | '     da+=4*4
24fd4     10 34 06 F1 | 	add	local08, #16
24fd8                 | '     db+=2*4
24fd8     08 32 06 F1 | 	add	local07, #8
24fdc     18 FF 9F FD | 	jmp	#LR__2830
24fe0                 | LR__2831
24fe0                 | '   else
24fe0                 | '     d+=db
24fe0     19 2F 02 F1 | 	add	local05, local07
24fe4                 | '     x+=1
24fe4     01 30 06 F1 | 	add	local06, #1
24fe8                 | '     da+=2*4
24fe8     08 34 06 F1 | 	add	local08, #8
24fec                 | '     db+=2*4
24fec     08 32 06 F1 | 	add	local07, #8
24ff0     04 FF 9F FD | 	jmp	#LR__2830
24ff4                 | LR__2832
24ff4     A7 F0 03 F6 | 	mov	ptra, fp
24ff8     B2 00 A0 FD | 	call	#popregs_
24ffc                 | _hg010b_spin2_circle_ret
24ffc     2D 00 64 FD | 	ret
25000                 | 
25000                 | '     
25000                 | ' '-- A frame (an empty rectangle) ---------------------------------------
25000                 | ' 
25000                 | ' pub frame(x1,y1,x2,y2,c)
25000                 | _hg010b_spin2_frame
25000     05 4A 05 F6 | 	mov	COUNT_, #5
25004     A8 00 A0 FD | 	call	#pushregs_
25008     09 27 02 F6 | 	mov	local01, arg01
2500c     0A 29 02 F6 | 	mov	local02, arg02
25010     0B 2B 02 F6 | 	mov	local03, arg03
25014     0C 2D 02 F6 | 	mov	local04, arg04
25018     0D 2F 02 F6 | 	mov	local05, arg05
2501c                 | ' 
2501c                 | ' fastline(x1,x2,y1,c)
2501c     13 13 02 F6 | 	mov	arg01, local01
25020     15 15 02 F6 | 	mov	arg02, local03
25024     14 17 02 F6 | 	mov	arg03, local02
25028     17 19 02 F6 | 	mov	arg04, local05
2502c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
25030                 | ' fastline(x1,x2,y2,c)
25030     13 13 02 F6 | 	mov	arg01, local01
25034     15 15 02 F6 | 	mov	arg02, local03
25038     16 17 02 F6 | 	mov	arg03, local04
2503c     17 19 02 F6 | 	mov	arg04, local05
25040     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
25044                 | ' line(x1,y1,x1,y2,c)
25044     13 13 02 F6 | 	mov	arg01, local01
25048     14 15 02 F6 | 	mov	arg02, local02
2504c     13 17 02 F6 | 	mov	arg03, local01
25050     16 19 02 F6 | 	mov	arg04, local04
25054     17 1B 02 F6 | 	mov	arg05, local05
25058                 | ' draw(x1,y1,x2,y2,c)
25058     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
2505c                 | ' line(x2,y1,x2,y2,c)
2505c     15 13 02 F6 | 	mov	arg01, local03
25060     14 15 02 F6 | 	mov	arg02, local02
25064     15 17 02 F6 | 	mov	arg03, local03
25068     16 19 02 F6 | 	mov	arg04, local04
2506c     17 1B 02 F6 | 	mov	arg05, local05
25070                 | ' draw(x1,y1,x2,y2,c)
25070     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
25074     A7 F0 03 F6 | 	mov	ptra, fp
25078     B2 00 A0 FD | 	call	#popregs_
2507c                 | _hg010b_spin2_frame_ret
2507c     2D 00 64 FD | 	ret
25080                 | 
25080                 | ' 
25080                 | ' '-- A box (a filled rectangle) ----------------------------------------
25080                 | ' 
25080                 | ' pub box(x1,y1,x2,y2,c) |yy
25080                 | _hg010b_spin2_box
25080     06 4A 05 F6 | 	mov	COUNT_, #6
25084     A8 00 A0 FD | 	call	#pushregs_
25088     09 27 02 F6 | 	mov	local01, arg01
2508c     0A 29 02 F6 | 	mov	local02, arg02
25090     0B 2B 02 F6 | 	mov	local03, arg03
25094     0C 2D 02 F6 | 	mov	local04, arg04
25098     0D 2F 02 F6 | 	mov	local05, arg05
2509c                 | ' 
2509c                 | ' repeat yy from y1 to y2
2509c     14 2D 52 F2 | 	cmps	local04, local02 wc
250a0     01 30 86 F6 | 	negc	local06, #1
250a4     18 2D 02 F1 | 	add	local04, local06
250a8                 | LR__2840
250a8                 | '   fastline(x1,x2,yy,c)
250a8     13 13 02 F6 | 	mov	arg01, local01
250ac     15 15 02 F6 | 	mov	arg02, local03
250b0     17 19 02 F6 | 	mov	arg04, local05
250b4     14 17 02 F6 | 	mov	arg03, local02
250b8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
250bc     18 29 02 F1 | 	add	local02, local06
250c0     16 29 0A F2 | 	cmp	local02, local04 wz
250c4     E0 FF 9F 5D |  if_ne	jmp	#LR__2840
250c8     A7 F0 03 F6 | 	mov	ptra, fp
250cc     B2 00 A0 FD | 	call	#popregs_
250d0                 | _hg010b_spin2_box_ret
250d0     2D 00 64 FD | 	ret
250d4                 | 
250d4                 | '       
250d4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
250d4                 | _hg010b_spin2_putcharxycgf
250d4                 | ' 
250d4                 | '  
250d4                 | ' repeat yy from 0 to 15
250d4     00 00 06 F6 | 	mov	_var01, #0
250d8     97 8C 48 FB | 	callpa	#(@LR__2852-@LR__2850)>>2,fcache_load_ptr_
250dc                 | LR__2850
250dc                 | ' 
250dc                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
250dc     95 E4 05 F1 | 	add	objptr, #149
250e0     F2 02 02 FB | 	rdlong	_var02, objptr
250e4     0A 02 66 F0 | 	shl	_var02, #10
250e8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
250ec     01 05 02 F1 | 	add	_var03, _var02
250f0     0B 03 02 F6 | 	mov	_var02, arg03
250f4     04 02 66 F0 | 	shl	_var02, #4
250f8     01 05 02 F1 | 	add	_var03, _var02
250fc     00 05 02 F1 | 	add	_var03, _var01
25100     02 05 C2 FA | 	rdbyte	_var03, _var03
25104                 | '   asm
25104     00 04 0E F4 | 	testb	_var03, #0 wz
25108     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
2510c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
25110     01 04 0E F4 | 	testb	_var03, #1 wz
25114     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
25118     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
2511c     02 04 0E F4 | 	testb	_var03, #2 wz
25120     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
25124     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
25128     03 04 0E F4 | 	testb	_var03, #3 wz
2512c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
25130     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
25134     04 04 0E F4 | 	testb	_var03, #4 wz
25138     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
2513c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
25140     05 04 0E F4 | 	testb	_var03, #5 wz
25144     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
25148     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
2514c     06 04 0E F4 | 	testb	_var03, #6 wz
25150     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
25154     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
25158     07 04 0E F4 | 	testb	_var03, #7 wz
2515c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
25160     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
25164                 | '   
25164                 | '   ccc[0]:=c1
25164     99 E5 05 F1 | 	add	objptr, #409
25168     F2 06 62 FC | 	wrlong	_var04, objptr
2516c                 | '   ccc[1]:=c2 
2516c     04 E4 05 F1 | 	add	objptr, #4
25170     F2 08 62 FC | 	wrlong	_var05, objptr
25174                 | '   long[mailbox0][2]:=8
25174     49 E4 85 F1 | 	sub	objptr, #73
25178     F2 04 02 FB | 	rdlong	_var03, objptr
2517c     08 04 06 F1 | 	add	_var03, #8
25180     02 11 68 FC | 	wrlong	#8, _var03
25184                 | '   long[mailbox0][1]:=@ccc
25184     45 E4 05 F1 | 	add	objptr, #69
25188     F2 04 02 F6 | 	mov	_var03, objptr
2518c     45 E4 85 F1 | 	sub	objptr, #69
25190     F2 02 02 FB | 	rdlong	_var02, objptr
25194     04 02 06 F1 | 	add	_var02, #4
25198     01 05 62 FC | 	wrlong	_var03, _var02
2519c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
2519c     0C E5 85 F1 | 	sub	objptr, #268
251a0     F2 04 02 FB | 	rdlong	_var03, objptr
251a4     0A 03 02 F6 | 	mov	_var02, arg02
251a8     00 03 02 F1 | 	add	_var02, _var01
251ac     0A 02 66 F0 | 	shl	_var02, #10
251b0     09 0B 02 F6 | 	mov	_var06, arg01
251b4     02 0A 66 F0 | 	shl	_var06, #2
251b8     05 03 02 F1 | 	add	_var02, _var06
251bc     01 05 02 F1 | 	add	_var03, _var02
251c0     00 00 78 FF 
251c4     00 04 06 F1 | 	add	_var03, ##-268435456
251c8     0C E5 05 F1 | 	add	objptr, #268
251cc     F2 0A 02 FB | 	rdlong	_var06, objptr
251d0     05 05 62 FC | 	wrlong	_var03, _var06
251d4                 | '   repeat
251d4                 | LR__2851
251d4     F2 04 02 FB | 	rdlong	_var03, objptr
251d8     02 03 02 FB | 	rdlong	_var02, _var03
251dc     00 02 56 F2 | 	cmps	_var02, #0 wc
251e0     F0 FF 9F CD |  if_b	jmp	#LR__2851
251e4     E9 E5 85 F1 | 	sub	objptr, #489
251e8     01 00 06 F1 | 	add	_var01, #1
251ec     10 00 56 F2 | 	cmps	_var01, #16 wc
251f0     E8 FE 9F CD |  if_b	jmp	#LR__2850
251f4                 | LR__2852
251f4                 | _hg010b_spin2_putcharxycgf_ret
251f4     2D 00 64 FD | 	ret
251f8                 | 
251f8                 | ' 
251f8                 | ' 
251f8                 | ' '**********************************************************************r***
251f8                 | ' '                                                                        *
251f8                 | ' ' Font related functions                                                 *
251f8                 | ' '                                                                        *
251f8                 | ' '*************************************************************************
251f8                 | ' 
251f8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
251f8                 | ' 
251f8                 | ' pub setfontfamily(afontnum)
251f8                 | _hg010b_spin2_setfontfamily
251f8                 | ' 
251f8                 | ' font_family:=afontnum
251f8     95 E4 05 F1 | 	add	objptr, #149
251fc     F2 12 62 FC | 	wrlong	arg01, objptr
25200     95 E4 85 F1 | 	sub	objptr, #149
25204                 | ' 'if afontnum==8
25204                 | ' '  font_ptr:=@amiga_font
25204                 | ' 
25204                 | ' if afontnum==4
25204     04 12 0E F2 | 	cmp	arg01, #4 wz
25208                 | '   font_ptr:=@st_font
25208     08 00 00 AF 
2520c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
25210     08 E4 05 A1 |  if_e	add	objptr, #8
25214     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
25218     08 E4 85 A1 |  if_e	sub	objptr, #8
2521c     08 00 00 AF 
25220     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
25224                 | ' if afontnum==0
25224     00 12 0E F2 | 	cmp	arg01, #0 wz
25228                 | '   font_ptr:=@vga_font
25228     08 E4 05 A1 |  if_e	add	objptr, #8
2522c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
25230     08 E4 85 A1 |  if_e	sub	objptr, #8
25234                 | _hg010b_spin2_setfontfamily_ret
25234     2D 00 64 FD | 	ret
25238                 | 
25238                 | ' 
25238                 | ' '*************************************************************************
25238                 | ' '                                                                        *
25238                 | ' '  Cursor functions                                                      *
25238                 | ' '                                                                        *
25238                 | ' '*************************************************************************
25238                 | ' 
25238                 | ' 
25238                 | ' pub setcursorpos(x,y)
25238                 | _hg010b_spin2_setcursorpos
25238                 | ' 
25238                 | ' ''---------- Set the (x,y) position of cursor
25238                 | ' 
25238                 | ' cursor_x:=x
25238     3C E4 05 F1 | 	add	objptr, #60
2523c     F2 12 52 FC | 	wrword	arg01, objptr
25240                 | ' cursor_y:=y
25240     02 E4 05 F1 | 	add	objptr, #2
25244     F2 14 42 FC | 	wrbyte	arg02, objptr
25248                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25248     02 E4 85 F1 | 	sub	objptr, #2
2524c     F2 14 E2 FA | 	rdword	arg02, objptr
25250     02 14 66 F0 | 	shl	arg02, #2
25254     02 E4 05 F1 | 	add	objptr, #2
25258     F2 16 C2 FA | 	rdbyte	arg03, objptr
2525c     3E E4 85 F1 | 	sub	objptr, #62
25260     04 16 66 F0 | 	shl	arg03, #4
25264     04 16 06 F1 | 	add	arg03, #4
25268     11 12 06 F6 | 	mov	arg01, #17
2526c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
25270                 | _hg010b_spin2_setcursorpos_ret
25270     2D 00 64 FD | 	ret
25274                 | 
25274                 | ' 
25274                 | ' pub setcursorx(x)
25274                 | _hg010b_spin2_setcursorx
25274                 | ' cursor_x:=x
25274     3C E4 05 F1 | 	add	objptr, #60
25278     F2 12 52 FC | 	wrword	arg01, objptr
2527c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2527c     F2 14 E2 FA | 	rdword	arg02, objptr
25280     02 14 66 F0 | 	shl	arg02, #2
25284     02 E4 05 F1 | 	add	objptr, #2
25288     F2 16 C2 FA | 	rdbyte	arg03, objptr
2528c     3E E4 85 F1 | 	sub	objptr, #62
25290     04 16 66 F0 | 	shl	arg03, #4
25294     04 16 06 F1 | 	add	arg03, #4
25298     11 12 06 F6 | 	mov	arg01, #17
2529c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
252a0                 | _hg010b_spin2_setcursorx_ret
252a0     2D 00 64 FD | 	ret
252a4                 | 
252a4                 | ' 
252a4                 | ' pub setcursory(y) 
252a4                 | _hg010b_spin2_setcursory
252a4                 | ' cursor_y:=y
252a4     3E E4 05 F1 | 	add	objptr, #62
252a8     F2 12 42 FC | 	wrbyte	arg01, objptr
252ac                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
252ac     02 E4 85 F1 | 	sub	objptr, #2
252b0     F2 14 E2 FA | 	rdword	arg02, objptr
252b4     02 14 66 F0 | 	shl	arg02, #2
252b8     02 E4 05 F1 | 	add	objptr, #2
252bc     F2 16 C2 FA | 	rdbyte	arg03, objptr
252c0     3E E4 85 F1 | 	sub	objptr, #62
252c4     04 16 66 F0 | 	shl	arg03, #4
252c8     04 16 06 F1 | 	add	arg03, #4
252cc     11 12 06 F6 | 	mov	arg01, #17
252d0     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
252d4                 | _hg010b_spin2_setcursory_ret
252d4     2D 00 64 FD | 	ret
252d8                 | 
252d8                 | ' 
252d8                 | ' '*************************************************************************
252d8                 | ' '                                                                        *
252d8                 | ' '  VBlank functions                                                      *
252d8                 | ' '                                                                        *
252d8                 | ' '*************************************************************************
252d8                 | ' 
252d8                 | ' pub waitvbl(amount) | i
252d8                 | _hg010b_spin2_waitvbl
252d8     03 4A 05 F6 | 	mov	COUNT_, #3
252dc     A8 00 A0 FD | 	call	#pushregs_
252e0     09 27 02 F6 | 	mov	local01, arg01
252e4                 | ' 
252e4                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
252e4                 | ' 
252e4                 | ' repeat i from 1 to amount
252e4     01 28 06 F6 | 	mov	local02, #1
252e8     01 26 56 F2 | 	cmps	local01, #1 wc
252ec     01 2A 86 F6 | 	negc	local03, #1
252f0     15 27 02 F1 | 	add	local01, local03
252f4                 | LR__2860
252f4                 | '   repeat until vblank==0
252f4                 | LR__2861
252f4     49 E4 05 F1 | 	add	objptr, #73
252f8     F2 12 0A FB | 	rdlong	arg01, objptr wz
252fc     49 E4 85 F1 | 	sub	objptr, #73
25300     0C 00 90 AD |  if_e	jmp	#LR__2862
25304                 | '     waitus(100)
25304     64 12 06 F6 | 	mov	arg01, #100
25308     C0 20 B0 FD | 	call	#__system___waitus
2530c     E4 FF 9F FD | 	jmp	#LR__2861
25310                 | LR__2862
25310                 | '   repeat until vblank==1
25310                 | LR__2863
25310     49 E4 05 F1 | 	add	objptr, #73
25314     F2 12 02 FB | 	rdlong	arg01, objptr
25318     49 E4 85 F1 | 	sub	objptr, #73
2531c     01 12 0E F2 | 	cmp	arg01, #1 wz
25320     0C 00 90 AD |  if_e	jmp	#LR__2864
25324                 | '     waitus(100)
25324     64 12 06 F6 | 	mov	arg01, #100
25328     A0 20 B0 FD | 	call	#__system___waitus
2532c     E0 FF 9F FD | 	jmp	#LR__2863
25330                 | LR__2864
25330     15 29 02 F1 | 	add	local02, local03
25334     13 29 0A F2 | 	cmp	local02, local01 wz
25338     B8 FF 9F 5D |  if_ne	jmp	#LR__2860
2533c     A7 F0 03 F6 | 	mov	ptra, fp
25340     B2 00 A0 FD | 	call	#popregs_
25344                 | _hg010b_spin2_waitvbl_ret
25344     2D 00 64 FD | 	ret
25348                 | 
25348                 | ' 
25348                 | ' ''---------- Set color #c in palette to r,g,b
25348                 | ' 
25348                 | ' pub setcolor(c,r,g,b)  |cc
25348                 | _hg010b_spin2_setcolor
25348                 | ' 
25348                 | ' cc:=r<<24+g<<16+b<<8
25348     18 14 66 F0 | 	shl	arg02, #24
2534c     10 16 66 F0 | 	shl	arg03, #16
25350     0B 15 02 F1 | 	add	arg02, arg03
25354     08 18 66 F0 | 	shl	arg04, #8
25358     0C 15 02 F1 | 	add	arg02, arg04
2535c                 | ' long[palette_ptr+4*c]:=cc
2535c     1C E4 05 F1 | 	add	objptr, #28
25360     F2 18 02 FB | 	rdlong	arg04, objptr
25364     1C E4 85 F1 | 	sub	objptr, #28
25368     02 12 66 F0 | 	shl	arg01, #2
2536c     09 19 02 F1 | 	add	arg04, arg01
25370     0C 15 62 FC | 	wrlong	arg02, arg04
25374                 | _hg010b_spin2_setcolor_ret
25374     2D 00 64 FD | 	ret
25378                 | 
25378                 | ' 
25378                 | ' 
25378                 | ' pub cls(fc,bc)   :c,i
25378                 | _hg010b_spin2_cls
25378     02 4A 05 F6 | 	mov	COUNT_, #2
2537c     A8 00 A0 FD | 	call	#pushregs_
25380     09 27 02 F6 | 	mov	local01, arg01
25384     0A 29 02 F6 | 	mov	local02, arg02
25388                 | ' 
25388                 | ' c:=bc
25388                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
25388     DD E4 05 F1 | 	add	objptr, #221
2538c     F2 12 02 FB | 	rdlong	arg01, objptr
25390     A5 E4 85 F1 | 	sub	objptr, #165
25394     F2 16 02 FB | 	rdlong	arg03, objptr
25398     02 16 66 F0 | 	shl	arg03, #2
2539c     14 15 02 F6 | 	mov	arg02, local02
253a0     00 18 06 F6 | 	mov	arg04, #0
253a4     01 1A 06 F6 | 	mov	arg05, #1
253a8     0B 00 00 FF 
253ac     94 E4 05 F1 | 	add	objptr, ##5780
253b0     F8 10 B0 FD | 	call	#_psram_spin2_fill
253b4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
253b4     0B 00 00 FF 
253b8     C8 E4 85 F1 | 	sub	objptr, ##5832
253bc     F2 12 02 FB | 	rdlong	arg01, objptr
253c0     04 E4 85 F1 | 	sub	objptr, #4
253c4     F2 16 02 FB | 	rdlong	arg03, objptr
253c8     09 17 82 F1 | 	sub	arg03, arg01
253cc     20 14 06 F6 | 	mov	arg02, #32
253d0     00 18 06 F6 | 	mov	arg04, #0
253d4     01 1A 06 F6 | 	mov	arg05, #1
253d8     0B 00 00 FF 
253dc     CC E4 05 F1 | 	add	objptr, ##5836
253e0     C8 10 B0 FD | 	call	#_psram_spin2_fill
253e4                 | ' setwritecolors(fc,bc)
253e4                 | ' 
253e4                 | ' write_color:=ff
253e4     0B 00 00 FF 
253e8     8B E4 85 F1 | 	sub	objptr, ##5771
253ec     F2 26 62 FC | 	wrlong	local01, objptr
253f0                 | ' write_background:=bb
253f0     04 E4 05 F1 | 	add	objptr, #4
253f4     F2 28 62 FC | 	wrlong	local02, objptr
253f8                 | ' cursor_x:=0
253f8     09 E4 85 F1 | 	sub	objptr, #9
253fc     F2 00 58 FC | 	wrword	#0, objptr
25400                 | ' cursor_y:=0
25400     02 E4 05 F1 | 	add	objptr, #2
25404     F2 00 48 FC | 	wrbyte	#0, objptr
25408                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25408     02 E4 85 F1 | 	sub	objptr, #2
2540c     F2 14 E2 FA | 	rdword	arg02, objptr
25410     02 14 66 F0 | 	shl	arg02, #2
25414     02 E4 05 F1 | 	add	objptr, #2
25418     F2 16 C2 FA | 	rdbyte	arg03, objptr
2541c     3E E4 85 F1 | 	sub	objptr, #62
25420     04 16 66 F0 | 	shl	arg03, #4
25424     04 16 06 F1 | 	add	arg03, #4
25428     11 12 06 F6 | 	mov	arg01, #17
2542c     90 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
25430                 | ' setcursorcolor(fc)
25430     13 13 02 F6 | 	mov	arg01, local01
25434     88 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
25438     14 FB 01 F6 | 	mov	result1, local02
2543c     00 FC 05 F6 | 	mov	result2, #0
25440     A7 F0 03 F6 | 	mov	ptra, fp
25444     B2 00 A0 FD | 	call	#popregs_
25448                 | _hg010b_spin2_cls_ret
25448     2D 00 64 FD | 	ret
2544c                 | 
2544c                 | ' 
2544c                 | ' ''---------- Output a char at the cursor position, move the cursor 
2544c                 | ' 
2544c                 | ' pub putchar(achar) | c,x,y,l,newcpl
2544c                 | _hg010b_spin2_putchar
2544c     02 4A 05 F6 | 	mov	COUNT_, #2
25450     A8 00 A0 FD | 	call	#pushregs_
25454     09 27 02 F6 | 	mov	local01, arg01
25458                 | ' 
25458                 | ' if achar==10
25458     0A 26 0E F2 | 	cmp	local01, #10 wz
2545c                 | '   crlf()
2545c     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
25460                 | ' if achar==9
25460     09 26 0E F2 | 	cmp	local01, #9 wz
25464     18 00 90 5D |  if_ne	jmp	#LR__2870
25468                 | '   cursor_x:=(cursor_x& %11110000)+16
25468     3C E4 05 F1 | 	add	objptr, #60
2546c     F2 16 E2 FA | 	rdword	arg03, objptr
25470     F0 16 06 F5 | 	and	arg03, #240
25474     10 16 06 F1 | 	add	arg03, #16
25478     F2 16 52 FC | 	wrword	arg03, objptr
2547c     3C E4 85 F1 | 	sub	objptr, #60
25480                 | LR__2870
25480                 | '   
25480                 | ' if (achar<>9) && (achar<>10) 
25480     09 26 0E F2 | 	cmp	local01, #9 wz
25484     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
25488     A8 00 90 AD |  if_e	jmp	#LR__2871
2548c                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2548c     3C E4 05 F1 | 	add	objptr, #60
25490     F2 12 E2 FA | 	rdword	arg01, objptr
25494     02 E4 05 F1 | 	add	objptr, #2
25498     F2 14 C2 FA | 	rdbyte	arg02, objptr
2549c     04 14 66 F0 | 	shl	arg02, #4
254a0     04 14 06 F1 | 	add	arg02, #4
254a4     03 E4 05 F1 | 	add	objptr, #3
254a8     F2 18 02 FB | 	rdlong	arg04, objptr
254ac     04 E4 05 F1 | 	add	objptr, #4
254b0     F2 1A 02 FB | 	rdlong	arg05, objptr
254b4     45 E4 85 F1 | 	sub	objptr, #69
254b8     13 17 02 F6 | 	mov	arg03, local01
254bc     14 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
254c0     04 E4 05 F1 | 	add	objptr, #4
254c4     F2 12 02 FB | 	rdlong	arg01, objptr
254c8     1C 00 00 FF 
254cc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
254d0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
254d4     3A E4 05 F1 | 	add	objptr, #58
254d8     F2 1A C2 FA | 	rdbyte	arg05, objptr
254dc     0D 17 02 FD | 	qmul	arg03, arg05
254e0                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
254e0     1C 00 00 FF 
254e4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
254e8     02 E4 85 F1 | 	sub	objptr, #2
254ec     F2 28 E2 FA | 	rdword	local02, objptr
254f0     01 28 46 F0 | 	shr	local02, #1
254f4     13 15 02 F6 | 	mov	arg02, local01
254f8     01 16 06 F6 | 	mov	arg03, #1
254fc     00 18 06 F6 | 	mov	arg04, #0
25500     01 1A 06 F6 | 	mov	arg05, #1
25504     0B 00 00 FF 
25508     90 E4 05 F1 | 	add	objptr, ##5776
2550c     18 26 62 FD | 	getqx	local01
25510     14 27 02 F1 | 	add	local01, local02
25514     13 13 02 F1 | 	add	arg01, local01
25518     90 0F B0 FD | 	call	#_psram_spin2_fill
2551c                 | '   cursor_x+=2
2551c     0B 00 00 FF 
25520     90 E4 85 F1 | 	sub	objptr, ##5776
25524     F2 28 E2 FA | 	rdword	local02, objptr
25528     02 28 06 F1 | 	add	local02, #2
2552c     F2 28 52 FC | 	wrword	local02, objptr
25530     3C E4 85 F1 | 	sub	objptr, #60
25534                 | LR__2871
25534                 | ' 
25534                 | ' if cursor_x>=256
25534     3C E4 05 F1 | 	add	objptr, #60
25538     F2 28 E2 FA | 	rdword	local02, objptr
2553c     3C E4 85 F1 | 	sub	objptr, #60
25540     00 29 56 F2 | 	cmps	local02, #256 wc
25544     64 00 90 CD |  if_b	jmp	#LR__2873
25548                 | '   cursor_x:=0
25548     3C E4 05 F1 | 	add	objptr, #60
2554c     F2 00 58 FC | 	wrword	#0, objptr
25550                 | '   cursor_y+=1
25550     02 E4 05 F1 | 	add	objptr, #2
25554     F2 28 C2 FA | 	rdbyte	local02, objptr
25558     01 28 06 F1 | 	add	local02, #1
2555c     F2 28 42 FC | 	wrbyte	local02, objptr
25560                 | '   if cursor_y>st_lines-1
25560     C3 E4 05 F1 | 	add	objptr, #195
25564     F2 28 02 FB | 	rdlong	local02, objptr
25568     01 28 86 F1 | 	sub	local02, #1
2556c     C3 E4 85 F1 | 	sub	objptr, #195
25570     F2 16 C2 FA | 	rdbyte	arg03, objptr
25574     3E E4 85 F1 | 	sub	objptr, #62
25578     14 17 5A F2 | 	cmps	arg03, local02 wcz
2557c     2C 00 90 ED |  if_be	jmp	#LR__2872
25580                 | '     scrollup2()
25580     00 12 06 F6 | 	mov	arg01, #0
25584     01 00 00 FF 
25588     58 14 06 F6 | 	mov	arg02, ##600
2558c     10 16 06 F6 | 	mov	arg03, #16
25590     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
25594                 | '     cursor_y:=st_lines-1
25594     01 E5 05 F1 | 	add	objptr, #257
25598     F2 28 02 FB | 	rdlong	local02, objptr
2559c     01 28 86 F1 | 	sub	local02, #1
255a0     C3 E4 85 F1 | 	sub	objptr, #195
255a4     F2 28 42 FC | 	wrbyte	local02, objptr
255a8     3E E4 85 F1 | 	sub	objptr, #62
255ac                 | LR__2872
255ac                 | LR__2873
255ac                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
255ac     3C E4 05 F1 | 	add	objptr, #60
255b0     F2 14 E2 FA | 	rdword	arg02, objptr
255b4     02 14 66 F0 | 	shl	arg02, #2
255b8     02 E4 05 F1 | 	add	objptr, #2
255bc     F2 16 C2 FA | 	rdbyte	arg03, objptr
255c0     3E E4 85 F1 | 	sub	objptr, #62
255c4     04 16 66 F0 | 	shl	arg03, #4
255c8     04 16 06 F1 | 	add	arg03, #4
255cc     11 12 06 F6 | 	mov	arg01, #17
255d0     EC EF BF FD | 	call	#_hg010b_spin2_setspritepos
255d4     A7 F0 03 F6 | 	mov	ptra, fp
255d8     B2 00 A0 FD | 	call	#popregs_
255dc                 | _hg010b_spin2_putchar_ret
255dc     2D 00 64 FD | 	ret
255e0                 | 
255e0                 | '     
255e0                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
255e0                 | ' 
255e0                 | ' pub putchar2(achar) | c,x,y,l,newcpl
255e0                 | _hg010b_spin2_putchar2
255e0     02 4A 05 F6 | 	mov	COUNT_, #2
255e4     A8 00 A0 FD | 	call	#pushregs_
255e8     09 27 02 F6 | 	mov	local01, arg01
255ec                 | ' 
255ec                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
255ec     3C E4 05 F1 | 	add	objptr, #60
255f0     F2 12 E2 FA | 	rdword	arg01, objptr
255f4     02 E4 05 F1 | 	add	objptr, #2
255f8     F2 14 C2 FA | 	rdbyte	arg02, objptr
255fc     04 14 66 F0 | 	shl	arg02, #4
25600     04 14 06 F1 | 	add	arg02, #4
25604     03 E4 05 F1 | 	add	objptr, #3
25608     F2 18 02 FB | 	rdlong	arg04, objptr
2560c     04 E4 05 F1 | 	add	objptr, #4
25610     F2 1A 02 FB | 	rdlong	arg05, objptr
25614     45 E4 85 F1 | 	sub	objptr, #69
25618     13 17 02 F6 | 	mov	arg03, local01
2561c     B4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
25620     04 E4 05 F1 | 	add	objptr, #4
25624     F2 12 02 FB | 	rdlong	arg01, objptr
25628     1C 00 00 FF 
2562c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25630     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25634     3A E4 05 F1 | 	add	objptr, #58
25638     F2 1A C2 FA | 	rdbyte	arg05, objptr
2563c     0D 17 02 FD | 	qmul	arg03, arg05
25640                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
25640     1C 00 00 FF 
25644     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25648     02 E4 85 F1 | 	sub	objptr, #2
2564c     F2 28 E2 FA | 	rdword	local02, objptr
25650     01 28 46 F0 | 	shr	local02, #1
25654     13 15 02 F6 | 	mov	arg02, local01
25658     01 16 06 F6 | 	mov	arg03, #1
2565c     00 18 06 F6 | 	mov	arg04, #0
25660     01 1A 06 F6 | 	mov	arg05, #1
25664     0B 00 00 FF 
25668     90 E4 05 F1 | 	add	objptr, ##5776
2566c     18 26 62 FD | 	getqx	local01
25670     14 27 02 F1 | 	add	local01, local02
25674     13 13 02 F1 | 	add	arg01, local01
25678     30 0E B0 FD | 	call	#_psram_spin2_fill
2567c                 | ' 
2567c                 | ' cursor_x+=2
2567c     0B 00 00 FF 
25680     90 E4 85 F1 | 	sub	objptr, ##5776
25684     F2 28 E2 FA | 	rdword	local02, objptr
25688     02 28 06 F1 | 	add	local02, #2
2568c     F2 28 52 FC | 	wrword	local02, objptr
25690                 | ' if cursor_x>=256
25690     F2 28 E2 FA | 	rdword	local02, objptr
25694     3C E4 85 F1 | 	sub	objptr, #60
25698     00 29 56 F2 | 	cmps	local02, #256 wc
2569c     64 00 90 CD |  if_b	jmp	#LR__2881
256a0                 | '   cursor_x:=0
256a0     3C E4 05 F1 | 	add	objptr, #60
256a4     F2 00 58 FC | 	wrword	#0, objptr
256a8                 | '   cursor_y+=1
256a8     02 E4 05 F1 | 	add	objptr, #2
256ac     F2 28 C2 FA | 	rdbyte	local02, objptr
256b0     01 28 06 F1 | 	add	local02, #1
256b4     F2 28 42 FC | 	wrbyte	local02, objptr
256b8                 | '   if cursor_y>st_lines-1
256b8     C3 E4 05 F1 | 	add	objptr, #195
256bc     F2 28 02 FB | 	rdlong	local02, objptr
256c0     01 28 86 F1 | 	sub	local02, #1
256c4     C3 E4 85 F1 | 	sub	objptr, #195
256c8     F2 16 C2 FA | 	rdbyte	arg03, objptr
256cc     3E E4 85 F1 | 	sub	objptr, #62
256d0     14 17 5A F2 | 	cmps	arg03, local02 wcz
256d4     2C 00 90 ED |  if_be	jmp	#LR__2880
256d8                 | '     scrollup2()
256d8     00 12 06 F6 | 	mov	arg01, #0
256dc     01 00 00 FF 
256e0     58 14 06 F6 | 	mov	arg02, ##600
256e4     10 16 06 F6 | 	mov	arg03, #16
256e8     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
256ec                 | '     cursor_y:=st_lines-1
256ec     01 E5 05 F1 | 	add	objptr, #257
256f0     F2 28 02 FB | 	rdlong	local02, objptr
256f4     01 28 86 F1 | 	sub	local02, #1
256f8     C3 E4 85 F1 | 	sub	objptr, #195
256fc     F2 28 42 FC | 	wrbyte	local02, objptr
25700     3E E4 85 F1 | 	sub	objptr, #62
25704                 | LR__2880
25704                 | LR__2881
25704                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
25704     3C E4 05 F1 | 	add	objptr, #60
25708     F2 14 E2 FA | 	rdword	arg02, objptr
2570c     02 14 66 F0 | 	shl	arg02, #2
25710     02 E4 05 F1 | 	add	objptr, #2
25714     F2 16 C2 FA | 	rdbyte	arg03, objptr
25718     3E E4 85 F1 | 	sub	objptr, #62
2571c     04 16 66 F0 | 	shl	arg03, #4
25720     04 16 06 F1 | 	add	arg03, #4
25724     11 12 06 F6 | 	mov	arg01, #17
25728     94 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2572c     A7 F0 03 F6 | 	mov	ptra, fp
25730     B2 00 A0 FD | 	call	#popregs_
25734                 | _hg010b_spin2_putchar2_ret
25734     2D 00 64 FD | 	ret
25738                 | 
25738                 | ' ''--------- Output a string at the cursor position, move the cursor  
25738                 | ' 
25738                 | ' pub write(text) | iii,c,ncx,ncy
25738                 | _hg010b_spin2_write
25738     04 4A 05 F6 | 	mov	COUNT_, #4
2573c     A8 00 A0 FD | 	call	#pushregs_
25740     09 27 02 F6 | 	mov	local01, arg01
25744                 | ' 
25744                 | ' repeat iii from 0 to strsize(text)-1
25744     00 28 06 F6 | 	mov	local02, #0
25748     13 13 02 F6 | 	mov	arg01, local01
2574c     09 2B 02 F6 | 	mov	local03, arg01
25750     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
25754                 | LR__2890
25754     15 FB C9 FA | 	rdbyte	result1, local03 wz
25758     01 2A 06 51 |  if_ne	add	local03, #1
2575c     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
25760                 | LR__2891
25760     09 2B 82 F1 | 	sub	local03, arg01
25764     01 2A 86 F1 | 	sub	local03, #1
25768     00 2A 56 F2 | 	cmps	local03, #0 wc
2576c     01 2C 86 F6 | 	negc	local04, #1
25770     16 2B 02 F1 | 	add	local03, local04
25774                 | LR__2892
25774                 | '   putchar2(byte[text+iii])
25774     13 13 02 F6 | 	mov	arg01, local01
25778     14 13 02 F1 | 	add	arg01, local02
2577c     09 13 C2 FA | 	rdbyte	arg01, arg01
25780     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
25784     16 29 02 F1 | 	add	local02, local04
25788     15 29 0A F2 | 	cmp	local02, local03 wz
2578c     E4 FF 9F 5D |  if_ne	jmp	#LR__2892
25790     A7 F0 03 F6 | 	mov	ptra, fp
25794     B2 00 A0 FD | 	call	#popregs_
25798                 | _hg010b_spin2_write_ret
25798     2D 00 64 FD | 	ret
2579c                 | 
2579c                 | '    
2579c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
2579c                 | ' 
2579c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
2579c                 | _hg010b_spin2_scrollup2
2579c     03 4A 05 F6 | 	mov	COUNT_, #3
257a0     A8 00 A0 FD | 	call	#pushregs_
257a4                 | ' 	
257a4                 | ' repeat i from 4 to 579 
257a4     04 26 06 F6 | 	mov	local01, #4
257a8                 | LR__2900
257a8     F9 E4 05 F1 | 	add	objptr, #249
257ac     F2 1A 02 FB | 	rdlong	arg05, objptr
257b0     1C E4 85 F1 | 	sub	objptr, #28
257b4     F2 14 02 FB | 	rdlong	arg02, objptr
257b8     13 19 02 F6 | 	mov	arg04, local01
257bc     10 18 06 F1 | 	add	arg04, #16
257c0     02 18 66 F0 | 	shl	arg04, #2
257c4     14 E4 05 F1 | 	add	objptr, #20
257c8     F2 16 02 FB | 	rdlong	arg03, objptr
257cc     0B 19 02 FD | 	qmul	arg04, arg03
257d0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
257d0     F6 03 00 FF 
257d4     00 12 06 F6 | 	mov	arg01, ##519168
257d8     0D 13 82 F1 | 	sub	arg01, arg05
257dc     02 16 66 F0 | 	shl	arg03, #2
257e0     0A 00 00 FF 
257e4     DB E5 05 F1 | 	add	objptr, ##5595
257e8     18 1A 62 FD | 	getqx	arg05
257ec     0D 15 02 F1 | 	add	arg02, arg05
257f0     80 0B B0 FD | 	call	#_psram_spin2_read1
257f4     0A 00 00 FF 
257f8     D3 E5 85 F1 | 	sub	objptr, ##5587
257fc     F2 1A 02 FB | 	rdlong	arg05, objptr
25800     1C E4 85 F1 | 	sub	objptr, #28
25804     F2 14 02 FB | 	rdlong	arg02, objptr
25808     13 19 02 F6 | 	mov	arg04, local01
2580c     02 18 66 F0 | 	shl	arg04, #2
25810     14 E4 05 F1 | 	add	objptr, #20
25814     F2 16 02 FB | 	rdlong	arg03, objptr
25818     0B 19 02 FD | 	qmul	arg04, arg03
2581c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2581c     F6 03 00 FF 
25820     00 12 06 F6 | 	mov	arg01, ##519168
25824     0D 13 82 F1 | 	sub	arg01, arg05
25828     02 16 66 F0 | 	shl	arg03, #2
2582c     0A 00 00 FF 
25830     DB E5 05 F1 | 	add	objptr, ##5595
25834     18 1A 62 FD | 	getqx	arg05
25838     0D 15 02 F1 | 	add	arg02, arg05
2583c     D0 0B B0 FD | 	call	#_psram_spin2_write
25840     0B 00 00 FF 
25844     CC E4 85 F1 | 	sub	objptr, ##5836
25848     01 26 06 F1 | 	add	local01, #1
2584c     01 00 00 FF 
25850     44 26 16 F2 | 	cmp	local01, ##580 wc
25854     50 FF 9F CD |  if_b	jmp	#LR__2900
25858                 | ' 
25858                 | ' repeat i from 580 to 599
25858     01 00 00 FF 
2585c     44 26 06 F6 | 	mov	local01, ##580
25860                 | LR__2901
25860                 | '    fastline(0,1023,i,write_background)   
25860     45 E4 05 F1 | 	add	objptr, #69
25864     F2 18 02 FB | 	rdlong	arg04, objptr
25868     45 E4 85 F1 | 	sub	objptr, #69
2586c     00 12 06 F6 | 	mov	arg01, #0
25870     09 14 CE F9 | 	bmask	arg02, #9
25874     13 17 02 F6 | 	mov	arg03, local01
25878     90 EF BF FD | 	call	#_hg010b_spin2_fastline
2587c     01 26 06 F1 | 	add	local01, #1
25880     01 00 00 FF 
25884     58 26 16 F2 | 	cmp	local01, ##600 wc
25888     D4 FF 9F CD |  if_b	jmp	#LR__2901
2588c                 | ' repeat i from 0 to 3
2588c     00 26 06 F6 | 	mov	local01, #0
25890                 | LR__2902
25890                 | '    fastline(0,1023,i,write_background)      
25890     45 E4 05 F1 | 	add	objptr, #69
25894     F2 18 02 FB | 	rdlong	arg04, objptr
25898     45 E4 85 F1 | 	sub	objptr, #69
2589c     00 12 06 F6 | 	mov	arg01, #0
258a0     09 14 CE F9 | 	bmask	arg02, #9
258a4     13 17 02 F6 | 	mov	arg03, local01
258a8     60 EF BF FD | 	call	#_hg010b_spin2_fastline
258ac     01 26 06 F1 | 	add	local01, #1
258b0     04 26 56 F2 | 	cmps	local01, #4 wc
258b4     D8 FF 9F CD |  if_b	jmp	#LR__2902
258b8                 | ' 
258b8                 | ' repeat i from 0 to 35
258b8     00 26 06 F6 | 	mov	local01, #0
258bc                 | LR__2903
258bc     13 1B 02 F6 | 	mov	arg05, local01
258c0     01 1A 06 F1 | 	add	arg05, #1
258c4     1C 00 00 FF 
258c8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
258cc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
258d0     0B 1B 02 FD | 	qmul	arg05, arg03
258d4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
258d4     F6 03 00 FF 
258d8     00 12 06 F6 | 	mov	arg01, ##519168
258dc     F9 E4 05 F1 | 	add	objptr, #249
258e0     F2 1A 02 FB | 	rdlong	arg05, objptr
258e4     0D 13 82 F1 | 	sub	arg01, arg05
258e8     F5 E4 85 F1 | 	sub	objptr, #245
258ec     F2 14 02 FB | 	rdlong	arg02, objptr
258f0     1C 00 00 FF 
258f4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
258f8     0B 00 00 FF 
258fc     C8 E4 05 F1 | 	add	objptr, ##5832
25900     18 1A 62 FD | 	getqx	arg05
25904     0D 15 02 F1 | 	add	arg02, arg05
25908     68 0A B0 FD | 	call	#_psram_spin2_read1
2590c     1C 00 00 FF 
25910     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25914     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25918     0B 27 02 FD | 	qmul	local01, arg03
2591c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
2591c     F6 03 00 FF 
25920     00 12 06 F6 | 	mov	arg01, ##519168
25924     0A 00 00 FF 
25928     D3 E5 85 F1 | 	sub	objptr, ##5587
2592c     F2 1A 02 FB | 	rdlong	arg05, objptr
25930     0D 13 82 F1 | 	sub	arg01, arg05
25934     F5 E4 85 F1 | 	sub	objptr, #245
25938     F2 14 02 FB | 	rdlong	arg02, objptr
2593c     1C 00 00 FF 
25940     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25944     0B 00 00 FF 
25948     C8 E4 05 F1 | 	add	objptr, ##5832
2594c     18 1A 62 FD | 	getqx	arg05
25950     0D 15 02 F1 | 	add	arg02, arg05
25954     B8 0A B0 FD | 	call	#_psram_spin2_write
25958     0B 00 00 FF 
2595c     CC E4 85 F1 | 	sub	objptr, ##5836
25960     01 26 06 F1 | 	add	local01, #1
25964     24 26 56 F2 | 	cmps	local01, #36 wc
25968     50 FF 9F CD |  if_b	jmp	#LR__2903
2596c                 | ' repeat i from 0 to timings[7]-1
2596c     00 26 06 F6 | 	mov	local01, #0
25970     1C 00 00 FF 
25974     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25978     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
2597c     1C 00 00 FF 
25980     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25984     01 28 86 F1 | 	sub	local02, #1
25988     00 28 56 F2 | 	cmps	local02, #0 wc
2598c     01 2A 86 F6 | 	negc	local03, #1
25990     15 29 02 F1 | 	add	local02, local03
25994                 | LR__2904
25994                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
25994     04 E4 05 F1 | 	add	objptr, #4
25998     F2 12 02 FB | 	rdlong	arg01, objptr
2599c     1C 00 00 FF 
259a0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
259a4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
259a8     1C 00 00 FF 
259ac     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
259b0     0D 19 02 F6 | 	mov	arg04, arg05
259b4     03 18 66 F0 | 	shl	arg04, #3
259b8     0D 19 02 F1 | 	add	arg04, arg05
259bc     02 18 66 F0 | 	shl	arg04, #2
259c0     13 19 02 F1 | 	add	arg04, local01
259c4     0C 13 02 F1 | 	add	arg01, arg04
259c8     20 14 06 F6 | 	mov	arg02, #32
259cc     01 16 06 F6 | 	mov	arg03, #1
259d0     00 18 06 F6 | 	mov	arg04, #0
259d4     01 1A 06 F6 | 	mov	arg05, #1
259d8     0B 00 00 FF 
259dc     C8 E4 05 F1 | 	add	objptr, ##5832
259e0     C8 0A B0 FD | 	call	#_psram_spin2_fill
259e4     0B 00 00 FF 
259e8     CC E4 85 F1 | 	sub	objptr, ##5836
259ec     15 27 02 F1 | 	add	local01, local03
259f0     14 27 0A F2 | 	cmp	local01, local02 wz
259f4     9C FF 9F 5D |  if_ne	jmp	#LR__2904
259f8     A7 F0 03 F6 | 	mov	ptra, fp
259fc     B2 00 A0 FD | 	call	#popregs_
25a00                 | _hg010b_spin2_scrollup2_ret
25a00     2D 00 64 FD | 	ret
25a04                 | 
25a04                 | '  
25a04                 | ' ''----------- Scroll the screen one line down 
25a04                 | ' 
25a04                 | ' pub scrolldown(start=0) | i
25a04                 | _hg010b_spin2_scrolldown
25a04     05 4A 05 F6 | 	mov	COUNT_, #5
25a08     A8 00 A0 FD | 	call	#pushregs_
25a0c     09 27 02 F6 | 	mov	local01, arg01
25a10                 | ' 
25a10                 | ' repeat i from 579 to (start*16)+4
25a10     01 00 00 FF 
25a14     43 28 06 F6 | 	mov	local02, ##579
25a18     13 2B 02 F6 | 	mov	local03, local01
25a1c     04 2A 66 F0 | 	shl	local03, #4
25a20     04 2A 06 F1 | 	add	local03, #4
25a24     01 00 00 FF 
25a28     43 2A 56 F2 | 	cmps	local03, ##579 wc
25a2c     01 2C 86 F6 | 	negc	local04, #1
25a30     16 2F 02 F6 | 	mov	local05, local04
25a34     16 2B 02 F1 | 	add	local03, local04
25a38                 | LR__2910
25a38     F9 E4 05 F1 | 	add	objptr, #249
25a3c     F2 2C 02 FB | 	rdlong	local04, objptr
25a40     1C E4 85 F1 | 	sub	objptr, #28
25a44     F2 14 02 FB | 	rdlong	arg02, objptr
25a48     14 1B 02 F6 | 	mov	arg05, local02
25a4c     02 1A 66 F0 | 	shl	arg05, #2
25a50     14 E4 05 F1 | 	add	objptr, #20
25a54     F2 16 02 FB | 	rdlong	arg03, objptr
25a58     0B 1B 02 FD | 	qmul	arg05, arg03
25a5c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25a5c     F6 03 00 FF 
25a60     00 12 06 F6 | 	mov	arg01, ##519168
25a64     16 13 82 F1 | 	sub	arg01, local04
25a68     02 16 66 F0 | 	shl	arg03, #2
25a6c     0A 00 00 FF 
25a70     DB E5 05 F1 | 	add	objptr, ##5595
25a74     18 2C 62 FD | 	getqx	local04
25a78     16 15 02 F1 | 	add	arg02, local04
25a7c     F4 08 B0 FD | 	call	#_psram_spin2_read1
25a80     0A 00 00 FF 
25a84     D3 E5 85 F1 | 	sub	objptr, ##5587
25a88     F2 2C 02 FB | 	rdlong	local04, objptr
25a8c     1C E4 85 F1 | 	sub	objptr, #28
25a90     F2 14 02 FB | 	rdlong	arg02, objptr
25a94     14 1B 02 F6 | 	mov	arg05, local02
25a98     10 1A 06 F1 | 	add	arg05, #16
25a9c     02 1A 66 F0 | 	shl	arg05, #2
25aa0     14 E4 05 F1 | 	add	objptr, #20
25aa4     F2 16 02 FB | 	rdlong	arg03, objptr
25aa8     0B 1B 02 FD | 	qmul	arg05, arg03
25aac                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25aac     F6 03 00 FF 
25ab0     00 12 06 F6 | 	mov	arg01, ##519168
25ab4     16 13 82 F1 | 	sub	arg01, local04
25ab8     02 16 66 F0 | 	shl	arg03, #2
25abc     0A 00 00 FF 
25ac0     DB E5 05 F1 | 	add	objptr, ##5595
25ac4     18 2C 62 FD | 	getqx	local04
25ac8     16 15 02 F1 | 	add	arg02, local04
25acc     40 09 B0 FD | 	call	#_psram_spin2_write
25ad0     0B 00 00 FF 
25ad4     CC E4 85 F1 | 	sub	objptr, ##5836
25ad8     17 29 02 F1 | 	add	local02, local05
25adc     15 29 0A F2 | 	cmp	local02, local03 wz
25ae0     54 FF 9F 5D |  if_ne	jmp	#LR__2910
25ae4                 | ' 
25ae4                 | ' repeat i from (start*16)+4 to (start*16)+19
25ae4     13 29 02 F6 | 	mov	local02, local01
25ae8     04 28 66 F0 | 	shl	local02, #4
25aec     04 28 06 F1 | 	add	local02, #4
25af0     13 2F 02 F6 | 	mov	local05, local01
25af4     04 2E 66 F0 | 	shl	local05, #4
25af8     13 2E 06 F1 | 	add	local05, #19
25afc     13 2D 02 F6 | 	mov	local04, local01
25b00     04 2C 66 F0 | 	shl	local04, #4
25b04     04 2C 06 F1 | 	add	local04, #4
25b08     16 2F 52 F2 | 	cmps	local05, local04 wc
25b0c     01 2C 86 F6 | 	negc	local04, #1
25b10     16 2B 02 F6 | 	mov	local03, local04
25b14     16 2F 02 F1 | 	add	local05, local04
25b18                 | LR__2911
25b18                 | '    fastline(0,1023,i,write_background)    
25b18     45 E4 05 F1 | 	add	objptr, #69
25b1c     F2 18 02 FB | 	rdlong	arg04, objptr
25b20     45 E4 85 F1 | 	sub	objptr, #69
25b24     00 12 06 F6 | 	mov	arg01, #0
25b28     09 14 CE F9 | 	bmask	arg02, #9
25b2c     14 17 02 F6 | 	mov	arg03, local02
25b30     D8 EC BF FD | 	call	#_hg010b_spin2_fastline
25b34     15 29 02 F1 | 	add	local02, local03
25b38     17 29 0A F2 | 	cmp	local02, local05 wz
25b3c     D8 FF 9F 5D |  if_ne	jmp	#LR__2911
25b40                 | '    
25b40                 | ' repeat i from 35 to start
25b40     23 28 06 F6 | 	mov	local02, #35
25b44     23 26 56 F2 | 	cmps	local01, #35 wc
25b48     01 2C 86 F6 | 	negc	local04, #1
25b4c     13 2F 02 F6 | 	mov	local05, local01
25b50     16 2F 02 F1 | 	add	local05, local04
25b54                 | LR__2912
25b54                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
25b54     F6 03 00 FF 
25b58     00 12 06 F6 | 	mov	arg01, ##519168
25b5c     F9 E4 05 F1 | 	add	objptr, #249
25b60     F2 2A 02 FB | 	rdlong	local03, objptr
25b64     15 13 82 F1 | 	sub	arg01, local03
25b68     F5 E4 85 F1 | 	sub	objptr, #245
25b6c     F2 14 02 FB | 	rdlong	arg02, objptr
25b70     14 2B 02 F6 | 	mov	local03, local02
25b74     07 2A 66 F0 | 	shl	local03, #7
25b78     15 15 02 F1 | 	add	arg02, local03
25b7c     80 16 06 F6 | 	mov	arg03, #128
25b80     0B 00 00 FF 
25b84     C8 E4 05 F1 | 	add	objptr, ##5832
25b88     E8 07 B0 FD | 	call	#_psram_spin2_read1
25b8c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
25b8c     F6 03 00 FF 
25b90     00 12 06 F6 | 	mov	arg01, ##519168
25b94     0A 00 00 FF 
25b98     D3 E5 85 F1 | 	sub	objptr, ##5587
25b9c     F2 2A 02 FB | 	rdlong	local03, objptr
25ba0     15 13 82 F1 | 	sub	arg01, local03
25ba4     F5 E4 85 F1 | 	sub	objptr, #245
25ba8     F2 14 02 FB | 	rdlong	arg02, objptr
25bac     14 2B 02 F6 | 	mov	local03, local02
25bb0     01 2A 06 F1 | 	add	local03, #1
25bb4     07 2A 66 F0 | 	shl	local03, #7
25bb8     15 15 02 F1 | 	add	arg02, local03
25bbc     80 16 06 F6 | 	mov	arg03, #128
25bc0     0B 00 00 FF 
25bc4     C8 E4 05 F1 | 	add	objptr, ##5832
25bc8     44 08 B0 FD | 	call	#_psram_spin2_write
25bcc     0B 00 00 FF 
25bd0     CC E4 85 F1 | 	sub	objptr, ##5836
25bd4     16 29 02 F1 | 	add	local02, local04
25bd8     17 29 0A F2 | 	cmp	local02, local05 wz
25bdc     74 FF 9F 5D |  if_ne	jmp	#LR__2912
25be0                 | ' repeat i from 0 to 127
25be0     00 28 06 F6 | 	mov	local02, #0
25be4                 | LR__2913
25be4                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
25be4     04 E4 05 F1 | 	add	objptr, #4
25be8     F2 12 02 FB | 	rdlong	arg01, objptr
25bec     13 2F 02 F6 | 	mov	local05, local01
25bf0     07 2E 66 F0 | 	shl	local05, #7
25bf4     17 13 02 F1 | 	add	arg01, local05
25bf8     14 13 02 F1 | 	add	arg01, local02
25bfc     20 14 06 F6 | 	mov	arg02, #32
25c00     01 16 06 F6 | 	mov	arg03, #1
25c04     00 18 06 F6 | 	mov	arg04, #0
25c08     01 1A 06 F6 | 	mov	arg05, #1
25c0c     0B 00 00 FF 
25c10     C8 E4 05 F1 | 	add	objptr, ##5832
25c14     94 08 B0 FD | 	call	#_psram_spin2_fill
25c18     0B 00 00 FF 
25c1c     CC E4 85 F1 | 	sub	objptr, ##5836
25c20     01 28 06 F1 | 	add	local02, #1
25c24     80 28 56 F2 | 	cmps	local02, #128 wc
25c28     B8 FF 9F CD |  if_b	jmp	#LR__2913
25c2c     A7 F0 03 F6 | 	mov	ptra, fp
25c30     B2 00 A0 FD | 	call	#popregs_
25c34                 | _hg010b_spin2_scrolldown_ret
25c34     2D 00 64 FD | 	ret
25c38                 | 
25c38                 | ' 
25c38                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
25c38                 | ' 
25c38                 | ' pub crlf()
25c38                 | _hg010b_spin2_crlf
25c38                 | ' 
25c38                 | ' cursor_x:=leading_spaces*2
25c38     01 00 00 FF 
25c3c     B6 E4 05 F1 | 	add	objptr, ##694
25c40     F2 16 02 FB | 	rdlong	arg03, objptr
25c44     01 16 66 F0 | 	shl	arg03, #1
25c48     01 00 00 FF 
25c4c     7A E4 85 F1 | 	sub	objptr, ##634
25c50     F2 16 52 FC | 	wrword	arg03, objptr
25c54                 | ' cursor_y+=1
25c54     02 E4 05 F1 | 	add	objptr, #2
25c58     F2 16 C2 FA | 	rdbyte	arg03, objptr
25c5c     01 16 06 F1 | 	add	arg03, #1
25c60     F2 16 42 FC | 	wrbyte	arg03, objptr
25c64                 | ' if cursor_y>st_lines-1
25c64     C3 E4 05 F1 | 	add	objptr, #195
25c68     F2 16 02 FB | 	rdlong	arg03, objptr
25c6c     01 16 86 F1 | 	sub	arg03, #1
25c70     C3 E4 85 F1 | 	sub	objptr, #195
25c74     F2 14 C2 FA | 	rdbyte	arg02, objptr
25c78     3E E4 85 F1 | 	sub	objptr, #62
25c7c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
25c80     2C 00 90 ED |  if_be	jmp	#LR__2920
25c84                 | '   scrollup2()
25c84     00 12 06 F6 | 	mov	arg01, #0
25c88     01 00 00 FF 
25c8c     58 14 06 F6 | 	mov	arg02, ##600
25c90     10 16 06 F6 | 	mov	arg03, #16
25c94     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
25c98                 | '   cursor_y:=st_lines-1
25c98     01 E5 05 F1 | 	add	objptr, #257
25c9c     F2 16 02 FB | 	rdlong	arg03, objptr
25ca0     01 16 86 F1 | 	sub	arg03, #1
25ca4     C3 E4 85 F1 | 	sub	objptr, #195
25ca8     F2 16 42 FC | 	wrbyte	arg03, objptr
25cac     3E E4 85 F1 | 	sub	objptr, #62
25cb0                 | LR__2920
25cb0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
25cb0     3C E4 05 F1 | 	add	objptr, #60
25cb4     F2 14 E2 FA | 	rdword	arg02, objptr
25cb8     02 14 66 F0 | 	shl	arg02, #2
25cbc     02 E4 05 F1 | 	add	objptr, #2
25cc0     F2 16 C2 FA | 	rdbyte	arg03, objptr
25cc4     3E E4 85 F1 | 	sub	objptr, #62
25cc8     04 16 66 F0 | 	shl	arg03, #4
25ccc     04 16 06 F1 | 	add	arg03, #4
25cd0     11 12 06 F6 | 	mov	arg01, #17
25cd4     E8 E8 BF FD | 	call	#_hg010b_spin2_setspritepos
25cd8                 | _hg010b_spin2_crlf_ret
25cd8     2D 00 64 FD | 	ret
25cdc                 | 
25cdc                 | ' 
25cdc                 | ' 
25cdc                 | ' '*************************************************************************
25cdc                 | ' '                                                                        *
25cdc                 | ' '  Conversions                                                           *
25cdc                 | ' '                                                                        *
25cdc                 | ' '*************************************************************************
25cdc                 | ' 
25cdc                 | ' ''---------- Convert a integer to dec string, return a pointer
25cdc                 | ' 
25cdc                 | ' pub inttostr(i):result |q,pos,k,j
25cdc                 | _hg010b_spin2_inttostr
25cdc     03 4A 05 F6 | 	mov	COUNT_, #3
25ce0     A8 00 A0 FD | 	call	#pushregs_
25ce4     09 27 0A F6 | 	mov	local01, arg01 wz
25ce8                 | ' 
25ce8                 | ' j:=i
25ce8                 | ' pos:=10
25ce8     0A 28 06 F6 | 	mov	local02, #10
25cec                 | ' k:=0
25cec     00 2A 06 F6 | 	mov	local03, #0
25cf0                 | ' 
25cf0                 | ' if (j==0)
25cf0     18 00 90 5D |  if_ne	jmp	#LR__2930
25cf4                 | '   n_string[0]:=48
25cf4     4D E4 05 F1 | 	add	objptr, #77
25cf8     F2 60 48 FC | 	wrbyte	#48, objptr
25cfc                 | '   n_string[1]:=0
25cfc     01 E4 05 F1 | 	add	objptr, #1
25d00     F2 00 48 FC | 	wrbyte	#0, objptr
25d04     4E E4 85 F1 | 	sub	objptr, #78
25d08     C4 00 90 FD | 	jmp	#LR__2937
25d0c                 | LR__2930
25d0c                 | ' 
25d0c                 | ' else
25d0c                 | '   if (j<0)
25d0c     13 27 52 F6 | 	abs	local01, local01 wc
25d10                 | '     j:=0-j
25d10                 | '     k:=45
25d10     2D 2A 06 C6 |  if_b	mov	local03, #45
25d14                 | ' 
25d14                 | '   n_string[11]:=0
25d14     58 E4 05 F1 | 	add	objptr, #88
25d18     F2 00 48 FC | 	wrbyte	#0, objptr
25d1c     58 E4 85 F1 | 	sub	objptr, #88
25d20     97 24 48 FB | 	callpa	#(@LR__2932-@LR__2931)>>2,fcache_load_ptr_
25d24                 | '   repeat while (pos>-1)
25d24                 | LR__2931
25d24     00 28 56 F2 | 	cmps	local02, #0 wc
25d28     40 00 90 CD |  if_b	jmp	#LR__2933
25d2c     13 FB 51 F6 | 	abs	result1, local01 wc
25d30     0A FA 15 FD | 	qdiv	result1, #10
25d34                 | '     q:=j//10
25d34     19 FA 61 FD | 	getqy	result1
25d38     FD FA 81 F6 | 	negc	result1, result1
25d3c     13 27 52 F6 | 	abs	local01, local01 wc
25d40     0A 26 16 FD | 	qdiv	local01, #10
25d44                 | '     q:=48+q
25d44     30 FA 05 F1 | 	add	result1, #48
25d48                 | '     n_string[pos]:=q
25d48     14 27 02 F6 | 	mov	local01, local02
25d4c     4D E4 05 F1 | 	add	objptr, #77
25d50     F2 26 02 F1 | 	add	local01, objptr
25d54     13 FB 41 FC | 	wrbyte	result1, local01
25d58                 | '     j:=j/10
25d58     4D E4 85 F1 | 	sub	objptr, #77
25d5c                 | '     pos-=1
25d5c     01 28 86 F1 | 	sub	local02, #1
25d60     18 26 62 FD | 	getqx	local01
25d64     13 27 82 F6 | 	negc	local01, local01
25d68     B8 FF 9F FD | 	jmp	#LR__2931
25d6c                 | LR__2932
25d6c                 | LR__2933
25d6c                 | '   repeat while n_string[0]==48
25d6c                 | LR__2934
25d6c     4D E4 05 F1 | 	add	objptr, #77
25d70     F2 16 C2 FA | 	rdbyte	arg03, objptr
25d74     4D E4 85 F1 | 	sub	objptr, #77
25d78     30 16 0E F2 | 	cmp	arg03, #48 wz
25d7c     20 00 90 5D |  if_ne	jmp	#LR__2935
25d80                 | '     bytemove(@n_string,@n_string+1,12)
25d80     4D E4 05 F1 | 	add	objptr, #77
25d84     F2 12 02 F6 | 	mov	arg01, objptr
25d88     F2 14 02 F6 | 	mov	arg02, objptr
25d8c     4D E4 85 F1 | 	sub	objptr, #77
25d90     01 14 06 F1 | 	add	arg02, #1
25d94     0C 16 06 F6 | 	mov	arg03, #12
25d98     80 11 B0 FD | 	call	#__system____builtin_memmove
25d9c     CC FF 9F FD | 	jmp	#LR__2934
25da0                 | LR__2935
25da0                 | ' 
25da0                 | '   if k==45
25da0     2D 2A 0E F2 | 	cmp	local03, #45 wz
25da4     28 00 90 5D |  if_ne	jmp	#LR__2936
25da8                 | '      bytemove(@n_string+1,@n_string,12)
25da8     4D E4 05 F1 | 	add	objptr, #77
25dac     F2 12 02 F6 | 	mov	arg01, objptr
25db0     01 12 06 F1 | 	add	arg01, #1
25db4     F2 14 02 F6 | 	mov	arg02, objptr
25db8     4D E4 85 F1 | 	sub	objptr, #77
25dbc     0C 16 06 F6 | 	mov	arg03, #12
25dc0     58 11 B0 FD | 	call	#__system____builtin_memmove
25dc4                 | '      n_string[0]:=k
25dc4     4D E4 05 F1 | 	add	objptr, #77
25dc8     F2 2A 42 FC | 	wrbyte	local03, objptr
25dcc     4D E4 85 F1 | 	sub	objptr, #77
25dd0                 | LR__2936
25dd0                 | LR__2937
25dd0                 | ' 
25dd0                 | ' q:=@n_string
25dd0     4D E4 05 F1 | 	add	objptr, #77
25dd4     F2 FA 01 F6 | 	mov	result1, objptr
25dd8     4D E4 85 F1 | 	sub	objptr, #77
25ddc                 | ' return q
25ddc     A7 F0 03 F6 | 	mov	ptra, fp
25de0     B2 00 A0 FD | 	call	#popregs_
25de4                 | _hg010b_spin2_inttostr_ret
25de4     2D 00 64 FD | 	ret
25de8                 | 
25de8                 | ' 
25de8                 | ' '**********************************************************************************
25de8                 | ' '
25de8                 | ' '        Blitting
25de8                 | ' '
25de8                 | ' '**********************************************************************************
25de8                 | ' 
25de8                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
25de8                 | _hg010b_spin2_blit
25de8     18 4A 05 F6 | 	mov	COUNT_, #24
25dec     A8 00 A0 FD | 	call	#pushregs_
25df0     09 27 02 F6 | 	mov	local01, arg01
25df4     0A 29 02 F6 | 	mov	local02, arg02
25df8     0B 2B 02 F6 | 	mov	local03, arg03
25dfc     0C 2D 02 F6 | 	mov	local04, arg04
25e00     0D 2F 02 F6 | 	mov	local05, arg05
25e04     0E 31 02 F6 | 	mov	local06, arg06
25e08     0F 33 02 F6 | 	mov	local07, arg07
25e0c     10 35 02 F6 | 	mov	local08, arg08
25e10     11 37 02 F6 | 	mov	local09, arg09
25e14     12 39 02 F6 | 	mov	local10, arg10
25e18                 | ' 
25e18                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
25e18     00 04 00 FF 
25e1c     00 26 56 F2 | 	cmps	local01, ##524288 wc
25e20     00 04 00 3F 
25e24     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
25e28     7C 01 90 CD |  if_b	jmp	#LR__2944
25e2c     16 29 5A F2 | 	cmps	local02, local04 wcz
25e30     14 3B 02 16 |  if_a	mov	local11, local02
25e34     16 29 02 16 |  if_a	mov	local02, local04
25e38     1D 2D 02 16 |  if_a	mov	local04, local11
25e3c     17 2B 5A F2 | 	cmps	local03, local05 wcz
25e40     15 3B 02 16 |  if_a	mov	local11, local03
25e44     17 2B 02 16 |  if_a	mov	local03, local05
25e48     18 2B 02 FD | 	qmul	local03, local06
25e4c                 | '   if x1a>x2a
25e4c                 | '     x1a,x2a:=x2a,x1a
25e4c                 | '   if y1a>y2a
25e4c                 | '     y1a,y2a:=y2a,y1a  
25e4c     1D 2F 02 16 |  if_a	mov	local05, local11
25e50                 | ' 
25e50                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
25e50     19 3D 02 F6 | 	mov	local12, local07
25e54     14 3D 02 F1 | 	add	local12, local02
25e58     18 3A 62 FD | 	getqx	local11
25e5c     1C 37 02 FD | 	qmul	local09, local10
25e60     1D 3D 02 F1 | 	add	local12, local11
25e64     13 3F 02 F6 | 	mov	local13, local01
25e68     1A 3F 02 F1 | 	add	local13, local08
25e6c     18 3A 62 FD | 	getqx	local11
25e70     1D 3F 02 F1 | 	add	local13, local11
25e74     1F 3D 5A F2 | 	cmps	local12, local13 wcz
25e78     98 00 90 ED |  if_be	jmp	#LR__2941
25e7c                 | '     repeat y from y1a to y2a
25e7c     15 41 02 F6 | 	mov	local14, local03
25e80     15 2F 52 F2 | 	cmps	local05, local03 wc
25e84     01 42 86 F6 | 	negc	local15, #1
25e88     17 45 02 F6 | 	mov	local16, local05
25e8c     21 45 02 F1 | 	add	local16, local15
25e90     0B 00 00 FF 
25e94     CC E4 05 F1 | 	add	objptr, ##5836
25e98                 | LR__2940
25e98     18 41 02 FD | 	qmul	local14, local06
25e9c                 | '   '    writeln(string("I am here"))
25e9c                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25e9c     13 15 02 F6 | 	mov	arg02, local01
25ea0     16 17 02 F6 | 	mov	arg03, local04
25ea4     14 17 82 F1 | 	sub	arg03, local02
25ea8     01 16 06 F1 | 	add	arg03, #1
25eac     F6 03 00 FF 
25eb0     00 12 06 F6 | 	mov	arg01, ##519168
25eb4     18 3E 62 FD | 	getqx	local13
25eb8     1F 15 02 F1 | 	add	arg02, local13
25ebc     14 15 02 F1 | 	add	arg02, local02
25ec0     B0 04 B0 FD | 	call	#_psram_spin2_read1
25ec4     1B 3F 02 F6 | 	mov	local13, local09
25ec8     15 3F 82 F1 | 	sub	local13, local03
25ecc     20 3F 02 F1 | 	add	local13, local14
25ed0     1C 3F 02 FD | 	qmul	local13, local10
25ed4                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
25ed4     19 15 02 F6 | 	mov	arg02, local07
25ed8     16 17 02 F6 | 	mov	arg03, local04
25edc     14 17 82 F1 | 	sub	arg03, local02
25ee0     01 16 06 F1 | 	add	arg03, #1
25ee4     F6 03 00 FF 
25ee8     00 12 06 F6 | 	mov	arg01, ##519168
25eec     18 3E 62 FD | 	getqx	local13
25ef0     1F 15 02 F1 | 	add	arg02, local13
25ef4     1A 15 02 F1 | 	add	arg02, local08
25ef8     14 05 B0 FD | 	call	#_psram_spin2_write
25efc     21 41 02 F1 | 	add	local14, local15
25f00     22 41 0A F2 | 	cmp	local14, local16 wz
25f04     90 FF 9F 5D |  if_ne	jmp	#LR__2940
25f08     0B 00 00 FF 
25f0c     CC E4 85 F1 | 	sub	objptr, ##5836
25f10     94 00 90 FD | 	jmp	#LR__2943
25f14                 | LR__2941
25f14                 | '   else
25f14                 | '     repeat y from y2a to y1a
25f14     17 41 02 F6 | 	mov	local14, local05
25f18     17 2B 52 F2 | 	cmps	local03, local05 wc
25f1c     01 46 86 F6 | 	negc	local17, #1
25f20     15 49 02 F6 | 	mov	local18, local03
25f24     23 49 02 F1 | 	add	local18, local17
25f28     0B 00 00 FF 
25f2c     CC E4 05 F1 | 	add	objptr, ##5836
25f30                 | LR__2942
25f30     18 41 02 FD | 	qmul	local14, local06
25f34                 | '  '     writeln(string("I am there"))
25f34                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25f34     13 15 02 F6 | 	mov	arg02, local01
25f38     16 17 02 F6 | 	mov	arg03, local04
25f3c     14 17 82 F1 | 	sub	arg03, local02
25f40     01 16 06 F1 | 	add	arg03, #1
25f44     F6 03 00 FF 
25f48     00 12 06 F6 | 	mov	arg01, ##519168
25f4c     18 44 62 FD | 	getqx	local16
25f50     22 15 02 F1 | 	add	arg02, local16
25f54     14 15 02 F1 | 	add	arg02, local02
25f58     18 04 B0 FD | 	call	#_psram_spin2_read1
25f5c     1B 45 02 F6 | 	mov	local16, local09
25f60     15 45 82 F1 | 	sub	local16, local03
25f64     20 45 02 F1 | 	add	local16, local14
25f68     1C 45 02 FD | 	qmul	local16, local10
25f6c                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
25f6c     19 15 02 F6 | 	mov	arg02, local07
25f70     16 17 02 F6 | 	mov	arg03, local04
25f74     14 17 82 F1 | 	sub	arg03, local02
25f78     01 16 06 F1 | 	add	arg03, #1
25f7c     F6 03 00 FF 
25f80     00 12 06 F6 | 	mov	arg01, ##519168
25f84     18 44 62 FD | 	getqx	local16
25f88     22 15 02 F1 | 	add	arg02, local16
25f8c     1A 15 02 F1 | 	add	arg02, local08
25f90     7C 04 B0 FD | 	call	#_psram_spin2_write
25f94     23 41 02 F1 | 	add	local14, local17
25f98     24 41 0A F2 | 	cmp	local14, local18 wz
25f9c     90 FF 9F 5D |  if_ne	jmp	#LR__2942
25fa0     0B 00 00 FF 
25fa4     CC E4 85 F1 | 	sub	objptr, ##5836
25fa8                 | LR__2943
25fa8                 | LR__2944
25fa8                 | '     
25fa8                 | ' if ((f>=$80000) && (t<$80000)) 
25fa8     00 04 00 FF 
25fac     00 26 56 F2 | 	cmps	local01, ##524288 wc
25fb0     80 00 90 CD |  if_b	jmp	#LR__2946
25fb4     00 04 00 FF 
25fb8     00 32 56 F2 | 	cmps	local07, ##524288 wc
25fbc     74 00 90 3D |  if_ae	jmp	#LR__2946
25fc0                 | '   repeat y from y1a to y2a
25fc0     15 41 02 F6 | 	mov	local14, local03
25fc4     15 2F 52 F2 | 	cmps	local05, local03 wc
25fc8     01 4A 86 F6 | 	negc	local19, #1
25fcc     17 4D 02 F6 | 	mov	local20, local05
25fd0     25 4D 02 F1 | 	add	local20, local19
25fd4     0B 00 00 FF 
25fd8     CC E4 05 F1 | 	add	objptr, ##5836
25fdc                 | LR__2945
25fdc     1B 49 02 F6 | 	mov	local18, local09
25fe0     15 49 82 F1 | 	sub	local18, local03
25fe4     20 49 02 F1 | 	add	local18, local14
25fe8     1C 49 02 FD | 	qmul	local18, local10
25fec                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
25fec     19 13 02 F6 | 	mov	arg01, local07
25ff0     18 48 62 FD | 	getqx	local18
25ff4     18 41 02 FD | 	qmul	local14, local06
25ff8     24 13 02 F1 | 	add	arg01, local18
25ffc     1A 13 02 F1 | 	add	arg01, local08
26000     13 15 02 F6 | 	mov	arg02, local01
26004     16 17 02 F6 | 	mov	arg03, local04
26008     14 17 82 F1 | 	sub	arg03, local02
2600c     01 16 06 F1 | 	add	arg03, #1
26010     18 48 62 FD | 	getqx	local18
26014     24 15 02 F1 | 	add	arg02, local18
26018     14 15 02 F1 | 	add	arg02, local02
2601c     54 03 B0 FD | 	call	#_psram_spin2_read1
26020     25 41 02 F1 | 	add	local14, local19
26024     26 41 0A F2 | 	cmp	local14, local20 wz
26028     B0 FF 9F 5D |  if_ne	jmp	#LR__2945
2602c     0B 00 00 FF 
26030     CC E4 85 F1 | 	sub	objptr, ##5836
26034                 | LR__2946
26034                 | '     
26034                 | ' if ((f<$80000) && (t>=$80000)) 
26034     00 04 00 FF 
26038     00 26 56 F2 | 	cmps	local01, ##524288 wc
2603c     84 00 90 3D |  if_ae	jmp	#LR__2948
26040     00 04 00 FF 
26044     00 32 56 F2 | 	cmps	local07, ##524288 wc
26048     78 00 90 CD |  if_b	jmp	#LR__2948
2604c                 | '   t:=t & $FFFFFFF
2604c     7C 32 06 F4 | 	bitl	local07, #124
26050                 | '   repeat y from y1a to y2a
26050     15 41 02 F6 | 	mov	local14, local03
26054     15 2F 52 F2 | 	cmps	local05, local03 wc
26058     01 4E 86 F6 | 	negc	local21, #1
2605c     17 51 02 F6 | 	mov	local22, local05
26060     27 51 02 F1 | 	add	local22, local21
26064     0B 00 00 FF 
26068     CC E4 05 F1 | 	add	objptr, ##5836
2606c                 | LR__2947
2606c     18 41 02 FD | 	qmul	local14, local06
26070                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
26070     13 13 02 F6 | 	mov	arg01, local01
26074     1B 4D 02 F6 | 	mov	local20, local09
26078     15 4D 82 F1 | 	sub	local20, local03
2607c     20 4D 02 F1 | 	add	local20, local14
26080     18 4A 62 FD | 	getqx	local19
26084     1C 4D 02 FD | 	qmul	local20, local10
26088     25 13 02 F1 | 	add	arg01, local19
2608c     14 13 02 F1 | 	add	arg01, local02
26090     19 15 02 F6 | 	mov	arg02, local07
26094     16 17 02 F6 | 	mov	arg03, local04
26098     14 17 82 F1 | 	sub	arg03, local02
2609c     01 16 06 F1 | 	add	arg03, #1
260a0     18 4C 62 FD | 	getqx	local20
260a4     26 15 02 F1 | 	add	arg02, local20
260a8     1A 15 02 F1 | 	add	arg02, local08
260ac     60 03 B0 FD | 	call	#_psram_spin2_write
260b0     27 41 02 F1 | 	add	local14, local21
260b4     28 41 0A F2 | 	cmp	local14, local22 wz
260b8     B0 FF 9F 5D |  if_ne	jmp	#LR__2947
260bc     0B 00 00 FF 
260c0     CC E4 85 F1 | 	sub	objptr, ##5836
260c4                 | LR__2948
260c4                 | '     
260c4                 | ' if ((f<$80000) && (t<$80000)) 
260c4     00 04 00 FF 
260c8     00 26 56 F2 | 	cmps	local01, ##524288 wc
260cc     00 04 00 CF 
260d0     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
260d4     64 00 90 3D |  if_ae	jmp	#LR__2950
260d8                 | '   repeat y from y1a to y2a
260d8     15 41 02 F6 | 	mov	local14, local03
260dc     15 2F 52 F2 | 	cmps	local05, local03 wc
260e0     01 52 86 F6 | 	negc	local23, #1
260e4     17 55 02 F6 | 	mov	local24, local05
260e8     29 55 02 F1 | 	add	local24, local23
260ec                 | LR__2949
260ec     18 41 02 FD | 	qmul	local14, local06
260f0                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
260f0     13 13 02 F6 | 	mov	arg01, local01
260f4     1B 51 02 F6 | 	mov	local22, local09
260f8     15 51 82 F1 | 	sub	local22, local03
260fc     20 51 02 F1 | 	add	local22, local14
26100     18 4E 62 FD | 	getqx	local21
26104     1C 51 02 FD | 	qmul	local22, local10
26108     27 13 02 F1 | 	add	arg01, local21
2610c     14 13 02 F1 | 	add	arg01, local02
26110     19 15 02 F6 | 	mov	arg02, local07
26114     16 17 02 F6 | 	mov	arg03, local04
26118     14 17 82 F1 | 	sub	arg03, local02
2611c     01 16 06 F1 | 	add	arg03, #1
26120     18 50 62 FD | 	getqx	local22
26124     28 15 02 F1 | 	add	arg02, local22
26128     1A 15 02 F1 | 	add	arg02, local08
2612c     EC 0D B0 FD | 	call	#__system____builtin_memmove
26130     29 41 02 F1 | 	add	local14, local23
26134     2A 41 0A F2 | 	cmp	local14, local24 wz
26138     B0 FF 9F 5D |  if_ne	jmp	#LR__2949
2613c                 | LR__2950
2613c     A7 F0 03 F6 | 	mov	ptra, fp
26140     B2 00 A0 FD | 	call	#popregs_
26144                 | _hg010b_spin2_blit_ret
26144     2D 00 64 FD | 	ret
26148                 | 
26148                 | ' 
26148                 | ' '..............................................................................
26148                 | ' 
26148                 | ' {{
26148                 | ' }}
26148                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
26148                 | _psram_spin2_startx
26148     04 4A 05 F6 | 	mov	COUNT_, #4
2614c     A8 00 A0 FD | 	call	#pushregs_
26150     09 27 02 F6 | 	mov	local01, arg01
26154     0B 29 02 F6 | 	mov	local02, arg03
26158     0C 2B 02 F6 | 	mov	local03, arg04
2615c                 | '     stop() ' restart driver if required
2615c     54 01 B0 FD | 	call	#_psram_spin2_stop
26160     00 26 0E F2 | 	cmp	local01, #0 wz
26164     14 26 06 AB |  if_e	rdlong	local01, #20
26168     13 15 52 F6 | 	abs	arg02, local01 wc
2616c     A1 07 00 FF 
26170     40 14 16 FD | 	qdiv	arg02, ##1000000
26174                 | ' 
26174                 | '     ' use current frequency if none specified
26174                 | ' 
26174                 | '     if freq == 0 
26174                 | '         freq := clkfreq 
26174                 | ' 
26174                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
26174                 | ' 
26174                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
26174                 | '     if burst < 0
26174                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
26174     18 14 62 FD | 	getqx	arg02
26178     0A 19 82 F6 | 	negc	arg04, arg02
2617c     03 18 66 F0 | 	shl	arg04, #3
26180     84 18 86 F1 | 	sub	arg04, #132
26184     04 18 46 F0 | 	shr	arg04, #4
26188     04 18 66 F0 | 	shl	arg04, #4
2618c     00 18 56 F2 | 	cmps	arg04, #0 wc
26190     0E FA 65 C6 |  if_b	neg	result1, #14
26194     10 01 90 CD |  if_b	jmp	#LR__2963
26198                 | ' 
26198                 | '     ' compute the input delay
26198                 | ' 
26198                 | '     if delay <= 0
26198     01 28 56 F2 | 	cmps	local02, #1 wc
2619c     10 00 90 3D |  if_ae	jmp	#LR__2960
261a0                 | '         delay := lookupDelay(freq)
261a0     13 13 02 F6 | 	mov	arg01, local01
261a4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
261a8     FD 28 02 F6 | 	mov	local02, result1
261ac     04 00 90 FD | 	jmp	#LR__2961
261b0                 | LR__2960
261b0                 | '     else
261b0                 | '         delay <#= $f ' limit to 15
261b0     0F 28 66 F3 | 	fles	local02, #15
261b4                 | LR__2961
261b4                 | ' 
261b4                 | '     ' create our lock
261b4                 | ' 
261b4                 | '     driverlock := LOCKNEW()  
261b4     00 FA 05 F6 | 	mov	result1, #0
261b8     04 FA 61 FD | 	locknew	result1
261bc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
261c0     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
261c4                 | '     if driverlock == -1
261c4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
261c8     FF FF 7F FF 
261cc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
261d0                 | '         return ERR_NO_LOCK
261d0     1A FA 65 A6 |  if_e	neg	result1, #26
261d4     D0 00 90 AD |  if_e	jmp	#LR__2963
261d8                 | ' 
261d8                 | '     ' patch in the proper data and HUB addresses to the startup structure
261d8                 | ' 
261d8                 | '     long[@startupData][0]:=clkfreq
261d8     14 26 06 FB | 	rdlong	local01, #20
261dc     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
261e0     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
261e4                 | ' '    long[@startupData][1]:=$1000_0000
261e4                 | '     long[@startupData][5]:=@deviceData
261e4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
261e8     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
261ec     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
261f0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
261f4     14 14 06 F1 | 	add	arg02, #20
261f8     0A 27 62 FC | 	wrlong	local01, arg02
261fc                 | '     long[@startupData][6]:=@qosData
261fc     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
26200     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26204     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
26208     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
2620c     18 14 06 F1 | 	add	arg02, #24
26210     0A 27 62 FC | 	wrlong	local01, arg02
26214                 | '     long[@startupData][7]:=$7FF00
26214     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26218     1C 26 06 F1 | 	add	local01, #28
2621c     FF 03 80 FF 
26220     13 01 6A FC | 	wrlong	##524032, local01
26224                 | ' 
26224                 | '     ' setup some default bank and QoS parameter values
26224                 | ' 
26224                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
26224     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
26228     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
2622c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
26230     10 18 66 F0 | 	shl	arg04, #16
26234     0C 28 66 F0 | 	shl	local02, #12
26238     14 19 42 F5 | 	or	arg04, local02
2623c     18 18 46 F5 | 	or	arg04, #24
26240     0C 15 02 F6 | 	mov	arg02, arg04
26244     02 16 06 F6 | 	mov	arg03, #2
26248     A0 00 A0 FD | 	call	#\builtin_longfill_
2624c                 | '     longfill(@qosData, $FFFF0000, 8)
2624c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
26250     07 16 06 F6 | 	mov	arg03, #7
26254     28 16 62 FD | 	setq	arg03
26258     80 FF FF FF 
2625c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
26260                 | ' 
26260                 | '     ' get the address of the PSRAM memory driver so we can start it
26260                 | ' 
26260                 | '     driverAddr:= driver.getDriverAddr()
26260                 | '     return @driver_start
26260     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
26264     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
26268     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
2626c                 | ' 
2626c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2626c                 | ' 
2626c                 | '     if desiredcog < 0
2626c     00 2A 56 F2 | 	cmps	local03, #0 wc
26270                 | '         desiredcog := NEWCOG
26270     10 2A 06 C6 |  if_b	mov	local03, #16
26274                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
26274     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
26278     15 2D 02 F6 | 	mov	local04, local03
2627c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
26280     0A 2D F2 FC | 	coginit	local04, arg02 wc
26284     01 2C 66 C6 |  if_b	neg	local04, #1
26288     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
2628c     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
26290                 | '     repeat until long[@startupData] == 0 
26290     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
26294                 | LR__2962
26294     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
26298     F8 FF 9F 5D |  if_ne	jmp	#LR__2962
2629c                 | ' 
2629c                 | '     return drivercog
2629c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
262a0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
262a4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
262a8                 | LR__2963
262a8     A7 F0 03 F6 | 	mov	ptra, fp
262ac     B2 00 A0 FD | 	call	#popregs_
262b0                 | _psram_spin2_startx_ret
262b0     2D 00 64 FD | 	ret
262b4                 | 
262b4                 | ' 
262b4                 | ' '..............................................................................
262b4                 | ' 
262b4                 | ' {{
262b4                 | ' }}
262b4                 | ' PUB stop() : i
262b4                 | _psram_spin2_stop
262b4     00 00 06 F6 | 	mov	_var01, #0
262b8                 | '     if drivercog <> -1
262b8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
262bc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
262c0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
262c4     FF FF 7F FF 
262c8     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
262cc     70 00 90 AD |  if_e	jmp	#LR__2973
262d0                 | '         cogstop(drivercog) ' a rather brutal stop
262d0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
262d4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
262d8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
262dc     03 12 62 FD | 	cogstop	arg01
262e0     97 26 48 FB | 	callpa	#(@LR__2972-@LR__2970)>>2,fcache_load_ptr_
262e4                 | '         repeat i from 0 to 7
262e4                 | LR__2970
262e4                 | '             if long[$7FF00][i*3] < 0
262e4     00 FB 01 F6 | 	mov	result1, _var01
262e8     01 FA 65 F0 | 	shl	result1, #1
262ec     00 FB 01 F1 | 	add	result1, _var01
262f0     02 FA 65 F0 | 	shl	result1, #2
262f4     FF 03 00 FF 
262f8     00 FB 05 F1 | 	add	result1, ##524032
262fc     FD FA 01 FB | 	rdlong	result1, result1
26300     00 FA 55 F2 | 	cmps	result1, #0 wc
26304     1C 00 90 3D |  if_ae	jmp	#LR__2971
26308                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
26308     00 FB 01 F6 | 	mov	result1, _var01
2630c     01 FA 65 F0 | 	shl	result1, #1
26310     00 FB 01 F1 | 	add	result1, _var01
26314     02 FA 65 F0 | 	shl	result1, #2
26318     FF 03 00 FF 
2631c     00 FB 05 F1 | 	add	result1, ##524032
26320     FD 20 68 FC | 	wrlong	#16, result1
26324                 | LR__2971
26324     01 00 06 F1 | 	add	_var01, #1
26328     08 00 56 F2 | 	cmps	_var01, #8 wc
2632c     B4 FF 9F CD |  if_b	jmp	#LR__2970
26330                 | LR__2972
26330                 | '         drivercog := -1
26330     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26334     FF FF FF FF 
26338     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
2633c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26340                 | LR__2973
26340                 | '     if driverlock <> -1
26340     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
26344     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
26348     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2634c     FF FF 7F FF 
26350     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
26354                 | '         LOCKRET(driverlock)
26354     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
26358     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
2635c     05 12 62 5D |  if_ne	lockret	arg01
26360                 | '         driverlock := -1
26360     FF FF FF 5F 
26364     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
26368     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
2636c     00 FB 01 F6 | 	mov	result1, _var01
26370                 | _psram_spin2_stop_ret
26370     2D 00 64 FD | 	ret
26374                 | 
26374                 | ' 
26374                 | ' '..............................................................................
26374                 | ' 
26374                 | ' {{
26374                 | ' }}
26374                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
26374                 | _psram_spin2_read1
26374                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
26374                 | '     if drivercog == -1 ' driver must be running
26374     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26378     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2637c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26380     FF FF 7F FF 
26384     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
26388                 | '         return ERR_INACTIVE
26388     0F FA 65 A6 |  if_e	neg	result1, #15
2638c     7C 00 90 AD |  if_e	jmp	#LR__2981
26390                 | '     if count == 0 ' don't even bother reading
26390     00 16 0E F2 | 	cmp	arg03, #0 wz
26394                 | '         return 0
26394     00 FA 05 A6 |  if_e	mov	result1, #0
26398     70 00 90 AD |  if_e	jmp	#LR__2981
2639c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
2639c     00 FA 05 F6 | 	mov	result1, #0
263a0     01 FA 61 FD | 	cogid	result1
263a4     FD 00 02 F6 | 	mov	_var01, result1
263a8     01 00 66 F0 | 	shl	_var01, #1
263ac     FD 00 02 F1 | 	add	_var01, result1
263b0     02 00 66 F0 | 	shl	_var01, #2
263b4     FF 03 00 FF 
263b8     00 03 06 F6 | 	mov	_var02, ##524032
263bc     00 03 02 F1 | 	add	_var02, _var01
263c0                 | '     if long[mailbox] < 0
263c0     01 01 02 FB | 	rdlong	_var01, _var02
263c4     00 00 56 F2 | 	cmps	_var01, #0 wc
263c8                 | '         return ERR_MAILBOX_BUSY
263c8     1C FA 65 C6 |  if_b	neg	result1, #28
263cc     3C 00 90 CD |  if_b	jmp	#LR__2981
263d0                 | '     long[mailbox][2] := count
263d0     08 02 06 F1 | 	add	_var02, #8
263d4     01 17 62 FC | 	wrlong	arg03, _var02
263d8                 | '     long[mailbox][1] := dstHubAddr
263d8     04 02 86 F1 | 	sub	_var02, #4
263dc     01 13 62 FC | 	wrlong	arg01, _var02
263e0     04 02 86 F1 | 	sub	_var02, #4
263e4                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
263e4     0A 05 02 F6 | 	mov	_var03, arg02
263e8     D9 04 06 F4 | 	bitl	_var03, #217
263ec     00 00 58 FF 
263f0     00 00 06 F6 | 	mov	_var01, ##-1342177280
263f4     02 01 02 F1 | 	add	_var01, _var03
263f8     01 01 62 FC | 	wrlong	_var01, _var02
263fc                 | '     repeat
263fc                 | LR__2980
263fc                 | '         result := long[mailbox]    
263fc     01 05 02 FB | 	rdlong	_var03, _var02
26400     00 04 56 F2 | 	cmps	_var03, #0 wc
26404     F4 FF 9F CD |  if_b	jmp	#LR__2980
26408                 | '     while result < 0   
26408                 | '     return -result                       'return success or error
26408     02 FB 61 F6 | 	neg	result1, _var03
2640c                 | LR__2981
2640c                 | _psram_spin2_read1_ret
2640c     2D 00 64 FD | 	ret
26410                 | 
26410                 | ' 
26410                 | ' '..............................................................................
26410                 | ' 
26410                 | ' {{
26410                 | ' }}
26410                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
26410                 | _psram_spin2_write
26410                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
26410                 | '     if drivercog == -1 ' driver must be running
26410     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26414     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
26418     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2641c     FF FF 7F FF 
26420     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
26424                 | '         return ERR_INACTIVE
26424     0F FA 65 A6 |  if_e	neg	result1, #15
26428     7C 00 90 AD |  if_e	jmp	#LR__2991
2642c                 | '     if count == 0 ' don't even bother writing
2642c     00 16 0E F2 | 	cmp	arg03, #0 wz
26430                 | '         return 0
26430     00 FA 05 A6 |  if_e	mov	result1, #0
26434     70 00 90 AD |  if_e	jmp	#LR__2991
26438                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
26438     00 FA 05 F6 | 	mov	result1, #0
2643c     01 FA 61 FD | 	cogid	result1
26440     FD 00 02 F6 | 	mov	_var01, result1
26444     01 00 66 F0 | 	shl	_var01, #1
26448     FD 00 02 F1 | 	add	_var01, result1
2644c     02 00 66 F0 | 	shl	_var01, #2
26450     FF 03 00 FF 
26454     00 03 06 F6 | 	mov	_var02, ##524032
26458     00 03 02 F1 | 	add	_var02, _var01
2645c                 | '     if long[mailbox] < 0
2645c     01 01 02 FB | 	rdlong	_var01, _var02
26460     00 00 56 F2 | 	cmps	_var01, #0 wc
26464                 | '         return ERR_MAILBOX_BUSY
26464     1C FA 65 C6 |  if_b	neg	result1, #28
26468     3C 00 90 CD |  if_b	jmp	#LR__2991
2646c                 | '     long[mailbox][2] := count
2646c     08 02 06 F1 | 	add	_var02, #8
26470     01 17 62 FC | 	wrlong	arg03, _var02
26474                 | '     long[mailbox][1] := srcHubAddr
26474     04 02 86 F1 | 	sub	_var02, #4
26478     01 13 62 FC | 	wrlong	arg01, _var02
2647c     04 02 86 F1 | 	sub	_var02, #4
26480                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
26480     0A 05 02 F6 | 	mov	_var03, arg02
26484     D9 04 06 F4 | 	bitl	_var03, #217
26488     00 00 78 FF 
2648c     00 00 06 F6 | 	mov	_var01, ##-268435456
26490     02 01 02 F1 | 	add	_var01, _var03
26494     01 01 62 FC | 	wrlong	_var01, _var02
26498                 | '     repeat
26498                 | LR__2990
26498                 | '         result := long[mailbox]    
26498     01 05 02 FB | 	rdlong	_var03, _var02
2649c     00 04 56 F2 | 	cmps	_var03, #0 wc
264a0     F4 FF 9F CD |  if_b	jmp	#LR__2990
264a4                 | '     while result < 0   
264a4                 | '     return -result                       'return success or error
264a4     02 FB 61 F6 | 	neg	result1, _var03
264a8                 | LR__2991
264a8                 | _psram_spin2_write_ret
264a8     2D 00 64 FD | 	ret
264ac                 | 
264ac                 | ' 
264ac                 | ' ' generalized fill
264ac                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
264ac                 | _psram_spin2_fill
264ac     09 01 02 F6 | 	mov	_var01, arg01
264b0     0A 03 02 F6 | 	mov	_var02, arg02
264b4     0B 05 02 F6 | 	mov	_var03, arg03
264b8     0D 07 02 F6 | 	mov	_var04, arg05
264bc                 | '     case datasize 
264bc     01 06 86 F1 | 	sub	_var04, #1
264c0     04 06 26 F3 | 	fle	_var04, #4
264c4     30 06 62 FD | 	jmprel	_var04
264c8                 | LR__3000
264c8     10 00 90 FD | 	jmp	#LR__3001
264cc     18 00 90 FD | 	jmp	#LR__3002
264d0     2C 00 90 FD | 	jmp	#LR__3004
264d4     1C 00 90 FD | 	jmp	#LR__3003
264d8     24 00 90 FD | 	jmp	#LR__3004
264dc                 | LR__3001
264dc                 | '         1: req := driver.R_WRITEBYTE
264dc     00 00 60 FF 
264e0     00 08 06 F6 | 	mov	_var05, ##-1073741824
264e4     20 00 90 FD | 	jmp	#LR__3005
264e8                 | LR__3002
264e8                 | '         2: req := driver.R_WRITEWORD
264e8     00 00 68 FF 
264ec     00 08 06 F6 | 	mov	_var05, ##-805306368
264f0     14 00 90 FD | 	jmp	#LR__3005
264f4                 | LR__3003
264f4                 | '         4: req := driver.R_WRITELONG
264f4     00 00 70 FF 
264f8     00 08 06 F6 | 	mov	_var05, ##-536870912
264fc     08 00 90 FD | 	jmp	#LR__3005
26500                 | LR__3004
26500                 | '         other : return ERR_INVALID
26500     06 FA 65 F6 | 	neg	result1, #6
26504     94 00 90 FD | 	jmp	#LR__3007
26508                 | LR__3005
26508                 | '     if count == 0   ' nothing to do
26508     00 04 0E F2 | 	cmp	_var03, #0 wz
2650c                 | '         return 0
2650c     00 FA 05 A6 |  if_e	mov	result1, #0
26510     88 00 90 AD |  if_e	jmp	#LR__3007
26514                 | '     if drivercog == -1
26514     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26518     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
2651c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26520     FF FF 7F FF 
26524     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
26528                 | '         return ERR_INACTIVE
26528     0F FA 65 A6 |  if_e	neg	result1, #15
2652c     6C 00 90 AD |  if_e	jmp	#LR__3007
26530                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
26530     00 FA 05 F6 | 	mov	result1, #0
26534     01 FA 61 FD | 	cogid	result1
26538     FD 06 02 F6 | 	mov	_var04, result1
2653c     01 06 66 F0 | 	shl	_var04, #1
26540     FD 06 02 F1 | 	add	_var04, result1
26544     02 06 66 F0 | 	shl	_var04, #2
26548     FF 03 00 FF 
2654c     00 0B 06 F6 | 	mov	_var06, ##524032
26550     03 0B 02 F1 | 	add	_var06, _var04
26554                 | '     if long[mailbox] < 0
26554     05 07 02 FB | 	rdlong	_var04, _var06
26558     00 06 56 F2 | 	cmps	_var04, #0 wc
2655c                 | '         return ERR_MAILBOX_BUSY
2655c     1C FA 65 C6 |  if_b	neg	result1, #28
26560     38 00 90 CD |  if_b	jmp	#LR__3007
26564                 | '     long[mailbox][2] := count
26564     08 0A 06 F1 | 	add	_var06, #8
26568     05 05 62 FC | 	wrlong	_var03, _var06
2656c                 | '     long[mailbox][1] := pattern
2656c     04 0A 86 F1 | 	sub	_var06, #4
26570     05 03 62 FC | 	wrlong	_var02, _var06
26574     04 0A 86 F1 | 	sub	_var06, #4
26578                 | '     long[mailbox] := req + (addr & $1ffffff)
26578     04 0D 02 F6 | 	mov	_var07, _var05
2657c     00 0F 02 F6 | 	mov	_var08, _var01
26580     D9 0E 06 F4 | 	bitl	_var08, #217
26584     07 0D 02 F1 | 	add	_var07, _var08
26588     05 0D 62 FC | 	wrlong	_var07, _var06
2658c                 | '     repeat
2658c                 | LR__3006
2658c                 | '         r := long[mailbox]
2658c     05 0F 02 FB | 	rdlong	_var08, _var06
26590     00 0E 56 F2 | 	cmps	_var08, #0 wc
26594     F4 FF 9F CD |  if_b	jmp	#LR__3006
26598                 | '     while r < 0
26598                 | '     return -r                  ' return 0 for success or negated error code
26598     07 FB 61 F6 | 	neg	result1, _var08
2659c                 | LR__3007
2659c                 | _psram_spin2_fill_ret
2659c     2D 00 64 FD | 	ret
265a0                 | 
265a0                 | ' 
265a0                 | ' '..............................................................................
265a0                 | ' 
265a0                 | ' {{
265a0                 | ' }}
265a0                 | ' PUB setQos(cog, qos) : result | mailbox
265a0                 | _psram_spin2_setQos
265a0     09 01 02 F6 | 	mov	_var01, arg01
265a4                 | '     if drivercog == -1 ' driver must be running
265a4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
265a8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
265ac     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
265b0     FF FF 7F FF 
265b4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
265b8                 | '         return ERR_INACTIVE
265b8     0F FA 65 A6 |  if_e	neg	result1, #15
265bc     9C 00 90 AD |  if_e	jmp	#LR__3014
265c0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
265c0     00 00 56 F2 | 	cmps	_var01, #0 wc
265c4     08 00 90 CD |  if_b	jmp	#LR__3010
265c8     08 00 56 F2 | 	cmps	_var01, #8 wc
265cc     08 00 90 CD |  if_b	jmp	#LR__3011
265d0                 | LR__3010
265d0                 | '         return ERR_INVALID
265d0     06 FA 65 F6 | 	neg	result1, #6
265d4     84 00 90 FD | 	jmp	#LR__3014
265d8                 | LR__3011
265d8                 | '     long[@qosData][cog] := qos & !$1ff
265d8     FF 15 26 F5 | 	andn	arg02, #511
265dc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
265e0     02 00 66 F0 | 	shl	_var01, #2
265e4     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
265e8     00 15 62 FC | 	wrlong	arg02, _var01
265ec                 | '     mailbox := $7FF00 + drivercog*12
265ec     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
265f0     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
265f4     02 07 02 F6 | 	mov	_var04, _var03
265f8     01 06 66 F0 | 	shl	_var04, #1
265fc     02 07 02 F1 | 	add	_var04, _var03
26600     02 06 66 F0 | 	shl	_var04, #2
26604     FF 03 00 FF 
26608     00 09 06 F6 | 	mov	_var05, ##524032
2660c     03 09 02 F1 | 	add	_var05, _var04
26610                 | '     repeat until LOCKTRY(driverlock)
26610     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
26614                 | LR__3012
26614     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26618     06 12 72 FD | 	locktry	arg01 wc
2661c     F4 FF 9F 3D |  if_ae	jmp	#LR__3012
26620     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26624                 | '     long[mailbox] := driver.R_CONFIG + cogid()
26624     00 06 06 F6 | 	mov	_var04, #0
26628     01 06 62 FD | 	cogid	_var04
2662c     00 00 78 FF 
26630     00 02 06 F6 | 	mov	_var02, ##-268435456
26634     03 03 02 F1 | 	add	_var02, _var04
26638     04 03 62 FC | 	wrlong	_var02, _var05
2663c                 | '     repeat while long[mailbox] < 0
2663c                 | LR__3013
2663c     04 03 02 FB | 	rdlong	_var02, _var05
26640     00 02 56 F2 | 	cmps	_var02, #0 wc
26644     F4 FF 9F CD |  if_b	jmp	#LR__3013
26648                 | '     LOCKREL(driverlock)
26648     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2664c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26650     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26654     07 12 72 FD | 	lockrel	arg01 wc
26658     00 FA 05 F6 | 	mov	result1, #0
2665c                 | LR__3014
2665c                 | _psram_spin2_setQos_ret
2665c     2D 00 64 FD | 	ret
26660                 | 
26660                 | ' 
26660                 | ' '..............................................................................
26660                 | ' 
26660                 | ' {{
26660                 | ' }}
26660                 | ' PRI lookupDelay(freq) : delay | profile
26660                 | _psram_spin2_lookupDelay
26660                 | '     profile := @delayTable
26660     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
26664     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
26668                 | '     delay := long[profile][0]
26668     00 03 02 FB | 	rdlong	_var02, _var01
2666c                 | '     repeat while long[profile][1] 
2666c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
26670     97 16 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
26674                 | LR__3020
26674     04 00 06 F1 | 	add	_var01, #4
26678     00 FB 09 FB | 	rdlong	result1, _var01 wz
2667c     04 00 86 F1 | 	sub	_var01, #4
26680     1C 00 90 AD |  if_e	jmp	#LR__3022
26684                 | '         if freq +< long[profile][1] 
26684     04 00 06 F1 | 	add	_var01, #4
26688     00 FB 01 FB | 	rdlong	result1, _var01
2668c     04 00 86 F1 | 	sub	_var01, #4
26690     FD 12 12 F2 | 	cmp	arg01, result1 wc
26694                 | '             quit
26694                 | '         profile += 4
26694     04 00 06 31 |  if_ae	add	_var01, #4
26698                 | '         delay++
26698     01 02 06 31 |  if_ae	add	_var02, #1
2669c     D4 FF 9F 3D |  if_ae	jmp	#LR__3020
266a0                 | LR__3021
266a0                 | LR__3022
266a0     01 FB 01 F6 | 	mov	result1, _var02
266a4                 | _psram_spin2_lookupDelay_ret
266a4     2D 00 64 FD | 	ret
266a8                 | 
266a8                 | ' 
266a8                 | ' PUB start() : r
266a8                 | _usbnew_spin2_start
266a8     00 00 06 F6 | 	mov	_var01, #0
266ac                 | '   ifnot driver_cog
266ac     15 00 00 FF 
266b0     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
266b4     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
266b8     15 00 00 FF 
266bc     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
266c0     38 00 90 5D |  if_ne	jmp	#LR__3030
266c4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
266c4     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
266c8     10 00 06 F6 | 	mov	_var01, #16
266cc     00 16 06 F6 | 	mov	arg03, #0
266d0     28 16 62 FD | 	setq	arg03
266d4     0A 01 F2 FC | 	coginit	_var01, arg02 wc
266d8     01 00 66 C6 |  if_b	neg	_var01, #1
266dc                 | '     if r >= 0
266dc     00 00 56 F2 | 	cmps	_var01, #0 wc
266e0                 | '       driver_cog := r+1
266e0     00 03 02 36 |  if_ae	mov	_var02, _var01
266e4     01 02 06 31 |  if_ae	add	_var02, #1
266e8     15 00 00 3F 
266ec     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
266f0     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
266f4     15 00 00 3F 
266f8     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
266fc                 | LR__3030
266fc     00 FB 01 F6 | 	mov	result1, _var01
26700                 | _usbnew_spin2_start_ret
26700     2D 00 64 FD | 	ret
26704                 | 
26704                 | '     '' (Always enabled)
26704                 | ' 
26704                 | ' '' Get current pressed state of a keyboard key
26704                 | ' PUB keystate(key) : r | buf[2],tmp
26704                 | _usbnew_spin2_keystate
26704     00 04 06 F6 | 	mov	_var03, #0
26708                 | '   if key >= $E0 && key < $E8
26708     E0 12 56 F2 | 	cmps	arg01, #224 wc
2670c     34 00 90 CD |  if_b	jmp	#LR__3040
26710     E8 12 56 F2 | 	cmps	arg01, #232 wc
26714     2C 00 90 3D |  if_ae	jmp	#LR__3040
26718                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
26718     00 FA 05 F6 | 	mov	result1, #0
2671c     13 00 00 FF 
26720     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
26724     09 07 02 F6 | 	mov	_var04, arg01
26728     E0 06 86 F1 | 	sub	_var04, #224
2672c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
26730     03 09 4A F0 | 	shr	_var05, _var04 wz
26734     13 00 00 FF 
26738     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
2673c     01 FA 65 56 |  if_ne	neg	result1, #1
26740     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
26744                 | LR__3040
26744                 | '   else
26744                 | '     '' Do this in inline ASM to ensure atomicity
26744                 | '     tmp := @hkbd_report
26744     13 00 00 FF 
26748     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
2674c     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
26750                 | '     org
26750     13 00 00 FF 
26754     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
26758     97 1E 48 FB | 	callpa	#(@LR__3042-@LR__3041)>>2,fcache_load_ptr_
2675c                 | LR__3041
2675c 000             | 	org	0
2675c 000 28 02 64 FD | 	setq	#1
26760 001 04 01 02 FB | 	rdlong	_var01, _var05
26764 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
26768 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
2676c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
26770 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26774 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
26778 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2677c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
26780 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26784 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
26788 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2678c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
26790 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26794 00e 01 04 66 A6 |  if_e	neg	_var03, #1
26798 00f             | LR__3042
26798                 | 	orgh
26798     02 FB 01 F6 | 	mov	result1, _var03
2679c                 | _usbnew_spin2_keystate_ret
2679c     2D 00 64 FD | 	ret
267a0                 | 
267a0                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
267a0                 | ' 
267a0                 | ' '' Return key event from buffer if there is one
267a0                 | ' PUB get_key() : r | tail
267a0                 | _usbnew_spin2_get_key
267a0                 | '   tail := keyq_tail
267a0     0F 00 00 FF 
267a4     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
267a8     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
267ac                 | '   if keyq_head == tail
267ac     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
267b0     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
267b4     0F 00 00 FF 
267b8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
267bc     00 03 0A F2 | 	cmp	_var02, _var01 wz
267c0                 | '     return 0 ' No event
267c0     00 FA 05 A6 |  if_e	mov	result1, #0
267c4     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
267c8                 | '   r := keyq_data[tail]
267c8     00 03 02 F6 | 	mov	_var02, _var01
267cc     02 02 66 F0 | 	shl	_var02, #2
267d0     0F 00 00 FF 
267d4     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
267d8     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
267dc     01 FB 01 FB | 	rdlong	result1, _var02
267e0                 | '   if ++tail == KEYQUEUE_SIZE
267e0     01 00 06 F1 | 	add	_var01, #1
267e4     80 00 0E F2 | 	cmp	_var01, #128 wz
267e8                 | '     tail := 0
267e8     00 00 06 A6 |  if_e	mov	_var01, #0
267ec                 | '   keyq_tail := tail
267ec     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
267f0     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
267f4     0F 00 00 FF 
267f8     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
267fc                 | _usbnew_spin2_get_key_ret
267fc     2D 00 64 FD | 	ret
26800                 | 
26800                 | ' 
26800                 | ' '' Emulate mouse movement
26800                 | ' PUB mouse_move(x,y)
26800                 | _usbnew_spin2_mouse_move
26800     02 4A 05 F6 | 	mov	COUNT_, #2
26804     A8 00 A0 FD | 	call	#pushregs_
26808     09 27 02 F6 | 	mov	local01, arg01
2680c     0A 29 02 F6 | 	mov	local02, arg02
26810                 | '   mouse_lock := 1
26810     14 00 00 FF 
26814     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
26818     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
2681c     14 00 00 FF 
26820     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26824                 | '   waitus(2) ' hope driver is now done
26824     02 12 06 F6 | 	mov	arg01, #2
26828     A0 0B B0 FD | 	call	#__system___waitus
2682c                 | '   mouse_xacc := x
2682c     14 00 00 FF 
26830     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
26834     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
26838                 | '   mouse_yacc := y
26838     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2683c     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
26840                 | '   if mouse_outptr
26840     04 00 00 FF 
26844     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
26848     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
2684c     0F 00 00 FF 
26850     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
26854     24 00 90 AD |  if_e	jmp	#LR__3050
26858                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
26858     10 28 66 F0 | 	shl	local02, #16
2685c     13 27 32 F9 | 	getword	local01, local01, #0
26860     13 29 42 F5 | 	or	local02, local01
26864     0F 00 00 FF 
26868     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
2686c     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
26870     0F 00 00 FF 
26874     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
26878     13 29 62 FC | 	wrlong	local02, local01
2687c                 | LR__3050
2687c                 | '   mouse_lock := 0
2687c     14 00 00 FF 
26880     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
26884     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
26888     14 00 00 FF 
2688c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26890     A7 F0 03 F6 | 	mov	ptra, fp
26894     B2 00 A0 FD | 	call	#popregs_
26898                 | _usbnew_spin2_mouse_move_ret
26898     2D 00 64 FD | 	ret
2689c                 | 
2689c                 | '     '' Set HAVE_HIDPAD to enable.
2689c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
2689c                 | ' 
2689c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
2689c                 | ' PUB hidpad_id(dev) : r
2689c                 | _usbnew_spin2_hidpad_id
2689c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
2689c     13 00 00 FF 
268a0     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
268a4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
268a8     09 01 02 F6 | 	mov	_var01, arg01
268ac     03 00 66 F0 | 	shl	_var01, #3
268b0     09 01 82 F1 | 	sub	_var01, arg01
268b4     02 00 66 F0 | 	shl	_var01, #2
268b8     00 FB 01 F1 | 	add	result1, _var01
268bc     FD FA 01 FB | 	rdlong	result1, result1
268c0     13 00 00 FF 
268c4     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
268c8                 | _usbnew_spin2_hidpad_id_ret
268c8     2D 00 64 FD | 	ret
268cc                 | 
268cc                 | ' 
268cc                 | ' '' Get all button states for a device
268cc                 | ' PUB hidpad_buttons(dev) : r 
268cc                 | _usbnew_spin2_hidpad_buttons
268cc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
268cc     13 00 00 FF 
268d0     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
268d4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
268d8     09 01 02 F6 | 	mov	_var01, arg01
268dc     03 00 66 F0 | 	shl	_var01, #3
268e0     09 01 82 F1 | 	sub	_var01, arg01
268e4     02 00 66 F0 | 	shl	_var01, #2
268e8     00 FB 01 F1 | 	add	result1, _var01
268ec     14 FA 05 F1 | 	add	result1, #20
268f0     FD FA 01 FB | 	rdlong	result1, result1
268f4     13 00 00 FF 
268f8     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
268fc                 | _usbnew_spin2_hidpad_buttons_ret
268fc     2D 00 64 FD | 	ret
26900                 | 
26900                 | ' 
26900                 | ' '' Get state of an axis (normalized between -32768 and 32767)
26900                 | ' PUB hidpad_axis(dev,axnum) : r
26900                 | _usbnew_spin2_hidpad_axis
26900                 | '   if axnum +>= 6
26900     06 14 16 F2 | 	cmp	arg02, #6 wc
26904                 | '     return 0
26904     00 FA 05 36 |  if_ae	mov	result1, #0
26908     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2690c                 | '   else 
2690c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2690c     13 00 00 FF 
26910     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26914     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26918     09 01 02 F6 | 	mov	_var01, arg01
2691c     03 00 66 F0 | 	shl	_var01, #3
26920     09 01 82 F1 | 	sub	_var01, arg01
26924     02 00 66 F0 | 	shl	_var01, #2
26928     00 FB 01 F1 | 	add	result1, _var01
2692c     04 00 06 F6 | 	mov	_var01, #4
26930     0A 01 02 F1 | 	add	_var01, arg02
26934     01 00 66 F0 | 	shl	_var01, #1
26938     FD 00 02 F1 | 	add	_var01, result1
2693c     00 FB E1 FA | 	rdword	result1, _var01
26940     0F FA 65 F7 | 	signx	result1, #15
26944     13 00 00 FF 
26948     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
2694c                 | _usbnew_spin2_hidpad_axis_ret
2694c     2D 00 64 FD | 	ret
26950                 | 
26950                 | ' 
26950                 | ' '' Get state of a hat
26950                 | ' PUB hidpad_hat(dev,hatnum) : r
26950                 | _usbnew_spin2_hidpad_hat
26950                 | '   if hatnum +>= 4
26950     04 14 16 F2 | 	cmp	arg02, #4 wc
26954                 | '     return 0
26954     00 FA 05 36 |  if_ae	mov	result1, #0
26958     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
2695c                 | '   else 
2695c                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
2695c     13 00 00 FF 
26960     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26964     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26968     09 01 02 F6 | 	mov	_var01, arg01
2696c     03 00 66 F0 | 	shl	_var01, #3
26970     09 01 82 F1 | 	sub	_var01, arg01
26974     02 00 66 F0 | 	shl	_var01, #2
26978     00 FB 01 F1 | 	add	result1, _var01
2697c     18 00 06 F6 | 	mov	_var01, #24
26980     0A 01 02 F1 | 	add	_var01, arg02
26984     FD 00 02 F1 | 	add	_var01, result1
26988     00 FB C1 FA | 	rdbyte	result1, _var01
2698c     13 00 00 FF 
26990     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26994                 | _usbnew_spin2_hidpad_hat_ret
26994     2D 00 64 FD | 	ret
26998                 | 
26998                 | ' 
26998                 | ' 
26998                 | ' '--------------------------------------------------------------
26998                 | ' '---------- Init the variables, start the cog. ----------------
26998                 | ' '--------------------------------------------------------------
26998                 | ' 
26998                 | ' pub start(mbox,scope,cache) :cog,base | iii
26998                 | _audio096_spin2_start
26998     04 4A 05 F6 | 	mov	COUNT_, #4
2699c     A8 00 A0 FD | 	call	#pushregs_
269a0     09 27 02 F6 | 	mov	local01, arg01
269a4                 | ' 
269a4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
269a4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
269a4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
269a4                 | ' 
269a4                 | ' mailboxaddr:=mbox 
269a4     F2 26 62 FC | 	wrlong	local01, objptr
269a8                 | ' scope_ptr:=scope
269a8     04 E4 05 F1 | 	add	objptr, #4
269ac     F2 14 62 FC | 	wrlong	arg02, objptr
269b0                 | ' cache_ptr:=cache
269b0     04 E4 05 F1 | 	add	objptr, #4
269b4     F2 16 62 FC | 	wrlong	arg03, objptr
269b8                 | ' base:=@channel1[0]
269b8     04 E4 05 F1 | 	add	objptr, #4
269bc     F2 28 02 F6 | 	mov	local02, objptr
269c0                 | ' long[$40]:=mbox
269c0     40 26 66 FC | 	wrlong	local01, #64
269c4                 | ' repeat iii from 0 to 7
269c4     00 2A 06 F6 | 	mov	local03, #0
269c8     02 00 00 FF 
269cc     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
269d0     0C E4 85 F1 | 	sub	objptr, #12
269d4     97 BC 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
269d8                 | LR__3060
269d8                 | '   long[base+64*iii]:=0
269d8     14 27 02 F6 | 	mov	local01, local02
269dc     15 FD 01 F6 | 	mov	result2, local03
269e0     06 FC 65 F0 | 	shl	result2, #6
269e4     FE 26 02 F1 | 	add	local01, result2
269e8     13 01 68 FC | 	wrlong	#0, local01
269ec                 | '   long[base+64*iii+4]:=0
269ec     14 27 02 F6 | 	mov	local01, local02
269f0     15 FD 01 F6 | 	mov	result2, local03
269f4     06 FC 65 F0 | 	shl	result2, #6
269f8     FE 26 02 F1 | 	add	local01, result2
269fc     04 26 06 F1 | 	add	local01, #4
26a00     13 01 68 FC | 	wrlong	#0, local01
26a04                 | '   long[base+64*iii+12]:=0
26a04     14 2D 02 F6 | 	mov	local04, local02
26a08     15 27 02 F6 | 	mov	local01, local03
26a0c     06 26 66 F0 | 	shl	local01, #6
26a10     13 2D 02 F1 | 	add	local04, local01
26a14     0C 2C 06 F1 | 	add	local04, #12
26a18     16 01 68 FC | 	wrlong	#0, local04
26a1c                 | '   long[base+64*iii+16]:=2 
26a1c     14 2D 02 F6 | 	mov	local04, local02
26a20     15 27 02 F6 | 	mov	local01, local03
26a24     06 26 66 F0 | 	shl	local01, #6
26a28     13 2D 02 F1 | 	add	local04, local01
26a2c     10 2C 06 F1 | 	add	local04, #16
26a30     16 05 68 FC | 	wrlong	#2, local04
26a34                 | '   word[base+64*iii+20]:=0
26a34     14 2D 02 F6 | 	mov	local04, local02
26a38     15 27 02 F6 | 	mov	local01, local03
26a3c     06 26 66 F0 | 	shl	local01, #6
26a40     13 2D 02 F1 | 	add	local04, local01
26a44     14 2C 06 F1 | 	add	local04, #20
26a48     16 01 58 FC | 	wrword	#0, local04
26a4c                 | '   word[base+64*iii+22]:=8192
26a4c     14 2D 02 F6 | 	mov	local04, local02
26a50     15 27 02 F6 | 	mov	local01, local03
26a54     06 26 66 F0 | 	shl	local01, #6
26a58     13 2D 02 F1 | 	add	local04, local01
26a5c     16 2C 06 F1 | 	add	local04, #22
26a60     10 00 80 FF 
26a64     16 01 58 FC | 	wrword	##8192, local04
26a68                 | '   word[base+64*iii+24]:=4000+2*iii
26a68     15 2D 02 F6 | 	mov	local04, local03
26a6c     01 2C 66 F0 | 	shl	local04, #1
26a70     07 00 00 FF 
26a74     A0 27 06 F6 | 	mov	local01, ##4000
26a78     16 27 02 F1 | 	add	local01, local04
26a7c     14 2D 02 F6 | 	mov	local04, local02
26a80     15 FD 01 F6 | 	mov	result2, local03
26a84     06 FC 65 F0 | 	shl	result2, #6
26a88     FE 2C 02 F1 | 	add	local04, result2
26a8c     18 2C 06 F1 | 	add	local04, #24
26a90     16 27 52 FC | 	wrword	local01, local04
26a94                 | '   word[base+64*iii+26]:=2
26a94     14 2D 02 F6 | 	mov	local04, local02
26a98     15 27 02 F6 | 	mov	local01, local03
26a9c     06 26 66 F0 | 	shl	local01, #6
26aa0     13 2D 02 F1 | 	add	local04, local01
26aa4     1A 2C 06 F1 | 	add	local04, #26
26aa8     16 05 58 FC | 	wrword	#2, local04
26aac                 | '   long [base+64*iii+8]:=@null | $C0000000
26aac     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
26ab0     3E 26 26 F4 | 	bith	local01, #62
26ab4     14 2D 02 F6 | 	mov	local04, local02
26ab8     15 17 02 F6 | 	mov	arg03, local03
26abc     06 16 66 F0 | 	shl	arg03, #6
26ac0     0B 2D 02 F1 | 	add	local04, arg03
26ac4     08 2C 06 F1 | 	add	local04, #8
26ac8     16 27 62 FC | 	wrlong	local01, local04
26acc                 | '   long[base+64*iii+32]:=0
26acc     14 2D 02 F6 | 	mov	local04, local02
26ad0     15 27 02 F6 | 	mov	local01, local03
26ad4     06 26 66 F0 | 	shl	local01, #6
26ad8     13 2D 02 F1 | 	add	local04, local01
26adc     20 2C 06 F1 | 	add	local04, #32
26ae0     16 01 68 FC | 	wrlong	#0, local04
26ae4                 | '   long[base+64*iii+36]:=0
26ae4     14 2D 02 F6 | 	mov	local04, local02
26ae8     15 27 02 F6 | 	mov	local01, local03
26aec     06 26 66 F0 | 	shl	local01, #6
26af0     13 2D 02 F1 | 	add	local04, local01
26af4     24 2C 06 F1 | 	add	local04, #36
26af8     16 01 68 FC | 	wrlong	#0, local04
26afc                 | '   long[base+64*iii+40]:=0
26afc     14 2D 02 F6 | 	mov	local04, local02
26b00     15 27 02 F6 | 	mov	local01, local03
26b04     06 26 66 F0 | 	shl	local01, #6
26b08     13 2D 02 F1 | 	add	local04, local01
26b0c     28 2C 06 F1 | 	add	local04, #40
26b10     16 01 68 FC | 	wrlong	#0, local04
26b14                 | '   long[base+64*iii+44]:=0
26b14     14 2D 02 F6 | 	mov	local04, local02
26b18     15 27 02 F6 | 	mov	local01, local03
26b1c     06 26 66 F0 | 	shl	local01, #6
26b20     13 2D 02 F1 | 	add	local04, local01
26b24     2C 2C 06 F1 | 	add	local04, #44
26b28     16 01 68 FC | 	wrlong	#0, local04
26b2c                 | '   long[base+64*iii+28]:=0
26b2c     14 2D 02 F6 | 	mov	local04, local02
26b30     15 27 02 F6 | 	mov	local01, local03
26b34     06 26 66 F0 | 	shl	local01, #6
26b38     13 2D 02 F1 | 	add	local04, local01
26b3c     1C 2C 06 F1 | 	add	local04, #28
26b40     16 01 68 FC | 	wrlong	#0, local04
26b44     01 2A 06 F1 | 	add	local03, #1
26b48     08 2A 56 F2 | 	cmps	local03, #8 wc
26b4c     88 FE 9F CD |  if_b	jmp	#LR__3060
26b50                 | LR__3061
26b50     02 00 00 FF 
26b54     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
26b58                 | '   
26b58                 | ' cog:=coginit(16,@audio,@mailboxaddr)
26b58     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
26b5c     F2 16 02 F6 | 	mov	arg03, objptr
26b60     10 2C 06 F6 | 	mov	local04, #16
26b64     28 16 62 FD | 	setq	arg03
26b68     0A 2D F2 FC | 	coginit	local04, arg02 wc
26b6c     01 2C 66 C6 |  if_b	neg	local04, #1
26b70                 | ' waitms(100)
26b70     64 12 06 F6 | 	mov	arg01, #100
26b74     E8 07 B0 FD | 	call	#__system___waitms
26b78                 | ' return cog,base
26b78     14 FD 01 F6 | 	mov	result2, local02
26b7c     16 FB 01 F6 | 	mov	result1, local04
26b80     A7 F0 03 F6 | 	mov	ptra, fp
26b84     B2 00 A0 FD | 	call	#popregs_
26b88                 | _audio096_spin2_start_ret
26b88     2D 00 64 FD | 	ret
26b8c                 | 
26b8c                 | ' 
26b8c                 | ' ' a simple play procedure to not poke everything. 
26b8c                 | ' 
26b8c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
26b8c                 | _audio096_spin2_play
26b8c     0C E4 05 F1 | 	add	objptr, #12
26b90     F2 00 02 F6 | 	mov	_var01, objptr
26b94     06 12 66 F0 | 	shl	arg01, #6
26b98     09 01 02 F1 | 	add	_var01, arg01
26b9c     00 13 02 F6 | 	mov	arg01, _var01
26ba0     0C 12 06 F1 | 	add	arg01, #12
26ba4     09 1B 62 FC | 	wrlong	arg05, arg01
26ba8     00 1C 56 F2 | 	cmps	arg06, #0 wc
26bac     00 13 02 36 |  if_ae	mov	arg01, _var01
26bb0     10 12 06 31 |  if_ae	add	arg01, #16
26bb4     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
26bb8     02 1A 06 C1 |  if_b	add	arg05, #2
26bbc     00 13 02 C6 |  if_b	mov	arg01, _var01
26bc0     10 12 06 C1 |  if_b	add	arg01, #16
26bc4     09 1B 62 CC |  if_b	wrlong	arg05, arg01
26bc8     0B 13 52 F6 | 	abs	arg01, arg03 wc
26bcc     0F 1B 80 FF 
26bd0     09 1F 1A FD | 	qdiv	##3546895, arg01
26bd4                 | ' 
26bd4                 | ' base2:=@channel1[0]+64*channel
26bd4                 | ' 
26bd4                 | ' 
26bd4                 | ' long[base2+12]:= len
26bd4                 | ' if loop >=0 
26bd4                 | '   long[base2+16]:= loop
26bd4     0C E4 85 F1 | 	sub	objptr, #12
26bd8                 | ' else
26bd8                 | '   long[base2+16]:= len+2
26bd8                 | ' word[base2+20]:=vol
26bd8     00 13 02 F6 | 	mov	arg01, _var01
26bdc     14 12 06 F1 | 	add	arg01, #20
26be0     09 19 52 FC | 	wrword	arg04, arg01
26be4                 | ' word[base2+24]:= 3546895/splfreq 
26be4     00 19 02 F6 | 	mov	arg04, _var01
26be8     18 18 06 F1 | 	add	arg04, #24
26bec                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26bec                 | ' long[base2+28]:=$40000000    
26bec                 | ' long[base2+32]:=0    
26bec                 | ' long[base2+36]:=0    
26bec                 | ' long[base2+40]:=0    
26bec                 | ' long[base2+44]:=0    
26bec                 | ' long[base2+8]:=sample+$C0000000     
26bec     00 00 60 FF 
26bf0     00 14 06 F1 | 	add	arg02, ##-1073741824
26bf4     18 12 62 FD | 	getqx	arg01
26bf8     09 13 82 F6 | 	negc	arg01, arg01
26bfc     0C 13 52 FC | 	wrword	arg01, arg04
26c00     00 13 02 F6 | 	mov	arg01, _var01
26c04     1A 12 06 F1 | 	add	arg01, #26
26c08     09 01 5A FC | 	wrword	#256, arg01
26c0c     00 13 02 F6 | 	mov	arg01, _var01
26c10     1C 12 06 F1 | 	add	arg01, #28
26c14     00 00 A0 FF 
26c18     09 01 68 FC | 	wrlong	##1073741824, arg01
26c1c     00 13 02 F6 | 	mov	arg01, _var01
26c20     20 12 06 F1 | 	add	arg01, #32
26c24     09 01 68 FC | 	wrlong	#0, arg01
26c28     00 13 02 F6 | 	mov	arg01, _var01
26c2c     24 12 06 F1 | 	add	arg01, #36
26c30     09 01 68 FC | 	wrlong	#0, arg01
26c34     00 13 02 F6 | 	mov	arg01, _var01
26c38     28 12 06 F1 | 	add	arg01, #40
26c3c     09 01 68 FC | 	wrlong	#0, arg01
26c40     00 13 02 F6 | 	mov	arg01, _var01
26c44     2C 12 06 F1 | 	add	arg01, #44
26c48     09 01 68 FC | 	wrlong	#0, arg01
26c4c     08 00 06 F1 | 	add	_var01, #8
26c50     00 15 62 FC | 	wrlong	arg02, _var01
26c54                 | _audio096_spin2_play_ret
26c54     2D 00 64 FD | 	ret
26c58                 | 
26c58                 | ' 
26c58                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
26c58                 | _audio096_spin2_play8
26c58                 | ' 
26c58                 | ' base2:=@channel1[0]+64*channel
26c58     0C E4 05 F1 | 	add	objptr, #12
26c5c     F2 00 02 F6 | 	mov	_var01, objptr
26c60     06 12 66 F0 | 	shl	arg01, #6
26c64     09 01 02 F1 | 	add	_var01, arg01
26c68                 | ' long[base2]:=0
26c68     00 01 68 FC | 	wrlong	#0, _var01
26c6c                 | ' long[base2+8]:=sample+$40000000 
26c6c     00 00 20 FF 
26c70     00 14 06 F1 | 	add	arg02, ##1073741824
26c74     00 13 02 F6 | 	mov	arg01, _var01
26c78     08 12 06 F1 | 	add	arg01, #8
26c7c     09 15 62 FC | 	wrlong	arg02, arg01
26c80                 | ' if loop>=0
26c80     00 1C 56 F2 | 	cmps	arg06, #0 wc
26c84     0C E4 85 F1 | 	sub	objptr, #12
26c88     1C 00 90 CD |  if_b	jmp	#LR__3070
26c8c                 | '   long[base2+12]:=loop
26c8c     00 15 02 F6 | 	mov	arg02, _var01
26c90     0C 14 06 F1 | 	add	arg02, #12
26c94     0A 1D 62 FC | 	wrlong	arg06, arg02
26c98                 | '   long[base2+16]:= len
26c98     00 1D 02 F6 | 	mov	arg06, _var01
26c9c     10 1C 06 F1 | 	add	arg06, #16
26ca0     0E 1B 62 FC | 	wrlong	arg05, arg06
26ca4     1C 00 90 FD | 	jmp	#LR__3071
26ca8                 | LR__3070
26ca8                 | ' else
26ca8                 | '   long[base2+12]:= len
26ca8     00 1D 02 F6 | 	mov	arg06, _var01
26cac     0C 1C 06 F1 | 	add	arg06, #12
26cb0     0E 1B 62 FC | 	wrlong	arg05, arg06
26cb4                 | '   long[base2+16]:= len+1
26cb4     01 1A 06 F1 | 	add	arg05, #1
26cb8     00 13 02 F6 | 	mov	arg01, _var01
26cbc     10 12 06 F1 | 	add	arg01, #16
26cc0     09 1B 62 FC | 	wrlong	arg05, arg01
26cc4                 | LR__3071
26cc4     0B 17 52 F6 | 	abs	arg03, arg03 wc
26cc8     0F 1B 80 FF 
26ccc     0B 1F 1A FD | 	qdiv	##3546895, arg03
26cd0                 | ' word[base2+20]:=vol
26cd0     00 17 02 F6 | 	mov	arg03, _var01
26cd4     14 16 06 F1 | 	add	arg03, #20
26cd8     0B 19 52 FC | 	wrword	arg04, arg03
26cdc                 | ' word[base2+24]:= 3546895 /splfreq 
26cdc     00 13 02 F6 | 	mov	arg01, _var01
26ce0     18 12 06 F1 | 	add	arg01, #24
26ce4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26ce4     1A 00 06 F1 | 	add	_var01, #26
26ce8     18 18 62 FD | 	getqx	arg04
26cec     0C 19 82 F6 | 	negc	arg04, arg04
26cf0     09 19 52 FC | 	wrword	arg04, arg01
26cf4     00 01 5A FC | 	wrword	#256, _var01
26cf8                 | _audio096_spin2_play8_ret
26cf8     2D 00 64 FD | 	ret
26cfc                 | 
26cfc                 | ' 'long[base2+28]:=$40000000
26cfc                 | ' 
26cfc                 | '     
26cfc                 | ' pub stop(channel) 'silence it
26cfc                 | _audio096_spin2_stop
26cfc                 | ' 
26cfc                 | ' word[@channel1[0]+64*channel+20]:=0
26cfc     0C E4 05 F1 | 	add	objptr, #12
26d00     F2 00 02 F6 | 	mov	_var01, objptr
26d04     09 03 02 F6 | 	mov	_var02, arg01
26d08     06 02 66 F0 | 	shl	_var02, #6
26d0c     01 01 02 F1 | 	add	_var01, _var02
26d10     14 00 06 F1 | 	add	_var01, #20
26d14     00 01 58 FC | 	wrword	#0, _var01
26d18                 | ' word[@channel1[0]+64*channel+20]:=0
26d18     F2 00 02 F6 | 	mov	_var01, objptr
26d1c     06 12 66 F0 | 	shl	arg01, #6
26d20     09 01 02 F1 | 	add	_var01, arg01
26d24     14 00 06 F1 | 	add	_var01, #20
26d28     00 01 58 FC | 	wrword	#0, _var01
26d2c     0C E4 85 F1 | 	sub	objptr, #12
26d30                 | _audio096_spin2_stop_ret
26d30     2D 00 64 FD | 	ret
26d34                 | hubexit
26d34     81 00 80 FD | 	jmp	#cogexit
26d38                 | 
26d38                 | __system___setbaud
26d38     14 90 06 FB | 	rdlong	muldiva_, #20
26d3c     09 93 02 F6 | 	mov	muldivb_, arg01
26d40     BA 00 A0 FD | 	call	#divide_
26d44     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
26d48                 | LR__3080
26d48     3E FA 9D FA | 	rdpin	result1, #62 wc
26d4c     FE FC A1 F1 | 	subx	result2, result2
26d50     F4 FF 9F CD |  if_b	jmp	#LR__3080
26d54                 | LR__3081
26d54     40 7C 64 FD | 	dirl	#62
26d58     40 7E 64 FD | 	dirl	#63
26d5c     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
26d60     10 92 66 F0 | 	shl	muldivb_, #16
26d64     07 14 06 F6 | 	mov	arg02, #7
26d68     49 15 02 F1 | 	add	arg02, muldivb_
26d6c     3E F8 0C FC | 	wrpin	#124, #62
26d70     3E 14 16 FC | 	wxpin	arg02, #62
26d74     3F 7C 0C FC | 	wrpin	#62, #63
26d78     14 14 06 F1 | 	add	arg02, #20
26d7c     3F 14 16 FC | 	wxpin	arg02, #63
26d80     41 7C 64 FD | 	dirh	#62
26d84     41 7E 64 FD | 	dirh	#63
26d88                 | __system___setbaud_ret
26d88     2D 00 64 FD | 	ret
26d8c                 | 
26d8c                 | __system___txraw
26d8c     01 4A 05 F6 | 	mov	COUNT_, #1
26d90     A8 00 A0 FD | 	call	#pushregs_
26d94     09 27 02 F6 | 	mov	local01, arg01
26d98     97 06 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
26d9c                 | LR__3090
26d9c     3E FA 9D FA | 	rdpin	result1, #62 wc
26da0     FE FC A1 F1 | 	subx	result2, result2
26da4     F4 FF 9F CD |  if_b	jmp	#LR__3090
26da8                 | LR__3091
26da8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
26dac     C2 01 00 AF 
26db0     00 12 06 A6 |  if_e	mov	arg01, ##230400
26db4     80 FF BF AD |  if_e	call	#__system___setbaud
26db8     58 7C 64 FD | 	drvl	#62
26dbc     3E 26 26 FC | 	wypin	local01, #62
26dc0     01 FA 05 F6 | 	mov	result1, #1
26dc4     A7 F0 03 F6 | 	mov	ptra, fp
26dc8     B2 00 A0 FD | 	call	#popregs_
26dcc                 | __system___txraw_ret
26dcc     2D 00 64 FD | 	ret
26dd0                 | 
26dd0                 | __system___rxraw
26dd0     0D 4A 05 F6 | 	mov	COUNT_, #13
26dd4     A8 00 A0 FD | 	call	#pushregs_
26dd8     09 27 02 F6 | 	mov	local01, arg01
26ddc     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26de0     C2 01 00 AF 
26de4     00 12 06 A6 |  if_e	mov	arg01, ##230400
26de8     4C FF BF AD |  if_e	call	#__system___setbaud
26dec     00 26 0E F2 | 	cmp	local01, #0 wz
26df0     20 00 90 AD |  if_e	jmp	#LR__3100
26df4     14 2A 06 FB | 	rdlong	local03, #20
26df8     0A 2A 46 F0 | 	shr	local03, #10
26dfc     15 27 02 FD | 	qmul	local01, local03
26e00     1A FA 61 FD | 	getct	result1
26e04     18 2C 62 FD | 	getqx	local04
26e08     16 FB 01 F1 | 	add	result1, local04
26e0c     FD 2E 02 F6 | 	mov	local05, result1
26e10     04 00 90 FD | 	jmp	#LR__3101
26e14                 | LR__3100
26e14     00 2E 06 F6 | 	mov	local05, #0
26e18                 | LR__3101
26e18     01 30 66 F6 | 	neg	local06, #1
26e1c     3F 32 06 F6 | 	mov	local07, #63
26e20     00 34 06 F6 | 	mov	local08, #0
26e24     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26e28     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
26e2c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
26e30                 | LR__3102
26e30     08 36 16 F4 | 	testb	local09, #8 wc
26e34     09 36 76 F4 | 	testbn	local09, #9 andc
26e38     0A 36 46 F0 | 	shr	local09, #10
26e3c     01 34 06 C6 |  if_b	mov	local08, #1
26e40     40 7E 6C 3D |  if_ae	testp	#63 wz
26e44     01 34 06 26 |  if_nc_and_z	mov	local08, #1
26e48     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
26e4c     04 36 46 20 |  if_nc_and_z	shr	local09, #4
26e50                 | LR__3103
26e50     00 28 06 F6 | 	mov	local02, #0
26e54     00 34 0E F2 | 	cmp	local08, #0 wz
26e58     01 28 66 56 |  if_ne	neg	local02, #1
26e5c     00 38 06 F6 | 	mov	local10, #0
26e60     00 2A 06 F6 | 	mov	local03, #0
26e64     00 26 0E F2 | 	cmp	local01, #0 wz
26e68     01 2A 66 56 |  if_ne	neg	local03, #1
26e6c     00 2C 06 F6 | 	mov	local04, #0
26e70     00 3A 06 F6 | 	mov	local11, #0
26e74     17 3D 02 F6 | 	mov	local12, local05
26e78     1A FA 61 FD | 	getct	result1
26e7c     FD 3E 02 F6 | 	mov	local13, result1
26e80     1F 3D 82 F1 | 	sub	local12, local13
26e84     00 3C 56 F2 | 	cmps	local12, #0 wc
26e88     00 3A 26 C6 |  if_b	not	local11, #0
26e8c     00 3A 0E F2 | 	cmp	local11, #0 wz
26e90     00 2C 26 56 |  if_ne	not	local04, #0
26e94     16 2B CA F7 | 	test	local03, local04 wz
26e98     00 38 26 56 |  if_ne	not	local10, #0
26e9c     1C 29 4A F5 | 	or	local02, local10 wz
26ea0     8C FF 9F AD |  if_e	jmp	#LR__3102
26ea4     00 34 0E F2 | 	cmp	local08, #0 wz
26ea8     1B 31 02 56 |  if_ne	mov	local06, local09
26eac     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
26eb0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26eb4     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
26eb8     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
26ebc     18 FB 01 F6 | 	mov	result1, local06
26ec0     A7 F0 03 F6 | 	mov	ptra, fp
26ec4     B2 00 A0 FD | 	call	#popregs_
26ec8                 | __system___rxraw_ret
26ec8     2D 00 64 FD | 	ret
26ecc                 | 
26ecc                 | __system___getus
26ecc     1A FC 71 FD | 	getct	result2 wc
26ed0     1A 00 62 FD | 	getct	_var01
26ed4     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26ed8     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
26edc     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26ee0     20 00 90 5D |  if_ne	jmp	#LR__3110
26ee4     14 02 06 FB | 	rdlong	_var02, #20
26ee8     A1 07 00 FF 
26eec     40 02 16 FD | 	qdiv	_var02, ##1000000
26ef0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26ef4     18 FA 61 FD | 	getqx	result1
26ef8     FD 02 02 F6 | 	mov	_var02, result1
26efc     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26f00     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26f04                 | LR__3110
26f04     01 FD 11 FD | 	qdiv	result2, _var02
26f08     19 FC 61 FD | 	getqy	result2
26f0c     28 FC 61 FD | 	setq	result2
26f10     01 01 12 FD | 	qdiv	_var01, _var02
26f14     18 FA 61 FD | 	getqx	result1
26f18                 | __system___getus_ret
26f18     2D 00 64 FD | 	ret
26f1c                 | 
26f1c                 | __system____builtin_memmove
26f1c     09 01 02 F6 | 	mov	_var01, arg01
26f20     0A 13 52 F2 | 	cmps	arg01, arg02 wc
26f24     10 00 90 CD |  if_b	jmp	#LR__3120
26f28     0A 03 02 F6 | 	mov	_var02, arg02
26f2c     0B 03 02 F1 | 	add	_var02, arg03
26f30     01 13 52 F2 | 	cmps	arg01, _var02 wc
26f34     48 00 90 CD |  if_b	jmp	#LR__3126
26f38                 | LR__3120
26f38     0B 05 02 F6 | 	mov	_var03, arg03
26f3c     02 04 4E F0 | 	shr	_var03, #2 wz
26f40     18 00 90 AD |  if_e	jmp	#LR__3125
26f44     97 0A 48 FB | 	callpa	#(@LR__3123-@LR__3121)>>2,fcache_load_ptr_
26f48                 | LR__3121
26f48     02 09 D8 FC | 	rep	@LR__3124, _var03
26f4c                 | LR__3122
26f4c     0A 05 02 FB | 	rdlong	_var03, arg02
26f50     09 05 62 FC | 	wrlong	_var03, arg01
26f54     04 12 06 F1 | 	add	arg01, #4
26f58     04 14 06 F1 | 	add	arg02, #4
26f5c                 | LR__3123
26f5c                 | LR__3124
26f5c                 | LR__3125
26f5c     02 16 CE F7 | 	test	arg03, #2 wz
26f60     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
26f64     09 03 52 5C |  if_ne	wrword	_var02, arg01
26f68     02 12 06 51 |  if_ne	add	arg01, #2
26f6c     02 14 06 51 |  if_ne	add	arg02, #2
26f70     01 16 CE F7 | 	test	arg03, #1 wz
26f74     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
26f78     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
26f7c     28 00 90 FD | 	jmp	#LR__3132
26f80                 | LR__3126
26f80     0B 13 02 F1 | 	add	arg01, arg03
26f84     0B 15 02 F1 | 	add	arg02, arg03
26f88     0B 07 0A F6 | 	mov	_var04, arg03 wz
26f8c     18 00 90 AD |  if_e	jmp	#LR__3131
26f90     97 0A 48 FB | 	callpa	#(@LR__3129-@LR__3127)>>2,fcache_load_ptr_
26f94                 | LR__3127
26f94     03 09 D8 FC | 	rep	@LR__3130, _var04
26f98                 | LR__3128
26f98     01 12 86 F1 | 	sub	arg01, #1
26f9c     01 14 86 F1 | 	sub	arg02, #1
26fa0     0A 03 C2 FA | 	rdbyte	_var02, arg02
26fa4     09 03 42 FC | 	wrbyte	_var02, arg01
26fa8                 | LR__3129
26fa8                 | LR__3130
26fa8                 | LR__3131
26fa8                 | LR__3132
26fa8     00 FB 01 F6 | 	mov	result1, _var01
26fac                 | __system____builtin_memmove_ret
26fac     2D 00 64 FD | 	ret
26fb0                 | 
26fb0                 | __system__longmove
26fb0     09 01 02 F6 | 	mov	_var01, arg01
26fb4     0A 13 52 F2 | 	cmps	arg01, arg02 wc
26fb8     24 00 90 3D |  if_ae	jmp	#LR__3144
26fbc     0B 03 0A F6 | 	mov	_var02, arg03 wz
26fc0     54 00 90 AD |  if_e	jmp	#LR__3150
26fc4     97 0A 48 FB | 	callpa	#(@LR__3142-@LR__3140)>>2,fcache_load_ptr_
26fc8                 | LR__3140
26fc8     01 09 D8 FC | 	rep	@LR__3143, _var02
26fcc                 | LR__3141
26fcc     0A 03 02 FB | 	rdlong	_var02, arg02
26fd0     09 03 62 FC | 	wrlong	_var02, arg01
26fd4     04 12 06 F1 | 	add	arg01, #4
26fd8     04 14 06 F1 | 	add	arg02, #4
26fdc                 | LR__3142
26fdc                 | LR__3143
26fdc     38 00 90 FD | 	jmp	#LR__3150
26fe0                 | LR__3144
26fe0     0B 03 02 F6 | 	mov	_var02, arg03
26fe4     02 02 66 F0 | 	shl	_var02, #2
26fe8     01 13 02 F1 | 	add	arg01, _var02
26fec     0B 05 02 F6 | 	mov	_var03, arg03
26ff0     02 04 66 F0 | 	shl	_var03, #2
26ff4     02 15 02 F1 | 	add	arg02, _var03
26ff8     0B 07 0A F6 | 	mov	_var04, arg03 wz
26ffc     18 00 90 AD |  if_e	jmp	#LR__3149
27000     97 0A 48 FB | 	callpa	#(@LR__3147-@LR__3145)>>2,fcache_load_ptr_
27004                 | LR__3145
27004     03 09 D8 FC | 	rep	@LR__3148, _var04
27008                 | LR__3146
27008     04 12 86 F1 | 	sub	arg01, #4
2700c     04 14 86 F1 | 	sub	arg02, #4
27010     0A 07 02 FB | 	rdlong	_var04, arg02
27014     09 07 62 FC | 	wrlong	_var04, arg01
27018                 | LR__3147
27018                 | LR__3148
27018                 | LR__3149
27018                 | LR__3150
27018     00 FB 01 F6 | 	mov	result1, _var01
2701c                 | __system__longmove_ret
2701c     2D 00 64 FD | 	ret
27020                 | 
27020                 | __system____builtin_strcpy
27020     09 01 02 F6 | 	mov	_var01, arg01
27024     97 0A 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
27028                 | LR__3160
27028     0A FB C9 FA | 	rdbyte	result1, arg02 wz
2702c     09 FB 41 FC | 	wrbyte	result1, arg01
27030     01 14 06 F1 | 	add	arg02, #1
27034     01 12 06 F1 | 	add	arg01, #1
27038     EC FF 9F 5D |  if_ne	jmp	#LR__3160
2703c                 | LR__3161
2703c     00 FB 01 F6 | 	mov	result1, _var01
27040                 | __system____builtin_strcpy_ret
27040     2D 00 64 FD | 	ret
27044                 | 
27044                 | __system____topofstack
27044     00 4A 05 F6 | 	mov	COUNT_, #0
27048     A8 00 A0 FD | 	call	#pushregs_
2704c     08 F0 07 F1 | 	add	ptra, #8
27050     04 4E 05 F1 | 	add	fp, #4
27054     A7 12 62 FC | 	wrlong	arg01, fp
27058     A7 FA 01 F6 | 	mov	result1, fp
2705c     04 4E 85 F1 | 	sub	fp, #4
27060     A7 F0 03 F6 | 	mov	ptra, fp
27064     B2 00 A0 FD | 	call	#popregs_
27068                 | __system____topofstack_ret
27068     2D 00 64 FD | 	ret
2706c                 | 
2706c                 | __system___lockmem
2706c     00 FA 05 F6 | 	mov	result1, #0
27070     01 FA 61 FD | 	cogid	result1
27074     00 FB 05 F1 | 	add	result1, #256
27078                 | LR__3170
27078     09 01 0A FB | 	rdlong	_var01, arg01 wz
2707c     09 FB 61 AC |  if_e	wrlong	result1, arg01
27080     09 01 02 AB |  if_e	rdlong	_var01, arg01
27084     09 01 02 AB |  if_e	rdlong	_var01, arg01
27088     FD 00 0A F2 | 	cmp	_var01, result1 wz
2708c     E8 FF 9F 5D |  if_ne	jmp	#LR__3170
27090                 | __system___lockmem_ret
27090     2D 00 64 FD | 	ret
27094                 | 
27094                 | __system___string_cmp
27094     97 14 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
27098                 | LR__3180
27098     09 01 C2 FA | 	rdbyte	_var01, arg01
2709c     0A 03 C2 FA | 	rdbyte	_var02, arg02
270a0     00 05 02 F6 | 	mov	_var03, _var01
270a4     01 05 8A F1 | 	sub	_var03, _var02 wz
270a8     01 12 06 F1 | 	add	arg01, #1
270ac     01 14 06 F1 | 	add	arg02, #1
270b0     0C 00 90 5D |  if_ne	jmp	#LR__3182
270b4     00 00 0E F2 | 	cmp	_var01, #0 wz
270b8     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
270bc     D8 FF 9F 5D |  if_ne	jmp	#LR__3180
270c0                 | LR__3181
270c0                 | LR__3182
270c0     02 FB 01 F6 | 	mov	result1, _var03
270c4                 | __system___string_cmp_ret
270c4     2D 00 64 FD | 	ret
270c8                 | 
270c8                 | __system___string_concat
270c8     05 4A 05 F6 | 	mov	COUNT_, #5
270cc     A8 00 A0 FD | 	call	#pushregs_
270d0     09 27 02 F6 | 	mov	local01, arg01
270d4     0A 29 02 F6 | 	mov	local02, arg02
270d8     13 13 02 F6 | 	mov	arg01, local01
270dc     09 2B 02 F6 | 	mov	local03, arg01
270e0     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
270e4                 | LR__3190
270e4     15 FB C9 FA | 	rdbyte	result1, local03 wz
270e8     01 2A 06 51 |  if_ne	add	local03, #1
270ec     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
270f0                 | LR__3191
270f0     09 2B 82 F1 | 	sub	local03, arg01
270f4     15 2D 02 F6 | 	mov	local04, local03
270f8     14 13 02 F6 | 	mov	arg01, local02
270fc     09 2B 02 F6 | 	mov	local03, arg01
27100     97 06 48 FB | 	callpa	#(@LR__3193-@LR__3192)>>2,fcache_load_ptr_
27104                 | LR__3192
27104     15 FB C9 FA | 	rdbyte	result1, local03 wz
27108     01 2A 06 51 |  if_ne	add	local03, #1
2710c     F4 FF 9F 5D |  if_ne	jmp	#LR__3192
27110                 | LR__3193
27110     09 2B 82 F1 | 	sub	local03, arg01
27114     16 13 02 F6 | 	mov	arg01, local04
27118     15 13 02 F1 | 	add	arg01, local03
2711c     01 12 06 F1 | 	add	arg01, #1
27120     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
27124     FD 2E 0A F6 | 	mov	local05, result1 wz
27128     28 00 90 AD |  if_e	jmp	#LR__3194
2712c     17 13 02 F6 | 	mov	arg01, local05
27130     13 15 02 F6 | 	mov	arg02, local01
27134     16 17 02 F6 | 	mov	arg03, local04
27138     E0 FD BF FD | 	call	#__system____builtin_memmove
2713c     17 13 02 F6 | 	mov	arg01, local05
27140     16 13 02 F1 | 	add	arg01, local04
27144     01 2A 06 F1 | 	add	local03, #1
27148     14 15 02 F6 | 	mov	arg02, local02
2714c     15 17 02 F6 | 	mov	arg03, local03
27150     C8 FD BF FD | 	call	#__system____builtin_memmove
27154                 | LR__3194
27154     17 FB 01 F6 | 	mov	result1, local05
27158     A7 F0 03 F6 | 	mov	ptra, fp
2715c     B2 00 A0 FD | 	call	#popregs_
27160                 | __system___string_concat_ret
27160     2D 00 64 FD | 	ret
27164                 | 
27164                 | __system___tx
27164     02 4A 05 F6 | 	mov	COUNT_, #2
27168     A8 00 A0 FD | 	call	#pushregs_
2716c     09 27 02 F6 | 	mov	local01, arg01
27170     0A 26 0E F2 | 	cmp	local01, #10 wz
27174     18 00 90 5D |  if_ne	jmp	#LR__3200
27178     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2717c     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
27180     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27184     02 28 CE F7 | 	test	local02, #2 wz
27188     0D 12 06 56 |  if_ne	mov	arg01, #13
2718c     FC FB BF 5D |  if_ne	call	#__system___txraw
27190                 | LR__3200
27190     13 13 02 F6 | 	mov	arg01, local01
27194     F4 FB BF FD | 	call	#__system___txraw
27198     A7 F0 03 F6 | 	mov	ptra, fp
2719c     B2 00 A0 FD | 	call	#popregs_
271a0                 | __system___tx_ret
271a0     2D 00 64 FD | 	ret
271a4                 | 
271a4                 | __system___rx
271a4     01 4A 05 F6 | 	mov	COUNT_, #1
271a8     A8 00 A0 FD | 	call	#pushregs_
271ac                 | LR__3210
271ac     00 12 06 F6 | 	mov	arg01, #0
271b0     1C FC BF FD | 	call	#__system___rxraw
271b4     FD 26 02 F6 | 	mov	local01, result1
271b8     FF FF 7F FF 
271bc     FF 27 0E F2 | 	cmp	local01, ##-1 wz
271c0     E8 FF 9F AD |  if_e	jmp	#LR__3210
271c4     0D 26 0E F2 | 	cmp	local01, #13 wz
271c8     14 00 90 5D |  if_ne	jmp	#LR__3211
271cc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
271d0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
271d4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
271d8     02 FA CD F7 | 	test	result1, #2 wz
271dc     0A 26 06 56 |  if_ne	mov	local01, #10
271e0                 | LR__3211
271e0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
271e4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
271e8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
271ec     01 12 CE F7 | 	test	arg01, #1 wz
271f0     1C 00 90 AD |  if_e	jmp	#LR__3214
271f4     7F 26 0E F2 | 	cmp	local01, #127 wz
271f8     0C 00 90 5D |  if_ne	jmp	#LR__3212
271fc     08 12 06 F6 | 	mov	arg01, #8
27200     60 FF BF FD | 	call	#__system___tx
27204     08 00 90 FD | 	jmp	#LR__3213
27208                 | LR__3212
27208     13 13 02 F6 | 	mov	arg01, local01
2720c     54 FF BF FD | 	call	#__system___tx
27210                 | LR__3213
27210                 | LR__3214
27210     13 FB 01 F6 | 	mov	result1, local01
27214     A7 F0 03 F6 | 	mov	ptra, fp
27218     B2 00 A0 FD | 	call	#popregs_
2721c                 | __system___rx_ret
2721c     2D 00 64 FD | 	ret
27220                 | 
27220                 | __system___pinwrite
27220     09 01 02 F6 | 	mov	_var01, arg01
27224     1F 00 06 F5 | 	and	_var01, #31
27228     20 12 CE F7 | 	test	arg01, #32 wz
2722c     06 12 46 F0 | 	shr	arg01, #6
27230     09 13 CA F9 | 	bmask	arg01, arg01
27234     00 13 62 F0 | 	shl	arg01, _var01
27238     00 15 62 F0 | 	shl	arg02, _var01
2723c     1C 00 90 AD |  if_e	jmp	#LR__3220
27240     09 F7 43 F5 | 	or	dirb, arg01
27244     FD 01 02 F6 | 	mov	_var01, outb
27248     09 01 22 F5 | 	andn	_var01, arg01
2724c     09 15 02 F5 | 	and	arg02, arg01
27250     0A 01 42 F5 | 	or	_var01, arg02
27254     00 FB 03 F6 | 	mov	outb, _var01
27258     18 00 90 FD | 	jmp	#LR__3221
2725c                 | LR__3220
2725c     09 F5 43 F5 | 	or	dira, arg01
27260     FC 01 02 F6 | 	mov	_var01, outa
27264     09 01 22 F5 | 	andn	_var01, arg01
27268     09 15 02 F5 | 	and	arg02, arg01
2726c     0A 01 42 F5 | 	or	_var01, arg02
27270     00 F9 03 F6 | 	mov	outa, _var01
27274                 | LR__3221
27274                 | __system___pinwrite_ret
27274     2D 00 64 FD | 	ret
27278                 | 
27278                 | __system___basic_read_line
27278     06 4A 05 F6 | 	mov	COUNT_, #6
2727c     A8 00 A0 FD | 	call	#pushregs_
27280     09 27 02 F6 | 	mov	local01, arg01
27284     00 28 06 F6 | 	mov	local02, #0
27288     18 2A 06 F6 | 	mov	local03, #24
2728c     00 2C 06 F6 | 	mov	local04, #0
27290     18 12 06 F6 | 	mov	arg01, #24
27294     74 3F B0 FD | 	call	#__system___gc_alloc_managed
27298     FD 2E 0A F6 | 	mov	local05, result1 wz
2729c     17 FB 01 A6 |  if_e	mov	result1, local05
272a0     B0 00 90 AD |  if_e	jmp	#LR__3233
272a4                 | LR__3230
272a4     13 13 02 F6 | 	mov	arg01, local01
272a8     78 0B B0 FD | 	call	#__system___basic_get_char
272ac     FD 30 02 F6 | 	mov	local06, result1
272b0     01 30 56 F2 | 	cmps	local06, #1 wc
272b4     8C 00 90 CD |  if_b	jmp	#LR__3232
272b8     0A 30 0E F2 | 	cmp	local06, #10 wz
272bc     10 00 90 5D |  if_ne	jmp	#LR__3231
272c0     00 2C 0E F2 | 	cmp	local04, #0 wz
272c4     01 28 56 52 |  if_ne	cmps	local02, #1 wc
272c8     01 28 86 11 |  if_a	sub	local02, #1
272cc     74 00 90 FD | 	jmp	#LR__3232
272d0                 | LR__3231
272d0     0D 30 0E F2 | 	cmp	local06, #13 wz
272d4     01 2C 06 A6 |  if_e	mov	local04, #1
272d8     00 2C 06 56 |  if_ne	mov	local04, #0
272dc     08 30 0E F2 | 	cmp	local06, #8 wz
272e0     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
272e4     01 28 56 A2 |  if_e	cmps	local02, #1 wc
272e8     01 28 86 21 |  if_nc_and_z	sub	local02, #1
272ec     B4 FF 9F AD |  if_e	jmp	#LR__3230
272f0     17 17 02 F6 | 	mov	arg03, local05
272f4     14 17 02 F1 | 	add	arg03, local02
272f8     0B 31 42 FC | 	wrbyte	local06, arg03
272fc     01 28 06 F1 | 	add	local02, #1
27300     15 29 0A F2 | 	cmp	local02, local03 wz
27304     9C FF 9F 5D |  if_ne	jmp	#LR__3230
27308     15 13 02 F6 | 	mov	arg01, local03
2730c     20 12 06 F1 | 	add	arg01, #32
27310     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
27314     FD 30 0A F6 | 	mov	local06, result1 wz
27318     18 FB 01 A6 |  if_e	mov	result1, local06
2731c     34 00 90 AD |  if_e	jmp	#LR__3233
27320     18 13 02 F6 | 	mov	arg01, local06
27324     17 15 02 F6 | 	mov	arg02, local05
27328     15 17 02 F6 | 	mov	arg03, local03
2732c     EC FB BF FD | 	call	#__system____builtin_memmove
27330     20 2A 06 F1 | 	add	local03, #32
27334     17 13 02 F6 | 	mov	arg01, local05
27338     0C 40 B0 FD | 	call	#__system___gc_free
2733c     18 2F 02 F6 | 	mov	local05, local06
27340     60 FF 9F FD | 	jmp	#LR__3230
27344                 | LR__3232
27344     17 31 02 F6 | 	mov	local06, local05
27348     14 31 02 F1 | 	add	local06, local02
2734c     18 01 48 FC | 	wrbyte	#0, local06
27350     17 FB 01 F6 | 	mov	result1, local05
27354                 | LR__3233
27354     A7 F0 03 F6 | 	mov	ptra, fp
27358     B2 00 A0 FD | 	call	#popregs_
2735c                 | __system___basic_read_line_ret
2735c     2D 00 64 FD | 	ret
27360                 | 
27360                 | __system___waitms
27360     09 01 02 F6 | 	mov	_var01, arg01
27364     1A 02 62 FD | 	getct	_var02
27368     14 04 06 FB | 	rdlong	_var03, #20
2736c     97 14 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
27370                 | LR__3240
27370     01 00 00 FF 
27374     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
27378     1C 00 90 CD |  if_b	jmp	#LR__3242
2737c     02 03 02 F1 | 	add	_var02, _var03
27380     01 13 02 F6 | 	mov	arg01, _var02
27384     00 12 66 FA | 	addct1	arg01, #0
27388     24 22 60 FD | 	waitct1
2738c     01 00 00 FF 
27390     E8 01 86 F1 | 	sub	_var01, ##1000
27394     D8 FF 9F FD | 	jmp	#LR__3240
27398                 | LR__3241
27398                 | LR__3242
27398     01 00 56 F2 | 	cmps	_var01, #1 wc
2739c     28 00 90 CD |  if_b	jmp	#LR__3243
273a0     02 01 02 FD | 	qmul	_var01, _var03
273a4     01 00 00 FF 
273a8     E8 17 06 F6 | 	mov	arg03, ##1000
273ac     19 FA 61 FD | 	getqy	result1
273b0     18 12 62 FD | 	getqx	arg01
273b4     28 FA 61 FD | 	setq	result1
273b8     0B 13 12 FD | 	qdiv	arg01, arg03
273bc     18 12 62 FD | 	getqx	arg01
273c0     01 13 62 FA | 	addct1	arg01, _var02
273c4     24 22 60 FD | 	waitct1
273c8                 | LR__3243
273c8                 | __system___waitms_ret
273c8     2D 00 64 FD | 	ret
273cc                 | 
273cc                 | __system___waitus
273cc     09 01 02 F6 | 	mov	_var01, arg01
273d0     1A 02 62 FD | 	getct	_var02
273d4     14 04 06 FB | 	rdlong	_var03, #20
273d8     97 14 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
273dc                 | LR__3250
273dc     A1 07 00 FF 
273e0     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
273e4     1C 00 90 CD |  if_b	jmp	#LR__3252
273e8     02 03 02 F1 | 	add	_var02, _var03
273ec     01 13 02 F6 | 	mov	arg01, _var02
273f0     00 12 66 FA | 	addct1	arg01, #0
273f4     24 22 60 FD | 	waitct1
273f8     A1 07 00 FF 
273fc     40 00 86 F1 | 	sub	_var01, ##1000000
27400     D8 FF 9F FD | 	jmp	#LR__3250
27404                 | LR__3251
27404                 | LR__3252
27404     01 00 56 F2 | 	cmps	_var01, #1 wc
27408     28 00 90 CD |  if_b	jmp	#LR__3253
2740c     02 01 02 FD | 	qmul	_var01, _var03
27410     A1 07 00 FF 
27414     40 16 06 F6 | 	mov	arg03, ##1000000
27418     19 FA 61 FD | 	getqy	result1
2741c     18 12 62 FD | 	getqx	arg01
27420     28 FA 61 FD | 	setq	result1
27424     0B 13 12 FD | 	qdiv	arg01, arg03
27428     18 FA 61 FD | 	getqx	result1
2742c     FD 02 62 FA | 	addct1	_var02, result1
27430     24 22 60 FD | 	waitct1
27434                 | LR__3253
27434                 | __system___waitus_ret
27434     2D 00 64 FD | 	ret
27438                 | 
27438                 | __system___mount
27438     0B 4A 05 F6 | 	mov	COUNT_, #11
2743c     A8 00 A0 FD | 	call	#pushregs_
27440     09 27 02 F6 | 	mov	local01, arg01
27444     0A 29 0A F6 | 	mov	local02, arg02 wz
27448     01 2A 66 F6 | 	neg	local03, #1
2744c     01 FA 65 A6 |  if_e	neg	result1, #1
27450     98 02 90 AD |  if_e	jmp	#LR__3275
27454     13 FB C1 FA | 	rdbyte	result1, local01
27458     2F FA 0D F2 | 	cmp	result1, #47 wz
2745c     28 00 90 5D |  if_ne	jmp	#LR__3262
27460     13 13 02 F6 | 	mov	arg01, local01
27464     09 2D 02 F6 | 	mov	local04, arg01
27468     97 06 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
2746c                 | LR__3260
2746c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27470     01 2C 06 51 |  if_ne	add	local04, #1
27474     F4 FF 9F 5D |  if_ne	jmp	#LR__3260
27478                 | LR__3261
27478     09 2D 82 F1 | 	sub	local04, arg01
2747c     16 FB 01 F6 | 	mov	result1, local04
27480     10 FA 55 F2 | 	cmps	result1, #16 wc
27484     14 00 90 CD |  if_b	jmp	#LR__3263
27488                 | LR__3262
27488     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2748c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
27490     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27494     01 FA 65 F6 | 	neg	result1, #1
27498     50 02 90 FD | 	jmp	#LR__3275
2749c                 | LR__3263
2749c     00 2E 06 F6 | 	mov	local05, #0
274a0                 | LR__3264
274a0     04 2E 56 F2 | 	cmps	local05, #4 wc
274a4     B0 00 90 3D |  if_ae	jmp	#LR__3269
274a8     17 13 02 F6 | 	mov	arg01, local05
274ac     02 12 66 F0 | 	shl	arg01, #2
274b0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
274b4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
274b8     09 FB 09 FB | 	rdlong	result1, arg01 wz
274bc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
274c0     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
274c4     17 2B 02 86 |  if_c_and_z	mov	local03, local05
274c8     84 00 90 8D |  if_c_and_z	jmp	#LR__3268
274cc     17 13 02 F6 | 	mov	arg01, local05
274d0     02 12 66 F0 | 	shl	arg01, #2
274d4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
274d8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
274dc     09 13 02 FB | 	rdlong	arg01, arg01
274e0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
274e4     09 2D 02 F6 | 	mov	local04, arg01
274e8     97 06 48 FB | 	callpa	#(@LR__3266-@LR__3265)>>2,fcache_load_ptr_
274ec                 | LR__3265
274ec     16 FB C9 FA | 	rdbyte	result1, local04 wz
274f0     01 2C 06 51 |  if_ne	add	local04, #1
274f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3265
274f8                 | LR__3266
274f8     09 2D 82 F1 | 	sub	local04, arg01
274fc     16 31 02 F6 | 	mov	local06, local04
27500     18 13 02 F6 | 	mov	arg01, local06
27504     13 13 02 F1 | 	add	arg01, local01
27508     09 FB C1 FA | 	rdbyte	result1, arg01
2750c     2F FA 0D F2 | 	cmp	result1, #47 wz
27510     18 33 02 56 |  if_ne	mov	local07, local06
27514     13 33 02 51 |  if_ne	add	local07, local01
27518     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
2751c     30 00 90 5D |  if_ne	jmp	#LR__3267
27520     17 17 02 F6 | 	mov	arg03, local05
27524     02 16 66 F0 | 	shl	arg03, #2
27528     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2752c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
27530     0B 15 02 FB | 	rdlong	arg02, arg03
27534     13 13 02 F6 | 	mov	arg01, local01
27538     18 17 02 F6 | 	mov	arg03, local06
2753c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27540     48 51 B0 FD | 	call	#__system__strncmp
27544     00 FA 0D F2 | 	cmp	result1, #0 wz
27548     17 2B 02 A6 |  if_e	mov	local03, local05
2754c     08 00 90 AD |  if_e	jmp	#LR__3269
27550                 | LR__3267
27550                 | LR__3268
27550     01 2E 06 F1 | 	add	local05, #1
27554     48 FF 9F FD | 	jmp	#LR__3264
27558                 | LR__3269
27558     FF FF 7F FF 
2755c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
27560     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27564     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
27568     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2756c     01 FA 65 A6 |  if_e	neg	result1, #1
27570     78 01 90 AD |  if_e	jmp	#LR__3275
27574     15 2F 02 F6 | 	mov	local05, local03
27578     17 33 02 F6 | 	mov	local07, local05
2757c     02 32 66 F0 | 	shl	local07, #2
27580     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27584     F3 32 02 F1 | 	add	local07, ptr___system__dat__
27588     19 31 0A FB | 	rdlong	local06, local07 wz
2758c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27590     58 00 90 AD |  if_e	jmp	#LR__3270
27594     4C 30 06 F1 | 	add	local06, #76
27598     18 33 0A FB | 	rdlong	local07, local06 wz
2759c     4C 30 86 F1 | 	sub	local06, #76
275a0     48 00 90 AD |  if_e	jmp	#LR__3270
275a4     4C 30 06 F1 | 	add	local06, #76
275a8     18 33 02 FB | 	rdlong	local07, local06
275ac     19 2B 02 F6 | 	mov	local03, local07
275b0     13 32 46 F7 | 	zerox	local07, #19
275b4     14 2A 46 F0 | 	shr	local03, #20
275b8     02 2A 66 F0 | 	shl	local03, #2
275bc     ED 2A 02 F1 | 	add	local03, __methods__
275c0     15 2B 02 FB | 	rdlong	local03, local03
275c4     17 31 02 F6 | 	mov	local06, local05
275c8     02 30 66 F0 | 	shl	local06, #2
275cc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
275d0     F3 30 02 F1 | 	add	local06, ptr___system__dat__
275d4     18 13 02 FB | 	rdlong	arg01, local06
275d8     F2 30 02 F6 | 	mov	local06, objptr
275dc     19 E5 01 F6 | 	mov	objptr, local07
275e0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
275e4     2D 2A 62 FD | 	call	local03
275e8     18 E5 01 F6 | 	mov	objptr, local06
275ec                 | LR__3270
275ec     17 35 02 F6 | 	mov	local08, local05
275f0     02 34 66 F0 | 	shl	local08, #2
275f4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
275f8     F3 34 02 F1 | 	add	local08, ptr___system__dat__
275fc     1A 29 62 FC | 	wrlong	local02, local08
27600     00 28 0E F2 | 	cmp	local02, #0 wz
27604     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27608     18 00 90 5D |  if_ne	jmp	#LR__3271
2760c     02 2E 66 F0 | 	shl	local05, #2
27610     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27614     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
27618     17 01 68 FC | 	wrlong	#0, local05
2761c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27620     C4 00 90 FD | 	jmp	#LR__3274
27624                 | LR__3271
27624     17 37 02 F6 | 	mov	local09, local05
27628     04 36 66 F0 | 	shl	local09, #4
2762c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
27630     F3 36 02 F1 | 	add	local09, ptr___system__dat__
27634     1B 13 02 F6 | 	mov	arg01, local09
27638     13 15 02 F6 | 	mov	arg02, local01
2763c     10 16 06 F6 | 	mov	arg03, #16
27640     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
27644     98 4F B0 FD | 	call	#__system__strncpy
27648     48 28 06 F1 | 	add	local02, #72
2764c     14 35 0A FB | 	rdlong	local08, local02 wz
27650     48 28 86 F1 | 	sub	local02, #72
27654     7C 00 90 AD |  if_e	jmp	#LR__3273
27658     48 28 06 F1 | 	add	local02, #72
2765c     14 35 02 FB | 	rdlong	local08, local02
27660     1A 39 02 F6 | 	mov	local10, local08
27664     13 34 46 F7 | 	zerox	local08, #19
27668     14 38 46 F0 | 	shr	local10, #20
2766c     02 38 66 F0 | 	shl	local10, #2
27670     ED 38 02 F1 | 	add	local10, __methods__
27674     1C 39 02 FB | 	rdlong	local10, local10
27678     1B 13 02 F6 | 	mov	arg01, local09
2767c     F2 3A 02 F6 | 	mov	local11, objptr
27680     1A E5 01 F6 | 	mov	objptr, local08
27684     2D 38 62 FD | 	call	local10
27688     1D E5 01 F6 | 	mov	objptr, local11
2768c     FD 12 0A F6 | 	mov	arg01, result1 wz
27690     40 00 90 AD |  if_e	jmp	#LR__3272
27694     17 35 02 F6 | 	mov	local08, local05
27698     02 34 66 F0 | 	shl	local08, #2
2769c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
276a0     F3 34 02 F1 | 	add	local08, ptr___system__dat__
276a4     1A 01 68 FC | 	wrlong	#0, local08
276a8     02 2E 66 F0 | 	shl	local05, #2
276ac     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
276b0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
276b4     17 01 68 FC | 	wrlong	#0, local05
276b8     09 13 6A F6 | 	neg	arg01, arg01 wz
276bc     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
276c0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
276c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
276c8     01 FA 65 56 |  if_ne	neg	result1, #1
276cc     00 FA 05 A6 |  if_e	mov	result1, #0
276d0     18 00 90 FD | 	jmp	#LR__3275
276d4                 | LR__3272
276d4                 | LR__3273
276d4     02 2E 66 F0 | 	shl	local05, #2
276d8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
276dc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
276e0     17 37 62 FC | 	wrlong	local09, local05
276e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
276e8                 | LR__3274
276e8     00 FA 05 F6 | 	mov	result1, #0
276ec                 | LR__3275
276ec     A7 F0 03 F6 | 	mov	ptra, fp
276f0     B2 00 A0 FD | 	call	#popregs_
276f4                 | __system___mount_ret
276f4     2D 00 64 FD | 	ret
276f8                 | 
276f8                 | __system___chdir
276f8     00 4A 05 F6 | 	mov	COUNT_, #0
276fc     A8 00 A0 FD | 	call	#pushregs_
27700     40 F0 07 F1 | 	add	ptra, #64
27704     04 4E 05 F1 | 	add	fp, #4
27708     A7 12 62 FC | 	wrlong	arg01, fp
2770c     04 4E 05 F1 | 	add	fp, #4
27710     A7 14 02 F6 | 	mov	arg02, fp
27714     08 4E 85 F1 | 	sub	fp, #8
27718     68 4B B0 FD | 	call	#__system__stat
2771c     3C 4E 05 F1 | 	add	fp, #60
27720     A7 FA 61 FC | 	wrlong	result1, fp
27724     3C 4E 85 F1 | 	sub	fp, #60
27728     00 FA 0D F2 | 	cmp	result1, #0 wz
2772c     3C 4E 05 51 |  if_ne	add	fp, #60
27730     A7 FA 01 5B |  if_ne	rdlong	result1, fp
27734     3C 4E 85 51 |  if_ne	sub	fp, #60
27738     BC 00 90 5D |  if_ne	jmp	#LR__3282
2773c     10 4E 05 F1 | 	add	fp, #16
27740     A7 12 02 FB | 	rdlong	arg01, fp
27744     10 4E 85 F1 | 	sub	fp, #16
27748     78 00 00 FF 
2774c     00 12 06 F5 | 	and	arg01, ##61440
27750     08 00 00 FF 
27754     00 12 0E F2 | 	cmp	arg01, ##4096 wz
27758     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
2775c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
27760     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
27764     01 FA 65 56 |  if_ne	neg	result1, #1
27768     8C 00 90 5D |  if_ne	jmp	#LR__3282
2776c     04 4E 05 F1 | 	add	fp, #4
27770     A7 16 02 FB | 	rdlong	arg03, fp
27774     04 4E 85 F1 | 	sub	fp, #4
27778     0B 17 C2 FA | 	rdbyte	arg03, arg03
2777c     2F 16 0E F2 | 	cmp	arg03, #47 wz
27780     24 00 90 5D |  if_ne	jmp	#LR__3280
27784     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27788     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2778c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27790     04 4E 05 F1 | 	add	fp, #4
27794     A7 14 02 FB | 	rdlong	arg02, fp
27798     04 4E 85 F1 | 	sub	fp, #4
2779c     00 17 06 F6 | 	mov	arg03, #256
277a0     3C 4E B0 FD | 	call	#__system__strncpy
277a4     4C 00 90 FD | 	jmp	#LR__3281
277a8                 | LR__3280
277a8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
277ac     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
277b0     38 4E 05 F1 | 	add	fp, #56
277b4     A7 12 62 FC | 	wrlong	arg01, fp
277b8     38 4E 85 F1 | 	sub	fp, #56
277bc     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
277c0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
277c4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
277c8     00 17 06 F6 | 	mov	arg03, #256
277cc     10 4E B0 FD | 	call	#__system__strncpy
277d0     38 4E 05 F1 | 	add	fp, #56
277d4     A7 12 02 FB | 	rdlong	arg01, fp
277d8     34 4E 85 F1 | 	sub	fp, #52
277dc     A7 14 02 FB | 	rdlong	arg02, fp
277e0     04 4E 85 F1 | 	sub	fp, #4
277e4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
277e8     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
277ec     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
277f0     10 00 B0 FD | 	call	#__system____getvfsforfile
277f4                 | LR__3281
277f4     00 FA 05 F6 | 	mov	result1, #0
277f8                 | LR__3282
277f8     A7 F0 03 F6 | 	mov	ptra, fp
277fc     B2 00 A0 FD | 	call	#popregs_
27800                 | __system___chdir_ret
27800     2D 00 64 FD | 	ret
27804                 | 
27804                 | __system____getvfsforfile
27804     0E 4A 05 F6 | 	mov	COUNT_, #14
27808     A8 00 A0 FD | 	call	#pushregs_
2780c     09 27 02 F6 | 	mov	local01, arg01
27810     0A 29 02 F6 | 	mov	local02, arg02
27814     0B 2B 02 F6 | 	mov	local03, arg03
27818     97 10 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
2781c                 | LR__3290
2781c     14 FB C1 FA | 	rdbyte	result1, local02
27820     2F FA 0D F2 | 	cmp	result1, #47 wz
27824     01 28 06 A1 |  if_e	add	local02, #1
27828     14 2D C2 AA |  if_e	rdbyte	local04, local02
2782c     01 28 86 A1 |  if_e	sub	local02, #1
27830     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
27834     01 28 06 A1 |  if_e	add	local02, #1
27838     E0 FF 9F AD |  if_e	jmp	#LR__3290
2783c                 | LR__3291
2783c     14 2D C2 FA | 	rdbyte	local04, local02
27840     2F 2C 0E F2 | 	cmp	local04, #47 wz
27844     14 00 90 5D |  if_ne	jmp	#LR__3292
27848     13 13 02 F6 | 	mov	arg01, local01
2784c     14 15 02 F6 | 	mov	arg02, local02
27850     00 17 06 F6 | 	mov	arg03, #256
27854     88 4D B0 FD | 	call	#__system__strncpy
27858     7C 00 90 FD | 	jmp	#LR__3294
2785c                 | LR__3292
2785c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27860     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27864     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27868     13 13 02 F6 | 	mov	arg01, local01
2786c     00 17 06 F6 | 	mov	arg03, #256
27870     6C 4D B0 FD | 	call	#__system__strncpy
27874     14 2D CA FA | 	rdbyte	local04, local02 wz
27878     5C 00 90 AD |  if_e	jmp	#LR__3293
2787c     14 2D C2 FA | 	rdbyte	local04, local02
27880     2E 2C 0E F2 | 	cmp	local04, #46 wz
27884     01 28 06 A1 |  if_e	add	local02, #1
27888     14 2F C2 AA |  if_e	rdbyte	local05, local02
2788c     01 28 86 A1 |  if_e	sub	local02, #1
27890     17 31 02 A6 |  if_e	mov	local06, local05
27894     07 30 4E A7 |  if_e	zerox	local06, #7 wz
27898     3C 00 90 AD |  if_e	jmp	#LR__3293
2789c     13 2F C2 FA | 	rdbyte	local05, local01
278a0     2F 2E 0E F2 | 	cmp	local05, #47 wz
278a4     01 26 06 A1 |  if_e	add	local01, #1
278a8     13 2D C2 AA |  if_e	rdbyte	local04, local01
278ac     01 26 86 A1 |  if_e	sub	local01, #1
278b0     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
278b4     B5 01 00 5F 
278b8     74 15 06 56 |  if_ne	mov	arg02, ##@LR__5420
278bc     13 13 02 56 |  if_ne	mov	arg01, local01
278c0     00 17 06 56 |  if_ne	mov	arg03, #256
278c4     64 4D B0 5D |  if_ne	call	#__system__strncat
278c8     13 13 02 F6 | 	mov	arg01, local01
278cc     14 15 02 F6 | 	mov	arg02, local02
278d0     00 17 06 F6 | 	mov	arg03, #256
278d4     54 4D B0 FD | 	call	#__system__strncat
278d8                 | LR__3293
278d8                 | LR__3294
278d8     13 13 02 F6 | 	mov	arg01, local01
278dc     0C 4F B0 FD | 	call	#__system___normalizeName
278e0     13 2D CA FA | 	rdbyte	local04, local01 wz
278e4     1C 00 90 AD |  if_e	jmp	#LR__3295
278e8     13 2D C2 FA | 	rdbyte	local04, local01
278ec     2F 2C 0E F2 | 	cmp	local04, #47 wz
278f0     01 26 06 A1 |  if_e	add	local01, #1
278f4     13 31 C2 AA |  if_e	rdbyte	local06, local01
278f8     01 26 86 A1 |  if_e	sub	local01, #1
278fc     00 30 4E A2 |  if_e	cmps	local06, #0 wz
27900     18 00 90 5D |  if_ne	jmp	#LR__3296
27904                 | LR__3295
27904     01 00 00 FF 
27908     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
2790c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
27910     01 00 00 FF 
27914     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
27918     EC 01 90 FD | 	jmp	#LR__3310
2791c                 | LR__3296
2791c     00 32 06 F6 | 	mov	local07, #0
27920                 | LR__3297
27920     04 32 56 F2 | 	cmps	local07, #4 wc
27924     CC 01 90 3D |  if_ae	jmp	#LR__3309
27928     19 31 02 F6 | 	mov	local06, local07
2792c     02 30 66 F0 | 	shl	local06, #2
27930     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27934     F3 30 02 F1 | 	add	local06, ptr___system__dat__
27938     18 31 0A FB | 	rdlong	local06, local06 wz
2793c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27940     A8 01 90 AD |  if_e	jmp	#LR__3308
27944     19 2D 02 F6 | 	mov	local04, local07
27948     02 2C 66 F0 | 	shl	local04, #2
2794c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27950     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
27954     16 13 02 FB | 	rdlong	arg01, local04
27958     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2795c     09 35 02 F6 | 	mov	local08, arg01
27960     97 06 48 FB | 	callpa	#(@LR__3299-@LR__3298)>>2,fcache_load_ptr_
27964                 | LR__3298
27964     1A FB C9 FA | 	rdbyte	result1, local08 wz
27968     01 34 06 51 |  if_ne	add	local08, #1
2796c     F4 FF 9F 5D |  if_ne	jmp	#LR__3298
27970                 | LR__3299
27970     09 35 82 F1 | 	sub	local08, arg01
27974     1A 37 02 F6 | 	mov	local09, local08
27978     1B 2D 02 F6 | 	mov	local04, local09
2797c     13 2D 02 F1 | 	add	local04, local01
27980     16 31 C2 FA | 	rdbyte	local06, local04
27984     2F 30 0E F2 | 	cmp	local06, #47 wz
27988     1B 39 02 56 |  if_ne	mov	local10, local09
2798c     13 39 02 51 |  if_ne	add	local10, local01
27990     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
27994     54 01 90 5D |  if_ne	jmp	#LR__3307
27998     19 17 02 F6 | 	mov	arg03, local07
2799c     02 16 66 F0 | 	shl	arg03, #2
279a0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
279a4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
279a8     0B 15 02 FB | 	rdlong	arg02, arg03
279ac     1B 17 02 F6 | 	mov	arg03, local09
279b0     13 13 02 F6 | 	mov	arg01, local01
279b4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
279b8     D0 4C B0 FD | 	call	#__system__strncmp
279bc     00 FA 4D F2 | 	cmps	result1, #0 wz
279c0     28 01 90 5D |  if_ne	jmp	#LR__3307
279c4     19 3B 02 F6 | 	mov	local11, local07
279c8     02 3A 66 F0 | 	shl	local11, #2
279cc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
279d0     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
279d4     1D 3D 02 FB | 	rdlong	local12, local11
279d8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
279dc     97 22 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
279e0                 | LR__3300
279e0     1B 31 02 F6 | 	mov	local06, local09
279e4     01 30 06 F1 | 	add	local06, #1
279e8     13 31 02 F1 | 	add	local06, local01
279ec     18 3B C2 FA | 	rdbyte	local11, local06
279f0     2E 3A 0E F2 | 	cmp	local11, #46 wz
279f4     2C 00 90 5D |  if_ne	jmp	#LR__3302
279f8     1B 3B 02 F6 | 	mov	local11, local09
279fc     02 3A 06 F1 | 	add	local11, #2
27a00     13 3B 02 F1 | 	add	local11, local01
27a04     1D 39 C2 FA | 	rdbyte	local10, local11
27a08     2F 38 0E F2 | 	cmp	local10, #47 wz
27a0c     1B 3F 02 56 |  if_ne	mov	local13, local09
27a10     02 3E 06 51 |  if_ne	add	local13, #2
27a14     13 3F 02 51 |  if_ne	add	local13, local01
27a18     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
27a1c     01 36 06 A1 |  if_e	add	local09, #1
27a20     BC FF 9F AD |  if_e	jmp	#LR__3300
27a24                 | LR__3301
27a24                 | LR__3302
27a24     00 2A 0E F2 | 	cmp	local03, #0 wz
27a28     15 13 02 56 |  if_ne	mov	arg01, local03
27a2c     13 15 02 56 |  if_ne	mov	arg02, local01
27a30     00 17 06 56 |  if_ne	mov	arg03, #256
27a34     A8 4B B0 5D |  if_ne	call	#__system__strncpy
27a38     13 15 02 F6 | 	mov	arg02, local01
27a3c     1B 15 02 F1 | 	add	arg02, local09
27a40     01 14 06 F1 | 	add	arg02, #1
27a44     13 13 02 F6 | 	mov	arg01, local01
27a48     D4 F5 BF FD | 	call	#__system____builtin_strcpy
27a4c     13 13 02 F6 | 	mov	arg01, local01
27a50     09 35 02 F6 | 	mov	local08, arg01
27a54     97 06 48 FB | 	callpa	#(@LR__3304-@LR__3303)>>2,fcache_load_ptr_
27a58                 | LR__3303
27a58     1A FB C9 FA | 	rdbyte	result1, local08 wz
27a5c     01 34 06 51 |  if_ne	add	local08, #1
27a60     F4 FF 9F 5D |  if_ne	jmp	#LR__3303
27a64                 | LR__3304
27a64     09 35 82 F1 | 	sub	local08, arg01
27a68     1A 37 02 F6 | 	mov	local09, local08
27a6c                 | LR__3305
27a6c     01 36 56 F2 | 	cmps	local09, #1 wc
27a70     70 00 90 CD |  if_b	jmp	#LR__3306
27a74     1B 2D 02 F6 | 	mov	local04, local09
27a78     13 2D 02 F1 | 	add	local04, local01
27a7c     16 3B C2 FA | 	rdbyte	local11, local04
27a80     2F 3A 0E F2 | 	cmp	local11, #47 wz
27a84     1B 3B 02 A6 |  if_e	mov	local11, local09
27a88     13 3B 02 A1 |  if_e	add	local11, local01
27a8c     1D 01 48 AC |  if_e	wrbyte	#0, local11
27a90     01 36 86 A1 |  if_e	sub	local09, #1
27a94     D4 FF 9F AD |  if_e	jmp	#LR__3305
27a98     1B 2D 02 F6 | 	mov	local04, local09
27a9c     13 2D 02 F1 | 	add	local04, local01
27aa0     16 3B C2 FA | 	rdbyte	local11, local04
27aa4     2E 3A 0E F2 | 	cmp	local11, #46 wz
27aa8     38 00 90 5D |  if_ne	jmp	#LR__3306
27aac     02 36 56 F2 | 	cmps	local09, #2 wc
27ab0     30 00 90 CD |  if_b	jmp	#LR__3306
27ab4     1B 41 02 F6 | 	mov	local14, local09
27ab8     01 40 86 F1 | 	sub	local14, #1
27abc     13 41 02 F1 | 	add	local14, local01
27ac0     20 2F C2 FA | 	rdbyte	local05, local14
27ac4     2F 2E 0E F2 | 	cmp	local05, #47 wz
27ac8     18 00 90 5D |  if_ne	jmp	#LR__3306
27acc     1B 2D 02 F6 | 	mov	local04, local09
27ad0     01 2C 86 F1 | 	sub	local04, #1
27ad4     13 2D 02 F1 | 	add	local04, local01
27ad8     16 01 48 FC | 	wrbyte	#0, local04
27adc     02 36 86 F1 | 	sub	local09, #2
27ae0     88 FF 9F FD | 	jmp	#LR__3305
27ae4                 | LR__3306
27ae4     1E FB 01 F6 | 	mov	result1, local12
27ae8     1C 00 90 FD | 	jmp	#LR__3310
27aec                 | LR__3307
27aec                 | LR__3308
27aec     01 32 06 F1 | 	add	local07, #1
27af0     2C FE 9F FD | 	jmp	#LR__3297
27af4                 | LR__3309
27af4     02 00 00 FF 
27af8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
27afc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27b00     02 00 00 FF 
27b04     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
27b08                 | LR__3310
27b08     A7 F0 03 F6 | 	mov	ptra, fp
27b0c     B2 00 A0 FD | 	call	#popregs_
27b10                 | __system____getvfsforfile_ret
27b10     2D 00 64 FD | 	ret
27b14                 | 
27b14                 | __system___basic_open
27b14     05 4A 05 F6 | 	mov	COUNT_, #5
27b18     A8 00 A0 FD | 	call	#pushregs_
27b1c     0A 27 02 F6 | 	mov	local01, arg02
27b20     0B 29 02 F6 | 	mov	local02, arg03
27b24     0C 2B 02 F6 | 	mov	local03, arg04
27b28     00 2C 06 F6 | 	mov	local04, #0
27b2c     88 4A B0 FD | 	call	#__system____getftab
27b30     FD 2E 0A F6 | 	mov	local05, result1 wz
27b34     18 00 90 5D |  if_ne	jmp	#LR__3320
27b38     EE 12 02 F6 | 	mov	arg01, abortchain
27b3c     0C 14 06 F6 | 	mov	arg02, #12
27b40     01 16 06 F6 | 	mov	arg03, #1
27b44     DA 00 A0 FD | 	call	#__longjmp
27b48     01 FA 65 F6 | 	neg	result1, #1
27b4c     14 01 90 FD | 	jmp	#LR__3329
27b50                 | LR__3320
27b50     08 2E 06 F1 | 	add	local05, #8
27b54     17 FB 09 FB | 	rdlong	result1, local05 wz
27b58     08 2E 86 F1 | 	sub	local05, #8
27b5c     17 13 02 56 |  if_ne	mov	arg01, local05
27b60     A8 41 B0 5D |  if_ne	call	#__system___closeraw
27b64     00 26 0E F2 | 	cmp	local01, #0 wz
27b68     00 28 0E A2 |  if_e	cmp	local02, #0 wz
27b6c     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
27b70     3C 00 90 AD |  if_e	jmp	#LR__3322
27b74     0C 12 06 F6 | 	mov	arg01, #12
27b78     90 36 B0 FD | 	call	#__system___gc_alloc_managed
27b7c     FD 2C 0A F6 | 	mov	local04, result1 wz
27b80     18 00 90 5D |  if_ne	jmp	#LR__3321
27b84     EE 12 02 F6 | 	mov	arg01, abortchain
27b88     07 14 06 F6 | 	mov	arg02, #7
27b8c     01 16 06 F6 | 	mov	arg03, #1
27b90     DA 00 A0 FD | 	call	#__longjmp
27b94     01 FA 65 F6 | 	neg	result1, #1
27b98     C8 00 90 FD | 	jmp	#LR__3329
27b9c                 | LR__3321
27b9c     16 01 68 FC | 	wrlong	#0, local04
27ba0     04 2C 06 F1 | 	add	local04, #4
27ba4     16 01 68 FC | 	wrlong	#0, local04
27ba8     04 2C 86 F1 | 	sub	local04, #4
27bac     17 2D 62 FC | 	wrlong	local04, local05
27bb0                 | LR__3322
27bb0     00 26 0E F2 | 	cmp	local01, #0 wz
27bb4     20 00 90 AD |  if_e	jmp	#LR__3323
27bb8     16 27 62 FC | 	wrlong	local01, local04
27bbc     16 FB 01 F6 | 	mov	result1, local04
27bc0     00 38 05 FF 
27bc4     00 FA 45 F5 | 	or	result1, ##175112192
27bc8     1C 2E 06 F1 | 	add	local05, #28
27bcc     17 FB 61 FC | 	wrlong	result1, local05
27bd0     1C 2E 86 F1 | 	sub	local05, #28
27bd4     0C 00 90 FD | 	jmp	#LR__3324
27bd8                 | LR__3323
27bd8     1C 2E 06 F1 | 	add	local05, #28
27bdc     17 01 68 FC | 	wrlong	#0, local05
27be0     1C 2E 86 F1 | 	sub	local05, #28
27be4                 | LR__3324
27be4     00 28 0E F2 | 	cmp	local02, #0 wz
27be8     28 00 90 AD |  if_e	jmp	#LR__3325
27bec     04 2C 06 F1 | 	add	local04, #4
27bf0     16 29 62 FC | 	wrlong	local02, local04
27bf4     04 2C 86 F1 | 	sub	local04, #4
27bf8     16 FB 01 F6 | 	mov	result1, local04
27bfc     00 40 05 FF 
27c00     00 FA 45 F5 | 	or	result1, ##176160768
27c04     20 2E 06 F1 | 	add	local05, #32
27c08     17 FB 61 FC | 	wrlong	result1, local05
27c0c     20 2E 86 F1 | 	sub	local05, #32
27c10     0C 00 90 FD | 	jmp	#LR__3326
27c14                 | LR__3325
27c14     20 2E 06 F1 | 	add	local05, #32
27c18     17 01 68 FC | 	wrlong	#0, local05
27c1c     20 2E 86 F1 | 	sub	local05, #32
27c20                 | LR__3326
27c20     00 2A 0E F2 | 	cmp	local03, #0 wz
27c24     24 00 90 AD |  if_e	jmp	#LR__3327
27c28     08 2C 06 F1 | 	add	local04, #8
27c2c     16 2B 62 FC | 	wrlong	local03, local04
27c30     08 2C 86 F1 | 	sub	local04, #8
27c34     00 48 05 FF 
27c38     00 2C 46 F5 | 	or	local04, ##177209344
27c3c     24 2E 06 F1 | 	add	local05, #36
27c40     17 2D 62 FC | 	wrlong	local04, local05
27c44     24 2E 86 F1 | 	sub	local05, #36
27c48     0C 00 90 FD | 	jmp	#LR__3328
27c4c                 | LR__3327
27c4c     24 2E 06 F1 | 	add	local05, #36
27c50     17 01 68 FC | 	wrlong	#0, local05
27c54     24 2E 86 F1 | 	sub	local05, #36
27c58                 | LR__3328
27c58     08 2E 06 F1 | 	add	local05, #8
27c5c     17 0F 68 FC | 	wrlong	#7, local05
27c60     00 FA 05 F6 | 	mov	result1, #0
27c64                 | LR__3329
27c64     A7 F0 03 F6 | 	mov	ptra, fp
27c68     B2 00 A0 FD | 	call	#popregs_
27c6c                 | __system___basic_open_ret
27c6c     2D 00 64 FD | 	ret
27c70                 | 
27c70                 | __system___basic_open_string
27c70     04 4A 05 F6 | 	mov	COUNT_, #4
27c74     A8 00 A0 FD | 	call	#pushregs_
27c78     0A 27 02 F6 | 	mov	local01, arg02
27c7c     0B 29 02 F6 | 	mov	local02, arg03
27c80     34 49 B0 FD | 	call	#__system____getftab
27c84     FD 2A 0A F6 | 	mov	local03, result1 wz
27c88     18 00 90 5D |  if_ne	jmp	#LR__3330
27c8c     EE 12 02 F6 | 	mov	arg01, abortchain
27c90     0C 14 06 F6 | 	mov	arg02, #12
27c94     01 16 06 F6 | 	mov	arg03, #1
27c98     DA 00 A0 FD | 	call	#__longjmp
27c9c     01 FA 65 F6 | 	neg	result1, #1
27ca0     58 00 90 FD | 	jmp	#LR__3332
27ca4                 | LR__3330
27ca4     08 2A 06 F1 | 	add	local03, #8
27ca8     15 19 0A FB | 	rdlong	arg04, local03 wz
27cac     08 2A 86 F1 | 	sub	local03, #8
27cb0     15 13 02 56 |  if_ne	mov	arg01, local03
27cb4     54 40 B0 5D |  if_ne	call	#__system___closeraw
27cb8     13 15 02 F6 | 	mov	arg02, local01
27cbc     14 17 02 F6 | 	mov	arg03, local02
27cc0     15 13 02 F6 | 	mov	arg01, local03
27cc4     B6 19 06 F6 | 	mov	arg04, #438
27cc8     3C 3D B0 FD | 	call	#__system___openraw
27ccc     FD 2C 02 F6 | 	mov	local04, result1
27cd0     00 2C 56 F2 | 	cmps	local04, #0 wc
27cd4     20 00 90 3D |  if_ae	jmp	#LR__3331
27cd8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27cdc     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
27ce0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27ce4     EE 12 02 F6 | 	mov	arg01, abortchain
27ce8     01 16 06 F6 | 	mov	arg03, #1
27cec     DA 00 A0 FD | 	call	#__longjmp
27cf0     01 FA 65 F6 | 	neg	result1, #1
27cf4     04 00 90 FD | 	jmp	#LR__3332
27cf8                 | LR__3331
27cf8     16 FB 01 F6 | 	mov	result1, local04
27cfc                 | LR__3332
27cfc     A7 F0 03 F6 | 	mov	ptra, fp
27d00     B2 00 A0 FD | 	call	#popregs_
27d04                 | __system___basic_open_string_ret
27d04     2D 00 64 FD | 	ret
27d08                 | 
27d08                 | __system___basic_print_char
27d08     03 4A 05 F6 | 	mov	COUNT_, #3
27d0c     A8 00 A0 FD | 	call	#pushregs_
27d10     0A 27 02 F6 | 	mov	local01, arg02
27d14     F4 4F B0 FD | 	call	#__system___gettxfunc
27d18     FD 28 0A F6 | 	mov	local02, result1 wz
27d1c     00 FA 05 A6 |  if_e	mov	result1, #0
27d20     30 00 90 AD |  if_e	jmp	#LR__3340
27d24     14 2B 02 F6 | 	mov	local03, local02
27d28     13 28 46 F7 | 	zerox	local02, #19
27d2c     14 2A 46 F0 | 	shr	local03, #20
27d30     02 2A 66 F0 | 	shl	local03, #2
27d34     ED 2A 02 F1 | 	add	local03, __methods__
27d38     15 2B 02 FB | 	rdlong	local03, local03
27d3c     13 13 02 F6 | 	mov	arg01, local01
27d40     F2 26 02 F6 | 	mov	local01, objptr
27d44     14 E5 01 F6 | 	mov	objptr, local02
27d48     2D 2A 62 FD | 	call	local03
27d4c     13 E5 01 F6 | 	mov	objptr, local01
27d50     01 FA 05 F6 | 	mov	result1, #1
27d54                 | LR__3340
27d54     A7 F0 03 F6 | 	mov	ptra, fp
27d58     B2 00 A0 FD | 	call	#popregs_
27d5c                 | __system___basic_print_char_ret
27d5c     2D 00 64 FD | 	ret
27d60                 | 
27d60                 | __system___basic_print_string
27d60     03 4A 05 F6 | 	mov	COUNT_, #3
27d64     A8 00 A0 FD | 	call	#pushregs_
27d68     0A 27 02 F6 | 	mov	local01, arg02
27d6c     0B 29 02 F6 | 	mov	local02, arg03
27d70     98 4F B0 FD | 	call	#__system___gettxfunc
27d74     FD 2A 0A F6 | 	mov	local03, result1 wz
27d78     00 FA 05 A6 |  if_e	mov	result1, #0
27d7c     18 00 90 AD |  if_e	jmp	#LR__3350
27d80     00 26 0E F2 | 	cmp	local01, #0 wz
27d84     00 FA 05 A6 |  if_e	mov	result1, #0
27d88     15 13 02 56 |  if_ne	mov	arg01, local03
27d8c     14 15 02 56 |  if_ne	mov	arg02, local02
27d90     13 17 02 56 |  if_ne	mov	arg03, local01
27d94     08 02 B0 5D |  if_ne	call	#__system___fmtstr
27d98                 | LR__3350
27d98     A7 F0 03 F6 | 	mov	ptra, fp
27d9c     B2 00 A0 FD | 	call	#popregs_
27da0                 | __system___basic_print_string_ret
27da0     2D 00 64 FD | 	ret
27da4                 | 
27da4                 | __system___basic_print_integer
27da4     04 4A 05 F6 | 	mov	COUNT_, #4
27da8     A8 00 A0 FD | 	call	#pushregs_
27dac     0A 27 02 F6 | 	mov	local01, arg02
27db0     0B 29 02 F6 | 	mov	local02, arg03
27db4     0C 2B 02 F6 | 	mov	local03, arg04
27db8     50 4F B0 FD | 	call	#__system___gettxfunc
27dbc     FD 2C 0A F6 | 	mov	local04, result1 wz
27dc0     00 FA 05 A6 |  if_e	mov	result1, #0
27dc4     16 13 02 56 |  if_ne	mov	arg01, local04
27dc8     14 15 02 56 |  if_ne	mov	arg02, local02
27dcc     13 17 02 56 |  if_ne	mov	arg03, local01
27dd0     15 19 02 56 |  if_ne	mov	arg04, local03
27dd4     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
27dd8     A7 F0 03 F6 | 	mov	ptra, fp
27ddc     B2 00 A0 FD | 	call	#popregs_
27de0                 | __system___basic_print_integer_ret
27de0     2D 00 64 FD | 	ret
27de4                 | 
27de4                 | __system___basic_print_unsigned
27de4     03 4A 05 F6 | 	mov	COUNT_, #3
27de8     A8 00 A0 FD | 	call	#pushregs_
27dec     0A 27 02 F6 | 	mov	local01, arg02
27df0     0B 29 02 F6 | 	mov	local02, arg03
27df4     0C 2B 02 F6 | 	mov	local03, arg04
27df8     10 4F B0 FD | 	call	#__system___gettxfunc
27dfc     FD 12 0A F6 | 	mov	arg01, result1 wz
27e00     00 FA 05 A6 |  if_e	mov	result1, #0
27e04     3A 28 26 54 |  if_ne	bith	local02, #58
27e08     14 15 02 56 |  if_ne	mov	arg02, local02
27e0c     13 17 02 56 |  if_ne	mov	arg03, local01
27e10     15 19 02 56 |  if_ne	mov	arg04, local03
27e14     74 02 B0 5D |  if_ne	call	#__system___fmtnum
27e18     A7 F0 03 F6 | 	mov	ptra, fp
27e1c     B2 00 A0 FD | 	call	#popregs_
27e20                 | __system___basic_print_unsigned_ret
27e20     2D 00 64 FD | 	ret
27e24                 | 
27e24                 | __system___basic_get_char
27e24     03 4A 05 F6 | 	mov	COUNT_, #3
27e28     A8 00 A0 FD | 	call	#pushregs_
27e2c     20 4F B0 FD | 	call	#__system___getrxfunc
27e30     FD 26 0A F6 | 	mov	local01, result1 wz
27e34     01 FA 65 A6 |  if_e	neg	result1, #1
27e38     28 00 90 AD |  if_e	jmp	#LR__3360
27e3c     13 29 02 F6 | 	mov	local02, local01
27e40     13 26 46 F7 | 	zerox	local01, #19
27e44     14 28 46 F0 | 	shr	local02, #20
27e48     02 28 66 F0 | 	shl	local02, #2
27e4c     ED 28 02 F1 | 	add	local02, __methods__
27e50     14 29 02 FB | 	rdlong	local02, local02
27e54     F2 2A 02 F6 | 	mov	local03, objptr
27e58     13 E5 01 F6 | 	mov	objptr, local01
27e5c     2D 28 62 FD | 	call	local02
27e60     15 E5 01 F6 | 	mov	objptr, local03
27e64                 | LR__3360
27e64     A7 F0 03 F6 | 	mov	ptra, fp
27e68     B2 00 A0 FD | 	call	#popregs_
27e6c                 | __system___basic_get_char_ret
27e6c     2D 00 64 FD | 	ret
27e70                 | 
27e70                 | __system___basic_put
27e70     04 4A 05 F6 | 	mov	COUNT_, #4
27e74     A8 00 A0 FD | 	call	#pushregs_
27e78     0D 27 02 F6 | 	mov	local01, arg05
27e7c     13 19 02 FD | 	qmul	arg04, local01
27e80     09 29 02 F6 | 	mov	local02, arg01
27e84     0B 2B 02 F6 | 	mov	local03, arg03
27e88     00 14 0E F2 | 	cmp	arg02, #0 wz
27e8c     01 14 86 51 |  if_ne	sub	arg02, #1
27e90     14 13 02 56 |  if_ne	mov	arg01, local02
27e94     00 16 06 56 |  if_ne	mov	arg03, #0
27e98     18 2C 62 FD | 	getqx	local04
27e9c     60 45 B0 5D |  if_ne	call	#__system__lseek
27ea0     15 15 02 F6 | 	mov	arg02, local03
27ea4     16 17 02 F6 | 	mov	arg03, local04
27ea8     14 13 02 F6 | 	mov	arg01, local02
27eac     9C 44 B0 FD | 	call	#__system__write
27eb0     FD 2C 02 F6 | 	mov	local04, result1
27eb4     01 2C 56 F2 | 	cmps	local04, #1 wc
27eb8     10 00 90 CD |  if_b	jmp	#LR__3370
27ebc     16 91 02 F6 | 	mov	muldiva_, local04
27ec0     13 93 02 F6 | 	mov	muldivb_, local01
27ec4     BA 00 A0 FD | 	call	#divide_
27ec8     49 2D 02 F6 | 	mov	local04, muldivb_
27ecc                 | LR__3370
27ecc     16 FB 01 F6 | 	mov	result1, local04
27ed0     A7 F0 03 F6 | 	mov	ptra, fp
27ed4     B2 00 A0 FD | 	call	#popregs_
27ed8                 | __system___basic_put_ret
27ed8     2D 00 64 FD | 	ret
27edc                 | 
27edc                 | __system___basic_get
27edc     04 4A 05 F6 | 	mov	COUNT_, #4
27ee0     A8 00 A0 FD | 	call	#pushregs_
27ee4     0D 27 02 F6 | 	mov	local01, arg05
27ee8     13 19 02 FD | 	qmul	arg04, local01
27eec     09 29 02 F6 | 	mov	local02, arg01
27ef0     0B 2B 02 F6 | 	mov	local03, arg03
27ef4     00 14 0E F2 | 	cmp	arg02, #0 wz
27ef8     01 14 86 51 |  if_ne	sub	arg02, #1
27efc     14 13 02 56 |  if_ne	mov	arg01, local02
27f00     00 16 06 56 |  if_ne	mov	arg03, #0
27f04     18 2C 62 FD | 	getqx	local04
27f08     F4 44 B0 5D |  if_ne	call	#__system__lseek
27f0c     15 15 02 F6 | 	mov	arg02, local03
27f10     16 17 02 F6 | 	mov	arg03, local04
27f14     14 13 02 F6 | 	mov	arg01, local02
27f18     6C 44 B0 FD | 	call	#__system__read
27f1c     FD 2C 02 F6 | 	mov	local04, result1
27f20     01 2C 56 F2 | 	cmps	local04, #1 wc
27f24     10 00 90 CD |  if_b	jmp	#LR__3380
27f28     16 91 02 F6 | 	mov	muldiva_, local04
27f2c     13 93 02 F6 | 	mov	muldivb_, local01
27f30     BA 00 A0 FD | 	call	#divide_
27f34     49 2D 02 F6 | 	mov	local04, muldivb_
27f38                 | LR__3380
27f38     16 FB 01 F6 | 	mov	result1, local04
27f3c     A7 F0 03 F6 | 	mov	ptra, fp
27f40     B2 00 A0 FD | 	call	#popregs_
27f44                 | __system___basic_get_ret
27f44     2D 00 64 FD | 	ret
27f48                 | 
27f48                 | __system___fmtchar
27f48     00 4A 05 F6 | 	mov	COUNT_, #0
27f4c     A8 00 A0 FD | 	call	#pushregs_
27f50     10 F0 07 F1 | 	add	ptra, #16
27f54     04 4E 05 F1 | 	add	fp, #4
27f58     A7 12 62 FC | 	wrlong	arg01, fp
27f5c     04 4E 05 F1 | 	add	fp, #4
27f60     A7 14 62 FC | 	wrlong	arg02, fp
27f64     04 4E 05 F1 | 	add	fp, #4
27f68     A7 16 62 FC | 	wrlong	arg03, fp
27f6c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
27f70     A7 16 62 FC | 	wrlong	arg03, fp
27f74     08 4E 85 F1 | 	sub	fp, #8
27f78     A7 12 02 FB | 	rdlong	arg01, fp
27f7c     04 4E 05 F1 | 	add	fp, #4
27f80     A7 14 02 FB | 	rdlong	arg02, fp
27f84     04 4E 05 F1 | 	add	fp, #4
27f88     A7 16 02 F6 | 	mov	arg03, fp
27f8c     0C 4E 85 F1 | 	sub	fp, #12
27f90     0C 00 B0 FD | 	call	#__system___fmtstr
27f94     A7 F0 03 F6 | 	mov	ptra, fp
27f98     B2 00 A0 FD | 	call	#popregs_
27f9c                 | __system___fmtchar_ret
27f9c     2D 00 64 FD | 	ret
27fa0                 | 
27fa0                 | __system___fmtstr
27fa0     09 4A 05 F6 | 	mov	COUNT_, #9
27fa4     A8 00 A0 FD | 	call	#pushregs_
27fa8     09 27 02 F6 | 	mov	local01, arg01
27fac     0A 29 02 F6 | 	mov	local02, arg02
27fb0     0B 2B 02 F6 | 	mov	local03, arg03
27fb4     14 19 E2 F8 | 	getbyte	arg04, local02, #0
27fb8     15 13 02 F6 | 	mov	arg01, local03
27fbc     09 2D 02 F6 | 	mov	local04, arg01
27fc0     97 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
27fc4                 | LR__3390
27fc4     16 FB C9 FA | 	rdbyte	result1, local04 wz
27fc8     01 2C 06 51 |  if_ne	add	local04, #1
27fcc     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
27fd0                 | LR__3391
27fd0     09 2D 82 F1 | 	sub	local04, arg01
27fd4     00 18 0E F2 | 	cmp	arg04, #0 wz
27fd8     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
27fdc     14 15 02 F6 | 	mov	arg02, local02
27fe0     16 17 02 F6 | 	mov	arg03, local04
27fe4     13 13 02 F6 | 	mov	arg01, local01
27fe8     02 18 06 F6 | 	mov	arg04, #2
27fec     BC 49 B0 FD | 	call	#__system___fmtpad
27ff0     FD 2E 02 F6 | 	mov	local05, result1
27ff4     00 2E 56 F2 | 	cmps	local05, #0 wc
27ff8     17 FB 01 C6 |  if_b	mov	result1, local05
27ffc     80 00 90 CD |  if_b	jmp	#LR__3394
28000     01 2C 56 F2 | 	cmps	local04, #1 wc
28004     50 00 90 CD |  if_b	jmp	#LR__3393
28008     16 31 02 F6 | 	mov	local06, local04
2800c                 | LR__3392
2800c     13 33 02 F6 | 	mov	local07, local01
28010     13 35 02 F6 | 	mov	local08, local01
28014     13 32 46 F7 | 	zerox	local07, #19
28018     14 34 46 F0 | 	shr	local08, #20
2801c     02 34 66 F0 | 	shl	local08, #2
28020     ED 34 02 F1 | 	add	local08, __methods__
28024     1A 35 02 FB | 	rdlong	local08, local08
28028     15 13 C2 FA | 	rdbyte	arg01, local03
2802c     F2 36 02 F6 | 	mov	local09, objptr
28030     19 E5 01 F6 | 	mov	objptr, local07
28034     01 2A 06 F1 | 	add	local03, #1
28038     2D 34 62 FD | 	call	local08
2803c     1B E5 01 F6 | 	mov	objptr, local09
28040     FD 36 02 F6 | 	mov	local09, result1
28044     00 36 56 F2 | 	cmps	local09, #0 wc
28048     1B FB 01 C6 |  if_b	mov	result1, local09
2804c     30 00 90 CD |  if_b	jmp	#LR__3394
28050     1B 2F 02 F1 | 	add	local05, local09
28054     ED 31 6E FB | 	djnz	local06, #LR__3392
28058                 | LR__3393
28058     14 15 02 F6 | 	mov	arg02, local02
2805c     16 17 02 F6 | 	mov	arg03, local04
28060     13 13 02 F6 | 	mov	arg01, local01
28064     01 18 06 F6 | 	mov	arg04, #1
28068     40 49 B0 FD | 	call	#__system___fmtpad
2806c     FD 36 02 F6 | 	mov	local09, result1
28070     00 36 56 F2 | 	cmps	local09, #0 wc
28074     1B FB 01 C6 |  if_b	mov	result1, local09
28078     1B 2F 02 31 |  if_ae	add	local05, local09
2807c     17 FB 01 36 |  if_ae	mov	result1, local05
28080                 | LR__3394
28080     A7 F0 03 F6 | 	mov	ptra, fp
28084     B2 00 A0 FD | 	call	#popregs_
28088                 | __system___fmtstr_ret
28088     2D 00 64 FD | 	ret
2808c                 | 
2808c                 | __system___fmtnum
2808c     0B 4A 05 F6 | 	mov	COUNT_, #11
28090     A8 00 A0 FD | 	call	#pushregs_
28094     09 27 02 F6 | 	mov	local01, arg01
28098     0A 29 02 F6 | 	mov	local02, arg02
2809c     0B 2B 02 F6 | 	mov	local03, arg03
280a0     0C 2D 02 F6 | 	mov	local04, arg04
280a4     F8 2F 02 F6 | 	mov	local05, ptra
280a8     17 31 02 F6 | 	mov	local06, local05
280ac     00 32 06 F6 | 	mov	local07, #0
280b0     14 35 02 F6 | 	mov	local08, local02
280b4     10 34 46 F0 | 	shr	local08, #16
280b8     3F 34 06 F5 | 	and	local08, #63
280bc     14 37 E2 F8 | 	getbyte	local09, local02, #0
280c0     14 39 02 F6 | 	mov	local10, local02
280c4     1A 38 46 F0 | 	shr	local10, #26
280c8     03 38 06 F5 | 	and	local10, #3
280cc     1C 3B 02 F6 | 	mov	local11, local10
280d0     01 34 56 F2 | 	cmps	local08, #1 wc
280d4     44 F0 07 F1 | 	add	ptra, #68
280d8     01 34 86 31 |  if_ae	sub	local08, #1
280dc     41 36 56 F2 | 	cmps	local09, #65 wc
280e0     00 36 0E C2 |  if_b	cmp	local09, #0 wz
280e4     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
280e8     03 3A 0E F2 | 	cmp	local11, #3 wz
280ec     00 3A 06 A6 |  if_e	mov	local11, #0
280f0     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
280f4     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
280f8     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
280fc     00 3A 0E F2 | 	cmp	local11, #0 wz
28100     4C 00 90 AD |  if_e	jmp	#LR__3403
28104     01 32 06 F6 | 	mov	local07, #1
28108     1B 35 0A F2 | 	cmp	local08, local09 wz
2810c     18 00 90 5D |  if_ne	jmp	#LR__3401
28110     05 34 6E FB | 	djnz	local08, #LR__3400
28114     13 13 02 F6 | 	mov	arg01, local01
28118     14 15 02 F6 | 	mov	arg02, local02
2811c     23 16 06 F6 | 	mov	arg03, #35
28120     24 FE BF FD | 	call	#__system___fmtchar
28124     88 00 90 FD | 	jmp	#LR__3407
28128                 | LR__3400
28128                 | LR__3401
28128     02 3A 0E F2 | 	cmp	local11, #2 wz
2812c     18 39 02 A6 |  if_e	mov	local10, local06
28130     01 30 06 A1 |  if_e	add	local06, #1
28134     1C 41 48 AC |  if_e	wrbyte	#32, local10
28138     14 00 90 AD |  if_e	jmp	#LR__3402
2813c     04 3A 0E F2 | 	cmp	local11, #4 wz
28140     18 5B 48 AC |  if_e	wrbyte	#45, local06
28144     01 30 06 A1 |  if_e	add	local06, #1
28148     18 57 48 5C |  if_ne	wrbyte	#43, local06
2814c     01 30 06 51 |  if_ne	add	local06, #1
28150                 | LR__3402
28150                 | LR__3403
28150     18 13 02 F6 | 	mov	arg01, local06
28154     15 15 02 F6 | 	mov	arg02, local03
28158     16 17 02 F6 | 	mov	arg03, local04
2815c     1A 19 02 F6 | 	mov	arg04, local08
28160     00 1A 06 F6 | 	mov	arg05, #0
28164     1D 28 2E F4 | 	testbn	local02, #29 wz
28168     01 1A 06 56 |  if_ne	mov	arg05, #1
2816c     04 49 B0 FD | 	call	#__system___uitoa
28170     FD 32 02 F1 | 	add	local07, result1
28174     1B 33 5A F2 | 	cmps	local07, local09 wcz
28178     24 00 90 ED |  if_be	jmp	#LR__3406
2817c     97 0E 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
28180                 | LR__3404
28180     1B 39 02 F6 | 	mov	local10, local09
28184     01 38 56 F2 | 	cmps	local10, #1 wc
28188     01 36 86 F1 | 	sub	local09, #1
2818c     18 39 02 36 |  if_ae	mov	local10, local06
28190     01 30 06 31 |  if_ae	add	local06, #1
28194     1C 47 48 3C |  if_ae	wrbyte	#35, local10
28198     E4 FF 9F 3D |  if_ae	jmp	#LR__3404
2819c                 | LR__3405
2819c     18 01 48 FC | 	wrbyte	#0, local06
281a0                 | LR__3406
281a0     13 13 02 F6 | 	mov	arg01, local01
281a4     14 15 02 F6 | 	mov	arg02, local02
281a8     17 17 02 F6 | 	mov	arg03, local05
281ac     F0 FD BF FD | 	call	#__system___fmtstr
281b0                 | LR__3407
281b0     A7 F0 03 F6 | 	mov	ptra, fp
281b4     B2 00 A0 FD | 	call	#popregs_
281b8                 | __system___fmtnum_ret
281b8     2D 00 64 FD | 	ret
281bc                 | 
281bc                 | __system___fmtfloat
281bc     10 4A 05 F6 | 	mov	COUNT_, #16
281c0     A8 00 A0 FD | 	call	#pushregs_
281c4     24 F1 07 F1 | 	add	ptra, #292
281c8     04 4E 05 F1 | 	add	fp, #4
281cc     A7 12 62 FC | 	wrlong	arg01, fp
281d0     04 4E 05 F1 | 	add	fp, #4
281d4     A7 14 62 FC | 	wrlong	arg02, fp
281d8     04 4E 05 F1 | 	add	fp, #4
281dc     A7 16 62 FC | 	wrlong	arg03, fp
281e0     04 4E 05 F1 | 	add	fp, #4
281e4     A7 18 62 FC | 	wrlong	arg04, fp
281e8     0C 4E 05 F1 | 	add	fp, #12
281ec     A7 14 68 FC | 	wrlong	#10, fp
281f0     08 4E 05 F1 | 	add	fp, #8
281f4     A7 00 68 FC | 	wrlong	#0, fp
281f8     08 4E 05 F1 | 	add	fp, #8
281fc     A7 00 68 FC | 	wrlong	#0, fp
28200     08 4E 05 F1 | 	add	fp, #8
28204     A7 00 68 FC | 	wrlong	#0, fp
28208     04 4E 05 F1 | 	add	fp, #4
2820c     A7 04 68 FC | 	wrlong	#2, fp
28210     04 4E 05 F1 | 	add	fp, #4
28214     A7 00 68 FC | 	wrlong	#0, fp
28218     04 4E 05 F1 | 	add	fp, #4
2821c     A7 00 68 FC | 	wrlong	#0, fp
28220     04 4E 05 F1 | 	add	fp, #4
28224     A7 00 68 FC | 	wrlong	#0, fp
28228     04 4E 05 F1 | 	add	fp, #4
2822c     A7 00 68 FC | 	wrlong	#0, fp
28230     18 4E 05 F1 | 	add	fp, #24
28234     A7 00 68 FC | 	wrlong	#0, fp
28238     68 4E 05 F1 | 	add	fp, #104
2823c     A7 26 02 F6 | 	mov	local01, fp
28240     08 4E 85 F1 | 	sub	fp, #8
28244     A7 26 62 FC | 	wrlong	local01, fp
28248     04 4E 05 F1 | 	add	fp, #4
2824c     A7 26 62 FC | 	wrlong	local01, fp
28250     BC 4E 85 F1 | 	sub	fp, #188
28254     A7 26 02 FB | 	rdlong	local01, fp
28258     10 26 46 F0 | 	shr	local01, #16
2825c     3F 26 06 F5 | 	and	local01, #63
28260     B0 4E 05 F1 | 	add	fp, #176
28264     A7 26 62 FC | 	wrlong	local01, fp
28268     B0 4E 85 F1 | 	sub	fp, #176
2826c     A7 26 02 FB | 	rdlong	local01, fp
28270     1C 26 46 F0 | 	shr	local01, #28
28274     01 26 06 F5 | 	and	local01, #1
28278     08 4F 05 F1 | 	add	fp, #264
2827c     A7 26 62 FC | 	wrlong	local01, fp
28280     58 4E 85 F1 | 	sub	fp, #88
28284     A7 26 0A FB | 	rdlong	local01, fp wz
28288     B8 4E 85 F1 | 	sub	fp, #184
2828c     3C 00 90 5D |  if_ne	jmp	#LR__3411
28290     10 4E 05 F1 | 	add	fp, #16
28294     A7 26 02 FB | 	rdlong	local01, fp
28298     10 4E 85 F1 | 	sub	fp, #16
2829c     61 26 0E F2 | 	cmp	local01, #97 wz
282a0     18 00 90 5D |  if_ne	jmp	#LR__3410
282a4     B8 4E 05 F1 | 	add	fp, #184
282a8     A7 1A 68 FC | 	wrlong	#13, fp
282ac     84 4E 85 F1 | 	sub	fp, #132
282b0     A7 02 68 FC | 	wrlong	#1, fp
282b4     34 4E 85 F1 | 	sub	fp, #52
282b8     24 00 90 FD | 	jmp	#LR__3412
282bc                 | LR__3410
282bc     B8 4E 05 F1 | 	add	fp, #184
282c0     A7 0C 68 FC | 	wrlong	#6, fp
282c4     B8 4E 85 F1 | 	sub	fp, #184
282c8     14 00 90 FD | 	jmp	#LR__3412
282cc                 | LR__3411
282cc     B8 4E 05 F1 | 	add	fp, #184
282d0     A7 26 02 FB | 	rdlong	local01, fp
282d4     01 26 86 F1 | 	sub	local01, #1
282d8     A7 26 62 FC | 	wrlong	local01, fp
282dc     B8 4E 85 F1 | 	sub	fp, #184
282e0                 | LR__3412
282e0     08 4E 05 F1 | 	add	fp, #8
282e4     A7 26 02 FB | 	rdlong	local01, fp
282e8     16 26 46 F0 | 	shr	local01, #22
282ec     03 26 06 F5 | 	and	local01, #3
282f0     04 4F 05 F1 | 	add	fp, #260
282f4     A7 26 62 FC | 	wrlong	local01, fp
282f8     04 4F 85 F1 | 	sub	fp, #260
282fc     A7 26 02 FB | 	rdlong	local01, fp
28300     1D 26 46 F0 | 	shr	local01, #29
28304     01 26 06 F5 | 	and	local01, #1
28308     B4 4E 05 F1 | 	add	fp, #180
2830c     A7 26 62 FC | 	wrlong	local01, fp
28310     B4 4E 85 F1 | 	sub	fp, #180
28314     A7 26 02 FB | 	rdlong	local01, fp
28318     13 27 EA F8 | 	getbyte	local01, local01, #1
2831c     60 4E 05 F1 | 	add	fp, #96
28320     A7 26 62 FC | 	wrlong	local01, fp
28324     60 4E 85 F1 | 	sub	fp, #96
28328     A7 26 02 FB | 	rdlong	local01, fp
2832c     13 27 E2 F8 | 	getbyte	local01, local01, #0
28330     64 4E 05 F1 | 	add	fp, #100
28334     A7 26 62 FC | 	wrlong	local01, fp
28338     00 26 06 F6 | 	mov	local01, #0
2833c     5C 4E 85 F1 | 	sub	fp, #92
28340     A7 1A 02 FB | 	rdlong	arg05, fp
28344     65 1A 0E F2 | 	cmp	arg05, #101 wz
28348     01 26 06 A6 |  if_e	mov	local01, #1
2834c     14 4E 05 F1 | 	add	fp, #20
28350     A7 26 62 FC | 	wrlong	local01, fp
28354     98 4E 05 F1 | 	add	fp, #152
28358     A7 28 0A FB | 	rdlong	local02, fp wz
2835c     45 26 06 56 |  if_ne	mov	local01, #69
28360     65 26 06 A6 |  if_e	mov	local01, #101
28364     8C 4E 85 F1 | 	sub	fp, #140
28368     A7 26 62 FC | 	wrlong	local01, fp
2836c     20 4E 85 F1 | 	sub	fp, #32
28370     A7 26 02 FB | 	rdlong	local01, fp
28374     10 4E 85 F1 | 	sub	fp, #16
28378     61 26 0E F2 | 	cmp	local01, #97 wz
2837c     4C 00 90 5D |  if_ne	jmp	#LR__3413
28380     24 4E 05 F1 | 	add	fp, #36
28384     A7 02 68 FC | 	wrlong	#1, fp
28388     98 4E 05 F1 | 	add	fp, #152
2838c     A7 28 0A FB | 	rdlong	local02, fp wz
28390     50 26 06 56 |  if_ne	mov	local01, #80
28394     70 26 06 A6 |  if_e	mov	local01, #112
28398     8C 4E 85 F1 | 	sub	fp, #140
2839c     A7 26 62 FC | 	wrlong	local01, fp
283a0     14 4E 85 F1 | 	sub	fp, #20
283a4     A7 04 68 FC | 	wrlong	#2, fp
283a8     1C 4E 05 F1 | 	add	fp, #28
283ac     A7 02 68 FC | 	wrlong	#1, fp
283b0     84 4E 05 F1 | 	add	fp, #132
283b4     A7 28 0A FB | 	rdlong	local02, fp wz
283b8     58 26 06 56 |  if_ne	mov	local01, #88
283bc     78 26 06 A6 |  if_e	mov	local01, #120
283c0     7C 4E 85 F1 | 	sub	fp, #124
283c4     A7 26 62 FC | 	wrlong	local01, fp
283c8     40 4E 85 F1 | 	sub	fp, #64
283cc                 | LR__3413
283cc     10 4E 05 F1 | 	add	fp, #16
283d0     A7 26 02 FB | 	rdlong	local01, fp
283d4     10 4E 85 F1 | 	sub	fp, #16
283d8     23 26 0E F2 | 	cmp	local01, #35 wz
283dc     3C 00 90 5D |  if_ne	jmp	#LR__3416
283e0     48 4E 05 F1 | 	add	fp, #72
283e4     A7 02 68 FC | 	wrlong	#1, fp
283e8     C8 4E 05 F1 | 	add	fp, #200
283ec     A7 26 0A FB | 	rdlong	local01, fp wz
283f0     10 4F 85 F1 | 	sub	fp, #272
283f4     18 00 90 AD |  if_e	jmp	#LR__3414
283f8     10 4E 05 F1 | 	add	fp, #16
283fc     A7 CC 68 FC | 	wrlong	#102, fp
28400     00 4F 05 F1 | 	add	fp, #256
28404     A7 00 68 FC | 	wrlong	#0, fp
28408     10 4F 85 F1 | 	sub	fp, #272
2840c     0C 00 90 FD | 	jmp	#LR__3415
28410                 | LR__3414
28410     10 4F 05 F1 | 	add	fp, #272
28414     A7 02 68 FC | 	wrlong	#1, fp
28418     10 4F 85 F1 | 	sub	fp, #272
2841c                 | LR__3415
2841c                 | LR__3416
2841c     08 4E 05 F1 | 	add	fp, #8
28420     A7 26 02 FB | 	rdlong	local01, fp
28424     1A 26 46 F0 | 	shr	local01, #26
28428     03 26 06 F5 | 	and	local01, #3
2842c     5C 4E 05 F1 | 	add	fp, #92
28430     A7 26 62 FC | 	wrlong	local01, fp
28434     58 4E 85 F1 | 	sub	fp, #88
28438     A7 FA 01 FB | 	rdlong	result1, fp
2843c     0C 4E 85 F1 | 	sub	fp, #12
28440     1F FA 4D F0 | 	shr	result1, #31 wz
28444     20 00 90 AD |  if_e	jmp	#LR__3417
28448     2C 4E 05 F1 | 	add	fp, #44
2844c     A7 5A 68 FC | 	wrlong	#45, fp
28450     20 4E 85 F1 | 	sub	fp, #32
28454     A7 FA 01 FB | 	rdlong	result1, fp
28458     1F FA E5 F4 | 	bitnot	result1, #31
2845c     A7 FA 61 FC | 	wrlong	result1, fp
28460     0C 4E 85 F1 | 	sub	fp, #12
28464     3C 00 90 FD | 	jmp	#LR__3419
28468                 | LR__3417
28468     64 4E 05 F1 | 	add	fp, #100
2846c     A7 26 02 FB | 	rdlong	local01, fp
28470     64 4E 85 F1 | 	sub	fp, #100
28474     01 26 0E F2 | 	cmp	local01, #1 wz
28478     2C 4E 05 A1 |  if_e	add	fp, #44
2847c     A7 56 68 AC |  if_e	wrlong	#43, fp
28480     2C 4E 85 A1 |  if_e	sub	fp, #44
28484     1C 00 90 AD |  if_e	jmp	#LR__3418
28488     64 4E 05 F1 | 	add	fp, #100
2848c     A7 26 02 FB | 	rdlong	local01, fp
28490     64 4E 85 F1 | 	sub	fp, #100
28494     02 26 0E F2 | 	cmp	local01, #2 wz
28498     2C 4E 05 A1 |  if_e	add	fp, #44
2849c     A7 40 68 AC |  if_e	wrlong	#32, fp
284a0     2C 4E 85 A1 |  if_e	sub	fp, #44
284a4                 | LR__3418
284a4                 | LR__3419
284a4     08 4E 05 F1 | 	add	fp, #8
284a8     A7 26 02 FB | 	rdlong	local01, fp
284ac     18 26 46 F0 | 	shr	local01, #24
284b0     03 26 06 F5 | 	and	local01, #3
284b4     3C 4E 05 F1 | 	add	fp, #60
284b8     A7 26 62 FC | 	wrlong	local01, fp
284bc     00 26 06 F6 | 	mov	local01, #0
284c0     18 4E 85 F1 | 	sub	fp, #24
284c4     A7 2A 0A FB | 	rdlong	local03, fp wz
284c8     2C 4E 85 F1 | 	sub	fp, #44
284cc     18 00 90 5D |  if_ne	jmp	#LR__3420
284d0     1C 4E 05 F1 | 	add	fp, #28
284d4     A7 2C 02 FB | 	rdlong	local04, fp
284d8     1C 4E 85 F1 | 	sub	fp, #28
284dc     16 2F 02 F6 | 	mov	local05, local04
284e0     0A 2E 0E F2 | 	cmp	local05, #10 wz
284e4     04 00 90 AD |  if_e	jmp	#LR__3421
284e8                 | LR__3420
284e8     01 26 66 F5 | 	xor	local01, #1
284ec                 | LR__3421
284ec     3C 4E 05 F1 | 	add	fp, #60
284f0     A7 26 62 FC | 	wrlong	local01, fp
284f4     3C 4E 85 F1 | 	sub	fp, #60
284f8     00 26 0E F2 | 	cmp	local01, #0 wz
284fc     0C 01 90 AD |  if_e	jmp	#LR__3423
28500     44 4E 05 F1 | 	add	fp, #68
28504     A7 2E 02 FB | 	rdlong	local05, fp
28508     44 4E 85 F1 | 	sub	fp, #68
2850c     17 2B 02 F6 | 	mov	local03, local05
28510     02 2A 0E F2 | 	cmp	local03, #2 wz
28514     F4 00 90 5D |  if_ne	jmp	#LR__3423
28518     0C 4F 05 F1 | 	add	fp, #268
2851c     A7 30 02 FB | 	rdlong	local06, fp
28520     0C 4F 85 F1 | 	sub	fp, #268
28524     18 2D 02 F6 | 	mov	local04, local06
28528     02 2C 0E F2 | 	cmp	local04, #2 wz
2852c     DC 00 90 AD |  if_e	jmp	#LR__3423
28530     C0 4E 05 F1 | 	add	fp, #192
28534     A7 12 02 FB | 	rdlong	arg01, fp
28538     94 4E 85 F1 | 	sub	fp, #148
2853c     A7 14 02 FB | 	rdlong	arg02, fp
28540     14 4E 05 F1 | 	add	fp, #20
28544     A7 16 02 FB | 	rdlong	arg03, fp
28548     40 4E 85 F1 | 	sub	fp, #64
2854c     8C 47 B0 FD | 	call	#__system__emitsign_0576
28550     14 4F 05 F1 | 	add	fp, #276
28554     A7 FA 61 FC | 	wrlong	result1, fp
28558     14 4F 85 F1 | 	sub	fp, #276
2855c     00 FA 55 F2 | 	cmps	result1, #0 wc
28560     14 4F 05 C1 |  if_b	add	fp, #276
28564     A7 FA 01 CB |  if_b	rdlong	result1, fp
28568     14 4F 85 C1 |  if_b	sub	fp, #276
2856c     6C 0B 90 CD |  if_b	jmp	#LR__3473
28570     C0 4E 05 F1 | 	add	fp, #192
28574     A7 26 02 FB | 	rdlong	local01, fp
28578     54 4E 05 F1 | 	add	fp, #84
2857c     A7 2E 02 FB | 	rdlong	local05, fp
28580     17 2B 02 F6 | 	mov	local03, local05
28584     17 27 02 F1 | 	add	local01, local05
28588     54 4E 85 F1 | 	sub	fp, #84
2858c     A7 26 62 FC | 	wrlong	local01, fp
28590     58 4E 85 F1 | 	sub	fp, #88
28594     A7 26 0A FB | 	rdlong	local01, fp wz
28598     68 4E 85 F1 | 	sub	fp, #104
2859c     60 00 90 AD |  if_e	jmp	#LR__3422
285a0     68 4E 05 F1 | 	add	fp, #104
285a4     A7 26 02 FB | 	rdlong	local01, fp
285a8     AC 4E 05 F1 | 	add	fp, #172
285ac     A7 2A 02 FB | 	rdlong	local03, fp
285b0     15 27 82 F1 | 	sub	local01, local03
285b4     AC 4E 85 F1 | 	sub	fp, #172
285b8     A7 26 62 FC | 	wrlong	local01, fp
285bc     68 4E 85 F1 | 	sub	fp, #104
285c0     00 26 56 F2 | 	cmps	local01, #0 wc
285c4     68 4E 05 C1 |  if_b	add	fp, #104
285c8     A7 00 68 CC |  if_b	wrlong	#0, fp
285cc     68 4E 85 C1 |  if_b	sub	fp, #104
285d0     08 4E 05 F1 | 	add	fp, #8
285d4     A7 26 02 FB | 	rdlong	local01, fp
285d8     E8 26 06 F4 | 	bitl	local01, #232
285dc     A7 26 62 FC | 	wrlong	local01, fp
285e0     60 4E 05 F1 | 	add	fp, #96
285e4     A7 2E 02 FB | 	rdlong	local05, fp
285e8     17 2B 02 F6 | 	mov	local03, local05
285ec     08 2A 66 F0 | 	shl	local03, #8
285f0     15 27 42 F5 | 	or	local01, local03
285f4     60 4E 85 F1 | 	sub	fp, #96
285f8     A7 26 62 FC | 	wrlong	local01, fp
285fc     08 4E 85 F1 | 	sub	fp, #8
28600                 | LR__3422
28600     3C 4E 05 F1 | 	add	fp, #60
28604     A7 00 68 FC | 	wrlong	#0, fp
28608     3C 4E 85 F1 | 	sub	fp, #60
2860c                 | LR__3423
2860c     0C 4E 05 F1 | 	add	fp, #12
28610     A7 12 02 FB | 	rdlong	arg01, fp
28614     0C 4E 85 F1 | 	sub	fp, #12
28618     EC 21 B0 FD | 	call	#__system____builtin_ilogb
2861c     FF FF 3F FF 
28620     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
28624     50 00 90 5D |  if_ne	jmp	#LR__3425
28628     2C 4E 05 F1 | 	add	fp, #44
2862c     A7 26 0A FB | 	rdlong	local01, fp wz
28630     2C 4E 85 F1 | 	sub	fp, #44
28634     24 00 90 AD |  if_e	jmp	#LR__3424
28638     C0 4E 05 F1 | 	add	fp, #192
2863c     A7 28 02 FB | 	rdlong	local02, fp
28640     14 2B 02 F6 | 	mov	local03, local02
28644     01 2A 06 F1 | 	add	local03, #1
28648     A7 2A 62 FC | 	wrlong	local03, fp
2864c     94 4E 85 F1 | 	sub	fp, #148
28650     A7 2C 02 FB | 	rdlong	local04, fp
28654     2C 4E 85 F1 | 	sub	fp, #44
28658     14 2D 42 FC | 	wrbyte	local04, local02
2865c                 | LR__3424
2865c     C0 4E 05 F1 | 	add	fp, #192
28660     A7 12 02 FB | 	rdlong	arg01, fp
28664     C0 4E 85 F1 | 	sub	fp, #192
28668     B5 01 00 FF 
2866c     76 15 06 F6 | 	mov	arg02, ##@LR__5421
28670     AC E9 BF FD | 	call	#__system____builtin_strcpy
28674     A4 08 90 FD | 	jmp	#LR__3461
28678                 | LR__3425
28678     0C 4E 05 F1 | 	add	fp, #12
2867c     A7 28 02 FB | 	rdlong	local02, fp
28680     0C 4E 85 F1 | 	sub	fp, #12
28684     14 13 02 F6 | 	mov	arg01, local02
28688     7C 21 B0 FD | 	call	#__system____builtin_ilogb
2868c     00 00 40 FF 
28690     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
28694     50 00 90 5D |  if_ne	jmp	#LR__3427
28698     2C 4E 05 F1 | 	add	fp, #44
2869c     A7 26 0A FB | 	rdlong	local01, fp wz
286a0     2C 4E 85 F1 | 	sub	fp, #44
286a4     24 00 90 AD |  if_e	jmp	#LR__3426
286a8     C0 4E 05 F1 | 	add	fp, #192
286ac     A7 28 02 FB | 	rdlong	local02, fp
286b0     14 2B 02 F6 | 	mov	local03, local02
286b4     01 2A 06 F1 | 	add	local03, #1
286b8     A7 2A 62 FC | 	wrlong	local03, fp
286bc     94 4E 85 F1 | 	sub	fp, #148
286c0     A7 2C 02 FB | 	rdlong	local04, fp
286c4     2C 4E 85 F1 | 	sub	fp, #44
286c8     14 2D 42 FC | 	wrbyte	local04, local02
286cc                 | LR__3426
286cc     C0 4E 05 F1 | 	add	fp, #192
286d0     A7 12 02 FB | 	rdlong	arg01, fp
286d4     C0 4E 85 F1 | 	sub	fp, #192
286d8     B5 01 00 FF 
286dc     7A 15 06 F6 | 	mov	arg02, ##@LR__5422
286e0     3C E9 BF FD | 	call	#__system____builtin_strcpy
286e4     34 08 90 FD | 	jmp	#LR__3461
286e8                 | LR__3427
286e8     10 4E 05 F1 | 	add	fp, #16
286ec     A7 26 02 FB | 	rdlong	local01, fp
286f0     10 4E 85 F1 | 	sub	fp, #16
286f4     67 26 0E F2 | 	cmp	local01, #103 wz
286f8     10 4E 05 51 |  if_ne	add	fp, #16
286fc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28700     10 4E 85 51 |  if_ne	sub	fp, #16
28704     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
28708     94 01 90 5D |  if_ne	jmp	#LR__3432
2870c     0C 4E 05 F1 | 	add	fp, #12
28710     A7 12 02 FB | 	rdlong	arg01, fp
28714     08 4E 05 F1 | 	add	fp, #8
28718     A7 14 02 F6 | 	mov	arg02, fp
2871c     0C 4E 05 F1 | 	add	fp, #12
28720     A7 16 02 F6 | 	mov	arg03, fp
28724     98 4E 05 F1 | 	add	fp, #152
28728     A7 18 02 FB | 	rdlong	arg04, fp
2872c     9C 4E 85 F1 | 	sub	fp, #156
28730     A7 1A 02 FB | 	rdlong	arg05, fp
28734     1C 4E 85 F1 | 	sub	fp, #28
28738     AC 43 B0 FD | 	call	#__system__disassemble_0574
2873c     10 4E 05 F1 | 	add	fp, #16
28740     A7 26 02 FB | 	rdlong	local01, fp
28744     10 4E 85 F1 | 	sub	fp, #16
28748     23 26 0E F2 | 	cmp	local01, #35 wz
2874c     A0 00 90 5D |  if_ne	jmp	#LR__3429
28750     20 4E 05 F1 | 	add	fp, #32
28754     A7 26 02 FB | 	rdlong	local01, fp
28758     98 4E 05 F1 | 	add	fp, #152
2875c     A7 2A 02 FB | 	rdlong	local03, fp
28760     B8 4E 85 F1 | 	sub	fp, #184
28764     15 27 5A F2 | 	cmps	local01, local03 wcz
28768     24 4E 05 11 |  if_a	add	fp, #36
2876c     A7 02 68 1C |  if_a	wrlong	#1, fp
28770     24 4E 85 11 |  if_a	sub	fp, #36
28774     A4 01 90 1D |  if_a	jmp	#LR__3435
28778     20 4E 05 F1 | 	add	fp, #32
2877c     A7 26 02 FB | 	rdlong	local01, fp
28780     20 4E 85 F1 | 	sub	fp, #32
28784     00 26 56 F2 | 	cmps	local01, #0 wc
28788     2C 00 90 3D |  if_ae	jmp	#LR__3428
2878c     B8 4E 05 F1 | 	add	fp, #184
28790     A7 26 02 FB | 	rdlong	local01, fp
28794     13 27 62 F6 | 	neg	local01, local01
28798     98 4E 85 F1 | 	sub	fp, #152
2879c     A7 2A 02 FB | 	rdlong	local03, fp
287a0     20 4E 85 F1 | 	sub	fp, #32
287a4     13 2B 5A F2 | 	cmps	local03, local01 wcz
287a8     24 4E 05 E1 |  if_be	add	fp, #36
287ac     A7 02 68 EC |  if_be	wrlong	#1, fp
287b0     24 4E 85 E1 |  if_be	sub	fp, #36
287b4     64 01 90 FD | 	jmp	#LR__3435
287b8                 | LR__3428
287b8     20 4E 05 F1 | 	add	fp, #32
287bc     A7 26 02 FB | 	rdlong	local01, fp
287c0     20 4E 85 F1 | 	sub	fp, #32
287c4     01 26 56 F2 | 	cmps	local01, #1 wc
287c8     50 01 90 CD |  if_b	jmp	#LR__3435
287cc     B8 4E 05 F1 | 	add	fp, #184
287d0     A7 26 02 FB | 	rdlong	local01, fp
287d4     98 4E 85 F1 | 	sub	fp, #152
287d8     A7 2A 02 FB | 	rdlong	local03, fp
287dc     15 27 82 F1 | 	sub	local01, local03
287e0     98 4E 05 F1 | 	add	fp, #152
287e4     A7 26 62 FC | 	wrlong	local01, fp
287e8     B8 4E 85 F1 | 	sub	fp, #184
287ec     2C 01 90 FD | 	jmp	#LR__3435
287f0                 | LR__3429
287f0     00 26 06 F6 | 	mov	local01, #0
287f4     08 4E 05 F1 | 	add	fp, #8
287f8     A7 28 02 FB | 	rdlong	local02, fp
287fc     1C 28 46 F0 | 	shr	local02, #28
28800     01 28 0E F5 | 	and	local02, #1 wz
28804     01 26 06 A6 |  if_e	mov	local01, #1
28808     2C 4E 05 F1 | 	add	fp, #44
2880c     A7 26 62 FC | 	wrlong	local01, fp
28810     14 4E 85 F1 | 	sub	fp, #20
28814     A7 26 02 FB | 	rdlong	local01, fp
28818     98 4E 05 F1 | 	add	fp, #152
2881c     A7 2A 02 FB | 	rdlong	local03, fp
28820     B8 4E 85 F1 | 	sub	fp, #184
28824     15 27 52 F2 | 	cmps	local01, local03 wc
28828     18 00 90 3D |  if_ae	jmp	#LR__3430
2882c     20 4E 05 F1 | 	add	fp, #32
28830     A7 2C 02 FB | 	rdlong	local04, fp
28834     20 4E 85 F1 | 	sub	fp, #32
28838     FF FF 7F FF 
2883c     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
28840     10 00 90 3D |  if_ae	jmp	#LR__3431
28844                 | LR__3430
28844     24 4E 05 F1 | 	add	fp, #36
28848     A7 02 68 FC | 	wrlong	#1, fp
2884c     24 4E 85 F1 | 	sub	fp, #36
28850     C8 00 90 FD | 	jmp	#LR__3435
28854                 | LR__3431
28854     B8 4E 05 F1 | 	add	fp, #184
28858     A7 2C 02 FB | 	rdlong	local04, fp
2885c     98 4E 85 F1 | 	sub	fp, #152
28860     A7 2A 02 FB | 	rdlong	local03, fp
28864     15 2D 82 F1 | 	sub	local04, local03
28868     98 4E 05 F1 | 	add	fp, #152
2886c     A7 2C 62 FC | 	wrlong	local04, fp
28870     AC 4E 85 F1 | 	sub	fp, #172
28874     A7 12 02 FB | 	rdlong	arg01, fp
28878     08 4E 05 F1 | 	add	fp, #8
2887c     A7 14 02 F6 | 	mov	arg02, fp
28880     0C 4E 05 F1 | 	add	fp, #12
28884     A7 16 02 F6 | 	mov	arg03, fp
28888     16 19 62 F6 | 	neg	arg04, local04
2888c     04 4E 85 F1 | 	sub	fp, #4
28890     A7 1A 02 FB | 	rdlong	arg05, fp
28894     1C 4E 85 F1 | 	sub	fp, #28
28898     4C 42 B0 FD | 	call	#__system__disassemble_0574
2889c     7C 00 90 FD | 	jmp	#LR__3435
288a0                 | LR__3432
288a0     24 4E 05 F1 | 	add	fp, #36
288a4     A7 26 0A FB | 	rdlong	local01, fp wz
288a8     24 4E 85 F1 | 	sub	fp, #36
288ac     34 00 90 AD |  if_e	jmp	#LR__3433
288b0     0C 4E 05 F1 | 	add	fp, #12
288b4     A7 12 02 FB | 	rdlong	arg01, fp
288b8     08 4E 05 F1 | 	add	fp, #8
288bc     A7 14 02 F6 | 	mov	arg02, fp
288c0     0C 4E 05 F1 | 	add	fp, #12
288c4     A7 16 02 F6 | 	mov	arg03, fp
288c8     98 4E 05 F1 | 	add	fp, #152
288cc     A7 18 02 FB | 	rdlong	arg04, fp
288d0     9C 4E 85 F1 | 	sub	fp, #156
288d4     A7 1A 02 FB | 	rdlong	arg05, fp
288d8     1C 4E 85 F1 | 	sub	fp, #28
288dc     08 42 B0 FD | 	call	#__system__disassemble_0574
288e0     38 00 90 FD | 	jmp	#LR__3434
288e4                 | LR__3433
288e4     0C 4E 05 F1 | 	add	fp, #12
288e8     A7 12 02 FB | 	rdlong	arg01, fp
288ec     08 4E 05 F1 | 	add	fp, #8
288f0     A7 14 02 F6 | 	mov	arg02, fp
288f4     0C 4E 05 F1 | 	add	fp, #12
288f8     A7 16 02 F6 | 	mov	arg03, fp
288fc     98 4E 05 F1 | 	add	fp, #152
28900     A7 2C 02 FB | 	rdlong	local04, fp
28904     01 2C 06 F1 | 	add	local04, #1
28908     16 19 62 F6 | 	neg	arg04, local04
2890c     9C 4E 85 F1 | 	sub	fp, #156
28910     A7 1A 02 FB | 	rdlong	arg05, fp
28914     1C 4E 85 F1 | 	sub	fp, #28
28918     CC 41 B0 FD | 	call	#__system__disassemble_0574
2891c                 | LR__3434
2891c                 | LR__3435
2891c     1C 4E 05 F1 | 	add	fp, #28
28920     A7 26 02 FB | 	rdlong	local01, fp
28924     1C 4E 85 F1 | 	sub	fp, #28
28928     02 26 0E F2 | 	cmp	local01, #2 wz
2892c     4C 00 90 5D |  if_ne	jmp	#LR__3438
28930     1C 4E 05 F1 | 	add	fp, #28
28934     A7 20 68 FC | 	wrlong	#16, fp
28938     1C 4E 85 F1 | 	sub	fp, #28
2893c                 | LR__3436
2893c     14 4E 05 F1 | 	add	fp, #20
28940     A7 26 0A FB | 	rdlong	local01, fp wz
28944     14 4E 85 F1 | 	sub	fp, #20
28948     30 00 90 AD |  if_e	jmp	#LR__3437
2894c     14 4E 05 F1 | 	add	fp, #20
28950     A7 2A 02 FB | 	rdlong	local03, fp
28954     14 4E 85 F1 | 	sub	fp, #20
28958     00 80 00 FF 
2895c     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
28960     18 00 90 3D |  if_ae	jmp	#LR__3437
28964     14 4E 05 F1 | 	add	fp, #20
28968     A7 26 02 FB | 	rdlong	local01, fp
2896c     01 26 66 F0 | 	shl	local01, #1
28970     A7 26 62 FC | 	wrlong	local01, fp
28974     14 4E 85 F1 | 	sub	fp, #20
28978     C0 FF 9F FD | 	jmp	#LR__3436
2897c                 | LR__3437
2897c                 | LR__3438
2897c     70 4E 05 F1 | 	add	fp, #112
28980     A7 12 02 F6 | 	mov	arg01, fp
28984     5C 4E 85 F1 | 	sub	fp, #92
28988     A7 14 02 FB | 	rdlong	arg02, fp
2898c     08 4E 05 F1 | 	add	fp, #8
28990     A7 16 02 FB | 	rdlong	arg03, fp
28994     A0 4E 05 F1 | 	add	fp, #160
28998     A7 1A 02 FB | 	rdlong	arg05, fp
2899c     BC 4E 85 F1 | 	sub	fp, #188
289a0     01 18 06 F6 | 	mov	arg04, #1
289a4     CC 40 B0 FD | 	call	#__system___uitoa
289a8     58 4E 05 F1 | 	add	fp, #88
289ac     A7 FA 61 FC | 	wrlong	result1, fp
289b0     38 4E 85 F1 | 	sub	fp, #56
289b4     A7 26 02 FB | 	rdlong	local01, fp
289b8     20 4E 85 F1 | 	sub	fp, #32
289bc     00 26 56 F2 | 	cmps	local01, #0 wc
289c0     50 00 90 3D |  if_ae	jmp	#LR__3439
289c4     60 4E 05 F1 | 	add	fp, #96
289c8     A7 5A 68 FC | 	wrlong	#45, fp
289cc     50 4E 05 F1 | 	add	fp, #80
289d0     A7 12 02 F6 | 	mov	arg01, fp
289d4     90 4E 85 F1 | 	sub	fp, #144
289d8     A7 2A 02 FB | 	rdlong	local03, fp
289dc     15 15 62 F6 | 	neg	arg02, local03
289e0     18 4E 05 F1 | 	add	fp, #24
289e4     A7 18 02 FB | 	rdlong	arg04, fp
289e8     84 4E 05 F1 | 	add	fp, #132
289ec     A7 30 02 FB | 	rdlong	local06, fp
289f0     BC 4E 85 F1 | 	sub	fp, #188
289f4     18 2D 02 F6 | 	mov	local04, local06
289f8     0A 16 06 F6 | 	mov	arg03, #10
289fc     16 1B 02 F6 | 	mov	arg05, local04
28a00     70 40 B0 FD | 	call	#__system___uitoa
28a04     5C 4E 05 F1 | 	add	fp, #92
28a08     A7 FA 61 FC | 	wrlong	result1, fp
28a0c     5C 4E 85 F1 | 	sub	fp, #92
28a10     48 00 90 FD | 	jmp	#LR__3440
28a14                 | LR__3439
28a14     60 4E 05 F1 | 	add	fp, #96
28a18     A7 56 68 FC | 	wrlong	#43, fp
28a1c     50 4E 05 F1 | 	add	fp, #80
28a20     A7 12 02 F6 | 	mov	arg01, fp
28a24     90 4E 85 F1 | 	sub	fp, #144
28a28     A7 14 02 FB | 	rdlong	arg02, fp
28a2c     18 4E 05 F1 | 	add	fp, #24
28a30     A7 18 02 FB | 	rdlong	arg04, fp
28a34     84 4E 05 F1 | 	add	fp, #132
28a38     A7 30 02 FB | 	rdlong	local06, fp
28a3c     BC 4E 85 F1 | 	sub	fp, #188
28a40     18 2D 02 F6 | 	mov	local04, local06
28a44     0A 16 06 F6 | 	mov	arg03, #10
28a48     16 1B 02 F6 | 	mov	arg05, local04
28a4c     24 40 B0 FD | 	call	#__system___uitoa
28a50     5C 4E 05 F1 | 	add	fp, #92
28a54     A7 FA 61 FC | 	wrlong	result1, fp
28a58     5C 4E 85 F1 | 	sub	fp, #92
28a5c                 | LR__3440
28a5c     24 4E 05 F1 | 	add	fp, #36
28a60     A7 26 0A FB | 	rdlong	local01, fp wz
28a64     24 4E 85 F1 | 	sub	fp, #36
28a68     2C 00 90 AD |  if_e	jmp	#LR__3441
28a6c     50 4E 05 F1 | 	add	fp, #80
28a70     A7 00 68 FC | 	wrlong	#0, fp
28a74     04 4E 85 F1 | 	sub	fp, #4
28a78     A7 00 68 FC | 	wrlong	#0, fp
28a7c     6C 4E 05 F1 | 	add	fp, #108
28a80     A7 26 02 FB | 	rdlong	local01, fp
28a84     01 26 06 F1 | 	add	local01, #1
28a88     64 4E 85 F1 | 	sub	fp, #100
28a8c     A7 26 62 FC | 	wrlong	local01, fp
28a90     54 4E 85 F1 | 	sub	fp, #84
28a94     88 00 90 FD | 	jmp	#LR__3444
28a98                 | LR__3441
28a98     20 4E 05 F1 | 	add	fp, #32
28a9c     A7 26 02 FB | 	rdlong	local01, fp
28aa0     20 4E 85 F1 | 	sub	fp, #32
28aa4     00 26 56 F2 | 	cmps	local01, #0 wc
28aa8     40 00 90 3D |  if_ae	jmp	#LR__3442
28aac     20 4E 05 F1 | 	add	fp, #32
28ab0     A7 28 02 FB | 	rdlong	local02, fp
28ab4     30 4E 05 F1 | 	add	fp, #48
28ab8     A7 28 62 FC | 	wrlong	local02, fp
28abc     04 4E 85 F1 | 	sub	fp, #4
28ac0     A7 28 62 FC | 	wrlong	local02, fp
28ac4     2C 4E 85 F1 | 	sub	fp, #44
28ac8     A7 26 02 FB | 	rdlong	local01, fp
28acc     98 4E 05 F1 | 	add	fp, #152
28ad0     A7 2A 02 FB | 	rdlong	local03, fp
28ad4     15 27 02 F1 | 	add	local01, local03
28ad8     01 26 06 F1 | 	add	local01, #1
28adc     64 4E 85 F1 | 	sub	fp, #100
28ae0     A7 26 62 FC | 	wrlong	local01, fp
28ae4     54 4E 85 F1 | 	sub	fp, #84
28ae8     34 00 90 FD | 	jmp	#LR__3443
28aec                 | LR__3442
28aec     4C 4E 05 F1 | 	add	fp, #76
28af0     A7 00 68 FC | 	wrlong	#0, fp
28af4     2C 4E 85 F1 | 	sub	fp, #44
28af8     A7 26 02 FB | 	rdlong	local01, fp
28afc     30 4E 05 F1 | 	add	fp, #48
28b00     A7 26 62 FC | 	wrlong	local01, fp
28b04     68 4E 05 F1 | 	add	fp, #104
28b08     A7 2A 02 FB | 	rdlong	local03, fp
28b0c     15 27 02 F1 | 	add	local01, local03
28b10     01 26 06 F1 | 	add	local01, #1
28b14     64 4E 85 F1 | 	sub	fp, #100
28b18     A7 26 62 FC | 	wrlong	local01, fp
28b1c     54 4E 85 F1 | 	sub	fp, #84
28b20                 | LR__3443
28b20                 | LR__3444
28b20     54 4E 05 F1 | 	add	fp, #84
28b24     A7 26 02 FB | 	rdlong	local01, fp
28b28     08 4E 85 F1 | 	sub	fp, #8
28b2c     A7 2A 02 FB | 	rdlong	local03, fp
28b30     15 27 82 F1 | 	sub	local01, local03
28b34     01 26 06 F1 | 	add	local01, #1
28b38     24 4E 85 F1 | 	sub	fp, #36
28b3c     A7 26 62 FC | 	wrlong	local01, fp
28b40     04 4E 05 F1 | 	add	fp, #4
28b44     A7 26 0A FB | 	rdlong	local01, fp wz
28b48     2C 4E 85 F1 | 	sub	fp, #44
28b4c     28 4E 05 51 |  if_ne	add	fp, #40
28b50     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28b54     01 2A 06 51 |  if_ne	add	local03, #1
28b58     A7 2A 62 5C |  if_ne	wrlong	local03, fp
28b5c     28 4E 85 51 |  if_ne	sub	fp, #40
28b60     1C 4E 05 F1 | 	add	fp, #28
28b64     A7 26 02 FB | 	rdlong	local01, fp
28b68     1C 4E 85 F1 | 	sub	fp, #28
28b6c     10 26 0E F2 | 	cmp	local01, #16 wz
28b70     28 4E 05 A1 |  if_e	add	fp, #40
28b74     A7 26 02 AB |  if_e	rdlong	local01, fp
28b78     02 26 06 A1 |  if_e	add	local01, #2
28b7c     A7 26 62 AC |  if_e	wrlong	local01, fp
28b80     28 4E 85 A1 |  if_e	sub	fp, #40
28b84     24 4E 05 F1 | 	add	fp, #36
28b88     A7 26 0A FB | 	rdlong	local01, fp wz
28b8c     24 4E 85 F1 | 	sub	fp, #36
28b90     28 00 90 AD |  if_e	jmp	#LR__3445
28b94     28 4E 05 F1 | 	add	fp, #40
28b98     A7 26 02 FB | 	rdlong	local01, fp
28b9c     02 2A 06 F6 | 	mov	local03, #2
28ba0     34 4E 05 F1 | 	add	fp, #52
28ba4     A7 2E 02 FB | 	rdlong	local05, fp
28ba8     17 2B 02 F1 | 	add	local03, local05
28bac     15 27 02 F1 | 	add	local01, local03
28bb0     34 4E 85 F1 | 	sub	fp, #52
28bb4     A7 26 62 FC | 	wrlong	local01, fp
28bb8     28 4E 85 F1 | 	sub	fp, #40
28bbc                 | LR__3445
28bbc     28 4E 05 F1 | 	add	fp, #40
28bc0     A7 26 02 FB | 	rdlong	local01, fp
28bc4     28 4E 85 F1 | 	sub	fp, #40
28bc8     41 26 56 F2 | 	cmps	local01, #65 wc
28bcc     01 FA 65 36 |  if_ae	neg	result1, #1
28bd0     08 05 90 3D |  if_ae	jmp	#LR__3473
28bd4     3C 4E 05 F1 | 	add	fp, #60
28bd8     A7 26 0A FB | 	rdlong	local01, fp wz
28bdc     3C 4E 85 F1 | 	sub	fp, #60
28be0     60 00 90 AD |  if_e	jmp	#LR__3446
28be4     C0 4E 05 F1 | 	add	fp, #192
28be8     A7 12 02 FB | 	rdlong	arg01, fp
28bec     94 4E 85 F1 | 	sub	fp, #148
28bf0     A7 14 02 FB | 	rdlong	arg02, fp
28bf4     14 4E 05 F1 | 	add	fp, #20
28bf8     A7 16 02 FB | 	rdlong	arg03, fp
28bfc     40 4E 85 F1 | 	sub	fp, #64
28c00     D8 40 B0 FD | 	call	#__system__emitsign_0576
28c04     18 4F 05 F1 | 	add	fp, #280
28c08     A7 FA 61 FC | 	wrlong	result1, fp
28c0c     18 4F 85 F1 | 	sub	fp, #280
28c10     00 FA 55 F2 | 	cmps	result1, #0 wc
28c14     18 4F 05 C1 |  if_b	add	fp, #280
28c18     A7 FA 01 CB |  if_b	rdlong	result1, fp
28c1c     18 4F 85 C1 |  if_b	sub	fp, #280
28c20     B8 04 90 CD |  if_b	jmp	#LR__3473
28c24     C0 4E 05 F1 | 	add	fp, #192
28c28     A7 26 02 FB | 	rdlong	local01, fp
28c2c     58 4E 05 F1 | 	add	fp, #88
28c30     A7 2A 02 FB | 	rdlong	local03, fp
28c34     15 27 02 F1 | 	add	local01, local03
28c38     58 4E 85 F1 | 	sub	fp, #88
28c3c     A7 26 62 FC | 	wrlong	local01, fp
28c40     C0 4E 85 F1 | 	sub	fp, #192
28c44                 | LR__3446
28c44     4C 4E 05 F1 | 	add	fp, #76
28c48     A7 26 02 FB | 	rdlong	local01, fp
28c4c     34 4E 85 F1 | 	sub	fp, #52
28c50     A7 26 62 FC | 	wrlong	local01, fp
28c54     18 4E 85 F1 | 	sub	fp, #24
28c58     97 9E 48 FB | 	callpa	#(@LR__3452-@LR__3447)>>2,fcache_load_ptr_
28c5c                 | LR__3447
28c5c     18 4E 05 F1 | 	add	fp, #24
28c60     A7 28 02 FB | 	rdlong	local02, fp
28c64     3C 4E 05 F1 | 	add	fp, #60
28c68     A7 2E 02 FB | 	rdlong	local05, fp
28c6c     54 4E 85 F1 | 	sub	fp, #84
28c70     17 29 52 F2 | 	cmps	local02, local05 wc
28c74     20 01 90 3D |  if_ae	jmp	#LR__3453
28c78     18 4E 05 F1 | 	add	fp, #24
28c7c     A7 30 02 FB | 	rdlong	local06, fp
28c80     18 4E 85 F1 | 	sub	fp, #24
28c84     00 30 56 F2 | 	cmps	local06, #0 wc
28c88     58 00 90 CD |  if_b	jmp	#LR__3448
28c8c     18 4E 05 F1 | 	add	fp, #24
28c90     A7 30 02 FB | 	rdlong	local06, fp
28c94     40 4E 05 F1 | 	add	fp, #64
28c98     A7 32 02 FB | 	rdlong	local07, fp
28c9c     58 4E 85 F1 | 	sub	fp, #88
28ca0     19 31 52 F2 | 	cmps	local06, local07 wc
28ca4     3C 00 90 3D |  if_ae	jmp	#LR__3448
28ca8     C0 4E 05 F1 | 	add	fp, #192
28cac     A7 34 02 FB | 	rdlong	local08, fp
28cb0     1A 33 02 F6 | 	mov	local07, local08
28cb4     01 32 06 F1 | 	add	local07, #1
28cb8     A7 32 62 FC | 	wrlong	local07, fp
28cbc     A8 4E 85 F1 | 	sub	fp, #168
28cc0     A7 32 02 FB | 	rdlong	local07, fp
28cc4     19 37 02 F6 | 	mov	local09, local07
28cc8     58 4E 05 F1 | 	add	fp, #88
28ccc     A7 38 02 F6 | 	mov	local10, fp
28cd0     A7 36 02 F1 | 	add	local09, fp
28cd4     1B 3B C2 FA | 	rdbyte	local11, local09
28cd8     1A 3B 42 FC | 	wrbyte	local11, local08
28cdc     70 4E 85 F1 | 	sub	fp, #112
28ce0     20 00 90 FD | 	jmp	#LR__3449
28ce4                 | LR__3448
28ce4     C0 4E 05 F1 | 	add	fp, #192
28ce8     A7 34 02 FB | 	rdlong	local08, fp
28cec     1A 37 02 F6 | 	mov	local09, local08
28cf0     01 36 06 F1 | 	add	local09, #1
28cf4     A7 36 62 FC | 	wrlong	local09, fp
28cf8     C0 4E 85 F1 | 	sub	fp, #192
28cfc     30 36 06 F6 | 	mov	local09, #48
28d00     1A 61 48 FC | 	wrbyte	#48, local08
28d04                 | LR__3449
28d04     18 4E 05 F1 | 	add	fp, #24
28d08     A7 30 02 FB | 	rdlong	local06, fp
28d0c     38 4E 05 F1 | 	add	fp, #56
28d10     A7 3C 02 FB | 	rdlong	local12, fp
28d14     50 4E 85 F1 | 	sub	fp, #80
28d18     1E 31 0A F2 | 	cmp	local06, local12 wz
28d1c     5C 00 90 5D |  if_ne	jmp	#LR__3451
28d20     10 4F 05 F1 | 	add	fp, #272
28d24     A7 32 02 FB | 	rdlong	local07, fp
28d28     10 4F 85 F1 | 	sub	fp, #272
28d2c     19 37 0A F6 | 	mov	local09, local07 wz
28d30     28 00 90 5D |  if_ne	jmp	#LR__3450
28d34     54 4E 05 F1 | 	add	fp, #84
28d38     A7 3A 02 FB | 	rdlong	local11, fp
28d3c     1D 39 02 F6 | 	mov	local10, local11
28d40     01 38 86 F1 | 	sub	local10, #1
28d44     3C 4E 85 F1 | 	sub	fp, #60
28d48     A7 3E 02 FB | 	rdlong	local13, fp
28d4c     18 4E 85 F1 | 	sub	fp, #24
28d50     1F 41 02 F6 | 	mov	local14, local13
28d54     1C 41 52 F2 | 	cmps	local14, local10 wc
28d58     20 00 90 3D |  if_ae	jmp	#LR__3451
28d5c                 | LR__3450
28d5c     C0 4E 05 F1 | 	add	fp, #192
28d60     A7 34 02 FB | 	rdlong	local08, fp
28d64     1A 3D 02 F6 | 	mov	local12, local08
28d68     01 3C 06 F1 | 	add	local12, #1
28d6c     A7 3C 62 FC | 	wrlong	local12, fp
28d70     C0 4E 85 F1 | 	sub	fp, #192
28d74     2E 36 06 F6 | 	mov	local09, #46
28d78     1A 5D 48 FC | 	wrbyte	#46, local08
28d7c                 | LR__3451
28d7c     18 4E 05 F1 | 	add	fp, #24
28d80     A7 42 02 FB | 	rdlong	local15, fp
28d84     21 3D 02 F6 | 	mov	local12, local15
28d88     01 3C 06 F1 | 	add	local12, #1
28d8c     A7 3C 62 FC | 	wrlong	local12, fp
28d90     18 4E 85 F1 | 	sub	fp, #24
28d94     C4 FE 9F FD | 	jmp	#LR__3447
28d98                 | LR__3452
28d98                 | LR__3453
28d98     34 4E 05 F1 | 	add	fp, #52
28d9c     A7 26 0A FB | 	rdlong	local01, fp wz
28da0     34 4E 85 F1 | 	sub	fp, #52
28da4     A0 00 90 AD |  if_e	jmp	#LR__3457
28da8     C0 4E 05 F1 | 	add	fp, #192
28dac     A7 26 02 FB | 	rdlong	local01, fp
28db0     01 26 86 F1 | 	sub	local01, #1
28db4     A7 26 62 FC | 	wrlong	local01, fp
28db8     C0 4E 85 F1 | 	sub	fp, #192
28dbc     97 26 48 FB | 	callpa	#(@LR__3455-@LR__3454)>>2,fcache_load_ptr_
28dc0                 | LR__3454
28dc0     C0 4E 05 F1 | 	add	fp, #192
28dc4     A7 26 02 FB | 	rdlong	local01, fp
28dc8     04 4E 05 F1 | 	add	fp, #4
28dcc     A7 2A 02 FB | 	rdlong	local03, fp
28dd0     C4 4E 85 F1 | 	sub	fp, #196
28dd4     15 27 5A F2 | 	cmps	local01, local03 wcz
28dd8     30 00 90 ED |  if_be	jmp	#LR__3456
28ddc     C0 4E 05 F1 | 	add	fp, #192
28de0     A7 30 02 FB | 	rdlong	local06, fp
28de4     C0 4E 85 F1 | 	sub	fp, #192
28de8     18 2D C2 FA | 	rdbyte	local04, local06
28dec     30 2C 0E F2 | 	cmp	local04, #48 wz
28df0     18 00 90 5D |  if_ne	jmp	#LR__3456
28df4     C0 4E 05 F1 | 	add	fp, #192
28df8     A7 26 02 FB | 	rdlong	local01, fp
28dfc     01 26 86 F1 | 	sub	local01, #1
28e00     A7 26 62 FC | 	wrlong	local01, fp
28e04     C0 4E 85 F1 | 	sub	fp, #192
28e08     B4 FF 9F FD | 	jmp	#LR__3454
28e0c                 | LR__3455
28e0c                 | LR__3456
28e0c     C0 4E 05 F1 | 	add	fp, #192
28e10     A7 28 02 FB | 	rdlong	local02, fp
28e14     C0 4E 85 F1 | 	sub	fp, #192
28e18     14 27 C2 FA | 	rdbyte	local01, local02
28e1c     2E 26 0E F2 | 	cmp	local01, #46 wz
28e20     C0 4E 05 A1 |  if_e	add	fp, #192
28e24     A7 26 02 AB |  if_e	rdlong	local01, fp
28e28     01 26 86 A1 |  if_e	sub	local01, #1
28e2c     A7 26 62 AC |  if_e	wrlong	local01, fp
28e30     C0 4E 85 A1 |  if_e	sub	fp, #192
28e34     C0 4E 05 F1 | 	add	fp, #192
28e38     A7 2A 02 FB | 	rdlong	local03, fp
28e3c     01 2A 06 F1 | 	add	local03, #1
28e40     A7 2A 62 FC | 	wrlong	local03, fp
28e44     C0 4E 85 F1 | 	sub	fp, #192
28e48                 | LR__3457
28e48     24 4E 05 F1 | 	add	fp, #36
28e4c     A7 26 0A FB | 	rdlong	local01, fp wz
28e50     24 4E 85 F1 | 	sub	fp, #36
28e54     B4 00 90 AD |  if_e	jmp	#LR__3460
28e58     C0 4E 05 F1 | 	add	fp, #192
28e5c     A7 28 02 FB | 	rdlong	local02, fp
28e60     14 2B 02 F6 | 	mov	local03, local02
28e64     01 2A 06 F1 | 	add	local03, #1
28e68     A7 2A 62 FC | 	wrlong	local03, fp
28e6c     90 4E 85 F1 | 	sub	fp, #144
28e70     A7 2C 02 FB | 	rdlong	local04, fp
28e74     14 2D 42 FC | 	wrbyte	local04, local02
28e78     90 4E 05 F1 | 	add	fp, #144
28e7c     A7 28 02 FB | 	rdlong	local02, fp
28e80     14 2B 02 F6 | 	mov	local03, local02
28e84     01 2A 06 F1 | 	add	local03, #1
28e88     A7 2A 62 FC | 	wrlong	local03, fp
28e8c     60 4E 85 F1 | 	sub	fp, #96
28e90     A7 2C 02 FB | 	rdlong	local04, fp
28e94     14 2D 42 FC | 	wrbyte	local04, local02
28e98     48 4E 85 F1 | 	sub	fp, #72
28e9c     A7 00 68 FC | 	wrlong	#0, fp
28ea0     18 4E 85 F1 | 	sub	fp, #24
28ea4                 | LR__3458
28ea4     18 4E 05 F1 | 	add	fp, #24
28ea8     A7 28 02 FB | 	rdlong	local02, fp
28eac     44 4E 05 F1 | 	add	fp, #68
28eb0     A7 2E 02 FB | 	rdlong	local05, fp
28eb4     5C 4E 85 F1 | 	sub	fp, #92
28eb8     17 29 52 F2 | 	cmps	local02, local05 wc
28ebc     4C 00 90 3D |  if_ae	jmp	#LR__3459
28ec0     C0 4E 05 F1 | 	add	fp, #192
28ec4     A7 34 02 FB | 	rdlong	local08, fp
28ec8     1A 3D 02 F6 | 	mov	local12, local08
28ecc     01 3C 06 F1 | 	add	local12, #1
28ed0     A7 3C 62 FC | 	wrlong	local12, fp
28ed4     A8 4E 85 F1 | 	sub	fp, #168
28ed8     A7 32 02 FB | 	rdlong	local07, fp
28edc     19 37 02 F6 | 	mov	local09, local07
28ee0     98 4E 05 F1 | 	add	fp, #152
28ee4     A7 38 02 F6 | 	mov	local10, fp
28ee8     A7 36 02 F1 | 	add	local09, fp
28eec     1B 3B C2 FA | 	rdbyte	local11, local09
28ef0     1A 3B 42 FC | 	wrbyte	local11, local08
28ef4     98 4E 85 F1 | 	sub	fp, #152
28ef8     A7 3C 02 FB | 	rdlong	local12, fp
28efc     01 3C 06 F1 | 	add	local12, #1
28f00     A7 3C 62 FC | 	wrlong	local12, fp
28f04     18 4E 85 F1 | 	sub	fp, #24
28f08     98 FF 9F FD | 	jmp	#LR__3458
28f0c                 | LR__3459
28f0c                 | LR__3460
28f0c     C0 4E 05 F1 | 	add	fp, #192
28f10     A7 26 02 FB | 	rdlong	local01, fp
28f14     C0 4E 85 F1 | 	sub	fp, #192
28f18     13 01 48 FC | 	wrbyte	#0, local01
28f1c                 | LR__3461
28f1c     6C 4E 05 F1 | 	add	fp, #108
28f20     A7 26 0A FB | 	rdlong	local01, fp wz
28f24     6C 4E 85 F1 | 	sub	fp, #108
28f28     90 01 90 AD |  if_e	jmp	#LR__3472
28f2c     48 4E 05 F1 | 	add	fp, #72
28f30     A7 2A 0A FB | 	rdlong	local03, fp wz
28f34     48 4E 85 F1 | 	sub	fp, #72
28f38     80 01 90 AD |  if_e	jmp	#LR__3472
28f3c     C4 4E 05 F1 | 	add	fp, #196
28f40     A7 12 02 FB | 	rdlong	arg01, fp
28f44     C4 4E 85 F1 | 	sub	fp, #196
28f48     09 45 02 F6 | 	mov	local16, arg01
28f4c     97 06 48 FB | 	callpa	#(@LR__3463-@LR__3462)>>2,fcache_load_ptr_
28f50                 | LR__3462
28f50     22 FB C9 FA | 	rdbyte	result1, local16 wz
28f54     01 44 06 51 |  if_ne	add	local16, #1
28f58     F4 FF 9F 5D |  if_ne	jmp	#LR__3462
28f5c                 | LR__3463
28f5c     09 45 82 F1 | 	sub	local16, arg01
28f60     22 2D 02 F6 | 	mov	local04, local16
28f64     6C 4E 05 F1 | 	add	fp, #108
28f68     A7 30 02 FB | 	rdlong	local06, fp
28f6c     6C 4E 85 F1 | 	sub	fp, #108
28f70     18 2D 5A F2 | 	cmps	local04, local06 wcz
28f74     44 01 90 ED |  if_be	jmp	#LR__3472
28f78     C4 4E 05 F1 | 	add	fp, #196
28f7c     A7 26 02 FB | 	rdlong	local01, fp
28f80     5C 4E 05 F1 | 	add	fp, #92
28f84     A7 26 62 FC | 	wrlong	local01, fp
28f88     FC 4E 85 F1 | 	sub	fp, #252
28f8c     A7 26 0A FB | 	rdlong	local01, fp wz
28f90     24 4E 85 F1 | 	sub	fp, #36
28f94     20 00 90 AD |  if_e	jmp	#LR__3464
28f98     B8 4E 05 F1 | 	add	fp, #184
28f9c     A7 00 68 FC | 	wrlong	#0, fp
28fa0     4C 4E 85 F1 | 	sub	fp, #76
28fa4     A7 26 02 FB | 	rdlong	local01, fp
28fa8     B0 4E 05 F1 | 	add	fp, #176
28fac     A7 26 62 FC | 	wrlong	local01, fp
28fb0     1C 4F 85 F1 | 	sub	fp, #284
28fb4     24 00 90 FD | 	jmp	#LR__3465
28fb8                 | LR__3464
28fb8     6C 4E 05 F1 | 	add	fp, #108
28fbc     A7 26 02 FB | 	rdlong	local01, fp
28fc0     01 26 86 F1 | 	sub	local01, #1
28fc4     4C 4E 05 F1 | 	add	fp, #76
28fc8     A7 2A 02 FB | 	rdlong	local03, fp
28fcc     15 27 82 F1 | 	sub	local01, local03
28fd0     64 4E 05 F1 | 	add	fp, #100
28fd4     A7 26 62 FC | 	wrlong	local01, fp
28fd8     1C 4F 85 F1 | 	sub	fp, #284
28fdc                 | LR__3465
28fdc     97 20 48 FB | 	callpa	#(@LR__3467-@LR__3466)>>2,fcache_load_ptr_
28fe0                 | LR__3466
28fe0     1C 4F 05 F1 | 	add	fp, #284
28fe4     A7 26 0A FB | 	rdlong	local01, fp wz
28fe8     1C 4F 85 F1 | 	sub	fp, #284
28fec     30 00 90 AD |  if_e	jmp	#LR__3468
28ff0     20 4F 05 F1 | 	add	fp, #288
28ff4     A7 28 02 FB | 	rdlong	local02, fp
28ff8     14 2B 02 F6 | 	mov	local03, local02
28ffc     01 2A 06 F1 | 	add	local03, #1
29000     A7 2A 62 FC | 	wrlong	local03, fp
29004     14 55 48 FC | 	wrbyte	#42, local02
29008     04 4E 85 F1 | 	sub	fp, #4
2900c     A7 26 02 FB | 	rdlong	local01, fp
29010     01 26 86 F1 | 	sub	local01, #1
29014     A7 26 62 FC | 	wrlong	local01, fp
29018     1C 4F 85 F1 | 	sub	fp, #284
2901c     C0 FF 9F FD | 	jmp	#LR__3466
29020                 | LR__3467
29020                 | LR__3468
29020     B8 4E 05 F1 | 	add	fp, #184
29024     A7 26 0A FB | 	rdlong	local01, fp wz
29028     B8 4E 85 F1 | 	sub	fp, #184
2902c     70 00 90 AD |  if_e	jmp	#LR__3471
29030     20 4F 05 F1 | 	add	fp, #288
29034     A7 28 02 FB | 	rdlong	local02, fp
29038     14 2B 02 F6 | 	mov	local03, local02
2903c     01 2A 06 F1 | 	add	local03, #1
29040     A7 2A 62 FC | 	wrlong	local03, fp
29044     14 5D 48 FC | 	wrbyte	#46, local02
29048     04 4E 85 F1 | 	sub	fp, #4
2904c     A7 00 68 FC | 	wrlong	#0, fp
29050     1C 4F 85 F1 | 	sub	fp, #284
29054                 | LR__3469
29054     1C 4F 05 F1 | 	add	fp, #284
29058     A7 28 02 FB | 	rdlong	local02, fp
2905c     64 4E 85 F1 | 	sub	fp, #100
29060     A7 2E 02 FB | 	rdlong	local05, fp
29064     B8 4E 85 F1 | 	sub	fp, #184
29068     17 29 52 F2 | 	cmps	local02, local05 wc
2906c     30 00 90 3D |  if_ae	jmp	#LR__3470
29070     20 4F 05 F1 | 	add	fp, #288
29074     A7 34 02 FB | 	rdlong	local08, fp
29078     1A 3D 02 F6 | 	mov	local12, local08
2907c     01 3C 06 F1 | 	add	local12, #1
29080     A7 3C 62 FC | 	wrlong	local12, fp
29084     1A 55 48 FC | 	wrbyte	#42, local08
29088     04 4E 85 F1 | 	sub	fp, #4
2908c     A7 3C 02 FB | 	rdlong	local12, fp
29090     01 3C 06 F1 | 	add	local12, #1
29094     A7 3C 62 FC | 	wrlong	local12, fp
29098     1C 4F 85 F1 | 	sub	fp, #284
2909c     B4 FF 9F FD | 	jmp	#LR__3469
290a0                 | LR__3470
290a0                 | LR__3471
290a0     20 4F 05 F1 | 	add	fp, #288
290a4     A7 28 02 FB | 	rdlong	local02, fp
290a8     14 2B 02 F6 | 	mov	local03, local02
290ac     01 2A 06 F1 | 	add	local03, #1
290b0     A7 2A 62 FC | 	wrlong	local03, fp
290b4     20 4F 85 F1 | 	sub	fp, #288
290b8     14 01 48 FC | 	wrbyte	#0, local02
290bc                 | LR__3472
290bc     04 4E 05 F1 | 	add	fp, #4
290c0     A7 12 02 FB | 	rdlong	arg01, fp
290c4     04 4E 05 F1 | 	add	fp, #4
290c8     A7 14 02 FB | 	rdlong	arg02, fp
290cc     BC 4E 05 F1 | 	add	fp, #188
290d0     A7 16 02 FB | 	rdlong	arg03, fp
290d4     C4 4E 85 F1 | 	sub	fp, #196
290d8     C4 EE BF FD | 	call	#__system___fmtstr
290dc                 | LR__3473
290dc     A7 F0 03 F6 | 	mov	ptra, fp
290e0     B2 00 A0 FD | 	call	#popregs_
290e4                 | __system___fmtfloat_ret
290e4     2D 00 64 FD | 	ret
290e8                 | 
290e8                 | __system__Left_S
290e8     04 4A 05 F6 | 	mov	COUNT_, #4
290ec     A8 00 A0 FD | 	call	#pushregs_
290f0     09 27 02 F6 | 	mov	local01, arg01
290f4     0A 29 02 F6 | 	mov	local02, arg02
290f8     01 28 56 F2 | 	cmps	local02, #1 wc
290fc     B5 01 00 CF 
29100     7E FB 05 C6 |  if_b	mov	result1, ##@LR__5423
29104     5C 00 90 CD |  if_b	jmp	#LR__3483
29108     13 13 02 F6 | 	mov	arg01, local01
2910c     09 2B 02 F6 | 	mov	local03, arg01
29110     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
29114                 | LR__3480
29114     15 FB C9 FA | 	rdbyte	result1, local03 wz
29118     01 2A 06 51 |  if_ne	add	local03, #1
2911c     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
29120                 | LR__3481
29120     09 2B 82 F1 | 	sub	local03, arg01
29124     15 FB 01 F6 | 	mov	result1, local03
29128     14 FB 59 F2 | 	cmps	result1, local02 wcz
2912c     13 FB 01 E6 |  if_be	mov	result1, local01
29130     30 00 90 ED |  if_be	jmp	#LR__3483
29134     14 13 02 F6 | 	mov	arg01, local02
29138     02 12 06 F1 | 	add	arg01, #2
2913c     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
29140     FD 2C 0A F6 | 	mov	local04, result1 wz
29144     18 00 90 AD |  if_e	jmp	#LR__3482
29148     16 13 02 F6 | 	mov	arg01, local04
2914c     13 15 02 F6 | 	mov	arg02, local01
29150     14 17 02 F6 | 	mov	arg03, local02
29154     C4 DD BF FD | 	call	#__system____builtin_memmove
29158     16 29 02 F1 | 	add	local02, local04
2915c     14 01 48 FC | 	wrbyte	#0, local02
29160                 | LR__3482
29160     16 FB 01 F6 | 	mov	result1, local04
29164                 | LR__3483
29164     A7 F0 03 F6 | 	mov	ptra, fp
29168     B2 00 A0 FD | 	call	#popregs_
2916c                 | __system__Left_S_ret
2916c     2D 00 64 FD | 	ret
29170                 | 
29170                 | __system__Right_S
29170     05 4A 05 F6 | 	mov	COUNT_, #5
29174     A8 00 A0 FD | 	call	#pushregs_
29178     09 27 02 F6 | 	mov	local01, arg01
2917c     0A 29 02 F6 | 	mov	local02, arg02
29180     01 28 56 F2 | 	cmps	local02, #1 wc
29184     B5 01 00 CF 
29188     7F FB 05 C6 |  if_b	mov	result1, ##@LR__5424
2918c     64 00 90 CD |  if_b	jmp	#LR__3493
29190     13 13 02 F6 | 	mov	arg01, local01
29194     09 2B 02 F6 | 	mov	local03, arg01
29198     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
2919c                 | LR__3490
2919c     15 FB C9 FA | 	rdbyte	result1, local03 wz
291a0     01 2A 06 51 |  if_ne	add	local03, #1
291a4     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
291a8                 | LR__3491
291a8     09 2B 82 F1 | 	sub	local03, arg01
291ac     15 FB 01 F6 | 	mov	result1, local03
291b0     FD 2C 02 F6 | 	mov	local04, result1
291b4     14 2D 5A F2 | 	cmps	local04, local02 wcz
291b8     13 FB 01 E6 |  if_be	mov	result1, local01
291bc     34 00 90 ED |  if_be	jmp	#LR__3493
291c0     14 13 02 F6 | 	mov	arg01, local02
291c4     02 12 06 F1 | 	add	arg01, #2
291c8     40 20 B0 FD | 	call	#__system___gc_alloc_managed
291cc     FD 2E 0A F6 | 	mov	local05, result1 wz
291d0     1C 00 90 AD |  if_e	jmp	#LR__3492
291d4     14 2D 82 F1 | 	sub	local04, local02
291d8     13 2D 02 F1 | 	add	local04, local01
291dc     01 28 06 F1 | 	add	local02, #1
291e0     17 13 02 F6 | 	mov	arg01, local05
291e4     16 15 02 F6 | 	mov	arg02, local04
291e8     14 17 02 F6 | 	mov	arg03, local02
291ec     2C DD BF FD | 	call	#__system____builtin_memmove
291f0                 | LR__3492
291f0     17 FB 01 F6 | 	mov	result1, local05
291f4                 | LR__3493
291f4     A7 F0 03 F6 | 	mov	ptra, fp
291f8     B2 00 A0 FD | 	call	#popregs_
291fc                 | __system__Right_S_ret
291fc     2D 00 64 FD | 	ret
29200                 | 
29200                 | __system__Mid_S
29200     05 4A 05 F6 | 	mov	COUNT_, #5
29204     A8 00 A0 FD | 	call	#pushregs_
29208     09 27 02 F6 | 	mov	local01, arg01
2920c     0A 29 02 F6 | 	mov	local02, arg02
29210     01 16 56 F2 | 	cmps	arg03, #1 wc
29214     B5 01 00 CF 
29218     80 FB 05 C6 |  if_b	mov	result1, ##@LR__5425
2921c     80 00 90 CD |  if_b	jmp	#LR__3503
29220     01 28 86 F1 | 	sub	local02, #1
29224     00 28 56 F3 | 	fges	local02, #0 wc
29228     13 13 02 F6 | 	mov	arg01, local01
2922c     09 2B 02 F6 | 	mov	local03, arg01
29230     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
29234                 | LR__3500
29234     15 FB C9 FA | 	rdbyte	result1, local03 wz
29238     01 2A 06 51 |  if_ne	add	local03, #1
2923c     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
29240                 | LR__3501
29240     09 2B 82 F1 | 	sub	local03, arg01
29244     15 FB 01 F6 | 	mov	result1, local03
29248     FD 14 02 F6 | 	mov	arg02, result1
2924c     14 15 52 F2 | 	cmps	arg02, local02 wc
29250     B5 01 00 CF 
29254     81 FB 05 C6 |  if_b	mov	result1, ##@LR__5426
29258     44 00 90 CD |  if_b	jmp	#LR__3503
2925c     0A 2D 02 F6 | 	mov	local04, arg02
29260     14 2D 82 F1 | 	sub	local04, local02
29264     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
29268     0B 2D 02 16 |  if_a	mov	local04, arg03
2926c     16 13 02 F6 | 	mov	arg01, local04
29270     02 12 06 F1 | 	add	arg01, #2
29274     94 1F B0 FD | 	call	#__system___gc_alloc_managed
29278     FD 2E 0A F6 | 	mov	local05, result1 wz
2927c     1C 00 90 AD |  if_e	jmp	#LR__3502
29280     13 29 02 F1 | 	add	local02, local01
29284     17 13 02 F6 | 	mov	arg01, local05
29288     14 15 02 F6 | 	mov	arg02, local02
2928c     16 17 02 F6 | 	mov	arg03, local04
29290     88 DC BF FD | 	call	#__system____builtin_memmove
29294     17 2D 02 F1 | 	add	local04, local05
29298     16 01 48 FC | 	wrbyte	#0, local04
2929c                 | LR__3502
2929c     17 FB 01 F6 | 	mov	result1, local05
292a0                 | LR__3503
292a0     A7 F0 03 F6 | 	mov	ptra, fp
292a4     B2 00 A0 FD | 	call	#popregs_
292a8                 | __system__Mid_S_ret
292a8     2D 00 64 FD | 	ret
292ac                 | 
292ac                 | __system__Chr_S
292ac     01 4A 05 F6 | 	mov	COUNT_, #1
292b0     A8 00 A0 FD | 	call	#pushregs_
292b4     09 27 02 F6 | 	mov	local01, arg01
292b8     03 12 06 F6 | 	mov	arg01, #3
292bc     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
292c0     00 FA 4D F2 | 	cmps	result1, #0 wz
292c4     FD 26 42 5C |  if_ne	wrbyte	local01, result1
292c8     01 FA 05 51 |  if_ne	add	result1, #1
292cc     FD 00 48 5C |  if_ne	wrbyte	#0, result1
292d0     01 FA 85 51 |  if_ne	sub	result1, #1
292d4     A7 F0 03 F6 | 	mov	ptra, fp
292d8     B2 00 A0 FD | 	call	#popregs_
292dc                 | __system__Chr_S_ret
292dc     2D 00 64 FD | 	ret
292e0                 | 
292e0                 | __system__str_S
292e0     02 4A 05 F6 | 	mov	COUNT_, #2
292e4     A8 00 A0 FD | 	call	#pushregs_
292e8     09 27 02 F6 | 	mov	local01, arg01
292ec     10 12 06 F6 | 	mov	arg01, #16
292f0     18 1F B0 FD | 	call	#__system___gc_alloc_managed
292f4     FD 28 0A F6 | 	mov	local02, result1 wz
292f8     30 00 90 AD |  if_e	jmp	#LR__3510
292fc     F8 13 02 F6 | 	mov	arg01, ptra
29300     08 F0 07 F1 | 	add	ptra, #8
29304     09 29 62 FC | 	wrlong	local02, arg01
29308     04 12 06 F1 | 	add	arg01, #4
2930c     09 01 68 FC | 	wrlong	#0, arg01
29310     04 12 86 F1 | 	sub	arg01, #4
29314     00 60 05 FF 
29318     00 12 46 F5 | 	or	arg01, ##180355072
2931c     00 14 06 F6 | 	mov	arg02, #0
29320     13 17 02 F6 | 	mov	arg03, local01
29324     67 18 06 F6 | 	mov	arg04, #103
29328     90 EE BF FD | 	call	#__system___fmtfloat
2932c                 | LR__3510
2932c     14 FB 01 F6 | 	mov	result1, local02
29330     A7 F0 03 F6 | 	mov	ptra, fp
29334     B2 00 A0 FD | 	call	#popregs_
29338                 | __system__str_S_ret
29338     2D 00 64 FD | 	ret
2933c                 | 
2933c                 | __system__Number_S
2933c     08 4A 05 F6 | 	mov	COUNT_, #8
29340     A8 00 A0 FD | 	call	#pushregs_
29344     09 27 02 F6 | 	mov	local01, arg01
29348     0A 29 0A F6 | 	mov	local02, arg02 wz
2934c     0B 2B 02 F6 | 	mov	local03, arg03
29350     3C 00 90 5D |  if_ne	jmp	#LR__3522
29354     01 28 06 F6 | 	mov	local02, #1
29358     15 2D 02 F6 | 	mov	local04, local03
2935c     01 2E 06 F6 | 	mov	local05, #1
29360     97 16 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
29364                 | LR__3520
29364     00 30 06 F6 | 	mov	local06, #0
29368     13 2D 1A F2 | 	cmp	local04, local01 wcz
2936c     01 30 66 E6 |  if_be	neg	local06, #1
29370     16 2F 12 F2 | 	cmp	local05, local04 wc
29374     19 33 A2 F1 | 	subx	local07, local07
29378     19 31 CA F7 | 	test	local06, local07 wz
2937c     15 2D 02 5D |  if_ne	qmul	local04, local03
29380     16 2F 02 56 |  if_ne	mov	local05, local04
29384     01 28 06 51 |  if_ne	add	local02, #1
29388     18 2C 62 5D |  if_ne	getqx	local04
2938c     D4 FF 9F 5D |  if_ne	jmp	#LR__3520
29390                 | LR__3521
29390                 | LR__3522
29390     20 28 36 F3 | 	fle	local02, #32 wc
29394     14 13 02 F6 | 	mov	arg01, local02
29398     02 12 06 F1 | 	add	arg01, #2
2939c     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
293a0     FD 30 02 F6 | 	mov	local06, result1
293a4     14 33 02 F6 | 	mov	local07, local02
293a8     18 33 02 F1 | 	add	local07, local06
293ac     19 01 48 FC | 	wrbyte	#0, local07
293b0     97 1A 48 FB | 	callpa	#(@LR__3524-@LR__3523)>>2,fcache_load_ptr_
293b4                 | LR__3523
293b4     01 28 16 F2 | 	cmp	local02, #1 wc
293b8     2C 00 90 CD |  if_b	jmp	#LR__3525
293bc     15 27 12 FD | 	qdiv	local01, local03
293c0     01 28 86 F1 | 	sub	local02, #1
293c4     14 33 02 F6 | 	mov	local07, local02
293c8     18 33 02 F1 | 	add	local07, local06
293cc     19 34 62 FD | 	getqy	local08
293d0     0A 34 16 F2 | 	cmp	local08, #10 wc
293d4     30 34 06 C1 |  if_b	add	local08, #48
293d8     37 34 06 31 |  if_ae	add	local08, #55
293dc     19 35 42 FC | 	wrbyte	local08, local07
293e0     18 26 62 FD | 	getqx	local01
293e4     CC FF 9F FD | 	jmp	#LR__3523
293e8                 | LR__3524
293e8                 | LR__3525
293e8     18 FB 01 F6 | 	mov	result1, local06
293ec     A7 F0 03 F6 | 	mov	ptra, fp
293f0     B2 00 A0 FD | 	call	#popregs_
293f4                 | __system__Number_S_ret
293f4     2D 00 64 FD | 	ret
293f8                 | 
293f8                 | __system__LCase_S
293f8     07 4A 05 F6 | 	mov	COUNT_, #7
293fc     A8 00 A0 FD | 	call	#pushregs_
29400     09 27 02 F6 | 	mov	local01, arg01
29404     09 29 02 F6 | 	mov	local02, arg01
29408     97 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
2940c                 | LR__3530
2940c     14 FB C9 FA | 	rdbyte	result1, local02 wz
29410     01 28 06 51 |  if_ne	add	local02, #1
29414     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
29418                 | LR__3531
29418     09 29 82 F1 | 	sub	local02, arg01
2941c     14 FB 01 F6 | 	mov	result1, local02
29420     FD 28 0A F6 | 	mov	local02, result1 wz
29424     B5 01 00 AF 
29428     82 FB 05 A6 |  if_e	mov	result1, ##@LR__5427
2942c     7C 00 90 AD |  if_e	jmp	#LR__3537
29430     14 13 02 F6 | 	mov	arg01, local02
29434     02 12 06 F1 | 	add	arg01, #2
29438     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
2943c     FD 2A 0A F6 | 	mov	local03, result1 wz
29440     64 00 90 AD |  if_e	jmp	#LR__3536
29444     01 2C 66 F6 | 	neg	local04, #1
29448     97 26 48 FB | 	callpa	#(@LR__3535-@LR__3532)>>2,fcache_load_ptr_
2944c                 | LR__3532
2944c     01 2C 06 F1 | 	add	local04, #1
29450     16 2F 02 F6 | 	mov	local05, local04
29454     13 2F 02 F1 | 	add	local05, local01
29458     17 31 C2 FA | 	rdbyte	local06, local05
2945c     41 30 56 F2 | 	cmps	local06, #65 wc
29460     18 00 90 CD |  if_b	jmp	#LR__3533
29464     5B 30 56 F2 | 	cmps	local06, #91 wc
29468     16 33 02 C6 |  if_b	mov	local07, local04
2946c     15 33 02 C1 |  if_b	add	local07, local03
29470     20 30 06 C1 |  if_b	add	local06, #32
29474     19 31 42 CC |  if_b	wrbyte	local06, local07
29478     0C 00 90 CD |  if_b	jmp	#LR__3534
2947c                 | LR__3533
2947c     16 33 02 F6 | 	mov	local07, local04
29480     15 33 02 F1 | 	add	local07, local03
29484     19 31 42 FC | 	wrbyte	local06, local07
29488                 | LR__3534
29488     14 31 02 F6 | 	mov	local06, local02
2948c     01 30 86 F1 | 	sub	local06, #1
29490     18 2D 0A F2 | 	cmp	local04, local06 wz
29494     B4 FF 9F 5D |  if_ne	jmp	#LR__3532
29498                 | LR__3535
29498     15 29 02 F1 | 	add	local02, local03
2949c     14 01 48 FC | 	wrbyte	#0, local02
294a0     15 FB 01 F6 | 	mov	result1, local03
294a4     04 00 90 FD | 	jmp	#LR__3537
294a8                 | LR__3536
294a8     15 FB 01 F6 | 	mov	result1, local03
294ac                 | LR__3537
294ac     A7 F0 03 F6 | 	mov	ptra, fp
294b0     B2 00 A0 FD | 	call	#popregs_
294b4                 | __system__LCase_S_ret
294b4     2D 00 64 FD | 	ret
294b8                 | 
294b8                 | __system__LTrim_S
294b8     05 4A 05 F6 | 	mov	COUNT_, #5
294bc     A8 00 A0 FD | 	call	#pushregs_
294c0     09 27 02 F6 | 	mov	local01, arg01
294c4     09 29 02 F6 | 	mov	local02, arg01
294c8     97 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
294cc                 | LR__3540
294cc     14 FB C9 FA | 	rdbyte	result1, local02 wz
294d0     01 28 06 51 |  if_ne	add	local02, #1
294d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
294d8                 | LR__3541
294d8     09 29 82 F1 | 	sub	local02, arg01
294dc     14 FB 01 F6 | 	mov	result1, local02
294e0     FD 28 0A F6 | 	mov	local02, result1 wz
294e4     B5 01 00 AF 
294e8     83 FB 05 A6 |  if_e	mov	result1, ##@LR__5428
294ec     7C 00 90 AD |  if_e	jmp	#LR__3546
294f0     00 2A 06 F6 | 	mov	local03, #0
294f4     14 2D 02 F6 | 	mov	local04, local02
294f8                 | LR__3542
294f8     16 2B 52 F2 | 	cmps	local03, local04 wc
294fc     68 00 90 3D |  if_ae	jmp	#LR__3545
29500     15 17 02 F6 | 	mov	arg03, local03
29504     13 17 02 F1 | 	add	arg03, local01
29508     0B 17 C2 FA | 	rdbyte	arg03, arg03
2950c     20 16 0E F2 | 	cmp	arg03, #32 wz
29510     4C 00 90 AD |  if_e	jmp	#LR__3544
29514     14 13 02 F6 | 	mov	arg01, local02
29518     15 13 82 F1 | 	sub	arg01, local03
2951c     02 12 06 F1 | 	add	arg01, #2
29520     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
29524     FD 2E 0A F6 | 	mov	local05, result1 wz
29528     2C 00 90 AD |  if_e	jmp	#LR__3543
2952c     15 15 02 F6 | 	mov	arg02, local03
29530     13 15 02 F1 | 	add	arg02, local01
29534     14 17 02 F6 | 	mov	arg03, local02
29538     15 17 82 F1 | 	sub	arg03, local03
2953c     17 13 02 F6 | 	mov	arg01, local05
29540     D8 D9 BF FD | 	call	#__system____builtin_memmove
29544     15 29 82 F1 | 	sub	local02, local03
29548     17 29 02 F1 | 	add	local02, local05
2954c     14 01 48 FC | 	wrbyte	#0, local02
29550     17 FB 01 F6 | 	mov	result1, local05
29554     14 00 90 FD | 	jmp	#LR__3546
29558                 | LR__3543
29558     17 FB 01 F6 | 	mov	result1, local05
2955c     0C 00 90 FD | 	jmp	#LR__3546
29560                 | LR__3544
29560     01 2A 06 F1 | 	add	local03, #1
29564     90 FF 9F FD | 	jmp	#LR__3542
29568                 | LR__3545
29568     13 FB 01 F6 | 	mov	result1, local01
2956c                 | LR__3546
2956c     A7 F0 03 F6 | 	mov	ptra, fp
29570     B2 00 A0 FD | 	call	#popregs_
29574                 | __system__LTrim_S_ret
29574     2D 00 64 FD | 	ret
29578                 | 
29578                 | __system__RTrim_S
29578     04 4A 05 F6 | 	mov	COUNT_, #4
2957c     A8 00 A0 FD | 	call	#pushregs_
29580     09 27 02 F6 | 	mov	local01, arg01
29584     09 29 02 F6 | 	mov	local02, arg01
29588     97 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
2958c                 | LR__3550
2958c     14 FB C9 FA | 	rdbyte	result1, local02 wz
29590     01 28 06 51 |  if_ne	add	local02, #1
29594     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
29598                 | LR__3551
29598     09 29 82 F1 | 	sub	local02, arg01
2959c     14 FB 01 F6 | 	mov	result1, local02
295a0     FD 28 0A F6 | 	mov	local02, result1 wz
295a4     B5 01 00 AF 
295a8     84 FB 05 A6 |  if_e	mov	result1, ##@LR__5429
295ac     74 00 90 AD |  if_e	jmp	#LR__3555
295b0     14 2B 02 F6 | 	mov	local03, local02
295b4     01 2A 86 F1 | 	sub	local03, #1
295b8                 | LR__3552
295b8     15 15 02 F6 | 	mov	arg02, local03
295bc     13 15 02 F1 | 	add	arg02, local01
295c0     0A 29 C2 FA | 	rdbyte	local02, arg02
295c4     20 28 0E F2 | 	cmp	local02, #32 wz
295c8     44 00 90 AD |  if_e	jmp	#LR__3554
295cc     15 13 02 F6 | 	mov	arg01, local03
295d0     02 12 06 F1 | 	add	arg01, #2
295d4     34 1C B0 FD | 	call	#__system___gc_alloc_managed
295d8     FD 2C 0A F6 | 	mov	local04, result1 wz
295dc     28 00 90 AD |  if_e	jmp	#LR__3553
295e0     15 17 02 F6 | 	mov	arg03, local03
295e4     01 16 06 F1 | 	add	arg03, #1
295e8     16 13 02 F6 | 	mov	arg01, local04
295ec     13 15 02 F6 | 	mov	arg02, local01
295f0     28 D9 BF FD | 	call	#__system____builtin_memmove
295f4     01 2A 06 F1 | 	add	local03, #1
295f8     16 2B 02 F1 | 	add	local03, local04
295fc     15 01 48 FC | 	wrbyte	#0, local03
29600     16 FB 01 F6 | 	mov	result1, local04
29604     1C 00 90 FD | 	jmp	#LR__3555
29608                 | LR__3553
29608     16 FB 01 F6 | 	mov	result1, local04
2960c     14 00 90 FD | 	jmp	#LR__3555
29610                 | LR__3554
29610     01 2A 86 F1 | 	sub	local03, #1
29614     00 2A 56 F2 | 	cmps	local03, #0 wc
29618     9C FF 9F 3D |  if_ae	jmp	#LR__3552
2961c     B5 01 00 FF 
29620     85 FB 05 F6 | 	mov	result1, ##@LR__5430
29624                 | LR__3555
29624     A7 F0 03 F6 | 	mov	ptra, fp
29628     B2 00 A0 FD | 	call	#popregs_
2962c                 | __system__RTrim_S_ret
2962c     2D 00 64 FD | 	ret
29630                 | 
29630                 | __system__Instr
29630     07 4A 05 F6 | 	mov	COUNT_, #7
29634     A8 00 A0 FD | 	call	#pushregs_
29638     09 27 02 F6 | 	mov	local01, arg01
2963c     0A 29 02 F6 | 	mov	local02, arg02
29640     0B 2B 02 F6 | 	mov	local03, arg03
29644     15 13 02 F6 | 	mov	arg01, local03
29648     09 2D 02 F6 | 	mov	local04, arg01
2964c     97 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
29650                 | LR__3560
29650     16 FB C9 FA | 	rdbyte	result1, local04 wz
29654     01 2C 06 51 |  if_ne	add	local04, #1
29658     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
2965c                 | LR__3561
2965c     09 2D 82 F1 | 	sub	local04, arg01
29660     16 2F 02 F6 | 	mov	local05, local04
29664     14 13 02 F6 | 	mov	arg01, local02
29668     09 2D 02 F6 | 	mov	local04, arg01
2966c     97 06 48 FB | 	callpa	#(@LR__3563-@LR__3562)>>2,fcache_load_ptr_
29670                 | LR__3562
29670     16 FB C9 FA | 	rdbyte	result1, local04 wz
29674     01 2C 06 51 |  if_ne	add	local04, #1
29678     F4 FF 9F 5D |  if_ne	jmp	#LR__3562
2967c                 | LR__3563
2967c     09 2D 82 F1 | 	sub	local04, arg01
29680     16 FB 01 F6 | 	mov	result1, local04
29684     FD 18 0A F6 | 	mov	arg04, result1 wz
29688     00 FA 05 A6 |  if_e	mov	result1, #0
2968c     98 00 90 AD |  if_e	jmp	#LR__3567
29690     00 2E 0E F2 | 	cmp	local05, #0 wz
29694     00 FA 05 A6 |  if_e	mov	result1, #0
29698     8C 00 90 AD |  if_e	jmp	#LR__3567
2969c     0C 27 5A F2 | 	cmps	local01, arg04 wcz
296a0     00 FA 05 16 |  if_a	mov	result1, #0
296a4     80 00 90 1D |  if_a	jmp	#LR__3567
296a8     01 26 56 F2 | 	cmps	local01, #1 wc
296ac     01 26 06 C6 |  if_b	mov	local01, #1
296b0     15 31 C2 FA | 	rdbyte	local06, local03
296b4     01 2E 0E F2 | 	cmp	local05, #1 wz
296b8     18 00 90 5D |  if_ne	jmp	#LR__3564
296bc     14 13 02 F6 | 	mov	arg01, local02
296c0     18 15 02 F6 | 	mov	arg02, local06
296c4     13 17 02 F6 | 	mov	arg03, local01
296c8     00 18 06 F6 | 	mov	arg04, #0
296cc     14 37 B0 FD | 	call	#__system____ScanForChar
296d0     54 00 90 FD | 	jmp	#LR__3567
296d4                 | LR__3564
296d4     13 33 02 F6 | 	mov	local07, local01
296d8                 | LR__3565
296d8     14 13 02 F6 | 	mov	arg01, local02
296dc     18 15 02 F6 | 	mov	arg02, local06
296e0     19 17 02 F6 | 	mov	arg03, local07
296e4     00 18 06 F6 | 	mov	arg04, #0
296e8     F8 36 B0 FD | 	call	#__system____ScanForChar
296ec     FD 32 0A F6 | 	mov	local07, result1 wz
296f0     30 00 90 AD |  if_e	jmp	#LR__3566
296f4     17 17 02 F6 | 	mov	arg03, local05
296f8     14 13 02 F6 | 	mov	arg01, local02
296fc     19 15 02 F6 | 	mov	arg02, local07
29700     FC FA BF FD | 	call	#__system__Mid_S
29704     FD 12 02 F6 | 	mov	arg01, result1
29708     15 15 02 F6 | 	mov	arg02, local03
2970c     84 D9 BF FD | 	call	#__system___string_cmp
29710     00 FA 0D F2 | 	cmp	result1, #0 wz
29714     19 FB 01 A6 |  if_e	mov	result1, local07
29718     0C 00 90 AD |  if_e	jmp	#LR__3567
2971c     17 33 02 F1 | 	add	local07, local05
29720     B4 FF 9F FD | 	jmp	#LR__3565
29724                 | LR__3566
29724     00 FA 05 F6 | 	mov	result1, #0
29728                 | LR__3567
29728     A7 F0 03 F6 | 	mov	ptra, fp
2972c     B2 00 A0 FD | 	call	#popregs_
29730                 | __system__Instr_ret
29730     2D 00 64 FD | 	ret
29734                 | 
29734                 | __system__InstrRev
29734     07 4A 05 F6 | 	mov	COUNT_, #7
29738     A8 00 A0 FD | 	call	#pushregs_
2973c     09 27 02 F6 | 	mov	local01, arg01
29740     0A 29 02 F6 | 	mov	local02, arg02
29744     0B 2B 02 F6 | 	mov	local03, arg03
29748     15 13 02 F6 | 	mov	arg01, local03
2974c     09 2D 02 F6 | 	mov	local04, arg01
29750     97 06 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
29754                 | LR__3570
29754     16 FB C9 FA | 	rdbyte	result1, local04 wz
29758     01 2C 06 51 |  if_ne	add	local04, #1
2975c     F4 FF 9F 5D |  if_ne	jmp	#LR__3570
29760                 | LR__3571
29760     09 2D 82 F1 | 	sub	local04, arg01
29764     16 2F 02 F6 | 	mov	local05, local04
29768     14 13 02 F6 | 	mov	arg01, local02
2976c     09 2D 02 F6 | 	mov	local04, arg01
29770     97 06 48 FB | 	callpa	#(@LR__3573-@LR__3572)>>2,fcache_load_ptr_
29774                 | LR__3572
29774     16 FB C9 FA | 	rdbyte	result1, local04 wz
29778     01 2C 06 51 |  if_ne	add	local04, #1
2977c     F4 FF 9F 5D |  if_ne	jmp	#LR__3572
29780                 | LR__3573
29780     09 2D 82 F1 | 	sub	local04, arg01
29784     16 FB 01 F6 | 	mov	result1, local04
29788     FD 18 0A F6 | 	mov	arg04, result1 wz
2978c     00 FA 05 A6 |  if_e	mov	result1, #0
29790     98 00 90 AD |  if_e	jmp	#LR__3577
29794     00 2E 0E F2 | 	cmp	local05, #0 wz
29798     00 FA 05 A6 |  if_e	mov	result1, #0
2979c     8C 00 90 AD |  if_e	jmp	#LR__3577
297a0     0C 27 5A F2 | 	cmps	local01, arg04 wcz
297a4     0C 27 02 16 |  if_a	mov	local01, arg04
297a8     01 26 56 F2 | 	cmps	local01, #1 wc
297ac     01 26 06 C6 |  if_b	mov	local01, #1
297b0     15 31 C2 FA | 	rdbyte	local06, local03
297b4     01 2E 0E F2 | 	cmp	local05, #1 wz
297b8     18 00 90 5D |  if_ne	jmp	#LR__3574
297bc     14 13 02 F6 | 	mov	arg01, local02
297c0     18 15 02 F6 | 	mov	arg02, local06
297c4     13 17 02 F6 | 	mov	arg03, local01
297c8     01 18 06 F6 | 	mov	arg04, #1
297cc     14 36 B0 FD | 	call	#__system____ScanForChar
297d0     58 00 90 FD | 	jmp	#LR__3577
297d4                 | LR__3574
297d4     17 33 02 F6 | 	mov	local07, local05
297d8     01 32 86 F1 | 	sub	local07, #1
297dc                 | LR__3575
297dc     14 13 02 F6 | 	mov	arg01, local02
297e0     18 15 02 F6 | 	mov	arg02, local06
297e4     19 17 02 F6 | 	mov	arg03, local07
297e8     01 18 06 F6 | 	mov	arg04, #1
297ec     F4 35 B0 FD | 	call	#__system____ScanForChar
297f0     FD 32 0A F6 | 	mov	local07, result1 wz
297f4     30 00 90 AD |  if_e	jmp	#LR__3576
297f8     17 17 02 F6 | 	mov	arg03, local05
297fc     14 13 02 F6 | 	mov	arg01, local02
29800     19 15 02 F6 | 	mov	arg02, local07
29804     F8 F9 BF FD | 	call	#__system__Mid_S
29808     FD 12 02 F6 | 	mov	arg01, result1
2980c     15 15 02 F6 | 	mov	arg02, local03
29810     80 D8 BF FD | 	call	#__system___string_cmp
29814     00 FA 0D F2 | 	cmp	result1, #0 wz
29818     19 FB 01 A6 |  if_e	mov	result1, local07
2981c     0C 00 90 AD |  if_e	jmp	#LR__3577
29820     17 33 82 F1 | 	sub	local07, local05
29824     B4 FF 9F FD | 	jmp	#LR__3575
29828                 | LR__3576
29828     00 FA 05 F6 | 	mov	result1, #0
2982c                 | LR__3577
2982c     A7 F0 03 F6 | 	mov	ptra, fp
29830     B2 00 A0 FD | 	call	#popregs_
29834                 | __system__InstrRev_ret
29834     2D 00 64 FD | 	ret
29838                 | 
29838                 | __system___remove
29838     06 4A 05 F6 | 	mov	COUNT_, #6
2983c     A8 00 A0 FD | 	call	#pushregs_
29840     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29844     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
29848     09 15 02 F6 | 	mov	arg02, arg01
2984c     13 13 02 F6 | 	mov	arg01, local01
29850     00 16 06 F6 | 	mov	arg03, #0
29854     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29858     A8 DF BF FD | 	call	#__system____getvfsforfile
2985c     FD 28 0A F6 | 	mov	local02, result1 wz
29860     10 00 90 AD |  if_e	jmp	#LR__3580
29864     20 28 06 F1 | 	add	local02, #32
29868     14 13 0A FB | 	rdlong	arg01, local02 wz
2986c     20 28 86 F1 | 	sub	local02, #32
29870     14 00 90 5D |  if_ne	jmp	#LR__3581
29874                 | LR__3580
29874     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29878     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2987c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29880     01 FA 65 F6 | 	neg	result1, #1
29884     A8 00 90 FD | 	jmp	#LR__3584
29888                 | LR__3581
29888     40 28 06 F1 | 	add	local02, #64
2988c     14 2B 02 FB | 	rdlong	local03, local02
29890     15 2D 02 F6 | 	mov	local04, local03
29894     40 28 86 F1 | 	sub	local02, #64
29898     13 2C 46 F7 | 	zerox	local04, #19
2989c     14 2A 46 F0 | 	shr	local03, #20
298a0     02 2A 66 F0 | 	shl	local03, #2
298a4     ED 2A 02 F1 | 	add	local03, __methods__
298a8     15 2B 02 FB | 	rdlong	local03, local03
298ac     13 13 02 F6 | 	mov	arg01, local01
298b0     F2 2E 02 F6 | 	mov	local05, objptr
298b4     16 E5 01 F6 | 	mov	objptr, local04
298b8     2D 2A 62 FD | 	call	local03
298bc     17 E5 01 F6 | 	mov	objptr, local05
298c0     FD 30 02 F6 | 	mov	local06, result1
298c4     FF FF 7F FF 
298c8     F2 31 0E F2 | 	cmp	local06, ##-14 wz
298cc     38 00 90 5D |  if_ne	jmp	#LR__3582
298d0     3C 28 06 F1 | 	add	local02, #60
298d4     14 31 02 FB | 	rdlong	local06, local02
298d8     18 2B 02 F6 | 	mov	local03, local06
298dc     13 30 46 F7 | 	zerox	local06, #19
298e0     14 2A 46 F0 | 	shr	local03, #20
298e4     02 2A 66 F0 | 	shl	local03, #2
298e8     ED 2A 02 F1 | 	add	local03, __methods__
298ec     15 2B 02 FB | 	rdlong	local03, local03
298f0     13 13 02 F6 | 	mov	arg01, local01
298f4     F2 2E 02 F6 | 	mov	local05, objptr
298f8     18 E5 01 F6 | 	mov	objptr, local06
298fc     2D 2A 62 FD | 	call	local03
29900     17 E5 01 F6 | 	mov	objptr, local05
29904     FD 30 02 F6 | 	mov	local06, result1
29908                 | LR__3582
29908     00 30 0E F2 | 	cmp	local06, #0 wz
2990c     1C 00 90 AD |  if_e	jmp	#LR__3583
29910     18 13 6A F6 | 	neg	arg01, local06 wz
29914     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29918     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2991c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29920     01 FA 65 56 |  if_ne	neg	result1, #1
29924     00 FA 05 A6 |  if_e	mov	result1, #0
29928     04 00 90 FD | 	jmp	#LR__3584
2992c                 | LR__3583
2992c     00 FA 05 F6 | 	mov	result1, #0
29930                 | LR__3584
29930     A7 F0 03 F6 | 	mov	ptra, fp
29934     B2 00 A0 FD | 	call	#popregs_
29938                 | __system___remove_ret
29938     2D 00 64 FD | 	ret
2993c                 | 
2993c                 | __system___mkdir
2993c     05 4A 05 F6 | 	mov	COUNT_, #5
29940     A8 00 A0 FD | 	call	#pushregs_
29944     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29948     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2994c     09 15 02 F6 | 	mov	arg02, arg01
29950     13 13 02 F6 | 	mov	arg01, local01
29954     00 16 06 F6 | 	mov	arg03, #0
29958     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2995c     A4 DE BF FD | 	call	#__system____getvfsforfile
29960     FD 28 0A F6 | 	mov	local02, result1 wz
29964     10 00 90 AD |  if_e	jmp	#LR__3590
29968     20 28 06 F1 | 	add	local02, #32
2996c     14 15 0A FB | 	rdlong	arg02, local02 wz
29970     20 28 86 F1 | 	sub	local02, #32
29974     14 00 90 5D |  if_ne	jmp	#LR__3591
29978                 | LR__3590
29978     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2997c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29980     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29984     01 FA 65 F6 | 	neg	result1, #1
29988     60 00 90 FD | 	jmp	#LR__3593
2998c                 | LR__3591
2998c     38 28 06 F1 | 	add	local02, #56
29990     14 2B 02 FB | 	rdlong	local03, local02
29994     15 2D 02 F6 | 	mov	local04, local03
29998     13 2A 46 F7 | 	zerox	local03, #19
2999c     14 2C 46 F0 | 	shr	local04, #20
299a0     02 2C 66 F0 | 	shl	local04, #2
299a4     ED 2C 02 F1 | 	add	local04, __methods__
299a8     16 2D 02 FB | 	rdlong	local04, local04
299ac     13 13 02 F6 | 	mov	arg01, local01
299b0     FF 15 06 F6 | 	mov	arg02, #511
299b4     F2 2E 02 F6 | 	mov	local05, objptr
299b8     15 E5 01 F6 | 	mov	objptr, local03
299bc     2D 2C 62 FD | 	call	local04
299c0     17 E5 01 F6 | 	mov	objptr, local05
299c4     FD 12 0A F6 | 	mov	arg01, result1 wz
299c8     1C 00 90 AD |  if_e	jmp	#LR__3592
299cc     09 13 6A F6 | 	neg	arg01, arg01 wz
299d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
299d4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
299d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
299dc     01 FA 65 56 |  if_ne	neg	result1, #1
299e0     00 FA 05 A6 |  if_e	mov	result1, #0
299e4     04 00 90 FD | 	jmp	#LR__3593
299e8                 | LR__3592
299e8     00 FA 05 F6 | 	mov	result1, #0
299ec                 | LR__3593
299ec     A7 F0 03 F6 | 	mov	ptra, fp
299f0     B2 00 A0 FD | 	call	#popregs_
299f4                 | __system___mkdir_ret
299f4     2D 00 64 FD | 	ret
299f8                 | 
299f8                 | __system___strerror
299f8     00 12 56 F2 | 	cmps	arg01, #0 wc
299fc     08 00 90 CD |  if_b	jmp	#LR__3600
29a00     1A 12 56 F2 | 	cmps	arg01, #26 wc
29a04     04 00 90 CD |  if_b	jmp	#LR__3601
29a08                 | LR__3600
29a08     19 12 06 F6 | 	mov	arg01, #25
29a0c                 | LR__3601
29a0c     02 12 66 F0 | 	shl	arg01, #2
29a10     01 00 00 FF 
29a14     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
29a18     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29a1c     09 FB 01 FB | 	rdlong	result1, arg01
29a20     01 00 00 FF 
29a24     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
29a28                 | __system___strerror_ret
29a28     2D 00 64 FD | 	ret
29a2c                 | 
29a2c                 | __system___int64_shl
29a2c     20 16 CE F7 | 	test	arg03, #32 wz
29a30     09 15 02 56 |  if_ne	mov	arg02, arg01
29a34     00 12 06 56 |  if_ne	mov	arg01, #0
29a38     1F 16 CE F7 | 	test	arg03, #31 wz
29a3c     18 00 90 AD |  if_e	jmp	#LR__3610
29a40     0B 15 62 F0 | 	shl	arg02, arg03
29a44     09 FB 01 F6 | 	mov	result1, arg01
29a48     0B FD 61 F6 | 	neg	result2, arg03
29a4c     FE FA 41 F0 | 	shr	result1, result2
29a50     FD 14 42 F5 | 	or	arg02, result1
29a54     0B 13 62 F0 | 	shl	arg01, arg03
29a58                 | LR__3610
29a58     0A FD 01 F6 | 	mov	result2, arg02
29a5c     09 FB 01 F6 | 	mov	result1, arg01
29a60                 | __system___int64_shl_ret
29a60     2D 00 64 FD | 	ret
29a64                 | 
29a64                 | __system___usepins
29a64     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29a68     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29a6c     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
29a70     00 13 CA F7 | 	test	arg01, _var01 wz
29a74     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
29a78     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
29a7c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
29a80     01 15 CA A7 |  if_e	test	arg02, _var02 wz
29a84     00 FA 05 56 |  if_ne	mov	result1, #0
29a88     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
29a8c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29a90     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29a94     09 03 42 F5 | 	or	_var02, arg01
29a98     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29a9c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29aa0     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29aa4     0A 03 42 F5 | 	or	_var02, arg02
29aa8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29aac     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29ab0     01 FA 65 F6 | 	neg	result1, #1
29ab4                 | __system___usepins_ret
29ab4     2D 00 64 FD | 	ret
29ab8                 | 
29ab8                 | __system___freepins
29ab8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29abc     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29ac0     09 01 22 F5 | 	andn	_var01, arg01
29ac4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29ac8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29acc     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29ad0     0A 01 22 F5 | 	andn	_var01, arg02
29ad4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29ad8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29adc                 | __system___freepins_ret
29adc     2D 00 64 FD | 	ret
29ae0                 | 
29ae0                 | __system___float_fromuns
29ae0     09 17 0A F6 | 	mov	arg03, arg01 wz
29ae4     0B FB 01 A6 |  if_e	mov	result1, arg03
29ae8     24 00 90 AD |  if_e	jmp	#LR__3620
29aec     0B 15 92 F7 | 	encod	arg02, arg03 wc
29af0     01 14 06 C1 |  if_b	add	arg02, #1
29af4     01 14 86 F1 | 	sub	arg02, #1
29af8     1F 12 06 F6 | 	mov	arg01, #31
29afc     0A 13 82 F1 | 	sub	arg01, arg02
29b00     09 17 62 F0 | 	shl	arg03, arg01
29b04     02 16 46 F0 | 	shr	arg03, #2
29b08     00 12 06 F6 | 	mov	arg01, #0
29b0c     4C 09 B0 FD | 	call	#__system___float_Pack
29b10                 | LR__3620
29b10                 | __system___float_fromuns_ret
29b10     2D 00 64 FD | 	ret
29b14                 | 
29b14                 | __system___float_add
29b14     0F 4A 05 F6 | 	mov	COUNT_, #15
29b18     A8 00 A0 FD | 	call	#pushregs_
29b1c     09 27 02 F6 | 	mov	local01, arg01
29b20     0A 29 02 F6 | 	mov	local02, arg02
29b24     00 2A 06 F6 | 	mov	local03, #0
29b28     13 2D 02 F6 | 	mov	local04, local01
29b2c     16 2F 02 F6 | 	mov	local05, local04
29b30     16 2E 46 F7 | 	zerox	local05, #22
29b34     16 31 02 F6 | 	mov	local06, local04
29b38     01 30 66 F0 | 	shl	local06, #1
29b3c     18 30 46 F0 | 	shr	local06, #24
29b40     1F 2C 46 F0 | 	shr	local04, #31
29b44     14 13 02 F6 | 	mov	arg01, local02
29b48     09 FB 01 F6 | 	mov	result1, arg01
29b4c     FD 32 02 F6 | 	mov	local07, result1
29b50     19 35 02 F6 | 	mov	local08, local07
29b54     16 34 46 F7 | 	zerox	local08, #22
29b58     19 37 02 F6 | 	mov	local09, local07
29b5c     01 36 66 F0 | 	shl	local09, #1
29b60     18 36 46 F0 | 	shr	local09, #24
29b64     1B 39 02 F6 | 	mov	local10, local09
29b68     1F 32 46 F0 | 	shr	local07, #31
29b6c     00 3A 06 F6 | 	mov	local11, #0
29b70     00 3C 06 F6 | 	mov	local12, #0
29b74     1C 31 12 F2 | 	cmp	local06, local10 wc
29b78     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
29b7c     2C 00 90 1D |  if_a	jmp	#LR__3630
29b80     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
29b84     24 00 90 3D |  if_ae	jmp	#LR__3630
29b88     17 3F 02 F6 | 	mov	local13, local05
29b8c     1A 2F 02 F6 | 	mov	local05, local08
29b90     1F 35 02 F6 | 	mov	local08, local13
29b94     18 3F 02 F6 | 	mov	local13, local06
29b98     1C 31 02 F6 | 	mov	local06, local10
29b9c     1F 39 02 F6 | 	mov	local10, local13
29ba0     16 3F 02 F6 | 	mov	local13, local04
29ba4     19 2D 02 F6 | 	mov	local04, local07
29ba8     1F 33 02 F6 | 	mov	local07, local13
29bac                 | LR__3630
29bac     FF 30 0E F2 | 	cmp	local06, #255 wz
29bb0     70 01 90 AD |  if_e	jmp	#LR__3645
29bb4     00 30 0E F2 | 	cmp	local06, #0 wz
29bb8     AC 01 90 AD |  if_e	jmp	#LR__3647
29bbc     17 2E 26 F4 | 	bith	local05, #23
29bc0                 | LR__3631
29bc0     00 38 0E F2 | 	cmp	local10, #0 wz
29bc4     F0 01 90 AD |  if_e	jmp	#LR__3651
29bc8     17 34 26 F4 | 	bith	local08, #23
29bcc                 | LR__3632
29bcc     7F 30 86 F1 | 	sub	local06, #127
29bd0     7F 38 86 F1 | 	sub	local10, #127
29bd4     18 41 02 F6 | 	mov	local14, local06
29bd8     1C 41 82 F1 | 	sub	local14, local10
29bdc     97 14 48 FB | 	callpa	#(@LR__3634-@LR__3633)>>2,fcache_load_ptr_
29be0                 | LR__3633
29be0     20 40 56 F2 | 	cmps	local14, #32 wc
29be4     20 00 90 CD |  if_b	jmp	#LR__3635
29be8     1A 37 02 F6 | 	mov	local09, local08
29bec     00 3A 0E F2 | 	cmp	local11, #0 wz
29bf0     6F 3A 62 FD | 	wrnz	local11
29bf4     1D 37 42 F5 | 	or	local09, local11
29bf8     1B 3B 02 F6 | 	mov	local11, local09
29bfc     00 34 06 F6 | 	mov	local08, #0
29c00     20 40 86 F1 | 	sub	local14, #32
29c04     D8 FF 9F FD | 	jmp	#LR__3633
29c08                 | LR__3634
29c08                 | LR__3635
29c08     00 40 0E F2 | 	cmp	local14, #0 wz
29c0c     38 00 90 AD |  if_e	jmp	#LR__3636
29c10     1A 3F 02 F6 | 	mov	local13, local08
29c14     20 38 06 F6 | 	mov	local10, #32
29c18     20 39 82 F1 | 	sub	local10, local14
29c1c     1C 3F 62 F0 | 	shl	local13, local10
29c20     1D 39 02 F6 | 	mov	local10, local11
29c24     20 36 06 F6 | 	mov	local09, #32
29c28     20 37 82 F1 | 	sub	local09, local14
29c2c     1B 39 6A F0 | 	shl	local10, local09 wz
29c30     20 3B 42 F0 | 	shr	local11, local14
29c34     20 35 42 F0 | 	shr	local08, local14
29c38     1F 3B 42 F5 | 	or	local11, local13
29c3c     00 42 06 F6 | 	mov	local15, #0
29c40     01 42 06 56 |  if_ne	mov	local15, #1
29c44     21 3B 42 F5 | 	or	local11, local15
29c48                 | LR__3636
29c48     16 43 02 F6 | 	mov	local15, local04
29c4c     19 43 62 F5 | 	xor	local15, local07
29c50     01 42 CE F7 | 	test	local15, #1 wz
29c54     18 00 90 AD |  if_e	jmp	#LR__3637
29c58     1A 35 22 F6 | 	not	local08, local08
29c5c     1D 3B 22 F6 | 	not	local11, local11
29c60     01 3A 0E F1 | 	add	local11, #1 wz
29c64     00 42 06 F6 | 	mov	local15, #0
29c68     01 42 06 A6 |  if_e	mov	local15, #1
29c6c     21 35 02 F1 | 	add	local08, local15
29c70                 | LR__3637
29c70     1D 3D 12 F1 | 	add	local12, local11 wc
29c74     1A 2F 22 F1 | 	addx	local05, local08
29c78     00 2E 56 F2 | 	cmps	local05, #0 wc
29c7c     1C 00 90 3D |  if_ae	jmp	#LR__3638
29c80     01 2C 66 F5 | 	xor	local04, #1
29c84     17 2F 22 F6 | 	not	local05, local05
29c88     1E 3D 22 F6 | 	not	local12, local12
29c8c     01 3C 0E F1 | 	add	local12, #1 wz
29c90     00 42 06 F6 | 	mov	local15, #0
29c94     01 42 06 A6 |  if_e	mov	local15, #1
29c98     21 2F 02 F1 | 	add	local05, local15
29c9c                 | LR__3638
29c9c     00 80 00 FF 
29ca0     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
29ca4     28 00 90 CD |  if_b	jmp	#LR__3639
29ca8     01 30 06 F1 | 	add	local06, #1
29cac     1E 41 02 F6 | 	mov	local14, local12
29cb0     01 40 06 F5 | 	and	local14, #1
29cb4     01 3C 46 F0 | 	shr	local12, #1
29cb8     17 43 02 F6 | 	mov	local15, local05
29cbc     1F 42 66 F0 | 	shl	local15, #31
29cc0     21 3D 42 F5 | 	or	local12, local15
29cc4     20 3D 42 F5 | 	or	local12, local14
29cc8     01 2E 46 F0 | 	shr	local05, #1
29ccc     3C 00 90 FD | 	jmp	#LR__3644
29cd0                 | LR__3639
29cd0     00 40 00 FF 
29cd4     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29cd8     30 00 90 3D |  if_ae	jmp	#LR__3643
29cdc     00 2E 0E F2 | 	cmp	local05, #0 wz
29ce0     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
29ce4     08 2C 46 A5 |  if_e	or	local04, #8
29ce8     01 2C 26 A5 |  if_e	andn	local04, #1
29cec     1C 00 90 AD |  if_e	jmp	#LR__3642
29cf0                 | LR__3640
29cf0     00 40 00 FF 
29cf4     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29cf8     10 00 90 3D |  if_ae	jmp	#LR__3641
29cfc     1E 3D 12 F1 | 	add	local12, local12 wc
29d00     17 2F 22 F1 | 	addx	local05, local05
29d04     01 30 86 F1 | 	sub	local06, #1
29d08     E4 FF 9F FD | 	jmp	#LR__3640
29d0c                 | LR__3641
29d0c                 | LR__3642
29d0c                 | LR__3643
29d0c                 | LR__3644
29d0c     17 13 02 F6 | 	mov	arg01, local05
29d10     1E 15 02 F6 | 	mov	arg02, local12
29d14     18 17 02 F6 | 	mov	arg03, local06
29d18     16 19 02 F6 | 	mov	arg04, local04
29d1c     08 35 B0 FD | 	call	#__system__pack_0688
29d20     DC 00 90 FD | 	jmp	#LR__3655
29d24                 | LR__3645
29d24     FF 38 0E F2 | 	cmp	local10, #255 wz
29d28     10 00 90 5D |  if_ne	jmp	#LR__3646
29d2c     16 33 0A F2 | 	cmp	local07, local04 wz
29d30     00 F8 3F 5F 
29d34     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29d38     C4 00 90 5D |  if_ne	jmp	#LR__3655
29d3c                 | LR__3646
29d3c     00 2E 0E F2 | 	cmp	local05, #0 wz
29d40     00 F8 3F 5F 
29d44     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29d48     B4 00 90 5D |  if_ne	jmp	#LR__3655
29d4c     1E 15 02 F6 | 	mov	arg02, local12
29d50     18 17 02 F6 | 	mov	arg03, local06
29d54     16 19 02 F6 | 	mov	arg04, local04
29d58     02 18 46 F5 | 	or	arg04, #2
29d5c     17 13 02 F6 | 	mov	arg01, local05
29d60     C4 34 B0 FD | 	call	#__system__pack_0688
29d64     98 00 90 FD | 	jmp	#LR__3655
29d68                 | LR__3647
29d68     00 2E 0E F2 | 	cmp	local05, #0 wz
29d6c     28 00 90 AD |  if_e	jmp	#LR__3650
29d70     01 2E 66 F0 | 	shl	local05, #1
29d74     97 0E 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
29d78                 | LR__3648
29d78     00 40 00 FF 
29d7c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29d80     18 43 02 C6 |  if_b	mov	local15, local06
29d84     01 42 86 C1 |  if_b	sub	local15, #1
29d88     21 31 02 C6 |  if_b	mov	local06, local15
29d8c     01 2E 66 C0 |  if_b	shl	local05, #1
29d90     E4 FF 9F CD |  if_b	jmp	#LR__3648
29d94                 | LR__3649
29d94     28 FE 9F FD | 	jmp	#LR__3631
29d98                 | LR__3650
29d98     19 2D 02 F5 | 	and	local04, local07
29d9c     16 19 02 F6 | 	mov	arg04, local04
29da0     08 18 46 F5 | 	or	arg04, #8
29da4     00 12 06 F6 | 	mov	arg01, #0
29da8     00 14 06 F6 | 	mov	arg02, #0
29dac     00 16 06 F6 | 	mov	arg03, #0
29db0     74 34 B0 FD | 	call	#__system__pack_0688
29db4     48 00 90 FD | 	jmp	#LR__3655
29db8                 | LR__3651
29db8     00 34 0E F2 | 	cmp	local08, #0 wz
29dbc     28 00 90 AD |  if_e	jmp	#LR__3654
29dc0     01 34 66 F0 | 	shl	local08, #1
29dc4     97 0E 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
29dc8                 | LR__3652
29dc8     00 40 00 FF 
29dcc     00 34 16 F2 | 	cmp	local08, ##8388608 wc
29dd0     1C 43 02 C6 |  if_b	mov	local15, local10
29dd4     01 42 86 C1 |  if_b	sub	local15, #1
29dd8     21 39 02 C6 |  if_b	mov	local10, local15
29ddc     01 34 66 C0 |  if_b	shl	local08, #1
29de0     E4 FF 9F CD |  if_b	jmp	#LR__3652
29de4                 | LR__3653
29de4     E4 FD 9F FD | 	jmp	#LR__3632
29de8                 | LR__3654
29de8     7F 30 86 F1 | 	sub	local06, #127
29dec     17 13 02 F6 | 	mov	arg01, local05
29df0     1E 15 02 F6 | 	mov	arg02, local12
29df4     18 17 02 F6 | 	mov	arg03, local06
29df8     16 19 02 F6 | 	mov	arg04, local04
29dfc     28 34 B0 FD | 	call	#__system__pack_0688
29e00                 | LR__3655
29e00     A7 F0 03 F6 | 	mov	ptra, fp
29e04     B2 00 A0 FD | 	call	#popregs_
29e08                 | __system___float_add_ret
29e08     2D 00 64 FD | 	ret
29e0c                 | 
29e0c                 | __system___float_sqrt
29e0c     04 4A 05 F6 | 	mov	COUNT_, #4
29e10     A8 00 A0 FD | 	call	#pushregs_
29e14     09 27 02 F6 | 	mov	local01, arg01
29e18     09 FB 01 F6 | 	mov	result1, arg01
29e1c     FD 28 02 F6 | 	mov	local02, result1
29e20     14 2B 02 F6 | 	mov	local03, local02
29e24     16 2A 46 F7 | 	zerox	local03, #22
29e28     14 2D 02 F6 | 	mov	local04, local02
29e2c     01 2C 66 F0 | 	shl	local04, #1
29e30     18 2C 4E F0 | 	shr	local04, #24 wz
29e34     1F 28 46 F0 | 	shr	local02, #31
29e38     70 00 90 AD |  if_e	jmp	#LR__3661
29e3c     17 2A 26 F4 | 	bith	local03, #23
29e40                 | LR__3660
29e40     00 28 0E F2 | 	cmp	local02, #0 wz
29e44     00 F8 3F 5F 
29e48     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29e4c     88 00 90 5D |  if_ne	jmp	#LR__3664
29e50     FF 2C 0E F2 | 	cmp	local04, #255 wz
29e54     13 FB 01 A6 |  if_e	mov	result1, local01
29e58     7C 00 90 AD |  if_e	jmp	#LR__3664
29e5c     7F 2C 86 F1 | 	sub	local04, #127
29e60     01 2C CE F7 | 	test	local04, #1 wz
29e64     01 2A 66 50 |  if_ne	shl	local03, #1
29e68     05 2A 66 F0 | 	shl	local03, #5
29e6c     15 01 38 FD | 	qsqrt	#0, local03
29e70     01 2C 86 51 |  if_ne	sub	local04, #1
29e74     16 2D 52 F6 | 	abs	local04, local04 wc
29e78     01 2C 46 F0 | 	shr	local04, #1
29e7c     16 17 82 F6 | 	negc	arg03, local04
29e80     14 19 02 F6 | 	mov	arg04, local02
29e84     18 12 62 FD | 	getqx	arg01
29e88     09 15 02 F6 | 	mov	arg02, arg01
29e8c     19 14 66 F0 | 	shl	arg02, #25
29e90     07 12 46 F0 | 	shr	arg01, #7
29e94     00 80 00 FF 
29e98     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
29e9c     01 16 06 31 |  if_ae	add	arg03, #1
29ea0     01 12 46 30 |  if_ae	shr	arg01, #1
29ea4     80 33 B0 FD | 	call	#__system__pack_0688
29ea8     2C 00 90 FD | 	jmp	#LR__3664
29eac                 | LR__3661
29eac     00 2A 0E F2 | 	cmp	local03, #0 wz
29eb0     13 FB 01 A6 |  if_e	mov	result1, local01
29eb4     20 00 90 AD |  if_e	jmp	#LR__3664
29eb8     01 2A 66 F0 | 	shl	local03, #1
29ebc     97 0A 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
29ec0                 | LR__3662
29ec0     00 40 00 FF 
29ec4     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
29ec8     01 2C 86 C1 |  if_b	sub	local04, #1
29ecc     01 2A 66 C0 |  if_b	shl	local03, #1
29ed0     EC FF 9F CD |  if_b	jmp	#LR__3662
29ed4                 | LR__3663
29ed4     68 FF 9F FD | 	jmp	#LR__3660
29ed8                 | LR__3664
29ed8     A7 F0 03 F6 | 	mov	ptra, fp
29edc     B2 00 A0 FD | 	call	#popregs_
29ee0                 | __system___float_sqrt_ret
29ee0     2D 00 64 FD | 	ret
29ee4                 | 
29ee4                 | __system___float_mul
29ee4     0B 4A 05 F6 | 	mov	COUNT_, #11
29ee8     A8 00 A0 FD | 	call	#pushregs_
29eec     09 27 02 F6 | 	mov	local01, arg01
29ef0     0A 29 02 F6 | 	mov	local02, arg02
29ef4     13 2B 02 F6 | 	mov	local03, local01
29ef8     15 2D 02 F6 | 	mov	local04, local03
29efc     16 2C 46 F7 | 	zerox	local04, #22
29f00     15 2F 02 F6 | 	mov	local05, local03
29f04     01 2E 66 F0 | 	shl	local05, #1
29f08     18 2E 46 F0 | 	shr	local05, #24
29f0c     1F 2A 46 F0 | 	shr	local03, #31
29f10     14 FB 01 F6 | 	mov	result1, local02
29f14     FD 30 02 F6 | 	mov	local06, result1
29f18     18 33 02 F6 | 	mov	local07, local06
29f1c     16 32 46 F7 | 	zerox	local07, #22
29f20     18 35 02 F6 | 	mov	local08, local06
29f24     01 34 66 F0 | 	shl	local08, #1
29f28     18 34 46 F0 | 	shr	local08, #24
29f2c     1F 30 46 F0 | 	shr	local06, #31
29f30     18 2B 62 F5 | 	xor	local03, local06
29f34     FF 2E 0E F2 | 	cmp	local05, #255 wz
29f38     90 00 90 AD |  if_e	jmp	#LR__3673
29f3c     FF 34 0E F2 | 	cmp	local08, #255 wz
29f40     D8 00 90 AD |  if_e	jmp	#LR__3675
29f44     00 2E 0E F2 | 	cmp	local05, #0 wz
29f48     0C 01 90 AD |  if_e	jmp	#LR__3676
29f4c     17 2C 26 F4 | 	bith	local04, #23
29f50                 | LR__3670
29f50     00 34 0E F2 | 	cmp	local08, #0 wz
29f54     44 01 90 AD |  if_e	jmp	#LR__3680
29f58     17 32 26 F4 | 	bith	local07, #23
29f5c                 | LR__3671
29f5c     16 29 02 F6 | 	mov	local02, local04
29f60     04 28 66 F0 | 	shl	local02, #4
29f64     19 31 02 F6 | 	mov	local06, local07
29f68     05 30 66 F0 | 	shl	local06, #5
29f6c     18 29 02 FD | 	qmul	local02, local06
29f70     1A 2F 02 F1 | 	add	local05, local08
29f74     FE 2E 86 F1 | 	sub	local05, #254
29f78     17 37 02 F6 | 	mov	local09, local05
29f7c     04 2C 66 F0 | 	shl	local04, #4
29f80     05 32 66 F0 | 	shl	local07, #5
29f84     18 38 62 FD | 	getqx	local10
29f88     19 2D 02 FD | 	qmul	local04, local07
29f8c     19 3A 62 FD | 	getqy	local11
29f90     00 80 00 FF 
29f94     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
29f98     18 00 90 CD |  if_b	jmp	#LR__3672
29f9c     01 36 06 F1 | 	add	local09, #1
29fa0     01 38 46 F0 | 	shr	local10, #1
29fa4     1D 35 02 F6 | 	mov	local08, local11
29fa8     1F 34 66 F0 | 	shl	local08, #31
29fac     1A 39 42 F5 | 	or	local10, local08
29fb0     01 3A 46 F0 | 	shr	local11, #1
29fb4                 | LR__3672
29fb4     1D 13 02 F6 | 	mov	arg01, local11
29fb8     1C 15 02 F6 | 	mov	arg02, local10
29fbc     1B 17 02 F6 | 	mov	arg03, local09
29fc0     15 19 02 F6 | 	mov	arg04, local03
29fc4     60 32 B0 FD | 	call	#__system__pack_0688
29fc8     10 01 90 FD | 	jmp	#LR__3684
29fcc                 | LR__3673
29fcc     00 2C 0E F2 | 	cmp	local04, #0 wz
29fd0     13 FB 01 56 |  if_ne	mov	result1, local01
29fd4     04 01 90 5D |  if_ne	jmp	#LR__3684
29fd8     FF 34 56 F2 | 	cmps	local08, #255 wc
29fdc     00 34 0E C2 |  if_b	cmp	local08, #0 wz
29fe0     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
29fe4     18 00 90 4D |  if_c_and_nz	jmp	#LR__3674
29fe8     00 F8 3F CF 
29fec     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
29ff0     E8 00 90 CD |  if_b	jmp	#LR__3684
29ff4     00 32 0E F2 | 	cmp	local07, #0 wz
29ff8     14 FB 01 56 |  if_ne	mov	result1, local02
29ffc     DC 00 90 5D |  if_ne	jmp	#LR__3684
2a000                 | LR__3674
2a000     02 2A 46 F5 | 	or	local03, #2
2a004     00 12 06 F6 | 	mov	arg01, #0
2a008     00 14 06 F6 | 	mov	arg02, #0
2a00c     17 17 02 F6 | 	mov	arg03, local05
2a010     15 19 02 F6 | 	mov	arg04, local03
2a014     10 32 B0 FD | 	call	#__system__pack_0688
2a018     C0 00 90 FD | 	jmp	#LR__3684
2a01c                 | LR__3675
2a01c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a020     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
2a024     00 F8 3F AF 
2a028     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a02c     AC 00 90 AD |  if_e	jmp	#LR__3684
2a030     00 32 0E F2 | 	cmp	local07, #0 wz
2a034     14 FB 01 56 |  if_ne	mov	result1, local02
2a038     A0 00 90 5D |  if_ne	jmp	#LR__3684
2a03c     1A 17 02 F6 | 	mov	arg03, local08
2a040     15 19 02 F6 | 	mov	arg04, local03
2a044     02 18 46 F5 | 	or	arg04, #2
2a048     00 12 06 F6 | 	mov	arg01, #0
2a04c     00 14 06 F6 | 	mov	arg02, #0
2a050     D4 31 B0 FD | 	call	#__system__pack_0688
2a054     84 00 90 FD | 	jmp	#LR__3684
2a058                 | LR__3676
2a058     00 2C 0E F2 | 	cmp	local04, #0 wz
2a05c     20 00 90 AD |  if_e	jmp	#LR__3679
2a060     01 2C 66 F0 | 	shl	local04, #1
2a064     97 0A 48 FB | 	callpa	#(@LR__3678-@LR__3677)>>2,fcache_load_ptr_
2a068                 | LR__3677
2a068     00 40 00 FF 
2a06c     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
2a070     01 2E 86 C1 |  if_b	sub	local05, #1
2a074     01 2C 66 C0 |  if_b	shl	local04, #1
2a078     EC FF 9F CD |  if_b	jmp	#LR__3677
2a07c                 | LR__3678
2a07c     D0 FE 9F FD | 	jmp	#LR__3670
2a080                 | LR__3679
2a080     08 2A 46 F5 | 	or	local03, #8
2a084     00 12 06 F6 | 	mov	arg01, #0
2a088     00 14 06 F6 | 	mov	arg02, #0
2a08c     00 16 06 F6 | 	mov	arg03, #0
2a090     15 19 02 F6 | 	mov	arg04, local03
2a094     90 31 B0 FD | 	call	#__system__pack_0688
2a098     40 00 90 FD | 	jmp	#LR__3684
2a09c                 | LR__3680
2a09c     00 32 0E F2 | 	cmp	local07, #0 wz
2a0a0     20 00 90 AD |  if_e	jmp	#LR__3683
2a0a4     01 32 66 F0 | 	shl	local07, #1
2a0a8     97 0A 48 FB | 	callpa	#(@LR__3682-@LR__3681)>>2,fcache_load_ptr_
2a0ac                 | LR__3681
2a0ac     00 40 00 FF 
2a0b0     00 32 16 F2 | 	cmp	local07, ##8388608 wc
2a0b4     01 34 86 C1 |  if_b	sub	local08, #1
2a0b8     01 32 66 C0 |  if_b	shl	local07, #1
2a0bc     EC FF 9F CD |  if_b	jmp	#LR__3681
2a0c0                 | LR__3682
2a0c0     98 FE 9F FD | 	jmp	#LR__3671
2a0c4                 | LR__3683
2a0c4     08 2A 46 F5 | 	or	local03, #8
2a0c8     00 12 06 F6 | 	mov	arg01, #0
2a0cc     00 14 06 F6 | 	mov	arg02, #0
2a0d0     00 16 06 F6 | 	mov	arg03, #0
2a0d4     15 19 02 F6 | 	mov	arg04, local03
2a0d8     4C 31 B0 FD | 	call	#__system__pack_0688
2a0dc                 | LR__3684
2a0dc     A7 F0 03 F6 | 	mov	ptra, fp
2a0e0     B2 00 A0 FD | 	call	#popregs_
2a0e4                 | __system___float_mul_ret
2a0e4     2D 00 64 FD | 	ret
2a0e8                 | 
2a0e8                 | __system___float_div
2a0e8     0E 4A 05 F6 | 	mov	COUNT_, #14
2a0ec     A8 00 A0 FD | 	call	#pushregs_
2a0f0     09 2B 02 F6 | 	mov	local03, arg01
2a0f4     0A 2D 02 F6 | 	mov	local04, arg02
2a0f8     15 2F 02 F6 | 	mov	local05, local03
2a0fc     17 31 02 F6 | 	mov	local06, local05
2a100     16 30 46 F7 | 	zerox	local06, #22
2a104     17 33 02 F6 | 	mov	local07, local05
2a108     01 32 66 F0 | 	shl	local07, #1
2a10c     18 32 46 F0 | 	shr	local07, #24
2a110     1F 2E 46 F0 | 	shr	local05, #31
2a114     16 FB 01 F6 | 	mov	result1, local04
2a118     FD 34 02 F6 | 	mov	local08, result1
2a11c     1A 37 02 F6 | 	mov	local09, local08
2a120     16 36 46 F7 | 	zerox	local09, #22
2a124     1A 39 02 F6 | 	mov	local10, local08
2a128     01 38 66 F0 | 	shl	local10, #1
2a12c     18 38 46 F0 | 	shr	local10, #24
2a130     1F 34 46 F0 | 	shr	local08, #31
2a134     1A 2F 62 F5 | 	xor	local05, local08
2a138     FF 32 0E F2 | 	cmp	local07, #255 wz
2a13c     D4 00 90 AD |  if_e	jmp	#LR__3695
2a140     FF 38 0E F2 | 	cmp	local10, #255 wz
2a144     04 01 90 AD |  if_e	jmp	#LR__3696
2a148     00 32 0E F2 | 	cmp	local07, #0 wz
2a14c     24 01 90 AD |  if_e	jmp	#LR__3697
2a150     17 30 26 F4 | 	bith	local06, #23
2a154                 | LR__3690
2a154     00 38 0E F2 | 	cmp	local10, #0 wz
2a158     70 01 90 AD |  if_e	jmp	#LR__3701
2a15c     17 36 26 F4 | 	bith	local09, #23
2a160                 | LR__3691
2a160     1C 33 82 F1 | 	sub	local07, local10
2a164     19 3B 02 F6 | 	mov	local11, local07
2a168     18 13 02 F6 | 	mov	arg01, local06
2a16c     02 12 46 F0 | 	shr	arg01, #2
2a170     1E 30 66 F0 | 	shl	local06, #30
2a174     18 15 02 F6 | 	mov	arg02, local06
2a178     1B 17 02 F6 | 	mov	arg03, local09
2a17c     28 12 62 FD | 	setq	arg01
2a180     0B 15 12 FD | 	qdiv	arg02, arg03
2a184     00 3C 06 F6 | 	mov	local12, #0
2a188     18 26 62 FD | 	getqx	local01
2a18c     19 FC 61 FD | 	getqy	result2
2a190     FE 28 02 F6 | 	mov	local02, result2
2a194     13 3F 02 F6 | 	mov	local13, local01
2a198     00 28 4E F2 | 	cmps	local02, #0 wz
2a19c     1F 41 02 F6 | 	mov	local14, local13
2a1a0     19 40 66 F0 | 	shl	local14, #25
2a1a4     01 3C 06 56 |  if_ne	mov	local12, #1
2a1a8     1E 41 42 F5 | 	or	local14, local12
2a1ac     07 3E 46 F0 | 	shr	local13, #7
2a1b0     00 80 00 FF 
2a1b4     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
2a1b8     1C 00 90 CD |  if_b	jmp	#LR__3692
2a1bc     01 3A 06 F1 | 	add	local11, #1
2a1c0     01 40 46 F0 | 	shr	local14, #1
2a1c4     1F 3D 02 F6 | 	mov	local12, local13
2a1c8     1F 3C 66 F0 | 	shl	local12, #31
2a1cc     1E 41 42 F5 | 	or	local14, local12
2a1d0     01 3E 46 F0 | 	shr	local13, #1
2a1d4     24 00 90 FD | 	jmp	#LR__3694
2a1d8                 | LR__3692
2a1d8     00 40 00 FF 
2a1dc     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2a1e0     18 00 90 3D |  if_ae	jmp	#LR__3693
2a1e4     01 3A 86 F1 | 	sub	local11, #1
2a1e8     01 3E 66 F0 | 	shl	local13, #1
2a1ec     20 3D 02 F6 | 	mov	local12, local14
2a1f0     1F 3C 46 F0 | 	shr	local12, #31
2a1f4     1E 3F 42 F5 | 	or	local13, local12
2a1f8     01 40 66 F0 | 	shl	local14, #1
2a1fc                 | LR__3693
2a1fc                 | LR__3694
2a1fc     1F 13 02 F6 | 	mov	arg01, local13
2a200     20 15 02 F6 | 	mov	arg02, local14
2a204     1D 17 02 F6 | 	mov	arg03, local11
2a208     17 19 02 F6 | 	mov	arg04, local05
2a20c     18 30 B0 FD | 	call	#__system__pack_0688
2a210     F8 00 90 FD | 	jmp	#LR__3705
2a214                 | LR__3695
2a214     00 30 0E F2 | 	cmp	local06, #0 wz
2a218     15 FB 01 56 |  if_ne	mov	result1, local03
2a21c     EC 00 90 5D |  if_ne	jmp	#LR__3705
2a220     FF 38 0E F2 | 	cmp	local10, #255 wz
2a224     00 F8 3F AF 
2a228     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a22c     DC 00 90 AD |  if_e	jmp	#LR__3705
2a230     02 2E 46 F5 | 	or	local05, #2
2a234     00 12 06 F6 | 	mov	arg01, #0
2a238     00 14 06 F6 | 	mov	arg02, #0
2a23c     19 17 02 F6 | 	mov	arg03, local07
2a240     17 19 02 F6 | 	mov	arg04, local05
2a244     E0 2F B0 FD | 	call	#__system__pack_0688
2a248     C0 00 90 FD | 	jmp	#LR__3705
2a24c                 | LR__3696
2a24c     00 36 0E F2 | 	cmp	local09, #0 wz
2a250     16 FB 01 56 |  if_ne	mov	result1, local04
2a254     B4 00 90 5D |  if_ne	jmp	#LR__3705
2a258     17 19 02 F6 | 	mov	arg04, local05
2a25c     08 18 46 F5 | 	or	arg04, #8
2a260     00 12 06 F6 | 	mov	arg01, #0
2a264     00 14 06 F6 | 	mov	arg02, #0
2a268     00 16 06 F6 | 	mov	arg03, #0
2a26c     B8 2F B0 FD | 	call	#__system__pack_0688
2a270     98 00 90 FD | 	jmp	#LR__3705
2a274                 | LR__3697
2a274     00 30 0E F2 | 	cmp	local06, #0 wz
2a278     20 00 90 AD |  if_e	jmp	#LR__3700
2a27c     01 30 66 F0 | 	shl	local06, #1
2a280     97 0A 48 FB | 	callpa	#(@LR__3699-@LR__3698)>>2,fcache_load_ptr_
2a284                 | LR__3698
2a284     00 40 00 FF 
2a288     00 30 16 F2 | 	cmp	local06, ##8388608 wc
2a28c     01 32 86 C1 |  if_b	sub	local07, #1
2a290     01 30 66 C0 |  if_b	shl	local06, #1
2a294     EC FF 9F CD |  if_b	jmp	#LR__3698
2a298                 | LR__3699
2a298     B8 FE 9F FD | 	jmp	#LR__3690
2a29c                 | LR__3700
2a29c     00 38 0E F2 | 	cmp	local10, #0 wz
2a2a0     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2a2a4     00 F8 3F AF 
2a2a8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a2ac     5C 00 90 AD |  if_e	jmp	#LR__3705
2a2b0     17 19 02 F6 | 	mov	arg04, local05
2a2b4     08 18 46 F5 | 	or	arg04, #8
2a2b8     00 12 06 F6 | 	mov	arg01, #0
2a2bc     00 14 06 F6 | 	mov	arg02, #0
2a2c0     00 16 06 F6 | 	mov	arg03, #0
2a2c4     60 2F B0 FD | 	call	#__system__pack_0688
2a2c8     40 00 90 FD | 	jmp	#LR__3705
2a2cc                 | LR__3701
2a2cc     00 36 0E F2 | 	cmp	local09, #0 wz
2a2d0     20 00 90 AD |  if_e	jmp	#LR__3704
2a2d4     01 36 66 F0 | 	shl	local09, #1
2a2d8     97 0A 48 FB | 	callpa	#(@LR__3703-@LR__3702)>>2,fcache_load_ptr_
2a2dc                 | LR__3702
2a2dc     00 40 00 FF 
2a2e0     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2a2e4     01 38 86 C1 |  if_b	sub	local10, #1
2a2e8     01 36 66 C0 |  if_b	shl	local09, #1
2a2ec     EC FF 9F CD |  if_b	jmp	#LR__3702
2a2f0                 | LR__3703
2a2f0     6C FE 9F FD | 	jmp	#LR__3691
2a2f4                 | LR__3704
2a2f4     02 2E 46 F5 | 	or	local05, #2
2a2f8     00 12 06 F6 | 	mov	arg01, #0
2a2fc     00 14 06 F6 | 	mov	arg02, #0
2a300     00 16 06 F6 | 	mov	arg03, #0
2a304     17 19 02 F6 | 	mov	arg04, local05
2a308     1C 2F B0 FD | 	call	#__system__pack_0688
2a30c                 | LR__3705
2a30c     A7 F0 03 F6 | 	mov	ptra, fp
2a310     B2 00 A0 FD | 	call	#popregs_
2a314                 | __system___float_div_ret
2a314     2D 00 64 FD | 	ret
2a318                 | 
2a318                 | __system___float_cmp
2a318     00 C0 3F FF 
2a31c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2a320     00 C0 3F CF 
2a324     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2a328     0B FB 01 36 |  if_ae	mov	result1, arg03
2a32c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a330     00 C0 7F FF 
2a334     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2a338     00 C0 7F CF 
2a33c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2a340     0B FB 01 36 |  if_ae	mov	result1, arg03
2a344     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a348     00 12 56 F2 | 	cmps	arg01, #0 wc
2a34c     2C 00 90 3D |  if_ae	jmp	#LR__3710
2a350     00 14 56 F2 | 	cmps	arg02, #0 wc
2a354     0A FB 01 C6 |  if_b	mov	result1, arg02
2a358     09 FB 81 C1 |  if_b	sub	result1, arg01
2a35c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2a360     00 14 0E F2 | 	cmp	arg02, #0 wz
2a364     00 00 40 AF 
2a368     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2a36c     00 FA 05 A6 |  if_e	mov	result1, #0
2a370     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a374     01 FA 65 F6 | 	neg	result1, #1
2a378     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2a37c                 | LR__3710
2a37c     00 14 56 F2 | 	cmps	arg02, #0 wc
2a380     1C 00 90 3D |  if_ae	jmp	#LR__3711
2a384     00 12 0E F2 | 	cmp	arg01, #0 wz
2a388     00 00 40 AF 
2a38c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2a390     00 FA 05 A6 |  if_e	mov	result1, #0
2a394     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a398     01 FA 05 F6 | 	mov	result1, #1
2a39c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2a3a0                 | LR__3711
2a3a0     0A 13 82 F1 | 	sub	arg01, arg02
2a3a4     09 FB 01 F6 | 	mov	result1, arg01
2a3a8                 | __system___float_cmp_ret
2a3a8     2D 00 64 FD | 	ret
2a3ac                 | 
2a3ac                 | __system___float_tointeger
2a3ac     02 4A 05 F6 | 	mov	COUNT_, #2
2a3b0     A8 00 A0 FD | 	call	#pushregs_
2a3b4     50 00 B0 FD | 	call	#__system___float_Unpack
2a3b8     FF FF 7F FF 
2a3bc     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2a3c0     34 00 90 CD |  if_b	jmp	#LR__3720
2a3c4     1F FC 55 F2 | 	cmps	result2, #31 wc
2a3c8     2C 00 90 3D |  if_ae	jmp	#LR__3720
2a3cc     02 FE 65 F0 | 	shl	result3, #2
2a3d0     1E 26 06 F6 | 	mov	local01, #30
2a3d4     FE 26 82 F1 | 	sub	local01, result2
2a3d8     13 FF 41 F0 | 	shr	result3, local01
2a3dc     FF 28 02 F6 | 	mov	local02, result3
2a3e0     0A 29 02 F1 | 	add	local02, arg02
2a3e4     01 28 46 F0 | 	shr	local02, #1
2a3e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a3ec     14 29 62 56 |  if_ne	neg	local02, local02
2a3f0     14 FB 01 F6 | 	mov	result1, local02
2a3f4     04 00 90 FD | 	jmp	#LR__3721
2a3f8                 | LR__3720
2a3f8     00 FA 05 F6 | 	mov	result1, #0
2a3fc                 | LR__3721
2a3fc     A7 F0 03 F6 | 	mov	ptra, fp
2a400     B2 00 A0 FD | 	call	#popregs_
2a404                 | __system___float_tointeger_ret
2a404     2D 00 64 FD | 	ret
2a408                 | 
2a408                 | __system___float_Unpack
2a408     09 01 02 F6 | 	mov	_var01, arg01
2a40c     1F 00 46 F0 | 	shr	_var01, #31
2a410     09 03 02 F6 | 	mov	_var02, arg01
2a414     01 02 66 F0 | 	shl	_var02, #1
2a418     18 02 4E F0 | 	shr	_var02, #24 wz
2a41c     17 13 06 F4 | 	bitl	arg01, #279
2a420     06 12 66 50 |  if_ne	shl	arg01, #6
2a424     1D 12 26 54 |  if_ne	bith	arg01, #29
2a428     1C 00 90 5D |  if_ne	jmp	#LR__3730
2a42c     09 05 92 F7 | 	encod	_var03, arg01 wc
2a430     01 04 06 C1 |  if_b	add	_var03, #1
2a434     17 04 86 F1 | 	sub	_var03, #23
2a438     02 03 02 F6 | 	mov	_var02, _var03
2a43c     07 FC 05 F6 | 	mov	result2, #7
2a440     02 FD 81 F1 | 	sub	result2, _var03
2a444     FE 12 62 F0 | 	shl	arg01, result2
2a448                 | LR__3730
2a448     7F 02 86 F1 | 	sub	_var02, #127
2a44c     09 FF 01 F6 | 	mov	result3, arg01
2a450     00 FB 01 F6 | 	mov	result1, _var01
2a454     01 FD 01 F6 | 	mov	result2, _var02
2a458                 | __system___float_Unpack_ret
2a458     2D 00 64 FD | 	ret
2a45c                 | 
2a45c                 | __system___float_Pack
2a45c     00 00 06 F6 | 	mov	_var01, #0
2a460     00 16 0E F2 | 	cmp	arg03, #0 wz
2a464     8C 00 90 AD |  if_e	jmp	#LR__3741
2a468     0B 03 92 F7 | 	encod	_var02, arg03 wc
2a46c     01 02 06 C1 |  if_b	add	_var02, #1
2a470     21 00 06 F6 | 	mov	_var01, #33
2a474     01 01 82 F1 | 	sub	_var01, _var02
2a478     00 17 62 F0 | 	shl	arg03, _var01
2a47c     03 02 06 F6 | 	mov	_var02, #3
2a480     00 03 82 F1 | 	sub	_var02, _var01
2a484     01 15 02 F1 | 	add	arg02, _var02
2a488     0A 05 02 F6 | 	mov	_var03, arg02
2a48c     00 17 06 F1 | 	add	arg03, #256
2a490     0B 03 02 F6 | 	mov	_var02, arg03
2a494     FF 02 2E F5 | 	andn	_var02, #255 wz
2a498     01 04 06 A1 |  if_e	add	_var03, #1
2a49c     7F 04 06 F1 | 	add	_var03, #127
2a4a0     FF FF 7F FF 
2a4a4     E9 05 46 F3 | 	fges	_var03, ##-23
2a4a8     FF 04 66 F3 | 	fles	_var03, #255
2a4ac     01 04 56 F2 | 	cmps	_var03, #1 wc
2a4b0     1C 00 90 3D |  if_ae	jmp	#LR__3740
2a4b4     01 16 46 F0 | 	shr	arg03, #1
2a4b8     1F 02 C6 F9 | 	decod	_var02, #31
2a4bc     0B 03 02 F1 | 	add	_var02, arg03
2a4c0     02 05 62 F6 | 	neg	_var03, _var03
2a4c4     02 03 42 F0 | 	shr	_var02, _var03
2a4c8     01 17 02 F6 | 	mov	arg03, _var02
2a4cc     00 04 06 F6 | 	mov	_var03, #0
2a4d0                 | LR__3740
2a4d0     09 FB 01 F6 | 	mov	result1, arg01
2a4d4     1F FA 65 F0 | 	shl	result1, #31
2a4d8     02 03 02 F6 | 	mov	_var02, _var03
2a4dc     17 02 66 F0 | 	shl	_var02, #23
2a4e0     01 FB 41 F5 | 	or	result1, _var02
2a4e4     0B 07 02 F6 | 	mov	_var04, arg03
2a4e8     09 06 46 F0 | 	shr	_var04, #9
2a4ec     03 FB 41 F5 | 	or	result1, _var04
2a4f0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2a4f4                 | LR__3741
2a4f4     00 FB 01 F6 | 	mov	result1, _var01
2a4f8                 | __system___float_Pack_ret
2a4f8     2D 00 64 FD | 	ret
2a4fc                 | 
2a4fc                 | __system___basic_print_float
2a4fc     05 4A 05 F6 | 	mov	COUNT_, #5
2a500     A8 00 A0 FD | 	call	#pushregs_
2a504     09 27 02 F6 | 	mov	local01, arg01
2a508     0A 29 02 F6 | 	mov	local02, arg02
2a50c     0B 2B 0A F6 | 	mov	local03, arg03 wz
2a510     0C 2D 02 F6 | 	mov	local04, arg04
2a514     14 00 90 5D |  if_ne	jmp	#LR__3750
2a518     23 2C 0E F2 | 	cmp	local04, #35 wz
2a51c     80 02 10 AF 
2a520     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2a524     1D 2E C6 59 |  if_ne	decod	local05, #29
2a528     17 2B 02 F6 | 	mov	local03, local05
2a52c                 | LR__3750
2a52c     13 13 02 F6 | 	mov	arg01, local01
2a530     D8 27 B0 FD | 	call	#__system___gettxfunc
2a534     FD 2E 0A F6 | 	mov	local05, result1 wz
2a538     00 FA 05 A6 |  if_e	mov	result1, #0
2a53c     17 13 02 56 |  if_ne	mov	arg01, local05
2a540     15 15 02 56 |  if_ne	mov	arg02, local03
2a544     14 17 02 56 |  if_ne	mov	arg03, local02
2a548     16 19 02 56 |  if_ne	mov	arg04, local04
2a54c     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
2a550     A7 F0 03 F6 | 	mov	ptra, fp
2a554     B2 00 A0 FD | 	call	#popregs_
2a558                 | __system___basic_print_float_ret
2a558     2D 00 64 FD | 	ret
2a55c                 | 
2a55c                 | __system____builtin_atoi
2a55c     07 4A 05 F6 | 	mov	COUNT_, #7
2a560     A8 00 A0 FD | 	call	#pushregs_
2a564                 | __system____builtin_atoi_enter
2a564     09 27 02 F6 | 	mov	local01, arg01
2a568     0A 29 02 F6 | 	mov	local02, arg02
2a56c     00 2A 06 F6 | 	mov	local03, #0
2a570     00 2C 06 F6 | 	mov	local04, #0
2a574     00 2E 06 F6 | 	mov	local05, #0
2a578     97 1C 48 FB | 	callpa	#(@LR__3762-@LR__3760)>>2,fcache_load_ptr_
2a57c                 | LR__3760
2a57c     13 31 C2 FA | 	rdbyte	local06, local01
2a580     20 30 0E F2 | 	cmp	local06, #32 wz
2a584     01 26 06 A1 |  if_e	add	local01, #1
2a588     F0 FF 9F AD |  if_e	jmp	#LR__3760
2a58c     13 33 C2 FA | 	rdbyte	local07, local01
2a590                 | LR__3761
2a590     2D 32 0E F2 | 	cmp	local07, #45 wz
2a594     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
2a598     18 00 90 5D |  if_ne	jmp	#LR__3763
2a59c     01 26 06 F1 | 	add	local01, #1
2a5a0     2D 32 0E F2 | 	cmp	local07, #45 wz
2a5a4     01 30 06 A6 |  if_e	mov	local06, #1
2a5a8     18 2F C2 A2 |  if_e	subr	local05, local06
2a5ac     13 33 C2 FA | 	rdbyte	local07, local01
2a5b0     DC FF 9F FD | 	jmp	#LR__3761
2a5b4                 | LR__3762
2a5b4                 | LR__3763
2a5b4     00 28 0E F2 | 	cmp	local02, #0 wz
2a5b8     1C 00 90 5D |  if_ne	jmp	#LR__3765
2a5bc     24 32 0E F2 | 	cmp	local07, #36 wz
2a5c0     10 28 06 A6 |  if_e	mov	local02, #16
2a5c4     01 26 06 A1 |  if_e	add	local01, #1
2a5c8     0C 00 90 AD |  if_e	jmp	#LR__3764
2a5cc     25 32 0E F2 | 	cmp	local07, #37 wz
2a5d0     02 28 06 A6 |  if_e	mov	local02, #2
2a5d4     01 26 06 A1 |  if_e	add	local01, #1
2a5d8                 | LR__3764
2a5d8                 | LR__3765
2a5d8     97 48 48 FB | 	callpa	#(@LR__3773-@LR__3766)>>2,fcache_load_ptr_
2a5dc                 | LR__3766
2a5dc                 | LR__3767
2a5dc     13 33 C2 FA | 	rdbyte	local07, local01
2a5e0     5F 32 0E F2 | 	cmp	local07, #95 wz
2a5e4     01 26 06 F1 | 	add	local01, #1
2a5e8     F0 FF 9F AD |  if_e	jmp	#LR__3767
2a5ec     30 32 0E F2 | 	cmp	local07, #48 wz
2a5f0     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2a5f4     00 2C 06 A6 |  if_e	mov	local04, #0
2a5f8     60 00 90 AD |  if_e	jmp	#LR__3772
2a5fc     31 32 56 F2 | 	cmps	local07, #49 wc
2a600     18 00 90 CD |  if_b	jmp	#LR__3768
2a604     3A 32 56 F2 | 	cmps	local07, #58 wc
2a608     19 2D 02 C6 |  if_b	mov	local04, local07
2a60c     30 2C 86 C1 |  if_b	sub	local04, #48
2a610     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2a614     0A 28 06 86 |  if_c_and_z	mov	local02, #10
2a618     40 00 90 CD |  if_b	jmp	#LR__3771
2a61c                 | LR__3768
2a61c     0B 28 56 F2 | 	cmps	local02, #11 wc
2a620     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2a624     14 00 90 CD |  if_b	jmp	#LR__3769
2a628     67 32 56 F2 | 	cmps	local07, #103 wc
2a62c     61 32 86 C1 |  if_b	sub	local07, #97
2a630     0A 2C 06 C6 |  if_b	mov	local04, #10
2a634     19 2D 02 C1 |  if_b	add	local04, local07
2a638     20 00 90 CD |  if_b	jmp	#LR__3770
2a63c                 | LR__3769
2a63c     0B 28 56 F2 | 	cmps	local02, #11 wc
2a640     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2a644     24 00 90 CD |  if_b	jmp	#LR__3774
2a648     47 32 56 F2 | 	cmps	local07, #71 wc
2a64c     41 32 86 C1 |  if_b	sub	local07, #65
2a650     0A 2C 06 C6 |  if_b	mov	local04, #10
2a654     19 2D 02 C1 |  if_b	add	local04, local07
2a658     10 00 90 3D |  if_ae	jmp	#LR__3774
2a65c                 | LR__3770
2a65c                 | LR__3771
2a65c                 | LR__3772
2a65c     15 29 02 FD | 	qmul	local02, local03
2a660     18 2A 62 FD | 	getqx	local03
2a664     16 2B 02 F1 | 	add	local03, local04
2a668     70 FF 9F FD | 	jmp	#LR__3766
2a66c                 | LR__3773
2a66c                 | LR__3774
2a66c     00 28 0E F2 | 	cmp	local02, #0 wz
2a670     64 00 90 5D |  if_ne	jmp	#LR__3780
2a674     78 32 0E F2 | 	cmp	local07, #120 wz
2a678     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2a67c     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2a680     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2a684     14 00 90 5D |  if_ne	jmp	#LR__3775
2a688     13 13 02 F6 | 	mov	arg01, local01
2a68c     10 14 06 F6 | 	mov	arg02, #16
2a690     C8 FE BF FD | 	call	#__system____builtin_atoi
2a694     FD 2A 02 F6 | 	mov	local03, result1
2a698     3C 00 90 FD | 	jmp	#LR__3779
2a69c                 | LR__3775
2a69c     62 32 0E F2 | 	cmp	local07, #98 wz
2a6a0     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2a6a4     14 00 90 5D |  if_ne	jmp	#LR__3776
2a6a8     13 13 02 F6 | 	mov	arg01, local01
2a6ac     02 14 06 F6 | 	mov	arg02, #2
2a6b0     A8 FE BF FD | 	call	#__system____builtin_atoi
2a6b4     FD 2A 02 F6 | 	mov	local03, result1
2a6b8     1C 00 90 FD | 	jmp	#LR__3778
2a6bc                 | LR__3776
2a6bc     6F 32 0E F2 | 	cmp	local07, #111 wz
2a6c0     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2a6c4     10 00 90 5D |  if_ne	jmp	#LR__3777
2a6c8     13 13 02 F6 | 	mov	arg01, local01
2a6cc     08 14 06 F6 | 	mov	arg02, #8
2a6d0     88 FE BF FD | 	call	#__system____builtin_atoi
2a6d4     FD 2A 02 F6 | 	mov	local03, result1
2a6d8                 | LR__3777
2a6d8                 | LR__3778
2a6d8                 | LR__3779
2a6d8                 | LR__3780
2a6d8     00 2E 0E F2 | 	cmp	local05, #0 wz
2a6dc     15 2B 62 56 |  if_ne	neg	local03, local03
2a6e0     15 FB 01 F6 | 	mov	result1, local03
2a6e4     A7 F0 03 F6 | 	mov	ptra, fp
2a6e8     B2 00 A0 FD | 	call	#popregs_
2a6ec                 | __system____builtin_atoi_ret
2a6ec     2D 00 64 FD | 	ret
2a6f0                 | 
2a6f0                 | __system____builtin_atof
2a6f0     07 4A 05 F6 | 	mov	COUNT_, #7
2a6f4     A8 00 A0 FD | 	call	#pushregs_
2a6f8     09 27 02 F6 | 	mov	local01, arg01
2a6fc     00 28 06 F6 | 	mov	local02, #0
2a700     00 2A 06 F6 | 	mov	local03, #0
2a704     00 2C 06 F6 | 	mov	local04, #0
2a708     00 2E 06 F6 | 	mov	local05, #0
2a70c     97 08 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
2a710                 | LR__3790
2a710     13 17 C2 FA | 	rdbyte	arg03, local01
2a714     20 16 0E F2 | 	cmp	arg03, #32 wz
2a718     01 26 06 A1 |  if_e	add	local01, #1
2a71c     F0 FF 9F AD |  if_e	jmp	#LR__3790
2a720                 | LR__3791
2a720     13 31 C2 FA | 	rdbyte	local06, local01
2a724                 | LR__3792
2a724     2B 30 0E F2 | 	cmp	local06, #43 wz
2a728     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2a72c     14 00 90 5D |  if_ne	jmp	#LR__3793
2a730     2D 30 0E F2 | 	cmp	local06, #45 wz
2a734     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2a738     01 26 06 F1 | 	add	local01, #1
2a73c     13 31 C2 FA | 	rdbyte	local06, local01
2a740     E0 FF 9F FD | 	jmp	#LR__3792
2a744                 | LR__3793
2a744                 | LR__3794
2a744     97 08 48 FB | 	callpa	#(@LR__3796-@LR__3795)>>2,fcache_load_ptr_
2a748                 | LR__3795
2a748     13 31 C2 FA | 	rdbyte	local06, local01
2a74c     5F 30 0E F2 | 	cmp	local06, #95 wz
2a750     01 26 06 F1 | 	add	local01, #1
2a754     F0 FF 9F AD |  if_e	jmp	#LR__3795
2a758                 | LR__3796
2a758     00 30 0E F2 | 	cmp	local06, #0 wz
2a75c     5C 00 90 AD |  if_e	jmp	#LR__3798
2a760     30 30 56 F2 | 	cmps	local06, #48 wc
2a764     44 00 90 CD |  if_b	jmp	#LR__3797
2a768     3A 30 56 F2 | 	cmps	local06, #58 wc
2a76c     3C 00 90 3D |  if_ae	jmp	#LR__3797
2a770     14 13 02 F6 | 	mov	arg01, local02
2a774     00 90 20 FF 
2a778     00 14 06 F6 | 	mov	arg02, ##1092616192
2a77c     64 F7 BF FD | 	call	#__system___float_mul
2a780     FD 28 02 F6 | 	mov	local02, result1
2a784     30 30 86 F1 | 	sub	local06, #48
2a788     18 13 02 F6 | 	mov	arg01, local06
2a78c     50 F3 BF FD | 	call	#__system___float_fromuns
2a790     FD 14 02 F6 | 	mov	arg02, result1
2a794     14 13 02 F6 | 	mov	arg01, local02
2a798     78 F3 BF FD | 	call	#__system___float_add
2a79c     FD 28 02 F6 | 	mov	local02, result1
2a7a0     00 2E 0E F2 | 	cmp	local05, #0 wz
2a7a4     01 2A 86 51 |  if_ne	sub	local03, #1
2a7a8     98 FF 9F FD | 	jmp	#LR__3794
2a7ac                 | LR__3797
2a7ac     2E 30 0E F2 | 	cmp	local06, #46 wz
2a7b0     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2a7b4     01 2E 06 A6 |  if_e	mov	local05, #1
2a7b8     88 FF 9F AD |  if_e	jmp	#LR__3794
2a7bc                 | LR__3798
2a7bc     45 30 0E F2 | 	cmp	local06, #69 wz
2a7c0     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2a7c4     18 00 90 5D |  if_ne	jmp	#LR__3799
2a7c8     13 13 02 F6 | 	mov	arg01, local01
2a7cc     00 14 06 F6 | 	mov	arg02, #0
2a7d0     88 FD BF FD | 	call	#__system____builtin_atoi
2a7d4     15 FB 01 F1 | 	add	result1, local03
2a7d8     FD 32 02 F6 | 	mov	local07, result1
2a7dc     04 00 90 FD | 	jmp	#LR__3800
2a7e0                 | LR__3799
2a7e0     15 33 02 F6 | 	mov	local07, local03
2a7e4                 | LR__3800
2a7e4     19 17 02 F6 | 	mov	arg03, local07
2a7e8     14 13 02 F6 | 	mov	arg01, local02
2a7ec     00 90 20 FF 
2a7f0     00 14 06 F6 | 	mov	arg02, ##1092616192
2a7f4     F4 06 B0 FD | 	call	#__system___float_pow_n
2a7f8     16 FB 61 F5 | 	xor	result1, local04
2a7fc     A7 F0 03 F6 | 	mov	ptra, fp
2a800     B2 00 A0 FD | 	call	#popregs_
2a804                 | __system____builtin_atof_ret
2a804     2D 00 64 FD | 	ret
2a808                 | 
2a808                 | __system____builtin_ilogb
2a808     FC FB BF FD | 	call	#__system___float_Unpack
2a80c     00 FE 0D F2 | 	cmp	result3, #0 wz
2a810     00 00 40 AF 
2a814     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2a818     24 00 90 AD |  if_e	jmp	#LR__3811
2a81c     80 FC 0D F2 | 	cmp	result2, #128 wz
2a820     18 00 90 5D |  if_ne	jmp	#LR__3810
2a824     00 00 10 FF 
2a828     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2a82c     1E FA CD A9 |  if_e	bmask	result1, #30
2a830     0C 00 90 AD |  if_e	jmp	#LR__3811
2a834     1F FA C5 F9 | 	decod	result1, #31
2a838     04 00 90 FD | 	jmp	#LR__3811
2a83c                 | LR__3810
2a83c     FE FA 01 F6 | 	mov	result1, result2
2a840                 | LR__3811
2a840                 | __system____builtin_ilogb_ret
2a840     2D 00 64 FD | 	ret
2a844                 | 
2a844                 | __system____builtin_sinf
2a844     03 4A 05 F6 | 	mov	COUNT_, #3
2a848     A8 00 A0 FD | 	call	#pushregs_
2a84c     09 27 02 F6 | 	mov	local01, arg01
2a850     87 64 20 FF 
2a854     DB 15 06 F6 | 	mov	arg02, ##1086918619
2a858     8C F8 BF FD | 	call	#__system___float_div
2a85c     FD 12 02 F6 | 	mov	arg01, result1
2a860     00 14 06 F6 | 	mov	arg02, #0
2a864     44 FB BF FD | 	call	#__system___float_tointeger
2a868     FD 16 0A F6 | 	mov	arg03, result1 wz
2a86c     44 00 90 AD |  if_e	jmp	#LR__3820
2a870     0B 13 52 F6 | 	abs	arg01, arg03 wc
2a874     1F 28 C6 C9 |  if_b	decod	local02, #31
2a878     00 28 06 36 |  if_ae	mov	local02, #0
2a87c     60 F2 BF FD | 	call	#__system___float_fromuns
2a880     14 FB 61 F5 | 	xor	result1, local02
2a884     FD 12 02 F6 | 	mov	arg01, result1
2a888     1E 14 C6 F9 | 	decod	arg02, #30
2a88c     54 F6 BF FD | 	call	#__system___float_mul
2a890     FD 12 02 F6 | 	mov	arg01, result1
2a894     87 24 20 FF 
2a898     DB 15 06 F6 | 	mov	arg02, ##1078530011
2a89c     44 F6 BF FD | 	call	#__system___float_mul
2a8a0     FD 14 02 F6 | 	mov	arg02, result1
2a8a4     13 13 02 F6 | 	mov	arg01, local01
2a8a8     1F 14 E6 F4 | 	bitnot	arg02, #31
2a8ac     64 F2 BF FD | 	call	#__system___float_add
2a8b0     FD 26 02 F6 | 	mov	local01, result1
2a8b4                 | LR__3820
2a8b4     13 13 02 F6 | 	mov	arg01, local01
2a8b8     66 E6 1E FF 
2a8bc     CD 14 06 F6 | 	mov	arg02, ##1036831949
2a8c0     01 16 06 F6 | 	mov	arg03, #1
2a8c4     50 FA BF FD | 	call	#__system___float_cmp
2a8c8     00 FA 55 F2 | 	cmps	result1, #0 wc
2a8cc     5C 00 90 3D |  if_ae	jmp	#LR__3821
2a8d0     13 13 02 F6 | 	mov	arg01, local01
2a8d4     66 E6 5E FF 
2a8d8     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2a8dc     01 16 66 F6 | 	neg	arg03, #1
2a8e0     34 FA BF FD | 	call	#__system___float_cmp
2a8e4     01 FA 55 F2 | 	cmps	result1, #1 wc
2a8e8     40 00 90 CD |  if_b	jmp	#LR__3821
2a8ec     13 13 02 F6 | 	mov	arg01, local01
2a8f0     13 15 02 F6 | 	mov	arg02, local01
2a8f4     EC F5 BF FD | 	call	#__system___float_mul
2a8f8     FD 12 02 F6 | 	mov	arg01, result1
2a8fc     13 15 02 F6 | 	mov	arg02, local01
2a900     E0 F5 BF FD | 	call	#__system___float_mul
2a904     FD 12 02 F6 | 	mov	arg01, result1
2a908     00 60 20 FF 
2a90c     00 14 06 F6 | 	mov	arg02, ##1086324736
2a910     D4 F7 BF FD | 	call	#__system___float_div
2a914     FD 14 02 F6 | 	mov	arg02, result1
2a918     13 13 02 F6 | 	mov	arg01, local01
2a91c     1F 14 E6 F4 | 	bitnot	arg02, #31
2a920     F0 F1 BF FD | 	call	#__system___float_add
2a924     FD 2A 02 F6 | 	mov	local03, result1
2a928     54 00 90 FD | 	jmp	#LR__3822
2a92c                 | LR__3821
2a92c     13 13 02 F6 | 	mov	arg01, local01
2a930     7C 91 26 FF 
2a934     83 15 06 F6 | 	mov	arg02, ##1294137731
2a938     A8 F5 BF FD | 	call	#__system___float_mul
2a93c     FD 12 02 F6 | 	mov	arg01, result1
2a940     00 14 06 F6 | 	mov	arg02, #0
2a944     64 FA BF FD | 	call	#__system___float_tointeger
2a948     02 FA 65 F0 | 	shl	result1, #2
2a94c     00 00 A0 FF 
2a950     FD 00 48 FD | 	qrotate	##1073741824, result1
2a954     19 12 62 FD | 	getqy	arg01
2a958     09 13 52 F6 | 	abs	arg01, arg01 wc
2a95c     1F 28 C6 C9 |  if_b	decod	local02, #31
2a960     00 28 06 36 |  if_ae	mov	local02, #0
2a964     78 F1 BF FD | 	call	#__system___float_fromuns
2a968     14 FB 61 F5 | 	xor	result1, local02
2a96c     FD 12 02 F6 | 	mov	arg01, result1
2a970     00 40 27 FF 
2a974     00 14 06 F6 | 	mov	arg02, ##1317011456
2a978     6C F7 BF FD | 	call	#__system___float_div
2a97c     FD 2A 02 F6 | 	mov	local03, result1
2a980                 | LR__3822
2a980     15 FB 01 F6 | 	mov	result1, local03
2a984     A7 F0 03 F6 | 	mov	ptra, fp
2a988     B2 00 A0 FD | 	call	#popregs_
2a98c                 | __system____builtin_sinf_ret
2a98c     2D 00 64 FD | 	ret
2a990                 | 
2a990                 | __system____builtin_tanf
2a990     02 4A 05 F6 | 	mov	COUNT_, #2
2a994     A8 00 A0 FD | 	call	#pushregs_
2a998     09 27 02 F6 | 	mov	local01, arg01
2a99c     A4 FE BF FD | 	call	#__system____builtin_sinf
2a9a0     FD 28 02 F6 | 	mov	local02, result1
2a9a4     13 15 02 F6 | 	mov	arg02, local01
2a9a8     87 E4 1F FF 
2a9ac     DB 13 06 F6 | 	mov	arg01, ##1070141403
2a9b0     1F 14 E6 F4 | 	bitnot	arg02, #31
2a9b4     5C F1 BF FD | 	call	#__system___float_add
2a9b8     FD 12 02 F6 | 	mov	arg01, result1
2a9bc     84 FE BF FD | 	call	#__system____builtin_sinf
2a9c0     FD 14 02 F6 | 	mov	arg02, result1
2a9c4     14 13 02 F6 | 	mov	arg01, local02
2a9c8     1C F7 BF FD | 	call	#__system___float_div
2a9cc     A7 F0 03 F6 | 	mov	ptra, fp
2a9d0     B2 00 A0 FD | 	call	#popregs_
2a9d4                 | __system____builtin_tanf_ret
2a9d4     2D 00 64 FD | 	ret
2a9d8                 | 
2a9d8                 | __system____builtin_asinf
2a9d8     01 4A 05 F6 | 	mov	COUNT_, #1
2a9dc     A8 00 A0 FD | 	call	#pushregs_
2a9e0     09 27 02 F6 | 	mov	local01, arg01
2a9e4     13 15 02 F6 | 	mov	arg02, local01
2a9e8     13 13 02 F6 | 	mov	arg01, local01
2a9ec     F4 F4 BF FD | 	call	#__system___float_mul
2a9f0     FD 14 02 F6 | 	mov	arg02, result1
2a9f4     00 C0 1F FF 
2a9f8     00 12 06 F6 | 	mov	arg01, ##1065353216
2a9fc     1F 14 E6 F4 | 	bitnot	arg02, #31
2aa00     10 F1 BF FD | 	call	#__system___float_add
2aa04     FD 12 02 F6 | 	mov	arg01, result1
2aa08     00 F4 BF FD | 	call	#__system___float_sqrt
2aa0c     FD 14 02 F6 | 	mov	arg02, result1
2aa10     13 13 02 F6 | 	mov	arg01, local01
2aa14     58 00 B0 FD | 	call	#__system____builtin_atan2f
2aa18     A7 F0 03 F6 | 	mov	ptra, fp
2aa1c     B2 00 A0 FD | 	call	#popregs_
2aa20                 | __system____builtin_asinf_ret
2aa20     2D 00 64 FD | 	ret
2aa24                 | 
2aa24                 | __system____builtin_acosf
2aa24     01 4A 05 F6 | 	mov	COUNT_, #1
2aa28     A8 00 A0 FD | 	call	#pushregs_
2aa2c     09 27 02 F6 | 	mov	local01, arg01
2aa30     13 15 02 F6 | 	mov	arg02, local01
2aa34     13 13 02 F6 | 	mov	arg01, local01
2aa38     A8 F4 BF FD | 	call	#__system___float_mul
2aa3c     FD 14 02 F6 | 	mov	arg02, result1
2aa40     00 C0 1F FF 
2aa44     00 12 06 F6 | 	mov	arg01, ##1065353216
2aa48     1F 14 E6 F4 | 	bitnot	arg02, #31
2aa4c     C4 F0 BF FD | 	call	#__system___float_add
2aa50     FD 12 02 F6 | 	mov	arg01, result1
2aa54     B4 F3 BF FD | 	call	#__system___float_sqrt
2aa58     FD 12 02 F6 | 	mov	arg01, result1
2aa5c     13 15 02 F6 | 	mov	arg02, local01
2aa60     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2aa64     A7 F0 03 F6 | 	mov	ptra, fp
2aa68     B2 00 A0 FD | 	call	#popregs_
2aa6c                 | __system____builtin_acosf_ret
2aa6c     2D 00 64 FD | 	ret
2aa70                 | 
2aa70                 | __system____builtin_atan2f
2aa70     04 4A 05 F6 | 	mov	COUNT_, #4
2aa74     A8 00 A0 FD | 	call	#pushregs_
2aa78     09 27 02 F6 | 	mov	local01, arg01
2aa7c     0A 29 02 F6 | 	mov	local02, arg02
2aa80     13 13 02 F6 | 	mov	arg01, local01
2aa84     00 14 06 F6 | 	mov	arg02, #0
2aa88     01 16 06 F6 | 	mov	arg03, #1
2aa8c     88 F8 BF FD | 	call	#__system___float_cmp
2aa90     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa94     28 00 90 5D |  if_ne	jmp	#LR__3830
2aa98     14 13 02 F6 | 	mov	arg01, local02
2aa9c     00 14 06 F6 | 	mov	arg02, #0
2aaa0     01 16 06 F6 | 	mov	arg03, #1
2aaa4     70 F8 BF FD | 	call	#__system___float_cmp
2aaa8     00 FA 55 F2 | 	cmps	result1, #0 wc
2aaac     87 24 60 CF 
2aab0     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2aab4     DC 00 90 CD |  if_b	jmp	#LR__3831
2aab8     00 FA 05 F6 | 	mov	result1, #0
2aabc     D4 00 90 FD | 	jmp	#LR__3831
2aac0                 | LR__3830
2aac0     14 13 02 F6 | 	mov	arg01, local02
2aac4     14 15 02 F6 | 	mov	arg02, local02
2aac8     18 F4 BF FD | 	call	#__system___float_mul
2aacc     FD 2A 02 F6 | 	mov	local03, result1
2aad0     13 13 02 F6 | 	mov	arg01, local01
2aad4     13 15 02 F6 | 	mov	arg02, local01
2aad8     08 F4 BF FD | 	call	#__system___float_mul
2aadc     FD 14 02 F6 | 	mov	arg02, result1
2aae0     15 13 02 F6 | 	mov	arg01, local03
2aae4     2C F0 BF FD | 	call	#__system___float_add
2aae8     FD 12 02 F6 | 	mov	arg01, result1
2aaec     1C F3 BF FD | 	call	#__system___float_sqrt
2aaf0     FD 2A 02 F6 | 	mov	local03, result1
2aaf4     14 13 02 F6 | 	mov	arg01, local02
2aaf8     15 15 02 F6 | 	mov	arg02, local03
2aafc     E8 F5 BF FD | 	call	#__system___float_div
2ab00     FD 28 02 F6 | 	mov	local02, result1
2ab04     13 13 02 F6 | 	mov	arg01, local01
2ab08     15 15 02 F6 | 	mov	arg02, local03
2ab0c     D8 F5 BF FD | 	call	#__system___float_div
2ab10     FD 26 02 F6 | 	mov	local01, result1
2ab14     00 40 27 FF 
2ab18     00 12 06 F6 | 	mov	arg01, ##1317011456
2ab1c     14 15 02 F6 | 	mov	arg02, local02
2ab20     C0 F3 BF FD | 	call	#__system___float_mul
2ab24     FD 12 02 F6 | 	mov	arg01, result1
2ab28     00 14 06 F6 | 	mov	arg02, #0
2ab2c     7C F8 BF FD | 	call	#__system___float_tointeger
2ab30     FD 2A 02 F6 | 	mov	local03, result1
2ab34     00 40 27 FF 
2ab38     00 12 06 F6 | 	mov	arg01, ##1317011456
2ab3c     13 15 02 F6 | 	mov	arg02, local01
2ab40     A0 F3 BF FD | 	call	#__system___float_mul
2ab44     FD 12 02 F6 | 	mov	arg01, result1
2ab48     00 14 06 F6 | 	mov	arg02, #0
2ab4c     5C F8 BF FD | 	call	#__system___float_tointeger
2ab50     FD 2A 52 FD | 	qvector	local03, result1
2ab54     87 24 20 FF 
2ab58     DB 2B 06 F6 | 	mov	local03, ##1078530011
2ab5c     19 12 62 FD | 	getqy	arg01
2ab60     01 12 C6 F0 | 	sar	arg01, #1
2ab64     09 13 52 F6 | 	abs	arg01, arg01 wc
2ab68     1F 2C C6 C9 |  if_b	decod	local04, #31
2ab6c     00 2C 06 36 |  if_ae	mov	local04, #0
2ab70     6C EF BF FD | 	call	#__system___float_fromuns
2ab74     16 FB 61 F5 | 	xor	result1, local04
2ab78     FD 12 02 F6 | 	mov	arg01, result1
2ab7c     00 40 27 FF 
2ab80     00 14 06 F6 | 	mov	arg02, ##1317011456
2ab84     60 F5 BF FD | 	call	#__system___float_div
2ab88     FD 14 02 F6 | 	mov	arg02, result1
2ab8c     15 13 02 F6 | 	mov	arg01, local03
2ab90     50 F3 BF FD | 	call	#__system___float_mul
2ab94                 | LR__3831
2ab94     A7 F0 03 F6 | 	mov	ptra, fp
2ab98     B2 00 A0 FD | 	call	#popregs_
2ab9c                 | __system____builtin_atan2f_ret
2ab9c     2D 00 64 FD | 	ret
2aba0                 | 
2aba0                 | __system____builtin_exp2f
2aba0     04 4A 05 F6 | 	mov	COUNT_, #4
2aba4     A8 00 A0 FD | 	call	#pushregs_
2aba8     09 27 02 F6 | 	mov	local01, arg01
2abac     00 7F 21 FF 
2abb0     00 14 06 F6 | 	mov	arg02, ##1123942400
2abb4     01 16 66 F6 | 	neg	arg03, #1
2abb8     5C F7 BF FD | 	call	#__system___float_cmp
2abbc     00 FA 55 F2 | 	cmps	result1, #0 wc
2abc0     00 C0 3F 3F 
2abc4     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2abc8     DC 00 90 3D |  if_ae	jmp	#LR__3841
2abcc     13 13 02 F6 | 	mov	arg01, local01
2abd0     00 7F 61 FF 
2abd4     00 14 06 F6 | 	mov	arg02, ##-1023541248
2abd8     01 16 06 F6 | 	mov	arg03, #1
2abdc     38 F7 BF FD | 	call	#__system___float_cmp
2abe0     00 FA 55 F2 | 	cmps	result1, #0 wc
2abe4     00 FA 05 C6 |  if_b	mov	result1, #0
2abe8     BC 00 90 CD |  if_b	jmp	#LR__3841
2abec     13 13 02 F6 | 	mov	arg01, local01
2abf0     00 14 06 F6 | 	mov	arg02, #0
2abf4     B4 F7 BF FD | 	call	#__system___float_tointeger
2abf8     FD 28 02 F6 | 	mov	local02, result1
2abfc     14 13 52 F6 | 	abs	arg01, local02 wc
2ac00     1F 2A C6 C9 |  if_b	decod	local03, #31
2ac04     00 2A 06 36 |  if_ae	mov	local03, #0
2ac08     D4 EE BF FD | 	call	#__system___float_fromuns
2ac0c     15 FB 61 F5 | 	xor	result1, local03
2ac10     FD 14 02 F6 | 	mov	arg02, result1
2ac14     13 13 02 F6 | 	mov	arg01, local01
2ac18     1F 14 E6 F4 | 	bitnot	arg02, #31
2ac1c     F4 EE BF FD | 	call	#__system___float_add
2ac20     FD 2C 02 F6 | 	mov	local04, result1
2ac24     16 13 02 F6 | 	mov	arg01, local04
2ac28     00 14 06 F6 | 	mov	arg02, #0
2ac2c     01 16 06 F6 | 	mov	arg03, #1
2ac30     E4 F6 BF FD | 	call	#__system___float_cmp
2ac34     00 FA 55 F2 | 	cmps	result1, #0 wc
2ac38     18 00 90 3D |  if_ae	jmp	#LR__3840
2ac3c     16 13 02 F6 | 	mov	arg01, local04
2ac40     00 C0 1F FF 
2ac44     00 14 06 F6 | 	mov	arg02, ##1065353216
2ac48     C8 EE BF FD | 	call	#__system___float_add
2ac4c     FD 2C 02 F6 | 	mov	local04, result1
2ac50     01 28 86 F1 | 	sub	local02, #1
2ac54                 | LR__3840
2ac54     7F 28 06 F1 | 	add	local02, #127
2ac58     17 28 66 F0 | 	shl	local02, #23
2ac5c     16 13 02 F6 | 	mov	arg01, local04
2ac60     00 80 26 FF 
2ac64     00 14 06 F6 | 	mov	arg02, ##1291845632
2ac68     78 F2 BF FD | 	call	#__system___float_mul
2ac6c     FD 12 02 F6 | 	mov	arg01, result1
2ac70     00 14 06 F6 | 	mov	arg02, #0
2ac74     34 F7 BF FD | 	call	#__system___float_tointeger
2ac78     FD 2C 0A F6 | 	mov	local04, result1 wz
2ac7c     14 FB 01 A6 |  if_e	mov	result1, local02
2ac80     24 00 90 AD |  if_e	jmp	#LR__3841
2ac84     3E 2C 26 F4 | 	bith	local04, #62
2ac88     0F 2C 62 FD | 	qexp	local04
2ac8c     14 13 02 F6 | 	mov	arg01, local02
2ac90     18 14 62 FD | 	getqx	arg02
2ac94     01 14 06 F1 | 	add	arg02, #1
2ac98     01 14 46 F0 | 	shr	arg02, #1
2ac9c     00 80 1F FF 
2aca0     00 14 06 F1 | 	add	arg02, ##1056964608
2aca4     3C F2 BF FD | 	call	#__system___float_mul
2aca8                 | LR__3841
2aca8     A7 F0 03 F6 | 	mov	ptra, fp
2acac     B2 00 A0 FD | 	call	#popregs_
2acb0                 | __system____builtin_exp2f_ret
2acb0     2D 00 64 FD | 	ret
2acb4                 | 
2acb4                 | __system____builtin_log2f
2acb4     06 4A 05 F6 | 	mov	COUNT_, #6
2acb8     A8 00 A0 FD | 	call	#pushregs_
2acbc     09 27 02 F6 | 	mov	local01, arg01
2acc0     09 29 0A F6 | 	mov	local02, arg01 wz
2acc4     00 00 40 5F 
2acc8     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2accc     00 40 00 AF 
2acd0     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2acd4     08 01 90 AD |  if_e	jmp	#LR__3854
2acd8     00 28 56 F2 | 	cmps	local02, #0 wc
2acdc     00 E0 3F CF 
2ace0     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2ace4     F8 00 90 CD |  if_b	jmp	#LR__3854
2ace8     13 13 02 F6 | 	mov	arg01, local01
2acec     00 90 20 FF 
2acf0     00 14 06 F6 | 	mov	arg02, ##1092616192
2acf4     01 16 06 F6 | 	mov	arg03, #1
2acf8     1C F6 BF FD | 	call	#__system___float_cmp
2acfc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad00     4D 2A 20 AF 
2ad04     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2ad08     D4 00 90 AD |  if_e	jmp	#LR__3854
2ad0c     13 13 02 F6 | 	mov	arg01, local01
2ad10     FC 16 20 FF 
2ad14     54 14 06 F6 | 	mov	arg02, ##1076754516
2ad18     01 16 06 F6 | 	mov	arg03, #1
2ad1c     F8 F5 BF FD | 	call	#__system___float_cmp
2ad20     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad24     55 DC 1F AF 
2ad28     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2ad2c     B0 00 90 AD |  if_e	jmp	#LR__3854
2ad30     14 2B 02 F6 | 	mov	local03, local02
2ad34     17 2A 46 F0 | 	shr	local03, #23
2ad38     15 2B E2 F8 | 	getbyte	local03, local03, #0
2ad3c     17 29 06 F4 | 	bitl	local02, #279
2ad40     14 2D 02 F6 | 	mov	local04, local02
2ad44     FF 2A 0E F2 | 	cmp	local03, #255 wz
2ad48     1C 00 90 5D |  if_ne	jmp	#LR__3850
2ad4c     00 2C 0E F2 | 	cmp	local04, #0 wz
2ad50     00 C0 3F 5F 
2ad54     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2ad58     00 E0 3F AF 
2ad5c     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2ad60     17 FB 01 F6 | 	mov	result1, local05
2ad64     78 00 90 FD | 	jmp	#LR__3854
2ad68                 | LR__3850
2ad68     00 2A 0E F2 | 	cmp	local03, #0 wz
2ad6c     17 2C 26 54 |  if_ne	bith	local04, #23
2ad70     7F 2A 86 51 |  if_ne	sub	local03, #127
2ad74     28 00 90 5D |  if_ne	jmp	#LR__3853
2ad78     00 2C 0E F2 | 	cmp	local04, #0 wz
2ad7c     00 40 00 AF 
2ad80     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2ad84     58 00 90 AD |  if_e	jmp	#LR__3854
2ad88     7E 2A 66 F6 | 	neg	local03, #126
2ad8c     97 08 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
2ad90                 | LR__3851
2ad90     17 2C 2E F4 | 	testbn	local04, #23 wz
2ad94     01 2C 66 A0 |  if_e	shl	local04, #1
2ad98     01 2A 06 A1 |  if_e	add	local03, #1
2ad9c     F0 FF 9F AD |  if_e	jmp	#LR__3851
2ada0                 | LR__3852
2ada0                 | LR__3853
2ada0     0E 2C 62 FD | 	qlog	local04
2ada4     01 2A 86 F1 | 	sub	local03, #1
2ada8     15 13 52 F6 | 	abs	arg01, local03 wc
2adac     1F 30 C6 C9 |  if_b	decod	local06, #31
2adb0     00 30 06 36 |  if_ae	mov	local06, #0
2adb4     18 2E 62 FD | 	getqx	local05
2adb8     9B 2E 06 F4 | 	bitl	local05, #155
2adbc     08 2E 06 F1 | 	add	local05, #8
2adc0     04 2E 46 F0 | 	shr	local05, #4
2adc4     00 C0 1F FF 
2adc8     00 2E 06 F1 | 	add	local05, ##1065353216
2adcc     10 ED BF FD | 	call	#__system___float_fromuns
2add0     18 FB 61 F5 | 	xor	result1, local06
2add4     FD 14 02 F6 | 	mov	arg02, result1
2add8     17 13 02 F6 | 	mov	arg01, local05
2addc     34 ED BF FD | 	call	#__system___float_add
2ade0                 | LR__3854
2ade0     A7 F0 03 F6 | 	mov	ptra, fp
2ade4     B2 00 A0 FD | 	call	#popregs_
2ade8                 | __system____builtin_log2f_ret
2ade8     2D 00 64 FD | 	ret
2adec                 | 
2adec                 | __system____builtin_powf
2adec     04 4A 05 F6 | 	mov	COUNT_, #4
2adf0     A8 00 A0 FD | 	call	#pushregs_
2adf4     09 27 02 F6 | 	mov	local01, arg01
2adf8     0A 29 02 F6 | 	mov	local02, arg02
2adfc     14 13 02 F6 | 	mov	arg01, local02
2ae00     00 14 06 F6 | 	mov	arg02, #0
2ae04     A4 F5 BF FD | 	call	#__system___float_tointeger
2ae08     FD 2A 02 F6 | 	mov	local03, result1
2ae0c     15 13 52 F6 | 	abs	arg01, local03 wc
2ae10     1F 2C C6 C9 |  if_b	decod	local04, #31
2ae14     00 2C 06 36 |  if_ae	mov	local04, #0
2ae18     C4 EC BF FD | 	call	#__system___float_fromuns
2ae1c     16 FB 61 F5 | 	xor	result1, local04
2ae20     FD 12 02 F6 | 	mov	arg01, result1
2ae24     14 15 02 F6 | 	mov	arg02, local02
2ae28     01 16 06 F6 | 	mov	arg03, #1
2ae2c     E8 F4 BF FD | 	call	#__system___float_cmp
2ae30     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae34     18 00 90 5D |  if_ne	jmp	#LR__3860
2ae38     00 C0 1F FF 
2ae3c     00 12 06 F6 | 	mov	arg01, ##1065353216
2ae40     13 15 02 F6 | 	mov	arg02, local01
2ae44     15 17 02 F6 | 	mov	arg03, local03
2ae48     A0 00 B0 FD | 	call	#__system___float_pow_n
2ae4c     58 00 90 FD | 	jmp	#LR__3861
2ae50                 | LR__3860
2ae50     13 13 02 F6 | 	mov	arg01, local01
2ae54     00 14 06 F6 | 	mov	arg02, #0
2ae58     01 16 06 F6 | 	mov	arg03, #1
2ae5c     B8 F4 BF FD | 	call	#__system___float_cmp
2ae60     00 FA 55 F2 | 	cmps	result1, #0 wc
2ae64     00 E0 3F CF 
2ae68     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2ae6c     38 00 90 CD |  if_b	jmp	#LR__3861
2ae70     13 13 02 F6 | 	mov	arg01, local01
2ae74     00 14 06 F6 | 	mov	arg02, #0
2ae78     01 16 06 F6 | 	mov	arg03, #1
2ae7c     98 F4 BF FD | 	call	#__system___float_cmp
2ae80     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae84     00 FA 05 A6 |  if_e	mov	result1, #0
2ae88     1C 00 90 AD |  if_e	jmp	#LR__3861
2ae8c     13 13 02 F6 | 	mov	arg01, local01
2ae90     20 FE BF FD | 	call	#__system____builtin_log2f
2ae94     FD 12 02 F6 | 	mov	arg01, result1
2ae98     14 15 02 F6 | 	mov	arg02, local02
2ae9c     44 F0 BF FD | 	call	#__system___float_mul
2aea0     FD 12 02 F6 | 	mov	arg01, result1
2aea4     F8 FC BF FD | 	call	#__system____builtin_exp2f
2aea8                 | LR__3861
2aea8     A7 F0 03 F6 | 	mov	ptra, fp
2aeac     B2 00 A0 FD | 	call	#popregs_
2aeb0                 | __system____builtin_powf_ret
2aeb0     2D 00 64 FD | 	ret
2aeb4                 | 
2aeb4                 | __system____builtin_logbase
2aeb4     02 4A 05 F6 | 	mov	COUNT_, #2
2aeb8     A8 00 A0 FD | 	call	#pushregs_
2aebc     09 27 02 F6 | 	mov	local01, arg01
2aec0     0A 13 02 F6 | 	mov	arg01, arg02
2aec4     EC FD BF FD | 	call	#__system____builtin_log2f
2aec8     FD 28 02 F6 | 	mov	local02, result1
2aecc     13 13 02 F6 | 	mov	arg01, local01
2aed0     E0 FD BF FD | 	call	#__system____builtin_log2f
2aed4     FD 14 02 F6 | 	mov	arg02, result1
2aed8     14 13 02 F6 | 	mov	arg01, local02
2aedc     08 F2 BF FD | 	call	#__system___float_div
2aee0     A7 F0 03 F6 | 	mov	ptra, fp
2aee4     B2 00 A0 FD | 	call	#popregs_
2aee8                 | __system____builtin_logbase_ret
2aee8     2D 00 64 FD | 	ret
2aeec                 | 
2aeec                 | __system___float_pow_n
2aeec     05 4A 05 F6 | 	mov	COUNT_, #5
2aef0     A8 00 A0 FD | 	call	#pushregs_
2aef4     09 27 02 F6 | 	mov	local01, arg01
2aef8     0A 29 02 F6 | 	mov	local02, arg02
2aefc     0B 2B 02 F6 | 	mov	local03, arg03
2af00     00 2A 56 F2 | 	cmps	local03, #0 wc
2af04     18 00 90 3D |  if_ae	jmp	#LR__3870
2af08     01 2C 06 F6 | 	mov	local04, #1
2af0c     15 2B 62 F6 | 	neg	local03, local03
2af10     00 2A 56 F2 | 	cmps	local03, #0 wc
2af14     00 FA 05 C6 |  if_b	mov	result1, #0
2af18     94 00 90 CD |  if_b	jmp	#LR__3878
2af1c     04 00 90 FD | 	jmp	#LR__3871
2af20                 | LR__3870
2af20     00 2C 06 F6 | 	mov	local04, #0
2af24                 | LR__3871
2af24     00 C0 1F FF 
2af28     00 2E 06 F6 | 	mov	local05, ##1065353216
2af2c                 | LR__3872
2af2c     01 2A 56 F2 | 	cmps	local03, #1 wc
2af30     30 00 90 CD |  if_b	jmp	#LR__3874
2af34     01 2A CE F7 | 	test	local03, #1 wz
2af38     10 00 90 AD |  if_e	jmp	#LR__3873
2af3c     17 13 02 F6 | 	mov	arg01, local05
2af40     14 15 02 F6 | 	mov	arg02, local02
2af44     9C EF BF FD | 	call	#__system___float_mul
2af48     FD 2E 02 F6 | 	mov	local05, result1
2af4c                 | LR__3873
2af4c     01 2A C6 F0 | 	sar	local03, #1
2af50     14 13 02 F6 | 	mov	arg01, local02
2af54     14 15 02 F6 | 	mov	arg02, local02
2af58     88 EF BF FD | 	call	#__system___float_mul
2af5c     FD 28 02 F6 | 	mov	local02, result1
2af60     C8 FF 9F FD | 	jmp	#LR__3872
2af64                 | LR__3874
2af64     00 2C 0E F2 | 	cmp	local04, #0 wz
2af68     14 00 90 AD |  if_e	jmp	#LR__3875
2af6c     13 13 02 F6 | 	mov	arg01, local01
2af70     17 15 02 F6 | 	mov	arg02, local05
2af74     70 F1 BF FD | 	call	#__system___float_div
2af78     FD 2E 02 F6 | 	mov	local05, result1
2af7c     2C 00 90 FD | 	jmp	#LR__3877
2af80                 | LR__3875
2af80     13 13 02 F6 | 	mov	arg01, local01
2af84     00 C0 1F FF 
2af88     00 14 06 F6 | 	mov	arg02, ##1065353216
2af8c     01 16 06 F6 | 	mov	arg03, #1
2af90     84 F3 BF FD | 	call	#__system___float_cmp
2af94     00 FA 0D F2 | 	cmp	result1, #0 wz
2af98     10 00 90 AD |  if_e	jmp	#LR__3876
2af9c     13 13 02 F6 | 	mov	arg01, local01
2afa0     17 15 02 F6 | 	mov	arg02, local05
2afa4     3C EF BF FD | 	call	#__system___float_mul
2afa8     FD 2E 02 F6 | 	mov	local05, result1
2afac                 | LR__3876
2afac                 | LR__3877
2afac     17 FB 01 F6 | 	mov	result1, local05
2afb0                 | LR__3878
2afb0     A7 F0 03 F6 | 	mov	ptra, fp
2afb4     B2 00 A0 FD | 	call	#popregs_
2afb8                 | __system___float_pow_n_ret
2afb8     2D 00 64 FD | 	ret
2afbc                 | 
2afbc                 | __system___gc_ptrs
2afbc     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2afc0     00 03 02 F6 | 	mov	_var02, _var01
2afc4     BB 00 00 FF 
2afc8     F8 02 06 F1 | 	add	_var02, ##95992
2afcc     00 FD 09 FB | 	rdlong	result2, _var01 wz
2afd0     74 00 90 5D |  if_ne	jmp	#LR__3880
2afd4     01 FD 01 F6 | 	mov	result2, _var02
2afd8     00 FD 81 F1 | 	sub	result2, _var01
2afdc     00 03 58 FC | 	wrword	#1, _var01
2afe0     00 FB 01 F6 | 	mov	result1, _var01
2afe4     02 FA 05 F1 | 	add	result1, #2
2afe8     36 00 80 FF 
2afec     FD 20 59 FC | 	wrword	##27792, result1
2aff0     00 FB 01 F6 | 	mov	result1, _var01
2aff4     04 FA 05 F1 | 	add	result1, #4
2aff8     FD 00 58 FC | 	wrword	#0, result1
2affc     00 FB 01 F6 | 	mov	result1, _var01
2b000     06 FA 05 F1 | 	add	result1, #6
2b004     FD 02 58 FC | 	wrword	#1, result1
2b008     10 00 06 F1 | 	add	_var01, #16
2b00c     FE FC 51 F6 | 	abs	result2, result2 wc
2b010     04 FC 45 F0 | 	shr	result2, #4
2b014     FE FC 81 F6 | 	negc	result2, result2
2b018     00 FD 51 FC | 	wrword	result2, _var01
2b01c     00 FD 01 F6 | 	mov	result2, _var01
2b020     02 FC 05 F1 | 	add	result2, #2
2b024     36 00 80 FF 
2b028     FE 1E 59 FC | 	wrword	##27791, result2
2b02c     00 FD 01 F6 | 	mov	result2, _var01
2b030     04 FC 05 F1 | 	add	result2, #4
2b034     FE 00 58 FC | 	wrword	#0, result2
2b038     00 FD 01 F6 | 	mov	result2, _var01
2b03c     06 FC 05 F1 | 	add	result2, #6
2b040     FE 00 58 FC | 	wrword	#0, result2
2b044     10 00 86 F1 | 	sub	_var01, #16
2b048                 | LR__3880
2b048     00 FB 01 F6 | 	mov	result1, _var01
2b04c     01 FD 01 F6 | 	mov	result2, _var02
2b050                 | __system___gc_ptrs_ret
2b050     2D 00 64 FD | 	ret
2b054                 | 
2b054                 | __system___gc_tryalloc
2b054     0B 4A 05 F6 | 	mov	COUNT_, #11
2b058     A8 00 A0 FD | 	call	#pushregs_
2b05c     09 27 02 F6 | 	mov	local01, arg01
2b060     0A 29 02 F6 | 	mov	local02, arg02
2b064     54 FF BF FD | 	call	#__system___gc_ptrs
2b068     FD 2A 02 F6 | 	mov	local03, result1
2b06c     FE 2C 02 F6 | 	mov	local04, result2
2b070     15 2F 02 F6 | 	mov	local05, local03
2b074     00 30 06 F6 | 	mov	local06, #0
2b078     97 1E 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
2b07c                 | LR__3890
2b07c     17 33 02 F6 | 	mov	local07, local05
2b080     06 2E 06 F1 | 	add	local05, #6
2b084     17 15 EA FA | 	rdword	arg02, local05 wz
2b088     15 13 02 F6 | 	mov	arg01, local03
2b08c     00 FA 05 A6 |  if_e	mov	result1, #0
2b090     04 14 66 50 |  if_ne	shl	arg02, #4
2b094     0A 13 02 51 |  if_ne	add	arg01, arg02
2b098     09 FB 01 56 |  if_ne	mov	result1, arg01
2b09c     FD 2E 0A F6 | 	mov	local05, result1 wz
2b0a0     17 31 E2 5A |  if_ne	rdword	local06, local05
2b0a4     00 2E 0E F2 | 	cmp	local05, #0 wz
2b0a8     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2b0ac     08 00 90 1D |  if_a	jmp	#LR__3892
2b0b0     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2b0b4     C4 FF 9F 1D |  if_a	jmp	#LR__3890
2b0b8                 | LR__3891
2b0b8                 | LR__3892
2b0b8     00 2E 0E F2 | 	cmp	local05, #0 wz
2b0bc     17 FB 01 A6 |  if_e	mov	result1, local05
2b0c0     3C 01 90 AD |  if_e	jmp	#LR__3895
2b0c4     17 FD 01 F6 | 	mov	result2, local05
2b0c8     06 FC 05 F1 | 	add	result2, #6
2b0cc     FE 34 E2 FA | 	rdword	local08, result2
2b0d0     18 27 52 F2 | 	cmps	local01, local06 wc
2b0d4     C0 00 90 3D |  if_ae	jmp	#LR__3894
2b0d8     17 27 52 FC | 	wrword	local01, local05
2b0dc     17 13 02 F6 | 	mov	arg01, local05
2b0e0     13 35 02 F6 | 	mov	local08, local01
2b0e4     04 34 66 F0 | 	shl	local08, #4
2b0e8     1A 13 02 F1 | 	add	arg01, local08
2b0ec     13 31 82 F1 | 	sub	local06, local01
2b0f0     09 31 52 FC | 	wrword	local06, arg01
2b0f4     09 35 02 F6 | 	mov	local08, arg01
2b0f8     02 34 06 F1 | 	add	local08, #2
2b0fc     36 00 80 FF 
2b100     1A 1F 59 FC | 	wrword	##27791, local08
2b104     17 15 0A F6 | 	mov	arg02, local05 wz
2b108     00 FA 05 A6 |  if_e	mov	result1, #0
2b10c     15 15 82 51 |  if_ne	sub	arg02, local03
2b110     04 14 46 50 |  if_ne	shr	arg02, #4
2b114     0A FB 01 56 |  if_ne	mov	result1, arg02
2b118     09 35 02 F6 | 	mov	local08, arg01
2b11c     04 34 06 F1 | 	add	local08, #4
2b120     1A FB 51 FC | 	wrword	result1, local08
2b124     17 35 02 F6 | 	mov	local08, local05
2b128     06 34 06 F1 | 	add	local08, #6
2b12c     09 15 02 F6 | 	mov	arg02, arg01
2b130     1A 35 E2 FA | 	rdword	local08, local08
2b134     06 14 06 F1 | 	add	arg02, #6
2b138     0A 35 52 FC | 	wrword	local08, arg02
2b13c     09 37 02 F6 | 	mov	local09, arg01
2b140     1B 15 0A F6 | 	mov	arg02, local09 wz
2b144     00 FA 05 A6 |  if_e	mov	result1, #0
2b148     15 15 82 51 |  if_ne	sub	arg02, local03
2b14c     04 14 46 50 |  if_ne	shr	arg02, #4
2b150     0A FB 01 56 |  if_ne	mov	result1, arg02
2b154     FD 34 02 F6 | 	mov	local08, result1
2b158     09 39 EA FA | 	rdword	local10, arg01 wz
2b15c     00 FA 05 A6 |  if_e	mov	result1, #0
2b160     04 38 66 50 |  if_ne	shl	local10, #4
2b164     1C 13 02 51 |  if_ne	add	arg01, local10
2b168     09 FB 01 56 |  if_ne	mov	result1, arg01
2b16c     FD 3A 0A F6 | 	mov	local11, result1 wz
2b170     24 00 90 AD |  if_e	jmp	#LR__3893
2b174     16 3B 52 F2 | 	cmps	local11, local04 wc
2b178     1C 00 90 3D |  if_ae	jmp	#LR__3893
2b17c     1B 15 0A F6 | 	mov	arg02, local09 wz
2b180     00 FA 05 A6 |  if_e	mov	result1, #0
2b184     15 15 82 51 |  if_ne	sub	arg02, local03
2b188     04 14 46 50 |  if_ne	shr	arg02, #4
2b18c     0A FB 01 56 |  if_ne	mov	result1, arg02
2b190     04 3A 06 F1 | 	add	local11, #4
2b194     1D FB 51 FC | 	wrword	result1, local11
2b198                 | LR__3893
2b198                 | LR__3894
2b198     06 32 06 F1 | 	add	local07, #6
2b19c     19 35 52 FC | 	wrword	local08, local07
2b1a0     36 00 00 FF 
2b1a4     80 36 06 F6 | 	mov	local09, ##27776
2b1a8     14 37 42 F5 | 	or	local09, local02
2b1ac     00 FA 05 F6 | 	mov	result1, #0
2b1b0     01 FA 61 FD | 	cogid	result1
2b1b4     FD 36 42 F5 | 	or	local09, result1
2b1b8     17 3B 02 F6 | 	mov	local11, local05
2b1bc     02 3A 06 F1 | 	add	local11, #2
2b1c0     1D 37 52 FC | 	wrword	local09, local11
2b1c4     15 37 02 F6 | 	mov	local09, local03
2b1c8     08 36 06 F1 | 	add	local09, #8
2b1cc     17 3B 02 F6 | 	mov	local11, local05
2b1d0     1B 37 E2 FA | 	rdword	local09, local09
2b1d4     06 3A 06 F1 | 	add	local11, #6
2b1d8     1D 37 52 FC | 	wrword	local09, local11
2b1dc     17 15 0A F6 | 	mov	arg02, local05 wz
2b1e0     00 FA 05 A6 |  if_e	mov	result1, #0
2b1e4     15 15 82 51 |  if_ne	sub	arg02, local03
2b1e8     04 14 46 50 |  if_ne	shr	arg02, #4
2b1ec     0A FB 01 56 |  if_ne	mov	result1, arg02
2b1f0     08 2A 06 F1 | 	add	local03, #8
2b1f4     15 FB 51 FC | 	wrword	result1, local03
2b1f8     08 2E 06 F1 | 	add	local05, #8
2b1fc     17 FB 01 F6 | 	mov	result1, local05
2b200                 | LR__3895
2b200     A7 F0 03 F6 | 	mov	ptra, fp
2b204     B2 00 A0 FD | 	call	#popregs_
2b208                 | __system___gc_tryalloc_ret
2b208     2D 00 64 FD | 	ret
2b20c                 | 
2b20c                 | __system___gc_alloc_managed
2b20c     01 4A 05 F6 | 	mov	COUNT_, #1
2b210     A8 00 A0 FD | 	call	#pushregs_
2b214     09 27 02 F6 | 	mov	local01, arg01
2b218     00 14 06 F6 | 	mov	arg02, #0
2b21c     1C 00 B0 FD | 	call	#__system___gc_doalloc
2b220     FD 14 0A F6 | 	mov	arg02, result1 wz
2b224     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2b228     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2b22c     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2b230     A7 F0 03 F6 | 	mov	ptra, fp
2b234     B2 00 A0 FD | 	call	#popregs_
2b238                 | __system___gc_alloc_managed_ret
2b238     2D 00 64 FD | 	ret
2b23c                 | 
2b23c                 | __system___gc_doalloc
2b23c     06 4A 05 F6 | 	mov	COUNT_, #6
2b240     A8 00 A0 FD | 	call	#pushregs_
2b244     09 27 0A F6 | 	mov	local01, arg01 wz
2b248     0A 29 02 F6 | 	mov	local02, arg02
2b24c     00 FA 05 A6 |  if_e	mov	result1, #0
2b250     8C 00 90 AD |  if_e	jmp	#LR__3907
2b254     17 26 06 F1 | 	add	local01, #23
2b258     0F 26 26 F5 | 	andn	local01, #15
2b25c     04 26 46 F0 | 	shr	local01, #4
2b260     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b264     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b268     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b26c     FC BD BF FD | 	call	#__system___lockmem
2b270     13 13 02 F6 | 	mov	arg01, local01
2b274     14 15 02 F6 | 	mov	arg02, local02
2b278     D8 FD BF FD | 	call	#__system___gc_tryalloc
2b27c     FD 2A 0A F6 | 	mov	local03, result1 wz
2b280     14 00 90 5D |  if_ne	jmp	#LR__3900
2b284     70 03 B0 FD | 	call	#__system___gc_docollect
2b288     13 13 02 F6 | 	mov	arg01, local01
2b28c     14 15 02 F6 | 	mov	arg02, local02
2b290     C0 FD BF FD | 	call	#__system___gc_tryalloc
2b294     FD 2A 02 F6 | 	mov	local03, result1
2b298                 | LR__3900
2b298     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b29c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b2a0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b2a4     09 01 68 FC | 	wrlong	#0, arg01
2b2a8     00 2A 0E F2 | 	cmp	local03, #0 wz
2b2ac     2C 00 90 AD |  if_e	jmp	#LR__3906
2b2b0     04 26 66 F0 | 	shl	local01, #4
2b2b4     08 26 86 F1 | 	sub	local01, #8
2b2b8     13 2D 52 F6 | 	abs	local04, local01 wc
2b2bc     02 2C 46 F0 | 	shr	local04, #2
2b2c0     16 2F 8A F6 | 	negc	local05, local04 wz
2b2c4     15 31 02 F6 | 	mov	local06, local03
2b2c8     10 00 90 AD |  if_e	jmp	#LR__3905
2b2cc     97 06 48 FB | 	callpa	#(@LR__3903-@LR__3901)>>2,fcache_load_ptr_
2b2d0                 | LR__3901
2b2d0     17 05 D8 FC | 	rep	@LR__3904, local05
2b2d4                 | LR__3902
2b2d4     18 01 68 FC | 	wrlong	#0, local06
2b2d8     04 30 06 F1 | 	add	local06, #4
2b2dc                 | LR__3903
2b2dc                 | LR__3904
2b2dc                 | LR__3905
2b2dc                 | LR__3906
2b2dc     15 FB 01 F6 | 	mov	result1, local03
2b2e0                 | LR__3907
2b2e0     A7 F0 03 F6 | 	mov	ptra, fp
2b2e4     B2 00 A0 FD | 	call	#popregs_
2b2e8                 | __system___gc_doalloc_ret
2b2e8     2D 00 64 FD | 	ret
2b2ec                 | 
2b2ec                 | __system___gc_isvalidptr
2b2ec     F8 16 06 F4 | 	bitl	arg03, #248
2b2f0     08 16 86 F1 | 	sub	arg03, #8
2b2f4     09 17 52 F2 | 	cmps	arg03, arg01 wc
2b2f8     08 00 90 CD |  if_b	jmp	#LR__3910
2b2fc     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2b300     08 00 90 CD |  if_b	jmp	#LR__3911
2b304                 | LR__3910
2b304     00 FA 05 F6 | 	mov	result1, #0
2b308     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2b30c                 | LR__3911
2b30c     0B 01 02 F6 | 	mov	_var01, arg03
2b310     09 01 62 F5 | 	xor	_var01, arg01
2b314     0F 00 CE F7 | 	test	_var01, #15 wz
2b318     00 FA 05 56 |  if_ne	mov	result1, #0
2b31c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2b320     0B 01 02 F6 | 	mov	_var01, arg03
2b324     02 00 06 F1 | 	add	_var01, #2
2b328     00 01 E2 FA | 	rdword	_var01, _var01
2b32c     7F 00 00 FF 
2b330     C0 01 06 F5 | 	and	_var01, ##65472
2b334     36 00 00 FF 
2b338     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2b33c     00 FA 05 56 |  if_ne	mov	result1, #0
2b340     0B FB 01 A6 |  if_e	mov	result1, arg03
2b344                 | __system___gc_isvalidptr_ret
2b344     2D 00 64 FD | 	ret
2b348                 | 
2b348                 | __system___gc_free
2b348     09 17 02 F6 | 	mov	arg03, arg01
2b34c     6C FC BF FD | 	call	#__system___gc_ptrs
2b350     FD 12 02 F6 | 	mov	arg01, result1
2b354     FE 14 02 F6 | 	mov	arg02, result2
2b358     90 FF BF FD | 	call	#__system___gc_isvalidptr
2b35c     FD 14 0A F6 | 	mov	arg02, result1 wz
2b360     28 00 90 AD |  if_e	jmp	#LR__3920
2b364     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b368     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b36c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b370     F8 BC BF FD | 	call	#__system___lockmem
2b374     0A 13 02 F6 | 	mov	arg01, arg02
2b378     14 00 B0 FD | 	call	#__system___gc_dofree
2b37c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b380     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b384     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b388     09 01 68 FC | 	wrlong	#0, arg01
2b38c                 | LR__3920
2b38c                 | __system___gc_free_ret
2b38c     2D 00 64 FD | 	ret
2b390                 | 
2b390                 | __system___gc_dofree
2b390     06 4A 05 F6 | 	mov	COUNT_, #6
2b394     A8 00 A0 FD | 	call	#pushregs_
2b398     09 27 02 F6 | 	mov	local01, arg01
2b39c     1C FC BF FD | 	call	#__system___gc_ptrs
2b3a0     FD 28 02 F6 | 	mov	local02, result1
2b3a4     FE 2A 02 F6 | 	mov	local03, result2
2b3a8     13 15 02 F6 | 	mov	arg02, local01
2b3ac     02 14 06 F1 | 	add	arg02, #2
2b3b0     36 00 80 FF 
2b3b4     0A 1F 59 FC | 	wrword	##27791, arg02
2b3b8     13 2D 02 F6 | 	mov	local04, local01
2b3bc     13 13 02 F6 | 	mov	arg01, local01
2b3c0     09 2F EA FA | 	rdword	local05, arg01 wz
2b3c4     00 FA 05 A6 |  if_e	mov	result1, #0
2b3c8     04 2E 66 50 |  if_ne	shl	local05, #4
2b3cc     17 13 02 51 |  if_ne	add	arg01, local05
2b3d0     09 FB 01 56 |  if_ne	mov	result1, arg01
2b3d4     FD 30 02 F6 | 	mov	local06, result1
2b3d8     97 24 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
2b3dc                 | LR__3930
2b3dc     04 2C 06 F1 | 	add	local04, #4
2b3e0     16 15 EA FA | 	rdword	arg02, local04 wz
2b3e4     14 13 02 F6 | 	mov	arg01, local02
2b3e8     00 FA 05 A6 |  if_e	mov	result1, #0
2b3ec     04 14 66 50 |  if_ne	shl	arg02, #4
2b3f0     0A 13 02 51 |  if_ne	add	arg01, arg02
2b3f4     09 FB 01 56 |  if_ne	mov	result1, arg01
2b3f8     FD 2C 0A F6 | 	mov	local04, result1 wz
2b3fc     24 00 90 AD |  if_e	jmp	#LR__3932
2b400     16 13 02 F6 | 	mov	arg01, local04
2b404     00 FA 05 F6 | 	mov	result1, #0
2b408     02 12 06 F1 | 	add	arg01, #2
2b40c     09 13 E2 FA | 	rdword	arg01, arg01
2b410     36 00 00 FF 
2b414     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b418     01 FA 65 A6 |  if_e	neg	result1, #1
2b41c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b420     B8 FF 9F AD |  if_e	jmp	#LR__3930
2b424                 | LR__3931
2b424                 | LR__3932
2b424     00 2C 0E F2 | 	cmp	local04, #0 wz
2b428     14 2D 02 A6 |  if_e	mov	local04, local02
2b42c     16 15 02 F6 | 	mov	arg02, local04
2b430     06 14 06 F1 | 	add	arg02, #6
2b434     13 13 02 F6 | 	mov	arg01, local01
2b438     0A 15 E2 FA | 	rdword	arg02, arg02
2b43c     06 12 06 F1 | 	add	arg01, #6
2b440     09 15 52 FC | 	wrword	arg02, arg01
2b444     13 15 0A F6 | 	mov	arg02, local01 wz
2b448     00 FA 05 A6 |  if_e	mov	result1, #0
2b44c     14 15 82 51 |  if_ne	sub	arg02, local02
2b450     04 14 46 50 |  if_ne	shr	arg02, #4
2b454     0A FB 01 56 |  if_ne	mov	result1, arg02
2b458     16 15 02 F6 | 	mov	arg02, local04
2b45c     06 14 06 F1 | 	add	arg02, #6
2b460     0A FB 51 FC | 	wrword	result1, arg02
2b464     14 2D 0A F2 | 	cmp	local04, local02 wz
2b468     A4 00 90 AD |  if_e	jmp	#LR__3935
2b46c     16 13 02 F6 | 	mov	arg01, local04
2b470     09 2F EA FA | 	rdword	local05, arg01 wz
2b474     00 FA 05 A6 |  if_e	mov	result1, #0
2b478     04 2E 66 50 |  if_ne	shl	local05, #4
2b47c     17 13 02 51 |  if_ne	add	arg01, local05
2b480     09 FB 01 56 |  if_ne	mov	result1, arg01
2b484     13 FB 09 F2 | 	cmp	result1, local01 wz
2b488     84 00 90 5D |  if_ne	jmp	#LR__3934
2b48c     16 31 E2 FA | 	rdword	local06, local04
2b490     13 15 E2 FA | 	rdword	arg02, local01
2b494     0A 31 02 F1 | 	add	local06, arg02
2b498     16 31 52 FC | 	wrword	local06, local04
2b49c     13 31 02 F6 | 	mov	local06, local01
2b4a0     02 30 06 F1 | 	add	local06, #2
2b4a4     18 01 58 FC | 	wrword	#0, local06
2b4a8     13 13 02 F6 | 	mov	arg01, local01
2b4ac     09 2F EA FA | 	rdword	local05, arg01 wz
2b4b0     00 FA 05 A6 |  if_e	mov	result1, #0
2b4b4     04 2E 66 50 |  if_ne	shl	local05, #4
2b4b8     17 13 02 51 |  if_ne	add	arg01, local05
2b4bc     09 FB 01 56 |  if_ne	mov	result1, arg01
2b4c0     FD 30 02 F6 | 	mov	local06, result1
2b4c4     15 31 52 F2 | 	cmps	local06, local03 wc
2b4c8     20 00 90 3D |  if_ae	jmp	#LR__3933
2b4cc     16 15 0A F6 | 	mov	arg02, local04 wz
2b4d0     00 FA 05 A6 |  if_e	mov	result1, #0
2b4d4     14 15 82 51 |  if_ne	sub	arg02, local02
2b4d8     04 14 46 50 |  if_ne	shr	arg02, #4
2b4dc     0A FB 01 56 |  if_ne	mov	result1, arg02
2b4e0     18 15 02 F6 | 	mov	arg02, local06
2b4e4     04 14 06 F1 | 	add	arg02, #4
2b4e8     0A FB 51 FC | 	wrword	result1, arg02
2b4ec                 | LR__3933
2b4ec     13 15 02 F6 | 	mov	arg02, local01
2b4f0     06 14 06 F1 | 	add	arg02, #6
2b4f4     16 FD 01 F6 | 	mov	result2, local04
2b4f8     0A 15 E2 FA | 	rdword	arg02, arg02
2b4fc     06 FC 05 F1 | 	add	result2, #6
2b500     FE 14 52 FC | 	wrword	arg02, result2
2b504     06 26 06 F1 | 	add	local01, #6
2b508     13 01 58 FC | 	wrword	#0, local01
2b50c     16 27 02 F6 | 	mov	local01, local04
2b510                 | LR__3934
2b510                 | LR__3935
2b510     13 13 02 F6 | 	mov	arg01, local01
2b514     09 2F EA FA | 	rdword	local05, arg01 wz
2b518     00 FA 05 A6 |  if_e	mov	result1, #0
2b51c     04 2E 66 50 |  if_ne	shl	local05, #4
2b520     17 13 02 51 |  if_ne	add	arg01, local05
2b524     09 FB 01 56 |  if_ne	mov	result1, arg01
2b528     FD 14 0A F6 | 	mov	arg02, result1 wz
2b52c     B8 00 90 AD |  if_e	jmp	#LR__3937
2b530     15 15 52 F2 | 	cmps	arg02, local03 wc
2b534     B0 00 90 3D |  if_ae	jmp	#LR__3937
2b538     0A 13 02 F6 | 	mov	arg01, arg02
2b53c     00 FA 05 F6 | 	mov	result1, #0
2b540     02 12 06 F1 | 	add	arg01, #2
2b544     09 13 E2 FA | 	rdword	arg01, arg01
2b548     36 00 00 FF 
2b54c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b550     01 FA 65 A6 |  if_e	neg	result1, #1
2b554     00 FA 0D F2 | 	cmp	result1, #0 wz
2b558     8C 00 90 AD |  if_e	jmp	#LR__3937
2b55c     13 2D 02 F6 | 	mov	local04, local01
2b560     16 31 E2 FA | 	rdword	local06, local04
2b564     0A 13 02 F6 | 	mov	arg01, arg02
2b568     09 27 E2 FA | 	rdword	local01, arg01
2b56c     13 31 02 F1 | 	add	local06, local01
2b570     16 31 52 FC | 	wrword	local06, local04
2b574     09 31 02 F6 | 	mov	local06, arg01
2b578     06 30 06 F1 | 	add	local06, #6
2b57c     16 27 02 F6 | 	mov	local01, local04
2b580     18 31 E2 FA | 	rdword	local06, local06
2b584     06 26 06 F1 | 	add	local01, #6
2b588     13 31 52 FC | 	wrword	local06, local01
2b58c     09 31 02 F6 | 	mov	local06, arg01
2b590     02 30 06 F1 | 	add	local06, #2
2b594     18 55 59 FC | 	wrword	#170, local06
2b598     09 31 02 F6 | 	mov	local06, arg01
2b59c     06 30 06 F1 | 	add	local06, #6
2b5a0     18 01 58 FC | 	wrword	#0, local06
2b5a4     09 2F EA FA | 	rdword	local05, arg01 wz
2b5a8     00 FA 05 A6 |  if_e	mov	result1, #0
2b5ac     04 2E 66 50 |  if_ne	shl	local05, #4
2b5b0     17 13 02 51 |  if_ne	add	arg01, local05
2b5b4     09 FB 01 56 |  if_ne	mov	result1, arg01
2b5b8     FD 30 0A F6 | 	mov	local06, result1 wz
2b5bc     28 00 90 AD |  if_e	jmp	#LR__3936
2b5c0     15 31 52 F2 | 	cmps	local06, local03 wc
2b5c4     20 00 90 3D |  if_ae	jmp	#LR__3936
2b5c8     16 15 0A F6 | 	mov	arg02, local04 wz
2b5cc     00 FA 05 A6 |  if_e	mov	result1, #0
2b5d0     14 15 82 51 |  if_ne	sub	arg02, local02
2b5d4     04 14 46 50 |  if_ne	shr	arg02, #4
2b5d8     0A FB 01 56 |  if_ne	mov	result1, arg02
2b5dc     18 2D 02 F6 | 	mov	local04, local06
2b5e0     04 2C 06 F1 | 	add	local04, #4
2b5e4     16 FB 51 FC | 	wrword	result1, local04
2b5e8                 | LR__3936
2b5e8                 | LR__3937
2b5e8     18 FB 01 F6 | 	mov	result1, local06
2b5ec     A7 F0 03 F6 | 	mov	ptra, fp
2b5f0     B2 00 A0 FD | 	call	#popregs_
2b5f4                 | __system___gc_dofree_ret
2b5f4     2D 00 64 FD | 	ret
2b5f8                 | 
2b5f8                 | __system___gc_docollect
2b5f8     05 4A 05 F6 | 	mov	COUNT_, #5
2b5fc     A8 00 A0 FD | 	call	#pushregs_
2b600     B8 F9 BF FD | 	call	#__system___gc_ptrs
2b604     FE 26 02 F6 | 	mov	local01, result2
2b608     FD 28 02 F6 | 	mov	local02, result1
2b60c     14 13 02 F6 | 	mov	arg01, local02
2b610     09 2B EA FA | 	rdword	local03, arg01 wz
2b614     00 FA 05 A6 |  if_e	mov	result1, #0
2b618     04 2A 66 50 |  if_ne	shl	local03, #4
2b61c     15 13 02 51 |  if_ne	add	arg01, local03
2b620     09 FB 01 56 |  if_ne	mov	result1, arg01
2b624     FD 2C 0A F6 | 	mov	local04, result1 wz
2b628     00 FA 05 F6 | 	mov	result1, #0
2b62c     01 FA 61 FD | 	cogid	result1
2b630     FD 2E 02 F6 | 	mov	local05, result1
2b634     48 00 90 AD |  if_e	jmp	#LR__3942
2b638     97 22 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
2b63c                 | LR__3940
2b63c     13 2D 52 F2 | 	cmps	local04, local01 wc
2b640     3C 00 90 3D |  if_ae	jmp	#LR__3942
2b644     16 15 02 F6 | 	mov	arg02, local04
2b648     02 14 06 F1 | 	add	arg02, #2
2b64c     0A 15 E2 FA | 	rdword	arg02, arg02
2b650     20 14 26 F5 | 	andn	arg02, #32
2b654     16 13 02 F6 | 	mov	arg01, local04
2b658     02 12 06 F1 | 	add	arg01, #2
2b65c     09 15 52 FC | 	wrword	arg02, arg01
2b660     16 13 02 F6 | 	mov	arg01, local04
2b664     09 2B EA FA | 	rdword	local03, arg01 wz
2b668     00 FA 05 A6 |  if_e	mov	result1, #0
2b66c     04 2A 66 50 |  if_ne	shl	local03, #4
2b670     15 13 02 51 |  if_ne	add	arg01, local03
2b674     09 FB 01 56 |  if_ne	mov	result1, arg01
2b678     FD 2C 0A F6 | 	mov	local04, result1 wz
2b67c     BC FF 9F 5D |  if_ne	jmp	#LR__3940
2b680                 | LR__3941
2b680                 | LR__3942
2b680     00 2A 06 F6 | 	mov	local03, #0
2b684     00 12 06 F6 | 	mov	arg01, #0
2b688     B8 B9 BF FD | 	call	#__system____topofstack
2b68c     FD 14 02 F6 | 	mov	arg02, result1
2b690     15 13 02 F6 | 	mov	arg01, local03
2b694     90 00 B0 FD | 	call	#__system___gc_markhub
2b698     1C 01 B0 FD | 	call	#__system___gc_markcog
2b69c     14 13 02 F6 | 	mov	arg01, local02
2b6a0     09 2B EA FA | 	rdword	local03, arg01 wz
2b6a4     00 FA 05 A6 |  if_e	mov	result1, #0
2b6a8     04 2A 66 50 |  if_ne	shl	local03, #4
2b6ac     15 13 02 51 |  if_ne	add	arg01, local03
2b6b0     09 FB 01 56 |  if_ne	mov	result1, arg01
2b6b4     FD 28 0A F6 | 	mov	local02, result1 wz
2b6b8     60 00 90 AD |  if_e	jmp	#LR__3946
2b6bc                 | LR__3943
2b6bc     14 2D 02 F6 | 	mov	local04, local02
2b6c0     16 13 02 F6 | 	mov	arg01, local04
2b6c4     09 2B EA FA | 	rdword	local03, arg01 wz
2b6c8     00 FA 05 A6 |  if_e	mov	result1, #0
2b6cc     04 2A 66 50 |  if_ne	shl	local03, #4
2b6d0     15 13 02 51 |  if_ne	add	arg01, local03
2b6d4     09 FB 01 56 |  if_ne	mov	result1, arg01
2b6d8     FD 28 02 F6 | 	mov	local02, result1
2b6dc     16 15 02 F6 | 	mov	arg02, local04
2b6e0     02 14 06 F1 | 	add	arg02, #2
2b6e4     0A 15 E2 FA | 	rdword	arg02, arg02
2b6e8     20 14 CE F7 | 	test	arg02, #32 wz
2b6ec     10 14 CE A7 |  if_e	test	arg02, #16 wz
2b6f0     1C 00 90 5D |  if_ne	jmp	#LR__3945
2b6f4     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2b6f8     17 15 0A F2 | 	cmp	arg02, local05 wz
2b6fc     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2b700     0C 00 90 5D |  if_ne	jmp	#LR__3944
2b704     16 13 02 F6 | 	mov	arg01, local04
2b708     84 FC BF FD | 	call	#__system___gc_dofree
2b70c     FD 28 02 F6 | 	mov	local02, result1
2b710                 | LR__3944
2b710                 | LR__3945
2b710     00 28 0E F2 | 	cmp	local02, #0 wz
2b714     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2b718     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3943
2b71c                 | LR__3946
2b71c     A7 F0 03 F6 | 	mov	ptra, fp
2b720     B2 00 A0 FD | 	call	#popregs_
2b724                 | __system___gc_docollect_ret
2b724     2D 00 64 FD | 	ret
2b728                 | 
2b728                 | __system___gc_markhub
2b728     04 4A 05 F6 | 	mov	COUNT_, #4
2b72c     A8 00 A0 FD | 	call	#pushregs_
2b730     09 27 02 F6 | 	mov	local01, arg01
2b734     0A 29 02 F6 | 	mov	local02, arg02
2b738     80 F8 BF FD | 	call	#__system___gc_ptrs
2b73c     FD 2A 02 F6 | 	mov	local03, result1
2b740     FE 2C 02 F6 | 	mov	local04, result2
2b744                 | LR__3950
2b744     14 27 52 F2 | 	cmps	local01, local02 wc
2b748     60 00 90 3D |  if_ae	jmp	#LR__3951
2b74c     13 17 02 FB | 	rdlong	arg03, local01
2b750     04 26 06 F1 | 	add	local01, #4
2b754     16 15 02 F6 | 	mov	arg02, local04
2b758     15 13 02 F6 | 	mov	arg01, local03
2b75c     8C FB BF FD | 	call	#__system___gc_isvalidptr
2b760     FD 16 0A F6 | 	mov	arg03, result1 wz
2b764     DC FF 9F AD |  if_e	jmp	#LR__3950
2b768     0B 13 02 F6 | 	mov	arg01, arg03
2b76c     00 FA 05 F6 | 	mov	result1, #0
2b770     02 12 06 F1 | 	add	arg01, #2
2b774     09 13 E2 FA | 	rdword	arg01, arg01
2b778     36 00 00 FF 
2b77c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b780     01 FA 65 A6 |  if_e	neg	result1, #1
2b784     00 FA 0D F2 | 	cmp	result1, #0 wz
2b788     B8 FF 9F 5D |  if_ne	jmp	#LR__3950
2b78c     0B FD 01 F6 | 	mov	result2, arg03
2b790     02 FC 05 F1 | 	add	result2, #2
2b794     FE FC E1 FA | 	rdword	result2, result2
2b798     0F FC 25 F5 | 	andn	result2, #15
2b79c     2E FC 45 F5 | 	or	result2, #46
2b7a0     02 16 06 F1 | 	add	arg03, #2
2b7a4     0B FD 51 FC | 	wrword	result2, arg03
2b7a8     98 FF 9F FD | 	jmp	#LR__3950
2b7ac                 | LR__3951
2b7ac     A7 F0 03 F6 | 	mov	ptra, fp
2b7b0     B2 00 A0 FD | 	call	#popregs_
2b7b4                 | __system___gc_markhub_ret
2b7b4     2D 00 64 FD | 	ret
2b7b8                 | 
2b7b8                 | __system___gc_markcog
2b7b8     04 4A 05 F6 | 	mov	COUNT_, #4
2b7bc     A8 00 A0 FD | 	call	#pushregs_
2b7c0     F8 F7 BF FD | 	call	#__system___gc_ptrs
2b7c4     FD 26 02 F6 | 	mov	local01, result1
2b7c8     FE 28 02 F6 | 	mov	local02, result2
2b7cc     EF 2B 06 F6 | 	mov	local03, #495
2b7d0                 | LR__3960
2b7d0                 | 	'.live	local03
2b7d0     00 2A 96 F9 | 	alts	local03, #0
2b7d4     15 2D 02 F6 | 	mov	local04, local03
2b7d8     13 13 02 F6 | 	mov	arg01, local01
2b7dc     14 15 02 F6 | 	mov	arg02, local02
2b7e0     16 17 02 F6 | 	mov	arg03, local04
2b7e4     04 FB BF FD | 	call	#__system___gc_isvalidptr
2b7e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7ec     18 00 90 AD |  if_e	jmp	#LR__3961
2b7f0     FD 2C 02 F6 | 	mov	local04, result1
2b7f4     02 2C 06 F1 | 	add	local04, #2
2b7f8     16 2D E2 FA | 	rdword	local04, local04
2b7fc     20 2C 46 F5 | 	or	local04, #32
2b800     02 FA 05 F1 | 	add	result1, #2
2b804     FD 2C 52 FC | 	wrword	local04, result1
2b808                 | LR__3961
2b808     01 2A 86 F1 | 	sub	local03, #1
2b80c     00 2A 56 F2 | 	cmps	local03, #0 wc
2b810     BC FF 9F 3D |  if_ae	jmp	#LR__3960
2b814     A7 F0 03 F6 | 	mov	ptra, fp
2b818     B2 00 A0 FD | 	call	#popregs_
2b81c                 | __system___gc_markcog_ret
2b81c     2D 00 64 FD | 	ret
2b820                 | 
2b820                 | __system__opendir
2b820     06 4A 05 F6 | 	mov	COUNT_, #6
2b824     A8 00 A0 FD | 	call	#pushregs_
2b828     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b82c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2b830     09 15 02 F6 | 	mov	arg02, arg01
2b834     13 13 02 F6 | 	mov	arg01, local01
2b838     00 16 06 F6 | 	mov	arg03, #0
2b83c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b840     C0 BF BF FD | 	call	#__system____getvfsforfile
2b844     FD 28 0A F6 | 	mov	local02, result1 wz
2b848     10 00 90 AD |  if_e	jmp	#LR__3970
2b84c     28 28 06 F1 | 	add	local02, #40
2b850     14 17 0A FB | 	rdlong	arg03, local02 wz
2b854     28 28 86 F1 | 	sub	local02, #40
2b858     14 00 90 5D |  if_ne	jmp	#LR__3971
2b85c                 | LR__3970
2b85c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b860     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b864     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b868     00 FA 05 F6 | 	mov	result1, #0
2b86c     90 00 90 FD | 	jmp	#LR__3973
2b870                 | LR__3971
2b870     5C 12 06 F6 | 	mov	arg01, #92
2b874     10 14 06 F6 | 	mov	arg02, #16
2b878     C0 F9 BF FD | 	call	#__system___gc_doalloc
2b87c     FD 2A 0A F6 | 	mov	local03, result1 wz
2b880     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b884     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b888     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b88c     00 FA 05 A6 |  if_e	mov	result1, #0
2b890     6C 00 90 AD |  if_e	jmp	#LR__3973
2b894     28 28 06 F1 | 	add	local02, #40
2b898     14 2D 02 FB | 	rdlong	local04, local02
2b89c     16 2F 02 F6 | 	mov	local05, local04
2b8a0     28 28 86 F1 | 	sub	local02, #40
2b8a4     13 2E 46 F7 | 	zerox	local05, #19
2b8a8     14 2C 46 F0 | 	shr	local04, #20
2b8ac     02 2C 66 F0 | 	shl	local04, #2
2b8b0     ED 2C 02 F1 | 	add	local04, __methods__
2b8b4     16 2D 02 FB | 	rdlong	local04, local04
2b8b8     15 13 02 F6 | 	mov	arg01, local03
2b8bc     13 15 02 F6 | 	mov	arg02, local01
2b8c0     F2 30 02 F6 | 	mov	local06, objptr
2b8c4     17 E5 01 F6 | 	mov	objptr, local05
2b8c8     2D 2C 62 FD | 	call	local04
2b8cc     18 E5 01 F6 | 	mov	objptr, local06
2b8d0     FD 16 0A F6 | 	mov	arg03, result1 wz
2b8d4     20 00 90 AD |  if_e	jmp	#LR__3972
2b8d8     00 16 4E F2 | 	cmps	arg03, #0 wz
2b8dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b8e0     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2b8e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b8e8     15 13 02 F6 | 	mov	arg01, local03
2b8ec     58 FA BF FD | 	call	#__system___gc_free
2b8f0     00 FA 05 F6 | 	mov	result1, #0
2b8f4     08 00 90 FD | 	jmp	#LR__3973
2b8f8                 | LR__3972
2b8f8     15 29 62 FC | 	wrlong	local02, local03
2b8fc     15 FB 01 F6 | 	mov	result1, local03
2b900                 | LR__3973
2b900     A7 F0 03 F6 | 	mov	ptra, fp
2b904     B2 00 A0 FD | 	call	#popregs_
2b908                 | __system__opendir_ret
2b908     2D 00 64 FD | 	ret
2b90c                 | 
2b90c                 | __system__closedir
2b90c     04 4A 05 F6 | 	mov	COUNT_, #4
2b910     A8 00 A0 FD | 	call	#pushregs_
2b914     09 27 02 F6 | 	mov	local01, arg01
2b918     13 13 02 FB | 	rdlong	arg01, local01
2b91c     2C 12 06 F1 | 	add	arg01, #44
2b920     09 29 02 FB | 	rdlong	local02, arg01
2b924     14 2B 02 F6 | 	mov	local03, local02
2b928     13 2A 46 F7 | 	zerox	local03, #19
2b92c     14 28 46 F0 | 	shr	local02, #20
2b930     02 28 66 F0 | 	shl	local02, #2
2b934     ED 28 02 F1 | 	add	local02, __methods__
2b938     14 29 02 FB | 	rdlong	local02, local02
2b93c     13 13 02 F6 | 	mov	arg01, local01
2b940     F2 2C 02 F6 | 	mov	local04, objptr
2b944     15 E5 01 F6 | 	mov	objptr, local03
2b948     2D 28 62 FD | 	call	local02
2b94c     16 E5 01 F6 | 	mov	objptr, local04
2b950     FD 2C 02 F6 | 	mov	local04, result1
2b954     13 13 02 F6 | 	mov	arg01, local01
2b958     EC F9 BF FD | 	call	#__system___gc_free
2b95c     00 2C 4E F2 | 	cmps	local04, #0 wz
2b960     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b964     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2b968     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b96c     01 FA 65 56 |  if_ne	neg	result1, #1
2b970     00 FA 05 A6 |  if_e	mov	result1, #0
2b974     A7 F0 03 F6 | 	mov	ptra, fp
2b978     B2 00 A0 FD | 	call	#popregs_
2b97c                 | __system__closedir_ret
2b97c     2D 00 64 FD | 	ret
2b980                 | 
2b980                 | __system__readdir
2b980     04 4A 05 F6 | 	mov	COUNT_, #4
2b984     A8 00 A0 FD | 	call	#pushregs_
2b988     09 15 0A FB | 	rdlong	arg02, arg01 wz
2b98c     08 12 06 F1 | 	add	arg01, #8
2b990     09 27 02 F6 | 	mov	local01, arg01
2b994     08 12 86 F1 | 	sub	arg01, #8
2b998     00 FA 05 A6 |  if_e	mov	result1, #0
2b99c     5C 00 90 AD |  if_e	jmp	#LR__3981
2b9a0     30 14 06 F1 | 	add	arg02, #48
2b9a4     0A 29 02 FB | 	rdlong	local02, arg02
2b9a8     14 2B 02 F6 | 	mov	local03, local02
2b9ac     13 2A 46 F7 | 	zerox	local03, #19
2b9b0     14 28 46 F0 | 	shr	local02, #20
2b9b4     02 28 66 F0 | 	shl	local02, #2
2b9b8     ED 28 02 F1 | 	add	local02, __methods__
2b9bc     14 29 02 FB | 	rdlong	local02, local02
2b9c0     13 15 02 F6 | 	mov	arg02, local01
2b9c4     F2 2C 02 F6 | 	mov	local04, objptr
2b9c8     15 E5 01 F6 | 	mov	objptr, local03
2b9cc     2D 28 62 FD | 	call	local02
2b9d0     16 E5 01 F6 | 	mov	objptr, local04
2b9d4     00 FA 4D F2 | 	cmps	result1, #0 wz
2b9d8     1C 00 90 AD |  if_e	jmp	#LR__3980
2b9dc     01 FA 55 F2 | 	cmps	result1, #1 wc
2b9e0     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2b9e4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b9e8     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2b9ec     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b9f0     00 FA 05 F6 | 	mov	result1, #0
2b9f4     04 00 90 FD | 	jmp	#LR__3981
2b9f8                 | LR__3980
2b9f8     13 FB 01 F6 | 	mov	result1, local01
2b9fc                 | LR__3981
2b9fc     A7 F0 03 F6 | 	mov	ptra, fp
2ba00     B2 00 A0 FD | 	call	#popregs_
2ba04                 | __system__readdir_ret
2ba04     2D 00 64 FD | 	ret
2ba08                 | 
2ba08                 | __system___openraw
2ba08     15 4A 05 F6 | 	mov	COUNT_, #21
2ba0c     A8 00 A0 FD | 	call	#pushregs_
2ba10     09 27 02 F6 | 	mov	local01, arg01
2ba14     0A 29 02 F6 | 	mov	local02, arg02
2ba18     0B 2B 02 F6 | 	mov	local03, arg03
2ba1c     0C 2D 02 F6 | 	mov	local04, arg04
2ba20     04 2E 06 F6 | 	mov	local05, #4
2ba24     13 31 02 F6 | 	mov	local06, local01
2ba28     00 32 06 F6 | 	mov	local07, #0
2ba2c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2ba30     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2ba34     1A 13 02 F6 | 	mov	arg01, local08
2ba38     14 15 02 F6 | 	mov	arg02, local02
2ba3c     00 16 06 F6 | 	mov	arg03, #0
2ba40     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2ba44     BC BD BF FD | 	call	#__system____getvfsforfile
2ba48     FD 36 0A F6 | 	mov	local09, result1 wz
2ba4c     10 00 90 AD |  if_e	jmp	#LR__3990
2ba50     20 36 06 F1 | 	add	local09, #32
2ba54     1B FB 09 FB | 	rdlong	result1, local09 wz
2ba58     20 36 86 F1 | 	sub	local09, #32
2ba5c     14 00 90 5D |  if_ne	jmp	#LR__3991
2ba60                 | LR__3990
2ba60     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ba64     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2ba68     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ba6c     01 FA 65 F6 | 	neg	result1, #1
2ba70     8C 02 90 FD | 	jmp	#LR__4004
2ba74                 | LR__3991
2ba74     18 13 02 F6 | 	mov	arg01, local06
2ba78     00 14 06 F6 | 	mov	arg02, #0
2ba7c     34 16 06 F6 | 	mov	arg03, #52
2ba80     09 39 02 F6 | 	mov	local10, arg01
2ba84     98 00 A0 FD | 	call	#\builtin_bytefill_
2ba88     20 36 06 F1 | 	add	local09, #32
2ba8c     1B 3B 02 FB | 	rdlong	local11, local09
2ba90     1D 3D 02 F6 | 	mov	local12, local11
2ba94     1D 3F 02 F6 | 	mov	local13, local11
2ba98     20 36 86 F1 | 	sub	local09, #32
2ba9c     1F 41 02 F6 | 	mov	local14, local13
2baa0     13 3C 46 F7 | 	zerox	local12, #19
2baa4     14 40 46 F0 | 	shr	local14, #20
2baa8     02 40 66 F0 | 	shl	local14, #2
2baac     ED 40 02 F1 | 	add	local14, __methods__
2bab0     20 41 02 FB | 	rdlong	local14, local14
2bab4     18 43 02 F6 | 	mov	local15, local06
2bab8     1A 45 02 F6 | 	mov	local16, local08
2babc     15 47 02 F6 | 	mov	local17, local03
2bac0     21 13 02 F6 | 	mov	arg01, local15
2bac4     22 15 02 F6 | 	mov	arg02, local16
2bac8     23 17 02 F6 | 	mov	arg03, local17
2bacc     F2 48 02 F6 | 	mov	local18, objptr
2bad0     1E E5 01 F6 | 	mov	objptr, local12
2bad4     2D 40 62 FD | 	call	local14
2bad8     24 E5 01 F6 | 	mov	objptr, local18
2badc     FD 4A 0A F6 | 	mov	local19, result1 wz
2bae0     04 2A CE 57 |  if_ne	test	local03, #4 wz
2bae4     58 00 90 AD |  if_e	jmp	#LR__3992
2bae8     24 36 06 F1 | 	add	local09, #36
2baec     1B 3B 02 FB | 	rdlong	local11, local09
2baf0     1D 3D 02 F6 | 	mov	local12, local11
2baf4     1D 3F 02 F6 | 	mov	local13, local11
2baf8     24 36 86 F1 | 	sub	local09, #36
2bafc     1F 41 02 F6 | 	mov	local14, local13
2bb00     13 3C 46 F7 | 	zerox	local12, #19
2bb04     14 40 46 F0 | 	shr	local14, #20
2bb08     02 40 66 F0 | 	shl	local14, #2
2bb0c     ED 40 02 F1 | 	add	local14, __methods__
2bb10     20 41 02 FB | 	rdlong	local14, local14
2bb14     18 43 02 F6 | 	mov	local15, local06
2bb18     1A 45 02 F6 | 	mov	local16, local08
2bb1c     16 47 02 F6 | 	mov	local17, local04
2bb20     21 13 02 F6 | 	mov	arg01, local15
2bb24     22 15 02 F6 | 	mov	arg02, local16
2bb28     23 17 02 F6 | 	mov	arg03, local17
2bb2c     F2 48 02 F6 | 	mov	local18, objptr
2bb30     1E E5 01 F6 | 	mov	objptr, local12
2bb34     2D 40 62 FD | 	call	local14
2bb38     24 E5 01 F6 | 	mov	objptr, local18
2bb3c     FD 4A 02 F6 | 	mov	local19, result1
2bb40                 | LR__3992
2bb40     00 4A 0E F2 | 	cmp	local19, #0 wz
2bb44     8C 01 90 5D |  if_ne	jmp	#LR__4002
2bb48     15 4D 02 F6 | 	mov	local20, local03
2bb4c     03 4C 0E F5 | 	and	local20, #3 wz
2bb50     02 2E 46 55 |  if_ne	or	local05, #2
2bb54     01 4C 0E F2 | 	cmp	local20, #1 wz
2bb58     01 2E 46 55 |  if_ne	or	local05, #1
2bb5c     20 2A CE F7 | 	test	local03, #32 wz
2bb60     C0 2E 46 55 |  if_ne	or	local05, #192
2bb64     08 30 06 F1 | 	add	local06, #8
2bb68     18 2F 62 FC | 	wrlong	local05, local06
2bb6c     0C 30 06 F1 | 	add	local06, #12
2bb70     18 4F 0A FB | 	rdlong	local21, local06 wz
2bb74     14 30 86 F1 | 	sub	local06, #20
2bb78     18 00 90 5D |  if_ne	jmp	#LR__3993
2bb7c     04 36 06 F1 | 	add	local09, #4
2bb80     1B 4F 02 FB | 	rdlong	local21, local09
2bb84     04 36 86 F1 | 	sub	local09, #4
2bb88     14 30 06 F1 | 	add	local06, #20
2bb8c     18 4F 62 FC | 	wrlong	local21, local06
2bb90     14 30 86 F1 | 	sub	local06, #20
2bb94                 | LR__3993
2bb94     18 30 06 F1 | 	add	local06, #24
2bb98     18 4F 0A FB | 	rdlong	local21, local06 wz
2bb9c     18 30 86 F1 | 	sub	local06, #24
2bba0     18 00 90 5D |  if_ne	jmp	#LR__3994
2bba4     08 36 06 F1 | 	add	local09, #8
2bba8     1B 4F 02 FB | 	rdlong	local21, local09
2bbac     08 36 86 F1 | 	sub	local09, #8
2bbb0     18 30 06 F1 | 	add	local06, #24
2bbb4     18 4F 62 FC | 	wrlong	local21, local06
2bbb8     18 30 86 F1 | 	sub	local06, #24
2bbbc                 | LR__3994
2bbbc     24 30 06 F1 | 	add	local06, #36
2bbc0     18 4F 0A FB | 	rdlong	local21, local06 wz
2bbc4     24 30 86 F1 | 	sub	local06, #36
2bbc8     1B 4F 02 AB |  if_e	rdlong	local21, local09
2bbcc     24 30 06 A1 |  if_e	add	local06, #36
2bbd0     18 4F 62 AC |  if_e	wrlong	local21, local06
2bbd4     24 30 86 A1 |  if_e	sub	local06, #36
2bbd8     28 30 06 F1 | 	add	local06, #40
2bbdc     18 4F 0A FB | 	rdlong	local21, local06 wz
2bbe0     28 30 86 F1 | 	sub	local06, #40
2bbe4     18 00 90 5D |  if_ne	jmp	#LR__3995
2bbe8     10 36 06 F1 | 	add	local09, #16
2bbec     1B 4F 02 FB | 	rdlong	local21, local09
2bbf0     10 36 86 F1 | 	sub	local09, #16
2bbf4     28 30 06 F1 | 	add	local06, #40
2bbf8     18 4F 62 FC | 	wrlong	local21, local06
2bbfc     28 30 86 F1 | 	sub	local06, #40
2bc00                 | LR__3995
2bc00     30 30 06 F1 | 	add	local06, #48
2bc04     18 4F 0A FB | 	rdlong	local21, local06 wz
2bc08     30 30 86 F1 | 	sub	local06, #48
2bc0c     18 00 90 5D |  if_ne	jmp	#LR__3996
2bc10     0C 36 06 F1 | 	add	local09, #12
2bc14     1B 4F 02 FB | 	rdlong	local21, local09
2bc18     0C 36 86 F1 | 	sub	local09, #12
2bc1c     30 30 06 F1 | 	add	local06, #48
2bc20     18 4F 62 FC | 	wrlong	local21, local06
2bc24     30 30 86 F1 | 	sub	local06, #48
2bc28                 | LR__3996
2bc28     1C 30 06 F1 | 	add	local06, #28
2bc2c     18 4F 0A FB | 	rdlong	local21, local06 wz
2bc30     1C 30 86 F1 | 	sub	local06, #28
2bc34     1C 00 90 5D |  if_ne	jmp	#LR__3997
2bc38     01 32 06 F6 | 	mov	local07, #1
2bc3c     F2 12 02 F6 | 	mov	arg01, objptr
2bc40     00 88 05 FF 
2bc44     00 12 46 F5 | 	or	arg01, ##185597952
2bc48     1C 30 06 F1 | 	add	local06, #28
2bc4c     18 13 62 FC | 	wrlong	arg01, local06
2bc50     1C 30 86 F1 | 	sub	local06, #28
2bc54                 | LR__3997
2bc54     20 30 06 F1 | 	add	local06, #32
2bc58     18 4F 0A FB | 	rdlong	local21, local06 wz
2bc5c     20 30 86 F1 | 	sub	local06, #32
2bc60     1C 00 90 5D |  if_ne	jmp	#LR__3998
2bc64     01 32 06 F6 | 	mov	local07, #1
2bc68     F2 12 02 F6 | 	mov	arg01, objptr
2bc6c     00 90 05 FF 
2bc70     00 12 46 F5 | 	or	arg01, ##186646528
2bc74     20 30 06 F1 | 	add	local06, #32
2bc78     18 13 62 FC | 	wrlong	arg01, local06
2bc7c     20 30 86 F1 | 	sub	local06, #32
2bc80                 | LR__3998
2bc80     2C 30 06 F1 | 	add	local06, #44
2bc84     18 4F 0A FB | 	rdlong	local21, local06 wz
2bc88     2C 30 86 F1 | 	sub	local06, #44
2bc8c     44 00 90 5D |  if_ne	jmp	#LR__4001
2bc90     14 36 06 F1 | 	add	local09, #20
2bc94     1B 4F 0A FB | 	rdlong	local21, local09 wz
2bc98     14 36 86 F1 | 	sub	local09, #20
2bc9c     18 00 90 AD |  if_e	jmp	#LR__3999
2bca0     14 36 06 F1 | 	add	local09, #20
2bca4     1B 4F 02 FB | 	rdlong	local21, local09
2bca8     2C 30 06 F1 | 	add	local06, #44
2bcac     18 4F 62 FC | 	wrlong	local21, local06
2bcb0     2C 30 86 F1 | 	sub	local06, #44
2bcb4     1C 00 90 FD | 	jmp	#LR__4000
2bcb8                 | LR__3999
2bcb8     01 32 06 F6 | 	mov	local07, #1
2bcbc     F2 12 02 F6 | 	mov	arg01, objptr
2bcc0     00 98 05 FF 
2bcc4     00 12 46 F5 | 	or	arg01, ##187695104
2bcc8     2C 30 06 F1 | 	add	local06, #44
2bccc     18 13 62 FC | 	wrlong	arg01, local06
2bcd0     2C 30 86 F1 | 	sub	local06, #44
2bcd4                 | LR__4000
2bcd4                 | LR__4001
2bcd4                 | LR__4002
2bcd4     00 32 0E F2 | 	cmp	local07, #0 wz
2bcd8     18 13 02 56 |  if_ne	mov	arg01, local06
2bcdc     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2bce0     00 4A 0E F2 | 	cmp	local19, #0 wz
2bce4     00 12 06 A6 |  if_e	mov	arg01, #0
2bce8     10 00 90 5D |  if_ne	jmp	#LR__4003
2bcec     00 12 4E F2 | 	cmps	arg01, #0 wz
2bcf0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bcf4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bcf8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bcfc                 | LR__4003
2bcfc     25 FB 01 F6 | 	mov	result1, local19
2bd00                 | LR__4004
2bd00     A7 F0 03 F6 | 	mov	ptra, fp
2bd04     B2 00 A0 FD | 	call	#popregs_
2bd08                 | __system___openraw_ret
2bd08     2D 00 64 FD | 	ret
2bd0c                 | 
2bd0c                 | __system___closeraw
2bd0c     05 4A 05 F6 | 	mov	COUNT_, #5
2bd10     A8 00 A0 FD | 	call	#pushregs_
2bd14     09 27 02 F6 | 	mov	local01, arg01
2bd18     00 28 06 F6 | 	mov	local02, #0
2bd1c     08 26 06 F1 | 	add	local01, #8
2bd20     13 FB 09 FB | 	rdlong	result1, local01 wz
2bd24     08 26 86 F1 | 	sub	local01, #8
2bd28     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bd2c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2bd30     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bd34     01 FA 65 A6 |  if_e	neg	result1, #1
2bd38     A8 00 90 AD |  if_e	jmp	#LR__4012
2bd3c     2C 26 06 F1 | 	add	local01, #44
2bd40     13 FB 09 FB | 	rdlong	result1, local01 wz
2bd44     2C 26 86 F1 | 	sub	local01, #44
2bd48     38 00 90 AD |  if_e	jmp	#LR__4010
2bd4c     2C 26 06 F1 | 	add	local01, #44
2bd50     13 2B 02 FB | 	rdlong	local03, local01
2bd54     15 2D 02 F6 | 	mov	local04, local03
2bd58     2C 26 86 F1 | 	sub	local01, #44
2bd5c     13 2C 46 F7 | 	zerox	local04, #19
2bd60     14 2A 46 F0 | 	shr	local03, #20
2bd64     02 2A 66 F0 | 	shl	local03, #2
2bd68     ED 2A 02 F1 | 	add	local03, __methods__
2bd6c     15 2B 02 FB | 	rdlong	local03, local03
2bd70     13 13 02 F6 | 	mov	arg01, local01
2bd74     F2 2E 02 F6 | 	mov	local05, objptr
2bd78     16 E5 01 F6 | 	mov	objptr, local04
2bd7c     2D 2A 62 FD | 	call	local03
2bd80     17 E5 01 F6 | 	mov	objptr, local05
2bd84                 | LR__4010
2bd84     24 26 06 F1 | 	add	local01, #36
2bd88     13 2F 0A FB | 	rdlong	local05, local01 wz
2bd8c     24 26 86 F1 | 	sub	local01, #36
2bd90     3C 00 90 AD |  if_e	jmp	#LR__4011
2bd94     24 26 06 F1 | 	add	local01, #36
2bd98     13 2B 02 FB | 	rdlong	local03, local01
2bd9c     15 2D 02 F6 | 	mov	local04, local03
2bda0     24 26 86 F1 | 	sub	local01, #36
2bda4     13 2C 46 F7 | 	zerox	local04, #19
2bda8     14 2A 46 F0 | 	shr	local03, #20
2bdac     02 2A 66 F0 | 	shl	local03, #2
2bdb0     ED 2A 02 F1 | 	add	local03, __methods__
2bdb4     15 2B 02 FB | 	rdlong	local03, local03
2bdb8     13 13 02 F6 | 	mov	arg01, local01
2bdbc     F2 2E 02 F6 | 	mov	local05, objptr
2bdc0     16 E5 01 F6 | 	mov	objptr, local04
2bdc4     2D 2A 62 FD | 	call	local03
2bdc8     17 E5 01 F6 | 	mov	objptr, local05
2bdcc     FD 28 02 F6 | 	mov	local02, result1
2bdd0                 | LR__4011
2bdd0     13 13 02 F6 | 	mov	arg01, local01
2bdd4     00 14 06 F6 | 	mov	arg02, #0
2bdd8     34 16 06 F6 | 	mov	arg03, #52
2bddc     98 00 A0 FD | 	call	#\builtin_bytefill_
2bde0     14 FB 01 F6 | 	mov	result1, local02
2bde4                 | LR__4012
2bde4     A7 F0 03 F6 | 	mov	ptra, fp
2bde8     B2 00 A0 FD | 	call	#popregs_
2bdec                 | __system___closeraw_ret
2bdec     2D 00 64 FD | 	ret
2bdf0                 | 
2bdf0                 | __system___vfs_open_sdcardx
2bdf0     0B 4A 05 F6 | 	mov	COUNT_, #11
2bdf4     A8 00 A0 FD | 	call	#pushregs_
2bdf8     09 2B 02 F6 | 	mov	local03, arg01
2bdfc     0A 2D 02 F6 | 	mov	local04, arg02
2be00     0B 2F 02 F6 | 	mov	local05, arg03
2be04     0C 31 02 F6 | 	mov	local06, arg04
2be08     01 00 00 FF 
2be0c     24 12 06 F6 | 	mov	arg01, ##548
2be10     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2be14     FD 32 02 F6 | 	mov	local07, result1
2be18     01 00 00 FF 
2be1c     34 12 06 F6 | 	mov	arg01, ##564
2be20     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2be24     FD 34 02 F6 | 	mov	local08, result1
2be28     15 19 02 F6 | 	mov	arg04, local03
2be2c     1F 18 C6 F0 | 	sar	arg04, #31
2be30     15 17 02 F6 | 	mov	arg03, local03
2be34     01 12 06 F6 | 	mov	arg01, #1
2be38     00 14 06 F6 | 	mov	arg02, #0
2be3c     EC DB BF FD | 	call	#__system___int64_shl
2be40     FD 26 02 F6 | 	mov	local01, result1
2be44     FE 36 02 F6 | 	mov	local09, result2
2be48     16 19 02 F6 | 	mov	arg04, local04
2be4c     1F 18 C6 F0 | 	sar	arg04, #31
2be50     16 17 02 F6 | 	mov	arg03, local04
2be54     01 12 06 F6 | 	mov	arg01, #1
2be58     00 14 06 F6 | 	mov	arg02, #0
2be5c     CC DB BF FD | 	call	#__system___int64_shl
2be60     FD 26 42 F5 | 	or	local01, result1
2be64     FE 36 42 F5 | 	or	local09, result2
2be68     17 19 02 F6 | 	mov	arg04, local05
2be6c     1F 18 C6 F0 | 	sar	arg04, #31
2be70     17 17 02 F6 | 	mov	arg03, local05
2be74     01 12 06 F6 | 	mov	arg01, #1
2be78     00 14 06 F6 | 	mov	arg02, #0
2be7c     AC DB BF FD | 	call	#__system___int64_shl
2be80     FD 26 42 F5 | 	or	local01, result1
2be84     FE 36 42 F5 | 	or	local09, result2
2be88     18 19 02 F6 | 	mov	arg04, local06
2be8c     1F 18 C6 F0 | 	sar	arg04, #31
2be90     18 17 02 F6 | 	mov	arg03, local06
2be94     01 12 06 F6 | 	mov	arg01, #1
2be98     00 14 06 F6 | 	mov	arg02, #0
2be9c     8C DB BF FD | 	call	#__system___int64_shl
2bea0     1B 15 02 F6 | 	mov	arg02, local09
2bea4     FD 26 42 F5 | 	or	local01, result1
2bea8     0A FD 41 F5 | 	or	result2, arg02
2beac     FE 28 02 F6 | 	mov	local02, result2
2beb0     13 13 02 F6 | 	mov	arg01, local01
2beb4     14 15 02 F6 | 	mov	arg02, local02
2beb8     A8 DB BF FD | 	call	#__system___usepins
2bebc     00 FA 0D F2 | 	cmp	result1, #0 wz
2bec0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bec4     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2bec8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2becc     00 FA 05 A6 |  if_e	mov	result1, #0
2bed0     B4 00 90 AD |  if_e	jmp	#LR__4022
2bed4     13 39 02 F6 | 	mov	local10, local01
2bed8     14 37 02 F6 | 	mov	local09, local02
2bedc     01 00 00 FF 
2bee0     08 32 06 F1 | 	add	local07, ##520
2bee4     19 39 62 FC | 	wrlong	local10, local07
2bee8     04 32 06 F1 | 	add	local07, #4
2beec     19 37 62 FC | 	wrlong	local09, local07
2bef0     01 00 00 FF 
2bef4     0C 32 86 F1 | 	sub	local07, ##524
2bef8     18 1B 02 F6 | 	mov	arg05, local06
2befc     00 12 06 F6 | 	mov	arg01, #0
2bf00     15 15 02 F6 | 	mov	arg02, local03
2bf04     16 17 02 F6 | 	mov	arg03, local04
2bf08     17 19 02 F6 | 	mov	arg04, local05
2bf0c     F2 38 02 F6 | 	mov	local10, objptr
2bf10     19 E5 01 F6 | 	mov	objptr, local07
2bf14     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2bf18     1C E5 01 F6 | 	mov	objptr, local10
2bf1c     FD 3A 0A F6 | 	mov	local11, result1 wz
2bf20     24 00 90 5D |  if_ne	jmp	#LR__4020
2bf24     B5 01 00 FF 
2bf28     DE 15 06 F6 | 	mov	arg02, ##@LR__5437
2bf2c     1A 13 02 F6 | 	mov	arg01, local08
2bf30     00 16 06 F6 | 	mov	arg03, #0
2bf34     F2 3A 02 F6 | 	mov	local11, objptr
2bf38     19 E5 01 F6 | 	mov	objptr, local07
2bf3c     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2bf40     1D E5 01 F6 | 	mov	objptr, local11
2bf44     FD 3A 02 F6 | 	mov	local11, result1
2bf48                 | LR__4020
2bf48     00 3A 0E F2 | 	cmp	local11, #0 wz
2bf4c     24 00 90 AD |  if_e	jmp	#LR__4021
2bf50     13 13 02 F6 | 	mov	arg01, local01
2bf54     14 15 02 F6 | 	mov	arg02, local02
2bf58     5C DB BF FD | 	call	#__system___freepins
2bf5c     1D 13 6A F6 | 	neg	arg01, local11 wz
2bf60     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bf64     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bf68     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bf6c     00 FA 05 F6 | 	mov	result1, #0
2bf70     14 00 90 FD | 	jmp	#LR__4022
2bf74                 | LR__4021
2bf74     19 13 02 F6 | 	mov	arg01, local07
2bf78     F2 3A 02 F6 | 	mov	local11, objptr
2bf7c     19 E5 01 F6 | 	mov	objptr, local07
2bf80     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2bf84     1D E5 01 F6 | 	mov	objptr, local11
2bf88                 | LR__4022
2bf88     A7 F0 03 F6 | 	mov	ptra, fp
2bf8c     B2 00 A0 FD | 	call	#popregs_
2bf90                 | __system___vfs_open_sdcardx_ret
2bf90     2D 00 64 FD | 	ret
2bf94                 | 
2bf94                 | __system____default_getc
2bf94     03 4A 05 F6 | 	mov	COUNT_, #3
2bf98     A8 00 A0 FD | 	call	#pushregs_
2bf9c     09 27 02 F6 | 	mov	local01, arg01
2bfa0     13 29 02 FB | 	rdlong	local02, local01
2bfa4     08 28 06 F1 | 	add	local02, #8
2bfa8     14 2B 02 FB | 	rdlong	local03, local02
2bfac     02 2A CE F7 | 	test	local03, #2 wz
2bfb0     13 13 02 56 |  if_ne	mov	arg01, local01
2bfb4     00 01 B0 5D |  if_ne	call	#__system____default_flush
2bfb8     14 2B 02 FB | 	rdlong	local03, local02
2bfbc     01 2A 46 F5 | 	or	local03, #1
2bfc0     14 2B 62 FC | 	wrlong	local03, local02
2bfc4     08 28 86 F1 | 	sub	local02, #8
2bfc8     14 2B 0A FB | 	rdlong	local03, local02 wz
2bfcc     0C 00 90 5D |  if_ne	jmp	#LR__4030
2bfd0     13 13 02 F6 | 	mov	arg01, local01
2bfd4     68 18 B0 FD | 	call	#__system____default_filbuf
2bfd8     FD 2A 02 F6 | 	mov	local03, result1
2bfdc                 | LR__4030
2bfdc     01 2A 56 F2 | 	cmps	local03, #1 wc
2bfe0     01 FA 65 C6 |  if_b	neg	result1, #1
2bfe4     1C 00 90 CD |  if_b	jmp	#LR__4031
2bfe8     01 2A 86 F1 | 	sub	local03, #1
2bfec     14 2B 62 FC | 	wrlong	local03, local02
2bff0     04 28 06 F1 | 	add	local02, #4
2bff4     14 2B 02 FB | 	rdlong	local03, local02
2bff8     15 FB C1 FA | 	rdbyte	result1, local03
2bffc     01 2A 06 F1 | 	add	local03, #1
2c000     14 2B 62 FC | 	wrlong	local03, local02
2c004                 | LR__4031
2c004     A7 F0 03 F6 | 	mov	ptra, fp
2c008     B2 00 A0 FD | 	call	#popregs_
2c00c                 | __system____default_getc_ret
2c00c     2D 00 64 FD | 	ret
2c010                 | 
2c010                 | __system____default_putc
2c010     06 4A 05 F6 | 	mov	COUNT_, #6
2c014     A8 00 A0 FD | 	call	#pushregs_
2c018     09 27 02 F6 | 	mov	local01, arg01
2c01c     0A 29 02 F6 | 	mov	local02, arg02
2c020     14 2B 02 FB | 	rdlong	local03, local02
2c024     08 2A 06 F1 | 	add	local03, #8
2c028     15 FB 01 FB | 	rdlong	result1, local03
2c02c     01 FA CD F7 | 	test	result1, #1 wz
2c030     14 13 02 56 |  if_ne	mov	arg01, local02
2c034     80 00 B0 5D |  if_ne	call	#__system____default_flush
2c038     15 2D 02 FB | 	rdlong	local04, local03
2c03c     02 2C 46 F5 | 	or	local04, #2
2c040     15 2D 62 FC | 	wrlong	local04, local03
2c044     08 2A 86 F1 | 	sub	local03, #8
2c048     15 2F 02 FB | 	rdlong	local05, local03
2c04c     10 2A 06 F1 | 	add	local03, #16
2c050     15 15 02 FB | 	rdlong	arg02, local03
2c054     10 2A 86 F1 | 	sub	local03, #16
2c058     17 FB 01 F6 | 	mov	result1, local05
2c05c     0A FB 01 F1 | 	add	result1, arg02
2c060     FD 26 42 FC | 	wrbyte	local01, result1
2c064     13 27 E2 F8 | 	getbyte	local01, local01, #0
2c068     01 2E 06 F1 | 	add	local05, #1
2c06c     15 2F 62 FC | 	wrlong	local05, local03
2c070     06 28 06 F1 | 	add	local02, #6
2c074     14 31 EA FA | 	rdword	local06, local02 wz
2c078     06 28 86 F1 | 	sub	local02, #6
2c07c     0C 2A 06 51 |  if_ne	add	local03, #12
2c080     15 2D 02 5B |  if_ne	rdlong	local04, local03
2c084     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2c088     0C 00 90 AD |  if_e	jmp	#LR__4040
2c08c     0A 26 0E F2 | 	cmp	local01, #10 wz
2c090     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2c094     10 00 90 5D |  if_ne	jmp	#LR__4041
2c098                 | LR__4040
2c098     14 13 02 F6 | 	mov	arg01, local02
2c09c     18 00 B0 FD | 	call	#__system____default_flush
2c0a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0a4     01 26 66 56 |  if_ne	neg	local01, #1
2c0a8                 | LR__4041
2c0a8     13 FB 01 F6 | 	mov	result1, local01
2c0ac     A7 F0 03 F6 | 	mov	ptra, fp
2c0b0     B2 00 A0 FD | 	call	#popregs_
2c0b4                 | __system____default_putc_ret
2c0b4     2D 00 64 FD | 	ret
2c0b8                 | 
2c0b8                 | __system____default_flush
2c0b8     06 4A 05 F6 | 	mov	COUNT_, #6
2c0bc     A8 00 A0 FD | 	call	#pushregs_
2c0c0     09 27 02 F6 | 	mov	local01, arg01
2c0c4     13 29 02 FB | 	rdlong	local02, local01
2c0c8     14 2B 02 FB | 	rdlong	local03, local02
2c0cc     08 28 06 F1 | 	add	local02, #8
2c0d0     14 FB 01 FB | 	rdlong	result1, local02
2c0d4     08 28 86 F1 | 	sub	local02, #8
2c0d8     02 FA CD F7 | 	test	result1, #2 wz
2c0dc     D0 00 90 AD |  if_e	jmp	#LR__4052
2c0e0     01 2A 56 F2 | 	cmps	local03, #1 wc
2c0e4     20 01 90 CD |  if_b	jmp	#LR__4054
2c0e8     08 26 06 F1 | 	add	local01, #8
2c0ec     13 FB 01 FB | 	rdlong	result1, local01
2c0f0     08 26 86 F1 | 	sub	local01, #8
2c0f4     40 FA CD F7 | 	test	result1, #64 wz
2c0f8     68 00 90 AD |  if_e	jmp	#LR__4051
2c0fc     08 26 06 F1 | 	add	local01, #8
2c100     13 17 02 FB | 	rdlong	arg03, local01
2c104     08 26 86 F1 | 	sub	local01, #8
2c108     80 16 CE F7 | 	test	arg03, #128 wz
2c10c     54 00 90 AD |  if_e	jmp	#LR__4050
2c110     30 26 06 F1 | 	add	local01, #48
2c114     13 2D 02 FB | 	rdlong	local04, local01
2c118     16 2F 02 F6 | 	mov	local05, local04
2c11c     30 26 86 F1 | 	sub	local01, #48
2c120     13 2E 46 F7 | 	zerox	local05, #19
2c124     14 2C 46 F0 | 	shr	local04, #20
2c128     02 2C 66 F0 | 	shl	local04, #2
2c12c     ED 2C 02 F1 | 	add	local04, __methods__
2c130     16 2D 02 FB | 	rdlong	local04, local04
2c134     13 13 02 F6 | 	mov	arg01, local01
2c138     00 14 06 F6 | 	mov	arg02, #0
2c13c     02 16 06 F6 | 	mov	arg03, #2
2c140     F2 30 02 F6 | 	mov	local06, objptr
2c144     17 E5 01 F6 | 	mov	objptr, local05
2c148     2D 2C 62 FD | 	call	local04
2c14c     18 E5 01 F6 | 	mov	objptr, local06
2c150     08 26 06 F1 | 	add	local01, #8
2c154     13 31 02 FB | 	rdlong	local06, local01
2c158     80 30 26 F5 | 	andn	local06, #128
2c15c     13 31 62 FC | 	wrlong	local06, local01
2c160     08 26 86 F1 | 	sub	local01, #8
2c164                 | LR__4050
2c164                 | LR__4051
2c164     18 26 06 F1 | 	add	local01, #24
2c168     13 2D 02 FB | 	rdlong	local04, local01
2c16c     16 2F 02 F6 | 	mov	local05, local04
2c170     18 26 86 F1 | 	sub	local01, #24
2c174     13 2E 46 F7 | 	zerox	local05, #19
2c178     14 2C 46 F0 | 	shr	local04, #20
2c17c     02 2C 66 F0 | 	shl	local04, #2
2c180     ED 2C 02 F1 | 	add	local04, __methods__
2c184     16 2D 02 FB | 	rdlong	local04, local04
2c188     10 28 06 F1 | 	add	local02, #16
2c18c     14 15 02 FB | 	rdlong	arg02, local02
2c190     10 28 86 F1 | 	sub	local02, #16
2c194     13 13 02 F6 | 	mov	arg01, local01
2c198     15 17 02 F6 | 	mov	arg03, local03
2c19c     F2 30 02 F6 | 	mov	local06, objptr
2c1a0     17 E5 01 F6 | 	mov	objptr, local05
2c1a4     2D 2C 62 FD | 	call	local04
2c1a8     18 E5 01 F6 | 	mov	objptr, local06
2c1ac     58 00 90 FD | 	jmp	#LR__4054
2c1b0                 | LR__4052
2c1b0     08 28 06 F1 | 	add	local02, #8
2c1b4     14 31 02 FB | 	rdlong	local06, local02
2c1b8     08 28 86 F1 | 	sub	local02, #8
2c1bc     01 30 CE F7 | 	test	local06, #1 wz
2c1c0     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2c1c4     40 00 90 AD |  if_e	jmp	#LR__4053
2c1c8     30 26 06 F1 | 	add	local01, #48
2c1cc     13 2D 02 FB | 	rdlong	local04, local01
2c1d0     16 2F 02 F6 | 	mov	local05, local04
2c1d4     30 26 86 F1 | 	sub	local01, #48
2c1d8     13 2E 46 F7 | 	zerox	local05, #19
2c1dc     14 2C 46 F0 | 	shr	local04, #20
2c1e0     02 2C 66 F0 | 	shl	local04, #2
2c1e4     ED 2C 02 F1 | 	add	local04, __methods__
2c1e8     16 2D 02 FB | 	rdlong	local04, local04
2c1ec     13 13 02 F6 | 	mov	arg01, local01
2c1f0     15 15 62 F6 | 	neg	arg02, local03
2c1f4     01 16 06 F6 | 	mov	arg03, #1
2c1f8     F2 30 02 F6 | 	mov	local06, objptr
2c1fc     17 E5 01 F6 | 	mov	objptr, local05
2c200     2D 2C 62 FD | 	call	local04
2c204     18 E5 01 F6 | 	mov	objptr, local06
2c208                 | LR__4053
2c208                 | LR__4054
2c208     14 01 68 FC | 	wrlong	#0, local02
2c20c     04 28 06 F1 | 	add	local02, #4
2c210     14 01 68 FC | 	wrlong	#0, local02
2c214     04 28 06 F1 | 	add	local02, #4
2c218     14 01 68 FC | 	wrlong	#0, local02
2c21c     00 FA 05 F6 | 	mov	result1, #0
2c220     A7 F0 03 F6 | 	mov	ptra, fp
2c224     B2 00 A0 FD | 	call	#popregs_
2c228                 | __system____default_flush_ret
2c228     2D 00 64 FD | 	ret
2c22c                 | 
2c22c                 | __system____default_buffer_init
2c22c     02 4A 05 F6 | 	mov	COUNT_, #2
2c230     A8 00 A0 FD | 	call	#pushregs_
2c234     09 27 02 F6 | 	mov	local01, arg01
2c238     13 29 02 FB | 	rdlong	local02, local01
2c23c     13 13 02 F6 | 	mov	arg01, local01
2c240     34 03 B0 FD | 	call	#__system___isatty
2c244     00 FA 0D F2 | 	cmp	result1, #0 wz
2c248     06 26 06 51 |  if_ne	add	local01, #6
2c24c     13 0B 58 5C |  if_ne	wrword	#5, local01
2c250     06 26 06 A1 |  if_e	add	local01, #6
2c254     13 0D 58 AC |  if_e	wrword	#6, local01
2c258     14 28 06 F1 | 	add	local02, #20
2c25c     14 27 02 F6 | 	mov	local01, local02
2c260     04 28 86 F1 | 	sub	local02, #4
2c264     14 27 62 FC | 	wrlong	local01, local02
2c268     04 28 86 F1 | 	sub	local02, #4
2c26c     02 00 80 FF 
2c270     14 01 68 FC | 	wrlong	##1024, local02
2c274     00 FA 05 F6 | 	mov	result1, #0
2c278     A7 F0 03 F6 | 	mov	ptra, fp
2c27c     B2 00 A0 FD | 	call	#popregs_
2c280                 | __system____default_buffer_init_ret
2c280     2D 00 64 FD | 	ret
2c284                 | 
2c284                 | __system__stat
2c284     04 4A 05 F6 | 	mov	COUNT_, #4
2c288     A8 00 A0 FD | 	call	#pushregs_
2c28c     0A 27 02 F6 | 	mov	local01, arg02
2c290     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2c294     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2c298     09 15 02 F6 | 	mov	arg02, arg01
2c29c     14 13 02 F6 | 	mov	arg01, local02
2c2a0     00 16 06 F6 | 	mov	arg03, #0
2c2a4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2c2a8     58 B5 BF FD | 	call	#__system____getvfsforfile
2c2ac     FD 2A 0A F6 | 	mov	local03, result1 wz
2c2b0     10 00 90 AD |  if_e	jmp	#LR__4060
2c2b4     34 2A 06 F1 | 	add	local03, #52
2c2b8     15 17 0A FB | 	rdlong	arg03, local03 wz
2c2bc     34 2A 86 F1 | 	sub	local03, #52
2c2c0     14 00 90 5D |  if_ne	jmp	#LR__4061
2c2c4                 | LR__4060
2c2c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c2c8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2c2cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c2d0     01 FA 65 F6 | 	neg	result1, #1
2c2d4     68 00 90 FD | 	jmp	#LR__4062
2c2d8                 | LR__4061
2c2d8     13 13 02 F6 | 	mov	arg01, local01
2c2dc     00 14 06 F6 | 	mov	arg02, #0
2c2e0     30 16 06 F6 | 	mov	arg03, #48
2c2e4     09 2D 02 F6 | 	mov	local04, arg01
2c2e8     98 00 A0 FD | 	call	#\builtin_bytefill_
2c2ec     16 FB 01 F6 | 	mov	result1, local04
2c2f0     14 13 CA FA | 	rdbyte	arg01, local02 wz
2c2f4     08 26 06 A1 |  if_e	add	local01, #8
2c2f8     08 00 80 AF 
2c2fc     13 FF 6B AC |  if_e	wrlong	##4607, local01
2c300     00 FA 05 A6 |  if_e	mov	result1, #0
2c304     38 00 90 AD |  if_e	jmp	#LR__4062
2c308     34 2A 06 F1 | 	add	local03, #52
2c30c     15 2B 02 FB | 	rdlong	local03, local03
2c310     15 2D 02 F6 | 	mov	local04, local03
2c314     13 2A 46 F7 | 	zerox	local03, #19
2c318     14 2C 46 F0 | 	shr	local04, #20
2c31c     02 2C 66 F0 | 	shl	local04, #2
2c320     ED 2C 02 F1 | 	add	local04, __methods__
2c324     16 2D 02 FB | 	rdlong	local04, local04
2c328     14 13 02 F6 | 	mov	arg01, local02
2c32c     13 15 02 F6 | 	mov	arg02, local01
2c330     F2 28 02 F6 | 	mov	local02, objptr
2c334     15 E5 01 F6 | 	mov	objptr, local03
2c338     2D 2C 62 FD | 	call	local04
2c33c     14 E5 01 F6 | 	mov	objptr, local02
2c340                 | LR__4062
2c340     A7 F0 03 F6 | 	mov	ptra, fp
2c344     B2 00 A0 FD | 	call	#popregs_
2c348                 | __system__stat_ret
2c348     2D 00 64 FD | 	ret
2c34c                 | 
2c34c                 | __system__write
2c34c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c350     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c354     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c358     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c35c     01 FA 65 36 |  if_ae	neg	result1, #1
2c360     20 00 90 3D |  if_ae	jmp	#LR__4070
2c364     34 12 06 FD | 	qmul	arg01, #52
2c368     02 00 00 FF 
2c36c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c370     18 12 62 FD | 	getqx	arg01
2c374     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c378     02 00 00 FF 
2c37c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c380     0C 10 B0 FD | 	call	#__system___vfswrite
2c384                 | LR__4070
2c384                 | __system__write_ret
2c384     2D 00 64 FD | 	ret
2c388                 | 
2c388                 | __system__read
2c388     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c38c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c390     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c394     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c398     01 FA 65 36 |  if_ae	neg	result1, #1
2c39c     20 00 90 3D |  if_ae	jmp	#LR__4080
2c3a0     34 12 06 FD | 	qmul	arg01, #52
2c3a4     02 00 00 FF 
2c3a8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c3ac     18 12 62 FD | 	getqx	arg01
2c3b0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c3b4     02 00 00 FF 
2c3b8     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c3bc     98 11 B0 FD | 	call	#__system___vfsread
2c3c0                 | LR__4080
2c3c0                 | __system__read_ret
2c3c0     2D 00 64 FD | 	ret
2c3c4                 | 
2c3c4                 | __system__close
2c3c4     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c3c8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c3cc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c3d0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c3d4     01 FA 65 36 |  if_ae	neg	result1, #1
2c3d8     20 00 90 3D |  if_ae	jmp	#LR__4090
2c3dc     34 12 06 FD | 	qmul	arg01, #52
2c3e0     02 00 00 FF 
2c3e4     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c3e8     18 12 62 FD | 	getqx	arg01
2c3ec     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c3f0     02 00 00 FF 
2c3f4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c3f8     10 F9 BF FD | 	call	#__system___closeraw
2c3fc                 | LR__4090
2c3fc                 | __system__close_ret
2c3fc     2D 00 64 FD | 	ret
2c400                 | 
2c400                 | __system__lseek
2c400     06 4A 05 F6 | 	mov	COUNT_, #6
2c404     A8 00 A0 FD | 	call	#pushregs_
2c408     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c40c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c410     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c414     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c418     01 FA 65 36 |  if_ae	neg	result1, #1
2c41c     C4 00 90 3D |  if_ae	jmp	#LR__4101
2c420     34 12 06 FD | 	qmul	arg01, #52
2c424     02 00 00 FF 
2c428     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c42c     18 26 62 FD | 	getqx	local01
2c430     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2c434     30 26 06 F1 | 	add	local01, #48
2c438     13 13 0A FB | 	rdlong	arg01, local01 wz
2c43c     30 26 86 F1 | 	sub	local01, #48
2c440     02 00 00 FF 
2c444     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c448     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c44c     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2c450     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c454     01 FA 65 A6 |  if_e	neg	result1, #1
2c458     88 00 90 AD |  if_e	jmp	#LR__4101
2c45c     08 26 06 F1 | 	add	local01, #8
2c460     13 29 02 FB | 	rdlong	local02, local01
2c464     08 26 86 F1 | 	sub	local01, #8
2c468     40 28 CE F7 | 	test	local02, #64 wz
2c46c     08 26 06 51 |  if_ne	add	local01, #8
2c470     13 29 02 5B |  if_ne	rdlong	local02, local01
2c474     80 28 46 55 |  if_ne	or	local02, #128
2c478     13 29 62 5C |  if_ne	wrlong	local02, local01
2c47c     08 26 86 51 |  if_ne	sub	local01, #8
2c480     30 26 06 F1 | 	add	local01, #48
2c484     13 2B 02 FB | 	rdlong	local03, local01
2c488     15 2D 02 F6 | 	mov	local04, local03
2c48c     30 26 86 F1 | 	sub	local01, #48
2c490     13 2C 46 F7 | 	zerox	local04, #19
2c494     14 2A 46 F0 | 	shr	local03, #20
2c498     02 2A 66 F0 | 	shl	local03, #2
2c49c     ED 2A 02 F1 | 	add	local03, __methods__
2c4a0     15 2B 02 FB | 	rdlong	local03, local03
2c4a4     13 13 02 F6 | 	mov	arg01, local01
2c4a8     F2 2E 02 F6 | 	mov	local05, objptr
2c4ac     16 E5 01 F6 | 	mov	objptr, local04
2c4b0     2D 2A 62 FD | 	call	local03
2c4b4     17 E5 01 F6 | 	mov	objptr, local05
2c4b8     FD 30 02 F6 | 	mov	local06, result1
2c4bc     00 30 56 F2 | 	cmps	local06, #0 wc
2c4c0     1C 00 90 3D |  if_ae	jmp	#LR__4100
2c4c4     18 13 6A F6 | 	neg	arg01, local06 wz
2c4c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c4cc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c4d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c4d4     01 FA 65 56 |  if_ne	neg	result1, #1
2c4d8     00 FA 05 A6 |  if_e	mov	result1, #0
2c4dc     04 00 90 FD | 	jmp	#LR__4101
2c4e0                 | LR__4100
2c4e0     18 FB 01 F6 | 	mov	result1, local06
2c4e4                 | LR__4101
2c4e4     A7 F0 03 F6 | 	mov	ptra, fp
2c4e8     B2 00 A0 FD | 	call	#popregs_
2c4ec                 | __system__lseek_ret
2c4ec     2D 00 64 FD | 	ret
2c4f0                 | 
2c4f0                 | __system___ioctl
2c4f0     03 4A 05 F6 | 	mov	COUNT_, #3
2c4f4     A8 00 A0 FD | 	call	#pushregs_
2c4f8     00 12 4E F2 | 	cmps	arg01, #0 wz
2c4fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c500     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2c504     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c508     01 FA 65 A6 |  if_e	neg	result1, #1
2c50c     5C 00 90 AD |  if_e	jmp	#LR__4111
2c510     28 12 06 F1 | 	add	arg01, #40
2c514     09 27 02 FB | 	rdlong	local01, arg01
2c518     13 29 02 F6 | 	mov	local02, local01
2c51c     28 12 86 F1 | 	sub	arg01, #40
2c520     13 28 46 F7 | 	zerox	local02, #19
2c524     14 26 46 F0 | 	shr	local01, #20
2c528     02 26 66 F0 | 	shl	local01, #2
2c52c     ED 26 02 F1 | 	add	local01, __methods__
2c530     13 27 02 FB | 	rdlong	local01, local01
2c534     F2 2A 02 F6 | 	mov	local03, objptr
2c538     14 E5 01 F6 | 	mov	objptr, local02
2c53c     2D 26 62 FD | 	call	local01
2c540     15 E5 01 F6 | 	mov	objptr, local03
2c544     FD 12 0A F6 | 	mov	arg01, result1 wz
2c548     1C 00 90 AD |  if_e	jmp	#LR__4110
2c54c     00 12 4E F2 | 	cmps	arg01, #0 wz
2c550     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c554     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c558     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c55c     01 FA 65 56 |  if_ne	neg	result1, #1
2c560     00 FA 05 A6 |  if_e	mov	result1, #0
2c564     04 00 90 FD | 	jmp	#LR__4111
2c568                 | LR__4110
2c568     00 FA 05 F6 | 	mov	result1, #0
2c56c                 | LR__4111
2c56c     A7 F0 03 F6 | 	mov	ptra, fp
2c570     B2 00 A0 FD | 	call	#popregs_
2c574                 | __system___ioctl_ret
2c574     2D 00 64 FD | 	ret
2c578                 | 
2c578                 | __system___isatty
2c578     00 4A 05 F6 | 	mov	COUNT_, #0
2c57c     A8 00 A0 FD | 	call	#pushregs_
2c580     0C F0 07 F1 | 	add	ptra, #12
2c584     04 4E 05 F1 | 	add	fp, #4
2c588     A7 12 62 FC | 	wrlong	arg01, fp
2c58c     04 4E 05 F1 | 	add	fp, #4
2c590     A7 16 02 F6 | 	mov	arg03, fp
2c594     08 4E 85 F1 | 	sub	fp, #8
2c598     00 15 06 F6 | 	mov	arg02, #256
2c59c     50 FF BF FD | 	call	#__system___ioctl
2c5a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c5a4     01 FA 05 A6 |  if_e	mov	result1, #1
2c5a8     00 FA 05 56 |  if_ne	mov	result1, #0
2c5ac     A7 F0 03 F6 | 	mov	ptra, fp
2c5b0     B2 00 A0 FD | 	call	#popregs_
2c5b4                 | __system___isatty_ret
2c5b4     2D 00 64 FD | 	ret
2c5b8                 | 
2c5b8                 | __system____getftab
2c5b8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c5bc     34 12 06 CD |  if_b	qmul	arg01, #52
2c5c0     00 FA 05 36 |  if_ae	mov	result1, #0
2c5c4     02 00 00 CF 
2c5c8     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2c5cc     18 FA 61 CD |  if_b	getqx	result1
2c5d0     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2c5d4     02 00 00 CF 
2c5d8     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2c5dc                 | __system____getftab_ret
2c5dc     2D 00 64 FD | 	ret
2c5e0                 | 
2c5e0                 | __system__strncpy
2c5e0     09 01 02 F6 | 	mov	_var01, arg01
2c5e4                 | LR__4120
2c5e4     01 16 86 F1 | 	sub	arg03, #1
2c5e8     00 16 56 F2 | 	cmps	arg03, #0 wc
2c5ec     18 00 90 CD |  if_b	jmp	#LR__4121
2c5f0     0A FB C1 FA | 	rdbyte	result1, arg02
2c5f4     00 FB 41 FC | 	wrbyte	result1, _var01
2c5f8     01 14 06 F1 | 	add	arg02, #1
2c5fc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c600     01 00 06 F1 | 	add	_var01, #1
2c604     DC FF 9F 5D |  if_ne	jmp	#LR__4120
2c608                 | LR__4121
2c608     97 0C 48 FB | 	callpa	#(@LR__4123-@LR__4122)>>2,fcache_load_ptr_
2c60c                 | LR__4122
2c60c     01 16 86 F1 | 	sub	arg03, #1
2c610     00 16 56 F2 | 	cmps	arg03, #0 wc
2c614     00 03 02 36 |  if_ae	mov	_var02, _var01
2c618     01 00 06 31 |  if_ae	add	_var01, #1
2c61c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2c620     E8 FF 9F 3D |  if_ae	jmp	#LR__4122
2c624                 | LR__4123
2c624     09 FB 01 F6 | 	mov	result1, arg01
2c628                 | __system__strncpy_ret
2c628     2D 00 64 FD | 	ret
2c62c                 | 
2c62c                 | __system__strncat
2c62c     00 14 4E F2 | 	cmps	arg02, #0 wz
2c630     50 00 90 AD |  if_e	jmp	#LR__4134
2c634     01 16 16 F2 | 	cmp	arg03, #1 wc
2c638     48 00 90 CD |  if_b	jmp	#LR__4134
2c63c     09 01 02 F6 | 	mov	_var01, arg01
2c640     97 1E 48 FB | 	callpa	#(@LR__4132-@LR__4130)>>2,fcache_load_ptr_
2c644                 | LR__4130
2c644     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c648     01 00 06 51 |  if_ne	add	_var01, #1
2c64c     F4 FF 9F 5D |  if_ne	jmp	#LR__4130
2c650     0B 03 02 F6 | 	mov	_var02, arg03
2c654                 | LR__4131
2c654     0A 05 C2 FA | 	rdbyte	_var03, arg02
2c658     02 07 02 F6 | 	mov	_var04, _var03
2c65c     07 06 4E F7 | 	zerox	_var04, #7 wz
2c660     01 14 06 F1 | 	add	arg02, #1
2c664     18 00 90 AD |  if_e	jmp	#LR__4133
2c668     01 02 86 F1 | 	sub	_var02, #1
2c66c     00 02 56 F2 | 	cmps	_var02, #0 wc
2c670     00 07 02 36 |  if_ae	mov	_var04, _var01
2c674     01 00 06 31 |  if_ae	add	_var01, #1
2c678     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2c67c     D4 FF 9F 3D |  if_ae	jmp	#LR__4131
2c680                 | LR__4132
2c680                 | LR__4133
2c680     00 01 48 FC | 	wrbyte	#0, _var01
2c684                 | LR__4134
2c684     09 FB 01 F6 | 	mov	result1, arg01
2c688                 | __system__strncat_ret
2c688     2D 00 64 FD | 	ret
2c68c                 | 
2c68c                 | __system__strncmp
2c68c     09 01 0A F6 | 	mov	_var01, arg01 wz
2c690     14 00 90 5D |  if_ne	jmp	#LR__4140
2c694     00 14 0E F2 | 	cmp	arg02, #0 wz
2c698     01 02 66 56 |  if_ne	neg	_var02, #1
2c69c     00 02 06 A6 |  if_e	mov	_var02, #0
2c6a0     01 FB 01 F6 | 	mov	result1, _var02
2c6a4     74 00 90 FD | 	jmp	#__system__strncmp_ret
2c6a8                 | LR__4140
2c6a8     00 14 0E F2 | 	cmp	arg02, #0 wz
2c6ac     01 FA 05 A6 |  if_e	mov	result1, #1
2c6b0     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c6b4     0B 05 02 F6 | 	mov	_var03, arg03
2c6b8     97 16 48 FB | 	callpa	#(@LR__4142-@LR__4141)>>2,fcache_load_ptr_
2c6bc                 | LR__4141
2c6bc     00 07 C2 FA | 	rdbyte	_var04, _var01
2c6c0     0A 09 02 F6 | 	mov	_var05, arg02
2c6c4     04 0B C2 FA | 	rdbyte	_var06, _var05
2c6c8     01 04 86 F1 | 	sub	_var03, #1
2c6cc     00 04 56 F2 | 	cmps	_var03, #0 wc
2c6d0     01 00 06 F1 | 	add	_var01, #1
2c6d4     01 14 06 F1 | 	add	arg02, #1
2c6d8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2c6dc     08 00 90 2D |  if_nc_and_z	jmp	#LR__4143
2c6e0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2c6e4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4141
2c6e8                 | LR__4142
2c6e8                 | LR__4143
2c6e8     00 04 56 F2 | 	cmps	_var03, #0 wc
2c6ec     00 FA 05 C6 |  if_b	mov	result1, #0
2c6f0     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2c6f4     05 07 0A F2 | 	cmp	_var04, _var06 wz
2c6f8     00 FA 05 A6 |  if_e	mov	result1, #0
2c6fc     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c700     00 06 0E F2 | 	cmp	_var04, #0 wz
2c704     01 FA 65 A6 |  if_e	neg	result1, #1
2c708     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c70c     00 0A 0E F2 | 	cmp	_var06, #0 wz
2c710     01 FA 05 A6 |  if_e	mov	result1, #1
2c714     03 FB 01 56 |  if_ne	mov	result1, _var04
2c718     05 FB 81 51 |  if_ne	sub	result1, _var06
2c71c                 | __system__strncmp_ret
2c71c     2D 00 64 FD | 	ret
2c720                 | 
2c720                 | __system____root_opendir
2c720     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2c724     04 12 06 F1 | 	add	arg01, #4
2c728     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2c72c     00 FA 05 F6 | 	mov	result1, #0
2c730     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2c734                 | __system____root_opendir_ret
2c734     2D 00 64 FD | 	ret
2c738                 | 
2c738                 | __system____root_readdir
2c738     03 4A 05 F6 | 	mov	COUNT_, #3
2c73c     A8 00 A0 FD | 	call	#pushregs_
2c740     09 27 02 F6 | 	mov	local01, arg01
2c744     0A 29 02 F6 | 	mov	local02, arg02
2c748     04 26 06 F1 | 	add	local01, #4
2c74c     13 2B 02 FB | 	rdlong	local03, local01
2c750     04 26 86 F1 | 	sub	local01, #4
2c754                 | LR__4150
2c754     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2c758     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2c75c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2c760     01 FA 65 A6 |  if_e	neg	result1, #1
2c764     48 00 90 AD |  if_e	jmp	#LR__4151
2c768     15 17 0A FB | 	rdlong	arg03, local03 wz
2c76c     04 2A 06 A1 |  if_e	add	local03, #4
2c770     E0 FF 9F AD |  if_e	jmp	#LR__4150
2c774     15 15 02 FB | 	rdlong	arg02, local03
2c778     01 14 06 F1 | 	add	arg02, #1
2c77c     14 13 02 F6 | 	mov	arg01, local02
2c780     40 16 06 F6 | 	mov	arg03, #64
2c784     58 FE BF FD | 	call	#__system__strncpy
2c788     50 28 06 F1 | 	add	local02, #80
2c78c     14 03 48 FC | 	wrbyte	#1, local02
2c790     08 28 86 F1 | 	sub	local02, #8
2c794     14 01 68 FC | 	wrlong	#0, local02
2c798     04 28 06 F1 | 	add	local02, #4
2c79c     14 01 68 FC | 	wrlong	#0, local02
2c7a0     04 2A 06 F1 | 	add	local03, #4
2c7a4     04 26 06 F1 | 	add	local01, #4
2c7a8     13 2B 62 FC | 	wrlong	local03, local01
2c7ac     00 FA 05 F6 | 	mov	result1, #0
2c7b0                 | LR__4151
2c7b0     A7 F0 03 F6 | 	mov	ptra, fp
2c7b4     B2 00 A0 FD | 	call	#popregs_
2c7b8                 | __system____root_readdir_ret
2c7b8     2D 00 64 FD | 	ret
2c7bc                 | 
2c7bc                 | __system____root_closedir
2c7bc     00 FA 05 F6 | 	mov	result1, #0
2c7c0                 | __system____root_closedir_ret
2c7c0     2D 00 64 FD | 	ret
2c7c4                 | 
2c7c4                 | __system____root_stat
2c7c4     0A 01 02 F6 | 	mov	_var01, arg02
2c7c8     00 13 02 F6 | 	mov	arg01, _var01
2c7cc     00 14 06 F6 | 	mov	arg02, #0
2c7d0     30 16 06 F6 | 	mov	arg03, #48
2c7d4     98 00 A0 FD | 	call	#\builtin_bytefill_
2c7d8     08 00 06 F1 | 	add	_var01, #8
2c7dc     08 00 80 FF 
2c7e0     00 FF 6B FC | 	wrlong	##4607, _var01
2c7e4     00 FA 05 F6 | 	mov	result1, #0
2c7e8                 | __system____root_stat_ret
2c7e8     2D 00 64 FD | 	ret
2c7ec                 | 
2c7ec                 | __system___normalizeName
2c7ec     00 00 06 F6 | 	mov	_var01, #0
2c7f0     09 03 02 F6 | 	mov	_var02, arg01
2c7f4     01 05 02 F6 | 	mov	_var03, _var02
2c7f8                 | LR__4160
2c7f8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c7fc     5C 01 90 AD |  if_e	jmp	#LR__4179
2c800     00 00 0E F2 | 	cmp	_var01, #0 wz
2c804     02 07 02 56 |  if_ne	mov	_var04, _var03
2c808     01 04 06 51 |  if_ne	add	_var03, #1
2c80c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2c810     00 00 06 56 |  if_ne	mov	_var01, #0
2c814     01 07 C2 FA | 	rdbyte	_var04, _var02
2c818     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c81c     D8 00 90 5D |  if_ne	jmp	#LR__4172
2c820     01 02 06 F1 | 	add	_var02, #1
2c824     01 07 C2 FA | 	rdbyte	_var04, _var02
2c828     01 02 86 F1 | 	sub	_var02, #1
2c82c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c830     18 00 90 AD |  if_e	jmp	#LR__4161
2c834     01 02 06 F1 | 	add	_var02, #1
2c838     01 09 C2 FA | 	rdbyte	_var05, _var02
2c83c     01 02 86 F1 | 	sub	_var02, #1
2c840     04 0B 02 F6 | 	mov	_var06, _var05
2c844     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c848     10 00 90 5D |  if_ne	jmp	#LR__4162
2c84c                 | LR__4161
2c84c     01 0D 02 F6 | 	mov	_var07, _var02
2c850     01 0C 06 F1 | 	add	_var07, #1
2c854     06 03 02 F6 | 	mov	_var02, _var07
2c858     E0 00 90 FD | 	jmp	#LR__4176
2c85c                 | LR__4162
2c85c     01 02 06 F1 | 	add	_var02, #1
2c860     01 0D C2 FA | 	rdbyte	_var07, _var02
2c864     01 02 86 F1 | 	sub	_var02, #1
2c868     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c86c     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c870     84 00 90 5D |  if_ne	jmp	#LR__4171
2c874     02 02 06 F1 | 	add	_var02, #2
2c878     01 0D C2 FA | 	rdbyte	_var07, _var02
2c87c     02 02 86 F1 | 	sub	_var02, #2
2c880     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c884     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c888     18 00 90 AD |  if_e	jmp	#LR__4163
2c88c     02 02 06 F1 | 	add	_var02, #2
2c890     01 09 C2 FA | 	rdbyte	_var05, _var02
2c894     02 02 86 F1 | 	sub	_var02, #2
2c898     04 0B 02 F6 | 	mov	_var06, _var05
2c89c     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c8a0     54 00 90 5D |  if_ne	jmp	#LR__4170
2c8a4                 | LR__4163
2c8a4     02 02 06 F1 | 	add	_var02, #2
2c8a8     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2c8ac     40 00 90 ED |  if_be	jmp	#LR__4169
2c8b0     02 0F 02 F6 | 	mov	_var08, _var03
2c8b4     01 0E 86 F1 | 	sub	_var08, #1
2c8b8                 | LR__4164
2c8b8     07 07 C2 FA | 	rdbyte	_var04, _var08
2c8bc     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c8c0     0C 00 90 5D |  if_ne	jmp	#LR__4165
2c8c4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c8c8     01 0E 86 11 |  if_a	sub	_var08, #1
2c8cc     E8 FF 9F 1D |  if_a	jmp	#LR__4164
2c8d0                 | LR__4165
2c8d0     97 0C 48 FB | 	callpa	#(@LR__4167-@LR__4166)>>2,fcache_load_ptr_
2c8d4                 | LR__4166
2c8d4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c8d8     10 00 90 ED |  if_be	jmp	#LR__4168
2c8dc     07 07 C2 FA | 	rdbyte	_var04, _var08
2c8e0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c8e4     01 0E 86 51 |  if_ne	sub	_var08, #1
2c8e8     E8 FF 9F 5D |  if_ne	jmp	#LR__4166
2c8ec                 | LR__4167
2c8ec                 | LR__4168
2c8ec     07 05 02 F6 | 	mov	_var03, _var08
2c8f0                 | LR__4169
2c8f0     01 00 06 F6 | 	mov	_var01, #1
2c8f4     44 00 90 FD | 	jmp	#LR__4176
2c8f8                 | LR__4170
2c8f8                 | LR__4171
2c8f8                 | LR__4172
2c8f8     97 18 48 FB | 	callpa	#(@LR__4174-@LR__4173)>>2,fcache_load_ptr_
2c8fc                 | LR__4173
2c8fc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c900     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2c904     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2c908     20 00 90 AD |  if_e	jmp	#LR__4175
2c90c     01 0B 02 F6 | 	mov	_var06, _var02
2c910     01 09 02 F6 | 	mov	_var05, _var02
2c914     01 08 06 F1 | 	add	_var05, #1
2c918     05 11 C2 FA | 	rdbyte	_var09, _var06
2c91c     04 03 02 F6 | 	mov	_var02, _var05
2c920     02 11 42 FC | 	wrbyte	_var09, _var03
2c924     01 04 06 F1 | 	add	_var03, #1
2c928     D0 FF 9F FD | 	jmp	#LR__4173
2c92c                 | LR__4174
2c92c                 | LR__4175
2c92c     01 07 C2 FA | 	rdbyte	_var04, _var02
2c930     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c934     C0 FE 9F 5D |  if_ne	jmp	#LR__4160
2c938     01 00 06 F6 | 	mov	_var01, #1
2c93c                 | LR__4176
2c93c     97 0C 48 FB | 	callpa	#(@LR__4178-@LR__4177)>>2,fcache_load_ptr_
2c940                 | LR__4177
2c940     01 07 C2 FA | 	rdbyte	_var04, _var02
2c944     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c948     01 0D 02 A6 |  if_e	mov	_var07, _var02
2c94c     01 0C 06 A1 |  if_e	add	_var07, #1
2c950     06 03 02 A6 |  if_e	mov	_var02, _var07
2c954     E8 FF 9F AD |  if_e	jmp	#LR__4177
2c958                 | LR__4178
2c958     9C FE 9F FD | 	jmp	#LR__4160
2c95c                 | LR__4179
2c95c     02 01 48 FC | 	wrbyte	#0, _var03
2c960                 | __system___normalizeName_ret
2c960     2D 00 64 FD | 	ret
2c964                 | 
2c964                 | __system___strrev
2c964     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2c968     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2c96c     09 03 02 F6 | 	mov	_var02, arg01
2c970     97 1A 48 FB | 	callpa	#(@LR__4182-@LR__4180)>>2,fcache_load_ptr_
2c974                 | LR__4180
2c974     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2c978     01 02 06 51 |  if_ne	add	_var02, #1
2c97c     F4 FF 9F 5D |  if_ne	jmp	#LR__4180
2c980     01 02 86 F1 | 	sub	_var02, #1
2c984                 | LR__4181
2c984     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2c988     1C 00 90 ED |  if_be	jmp	#LR__4183
2c98c     09 01 C2 FA | 	rdbyte	_var01, arg01
2c990     01 05 C2 FA | 	rdbyte	_var03, _var02
2c994     09 05 42 FC | 	wrbyte	_var03, arg01
2c998     01 01 42 FC | 	wrbyte	_var01, _var02
2c99c     01 12 06 F1 | 	add	arg01, #1
2c9a0     01 02 86 F1 | 	sub	_var02, #1
2c9a4     DC FF 9F FD | 	jmp	#LR__4181
2c9a8                 | LR__4182
2c9a8                 | LR__4183
2c9a8                 | __system___strrev_ret
2c9a8     2D 00 64 FD | 	ret
2c9ac                 | 
2c9ac                 | __system___fmtpad
2c9ac     06 4A 05 F6 | 	mov	COUNT_, #6
2c9b0     A8 00 A0 FD | 	call	#pushregs_
2c9b4     09 27 02 F6 | 	mov	local01, arg01
2c9b8     0A 29 02 F6 | 	mov	local02, arg02
2c9bc     0B 2B 02 F6 | 	mov	local03, arg03
2c9c0     14 13 EA F8 | 	getbyte	arg01, local02, #1
2c9c4     16 28 46 F0 | 	shr	local02, #22
2c9c8     03 28 0E F5 | 	and	local02, #3 wz
2c9cc     00 2C 06 F6 | 	mov	local04, #0
2c9d0     01 28 06 A6 |  if_e	mov	local02, #1
2c9d4     0C 29 CA F7 | 	test	local02, arg04 wz
2c9d8     00 FA 05 A6 |  if_e	mov	result1, #0
2c9dc     88 00 90 AD |  if_e	jmp	#LR__4193
2c9e0     09 2B C2 F2 | 	subr	local03, arg01
2c9e4     01 2A 56 F2 | 	cmps	local03, #1 wc
2c9e8     00 FA 05 C6 |  if_b	mov	result1, #0
2c9ec     78 00 90 CD |  if_b	jmp	#LR__4193
2c9f0     03 28 0E F2 | 	cmp	local02, #3 wz
2c9f4     18 00 90 5D |  if_ne	jmp	#LR__4190
2c9f8     01 18 0E F2 | 	cmp	arg04, #1 wz
2c9fc     6E 28 62 FD | 	wrz	local02
2ca00     14 2B 02 F1 | 	add	local03, local02
2ca04     15 2B 52 F6 | 	abs	local03, local03 wc
2ca08     01 2A 46 F0 | 	shr	local03, #1
2ca0c     15 2B 82 F6 | 	negc	local03, local03
2ca10                 | LR__4190
2ca10     01 2A 56 F2 | 	cmps	local03, #1 wc
2ca14     4C 00 90 CD |  if_b	jmp	#LR__4192
2ca18     15 2F 02 F6 | 	mov	local05, local03
2ca1c                 | LR__4191
2ca1c     13 29 02 F6 | 	mov	local02, local01
2ca20     13 31 02 F6 | 	mov	local06, local01
2ca24     13 28 46 F7 | 	zerox	local02, #19
2ca28     14 30 46 F0 | 	shr	local06, #20
2ca2c     02 30 66 F0 | 	shl	local06, #2
2ca30     ED 30 02 F1 | 	add	local06, __methods__
2ca34     18 31 02 FB | 	rdlong	local06, local06
2ca38     20 12 06 F6 | 	mov	arg01, #32
2ca3c     F2 2A 02 F6 | 	mov	local03, objptr
2ca40     14 E5 01 F6 | 	mov	objptr, local02
2ca44     2D 30 62 FD | 	call	local06
2ca48     15 E5 01 F6 | 	mov	objptr, local03
2ca4c     FD 30 02 F6 | 	mov	local06, result1
2ca50     00 30 56 F2 | 	cmps	local06, #0 wc
2ca54     18 FB 01 C6 |  if_b	mov	result1, local06
2ca58     0C 00 90 CD |  if_b	jmp	#LR__4193
2ca5c     18 2D 02 F1 | 	add	local04, local06
2ca60     EE 2F 6E FB | 	djnz	local05, #LR__4191
2ca64                 | LR__4192
2ca64     16 FB 01 F6 | 	mov	result1, local04
2ca68                 | LR__4193
2ca68     A7 F0 03 F6 | 	mov	ptra, fp
2ca6c     B2 00 A0 FD | 	call	#popregs_
2ca70                 | __system___fmtpad_ret
2ca70     2D 00 64 FD | 	ret
2ca74                 | 
2ca74                 | __system___uitoa
2ca74     04 4A 05 F6 | 	mov	COUNT_, #4
2ca78     A8 00 A0 FD | 	call	#pushregs_
2ca7c     09 27 02 F6 | 	mov	local01, arg01
2ca80     00 1A 4E F2 | 	cmps	arg05, #0 wz
2ca84     13 1B 02 F6 | 	mov	arg05, local01
2ca88     00 28 06 F6 | 	mov	local02, #0
2ca8c     37 2A 06 56 |  if_ne	mov	local03, #55
2ca90     57 2A 06 A6 |  if_e	mov	local03, #87
2ca94                 | LR__4200
2ca94     0B 15 12 FD | 	qdiv	arg02, arg03
2ca98     19 2C 62 FD | 	getqy	local04
2ca9c     0B 15 12 FD | 	qdiv	arg02, arg03
2caa0     0A 2C 16 F2 | 	cmp	local04, #10 wc
2caa4     30 2C 06 C1 |  if_b	add	local04, #48
2caa8     15 2D 02 31 |  if_ae	add	local04, local03
2caac     0D 2D 42 FC | 	wrbyte	local04, arg05
2cab0     01 1A 06 F1 | 	add	arg05, #1
2cab4     01 28 06 F1 | 	add	local02, #1
2cab8     18 14 62 FD | 	getqx	arg02
2cabc     00 14 0E F2 | 	cmp	arg02, #0 wz
2cac0     D0 FF 9F 5D |  if_ne	jmp	#LR__4200
2cac4     0C 29 12 F2 | 	cmp	local02, arg04 wc
2cac8     C8 FF 9F CD |  if_b	jmp	#LR__4200
2cacc     0D 01 48 FC | 	wrbyte	#0, arg05
2cad0     13 13 02 F6 | 	mov	arg01, local01
2cad4     8C FE BF FD | 	call	#__system___strrev
2cad8     14 FB 01 F6 | 	mov	result1, local02
2cadc     A7 F0 03 F6 | 	mov	ptra, fp
2cae0     B2 00 A0 FD | 	call	#popregs_
2cae4                 | __system___uitoa_ret
2cae4     2D 00 64 FD | 	ret
2cae8                 | 
2cae8                 | __system__disassemble_0574
2cae8     10 4A 05 F6 | 	mov	COUNT_, #16
2caec     A8 00 A0 FD | 	call	#pushregs_
2caf0     09 27 02 F6 | 	mov	local01, arg01
2caf4     0A 29 02 F6 | 	mov	local02, arg02
2caf8     0B 2B 02 F6 | 	mov	local03, arg03
2cafc     0C 2D 02 F6 | 	mov	local04, arg04
2cb00     0D 2F 02 F6 | 	mov	local05, arg05
2cb04     17 13 52 F6 | 	abs	arg01, local05 wc
2cb08     1F 30 C6 C9 |  if_b	decod	local06, #31
2cb0c     00 30 06 36 |  if_ae	mov	local06, #0
2cb10     CC CF BF FD | 	call	#__system___float_fromuns
2cb14     18 FB 61 F5 | 	xor	result1, local06
2cb18     FD 32 02 F6 | 	mov	local07, result1
2cb1c     00 34 06 F6 | 	mov	local08, #0
2cb20     13 13 02 F6 | 	mov	arg01, local01
2cb24     00 14 06 F6 | 	mov	arg02, #0
2cb28     01 16 06 F6 | 	mov	arg03, #1
2cb2c     E8 D7 BF FD | 	call	#__system___float_cmp
2cb30     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb34     00 36 06 A6 |  if_e	mov	local09, #0
2cb38     14 01 68 AC |  if_e	wrlong	#0, local02
2cb3c     15 37 62 AC |  if_e	wrlong	local09, local03
2cb40     8C 01 90 AD |  if_e	jmp	#LR__4222
2cb44     13 13 02 F6 | 	mov	arg01, local01
2cb48     BC DC BF FD | 	call	#__system____builtin_ilogb
2cb4c     FD 38 02 F6 | 	mov	local10, result1
2cb50     0A 2E 0E F2 | 	cmp	local05, #10 wz
2cb54     24 00 90 5D |  if_ne	jmp	#LR__4210
2cb58     1C 37 02 F6 | 	mov	local09, local10
2cb5c     01 36 66 F0 | 	shl	local09, #1
2cb60     1C 37 02 F1 | 	add	local09, local10
2cb64     1B 39 52 F6 | 	abs	local10, local09 wc
2cb68     0A 38 16 FD | 	qdiv	local10, #10
2cb6c     09 3A 06 F6 | 	mov	local11, #9
2cb70     18 38 62 FD | 	getqx	local10
2cb74     1C 39 82 F6 | 	negc	local10, local10
2cb78     04 00 90 FD | 	jmp	#LR__4211
2cb7c                 | LR__4210
2cb7c     18 3A 06 F6 | 	mov	local11, #24
2cb80                 | LR__4211
2cb80                 | LR__4212
2cb80     08 34 56 F2 | 	cmps	local08, #8 wc
2cb84     01 34 06 F1 | 	add	local08, #1
2cb88     60 00 90 3D |  if_ae	jmp	#LR__4213
2cb8c     00 C0 1F FF 
2cb90     00 12 06 F6 | 	mov	arg01, ##1065353216
2cb94     19 15 02 F6 | 	mov	arg02, local07
2cb98     1C 17 02 F6 | 	mov	arg03, local10
2cb9c     4C E3 BF FD | 	call	#__system___float_pow_n
2cba0     FD 14 02 F6 | 	mov	arg02, result1
2cba4     13 13 02 F6 | 	mov	arg01, local01
2cba8     3C D5 BF FD | 	call	#__system___float_div
2cbac     FD 3C 02 F6 | 	mov	local12, result1
2cbb0     1E 13 02 F6 | 	mov	arg01, local12
2cbb4     00 C0 1F FF 
2cbb8     00 14 06 F6 | 	mov	arg02, ##1065353216
2cbbc     01 16 06 F6 | 	mov	arg03, #1
2cbc0     54 D7 BF FD | 	call	#__system___float_cmp
2cbc4     00 FA 55 F2 | 	cmps	result1, #0 wc
2cbc8     01 38 86 C1 |  if_b	sub	local10, #1
2cbcc     B0 FF 9F CD |  if_b	jmp	#LR__4212
2cbd0     19 15 02 F6 | 	mov	arg02, local07
2cbd4     1E 13 02 F6 | 	mov	arg01, local12
2cbd8     01 16 66 F6 | 	neg	arg03, #1
2cbdc     38 D7 BF FD | 	call	#__system___float_cmp
2cbe0     00 FA 55 F2 | 	cmps	result1, #0 wc
2cbe4     01 38 06 31 |  if_ae	add	local10, #1
2cbe8     94 FF 9F 3D |  if_ae	jmp	#LR__4212
2cbec                 | LR__4213
2cbec     1E 13 02 F6 | 	mov	arg01, local12
2cbf0     14 DC BF FD | 	call	#__system____builtin_ilogb
2cbf4     FD 3E 02 F6 | 	mov	local13, result1
2cbf8     1E 41 02 F6 | 	mov	local14, local12
2cbfc     17 41 06 F4 | 	bitl	local14, #279
2cc00     17 40 26 F4 | 	bith	local14, #23
2cc04     1F 41 62 F0 | 	shl	local14, local13
2cc08     02 2E 0E F2 | 	cmp	local05, #2 wz
2cc0c     02 2C 66 A0 |  if_e	shl	local04, #2
2cc10     00 42 06 F6 | 	mov	local15, #0
2cc14     00 2C 56 F2 | 	cmps	local04, #0 wc
2cc18     10 00 90 3D |  if_ae	jmp	#LR__4214
2cc1c     1C 2D C2 F2 | 	subr	local04, local10
2cc20     00 2C 56 F2 | 	cmps	local04, #0 wc
2cc24     A0 00 90 CD |  if_b	jmp	#LR__4221
2cc28     04 00 90 FD | 	jmp	#LR__4215
2cc2c                 | LR__4214
2cc2c     01 2C 06 F1 | 	add	local04, #1
2cc30                 | LR__4215
2cc30     1D 2D 7A F3 | 	fles	local04, local11 wcz
2cc34     01 44 06 F6 | 	mov	local16, #1
2cc38     97 22 48 FB | 	callpa	#(@LR__4217-@LR__4216)>>2,fcache_load_ptr_
2cc3c                 | LR__4216
2cc3c     00 40 00 FF 
2cc40     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2cc44     38 00 90 3D |  if_ae	jmp	#LR__4218
2cc48     01 2C 56 F2 | 	cmps	local04, #1 wc
2cc4c     01 2C 86 F1 | 	sub	local04, #1
2cc50     2C 00 90 CD |  if_b	jmp	#LR__4218
2cc54     17 43 02 FD | 	qmul	local15, local05
2cc58     20 3F 02 F6 | 	mov	local13, local14
2cc5c     17 3E 46 F0 | 	shr	local13, #23
2cc60     17 41 06 F4 | 	bitl	local14, #279
2cc64     18 42 62 FD | 	getqx	local15
2cc68     17 45 02 FD | 	qmul	local16, local05
2cc6c     18 44 62 FD | 	getqx	local16
2cc70     17 41 02 FD | 	qmul	local14, local05
2cc74     1F 43 02 F1 | 	add	local15, local13
2cc78     18 40 62 FD | 	getqx	local14
2cc7c     BC FF 9F FD | 	jmp	#LR__4216
2cc80                 | LR__4217
2cc80                 | LR__4218
2cc80     17 37 02 F6 | 	mov	local09, local05
2cc84     17 36 66 F0 | 	shl	local09, #23
2cc88     1B 3F 52 F6 | 	abs	local13, local09 wc
2cc8c     01 3E 46 F0 | 	shr	local13, #1
2cc90     1F 3F 82 F6 | 	negc	local13, local13
2cc94     1F 41 1A F2 | 	cmp	local14, local13 wcz
2cc98     20 00 90 1D |  if_a	jmp	#LR__4219
2cc9c     17 2E 66 F0 | 	shl	local05, #23
2cca0     17 3F 52 F6 | 	abs	local13, local05 wc
2cca4     01 3E 46 F0 | 	shr	local13, #1
2cca8     1F 3F 82 F6 | 	negc	local13, local13
2ccac     1F 41 0A F2 | 	cmp	local14, local13 wz
2ccb0     14 00 90 5D |  if_ne	jmp	#LR__4220
2ccb4     01 42 CE F7 | 	test	local15, #1 wz
2ccb8     0C 00 90 AD |  if_e	jmp	#LR__4220
2ccbc                 | LR__4219
2ccbc     01 42 06 F1 | 	add	local15, #1
2ccc0     22 43 0A F2 | 	cmp	local15, local16 wz
2ccc4     01 38 06 A1 |  if_e	add	local10, #1
2ccc8                 | LR__4220
2ccc8                 | LR__4221
2ccc8     14 43 62 FC | 	wrlong	local15, local02
2cccc     15 39 62 FC | 	wrlong	local10, local03
2ccd0                 | LR__4222
2ccd0     A7 F0 03 F6 | 	mov	ptra, fp
2ccd4     B2 00 A0 FD | 	call	#popregs_
2ccd8                 | __system__disassemble_0574_ret
2ccd8     2D 00 64 FD | 	ret
2ccdc                 | 
2ccdc                 | __system__emitsign_0576
2ccdc     00 FA 05 F6 | 	mov	result1, #0
2cce0     00 14 0E F2 | 	cmp	arg02, #0 wz
2cce4     09 01 02 56 |  if_ne	mov	_var01, arg01
2cce8     01 12 06 51 |  if_ne	add	arg01, #1
2ccec     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2ccf0     01 FA 05 56 |  if_ne	mov	result1, #1
2ccf4     00 16 0E F2 | 	cmp	arg03, #0 wz
2ccf8     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2ccfc     01 12 06 51 |  if_ne	add	arg01, #1
2cd00     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2cd04     02 FA 05 51 |  if_ne	add	result1, #2
2cd08                 | __system__emitsign_0576_ret
2cd08     2D 00 64 FD | 	ret
2cd0c                 | 
2cd0c                 | __system___gettxfunc
2cd0c     01 4A 05 F6 | 	mov	COUNT_, #1
2cd10     A8 00 A0 FD | 	call	#pushregs_
2cd14     A0 F8 BF FD | 	call	#__system____getftab
2cd18     FD 26 0A F6 | 	mov	local01, result1 wz
2cd1c     10 00 90 AD |  if_e	jmp	#LR__4230
2cd20     08 26 06 F1 | 	add	local01, #8
2cd24     13 15 0A FB | 	rdlong	arg02, local01 wz
2cd28     08 26 86 F1 | 	sub	local01, #8
2cd2c     08 00 90 5D |  if_ne	jmp	#LR__4231
2cd30                 | LR__4230
2cd30     00 FA 05 F6 | 	mov	result1, #0
2cd34     0C 00 90 FD | 	jmp	#LR__4232
2cd38                 | LR__4231
2cd38     00 50 05 FF 
2cd3c     00 26 46 F5 | 	or	local01, ##178257920
2cd40     13 FB 01 F6 | 	mov	result1, local01
2cd44                 | LR__4232
2cd44     A7 F0 03 F6 | 	mov	ptra, fp
2cd48     B2 00 A0 FD | 	call	#popregs_
2cd4c                 | __system___gettxfunc_ret
2cd4c     2D 00 64 FD | 	ret
2cd50                 | 
2cd50                 | __system___getrxfunc
2cd50     01 4A 05 F6 | 	mov	COUNT_, #1
2cd54     A8 00 A0 FD | 	call	#pushregs_
2cd58     5C F8 BF FD | 	call	#__system____getftab
2cd5c     FD 26 0A F6 | 	mov	local01, result1 wz
2cd60     10 00 90 AD |  if_e	jmp	#LR__4240
2cd64     08 26 06 F1 | 	add	local01, #8
2cd68     13 15 0A FB | 	rdlong	arg02, local01 wz
2cd6c     08 26 86 F1 | 	sub	local01, #8
2cd70     08 00 90 5D |  if_ne	jmp	#LR__4241
2cd74                 | LR__4240
2cd74     00 FA 05 F6 | 	mov	result1, #0
2cd78     0C 00 90 FD | 	jmp	#LR__4242
2cd7c                 | LR__4241
2cd7c     00 58 05 FF 
2cd80     00 26 46 F5 | 	or	local01, ##179306496
2cd84     13 FB 01 F6 | 	mov	result1, local01
2cd88                 | LR__4242
2cd88     A7 F0 03 F6 | 	mov	ptra, fp
2cd8c     B2 00 A0 FD | 	call	#popregs_
2cd90                 | __system___getrxfunc_ret
2cd90     2D 00 64 FD | 	ret
2cd94                 | 
2cd94                 | __system___getiolock_0616
2cd94     01 4A 05 F6 | 	mov	COUNT_, #1
2cd98     A8 00 A0 FD | 	call	#pushregs_
2cd9c     18 F8 BF FD | 	call	#__system____getftab
2cda0     FD 26 0A F6 | 	mov	local01, result1 wz
2cda4     10 00 90 AD |  if_e	jmp	#LR__4250
2cda8     08 26 06 F1 | 	add	local01, #8
2cdac     13 FB 09 FB | 	rdlong	result1, local01 wz
2cdb0     08 26 86 F1 | 	sub	local01, #8
2cdb4     18 00 90 5D |  if_ne	jmp	#LR__4251
2cdb8                 | LR__4250
2cdb8     01 00 00 FF 
2cdbc     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2cdc0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2cdc4     01 00 00 FF 
2cdc8     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2cdcc     08 00 90 FD | 	jmp	#LR__4252
2cdd0                 | LR__4251
2cdd0     0C 26 06 F1 | 	add	local01, #12
2cdd4     13 FB 01 F6 | 	mov	result1, local01
2cdd8                 | LR__4252
2cdd8     A7 F0 03 F6 | 	mov	ptra, fp
2cddc     B2 00 A0 FD | 	call	#popregs_
2cde0                 | __system___getiolock_0616_ret
2cde0     2D 00 64 FD | 	ret
2cde4                 | 
2cde4                 | __system____ScanForChar
2cde4     09 01 02 F6 | 	mov	_var01, arg01
2cde8     09 03 02 F6 | 	mov	_var02, arg01
2cdec     97 06 48 FB | 	callpa	#(@LR__4261-@LR__4260)>>2,fcache_load_ptr_
2cdf0                 | LR__4260
2cdf0     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2cdf4     01 02 06 51 |  if_ne	add	_var02, #1
2cdf8     F4 FF 9F 5D |  if_ne	jmp	#LR__4260
2cdfc                 | LR__4261
2cdfc     09 03 82 F1 | 	sub	_var02, arg01
2ce00     01 FB 01 F6 | 	mov	result1, _var02
2ce04     FD 12 0A F6 | 	mov	arg01, result1 wz
2ce08     00 FA 05 A6 |  if_e	mov	result1, #0
2ce0c     B8 00 90 AD |  if_e	jmp	#LR__4268
2ce10     0A 05 02 F6 | 	mov	_var03, arg02
2ce14     07 04 4E F7 | 	zerox	_var03, #7 wz
2ce18     00 FA 05 A6 |  if_e	mov	result1, #0
2ce1c     A8 00 90 AD |  if_e	jmp	#LR__4268
2ce20     01 16 16 F2 | 	cmp	arg03, #1 wc
2ce24     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2ce28     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2ce2c     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2ce30     94 00 90 4D |  if_c_and_nz	jmp	#LR__4268
2ce34     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2ce38     10 00 90 ED |  if_be	jmp	#LR__4262
2ce3c     00 18 0E F2 | 	cmp	arg04, #0 wz
2ce40     00 FA 05 A6 |  if_e	mov	result1, #0
2ce44     80 00 90 AD |  if_e	jmp	#LR__4268
2ce48     09 17 02 F6 | 	mov	arg03, arg01
2ce4c                 | LR__4262
2ce4c     01 16 86 F1 | 	sub	arg03, #1
2ce50     00 18 0E F2 | 	cmp	arg04, #0 wz
2ce54     38 00 90 5D |  if_ne	jmp	#LR__4264
2ce58     0B 07 02 F6 | 	mov	_var04, arg03
2ce5c     09 09 02 F6 | 	mov	_var05, arg01
2ce60                 | LR__4263
2ce60     04 07 12 F2 | 	cmp	_var04, _var05 wc
2ce64     5C 00 90 3D |  if_ae	jmp	#LR__4267
2ce68     03 05 02 F6 | 	mov	_var03, _var04
2ce6c     00 05 02 F1 | 	add	_var03, _var01
2ce70     02 05 C2 FA | 	rdbyte	_var03, _var03
2ce74     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2ce78     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2ce7c     01 06 06 A1 |  if_e	add	_var04, #1
2ce80     03 FB 01 A6 |  if_e	mov	result1, _var04
2ce84     40 00 90 AD |  if_e	jmp	#LR__4268
2ce88     01 06 06 F1 | 	add	_var04, #1
2ce8c     D0 FF 9F FD | 	jmp	#LR__4263
2ce90                 | LR__4264
2ce90     0B 07 02 F6 | 	mov	_var04, arg03
2ce94                 | LR__4265
2ce94     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2ce98     28 00 90 1D |  if_a	jmp	#LR__4266
2ce9c     03 09 02 F6 | 	mov	_var05, _var04
2cea0     00 09 02 F1 | 	add	_var05, _var01
2cea4     04 05 C2 FA | 	rdbyte	_var03, _var05
2cea8     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2ceac     04 05 0A F2 | 	cmp	_var03, _var05 wz
2ceb0     01 06 06 A1 |  if_e	add	_var04, #1
2ceb4     03 FB 01 A6 |  if_e	mov	result1, _var04
2ceb8     0C 00 90 AD |  if_e	jmp	#LR__4268
2cebc     01 06 86 F1 | 	sub	_var04, #1
2cec0     D0 FF 9F FD | 	jmp	#LR__4265
2cec4                 | LR__4266
2cec4                 | LR__4267
2cec4     00 FA 05 F6 | 	mov	result1, #0
2cec8                 | LR__4268
2cec8                 | __system____ScanForChar_ret
2cec8     2D 00 64 FD | 	ret
2cecc                 | 
2cecc                 | __system___basic_dir
2cecc     05 4A 05 F6 | 	mov	COUNT_, #5
2ced0     A8 00 A0 FD | 	call	#pushregs_
2ced4     4C F0 07 F1 | 	add	ptra, #76
2ced8     04 4E 05 F1 | 	add	fp, #4
2cedc     A7 12 62 FC | 	wrlong	arg01, fp
2cee0     04 4E 05 F1 | 	add	fp, #4
2cee4     A7 14 62 FC | 	wrlong	arg02, fp
2cee8     04 4E 85 F1 | 	sub	fp, #4
2ceec     A7 14 0A FB | 	rdlong	arg02, fp wz
2cef0     04 4E 85 F1 | 	sub	fp, #4
2cef4     04 4E 05 51 |  if_ne	add	fp, #4
2cef8     A7 26 02 5B |  if_ne	rdlong	local01, fp
2cefc     04 4E 85 51 |  if_ne	sub	fp, #4
2cf00     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2cf04     70 00 90 AD |  if_e	jmp	#LR__4270
2cf08     03 00 00 FF 
2cf0c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cf10     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2cf14     03 00 00 FF 
2cf18     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cf1c     03 00 00 5F 
2cf20     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2cf24     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2cf28     03 00 00 5F 
2cf2c     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2cf30     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2cf34     B5 01 00 FF 
2cf38     E0 13 06 F6 | 	mov	arg01, ##@LR__5438
2cf3c     E0 E8 BF FD | 	call	#__system__opendir
2cf40     03 00 00 FF 
2cf44     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cf48     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2cf4c     08 4E 05 F1 | 	add	fp, #8
2cf50     A7 28 02 FB | 	rdlong	local02, fp
2cf54     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2cf58     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2cf5c     04 4E 85 F1 | 	sub	fp, #4
2cf60     A7 28 02 FB | 	rdlong	local02, fp
2cf64     04 4E 85 F1 | 	sub	fp, #4
2cf68     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2cf6c     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2cf70     03 00 00 FF 
2cf74     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2cf78                 | LR__4270
2cf78     03 00 00 FF 
2cf7c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cf80     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2cf84     03 00 00 FF 
2cf88     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cf8c     B5 01 00 AF 
2cf90     E2 FB 05 A6 |  if_e	mov	result1, ##@LR__5439
2cf94     84 02 90 AD |  if_e	jmp	#LR__4283
2cf98                 | LR__4271
2cf98     03 00 00 FF 
2cf9c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cfa0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2cfa4     03 00 00 FF 
2cfa8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cfac     D0 E9 BF FD | 	call	#__system__readdir
2cfb0     0C 4E 05 F1 | 	add	fp, #12
2cfb4     A7 FA 61 FC | 	wrlong	result1, fp
2cfb8     0C 4E 85 F1 | 	sub	fp, #12
2cfbc     00 FA 0D F2 | 	cmp	result1, #0 wz
2cfc0     38 00 90 5D |  if_ne	jmp	#LR__4272
2cfc4     03 00 00 FF 
2cfc8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cfcc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2cfd0     03 00 00 FF 
2cfd4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cfd8     30 E9 BF FD | 	call	#__system__closedir
2cfdc     03 00 00 FF 
2cfe0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cfe4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2cfe8     03 00 00 FF 
2cfec     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cff0     B5 01 00 FF 
2cff4     E4 FB 05 F6 | 	mov	result1, ##@LR__5440
2cff8     20 02 90 FD | 	jmp	#LR__4283
2cffc                 | LR__4272
2cffc     0C 4E 05 F1 | 	add	fp, #12
2d000     A7 12 02 FB | 	rdlong	arg01, fp
2d004     0C 4E 85 F1 | 	sub	fp, #12
2d008     03 00 00 FF 
2d00c     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2d010     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2d014     03 00 00 FF 
2d018     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2d01c     10 09 B0 FD | 	call	#__system___pat_match
2d020     00 FA 0D F2 | 	cmp	result1, #0 wz
2d024     70 FF 9F AD |  if_e	jmp	#LR__4271
2d028     03 00 00 FF 
2d02c     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2d030     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2d034     03 00 00 FF 
2d038     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2d03c     78 01 90 AD |  if_e	jmp	#LR__4279
2d040     0C 4E 05 F1 | 	add	fp, #12
2d044     A7 12 02 FB | 	rdlong	arg01, fp
2d048     04 4E 05 F1 | 	add	fp, #4
2d04c     A7 14 02 F6 | 	mov	arg02, fp
2d050     10 4E 85 F1 | 	sub	fp, #16
2d054     2C F2 BF FD | 	call	#__system__stat
2d058     40 4E 05 F1 | 	add	fp, #64
2d05c     A7 FA 61 FC | 	wrlong	result1, fp
2d060     40 4E 85 F1 | 	sub	fp, #64
2d064     00 FA 0D F2 | 	cmp	result1, #0 wz
2d068     B5 01 00 5F 
2d06c     E6 FB 05 56 |  if_ne	mov	result1, ##@LR__5441
2d070     A8 01 90 5D |  if_ne	jmp	#LR__4283
2d074     18 4E 05 F1 | 	add	fp, #24
2d078     A7 28 02 FB | 	rdlong	local02, fp
2d07c     78 00 00 FF 
2d080     00 28 06 F5 | 	and	local02, ##61440
2d084     2C 4E 05 F1 | 	add	fp, #44
2d088     A7 28 62 FC | 	wrlong	local02, fp
2d08c     38 4E 85 F1 | 	sub	fp, #56
2d090     A7 28 02 FB | 	rdlong	local02, fp
2d094     0C 4E 85 F1 | 	sub	fp, #12
2d098     14 29 C2 FA | 	rdbyte	local02, local02
2d09c     2E 28 0E F2 | 	cmp	local02, #46 wz
2d0a0     08 4E 05 A1 |  if_e	add	fp, #8
2d0a4     A7 04 68 AC |  if_e	wrlong	#2, fp
2d0a8     08 4E C5 F3 | 	sumz	fp, #8
2d0ac     A7 00 68 5C |  if_ne	wrlong	#0, fp
2d0b0     08 4E 85 51 |  if_ne	sub	fp, #8
2d0b4     44 4E 05 F1 | 	add	fp, #68
2d0b8     A7 28 02 FB | 	rdlong	local02, fp
2d0bc     44 4E 85 F1 | 	sub	fp, #68
2d0c0     08 00 00 FF 
2d0c4     00 28 0E F2 | 	cmp	local02, ##4096 wz
2d0c8     18 00 90 5D |  if_ne	jmp	#LR__4273
2d0cc     08 4E 05 F1 | 	add	fp, #8
2d0d0     A7 28 02 FB | 	rdlong	local02, fp
2d0d4     10 28 46 F5 | 	or	local02, #16
2d0d8     A7 28 62 FC | 	wrlong	local02, fp
2d0dc     08 4E 85 F1 | 	sub	fp, #8
2d0e0     AC 00 90 FD | 	jmp	#LR__4278
2d0e4                 | LR__4273
2d0e4     44 4E 05 F1 | 	add	fp, #68
2d0e8     A7 28 02 FB | 	rdlong	local02, fp
2d0ec     44 4E 85 F1 | 	sub	fp, #68
2d0f0     10 00 00 FF 
2d0f4     00 28 0E F2 | 	cmp	local02, ##8192 wz
2d0f8     44 4E 05 51 |  if_ne	add	fp, #68
2d0fc     A7 26 02 5B |  if_ne	rdlong	local01, fp
2d100     44 4E 85 51 |  if_ne	sub	fp, #68
2d104     18 00 00 5F 
2d108     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2d10c     44 4E 05 51 |  if_ne	add	fp, #68
2d110     13 2B 02 56 |  if_ne	mov	local03, local01
2d114     44 4E 85 51 |  if_ne	sub	fp, #68
2d118     20 00 00 5F 
2d11c     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2d120     18 00 90 5D |  if_ne	jmp	#LR__4274
2d124     08 4E 05 F1 | 	add	fp, #8
2d128     A7 28 02 FB | 	rdlong	local02, fp
2d12c     04 28 46 F5 | 	or	local02, #4
2d130     A7 28 62 FC | 	wrlong	local02, fp
2d134     08 4E 85 F1 | 	sub	fp, #8
2d138     54 00 90 FD | 	jmp	#LR__4277
2d13c                 | LR__4274
2d13c     18 4E 05 F1 | 	add	fp, #24
2d140     A7 28 02 FB | 	rdlong	local02, fp
2d144     18 4E 85 F1 | 	sub	fp, #24
2d148     92 28 CE F7 | 	test	local02, #146 wz
2d14c     18 00 90 5D |  if_ne	jmp	#LR__4275
2d150     08 4E 05 F1 | 	add	fp, #8
2d154     A7 28 02 FB | 	rdlong	local02, fp
2d158     01 28 46 F5 | 	or	local02, #1
2d15c     A7 28 62 FC | 	wrlong	local02, fp
2d160     08 4E 85 F1 | 	sub	fp, #8
2d164     28 00 90 FD | 	jmp	#LR__4276
2d168                 | LR__4275
2d168     44 4E 05 F1 | 	add	fp, #68
2d16c     A7 2C 02 FB | 	rdlong	local04, fp
2d170     44 4E 85 F1 | 	sub	fp, #68
2d174     08 00 00 FF 
2d178     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2d17c     08 4E 05 51 |  if_ne	add	fp, #8
2d180     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2d184     20 2C 46 55 |  if_ne	or	local04, #32
2d188     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2d18c     08 4E 85 51 |  if_ne	sub	fp, #8
2d190                 | LR__4276
2d190                 | LR__4277
2d190                 | LR__4278
2d190     08 4E 05 F1 | 	add	fp, #8
2d194     A7 2C 02 FB | 	rdlong	local04, fp
2d198     08 4E 85 F1 | 	sub	fp, #8
2d19c     03 00 00 FF 
2d1a0     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2d1a4     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2d1a8     03 00 00 FF 
2d1ac     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2d1b0     13 2D CA F7 | 	test	local04, local01 wz
2d1b4     E0 FD 9F AD |  if_e	jmp	#LR__4271
2d1b8                 | LR__4279
2d1b8     0C 4E 05 F1 | 	add	fp, #12
2d1bc     A7 12 02 FB | 	rdlong	arg01, fp
2d1c0     0C 4E 85 F1 | 	sub	fp, #12
2d1c4     09 2F 02 F6 | 	mov	local05, arg01
2d1c8     97 06 48 FB | 	callpa	#(@LR__4281-@LR__4280)>>2,fcache_load_ptr_
2d1cc                 | LR__4280
2d1cc     17 FB C9 FA | 	rdbyte	result1, local05 wz
2d1d0     01 2E 06 51 |  if_ne	add	local05, #1
2d1d4     F4 FF 9F 5D |  if_ne	jmp	#LR__4280
2d1d8                 | LR__4281
2d1d8     17 13 C2 F2 | 	subr	arg01, local05
2d1dc     01 12 06 F1 | 	add	arg01, #1
2d1e0     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2d1e4     48 4E 05 F1 | 	add	fp, #72
2d1e8     A7 FA 61 FC | 	wrlong	result1, fp
2d1ec     48 4E 85 F1 | 	sub	fp, #72
2d1f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d1f4     18 00 90 AD |  if_e	jmp	#LR__4282
2d1f8     48 4E 05 F1 | 	add	fp, #72
2d1fc     A7 12 02 FB | 	rdlong	arg01, fp
2d200     3C 4E 85 F1 | 	sub	fp, #60
2d204     A7 14 02 FB | 	rdlong	arg02, fp
2d208     0C 4E 85 F1 | 	sub	fp, #12
2d20c     10 9E BF FD | 	call	#__system____builtin_strcpy
2d210                 | LR__4282
2d210     48 4E 05 F1 | 	add	fp, #72
2d214     A7 FA 01 FB | 	rdlong	result1, fp
2d218     48 4E 85 F1 | 	sub	fp, #72
2d21c                 | LR__4283
2d21c     A7 F0 03 F6 | 	mov	ptra, fp
2d220     B2 00 A0 FD | 	call	#popregs_
2d224                 | __system___basic_dir_ret
2d224     2D 00 64 FD | 	ret
2d228                 | 
2d228                 | __system__pack_0688
2d228     09 01 02 F6 | 	mov	_var01, arg01
2d22c     7F 16 06 F1 | 	add	arg03, #127
2d230     04 18 CE F7 | 	test	arg04, #4 wz
2d234     10 00 90 AD |  if_e	jmp	#LR__4290
2d238     00 00 0E F2 | 	cmp	_var01, #0 wz
2d23c     16 00 C6 A9 |  if_e	decod	_var01, #22
2d240     F7 00 26 F4 | 	bith	_var01, #247
2d244     B4 00 90 FD | 	jmp	#LR__4299
2d248                 | LR__4290
2d248     02 18 CE F7 | 	test	arg04, #2 wz
2d24c     00 C0 3F 5F 
2d250     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2d254     00 14 06 56 |  if_ne	mov	arg02, #0
2d258     A0 00 90 5D |  if_ne	jmp	#LR__4298
2d25c     08 18 CE F7 | 	test	arg04, #8 wz
2d260     00 00 06 56 |  if_ne	mov	_var01, #0
2d264     94 00 90 5D |  if_ne	jmp	#LR__4297
2d268     FF 16 56 F2 | 	cmps	arg03, #255 wc
2d26c     00 C0 3F 3F 
2d270     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2d274     00 14 06 36 |  if_ae	mov	arg02, #0
2d278     80 00 90 3D |  if_ae	jmp	#LR__4296
2d27c     01 16 56 F2 | 	cmps	arg03, #1 wc
2d280     6C 00 90 3D |  if_ae	jmp	#LR__4294
2d284     01 14 46 F0 | 	shr	arg02, #1
2d288     00 03 02 F6 | 	mov	_var02, _var01
2d28c     01 02 06 F5 | 	and	_var02, #1
2d290     1F 02 66 F0 | 	shl	_var02, #31
2d294     01 15 42 F5 | 	or	arg02, _var02
2d298     01 00 46 F0 | 	shr	_var01, #1
2d29c     97 1E 48 FB | 	callpa	#(@LR__4292-@LR__4291)>>2,fcache_load_ptr_
2d2a0                 | LR__4291
2d2a0     00 16 56 F2 | 	cmps	arg03, #0 wc
2d2a4     34 00 90 3D |  if_ae	jmp	#LR__4293
2d2a8     00 00 0E F2 | 	cmp	_var01, #0 wz
2d2ac     2C 00 90 AD |  if_e	jmp	#LR__4293
2d2b0     0A 13 02 F6 | 	mov	arg01, arg02
2d2b4     01 12 06 F5 | 	and	arg01, #1
2d2b8     01 16 06 F1 | 	add	arg03, #1
2d2bc     01 14 46 F0 | 	shr	arg02, #1
2d2c0     00 03 02 F6 | 	mov	_var02, _var01
2d2c4     01 02 06 F5 | 	and	_var02, #1
2d2c8     1F 02 66 F0 | 	shl	_var02, #31
2d2cc     01 15 42 F5 | 	or	arg02, _var02
2d2d0     09 15 42 F5 | 	or	arg02, arg01
2d2d4     01 00 46 F0 | 	shr	_var01, #1
2d2d8     C4 FF 9F FD | 	jmp	#LR__4291
2d2dc                 | LR__4292
2d2dc                 | LR__4293
2d2dc     00 16 56 F2 | 	cmps	arg03, #0 wc
2d2e0     18 00 90 3D |  if_ae	jmp	#LR__4295
2d2e4     00 14 0E F2 | 	cmp	arg02, #0 wz
2d2e8     6F 14 62 FD | 	wrnz	arg02
2d2ec     0C 00 90 FD | 	jmp	#LR__4295
2d2f0                 | LR__4294
2d2f0     17 01 06 F4 | 	bitl	_var01, #279
2d2f4     17 16 66 F0 | 	shl	arg03, #23
2d2f8     0B 01 42 F5 | 	or	_var01, arg03
2d2fc                 | LR__4295
2d2fc                 | LR__4296
2d2fc                 | LR__4297
2d2fc                 | LR__4298
2d2fc                 | LR__4299
2d2fc     01 00 CE F7 | 	test	_var01, #1 wz
2d300     01 14 46 55 |  if_ne	or	arg02, #1
2d304     0A 17 02 F6 | 	mov	arg03, arg02
2d308     00 02 06 F6 | 	mov	_var02, #0
2d30c     FF FF 3F FF 
2d310     FF 15 06 F1 | 	add	arg02, ##2147483647
2d314     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2d318     01 02 06 C6 |  if_b	mov	_var02, #1
2d31c     01 01 02 F1 | 	add	_var01, _var02
2d320     01 18 CE F7 | 	test	arg04, #1 wz
2d324     1F 00 26 54 |  if_ne	bith	_var01, #31
2d328     00 FB 01 F6 | 	mov	result1, _var01
2d32c                 | __system__pack_0688_ret
2d32c     2D 00 64 FD | 	ret
2d330                 | 
2d330                 | __system___rxtxioctl_0778
2d330     00 15 0E F2 | 	cmp	arg02, #256 wz
2d334     0C 00 90 AD |  if_e	jmp	#LR__4300
2d338     01 15 0E F2 | 	cmp	arg02, #257 wz
2d33c     1C 00 90 AD |  if_e	jmp	#LR__4301
2d340     30 00 90 FD | 	jmp	#LR__4302
2d344                 | LR__4300
2d344     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d348     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2d34c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d350     0B FB 61 FC | 	wrlong	result1, arg03
2d354     00 FA 05 F6 | 	mov	result1, #0
2d358     28 00 90 FD | 	jmp	#LR__4303
2d35c                 | LR__4301
2d35c     0B 13 02 FB | 	rdlong	arg01, arg03
2d360     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d364     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d368     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d36c     00 FA 05 F6 | 	mov	result1, #0
2d370     10 00 90 FD | 	jmp	#LR__4303
2d374                 | LR__4302
2d374     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d378     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d37c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d380     01 FA 65 F6 | 	neg	result1, #1
2d384                 | LR__4303
2d384                 | __system___rxtxioctl_0778_ret
2d384     2D 00 64 FD | 	ret
2d388                 | 
2d388                 | __system____dummy_flush_0779
2d388     00 FA 05 F6 | 	mov	result1, #0
2d38c                 | __system____dummy_flush_0779_ret
2d38c     2D 00 64 FD | 	ret
2d390                 | 
2d390                 | __system___vfswrite
2d390     09 4A 05 F6 | 	mov	COUNT_, #9
2d394     A8 00 A0 FD | 	call	#pushregs_
2d398     09 27 02 F6 | 	mov	local01, arg01
2d39c     0A 29 02 F6 | 	mov	local02, arg02
2d3a0     0B 2B 02 F6 | 	mov	local03, arg03
2d3a4     14 2D 02 F6 | 	mov	local04, local02
2d3a8     08 26 06 F1 | 	add	local01, #8
2d3ac     13 13 02 FB | 	rdlong	arg01, local01
2d3b0     08 26 86 F1 | 	sub	local01, #8
2d3b4     02 12 CE F7 | 	test	arg01, #2 wz
2d3b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d3bc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d3c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d3c4     01 FA 65 A6 |  if_e	neg	result1, #1
2d3c8     80 01 90 AD |  if_e	jmp	#LR__4316
2d3cc     08 26 06 F1 | 	add	local01, #8
2d3d0     13 FB 01 FB | 	rdlong	result1, local01
2d3d4     08 26 86 F1 | 	sub	local01, #8
2d3d8     40 FA CD F7 | 	test	result1, #64 wz
2d3dc     68 00 90 AD |  if_e	jmp	#LR__4311
2d3e0     08 26 06 F1 | 	add	local01, #8
2d3e4     13 15 02 FB | 	rdlong	arg02, local01
2d3e8     08 26 86 F1 | 	sub	local01, #8
2d3ec     80 14 CE F7 | 	test	arg02, #128 wz
2d3f0     54 00 90 AD |  if_e	jmp	#LR__4310
2d3f4     30 26 06 F1 | 	add	local01, #48
2d3f8     13 2F 02 FB | 	rdlong	local05, local01
2d3fc     17 31 02 F6 | 	mov	local06, local05
2d400     30 26 86 F1 | 	sub	local01, #48
2d404     13 30 46 F7 | 	zerox	local06, #19
2d408     14 2E 46 F0 | 	shr	local05, #20
2d40c     02 2E 66 F0 | 	shl	local05, #2
2d410     ED 2E 02 F1 | 	add	local05, __methods__
2d414     17 2F 02 FB | 	rdlong	local05, local05
2d418     13 13 02 F6 | 	mov	arg01, local01
2d41c     00 14 06 F6 | 	mov	arg02, #0
2d420     02 16 06 F6 | 	mov	arg03, #2
2d424     F2 32 02 F6 | 	mov	local07, objptr
2d428     18 E5 01 F6 | 	mov	objptr, local06
2d42c     2D 2E 62 FD | 	call	local05
2d430     19 E5 01 F6 | 	mov	objptr, local07
2d434     08 26 06 F1 | 	add	local01, #8
2d438     13 33 02 FB | 	rdlong	local07, local01
2d43c     80 32 26 F5 | 	andn	local07, #128
2d440     13 33 62 FC | 	wrlong	local07, local01
2d444     08 26 86 F1 | 	sub	local01, #8
2d448                 | LR__4310
2d448                 | LR__4311
2d448     18 26 06 F1 | 	add	local01, #24
2d44c     13 33 0A FB | 	rdlong	local07, local01 wz
2d450     18 26 86 F1 | 	sub	local01, #24
2d454     80 00 90 AD |  if_e	jmp	#LR__4313
2d458     18 26 06 F1 | 	add	local01, #24
2d45c     13 2F 02 FB | 	rdlong	local05, local01
2d460     17 31 02 F6 | 	mov	local06, local05
2d464     18 26 86 F1 | 	sub	local01, #24
2d468     13 30 46 F7 | 	zerox	local06, #19
2d46c     14 2E 46 F0 | 	shr	local05, #20
2d470     02 2E 66 F0 | 	shl	local05, #2
2d474     ED 2E 02 F1 | 	add	local05, __methods__
2d478     17 2F 02 FB | 	rdlong	local05, local05
2d47c     14 15 02 F6 | 	mov	arg02, local02
2d480     15 17 02 F6 | 	mov	arg03, local03
2d484     13 13 02 F6 | 	mov	arg01, local01
2d488     F2 32 02 F6 | 	mov	local07, objptr
2d48c     18 E5 01 F6 | 	mov	objptr, local06
2d490     2D 2E 62 FD | 	call	local05
2d494     19 E5 01 F6 | 	mov	objptr, local07
2d498     FD 34 02 F6 | 	mov	local08, result1
2d49c     00 34 56 F2 | 	cmps	local08, #0 wc
2d4a0     2C 00 90 3D |  if_ae	jmp	#LR__4312
2d4a4     08 26 06 F1 | 	add	local01, #8
2d4a8     13 33 02 FB | 	rdlong	local07, local01
2d4ac     20 32 46 F5 | 	or	local07, #32
2d4b0     13 33 62 FC | 	wrlong	local07, local01
2d4b4     00 34 4E F2 | 	cmps	local08, #0 wz
2d4b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d4bc     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2d4c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d4c4     01 FA 65 56 |  if_ne	neg	result1, #1
2d4c8     00 FA 05 A6 |  if_e	mov	result1, #0
2d4cc     7C 00 90 FD | 	jmp	#LR__4316
2d4d0                 | LR__4312
2d4d0     1A FB 01 F6 | 	mov	result1, local08
2d4d4     74 00 90 FD | 	jmp	#LR__4316
2d4d8                 | LR__4313
2d4d8     1C 26 06 F1 | 	add	local01, #28
2d4dc     13 37 0A FB | 	rdlong	local09, local01 wz
2d4e0     1C 26 86 F1 | 	sub	local01, #28
2d4e4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d4e8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d4ec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d4f0     01 FA 65 A6 |  if_e	neg	result1, #1
2d4f4     54 00 90 AD |  if_e	jmp	#LR__4316
2d4f8     00 34 06 F6 | 	mov	local08, #0
2d4fc                 | LR__4314
2d4fc     01 2A 16 F2 | 	cmp	local03, #1 wc
2d500     44 00 90 CD |  if_b	jmp	#LR__4315
2d504     1B 31 02 F6 | 	mov	local06, local09
2d508     1B 2F 02 F6 | 	mov	local05, local09
2d50c     13 30 46 F7 | 	zerox	local06, #19
2d510     14 2E 46 F0 | 	shr	local05, #20
2d514     02 2E 66 F0 | 	shl	local05, #2
2d518     ED 2E 02 F1 | 	add	local05, __methods__
2d51c     17 2F 02 FB | 	rdlong	local05, local05
2d520     16 13 C2 FA | 	rdbyte	arg01, local04
2d524     13 15 02 F6 | 	mov	arg02, local01
2d528     F2 32 02 F6 | 	mov	local07, objptr
2d52c     18 E5 01 F6 | 	mov	objptr, local06
2d530     01 2C 06 F1 | 	add	local04, #1
2d534     2D 2E 62 FD | 	call	local05
2d538     19 E5 01 F6 | 	mov	objptr, local07
2d53c     FD 34 02 F1 | 	add	local08, result1
2d540     01 2A 86 F1 | 	sub	local03, #1
2d544     B4 FF 9F FD | 	jmp	#LR__4314
2d548                 | LR__4315
2d548     1A FB 01 F6 | 	mov	result1, local08
2d54c                 | LR__4316
2d54c     A7 F0 03 F6 | 	mov	ptra, fp
2d550     B2 00 A0 FD | 	call	#popregs_
2d554                 | __system___vfswrite_ret
2d554     2D 00 64 FD | 	ret
2d558                 | 
2d558                 | __system___vfsread
2d558     03 4A 05 F6 | 	mov	COUNT_, #3
2d55c     A8 00 A0 FD | 	call	#pushregs_
2d560     28 F0 07 F1 | 	add	ptra, #40
2d564     04 4E 05 F1 | 	add	fp, #4
2d568     A7 12 62 FC | 	wrlong	arg01, fp
2d56c     04 4E 05 F1 | 	add	fp, #4
2d570     A7 14 62 FC | 	wrlong	arg02, fp
2d574     04 4E 05 F1 | 	add	fp, #4
2d578     A7 16 62 FC | 	wrlong	arg03, fp
2d57c     04 4E 85 F1 | 	sub	fp, #4
2d580     A7 FA 01 FB | 	rdlong	result1, fp
2d584     14 4E 05 F1 | 	add	fp, #20
2d588     A7 FA 61 FC | 	wrlong	result1, fp
2d58c     04 4E 05 F1 | 	add	fp, #4
2d590     A7 00 68 FC | 	wrlong	#0, fp
2d594     1C 4E 85 F1 | 	sub	fp, #28
2d598     A7 12 02 FB | 	rdlong	arg01, fp
2d59c     04 4E 85 F1 | 	sub	fp, #4
2d5a0     08 12 06 F1 | 	add	arg01, #8
2d5a4     09 FB 01 FB | 	rdlong	result1, arg01
2d5a8     01 FA CD F7 | 	test	result1, #1 wz
2d5ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d5b0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d5b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d5b8     01 FA 65 A6 |  if_e	neg	result1, #1
2d5bc     74 02 90 AD |  if_e	jmp	#LR__4326
2d5c0     04 4E 05 F1 | 	add	fp, #4
2d5c4     A7 12 02 FB | 	rdlong	arg01, fp
2d5c8     04 4E 85 F1 | 	sub	fp, #4
2d5cc     14 12 06 F1 | 	add	arg01, #20
2d5d0     09 FB 09 FB | 	rdlong	result1, arg01 wz
2d5d4     B8 00 90 AD |  if_e	jmp	#LR__4321
2d5d8     04 4E 05 F1 | 	add	fp, #4
2d5dc     A7 12 02 FB | 	rdlong	arg01, fp
2d5e0     09 17 02 F6 | 	mov	arg03, arg01
2d5e4     14 16 06 F1 | 	add	arg03, #20
2d5e8     0B 27 02 FB | 	rdlong	local01, arg03
2d5ec     13 29 02 F6 | 	mov	local02, local01
2d5f0     13 26 46 F7 | 	zerox	local01, #19
2d5f4     14 28 46 F0 | 	shr	local02, #20
2d5f8     02 28 66 F0 | 	shl	local02, #2
2d5fc     ED 28 02 F1 | 	add	local02, __methods__
2d600     14 29 02 FB | 	rdlong	local02, local02
2d604     04 4E 05 F1 | 	add	fp, #4
2d608     A7 14 02 FB | 	rdlong	arg02, fp
2d60c     04 4E 05 F1 | 	add	fp, #4
2d610     A7 16 02 FB | 	rdlong	arg03, fp
2d614     0C 4E 85 F1 | 	sub	fp, #12
2d618     F2 2A 02 F6 | 	mov	local03, objptr
2d61c     13 E5 01 F6 | 	mov	objptr, local01
2d620     2D 28 62 FD | 	call	local02
2d624     15 E5 01 F6 | 	mov	objptr, local03
2d628     10 4E 05 F1 | 	add	fp, #16
2d62c     A7 FA 61 FC | 	wrlong	result1, fp
2d630     10 4E 85 F1 | 	sub	fp, #16
2d634     00 FA 55 F2 | 	cmps	result1, #0 wc
2d638     44 00 90 3D |  if_ae	jmp	#LR__4320
2d63c     04 4E 05 F1 | 	add	fp, #4
2d640     A7 2A 02 FB | 	rdlong	local03, fp
2d644     15 27 02 F6 | 	mov	local01, local03
2d648     08 2A 06 F1 | 	add	local03, #8
2d64c     15 29 02 FB | 	rdlong	local02, local03
2d650     20 28 46 F5 | 	or	local02, #32
2d654     08 26 06 F1 | 	add	local01, #8
2d658     13 29 62 FC | 	wrlong	local02, local01
2d65c     0C 4E 05 F1 | 	add	fp, #12
2d660     A7 12 0A FB | 	rdlong	arg01, fp wz
2d664     10 4E 85 F1 | 	sub	fp, #16
2d668     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d66c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d670     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d674     01 FA 65 56 |  if_ne	neg	result1, #1
2d678     00 FA 05 A6 |  if_e	mov	result1, #0
2d67c     B4 01 90 FD | 	jmp	#LR__4326
2d680                 | LR__4320
2d680     10 4E 05 F1 | 	add	fp, #16
2d684     A7 FA 01 FB | 	rdlong	result1, fp
2d688     10 4E 85 F1 | 	sub	fp, #16
2d68c     A4 01 90 FD | 	jmp	#LR__4326
2d690                 | LR__4321
2d690     04 4E 05 F1 | 	add	fp, #4
2d694     A7 12 02 FB | 	rdlong	arg01, fp
2d698     20 12 06 F1 | 	add	arg01, #32
2d69c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2d6a0     14 4E 05 F1 | 	add	fp, #20
2d6a4     A7 12 62 FC | 	wrlong	arg01, fp
2d6a8     18 4E 85 F1 | 	sub	fp, #24
2d6ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d6b0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d6b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d6b8     01 FA 65 A6 |  if_e	neg	result1, #1
2d6bc     74 01 90 AD |  if_e	jmp	#LR__4326
2d6c0     04 4E 05 F1 | 	add	fp, #4
2d6c4     A7 2A 02 FB | 	rdlong	local03, fp
2d6c8     04 4E 85 F1 | 	sub	fp, #4
2d6cc     28 2A 06 F1 | 	add	local03, #40
2d6d0     15 29 0A FB | 	rdlong	local02, local03 wz
2d6d4     7C 00 90 AD |  if_e	jmp	#LR__4323
2d6d8     04 4E 05 F1 | 	add	fp, #4
2d6dc     A7 12 02 FB | 	rdlong	arg01, fp
2d6e0     09 2B 02 F6 | 	mov	local03, arg01
2d6e4     28 2A 06 F1 | 	add	local03, #40
2d6e8     15 27 02 FB | 	rdlong	local01, local03
2d6ec     13 29 02 F6 | 	mov	local02, local01
2d6f0     13 26 46 F7 | 	zerox	local01, #19
2d6f4     14 28 46 F0 | 	shr	local02, #20
2d6f8     02 28 66 F0 | 	shl	local02, #2
2d6fc     ED 28 02 F1 | 	add	local02, __methods__
2d700     14 29 02 FB | 	rdlong	local02, local02
2d704     20 4E 05 F1 | 	add	fp, #32
2d708     A7 16 02 F6 | 	mov	arg03, fp
2d70c     24 4E 85 F1 | 	sub	fp, #36
2d710     00 15 06 F6 | 	mov	arg02, #256
2d714     F2 2A 02 F6 | 	mov	local03, objptr
2d718     13 E5 01 F6 | 	mov	objptr, local01
2d71c     2D 28 62 FD | 	call	local02
2d720     15 E5 01 F6 | 	mov	objptr, local03
2d724     10 4E 05 F1 | 	add	fp, #16
2d728     A7 FA 61 FC | 	wrlong	result1, fp
2d72c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d730     10 4E 85 F1 | 	sub	fp, #16
2d734     1C 00 90 5D |  if_ne	jmp	#LR__4322
2d738     24 4E 05 F1 | 	add	fp, #36
2d73c     A7 28 02 FB | 	rdlong	local02, fp
2d740     24 4E 85 F1 | 	sub	fp, #36
2d744     02 28 CE F7 | 	test	local02, #2 wz
2d748     20 4E 05 51 |  if_ne	add	fp, #32
2d74c     A7 02 68 5C |  if_ne	wrlong	#1, fp
2d750     20 4E 85 51 |  if_ne	sub	fp, #32
2d754                 | LR__4322
2d754                 | LR__4323
2d754     10 4E 05 F1 | 	add	fp, #16
2d758     A7 00 68 FC | 	wrlong	#0, fp
2d75c     10 4E 85 F1 | 	sub	fp, #16
2d760                 | LR__4324
2d760     0C 4E 05 F1 | 	add	fp, #12
2d764     A7 2A 02 FB | 	rdlong	local03, fp
2d768     0C 4E 85 F1 | 	sub	fp, #12
2d76c     01 2A 16 F2 | 	cmp	local03, #1 wc
2d770     B4 00 90 CD |  if_b	jmp	#LR__4325
2d774     18 4E 05 F1 | 	add	fp, #24
2d778     A7 28 02 FB | 	rdlong	local02, fp
2d77c     14 2B 02 F6 | 	mov	local03, local02
2d780     13 2A 46 F7 | 	zerox	local03, #19
2d784     14 28 46 F0 | 	shr	local02, #20
2d788     02 28 66 F0 | 	shl	local02, #2
2d78c     ED 28 02 F1 | 	add	local02, __methods__
2d790     14 29 02 FB | 	rdlong	local02, local02
2d794     14 4E 85 F1 | 	sub	fp, #20
2d798     A7 12 02 FB | 	rdlong	arg01, fp
2d79c     04 4E 85 F1 | 	sub	fp, #4
2d7a0     F2 26 02 F6 | 	mov	local01, objptr
2d7a4     15 E5 01 F6 | 	mov	objptr, local03
2d7a8     2D 28 62 FD | 	call	local02
2d7ac     13 E5 01 F6 | 	mov	objptr, local01
2d7b0     14 4E 05 F1 | 	add	fp, #20
2d7b4     A7 FA 61 FC | 	wrlong	result1, fp
2d7b8     14 4E 85 F1 | 	sub	fp, #20
2d7bc     00 FA 55 F2 | 	cmps	result1, #0 wc
2d7c0     64 00 90 CD |  if_b	jmp	#LR__4325
2d7c4     1C 4E 05 F1 | 	add	fp, #28
2d7c8     A7 2A 02 FB | 	rdlong	local03, fp
2d7cc     15 29 02 F6 | 	mov	local02, local03
2d7d0     01 28 06 F1 | 	add	local02, #1
2d7d4     A7 28 62 FC | 	wrlong	local02, fp
2d7d8     08 4E 85 F1 | 	sub	fp, #8
2d7dc     A7 28 02 FB | 	rdlong	local02, fp
2d7e0     15 29 42 FC | 	wrbyte	local02, local03
2d7e4     04 4E 85 F1 | 	sub	fp, #4
2d7e8     A7 2A 02 FB | 	rdlong	local03, fp
2d7ec     01 2A 06 F1 | 	add	local03, #1
2d7f0     A7 2A 62 FC | 	wrlong	local03, fp
2d7f4     04 4E 85 F1 | 	sub	fp, #4
2d7f8     A7 2A 02 FB | 	rdlong	local03, fp
2d7fc     01 2A 86 F1 | 	sub	local03, #1
2d800     A7 2A 62 FC | 	wrlong	local03, fp
2d804     14 4E 05 F1 | 	add	fp, #20
2d808     A7 2A 0A FB | 	rdlong	local03, fp wz
2d80c     20 4E 85 F1 | 	sub	fp, #32
2d810     4C FF 9F AD |  if_e	jmp	#LR__4324
2d814     14 4E 05 F1 | 	add	fp, #20
2d818     A7 28 02 FB | 	rdlong	local02, fp
2d81c     14 4E 85 F1 | 	sub	fp, #20
2d820     0A 28 0E F2 | 	cmp	local02, #10 wz
2d824     38 FF 9F 5D |  if_ne	jmp	#LR__4324
2d828                 | LR__4325
2d828     10 4E 05 F1 | 	add	fp, #16
2d82c     A7 FA 01 FB | 	rdlong	result1, fp
2d830     10 4E 85 F1 | 	sub	fp, #16
2d834                 | LR__4326
2d834     A7 F0 03 F6 | 	mov	ptra, fp
2d838     B2 00 A0 FD | 	call	#popregs_
2d83c                 | __system___vfsread_ret
2d83c     2D 00 64 FD | 	ret
2d840                 | 
2d840                 | __system____default_filbuf
2d840     04 4A 05 F6 | 	mov	COUNT_, #4
2d844     A8 00 A0 FD | 	call	#pushregs_
2d848     09 27 02 F6 | 	mov	local01, arg01
2d84c     13 29 02 FB | 	rdlong	local02, local01
2d850     0C 28 06 F1 | 	add	local02, #12
2d854     14 FB 09 FB | 	rdlong	result1, local02 wz
2d858     0C 28 86 F1 | 	sub	local02, #12
2d85c     20 00 90 5D |  if_ne	jmp	#LR__4330
2d860     14 28 06 F1 | 	add	local02, #20
2d864     14 FB 01 F6 | 	mov	result1, local02
2d868     04 28 86 F1 | 	sub	local02, #4
2d86c     14 FB 61 FC | 	wrlong	result1, local02
2d870     04 28 86 F1 | 	sub	local02, #4
2d874     02 00 80 FF 
2d878     14 01 68 FC | 	wrlong	##1024, local02
2d87c     0C 28 86 F1 | 	sub	local02, #12
2d880                 | LR__4330
2d880     14 26 06 F1 | 	add	local01, #20
2d884     13 2B 02 FB | 	rdlong	local03, local01
2d888     15 2D 02 F6 | 	mov	local04, local03
2d88c     14 26 86 F1 | 	sub	local01, #20
2d890     13 2C 46 F7 | 	zerox	local04, #19
2d894     14 2A 46 F0 | 	shr	local03, #20
2d898     02 2A 66 F0 | 	shl	local03, #2
2d89c     ED 2A 02 F1 | 	add	local03, __methods__
2d8a0     15 2B 02 FB | 	rdlong	local03, local03
2d8a4     10 28 06 F1 | 	add	local02, #16
2d8a8     14 15 02 FB | 	rdlong	arg02, local02
2d8ac     04 28 86 F1 | 	sub	local02, #4
2d8b0     14 17 02 FB | 	rdlong	arg03, local02
2d8b4     0C 28 86 F1 | 	sub	local02, #12
2d8b8     13 13 02 F6 | 	mov	arg01, local01
2d8bc     F2 26 02 F6 | 	mov	local01, objptr
2d8c0     16 E5 01 F6 | 	mov	objptr, local04
2d8c4     2D 2A 62 FD | 	call	local03
2d8c8     13 E5 01 F6 | 	mov	objptr, local01
2d8cc     FD 2C 02 F6 | 	mov	local04, result1
2d8d0     00 2C 56 F2 | 	cmps	local04, #0 wc
2d8d4     01 FA 65 C6 |  if_b	neg	result1, #1
2d8d8     28 00 90 CD |  if_b	jmp	#LR__4331
2d8dc     14 2D 62 FC | 	wrlong	local04, local02
2d8e0     10 28 06 F1 | 	add	local02, #16
2d8e4     14 2B 02 FB | 	rdlong	local03, local02
2d8e8     0C 28 86 F1 | 	sub	local02, #12
2d8ec     14 2B 62 FC | 	wrlong	local03, local02
2d8f0     04 28 06 F1 | 	add	local02, #4
2d8f4     14 2B 02 FB | 	rdlong	local03, local02
2d8f8     01 2A 46 F5 | 	or	local03, #1
2d8fc     14 2B 62 FC | 	wrlong	local03, local02
2d900     16 FB 01 F6 | 	mov	result1, local04
2d904                 | LR__4331
2d904     A7 F0 03 F6 | 	mov	ptra, fp
2d908     B2 00 A0 FD | 	call	#popregs_
2d90c                 | __system____default_filbuf_ret
2d90c     2D 00 64 FD | 	ret
2d910                 | 
2d910                 | __system__getlower_1168
2d910     41 12 56 F2 | 	cmps	arg01, #65 wc
2d914     10 00 90 CD |  if_b	jmp	#LR__4340
2d918     5B 12 56 F2 | 	cmps	arg01, #91 wc
2d91c     09 FB 01 C6 |  if_b	mov	result1, arg01
2d920     20 FA 05 C1 |  if_b	add	result1, #32
2d924     04 00 90 CD |  if_b	jmp	#__system__getlower_1168_ret
2d928                 | LR__4340
2d928     09 FB 01 F6 | 	mov	result1, arg01
2d92c                 | __system__getlower_1168_ret
2d92c     2D 00 64 FD | 	ret
2d930                 | 
2d930                 | __system___pat_match
2d930     08 4A 05 F6 | 	mov	COUNT_, #8
2d934     A8 00 A0 FD | 	call	#pushregs_
2d938     09 27 02 F6 | 	mov	local01, arg01
2d93c                 | LR__4350
2d93c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2d940     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2d944     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2d948     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2d94c     2C 00 90 AD |  if_e	jmp	#LR__4351
2d950     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d954     B8 FF BF FD | 	call	#__system__getlower_1168
2d958     FD 2A 02 F6 | 	mov	local03, result1
2d95c     13 13 C2 FA | 	rdbyte	arg01, local01
2d960     AC FF BF FD | 	call	#__system__getlower_1168
2d964     15 FB 09 F2 | 	cmp	result1, local03 wz
2d968     00 FA 05 56 |  if_ne	mov	result1, #0
2d96c     FC 00 90 5D |  if_ne	jmp	#LR__4359
2d970     01 26 06 F1 | 	add	local01, #1
2d974     01 14 06 F1 | 	add	arg02, #1
2d978     C0 FF 9F FD | 	jmp	#LR__4350
2d97c                 | LR__4351
2d97c     0A 2B C2 FA | 	rdbyte	local03, arg02
2d980     2A 2A 0E F2 | 	cmp	local03, #42 wz
2d984     D4 00 90 5D |  if_ne	jmp	#LR__4358
2d988     01 14 06 F1 | 	add	arg02, #1
2d98c     0A 29 C2 FA | 	rdbyte	local02, arg02
2d990     01 14 86 F1 | 	sub	arg02, #1
2d994     2E 28 0E F2 | 	cmp	local02, #46 wz
2d998     28 00 90 5D |  if_ne	jmp	#LR__4352
2d99c     02 14 06 F1 | 	add	arg02, #2
2d9a0     0A 29 C2 FA | 	rdbyte	local02, arg02
2d9a4     02 14 86 F1 | 	sub	arg02, #2
2d9a8     2A 28 0E F2 | 	cmp	local02, #42 wz
2d9ac     03 14 06 A1 |  if_e	add	arg02, #3
2d9b0     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2d9b4     03 14 86 A1 |  if_e	sub	arg02, #3
2d9b8     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2d9bc     01 FA 05 A6 |  if_e	mov	result1, #1
2d9c0     A8 00 90 AD |  if_e	jmp	#LR__4359
2d9c4                 | LR__4352
2d9c4     01 14 06 F1 | 	add	arg02, #1
2d9c8     00 30 06 F6 | 	mov	local06, #0
2d9cc     97 1E 48 FB | 	callpa	#(@LR__4355-@LR__4353)>>2,fcache_load_ptr_
2d9d0                 | LR__4353
2d9d0     18 33 02 F6 | 	mov	local07, local06
2d9d4     0A 33 02 F1 | 	add	local07, arg02
2d9d8     19 33 CA FA | 	rdbyte	local07, local07 wz
2d9dc     18 2F 02 56 |  if_ne	mov	local05, local06
2d9e0     01 2E 06 51 |  if_ne	add	local05, #1
2d9e4     17 31 02 56 |  if_ne	mov	local06, local05
2d9e8     E4 FF 9F 5D |  if_ne	jmp	#LR__4353
2d9ec     00 34 06 F6 | 	mov	local08, #0
2d9f0                 | LR__4354
2d9f0     1A 33 02 F6 | 	mov	local07, local08
2d9f4     13 33 02 F1 | 	add	local07, local01
2d9f8     19 33 CA FA | 	rdbyte	local07, local07 wz
2d9fc     1A 2F 02 56 |  if_ne	mov	local05, local08
2da00     01 2E 06 51 |  if_ne	add	local05, #1
2da04     17 35 02 56 |  if_ne	mov	local08, local05
2da08     E4 FF 9F 5D |  if_ne	jmp	#LR__4354
2da0c                 | LR__4355
2da0c     18 35 52 F2 | 	cmps	local08, local06 wc
2da10     00 FA 05 C6 |  if_b	mov	result1, #0
2da14     54 00 90 CD |  if_b	jmp	#LR__4359
2da18     1A 29 02 F6 | 	mov	local02, local08
2da1c     18 29 82 F1 | 	sub	local02, local06
2da20     14 27 02 F1 | 	add	local01, local02
2da24                 | LR__4356
2da24     01 30 56 F2 | 	cmps	local06, #1 wc
2da28     30 00 90 CD |  if_b	jmp	#LR__4357
2da2c     13 13 C2 FA | 	rdbyte	arg01, local01
2da30     DC FE BF FD | 	call	#__system__getlower_1168
2da34     FD 34 02 F6 | 	mov	local08, result1
2da38     0A 13 C2 FA | 	rdbyte	arg01, arg02
2da3c     D0 FE BF FD | 	call	#__system__getlower_1168
2da40     FD 34 0A F2 | 	cmp	local08, result1 wz
2da44     00 FA 05 56 |  if_ne	mov	result1, #0
2da48     20 00 90 5D |  if_ne	jmp	#LR__4359
2da4c     01 26 06 F1 | 	add	local01, #1
2da50     01 14 06 F1 | 	add	arg02, #1
2da54     01 30 86 F1 | 	sub	local06, #1
2da58     C8 FF 9F FD | 	jmp	#LR__4356
2da5c                 | LR__4357
2da5c                 | LR__4358
2da5c     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2da60     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2da64     01 FA 05 A6 |  if_e	mov	result1, #1
2da68     00 FA 05 56 |  if_ne	mov	result1, #0
2da6c                 | LR__4359
2da6c     A7 F0 03 F6 | 	mov	ptra, fp
2da70     B2 00 A0 FD | 	call	#popregs_
2da74                 | __system___pat_match_ret
2da74     2D 00 64 FD | 	ret
2da78                 | 
2da78                 | _fatfs_cc_ff_uni2oem
2da78     00 00 06 F6 | 	mov	_var01, #0
2da7c     80 12 16 F2 | 	cmp	arg01, #128 wc
2da80     09 01 02 C6 |  if_b	mov	_var01, arg01
2da84     58 00 90 CD |  if_b	jmp	#LR__4364
2da88     80 00 00 FF 
2da8c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2da90     4C 00 90 3D |  if_ae	jmp	#LR__4363
2da94     0A FB 31 F9 | 	getword	result1, arg02, #0
2da98     01 00 00 FF 
2da9c     52 FB 0D F2 | 	cmp	result1, ##850 wz
2daa0     3C 00 90 5D |  if_ne	jmp	#LR__4363
2daa4                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2daa4     00 00 06 F6 | 	mov	_var01, #0
2daa8     97 14 48 FB | 	callpa	#(@LR__4361-@LR__4360)>>2,fcache_load_ptr_
2daac                 | LR__4360
2daac     00 FB 31 F9 | 	getword	result1, _var01, #0
2dab0     80 FA 15 F2 | 	cmp	result1, #128 wc
2dab4     1C 00 90 3D |  if_ae	jmp	#LR__4362
2dab8     00 FB 31 F9 | 	getword	result1, _var01, #0
2dabc     01 FA 65 F0 | 	shl	result1, #1
2dac0     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2dac4     FD FA E1 FA | 	rdword	result1, result1
2dac8     FD 12 0A F2 | 	cmp	arg01, result1 wz
2dacc     01 00 06 51 |  if_ne	add	_var01, #1
2dad0     D8 FF 9F 5D |  if_ne	jmp	#LR__4360
2dad4                 | LR__4361
2dad4                 | LR__4362
2dad4     00 01 32 F9 | 	getword	_var01, _var01, #0
2dad8     80 00 06 F1 | 	add	_var01, #128
2dadc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2dae0                 | LR__4363
2dae0                 | LR__4364
2dae0                 | ' 			c = (c + 0x80) & 0xFF;
2dae0                 | ' 		}
2dae0                 | ' 	}
2dae0                 | ' 
2dae0                 | ' 	return c;
2dae0     00 FB 01 F6 | 	mov	result1, _var01
2dae4                 | _fatfs_cc_ff_uni2oem_ret
2dae4     2D 00 64 FD | 	ret
2dae8                 | 
2dae8                 | _fatfs_cc_ff_oem2uni
2dae8     00 00 06 F6 | 	mov	_var01, #0
2daec     09 FB 31 F9 | 	getword	result1, arg01, #0
2daf0     80 FA 15 F2 | 	cmp	result1, #128 wc
2daf4     09 01 02 C6 |  if_b	mov	_var01, arg01
2daf8     2C 00 90 CD |  if_b	jmp	#LR__4371
2dafc     0A 15 32 F9 | 	getword	arg02, arg02, #0
2db00     01 00 00 FF 
2db04     52 15 0E F2 | 	cmp	arg02, ##850 wz
2db08     1C 00 90 5D |  if_ne	jmp	#LR__4370
2db0c     09 FB 31 F9 | 	getword	result1, arg01, #0
2db10     00 FB 15 F2 | 	cmp	result1, #256 wc
2db14     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2db18     80 12 86 C1 |  if_b	sub	arg01, #128
2db1c     01 12 66 C0 |  if_b	shl	arg01, #1
2db20     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2db24     09 01 E2 CA |  if_b	rdword	_var01, arg01
2db28                 | LR__4370
2db28                 | LR__4371
2db28                 | ' 		}
2db28                 | ' 	}
2db28                 | ' 
2db28                 | ' 	return c;
2db28     00 FB 01 F6 | 	mov	result1, _var01
2db2c                 | _fatfs_cc_ff_oem2uni_ret
2db2c     2D 00 64 FD | 	ret
2db30                 | 
2db30                 | _fatfs_cc_ff_wtoupper
2db30     09 01 02 F6 | 	mov	_var01, arg01
2db34     80 00 00 FF 
2db38     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2db3c     60 01 90 3D |  if_ae	jmp	#LR__4393
2db40     00 03 02 F6 | 	mov	_var02, _var01
2db44     01 01 32 F9 | 	getword	_var01, _var02, #0
2db48     08 00 00 FF 
2db4c     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2db50     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2db54     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2db58     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2db5c     01 00 00 3F 
2db60     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2db64     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2db68     01 00 00 3F 
2db6c     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2db70     02 07 02 F6 | 	mov	_var04, _var03
2db74                 | ' 		uc = (WORD)uni;
2db74                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2db74                 | ' 		for (;;) {
2db74                 | LR__4380
2db74     03 09 E2 FA | 	rdword	_var05, _var04
2db78     04 05 02 F6 | 	mov	_var03, _var05
2db7c     0F 04 4E F7 | 	zerox	_var03, #15 wz
2db80     02 06 06 F1 | 	add	_var04, #2
2db84     14 01 90 AD |  if_e	jmp	#LR__4392
2db88     01 05 32 F9 | 	getword	_var03, _var02, #0
2db8c     04 01 32 F9 | 	getword	_var01, _var05, #0
2db90     00 05 12 F2 | 	cmp	_var03, _var01 wc
2db94     04 01 90 CD |  if_b	jmp	#LR__4392
2db98     03 0B E2 FA | 	rdword	_var06, _var04
2db9c     05 0D 32 F9 | 	getword	_var07, _var06, #0
2dba0     08 0C 46 F0 | 	shr	_var07, #8
2dba4     05 0B 32 F9 | 	getword	_var06, _var06, #0
2dba8     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2dbac     01 05 32 F9 | 	getword	_var03, _var02, #0
2dbb0     04 0F 32 F9 | 	getword	_var08, _var05, #0
2dbb4     05 01 32 F9 | 	getword	_var01, _var06, #0
2dbb8     00 0F 02 F1 | 	add	_var08, _var01
2dbbc     07 05 52 F2 | 	cmps	_var03, _var08 wc
2dbc0     02 06 06 F1 | 	add	_var04, #2
2dbc4     C4 00 90 3D |  if_ae	jmp	#LR__4391
2dbc8                 | ' 				switch (cmd) {
2dbc8     06 11 32 F9 | 	getword	_var09, _var07, #0
2dbcc     09 10 26 F3 | 	fle	_var09, #9
2dbd0     30 10 62 FD | 	jmprel	_var09
2dbd4                 | LR__4381
2dbd4     24 00 90 FD | 	jmp	#LR__4382
2dbd8     3C 00 90 FD | 	jmp	#LR__4383
2dbdc     54 00 90 FD | 	jmp	#LR__4384
2dbe0     5C 00 90 FD | 	jmp	#LR__4385
2dbe4     64 00 90 FD | 	jmp	#LR__4386
2dbe8     6C 00 90 FD | 	jmp	#LR__4387
2dbec     74 00 90 FD | 	jmp	#LR__4388
2dbf0     7C 00 90 FD | 	jmp	#LR__4389
2dbf4     84 00 90 FD | 	jmp	#LR__4390
2dbf8     A0 00 90 FD | 	jmp	#LR__4392
2dbfc                 | LR__4382
2dbfc     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc00     04 09 32 F9 | 	getword	_var05, _var05, #0
2dc04     04 03 82 F1 | 	sub	_var02, _var05
2dc08     01 02 66 F0 | 	shl	_var02, #1
2dc0c     03 03 02 F1 | 	add	_var02, _var04
2dc10     01 03 E2 FA | 	rdword	_var02, _var02
2dc14     84 00 90 FD | 	jmp	#LR__4392
2dc18                 | LR__4383
2dc18     01 05 32 F9 | 	getword	_var03, _var02, #0
2dc1c     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc20     04 09 32 F9 | 	getword	_var05, _var05, #0
2dc24     04 03 82 F1 | 	sub	_var02, _var05
2dc28     01 02 06 F5 | 	and	_var02, #1
2dc2c     02 03 C2 F2 | 	subr	_var02, _var03
2dc30     68 00 90 FD | 	jmp	#LR__4392
2dc34                 | LR__4384
2dc34     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc38     10 02 86 F1 | 	sub	_var02, #16
2dc3c     5C 00 90 FD | 	jmp	#LR__4392
2dc40                 | LR__4385
2dc40     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc44     20 02 86 F1 | 	sub	_var02, #32
2dc48     50 00 90 FD | 	jmp	#LR__4392
2dc4c                 | LR__4386
2dc4c     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc50     30 02 86 F1 | 	sub	_var02, #48
2dc54     44 00 90 FD | 	jmp	#LR__4392
2dc58                 | LR__4387
2dc58     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc5c     1A 02 86 F1 | 	sub	_var02, #26
2dc60     38 00 90 FD | 	jmp	#LR__4392
2dc64                 | LR__4388
2dc64     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc68     08 02 06 F1 | 	add	_var02, #8
2dc6c     2C 00 90 FD | 	jmp	#LR__4392
2dc70                 | LR__4389
2dc70     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc74     50 02 86 F1 | 	sub	_var02, #80
2dc78     20 00 90 FD | 	jmp	#LR__4392
2dc7c                 | LR__4390
2dc7c     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc80     0E 00 00 FF 
2dc84     60 02 86 F1 | 	sub	_var02, ##7264
2dc88                 | ' 				}
2dc88                 | ' 				break;
2dc88     10 00 90 FD | 	jmp	#LR__4392
2dc8c                 | LR__4391
2dc8c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2dc90     02 0A 06 AA |  if_e	mul	_var06, #2
2dc94     05 07 02 A1 |  if_e	add	_var04, _var06
2dc98     D8 FE 9F FD | 	jmp	#LR__4380
2dc9c                 | LR__4392
2dc9c     01 01 32 F9 | 	getword	_var01, _var02, #0
2dca0                 | LR__4393
2dca0                 | ' 		}
2dca0                 | ' 		uni = uc;
2dca0                 | ' 	}
2dca0                 | ' 
2dca0                 | ' 	return uni;
2dca0     00 FB 01 F6 | 	mov	result1, _var01
2dca4                 | _fatfs_cc_ff_wtoupper_ret
2dca4     2D 00 64 FD | 	ret
2dca8                 | 
2dca8                 | _fatfs_cc_strncpy
2dca8     09 01 02 F6 | 	mov	_var01, arg01
2dcac     97 12 48 FB | 	callpa	#(@LR__4401-@LR__4400)>>2,fcache_load_ptr_
2dcb0                 | ' 
2dcb0                 | ' 	dscan = dst;
2dcb0                 | ' 	sscan = src;
2dcb0                 | ' 	count = n;
2dcb0                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2dcb0                 | LR__4400
2dcb0     01 16 86 F1 | 	sub	arg03, #1
2dcb4     00 16 56 F2 | 	cmps	arg03, #0 wc
2dcb8     18 00 90 CD |  if_b	jmp	#LR__4402
2dcbc     0A FB C1 FA | 	rdbyte	result1, arg02
2dcc0     00 FB 41 FC | 	wrbyte	result1, _var01
2dcc4     01 14 06 F1 | 	add	arg02, #1
2dcc8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2dccc                 | ' 		continue;
2dccc     01 00 06 F1 | 	add	_var01, #1
2dcd0     DC FF 9F 5D |  if_ne	jmp	#LR__4400
2dcd4                 | LR__4401
2dcd4                 | LR__4402
2dcd4     97 0C 48 FB | 	callpa	#(@LR__4404-@LR__4403)>>2,fcache_load_ptr_
2dcd8                 | ' 	while (--count >= 0)
2dcd8                 | LR__4403
2dcd8     01 16 86 F1 | 	sub	arg03, #1
2dcdc     00 16 56 F2 | 	cmps	arg03, #0 wc
2dce0     00 03 02 36 |  if_ae	mov	_var02, _var01
2dce4     01 00 06 31 |  if_ae	add	_var01, #1
2dce8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2dcec     E8 FF 9F 3D |  if_ae	jmp	#LR__4403
2dcf0                 | LR__4404
2dcf0                 | ' 		*dscan++ = '\0';
2dcf0                 | ' 	return(dst);
2dcf0     09 FB 01 F6 | 	mov	result1, arg01
2dcf4                 | _fatfs_cc_strncpy_ret
2dcf4     2D 00 64 FD | 	ret
2dcf8                 | 
2dcf8                 | _fatfs_cc_memcmp
2dcf8                 | ' 	for (n = size; n > 0; n--)
2dcf8     00 16 0E F2 | 	cmp	arg03, #0 wz
2dcfc     28 00 90 AD |  if_e	jmp	#LR__4411
2dd00                 | LR__4410
2dd00     09 01 C2 FA | 	rdbyte	_var01, arg01
2dd04     0A 03 C2 FA | 	rdbyte	_var02, arg02
2dd08     01 01 0A F2 | 	cmp	_var01, _var02 wz
2dd0c     01 12 06 A1 |  if_e	add	arg01, #1
2dd10     01 14 06 A1 |  if_e	add	arg02, #1
2dd14                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2dd14     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2dd18     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2dd1c     01 FB 81 51 |  if_ne	sub	result1, _var02
2dd20     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2dd24     F6 17 6E FB | 	djnz	arg03, #LR__4410
2dd28                 | LR__4411
2dd28                 | ' 
2dd28                 | ' 	return(0);
2dd28     00 FA 05 F6 | 	mov	result1, #0
2dd2c                 | _fatfs_cc_memcmp_ret
2dd2c     2D 00 64 FD | 	ret
2dd30                 | 
2dd30                 | _fatfs_cc_strncmp
2dd30     09 01 0A F6 | 	mov	_var01, arg01 wz
2dd34     14 00 90 5D |  if_ne	jmp	#LR__4420
2dd38                 | ' 		return scan2 ? -1 : 0;
2dd38     00 14 0E F2 | 	cmp	arg02, #0 wz
2dd3c     01 02 66 56 |  if_ne	neg	_var02, #1
2dd40     00 02 06 A6 |  if_e	mov	_var02, #0
2dd44     01 FB 01 F6 | 	mov	result1, _var02
2dd48     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2dd4c                 | LR__4420
2dd4c     00 14 0E F2 | 	cmp	arg02, #0 wz
2dd50     01 FA 05 A6 |  if_e	mov	result1, #1
2dd54     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2dd58     0B 05 02 F6 | 	mov	_var03, arg03
2dd5c     97 16 48 FB | 	callpa	#(@LR__4422-@LR__4421)>>2,fcache_load_ptr_
2dd60                 | ' 	count = n;
2dd60                 | ' 	do {
2dd60                 | LR__4421
2dd60     00 07 C2 FA | 	rdbyte	_var04, _var01
2dd64     0A 09 02 F6 | 	mov	_var05, arg02
2dd68     04 0B C2 FA | 	rdbyte	_var06, _var05
2dd6c     01 04 86 F1 | 	sub	_var03, #1
2dd70     00 04 56 F2 | 	cmps	_var03, #0 wc
2dd74     01 00 06 F1 | 	add	_var01, #1
2dd78     01 14 06 F1 | 	add	arg02, #1
2dd7c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2dd80     08 00 90 2D |  if_nc_and_z	jmp	#LR__4423
2dd84     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2dd88     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4421
2dd8c                 | LR__4422
2dd8c                 | LR__4423
2dd8c     00 04 56 F2 | 	cmps	_var03, #0 wc
2dd90                 | ' 		return(0);
2dd90     00 FA 05 C6 |  if_b	mov	result1, #0
2dd94     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2dd98     05 07 0A F2 | 	cmp	_var04, _var06 wz
2dd9c                 | ' 		return(0);
2dd9c     00 FA 05 A6 |  if_e	mov	result1, #0
2dda0     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2dda4     00 06 0E F2 | 	cmp	_var04, #0 wz
2dda8                 | ' 		return(-1);
2dda8     01 FA 65 A6 |  if_e	neg	result1, #1
2ddac     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ddb0     00 0A 0E F2 | 	cmp	_var06, #0 wz
2ddb4                 | ' 		return(1);
2ddb4     01 FA 05 A6 |  if_e	mov	result1, #1
2ddb8                 | ' 		return(c1 - c2);
2ddb8     03 FB 01 56 |  if_ne	mov	result1, _var04
2ddbc     05 FB 81 51 |  if_ne	sub	result1, _var06
2ddc0                 | _fatfs_cc_strncmp_ret
2ddc0     2D 00 64 FD | 	ret
2ddc4                 | 
2ddc4                 | _fatfs_cc_strchr
2ddc4                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2ddc4                 | ' 	while ((c = *s++) != (char) charwanted)
2ddc4                 | LR__4430
2ddc4     09 01 02 F6 | 	mov	_var01, arg01
2ddc8     00 03 C2 FA | 	rdbyte	_var02, _var01
2ddcc     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2ddd0     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2ddd4     03 05 0A F2 | 	cmp	_var03, _var04 wz
2ddd8     01 12 06 F1 | 	add	arg01, #1
2dddc     14 00 90 AD |  if_e	jmp	#LR__4431
2dde0     01 05 02 F6 | 	mov	_var03, _var02
2dde4     07 04 4E F7 | 	zerox	_var03, #7 wz
2dde8     00 FA 05 A6 |  if_e	mov	result1, #0
2ddec     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2ddf0     D0 FF 9F FD | 	jmp	#LR__4430
2ddf4                 | LR__4431
2ddf4                 | ' 	return((char *)--s);
2ddf4     01 12 86 F1 | 	sub	arg01, #1
2ddf8     09 FB 01 F6 | 	mov	result1, arg01
2ddfc                 | _fatfs_cc_strchr_ret
2ddfc     2D 00 64 FD | 	ret
2de00                 | 
2de00                 | _fatfs_cc_disk_initialize
2de00     04 4A 05 F6 | 	mov	COUNT_, #4
2de04     A8 00 A0 FD | 	call	#pushregs_
2de08     40 F0 07 F1 | 	add	ptra, #64
2de0c     04 4E 05 F1 | 	add	fp, #4
2de10     A7 12 42 FC | 	wrbyte	arg01, fp
2de14     01 00 00 FF 
2de18     14 E4 05 F1 | 	add	objptr, ##532
2de1c     F2 18 02 FB | 	rdlong	arg04, objptr
2de20     2C 4E 05 F1 | 	add	fp, #44
2de24     A7 18 62 FC | 	wrlong	arg04, fp
2de28     04 E4 85 F1 | 	sub	objptr, #4
2de2c     F2 18 02 FB | 	rdlong	arg04, objptr
2de30     04 4E 05 F1 | 	add	fp, #4
2de34     A7 18 62 FC | 	wrlong	arg04, fp
2de38     08 E4 05 F1 | 	add	objptr, #8
2de3c     F2 18 02 FB | 	rdlong	arg04, objptr
2de40     04 4E 05 F1 | 	add	fp, #4
2de44     A7 18 62 FC | 	wrlong	arg04, fp
2de48     04 E4 05 F1 | 	add	objptr, #4
2de4c     F2 18 02 FB | 	rdlong	arg04, objptr
2de50     04 4E 05 F1 | 	add	fp, #4
2de54     A7 18 62 FC | 	wrlong	arg04, fp
2de58     04 E4 05 F1 | 	add	objptr, #4
2de5c     F2 02 48 FC | 	wrbyte	#1, objptr
2de60     01 00 00 FF 
2de64     20 E4 85 F1 | 	sub	objptr, ##544
2de68     38 4E 85 F1 | 	sub	fp, #56
2de6c     A7 18 CA FA | 	rdbyte	arg04, fp wz
2de70     04 4E 85 F1 | 	sub	fp, #4
2de74                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2de74                 | '             return RES_NOTRDY;
2de74     03 FA 05 56 |  if_ne	mov	result1, #3
2de78     D8 05 90 5D |  if_ne	jmp	#LR__4458
2de7c     13 00 00 FF 
2de80     10 13 06 F6 | 	mov	arg01, ##10000
2de84     44 95 BF FD | 	call	#__system___waitus
2de88     30 4E 05 F1 | 	add	fp, #48
2de8c     A7 12 02 FB | 	rdlong	arg01, fp
2de90     09 01 08 FC | 	wrpin	#0, arg01
2de94     04 4E 05 F1 | 	add	fp, #4
2de98     A7 12 02 FB | 	rdlong	arg01, fp
2de9c     09 01 08 FC | 	wrpin	#0, arg01
2dea0     04 4E 05 F1 | 	add	fp, #4
2dea4     A7 12 02 FB | 	rdlong	arg01, fp
2dea8     09 01 08 FC | 	wrpin	#0, arg01
2deac     04 4E 05 F1 | 	add	fp, #4
2deb0     A7 12 02 FB | 	rdlong	arg01, fp
2deb4     09 00 80 FF 
2deb8     09 01 08 FC | 	wrpin	##4608, arg01
2debc     0C 4E 85 F1 | 	sub	fp, #12
2dec0     A7 12 02 FB | 	rdlong	arg01, fp
2dec4     59 12 62 FD | 	drvh	arg01
2dec8     04 4E 05 F1 | 	add	fp, #4
2decc     A7 12 02 FB | 	rdlong	arg01, fp
2ded0     59 12 62 FD | 	drvh	arg01
2ded4     04 4E 05 F1 | 	add	fp, #4
2ded8     A7 12 02 FB | 	rdlong	arg01, fp
2dedc     59 12 62 FD | 	drvh	arg01
2dee0     04 4E 05 F1 | 	add	fp, #4
2dee4     A7 12 02 FB | 	rdlong	arg01, fp
2dee8     59 12 62 FD | 	drvh	arg01
2deec     20 4E 85 F1 | 	sub	fp, #32
2def0     00 04 80 FF 
2def4     A7 20 68 FC | 	wrlong	##524304, fp
2def8     04 4E 05 F1 | 	add	fp, #4
2defc     20 03 80 FF 
2df00     A7 90 68 FC | 	wrlong	##409672, fp
2df04     14 4E 05 F1 | 	add	fp, #20
2df08     A7 26 02 FB | 	rdlong	local01, fp
2df0c     18 4E 85 F1 | 	sub	fp, #24
2df10     A7 16 02 FB | 	rdlong	arg03, fp
2df14     40 26 62 FD | 	dirl	local01
2df18     A0 03 80 FF 
2df1c     13 91 08 FC | 	wrpin	##475208, local01
2df20     13 17 12 FC | 	wxpin	arg03, local01
2df24     13 01 28 FC | 	wypin	#0, local01
2df28     41 26 62 FD | 	dirh	local01
2df2c     1C 4E 05 F1 | 	add	fp, #28
2df30     A7 28 02 FB | 	rdlong	local02, fp
2df34     14 27 82 F1 | 	sub	local01, local02
2df38     07 26 06 F5 | 	and	local01, #7
2df3c     18 26 66 F0 | 	shl	local01, #24
2df40     78 14 06 F6 | 	mov	arg02, #120
2df44     13 15 42 F5 | 	or	arg02, local01
2df48     14 4E 85 F1 | 	sub	fp, #20
2df4c     A7 14 62 FC | 	wrlong	arg02, fp
2df50     14 4E 05 F1 | 	add	fp, #20
2df54     A7 12 02 FB | 	rdlong	arg01, fp
2df58     10 14 26 F4 | 	bith	arg02, #16
2df5c     40 12 62 FD | 	dirl	arg01
2df60     09 15 02 FC | 	wrpin	arg02, arg01
2df64     09 3F 18 FC | 	wxpin	#31, arg01
2df68     FF FF FF FF 
2df6c     09 FF 2B FC | 	wypin	##-1, arg01
2df70     41 12 62 FD | 	dirh	arg01
2df74     04 4E 85 F1 | 	sub	fp, #4
2df78     A7 14 02 FB | 	rdlong	arg02, fp
2df7c     08 4E 05 F1 | 	add	fp, #8
2df80     A7 2A 02 FB | 	rdlong	local03, fp
2df84     15 15 82 F1 | 	sub	arg02, local03
2df88     07 14 06 F5 | 	and	arg02, #7
2df8c     18 14 66 F0 | 	shl	arg02, #24
2df90     14 4E 85 F1 | 	sub	fp, #20
2df94     A7 14 62 FC | 	wrlong	arg02, fp
2df98     29 00 00 FF 
2df9c     7A 14 46 F5 | 	or	arg02, ##21114
2dfa0     A7 14 62 FC | 	wrlong	arg02, fp
2dfa4     14 4E 05 F1 | 	add	fp, #20
2dfa8     A7 12 02 FB | 	rdlong	arg01, fp
2dfac     40 12 62 FD | 	dirl	arg01
2dfb0     09 15 02 FC | 	wrpin	arg02, arg01
2dfb4     09 4F 18 FC | 	wxpin	#39, arg01
2dfb8     09 01 28 FC | 	wypin	#0, arg01
2dfbc     41 12 62 FD | 	dirh	arg01
2dfc0     28 4E 85 F1 | 	sub	fp, #40
2dfc4     A7 12 02 F6 | 	mov	arg01, fp
2dfc8     14 4E 85 F1 | 	sub	fp, #20
2dfcc     0A 14 06 F6 | 	mov	arg02, #10
2dfd0     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1202
2dfd4     00 12 06 F6 | 	mov	arg01, #0
2dfd8     00 14 06 F6 | 	mov	arg02, #0
2dfdc     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2dfe0     24 80 B0 FD | 	call	#_fatfs_cc_deselect_1212
2dfe4     64 12 06 F6 | 	mov	arg01, #100
2dfe8     E0 93 BF FD | 	call	#__system___waitus
2dfec     14 4E 05 F1 | 	add	fp, #20
2dff0     A7 12 02 F6 | 	mov	arg01, fp
2dff4     14 4E 85 F1 | 	sub	fp, #20
2dff8     0A 14 06 F6 | 	mov	arg02, #10
2dffc     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1202
2e000     0C 4E 05 F1 | 	add	fp, #12
2e004     A7 00 48 FC | 	wrbyte	#0, fp
2e008     0C 4E 85 F1 | 	sub	fp, #12
2e00c     00 12 06 F6 | 	mov	arg01, #0
2e010     00 14 06 F6 | 	mov	arg02, #0
2e014     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e018     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2e01c     01 18 0E F2 | 	cmp	arg04, #1 wz
2e020     B8 03 90 5D |  if_ne	jmp	#LR__4457
2e024     08 12 06 F6 | 	mov	arg01, #8
2e028     AA 15 06 F6 | 	mov	arg02, #426
2e02c     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e030     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e034     01 FA 0D F2 | 	cmp	result1, #1 wz
2e038     98 01 90 5D |  if_ne	jmp	#LR__4443
2e03c     14 4E 05 F1 | 	add	fp, #20
2e040     A7 12 02 F6 | 	mov	arg01, fp
2e044     14 4E 85 F1 | 	sub	fp, #20
2e048     04 14 06 F6 | 	mov	arg02, #4
2e04c     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1202
2e050     16 4E 05 F1 | 	add	fp, #22
2e054     A7 2C C2 FA | 	rdbyte	local04, fp
2e058     16 4E 85 F1 | 	sub	fp, #22
2e05c     01 2C 0E F2 | 	cmp	local04, #1 wz
2e060     17 4E 05 A1 |  if_e	add	fp, #23
2e064     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2e068     17 4E 85 A1 |  if_e	sub	fp, #23
2e06c     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2e070     68 03 90 5D |  if_ne	jmp	#LR__4456
2e074                 | ' 				for (tmr = 1000; tmr; tmr--) {
2e074     18 4E 05 F1 | 	add	fp, #24
2e078     01 00 80 FF 
2e07c     A7 D0 6B FC | 	wrlong	##1000, fp
2e080     18 4E 85 F1 | 	sub	fp, #24
2e084                 | LR__4440
2e084     18 4E 05 F1 | 	add	fp, #24
2e088     A7 26 0A FB | 	rdlong	local01, fp wz
2e08c     18 4E 85 F1 | 	sub	fp, #24
2e090     3C 00 90 AD |  if_e	jmp	#LR__4441
2e094     A9 12 06 F6 | 	mov	arg01, #169
2e098     1E 14 C6 F9 | 	decod	arg02, #30
2e09c     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e0a0     FD 2C 02 F6 | 	mov	local04, result1
2e0a4     07 2C 4E F7 | 	zerox	local04, #7 wz
2e0a8     24 00 90 AD |  if_e	jmp	#LR__4441
2e0ac     01 00 00 FF 
2e0b0     E8 13 06 F6 | 	mov	arg01, ##1000
2e0b4     14 93 BF FD | 	call	#__system___waitus
2e0b8     18 4E 05 F1 | 	add	fp, #24
2e0bc     A7 2C 02 FB | 	rdlong	local04, fp
2e0c0     01 2C 86 F1 | 	sub	local04, #1
2e0c4     A7 2C 62 FC | 	wrlong	local04, fp
2e0c8     18 4E 85 F1 | 	sub	fp, #24
2e0cc     B4 FF 9F FD | 	jmp	#LR__4440
2e0d0                 | LR__4441
2e0d0     18 4E 05 F1 | 	add	fp, #24
2e0d4     A7 2C 0A FB | 	rdlong	local04, fp wz
2e0d8     18 4E 85 F1 | 	sub	fp, #24
2e0dc     4C 00 90 AD |  if_e	jmp	#LR__4442
2e0e0     3A 12 06 F6 | 	mov	arg01, #58
2e0e4     00 14 06 F6 | 	mov	arg02, #0
2e0e8     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e0ec     FD 2A 02 F6 | 	mov	local03, result1
2e0f0     07 2A 4E F7 | 	zerox	local03, #7 wz
2e0f4     34 00 90 5D |  if_ne	jmp	#LR__4442
2e0f8     14 4E 05 F1 | 	add	fp, #20
2e0fc     A7 12 02 F6 | 	mov	arg01, fp
2e100     14 4E 85 F1 | 	sub	fp, #20
2e104     04 14 06 F6 | 	mov	arg02, #4
2e108     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1202
2e10c     14 4E 05 F1 | 	add	fp, #20
2e110     A7 26 C2 FA | 	rdbyte	local01, fp
2e114     40 26 CE F7 | 	test	local01, #64 wz
2e118     0C 2C 06 56 |  if_ne	mov	local04, #12
2e11c     04 2C 06 A6 |  if_e	mov	local04, #4
2e120     08 4E 85 F1 | 	sub	fp, #8
2e124     A7 2C 42 FC | 	wrbyte	local04, fp
2e128     0C 4E 85 F1 | 	sub	fp, #12
2e12c                 | LR__4442
2e12c     14 2C 06 FB | 	rdlong	local04, #20
2e130     18 4E 05 F1 | 	add	fp, #24
2e134     A7 2C 62 FC | 	wrlong	local04, fp
2e138     0C 4E 05 F1 | 	add	fp, #12
2e13c     A7 2C 02 FB | 	rdlong	local04, fp
2e140     1B 2C 26 F4 | 	bith	local04, #27
2e144     A7 2C 62 FC | 	wrlong	local04, fp
2e148     0C 4E 85 F1 | 	sub	fp, #12
2e14c     A7 2C 02 FB | 	rdlong	local04, fp
2e150     18 4E 85 F1 | 	sub	fp, #24
2e154     68 78 04 FF 
2e158     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2e15c     1C 4E 05 C1 |  if_b	add	fp, #28
2e160     00 01 80 CF 
2e164     A7 08 68 CC |  if_b	wrlong	##131076, fp
2e168     1C 4E 85 C1 |  if_b	sub	fp, #28
2e16c     6C 02 90 CD |  if_b	jmp	#LR__4456
2e170     18 4E 05 F1 | 	add	fp, #24
2e174     A7 2C 02 FB | 	rdlong	local04, fp
2e178     18 4E 85 F1 | 	sub	fp, #24
2e17c     E1 F5 05 FF 
2e180     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e184     1C 4E 05 C1 |  if_b	add	fp, #28
2e188     00 01 80 CF 
2e18c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2e190     1C 4E 85 C1 |  if_b	sub	fp, #28
2e194     44 02 90 CD |  if_b	jmp	#LR__4456
2e198     18 4E 05 F1 | 	add	fp, #24
2e19c     A7 2C 02 FB | 	rdlong	local04, fp
2e1a0     18 4E 85 F1 | 	sub	fp, #24
2e1a4     3B 58 08 FF 
2e1a8     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2e1ac     1C 4E 05 C1 |  if_b	add	fp, #28
2e1b0     00 01 80 CF 
2e1b4     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2e1b8     1C 4E 85 C1 |  if_b	sub	fp, #28
2e1bc     1C 02 90 CD |  if_b	jmp	#LR__4456
2e1c0     1C 4E 05 F1 | 	add	fp, #28
2e1c4     80 01 80 FF 
2e1c8     A7 10 68 FC | 	wrlong	##196616, fp
2e1cc     1C 4E 85 F1 | 	sub	fp, #28
2e1d0     08 02 90 FD | 	jmp	#LR__4456
2e1d4                 | LR__4443
2e1d4     A9 12 06 F6 | 	mov	arg01, #169
2e1d8     00 14 06 F6 | 	mov	arg02, #0
2e1dc     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e1e0     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2e1e4     02 2C 16 F2 | 	cmp	local04, #2 wc
2e1e8     18 00 90 3D |  if_ae	jmp	#LR__4444
2e1ec     0C 4E 05 F1 | 	add	fp, #12
2e1f0     A7 04 48 FC | 	wrbyte	#2, fp
2e1f4     04 4E 05 F1 | 	add	fp, #4
2e1f8     A7 52 49 FC | 	wrbyte	#169, fp
2e1fc     10 4E 85 F1 | 	sub	fp, #16
2e200     14 00 90 FD | 	jmp	#LR__4445
2e204                 | LR__4444
2e204     0C 4E 05 F1 | 	add	fp, #12
2e208     A7 02 48 FC | 	wrbyte	#1, fp
2e20c     04 4E 05 F1 | 	add	fp, #4
2e210     A7 02 48 FC | 	wrbyte	#1, fp
2e214     10 4E 85 F1 | 	sub	fp, #16
2e218                 | LR__4445
2e218                 | ' 				ty =  0x01 ; cmd =  (1) ;
2e218                 | ' 			}
2e218                 | ' 			for (tmr = 1000; tmr; tmr--) {
2e218     18 4E 05 F1 | 	add	fp, #24
2e21c     01 00 80 FF 
2e220     A7 D0 6B FC | 	wrlong	##1000, fp
2e224     18 4E 85 F1 | 	sub	fp, #24
2e228                 | LR__4446
2e228     18 4E 05 F1 | 	add	fp, #24
2e22c     A7 2A 0A FB | 	rdlong	local03, fp wz
2e230     18 4E 85 F1 | 	sub	fp, #24
2e234     44 00 90 AD |  if_e	jmp	#LR__4447
2e238     10 4E 05 F1 | 	add	fp, #16
2e23c     A7 12 C2 FA | 	rdbyte	arg01, fp
2e240     10 4E 85 F1 | 	sub	fp, #16
2e244     00 14 06 F6 | 	mov	arg02, #0
2e248     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e24c     FD 2C 02 F6 | 	mov	local04, result1
2e250     07 2C 4E F7 | 	zerox	local04, #7 wz
2e254     24 00 90 AD |  if_e	jmp	#LR__4447
2e258     01 00 00 FF 
2e25c     E8 13 06 F6 | 	mov	arg01, ##1000
2e260     68 91 BF FD | 	call	#__system___waitus
2e264     18 4E 05 F1 | 	add	fp, #24
2e268     A7 2C 02 FB | 	rdlong	local04, fp
2e26c     01 2C 86 F1 | 	sub	local04, #1
2e270     A7 2C 62 FC | 	wrlong	local04, fp
2e274     18 4E 85 F1 | 	sub	fp, #24
2e278     AC FF 9F FD | 	jmp	#LR__4446
2e27c                 | LR__4447
2e27c     18 4E 05 F1 | 	add	fp, #24
2e280     A7 2C 0A FB | 	rdlong	local04, fp wz
2e284     18 4E 85 F1 | 	sub	fp, #24
2e288     14 00 90 AD |  if_e	jmp	#LR__4448
2e28c     10 12 06 F6 | 	mov	arg01, #16
2e290     09 14 C6 F9 | 	decod	arg02, #9
2e294     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e298     07 FA 4D F7 | 	zerox	result1, #7 wz
2e29c     0C 00 90 AD |  if_e	jmp	#LR__4449
2e2a0                 | LR__4448
2e2a0     0C 4E 05 F1 | 	add	fp, #12
2e2a4     A7 00 48 FC | 	wrbyte	#0, fp
2e2a8     0C 4E 85 F1 | 	sub	fp, #12
2e2ac                 | LR__4449
2e2ac     14 2C 06 FB | 	rdlong	local04, #20
2e2b0     18 4E 05 F1 | 	add	fp, #24
2e2b4     A7 2C 62 FC | 	wrlong	local04, fp
2e2b8     18 4E 85 F1 | 	sub	fp, #24
2e2bc     F0 FA 02 FF 
2e2c0     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e2c4     18 00 90 3D |  if_ae	jmp	#LR__4450
2e2c8     24 4E 05 F1 | 	add	fp, #36
2e2cc     A7 2C 02 FB | 	rdlong	local04, fp
2e2d0     1B 2C 26 F4 | 	bith	local04, #27
2e2d4     A7 2C 62 FC | 	wrlong	local04, fp
2e2d8     24 4E 85 F1 | 	sub	fp, #36
2e2dc     2C 00 90 FD | 	jmp	#LR__4451
2e2e0                 | LR__4450
2e2e0     18 4E 05 F1 | 	add	fp, #24
2e2e4     A7 2C 02 FB | 	rdlong	local04, fp
2e2e8     18 4E 85 F1 | 	sub	fp, #24
2e2ec     E1 F5 05 FF 
2e2f0     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e2f4     24 4E 05 C1 |  if_b	add	fp, #36
2e2f8     A7 2C 02 CB |  if_b	rdlong	local04, fp
2e2fc     80 00 04 CF 
2e300     00 2C 46 C5 |  if_b	or	local04, ##134283264
2e304     A7 2C 62 CC |  if_b	wrlong	local04, fp
2e308     24 4E 85 C1 |  if_b	sub	fp, #36
2e30c                 | LR__4451
2e30c     18 4E 05 F1 | 	add	fp, #24
2e310     A7 2C 02 FB | 	rdlong	local04, fp
2e314     18 4E 85 F1 | 	sub	fp, #24
2e318     F0 FA 02 FF 
2e31c     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e320     1C 4E 05 C1 |  if_b	add	fp, #28
2e324     00 01 80 CF 
2e328     A7 08 68 CC |  if_b	wrlong	##131076, fp
2e32c     1C 4E 85 C1 |  if_b	sub	fp, #28
2e330     A8 00 90 CD |  if_b	jmp	#LR__4455
2e334     18 4E 05 F1 | 	add	fp, #24
2e338     A7 2C 02 FB | 	rdlong	local04, fp
2e33c     18 4E 85 F1 | 	sub	fp, #24
2e340     68 78 04 FF 
2e344     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2e348     1C 4E 05 C1 |  if_b	add	fp, #28
2e34c     80 01 80 CF 
2e350     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2e354     1C 4E 85 C1 |  if_b	sub	fp, #28
2e358     80 00 90 CD |  if_b	jmp	#LR__4454
2e35c     18 4E 05 F1 | 	add	fp, #24
2e360     A7 2C 02 FB | 	rdlong	local04, fp
2e364     18 4E 85 F1 | 	sub	fp, #24
2e368     E1 F5 05 FF 
2e36c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e370     1C 4E 05 C1 |  if_b	add	fp, #28
2e374     00 02 80 CF 
2e378     A7 10 68 CC |  if_b	wrlong	##262152, fp
2e37c     1C 4E 85 C1 |  if_b	sub	fp, #28
2e380     58 00 90 CD |  if_b	jmp	#LR__4453
2e384     18 4E 05 F1 | 	add	fp, #24
2e388     A7 2C 02 FB | 	rdlong	local04, fp
2e38c     18 4E 85 F1 | 	sub	fp, #24
2e390     59 73 07 FF 
2e394     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2e398     1C 4E 05 C1 |  if_b	add	fp, #28
2e39c     80 02 80 CF 
2e3a0     A7 14 68 CC |  if_b	wrlong	##327690, fp
2e3a4     1C 4E 85 C1 |  if_b	sub	fp, #28
2e3a8     30 00 90 CD |  if_b	jmp	#LR__4452
2e3ac     18 4E 05 F1 | 	add	fp, #24
2e3b0     A7 2C 02 FB | 	rdlong	local04, fp
2e3b4     18 4E 85 F1 | 	sub	fp, #24
2e3b8     D1 F0 08 FF 
2e3bc     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2e3c0     1C 4E 05 C1 |  if_b	add	fp, #28
2e3c4     00 03 80 CF 
2e3c8     A7 18 68 CC |  if_b	wrlong	##393228, fp
2e3cc     1C 4E 85 F3 | 	sumc	fp, #28
2e3d0     80 03 80 3F 
2e3d4     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2e3d8     1C 4E 85 31 |  if_ae	sub	fp, #28
2e3dc                 | LR__4452
2e3dc                 | LR__4453
2e3dc                 | LR__4454
2e3dc                 | LR__4455
2e3dc                 | LR__4456
2e3dc                 | LR__4457
2e3dc     0C 4E 05 F1 | 	add	fp, #12
2e3e0     A7 2C C2 FA | 	rdbyte	local04, fp
2e3e4     01 00 00 FF 
2e3e8     21 E4 05 F1 | 	add	objptr, ##545
2e3ec     F2 2C 42 FC | 	wrbyte	local04, objptr
2e3f0     A7 26 CA FA | 	rdbyte	local01, fp wz
2e3f4     00 2C 06 56 |  if_ne	mov	local04, #0
2e3f8     01 2C 06 A6 |  if_e	mov	local04, #1
2e3fc     20 4E 05 F1 | 	add	fp, #32
2e400     A7 2C 42 FC | 	wrbyte	local04, fp
2e404     A7 2C C2 FA | 	rdbyte	local04, fp
2e408     2C 4E 85 F1 | 	sub	fp, #44
2e40c     01 E4 85 F1 | 	sub	objptr, #1
2e410     F2 2C 42 FC | 	wrbyte	local04, objptr
2e414     01 00 00 FF 
2e418     20 E4 85 F1 | 	sub	objptr, ##544
2e41c     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_1212
2e420     34 4E 05 F1 | 	add	fp, #52
2e424     A7 12 02 FB | 	rdlong	arg01, fp
2e428     18 4E 85 F1 | 	sub	fp, #24
2e42c     A7 14 02 FB | 	rdlong	arg02, fp
2e430     09 15 12 FC | 	wxpin	arg02, arg01
2e434     1C 4E 05 F1 | 	add	fp, #28
2e438     A7 12 02 FB | 	rdlong	arg01, fp
2e43c     14 4E 85 F1 | 	sub	fp, #20
2e440     A7 14 02 FB | 	rdlong	arg02, fp
2e444     09 15 02 FC | 	wrpin	arg02, arg01
2e448                 | ' 
2e448                 | ' 		}
2e448                 | ' 	}
2e448                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e448                 | ' 	CardType = ty;
2e448                 | ' 	s = ty ? 0 :  0x01 ;
2e448                 | ' 	Stat = s;
2e448                 | ' 
2e448                 | ' 	deselect();
2e448                 | ' 
2e448                 | ' 
2e448                 | ' 	_wxpin( PIN_CLK, ck_div );
2e448                 | ' 	_wrpin( PIN_DI, spm_tx );
2e448                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e448                 | ' 	return s;
2e448     08 4E 05 F1 | 	add	fp, #8
2e44c     A7 FA C1 FA | 	rdbyte	result1, fp
2e450     2C 4E 85 F1 | 	sub	fp, #44
2e454                 | LR__4458
2e454     A7 F0 03 F6 | 	mov	ptra, fp
2e458     B2 00 A0 FD | 	call	#popregs_
2e45c                 | _fatfs_cc_disk_initialize_ret
2e45c     2D 00 64 FD | 	ret
2e460                 | 
2e460                 | _fatfs_cc_disk_read
2e460     05 4A 05 F6 | 	mov	COUNT_, #5
2e464     A8 00 A0 FD | 	call	#pushregs_
2e468     0A 27 02 F6 | 	mov	local01, arg02
2e46c     0B 29 02 F6 | 	mov	local02, arg03
2e470     0C 2B 02 F6 | 	mov	local03, arg04
2e474     00 12 0E F2 | 	cmp	arg01, #0 wz
2e478     01 FA 05 56 |  if_ne	mov	result1, #1
2e47c                 | ' 
2e47c                 | ' 	return Stat;
2e47c     01 00 00 AF 
2e480     20 E4 05 A1 |  if_e	add	objptr, ##544
2e484     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e488     01 00 00 AF 
2e48c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e490     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e494     01 FA CD F7 | 	test	result1, #1 wz
2e498     03 FA 05 56 |  if_ne	mov	result1, #3
2e49c     84 00 90 5D |  if_ne	jmp	#LR__4462
2e4a0     01 00 00 FF 
2e4a4     21 E4 05 F1 | 	add	objptr, ##545
2e4a8     F2 2C C2 FA | 	rdbyte	local04, objptr
2e4ac     01 00 00 FF 
2e4b0     21 E4 85 F1 | 	sub	objptr, ##545
2e4b4     08 2C CE F7 | 	test	local04, #8 wz
2e4b8     09 28 66 A0 |  if_e	shl	local02, #9
2e4bc     02 2A 16 F2 | 	cmp	local03, #2 wc
2e4c0     12 2C 06 36 |  if_ae	mov	local04, #18
2e4c4     11 2C 06 C6 |  if_b	mov	local04, #17
2e4c8     14 15 02 F6 | 	mov	arg02, local02
2e4cc     16 13 02 F6 | 	mov	arg01, local04
2e4d0     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e4d4     FD 2E 02 F6 | 	mov	local05, result1
2e4d8     07 2E 4E F7 | 	zerox	local05, #7 wz
2e4dc     30 00 90 5D |  if_ne	jmp	#LR__4461
2e4e0                 | ' 		do {
2e4e0                 | LR__4460
2e4e0     13 13 02 F6 | 	mov	arg01, local01
2e4e4     09 14 C6 F9 | 	decod	arg02, #9
2e4e8     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1220
2e4ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4f0     01 00 00 5F 
2e4f4     00 26 06 51 |  if_ne	add	local01, ##512
2e4f8     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4460
2e4fc     16 2D E2 F8 | 	getbyte	local04, local04, #0
2e500     12 2C 0E F2 | 	cmp	local04, #18 wz
2e504     0C 12 06 A6 |  if_e	mov	arg01, #12
2e508     00 14 06 A6 |  if_e	mov	arg02, #0
2e50c     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1226
2e510                 | LR__4461
2e510     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_1212
2e514                 | ' 	}
2e514                 | ' 	deselect();
2e514                 | ' 
2e514                 | ' 	return count ? RES_ERROR : RES_OK;
2e514     00 2A 0E F2 | 	cmp	local03, #0 wz
2e518     01 2E 06 56 |  if_ne	mov	local05, #1
2e51c     00 2E 06 A6 |  if_e	mov	local05, #0
2e520     17 FB 01 F6 | 	mov	result1, local05
2e524                 | LR__4462
2e524     A7 F0 03 F6 | 	mov	ptra, fp
2e528     B2 00 A0 FD | 	call	#popregs_
2e52c                 | _fatfs_cc_disk_read_ret
2e52c     2D 00 64 FD | 	ret
2e530                 | 
2e530                 | _fatfs_cc_disk_write
2e530     04 4A 05 F6 | 	mov	COUNT_, #4
2e534     A8 00 A0 FD | 	call	#pushregs_
2e538     0A 27 02 F6 | 	mov	local01, arg02
2e53c     0C 29 02 F6 | 	mov	local02, arg04
2e540     0B 2B 02 F6 | 	mov	local03, arg03
2e544     00 12 0E F2 | 	cmp	arg01, #0 wz
2e548     01 FA 05 56 |  if_ne	mov	result1, #1
2e54c                 | ' 
2e54c                 | ' 	return Stat;
2e54c     01 00 00 AF 
2e550     20 E4 05 A1 |  if_e	add	objptr, ##544
2e554     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e558     01 00 00 AF 
2e55c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e560     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e564     01 FA CD F7 | 	test	result1, #1 wz
2e568     03 FA 05 56 |  if_ne	mov	result1, #3
2e56c     D4 00 90 5D |  if_ne	jmp	#LR__4474
2e570     01 00 00 FF 
2e574     21 E4 05 F1 | 	add	objptr, ##545
2e578     F2 16 C2 FA | 	rdbyte	arg03, objptr
2e57c     01 00 00 FF 
2e580     21 E4 85 F1 | 	sub	objptr, ##545
2e584     08 16 CE F7 | 	test	arg03, #8 wz
2e588     09 2A 66 A0 |  if_e	shl	local03, #9
2e58c     01 28 0E F2 | 	cmp	local02, #1 wz
2e590     30 00 90 5D |  if_ne	jmp	#LR__4470
2e594     18 12 06 F6 | 	mov	arg01, #24
2e598     15 15 02 F6 | 	mov	arg02, local03
2e59c     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e5a0     FD 2C 02 F6 | 	mov	local04, result1
2e5a4     07 2C 4E F7 | 	zerox	local04, #7 wz
2e5a8     84 00 90 5D |  if_ne	jmp	#LR__4473
2e5ac     13 13 02 F6 | 	mov	arg01, local01
2e5b0     FE 14 06 F6 | 	mov	arg02, #254
2e5b4     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1222
2e5b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5bc     00 28 06 56 |  if_ne	mov	local02, #0
2e5c0     6C 00 90 FD | 	jmp	#LR__4473
2e5c4                 | LR__4470
2e5c4     01 00 00 FF 
2e5c8     21 E4 05 F1 | 	add	objptr, ##545
2e5cc     F2 2C C2 FA | 	rdbyte	local04, objptr
2e5d0     01 00 00 FF 
2e5d4     21 E4 85 F1 | 	sub	objptr, ##545
2e5d8     06 2C CE F7 | 	test	local04, #6 wz
2e5dc     97 12 06 56 |  if_ne	mov	arg01, #151
2e5e0     14 15 02 56 |  if_ne	mov	arg02, local02
2e5e4     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1226
2e5e8     15 15 02 F6 | 	mov	arg02, local03
2e5ec     19 12 06 F6 | 	mov	arg01, #25
2e5f0     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e5f4     FD 2C 02 F6 | 	mov	local04, result1
2e5f8     07 2C 4E F7 | 	zerox	local04, #7 wz
2e5fc     30 00 90 5D |  if_ne	jmp	#LR__4472
2e600                 | ' 			do {
2e600                 | LR__4471
2e600     13 13 02 F6 | 	mov	arg01, local01
2e604     FC 14 06 F6 | 	mov	arg02, #252
2e608     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1222
2e60c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e610     01 00 00 5F 
2e614     00 26 06 51 |  if_ne	add	local01, ##512
2e618     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4471
2e61c     00 12 06 F6 | 	mov	arg01, #0
2e620     FD 14 06 F6 | 	mov	arg02, #253
2e624     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1222
2e628     00 FA 0D F2 | 	cmp	result1, #0 wz
2e62c     01 28 06 A6 |  if_e	mov	local02, #1
2e630                 | LR__4472
2e630                 | LR__4473
2e630     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_1212
2e634                 | ' 				count = 1;
2e634                 | ' 		}
2e634                 | ' 	}
2e634                 | ' 	deselect();
2e634                 | ' 
2e634                 | ' 	return count ? RES_ERROR : RES_OK;
2e634     00 28 0E F2 | 	cmp	local02, #0 wz
2e638     01 2C 06 56 |  if_ne	mov	local04, #1
2e63c     00 2C 06 A6 |  if_e	mov	local04, #0
2e640     16 FB 01 F6 | 	mov	result1, local04
2e644                 | LR__4474
2e644     A7 F0 03 F6 | 	mov	ptra, fp
2e648     B2 00 A0 FD | 	call	#popregs_
2e64c                 | _fatfs_cc_disk_write_ret
2e64c     2D 00 64 FD | 	ret
2e650                 | 
2e650                 | _fatfs_cc_disk_ioctl
2e650     01 4A 05 F6 | 	mov	COUNT_, #1
2e654     A8 00 A0 FD | 	call	#pushregs_
2e658     30 F0 07 F1 | 	add	ptra, #48
2e65c     04 4E 05 F1 | 	add	fp, #4
2e660     A7 12 42 FC | 	wrbyte	arg01, fp
2e664     04 4E 05 F1 | 	add	fp, #4
2e668     A7 14 42 FC | 	wrbyte	arg02, fp
2e66c     04 4E 05 F1 | 	add	fp, #4
2e670     A7 16 62 FC | 	wrlong	arg03, fp
2e674     08 4E 85 F1 | 	sub	fp, #8
2e678     A7 12 CA FA | 	rdbyte	arg01, fp wz
2e67c     04 4E 85 F1 | 	sub	fp, #4
2e680     01 FA 05 56 |  if_ne	mov	result1, #1
2e684                 | ' 
2e684                 | ' 	return Stat;
2e684     01 00 00 AF 
2e688     20 E4 05 A1 |  if_e	add	objptr, ##544
2e68c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e690     01 00 00 AF 
2e694     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e698     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e69c     01 FA CD F7 | 	test	result1, #1 wz
2e6a0     03 FA 05 56 |  if_ne	mov	result1, #3
2e6a4     E4 01 90 5D |  if_ne	jmp	#LR__4488
2e6a8     10 4E 05 F1 | 	add	fp, #16
2e6ac     A7 02 68 FC | 	wrlong	#1, fp
2e6b0                 | ' 
2e6b0                 | ' 	res = RES_ERROR;
2e6b0                 | ' 	switch (ctrl) {
2e6b0     08 4E 85 F1 | 	sub	fp, #8
2e6b4     A7 26 C2 FA | 	rdbyte	local01, fp
2e6b8     08 4E 85 F1 | 	sub	fp, #8
2e6bc     04 26 26 F3 | 	fle	local01, #4
2e6c0     30 26 62 FD | 	jmprel	local01
2e6c4                 | LR__4480
2e6c4     10 00 90 FD | 	jmp	#LR__4481
2e6c8     24 00 90 FD | 	jmp	#LR__4482
2e6cc     A0 01 90 FD | 	jmp	#LR__4486
2e6d0     80 01 90 FD | 	jmp	#LR__4485
2e6d4     98 01 90 FD | 	jmp	#LR__4486
2e6d8                 | LR__4481
2e6d8     B0 79 B0 FD | 	call	#_fatfs_cc_select_1216
2e6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e6e0     10 4E 05 51 |  if_ne	add	fp, #16
2e6e4     A7 00 68 5C |  if_ne	wrlong	#0, fp
2e6e8     10 4E 85 51 |  if_ne	sub	fp, #16
2e6ec                 | ' 			break;
2e6ec     8C 01 90 FD | 	jmp	#LR__4487
2e6f0                 | LR__4482
2e6f0     09 12 06 F6 | 	mov	arg01, #9
2e6f4     00 14 06 F6 | 	mov	arg02, #0
2e6f8     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1226
2e6fc     FD 26 02 F6 | 	mov	local01, result1
2e700     07 26 4E F7 | 	zerox	local01, #7 wz
2e704     74 01 90 5D |  if_ne	jmp	#LR__4487
2e708     18 4E 05 F1 | 	add	fp, #24
2e70c     A7 12 02 F6 | 	mov	arg01, fp
2e710     18 4E 85 F1 | 	sub	fp, #24
2e714     10 14 06 F6 | 	mov	arg02, #16
2e718     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1220
2e71c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e720     58 01 90 AD |  if_e	jmp	#LR__4487
2e724     18 4E 05 F1 | 	add	fp, #24
2e728     A7 26 C2 FA | 	rdbyte	local01, fp
2e72c     18 4E 85 F1 | 	sub	fp, #24
2e730     06 26 46 F0 | 	shr	local01, #6
2e734     01 26 0E F2 | 	cmp	local01, #1 wz
2e738     5C 00 90 5D |  if_ne	jmp	#LR__4483
2e73c     21 4E 05 F1 | 	add	fp, #33
2e740     A7 26 C2 FA | 	rdbyte	local01, fp
2e744     01 4E 85 F1 | 	sub	fp, #1
2e748     A7 FA C1 FA | 	rdbyte	result1, fp
2e74c     FD FA 31 F9 | 	getword	result1, result1, #0
2e750     08 FA 65 F0 | 	shl	result1, #8
2e754     FD 26 02 F1 | 	add	local01, result1
2e758     01 4E 85 F1 | 	sub	fp, #1
2e75c     A7 FA C1 FA | 	rdbyte	result1, fp
2e760     3F FA 05 F5 | 	and	result1, #63
2e764     10 FA 65 F0 | 	shl	result1, #16
2e768     FD 26 02 F1 | 	add	local01, result1
2e76c     01 26 06 F1 | 	add	local01, #1
2e770     09 4E 05 F1 | 	add	fp, #9
2e774     A7 26 62 FC | 	wrlong	local01, fp
2e778     1C 4E 85 F1 | 	sub	fp, #28
2e77c     A7 26 02 FB | 	rdlong	local01, fp
2e780     1C 4E 05 F1 | 	add	fp, #28
2e784     A7 FA 01 FB | 	rdlong	result1, fp
2e788     28 4E 85 F1 | 	sub	fp, #40
2e78c     0A FA 65 F0 | 	shl	result1, #10
2e790     13 FB 61 FC | 	wrlong	result1, local01
2e794     AC 00 90 FD | 	jmp	#LR__4484
2e798                 | LR__4483
2e798     1D 4E 05 F1 | 	add	fp, #29
2e79c     A7 26 C2 FA | 	rdbyte	local01, fp
2e7a0     13 27 42 F8 | 	getnib	local01, local01, #0
2e7a4     05 4E 05 F1 | 	add	fp, #5
2e7a8     A7 FA C1 FA | 	rdbyte	result1, fp
2e7ac     80 FA 05 F5 | 	and	result1, #128
2e7b0     07 FA C5 F0 | 	sar	result1, #7
2e7b4     FD 26 02 F1 | 	add	local01, result1
2e7b8     01 4E 85 F1 | 	sub	fp, #1
2e7bc     A7 FA C1 FA | 	rdbyte	result1, fp
2e7c0     03 FA 05 F5 | 	and	result1, #3
2e7c4     01 FA 65 F0 | 	shl	result1, #1
2e7c8     FD 26 02 F1 | 	add	local01, result1
2e7cc     02 26 06 F1 | 	add	local01, #2
2e7d0     0D 4E 85 F1 | 	sub	fp, #13
2e7d4     A7 26 42 FC | 	wrbyte	local01, fp
2e7d8     0C 4E 05 F1 | 	add	fp, #12
2e7dc     A7 26 C2 FA | 	rdbyte	local01, fp
2e7e0     06 26 46 F0 | 	shr	local01, #6
2e7e4     01 4E 85 F1 | 	sub	fp, #1
2e7e8     A7 FA C1 FA | 	rdbyte	result1, fp
2e7ec     FD FA 31 F9 | 	getword	result1, result1, #0
2e7f0     02 FA 65 F0 | 	shl	result1, #2
2e7f4     FD 26 02 F1 | 	add	local01, result1
2e7f8     01 4E 85 F1 | 	sub	fp, #1
2e7fc     A7 FA C1 FA | 	rdbyte	result1, fp
2e800     03 FA 05 F5 | 	and	result1, #3
2e804     FD FA 31 F9 | 	getword	result1, result1, #0
2e808     0A FA 65 F0 | 	shl	result1, #10
2e80c     FD 26 02 F1 | 	add	local01, result1
2e810     01 26 06 F1 | 	add	local01, #1
2e814     0A 4E 05 F1 | 	add	fp, #10
2e818     A7 26 62 FC | 	wrlong	local01, fp
2e81c     1C 4E 85 F1 | 	sub	fp, #28
2e820     A7 26 02 FB | 	rdlong	local01, fp
2e824     1C 4E 05 F1 | 	add	fp, #28
2e828     A7 FA 01 FB | 	rdlong	result1, fp
2e82c     14 4E 85 F1 | 	sub	fp, #20
2e830     A7 16 C2 FA | 	rdbyte	arg03, fp
2e834     14 4E 85 F1 | 	sub	fp, #20
2e838     09 16 86 F1 | 	sub	arg03, #9
2e83c     0B FB 61 F0 | 	shl	result1, arg03
2e840     13 FB 61 FC | 	wrlong	result1, local01
2e844                 | LR__4484
2e844     10 4E 05 F1 | 	add	fp, #16
2e848     A7 00 68 FC | 	wrlong	#0, fp
2e84c     10 4E 85 F1 | 	sub	fp, #16
2e850                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2e850                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2e850                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2e850                 | ' 				}
2e850                 | ' 				res = RES_OK;
2e850                 | ' 			}
2e850                 | ' 			break;
2e850     28 00 90 FD | 	jmp	#LR__4487
2e854                 | LR__4485
2e854     0C 4E 05 F1 | 	add	fp, #12
2e858     A7 26 02 FB | 	rdlong	local01, fp
2e85c     13 01 69 FC | 	wrlong	#128, local01
2e860     04 4E 05 F1 | 	add	fp, #4
2e864     A7 00 68 FC | 	wrlong	#0, fp
2e868     10 4E 85 F1 | 	sub	fp, #16
2e86c                 | ' 			*(DWORD*)buff = 128;
2e86c                 | ' 			res = RES_OK;
2e86c                 | ' 			break;
2e86c     0C 00 90 FD | 	jmp	#LR__4487
2e870                 | LR__4486
2e870     10 4E 05 F1 | 	add	fp, #16
2e874     A7 08 68 FC | 	wrlong	#4, fp
2e878     10 4E 85 F1 | 	sub	fp, #16
2e87c                 | LR__4487
2e87c     88 77 B0 FD | 	call	#_fatfs_cc_deselect_1212
2e880                 | ' 			res = RES_PARERR;
2e880                 | ' 	}
2e880                 | ' 
2e880                 | ' 	deselect();
2e880                 | ' 
2e880                 | ' 	return res;
2e880     10 4E 05 F1 | 	add	fp, #16
2e884     A7 FA 01 FB | 	rdlong	result1, fp
2e888     10 4E 85 F1 | 	sub	fp, #16
2e88c                 | LR__4488
2e88c     A7 F0 03 F6 | 	mov	ptra, fp
2e890     B2 00 A0 FD | 	call	#popregs_
2e894                 | _fatfs_cc_disk_ioctl_ret
2e894     2D 00 64 FD | 	ret
2e898                 | 
2e898                 | _fatfs_cc_disk_setpins
2e898     00 12 0E F2 | 	cmp	arg01, #0 wz
2e89c     01 FA 65 56 |  if_ne	neg	result1, #1
2e8a0     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2e8a4     01 00 00 FF 
2e8a8     10 E4 05 F1 | 	add	objptr, ##528
2e8ac     F2 14 62 FC | 	wrlong	arg02, objptr
2e8b0     04 E4 05 F1 | 	add	objptr, #4
2e8b4     F2 16 62 FC | 	wrlong	arg03, objptr
2e8b8     04 E4 05 F1 | 	add	objptr, #4
2e8bc     F2 18 62 FC | 	wrlong	arg04, objptr
2e8c0     04 E4 05 F1 | 	add	objptr, #4
2e8c4     F2 1A 62 FC | 	wrlong	arg05, objptr
2e8c8     01 00 00 FF 
2e8cc     1C E4 85 F1 | 	sub	objptr, ##540
2e8d0     00 FA 05 F6 | 	mov	result1, #0
2e8d4                 | _fatfs_cc_disk_setpins_ret
2e8d4     2D 00 64 FD | 	ret
2e8d8                 | 
2e8d8                 | _fatfs_cc_tchar2uni
2e8d8     09 01 02 FB | 	rdlong	_var01, arg01
2e8dc     00 03 02 F6 | 	mov	_var02, _var01
2e8e0     01 00 06 F1 | 	add	_var01, #1
2e8e4     00 05 02 F6 | 	mov	_var03, _var01
2e8e8     01 07 C2 FA | 	rdbyte	_var04, _var02
2e8ec     80 06 CE F7 | 	test	_var04, #128 wz
2e8f0     E8 00 90 AD |  if_e	jmp	#LR__4497
2e8f4     03 09 02 F6 | 	mov	_var05, _var04
2e8f8     E0 08 06 F5 | 	and	_var05, #224
2e8fc     C0 08 0E F2 | 	cmp	_var05, #192 wz
2e900     1F 06 06 A5 |  if_e	and	_var04, #31
2e904     01 0A 06 A6 |  if_e	mov	_var06, #1
2e908     34 00 90 AD |  if_e	jmp	#LR__4491
2e90c     03 09 02 F6 | 	mov	_var05, _var04
2e910     F0 08 06 F5 | 	and	_var05, #240
2e914     E0 08 0E F2 | 	cmp	_var05, #224 wz
2e918     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2e91c     02 0A 06 A6 |  if_e	mov	_var06, #2
2e920     1C 00 90 AD |  if_e	jmp	#LR__4490
2e924     03 09 02 F6 | 	mov	_var05, _var04
2e928     F8 08 06 F5 | 	and	_var05, #248
2e92c     F0 08 0E F2 | 	cmp	_var05, #240 wz
2e930     07 06 06 A5 |  if_e	and	_var04, #7
2e934     03 0A 06 A6 |  if_e	mov	_var06, #3
2e938                 | ' 			return 0xFFFFFFFF;
2e938     01 FA 65 56 |  if_ne	neg	result1, #1
2e93c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e940                 | LR__4490
2e940                 | LR__4491
2e940                 | ' 		}
2e940                 | ' 		do {
2e940                 | LR__4492
2e940     02 0D C2 FA | 	rdbyte	_var07, _var03
2e944     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2e948     C0 08 06 F5 | 	and	_var05, #192
2e94c     80 08 0E F2 | 	cmp	_var05, #128 wz
2e950     01 04 06 F1 | 	add	_var03, #1
2e954     01 FA 65 56 |  if_ne	neg	result1, #1
2e958     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e95c     06 06 66 F0 | 	shl	_var04, #6
2e960     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2e964     3F 02 06 F5 | 	and	_var02, #63
2e968     01 07 42 F5 | 	or	_var04, _var02
2e96c     F4 0B 6E FB | 	djnz	_var06, #LR__4492
2e970     80 06 16 F2 | 	cmp	_var04, #128 wc
2e974     24 00 90 CD |  if_b	jmp	#LR__4494
2e978     6C 00 00 FF 
2e97c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2e980     0C 00 90 CD |  if_b	jmp	#LR__4493
2e984     70 00 00 FF 
2e988     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2e98c     0C 00 90 CD |  if_b	jmp	#LR__4494
2e990                 | LR__4493
2e990     80 08 00 FF 
2e994     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2e998     08 00 90 CD |  if_b	jmp	#LR__4495
2e99c                 | LR__4494
2e99c     01 FA 65 F6 | 	neg	result1, #1
2e9a0     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2e9a4                 | LR__4495
2e9a4     80 00 00 FF 
2e9a8     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2e9ac     2C 00 90 CD |  if_b	jmp	#LR__4496
2e9b0     03 03 02 F6 | 	mov	_var02, _var04
2e9b4     80 00 00 FF 
2e9b8     00 02 86 F1 | 	sub	_var02, ##65536
2e9bc     06 02 66 F0 | 	shl	_var02, #6
2e9c0     80 FF 01 FF 
2e9c4     00 02 06 F5 | 	and	_var02, ##67043328
2e9c8     6E 00 6C FF 
2e9cc     00 08 06 F6 | 	mov	_var05, ##-671032320
2e9d0     01 09 42 F5 | 	or	_var05, _var02
2e9d4     09 06 46 F7 | 	zerox	_var04, #9
2e9d8     04 07 42 F5 | 	or	_var04, _var05
2e9dc                 | LR__4496
2e9dc                 | LR__4497
2e9dc     09 05 62 FC | 	wrlong	_var03, arg01
2e9e0                 | ' 	}
2e9e0                 | ' #line 811 "ff.c"
2e9e0                 | ' 	*str = p;
2e9e0                 | ' 	return uc;
2e9e0     03 FB 01 F6 | 	mov	result1, _var04
2e9e4                 | _fatfs_cc_tchar2uni_ret
2e9e4     2D 00 64 FD | 	ret
2e9e8                 | 
2e9e8                 | _fatfs_cc_put_utf
2e9e8     80 12 16 F2 | 	cmp	arg01, #128 wc
2e9ec     18 00 90 3D |  if_ae	jmp	#LR__4500
2e9f0     01 16 16 F2 | 	cmp	arg03, #1 wc
2e9f4     00 FA 05 C6 |  if_b	mov	result1, #0
2e9f8     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e9fc     0A 13 42 FC | 	wrbyte	arg01, arg02
2ea00                 | ' 		*buf = (TCHAR)chr;
2ea00                 | ' 		return 1;
2ea00     01 FA 05 F6 | 	mov	result1, #1
2ea04     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2ea08                 | LR__4500
2ea08     04 00 00 FF 
2ea0c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2ea10     40 00 90 3D |  if_ae	jmp	#LR__4501
2ea14     02 16 16 F2 | 	cmp	arg03, #2 wc
2ea18     00 FA 05 C6 |  if_b	mov	result1, #0
2ea1c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2ea20     09 FB 01 F6 | 	mov	result1, arg01
2ea24     06 FA 45 F0 | 	shr	result1, #6
2ea28     1F FA 05 F5 | 	and	result1, #31
2ea2c     C0 16 06 F6 | 	mov	arg03, #192
2ea30     FD 16 42 F5 | 	or	arg03, result1
2ea34     0A 17 42 FC | 	wrbyte	arg03, arg02
2ea38     01 14 06 F1 | 	add	arg02, #1
2ea3c     3F 12 06 F5 | 	and	arg01, #63
2ea40     80 FA 05 F6 | 	mov	result1, #128
2ea44     09 FB 41 F5 | 	or	result1, arg01
2ea48     0A FB 41 FC | 	wrbyte	result1, arg02
2ea4c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2ea4c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2ea4c                 | ' 		return 2;
2ea4c     02 FA 05 F6 | 	mov	result1, #2
2ea50     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2ea54                 | LR__4501
2ea54     80 00 00 FF 
2ea58     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2ea5c     70 00 90 3D |  if_ae	jmp	#LR__4504
2ea60     03 16 16 F2 | 	cmp	arg03, #3 wc
2ea64     18 00 90 CD |  if_b	jmp	#LR__4502
2ea68     6C 00 00 FF 
2ea6c     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2ea70     14 00 90 CD |  if_b	jmp	#LR__4503
2ea74     70 00 00 FF 
2ea78     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2ea7c     08 00 90 3D |  if_ae	jmp	#LR__4503
2ea80                 | LR__4502
2ea80     00 FA 05 F6 | 	mov	result1, #0
2ea84     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2ea88                 | LR__4503
2ea88     09 FB 59 F8 | 	getnib	result1, arg01, #3
2ea8c     E0 16 06 F6 | 	mov	arg03, #224
2ea90     FD 16 42 F5 | 	or	arg03, result1
2ea94     0A 17 42 FC | 	wrbyte	arg03, arg02
2ea98     01 14 06 F1 | 	add	arg02, #1
2ea9c     09 FB 01 F6 | 	mov	result1, arg01
2eaa0     06 FA 45 F0 | 	shr	result1, #6
2eaa4     3F FA 05 F5 | 	and	result1, #63
2eaa8     80 16 06 F6 | 	mov	arg03, #128
2eaac     FD 16 42 F5 | 	or	arg03, result1
2eab0     0A 17 42 FC | 	wrbyte	arg03, arg02
2eab4     01 14 06 F1 | 	add	arg02, #1
2eab8     3F 12 06 F5 | 	and	arg01, #63
2eabc     80 FA 05 F6 | 	mov	result1, #128
2eac0     09 FB 41 F5 | 	or	result1, arg01
2eac4     0A FB 41 FC | 	wrbyte	result1, arg02
2eac8                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2eac8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2eac8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2eac8                 | ' 		return 3;
2eac8     03 FA 05 F6 | 	mov	result1, #3
2eacc     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2ead0                 | LR__4504
2ead0     04 16 16 F2 | 	cmp	arg03, #4 wc
2ead4     00 FA 05 C6 |  if_b	mov	result1, #0
2ead8     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2eadc     09 01 02 F6 | 	mov	_var01, arg01
2eae0     E0 01 06 F4 | 	bitl	_var01, #480
2eae4     00 00 6C FF 
2eae8     00 00 86 F1 | 	sub	_var01, ##-671088640
2eaec     06 00 46 F0 | 	shr	_var01, #6
2eaf0     09 13 32 F9 | 	getword	arg01, arg01, #0
2eaf4     6E 00 00 FF 
2eaf8     00 12 86 F1 | 	sub	arg01, ##56320
2eafc     00 08 00 FF 
2eb00     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2eb04     02 00 00 CF 
2eb08     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2eb0c     00 FA 05 36 |  if_ae	mov	result1, #0
2eb10     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2eb14     09 01 42 F5 | 	or	_var01, arg01
2eb18     80 00 00 FF 
2eb1c     00 00 06 F1 | 	add	_var01, ##65536
2eb20     00 FB 01 F6 | 	mov	result1, _var01
2eb24     12 FA 45 F0 | 	shr	result1, #18
2eb28     07 FA 05 F5 | 	and	result1, #7
2eb2c     F0 16 06 F6 | 	mov	arg03, #240
2eb30     FD 16 42 F5 | 	or	arg03, result1
2eb34     0A 17 42 FC | 	wrbyte	arg03, arg02
2eb38     01 14 06 F1 | 	add	arg02, #1
2eb3c     00 FB 01 F6 | 	mov	result1, _var01
2eb40     0C FA 45 F0 | 	shr	result1, #12
2eb44     3F FA 05 F5 | 	and	result1, #63
2eb48     80 16 06 F6 | 	mov	arg03, #128
2eb4c     FD 16 42 F5 | 	or	arg03, result1
2eb50     0A 17 42 FC | 	wrbyte	arg03, arg02
2eb54     01 14 06 F1 | 	add	arg02, #1
2eb58     00 FB 01 F6 | 	mov	result1, _var01
2eb5c     06 FA 45 F0 | 	shr	result1, #6
2eb60     3F FA 05 F5 | 	and	result1, #63
2eb64     80 16 06 F6 | 	mov	arg03, #128
2eb68     FD 16 42 F5 | 	or	arg03, result1
2eb6c     0A 17 42 FC | 	wrbyte	arg03, arg02
2eb70     01 14 06 F1 | 	add	arg02, #1
2eb74     3F 00 06 F5 | 	and	_var01, #63
2eb78     80 FA 05 F6 | 	mov	result1, #128
2eb7c     00 FB 41 F5 | 	or	result1, _var01
2eb80     0A FB 41 FC | 	wrbyte	result1, arg02
2eb84                 | ' 	chr = (hc | chr) + 0x10000;
2eb84                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2eb84                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2eb84                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2eb84                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2eb84                 | ' 	return 4;
2eb84     04 FA 05 F6 | 	mov	result1, #4
2eb88                 | _fatfs_cc_put_utf_ret
2eb88     2D 00 64 FD | 	ret
2eb8c                 | 
2eb8c                 | _fatfs_cc_sync_window
2eb8c     02 4A 05 F6 | 	mov	COUNT_, #2
2eb90     A8 00 A0 FD | 	call	#pushregs_
2eb94     09 27 02 F6 | 	mov	local01, arg01
2eb98     00 28 06 F6 | 	mov	local02, #0
2eb9c     03 26 06 F1 | 	add	local01, #3
2eba0     13 FB C9 FA | 	rdbyte	result1, local01 wz
2eba4     03 26 86 F1 | 	sub	local01, #3
2eba8     A4 00 90 AD |  if_e	jmp	#LR__4512
2ebac     01 26 06 F1 | 	add	local01, #1
2ebb0     13 13 C2 FA | 	rdbyte	arg01, local01
2ebb4     33 26 06 F1 | 	add	local01, #51
2ebb8     13 15 02 F6 | 	mov	arg02, local01
2ebbc     04 26 86 F1 | 	sub	local01, #4
2ebc0     13 17 02 FB | 	rdlong	arg03, local01
2ebc4     30 26 86 F1 | 	sub	local01, #48
2ebc8     01 18 06 F6 | 	mov	arg04, #1
2ebcc     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2ebd0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ebd4     74 00 90 5D |  if_ne	jmp	#LR__4510
2ebd8     03 26 06 F1 | 	add	local01, #3
2ebdc     13 01 48 FC | 	wrbyte	#0, local01
2ebe0     2D 26 06 F1 | 	add	local01, #45
2ebe4     13 FB 01 FB | 	rdlong	result1, local01
2ebe8     0C 26 86 F1 | 	sub	local01, #12
2ebec     13 19 02 FB | 	rdlong	arg04, local01
2ebf0     0C FB 81 F1 | 	sub	result1, arg04
2ebf4     08 26 86 F1 | 	sub	local01, #8
2ebf8     13 19 02 FB | 	rdlong	arg04, local01
2ebfc     1C 26 86 F1 | 	sub	local01, #28
2ec00     0C FB 11 F2 | 	cmp	result1, arg04 wc
2ec04     48 00 90 3D |  if_ae	jmp	#LR__4511
2ec08     02 26 06 F1 | 	add	local01, #2
2ec0c     13 19 C2 FA | 	rdbyte	arg04, local01
2ec10     02 26 86 F1 | 	sub	local01, #2
2ec14     02 18 0E F2 | 	cmp	arg04, #2 wz
2ec18     34 00 90 5D |  if_ne	jmp	#LR__4511
2ec1c     01 26 06 F1 | 	add	local01, #1
2ec20     13 13 C2 FA | 	rdbyte	arg01, local01
2ec24     33 26 06 F1 | 	add	local01, #51
2ec28     13 15 02 F6 | 	mov	arg02, local01
2ec2c     04 26 86 F1 | 	sub	local01, #4
2ec30     13 17 02 FB | 	rdlong	arg03, local01
2ec34     14 26 86 F1 | 	sub	local01, #20
2ec38     13 27 02 FB | 	rdlong	local01, local01
2ec3c     13 17 02 F1 | 	add	arg03, local01
2ec40     01 18 06 F6 | 	mov	arg04, #1
2ec44     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2ec48     04 00 90 FD | 	jmp	#LR__4511
2ec4c                 | LR__4510
2ec4c     01 28 06 F6 | 	mov	local02, #1
2ec50                 | LR__4511
2ec50                 | LR__4512
2ec50                 | ' 			res = FR_DISK_ERR;
2ec50                 | ' 		}
2ec50                 | ' 	}
2ec50                 | ' 	return res;
2ec50     14 FB 01 F6 | 	mov	result1, local02
2ec54     A7 F0 03 F6 | 	mov	ptra, fp
2ec58     B2 00 A0 FD | 	call	#popregs_
2ec5c                 | _fatfs_cc_sync_window_ret
2ec5c     2D 00 64 FD | 	ret
2ec60                 | 
2ec60                 | _fatfs_cc_move_window
2ec60     03 4A 05 F6 | 	mov	COUNT_, #3
2ec64     A8 00 A0 FD | 	call	#pushregs_
2ec68     09 27 02 F6 | 	mov	local01, arg01
2ec6c     0A 29 02 F6 | 	mov	local02, arg02
2ec70     00 2A 06 F6 | 	mov	local03, #0
2ec74     30 26 06 F1 | 	add	local01, #48
2ec78     13 19 02 FB | 	rdlong	arg04, local01
2ec7c     30 26 86 F1 | 	sub	local01, #48
2ec80     0C 29 0A F2 | 	cmp	local02, arg04 wz
2ec84     40 00 90 AD |  if_e	jmp	#LR__4521
2ec88     13 13 02 F6 | 	mov	arg01, local01
2ec8c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2ec90     FD 2A 0A F6 | 	mov	local03, result1 wz
2ec94     30 00 90 5D |  if_ne	jmp	#LR__4520
2ec98     01 26 06 F1 | 	add	local01, #1
2ec9c     13 13 C2 FA | 	rdbyte	arg01, local01
2eca0     33 26 06 F1 | 	add	local01, #51
2eca4     13 15 02 F6 | 	mov	arg02, local01
2eca8     14 17 02 F6 | 	mov	arg03, local02
2ecac     01 18 06 F6 | 	mov	arg04, #1
2ecb0     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2ecb4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ecb8     01 28 66 56 |  if_ne	neg	local02, #1
2ecbc     01 2A 06 56 |  if_ne	mov	local03, #1
2ecc0     04 26 86 F1 | 	sub	local01, #4
2ecc4     13 29 62 FC | 	wrlong	local02, local01
2ecc8                 | LR__4520
2ecc8                 | LR__4521
2ecc8                 | ' 				sect = (LBA_t)0 - 1;
2ecc8                 | ' 				res = FR_DISK_ERR;
2ecc8                 | ' 			}
2ecc8                 | ' 			fs->winsect = sect;
2ecc8                 | ' 		}
2ecc8                 | ' 	}
2ecc8                 | ' 	return res;
2ecc8     15 FB 01 F6 | 	mov	result1, local03
2eccc     A7 F0 03 F6 | 	mov	ptra, fp
2ecd0     B2 00 A0 FD | 	call	#popregs_
2ecd4                 | _fatfs_cc_move_window_ret
2ecd4     2D 00 64 FD | 	ret
2ecd8                 | 
2ecd8                 | _fatfs_cc_sync_fs
2ecd8     02 4A 05 F6 | 	mov	COUNT_, #2
2ecdc     A8 00 A0 FD | 	call	#pushregs_
2ece0     09 27 02 F6 | 	mov	local01, arg01
2ece4     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2ece8     FD 28 0A F6 | 	mov	local02, result1 wz
2ecec     D8 00 90 5D |  if_ne	jmp	#LR__4531
2ecf0     13 19 C2 FA | 	rdbyte	arg04, local01
2ecf4     03 18 0E F2 | 	cmp	arg04, #3 wz
2ecf8     04 26 06 A1 |  if_e	add	local01, #4
2ecfc     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2ed00     04 26 86 A1 |  if_e	sub	local01, #4
2ed04     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2ed08     A0 00 90 5D |  if_ne	jmp	#LR__4530
2ed0c     34 26 06 F1 | 	add	local01, #52
2ed10     13 13 02 F6 | 	mov	arg01, local01
2ed14     00 14 06 F6 | 	mov	arg02, #0
2ed18     09 16 C6 F9 | 	decod	arg03, #9
2ed1c     98 00 A0 FD | 	call	#\builtin_bytefill_
2ed20     13 13 02 F6 | 	mov	arg01, local01
2ed24     FE 13 06 F1 | 	add	arg01, #510
2ed28     55 00 80 FF 
2ed2c     09 AB 58 FC | 	wrword	##43605, arg01
2ed30     A9 B0 A0 FF 
2ed34     13 A5 68 FC | 	wrlong	##1096897106, local01
2ed38     13 13 02 F6 | 	mov	arg01, local01
2ed3c     E4 13 06 F1 | 	add	arg01, #484
2ed40     B9 A0 B0 FF 
2ed44     09 E5 68 FC | 	wrlong	##1631679090, arg01
2ed48     13 13 02 F6 | 	mov	arg01, local01
2ed4c     E8 13 06 F1 | 	add	arg01, #488
2ed50     20 26 86 F1 | 	sub	local01, #32
2ed54     13 15 02 FB | 	rdlong	arg02, local01
2ed58     09 15 62 FC | 	wrlong	arg02, arg01
2ed5c     20 26 06 F1 | 	add	local01, #32
2ed60     13 13 02 F6 | 	mov	arg01, local01
2ed64     EC 13 06 F1 | 	add	arg01, #492
2ed68     24 26 86 F1 | 	sub	local01, #36
2ed6c     13 15 02 FB | 	rdlong	arg02, local01
2ed70     09 15 62 FC | 	wrlong	arg02, arg01
2ed74     10 26 06 F1 | 	add	local01, #16
2ed78     13 17 02 FB | 	rdlong	arg03, local01
2ed7c     01 16 06 F1 | 	add	arg03, #1
2ed80     10 26 06 F1 | 	add	local01, #16
2ed84     13 17 62 FC | 	wrlong	arg03, local01
2ed88     2F 26 86 F1 | 	sub	local01, #47
2ed8c     13 13 C2 FA | 	rdbyte	arg01, local01
2ed90     33 26 06 F1 | 	add	local01, #51
2ed94     13 15 02 F6 | 	mov	arg02, local01
2ed98     01 18 06 F6 | 	mov	arg04, #1
2ed9c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2eda0     30 26 86 F1 | 	sub	local01, #48
2eda4     13 01 48 FC | 	wrbyte	#0, local01
2eda8     04 26 86 F1 | 	sub	local01, #4
2edac                 | LR__4530
2edac     01 26 06 F1 | 	add	local01, #1
2edb0     13 13 C2 FA | 	rdbyte	arg01, local01
2edb4     00 14 06 F6 | 	mov	arg02, #0
2edb8     00 16 06 F6 | 	mov	arg03, #0
2edbc     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2edc0     00 FA 0D F2 | 	cmp	result1, #0 wz
2edc4     01 28 06 56 |  if_ne	mov	local02, #1
2edc8                 | LR__4531
2edc8                 | ' 	}
2edc8                 | ' 
2edc8                 | ' 	return res;
2edc8     14 FB 01 F6 | 	mov	result1, local02
2edcc     A7 F0 03 F6 | 	mov	ptra, fp
2edd0     B2 00 A0 FD | 	call	#popregs_
2edd4                 | _fatfs_cc_sync_fs_ret
2edd4     2D 00 64 FD | 	ret
2edd8                 | 
2edd8                 | _fatfs_cc_clst2sect
2edd8     02 14 86 F1 | 	sub	arg02, #2
2eddc     18 12 06 F1 | 	add	arg01, #24
2ede0     09 01 02 FB | 	rdlong	_var01, arg01
2ede4     18 12 86 F1 | 	sub	arg01, #24
2ede8     02 00 86 F1 | 	sub	_var01, #2
2edec     00 15 12 F2 | 	cmp	arg02, _var01 wc
2edf0     00 FA 05 36 |  if_ae	mov	result1, #0
2edf4     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2edf8     0A 12 06 F1 | 	add	arg01, #10
2edfc     09 01 E2 FA | 	rdword	_var01, arg01
2ee00     0A 01 02 FD | 	qmul	_var01, arg02
2ee04                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2ee04     22 12 06 F1 | 	add	arg01, #34
2ee08     09 FB 01 FB | 	rdlong	result1, arg01
2ee0c     18 00 62 FD | 	getqx	_var01
2ee10     00 FB 01 F1 | 	add	result1, _var01
2ee14                 | _fatfs_cc_clst2sect_ret
2ee14     2D 00 64 FD | 	ret
2ee18                 | 
2ee18                 | _fatfs_cc_get_fat
2ee18     07 4A 05 F6 | 	mov	COUNT_, #7
2ee1c     A8 00 A0 FD | 	call	#pushregs_
2ee20     0A 27 02 F6 | 	mov	local01, arg02
2ee24     09 29 02 FB | 	rdlong	local02, arg01
2ee28     02 26 16 F2 | 	cmp	local01, #2 wc
2ee2c     14 00 90 CD |  if_b	jmp	#LR__4540
2ee30     18 28 06 F1 | 	add	local02, #24
2ee34     14 2B 02 FB | 	rdlong	local03, local02
2ee38     18 28 86 F1 | 	sub	local02, #24
2ee3c     15 27 12 F2 | 	cmp	local01, local03 wc
2ee40     08 00 90 CD |  if_b	jmp	#LR__4541
2ee44                 | LR__4540
2ee44     01 2C 06 F6 | 	mov	local04, #1
2ee48     60 01 90 FD | 	jmp	#LR__4548
2ee4c                 | LR__4541
2ee4c     01 2C 66 F6 | 	neg	local04, #1
2ee50                 | ' 		val = 0xFFFFFFFF;
2ee50                 | ' 
2ee50                 | ' 		switch (fs->fs_type) {
2ee50     14 2F C2 FA | 	rdbyte	local05, local02
2ee54     01 2E 86 F1 | 	sub	local05, #1
2ee58     03 2E 26 F3 | 	fle	local05, #3
2ee5c     30 2E 62 FD | 	jmprel	local05
2ee60                 | LR__4542
2ee60     0C 00 90 FD | 	jmp	#LR__4543
2ee64     B8 00 90 FD | 	jmp	#LR__4544
2ee68     F8 00 90 FD | 	jmp	#LR__4545
2ee6c     38 01 90 FD | 	jmp	#LR__4546
2ee70                 | LR__4543
2ee70     13 2F 02 F6 | 	mov	local05, local01
2ee74     13 13 02 F6 | 	mov	arg01, local01
2ee78     01 12 46 F0 | 	shr	arg01, #1
2ee7c     09 2F 02 F1 | 	add	local05, arg01
2ee80     14 13 02 F6 | 	mov	arg01, local02
2ee84     17 31 02 F6 | 	mov	local06, local05
2ee88     09 30 46 F0 | 	shr	local06, #9
2ee8c     24 28 06 F1 | 	add	local02, #36
2ee90     14 15 02 FB | 	rdlong	arg02, local02
2ee94     24 28 86 F1 | 	sub	local02, #36
2ee98     18 15 02 F1 | 	add	arg02, local06
2ee9c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2eea0     00 FA 0D F2 | 	cmp	result1, #0 wz
2eea4     04 01 90 5D |  if_ne	jmp	#LR__4547
2eea8     17 31 02 F6 | 	mov	local06, local05
2eeac     FF 31 06 F5 | 	and	local06, #511
2eeb0     34 28 06 F1 | 	add	local02, #52
2eeb4     14 31 02 F1 | 	add	local06, local02
2eeb8     18 33 C2 FA | 	rdbyte	local07, local06
2eebc     34 28 86 F1 | 	sub	local02, #52
2eec0     14 13 02 F6 | 	mov	arg01, local02
2eec4     01 2E 06 F1 | 	add	local05, #1
2eec8     17 31 02 F6 | 	mov	local06, local05
2eecc     09 30 46 F0 | 	shr	local06, #9
2eed0     24 28 06 F1 | 	add	local02, #36
2eed4     14 15 02 FB | 	rdlong	arg02, local02
2eed8     24 28 86 F1 | 	sub	local02, #36
2eedc     18 15 02 F1 | 	add	arg02, local06
2eee0     7C FD BF FD | 	call	#_fatfs_cc_move_window
2eee4     00 FA 0D F2 | 	cmp	result1, #0 wz
2eee8     C0 00 90 5D |  if_ne	jmp	#LR__4547
2eeec     FF 2F 06 F5 | 	and	local05, #511
2eef0     34 28 06 F1 | 	add	local02, #52
2eef4     14 2F 02 F1 | 	add	local05, local02
2eef8     17 31 C2 FA | 	rdbyte	local06, local05
2eefc     08 30 66 F0 | 	shl	local06, #8
2ef00     18 33 42 F5 | 	or	local07, local06
2ef04     01 26 CE F7 | 	test	local01, #1 wz
2ef08     04 32 46 50 |  if_ne	shr	local07, #4
2ef0c     19 2B 02 56 |  if_ne	mov	local03, local07
2ef10     0B 32 46 A7 |  if_e	zerox	local07, #11
2ef14     19 2B 02 A6 |  if_e	mov	local03, local07
2ef18     15 2D 02 F6 | 	mov	local04, local03
2ef1c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2ef1c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2ef1c                 | ' 			break;
2ef1c     8C 00 90 FD | 	jmp	#LR__4547
2ef20                 | LR__4544
2ef20     14 13 02 F6 | 	mov	arg01, local02
2ef24     13 31 02 F6 | 	mov	local06, local01
2ef28     08 30 46 F0 | 	shr	local06, #8
2ef2c     24 28 06 F1 | 	add	local02, #36
2ef30     14 15 02 FB | 	rdlong	arg02, local02
2ef34     24 28 86 F1 | 	sub	local02, #36
2ef38     18 15 02 F1 | 	add	arg02, local06
2ef3c     20 FD BF FD | 	call	#_fatfs_cc_move_window
2ef40     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef44     64 00 90 5D |  if_ne	jmp	#LR__4547
2ef48     34 28 06 F1 | 	add	local02, #52
2ef4c     01 26 66 F0 | 	shl	local01, #1
2ef50     FF 27 06 F5 | 	and	local01, #511
2ef54     13 29 02 F1 | 	add	local02, local01
2ef58                 | ' {
2ef58                 | ' 
2ef58                 | ' 	return *((WORD*)ptr);
2ef58     14 FB E1 FA | 	rdword	result1, local02
2ef5c     FD 2C 32 F9 | 	getword	local04, result1, #0
2ef60                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2ef60                 | ' 			break;
2ef60     48 00 90 FD | 	jmp	#LR__4547
2ef64                 | LR__4545
2ef64     14 13 02 F6 | 	mov	arg01, local02
2ef68     13 31 02 F6 | 	mov	local06, local01
2ef6c     07 30 46 F0 | 	shr	local06, #7
2ef70     24 28 06 F1 | 	add	local02, #36
2ef74     14 15 02 FB | 	rdlong	arg02, local02
2ef78     24 28 86 F1 | 	sub	local02, #36
2ef7c     18 15 02 F1 | 	add	arg02, local06
2ef80     DC FC BF FD | 	call	#_fatfs_cc_move_window
2ef84     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef88     20 00 90 5D |  if_ne	jmp	#LR__4547
2ef8c     34 28 06 F1 | 	add	local02, #52
2ef90     02 26 66 F0 | 	shl	local01, #2
2ef94     FF 27 06 F5 | 	and	local01, #511
2ef98     13 29 02 F1 | 	add	local02, local01
2ef9c                 | ' {
2ef9c                 | ' 
2ef9c                 | ' 	return *((DWORD*)ptr);
2ef9c     14 2D 02 FB | 	rdlong	local04, local02
2efa0     7C 2C 06 F4 | 	bitl	local04, #124
2efa4                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2efa4                 | ' 			break;
2efa4     04 00 90 FD | 	jmp	#LR__4547
2efa8                 | LR__4546
2efa8     01 2C 06 F6 | 	mov	local04, #1
2efac                 | LR__4547
2efac                 | LR__4548
2efac                 | ' 			val = 1;
2efac                 | ' 		}
2efac                 | ' 	}
2efac                 | ' 
2efac                 | ' 	return val;
2efac     16 FB 01 F6 | 	mov	result1, local04
2efb0     A7 F0 03 F6 | 	mov	ptra, fp
2efb4     B2 00 A0 FD | 	call	#popregs_
2efb8                 | _fatfs_cc_get_fat_ret
2efb8     2D 00 64 FD | 	ret
2efbc                 | 
2efbc                 | _fatfs_cc_put_fat
2efbc     08 4A 05 F6 | 	mov	COUNT_, #8
2efc0     A8 00 A0 FD | 	call	#pushregs_
2efc4     09 27 02 F6 | 	mov	local01, arg01
2efc8     0A 29 02 F6 | 	mov	local02, arg02
2efcc     0B 2B 02 F6 | 	mov	local03, arg03
2efd0     02 2C 06 F6 | 	mov	local04, #2
2efd4     02 28 16 F2 | 	cmp	local02, #2 wc
2efd8     E0 01 90 CD |  if_b	jmp	#LR__4557
2efdc     18 26 06 F1 | 	add	local01, #24
2efe0     13 2F 02 FB | 	rdlong	local05, local01
2efe4     18 26 86 F1 | 	sub	local01, #24
2efe8     17 29 12 F2 | 	cmp	local02, local05 wc
2efec     CC 01 90 3D |  if_ae	jmp	#LR__4557
2eff0                 | ' 		switch (fs->fs_type) {
2eff0     13 31 C2 FA | 	rdbyte	local06, local01
2eff4     01 30 86 F1 | 	sub	local06, #1
2eff8     03 30 26 F3 | 	fle	local06, #3
2effc     30 30 62 FD | 	jmprel	local06
2f000                 | LR__4550
2f000     0C 00 90 FD | 	jmp	#LR__4551
2f004     F8 00 90 FD | 	jmp	#LR__4554
2f008     40 01 90 FD | 	jmp	#LR__4555
2f00c     AC 01 90 FD | 	jmp	#LR__4556
2f010                 | LR__4551
2f010     14 33 02 F6 | 	mov	local07, local02
2f014     14 2F 02 F6 | 	mov	local05, local02
2f018     01 2E 46 F0 | 	shr	local05, #1
2f01c     17 33 02 F1 | 	add	local07, local05
2f020     13 13 02 F6 | 	mov	arg01, local01
2f024     19 31 02 F6 | 	mov	local06, local07
2f028     09 30 46 F0 | 	shr	local06, #9
2f02c     24 26 06 F1 | 	add	local01, #36
2f030     13 15 02 FB | 	rdlong	arg02, local01
2f034     24 26 86 F1 | 	sub	local01, #36
2f038     18 15 02 F1 | 	add	arg02, local06
2f03c     20 FC BF FD | 	call	#_fatfs_cc_move_window
2f040     FD 2C 0A F6 | 	mov	local04, result1 wz
2f044     74 01 90 5D |  if_ne	jmp	#LR__4556
2f048     34 26 06 F1 | 	add	local01, #52
2f04c     13 35 02 F6 | 	mov	local08, local01
2f050     19 2F 02 F6 | 	mov	local05, local07
2f054     FF 2F 06 F5 | 	and	local05, #511
2f058     17 35 02 F1 | 	add	local08, local05
2f05c     01 28 CE F7 | 	test	local02, #1 wz
2f060     34 26 86 F1 | 	sub	local01, #52
2f064     01 32 06 F1 | 	add	local07, #1
2f068     18 00 90 AD |  if_e	jmp	#LR__4552
2f06c     1A 2F C2 FA | 	rdbyte	local05, local08
2f070     17 2F 42 F8 | 	getnib	local05, local05, #0
2f074     15 31 E2 F8 | 	getbyte	local06, local03, #0
2f078     04 30 66 F0 | 	shl	local06, #4
2f07c     18 2F 42 F5 | 	or	local05, local06
2f080     04 00 90 FD | 	jmp	#LR__4553
2f084                 | LR__4552
2f084     15 2F 02 F6 | 	mov	local05, local03
2f088                 | LR__4553
2f088     1A 2F 42 FC | 	wrbyte	local05, local08
2f08c     03 26 06 F1 | 	add	local01, #3
2f090     13 03 48 FC | 	wrbyte	#1, local01
2f094     03 26 86 F1 | 	sub	local01, #3
2f098     13 13 02 F6 | 	mov	arg01, local01
2f09c     19 35 02 F6 | 	mov	local08, local07
2f0a0     09 34 46 F0 | 	shr	local08, #9
2f0a4     24 26 06 F1 | 	add	local01, #36
2f0a8     13 15 02 FB | 	rdlong	arg02, local01
2f0ac     24 26 86 F1 | 	sub	local01, #36
2f0b0     1A 15 02 F1 | 	add	arg02, local08
2f0b4     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2f0b8     FD 2C 0A F6 | 	mov	local04, result1 wz
2f0bc     FC 00 90 5D |  if_ne	jmp	#LR__4556
2f0c0     34 26 06 F1 | 	add	local01, #52
2f0c4     13 35 02 F6 | 	mov	local08, local01
2f0c8     FF 33 06 F5 | 	and	local07, #511
2f0cc     19 35 02 F1 | 	add	local08, local07
2f0d0     01 28 CE F7 | 	test	local02, #1 wz
2f0d4     04 2A 46 50 |  if_ne	shr	local03, #4
2f0d8     15 2F 02 56 |  if_ne	mov	local05, local03
2f0dc     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2f0e0     F0 2E 06 A5 |  if_e	and	local05, #240
2f0e4     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2f0e8     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2f0ec     15 2F 42 A5 |  if_e	or	local05, local03
2f0f0     1A 2F 42 FC | 	wrbyte	local05, local08
2f0f4     31 26 86 F1 | 	sub	local01, #49
2f0f8     13 03 48 FC | 	wrbyte	#1, local01
2f0fc                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2f0fc                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2f0fc                 | ' 			fs->wflag = 1;
2f0fc                 | ' 			break;
2f0fc     BC 00 90 FD | 	jmp	#LR__4556
2f100                 | LR__4554
2f100     13 13 02 F6 | 	mov	arg01, local01
2f104     14 35 02 F6 | 	mov	local08, local02
2f108     08 34 46 F0 | 	shr	local08, #8
2f10c     24 26 06 F1 | 	add	local01, #36
2f110     13 15 02 FB | 	rdlong	arg02, local01
2f114     24 26 86 F1 | 	sub	local01, #36
2f118     1A 15 02 F1 | 	add	arg02, local08
2f11c     40 FB BF FD | 	call	#_fatfs_cc_move_window
2f120     FD 2C 0A F6 | 	mov	local04, result1 wz
2f124     94 00 90 5D |  if_ne	jmp	#LR__4556
2f128     34 26 06 F1 | 	add	local01, #52
2f12c     13 13 02 F6 | 	mov	arg01, local01
2f130     01 28 66 F0 | 	shl	local02, #1
2f134     FF 29 06 F5 | 	and	local02, #511
2f138     14 13 02 F1 | 	add	arg01, local02
2f13c     09 2B 52 FC | 	wrword	local03, arg01
2f140     31 26 86 F1 | 	sub	local01, #49
2f144     13 03 48 FC | 	wrbyte	#1, local01
2f148                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2f148                 | ' 			fs->wflag = 1;
2f148                 | ' 			break;
2f148     70 00 90 FD | 	jmp	#LR__4556
2f14c                 | LR__4555
2f14c     13 13 02 F6 | 	mov	arg01, local01
2f150     14 35 02 F6 | 	mov	local08, local02
2f154     07 34 46 F0 | 	shr	local08, #7
2f158     24 26 06 F1 | 	add	local01, #36
2f15c     13 15 02 FB | 	rdlong	arg02, local01
2f160     24 26 86 F1 | 	sub	local01, #36
2f164     1A 15 02 F1 | 	add	arg02, local08
2f168     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2f16c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f170     48 00 90 5D |  if_ne	jmp	#LR__4556
2f174     7C 2A 06 F4 | 	bitl	local03, #124
2f178     34 26 06 F1 | 	add	local01, #52
2f17c     14 35 02 F6 | 	mov	local08, local02
2f180     02 34 66 F0 | 	shl	local08, #2
2f184     FF 35 06 F5 | 	and	local08, #511
2f188     13 13 02 F6 | 	mov	arg01, local01
2f18c     1A 13 02 F1 | 	add	arg01, local08
2f190                 | ' {
2f190                 | ' 
2f190                 | ' 	return *((DWORD*)ptr);
2f190     09 35 02 FB | 	rdlong	local08, arg01
2f194     00 00 78 FF 
2f198     00 34 06 F5 | 	and	local08, ##-268435456
2f19c     1A 2B 42 F5 | 	or	local03, local08
2f1a0     13 13 02 F6 | 	mov	arg01, local01
2f1a4     02 28 66 F0 | 	shl	local02, #2
2f1a8     FF 29 06 F5 | 	and	local02, #511
2f1ac     14 13 02 F1 | 	add	arg01, local02
2f1b0     09 2B 62 FC | 	wrlong	local03, arg01
2f1b4     31 26 86 F1 | 	sub	local01, #49
2f1b8     13 03 48 FC | 	wrbyte	#1, local01
2f1bc                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2f1bc                 | ' 			}
2f1bc                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2f1bc                 | ' 			fs->wflag = 1;
2f1bc                 | ' 			break;
2f1bc                 | LR__4556
2f1bc                 | LR__4557
2f1bc                 | ' 		}
2f1bc                 | ' 	}
2f1bc                 | ' 	return res;
2f1bc     16 FB 01 F6 | 	mov	result1, local04
2f1c0     A7 F0 03 F6 | 	mov	ptra, fp
2f1c4     B2 00 A0 FD | 	call	#popregs_
2f1c8                 | _fatfs_cc_put_fat_ret
2f1c8     2D 00 64 FD | 	ret
2f1cc                 | 
2f1cc                 | _fatfs_cc_remove_chain
2f1cc     05 4A 05 F6 | 	mov	COUNT_, #5
2f1d0     A8 00 A0 FD | 	call	#pushregs_
2f1d4     09 27 02 F6 | 	mov	local01, arg01
2f1d8     0A 29 02 F6 | 	mov	local02, arg02
2f1dc     0B 2B 02 F6 | 	mov	local03, arg03
2f1e0     13 2D 02 FB | 	rdlong	local04, local01
2f1e4     02 28 16 F2 | 	cmp	local02, #2 wc
2f1e8     14 00 90 CD |  if_b	jmp	#LR__4560
2f1ec     18 2C 06 F1 | 	add	local04, #24
2f1f0     16 FB 01 FB | 	rdlong	result1, local04
2f1f4     18 2C 86 F1 | 	sub	local04, #24
2f1f8     FD 28 12 F2 | 	cmp	local02, result1 wc
2f1fc     08 00 90 CD |  if_b	jmp	#LR__4561
2f200                 | LR__4560
2f200     02 FA 05 F6 | 	mov	result1, #2
2f204     CC 00 90 FD | 	jmp	#LR__4566
2f208                 | LR__4561
2f208     00 2A 0E F2 | 	cmp	local03, #0 wz
2f20c     18 00 90 AD |  if_e	jmp	#LR__4562
2f210     15 15 02 F6 | 	mov	arg02, local03
2f214     16 13 02 F6 | 	mov	arg01, local04
2f218     01 16 66 F6 | 	neg	arg03, #1
2f21c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2f220     00 FA 0D F2 | 	cmp	result1, #0 wz
2f224     AC 00 90 5D |  if_ne	jmp	#LR__4566
2f228                 | LR__4562
2f228                 | ' 	}
2f228                 | ' 
2f228                 | ' 
2f228                 | ' 	do {
2f228                 | LR__4563
2f228     14 15 02 F6 | 	mov	arg02, local02
2f22c     13 13 02 F6 | 	mov	arg01, local01
2f230     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2f234     FD 2E 0A F6 | 	mov	local05, result1 wz
2f238     94 00 90 AD |  if_e	jmp	#LR__4565
2f23c     01 2E 0E F2 | 	cmp	local05, #1 wz
2f240     02 FA 05 A6 |  if_e	mov	result1, #2
2f244     8C 00 90 AD |  if_e	jmp	#LR__4566
2f248     FF FF 7F FF 
2f24c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f250     01 FA 05 A6 |  if_e	mov	result1, #1
2f254     7C 00 90 AD |  if_e	jmp	#LR__4566
2f258     14 15 02 F6 | 	mov	arg02, local02
2f25c     16 13 02 F6 | 	mov	arg01, local04
2f260     00 16 06 F6 | 	mov	arg03, #0
2f264     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2f268     FD 2A 0A F6 | 	mov	local03, result1 wz
2f26c     15 FB 01 56 |  if_ne	mov	result1, local03
2f270     60 00 90 5D |  if_ne	jmp	#LR__4566
2f274     18 2C 06 F1 | 	add	local04, #24
2f278     16 2B 02 FB | 	rdlong	local03, local04
2f27c     02 2A 86 F1 | 	sub	local03, #2
2f280     04 2C 86 F1 | 	sub	local04, #4
2f284     16 29 02 FB | 	rdlong	local02, local04
2f288     14 2C 86 F1 | 	sub	local04, #20
2f28c     15 29 12 F2 | 	cmp	local02, local03 wc
2f290     24 00 90 3D |  if_ae	jmp	#LR__4564
2f294     14 2C 06 F1 | 	add	local04, #20
2f298     16 2B 02 FB | 	rdlong	local03, local04
2f29c     01 2A 06 F1 | 	add	local03, #1
2f2a0     16 2B 62 FC | 	wrlong	local03, local04
2f2a4     10 2C 86 F1 | 	sub	local04, #16
2f2a8     16 2B C2 FA | 	rdbyte	local03, local04
2f2ac     01 2A 46 F5 | 	or	local03, #1
2f2b0     16 2B 42 FC | 	wrbyte	local03, local04
2f2b4     04 2C 86 F1 | 	sub	local04, #4
2f2b8                 | LR__4564
2f2b8     17 29 02 F6 | 	mov	local02, local05
2f2bc     18 2C 06 F1 | 	add	local04, #24
2f2c0     16 2F 02 FB | 	rdlong	local05, local04
2f2c4     18 2C 86 F1 | 	sub	local04, #24
2f2c8     17 29 12 F2 | 	cmp	local02, local05 wc
2f2cc     58 FF 9F CD |  if_b	jmp	#LR__4563
2f2d0                 | LR__4565
2f2d0                 | ' #line 1500 "ff.c"
2f2d0                 | ' 	return FR_OK;
2f2d0     00 FA 05 F6 | 	mov	result1, #0
2f2d4                 | LR__4566
2f2d4     A7 F0 03 F6 | 	mov	ptra, fp
2f2d8     B2 00 A0 FD | 	call	#popregs_
2f2dc                 | _fatfs_cc_remove_chain_ret
2f2dc     2D 00 64 FD | 	ret
2f2e0                 | 
2f2e0                 | _fatfs_cc_create_chain
2f2e0     09 4A 05 F6 | 	mov	COUNT_, #9
2f2e4     A8 00 A0 FD | 	call	#pushregs_
2f2e8     09 27 02 F6 | 	mov	local01, arg01
2f2ec     0A 29 0A F6 | 	mov	local02, arg02 wz
2f2f0     13 2B 02 FB | 	rdlong	local03, local01
2f2f4     28 00 90 5D |  if_ne	jmp	#LR__4570
2f2f8     10 2A 06 F1 | 	add	local03, #16
2f2fc     15 2D 0A FB | 	rdlong	local04, local03 wz
2f300     10 2A 86 F1 | 	sub	local03, #16
2f304     18 2A 06 51 |  if_ne	add	local03, #24
2f308     15 2F 02 5B |  if_ne	rdlong	local05, local03
2f30c     18 2A 86 51 |  if_ne	sub	local03, #24
2f310     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2f314     50 00 90 4D |  if_c_and_nz	jmp	#LR__4571
2f318     01 2C 06 F6 | 	mov	local04, #1
2f31c     48 00 90 FD | 	jmp	#LR__4571
2f320                 | LR__4570
2f320     14 15 02 F6 | 	mov	arg02, local02
2f324     13 13 02 F6 | 	mov	arg01, local01
2f328     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2f32c     FD 2C 02 F6 | 	mov	local04, result1
2f330     02 2C 16 F2 | 	cmp	local04, #2 wc
2f334     01 FA 05 C6 |  if_b	mov	result1, #1
2f338     BC 01 90 CD |  if_b	jmp	#LR__4581
2f33c     FF FF 7F FF 
2f340     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f344     16 FB 01 A6 |  if_e	mov	result1, local04
2f348     AC 01 90 AD |  if_e	jmp	#LR__4581
2f34c     18 2A 06 F1 | 	add	local03, #24
2f350     15 2F 02 FB | 	rdlong	local05, local03
2f354     18 2A 86 F1 | 	sub	local03, #24
2f358     17 2D 12 F2 | 	cmp	local04, local05 wc
2f35c     16 FB 01 C6 |  if_b	mov	result1, local04
2f360     94 01 90 CD |  if_b	jmp	#LR__4581
2f364     14 2D 02 F6 | 	mov	local04, local02
2f368                 | LR__4571
2f368     14 2A 06 F1 | 	add	local03, #20
2f36c     15 2F 0A FB | 	rdlong	local05, local03 wz
2f370     14 2A 86 F1 | 	sub	local03, #20
2f374     00 FA 05 A6 |  if_e	mov	result1, #0
2f378     7C 01 90 AD |  if_e	jmp	#LR__4581
2f37c     00 30 06 F6 | 	mov	local06, #0
2f380     14 2D 0A F2 | 	cmp	local04, local02 wz
2f384     74 00 90 5D |  if_ne	jmp	#LR__4574
2f388     16 31 02 F6 | 	mov	local06, local04
2f38c     01 30 06 F1 | 	add	local06, #1
2f390     18 2A 06 F1 | 	add	local03, #24
2f394     15 2F 02 FB | 	rdlong	local05, local03
2f398     18 2A 86 F1 | 	sub	local03, #24
2f39c     17 31 12 F2 | 	cmp	local06, local05 wc
2f3a0     02 30 06 36 |  if_ae	mov	local06, #2
2f3a4     18 15 02 F6 | 	mov	arg02, local06
2f3a8     13 13 02 F6 | 	mov	arg01, local01
2f3ac     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2f3b0     FD 2E 02 F6 | 	mov	local05, result1
2f3b4     01 2E 0E F2 | 	cmp	local05, #1 wz
2f3b8     FF FF 7F 5F 
2f3bc     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2f3c0     17 FB 01 A6 |  if_e	mov	result1, local05
2f3c4     30 01 90 AD |  if_e	jmp	#LR__4581
2f3c8     00 2E 0E F2 | 	cmp	local05, #0 wz
2f3cc     2C 00 90 AD |  if_e	jmp	#LR__4573
2f3d0     10 2A 06 F1 | 	add	local03, #16
2f3d4     15 33 02 FB | 	rdlong	local07, local03
2f3d8     10 2A 86 F1 | 	sub	local03, #16
2f3dc     02 32 16 F2 | 	cmp	local07, #2 wc
2f3e0     14 00 90 CD |  if_b	jmp	#LR__4572
2f3e4     18 2A 06 F1 | 	add	local03, #24
2f3e8     15 2F 02 FB | 	rdlong	local05, local03
2f3ec     18 2A 86 F1 | 	sub	local03, #24
2f3f0     17 33 12 F2 | 	cmp	local07, local05 wc
2f3f4     19 2D 02 C6 |  if_b	mov	local04, local07
2f3f8                 | LR__4572
2f3f8     00 30 06 F6 | 	mov	local06, #0
2f3fc                 | LR__4573
2f3fc                 | LR__4574
2f3fc     00 30 0E F2 | 	cmp	local06, #0 wz
2f400     60 00 90 5D |  if_ne	jmp	#LR__4577
2f404     16 31 02 F6 | 	mov	local06, local04
2f408                 | ' 			ncl = scl;
2f408                 | ' 			for (;;) {
2f408                 | LR__4575
2f408     01 30 06 F1 | 	add	local06, #1
2f40c     18 2A 06 F1 | 	add	local03, #24
2f410     15 2F 02 FB | 	rdlong	local05, local03
2f414     18 2A 86 F1 | 	sub	local03, #24
2f418     17 31 12 F2 | 	cmp	local06, local05 wc
2f41c     02 30 06 36 |  if_ae	mov	local06, #2
2f420     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2f424     00 FA 05 16 |  if_a	mov	result1, #0
2f428     CC 00 90 1D |  if_a	jmp	#LR__4581
2f42c     18 15 02 F6 | 	mov	arg02, local06
2f430     13 13 02 F6 | 	mov	arg01, local01
2f434     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2f438     FD 32 0A F6 | 	mov	local07, result1 wz
2f43c     24 00 90 AD |  if_e	jmp	#LR__4576
2f440     01 32 0E F2 | 	cmp	local07, #1 wz
2f444     FF FF 7F 5F 
2f448     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2f44c     19 FB 01 A6 |  if_e	mov	result1, local07
2f450     A4 00 90 AD |  if_e	jmp	#LR__4581
2f454     16 31 0A F2 | 	cmp	local06, local04 wz
2f458     00 FA 05 A6 |  if_e	mov	result1, #0
2f45c     98 00 90 AD |  if_e	jmp	#LR__4581
2f460     A4 FF 9F FD | 	jmp	#LR__4575
2f464                 | LR__4576
2f464                 | LR__4577
2f464     15 13 02 F6 | 	mov	arg01, local03
2f468     18 15 02 F6 | 	mov	arg02, local06
2f46c     01 16 66 F6 | 	neg	arg03, #1
2f470     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2f474     FD 34 0A F6 | 	mov	local08, result1 wz
2f478     1C 00 90 5D |  if_ne	jmp	#LR__4578
2f47c     00 28 0E F2 | 	cmp	local02, #0 wz
2f480     14 00 90 AD |  if_e	jmp	#LR__4578
2f484     15 13 02 F6 | 	mov	arg01, local03
2f488     14 15 02 F6 | 	mov	arg02, local02
2f48c     18 17 02 F6 | 	mov	arg03, local06
2f490     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2f494     FD 34 02 F6 | 	mov	local08, result1
2f498                 | LR__4578
2f498     00 34 0E F2 | 	cmp	local08, #0 wz
2f49c     4C 00 90 5D |  if_ne	jmp	#LR__4579
2f4a0     10 2A 06 F1 | 	add	local03, #16
2f4a4     15 31 62 FC | 	wrlong	local06, local03
2f4a8     08 2A 06 F1 | 	add	local03, #8
2f4ac     15 2F 02 FB | 	rdlong	local05, local03
2f4b0     02 2E 86 F1 | 	sub	local05, #2
2f4b4     04 2A 86 F1 | 	sub	local03, #4
2f4b8     15 37 02 FB | 	rdlong	local09, local03
2f4bc     14 2A 86 F1 | 	sub	local03, #20
2f4c0     17 37 1A F2 | 	cmp	local09, local05 wcz
2f4c4     14 2A 06 E1 |  if_be	add	local03, #20
2f4c8     15 37 02 EB |  if_be	rdlong	local09, local03
2f4cc     01 36 86 E1 |  if_be	sub	local09, #1
2f4d0     15 37 62 EC |  if_be	wrlong	local09, local03
2f4d4     14 2A 86 E1 |  if_be	sub	local03, #20
2f4d8     04 2A 06 F1 | 	add	local03, #4
2f4dc     15 2F C2 FA | 	rdbyte	local05, local03
2f4e0     01 2E 46 F5 | 	or	local05, #1
2f4e4     15 2F 42 FC | 	wrbyte	local05, local03
2f4e8     08 00 90 FD | 	jmp	#LR__4580
2f4ec                 | LR__4579
2f4ec     01 34 0E F2 | 	cmp	local08, #1 wz
2f4f0     01 30 C6 F6 | 	negz	local06, #1
2f4f4                 | LR__4580
2f4f4                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2f4f4                 | ' 	}
2f4f4                 | ' 
2f4f4                 | ' 	return ncl;
2f4f4     18 FB 01 F6 | 	mov	result1, local06
2f4f8                 | LR__4581
2f4f8     A7 F0 03 F6 | 	mov	ptra, fp
2f4fc     B2 00 A0 FD | 	call	#popregs_
2f500                 | _fatfs_cc_create_chain_ret
2f500     2D 00 64 FD | 	ret
2f504                 | 
2f504                 | _fatfs_cc_dir_clear
2f504     06 4A 05 F6 | 	mov	COUNT_, #6
2f508     A8 00 A0 FD | 	call	#pushregs_
2f50c     09 27 02 F6 | 	mov	local01, arg01
2f510     0A 29 02 F6 | 	mov	local02, arg02
2f514     13 13 02 F6 | 	mov	arg01, local01
2f518     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2f51c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f520     01 FA 05 56 |  if_ne	mov	result1, #1
2f524     90 00 90 5D |  if_ne	jmp	#LR__4592
2f528     13 13 02 F6 | 	mov	arg01, local01
2f52c     14 15 02 F6 | 	mov	arg02, local02
2f530     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2f534     FD 2A 02 F6 | 	mov	local03, result1
2f538     30 26 06 F1 | 	add	local01, #48
2f53c     13 2B 62 FC | 	wrlong	local03, local01
2f540     04 26 06 F1 | 	add	local01, #4
2f544     13 13 02 F6 | 	mov	arg01, local01
2f548     00 14 06 F6 | 	mov	arg02, #0
2f54c     09 16 C6 F9 | 	decod	arg03, #9
2f550     98 00 A0 FD | 	call	#\builtin_bytefill_
2f554     13 2D 02 F6 | 	mov	local04, local01
2f558                 | ' #line 1667 "ff.c"
2f558                 | ' 	{
2f558                 | ' 		ibuf = fs->win; szb = 1;
2f558                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2f558     00 2E 06 F6 | 	mov	local05, #0
2f55c     34 26 86 F1 | 	sub	local01, #52
2f560                 | LR__4590
2f560     0A 26 06 F1 | 	add	local01, #10
2f564     13 31 E2 FA | 	rdword	local06, local01
2f568     0A 26 86 F1 | 	sub	local01, #10
2f56c     18 2F 12 F2 | 	cmp	local05, local06 wc
2f570     2C 00 90 3D |  if_ae	jmp	#LR__4591
2f574     01 26 06 F1 | 	add	local01, #1
2f578     13 13 C2 FA | 	rdbyte	arg01, local01
2f57c     01 26 86 F1 | 	sub	local01, #1
2f580     16 15 02 F6 | 	mov	arg02, local04
2f584     15 17 02 F6 | 	mov	arg03, local03
2f588     17 17 02 F1 | 	add	arg03, local05
2f58c     01 18 06 F6 | 	mov	arg04, #1
2f590     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2f594     00 FA 0D F2 | 	cmp	result1, #0 wz
2f598     01 2E 06 A1 |  if_e	add	local05, #1
2f59c     C0 FF 9F AD |  if_e	jmp	#LR__4590
2f5a0                 | LR__4591
2f5a0                 | ' 	}
2f5a0                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2f5a0     0A 26 06 F1 | 	add	local01, #10
2f5a4     13 2D E2 FA | 	rdword	local04, local01
2f5a8     16 2F 0A F2 | 	cmp	local05, local04 wz
2f5ac     00 30 06 A6 |  if_e	mov	local06, #0
2f5b0     01 30 06 56 |  if_ne	mov	local06, #1
2f5b4     18 FB 01 F6 | 	mov	result1, local06
2f5b8                 | LR__4592
2f5b8     A7 F0 03 F6 | 	mov	ptra, fp
2f5bc     B2 00 A0 FD | 	call	#popregs_
2f5c0                 | _fatfs_cc_dir_clear_ret
2f5c0     2D 00 64 FD | 	ret
2f5c4                 | 
2f5c4                 | _fatfs_cc_dir_sdi
2f5c4     06 4A 05 F6 | 	mov	COUNT_, #6
2f5c8     A8 00 A0 FD | 	call	#pushregs_
2f5cc     09 27 02 F6 | 	mov	local01, arg01
2f5d0     0A 29 02 F6 | 	mov	local02, arg02
2f5d4     13 2B 02 FB | 	rdlong	local03, local01
2f5d8     00 10 00 FF 
2f5dc     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2f5e0     1F 28 CE C7 |  if_b	test	local02, #31 wz
2f5e4                 | ' 		return FR_INT_ERR;
2f5e4     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2f5e8     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4606
2f5ec     10 26 06 F1 | 	add	local01, #16
2f5f0     13 29 62 FC | 	wrlong	local02, local01
2f5f4     08 26 86 F1 | 	sub	local01, #8
2f5f8     13 2D 0A FB | 	rdlong	local04, local01 wz
2f5fc     08 26 86 F1 | 	sub	local01, #8
2f600     15 2F C2 AA |  if_e	rdbyte	local05, local03
2f604     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2f608     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2f60c     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2f610     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2f614     00 2C 0E F2 | 	cmp	local04, #0 wz
2f618     3C 00 90 5D |  if_ne	jmp	#LR__4600
2f61c     14 2F 02 F6 | 	mov	local05, local02
2f620     05 2E 46 F0 | 	shr	local05, #5
2f624     08 2A 06 F1 | 	add	local03, #8
2f628     15 15 E2 FA | 	rdword	arg02, local03
2f62c     08 2A 86 F1 | 	sub	local03, #8
2f630     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f634     02 FA 05 36 |  if_ae	mov	result1, #2
2f638     E4 00 90 3D |  if_ae	jmp	#LR__4606
2f63c     28 2A 06 F1 | 	add	local03, #40
2f640     15 2F 02 FB | 	rdlong	local05, local03
2f644     28 2A 86 F1 | 	sub	local03, #40
2f648     18 26 06 F1 | 	add	local01, #24
2f64c     13 2F 62 FC | 	wrlong	local05, local01
2f650     18 26 86 F1 | 	sub	local01, #24
2f654     7C 00 90 FD | 	jmp	#LR__4605
2f658                 | LR__4600
2f658     0A 2A 06 F1 | 	add	local03, #10
2f65c     15 31 E2 FA | 	rdword	local06, local03
2f660     0A 2A 86 F1 | 	sub	local03, #10
2f664     09 30 66 F0 | 	shl	local06, #9
2f668                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2f668                 | ' 		while (ofs >= csz) {
2f668                 | LR__4601
2f668     18 29 12 F2 | 	cmp	local02, local06 wc
2f66c     4C 00 90 CD |  if_b	jmp	#LR__4604
2f670     13 13 02 F6 | 	mov	arg01, local01
2f674     16 15 02 F6 | 	mov	arg02, local04
2f678     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2f67c     FD 2C 02 F6 | 	mov	local04, result1
2f680     FF FF 7F FF 
2f684     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f688     01 FA 05 A6 |  if_e	mov	result1, #1
2f68c     90 00 90 AD |  if_e	jmp	#LR__4606
2f690     02 2C 16 F2 | 	cmp	local04, #2 wc
2f694     14 00 90 CD |  if_b	jmp	#LR__4602
2f698     18 2A 06 F1 | 	add	local03, #24
2f69c     15 2F 02 FB | 	rdlong	local05, local03
2f6a0     18 2A 86 F1 | 	sub	local03, #24
2f6a4     17 2D 12 F2 | 	cmp	local04, local05 wc
2f6a8     08 00 90 CD |  if_b	jmp	#LR__4603
2f6ac                 | LR__4602
2f6ac     02 FA 05 F6 | 	mov	result1, #2
2f6b0     6C 00 90 FD | 	jmp	#LR__4606
2f6b4                 | LR__4603
2f6b4     18 29 82 F1 | 	sub	local02, local06
2f6b8     AC FF 9F FD | 	jmp	#LR__4601
2f6bc                 | LR__4604
2f6bc     15 13 02 F6 | 	mov	arg01, local03
2f6c0     16 15 02 F6 | 	mov	arg02, local04
2f6c4     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2f6c8     18 26 06 F1 | 	add	local01, #24
2f6cc     13 FB 61 FC | 	wrlong	result1, local01
2f6d0     18 26 86 F1 | 	sub	local01, #24
2f6d4                 | LR__4605
2f6d4     14 26 06 F1 | 	add	local01, #20
2f6d8     13 2D 62 FC | 	wrlong	local04, local01
2f6dc     04 26 06 F1 | 	add	local01, #4
2f6e0     13 2F 0A FB | 	rdlong	local05, local01 wz
2f6e4     18 26 86 F1 | 	sub	local01, #24
2f6e8     02 FA 05 A6 |  if_e	mov	result1, #2
2f6ec     30 00 90 AD |  if_e	jmp	#LR__4606
2f6f0     14 31 02 F6 | 	mov	local06, local02
2f6f4     09 30 46 F0 | 	shr	local06, #9
2f6f8     18 26 06 F1 | 	add	local01, #24
2f6fc     13 2F 02 FB | 	rdlong	local05, local01
2f700     18 2F 02 F1 | 	add	local05, local06
2f704     13 2F 62 FC | 	wrlong	local05, local01
2f708     34 2A 06 F1 | 	add	local03, #52
2f70c     FF 29 06 F5 | 	and	local02, #511
2f710     14 2B 02 F1 | 	add	local03, local02
2f714     04 26 06 F1 | 	add	local01, #4
2f718     13 2B 62 FC | 	wrlong	local03, local01
2f71c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2f71c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2f71c                 | ' 
2f71c                 | ' 	return FR_OK;
2f71c     00 FA 05 F6 | 	mov	result1, #0
2f720                 | LR__4606
2f720     A7 F0 03 F6 | 	mov	ptra, fp
2f724     B2 00 A0 FD | 	call	#popregs_
2f728                 | _fatfs_cc_dir_sdi_ret
2f728     2D 00 64 FD | 	ret
2f72c                 | 
2f72c                 | _fatfs_cc_dir_next
2f72c     05 4A 05 F6 | 	mov	COUNT_, #5
2f730     A8 00 A0 FD | 	call	#pushregs_
2f734     09 27 02 F6 | 	mov	local01, arg01
2f738     0A 29 02 F6 | 	mov	local02, arg02
2f73c     13 2B 02 FB | 	rdlong	local03, local01
2f740     10 26 06 F1 | 	add	local01, #16
2f744     13 2D 02 FB | 	rdlong	local04, local01
2f748     10 26 86 F1 | 	sub	local01, #16
2f74c     20 2C 06 F1 | 	add	local04, #32
2f750     00 10 00 FF 
2f754     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2f758     18 26 06 31 |  if_ae	add	local01, #24
2f75c     13 01 68 3C |  if_ae	wrlong	#0, local01
2f760     18 26 86 31 |  if_ae	sub	local01, #24
2f764     18 26 06 F1 | 	add	local01, #24
2f768     13 15 0A FB | 	rdlong	arg02, local01 wz
2f76c     18 26 86 F1 | 	sub	local01, #24
2f770     04 FA 05 A6 |  if_e	mov	result1, #4
2f774     64 01 90 AD |  if_e	jmp	#LR__4615
2f778     FF 2D CE F7 | 	test	local04, #511 wz
2f77c     3C 01 90 5D |  if_ne	jmp	#LR__4614
2f780     18 26 06 F1 | 	add	local01, #24
2f784     13 15 02 FB | 	rdlong	arg02, local01
2f788     01 14 06 F1 | 	add	arg02, #1
2f78c     13 15 62 FC | 	wrlong	arg02, local01
2f790     04 26 86 F1 | 	sub	local01, #4
2f794     13 15 0A FB | 	rdlong	arg02, local01 wz
2f798     14 26 86 F1 | 	sub	local01, #20
2f79c     2C 00 90 5D |  if_ne	jmp	#LR__4610
2f7a0     16 15 02 F6 | 	mov	arg02, local04
2f7a4     05 14 46 F0 | 	shr	arg02, #5
2f7a8     08 2A 06 F1 | 	add	local03, #8
2f7ac     15 29 E2 FA | 	rdword	local02, local03
2f7b0     08 2A 86 F1 | 	sub	local03, #8
2f7b4     14 15 12 F2 | 	cmp	arg02, local02 wc
2f7b8     18 26 06 31 |  if_ae	add	local01, #24
2f7bc     13 01 68 3C |  if_ae	wrlong	#0, local01
2f7c0                 | ' 				dp->sect = 0; return FR_NO_FILE;
2f7c0     04 FA 05 36 |  if_ae	mov	result1, #4
2f7c4     14 01 90 3D |  if_ae	jmp	#LR__4615
2f7c8     F0 00 90 FD | 	jmp	#LR__4613
2f7cc                 | LR__4610
2f7cc     16 13 02 F6 | 	mov	arg01, local04
2f7d0     09 12 46 F0 | 	shr	arg01, #9
2f7d4     0A 2A 06 F1 | 	add	local03, #10
2f7d8     15 15 E2 FA | 	rdword	arg02, local03
2f7dc     0A 2A 86 F1 | 	sub	local03, #10
2f7e0     01 14 86 F1 | 	sub	arg02, #1
2f7e4     0A 13 CA F7 | 	test	arg01, arg02 wz
2f7e8     D0 00 90 5D |  if_ne	jmp	#LR__4612
2f7ec     13 13 02 F6 | 	mov	arg01, local01
2f7f0     14 26 06 F1 | 	add	local01, #20
2f7f4     13 15 02 FB | 	rdlong	arg02, local01
2f7f8     14 26 86 F1 | 	sub	local01, #20
2f7fc     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2f800     FD 2E 02 F6 | 	mov	local05, result1
2f804     02 2E 16 F2 | 	cmp	local05, #2 wc
2f808     02 FA 05 C6 |  if_b	mov	result1, #2
2f80c     CC 00 90 CD |  if_b	jmp	#LR__4615
2f810     FF FF 7F FF 
2f814     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f818     01 FA 05 A6 |  if_e	mov	result1, #1
2f81c     BC 00 90 AD |  if_e	jmp	#LR__4615
2f820     18 2A 06 F1 | 	add	local03, #24
2f824     15 15 02 FB | 	rdlong	arg02, local03
2f828     18 2A 86 F1 | 	sub	local03, #24
2f82c     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f830     68 00 90 CD |  if_b	jmp	#LR__4611
2f834     00 28 0E F2 | 	cmp	local02, #0 wz
2f838     18 26 06 A1 |  if_e	add	local01, #24
2f83c     13 01 68 AC |  if_e	wrlong	#0, local01
2f840                 | ' 						dp->sect = 0; return FR_NO_FILE;
2f840     04 FA 05 A6 |  if_e	mov	result1, #4
2f844     94 00 90 AD |  if_e	jmp	#LR__4615
2f848     13 13 02 F6 | 	mov	arg01, local01
2f84c     14 26 06 F1 | 	add	local01, #20
2f850     13 15 02 FB | 	rdlong	arg02, local01
2f854     14 26 86 F1 | 	sub	local01, #20
2f858     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2f85c     FD 2E 0A F6 | 	mov	local05, result1 wz
2f860     07 FA 05 A6 |  if_e	mov	result1, #7
2f864     74 00 90 AD |  if_e	jmp	#LR__4615
2f868     01 2E 0E F2 | 	cmp	local05, #1 wz
2f86c     02 FA 05 A6 |  if_e	mov	result1, #2
2f870     68 00 90 AD |  if_e	jmp	#LR__4615
2f874     FF FF 7F FF 
2f878     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f87c     01 FA 05 A6 |  if_e	mov	result1, #1
2f880     58 00 90 AD |  if_e	jmp	#LR__4615
2f884     17 15 02 F6 | 	mov	arg02, local05
2f888     15 13 02 F6 | 	mov	arg01, local03
2f88c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2f890     00 FA 0D F2 | 	cmp	result1, #0 wz
2f894     01 FA 05 56 |  if_ne	mov	result1, #1
2f898     40 00 90 5D |  if_ne	jmp	#LR__4615
2f89c                 | LR__4611
2f89c     14 26 06 F1 | 	add	local01, #20
2f8a0     13 2F 62 FC | 	wrlong	local05, local01
2f8a4     15 13 02 F6 | 	mov	arg01, local03
2f8a8     17 15 02 F6 | 	mov	arg02, local05
2f8ac     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2f8b0     04 26 06 F1 | 	add	local01, #4
2f8b4     13 FB 61 FC | 	wrlong	result1, local01
2f8b8     18 26 86 F1 | 	sub	local01, #24
2f8bc                 | LR__4612
2f8bc                 | LR__4613
2f8bc                 | LR__4614
2f8bc     10 26 06 F1 | 	add	local01, #16
2f8c0     13 2D 62 FC | 	wrlong	local04, local01
2f8c4     34 2A 06 F1 | 	add	local03, #52
2f8c8     FF 2D 06 F5 | 	and	local04, #511
2f8cc     16 2B 02 F1 | 	add	local03, local04
2f8d0     0C 26 06 F1 | 	add	local01, #12
2f8d4     13 2B 62 FC | 	wrlong	local03, local01
2f8d8                 | ' #line 1771 "ff.c"
2f8d8                 | ' 				}
2f8d8                 | ' 				dp->clust = clst;
2f8d8                 | ' 				dp->sect = clst2sect(fs, clst);
2f8d8                 | ' 			}
2f8d8                 | ' 		}
2f8d8                 | ' 	}
2f8d8                 | ' 	dp->dptr = ofs;
2f8d8                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2f8d8                 | ' 
2f8d8                 | ' 	return FR_OK;
2f8d8     00 FA 05 F6 | 	mov	result1, #0
2f8dc                 | LR__4615
2f8dc     A7 F0 03 F6 | 	mov	ptra, fp
2f8e0     B2 00 A0 FD | 	call	#popregs_
2f8e4                 | _fatfs_cc_dir_next_ret
2f8e4     2D 00 64 FD | 	ret
2f8e8                 | 
2f8e8                 | _fatfs_cc_dir_alloc
2f8e8     08 4A 05 F6 | 	mov	COUNT_, #8
2f8ec     A8 00 A0 FD | 	call	#pushregs_
2f8f0     09 27 02 F6 | 	mov	local01, arg01
2f8f4     0A 29 02 F6 | 	mov	local02, arg02
2f8f8     13 2B 02 FB | 	rdlong	local03, local01
2f8fc     13 13 02 F6 | 	mov	arg01, local01
2f900     00 14 06 F6 | 	mov	arg02, #0
2f904     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2f908     FD 2C 0A F6 | 	mov	local04, result1 wz
2f90c     70 00 90 5D |  if_ne	jmp	#LR__4624
2f910     00 2E 06 F6 | 	mov	local05, #0
2f914                 | ' 		n = 0;
2f914                 | ' 		do {
2f914                 | LR__4620
2f914     18 26 06 F1 | 	add	local01, #24
2f918     13 15 02 FB | 	rdlong	arg02, local01
2f91c     18 26 86 F1 | 	sub	local01, #24
2f920     15 13 02 F6 | 	mov	arg01, local03
2f924     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2f928     FD 2C 0A F6 | 	mov	local04, result1 wz
2f92c     50 00 90 5D |  if_ne	jmp	#LR__4623
2f930     1C 26 06 F1 | 	add	local01, #28
2f934     13 31 02 FB | 	rdlong	local06, local01
2f938     1C 26 86 F1 | 	sub	local01, #28
2f93c     18 31 C2 FA | 	rdbyte	local06, local06
2f940     E5 30 0E F2 | 	cmp	local06, #229 wz
2f944     1C 26 06 51 |  if_ne	add	local01, #28
2f948     13 33 02 5B |  if_ne	rdlong	local07, local01
2f94c     1C 26 86 51 |  if_ne	sub	local01, #28
2f950     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2f954     10 00 90 5D |  if_ne	jmp	#LR__4621
2f958     01 2E 06 F1 | 	add	local05, #1
2f95c     14 2F 0A F2 | 	cmp	local05, local02 wz
2f960     1C 00 90 AD |  if_e	jmp	#LR__4623
2f964     04 00 90 FD | 	jmp	#LR__4622
2f968                 | LR__4621
2f968     00 2E 06 F6 | 	mov	local05, #0
2f96c                 | LR__4622
2f96c     13 13 02 F6 | 	mov	arg01, local01
2f970     01 14 06 F6 | 	mov	arg02, #1
2f974     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2f978     FD 2C 0A F6 | 	mov	local04, result1 wz
2f97c     94 FF 9F AD |  if_e	jmp	#LR__4620
2f980                 | LR__4623
2f980                 | LR__4624
2f980     04 2C 0E F2 | 	cmp	local04, #4 wz
2f984     07 2C 06 A6 |  if_e	mov	local04, #7
2f988                 | ' 	return res;
2f988     16 FB 01 F6 | 	mov	result1, local04
2f98c     A7 F0 03 F6 | 	mov	ptra, fp
2f990     B2 00 A0 FD | 	call	#popregs_
2f994                 | _fatfs_cc_dir_alloc_ret
2f994     2D 00 64 FD | 	ret
2f998                 | 
2f998                 | _fatfs_cc_ld_clust
2f998     09 01 02 F6 | 	mov	_var01, arg01
2f99c     0A 13 02 F6 | 	mov	arg01, arg02
2f9a0     1A 12 06 F1 | 	add	arg01, #26
2f9a4                 | ' {
2f9a4                 | ' 
2f9a4                 | ' 	return *((WORD*)ptr);
2f9a4     09 FB E1 FA | 	rdword	result1, arg01
2f9a8     FD 12 32 F9 | 	getword	arg01, result1, #0
2f9ac     00 01 C2 FA | 	rdbyte	_var01, _var01
2f9b0     03 00 0E F2 | 	cmp	_var01, #3 wz
2f9b4     14 14 06 A1 |  if_e	add	arg02, #20
2f9b8                 | ' {
2f9b8                 | ' 
2f9b8                 | ' 	return *((WORD*)ptr);
2f9b8     0A FB E1 AA |  if_e	rdword	result1, arg02
2f9bc     10 FA 65 A0 |  if_e	shl	result1, #16
2f9c0     FD 12 42 A5 |  if_e	or	arg01, result1
2f9c4                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2f9c4                 | ' 	}
2f9c4                 | ' 
2f9c4                 | ' 	return cl;
2f9c4     09 FB 01 F6 | 	mov	result1, arg01
2f9c8                 | _fatfs_cc_ld_clust_ret
2f9c8     2D 00 64 FD | 	ret
2f9cc                 | 
2f9cc                 | _fatfs_cc_st_clust
2f9cc     09 01 02 F6 | 	mov	_var01, arg01
2f9d0     0A 13 02 F6 | 	mov	arg01, arg02
2f9d4     1A 12 06 F1 | 	add	arg01, #26
2f9d8     09 17 52 FC | 	wrword	arg03, arg01
2f9dc     00 01 C2 FA | 	rdbyte	_var01, _var01
2f9e0     03 00 0E F2 | 	cmp	_var01, #3 wz
2f9e4     14 14 06 A1 |  if_e	add	arg02, #20
2f9e8     10 16 46 A0 |  if_e	shr	arg03, #16
2f9ec     0A 17 52 AC |  if_e	wrword	arg03, arg02
2f9f0                 | _fatfs_cc_st_clust_ret
2f9f0     2D 00 64 FD | 	ret
2f9f4                 | 
2f9f4                 | _fatfs_cc_cmp_lfn
2f9f4     07 4A 05 F6 | 	mov	COUNT_, #7
2f9f8     A8 00 A0 FD | 	call	#pushregs_
2f9fc     09 27 02 F6 | 	mov	local01, arg01
2fa00     0A 13 02 F6 | 	mov	arg01, arg02
2fa04     1A 12 06 F1 | 	add	arg01, #26
2fa08                 | ' {
2fa08                 | ' 
2fa08                 | ' 	return *((WORD*)ptr);
2fa08     09 FB E9 FA | 	rdword	result1, arg01 wz
2fa0c     00 FA 05 56 |  if_ne	mov	result1, #0
2fa10     E0 00 90 5D |  if_ne	jmp	#LR__4636
2fa14     0A 29 C2 FA | 	rdbyte	local02, arg02
2fa18     3F 28 06 F5 | 	and	local02, #63
2fa1c     01 28 86 F1 | 	sub	local02, #1
2fa20     0D 28 06 FD | 	qmul	local02, #13
2fa24                 | ' 
2fa24                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2fa24                 | ' 
2fa24                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2fa24     01 2A 06 F6 | 	mov	local03, #1
2fa28     00 2C 06 F6 | 	mov	local04, #0
2fa2c     18 2E 62 FD | 	getqx	local05
2fa30                 | LR__4630
2fa30     0D 2C 16 F2 | 	cmp	local04, #13 wc
2fa34     9C 00 90 3D |  if_ae	jmp	#LR__4635
2fa38     0A 13 02 F6 | 	mov	arg01, arg02
2fa3c     16 29 02 F6 | 	mov	local02, local04
2fa40     01 00 00 FF 
2fa44     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fa48     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2fa4c     14 29 C2 FA | 	rdbyte	local02, local02
2fa50     01 28 06 FA | 	mul	local02, #1
2fa54     14 13 02 F1 | 	add	arg01, local02
2fa58     01 00 00 FF 
2fa5c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2fa60                 | ' {
2fa60                 | ' 
2fa60                 | ' 	return *((WORD*)ptr);
2fa60     09 FB E1 FA | 	rdword	result1, arg01
2fa64     FD 30 02 F6 | 	mov	local06, result1
2fa68     15 29 02 F6 | 	mov	local02, local03
2fa6c     0F 28 4E F7 | 	zerox	local02, #15 wz
2fa70     44 00 90 AD |  if_e	jmp	#LR__4633
2fa74     00 2F 16 F2 | 	cmp	local05, #256 wc
2fa78     2C 00 90 3D |  if_ae	jmp	#LR__4631
2fa7c     18 13 32 F9 | 	getword	arg01, local06, #0
2fa80     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2fa84     FD 28 02 F6 | 	mov	local02, result1
2fa88     17 2B 02 F6 | 	mov	local03, local05
2fa8c     01 2A 66 F0 | 	shl	local03, #1
2fa90     13 2B 02 F1 | 	add	local03, local01
2fa94     15 13 E2 FA | 	rdword	arg01, local03
2fa98     01 2E 06 F1 | 	add	local05, #1
2fa9c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2faa0     FD 28 0A F2 | 	cmp	local02, result1 wz
2faa4     08 00 90 AD |  if_e	jmp	#LR__4632
2faa8                 | LR__4631
2faa8                 | ' 				return 0;
2faa8     00 FA 05 F6 | 	mov	result1, #0
2faac     44 00 90 FD | 	jmp	#LR__4636
2fab0                 | LR__4632
2fab0     18 2B 02 F6 | 	mov	local03, local06
2fab4     14 00 90 FD | 	jmp	#LR__4634
2fab8                 | LR__4633
2fab8     18 31 32 F9 | 	getword	local06, local06, #0
2fabc     7F 00 00 FF 
2fac0     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2fac4     00 FA 05 56 |  if_ne	mov	result1, #0
2fac8     28 00 90 5D |  if_ne	jmp	#LR__4636
2facc                 | LR__4634
2facc     01 2C 06 F1 | 	add	local04, #1
2fad0     5C FF 9F FD | 	jmp	#LR__4630
2fad4                 | LR__4635
2fad4     0A 29 C2 FA | 	rdbyte	local02, arg02
2fad8     40 28 CE F7 | 	test	local02, #64 wz
2fadc     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2fae0     01 2E 66 50 |  if_ne	shl	local05, #1
2fae4     13 2F 02 51 |  if_ne	add	local05, local01
2fae8     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2faec     00 FA 05 56 |  if_ne	mov	result1, #0
2faf0                 | ' 
2faf0                 | ' 	return 1;
2faf0     01 FA 05 A6 |  if_e	mov	result1, #1
2faf4                 | LR__4636
2faf4     A7 F0 03 F6 | 	mov	ptra, fp
2faf8     B2 00 A0 FD | 	call	#popregs_
2fafc                 | _fatfs_cc_cmp_lfn_ret
2fafc     2D 00 64 FD | 	ret
2fb00                 | 
2fb00                 | _fatfs_cc_pick_lfn
2fb00     09 01 02 F6 | 	mov	_var01, arg01
2fb04     0A 13 02 F6 | 	mov	arg01, arg02
2fb08     1A 12 06 F1 | 	add	arg01, #26
2fb0c                 | ' {
2fb0c                 | ' 
2fb0c                 | ' 	return *((WORD*)ptr);
2fb0c     09 FB E9 FA | 	rdword	result1, arg01 wz
2fb10     00 FA 05 56 |  if_ne	mov	result1, #0
2fb14     D4 00 90 5D |  if_ne	jmp	#LR__4645
2fb18     0A 03 C2 FA | 	rdbyte	_var02, arg02
2fb1c     40 02 26 F5 | 	andn	_var02, #64
2fb20     01 02 86 F1 | 	sub	_var02, #1
2fb24     0D 02 06 FD | 	qmul	_var02, #13
2fb28                 | ' 
2fb28                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2fb28                 | ' 
2fb28                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2fb28     01 04 06 F6 | 	mov	_var03, #1
2fb2c     00 06 06 F6 | 	mov	_var04, #0
2fb30     18 08 62 FD | 	getqx	_var05
2fb34                 | LR__4640
2fb34     0D 06 16 F2 | 	cmp	_var04, #13 wc
2fb38     80 00 90 3D |  if_ae	jmp	#LR__4643
2fb3c     0A 13 02 F6 | 	mov	arg01, arg02
2fb40     03 03 02 F6 | 	mov	_var02, _var04
2fb44     01 00 00 FF 
2fb48     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fb4c     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2fb50     01 03 C2 FA | 	rdbyte	_var02, _var02
2fb54     01 02 06 FA | 	mul	_var02, #1
2fb58     01 13 02 F1 | 	add	arg01, _var02
2fb5c     01 00 00 FF 
2fb60     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2fb64                 | ' {
2fb64                 | ' 
2fb64                 | ' 	return *((WORD*)ptr);
2fb64     09 FB E1 FA | 	rdword	result1, arg01
2fb68     FD 0A 02 F6 | 	mov	_var06, result1
2fb6c     02 03 02 F6 | 	mov	_var02, _var03
2fb70     0F 02 4E F7 | 	zerox	_var02, #15 wz
2fb74     28 00 90 AD |  if_e	jmp	#LR__4641
2fb78     00 09 16 F2 | 	cmp	_var05, #256 wc
2fb7c     00 FA 05 36 |  if_ae	mov	result1, #0
2fb80     68 00 90 3D |  if_ae	jmp	#LR__4645
2fb84     04 03 02 F6 | 	mov	_var02, _var05
2fb88     01 02 66 F0 | 	shl	_var02, #1
2fb8c     00 03 02 F1 | 	add	_var02, _var01
2fb90     05 05 02 F6 | 	mov	_var03, _var06
2fb94     01 05 52 FC | 	wrword	_var03, _var02
2fb98     01 08 06 F1 | 	add	_var05, #1
2fb9c     14 00 90 FD | 	jmp	#LR__4642
2fba0                 | LR__4641
2fba0     05 0B 32 F9 | 	getword	_var06, _var06, #0
2fba4     7F 00 00 FF 
2fba8     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2fbac     00 FA 05 56 |  if_ne	mov	result1, #0
2fbb0     38 00 90 5D |  if_ne	jmp	#LR__4645
2fbb4                 | LR__4642
2fbb4     01 06 06 F1 | 	add	_var04, #1
2fbb8     78 FF 9F FD | 	jmp	#LR__4640
2fbbc                 | LR__4643
2fbbc     0A 03 C2 FA | 	rdbyte	_var02, arg02
2fbc0     40 02 CE F7 | 	test	_var02, #64 wz
2fbc4     02 0D 02 56 |  if_ne	mov	_var07, _var03
2fbc8     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2fbcc     18 00 90 AD |  if_e	jmp	#LR__4644
2fbd0     00 09 16 F2 | 	cmp	_var05, #256 wc
2fbd4     00 FA 05 36 |  if_ae	mov	result1, #0
2fbd8     10 00 90 3D |  if_ae	jmp	#LR__4645
2fbdc     01 08 66 F0 | 	shl	_var05, #1
2fbe0     00 09 02 F1 | 	add	_var05, _var01
2fbe4     04 01 58 FC | 	wrword	#0, _var05
2fbe8                 | LR__4644
2fbe8                 | ' 		lfnbuf[i] = 0;
2fbe8                 | ' 	}
2fbe8                 | ' 
2fbe8                 | ' 	return 1;
2fbe8     01 FA 05 F6 | 	mov	result1, #1
2fbec                 | LR__4645
2fbec                 | _fatfs_cc_pick_lfn_ret
2fbec     2D 00 64 FD | 	ret
2fbf0                 | 
2fbf0                 | _fatfs_cc_put_lfn
2fbf0     0D 14 06 F1 | 	add	arg02, #13
2fbf4     0A 19 42 FC | 	wrbyte	arg04, arg02
2fbf8     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2fbfc     01 18 86 F1 | 	sub	arg04, #1
2fc00     0D 18 06 FD | 	qmul	arg04, #13
2fc04     09 01 02 F6 | 	mov	_var01, arg01
2fc08     02 14 86 F1 | 	sub	arg02, #2
2fc0c     0A 1F 48 FC | 	wrbyte	#15, arg02
2fc10     01 14 06 F1 | 	add	arg02, #1
2fc14     0A 01 48 FC | 	wrbyte	#0, arg02
2fc18     0C 14 86 F1 | 	sub	arg02, #12
2fc1c     0A 13 02 F6 | 	mov	arg01, arg02
2fc20     1A 12 06 F1 | 	add	arg01, #26
2fc24     09 01 58 FC | 	wrword	#0, arg01
2fc28     00 02 06 F6 | 	mov	_var02, #0
2fc2c     00 04 06 F6 | 	mov	_var03, #0
2fc30                 | ' 	BYTE* dir,
2fc30                 | ' 	BYTE ord,
2fc30                 | ' 	BYTE sum
2fc30                 | ' )
2fc30                 | ' {
2fc30                 | ' 	UINT i, s;
2fc30                 | ' 	WCHAR wc;
2fc30                 | ' 
2fc30                 | ' 
2fc30                 | ' 	dir[ 13 ] = sum;
2fc30                 | ' 	dir[ 11 ] =  0x0F ;
2fc30                 | ' 	dir[ 12 ] = 0;
2fc30                 | ' 	st_word(dir +  26 , 0);
2fc30                 | ' 
2fc30                 | ' 	i = (ord - 1) * 13;
2fc30                 | ' 	s = wc = 0;
2fc30                 | ' 	do {
2fc30     01 00 00 FF 
2fc34     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fc38     18 06 62 FD | 	getqx	_var04
2fc3c     97 2A 48 FB | 	callpa	#(@LR__4651-@LR__4650)>>2,fcache_load_ptr_
2fc40                 | LR__4650
2fc40     01 19 32 F9 | 	getword	arg04, _var02, #0
2fc44     7F 00 00 FF 
2fc48     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2fc4c     03 13 02 56 |  if_ne	mov	arg01, _var04
2fc50     01 06 06 51 |  if_ne	add	_var04, #1
2fc54     01 12 66 50 |  if_ne	shl	arg01, #1
2fc58     00 13 02 51 |  if_ne	add	arg01, _var01
2fc5c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2fc60     0A 13 02 F6 | 	mov	arg01, arg02
2fc64     02 19 02 F6 | 	mov	arg04, _var03
2fc68     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2fc6c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2fc70     01 18 06 FA | 	mul	arg04, #1
2fc74     0C 13 02 F1 | 	add	arg01, arg04
2fc78     09 03 52 FC | 	wrword	_var02, arg01
2fc7c     01 19 02 F6 | 	mov	arg04, _var02
2fc80     0F 18 4E F7 | 	zerox	arg04, #15 wz
2fc84     0F 02 CE A9 |  if_e	bmask	_var02, #15
2fc88     01 04 06 F1 | 	add	_var03, #1
2fc8c     0D 04 16 F2 | 	cmp	_var03, #13 wc
2fc90     AC FF 9F CD |  if_b	jmp	#LR__4650
2fc94                 | LR__4651
2fc94     01 00 00 FF 
2fc98     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2fc9c     01 03 32 F9 | 	getword	_var02, _var02, #0
2fca0     7F 00 00 FF 
2fca4     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2fca8     01 06 66 50 |  if_ne	shl	_var04, #1
2fcac     00 07 02 51 |  if_ne	add	_var04, _var01
2fcb0     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2fcb4     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2fcb8     40 16 46 A5 |  if_e	or	arg03, #64
2fcbc     0A 17 42 FC | 	wrbyte	arg03, arg02
2fcc0                 | _fatfs_cc_put_lfn_ret
2fcc0     2D 00 64 FD | 	ret
2fcc4                 | 
2fcc4                 | _fatfs_cc_gen_numname
2fcc4     08 4A 05 F6 | 	mov	COUNT_, #8
2fcc8     A8 00 A0 FD | 	call	#pushregs_
2fccc     2C F0 07 F1 | 	add	ptra, #44
2fcd0     09 27 02 F6 | 	mov	local01, arg01
2fcd4     0A 29 02 F6 | 	mov	local02, arg02
2fcd8     0B 2B 02 F6 | 	mov	local03, arg03
2fcdc     0C 2D 02 F6 | 	mov	local04, arg04
2fce0     13 13 02 F6 | 	mov	arg01, local01
2fce4     14 15 02 F6 | 	mov	arg02, local02
2fce8     0B 16 06 F6 | 	mov	arg03, #11
2fcec     2C 72 BF FD | 	call	#__system____builtin_memmove
2fcf0     06 2C 16 F2 | 	cmp	local04, #6 wc
2fcf4     48 00 90 CD |  if_b	jmp	#LR__4665
2fcf8     16 2F 02 F6 | 	mov	local05, local04
2fcfc     97 1E 48 FB | 	callpa	#(@LR__4663-@LR__4660)>>2,fcache_load_ptr_
2fd00                 | ' 		sreg = seq;
2fd00                 | ' 		while (*lfn) {
2fd00                 | LR__4660
2fd00     15 31 EA FA | 	rdword	local06, local03 wz
2fd04     34 00 90 AD |  if_e	jmp	#LR__4664
2fd08     15 33 E2 FA | 	rdword	local07, local03
2fd0c                 | ' 			wc = *lfn++;
2fd0c                 | ' 			for (i = 0; i < 16; i++) {
2fd0c     02 2A 06 F1 | 	add	local03, #2
2fd10     10 12 DC FC | 	rep	@LR__4662, #16
2fd14                 | LR__4661
2fd14     01 2E 66 F0 | 	shl	local05, #1
2fd18     19 31 32 F9 | 	getword	local06, local07, #0
2fd1c     01 30 06 F5 | 	and	local06, #1
2fd20     18 2F 02 F1 | 	add	local05, local06
2fd24     19 33 32 F9 | 	getword	local07, local07, #0
2fd28     01 32 46 F0 | 	shr	local07, #1
2fd2c     10 2E 2E F4 | 	testbn	local05, #16 wz
2fd30     88 00 00 5F 
2fd34     21 2E 66 55 |  if_ne	xor	local05, ##69665
2fd38                 | LR__4662
2fd38     C4 FF 9F FD | 	jmp	#LR__4660
2fd3c                 | LR__4663
2fd3c                 | LR__4664
2fd3c     17 2D 02 F6 | 	mov	local04, local05
2fd40                 | LR__4665
2fd40     07 32 06 F6 | 	mov	local07, #7
2fd44                 | ' 			}
2fd44                 | ' 		}
2fd44                 | ' 		seq = (UINT)sreg;
2fd44                 | ' 	}
2fd44                 | ' 
2fd44                 | ' 
2fd44                 | ' 	i = 7;
2fd44                 | ' 	do {
2fd44     10 4E 05 F1 | 	add	fp, #16
2fd48     97 1A 48 FB | 	callpa	#(@LR__4667-@LR__4666)>>2,fcache_load_ptr_
2fd4c                 | LR__4666
2fd4c     16 2F 42 F8 | 	getnib	local05, local04, #0
2fd50     30 2E 06 F1 | 	add	local05, #48
2fd54     04 2C 46 F0 | 	shr	local04, #4
2fd58     17 31 E2 F8 | 	getbyte	local06, local05, #0
2fd5c     3A 30 16 F2 | 	cmp	local06, #58 wc
2fd60     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2fd64     07 2E 06 31 |  if_ae	add	local05, #7
2fd68     19 31 02 F6 | 	mov	local06, local07
2fd6c     01 32 8E F1 | 	sub	local07, #1 wz
2fd70     A7 30 02 F1 | 	add	local06, fp
2fd74     18 2F 42 FC | 	wrbyte	local05, local06
2fd78     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2fd7c     CC FF 9F 5D |  if_ne	jmp	#LR__4666
2fd80                 | LR__4667
2fd80     19 31 02 F6 | 	mov	local06, local07
2fd84     A7 30 02 F1 | 	add	local06, fp
2fd88     18 FD 48 FC | 	wrbyte	#126, local06
2fd8c                 | ' 	ns[i] = '~';
2fd8c                 | ' 
2fd8c                 | ' 
2fd8c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2fd8c     00 2E 06 F6 | 	mov	local05, #0
2fd90     10 4E 85 F1 | 	sub	fp, #16
2fd94     97 2A 48 FB | 	callpa	#(@LR__4670-@LR__4668)>>2,fcache_load_ptr_
2fd98                 | LR__4668
2fd98     19 2F 12 F2 | 	cmp	local05, local07 wc
2fd9c     4C 00 90 3D |  if_ae	jmp	#LR__4671
2fda0     17 31 02 F6 | 	mov	local06, local05
2fda4     13 31 02 F1 | 	add	local06, local01
2fda8     18 31 C2 FA | 	rdbyte	local06, local06
2fdac     20 30 0E F2 | 	cmp	local06, #32 wz
2fdb0     38 00 90 AD |  if_e	jmp	#LR__4671
2fdb4     17 13 02 F6 | 	mov	arg01, local05
2fdb8     13 13 02 F1 | 	add	arg01, local01
2fdbc     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2fdc0     00 FA 05 56 |  if_ne	mov	result1, #0
2fdc4                 | ' 
2fdc4                 | ' 	return 0;
2fdc4     00 FA 05 A6 |  if_e	mov	result1, #0
2fdc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2fdcc     14 00 90 AD |  if_e	jmp	#LR__4669
2fdd0     19 31 02 F6 | 	mov	local06, local07
2fdd4     01 30 86 F1 | 	sub	local06, #1
2fdd8     18 2F 0A F2 | 	cmp	local05, local06 wz
2fddc     0C 00 90 AD |  if_e	jmp	#LR__4671
2fde0     01 2E 06 F1 | 	add	local05, #1
2fde4                 | LR__4669
2fde4     01 2E 06 F1 | 	add	local05, #1
2fde8     AC FF 9F FD | 	jmp	#LR__4668
2fdec                 | LR__4670
2fdec                 | LR__4671
2fdec     97 20 48 FB | 	callpa	#(@LR__4675-@LR__4672)>>2,fcache_load_ptr_
2fdf0                 | ' 			j++;
2fdf0                 | ' 		}
2fdf0                 | ' 	}
2fdf0                 | ' 	do {
2fdf0                 | LR__4672
2fdf0     17 31 02 F6 | 	mov	local06, local05
2fdf4     13 31 02 F1 | 	add	local06, local01
2fdf8     08 32 16 F2 | 	cmp	local07, #8 wc
2fdfc     01 2E 06 F1 | 	add	local05, #1
2fe00     1C 00 90 3D |  if_ae	jmp	#LR__4673
2fe04     19 2D 02 F6 | 	mov	local04, local07
2fe08     10 4E 05 F1 | 	add	fp, #16
2fe0c     A7 2C 02 F1 | 	add	local04, fp
2fe10     16 35 C2 FA | 	rdbyte	local08, local04
2fe14     01 32 06 F1 | 	add	local07, #1
2fe18     10 4E 85 F1 | 	sub	fp, #16
2fe1c     04 00 90 FD | 	jmp	#LR__4674
2fe20                 | LR__4673
2fe20     20 34 06 F6 | 	mov	local08, #32
2fe24                 | LR__4674
2fe24     18 35 42 FC | 	wrbyte	local08, local06
2fe28     08 2E 16 F2 | 	cmp	local05, #8 wc
2fe2c     C0 FF 9F CD |  if_b	jmp	#LR__4672
2fe30                 | LR__4675
2fe30     A7 F0 03 F6 | 	mov	ptra, fp
2fe34     B2 00 A0 FD | 	call	#popregs_
2fe38                 | _fatfs_cc_gen_numname_ret
2fe38     2D 00 64 FD | 	ret
2fe3c                 | 
2fe3c                 | _fatfs_cc_sum_sfn
2fe3c     00 00 06 F6 | 	mov	_var01, #0
2fe40                 | ' )
2fe40                 | ' {
2fe40                 | ' 	BYTE sum = 0;
2fe40                 | ' 	UINT n = 11;
2fe40                 | ' 
2fe40                 | ' 	do {
2fe40     97 12 48 FB | 	callpa	#(@LR__4682-@LR__4680)>>2,fcache_load_ptr_
2fe44                 | LR__4680
2fe44     0B 10 DC FC | 	rep	@LR__4683, #11
2fe48                 | LR__4681
2fe48     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2fe4c     01 FA 45 F0 | 	shr	result1, #1
2fe50     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2fe54     07 00 66 F0 | 	shl	_var01, #7
2fe58     00 FB 01 F1 | 	add	result1, _var01
2fe5c     09 01 C2 FA | 	rdbyte	_var01, arg01
2fe60     FD 00 02 F1 | 	add	_var01, result1
2fe64     01 12 06 F1 | 	add	arg01, #1
2fe68                 | LR__4682
2fe68                 | LR__4683
2fe68                 | ' 	return sum;
2fe68     00 FB 01 F6 | 	mov	result1, _var01
2fe6c                 | _fatfs_cc_sum_sfn_ret
2fe6c     2D 00 64 FD | 	ret
2fe70                 | 
2fe70                 | _fatfs_cc_dir_read
2fe70     0C 4A 05 F6 | 	mov	COUNT_, #12
2fe74     A8 00 A0 FD | 	call	#pushregs_
2fe78     09 27 02 F6 | 	mov	local01, arg01
2fe7c     0A 29 02 F6 | 	mov	local02, arg02
2fe80     04 2A 06 F6 | 	mov	local03, #4
2fe84     13 2D 02 FB | 	rdlong	local04, local01
2fe88     FF 2E 06 F6 | 	mov	local05, #255
2fe8c     FF 30 06 F6 | 	mov	local06, #255
2fe90                 | ' )
2fe90                 | ' {
2fe90                 | ' 	FRESULT res = FR_NO_FILE;
2fe90                 | ' 	FATFS *fs = dp->obj.fs;
2fe90                 | ' 	BYTE attr, b;
2fe90                 | ' 
2fe90                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2fe90                 | ' 
2fe90                 | ' 
2fe90                 | ' 	while (dp->sect) {
2fe90                 | LR__4690
2fe90     18 26 06 F1 | 	add	local01, #24
2fe94     13 FB 09 FB | 	rdlong	result1, local01 wz
2fe98     18 26 86 F1 | 	sub	local01, #24
2fe9c     AC 01 90 AD |  if_e	jmp	#LR__4700
2fea0     18 26 06 F1 | 	add	local01, #24
2fea4     13 15 02 FB | 	rdlong	arg02, local01
2fea8     18 26 86 F1 | 	sub	local01, #24
2feac     16 13 02 F6 | 	mov	arg01, local04
2feb0     AC ED BF FD | 	call	#_fatfs_cc_move_window
2feb4     FD 2A 0A F6 | 	mov	local03, result1 wz
2feb8     90 01 90 5D |  if_ne	jmp	#LR__4700
2febc     1C 26 06 F1 | 	add	local01, #28
2fec0     13 FB 01 FB | 	rdlong	result1, local01
2fec4     1C 26 86 F1 | 	sub	local01, #28
2fec8     FD 32 C2 FA | 	rdbyte	local07, result1
2fecc     19 FB 01 F6 | 	mov	result1, local07
2fed0     07 FA 4D F7 | 	zerox	result1, #7 wz
2fed4     04 2A 06 A6 |  if_e	mov	local03, #4
2fed8                 | ' 			res = FR_NO_FILE; break;
2fed8     70 01 90 AD |  if_e	jmp	#LR__4700
2fedc     1C 26 06 F1 | 	add	local01, #28
2fee0     13 35 02 FB | 	rdlong	local08, local01
2fee4     0B 34 06 F1 | 	add	local08, #11
2fee8     1A 37 C2 FA | 	rdbyte	local09, local08
2feec     3F 36 06 F5 | 	and	local09, #63
2fef0     16 26 86 F1 | 	sub	local01, #22
2fef4     13 37 42 FC | 	wrbyte	local09, local01
2fef8     06 26 86 F1 | 	sub	local01, #6
2fefc     19 FB E1 F8 | 	getbyte	result1, local07, #0
2ff00     E5 FA 0D F2 | 	cmp	result1, #229 wz
2ff04     19 35 02 56 |  if_ne	mov	local08, local07
2ff08     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2ff0c     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2ff10     1C 00 90 AD |  if_e	jmp	#LR__4691
2ff14     00 38 06 F6 | 	mov	local10, #0
2ff18     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2ff1c     20 34 26 F5 | 	andn	local08, #32
2ff20     08 34 0E F2 | 	cmp	local08, #8 wz
2ff24     01 38 06 A6 |  if_e	mov	local10, #1
2ff28     14 39 0A F2 | 	cmp	local10, local02 wz
2ff2c     08 00 90 AD |  if_e	jmp	#LR__4692
2ff30                 | LR__4691
2ff30     FF 2E 06 F6 | 	mov	local05, #255
2ff34     00 01 90 FD | 	jmp	#LR__4699
2ff38                 | LR__4692
2ff38     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2ff3c     0F 36 0E F2 | 	cmp	local09, #15 wz
2ff40     B4 00 90 5D |  if_ne	jmp	#LR__4696
2ff44     19 3B E2 F8 | 	getbyte	local11, local07, #0
2ff48     40 3A CE F7 | 	test	local11, #64 wz
2ff4c     30 00 90 AD |  if_e	jmp	#LR__4693
2ff50     1C 26 06 F1 | 	add	local01, #28
2ff54     13 3B 02 FB | 	rdlong	local11, local01
2ff58     0D 3A 06 F1 | 	add	local11, #13
2ff5c     1D 31 C2 FA | 	rdbyte	local06, local11
2ff60     19 33 E2 F8 | 	getbyte	local07, local07, #0
2ff64     BF 32 06 F5 | 	and	local07, #191
2ff68     19 2F 02 F6 | 	mov	local05, local07
2ff6c     0C 26 86 F1 | 	sub	local01, #12
2ff70     13 3B 02 FB | 	rdlong	local11, local01
2ff74     1C 26 06 F1 | 	add	local01, #28
2ff78     13 3B 62 FC | 	wrlong	local11, local01
2ff7c     2C 26 86 F1 | 	sub	local01, #44
2ff80                 | LR__4693
2ff80     19 35 E2 F8 | 	getbyte	local08, local07, #0
2ff84     17 39 E2 F8 | 	getbyte	local10, local05, #0
2ff88     1C 35 0A F2 | 	cmp	local08, local10 wz
2ff8c     5C 00 90 5D |  if_ne	jmp	#LR__4694
2ff90     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ff94     1C 26 06 F1 | 	add	local01, #28
2ff98     13 37 02 FB | 	rdlong	local09, local01
2ff9c     1C 26 86 F1 | 	sub	local01, #28
2ffa0     0D 36 06 F1 | 	add	local09, #13
2ffa4     1B 35 C2 FA | 	rdbyte	local08, local09
2ffa8     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2ffac     1B 39 0A F2 | 	cmp	local10, local09 wz
2ffb0     38 00 90 5D |  if_ne	jmp	#LR__4694
2ffb4     0C 2C 06 F1 | 	add	local04, #12
2ffb8     16 13 02 FB | 	rdlong	arg01, local04
2ffbc     0C 2C 86 F1 | 	sub	local04, #12
2ffc0     1C 26 06 F1 | 	add	local01, #28
2ffc4     13 3D 02 FB | 	rdlong	local12, local01
2ffc8     1C 26 86 F1 | 	sub	local01, #28
2ffcc     1E 15 02 F6 | 	mov	arg02, local12
2ffd0     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2ffd4     00 FA 4D F2 | 	cmps	result1, #0 wz
2ffd8     17 3D 02 56 |  if_ne	mov	local12, local05
2ffdc     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2ffe0     01 3C 86 51 |  if_ne	sub	local12, #1
2ffe4     1E 3B 02 56 |  if_ne	mov	local11, local12
2ffe8     04 00 90 5D |  if_ne	jmp	#LR__4695
2ffec                 | LR__4694
2ffec     FF 3A 06 F6 | 	mov	local11, #255
2fff0                 | LR__4695
2fff0     1D 2F 02 F6 | 	mov	local05, local11
2fff4     40 00 90 FD | 	jmp	#LR__4698
2fff8                 | LR__4696
2fff8     17 3B 02 F6 | 	mov	local11, local05
2fffc     07 3A 4E F7 | 	zerox	local11, #7 wz
30000     20 00 90 5D |  if_ne	jmp	#LR__4697
30004     18 31 E2 F8 | 	getbyte	local06, local06, #0
30008     1C 26 06 F1 | 	add	local01, #28
3000c     13 13 02 FB | 	rdlong	arg01, local01
30010     1C 26 86 F1 | 	sub	local01, #28
30014     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
30018     FD FA E1 F8 | 	getbyte	result1, result1, #0
3001c     FD 30 0A F2 | 	cmp	local06, result1 wz
30020     28 00 90 AD |  if_e	jmp	#LR__4700
30024                 | LR__4697
30024     2C 26 06 F1 | 	add	local01, #44
30028     FF FF FF FF 
3002c     13 FF 6B FC | 	wrlong	##-1, local01
30030     2C 26 86 F1 | 	sub	local01, #44
30034                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
30034                 | ' 					}
30034                 | ' 					break;
30034     14 00 90 FD | 	jmp	#LR__4700
30038                 | LR__4698
30038                 | LR__4699
30038     13 13 02 F6 | 	mov	arg01, local01
3003c     00 14 06 F6 | 	mov	arg02, #0
30040     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
30044     FD 2A 0A F6 | 	mov	local03, result1 wz
30048     44 FE 9F AD |  if_e	jmp	#LR__4690
3004c                 | LR__4700
3004c     00 2A 0E F2 | 	cmp	local03, #0 wz
30050     18 26 06 51 |  if_ne	add	local01, #24
30054     13 01 68 5C |  if_ne	wrlong	#0, local01
30058                 | ' 	return res;
30058     15 FB 01 F6 | 	mov	result1, local03
3005c     A7 F0 03 F6 | 	mov	ptra, fp
30060     B2 00 A0 FD | 	call	#popregs_
30064                 | _fatfs_cc_dir_read_ret
30064     2D 00 64 FD | 	ret
30068                 | 
30068                 | _fatfs_cc_dir_find
30068     0B 4A 05 F6 | 	mov	COUNT_, #11
3006c     A8 00 A0 FD | 	call	#pushregs_
30070     09 27 02 F6 | 	mov	local01, arg01
30074     13 29 02 FB | 	rdlong	local02, local01
30078     13 13 02 F6 | 	mov	arg01, local01
3007c     00 14 06 F6 | 	mov	arg02, #0
30080     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
30084     00 FA 0D F2 | 	cmp	result1, #0 wz
30088     18 02 90 5D |  if_ne	jmp	#LR__4722
3008c     FF 2A 06 F6 | 	mov	local03, #255
30090     FF 2C 06 F6 | 	mov	local04, #255
30094     2C 26 06 F1 | 	add	local01, #44
30098     FF FF FF FF 
3009c     13 FF 6B FC | 	wrlong	##-1, local01
300a0     2C 26 86 F1 | 	sub	local01, #44
300a4                 | ' #line 2404 "ff.c"
300a4                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
300a4                 | ' 
300a4                 | ' 	do {
300a4                 | LR__4710
300a4     18 26 06 F1 | 	add	local01, #24
300a8     13 15 02 FB | 	rdlong	arg02, local01
300ac     18 26 86 F1 | 	sub	local01, #24
300b0     14 13 02 F6 | 	mov	arg01, local02
300b4     A8 EB BF FD | 	call	#_fatfs_cc_move_window
300b8     FD 2E 0A F6 | 	mov	local05, result1 wz
300bc     E0 01 90 5D |  if_ne	jmp	#LR__4721
300c0     1C 26 06 F1 | 	add	local01, #28
300c4     13 17 02 FB | 	rdlong	arg03, local01
300c8     1C 26 86 F1 | 	sub	local01, #28
300cc     0B 31 C2 FA | 	rdbyte	local06, arg03
300d0     18 17 02 F6 | 	mov	arg03, local06
300d4     07 16 4E F7 | 	zerox	arg03, #7 wz
300d8     04 2E 06 A6 |  if_e	mov	local05, #4
300dc     C0 01 90 AD |  if_e	jmp	#LR__4721
300e0     1C 26 06 F1 | 	add	local01, #28
300e4     13 33 02 FB | 	rdlong	local07, local01
300e8     19 17 02 F6 | 	mov	arg03, local07
300ec     0B 16 06 F1 | 	add	arg03, #11
300f0     0B 35 C2 FA | 	rdbyte	local08, arg03
300f4     3F 34 06 F5 | 	and	local08, #63
300f8     16 26 86 F1 | 	sub	local01, #22
300fc     13 35 42 FC | 	wrbyte	local08, local01
30100     06 26 86 F1 | 	sub	local01, #6
30104     18 17 E2 F8 | 	getbyte	arg03, local06, #0
30108     E5 16 0E F2 | 	cmp	arg03, #229 wz
3010c     18 00 90 AD |  if_e	jmp	#LR__4711
30110     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
30114     08 16 CE F7 | 	test	arg03, #8 wz
30118     1A 33 02 56 |  if_ne	mov	local07, local08
3011c     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
30120     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
30124     18 00 90 AD |  if_e	jmp	#LR__4712
30128                 | LR__4711
30128     FF 2C 06 F6 | 	mov	local04, #255
3012c     2C 26 06 F1 | 	add	local01, #44
30130     FF FF FF FF 
30134     13 FF 6B FC | 	wrlong	##-1, local01
30138     2C 26 86 F1 | 	sub	local01, #44
3013c     4C 01 90 FD | 	jmp	#LR__4720
30140                 | LR__4712
30140     1A 35 E2 F8 | 	getbyte	local08, local08, #0
30144     0F 34 0E F2 | 	cmp	local08, #15 wz
30148     C8 00 90 5D |  if_ne	jmp	#LR__4716
3014c     2B 26 06 F1 | 	add	local01, #43
30150     13 35 C2 FA | 	rdbyte	local08, local01
30154     2B 26 86 F1 | 	sub	local01, #43
30158     40 34 CE F7 | 	test	local08, #64 wz
3015c     2C 01 90 5D |  if_ne	jmp	#LR__4719
30160     18 37 E2 F8 | 	getbyte	local09, local06, #0
30164     40 36 CE F7 | 	test	local09, #64 wz
30168     30 00 90 AD |  if_e	jmp	#LR__4713
3016c     1C 26 06 F1 | 	add	local01, #28
30170     13 37 02 FB | 	rdlong	local09, local01
30174     0D 36 06 F1 | 	add	local09, #13
30178     1B 2B C2 FA | 	rdbyte	local03, local09
3017c     18 31 E2 F8 | 	getbyte	local06, local06, #0
30180     BF 30 06 F5 | 	and	local06, #191
30184     18 2D 02 F6 | 	mov	local04, local06
30188     0C 26 86 F1 | 	sub	local01, #12
3018c     13 37 02 FB | 	rdlong	local09, local01
30190     1C 26 06 F1 | 	add	local01, #28
30194     13 37 62 FC | 	wrlong	local09, local01
30198     2C 26 86 F1 | 	sub	local01, #44
3019c                 | LR__4713
3019c     18 39 E2 F8 | 	getbyte	local10, local06, #0
301a0     16 33 E2 F8 | 	getbyte	local07, local04, #0
301a4     19 39 0A F2 | 	cmp	local10, local07 wz
301a8     5C 00 90 5D |  if_ne	jmp	#LR__4714
301ac     15 35 E2 F8 | 	getbyte	local08, local03, #0
301b0     1C 26 06 F1 | 	add	local01, #28
301b4     13 33 02 FB | 	rdlong	local07, local01
301b8     1C 26 86 F1 | 	sub	local01, #28
301bc     0D 32 06 F1 | 	add	local07, #13
301c0     19 31 C2 FA | 	rdbyte	local06, local07
301c4     18 33 E2 F8 | 	getbyte	local07, local06, #0
301c8     19 35 0A F2 | 	cmp	local08, local07 wz
301cc     38 00 90 5D |  if_ne	jmp	#LR__4714
301d0     0C 28 06 F1 | 	add	local02, #12
301d4     14 13 02 FB | 	rdlong	arg01, local02
301d8     0C 28 86 F1 | 	sub	local02, #12
301dc     1C 26 06 F1 | 	add	local01, #28
301e0     13 3B 02 FB | 	rdlong	local11, local01
301e4     1C 26 86 F1 | 	sub	local01, #28
301e8     1D 15 02 F6 | 	mov	arg02, local11
301ec     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
301f0     00 FA 4D F2 | 	cmps	result1, #0 wz
301f4     16 3B 02 56 |  if_ne	mov	local11, local04
301f8     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
301fc     01 3A 86 51 |  if_ne	sub	local11, #1
30200     1D 37 02 56 |  if_ne	mov	local09, local11
30204     04 00 90 5D |  if_ne	jmp	#LR__4715
30208                 | LR__4714
30208     FF 36 06 F6 | 	mov	local09, #255
3020c                 | LR__4715
3020c     1B 2D 02 F6 | 	mov	local04, local09
30210     78 00 90 FD | 	jmp	#LR__4719
30214                 | LR__4716
30214     16 37 02 F6 | 	mov	local09, local04
30218     07 36 4E F7 | 	zerox	local09, #7 wz
3021c     20 00 90 5D |  if_ne	jmp	#LR__4717
30220     15 39 E2 F8 | 	getbyte	local10, local03, #0
30224     1C 26 06 F1 | 	add	local01, #28
30228     13 13 02 FB | 	rdlong	arg01, local01
3022c     1C 26 86 F1 | 	sub	local01, #28
30230     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
30234     FD FA E1 F8 | 	getbyte	result1, result1, #0
30238     FD 38 0A F2 | 	cmp	local10, result1 wz
3023c     60 00 90 AD |  if_e	jmp	#LR__4721
30240                 | LR__4717
30240     2B 26 06 F1 | 	add	local01, #43
30244     13 37 C2 FA | 	rdbyte	local09, local01
30248     2B 26 86 F1 | 	sub	local01, #43
3024c     01 36 CE F7 | 	test	local09, #1 wz
30250     24 00 90 5D |  if_ne	jmp	#LR__4718
30254     1C 26 06 F1 | 	add	local01, #28
30258     13 13 02 FB | 	rdlong	arg01, local01
3025c     04 26 06 F1 | 	add	local01, #4
30260     13 15 02 F6 | 	mov	arg02, local01
30264     20 26 86 F1 | 	sub	local01, #32
30268     0B 16 06 F6 | 	mov	arg03, #11
3026c     88 DA BF FD | 	call	#_fatfs_cc_memcmp
30270     00 FA 0D F2 | 	cmp	result1, #0 wz
30274     28 00 90 AD |  if_e	jmp	#LR__4721
30278                 | LR__4718
30278     FF 2C 06 F6 | 	mov	local04, #255
3027c     2C 26 06 F1 | 	add	local01, #44
30280     FF FF FF FF 
30284     13 FF 6B FC | 	wrlong	##-1, local01
30288     2C 26 86 F1 | 	sub	local01, #44
3028c                 | LR__4719
3028c                 | LR__4720
3028c     13 13 02 F6 | 	mov	arg01, local01
30290     00 14 06 F6 | 	mov	arg02, #0
30294     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
30298     FD 2E 0A F6 | 	mov	local05, result1 wz
3029c     04 FE 9F AD |  if_e	jmp	#LR__4710
302a0                 | LR__4721
302a0                 | ' 
302a0                 | ' 	return res;
302a0     17 FB 01 F6 | 	mov	result1, local05
302a4                 | LR__4722
302a4     A7 F0 03 F6 | 	mov	ptra, fp
302a8     B2 00 A0 FD | 	call	#popregs_
302ac                 | _fatfs_cc_dir_find_ret
302ac     2D 00 64 FD | 	ret
302b0                 | 
302b0                 | _fatfs_cc_dir_register
302b0     0A 4A 05 F6 | 	mov	COUNT_, #10
302b4     A8 00 A0 FD | 	call	#pushregs_
302b8     2C F0 07 F1 | 	add	ptra, #44
302bc     04 4E 05 F1 | 	add	fp, #4
302c0     A7 12 62 FC | 	wrlong	arg01, fp
302c4     09 27 02 FB | 	rdlong	local01, arg01
302c8     08 4E 05 F1 | 	add	fp, #8
302cc     A7 26 62 FC | 	wrlong	local01, fp
302d0     08 4E 85 F1 | 	sub	fp, #8
302d4     A7 28 02 FB | 	rdlong	local02, fp
302d8     04 4E 85 F1 | 	sub	fp, #4
302dc     2B 28 06 F1 | 	add	local02, #43
302e0     14 29 C2 FA | 	rdbyte	local02, local02
302e4     A0 28 CE F7 | 	test	local02, #160 wz
302e8     06 FA 05 56 |  if_ne	mov	result1, #6
302ec     F8 03 90 5D |  if_ne	jmp	#LR__4745
302f0                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
302f0     14 4E 05 F1 | 	add	fp, #20
302f4     A7 00 68 FC | 	wrlong	#0, fp
302f8     14 4E 85 F1 | 	sub	fp, #20
302fc     97 28 48 FB | 	callpa	#(@LR__4731-@LR__4730)>>2,fcache_load_ptr_
30300                 | LR__4730
30300     0C 4E 05 F1 | 	add	fp, #12
30304     A7 28 02 FB | 	rdlong	local02, fp
30308     0C 28 06 F1 | 	add	local02, #12
3030c     14 2B 02 FB | 	rdlong	local03, local02
30310     08 4E 05 F1 | 	add	fp, #8
30314     A7 2C 02 FB | 	rdlong	local04, fp
30318     14 4E 85 F1 | 	sub	fp, #20
3031c     01 2C 66 F0 | 	shl	local04, #1
30320     15 2D 02 F1 | 	add	local04, local03
30324     16 29 EA FA | 	rdword	local02, local04 wz
30328     24 00 90 AD |  if_e	jmp	#LR__4732
3032c     14 4E 05 F1 | 	add	fp, #20
30330     A7 2E 02 FB | 	rdlong	local05, fp
30334     17 31 02 F6 | 	mov	local06, local05
30338     17 33 02 F6 | 	mov	local07, local05
3033c     19 35 02 F6 | 	mov	local08, local07
30340     01 34 06 F1 | 	add	local08, #1
30344     A7 34 62 FC | 	wrlong	local08, fp
30348     14 4E 85 F1 | 	sub	fp, #20
3034c     B0 FF 9F FD | 	jmp	#LR__4730
30350                 | LR__4731
30350                 | LR__4732
30350     1C 4E 05 F1 | 	add	fp, #28
30354     A7 12 02 F6 | 	mov	arg01, fp
30358     18 4E 85 F1 | 	sub	fp, #24
3035c     A7 14 02 FB | 	rdlong	arg02, fp
30360     04 4E 85 F1 | 	sub	fp, #4
30364     20 14 06 F1 | 	add	arg02, #32
30368     0C 16 06 F6 | 	mov	arg03, #12
3036c     AC 6B BF FD | 	call	#__system____builtin_memmove
30370     27 4E 05 F1 | 	add	fp, #39
30374     A7 36 C2 FA | 	rdbyte	local09, fp
30378     27 4E 85 F1 | 	sub	fp, #39
3037c     01 36 CE F7 | 	test	local09, #1 wz
30380     F4 00 90 AD |  if_e	jmp	#LR__4735
30384     04 4E 05 F1 | 	add	fp, #4
30388     A7 38 02 FB | 	rdlong	local10, fp
3038c     2B 38 06 F1 | 	add	local10, #43
30390     1C 81 48 FC | 	wrbyte	#64, local10
30394                 | ' 		dp->fn[ 11 ] =  0x40 ;
30394                 | ' 		for (n = 1; n < 100; n++) {
30394     0C 4E 05 F1 | 	add	fp, #12
30398     A7 02 68 FC | 	wrlong	#1, fp
3039c     10 4E 85 F1 | 	sub	fp, #16
303a0                 | LR__4733
303a0     10 4E 05 F1 | 	add	fp, #16
303a4     A7 28 02 FB | 	rdlong	local02, fp
303a8     10 4E 85 F1 | 	sub	fp, #16
303ac     64 28 16 F2 | 	cmp	local02, #100 wc
303b0     70 00 90 3D |  if_ae	jmp	#LR__4734
303b4     04 4E 05 F1 | 	add	fp, #4
303b8     A7 12 02 FB | 	rdlong	arg01, fp
303bc     20 12 06 F1 | 	add	arg01, #32
303c0     18 4E 05 F1 | 	add	fp, #24
303c4     A7 14 02 F6 | 	mov	arg02, fp
303c8     10 4E 85 F1 | 	sub	fp, #16
303cc     A7 38 02 FB | 	rdlong	local10, fp
303d0     0C 38 06 F1 | 	add	local10, #12
303d4     1C 17 02 FB | 	rdlong	arg03, local10
303d8     04 4E 05 F1 | 	add	fp, #4
303dc     A7 18 02 FB | 	rdlong	arg04, fp
303e0     10 4E 85 F1 | 	sub	fp, #16
303e4     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
303e8     04 4E 05 F1 | 	add	fp, #4
303ec     A7 12 02 FB | 	rdlong	arg01, fp
303f0     04 4E 85 F1 | 	sub	fp, #4
303f4     70 FC BF FD | 	call	#_fatfs_cc_dir_find
303f8     08 4E 05 F1 | 	add	fp, #8
303fc     A7 FA 61 FC | 	wrlong	result1, fp
30400     00 FA 4D F2 | 	cmps	result1, #0 wz
30404     08 4E 85 F1 | 	sub	fp, #8
30408     18 00 90 5D |  if_ne	jmp	#LR__4734
3040c     10 4E 05 F1 | 	add	fp, #16
30410     A7 38 02 FB | 	rdlong	local10, fp
30414     01 38 06 F1 | 	add	local10, #1
30418     A7 38 62 FC | 	wrlong	local10, fp
3041c     10 4E 85 F1 | 	sub	fp, #16
30420     7C FF 9F FD | 	jmp	#LR__4733
30424                 | LR__4734
30424     10 4E 05 F1 | 	add	fp, #16
30428     A7 38 02 FB | 	rdlong	local10, fp
3042c     10 4E 85 F1 | 	sub	fp, #16
30430     64 38 0E F2 | 	cmp	local10, #100 wz
30434     07 FA 05 A6 |  if_e	mov	result1, #7
30438     AC 02 90 AD |  if_e	jmp	#LR__4745
3043c     08 4E 05 F1 | 	add	fp, #8
30440     A7 38 02 FB | 	rdlong	local10, fp
30444     08 4E 85 F1 | 	sub	fp, #8
30448     04 38 0E F2 | 	cmp	local10, #4 wz
3044c     08 4E 05 51 |  if_ne	add	fp, #8
30450     A7 FA 01 5B |  if_ne	rdlong	result1, fp
30454     08 4E 85 51 |  if_ne	sub	fp, #8
30458     8C 02 90 5D |  if_ne	jmp	#LR__4745
3045c     04 4E 05 F1 | 	add	fp, #4
30460     A7 38 02 FB | 	rdlong	local10, fp
30464     23 4E 05 F1 | 	add	fp, #35
30468     A7 26 C2 FA | 	rdbyte	local01, fp
3046c     27 4E 85 F1 | 	sub	fp, #39
30470     2B 38 06 F1 | 	add	local10, #43
30474     1C 27 42 FC | 	wrbyte	local01, local10
30478                 | LR__4735
30478     27 4E 05 F1 | 	add	fp, #39
3047c     A7 28 C2 FA | 	rdbyte	local02, fp
30480     27 4E 85 F1 | 	sub	fp, #39
30484     02 28 CE F7 | 	test	local02, #2 wz
30488     20 00 90 AD |  if_e	jmp	#LR__4736
3048c     14 4E 05 F1 | 	add	fp, #20
30490     A7 38 02 FB | 	rdlong	local10, fp
30494     0C 38 06 F1 | 	add	local10, #12
30498     0D 38 16 FD | 	qdiv	local10, #13
3049c     14 4E 85 F1 | 	sub	fp, #20
304a0     18 38 62 FD | 	getqx	local10
304a4     01 38 06 F1 | 	add	local10, #1
304a8     04 00 90 FD | 	jmp	#LR__4737
304ac                 | LR__4736
304ac     01 38 06 F6 | 	mov	local10, #1
304b0                 | LR__4737
304b0     18 4E 05 F1 | 	add	fp, #24
304b4     A7 38 62 FC | 	wrlong	local10, fp
304b8     14 4E 85 F1 | 	sub	fp, #20
304bc     A7 12 02 FB | 	rdlong	arg01, fp
304c0     1C 15 02 F6 | 	mov	arg02, local10
304c4     04 4E 85 F1 | 	sub	fp, #4
304c8     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
304cc     08 4E 05 F1 | 	add	fp, #8
304d0     A7 FA 61 FC | 	wrlong	result1, fp
304d4     08 4E 85 F1 | 	sub	fp, #8
304d8     00 FA 0D F2 | 	cmp	result1, #0 wz
304dc     38 01 90 5D |  if_ne	jmp	#LR__4742
304e0     18 4E 05 F1 | 	add	fp, #24
304e4     A7 38 02 FB | 	rdlong	local10, fp
304e8     01 38 8E F1 | 	sub	local10, #1 wz
304ec     A7 38 62 FC | 	wrlong	local10, fp
304f0     18 4E 85 F1 | 	sub	fp, #24
304f4     20 01 90 AD |  if_e	jmp	#LR__4742
304f8     04 4E 05 F1 | 	add	fp, #4
304fc     A7 38 02 FB | 	rdlong	local10, fp
30500     1C 13 02 F6 | 	mov	arg01, local10
30504     14 4E 05 F1 | 	add	fp, #20
30508     A7 18 02 FB | 	rdlong	arg04, fp
3050c     18 4E 85 F1 | 	sub	fp, #24
30510     05 18 66 F0 | 	shl	arg04, #5
30514     10 38 06 F1 | 	add	local10, #16
30518     1C 15 02 FB | 	rdlong	arg02, local10
3051c     0C 15 82 F1 | 	sub	arg02, arg04
30520     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
30524     08 4E 05 F1 | 	add	fp, #8
30528     A7 FA 61 FC | 	wrlong	result1, fp
3052c     08 4E 85 F1 | 	sub	fp, #8
30530     00 FA 0D F2 | 	cmp	result1, #0 wz
30534     E0 00 90 5D |  if_ne	jmp	#LR__4741
30538     04 4E 05 F1 | 	add	fp, #4
3053c     A7 12 02 FB | 	rdlong	arg01, fp
30540     04 4E 85 F1 | 	sub	fp, #4
30544     20 12 06 F1 | 	add	arg01, #32
30548     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
3054c     FD 38 02 F6 | 	mov	local10, result1
30550     28 4E 05 F1 | 	add	fp, #40
30554     A7 38 42 FC | 	wrbyte	local10, fp
30558     28 4E 85 F1 | 	sub	fp, #40
3055c                 | ' 			sum = sum_sfn(dp->fn);
3055c                 | ' 			do {
3055c                 | LR__4738
3055c     0C 4E 05 F1 | 	add	fp, #12
30560     A7 12 02 FB | 	rdlong	arg01, fp
30564     08 4E 85 F1 | 	sub	fp, #8
30568     A7 26 02 FB | 	rdlong	local01, fp
3056c     04 4E 85 F1 | 	sub	fp, #4
30570     18 26 06 F1 | 	add	local01, #24
30574     13 15 02 FB | 	rdlong	arg02, local01
30578     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
3057c     08 4E 05 F1 | 	add	fp, #8
30580     A7 FA 61 FC | 	wrlong	result1, fp
30584     00 FA 4D F2 | 	cmps	result1, #0 wz
30588     08 4E 85 F1 | 	sub	fp, #8
3058c     88 00 90 5D |  if_ne	jmp	#LR__4740
30590     0C 4E 05 F1 | 	add	fp, #12
30594     A7 28 02 FB | 	rdlong	local02, fp
30598     0C 28 06 F1 | 	add	local02, #12
3059c     14 13 02 FB | 	rdlong	arg01, local02
305a0     08 4E 85 F1 | 	sub	fp, #8
305a4     A7 26 02 FB | 	rdlong	local01, fp
305a8     1C 26 06 F1 | 	add	local01, #28
305ac     13 15 02 FB | 	rdlong	arg02, local01
305b0     14 4E 05 F1 | 	add	fp, #20
305b4     A7 16 02 FB | 	rdlong	arg03, fp
305b8     10 4E 05 F1 | 	add	fp, #16
305bc     A7 18 C2 FA | 	rdbyte	arg04, fp
305c0     28 4E 85 F1 | 	sub	fp, #40
305c4     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
305c8     0C 4E 05 F1 | 	add	fp, #12
305cc     A7 38 02 FB | 	rdlong	local10, fp
305d0     03 38 06 F1 | 	add	local10, #3
305d4     1C 03 48 FC | 	wrbyte	#1, local10
305d8     08 4E 85 F1 | 	sub	fp, #8
305dc     A7 12 02 FB | 	rdlong	arg01, fp
305e0     04 4E 85 F1 | 	sub	fp, #4
305e4     00 14 06 F6 | 	mov	arg02, #0
305e8     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
305ec     08 4E 05 F1 | 	add	fp, #8
305f0     A7 FA 61 FC | 	wrlong	result1, fp
305f4     00 FA 4D F2 | 	cmps	result1, #0 wz
305f8     08 4E 85 F1 | 	sub	fp, #8
305fc     18 00 90 5D |  if_ne	jmp	#LR__4739
30600     18 4E 05 F1 | 	add	fp, #24
30604     A7 38 02 FB | 	rdlong	local10, fp
30608     01 38 8E F1 | 	sub	local10, #1 wz
3060c     A7 38 62 FC | 	wrlong	local10, fp
30610     18 4E 85 F1 | 	sub	fp, #24
30614     44 FF 9F 5D |  if_ne	jmp	#LR__4738
30618                 | LR__4739
30618                 | LR__4740
30618                 | LR__4741
30618                 | LR__4742
30618     08 4E 05 F1 | 	add	fp, #8
3061c     A7 38 0A FB | 	rdlong	local10, fp wz
30620     08 4E 85 F1 | 	sub	fp, #8
30624     B4 00 90 5D |  if_ne	jmp	#LR__4744
30628     0C 4E 05 F1 | 	add	fp, #12
3062c     A7 12 02 FB | 	rdlong	arg01, fp
30630     08 4E 85 F1 | 	sub	fp, #8
30634     A7 26 02 FB | 	rdlong	local01, fp
30638     04 4E 85 F1 | 	sub	fp, #4
3063c     18 26 06 F1 | 	add	local01, #24
30640     13 15 02 FB | 	rdlong	arg02, local01
30644     18 E6 BF FD | 	call	#_fatfs_cc_move_window
30648     08 4E 05 F1 | 	add	fp, #8
3064c     A7 FA 61 FC | 	wrlong	result1, fp
30650     08 4E 85 F1 | 	sub	fp, #8
30654     00 FA 0D F2 | 	cmp	result1, #0 wz
30658     80 00 90 5D |  if_ne	jmp	#LR__4743
3065c     04 4E 05 F1 | 	add	fp, #4
30660     A7 28 02 FB | 	rdlong	local02, fp
30664     04 4E 85 F1 | 	sub	fp, #4
30668     1C 28 06 F1 | 	add	local02, #28
3066c     14 13 02 FB | 	rdlong	arg01, local02
30670     00 14 06 F6 | 	mov	arg02, #0
30674     20 16 06 F6 | 	mov	arg03, #32
30678     98 00 A0 FD | 	call	#\builtin_bytefill_
3067c     04 4E 05 F1 | 	add	fp, #4
30680     A7 14 02 FB | 	rdlong	arg02, fp
30684     0A 27 02 F6 | 	mov	local01, arg02
30688     1C 26 06 F1 | 	add	local01, #28
3068c     13 13 02 FB | 	rdlong	arg01, local01
30690     04 4E 85 F1 | 	sub	fp, #4
30694     20 14 06 F1 | 	add	arg02, #32
30698     0B 16 06 F6 | 	mov	arg03, #11
3069c     7C 68 BF FD | 	call	#__system____builtin_memmove
306a0     04 4E 05 F1 | 	add	fp, #4
306a4     A7 36 02 FB | 	rdlong	local09, fp
306a8     1B 39 02 F6 | 	mov	local10, local09
306ac     1C 38 06 F1 | 	add	local10, #28
306b0     1C 27 02 FB | 	rdlong	local01, local10
306b4     2B 36 06 F1 | 	add	local09, #43
306b8     1B 39 C2 FA | 	rdbyte	local10, local09
306bc     18 38 06 F5 | 	and	local10, #24
306c0     0C 26 06 F1 | 	add	local01, #12
306c4     13 39 42 FC | 	wrbyte	local10, local01
306c8     08 4E 05 F1 | 	add	fp, #8
306cc     A7 38 02 FB | 	rdlong	local10, fp
306d0     0C 4E 85 F1 | 	sub	fp, #12
306d4     03 38 06 F1 | 	add	local10, #3
306d8     1C 03 48 FC | 	wrbyte	#1, local10
306dc                 | LR__4743
306dc                 | LR__4744
306dc                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
306dc                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
306dc                 | ' 
306dc                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
306dc                 | ' 
306dc                 | ' 			fs->wflag = 1;
306dc                 | ' 		}
306dc                 | ' 	}
306dc                 | ' 
306dc                 | ' 	return res;
306dc     08 4E 05 F1 | 	add	fp, #8
306e0     A7 FA 01 FB | 	rdlong	result1, fp
306e4     08 4E 85 F1 | 	sub	fp, #8
306e8                 | LR__4745
306e8     A7 F0 03 F6 | 	mov	ptra, fp
306ec     B2 00 A0 FD | 	call	#popregs_
306f0                 | _fatfs_cc_dir_register_ret
306f0     2D 00 64 FD | 	ret
306f4                 | 
306f4                 | _fatfs_cc_dir_remove
306f4     05 4A 05 F6 | 	mov	COUNT_, #5
306f8     A8 00 A0 FD | 	call	#pushregs_
306fc     09 27 02 F6 | 	mov	local01, arg01
30700     13 29 02 FB | 	rdlong	local02, local01
30704     10 26 06 F1 | 	add	local01, #16
30708     13 2B 02 FB | 	rdlong	local03, local01
3070c     1C 26 06 F1 | 	add	local01, #28
30710     13 15 02 FB | 	rdlong	arg02, local01
30714     2C 26 86 F1 | 	sub	local01, #44
30718     FF FF 7F FF 
3071c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
30720     00 2C 06 A6 |  if_e	mov	local04, #0
30724     18 00 90 AD |  if_e	jmp	#LR__4750
30728     13 13 02 F6 | 	mov	arg01, local01
3072c     2C 26 06 F1 | 	add	local01, #44
30730     13 15 02 FB | 	rdlong	arg02, local01
30734     2C 26 86 F1 | 	sub	local01, #44
30738     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
3073c     FD 2C 02 F6 | 	mov	local04, result1
30740                 | LR__4750
30740     16 2F 0A F6 | 	mov	local05, local04 wz
30744     64 00 90 5D |  if_ne	jmp	#LR__4753
30748                 | ' 		do {
30748                 | LR__4751
30748     18 26 06 F1 | 	add	local01, #24
3074c     13 15 02 FB | 	rdlong	arg02, local01
30750     18 26 86 F1 | 	sub	local01, #24
30754     14 13 02 F6 | 	mov	arg01, local02
30758     04 E5 BF FD | 	call	#_fatfs_cc_move_window
3075c     FD 2E 0A F6 | 	mov	local05, result1 wz
30760     40 00 90 5D |  if_ne	jmp	#LR__4752
30764     1C 26 06 F1 | 	add	local01, #28
30768     13 2D 02 FB | 	rdlong	local04, local01
3076c     16 CB 49 FC | 	wrbyte	#229, local04
30770     03 28 06 F1 | 	add	local02, #3
30774     14 03 48 FC | 	wrbyte	#1, local02
30778     03 28 86 F1 | 	sub	local02, #3
3077c     0C 26 86 F1 | 	sub	local01, #12
30780     13 2D 02 FB | 	rdlong	local04, local01
30784     10 26 86 F1 | 	sub	local01, #16
30788     15 2D 12 F2 | 	cmp	local04, local03 wc
3078c     14 00 90 3D |  if_ae	jmp	#LR__4752
30790     13 13 02 F6 | 	mov	arg01, local01
30794     00 14 06 F6 | 	mov	arg02, #0
30798     90 EF BF FD | 	call	#_fatfs_cc_dir_next
3079c     FD 2E 0A F6 | 	mov	local05, result1 wz
307a0     A4 FF 9F AD |  if_e	jmp	#LR__4751
307a4                 | LR__4752
307a4     04 2E 0E F2 | 	cmp	local05, #4 wz
307a8     02 2E 06 A6 |  if_e	mov	local05, #2
307ac                 | LR__4753
307ac                 | ' 	}
307ac                 | ' #line 2590 "ff.c"
307ac                 | ' 	return res;
307ac     17 FB 01 F6 | 	mov	result1, local05
307b0     A7 F0 03 F6 | 	mov	ptra, fp
307b4     B2 00 A0 FD | 	call	#popregs_
307b8                 | _fatfs_cc_dir_remove_ret
307b8     2D 00 64 FD | 	ret
307bc                 | 
307bc                 | _fatfs_cc_get_fileinfo
307bc     0F 4A 05 F6 | 	mov	COUNT_, #15
307c0     A8 00 A0 FD | 	call	#pushregs_
307c4     09 27 02 F6 | 	mov	local01, arg01
307c8     0A 29 02 F6 | 	mov	local02, arg02
307cc     13 2B 02 FB | 	rdlong	local03, local01
307d0     1C 28 06 F1 | 	add	local02, #28
307d4     14 01 48 FC | 	wrbyte	#0, local02
307d8     1C 28 86 F1 | 	sub	local02, #28
307dc     18 26 06 F1 | 	add	local01, #24
307e0     13 2D 0A FB | 	rdlong	local04, local01 wz
307e4     18 26 86 F1 | 	sub	local01, #24
307e8     90 03 90 AD |  if_e	jmp	#LR__4774
307ec     2C 26 06 F1 | 	add	local01, #44
307f0     13 2D 02 FB | 	rdlong	local04, local01
307f4     2C 26 86 F1 | 	sub	local01, #44
307f8     FF FF 7F FF 
307fc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
30800     D8 00 90 AD |  if_e	jmp	#LR__4763
30804     00 2E 06 F6 | 	mov	local05, #0
30808     00 30 06 F6 | 	mov	local06, #0
3080c     00 32 06 F6 | 	mov	local07, #0
30810                 | ' 			si = di = 0;
30810                 | ' 			hs = 0;
30810                 | ' 			while (fs->lfnbuf[si] != 0) {
30810                 | LR__4760
30810     0C 2A 06 F1 | 	add	local03, #12
30814     15 2D 02 FB | 	rdlong	local04, local03
30818     0C 2A 86 F1 | 	sub	local03, #12
3081c     18 35 02 F6 | 	mov	local08, local06
30820     01 34 66 F0 | 	shl	local08, #1
30824     16 35 02 F1 | 	add	local08, local04
30828     1A 2D EA FA | 	rdword	local04, local08 wz
3082c     90 00 90 AD |  if_e	jmp	#LR__4762
30830     0C 2A 06 F1 | 	add	local03, #12
30834     15 37 02 FB | 	rdlong	local09, local03
30838     0C 2A 86 F1 | 	sub	local03, #12
3083c     18 39 02 F6 | 	mov	local10, local06
30840     01 38 66 F0 | 	shl	local10, #1
30844     1B 39 02 F1 | 	add	local10, local09
30848     1C 3B E2 FA | 	rdword	local11, local10
3084c     19 2D 02 F6 | 	mov	local04, local07
30850     0F 2C 4E F7 | 	zerox	local04, #15 wz
30854     01 30 06 F1 | 	add	local06, #1
30858     24 00 90 5D |  if_ne	jmp	#LR__4761
3085c     1D 3D 32 F9 | 	getword	local12, local11, #0
30860     6C 00 00 FF 
30864     00 3C 16 F2 | 	cmp	local12, ##55296 wc
30868     14 00 90 CD |  if_b	jmp	#LR__4761
3086c     1D 3F 32 F9 | 	getword	local13, local11, #0
30870     70 00 00 FF 
30874     00 3E 16 F2 | 	cmp	local13, ##57344 wc
30878     1D 33 02 C6 |  if_b	mov	local07, local11
3087c                 | ' 					hs = wc; continue;
3087c     90 FF 9F CD |  if_b	jmp	#LR__4760
30880                 | LR__4761
30880     19 13 32 F9 | 	getword	arg01, local07, #0
30884     10 12 66 F0 | 	shl	arg01, #16
30888     1D 3B 32 F9 | 	getword	local11, local11, #0
3088c     1D 13 42 F5 | 	or	arg01, local11
30890     17 15 02 F6 | 	mov	arg02, local05
30894     1C 28 06 F1 | 	add	local02, #28
30898     14 15 02 F1 | 	add	arg02, local02
3089c     FF 16 06 F6 | 	mov	arg03, #255
308a0     17 17 82 F1 | 	sub	arg03, local05
308a4     1C 28 86 F1 | 	sub	local02, #28
308a8     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
308ac     FD 40 0A F6 | 	mov	local14, result1 wz
308b0     00 2E 06 A6 |  if_e	mov	local05, #0
308b4     20 2F 02 51 |  if_ne	add	local05, local14
308b8     00 32 06 56 |  if_ne	mov	local07, #0
308bc     50 FF 9F 5D |  if_ne	jmp	#LR__4760
308c0                 | LR__4762
308c0     19 2D 02 F6 | 	mov	local04, local07
308c4     0F 2C 4E F7 | 	zerox	local04, #15 wz
308c8     00 2E 06 56 |  if_ne	mov	local05, #0
308cc     1C 28 06 F1 | 	add	local02, #28
308d0     14 2F 02 F1 | 	add	local05, local02
308d4     17 01 48 FC | 	wrbyte	#0, local05
308d8     1C 28 86 F1 | 	sub	local02, #28
308dc                 | LR__4763
308dc     00 2E 06 F6 | 	mov	local05, #0
308e0     00 30 06 F6 | 	mov	local06, #0
308e4                 | ' 			fno->fname[di] = 0;
308e4                 | ' 		}
308e4                 | ' 	}
308e4                 | ' 
308e4                 | ' 	si = di = 0;
308e4                 | ' 	while (si < 11) {
308e4                 | LR__4764
308e4     0B 30 16 F2 | 	cmp	local06, #11 wc
308e8     20 01 90 3D |  if_ae	jmp	#LR__4767
308ec     1C 26 06 F1 | 	add	local01, #28
308f0     13 37 02 FB | 	rdlong	local09, local01
308f4     1C 26 86 F1 | 	sub	local01, #28
308f8     18 39 02 F6 | 	mov	local10, local06
308fc     1B 39 02 F1 | 	add	local10, local09
30900     1C 3B C2 FA | 	rdbyte	local11, local10
30904     1D 2D 32 F9 | 	getword	local04, local11, #0
30908     20 2C 0E F2 | 	cmp	local04, #32 wz
3090c     01 30 06 F1 | 	add	local06, #1
30910     D0 FF 9F AD |  if_e	jmp	#LR__4764
30914     1D 2D 32 F9 | 	getword	local04, local11, #0
30918     05 2C 0E F2 | 	cmp	local04, #5 wz
3091c     E5 3A 06 A6 |  if_e	mov	local11, #229
30920     09 30 0E F2 | 	cmp	local06, #9 wz
30924     20 00 90 5D |  if_ne	jmp	#LR__4765
30928     0C 2E 16 F2 | 	cmp	local05, #12 wc
3092c     18 00 90 3D |  if_ae	jmp	#LR__4765
30930     17 3F 02 F6 | 	mov	local13, local05
30934     0C 28 06 F1 | 	add	local02, #12
30938     14 3F 02 F1 | 	add	local13, local02
3093c     1F 5D 48 FC | 	wrbyte	#46, local13
30940     01 2E 06 F1 | 	add	local05, #1
30944     0C 28 86 F1 | 	sub	local02, #12
30948                 | LR__4765
30948     1D 13 32 F9 | 	getword	arg01, local11, #0
3094c     07 12 4E F7 | 	zerox	arg01, #7 wz
30950     00 FA 05 56 |  if_ne	mov	result1, #0
30954                 | ' 
30954                 | ' 	return 0;
30954     00 FA 05 A6 |  if_e	mov	result1, #0
30958     00 FA 0D F2 | 	cmp	result1, #0 wz
3095c     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
30960     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
30964     50 00 90 AD |  if_e	jmp	#LR__4766
30968     1C 26 06 F1 | 	add	local01, #28
3096c     13 39 02 FB | 	rdlong	local10, local01
30970     1C 26 86 F1 | 	sub	local01, #28
30974     18 35 02 F6 | 	mov	local08, local06
30978     1C 35 02 F1 | 	add	local08, local10
3097c     1A 13 CA FA | 	rdbyte	arg01, local08 wz
30980     00 FA 05 56 |  if_ne	mov	result1, #0
30984                 | ' 
30984                 | ' 	return 0;
30984     00 FA 05 A6 |  if_e	mov	result1, #0
30988     00 FA 0D F2 | 	cmp	result1, #0 wz
3098c     28 00 90 AD |  if_e	jmp	#LR__4766
30990     1D 3B 32 F9 | 	getword	local11, local11, #0
30994     08 3A 66 F0 | 	shl	local11, #8
30998     1C 26 06 F1 | 	add	local01, #28
3099c     13 41 02 FB | 	rdlong	local14, local01
309a0     1C 26 86 F1 | 	sub	local01, #28
309a4     18 37 02 F6 | 	mov	local09, local06
309a8     20 37 02 F1 | 	add	local09, local14
309ac     1B 3D C2 FA | 	rdbyte	local12, local09
309b0     1E 3B 42 F5 | 	or	local11, local12
309b4     01 30 06 F1 | 	add	local06, #1
309b8                 | LR__4766
309b8     1D 13 02 F6 | 	mov	arg01, local11
309bc     01 00 00 FF 
309c0     52 15 06 F6 | 	mov	arg02, ##850
309c4     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
309c8     FD 3A 02 F6 | 	mov	local11, result1
309cc     1D 2D 02 F6 | 	mov	local04, local11
309d0     0F 2C 4E F7 | 	zerox	local04, #15 wz
309d4     00 2E 06 A6 |  if_e	mov	local05, #0
309d8     30 00 90 AD |  if_e	jmp	#LR__4767
309dc     1D 13 32 F9 | 	getword	arg01, local11, #0
309e0     17 15 02 F6 | 	mov	arg02, local05
309e4     0C 28 06 F1 | 	add	local02, #12
309e8     14 15 02 F1 | 	add	arg02, local02
309ec     0C 16 06 F6 | 	mov	arg03, #12
309f0     17 17 82 F1 | 	sub	arg03, local05
309f4     0C 28 86 F1 | 	sub	local02, #12
309f8     EC DF BF FD | 	call	#_fatfs_cc_put_utf
309fc     FD 40 0A F6 | 	mov	local14, result1 wz
30a00     00 2E 06 A6 |  if_e	mov	local05, #0
30a04     20 2F 02 51 |  if_ne	add	local05, local14
30a08     D8 FE 9F 5D |  if_ne	jmp	#LR__4764
30a0c                 | LR__4767
30a0c     17 2D 02 F6 | 	mov	local04, local05
30a10     0C 28 06 F1 | 	add	local02, #12
30a14     14 2D 02 F1 | 	add	local04, local02
30a18     16 01 48 FC | 	wrbyte	#0, local04
30a1c     10 28 06 F1 | 	add	local02, #16
30a20     14 2D CA FA | 	rdbyte	local04, local02 wz
30a24     1C 28 86 F1 | 	sub	local02, #28
30a28     F8 00 90 5D |  if_ne	jmp	#LR__4773
30a2c     00 2E 0E F2 | 	cmp	local05, #0 wz
30a30     1C 00 90 5D |  if_ne	jmp	#LR__4768
30a34     17 3F 02 F6 | 	mov	local13, local05
30a38     1C 28 06 F1 | 	add	local02, #28
30a3c     14 3F 02 F1 | 	add	local13, local02
30a40     1F 7F 48 FC | 	wrbyte	#63, local13
30a44     01 2E 06 F1 | 	add	local05, #1
30a48     1C 28 86 F1 | 	sub	local02, #28
30a4c     A4 00 90 FD | 	jmp	#LR__4772
30a50                 | LR__4768
30a50                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
30a50     00 2E 06 F6 | 	mov	local05, #0
30a54     00 30 06 F6 | 	mov	local06, #0
30a58     08 42 06 F6 | 	mov	local15, #8
30a5c                 | LR__4769
30a5c     18 2D 02 F6 | 	mov	local04, local06
30a60     0C 28 06 F1 | 	add	local02, #12
30a64     14 2D 02 F1 | 	add	local04, local02
30a68     16 3F CA FA | 	rdbyte	local13, local04 wz
30a6c     0C 28 86 F1 | 	sub	local02, #12
30a70     80 00 90 AD |  if_e	jmp	#LR__4771
30a74     18 35 02 F6 | 	mov	local08, local06
30a78     0C 28 06 F1 | 	add	local02, #12
30a7c     14 35 02 F1 | 	add	local08, local02
30a80     1A 3B C2 FA | 	rdbyte	local11, local08
30a84     1D 41 32 F9 | 	getword	local14, local11, #0
30a88     2E 40 0E F2 | 	cmp	local14, #46 wz
30a8c     0C 28 86 F1 | 	sub	local02, #12
30a90     10 42 06 A6 |  if_e	mov	local15, #16
30a94     1D 41 32 F9 | 	getword	local14, local11, #0
30a98     41 40 16 F2 | 	cmp	local14, #65 wc
30a9c     30 00 90 CD |  if_b	jmp	#LR__4770
30aa0     1D 35 32 F9 | 	getword	local08, local11, #0
30aa4     5B 34 16 F2 | 	cmp	local08, #91 wc
30aa8     24 00 90 3D |  if_ae	jmp	#LR__4770
30aac     1C 26 06 F1 | 	add	local01, #28
30ab0     13 37 02 FB | 	rdlong	local09, local01
30ab4     1C 26 86 F1 | 	sub	local01, #28
30ab8     0C 36 06 F1 | 	add	local09, #12
30abc     1B 39 C2 FA | 	rdbyte	local10, local09
30ac0     21 41 E2 F8 | 	getbyte	local14, local15, #0
30ac4     20 39 CA F7 | 	test	local10, local14 wz
30ac8     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
30acc     20 3A 06 51 |  if_ne	add	local11, #32
30ad0                 | LR__4770
30ad0     17 41 02 F6 | 	mov	local14, local05
30ad4     1C 28 06 F1 | 	add	local02, #28
30ad8     14 41 02 F1 | 	add	local14, local02
30adc     1D 3B 32 F9 | 	getword	local11, local11, #0
30ae0     20 3B 42 FC | 	wrbyte	local11, local14
30ae4     01 30 06 F1 | 	add	local06, #1
30ae8     01 2E 06 F1 | 	add	local05, #1
30aec     1C 28 86 F1 | 	sub	local02, #28
30af0     68 FF 9F FD | 	jmp	#LR__4769
30af4                 | LR__4771
30af4                 | LR__4772
30af4     1C 28 06 F1 | 	add	local02, #28
30af8     14 2F 02 F1 | 	add	local05, local02
30afc     17 01 48 FC | 	wrbyte	#0, local05
30b00     1C 26 06 F1 | 	add	local01, #28
30b04     13 2D 02 FB | 	rdlong	local04, local01
30b08     1C 26 86 F1 | 	sub	local01, #28
30b0c     0C 2C 06 F1 | 	add	local04, #12
30b10     16 3F CA FA | 	rdbyte	local13, local04 wz
30b14     1C 28 86 F1 | 	sub	local02, #28
30b18     0C 28 06 A1 |  if_e	add	local02, #12
30b1c     14 01 48 AC |  if_e	wrbyte	#0, local02
30b20     0C 28 86 A1 |  if_e	sub	local02, #12
30b24                 | LR__4773
30b24     1C 26 06 F1 | 	add	local01, #28
30b28     13 3D 02 FB | 	rdlong	local12, local01
30b2c     0B 3C 06 F1 | 	add	local12, #11
30b30     1E 2D C2 FA | 	rdbyte	local04, local12
30b34     3F 2C 06 F5 | 	and	local04, #63
30b38     08 28 06 F1 | 	add	local02, #8
30b3c     14 2D 42 FC | 	wrbyte	local04, local02
30b40     08 28 86 F1 | 	sub	local02, #8
30b44     13 13 02 FB | 	rdlong	arg01, local01
30b48     1C 12 06 F1 | 	add	arg01, #28
30b4c                 | ' {
30b4c                 | ' 
30b4c                 | ' 	return *((DWORD*)ptr);
30b4c     09 FB 01 FB | 	rdlong	result1, arg01
30b50     14 FB 61 FC | 	wrlong	result1, local02
30b54     13 13 02 FB | 	rdlong	arg01, local01
30b58     16 12 06 F1 | 	add	arg01, #22
30b5c                 | ' {
30b5c                 | ' 
30b5c                 | ' 	return *((WORD*)ptr);
30b5c     09 FB E1 FA | 	rdword	result1, arg01
30b60     06 28 06 F1 | 	add	local02, #6
30b64     14 FB 51 FC | 	wrword	result1, local02
30b68     13 13 02 FB | 	rdlong	arg01, local01
30b6c     18 12 06 F1 | 	add	arg01, #24
30b70                 | ' {
30b70                 | ' 
30b70                 | ' 	return *((WORD*)ptr);
30b70     09 FB E1 FA | 	rdword	result1, arg01
30b74     02 28 86 F1 | 	sub	local02, #2
30b78     14 FB 51 FC | 	wrword	result1, local02
30b7c                 | LR__4774
30b7c     A7 F0 03 F6 | 	mov	ptra, fp
30b80     B2 00 A0 FD | 	call	#popregs_
30b84                 | _fatfs_cc_get_fileinfo_ret
30b84     2D 00 64 FD | 	ret
30b88                 | 
30b88                 | _fatfs_cc_create_name
30b88     0D 4A 05 F6 | 	mov	COUNT_, #13
30b8c     A8 00 A0 FD | 	call	#pushregs_
30b90     34 F0 07 F1 | 	add	ptra, #52
30b94     04 4E 05 F1 | 	add	fp, #4
30b98     A7 12 62 FC | 	wrlong	arg01, fp
30b9c     04 4E 05 F1 | 	add	fp, #4
30ba0     A7 14 62 FC | 	wrlong	arg02, fp
30ba4     0A FB 01 FB | 	rdlong	result1, arg02
30ba8     28 4E 05 F1 | 	add	fp, #40
30bac     A7 FA 61 FC | 	wrlong	result1, fp
30bb0     2C 4E 85 F1 | 	sub	fp, #44
30bb4     A7 FA 01 FB | 	rdlong	result1, fp
30bb8     FD 26 02 FB | 	rdlong	local01, result1
30bbc     0C 26 06 F1 | 	add	local01, #12
30bc0     13 29 02 FB | 	rdlong	local02, local01
30bc4     14 4E 05 F1 | 	add	fp, #20
30bc8     A7 28 62 FC | 	wrlong	local02, fp
30bcc     14 4E 05 F1 | 	add	fp, #20
30bd0     A7 00 68 FC | 	wrlong	#0, fp
30bd4     2C 4E 85 F1 | 	sub	fp, #44
30bd8                 | ' 
30bd8                 | ' 
30bd8                 | ' 
30bd8                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
30bd8                 | ' 	for (;;) {
30bd8                 | LR__4780
30bd8     30 4E 05 F1 | 	add	fp, #48
30bdc     A7 12 02 F6 | 	mov	arg01, fp
30be0     30 4E 85 F1 | 	sub	fp, #48
30be4     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
30be8     1C 4E 05 F1 | 	add	fp, #28
30bec     A7 FA 61 FC | 	wrlong	result1, fp
30bf0     1C 4E 85 F1 | 	sub	fp, #28
30bf4     FF FF 7F FF 
30bf8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
30bfc     06 FA 05 A6 |  if_e	mov	result1, #6
30c00     74 08 90 AD |  if_e	jmp	#LR__4820
30c04     1C 4E 05 F1 | 	add	fp, #28
30c08     A7 26 02 FB | 	rdlong	local01, fp
30c0c     1C 4E 85 F1 | 	sub	fp, #28
30c10     80 00 00 FF 
30c14     00 26 16 F2 | 	cmp	local01, ##65536 wc
30c18     3C 00 90 CD |  if_b	jmp	#LR__4781
30c1c     18 4E 05 F1 | 	add	fp, #24
30c20     A7 2A 02 FB | 	rdlong	local03, fp
30c24     14 4E 05 F1 | 	add	fp, #20
30c28     A7 26 02 FB | 	rdlong	local01, fp
30c2c     13 2D 02 F6 | 	mov	local04, local01
30c30     01 2C 06 F1 | 	add	local04, #1
30c34     A7 2C 62 FC | 	wrlong	local04, fp
30c38     01 26 66 F0 | 	shl	local01, #1
30c3c     15 27 02 F1 | 	add	local01, local03
30c40     10 4E 85 F1 | 	sub	fp, #16
30c44     A7 2E 02 FB | 	rdlong	local05, fp
30c48     1C 4E 85 F1 | 	sub	fp, #28
30c4c     17 31 02 F6 | 	mov	local06, local05
30c50     10 30 46 F0 | 	shr	local06, #16
30c54     13 31 52 FC | 	wrword	local06, local01
30c58                 | LR__4781
30c58     1C 4E 05 F1 | 	add	fp, #28
30c5c     A7 26 02 FB | 	rdlong	local01, fp
30c60     08 4E 85 F1 | 	sub	fp, #8
30c64     A7 26 52 FC | 	wrword	local01, fp
30c68     A7 26 E2 FA | 	rdword	local01, fp
30c6c     14 4E 85 F1 | 	sub	fp, #20
30c70     20 26 16 F2 | 	cmp	local01, #32 wc
30c74     B0 00 90 CD |  if_b	jmp	#LR__4783
30c78     14 4E 05 F1 | 	add	fp, #20
30c7c     A7 26 E2 FA | 	rdword	local01, fp
30c80     14 4E 85 F1 | 	sub	fp, #20
30c84     2F 26 0E F2 | 	cmp	local01, #47 wz
30c88     14 4E 05 51 |  if_ne	add	fp, #20
30c8c     A7 2C E2 5A |  if_ne	rdword	local04, fp
30c90     14 4E 85 51 |  if_ne	sub	fp, #20
30c94     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
30c98     8C 00 90 AD |  if_e	jmp	#LR__4783
30c9c     14 4E 05 F1 | 	add	fp, #20
30ca0     A7 12 E2 FA | 	rdword	arg01, fp
30ca4     14 4E 85 F1 | 	sub	fp, #20
30ca8     80 12 16 F2 | 	cmp	arg01, #128 wc
30cac     24 00 90 3D |  if_ae	jmp	#LR__4782
30cb0     B5 01 00 FF 
30cb4     E8 13 06 F6 | 	mov	arg01, ##@LR__5442
30cb8     14 4E 05 F1 | 	add	fp, #20
30cbc     A7 14 E2 FA | 	rdword	arg02, fp
30cc0     14 4E 85 F1 | 	sub	fp, #20
30cc4     FC D0 BF FD | 	call	#_fatfs_cc_strchr
30cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
30ccc     06 FA 05 56 |  if_ne	mov	result1, #6
30cd0     A4 07 90 5D |  if_ne	jmp	#LR__4820
30cd4                 | LR__4782
30cd4     2C 4E 05 F1 | 	add	fp, #44
30cd8     A7 30 02 FB | 	rdlong	local06, fp
30cdc     2C 4E 85 F1 | 	sub	fp, #44
30ce0     FF 30 16 F2 | 	cmp	local06, #255 wc
30ce4     06 FA 05 36 |  if_ae	mov	result1, #6
30ce8     8C 07 90 3D |  if_ae	jmp	#LR__4820
30cec     18 4E 05 F1 | 	add	fp, #24
30cf0     A7 2A 02 FB | 	rdlong	local03, fp
30cf4     14 4E 05 F1 | 	add	fp, #20
30cf8     A7 28 02 FB | 	rdlong	local02, fp
30cfc     14 2D 02 F6 | 	mov	local04, local02
30d00     01 2C 06 F1 | 	add	local04, #1
30d04     A7 2C 62 FC | 	wrlong	local04, fp
30d08     14 27 02 F6 | 	mov	local01, local02
30d0c     01 26 66 F0 | 	shl	local01, #1
30d10     15 27 02 F1 | 	add	local01, local03
30d14     18 4E 85 F1 | 	sub	fp, #24
30d18     A7 30 E2 FA | 	rdword	local06, fp
30d1c     14 4E 85 F1 | 	sub	fp, #20
30d20     13 31 52 FC | 	wrword	local06, local01
30d24     B0 FE 9F FD | 	jmp	#LR__4780
30d28                 | LR__4783
30d28     14 4E 05 F1 | 	add	fp, #20
30d2c     A7 32 E2 FA | 	rdword	local07, fp
30d30     14 4E 85 F1 | 	sub	fp, #20
30d34     20 32 16 F2 | 	cmp	local07, #32 wc
30d38     10 4E 05 C1 |  if_b	add	fp, #16
30d3c     A7 08 48 CC |  if_b	wrbyte	#4, fp
30d40     10 4E 85 C1 |  if_b	sub	fp, #16
30d44     74 00 90 CD |  if_b	jmp	#LR__4788
30d48     97 24 48 FB | 	callpa	#(@LR__4786-@LR__4784)>>2,fcache_load_ptr_
30d4c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
30d4c                 | LR__4784
30d4c     30 4E 05 F1 | 	add	fp, #48
30d50     A7 2C 02 FB | 	rdlong	local04, fp
30d54     30 4E 85 F1 | 	sub	fp, #48
30d58     16 33 C2 FA | 	rdbyte	local07, local04
30d5c     2F 32 0E F2 | 	cmp	local07, #47 wz
30d60     18 00 90 AD |  if_e	jmp	#LR__4785
30d64     30 4E 05 F1 | 	add	fp, #48
30d68     A7 2C 02 FB | 	rdlong	local04, fp
30d6c     30 4E 85 F1 | 	sub	fp, #48
30d70     16 29 C2 FA | 	rdbyte	local02, local04
30d74     5C 28 0E F2 | 	cmp	local02, #92 wz
30d78     18 00 90 5D |  if_ne	jmp	#LR__4787
30d7c                 | LR__4785
30d7c     30 4E 05 F1 | 	add	fp, #48
30d80     A7 26 02 FB | 	rdlong	local01, fp
30d84     01 26 06 F1 | 	add	local01, #1
30d88     A7 26 62 FC | 	wrlong	local01, fp
30d8c     30 4E 85 F1 | 	sub	fp, #48
30d90     B8 FF 9F FD | 	jmp	#LR__4784
30d94                 | LR__4786
30d94                 | LR__4787
30d94     10 4E 05 F1 | 	add	fp, #16
30d98     A7 00 48 FC | 	wrbyte	#0, fp
30d9c     20 4E 05 F1 | 	add	fp, #32
30da0     A7 30 02 FB | 	rdlong	local06, fp
30da4     30 4E 85 F1 | 	sub	fp, #48
30da8     18 33 C2 FA | 	rdbyte	local07, local06
30dac     20 32 16 F2 | 	cmp	local07, #32 wc
30db0     10 4E 05 C1 |  if_b	add	fp, #16
30db4     A7 08 48 CC |  if_b	wrbyte	#4, fp
30db8     10 4E 85 C1 |  if_b	sub	fp, #16
30dbc                 | LR__4788
30dbc     08 4E 05 F1 | 	add	fp, #8
30dc0     A7 32 02 FB | 	rdlong	local07, fp
30dc4     28 4E 05 F1 | 	add	fp, #40
30dc8     A7 26 02 FB | 	rdlong	local01, fp
30dcc     30 4E 85 F1 | 	sub	fp, #48
30dd0     19 27 62 FC | 	wrlong	local01, local07
30dd4     97 38 48 FB | 	callpa	#(@LR__4790-@LR__4789)>>2,fcache_load_ptr_
30dd8                 | ' 	}
30dd8                 | ' 	*path = p;
30dd8                 | ' #line 2862 "ff.c"
30dd8                 | ' 	while (di) {
30dd8                 | LR__4789
30dd8     2C 4E 05 F1 | 	add	fp, #44
30ddc     A7 32 0A FB | 	rdlong	local07, fp wz
30de0     2C 4E 85 F1 | 	sub	fp, #44
30de4     60 00 90 AD |  if_e	jmp	#LR__4791
30de8     18 4E 05 F1 | 	add	fp, #24
30dec     A7 30 02 FB | 	rdlong	local06, fp
30df0     14 4E 05 F1 | 	add	fp, #20
30df4     A7 2C 02 FB | 	rdlong	local04, fp
30df8     01 2C 86 F1 | 	sub	local04, #1
30dfc     01 2C 66 F0 | 	shl	local04, #1
30e00     18 2D 02 F1 | 	add	local04, local06
30e04     16 31 E2 FA | 	rdword	local06, local04
30e08     18 4E 85 F1 | 	sub	fp, #24
30e0c     A7 30 52 FC | 	wrword	local06, fp
30e10     A7 32 E2 FA | 	rdword	local07, fp
30e14     14 4E 85 F1 | 	sub	fp, #20
30e18     20 32 0E F2 | 	cmp	local07, #32 wz
30e1c     14 4E 05 51 |  if_ne	add	fp, #20
30e20     A7 26 E2 5A |  if_ne	rdword	local01, fp
30e24     14 4E 85 51 |  if_ne	sub	fp, #20
30e28     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
30e2c     18 00 90 5D |  if_ne	jmp	#LR__4791
30e30     2C 4E 05 F1 | 	add	fp, #44
30e34     A7 26 02 FB | 	rdlong	local01, fp
30e38     01 26 86 F1 | 	sub	local01, #1
30e3c     A7 26 62 FC | 	wrlong	local01, fp
30e40     2C 4E 85 F1 | 	sub	fp, #44
30e44     90 FF 9F FD | 	jmp	#LR__4789
30e48                 | LR__4790
30e48                 | LR__4791
30e48     18 4E 05 F1 | 	add	fp, #24
30e4c     A7 34 02 FB | 	rdlong	local08, fp
30e50     14 4E 05 F1 | 	add	fp, #20
30e54     A7 2C 02 FB | 	rdlong	local04, fp
30e58     01 2C 66 F0 | 	shl	local04, #1
30e5c     1A 2D 02 F1 | 	add	local04, local08
30e60     16 01 58 FC | 	wrword	#0, local04
30e64     A7 32 0A FB | 	rdlong	local07, fp wz
30e68     2C 4E 85 F1 | 	sub	fp, #44
30e6c     06 FA 05 A6 |  if_e	mov	result1, #6
30e70     04 06 90 AD |  if_e	jmp	#LR__4820
30e74                 | ' 
30e74                 | ' 
30e74                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
30e74     28 4E 05 F1 | 	add	fp, #40
30e78     A7 00 68 FC | 	wrlong	#0, fp
30e7c     28 4E 85 F1 | 	sub	fp, #40
30e80     97 22 48 FB | 	callpa	#(@LR__4793-@LR__4792)>>2,fcache_load_ptr_
30e84                 | LR__4792
30e84     18 4E 05 F1 | 	add	fp, #24
30e88     A7 36 02 FB | 	rdlong	local09, fp
30e8c     10 4E 05 F1 | 	add	fp, #16
30e90     A7 38 02 FB | 	rdlong	local10, fp
30e94     28 4E 85 F1 | 	sub	fp, #40
30e98     01 38 66 F0 | 	shl	local10, #1
30e9c     1B 39 02 F1 | 	add	local10, local09
30ea0     1C 3B E2 FA | 	rdword	local11, local10
30ea4     20 3A 0E F2 | 	cmp	local11, #32 wz
30ea8     1C 00 90 5D |  if_ne	jmp	#LR__4794
30eac     28 4E 05 F1 | 	add	fp, #40
30eb0     A7 3C 02 FB | 	rdlong	local12, fp
30eb4     1E 2F 02 F6 | 	mov	local05, local12
30eb8     01 2E 06 F1 | 	add	local05, #1
30ebc     A7 2E 62 FC | 	wrlong	local05, fp
30ec0     28 4E 85 F1 | 	sub	fp, #40
30ec4     BC FF 9F FD | 	jmp	#LR__4792
30ec8                 | LR__4793
30ec8                 | LR__4794
30ec8     28 4E 05 F1 | 	add	fp, #40
30ecc     A7 32 02 FB | 	rdlong	local07, fp
30ed0     28 4E 85 F1 | 	sub	fp, #40
30ed4     01 32 16 F2 | 	cmp	local07, #1 wc
30ed8     28 00 90 3D |  if_ae	jmp	#LR__4795
30edc     18 4E 05 F1 | 	add	fp, #24
30ee0     A7 2A 02 FB | 	rdlong	local03, fp
30ee4     10 4E 05 F1 | 	add	fp, #16
30ee8     A7 36 02 FB | 	rdlong	local09, fp
30eec     28 4E 85 F1 | 	sub	fp, #40
30ef0     01 36 66 F0 | 	shl	local09, #1
30ef4     15 37 02 F1 | 	add	local09, local03
30ef8     1B 27 E2 FA | 	rdword	local01, local09
30efc     2E 26 0E F2 | 	cmp	local01, #46 wz
30f00     14 00 90 5D |  if_ne	jmp	#LR__4796
30f04                 | LR__4795
30f04     10 4E 05 F1 | 	add	fp, #16
30f08     A7 32 C2 FA | 	rdbyte	local07, fp
30f0c     03 32 46 F5 | 	or	local07, #3
30f10     A7 32 42 FC | 	wrbyte	local07, fp
30f14     10 4E 85 F1 | 	sub	fp, #16
30f18                 | LR__4796
30f18     97 2C 48 FB | 	callpa	#(@LR__4798-@LR__4797)>>2,fcache_load_ptr_
30f1c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
30f1c                 | LR__4797
30f1c     2C 4E 05 F1 | 	add	fp, #44
30f20     A7 32 02 FB | 	rdlong	local07, fp
30f24     2C 4E 85 F1 | 	sub	fp, #44
30f28     01 32 16 F2 | 	cmp	local07, #1 wc
30f2c     44 00 90 CD |  if_b	jmp	#LR__4799
30f30     18 4E 05 F1 | 	add	fp, #24
30f34     A7 30 02 FB | 	rdlong	local06, fp
30f38     14 4E 05 F1 | 	add	fp, #20
30f3c     A7 2A 02 FB | 	rdlong	local03, fp
30f40     2C 4E 85 F1 | 	sub	fp, #44
30f44     01 2A 86 F1 | 	sub	local03, #1
30f48     01 2A 66 F0 | 	shl	local03, #1
30f4c     18 2B 02 F1 | 	add	local03, local06
30f50     15 27 E2 FA | 	rdword	local01, local03
30f54     2E 26 0E F2 | 	cmp	local01, #46 wz
30f58     18 00 90 AD |  if_e	jmp	#LR__4799
30f5c     2C 4E 05 F1 | 	add	fp, #44
30f60     A7 26 02 FB | 	rdlong	local01, fp
30f64     01 26 86 F1 | 	sub	local01, #1
30f68     A7 26 62 FC | 	wrlong	local01, fp
30f6c     2C 4E 85 F1 | 	sub	fp, #44
30f70     A8 FF 9F FD | 	jmp	#LR__4797
30f74                 | LR__4798
30f74                 | LR__4799
30f74     04 4E 05 F1 | 	add	fp, #4
30f78     A7 12 02 FB | 	rdlong	arg01, fp
30f7c     04 4E 85 F1 | 	sub	fp, #4
30f80     20 12 06 F1 | 	add	arg01, #32
30f84     20 14 06 F6 | 	mov	arg02, #32
30f88     0B 16 06 F6 | 	mov	arg03, #11
30f8c     09 3F 02 F6 | 	mov	local13, arg01
30f90     98 00 A0 FD | 	call	#\builtin_bytefill_
30f94     1F FB 01 F6 | 	mov	result1, local13
30f98     0C 4E 05 F1 | 	add	fp, #12
30f9c     A7 00 48 FC | 	wrbyte	#0, fp
30fa0     A7 32 C2 FA | 	rdbyte	local07, fp
30fa4     14 4E 05 F1 | 	add	fp, #20
30fa8     A7 32 62 FC | 	wrlong	local07, fp
30fac     04 4E 05 F1 | 	add	fp, #4
30fb0     A7 10 68 FC | 	wrlong	#8, fp
30fb4     24 4E 85 F1 | 	sub	fp, #36
30fb8                 | ' 
30fb8                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
30fb8                 | ' 	i = b = 0; ni = 8;
30fb8                 | ' 	for (;;) {
30fb8                 | LR__4800
30fb8     18 4E 05 F1 | 	add	fp, #24
30fbc     A7 2A 02 FB | 	rdlong	local03, fp
30fc0     10 4E 05 F1 | 	add	fp, #16
30fc4     A7 36 02 FB | 	rdlong	local09, fp
30fc8     1B 2D 02 F6 | 	mov	local04, local09
30fcc     01 2C 06 F1 | 	add	local04, #1
30fd0     A7 2C 62 FC | 	wrlong	local04, fp
30fd4     01 36 66 F0 | 	shl	local09, #1
30fd8     15 37 02 F1 | 	add	local09, local03
30fdc     1B 31 E2 FA | 	rdword	local06, local09
30fe0     14 4E 85 F1 | 	sub	fp, #20
30fe4     A7 30 52 FC | 	wrword	local06, fp
30fe8     A7 32 EA FA | 	rdword	local07, fp wz
30fec     14 4E 85 F1 | 	sub	fp, #20
30ff0     74 03 90 AD |  if_e	jmp	#LR__4816
30ff4     14 4E 05 F1 | 	add	fp, #20
30ff8     A7 32 E2 FA | 	rdword	local07, fp
30ffc     14 4E 85 F1 | 	sub	fp, #20
31000     20 32 0E F2 | 	cmp	local07, #32 wz
31004     30 00 90 AD |  if_e	jmp	#LR__4801
31008     14 4E 05 F1 | 	add	fp, #20
3100c     A7 26 E2 FA | 	rdword	local01, fp
31010     14 4E 85 F1 | 	sub	fp, #20
31014     2E 26 0E F2 | 	cmp	local01, #46 wz
31018     34 00 90 5D |  if_ne	jmp	#LR__4802
3101c     28 4E 05 F1 | 	add	fp, #40
31020     A7 2C 02 FB | 	rdlong	local04, fp
31024     04 4E 05 F1 | 	add	fp, #4
31028     A7 38 02 FB | 	rdlong	local10, fp
3102c     2C 4E 85 F1 | 	sub	fp, #44
31030     1C 2D 0A F2 | 	cmp	local04, local10 wz
31034     18 00 90 AD |  if_e	jmp	#LR__4802
31038                 | LR__4801
31038     10 4E 05 F1 | 	add	fp, #16
3103c     A7 32 C2 FA | 	rdbyte	local07, fp
31040     03 32 46 F5 | 	or	local07, #3
31044     A7 32 42 FC | 	wrbyte	local07, fp
31048     10 4E 85 F1 | 	sub	fp, #16
3104c                 | ' 			cf |=  0x01  |  0x02 ;
3104c                 | ' 			continue;
3104c     68 FF 9F FD | 	jmp	#LR__4800
31050                 | LR__4802
31050     20 4E 05 F1 | 	add	fp, #32
31054     A7 32 02 FB | 	rdlong	local07, fp
31058     04 4E 05 F1 | 	add	fp, #4
3105c     A7 26 02 FB | 	rdlong	local01, fp
31060     24 4E 85 F1 | 	sub	fp, #36
31064     13 33 12 F2 | 	cmp	local07, local01 wc
31068     1C 00 90 3D |  if_ae	jmp	#LR__4803
3106c     28 4E 05 F1 | 	add	fp, #40
31070     A7 34 02 FB | 	rdlong	local08, fp
31074     04 4E 05 F1 | 	add	fp, #4
31078     A7 38 02 FB | 	rdlong	local10, fp
3107c     2C 4E 85 F1 | 	sub	fp, #44
31080     1C 35 0A F2 | 	cmp	local08, local10 wz
31084     B0 00 90 5D |  if_ne	jmp	#LR__4805
31088                 | LR__4803
31088     24 4E 05 F1 | 	add	fp, #36
3108c     A7 32 02 FB | 	rdlong	local07, fp
31090     24 4E 85 F1 | 	sub	fp, #36
31094     0B 32 0E F2 | 	cmp	local07, #11 wz
31098     18 00 90 5D |  if_ne	jmp	#LR__4804
3109c     10 4E 05 F1 | 	add	fp, #16
310a0     A7 32 C2 FA | 	rdbyte	local07, fp
310a4     03 32 46 F5 | 	or	local07, #3
310a8     A7 32 42 FC | 	wrbyte	local07, fp
310ac     10 4E 85 F1 | 	sub	fp, #16
310b0                 | ' 				cf |=  0x01  |  0x02 ;
310b0                 | ' 				break;
310b0     B4 02 90 FD | 	jmp	#LR__4816
310b4                 | LR__4804
310b4     28 4E 05 F1 | 	add	fp, #40
310b8     A7 32 02 FB | 	rdlong	local07, fp
310bc     04 4E 05 F1 | 	add	fp, #4
310c0     A7 26 02 FB | 	rdlong	local01, fp
310c4     2C 4E 85 F1 | 	sub	fp, #44
310c8     13 33 0A F2 | 	cmp	local07, local01 wz
310cc     10 4E 05 51 |  if_ne	add	fp, #16
310d0     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
310d4     03 32 46 55 |  if_ne	or	local07, #3
310d8     A7 32 42 5C |  if_ne	wrbyte	local07, fp
310dc     10 4E 85 51 |  if_ne	sub	fp, #16
310e0     28 4E 05 F1 | 	add	fp, #40
310e4     A7 32 02 FB | 	rdlong	local07, fp
310e8     04 4E 05 F1 | 	add	fp, #4
310ec     A7 28 02 FB | 	rdlong	local02, fp
310f0     2C 4E 85 F1 | 	sub	fp, #44
310f4     14 33 1A F2 | 	cmp	local07, local02 wcz
310f8     6C 02 90 1D |  if_a	jmp	#LR__4816
310fc     2C 4E 05 F1 | 	add	fp, #44
31100     A7 32 02 FB | 	rdlong	local07, fp
31104     04 4E 85 F1 | 	sub	fp, #4
31108     A7 32 62 FC | 	wrlong	local07, fp
3110c     08 4E 85 F1 | 	sub	fp, #8
31110     A7 10 68 FC | 	wrlong	#8, fp
31114     04 4E 05 F1 | 	add	fp, #4
31118     A7 16 68 FC | 	wrlong	#11, fp
3111c     18 4E 85 F1 | 	sub	fp, #24
31120     A7 3A C2 FA | 	rdbyte	local11, fp
31124     1D 33 E2 F8 | 	getbyte	local07, local11, #0
31128     02 32 66 F0 | 	shl	local07, #2
3112c     A7 32 42 FC | 	wrbyte	local07, fp
31130     0C 4E 85 F1 | 	sub	fp, #12
31134                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
31134                 | ' 			continue;
31134     80 FE 9F FD | 	jmp	#LR__4800
31138                 | LR__4805
31138     14 4E 05 F1 | 	add	fp, #20
3113c     A7 32 E2 FA | 	rdword	local07, fp
31140     14 4E 85 F1 | 	sub	fp, #20
31144     80 32 16 F2 | 	cmp	local07, #128 wc
31148     6C 00 90 CD |  if_b	jmp	#LR__4807
3114c     10 4E 05 F1 | 	add	fp, #16
31150     A7 32 C2 FA | 	rdbyte	local07, fp
31154     02 32 46 F5 | 	or	local07, #2
31158     A7 32 42 FC | 	wrbyte	local07, fp
3115c     04 4E 05 F1 | 	add	fp, #4
31160     A7 12 E2 FA | 	rdword	arg01, fp
31164     14 4E 85 F1 | 	sub	fp, #20
31168     01 00 00 FF 
3116c     52 15 06 F6 | 	mov	arg02, ##850
31170     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
31174     14 4E 05 F1 | 	add	fp, #20
31178     A7 FA 51 FC | 	wrword	result1, fp
3117c     A7 32 E2 FA | 	rdword	local07, fp
31180     14 4E 85 F1 | 	sub	fp, #20
31184     80 32 CE F7 | 	test	local07, #128 wz
31188     2C 00 90 AD |  if_e	jmp	#LR__4806
3118c     14 4E 05 F1 | 	add	fp, #20
31190     A7 28 E2 FA | 	rdword	local02, fp
31194     7F 28 06 F5 | 	and	local02, #127
31198     01 00 00 FF 
3119c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
311a0     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
311a4     14 33 C2 FA | 	rdbyte	local07, local02
311a8     A7 32 52 FC | 	wrword	local07, fp
311ac     14 4E 85 F1 | 	sub	fp, #20
311b0     01 00 00 FF 
311b4     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
311b8                 | LR__4806
311b8                 | LR__4807
311b8     14 4E 05 F1 | 	add	fp, #20
311bc     A7 32 E2 FA | 	rdword	local07, fp
311c0     14 4E 85 F1 | 	sub	fp, #20
311c4     00 33 16 F2 | 	cmp	local07, #256 wc
311c8     88 00 90 CD |  if_b	jmp	#LR__4809
311cc     24 4E 05 F1 | 	add	fp, #36
311d0     A7 32 02 FB | 	rdlong	local07, fp
311d4     01 32 86 F1 | 	sub	local07, #1
311d8     04 4E 85 F1 | 	sub	fp, #4
311dc     A7 28 02 FB | 	rdlong	local02, fp
311e0     20 4E 85 F1 | 	sub	fp, #32
311e4     19 29 12 F2 | 	cmp	local02, local07 wc
311e8     2C 00 90 CD |  if_b	jmp	#LR__4808
311ec     10 4E 05 F1 | 	add	fp, #16
311f0     A7 3A C2 FA | 	rdbyte	local11, fp
311f4     1D 33 E2 F8 | 	getbyte	local07, local11, #0
311f8     03 32 46 F5 | 	or	local07, #3
311fc     A7 32 42 FC | 	wrbyte	local07, fp
31200     14 4E 05 F1 | 	add	fp, #20
31204     A7 32 02 FB | 	rdlong	local07, fp
31208     04 4E 85 F1 | 	sub	fp, #4
3120c     A7 32 62 FC | 	wrlong	local07, fp
31210     20 4E 85 F1 | 	sub	fp, #32
31214                 | ' 				cf |=  0x01  |  0x02 ;
31214                 | ' 				i = ni; continue;
31214     A0 FD 9F FD | 	jmp	#LR__4800
31218                 | LR__4808
31218     04 4E 05 F1 | 	add	fp, #4
3121c     A7 36 02 FB | 	rdlong	local09, fp
31220     1C 4E 05 F1 | 	add	fp, #28
31224     A7 38 02 FB | 	rdlong	local10, fp
31228     1C 2D 02 F6 | 	mov	local04, local10
3122c     01 2C 06 F1 | 	add	local04, #1
31230     A7 2C 62 FC | 	wrlong	local04, fp
31234     20 36 06 F1 | 	add	local09, #32
31238     1B 39 02 F1 | 	add	local10, local09
3123c     0C 4E 85 F1 | 	sub	fp, #12
31240     A7 2A E2 FA | 	rdword	local03, fp
31244     14 4E 85 F1 | 	sub	fp, #20
31248     08 2A 46 F0 | 	shr	local03, #8
3124c     1C 2B 42 FC | 	wrbyte	local03, local10
31250     D4 00 90 FD | 	jmp	#LR__4815
31254                 | LR__4809
31254     14 4E 05 F1 | 	add	fp, #20
31258     A7 32 EA FA | 	rdword	local07, fp wz
3125c     14 4E 85 F1 | 	sub	fp, #20
31260     20 00 90 AD |  if_e	jmp	#LR__4810
31264     B5 01 00 FF 
31268     F1 13 06 F6 | 	mov	arg01, ##@LR__5443
3126c     14 4E 05 F1 | 	add	fp, #20
31270     A7 14 E2 FA | 	rdword	arg02, fp
31274     14 4E 85 F1 | 	sub	fp, #20
31278     48 CB BF FD | 	call	#_fatfs_cc_strchr
3127c     00 FA 0D F2 | 	cmp	result1, #0 wz
31280     20 00 90 AD |  if_e	jmp	#LR__4811
31284                 | LR__4810
31284     14 4E 05 F1 | 	add	fp, #20
31288     A7 BE 58 FC | 	wrword	#95, fp
3128c     04 4E 85 F1 | 	sub	fp, #4
31290     A7 32 C2 FA | 	rdbyte	local07, fp
31294     03 32 46 F5 | 	or	local07, #3
31298     A7 32 42 FC | 	wrbyte	local07, fp
3129c     10 4E 85 F1 | 	sub	fp, #16
312a0     84 00 90 FD | 	jmp	#LR__4814
312a4                 | LR__4811
312a4     14 4E 05 F1 | 	add	fp, #20
312a8     A7 32 E2 FA | 	rdword	local07, fp
312ac     14 4E 85 F1 | 	sub	fp, #20
312b0     41 32 16 F2 | 	cmp	local07, #65 wc
312b4     24 00 90 CD |  if_b	jmp	#LR__4812
312b8     14 4E 05 F1 | 	add	fp, #20
312bc     A7 26 E2 FA | 	rdword	local01, fp
312c0     14 4E 85 F1 | 	sub	fp, #20
312c4     5B 26 16 F2 | 	cmp	local01, #91 wc
312c8     0C 4E 05 C1 |  if_b	add	fp, #12
312cc     A7 32 C2 CA |  if_b	rdbyte	local07, fp
312d0     02 32 46 C5 |  if_b	or	local07, #2
312d4     A7 32 42 CC |  if_b	wrbyte	local07, fp
312d8     0C 4E 85 C1 |  if_b	sub	fp, #12
312dc                 | LR__4812
312dc     14 4E 05 F1 | 	add	fp, #20
312e0     A7 32 E2 FA | 	rdword	local07, fp
312e4     14 4E 85 F1 | 	sub	fp, #20
312e8     61 32 16 F2 | 	cmp	local07, #97 wc
312ec     38 00 90 CD |  if_b	jmp	#LR__4813
312f0     14 4E 05 F1 | 	add	fp, #20
312f4     A7 26 E2 FA | 	rdword	local01, fp
312f8     14 4E 85 F1 | 	sub	fp, #20
312fc     7B 26 16 F2 | 	cmp	local01, #123 wc
31300     24 00 90 3D |  if_ae	jmp	#LR__4813
31304     0C 4E 05 F1 | 	add	fp, #12
31308     A7 32 C2 FA | 	rdbyte	local07, fp
3130c     01 32 46 F5 | 	or	local07, #1
31310     A7 32 42 FC | 	wrbyte	local07, fp
31314     08 4E 05 F1 | 	add	fp, #8
31318     A7 32 E2 FA | 	rdword	local07, fp
3131c     20 32 86 F1 | 	sub	local07, #32
31320     A7 32 52 FC | 	wrword	local07, fp
31324     14 4E 85 F1 | 	sub	fp, #20
31328                 | LR__4813
31328                 | LR__4814
31328                 | LR__4815
31328     04 4E 05 F1 | 	add	fp, #4
3132c     A7 3A 02 FB | 	rdlong	local11, fp
31330     1D 37 02 F6 | 	mov	local09, local11
31334     1C 4E 05 F1 | 	add	fp, #28
31338     A7 28 02 FB | 	rdlong	local02, fp
3133c     14 2D 02 F6 | 	mov	local04, local02
31340     01 2C 06 F1 | 	add	local04, #1
31344     A7 2C 62 FC | 	wrlong	local04, fp
31348     14 39 02 F6 | 	mov	local10, local02
3134c     20 36 06 F1 | 	add	local09, #32
31350     1B 39 02 F1 | 	add	local10, local09
31354     0C 4E 85 F1 | 	sub	fp, #12
31358     A7 2A E2 FA | 	rdword	local03, fp
3135c     14 4E 85 F1 | 	sub	fp, #20
31360     1C 2B 42 FC | 	wrbyte	local03, local10
31364     50 FC 9F FD | 	jmp	#LR__4800
31368                 | LR__4816
31368     04 4E 05 F1 | 	add	fp, #4
3136c     A7 3A 02 FB | 	rdlong	local11, fp
31370     04 4E 85 F1 | 	sub	fp, #4
31374     20 3A 06 F1 | 	add	local11, #32
31378     1D 33 C2 FA | 	rdbyte	local07, local11
3137c     E5 32 0E F2 | 	cmp	local07, #229 wz
31380     04 4E 05 A1 |  if_e	add	fp, #4
31384     A7 32 02 AB |  if_e	rdlong	local07, fp
31388     04 4E 85 A1 |  if_e	sub	fp, #4
3138c     20 32 06 A1 |  if_e	add	local07, #32
31390     19 0B 48 AC |  if_e	wrbyte	#5, local07
31394     24 4E 05 F1 | 	add	fp, #36
31398     A7 32 02 FB | 	rdlong	local07, fp
3139c     24 4E 85 F1 | 	sub	fp, #36
313a0     08 32 0E F2 | 	cmp	local07, #8 wz
313a4     0C 4E 05 A1 |  if_e	add	fp, #12
313a8     A7 32 C2 AA |  if_e	rdbyte	local07, fp
313ac     02 32 66 A0 |  if_e	shl	local07, #2
313b0     A7 32 42 AC |  if_e	wrbyte	local07, fp
313b4     0C 4E 85 A1 |  if_e	sub	fp, #12
313b8     0C 4E 05 F1 | 	add	fp, #12
313bc     A7 32 C2 FA | 	rdbyte	local07, fp
313c0     0C 4E 85 F1 | 	sub	fp, #12
313c4     0C 32 06 F5 | 	and	local07, #12
313c8     0C 32 0E F2 | 	cmp	local07, #12 wz
313cc     18 00 90 AD |  if_e	jmp	#LR__4817
313d0     0C 4E 05 F1 | 	add	fp, #12
313d4     A7 26 C2 FA | 	rdbyte	local01, fp
313d8     0C 4E 85 F1 | 	sub	fp, #12
313dc     03 26 06 F5 | 	and	local01, #3
313e0     03 26 0E F2 | 	cmp	local01, #3 wz
313e4     14 00 90 5D |  if_ne	jmp	#LR__4818
313e8                 | LR__4817
313e8     10 4E 05 F1 | 	add	fp, #16
313ec     A7 32 C2 FA | 	rdbyte	local07, fp
313f0     02 32 46 F5 | 	or	local07, #2
313f4     A7 32 42 FC | 	wrbyte	local07, fp
313f8     10 4E 85 F1 | 	sub	fp, #16
313fc                 | LR__4818
313fc     10 4E 05 F1 | 	add	fp, #16
31400     A7 32 C2 FA | 	rdbyte	local07, fp
31404     10 4E 85 F1 | 	sub	fp, #16
31408     02 32 CE F7 | 	test	local07, #2 wz
3140c     48 00 90 5D |  if_ne	jmp	#LR__4819
31410     0C 4E 05 F1 | 	add	fp, #12
31414     A7 32 C2 FA | 	rdbyte	local07, fp
31418     0C 4E 85 F1 | 	sub	fp, #12
3141c     01 32 CE F7 | 	test	local07, #1 wz
31420     10 4E 05 51 |  if_ne	add	fp, #16
31424     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31428     10 32 46 55 |  if_ne	or	local07, #16
3142c     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31430     10 4E 85 51 |  if_ne	sub	fp, #16
31434     0C 4E 05 F1 | 	add	fp, #12
31438     A7 32 C2 FA | 	rdbyte	local07, fp
3143c     0C 4E 85 F1 | 	sub	fp, #12
31440     04 32 CE F7 | 	test	local07, #4 wz
31444     10 4E 05 51 |  if_ne	add	fp, #16
31448     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
3144c     08 32 46 55 |  if_ne	or	local07, #8
31450     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31454     10 4E 85 51 |  if_ne	sub	fp, #16
31458                 | LR__4819
31458     04 4E 05 F1 | 	add	fp, #4
3145c     A7 32 02 FB | 	rdlong	local07, fp
31460     0C 4E 05 F1 | 	add	fp, #12
31464     A7 26 C2 FA | 	rdbyte	local01, fp
31468     10 4E 85 F1 | 	sub	fp, #16
3146c     2B 32 06 F1 | 	add	local07, #43
31470     19 27 42 FC | 	wrbyte	local01, local07
31474                 | ' 	}
31474                 | ' 
31474                 | ' 	dp->fn[ 11 ] = cf;
31474                 | ' 
31474                 | ' 	return FR_OK;
31474     00 FA 05 F6 | 	mov	result1, #0
31478                 | LR__4820
31478     A7 F0 03 F6 | 	mov	ptra, fp
3147c     B2 00 A0 FD | 	call	#popregs_
31480                 | _fatfs_cc_create_name_ret
31480     2D 00 64 FD | 	ret
31484                 | 
31484                 | _fatfs_cc_follow_path
31484     02 4A 05 F6 | 	mov	COUNT_, #2
31488     A8 00 A0 FD | 	call	#pushregs_
3148c     18 F0 07 F1 | 	add	ptra, #24
31490     04 4E 05 F1 | 	add	fp, #4
31494     A7 12 62 FC | 	wrlong	arg01, fp
31498     04 4E 05 F1 | 	add	fp, #4
3149c     A7 14 62 FC | 	wrlong	arg02, fp
314a0     04 4E 85 F1 | 	sub	fp, #4
314a4     A7 FA 01 FB | 	rdlong	result1, fp
314a8     FD 26 02 FB | 	rdlong	local01, result1
314ac     10 4E 05 F1 | 	add	fp, #16
314b0     A7 26 62 FC | 	wrlong	local01, fp
314b4     14 4E 85 F1 | 	sub	fp, #20
314b8     97 24 48 FB | 	callpa	#(@LR__4832-@LR__4830)>>2,fcache_load_ptr_
314bc                 | ' )
314bc                 | ' {
314bc                 | ' 	FRESULT res;
314bc                 | ' 	BYTE ns;
314bc                 | ' 	FATFS *fs = dp->obj.fs;
314bc                 | ' #line 3034 "ff.c"
314bc                 | ' 	{
314bc                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
314bc                 | LR__4830
314bc     08 4E 05 F1 | 	add	fp, #8
314c0     A7 26 02 FB | 	rdlong	local01, fp
314c4     08 4E 85 F1 | 	sub	fp, #8
314c8     13 27 C2 FA | 	rdbyte	local01, local01
314cc     2F 26 0E F2 | 	cmp	local01, #47 wz
314d0     18 00 90 AD |  if_e	jmp	#LR__4831
314d4     08 4E 05 F1 | 	add	fp, #8
314d8     A7 26 02 FB | 	rdlong	local01, fp
314dc     08 4E 85 F1 | 	sub	fp, #8
314e0     13 27 C2 FA | 	rdbyte	local01, local01
314e4     5C 26 0E F2 | 	cmp	local01, #92 wz
314e8     18 00 90 5D |  if_ne	jmp	#LR__4833
314ec                 | LR__4831
314ec     08 4E 05 F1 | 	add	fp, #8
314f0     A7 26 02 FB | 	rdlong	local01, fp
314f4     01 26 06 F1 | 	add	local01, #1
314f8     A7 26 62 FC | 	wrlong	local01, fp
314fc     08 4E 85 F1 | 	sub	fp, #8
31500     B8 FF 9F FD | 	jmp	#LR__4830
31504                 | LR__4832
31504                 | LR__4833
31504     04 4E 05 F1 | 	add	fp, #4
31508     A7 26 02 FB | 	rdlong	local01, fp
3150c     08 26 06 F1 | 	add	local01, #8
31510     13 01 68 FC | 	wrlong	#0, local01
31514     04 4E 05 F1 | 	add	fp, #4
31518     A7 26 02 FB | 	rdlong	local01, fp
3151c     08 4E 85 F1 | 	sub	fp, #8
31520     13 27 C2 FA | 	rdbyte	local01, local01
31524     20 26 16 F2 | 	cmp	local01, #32 wc
31528     30 00 90 3D |  if_ae	jmp	#LR__4834
3152c     04 4E 05 F1 | 	add	fp, #4
31530     A7 26 02 FB | 	rdlong	local01, fp
31534     2B 26 06 F1 | 	add	local01, #43
31538     13 01 49 FC | 	wrbyte	#128, local01
3153c     A7 12 02 FB | 	rdlong	arg01, fp
31540     04 4E 85 F1 | 	sub	fp, #4
31544     00 14 06 F6 | 	mov	arg02, #0
31548     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
3154c     0C 4E 05 F1 | 	add	fp, #12
31550     A7 FA 61 FC | 	wrlong	result1, fp
31554     0C 4E 85 F1 | 	sub	fp, #12
31558     1C 01 90 FD | 	jmp	#LR__4838
3155c                 | LR__4834
3155c                 | ' 		for (;;) {
3155c                 | LR__4835
3155c     04 4E 05 F1 | 	add	fp, #4
31560     A7 12 02 FB | 	rdlong	arg01, fp
31564     04 4E 05 F1 | 	add	fp, #4
31568     A7 14 02 F6 | 	mov	arg02, fp
3156c     08 4E 85 F1 | 	sub	fp, #8
31570     14 F6 BF FD | 	call	#_fatfs_cc_create_name
31574     0C 4E 05 F1 | 	add	fp, #12
31578     A7 FA 61 FC | 	wrlong	result1, fp
3157c     00 FA 4D F2 | 	cmps	result1, #0 wz
31580     0C 4E 85 F1 | 	sub	fp, #12
31584     F0 00 90 5D |  if_ne	jmp	#LR__4837
31588     04 4E 05 F1 | 	add	fp, #4
3158c     A7 12 02 FB | 	rdlong	arg01, fp
31590     04 4E 85 F1 | 	sub	fp, #4
31594     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
31598     0C 4E 05 F1 | 	add	fp, #12
3159c     A7 FA 61 FC | 	wrlong	result1, fp
315a0     08 4E 85 F1 | 	sub	fp, #8
315a4     A7 26 02 FB | 	rdlong	local01, fp
315a8     2B 26 06 F1 | 	add	local01, #43
315ac     13 27 C2 FA | 	rdbyte	local01, local01
315b0     0C 4E 05 F1 | 	add	fp, #12
315b4     A7 26 42 FC | 	wrbyte	local01, fp
315b8     04 4E 85 F1 | 	sub	fp, #4
315bc     A7 26 0A FB | 	rdlong	local01, fp wz
315c0     0C 4E 85 F1 | 	sub	fp, #12
315c4     34 00 90 AD |  if_e	jmp	#LR__4836
315c8     0C 4E 05 F1 | 	add	fp, #12
315cc     A7 26 02 FB | 	rdlong	local01, fp
315d0     0C 4E 85 F1 | 	sub	fp, #12
315d4     04 26 0E F2 | 	cmp	local01, #4 wz
315d8     9C 00 90 5D |  if_ne	jmp	#LR__4837
315dc     10 4E 05 F1 | 	add	fp, #16
315e0     A7 26 C2 FA | 	rdbyte	local01, fp
315e4     10 4E 85 F1 | 	sub	fp, #16
315e8     04 26 CE F7 | 	test	local01, #4 wz
315ec     0C 4E 05 A1 |  if_e	add	fp, #12
315f0     A7 0A 68 AC |  if_e	wrlong	#5, fp
315f4     0C 4E 85 A1 |  if_e	sub	fp, #12
315f8                 | ' 					}
315f8                 | ' 				}
315f8                 | ' 				break;
315f8     7C 00 90 FD | 	jmp	#LR__4837
315fc                 | LR__4836
315fc     10 4E 05 F1 | 	add	fp, #16
31600     A7 26 C2 FA | 	rdbyte	local01, fp
31604     10 4E 85 F1 | 	sub	fp, #16
31608     04 26 CE F7 | 	test	local01, #4 wz
3160c     68 00 90 5D |  if_ne	jmp	#LR__4837
31610     04 4E 05 F1 | 	add	fp, #4
31614     A7 26 02 FB | 	rdlong	local01, fp
31618     04 4E 85 F1 | 	sub	fp, #4
3161c     06 26 06 F1 | 	add	local01, #6
31620     13 27 C2 FA | 	rdbyte	local01, local01
31624     10 26 CE F7 | 	test	local01, #16 wz
31628     0C 4E 05 A1 |  if_e	add	fp, #12
3162c     A7 0A 68 AC |  if_e	wrlong	#5, fp
31630     0C 4E 85 A1 |  if_e	sub	fp, #12
31634                 | ' 				res = FR_NO_PATH; break;
31634     40 00 90 AD |  if_e	jmp	#LR__4837
31638     04 4E 05 F1 | 	add	fp, #4
3163c     A7 28 02 FB | 	rdlong	local02, fp
31640     14 27 02 F6 | 	mov	local01, local02
31644     10 4E 05 F1 | 	add	fp, #16
31648     A7 14 02 FB | 	rdlong	arg02, fp
3164c     0A 13 02 F6 | 	mov	arg01, arg02
31650     34 14 06 F1 | 	add	arg02, #52
31654     14 4E 85 F1 | 	sub	fp, #20
31658     10 28 06 F1 | 	add	local02, #16
3165c     14 29 02 FB | 	rdlong	local02, local02
31660     FF 29 06 F5 | 	and	local02, #511
31664     14 15 02 F1 | 	add	arg02, local02
31668     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
3166c     08 26 06 F1 | 	add	local01, #8
31670     13 FB 61 FC | 	wrlong	result1, local01
31674     E4 FE 9F FD | 	jmp	#LR__4835
31678                 | LR__4837
31678                 | LR__4838
31678                 | ' 			}
31678                 | ' #line 3090 "ff.c"
31678                 | ' 			{
31678                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
31678                 | ' 			}
31678                 | ' 		}
31678                 | ' 	}
31678                 | ' 
31678                 | ' 	return res;
31678     0C 4E 05 F1 | 	add	fp, #12
3167c     A7 FA 01 FB | 	rdlong	result1, fp
31680     0C 4E 85 F1 | 	sub	fp, #12
31684     A7 F0 03 F6 | 	mov	ptra, fp
31688     B2 00 A0 FD | 	call	#popregs_
3168c                 | _fatfs_cc_follow_path_ret
3168c     2D 00 64 FD | 	ret
31690                 | 
31690                 | _fatfs_cc_get_ldnumber
31690     01 00 66 F6 | 	neg	_var01, #1
31694     09 03 0A FB | 	rdlong	_var02, arg01 wz
31698     01 05 02 F6 | 	mov	_var03, _var02
3169c     01 FA 65 A6 |  if_e	neg	result1, #1
316a0     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
316a4     97 10 48 FB | 	callpa	#(@LR__4841-@LR__4840)>>2,fcache_load_ptr_
316a8                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
316a8                 | LR__4840
316a8     02 07 C2 FA | 	rdbyte	_var04, _var03
316ac     03 FB E1 F8 | 	getbyte	result1, _var04, #0
316b0     20 FA 15 F2 | 	cmp	result1, #32 wc
316b4     01 04 06 F1 | 	add	_var03, #1
316b8     03 09 02 36 |  if_ae	mov	_var05, _var04
316bc     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
316c0     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
316c4     E0 FF 9F 1D |  if_a	jmp	#LR__4840
316c8                 | LR__4841
316c8     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
316cc     3A 06 0E F2 | 	cmp	_var04, #58 wz
316d0     40 00 90 5D |  if_ne	jmp	#LR__4843
316d4     01 0A 06 F6 | 	mov	_var06, #1
316d8     01 09 C2 FA | 	rdbyte	_var05, _var02
316dc     30 08 16 F2 | 	cmp	_var05, #48 wc
316e0     1C 00 90 CD |  if_b	jmp	#LR__4842
316e4     01 09 C2 FA | 	rdbyte	_var05, _var02
316e8     3A 08 16 F2 | 	cmp	_var05, #58 wc
316ec     01 0D 02 C6 |  if_b	mov	_var07, _var02
316f0     02 0C 06 C1 |  if_b	add	_var07, #2
316f4     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
316f8     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
316fc     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
31700                 | LR__4842
31700     01 0A 56 F2 | 	cmps	_var06, #1 wc
31704     05 01 02 C6 |  if_b	mov	_var01, _var06
31708     09 05 62 CC |  if_b	wrlong	_var03, arg01
3170c                 | ' 			vol = i;
3170c                 | ' 			*path = tt;
3170c                 | ' 		}
3170c                 | ' 		return vol;
3170c     00 FB 01 F6 | 	mov	result1, _var01
31710     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
31714                 | LR__4843
31714                 | ' 	}
31714                 | ' #line 3170 "ff.c"
31714                 | ' 	vol = 0;
31714                 | ' 
31714                 | ' 	return vol;
31714     00 FA 05 F6 | 	mov	result1, #0
31718                 | _fatfs_cc_get_ldnumber_ret
31718     2D 00 64 FD | 	ret
3171c                 | 
3171c                 | _fatfs_cc_check_fs
3171c     04 4A 05 F6 | 	mov	COUNT_, #4
31720     A8 00 A0 FD | 	call	#pushregs_
31724     09 27 02 F6 | 	mov	local01, arg01
31728     03 26 06 F1 | 	add	local01, #3
3172c     13 01 48 FC | 	wrbyte	#0, local01
31730     2D 26 06 F1 | 	add	local01, #45
31734     FF FF FF FF 
31738     13 FF 6B FC | 	wrlong	##-1, local01
3173c     30 26 86 F1 | 	sub	local01, #48
31740     13 13 02 F6 | 	mov	arg01, local01
31744     18 D5 BF FD | 	call	#_fatfs_cc_move_window
31748     00 FA 0D F2 | 	cmp	result1, #0 wz
3174c     04 FA 05 56 |  if_ne	mov	result1, #4
31750     94 01 90 5D |  if_ne	jmp	#LR__4854
31754     34 26 06 F1 | 	add	local01, #52
31758     13 13 02 F6 | 	mov	arg01, local01
3175c     FE 13 06 F1 | 	add	arg01, #510
31760                 | ' {
31760                 | ' 
31760                 | ' 	return *((WORD*)ptr);
31760     09 29 E2 FA | 	rdword	local02, arg01
31764     13 2B C2 FA | 	rdbyte	local03, local01
31768     34 26 86 F1 | 	sub	local01, #52
3176c     15 2D E2 F8 | 	getbyte	local04, local03, #0
31770     EB 2C 0E F2 | 	cmp	local04, #235 wz
31774     15 17 02 56 |  if_ne	mov	arg03, local03
31778     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
3177c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
31780     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
31784     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
31788     44 01 90 5D |  if_ne	jmp	#LR__4853
3178c     14 2D 32 F9 | 	getword	local04, local02, #0
31790     55 00 00 FF 
31794     55 2C 0E F2 | 	cmp	local04, ##43605 wz
31798     2C 00 90 5D |  if_ne	jmp	#LR__4850
3179c     34 26 06 F1 | 	add	local01, #52
317a0     13 13 02 F6 | 	mov	arg01, local01
317a4     34 26 86 F1 | 	sub	local01, #52
317a8     52 12 06 F1 | 	add	arg01, #82
317ac     B5 01 00 FF 
317b0     F8 15 06 F6 | 	mov	arg02, ##@LR__5444
317b4     08 16 06 F6 | 	mov	arg03, #8
317b8     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
317bc     00 FA 0D F2 | 	cmp	result1, #0 wz
317c0                 | ' 			return 0;
317c0     00 FA 05 A6 |  if_e	mov	result1, #0
317c4     20 01 90 AD |  if_e	jmp	#LR__4854
317c8                 | LR__4850
317c8     34 26 06 F1 | 	add	local01, #52
317cc     13 13 02 F6 | 	mov	arg01, local01
317d0     0B 12 06 F1 | 	add	arg01, #11
317d4                 | ' {
317d4                 | ' 
317d4                 | ' 	return *((WORD*)ptr);
317d4     09 FB E1 FA | 	rdword	result1, arg01
317d8     0D 26 06 F1 | 	add	local01, #13
317dc     13 2B C2 FA | 	rdbyte	local03, local01
317e0     41 26 86 F1 | 	sub	local01, #65
317e4     FD 2C 32 F9 | 	getword	local04, result1, #0
317e8     FD 14 32 F9 | 	getword	arg02, result1, #0
317ec     01 14 86 F1 | 	sub	arg02, #1
317f0     0A 2D CA F7 | 	test	local04, arg02 wz
317f4     D8 00 90 5D |  if_ne	jmp	#LR__4852
317f8     FD 14 32 F9 | 	getword	arg02, result1, #0
317fc     01 00 00 FF 
31800     00 14 16 F2 | 	cmp	arg02, ##512 wc
31804     C8 00 90 CD |  if_b	jmp	#LR__4852
31808     FD 14 32 F9 | 	getword	arg02, result1, #0
3180c     01 00 00 FF 
31810     01 14 16 F2 | 	cmp	arg02, ##513 wc
31814     B8 00 90 3D |  if_ae	jmp	#LR__4852
31818     15 13 02 F6 | 	mov	arg01, local03
3181c     07 12 4E F7 | 	zerox	arg01, #7 wz
31820     AC 00 90 AD |  if_e	jmp	#LR__4852
31824     15 13 E2 F8 | 	getbyte	arg01, local03, #0
31828     15 2B E2 F8 | 	getbyte	local03, local03, #0
3182c     01 2A 86 F1 | 	sub	local03, #1
31830     15 13 CA F7 | 	test	arg01, local03 wz
31834     98 00 90 5D |  if_ne	jmp	#LR__4852
31838     34 26 06 F1 | 	add	local01, #52
3183c     13 13 02 F6 | 	mov	arg01, local01
31840     34 26 86 F1 | 	sub	local01, #52
31844     0E 12 06 F1 | 	add	arg01, #14
31848                 | ' {
31848                 | ' 
31848                 | ' 	return *((WORD*)ptr);
31848     09 FB E9 FA | 	rdword	result1, arg01 wz
3184c     80 00 90 AD |  if_e	jmp	#LR__4852
31850     44 26 06 F1 | 	add	local01, #68
31854     13 13 C2 FA | 	rdbyte	arg01, local01
31858     44 26 86 F1 | 	sub	local01, #68
3185c     01 12 86 F1 | 	sub	arg01, #1
31860     02 12 16 F2 | 	cmp	arg01, #2 wc
31864     68 00 90 3D |  if_ae	jmp	#LR__4852
31868     34 26 06 F1 | 	add	local01, #52
3186c     13 13 02 F6 | 	mov	arg01, local01
31870     34 26 86 F1 | 	sub	local01, #52
31874     11 12 06 F1 | 	add	arg01, #17
31878                 | ' {
31878                 | ' 
31878                 | ' 	return *((WORD*)ptr);
31878     09 FB E9 FA | 	rdword	result1, arg01 wz
3187c     50 00 90 AD |  if_e	jmp	#LR__4852
31880     34 26 06 F1 | 	add	local01, #52
31884     13 13 02 F6 | 	mov	arg01, local01
31888     34 26 86 F1 | 	sub	local01, #52
3188c     13 12 06 F1 | 	add	arg01, #19
31890                 | ' {
31890                 | ' 
31890                 | ' 	return *((WORD*)ptr);
31890     09 FB E1 FA | 	rdword	result1, arg01
31894     FD 2A 32 F9 | 	getword	local03, result1, #0
31898     80 2A 16 F2 | 	cmp	local03, #128 wc
3189c     20 00 90 3D |  if_ae	jmp	#LR__4851
318a0     34 26 06 F1 | 	add	local01, #52
318a4     13 13 02 F6 | 	mov	arg01, local01
318a8     34 26 86 F1 | 	sub	local01, #52
318ac     20 12 06 F1 | 	add	arg01, #32
318b0                 | ' {
318b0                 | ' 
318b0                 | ' 	return *((DWORD*)ptr);
318b0     09 FB 01 FB | 	rdlong	result1, arg01
318b4     80 00 00 FF 
318b8     00 FA 15 F2 | 	cmp	result1, ##65536 wc
318bc     10 00 90 CD |  if_b	jmp	#LR__4852
318c0                 | LR__4851
318c0     4A 26 06 F1 | 	add	local01, #74
318c4                 | ' {
318c4                 | ' 
318c4                 | ' 	return *((WORD*)ptr);
318c4     13 FB E9 FA | 	rdword	result1, local01 wz
318c8                 | ' 			&& b != 0 && (b & (b - 1)) == 0
318c8                 | ' 			&& ld_word(fs->win +  14 ) != 0
318c8                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
318c8                 | ' 			&& ld_word(fs->win +  17 ) != 0
318c8                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
318c8                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
318c8                 | ' 				return 0;
318c8     00 FA 05 56 |  if_ne	mov	result1, #0
318cc     18 00 90 5D |  if_ne	jmp	#LR__4854
318d0                 | LR__4852
318d0                 | LR__4853
318d0                 | ' 		}
318d0                 | ' 	}
318d0                 | ' 	return sign == 0xAA55 ? 2 : 3;
318d0     14 2B 32 F9 | 	getword	local03, local02, #0
318d4     55 00 00 FF 
318d8     55 2A 0E F2 | 	cmp	local03, ##43605 wz
318dc     02 2C 06 A6 |  if_e	mov	local04, #2
318e0     03 2C 06 56 |  if_ne	mov	local04, #3
318e4     16 FB 01 F6 | 	mov	result1, local04
318e8                 | LR__4854
318e8     A7 F0 03 F6 | 	mov	ptra, fp
318ec     B2 00 A0 FD | 	call	#popregs_
318f0                 | _fatfs_cc_check_fs_ret
318f0     2D 00 64 FD | 	ret
318f4                 | 
318f4                 | _fatfs_cc_find_volume
318f4     05 4A 05 F6 | 	mov	COUNT_, #5
318f8     A8 00 A0 FD | 	call	#pushregs_
318fc     24 F0 07 F1 | 	add	ptra, #36
31900     09 27 02 F6 | 	mov	local01, arg01
31904     0A 29 02 F6 | 	mov	local02, arg02
31908     13 13 02 F6 | 	mov	arg01, local01
3190c     00 14 06 F6 | 	mov	arg02, #0
31910     08 FE BF FD | 	call	#_fatfs_cc_check_fs
31914     02 FA 0D F2 | 	cmp	result1, #2 wz
31918     0C 00 90 AD |  if_e	jmp	#LR__4860
3191c     03 FA 15 F2 | 	cmp	result1, #3 wc
31920     00 28 0E C2 |  if_b	cmp	local02, #0 wz
31924     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4868
31928                 | LR__4860
31928                 | ' 	for (i = 0; i < 4; i++) {
31928     00 2A 06 F6 | 	mov	local03, #0
3192c     97 26 48 FB | 	callpa	#(@LR__4862-@LR__4861)>>2,fcache_load_ptr_
31930                 | LR__4861
31930     04 2A 16 F2 | 	cmp	local03, #4 wc
31934     44 00 90 3D |  if_ae	jmp	#LR__4863
31938     15 2D 02 F6 | 	mov	local04, local03
3193c     02 2C 66 F0 | 	shl	local04, #2
31940     14 4E 05 F1 | 	add	fp, #20
31944     A7 2C 02 F1 | 	add	local04, fp
31948     34 26 06 F1 | 	add	local01, #52
3194c     13 13 02 F6 | 	mov	arg01, local01
31950     34 26 86 F1 | 	sub	local01, #52
31954     BE 13 06 F1 | 	add	arg01, #446
31958     15 15 02 F6 | 	mov	arg02, local03
3195c     04 14 66 F0 | 	shl	arg02, #4
31960     0A 13 02 F1 | 	add	arg01, arg02
31964     08 12 06 F1 | 	add	arg01, #8
31968                 | ' {
31968                 | ' 
31968                 | ' 	return *((DWORD*)ptr);
31968     09 FB 01 FB | 	rdlong	result1, arg01
3196c     14 4E 85 F1 | 	sub	fp, #20
31970     16 FB 61 FC | 	wrlong	result1, local04
31974     01 2A 06 F1 | 	add	local03, #1
31978     B4 FF 9F FD | 	jmp	#LR__4861
3197c                 | LR__4862
3197c                 | LR__4863
3197c     00 28 0E F2 | 	cmp	local02, #0 wz
31980     14 2D 02 56 |  if_ne	mov	local04, local02
31984     01 2C 86 51 |  if_ne	sub	local04, #1
31988     00 2C 06 A6 |  if_e	mov	local04, #0
3198c     16 2B 02 F6 | 	mov	local03, local04
31990                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
31990                 | ' 	}
31990                 | ' 	i = part ? part - 1 : 0;
31990                 | ' 	do {
31990                 | LR__4864
31990     15 2D 02 F6 | 	mov	local04, local03
31994     02 2C 66 F0 | 	shl	local04, #2
31998     14 4E 05 F1 | 	add	fp, #20
3199c     A7 2C 02 F1 | 	add	local04, fp
319a0     16 2D 0A FB | 	rdlong	local04, local04 wz
319a4     14 4E 85 F1 | 	sub	fp, #20
319a8     28 00 90 AD |  if_e	jmp	#LR__4865
319ac     15 2D 02 F6 | 	mov	local04, local03
319b0     02 2C 66 F0 | 	shl	local04, #2
319b4     14 4E 05 F1 | 	add	fp, #20
319b8     A7 2C 02 F1 | 	add	local04, fp
319bc     16 15 02 FB | 	rdlong	arg02, local04
319c0     13 13 02 F6 | 	mov	arg01, local01
319c4     14 4E 85 F1 | 	sub	fp, #20
319c8     50 FD BF FD | 	call	#_fatfs_cc_check_fs
319cc     FD 2C 02 F6 | 	mov	local04, result1
319d0     04 00 90 FD | 	jmp	#LR__4866
319d4                 | LR__4865
319d4     03 2C 06 F6 | 	mov	local04, #3
319d8                 | LR__4866
319d8     16 2F 02 F6 | 	mov	local05, local04
319dc     00 28 0E F2 | 	cmp	local02, #0 wz
319e0     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
319e4     0C 00 90 8D |  if_c_and_z	jmp	#LR__4867
319e8     01 2A 06 A1 |  if_e	add	local03, #1
319ec     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
319f0     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4864
319f4                 | LR__4867
319f4                 | ' 	return fmt;
319f4     17 FB 01 F6 | 	mov	result1, local05
319f8                 | LR__4868
319f8     A7 F0 03 F6 | 	mov	ptra, fp
319fc     B2 00 A0 FD | 	call	#popregs_
31a00                 | _fatfs_cc_find_volume_ret
31a00     2D 00 64 FD | 	ret
31a04                 | 
31a04                 | _fatfs_cc_mount_volume
31a04     0B 4A 05 F6 | 	mov	COUNT_, #11
31a08     A8 00 A0 FD | 	call	#pushregs_
31a0c     0A 27 02 F6 | 	mov	local01, arg02
31a10     0B 29 02 F6 | 	mov	local02, arg03
31a14     13 01 68 FC | 	wrlong	#0, local01
31a18     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
31a1c     FD 2A 02 F6 | 	mov	local03, result1
31a20     00 2A 56 F2 | 	cmps	local03, #0 wc
31a24     0B FA 05 C6 |  if_b	mov	result1, #11
31a28     3C 05 90 CD |  if_b	jmp	#LR__4880
31a2c     15 17 02 F6 | 	mov	arg03, local03
31a30     02 16 66 F0 | 	shl	arg03, #2
31a34     F2 16 02 F1 | 	add	arg03, objptr
31a38     0B 2D 0A FB | 	rdlong	local04, arg03 wz
31a3c     0C FA 05 A6 |  if_e	mov	result1, #12
31a40     24 05 90 AD |  if_e	jmp	#LR__4880
31a44     13 2D 62 FC | 	wrlong	local04, local01
31a48     14 29 E2 F8 | 	getbyte	local02, local02, #0
31a4c     FE 28 06 F5 | 	and	local02, #254
31a50     16 17 CA FA | 	rdbyte	arg03, local04 wz
31a54     4C 00 90 AD |  if_e	jmp	#LR__4871
31a58     01 2C 06 F1 | 	add	local04, #1
31a5c     16 13 CA FA | 	rdbyte	arg01, local04 wz
31a60     01 2C 86 F1 | 	sub	local04, #1
31a64     01 FA 05 56 |  if_ne	mov	result1, #1
31a68                 | ' 
31a68                 | ' 	return Stat;
31a68     01 00 00 AF 
31a6c     20 E4 05 A1 |  if_e	add	objptr, ##544
31a70     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31a74     01 00 00 AF 
31a78     20 E4 85 A1 |  if_e	sub	objptr, ##544
31a7c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
31a80     01 16 CE F7 | 	test	arg03, #1 wz
31a84     1C 00 90 5D |  if_ne	jmp	#LR__4870
31a88     00 28 0E F2 | 	cmp	local02, #0 wz
31a8c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
31a90     04 FA CD 57 |  if_ne	test	result1, #4 wz
31a94                 | ' 				return FR_WRITE_PROTECTED;
31a94     0A FA 05 56 |  if_ne	mov	result1, #10
31a98     CC 04 90 5D |  if_ne	jmp	#LR__4880
31a9c                 | ' 			}
31a9c                 | ' 			return FR_OK;
31a9c     00 FA 05 F6 | 	mov	result1, #0
31aa0     C4 04 90 FD | 	jmp	#LR__4880
31aa4                 | LR__4870
31aa4                 | LR__4871
31aa4     16 01 48 FC | 	wrbyte	#0, local04
31aa8     01 2C 06 F1 | 	add	local04, #1
31aac     16 2B 42 FC | 	wrbyte	local03, local04
31ab0     16 13 C2 FA | 	rdbyte	arg01, local04
31ab4     01 2C 86 F1 | 	sub	local04, #1
31ab8     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
31abc     FD 16 02 F6 | 	mov	arg03, result1
31ac0     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
31ac4     01 2E CE F7 | 	test	local05, #1 wz
31ac8                 | ' 		return FR_NOT_READY;
31ac8     03 FA 05 56 |  if_ne	mov	result1, #3
31acc     98 04 90 5D |  if_ne	jmp	#LR__4880
31ad0     00 28 0E F2 | 	cmp	local02, #0 wz
31ad4     0B 2F 02 56 |  if_ne	mov	local05, arg03
31ad8     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
31adc     04 2E CE 57 |  if_ne	test	local05, #4 wz
31ae0                 | ' 		return FR_WRITE_PROTECTED;
31ae0     0A FA 05 56 |  if_ne	mov	result1, #10
31ae4     80 04 90 5D |  if_ne	jmp	#LR__4880
31ae8     16 13 02 F6 | 	mov	arg01, local04
31aec     00 14 06 F6 | 	mov	arg02, #0
31af0     00 FE BF FD | 	call	#_fatfs_cc_find_volume
31af4     FD 12 02 F6 | 	mov	arg01, result1
31af8     04 12 0E F2 | 	cmp	arg01, #4 wz
31afc     01 FA 05 A6 |  if_e	mov	result1, #1
31b00     64 04 90 AD |  if_e	jmp	#LR__4880
31b04     02 12 16 F2 | 	cmp	arg01, #2 wc
31b08     0D FA 05 36 |  if_ae	mov	result1, #13
31b0c     58 04 90 3D |  if_ae	jmp	#LR__4880
31b10     30 2C 06 F1 | 	add	local04, #48
31b14     16 31 02 FB | 	rdlong	local06, local04
31b18     04 2C 06 F1 | 	add	local04, #4
31b1c     16 13 02 F6 | 	mov	arg01, local04
31b20     34 2C 86 F1 | 	sub	local04, #52
31b24     0B 12 06 F1 | 	add	arg01, #11
31b28                 | ' {
31b28                 | ' 
31b28                 | ' 	return *((WORD*)ptr);
31b28     09 FB E1 FA | 	rdword	result1, arg01
31b2c     01 00 00 FF 
31b30     00 FA 0D F2 | 	cmp	result1, ##512 wz
31b34     0D FA 05 56 |  if_ne	mov	result1, #13
31b38     2C 04 90 5D |  if_ne	jmp	#LR__4880
31b3c     34 2C 06 F1 | 	add	local04, #52
31b40     16 13 02 F6 | 	mov	arg01, local04
31b44     34 2C 86 F1 | 	sub	local04, #52
31b48     16 12 06 F1 | 	add	arg01, #22
31b4c                 | ' {
31b4c                 | ' 
31b4c                 | ' 	return *((WORD*)ptr);
31b4c     09 FB E1 FA | 	rdword	result1, arg01
31b50     FD 32 0A F6 | 	mov	local07, result1 wz
31b54     18 00 90 5D |  if_ne	jmp	#LR__4872
31b58     34 2C 06 F1 | 	add	local04, #52
31b5c     16 13 02 F6 | 	mov	arg01, local04
31b60     34 2C 86 F1 | 	sub	local04, #52
31b64     24 12 06 F1 | 	add	arg01, #36
31b68                 | ' {
31b68                 | ' 
31b68                 | ' 	return *((DWORD*)ptr);
31b68     09 FB 01 FB | 	rdlong	result1, arg01
31b6c     FD 32 02 F6 | 	mov	local07, result1
31b70                 | LR__4872
31b70     1C 2C 06 F1 | 	add	local04, #28
31b74     16 33 62 FC | 	wrlong	local07, local04
31b78     28 2C 06 F1 | 	add	local04, #40
31b7c     16 2F C2 FA | 	rdbyte	local05, local04
31b80     42 2C 86 F1 | 	sub	local04, #66
31b84     16 2F 42 FC | 	wrbyte	local05, local04
31b88     16 2F C2 FA | 	rdbyte	local05, local04
31b8c     02 2C 86 F1 | 	sub	local04, #2
31b90     01 2E 0E F2 | 	cmp	local05, #1 wz
31b94     02 2C 06 51 |  if_ne	add	local04, #2
31b98     16 2F C2 5A |  if_ne	rdbyte	local05, local04
31b9c     02 2C 86 51 |  if_ne	sub	local04, #2
31ba0     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
31ba4     0D FA 05 56 |  if_ne	mov	result1, #13
31ba8     BC 03 90 5D |  if_ne	jmp	#LR__4880
31bac     02 2C 06 F1 | 	add	local04, #2
31bb0     16 2F C2 FA | 	rdbyte	local05, local04
31bb4     17 33 02 FD | 	qmul	local07, local05
31bb8     3F 2C 06 F1 | 	add	local04, #63
31bbc     16 2F C2 FA | 	rdbyte	local05, local04
31bc0     37 2C 86 F1 | 	sub	local04, #55
31bc4     16 2F 52 FC | 	wrword	local05, local04
31bc8     16 2F EA FA | 	rdword	local05, local04 wz
31bcc     0A 2C 86 F1 | 	sub	local04, #10
31bd0     18 32 62 FD | 	getqx	local07
31bd4     20 00 90 AD |  if_e	jmp	#LR__4873
31bd8     0A 2C 06 F1 | 	add	local04, #10
31bdc     16 2F E2 FA | 	rdword	local05, local04
31be0     17 2B 32 F9 | 	getword	local03, local05, #0
31be4     0A 2C 86 F1 | 	sub	local04, #10
31be8     17 2F 32 F9 | 	getword	local05, local05, #0
31bec     01 2E 86 F1 | 	sub	local05, #1
31bf0     17 2B CA F7 | 	test	local03, local05 wz
31bf4     08 00 90 AD |  if_e	jmp	#LR__4874
31bf8                 | LR__4873
31bf8     0D FA 05 F6 | 	mov	result1, #13
31bfc     68 03 90 FD | 	jmp	#LR__4880
31c00                 | LR__4874
31c00     34 2C 06 F1 | 	add	local04, #52
31c04     16 13 02 F6 | 	mov	arg01, local04
31c08     11 12 06 F1 | 	add	arg01, #17
31c0c                 | ' {
31c0c                 | ' 
31c0c                 | ' 	return *((WORD*)ptr);
31c0c     09 FB E1 FA | 	rdword	result1, arg01
31c10     2C 2C 86 F1 | 	sub	local04, #44
31c14     16 FB 51 FC | 	wrword	result1, local04
31c18     16 2F E2 FA | 	rdword	local05, local04
31c1c     08 2C 86 F1 | 	sub	local04, #8
31c20     17 13 52 F6 | 	abs	arg01, local05 wc
31c24     09 13 42 F8 | 	getnib	arg01, arg01, #0
31c28     09 13 8A F6 | 	negc	arg01, arg01 wz
31c2c     0D FA 05 56 |  if_ne	mov	result1, #13
31c30     34 03 90 5D |  if_ne	jmp	#LR__4880
31c34     34 2C 06 F1 | 	add	local04, #52
31c38     16 13 02 F6 | 	mov	arg01, local04
31c3c     34 2C 86 F1 | 	sub	local04, #52
31c40     13 12 06 F1 | 	add	arg01, #19
31c44                 | ' {
31c44                 | ' 
31c44                 | ' 	return *((WORD*)ptr);
31c44     09 FB E1 FA | 	rdword	result1, arg01
31c48     FD 34 0A F6 | 	mov	local08, result1 wz
31c4c     34 2C 06 A1 |  if_e	add	local04, #52
31c50     16 13 02 A6 |  if_e	mov	arg01, local04
31c54     34 2C 86 A1 |  if_e	sub	local04, #52
31c58     20 12 06 A1 |  if_e	add	arg01, #32
31c5c                 | ' {
31c5c                 | ' 
31c5c                 | ' 	return *((DWORD*)ptr);
31c5c     09 35 02 AB |  if_e	rdlong	local08, arg01
31c60     34 2C 06 F1 | 	add	local04, #52
31c64     16 13 02 F6 | 	mov	arg01, local04
31c68     34 2C 86 F1 | 	sub	local04, #52
31c6c     0E 12 06 F1 | 	add	arg01, #14
31c70                 | ' {
31c70                 | ' 
31c70                 | ' 	return *((WORD*)ptr);
31c70     09 FB E1 FA | 	rdword	result1, arg01
31c74     FD 12 02 F6 | 	mov	arg01, result1
31c78     09 2F 02 F6 | 	mov	local05, arg01
31c7c     0F 2E 4E F7 | 	zerox	local05, #15 wz
31c80     0D FA 05 A6 |  if_e	mov	result1, #13
31c84     E0 02 90 AD |  if_e	jmp	#LR__4880
31c88     09 37 32 F9 | 	getword	local09, arg01, #0
31c8c     19 37 02 F1 | 	add	local09, local07
31c90     08 2C 06 F1 | 	add	local04, #8
31c94     16 2F E2 FA | 	rdword	local05, local04
31c98     08 2C 86 F1 | 	sub	local04, #8
31c9c     17 2F 52 F6 | 	abs	local05, local05 wc
31ca0     04 2E 46 F0 | 	shr	local05, #4
31ca4     17 37 82 F3 | 	sumc	local09, local05
31ca8     1B 35 12 F2 | 	cmp	local08, local09 wc
31cac     0D FA 05 C6 |  if_b	mov	result1, #13
31cb0     B4 02 90 CD |  if_b	jmp	#LR__4880
31cb4     1B 35 82 F1 | 	sub	local08, local09
31cb8     0A 2C 06 F1 | 	add	local04, #10
31cbc     16 2F E2 FA | 	rdword	local05, local04
31cc0     17 35 12 FD | 	qdiv	local08, local05
31cc4     0A 2C 86 F1 | 	sub	local04, #10
31cc8     18 2E 62 FD | 	getqx	local05
31ccc     00 2E 0E F2 | 	cmp	local05, #0 wz
31cd0     0D FA 05 A6 |  if_e	mov	result1, #13
31cd4     90 02 90 AD |  if_e	jmp	#LR__4880
31cd8     00 38 06 F6 | 	mov	local10, #0
31cdc     FF FF 07 FF 
31ce0     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
31ce4     03 38 06 C6 |  if_b	mov	local10, #3
31ce8     7F 00 00 FF 
31cec     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
31cf0     02 38 06 C6 |  if_b	mov	local10, #2
31cf4     07 00 00 FF 
31cf8     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
31cfc     01 38 06 C6 |  if_b	mov	local10, #1
31d00     00 38 0E F2 | 	cmp	local10, #0 wz
31d04     0D FA 05 A6 |  if_e	mov	result1, #13
31d08     5C 02 90 AD |  if_e	jmp	#LR__4880
31d0c     02 2E 06 F1 | 	add	local05, #2
31d10     18 2C 06 F1 | 	add	local04, #24
31d14     16 2F 62 FC | 	wrlong	local05, local04
31d18     08 2C 06 F1 | 	add	local04, #8
31d1c     16 31 62 FC | 	wrlong	local06, local04
31d20     18 2F 02 F6 | 	mov	local05, local06
31d24     09 13 32 F9 | 	getword	arg01, arg01, #0
31d28     09 2F 02 F1 | 	add	local05, arg01
31d2c     04 2C 06 F1 | 	add	local04, #4
31d30     16 2F 62 FC | 	wrlong	local05, local04
31d34     18 2F 02 F6 | 	mov	local05, local06
31d38     1B 2F 02 F1 | 	add	local05, local09
31d3c     08 2C 06 F1 | 	add	local04, #8
31d40     16 2F 62 FC | 	wrlong	local05, local04
31d44     2C 2C 86 F1 | 	sub	local04, #44
31d48     03 38 0E F2 | 	cmp	local10, #3 wz
31d4c     5C 00 90 5D |  if_ne	jmp	#LR__4875
31d50     34 2C 06 F1 | 	add	local04, #52
31d54     16 13 02 F6 | 	mov	arg01, local04
31d58     34 2C 86 F1 | 	sub	local04, #52
31d5c     2A 12 06 F1 | 	add	arg01, #42
31d60                 | ' {
31d60                 | ' 
31d60                 | ' 	return *((WORD*)ptr);
31d60     09 FB E9 FA | 	rdword	result1, arg01 wz
31d64     0D FA 05 56 |  if_ne	mov	result1, #13
31d68     FC 01 90 5D |  if_ne	jmp	#LR__4880
31d6c     08 2C 06 F1 | 	add	local04, #8
31d70     16 2F EA FA | 	rdword	local05, local04 wz
31d74     08 2C 86 F1 | 	sub	local04, #8
31d78     0D FA 05 56 |  if_ne	mov	result1, #13
31d7c     E8 01 90 5D |  if_ne	jmp	#LR__4880
31d80     34 2C 06 F1 | 	add	local04, #52
31d84     16 13 02 F6 | 	mov	arg01, local04
31d88     2C 12 06 F1 | 	add	arg01, #44
31d8c                 | ' {
31d8c                 | ' 
31d8c                 | ' 	return *((DWORD*)ptr);
31d8c     09 FB 01 FB | 	rdlong	result1, arg01
31d90     0C 2C 86 F1 | 	sub	local04, #12
31d94     16 FB 61 FC | 	wrlong	result1, local04
31d98     10 2C 86 F1 | 	sub	local04, #16
31d9c     16 3B 02 FB | 	rdlong	local11, local04
31da0     18 2C 86 F1 | 	sub	local04, #24
31da4     02 3A 66 F0 | 	shl	local11, #2
31da8     6C 00 90 FD | 	jmp	#LR__4877
31dac                 | LR__4875
31dac     08 2C 06 F1 | 	add	local04, #8
31db0     16 2F EA FA | 	rdword	local05, local04 wz
31db4     08 2C 86 F1 | 	sub	local04, #8
31db8     0D FA 05 A6 |  if_e	mov	result1, #13
31dbc     A8 01 90 AD |  if_e	jmp	#LR__4880
31dc0     24 2C 06 F1 | 	add	local04, #36
31dc4     16 2F 02 FB | 	rdlong	local05, local04
31dc8     19 2F 02 F1 | 	add	local05, local07
31dcc     04 2C 06 F1 | 	add	local04, #4
31dd0     16 2F 62 FC | 	wrlong	local05, local04
31dd4     28 2C 86 F1 | 	sub	local04, #40
31dd8     02 38 0E F2 | 	cmp	local10, #2 wz
31ddc     18 2C 06 A1 |  if_e	add	local04, #24
31de0     16 2F 02 AB |  if_e	rdlong	local05, local04
31de4     18 2C 86 A1 |  if_e	sub	local04, #24
31de8     01 2E 66 A0 |  if_e	shl	local05, #1
31dec     24 00 90 AD |  if_e	jmp	#LR__4876
31df0     18 2C 06 F1 | 	add	local04, #24
31df4     16 3B 02 FB | 	rdlong	local11, local04
31df8     1D 2F 02 F6 | 	mov	local05, local11
31dfc     01 2E 66 F0 | 	shl	local05, #1
31e00     1D 2F 02 F1 | 	add	local05, local11
31e04     01 2E 46 F0 | 	shr	local05, #1
31e08     18 2C 86 F1 | 	sub	local04, #24
31e0c     01 3A 06 F5 | 	and	local11, #1
31e10     1D 2F 02 F1 | 	add	local05, local11
31e14                 | LR__4876
31e14     17 3B 02 F6 | 	mov	local11, local05
31e18                 | LR__4877
31e18     FF 3B 06 F1 | 	add	local11, #511
31e1c     09 3A 46 F0 | 	shr	local11, #9
31e20     1C 2C 06 F1 | 	add	local04, #28
31e24     16 17 02 FB | 	rdlong	arg03, local04
31e28     1C 2C 86 F1 | 	sub	local04, #28
31e2c     1D 17 12 F2 | 	cmp	arg03, local11 wc
31e30     0D FA 05 C6 |  if_b	mov	result1, #13
31e34     30 01 90 CD |  if_b	jmp	#LR__4880
31e38     14 2C 06 F1 | 	add	local04, #20
31e3c     FF FF FF FF 
31e40     16 FF 6B FC | 	wrlong	##-1, local04
31e44     04 2C 86 F1 | 	sub	local04, #4
31e48     FF FF FF FF 
31e4c     16 FF 6B FC | 	wrlong	##-1, local04
31e50     0C 2C 86 F1 | 	sub	local04, #12
31e54     16 01 49 FC | 	wrbyte	#128, local04
31e58     04 2C 86 F1 | 	sub	local04, #4
31e5c     03 38 0E F2 | 	cmp	local10, #3 wz
31e60     D0 00 90 5D |  if_ne	jmp	#LR__4879
31e64     34 2C 06 F1 | 	add	local04, #52
31e68     16 13 02 F6 | 	mov	arg01, local04
31e6c     34 2C 86 F1 | 	sub	local04, #52
31e70     30 12 06 F1 | 	add	arg01, #48
31e74                 | ' {
31e74                 | ' 
31e74                 | ' 	return *((WORD*)ptr);
31e74     09 FB E1 FA | 	rdword	result1, arg01
31e78     FD 2E 32 F9 | 	getword	local05, result1, #0
31e7c     01 2E 0E F2 | 	cmp	local05, #1 wz
31e80     B0 00 90 5D |  if_ne	jmp	#LR__4879
31e84     01 30 06 F1 | 	add	local06, #1
31e88     16 13 02 F6 | 	mov	arg01, local04
31e8c     18 15 02 F6 | 	mov	arg02, local06
31e90     CC CD BF FD | 	call	#_fatfs_cc_move_window
31e94     00 FA 0D F2 | 	cmp	result1, #0 wz
31e98     98 00 90 5D |  if_ne	jmp	#LR__4879
31e9c     04 2C 06 F1 | 	add	local04, #4
31ea0     16 01 48 FC | 	wrbyte	#0, local04
31ea4     30 2C 06 F1 | 	add	local04, #48
31ea8     16 13 02 F6 | 	mov	arg01, local04
31eac     34 2C 86 F1 | 	sub	local04, #52
31eb0     FE 13 06 F1 | 	add	arg01, #510
31eb4                 | ' {
31eb4                 | ' 
31eb4                 | ' 	return *((WORD*)ptr);
31eb4     09 FB E1 FA | 	rdword	result1, arg01
31eb8     FD 2E 32 F9 | 	getword	local05, result1, #0
31ebc     55 00 00 FF 
31ec0     55 2E 0E F2 | 	cmp	local05, ##43605 wz
31ec4     34 2C 06 A1 |  if_e	add	local04, #52
31ec8     16 13 02 A6 |  if_e	mov	arg01, local04
31ecc     34 2C 86 A1 |  if_e	sub	local04, #52
31ed0                 | ' {
31ed0                 | ' 
31ed0                 | ' 	return *((DWORD*)ptr);
31ed0     09 FB 01 AB |  if_e	rdlong	result1, arg01
31ed4     A9 B0 20 AF 
31ed8     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
31edc     54 00 90 5D |  if_ne	jmp	#LR__4878
31ee0     34 2C 06 F1 | 	add	local04, #52
31ee4     16 13 02 F6 | 	mov	arg01, local04
31ee8     34 2C 86 F1 | 	sub	local04, #52
31eec     E4 13 06 F1 | 	add	arg01, #484
31ef0                 | ' {
31ef0                 | ' 
31ef0                 | ' 	return *((DWORD*)ptr);
31ef0     09 FB 01 FB | 	rdlong	result1, arg01
31ef4     B9 A0 30 FF 
31ef8     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
31efc     34 00 90 5D |  if_ne	jmp	#LR__4878
31f00     34 2C 06 F1 | 	add	local04, #52
31f04     16 13 02 F6 | 	mov	arg01, local04
31f08     E8 13 06 F1 | 	add	arg01, #488
31f0c                 | ' {
31f0c                 | ' 
31f0c                 | ' 	return *((DWORD*)ptr);
31f0c     09 FB 01 FB | 	rdlong	result1, arg01
31f10     20 2C 86 F1 | 	sub	local04, #32
31f14     16 FB 61 FC | 	wrlong	result1, local04
31f18     20 2C 06 F1 | 	add	local04, #32
31f1c     16 13 02 F6 | 	mov	arg01, local04
31f20     EC 13 06 F1 | 	add	arg01, #492
31f24                 | ' {
31f24                 | ' 
31f24                 | ' 	return *((DWORD*)ptr);
31f24     09 FB 01 FB | 	rdlong	result1, arg01
31f28     24 2C 86 F1 | 	sub	local04, #36
31f2c     16 FB 61 FC | 	wrlong	result1, local04
31f30     10 2C 86 F1 | 	sub	local04, #16
31f34                 | LR__4878
31f34                 | LR__4879
31f34     16 39 42 FC | 	wrbyte	local10, local04
31f38     04 E4 05 F1 | 	add	objptr, #4
31f3c     F2 2E E2 FA | 	rdword	local05, objptr
31f40     01 2E 06 F1 | 	add	local05, #1
31f44     F2 2E 52 FC | 	wrword	local05, objptr
31f48     F2 3A E2 FA | 	rdword	local11, objptr
31f4c     06 2C 06 F1 | 	add	local04, #6
31f50     16 3B 52 FC | 	wrword	local11, local04
31f54     04 E4 05 F1 | 	add	objptr, #4
31f58     06 2C 06 F1 | 	add	local04, #6
31f5c     16 E5 61 FC | 	wrlong	objptr, local04
31f60                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
31f60                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
31f60                 | ' 			{
31f60                 | ' 
31f60                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
31f60                 | ' 
31f60                 | ' 
31f60                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
31f60                 | ' 
31f60                 | ' 			}
31f60                 | ' 		}
31f60                 | ' 
31f60                 | ' 
31f60                 | ' 	}
31f60                 | ' 
31f60                 | ' 	fs->fs_type = (BYTE)fmt;
31f60                 | ' 	fs->id = ++Fsid;
31f60                 | ' 
31f60                 | ' 	fs->lfnbuf = LfnBuf;
31f60                 | ' #line 3567 "ff.c"
31f60                 | ' 	return FR_OK;
31f60     00 FA 05 F6 | 	mov	result1, #0
31f64     08 E4 85 F1 | 	sub	objptr, #8
31f68                 | LR__4880
31f68     A7 F0 03 F6 | 	mov	ptra, fp
31f6c     B2 00 A0 FD | 	call	#popregs_
31f70                 | _fatfs_cc_mount_volume_ret
31f70     2D 00 64 FD | 	ret
31f74                 | 
31f74                 | _fatfs_cc_validate
31f74     09 01 0A F6 | 	mov	_var01, arg01 wz
31f78     09 02 06 F6 | 	mov	_var02, #9
31f7c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
31f80     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
31f84     50 00 90 AD |  if_e	jmp	#LR__4890
31f88     04 00 06 F1 | 	add	_var01, #4
31f8c     00 07 E2 FA | 	rdword	_var04, _var01
31f90     04 00 86 F1 | 	sub	_var01, #4
31f94     00 13 02 FB | 	rdlong	arg01, _var01
31f98     06 12 06 F1 | 	add	arg01, #6
31f9c     09 FB E1 FA | 	rdword	result1, arg01
31fa0     FD 06 0A F2 | 	cmp	_var04, result1 wz
31fa4     30 00 90 5D |  if_ne	jmp	#LR__4890
31fa8     00 07 02 FB | 	rdlong	_var04, _var01
31fac     01 06 06 F1 | 	add	_var04, #1
31fb0     03 13 CA FA | 	rdbyte	arg01, _var04 wz
31fb4     01 FA 05 56 |  if_ne	mov	result1, #1
31fb8                 | ' 
31fb8                 | ' 	return Stat;
31fb8     01 00 00 AF 
31fbc     20 E4 05 A1 |  if_e	add	objptr, ##544
31fc0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31fc4     01 00 00 AF 
31fc8     20 E4 85 A1 |  if_e	sub	objptr, ##544
31fcc     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
31fd0     01 04 CE F7 | 	test	_var03, #1 wz
31fd4     00 02 06 A6 |  if_e	mov	_var02, #0
31fd8                 | LR__4890
31fd8     00 02 0E F2 | 	cmp	_var02, #0 wz
31fdc     00 05 02 AB |  if_e	rdlong	_var03, _var01
31fe0     00 04 06 56 |  if_ne	mov	_var03, #0
31fe4     0A 05 62 FC | 	wrlong	_var03, arg02
31fe8                 | ' 			res = FR_OK;
31fe8                 | ' 		}
31fe8                 | ' 
31fe8                 | ' 	}
31fe8                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
31fe8                 | ' 	return res;
31fe8     01 FB 01 F6 | 	mov	result1, _var02
31fec                 | _fatfs_cc_validate_ret
31fec     2D 00 64 FD | 	ret
31ff0                 | 
31ff0                 | _fatfs_cc_f_mount
31ff0     01 4A 05 F6 | 	mov	COUNT_, #1
31ff4     A8 00 A0 FD | 	call	#pushregs_
31ff8     20 F0 07 F1 | 	add	ptra, #32
31ffc     04 4E 05 F1 | 	add	fp, #4
32000     A7 12 62 FC | 	wrlong	arg01, fp
32004     04 4E 05 F1 | 	add	fp, #4
32008     A7 14 62 FC | 	wrlong	arg02, fp
3200c     04 4E 05 F1 | 	add	fp, #4
32010     A7 16 42 FC | 	wrbyte	arg03, fp
32014     04 4E 85 F1 | 	sub	fp, #4
32018     A7 16 02 FB | 	rdlong	arg03, fp
3201c     14 4E 05 F1 | 	add	fp, #20
32020     A7 16 62 FC | 	wrlong	arg03, fp
32024     A7 12 02 F6 | 	mov	arg01, fp
32028     1C 4E 85 F1 | 	sub	fp, #28
3202c     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
32030     14 4E 05 F1 | 	add	fp, #20
32034     A7 FA 61 FC | 	wrlong	result1, fp
32038     14 4E 85 F1 | 	sub	fp, #20
3203c     00 FA 55 F2 | 	cmps	result1, #0 wc
32040     0B FA 05 C6 |  if_b	mov	result1, #11
32044     C0 00 90 CD |  if_b	jmp	#LR__4901
32048     14 4E 05 F1 | 	add	fp, #20
3204c     A7 16 02 FB | 	rdlong	arg03, fp
32050     02 16 66 F0 | 	shl	arg03, #2
32054     F2 16 02 F1 | 	add	arg03, objptr
32058     0B 17 0A FB | 	rdlong	arg03, arg03 wz
3205c     04 4E 85 F1 | 	sub	fp, #4
32060     A7 16 62 FC | 	wrlong	arg03, fp
32064     10 4E 85 F1 | 	sub	fp, #16
32068     28 00 90 AD |  if_e	jmp	#LR__4900
3206c     10 4E 05 F1 | 	add	fp, #16
32070     A7 16 02 FB | 	rdlong	arg03, fp
32074     10 4E 85 F1 | 	sub	fp, #16
32078     01 16 06 F1 | 	add	arg03, #1
3207c     0B 13 C2 FA | 	rdbyte	arg01, arg03
32080     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
32084     10 4E 05 F1 | 	add	fp, #16
32088     A7 16 02 FB | 	rdlong	arg03, fp
3208c     10 4E 85 F1 | 	sub	fp, #16
32090     0B 01 48 FC | 	wrbyte	#0, arg03
32094                 | LR__4900
32094     04 4E 05 F1 | 	add	fp, #4
32098     A7 26 0A FB | 	rdlong	local01, fp wz
3209c     04 4E 85 F1 | 	sub	fp, #4
320a0     04 4E 05 51 |  if_ne	add	fp, #4
320a4     A7 26 02 5B |  if_ne	rdlong	local01, fp
320a8     04 4E 85 51 |  if_ne	sub	fp, #4
320ac     13 01 48 5C |  if_ne	wrbyte	#0, local01
320b0     14 4E 05 F1 | 	add	fp, #20
320b4     A7 26 02 FB | 	rdlong	local01, fp
320b8     02 26 66 F0 | 	shl	local01, #2
320bc     F2 26 02 F1 | 	add	local01, objptr
320c0     10 4E 85 F1 | 	sub	fp, #16
320c4     A7 16 02 FB | 	rdlong	arg03, fp
320c8     13 17 62 FC | 	wrlong	arg03, local01
320cc     08 4E 05 F1 | 	add	fp, #8
320d0     A7 26 CA FA | 	rdbyte	local01, fp wz
320d4     0C 4E 85 F1 | 	sub	fp, #12
320d8     00 FA 05 A6 |  if_e	mov	result1, #0
320dc     28 00 90 AD |  if_e	jmp	#LR__4901
320e0     08 4E 05 F1 | 	add	fp, #8
320e4     A7 12 02 F6 | 	mov	arg01, fp
320e8     04 4E 85 F1 | 	sub	fp, #4
320ec     A7 14 02 F6 | 	mov	arg02, fp
320f0     04 4E 85 F1 | 	sub	fp, #4
320f4     00 16 06 F6 | 	mov	arg03, #0
320f8     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
320fc     18 4E 05 F1 | 	add	fp, #24
32100     A7 FA 61 FC | 	wrlong	result1, fp
32104                 | ' 
32104                 | ' 	res = mount_volume(&path, &fs, 0);
32104                 | ' 	return res ;
32104     18 4E 85 F1 | 	sub	fp, #24
32108                 | LR__4901
32108     A7 F0 03 F6 | 	mov	ptra, fp
3210c     B2 00 A0 FD | 	call	#popregs_
32110                 | _fatfs_cc_f_mount_ret
32110     2D 00 64 FD | 	ret
32114                 | 
32114                 | _fatfs_cc_f_open
32114     02 4A 05 F6 | 	mov	COUNT_, #2
32118     A8 00 A0 FD | 	call	#pushregs_
3211c     60 F0 07 F1 | 	add	ptra, #96
32120     04 4E 05 F1 | 	add	fp, #4
32124     A7 12 62 FC | 	wrlong	arg01, fp
32128     04 4E 05 F1 | 	add	fp, #4
3212c     A7 14 62 FC | 	wrlong	arg02, fp
32130     04 4E 05 F1 | 	add	fp, #4
32134     A7 16 42 FC | 	wrbyte	arg03, fp
32138     08 4E 85 F1 | 	sub	fp, #8
3213c     A7 18 0A FB | 	rdlong	arg04, fp wz
32140     04 4E 85 F1 | 	sub	fp, #4
32144     09 FA 05 A6 |  if_e	mov	result1, #9
32148     98 06 90 AD |  if_e	jmp	#LR__4927
3214c     0C 4E 05 F1 | 	add	fp, #12
32150     A7 18 C2 FA | 	rdbyte	arg04, fp
32154     3F 18 06 F5 | 	and	arg04, #63
32158     A7 18 42 FC | 	wrbyte	arg04, fp
3215c     04 4E 85 F1 | 	sub	fp, #4
32160     A7 12 02 F6 | 	mov	arg01, fp
32164     3C 4E 05 F1 | 	add	fp, #60
32168     A7 14 02 F6 | 	mov	arg02, fp
3216c     38 4E 85 F1 | 	sub	fp, #56
32170     A7 16 C2 FA | 	rdbyte	arg03, fp
32174     0C 4E 85 F1 | 	sub	fp, #12
32178     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
3217c     10 4E 05 F1 | 	add	fp, #16
32180     A7 FA 61 FC | 	wrlong	result1, fp
32184     10 4E 85 F1 | 	sub	fp, #16
32188     00 FA 0D F2 | 	cmp	result1, #0 wz
3218c     2C 06 90 5D |  if_ne	jmp	#LR__4926
32190     44 4E 05 F1 | 	add	fp, #68
32194     A7 18 02 FB | 	rdlong	arg04, fp
32198     30 4E 85 F1 | 	sub	fp, #48
3219c     A7 18 62 FC | 	wrlong	arg04, fp
321a0     A7 12 02 F6 | 	mov	arg01, fp
321a4     0C 4E 85 F1 | 	sub	fp, #12
321a8     A7 26 02 FB | 	rdlong	local01, fp
321ac     08 4E 85 F1 | 	sub	fp, #8
321b0     13 15 02 F6 | 	mov	arg02, local01
321b4     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
321b8     10 4E 05 F1 | 	add	fp, #16
321bc     A7 FA 61 FC | 	wrlong	result1, fp
321c0     10 4E 85 F1 | 	sub	fp, #16
321c4     00 FA 0D F2 | 	cmp	result1, #0 wz
321c8     1C 00 90 5D |  if_ne	jmp	#LR__4910
321cc     3F 4E 05 F1 | 	add	fp, #63
321d0     A7 18 C2 FA | 	rdbyte	arg04, fp
321d4     3F 4E 85 F1 | 	sub	fp, #63
321d8     80 18 CE F7 | 	test	arg04, #128 wz
321dc     10 4E 05 51 |  if_ne	add	fp, #16
321e0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
321e4     10 4E 85 51 |  if_ne	sub	fp, #16
321e8                 | LR__4910
321e8     0C 4E 05 F1 | 	add	fp, #12
321ec     A7 18 C2 FA | 	rdbyte	arg04, fp
321f0     0C 4E 85 F1 | 	sub	fp, #12
321f4     1C 18 CE F7 | 	test	arg04, #28 wz
321f8     F0 01 90 AD |  if_e	jmp	#LR__4915
321fc     10 4E 05 F1 | 	add	fp, #16
32200     A7 26 0A FB | 	rdlong	local01, fp wz
32204     10 4E 85 F1 | 	sub	fp, #16
32208     48 00 90 AD |  if_e	jmp	#LR__4912
3220c     10 4E 05 F1 | 	add	fp, #16
32210     A7 18 02 FB | 	rdlong	arg04, fp
32214     10 4E 85 F1 | 	sub	fp, #16
32218     04 18 0E F2 | 	cmp	arg04, #4 wz
3221c     1C 00 90 5D |  if_ne	jmp	#LR__4911
32220     14 4E 05 F1 | 	add	fp, #20
32224     A7 12 02 F6 | 	mov	arg01, fp
32228     14 4E 85 F1 | 	sub	fp, #20
3222c     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
32230     10 4E 05 F1 | 	add	fp, #16
32234     A7 FA 61 FC | 	wrlong	result1, fp
32238     10 4E 85 F1 | 	sub	fp, #16
3223c                 | LR__4911
3223c     0C 4E 05 F1 | 	add	fp, #12
32240     A7 26 C2 FA | 	rdbyte	local01, fp
32244     08 26 46 F5 | 	or	local01, #8
32248     A7 26 42 FC | 	wrbyte	local01, fp
3224c     0C 4E 85 F1 | 	sub	fp, #12
32250     3C 00 90 FD | 	jmp	#LR__4914
32254                 | LR__4912
32254     1A 4E 05 F1 | 	add	fp, #26
32258     A7 26 C2 FA | 	rdbyte	local01, fp
3225c     1A 4E 85 F1 | 	sub	fp, #26
32260     11 26 CE F7 | 	test	local01, #17 wz
32264     10 4E 05 51 |  if_ne	add	fp, #16
32268     A7 0E 68 5C |  if_ne	wrlong	#7, fp
3226c     10 4E 85 51 |  if_ne	sub	fp, #16
32270     1C 00 90 5D |  if_ne	jmp	#LR__4913
32274     0C 4E 05 F1 | 	add	fp, #12
32278     A7 26 C2 FA | 	rdbyte	local01, fp
3227c     0C 4E 85 F1 | 	sub	fp, #12
32280     04 26 CE F7 | 	test	local01, #4 wz
32284     10 4E 05 51 |  if_ne	add	fp, #16
32288     A7 10 68 5C |  if_ne	wrlong	#8, fp
3228c     10 4E 85 51 |  if_ne	sub	fp, #16
32290                 | LR__4913
32290                 | LR__4914
32290     10 4E 05 F1 | 	add	fp, #16
32294     A7 26 0A FB | 	rdlong	local01, fp wz
32298     10 4E 85 F1 | 	sub	fp, #16
3229c     A8 01 90 5D |  if_ne	jmp	#LR__4918
322a0     0C 4E 05 F1 | 	add	fp, #12
322a4     A7 26 C2 FA | 	rdbyte	local01, fp
322a8     0C 4E 85 F1 | 	sub	fp, #12
322ac     08 26 CE F7 | 	test	local01, #8 wz
322b0     94 01 90 AD |  if_e	jmp	#LR__4918
322b4     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
322b8     54 4E 05 F1 | 	add	fp, #84
322bc     A7 FA 61 FC | 	wrlong	result1, fp
322c0     24 4E 85 F1 | 	sub	fp, #36
322c4     A7 12 02 FB | 	rdlong	arg01, fp
322c8     0E 12 06 F1 | 	add	arg01, #14
322cc     09 FB 61 FC | 	wrlong	result1, arg01
322d0     A7 12 02 FB | 	rdlong	arg01, fp
322d4     16 12 06 F1 | 	add	arg01, #22
322d8     24 4E 05 F1 | 	add	fp, #36
322dc     A7 14 02 FB | 	rdlong	arg02, fp
322e0     09 15 62 FC | 	wrlong	arg02, arg01
322e4     10 4E 85 F1 | 	sub	fp, #16
322e8     A7 12 02 FB | 	rdlong	arg01, fp
322ec     14 4E 85 F1 | 	sub	fp, #20
322f0     A7 14 02 FB | 	rdlong	arg02, fp
322f4     30 4E 85 F1 | 	sub	fp, #48
322f8     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
322fc     48 4E 05 F1 | 	add	fp, #72
32300     A7 FA 61 FC | 	wrlong	result1, fp
32304     18 4E 85 F1 | 	sub	fp, #24
32308     A7 26 02 FB | 	rdlong	local01, fp
3230c     0B 26 06 F1 | 	add	local01, #11
32310     13 41 48 FC | 	wrbyte	#32, local01
32314     14 4E 05 F1 | 	add	fp, #20
32318     A7 12 02 FB | 	rdlong	arg01, fp
3231c     14 4E 85 F1 | 	sub	fp, #20
32320     A7 14 02 FB | 	rdlong	arg02, fp
32324     30 4E 85 F1 | 	sub	fp, #48
32328     00 16 06 F6 | 	mov	arg03, #0
3232c     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
32330     30 4E 05 F1 | 	add	fp, #48
32334     A7 12 02 FB | 	rdlong	arg01, fp
32338     1C 12 06 F1 | 	add	arg01, #28
3233c     09 01 68 FC | 	wrlong	#0, arg01
32340     14 4E 05 F1 | 	add	fp, #20
32344     A7 26 02 FB | 	rdlong	local01, fp
32348     03 26 06 F1 | 	add	local01, #3
3234c     13 03 48 FC | 	wrbyte	#1, local01
32350     04 4E 05 F1 | 	add	fp, #4
32354     A7 26 0A FB | 	rdlong	local01, fp wz
32358     48 4E 85 F1 | 	sub	fp, #72
3235c     E8 00 90 AD |  if_e	jmp	#LR__4918
32360     44 4E 05 F1 | 	add	fp, #68
32364     A7 26 02 FB | 	rdlong	local01, fp
32368     30 26 06 F1 | 	add	local01, #48
3236c     13 27 02 FB | 	rdlong	local01, local01
32370     14 4E 05 F1 | 	add	fp, #20
32374     A7 26 62 FC | 	wrlong	local01, fp
32378     44 4E 85 F1 | 	sub	fp, #68
3237c     A7 12 02 F6 | 	mov	arg01, fp
32380     34 4E 05 F1 | 	add	fp, #52
32384     A7 14 02 FB | 	rdlong	arg02, fp
32388     48 4E 85 F1 | 	sub	fp, #72
3238c     00 16 06 F6 | 	mov	arg03, #0
32390     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
32394     10 4E 05 F1 | 	add	fp, #16
32398     A7 FA 61 FC | 	wrlong	result1, fp
3239c     10 4E 85 F1 | 	sub	fp, #16
323a0     00 FA 0D F2 | 	cmp	result1, #0 wz
323a4     A0 00 90 5D |  if_ne	jmp	#LR__4918
323a8     44 4E 05 F1 | 	add	fp, #68
323ac     A7 12 02 FB | 	rdlong	arg01, fp
323b0     14 4E 05 F1 | 	add	fp, #20
323b4     A7 14 02 FB | 	rdlong	arg02, fp
323b8     58 4E 85 F1 | 	sub	fp, #88
323bc     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
323c0     10 4E 05 F1 | 	add	fp, #16
323c4     A7 FA 61 FC | 	wrlong	result1, fp
323c8     34 4E 05 F1 | 	add	fp, #52
323cc     A7 18 02 FB | 	rdlong	arg04, fp
323d0     04 4E 05 F1 | 	add	fp, #4
323d4     A7 26 02 FB | 	rdlong	local01, fp
323d8     48 4E 85 F1 | 	sub	fp, #72
323dc     01 26 86 F1 | 	sub	local01, #1
323e0     10 18 06 F1 | 	add	arg04, #16
323e4     0C 27 62 FC | 	wrlong	local01, arg04
323e8     5C 00 90 FD | 	jmp	#LR__4918
323ec                 | LR__4915
323ec     10 4E 05 F1 | 	add	fp, #16
323f0     A7 18 0A FB | 	rdlong	arg04, fp wz
323f4     10 4E 85 F1 | 	sub	fp, #16
323f8     4C 00 90 5D |  if_ne	jmp	#LR__4917
323fc     1A 4E 05 F1 | 	add	fp, #26
32400     A7 18 C2 FA | 	rdbyte	arg04, fp
32404     1A 4E 85 F1 | 	sub	fp, #26
32408     10 18 CE F7 | 	test	arg04, #16 wz
3240c     10 4E 05 51 |  if_ne	add	fp, #16
32410     A7 08 68 5C |  if_ne	wrlong	#4, fp
32414     10 4E 85 51 |  if_ne	sub	fp, #16
32418     2C 00 90 5D |  if_ne	jmp	#LR__4916
3241c     0C 4E 05 F1 | 	add	fp, #12
32420     A7 18 C2 FA | 	rdbyte	arg04, fp
32424     0C 4E 85 F1 | 	sub	fp, #12
32428     02 18 CE F7 | 	test	arg04, #2 wz
3242c     1A 4E 05 51 |  if_ne	add	fp, #26
32430     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
32434     1A 4E 85 51 |  if_ne	sub	fp, #26
32438     01 26 CE 57 |  if_ne	test	local01, #1 wz
3243c     10 4E 05 51 |  if_ne	add	fp, #16
32440     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32444     10 4E 85 51 |  if_ne	sub	fp, #16
32448                 | LR__4916
32448                 | LR__4917
32448                 | LR__4918
32448     10 4E 05 F1 | 	add	fp, #16
3244c     A7 26 0A FB | 	rdlong	local01, fp wz
32450     10 4E 85 F1 | 	sub	fp, #16
32454     60 00 90 5D |  if_ne	jmp	#LR__4919
32458     0C 4E 05 F1 | 	add	fp, #12
3245c     A7 28 C2 FA | 	rdbyte	local02, fp
32460     0C 4E 85 F1 | 	sub	fp, #12
32464     08 28 CE F7 | 	test	local02, #8 wz
32468     0C 4E 05 51 |  if_ne	add	fp, #12
3246c     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
32470     40 28 46 55 |  if_ne	or	local02, #64
32474     A7 28 42 5C |  if_ne	wrbyte	local02, fp
32478     0C 4E 85 51 |  if_ne	sub	fp, #12
3247c     04 4E 05 F1 | 	add	fp, #4
32480     A7 28 02 FB | 	rdlong	local02, fp
32484     40 4E 05 F1 | 	add	fp, #64
32488     A7 26 02 FB | 	rdlong	local01, fp
3248c     30 26 06 F1 | 	add	local01, #48
32490     13 27 02 FB | 	rdlong	local01, local01
32494     20 28 06 F1 | 	add	local02, #32
32498     14 27 62 FC | 	wrlong	local01, local02
3249c     40 4E 85 F1 | 	sub	fp, #64
324a0     A7 28 02 FB | 	rdlong	local02, fp
324a4     2C 4E 05 F1 | 	add	fp, #44
324a8     A7 26 02 FB | 	rdlong	local01, fp
324ac     30 4E 85 F1 | 	sub	fp, #48
324b0     24 28 06 F1 | 	add	local02, #36
324b4     14 27 62 FC | 	wrlong	local01, local02
324b8                 | LR__4919
324b8     10 4E 05 F1 | 	add	fp, #16
324bc     A7 28 0A FB | 	rdlong	local02, fp wz
324c0     10 4E 85 F1 | 	sub	fp, #16
324c4     F4 02 90 5D |  if_ne	jmp	#LR__4925
324c8     04 4E 05 F1 | 	add	fp, #4
324cc     A7 28 02 FB | 	rdlong	local02, fp
324d0     40 4E 05 F1 | 	add	fp, #64
324d4     A7 12 02 FB | 	rdlong	arg01, fp
324d8     14 4E 85 F1 | 	sub	fp, #20
324dc     A7 14 02 FB | 	rdlong	arg02, fp
324e0     30 4E 85 F1 | 	sub	fp, #48
324e4     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
324e8     08 28 06 F1 | 	add	local02, #8
324ec     14 FB 61 FC | 	wrlong	result1, local02
324f0     04 4E 05 F1 | 	add	fp, #4
324f4     A7 28 02 FB | 	rdlong	local02, fp
324f8     2C 4E 05 F1 | 	add	fp, #44
324fc     A7 12 02 FB | 	rdlong	arg01, fp
32500     1C 12 06 F1 | 	add	arg01, #28
32504                 | ' {
32504                 | ' 
32504                 | ' 	return *((DWORD*)ptr);
32504     09 FB 01 FB | 	rdlong	result1, arg01
32508     0C 28 06 F1 | 	add	local02, #12
3250c     14 FB 61 FC | 	wrlong	result1, local02
32510     2C 4E 85 F1 | 	sub	fp, #44
32514     A7 28 02 FB | 	rdlong	local02, fp
32518     40 4E 05 F1 | 	add	fp, #64
3251c     A7 26 02 FB | 	rdlong	local01, fp
32520     14 27 62 FC | 	wrlong	local01, local02
32524     40 4E 85 F1 | 	sub	fp, #64
32528     A7 28 02 FB | 	rdlong	local02, fp
3252c     40 4E 05 F1 | 	add	fp, #64
32530     A7 26 02 FB | 	rdlong	local01, fp
32534     06 26 06 F1 | 	add	local01, #6
32538     13 27 E2 FA | 	rdword	local01, local01
3253c     04 28 06 F1 | 	add	local02, #4
32540     14 27 52 FC | 	wrword	local01, local02
32544     40 4E 85 F1 | 	sub	fp, #64
32548     A7 28 02 FB | 	rdlong	local02, fp
3254c     08 4E 05 F1 | 	add	fp, #8
32550     A7 26 C2 FA | 	rdbyte	local01, fp
32554     10 28 06 F1 | 	add	local02, #16
32558     14 27 42 FC | 	wrbyte	local01, local02
3255c     08 4E 85 F1 | 	sub	fp, #8
32560     A7 28 02 FB | 	rdlong	local02, fp
32564     11 28 06 F1 | 	add	local02, #17
32568     14 01 48 FC | 	wrbyte	#0, local02
3256c     A7 28 02 FB | 	rdlong	local02, fp
32570     1C 28 06 F1 | 	add	local02, #28
32574     14 01 68 FC | 	wrlong	#0, local02
32578     A7 28 02 FB | 	rdlong	local02, fp
3257c     14 28 06 F1 | 	add	local02, #20
32580     14 01 68 FC | 	wrlong	#0, local02
32584     A7 12 02 FB | 	rdlong	arg01, fp
32588     04 4E 85 F1 | 	sub	fp, #4
3258c     28 12 06 F1 | 	add	arg01, #40
32590     00 14 06 F6 | 	mov	arg02, #0
32594     09 16 C6 F9 | 	decod	arg03, #9
32598     98 00 A0 FD | 	call	#\builtin_bytefill_
3259c     0C 4E 05 F1 | 	add	fp, #12
325a0     A7 28 C2 FA | 	rdbyte	local02, fp
325a4     0C 4E 85 F1 | 	sub	fp, #12
325a8     20 28 CE F7 | 	test	local02, #32 wz
325ac     0C 02 90 AD |  if_e	jmp	#LR__4924
325b0     04 4E 05 F1 | 	add	fp, #4
325b4     A7 26 02 FB | 	rdlong	local01, fp
325b8     04 4E 85 F1 | 	sub	fp, #4
325bc     0C 26 06 F1 | 	add	local01, #12
325c0     13 29 02 FB | 	rdlong	local02, local01
325c4     01 28 16 F2 | 	cmp	local02, #1 wc
325c8     F0 01 90 CD |  if_b	jmp	#LR__4924
325cc     04 4E 05 F1 | 	add	fp, #4
325d0     A7 26 02 FB | 	rdlong	local01, fp
325d4     13 29 02 F6 | 	mov	local02, local01
325d8     0C 26 06 F1 | 	add	local01, #12
325dc     13 27 02 FB | 	rdlong	local01, local01
325e0     14 28 06 F1 | 	add	local02, #20
325e4     14 27 62 FC | 	wrlong	local01, local02
325e8     40 4E 05 F1 | 	add	fp, #64
325ec     A7 28 02 FB | 	rdlong	local02, fp
325f0     0A 28 06 F1 | 	add	local02, #10
325f4     14 29 E2 FA | 	rdword	local02, local02
325f8     09 28 66 F0 | 	shl	local02, #9
325fc     08 4E 05 F1 | 	add	fp, #8
32600     A7 28 62 FC | 	wrlong	local02, fp
32604     48 4E 85 F1 | 	sub	fp, #72
32608     A7 28 02 FB | 	rdlong	local02, fp
3260c     08 28 06 F1 | 	add	local02, #8
32610     14 27 02 FB | 	rdlong	local01, local02
32614     4C 4E 05 F1 | 	add	fp, #76
32618     A7 26 62 FC | 	wrlong	local01, fp
3261c                 | ' 				fp->fptr = fp->obj.objsize;
3261c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
3261c                 | ' 				clst = fp->obj.sclust;
3261c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
3261c     4C 4E 85 F1 | 	sub	fp, #76
32620     A7 28 02 FB | 	rdlong	local02, fp
32624     0C 28 06 F1 | 	add	local02, #12
32628     14 27 02 FB | 	rdlong	local01, local02
3262c     58 4E 05 F1 | 	add	fp, #88
32630     A7 26 62 FC | 	wrlong	local01, fp
32634     5C 4E 85 F1 | 	sub	fp, #92
32638                 | LR__4920
32638     10 4E 05 F1 | 	add	fp, #16
3263c     A7 28 0A FB | 	rdlong	local02, fp wz
32640     10 4E 85 F1 | 	sub	fp, #16
32644     94 00 90 5D |  if_ne	jmp	#LR__4921
32648     5C 4E 05 F1 | 	add	fp, #92
3264c     A7 28 02 FB | 	rdlong	local02, fp
32650     10 4E 85 F1 | 	sub	fp, #16
32654     A7 26 02 FB | 	rdlong	local01, fp
32658     4C 4E 85 F1 | 	sub	fp, #76
3265c     13 29 1A F2 | 	cmp	local02, local01 wcz
32660     78 00 90 ED |  if_be	jmp	#LR__4921
32664     04 4E 05 F1 | 	add	fp, #4
32668     A7 12 02 FB | 	rdlong	arg01, fp
3266c     4C 4E 05 F1 | 	add	fp, #76
32670     A7 14 02 FB | 	rdlong	arg02, fp
32674     50 4E 85 F1 | 	sub	fp, #80
32678     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
3267c     50 4E 05 F1 | 	add	fp, #80
32680     A7 FA 61 FC | 	wrlong	result1, fp
32684     50 4E 85 F1 | 	sub	fp, #80
32688     02 FA 15 F2 | 	cmp	result1, #2 wc
3268c     10 4E 05 C1 |  if_b	add	fp, #16
32690     A7 04 68 CC |  if_b	wrlong	#2, fp
32694     10 4E 85 C1 |  if_b	sub	fp, #16
32698     50 4E 05 F1 | 	add	fp, #80
3269c     A7 28 02 FB | 	rdlong	local02, fp
326a0     50 4E 85 F1 | 	sub	fp, #80
326a4     FF FF 7F FF 
326a8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
326ac     10 4E 05 A1 |  if_e	add	fp, #16
326b0     A7 02 68 AC |  if_e	wrlong	#1, fp
326b4     10 4E 85 A1 |  if_e	sub	fp, #16
326b8     5C 4E 05 F1 | 	add	fp, #92
326bc     A7 28 02 FB | 	rdlong	local02, fp
326c0     10 4E 85 F1 | 	sub	fp, #16
326c4     A7 26 02 FB | 	rdlong	local01, fp
326c8     13 29 82 F1 | 	sub	local02, local01
326cc     10 4E 05 F1 | 	add	fp, #16
326d0     A7 28 62 FC | 	wrlong	local02, fp
326d4     5C 4E 85 F1 | 	sub	fp, #92
326d8     5C FF 9F FD | 	jmp	#LR__4920
326dc                 | LR__4921
326dc     04 4E 05 F1 | 	add	fp, #4
326e0     A7 28 02 FB | 	rdlong	local02, fp
326e4     4C 4E 05 F1 | 	add	fp, #76
326e8     A7 26 02 FB | 	rdlong	local01, fp
326ec     18 28 06 F1 | 	add	local02, #24
326f0     14 27 62 FC | 	wrlong	local01, local02
326f4     40 4E 85 F1 | 	sub	fp, #64
326f8     A7 28 0A FB | 	rdlong	local02, fp wz
326fc     10 4E 85 F1 | 	sub	fp, #16
32700     B8 00 90 5D |  if_ne	jmp	#LR__4923
32704     5C 4E 05 F1 | 	add	fp, #92
32708     A7 26 02 FB | 	rdlong	local01, fp
3270c     5C 4E 85 F1 | 	sub	fp, #92
32710     FF 27 CE F7 | 	test	local01, #511 wz
32714     A4 00 90 AD |  if_e	jmp	#LR__4923
32718     44 4E 05 F1 | 	add	fp, #68
3271c     A7 12 02 FB | 	rdlong	arg01, fp
32720     0C 4E 05 F1 | 	add	fp, #12
32724     A7 14 02 FB | 	rdlong	arg02, fp
32728     50 4E 85 F1 | 	sub	fp, #80
3272c     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
32730     58 4E 05 F1 | 	add	fp, #88
32734     A7 FA 61 FC | 	wrlong	result1, fp
32738     00 FA 4D F2 | 	cmps	result1, #0 wz
3273c     58 4E 85 F1 | 	sub	fp, #88
32740     10 4E 05 A1 |  if_e	add	fp, #16
32744     A7 04 68 AC |  if_e	wrlong	#2, fp
32748     10 4E 85 A1 |  if_e	sub	fp, #16
3274c     6C 00 90 AD |  if_e	jmp	#LR__4922
32750     04 4E 05 F1 | 	add	fp, #4
32754     A7 28 02 FB | 	rdlong	local02, fp
32758     54 4E 05 F1 | 	add	fp, #84
3275c     A7 26 02 FB | 	rdlong	local01, fp
32760     04 4E 05 F1 | 	add	fp, #4
32764     A7 18 02 FB | 	rdlong	arg04, fp
32768     09 18 46 F0 | 	shr	arg04, #9
3276c     0C 27 02 F1 | 	add	local01, arg04
32770     1C 28 06 F1 | 	add	local02, #28
32774     14 27 62 FC | 	wrlong	local01, local02
32778     18 4E 85 F1 | 	sub	fp, #24
3277c     A7 28 02 FB | 	rdlong	local02, fp
32780     01 28 06 F1 | 	add	local02, #1
32784     14 13 C2 FA | 	rdbyte	arg01, local02
32788     40 4E 85 F1 | 	sub	fp, #64
3278c     A7 28 02 FB | 	rdlong	local02, fp
32790     14 15 02 F6 | 	mov	arg02, local02
32794     28 14 06 F1 | 	add	arg02, #40
32798     04 4E 85 F1 | 	sub	fp, #4
3279c     1C 28 06 F1 | 	add	local02, #28
327a0     14 17 02 FB | 	rdlong	arg03, local02
327a4     01 18 06 F6 | 	mov	arg04, #1
327a8     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
327ac     00 FA 0D F2 | 	cmp	result1, #0 wz
327b0     10 4E 05 51 |  if_ne	add	fp, #16
327b4     A7 02 68 5C |  if_ne	wrlong	#1, fp
327b8     10 4E 85 51 |  if_ne	sub	fp, #16
327bc                 | LR__4922
327bc                 | LR__4923
327bc                 | LR__4924
327bc                 | LR__4925
327bc                 | LR__4926
327bc     10 4E 05 F1 | 	add	fp, #16
327c0     A7 28 0A FB | 	rdlong	local02, fp wz
327c4     10 4E 85 F1 | 	sub	fp, #16
327c8     04 4E 05 51 |  if_ne	add	fp, #4
327cc     A7 28 02 5B |  if_ne	rdlong	local02, fp
327d0     04 4E 85 51 |  if_ne	sub	fp, #4
327d4     14 01 68 5C |  if_ne	wrlong	#0, local02
327d8                 | ' 
327d8                 | ' 	return res ;
327d8     10 4E 05 F1 | 	add	fp, #16
327dc     A7 FA 01 FB | 	rdlong	result1, fp
327e0     10 4E 85 F1 | 	sub	fp, #16
327e4                 | LR__4927
327e4     A7 F0 03 F6 | 	mov	ptra, fp
327e8     B2 00 A0 FD | 	call	#popregs_
327ec                 | _fatfs_cc_f_open_ret
327ec     2D 00 64 FD | 	ret
327f0                 | 
327f0                 | _fatfs_cc_f_read
327f0     0E 4A 05 F6 | 	mov	COUNT_, #14
327f4     A8 00 A0 FD | 	call	#pushregs_
327f8     38 F0 07 F1 | 	add	ptra, #56
327fc     04 4E 05 F1 | 	add	fp, #4
32800     A7 12 62 FC | 	wrlong	arg01, fp
32804     04 4E 05 F1 | 	add	fp, #4
32808     A7 14 62 FC | 	wrlong	arg02, fp
3280c     04 4E 05 F1 | 	add	fp, #4
32810     A7 16 62 FC | 	wrlong	arg03, fp
32814     04 4E 05 F1 | 	add	fp, #4
32818     A7 18 62 FC | 	wrlong	arg04, fp
3281c     08 4E 85 F1 | 	sub	fp, #8
32820     A7 FA 01 FB | 	rdlong	result1, fp
32824     2C 4E 05 F1 | 	add	fp, #44
32828     A7 FA 61 FC | 	wrlong	result1, fp
3282c     24 4E 85 F1 | 	sub	fp, #36
32830     A7 FA 01 FB | 	rdlong	result1, fp
32834     FD 00 68 FC | 	wrlong	#0, result1
32838     0C 4E 85 F1 | 	sub	fp, #12
3283c     A7 12 02 FB | 	rdlong	arg01, fp
32840     14 4E 05 F1 | 	add	fp, #20
32844     A7 14 02 F6 | 	mov	arg02, fp
32848     18 4E 85 F1 | 	sub	fp, #24
3284c     24 F7 BF FD | 	call	#_fatfs_cc_validate
32850     14 4E 05 F1 | 	add	fp, #20
32854     A7 FA 61 FC | 	wrlong	result1, fp
32858     00 FA 4D F2 | 	cmps	result1, #0 wz
3285c     14 4E 85 F1 | 	sub	fp, #20
32860     20 00 90 5D |  if_ne	jmp	#LR__4930
32864     04 4E 05 F1 | 	add	fp, #4
32868     A7 14 02 FB | 	rdlong	arg02, fp
3286c     11 14 06 F1 | 	add	arg02, #17
32870     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32874     10 4E 05 F1 | 	add	fp, #16
32878     A7 14 62 FC | 	wrlong	arg02, fp
3287c     14 4E 85 F1 | 	sub	fp, #20
32880     10 00 90 AD |  if_e	jmp	#LR__4931
32884                 | LR__4930
32884     14 4E 05 F1 | 	add	fp, #20
32888     A7 FA 01 FB | 	rdlong	result1, fp
3288c     14 4E 85 F1 | 	sub	fp, #20
32890     EC 05 90 FD | 	jmp	#LR__4950
32894                 | LR__4931
32894     04 4E 05 F1 | 	add	fp, #4
32898     A7 18 02 FB | 	rdlong	arg04, fp
3289c     04 4E 85 F1 | 	sub	fp, #4
328a0     10 18 06 F1 | 	add	arg04, #16
328a4     0C 19 C2 FA | 	rdbyte	arg04, arg04
328a8     01 18 CE F7 | 	test	arg04, #1 wz
328ac     07 FA 05 A6 |  if_e	mov	result1, #7
328b0     CC 05 90 AD |  if_e	jmp	#LR__4950
328b4     04 4E 05 F1 | 	add	fp, #4
328b8     A7 26 02 FB | 	rdlong	local01, fp
328bc     13 29 02 F6 | 	mov	local02, local01
328c0     0C 28 06 F1 | 	add	local02, #12
328c4     14 2B 02 FB | 	rdlong	local03, local02
328c8     14 26 06 F1 | 	add	local01, #20
328cc     13 27 02 FB | 	rdlong	local01, local01
328d0     13 2B 82 F1 | 	sub	local03, local01
328d4     20 4E 05 F1 | 	add	fp, #32
328d8     A7 2A 62 FC | 	wrlong	local03, fp
328dc     18 4E 85 F1 | 	sub	fp, #24
328e0     A7 2C 02 FB | 	rdlong	local04, fp
328e4     0C 4E 85 F1 | 	sub	fp, #12
328e8     15 2D 1A F2 | 	cmp	local04, local03 wcz
328ec     24 4E 05 11 |  if_a	add	fp, #36
328f0     A7 2C 02 1B |  if_a	rdlong	local04, fp
328f4     18 4E 85 11 |  if_a	sub	fp, #24
328f8     A7 2C 62 1C |  if_a	wrlong	local04, fp
328fc     0C 4E 85 11 |  if_a	sub	fp, #12
32900                 | ' 
32900                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
32900                 | LR__4932
32900     0C 4E 05 F1 | 	add	fp, #12
32904     A7 28 02 FB | 	rdlong	local02, fp
32908     0C 4E 85 F1 | 	sub	fp, #12
3290c     14 2D 02 F6 | 	mov	local04, local02
32910     01 2C 16 F2 | 	cmp	local04, #1 wc
32914     64 05 90 CD |  if_b	jmp	#LR__4949
32918     04 4E 05 F1 | 	add	fp, #4
3291c     A7 2A 02 FB | 	rdlong	local03, fp
32920     04 4E 85 F1 | 	sub	fp, #4
32924     14 2A 06 F1 | 	add	local03, #20
32928     15 2B 02 FB | 	rdlong	local03, local03
3292c     FF 2B CE F7 | 	test	local03, #511 wz
32930     3C 04 90 5D |  if_ne	jmp	#LR__4947
32934     04 4E 05 F1 | 	add	fp, #4
32938     A7 26 02 FB | 	rdlong	local01, fp
3293c     14 26 06 F1 | 	add	local01, #20
32940     13 2B 02 FB | 	rdlong	local03, local01
32944     09 2A 46 F0 | 	shr	local03, #9
32948     14 4E 05 F1 | 	add	fp, #20
3294c     A7 2E 02 FB | 	rdlong	local05, fp
32950     17 31 02 F6 | 	mov	local06, local05
32954     0A 30 06 F1 | 	add	local06, #10
32958     18 33 E2 FA | 	rdword	local07, local06
3295c     0A 30 86 F1 | 	sub	local06, #10
32960     19 35 32 F9 | 	getword	local08, local07, #0
32964     01 34 86 F1 | 	sub	local08, #1
32968     1A 2B 0A F5 | 	and	local03, local08 wz
3296c     18 4E 05 F1 | 	add	fp, #24
32970     A7 2A 62 FC | 	wrlong	local03, fp
32974     30 4E 85 F1 | 	sub	fp, #48
32978     E0 00 90 5D |  if_ne	jmp	#LR__4937
3297c     04 4E 05 F1 | 	add	fp, #4
32980     A7 2A 02 FB | 	rdlong	local03, fp
32984     04 4E 85 F1 | 	sub	fp, #4
32988     14 2A 06 F1 | 	add	local03, #20
3298c     15 2B 0A FB | 	rdlong	local03, local03 wz
32990     20 00 90 5D |  if_ne	jmp	#LR__4933
32994     04 4E 05 F1 | 	add	fp, #4
32998     A7 2A 02 FB | 	rdlong	local03, fp
3299c     08 2A 06 F1 | 	add	local03, #8
329a0     15 2B 02 FB | 	rdlong	local03, local03
329a4     18 4E 05 F1 | 	add	fp, #24
329a8     A7 2A 62 FC | 	wrlong	local03, fp
329ac     1C 4E 85 F1 | 	sub	fp, #28
329b0     28 00 90 FD | 	jmp	#LR__4934
329b4                 | LR__4933
329b4     04 4E 05 F1 | 	add	fp, #4
329b8     A7 34 02 FB | 	rdlong	local08, fp
329bc     1A 13 02 F6 | 	mov	arg01, local08
329c0     04 4E 85 F1 | 	sub	fp, #4
329c4     18 34 06 F1 | 	add	local08, #24
329c8     1A 15 02 FB | 	rdlong	arg02, local08
329cc     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
329d0     1C 4E 05 F1 | 	add	fp, #28
329d4     A7 FA 61 FC | 	wrlong	result1, fp
329d8     1C 4E 85 F1 | 	sub	fp, #28
329dc                 | LR__4934
329dc     1C 4E 05 F1 | 	add	fp, #28
329e0     A7 2A 02 FB | 	rdlong	local03, fp
329e4     1C 4E 85 F1 | 	sub	fp, #28
329e8     02 2A 16 F2 | 	cmp	local03, #2 wc
329ec     1C 00 90 3D |  if_ae	jmp	#LR__4935
329f0     04 4E 05 F1 | 	add	fp, #4
329f4     A7 2A 02 FB | 	rdlong	local03, fp
329f8     04 4E 85 F1 | 	sub	fp, #4
329fc     11 2A 06 F1 | 	add	local03, #17
32a00     15 05 48 FC | 	wrbyte	#2, local03
32a04     02 FA 05 F6 | 	mov	result1, #2
32a08     74 04 90 FD | 	jmp	#LR__4950
32a0c                 | LR__4935
32a0c     1C 4E 05 F1 | 	add	fp, #28
32a10     A7 2A 02 FB | 	rdlong	local03, fp
32a14     1C 4E 85 F1 | 	sub	fp, #28
32a18     FF FF 7F FF 
32a1c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
32a20     1C 00 90 5D |  if_ne	jmp	#LR__4936
32a24     04 4E 05 F1 | 	add	fp, #4
32a28     A7 2A 02 FB | 	rdlong	local03, fp
32a2c     04 4E 85 F1 | 	sub	fp, #4
32a30     11 2A 06 F1 | 	add	local03, #17
32a34     15 03 48 FC | 	wrbyte	#1, local03
32a38     01 FA 05 F6 | 	mov	result1, #1
32a3c     40 04 90 FD | 	jmp	#LR__4950
32a40                 | LR__4936
32a40     04 4E 05 F1 | 	add	fp, #4
32a44     A7 2A 02 FB | 	rdlong	local03, fp
32a48     18 4E 05 F1 | 	add	fp, #24
32a4c     A7 34 02 FB | 	rdlong	local08, fp
32a50     1C 4E 85 F1 | 	sub	fp, #28
32a54     18 2A 06 F1 | 	add	local03, #24
32a58     15 35 62 FC | 	wrlong	local08, local03
32a5c                 | LR__4937
32a5c     18 4E 05 F1 | 	add	fp, #24
32a60     A7 12 02 FB | 	rdlong	arg01, fp
32a64     14 4E 85 F1 | 	sub	fp, #20
32a68     A7 2A 02 FB | 	rdlong	local03, fp
32a6c     04 4E 85 F1 | 	sub	fp, #4
32a70     18 2A 06 F1 | 	add	local03, #24
32a74     15 15 02 FB | 	rdlong	arg02, local03
32a78     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
32a7c     20 4E 05 F1 | 	add	fp, #32
32a80     A7 FA 61 FC | 	wrlong	result1, fp
32a84     20 4E 85 F1 | 	sub	fp, #32
32a88     00 FA 0D F2 | 	cmp	result1, #0 wz
32a8c     1C 00 90 5D |  if_ne	jmp	#LR__4938
32a90     04 4E 05 F1 | 	add	fp, #4
32a94     A7 2A 02 FB | 	rdlong	local03, fp
32a98     04 4E 85 F1 | 	sub	fp, #4
32a9c     11 2A 06 F1 | 	add	local03, #17
32aa0     15 05 48 FC | 	wrbyte	#2, local03
32aa4     02 FA 05 F6 | 	mov	result1, #2
32aa8     D4 03 90 FD | 	jmp	#LR__4950
32aac                 | LR__4938
32aac     20 4E 05 F1 | 	add	fp, #32
32ab0     A7 2A 02 FB | 	rdlong	local03, fp
32ab4     10 4E 05 F1 | 	add	fp, #16
32ab8     A7 34 02 FB | 	rdlong	local08, fp
32abc     1A 2B 02 F1 | 	add	local03, local08
32ac0     10 4E 85 F1 | 	sub	fp, #16
32ac4     A7 2A 62 FC | 	wrlong	local03, fp
32ac8     14 4E 85 F1 | 	sub	fp, #20
32acc     A7 2A 02 FB | 	rdlong	local03, fp
32ad0     09 2A 46 F0 | 	shr	local03, #9
32ad4     20 4E 05 F1 | 	add	fp, #32
32ad8     A7 2A 62 FC | 	wrlong	local03, fp
32adc     2C 4E 85 F1 | 	sub	fp, #44
32ae0     01 2A 16 F2 | 	cmp	local03, #1 wc
32ae4     5C 01 90 CD |  if_b	jmp	#LR__4942
32ae8     30 4E 05 F1 | 	add	fp, #48
32aec     A7 2A 02 FB | 	rdlong	local03, fp
32af0     04 4E 85 F1 | 	sub	fp, #4
32af4     A7 34 02 FB | 	rdlong	local08, fp
32af8     1A 2B 02 F1 | 	add	local03, local08
32afc     14 4E 85 F1 | 	sub	fp, #20
32b00     A7 34 02 FB | 	rdlong	local08, fp
32b04     18 4E 85 F1 | 	sub	fp, #24
32b08     0A 34 06 F1 | 	add	local08, #10
32b0c     1A 35 E2 FA | 	rdword	local08, local08
32b10     1A 2B 1A F2 | 	cmp	local03, local08 wcz
32b14     28 00 90 ED |  if_be	jmp	#LR__4939
32b18     18 4E 05 F1 | 	add	fp, #24
32b1c     A7 26 02 FB | 	rdlong	local01, fp
32b20     0A 26 06 F1 | 	add	local01, #10
32b24     13 2B E2 FA | 	rdword	local03, local01
32b28     18 4E 05 F1 | 	add	fp, #24
32b2c     A7 34 02 FB | 	rdlong	local08, fp
32b30     1A 2B 82 F1 | 	sub	local03, local08
32b34     04 4E 85 F1 | 	sub	fp, #4
32b38     A7 2A 62 FC | 	wrlong	local03, fp
32b3c     2C 4E 85 F1 | 	sub	fp, #44
32b40                 | LR__4939
32b40     18 4E 05 F1 | 	add	fp, #24
32b44     A7 26 02 FB | 	rdlong	local01, fp
32b48     01 26 06 F1 | 	add	local01, #1
32b4c     13 13 C2 FA | 	rdbyte	arg01, local01
32b50     1C 4E 05 F1 | 	add	fp, #28
32b54     A7 14 02 FB | 	rdlong	arg02, fp
32b58     14 4E 85 F1 | 	sub	fp, #20
32b5c     A7 16 02 FB | 	rdlong	arg03, fp
32b60     0C 4E 05 F1 | 	add	fp, #12
32b64     A7 18 02 FB | 	rdlong	arg04, fp
32b68     2C 4E 85 F1 | 	sub	fp, #44
32b6c     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
32b70     00 FA 0D F2 | 	cmp	result1, #0 wz
32b74     1C 00 90 AD |  if_e	jmp	#LR__4940
32b78     04 4E 05 F1 | 	add	fp, #4
32b7c     A7 2A 02 FB | 	rdlong	local03, fp
32b80     04 4E 85 F1 | 	sub	fp, #4
32b84     11 2A 06 F1 | 	add	local03, #17
32b88     15 03 48 FC | 	wrbyte	#1, local03
32b8c     01 FA 05 F6 | 	mov	result1, #1
32b90     EC 02 90 FD | 	jmp	#LR__4950
32b94                 | LR__4940
32b94     04 4E 05 F1 | 	add	fp, #4
32b98     A7 26 02 FB | 	rdlong	local01, fp
32b9c     04 4E 85 F1 | 	sub	fp, #4
32ba0     10 26 06 F1 | 	add	local01, #16
32ba4     13 2B C2 FA | 	rdbyte	local03, local01
32ba8     80 2A CE F7 | 	test	local03, #128 wz
32bac     78 00 90 AD |  if_e	jmp	#LR__4941
32bb0     04 4E 05 F1 | 	add	fp, #4
32bb4     A7 34 02 FB | 	rdlong	local08, fp
32bb8     1C 34 06 F1 | 	add	local08, #28
32bbc     1A 35 02 FB | 	rdlong	local08, local08
32bc0     1C 4E 05 F1 | 	add	fp, #28
32bc4     A7 36 02 FB | 	rdlong	local09, fp
32bc8     1B 35 82 F1 | 	sub	local08, local09
32bcc     0C 4E 05 F1 | 	add	fp, #12
32bd0     A7 38 02 FB | 	rdlong	local10, fp
32bd4     2C 4E 85 F1 | 	sub	fp, #44
32bd8     1C 3B 02 F6 | 	mov	local11, local10
32bdc     1D 35 12 F2 | 	cmp	local08, local11 wc
32be0     44 00 90 3D |  if_ae	jmp	#LR__4941
32be4     34 4E 05 F1 | 	add	fp, #52
32be8     A7 12 02 FB | 	rdlong	arg01, fp
32bec     30 4E 85 F1 | 	sub	fp, #48
32bf0     A7 14 02 FB | 	rdlong	arg02, fp
32bf4     0A 3B 02 F6 | 	mov	local11, arg02
32bf8     1C 3A 06 F1 | 	add	local11, #28
32bfc     1D 37 02 FB | 	rdlong	local09, local11
32c00     1C 4E 05 F1 | 	add	fp, #28
32c04     A7 2E 02 FB | 	rdlong	local05, fp
32c08     17 37 82 F1 | 	sub	local09, local05
32c0c     09 36 66 F0 | 	shl	local09, #9
32c10     1B 3B 02 F6 | 	mov	local11, local09
32c14     1B 13 02 F1 | 	add	arg01, local09
32c18     20 4E 85 F1 | 	sub	fp, #32
32c1c     28 14 06 F1 | 	add	arg02, #40
32c20     09 16 C6 F9 | 	decod	arg03, #9
32c24     F4 42 BF FD | 	call	#__system____builtin_memmove
32c28                 | LR__4941
32c28     2C 4E 05 F1 | 	add	fp, #44
32c2c     A7 2A 02 FB | 	rdlong	local03, fp
32c30     09 2A 66 F0 | 	shl	local03, #9
32c34     04 4E 85 F1 | 	sub	fp, #4
32c38     A7 2A 62 FC | 	wrlong	local03, fp
32c3c     28 4E 85 F1 | 	sub	fp, #40
32c40                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
32c40                 | ' 				}
32c40                 | ' 
32c40                 | ' 
32c40                 | ' 				rcnt =  ((UINT) 512 )  * cc;
32c40                 | ' 				continue;
32c40     B4 01 90 FD | 	jmp	#LR__4948
32c44                 | LR__4942
32c44     04 4E 05 F1 | 	add	fp, #4
32c48     A7 2A 02 FB | 	rdlong	local03, fp
32c4c     1C 2A 06 F1 | 	add	local03, #28
32c50     15 2B 02 FB | 	rdlong	local03, local03
32c54     1C 4E 05 F1 | 	add	fp, #28
32c58     A7 26 02 FB | 	rdlong	local01, fp
32c5c     20 4E 85 F1 | 	sub	fp, #32
32c60     13 2B 0A F2 | 	cmp	local03, local01 wz
32c64     EC 00 90 AD |  if_e	jmp	#LR__4946
32c68     04 4E 05 F1 | 	add	fp, #4
32c6c     A7 26 02 FB | 	rdlong	local01, fp
32c70     04 4E 85 F1 | 	sub	fp, #4
32c74     10 26 06 F1 | 	add	local01, #16
32c78     13 2B C2 FA | 	rdbyte	local03, local01
32c7c     80 2A CE F7 | 	test	local03, #128 wz
32c80     7C 00 90 AD |  if_e	jmp	#LR__4944
32c84     18 4E 05 F1 | 	add	fp, #24
32c88     A7 26 02 FB | 	rdlong	local01, fp
32c8c     01 26 06 F1 | 	add	local01, #1
32c90     13 13 C2 FA | 	rdbyte	arg01, local01
32c94     14 4E 85 F1 | 	sub	fp, #20
32c98     A7 2A 02 FB | 	rdlong	local03, fp
32c9c     15 15 02 F6 | 	mov	arg02, local03
32ca0     28 14 06 F1 | 	add	arg02, #40
32ca4     04 4E 85 F1 | 	sub	fp, #4
32ca8     1C 2A 06 F1 | 	add	local03, #28
32cac     15 17 02 FB | 	rdlong	arg03, local03
32cb0     01 18 06 F6 | 	mov	arg04, #1
32cb4     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
32cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
32cbc     1C 00 90 AD |  if_e	jmp	#LR__4943
32cc0     04 4E 05 F1 | 	add	fp, #4
32cc4     A7 2A 02 FB | 	rdlong	local03, fp
32cc8     04 4E 85 F1 | 	sub	fp, #4
32ccc     11 2A 06 F1 | 	add	local03, #17
32cd0     15 03 48 FC | 	wrbyte	#1, local03
32cd4     01 FA 05 F6 | 	mov	result1, #1
32cd8     A4 01 90 FD | 	jmp	#LR__4950
32cdc                 | LR__4943
32cdc     04 4E 05 F1 | 	add	fp, #4
32ce0     A7 3A 02 FB | 	rdlong	local11, fp
32ce4     1D 2B 02 F6 | 	mov	local03, local11
32ce8     04 4E 85 F1 | 	sub	fp, #4
32cec     10 3A 06 F1 | 	add	local11, #16
32cf0     1D 3B C2 FA | 	rdbyte	local11, local11
32cf4     7F 3A 06 F5 | 	and	local11, #127
32cf8     10 2A 06 F1 | 	add	local03, #16
32cfc     15 3B 42 FC | 	wrbyte	local11, local03
32d00                 | LR__4944
32d00     18 4E 05 F1 | 	add	fp, #24
32d04     A7 26 02 FB | 	rdlong	local01, fp
32d08     01 26 06 F1 | 	add	local01, #1
32d0c     13 13 C2 FA | 	rdbyte	arg01, local01
32d10     14 4E 85 F1 | 	sub	fp, #20
32d14     A7 14 02 FB | 	rdlong	arg02, fp
32d18     28 14 06 F1 | 	add	arg02, #40
32d1c     1C 4E 05 F1 | 	add	fp, #28
32d20     A7 16 02 FB | 	rdlong	arg03, fp
32d24     20 4E 85 F1 | 	sub	fp, #32
32d28     01 18 06 F6 | 	mov	arg04, #1
32d2c     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
32d30     00 FA 0D F2 | 	cmp	result1, #0 wz
32d34     1C 00 90 AD |  if_e	jmp	#LR__4945
32d38     04 4E 05 F1 | 	add	fp, #4
32d3c     A7 2A 02 FB | 	rdlong	local03, fp
32d40     04 4E 85 F1 | 	sub	fp, #4
32d44     11 2A 06 F1 | 	add	local03, #17
32d48     15 03 48 FC | 	wrbyte	#1, local03
32d4c     01 FA 05 F6 | 	mov	result1, #1
32d50     2C 01 90 FD | 	jmp	#LR__4950
32d54                 | LR__4945
32d54                 | LR__4946
32d54     04 4E 05 F1 | 	add	fp, #4
32d58     A7 2A 02 FB | 	rdlong	local03, fp
32d5c     1C 4E 05 F1 | 	add	fp, #28
32d60     A7 3A 02 FB | 	rdlong	local11, fp
32d64     20 4E 85 F1 | 	sub	fp, #32
32d68     1C 2A 06 F1 | 	add	local03, #28
32d6c     15 3B 62 FC | 	wrlong	local11, local03
32d70                 | LR__4947
32d70     04 4E 05 F1 | 	add	fp, #4
32d74     A7 26 02 FB | 	rdlong	local01, fp
32d78     14 26 06 F1 | 	add	local01, #20
32d7c     13 3B 02 FB | 	rdlong	local11, local01
32d80     FF 3B 06 F5 | 	and	local11, #511
32d84     09 2A C6 F9 | 	decod	local03, #9
32d88     1D 2B 82 F1 | 	sub	local03, local11
32d8c     24 4E 05 F1 | 	add	fp, #36
32d90     A7 2A 62 FC | 	wrlong	local03, fp
32d94     1C 4E 85 F1 | 	sub	fp, #28
32d98     A7 3A 02 FB | 	rdlong	local11, fp
32d9c     0C 4E 85 F1 | 	sub	fp, #12
32da0     1D 2B 1A F2 | 	cmp	local03, local11 wcz
32da4     0C 4E 05 11 |  if_a	add	fp, #12
32da8     A7 2A 02 1B |  if_a	rdlong	local03, fp
32dac     1C 4E 05 11 |  if_a	add	fp, #28
32db0     A7 2A 62 1C |  if_a	wrlong	local03, fp
32db4     28 4E 85 11 |  if_a	sub	fp, #40
32db8     34 4E 05 F1 | 	add	fp, #52
32dbc     A7 12 02 FB | 	rdlong	arg01, fp
32dc0     30 4E 85 F1 | 	sub	fp, #48
32dc4     A7 30 02 FB | 	rdlong	local06, fp
32dc8     18 15 02 F6 | 	mov	arg02, local06
32dcc     28 14 06 F1 | 	add	arg02, #40
32dd0     14 30 06 F1 | 	add	local06, #20
32dd4     18 3B 02 FB | 	rdlong	local11, local06
32dd8     1D 37 02 F6 | 	mov	local09, local11
32ddc     1B 39 02 F6 | 	mov	local10, local09
32de0     FF 39 06 F5 | 	and	local10, #511
32de4     1C 15 02 F1 | 	add	arg02, local10
32de8     24 4E 05 F1 | 	add	fp, #36
32dec     A7 16 02 FB | 	rdlong	arg03, fp
32df0     28 4E 85 F1 | 	sub	fp, #40
32df4     24 41 BF FD | 	call	#__system____builtin_memmove
32df8                 | LR__4948
32df8     0C 4E 05 F1 | 	add	fp, #12
32dfc     A7 2A 02 FB | 	rdlong	local03, fp
32e00     1C 4E 05 F1 | 	add	fp, #28
32e04     A7 34 02 FB | 	rdlong	local08, fp
32e08     1A 2B 82 F1 | 	sub	local03, local08
32e0c     1C 4E 85 F1 | 	sub	fp, #28
32e10     A7 2A 62 FC | 	wrlong	local03, fp
32e14     04 4E 05 F1 | 	add	fp, #4
32e18     A7 26 02 FB | 	rdlong	local01, fp
32e1c     13 33 02 FB | 	rdlong	local07, local01
32e20     18 4E 05 F1 | 	add	fp, #24
32e24     A7 34 02 FB | 	rdlong	local08, fp
32e28     1A 33 02 F1 | 	add	local07, local08
32e2c     13 33 62 FC | 	wrlong	local07, local01
32e30     0C 4E 05 F1 | 	add	fp, #12
32e34     A7 2A 02 FB | 	rdlong	local03, fp
32e38     0C 4E 85 F1 | 	sub	fp, #12
32e3c     A7 3C 02 FB | 	rdlong	local12, fp
32e40     1E 2B 02 F1 | 	add	local03, local12
32e44     0C 4E 05 F1 | 	add	fp, #12
32e48     A7 2A 62 FC | 	wrlong	local03, fp
32e4c     30 4E 85 F1 | 	sub	fp, #48
32e50     A7 3E 02 FB | 	rdlong	local13, fp
32e54     1F 2B 02 F6 | 	mov	local03, local13
32e58     14 3E 06 F1 | 	add	local13, #20
32e5c     1F 41 02 FB | 	rdlong	local14, local13
32e60     24 4E 05 F1 | 	add	fp, #36
32e64     A7 30 02 FB | 	rdlong	local06, fp
32e68     28 4E 85 F1 | 	sub	fp, #40
32e6c     18 41 02 F1 | 	add	local14, local06
32e70     14 2A 06 F1 | 	add	local03, #20
32e74     15 41 62 FC | 	wrlong	local14, local03
32e78     84 FA 9F FD | 	jmp	#LR__4932
32e7c                 | LR__4949
32e7c                 | ' 
32e7c                 | ' 
32e7c                 | ' 
32e7c                 | ' 
32e7c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
32e7c                 | ' 
32e7c                 | ' 	}
32e7c                 | ' 
32e7c                 | ' 	return FR_OK ;
32e7c     00 FA 05 F6 | 	mov	result1, #0
32e80                 | LR__4950
32e80     A7 F0 03 F6 | 	mov	ptra, fp
32e84     B2 00 A0 FD | 	call	#popregs_
32e88                 | _fatfs_cc_f_read_ret
32e88     2D 00 64 FD | 	ret
32e8c                 | 
32e8c                 | _fatfs_cc_f_write
32e8c     15 4A 05 F6 | 	mov	COUNT_, #21
32e90     A8 00 A0 FD | 	call	#pushregs_
32e94     34 F0 07 F1 | 	add	ptra, #52
32e98     04 4E 05 F1 | 	add	fp, #4
32e9c     A7 12 62 FC | 	wrlong	arg01, fp
32ea0     04 4E 05 F1 | 	add	fp, #4
32ea4     A7 14 62 FC | 	wrlong	arg02, fp
32ea8     04 4E 05 F1 | 	add	fp, #4
32eac     A7 16 62 FC | 	wrlong	arg03, fp
32eb0     04 4E 05 F1 | 	add	fp, #4
32eb4     A7 18 62 FC | 	wrlong	arg04, fp
32eb8     08 4E 85 F1 | 	sub	fp, #8
32ebc     A7 FA 01 FB | 	rdlong	result1, fp
32ec0     28 4E 05 F1 | 	add	fp, #40
32ec4     A7 FA 61 FC | 	wrlong	result1, fp
32ec8     20 4E 85 F1 | 	sub	fp, #32
32ecc     A7 FA 01 FB | 	rdlong	result1, fp
32ed0     FD 00 68 FC | 	wrlong	#0, result1
32ed4     0C 4E 85 F1 | 	sub	fp, #12
32ed8     A7 12 02 FB | 	rdlong	arg01, fp
32edc     14 4E 05 F1 | 	add	fp, #20
32ee0     A7 14 02 F6 | 	mov	arg02, fp
32ee4     18 4E 85 F1 | 	sub	fp, #24
32ee8     88 F0 BF FD | 	call	#_fatfs_cc_validate
32eec     14 4E 05 F1 | 	add	fp, #20
32ef0     A7 FA 61 FC | 	wrlong	result1, fp
32ef4     00 FA 4D F2 | 	cmps	result1, #0 wz
32ef8     14 4E 85 F1 | 	sub	fp, #20
32efc     20 00 90 5D |  if_ne	jmp	#LR__4960
32f00     04 4E 05 F1 | 	add	fp, #4
32f04     A7 14 02 FB | 	rdlong	arg02, fp
32f08     11 14 06 F1 | 	add	arg02, #17
32f0c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32f10     10 4E 05 F1 | 	add	fp, #16
32f14     A7 14 62 FC | 	wrlong	arg02, fp
32f18     14 4E 85 F1 | 	sub	fp, #20
32f1c     10 00 90 AD |  if_e	jmp	#LR__4961
32f20                 | LR__4960
32f20     14 4E 05 F1 | 	add	fp, #20
32f24     A7 FA 01 FB | 	rdlong	result1, fp
32f28     14 4E 85 F1 | 	sub	fp, #20
32f2c     44 07 90 FD | 	jmp	#LR__4983
32f30                 | LR__4961
32f30     04 4E 05 F1 | 	add	fp, #4
32f34     A7 14 02 FB | 	rdlong	arg02, fp
32f38     04 4E 85 F1 | 	sub	fp, #4
32f3c     10 14 06 F1 | 	add	arg02, #16
32f40     0A 15 C2 FA | 	rdbyte	arg02, arg02
32f44     02 14 CE F7 | 	test	arg02, #2 wz
32f48     07 FA 05 A6 |  if_e	mov	result1, #7
32f4c     24 07 90 AD |  if_e	jmp	#LR__4983
32f50     04 4E 05 F1 | 	add	fp, #4
32f54     A7 14 02 FB | 	rdlong	arg02, fp
32f58     0A 13 02 F6 | 	mov	arg01, arg02
32f5c     14 12 06 F1 | 	add	arg01, #20
32f60     09 13 02 FB | 	rdlong	arg01, arg01
32f64     08 4E 05 F1 | 	add	fp, #8
32f68     A7 FA 01 FB | 	rdlong	result1, fp
32f6c     FD 12 02 F1 | 	add	arg01, result1
32f70     0C 4E 85 F1 | 	sub	fp, #12
32f74     14 14 06 F1 | 	add	arg02, #20
32f78     0A FB 01 FB | 	rdlong	result1, arg02
32f7c     FD 12 12 F2 | 	cmp	arg01, result1 wc
32f80     24 00 90 3D |  if_ae	jmp	#LR__4962
32f84     04 4E 05 F1 | 	add	fp, #4
32f88     A7 14 02 FB | 	rdlong	arg02, fp
32f8c     01 FA 65 F6 | 	neg	result1, #1
32f90     14 14 06 F1 | 	add	arg02, #20
32f94     0A 15 02 FB | 	rdlong	arg02, arg02
32f98     0A FB 81 F1 | 	sub	result1, arg02
32f9c     08 4E 05 F1 | 	add	fp, #8
32fa0     A7 FA 61 FC | 	wrlong	result1, fp
32fa4     0C 4E 85 F1 | 	sub	fp, #12
32fa8                 | LR__4962
32fa8                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
32fa8                 | ' 	}
32fa8                 | ' 
32fa8                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
32fa8                 | LR__4963
32fa8     0C 4E 05 F1 | 	add	fp, #12
32fac     A7 FA 01 FB | 	rdlong	result1, fp
32fb0     0C 4E 85 F1 | 	sub	fp, #12
32fb4     01 FA 15 F2 | 	cmp	result1, #1 wc
32fb8     90 06 90 CD |  if_b	jmp	#LR__4982
32fbc     04 4E 05 F1 | 	add	fp, #4
32fc0     A7 FA 01 FB | 	rdlong	result1, fp
32fc4     04 4E 85 F1 | 	sub	fp, #4
32fc8     14 FA 05 F1 | 	add	result1, #20
32fcc     FD FA 01 FB | 	rdlong	result1, result1
32fd0     FF FB CD F7 | 	test	result1, #511 wz
32fd4     D8 04 90 5D |  if_ne	jmp	#LR__4978
32fd8     04 4E 05 F1 | 	add	fp, #4
32fdc     A7 FA 01 FB | 	rdlong	result1, fp
32fe0     14 FA 05 F1 | 	add	result1, #20
32fe4     FD FA 01 FB | 	rdlong	result1, result1
32fe8     09 FA 45 F0 | 	shr	result1, #9
32fec     14 4E 05 F1 | 	add	fp, #20
32ff0     A7 14 02 FB | 	rdlong	arg02, fp
32ff4     0A 14 06 F1 | 	add	arg02, #10
32ff8     0A 19 E2 FA | 	rdword	arg04, arg02
32ffc     0C 15 32 F9 | 	getword	arg02, arg04, #0
33000     01 14 86 F1 | 	sub	arg02, #1
33004     0A FB 09 F5 | 	and	result1, arg02 wz
33008     14 4E 05 F1 | 	add	fp, #20
3300c     A7 FA 61 FC | 	wrlong	result1, fp
33010     2C 4E 85 F1 | 	sub	fp, #44
33014     44 01 90 5D |  if_ne	jmp	#LR__4969
33018     04 4E 05 F1 | 	add	fp, #4
3301c     A7 FA 01 FB | 	rdlong	result1, fp
33020     04 4E 85 F1 | 	sub	fp, #4
33024     14 FA 05 F1 | 	add	result1, #20
33028     FD 14 0A FB | 	rdlong	arg02, result1 wz
3302c     44 00 90 5D |  if_ne	jmp	#LR__4964
33030     04 4E 05 F1 | 	add	fp, #4
33034     A7 14 02 FB | 	rdlong	arg02, fp
33038     08 14 06 F1 | 	add	arg02, #8
3303c     0A 15 0A FB | 	rdlong	arg02, arg02 wz
33040     18 4E 05 F1 | 	add	fp, #24
33044     A7 14 62 FC | 	wrlong	arg02, fp
33048     1C 4E 85 F1 | 	sub	fp, #28
3304c     4C 00 90 5D |  if_ne	jmp	#LR__4965
33050     04 4E 05 F1 | 	add	fp, #4
33054     A7 12 02 FB | 	rdlong	arg01, fp
33058     04 4E 85 F1 | 	sub	fp, #4
3305c     00 14 06 F6 | 	mov	arg02, #0
33060     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
33064     1C 4E 05 F1 | 	add	fp, #28
33068     A7 FA 61 FC | 	wrlong	result1, fp
3306c     1C 4E 85 F1 | 	sub	fp, #28
33070     28 00 90 FD | 	jmp	#LR__4965
33074                 | LR__4964
33074     04 4E 05 F1 | 	add	fp, #4
33078     A7 18 02 FB | 	rdlong	arg04, fp
3307c     0C 13 02 F6 | 	mov	arg01, arg04
33080     04 4E 85 F1 | 	sub	fp, #4
33084     18 18 06 F1 | 	add	arg04, #24
33088     0C 15 02 FB | 	rdlong	arg02, arg04
3308c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
33090     1C 4E 05 F1 | 	add	fp, #28
33094     A7 FA 61 FC | 	wrlong	result1, fp
33098     1C 4E 85 F1 | 	sub	fp, #28
3309c                 | LR__4965
3309c     1C 4E 05 F1 | 	add	fp, #28
330a0     A7 FA 09 FB | 	rdlong	result1, fp wz
330a4     1C 4E 85 F1 | 	sub	fp, #28
330a8     A0 05 90 AD |  if_e	jmp	#LR__4982
330ac     1C 4E 05 F1 | 	add	fp, #28
330b0     A7 FA 01 FB | 	rdlong	result1, fp
330b4     1C 4E 85 F1 | 	sub	fp, #28
330b8     01 FA 0D F2 | 	cmp	result1, #1 wz
330bc     1C 00 90 5D |  if_ne	jmp	#LR__4966
330c0     04 4E 05 F1 | 	add	fp, #4
330c4     A7 FA 01 FB | 	rdlong	result1, fp
330c8     04 4E 85 F1 | 	sub	fp, #4
330cc     11 FA 05 F1 | 	add	result1, #17
330d0     FD 04 48 FC | 	wrbyte	#2, result1
330d4     02 FA 05 F6 | 	mov	result1, #2
330d8     98 05 90 FD | 	jmp	#LR__4983
330dc                 | LR__4966
330dc     1C 4E 05 F1 | 	add	fp, #28
330e0     A7 FA 01 FB | 	rdlong	result1, fp
330e4     1C 4E 85 F1 | 	sub	fp, #28
330e8     FF FF 7F FF 
330ec     FF FB 0D F2 | 	cmp	result1, ##-1 wz
330f0     1C 00 90 5D |  if_ne	jmp	#LR__4967
330f4     04 4E 05 F1 | 	add	fp, #4
330f8     A7 FA 01 FB | 	rdlong	result1, fp
330fc     04 4E 85 F1 | 	sub	fp, #4
33100     11 FA 05 F1 | 	add	result1, #17
33104     FD 02 48 FC | 	wrbyte	#1, result1
33108     01 FA 05 F6 | 	mov	result1, #1
3310c     64 05 90 FD | 	jmp	#LR__4983
33110                 | LR__4967
33110     04 4E 05 F1 | 	add	fp, #4
33114     A7 FA 01 FB | 	rdlong	result1, fp
33118     18 4E 05 F1 | 	add	fp, #24
3311c     A7 18 02 FB | 	rdlong	arg04, fp
33120     18 FA 05 F1 | 	add	result1, #24
33124     FD 18 62 FC | 	wrlong	arg04, result1
33128     18 4E 85 F1 | 	sub	fp, #24
3312c     A7 FA 01 FB | 	rdlong	result1, fp
33130     04 4E 85 F1 | 	sub	fp, #4
33134     08 FA 05 F1 | 	add	result1, #8
33138     FD FA 09 FB | 	rdlong	result1, result1 wz
3313c     1C 00 90 5D |  if_ne	jmp	#LR__4968
33140     04 4E 05 F1 | 	add	fp, #4
33144     A7 18 02 FB | 	rdlong	arg04, fp
33148     18 4E 05 F1 | 	add	fp, #24
3314c     A7 FA 01 FB | 	rdlong	result1, fp
33150     1C 4E 85 F1 | 	sub	fp, #28
33154     08 18 06 F1 | 	add	arg04, #8
33158     0C FB 61 FC | 	wrlong	result1, arg04
3315c                 | LR__4968
3315c                 | LR__4969
3315c     04 4E 05 F1 | 	add	fp, #4
33160     A7 18 02 FB | 	rdlong	arg04, fp
33164     04 4E 85 F1 | 	sub	fp, #4
33168     10 18 06 F1 | 	add	arg04, #16
3316c     0C 19 C2 FA | 	rdbyte	arg04, arg04
33170     80 18 CE F7 | 	test	arg04, #128 wz
33174     7C 00 90 AD |  if_e	jmp	#LR__4971
33178     18 4E 05 F1 | 	add	fp, #24
3317c     A7 18 02 FB | 	rdlong	arg04, fp
33180     01 18 06 F1 | 	add	arg04, #1
33184     0C 13 C2 FA | 	rdbyte	arg01, arg04
33188     14 4E 85 F1 | 	sub	fp, #20
3318c     A7 18 02 FB | 	rdlong	arg04, fp
33190     0C 15 02 F6 | 	mov	arg02, arg04
33194     28 14 06 F1 | 	add	arg02, #40
33198     04 4E 85 F1 | 	sub	fp, #4
3319c     1C 18 06 F1 | 	add	arg04, #28
331a0     0C 17 02 FB | 	rdlong	arg03, arg04
331a4     01 18 06 F6 | 	mov	arg04, #1
331a8     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
331ac     00 FA 0D F2 | 	cmp	result1, #0 wz
331b0     1C 00 90 AD |  if_e	jmp	#LR__4970
331b4     04 4E 05 F1 | 	add	fp, #4
331b8     A7 FA 01 FB | 	rdlong	result1, fp
331bc     04 4E 85 F1 | 	sub	fp, #4
331c0     11 FA 05 F1 | 	add	result1, #17
331c4     FD 02 48 FC | 	wrbyte	#1, result1
331c8     01 FA 05 F6 | 	mov	result1, #1
331cc     A4 04 90 FD | 	jmp	#LR__4983
331d0                 | LR__4970
331d0     04 4E 05 F1 | 	add	fp, #4
331d4     A7 18 02 FB | 	rdlong	arg04, fp
331d8     0C FB 01 F6 | 	mov	result1, arg04
331dc     04 4E 85 F1 | 	sub	fp, #4
331e0     10 18 06 F1 | 	add	arg04, #16
331e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
331e8     7F 18 06 F5 | 	and	arg04, #127
331ec     10 FA 05 F1 | 	add	result1, #16
331f0     FD 18 42 FC | 	wrbyte	arg04, result1
331f4                 | LR__4971
331f4     18 4E 05 F1 | 	add	fp, #24
331f8     A7 12 02 FB | 	rdlong	arg01, fp
331fc     14 4E 85 F1 | 	sub	fp, #20
33200     A7 14 02 FB | 	rdlong	arg02, fp
33204     04 4E 85 F1 | 	sub	fp, #4
33208     18 14 06 F1 | 	add	arg02, #24
3320c     0A 15 02 FB | 	rdlong	arg02, arg02
33210     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
33214     20 4E 05 F1 | 	add	fp, #32
33218     A7 FA 61 FC | 	wrlong	result1, fp
3321c     20 4E 85 F1 | 	sub	fp, #32
33220     00 FA 0D F2 | 	cmp	result1, #0 wz
33224     1C 00 90 5D |  if_ne	jmp	#LR__4972
33228     04 4E 05 F1 | 	add	fp, #4
3322c     A7 FA 01 FB | 	rdlong	result1, fp
33230     04 4E 85 F1 | 	sub	fp, #4
33234     11 FA 05 F1 | 	add	result1, #17
33238     FD 04 48 FC | 	wrbyte	#2, result1
3323c     02 FA 05 F6 | 	mov	result1, #2
33240     30 04 90 FD | 	jmp	#LR__4983
33244                 | LR__4972
33244     20 4E 05 F1 | 	add	fp, #32
33248     A7 FA 01 FB | 	rdlong	result1, fp
3324c     0C 4E 05 F1 | 	add	fp, #12
33250     A7 26 02 FB | 	rdlong	local01, fp
33254     13 FB 01 F1 | 	add	result1, local01
33258     0C 4E 85 F1 | 	sub	fp, #12
3325c     A7 FA 61 FC | 	wrlong	result1, fp
33260     14 4E 85 F1 | 	sub	fp, #20
33264     A7 FA 01 FB | 	rdlong	result1, fp
33268     09 FA 45 F0 | 	shr	result1, #9
3326c     1C 4E 05 F1 | 	add	fp, #28
33270     A7 FA 61 FC | 	wrlong	result1, fp
33274     28 4E 85 F1 | 	sub	fp, #40
33278     01 FA 15 F2 | 	cmp	result1, #1 wc
3327c     60 01 90 CD |  if_b	jmp	#LR__4976
33280     2C 4E 05 F1 | 	add	fp, #44
33284     A7 FA 01 FB | 	rdlong	result1, fp
33288     04 4E 85 F1 | 	sub	fp, #4
3328c     A7 18 02 FB | 	rdlong	arg04, fp
33290     0C FB 01 F1 | 	add	result1, arg04
33294     10 4E 85 F1 | 	sub	fp, #16
33298     A7 18 02 FB | 	rdlong	arg04, fp
3329c     18 4E 85 F1 | 	sub	fp, #24
332a0     0A 18 06 F1 | 	add	arg04, #10
332a4     0C 19 E2 FA | 	rdword	arg04, arg04
332a8     0C FB 19 F2 | 	cmp	result1, arg04 wcz
332ac     28 00 90 ED |  if_be	jmp	#LR__4973
332b0     18 4E 05 F1 | 	add	fp, #24
332b4     A7 FA 01 FB | 	rdlong	result1, fp
332b8     0A FA 05 F1 | 	add	result1, #10
332bc     FD FA E1 FA | 	rdword	result1, result1
332c0     14 4E 05 F1 | 	add	fp, #20
332c4     A7 18 02 FB | 	rdlong	arg04, fp
332c8     0C FB 81 F1 | 	sub	result1, arg04
332cc     04 4E 85 F1 | 	sub	fp, #4
332d0     A7 FA 61 FC | 	wrlong	result1, fp
332d4     28 4E 85 F1 | 	sub	fp, #40
332d8                 | LR__4973
332d8     18 4E 05 F1 | 	add	fp, #24
332dc     A7 18 02 FB | 	rdlong	arg04, fp
332e0     01 18 06 F1 | 	add	arg04, #1
332e4     0C 13 C2 FA | 	rdbyte	arg01, arg04
332e8     18 4E 05 F1 | 	add	fp, #24
332ec     A7 14 02 FB | 	rdlong	arg02, fp
332f0     10 4E 85 F1 | 	sub	fp, #16
332f4     A7 16 02 FB | 	rdlong	arg03, fp
332f8     08 4E 05 F1 | 	add	fp, #8
332fc     A7 18 02 FB | 	rdlong	arg04, fp
33300     28 4E 85 F1 | 	sub	fp, #40
33304     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
33308     00 FA 0D F2 | 	cmp	result1, #0 wz
3330c     1C 00 90 AD |  if_e	jmp	#LR__4974
33310     04 4E 05 F1 | 	add	fp, #4
33314     A7 26 02 FB | 	rdlong	local01, fp
33318     04 4E 85 F1 | 	sub	fp, #4
3331c     11 26 06 F1 | 	add	local01, #17
33320     13 03 48 FC | 	wrbyte	#1, local01
33324     01 FA 05 F6 | 	mov	result1, #1
33328     48 03 90 FD | 	jmp	#LR__4983
3332c                 | LR__4974
3332c     04 4E 05 F1 | 	add	fp, #4
33330     A7 FA 01 FB | 	rdlong	result1, fp
33334     1C FA 05 F1 | 	add	result1, #28
33338     FD FA 01 FB | 	rdlong	result1, result1
3333c     1C 4E 05 F1 | 	add	fp, #28
33340     A7 28 02 FB | 	rdlong	local02, fp
33344     14 FB 81 F1 | 	sub	result1, local02
33348     08 4E 05 F1 | 	add	fp, #8
3334c     A7 18 02 FB | 	rdlong	arg04, fp
33350     28 4E 85 F1 | 	sub	fp, #40
33354     0C FB 11 F2 | 	cmp	result1, arg04 wc
33358     68 00 90 3D |  if_ae	jmp	#LR__4975
3335c     04 4E 05 F1 | 	add	fp, #4
33360     A7 12 02 FB | 	rdlong	arg01, fp
33364     28 12 06 F1 | 	add	arg01, #40
33368     2C 4E 05 F1 | 	add	fp, #44
3336c     A7 14 02 FB | 	rdlong	arg02, fp
33370     2C 4E 85 F1 | 	sub	fp, #44
33374     A7 FA 01 FB | 	rdlong	result1, fp
33378     1C FA 05 F1 | 	add	result1, #28
3337c     FD 2A 02 FB | 	rdlong	local03, result1
33380     1C 4E 05 F1 | 	add	fp, #28
33384     A7 18 02 FB | 	rdlong	arg04, fp
33388     20 4E 85 F1 | 	sub	fp, #32
3338c     0C 2B 82 F1 | 	sub	local03, arg04
33390     09 2A 66 F0 | 	shl	local03, #9
33394     15 15 02 F1 | 	add	arg02, local03
33398     09 16 C6 F9 | 	decod	arg03, #9
3339c     7C 3B BF FD | 	call	#__system____builtin_memmove
333a0     04 4E 05 F1 | 	add	fp, #4
333a4     A7 18 02 FB | 	rdlong	arg04, fp
333a8     0C FB 01 F6 | 	mov	result1, arg04
333ac     04 4E 85 F1 | 	sub	fp, #4
333b0     10 18 06 F1 | 	add	arg04, #16
333b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
333b8     7F 18 06 F5 | 	and	arg04, #127
333bc     10 FA 05 F1 | 	add	result1, #16
333c0     FD 18 42 FC | 	wrbyte	arg04, result1
333c4                 | LR__4975
333c4     28 4E 05 F1 | 	add	fp, #40
333c8     A7 FA 01 FB | 	rdlong	result1, fp
333cc     09 FA 65 F0 | 	shl	result1, #9
333d0     04 4E 85 F1 | 	sub	fp, #4
333d4     A7 FA 61 FC | 	wrlong	result1, fp
333d8     24 4E 85 F1 | 	sub	fp, #36
333dc                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
333dc                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
333dc                 | ' 				}
333dc                 | ' 
333dc                 | ' 
333dc                 | ' 				wcnt =  ((UINT) 512 )  * cc;
333dc                 | ' 				continue;
333dc     74 01 90 FD | 	jmp	#LR__4979
333e0                 | LR__4976
333e0     04 4E 05 F1 | 	add	fp, #4
333e4     A7 28 02 FB | 	rdlong	local02, fp
333e8     1C 28 06 F1 | 	add	local02, #28
333ec     14 FB 01 FB | 	rdlong	result1, local02
333f0     1C 4E 05 F1 | 	add	fp, #28
333f4     A7 28 02 FB | 	rdlong	local02, fp
333f8     20 4E 85 F1 | 	sub	fp, #32
333fc     14 FB 09 F2 | 	cmp	result1, local02 wz
33400     90 00 90 AD |  if_e	jmp	#LR__4977
33404     04 4E 05 F1 | 	add	fp, #4
33408     A7 FA 01 FB | 	rdlong	result1, fp
3340c     FD 2A 02 F6 | 	mov	local03, result1
33410     04 4E 85 F1 | 	sub	fp, #4
33414     14 2A 06 F1 | 	add	local03, #20
33418     15 2B 02 FB | 	rdlong	local03, local03
3341c     0C FA 05 F1 | 	add	result1, #12
33420     FD 2C 02 FB | 	rdlong	local04, result1
33424     16 2F 02 F6 | 	mov	local05, local04
33428     17 2B 12 F2 | 	cmp	local03, local05 wc
3342c     64 00 90 3D |  if_ae	jmp	#LR__4977
33430     18 4E 05 F1 | 	add	fp, #24
33434     A7 18 02 FB | 	rdlong	arg04, fp
33438     01 18 06 F1 | 	add	arg04, #1
3343c     0C 13 C2 FA | 	rdbyte	arg01, arg04
33440     14 4E 85 F1 | 	sub	fp, #20
33444     A7 30 02 FB | 	rdlong	local06, fp
33448     28 30 06 F1 | 	add	local06, #40
3344c     18 33 02 F6 | 	mov	local07, local06
33450     1C 4E 05 F1 | 	add	fp, #28
33454     A7 34 02 FB | 	rdlong	local08, fp
33458     20 4E 85 F1 | 	sub	fp, #32
3345c     01 36 06 F6 | 	mov	local09, #1
33460     19 15 02 F6 | 	mov	arg02, local07
33464     1A 17 02 F6 | 	mov	arg03, local08
33468     01 18 06 F6 | 	mov	arg04, #1
3346c     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
33470     FD 38 0A F6 | 	mov	local10, result1 wz
33474     1C 00 90 AD |  if_e	jmp	#LR__4977
33478     04 4E 05 F1 | 	add	fp, #4
3347c     A7 38 02 FB | 	rdlong	local10, fp
33480     04 4E 85 F1 | 	sub	fp, #4
33484     11 38 06 F1 | 	add	local10, #17
33488     1C 03 48 FC | 	wrbyte	#1, local10
3348c                 | ' 				fp->fptr < fp->obj.objsize &&
3348c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
3348c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
3348c     01 FA 05 F6 | 	mov	result1, #1
33490     E0 01 90 FD | 	jmp	#LR__4983
33494                 | LR__4977
33494     04 4E 05 F1 | 	add	fp, #4
33498     A7 18 02 FB | 	rdlong	arg04, fp
3349c     1C 4E 05 F1 | 	add	fp, #28
334a0     A7 FA 01 FB | 	rdlong	result1, fp
334a4     20 4E 85 F1 | 	sub	fp, #32
334a8     1C 18 06 F1 | 	add	arg04, #28
334ac     0C FB 61 FC | 	wrlong	result1, arg04
334b0                 | LR__4978
334b0     04 4E 05 F1 | 	add	fp, #4
334b4     A7 FA 01 FB | 	rdlong	result1, fp
334b8     14 FA 05 F1 | 	add	result1, #20
334bc     FD FA 01 FB | 	rdlong	result1, result1
334c0     FF FB 05 F5 | 	and	result1, #511
334c4     09 3A C6 F9 | 	decod	local11, #9
334c8     FD 3A 82 F1 | 	sub	local11, result1
334cc     20 4E 05 F1 | 	add	fp, #32
334d0     A7 3A 62 FC | 	wrlong	local11, fp
334d4     18 4E 85 F1 | 	sub	fp, #24
334d8     A7 FA 01 FB | 	rdlong	result1, fp
334dc     0C 4E 85 F1 | 	sub	fp, #12
334e0     FD 3A 1A F2 | 	cmp	local11, result1 wcz
334e4     0C 4E 05 11 |  if_a	add	fp, #12
334e8     A7 3A 02 1B |  if_a	rdlong	local11, fp
334ec     18 4E 05 11 |  if_a	add	fp, #24
334f0     A7 3A 62 1C |  if_a	wrlong	local11, fp
334f4     24 4E 85 11 |  if_a	sub	fp, #36
334f8     04 4E 05 F1 | 	add	fp, #4
334fc     A7 3A 02 FB | 	rdlong	local11, fp
33500     1D 13 02 F6 | 	mov	arg01, local11
33504     28 12 06 F1 | 	add	arg01, #40
33508     14 3A 06 F1 | 	add	local11, #20
3350c     1D 3B 02 FB | 	rdlong	local11, local11
33510     FF 3B 06 F5 | 	and	local11, #511
33514     1D 13 02 F1 | 	add	arg01, local11
33518     2C 4E 05 F1 | 	add	fp, #44
3351c     A7 14 02 FB | 	rdlong	arg02, fp
33520     0C 4E 85 F1 | 	sub	fp, #12
33524     A7 16 02 FB | 	rdlong	arg03, fp
33528     24 4E 85 F1 | 	sub	fp, #36
3352c     EC 39 BF FD | 	call	#__system____builtin_memmove
33530     04 4E 05 F1 | 	add	fp, #4
33534     A7 FA 01 FB | 	rdlong	result1, fp
33538     FD 3A 02 F6 | 	mov	local11, result1
3353c     04 4E 85 F1 | 	sub	fp, #4
33540     10 FA 05 F1 | 	add	result1, #16
33544     FD FA C1 FA | 	rdbyte	result1, result1
33548     80 FA 45 F5 | 	or	result1, #128
3354c     10 3A 06 F1 | 	add	local11, #16
33550     1D FB 41 FC | 	wrbyte	result1, local11
33554                 | LR__4979
33554     0C 4E 05 F1 | 	add	fp, #12
33558     A7 3A 02 FB | 	rdlong	local11, fp
3355c     18 4E 05 F1 | 	add	fp, #24
33560     A7 FA 01 FB | 	rdlong	result1, fp
33564     FD 3A 82 F1 | 	sub	local11, result1
33568     18 4E 85 F1 | 	sub	fp, #24
3356c     A7 3A 62 FC | 	wrlong	local11, fp
33570     04 4E 05 F1 | 	add	fp, #4
33574     A7 3C 02 FB | 	rdlong	local12, fp
33578     1E 3B 02 FB | 	rdlong	local11, local12
3357c     14 4E 05 F1 | 	add	fp, #20
33580     A7 3E 02 FB | 	rdlong	local13, fp
33584     1F 3B 02 F1 | 	add	local11, local13
33588     1E 3B 62 FC | 	wrlong	local11, local12
3358c     0C 4E 05 F1 | 	add	fp, #12
33590     A7 3A 02 FB | 	rdlong	local11, fp
33594     0C 4E 85 F1 | 	sub	fp, #12
33598     A7 40 02 FB | 	rdlong	local14, fp
3359c     20 3B 02 F1 | 	add	local11, local14
335a0     0C 4E 05 F1 | 	add	fp, #12
335a4     A7 3A 62 FC | 	wrlong	local11, fp
335a8     2C 4E 85 F1 | 	sub	fp, #44
335ac     A7 42 02 FB | 	rdlong	local15, fp
335b0     21 3B 02 F6 | 	mov	local11, local15
335b4     14 42 06 F1 | 	add	local15, #20
335b8     21 43 02 FB | 	rdlong	local15, local15
335bc     20 4E 05 F1 | 	add	fp, #32
335c0     A7 44 02 FB | 	rdlong	local16, fp
335c4     22 43 02 F1 | 	add	local15, local16
335c8     14 3A 06 F1 | 	add	local11, #20
335cc     1D 43 62 FC | 	wrlong	local15, local11
335d0     20 4E 85 F1 | 	sub	fp, #32
335d4     A7 46 02 FB | 	rdlong	local17, fp
335d8     23 3B 02 F6 | 	mov	local11, local17
335dc     23 49 02 F6 | 	mov	local18, local17
335e0     04 4E 85 F1 | 	sub	fp, #4
335e4     14 46 06 F1 | 	add	local17, #20
335e8     23 4B 02 FB | 	rdlong	local19, local17
335ec     0C 48 06 F1 | 	add	local18, #12
335f0     24 4D 02 FB | 	rdlong	local20, local18
335f4     26 4B 1A F2 | 	cmp	local19, local20 wcz
335f8     24 00 90 ED |  if_be	jmp	#LR__4980
335fc     04 4E 05 F1 | 	add	fp, #4
33600     A7 2E 02 FB | 	rdlong	local05, fp
33604     04 4E 85 F1 | 	sub	fp, #4
33608     17 2B 02 F6 | 	mov	local03, local05
3360c     14 2A 06 F1 | 	add	local03, #20
33610     15 2D 02 FB | 	rdlong	local04, local03
33614     14 2A 86 F1 | 	sub	local03, #20
33618     16 4F 02 F6 | 	mov	local21, local04
3361c     20 00 90 FD | 	jmp	#LR__4981
33620                 | LR__4980
33620     04 4E 05 F1 | 	add	fp, #4
33624     A7 32 02 FB | 	rdlong	local07, fp
33628     04 4E 85 F1 | 	sub	fp, #4
3362c     19 39 02 F6 | 	mov	local10, local07
33630     0C 38 06 F1 | 	add	local10, #12
33634     1C 35 02 FB | 	rdlong	local08, local10
33638     0C 38 86 F1 | 	sub	local10, #12
3363c     1A 4F 02 F6 | 	mov	local21, local08
33640                 | LR__4981
33640     0C 3A 06 F1 | 	add	local11, #12
33644     1D 4F 62 FC | 	wrlong	local21, local11
33648     5C F9 9F FD | 	jmp	#LR__4963
3364c                 | LR__4982
3364c     04 4E 05 F1 | 	add	fp, #4
33650     A7 3C 02 FB | 	rdlong	local12, fp
33654     1E 27 02 F6 | 	mov	local01, local12
33658     04 4E 85 F1 | 	sub	fp, #4
3365c     10 3C 06 F1 | 	add	local12, #16
33660     1E 3B C2 FA | 	rdbyte	local11, local12
33664     40 3A 46 F5 | 	or	local11, #64
33668     10 26 06 F1 | 	add	local01, #16
3366c     13 3B 42 FC | 	wrbyte	local11, local01
33670                 | ' 
33670                 | ' 
33670                 | ' 
33670                 | ' 
33670                 | ' 
33670                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
33670                 | ' 		fp->flag |=  0x80 ;
33670                 | ' 
33670                 | ' 	}
33670                 | ' 
33670                 | ' 	fp->flag |=  0x40 ;
33670                 | ' 
33670                 | ' 	return FR_OK ;
33670     00 FA 05 F6 | 	mov	result1, #0
33674                 | LR__4983
33674     A7 F0 03 F6 | 	mov	ptra, fp
33678     B2 00 A0 FD | 	call	#popregs_
3367c                 | _fatfs_cc_f_write_ret
3367c     2D 00 64 FD | 	ret
33680                 | 
33680                 | _fatfs_cc_f_sync
33680     00 4A 05 F6 | 	mov	COUNT_, #0
33684     A8 00 A0 FD | 	call	#pushregs_
33688     18 F0 07 F1 | 	add	ptra, #24
3368c     04 4E 05 F1 | 	add	fp, #4
33690     A7 12 62 FC | 	wrlong	arg01, fp
33694     08 4E 05 F1 | 	add	fp, #8
33698     A7 14 02 F6 | 	mov	arg02, fp
3369c     0C 4E 85 F1 | 	sub	fp, #12
336a0     D0 E8 BF FD | 	call	#_fatfs_cc_validate
336a4     08 4E 05 F1 | 	add	fp, #8
336a8     A7 FA 61 FC | 	wrlong	result1, fp
336ac     08 4E 85 F1 | 	sub	fp, #8
336b0     00 FA 0D F2 | 	cmp	result1, #0 wz
336b4     C0 01 90 5D |  if_ne	jmp	#LR__4993
336b8     04 4E 05 F1 | 	add	fp, #4
336bc     A7 18 02 FB | 	rdlong	arg04, fp
336c0     04 4E 85 F1 | 	sub	fp, #4
336c4     10 18 06 F1 | 	add	arg04, #16
336c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
336cc     40 18 CE F7 | 	test	arg04, #64 wz
336d0     A4 01 90 AD |  if_e	jmp	#LR__4992
336d4     04 4E 05 F1 | 	add	fp, #4
336d8     A7 18 02 FB | 	rdlong	arg04, fp
336dc     04 4E 85 F1 | 	sub	fp, #4
336e0     10 18 06 F1 | 	add	arg04, #16
336e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
336e8     80 18 CE F7 | 	test	arg04, #128 wz
336ec     64 00 90 AD |  if_e	jmp	#LR__4990
336f0     0C 4E 05 F1 | 	add	fp, #12
336f4     A7 18 02 FB | 	rdlong	arg04, fp
336f8     01 18 06 F1 | 	add	arg04, #1
336fc     0C 13 C2 FA | 	rdbyte	arg01, arg04
33700     08 4E 85 F1 | 	sub	fp, #8
33704     A7 18 02 FB | 	rdlong	arg04, fp
33708     0C 15 02 F6 | 	mov	arg02, arg04
3370c     28 14 06 F1 | 	add	arg02, #40
33710     04 4E 85 F1 | 	sub	fp, #4
33714     1C 18 06 F1 | 	add	arg04, #28
33718     0C 17 02 FB | 	rdlong	arg03, arg04
3371c     01 18 06 F6 | 	mov	arg04, #1
33720     0C AE BF FD | 	call	#_fatfs_cc_disk_write
33724     00 FA 0D F2 | 	cmp	result1, #0 wz
33728     01 FA 05 56 |  if_ne	mov	result1, #1
3372c     54 01 90 5D |  if_ne	jmp	#LR__4994
33730     04 4E 05 F1 | 	add	fp, #4
33734     A7 18 02 FB | 	rdlong	arg04, fp
33738     0C 17 02 F6 | 	mov	arg03, arg04
3373c     04 4E 85 F1 | 	sub	fp, #4
33740     10 18 06 F1 | 	add	arg04, #16
33744     0C 19 C2 FA | 	rdbyte	arg04, arg04
33748     7F 18 06 F5 | 	and	arg04, #127
3374c     10 16 06 F1 | 	add	arg03, #16
33750     0B 19 42 FC | 	wrbyte	arg04, arg03
33754                 | LR__4990
33754     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
33758     10 4E 05 F1 | 	add	fp, #16
3375c     A7 FA 61 FC | 	wrlong	result1, fp
33760     04 4E 85 F1 | 	sub	fp, #4
33764     A7 12 02 FB | 	rdlong	arg01, fp
33768     08 4E 85 F1 | 	sub	fp, #8
3376c     A7 18 02 FB | 	rdlong	arg04, fp
33770     04 4E 85 F1 | 	sub	fp, #4
33774     20 18 06 F1 | 	add	arg04, #32
33778     0C 15 02 FB | 	rdlong	arg02, arg04
3377c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
33780     08 4E 05 F1 | 	add	fp, #8
33784     A7 FA 61 FC | 	wrlong	result1, fp
33788     08 4E 85 F1 | 	sub	fp, #8
3378c     00 FA 0D F2 | 	cmp	result1, #0 wz
33790     E4 00 90 5D |  if_ne	jmp	#LR__4991
33794     04 4E 05 F1 | 	add	fp, #4
33798     A7 18 02 FB | 	rdlong	arg04, fp
3379c     24 18 06 F1 | 	add	arg04, #36
337a0     0C 19 02 FB | 	rdlong	arg04, arg04
337a4     10 4E 05 F1 | 	add	fp, #16
337a8     A7 18 62 FC | 	wrlong	arg04, fp
337ac     0C 17 02 F6 | 	mov	arg03, arg04
337b0     0B 16 06 F1 | 	add	arg03, #11
337b4     0B 17 C2 FA | 	rdbyte	arg03, arg03
337b8     20 16 46 F5 | 	or	arg03, #32
337bc     0B 18 06 F1 | 	add	arg04, #11
337c0     0C 17 42 FC | 	wrbyte	arg03, arg04
337c4     10 4E 85 F1 | 	sub	fp, #16
337c8     A7 18 02 FB | 	rdlong	arg04, fp
337cc     0C 13 02 FB | 	rdlong	arg01, arg04
337d0     10 4E 05 F1 | 	add	fp, #16
337d4     A7 14 02 FB | 	rdlong	arg02, fp
337d8     14 4E 85 F1 | 	sub	fp, #20
337dc     08 18 06 F1 | 	add	arg04, #8
337e0     0C 17 02 FB | 	rdlong	arg03, arg04
337e4     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
337e8     14 4E 05 F1 | 	add	fp, #20
337ec     A7 12 02 FB | 	rdlong	arg01, fp
337f0     1C 12 06 F1 | 	add	arg01, #28
337f4     10 4E 85 F1 | 	sub	fp, #16
337f8     A7 18 02 FB | 	rdlong	arg04, fp
337fc     0C 18 06 F1 | 	add	arg04, #12
33800     0C 15 02 FB | 	rdlong	arg02, arg04
33804     09 15 62 FC | 	wrlong	arg02, arg01
33808     10 4E 05 F1 | 	add	fp, #16
3380c     A7 12 02 FB | 	rdlong	arg01, fp
33810     16 12 06 F1 | 	add	arg01, #22
33814     04 4E 85 F1 | 	sub	fp, #4
33818     A7 14 02 FB | 	rdlong	arg02, fp
3381c     09 15 62 FC | 	wrlong	arg02, arg01
33820     04 4E 05 F1 | 	add	fp, #4
33824     A7 12 02 FB | 	rdlong	arg01, fp
33828     12 12 06 F1 | 	add	arg01, #18
3382c     09 01 58 FC | 	wrword	#0, arg01
33830     08 4E 85 F1 | 	sub	fp, #8
33834     A7 18 02 FB | 	rdlong	arg04, fp
33838     03 18 06 F1 | 	add	arg04, #3
3383c     0C 03 48 FC | 	wrbyte	#1, arg04
33840     A7 12 02 FB | 	rdlong	arg01, fp
33844     0C 4E 85 F1 | 	sub	fp, #12
33848     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
3384c     08 4E 05 F1 | 	add	fp, #8
33850     A7 FA 61 FC | 	wrlong	result1, fp
33854     04 4E 85 F1 | 	sub	fp, #4
33858     A7 18 02 FB | 	rdlong	arg04, fp
3385c     0C 17 02 F6 | 	mov	arg03, arg04
33860     04 4E 85 F1 | 	sub	fp, #4
33864     10 18 06 F1 | 	add	arg04, #16
33868     0C 19 C2 FA | 	rdbyte	arg04, arg04
3386c     BF 18 06 F5 | 	and	arg04, #191
33870     10 16 06 F1 | 	add	arg03, #16
33874     0B 19 42 FC | 	wrbyte	arg04, arg03
33878                 | LR__4991
33878                 | LR__4992
33878                 | LR__4993
33878                 | ' 					dir = fp->dir_ptr;
33878                 | ' 					dir[ 11 ] |=  0x20 ;
33878                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
33878                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
33878                 | ' 					st_dword(dir +  22 , tm);
33878                 | ' 					st_word(dir +  18 , 0);
33878                 | ' 					fs->wflag = 1;
33878                 | ' 					res = sync_fs(fs);
33878                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
33878                 | ' 				}
33878                 | ' 			}
33878                 | ' 		}
33878                 | ' 	}
33878                 | ' 
33878                 | ' 	return res ;
33878     08 4E 05 F1 | 	add	fp, #8
3387c     A7 FA 01 FB | 	rdlong	result1, fp
33880     08 4E 85 F1 | 	sub	fp, #8
33884                 | LR__4994
33884     A7 F0 03 F6 | 	mov	ptra, fp
33888     B2 00 A0 FD | 	call	#popregs_
3388c                 | _fatfs_cc_f_sync_ret
3388c     2D 00 64 FD | 	ret
33890                 | 
33890                 | _fatfs_cc_f_close
33890     01 4A 05 F6 | 	mov	COUNT_, #1
33894     A8 00 A0 FD | 	call	#pushregs_
33898     10 F0 07 F1 | 	add	ptra, #16
3389c     04 4E 05 F1 | 	add	fp, #4
338a0     A7 12 62 FC | 	wrlong	arg01, fp
338a4     04 4E 85 F1 | 	sub	fp, #4
338a8     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
338ac     08 4E 05 F1 | 	add	fp, #8
338b0     A7 FA 61 FC | 	wrlong	result1, fp
338b4     08 4E 85 F1 | 	sub	fp, #8
338b8     00 FA 0D F2 | 	cmp	result1, #0 wz
338bc     38 00 90 5D |  if_ne	jmp	#LR__5000
338c0     04 4E 05 F1 | 	add	fp, #4
338c4     A7 12 02 FB | 	rdlong	arg01, fp
338c8     08 4E 05 F1 | 	add	fp, #8
338cc     A7 14 02 F6 | 	mov	arg02, fp
338d0     0C 4E 85 F1 | 	sub	fp, #12
338d4     9C E6 BF FD | 	call	#_fatfs_cc_validate
338d8     08 4E 05 F1 | 	add	fp, #8
338dc     A7 FA 61 FC | 	wrlong	result1, fp
338e0     08 4E 85 F1 | 	sub	fp, #8
338e4     00 FA 0D F2 | 	cmp	result1, #0 wz
338e8     04 4E 05 A1 |  if_e	add	fp, #4
338ec     A7 26 02 AB |  if_e	rdlong	local01, fp
338f0     04 4E 85 A1 |  if_e	sub	fp, #4
338f4     13 01 68 AC |  if_e	wrlong	#0, local01
338f8                 | LR__5000
338f8                 | ' 
338f8                 | ' 
338f8                 | ' 
338f8                 | ' 
338f8                 | ' 			fp->obj.fs = 0;
338f8                 | ' #line 4192 "ff.c"
338f8                 | ' 		}
338f8                 | ' 	}
338f8                 | ' 	return res;
338f8     08 4E 05 F1 | 	add	fp, #8
338fc     A7 FA 01 FB | 	rdlong	result1, fp
33900     08 4E 85 F1 | 	sub	fp, #8
33904     A7 F0 03 F6 | 	mov	ptra, fp
33908     B2 00 A0 FD | 	call	#popregs_
3390c                 | _fatfs_cc_f_close_ret
3390c     2D 00 64 FD | 	ret
33910                 | 
33910                 | _fatfs_cc_f_lseek
33910     00 4A 05 F6 | 	mov	COUNT_, #0
33914     A8 00 A0 FD | 	call	#pushregs_
33918     24 F0 07 F1 | 	add	ptra, #36
3391c     04 4E 05 F1 | 	add	fp, #4
33920     A7 12 62 FC | 	wrlong	arg01, fp
33924     04 4E 05 F1 | 	add	fp, #4
33928     A7 14 62 FC | 	wrlong	arg02, fp
3392c     04 4E 85 F1 | 	sub	fp, #4
33930     A7 12 02 FB | 	rdlong	arg01, fp
33934     0C 4E 05 F1 | 	add	fp, #12
33938     A7 14 02 F6 | 	mov	arg02, fp
3393c     10 4E 85 F1 | 	sub	fp, #16
33940     30 E6 BF FD | 	call	#_fatfs_cc_validate
33944     0C 4E 05 F1 | 	add	fp, #12
33948     A7 FA 61 FC | 	wrlong	result1, fp
3394c     0C 4E 85 F1 | 	sub	fp, #12
33950     00 FA 0D F2 | 	cmp	result1, #0 wz
33954     1C 00 90 5D |  if_ne	jmp	#LR__5010
33958     04 4E 05 F1 | 	add	fp, #4
3395c     A7 18 02 FB | 	rdlong	arg04, fp
33960     11 18 06 F1 | 	add	arg04, #17
33964     0C 19 C2 FA | 	rdbyte	arg04, arg04
33968     08 4E 05 F1 | 	add	fp, #8
3396c     A7 18 62 FC | 	wrlong	arg04, fp
33970     0C 4E 85 F1 | 	sub	fp, #12
33974                 | LR__5010
33974     0C 4E 05 F1 | 	add	fp, #12
33978     A7 18 0A FB | 	rdlong	arg04, fp wz
3397c     0C 4E 85 F1 | 	sub	fp, #12
33980     0C 4E 05 51 |  if_ne	add	fp, #12
33984     A7 FA 01 5B |  if_ne	rdlong	result1, fp
33988     0C 4E 85 51 |  if_ne	sub	fp, #12
3398c     40 06 90 5D |  if_ne	jmp	#LR__5033
33990     04 4E 05 F1 | 	add	fp, #4
33994     A7 18 02 FB | 	rdlong	arg04, fp
33998     04 4E 05 F1 | 	add	fp, #4
3399c     A7 16 02 FB | 	rdlong	arg03, fp
339a0     08 4E 85 F1 | 	sub	fp, #8
339a4     0C 18 06 F1 | 	add	arg04, #12
339a8     0C 19 02 FB | 	rdlong	arg04, arg04
339ac     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
339b0     3C 00 90 ED |  if_be	jmp	#LR__5011
339b4     04 4E 05 F1 | 	add	fp, #4
339b8     A7 16 02 FB | 	rdlong	arg03, fp
339bc     04 4E 85 F1 | 	sub	fp, #4
339c0     10 16 06 F1 | 	add	arg03, #16
339c4     0B 17 C2 FA | 	rdbyte	arg03, arg03
339c8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
339cc     02 16 CE F7 | 	test	arg03, #2 wz
339d0     1C 00 90 5D |  if_ne	jmp	#LR__5011
339d4     04 4E 05 F1 | 	add	fp, #4
339d8     A7 16 02 FB | 	rdlong	arg03, fp
339dc     0C 16 06 F1 | 	add	arg03, #12
339e0     0B 17 02 FB | 	rdlong	arg03, arg03
339e4     04 4E 05 F1 | 	add	fp, #4
339e8     A7 16 62 FC | 	wrlong	arg03, fp
339ec     08 4E 85 F1 | 	sub	fp, #8
339f0                 | LR__5011
339f0     04 4E 05 F1 | 	add	fp, #4
339f4     A7 16 02 FB | 	rdlong	arg03, fp
339f8     14 16 06 F1 | 	add	arg03, #20
339fc     0B 17 02 FB | 	rdlong	arg03, arg03
33a00     1C 4E 05 F1 | 	add	fp, #28
33a04     A7 16 62 FC | 	wrlong	arg03, fp
33a08     1C 4E 85 F1 | 	sub	fp, #28
33a0c     A7 16 02 FB | 	rdlong	arg03, fp
33a10     18 4E 05 F1 | 	add	fp, #24
33a14     A7 00 68 FC | 	wrlong	#0, fp
33a18     14 16 06 F1 | 	add	arg03, #20
33a1c     0B 01 68 FC | 	wrlong	#0, arg03
33a20     14 4E 85 F1 | 	sub	fp, #20
33a24     A7 16 02 FB | 	rdlong	arg03, fp
33a28     08 4E 85 F1 | 	sub	fp, #8
33a2c     01 16 16 F2 | 	cmp	arg03, #1 wc
33a30     E4 03 90 CD |  if_b	jmp	#LR__5027
33a34     10 4E 05 F1 | 	add	fp, #16
33a38     A7 16 02 FB | 	rdlong	arg03, fp
33a3c     0A 16 06 F1 | 	add	arg03, #10
33a40     0B 19 E2 FA | 	rdword	arg04, arg03
33a44     09 18 66 F0 | 	shl	arg04, #9
33a48     08 4E 05 F1 | 	add	fp, #8
33a4c     A7 18 62 FC | 	wrlong	arg04, fp
33a50     08 4E 05 F1 | 	add	fp, #8
33a54     A7 18 02 FB | 	rdlong	arg04, fp
33a58     20 4E 85 F1 | 	sub	fp, #32
33a5c     01 18 16 F2 | 	cmp	arg04, #1 wc
33a60     AC 00 90 CD |  if_b	jmp	#LR__5012
33a64     08 4E 05 F1 | 	add	fp, #8
33a68     A7 18 02 FB | 	rdlong	arg04, fp
33a6c     01 18 86 F1 | 	sub	arg04, #1
33a70     10 4E 05 F1 | 	add	fp, #16
33a74     A7 16 02 FB | 	rdlong	arg03, fp
33a78     0B 19 12 FD | 	qdiv	arg04, arg03
33a7c     08 4E 05 F1 | 	add	fp, #8
33a80     A7 FA 01 FB | 	rdlong	result1, fp
33a84     01 FA 85 F1 | 	sub	result1, #1
33a88     18 18 62 FD | 	getqx	arg04
33a8c     0B FB 11 FD | 	qdiv	result1, arg03
33a90     20 4E 85 F1 | 	sub	fp, #32
33a94     18 16 62 FD | 	getqx	arg03
33a98     0B 19 12 F2 | 	cmp	arg04, arg03 wc
33a9c     70 00 90 CD |  if_b	jmp	#LR__5012
33aa0     04 4E 05 F1 | 	add	fp, #4
33aa4     A7 16 02 FB | 	rdlong	arg03, fp
33aa8     1C 4E 05 F1 | 	add	fp, #28
33aac     A7 FA 01 FB | 	rdlong	result1, fp
33ab0     01 FA 85 F1 | 	sub	result1, #1
33ab4     08 4E 85 F1 | 	sub	fp, #8
33ab8     A7 18 02 FB | 	rdlong	arg04, fp
33abc     01 18 86 F1 | 	sub	arg04, #1
33ac0     0C FB 21 F5 | 	andn	result1, arg04
33ac4     14 16 06 F1 | 	add	arg03, #20
33ac8     0B FB 61 FC | 	wrlong	result1, arg03
33acc     10 4E 85 F1 | 	sub	fp, #16
33ad0     A7 16 02 FB | 	rdlong	arg03, fp
33ad4     04 4E 85 F1 | 	sub	fp, #4
33ad8     A7 18 02 FB | 	rdlong	arg04, fp
33adc     14 18 06 F1 | 	add	arg04, #20
33ae0     0C 19 02 FB | 	rdlong	arg04, arg04
33ae4     0C 17 82 F1 | 	sub	arg03, arg04
33ae8     04 4E 05 F1 | 	add	fp, #4
33aec     A7 16 62 FC | 	wrlong	arg03, fp
33af0     04 4E 85 F1 | 	sub	fp, #4
33af4     A7 16 02 FB | 	rdlong	arg03, fp
33af8     18 16 06 F1 | 	add	arg03, #24
33afc     0B 17 02 FB | 	rdlong	arg03, arg03
33b00     10 4E 05 F1 | 	add	fp, #16
33b04     A7 16 62 FC | 	wrlong	arg03, fp
33b08     14 4E 85 F1 | 	sub	fp, #20
33b0c     D0 00 90 FD | 	jmp	#LR__5016
33b10                 | LR__5012
33b10     04 4E 05 F1 | 	add	fp, #4
33b14     A7 16 02 FB | 	rdlong	arg03, fp
33b18     08 16 06 F1 | 	add	arg03, #8
33b1c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
33b20     10 4E 05 F1 | 	add	fp, #16
33b24     A7 16 62 FC | 	wrlong	arg03, fp
33b28     14 4E 85 F1 | 	sub	fp, #20
33b2c     94 00 90 5D |  if_ne	jmp	#LR__5015
33b30     04 4E 05 F1 | 	add	fp, #4
33b34     A7 12 02 FB | 	rdlong	arg01, fp
33b38     04 4E 85 F1 | 	sub	fp, #4
33b3c     00 14 06 F6 | 	mov	arg02, #0
33b40     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
33b44     14 4E 05 F1 | 	add	fp, #20
33b48     A7 FA 61 FC | 	wrlong	result1, fp
33b4c     14 4E 85 F1 | 	sub	fp, #20
33b50     01 FA 0D F2 | 	cmp	result1, #1 wz
33b54     1C 00 90 5D |  if_ne	jmp	#LR__5013
33b58     04 4E 05 F1 | 	add	fp, #4
33b5c     A7 16 02 FB | 	rdlong	arg03, fp
33b60     04 4E 85 F1 | 	sub	fp, #4
33b64     11 16 06 F1 | 	add	arg03, #17
33b68     0B 05 48 FC | 	wrbyte	#2, arg03
33b6c     02 FA 05 F6 | 	mov	result1, #2
33b70     5C 04 90 FD | 	jmp	#LR__5033
33b74                 | LR__5013
33b74     14 4E 05 F1 | 	add	fp, #20
33b78     A7 FA 01 FB | 	rdlong	result1, fp
33b7c     14 4E 85 F1 | 	sub	fp, #20
33b80     FF FF 7F FF 
33b84     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33b88     1C 00 90 5D |  if_ne	jmp	#LR__5014
33b8c     04 4E 05 F1 | 	add	fp, #4
33b90     A7 16 02 FB | 	rdlong	arg03, fp
33b94     04 4E 85 F1 | 	sub	fp, #4
33b98     11 16 06 F1 | 	add	arg03, #17
33b9c     0B 03 48 FC | 	wrbyte	#1, arg03
33ba0     01 FA 05 F6 | 	mov	result1, #1
33ba4     28 04 90 FD | 	jmp	#LR__5033
33ba8                 | LR__5014
33ba8     04 4E 05 F1 | 	add	fp, #4
33bac     A7 16 02 FB | 	rdlong	arg03, fp
33bb0     10 4E 05 F1 | 	add	fp, #16
33bb4     A7 18 02 FB | 	rdlong	arg04, fp
33bb8     14 4E 85 F1 | 	sub	fp, #20
33bbc     08 16 06 F1 | 	add	arg03, #8
33bc0     0B 19 62 FC | 	wrlong	arg04, arg03
33bc4                 | LR__5015
33bc4     04 4E 05 F1 | 	add	fp, #4
33bc8     A7 16 02 FB | 	rdlong	arg03, fp
33bcc     10 4E 05 F1 | 	add	fp, #16
33bd0     A7 18 02 FB | 	rdlong	arg04, fp
33bd4     14 4E 85 F1 | 	sub	fp, #20
33bd8     18 16 06 F1 | 	add	arg03, #24
33bdc     0B 19 62 FC | 	wrlong	arg04, arg03
33be0                 | LR__5016
33be0     14 4E 05 F1 | 	add	fp, #20
33be4     A7 16 0A FB | 	rdlong	arg03, fp wz
33be8     14 4E 85 F1 | 	sub	fp, #20
33bec     28 02 90 AD |  if_e	jmp	#LR__5026
33bf0                 | ' 				while (ofs > bcs) {
33bf0                 | LR__5017
33bf0     08 4E 05 F1 | 	add	fp, #8
33bf4     A7 18 02 FB | 	rdlong	arg04, fp
33bf8     10 4E 05 F1 | 	add	fp, #16
33bfc     A7 16 02 FB | 	rdlong	arg03, fp
33c00     18 4E 85 F1 | 	sub	fp, #24
33c04     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
33c08     68 01 90 ED |  if_be	jmp	#LR__5023
33c0c     08 4E 05 F1 | 	add	fp, #8
33c10     A7 18 02 FB | 	rdlong	arg04, fp
33c14     10 4E 05 F1 | 	add	fp, #16
33c18     A7 16 02 FB | 	rdlong	arg03, fp
33c1c     0B 19 82 F1 | 	sub	arg04, arg03
33c20     10 4E 85 F1 | 	sub	fp, #16
33c24     A7 18 62 FC | 	wrlong	arg04, fp
33c28     04 4E 85 F1 | 	sub	fp, #4
33c2c     A7 18 02 FB | 	rdlong	arg04, fp
33c30     0C FB 01 F6 | 	mov	result1, arg04
33c34     14 18 06 F1 | 	add	arg04, #20
33c38     0C 19 02 FB | 	rdlong	arg04, arg04
33c3c     14 4E 05 F1 | 	add	fp, #20
33c40     A7 16 02 FB | 	rdlong	arg03, fp
33c44     0B 19 02 F1 | 	add	arg04, arg03
33c48     14 FA 05 F1 | 	add	result1, #20
33c4c     FD 18 62 FC | 	wrlong	arg04, result1
33c50     14 4E 85 F1 | 	sub	fp, #20
33c54     A7 16 02 FB | 	rdlong	arg03, fp
33c58     04 4E 85 F1 | 	sub	fp, #4
33c5c     10 16 06 F1 | 	add	arg03, #16
33c60     0B 17 C2 FA | 	rdbyte	arg03, arg03
33c64     02 16 CE F7 | 	test	arg03, #2 wz
33c68     3C 00 90 AD |  if_e	jmp	#LR__5018
33c6c     04 4E 05 F1 | 	add	fp, #4
33c70     A7 12 02 FB | 	rdlong	arg01, fp
33c74     10 4E 05 F1 | 	add	fp, #16
33c78     A7 14 02 FB | 	rdlong	arg02, fp
33c7c     14 4E 85 F1 | 	sub	fp, #20
33c80     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
33c84     14 4E 05 F1 | 	add	fp, #20
33c88     A7 FA 61 FC | 	wrlong	result1, fp
33c8c     00 FA 4D F2 | 	cmps	result1, #0 wz
33c90     14 4E 85 F1 | 	sub	fp, #20
33c94     08 4E 05 A1 |  if_e	add	fp, #8
33c98     A7 00 68 AC |  if_e	wrlong	#0, fp
33c9c     08 4E 85 A1 |  if_e	sub	fp, #8
33ca0                 | ' 							ofs = 0; break;
33ca0     D0 00 90 AD |  if_e	jmp	#LR__5023
33ca4     24 00 90 FD | 	jmp	#LR__5019
33ca8                 | LR__5018
33ca8     04 4E 05 F1 | 	add	fp, #4
33cac     A7 12 02 FB | 	rdlong	arg01, fp
33cb0     10 4E 05 F1 | 	add	fp, #16
33cb4     A7 14 02 FB | 	rdlong	arg02, fp
33cb8     14 4E 85 F1 | 	sub	fp, #20
33cbc     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
33cc0     14 4E 05 F1 | 	add	fp, #20
33cc4     A7 FA 61 FC | 	wrlong	result1, fp
33cc8     14 4E 85 F1 | 	sub	fp, #20
33ccc                 | LR__5019
33ccc     14 4E 05 F1 | 	add	fp, #20
33cd0     A7 16 02 FB | 	rdlong	arg03, fp
33cd4     14 4E 85 F1 | 	sub	fp, #20
33cd8     FF FF 7F FF 
33cdc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33ce0     1C 00 90 5D |  if_ne	jmp	#LR__5020
33ce4     04 4E 05 F1 | 	add	fp, #4
33ce8     A7 16 02 FB | 	rdlong	arg03, fp
33cec     04 4E 85 F1 | 	sub	fp, #4
33cf0     11 16 06 F1 | 	add	arg03, #17
33cf4     0B 03 48 FC | 	wrbyte	#1, arg03
33cf8     01 FA 05 F6 | 	mov	result1, #1
33cfc     D0 02 90 FD | 	jmp	#LR__5033
33d00                 | LR__5020
33d00     14 4E 05 F1 | 	add	fp, #20
33d04     A7 16 02 FB | 	rdlong	arg03, fp
33d08     14 4E 85 F1 | 	sub	fp, #20
33d0c     02 16 16 F2 | 	cmp	arg03, #2 wc
33d10     24 00 90 CD |  if_b	jmp	#LR__5021
33d14     10 4E 05 F1 | 	add	fp, #16
33d18     A7 18 02 FB | 	rdlong	arg04, fp
33d1c     04 4E 05 F1 | 	add	fp, #4
33d20     A7 16 02 FB | 	rdlong	arg03, fp
33d24     14 4E 85 F1 | 	sub	fp, #20
33d28     18 18 06 F1 | 	add	arg04, #24
33d2c     0C 19 02 FB | 	rdlong	arg04, arg04
33d30     0C 17 12 F2 | 	cmp	arg03, arg04 wc
33d34     1C 00 90 CD |  if_b	jmp	#LR__5022
33d38                 | LR__5021
33d38     04 4E 05 F1 | 	add	fp, #4
33d3c     A7 16 02 FB | 	rdlong	arg03, fp
33d40     04 4E 85 F1 | 	sub	fp, #4
33d44     11 16 06 F1 | 	add	arg03, #17
33d48     0B 05 48 FC | 	wrbyte	#2, arg03
33d4c     02 FA 05 F6 | 	mov	result1, #2
33d50     7C 02 90 FD | 	jmp	#LR__5033
33d54                 | LR__5022
33d54     04 4E 05 F1 | 	add	fp, #4
33d58     A7 18 02 FB | 	rdlong	arg04, fp
33d5c     10 4E 05 F1 | 	add	fp, #16
33d60     A7 16 02 FB | 	rdlong	arg03, fp
33d64     14 4E 85 F1 | 	sub	fp, #20
33d68     18 18 06 F1 | 	add	arg04, #24
33d6c     0C 17 62 FC | 	wrlong	arg03, arg04
33d70     7C FE 9F FD | 	jmp	#LR__5017
33d74                 | LR__5023
33d74     04 4E 05 F1 | 	add	fp, #4
33d78     A7 16 02 FB | 	rdlong	arg03, fp
33d7c     0B 13 02 F6 | 	mov	arg01, arg03
33d80     14 16 06 F1 | 	add	arg03, #20
33d84     0B 15 02 FB | 	rdlong	arg02, arg03
33d88     04 4E 05 F1 | 	add	fp, #4
33d8c     A7 16 02 FB | 	rdlong	arg03, fp
33d90     0B 15 02 F1 | 	add	arg02, arg03
33d94     14 12 06 F1 | 	add	arg01, #20
33d98     09 15 62 FC | 	wrlong	arg02, arg01
33d9c     A7 16 02 FB | 	rdlong	arg03, fp
33da0     08 4E 85 F1 | 	sub	fp, #8
33da4     FF 17 CE F7 | 	test	arg03, #511 wz
33da8     6C 00 90 AD |  if_e	jmp	#LR__5025
33dac     10 4E 05 F1 | 	add	fp, #16
33db0     A7 12 02 FB | 	rdlong	arg01, fp
33db4     04 4E 05 F1 | 	add	fp, #4
33db8     A7 14 02 FB | 	rdlong	arg02, fp
33dbc     14 4E 85 F1 | 	sub	fp, #20
33dc0     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
33dc4     1C 4E 05 F1 | 	add	fp, #28
33dc8     A7 FA 61 FC | 	wrlong	result1, fp
33dcc     1C 4E 85 F1 | 	sub	fp, #28
33dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
33dd4     1C 00 90 5D |  if_ne	jmp	#LR__5024
33dd8     04 4E 05 F1 | 	add	fp, #4
33ddc     A7 16 02 FB | 	rdlong	arg03, fp
33de0     04 4E 85 F1 | 	sub	fp, #4
33de4     11 16 06 F1 | 	add	arg03, #17
33de8     0B 05 48 FC | 	wrbyte	#2, arg03
33dec     02 FA 05 F6 | 	mov	result1, #2
33df0     DC 01 90 FD | 	jmp	#LR__5033
33df4                 | LR__5024
33df4     1C 4E 05 F1 | 	add	fp, #28
33df8     A7 18 02 FB | 	rdlong	arg04, fp
33dfc     14 4E 85 F1 | 	sub	fp, #20
33e00     A7 16 02 FB | 	rdlong	arg03, fp
33e04     09 16 46 F0 | 	shr	arg03, #9
33e08     0B 19 02 F1 | 	add	arg04, arg03
33e0c     14 4E 05 F1 | 	add	fp, #20
33e10     A7 18 62 FC | 	wrlong	arg04, fp
33e14     1C 4E 85 F1 | 	sub	fp, #28
33e18                 | LR__5025
33e18                 | LR__5026
33e18                 | LR__5027
33e18     04 4E 05 F1 | 	add	fp, #4
33e1c     A7 18 02 FB | 	rdlong	arg04, fp
33e20     0C 17 02 F6 | 	mov	arg03, arg04
33e24     04 4E 85 F1 | 	sub	fp, #4
33e28     14 16 06 F1 | 	add	arg03, #20
33e2c     0B 17 02 FB | 	rdlong	arg03, arg03
33e30     0C 18 06 F1 | 	add	arg04, #12
33e34     0C 19 02 FB | 	rdlong	arg04, arg04
33e38     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33e3c     3C 00 90 ED |  if_be	jmp	#LR__5028
33e40     04 4E 05 F1 | 	add	fp, #4
33e44     A7 18 02 FB | 	rdlong	arg04, fp
33e48     0C 17 02 F6 | 	mov	arg03, arg04
33e4c     14 18 06 F1 | 	add	arg04, #20
33e50     0C 19 02 FB | 	rdlong	arg04, arg04
33e54     0C 16 06 F1 | 	add	arg03, #12
33e58     0B 19 62 FC | 	wrlong	arg04, arg03
33e5c     A7 18 02 FB | 	rdlong	arg04, fp
33e60     0C 17 02 F6 | 	mov	arg03, arg04
33e64     04 4E 85 F1 | 	sub	fp, #4
33e68     10 18 06 F1 | 	add	arg04, #16
33e6c     0C 19 C2 FA | 	rdbyte	arg04, arg04
33e70     40 18 46 F5 | 	or	arg04, #64
33e74     10 16 06 F1 | 	add	arg03, #16
33e78     0B 19 42 FC | 	wrbyte	arg04, arg03
33e7c                 | LR__5028
33e7c     04 4E 05 F1 | 	add	fp, #4
33e80     A7 16 02 FB | 	rdlong	arg03, fp
33e84     04 4E 85 F1 | 	sub	fp, #4
33e88     14 16 06 F1 | 	add	arg03, #20
33e8c     0B 17 02 FB | 	rdlong	arg03, arg03
33e90     FF 17 CE F7 | 	test	arg03, #511 wz
33e94     2C 01 90 AD |  if_e	jmp	#LR__5032
33e98     04 4E 05 F1 | 	add	fp, #4
33e9c     A7 18 02 FB | 	rdlong	arg04, fp
33ea0     18 4E 05 F1 | 	add	fp, #24
33ea4     A7 16 02 FB | 	rdlong	arg03, fp
33ea8     1C 4E 85 F1 | 	sub	fp, #28
33eac     1C 18 06 F1 | 	add	arg04, #28
33eb0     0C 19 02 FB | 	rdlong	arg04, arg04
33eb4     0C 17 0A F2 | 	cmp	arg03, arg04 wz
33eb8     08 01 90 AD |  if_e	jmp	#LR__5032
33ebc     04 4E 05 F1 | 	add	fp, #4
33ec0     A7 16 02 FB | 	rdlong	arg03, fp
33ec4     04 4E 85 F1 | 	sub	fp, #4
33ec8     10 16 06 F1 | 	add	arg03, #16
33ecc     0B 17 C2 FA | 	rdbyte	arg03, arg03
33ed0     80 16 CE F7 | 	test	arg03, #128 wz
33ed4     7C 00 90 AD |  if_e	jmp	#LR__5030
33ed8     10 4E 05 F1 | 	add	fp, #16
33edc     A7 16 02 FB | 	rdlong	arg03, fp
33ee0     01 16 06 F1 | 	add	arg03, #1
33ee4     0B 13 C2 FA | 	rdbyte	arg01, arg03
33ee8     0C 4E 85 F1 | 	sub	fp, #12
33eec     A7 16 02 FB | 	rdlong	arg03, fp
33ef0     0B 15 02 F6 | 	mov	arg02, arg03
33ef4     28 14 06 F1 | 	add	arg02, #40
33ef8     04 4E 85 F1 | 	sub	fp, #4
33efc     1C 16 06 F1 | 	add	arg03, #28
33f00     0B 17 02 FB | 	rdlong	arg03, arg03
33f04     01 18 06 F6 | 	mov	arg04, #1
33f08     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
33f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
33f10     1C 00 90 AD |  if_e	jmp	#LR__5029
33f14     04 4E 05 F1 | 	add	fp, #4
33f18     A7 16 02 FB | 	rdlong	arg03, fp
33f1c     04 4E 85 F1 | 	sub	fp, #4
33f20     11 16 06 F1 | 	add	arg03, #17
33f24     0B 03 48 FC | 	wrbyte	#1, arg03
33f28     01 FA 05 F6 | 	mov	result1, #1
33f2c     A0 00 90 FD | 	jmp	#LR__5033
33f30                 | LR__5029
33f30     04 4E 05 F1 | 	add	fp, #4
33f34     A7 18 02 FB | 	rdlong	arg04, fp
33f38     0C 17 02 F6 | 	mov	arg03, arg04
33f3c     04 4E 85 F1 | 	sub	fp, #4
33f40     10 18 06 F1 | 	add	arg04, #16
33f44     0C 19 C2 FA | 	rdbyte	arg04, arg04
33f48     7F 18 06 F5 | 	and	arg04, #127
33f4c     10 16 06 F1 | 	add	arg03, #16
33f50     0B 19 42 FC | 	wrbyte	arg04, arg03
33f54                 | LR__5030
33f54     10 4E 05 F1 | 	add	fp, #16
33f58     A7 16 02 FB | 	rdlong	arg03, fp
33f5c     01 16 06 F1 | 	add	arg03, #1
33f60     0B 13 C2 FA | 	rdbyte	arg01, arg03
33f64     0C 4E 85 F1 | 	sub	fp, #12
33f68     A7 14 02 FB | 	rdlong	arg02, fp
33f6c     28 14 06 F1 | 	add	arg02, #40
33f70     18 4E 05 F1 | 	add	fp, #24
33f74     A7 16 02 FB | 	rdlong	arg03, fp
33f78     1C 4E 85 F1 | 	sub	fp, #28
33f7c     01 18 06 F6 | 	mov	arg04, #1
33f80     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
33f84     00 FA 0D F2 | 	cmp	result1, #0 wz
33f88     1C 00 90 AD |  if_e	jmp	#LR__5031
33f8c     04 4E 05 F1 | 	add	fp, #4
33f90     A7 16 02 FB | 	rdlong	arg03, fp
33f94     04 4E 85 F1 | 	sub	fp, #4
33f98     11 16 06 F1 | 	add	arg03, #17
33f9c     0B 03 48 FC | 	wrbyte	#1, arg03
33fa0     01 FA 05 F6 | 	mov	result1, #1
33fa4     28 00 90 FD | 	jmp	#LR__5033
33fa8                 | LR__5031
33fa8     04 4E 05 F1 | 	add	fp, #4
33fac     A7 18 02 FB | 	rdlong	arg04, fp
33fb0     18 4E 05 F1 | 	add	fp, #24
33fb4     A7 16 02 FB | 	rdlong	arg03, fp
33fb8     1C 4E 85 F1 | 	sub	fp, #28
33fbc     1C 18 06 F1 | 	add	arg04, #28
33fc0     0C 17 62 FC | 	wrlong	arg03, arg04
33fc4                 | LR__5032
33fc4                 | ' 
33fc4                 | ' 			fp->sect = nsect;
33fc4                 | ' 		}
33fc4                 | ' 	}
33fc4                 | ' 
33fc4                 | ' 	return res ;
33fc4     0C 4E 05 F1 | 	add	fp, #12
33fc8     A7 FA 01 FB | 	rdlong	result1, fp
33fcc     0C 4E 85 F1 | 	sub	fp, #12
33fd0                 | LR__5033
33fd0     A7 F0 03 F6 | 	mov	ptra, fp
33fd4     B2 00 A0 FD | 	call	#popregs_
33fd8                 | _fatfs_cc_f_lseek_ret
33fd8     2D 00 64 FD | 	ret
33fdc                 | 
33fdc                 | _fatfs_cc_f_opendir
33fdc     01 4A 05 F6 | 	mov	COUNT_, #1
33fe0     A8 00 A0 FD | 	call	#pushregs_
33fe4     14 F0 07 F1 | 	add	ptra, #20
33fe8     04 4E 05 F1 | 	add	fp, #4
33fec     A7 12 62 FC | 	wrlong	arg01, fp
33ff0     04 4E 05 F1 | 	add	fp, #4
33ff4     A7 14 62 FC | 	wrlong	arg02, fp
33ff8     04 4E 85 F1 | 	sub	fp, #4
33ffc     A7 16 0A FB | 	rdlong	arg03, fp wz
34000     04 4E 85 F1 | 	sub	fp, #4
34004     09 FA 05 A6 |  if_e	mov	result1, #9
34008     78 01 90 AD |  if_e	jmp	#LR__5046
3400c     08 4E 05 F1 | 	add	fp, #8
34010     A7 12 02 F6 | 	mov	arg01, fp
34014     08 4E 05 F1 | 	add	fp, #8
34018     A7 14 02 F6 | 	mov	arg02, fp
3401c     10 4E 85 F1 | 	sub	fp, #16
34020     00 16 06 F6 | 	mov	arg03, #0
34024     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
34028     0C 4E 05 F1 | 	add	fp, #12
3402c     A7 FA 61 FC | 	wrlong	result1, fp
34030     0C 4E 85 F1 | 	sub	fp, #12
34034     00 FA 0D F2 | 	cmp	result1, #0 wz
34038     20 01 90 5D |  if_ne	jmp	#LR__5045
3403c     04 4E 05 F1 | 	add	fp, #4
34040     A7 16 02 FB | 	rdlong	arg03, fp
34044     0C 4E 05 F1 | 	add	fp, #12
34048     A7 FA 01 FB | 	rdlong	result1, fp
3404c     0B FB 61 FC | 	wrlong	result1, arg03
34050     0C 4E 85 F1 | 	sub	fp, #12
34054     A7 12 02 FB | 	rdlong	arg01, fp
34058     04 4E 05 F1 | 	add	fp, #4
3405c     A7 14 02 FB | 	rdlong	arg02, fp
34060     08 4E 85 F1 | 	sub	fp, #8
34064     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
34068     0C 4E 05 F1 | 	add	fp, #12
3406c     A7 FA 61 FC | 	wrlong	result1, fp
34070     0C 4E 85 F1 | 	sub	fp, #12
34074     00 FA 0D F2 | 	cmp	result1, #0 wz
34078     C4 00 90 5D |  if_ne	jmp	#LR__5044
3407c     04 4E 05 F1 | 	add	fp, #4
34080     A7 16 02 FB | 	rdlong	arg03, fp
34084     04 4E 85 F1 | 	sub	fp, #4
34088     2B 16 06 F1 | 	add	arg03, #43
3408c     0B 17 C2 FA | 	rdbyte	arg03, arg03
34090     80 16 CE F7 | 	test	arg03, #128 wz
34094     58 00 90 5D |  if_ne	jmp	#LR__5042
34098     04 4E 05 F1 | 	add	fp, #4
3409c     A7 16 02 FB | 	rdlong	arg03, fp
340a0     04 4E 85 F1 | 	sub	fp, #4
340a4     06 16 06 F1 | 	add	arg03, #6
340a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
340ac     10 16 CE F7 | 	test	arg03, #16 wz
340b0     30 00 90 AD |  if_e	jmp	#LR__5040
340b4     04 4E 05 F1 | 	add	fp, #4
340b8     A7 16 02 FB | 	rdlong	arg03, fp
340bc     0B 27 02 F6 | 	mov	local01, arg03
340c0     0C 4E 05 F1 | 	add	fp, #12
340c4     A7 12 02 FB | 	rdlong	arg01, fp
340c8     10 4E 85 F1 | 	sub	fp, #16
340cc     1C 16 06 F1 | 	add	arg03, #28
340d0     0B 15 02 FB | 	rdlong	arg02, arg03
340d4     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
340d8     08 26 06 F1 | 	add	local01, #8
340dc     13 FB 61 FC | 	wrlong	result1, local01
340e0     0C 00 90 FD | 	jmp	#LR__5041
340e4                 | LR__5040
340e4     0C 4E 05 F1 | 	add	fp, #12
340e8     A7 0A 68 FC | 	wrlong	#5, fp
340ec     0C 4E 85 F1 | 	sub	fp, #12
340f0                 | LR__5041
340f0                 | LR__5042
340f0     0C 4E 05 F1 | 	add	fp, #12
340f4     A7 26 0A FB | 	rdlong	local01, fp wz
340f8     0C 4E 85 F1 | 	sub	fp, #12
340fc     40 00 90 5D |  if_ne	jmp	#LR__5043
34100     04 4E 05 F1 | 	add	fp, #4
34104     A7 26 02 FB | 	rdlong	local01, fp
34108     0C 4E 05 F1 | 	add	fp, #12
3410c     A7 16 02 FB | 	rdlong	arg03, fp
34110     06 16 06 F1 | 	add	arg03, #6
34114     0B 17 E2 FA | 	rdword	arg03, arg03
34118     04 26 06 F1 | 	add	local01, #4
3411c     13 17 52 FC | 	wrword	arg03, local01
34120     0C 4E 85 F1 | 	sub	fp, #12
34124     A7 12 02 FB | 	rdlong	arg01, fp
34128     04 4E 85 F1 | 	sub	fp, #4
3412c     00 14 06 F6 | 	mov	arg02, #0
34130     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
34134     0C 4E 05 F1 | 	add	fp, #12
34138     A7 FA 61 FC | 	wrlong	result1, fp
3413c     0C 4E 85 F1 | 	sub	fp, #12
34140                 | LR__5043
34140                 | LR__5044
34140     0C 4E 05 F1 | 	add	fp, #12
34144     A7 26 02 FB | 	rdlong	local01, fp
34148     0C 4E 85 F1 | 	sub	fp, #12
3414c     04 26 0E F2 | 	cmp	local01, #4 wz
34150     0C 4E 05 A1 |  if_e	add	fp, #12
34154     A7 0A 68 AC |  if_e	wrlong	#5, fp
34158     0C 4E 85 A1 |  if_e	sub	fp, #12
3415c                 | LR__5045
3415c     0C 4E 05 F1 | 	add	fp, #12
34160     A7 26 0A FB | 	rdlong	local01, fp wz
34164     0C 4E 85 F1 | 	sub	fp, #12
34168     04 4E 05 51 |  if_ne	add	fp, #4
3416c     A7 26 02 5B |  if_ne	rdlong	local01, fp
34170     04 4E 85 51 |  if_ne	sub	fp, #4
34174     13 01 68 5C |  if_ne	wrlong	#0, local01
34178                 | ' 
34178                 | ' 	return res ;
34178     0C 4E 05 F1 | 	add	fp, #12
3417c     A7 FA 01 FB | 	rdlong	result1, fp
34180     0C 4E 85 F1 | 	sub	fp, #12
34184                 | LR__5046
34184     A7 F0 03 F6 | 	mov	ptra, fp
34188     B2 00 A0 FD | 	call	#popregs_
3418c                 | _fatfs_cc_f_opendir_ret
3418c     2D 00 64 FD | 	ret
34190                 | 
34190                 | _fatfs_cc_f_closedir
34190     00 4A 05 F6 | 	mov	COUNT_, #0
34194     A8 00 A0 FD | 	call	#pushregs_
34198     10 F0 07 F1 | 	add	ptra, #16
3419c     04 4E 05 F1 | 	add	fp, #4
341a0     A7 12 62 FC | 	wrlong	arg01, fp
341a4     08 4E 05 F1 | 	add	fp, #8
341a8     A7 14 02 F6 | 	mov	arg02, fp
341ac     0C 4E 85 F1 | 	sub	fp, #12
341b0     C0 DD BF FD | 	call	#_fatfs_cc_validate
341b4     08 4E 05 F1 | 	add	fp, #8
341b8     A7 FA 61 FC | 	wrlong	result1, fp
341bc     08 4E 85 F1 | 	sub	fp, #8
341c0     00 FA 0D F2 | 	cmp	result1, #0 wz
341c4     04 4E 05 A1 |  if_e	add	fp, #4
341c8     A7 FA 01 AB |  if_e	rdlong	result1, fp
341cc     04 4E 85 A1 |  if_e	sub	fp, #4
341d0     FD 00 68 AC |  if_e	wrlong	#0, result1
341d4                 | ' 
341d4                 | ' 
341d4                 | ' 
341d4                 | ' 
341d4                 | ' 		dp->obj.fs = 0;
341d4                 | ' #line 4633 "ff.c"
341d4                 | ' 	}
341d4                 | ' 	return res;
341d4     08 4E 05 F1 | 	add	fp, #8
341d8     A7 FA 01 FB | 	rdlong	result1, fp
341dc     08 4E 85 F1 | 	sub	fp, #8
341e0     A7 F0 03 F6 | 	mov	ptra, fp
341e4     B2 00 A0 FD | 	call	#popregs_
341e8                 | _fatfs_cc_f_closedir_ret
341e8     2D 00 64 FD | 	ret
341ec                 | 
341ec                 | _fatfs_cc_f_readdir
341ec     00 4A 05 F6 | 	mov	COUNT_, #0
341f0     A8 00 A0 FD | 	call	#pushregs_
341f4     14 F0 07 F1 | 	add	ptra, #20
341f8     04 4E 05 F1 | 	add	fp, #4
341fc     A7 12 62 FC | 	wrlong	arg01, fp
34200     04 4E 05 F1 | 	add	fp, #4
34204     A7 14 62 FC | 	wrlong	arg02, fp
34208     04 4E 85 F1 | 	sub	fp, #4
3420c     A7 12 02 FB | 	rdlong	arg01, fp
34210     0C 4E 05 F1 | 	add	fp, #12
34214     A7 14 02 F6 | 	mov	arg02, fp
34218     10 4E 85 F1 | 	sub	fp, #16
3421c     54 DD BF FD | 	call	#_fatfs_cc_validate
34220     0C 4E 05 F1 | 	add	fp, #12
34224     A7 FA 61 FC | 	wrlong	result1, fp
34228     0C 4E 85 F1 | 	sub	fp, #12
3422c     00 FA 0D F2 | 	cmp	result1, #0 wz
34230     BC 00 90 5D |  if_ne	jmp	#LR__5053
34234     08 4E 05 F1 | 	add	fp, #8
34238     A7 FA 09 FB | 	rdlong	result1, fp wz
3423c     08 4E 85 F1 | 	sub	fp, #8
34240     24 00 90 5D |  if_ne	jmp	#LR__5050
34244     04 4E 05 F1 | 	add	fp, #4
34248     A7 12 02 FB | 	rdlong	arg01, fp
3424c     04 4E 85 F1 | 	sub	fp, #4
34250     00 14 06 F6 | 	mov	arg02, #0
34254     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
34258     0C 4E 05 F1 | 	add	fp, #12
3425c     A7 FA 61 FC | 	wrlong	result1, fp
34260     0C 4E 85 F1 | 	sub	fp, #12
34264     88 00 90 FD | 	jmp	#LR__5052
34268                 | LR__5050
34268     04 4E 05 F1 | 	add	fp, #4
3426c     A7 12 02 FB | 	rdlong	arg01, fp
34270     04 4E 85 F1 | 	sub	fp, #4
34274     00 14 06 F6 | 	mov	arg02, #0
34278     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
3427c     0C 4E 05 F1 | 	add	fp, #12
34280     A7 FA 61 FC | 	wrlong	result1, fp
34284     0C 4E 85 F1 | 	sub	fp, #12
34288     04 FA 0D F2 | 	cmp	result1, #4 wz
3428c     0C 4E 05 A1 |  if_e	add	fp, #12
34290     A7 00 68 AC |  if_e	wrlong	#0, fp
34294     0C 4E 85 A1 |  if_e	sub	fp, #12
34298     0C 4E 05 F1 | 	add	fp, #12
3429c     A7 FA 09 FB | 	rdlong	result1, fp wz
342a0     0C 4E 85 F1 | 	sub	fp, #12
342a4     48 00 90 5D |  if_ne	jmp	#LR__5051
342a8     04 4E 05 F1 | 	add	fp, #4
342ac     A7 12 02 FB | 	rdlong	arg01, fp
342b0     04 4E 05 F1 | 	add	fp, #4
342b4     A7 14 02 FB | 	rdlong	arg02, fp
342b8     08 4E 85 F1 | 	sub	fp, #8
342bc     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
342c0     04 4E 05 F1 | 	add	fp, #4
342c4     A7 12 02 FB | 	rdlong	arg01, fp
342c8     04 4E 85 F1 | 	sub	fp, #4
342cc     00 14 06 F6 | 	mov	arg02, #0
342d0     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
342d4     0C 4E 05 F1 | 	add	fp, #12
342d8     A7 FA 61 FC | 	wrlong	result1, fp
342dc     0C 4E 85 F1 | 	sub	fp, #12
342e0     04 FA 0D F2 | 	cmp	result1, #4 wz
342e4     0C 4E 05 A1 |  if_e	add	fp, #12
342e8     A7 00 68 AC |  if_e	wrlong	#0, fp
342ec     0C 4E 85 A1 |  if_e	sub	fp, #12
342f0                 | LR__5051
342f0                 | LR__5052
342f0                 | LR__5053
342f0                 | ' 			}
342f0                 | ' 			;
342f0                 | ' 		}
342f0                 | ' 	}
342f0                 | ' 	return res ;
342f0     0C 4E 05 F1 | 	add	fp, #12
342f4     A7 FA 01 FB | 	rdlong	result1, fp
342f8     0C 4E 85 F1 | 	sub	fp, #12
342fc     A7 F0 03 F6 | 	mov	ptra, fp
34300     B2 00 A0 FD | 	call	#popregs_
34304                 | _fatfs_cc_f_readdir_ret
34304     2D 00 64 FD | 	ret
34308                 | 
34308                 | _fatfs_cc_f_stat
34308     00 4A 05 F6 | 	mov	COUNT_, #0
3430c     A8 00 A0 FD | 	call	#pushregs_
34310     40 F0 07 F1 | 	add	ptra, #64
34314     04 4E 05 F1 | 	add	fp, #4
34318     A7 12 62 FC | 	wrlong	arg01, fp
3431c     04 4E 05 F1 | 	add	fp, #4
34320     A7 14 62 FC | 	wrlong	arg02, fp
34324     04 4E 85 F1 | 	sub	fp, #4
34328     A7 12 02 F6 | 	mov	arg01, fp
3432c     0C 4E 05 F1 | 	add	fp, #12
34330     A7 14 02 F6 | 	mov	arg02, fp
34334     10 4E 85 F1 | 	sub	fp, #16
34338     00 16 06 F6 | 	mov	arg03, #0
3433c     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
34340     0C 4E 05 F1 | 	add	fp, #12
34344     A7 FA 61 FC | 	wrlong	result1, fp
34348     0C 4E 85 F1 | 	sub	fp, #12
3434c     00 FA 0D F2 | 	cmp	result1, #0 wz
34350     74 00 90 5D |  if_ne	jmp	#LR__5063
34354     10 4E 05 F1 | 	add	fp, #16
34358     A7 12 02 F6 | 	mov	arg01, fp
3435c     0C 4E 85 F1 | 	sub	fp, #12
34360     A7 14 02 FB | 	rdlong	arg02, fp
34364     04 4E 85 F1 | 	sub	fp, #4
34368     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
3436c     0C 4E 05 F1 | 	add	fp, #12
34370     A7 FA 61 FC | 	wrlong	result1, fp
34374     0C 4E 85 F1 | 	sub	fp, #12
34378     00 FA 0D F2 | 	cmp	result1, #0 wz
3437c     48 00 90 5D |  if_ne	jmp	#LR__5062
34380     3B 4E 05 F1 | 	add	fp, #59
34384     A7 FA C1 FA | 	rdbyte	result1, fp
34388     3B 4E 85 F1 | 	sub	fp, #59
3438c     80 FA CD F7 | 	test	result1, #128 wz
34390     0C 4E 05 51 |  if_ne	add	fp, #12
34394     A7 0C 68 5C |  if_ne	wrlong	#6, fp
34398     0C 4E 85 51 |  if_ne	sub	fp, #12
3439c     28 00 90 5D |  if_ne	jmp	#LR__5061
343a0     08 4E 05 F1 | 	add	fp, #8
343a4     A7 FA 09 FB | 	rdlong	result1, fp wz
343a8     08 4E 85 F1 | 	sub	fp, #8
343ac     18 00 90 AD |  if_e	jmp	#LR__5060
343b0     10 4E 05 F1 | 	add	fp, #16
343b4     A7 12 02 F6 | 	mov	arg01, fp
343b8     08 4E 85 F1 | 	sub	fp, #8
343bc     A7 14 02 FB | 	rdlong	arg02, fp
343c0     08 4E 85 F1 | 	sub	fp, #8
343c4     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
343c8                 | LR__5060
343c8                 | LR__5061
343c8                 | LR__5062
343c8                 | LR__5063
343c8                 | ' 			}
343c8                 | ' 		}
343c8                 | ' 		;
343c8                 | ' 	}
343c8                 | ' 
343c8                 | ' 	return res ;
343c8     0C 4E 05 F1 | 	add	fp, #12
343cc     A7 FA 01 FB | 	rdlong	result1, fp
343d0     0C 4E 85 F1 | 	sub	fp, #12
343d4     A7 F0 03 F6 | 	mov	ptra, fp
343d8     B2 00 A0 FD | 	call	#popregs_
343dc                 | _fatfs_cc_f_stat_ret
343dc     2D 00 64 FD | 	ret
343e0                 | 
343e0                 | _fatfs_cc_f_unlink
343e0     00 4A 05 F6 | 	mov	COUNT_, #0
343e4     A8 00 A0 FD | 	call	#pushregs_
343e8     74 F0 07 F1 | 	add	ptra, #116
343ec     04 4E 05 F1 | 	add	fp, #4
343f0     A7 12 62 FC | 	wrlong	arg01, fp
343f4     68 4E 05 F1 | 	add	fp, #104
343f8     A7 00 68 FC | 	wrlong	#0, fp
343fc     68 4E 85 F1 | 	sub	fp, #104
34400     A7 12 02 F6 | 	mov	arg01, fp
34404     6C 4E 05 F1 | 	add	fp, #108
34408     A7 14 02 F6 | 	mov	arg02, fp
3440c     70 4E 85 F1 | 	sub	fp, #112
34410     02 16 06 F6 | 	mov	arg03, #2
34414     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
34418     08 4E 05 F1 | 	add	fp, #8
3441c     A7 FA 61 FC | 	wrlong	result1, fp
34420     08 4E 85 F1 | 	sub	fp, #8
34424     00 FA 0D F2 | 	cmp	result1, #0 wz
34428     E4 01 90 5D |  if_ne	jmp	#LR__5078
3442c     70 4E 05 F1 | 	add	fp, #112
34430     A7 16 02 FB | 	rdlong	arg03, fp
34434     64 4E 85 F1 | 	sub	fp, #100
34438     A7 16 62 FC | 	wrlong	arg03, fp
3443c     A7 12 02 F6 | 	mov	arg01, fp
34440     08 4E 85 F1 | 	sub	fp, #8
34444     A7 14 02 FB | 	rdlong	arg02, fp
34448     04 4E 85 F1 | 	sub	fp, #4
3444c     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
34450     08 4E 05 F1 | 	add	fp, #8
34454     A7 FA 61 FC | 	wrlong	result1, fp
34458     00 FA 4D F2 | 	cmps	result1, #0 wz
3445c     08 4E 85 F1 | 	sub	fp, #8
34460     AC 01 90 5D |  if_ne	jmp	#LR__5077
34464     37 4E 05 F1 | 	add	fp, #55
34468     A7 FA C1 FA | 	rdbyte	result1, fp
3446c     37 4E 85 F1 | 	sub	fp, #55
34470     80 FA CD F7 | 	test	result1, #128 wz
34474     08 4E 05 51 |  if_ne	add	fp, #8
34478     A7 0C 68 5C |  if_ne	wrlong	#6, fp
3447c     08 4E 85 51 |  if_ne	sub	fp, #8
34480     1C 00 90 5D |  if_ne	jmp	#LR__5070
34484     12 4E 05 F1 | 	add	fp, #18
34488     A7 FA C1 FA | 	rdbyte	result1, fp
3448c     12 4E 85 F1 | 	sub	fp, #18
34490     01 FA CD F7 | 	test	result1, #1 wz
34494     08 4E 05 51 |  if_ne	add	fp, #8
34498     A7 0E 68 5C |  if_ne	wrlong	#7, fp
3449c     08 4E 85 51 |  if_ne	sub	fp, #8
344a0                 | LR__5070
344a0     08 4E 05 F1 | 	add	fp, #8
344a4     A7 FA 09 FB | 	rdlong	result1, fp wz
344a8     08 4E 85 F1 | 	sub	fp, #8
344ac     C8 00 90 5D |  if_ne	jmp	#LR__5073
344b0     70 4E 05 F1 | 	add	fp, #112
344b4     A7 12 02 FB | 	rdlong	arg01, fp
344b8     48 4E 85 F1 | 	sub	fp, #72
344bc     A7 14 02 FB | 	rdlong	arg02, fp
344c0     28 4E 85 F1 | 	sub	fp, #40
344c4     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
344c8     6C 4E 05 F1 | 	add	fp, #108
344cc     A7 FA 61 FC | 	wrlong	result1, fp
344d0     5A 4E 85 F1 | 	sub	fp, #90
344d4     A7 FA C1 FA | 	rdbyte	result1, fp
344d8     12 4E 85 F1 | 	sub	fp, #18
344dc     10 FA CD F7 | 	test	result1, #16 wz
344e0     94 00 90 AD |  if_e	jmp	#LR__5072
344e4     70 4E 05 F1 | 	add	fp, #112
344e8     A7 FA 01 FB | 	rdlong	result1, fp
344ec     34 4E 85 F1 | 	sub	fp, #52
344f0     A7 FA 61 FC | 	wrlong	result1, fp
344f4     30 4E 05 F1 | 	add	fp, #48
344f8     A7 16 02 FB | 	rdlong	arg03, fp
344fc     28 4E 85 F1 | 	sub	fp, #40
34500     A7 16 62 FC | 	wrlong	arg03, fp
34504     08 4E 85 F1 | 	sub	fp, #8
34508     A7 12 02 F6 | 	mov	arg01, fp
3450c     3C 4E 85 F1 | 	sub	fp, #60
34510     00 14 06 F6 | 	mov	arg02, #0
34514     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
34518     08 4E 05 F1 | 	add	fp, #8
3451c     A7 FA 61 FC | 	wrlong	result1, fp
34520     08 4E 85 F1 | 	sub	fp, #8
34524     00 FA 0D F2 | 	cmp	result1, #0 wz
34528     4C 00 90 5D |  if_ne	jmp	#LR__5071
3452c     3C 4E 05 F1 | 	add	fp, #60
34530     A7 12 02 F6 | 	mov	arg01, fp
34534     3C 4E 85 F1 | 	sub	fp, #60
34538     00 14 06 F6 | 	mov	arg02, #0
3453c     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
34540     08 4E 05 F1 | 	add	fp, #8
34544     A7 FA 61 FC | 	wrlong	result1, fp
34548     00 FA 4D F2 | 	cmps	result1, #0 wz
3454c     08 4E 85 F1 | 	sub	fp, #8
34550     08 4E 05 A1 |  if_e	add	fp, #8
34554     A7 0E 68 AC |  if_e	wrlong	#7, fp
34558     08 4E 85 A1 |  if_e	sub	fp, #8
3455c     08 4E 05 F1 | 	add	fp, #8
34560     A7 FA 01 FB | 	rdlong	result1, fp
34564     08 4E 85 F1 | 	sub	fp, #8
34568     04 FA 0D F2 | 	cmp	result1, #4 wz
3456c     08 4E 05 A1 |  if_e	add	fp, #8
34570     A7 00 68 AC |  if_e	wrlong	#0, fp
34574     08 4E 85 A1 |  if_e	sub	fp, #8
34578                 | LR__5071
34578                 | LR__5072
34578                 | LR__5073
34578     08 4E 05 F1 | 	add	fp, #8
3457c     A7 FA 09 FB | 	rdlong	result1, fp wz
34580     08 4E 85 F1 | 	sub	fp, #8
34584     88 00 90 5D |  if_ne	jmp	#LR__5076
34588     0C 4E 05 F1 | 	add	fp, #12
3458c     A7 12 02 F6 | 	mov	arg01, fp
34590     0C 4E 85 F1 | 	sub	fp, #12
34594     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
34598     08 4E 05 F1 | 	add	fp, #8
3459c     A7 FA 61 FC | 	wrlong	result1, fp
345a0     08 4E 85 F1 | 	sub	fp, #8
345a4     00 FA 0D F2 | 	cmp	result1, #0 wz
345a8     38 00 90 5D |  if_ne	jmp	#LR__5074
345ac     6C 4E 05 F1 | 	add	fp, #108
345b0     A7 FA 09 FB | 	rdlong	result1, fp wz
345b4     6C 4E 85 F1 | 	sub	fp, #108
345b8     28 00 90 AD |  if_e	jmp	#LR__5074
345bc     0C 4E 05 F1 | 	add	fp, #12
345c0     A7 12 02 F6 | 	mov	arg01, fp
345c4     60 4E 05 F1 | 	add	fp, #96
345c8     A7 14 02 FB | 	rdlong	arg02, fp
345cc     6C 4E 85 F1 | 	sub	fp, #108
345d0     00 16 06 F6 | 	mov	arg03, #0
345d4     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
345d8     08 4E 05 F1 | 	add	fp, #8
345dc     A7 FA 61 FC | 	wrlong	result1, fp
345e0     08 4E 85 F1 | 	sub	fp, #8
345e4                 | LR__5074
345e4     08 4E 05 F1 | 	add	fp, #8
345e8     A7 FA 09 FB | 	rdlong	result1, fp wz
345ec     08 4E 85 F1 | 	sub	fp, #8
345f0     1C 00 90 5D |  if_ne	jmp	#LR__5075
345f4     70 4E 05 F1 | 	add	fp, #112
345f8     A7 12 02 FB | 	rdlong	arg01, fp
345fc     70 4E 85 F1 | 	sub	fp, #112
34600     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
34604     08 4E 05 F1 | 	add	fp, #8
34608     A7 FA 61 FC | 	wrlong	result1, fp
3460c     08 4E 85 F1 | 	sub	fp, #8
34610                 | LR__5075
34610                 | LR__5076
34610                 | LR__5077
34610                 | LR__5078
34610                 | ' 			}
34610                 | ' 		}
34610                 | ' 		;
34610                 | ' 	}
34610                 | ' 
34610                 | ' 	return res ;
34610     08 4E 05 F1 | 	add	fp, #8
34614     A7 FA 01 FB | 	rdlong	result1, fp
34618     08 4E 85 F1 | 	sub	fp, #8
3461c     A7 F0 03 F6 | 	mov	ptra, fp
34620     B2 00 A0 FD | 	call	#popregs_
34624                 | _fatfs_cc_f_unlink_ret
34624     2D 00 64 FD | 	ret
34628                 | 
34628                 | _fatfs_cc_f_mkdir
34628     00 4A 05 F6 | 	mov	COUNT_, #0
3462c     A8 00 A0 FD | 	call	#pushregs_
34630     5C F0 07 F1 | 	add	ptra, #92
34634     04 4E 05 F1 | 	add	fp, #4
34638     A7 12 62 FC | 	wrlong	arg01, fp
3463c     A7 12 02 F6 | 	mov	arg01, fp
34640     48 4E 05 F1 | 	add	fp, #72
34644     A7 14 02 F6 | 	mov	arg02, fp
34648     4C 4E 85 F1 | 	sub	fp, #76
3464c     02 16 06 F6 | 	mov	arg03, #2
34650     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
34654     08 4E 05 F1 | 	add	fp, #8
34658     A7 FA 61 FC | 	wrlong	result1, fp
3465c     08 4E 85 F1 | 	sub	fp, #8
34660     00 FA 0D F2 | 	cmp	result1, #0 wz
34664     C4 02 90 5D |  if_ne	jmp	#LR__5085
34668     4C 4E 05 F1 | 	add	fp, #76
3466c     A7 16 02 FB | 	rdlong	arg03, fp
34670     40 4E 85 F1 | 	sub	fp, #64
34674     A7 16 62 FC | 	wrlong	arg03, fp
34678     A7 12 02 F6 | 	mov	arg01, fp
3467c     08 4E 85 F1 | 	sub	fp, #8
34680     A7 14 02 FB | 	rdlong	arg02, fp
34684     04 4E 85 F1 | 	sub	fp, #4
34688     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
3468c     08 4E 05 F1 | 	add	fp, #8
34690     A7 FA 61 FC | 	wrlong	result1, fp
34694     00 FA 4D F2 | 	cmps	result1, #0 wz
34698     08 4E 85 F1 | 	sub	fp, #8
3469c     08 4E 05 A1 |  if_e	add	fp, #8
346a0     A7 10 68 AC |  if_e	wrlong	#8, fp
346a4     08 4E 85 A1 |  if_e	sub	fp, #8
346a8     08 4E 05 F1 | 	add	fp, #8
346ac     A7 FA 01 FB | 	rdlong	result1, fp
346b0     08 4E 85 F1 | 	sub	fp, #8
346b4     04 FA 0D F2 | 	cmp	result1, #4 wz
346b8     70 02 90 5D |  if_ne	jmp	#LR__5084
346bc     4C 4E 05 F1 | 	add	fp, #76
346c0     A7 16 02 FB | 	rdlong	arg03, fp
346c4     10 4E 85 F1 | 	sub	fp, #16
346c8     A7 16 62 FC | 	wrlong	arg03, fp
346cc     A7 12 02 F6 | 	mov	arg01, fp
346d0     3C 4E 85 F1 | 	sub	fp, #60
346d4     00 14 06 F6 | 	mov	arg02, #0
346d8     04 AC BF FD | 	call	#_fatfs_cc_create_chain
346dc     50 4E 05 F1 | 	add	fp, #80
346e0     A7 FA 61 FC | 	wrlong	result1, fp
346e4     48 4E 85 F1 | 	sub	fp, #72
346e8     A7 00 68 FC | 	wrlong	#0, fp
346ec     48 4E 05 F1 | 	add	fp, #72
346f0     A7 FA 09 FB | 	rdlong	result1, fp wz
346f4     50 4E 85 F1 | 	sub	fp, #80
346f8     08 4E 05 A1 |  if_e	add	fp, #8
346fc     A7 0E 68 AC |  if_e	wrlong	#7, fp
34700     08 4E 85 A1 |  if_e	sub	fp, #8
34704     50 4E 05 F1 | 	add	fp, #80
34708     A7 FA 01 FB | 	rdlong	result1, fp
3470c     50 4E 85 F1 | 	sub	fp, #80
34710     01 FA 0D F2 | 	cmp	result1, #1 wz
34714     08 4E 05 A1 |  if_e	add	fp, #8
34718     A7 04 68 AC |  if_e	wrlong	#2, fp
3471c     08 4E 85 A1 |  if_e	sub	fp, #8
34720     50 4E 05 F1 | 	add	fp, #80
34724     A7 16 02 FB | 	rdlong	arg03, fp
34728     50 4E 85 F1 | 	sub	fp, #80
3472c     FF FF 7F FF 
34730     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
34734     08 4E 05 A1 |  if_e	add	fp, #8
34738     A7 02 68 AC |  if_e	wrlong	#1, fp
3473c     08 4E 85 A1 |  if_e	sub	fp, #8
34740     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
34744     58 4E 05 F1 | 	add	fp, #88
34748     A7 FA 61 FC | 	wrlong	result1, fp
3474c     50 4E 85 F1 | 	sub	fp, #80
34750     A7 FA 09 FB | 	rdlong	result1, fp wz
34754     08 4E 85 F1 | 	sub	fp, #8
34758     1C 01 90 5D |  if_ne	jmp	#LR__5081
3475c     4C 4E 05 F1 | 	add	fp, #76
34760     A7 12 02 FB | 	rdlong	arg01, fp
34764     04 4E 05 F1 | 	add	fp, #4
34768     A7 14 02 FB | 	rdlong	arg02, fp
3476c     50 4E 85 F1 | 	sub	fp, #80
34770     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
34774     08 4E 05 F1 | 	add	fp, #8
34778     A7 FA 61 FC | 	wrlong	result1, fp
3477c     00 FA 4D F2 | 	cmps	result1, #0 wz
34780     08 4E 85 F1 | 	sub	fp, #8
34784     F0 00 90 5D |  if_ne	jmp	#LR__5080
34788     4C 4E 05 F1 | 	add	fp, #76
3478c     A7 12 02 FB | 	rdlong	arg01, fp
34790     4C 4E 85 F1 | 	sub	fp, #76
34794     34 12 06 F1 | 	add	arg01, #52
34798     20 14 06 F6 | 	mov	arg02, #32
3479c     0B 16 06 F6 | 	mov	arg03, #11
347a0     98 00 A0 FD | 	call	#\builtin_bytefill_
347a4     4C 4E 05 F1 | 	add	fp, #76
347a8     A7 FA 01 FB | 	rdlong	result1, fp
347ac     34 FA 05 F1 | 	add	result1, #52
347b0     FD 5C 48 FC | 	wrbyte	#46, result1
347b4     A7 16 02 FB | 	rdlong	arg03, fp
347b8     3F 16 06 F1 | 	add	arg03, #63
347bc     0B 21 48 FC | 	wrbyte	#16, arg03
347c0     A7 12 02 FB | 	rdlong	arg01, fp
347c4     4A 12 06 F1 | 	add	arg01, #74
347c8     0C 4E 05 F1 | 	add	fp, #12
347cc     A7 14 02 FB | 	rdlong	arg02, fp
347d0     09 15 62 FC | 	wrlong	arg02, arg01
347d4     0C 4E 85 F1 | 	sub	fp, #12
347d8     A7 14 02 FB | 	rdlong	arg02, fp
347dc     0A 13 02 F6 | 	mov	arg01, arg02
347e0     34 14 06 F1 | 	add	arg02, #52
347e4     04 4E 05 F1 | 	add	fp, #4
347e8     A7 16 02 FB | 	rdlong	arg03, fp
347ec     50 4E 85 F1 | 	sub	fp, #80
347f0     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
347f4     4C 4E 05 F1 | 	add	fp, #76
347f8     A7 14 02 FB | 	rdlong	arg02, fp
347fc     0A 13 02 F6 | 	mov	arg01, arg02
34800     54 12 06 F1 | 	add	arg01, #84
34804     4C 4E 85 F1 | 	sub	fp, #76
34808     34 14 06 F1 | 	add	arg02, #52
3480c     20 16 06 F6 | 	mov	arg03, #32
34810     08 27 BF FD | 	call	#__system____builtin_memmove
34814     4C 4E 05 F1 | 	add	fp, #76
34818     A7 16 02 FB | 	rdlong	arg03, fp
3481c     55 16 06 F1 | 	add	arg03, #85
34820     0B 5D 48 FC | 	wrbyte	#46, arg03
34824     38 4E 85 F1 | 	sub	fp, #56
34828     A7 16 02 FB | 	rdlong	arg03, fp
3482c     40 4E 05 F1 | 	add	fp, #64
34830     A7 16 62 FC | 	wrlong	arg03, fp
34834     08 4E 85 F1 | 	sub	fp, #8
34838     A7 14 02 FB | 	rdlong	arg02, fp
3483c     0A 13 02 F6 | 	mov	arg01, arg02
34840     54 14 06 F1 | 	add	arg02, #84
34844     4C 4E 85 F1 | 	sub	fp, #76
34848     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
3484c     4C 4E 05 F1 | 	add	fp, #76
34850     A7 16 02 FB | 	rdlong	arg03, fp
34854     03 16 06 F1 | 	add	arg03, #3
34858     0B 03 48 FC | 	wrbyte	#1, arg03
3485c     40 4E 85 F1 | 	sub	fp, #64
34860     A7 12 02 F6 | 	mov	arg01, fp
34864     0C 4E 85 F1 | 	sub	fp, #12
34868     44 BA BF FD | 	call	#_fatfs_cc_dir_register
3486c     08 4E 05 F1 | 	add	fp, #8
34870     A7 FA 61 FC | 	wrlong	result1, fp
34874     08 4E 85 F1 | 	sub	fp, #8
34878                 | LR__5080
34878                 | LR__5081
34878     08 4E 05 F1 | 	add	fp, #8
3487c     A7 FA 09 FB | 	rdlong	result1, fp wz
34880     08 4E 85 F1 | 	sub	fp, #8
34884     88 00 90 5D |  if_ne	jmp	#LR__5082
34888     28 4E 05 F1 | 	add	fp, #40
3488c     A7 12 02 FB | 	rdlong	arg01, fp
34890     16 12 06 F1 | 	add	arg01, #22
34894     30 4E 05 F1 | 	add	fp, #48
34898     A7 14 02 FB | 	rdlong	arg02, fp
3489c     09 15 62 FC | 	wrlong	arg02, arg01
348a0     0C 4E 85 F1 | 	sub	fp, #12
348a4     A7 12 02 FB | 	rdlong	arg01, fp
348a8     24 4E 85 F1 | 	sub	fp, #36
348ac     A7 14 02 FB | 	rdlong	arg02, fp
348b0     28 4E 05 F1 | 	add	fp, #40
348b4     A7 16 02 FB | 	rdlong	arg03, fp
348b8     50 4E 85 F1 | 	sub	fp, #80
348bc     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
348c0     28 4E 05 F1 | 	add	fp, #40
348c4     A7 FA 01 FB | 	rdlong	result1, fp
348c8     0B FA 05 F1 | 	add	result1, #11
348cc     FD 20 48 FC | 	wrbyte	#16, result1
348d0     24 4E 05 F1 | 	add	fp, #36
348d4     A7 FA 01 FB | 	rdlong	result1, fp
348d8     03 FA 05 F1 | 	add	result1, #3
348dc     FD 02 48 FC | 	wrbyte	#1, result1
348e0     44 4E 85 F1 | 	sub	fp, #68
348e4     A7 FA 09 FB | 	rdlong	result1, fp wz
348e8     08 4E 85 F1 | 	sub	fp, #8
348ec     3C 00 90 5D |  if_ne	jmp	#LR__5083
348f0     4C 4E 05 F1 | 	add	fp, #76
348f4     A7 12 02 FB | 	rdlong	arg01, fp
348f8     4C 4E 85 F1 | 	sub	fp, #76
348fc     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
34900     08 4E 05 F1 | 	add	fp, #8
34904     A7 FA 61 FC | 	wrlong	result1, fp
34908     08 4E 85 F1 | 	sub	fp, #8
3490c     1C 00 90 FD | 	jmp	#LR__5083
34910                 | LR__5082
34910     3C 4E 05 F1 | 	add	fp, #60
34914     A7 12 02 F6 | 	mov	arg01, fp
34918     14 4E 05 F1 | 	add	fp, #20
3491c     A7 14 02 FB | 	rdlong	arg02, fp
34920     50 4E 85 F1 | 	sub	fp, #80
34924     00 16 06 F6 | 	mov	arg03, #0
34928     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
3492c                 | LR__5083
3492c                 | LR__5084
3492c                 | LR__5085
3492c                 | ' 				remove_chain(&sobj, dcl, 0);
3492c                 | ' 			}
3492c                 | ' 		}
3492c                 | ' 		;
3492c                 | ' 	}
3492c                 | ' 
3492c                 | ' 	return res ;
3492c     08 4E 05 F1 | 	add	fp, #8
34930     A7 FA 01 FB | 	rdlong	result1, fp
34934     08 4E 85 F1 | 	sub	fp, #8
34938     A7 F0 03 F6 | 	mov	ptra, fp
3493c     B2 00 A0 FD | 	call	#popregs_
34940                 | _fatfs_cc_f_mkdir_ret
34940     2D 00 64 FD | 	ret
34944                 | 
34944                 | _fatfs_cc_f_rename
34944     01 4A 05 F6 | 	mov	COUNT_, #1
34948     A8 00 A0 FD | 	call	#pushregs_
3494c     9C F0 07 F1 | 	add	ptra, #156
34950     04 4E 05 F1 | 	add	fp, #4
34954     A7 12 62 FC | 	wrlong	arg01, fp
34958     04 4E 05 F1 | 	add	fp, #4
3495c     A7 14 62 FC | 	wrlong	arg02, fp
34960     A7 12 02 F6 | 	mov	arg01, fp
34964     08 4E 85 F1 | 	sub	fp, #8
34968     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
3496c     04 4E 05 F1 | 	add	fp, #4
34970     A7 12 02 F6 | 	mov	arg01, fp
34974     6C 4E 05 F1 | 	add	fp, #108
34978     A7 14 02 F6 | 	mov	arg02, fp
3497c     70 4E 85 F1 | 	sub	fp, #112
34980     02 16 06 F6 | 	mov	arg03, #2
34984     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
34988     0C 4E 05 F1 | 	add	fp, #12
3498c     A7 FA 61 FC | 	wrlong	result1, fp
34990     0C 4E 85 F1 | 	sub	fp, #12
34994     00 FA 0D F2 | 	cmp	result1, #0 wz
34998     44 03 90 5D |  if_ne	jmp	#LR__5103
3499c     70 4E 05 F1 | 	add	fp, #112
349a0     A7 16 02 FB | 	rdlong	arg03, fp
349a4     60 4E 85 F1 | 	sub	fp, #96
349a8     A7 16 62 FC | 	wrlong	arg03, fp
349ac     A7 12 02 F6 | 	mov	arg01, fp
349b0     0C 4E 85 F1 | 	sub	fp, #12
349b4     A7 14 02 FB | 	rdlong	arg02, fp
349b8     04 4E 85 F1 | 	sub	fp, #4
349bc     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
349c0     0C 4E 05 F1 | 	add	fp, #12
349c4     A7 FA 61 FC | 	wrlong	result1, fp
349c8     00 FA 4D F2 | 	cmps	result1, #0 wz
349cc     0C 4E 85 F1 | 	sub	fp, #12
349d0     1C 00 90 5D |  if_ne	jmp	#LR__5090
349d4     3B 4E 05 F1 | 	add	fp, #59
349d8     A7 FA C1 FA | 	rdbyte	result1, fp
349dc     3B 4E 85 F1 | 	sub	fp, #59
349e0     A0 FA CD F7 | 	test	result1, #160 wz
349e4     0C 4E 05 51 |  if_ne	add	fp, #12
349e8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
349ec     0C 4E 85 51 |  if_ne	sub	fp, #12
349f0                 | LR__5090
349f0     0C 4E 05 F1 | 	add	fp, #12
349f4     A7 26 0A FB | 	rdlong	local01, fp wz
349f8     0C 4E 85 F1 | 	sub	fp, #12
349fc     E0 02 90 5D |  if_ne	jmp	#LR__5102
34a00     74 4E 05 F1 | 	add	fp, #116
34a04     A7 12 02 F6 | 	mov	arg01, fp
34a08     48 4E 85 F1 | 	sub	fp, #72
34a0c     A7 14 02 FB | 	rdlong	arg02, fp
34a10     2C 4E 85 F1 | 	sub	fp, #44
34a14     20 16 06 F6 | 	mov	arg03, #32
34a18     00 25 BF FD | 	call	#__system____builtin_memmove
34a1c     40 4E 05 F1 | 	add	fp, #64
34a20     A7 12 02 F6 | 	mov	arg01, fp
34a24     30 4E 85 F1 | 	sub	fp, #48
34a28     A7 14 02 F6 | 	mov	arg02, fp
34a2c     10 4E 85 F1 | 	sub	fp, #16
34a30     30 16 06 F6 | 	mov	arg03, #48
34a34     E4 24 BF FD | 	call	#__system____builtin_memmove
34a38     40 4E 05 F1 | 	add	fp, #64
34a3c     A7 12 02 F6 | 	mov	arg01, fp
34a40     38 4E 85 F1 | 	sub	fp, #56
34a44     A7 14 02 FB | 	rdlong	arg02, fp
34a48     08 4E 85 F1 | 	sub	fp, #8
34a4c     34 CA BF FD | 	call	#_fatfs_cc_follow_path
34a50     0C 4E 05 F1 | 	add	fp, #12
34a54     A7 FA 61 FC | 	wrlong	result1, fp
34a58     0C 4E 85 F1 | 	sub	fp, #12
34a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
34a60     4C 00 90 5D |  if_ne	jmp	#LR__5093
34a64     48 4E 05 F1 | 	add	fp, #72
34a68     A7 FA 01 FB | 	rdlong	result1, fp
34a6c     30 4E 85 F1 | 	sub	fp, #48
34a70     A7 16 02 FB | 	rdlong	arg03, fp
34a74     18 4E 85 F1 | 	sub	fp, #24
34a78     0B FB 09 F2 | 	cmp	result1, arg03 wz
34a7c     20 00 90 5D |  if_ne	jmp	#LR__5091
34a80     50 4E 05 F1 | 	add	fp, #80
34a84     A7 FA 01 FB | 	rdlong	result1, fp
34a88     30 4E 85 F1 | 	sub	fp, #48
34a8c     A7 16 02 FB | 	rdlong	arg03, fp
34a90     20 4E 85 F1 | 	sub	fp, #32
34a94     0B FB 09 F2 | 	cmp	result1, arg03 wz
34a98     04 26 06 A6 |  if_e	mov	local01, #4
34a9c     04 00 90 AD |  if_e	jmp	#LR__5092
34aa0                 | LR__5091
34aa0     08 26 06 F6 | 	mov	local01, #8
34aa4                 | LR__5092
34aa4     0C 4E 05 F1 | 	add	fp, #12
34aa8     A7 26 62 FC | 	wrlong	local01, fp
34aac     0C 4E 85 F1 | 	sub	fp, #12
34ab0                 | LR__5093
34ab0     0C 4E 05 F1 | 	add	fp, #12
34ab4     A7 26 02 FB | 	rdlong	local01, fp
34ab8     0C 4E 85 F1 | 	sub	fp, #12
34abc     04 26 0E F2 | 	cmp	local01, #4 wz
34ac0     CC 01 90 5D |  if_ne	jmp	#LR__5099
34ac4     40 4E 05 F1 | 	add	fp, #64
34ac8     A7 12 02 F6 | 	mov	arg01, fp
34acc     40 4E 85 F1 | 	sub	fp, #64
34ad0     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
34ad4     0C 4E 05 F1 | 	add	fp, #12
34ad8     A7 FA 61 FC | 	wrlong	result1, fp
34adc     0C 4E 85 F1 | 	sub	fp, #12
34ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
34ae4     A8 01 90 5D |  if_ne	jmp	#LR__5098
34ae8     5C 4E 05 F1 | 	add	fp, #92
34aec     A7 12 02 FB | 	rdlong	arg01, fp
34af0     38 4E 05 F1 | 	add	fp, #56
34af4     A7 12 62 FC | 	wrlong	arg01, fp
34af8     0D 12 06 F1 | 	add	arg01, #13
34afc     20 4E 85 F1 | 	sub	fp, #32
34b00     A7 14 02 F6 | 	mov	arg02, fp
34b04     74 4E 85 F1 | 	sub	fp, #116
34b08     0D 14 06 F1 | 	add	arg02, #13
34b0c     13 16 06 F6 | 	mov	arg03, #19
34b10     08 24 BF FD | 	call	#__system____builtin_memmove
34b14     94 4E 05 F1 | 	add	fp, #148
34b18     A7 26 02 FB | 	rdlong	local01, fp
34b1c     15 4E 85 F1 | 	sub	fp, #21
34b20     A7 FA C1 FA | 	rdbyte	result1, fp
34b24     0B 26 06 F1 | 	add	local01, #11
34b28     13 FB 41 FC | 	wrbyte	result1, local01
34b2c     15 4E 05 F1 | 	add	fp, #21
34b30     A7 26 02 FB | 	rdlong	local01, fp
34b34     94 4E 85 F1 | 	sub	fp, #148
34b38     0B 26 06 F1 | 	add	local01, #11
34b3c     13 27 C2 FA | 	rdbyte	local01, local01
34b40     10 26 CE F7 | 	test	local01, #16 wz
34b44     24 00 90 5D |  if_ne	jmp	#LR__5094
34b48     94 4E 05 F1 | 	add	fp, #148
34b4c     A7 FA 01 FB | 	rdlong	result1, fp
34b50     FD 26 02 F6 | 	mov	local01, result1
34b54     94 4E 85 F1 | 	sub	fp, #148
34b58     0B FA 05 F1 | 	add	result1, #11
34b5c     FD FA C1 FA | 	rdbyte	result1, result1
34b60     20 FA 45 F5 | 	or	result1, #32
34b64     0B 26 06 F1 | 	add	local01, #11
34b68     13 FB 41 FC | 	wrbyte	result1, local01
34b6c                 | LR__5094
34b6c     70 4E 05 F1 | 	add	fp, #112
34b70     A7 26 02 FB | 	rdlong	local01, fp
34b74     03 26 06 F1 | 	add	local01, #3
34b78     13 03 48 FC | 	wrbyte	#1, local01
34b7c     24 4E 05 F1 | 	add	fp, #36
34b80     A7 26 02 FB | 	rdlong	local01, fp
34b84     94 4E 85 F1 | 	sub	fp, #148
34b88     0B 26 06 F1 | 	add	local01, #11
34b8c     13 27 C2 FA | 	rdbyte	local01, local01
34b90     10 26 CE F7 | 	test	local01, #16 wz
34b94     F8 00 90 AD |  if_e	jmp	#LR__5097
34b98     18 4E 05 F1 | 	add	fp, #24
34b9c     A7 16 02 FB | 	rdlong	arg03, fp
34ba0     30 4E 05 F1 | 	add	fp, #48
34ba4     A7 26 02 FB | 	rdlong	local01, fp
34ba8     48 4E 85 F1 | 	sub	fp, #72
34bac     13 17 0A F2 | 	cmp	arg03, local01 wz
34bb0     DC 00 90 AD |  if_e	jmp	#LR__5097
34bb4     70 4E 05 F1 | 	add	fp, #112
34bb8     A7 12 02 FB | 	rdlong	arg01, fp
34bbc     09 27 02 F6 | 	mov	local01, arg01
34bc0     24 4E 05 F1 | 	add	fp, #36
34bc4     A7 14 02 FB | 	rdlong	arg02, fp
34bc8     94 4E 85 F1 | 	sub	fp, #148
34bcc     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
34bd0     FD 14 02 F6 | 	mov	arg02, result1
34bd4     13 13 02 F6 | 	mov	arg01, local01
34bd8     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
34bdc     98 4E 05 F1 | 	add	fp, #152
34be0     A7 FA 61 FC | 	wrlong	result1, fp
34be4     00 FA 4D F2 | 	cmps	result1, #0 wz
34be8     98 4E 85 F1 | 	sub	fp, #152
34bec     0C 4E 05 A1 |  if_e	add	fp, #12
34bf0     A7 04 68 AC |  if_e	wrlong	#2, fp
34bf4     0C 4E 85 A1 |  if_e	sub	fp, #12
34bf8     94 00 90 AD |  if_e	jmp	#LR__5096
34bfc     70 4E 05 F1 | 	add	fp, #112
34c00     A7 12 02 FB | 	rdlong	arg01, fp
34c04     28 4E 05 F1 | 	add	fp, #40
34c08     A7 14 02 FB | 	rdlong	arg02, fp
34c0c     98 4E 85 F1 | 	sub	fp, #152
34c10     4C A0 BF FD | 	call	#_fatfs_cc_move_window
34c14     0C 4E 05 F1 | 	add	fp, #12
34c18     A7 FA 61 FC | 	wrlong	result1, fp
34c1c     64 4E 05 F1 | 	add	fp, #100
34c20     A7 26 02 FB | 	rdlong	local01, fp
34c24     54 26 06 F1 | 	add	local01, #84
34c28     24 4E 05 F1 | 	add	fp, #36
34c2c     A7 26 62 FC | 	wrlong	local01, fp
34c30     88 4E 85 F1 | 	sub	fp, #136
34c34     A7 26 0A FB | 	rdlong	local01, fp wz
34c38     0C 4E 85 F1 | 	sub	fp, #12
34c3c     50 00 90 5D |  if_ne	jmp	#LR__5095
34c40     94 4E 05 F1 | 	add	fp, #148
34c44     A7 26 02 FB | 	rdlong	local01, fp
34c48     94 4E 85 F1 | 	sub	fp, #148
34c4c     01 26 06 F1 | 	add	local01, #1
34c50     13 27 C2 FA | 	rdbyte	local01, local01
34c54     2E 26 0E F2 | 	cmp	local01, #46 wz
34c58     34 00 90 5D |  if_ne	jmp	#LR__5095
34c5c     70 4E 05 F1 | 	add	fp, #112
34c60     A7 12 02 FB | 	rdlong	arg01, fp
34c64     24 4E 05 F1 | 	add	fp, #36
34c68     A7 14 02 FB | 	rdlong	arg02, fp
34c6c     4C 4E 85 F1 | 	sub	fp, #76
34c70     A7 16 02 FB | 	rdlong	arg03, fp
34c74     48 4E 85 F1 | 	sub	fp, #72
34c78     50 AD BF FD | 	call	#_fatfs_cc_st_clust
34c7c     70 4E 05 F1 | 	add	fp, #112
34c80     A7 26 02 FB | 	rdlong	local01, fp
34c84     70 4E 85 F1 | 	sub	fp, #112
34c88     03 26 06 F1 | 	add	local01, #3
34c8c     13 03 48 FC | 	wrbyte	#1, local01
34c90                 | LR__5095
34c90                 | LR__5096
34c90                 | LR__5097
34c90                 | LR__5098
34c90                 | LR__5099
34c90     0C 4E 05 F1 | 	add	fp, #12
34c94     A7 26 0A FB | 	rdlong	local01, fp wz
34c98     0C 4E 85 F1 | 	sub	fp, #12
34c9c     40 00 90 5D |  if_ne	jmp	#LR__5101
34ca0     10 4E 05 F1 | 	add	fp, #16
34ca4     A7 12 02 F6 | 	mov	arg01, fp
34ca8     10 4E 85 F1 | 	sub	fp, #16
34cac     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
34cb0     0C 4E 05 F1 | 	add	fp, #12
34cb4     A7 FA 61 FC | 	wrlong	result1, fp
34cb8     0C 4E 85 F1 | 	sub	fp, #12
34cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
34cc0     1C 00 90 5D |  if_ne	jmp	#LR__5100
34cc4     70 4E 05 F1 | 	add	fp, #112
34cc8     A7 12 02 FB | 	rdlong	arg01, fp
34ccc     70 4E 85 F1 | 	sub	fp, #112
34cd0     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
34cd4     0C 4E 05 F1 | 	add	fp, #12
34cd8     A7 FA 61 FC | 	wrlong	result1, fp
34cdc     0C 4E 85 F1 | 	sub	fp, #12
34ce0                 | LR__5100
34ce0                 | LR__5101
34ce0                 | LR__5102
34ce0                 | LR__5103
34ce0                 | ' 					res = sync_fs(fs);
34ce0                 | ' 				}
34ce0                 | ' 			}
34ce0                 | ' 
34ce0                 | ' 		}
34ce0                 | ' 		;
34ce0                 | ' 	}
34ce0                 | ' 
34ce0                 | ' 	return res ;
34ce0     0C 4E 05 F1 | 	add	fp, #12
34ce4     A7 FA 01 FB | 	rdlong	result1, fp
34ce8     0C 4E 85 F1 | 	sub	fp, #12
34cec     A7 F0 03 F6 | 	mov	ptra, fp
34cf0     B2 00 A0 FD | 	call	#popregs_
34cf4                 | _fatfs_cc_f_rename_ret
34cf4     2D 00 64 FD | 	ret
34cf8                 | 
34cf8                 | _fatfs_cc_time
34cf8     00 4A 05 F6 | 	mov	COUNT_, #0
34cfc     A8 00 A0 FD | 	call	#pushregs_
34d00     14 F0 07 F1 | 	add	ptra, #20
34d04     04 4E 05 F1 | 	add	fp, #4
34d08     A7 12 62 FC | 	wrlong	arg01, fp
34d0c     04 4E 05 F1 | 	add	fp, #4
34d10     A7 12 02 F6 | 	mov	arg01, fp
34d14     08 4E 85 F1 | 	sub	fp, #8
34d18     00 14 06 F6 | 	mov	arg02, #0
34d1c     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
34d20     08 4E 05 F1 | 	add	fp, #8
34d24     A7 FA 01 FB | 	rdlong	result1, fp
34d28     08 4E 05 F1 | 	add	fp, #8
34d2c     A7 FA 61 FC | 	wrlong	result1, fp
34d30     0C 4E 85 F1 | 	sub	fp, #12
34d34     A7 FA 09 FB | 	rdlong	result1, fp wz
34d38     04 4E 85 F1 | 	sub	fp, #4
34d3c     18 00 90 AD |  if_e	jmp	#LR__5110
34d40     04 4E 05 F1 | 	add	fp, #4
34d44     A7 FA 01 FB | 	rdlong	result1, fp
34d48     0C 4E 05 F1 | 	add	fp, #12
34d4c     A7 14 02 FB | 	rdlong	arg02, fp
34d50     10 4E 85 F1 | 	sub	fp, #16
34d54     FD 14 62 FC | 	wrlong	arg02, result1
34d58                 | LR__5110
34d58                 | '         *tp = now;
34d58                 | '     return now;
34d58     10 4E 05 F1 | 	add	fp, #16
34d5c     A7 FA 01 FB | 	rdlong	result1, fp
34d60     10 4E 85 F1 | 	sub	fp, #16
34d64     A7 F0 03 F6 | 	mov	ptra, fp
34d68     B2 00 A0 FD | 	call	#popregs_
34d6c                 | _fatfs_cc_time_ret
34d6c     2D 00 64 FD | 	ret
34d70                 | 
34d70                 | _fatfs_cc_mktime
34d70     06 4A 05 F6 | 	mov	COUNT_, #6
34d74     A8 00 A0 FD | 	call	#pushregs_
34d78     09 27 02 F6 | 	mov	local01, arg01
34d7c     14 26 06 F1 | 	add	local01, #20
34d80     13 13 02 FB | 	rdlong	arg01, local01
34d84     14 26 86 F1 | 	sub	local01, #20
34d88     46 12 56 F2 | 	cmps	arg01, #70 wc
34d8c                 | '                 return (time_t) -1;
34d8c     01 FA 65 C6 |  if_b	neg	result1, #1
34d90     7C 01 90 CD |  if_b	jmp	#LR__5124
34d94     03 00 00 FF 
34d98     6C 29 06 F6 | 	mov	local02, ##1900
34d9c     14 26 06 F1 | 	add	local01, #20
34da0     13 FB 01 FB | 	rdlong	result1, local01
34da4     FD 28 02 F1 | 	add	local02, result1
34da8     08 26 86 F1 | 	sub	local01, #8
34dac     13 2B 02 FB | 	rdlong	local03, local01
34db0     01 2A 86 F1 | 	sub	local03, #1
34db4     04 26 06 F1 | 	add	local01, #4
34db8     13 13 02 FB | 	rdlong	arg01, local01
34dbc     10 26 86 F1 | 	sub	local01, #16
34dc0     02 12 66 F0 | 	shl	arg01, #2
34dc4     02 00 00 FF 
34dc8     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
34dcc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34dd0     09 FB 01 FB | 	rdlong	result1, arg01
34dd4     FD 2A 02 F1 | 	add	local03, result1
34dd8     14 13 02 F6 | 	mov	arg01, local02
34ddc     02 00 00 FF 
34de0     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
34de4     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
34de8     00 FA 0D F2 | 	cmp	result1, #0 wz
34dec     1C 00 90 AD |  if_e	jmp	#LR__5120
34df0     00 2C 06 F6 | 	mov	local04, #0
34df4     10 26 06 F1 | 	add	local01, #16
34df8     13 FB 01 FB | 	rdlong	result1, local01
34dfc     10 26 86 F1 | 	sub	local01, #16
34e00     02 FA 55 F2 | 	cmps	result1, #2 wc
34e04     01 2C 06 36 |  if_ae	mov	local04, #1
34e08     04 00 90 FD | 	jmp	#LR__5121
34e0c                 | LR__5120
34e0c     00 2C 06 F6 | 	mov	local04, #0
34e10                 | LR__5121
34e10     04 26 06 F1 | 	add	local01, #4
34e14     13 FB 01 FB | 	rdlong	result1, local01
34e18     04 26 86 F1 | 	sub	local01, #4
34e1c     13 2F 02 FB | 	rdlong	local05, local01
34e20     08 26 06 F1 | 	add	local01, #8
34e24     13 13 02 FB | 	rdlong	arg01, local01
34e28     07 00 00 FF 
34e2c     10 12 06 FD | 	qmul	arg01, ##3600
34e30     16 2B 02 F1 | 	add	local03, local04
34e34     FD 2C 02 F6 | 	mov	local04, result1
34e38     04 2C 66 F0 | 	shl	local04, #4
34e3c     FD 2C 82 F1 | 	sub	local04, result1
34e40     02 2C 66 F0 | 	shl	local04, #2
34e44     16 2F 02 F1 | 	add	local05, local04
34e48     08 26 86 F1 | 	sub	local01, #8
34e4c     18 2C 62 FD | 	getqx	local04
34e50     A8 00 00 FF 
34e54     80 2B 06 FD | 	qmul	local03, ##86400
34e58     16 2F 02 F1 | 	add	local05, local04
34e5c     14 2B 02 F6 | 	mov	local03, local02
34e60     03 00 00 FF 
34e64     B2 2B 86 F1 | 	sub	local03, ##1970
34e68     18 2C 62 FD | 	getqx	local04
34e6c     99 F0 00 FF 
34e70     80 2B 06 FD | 	qmul	local03, ##31536000
34e74     16 2F 02 F1 | 	add	local05, local04
34e78     14 2B 02 F6 | 	mov	local03, local02
34e7c     03 00 00 FF 
34e80     B1 2B 86 F1 | 	sub	local03, ##1969
34e84     15 31 52 F6 | 	abs	local06, local03 wc
34e88     02 30 46 F0 | 	shr	local06, #2
34e8c     18 31 82 F6 | 	negc	local06, local06
34e90     03 00 00 FF 
34e94     D1 29 56 F2 | 	cmps	local02, ##2001 wc
34e98     18 2C 62 FD | 	getqx	local04
34e9c     16 2F 02 F1 | 	add	local05, local04
34ea0     18 00 90 CD |  if_b	jmp	#LR__5122
34ea4     03 00 00 FF 
34ea8     D0 29 86 F1 | 	sub	local02, ##2000
34eac     14 2D 52 F6 | 	abs	local04, local02 wc
34eb0     64 2C 16 FD | 	qdiv	local04, #100
34eb4     18 2C 62 FD | 	getqx	local04
34eb8     16 31 A2 F3 | 	sumnc	local06, local04
34ebc                 | LR__5122
34ebc     A8 00 00 FF 
34ec0     80 31 06 FD | 	qmul	local06, ##86400
34ec4     18 30 62 FD | 	getqx	local06
34ec8     18 2F 02 F1 | 	add	local05, local06
34ecc     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
34ed0     02 00 00 FF 
34ed4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
34ed8     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
34edc     18 2F 02 F1 | 	add	local05, local06
34ee0     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
34ee4     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34ee8     02 00 00 FF 
34eec     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
34ef0     01 2A 0E F2 | 	cmp	local03, #1 wz
34ef4     14 00 90 5D |  if_ne	jmp	#LR__5123
34ef8     13 13 02 F6 | 	mov	arg01, local01
34efc     D8 19 B0 FD | 	call	#_fatfs_cc___indst
34f00     00 FA 0D F2 | 	cmp	result1, #0 wz
34f04     07 00 00 5F 
34f08     10 2E 86 51 |  if_ne	sub	local05, ##3600
34f0c                 | LR__5123
34f0c                 | '                 s -=  (3600L) ;
34f0c                 | ' 
34f0c                 | '         return s;
34f0c     17 FB 01 F6 | 	mov	result1, local05
34f10                 | LR__5124
34f10     A7 F0 03 F6 | 	mov	ptra, fp
34f14     B2 00 A0 FD | 	call	#popregs_
34f18                 | _fatfs_cc_mktime_ret
34f18     2D 00 64 FD | 	ret
34f1c                 | 
34f1c                 | _fatfs_cc__gmtime_r
34f1c     03 4A 05 F6 | 	mov	COUNT_, #3
34f20     A8 00 A0 FD | 	call	#pushregs_
34f24     09 27 02 FB | 	rdlong	local01, arg01
34f28     A8 00 00 FF 
34f2c     80 27 16 FD | 	qdiv	local01, ##86400
34f30     18 FA 61 FD | 	getqx	result1
34f34     04 FA 05 F1 | 	add	result1, #4
34f38     07 FA 15 FD | 	qdiv	result1, #7
34f3c     18 14 06 F1 | 	add	arg02, #24
34f40     D1 7F 27 FF 
34f44     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
34f48     D1 7F 27 3F 
34f4c     00 26 86 31 |  if_ae	sub	local01, ##1325376000
34f50     03 00 00 3F 
34f54     DC 29 06 36 |  if_ae	mov	local02, ##2012
34f58     03 00 00 CF 
34f5c     B2 29 06 C6 |  if_b	mov	local02, ##1970
34f60                 | ' 	  year = 1970;
34f60                 | ' 	}
34f60                 | ' 
34f60                 | ' 	for(;;) {
34f60     19 FA 61 FD | 	getqy	result1
34f64     0A FB 61 FC | 	wrlong	result1, arg02
34f68     18 14 86 F1 | 	sub	arg02, #24
34f6c                 | LR__5130
34f6c     14 13 02 F6 | 	mov	arg01, local02
34f70     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34f74     00 FA 0D F2 | 	cmp	result1, #0 wz
34f78     42 F1 00 5F 
34f7c     00 2B 06 56 |  if_ne	mov	local03, ##31622400
34f80     99 F0 00 AF 
34f84     80 2B 06 A6 |  if_e	mov	local03, ##31536000
34f88     15 27 12 F2 | 	cmp	local01, local03 wc
34f8c                 | ' 	    break;
34f8c     01 28 06 31 |  if_ae	add	local02, #1
34f90     15 27 82 31 |  if_ae	sub	local01, local03
34f94     D4 FF 9F 3D |  if_ae	jmp	#LR__5130
34f98     A8 00 00 FF 
34f9c     80 27 16 FD | 	qdiv	local01, ##86400
34fa0     14 2B 02 F6 | 	mov	local03, local02
34fa4     03 00 00 FF 
34fa8     6C 2B 86 F1 | 	sub	local03, ##1900
34fac     14 14 06 F1 | 	add	arg02, #20
34fb0     0A 2B 62 FC | 	wrlong	local03, arg02
34fb4     08 14 06 F1 | 	add	arg02, #8
34fb8     14 13 02 F6 | 	mov	arg01, local02
34fbc     18 28 62 FD | 	getqx	local02
34fc0     0A 29 62 FC | 	wrlong	local02, arg02
34fc4     1C 14 86 F1 | 	sub	arg02, #28
34fc8     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
34fd0     1D 2A 06 56 |  if_ne	mov	local03, #29
34fd4     1C 2A 06 A6 |  if_e	mov	local03, #28
34fd8     02 00 00 FF 
34fdc     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
34fe0     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
34fe4     02 00 00 FF 
34fe8     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
34fec                 | ' 
34fec                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
34fec                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
34fec     00 12 06 F6 | 	mov	arg01, #0
34ff0     97 2A 48 FB | 	callpa	#(@LR__5132-@LR__5131)>>2,fcache_load_ptr_
34ff4                 | LR__5131
34ff4     09 2B 02 F6 | 	mov	local03, arg01
34ff8     02 2A 66 F0 | 	shl	local03, #2
34ffc     02 00 00 FF 
35000     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
35004     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
35008     15 2B 02 FB | 	rdlong	local03, local03
3500c     15 29 52 F2 | 	cmps	local02, local03 wc
35010     02 00 00 FF 
35014     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
35018     2C 00 90 CD |  if_b	jmp	#LR__5133
3501c     09 2B 02 F6 | 	mov	local03, arg01
35020     02 2A 66 F0 | 	shl	local03, #2
35024     02 00 00 FF 
35028     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
3502c     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
35030     15 2B 02 FB | 	rdlong	local03, local03
35034     15 29 82 F1 | 	sub	local02, local03
35038     01 12 06 F1 | 	add	arg01, #1
3503c     02 00 00 FF 
35040     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
35044     AC FF 9F FD | 	jmp	#LR__5131
35048                 | LR__5132
35048                 | LR__5133
35048     A8 00 00 FF 
3504c     80 27 16 FD | 	qdiv	local01, ##86400
35050     10 14 06 F1 | 	add	arg02, #16
35054     0A 13 62 FC | 	wrlong	arg01, arg02
35058     01 28 06 F1 | 	add	local02, #1
3505c     04 14 86 F1 | 	sub	arg02, #4
35060     0A 29 62 FC | 	wrlong	local02, arg02
35064     19 26 62 FD | 	getqy	local01
35068     07 00 00 FF 
3506c     10 26 16 FD | 	qdiv	local01, ##3600
35070     18 2A 62 FD | 	getqx	local03
35074     07 00 00 FF 
35078     10 26 16 FD | 	qdiv	local01, ##3600
3507c     04 14 86 F1 | 	sub	arg02, #4
35080     0A 2B 62 FC | 	wrlong	local03, arg02
35084     19 26 62 FD | 	getqy	local01
35088     3C 26 16 FD | 	qdiv	local01, #60
3508c     18 2A 62 FD | 	getqx	local03
35090     3C 26 16 FD | 	qdiv	local01, #60
35094     04 14 86 F1 | 	sub	arg02, #4
35098     0A 2B 62 FC | 	wrlong	local03, arg02
3509c     04 14 86 F1 | 	sub	arg02, #4
350a0                 | '         stm->tm_isdst = 0;
350a0                 | ' 
350a0                 | ' ;
350a0                 | '         return stm;
350a0     0A FB 01 F6 | 	mov	result1, arg02
350a4     19 2A 62 FD | 	getqy	local03
350a8     0A 2B 62 FC | 	wrlong	local03, arg02
350ac     20 14 06 F1 | 	add	arg02, #32
350b0     0A 01 68 FC | 	wrlong	#0, arg02
350b4     A7 F0 03 F6 | 	mov	ptra, fp
350b8     B2 00 A0 FD | 	call	#popregs_
350bc                 | _fatfs_cc__gmtime_r_ret
350bc     2D 00 64 FD | 	ret
350c0                 | 
350c0                 | _fatfs_cc__tzset
350c0     B6 01 00 FF 
350c4     01 12 06 F6 | 	mov	arg01, ##@LR__5445
350c8     34 00 B0 FD | 	call	#_fatfs_cc_getenv
350cc     FD 12 02 F6 | 	mov	arg01, result1
350d0     02 00 00 FF 
350d4     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
350d8     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
350dc     02 00 00 FF 
350e0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
350e4     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
350e8     02 00 00 FF 
350ec     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
350f0     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
350f4     02 00 00 FF 
350f8     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
350fc                 | _fatfs_cc__tzset_ret
350fc     2D 00 64 FD | 	ret
35100                 | 
35100                 | _fatfs_cc_getenv
35100     06 4A 05 F6 | 	mov	COUNT_, #6
35104     A8 00 A0 FD | 	call	#pushregs_
35108     09 27 02 F6 | 	mov	local01, arg01
3510c     09 29 02 F6 | 	mov	local02, arg01
35110     97 06 48 FB | 	callpa	#(@LR__5141-@LR__5140)>>2,fcache_load_ptr_
35114                 | LR__5140
35114     14 FB C9 FA | 	rdbyte	result1, local02 wz
35118     01 28 06 51 |  if_ne	add	local02, #1
3511c     F4 FF 9F 5D |  if_ne	jmp	#LR__5140
35120                 | LR__5141
35120     09 29 82 F1 | 	sub	local02, arg01
35124     14 FB 01 F6 | 	mov	result1, local02
35128     02 00 00 FF 
3512c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
35130     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
35134     02 00 00 FF 
35138     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
3513c                 | '             return 0;
3513c     00 FA 05 A6 |  if_e	mov	result1, #0
35140     5C 00 90 AD |  if_e	jmp	#LR__5144
35144                 | ' 
35144                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
35144     02 00 00 FF 
35148     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
3514c     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
35150     02 00 00 FF 
35154     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
35158                 | LR__5142
35158     15 2D 0A FB | 	rdlong	local04, local03 wz
3515c     3C 00 90 AD |  if_e	jmp	#LR__5143
35160     16 13 02 F6 | 	mov	arg01, local04
35164     13 15 02 F6 | 	mov	arg02, local01
35168     14 17 02 F6 | 	mov	arg03, local02
3516c     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
35170     00 FA 0D F2 | 	cmp	result1, #0 wz
35174     14 2F 02 A6 |  if_e	mov	local05, local02
35178     16 2F 02 A1 |  if_e	add	local05, local04
3517c     17 31 C2 AA |  if_e	rdbyte	local06, local05
35180     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
35184                 | ' 			return name+len+1;
35184     14 2D 02 A1 |  if_e	add	local04, local02
35188     01 2C 06 A1 |  if_e	add	local04, #1
3518c     16 FB 01 A6 |  if_e	mov	result1, local04
35190     0C 00 90 AD |  if_e	jmp	#LR__5144
35194     04 2A 06 F1 | 	add	local03, #4
35198     BC FF 9F FD | 	jmp	#LR__5142
3519c                 | LR__5143
3519c                 | ' 	}
3519c                 | ' 	return 0;
3519c     00 FA 05 F6 | 	mov	result1, #0
351a0                 | LR__5144
351a0     A7 F0 03 F6 | 	mov	ptra, fp
351a4     B2 00 A0 FD | 	call	#popregs_
351a8                 | _fatfs_cc_getenv_ret
351a8     2D 00 64 FD | 	ret
351ac                 | 
351ac                 | _fatfs_cc__get_fattime
351ac     00 4A 05 F6 | 	mov	COUNT_, #0
351b0     A8 00 A0 FD | 	call	#pushregs_
351b4     34 F0 07 F1 | 	add	ptra, #52
351b8     00 12 06 F6 | 	mov	arg01, #0
351bc     38 FB BF FD | 	call	#_fatfs_cc_time
351c0     04 4E 05 F1 | 	add	fp, #4
351c4     A7 FA 61 FC | 	wrlong	result1, fp
351c8     A7 12 02 F6 | 	mov	arg01, fp
351cc     0C 4E 05 F1 | 	add	fp, #12
351d0     A7 14 02 F6 | 	mov	arg02, fp
351d4     10 4E 85 F1 | 	sub	fp, #16
351d8     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
351dc     24 4E 05 F1 | 	add	fp, #36
351e0     A7 14 02 FB | 	rdlong	arg02, fp
351e4     50 14 86 F1 | 	sub	arg02, #80
351e8     09 14 66 F0 | 	shl	arg02, #9
351ec     04 4E 85 F1 | 	sub	fp, #4
351f0     A7 FA 01 FB | 	rdlong	result1, fp
351f4     01 FA 05 F1 | 	add	result1, #1
351f8     05 FA 65 F0 | 	shl	result1, #5
351fc     FD 14 42 F5 | 	or	arg02, result1
35200     04 4E 85 F1 | 	sub	fp, #4
35204     A7 FA 01 FB | 	rdlong	result1, fp
35208     FD 14 42 F5 | 	or	arg02, result1
3520c     14 4E 85 F1 | 	sub	fp, #20
35210     A7 14 62 FC | 	wrlong	arg02, fp
35214     10 4E 05 F1 | 	add	fp, #16
35218     A7 14 02 FB | 	rdlong	arg02, fp
3521c     0B 14 66 F0 | 	shl	arg02, #11
35220     04 4E 85 F1 | 	sub	fp, #4
35224     A7 FA 01 FB | 	rdlong	result1, fp
35228     05 FA 65 F0 | 	shl	result1, #5
3522c     FD 14 42 F5 | 	or	arg02, result1
35230     04 4E 85 F1 | 	sub	fp, #4
35234     A7 FA 01 FB | 	rdlong	result1, fp
35238     FD 14 42 F5 | 	or	arg02, result1
3523c     04 4E 85 F1 | 	sub	fp, #4
35240     A7 14 62 FC | 	wrlong	arg02, fp
35244                 | ' 
35244                 | '     now = time(0);
35244                 | '     _gmtime_r (&now, &date);
35244                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
35244                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
35244                 | '     return (ffdate << 16) | fftime;
35244     04 4E 85 F1 | 	sub	fp, #4
35248     A7 FA 01 FB | 	rdlong	result1, fp
3524c     10 FA 65 F0 | 	shl	result1, #16
35250     08 4E 85 F1 | 	sub	fp, #8
35254     0A FB 41 F5 | 	or	result1, arg02
35258     A7 F0 03 F6 | 	mov	ptra, fp
3525c     B2 00 A0 FD | 	call	#popregs_
35260                 | _fatfs_cc__get_fattime_ret
35260     2D 00 64 FD | 	ret
35264                 | 
35264                 | _fatfs_cc_unixtime_1042
35264     00 4A 05 F6 | 	mov	COUNT_, #0
35268     A8 00 A0 FD | 	call	#pushregs_
3526c     34 F0 07 F1 | 	add	ptra, #52
35270     04 4E 05 F1 | 	add	fp, #4
35274     A7 12 62 FC | 	wrlong	arg01, fp
35278     04 4E 05 F1 | 	add	fp, #4
3527c     A7 14 62 FC | 	wrlong	arg02, fp
35280     04 4E 85 F1 | 	sub	fp, #4
35284     A7 14 02 FB | 	rdlong	arg02, fp
35288     09 14 46 F0 | 	shr	arg02, #9
3528c     7F 14 06 F5 | 	and	arg02, #127
35290     50 FA 05 F6 | 	mov	result1, #80
35294     0A FB 01 F1 | 	add	result1, arg02
35298     20 4E 05 F1 | 	add	fp, #32
3529c     A7 FA 61 FC | 	wrlong	result1, fp
352a0     20 4E 85 F1 | 	sub	fp, #32
352a4     A7 FA 01 FB | 	rdlong	result1, fp
352a8     05 FA 45 F0 | 	shr	result1, #5
352ac     FD FA 41 F8 | 	getnib	result1, result1, #0
352b0     01 FA 85 F1 | 	sub	result1, #1
352b4     1C 4E 05 F1 | 	add	fp, #28
352b8     A7 FA 61 FC | 	wrlong	result1, fp
352bc     1C 4E 85 F1 | 	sub	fp, #28
352c0     A7 FA 01 FB | 	rdlong	result1, fp
352c4     1F FA 05 F5 | 	and	result1, #31
352c8     18 4E 05 F1 | 	add	fp, #24
352cc     A7 FA 61 FC | 	wrlong	result1, fp
352d0     14 4E 85 F1 | 	sub	fp, #20
352d4     A7 FA 01 FB | 	rdlong	result1, fp
352d8     0B FA 45 F0 | 	shr	result1, #11
352dc     1F FA 05 F5 | 	and	result1, #31
352e0     10 4E 05 F1 | 	add	fp, #16
352e4     A7 FA 61 FC | 	wrlong	result1, fp
352e8     10 4E 85 F1 | 	sub	fp, #16
352ec     A7 FA 01 FB | 	rdlong	result1, fp
352f0     05 FA 45 F0 | 	shr	result1, #5
352f4     3F FA 05 F5 | 	and	result1, #63
352f8     0C 4E 05 F1 | 	add	fp, #12
352fc     A7 FA 61 FC | 	wrlong	result1, fp
35300     0C 4E 85 F1 | 	sub	fp, #12
35304     A7 14 02 FB | 	rdlong	arg02, fp
35308     1F 14 06 F5 | 	and	arg02, #31
3530c     01 14 66 F0 | 	shl	arg02, #1
35310     08 4E 05 F1 | 	add	fp, #8
35314     A7 14 62 FC | 	wrlong	arg02, fp
35318     A7 12 02 F6 | 	mov	arg01, fp
3531c     10 4E 85 F1 | 	sub	fp, #16
35320     4C FA BF FD | 	call	#_fatfs_cc_mktime
35324     0C 4E 05 F1 | 	add	fp, #12
35328     A7 FA 61 FC | 	wrlong	result1, fp
3532c                 | ' 
3532c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
3532c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
3532c                 | '     date.tm_mday = (dosdate & 0x1f);
3532c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
3532c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
3532c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
3532c                 | ' 
3532c                 | '     t = mktime(&date);
3532c                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3532c                 | '     return t;
3532c     0C 4E 85 F1 | 	sub	fp, #12
35330     A7 F0 03 F6 | 	mov	ptra, fp
35334     B2 00 A0 FD | 	call	#popregs_
35338                 | _fatfs_cc_unixtime_1042_ret
35338     2D 00 64 FD | 	ret
3533c                 | 
3533c                 | _fatfs_cc__set_dos_error_1044
3533c     09 01 02 F6 | 	mov	_var01, arg01
35340                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35340                 | '     switch (derr) {
35340     14 00 26 F3 | 	fle	_var01, #20
35344     30 00 62 FD | 	jmprel	_var01
35348                 | LR__5150
35348     50 00 90 FD | 	jmp	#LR__5151
3534c     84 00 90 FD | 	jmp	#LR__5165
35350     80 00 90 FD | 	jmp	#LR__5166
35354     7C 00 90 FD | 	jmp	#LR__5167
35358     48 00 90 FD | 	jmp	#LR__5152
3535c     44 00 90 FD | 	jmp	#LR__5153
35360     40 00 90 FD | 	jmp	#LR__5154
35364     44 00 90 FD | 	jmp	#LR__5155
35368     48 00 90 FD | 	jmp	#LR__5157
3536c     54 00 90 FD | 	jmp	#LR__5160
35370     38 00 90 FD | 	jmp	#LR__5156
35374     4C 00 90 FD | 	jmp	#LR__5161
35378     48 00 90 FD | 	jmp	#LR__5162
3537c     44 00 90 FD | 	jmp	#LR__5163
35380     50 00 90 FD | 	jmp	#LR__5168
35384     4C 00 90 FD | 	jmp	#LR__5168
35388     48 00 90 FD | 	jmp	#LR__5168
3538c     2C 00 90 FD | 	jmp	#LR__5158
35390     38 00 90 FD | 	jmp	#LR__5164
35394     2C 00 90 FD | 	jmp	#LR__5159
35398     38 00 90 FD | 	jmp	#LR__5168
3539c                 | LR__5151
3539c     00 02 06 F6 | 	mov	_var02, #0
353a0                 | '         r = 0;
353a0                 | '         break;
353a0     34 00 90 FD | 	jmp	#LR__5169
353a4                 | LR__5152
353a4                 | LR__5153
353a4                 | LR__5154
353a4     04 02 06 F6 | 	mov	_var02, #4
353a8                 | '         r =  4 ;
353a8                 | '         break;
353a8     2C 00 90 FD | 	jmp	#LR__5169
353ac                 | LR__5155
353ac                 | LR__5156
353ac     06 02 06 F6 | 	mov	_var02, #6
353b0                 | '         r =  6 ;
353b0                 | '         break;
353b0     24 00 90 FD | 	jmp	#LR__5169
353b4                 | LR__5157
353b4     09 02 06 F6 | 	mov	_var02, #9
353b8                 | '         r =  9 ;
353b8                 | '         break;
353b8     1C 00 90 FD | 	jmp	#LR__5169
353bc                 | LR__5158
353bc     07 02 06 F6 | 	mov	_var02, #7
353c0                 | '         r =  7 ;
353c0                 | '         break;
353c0     14 00 90 FD | 	jmp	#LR__5169
353c4                 | LR__5159
353c4                 | LR__5160
353c4                 | LR__5161
353c4                 | LR__5162
353c4                 | LR__5163
353c4     0A 02 06 F6 | 	mov	_var02, #10
353c8                 | '         r =  10 ;
353c8                 | '         break;
353c8     0C 00 90 FD | 	jmp	#LR__5169
353cc                 | LR__5164
353cc     0B 02 06 F6 | 	mov	_var02, #11
353d0                 | '         r =  11 ;
353d0                 | '         break;
353d0     04 00 90 FD | 	jmp	#LR__5169
353d4                 | LR__5165
353d4                 | LR__5166
353d4                 | LR__5167
353d4                 | LR__5168
353d4     0C 02 06 F6 | 	mov	_var02, #12
353d8                 | '         r =  12 ;
353d8                 | '         break;
353d8                 | LR__5169
353d8                 | '     }
353d8                 | '     return _seterror(r);
353d8     00 02 4E F2 | 	cmps	_var02, #0 wz
353dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
353e0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
353e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
353e8     01 FA 65 56 |  if_ne	neg	result1, #1
353ec     00 FA 05 A6 |  if_e	mov	result1, #0
353f0                 | _fatfs_cc__set_dos_error_1044_ret
353f0     2D 00 64 FD | 	ret
353f4                 | 
353f4                 | _fatfs_cc_v_creat
353f4     04 4A 05 F6 | 	mov	COUNT_, #4
353f8     A8 00 A0 FD | 	call	#pushregs_
353fc     09 27 02 F6 | 	mov	local01, arg01
35400     0A 29 02 F6 | 	mov	local02, arg02
35404     03 00 00 FF 
35408     3C 12 06 F6 | 	mov	arg01, ##1596
3540c                 | '     return _gc_alloc(size);
3540c     10 14 06 F6 | 	mov	arg02, #16
35410     28 5E BF FD | 	call	#__system___gc_doalloc
35414     FD 2A 0A F6 | 	mov	local03, result1 wz
35418                 | '       return _seterror( 7 );
35418     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3541c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35420     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35424     01 FA 65 A6 |  if_e	neg	result1, #1
35428     58 00 90 AD |  if_e	jmp	#LR__5171
3542c     15 13 02 F6 | 	mov	arg01, local03
35430     00 14 06 F6 | 	mov	arg02, #0
35434     03 00 00 FF 
35438     3C 16 06 F6 | 	mov	arg03, ##1596
3543c     98 00 A0 FD | 	call	#\builtin_bytefill_
35440     02 00 00 FF 
35444     14 2A 06 F1 | 	add	local03, ##1044
35448     15 13 02 F6 | 	mov	arg01, local03
3544c     02 00 00 FF 
35450     14 2A 86 F1 | 	sub	local03, ##1044
35454     14 15 02 F6 | 	mov	arg02, local02
35458     07 16 06 F6 | 	mov	arg03, #7
3545c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
35460     FD 2C 0A F6 | 	mov	local04, result1 wz
35464     14 00 90 AD |  if_e	jmp	#LR__5170
35468     15 13 02 F6 | 	mov	arg01, local03
3546c                 | '     return _gc_free(ptr);
3546c     D8 5E BF FD | 	call	#__system___gc_free
35470                 | '     free(f);
35470                 | '     return _set_dos_error(r);
35470     16 13 02 F6 | 	mov	arg01, local04
35474     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35478     08 00 90 FD | 	jmp	#LR__5171
3547c                 | LR__5170
3547c     13 2B 62 FC | 	wrlong	local03, local01
35480                 | '   }
35480                 | '   fil->vfsdata = f;
35480                 | '   return 0;
35480     00 FA 05 F6 | 	mov	result1, #0
35484                 | LR__5171
35484     A7 F0 03 F6 | 	mov	ptra, fp
35488     B2 00 A0 FD | 	call	#popregs_
3548c                 | _fatfs_cc_v_creat_ret
3548c     2D 00 64 FD | 	ret
35490                 | 
35490                 | _fatfs_cc_v_close
35490     02 4A 05 F6 | 	mov	COUNT_, #2
35494     A8 00 A0 FD | 	call	#pushregs_
35498     09 27 02 FB | 	rdlong	local01, arg01
3549c     02 00 00 FF 
354a0     14 26 06 F1 | 	add	local01, ##1044
354a4     13 13 02 F6 | 	mov	arg01, local01
354a8     02 00 00 FF 
354ac     14 26 86 F1 | 	sub	local01, ##1044
354b0     DC E3 BF FD | 	call	#_fatfs_cc_f_close
354b4     FD 28 02 F6 | 	mov	local02, result1
354b8     13 13 02 F6 | 	mov	arg01, local01
354bc                 | '     return _gc_free(ptr);
354bc     88 5E BF FD | 	call	#__system___gc_free
354c0                 | '     FAT_FIL *f = fil->vfsdata;
354c0                 | '     r=f_close(&f->fil);
354c0                 | '     free(f);
354c0                 | '     return _set_dos_error(r);
354c0     14 13 02 F6 | 	mov	arg01, local02
354c4     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1044
354c8     A7 F0 03 F6 | 	mov	ptra, fp
354cc     B2 00 A0 FD | 	call	#popregs_
354d0                 | _fatfs_cc_v_close_ret
354d0     2D 00 64 FD | 	ret
354d4                 | 
354d4                 | _fatfs_cc_v_opendir
354d4     04 4A 05 F6 | 	mov	COUNT_, #4
354d8     A8 00 A0 FD | 	call	#pushregs_
354dc     09 27 02 F6 | 	mov	local01, arg01
354e0     0A 29 02 F6 | 	mov	local02, arg02
354e4     30 12 06 F6 | 	mov	arg01, #48
354e8                 | '     return _gc_alloc(size);
354e8     10 14 06 F6 | 	mov	arg02, #16
354ec     4C 5D BF FD | 	call	#__system___gc_doalloc
354f0     FD 2A 0A F6 | 	mov	local03, result1 wz
354f4                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
354f4                 | '       return _seterror( 7 );
354f4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
354f8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
354fc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35500     01 FA 65 A6 |  if_e	neg	result1, #1
35504     34 00 90 AD |  if_e	jmp	#LR__5181
35508     14 15 02 F6 | 	mov	arg02, local02
3550c     15 13 02 F6 | 	mov	arg01, local03
35510     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
35514     FD 2C 0A F6 | 	mov	local04, result1 wz
35518     14 00 90 AD |  if_e	jmp	#LR__5180
3551c     15 13 02 F6 | 	mov	arg01, local03
35520                 | '     return _gc_free(ptr);
35520     24 5E BF FD | 	call	#__system___gc_free
35524                 | '         free(f);
35524                 | '         return _set_dos_error(r);
35524     16 13 02 F6 | 	mov	arg01, local04
35528     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1044
3552c     0C 00 90 FD | 	jmp	#LR__5181
35530                 | LR__5180
35530     04 26 06 F1 | 	add	local01, #4
35534     13 2B 62 FC | 	wrlong	local03, local01
35538                 | '     }
35538                 | '     dir->vfsdata = f;
35538                 | '     return 0;
35538     00 FA 05 F6 | 	mov	result1, #0
3553c                 | LR__5181
3553c     A7 F0 03 F6 | 	mov	ptra, fp
35540     B2 00 A0 FD | 	call	#popregs_
35544                 | _fatfs_cc_v_opendir_ret
35544     2D 00 64 FD | 	ret
35548                 | 
35548                 | _fatfs_cc_v_closedir
35548     02 4A 05 F6 | 	mov	COUNT_, #2
3554c     A8 00 A0 FD | 	call	#pushregs_
35550     04 12 06 F1 | 	add	arg01, #4
35554     09 27 02 FB | 	rdlong	local01, arg01
35558     13 13 02 F6 | 	mov	arg01, local01
3555c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
35560     FD 28 02 F6 | 	mov	local02, result1
35564     13 13 02 F6 | 	mov	arg01, local01
35568                 | '     return _gc_free(ptr);
35568     DC 5D BF FD | 	call	#__system___gc_free
3556c     00 28 0E F2 | 	cmp	local02, #0 wz
35570     14 13 02 56 |  if_ne	mov	arg01, local02
35574     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1044
35578                 | '     return r;
35578     14 FB 01 F6 | 	mov	result1, local02
3557c     A7 F0 03 F6 | 	mov	ptra, fp
35580     B2 00 A0 FD | 	call	#popregs_
35584                 | _fatfs_cc_v_closedir_ret
35584     2D 00 64 FD | 	ret
35588                 | 
35588                 | _fatfs_cc_v_readdir
35588     01 4A 05 F6 | 	mov	COUNT_, #1
3558c     A8 00 A0 FD | 	call	#pushregs_
35590     2C F1 07 F1 | 	add	ptra, #300
35594     04 4E 05 F1 | 	add	fp, #4
35598     A7 12 62 FC | 	wrlong	arg01, fp
3559c     04 4E 05 F1 | 	add	fp, #4
355a0     A7 14 62 FC | 	wrlong	arg02, fp
355a4     04 4E 85 F1 | 	sub	fp, #4
355a8     A7 16 02 FB | 	rdlong	arg03, fp
355ac     04 16 06 F1 | 	add	arg03, #4
355b0     0B 13 02 FB | 	rdlong	arg01, arg03
355b4     08 4E 05 F1 | 	add	fp, #8
355b8     A7 14 02 F6 | 	mov	arg02, fp
355bc     0C 4E 85 F1 | 	sub	fp, #12
355c0     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
355c4     28 4F 05 F1 | 	add	fp, #296
355c8     A7 FA 61 FC | 	wrlong	result1, fp
355cc     28 4F 85 F1 | 	sub	fp, #296
355d0     00 FA 0D F2 | 	cmp	result1, #0 wz
355d4     14 00 90 AD |  if_e	jmp	#LR__5190
355d8                 | '         return _set_dos_error(r);
355d8     28 4F 05 F1 | 	add	fp, #296
355dc     A7 12 02 FB | 	rdlong	arg01, fp
355e0     28 4F 85 F1 | 	sub	fp, #296
355e4     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1044
355e8     C4 00 90 FD | 	jmp	#LR__5193
355ec                 | LR__5190
355ec     28 4E 05 F1 | 	add	fp, #40
355f0     A7 16 CA FA | 	rdbyte	arg03, fp wz
355f4     28 4E 85 F1 | 	sub	fp, #40
355f8                 | '         return -1;
355f8     01 FA 65 A6 |  if_e	neg	result1, #1
355fc     B0 00 90 AD |  if_e	jmp	#LR__5193
35600     08 4E 05 F1 | 	add	fp, #8
35604     A7 12 02 FB | 	rdlong	arg01, fp
35608     20 4E 05 F1 | 	add	fp, #32
3560c     A7 14 02 F6 | 	mov	arg02, fp
35610     28 4E 85 F1 | 	sub	fp, #40
35614     3F 16 06 F6 | 	mov	arg03, #63
35618     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
3561c     08 4E 05 F1 | 	add	fp, #8
35620     A7 16 02 FB | 	rdlong	arg03, fp
35624     3F 16 06 F1 | 	add	arg03, #63
35628     0B 01 48 FC | 	wrbyte	#0, arg03
3562c     0C 4E 05 F1 | 	add	fp, #12
35630     A7 16 C2 FA | 	rdbyte	arg03, fp
35634     14 4E 85 F1 | 	sub	fp, #20
35638     10 16 CE F7 | 	test	arg03, #16 wz
3563c     18 00 90 AD |  if_e	jmp	#LR__5191
35640     08 4E 05 F1 | 	add	fp, #8
35644     A7 16 02 FB | 	rdlong	arg03, fp
35648     08 4E 85 F1 | 	sub	fp, #8
3564c     50 16 06 F1 | 	add	arg03, #80
35650     0B 03 48 FC | 	wrbyte	#1, arg03
35654     14 00 90 FD | 	jmp	#LR__5192
35658                 | LR__5191
35658     08 4E 05 F1 | 	add	fp, #8
3565c     A7 16 02 FB | 	rdlong	arg03, fp
35660     08 4E 85 F1 | 	sub	fp, #8
35664     50 16 06 F1 | 	add	arg03, #80
35668     0B 01 48 FC | 	wrbyte	#0, arg03
3566c                 | LR__5192
3566c     08 4E 05 F1 | 	add	fp, #8
35670     A7 16 02 FB | 	rdlong	arg03, fp
35674     04 4E 05 F1 | 	add	fp, #4
35678     A7 14 02 FB | 	rdlong	arg02, fp
3567c     48 16 06 F1 | 	add	arg03, #72
35680     0B 15 62 FC | 	wrlong	arg02, arg03
35684     04 4E 85 F1 | 	sub	fp, #4
35688     A7 26 02 FB | 	rdlong	local01, fp
3568c     08 4E 05 F1 | 	add	fp, #8
35690     A7 12 E2 FA | 	rdword	arg01, fp
35694     02 4E 05 F1 | 	add	fp, #2
35698     A7 14 E2 FA | 	rdword	arg02, fp
3569c     12 4E 85 F1 | 	sub	fp, #18
356a0     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1042
356a4     4C 26 06 F1 | 	add	local01, #76
356a8     13 FB 61 FC | 	wrlong	result1, local01
356ac                 | '         ent->d_type =  (0) ;
356ac                 | '     }
356ac                 | '     ent->d_size = finfo.fsize;
356ac                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
356ac                 | '     return 0;
356ac     00 FA 05 F6 | 	mov	result1, #0
356b0                 | LR__5193
356b0     A7 F0 03 F6 | 	mov	ptra, fp
356b4     B2 00 A0 FD | 	call	#popregs_
356b8                 | _fatfs_cc_v_readdir_ret
356b8     2D 00 64 FD | 	ret
356bc                 | 
356bc                 | _fatfs_cc_v_stat
356bc     03 4A 05 F6 | 	mov	COUNT_, #3
356c0     A8 00 A0 FD | 	call	#pushregs_
356c4     30 F1 07 F1 | 	add	ptra, #304
356c8     04 4E 05 F1 | 	add	fp, #4
356cc     A7 12 62 FC | 	wrlong	arg01, fp
356d0     04 4E 05 F1 | 	add	fp, #4
356d4     A7 14 62 FC | 	wrlong	arg02, fp
356d8     08 4E 85 F1 | 	sub	fp, #8
356dc     0A 13 02 F6 | 	mov	arg01, arg02
356e0     00 14 06 F6 | 	mov	arg02, #0
356e4     30 16 06 F6 | 	mov	arg03, #48
356e8     98 00 A0 FD | 	call	#\builtin_bytefill_
356ec     04 4E 05 F1 | 	add	fp, #4
356f0     A7 FA 01 FB | 	rdlong	result1, fp
356f4     04 4E 85 F1 | 	sub	fp, #4
356f8     FD FA C9 FA | 	rdbyte	result1, result1 wz
356fc     2C 00 90 AD |  if_e	jmp	#LR__5200
35700     04 4E 05 F1 | 	add	fp, #4
35704     A7 FA 01 FB | 	rdlong	result1, fp
35708     04 4E 85 F1 | 	sub	fp, #4
3570c     FD FA C1 FA | 	rdbyte	result1, result1
35710     2E FA 0D F2 | 	cmp	result1, #46 wz
35714     04 4E 05 A1 |  if_e	add	fp, #4
35718     A7 26 02 AB |  if_e	rdlong	local01, fp
3571c     04 4E 85 A1 |  if_e	sub	fp, #4
35720     01 26 06 A1 |  if_e	add	local01, #1
35724     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
35728     18 00 90 5D |  if_ne	jmp	#LR__5201
3572c                 | LR__5200
3572c     18 4E 05 F1 | 	add	fp, #24
35730     A7 20 48 FC | 	wrbyte	#16, fp
35734     0C 4E 85 F1 | 	sub	fp, #12
35738     A7 00 68 FC | 	wrlong	#0, fp
3573c     0C 4E 85 F1 | 	sub	fp, #12
35740     24 00 90 FD | 	jmp	#LR__5202
35744                 | LR__5201
35744     04 4E 05 F1 | 	add	fp, #4
35748     A7 12 02 FB | 	rdlong	arg01, fp
3574c     0C 4E 05 F1 | 	add	fp, #12
35750     A7 14 02 F6 | 	mov	arg02, fp
35754     10 4E 85 F1 | 	sub	fp, #16
35758     AC EB BF FD | 	call	#_fatfs_cc_f_stat
3575c     0C 4E 05 F1 | 	add	fp, #12
35760     A7 FA 61 FC | 	wrlong	result1, fp
35764     0C 4E 85 F1 | 	sub	fp, #12
35768                 | LR__5202
35768     0C 4E 05 F1 | 	add	fp, #12
3576c     A7 28 0A FB | 	rdlong	local02, fp wz
35770     0C 4E 85 F1 | 	sub	fp, #12
35774     14 00 90 AD |  if_e	jmp	#LR__5203
35778                 | '         return _set_dos_error(r);
35778     0C 4E 05 F1 | 	add	fp, #12
3577c     A7 12 02 FB | 	rdlong	arg01, fp
35780     0C 4E 85 F1 | 	sub	fp, #12
35784     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35788     14 01 90 FD | 	jmp	#LR__5204
3578c                 | LR__5203
3578c     2C 4F 05 F1 | 	add	fp, #300
35790     A7 48 6A FC | 	wrlong	#292, fp
35794     14 4F 85 F1 | 	sub	fp, #276
35798     A7 2A C2 FA | 	rdbyte	local03, fp
3579c     18 4E 85 F1 | 	sub	fp, #24
357a0     01 2A CE F7 | 	test	local03, #1 wz
357a4     2C 4F 05 A1 |  if_e	add	fp, #300
357a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
357ac     92 2A 46 A5 |  if_e	or	local03, #146
357b0     A7 2A 62 AC |  if_e	wrlong	local03, fp
357b4     2C 4F 85 A1 |  if_e	sub	fp, #300
357b8     18 4E 05 F1 | 	add	fp, #24
357bc     A7 2A C2 FA | 	rdbyte	local03, fp
357c0     18 4E 85 F1 | 	sub	fp, #24
357c4     10 2A CE F7 | 	test	local03, #16 wz
357c8     2C 4F 05 51 |  if_ne	add	fp, #300
357cc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
357d0     08 00 00 5F 
357d4     49 2A 46 55 |  if_ne	or	local03, ##4169
357d8     A7 2A 62 5C |  if_ne	wrlong	local03, fp
357dc     2C 4F 85 51 |  if_ne	sub	fp, #300
357e0     08 4E 05 F1 | 	add	fp, #8
357e4     A7 2A 02 FB | 	rdlong	local03, fp
357e8     24 4F 05 F1 | 	add	fp, #292
357ec     A7 28 02 FB | 	rdlong	local02, fp
357f0     08 2A 06 F1 | 	add	local03, #8
357f4     15 29 62 FC | 	wrlong	local02, local03
357f8     24 4F 85 F1 | 	sub	fp, #292
357fc     A7 2A 02 FB | 	rdlong	local03, fp
35800     0C 2A 06 F1 | 	add	local03, #12
35804     15 03 68 FC | 	wrlong	#1, local03
35808     A7 2A 02 FB | 	rdlong	local03, fp
3580c     08 4E 05 F1 | 	add	fp, #8
35810     A7 28 02 FB | 	rdlong	local02, fp
35814     18 2A 06 F1 | 	add	local03, #24
35818     15 29 62 FC | 	wrlong	local02, local03
3581c     08 4E 85 F1 | 	sub	fp, #8
35820     A7 2A 02 FB | 	rdlong	local03, fp
35824     1C 2A 06 F1 | 	add	local03, #28
35828     01 00 80 FF 
3582c     15 01 68 FC | 	wrlong	##512, local03
35830     A7 28 02 FB | 	rdlong	local02, fp
35834     14 2B 02 F6 | 	mov	local03, local02
35838     18 28 06 F1 | 	add	local02, #24
3583c     14 29 02 FB | 	rdlong	local02, local02
35840     FF 29 06 F1 | 	add	local02, #511
35844     14 29 52 F6 | 	abs	local02, local02 wc
35848     09 28 46 F0 | 	shr	local02, #9
3584c     14 29 82 F6 | 	negc	local02, local02
35850     20 2A 06 F1 | 	add	local03, #32
35854     15 29 62 FC | 	wrlong	local02, local03
35858     A7 28 02 FB | 	rdlong	local02, fp
3585c     14 2B 02 F6 | 	mov	local03, local02
35860     14 27 02 F6 | 	mov	local01, local02
35864     0C 4E 05 F1 | 	add	fp, #12
35868     A7 12 E2 FA | 	rdword	arg01, fp
3586c     02 4E 05 F1 | 	add	fp, #2
35870     A7 14 E2 FA | 	rdword	arg02, fp
35874     16 4E 85 F1 | 	sub	fp, #22
35878     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1042
3587c     2C 26 06 F1 | 	add	local01, #44
35880     13 FB 61 FC | 	wrlong	result1, local01
35884     28 28 06 F1 | 	add	local02, #40
35888     14 FB 61 FC | 	wrlong	result1, local02
3588c     24 2A 06 F1 | 	add	local03, #36
35890     15 FB 61 FC | 	wrlong	result1, local03
35894                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
35894                 | '     }
35894                 | '     buf->st_mode = mode;
35894                 | '     buf->st_nlink = 1;
35894                 | '     buf->st_size = finfo.fsize;
35894                 | '     buf->st_blksize = 512;
35894                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
35894                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
35894                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35894                 | '     return r;
35894     0C 4E 05 F1 | 	add	fp, #12
35898     A7 FA 01 FB | 	rdlong	result1, fp
3589c     0C 4E 85 F1 | 	sub	fp, #12
358a0                 | LR__5204
358a0     A7 F0 03 F6 | 	mov	ptra, fp
358a4     B2 00 A0 FD | 	call	#popregs_
358a8                 | _fatfs_cc_v_stat_ret
358a8     2D 00 64 FD | 	ret
358ac                 | 
358ac                 | _fatfs_cc_v_read
358ac     00 4A 05 F6 | 	mov	COUNT_, #0
358b0     A8 00 A0 FD | 	call	#pushregs_
358b4     1C F0 07 F1 | 	add	ptra, #28
358b8     04 4E 05 F1 | 	add	fp, #4
358bc     A7 12 62 FC | 	wrlong	arg01, fp
358c0     04 4E 05 F1 | 	add	fp, #4
358c4     A7 14 62 FC | 	wrlong	arg02, fp
358c8     04 4E 05 F1 | 	add	fp, #4
358cc     A7 16 62 FC | 	wrlong	arg03, fp
358d0     08 4E 85 F1 | 	sub	fp, #8
358d4     A7 12 02 FB | 	rdlong	arg01, fp
358d8     09 13 0A FB | 	rdlong	arg01, arg01 wz
358dc     0C 4E 05 F1 | 	add	fp, #12
358e0     A7 12 62 FC | 	wrlong	arg01, fp
358e4     10 4E 85 F1 | 	sub	fp, #16
358e8                 | '         return _seterror( 5 );
358e8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
358ec     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
358f0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
358f4     01 FA 65 A6 |  if_e	neg	result1, #1
358f8     B8 00 90 AD |  if_e	jmp	#LR__5212
358fc     10 4E 05 F1 | 	add	fp, #16
35900     A7 12 02 FB | 	rdlong	arg01, fp
35904     02 00 00 FF 
35908     14 12 06 F1 | 	add	arg01, ##1044
3590c     08 4E 85 F1 | 	sub	fp, #8
35910     A7 14 02 FB | 	rdlong	arg02, fp
35914     04 4E 05 F1 | 	add	fp, #4
35918     A7 16 02 FB | 	rdlong	arg03, fp
3591c     0C 4E 05 F1 | 	add	fp, #12
35920     A7 18 02 F6 | 	mov	arg04, fp
35924     18 4E 85 F1 | 	sub	fp, #24
35928     C4 CE BF FD | 	call	#_fatfs_cc_f_read
3592c     14 4E 05 F1 | 	add	fp, #20
35930     A7 FA 61 FC | 	wrlong	result1, fp
35934     14 4E 85 F1 | 	sub	fp, #20
35938     00 FA 0D F2 | 	cmp	result1, #0 wz
3593c     34 00 90 AD |  if_e	jmp	#LR__5210
35940     04 4E 05 F1 | 	add	fp, #4
35944     A7 18 02 FB | 	rdlong	arg04, fp
35948     0C 17 02 F6 | 	mov	arg03, arg04
3594c     08 18 06 F1 | 	add	arg04, #8
35950     0C 19 02 FB | 	rdlong	arg04, arg04
35954     20 18 46 F5 | 	or	arg04, #32
35958     08 16 06 F1 | 	add	arg03, #8
3595c     0B 19 62 FC | 	wrlong	arg04, arg03
35960                 | '         fil->state |=  (0x20) ;
35960                 | '         return _set_dos_error(r);
35960     10 4E 05 F1 | 	add	fp, #16
35964     A7 12 02 FB | 	rdlong	arg01, fp
35968     14 4E 85 F1 | 	sub	fp, #20
3596c     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35970     40 00 90 FD | 	jmp	#LR__5212
35974                 | LR__5210
35974     18 4E 05 F1 | 	add	fp, #24
35978     A7 FA 09 FB | 	rdlong	result1, fp wz
3597c     18 4E 85 F1 | 	sub	fp, #24
35980     24 00 90 5D |  if_ne	jmp	#LR__5211
35984     04 4E 05 F1 | 	add	fp, #4
35988     A7 FA 01 FB | 	rdlong	result1, fp
3598c     FD 18 02 F6 | 	mov	arg04, result1
35990     04 4E 85 F1 | 	sub	fp, #4
35994     08 FA 05 F1 | 	add	result1, #8
35998     FD FA 01 FB | 	rdlong	result1, result1
3599c     10 FA 45 F5 | 	or	result1, #16
359a0     08 18 06 F1 | 	add	arg04, #8
359a4     0C FB 61 FC | 	wrlong	result1, arg04
359a8                 | LR__5211
359a8                 | '         fil->state |=  (0x10) ;
359a8                 | '     }
359a8                 | '     return x;
359a8     18 4E 05 F1 | 	add	fp, #24
359ac     A7 FA 01 FB | 	rdlong	result1, fp
359b0     18 4E 85 F1 | 	sub	fp, #24
359b4                 | LR__5212
359b4     A7 F0 03 F6 | 	mov	ptra, fp
359b8     B2 00 A0 FD | 	call	#popregs_
359bc                 | _fatfs_cc_v_read_ret
359bc     2D 00 64 FD | 	ret
359c0                 | 
359c0                 | _fatfs_cc_v_write
359c0     00 4A 05 F6 | 	mov	COUNT_, #0
359c4     A8 00 A0 FD | 	call	#pushregs_
359c8     1C F0 07 F1 | 	add	ptra, #28
359cc     04 4E 05 F1 | 	add	fp, #4
359d0     A7 12 62 FC | 	wrlong	arg01, fp
359d4     04 4E 05 F1 | 	add	fp, #4
359d8     A7 14 62 FC | 	wrlong	arg02, fp
359dc     04 4E 05 F1 | 	add	fp, #4
359e0     A7 16 62 FC | 	wrlong	arg03, fp
359e4     08 4E 85 F1 | 	sub	fp, #8
359e8     A7 12 02 FB | 	rdlong	arg01, fp
359ec     09 13 0A FB | 	rdlong	arg01, arg01 wz
359f0     0C 4E 05 F1 | 	add	fp, #12
359f4     A7 12 62 FC | 	wrlong	arg01, fp
359f8     10 4E 85 F1 | 	sub	fp, #16
359fc                 | '         return _seterror( 5 );
359fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35a00     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35a04     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35a08     01 FA 65 A6 |  if_e	neg	result1, #1
35a0c     84 00 90 AD |  if_e	jmp	#LR__5221
35a10     10 4E 05 F1 | 	add	fp, #16
35a14     A7 12 02 FB | 	rdlong	arg01, fp
35a18     02 00 00 FF 
35a1c     14 12 06 F1 | 	add	arg01, ##1044
35a20     08 4E 85 F1 | 	sub	fp, #8
35a24     A7 14 02 FB | 	rdlong	arg02, fp
35a28     04 4E 05 F1 | 	add	fp, #4
35a2c     A7 16 02 FB | 	rdlong	arg03, fp
35a30     0C 4E 05 F1 | 	add	fp, #12
35a34     A7 18 02 F6 | 	mov	arg04, fp
35a38     18 4E 85 F1 | 	sub	fp, #24
35a3c     4C D4 BF FD | 	call	#_fatfs_cc_f_write
35a40     14 4E 05 F1 | 	add	fp, #20
35a44     A7 FA 61 FC | 	wrlong	result1, fp
35a48     14 4E 85 F1 | 	sub	fp, #20
35a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
35a50     34 00 90 AD |  if_e	jmp	#LR__5220
35a54     04 4E 05 F1 | 	add	fp, #4
35a58     A7 18 02 FB | 	rdlong	arg04, fp
35a5c     0C 17 02 F6 | 	mov	arg03, arg04
35a60     08 18 06 F1 | 	add	arg04, #8
35a64     0C 19 02 FB | 	rdlong	arg04, arg04
35a68     20 18 46 F5 | 	or	arg04, #32
35a6c     08 16 06 F1 | 	add	arg03, #8
35a70     0B 19 62 FC | 	wrlong	arg04, arg03
35a74                 | '         fil->state |=  (0x20) ;
35a74                 | '         return _set_dos_error(r);
35a74     10 4E 05 F1 | 	add	fp, #16
35a78     A7 12 02 FB | 	rdlong	arg01, fp
35a7c     14 4E 85 F1 | 	sub	fp, #20
35a80     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35a84     0C 00 90 FD | 	jmp	#LR__5221
35a88                 | LR__5220
35a88                 | '     }
35a88                 | '     return x;
35a88     18 4E 05 F1 | 	add	fp, #24
35a8c     A7 FA 01 FB | 	rdlong	result1, fp
35a90     18 4E 85 F1 | 	sub	fp, #24
35a94                 | LR__5221
35a94     A7 F0 03 F6 | 	mov	ptra, fp
35a98     B2 00 A0 FD | 	call	#popregs_
35a9c                 | _fatfs_cc_v_write_ret
35a9c     2D 00 64 FD | 	ret
35aa0                 | 
35aa0                 | _fatfs_cc_v_lseek
35aa0     04 4A 05 F6 | 	mov	COUNT_, #4
35aa4     A8 00 A0 FD | 	call	#pushregs_
35aa8     0A 27 02 F6 | 	mov	local01, arg02
35aac     0B 29 02 F6 | 	mov	local02, arg03
35ab0     09 2B 02 FB | 	rdlong	local03, arg01
35ab4     02 00 00 FF 
35ab8     14 2A 0E F1 | 	add	local03, ##1044 wz
35abc                 | '         return _seterror( 5 );
35abc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35ac0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35ac4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35ac8     01 FA 65 A6 |  if_e	neg	result1, #1
35acc     4C 00 90 AD |  if_e	jmp	#LR__5232
35ad0     00 28 0E F2 | 	cmp	local02, #0 wz
35ad4     24 00 90 AD |  if_e	jmp	#LR__5230
35ad8     01 28 0E F2 | 	cmp	local02, #1 wz
35adc     14 2A 06 A1 |  if_e	add	local03, #20
35ae0     15 2D 02 AB |  if_e	rdlong	local04, local03
35ae4     14 2A 86 A1 |  if_e	sub	local03, #20
35ae8     16 27 02 A1 |  if_e	add	local01, local04
35aec     0C 2A 06 51 |  if_ne	add	local03, #12
35af0     15 2D 02 5B |  if_ne	rdlong	local04, local03
35af4     0C 2A 86 51 |  if_ne	sub	local03, #12
35af8     16 27 02 51 |  if_ne	add	local01, local04
35afc                 | LR__5230
35afc     13 15 02 F6 | 	mov	arg02, local01
35b00     15 13 02 F6 | 	mov	arg01, local03
35b04     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
35b08     FD 12 0A F6 | 	mov	arg01, result1 wz
35b0c     08 00 90 AD |  if_e	jmp	#LR__5231
35b10                 | '         return _set_dos_error(result);
35b10     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35b14     04 00 90 FD | 	jmp	#LR__5232
35b18                 | LR__5231
35b18                 | '     }
35b18                 | '     return offset;
35b18     13 FB 01 F6 | 	mov	result1, local01
35b1c                 | LR__5232
35b1c     A7 F0 03 F6 | 	mov	ptra, fp
35b20     B2 00 A0 FD | 	call	#popregs_
35b24                 | _fatfs_cc_v_lseek_ret
35b24     2D 00 64 FD | 	ret
35b28                 | 
35b28                 | _fatfs_cc_v_ioctl
35b28                 | ' {
35b28                 | '     return _seterror( 10 );
35b28     20 E6 05 F1 | 	add	ptr___system__dat__, #32
35b2c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
35b30     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
35b34     01 FA 65 F6 | 	neg	result1, #1
35b38                 | _fatfs_cc_v_ioctl_ret
35b38     2D 00 64 FD | 	ret
35b3c                 | 
35b3c                 | _fatfs_cc_v_mkdir
35b3c     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
35b40     FD 12 02 F6 | 	mov	arg01, result1
35b44                 | ' 
35b44                 | '     r = f_mkdir(name);
35b44                 | '     return _set_dos_error(r);
35b44     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35b48                 | _fatfs_cc_v_mkdir_ret
35b48     2D 00 64 FD | 	ret
35b4c                 | 
35b4c                 | _fatfs_cc_v_remove
35b4c     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35b50     FD 12 02 F6 | 	mov	arg01, result1
35b54                 | ' 
35b54                 | '     r = f_unlink(name);
35b54                 | '     return _set_dos_error(r);
35b54     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35b58                 | _fatfs_cc_v_remove_ret
35b58     2D 00 64 FD | 	ret
35b5c                 | 
35b5c                 | _fatfs_cc_v_rmdir
35b5c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35b60     FD 12 02 F6 | 	mov	arg01, result1
35b64                 | ' 
35b64                 | '     r = f_unlink(name);
35b64                 | '     return _set_dos_error(r);
35b64     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35b68                 | _fatfs_cc_v_rmdir_ret
35b68     2D 00 64 FD | 	ret
35b6c                 | 
35b6c                 | _fatfs_cc_v_rename
35b6c     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
35b70     FD 12 02 F6 | 	mov	arg01, result1
35b74                 | '     return _set_dos_error(r);
35b74     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35b78                 | _fatfs_cc_v_rename_ret
35b78     2D 00 64 FD | 	ret
35b7c                 | 
35b7c                 | _fatfs_cc_v_open
35b7c     07 4A 05 F6 | 	mov	COUNT_, #7
35b80     A8 00 A0 FD | 	call	#pushregs_
35b84     09 27 02 F6 | 	mov	local01, arg01
35b88     0A 29 02 F6 | 	mov	local02, arg02
35b8c     0B 2B 02 F6 | 	mov	local03, arg03
35b90     03 00 00 FF 
35b94     3C 12 06 F6 | 	mov	arg01, ##1596
35b98                 | '     return _gc_alloc(size);
35b98     10 14 06 F6 | 	mov	arg02, #16
35b9c     9C 56 BF FD | 	call	#__system___gc_doalloc
35ba0     FD 2C 0A F6 | 	mov	local04, result1 wz
35ba4                 | '       return _seterror( 7 );
35ba4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35ba8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35bac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35bb0     01 FA 65 A6 |  if_e	neg	result1, #1
35bb4     98 00 90 AD |  if_e	jmp	#LR__5246
35bb8     16 13 02 F6 | 	mov	arg01, local04
35bbc     00 14 06 F6 | 	mov	arg02, #0
35bc0     03 00 00 FF 
35bc4     3C 16 06 F6 | 	mov	arg03, ##1596
35bc8     98 00 A0 FD | 	call	#\builtin_bytefill_
35bcc                 | '   switch (flags & 3) {
35bcc     15 2F 02 F6 | 	mov	local05, local03
35bd0     03 2E 0E F5 | 	and	local05, #3 wz
35bd4     0C 00 90 AD |  if_e	jmp	#LR__5240
35bd8     01 2E 0E F2 | 	cmp	local05, #1 wz
35bdc     0C 00 90 AD |  if_e	jmp	#LR__5241
35be0     10 00 90 FD | 	jmp	#LR__5242
35be4                 | LR__5240
35be4     01 30 06 F6 | 	mov	local06, #1
35be8                 | '       fs_flags =  0x01 ;
35be8                 | '       break;
35be8     0C 00 90 FD | 	jmp	#LR__5243
35bec                 | LR__5241
35bec     02 30 06 F6 | 	mov	local06, #2
35bf0                 | '       fs_flags =  0x02 ;
35bf0                 | '       break;
35bf0     04 00 90 FD | 	jmp	#LR__5243
35bf4                 | LR__5242
35bf4     03 30 06 F6 | 	mov	local06, #3
35bf8                 | '       fs_flags =  0x01  |  0x02 ;
35bf8                 | '       break;
35bf8                 | LR__5243
35bf8     08 2A CE F7 | 	test	local03, #8 wz
35bfc     18 30 46 55 |  if_ne	or	local06, #24
35c00     08 00 90 5D |  if_ne	jmp	#LR__5244
35c04     20 2A CE F7 | 	test	local03, #32 wz
35c08     30 30 46 55 |  if_ne	or	local06, #48
35c0c                 | LR__5244
35c0c     02 00 00 FF 
35c10     14 2C 06 F1 | 	add	local04, ##1044
35c14     16 13 02 F6 | 	mov	arg01, local04
35c18     02 00 00 FF 
35c1c     14 2C 86 F1 | 	sub	local04, ##1044
35c20     14 15 02 F6 | 	mov	arg02, local02
35c24     18 17 02 F6 | 	mov	arg03, local06
35c28     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
35c2c     FD 32 0A F6 | 	mov	local07, result1 wz
35c30     14 00 90 AD |  if_e	jmp	#LR__5245
35c34     16 13 02 F6 | 	mov	arg01, local04
35c38                 | '     return _gc_free(ptr);
35c38     0C 57 BF FD | 	call	#__system___gc_free
35c3c                 | '     free(f);
35c3c                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35c3c                 | '     return _set_dos_error(r);
35c3c     19 13 02 F6 | 	mov	arg01, local07
35c40     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35c44     08 00 90 FD | 	jmp	#LR__5246
35c48                 | LR__5245
35c48     13 2D 62 FC | 	wrlong	local04, local01
35c4c                 | '   }
35c4c                 | '   fil->vfsdata = f;
35c4c                 | '   return 0;
35c4c     00 FA 05 F6 | 	mov	result1, #0
35c50                 | LR__5246
35c50     A7 F0 03 F6 | 	mov	ptra, fp
35c54     B2 00 A0 FD | 	call	#popregs_
35c58                 | _fatfs_cc_v_open_ret
35c58     2D 00 64 FD | 	ret
35c5c                 | 
35c5c                 | _fatfs_cc_v_flush
35c5c     09 13 02 FB | 	rdlong	arg01, arg01
35c60     02 00 00 FF 
35c64     14 12 0E F1 | 	add	arg01, ##1044 wz
35c68                 | '         return _seterror( 5 );
35c68     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35c6c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35c70     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35c74     01 FA 65 A6 |  if_e	neg	result1, #1
35c78     0C 00 90 AD |  if_e	jmp	#LR__5250
35c7c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
35c80     FD 12 02 F6 | 	mov	arg01, result1
35c84                 | '     }
35c84                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35c84                 | '     result = f_sync(f);
35c84                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35c84                 | '     return _set_dos_error(result);
35c84     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1044
35c88                 | LR__5250
35c88                 | _fatfs_cc_v_flush_ret
35c88     2D 00 64 FD | 	ret
35c8c                 | 
35c8c                 | _fatfs_cc_v_init
35c8c                 | ' {
35c8c                 | '     return 0;
35c8c     00 FA 05 F6 | 	mov	result1, #0
35c90                 | _fatfs_cc_v_init_ret
35c90     2D 00 64 FD | 	ret
35c94                 | 
35c94                 | _fatfs_cc_v_deinit
35c94     B6 01 00 FF 
35c98     04 14 06 F6 | 	mov	arg02, ##@LR__5446
35c9c     00 12 06 F6 | 	mov	arg01, #0
35ca0     00 16 06 F6 | 	mov	arg03, #0
35ca4     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
35ca8     01 00 00 FF 
35cac     08 E4 05 F1 | 	add	objptr, ##520
35cb0     F2 12 02 FB | 	rdlong	arg01, objptr
35cb4     04 E4 05 F1 | 	add	objptr, #4
35cb8     F2 14 02 FB | 	rdlong	arg02, objptr
35cbc     01 00 00 FF 
35cc0     0C E4 85 F1 | 	sub	objptr, ##524
35cc4     F0 3D BF FD | 	call	#__system___freepins
35cc8                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35cc8                 | '     _freepins(f_pinmask);
35cc8                 | '     return 0;
35cc8     00 FA 05 F6 | 	mov	result1, #0
35ccc                 | _fatfs_cc_v_deinit_ret
35ccc     2D 00 64 FD | 	ret
35cd0                 | 
35cd0                 | _fatfs_cc_get_vfs
35cd0     01 4A 05 F6 | 	mov	COUNT_, #1
35cd4     A8 00 A0 FD | 	call	#pushregs_
35cd8     09 27 02 F6 | 	mov	local01, arg01
35cdc     50 12 06 F6 | 	mov	arg01, #80
35ce0     28 55 BF FD | 	call	#__system___gc_alloc_managed
35ce4     FD 12 02 F6 | 	mov	arg01, result1
35ce8     F2 FA 01 F6 | 	mov	result1, objptr
35cec     00 A0 05 FF 
35cf0     00 FA 45 F5 | 	or	result1, ##188743680
35cf4     09 FB 61 FC | 	wrlong	result1, arg01
35cf8     F2 FA 01 F6 | 	mov	result1, objptr
35cfc     00 A8 05 FF 
35d00     00 FA 45 F5 | 	or	result1, ##189792256
35d04     04 12 06 F1 | 	add	arg01, #4
35d08     09 FB 61 FC | 	wrlong	result1, arg01
35d0c     F2 FA 01 F6 | 	mov	result1, objptr
35d10     00 B0 05 FF 
35d14     00 FA 45 F5 | 	or	result1, ##190840832
35d18     04 12 06 F1 | 	add	arg01, #4
35d1c     09 FB 61 FC | 	wrlong	result1, arg01
35d20     F2 FA 01 F6 | 	mov	result1, objptr
35d24     00 B8 05 FF 
35d28     00 FA 45 F5 | 	or	result1, ##191889408
35d2c     04 12 06 F1 | 	add	arg01, #4
35d30     09 FB 61 FC | 	wrlong	result1, arg01
35d34     F2 FA 01 F6 | 	mov	result1, objptr
35d38     00 C0 05 FF 
35d3c     00 FA 45 F5 | 	or	result1, ##192937984
35d40     04 12 06 F1 | 	add	arg01, #4
35d44     09 FB 61 FC | 	wrlong	result1, arg01
35d48     04 12 06 F1 | 	add	arg01, #4
35d4c     09 01 68 FC | 	wrlong	#0, arg01
35d50     04 12 06 F1 | 	add	arg01, #4
35d54     09 27 62 FC | 	wrlong	local01, arg01
35d58     04 12 06 F1 | 	add	arg01, #4
35d5c     09 01 68 FC | 	wrlong	#0, arg01
35d60     F2 FA 01 F6 | 	mov	result1, objptr
35d64     00 C8 05 FF 
35d68     00 FA 45 F5 | 	or	result1, ##193986560
35d6c     04 12 06 F1 | 	add	arg01, #4
35d70     09 FB 61 FC | 	wrlong	result1, arg01
35d74     F2 FA 01 F6 | 	mov	result1, objptr
35d78     00 D0 05 FF 
35d7c     00 FA 45 F5 | 	or	result1, ##195035136
35d80     04 12 06 F1 | 	add	arg01, #4
35d84     09 FB 61 FC | 	wrlong	result1, arg01
35d88     F2 FA 01 F6 | 	mov	result1, objptr
35d8c     00 D8 05 FF 
35d90     00 FA 45 F5 | 	or	result1, ##196083712
35d94     04 12 06 F1 | 	add	arg01, #4
35d98     09 FB 61 FC | 	wrlong	result1, arg01
35d9c     F2 FA 01 F6 | 	mov	result1, objptr
35da0     00 E0 05 FF 
35da4     00 FA 45 F5 | 	or	result1, ##197132288
35da8     04 12 06 F1 | 	add	arg01, #4
35dac     09 FB 61 FC | 	wrlong	result1, arg01
35db0     F2 FA 01 F6 | 	mov	result1, objptr
35db4     00 E8 05 FF 
35db8     00 FA 45 F5 | 	or	result1, ##198180864
35dbc     04 12 06 F1 | 	add	arg01, #4
35dc0     09 FB 61 FC | 	wrlong	result1, arg01
35dc4     F2 FA 01 F6 | 	mov	result1, objptr
35dc8     00 F0 05 FF 
35dcc     00 FA 45 F5 | 	or	result1, ##199229440
35dd0     04 12 06 F1 | 	add	arg01, #4
35dd4     09 FB 61 FC | 	wrlong	result1, arg01
35dd8     F2 FA 01 F6 | 	mov	result1, objptr
35ddc     00 F8 05 FF 
35de0     00 FA 45 F5 | 	or	result1, ##200278016
35de4     04 12 06 F1 | 	add	arg01, #4
35de8     09 FB 61 FC | 	wrlong	result1, arg01
35dec     F2 FA 01 F6 | 	mov	result1, objptr
35df0     3A FA 25 F4 | 	bith	result1, #58
35df4     04 12 06 F1 | 	add	arg01, #4
35df8     09 FB 61 FC | 	wrlong	result1, arg01
35dfc     F2 FA 01 F6 | 	mov	result1, objptr
35e00     00 08 06 FF 
35e04     00 FA 45 F5 | 	or	result1, ##202375168
35e08     04 12 06 F1 | 	add	arg01, #4
35e0c     09 FB 61 FC | 	wrlong	result1, arg01
35e10     F2 FA 01 F6 | 	mov	result1, objptr
35e14     00 10 06 FF 
35e18     00 FA 45 F5 | 	or	result1, ##203423744
35e1c     04 12 06 F1 | 	add	arg01, #4
35e20     09 FB 61 FC | 	wrlong	result1, arg01
35e24     F2 FA 01 F6 | 	mov	result1, objptr
35e28     00 18 06 FF 
35e2c     00 FA 45 F5 | 	or	result1, ##204472320
35e30     04 12 06 F1 | 	add	arg01, #4
35e34     09 FB 61 FC | 	wrlong	result1, arg01
35e38     F2 FA 01 F6 | 	mov	result1, objptr
35e3c     00 20 06 FF 
35e40     00 FA 45 F5 | 	or	result1, ##205520896
35e44     04 12 06 F1 | 	add	arg01, #4
35e48     09 FB 61 FC | 	wrlong	result1, arg01
35e4c     4C 12 86 F1 | 	sub	arg01, #76
35e50                 | ' 
35e50                 | '     v->close = &v_close;
35e50                 | '     v->read = &v_read;
35e50                 | '     v->write = &v_write;
35e50                 | '     v->lseek = &v_lseek;
35e50                 | '     v->ioctl = &v_ioctl;
35e50                 | '     v->flush = 0;
35e50                 | '     v->vfs_data = ptr;
35e50                 | '     v->reserved = 0;
35e50                 | ' 
35e50                 | '     v->open = &v_open;
35e50                 | '     v->creat = &v_creat;
35e50                 | '     v->opendir = &v_opendir;
35e50                 | '     v->closedir = &v_closedir;
35e50                 | '     v->readdir = &v_readdir;
35e50                 | '     v->stat = &v_stat;
35e50                 | ' 
35e50                 | '     v->mkdir = &v_mkdir;
35e50                 | '     v->rmdir = &v_rmdir;
35e50                 | ' 
35e50                 | '     v->remove = &v_remove;
35e50                 | '     v->rename = &v_rename;
35e50                 | ' 
35e50                 | '     v->init = &v_init;
35e50                 | '     v->deinit = &v_deinit;
35e50                 | ' 
35e50                 | '     return v;
35e50     09 FB 01 F6 | 	mov	result1, arg01
35e54     A7 F0 03 F6 | 	mov	ptra, fp
35e58     B2 00 A0 FD | 	call	#popregs_
35e5c                 | _fatfs_cc_get_vfs_ret
35e5c     2D 00 64 FD | 	ret
35e60                 | 
35e60                 | _fatfs_cc_xmit_mmc_1195
35e60     01 00 00 FF 
35e64     10 E4 05 F1 | 	add	objptr, ##528
35e68     F2 00 02 FB | 	rdlong	_var01, objptr
35e6c     08 E4 05 F1 | 	add	objptr, #8
35e70     F2 02 02 FB | 	rdlong	_var02, objptr
35e74     01 00 00 FF 
35e78     18 E4 85 F1 | 	sub	objptr, ##536
35e7c     40 02 62 FD | 	dirl	_var02
35e80     28 02 64 FD | 	setq	#1
35e84     09 05 02 FB | 	rdlong	_var03, arg01
35e88     69 04 62 FD | 	rev	_var03
35e8c     1B 04 FE F9 | 	movbyts	_var03, #27
35e90     01 05 22 FC | 	wypin	_var03, _var02
35e94     0A 05 02 F6 | 	mov	_var03, arg02
35e98     02 14 4E F0 | 	shr	arg02, #2 wz
35e9c     03 04 66 F0 | 	shl	_var03, #3
35ea0     00 05 22 FC | 	wypin	_var03, _var01
35ea4     41 02 62 FD | 	dirh	_var02
35ea8     08 12 06 F1 | 	add	arg01, #8
35eac     69 06 62 FD | 	rev	_var04
35eb0     1B 06 FE F9 | 	movbyts	_var04, #27
35eb4                 | LR__5260
35eb4     01 07 22 5C |  if_ne	wypin	_var04, _var02
35eb8     09 07 02 5B |  if_ne	rdlong	_var04, arg01
35ebc     04 12 06 51 |  if_ne	add	arg01, #4
35ec0     69 06 62 5D |  if_ne	rev	_var04
35ec4     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
35ec8                 | LR__5261
35ec8     40 02 72 5D |  if_ne	testp	_var02 wc
35ecc     F8 FF 9F 1D |  if_a	jmp	#LR__5261
35ed0     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5260
35ed4                 | LR__5262
35ed4     40 00 72 FD | 	testp	_var01 wc
35ed8     F8 FF 9F 3D |  if_ae	jmp	#LR__5262
35edc     40 02 62 FD | 	dirl	_var02
35ee0     FF FF FF FF 
35ee4     01 FF 2B FC | 	wypin	##-1, _var02
35ee8     41 02 62 FD | 	dirh	_var02
35eec                 | _fatfs_cc_xmit_mmc_1195_ret
35eec     2D 00 64 FD | 	ret
35ef0                 | 
35ef0                 | _fatfs_cc_rcvr_mmc_1202
35ef0     01 00 00 FF 
35ef4     10 E4 05 F1 | 	add	objptr, ##528
35ef8     F2 00 02 FB | 	rdlong	_var01, objptr
35efc     0C E4 05 F1 | 	add	objptr, #12
35f00     F2 02 02 FB | 	rdlong	_var02, objptr
35f04     01 00 00 FF 
35f08     1C E4 85 F1 | 	sub	objptr, ##540
35f0c     01 03 08 FC | 	akpin	_var02
35f10     0A 05 0A F6 | 	mov	_var03, arg02 wz
35f14     02 04 4E F0 | 	shr	_var03, #2 wz
35f18     30 00 90 AD |  if_e	jmp	#LR__5272
35f1c     02 07 02 F6 | 	mov	_var04, _var03
35f20     05 06 66 F0 | 	shl	_var04, #5
35f24     00 07 22 FC | 	wypin	_var04, _var01
35f28     01 7F 18 FC | 	wxpin	#63, _var02
35f2c                 | LR__5270
35f2c                 | LR__5271
35f2c     40 02 72 FD | 	testp	_var02 wc
35f30     F8 FF 9F 3D |  if_ae	jmp	#LR__5271
35f34     01 07 8A FA | 	rdpin	_var04, _var02
35f38     69 06 62 FD | 	rev	_var04
35f3c     1B 06 FE F9 | 	movbyts	_var04, #27
35f40     09 07 62 FC | 	wrlong	_var04, arg01
35f44     04 12 06 F1 | 	add	arg01, #4
35f48     F8 05 6E FB | 	djnz	_var03, #LR__5270
35f4c                 | LR__5272
35f4c     03 14 0E F5 | 	and	arg02, #3 wz
35f50     24 00 90 AD |  if_e	jmp	#LR__5275
35f54     01 4F 18 FC | 	wxpin	#39, _var02
35f58                 | LR__5273
35f58     00 11 28 FC | 	wypin	#8, _var01
35f5c                 | LR__5274
35f5c     40 02 72 FD | 	testp	_var02 wc
35f60     F8 FF 9F 3D |  if_ae	jmp	#LR__5274
35f64     01 07 8A FA | 	rdpin	_var04, _var02
35f68     69 06 62 FD | 	rev	_var04
35f6c     09 07 42 FC | 	wrbyte	_var04, arg01
35f70     01 12 06 F1 | 	add	arg01, #1
35f74     F8 15 6E FB | 	djnz	arg02, #LR__5273
35f78                 | LR__5275
35f78                 | _fatfs_cc_rcvr_mmc_1202_ret
35f78     2D 00 64 FD | 	ret
35f7c                 | 
35f7c                 | _fatfs_cc_wait_ready_1206
35f7c     01 4A 05 F6 | 	mov	COUNT_, #1
35f80     A8 00 A0 FD | 	call	#pushregs_
35f84     10 F0 07 F1 | 	add	ptra, #16
35f88     1A FA 61 FD | 	getct	result1
35f8c     08 4E 05 F1 | 	add	fp, #8
35f90     A7 FA 61 FC | 	wrlong	result1, fp
35f94     14 26 06 FB | 	rdlong	local01, #20
35f98     01 26 46 F0 | 	shr	local01, #1
35f9c     04 4E 05 F1 | 	add	fp, #4
35fa0     A7 26 62 FC | 	wrlong	local01, fp
35fa4     0C 4E 85 F1 | 	sub	fp, #12
35fa8                 | ' {
35fa8                 | ' 	BYTE d;
35fa8                 | ' 	UINT tmr, tmout;
35fa8                 | ' 
35fa8                 | ' 	tmr = _cnt();
35fa8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
35fa8                 | ' 	for(;;) {
35fa8                 | LR__5280
35fa8     04 4E 05 F1 | 	add	fp, #4
35fac     A7 12 02 F6 | 	mov	arg01, fp
35fb0     04 4E 85 F1 | 	sub	fp, #4
35fb4     01 14 06 F6 | 	mov	arg02, #1
35fb8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1202
35fbc     04 4E 05 F1 | 	add	fp, #4
35fc0     A7 26 C2 FA | 	rdbyte	local01, fp
35fc4     04 4E 85 F1 | 	sub	fp, #4
35fc8     FF 26 0E F2 | 	cmp	local01, #255 wz
35fcc     01 FA 05 A6 |  if_e	mov	result1, #1
35fd0     28 00 90 AD |  if_e	jmp	#LR__5281
35fd4     1A FA 61 FD | 	getct	result1
35fd8     08 4E 05 F1 | 	add	fp, #8
35fdc     A7 26 02 FB | 	rdlong	local01, fp
35fe0     13 FB 81 F1 | 	sub	result1, local01
35fe4     04 4E 05 F1 | 	add	fp, #4
35fe8     A7 26 02 FB | 	rdlong	local01, fp
35fec     0C 4E 85 F1 | 	sub	fp, #12
35ff0     13 FB 11 F2 | 	cmp	result1, local01 wc
35ff4     00 FA 05 36 |  if_ae	mov	result1, #0
35ff8     AC FF 9F CD |  if_b	jmp	#LR__5280
35ffc                 | LR__5281
35ffc     A7 F0 03 F6 | 	mov	ptra, fp
36000     B2 00 A0 FD | 	call	#popregs_
36004                 | _fatfs_cc_wait_ready_1206_ret
36004     2D 00 64 FD | 	ret
36008                 | 
36008                 | _fatfs_cc_deselect_1212
36008     00 4A 05 F6 | 	mov	COUNT_, #0
3600c     A8 00 A0 FD | 	call	#pushregs_
36010     14 F0 07 F1 | 	add	ptra, #20
36014     01 00 00 FF 
36018     14 E4 05 F1 | 	add	objptr, ##532
3601c     F2 14 02 FB | 	rdlong	arg02, objptr
36020     04 4E 05 F1 | 	add	fp, #4
36024     A7 14 62 FC | 	wrlong	arg02, fp
36028     04 E4 85 F1 | 	sub	objptr, #4
3602c     F2 14 02 FB | 	rdlong	arg02, objptr
36030     04 4E 05 F1 | 	add	fp, #4
36034     A7 14 62 FC | 	wrlong	arg02, fp
36038     08 E4 05 F1 | 	add	objptr, #8
3603c     F2 14 02 FB | 	rdlong	arg02, objptr
36040     04 4E 05 F1 | 	add	fp, #4
36044     A7 14 62 FC | 	wrlong	arg02, fp
36048     04 E4 05 F1 | 	add	objptr, #4
3604c     F2 14 02 FB | 	rdlong	arg02, objptr
36050     01 00 00 FF 
36054     1C E4 85 F1 | 	sub	objptr, ##540
36058     04 4E 05 F1 | 	add	fp, #4
3605c     A7 14 62 FC | 	wrlong	arg02, fp
36060     0C 4E 85 F1 | 	sub	fp, #12
36064     A7 12 02 FB | 	rdlong	arg01, fp
36068     04 4E 85 F1 | 	sub	fp, #4
3606c     59 12 62 FD | 	drvh	arg01
36070     1F 20 64 FD | 	waitx	#16
36074     A7 12 02 F6 | 	mov	arg01, fp
36078     01 14 06 F6 | 	mov	arg02, #1
3607c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1202
36080     A7 F0 03 F6 | 	mov	ptra, fp
36084     B2 00 A0 FD | 	call	#popregs_
36088                 | _fatfs_cc_deselect_1212_ret
36088     2D 00 64 FD | 	ret
3608c                 | 
3608c                 | _fatfs_cc_select_1216
3608c     00 4A 05 F6 | 	mov	COUNT_, #0
36090     A8 00 A0 FD | 	call	#pushregs_
36094     10 F0 07 F1 | 	add	ptra, #16
36098     01 00 00 FF 
3609c     14 E4 05 F1 | 	add	objptr, ##532
360a0     F2 14 02 FB | 	rdlong	arg02, objptr
360a4     08 4E 05 F1 | 	add	fp, #8
360a8     A7 14 62 FC | 	wrlong	arg02, fp
360ac     08 E4 05 F1 | 	add	objptr, #8
360b0     F2 12 02 FB | 	rdlong	arg01, objptr
360b4     01 00 00 FF 
360b8     1C E4 85 F1 | 	sub	objptr, ##540
360bc     04 4E 05 F1 | 	add	fp, #4
360c0     A7 12 62 FC | 	wrlong	arg01, fp
360c4     50 12 62 FD | 	fltl	arg01
360c8     04 4E 85 F1 | 	sub	fp, #4
360cc     A7 12 02 FB | 	rdlong	arg01, fp
360d0     58 12 62 FD | 	drvl	arg01
360d4     1F 20 64 FD | 	waitx	#16
360d8     04 4E 05 F1 | 	add	fp, #4
360dc     A7 12 02 FB | 	rdlong	arg01, fp
360e0     41 12 62 FD | 	dirh	arg01
360e4     08 4E 85 F1 | 	sub	fp, #8
360e8     A7 12 02 F6 | 	mov	arg01, fp
360ec     04 4E 85 F1 | 	sub	fp, #4
360f0     01 14 06 F6 | 	mov	arg02, #1
360f4     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1202
360f8     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1206
360fc     00 FA 0D F2 | 	cmp	result1, #0 wz
36100     01 FA 05 56 |  if_ne	mov	result1, #1
36104     08 00 90 5D |  if_ne	jmp	#LR__5290
36108     FC FE BF FD | 	call	#_fatfs_cc_deselect_1212
3610c                 | ' 
3610c                 | ' 	deselect();
3610c                 | ' 	return 0;
3610c     00 FA 05 F6 | 	mov	result1, #0
36110                 | LR__5290
36110     A7 F0 03 F6 | 	mov	ptra, fp
36114     B2 00 A0 FD | 	call	#popregs_
36118                 | _fatfs_cc_select_1216_ret
36118     2D 00 64 FD | 	ret
3611c                 | 
3611c                 | _fatfs_cc_rcvr_datablock_1220
3611c     01 4A 05 F6 | 	mov	COUNT_, #1
36120     A8 00 A0 FD | 	call	#pushregs_
36124     18 F0 07 F1 | 	add	ptra, #24
36128     04 4E 05 F1 | 	add	fp, #4
3612c     A7 12 62 FC | 	wrlong	arg01, fp
36130     04 4E 05 F1 | 	add	fp, #4
36134     A7 14 62 FC | 	wrlong	arg02, fp
36138     1A FA 61 FD | 	getct	result1
3613c     08 4E 05 F1 | 	add	fp, #8
36140     A7 FA 61 FC | 	wrlong	result1, fp
36144     14 26 06 FB | 	rdlong	local01, #20
36148     03 26 46 F0 | 	shr	local01, #3
3614c     04 4E 05 F1 | 	add	fp, #4
36150     A7 26 62 FC | 	wrlong	local01, fp
36154     14 4E 85 F1 | 	sub	fp, #20
36158                 | ' 	BYTE *buff,
36158                 | ' 	UINT btr
36158                 | ' )
36158                 | ' {
36158                 | ' 	BYTE d[2];
36158                 | ' 	UINT tmr, tmout;
36158                 | ' 
36158                 | ' 	tmr = _cnt();
36158                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
36158                 | ' 	for(;;) {
36158                 | LR__5300
36158     0C 4E 05 F1 | 	add	fp, #12
3615c     A7 12 02 F6 | 	mov	arg01, fp
36160     0C 4E 85 F1 | 	sub	fp, #12
36164     01 14 06 F6 | 	mov	arg02, #1
36168     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1202
3616c     0C 4E 05 F1 | 	add	fp, #12
36170     A7 26 C2 FA | 	rdbyte	local01, fp
36174     0C 4E 85 F1 | 	sub	fp, #12
36178     FF 26 0E F2 | 	cmp	local01, #255 wz
3617c     28 00 90 5D |  if_ne	jmp	#LR__5301
36180     1A FA 61 FD | 	getct	result1
36184     FD 26 02 F6 | 	mov	local01, result1
36188     10 4E 05 F1 | 	add	fp, #16
3618c     A7 14 02 FB | 	rdlong	arg02, fp
36190     0A 27 82 F1 | 	sub	local01, arg02
36194     04 4E 05 F1 | 	add	fp, #4
36198     A7 14 02 FB | 	rdlong	arg02, fp
3619c     14 4E 85 F1 | 	sub	fp, #20
361a0     0A 27 12 F2 | 	cmp	local01, arg02 wc
361a4     B0 FF 9F CD |  if_b	jmp	#LR__5300
361a8                 | LR__5301
361a8     0C 4E 05 F1 | 	add	fp, #12
361ac     A7 26 C2 FA | 	rdbyte	local01, fp
361b0     0C 4E 85 F1 | 	sub	fp, #12
361b4     FE 26 0E F2 | 	cmp	local01, #254 wz
361b8     00 FA 05 56 |  if_ne	mov	result1, #0
361bc     30 00 90 5D |  if_ne	jmp	#LR__5302
361c0     04 4E 05 F1 | 	add	fp, #4
361c4     A7 12 02 FB | 	rdlong	arg01, fp
361c8     04 4E 05 F1 | 	add	fp, #4
361cc     A7 14 02 FB | 	rdlong	arg02, fp
361d0     08 4E 85 F1 | 	sub	fp, #8
361d4     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1202
361d8     0C 4E 05 F1 | 	add	fp, #12
361dc     A7 12 02 F6 | 	mov	arg01, fp
361e0     0C 4E 85 F1 | 	sub	fp, #12
361e4     02 14 06 F6 | 	mov	arg02, #2
361e8     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1202
361ec                 | ' 
361ec                 | ' 	rcvr_mmc(buff, btr);
361ec                 | ' 	rcvr_mmc(d, 2);
361ec                 | ' 
361ec                 | ' 	return 1;
361ec     01 FA 05 F6 | 	mov	result1, #1
361f0                 | LR__5302
361f0     A7 F0 03 F6 | 	mov	ptra, fp
361f4     B2 00 A0 FD | 	call	#popregs_
361f8                 | _fatfs_cc_rcvr_datablock_1220_ret
361f8     2D 00 64 FD | 	ret
361fc                 | 
361fc                 | _fatfs_cc_xmit_datablock_1222
361fc     00 4A 05 F6 | 	mov	COUNT_, #0
36200     A8 00 A0 FD | 	call	#pushregs_
36204     10 F0 07 F1 | 	add	ptra, #16
36208     04 4E 05 F1 | 	add	fp, #4
3620c     A7 12 62 FC | 	wrlong	arg01, fp
36210     04 4E 05 F1 | 	add	fp, #4
36214     A7 14 42 FC | 	wrbyte	arg02, fp
36218     08 4E 85 F1 | 	sub	fp, #8
3621c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1206
36220     00 FA 0D F2 | 	cmp	result1, #0 wz
36224     00 FA 05 A6 |  if_e	mov	result1, #0
36228     90 00 90 AD |  if_e	jmp	#LR__5311
3622c     08 4E 05 F1 | 	add	fp, #8
36230     A7 14 C2 FA | 	rdbyte	arg02, fp
36234     04 4E 05 F1 | 	add	fp, #4
36238     A7 14 42 FC | 	wrbyte	arg02, fp
3623c     A7 12 02 F6 | 	mov	arg01, fp
36240     0C 4E 85 F1 | 	sub	fp, #12
36244     01 14 06 F6 | 	mov	arg02, #1
36248     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1195
3624c     08 4E 05 F1 | 	add	fp, #8
36250     A7 14 C2 FA | 	rdbyte	arg02, fp
36254     08 4E 85 F1 | 	sub	fp, #8
36258     FD 14 0E F2 | 	cmp	arg02, #253 wz
3625c     58 00 90 AD |  if_e	jmp	#LR__5310
36260     04 4E 05 F1 | 	add	fp, #4
36264     A7 12 02 FB | 	rdlong	arg01, fp
36268     04 4E 85 F1 | 	sub	fp, #4
3626c     09 14 C6 F9 | 	decod	arg02, #9
36270     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1195
36274     0C 4E 05 F1 | 	add	fp, #12
36278     A7 12 02 F6 | 	mov	arg01, fp
3627c     0C 4E 85 F1 | 	sub	fp, #12
36280     02 14 06 F6 | 	mov	arg02, #2
36284     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1202
36288     0C 4E 05 F1 | 	add	fp, #12
3628c     A7 12 02 F6 | 	mov	arg01, fp
36290     0C 4E 85 F1 | 	sub	fp, #12
36294     01 14 06 F6 | 	mov	arg02, #1
36298     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1202
3629c     0C 4E 05 F1 | 	add	fp, #12
362a0     A7 14 C2 FA | 	rdbyte	arg02, fp
362a4     0C 4E 85 F1 | 	sub	fp, #12
362a8     1F 14 06 F5 | 	and	arg02, #31
362ac     05 14 0E F2 | 	cmp	arg02, #5 wz
362b0                 | ' 			return 0;
362b0     00 FA 05 56 |  if_ne	mov	result1, #0
362b4     04 00 90 5D |  if_ne	jmp	#LR__5311
362b8                 | LR__5310
362b8                 | ' 	}
362b8                 | ' 
362b8                 | ' 	return 1;
362b8     01 FA 05 F6 | 	mov	result1, #1
362bc                 | LR__5311
362bc     A7 F0 03 F6 | 	mov	ptra, fp
362c0     B2 00 A0 FD | 	call	#popregs_
362c4                 | _fatfs_cc_xmit_datablock_1222_ret
362c4     2D 00 64 FD | 	ret
362c8                 | 
362c8                 | _fatfs_cc_send_cmd_1226
362c8     01 4A 05 F6 | 	mov	COUNT_, #1
362cc     A8 00 A0 FD | 	call	#pushregs_
362d0     1C F0 07 F1 | 	add	ptra, #28
362d4                 | _fatfs_cc_send_cmd_1226_enter
362d4     04 4E 05 F1 | 	add	fp, #4
362d8     A7 12 42 FC | 	wrbyte	arg01, fp
362dc     04 4E 05 F1 | 	add	fp, #4
362e0     A7 14 62 FC | 	wrlong	arg02, fp
362e4     04 4E 85 F1 | 	sub	fp, #4
362e8     A7 FA C1 FA | 	rdbyte	result1, fp
362ec     04 4E 85 F1 | 	sub	fp, #4
362f0     80 FA CD F7 | 	test	result1, #128 wz
362f4     44 00 90 AD |  if_e	jmp	#LR__5320
362f8     04 4E 05 F1 | 	add	fp, #4
362fc     A7 14 C2 FA | 	rdbyte	arg02, fp
36300     7F 14 06 F5 | 	and	arg02, #127
36304     A7 14 42 FC | 	wrbyte	arg02, fp
36308     04 4E 85 F1 | 	sub	fp, #4
3630c     37 12 06 F6 | 	mov	arg01, #55
36310     00 14 06 F6 | 	mov	arg02, #0
36314     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1226
36318     0C 4E 05 F1 | 	add	fp, #12
3631c     A7 FA 41 FC | 	wrbyte	result1, fp
36320     A7 14 C2 FA | 	rdbyte	arg02, fp
36324     0C 4E 85 F1 | 	sub	fp, #12
36328     02 14 16 F2 | 	cmp	arg02, #2 wc
3632c     0C 4E 05 31 |  if_ae	add	fp, #12
36330     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
36334     0C 4E 85 31 |  if_ae	sub	fp, #12
36338     6C 01 90 3D |  if_ae	jmp	#LR__5324
3633c                 | LR__5320
3633c     04 4E 05 F1 | 	add	fp, #4
36340     A7 14 C2 FA | 	rdbyte	arg02, fp
36344     04 4E 85 F1 | 	sub	fp, #4
36348     0C 14 0E F2 | 	cmp	arg02, #12 wz
3634c     14 00 90 AD |  if_e	jmp	#LR__5321
36350     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1212
36354     34 FD BF FD | 	call	#_fatfs_cc_select_1216
36358     00 FA 0D F2 | 	cmp	result1, #0 wz
3635c     FF FA 05 A6 |  if_e	mov	result1, #255
36360     44 01 90 AD |  if_e	jmp	#LR__5324
36364                 | LR__5321
36364     04 4E 05 F1 | 	add	fp, #4
36368     A7 14 C2 FA | 	rdbyte	arg02, fp
3636c     40 FA 05 F6 | 	mov	result1, #64
36370     0A FB 41 F5 | 	or	result1, arg02
36374     10 4E 05 F1 | 	add	fp, #16
36378     A7 FA 41 FC | 	wrbyte	result1, fp
3637c     0C 4E 85 F1 | 	sub	fp, #12
36380     A7 FA 01 FB | 	rdlong	result1, fp
36384     18 FA 45 F0 | 	shr	result1, #24
36388     0D 4E 05 F1 | 	add	fp, #13
3638c     A7 FA 41 FC | 	wrbyte	result1, fp
36390     0D 4E 85 F1 | 	sub	fp, #13
36394     A7 FA 01 FB | 	rdlong	result1, fp
36398     10 FA 45 F0 | 	shr	result1, #16
3639c     0E 4E 05 F1 | 	add	fp, #14
363a0     A7 FA 41 FC | 	wrbyte	result1, fp
363a4     0E 4E 85 F1 | 	sub	fp, #14
363a8     A7 FA 01 FB | 	rdlong	result1, fp
363ac     08 FA 45 F0 | 	shr	result1, #8
363b0     0F 4E 05 F1 | 	add	fp, #15
363b4     A7 FA 41 FC | 	wrbyte	result1, fp
363b8     0F 4E 85 F1 | 	sub	fp, #15
363bc     A7 FA 01 FB | 	rdlong	result1, fp
363c0     10 4E 05 F1 | 	add	fp, #16
363c4     A7 FA 41 FC | 	wrbyte	result1, fp
363c8     0C 4E 85 F1 | 	sub	fp, #12
363cc     A7 02 48 FC | 	wrbyte	#1, fp
363d0     08 4E 85 F1 | 	sub	fp, #8
363d4     A7 FA C9 FA | 	rdbyte	result1, fp wz
363d8     04 4E 85 F1 | 	sub	fp, #4
363dc     0C 4E 05 A1 |  if_e	add	fp, #12
363e0     A7 2A 49 AC |  if_e	wrbyte	#149, fp
363e4     0C 4E 85 A1 |  if_e	sub	fp, #12
363e8     04 4E 05 F1 | 	add	fp, #4
363ec     A7 FA C1 FA | 	rdbyte	result1, fp
363f0     04 4E 85 F1 | 	sub	fp, #4
363f4     08 FA 0D F2 | 	cmp	result1, #8 wz
363f8     0C 4E 05 A1 |  if_e	add	fp, #12
363fc     A7 0E 49 AC |  if_e	wrbyte	#135, fp
36400     0C 4E 85 A1 |  if_e	sub	fp, #12
36404     0C 4E 05 F1 | 	add	fp, #12
36408     A7 14 C2 FA | 	rdbyte	arg02, fp
3640c     0D 4E 05 F1 | 	add	fp, #13
36410     A7 14 42 FC | 	wrbyte	arg02, fp
36414     05 4E 85 F1 | 	sub	fp, #5
36418     A7 12 02 F6 | 	mov	arg01, fp
3641c     14 4E 85 F1 | 	sub	fp, #20
36420     06 14 06 F6 | 	mov	arg02, #6
36424     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1195
36428     04 4E 05 F1 | 	add	fp, #4
3642c     A7 26 C2 FA | 	rdbyte	local01, fp
36430     04 4E 85 F1 | 	sub	fp, #4
36434     0C 26 0E F2 | 	cmp	local01, #12 wz
36438     10 4E 05 A1 |  if_e	add	fp, #16
3643c     A7 12 02 A6 |  if_e	mov	arg01, fp
36440     10 4E 85 A1 |  if_e	sub	fp, #16
36444     01 14 06 A6 |  if_e	mov	arg02, #1
36448     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1202
3644c     0C 4E 05 F1 | 	add	fp, #12
36450     A7 14 48 FC | 	wrbyte	#10, fp
36454     0C 4E 85 F1 | 	sub	fp, #12
36458                 | ' 	n = 10;
36458                 | ' 	do
36458                 | LR__5322
36458     10 4E 05 F1 | 	add	fp, #16
3645c     A7 12 02 F6 | 	mov	arg01, fp
36460     10 4E 85 F1 | 	sub	fp, #16
36464     01 14 06 F6 | 	mov	arg02, #1
36468     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1202
3646c     10 4E 05 F1 | 	add	fp, #16
36470     A7 26 C2 FA | 	rdbyte	local01, fp
36474     10 4E 85 F1 | 	sub	fp, #16
36478     80 26 CE F7 | 	test	local01, #128 wz
3647c     1C 00 90 AD |  if_e	jmp	#LR__5323
36480     0C 4E 05 F1 | 	add	fp, #12
36484     A7 26 C2 FA | 	rdbyte	local01, fp
36488     01 26 86 F1 | 	sub	local01, #1
3648c     A7 26 42 FC | 	wrbyte	local01, fp
36490     A7 26 CA FA | 	rdbyte	local01, fp wz
36494     0C 4E 85 F1 | 	sub	fp, #12
36498     BC FF 9F 5D |  if_ne	jmp	#LR__5322
3649c                 | LR__5323
3649c                 | ' 
3649c                 | ' 	return d;
3649c     10 4E 05 F1 | 	add	fp, #16
364a0     A7 FA C1 FA | 	rdbyte	result1, fp
364a4     10 4E 85 F1 | 	sub	fp, #16
364a8                 | LR__5324
364a8     A7 F0 03 F6 | 	mov	ptra, fp
364ac     B2 00 A0 FD | 	call	#popregs_
364b0                 | _fatfs_cc_send_cmd_1226_ret
364b0     2D 00 64 FD | 	ret
364b4                 | 
364b4                 | _fatfs_cc_disk_deinitialize
364b4     03 4A 05 F6 | 	mov	COUNT_, #3
364b8     A8 00 A0 FD | 	call	#pushregs_
364bc     00 12 4E F2 | 	cmps	arg01, #0 wz
364c0     01 00 00 FF 
364c4     14 E4 05 F1 | 	add	objptr, ##532
364c8     F2 12 02 FB | 	rdlong	arg01, objptr
364cc     04 E4 85 F1 | 	sub	objptr, #4
364d0     F2 26 02 FB | 	rdlong	local01, objptr
364d4     08 E4 05 F1 | 	add	objptr, #8
364d8     F2 28 02 FB | 	rdlong	local02, objptr
364dc     04 E4 05 F1 | 	add	objptr, #4
364e0     F2 2A 02 FB | 	rdlong	local03, objptr
364e4     01 00 00 FF 
364e8     1C E4 85 F1 | 	sub	objptr, ##540
364ec                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
364ec                 | '         return RES_NOTRDY;
364ec     03 FA 05 56 |  if_ne	mov	result1, #3
364f0     2C 00 90 5D |  if_ne	jmp	#LR__5330
364f4     50 12 62 FD | 	fltl	arg01
364f8     09 01 08 FC | 	wrpin	#0, arg01
364fc     50 26 62 FD | 	fltl	local01
36500     13 01 08 FC | 	wrpin	#0, local01
36504     50 28 62 FD | 	fltl	local02
36508     14 01 08 FC | 	wrpin	#0, local02
3650c     50 2A 62 FD | 	fltl	local03
36510     15 01 08 FC | 	wrpin	#0, local03
36514     0A 12 06 F6 | 	mov	arg01, #10
36518     44 0E BF FD | 	call	#__system___waitms
3651c                 | '     }
3651c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
3651c                 | '     _pinclear(PIN_SS);
3651c                 | '     _pinclear(PIN_CLK);
3651c                 | '     _pinclear(PIN_DI);
3651c                 | '     _pinclear(PIN_DO);
3651c                 | ' 
3651c                 | '     _waitms(10);
3651c                 | ' 
3651c                 | '     return 0;
3651c     00 FA 05 F6 | 	mov	result1, #0
36520                 | LR__5330
36520     A7 F0 03 F6 | 	mov	ptra, fp
36524     B2 00 A0 FD | 	call	#popregs_
36528                 | _fatfs_cc_disk_deinitialize_ret
36528     2D 00 64 FD | 	ret
3652c                 | 
3652c                 | _fatfs_cc_gettimeofday
3652c     04 4A 05 F6 | 	mov	COUNT_, #4
36530     A8 00 A0 FD | 	call	#pushregs_
36534     09 27 02 F6 | 	mov	local01, arg01
36538     90 09 BF FD | 	call	#__system___getus
3653c     FD 12 02 F6 | 	mov	arg01, result1
36540     02 00 00 FF 
36544     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
36548     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
3654c     09 FB 01 F6 | 	mov	result1, arg01
36550     14 FB 81 F1 | 	sub	result1, local02
36554     A1 07 00 FF 
36558     40 FA 15 FD | 	qdiv	result1, ##1000000
3655c     02 00 00 FF 
36560     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
36564     18 28 62 FD | 	getqx	local02
36568     A1 07 00 FF 
3656c     40 FA 15 FD | 	qdiv	result1, ##1000000
36570     00 28 0E F2 | 	cmp	local02, #0 wz
36574     19 2A 62 FD | 	getqy	local03
36578     28 00 90 AD |  if_e	jmp	#LR__5340
3657c     02 00 00 FF 
36580     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
36584     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
36588     14 2D 02 F1 | 	add	local04, local02
3658c     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
36590     15 13 82 F1 | 	sub	arg01, local03
36594     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
36598     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
3659c     02 00 00 FF 
365a0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
365a4                 | LR__5340
365a4     02 00 00 FF 
365a8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
365ac     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
365b0     02 00 00 FF 
365b4     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
365b8     13 2D 62 FC | 	wrlong	local04, local01
365bc     04 26 06 F1 | 	add	local01, #4
365c0     13 2B 62 FC | 	wrlong	local03, local01
365c4                 | '         lastsec += secs;
365c4                 | '         lastus = now - leftover;
365c4                 | '     }
365c4                 | '     tv->tv_sec = lastsec;
365c4                 | '     tv->tv_usec = leftover;
365c4                 | '     return 0;
365c4     00 FA 05 F6 | 	mov	result1, #0
365c8     A7 F0 03 F6 | 	mov	ptra, fp
365cc     B2 00 A0 FD | 	call	#popregs_
365d0                 | _fatfs_cc_gettimeofday_ret
365d0     2D 00 64 FD | 	ret
365d4                 | 
365d4                 | _fatfs_cc__is_leap_year
365d4     09 FB 51 F6 | 	abs	result1, arg01 wc
365d8     03 FA 05 F5 | 	and	result1, #3
365dc     FD FA 89 F6 | 	negc	result1, result1 wz
365e0     38 00 90 5D |  if_ne	jmp	#LR__5351
365e4     09 FB 51 F6 | 	abs	result1, arg01 wc
365e8     64 FA 15 FD | 	qdiv	result1, #100
365ec     19 FA 61 FD | 	getqy	result1
365f0     FD FA 89 F6 | 	negc	result1, result1 wz
365f4     1C 00 90 5D |  if_ne	jmp	#LR__5350
365f8     09 FB 51 F6 | 	abs	result1, arg01 wc
365fc     90 FB 15 FD | 	qdiv	result1, #400
36600                 | '       return (0 == y % 400);
36600     00 FA 05 F6 | 	mov	result1, #0
36604     19 00 62 FD | 	getqy	_var01
36608     00 01 8A F6 | 	negc	_var01, _var01 wz
3660c     01 FA 05 A6 |  if_e	mov	result1, #1
36610     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
36614                 | LR__5350
36614                 | '     return 1;
36614     01 FA 05 F6 | 	mov	result1, #1
36618     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
3661c                 | LR__5351
3661c                 | '   }
3661c                 | '   return 0;
3661c     00 FA 05 F6 | 	mov	result1, #0
36620                 | _fatfs_cc__is_leap_year_ret
36620     2D 00 64 FD | 	ret
36624                 | 
36624                 | _fatfs_cc___tzoffset
36624     09 01 0A F6 | 	mov	_var01, arg01 wz
36628     FF FF FF FF 
3662c     0A FF 6B FC | 	wrlong	##-1, arg02
36630     01 02 06 F6 | 	mov	_var02, #1
36634     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
36638                 | '                 return 0;
36638     00 FA 05 A6 |  if_e	mov	result1, #0
3663c     94 02 90 AD |  if_e	jmp	#LR__5377
36640     0A 01 68 FC | 	wrlong	#0, arg02
36644     02 00 00 FF 
36648     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3664c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
36650                 | ' 
36650                 | '        *hasdst = 0;
36650                 | ' 
36650                 | ' 	n = stdname;
36650                 | '         while (*s && isalpha(*s)) {
36650     02 00 00 FF 
36654     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
36658     97 28 48 FB | 	callpa	#(@LR__5361-@LR__5360)>>2,fcache_load_ptr_
3665c                 | LR__5360
3665c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
36660     48 00 90 AD |  if_e	jmp	#LR__5362
36664     00 13 C2 FA | 	rdbyte	arg01, _var01
36668                 | ' {
36668                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36668     80 12 36 F3 | 	fle	arg01, #128 wc
3666c                 | '     return __ctype[c];
3666c     02 00 00 FF 
36670     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36674     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36678     09 FB C1 FA | 	rdbyte	result1, arg01
3667c     02 00 00 FF 
36680     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36684     0C FA CD F7 | 	test	result1, #12 wz
36688     20 00 90 AD |  if_e	jmp	#LR__5362
3668c     00 09 02 F6 | 	mov	_var05, _var01
36690     00 0B 02 F6 | 	mov	_var06, _var01
36694     01 0A 06 F1 | 	add	_var06, #1
36698     04 0D C2 FA | 	rdbyte	_var07, _var05
3669c     05 01 02 F6 | 	mov	_var01, _var06
366a0     03 0D 42 FC | 	wrbyte	_var07, _var04
366a4     01 06 06 F1 | 	add	_var04, #1
366a8     B0 FF 9F FD | 	jmp	#LR__5360
366ac                 | LR__5361
366ac                 | LR__5362
366ac     03 01 48 FC | 	wrbyte	#0, _var04
366b0     00 0E 06 F6 | 	mov	_var08, #0
366b4     00 05 C2 FA | 	rdbyte	_var03, _var01
366b8     2D 04 0E F2 | 	cmp	_var03, #45 wz
366bc     01 02 66 A6 |  if_e	neg	_var02, #1
366c0     01 00 06 A1 |  if_e	add	_var01, #1
366c4     97 28 48 FB | 	callpa	#(@LR__5364-@LR__5363)>>2,fcache_load_ptr_
366c8                 | '                 sgn = -1;
366c8                 | '                 s++;
366c8                 | '         }
366c8                 | '         while (isdigit(*s)) {
366c8                 | LR__5363
366c8     00 13 C2 FA | 	rdbyte	arg01, _var01
366cc                 | ' {
366cc                 | '   return  (__ctype_get(c) & 0x02 ) ;
366cc     80 12 36 F3 | 	fle	arg01, #128 wc
366d0                 | '     return __ctype[c];
366d0     02 00 00 FF 
366d4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
366d8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
366dc     09 FB C1 FA | 	rdbyte	result1, arg01
366e0     02 00 00 FF 
366e4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
366e8     02 FA CD F7 | 	test	result1, #2 wz
366ec     28 00 90 AD |  if_e	jmp	#LR__5365
366f0     07 05 02 F6 | 	mov	_var03, _var08
366f4     02 04 66 F0 | 	shl	_var03, #2
366f8     07 05 02 F1 | 	add	_var03, _var08
366fc     01 04 66 F0 | 	shl	_var03, #1
36700     00 09 C2 FA | 	rdbyte	_var05, _var01
36704     30 08 86 F1 | 	sub	_var05, #48
36708     04 05 02 F1 | 	add	_var03, _var05
3670c     02 0F 02 F6 | 	mov	_var08, _var03
36710     01 00 06 F1 | 	add	_var01, #1
36714     B0 FF 9F FD | 	jmp	#LR__5363
36718                 | LR__5364
36718                 | LR__5365
36718     07 00 00 FF 
3671c     10 0E 06 FD | 	qmul	_var08, ##3600
36720     00 05 C2 FA | 	rdbyte	_var03, _var01
36724     3A 04 0E F2 | 	cmp	_var03, #58 wz
36728     18 10 62 FD | 	getqx	_var09
3672c     70 00 90 5D |  if_ne	jmp	#LR__5369
36730     00 0E 06 F6 | 	mov	_var08, #0
36734     01 00 06 F1 | 	add	_var01, #1
36738     97 28 48 FB | 	callpa	#(@LR__5367-@LR__5366)>>2,fcache_load_ptr_
3673c                 | '                 x = 0;
3673c                 | '                 s++;
3673c                 | '                 while (isdigit(*s)) {
3673c                 | LR__5366
3673c     00 13 C2 FA | 	rdbyte	arg01, _var01
36740                 | ' {
36740                 | '   return  (__ctype_get(c) & 0x02 ) ;
36740     80 12 36 F3 | 	fle	arg01, #128 wc
36744                 | '     return __ctype[c];
36744     02 00 00 FF 
36748     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3674c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36750     09 FB C1 FA | 	rdbyte	result1, arg01
36754     02 00 00 FF 
36758     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3675c     02 FA CD F7 | 	test	result1, #2 wz
36760     28 00 90 AD |  if_e	jmp	#LR__5368
36764     07 05 02 F6 | 	mov	_var03, _var08
36768     02 04 66 F0 | 	shl	_var03, #2
3676c     07 05 02 F1 | 	add	_var03, _var08
36770     01 04 66 F0 | 	shl	_var03, #1
36774     00 09 C2 FA | 	rdbyte	_var05, _var01
36778     30 08 86 F1 | 	sub	_var05, #48
3677c     04 05 02 F1 | 	add	_var03, _var05
36780     02 0F 02 F6 | 	mov	_var08, _var03
36784     01 00 06 F1 | 	add	_var01, #1
36788     B0 FF 9F FD | 	jmp	#LR__5366
3678c                 | LR__5367
3678c                 | LR__5368
3678c     07 0D 02 F6 | 	mov	_var07, _var08
36790     04 0C 66 F0 | 	shl	_var07, #4
36794     07 0D 82 F1 | 	sub	_var07, _var08
36798     02 0C 66 F0 | 	shl	_var07, #2
3679c     06 11 02 F1 | 	add	_var09, _var07
367a0                 | LR__5369
367a0     02 00 00 FF 
367a4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
367a8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
367ac     00 13 C2 FA | 	rdbyte	arg01, _var01
367b0                 | ' {
367b0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
367b0     80 12 36 F3 | 	fle	arg01, #128 wc
367b4                 | '     return __ctype[c];
367b4     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
367b8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
367bc     09 FB C1 FA | 	rdbyte	result1, arg01
367c0     02 00 00 FF 
367c4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
367c8     0C FA CD F7 | 	test	result1, #12 wz
367cc     50 00 90 AD |  if_e	jmp	#LR__5372
367d0     0A 03 68 FC | 	wrlong	#1, arg02
367d4                 | '                 *hasdst = 1;
367d4                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
367d4                 | LR__5370
367d4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
367d8     44 00 90 AD |  if_e	jmp	#LR__5371
367dc     00 13 C2 FA | 	rdbyte	arg01, _var01
367e0                 | ' {
367e0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
367e0     80 12 36 F3 | 	fle	arg01, #128 wc
367e4                 | '     return __ctype[c];
367e4     02 00 00 FF 
367e8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
367ec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
367f0     09 FB C1 FA | 	rdbyte	result1, arg01
367f4     02 00 00 FF 
367f8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
367fc     0C FA CD F7 | 	test	result1, #12 wz
36800     1C 00 90 AD |  if_e	jmp	#LR__5371
36804     00 0B 02 F6 | 	mov	_var06, _var01
36808     01 0A 06 F1 | 	add	_var06, #1
3680c     00 0D C2 FA | 	rdbyte	_var07, _var01
36810     05 01 02 F6 | 	mov	_var01, _var06
36814     03 0D 42 FC | 	wrbyte	_var07, _var04
36818     01 06 06 F1 | 	add	_var04, #1
3681c     B4 FF 9F FD | 	jmp	#LR__5370
36820                 | LR__5371
36820                 | LR__5372
36820     03 01 48 FC | 	wrbyte	#0, _var04
36824     02 00 00 FF 
36828     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3682c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36830     02 00 00 FF 
36834     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
36838     20 00 90 AD |  if_e	jmp	#LR__5373
3683c     02 00 00 FF 
36840     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36844     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36848     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
3684c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36850     02 00 00 FF 
36854     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
36858     1C 00 90 FD | 	jmp	#LR__5374
3685c                 | LR__5373
3685c     02 00 00 FF 
36860     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
36864     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36868     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
3686c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36870     02 00 00 FF 
36874     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
36878                 | LR__5374
36878     02 00 00 FF 
3687c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36880     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36884     02 00 00 FF 
36888     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
3688c     20 00 90 AD |  if_e	jmp	#LR__5375
36890     02 00 00 FF 
36894     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36898     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3689c     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
368a0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
368a4     02 00 00 FF 
368a8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
368ac     1C 00 90 FD | 	jmp	#LR__5376
368b0                 | LR__5375
368b0     02 00 00 FF 
368b4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
368b8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
368bc     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
368c0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
368c4     02 00 00 FF 
368c8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
368cc                 | LR__5376
368cc     08 03 02 FD | 	qmul	_var02, _var09
368d0                 | ' 		_tzname[1] = stdname;
368d0                 | ' 
368d0                 | '         return sgn * off;
368d0     18 FA 61 FD | 	getqx	result1
368d4                 | LR__5377
368d4                 | _fatfs_cc___tzoffset_ret
368d4     2D 00 64 FD | 	ret
368d8                 | 
368d8                 | _fatfs_cc___indst
368d8     10 12 06 F1 | 	add	arg01, #16
368dc     09 01 02 FB | 	rdlong	_var01, arg01
368e0     10 12 86 F1 | 	sub	arg01, #16
368e4     02 00 0E F2 | 	cmp	_var01, #2 wz
368e8     30 00 90 5D |  if_ne	jmp	#LR__5380
368ec     07 00 06 F6 | 	mov	_var01, #7
368f0     18 12 06 F1 | 	add	arg01, #24
368f4     09 03 02 FB | 	rdlong	_var02, arg01
368f8     01 01 02 F1 | 	add	_var01, _var02
368fc     0C 12 86 F1 | 	sub	arg01, #12
36900     09 05 02 FB | 	rdlong	_var03, arg01
36904     02 01 82 F1 | 	sub	_var01, _var03
36908     00 00 56 F2 | 	cmps	_var01, #0 wc
3690c                 | '                         return 1;
3690c     01 FA 05 C6 |  if_b	mov	result1, #1
36910     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36914                 | '                 return 0;
36914     00 FA 05 F6 | 	mov	result1, #0
36918     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3691c                 | LR__5380
3691c     10 12 06 F1 | 	add	arg01, #16
36920     09 01 02 FB | 	rdlong	_var01, arg01
36924     10 12 86 F1 | 	sub	arg01, #16
36928     0A 00 0E F2 | 	cmp	_var01, #10 wz
3692c     28 00 90 5D |  if_ne	jmp	#LR__5381
36930     18 12 06 F1 | 	add	arg01, #24
36934     09 01 02 FB | 	rdlong	_var01, arg01
36938     0C 12 86 F1 | 	sub	arg01, #12
3693c     09 07 02 FB | 	rdlong	_var04, arg01
36940     03 01 82 F1 | 	sub	_var01, _var04
36944     00 00 56 F2 | 	cmps	_var01, #0 wc
36948                 | '                         return 0;
36948     00 FA 05 C6 |  if_b	mov	result1, #0
3694c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36950                 | '                 return 1;
36950     01 FA 05 F6 | 	mov	result1, #1
36954     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
36958                 | LR__5381
36958                 | '         }
36958                 | ' 
36958                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
36958     00 00 06 F6 | 	mov	_var01, #0
3695c     10 12 06 F1 | 	add	arg01, #16
36960     09 03 02 FB | 	rdlong	_var02, arg01
36964     10 12 86 F1 | 	sub	arg01, #16
36968     03 02 56 F2 | 	cmps	_var02, #3 wc
3696c     10 00 90 CD |  if_b	jmp	#LR__5382
36970     10 12 06 F1 | 	add	arg01, #16
36974     09 05 02 FB | 	rdlong	_var03, arg01
36978     0A 04 56 F2 | 	cmps	_var03, #10 wc
3697c     01 00 06 C6 |  if_b	mov	_var01, #1
36980                 | LR__5382
36980     00 FB 01 F6 | 	mov	result1, _var01
36984                 | _fatfs_cc___indst_ret
36984     2D 00 64 FD | 	ret
36988                 | 
36988                 | ' 	
36988                 | ' 	FUNCTION pfunc(c as integer) as integer
36988                 | ___strs_cl_pfunc
36988                 | ' 		if (i < 16) then
36988     04 E4 05 F1 | 	add	objptr, #4
3698c     F2 FA 01 FB | 	rdlong	result1, objptr
36990     04 E4 85 F1 | 	sub	objptr, #4
36994     10 FA 55 F2 | 	cmps	result1, #16 wc
36998     2C 00 90 3D |  if_ae	jmp	#LR__5390
3699c     F2 FA 01 FB | 	rdlong	result1, objptr
369a0     04 E4 05 F1 | 	add	objptr, #4
369a4     F2 00 02 FB | 	rdlong	_var01, objptr
369a8     FD 00 02 F1 | 	add	_var01, result1
369ac     00 13 42 FC | 	wrbyte	arg01, _var01
369b0     F2 FA 01 FB | 	rdlong	result1, objptr
369b4     01 FA 05 F1 | 	add	result1, #1
369b8     F2 FA 61 FC | 	wrlong	result1, objptr
369bc     04 E4 85 F1 | 	sub	objptr, #4
369c0                 | ' 			p(i) = c
369c0                 | ' 			i = i+1
369c0                 | ' 			return 1
369c0     01 FA 05 F6 | 	mov	result1, #1
369c4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
369c8                 | LR__5390
369c8                 | ' 			return -1
369c8     01 FA 65 F6 | 	neg	result1, #1
369cc                 | ___strs_cl_pfunc_ret
369cc     2D 00 64 FD | 	ret
369d0                 | 
369d0                 | __struct__s_vfs_file_t_putchar
369d0     04 4A 05 F6 | 	mov	COUNT_, #4
369d4     A8 00 A0 FD | 	call	#pushregs_
369d8     1C E4 05 F1 | 	add	objptr, #28
369dc     F2 26 0A FB | 	rdlong	local01, objptr wz
369e0     1C E4 85 F1 | 	sub	objptr, #28
369e4     00 FA 05 A6 |  if_e	mov	result1, #0
369e8     48 00 90 AD |  if_e	jmp	#LR__5400
369ec     1C E4 05 F1 | 	add	objptr, #28
369f0     F2 28 02 FB | 	rdlong	local02, objptr
369f4     14 2B 02 F6 | 	mov	local03, local02
369f8     1C E4 85 F1 | 	sub	objptr, #28
369fc     13 2A 46 F7 | 	zerox	local03, #19
36a00     14 28 46 F0 | 	shr	local02, #20
36a04     02 28 66 F0 | 	shl	local02, #2
36a08     ED 28 02 F1 | 	add	local02, __methods__
36a0c     14 29 02 FB | 	rdlong	local02, local02
36a10     F2 14 02 F6 | 	mov	arg02, objptr
36a14     F2 2C 02 F6 | 	mov	local04, objptr
36a18     15 E5 01 F6 | 	mov	objptr, local03
36a1c     2D 28 62 FD | 	call	local02
36a20     16 E5 01 F6 | 	mov	objptr, local04
36a24                 | '     return (i < 0) ? 0 : 1;
36a24     00 FA 55 F2 | 	cmps	result1, #0 wc
36a28     00 26 06 C6 |  if_b	mov	local01, #0
36a2c     01 26 06 36 |  if_ae	mov	local01, #1
36a30     13 FB 01 F6 | 	mov	result1, local01
36a34                 | LR__5400
36a34     A7 F0 03 F6 | 	mov	ptra, fp
36a38     B2 00 A0 FD | 	call	#popregs_
36a3c                 | __struct__s_vfs_file_t_putchar_ret
36a3c     2D 00 64 FD | 	ret
36a40                 | 
36a40                 | __struct__s_vfs_file_t_getchar
36a40     03 4A 05 F6 | 	mov	COUNT_, #3
36a44     A8 00 A0 FD | 	call	#pushregs_
36a48     20 E4 05 F1 | 	add	objptr, #32
36a4c     F2 12 0A FB | 	rdlong	arg01, objptr wz
36a50     20 E4 85 F1 | 	sub	objptr, #32
36a54     01 FA 65 A6 |  if_e	neg	result1, #1
36a58     38 00 90 AD |  if_e	jmp	#LR__5410
36a5c                 | '     return getcf(__this);
36a5c     20 E4 05 F1 | 	add	objptr, #32
36a60     F2 26 02 FB | 	rdlong	local01, objptr
36a64     13 29 02 F6 | 	mov	local02, local01
36a68     20 E4 85 F1 | 	sub	objptr, #32
36a6c     13 28 46 F7 | 	zerox	local02, #19
36a70     14 26 46 F0 | 	shr	local01, #20
36a74     02 26 66 F0 | 	shl	local01, #2
36a78     ED 26 02 F1 | 	add	local01, __methods__
36a7c     13 27 02 FB | 	rdlong	local01, local01
36a80     F2 12 02 F6 | 	mov	arg01, objptr
36a84     F2 2A 02 F6 | 	mov	local03, objptr
36a88     14 E5 01 F6 | 	mov	objptr, local02
36a8c     2D 26 62 FD | 	call	local01
36a90     15 E5 01 F6 | 	mov	objptr, local03
36a94                 | LR__5410
36a94     A7 F0 03 F6 | 	mov	ptra, fp
36a98     B2 00 A0 FD | 	call	#popregs_
36a9c                 | __struct__s_vfs_file_t_getchar_ret
36a9c     2D 00 64 FD | 	ret
36aa0                 | 
36aa0                 | __struct___bas_wrap_sender_tx
36aa0     03 4A 05 F6 | 	mov	COUNT_, #3
36aa4     A8 00 A0 FD | 	call	#pushregs_
36aa8     F2 26 02 FB | 	rdlong	local01, objptr
36aac     13 29 02 F6 | 	mov	local02, local01
36ab0     13 26 46 F7 | 	zerox	local01, #19
36ab4     14 28 46 F0 | 	shr	local02, #20
36ab8     02 28 66 F0 | 	shl	local02, #2
36abc     ED 28 02 F1 | 	add	local02, __methods__
36ac0     14 29 02 FB | 	rdlong	local02, local02
36ac4     F2 2A 02 F6 | 	mov	local03, objptr
36ac8     13 E5 01 F6 | 	mov	objptr, local01
36acc     2D 28 62 FD | 	call	local02
36ad0     15 E5 01 F6 | 	mov	objptr, local03
36ad4     01 FA 05 F6 | 	mov	result1, #1
36ad8     A7 F0 03 F6 | 	mov	ptra, fp
36adc     B2 00 A0 FD | 	call	#popregs_
36ae0                 | __struct___bas_wrap_sender_tx_ret
36ae0     2D 00 64 FD | 	ret
36ae4                 | 
36ae4                 | __struct___bas_wrap_sender_rx
36ae4     03 4A 05 F6 | 	mov	COUNT_, #3
36ae8     A8 00 A0 FD | 	call	#pushregs_
36aec     04 E4 05 F1 | 	add	objptr, #4
36af0     F2 26 02 FB | 	rdlong	local01, objptr
36af4     13 29 02 F6 | 	mov	local02, local01
36af8     04 E4 85 F1 | 	sub	objptr, #4
36afc     13 28 46 F7 | 	zerox	local02, #19
36b00     14 26 46 F0 | 	shr	local01, #20
36b04     02 26 66 F0 | 	shl	local01, #2
36b08     ED 26 02 F1 | 	add	local01, __methods__
36b0c     13 27 02 FB | 	rdlong	local01, local01
36b10     F2 2A 02 F6 | 	mov	local03, objptr
36b14     14 E5 01 F6 | 	mov	objptr, local02
36b18     2D 26 62 FD | 	call	local01
36b1c     15 E5 01 F6 | 	mov	objptr, local03
36b20     A7 F0 03 F6 | 	mov	ptra, fp
36b24     B2 00 A0 FD | 	call	#popregs_
36b28                 | __struct___bas_wrap_sender_rx_ret
36b28     2D 00 64 FD | 	ret
36b2c                 | 
36b2c                 | __struct___bas_wrap_sender_close
36b2c     03 4A 05 F6 | 	mov	COUNT_, #3
36b30     A8 00 A0 FD | 	call	#pushregs_
36b34     08 E4 05 F1 | 	add	objptr, #8
36b38     F2 26 02 FB | 	rdlong	local01, objptr
36b3c     13 29 02 F6 | 	mov	local02, local01
36b40     08 E4 85 F1 | 	sub	objptr, #8
36b44     13 28 46 F7 | 	zerox	local02, #19
36b48     14 26 46 F0 | 	shr	local01, #20
36b4c     02 26 66 F0 | 	shl	local01, #2
36b50     ED 26 02 F1 | 	add	local01, __methods__
36b54     13 27 02 FB | 	rdlong	local01, local01
36b58     F2 2A 02 F6 | 	mov	local03, objptr
36b5c     14 E5 01 F6 | 	mov	objptr, local02
36b60     2D 26 62 FD | 	call	local01
36b64     15 E5 01 F6 | 	mov	objptr, local03
36b68     A7 F0 03 F6 | 	mov	ptra, fp
36b6c     B2 00 A0 FD | 	call	#popregs_
36b70                 | __struct___bas_wrap_sender_close_ret
36b70     2D 00 64 FD | 	ret
36b74                 | 
36b74                 | LR__5420
36b74     2F          | 	byte	"/"
36b75     00          | 	byte	0
36b76                 | LR__5421
36b76     69 6E 66    | 	byte	"inf"
36b79     00          | 	byte	0
36b7a                 | LR__5422
36b7a     6E 61 6E    | 	byte	"nan"
36b7d     00          | 	byte	0
36b7e                 | LR__5423
36b7e                 | 	byte	
36b7e     00          | 	byte	0
36b7f                 | LR__5424
36b7f                 | 	byte	
36b7f     00          | 	byte	0
36b80                 | LR__5425
36b80                 | 	byte	
36b80     00          | 	byte	0
36b81                 | LR__5426
36b81                 | 	byte	
36b81     00          | 	byte	0
36b82                 | LR__5427
36b82                 | 	byte	
36b82     00          | 	byte	0
36b83                 | LR__5428
36b83                 | 	byte	
36b83     00          | 	byte	0
36b84                 | LR__5429
36b84                 | 	byte	
36b84     00          | 	byte	0
36b85                 | LR__5430
36b85                 | 	byte	
36b85     00          | 	byte	0
36b86                 | LR__5431
36b86     00          | 	byte	0
36b87     00          | 	byte	0
36b88                 | LR__5432
36b88     00          | 	byte	0
36b89     00          | 	byte	0
36b8a                 | LR__5433
36b8a     00          | 	byte	0
36b8b     00          | 	byte	0
36b8c                 | LR__5434
36b8c     20 21 21 21 
36b90     20 63 6F 72 
36b94     72 75 70 74 
36b98     65 64 20 68 
36b9c     65 61 70 3F 
36ba0     3F 3F 20 21 
36ba4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
36ba7     00          | 	byte	0
36ba8                 | LR__5435
36ba8     20 21 21 21 
36bac     20 6F 75 74 
36bb0     20 6F 66 20 
36bb4     68 65 61 70 
36bb8     20 6D 65 6D 
36bbc     6F 72 79 20 
36bc0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
36bc4     00          | 	byte	0
36bc5                 | LR__5436
36bc5     20 21 21 21 
36bc9     20 63 6F 72 
36bcd     72 75 70 74 
36bd1     65 64 20 68 
36bd5     65 61 70 20 
36bd9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
36bdd     00          | 	byte	0
36bde                 | LR__5437
36bde     00          | 	byte	0
36bdf     00          | 	byte	0
36be0                 | LR__5438
36be0     2E          | 	byte	"."
36be1     00          | 	byte	0
36be2                 | LR__5439
36be2     00          | 	byte	0
36be3     00          | 	byte	0
36be4                 | LR__5440
36be4     00          | 	byte	0
36be5     00          | 	byte	0
36be6                 | LR__5441
36be6     00          | 	byte	0
36be7     00          | 	byte	0
36be8                 | LR__5442
36be8     2A 3A 3C 3E 
36bec     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
36bf0     00          | 	byte	0
36bf1                 | LR__5443
36bf1     2B 2C 3B 3D 
36bf5     5B 5D       | 	byte	"+,;=[]"
36bf7     00          | 	byte	0
36bf8                 | LR__5444
36bf8     46 41 54 33 
36bfc     32 20 20 20 | 	byte	"FAT32   "
36c00     00          | 	byte	0
36c01                 | LR__5445
36c01     54 5A       | 	byte	"TZ"
36c03     00          | 	byte	0
36c04                 | LR__5446
36c04     00          | 	byte	0
36c05     00          | 	byte	0
36c06                 | LR__5447
36c06                 | 	byte	
36c06     00          | 	byte	0
36c07                 | LR__5448
36c07                 | 	byte	
36c07     00          | 	byte	0
36c08                 | LR__5449
36c08                 | 	byte	
36c08     00          | 	byte	0
36c09                 | LR__5450
36c09                 | 	byte	
36c09     00          | 	byte	0
36c0a                 | LR__5451
36c0a     22          | 	byte	34
36c0b     00          | 	byte	0
36c0c                 | LR__5452
36c0c     22          | 	byte	34
36c0d     00          | 	byte	0
36c0e                 | LR__5453
36c0e     3A          | 	byte	":"
36c0f     00          | 	byte	0
36c10                 | LR__5454
36c10                 | 	byte	
36c10     00          | 	byte	0
36c11                 | LR__5455
36c11                 | 	byte	
36c11     00          | 	byte	0
36c12                 | LR__5456
36c12                 | 	byte	
36c12     00          | 	byte	0
36c13                 | LR__5457
36c13                 | 	byte	
36c13     00          | 	byte	0
36c14                 | LR__5458
36c14                 | 	byte	
36c14     00          | 	byte	0
36c15                 | LR__5459
36c15                 | 	byte	
36c15     00          | 	byte	0
36c16                 | LR__5460
36c16                 | 	byte	
36c16     00          | 	byte	0
36c17                 | LR__5461
36c17     30          | 	byte	"0"
36c18     00          | 	byte	0
36c19                 | LR__5462
36c19     22          | 	byte	34
36c1a     00          | 	byte	0
36c1b                 | LR__5463
36c1b     22          | 	byte	34
36c1c     00          | 	byte	0
36c1d                 | LR__5464
36c1d     22          | 	byte	34
36c1e     00          | 	byte	0
36c1f                 | LR__5465
36c1f     22          | 	byte	34
36c20     00          | 	byte	0
36c21                 | LR__5466
36c21     22          | 	byte	34
36c22     00          | 	byte	0
36c23                 | LR__5467
36c23     3E          | 	byte	">"
36c24     00          | 	byte	0
36c25                 | LR__5468
36c25     3C          | 	byte	"<"
36c26     00          | 	byte	0
36c27                 | LR__5469
36c27     2B          | 	byte	"+"
36c28     00          | 	byte	0
36c29                 | LR__5470
36c29     2D          | 	byte	"-"
36c2a     00          | 	byte	0
36c2b                 | LR__5471
36c2b     2A          | 	byte	"*"
36c2c     00          | 	byte	0
36c2d                 | LR__5472
36c2d     2F          | 	byte	"/"
36c2e     00          | 	byte	0
36c2f                 | LR__5473
36c2f     5E          | 	byte	"^"
36c30     00          | 	byte	0
36c31                 | LR__5474
36c31     3D          | 	byte	"="
36c32     00          | 	byte	0
36c33                 | LR__5475
36c33     2B          | 	byte	"+"
36c34     00          | 	byte	0
36c35                 | LR__5476
36c35     2B          | 	byte	"+"
36c36     00          | 	byte	0
36c37                 | LR__5477
36c37     2D          | 	byte	"-"
36c38     00          | 	byte	0
36c39                 | LR__5478
36c39     2D          | 	byte	"-"
36c3a     00          | 	byte	0
36c3b                 | LR__5479
36c3b     3C          | 	byte	"<"
36c3c     00          | 	byte	0
36c3d                 | LR__5480
36c3d     3E          | 	byte	">"
36c3e     00          | 	byte	0
36c3f                 | LR__5481
36c3f     22          | 	byte	34
36c40     00          | 	byte	0
36c41                 | LR__5482
36c41     22          | 	byte	34
36c42     00          | 	byte	0
36c43                 | LR__5483
36c43     65 6C 73 65 | 	byte	"else"
36c47     00          | 	byte	0
36c48                 | LR__5484
36c48     74 68 65 6E | 	byte	"then"
36c4c     00          | 	byte	0
36c4d                 | LR__5485
36c4d     3F          | 	byte	"?"
36c4e     00          | 	byte	0
36c4f                 | LR__5486
36c4f     3F          | 	byte	"?"
36c50     00          | 	byte	0
36c51                 | LR__5487
36c51     2E          | 	byte	"."
36c52     00          | 	byte	0
36c53                 | LR__5488
36c53     6D 6F 75 73 
36c57     65          | 	byte	"mouse"
36c58     00          | 	byte	0
36c59                 | LR__5489
36c59     63 75 72 73 
36c5d     6F 72       | 	byte	"cursor"
36c5f     00          | 	byte	0
36c60                 | LR__5490
36c60     63 6C 69 63 
36c64     6B          | 	byte	"click"
36c65     00          | 	byte	0
36c66                 | LR__5491
36c66     6F 6E       | 	byte	"on"
36c68     00          | 	byte	0
36c69                 | LR__5492
36c69     31          | 	byte	"1"
36c6a     00          | 	byte	0
36c6b                 | LR__5493
36c6b     6F 66 66    | 	byte	"off"
36c6e     00          | 	byte	0
36c6f                 | LR__5494
36c6f     30          | 	byte	"0"
36c70     00          | 	byte	0
36c71                 | LR__5495
36c71     6D 6F 64 65 | 	byte	"mode"
36c75     00          | 	byte	0
36c76                 | LR__5496
36c76     6D 2E       | 	byte	"m."
36c78     00          | 	byte	0
36c79                 | LR__5497
36c79     61 74 61 72 
36c7d     69          | 	byte	"atari"
36c7e     00          | 	byte	0
36c7f                 | LR__5498
36c7f     30          | 	byte	"0"
36c80     00          | 	byte	0
36c81                 | LR__5499
36c81     70 63 5F 61 
36c85     6D 62 65 72 | 	byte	"pc_amber"
36c89     00          | 	byte	0
36c8a                 | LR__5500
36c8a     31          | 	byte	"1"
36c8b     00          | 	byte	0
36c8c                 | LR__5501
36c8c     70 63 5F 67 
36c90     72 65 65 6E | 	byte	"pc_green"
36c94     00          | 	byte	0
36c95                 | LR__5502
36c95     32          | 	byte	"2"
36c96     00          | 	byte	0
36c97                 | LR__5503
36c97     70 63 5F 77 
36c9b     68 69 74 65 | 	byte	"pc_white"
36c9f     00          | 	byte	0
36ca0                 | LR__5504
36ca0     33          | 	byte	"3"
36ca1     00          | 	byte	0
36ca2                 | LR__5505
36ca2     73 74       | 	byte	"st"
36ca4     00          | 	byte	0
36ca5                 | LR__5506
36ca5     34          | 	byte	"4"
36ca6     00          | 	byte	0
36ca7                 | LR__5507
36ca7     61 6D 69 67 
36cab     61          | 	byte	"amiga"
36cac     00          | 	byte	0
36cad                 | LR__5508
36cad     35          | 	byte	"5"
36cae     00          | 	byte	0
36caf                 | LR__5509
36caf                 | 	byte	
36caf     00          | 	byte	0
36cb0                 | LR__5510
36cb0     6C 6F 61 64 | 	byte	"load"
36cb4     00          | 	byte	0
36cb5                 | LR__5511
36cb5     73 61 76 65 | 	byte	"save"
36cb9     00          | 	byte	0
36cba                 | LR__5512
36cba     62 72 75 6E | 	byte	"brun"
36cbe     00          | 	byte	0
36cbf                 | LR__5513
36cbf     72 75 6E    | 	byte	"run"
36cc2     00          | 	byte	0
36cc3                 | LR__5514
36cc3     6C 6F 2E    | 	byte	"lo."
36cc6     00          | 	byte	0
36cc7                 | LR__5515
36cc7     73 2E       | 	byte	"s."
36cc9     00          | 	byte	0
36cca                 | LR__5516
36cca     62 72 2E    | 	byte	"br."
36ccd     00          | 	byte	0
36cce                 | LR__5517
36cce     65 6E 74 65 
36cd2     72          | 	byte	"enter"
36cd3     00          | 	byte	0
36cd4                 | LR__5518
36cd4     65 2E       | 	byte	"e."
36cd6     00          | 	byte	0
36cd7                 | LR__5519
36cd7     24          | 	byte	"$"
36cd8     00          | 	byte	0
36cd9                 | LR__5520
36cd9     64 65 6C 65 
36cdd     74 65       | 	byte	"delete"
36cdf     00          | 	byte	0
36ce0                 | LR__5521
36ce0     6D 6B 64 69 
36ce4     72          | 	byte	"mkdir"
36ce5     00          | 	byte	0
36ce6                 | LR__5522
36ce6     24          | 	byte	"$"
36ce7     00          | 	byte	0
36ce8                 | LR__5523
36ce8     63 6F 70 79 | 	byte	"copy"
36cec     00          | 	byte	0
36ced                 | LR__5524
36ced     24          | 	byte	"$"
36cee     00          | 	byte	0
36cef                 | LR__5525
36cef     63 6F 70 79 | 	byte	"copy"
36cf3     00          | 	byte	0
36cf4                 | LR__5526
36cf4     24          | 	byte	"$"
36cf5     00          | 	byte	0
36cf6                 | LR__5527
36cf6     63 64       | 	byte	"cd"
36cf8     00          | 	byte	0
36cf9                 | LR__5528
36cf9     63 64 2E    | 	byte	"cd."
36cfc     00          | 	byte	0
36cfd                 | LR__5529
36cfd     2E          | 	byte	"."
36cfe     00          | 	byte	0
36cff                 | LR__5530
36cff     2E 2E       | 	byte	".."
36d01     00          | 	byte	0
36d02                 | LR__5531
36d02     63 64       | 	byte	"cd"
36d04     00          | 	byte	0
36d05                 | LR__5532
36d05     2F          | 	byte	"/"
36d06     00          | 	byte	0
36d07                 | LR__5533
36d07                 | 	byte	
36d07     00          | 	byte	0
36d08                 | LR__5534
36d08                 | 	byte	
36d08     00          | 	byte	0
36d09                 | LR__5535
36d09                 | 	byte	
36d09     00          | 	byte	0
36d0a                 | LR__5536
36d0a                 | 	byte	
36d0a     00          | 	byte	0
36d0b                 | LR__5537
36d0b                 | 	byte	
36d0b     00          | 	byte	0
36d0c                 | LR__5538
36d0c     52 65 61 64 
36d10     79          | 	byte	"Ready"
36d11     00          | 	byte	0
36d12                 | LR__5539
36d12     2B          | 	byte	"+"
36d13     00          | 	byte	0
36d14                 | LR__5540
36d14     2D          | 	byte	"-"
36d15     00          | 	byte	0
36d16                 | LR__5541
36d16     6F 72       | 	byte	"or"
36d18     00          | 	byte	0
36d19                 | LR__5542
36d19     78 6F 72    | 	byte	"xor"
36d1c     00          | 	byte	0
36d1d                 | LR__5543
36d1d     2A          | 	byte	"*"
36d1e     00          | 	byte	0
36d1f                 | LR__5544
36d1f     2F          | 	byte	"/"
36d20     00          | 	byte	0
36d21                 | LR__5545
36d21     61 6E 64    | 	byte	"and"
36d24     00          | 	byte	0
36d25                 | LR__5546
36d25     64 69 76    | 	byte	"div"
36d28     00          | 	byte	0
36d29                 | LR__5547
36d29     6D 6F 64    | 	byte	"mod"
36d2c     00          | 	byte	0
36d2d                 | LR__5548
36d2d     73 68 6C    | 	byte	"shl"
36d30     00          | 	byte	0
36d31                 | LR__5549
36d31     73 68 72    | 	byte	"shr"
36d34     00          | 	byte	0
36d35                 | LR__5550
36d35     5E          | 	byte	"^"
36d36     00          | 	byte	0
36d37                 | LR__5551
36d37     6E 6F 74    | 	byte	"not"
36d3a     00          | 	byte	0
36d3b                 | LR__5552
36d3b     40          | 	byte	"@"
36d3c     00          | 	byte	0
36d3d                 | LR__5553
36d3d     3D          | 	byte	"="
36d3e     00          | 	byte	0
36d3f                 | LR__5554
36d3f     3E 3D       | 	byte	">="
36d41     00          | 	byte	0
36d42                 | LR__5555
36d42     3C 3D       | 	byte	"<="
36d44     00          | 	byte	0
36d45                 | LR__5556
36d45     3C          | 	byte	"<"
36d46     00          | 	byte	0
36d47                 | LR__5557
36d47     3E          | 	byte	">"
36d48     00          | 	byte	0
36d49                 | LR__5558
36d49     3C 3E       | 	byte	"<>"
36d4b     00          | 	byte	0
36d4c                 | LR__5559
36d4c     2B 2B       | 	byte	"++"
36d4e     00          | 	byte	0
36d4f                 | LR__5560
36d4f     2D 2D       | 	byte	"--"
36d51     00          | 	byte	0
36d52                 | LR__5561
36d52     23          | 	byte	"#"
36d53     00          | 	byte	0
36d54                 | LR__5562
36d54     30          | 	byte	"0"
36d55     00          | 	byte	0
36d56                 | LR__5563
36d56     39          | 	byte	"9"
36d57     00          | 	byte	0
36d58                 | LR__5564
36d58     23 72 65 61 
36d5c     64          | 	byte	"#read"
36d5d     00          | 	byte	0
36d5e                 | LR__5565
36d5e     23 77 72 69 
36d62     74 65       | 	byte	"#write"
36d64     00          | 	byte	0
36d65                 | LR__5566
36d65     23 61 70 70 
36d69     65 6E 64    | 	byte	"#append"
36d6c     00          | 	byte	0
36d6d                 | LR__5567
36d6d     23          | 	byte	"#"
36d6e     00          | 	byte	0
36d6f                 | LR__5568
36d6f     23          | 	byte	"#"
36d70     00          | 	byte	0
36d71                 | LR__5569
36d71     2D          | 	byte	"-"
36d72     00          | 	byte	0
36d73                 | LR__5570
36d73     30          | 	byte	"0"
36d74     00          | 	byte	0
36d75                 | LR__5571
36d75     63          | 	byte	"c"
36d76     00          | 	byte	0
36d77                 | LR__5572
36d77     63 23       | 	byte	"c#"
36d79     00          | 	byte	0
36d7a                 | LR__5573
36d7a     64          | 	byte	"d"
36d7b     00          | 	byte	0
36d7c                 | LR__5574
36d7c     64 23       | 	byte	"d#"
36d7e     00          | 	byte	0
36d7f                 | LR__5575
36d7f     65          | 	byte	"e"
36d80     00          | 	byte	0
36d81                 | LR__5576
36d81     66          | 	byte	"f"
36d82     00          | 	byte	0
36d83                 | LR__5577
36d83     66 23       | 	byte	"f#"
36d85     00          | 	byte	0
36d86                 | LR__5578
36d86     67          | 	byte	"g"
36d87     00          | 	byte	0
36d88                 | LR__5579
36d88     67 23       | 	byte	"g#"
36d8a     00          | 	byte	0
36d8b                 | LR__5580
36d8b     61          | 	byte	"a"
36d8c     00          | 	byte	0
36d8d                 | LR__5581
36d8d     61 23       | 	byte	"a#"
36d8f     00          | 	byte	0
36d90                 | LR__5582
36d90     68          | 	byte	"h"
36d91     00          | 	byte	0
36d92                 | LR__5583
36d92     62          | 	byte	"b"
36d93     00          | 	byte	0
36d94                 | LR__5584
36d94     2B          | 	byte	"+"
36d95     00          | 	byte	0
36d96                 | LR__5585
36d96     2D          | 	byte	"-"
36d97     00          | 	byte	0
36d98                 | LR__5586
36d98     3D          | 	byte	"="
36d99     00          | 	byte	0
36d9a                 | LR__5587
36d9a     2C          | 	byte	","
36d9b     00          | 	byte	0
36d9c                 | LR__5588
36d9c     2A          | 	byte	"*"
36d9d     00          | 	byte	0
36d9e                 | LR__5589
36d9e     2F          | 	byte	"/"
36d9f     00          | 	byte	0
36da0                 | LR__5590
36da0     3B          | 	byte	";"
36da1     00          | 	byte	0
36da2                 | LR__5591
36da2     22          | 	byte	34
36da3     00          | 	byte	0
36da4                 | LR__5592
36da4     5E          | 	byte	"^"
36da5     00          | 	byte	0
36da6                 | LR__5593
36da6     29          | 	byte	")"
36da7     00          | 	byte	0
36da8                 | LR__5594
36da8     28          | 	byte	"("
36da9     00          | 	byte	0
36daa                 | LR__5595
36daa     3A          | 	byte	":"
36dab     00          | 	byte	0
36dac                 | LR__5596
36dac     20          | 	byte	" "
36dad     00          | 	byte	0
36dae                 | LR__5597
36dae     3E          | 	byte	">"
36daf     00          | 	byte	0
36db0                 | LR__5598
36db0     3C          | 	byte	"<"
36db1     00          | 	byte	0
36db2                 | LR__5599
36db2     3D          | 	byte	"="
36db3     00          | 	byte	0
36db4                 | LR__5600
36db4     62 65 65 70 | 	byte	"beep"
36db8     00          | 	byte	0
36db9                 | LR__5601
36db9     62 2E       | 	byte	"b."
36dbb     00          | 	byte	0
36dbc                 | LR__5602
36dbc     62 6C 69 74 | 	byte	"blit"
36dc0     00          | 	byte	0
36dc1                 | LR__5603
36dc1     62 6F 78    | 	byte	"box"
36dc4     00          | 	byte	0
36dc5                 | LR__5604
36dc5     62 72 75 6E | 	byte	"brun"
36dc9     00          | 	byte	0
36dca                 | LR__5605
36dca     62 72 2E    | 	byte	"br."
36dcd     00          | 	byte	0
36dce                 | LR__5606
36dce     63 64       | 	byte	"cd"
36dd0     00          | 	byte	0
36dd1                 | LR__5607
36dd1     63 68 61 6E 
36dd5     67 65 66 72 
36dd9     65 71       | 	byte	"changefreq"
36ddb     00          | 	byte	0
36ddc                 | LR__5608
36ddc     63 66 2E    | 	byte	"cf."
36ddf     00          | 	byte	0
36de0                 | LR__5609
36de0     63 68 61 6E 
36de4     67 65 70 61 
36de8     6E          | 	byte	"changepan"
36de9     00          | 	byte	0
36dea                 | LR__5610
36dea     63 70 2E    | 	byte	"cp."
36ded     00          | 	byte	0
36dee                 | LR__5611
36dee     63 68 61 6E 
36df2     67 65 76 6F 
36df6     6C          | 	byte	"changevol"
36df7     00          | 	byte	0
36df8                 | LR__5612
36df8     63 76 2E    | 	byte	"cv."
36dfb     00          | 	byte	0
36dfc                 | LR__5613
36dfc     63 68 61 6E 
36e00     67 65 77 61 
36e04     76 65       | 	byte	"changewave"
36e06     00          | 	byte	0
36e07                 | LR__5614
36e07     63 77 2E    | 	byte	"cw."
36e0a     00          | 	byte	0
36e0b                 | LR__5615
36e0b     63 69 72 63 
36e0f     6C 65       | 	byte	"circle"
36e11     00          | 	byte	0
36e12                 | LR__5616
36e12     63 69 2E    | 	byte	"ci."
36e15     00          | 	byte	0
36e16                 | LR__5617
36e16     63 6C 69 63 
36e1a     6B          | 	byte	"click"
36e1b     00          | 	byte	0
36e1c                 | LR__5618
36e1c     63 6C 6F 73 
36e20     65          | 	byte	"close"
36e21     00          | 	byte	0
36e22                 | LR__5619
36e22     63 6C 73    | 	byte	"cls"
36e25     00          | 	byte	0
36e26                 | LR__5620
36e26     63 6F 67 73 
36e2a     74 6F 70    | 	byte	"cogstop"
36e2d     00          | 	byte	0
36e2e                 | LR__5621
36e2e     63 6F 6C 6F 
36e32     72          | 	byte	"color"
36e33     00          | 	byte	0
36e34                 | LR__5622
36e34     63 2E       | 	byte	"c."
36e36     00          | 	byte	0
36e37                 | LR__5623
36e37     63 6F 70 79 | 	byte	"copy"
36e3b     00          | 	byte	0
36e3c                 | LR__5624
36e3c     63 75 72 73 
36e40     6F 72       | 	byte	"cursor"
36e42     00          | 	byte	0
36e43                 | LR__5625
36e43     64 61 74 61 | 	byte	"data"
36e47     00          | 	byte	0
36e48                 | LR__5626
36e48     64 65 66 73 
36e4c     6E 64       | 	byte	"defsnd"
36e4e     00          | 	byte	0
36e4f                 | LR__5627
36e4f     64 65 66 65 
36e53     6E 76       | 	byte	"defenv"
36e55     00          | 	byte	0
36e56                 | LR__5628
36e56     64 65 66 73 
36e5a     70 72 69 74 
36e5e     65          | 	byte	"defsprite"
36e5f     00          | 	byte	0
36e60                 | LR__5629
36e60     64 73 2E    | 	byte	"ds."
36e63     00          | 	byte	0
36e64                 | LR__5630
36e64     64 65 67    | 	byte	"deg"
36e67     00          | 	byte	0
36e68                 | LR__5631
36e68     64 65 6C 65 
36e6c     74 65       | 	byte	"delete"
36e6e     00          | 	byte	0
36e6f                 | LR__5632
36e6f     64 69 6D    | 	byte	"dim"
36e72     00          | 	byte	0
36e73                 | LR__5633
36e73     64 69 72    | 	byte	"dir"
36e76     00          | 	byte	0
36e77                 | LR__5634
36e77     64 70 6F 6B 
36e7b     65          | 	byte	"dpoke"
36e7c     00          | 	byte	0
36e7d                 | LR__5635
36e7d     64 72 61 77 | 	byte	"draw"
36e81     00          | 	byte	0
36e82                 | LR__5636
36e82     64 72 61 77 
36e86     74 6F       | 	byte	"drawto"
36e88     00          | 	byte	0
36e89                 | LR__5637
36e89     64 72 2E    | 	byte	"dr."
36e8c     00          | 	byte	0
36e8d                 | LR__5638
36e8d     65 6C 73 65 | 	byte	"else"
36e91     00          | 	byte	0
36e92                 | LR__5639
36e92     65 6E 64    | 	byte	"end"
36e95     00          | 	byte	0
36e96                 | LR__5640
36e96     65 6E 74 65 
36e9a     72          | 	byte	"enter"
36e9b     00          | 	byte	0
36e9c                 | LR__5641
36e9c     65 2E       | 	byte	"e."
36e9e     00          | 	byte	0
36e9f                 | LR__5642
36e9f     66 63 69 72 
36ea3     63 6C 65    | 	byte	"fcircle"
36ea6     00          | 	byte	0
36ea7                 | LR__5643
36ea7     66 63 2E    | 	byte	"fc."
36eaa     00          | 	byte	0
36eab                 | LR__5644
36eab     66 69 6C 6C | 	byte	"fill"
36eaf     00          | 	byte	0
36eb0                 | LR__5645
36eb0     66 69 2E    | 	byte	"fi."
36eb3     00          | 	byte	0
36eb4                 | LR__5646
36eb4     66 6F 6E 74 | 	byte	"font"
36eb8     00          | 	byte	0
36eb9                 | LR__5647
36eb9     66 6F 72    | 	byte	"for"
36ebc     00          | 	byte	0
36ebd                 | LR__5648
36ebd     66 2E       | 	byte	"f."
36ebf     00          | 	byte	0
36ec0                 | LR__5649
36ec0     66 72 61 6D 
36ec4     65          | 	byte	"frame"
36ec5     00          | 	byte	0
36ec6                 | LR__5650
36ec6     66 72 2E    | 	byte	"fr."
36ec9     00          | 	byte	0
36eca                 | LR__5651
36eca     67 65 74    | 	byte	"get"
36ecd     00          | 	byte	0
36ece                 | LR__5652
36ece     67 6F 73 75 
36ed2     62          | 	byte	"gosub"
36ed3     00          | 	byte	0
36ed4                 | LR__5653
36ed4     67 6F 74 6F | 	byte	"goto"
36ed8     00          | 	byte	0
36ed9                 | LR__5654
36ed9     67 2E       | 	byte	"g."
36edb     00          | 	byte	0
36edc                 | LR__5655
36edc     69 66       | 	byte	"if"
36ede     00          | 	byte	0
36edf                 | LR__5656
36edf     69 6E 6B    | 	byte	"ink"
36ee2     00          | 	byte	0
36ee3                 | LR__5657
36ee3     69 2E       | 	byte	"i."
36ee5     00          | 	byte	0
36ee6                 | LR__5658
36ee6     69 6E 70 75 
36eea     74          | 	byte	"input"
36eeb     00          | 	byte	0
36eec                 | LR__5659
36eec     6C 69 73 74 | 	byte	"list"
36ef0     00          | 	byte	0
36ef1                 | LR__5660
36ef1     6C 2E       | 	byte	"l."
36ef3     00          | 	byte	0
36ef4                 | LR__5661
36ef4     6C 6F 61 64 | 	byte	"load"
36ef8     00          | 	byte	0
36ef9                 | LR__5662
36ef9     6C 6F 2E    | 	byte	"lo."
36efc     00          | 	byte	0
36efd                 | LR__5663
36efd     6C 70 6F 6B 
36f01     65          | 	byte	"lpoke"
36f02     00          | 	byte	0
36f03                 | LR__5664
36f03     6D 6B 64 69 
36f07     72          | 	byte	"mkdir"
36f08     00          | 	byte	0
36f09                 | LR__5665
36f09     6D 6F 64 65 | 	byte	"mode"
36f0d     00          | 	byte	0
36f0e                 | LR__5666
36f0e     6D 2E       | 	byte	"m."
36f10     00          | 	byte	0
36f11                 | LR__5667
36f11     6D 6F 75 73 
36f15     65          | 	byte	"mouse"
36f16     00          | 	byte	0
36f17                 | LR__5668
36f17     6E 65 77    | 	byte	"new"
36f1a     00          | 	byte	0
36f1b                 | LR__5669
36f1b     6E 65 78 74 | 	byte	"next"
36f1f     00          | 	byte	0
36f20                 | LR__5670
36f20     6E 2E       | 	byte	"n."
36f22     00          | 	byte	0
36f23                 | LR__5671
36f23     6F 6E       | 	byte	"on"
36f25     00          | 	byte	0
36f26                 | LR__5672
36f26     6F 70 65 6E | 	byte	"open"
36f2a     00          | 	byte	0
36f2b                 | LR__5673
36f2b     70 61 70 65 
36f2f     72          | 	byte	"paper"
36f30     00          | 	byte	0
36f31                 | LR__5674
36f31     70 61 2E    | 	byte	"pa."
36f34     00          | 	byte	0
36f35                 | LR__5675
36f35     70 69 6E 66 
36f39     6C 6F 61 74 | 	byte	"pinfloat"
36f3d     00          | 	byte	0
36f3e                 | LR__5676
36f3e     70 69 6E 68 
36f42     69          | 	byte	"pinhi"
36f43     00          | 	byte	0
36f44                 | LR__5677
36f44     70 69 6E 6C 
36f48     6F          | 	byte	"pinlo"
36f49     00          | 	byte	0
36f4a                 | LR__5678
36f4a     70 69 6E 73 
36f4e     74 61 72 74 | 	byte	"pinstart"
36f52     00          | 	byte	0
36f53                 | LR__5679
36f53     70 69 6E 74 
36f57     6F 67 67 6C 
36f5b     65          | 	byte	"pintoggle"
36f5c     00          | 	byte	0
36f5d                 | LR__5680
36f5d     70 69 6E 77 
36f61     72 69 74 65 | 	byte	"pinwrite"
36f65     00          | 	byte	0
36f66                 | LR__5681
36f66     70 6C 61 79 | 	byte	"play"
36f6a     00          | 	byte	0
36f6b                 | LR__5682
36f6b     70 2E       | 	byte	"p."
36f6d     00          | 	byte	0
36f6e                 | LR__5683
36f6e     70 6C 6F 74 | 	byte	"plot"
36f72     00          | 	byte	0
36f73                 | LR__5684
36f73     70 6C 2E    | 	byte	"pl."
36f76     00          | 	byte	0
36f77                 | LR__5685
36f77     70 6F 6B 65 | 	byte	"poke"
36f7b     00          | 	byte	0
36f7c                 | LR__5686
36f7c     70 6F 70    | 	byte	"pop"
36f7f     00          | 	byte	0
36f80                 | LR__5687
36f80     70 6F 73 69 
36f84     74 69 6F 6E | 	byte	"position"
36f88     00          | 	byte	0
36f89                 | LR__5688
36f89     70 6F 73 2E | 	byte	"pos."
36f8d     00          | 	byte	0
36f8e                 | LR__5689
36f8e     70 72 69 6E 
36f92     74          | 	byte	"print"
36f93     00          | 	byte	0
36f94                 | LR__5690
36f94     3F          | 	byte	"?"
36f95     00          | 	byte	0
36f96                 | LR__5691
36f96     70 75 74    | 	byte	"put"
36f99     00          | 	byte	0
36f9a                 | LR__5692
36f9a     72 61 64    | 	byte	"rad"
36f9d     00          | 	byte	0
36f9e                 | LR__5693
36f9e     72 65 61 64 | 	byte	"read"
36fa2     00          | 	byte	0
36fa3                 | LR__5694
36fa3     72 65 6C 65 
36fa7     61 73 65    | 	byte	"release"
36faa     00          | 	byte	0
36fab                 | LR__5695
36fab     72 65 6D    | 	byte	"rem"
36fae     00          | 	byte	0
36faf                 | LR__5696
36faf     27          | 	byte	"'"
36fb0     00          | 	byte	0
36fb1                 | LR__5697
36fb1     72 65 73 74 
36fb5     6F 72 65    | 	byte	"restore"
36fb8     00          | 	byte	0
36fb9                 | LR__5698
36fb9     72 65 73 74 
36fbd     6F 72 65 70 
36fc1     61 6C 65 74 
36fc5     74 65       | 	byte	"restorepalette"
36fc7     00          | 	byte	0
36fc8                 | LR__5699
36fc8     72 70 2E    | 	byte	"rp."
36fcb     00          | 	byte	0
36fcc                 | LR__5700
36fcc     72 65 74 75 
36fd0     72 6E       | 	byte	"return"
36fd2     00          | 	byte	0
36fd3                 | LR__5701
36fd3     72 75 6E    | 	byte	"run"
36fd6     00          | 	byte	0
36fd7                 | LR__5702
36fd7     73 61 76 65 | 	byte	"save"
36fdb     00          | 	byte	0
36fdc                 | LR__5703
36fdc     73 2E       | 	byte	"s."
36fde     00          | 	byte	0
36fdf                 | LR__5704
36fdf     73 65 74 63 
36fe3     6F 6C 6F 72 | 	byte	"setcolor"
36fe7     00          | 	byte	0
36fe8                 | LR__5705
36fe8     73 63 2E    | 	byte	"sc."
36feb     00          | 	byte	0
36fec                 | LR__5706
36fec     73 65 74 64 
36ff0     65 6C 61 79 | 	byte	"setdelay"
36ff4     00          | 	byte	0
36ff5                 | LR__5707
36ff5     73 64 2E    | 	byte	"sd."
36ff8     00          | 	byte	0
36ff9                 | LR__5708
36ff9     73 65 74 65 
36ffd     6E 76       | 	byte	"setenv"
36fff     00          | 	byte	0
37000                 | LR__5709
37000     73 65 2E    | 	byte	"se."
37003     00          | 	byte	0
37004                 | LR__5710
37004     73 65 74 6C 
37008     65 6E       | 	byte	"setlen"
3700a     00          | 	byte	0
3700b                 | LR__5711
3700b     73 6C 2E    | 	byte	"sl."
3700e     00          | 	byte	0
3700f                 | LR__5712
3700f     73 65 74 70 
37013     61 6E       | 	byte	"setpan"
37015     00          | 	byte	0
37016                 | LR__5713
37016     73 70 2E    | 	byte	"sp."
37019     00          | 	byte	0
3701a                 | LR__5714
3701a     73 65 74 73 
3701e     75 73 74 61 
37022     69 6E       | 	byte	"setsustain"
37024     00          | 	byte	0
37025                 | LR__5715
37025     73 73 2E    | 	byte	"ss."
37028     00          | 	byte	0
37029                 | LR__5716
37029     73 65 74 76 
3702d     6F 6C       | 	byte	"setvol"
3702f     00          | 	byte	0
37030                 | LR__5717
37030     73 76 2E    | 	byte	"sv."
37033     00          | 	byte	0
37034                 | LR__5718
37034     73 65 74 77 
37038     61 76 65    | 	byte	"setwave"
3703b     00          | 	byte	0
3703c                 | LR__5719
3703c     73 77 2E    | 	byte	"sw."
3703f     00          | 	byte	0
37040                 | LR__5720
37040     73 65 74 77 
37044     61 76       | 	byte	"setwav"
37046     00          | 	byte	0
37047                 | LR__5721
37047     73 68 75 74 
3704b     75 70       | 	byte	"shutup"
3704d     00          | 	byte	0
3704e                 | LR__5722
3704e     73 68 2E    | 	byte	"sh."
37051     00          | 	byte	0
37052                 | LR__5723
37052     73 6F 75 6E 
37056     64          | 	byte	"sound"
37057     00          | 	byte	0
37058                 | LR__5724
37058     73 6F 2E    | 	byte	"so."
3705b     00          | 	byte	0
3705c                 | LR__5725
3705c     73 70 72 69 
37060     74 65       | 	byte	"sprite"
37062     00          | 	byte	0
37063                 | LR__5726
37063     73 70 72 2E | 	byte	"spr."
37067     00          | 	byte	0
37068                 | LR__5727
37068     74 68 65 6E | 	byte	"then"
3706c     00          | 	byte	0
3706d                 | LR__5728
3706d     77 61 69 74 
37071     6D 73       | 	byte	"waitms"
37073     00          | 	byte	0
37074                 | LR__5729
37074     77 2E       | 	byte	"w."
37076     00          | 	byte	0
37077                 | LR__5730
37077     77 61 69 74 
3707b     63 6C 6F 63 
3707f     6B          | 	byte	"waitclock"
37080     00          | 	byte	0
37081                 | LR__5731
37081     77 63 2E    | 	byte	"wc."
37084     00          | 	byte	0
37085                 | LR__5732
37085     77 61 69 74 
37089     76 62 6C    | 	byte	"waitvbl"
3708c     00          | 	byte	0
3708d                 | LR__5733
3708d     77 76 2E    | 	byte	"wv."
37090     00          | 	byte	0
37091                 | LR__5734
37091     77 72 70 69 
37095     6E          | 	byte	"wrpin"
37096     00          | 	byte	0
37097                 | LR__5735
37097     77 78 70 69 
3709b     6E          | 	byte	"wxpin"
3709c     00          | 	byte	0
3709d                 | LR__5736
3709d     77 79 70 69 
370a1     6E          | 	byte	"wypin"
370a2     00          | 	byte	0
370a3                 | LR__5737
370a3     61 62 73    | 	byte	"abs"
370a6     00          | 	byte	0
370a7                 | LR__5738
370a7     61 63 6F 73 | 	byte	"acos"
370ab     00          | 	byte	0
370ac                 | LR__5739
370ac     61 64 72    | 	byte	"adr"
370af     00          | 	byte	0
370b0                 | LR__5740
370b0     61 64 64 72 | 	byte	"addr"
370b4     00          | 	byte	0
370b5                 | LR__5741
370b5     61 73 63    | 	byte	"asc"
370b8     00          | 	byte	0
370b9                 | LR__5742
370b9     61 73 69 6E | 	byte	"asin"
370bd     00          | 	byte	0
370be                 | LR__5743
370be     61 74 6E    | 	byte	"atn"
370c1     00          | 	byte	0
370c2                 | LR__5744
370c2     62 69 6E 24 | 	byte	"bin$"
370c6     00          | 	byte	0
370c7                 | LR__5745
370c7     63 68 72 24 | 	byte	"chr$"
370cb     00          | 	byte	0
370cc                 | LR__5746
370cc     63 6F 67 69 
370d0     6E 69 74    | 	byte	"coginit"
370d3     00          | 	byte	0
370d4                 | LR__5747
370d4     63 6F 73    | 	byte	"cos"
370d7     00          | 	byte	0
370d8                 | LR__5748
370d8     64 70 65 65 
370dc     6B          | 	byte	"dpeek"
370dd     00          | 	byte	0
370de                 | LR__5749
370de     66 72 61 6D 
370e2     65 62 75 66 | 	byte	"framebuf"
370e6     00          | 	byte	0
370e7                 | LR__5750
370e7     66 62 2E    | 	byte	"fb."
370ea     00          | 	byte	0
370eb                 | LR__5751
370eb     66 72 65    | 	byte	"fre"
370ee     00          | 	byte	0
370ef                 | LR__5752
370ef     67 63 2E    | 	byte	"gc."
370f2     00          | 	byte	0
370f3                 | LR__5753
370f3     67 65 74 63 
370f7     6F 6C 6F 72 | 	byte	"getcolor"
370fb     00          | 	byte	0
370fc                 | LR__5754
370fc     67 65 74 70 
37100     69 78 65 6C | 	byte	"getpixel"
37104     00          | 	byte	0
37105                 | LR__5755
37105     67 65 2E    | 	byte	"ge."
37108     00          | 	byte	0
37109                 | LR__5756
37109     67 65 74 65 
3710d     6E 76 73 75 
37111     73 74 61 69 
37115     6E          | 	byte	"getenvsustain"
37116     00          | 	byte	0
37117                 | LR__5757
37117     67 65 74 6E 
3711b     6F 74 65 76 
3711f     61 6C 75 65 | 	byte	"getnotevalue"
37123     00          | 	byte	0
37124                 | LR__5758
37124     67 65 74 74 
37128     69 6D 65    | 	byte	"gettime"
3712b     00          | 	byte	0
3712c                 | LR__5759
3712c     67 74 2E    | 	byte	"gt."
3712f     00          | 	byte	0
37130                 | LR__5760
37130     68 65 78 24 | 	byte	"hex$"
37134     00          | 	byte	0
37135                 | LR__5761
37135     69 6E 6B 65 
37139     79 24       | 	byte	"inkey$"
3713b     00          | 	byte	0
3713c                 | LR__5762
3713c     69 6E 74    | 	byte	"int"
3713f     00          | 	byte	0
37140                 | LR__5763
37140     6C 65 66 74 
37144     24          | 	byte	"left$"
37145     00          | 	byte	0
37146                 | LR__5764
37146     6C 65 6E    | 	byte	"len"
37149     00          | 	byte	0
3714a                 | LR__5765
3714a     6C 6F 67    | 	byte	"log"
3714d     00          | 	byte	0
3714e                 | LR__5766
3714e     6C 70 65 65 
37152     6B          | 	byte	"lpeek"
37153     00          | 	byte	0
37154                 | LR__5767
37154     6D 65 6D 74 
37158     6F 70       | 	byte	"memtop"
3715a     00          | 	byte	0
3715b                 | LR__5768
3715b     6D 65 6D 6C 
3715f     6F          | 	byte	"memlo"
37160     00          | 	byte	0
37161                 | LR__5769
37161     6D 69 64 24 | 	byte	"mid$"
37165     00          | 	byte	0
37166                 | LR__5770
37166     6D 6F 75 73 
3716a     65 6B       | 	byte	"mousek"
3716c     00          | 	byte	0
3716d                 | LR__5771
3716d     6D 6F 75 73 
37171     65 77       | 	byte	"mousew"
37173     00          | 	byte	0
37174                 | LR__5772
37174     6D 6F 75 73 
37178     65 78       | 	byte	"mousex"
3717a     00          | 	byte	0
3717b                 | LR__5773
3717b     6D 6F 75 73 
3717f     65 79       | 	byte	"mousey"
37181     00          | 	byte	0
37182                 | LR__5774
37182     70 61 64 78 | 	byte	"padx"
37186     00          | 	byte	0
37187                 | LR__5775
37187     70 61 64 79 | 	byte	"pady"
3718b     00          | 	byte	0
3718c                 | LR__5776
3718c     70 61 64 7A | 	byte	"padz"
37190     00          | 	byte	0
37191                 | LR__5777
37191     70 61 64 72 
37195     78          | 	byte	"padrx"
37196     00          | 	byte	0
37197                 | LR__5778
37197     70 61 64 72 
3719b     79          | 	byte	"padry"
3719c     00          | 	byte	0
3719d                 | LR__5779
3719d     70 61 64 72 
371a1     7A          | 	byte	"padrz"
371a2     00          | 	byte	0
371a3                 | LR__5780
371a3     70 61 64 68 | 	byte	"padh"
371a7     00          | 	byte	0
371a8                 | LR__5781
371a8     70 65 65 6B | 	byte	"peek"
371ac     00          | 	byte	0
371ad                 | LR__5782
371ad     70 69 6E 72 
371b1     65 61 64    | 	byte	"pinread"
371b4     00          | 	byte	0
371b5                 | LR__5783
371b5     72 64 70 69 
371b9     6E          | 	byte	"rdpin"
371ba     00          | 	byte	0
371bb                 | LR__5784
371bb     72 69 67 68 
371bf     74 24       | 	byte	"right$"
371c1     00          | 	byte	0
371c2                 | LR__5785
371c2     72 71 70 69 
371c6     6E          | 	byte	"rqpin"
371c7     00          | 	byte	0
371c8                 | LR__5786
371c8     72 6F 75 6E 
371cc     64          | 	byte	"round"
371cd     00          | 	byte	0
371ce                 | LR__5787
371ce     72 6E 64    | 	byte	"rnd"
371d1     00          | 	byte	0
371d2                 | LR__5788
371d2     73 69 6E    | 	byte	"sin"
371d5     00          | 	byte	0
371d6                 | LR__5789
371d6     73 71 72    | 	byte	"sqr"
371d9     00          | 	byte	0
371da                 | LR__5790
371da     73 74 69 63 
371de     6B          | 	byte	"stick"
371df     00          | 	byte	0
371e0                 | LR__5791
371e0     73 74 72 69 
371e4     67          | 	byte	"strig"
371e5     00          | 	byte	0
371e6                 | LR__5792
371e6     73 74 72 24 | 	byte	"str$"
371ea     00          | 	byte	0
371eb                 | LR__5793
371eb     74 61 6E    | 	byte	"tan"
371ee     00          | 	byte	0
371ef                 | LR__5794
371ef     76 61 6C    | 	byte	"val"
371f2     00          | 	byte	0
371f3                 | LR__5795
371f3     76 61 72 70 
371f7     74 72       | 	byte	"varptr"
371f9     00          | 	byte	0
371fa                 | LR__5796
371fa     61          | 	byte	"a"
371fb     00          | 	byte	0
371fc                 | LR__5797
371fc     7A          | 	byte	"z"
371fd     00          | 	byte	0
371fe                 | LR__5798
371fe     5F          | 	byte	"_"
371ff     00          | 	byte	0
37200                 | LR__5799
37200     61          | 	byte	"a"
37201     00          | 	byte	0
37202                 | LR__5800
37202     7A          | 	byte	"z"
37203     00          | 	byte	0
37204                 | LR__5801
37204     30          | 	byte	"0"
37205     00          | 	byte	0
37206                 | LR__5802
37206     39          | 	byte	"9"
37207     00          | 	byte	0
37208                 | LR__5803
37208     5F          | 	byte	"_"
37209     00          | 	byte	0
3720a                 | LR__5804
3720a     2E          | 	byte	"."
3720b     00          | 	byte	0
3720c                 | LR__5805
3720c     61          | 	byte	"a"
3720d     00          | 	byte	0
3720e                 | LR__5806
3720e     7A          | 	byte	"z"
3720f     00          | 	byte	0
37210                 | LR__5807
37210     30          | 	byte	"0"
37211     00          | 	byte	0
37212                 | LR__5808
37212     39          | 	byte	"9"
37213     00          | 	byte	0
37214                 | LR__5809
37214     5F          | 	byte	"_"
37215     00          | 	byte	0
37216                 | LR__5810
37216     24          | 	byte	"$"
37217     00          | 	byte	0
37218                 | LR__5811
37218     25          | 	byte	"%"
37219     00          | 	byte	0
3721a                 | LR__5812
3721a     21          | 	byte	"!"
3721b     00          | 	byte	0
3721c                 | LR__5813
3721c     30          | 	byte	"0"
3721d     00          | 	byte	0
3721e                 | LR__5814
3721e     39          | 	byte	"9"
3721f     00          | 	byte	0
37220                 | LR__5815
37220     2E          | 	byte	"."
37221     00          | 	byte	0
37222                 | LR__5816
37222     24          | 	byte	"$"
37223     00          | 	byte	0
37224                 | LR__5817
37224     25          | 	byte	"%"
37225     00          | 	byte	0
37226                 | LR__5818
37226     2D          | 	byte	"-"
37227     00          | 	byte	0
37228                 | LR__5819
37228     2E          | 	byte	"."
37229     00          | 	byte	0
3722a                 | LR__5820
3722a     24          | 	byte	"$"
3722b     00          | 	byte	0
3722c                 | LR__5821
3722c     25          | 	byte	"%"
3722d     00          | 	byte	0
3722e                 | LR__5822
3722e     30          | 	byte	"0"
3722f     00          | 	byte	0
37230                 | LR__5823
37230     39          | 	byte	"9"
37231     00          | 	byte	0
37232                 | LR__5824
37232     5F          | 	byte	"_"
37233     00          | 	byte	0
37234                 | LR__5825
37234     2E          | 	byte	"."
37235     00          | 	byte	0
37236                 | LR__5826
37236     45          | 	byte	"E"
37237     00          | 	byte	0
37238                 | LR__5827
37238     65          | 	byte	"e"
37239     00          | 	byte	0
3723a                 | LR__5828
3723a     2D          | 	byte	"-"
3723b     00          | 	byte	0
3723c                 | LR__5829
3723c     61          | 	byte	"a"
3723d     00          | 	byte	0
3723e                 | LR__5830
3723e     66          | 	byte	"f"
3723f     00          | 	byte	0
37240                 | LR__5831
37240     30          | 	byte	"0"
37241     00          | 	byte	0
37242                 | LR__5832
37242     31          | 	byte	"1"
37243     00          | 	byte	0
37244                 | LR__5833
37244     5F          | 	byte	"_"
37245     00          | 	byte	0
37246                 | LR__5834
37246     2D          | 	byte	"-"
37247     00          | 	byte	0
37248                 | LR__5835
37248     65          | 	byte	"e"
37249     00          | 	byte	0
3724a                 | LR__5836
3724a     2E          | 	byte	"."
3724b     00          | 	byte	0
3724c                 | LR__5837
3724c     45          | 	byte	"E"
3724d     00          | 	byte	0
3724e                 | LR__5838
3724e     65          | 	byte	"e"
3724f     00          | 	byte	0
37250                 | LR__5839
37250     30          | 	byte	"0"
37251     00          | 	byte	0
37252                 | LR__5840
37252     39          | 	byte	"9"
37253     00          | 	byte	0
37254                 | LR__5841
37254     24          | 	byte	"$"
37255     00          | 	byte	0
37256                 | LR__5842
37256     25          | 	byte	"%"
37257     00          | 	byte	0
37258                 | LR__5843
37258     2D          | 	byte	"-"
37259     00          | 	byte	0
3725a                 | LR__5844
3725a     24          | 	byte	"$"
3725b     00          | 	byte	0
3725c                 | LR__5845
3725c     25          | 	byte	"%"
3725d     00          | 	byte	0
3725e                 | LR__5846
3725e     30          | 	byte	"0"
3725f     00          | 	byte	0
37260                 | LR__5847
37260     39          | 	byte	"9"
37261     00          | 	byte	0
37262                 | LR__5848
37262     5F          | 	byte	"_"
37263     00          | 	byte	0
37264                 | LR__5849
37264     30          | 	byte	"0"
37265     00          | 	byte	0
37266                 | LR__5850
37266     39          | 	byte	"9"
37267     00          | 	byte	0
37268                 | LR__5851
37268     61          | 	byte	"a"
37269     00          | 	byte	0
3726a                 | LR__5852
3726a     66          | 	byte	"f"
3726b     00          | 	byte	0
3726c                 | LR__5853
3726c     5F          | 	byte	"_"
3726d     00          | 	byte	0
3726e                 | LR__5854
3726e     30          | 	byte	"0"
3726f     00          | 	byte	0
37270                 | LR__5855
37270     31          | 	byte	"1"
37271     00          | 	byte	0
37272                 | LR__5856
37272     5F          | 	byte	"_"
37273     00          | 	byte	0
37274                 | LR__5857
37274     30          | 	byte	"0"
37275     00          | 	byte	0
37276                 | LR__5858
37276     39          | 	byte	"9"
37277     00          | 	byte	0
37278                 | LR__5859
37278     5F          | 	byte	"_"
37279     00          | 	byte	0
3727a                 | LR__5860
3727a     22          | 	byte	34
3727b     00          | 	byte	0
3727c                 | LR__5861
3727c     22          | 	byte	34
3727d     00          | 	byte	0
3727e                 | LR__5862
3727e     44 69 6D 3A 
37282     20 61 74 20 
37286     6C 69 6E 65 
3728a     20          | 	byte	"Dim: at line "
3728b     00          | 	byte	0
3728c                 | LR__5863
3728c     3A 20 77 61 
37290     72 6E 69 6E 
37294     67 3A 20 74 
37298     68 65 20 76 
3729c     61 72 69 61 
372a0     62 6C 65 20 
372a4     65 78 69 73 
372a8     74 65 64 2E | 	byte	": warning: the variable existed."
372ac     00          | 	byte	0
372ad                 | LR__5864
372ad     28          | 	byte	"("
372ae     00          | 	byte	0
372af                 | LR__5865
372af     61 73       | 	byte	"as"
372b1     00          | 	byte	0
372b2                 | LR__5866
372b2     61 73       | 	byte	"as"
372b4     00          | 	byte	0
372b5                 | LR__5867
372b5     2C          | 	byte	","
372b6     00          | 	byte	0
372b7                 | LR__5868
372b7     29          | 	byte	")"
372b8     00          | 	byte	0
372b9                 | LR__5869
372b9     29          | 	byte	")"
372ba     00          | 	byte	0
372bb                 | LR__5870
372bb     61 73       | 	byte	"as"
372bd     00          | 	byte	0
372be                 | LR__5871
372be     62 79 74 65 | 	byte	"byte"
372c2     00          | 	byte	0
372c3                 | LR__5872
372c3     75 62 79 74 
372c7     65          | 	byte	"ubyte"
372c8     00          | 	byte	0
372c9                 | LR__5873
372c9     73 68 6F 72 
372cd     74          | 	byte	"short"
372ce     00          | 	byte	0
372cf                 | LR__5874
372cf     75 73 68 6F 
372d3     72 74       | 	byte	"ushort"
372d5     00          | 	byte	0
372d6                 | LR__5875
372d6     6C 6F 6E 67 | 	byte	"long"
372da     00          | 	byte	0
372db                 | LR__5876
372db     69 6E 74 65 
372df     67 65 72    | 	byte	"integer"
372e2     00          | 	byte	0
372e3                 | LR__5877
372e3     75 6C 6F 6E 
372e7     67          | 	byte	"ulong"
372e8     00          | 	byte	0
372e9                 | LR__5878
372e9     69 6E 74 36 
372ed     34          | 	byte	"int64"
372ee     00          | 	byte	0
372ef                 | LR__5879
372ef     75 69 6E 74 
372f3     36 34       | 	byte	"uint64"
372f5     00          | 	byte	0
372f6                 | LR__5880
372f6     73 69 6E 67 
372fa     6C 65       | 	byte	"single"
372fc     00          | 	byte	0
372fd                 | LR__5881
372fd     64 6F 75 62 
37301     6C 65       | 	byte	"double"
37303     00          | 	byte	0
37304                 | LR__5882
37304     73 74 72 69 
37308     6E 67       | 	byte	"string"
3730a     00          | 	byte	0
3730b                 | LR__5883
3730b     74 6F       | 	byte	"to"
3730d     00          | 	byte	0
3730e                 | LR__5884
3730e     73 74 65 70 | 	byte	"step"
37312     00          | 	byte	0
37313                 | LR__5885
37313     73 2E       | 	byte	"s."
37315     00          | 	byte	0
37316                 | LR__5886
37316     73 2E       | 	byte	"s."
37318     00          | 	byte	0
37319                 | LR__5887
37319     67 6F 74 6F | 	byte	"goto"
3731d     00          | 	byte	0
3731e                 | LR__5888
3731e     67 6F 73 75 
37322     62          | 	byte	"gosub"
37323     00          | 	byte	0
37324                 | LR__5889
37324     24          | 	byte	"$"
37325     00          | 	byte	0
37326                 | LR__5890
37326     26 68       | 	byte	"&h"
37328     00          | 	byte	0
37329                 | LR__5891
37329     25          | 	byte	"%"
3732a     00          | 	byte	0
3732b                 | LR__5892
3732b     26 62       | 	byte	"&b"
3732d     00          | 	byte	0
3732e                 | LR__5893
3732e                 | 	byte	
3732e     00          | 	byte	0
3732f                 | LR__5894
3732f     61 63 6F 73 
37333     3A 20       | 	byte	"acos: "
37335     00          | 	byte	0
37336                 | LR__5895
37336     61 73 63 3A 
3733a     20          | 	byte	"asc: "
3733b     00          | 	byte	0
3733c                 | LR__5896
3733c     61 73 63 3A 
37340     20          | 	byte	"asc: "
37341     00          | 	byte	0
37342                 | LR__5897
37342     61 73 69 6E 
37346     3A 20       | 	byte	"asin: "
37348     00          | 	byte	0
37349                 | LR__5898
37349     61 74 6E 3A 
3734d     20          | 	byte	"atn: "
3734e     00          | 	byte	0
3734f                 | LR__5899
3734f     62 6C 69 74 
37353     3A 20       | 	byte	"blit: "
37355     00          | 	byte	0
37356                 | LR__5900
37356     62 69 6E 24 
3735a     3A 20       | 	byte	"bin$: "
3735c     00          | 	byte	0
3735d                 | LR__5901
3735d     2F          | 	byte	"/"
3735e     00          | 	byte	0
3735f                 | LR__5902
3735f     2F 73 64 2F 
37363     62 69 6E 2F | 	byte	"/sd/bin/"
37367     00          | 	byte	0
37368                 | LR__5903
37368     53 79 73 74 
3736c     65 6D 20 65 
37370     72 72 6F 72 
37374     20          | 	byte	"System error "
37375     00          | 	byte	0
37376                 | LR__5904
37376     3A 20       | 	byte	": "
37378     00          | 	byte	0
37379                 | LR__5905
37379     2A          | 	byte	"*"
3737a     00          | 	byte	0
3737b                 | LR__5906
3737b     2E 2E       | 	byte	".."
3737d     00          | 	byte	0
3737e                 | LR__5907
3737e     2F          | 	byte	"/"
3737f     00          | 	byte	0
37380                 | LR__5908
37380     2F          | 	byte	"/"
37381     00          | 	byte	0
37382                 | LR__5909
37382     53 79 73 74 
37386     65 6D 20 65 
3738a     72 72 6F 72 
3738e     20          | 	byte	"System error "
3738f     00          | 	byte	0
37390                 | LR__5910
37390     3A 20       | 	byte	": "
37392     00          | 	byte	0
37393                 | LR__5911
37393     43 75 72 72 
37397     65 6E 74 20 
3739b     64 69 72 65 
3739f     63 74 6F 72 
373a3     79 3A 20    | 	byte	"Current directory: "
373a6     00          | 	byte	0
373a7                 | LR__5912
373a7     2F          | 	byte	"/"
373a8     00          | 	byte	0
373a9                 | LR__5913
373a9     53 79 73 74 
373ad     65 6D 20 65 
373b1     72 72 6F 72 
373b5     20          | 	byte	"System error "
373b6     00          | 	byte	0
373b7                 | LR__5914
373b7     3A 20       | 	byte	": "
373b9     00          | 	byte	0
373ba                 | LR__5915
373ba     43 75 72 72 
373be     65 6E 74 20 
373c2     64 69 72 65 
373c6     63 74 6F 72 
373ca     79 3A 20    | 	byte	"Current directory: "
373cd     00          | 	byte	0
373ce                 | LR__5916
373ce     2F          | 	byte	"/"
373cf     00          | 	byte	0
373d0                 | LR__5917
373d0     2F          | 	byte	"/"
373d1     00          | 	byte	0
373d2                 | LR__5918
373d2     2F          | 	byte	"/"
373d3     00          | 	byte	0
373d4                 | LR__5919
373d4     53 79 73 74 
373d8     65 6D 20 65 
373dc     72 72 6F 72 
373e0     20          | 	byte	"System error "
373e1     00          | 	byte	0
373e2                 | LR__5920
373e2     3A 20       | 	byte	": "
373e4     00          | 	byte	0
373e5                 | LR__5921
373e5     43 75 72 72 
373e9     65 6E 74 20 
373ed     64 69 72 65 
373f1     63 74 6F 72 
373f5     79 3A 20    | 	byte	"Current directory: "
373f8     00          | 	byte	0
373f9                 | LR__5922
373f9     63 68 72 24 
373fd     3A 20       | 	byte	"chr$: "
373ff     00          | 	byte	0
37400                 | LR__5923
37400     63 68 61 6E 
37404     6E 65 6C 23 
37408     20 65 78 70 
3740c     65 63 74 65 
37410     64          | 	byte	"channel# expected"
37411     00          | 	byte	0
37412                 | LR__5924
37412     63 6F 67 69 
37416     6E 69 74 3A 
3741a     20          | 	byte	"coginit: "
3741b     00          | 	byte	0
3741c                 | LR__5925
3741c     53 79 73 74 
37420     65 6D 20 65 
37424     72 72 6F 72 
37428     20 2D 20    | 	byte	"System error - "
3742b     00          | 	byte	0
3742c                 | LR__5926
3742c     20 69 6E 20 
37430     6C 69 6E 65 
37434     20          | 	byte	" in line "
37435     00          | 	byte	0
37436                 | LR__5927
37436     3A 20       | 	byte	": "
37438     00          | 	byte	0
37439                 | LR__5928
37439     2C 20 66 69 
3743d     6C 65 20 6E 
37441     61 6D 65 3A 
37445     20          | 	byte	", file name: "
37446     00          | 	byte	0
37447                 | LR__5929
37447     53 79 73 74 
3744b     65 6D 20 65 
3744f     72 72 6F 72 
37453     20 2D 20    | 	byte	"System error - "
37456     00          | 	byte	0
37457                 | LR__5930
37457     20 69 6E 20 
3745b     6C 69 6E 65 
3745f     20          | 	byte	" in line "
37460     00          | 	byte	0
37461                 | LR__5931
37461     3A 20       | 	byte	": "
37463     00          | 	byte	0
37464                 | LR__5932
37464     2C 20 66 69 
37468     6C 65 20 6E 
3746c     61 6D 65 3A 
37470     20          | 	byte	", file name: "
37471     00          | 	byte	0
37472                 | LR__5933
37472     63 6F 73 3A 
37476     20          | 	byte	"cos: "
37477     00          | 	byte	0
37478                 | LR__5934
37478                 | 	byte	
37478     00          | 	byte	0
37479                 | LR__5935
37479                 | 	byte	
37479     00          | 	byte	0
3747a                 | LR__5936
3747a     2F 73 64 2F 
3747e     6D 65 64 69 
37482     61 2F 68 2F | 	byte	"/sd/media/h/"
37486     00          | 	byte	0
37487                 | LR__5937
37487     53 79 73 74 
3748b     65 6D 20 65 
3748f     72 72 6F 72 
37493     20          | 	byte	"System error "
37494     00          | 	byte	0
37495                 | LR__5938
37495     3A 20       | 	byte	": "
37497     00          | 	byte	0
37498                 | LR__5939
37498                 | 	byte	
37498     00          | 	byte	0
37499                 | LR__5940
37499                 | 	byte	
37499     00          | 	byte	0
3749a                 | LR__5941
3749a     2F 73 64 2F 
3749e     6D 65 64 69 
374a2     61 2F 73 2F | 	byte	"/sd/media/s/"
374a6     00          | 	byte	0
374a7                 | LR__5942
374a7     53 79 73 74 
374ab     65 6D 20 65 
374af     72 72 6F 72 
374b3     20          | 	byte	"System error "
374b4     00          | 	byte	0
374b5                 | LR__5943
374b5     3A 20       | 	byte	": "
374b7     00          | 	byte	0
374b8                 | LR__5944
374b8     2F          | 	byte	"/"
374b9     00          | 	byte	0
374ba                 | LR__5945
374ba     2F          | 	byte	"/"
374bb     00          | 	byte	0
374bc                 | LR__5946
374bc     2F          | 	byte	"/"
374bd     00          | 	byte	0
374be                 | LR__5947
374be     43 61 6E 6E 
374c2     6F 74 20 64 
374c6     65 6C 65 74 
374ca     65 20 66 69 
374ce     6C 65 20 6F 
374d2     72 20 66 69 
374d6     6C 65 20 64 
374da     6F 65 73 6E 
374de     27 74 20 65 
374e2     78 69 73 74 
374e6     3A 20 73 79 
374ea     73 74 65 6D 
374ee     20 65 72 72 
374f2     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
374f5     00          | 	byte	0
374f6                 | LR__5948
374f6     43 75 72 72 
374fa     65 6E 74 20 
374fe     64 69 72 65 
37502     63 74 6F 72 
37506     79 3A 20    | 	byte	"Current directory: "
37509     00          | 	byte	0
3750a                 | LR__5949
3750a                 | 	byte	
3750a     00          | 	byte	0
3750b                 | LR__5950
3750b     2A          | 	byte	"*"
3750c     00          | 	byte	0
3750d                 | LR__5951
3750d                 | 	byte	
3750d     00          | 	byte	0
3750e                 | LR__5952
3750e     5B 64 69 72 
37512     5D 20       | 	byte	"[dir] "
37514     00          | 	byte	0
37515                 | LR__5953
37515     4D 6F 72 65 
37519     20 74 68 61 
3751d     6E 20 31 32 
37521     38 20 65 6E 
37525     74 72 69 65 
37529     73 20 66 6F 
3752d     75 6E 64 3A 
37531     20 63 6C 65 
37535     61 6E 20 79 
37539     6F 75 72 20 
3753d     64 69 72 65 
37541     63 74 6F 72 
37545     79          | 	byte	"More than 128 entries found: clean your directory"
37546     00          | 	byte	0
37547                 | LR__5954
37547     2A          | 	byte	"*"
37548     00          | 	byte	0
37549                 | LR__5955
37549                 | 	byte	
37549     00          | 	byte	0
3754a                 | LR__5956
3754a     4D 6F 72 65 
3754e     20 74 68 61 
37552     6E 20 31 32 
37556     38 20 65 6E 
3755a     74 72 69 65 
3755e     73 20 66 6F 
37562     75 6E 64 3A 
37566     20 63 6C 65 
3756a     61 6E 20 79 
3756e     6F 75 72 20 
37572     64 69 72 65 
37576     63 74 6F 72 
3757a     79          | 	byte	"More than 128 entries found: clean your directory"
3757b     00          | 	byte	0
3757c                 | LR__5957
3757c     45 72 72 6F 
37580     72 20       | 	byte	"Error "
37582     00          | 	byte	0
37583                 | LR__5958
37583     3A 20       | 	byte	": "
37585     00          | 	byte	0
37586                 | LR__5959
37586     67 65 74 63 
3758a     6F 6C 6F 72 
3758e     20          | 	byte	"getcolor "
3758f     00          | 	byte	0
37590                 | LR__5960
37590     67 65 74 65 
37594     6E 76 73 75 
37598     73 74 61 69 
3759c     6E 3A 20    | 	byte	"getenvsustain: "
3759f     00          | 	byte	0
375a0                 | LR__5961
375a0     67 65 74 70 
375a4     69 78 65 6C 
375a8     3A 20       | 	byte	"getpixel: "
375aa     00          | 	byte	0
375ab                 | LR__5962
375ab     68 65 78 24 
375af     3A 20       | 	byte	"hex$: "
375b1     00          | 	byte	0
375b2                 | LR__5963
375b2                 | 	byte	
375b2     00          | 	byte	0
375b3                 | LR__5964
375b3     49 6E 20 69 
375b7     6E 70 75 74 
375bb     3A 20       | 	byte	"In input: "
375bd     00          | 	byte	0
375be                 | LR__5965
375be     2C          | 	byte	","
375bf     00          | 	byte	0
375c0                 | LR__5966
375c0                 | 	byte	
375c0     00          | 	byte	0
375c1                 | LR__5967
375c1                 | 	byte	
375c1     00          | 	byte	0
375c2                 | LR__5968
375c2     6C 65 66 74 
375c6     24 3A 20    | 	byte	"left$: "
375c9     00          | 	byte	0
375ca                 | LR__5969
375ca     6C 65 66 74 
375ce     24 3A 20    | 	byte	"left$: "
375d1     00          | 	byte	0
375d2                 | LR__5970
375d2     6C 65 6E 3A 
375d6     20          | 	byte	"len: "
375d7     00          | 	byte	0
375d8                 | LR__5971
375d8     6C 65 6E 3A 
375dc     20          | 	byte	"len: "
375dd     00          | 	byte	0
375de                 | LR__5972
375de                 | 	byte	
375de     00          | 	byte	0
375df                 | LR__5973
375df     2F          | 	byte	"/"
375e0     00          | 	byte	0
375e1                 | LR__5974
375e1     2F          | 	byte	"/"
375e2     00          | 	byte	0
375e3                 | LR__5975
375e3     2E 62 61 73 | 	byte	".bas"
375e7     00          | 	byte	0
375e8                 | LR__5976
375e8     53 79 73 74 
375ec     65 6D 20 65 
375f0     72 72 6F 72 
375f4     20          | 	byte	"System error "
375f5     00          | 	byte	0
375f6                 | LR__5977
375f6     3A 20       | 	byte	": "
375f8     00          | 	byte	0
375f9                 | LR__5978
375f9     2E 62 61 73 | 	byte	".bas"
375fd     00          | 	byte	0
375fe                 | LR__5979
375fe     2F          | 	byte	"/"
375ff     00          | 	byte	0
37600                 | LR__5980
37600                 | 	byte	
37600     00          | 	byte	0
37601                 | LR__5981
37601     4C 6F 61 64 
37605     65 64 20    | 	byte	"Loaded "
37608     00          | 	byte	0
37609                 | LR__5982
37609     2F          | 	byte	"/"
3760a     00          | 	byte	0
3760b                 | LR__5983
3760b     6C 6F 67 3A 
3760f     20          | 	byte	"log: "
37610     00          | 	byte	0
37611                 | LR__5984
37611     6D 69 64 24 
37615     3A 20       | 	byte	"mid$: "
37617     00          | 	byte	0
37618                 | LR__5985
37618     6D 69 64 24 
3761c     3A 20       | 	byte	"mid$: "
3761e     00          | 	byte	0
3761f                 | LR__5986
3761f     43 61 6E 6E 
37623     6F 74 20 63 
37627     72 65 61 74 
3762b     65 20 61 20 
3762f     64 69 72 65 
37633     63 74 6F 72 
37637     79 3A 20 73 
3763b     79 73 74 65 
3763f     6D 20 65 72 
37643     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
37647     00          | 	byte	0
37648                 | LR__5987
37648     20 42 41 53 
3764c     49 43 20 62 
37650     79 74 65 73 
37654     20 66 72 65 
37658     65          | 	byte	" BASIC bytes free"
37659     00          | 	byte	0
3765a                 | LR__5988
3765a                 | 	byte	
3765a     00          | 	byte	0
3765b                 | LR__5989
3765b                 | 	byte	
3765b     00          | 	byte	0
3765c                 | LR__5990
3765c                 | 	byte	
3765c     00          | 	byte	0
3765d                 | LR__5991
3765d     6E 6F 6E 61 
37661     6D 65 2E 62 
37665     61 73       | 	byte	"noname.bas"
37667     00          | 	byte	0
37668                 | LR__5992
37668     66 69 6C 65 
3766c     6E 61 6D 65 
37670     20 65 78 70 
37674     65 63 74 65 
37678     64          | 	byte	"filename expected"
37679     00          | 	byte	0
3767a                 | LR__5993
3767a     72 65 61 64 | 	byte	"read"
3767e     00          | 	byte	0
3767f                 | LR__5994
3767f     77 72 69 74 
37683     65          | 	byte	"write"
37684     00          | 	byte	0
37685                 | LR__5995
37685     61 70 70 65 
37689     6E 64       | 	byte	"append"
3768b     00          | 	byte	0
3768c                 | LR__5996
3768c     63 68 61 6E 
37690     6E 65 6C 23 
37694     20 65 78 70 
37698     65 63 74 65 
3769c     64          | 	byte	"channel# expected"
3769d     00          | 	byte	0
3769e                 | LR__5997
3769e     4F 70 65 6E 
376a2     3A 20 69 6E 
376a6     76 61 6C 69 
376aa     64 20 6D 6F 
376ae     64 65       | 	byte	"Open: invalid mode"
376b0     00          | 	byte	0
376b1                 | LR__5998
376b1     70 61 64 68 
376b5     3A 20       | 	byte	"padh: "
376b7     00          | 	byte	0
376b8                 | LR__5999
376b8     70 61 64 72 
376bc     78 3A 20    | 	byte	"padrx: "
376bf     00          | 	byte	0
376c0                 | LR__6000
376c0     70 61 64 72 
376c4     79 3A 20    | 	byte	"padry: "
376c7     00          | 	byte	0
376c8                 | LR__6001
376c8     70 61 64 72 
376cc     7A 3A 20    | 	byte	"padrz: "
376cf     00          | 	byte	0
376d0                 | LR__6002
376d0     70 61 64 78 
376d4     3A 20       | 	byte	"padx: "
376d6     00          | 	byte	0
376d7                 | LR__6003
376d7     70 61 64 79 
376db     3A 20       | 	byte	"pady: "
376dd     00          | 	byte	0
376de                 | LR__6004
376de     70 61 64 7A 
376e2     3A 20       | 	byte	"padz: "
376e4     00          | 	byte	0
376e5                 | LR__6005
376e5     50 72 69 6E 
376e9     74 20 74 6F 
376ed     20 63 68 61 
376f1     6E 6E 65 6C 
376f5     20 28 6E 6F 
376f9     74 20 79 65 
376fd     74 20 69 6D 
37701     70 6C 65 6D 
37705     65 6E 74 65 
37709     64 29       | 	byte	"Print to channel (not yet implemented)"
3770b     00          | 	byte	0
3770c                 | LR__6006
3770c                 | 	byte	
3770c     00          | 	byte	0
3770d                 | LR__6007
3770d     64 61 74 61 | 	byte	"data"
37711     00          | 	byte	0
37712                 | LR__6008
37712                 | 	byte	
37712     00          | 	byte	0
37713                 | LR__6009
37713     49 6E 20 72 
37717     65 61 64 3A 
3771b     20          | 	byte	"In read: "
3771c     00          | 	byte	0
3771d                 | LR__6010
3771d                 | 	byte	
3771d     00          | 	byte	0
3771e                 | LR__6011
3771e                 | 	byte	
3771e     00          | 	byte	0
3771f                 | LR__6012
3771f     27          | 	byte	"'"
37720     00          | 	byte	0
37721                 | LR__6013
37721     2C          | 	byte	","
37722     00          | 	byte	0
37723                 | LR__6014
37723                 | 	byte	
37723     00          | 	byte	0
37724                 | LR__6015
37724                 | 	byte	
37724     00          | 	byte	0
37725                 | LR__6016
37725                 | 	byte	
37725     00          | 	byte	0
37726                 | LR__6017
37726                 | 	byte	
37726     00          | 	byte	0
37727                 | LR__6018
37727                 | 	byte	
37727     00          | 	byte	0
37728                 | LR__6019
37728     72 69 67 68 
3772c     74 24 3A 20 | 	byte	"right$: "
37730     00          | 	byte	0
37731                 | LR__6020
37731     72 69 67 68 
37735     74 24 3A 20 | 	byte	"right$: "
37739     00          | 	byte	0
3773a                 | LR__6021
3773a     72 6E 64 3A 
3773e     20          | 	byte	"rnd: "
3773f     00          | 	byte	0
37740                 | LR__6022
37740     72 6E 64 3A 
37744     20          | 	byte	"rnd: "
37745     00          | 	byte	0
37746                 | LR__6023
37746                 | 	byte	
37746     00          | 	byte	0
37747                 | LR__6024
37747     53 74 6F 70 
3774b     70 65 64 20 
3774f     61 74 20 6C 
37753     69 6E 65 20 | 	byte	"Stopped at line "
37757     00          | 	byte	0
37758                 | LR__6025
37758                 | 	byte	
37758     00          | 	byte	0
37759                 | LR__6026
37759     2F          | 	byte	"/"
3775a     00          | 	byte	0
3775b                 | LR__6027
3775b                 | 	byte	
3775b     00          | 	byte	0
3775c                 | LR__6028
3775c     53 61 76 65 
37760     64 20 61 73 
37764     20          | 	byte	"Saved as "
37765     00          | 	byte	0
37766                 | LR__6029
37766     2F          | 	byte	"/"
37767     00          | 	byte	0
37768                 | LR__6030
37768     73 65 74 63 
3776c     6F 6C 6F 72 
37770     3A 20       | 	byte	"setcolor: "
37772     00          | 	byte	0
37773                 | LR__6031
37773     73 69 6E 3A 
37777     20          | 	byte	"sin: "
37778     00          | 	byte	0
37779                 | LR__6032
37779     73 71 72 3A 
3777d     20          | 	byte	"sqr: "
3777e     00          | 	byte	0
3777f                 | LR__6033
3777f     73 74 69 63 
37783     6B 3A 20    | 	byte	"stick: "
37786     00          | 	byte	0
37787                 | LR__6034
37787     73 74 72 69 
3778b     67 3A 20    | 	byte	"strig: "
3778e     00          | 	byte	0
3778f                 | LR__6035
3778f     74 61 6E 3A 
37793     20          | 	byte	"tan: "
37794     00          | 	byte	0
37795                 | LR__6036
37795     76 61 6C 3A 
37799     20          | 	byte	"val: "
3779a     00          | 	byte	0
3779b                 | LR__6037
3779b     76 61 6C 3A 
3779f     20          | 	byte	"val: "
377a0     00          | 	byte	0
377a1                 | LR__6038
377a1     24          | 	byte	"$"
377a2     00          | 	byte	0
377a3                 | LR__6039
377a3     26 68       | 	byte	"&h"
377a5     00          | 	byte	0
377a6                 | LR__6040
377a6     25          | 	byte	"%"
377a7     00          | 	byte	0
377a8                 | LR__6041
377a8     26 62       | 	byte	"&b"
377aa     00          | 	byte	0
377ab                 | LR__6042
377ab                 | 	byte	
377ab     00          | 	byte	0
377ac                 | LR__6043
377ac     45 78 70 65 
377b0     63 74 65 64 
377b4     20 6E 75 6D 
377b8     62 65 72 2C 
377bc     20 67 6F 74 
377c0     20 73 6F 6D 
377c4     65 74 68 69 
377c8     6E 67 20 65 
377cc     6C 73 65    | 	byte	"Expected number, got something else"
377cf     00          | 	byte	0
377d0                 | LR__6044
377d0     43 61 6E 6E 
377d4     6F 74 20 61 
377d8     64 64 20 61 
377dc     20 6E 75 6D 
377e0     62 65 72 20 
377e4     74 6F 20 61 
377e8     20 73 74 72 
377ec     69 6E 67    | 	byte	"Cannot add a number to a string"
377ef     00          | 	byte	0
377f0                 | LR__6045
377f0     43 61 6E 6E 
377f4     6F 74 20 73 
377f8     75 62 73 74 
377fc     72 61 63 74 
37800     20 73 74 72 
37804     69 6E 67 73 | 	byte	"Cannot substract strings"
37808     00          | 	byte	0
37809                 | LR__6046
37809     55 6E 6B 6E 
3780d     6F 77 6E 20 
37811     65 72 72 6F 
37815     72 20 77 68 
37819     69 6C 65 20 
3781d     61 64 64 69 
37821     6E 67       | 	byte	"Unknown error while adding"
37823     00          | 	byte	0
37824                 | LR__6047
37824     55 6E 6B 6E 
37828     6F 77 6E 20 
3782c     65 72 72 6F 
37830     72 20 77 68 
37834     69 6C 65 20 
37838     73 75 62 73 
3783c     74 72 61 63 
37840     74 69 6E 67 | 	byte	"Unknown error while substracting"
37844     00          | 	byte	0
37845                 | LR__6048
37845     43 61 6E 6E 
37849     6F 74 20 64 
3784d     6F 20 6C 6F 
37851     67 69 63 20 
37855     6F 70 65 72 
37859     61 74 69 6F 
3785d     6E 20 6F 6E 
37861     20 73 74 72 
37865     69 6E 67 20 
37869     6F 72 20 66 
3786d     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
37871     00          | 	byte	0
37872                 | LR__6049
37872     55 6E 6B 6E 
37876     6F 77 6E 20 
3787a     65 72 72 6F 
3787e     72 20 77 68 
37882     69 6C 65 20 
37886     64 6F 69 6E 
3788a     67 20 6C 6F 
3788e     67 69 63 20 
37892     6F 70 65 72 
37896     61 74 69 6F 
3789a     6E          | 	byte	"Unknown error while doing logic operation"
3789b     00          | 	byte	0
3789c                 | LR__6050
3789c     43 61 6E 6E 
378a0     6F 74 20 6D 
378a4     75 6C 74 69 
378a8     70 6C 79 20 
378ac     73 74 72 69 
378b0     6E 67 73    | 	byte	"Cannot multiply strings"
378b3     00          | 	byte	0
378b4                 | LR__6051
378b4     55 6E 6B 6E 
378b8     6F 77 6E 20 
378bc     65 72 72 6F 
378c0     72 20 77 68 
378c4     69 6C 65 20 
378c8     6D 75 6C 74 
378cc     69 70 6C 79 
378d0     69 6E 67    | 	byte	"Unknown error while multiplying"
378d3     00          | 	byte	0
378d4                 | LR__6052
378d4     43 61 6E 6E 
378d8     6F 74 20 64 
378dc     69 76 69 64 
378e0     65 20 73 74 
378e4     72 69 6E 67 
378e8     73          | 	byte	"Cannot divide strings"
378e9     00          | 	byte	0
378ea                 | LR__6053
378ea     55 6E 6B 6E 
378ee     6F 77 6E 20 
378f2     65 72 72 6F 
378f6     72 20 77 68 
378fa     69 6C 65 20 
378fe     64 69 76 69 
37902     64 69 6E 67 | 	byte	"Unknown error while dividing"
37906     00          | 	byte	0
37907                 | LR__6054
37907     43 61 6E 6E 
3790b     6F 74 20 63 
3790f     6F 6D 70 75 
37913     74 65 20 61 
37917     20 70 6F 77 
3791b     65 72 20 6F 
3791f     66 20 61 20 
37923     73 74 72 69 
37927     6E 67       | 	byte	"Cannot compute a power of a string"
37929     00          | 	byte	0
3792a                 | LR__6055
3792a     55 6E 6B 6E 
3792e     6F 77 6E 20 
37932     65 72 72 6F 
37936     72 20 77 68 
3793a     69 6C 65 20 
3793e     63 6F 6D 70 
37942     75 74 69 6E 
37946     67 20 61 20 
3794a     70 6F 77 65 
3794e     72          | 	byte	"Unknown error while computing a power"
3794f     00          | 	byte	0
37950                 | LR__6056
37950     52 69 67 68 
37954     74 20 70 61 
37958     72 65 6E 74 
3795c     68 65 73 69 
37960     73 20 65 78 
37964     70 65 63 74 
37968     65 64       | 	byte	"Right parenthesis expected"
3796a     00          | 	byte	0
3796b                 | LR__6057
3796b     45 78 70 65 
3796f     63 74 65 64 
37973     20 73 74 72 
37977     69 6E 67    | 	byte	"Expected string"
3797a     00          | 	byte	0
3797b                 | LR__6058
3797b     45 78 70 65 
3797f     63 74 65 64 
37983     20 66 6C 6F 
37987     61 74       | 	byte	"Expected float"
37989     00          | 	byte	0
3798a                 | LR__6059
3798a     45 78 70 65 
3798e     63 74 65 64 
37992     20 75 6E 73 
37996     69 67 6E 65 
3799a     64 20 69 6E 
3799e     74 65 67 65 
379a2     72          | 	byte	"Expected unsigned integer"
379a3     00          | 	byte	0
379a4                 | LR__6060
379a4     45 78 70 65 
379a8     63 74 65 64 
379ac     20 69 6E 74 
379b0     65 67 65 72 | 	byte	"Expected integer"
379b4     00          | 	byte	0
379b5                 | LR__6061
379b5     4E 6F 20 6D 
379b9     6F 72 65 20 
379bd     76 61 72 69 
379c1     61 62 6C 65 
379c5     20 73 6C 6F 
379c9     74 73       | 	byte	"No more variable slots"
379cb     00          | 	byte	0
379cc                 | LR__6062
379cc     56 61 72 69 
379d0     61 62 6C 65 
379d4     20 6E 6F 74 
379d8     20 66 6F 75 
379dc     6E 64       | 	byte	"Variable not found"
379de     00          | 	byte	0
379df                 | LR__6063
379df     43 6F 6D 6D 
379e3     61 20 65 78 
379e7     70 65 63 74 
379eb     65 64       | 	byte	"Comma expected"
379ed     00          | 	byte	0
379ee                 | LR__6064
379ee     43 6F 6D 6D 
379f2     61 20 6F 72 
379f6     20 73 65 6D 
379fa     69 63 6F 6C 
379fe     6F 6E 20 65 
37a02     78 70 65 63 
37a06     74 65 64    | 	byte	"Comma or semicolon expected"
37a09     00          | 	byte	0
37a0a                 | LR__6065
37a0a     55 6E 6B 6E 
37a0e     6F 77 6E 20 
37a12     63 6F 6D 6D 
37a16     61 6E 64    | 	byte	"Unknown command"
37a19     00          | 	byte	0
37a1a                 | LR__6066
37a1a     53 74 61 63 
37a1e     6B 20 75 6E 
37a22     64 65 72 66 
37a26     6C 6F 77    | 	byte	"Stack underflow"
37a29     00          | 	byte	0
37a2a                 | LR__6067
37a2a     43 61 6E 6E 
37a2e     6F 74 20 65 
37a32     78 65 63 75 
37a36     74 65 20 67 
37a3a     6F 74 6F 20 
37a3e     6F 72 20 67 
37a42     6F 73 75 62 
37a46     20 69 6E 20 
37a4a     74 68 65 20 
37a4e     69 6D 6D 65 
37a52     64 69 61 74 
37a56     65 20 6D 6F 
37a5a     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
37a5c     00          | 	byte	0
37a5d                 | LR__6068
37a5d     43 61 6E 6E 
37a61     6F 74 20 6C 
37a65     6F 61 64 20 
37a69     66 72 6F 6D 
37a6d     20 74 68 69 
37a71     73 20 66 69 
37a75     6C 65       | 	byte	"Cannot load from this file"
37a77     00          | 	byte	0
37a78                 | LR__6069
37a78     54 68 65 20 
37a7c     70 72 6F 67 
37a80     72 61 6D 20 
37a84     69 73 20 65 
37a88     6D 70 74 79 | 	byte	"The program is empty"
37a8c     00          | 	byte	0
37a8d                 | LR__6070
37a8d     49 66 20 61 
37a91     66 74 65 72 
37a95     20 69 66    | 	byte	"If after if"
37a98     00          | 	byte	0
37a99                 | LR__6071
37a99     45 6D 70 74 
37a9d     79 20 65 78 
37aa1     70 72 65 73 
37aa5     73 69 6F 6E | 	byte	"Empty expression"
37aa9     00          | 	byte	0
37aaa                 | LR__6072
37aaa     53 74 72 69 
37aae     6E 67 20 65 
37ab2     78 70 65 63 
37ab6     74 65 64    | 	byte	"String expected"
37ab9     00          | 	byte	0
37aba                 | LR__6073
37aba     49 6E 74 65 
37abe     72 70 72 65 
37ac2     74 65 72 20 
37ac6     69 6E 74 65 
37aca     72 6E 61 6C 
37ace     20 65 72 72 
37ad2     6F 72       | 	byte	"Interpreter internal error"
37ad4     00          | 	byte	0
37ad5                 | LR__6074
37ad5     45 78 70 65 
37ad9     63 74 65 64 
37add     20 61 73 73 
37ae1     69 67 6E    | 	byte	"Expected assign"
37ae4     00          | 	byte	0
37ae5                 | LR__6075
37ae5     45 78 70 65 
37ae9     63 74 65 64 
37aed     20 27 74 6F 
37af1     27          | 	byte	"Expected 'to'"
37af2     00          | 	byte	0
37af3                 | LR__6076
37af3     45 78 70 65 
37af7     63 74 65 64 
37afb     20 69 6E 74 
37aff     65 67 65 72 
37b03     20 76 61 72 
37b07     69 61 62 6C 
37b0b     65          | 	byte	"Expected integer variable"
37b0c     00          | 	byte	0
37b0d                 | LR__6077
37b0d     55 6E 69 6E 
37b11     69 74 69 61 
37b15     6C 69 7A 65 
37b19     64 20 76 61 
37b1d     72 69 61 62 
37b21     6C 65 20 69 
37b25     6E 20 27 6E 
37b29     65 78 74 27 
37b2d     2C 20 75 73 
37b31     65 20 27 66 
37b35     6F 72 27 20 
37b39     62 65 66 6F 
37b3d     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
37b3f     00          | 	byte	0
37b40                 | LR__6078
37b40     4E 6F 20 6D 
37b44     6F 72 65 20 
37b48     73 6C 6F 74 
37b4c     73 20 66 6F 
37b50     72 20 27 66 
37b54     6F 72 27    | 	byte	"No more slots for 'for'"
37b57     00          | 	byte	0
37b58                 | LR__6079
37b58     27 4E 65 78 
37b5c     74 27 20 64 
37b60     6F 65 73 6E 
37b64     27 74 20 6D 
37b68     61 74 63 68 
37b6c     20 27 66 6F 
37b70     72 27       | 	byte	"'Next' doesn't match 'for'"
37b72     00          | 	byte	0
37b73                 | LR__6080
37b73     27 47 6F 74 
37b77     6F 27 20 74 
37b7b     61 72 67 65 
37b7f     74 20 6C 69 
37b83     6E 65 20 6E 
37b87     6F 74 20 66 
37b8b     6F 75 6E 64 | 	byte	"'Goto' target line not found"
37b8f     00          | 	byte	0
37b90                 | LR__6081
37b90     42 61 64 20 
37b94     6E 75 6D 62 
37b98     65 72 20 6F 
37b9c     66 20 70 61 
37ba0     72 61 6D 65 
37ba4     74 65 72 73 | 	byte	"Bad number of parameters"
37ba8     00          | 	byte	0
37ba9                 | LR__6082
37ba9     46 75 6E 63 
37bad     74 69 6F 6E 
37bb1     20 75 6E 64 
37bb5     65 66 69 6E 
37bb9     65 64 20 66 
37bbd     6F 72 20 73 
37bc1     74 72 69 6E 
37bc5     67 73       | 	byte	"Function undefined for strings"
37bc7     00          | 	byte	0
37bc8                 | LR__6083
37bc8     42 61 64 20 
37bcc     70 61 72 61 
37bd0     6D 65 74 65 
37bd4     72          | 	byte	"Bad parameter"
37bd5     00          | 	byte	0
37bd6                 | LR__6084
37bd6     43 61 6E 6E 
37bda     6F 74 20 64 
37bde     65 63 6C 61 
37be2     72 65 20 61 
37be6     6E 20 61 72 
37bea     72 61 79 3A 
37bee     20 74 68 65 
37bf2     20 76 61 72 
37bf6     69 61 62 6C 
37bfa     65 20 65 78 
37bfe     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
37c02     00          | 	byte	0
37c03                 | LR__6085
37c03     45 78 70 65 
37c07     63 74 65 64 
37c0b     20 27 28 27 | 	byte	"Expected '('"
37c0f     00          | 	byte	0
37c10                 | LR__6086
37c10     45 78 70 65 
37c14     63 74 65 64 
37c18     20 27 29 27 
37c1c     20 6F 72 20 
37c20     27 2C 27    | 	byte	"Expected ')' or ','"
37c23     00          | 	byte	0
37c24                 | LR__6087
37c24     4E 6F 20 6D 
37c28     6F 72 65 20 
37c2c     74 68 61 6E 
37c30     20 33 20 64 
37c34     69 6D 65 6E 
37c38     73 69 6F 6E 
37c3c     73 20 73 75 
37c40     70 70 6F 72 
37c44     74 65 64    | 	byte	"No more than 3 dimensions supported"
37c47     00          | 	byte	0
37c48                 | LR__6088
37c48     56 61 72 69 
37c4c     61 62 6C 65 
37c50     20 6E 61 6D 
37c54     65 20 65 78 
37c58     70 65 63 74 
37c5c     65 64       | 	byte	"Variable name expected"
37c5e     00          | 	byte	0
37c5f                 | LR__6089
37c5f     54 79 70 65 
37c63     20 6E 61 6D 
37c67     65 20 65 78 
37c6b     70 65 63 74 
37c6f     65 64       | 	byte	"Type name expected"
37c71     00          | 	byte	0
37c72                 | LR__6090
37c72     54 79 70 65 
37c76     20 6E 6F 74 
37c7a     20 73 75 70 
37c7e     70 6F 72 74 
37c82     65 64 20 79 
37c86     65 74       | 	byte	"Type not supported yet"
37c88     00          | 	byte	0
37c89                 | LR__6091
37c89     41 72 72 61 
37c8d     79 20 69 6E 
37c91     64 65 78 20 
37c95     6F 75 74 20 
37c99     6F 66 20 72 
37c9d     61 6E 67 65 | 	byte	"Array index out of range"
37ca1     00          | 	byte	0
37ca2                 | LR__6092
37ca2     42 61 64 20 
37ca6     74 79 70 65 
37caa     20 77 68 69 
37cae     6C 65 20 61 
37cb2     73 73 69 67 
37cb6     6E 69 6E 67 
37cba     20 74 6F 20 
37cbe     61 72 72 61 
37cc2     79          | 	byte	"Bad type while assigning to array"
37cc3     00          | 	byte	0
37cc4                 | LR__6093
37cc4     54 6F 6F 20 
37cc8     6D 61 6E 79 
37ccc     20 76 61 72 
37cd0     69 61 62 6C 
37cd4     65 73       | 	byte	"Too many variables"
37cd6     00          | 	byte	0
37cd7                 | LR__6094
37cd7     27 54 68 65 
37cdb     6E 27 20 65 
37cdf     78 70 65 63 
37ce3     74 65 64    | 	byte	"'Then' expected"
37ce6     00          | 	byte	0
37ce7                 | LR__6095
37ce7     44 69 72 65 
37ceb     63 74 6F 72 
37cef     79 20 64 6F 
37cf3     65 73 6E 27 
37cf7     74 20 65 78 
37cfb     69 73 74    | 	byte	"Directory doesn't exist"
37cfe     00          | 	byte	0
37cff                 | LR__6096
37cff     55 6E 65 78 
37d03     70 65 63 74 
37d07     65 64 20 65 
37d0b     6E 64 20 6F 
37d0f     66 20 6C 69 
37d13     6E 65       | 	byte	"Unexpected end of line"
37d15     00          | 	byte	0
37d16                 | LR__6097
37d16     4E 6F 20 6D 
37d1a     6F 72 65 20 
37d1e     64 61 74 61 | 	byte	"No more data"
37d22     00          | 	byte	0
37d23                 | LR__6098
37d23     45 72 72 6F 
37d27     72 20       | 	byte	"Error "
37d29     00          | 	byte	0
37d2a                 | LR__6099
37d2a     20 2D 20    | 	byte	" - "
37d2d     00          | 	byte	0
37d2e                 | LR__6100
37d2e     20 69 6E 20 
37d32     6C 69 6E 65 
37d36     20          | 	byte	" in line "
37d37     00          | 	byte	0
37d38                 | LR__6101
37d38                 | 	byte	
37d38     00          | 	byte	0
37d39                 | LR__6102
37d39     2F 73 64    | 	byte	"/sd"
37d3c     00          | 	byte	0
37d3d                 | LR__6103
37d3d     2F 73 64 2F 
37d41     62 61 73    | 	byte	"/sd/bas"
37d44     00          | 	byte	0
37d45                 | LR__6104
37d45     2F 73 64 2F 
37d49     62 61 73    | 	byte	"/sd/bas"
37d4c     00          | 	byte	0
37d4d                 | LR__6105
37d4d     20 42 41 53 
37d51     49 43 20 62 
37d55     79 74 65 73 
37d59     20 66 72 65 
37d5d     65          | 	byte	" BASIC bytes free"
37d5e     00          | 	byte	0
37d5f                 | LR__6106
37d5f     52 65 61 64 
37d63     79          | 	byte	"Ready"
37d64     00          | 	byte	0
37d65                 | LR__6107
37d65     6E 6F 6E 61 
37d69     6D 65 2E 62 
37d6d     61 73       | 	byte	"noname.bas"
37d6f     00          | 	byte	0
37d70                 | LR__6108
37d70     2F 73 64 2F 
37d74     62 61 73 2F 
37d78     61 75 74 6F 
37d7c     72 75 6E 2E 
37d80     62 61 73    | 	byte	"/sd/bas/autorun.bas"
37d83     00          | 	byte	0
37d84                 | LR__6109
37d84     72 75 6E 20 
37d88     61 75 74 6F 
37d8c     72 75 6E 2E 
37d90     62 61 73    | 	byte	"run autorun.bas"
37d93     00          | 	byte	0
37d94                 | LR__6110
37d94                 | 	byte	
37d94     00          | 	byte	0
37d95     00 00 00    | 	alignl
37d98                 | _dat_
37d98     00 00 00 00 
37d9c     00 00 00 00 
37da0     00 00 00 00 
37da4     00 00 00 00 | 	byte	$00[16]
37da8     61 41 17 0E 
37dac     62 42 00 00 
37db0     63 43 19 10 
37db4     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
37db8     65 45 18 0F 
37dbc     66 46 00 00 
37dc0     67 47 00 00 
37dc4     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
37dc8     69 49 00 00 
37dcc     6A 4A 00 00 
37dd0     6B 4B 00 00 
37dd4     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
37dd8     6D 4D 00 00 
37ddc     6E 4E 1A 11 
37de0     6F 4F 1E 15 
37de4     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
37de8     71 51 00 00 
37dec     72 52 00 00 
37df0     73 53 1B 12 
37df4     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
37df8     75 55 00 00 
37dfc     76 56 00 00 
37e00     77 57 00 00 
37e04     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
37e08     79 59 00 00 
37e0c     7A 5A 1D 14 
37e10     31 21 04 00 
37e14     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
37e18     33 23 06 00 
37e1c     34 24 07 00 
37e20     35 25 08 00 
37e24     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
37e28     37 26 0A 00 
37e2c     38 2A 0B 00 
37e30     39 28 0C 00 
37e34     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
37e38     8D 8D 00 00 
37e3c     9B 9B 00 00 
37e40     88 88 00 00 
37e44     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
37e48     20 20 00 00 
37e4c     2D 5F 00 00 
37e50     3D 2B 00 00 
37e54     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
37e58     5D 7D 00 00 
37e5c     5C 7C 00 00 
37e60     23 7E 00 00 
37e64     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
37e68     27 22 00 00 
37e6c     60 7E 03 00 
37e70     2C 3C 00 00 
37e74     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
37e78     2F 3F 00 00 
37e7c     B9 B9 00 00 
37e80     BA 00 00 00 
37e84     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
37e88     BC 00 00 00 
37e8c     BD 00 00 00 
37e90     BE 00 00 00 
37e94     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
37e98     C0 00 00 00 
37e9c     C1 00 00 00 
37ea0     C2 00 00 00 
37ea4     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
37ea8     C4 00 00 00 
37eac     C5 00 00 00 
37eb0     C6 00 00 00 
37eb4     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
37eb8     C8 00 00 00 
37ebc     C9 00 00 00 
37ec0     CA 00 00 00 
37ec4     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
37ec8     7F 7F 00 00 
37ecc     CC 00 00 00 
37ed0     CD 00 00 00 
37ed4     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
37ed8     CF 00 00 00 
37edc     D0 00 00 00 
37ee0     D1 00 00 00 
37ee4     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
37ee8     2F 2F 00 00 
37eec     2A 2A 00 00 
37ef0     2D 2D 00 00 
37ef4     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
37ef8     8D 8D 00 00 
37efc     31 31 00 00 
37f00     32 32 00 00 
37f04     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
37f08     34 34 00 00 
37f0c     35 35 00 00 
37f10     36 36 00 00 
37f14     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
37f18     38 38 00 00 
37f1c     39 39 00 00 
37f20     30 30 00 00 
37f24     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
37f28     5C 7C 00 00 
37f2c     00 00 00 00 
37f30     00 00 00 00 
37f34     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
37f38     00 00 00 00 
      ...             
37f90     00 00 00 00 
37f94     00 00 00 00 | 	byte	$00[96]
37f98     2B 00 A6 F2 
37f9c     24 A7 09 80 
37fa0     5B 88 4D 89 
37fa4     80 88 A5 88 | atari_spl file "atari.spl"
37fa8     6D 88 B8 88 
37fac     80 88 CB 88 
37fb0     92 88 A5 88 
37fb4     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
37fb8     A5 88 CA 88 
37fbc     A6 88 DD 88 
37fc0     B8 88 AB 89 
37fc4     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
37fc8     C8 AD C6 F1 
37fcc     91 06 B6 FF 
37fd0     13 00 4A 00 
37fd4     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
37fd8     5D 00 5E 00 
37fdc     5D 00 5E 00 
37fe0     5E 00 5D 00 
37fe4     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
37fe8     38 00 83 00 
37fec     25 00 83 00 
37ff0     C3 FE D1 04 
37ff4     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
37ff8     48 88 38 85 
37ffc     41 8A CB 88 
38000     28 89 B8 88 
38004     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
38008     15 89 03 89 
3800c     02 89 15 89 
38010     16 89 15 89 
38014     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
38018     15 89 3A 89 
3801c     72 89 E3 89 
38020     52 83 AD 97 
38024     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
38028     0C 02 B6 FF 
3802c     E1 00 A8 00 
38030     F3 00 A8 00 
38034     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
38038     CE 00 CD 00 
3803c     CD 00 BA 00 
38040     E1 00 BB 00 
38044     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
38048     DF 00 C9 FF 
3804c     E6 01 B6 06 
38050     EE DD 8D 98 
38054     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
38058     97 89 73 89 
3805c     3B 89 60 89 
38060     60 89 60 89 
38064     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
38068     73 89 72 89 
3806c     85 89 73 89 
38070     AA 89 60 89 
38074     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
38078     E8 8A 18 86 
3807c     92 88 A5 C2 
38080     E0 00 C3 05 
38084     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
38088     F2 00 64 01 
3808c     06 01 3E 01 
38090     2B 01 2B 01 
38094     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
38098     2B 01 2A 01 
3809c     2B 01 2B 01 
380a0     2B 01 18 01 
380a4     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
380a8     39 07 61 F3 
380ac     C0 AF 37 85 
380b0     0F 88 8B 8A 
380b4     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
380b8     AB 89 D0 89 
380bc     AB 89 D0 89 
380c0     D0 89 CF 89 
380c4     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
380c8     D0 89 F5 89 
380cc     BD 89 08 8A 
380d0     CF 89 E8 8A 
380d4     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
380d8     53 B3 0D F8 
380dc     F4 07 38 00 
380e0     63 01 63 01 
380e4     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
380e8     88 01 88 01 
380ec     76 01 88 01 
380f0     88 01 89 01 
380f4     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
380f8     75 01 AE 01 
380fc     76 01 88 01 
38100     4A 00 46 06 
38104     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
38108     08 8A 9A 86 
3810c     33 8B 08 8A 
38110     2D 8A F5 89 
38114     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
38118     2D 8A 2D 8A 
3811c     2E 8A 1B 8A 
38120     40 8A 2D 8A 
38124     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
38128     2E 8A 79 8A 
3812c     66 8A C8 8B 
38130     72 82 2B 97 
38134     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
38138     1D 02 05 01 
3813c     F8 01 C0 01 
38140     0B 02 C0 01 
38144     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
38148     F9 01 D3 01 
3814c     F8 01 D3 01 
38150     F8 01 D2 01 
38154     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
38158     E6 01 2B 01 
3815c     8E 02 5F 07 
38160     F7 E2 ED 9C 
38164     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
38168     E8 8A 78 8A 
3816c     78 8A 65 8A 
38170     8B 8A 78 8A 
38174     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
38178     8B 8A 9D 8A 
3817c     9D 8A 8B 8A 
38180     C2 8A 78 8A 
38184     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
38188     70 8C 18 86 
3818c     8B 8A 23 C9 
38190     CB 03 C4 05 
38194     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
38198     0B 02 7B 02 
3819c     1E 02 55 02 
381a0     30 02 43 02 
381a4     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
381a8     43 02 44 02 
381ac     43 02 30 02 
381b0     68 02 31 02 
381b4     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
381b8     07 08 3F F7 
381bc     73 B2 13 85 
381c0     15 89 ED 8B 
381c4     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
381c8     B0 8A FB 8A 
381cc     D5 8A FA 8A 
381d0     E8 8A FB 8A 
381d4     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
381d8     E8 8A 21 8B 
381dc     E7 8A 33 8B 
381e0     E8 8A 26 8C 
381e4     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
381e8     8D B0 27 F6 
381ec     9C 08 AD 01 
381f0     7B 02 8D 02 
381f4     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
381f8     A1 02 A0 02 
381fc     A1 02 A0 02 
38200     A0 02 A0 02 
38204     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
38208     7B 02 D8 02 
3820c     7B 02 C6 02 
38210     3E 01 C3 05 
38214     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
38218     00 8C 2A 86 
3821c     E0 8C FA 8A 
38220     6A 8B FB 8A 
38224     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
38228     45 8B 45 8B 
3822c     45 8B 6B 8B 
38230     46 8B 59 8B 
38234     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
38238     6B 8B 6B 8B 
3823c     6B 8B 6B 8B 
38240     7D 8B 7D 8B 
38244     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
38248     90 8B 91 8B 
3824c     90 8B 90 8B 
38250     A3 8B A3 8B 
38254     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
38258     B5 8B B6 8B 
3825c     B5 8B B5 8B 
38260     B6 8B C8 8B 
38264     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
38268     C8 8B DA 8B 
3826c     DB 8B DB 8B 
38270     DB 8B DC 8B 
38274     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
38278     EE 8B EE 8B 
3827c     00 8C 01 8C 
38280     00 8C 01 8C 
38284     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
38288     12 8C 13 8C 
3828c     13 8C 26 8C 
38290     26 8C 26 8C 
38294     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
38298     38 8C 38 8C 
3829c     38 8C 38 8C 
382a0     4B 8C 4B 8C 
382a4     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
382a8     5E 8C 5E 8C 
382ac     5E 8C 5E 8C 
382b0     70 8C 70 8C 
382b4     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
382b8     70 8C 83 8C 
382bc     83 8C 83 8C 
382c0     83 8C 96 8C 
382c4     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
382c8     95 8C A9 8C 
382cc     A9 8C A8 8C 
382d0     A8 8C A8 8C 
382d4     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
382d8     BB 8C BB 8C 
382dc     BB 8C CE 8C 
382e0     CE 8C CE 8C 
382e4     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
382e8     E0 8C E1 8C 
382ec     E1 8C E0 8C 
382f0     F4 8C F2 8C 
382f4     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
382f8     05 8D 05 8D 
382fc     06 8D 06 8D 
38300     19 8D 19 8D 
38304     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
38308     18 8D 2B 8D 
3830c     2B 8D 2B 8D 
38310     2A 8D 3E 8D 
38314     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
38318     3E 8D 51 8D 
3831c     50 8D 50 8D 
38320     50 8D 51 8D 
38324     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
38328     63 8D 64 8D 
3832c     76 8D 75 8D 
38330     75 8D 76 8D 
38334     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
38338     88 8D 88 8D 
3833c     89 8D 9B 8D 
38340     9A 8D 9B 8D 
38344     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
38348     AD 8D AE 8D 
3834c     AD 8D AE 8D 
38350     C1 8D C1 8D 
38354     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
38358     D3 8D D3 8D 
3835c     D3 8D D3 8D 
38360     D3 8D E6 8D 
38364     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
38368     E6 8D E6 8D 
3836c     F9 8D F9 8D 
38370     F9 8D F8 8D 
38374     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
38378     0B 8E 0B 8E 
3837c     1D 8E 1D 8E 
38380     1E 8E 1E 8E 
38384     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
38388     31 8E 31 8E 
3838c     31 8E 42 8E 
38390     43 8E 43 8E 
38394     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
38398     56 8E 56 8E 
3839c     55 8E 56 8E 
383a0     68 8E 69 8E 
383a4     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
383a8     69 8E 7B 8E 
383ac     7C 8E 7B 8E 
383b0     7B 8E 8D 8E 
383b4     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
383b8     8D 8E A1 8E 
383bc     A0 8E A1 8E 
383c0     A1 8E A0 8E 
383c4     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
383c8     B3 8E B3 8E 
383cc     C6 8E C5 8E 
383d0     C6 8E C6 8E 
383d4     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
383d8     D8 8E D9 8E 
383dc     D8 8E EC 8E 
383e0     EB 8E EC 8E 
383e4     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
383e8     FE 8E FE 8E 
383ec     FE 8E FE 8E 
383f0     10 8F 10 8F 
383f4     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
383f8     11 8F 23 8F 
383fc     24 8F 23 8F 
38400     24 8F 37 8F 
38404     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
38408     36 8F 36 8F 
3840c     48 8F 49 8F 
38410     49 8F 49 8F 
38414     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
38418     5B 8F 5C 8F 
3841c     5B 8F 6E 8F 
38420     6E 8F 6E 8F 
38424     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
38428     81 8F 81 8F 
3842c     81 8F 81 8F 
38430     93 8F 93 8F 
38434     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
38438     93 8F A6 8F 
3843c     A6 8F A6 8F 
38440     A6 8F B9 8F 
38444     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
38448     B9 8F B9 8F 
3844c     CC 8F CB 8F 
38450     CB 8F CC 8F 
38454     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
38458     DF 8F DE 8F 
3845c     DE 8F F1 8F 
38460     F1 8F F1 8F 
38464     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
38468     03 90 04 90 
3846c     04 90 04 90 
38470     16 90 17 90 
38474     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
38478     29 90 28 90 
3847c     29 90 28 90 
38480     29 90 3C 90 
38484     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
38488     3C 90 4F 90 
3848c     4E 90 4E 90 
38490     4E 90 4E 90 
38494     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
38498     61 90 61 90 
3849c     73 90 74 90 
384a0     74 90 74 90 
384a4     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
384a8     87 90 86 90 
384ac     87 90 86 90 
384b0     99 90 99 90 
384b4     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
384b8     AB 90 AB 90 
384bc     AC 90 AB 90 
384c0     AB 90 BF 90 
384c4     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
384c8     BE 90 D1 90 
384cc     D0 90 D1 90 
384d0     D1 90 D1 90 
384d4     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
384d8     E3 90 E4 90 
384dc     F6 90 F6 90 
384e0     F6 90 F6 90 
384e4     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
384e8     09 91 0A 91 
384ec     0A 91 1C 91 
384f0     1C 91 1C 91 
384f4     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
384f8     2F 91 2E 91 
384fc     2F 91 2F 91 
38500     2E 91 41 91 
38504     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
38508     41 91 53 91 
3850c     54 91 54 91 
38510     53 91 54 91 
38514     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
38518     67 91 67 91 
3851c     79 91 7A 91 
38520     79 91 78 91 
38524     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
38528     8C 91 8B 91 
3852c     8C 91 8C 91 
38530     9E 91 9E 91 
38534     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
38538     B1 91 B1 91 
3853c     B2 91 B1 91 
38540     B1 91 C4 91 
38544     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
38548     C4 91 D6 91 
3854c     D7 91 D7 91 
38550     D7 91 D6 91 
38554     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
38558     EA 91 EA 91 
3855c     EA 91 FC 91 
38560     FC 91 FB 91 
38564     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
38568     0E 92 0F 92 
3856c     0F 92 0E 92 
38570     21 92 21 92 
38574     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
38578     21 92 34 92 
3857c     33 92 34 92 
38580     34 92 47 92 
38584     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
38588     46 92 47 92 
3858c     59 92 59 92 
38590     59 92 59 92 
38594     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
38598     6C 92 6C 92 
3859c     6B 92 7E 92 
385a0     7E 92 7E 92 
385a4     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
385a8     92 92 91 92 
385ac     91 92 90 92 
385b0     91 92 A4 92 
385b4     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
385b8     A3 92 B6 92 
385bc     B6 92 B7 92 
385c0     B7 92 B6 92 
385c4     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
385c8     CA 92 C9 92 
385cc     CA 92 DC 92 
385d0     DC 92 DC 92 
385d4     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
385d8     EF 92 EF 92 
385dc     EF 92 EF 92 
385e0     01 93 01 93 
385e4     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
385e8     15 93 14 93 
385ec     14 93 14 93 
385f0     14 93 27 93 
385f4     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
385f8     27 93 39 93 
385fc     3A 93 39 93 
38600     39 93 39 93 
38604     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
38608     4B 93 4C 93 
3860c     5F 93 5F 93 
38610     5F 93 5E 93 
38614     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
38618     5F 93 84 93 
3861c     4C 93 96 93 
38620     5F 93 AE 94 
38624     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
38628     7B C1 00 00 
3862c     00 00 00 00 
38630     00 00 00 00 
38634     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38638     00 00 00 00 | 	byte	$00, $00, $00, $00
3863c     7A D7 00 80 
38640     87 8A 48 8F 
38644     EC 8C 76 8D 
38648     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
3864c     3C 8D 82 8D 
38650     42 8D 88 8D 
38654     8C 8D 8E 8D 
38658     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
3865c     97 8D DE 8D 
38660     E1 8D F1 8E 
38664     D8 8C A3 83 
38668     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
3866c     65 71 C9 65 
38670     FC 64 C4 65 
38674     C1 65 BF 65 
38678     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
3867c     B6 65 B4 65 
38680     B2 65 AE 65 
38684     AC 65 ED 65 
38688     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
3868c     5E 65 25 66 
38690     FA 62 23 6B 
38694     B5 6C 61 0A 
38698     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
3869c     5D 90 BE 8D 
386a0     47 8E C3 8D 
386a4     09 8E C9 8D 
386a8     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
386ac     15 8E 19 8E 
386b0     1B 8E 62 8E 
386b4     64 8E 68 8E 
386b8     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
386bc     B5 8E 4C 90 
386c0     FA 84 3C 9D 
386c4     98 13 79 6D 
386c8     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
386cc     D9 66 50 66 
386d0     D4 66 4B 66 
386d4     8C 66 46 66 
386d8     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
386dc     81 66 3A 66 
386e0     7C 66 36 66 
386e4     76 66 30 66 
386e8     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
386ec     6B 66 88 72 
386f0     BF 37 E7 B7 
386f4     75 83 8B 8E 
386f8     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
386fc     94 8E 96 8E 
38700     DD 8E 9C 8E 
38704     E2 8E A2 8E 
38708     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
3870c     EE 8E AE 8E 
38710     38 8F B5 8E 
38714     3F 8F FD 8E 
38718     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
3871c     A5 87 1E E3 
38720     6D 5D FA 71 
38724     41 64 25 67 
38728     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
3872c     D9 66 1A 67 
38730     18 67 15 67 
38734     12 67 0F 67 
38738     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
3873c     07 67 C0 66 
38740     01 67 BC 66 
38744     B8 66 DE 64 
38748     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
3874c     43 E5 1F 8B 
38750     14 8A F1 90 
38754     1C 8F 63 8F 
38758     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
3875c     29 8F 6E 8F 
38760     72 8F 75 8F 
38764     34 8F BE 8F 
38768     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
3876c     84 8F 87 8F 
38770     CC 8F 56 90 
38774     67 91 49 80 
38778     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
3877c     46 77 A6 66 
38780     E8 66 B0 67 
38784     AD 67 ED 67 
38788     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
3878c     A2 67 E3 67 
38790     9D 67 9A 67 
38794     98 67 94 67 
38798     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
3879c     49 67 CD 67 
387a0     28 65 5F 6E 
387a4     82 67 3A 01 
387a8     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
387ac     C2 91 A9 8F 
387b0     EF 8F AE 8F 
387b4     F4 8F B5 8F 
387b8     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
387bc     01 90 03 90 
387c0     07 90 09 90 
387c4     0C 90 53 90 
387c8     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
387cc     18 90 44 93 
387d0     85 84 D6 9D 
387d4     87 1F 2F 75 
387d8     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
387dc     C4 68 F6 67 
387e0     BE 68 F1 67 
387e4     76 68 2E 68 
387e8     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
387ec     27 68 24 68 
387f0     64 68 1E 68 
387f4     5F 68 19 68 
387f8     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
387fc     DC 68 56 72 
38800     7E 36 C2 B8 
38804     D7 84 73 90 
38808     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
3880c     7B 90 7F 90 
38810     82 90 84 90 
38814     CB 90 8B 90 
38818     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
3881c     D7 90 96 90 
38820     20 91 59 90 
38824     25 91 A2 90 
38828     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
3882c     D0 89 40 EE 
38830     12 64 C4 71 
38834     29 66 0C 69 
38838     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
3883c     C0 68 02 69 
38840     FE 68 FB 68 
38844     F9 68 F6 68 
38848     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
3884c     EE 68 A8 68 
38850     2C 69 5F 68 
38854     E2 68 81 66 
38858     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
3885c     1E EB A6 8A 
38860     73 8B 5E 93 
38864     7B 90 48 91 
38868     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
3886c     0D 91 11 91 
38870     14 91 16 91 
38874     5C 91 1C 91 
38878     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
3887c     68 91 AF 91 
38880     2A 91 B5 91 
38884     75 91 1A 94 
38888     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
3888c     70 0E CB 6C 
38890     5D 6E C4 67 
38894     99 69 54 69 
38898     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
3889c     D2 69 49 69 
388a0     89 69 86 69 
388a4     40 69 C4 69 
388a8     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
388ac     35 69 76 69 
388b0     58 67 EB 6D 
388b4     E9 6D 89 0F 
388b8     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
388bc     33 94 94 91 
388c0     D9 91 56 91 
388c4     E0 91 9F 91 
388c8     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
388cc     EC 91 EE 91 
388d0     F1 91 F4 91 
388d4     F7 91 3D 92 
388d8     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
388dc     46 92 21 94 
388e0     11 89 A4 9D 
388e4     FD 0E 8F 6C 
388e8     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
388ec     28 6A E1 69 
388f0     65 6A 1F 6A 
388f4     5F 6A 1A 6A 
388f8     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
388fc     54 6A 0F 6A 
38900     4F 6A 09 6A 
38904     06 6A 03 6A 
38908     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
3890c     23 68 69 77 
38910     3A 4D 38 CA 
38914     38 86 4E 91 
38918     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
3891c     64 92 24 92 
38920     6A 92 2A 92 
38924     70 92 30 92 
38928     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
3892c     7B 92 7E 92 
38930     C5 92 84 92 
38934     CB 92 8A 92 
38938     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
3893c     4D 8D F9 E2 
38940     97 59 FE 74 
38944     DB 68 6D 6A 
38948     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
3894c     A8 6A A5 6A 
38950     A3 6A 9F 6A 
38954     9D 6A 9B 6A 
38958     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
3895c     D6 6A 8F 6A 
38960     CF 6A 46 6A 
38964     CA 6A E1 67 
38968     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
3896c     D3 F7 15 92 
38970     90 8C BF 94 
38974     A6 92 EB 92 
38978     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
3897c     B1 92 F7 92 
38980     FA 92 FD 92 
38984     00 93 02 93 
38988     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
3898c     4F 93 52 93 
38990     54 93 22 94 
38994     5A 93 8F 88 
38998     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
3899c     1C 77 07 6C 
389a0     E8 69 7A 6B 
389a4     34 6B 75 6B 
389a8     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
389ac     29 6B 26 6B 
389b0     24 6B 21 6B 
389b4     1D 6B 5E 6B 
389b8     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
389bc     12 6B 52 6B 
389c0     34 69 34 6E 
389c4     BA 73 A4 24 
389c8     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
389cc     7A 94 B3 93 
389d0     72 93 31 93 
389d4     78 93 7A 93 
389d8     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
389dc     83 93 86 93 
389e0     89 93 D0 93 
389e4     D2 93 D5 93 
389e8     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
389ec     DD 93 40 96 
389f0     30 8B 99 9C 
389f4     52 10 94 71 
389f8     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
389fc     46 6C 79 6B 
38a00     40 6C B7 6B 
38a04     F7 6B B1 6B 
38a08     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
38a0c     EC 6B A5 6B 
38a10     A2 6B 9F 6B 
38a14     9D 6B 9A 6B 
38a18     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
38a1c     C8 6A E4 76 
38a20     20 4B F9 CE 
38a24     2E 8A 1A 92 
38a28     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
38a2c     FB 93 BA 93 
38a30     01 94 03 94 
38a34     4A 94 09 94 
38a38     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
38a3c     55 94 14 94 
38a40     9E 94 1A 94 
38a44     61 94 20 94 
38a48     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
38a4c     3E 87 E5 CD 
38a50     5F 50 6C 78 
38a54     B5 6A 04 6C 
38a58     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
38a5c     83 6C 7F 6C 
38a60     7C 6C 36 6C 
38a64     76 6C 74 6C 
38a68     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
38a6c     6B 6C 25 6C 
38a70     66 6C 1F 6C 
38a74     1D 6C 41 6A 
38a78     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
38a7c     BA FA FC 94 
38a80     5B 8D 97 96 
38a84     3B 94 C5 94 
38a88     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
38a8c     89 94 8C 94 
38a90     8F 94 92 94 
38a94     94 94 DB 94 
38a98     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
38a9c     E4 94 E7 94 
38aa0     2D 95 74 95 
38aa4     C8 96 15 89 
38aa8     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
38aac     CB 75 31 6F 
38ab0     7E 6B 10 6D 
38ab4     C9 6C 0A 6D 
38ab8     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
38abc     BD 6C FF 6C 
38ac0     FB 6C F9 6C 
38ac4     B2 6C F3 6C 
38ac8     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
38acc     A7 6C E8 6C 
38ad0     0D 6B 85 6F 
38ad4     C7 74 10 28 
38ad8     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
38adc     96 96 47 95 
38ae0     06 95 0A 95 
38ae4     0C 95 0F 95 
38ae8     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
38aec     17 95 5E 95 
38af0     61 95 63 95 
38af4     22 95 AC 95 
38af8     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
38afc     72 95 17 98 
38b00     59 8E 01 96 
38b04     CF FC 5A 68 
38b08     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
38b0c     96 6D 50 6D 
38b10     D5 6D 4A 6D 
38b14     8C 6D 89 6D 
38b18     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
38b1c     80 6D 3A 6D 
38b20     7A 6D 77 6D 
38b24     75 6D 71 6D 
38b28     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
38b2c     18 6C BC 78 
38b30     9A 4F 7E CF 
38b34     1F 89 F1 93 
38b38     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
38b3c     D2 95 4E 95 
38b40     D7 95 53 95 
38b44     DD 95 E0 95 
38b48     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
38b4c     A5 95 EB 95 
38b50     EE 95 F0 95 
38b54     37 96 B3 95 
38b58     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
38b5c     1A 98 D5 8D 
38b60     C5 9F CD 0F 
38b64     0F 71 F3 73 
38b68     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
38b6c     D9 6D 5E 6E 
38b70     D3 6D 58 6E 
38b74     12 6E 0F 6E 
38b78     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
38b7c     49 6E BF 6D 
38b80     87 6E 76 6D 
38b84     81 6E 11 6B 
38b88     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
38b8c     3F 09 44 95 
38b90     E5 8D 3F 99 
38b94     D4 95 A2 96 
38b98     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
38b9c     23 96 69 96 
38ba0     6B 96 6E 96 
38ba4     71 96 74 96 
38ba8     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
38bac     BF 96 3C 96 
38bb0     C6 96 C8 96 
38bb4     A3 98 51 8D 
38bb8     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
38bbc     CF 75 29 73 
38bc0     90 6C EC 6E 
38bc4     62 6E E7 6E 
38bc8     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
38bcc     9A 6E 98 6E 
38bd0     95 6E 91 6E 
38bd4     8E 6E CF 6E 
38bd8     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
38bdc     40 6E C3 6E 
38be0     E8 6C 45 6F 
38be4     A5 7B C9 35 
38be8     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
38bec     2D 98 23 97 
38bf0     E1 96 A0 96 
38bf4     A4 96 EA 96 
38bf8     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
38bfc     AF 96 F4 96 
38c00     F8 96 3E 97 
38c04     FD 96 43 97 
38c08     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
38c0c     08 97 6B 99 
38c10     D6 92 88 91 
38c14     D8 EE 84 66 
38c18     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
38c1c     2E 6F E7 6E 
38c20     6C 6F 24 6F 
38c24     21 6F 1F 6F 
38c28     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
38c2c     17 6F 13 6F 
38c30     54 6F 0E 6F 
38c34     0B 6F 4B 6F 
38c38     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
38c3c     27 6D 1C 7B 
38c40     19 59 9F DB 
38c44     66 8E BC 94 
38c48     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
38c4c     67 97 26 97 
38c50     6D 97 2B 97 
38c54     72 97 32 97 
38c58     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
38c5c     C1 97 7F 97 
38c60     C6 97 85 97 
38c64     CB 97 CE 97 
38c68     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
38c6c     EC 8A C4 C6 
38c70     68 4C F4 7D 
38c74     63 6E E8 6E 
38c78     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
38c7c     ED 6F A7 6F 
38c80     E7 6F A0 6F 
38c84     E1 6F 9B 6F 
38c88     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
38c8c     D5 6F 8F 6F 
38c90     CE 6F 45 6F 
38c94     86 6F 68 6D 
38c98     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
38c9c     C0 13 AD A2 
38ca0     A7 8E 79 99 
38ca4     E6 97 E8 97 
38ca8     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
38cac     F1 97 F3 97 
38cb0     F6 97 F9 97 
38cb4     FB 97 FE 97 
38cb8     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
38cbc     4A 98 0A 98 
38cc0     93 98 0F 98 
38cc4     7F 9B BF 8C 
38cc8     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
38ccc     91 7B 62 73 
38cd0     1A 6E B9 70 
38cd4     EB 6F B3 70 
38cd8     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
38cdc     25 70 20 70 
38ce0     1E 70 1B 70 
38ce4     18 70 15 70 
38ce8     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
38cec     0D 70 09 70 
38cf0     07 70 03 70 
38cf4     01 70 FD 6F 
38cf8     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
38cfc     F6 6F F2 6F 
38d00     EF 6F EC 6F 
38d04     2C 70 E6 6F 
38d08     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
38d0c     DD 6F 97 6F 
38d10     D7 6F 84 6E 
38d14     8F 6F 3F 7D 
38d18     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
38d1a     FF FF FF FF 
38d1e     FF FF       | atarist_spl file "atarist.spl" '512
38d20     00 00 00 00 
38d24     00 00 00 00 
38d28     00 00       | 	byte	$00[10]
38d2a     17 7F F2 7F 
38d2e     B2 7F 72 7F 
38d32     33 7F F4 7E 
38d36     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
38d3a     36 7E F5 7D 
38d3e     E9 51 F2 0D 
38d42     8E 00 F3 FD 
38d46     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
38d4a     57 FD 58 FD 
38d4e     5B FD 5C FD 
38d52     5C FD 60 7D 
38d56     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
38d5a     D6 7C 98 7C 
38d5e     59 7C 1A 7C 
38d62     DC 7B 9E 7B 
38d66     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
38d6a     F3 05 00 FD 
38d6e     41 FB EA FA 
38d72     D9 FA DB FA 
38d76     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
38d7a     E4 FA 9B 36 
38d7e     F8 7A C0 7A 
38d82     84 7A 45 7A 
38d86     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
38d8a     8E 79 51 79 
38d8e     15 79 D7 78 
38d92     3C 1F EB FF 
38d96     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
38d9a     6D F8 65 F8 
38d9e     68 F8 6D F8 
38da2     70 F8 74 F8 
38da6     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
38daa     AB 60 79 60 
38dae     4B 60 1A 60 
38db2     E9 5F B9 5F 
38db6     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
38dba     FB 59 B2 0B 
38dbe     92 FA 3A F7 
38dc2     96 F6 79 F6 
38dc6     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
38dca     82 F6 86 F6 
38dce     8C F6 DB 5D 
38dd2     F1 5E C1 5E 
38dd6     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
38dda     34 5E 04 5E 
38dde     D6 5D A6 5D 
38de2     78 5D D4 3E 
38de6     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
38dea     27 F5 BA F4 
38dee     AB F4 AD F4 
38df2     B2 F4 B8 F4 
38df6     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
38dfa     26 5D 2B 5D 
38dfe     FC 5C CD 5C 
38e02     9F 5C 70 5C 
38e06     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
38e0a     E5 5B B8 5B 
38e0e     DB 24 A7 FC 
38e12     D1 F4 4D F3 
38e16     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
38e1a     04 F3 0B F3 
38e1e     11 F3 16 F3 
38e22     DE 18 98 5B 
38e26     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
38e2a     4E 4A 29 48 
38e2e     A0 47 6A 47 
38e32     43 47 20 47 
38e36     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
38e3a     E2 F6 98 F2 
38e3e     C5 F1 A3 F1 
38e42     A3 F1 A8 F1 
38e46     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
38e4a     BF F1 00 3D 
38e4e     EF 46 CD 46 
38e52     AA 46 86 46 
38e56     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
38e5a     1C 46 F9 45 
38e5e     D7 45 EE 43 
38e62     DE 02 E8 F3 
38e66     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
38e6a     61 F0 65 F0 
38e6e     6D F0 74 F0 
38e72     7C F0 84 F0 
38e76     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
38e7a     8E 45 6D 45 
38e7e     49 45 27 45 
38e82     05 45 E1 44 
38e86     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
38e8a     F1 2F A9 FB 
38e8e     8B F1 9B EF 
38e92     40 EF 36 EF 
38e96     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
38e9a     4D EF 56 EF 
38e9e     5E EF 7B 44 
38ea2     8C 44 69 44 
38ea6     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
38eaa     03 44 E1 43 
38eae     C0 43 F5 37 
38eb2     69 33 0F 11 
38eb6     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
38eba     66 EE 37 EE 
38ebe     38 EE 40 EE 
38ec2     48 EE 51 EE 
38ec6     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
38eca     7D 32 6A 32 
38ece     51 32 37 32 
38ed2     1F 32 05 32 
38ed6     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
38eda     B9 31 A1 31 
38ede     F1 04 F4 F1 
38ee2     50 EE A0 ED 
38ee6     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
38eea     93 ED 9A ED 
38eee     A4 ED AD ED 
38ef2     F4 27 C1 31 
38ef6     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
38efa     78 31 5F 31 
38efe     46 31 2E 31 
38f02     15 31 FC 30 
38f06     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
38f0a     C4 EF 4A ED 
38f0e     DC EC CB EC 
38f12     D2 EC DA EC 
38f16     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
38f1a     F9 EC 64 2F 
38f1e     0A 31 F1 30 
38f22     D9 30 C0 30 
38f26     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
38f2a     78 30 5F 30 
38f2e     46 30 38 23 
38f32     A6 F6 19 EE 
38f36     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
38f3a     20 EC 28 EC 
38f3e     32 EC 3C EC 
38f42     47 EC 51 EC 
38f46     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
38f4a     A3 22 93 22 
38f4e     7F 22 6E 22 
38f52     5D 22 4C 22 
38f56     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
38f5a     77 09 76 F1 
38f5e     CC EC F0 EB 
38f62     CD EB CE EB 
38f66     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
38f6a     ED EB F5 EB 
38f6e     3E F6 6B 22 
38f72     5F 22 4E 22 
38f76     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
38f7a     1B 22 0B 22 
38f7e     FA 21 E9 21 
38f82     D8 21 4D FF 
38f86     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
38f8a     92 EB 7B EB 
38f8e     82 EB 8C EB 
38f92     97 EB A1 EB 
38f96     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
38f9a     15 22 04 22 
38f9e     F3 21 E3 21 
38fa2     D2 21 C0 21 
38fa6     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
38faa     8E 21 7D 21 
38fae     9A F8 A4 ED 
38fb2     8E EB 2F EB 
38fb6     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
38fba     37 EB 42 EB 
38fbe     4C EB 57 EB 
38fc2     B2 17 22 19 
38fc6     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
38fca     FD 18 EF 18 
38fce     E3 18 D6 18 
38fd2     CA 18 BD 18 
38fd6     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
38fda     60 EC 35 EB 
38fde     01 EB 01 EB 
38fe2     0C EB 16 EB 
38fe6     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
38fea     34 EB D0 18 
38fee     00 19 F4 18 
38ff2     E8 18 DA 18 
38ff6     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
38ffa     B6 18 A9 18 
38ffe     9D 18 91 05 
39002     F0 EF CA EB 
39006     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3900a     E8 EA F2 EA 
3900e     FE EA 07 EB 
39012     12 EB C2 EF 
39016     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3901a     D9 18 CD 18 
3901e     C0 18 B3 18 
39022     A7 18 9B 18 
39026     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3902a     B8 FC 30 EE 
3902e     61 EB DC EA 
39032     CD EA D2 EA 
39036     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3903a     F3 EA FE EA 
3903e     D2 09 D1 18 
39042     C3 18 17 18 
39046     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3904a     66 11 52 11 
3904e     49 11 41 11 
39052     38 11 E0 F4 
39056     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3905a     C9 EA C5 EA 
3905e     CF EA DB EA 
39062     E6 EA EF EA 
39066     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3906a     89 11 80 11 
3906e     78 11 6E 11 
39072     67 11 5D 11 
39076     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3907a     43 11 32 0D 
3907e     9C F1 07 EC 
39082     F8 EA CD EA 
39086     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3908a     E4 EA ED EA 
3908e     F8 EA 02 EB 
39092     55 11 91 11 
39096     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3909a     75 11 6E 11 
3909e     64 11 5E 11 
390a2     54 11 4A 11 
390a6     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
390aa     A8 EB F1 EA 
390ae     D9 EA DC EA 
390b2     E8 EA F1 EA 
390b6     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
390ba     A6 EB 9E 11 
390be     A0 11 96 11 
390c2     8D 11 85 11 
390c6     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
390ca     6A 11 CA 0D 
390ce     36 0B 57 F8 
390d2     6C ED 57 EB 
390d6     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
390da     F4 EA FF EA 
390de     09 EB 15 EB 
390e2     1E EB 1A FD 
390e6     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
390ea     ED 0A E8 0A 
390ee     E2 0A DC 0A 
390f2     D6 0A D1 0A 
390f6     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
390fa     F8 F3 BC EC 
390fe     57 EB 1E EB 
39102     18 EB 24 EB 
39106     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3910a     42 EB 4D EB 
3910e     08 09 20 0B 
39112     1A 0B 14 0B 
39116     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3911a     04 0B FE 0A 
3911e     F9 0A F2 0A 
39122     84 08 3A F1 
39126     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3912a     42 EB 42 EB 
3912e     4E EB 57 EB 
39132     62 EB 6B EB 
39136     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3913a     48 0B 43 0B 
3913e     3C 0B 36 0B 
39142     31 0B 2C 0B 
39146     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3914a     1B 0B 5C 00 
3914e     6A EF 1B EC 
39152     81 EB 6A EB 
39156     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3915a     85 EB 8E EB 
3915e     99 EB A3 EB 
39162     DD 05 E5 05 
39166     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3916a     DB 05 D8 05 
3916e     D5 05 D1 05 
39172     D0 05 CB 05 
39176     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3917a     0C EC BB EB 
3917e     B3 EB BB EB 
39182     C5 EB D0 EB 
39186     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3918a     E4 F7 2C 06 
3918e     28 06 24 06 
39192     22 06 1F 06 
39196     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3919a     16 06 14 06 
3919e     0F 06 D0 F3 
391a2     65 ED 2D EC 
391a6     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
391aa     01 EC 0A EC 
391ae     14 EC 1E EC 
391b2     29 EC FB 03 
391b6     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
391ba     63 06 60 06 
391be     5E 06 59 06 
391c2     58 06 54 06 
391c6     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
391ca     69 F1 21 ED 
391ce     55 EC 33 EC 
391d2     36 EC 40 EC 
391d6     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
391da     5C EC 68 EC 
391de     92 02 D9 02 
391e2     D7 02 D7 02 
391e6     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
391ea     D1 02 D1 02 
391ee     CE 02 CD 02 
391f2     5D FC 80 EF 
391f6     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
391fa     83 EC 8A EC 
391fe     93 EC 9C EC 
39202     A5 EC B1 EC 
39206     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3920a     2B 03 2A 03 
3920e     29 03 26 03 
39212     25 03 24 03 
39216     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3921a     1F 03 70 F7 
3921e     D0 EE 27 ED 
39222     DB EC D4 EC 
39226     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3922a     F0 EC FA EC 
3922e     02 ED F9 F4 
39232     7B 03 7C 03 
39236     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3923a     75 03 73 03 
3923e     72 03 70 03 
39242     6D 03 6C 03 
39246     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3924a     54 ED 22 ED 
3924e     22 ED 2C ED 
39252     35 ED 3F ED 
39256     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3925a     14 01 C3 03 
3925e     C1 03 C0 03 
39262     5F 01 A5 00 
39266     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3926a     7B 00 7C 00 
3926e     20 00 85 F1 
39272     2A EE 89 ED 
39276     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3927a     80 ED 87 ED 
3927e     90 ED 9A ED 
39282     A3 ED 73 00 
39286     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3928a     D0 00 D0 00 
3928e     D0 00 D0 00 
39292     D0 00 CF 00 
39296     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3929a     80 F0 3D EE 
3929e     D5 ED C7 ED 
392a2     CD ED D6 ED 
392a6     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
392aa     F2 ED FA ED 
392ae     1D 01 29 01 
392b2     27 01 27 01 
392b6     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
392ba     25 01 26 01 
392be     26 01 23 01 
392c2     D0 F7 EC EF 
392c6     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
392ca     1C EE 24 EE 
392ce     2D EE 37 EE 
392d2     40 EE 47 EE 
392d6     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
392da     7D 01 7B 01 
392de     7A 01 7A 01 
392e2     79 01 78 01 
392e6     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
392ea     84 FE DE F3 
392ee     6C EF 93 EE 
392f2     72 EE 72 EE 
392f6     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
392fa     8B EE 95 EE 
392fe     9E EE 15 FC 
39302     67 FE 67 FE 
39306     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3930a     6B FE 6B FE 
3930e     6D FE 6D FE 
39312     6D FE 6F FE 
39316     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3931a     DF EE CC EE 
3931e     CF EE D9 EE 
39322     E1 EE EA EE 
39326     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3932a     5A FE C4 FE 
3932e     C3 FE C5 FE 
39332     C6 FE C6 FE 
39336     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3933a     C8 FE C7 FE 
3933e     DA FB 85 F1 
39342     8D EF 31 EF 
39346     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3934a     34 EF 3E EF 
3934e     46 EF 4F EF 
39352     57 EF 0D FF 
39356     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3935a     1F FF 1F FF 
3935e     21 FF 21 FF 
39362     21 FF 21 FF 
39366     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3936a     15 F1 BE EF 
3936e     84 EF 7E EF 
39372     88 EF 8F EF 
39376     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3937a     A9 EF 06 F2 
3937e     A6 FC AB FC 
39382     AD FC AE FC 
39386     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3938a     B2 FC B4 FC 
3938e     B6 FC B7 FC 
39392     8B F4 BD F0 
39396     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3939a     E4 EF EE EF 
3939e     F6 EF FD EF 
393a2     04 F0 0E F0 
393a6     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
393aa     0B FD 0D FD 
393ae     0F FD 11 FD 
393b2     11 FD 13 FD 
393b6     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
393ba     17 FD 64 F3 
393be     CD F0 52 F0 
393c2     41 F0 45 F0 
393c6     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
393ca     5B F0 64 F0 
393ce     6D F0 FB FC 
393d2     65 FD 68 FD 
393d6     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
393da     6C FD 6D FD 
393de     6F FD 70 FD 
393e2     72 FD B3 FB 
393e6     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
393ea     A4 F0 99 F0 
393ee     A0 F0 A8 F0 
393f2     AE F0 B9 F0 
393f6     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
393fa     CB FB DD FB 
393fe     DE FB E0 FB 
39402     E3 FB E3 FB 
39406     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3940a     E9 FB EC FB 
3940e     62 F7 27 F2 
39412     2A F1 FF F0 
39416     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3941a     0C F1 13 F1 
3941e     1B F1 23 F1 
39422     33 F2 3C FC 
39426     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3942a     42 FC 45 FC 
3942e     47 FC 48 FC 
39432     4A FC 4C FC 
39436     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3943a     20 F2 77 F1 
3943e     5C F1 5F F1 
39442     64 F1 6C F1 
39446     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3944a     83 F1 DC F8 
3944e     9A FC 9A FC 
39452     9B FC 9E FC 
39456     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3945a     A3 FC A4 FC 
3945e     A6 FC A9 FC 
39462     90 F4 33 F2 
39466     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3946a     BA F1 BF F1 
3946e     C7 F1 CE F1 
39472     D6 F1 DC F1 
39476     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3947a     F3 FC F5 FC 
3947e     FE FB 79 FB 
39482     62 FB 5F FB 
39486     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3948a     6F FA AF F3 
3948e     53 F2 12 F2 
39492     0F F2 15 F2 
39496     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3949a     2A F2 32 F2 
3949e     38 F2 9A FB 
394a2     AF FB B1 FB 
394a6     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
394aa     B7 FB B8 FB 
394ae     BA FB BC FB 
394b2     C1 FB 3B F8 
394b6     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
394ba     6E F2 6C F2 
394be     74 F2 7A F2 
394c2     81 F2 87 F2 
394c6     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
394ca     06 FC 09 FC 
394ce     0C FC 0E FC 
394d2     0F FC 12 FC 
394d6     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
394da     17 FC 1A FC 
394de     B2 F6 7B F3 
394e2     DD F2 C5 F2 
394e6     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
394ea     D4 F2 DB F2 
394ee     E0 F2 E8 F2 
394f2     28 F8 60 FC 
394f6     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
394fa     64 FC 66 FC 
394fe     68 FC 6A FC 
39502     6D FC 52 FC 
39506     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3950a     78 F3 24 F3 
3950e     1A F3 1E F3 
39512     24 F3 2A F3 
39516     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3951a     3D F3 80 FA 
3951e     0C FB 0F FB 
39522     10 FB 14 FB 
39526     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3952a     1B FB 1D FB 
3952e     1F FB 92 FA 
39532     DE F4 AE F3 
39536     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3953a     79 F3 7E F3 
3953e     84 F3 8C F3 
39542     92 F3 97 F3 
39546     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3954a     67 FB 69 FB 
3954e     6B FB 6F FB 
39552     71 FB 72 FB 
39556     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3955a     E3 F8 BA F4 
3955e     EE F3 CC F3 
39562     CA F3 CF F3 
39566     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3956a     E2 F3 E8 F3 
3956e     ED F3 B7 FB 
39572     BC FB BE FB 
39576     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3957a     C4 FB C6 FB 
3957e     C8 FB C9 FB 
39582     CC FB 8F F7 
39586     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3958a     1E F4 1E F4 
3958e     24 F4 2A F4 
39592     30 F4 38 F4 
39596     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3959a     AD FA B1 FA 
3959e     B4 FA B6 FA 
395a2     BA FA BB FA 
395a6     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
395aa     C2 FA C6 FA 
395ae     55 F6 C6 F4 
395b2     7D F4 72 F4 
395b6     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
395ba     83 F4 89 F4 
395be     8F F4 94 F4 
395c2     66 FA 03 FB 
395c6     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
395ca     0A FB 0E FB 
395ce     10 FB 11 FB 
395d2     16 FB 18 FB 
395d6     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
395da     F9 F4 CA F4 
395de     C5 F4 CB F4 
395e2     D1 F4 D7 F4 
395e6     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
395ea     E8 F4 3F FB 
395ee     56 FB 58 FB 
395f2     5A FB 5E FB 
395f6     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
395fa     64 FB 64 FB 
395fe     69 FB 99 F9 
39602     E9 F5 33 F5 
39606     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3960a     1D F5 22 F5 
3960e     27 F5 2E F5 
39612     32 F5 37 F5 
39616     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3961a     BC FA BC FA 
3961e     C1 FA C2 FA 
39622     C4 FA C8 FA 
39626     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3962a     F9 F7 DB F5 
3962e     78 F5 69 F5 
39632     6A F5 70 F5 
39636     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3963a     7F F5 85 F5 
3963e     6E F7 06 FB 
39642     0A FB 0B FB 
39646     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3964a     14 FB 15 FB 
3964e     18 FB 1B FB 
39652     1D FB 70 F7 
39656     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3965a     B6 F5 BB F5 
3965e     C0 F5 C6 F5 
39662     CA F5 CF F5 
39666     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3966a     54 FB 56 FB 
3966e     5A FB 5B FB 
39672     5E FB 5F FB 
39676     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3967a     67 FB 52 FB 
3967e     29 F7 33 F6 
39682     06 F6 02 F6 
39686     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3968a     10 F6 16 F6 
3968e     1A F6 1F F6 
39692     81 FB 9F FB 
39696     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3969a     51 FB F2 FA 
3969e     E3 FA E3 FA 
396a2     E5 FA E9 FA 
396a6     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
396aa     64 F6 4D F6 
396ae     4D F6 53 F6 
396b2     57 F6 5C F6 
396b6     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
396ba     6A F6 19 FB 
396be     1E FB 22 FB 
396c2     23 FB 24 FB 
396c6     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
396ca     2C FB 2E FB 
396ce     32 FB F0 F8 
396d2     01 F7 A5 F6 
396d6     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
396da     9F F6 A3 F6 
396de     A6 F6 AC F6 
396e2     B0 F6 EB F7 
396e6     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
396ea     68 FB 6C FB 
396ee     6E FB 71 FB 
396f2     72 FB 74 FB 
396f6     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
396fa     71 F8 21 F7 
396fe     E5 F6 DD F6 
39702     E1 F6 E6 F6 
39706     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3970a     F5 F6 F7 F6 
3970e     F7 FA AB FB 
39712     AD FB AF FB 
39716     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3971a     B6 FB B9 FB 
3971e     BB FB BC FB 
39722     21 FB 07 F8 
39726     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3972a     22 F7 26 F7 
3972e     2B F7 2E F7 
39732     34 F7 38 F7 
39736     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3973a     13 FB 16 FB 
3973e     17 FB 1B FB 
39742     1E FB 20 FB 
39746     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3974a     26 FB 77 FA 
3974e     F3 F7 7C F7 
39752     67 F7 6A F7 
39756     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3975a     74 F7 7A F7 
3975e     7E F7 82 F7 
39762     53 FB 5A FB 
39766     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3976a     5F FB 63 FB 
3976e     65 FB 67 FB 
39772     69 FB 6A FB 
39776     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3977a     B5 F7 A9 F7 
3977e     AD F7 B0 F7 
39782     B5 F7 B8 F7 
39786     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3978a     6E F8 99 FB 
3978e     9C FB 9D FB 
39792     9F FB A4 FB 
39796     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3979a     A9 FB AB FB 
3979e     AD FB 46 F9 
397a2     26 F8 F0 F7 
397a6     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
397aa     F4 F7 F8 F7 
397ae     FB F7 FF F7 
397b2     03 F8 65 FA 
397b6     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
397ba     2B FB 2F FB 
397be     30 FB 32 FB 
397c2     34 FB 38 FB 
397c6     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
397ca     E9 F8 4A F8 
397ce     2E F8 2C F8 
397d2     2F F8 36 F8 
397d6     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
397da     41 F8 44 F8 
397de     4A FB 67 FB 
397e2     68 FB 6B FB 
397e6     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
397ea     73 FB 74 FB 
397ee     78 FB 7A FB 
397f2     14 FB E7 F8 
397f6     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
397fa     6D F8 70 F8 
397fe     73 F8 78 F8 
39802     7C F8 80 F8 
39806     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3980a     A6 FB A7 FB 
3980e     A9 FB AC FB 
39812     AF FB B1 FB 
39816     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3981a     B7 FB 73 FA 
3981e     F8 F8 B4 F8 
39822     A9 F8 AB F8 
39826     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3982a     B4 F8 B8 F8 
3982e     BB F8 FA F8 
39832     64 FB 65 FB 
39836     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3983a     6D FB 6F FB 
3983e     70 FB 74 FB 
39842     77 FB 77 FB 
39846     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3984a     E9 F8 E4 F8 
3984e     E8 F8 EB F8 
39852     EE F8 F2 F8 
39856     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3985a     B5 FA 9F FB 
3985e     A1 FB A4 FB 
39862     A5 FB A9 FB 
39866     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3986a     AE FB B1 FB 
3986e     B2 FB C7 F9 
39872     39 F9 22 F9 
39876     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3987a     26 F9 2A F9 
3987e     2E F9 32 F9 
39882     33 F9 BA FB 
39886     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3988a     DE FB E1 FB 
3988e     E2 FB E4 FB 
39892     E5 FB E7 FB 
39896     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3989a     C5 F9 67 F9 
3989e     57 F9 56 F9 
398a2     5B F9 5F F9 
398a6     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
398aa     68 F9 6C F9 
398ae     0B FC 11 FC 
398b2     14 FC 15 FC 
398b6     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
398ba     B5 FB B5 FB 
398be     B6 FB B8 FB 
398c2     E9 FA C8 F9 
398c6     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
398ca     90 F9 94 F9 
398ce     95 F9 99 F9 
398d2     9D F9 9F F9 
398d6     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
398da     DE FB DF FB 
398de     E2 FB E4 FB 
398e2     E6 FB E8 FB 
398e6     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
398ea     EF FB AC FA 
398ee     E9 F9 C7 F9 
398f2     C3 F9 C8 F9 
398f6     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
398fa     D0 F9 D4 F9 
398fe     D6 F9 0E FB 
39902     11 FC 13 FC 
39906     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3990a     19 FC 1B FC 
3990e     1D FC 1E FC 
39912     21 FC 22 FC 
39916     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3991a     F7 F9 F7 F9 
3991e     FB F9 FE F9 
39922     00 FA 03 FA 
39926     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3992a     1B FC 45 FC 
3992e     46 FC 48 FC 
39932     4A FC 4B FC 
39936     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3993a     52 FC 54 FC 
3993e     F3 FB 82 FA 
39942     35 FA 28 FA 
39946     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3994a     31 FA 32 FA 
3994e     37 FA 37 FA 
39952     3C FA 00 FC 
39956     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3995a     09 FC 0B FC 
3995e     0F FC 12 FC 
39962     12 FC 15 FC 
39966     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3996a     8D FA 60 FA 
3996e     5B FA 5C FA 
39972     60 FA 61 FA 
39976     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3997a     6C FA 6D FA 
3997e     37 FC 3A FC 
39982     3B FC 3D FC 
39986     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3998a     43 FC 44 FC 
3998e     45 FC 47 FC 
39992     51 FB AB FA 
39996     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3999a     8E FA 91 FA 
3999e     93 FA 95 FA 
399a2     98 FA 9B FA 
399a6     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
399aa     68 FC 6A FC 
399ae     6C FC 6E FC 
399b2     70 FC 72 FC 
399b6     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
399ba     76 FC 3B FB 
399be     D0 FA BB FA 
399c2     B9 FA BD FA 
399c6     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
399ca     C4 FA C6 FA 
399ce     CA FA 13 FC 
399d2     3A FC 3A FC 
399d6     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
399da     41 FC 43 FC 
399de     44 FC 47 FC 
399e2     48 FC 3C FC 
399e6     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
399ea     E6 FA E8 FA 
399ee     EB FA EE FA 
399f2     F0 FA F2 FA 
399f6     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
399fa     61 FC 66 FC 
399fe     68 FC 6B FC 
39a02     6C FC 6E FC 
39a06     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
39a0a     73 FC 75 FC 
39a0e     13 FC 3F FB 
39a12     17 FB 12 FB 
39a16     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
39a1a     1A FB 1D FB 
39a1e     1F FB 20 FB 
39a22     23 FB 92 FC 
39a26     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
39a2a     96 FC 97 FC 
39a2e     9A FC 9C FC 
39a32     9E FC 9F FC 
39a36     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
39a3a     5A FB 41 FB 
39a3e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
39a42     73 32 00 04 
39a46     00 00 10 00 
39a4a     00 00 00 00 
39a4e     00 00 00 00 | atari2 file "atari2.s2"
39a52     43 87 43 87 
39a56     43 87 44 87 
39a5a     43 87 44 87 
39a5e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39a62     43 87 43 87 
39a66     43 87 44 87 
39a6a     43 87 43 87 
39a6e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39a72     44 87 43 87 
39a76     44 87 43 87 
39a7a     43 87 43 87 
39a7e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39a82     43 87 43 87 
39a86     44 87 43 87 
39a8a     44 87 44 87 
39a8e     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
39a92     43 87 43 87 
39a96     44 87 43 87 
39a9a     43 87 42 87 
39a9e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39aa2     43 87 43 87 
39aa6     43 87 43 87 
39aaa     44 87 43 87 
39aae     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39ab2     44 87 44 87 
39ab6     43 87 44 87 
39aba     43 87 44 87 
39abe     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
39ac2     44 87 43 87 
39ac6     44 87 44 87 
39aca     43 87 43 87 
39ace     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39ad2     43 87 44 87 
39ad6     44 87 43 87 
39ada     43 87 44 87 
39ade     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39ae2     43 87 43 87 
39ae6     43 87 43 87 
39aea     43 87 43 87 
39aee     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
39af2     42 87 43 87 
39af6     44 87 42 87 
39afa     43 87 43 87 
39afe     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
39b02     43 87 44 87 
39b06     44 87 43 87 
39b0a     43 87 43 87 
39b0e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39b12     43 87 5C 87 
39b16     EE 86 AC 87 
39b1a     4C 7C A3 78 
39b1e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
39b22     BC 78 BB 78 
39b26     BD 78 BC 78 
39b2a     BB 78 BD 78 
39b2e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
39b32     BB 78 BB 78 
39b36     BC 78 BC 78 
39b3a     BC 78 BB 78 
39b3e     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39b42     BC 78 BC 78 
39b46     BC 78 BC 78 
39b4a     BC 78 BC 78 
39b4e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39b52     BB 78 BC 78 
39b56     A0 78 4C 7C 
39b5a     11 7A 29 89 
39b5e     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
39b62     44 87 43 87 
39b66     44 87 43 87 
39b6a     43 87 42 87 
39b6e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39b72     43 87 43 87 
39b76     44 87 ED 85 
39b7a     71 85 52 79 
39b7e     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
39b82     BC 78 BC 78 
39b86     BC 78 BC 78 
39b8a     BC 78 BC 78 
39b8e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39b92     BC 78 BC 78 
39b96     BC 78 A0 78 
39b9a     CF 7A B9 81 
39b9e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
39ba2     44 87 43 87 
39ba6     43 87 44 87 
39baa     43 87 44 87 
39bae     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39bb2     43 87 43 87 
39bb6     43 87 43 87 
39bba     44 87 43 87 
39bbe     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39bc2     43 87 43 87 
39bc6     44 87 43 87 
39bca     44 87 43 87 
39bce     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39bd2     44 87 43 87 
39bd6     43 87 43 87 
39bda     5A 87 39 81 
39bde     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
39be2     A5 78 BC 78 
39be6     BB 78 BC 78 
39bea     BB 78 BC 78 
39bee     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
39bf2     BC 78 BC 78 
39bf6     BC 78 BC 78 
39bfa     BC 78 8F 79 
39bfe     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
39c02     09 85 47 87 
39c06     43 87 43 87 
39c0a     42 87 42 87 
39c0e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
39c12     43 87 43 87 
39c16     43 87 43 87 
39c1a     43 87 44 87 
39c1e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39c22     43 87 43 87 
39c26     44 87 43 87 
39c2a     42 87 43 87 
39c2e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
39c32     44 87 43 87 
39c36     43 87 43 87 
39c3a     44 87 44 87 
39c3e     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
39c42     94 78 55 7A 
39c46     B9 78 BC 78 
39c4a     BC 78 BC 78 
39c4e     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39c52     BC 78 BB 78 
39c56     BC 78 BC 78 
39c5a     BC 78 BC 78 
39c5e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39c62     BB 78 BC 78 
39c66     BC 78 BC 78 
39c6a     BB 78 BC 78 
39c6e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39c72     BC 78 BC 78 
39c76     BD 78 BC 78 
39c7a     BC 78 BB 78 
39c7e     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
39c82     94 78 B3 84 
39c86     36 84 4A 87 
39c8a     43 87 43 87 
39c8e     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
39c92     43 87 44 87 
39c96     43 87 43 87 
39c9a     43 87 43 87 
39c9e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39ca2     43 87 44 87 
39ca6     43 87 44 87 
39caa     43 87 43 87 
39cae     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39cb2     43 87 43 87 
39cb6     43 87 45 87 
39cba     43 87 43 87 
39cbe     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
39cc2     43 87 44 87 
39cc6     44 87 44 87 
39cca     43 87 43 87 
39cce     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39cd2     43 87 42 87 
39cd6     43 87 43 87 
39cda     44 87 43 87 
39cde     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39ce2     54 87 3C 82 
39ce6     36 83 52 79 
39cea     C6 78 BC 78 
39cee     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
39cf2     BB 78 BB 78 
39cf6     BC 78 BC 78 
39cfa     BC 78 BC 78 
39cfe     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39d02     BD 78 ED 78 
39d06     1B 79 F4 83 
39d0a     4D 83 4E 87 
39d0e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
39d12     44 87 43 87 
39d16     42 87 44 87 
39d1a     43 87 42 87 
39d1e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
39d22     43 87 54 87 
39d26     26 82 B3 84 
39d2a     D6 77 BB 78 
39d2e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
39d32     BC 78 BB 78 
39d36     BB 78 BB 78 
39d3a     BB 78 BB 78 
39d3e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
39d42     BC 78 BC 78 
39d46     26 79 18 75 
39d4a     36 83 1F 84 
39d4e     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
39d52     43 87 43 87 
39d56     43 87 43 87 
39d5a     43 87 44 87 
39d5e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39d62     43 87 44 87 
39d66     44 87 43 87 
39d6a     43 87 43 87 
39d6e     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
39d72     43 87 43 87 
39d76     43 87 43 87 
39d7a     44 87 44 87 
39d7e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
39d82     44 87 43 87 
39d86     43 87 43 87 
39d8a     43 87 44 87 
39d8e     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39d92     44 87 44 87 
39d96     44 87 43 87 
39d9a     44 87 43 87 
39d9e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39da2     43 87 43 87 
39da6     43 87 44 87 
39daa     44 87 43 87 
39dae     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39db2     43 87 43 87 
39db6     43 87 43 87 
39dba     43 87 44 87 
39dbe     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39dc2     43 87 44 87 
39dc6     43 87 44 87 
39dca     19 87 7D 86 
39dce     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
39dd2     B1 78 BC 78 
39dd6     BC 78 BC 78 
39dda     BC 78 BC 78 
39dde     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39de2     BC 78 BC 78 
39de6     BD 78 BC 78 
39dea     B7 78 3B 7B 
39dee     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
39df2     96 86 44 87 
39df6     43 87 43 87 
39dfa     43 87 43 87 
39dfe     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
39e02     44 87 44 87 
39e06     43 87 44 87 
39e0a     43 87 44 87 
39e0e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
39e12     43 87 44 87 
39e16     43 87 44 87 
39e1a     43 87 44 87 
39e1e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39e22     43 87 44 87 
39e26     43 87 43 87 
39e2a     44 87 43 87 
39e2e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39e32     44 87 44 87 
39e36     43 87 43 87 
39e3a     43 87 44 87 
39e3e     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39e42     43 87 43 87 
39e46     43 87 43 87 
39e4a     44 87 44 87 
39e4e     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
39e52     36 83 CF 7A 
39e56     AB 78 BB 78 
39e5a     BC 78 BC 78 
39e5e     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
39e62     BB 78 BC 78 
39e66     BC 78 BC 78 
39e6a     BC 78 BC 78 
39e6e     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39e72     BC 78 BC 78 
39e76     BC 78 BB 78 
39e7a     BC 78 BC 78 
39e7e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39e82     BB 78 BC 78 
39e86     BB 78 BC 78 
39e8a     BC 78 BD 78 
39e8e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
39e92     BC 78 BC 78 
39e96     BC 78 BC 78 
39e9a     BC 78 BD 78 
39e9e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
39ea2     BC 78 BB 78 
39ea6     BC 78 BB 78 
39eaa     BB 78 BC 78 
39eae     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
39eb2     BC 78 BC 78 
39eb6     BC 78 BC 78 
39eba     BC 78 BB 78 
39ebe     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
39ec2     BC 78 BC 78 
39ec6     BC 78 BD 78 
39eca     BB 78 BC 78 
39ece     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39ed2     BC 78 BC 78 
39ed6     BC 78 BB 78 
39eda     BC 78 BB 78 
39ede     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39ee2     BB 78 BC 78 
39ee6     BC 78 BC 78 
39eea     BC 78 BB 78 
39eee     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39ef2     BC 78 BC 78 
39ef6     BC 78 BB 78 
39efa     BC 78 BB 78 
39efe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39f02     BC 78 BC 78 
39f06     BC 78 BC 78 
39f0a     BB 78 BC 78 
39f0e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39f12     BC 78 9F 78 
39f16     52 79 B3 84 
39f1a     2F 86 60 87 
39f1e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
39f22     44 87 43 87 
39f26     43 87 43 87 
39f2a     43 87 43 87 
39f2e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39f32     43 87 43 87 
39f36     43 87 44 87 
39f3a     43 87 43 87 
39f3e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39f42     43 87 43 87 
39f46     43 87 43 87 
39f4a     43 87 44 87 
39f4e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39f52     44 87 44 87 
39f56     5E 87 BC 80 
39f5a     FB 80 94 78 
39f5e     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
39f62     BD 78 BC 78 
39f66     BB 78 BC 78 
39f6a     BB 78 BB 78 
39f6e     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
39f72     BC 78 BB 78 
39f76     BB 78 6B 79 
39f7a     D6 77 AC 87 
39f7e     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
39f82     43 87 44 87 
39f86     43 87 43 87 
39f8a     44 87 43 87 
39f8e     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39f92     43 87 44 87 
39f96     43 87 5C 87 
39f9a     E7 80 00 80 
39f9e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
39fa2     BC 78 BD 78 
39fa6     BC 78 BC 78 
39faa     BC 78 BB 78 
39fae     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39fb2     BC 78 BC 78 
39fb6     BB 78 BC 78 
39fba     BB 78 BC 78 
39fbe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39fc2     BB 78 BC 78 
39fc6     BC 78 BC 78 
39fca     BC 78 BC 78 
39fce     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39fd2     BC 78 BC 78 
39fd6     BC 78 BC 78 
39fda     A0 78 8D 7B 
39fde     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
39fe2     60 87 43 87 
39fe6     44 87 44 87 
39fea     43 87 43 87 
39fee     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
39ff2     44 87 43 87 
39ff6     43 87 43 87 
39ffa     44 87 73 86 
39ffe     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3a002     51 7B B6 78 
3a006     BC 78 BD 78 
3a00a     BC 78 BC 78 
3a00e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a012     BB 78 BC 78 
3a016     BD 78 BB 78 
3a01a     BC 78 BB 78 
3a01e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3a022     BC 78 BC 78 
3a026     BC 78 BC 78 
3a02a     BB 78 BC 78 
3a02e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a032     BC 78 BB 78 
3a036     BB 78 BC 78 
3a03a     BC 78 BB 78 
3a03e     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3a042     22 8C AF 84 
3a046     48 87 43 87 
3a04a     44 87 43 87 
3a04e     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3a052     43 87 42 87 
3a056     43 87 43 87 
3a05a     44 87 43 87 
3a05e     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a062     43 87 43 87 
3a066     44 87 44 87 
3a06a     43 87 43 87 
3a06e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3a072     43 87 43 87 
3a076     43 87 43 87 
3a07a     44 87 43 87 
3a07e     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3a082     9F 8B D6 77 
3a086     16 7C B3 78 
3a08a     BC 78 BB 78 
3a08e     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3a092     BB 78 BC 78 
3a096     BB 78 BC 78 
3a09a     BC 78 BC 78 
3a09e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a0a2     BC 78 BB 78 
3a0a6     BB 78 BC 78 
3a0aa     BB 78 BC 78 
3a0ae     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3a0b2     BB 78 BB 78 
3a0b6     BC 78 BC 78 
3a0ba     BC 78 BB 78 
3a0be     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3a0c2     BC 78 BC 78 
3a0c6     BC 78 BD 78 
3a0ca     BB 78 BC 78 
3a0ce     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3a0d2     BC 78 BC 78 
3a0d6     BC 78 BB 78 
3a0da     BC 78 BC 78 
3a0de     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a0e2     A8 78 54 7E 
3a0e6     F4 83 17 82 
3a0ea     50 87 43 87 
3a0ee     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3a0f2     44 87 43 87 
3a0f6     44 87 43 87 
3a0fa     43 87 44 87 
3a0fe     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3a102     43 87 28 87 
3a106     20 85 CF 7A 
3a10a     70 7D AD 78 
3a10e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3a112     BB 78 BC 78 
3a116     BC 78 BC 78 
3a11a     BB 78 BB 78 
3a11e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3a122     BB 78 B2 78 
3a126     9A 7C CF 7A 
3a12a     4A 87 0D 87 
3a12e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3a132     43 87 44 87 
3a136     43 87 44 87 
3a13a     43 87 43 87 
3a13e     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3a142     44 87 43 87 
3a146     28 87 51 85 
3a14a     11 7A 1E 7D 
3a14e     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3a152     BC 78 BB 78 
3a156     BC 78 BC 78 
3a15a     BC 78 BC 78 
3a15e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a162     BB 78 BC 78 
3a166     BB 78 BC 78 
3a16a     BC 78 BC 78 
3a16e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a172     BB 78 BC 78 
3a176     BC 78 BC 78 
3a17a     BD 78 BB 78 
3a17e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3a182     BC 78 BB 78 
3a186     BC 78 BC 78 
3a18a     BC 78 BB 78 
3a18e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a192     BC 78 BC 78 
3a196     BC 78 BC 78 
3a19a     BB 78 BC 78 
3a19e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a1a2     BC 78 BD 78 
3a1a6     BC 78 BC 78 
3a1aa     BC 78 BB 78 
3a1ae     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a1b2     BC 78 BB 78 
3a1b6     BB 78 BC 78 
3a1ba     BC 78 BB 78 
3a1be     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a1c2     BB 78 BB 78 
3a1c6     BB 78 BC 78 
3a1ca     B6 78 48 7D 
3a1ce     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3a1d2     56 87 43 87 
3a1d6     42 87 44 87 
3a1da     44 87 43 87 
3a1de     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a1e2     43 87 44 87 
3a1e6     43 87 44 87 
3a1ea     4C 87 7E 83 
3a1ee     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3a1f2     F7 78 BC 78 
3a1f6     BC 78 BB 78 
3a1fa     BB 78 BC 78 
3a1fe     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a202     BC 78 BB 78 
3a206     BC 78 BC 78 
3a20a     BB 78 BC 78 
3a20e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3a212     BB 78 BC 78 
3a216     BC 78 BC 78 
3a21a     BC 78 BB 78 
3a21e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a222     BC 78 BC 78 
3a226     BC 78 BC 78 
3a22a     BC 78 BB 78 
3a22e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a232     BC 78 BB 78 
3a236     BB 78 BC 78 
3a23a     BC 78 BB 78 
3a23e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a242     BC 78 BC 78 
3a246     BB 78 BC 78 
3a24a     BC 78 BC 78 
3a24e     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3a252     73 32 00 04 
3a256     00 00 10 00 
3a25a     00 00 00 00 
3a25e     00 00 00 00 | atari12 file "atari12.s2"
3a262     00 6D 00 6D 
3a266     00 6D 00 6D 
3a26a     00 6D 00 6D 
3a26e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a272     00 6D 00 6D 
3a276     00 6D 00 6D 
3a27a     00 6D 00 6D 
3a27e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a282     00 6D 00 6D 
3a286     00 6D 00 6D 
3a28a     00 6D 00 6D 
3a28e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a292     00 6D 00 6D 
3a296     00 6D 00 6D 
3a29a     00 6D 00 6D 
3a29e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a2a2     00 6D 00 6D 
3a2a6     00 6D 00 6D 
3a2aa     00 6D 00 6D 
3a2ae     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3a2b2     00 6C 00 6C 
3a2b6     00 6C 00 6C 
3a2ba     00 6C 00 6C 
3a2be     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a2c2     00 6C 00 6C 
3a2c6     00 6C 00 6C 
3a2ca     00 6C 00 6C 
3a2ce     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a2d2     00 6C 00 6C 
3a2d6     00 6C 00 6C 
3a2da     00 6C 00 6C 
3a2de     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a2e2     00 6C 00 6C 
3a2e6     00 6C 00 6C 
3a2ea     00 6C 00 6C 
3a2ee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a2f2     00 6C 00 6C 
3a2f6     00 6C 00 6C 
3a2fa     00 6C 00 6C 
3a2fe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a302     00 6C 00 6C 
3a306     00 6C 00 6C 
3a30a     00 6C 00 6C 
3a30e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a312     00 6C 00 6C 
3a316     00 6C 00 6C 
3a31a     00 6C 00 6C 
3a31e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a322     00 6C 00 6C 
3a326     00 6C 00 6C 
3a32a     00 6C 00 6C 
3a32e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a332     00 6C 00 6C 
3a336     00 6C 00 6C 
3a33a     00 6C 00 6C 
3a33e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a342     00 6C 00 6C 
3a346     00 6C 00 6C 
3a34a     00 6C 00 6C 
3a34e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a352     00 6C 00 6C 
3a356     00 6C 00 6C 
3a35a     00 6C 00 6C 
3a35e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a362     00 6C 00 6B 
3a366     00 6B 00 6B 
3a36a     00 6B 00 6B 
3a36e     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a372     00 6B 00 6B 
3a376     00 6B 00 6B 
3a37a     00 6B 00 6B 
3a37e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a382     00 6B 00 6B 
3a386     00 6B 00 6B 
3a38a     00 6B 00 6B 
3a38e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a392     00 6B 00 6B 
3a396     00 6B 00 6B 
3a39a     00 6B 00 6B 
3a39e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3a2     00 6B 00 6B 
3a3a6     00 6B 00 6B 
3a3aa     00 6B 00 6B 
3a3ae     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3b2     00 6B 00 6B 
3a3b6     00 6B 00 6B 
3a3ba     00 6B 00 6B 
3a3be     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3c2     00 6B 00 6B 
3a3c6     00 6B 00 6B 
3a3ca     00 6B 00 6B 
3a3ce     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3d2     00 6B 00 6B 
3a3d6     00 6B 00 6B 
3a3da     00 6B 00 6B 
3a3de     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3e2     00 6B 00 6B 
3a3e6     00 6B 00 6B 
3a3ea     00 6B 00 6B 
3a3ee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3f2     00 6B 00 6B 
3a3f6     00 6B 00 6B 
3a3fa     00 6A 00 9D 
3a3fe     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3a402     00 9E 00 9E 
3a406     00 9E 00 9E 
3a40a     00 9E 00 9E 
3a40e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a412     00 9E 00 9E 
3a416     00 9E 00 9E 
3a41a     00 9E 00 9E 
3a41e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a422     00 9E 00 9E 
3a426     00 9E 00 9E 
3a42a     00 9E 00 9E 
3a42e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a432     00 9E 00 9E 
3a436     00 9E 00 9E 
3a43a     00 9E 00 9E 
3a43e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a442     00 9E 00 9E 
3a446     00 9E 00 9E 
3a44a     00 9E 00 9E 
3a44e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a452     00 9E 00 9E 
3a456     00 9E 00 9E 
3a45a     00 9E 00 9E 
3a45e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a462     00 9E 00 9E 
3a466     00 9E 00 9E 
3a46a     00 9E 00 9E 
3a46e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a472     00 9E 00 9E 
3a476     00 9E 00 9E 
3a47a     00 9E 00 9E 
3a47e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a482     00 9E 00 9E 
3a486     00 9E 00 9E 
3a48a     00 9E 00 9E 
3a48e     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3a492     00 9F 00 9F 
3a496     00 9F 00 9F 
3a49a     00 9F 00 9F 
3a49e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a4a2     00 9F 00 9F 
3a4a6     00 9F 00 9F 
3a4aa     00 9F 00 9F 
3a4ae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a4b2     00 9F 00 9F 
3a4b6     00 9F 00 9F 
3a4ba     00 9F 00 9F 
3a4be     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a4c2     00 9F 00 9F 
3a4c6     00 9F 00 9F 
3a4ca     00 9F 00 9F 
3a4ce     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a4d2     00 9F 00 9F 
3a4d6     00 9F 00 9F 
3a4da     00 9F 00 9F 
3a4de     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a4e2     00 9F 00 9F 
3a4e6     00 9F 00 9F 
3a4ea     00 9F 00 9F 
3a4ee     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a4f2     00 9F 00 9F 
3a4f6     00 9F 00 9F 
3a4fa     00 9F 00 9F 
3a4fe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a502     00 9F 00 9F 
3a506     00 9F 00 9F 
3a50a     00 9F 00 9F 
3a50e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a512     00 9F 00 9F 
3a516     00 9F 00 9F 
3a51a     00 9F 00 9F 
3a51e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a522     00 9F 00 9F 
3a526     00 9F 00 9F 
3a52a     00 9F 00 9F 
3a52e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a532     00 9F 00 9F 
3a536     00 9F 00 9F 
3a53a     00 9F 00 9F 
3a53e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a542     00 9F 00 9F 
3a546     00 9F 00 9F 
3a54a     00 9F 00 9F 
3a54e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a552     00 9F 00 9F 
3a556     00 9F 00 A0 
3a55a     00 A0 00 A0 
3a55e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a562     00 A0 00 A0 
3a566     00 A0 00 A0 
3a56a     00 A0 00 A0 
3a56e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a572     00 A0 00 A0 
3a576     00 A0 00 A0 
3a57a     00 A0 00 A0 
3a57e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a582     00 A0 00 A0 
3a586     00 A0 00 A0 
3a58a     00 A0 00 A0 
3a58e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a592     00 A0 00 A0 
3a596     00 A0 00 A0 
3a59a     00 A0 00 A0 
3a59e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5a2     00 A0 00 A0 
3a5a6     00 A0 00 A0 
3a5aa     00 A0 00 A0 
3a5ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5b2     00 A0 00 A0 
3a5b6     00 A0 00 A0 
3a5ba     00 A0 00 A0 
3a5be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5c2     00 A0 00 A0 
3a5c6     00 A0 00 A0 
3a5ca     00 A0 00 A0 
3a5ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5d2     00 A0 00 A0 
3a5d6     00 A0 00 A0 
3a5da     00 A0 00 A0 
3a5de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5e2     00 A0 00 A0 
3a5e6     00 A0 00 A0 
3a5ea     00 A0 00 A0 
3a5ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5f2     00 A0 00 A0 
3a5f6     00 A0 00 A0 
3a5fa     00 A0 00 A0 
3a5fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a602     00 A0 00 A0 
3a606     00 A0 00 A0 
3a60a     00 A0 00 A0 
3a60e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a612     00 A0 00 A0 
3a616     00 A0 00 A0 
3a61a     00 A0 00 A0 
3a61e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3a622     00 6D 00 6D 
3a626     00 6D 00 6D 
3a62a     00 6D 00 6D 
3a62e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a632     00 6D 00 6D 
3a636     00 6D 00 6D 
3a63a     00 6D 00 6D 
3a63e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a642     00 6D 00 6D 
3a646     00 6D 00 6D 
3a64a     00 6D 00 6D 
3a64e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a652     00 6D 00 6D 
3a656     00 6D 00 6D 
3a65a     00 6D 00 6D 
3a65e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a662     00 6D 00 6D 
3a666     00 6D 00 6D 
3a66a     00 6D 00 6D 
3a66e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a672     00 6D 00 6D 
3a676     00 6D 00 6D 
3a67a     00 6D 00 6D 
3a67e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a682     00 6D 00 6D 
3a686     00 6D 00 6D 
3a68a     00 6D 00 6D 
3a68e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a692     00 6D 00 6D 
3a696     00 6D 00 6D 
3a69a     00 6D 00 6D 
3a69e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6a2     00 6D 00 6D 
3a6a6     00 A0 00 A0 
3a6aa     00 A0 00 A0 
3a6ae     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6b2     00 A0 00 A0 
3a6b6     00 A0 00 A0 
3a6ba     00 A0 00 A0 
3a6be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6c2     00 A0 00 A0 
3a6c6     00 A0 00 A0 
3a6ca     00 A0 00 A0 
3a6ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6d2     00 A0 00 A0 
3a6d6     00 A0 00 A0 
3a6da     00 A0 00 A0 
3a6de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6e2     00 A0 00 A0 
3a6e6     00 A0 00 A0 
3a6ea     00 A0 00 A0 
3a6ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6f2     00 A0 00 A0 
3a6f6     00 A0 00 A0 
3a6fa     00 A0 00 A0 
3a6fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a702     00 A0 00 A0 
3a706     00 A0 00 A0 
3a70a     00 A0 00 A0 
3a70e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a712     00 A0 00 A0 
3a716     00 A0 00 A0 
3a71a     00 A0 00 A0 
3a71e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a722     00 A0 00 A0 
3a726     00 A0 00 A0 
3a72a     00 A0 00 A0 
3a72e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3a732     00 6D 00 6D 
3a736     00 6D 00 6D 
3a73a     00 6D 00 6D 
3a73e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a742     00 6D 00 6D 
3a746     00 6D 00 6D 
3a74a     00 6D 00 6D 
3a74e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a752     00 6D 00 6D 
3a756     00 6D 00 6D 
3a75a     00 6D 00 6D 
3a75e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a762     00 6D 00 6D 
3a766     00 6D 00 6D 
3a76a     00 6D 00 6D 
3a76e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a772     00 6D 00 6D 
3a776     00 6D 00 6D 
3a77a     00 6D 00 6D 
3a77e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a782     00 6D 00 6D 
3a786     00 6D 00 6D 
3a78a     00 6D 00 6D 
3a78e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a792     00 6D 00 6D 
3a796     00 6D 00 6D 
3a79a     00 6D 00 6D 
3a79e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a7a2     00 6D 00 6D 
3a7a6     00 6D 00 6D 
3a7aa     00 6D 00 6D 
3a7ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a7b2     00 6D 00 6D 
3a7b6     00 6C 00 A0 
3a7ba     00 9F 00 A0 
3a7be     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3a7c2     00 A0 00 A0 
3a7c6     00 A0 00 A0 
3a7ca     00 A0 00 A0 
3a7ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a7d2     00 A0 00 A0 
3a7d6     00 A0 00 A0 
3a7da     00 A0 00 A0 
3a7de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a7e2     00 A0 00 A0 
3a7e6     00 A0 00 A0 
3a7ea     00 A0 00 A0 
3a7ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a7f2     00 A0 00 A0 
3a7f6     00 A0 00 A0 
3a7fa     00 A0 00 A0 
3a7fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a802     00 A0 00 A0 
3a806     00 A0 00 A0 
3a80a     00 A0 00 A0 
3a80e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a812     00 A0 00 A0 
3a816     00 A0 00 A0 
3a81a     00 A0 00 A0 
3a81e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a822     00 A0 00 A0 
3a826     00 A0 00 A0 
3a82a     00 A0 00 A0 
3a82e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a832     00 A0 00 A0 
3a836     00 A0 00 A0 
3a83a     00 A0 00 A0 
3a83e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a842     00 A0 00 A0 
3a846     00 A0 00 A0 
3a84a     00 A0 00 A0 
3a84e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a852     00 A0 00 A0 
3a856     00 A0 00 A0 
3a85a     00 A0 00 A0 
3a85e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a862     00 A0 00 A0 
3a866     00 A0 00 A0 
3a86a     00 A0 00 A0 
3a86e     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3a872     00 A1 00 A1 
3a876     00 A1 00 A1 
3a87a     00 A1 00 A1 
3a87e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a882     00 A1 00 A1 
3a886     00 A1 00 A1 
3a88a     00 A1 00 A1 
3a88e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a892     00 A1 00 A1 
3a896     00 A1 00 A1 
3a89a     00 A1 00 A1 
3a89e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a8a2     00 A1 00 A1 
3a8a6     00 A1 00 A1 
3a8aa     00 A1 00 A1 
3a8ae     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a8b2     00 A1 00 A1 
3a8b6     00 A1 00 A1 
3a8ba     00 A1 00 A1 
3a8be     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a8c2     00 A1 00 A1 
3a8c6     00 A1 00 A1 
3a8ca     00 6E 00 6E 
3a8ce     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a8d2     00 6E 00 6E 
3a8d6     00 6E 00 6E 
3a8da     00 6E 00 6E 
3a8de     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a8e2     00 6E 00 6E 
3a8e6     00 6E 00 6E 
3a8ea     00 6E 00 6E 
3a8ee     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a8f2     00 6E 00 6E 
3a8f6     00 6E 00 6E 
3a8fa     00 6E 00 6E 
3a8fe     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a902     00 6E 00 6D 
3a906     00 6D 00 6D 
3a90a     00 6D 00 6D 
3a90e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a912     00 6D 00 6D 
3a916     00 6D 00 6D 
3a91a     00 6D 00 6D 
3a91e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a922     00 6D 00 6D 
3a926     00 6D 00 6D 
3a92a     00 6D 00 6D 
3a92e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a932     00 6D 00 6D 
3a936     00 6D 00 6D 
3a93a     00 6D 00 6D 
3a93e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a942     00 6D 00 6D 
3a946     00 6D 00 6D 
3a94a     00 6D 00 6D 
3a94e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a952     00 6D 00 6D 
3a956     00 6D 00 6D 
3a95a     00 6D 00 6D 
3a95e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a962     00 6D 00 6D 
3a966     00 6D 00 6D 
3a96a     00 6D 00 6D 
3a96e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a972     00 6D 00 6D 
3a976     00 6D 00 6D 
3a97a     00 6D 00 6D 
3a97e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a982     00 6D 00 6D 
3a986     00 6D 00 6D 
3a98a     00 6D 00 6D 
3a98e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a992     00 6D 00 6D 
3a996     00 6D 00 6D 
3a99a     00 6D 00 6D 
3a99e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a9a2     00 6D 00 6D 
3a9a6     00 6D 00 6D 
3a9aa     00 6D 00 6D 
3a9ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a9b2     00 6D 00 6D 
3a9b6     00 6C 00 6C 
3a9ba     00 6C 00 6C 
3a9be     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a9c2     00 6C 00 6C 
3a9c6     00 6C 00 6C 
3a9ca     00 6C 00 6C 
3a9ce     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a9d2     00 6C 00 6C 
3a9d6     00 6C 00 6C 
3a9da     00 9D 00 9F 
3a9de     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3a9e2     00 9F 00 9F 
3a9e6     00 9F 00 9F 
3a9ea     00 A0 00 A0 
3a9ee     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a9f2     00 A0 00 A0 
3a9f6     00 A0 00 A0 
3a9fa     00 A0 00 A0 
3a9fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa02     00 A0 00 A0 
3aa06     00 A0 00 A0 
3aa0a     00 A0 00 A0 
3aa0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa12     00 A0 00 A0 
3aa16     00 A0 00 A0 
3aa1a     00 A0 00 A0 
3aa1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa22     00 A0 00 A0 
3aa26     00 A0 00 A0 
3aa2a     00 A0 00 A0 
3aa2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa32     00 A0 00 A0 
3aa36     00 A0 00 A0 
3aa3a     00 A0 00 A0 
3aa3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa42     00 A0 00 A0 
3aa46     00 A0 00 A0 
3aa4a     00 A0 00 A0 
3aa4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa52     00 A0 00 A0 
3aa56     00 A0 00 A0 
3aa5a     00 A0 00 A0 
3aa5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa62     01 00 00 00 
3aa66     00 00 00 00 
3aa6a     00 00 00 00 
3aa6e     00 00 00 00 | mouse  file "mouse2.def"
3aa72     00 00 00 00 
3aa76     00 00 00 00 
3aa7a     00 00 00 00 
3aa7e     00 00 00 00 | 	byte	$00[16]
3aa82     01 01 00 00 
3aa86     00 00 00 00 
3aa8a     00 00 00 00 
3aa8e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aa92     00 00 00 00 
3aa96     00 00 00 00 
3aa9a     00 00 00 00 
3aa9e     00 00 00 00 | 	byte	$00[16]
3aaa2     01 0D 01 00 
3aaa6     00 00 00 00 
3aaaa     00 00 00 00 
3aaae     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aab2     00 00 00 00 
3aab6     00 00 00 00 
3aaba     00 00 00 00 
3aabe     00 00 00 00 | 	byte	$00[16]
3aac2     01 0D 0D 01 
3aac6     00 00 00 00 
3aaca     00 00 00 00 
3aace     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aad2     00 00 00 00 
3aad6     00 00 00 00 
3aada     00 00 00 00 
3aade     00 00 00 00 | 	byte	$00[16]
3aae2     01 0D 0D 0D 
3aae6     01 00 00 00 
3aaea     00 00 00 00 
3aaee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aaf2     00 00 00 00 
3aaf6     00 00 00 00 
3aafa     00 00 00 00 
3aafe     00 00 00 00 | 	byte	$00[16]
3ab02     01 0D 0D 0D 
3ab06     0D 01 00 00 
3ab0a     00 00 00 00 
3ab0e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab12     00 00 00 00 
3ab16     00 00 00 00 
3ab1a     00 00 00 00 
3ab1e     00 00 00 00 | 	byte	$00[16]
3ab22     01 0D 0D 0D 
3ab26     0D 0D 01 00 
3ab2a     00 00 00 00 
3ab2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab32     00 00 00 00 
3ab36     00 00 00 00 
3ab3a     00 00 00 00 
3ab3e     00 00 00 00 | 	byte	$00[16]
3ab42     01 0D 0D 0D 
3ab46     0D 0D 0D 01 
3ab4a     00 00 00 00 
3ab4e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3ab52     00 00 00 00 
3ab56     00 00 00 00 
3ab5a     00 00 00 00 
3ab5e     00 00 00 00 | 	byte	$00[16]
3ab62     01 0D 0D 0D 
3ab66     0D 0D 0D 0C 
3ab6a     01 00 00 00 
3ab6e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3ab72     00 00 00 00 
3ab76     00 00 00 00 
3ab7a     00 00 00 00 
3ab7e     00 00 00 00 | 	byte	$00[16]
3ab82     01 0D 0D 0D 
3ab86     0D 0D 0D 0D 
3ab8a     0C 01 00 00 
3ab8e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3ab92     00 00 00 00 
3ab96     00 00 00 00 
3ab9a     00 00 00 00 
3ab9e     00 00 00 00 | 	byte	$00[16]
3aba2     01 0D 0D 0D 
3aba6     0D 0D 0D 0D 
3abaa     0D 0C 01 00 
3abae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3abb2     00 00 00 00 
3abb6     00 00 00 00 
3abba     00 00 00 00 
3abbe     00 00 00 00 | 	byte	$00[16]
3abc2     01 0D 0D 0D 
3abc6     0D 0D 0D 0D 
3abca     0D 0D 0B 01 
3abce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3abd2     00 00 00 00 
3abd6     00 00 00 00 
3abda     00 00 00 00 
3abde     00 00 00 00 | 	byte	$00[16]
3abe2     01 0D 0D 0D 
3abe6     0C 0D 0D 03 
3abea     01 01 01 01 
3abee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3abf2     00 00 00 00 
3abf6     00 00 00 00 
3abfa     00 00 00 00 
3abfe     00 00 00 00 | 	byte	$00[16]
3ac02     01 0D 0D 0C 
3ac06     01 09 0D 03 
3ac0a     00 00 00 00 
3ac0e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3ac12     00 00 00 00 
3ac16     00 00 00 00 
3ac1a     00 00 00 00 
3ac1e     00 00 00 00 | 	byte	$00[16]
3ac22     01 0D 0C 01 
3ac26     00 01 0D 0B 
3ac2a     01 00 00 00 
3ac2e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3ac32     00 00 00 00 
3ac36     00 00 00 00 
3ac3a     00 00 00 00 
3ac3e     00 00 00 00 | 	byte	$00[16]
3ac42     01 0C 01 00 
3ac46     00 01 0A 0D 
3ac4a     01 00 00 00 
3ac4e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3ac52     00 00 00 00 
3ac56     00 00 00 00 
3ac5a     00 00 00 00 
3ac5e     00 00 00 00 | 	byte	$00[16]
3ac62     01 01 00 00 
3ac66     00 00 01 0D 
3ac6a     0B 01 00 00 
3ac6e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3ac72     00 00 00 00 
3ac76     00 00 00 00 
3ac7a     00 00 00 00 
3ac7e     00 00 00 00 
3ac82     00 00 00 00 
3ac86     00 00       | 	byte	$00[22]
3ac88     01 0B 0D 01 
3ac8c     00 00 00 00 
3ac90     00 00 00 00 
3ac94     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac98     00 00 00 00 
3ac9c     00 00 00 00 
3aca0     00 00 00 00 
3aca4     00 00 00 00 
3aca8     00          | 	byte	$00[17]
3aca9     01 01 00 00 
3acad     00 00 00 00 
3acb1     00 00 00 00 
3acb5     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3acb9     00 00 00 00 
      ...             
3ae5d     00 00 00 00 
3ae61     00          | 	byte	$00[425]
3ae62                 | 
3ae62     00 00       |              	org
3ae64 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3ae68 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3ae6c 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3ae70 003             | 
3ae70 003 00 30 04 F6 |                 mov     psramaddr,#0
3ae74 004             | 
3ae74 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3ae78 005 20 00 00 FF 
3ae7c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3ae80 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3ae84 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3ae88 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3ae8c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3ae90 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3ae94 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3ae98 00d             | 
3ae98 00d 20 00 00 FF 
3ae9c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3aea0 00f E0 03 00 FF 
3aea4 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3aea8 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3aeac 012             | 
3aeac 012             |                 
3aeac 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3aeb0 013             |     
3aeb0 013 01 2C 60 FD |                 cogid 	t11				' get id
3aeb4 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3aeb8 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3aebc 016             | 
3aebc 016 00 00 00 00 | t11 		long 	0
3aec0 017 00 FF 07 00 | mailbox 	long 	$7FF00
3aec4 018 00 00 00 00 | psramaddr 	long 	0
3aec8 019 00 00 00 00 | pslockval	long 	0
3aecc 01a 00 00 00 00 | cmd             long    0
3aed0 01b 00 00 00 00 | buf1            long    0
3aed4 01c 00 40 00 00 | buf2            long    16384
3aed8 01d DC AE 03 00 | 	long	@@@_dat_ + 12612
3aedc 01e 50 32 20 52 
3aee0 01f 65 74 72 6F 
3aee4 020 6D 61 63 68 
3aee8 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3aeec 022 42 41 53 49 
3aef0 023 43 20 76 65 
3aef4 024 72 73 69 6F 
3aef8 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3aefc 026 34 39 20 62 
3af00 027 65 74 61 20 
3af04 028 31 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $31, $00, $00, $00
3af08 029             | 	alignl
3af08 029             | _hg010b_spin2_dat_
3af08 029             | 
3af08 029 00 00 00 00 
3af0c 02a 00 00 00 00 
3af10 02b 00 00 00 00 
3af14 02c 00 00 00 00 
3af18 02d 00 00 00    | vga_font       file "vgafont.def"
3af1b 02d 7E 81 A5 81 
3af1f 02e 81 BD 99 81 
3af23 02f 81 7E 00 00 
3af27 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3af2b 031 7E FF DB FF 
3af2f 032 FF C3 E7 FF 
3af33 033 FF 7E 00 00 
3af37 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3af3b 035 00 36 7F 7F 
3af3f 036 7F 7F 3E 1C 
3af43 037 08 00 00 00 
3af47 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3af4b 039 00 08 1C 3E 
3af4f 03a 7F 3E 1C 08 
3af53 03b 00 00 00 00 
3af57 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3af5b 03d 18 3C 3C E7 
3af5f 03e E7 E7 18 18 
3af63 03f 3C 00 00 00 
3af67 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3af6b 041 18 3C 7E FF 
3af6f 042 FF 7E 18 18 
3af73 043 3C 00 00 00 
3af77 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3af7b 045 00 00 00 18 
3af7f 046 3C 3C 18 00 
3af83 047 00 00 00 00 
3af87 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3af8b 049 FF FF FF E7 
3af8f 04a C3 C3 E7 FF 
3af93 04b FF FF FF FF 
3af97 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3af9b 04d 00 00 3C 66 
3af9f 04e 42 42 66 3C 
3afa3 04f 00 00 00 00 
3afa7 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3afab 051 FF FF C3 99 
3afaf 052 BD BD 99 C3 
3afb3 053 FF FF FF FF 
3afb7 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3afbb 055 78 70 58 4C 
3afbf 056 1E 33 33 33 
3afc3 057 33 1E 00 00 
3afc7 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3afcb 059 3C 66 66 66 
3afcf 05a 66 3C 18 7E 
3afd3 05b 18 18 00 00 
3afd7 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3afdb 05d FC CC FC 0C 
3afdf 05e 0C 0C 0C 0E 
3afe3 05f 0F 07 00 00 
3afe7 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3afeb 061 FE C6 FE C6 
3afef 062 C6 C6 C6 E6 
3aff3 063 E7 67 03 00 
3aff7 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3affb 065 18 18 DB 3C 
3afff 066 E7 3C DB 18 
3b003 067 18 00 00 00 
3b007 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3b00b 069 03 07 0F 1F 
3b00f 06a 7F 1F 0F 07 
3b013 06b 03 01 00 00 
3b017 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3b01b 06d 60 70 78 7C 
3b01f 06e 7F 7C 78 70 
3b023 06f 60 40 00 00 
3b027 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3b02b 071 18 3C 7E 18 
3b02f 072 18 18 7E 3C 
3b033 073 18 00 00 00 
3b037 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3b03b 075 66 66 66 66 
3b03f 076 66 66 66    | 	byte	$66[7]
3b042 077 00 66 66 00 
3b046 078 00 00 00 00 
3b04a 079 00 FE DB DB 
3b04e 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3b052 07b D8 D8 D8 00 
3b056 07c 00 00 00 3E 
3b05a 07d 63 06 1C 36 
3b05e 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3b062 07f 30 63 3E 00 
3b066 080 00 00 00 00 
3b06a 081 00 00 00 00 
3b06e 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3b072 083 7F 7F 7F 00 
3b076 084 00 00 00 00 
3b07a 085 00 18 3C 7E 
3b07e 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3b082 087 3C 18 7E 00 
3b086 088 00 00 00 00 
3b08a 089 00 18 3C 7E 
3b08e 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3b092 08b 18 18 18 00 
3b096 08c 00 00 00 00 
3b09a 08d 00 18 18 18 
3b09e 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b0a2 08f 7E 3C 18 00 
3b0a6 090 00 00 00 00 
3b0aa 091 00 00 00 18 
3b0ae 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3b0b2 093 00 00 00 00 
3b0b6 094 00 00 00 00 
3b0ba 095 00 00 00    | 	byte	$00[11]
3b0bd 096 0C 06 7F 06 
3b0c1 097 0C 00 00 00 
3b0c5 098 00 00 00 00 
3b0c9 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b0cd 09a 00 03 03 03 
3b0d1 09b 7F 00 00 00 
3b0d5 09c 00 00 00 00 
3b0d9 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b0dd 09e 14 36 7F 36 
3b0e1 09f 14 00 00 00 
3b0e5 0a0 00 00 00 00 
3b0e9 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3b0ed 0a2 1C 1C 3E 3E 
3b0f1 0a3 7F 7F 00 00 
3b0f5 0a4 00 00 00 00 
3b0f9 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3b0fd 0a6 7F 3E 3E 1C 
3b101 0a7 1C 08 00 00 
3b105 0a8 00 00 00 00 
3b109 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b10d 0aa 00 00 00 00 
3b111 0ab 00 00 00 00 
3b115 0ac 00 00 00 00 
3b119 0ad 00 00       | 	byte	$00[14]
3b11b 0ad 18 3C 3C 3C 
3b11f 0ae 18 18 18 00 
3b123 0af 18 18 00 00 
3b127 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3b12b 0b1 66 24 00 00 
3b12f 0b2 00 00 00 00 
3b133 0b3 00 00 00 00 
3b137 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b13b 0b5 00 36 36 7F 
3b13f 0b6 36 36 36 7F 
3b143 0b7 36 36 00 00 
3b147 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3b14b 0b9 3E 63 43 03 
3b14f 0ba 3E 60 60 61 
3b153 0bb 63 3E 18 18 
3b157 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3b15b 0bd 00 00 43 63 
3b15f 0be 30 18 0C 06 
3b163 0bf 63 61 00 00 
3b167 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3b16b 0c1 1C 36 36 1C 
3b16f 0c2 6E 3B 33 33 
3b173 0c3 33 6E 00 00 
3b177 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3b17b 0c5 0C 0C 0C 06 
3b17f 0c6 00 00 00 00 
3b183 0c7 00 00 00 00 
3b187 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b18b 0c9 30 18 0C 0C 
3b18f 0ca 0C 0C 0C 0C 
3b193 0cb 18 30 00 00 
3b197 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3b19b 0cd 0C 18 30 30 
3b19f 0ce 30 30 30 30 
3b1a3 0cf 18 0C 00 00 
3b1a7 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3b1ab 0d1 00 00 00 66 
3b1af 0d2 3C FF 3C 66 
3b1b3 0d3 00 00 00 00 
3b1b7 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3b1bb 0d5 00 00 00 18 
3b1bf 0d6 18 7E 18 18 
3b1c3 0d7 00 00 00 00 
3b1c7 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3b1cb 0d9 00 00 00 00 
3b1cf 0da 00 00 00 00 | 	byte	$00[8]
3b1d3 0db 18 18 18 0C 
3b1d7 0dc 00 00 00 00 
3b1db 0dd 00 00 00 00 
3b1df 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3b1e3 0df 00 00 00 00 
3b1e7 0e0 00 00 00 00 
3b1eb 0e1 00 00 00 00 
3b1ef 0e2 00 00 00 00 | 	byte	$00[16]
3b1f3 0e3 18 18 00 00 
3b1f7 0e4 00 00 00 00 
3b1fb 0e5 00 00 40 60 
3b1ff 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3b203 0e7 03 01 00 00 
3b207 0e8 00 00 00 00 
3b20b 0e9 1C 36 63 63 
3b20f 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3b213 0eb 36 1C 00 00 
3b217 0ec 00 00 00 00 
3b21b 0ed 18 1C 1E 18 
3b21f 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3b223 0ef 18 7E 00 00 
3b227 0f0 00 00 00 00 
3b22b 0f1 3E 63 60 30 
3b22f 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3b233 0f3 63 7F 00 00 
3b237 0f4 00 00 00 00 
3b23b 0f5 3E 63 60 60 
3b23f 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3b243 0f7 63 3E 00 00 
3b247 0f8 00 00 00 00 
3b24b 0f9 30 38 3C 36 
3b24f 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3b253 0fb 30 78 00 00 
3b257 0fc 00 00 00 00 
3b25b 0fd 7F 03 03 03 
3b25f 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3b263 0ff 63 3E 00 00 
3b267 100 00 00 00 00 
3b26b 101 1C 06 03 03 
3b26f 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3b273 103 63 3E 00 00 
3b277 104 00 00 00 00 
3b27b 105 7F 63 60 60 
3b27f 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3b283 107 0C 0C 00 00 
3b287 108 00 00 00 00 
3b28b 109 3E 63 63 63 
3b28f 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3b293 10b 63 3E 00 00 
3b297 10c 00 00 00 00 
3b29b 10d 3E 63 63 63 
3b29f 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3b2a3 10f 30 1E 00 00 
3b2a7 110 00 00 00 00 
3b2ab 111 00 00 00 18 
3b2af 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b2b3 113 18 18 00 00 
3b2b7 114 00 00 00 00 
3b2bb 115 00 00 00 18 
3b2bf 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b2c3 117 18 18 0C 00 
3b2c7 118 00 00 00 00 
3b2cb 119 00 60 30 18 
3b2cf 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3b2d3 11b 30 60 00 00 
3b2d7 11c 00 00 00 00 
3b2db 11d 00 00 00 7E 
3b2df 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3b2e3 11f 00 00 00 00 
3b2e7 120 00 00 00 00 
3b2eb 121 00          | 	byte	$00[9]
3b2ec 122 06 0C 18 30 
3b2f0 123 60 30 18 0C 
3b2f4 124 06 00 00 00 
3b2f8 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3b2fc 126 63 63 30 18 
3b300 127 18 18 00 18 
3b304 128 18 00 00 00 
3b308 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b30c 12a 3E 63 63 7B 
3b310 12b 7B 7B 3B 03 
3b314 12c 3E 00 00 00 
3b318 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3b31c 12e 1C 36 63 63 
3b320 12f 7F 63 63 63 
3b324 130 63 00 00 00 
3b328 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3b32c 132 66 66 66 3E 
3b330 133 66 66 66 66 
3b334 134 3F 00 00 00 
3b338 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3b33c 136 66 43 03 03 
3b340 137 03 03 43 66 
3b344 138 3C 00 00 00 
3b348 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3b34c 13a 36 66 66 66 
3b350 13b 66 66 66 36 
3b354 13c 1F 00 00 00 
3b358 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3b35c 13e 66 46 16 1E 
3b360 13f 16 06 46 66 
3b364 140 7F 00 00 00 
3b368 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3b36c 142 66 46 16 1E 
3b370 143 16 06 06 06 
3b374 144 0F 00 00 00 
3b378 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3b37c 146 66 43 03 03 
3b380 147 7B 63 63 66 
3b384 148 5C 00 00 00 
3b388 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3b38c 14a 63 63 63 7F 
3b390 14b 63 63 63 63 
3b394 14c 63 00 00 00 
3b398 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3b39c 14e 18 18 18 18 
3b3a0 14f 18 18 18 18 | 	byte	$18[8]
3b3a4 150 3C 00 00 00 
3b3a8 151 00 00 00 78 
3b3ac 152 30 30 30 30 
3b3b0 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3b3b4 154 1E 00 00 00 
3b3b8 155 00 00 00 67 
3b3bc 156 66 66 36 1E 
3b3c0 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3b3c4 158 67 00 00 00 
3b3c8 159 00 00 00 0F 
3b3cc 15a 06 06 06 06 
3b3d0 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b3d4 15c 7F 00 00 00 
3b3d8 15d 00 00 00 63 
3b3dc 15e 77 7F 7F 6B 
3b3e0 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3b3e4 160 63 00 00 00 
3b3e8 161 00 00 00 63 
3b3ec 162 67 6F 7F 7B 
3b3f0 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3b3f4 164 63 00 00 00 
3b3f8 165 00 00 00 3E 
3b3fc 166 63 63 63 63 
3b400 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b404 168 3E 00 00 00 
3b408 169 00 00 00 3F 
3b40c 16a 66 66 66 3E 
3b410 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3b414 16c 0F 00 00 00 
3b418 16d 00 00 00 3E 
3b41c 16e 63 63 63 63 
3b420 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3b424 170 3E 30 70 00 
3b428 171 00 00 00 3F 
3b42c 172 66 66 66 3E 
3b430 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3b434 174 67 00 00 00 
3b438 175 00 00 00 3E 
3b43c 176 63 63 06 1C 
3b440 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b444 178 3E 00 00 00 
3b448 179 00 00 00 7E 
3b44c 17a 7E 5A 18 18 
3b450 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b454 17c 3C 00 00 00 
3b458 17d 00 00 00 63 
3b45c 17e 63 63 63 63 
3b460 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b464 180 3E 00 00 00 
3b468 181 00 00 00 63 
3b46c 182 63 63 63 63 
3b470 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3b474 184 08 00 00 00 
3b478 185 00 00 00 63 
3b47c 186 63 63 63 6B 
3b480 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3b484 188 36 00 00 00 
3b488 189 00 00 00 63 
3b48c 18a 63 36 3E 1C 
3b490 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3b494 18c 63 00 00 00 
3b498 18d 00 00 00 66 
3b49c 18e 66 66 66 3C 
3b4a0 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3b4a4 190 3C 00 00 00 
3b4a8 191 00 00 00 7F 
3b4ac 192 63 61 30 18 
3b4b0 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b4b4 194 7F 00 00 00 
3b4b8 195 00 00 00 3C 
3b4bc 196 0C 0C 0C 0C 
3b4c0 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3b4c4 198 3C 00 00 00 
3b4c8 199 00 00 00 00 
3b4cc 19a 01 03 07 0E 
3b4d0 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3b4d4 19c 40 00 00 00 
3b4d8 19d 00 00 00 3C 
3b4dc 19e 30 30 30 30 
3b4e0 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3b4e4 1a0 3C 00 00 00 
3b4e8 1a1 1C 36 00 00 
3b4ec 1a2 00 00 00 00 
3b4f0 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b4f4 1a4 00 00 00 00 
3b4f8 1a5 00 00 00 00 
3b4fc 1a6 00 00 00 00 
3b500 1a7 00 00 00 00 
3b504 1a8 00          | 	byte	$00[17]
3b505 1a8 FF 00 00 0C 
3b509 1a9 18 00 00 00 
3b50d 1aa 00 00 00 00 
3b511 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b515 1ac 00 00 00 00 
3b519 1ad 00 00 00 00 
3b51d 1ae 00          | 	byte	$00[9]
3b51e 1ae 1E 30 3E 33 
3b522 1af 33 33 6E 00 
3b526 1b0 00 00 00 00 
3b52a 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3b52e 1b2 1E 36 66 66 
3b532 1b3 66 66 3E 00 
3b536 1b4 00 00 00 00 
3b53a 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b53e 1b6 3E 63 03 03 
3b542 1b7 03 63 3E 00 
3b546 1b8 00 00 00 00 
3b54a 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3b54e 1ba 3C 36 33 33 
3b552 1bb 33 33 6E 00 
3b556 1bc 00 00 00 00 
3b55a 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b55e 1be 3E 63 7F 03 
3b562 1bf 03 63 3E 00 
3b566 1c0 00 00 00 00 
3b56a 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3b56e 1c2 0C 1E 0C 0C 
3b572 1c3 0C 0C 1E 00 
3b576 1c4 00 00 00 00 
3b57a 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b57e 1c6 6E 33 33 33 
3b582 1c7 33 33 3E 30 
3b586 1c8 33 1E 00 00 
3b58a 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3b58e 1ca 36 6E 66 66 
3b592 1cb 66 66 67 00 
3b596 1cc 00 00 00 00 
3b59a 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3b59e 1ce 1C 18 18 18 
3b5a2 1cf 18 18 3C 00 
3b5a6 1d0 00 00 00 00 
3b5aa 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3b5ae 1d2 70 60 60 60 
3b5b2 1d3 60 60 60 66 
3b5b6 1d4 66 3C 00 00 
3b5ba 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3b5be 1d6 66 36 1E 1E 
3b5c2 1d7 36 66 67 00 
3b5c6 1d8 00 00 00 00 
3b5ca 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3b5ce 1da 18 18 18 18 
3b5d2 1db 18 18       | 	byte	$18[6]
3b5d4 1dc 3C 00 00 00 
3b5d8 1dd 00 00 00 00 
3b5dc 1de 00 00 37 7F 
3b5e0 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3b5e4 1e0 63 00 00 00 
3b5e8 1e1 00 00 00 00 
3b5ec 1e2 00 00 3B 66 
3b5f0 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3b5f4 1e4 66 00 00 00 
3b5f8 1e5 00 00 00 00 
3b5fc 1e6 00 00 3E 63 
3b600 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3b604 1e8 3E 00 00 00 
3b608 1e9 00 00 00 00 
3b60c 1ea 00 00 3B 66 
3b610 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3b614 1ec 3E 06 06 0F 
3b618 1ed 00 00 00 00 
3b61c 1ee 00 00 6E 33 
3b620 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3b624 1f0 3E 30 30 78 
3b628 1f1 00 00 00 00 
3b62c 1f2 00 00 3B 6E 
3b630 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3b634 1f4 0F 00 00 00 
3b638 1f5 00 00 00 00 
3b63c 1f6 00 00 3E 63 
3b640 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3b644 1f8 3E 00 00 00 
3b648 1f9 00 00 00 08 
3b64c 1fa 0C 0C 3F 0C 
3b650 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b654 1fc 38 00 00 00 
3b658 1fd 00 00 00 00 
3b65c 1fe 00 00 33 33 
3b660 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3b664 200 6E 00 00 00 
3b668 201 00 00 00 00 
3b66c 202 00 00 63 63 
3b670 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3b674 204 1C 00 00 00 
3b678 205 00 00 00 00 
3b67c 206 00 00 63 63 
3b680 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3b684 208 36 00 00 00 
3b688 209 00 00 00 00 
3b68c 20a 00 00 63 36 
3b690 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3b694 20c 63 00 00 00 
3b698 20d 00 00 00 00 
3b69c 20e 00 00 63 63 
3b6a0 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3b6a4 210 7E 60 30 1F 
3b6a8 211 00 00 00 00 
3b6ac 212 00 00 7F 33 
3b6b0 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3b6b4 214 7F 00 00 00 
3b6b8 215 00 00 00 70 
3b6bc 216 18 18 18 0E 
3b6c0 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3b6c4 218 70 00 00 00 
3b6c8 219 00 00 00 18 
3b6cc 21a 18 18 18 18 
3b6d0 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b6d4 21c 18 00 00 00 
3b6d8 21d 00 00 00 0E 
3b6dc 21e 18 18 18 70 
3b6e0 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3b6e4 220 0E 00 00 00 
3b6e8 221 6E 3B 00 00 
3b6ec 222 00 00 00 00 
3b6f0 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6f4 224 00 00 00 00 
3b6f8 225 00 00 00 00 
3b6fc 226 00 00       | 	byte	$00[10]
3b6fe 226 08 1C 36 63 
3b702 227 63 63 7F 00 
3b706 228 00 00 00 00 
3b70a 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3b70e 22a 03 03 03 03 
3b712 22b 43 66 3C 18 
3b716 22c 30 1E 00 00 
3b71a 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3b71e 22e 33 33 33 33 
3b722 22f 33 33       | 	byte	$33[6]
3b724 230 6E 00 00 00 
3b728 231 00 00 60 30 
3b72c 232 18 00 3E 63 
3b730 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3b734 234 3E 00 00 00 
3b738 235 00 00 08 1C 
3b73c 236 36 00 1E 30 
3b740 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3b744 238 6E 00 00 00 
3b748 239 00 00 00 00 
3b74c 23a 33 00 1E 30 
3b750 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3b754 23c 6E 00 00 00 
3b758 23d 00 00 1C 36 
3b75c 23e 1C 00 33 33 
3b760 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3b764 240 6E 00 00 00 
3b768 241 00 00 60 30 
3b76c 242 18 00 3E 63 
3b770 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3b774 244 3E 00 00 00 
3b778 245 00 00 00 00 
3b77c 246 00 00 3E 63 
3b780 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3b784 248 3E 18 30 1E 
3b788 249 00 00 00 1C 
3b78c 24a 58 78 38 18 
3b790 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3b794 24c 3C 00 00 00 
3b798 24d 00 00 00 00 
3b79c 24e 63 00 3E 63 
3b7a0 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3b7a4 250 3E 00 00 00 
3b7a8 251 66 33 00 3E 
3b7ac 252 63 63 63 63 
3b7b0 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b7b4 254 3E 00 00 00 
3b7b8 255 00 00 CC 66 
3b7bc 256 33 00 3E 63 
3b7c0 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3b7c4 258 3E 00 00 00 
3b7c8 259 00 00 18 3C 
3b7cc 25a 66 00 1C 18 
3b7d0 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3b7d4 25c 3C 00 00 00 
3b7d8 25d 30 18 00 7F 
3b7dc 25e 63 61 30 18 
3b7e0 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b7e4 260 7F 00 00 00 
3b7e8 261 00 63 00 08 
3b7ec 262 1C 36 63 63 
3b7f0 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3b7f4 264 63 00 00 00 
3b7f8 265 30 18 00 3C 
3b7fc 266 66 43 03 03 
3b800 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3b804 268 3C 00 00 00 
3b808 269 30 18 00 7F 
3b80c 26a 66 46 16 1E 
3b810 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3b814 26c 7F 00 00 00 
3b818 26d 0C 06 00 0F 
3b81c 26e 06 06 06 06 
3b820 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b824 270 7F 00 00 00 
3b828 271 30 18 00 1C 
3b82c 272 18 18 18 18 
3b830 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3b834 274 3C 00 00 00 
3b838 275 00 00 08 1C 
3b83c 276 36 00 3E 63 
3b840 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3b844 278 3E 00 00 00 
3b848 279 00 00 00 00 
3b84c 27a 63 00 3E 63 
3b850 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3b854 27c 3E 00 00 00 
3b858 27d 00 00 00 6F 
3b85c 27e 46 26 06 06 
3b860 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3b864 280 7F 00 00 00 
3b868 281 00 00 00 6E 
3b86c 282 4C 2C 0C 0C 
3b870 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3b874 284 1E 00 00 00 
3b878 285 30 18 00 3E 
3b87c 286 63 63 06 1C 
3b880 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b884 288 3E 00 00 00 
3b888 289 00 00 60 30 
3b88c 28a 18 00 3E 63 
3b890 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3b894 28c 3E 00 00 00 
3b898 28d 00 63 00 3E 
3b89c 28e 63 63 63 63 
3b8a0 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b8a4 290 3E 00 00 00 
3b8a8 291 00 63 00 63 
3b8ac 292 63 63 63 63 
3b8b0 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b8b4 294 3E 00 00 00 
3b8b8 295 6C 38 00 7E 
3b8bc 296 7E 5A 18 18 
3b8c0 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b8c4 298 3C 00 00 00 
3b8c8 299 00 00 60 48 
3b8cc 29a 2C 0C 3F 0C 
3b8d0 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b8d4 29c 38 00 00 00 
3b8d8 29d 00 00 00 0F 
3b8dc 29e 26 36 1E 0E 
3b8e0 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3b8e4 2a0 7F 00 00 00 
3b8e8 2a1 00 00 00 00 
3b8ec 2a2 00 63 36 1C 
3b8f0 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3b8f4 2a4 00 00 00 00 
3b8f8 2a5 00 00       | 	byte	$00[6]
3b8fa 2a5 36 1C 08 00 
3b8fe 2a6 3E 63 03 03 
3b902 2a7 03 63 3E 00 
3b906 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3b90a 2a9 30 18 0C 00 
3b90e 2aa 1E 30 3E 33 
3b912 2ab 33 33 6E 00 
3b916 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b91a 2ad 60 30 18 00 
3b91e 2ae 1C 18 18 18 
3b922 2af 18 18 3C 00 
3b926 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3b92a 2b1 60 30 18 00 
3b92e 2b2 3E 63 63 63 
3b932 2b3 63 63 3E 00 
3b936 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3b93a 2b5 30 18 0C 00 
3b93e 2b6 33 33 33 33 
3b942 2b7 33 33 6E 00 
3b946 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b94a 2b9 00 08 1C 36 
3b94e 2ba 63 63 7F 63 
3b952 2bb 63 63 63 18 
3b956 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3b95a 2bd 00 00 00 00 
3b95e 2be 1E 30 3E 33 
3b962 2bf 33 33 6E 18 
3b966 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3b96a 2c1 00 7F 63 61 
3b96e 2c2 30 18 0C 06 
3b972 2c3 43 63 7F 00 
3b976 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3b97a 2c5 36 1C 08 00 
3b97e 2c6 7F 33 18 0C 
3b982 2c7 06 63 7F 00 
3b986 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3b98a 2c9 00 7F 66 46 
3b98e 2ca 16 1E 16 06 
3b992 2cb 46 66 7F 18 
3b996 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3b99a 2cd 00 00 00 00 
3b99e 2ce 3E 63 7F 03 
3b9a2 2cf 03 63 3E 18 
3b9a6 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3b9aa 2d1 00 3C 66 03 
3b9ae 2d2 1F 03 0F 03 
3b9b2 2d3 03 66 3C 00 
3b9b6 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3b9ba 2d5 60 30 18 00 
3b9be 2d6 7F 33 18 0C 
3b9c2 2d7 06 63 7F 00 
3b9c6 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3b9ca 2d9 00 3C 66 43 
3b9ce 2da 03 03 03 03 
3b9d2 2db 43 66 3C 00 
3b9d6 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3b9da 2dd 00 00 00 00 
3b9de 2de 3E 63 06 1C 
3b9e2 2df 30 63 3E 18 
3b9e6 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3b9ea 2e1 00 00 00 00 
3b9ee 2e2 00 00       | 	byte	$00[6]
3b9f0 2e3 6C 36 1B 36 
3b9f4 2e4 6C 00 00 00 
3b9f8 2e5 00 00 00 00 
3b9fc 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ba00 2e7 1B 36 6C 36 
3ba04 2e8 1B 00 00 00 
3ba08 2e9 88 22 88 22 
3ba0c 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3ba10 2eb 88 22 88 22 
3ba14 2ec 88 22 88 22 
3ba18 2ed AA 55 AA 55 
3ba1c 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3ba20 2ef AA 55 AA 55 
3ba24 2f0 AA 55 AA 55 
3ba28 2f1 BB EE BB EE 
3ba2c 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3ba30 2f3 BB EE BB EE 
3ba34 2f4 BB EE BB EE 
3ba38 2f5 18 18 18 18 
3ba3c 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3ba40 2f7 18 18 18 18 
3ba44 2f8 18 18 18 18 
3ba48 2f9 18 18 18 18 
3ba4c 2fa 18 18 18    | 	byte	$18[15]
3ba4f 2fa 1F 18 18 18 
3ba53 2fb 18 18 18 18 
3ba57 2fc 18 30 18 00 
3ba5b 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3ba5f 2fe 63 7F 63 63 
3ba63 2ff 63 63 00 00 
3ba67 300 00 1C 36 00 
3ba6b 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3ba6f 302 63 7F 63 63 
3ba73 303 63 63 00 00 
3ba77 304 00 36 1C 00 
3ba7b 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3ba7f 306 1E 16 06 46 
3ba83 307 66 7F 00 00 
3ba87 308 00 00 00 00 
3ba8b 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3ba8f 30a 1C 30 60 63 
3ba93 30b 63 3E 18 30 
3ba97 30c 1E 6C 6C 6C 
3ba9b 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3ba9f 30e 6F 6C 6C 6C 
3baa3 30f 6C 6C 6C 6C 
3baa7 310 6C 6C 6C 6C 
3baab 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3baaf 312 6C 6C 6C 6C 
3bab3 313 6C 6C 6C 6C 
3bab7 314 6C          | 	byte	$6c[9]
3bab8 315 00 00 00 00 
3babc 316 00          | 	byte	$00[5]
3babd 316 7F 60 6F 6C 
3bac1 317 6C 6C 6C 6C 
3bac5 318 6C 6C 6C 6C 
3bac9 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3bacd 31a 6F 60 7F 00 
3bad1 31b 00 00 00 00 
3bad5 31c 00 00 00 18 
3bad9 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3badd 31e 61 30 18 0C 
3bae1 31f 06 43 63 7F 
3bae5 320 00 00 00 00 
3bae9 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3baed 322 00 7F 33 18 
3baf1 323 0C 06 63 7F 
3baf5 324 00 00 00 00 
3baf9 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3bafd 326 00 00 1F 18 
3bb01 327 18 18 18 18 
3bb05 328 18 18 18 18 
3bb09 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bb0d 32a 18 18 F8 00 
3bb11 32b 00 00 00 00 
3bb15 32c 00 00 00 18 
3bb19 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3bb1d 32e 18 18 FF 00 
3bb21 32f 00 00 00 00 
3bb25 330 00 00 00 00 
3bb29 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bb2d 332 00 00 FF 18 
3bb31 333 18 18 18 18 
3bb35 334 18 18 18 18 
3bb39 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bb3d 336 18 18 F8 18 
3bb41 337 18 18 18 18 
3bb45 338 18 18 18 00 
3bb49 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3bb4d 33a 00 00 FF 00 
3bb51 33b 00 00 00 00 
3bb55 33c 00 00 00 18 
3bb59 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3bb5d 33e 18 18 FF 18 
3bb61 33f 18 18 18 18 
3bb65 340 18 18 18 63 
3bb69 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3bb6d 342 36 63 63 7F 
3bb71 343 63 63 63 63 
3bb75 344 00 00 00 00 
3bb79 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3bb7d 346 00 1E 30 3E 
3bb81 347 33 33 33 6E 
3bb85 348 00 00 00 6C 
3bb89 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3bb8d 34a EC 0C FC 00 
3bb91 34b 00 00 00 00 
3bb95 34c 00 00 00 00 
3bb99 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bb9d 34e FC 0C EC 6C 
3bba1 34f 6C 6C 6C 6C 
3bba5 350 6C 6C 6C 6C 
3bba9 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3bbad 352 EF 00 FF 00 
3bbb1 353 00 00 00 00 
3bbb5 354 00 00 00 00 
3bbb9 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bbbd 356 FF 00 EF 6C 
3bbc1 357 6C 6C 6C 6C 
3bbc5 358 6C 6C 6C 6C 
3bbc9 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3bbcd 35a EC 0C EC 6C 
3bbd1 35b 6C 6C 6C 6C 
3bbd5 35c 6C 6C 6C 00 
3bbd9 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3bbdd 35e FF 00 FF 00 
3bbe1 35f 00 00 00 00 
3bbe5 360 00 00 00 6C 
3bbe9 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3bbed 362 EF 00 EF 6C 
3bbf1 363 6C 6C 6C 6C 
3bbf5 364 6C 6C 6C 00 
3bbf9 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3bbfd 366 63 3E 63 63 
3bc01 367 63 63 3E 63 
3bc05 368 00 00 00 00 
3bc09 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3bc0d 36a 30 3C 36 33 
3bc11 36b 33 33 33 6E 
3bc15 36c 00 00 00 00 
3bc19 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3bc1d 36e 66 66 6F 66 
3bc21 36f 66 66 36 1F 
3bc25 370 00 00 00 36 
3bc29 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3bc2d 372 66 66 66 66 
3bc31 373 66 66       | 	byte	$66[6]
3bc33 373 36 1F 00 00 
3bc37 374 00 00 63 00 
3bc3b 375 7F 66 46 16 
3bc3f 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3bc43 377 66 7F 00 00 
3bc47 378 00 6C 38 00 
3bc4b 379 38 30 30 3C 
3bc4f 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3bc53 37b 33 6E 00 00 
3bc57 37c 00 36 1C 00 
3bc5b 37d 63 67 6F 7F 
3bc5f 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3bc63 37f 63 63 00 00 
3bc67 380 00 30 18 00 
3bc6b 381 3C 18 18 18 
3bc6f 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3bc73 383 18 3C 00 00 
3bc77 384 00 3C 66 00 
3bc7b 385 3C 18 18 18 
3bc7f 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3bc83 387 18 3C 00 00 
3bc87 388 00 00 00 36 
3bc8b 389 1C 08 00 3E 
3bc8f 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3bc93 38b 63 3E 00 00 
3bc97 38c 00 18 18 18 
3bc9b 38d 18 18 18 18 
3bc9f 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3bca3 38f 00 00 00 00 
3bca7 390 00 00 00 00 
3bcab 391 00 00 00 00 | 	byte	$00[12]
3bcaf 392 F8 18 18 18 
3bcb3 393 18 18 18 18 
3bcb7 394 18 FF FF FF 
3bcbb 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3bcbf 396 FF FF FF FF 
3bcc3 397 FF FF FF FF 
3bcc7 398 FF          | 	byte	$ff[9]
3bcc8 399 00 00 00 00 
3bccc 39a 00 00 00    | 	byte	$00[7]
3bccf 39a FF FF FF FF 
3bcd3 39b FF FF FF FF 
3bcd7 39c FF          | 	byte	$ff[9]
3bcd8 39d 00 00 00 7E 
3bcdc 39e 7E 5A 18 18 
3bce0 39f 18 18 18 18 
3bce4 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3bce8 3a1 1C 36 1C 63 
3bcec 3a2 63 63 63 63 
3bcf0 3a3 63 63 63 63 
3bcf4 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bcf8 3a5 FF FF FF FF 
3bcfc 3a6 FF FF FF    | 	byte	$ff[7]
3bcff 3a6 00 00 00 00 
3bd03 3a7 00 00 00 00 
3bd07 3a8 00          | 	byte	$00[9]
3bd08 3a9 30 18 00 3E 
3bd0c 3aa 63 63 63 63 
3bd10 3ab 63 63 63 63 
3bd14 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bd18 3ad 00 00 00 1E 
3bd1c 3ae 33 33 33 1B 
3bd20 3af 33 63 63 63 
3bd24 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3bd28 3b1 1C 36 00 3E 
3bd2c 3b2 63 63 63 63 
3bd30 3b3 63 63 63 63 
3bd34 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bd38 3b5 30 18 00 63 
3bd3c 3b6 67 6F 7F 7B 
3bd40 3b7 73 63 63 63 
3bd44 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3bd48 3b9 00 00 60 30 
3bd4c 3ba 18 00 3B 66 
3bd50 3bb 66 66 66 66 
3bd54 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3bd58 3bd 00 00 36 1C 
3bd5c 3be 08 00 3B 66 
3bd60 3bf 66 66 66 66 
3bd64 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3bd68 3c1 36 1C 00 3E 
3bd6c 3c2 63 63 06 1C 
3bd70 3c3 30 60 63 63 
3bd74 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3bd78 3c5 00 00 36 1C 
3bd7c 3c6 08 00 3E 63 
3bd80 3c7 06 1C 30 63 
3bd84 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3bd88 3c9 30 18 00 3F 
3bd8c 3ca 66 66 66 3E 
3bd90 3cb 36 66 66 66 
3bd94 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3bd98 3cd 30 18 00 63 
3bd9c 3ce 63 63 63 63 
3bda0 3cf 63 63 63 63 
3bda4 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bda8 3d1 00 00 60 30 
3bdac 3d2 18 00 3B 6E 
3bdb0 3d3 66 06 06 06 
3bdb4 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3bdb8 3d5 66 33 00 63 
3bdbc 3d6 63 63 63 63 
3bdc0 3d7 63 63 63 63 
3bdc4 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bdc8 3d9 00 00 60 30 
3bdcc 3da 18 00 63 63 
3bdd0 3db 63 63 63 63 
3bdd4 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3bdd8 3dd 30 18 00 66 
3bddc 3de 66 66 66 3C 
3bde0 3df 18 18 18 18 
3bde4 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3bde8 3e1 00 00 00 08 
3bdec 3e2 0C 0C 3F 0C 
3bdf0 3e3 0C 0C 0C 6C 
3bdf4 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3bdf8 3e5 30 18 00 00 
3bdfc 3e6 00 00 00 00 
3be00 3e7 00 00 00 00 
3be04 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be08 3e9 00 00 00 00 
3be0c 3ea 00 00 00 00 | 	byte	$00[8]
3be10 3eb 7F 00 00 00 
3be14 3ec 00 00 00 00 
3be18 3ed 66 33 00 00 
3be1c 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3be20 3ef 00 00 00 00 
3be24 3f0 00 00 00 00 
3be28 3f1 00 00 00 00 
3be2c 3f2 00 00 00 00 
3be30 3f3 00 00 00 00 
3be34 3f4 00          | 	byte	$00[21]
3be35 3f4 0C 06 3C 36 
3be39 3f5 1C 00 00 00 
3be3d 3f6 00 00 00 00 
3be41 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be45 3f8 00 00 00 63 
3be49 3f9 3E 00 00 00 
3be4d 3fa 00 00 00 00 
3be51 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be55 3fc 00 00 00 00 
3be59 3fd 3E 63 06 1C 
3be5d 3fe 36 63 63 36 
3be61 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3be65 400 00 00 00 00 
3be69 401 00 00 00 00 | 	byte	$00[8]
3be6d 402 18 00 7E 00 
3be71 403 18 00 00 00 
3be75 404 00 00 00 00 
3be79 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be7d 406 00 00 00 00 
3be81 407 00 00 00 00 | 	byte	$00[8]
3be85 408 18 30 1E 00 
3be89 409 00 00 1C 36 
3be8d 40a 36 1C 00 00 
3be91 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3be95 40c 00 00 00 00 
3be99 40d 63 00 00 00 
3be9d 40e 00 00 00 00 
3bea1 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bea5 410 00 00 00 18 
3bea9 411 18 00 00 00 
3bead 412 00 00 00 00 
3beb1 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3beb5 414 00 00 00 00 
3beb9 415 00          | 	byte	$00[5]
3beba 415 CC 66 33 00 
3bebe 416 33 33 33 33 
3bec2 417 33 33 6E 00 
3bec6 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3beca 419 00 3F 66 66 
3bece 41a 66 3E 36 66 
3bed2 41b 66 66 6F 00 
3bed6 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3beda 41d 36 1C 08 00 
3bede 41e 3B 6E 66 06 
3bee2 41f 06 06 0F 00 
3bee6 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3beea 421 00 00 00 7E 
3beee 422 7E 7E 7E 7E 
3bef2 423 7E 7E 00 00 
3bef6 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3befa 425 00 00 00 00 
3befe 426 00 00 00 00 
3bf02 427 00 00 00 00 
3bf06 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bf08 429 00 00 00 00 
      ...             
3bf38 435 00 00 00 00 
3bf3c 436 00 00 00    | st_font        file "st4font.def"
3bf3f 436 FF FF 00 00 
3bf43 437 00 00 00 00 
3bf47 438 00 18 18 18 
3bf4b 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bf4f 43a 18 18 18 18 
3bf53 43b 18 18 18 18 
3bf57 43c 18          | 	byte	$18[9]
3bf58 43d 00 00 00 00 
3bf5c 43e 00 00 00    | 	byte	$00[7]
3bf5f 43e FF FF 18 18 
3bf63 43f 18 18 18 18 
3bf67 440 18 18 18 18 
3bf6b 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bf6f 442 FF FF 00 00 
3bf73 443 00 00 00 00 
3bf77 444 00 18 18 18 
3bf7b 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bf7f 446 1F 1F 18 18 
3bf83 447 18 18 18 18 
3bf87 448 18 18 18 18 
3bf8b 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bf8f 44a F8 F8 18 18 
3bf93 44b 18 18 18 18 
3bf97 44c 18 00 00 00 
3bf9b 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bf9f 44e 1F 1F 18 18 
3bfa3 44f 18 18 18 18 
3bfa7 450 18 00 00 00 
3bfab 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bfaf 452 F8 F8 18 18 
3bfb3 453 18 18 18 18 
3bfb7 454 18 18 18 18 
3bfbb 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bfbf 456 1F 1F 00 00 
3bfc3 457 00 00 00 00 
3bfc7 458 00 18 18 18 
3bfcb 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bfcf 45a F8 F8 00 00 
3bfd3 45b 00 00 00 00 
3bfd7 45c 00 18 18 18 
3bfdb 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bfdf 45e FF FF 18 18 
3bfe3 45f 18 18 18 18 
3bfe7 460 18 00 00 18 
3bfeb 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3bfef 462 66 7E 7E 66 
3bff3 463 66 66 66 30 
3bff7 464 18 00 00 7E 
3bffb 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3bfff 466 3E 06 06 06 
3c003 467 06 7E 7E 18 
3c007 468 0C 30 18 3C 
3c00b 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3c00f 46a 06 06 06 66 
3c013 46b 66 7E 3C 00 
3c017 46c 00 30 18 66 
3c01b 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3c01f 46e 7E 7E 76 76 
3c023 46f 66 66 66 00 
3c027 470 00 30 18 7C 
3c02b 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3c02f 472 1C 38 70 60 
3c033 473 60 7E 3E 00 
3c037 474 00 30 18 7E 
3c03b 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3c03f 476 18 0C 0C 06 
3c043 477 06 7E 7E 00 
3c047 478 00 18 18 00 
3c04b 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3c04f 47a 18 18 0C 0C 
3c053 47b 06 7E 7E 00 
3c057 47c 00 30 18 3C 
3c05b 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3c05f 47e 66 66 66 66 
3c063 47f 66          | 	byte	$66[5]
3c064 480 7E 3C 00 00 
3c068 481 00 00 06 06 
3c06c 482 06 06 16 1E 
3c070 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3c074 484 7E 7E 00 00 
3c078 485 00 00 00 00 
3c07c 486 00 3C 7C 60 
3c080 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3c084 488 7E 7C 30 18 
3c088 489 00 00 00 00 
3c08c 48a 00 3C 7E 66 
3c090 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3c094 48c 7E 7C 18 0C 
3c098 48d 00 00 30 18 
3c09c 48e 00 3C 3E 06 
3c0a0 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3c0a4 490 7E 7C 00 00 
3c0a8 491 00 00 30 18 
3c0ac 492 00 3E 7E 66 
3c0b0 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3c0b4 494 66 66 00 00 
3c0b8 495 00 00 30 18 
3c0bc 496 00 7C 7E 06 
3c0c0 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3c0c4 498 7E 3E 00 00 
3c0c8 499 00 00 30 18 
3c0cc 49a 00 7E 7E 30 
3c0d0 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c0d4 49c 7E 7E 00 00 
3c0d8 49d 00 00 18 18 
3c0dc 49e 00 7E 7E 30 
3c0e0 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c0e4 4a0 7E 7E 00 00 
3c0e8 4a1 00 00 30 18 
3c0ec 4a2 00 3C 7E 66 
3c0f0 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3c0f4 4a4 7E 3C 00 00 
3c0f8 4a5 00 00 1C 1C 
3c0fc 4a6 18 18 38 3C 
3c100 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3c104 4a8 3C 3C 00 00 
3c108 4a9 00 00 00 00 
3c10c 4aa 00 00 00 00 
3c110 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c114 4ac 00 00 00 00 
3c118 4ad 00 00       | 	byte	$00[6]
3c11a 4ad 18 18 18 18 
3c11e 4ae 18 18 18 18 | 	byte	$18[8]
3c122 4af 00 00 18 18 
3c126 4b0 00 00 00 00 
3c12a 4b1 66 66 66 66 
3c12e 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3c132 4b3 00 00 00 00 
3c136 4b4 00 00 00 00 
3c13a 4b5 00          | 	byte	$00[9]
3c13b 4b5 66 66 FF FF 
3c13f 4b6 66 66 FF FF 
3c143 4b7 66 66 00 00 
3c147 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3c14b 4b9 7C 7E 06 06 
3c14f 4ba 3E 7C 60 60 
3c153 4bb 7E 3E 18 18 
3c157 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3c15b 4bd 66 30 30 18 
3c15f 4be 18 0C 0C 66 
3c163 4bf 66 00 00 00 
3c167 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3c16b 4c1 66 66 3C 1C 
3c16f 4c2 1C FC FE 66 
3c173 4c3 66 FE FC 00 
3c177 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3c17b 4c5 18 18 18 18 
3c17f 4c6 00 00 00 00 
3c183 4c7 00 00 00 00 
3c187 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3c18b 4c9 18 1C 0C 0C 
3c18f 4ca 0C 0C 0C 0C 
3c193 4cb 1C 18 30 00 
3c197 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3c19b 4cd 18 38 30 30 
3c19f 4ce 30 30 30 30 
3c1a3 4cf 38 18 0C 00 
3c1a7 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3c1ab 4d1 66 66 3C 3C 
3c1af 4d2 FF FF 3C 3C 
3c1b3 4d3 66 66 00 00 
3c1b7 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3c1bb 4d5 00 18 18 18 
3c1bf 4d6 7E 7E 18 18 
3c1c3 4d7 18 00 00 00 
3c1c7 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c1cb 4d9 00 00 00 00 
3c1cf 4da 00 00       | 	byte	$00[6]
3c1d1 4db 18 18 18 18 
3c1d5 4dc 18          | 	byte	$18[5]
3c1d6 4dc 0C 04 00 00 
3c1da 4dd 00 00 00 00 
3c1de 4de 7E 7E 00 00 
3c1e2 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3c1e6 4e0 00 00 00 00 
3c1ea 4e1 00 00 00 00 
3c1ee 4e2 00 00 00 00 
3c1f2 4e3 00          | 	byte	$00[13]
3c1f3 4e3 18 18 18 00 
3c1f7 4e4 00 00 00 60 
3c1fb 4e5 60 60 30 30 
3c1ff 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3c203 4e7 06 06 06 00 
3c207 4e8 00 00 00 3C 
3c20b 4e9 7E 66 66 66 
3c20f 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3c213 4eb 66 7E 3C 00 
3c217 4ec 00 00 00 18 
3c21b 4ed 18 1C 1C 18 
3c21f 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3c223 4ef 18 7E 7E 00 
3c227 4f0 00 00 00 3C 
3c22b 4f1 7E 66 66 30 
3c22f 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3c233 4f3 0C 7E 7E 00 
3c237 4f4 00 00 00 7E 
3c23b 4f5 7E 30 30 18 
3c23f 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3c243 4f7 66 7E 3C 00 
3c247 4f8 00 00 00 30 
3c24b 4f9 30 38 38 3C 
3c24f 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3c253 4fb 7E 30 30 00 
3c257 4fc 00 00 00 7E 
3c25b 4fd 7E 06 06 3E 
3c25f 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3c263 4ff 66 7E 3C 00 
3c267 500 00 00 00 38 
3c26b 501 3C 0E 06 06 
3c26f 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3c273 503 66 7E 3C 00 
3c277 504 00 00 00 7E 
3c27b 505 7E 60 60 30 
3c27f 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3c283 507 0C 0C 0C 00 
3c287 508 00 00 00 3C 
3c28b 509 7E 66 66 3C 
3c28f 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3c293 50b 66 7E 3C 00 
3c297 50c 00 00 00 3C 
3c29b 50d 7E 66 66 7E 
3c29f 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3c2a3 50f 70 3C 1C 00 
3c2a7 510 00 00 00 00 
3c2ab 511 00 00 18 18 
3c2af 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3c2b3 513 18 18 18 00 
3c2b7 514 00 00 00 00 
3c2bb 515 00 00 18 18 
3c2bf 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3c2c3 517 18 18 18 0C 
3c2c7 518 04 00 00 00 
3c2cb 519 70 38 1C 0E 
3c2cf 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3c2d3 51b 70 00 00 00 
3c2d7 51c 00 00 00 00 
3c2db 51d 00 00 7E 7E 
3c2df 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3c2e3 51f 00 00 00 00 
3c2e7 520 00 00 00 00 | 	byte	$00[8]
3c2eb 521 0E 1C 38 70 
3c2ef 522 E0 70 38 1C 
3c2f3 523 0E 00 00 00 
3c2f7 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3c2fb 525 7E 66 66 30 
3c2ff 526 30 18 18 18 
3c303 527 00 18 18 00 
3c307 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3c30b 529 7E 66 66 66 
3c30f 52a 66 36 06 66 
3c313 52b 66 7E 3C 00 
3c317 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3c31b 52d 3C 7E 66 66 
3c31f 52e 66 7E 7E 66 
3c323 52f 66 66 66 00 
3c327 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3c32b 531 7E 66 66 7E 
3c32f 532 3E 66 66 66 
3c333 533 66 7E 3E 00 
3c337 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3c33b 535 7E 66 66 06 
3c33f 536 06 06 06 66 
3c343 537 66 7E 3C 00 
3c347 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3c34b 539 7E 66 66 66 
3c34f 53a 66 66 66 66 
3c353 53b 66 7E 3E 00 
3c357 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3c35b 53d 7E 06 06 3E 
3c35f 53e 3E 06 06 06 
3c363 53f 06 7E 7E 00 
3c367 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3c36b 541 7E 06 06 3E 
3c36f 542 3E 06 06 06 
3c373 543 06 06 06 00 
3c377 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3c37b 545 7E 06 06 76 
3c37f 546 76 66 66 66 
3c383 547 66 7E 3C 00 
3c387 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3c38b 549 66 66 66 7E 
3c38f 54a 7E 66 66 66 
3c393 54b 66 66 66 00 
3c397 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3c39b 54d 7E 18 18 18 
3c39f 54e 18 18 18 18 
3c3a3 54f 18 7E 7E 00 
3c3a7 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3c3ab 551 60 60 60 60 
3c3af 552 60 60 60    | 	byte	$60[7]
3c3b2 553 66 66 7E 3C 
3c3b6 554 00 00 00 00 
3c3ba 555 66 66 36 36 
3c3be 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3c3c2 557 66 66 C6 C6 
3c3c6 558 00 00 00 00 
3c3ca 559 06 06 06 06 
3c3ce 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3c3d2 55b 06 06 7E 7E 
3c3d6 55c 00 00 00 00 
3c3da 55d C6 C6 EE EE 
3c3de 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3c3e2 55f C6 C6 C6 C6 
3c3e6 560 00 00 00 00 
3c3ea 561 66 66 66 6E 
3c3ee 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3c3f2 563 76 66 66 66 
3c3f6 564 00 00 00 00 
3c3fa 565 3C 7E 66 66 
3c3fe 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c402 567 66 66 7E 3C 
3c406 568 00 00 00 00 
3c40a 569 3E 7E 66 66 
3c40e 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3c412 56b 06 06 06 06 
3c416 56c 00 00 00 00 
3c41a 56d 3C 7E 66 66 
3c41e 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c422 56f 66 56 3E 6C 
3c426 570 00 00 00 00 
3c42a 571 3E 7E 66 66 
3c42e 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3c432 573 66 66 C6 C6 
3c436 574 00 00 00 00 
3c43a 575 7C 7E 06 06 
3c43e 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3c442 577 60 60 7E 3E 
3c446 578 00 00 00 00 
3c44a 579 7E 7E 18 18 
3c44e 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3c452 57b 18 18 18 18 
3c456 57c 00 00 00 00 
3c45a 57d 66 66 66 66 
3c45e 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c462 57f 66 66 7E 3C 
3c466 580 00 00 00 00 
3c46a 581 66 66 66 66 
3c46e 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c472 583 3C 3C 18 18 
3c476 584 00 00 00 00 
3c47a 585 C6 C6 C6 C6 
3c47e 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3c482 587 FE EE C6 82 
3c486 588 00 00 00 00 
3c48a 589 66 66 66 3C 
3c48e 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3c492 58b 3C 66 66 66 
3c496 58c 00 00 00 00 
3c49a 58d 66 66 66 66 
3c49e 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3c4a2 58f 18 18 18 18 
3c4a6 590 00 00 00 00 
3c4aa 591 7E 7E 30 30 
3c4ae 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3c4b2 593 06 06 7E 7E 
3c4b6 594 00 00 00 00 
3c4ba 595 3C 3C 0C 0C 
3c4be 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3c4c2 597 0C 0C 3C 3C 
3c4c6 598 00 00 00 00 
3c4ca 599 06 06 0C 0C 
3c4ce 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3c4d2 59b 60 60 C0 C0 
3c4d6 59c 00 00 00 00 
3c4da 59d 3C 3C 30 30 
3c4de 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3c4e2 59f 30 30 3C 3C 
3c4e6 5a0 00 00 00 00 
3c4ea 5a1 18 18 3C 3C 
3c4ee 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3c4f2 5a3 00 00 00 00 
3c4f6 5a4 00 00 00 00 
3c4fa 5a5 00 00 00 00 
3c4fe 5a6 00 00 00 00 
3c502 5a7 00 00       | 	byte	$00[18]
3c504 5a8 FE FE 00 00 
3c508 5a9 00 00 0C 0C 
3c50c 5aa 18 18 00 00 
3c510 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3c514 5ac 00 00 00 00 
3c518 5ad 00 00 00 00 
3c51c 5ae 00          | 	byte	$00[9]
3c51d 5ae 3C 7C 60 7C 
3c521 5af 7E 66 66 7E 
3c525 5b0 7C 00 00 00 
3c529 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3c52d 5b2 3E 7E 66 66 
3c531 5b3 66 66 66 7E 
3c535 5b4 3E 00 00 00 
3c539 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3c53d 5b6 3C 3E 06 06 
3c541 5b7 06 06 06 7E 
3c545 5b8 7C 00 00 00 
3c549 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3c54d 5ba 7C 7E 66 66 
3c551 5bb 66 66 66 7E 
3c555 5bc 7C 00 00 00 
3c559 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3c55d 5be 3C 7E 66 66 
3c561 5bf 7E 06 06 7E 
3c565 5c0 7C 00 00 00 
3c569 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3c56d 5c2 18 7E 7E 18 
3c571 5c3 18 18 18 18 
3c575 5c4 18 00 00 00 
3c579 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c57d 5c6 7C 7E 66 66 
3c581 5c7 66 66 7E 7C 
3c585 5c8 60 7E 3E 00 
3c589 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3c58d 5ca 3E 7E 66 66 
3c591 5cb 66 66 66 66 
3c595 5cc 66 00 00 00 
3c599 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3c59d 5ce 1C 1C 18 18 
3c5a1 5cf 18 18 18 3C 
3c5a5 5d0 3C 00 00 00 
3c5a9 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3c5ad 5d2 30 30 30 30 
3c5b1 5d3 30 30 30 30 
3c5b5 5d4 30          | 	byte	$30[9]
3c5b6 5d4 3E 1E 00 00 
3c5ba 5d5 06 06 06 36 
3c5be 5d6 36 1E 1E 1E 
3c5c2 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3c5c6 5d8 00 00 00 00 
3c5ca 5d9 1C 1C 18 18 
3c5ce 5da 18 18 18 18 
3c5d2 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3c5d6 5dc 00 00 00 00 
3c5da 5dd 00 00 00    | 	byte	$00[7]
3c5dd 5de 6C FE FE D6 
3c5e1 5df D6 C6 C6 C6 
3c5e5 5e0 C6 00 00 00 
3c5e9 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3c5ed 5e2 3E 7E 66 66 
3c5f1 5e3 66 66 66 66 
3c5f5 5e4 66 00 00 00 
3c5f9 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3c5fd 5e6 3C 7E 66 66 
3c601 5e7 66 66 66 7E 
3c605 5e8 3C 00 00 00 
3c609 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3c60d 5ea 3E 7E 66 66 
3c611 5eb 66 66 66 7E 
3c615 5ec 3E 06 06 00 
3c619 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3c61d 5ee 7C 7E 66 66 
3c621 5ef 66 66 66 7E 
3c625 5f0 7C 60 60 00 
3c629 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3c62d 5f2 3E 7E 66 06 
3c631 5f3 06 06 06 06 
3c635 5f4 06 00 00 00 
3c639 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3c63d 5f6 7C 7E 06 0E 
3c641 5f7 3C 70 60 7E 
3c645 5f8 3E 00 00 00 
3c649 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3c64d 5fa 7E 7E 18 18 
3c651 5fb 18 18 18 78 
3c655 5fc 70 00 00 00 
3c659 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3c65d 5fe 66 66 66 66 
3c661 5ff 66 66 66    | 	byte	$66[7]
3c664 600 7E 7C 00 00 
3c668 601 00 00 00 00 
3c66c 602 00 66 66 66 
3c670 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3c674 604 18 18 00 00 
3c678 605 00 00 00 00 
3c67c 606 00 C6 C6 D6 
3c680 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3c684 608 C6 82 00 00 
3c688 609 00 00 00 00 
3c68c 60a 00 66 66 3C 
3c690 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3c694 60c 66 66 00 00 
3c698 60d 00 00 00 00 
3c69c 60e 00 66 66 66 
3c6a0 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3c6a4 610 7C 60 7E 3E 
3c6a8 611 00 00 00 00 
3c6ac 612 00 7E 7E 30 
3c6b0 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c6b4 614 7E 7E 00 00 
3c6b8 615 00 00 30 18 
3c6bc 616 18 18 18 0C 
3c6c0 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3c6c4 618 18 30 00 00 
3c6c8 619 00 00 18 18 
3c6cc 61a 18 18 18 18 
3c6d0 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c6d4 61c 18 18 00 00 
3c6d8 61d 00 00 0C 18 
3c6dc 61e 18 18 18 30 
3c6e0 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3c6e4 620 18 0C 00 00 
3c6e8 621 00 00 6C 7E 
3c6ec 622 36 00 00 00 
3c6f0 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3c6f4 624 00 00 00 00 
3c6f8 625 00 00 00 00 
3c6fc 626 00          | 	byte	$00[9]
3c6fd 626 18 18 18 18 
3c701 627 18 18 00 00 
3c705 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3c708 629 00 6C FE FE 
3c70c 62a 7C 38 10 00 
3c710 62b 18 18 18 F8 
3c714 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3c718 62d C0 C0 C0 C0 
3c71c 62e C0 C0 C0 C0 | 	byte	$c0[8]
3c720 62f 18 18 18 1F 
3c724 630 1F 00 00 00 
3c728 631 18 18 18 1F 
3c72c 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3c730 633 00 00 00 1F 
3c734 634 1F 18 18 18 
3c738 635 C0 E0 70 38 
3c73c 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3c740 637 03 07 0E 1C 
3c744 638 38 70 E0 C0 
3c748 639 80 C0 E0 F0 
3c74c 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3c750 63b 00 00 00 00 
3c754 63c F0 F0 F0 F0 
3c758 63d 01 03 07 0F 
3c75c 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3c760 63f F0 F0 F0 F0 
3c764 640 00 00 00 00 
3c768 641 0F 0F 0F 0F 
3c76c 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3c770 643 FF FF 00 00 
3c774 644 00 00 00 00 
3c778 645 00 00 00 00 
3c77c 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3c780 647 00 00 00 00 
3c784 648 0F 0F 0F 0F 
3c788 649 00 38 38 EE 
3c78c 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3c790 64b 00 00 00 F8 
3c794 64c F8 18 18 18 
3c798 64d 00 00 00 FF 
3c79c 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3c7a0 64f 18 18 18 FF 
3c7a4 650 FF 18 18 18 
3c7a8 651 00 00 3C 7E 
3c7ac 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3c7b0 653 00 00 00 00 
3c7b4 654 FF FF FF FF 
3c7b8 655 03 03 03 03 
3c7bc 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3c7c0 657 00 00 00 FF 
3c7c4 658 FF 18 18 18 
3c7c8 659 18 18 18 FF 
3c7cc 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3c7d0 65b 0F 0F 0F 0F 
3c7d4 65c 0F 0F 0F 0F | 	byte	$0f[8]
3c7d8 65d 18 18 18 F8 
3c7dc 65e F8 00 00 00 
3c7e0 65f 1E 06 1E 06 
3c7e4 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3c7e8 661 00 18 3C 7E 
3c7ec 662 18 18 18 00 
3c7f0 663 00 18 18 18 
3c7f4 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3c7f8 665 00 18 0C 7E 
3c7fc 666 0C 18 00 00 
3c800 667 00 18 30 7E 
3c804 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3c808 669 00 00 00 00 
3c80c 66a 00 00 00 00 
3c810 66b 00          | 	byte	$00[9]
3c811 66b 18 18 18 18 
3c815 66c 00 18 00 00 
3c819 66d 66 66 66 00 
3c81d 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3c821 66f 66 FF 66 66 
3c825 670 FF 66 00 18 
3c829 671 7C 06 3C 60 
3c82d 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3c831 673 66 36 18 0C 
3c835 674 66 62 00 38 
3c839 675 6C 38 1C F6 
3c83d 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3c841 677 18 18 18 00 
3c845 678 00 00 00 00 
3c849 679 70 38 18 18 
3c84d 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3c851 67b 0E 1C 18 18 
3c855 67c 1C 0E 00 00 
3c859 67d 66 3C FF 3C 
3c85d 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3c861 67f 18 18 7E 18 
3c865 680 18 00 00 00 
3c869 681 00 00 00 00 
3c86d 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3c871 683 00 00 7E 00 
3c875 684 00 00 00 00 
3c879 685 00 00 00 00 
3c87d 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3c881 687 60 30 18 0C 
3c885 688 06 02 00 00 
3c889 689 3C 66 76 6E 
3c88d 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3c891 68b 18 1C 18 18 
3c895 68c 18 7E 00 00 
3c899 68d 3C 66 30 18 
3c89d 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3c8a1 68f 7E 30 18 30 
3c8a5 690 66 3C 00 00 
3c8a9 691 30 38 3C 36 
3c8ad 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3c8b1 693 7E 06 3E 60 
3c8b5 694 66 3C 00 00 
3c8b9 695 3C 06 3E 66 
3c8bd 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3c8c1 697 7E 60 30 18 
3c8c5 698 0C 0C 00 00 
3c8c9 699 3C 66 3C 66 
3c8cd 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3c8d1 69b 3C 66 7C 60 
3c8d5 69c 30 1C 00 00 
3c8d9 69d 00 18 18 00 
3c8dd 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3c8e1 69f 00 18 18 00 
3c8e5 6a0 18 18 0C 60 
3c8e9 6a1 30 18 0C 18 
3c8ed 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3c8f1 6a3 00 7E 00 00 
3c8f5 6a4 7E 00 00 06 
3c8f9 6a5 0C 18 30 18 
3c8fd 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3c901 6a7 3C 66 30 18 
3c905 6a8 00 18 00 00 
3c909 6a9 3C 66 76 76 
3c90d 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3c911 6ab 18 3C 66 66 
3c915 6ac 7E 66 00 00 
3c919 6ad 3E 66 3E 66 
3c91d 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3c921 6af 3C 66 06 06 
3c925 6b0 66 3C 00 00 
3c929 6b1 1E 36 66 66 
3c92d 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3c931 6b3 7E 06 3E 06 
3c935 6b4 06 7E 00 00 
3c939 6b5 7E 06 3E 06 
3c93d 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3c941 6b7 7C 06 06 76 
3c945 6b8 66 7C 00 00 
3c949 6b9 66 66 7E 66 
3c94d 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3c951 6bb 7E 18 18 18 
3c955 6bc 18 7E 00 00 
3c959 6bd 60 60 60 60 
3c95d 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3c961 6bf 66 36 1E 1E 
3c965 6c0 36 66 00 00 
3c969 6c1 06 06 06 06 
3c96d 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3c971 6c3 C6 EE FE D6 
3c975 6c4 C6 C6 00 00 
3c979 6c5 66 6E 7E 7E 
3c97d 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3c981 6c7 3C 66 66 66 
3c985 6c8 66 3C 00 00 
3c989 6c9 3E 66 66 3E 
3c98d 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3c991 6cb 3C 66 66 66 
3c995 6cc 36 6C 00 00 
3c999 6cd 3E 66 66 3E 
3c99d 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3c9a1 6cf 3C 06 3C 60 
3c9a5 6d0 60 3C 00 00 
3c9a9 6d1 7E 18 18 18 
3c9ad 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3c9b1 6d3 66 66 66 66 
3c9b5 6d4 66          | 	byte	$66[5]
3c9b6 6d4 7E 00 00 66 
3c9ba 6d5 66 66 66 3C 
3c9be 6d6 18 00 00 C6 
3c9c2 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3c9c6 6d8 C6 00 00 66 
3c9ca 6d9 66 3C 3C 66 
3c9ce 6da 66 00 00 66 
3c9d2 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3c9d6 6dc 18 00 00 7E 
3c9da 6dd 30 18 0C 06 
3c9de 6de 7E 00 00 78 
3c9e2 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3c9e6 6e0 78 00 00 02 
3c9ea 6e1 06 0C 18 30 
3c9ee 6e2 60 00 00 1E 
3c9f2 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3c9f6 6e4 1E 00 00 10 
3c9fa 6e5 38 6C C6 00 
3c9fe 6e6 00 00 00 00 
3ca02 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ca06 6e8 FF 00 00 18 
3ca0a 6e9 3C 7E 7E 3C 
3ca0e 6ea 18 00 00 00 
3ca12 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3ca16 6ec 7C 00 00 06 
3ca1a 6ed 06 3E 66 66 
3ca1e 6ee 3E 00 00 00 
3ca22 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3ca26 6f0 3C 00 00 60 
3ca2a 6f1 60 7C 66 66 
3ca2e 6f2 7C 00 00 00 
3ca32 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3ca36 6f4 3C 00 00 70 
3ca3a 6f5 18 7C 18 18 
3ca3e 6f6 18 00 00 00 
3ca42 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3ca46 6f8 60 3E 00 06 
3ca4a 6f9 06 3E 66 66 
3ca4e 6fa 66 00 00 18 
3ca52 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3ca56 6fc 3C 00 00 60 
3ca5a 6fd 00 60 60 60 
3ca5e 6fe 60 3C 00 06 
3ca62 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3ca66 700 66 00 00 1C 
3ca6a 701 18 18 18 18 
3ca6e 702 3C 00 00 00 
3ca72 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3ca76 704 C6 00 00 00 
3ca7a 705 3E 66 66 66 
3ca7e 706 66 00 00 00 
3ca82 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3ca86 708 3C 00 00 00 
3ca8a 709 3E 66 66 3E 
3ca8e 70a 06 06 00 00 
3ca92 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3ca96 70c 60 60 00 00 
3ca9a 70d 3E 66 06 06 
3ca9e 70e 06 00 00 00 
3caa2 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3caa6 710 3E 00 00 18 
3caaa 711 7E 18 18 18 
3caae 712 70 00 00 00 
3cab2 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3cab6 714 7C 00 00 00 
3caba 715 66 66 66 3C 
3cabe 716 18 00 00 00 
3cac2 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3cac6 718 6C 00 00 00 
3caca 719 66 3C 18 3C 
3cace 71a 66 00 00 00 
3cad2 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3cad6 71c 30 1E 00 00 
3cada 71d 7E 30 18 0C 
3cade 71e 7E 00 00 18 
3cae2 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3cae6 720 3C 00 18 18 
3caea 721 18 18 18 18 
3caee 722 18 18 00 7E 
3caf2 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3caf6 724 60 00 10 18 
3cafa 725 1C 1E 1C 18 
3cafe 726 10 00 08 18 
3cb02 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3cb06 728 08 00       | 	byte	$08, $00
3cb08 729 00 6C FE FE 
3cb0c 72a 7C 38 10 00 
3cb10 72b 18 18 18 F8 
3cb14 72c F8 18 18 18 | a8_font2       file "atari8.fnt"
3cb18 72d C0 C0 C0 C0 
3cb1c 72e C0 C0 C0 C0 | 	byte	$c0[8]
3cb20 72f 18 18 18 1F 
3cb24 730 1F 00 00 00 
3cb28 731 18 18 18 1F 
3cb2c 732 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3cb30 733 00 00 00 1F 
3cb34 734 1F 18 18 18 
3cb38 735 C0 E0 70 38 
3cb3c 736 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3cb40 737 03 07 0E 1C 
3cb44 738 38 70 E0 C0 
3cb48 739 80 C0 E0 F0 
3cb4c 73a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3cb50 73b 00 00 00 00 
3cb54 73c F0 F0 F0 F0 
3cb58 73d 01 03 07 0F 
3cb5c 73e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3cb60 73f F0 F0 F0 F0 
3cb64 740 00 00 00 00 
3cb68 741 0F 0F 0F 0F 
3cb6c 742 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3cb70 743 FF FF 00 00 
3cb74 744 00 00 00 00 
3cb78 745 00 00 00 00 
3cb7c 746 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3cb80 747 00 00 00 00 
3cb84 748 0F 0F 0F 0F 
3cb88 749 00 38 38 EE 
3cb8c 74a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3cb90 74b 00 00 00 F8 
3cb94 74c F8 18 18 18 
3cb98 74d 00 00 00 FF 
3cb9c 74e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3cba0 74f 18 18 18 FF 
3cba4 750 FF 18 18 18 
3cba8 751 00 00 3C 7E 
3cbac 752 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3cbb0 753 00 00 00 00 
3cbb4 754 FF FF FF FF 
3cbb8 755 03 03 03 03 
3cbbc 756 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3cbc0 757 00 00 00 FF 
3cbc4 758 FF 18 18 18 
3cbc8 759 18 18 18 FF 
3cbcc 75a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3cbd0 75b 0F 0F 0F 0F 
3cbd4 75c 0F 0F 0F 0F | 	byte	$0f[8]
3cbd8 75d 18 18 18 F8 
3cbdc 75e F8 00 00 00 
3cbe0 75f 1E 06 1E 06 
3cbe4 760 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3cbe8 761 00 18 3C 7E 
3cbec 762 18 18 18 00 
3cbf0 763 00 18 18 18 
3cbf4 764 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3cbf8 765 00 18 0C 7E 
3cbfc 766 0C 18 00 00 
3cc00 767 00 18 30 7E 
3cc04 768 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3cc08 769 00 00 00 00 
3cc0c 76a 00 00 00 00 
3cc10 76b 00          | 	byte	$00[9]
3cc11 76b 18 18 18 18 
3cc15 76c 00 18 00 00 
3cc19 76d 66 66 66 00 
3cc1d 76e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3cc21 76f 66 FF 66 66 
3cc25 770 FF 66 00 18 
3cc29 771 7C 06 3C 60 
3cc2d 772 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3cc31 773 66 36 18 0C 
3cc35 774 66 62 00 38 
3cc39 775 6C 38 1C F6 
3cc3d 776 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3cc41 777 18 18 18 00 
3cc45 778 00 00 00 00 
3cc49 779 70 38 18 18 
3cc4d 77a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3cc51 77b 0E 1C 18 18 
3cc55 77c 1C 0E 00 00 
3cc59 77d 66 3C FF 3C 
3cc5d 77e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3cc61 77f 18 18 7E 18 
3cc65 780 18 00 00 00 
3cc69 781 00 00 00 00 
3cc6d 782 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3cc71 783 00 00 7E 00 
3cc75 784 00 00 00 00 
3cc79 785 00 00 00 00 
3cc7d 786 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3cc81 787 60 30 18 0C 
3cc85 788 06 02 00 00 
3cc89 789 3C 66 76 6E 
3cc8d 78a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3cc91 78b 18 1C 18 18 
3cc95 78c 18 7E 00 00 
3cc99 78d 3C 66 30 18 
3cc9d 78e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3cca1 78f 7E 30 18 30 
3cca5 790 66 3C 00 00 
3cca9 791 30 38 3C 36 
3ccad 792 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3ccb1 793 7E 06 3E 60 
3ccb5 794 66 3C 00 00 
3ccb9 795 3C 06 3E 66 
3ccbd 796 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3ccc1 797 7E 60 30 18 
3ccc5 798 0C 0C 00 00 
3ccc9 799 3C 66 3C 66 
3cccd 79a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3ccd1 79b 3C 66 7C 60 
3ccd5 79c 30 1C 00 00 
3ccd9 79d 00 18 18 00 
3ccdd 79e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3cce1 79f 00 18 18 00 
3cce5 7a0 18 18 0C 60 
3cce9 7a1 30 18 0C 18 
3cced 7a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3ccf1 7a3 00 7E 00 00 
3ccf5 7a4 7E 00 00 06 
3ccf9 7a5 0C 18 30 18 
3ccfd 7a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3cd01 7a7 3C 66 30 18 
3cd05 7a8 00 18 00 00 
3cd09 7a9 3C 66 76 76 
3cd0d 7aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3cd11 7ab 18 3C 66 66 
3cd15 7ac 7E 66 00 00 
3cd19 7ad 3E 66 3E 66 
3cd1d 7ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3cd21 7af 3C 66 06 06 
3cd25 7b0 66 3C 00 00 
3cd29 7b1 1E 36 66 66 
3cd2d 7b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3cd31 7b3 7E 06 3E 06 
3cd35 7b4 06 7E 00 00 
3cd39 7b5 7E 06 3E 06 
3cd3d 7b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3cd41 7b7 7C 06 06 76 
3cd45 7b8 66 7C 00 00 
3cd49 7b9 66 66 7E 66 
3cd4d 7ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3cd51 7bb 7E 18 18 18 
3cd55 7bc 18 7E 00 00 
3cd59 7bd 60 60 60 60 
3cd5d 7be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3cd61 7bf 66 36 1E 1E 
3cd65 7c0 36 66 00 00 
3cd69 7c1 06 06 06 06 
3cd6d 7c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3cd71 7c3 C6 EE FE D6 
3cd75 7c4 C6 C6 00 00 
3cd79 7c5 66 6E 7E 7E 
3cd7d 7c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3cd81 7c7 3C 66 66 66 
3cd85 7c8 66 3C 00 00 
3cd89 7c9 3E 66 66 3E 
3cd8d 7ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3cd91 7cb 3C 66 66 66 
3cd95 7cc 36 6C 00 00 
3cd99 7cd 3E 66 66 3E 
3cd9d 7ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3cda1 7cf 3C 06 3C 60 
3cda5 7d0 60 3C 00 00 
3cda9 7d1 7E 18 18 18 
3cdad 7d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3cdb1 7d3 66 66 66 66 
3cdb5 7d4 66          | 	byte	$66[5]
3cdb6 7d4 7E 00 00 66 
3cdba 7d5 66 66 66 3C 
3cdbe 7d6 18 00 00 C6 
3cdc2 7d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3cdc6 7d8 C6 00 00 66 
3cdca 7d9 66 3C 3C 66 
3cdce 7da 66 00 00 66 
3cdd2 7db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3cdd6 7dc 18 00 00 7E 
3cdda 7dd 30 18 0C 06 
3cdde 7de 7E 00 00 78 
3cde2 7df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3cde6 7e0 78 00 00 02 
3cdea 7e1 06 0C 18 30 
3cdee 7e2 60 00 00 1E 
3cdf2 7e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3cdf6 7e4 1E 00 00 10 
3cdfa 7e5 38 6C C6 00 
3cdfe 7e6 00 00 00 00 
3ce02 7e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ce06 7e8 FF 00 00 18 
3ce0a 7e9 3C 7E 7E 3C 
3ce0e 7ea 18 00 00 00 
3ce12 7eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3ce16 7ec 7C 00 00 06 
3ce1a 7ed 06 3E 66 66 
3ce1e 7ee 3E 00 00 00 
3ce22 7ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3ce26 7f0 3C 00 00 60 
3ce2a 7f1 60 7C 66 66 
3ce2e 7f2 7C 00 00 00 
3ce32 7f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3ce36 7f4 3C 00 00 70 
3ce3a 7f5 18 7C 18 18 
3ce3e 7f6 18 00 00 00 
3ce42 7f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3ce46 7f8 60 3E 00 06 
3ce4a 7f9 06 3E 66 66 
3ce4e 7fa 66 00 00 18 
3ce52 7fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3ce56 7fc 3C 00 00 60 
3ce5a 7fd 00 60 60 60 
3ce5e 7fe 60 3C 00 06 
3ce62 7ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3ce66 800 66 00 00 1C 
3ce6a 801 18 18 18 18 
3ce6e 802 3C 00 00 00 
3ce72 803 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3ce76 804 C6 00 00 00 
3ce7a 805 3E 66 66 66 
3ce7e 806 66 00 00 00 
3ce82 807 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3ce86 808 3C 00 00 00 
3ce8a 809 3E 66 66 3E 
3ce8e 80a 06 06 00 00 
3ce92 80b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3ce96 80c 60 60 00 00 
3ce9a 80d 3E 66 06 06 
3ce9e 80e 06 00 00 00 
3cea2 80f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3cea6 810 3E 00 00 18 
3ceaa 811 7E 18 18 18 
3ceae 812 70 00 00 00 
3ceb2 813 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3ceb6 814 7C 00 00 00 
3ceba 815 66 66 66 3C 
3cebe 816 18 00 00 00 
3cec2 817 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3cec6 818 6C 00 00 00 
3ceca 819 66 3C 18 3C 
3cece 81a 66 00 00 00 
3ced2 81b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3ced6 81c 30 1E 00 00 
3ceda 81d 7E 30 18 0C 
3cede 81e 7E 00 00 18 
3cee2 81f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3cee6 820 3C 00 18 18 
3ceea 821 18 18 18 18 
3ceee 822 18 18 00 7E 
3cef2 823 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3cef6 824 60 00 10 18 
3cefa 825 1C 1E 1C 18 
3cefe 826 10 00 08 18 
3cf02 827 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3cf06 828 08 00       | 	byte	$08, $00
3cf08 829 00 00 00 00 
      ...             
3d114 8ac 00 00 00 00 
3d118 8ad 00 00       | amiga_font     file "amigafont.def"
3d11a 8ad 18 18 18 18 
3d11e 8ae 18 18       | 	byte	$18[6]
3d120 8af 00 18 18 00 
3d124 8b0 00 00 00 00 
3d128 8b1 00 00 66 66 
3d12c 8b2 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
3d130 8b3 00 00 00 00 
3d134 8b4 00 00 00 00 
3d138 8b5 00 00       | 	byte	$00[10]
3d13a 8b5 36 36 7F 36 
3d13e 8b6 36 36 7F 36 
3d142 8b7 36 00 00 00 
3d146 8b8 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
3d14a 8b9 18 7C 06 06 
3d14e 8ba 3C 60 60 3E 
3d152 8bb 18 00 00 00 
3d156 8bc 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
3d15a 8bd 00 00 C6 69 
3d15e 8be 36 18 6C 96 
3d162 8bf 63 00 00 00 
3d166 8c0 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
3d16a 8c1 1C 36 36 1E 
3d16e 8c2 6E 3B 33 73 
3d172 8c3 DE 00 00 00 
3d176 8c4 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
3d17a 8c5 18 18 0C 00 
3d17e 8c6 00 00 00 00 
3d182 8c7 00 00 00 00 
3d186 8c8 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d18a 8c9 30 18 0C 0C 
3d18e 8ca 0C 0C 0C 18 
3d192 8cb 30 00 00 00 
3d196 8cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
3d19a 8cd 0C 18 30 30 
3d19e 8ce 30 30 30 18 
3d1a2 8cf 0C 00 00 00 
3d1a6 8d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
3d1aa 8d1 00 66 66 3C 
3d1ae 8d2 FF 3C 66 66 
3d1b2 8d3 00 00 00 00 
3d1b6 8d4 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
3d1ba 8d5 00 18 18 18 
3d1be 8d6 7E 18 18 18 
3d1c2 8d7 00 00 00 00 
3d1c6 8d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3d1ca 8d9 00 00 00 00 
3d1ce 8da 00 00 00    | 	byte	$00[7]
3d1d1 8db 18 18 0C 00 
3d1d5 8dc 00 00 00 00 
3d1d9 8dd 00 00 00 00 
3d1dd 8de 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
3d1e1 8df 00 00 00 00 
3d1e5 8e0 00 00 00 00 
3d1e9 8e1 00 00 00 00 
3d1ed 8e2 00 00 00 00 | 	byte	$00[16]
3d1f1 8e3 18 18 00 00 
3d1f5 8e4 00 00 00 00 
3d1f9 8e5 00 00 C0 60 
3d1fd 8e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
3d201 8e7 03 00 00 00 
3d205 8e8 00 00 00 00 
3d209 8e9 00 3C 66 66 
3d20d 8ea 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
3d211 8eb 66 3C 00 00 
3d215 8ec 00 00 00 00 
3d219 8ed 00 18 1C 1E 
3d21d 8ee 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
3d221 8ef 18 18 00 00 
3d225 8f0 00 00 00 00 
3d229 8f1 00 3C 66 60 
3d22d 8f2 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
3d231 8f3 06 7E 00 00 
3d235 8f4 00 00 00 00 
3d239 8f5 00 3C 66 60 
3d23d 8f6 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
3d241 8f7 66 3C 00 00 
3d245 8f8 00 00 00 00 
3d249 8f9 00 30 38 3C 
3d24d 8fa 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
3d251 8fb 30 30 00 00 
3d255 8fc 00 00 00 00 
3d259 8fd 00 7E 06 06 
3d25d 8fe 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
3d261 8ff 66 3C 00 00 
3d265 900 00 00 00 00 
3d269 901 00 38 0C 06 
3d26d 902 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
3d271 903 66 3C 00 00 
3d275 904 00 00 00 00 
3d279 905 00 7E 60 60 
3d27d 906 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
3d281 907 18 18 00 00 
3d285 908 00 00 00 00 
3d289 909 00 3C 66 66 
3d28d 90a 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
3d291 90b 66 3C 00 00 
3d295 90c 00 00 00 00 
3d299 90d 00 3C 66 66 
3d29d 90e 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
3d2a1 90f 30 1C 00 00 
3d2a5 910 00 00 00 00 
3d2a9 911 00 00 00 18 
3d2ad 912 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
3d2b1 913 18 00 00 00 
3d2b5 914 00 00 00 00 
3d2b9 915 00 00 00 18 
3d2bd 916 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3d2c1 917 18 18 0C 00 
3d2c5 918 00 00 00 00 
3d2c9 919 00 00 00 60 
3d2cd 91a 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
3d2d1 91b 00 00 00 00 
3d2d5 91c 00 00 00 00 
3d2d9 91d 00 00 00 00 | 	byte	$00[12]
3d2dd 91e 7E 00 7E 00 
3d2e1 91f 00 00 00 00 
3d2e5 920 00 00 00 00 
3d2e9 921 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
3d2ed 922 18 60 18 06 
3d2f1 923 00 00 00 00 
3d2f5 924 00 00 00 00 
3d2f9 925 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
3d2fd 926 60 30 18 00 
3d301 927 18 18 00 00 
3d305 928 00 00 00 00 
3d309 929 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3d30d 92a 7B 6B 7B 03 
3d311 92b 03 1E 00 00 
3d315 92c 00 00 00 00 
3d319 92d 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3d31d 92e 63 7F 63 63 
3d321 92f 63 63 00 00 
3d325 930 00 00 00 00 
3d329 931 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
3d32d 932 66 3E 66 66 
3d331 933 66 3E 00 00 
3d335 934 00 00 00 00 
3d339 935 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
3d33d 936 06 06 06 06 
3d341 937 0C 78 00 00 
3d345 938 00 00 00 00 
3d349 939 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
3d34d 93a 63 63 63 63 
3d351 93b 33 1F 00 00 
3d355 93c 00 00 00 00 
3d359 93d 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3d35d 93e 06 1E 06 06 
3d361 93f 06 7E 00 00 
3d365 940 00 00 00 00 
3d369 941 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3d36d 942 06 1E 06 06 
3d371 943 06 06 00 00 
3d375 944 00 00 00 00 
3d379 945 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
3d37d 946 06 76 66 66 
3d381 947 66 7C 00 00 
3d385 948 00 00 00 00 
3d389 949 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
3d38d 94a 63 7F 63 63 
3d391 94b 63 63 00 00 
3d395 94c 00 00 00 00 
3d399 94d 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
3d39d 94e 18 18 18 18 
3d3a1 94f 18          | 	byte	$18[5]
3d3a2 94f 3C 00 00 00 
3d3a6 950 00 00 00 00 
3d3aa 951 60 60 60 60 
3d3ae 952 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
3d3b2 953 3E 00 00 00 
3d3b6 954 00 00 00 00 
3d3ba 955 C3 63 33 1B 
3d3be 956 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
3d3c2 957 C3 00 00 00 
3d3c6 958 00 00 00 00 
3d3ca 959 03 03 03 03 
3d3ce 95a 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
3d3d2 95b 7F 00 00 00 
3d3d6 95c 00 00 00 00 
3d3da 95d 63 77 7F 6B 
3d3de 95e 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
3d3e2 95f 63 00 00 00 
3d3e6 960 00 00 00 00 
3d3ea 961 63 67 6F 7B 
3d3ee 962 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
3d3f2 963 63 00 00 00 
3d3f6 964 00 00 00 00 
3d3fa 965 3E 63 63 63 
3d3fe 966 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
3d402 967 3E 00 00 00 
3d406 968 00 00 00 00 
3d40a 969 3E 66 66 66 
3d40e 96a 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
3d412 96b 06 00 00 00 
3d416 96c 00 00 00 00 
3d41a 96d 3E 63 63 63 
3d41e 96e 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
3d422 96f FE 00 00 00 
3d426 970 00 00 00 00 
3d42a 971 1F 33 33 33 
3d42e 972 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
3d432 973 63 00 00 00 
3d436 974 00 00 00 00 
3d43a 975 3C 66 06 0C 
3d43e 976 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
3d442 977 3C 00 00 00 
3d446 978 00 00 00 00 
3d44a 979 7E 18 18 18 
3d44e 97a 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
3d452 97b 18 00 00 00 
3d456 97c 00 00 00 00 
3d45a 97d 63 63 63 63 
3d45e 97e 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
3d462 97f 3E 00 00 00 
3d466 980 00 00 00 00 
3d46a 981 63 63 63 63 
3d46e 982 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
3d472 983 08 00 00 00 
3d476 984 00 00 00 00 
3d47a 985 C3 C3 C3 C3 
3d47e 986 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
3d482 987 C3 00 00 00 
3d486 988 00 00 00 00 
3d48a 989 C3 C3 66 3C 
3d48e 98a 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
3d492 98b C3 00 00 00 
3d496 98c 00 00 00 00 
3d49a 98d C3 C3 66 3C 
3d49e 98e 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
3d4a2 98f 18 00 00 00 
3d4a6 990 00 00 00 00 
3d4aa 991 7F 60 60 30 
3d4ae 992 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
3d4b2 993 7F 00 00 00 
3d4b6 994 00 00 00 00 
3d4ba 995 3C 0C 0C 0C 
3d4be 996 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3d4c2 997 3C 00 00 00 
3d4c6 998 00 00 00 00 
3d4ca 999 00 03 06 0C 
3d4ce 99a 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
3d4d2 99b 00 00 00 00 
3d4d6 99c 00 00 00 00 | 	byte	$00[8]
3d4da 99d 3C 30 30 30 
3d4de 99e 30 30 30 30 
3d4e2 99f 3C 00 00 00 
3d4e6 9a0 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
3d4ea 9a1 08 1C 36 63 
3d4ee 9a2 00 00 00 00 
3d4f2 9a3 00 00 00 00 
3d4f6 9a4 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d4fa 9a5 00 00 00 00 
3d4fe 9a6 00 00 00 00 
3d502 9a7 00          | 	byte	$00[9]
3d503 9a7 7F 00 00 00 
3d507 9a8 00 00 00 18 
3d50b 9a9 18 30 00 00 
3d50f 9aa 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
3d513 9ab 00 00 00 00 
3d517 9ac 00 00 00 00 
3d51b 9ad 00 00       | 	byte	$00[10]
3d51d 9ae 3C 60 7C 66 
3d521 9af 66 7C 00 00 
3d525 9b0 00 00 00 00 
3d529 9b1 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
3d52d 9b2 3E 66 66 66 
3d531 9b3 66 3E 00 00 
3d535 9b4 00 00 00 00 
3d539 9b5 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d53d 9b6 3C 06 06 06 
3d541 9b7 06 3C 00 00 
3d545 9b8 00 00 00 00 
3d549 9b9 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
3d54d 9ba 7C 66 66 66 
3d551 9bb 66 7C 00 00 
3d555 9bc 00 00 00 00 
3d559 9bd 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d55d 9be 3C 66 7E 06 
3d561 9bf 06 3C 00 00 
3d565 9c0 00 00 00 00 
3d569 9c1 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
3d56d 9c2 3E 0C 0C 0C 
3d571 9c3 0C 0C 00 00 
3d575 9c4 00 00 00 00 
3d579 9c5 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d57d 9c6 7C 66 66 66 
3d581 9c7 7C 60 60 3C 
3d585 9c8 00 00 00 00 
3d589 9c9 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
3d58d 9ca 3E 66 66 66 
3d591 9cb 66 66 00 00 
3d595 9cc 00 00 00 00 
3d599 9cd 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
3d59d 9ce 18 18 18 18 
3d5a1 9cf 18          | 	byte	$18[5]
3d5a2 9cf 30 00 00 00 
3d5a6 9d0 00 00 00 00 
3d5aa 9d1 00 30 00 30 
3d5ae 9d2 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
3d5b2 9d3 30 30 1E 00 
3d5b6 9d4 00 00 00 00 
3d5ba 9d5 03 03 03 33 
3d5be 9d6 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
3d5c2 9d7 63 00 00 00 
3d5c6 9d8 00 00 00 00 
3d5ca 9d9 18 18 18 18 
3d5ce 9da 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3d5d2 9db 30 00 00 00 
3d5d6 9dc 00 00 00 00 
3d5da 9dd 00 00 00 37 
3d5de 9de 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
3d5e2 9df 63 00 00 00 
3d5e6 9e0 00 00 00 00 
3d5ea 9e1 00 00 00 3E 
3d5ee 9e2 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
3d5f2 9e3 66 00 00 00 
3d5f6 9e4 00 00 00 00 
3d5fa 9e5 00 00 00 3C 
3d5fe 9e6 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
3d602 9e7 3C 00 00 00 
3d606 9e8 00 00 00 00 
3d60a 9e9 00 00 00 3E 
3d60e 9ea 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
3d612 9eb 06 06 06 00 
3d616 9ec 00 00 00 00 
3d61a 9ed 00 00 00 7C 
3d61e 9ee 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
3d622 9ef 60 60 60 00 
3d626 9f0 00 00 00 00 
3d62a 9f1 00 00 00 3E 
3d62e 9f2 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
3d632 9f3 06 00 00 00 
3d636 9f4 00 00 00 00 
3d63a 9f5 00 00 00 3C 
3d63e 9f6 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
3d642 9f7 3E 00 00 00 
3d646 9f8 00 00 00 00 
3d64a 9f9 00 0C 0C 3E 
3d64e 9fa 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
3d652 9fb 38 00 00 00 
3d656 9fc 00 00 00 00 
3d65a 9fd 00 00 00 66 
3d65e 9fe 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
3d662 9ff 7C 00 00 00 
3d666 a00 00 00 00 00 
3d66a a01 00 00 00 66 
3d66e a02 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3d672 a03 18 00 00 00 
3d676 a04 00 00 00 00 
3d67a a05 00 00 00 63 
3d67e a06 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
3d682 a07 36 00 00 00 
3d686 a08 00 00 00 00 
3d68a a09 00 00 00 63 
3d68e a0a 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
3d692 a0b 63 00 00 00 
3d696 a0c 00 00 00 00 
3d69a a0d 00 00 00 66 
3d69e a0e 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3d6a2 a0f 18 0C 06 00 
3d6a6 a10 00 00 00 00 
3d6aa a11 00 00 00 7E 
3d6ae a12 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
3d6b2 a13 7E 00 00 00 
3d6b6 a14 00 00 00 00 
3d6ba a15 70 18 18 18 
3d6be a16 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
3d6c2 a17 70 00 00 00 
3d6c6 a18 00 00 00 00 
3d6ca a19 18 18 18 18 
3d6ce a1a 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3d6d2 a1b 18 00 00 00 
3d6d6 a1c 00 00 00 00 
3d6da a1d 0E 18 18 18 
3d6de a1e 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
3d6e2 a1f 0E 00 00 00 
3d6e6 a20 00 00 00 00 
3d6ea a21 46 5D 31 00 
3d6ee a22 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
3d6f2 a23 00 00 00 00 
3d6f6 a24 00 00 00 00 | 	byte	$00[8]
3d6fa a25 C0 F0 3C 0F 
3d6fe a26 C3 F0 3C 0F 
3d702 a27 03 00 00 00 
3d706 a28 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3d70a a29 18 18 00 18 
3d70e a2a 18 18 18 18 
3d712 a2b 18 00 00 00 
3d716 a2c 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d71a a2d 18 18 7E 1B 
3d71e a2e 1B 7E 18 18 
3d722 a2f 00 00 00 00 
3d726 a30 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3d72a a31 78 CC 0C 0C 
3d72e a32 1E 0C 0C 06 
3d732 a33 7F 00 00 00 
3d736 a34 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3d73a a35 66 3C 66 66 
3d73e a36 3C 66 00 00 
3d742 a37 00 00 00 00 
3d746 a38 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d74a a39 C3 C3 66 3C 
3d74e a3a 18 7E 18 18 
3d752 a3b 18 00 00 00 
3d756 a3c 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d75a a3d 18 18 18 18 
3d75e a3e 00 18 18 18 
3d762 a3f 18 00 00 00 
3d766 a40 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d76a a41 3C 06 06 3C 
3d76e a42 66 66 66 3C 
3d772 a43 60 60 3C 00 
3d776 a44 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3d77a a45 66 66 00 00 
3d77e a46 00 00 00 00 
3d782 a47 00 00 00 00 
3d786 a48 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d78a a49 7E 81 B9 85 
3d78e a4a 85 B9 81 7E 
3d792 a4b 00 00 00 00 
3d796 a4c 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3d79a a4d 3C 33 33 7E 
3d79e a4e 00 7F 00 00 
3d7a2 a4f 00 00 00 00 
3d7a6 a50 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d7aa a51 00 00 CC 66 
3d7ae a52 33 66 CC 00 
3d7b2 a53 00 00 00 00 
3d7b6 a54 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d7ba a55 7E 60 60 00 
3d7be a56 00 00 00 00 
3d7c2 a57 00 00 00 00 
3d7c6 a58 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d7ca a59 7E 81 9D A5 
3d7ce a5a 9D A5 81 7E 
3d7d2 a5b 00 00 00 00 
3d7d6 a5c 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3d7da a5d 7E 00 00 00 
3d7de a5e 00 00 00 00 
3d7e2 a5f 00 00 00 00 
3d7e6 a60 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d7ea a61 3C 66 66 3C 
3d7ee a62 00 00 00 00 
3d7f2 a63 00 00 00 00 
3d7f6 a64 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d7fa a65 18 18 18 7E 
3d7fe a66 18 18 18 00 
3d802 a67 7E 00 00 00 
3d806 a68 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3d80a a69 1E 30 30 18 
3d80e a6a 0C 06 3E 00 
3d812 a6b 00 00 00 00 
3d816 a6c 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d81a a6d 1E 30 30 1C 
3d81e a6e 30 30 1E 00 
3d822 a6f 00 00 00 00 
3d826 a70 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d82a a71 30 18 0C 06 
3d82e a72 00 00 00 00 
3d832 a73 00 00 00 00 
3d836 a74 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d83a a75 00 00 00 66 
3d83e a76 66 66 66 66 
3d842 a77 FE 06 06 00 
3d846 a78 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3d84a a79 7C 5E 5E 5E 
3d84e a7a 5C 50 50 50 
3d852 a7b 50 50 00 00 
3d856 a7c 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3d85a a7d 00 00 00 18 
3d85e a7e 18 00 00 00 
3d862 a7f 00 00 00 00 
3d866 a80 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d86a a81 00 00 00 00 
3d86e a82 00 00 00 00 
3d872 a83 00          | 	byte	$00[9]
3d873 a83 30 18 00 00 
3d877 a84 00 00 00 18 
3d87b a85 1C 18 18 18 
3d87f a86 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3d883 a87 00 00 00 00 
3d887 a88 00 00 00    | 	byte	$00[7]
3d88a a89 3C 66 66 3C 
3d88e a8a 00 7E 00 00 
3d892 a8b 00 00 00 00 
3d896 a8c 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d89a a8d 00 00 33 66 
3d89e a8e CC 66 33 00 
3d8a2 a8f 00 00 00 00 
3d8a6 a90 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d8aa a91 02 63 32 1A 
3d8ae a92 4E 66 F3 40 
3d8b2 a93 40 00 00 00 
3d8b6 a94 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3d8ba a95 04 C6 64 34 
3d8be a96 7C 8C 46 23 
3d8c2 a97 F0 00 00 00 
3d8c6 a98 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3d8ca a99 03 C4 66 34 
3d8ce a9a 5B 6C F6 43 
3d8d2 a9b 40 00 00 00 
3d8d6 a9c 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3d8da a9d 18 18 00 18 
3d8de a9e 0C 06 06 66 
3d8e2 a9f 3C 00 00 00 
3d8e6 aa0 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3d8ea aa1 06 0C 3E 63 
3d8ee aa2 63 7F 63 63 
3d8f2 aa3 63 00 00 00 
3d8f6 aa4 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d8fa aa5 30 18 3E 63 
3d8fe aa6 63 7F 63 63 
3d902 aa7 63 00 00 00 
3d906 aa8 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d90a aa9 0C 33 3E 63 
3d90e aaa 63 63 7F 63 
3d912 aab 63 00 00 00 
3d916 aac 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d91a aad 4E 39 3E 63 
3d91e aae 63 7F 63 63 
3d922 aaf 63 00 00 00 
3d926 ab0 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d92a ab1 63 00 3E 63 
3d92e ab2 63 7F 63 63 
3d932 ab3 63 00 00 00 
3d936 ab4 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d93a ab5 1C 22 1C 36 
3d93e ab6 63 63 7F 63 
3d942 ab7 63 00 00 00 
3d946 ab8 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d94a ab9 F8 3C 3C 36 
3d94e aba F6 3F 33 33 
3d952 abb F3 00 00 00 
3d956 abc 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3d95a abd 78 0C 06 06 
3d95e abe 06 06 06 0C 
3d962 abf 78 30 18 00 
3d966 ac0 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3d96a ac1 0C 18 7E 06 
3d96e ac2 06 3E 06 06 
3d972 ac3 7E 00 00 00 
3d976 ac4 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d97a ac5 30 18 7E 06 
3d97e ac6 06 3E 06 06 
3d982 ac7 7E 00 00 00 
3d986 ac8 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d98a ac9 18 66 7E 06 
3d98e aca 06 3E 06 06 
3d992 acb 7E 00 00 00 
3d996 acc 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d99a acd 66 00 7E 06 
3d99e ace 06 3E 06 06 
3d9a2 acf 7E 00 00 00 
3d9a6 ad0 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d9aa ad1 0C 18 3C 18 
3d9ae ad2 18 18 18 18 
3d9b2 ad3 3C 00 00 00 
3d9b6 ad4 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d9ba ad5 30 18 3C 18 
3d9be ad6 18 18 18 18 
3d9c2 ad7 3C 00 00 00 
3d9c6 ad8 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d9ca ad9 18 66 3C 18 
3d9ce ada 18 18 18 18 
3d9d2 adb 3C 00 00 00 
3d9d6 adc 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d9da add 66 00 3C 18 
3d9de ade 18 18 18 18 
3d9e2 adf 3C 00 00 00 
3d9e6 ae0 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d9ea ae1 1E 36 66 66 
3d9ee ae2 6F 66 66 36 
3d9f2 ae3 1E 00 00 00 
3d9f6 ae4 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
3d9fa ae5 8E 73 67 6F 
3d9fe ae6 7B 73 63 63 
3da02 ae7 63 00 00 00 
3da06 ae8 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3da0a ae9 06 0C 3E 63 
3da0e aea 63 63 63 63 
3da12 aeb 3E 00 00 00 
3da16 aec 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da1a aed 30 18 3E 63 
3da1e aee 63 63 63 63 
3da22 aef 3E 00 00 00 
3da26 af0 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da2a af1 0C 33 3E 63 
3da2e af2 63 63 63 63 
3da32 af3 3E 00 00 00 
3da36 af4 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da3a af5 8E 71 3E 63 
3da3e af6 63 63 63 63 
3da42 af7 3E 00 00 00 
3da46 af8 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da4a af9 63 00 3E 63 
3da4e afa 63 63 63 63 
3da52 afb 3E 00 00 00 
3da56 afc 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da5a afd 00 00 63 36 
3da5e afe 1C 1C 36 63 
3da62 aff 00 00 00 00 
3da66 b00 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3da6a b01 BE 63 73 7B 
3da6e b02 6B 6F 67 63 
3da72 b03 3F 00 00 00 
3da76 b04 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3da7a b05 0C 18 63 63 
3da7e b06 63 63 63 63 
3da82 b07 3E 00 00 00 
3da86 b08 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da8a b09 18 0C 63 63 
3da8e b0a 63 63 63 63 
3da92 b0b 3E 00 00 00 
3da96 b0c 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da9a b0d 08 36 63 63 
3da9e b0e 63 63 63 63 
3daa2 b0f 3E 00 00 00 
3daa6 b10 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3daaa b11 63 00 63 63 
3daae b12 63 63 63 63 
3dab2 b13 3E 00 00 00 
3dab6 b14 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3daba b15 30 18 C3 66 
3dabe b16 3C 18 18 18 
3dac2 b17 18 00 00 00 
3dac6 b18 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3daca b19 03 03 3F 63 
3dace b1a 63 3F 03 03 
3dad2 b1b 03 00 00 00 
3dad6 b1c 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
3dada b1d 3C 66 66 66 
3dade b1e 36 66 66 66 
3dae2 b1f 36 06 06 00 
3dae6 b20 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
3daea b21 06 0C 00 3C 
3daee b22 60 7C 66 66 
3daf2 b23 7C 00 00 00 
3daf6 b24 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dafa b25 60 30 00 3C 
3dafe b26 60 7C 66 66 
3db02 b27 7C 00 00 00 
3db06 b28 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db0a b29 18 66 00 3C 
3db0e b2a 60 7C 66 66 
3db12 b2b 7C 00 00 00 
3db16 b2c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db1a b2d 8E 71 00 3C 
3db1e b2e 60 7C 66 66 
3db22 b2f 7C 00 00 00 
3db26 b30 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db2a b31 00 66 00 3C 
3db2e b32 60 7C 66 66 
3db32 b33 7C 00 00 00 
3db36 b34 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db3a b35 18 24 18 3C 
3db3e b36 60 7C 66 66 
3db42 b37 7C 00 00 00 
3db46 b38 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db4a b39 00 00 00 7E 
3db4e b3a D8 FE 1B 1B 
3db52 b3b EE 00 00 00 
3db56 b3c 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3db5a b3d 00 00 00 3C 
3db5e b3e 06 06 06 06 
3db62 b3f 3C 18 0C 00 
3db66 b40 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3db6a b41 06 0C 00 3C 
3db6e b42 66 7E 06 06 
3db72 b43 3C 00 00 00 
3db76 b44 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3db7a b45 60 30 00 3C 
3db7e b46 66 7E 06 06 
3db82 b47 3C 00 00 00 
3db86 b48 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3db8a b49 18 66 00 3C 
3db8e b4a 66 7E 06 06 
3db92 b4b 3C 00 00 00 
3db96 b4c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3db9a b4d 00 66 00 3C 
3db9e b4e 66 7E 06 06 
3dba2 b4f 3C 00 00 00 
3dba6 b50 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3dbaa b51 0C 18 00 18 
3dbae b52 18 18 18 18 
3dbb2 b53 30 00 00 00 
3dbb6 b54 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3dbba b55 18 0C 00 0C 
3dbbe b56 0C 0C 0C 0C 
3dbc2 b57 18 00 00 00 
3dbc6 b58 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3dbca b59 18 66 00 18 
3dbce b5a 18 18 18 18 
3dbd2 b5b 30 00 00 00 
3dbd6 b5c 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3dbda b5d 00 66 00 18 
3dbde b5e 18 18 18 18 
3dbe2 b5f 30 00 00 00 
3dbe6 b60 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3dbea b61 03 06 3F 18 
3dbee b62 3C 66 66 66 
3dbf2 b63 3C 00 00 00 
3dbf6 b64 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dbfa b65 8E 71 00 3E 
3dbfe b66 66 66 66 66 
3dc02 b67 66 00 00 00 
3dc06 b68 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3dc0a b69 06 0C 00 3C 
3dc0e b6a 66 66 66 66 
3dc12 b6b 3C 00 00 00 
3dc16 b6c 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc1a b6d 60 30 00 3C 
3dc1e b6e 66 66 66 66 
3dc22 b6f 3C 00 00 00 
3dc26 b70 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc2a b71 18 66 00 3C 
3dc2e b72 66 66 66 66 
3dc32 b73 3C 00 00 00 
3dc36 b74 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc3a b75 8E 71 00 3C 
3dc3e b76 66 66 66 66 
3dc42 b77 3C 00 00 00 
3dc46 b78 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc4a b79 00 66 00 3C 
3dc4e b7a 66 66 66 66 
3dc52 b7b 3C 00 00 00 
3dc56 b7c 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc5a b7d 00 18 18 00 
3dc5e b7e 7E 00 18 18 
3dc62 b7f 00 00 00 00 
3dc66 b80 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3dc6a b81 00 00 00 7E 
3dc6e b82 73 7B 6F 67 
3dc72 b83 3F 00 00 00 
3dc76 b84 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3dc7a b85 0C 18 00 66 
3dc7e b86 66 66 66 66 
3dc82 b87 7C 00 00 00 
3dc86 b88 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dc8a b89 30 18 00 66 
3dc8e b8a 66 66 66 66 
3dc92 b8b 7C 00 00 00 
3dc96 b8c 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dc9a b8d 18 66 00 66 
3dc9e b8e 66 66 66 66 
3dca2 b8f 7C 00 00 00 
3dca6 b90 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dcaa b91 00 66 00 66 
3dcae b92 66 66 66 66 
3dcb2 b93 7C 00 00 00 
3dcb6 b94 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dcba b95 30 18 00 66 
3dcbe b96 66 66 66 3C 
3dcc2 b97 18 0C 06 00 
3dcc6 b98 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3dcca b99 06 06 06 3E 
3dcce b9a 66 66 66 3E 
3dcd2 b9b 06 06 06 00 
3dcd6 b9c 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
3dcda b9d 00 66 00 66 
3dcde b9e 66 66 66 3C 
3dce2 b9f 18 0C 06 00 
3dce6 ba0 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3dcea ba1 00 7E 66 66 
3dcee ba2 66 66 66 66 
3dcf2 ba3 66 7E 00 00 
3dcf6 ba4 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
3dcfa ba5 00 00 00 00 
      ...             
3df02 c27 00 00 00 00 
3df06 c28 00 00       | 	byte	$00[526]
3df08 c29 00 00 00 00 
3df0c c2a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3df0d c2a 80 00 00 00 
3df11 c2b 00 80 00 00 
3df15 c2c 80 80 00 00 
3df19 c2d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3df1d c2e 80 00 80 00 
3df21 c2f 00 40 80 00 
3df25 c30 AA AA AA 00 
3df29 c31 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3df2d c32 FF 00 00 00 
3df31 c33 00 FF 00 00 
3df35 c34 FF FF 00 00 
3df39 c35 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3df3d c36 FF 00 FF 00 
3df41 c37 00 FF FF 00 
3df45 c38 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3df48 c39 00 00 00 00 
3df4c c3a 00          | ataripalette   file "ataripalettep2.def"
3df4d c3a 11 11 11 00 
3df51 c3b 22 22 22 00 
3df55 c3c 33 33 33 00 
3df59 c3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3df5d c3e 55 55 55 00 
3df61 c3f 66 66 66 00 
3df65 c40 77 77 77 00 
3df69 c41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3df6d c42 99 99 99 00 
3df71 c43 AA AA AA 00 
3df75 c44 BB BB BB 00 
3df79 c45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3df7d c46 DD DD DD 00 
3df81 c47 EE EE EE 00 
3df85 c48 FF FF FF 00 
3df89 c49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3df8d c4a 00 14 40 00 
3df91 c4b 00 1E 60 00 
3df95 c4c 00 28 80 00 
3df99 c4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3df9d c4e 00 3C BF 00 
3dfa1 c4f 00 46 DF 00 
3dfa5 c50 00 50 FF 00 
3dfa9 c51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3dfad c52 39 77 FF 00 
3dfb1 c53 55 8A FF 00 
3dfb5 c54 71 9E FF 00 
3dfb9 c55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3dfbd c56 AA C5 FF 00 
3dfc1 c57 C6 D8 FF 00 
3dfc5 c58 E3 EC FF 00 
3dfc9 c59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3dfcd c5a 00 00 40 00 
3dfd1 c5b 00 00 60 00 
3dfd5 c5c 00 00 80 00 
3dfd9 c5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3dfdd c5e 00 00 BF 00 
3dfe1 c5f 00 00 DF 00 
3dfe5 c60 00 00 FF 00 
3dfe9 c61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3dfed c62 39 39 FF 00 
3dff1 c63 55 55 FF 00 
3dff5 c64 71 71 FF 00 
3dff9 c65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3dffd c66 AA AA FF 00 
3e001 c67 C6 C6 FF 00 
3e005 c68 E3 E3 FF 00 
3e009 c69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3e00d c6a 20 00 40 00 
3e011 c6b 30 00 60 00 
3e015 c6c 40 00 80 00 
3e019 c6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3e01d c6e 60 00 BF 00 
3e021 c6f 70 00 DF 00 
3e025 c70 80 00 FF 00 
3e029 c71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3e02d c72 9C 39 FF 00 
3e031 c73 AA 55 FF 00 
3e035 c74 B8 71 FF 00 
3e039 c75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3e03d c76 D5 AA FF 00 
3e041 c77 E3 C6 FF 00 
3e045 c78 F1 E3 FF 00 
3e049 c79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3e04d c7a 40 00 40 00 
3e051 c7b 60 00 60 00 
3e055 c7c 80 00 80 00 
3e059 c7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3e05d c7e BF 00 BF 00 
3e061 c7f DF 00 DF 00 
3e065 c80 FF 00 FF 00 
3e069 c81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3e06d c82 FF 39 FF 00 
3e071 c83 FF 55 FF 00 
3e075 c84 FF 71 FF 00 
3e079 c85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3e07d c86 FF AA FF 00 
3e081 c87 FF C6 FF 00 
3e085 c88 FF E3 FF 00 
3e089 c89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3e08d c8a 40 00 20 00 
3e091 c8b 60 00 30 00 
3e095 c8c 80 00 40 00 
3e099 c8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3e09d c8e BF 00 60 00 
3e0a1 c8f DF 00 70 00 
3e0a5 c90 FF 00 80 00 
3e0a9 c91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3e0ad c92 FF 39 9C 00 
3e0b1 c93 FF 55 AA 00 
3e0b5 c94 FF 71 B8 00 
3e0b9 c95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3e0bd c96 FF AA D5 00 
3e0c1 c97 FF C6 E3 00 
3e0c5 c98 FF E3 F1 00 
3e0c9 c99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3e0cd c9a 40 00 00 00 
3e0d1 c9b 60 00 00 00 
3e0d5 c9c 80 00 00 00 
3e0d9 c9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3e0dd c9e BF 00 00 00 
3e0e1 c9f DF 00 00 00 
3e0e5 ca0 FF 00 00 00 
3e0e9 ca1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3e0ed ca2 FF 39 39 00 
3e0f1 ca3 FF 55 55 00 
3e0f5 ca4 FF 71 71 00 
3e0f9 ca5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3e0fd ca6 FF AA AA 00 
3e101 ca7 FF C6 C6 00 
3e105 ca8 FF E3 E3 00 
3e109 ca9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3e10d caa 40 10 00 00 
3e111 cab 60 18 00 00 
3e115 cac 80 20 00 00 
3e119 cad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3e11d cae BF 30 00 00 
3e121 caf DF 38 00 00 
3e125 cb0 FF 40 00 00 
3e129 cb1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3e12d cb2 FF 6A 39 00 
3e131 cb3 FF 80 55 00 
3e135 cb4 FF 95 71 00 
3e139 cb5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3e13d cb6 FF BF AA 00 
3e141 cb7 FF D5 C6 00 
3e145 cb8 FF EA E3 00 
3e149 cb9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3e14d cba 40 20 00 00 
3e151 cbb 60 30 00 00 
3e155 cbc 80 40 00 00 
3e159 cbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3e15d cbe BF 60 00 00 
3e161 cbf DF 70 00 00 
3e165 cc0 FF 80 00 00 
3e169 cc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3e16d cc2 FF 9C 39 00 
3e171 cc3 FF AA 55 00 
3e175 cc4 FF B8 71 00 
3e179 cc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3e17d cc6 FF D5 AA 00 
3e181 cc7 FF E3 C6 00 
3e185 cc8 FF F1 E3 00 
3e189 cc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3e18d cca 40 30 00 00 
3e191 ccb 60 48 00 00 
3e195 ccc 80 60 00 00 
3e199 ccd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3e19d cce BF 90 00 00 
3e1a1 ccf DF A8 00 00 
3e1a5 cd0 FF C0 00 00 
3e1a9 cd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3e1ad cd2 FF CE 39 00 
3e1b1 cd3 FF D5 55 00 
3e1b5 cd4 FF DC 71 00 
3e1b9 cd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3e1bd cd6 FF EA AA 00 
3e1c1 cd7 FF F1 C6 00 
3e1c5 cd8 FF F8 E3 00 
3e1c9 cd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3e1cd cda 30 40 00 00 
3e1d1 cdb 48 60 00 00 
3e1d5 cdc 60 80 00 00 
3e1d9 cdd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3e1dd cde 90 BF 00 00 
3e1e1 cdf A8 DF 00 00 
3e1e5 ce0 C0 FF 00 00 
3e1e9 ce1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3e1ed ce2 CE FF 39 00 
3e1f1 ce3 D5 FF 55 00 
3e1f5 ce4 DC FF 71 00 
3e1f9 ce5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3e1fd ce6 EA FF AA 00 
3e201 ce7 F1 FF C6 00 
3e205 ce8 F8 FF E3 00 
3e209 ce9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3e20d cea 00 40 00 00 
3e211 ceb 00 60 00 00 
3e215 cec 00 80 00 00 
3e219 ced 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3e21d cee 00 BF 00 00 
3e221 cef 00 DF 00 00 
3e225 cf0 00 FF 00 00 
3e229 cf1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3e22d cf2 39 FF 39 00 
3e231 cf3 55 FF 55 00 
3e235 cf4 71 FF 71 00 
3e239 cf5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3e23d cf6 AA FF AA 00 
3e241 cf7 C6 FF C6 00 
3e245 cf8 E3 FF E3 00 
3e249 cf9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3e24d cfa 00 40 14 00 
3e251 cfb 00 60 1E 00 
3e255 cfc 00 80 28 00 
3e259 cfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3e25d cfe 00 BF 3C 00 
3e261 cff 00 DF 46 00 
3e265 d00 00 FF 50 00 
3e269 d01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3e26d d02 39 FF 77 00 
3e271 d03 55 FF 8A 00 
3e275 d04 71 FF 9E 00 
3e279 d05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3e27d d06 AA FF C5 00 
3e281 d07 C6 FF D8 00 
3e285 d08 E3 FF EC 00 
3e289 d09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3e28d d0a 00 40 28 00 
3e291 d0b 00 60 3C 00 
3e295 d0c 00 80 50 00 
3e299 d0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3e29d d0e 00 BF 78 00 
3e2a1 d0f 00 DF 8C 00 
3e2a5 d10 00 FF A0 00 
3e2a9 d11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3e2ad d12 39 FF B5 00 
3e2b1 d13 55 FF C0 00 
3e2b5 d14 71 FF CA 00 
3e2b9 d15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3e2bd d16 AA FF DF 00 
3e2c1 d17 C6 FF EA 00 
3e2c5 d18 E3 FF F4 00 
3e2c9 d19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3e2cd d1a 00 40 40 00 
3e2d1 d1b 00 60 60 00 
3e2d5 d1c 00 80 80 00 
3e2d9 d1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3e2dd d1e 00 BF BF 00 
3e2e1 d1f 00 DF DF 00 
3e2e5 d20 00 FF FF 00 
3e2e9 d21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3e2ed d22 39 FF FF 00 
3e2f1 d23 55 FF FF 00 
3e2f5 d24 71 FF FF 00 
3e2f9 d25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3e2fd d26 AA FF FF 00 
3e301 d27 C6 FF FF 00 
3e305 d28 E3 FF FF 00 
3e309 d29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3e30d d2a 00 28 40 00 
3e311 d2b 00 3C 60 00 
3e315 d2c 00 50 80 00 
3e319 d2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3e31d d2e 00 78 BF 00 
3e321 d2f 00 8C DF 00 
3e325 d30 00 A0 FF 00 
3e329 d31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3e32d d32 39 B5 FF 00 
3e331 d33 55 C0 FF 00 
3e335 d34 71 CA FF 00 
3e339 d35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3e33d d36 AA DF FF 00 
3e341 d37 C6 EA FF 00 
3e345 d38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3e348 d39 00 00 00 00 
3e34c d3a 00          | ataripalette2  file "ataripalettep2.def"
3e34d d3a 11 11 11 00 
3e351 d3b 22 22 22 00 
3e355 d3c 33 33 33 00 
3e359 d3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3e35d d3e 55 55 55 00 
3e361 d3f 66 66 66 00 
3e365 d40 77 77 77 00 
3e369 d41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3e36d d42 99 99 99 00 
3e371 d43 AA AA AA 00 
3e375 d44 BB BB BB 00 
3e379 d45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3e37d d46 DD DD DD 00 
3e381 d47 EE EE EE 00 
3e385 d48 FF FF FF 00 
3e389 d49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3e38d d4a 00 14 40 00 
3e391 d4b 00 1E 60 00 
3e395 d4c 00 28 80 00 
3e399 d4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3e39d d4e 00 3C BF 00 
3e3a1 d4f 00 46 DF 00 
3e3a5 d50 00 50 FF 00 
3e3a9 d51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3e3ad d52 39 77 FF 00 
3e3b1 d53 55 8A FF 00 
3e3b5 d54 71 9E FF 00 
3e3b9 d55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3e3bd d56 AA C5 FF 00 
3e3c1 d57 C6 D8 FF 00 
3e3c5 d58 E3 EC FF 00 
3e3c9 d59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3e3cd d5a 00 00 40 00 
3e3d1 d5b 00 00 60 00 
3e3d5 d5c 00 00 80 00 
3e3d9 d5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3e3dd d5e 00 00 BF 00 
3e3e1 d5f 00 00 DF 00 
3e3e5 d60 00 00 FF 00 
3e3e9 d61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3e3ed d62 39 39 FF 00 
3e3f1 d63 55 55 FF 00 
3e3f5 d64 71 71 FF 00 
3e3f9 d65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3e3fd d66 AA AA FF 00 
3e401 d67 C6 C6 FF 00 
3e405 d68 E3 E3 FF 00 
3e409 d69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3e40d d6a 20 00 40 00 
3e411 d6b 30 00 60 00 
3e415 d6c 40 00 80 00 
3e419 d6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3e41d d6e 60 00 BF 00 
3e421 d6f 70 00 DF 00 
3e425 d70 80 00 FF 00 
3e429 d71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3e42d d72 9C 39 FF 00 
3e431 d73 AA 55 FF 00 
3e435 d74 B8 71 FF 00 
3e439 d75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3e43d d76 D5 AA FF 00 
3e441 d77 E3 C6 FF 00 
3e445 d78 F1 E3 FF 00 
3e449 d79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3e44d d7a 40 00 40 00 
3e451 d7b 60 00 60 00 
3e455 d7c 80 00 80 00 
3e459 d7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3e45d d7e BF 00 BF 00 
3e461 d7f DF 00 DF 00 
3e465 d80 FF 00 FF 00 
3e469 d81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3e46d d82 FF 39 FF 00 
3e471 d83 FF 55 FF 00 
3e475 d84 FF 71 FF 00 
3e479 d85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3e47d d86 FF AA FF 00 
3e481 d87 FF C6 FF 00 
3e485 d88 FF E3 FF 00 
3e489 d89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3e48d d8a 40 00 20 00 
3e491 d8b 60 00 30 00 
3e495 d8c 80 00 40 00 
3e499 d8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3e49d d8e BF 00 60 00 
3e4a1 d8f DF 00 70 00 
3e4a5 d90 FF 00 80 00 
3e4a9 d91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3e4ad d92 FF 39 9C 00 
3e4b1 d93 FF 55 AA 00 
3e4b5 d94 FF 71 B8 00 
3e4b9 d95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3e4bd d96 FF AA D5 00 
3e4c1 d97 FF C6 E3 00 
3e4c5 d98 FF E3 F1 00 
3e4c9 d99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3e4cd d9a 40 00 00 00 
3e4d1 d9b 60 00 00 00 
3e4d5 d9c 80 00 00 00 
3e4d9 d9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3e4dd d9e BF 00 00 00 
3e4e1 d9f DF 00 00 00 
3e4e5 da0 FF 00 00 00 
3e4e9 da1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3e4ed da2 FF 39 39 00 
3e4f1 da3 FF 55 55 00 
3e4f5 da4 FF 71 71 00 
3e4f9 da5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3e4fd da6 FF AA AA 00 
3e501 da7 FF C6 C6 00 
3e505 da8 FF E3 E3 00 
3e509 da9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3e50d daa 40 10 00 00 
3e511 dab 60 18 00 00 
3e515 dac 80 20 00 00 
3e519 dad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3e51d dae BF 30 00 00 
3e521 daf DF 38 00 00 
3e525 db0 FF 40 00 00 
3e529 db1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3e52d db2 FF 6A 39 00 
3e531 db3 FF 80 55 00 
3e535 db4 FF 95 71 00 
3e539 db5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3e53d db6 FF BF AA 00 
3e541 db7 FF D5 C6 00 
3e545 db8 FF EA E3 00 
3e549 db9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3e54d dba 40 20 00 00 
3e551 dbb 60 30 00 00 
3e555 dbc 80 40 00 00 
3e559 dbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3e55d dbe BF 60 00 00 
3e561 dbf DF 70 00 00 
3e565 dc0 FF 80 00 00 
3e569 dc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3e56d dc2 FF 9C 39 00 
3e571 dc3 FF AA 55 00 
3e575 dc4 FF B8 71 00 
3e579 dc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3e57d dc6 FF D5 AA 00 
3e581 dc7 FF E3 C6 00 
3e585 dc8 FF F1 E3 00 
3e589 dc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3e58d dca 40 30 00 00 
3e591 dcb 60 48 00 00 
3e595 dcc 80 60 00 00 
3e599 dcd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3e59d dce BF 90 00 00 
3e5a1 dcf DF A8 00 00 
3e5a5 dd0 FF C0 00 00 
3e5a9 dd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3e5ad dd2 FF CE 39 00 
3e5b1 dd3 FF D5 55 00 
3e5b5 dd4 FF DC 71 00 
3e5b9 dd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3e5bd dd6 FF EA AA 00 
3e5c1 dd7 FF F1 C6 00 
3e5c5 dd8 FF F8 E3 00 
3e5c9 dd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3e5cd dda 30 40 00 00 
3e5d1 ddb 48 60 00 00 
3e5d5 ddc 60 80 00 00 
3e5d9 ddd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3e5dd dde 90 BF 00 00 
3e5e1 ddf A8 DF 00 00 
3e5e5 de0 C0 FF 00 00 
3e5e9 de1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3e5ed de2 CE FF 39 00 
3e5f1 de3 D5 FF 55 00 
3e5f5 de4 DC FF 71 00 
3e5f9 de5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3e5fd de6 EA FF AA 00 
3e601 de7 F1 FF C6 00 
3e605 de8 F8 FF E3 00 
3e609 de9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3e60d dea 00 40 00 00 
3e611 deb 00 60 00 00 
3e615 dec 00 80 00 00 
3e619 ded 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3e61d dee 00 BF 00 00 
3e621 def 00 DF 00 00 
3e625 df0 00 FF 00 00 
3e629 df1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3e62d df2 39 FF 39 00 
3e631 df3 55 FF 55 00 
3e635 df4 71 FF 71 00 
3e639 df5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3e63d df6 AA FF AA 00 
3e641 df7 C6 FF C6 00 
3e645 df8 E3 FF E3 00 
3e649 df9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3e64d dfa 00 40 14 00 
3e651 dfb 00 60 1E 00 
3e655 dfc 00 80 28 00 
3e659 dfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3e65d dfe 00 BF 3C 00 
3e661 dff 00 DF 46 00 
3e665 e00 00 FF 50 00 
3e669 e01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3e66d e02 39 FF 77 00 
3e671 e03 55 FF 8A 00 
3e675 e04 71 FF 9E 00 
3e679 e05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3e67d e06 AA FF C5 00 
3e681 e07 C6 FF D8 00 
3e685 e08 E3 FF EC 00 
3e689 e09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3e68d e0a 00 40 28 00 
3e691 e0b 00 60 3C 00 
3e695 e0c 00 80 50 00 
3e699 e0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3e69d e0e 00 BF 78 00 
3e6a1 e0f 00 DF 8C 00 
3e6a5 e10 00 FF A0 00 
3e6a9 e11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3e6ad e12 39 FF B5 00 
3e6b1 e13 55 FF C0 00 
3e6b5 e14 71 FF CA 00 
3e6b9 e15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3e6bd e16 AA FF DF 00 
3e6c1 e17 C6 FF EA 00 
3e6c5 e18 E3 FF F4 00 
3e6c9 e19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3e6cd e1a 00 40 40 00 
3e6d1 e1b 00 60 60 00 
3e6d5 e1c 00 80 80 00 
3e6d9 e1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3e6dd e1e 00 BF BF 00 
3e6e1 e1f 00 DF DF 00 
3e6e5 e20 00 FF FF 00 
3e6e9 e21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3e6ed e22 39 FF FF 00 
3e6f1 e23 55 FF FF 00 
3e6f5 e24 71 FF FF 00 
3e6f9 e25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3e6fd e26 AA FF FF 00 
3e701 e27 C6 FF FF 00 
3e705 e28 E3 FF FF 00 
3e709 e29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3e70d e2a 00 28 40 00 
3e711 e2b 00 3C 60 00 
3e715 e2c 00 50 80 00 
3e719 e2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3e71d e2e 00 78 BF 00 
3e721 e2f 00 8C DF 00 
3e725 e30 00 A0 FF 00 
3e729 e31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3e72d e32 39 B5 FF 00 
3e731 e33 55 C0 FF 00 
3e735 e34 71 CA FF 00 
3e739 e35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3e73d e36 AA DF FF 00 
3e741 e37 C6 EA FF 00 
3e745 e38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3e748 e39             | 
3e748 e39             | '**********************************************************************************
3e748 e39             | '
3e748 e39             | '        Timings and colors definitions
3e748 e39             | '
3e748 e39             | '**********************************************************************************
3e748 e39             | 
3e748 e39             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3e748 e39 08 00 00 00 
3e74c e3a 3C 00 00 00 
3e750 e3b 08 00 00 00 
3e754 e3c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3e758 e3d 07 00 00 00 
3e75c e3e 04 00 00 00 
3e760 e3f 01 00 00 00 
3e764 e40 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3e768 e41 58 02 00 00 
3e76c e42 20 9E 4B 14 
3e770 e43 FB A8 9E 01 
3e774 e44 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3e778 e45 00 00 00 00 
3e77c e46 C0 00 00 00 
3e780 e47 00 00 00 00 
3e784 e48 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e788 e49             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3e788 e49 00 75 C7 97 
3e78c e4a 27 47 F6 0A 
3e790 e4b 05 79 CB 9B 
3e794 e4c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3e798 e4d             | 
3e798 e4d             | ''--------  Initialization  ----------------------------------------------------------------
3e798 e4d             | 
3e798 e4d 28 0C 64 FD | hdmi            setq    #6
3e79c e4e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3e7a0 e4f 28 10 64 FD |                 setq    #8
3e7a4 e50 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3e7a8 e51             | 
3e7a8 e51 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3e7ac e52 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3e7b0 e53 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3e7b4 e54 D6 C6 01 F1 |                 add     t1,hbase
3e7b8 e55 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3e7bc e56 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3e7c0 e57 7B 0B 80 5F 
3e7c4 e58 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3e7c8 e59 66 66 86 FF 
3e7cc e5a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3e7d0 e5b             | '
3e7d0 e5b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3e7d4 e5c 11 C6 65 F0 |                 shl 	t1,#17                             '
3e7d8 e5d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3e7dc e5e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3e7e0 e5f             | 
3e7e0 e5f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3e7e4 e60 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3e7e8 e61 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3e7ec e62             | 
3e7ec e62             | ''--------  frame rendering main loop  ---------------------------------------------------
3e7ec e62             | 
3e7ec e62 28 06 64 FD | p101            setq 	#3
3e7f0 e63 00 A5 05 FB | 		rdlong  vblankptr,ptra
3e7f4 e64 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3e7f8 e65 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3e7fc e66 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3e800 e67 00 A0 05 F6 |                 mov     dlinum, #0
3e804 e68 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3e808 e69 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3e80c e6a             | 
3e80c e6a             | 
3e80c e6a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3e810 e6b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3e814 e6c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3e818 e6d             |                 
3e818 e6d             | 
3e818 e6d             | 
3e818 e6d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3e818 e6d             |   
3e818 e6d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3e81c e6e 29 FE 65 3D |          if_nc  setq2   #255
3e820 e6f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3e824 e70             | 
3e824 e70             | '' -----   up porch (before the picture)
3e824 e70             | 
3e824 e70 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3e828 e71 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3e82c e72 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3e830 e73 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3e834 e74             |  
3e834 e74             |    
3e834 e74             |  
3e834 e74 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3e838 e75 E2 8C B1 FC |                 xzero   m_sn,hsync1
3e83c e76 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3e840 e77 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3e844 e78 E1 90 C1 FC |                 xcont   m_vi,hsync0
3e848 e79 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3e84c e7a             | 
3e84c e7a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3e850 e7b E2 8C B1 FC |                 xzero   m_sn,hsync1
3e854 e7c 48 00 B0 FD | 		call    #dli
3e858 e7d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3e85c e7e E1 90 C1 FC |                 xcont   m_vi,hsync0
3e860 e7f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3e864 e80             |                 	
3e864 e80             |                 
3e864 e80             | 
3e864 e80             |  
3e864 e80             | '' ------- the main screen drawing starts here
3e864 e80             | 
3e864 e80 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3e868 e81 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3e86c e82 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3e870 e83 E1 8E C1 FC |                 xcont   m_bv,hsync0
3e874 e84 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3e878 e85 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3e87c e86 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3e880 e87             |               
3e880 e87             | 
3e880 e87 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3e884 e88 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3e888 e89             | 
3e888 e89             | ' ---------------- All visible lines displayed now, start vblank  
3e888 e89             | 
3e888 e89 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3e88c e8a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3e890 e8b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3e894 e8c C3 C4 01 F6 |                 mov     hsync1,sync_223
3e898 e8d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3e89c e8e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3e8a0 e8f             | 
3e8a0 e8f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3e8a0 e8f             | 
3e8a0 e8f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3e8a0 e8f             | 
3e8a0 e8f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3e8a4 e90             | 
3e8a4 e90 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3e8a8 e91 04 B8 05 A1 |     if_z        add     dlptr2,#4
3e8ac e92 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3e8b0 e93             | 
3e8b0 e93 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3e8b4 e94 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3e8b8 e95 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3e8bc e96 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3e8c0 e97 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3e8c4 e98             | 
3e8c4 e98 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3e8c8 e99 DD C6 41 F8 |                 getnib  t1,dl,#0
3e8cc e9a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3e8d0 e9b 70 00 90 AD |     if_z        jmp     #preload
3e8d4 e9c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3e8d8 e9d 94 00 90 AD |     if_z        jmp     #preload2
3e8dc e9e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3e8e0 e9f 0C 00 90 AD |     if_z        jmp     #p390
3e8e4 ea0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3e8e8 ea1 28 00 90 AD |     if_z        jmp     #p391  
3e8ec ea2             | 
3e8ec ea2 2D 00 64 FD | p308            ret
3e8f0 ea3             |    
3e8f0 ea3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3e8f4 ea4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3e8f8 ea5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3e8fc ea6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3e900 ea7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3e904 ea8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3e908 ea9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3e90c eaa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3e910 eab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3e914 eac             |  
3e914 eac             | '' --------  Reload palette. To do 
3e914 eac             | 
3e914 eac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3e918 ead 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3e91c eae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3e920 eaf 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3e924 eb0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3e928 eb1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3e92c eb2 70 FF 9F FD |         	jmp     #dli                
3e930 eb3             |       
3e930 eb3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3e930 eb3             | 
3e930 eb3             | 
3e930 eb3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3e930 eb3             | 
3e930 eb3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3e934 eb4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3e938 eb5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3e93c eb6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3e940 eb7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3e944 eb8             |         
3e944 eb8             | '' -------------- Preload a line from PSRAM        
3e944 eb8             |         
3e944 eb8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3e948 eb9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3e94c eba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3e950 ebb DE B4 01 F6 |                 mov     buf1,buf1c
3e954 ebc 03 A0 05 F7 |                 incmod  dlinum,#3
3e958 ebd             | 
3e958 ebd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3e95c ebe 32 B7 01 F6 |                 mov     buf2,a1024
3e960 ebf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3e964 ec0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3e968 ec1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3e96c ec2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3e970 ec3             |  
3e970 ec3             |  
3e970 ec3             | preload2      '  incmod  dlinum,#3
3e970 ec3 04 C0 45 F0 |                 shr 	framebuf2,#4
3e974 ec4 ED B2 01 F6 |                 mov 	cmd,affffffff
3e978 ec5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3e97c ec6 28 02 64 FD |                 setq	#1
3e980 ec7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3e984 ec8             |                 
3e984 ec8             | 
3e984 ec8             | '' -------------- Draw sprites
3e984 ec8             | 
3e984 ec8 CF 5C 02 F6 | sprite          mov t8,frames
3e988 ec9 10 5C 0E F5 | 		and t8,#16 wz
3e98c eca 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3e990 ecb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3e994 ecc             | 		
3e994 ecc             | 
3e994 ecc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3e998 ecd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3e99c ece EF 56 96 F9 |                 alts    t5,#sprite1xy
3e9a0 ecf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3e9a4 ed0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3e9a8 ed1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3e9ac ed2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3e9b0 ed3 0F 4C 66 F7 |                 signx	sprite_x,#15
3e9b4 ed4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3e9b8 ed5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3e9bc ed6 01 52 86 F1 |                 sub     sprite_h,#1
3e9c0 ed7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3e9c4 ed8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3e9c8 ed9             | 
3e9c8 ed9             | 
3e9c8 ed9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3e9cc eda BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3e9d0 edb 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3e9d4 edc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3e9d8 edd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3e9dc ede AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3e9e0 edf 00 5E 06 F6 |                 mov 	t9,#0
3e9e4 ee0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3e9e8 ee1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3e9ec ee2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3e9f0 ee3             |      
3e9f0 ee3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3e9f4 ee4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3e9f8 ee5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3e9fc ee6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3ea00 ee7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3ea04 ee8             |                 
3ea04 ee8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3ea08 ee9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3ea0c eea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3ea10 eeb             |   		
3ea10 eeb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3ea14 eec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3ea18 eed             | 
3ea18 eed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3ea1c eee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3ea20 eef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3ea24 ef0             |  
3ea24 ef0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3ea28 ef1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3ea2c ef2 10 00 90 CD |      if_c 	jmp     #p899		
3ea30 ef3             | 	
3ea30 ef3             | 	
3ea30 ef3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3ea34 ef4 28 CD 01 F1 | 		add	t4,sprite_w
3ea38 ef5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3ea3c ef6             | 
3ea3c ef6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3ea40 ef7             | 
3ea40 ef7 28 59 02 F6 | p899		mov 	t6,sprite_w
3ea44 ef8 01 58 86 F1 | 	 	sub     t6,#1
3ea48 ef9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3ea4c efa             | 
3ea4c efa 28 58 62 FD |                 setq   	t6
3ea50 efb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3ea54 efc 28 5D 02 F6 |                 mov t8,sprite_w
3ea58 efd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3ea5c efe 24 00 90 AD |         if_z    jmp #p898
3ea60 eff             |          
3ea60 eff             |         
3ea60 eff 70 5F 06 F6 |                 mov  t9,#368
3ea64 f00 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3ea68 f01             | 
3ea68 f01 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3ea6c f02 08 5C 06 FA |                 mul t8,#8				' bits to shr
3ea70 f03 FF FF 7F FF 
3ea74 f04 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3ea78 f05 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3ea7c f06 00 5E 8E F9 |                 altd t9,#0				' and mask 
3ea80 f07 2D 01 00 F5 |                 and 0-0, t7
3ea84 f08             |                
3ea84 f08             | 
3ea84 f08 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3ea88 f09 E5 E0 7A FA |                 wmlong 368,t3				
3ea8c f0a             |                 
3ea8c f0a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3ea90 f0b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3ea94 f0c 2D 00 64 FD |                 ret
3ea98 f0d             | 	
3ea98 f0d             | 	
3ea98 f0d             |                
3ea98 f0d             |  
3ea98 f0d             | '' -------------- Graphics line ------------------------------------------------------------
3ea98 f0d             |  
3ea98 f0d             | 
3ea98 f0d             | '' consts and vars
3ea98 f0d             | 
3ea98 f0d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3ea9c f0e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3eaa0 f0f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3eaa4 f10 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3eaa8 f11             | 
3eaa8 f11 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3eaac f12             | 
3eaac f12             | '------ these longs will be set by setmode function
3eaac f12             | 
3eaac f12 00 00 00 00 | m_bs            long    0        'blanks before sync
3eab0 f13 00 00 00 00 | m_sn            long    0        'sync
3eab4 f14 00 00 00 00 | m_bv            long    0        'blanks before visible
3eab8 f15 00 00 00 00 | m_vi            long    0        'visible pixels #
3eabc f16             | 'm_border        long    0        'left/right borders
3eabc f16 00 00 00 00 | i_upporch       long    0        'up porch lines
3eac0 f17 00 00 00 00 | i_vsync         long    0        'vsync lines
3eac4 f18 00 00 00 00 | i_downporch     long    0        'down porch lines
3eac8 f19 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3eacc f1a 00 00 00 00 | i_totalvis      long    0
3ead0 f1b             | 
3ead0 f1b             | '-------------------------------------
3ead0 f1b             |  
3ead0 f1b 00 00 00 00 | linenum         long    0
3ead4 f1c 00 00 00 00 | frames          long    0
3ead8 f1d 00 00 00 00 | dlinum long 0
3eadc f1e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3eae0 f1f             | 
3eae0 f1f 00 00 00 00 | vblankptr       long    0
3eae4 f20 00 00 00 00 | modeptr         long    0
3eae8 f21 00 00 00 00 | paletteptr      long    0
3eaec f22 00 00 00 00 | dlptr           long    0
3eaf0 f23 01 00 00 00 | hbase           long    1
3eaf4 f24 00 00 00 00 | mailbox         long    0
3eaf8 f25 00 00 00 00 | spriteptr          long 0
3eafc f26             | 
3eafc f26 00 00 00 00 | cmd             long    0
3eb00 f27 00 B0 07 00 | buf1            long    $80000-16384-4096
3eb04 f28 00 04 00 00 | buf2            long    1024
3eb08 f29 01 00 00 00 | dlptr2          long    1
3eb0c f2a 01 00 00 00 | dl              long    1
3eb10 f2b             | 
3eb10 f2b 00 00 00 00 | buf1c long 0
3eb14 f2c 00 B0 07 00 | buf1d            long    $80000-16384-4096
3eb18 f2d 01 00 00 00 | framebuf2       long    1
3eb1c f2e 01 00 00 00 | hsync0          long    1
3eb20 f2f 01 00 00 00 | hsync1          long    1
3eb24 f30             | 
3eb24 f30 01 00 00 00 | t1              long    1
3eb28 f31 00 00 00 00 | t2 long 0
3eb2c f32 00 00 00 00 | t3 long 0
3eb30 f33 00 00 00 00 | t4 long 0
3eb34 f34             | 
3eb34 f34 00 00 00 00 | rcnt            long    0  'dl repeat count
3eb38 f35 00 00 00 00 | rcnt2           long    0
3eb3c f36 00 00 00 00 | rcnt2a          long    0
3eb40 f37 00 00 00 00 | roffset         long    0
3eb44 f38 00 00 00 00 | rdl             long    0  'dl repeat line
3eb48 f39 00 00 00 00 | dlc             long    0  'dl command
3eb4c f3a             | 
3eb4c f3a FF FF FF FF | affffffff       long    $ffffffff
3eb50 f3b 00 00 00 00 | sprite1pointer long 0
3eb54 f3c 00 00 00 00 | sprite1xy      long 0
3eb58 f3d 00 00 00 00 | sprite1wh      long 0
3eb5c f3e 00 00 00 00 | sprite2pointer long 0
3eb60 f3f 00 00 00 00 | sprite2xy      long 0
3eb64 f40 00 00 00 00 | sprite2wh      long 0
3eb68 f41 00 00 00 00 | sprite3pointer long 0
3eb6c f42 00 00 00 00 | sprite3xy      long 0
3eb70 f43 00 00 00 00 | sprite3wh      long 0
3eb74 f44 00 00 00 00 | sprite4pointer long 0
3eb78 f45 00 00 00 00 | sprite4xy      long 0
3eb7c f46 00 00 00 00 | sprite4wh      long 0
3eb80 f47 00 00 00 00 | sprite5pointer long 0
3eb84 f48 00 00 00 00 | sprite5xy      long 0
3eb88 f49 00 00 00 00 | sprite5wh      long 0
3eb8c f4a 00 00 00 00 | sprite6pointer long 0
3eb90 f4b 00 00 00 00 | sprite6xy      long 0
3eb94 f4c 00 00 00 00 | sprite6wh      long 0
3eb98 f4d 00 00 00 00 | sprite7pointer long 0
3eb9c f4e 00 00 00 00 | sprite7xy      long 0
3eba0 f4f 00 00 00 00 | sprite7wh      long 0
3eba4 f50 00 00 00 00 | sprite8pointer long 0
3eba8 f51 00 00 00 00 | sprite8xy      long 0
3ebac f52 00 00 00 00 | sprite8wh      long 0
3ebb0 f53 00 00 00 00 | sprite9pointer long 0
3ebb4 f54 00 00 00 00 | sprite9xy      long 0
3ebb8 f55 00 00 00 00 | sprite9wh      long 0
3ebbc f56 00 00 00 00 | sprite10pointer long 0
3ebc0 f57 00 00 00 00 | sprite10xy      long 0
3ebc4 f58 00 00 00 00 | sprite10wh      long 0
3ebc8 f59 00 00 00 00 | sprite11pointer long 0
3ebcc f5a 00 00 00 00 | sprite11xy      long 0
3ebd0 f5b 00 00 00 00 | sprite11wh      long 0
3ebd4 f5c 00 00 00 00 | sprite12pointer long 0
3ebd8 f5d 00 00 00 00 | sprite12xy      long 0
3ebdc f5e 00 00 00 00 | sprite12wh      long 0
3ebe0 f5f 00 00 00 00 | sprite13pointer long 0
3ebe4 f60 00 00 00 00 | sprite13xy      long 0
3ebe8 f61 00 00 00 00 | sprite13wh      long 0
3ebec f62 00 00 00 00 | sprite14pointer long 0
3ebf0 f63 00 00 00 00 | sprite14xy      long 0
3ebf4 f64 00 00 00 00 | sprite14wh      long 0
3ebf8 f65 00 00 00 00 | sprite15pointer long 0
3ebfc f66 00 00 00 00 | sprite15xy      long 0
3ec00 f67 00 00 00 00 | sprite15wh      long 0
3ec04 f68 00 00 00 00 | sprite16pointer long 0
3ec08 f69 00 00 00 00 | sprite16xy      long 0
3ec0c f6a 00 00 00 00 | sprite16wh      long 0
3ec10 f6b 00 00 00 00 | sprite17pointer long 0
3ec14 f6c 00 00 00 00 | sprite17xy      long 0
3ec18 f6d 00 00 00 00 | sprite17wh      long 0
3ec1c f6e 00 00 00 00 | sprite18pointer long 0
3ec20 f6f 00 00 00 00 | sprite18xy      long 0
3ec24 f70 00 00 00 00 | sprite18wh      long 0
3ec28 f71 00 00 00 00 | spritenum long 0
3ec2c f72             | 
3ec2c f72 00 00 00 00 | spriteline long 0
3ec30 f73 84 03 00 00 | sprite_x long 900
3ec34 f74 00 00 00 00 | sprite_y long 0
3ec38 f75 10 00 00 00 | sprite_w long 16
3ec3c f76 40 00 00 00 | sprite_h long 64
3ec40 f77 00 00 00 00 | l2 long 0
3ec44 f78 00 00 00 00 | t5 long 0
3ec48 f79 00 00 00 00 | t6 long 0
3ec4c f7a 00 00 00 00 | t7 long 0
3ec50 f7b 00 00 00 00 | t8 long 0
3ec54 f7c 00 00 00 00 | t9 long 0
3ec58 f7d 00 00 00 00 | preloadaddr long 0
3ec5c f7e 00 00 00 00 | preloadlineaddr long 0
3ec60 f7f 00 04 00 00 | a1024 long 1024
3ec64 f80             | 
3ec64 f80 E0 03 00 00 | aa long 992
3ec68 f81 FF 03 00 00 | a1023 long 1023
3ec6c f82 00 10 00 00 | a4096 long 4096
3ec70 f83             |  fit 368
3ec70 f83             | _psram_spin2_dat_
3ec70 f83 00 00 00 00 
      ...             
3ed68 fc1 00 00 00 00 
3ed6c fc2 00 00 00 00 |     listdata long 0[8*8]
3ed70 fc3             |             orgh
3ed70                 | 
3ed70                 | ' driver state
3ed70     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3ed74     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3ed78                 | 
3ed78                 | ' delay profile
3ed78     07 00 00 00 
3ed7c     00 CF 7B 05 
3ed80     80 D1 F0 08 
3ed84     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3ed88     80 C4 60 0F 
3ed8c     80 39 7A 12 
3ed90     40 2D D9 13 
3ed94     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3ed98                 | 
3ed98                 | ' data to be passed to driver when starting it
3ed98                 | startupData
3ed98     00 00 00 00 |     long    0           ' current frequency
3ed9c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3eda0     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3eda4     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3eda8     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3edac     B8 ED 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3edb0     38 EE 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3edb4     58 EE 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3edb8                 | 
3edb8                 | ' data for memory
3edb8                 | deviceData
3edb8                 |     ' 16 bank parameters follow (16MB per bank)
3edb8     00 00 00 00 
      ...             
3edf0     00 00 00 00 
3edf4     00 00 00 00 |     long    0[16]                               ' banks 0-15
3edf8                 |     ' 16 banks of pin parameters follow
3edf8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3edfc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3ee00     FF FF FF FF 
      ...             
3ee30     FF FF FF FF 
3ee34     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3ee38                 | 
3ee38                 | ' data for COG polling
3ee38                 | qosData 
3ee38     00 00 FF FF 
3ee3c     00 00 FF FF 
3ee40     00 00 FF FF 
3ee44     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3ee48     00 00 FF FF 
3ee4c     00 00 FF FF 
3ee50     00 00 FF FF 
3ee54     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3ee58                 |     
3ee58                 | ' mailbox storage
3ee58                 | 
3ee58                 | mailboxes
3ee58     00 00 00 00 
      ...             
3eeb0     00 00 00 00 
3eeb4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3eeb8                 | 	alignl
3eeb8                 | _psram16drv_spin2_dat_
3eeb8                 |                             orgh
3eeb8     00 00 00 00 
      ...             
3eed0     00 00 00 00 
3eed4     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3eed8                 | 
3eed8                 | driver_start
3eed8                 |                             org
3eed8 000             | '..................................................................................................
3eed8 000             | ' Memory layout for COG RAM once operational:
3eed8 000             | '
3eed8 000             | '  COG RAM address      Usage
3eed8 000             | '  ---------------      ----
3eed8 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3eed8 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3eed8 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3eed8 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3eed8 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3eed8 000             | '  ~$198-$1F3           State and register variables
3eed8 000             | '
3eed8 000             | ' Also during driver COG startup:
3eed8 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3eed8 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3eed8 000             | '..................................................................................................
3eed8 000             |                             
3eed8 000             | ' Mailbox storage after vector initialization
3eed8 000             | 
3eed8 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3eedc 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3eee0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3eee4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3eee8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3eeec 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3eef0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3eef4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3eef8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3eefc 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3ef00 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3ef04 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3ef08 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3ef0c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3ef10 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3ef14 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3ef18 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3ef1c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3ef20 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3ef24 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3ef28 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3ef2c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3ef30 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3ef34 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3ef38 018             | 
3ef38 018             | ' Mailbox parameter addresses per COG once patched
3ef38 018             |                             
3ef38 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3ef3c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3ef40 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3ef44 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3ef48 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3ef4c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3ef50 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3ef54 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3ef58 020             | 
3ef58 020             | '..................................................................................................
3ef58 020             | ' Per COG request and state setup and service branching
3ef58 020             |         
3ef58 020             | cog0                 
3ef58 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3ef5c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3ef60 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3ef64 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3ef68 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ef6c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ef70 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3ef74 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3ef78 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3ef7c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ef80 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ef84 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3ef88 02c             | cog1                        
3ef88 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3ef8c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3ef90 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3ef94 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3ef98 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ef9c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3efa0 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3efa4 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3efa8 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3efac 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3efb0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3efb4 037 33 CA 63 FD |                             execf   request-0               'jump to service
3efb8 038             | cog2                         
3efb8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3efbc 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3efc0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3efc4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3efc8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3efcc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3efd0 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3efd4 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3efd8 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3efdc 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3efe0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3efe4 043 33 CA 63 FD |                             execf   request-0               'jump to service
3efe8 044             | cog3                        
3efe8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3efec 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3eff0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3eff4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3eff8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3effc 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f000 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3f004 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3f008 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3f00c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f010 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f014 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3f018 050             | cog4                        
3f018 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3f01c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3f020 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3f024 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3f028 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f02c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f030 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3f034 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3f038 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3f03c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f040 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f044 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3f048 05c             | cog5                        
3f048 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3f04c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3f050 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3f054 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3f058 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f05c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f060 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3f064 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3f068 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3f06c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f070 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f074 067 33 CA 63 FD |                             execf   request-0               'jump to service
3f078 068             | cog6                        
3f078 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3f07c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3f080 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3f084 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3f088 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f08c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f090 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3f094 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3f098 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3f09c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f0a0 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f0a4 073 33 CA 63 FD |                             execf   request-0               'jump to service
3f0a8 074             | cog7                        
3f0a8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3f0ac 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3f0b0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3f0b4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3f0b8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f0bc 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f0c0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3f0c4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3f0c8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3f0cc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f0d0 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f0d4 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3f0d8 080             |                             fit     128
3f0d8 080             | 
3f0d8 080             |                             fit     128
3f0d8 080             | pad                         long    0[128-$]                'align init code to $80
3f0d8 080             | 
3f0d8 080             | '..................................................................................................
3f0d8 080             | 
3f0d8 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3f0d8 080             | 
3f0d8 080             | init                        
3f0d8 080             |                             ' get driver scratch long address in hub
3f0d8 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3f0dc 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3f0e0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3f0e4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3f0e8 084             |                     
3f0e8 084             |                             ' read in the additional LUT RAM code
3f0e8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3f0ec 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3f0f0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3f0f4 087             | 
3f0f4 087             |                             ' read the startup parameters
3f0f4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3f0f8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3f0fc 089             | 
3f0fc 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3f0fc 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3f100 08a             | 
3f100 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3f104 08b 01 00 00 5F 
3f108 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3f10c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3f110 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3f114 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3f118 090             | 
3f118 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3f118 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3f11c 091 01 00 00 FF 
3f120 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3f124 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3f128 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3f12c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3f130 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3f134 097 08 DE 47 F5 |                             or      a, #8
3f138 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3f13c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3f140 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3f144 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3f148 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3f14c 09d 01 DE 07 F1 |                             add     a, #1
3f150 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3f154 09f             |  
3f154 09f             |                             ' setup device control pin states
3f154 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3f158 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3f15c 0a1 01 00 00 FF 
3f160 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3f164 0a3             | 
3f164 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3f168 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3f16c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3f170 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3f174 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3f178 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3f17c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3f180 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3f184 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3f188 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3f18c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3f190 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3f194 0af             | pinloop
3f194 0af             |                             ' generate minimum CE high time before access
3f194 0af A1 07 00 FF 
3f198 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3f19c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3f1a0 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3f1a4 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3f1a8 0b4 1F DE 63 FD |                             waitx   a                       'delay
3f1ac 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3f1b0 0b6             | 
3f1b0 0b6             |                             ' setup the COG mailboxes and addresses 
3f1b0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3f1b4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3f1b8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3f1bc 0b9             | 
3f1bc 0b9 28 2E 64 FD |                             setq    #24-1
3f1c0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3f1c4 0bb             | 
3f1c4 0bb             |                             ' setup the polling loop for active COGs 
3f1c4 0bb 01 C2 63 FD |                             cogid   id
3f1c8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3f1cc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3f1d0 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3f1d4 0bf 0A F0 07 F6 |                             mov     ptra, #10
3f1d8 0c0 E1 F1 03 FA |                             mul     ptra, id
3f1dc 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3f1e0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3f1e4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3f1e8 0c4 03 C2 07 FA |                             mul     id, #3
3f1ec 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3f1f0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3f1f4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3f1f8 0c8 D8 01 B0 FD |                             call    #reloadcogs
3f1fc 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3f200 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3f204 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3f204 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3f208 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3f20c 0cd 08 04 DC FC |                             rep     #2, #8
3f210 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3f214 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3f218 0d0             | 
3f218 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3f218 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3f218 0d0 01 C2 63 FD |                             cogid   id
3f21c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3f220 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3f224 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3f228 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3f22c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3f230 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3f234 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3f238 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3f23c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3f240 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3f244 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3f248 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3f24c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3f250 0de A5 E5 03 F1 |                             add     d, const512
3f254 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3f258 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3f25c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3f260 0e2             |                             
3f260 0e2             |                             ' setup register values for control vector loop setup after we return
3f260 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3f264 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3f268 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3f26c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3f270 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3f274 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3f278 0e8 D0 C3 8F F9 |                             altd    id, #id0
3f27c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3f280 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3f284 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3f288 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3f28c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3f290 0ee             |  
3f290 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3f294 0ef 07 CA 07 F5 |                             and     request, #7
3f298 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3f29c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3f2a0 0f2             |                             fit     $100                    'ensure all init code fits this space
3f2a0 0f2             | 
3f2a0 0f2             |                             fit     $100                    'ensure all init code fits this space
3f2a0 0f2             | 
3f2a0 0f2 00 00 00 00 
      ...             
3f2d0 0fe 00 00 00 00 
3f2d4 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3f2d8 100             | 
3f2d8 100             | '..................................................................................................
3f2d8 100             | ' Error result handling and COG notification of request completion
3f2d8 100             | 
3f2d8 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3f2dc 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3f2e0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3f2e4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3f2e8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3f2ec 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3f2f0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3f2f4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3f2f8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3f2fc 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3f300 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3f304 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3f308 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3f30c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3f310 10e             | ' Poller re-starts here after a COG is serviced
3f310 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3f314 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3f318 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3f31c 111             | ' Main dynamic polling loop repeats until a request arrives
3f31c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3f320 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3f324 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3f328 114             | 
3f328 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3f32c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3f330 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3f334 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3f338 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3f33c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3f340 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3f344 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3f348 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3f34c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3f350 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3f354 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3f358 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3f35c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3f360 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3f364 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3f368 124             | 
3f368 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3f36c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3f370 126             |  
3f370 126             | '..................................................................................................
3f370 126             | ' List handler                               
3f370 126             | 
3f370 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3f374 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3f378 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3f37c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3f380 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3f384 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3f388 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3f38c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3f390 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3f394 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3f398 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3f39c 131 33 00 60 FD |                             execf   0-0                     'process the request 
3f3a0 132             | 
3f3a0 132             | '..................................................................................................
3f3a0 132             | ' Restoring per COG state and resuming where we left off
3f3a0 132             | 
3f3a0 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3f3a4 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3f3a8 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3f3ac 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3f3b0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3f3b4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3f3b8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3f3bc 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3f3c0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3f3c4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3f3c8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3f3cc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3f3d0 13e             |                    
3f3d0 13e             | '..................................................................................................
3f3d0 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3f3d0 13e             | 
3f3d0 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3f3d4 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3f3d8 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3f3dc 141 D0 DF B7 F9 |                             setd    a, #id0
3f3e0 142 D8 DF BF F9 |                             sets    a, #addr1
3f3e4 143 FE FF FF FF 
3f3e8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3f3ec 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3f3f0 146 3F DE A7 F9 |                             alti    a, #%111_111 
3f3f4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3f3f8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3f3fc 149 01 E2 63 FD |                             cogid   c
3f400 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3f404 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3f408 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3f40c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3f410 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3f414 14f 00 E0 03 F6 |                             mov     b, 0-0
3f418 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3f41c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3f420 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3f424 153 0C 00 90 AD |             if_z            jmp     #excluded               
3f428 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3f42c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3f430 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3f434 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3f438 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3f43c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3f440 15a             | 
3f440 15a             | 'determine priority cogs and build instructions for the polling sequence
3f440 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3f444 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3f448 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3f44c 15d             | 
3f44c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3f450 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3f454 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3f458 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3f45c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3f460 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3f464 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3f468 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3f46c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3f470 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3f474 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3f478 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3f47c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3f480 16a             | endprioloop
3f480 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3f484 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3f488 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3f48c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3f490 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3f494 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3f498 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3f49c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3f4a0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3f4a4 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3f4a8 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3f4ac 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3f4b0 176             | 
3f4b0 176             | ' populate the round robin COG polling instructions
3f4b0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3f4b4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3f4b8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3f4bc 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3f4c0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3f4c4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3f4c8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3f4cc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3f4d0 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3f4d4 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3f4d8 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3f4dc 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3f4e0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3f4e4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3f4e8 184             | '..................................................................................................
3f4e8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3f4e8 184             | 
3f4e8 184             | set_latency                                                 '            (a) set latency
3f4e8 184             | get_latency                                                 '            (b) get latency
3f4e8 184             | set_burst                                                   '            (c) set burst size of bank
3f4e8 184             | get_burst                                                   '            (d) get burst size of bank
3f4e8 184             |                                                             '            (e) dump state
3f4e8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3f4ec 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3f4f0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3f4f4 187             |                                                             ' | | | | e  account for following AUGS
3f4f4 187 04 00 00 FF 
3f4f8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3f4fc 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3f500 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3f504 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3f508 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3f50c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3f510 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3f514 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3f518 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3f51c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3f520 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3f524 193             | 
3f524 193             | '..................................................................................................
3f524 193             | ' Misc EXECF code
3f524 193             | 
3f524 193 33 72 63 FD | start_read_exec             execf   newburstr
3f528 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3f52c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3f530 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3f534 197             | 
3f534 197             | '..................................................................................................
3f534 197             | ' Variables
3f534 197             | 
3f534 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3f538 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3f53c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3f540 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3f544 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3f548 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3f54c 19d             | 
3f54c 19d 00 00 00 80 | xfreq1          long    $80000000
3f550 19e 00 00 00 40 | xfreq2          long    $40000000
3f554 19f 03 00 00 00 | delay           long    3
3f558 1a0             | 
3f558 1a0             | lutcodeaddr                 
3f558 1a0             | startupparams
3f558 1a0             | excludedcogs                                    'careful: shared register use!
3f558 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3f55c 1a1 00 00 00 00 | flags           long    0
3f560 1a2             | mask                                            'careful: shared register use!
3f560 1a2 00 00 00 00 | resetmaskA      long    0
3f564 1a3             | limit                                           'careful: shared register use!
3f564 1a3 00 00 00 00 | resetmaskB      long    0
3f568 1a4 00 00 00 00 | datapins        long    0
3f56c 1a5             | const512                                        'careful: shared register use!
3f56c 1a5 00 00 00 00 | devicelist      long    0
3f570 1a6 00 00 00 00 | coglist         long    0
3f574 1a7 00 00 00 00 | mbox            long    0 
3f578 1a8             | 
3f578 1a8             | clkpin                                          'shared with code patched during init
3f578 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3f57c 1a9             | cspin                                           'shared with code patched during init
3f57c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3f580 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3f584 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3f588 1ac 01 00 00 00 | clkdelay        long    1
3f58c 1ad 00 00 00 00 | regdatabus      long    0
3f590 1ae             | 
3f590 1ae 10 00 00 00 | deviceaddr      long    $10
3f594 1af             | rrcounter
3f594 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3f598 1b0             | 
3f598 1b0             | ' jump addresses for the per COG handlers
3f598 1b0 20 00 00 00 | cog0_handler    long    cog0
3f59c 1b1 2C 00 00 00 | cog1_handler    long    cog1
3f5a0 1b2 38 00 00 00 | cog2_handler    long    cog2
3f5a4 1b3 44 00 00 00 | cog3_handler    long    cog3
3f5a8 1b4 50 00 00 00 | cog4_handler    long    cog4
3f5ac 1b5 5C 00 00 00 | cog5_handler    long    cog5
3f5b0 1b6 68 00 00 00 | cog6_handler    long    cog6
3f5b4 1b7 74 00 00 00 | cog7_handler    long    cog7
3f5b8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3f5bc 1b9             | 
3f5bc 1b9             | ' EXECF sequences
3f5bc 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3f5c0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3f5c4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3f5c8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3f5cc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3f5d0 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3f5d4 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3f5d8 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3f5d8 1c0             | 
3f5d8 1c0             | 
3f5d8 1c0             | ' SKIPF sequences
3f5d8 1c0             | skiptable
3f5d8 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3f5dc 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3f5e0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3f5e4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3f5e8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3f5ec 1c5 00 00 00 00 | pattern2        long    0
3f5f0 1c6 00 00 00 00 | pattern3        long    0
3f5f4 1c7 77 02 00 00 | singlelong      long    %1001110111  
3f5f8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3f5fc 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3f600 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3f604 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3f608 1cc             | 
3f608 1cc             | ' LUT RAM address values
3f608 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3f60c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3f610 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3f614 1cf F6 02 00 00 | noread          long    noread_lut
3f618 1d0             | 
3f618 1d0 00 00 00 00 | id0             long    0
3f61c 1d1 01 00 00 00 | id1             long    1
3f620 1d2 02 00 00 00 | id2             long    2
3f624 1d3 03 00 00 00 | id3             long    3
3f628 1d4 04 00 00 00 | id4             long    4
3f62c 1d5 05 00 00 00 | id5             long    5
3f630 1d6 06 00 00 00 | id6             long    6
3f634 1d7 07 00 00 00 | id7             long    7
3f638 1d8             | 
3f638 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3f638 1d8             | 'and COG updates and need to follow immediately after id0-id7
3f638 1d8 00 00 00 00 | addr1           long    0
3f63c 1d9 00 00 00 00 | hubdata         long    0
3f640 1da 00 00 00 00 | count           long    0
3f644 1db 00 00 00 00 | addr2           long    0
3f648 1dc 00 00 00 00 | total           long    0
3f64c 1dd 00 00 00 00 | offset1         long    0
3f650 1de 00 00 00 00 | offset2         long    0
3f654 1df 00 00 00 00 | link            long    0
3f658 1e0             | 
3f658 1e0             | burstwrite                                      'note shared register use during init
3f658 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3f65c 1e1 00 00 00 00 | id              long    0
3f660 1e2             | 
3f660 1e2 00 00 00 00 | header          long    0
3f664 1e3 00 00 00 00 | trailer         long    0
3f668 1e4 00 00 00 00 | cmdaddr         long    0
3f66c 1e5 00 00 00 00 | request         long    0
3f670 1e6 00 00 00 00 | rrlimit         long    0
3f674 1e7 00 00 00 00 | pinconfig       long    0
3f678 1e8 00 00 00 00 | clks            long    0
3f67c 1e9 00 00 00 00 | resume          long    0
3f680 1ea 00 00 00 00 | orighubsize     long    0
3f684 1eb 00 00 00 00 | wrclks          long    0
3f688 1ec             | 
3f688 1ec 00 00 00 00 | pattern         long    0
3f68c 1ed 00 00 00 00 | hubscratch      long    0
3f690 1ee 00 10 00 00 | val4k           long    4096
3f694 1ef             | 
3f694 1ef             | ' temporary general purpose regs
3f694 1ef 00 00 00 00 | a               long    0
3f698 1f0 00 00 00 00 | b               long    0
3f69c 1f1 00 00 00 00 | c               long    0
3f6a0 1f2 00 00 00 00 | d               long    0
3f6a4 1f3             |                 fit     502
3f6a4 1f3             | 
3f6a4 1f3             |                 fit     502
3f6a4 1f3             | 
3f6a4 1f3             | '..................................................................................................
3f6a4 1f3             | 
3f6a4 1f3             |             orgh
3f6a4                 | 
3f6a4                 | lut_code
3f6a4                 | 'HW init code up to 80 longs
3f6a4                 | 
3f6a4                 | '..................................................................................................
3f6a4                 | ' Memory layout for LUT RAM once operational:
3f6a4                 | '
3f6a4                 | '  LUT RAM address      Usage
3f6a4                 | '  ---------------      ----
3f6a4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3f6a4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3f6a4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3f6a4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3f6a4                 | '
3f6a4                 | ' Also during driver COG startup:
3f6a4                 | ' $230-$24F is used for HW init setup
3f6a4                 | ' $250-$26F is used as temporary vector storage 
3f6a4                 | '..................................................................................................
3f6a4                 | 
3f6a4                 |                 org $230    
3f6a4 230             | 
3f6a4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3f6a4 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3f6a8 231 24 16 60 FD |                             pollxfi
3f6ac 232 FF AA 2A FF 
3f6b0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3f6b4 234 28 00 B0 FD |                             call    #sendqspi
3f6b8 235 07 F8 07 FF 
3f6bc 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3f6c0 237 28 00 B0 FD |                             call    #sendspi
3f6c4 238 F8 07 78 FF 
3f6c8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3f6cc 23a 1C 00 B0 FD |                             call    #sendspi
3f6d0 23b 7F 78 78 FF 
3f6d4 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3f6d8 23d 10 00 B0 FD |                             call    #sendspi 
3f6dc 23e 2D 00 64 FD |                             ret
3f6e0 23f             | 
3f6e0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3f6e4 240 32 0C 64 FD |                             skipf   #%110
3f6e8 241 9C EF 03 F6 |                             mov     pb, xsendimm
3f6ec 242             | 
3f6ec 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3f6f0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3f6f4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3f6f8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3f6fc 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3f700 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3f704 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3f708 249 50 48 63 FD |                             fltl    datapins                'float data bus
3f70c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3f710 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3f714 24c             | 
3f714 24c 00 00 00 00 
3f718 24d 00 00 00 00 
3f71c 24e 00 00 00 00 
3f720 24f 00 00 00 00 |                 long    0[$270-32-$]
3f724 250             |                 fit     $270-32  ' keep room for 32 vector longs
3f724 250             |     
3f724 250             |                 fit     $270-32  ' keep room for 32 vector longs
3f724 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3f724 250             | rw_vect ' PSRAM jump vectors
3f724 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f728 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f72c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3f730 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3f734 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3f738 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3f73c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3f740 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3f744 258             | ro_vect ' R/O PSRAM jump vectors
3f744 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f748 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f74c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3f750 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3f754 25c 00 01 00 00 |                 long    unsupported
3f758 25d 00 01 00 00 |                 long    unsupported
3f75c 25e 00 01 00 00 |                 long    unsupported
3f760 25f 00 01 00 00 |                 long    unsupported
3f764 260             | ctrl_vect ' Control jump vectors
3f764 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3f768 261 00 01 00 00 |                 long    unsupported
3f76c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3f770 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3f774 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3f778 265 00 01 00 00 |                 long    unsupported
3f77c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3f780 267 3E 01 00 00 |                 long    reconfig 
3f784 268             | no_vect ' Invalid bank jump vectors
3f784 268 01 01 00 00 |                 long    invalidbank
3f788 269 01 01 00 00 |                 long    invalidbank
3f78c 26a 01 01 00 00 |                 long    invalidbank
3f790 26b 01 01 00 00 |                 long    invalidbank
3f794 26c 01 01 00 00 |                 long    invalidbank
3f798 26d 01 01 00 00 |                 long    invalidbank
3f79c 26e 01 01 00 00 |                 long    invalidbank
3f7a0 26f 01 01 00 00 |                 long    invalidbank
3f7a4 270             |                 fit     $270
3f7a4 270             | 
3f7a4 270             |                 fit     $270
3f7a4 270             | '..................................................................................................
3f7a4 270             | ' PSRAM READS
3f7a4 270             |                                                             ' a b c d e f
3f7a4 270             |                                                             ' B W L B R L  (a) byte read
3f7a4 270             |                                                             ' Y O O U E O  (b) word read
3f7a4 270             |                                                             ' T R N R S C  (c) long read
3f7a4 270             |                                                             ' E D G S U K  (d) new burst read
3f7a4 270             |                                                             '       T M E  (e) resumed sub-burst
3f7a4 270             |                                                             '         E D  (f) locked sub-burst
3f7a4 270             | 
3f7a4 270             | 
3f7a4 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3f7a8 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3f7ac 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3f7b0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3f7b4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3f7b8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3f7bc 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3f7c0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3f7c4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3f7c8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3f7cc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3f7d0 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3f7d4 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3f7d8 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3f7dc 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3f7e0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3f7e4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3f7e8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3f7ec 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3f7f0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3f7f4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3f7f8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3f7fc 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3f800 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3f804 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3f808 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3f80c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3f810 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3f814 28c             | 
3f814 28c             |                             ' fall through to read bursts
3f814 28c             |                         
3f814 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3f814 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3f818 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3f81c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3f820 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3f824 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3f828 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3f82c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3f830 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3f834 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3f838 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3f83c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3f840 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3f844 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3f848 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3f84c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3f850 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3f854 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3f858 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3f85c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3f860 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3f864 2a0 E8 D1 03 F1 |                             add     clks, clks
3f868 2a1             | readcommon
3f868 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3f86c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3f870 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3f874 2a4             | 
3f874 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3f878 2a5 69 C8 63 FD |                             rev     cmdaddr
3f87c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3f880 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3f884 2a8             | 
3f884 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3f888 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3f88c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3f88c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3f890 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3f894 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3f898 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3f89c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3f89c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3f8a0 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3f8a4 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3f8a8 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3f8ac 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3f8b0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3f8b4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3f8b4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3f8b8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3f8bc 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3f8c0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3f8c4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3f8c8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3f8cc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3f8d0 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3f8d4 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3f8d8 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3f8dc 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3f8e0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3f8e4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3f8e8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3f8ec 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3f8ec 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3f8f0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3f8f4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3f8f8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3f8fc 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3f900 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3f904 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3f908 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3f90c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3f910 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3f914 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3f918 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3f91c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3f920 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3f924 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3f928 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3f92c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3f930 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3f934 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3f938 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3f93c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3f940 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3f944 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3f948 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3f94c 2da 10 03 90 FD |                             jmp     #writecommon
3f950 2db             | 
3f950 2db             | '..................................................................................................
3f950 2db             | ' Burst continuation testing
3f950 2db             | 
3f950 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3f954 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3f958 2dd             | continue_read_lut          
3f958 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3f95c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3f960 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3f964 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3f968 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3f96c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3f970 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3f974 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3f978 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3f97c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3f980 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3f984 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3f988 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3f98c 2ea             | 
3f98c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3f990 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3f994 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3f998 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3f99c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3f9a0 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3f9a4 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3f9a8 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3f9ac 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3f9b0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3f9b4 2f4 2A 1C 66 0D |             _ret_           push    #poller
3f9b8 2f5             | 
3f9b8 2f5             | 
3f9b8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3f9bc 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3f9bc 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3f9c0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3f9c4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3f9c8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3f9cc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3f9d0 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3f9d4 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3f9d8 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3f9dc 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3f9e0 2ff             | '..................................................................................................
3f9e0 2ff             | ' Completion of requests
3f9e0 2ff             | 
3f9e0 2ff             | complete_rw_lut             
3f9e0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3f9e4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3f9e8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3f9ec 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3f9f0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3f9f4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3f9f8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3f9fc 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3fa00 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3fa04 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3fa08 309 32 62 64 AD |             if_z            skipf   #%110001
3fa0c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3fa10 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3fa14 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3fa18 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3fa1c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3fa20 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3fa24 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3fa28 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3fa2c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3fa30 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3fa34 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3fa38 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3fa3c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3fa3c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3fa3c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3fa3c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3fa40 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3fa44 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3fa48 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3fa4c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3fa50 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3fa54 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3fa58 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3fa5c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3fa60 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3fa64 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3fa68 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3fa6c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3fa70 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3fa74 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3fa78 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3fa7c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3fa80 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3fa84 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3fa88 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3fa8c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3fa90 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3fa94 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3fa98 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3fa9c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3faa0 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3faa4 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3faa8 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3faac 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3fab0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3fab4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3fab8 335 DF B7 03 A6 |             if_z            mov     addr2, link
3fabc 336 34 FF 9F AD |             if_z            jmp     #checknext
3fac0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3fac4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3fac8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3facc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3fad0 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3fad4 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3fad8 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3fadc 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3fae0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3fae4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3fae8 341             | 
3fae8 341             | '..................................................................................................
3fae8 341             | ' PSRAM WRITES
3fae8 341             |                                                             '  a b c d e f g h
3fae8 341             | 
3fae8 341             |                                                             '  B W L F B R L L (a) byte write(s)
3fae8 341             |                                                             '  Y O O I U E O O (b) word write(s)
3fae8 341             |                                                             '  T R N L R S C C (c) long write(s)
3fae8 341             |                                                             '  E D G L S U K K (d) resumed fill
3fae8 341             |                                                             '          T M E E (e) new burst write
3fae8 341             |                                                             '            E D D (f) resumed burst
3fae8 341             |                                                             '              F B (g) locked fill
3fae8 341             |                                                             '              I U (h) locked burst write
3fae8 341             |                                                             '              L R 
3fae8 341             |                                                             '              L S 
3fae8 341             |                                                             '                T 
3fae8 341             | 
3fae8 341             | w_single                   
3fae8 341             | w_fill_cont           
3fae8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3faec 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3faf0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3faf4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3faf8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3fafc 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3fb00 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3fb04 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3fb08 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3fb0c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3fb10 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3fb14 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3fb18 34d             |                ' disable call to r_resume_burst for single longs when z=0
3fb18 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3fb1c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3fb20 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3fb24 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3fb28 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3fb2c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3fb30 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3fb34 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3fb38 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3fb3c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3fb40 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3fb44 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3fb48 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3fb4c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3fb50 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3fb54 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3fb58 35d             |         
3fb58 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3fb58 35d             |             '
3fb58 35d             |             '  At least one of these 3 optional components will be sent
3fb58 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3fb58 35d             |             '     body - N x full longs of data
3fb58 35d             |             '     trailer - last partial long of data
3fb58 35d             |             '
3fb58 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3fb58 35d             |             '
3fb58 35d             |             'Case    Type                           Sends
3fb58 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3fb58 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3fb58 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3fb58 35d             |             ' 4)     Multiple long fill             body only
3fb58 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3fb58 35d             | 
3fb58 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3fb58 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3fb5c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3fb60 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3fb64 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3fb68 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3fb6c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3fb70 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3fb74 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3fb78 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3fb7c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3fb80 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3fb84 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3fb88 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3fb8c 36a             |                             
3fb8c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3fb90 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3fb94 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3fb98 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3fb9c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3fba0 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3fba4 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3fba8 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3fbac 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3fbb0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3fbb4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3fbb8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3fbbc 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3fbc0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3fbc4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3fbc8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3fbcc 37a             | 
3fbcc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3fbd0 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3fbd4 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3fbd8 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3fbdc 37e             |                  
3fbdc 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3fbe0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3fbe4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3fbe8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3fbec 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3fbf0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3fbf4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3fbf8 385             | 
3fbf8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3fbfc 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3fc00 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3fc04 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3fc08 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3fc0c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3fc10 38b             | 
3fc10 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3fc10 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3fc14 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3fc18 38d 2A B0 63 FD |                             push    addr1                   'save address
3fc1c 38e             | 
3fc1c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3fc1c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3fc20 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3fc24 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3fc28 391             |             
3fc28 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3fc2c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3fc30 393 2B B0 63 FD |                             pop     addr1                   'restore address
3fc34 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3fc38 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3fc3c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3fc40 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3fc44 398             | 
3fc44 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3fc48 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3fc4c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3fc50 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3fc54 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3fc58 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3fc5c 39e             | 
3fc5c 39e             |                             'trailer is done
3fc5c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3fc60 39f             | 
3fc60 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3fc64 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3fc68 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3fc6c 3a2             | 
3fc6c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3fc70 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3fc74 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3fc78 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3fc7c 3a6             |                             
3fc7c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3fc80 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3fc84 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3fc88 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3fc8c 3aa             |                                                          
3fc8c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3fc90 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3fc94 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3fc98 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3fc9c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3fca0 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3fca4 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3fca8 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3fcac 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3fcb0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3fcb4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3fcb8 3b5             |  
3fcb8 3b5 59 52 63 FD |                             drvh    cspin
3fcbc 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3fcc0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3fcc4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3fcc8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3fccc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3fcd0 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3fcd4 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3fcd8 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3fcdc 3be EA E5 03 F6 |                             mov     d, orighubsize
3fce0 3bf EF E5 63 F0 |                             shl     d, a
3fce4 3c0 F2 E3 83 F1 |                             sub     c, d
3fce8 3c1 DD E3 03 F1 |                             add     c, offset1
3fcec 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3fcf0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3fcf4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3fcf8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3fcfc 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3fd00 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3fd04 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3fd08 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3fd0c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3fd10 3cb BB D3 03 F6 |                             mov     resume, restorefill
3fd14 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3fd18 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3fd1c 3ce 6C FC BF CD |             if_c            call    #yield
3fd20 3cf 2D 00 64 FD |                             ret
3fd24 3d0             |                            
3fd24 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3fd24 3d0             |                       '     rczl    pa                      'rotate left into address offset
3fd24 3d0             |                       '     rczl    c wcz                   'restore count and flags
3fd24 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3fd28 3d1 02 EC 67 F0 |                             shl     pa, #2
3fd2c 3d2 28 06 64 AD |             if_z            setq    #3
3fd30 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3fd34 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3fd38 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3fd3c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3fd40 3d7             | 
3fd40 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3fd44 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3fd48 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3fd4c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3fd50 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3fd54 3dc             |                 fit 1024-32
3fd54 3dc             |         
3fd54 3dc             | 
3fd54 3dc             | '..................................................................................................
3fd54 3dc             | 
3fd54 3dc             |                 fit 1024-32
3fd54 3dc 00 00 00 00 
3fd58 3dd 00 00 00 00 
3fd5c 3de 00 00 00 00 
3fd60 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3fd64 3e0             |                 org 1024-32
3fd64 000             | 
3fd64 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3fd64 000 00 00 00 00 |                 long $0000
3fd68 001 11 11 00 00 |                 long $1111
3fd6c 002 22 22 00 00 |                 long $2222
3fd70 003 33 33 00 00 |                 long $3333
3fd74 004 44 44 00 00 |                 long $4444
3fd78 005 55 55 00 00 |                 long $5555
3fd7c 006 66 66 00 00 |                 long $6666
3fd80 007 77 77 00 00 |                 long $7777
3fd84 008 88 88 00 00 |                 long $8888
3fd88 009 99 99 00 00 |                 long $9999
3fd8c 00a AA AA 00 00 |                 long $aaaa
3fd90 00b BB BB 00 00 |                 long $bbbb
3fd94 00c CC CC 00 00 |                 long $cccc
3fd98 00d DD DD 00 00 |                 long $dddd
3fd9c 00e EE EE 00 00 |                 long $eeee
3fda0 00f FF FF 00 00 |                 long $ffff
3fda4 010             | 
3fda4 010             | 'masks
3fda4 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3fda8 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3fdac 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3fdb0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3fdb4 014             | 
3fdb4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3fdb8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3fdbc 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3fdc0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3fdc4 018             | 
3fdc4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3fdc8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3fdcc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3fdd0 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3fdd4 01c             | 
3fdd4 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3fdd8 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3fddc 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3fde0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3fde4 020             |         fit 1024
3fde4 020             | 
3fde4 020             |         fit 1024
3fde4 020             | 
3fde4 020             | '--------------------------------------------------------------------------------------------------
3fde4 020             |         orgh
3fde4                 | 
3fde4                 | gfxexpansion
3fde4                 |                             'simple line drawing graphics expansion of memory driver
3fde4                 |                             'jmp     #donerepeats                'just return for now
3fde4                 | 
3fde4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3fde8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3fdec     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3fdf0     DD E1 03 F6 |                             mov     b, offset1              'get error term
3fdf4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3fdf8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3fdfc     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3fe00     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3fe04     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3fe08     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3fe0c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3fe10     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3fe14     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3fe18     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3fe1c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3fe20     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3fe24     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3fe28     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3fe2c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3fe30     DC E5 33 F9 |                             getword d, total, #0            'get line width
3fe34     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3fe38     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3fe3c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3fe40     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3fe44     C3 03 80 FD |                             jmp     #readmask               'continue filling
3fe48                 | 	alignl
3fe48                 | _usbnew_spin2_dat_
3fe48                 |                 org     $000
3fe48 000             | 
3fe48 000             | usb_host_start
3fe48 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3fe4c 001             | 
3fe4c 001 03 00 00 FF 
3fe50 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3fe54 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3fe58 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3fe5c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3fe60 006 29 70 63 FD |                 setq2   htmp
3fe64 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3fe68 008             | 
3fe68 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3fe6c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3fe70 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3fe74 00b             | 
3fe74 00b             | '------------------------------------------------------------------------------
3fe74 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3fe74 00b             | ' special because the receiving function must not respond with either STALL or
3fe74 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3fe74 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3fe74 00b             | ' corrupt packet, it must ignore the transaction
3fe74 00b             | '------------------------------------------------------------------------------
3fe74 00b             | ' On entry:
3fe74 00b             | '   PTRA - start address of the SETUP data struct.
3fe74 00b             | ' On exit:
3fe74 00b             | '   retval - PID_ACK on success, otherwise error code.
3fe74 00b             | '------------------------------------------------------------------------------
3fe74 00b             | txn_setup
3fe74 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3fe78 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3fe7c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3fe80 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3fe84 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3fe88 010             | .setup
3fe88 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3fe8c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fe90 012 2D 00 64 AD |         if_z    ret
3fe94 013 7C 0B B0 FD |                 call    #retry_wait
3fe98 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3fe9c 015 2D 00 64 AD |         if_z    ret
3fea0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3fea4 017 E0 FF 9F FD |                 jmp     #.setup
3fea8 018             | 
3fea8 018             | '------------------------------------------------------------------------------
3fea8 018             | ' IN/INTERRUPT transaction.
3fea8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3fea8 018             | '------------------------------------------------------------------------------
3fea8 018             | ' On entry:
3fea8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3fea8 018             | '     CRC(b19..23).
3fea8 018             | ' On exit:
3fea8 018             | '------------------------------------------------------------------------------
3fea8 018             | txn_in
3fea8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3feac 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3feb0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3feb4 01b             | 
3feb4 01b             |                 ' Fall through to urx_packet
3feb4 01b             | 
3feb4 01b             | '------------------------------------------------------------------------------
3feb4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3feb4 01b             | ' received are handshakes and IN DATAx.
3feb4 01b             | '------------------------------------------------------------------------------
3feb4 01b             | ' On entry:
3feb4 01b             | ' On exit:
3feb4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3feb4 01b             | '     returned.
3feb4 01b             | '------------------------------------------------------------------------------
3feb4 01b             | urx_packet
3feb4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3feb8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3febc 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3fec0 01e 1A 92 63 FD |                 getct   hct2
3fec4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3fec8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3fecc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3fed0 022             | .wait_sop
3fed0 022 22 A7 8A FA |                 rdpin   urx, dm
3fed4 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3fed8 024 08 00 90 CD |         if_c    jmp     #.get_pid
3fedc 025 FC 25 CC FB |                 jnct2   #.wait_sop
3fee0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3fee4 027             | .get_pid
3fee4 027 28 02 B0 FD |                 call    #urx_next
3fee8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3feec 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3fef0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3fef4 02b             | .chk_pid
3fef4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fef8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3fefc 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3ff00 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3ff04 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3ff08 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3ff0c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3ff10 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3ff14 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3ff18 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3ff1c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3ff20 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3ff24 037             | .ack_resend
3ff24 037 22 A7 82 FA |                 rqpin   urx, dm
3ff28 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3ff2c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3ff30 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3ff34 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3ff38 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3ff3c 03d             | .chk_eop
3ff3c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3ff40 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3ff44 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3ff48 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3ff4c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3ff50 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3ff54 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3ff58 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3ff5c 045 2D 00 64 FD |                 ret
3ff60 046             | .idle
3ff60 046 22 A7 82 FA |                 rqpin   urx, dm
3ff64 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3ff68 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3ff6c 049 2D 00 64 FD |                 ret
3ff70 04a             | 
3ff70 04a             | '------------------------------------------------------------------------------
3ff70 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3ff70 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3ff70 04a             | ' if one is required.
3ff70 04a             | '------------------------------------------------------------------------------
3ff70 04a             | ' On entry:
3ff70 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3ff70 04a             | ' On exit:
3ff70 04a             | '------------------------------------------------------------------------------
3ff70 04a             | utx_token
3ff70 04a 22 A7 82 FA |                 rqpin   urx, dm
3ff74 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3ff78 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3ff7c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3ff80 04e 34 0D B0 CD |         if_c    call    #utx_pre
3ff84 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3ff88 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3ff8c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3ff90 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3ff94 053             | .next_byte
3ff94 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3ff98 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3ff9c 055             | .wait
3ff9c 055 40 46 72 FD |                 testp   dp                      wc
3ffa0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3ffa4 057 23 03 08 FC |                 akpin   dp
3ffa8 058 22 A5 22 FC |                 wypin   utx, dm
3ffac 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3ffb0 05a             | 
3ffb0 05a             | '------------------------------------------------------------------------------
3ffb0 05a             | ' SETUP/OUT/INTERRUPT transaction.
3ffb0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3ffb0 05a             | '------------------------------------------------------------------------------
3ffb0 05a             | ' On entry:
3ffb0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3ffb0 05a             | '     CRC(b19..23).
3ffb0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3ffb0 05a             | '   pkt_data - count of DATAx payload bytes to send.
3ffb0 05a             | ' On exit:
3ffb0 05a             | '------------------------------------------------------------------------------
3ffb0 05a             | txn_out
3ffb0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3ffb4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3ffb8 05c 00 00 C0 FF 
3ffbc 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3ffc0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3ffc4 05f             | 
3ffc4 05f             |                 ' Fall through to utx_data
3ffc4 05f             | 
3ffc4 05f             | '------------------------------------------------------------------------------
3ffc4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3ffc4 05f             | ' calculated while the data byte is being shifted out. Since data stage
3ffc4 05f             | ' success/fail is not determined until the status stage of the transaction,
3ffc4 05f             | ' this routine is only concerned about the current DATAx packet.
3ffc4 05f             | '------------------------------------------------------------------------------
3ffc4 05f             | ' On entry:
3ffc4 05f             | '   PTRA - hub start address of the data to read.
3ffc4 05f             | '   pkt_cnt - data payload size.
3ffc4 05f             | ' On exit:
3ffc4 05f             | '------------------------------------------------------------------------------
3ffc4 05f             | utx_data
3ffc4 05f 22 A7 82 FA |                 rqpin   urx, dm
3ffc8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3ffcc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3ffd0 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3ffd4 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3ffd8 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3ffdc 065 D8 0C B0 CD |         if_c    call    #utx_pre
3ffe0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3ffe4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3ffe8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3ffec 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3fff0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3fff4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3fff8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3fffc 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
40000 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
40004 06f             | .read_byte
40004 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
40008 070 F0 00 B0 FD |                 call    #utx_byte
4000c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
40010 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
40014 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
40018 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
4001c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
40020 076             | .send_crc
40020 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
40024 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
40028 078 D0 00 B0 FD |                 call    #utx_byte
4002c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
40030 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
40034 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
40038 07c             | 
40038 07c             | '------------------------------------------------------------------------------
40038 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
40038 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
40038 07c             | ' expects that the packet includes at least the CRC word.
40038 07c             | '
40038 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
40038 07c             | ' was requested, which makes it difficult to determine where the data stops
40038 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
40038 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
40038 07c             | ' USB-16 expected residual value of 0xB001.
40038 07c             | '
40038 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
40038 07c             | ' so the caller can verify IN success before writing the data to its final
40038 07c             | ' destination.
40038 07c             | '------------------------------------------------------------------------------
40038 07c             | ' On entry:
40038 07c             | '   pkt_data - max byte count expected to be in the packet.
40038 07c             | '   newb_flg - signals new byte ready when toggled.
40038 07c             | ' On exit:
40038 07c             | '   pkt_cnt - actual number of bytes read.
40038 07c             | '------------------------------------------------------------------------------
40038 07c             | urx_data
40038 07c F7 75 03 F6 |                 mov     htmp2, pb
4003c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
40040 07e 00 00 C0 FF 
40044 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
40048 080 BA EF 03 F6 |                 mov     pb, htmp2
4004c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
40050 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
40054 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
40058 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
4005c 085             | .wait_byte
4005c 085             | ' In-line rx for max speed
4005c 085 22 A7 82 FA |                 rqpin   urx, dm
40060 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
40064 087 53 A5 02 F5 |                 and     utx, urx
40068 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
4006c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
40070 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
40074 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
40078 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
4007c 08d DC FF 9F FD |                 jmp     #.wait_byte
40080 08e             | .get_byte
40080 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
40084 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
40088 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
4008c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
40090 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
40094 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
40098 094             | .end_crc
40098 094 01 B8 06 F1 |                 add     pkt_cnt, #1
4009c 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
400a0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
400a4 097 2D 00 64 1D |         if_a    ret
400a8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
400a8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
400a8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
400a8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
400a8 098 22 A7 82 FA |                 rqpin   urx, dm
400ac 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
400b0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
400b4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
400b4 09b             | .chk_crc
400b4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
400b8 09c 58 00 00 FF 
400bc 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
400c0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
400c4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
400c8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
400cc 0a1 34 09 B0 FD |                 call    #poll_waitx
400d0 0a2             | 
400d0 0a2             |                 ' Fall through to utx_handshake
400d0 0a2             | 
400d0 0a2             | '------------------------------------------------------------------------------
400d0 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
400d0 0a2             | ' the appropriate IP delay has been inserted.
400d0 0a2             | '------------------------------------------------------------------------------
400d0 0a2             | ' On entry:
400d0 0a2             | '   retval - handshake PID to send.
400d0 0a2             | ' On exit:
400d0 0a2             | '   retval unchanged.
400d0 0a2             | '------------------------------------------------------------------------------
400d0 0a2             | utx_handshake
400d0 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
400d4 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
400d8 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
400dc 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
400e0 0a6 5F A5 02 F6 |                 mov     utx, retval
400e4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
400e8 0a8             | .idle
400e8 0a8 22 A7 82 FA |                 rqpin   urx, dm
400ec 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
400f0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
400f4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
400f8 0ac 08 09 90 FD |                 jmp     #poll_waitx
400fc 0ad             | 
400fc 0ad             | '------------------------------------------------------------------------------
400fc 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
400fc 0ad             | '------------------------------------------------------------------------------
400fc 0ad             | ' On entry:
400fc 0ad             | '   utx - byte to transmit.
400fc 0ad             | ' On exit:
400fc 0ad             | '------------------------------------------------------------------------------
400fc 0ad             | utx_byte
400fc 0ad 40 46 72 FD |                 testp   dp                      wc
40100 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
40104 0af 23 03 08 FC |                 akpin   dp
40108 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
4010c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
40110 0b2             | 
40110 0b2             | '------------------------------------------------------------------------------
40110 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
40110 0b2             | '------------------------------------------------------------------------------
40110 0b2             | ' On entry:
40110 0b2             | ' On exit:
40110 0b2             | '   retval - the byte read.
40110 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
40110 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
40110 0b2             | '     received.
40110 0b2             | '------------------------------------------------------------------------------
40110 0b2             | urx_next
40110 0b2 22 A7 8A FA |                 rdpin   urx, dm
40114 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
40118 0b4 53 A5 02 F5 |                 and     utx, urx
4011c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
40120 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
40124 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
40128 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
4012c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40130 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
40134 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
40138 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
4013c 0bd 2D 00 64 FD |                 ret
40140 0be             | 
40140 0be             | '------------------------------------------------------------------------------
40140 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
40140 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
40140 0be             | ' length, and the PID is not included in the CRC calculation:
40140 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
40140 0be             | '  CRC5  ENDP ADDRESS PID
40140 0be             | ' %00000_1111_1111111_xxxxxxxx
40140 0be             | '------------------------------------------------------------------------------
40140 0be             | ' On entry:
40140 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
40140 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
40140 0be             | ' On exit:
40140 0be             | '   ep_addr_pid - CRC value appended to the packet.
40140 0be             | '------------------------------------------------------------------------------
40140 0be             | calc_crc5
40140 0be FF 03 00 FF 
40144 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
40148 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
4014c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
40150 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
40154 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
40158 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
4015c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
40160 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
40164 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
40168 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
4016c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
40170 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
40174 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
40178 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
4017c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
40180 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
40184 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
40188 0d0             | 
40188 0d0             | '------------------------------------------------------------------------------
40188 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
40188 0d0             | '------------------------------------------------------------------------------
40188 0d0             | isr1_fsframe
40188 0d0 1A 92 62 FD |                 getct   iframe_ct_base
4018c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40190 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40194 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
40198 0d4             | .wait
40198 0d4 40 46 72 FD |                 testp   dp                      wc
4019c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
401a0 0d6 23 03 08 FC |                 akpin   dp
401a4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
401a8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
401ac 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
401b0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
401b4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
401b8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
401bc 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
401c0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
401c4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
401c8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
401cc 0e1 2C FF BF FD |                 call    #utx_byte
401d0 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
401d4 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
401d8 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
401dc 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
401e0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
401e4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
401e8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
401ec 0e9 5B A5 42 F5 |                 or      utx, icrc
401f0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
401f4 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
401f8 0ec 20 00 90 FD |                 jmp     #isr1_wait
401fc 0ed             | isr1_lsframe
401fc 0ed 1A 92 62 FD |                 getct   iframe_ct_base
40200 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40204 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40208 0f0             | .wait
40208 0f0 40 46 72 FD |                 testp   dp                      wc
4020c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
40210 0f2 23 03 08 FC |                 akpin   dp
40214 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
40218 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
4021c 0f5             | isr1_wait
4021c 0f5 22 A5 82 FA |                 rqpin   utx, dm
40220 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
40224 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
40228 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
4022c 0f9 03 00 00 FF 
40230 0fa FF B3 06 F5 |                 and     frame, ##$7ff
40234 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
40238 0fc F5 FF 3B FB |                 reti1
4023c 0fd             | 
4023c 0fd             | '------------------------------------------------------------------------------
4023c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
4023c 0fd             | ' transaction will complete before the next frame is triggered.
4023c 0fd             | '------------------------------------------------------------------------------
4023c 0fd             | ' On entry:
4023c 0fd             | ' On exit:
4023c 0fd             | '------------------------------------------------------------------------------
4023c 0fd             | wait_txn_ok
4023c 0fd 1A 74 63 FD |                 getct   htmp2
40240 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
40244 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40248 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
4024c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
40250 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
40254 103 2D 00 64 FD |                 ret
40258 104             | 
40258 104             | '------------------------------------------------------------------------------
40258 104             | ' A device connection was detected, or a bus reset was requested by the USB
40258 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
40258 104             | ' and perform a reset sequence prior to device enumeration.
40258 104             | '------------------------------------------------------------------------------
40258 104             | dev_reset
40258 104 22 A7 82 FA |                 rqpin   urx, dm
4025c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
40260 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
40264 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
40268 108             | reset
40268 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
4026c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
40270 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
40274 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40278 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
4027c 10d 1A 92 62 FD |                 getct   iframe_ct_base
40280 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40284 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40288 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
4028c 111 24 70 07 F1 |                 add     htmp, #36
40290 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
40294 113             | .framewait
40294 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
40298 114 F8 FF 9F CD |         if_b    jmp     #.framewait
4029c 115 2D 00 64 FD |                 ret
402a0 116             | 
402a0 116             | '------------------------------------------------------------------------------
402a0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
402a0 116             | '------------------------------------------------------------------------------
402a0 116             | ' On entry:
402a0 116             | '   PTRA - source address.
402a0 116             | '   PB - destination address.
402a0 116             | '   hr0 - length of copy, in bytes.
402a0 116             | ' On exit:
402a0 116             | '------------------------------------------------------------------------------
402a0 116             | hmemcpy
402a0 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
402a4 117 F7 71 43 FC |                 wrbyte  htmp, pb
402a8 118 01 EE 07 F1 |                 add     pb, #1
402ac 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
402b0 11a             | 
402b0 11a             | '------------------------------------------------------------------------------
402b0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
402b0 11a             | ' loop until the errant device is disconnected.
402b0 11a             | '------------------------------------------------------------------------------
402b0 11a             | ' On entry:
402b0 11a             | ' On exit:
402b0 11a             | '------------------------------------------------------------------------------
402b0 11a             | host_error
402b0 11a             |           if ERROR_LED >= 0
402b0 11a             |           end
402b0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
402b4 11b             | 
402b4 11b             | '------------------------------------------------------------------------------
402b4 11b             | ' Get HID descriptor buffer for current port
402b4 11b             | '------------------------------------------------------------------------------
402b4 11b             | ' On entry:
402b4 11b             | ' On exit:
402b4 11b             | '   PB - HID descriptor buffer pointer
402b4 11b             | '------------------------------------------------------------------------------
402b4 11b             | get_hid_descr_buffer
402b4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
402b8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
402bc 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
402c0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
402c4 11f             | 
402c4 11f             | 
402c4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
402c8 120             | 
402c8 120             | ' USB commands and error codes
402c8 120 00 00 00 00 | cmd_data        long    0
402cc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
402d0 122             | 
402d0 122             | ' Parameters block assigned at cog startup
402d0 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
402d4 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
402d8 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
402dc 125             | if ACTIVITY_LED >= 0
402dc 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
402dc 125             | end
402dc 125             | if ERROR_LED >= 0
402dc 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
402dc 125             | end
402dc 125 00 00 00 00 | hid_descr_p     long    0
402e0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
402e0 126             | 'hkbd_report_p   long    0
402e0 126 00 00 00 00 | hub_descr_p     long    0
402e4 127 00 00 00 00 | urx_buff_p      long    0
402e8 128 00 00 00 00 | dev_desc_buff_p long    0
402ec 129 00 00 00 00 | con_desc_buff_p long    0
402f0 12a 00 00 00 00 | cache_start_p   long    0
402f4 12b 00 00 00 00 | cache_end_p     long    0
402f8 12c             | if EMUPAD_MAX_PLAYER > 0
402f8 12c             | emupad_out_ptr  long    0
402f8 12c             | end
402f8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
402fc 12d             | 
402fc 12d             | hdev_init_start
402fc 12d             | hdev_port       res     1
402fc 12d             | hdev_port       res     1
402fc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
402fc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
402fc 12d             | kbm_next_datax  res     1
402fc 12d             | kbm_next_datax  res     1
402fc 12d             | hub_intf_num    res     1
402fc 12d             | hub_intf_num    res     1
402fc 12d             | hub_next_datax  res     1
402fc 12d             | hub_next_datax  res     1
402fc 12d             | hub_status_chg  res     1
402fc 12d             | hub_status_chg  res     1
402fc 12d             | hub_port_status res     1
402fc 12d             | hub_port_status res     1
402fc 12d             | if HAVE_MOUSE
402fc 12d             | ms_intf_num     res     1
402fc 12d             | ms_intf_num     res     1
402fc 12d             | ms_in_max_pkt   res     1
402fc 12d             | ms_in_max_pkt   res     1
402fc 12d             | end
402fc 12d             | kb_intf_num     res     1
402fc 12d             | kb_intf_num     res     1
402fc 12d             | kb_interval     res     1
402fc 12d             | kb_interval     res     1
402fc 12d             | kb_in_max_pkt   res     1
402fc 12d             | kb_in_max_pkt   res     1
402fc 12d             | kb_max_index    res     1
402fc 12d             | kb_max_index    res     1
402fc 12d             | kb_led_states   res     1
402fc 12d             | kb_led_states   res     1
402fc 12d             | gp_intf_num     res     1
402fc 12d             | gp_intf_num     res     1
402fc 12d             | gp_interval     res     1
402fc 12d             | gp_interval     res     1
402fc 12d             | gp_max_index    res     1
402fc 12d             | gp_max_index    res     1
402fc 12d             | gp_descr_len    res     1+MAX_DEVICES
402fc 12d             | gp_descr_len    res     1+MAX_DEVICES
402fc 12d             | hdev_init_end
402fc 12d             | 
402fc 12d             | ' Initialized at cog startup:
402fc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
402fc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
402fc 12d             | iframe_ct_new   res     1
402fc 12d             | iframe_ct_new   res     1
402fc 12d             | iframe_ct_base  res     1
402fc 12d             | iframe_ct_base  res     1
402fc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
402fc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
402fc 12d             | 
402fc 12d             | ' This register block is reset to zero when a USB device connects
402fc 12d             | hreg_init_start
402fc 12d             | hstatus         res     1         ' Host status flags
402fc 12d             | hstatus         res     1         ' Host status flags
402fc 12d             | hctwait         res     1         ' Poll-based wait clocks
402fc 12d             | hctwait         res     1         ' Poll-based wait clocks
402fc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
402fc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
402fc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
402fc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
402fc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
402fc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
402fc 12d             | xfer_retry      res     1         ' Control transfer retry count
402fc 12d             | xfer_retry      res     1         ' Control transfer retry count
402fc 12d             | retry           res     1         ' Transaction retry count
402fc 12d             | retry           res     1         ' Transaction retry count
402fc 12d             | utx             res     1         ' Byte to transmit on USB
402fc 12d             | utx             res     1         ' Byte to transmit on USB
402fc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
402fc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
402fc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
402fc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
402fc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
402fc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
402fc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
402fc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
402fc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
402fc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
402fc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
402fc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
402fc 12d             | frame           res     1         ' USB 1ms frame counter value
402fc 12d             | frame           res     1         ' USB 1ms frame counter value
402fc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
402fc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
402fc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
402fc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
402fc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
402fc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
402fc 12d             | crc             res     1         ' Used for CRC16 calculation
402fc 12d             | crc             res     1         ' Used for CRC16 calculation
402fc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
402fc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
402fc 12d             | retval          res     1         ' Global success/fail return parameter
402fc 12d             | retval          res     1         ' Global success/fail return parameter
402fc 12d             | context_retval  res     1         ' Operation contextual return parameter
402fc 12d             | context_retval  res     1         ' Operation contextual return parameter
402fc 12d             | ' Device stuff
402fc 12d             | hdev_id         res     1+MAX_DEVICES
402fc 12d             | hdev_id         res     1+MAX_DEVICES
402fc 12d             | hdev_bcd        res     1
402fc 12d             | hdev_bcd        res     1
402fc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
402fc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
402fc 12d             | ' Keyboard/mouse stuff
402fc 12d             | hctrl_ep_addr   res     1
402fc 12d             | hctrl_ep_addr   res     1
402fc 12d             | hctrl_max_pkt   res     1
402fc 12d             | hctrl_max_pkt   res     1
402fc 12d             | hconfig_base    res     1
402fc 12d             | hconfig_base    res     1
402fc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
402fc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
402fc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
402fc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
402fc 12d             | hdev_class      res     1
402fc 12d             | hdev_class      res     1
402fc 12d             | hdev_subclass   res     1
402fc 12d             | hdev_subclass   res     1
402fc 12d             | hdev_protocol   res     1
402fc 12d             | hdev_protocol   res     1
402fc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
402fc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
402fc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
402fc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
402fc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
402fc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
402fc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
402fc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
402fc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
402fc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
402fc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
402fc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
402fc 12d             | if HAVE_MOUSE
402fc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
402fc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
402fc 12d             | end
402fc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
402fc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
402fc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
402fc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
402fc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
402fc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
402fc 12d             | hdev_out_addr   res     1
402fc 12d             | hdev_out_addr   res     1
402fc 12d             | 
402fc 12d             | if EMUPAD_MAX_PLAYER > 0
402fc 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
402fc 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
402fc 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
402fc 12d             | end
402fc 12d             | 
402fc 12d             | hreg_init_end
402fc 12d             | 
402fc 12d             | hidr_start
402fc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
402fc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
402fc 12d             | hidr_flags      res     1
402fc 12d             | hidr_flags      res     1
402fc 12d             | hidr_axis       res     3
402fc 12d             | hidr_axis       res     3
402fc 12d             | hidr_buttons    res     1
402fc 12d             | hidr_buttons    res     1
402fc 12d             | hidr_hats       res     1
402fc 12d             | hidr_hats       res     1
402fc 12d             | '' Above are actually useful values, 6 longs
402fc 12d             | hidr_id         res     1
402fc 12d             | hidr_id         res     1
402fc 12d             | hidr_state      res     1
402fc 12d             | hidr_state      res     1
402fc 12d             | hidr_size       res     1
402fc 12d             | hidr_size       res     1
402fc 12d             | hidr_count      res     1
402fc 12d             | hidr_count      res     1
402fc 12d             | hidr_offset     res     1
402fc 12d             | hidr_offset     res     1
402fc 12d             | hidr_usage_idx  res     1
402fc 12d             | hidr_usage_idx  res     1
402fc 12d             | hidr_lminmax    res     1
402fc 12d             | hidr_lminmax    res     1
402fc 12d             | hidr_pminmax    res     1
402fc 12d             | hidr_pminmax    res     1
402fc 12d             | hidr_type       res     1
402fc 12d             | hidr_type       res     1
402fc 12d             | hidr_end
402fc 12d             | 
402fc 12d             | ' Variables dependent on the system freqency
402fc 12d             | _var_64_lower_  res     1
402fc 12d             | _var_64_lower_  res     1
402fc 12d             | _var_64_upper_  res     1
402fc 12d             | _var_64_upper_  res     1
402fc 12d             | _12Mbps_        res     1
402fc 12d             | _12Mbps_        res     1
402fc 12d             | _1_5Mbps_       res     1
402fc 12d             | _1_5Mbps_       res     1
402fc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
402fc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
402fc 12d             | _1us_           res     1         ' 1us
402fc 12d             | _1us_           res     1         ' 1us
402fc 12d             | _10us_          res     1         ' 10us
402fc 12d             | _10us_          res     1         ' 10us
402fc 12d             | _33us_          res     1         ' 33us
402fc 12d             | _33us_          res     1         ' 33us
402fc 12d             | _txn_err_       res     1         ' 250us
402fc 12d             | _txn_err_       res     1         ' 250us
402fc 12d             | _500us_         res     1         ' 500us
402fc 12d             | _500us_         res     1         ' 500us
402fc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
402fc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
402fc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
402fc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
402fc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
402fc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
402fc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
402fc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
402fc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
402fc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
402fc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
402fc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
402fc 12d             | _preamble_wait_ res     1
402fc 12d             | _preamble_wait_ res     1
402fc 12d             | _1ms_           res     1         ' 1ms
402fc 12d             | _1ms_           res     1         ' 1ms
402fc 12d             | _2ms_           res     1         ' 2ms
402fc 12d             | _2ms_           res     1         ' 2ms
402fc 12d             | _suspend_wait_  res     1         ' 3ms
402fc 12d             | _suspend_wait_  res     1         ' 3ms
402fc 12d             | _4ms_           res     1         ' 4ms
402fc 12d             | _4ms_           res     1         ' 4ms
402fc 12d             | _xfer_wait_     res     1         ' 5ms
402fc 12d             | _xfer_wait_     res     1         ' 5ms
402fc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
402fc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
402fc 12d             | _reset_hold_    res     1         ' 15ms
402fc 12d             | _reset_hold_    res     1         ' 15ms
402fc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
402fc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
402fc 12d             | _21ms_          res     1         ' 21ms
402fc 12d             | _21ms_          res     1         ' 21ms
402fc 12d             | _100ms_         res     1         ' 100ms
402fc 12d             | _100ms_         res     1         ' 100ms
402fc 12d             | _500ms_         res     1         ' 500ms
402fc 12d             | _500ms_         res     1         ' 500ms
402fc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
402fc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
402fc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
402fc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
402fc 12d             | '------------------------------------------------------------------------------
402fc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
402fc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
402fc 12d             | _usb_d_ls_nco_  res     1
402fc 12d             | _usb_d_ls_nco_  res     1
402fc 12d             | _usb_h_fs_nco_  res     1
402fc 12d             | _usb_h_fs_nco_  res     1
402fc 12d             | _usb_d_fs_nco_  res     1
402fc 12d             | _usb_d_fs_nco_  res     1
402fc 12d             | '------------------------------------------------------------------------------
402fc 12d             | ' Scratch registers
402fc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
402fc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
402fc 12d             | htmp1           res     1
402fc 12d             | htmp1           res     1
402fc 12d             | htmp2           res     1
402fc 12d             | htmp2           res     1
402fc 12d             | htmp3           res     1
402fc 12d             | htmp3           res     1
402fc 12d             | hrep            res     1         ' Repeat count
402fc 12d             | hrep            res     1         ' Repeat count
402fc 12d             | hsave0          res     1         ' Subroutine parameter saves
402fc 12d             | hsave0          res     1         ' Subroutine parameter saves
402fc 12d             | hsave1          res     1
402fc 12d             | hsave1          res     1
402fc 12d             | hsave2          res     1
402fc 12d             | hsave2          res     1
402fc 12d             | isrtmp1         res     1
402fc 12d             | isrtmp1         res     1
402fc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
402fc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
402fc 12d             | hr0             res     1         ' Multi-purpose registers
402fc 12d             | hr0             res     1         ' Multi-purpose registers
402fc 12d             | hr1             res     1
402fc 12d             | hr1             res     1
402fc 12d             | hr2             res     1
402fc 12d             | hr2             res     1
402fc 12d             | hr3             res     1
402fc 12d             | hr3             res     1
402fc 12d             | hpar1           res     1         ' Routine entry/exit parameters
402fc 12d             | hpar1           res     1         ' Routine entry/exit parameters
402fc 12d             | hpar2           res     1
402fc 12d             | hpar2           res     1
402fc 12d             | hpar3           res     1
402fc 12d             | hpar3           res     1
402fc 12d             | hct2            res     1         ' Function response bus turn-around timer
402fc 12d             | hct2            res     1         ' Function response bus turn-around timer
402fc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
402fc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
402fc 12d             | mod_cnt         res     1         ' Used in idle loops
402fc 12d             | mod_cnt         res     1         ' Used in idle loops
402fc 12d             |                 fit     $1F0
402fc 12d             |                 org     $200
402fc 200             | hlut_start
402fc 200             | 
402fc 200             | '------------------------------------------------------------------------------
402fc 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
402fc 200             | ' settings to startup defaults.
402fc 200             | '------------------------------------------------------------------------------
402fc 200             | ' On entry:
402fc 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
402fc 200             | '------------------------------------------------------------------------------
402fc 200             | set_speed_full
402fc 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
40300 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
40304 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
40308 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
4030c 204             | '                ret                             wcz     ' Restore caller flags on exit
4030c 204             | 
4030c 204             | '------------------------------------------------------------------------------
4030c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
4030c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
4030c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
4030c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
4030c 204             | ' putting the smart pins into reset.
4030c 204             | '------------------------------------------------------------------------------
4030c 204             | ' On entry:
4030c 204             | ' On exit: CZ flags restored to caller states
4030c 204             | '------------------------------------------------------------------------------
4030c 204             | set_speed_low
4030c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
40310 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
40314 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
40318 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
4031c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
40320 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
40324 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
40328 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
4032c 20c             | 
4032c 20c             | '------------------------------------------------------------------------------
4032c 20c             | ' Perform configuration stuff required when a device intitially connects.
4032c 20c             | '------------------------------------------------------------------------------
4032c 20c             | ' On entry:
4032c 20c             | ' On exit:
4032c 20c             | '------------------------------------------------------------------------------
4032c 20c             | on_connect
4032c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
40330 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
40334 20e             | .retry
40334 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40338 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
4033c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
40340 211 00 08 00 FF 
40344 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
40348 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
4034c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
40350 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
40354 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
40358 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
4035c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40360 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
40364 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
40368 21b 4C 03 B0 FD |                 call    #poll_waitx
4036c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
40370 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
40374 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
40378 21f B8 FF 9F FD |                 jmp     #.retry
4037c 220             | .get_dev_desc
4037c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
40380 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
40384 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
40388 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
4038c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
40390 225 88 FB BF FD |                 call    #reset
40394 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
40398 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
4039c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
403a0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
403a4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
403a8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
403ac 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
403b0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
403b4 22e 04 00 00 FF 
403b8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
403bc 230 34 FA BF FD |                 call    #calc_crc5
403c0 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
403c4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
403c8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
403cc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
403d0 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
403d4 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
403d8 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
403dc 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
403e0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
403e4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
403e8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
403ec 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
403f0 23d C4 02 B0 FD |                 call    #poll_waitx
403f4 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
403f8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
403fc 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
40400 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
40404 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
40408 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4040c 244 2D 00 64 5D |         if_nz   ret
40410 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
40414 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
40418 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
4041c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
40420 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
40424 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
40428 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
4042c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
40430 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
40434 24e 2C FB 9F CD |         if_b    jmp     #host_error
40438 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
4043c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
40440 251 2D EC 63 FD |                 call    pa
40444 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
40448 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
4044c 254 2C EC 63 FD |                 jmp     pa
40450 255             | 
40450 255             | '------------------------------------------------------------------------------
40450 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
40450 255             | ' Status reporting is always in the function-to-host direction.
40450 255             | '------------------------------------------------------------------------------
40450 255             | ' On entry:
40450 255             | '   PTRA - start address of the SETUP data in hub.
40450 255             | '   PB - start address of the buffer/struct to be written to during the IN data
40450 255             | '     stage.
40450 255             | '   ep_addr_pid - device address, endpoint and CRC5.
40450 255             | ' On exit:
40450 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
40450 255             | '     contains the count of data stage bytes actually received, which must
40450 255             | '     always be <= the count requested.
40450 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
40450 255             | '     more specific USB operation error code.
40450 255             | '------------------------------------------------------------------------------
40450 255             | control_read
40450 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
40454 256 F8 8F 03 F6 |                 mov     hpar2, ptra
40458 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
4045c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
40460 259             | .xfer_start
40460 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
40464 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
40468 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4046c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
40470 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
40474 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
40478 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
4047c 260 61 00 00 FF 
40480 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
40484 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
40488 263             | .data
40488 263 56 B1 02 F6 |                 mov     pkt_data, total_data
4048c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
40490 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
40494 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
40498 267             | .nak_retry
40498 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
4049c 268             | .in_retry
4049c 268 BC F6 BF FD |                 call    #txn_in
404a0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
404a4 26a 28 00 90 AD |         if_z    jmp     #.commit
404a8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
404ac 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
404b0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
404b4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
404b8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
404bc 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
404c0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
404c4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
404c8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
404cc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
404d0 275             | .commit
404d0 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
404d4 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
404d8 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
404dc 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
404e0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
404e4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
404e8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
404ec 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
404f0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
404f4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
404f8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
404fc 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
40500 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
40504 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
40508 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
4050c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
40510 285             | .pre_status
40510 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
40514 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
40518 287 00 B0 06 F6 |                 mov     pkt_data, #0
4051c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
40520 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
40524 28a 61 00 00 FF 
40528 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
4052c 28c             | .out_retry
4052c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
40530 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40534 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
40538 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
4053c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
40540 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
40544 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
40548 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
4054c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40550 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
40554 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
40558 297             | ' I've encountered transfer STALL, even though the data looks correct, and
40558 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
40558 297             | ' ControlRead() transfer gets things unstuck most of the time...
40558 297             | .xfer_retry
40558 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
4055c 298 58 01 B0 FD |                 call    #poll_waitx
40560 299 8C F9 BF FD |                 call    #wait_txn_ok
40564 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
40568 29b C7 F1 03 F6 |                 mov     ptra, hpar2
4056c 29c C8 EF 03 F6 |                 mov     pb, hpar3
40570 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
40574 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
40578 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
4057c 2a0             | 
4057c 2a0             | '------------------------------------------------------------------------------
4057c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
4057c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
4057c 2a0             | ' the SETUP data struct is filled with the required values.
4057c 2a0             | '------------------------------------------------------------------------------
4057c 2a0             | ' On entry:
4057c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
4057c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
4057c 2a0             | '     stage.
4057c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
4057c 2a0             | ' On exit:
4057c 2a0             | '   retval - used to convey the success/failure of each stage.
4057c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
4057c 2a0             | '     more specific USB operation error code.
4057c 2a0             | '------------------------------------------------------------------------------
4057c 2a0             | control_write
4057c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
40580 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
40584 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
40588 2a3             | 
40588 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
4058c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
40590 2a5 F7 91 03 F6 |                 mov     hpar3, pb
40594 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
40598 2a7             | .xfer_start
40598 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
4059c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
405a0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
405a4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
405a8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
405ac 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
405b0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
405b4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
405b8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
405bc 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
405c0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
405c4 2b2             | .data
405c4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
405c8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
405cc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
405d0 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
405d4 2b6             | .out_retry
405d4 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
405d8 2b7 88 F6 BF FD |                 call    #txn_out
405dc 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
405e0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
405e4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
405e8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
405ec 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
405f0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
405f4 2be             | .commit
405f4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
405f8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
405fc 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
40600 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
40604 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
40608 2c3             | pre_status_in
40608 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
4060c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
40610 2c5             | .status_retry
40610 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
40614 2c6 44 F5 BF FD |                 call    #txn_in
40618 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
4061c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
40620 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
40624 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
40628 2cb 2D 00 64 AD |         if_z    ret
4062c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
40630 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40634 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
40638 2cf             | '               ret                                     ' Caller must handle transfer retirement
40638 2cf             | 
40638 2cf             | '------------------------------------------------------------------------------
40638 2cf             | ' Execute an IN interrupt transaction.
40638 2cf             | '------------------------------------------------------------------------------
40638 2cf             | ' On entry:
40638 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
40638 2cf             | '   hpar2 - Address of the IN data buffer
40638 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
40638 2cf             | ' On exit:
40638 2cf             | '   retval - the result of the operation.
40638 2cf             | '   hpar3 - the count of IN data bytes actually received.
40638 2cf             | '------------------------------------------------------------------------------
40638 2cf             | do_int_in
40638 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
4063c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
40640 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
40644 2d2             | 
40644 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
40648 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
4064c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
40650 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
40654 2d6             | .retry
40654 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
40658 2d7 00 F5 BF FD |                 call    #txn_in
4065c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
40660 2d9 1C 00 90 AD |         if_z    jmp     #.commit
40664 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
40668 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
4066c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
40670 2dd 54 00 B0 FD |                 call    #retry_wait
40674 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40678 2df 18 00 90 AD |         if_z    jmp     #.post_ret
4067c 2e0 D4 FF 9F FD |                 jmp     #.retry
40680 2e1             | .commit
40680 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
40684 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
40688 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
4068c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
40690 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
40694 2e6             | .post_ret
40694 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
40698 2e7             | 
40698 2e7             | 
40698 2e7             | '------------------------------------------------------------------------------
40698 2e7             | ' Resets the downstream hub port to FS
40698 2e7             | '------------------------------------------------------------------------------
40698 2e7             | dwnstream_reset
40698 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
4069c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
406a0 2e9             | 
406a0 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
406a4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
406a8 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
406ac 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
406b0 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
406b4 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
406b8 2ef             | 
406b8 2ef             | '------------------------------------------------------------------------------
406b8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
406b8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
406b8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
406b8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
406b8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
406b8 2ef             | '------------------------------------------------------------------------------
406b8 2ef             | ' On entry:
406b8 2ef             | '   hctwait - wait interval in sysclocks.
406b8 2ef             | ' On exit:
406b8 2ef             | '------------------------------------------------------------------------------
406b8 2ef             | poll_waitx
406b8 2ef 1A 92 63 FD |                 getct   hct2
406bc 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
406c0 2f1             | .wait
406c0 2f1 FF 25 CC FB |                 jnct2   #.wait
406c4 2f2 2D 00 64 FD |                 ret
406c8 2f3             | 
406c8 2f3             | '------------------------------------------------------------------------------
406c8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
406c8 2f3             | '------------------------------------------------------------------------------
406c8 2f3             | ' On entry:
406c8 2f3             | '   retval - transaction response PID or error code.
406c8 2f3             | ' On exit:
406c8 2f3             | '------------------------------------------------------------------------------
406c8 2f3             | retry_wait
406c8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
406cc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
406d0 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
406d4 2f6 14 00 90 AD |         if_z    jmp     #.nak
406d8 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
406dc 2f8 D8 FF BF FD |                 call    #poll_waitx
406e0 2f9             | .dec
406e0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
406e4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
406e8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
406ec 2fc             | .nak
406ec 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
406f0 2fd C4 FF BF FD |                 call    #poll_waitx
406f4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
406f8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
406fc 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
40700 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
40704 302 2D 00 64 FD |                 ret
40708 303             | 
40708 303             | host_reset
40708 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
4070c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
40710 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
40710 305 BD 01 05 FF 
40714 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
40718 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
4071c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
40720 309             | ' Check to see if the system clock has been changed.
40720 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
40724 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
40728 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
4072c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
40730 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
40734 30e 40 46 62 FD |                 dirl    dp
40738 30f             | 
40738 30f 28 02 64 FD |                 setq    #1
4073c 310 80 00 80 FF 
40740 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
40744 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
40748 313             | .enable
40748 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
4074c 314 41 46 62 FD |                 dirh    dp
40750 315 1F 36 63 FD |                 waitx   _1us_
40754 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40758 317             | 
40758 317             |                 ' Handle Port protection enable and startup delay
40758 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
4075c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
40760 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
40764 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
40768 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
4076c 31c             | 
4076c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
40770 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
40774 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
40778 31f 00 00 04 F6 |                 mov     0-0, #0
4077c 320             | .regloop
4077c 320             | 
4077c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
4077c 320             | 
4077c 320             | discon_entry
4077c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
40780 321             | 
40780 321             |               
40780 321             |         if HAVE_HIDPAD
40780 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
40784 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
40788 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
4078c 324 F7 01 68 FC |                 wrlong  #0,pb
40790 325             |         end
40790 325             |         if EMUPAD_MAX_PLAYER > 0
40790 325             |         end
40790 325             | 
40790 325             |                 ' Fall through to disconnected loop
40790 325             | 
40790 325             | '-----------------------------------------------------------------------------------------------------------------
40790 325             | ' Device connect handling (Section 7.1.7.3).
40790 325             | '-----------------------------------------------------------------------------------------------------------------
40790 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
40790 325             | ' device to connect (Section 7.1.7.3).
40790 325             | '-----------------------------------------------------------------------------------------------------------------
40790 325             | disconnected
40790 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
40794 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
40798 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
4079c 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
407a0 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
407a4 32a             |         if ACTIVITY_LED >= 0
407a4 32a             |         end
407a4 32a 22 A7 82 FA |                 rqpin   urx, dm
407a8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
407ac 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
407b0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
407b4 32e             | .se1_test
407b4 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
407b8 32f FC FE BF FD |                 call    #poll_waitx
407bc 330 22 A7 82 FA |                 rqpin   urx, dm
407c0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
407c4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
407c8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
407cc 334             | .se1            'SE1 is a fatal error condition
407cc 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
407d0 335 E4 FE BF FD |                 call    #poll_waitx
407d4 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
407d8 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
407dc 338             | .connect_test                                           ' Test lines until stable J/K state seen
407dc 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
407e0 339 22 A7 82 FA |                 rqpin   urx, dm
407e4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
407e8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
407ec 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
407f0 33d             | connected
407f0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
407f4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
407f8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
407fc 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
40800 341             | .set_pulse
40800 341 1A 64 63 FD |                 getct   _pulse_time_
40804 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
40808 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
40808 343             | ' of 1ms and make a correction, if necessary.
40808 343             | '                mov     htmp, _1ms_
40808 343             | '                subs    htmp, iframe_delta
40808 343             | '                adds    _frame1ms_clks_, htmp
40808 343             | '                debug(udec(_frame1ms_clks_))
40808 343             | 
40808 343             |                 ' Fall through to idle/processing loop
40808 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
4080c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
40810 345             | 
40810 345             | hidle
40810 345 22 A7 82 FA |                 rqpin   urx, dm
40814 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
40818 347 98 00 90 CD |         if_c    jmp     #.se0_test
4081c 348 24 06 70 FD |                 pollct3                         wc
40820 349 68 00 90 3D |         if_nc   jmp     #.nopoll
40824 34a 1A 94 63 FD |                 getct   hct3
40828 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
4082c 34c             | 
4082c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
40830 34d 00 70 E3 F8 |                 getbyte htmp
40834 34e             | 
40834 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
40838 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
4083c 350 40 00 90 AD |         if_z    jmp     #.poll
40840 351             | 
40840 351             |         if _HAVE_GAMEPAD
40840 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
40844 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
40848 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
4084c 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
40850 355 2C 00 90 AD |         if_z    jmp     #.poll
40854 356             |         end
40854 356             | 
40854 356             |         if HAVE_MOUSE
40854 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
40858 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
4085c 358 20 00 90 AD |         if_z    jmp     #.poll
40860 359             |         end
40860 359             | 
40860 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
40864 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
40868 35b 14 00 90 AD |         if_z    jmp     #.poll
4086c 35c             | 
4086c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
40870 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
40874 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
40878 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
4087c 360             |         if HAVE_MOUSE
4087c 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
40880 361             |         else
40880 361             |         end
40880 361             | 
40880 361             | .poll
40880 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
40884 362 2D EC 63 FD |                 call    pa
40888 363             | .skip_poll
40888 363             | 
40888 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
4088c 364             | 
4088c 364             | .nopoll
4088c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
40890 365 44 00 90 AD |         if_z    jmp     #hsuspend
40894 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
40898 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
4089c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
408a0 369 1A 84 63 FD |                 getct   hr0
408a4 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
408a8 36b             |         if ACTIVITY_LED >= 0
408a8 36b             |         end
408a8 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
408ac 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
408b0 36d 5C FF 9F FD |                 jmp     #hidle
408b4 36e             | ' Check for extended SE0 state on the bus
408b4 36e             | .se0_test
408b4 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
408b8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
408bc 370 22 A7 82 FA |                 rqpin   urx, dm
408c0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
408c4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
408c8 373 24 F6 BF FD |                 call    #wait_txn_ok
408cc 374 00 00 80 FF 
408d0 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
408d4 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
408d4 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
408d8 377             | 
408d8 377             | hsuspend
408d8 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
408dc 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
408e0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
408e4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
408e8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
408ec 37c 00 96 07 F6 |                 mov     mod_cnt, #0
408f0 37d             | 
408f0 37d             |                 ' Fall through to resume wait loop
408f0 37d             | 
408f0 37d             | hwait_resume
408f0 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
408f4 37e 02 86 47 F0 |                 shr     hr1, #2
408f8 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
408fc 380             |         if ACTIVITY_LED >= 0
408fc 380             |         end
408fc 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
40900 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
40904 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
40908 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
4090c 384 18 00 90 AD |         if_z    jmp     #.resume
40910 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
40914 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
40918 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
4091c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40920 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
40924 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
40928 38b             | .resume
40928 38b 22 05 28 FC |                 wypin   #OUT_K, dm
4092c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
40930 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
40934 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
40938 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
4093c 390 1F 70 63 FD |                 waitx   htmp
40940 391 22 07 28 FC |                 wypin   #OUT_J, dm
40944 392 01 70 47 F0 |                 shr     htmp, #1
40948 393 1F 70 63 FD |                 waitx   htmp
4094c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40950 395 1A 92 62 FD |                 getct   iframe_ct_base
40954 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40958 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
4095c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
40960 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
40964 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
40968 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
4096c 39c             | 
4096c 39c             | '------------------------------------------------------------------------------
4096c 39c             | ' Send preamble to enable low-speed HUB ports
4096c 39c             | '------------------------------------------------------------------------------
4096c 39c             | ' On entry:
4096c 39c             | ' On exit:
4096c 39c             | '   USB baud rate set to low-speed
4096c 39c             | '------------------------------------------------------------------------------
4096c 39c             | utx_pre
4096c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
40970 39d 40 46 62 FD |                 dirl    dp
40974 39e 28 02 64 FD |                 setq    #1
40978 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
4097c 3a0 58 44 62 FD |                 drvl    dm
40980 3a1 59 46 62 FD |                 drvh    dp
40984 3a2             | 
40984 3a2 1E 00 00 FF 
40988 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
4098c 3a4             | 
4098c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
40990 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
40994 3a6 28 02 64 3D |         if_nc   setq    #1
40998 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
4099c 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
409a0 3a9             | .l1
409a0 3a9             | 
409a0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
409a4 3aa 40 46 62 FD |                 dirl    dp
409a8 3ab 28 02 64 FD |                 setq    #1
409ac 3ac 80 00 80 FF 
409b0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
409b4 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
409b8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
409bc 3b0 41 46 62 FD |                 dirh    dp
409c0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
409c4 3b2             | 
409c4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
409c8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
409cc 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
409d0 3b5             | 
409d0 3b5             | hlut_end
409d0 3b5             |                 fit     $400
409d0 3b5             |                 orgh
409d0                 | if OVERLAP_MEMORY
409d0                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
409d0                 | end
409d0                 | '------------------------------------------------------------------------------
409d0                 | ' Routines called from cog space.
409d0                 | '------------------------------------------------------------------------------
409d0                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
409d0                 | '------------------------------------------------------------------------------
409d0                 | 
409d0                 | '------------------------------------------------------------------------------
409d0                 | ' USB host cog initialization.
409d0                 | '------------------------------------------------------------------------------
409d0                 | usb_host_init
409d0                 |                 ' Initialize buffer pointers
409d0                 |         if OVERLAP_MEMORY
409d0                 |         else
409d0     3C 15 B0 FE |                 loc     pb, #hid_descr
409d4                 |         end
409d4     F7 4B 02 F6 |                 mov     hid_descr_p, pb
409d8                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
409d8                 |                 {
409d8                 |                 }
409d8                 |         
409d8                 |                 {
409d8                 |                 }
409d8                 |                 'loc     pb,#hkbd_report
409d8                 |                 'mov     hkbd_report_p,pb
409d8                 | 
409d8     04 1D B0 FE |                 loc     pb, #hub_descr
409dc     F7 4D 02 F6 |                 mov     hub_descr_p, pb
409e0     19 1D B0 FE |                 loc     pb, #urx_buff
409e4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
409e8     91 1D B0 FE |                 loc     pb, #dev_desc_buff
409ec     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
409f0     9B 1D B0 FE |                 loc     pb, #con_desc_buff
409f4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
409f8     14 15 B0 FE |                 loc     pb, #usb_cache_start
409fc     F7 55 02 F6 |                 mov     cache_start_p, pb
40a00     E5 1C B0 FE |                 loc     pb, #usb_cache_end
40a04     F7 57 02 F6 |                 mov     cache_end_p, pb
40a08                 | 
40a08                 |         if ERROR_LED >= 0
40a08                 |         end
40a08                 | 
40a08                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
40a08                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
40a08                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
40a08                 | ' Configure and enable the Serial Host USB port.
40a08     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
40a0c                 | 
40a0c                 | '------------------------------------------------------------------------------
40a0c                 | ' Timing calculations happen before any interrupt(s) are enabled.
40a0c                 | '------------------------------------------------------------------------------
40a0c                 | ' On entry:
40a0c                 | '   htmp - current CLKFREQ value.
40a0c                 | '------------------------------------------------------------------------------
40a0c                 | hinit_usb_timings
40a0c                 | '                getct   htmp2
40a0c     B8 59 02 F6 |                 mov     save_sysclk, htmp
40a10     8D 5B 80 FF 
40a14     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
40a18     18 30 63 FD |                 getqx   _12Mbps_
40a1c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
40a20     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
40a24     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
40a28     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
40a2c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
40a30     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
40a34     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
40a38     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
40a3c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
40a40     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
40a44     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
40a48     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
40a4c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
40a50     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
40a54     80 00 00 FF 
40a58     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
40a5c     18 2C 63 FD |                 getqx   _var_64_lower_
40a60     19 2E 63 FD |                 getqy   _var_64_upper_
40a64     28 2C 63 FD |                 setq    _var_64_lower_
40a68     65 CD 1D FF 
40a6c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
40a70     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
40a74     01 00 00 FF 
40a78     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
40a7c     18 2C 63 FD |                 getqx   _var_64_lower_
40a80     19 2E 63 FD |                 getqy   _var_64_upper_
40a84     28 2C 63 FD |                 setq    _var_64_lower_
40a88     A1 07 00 FF 
40a8c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
40a90     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
40a94     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
40a98     09 36 57 F0 |                 shr     _1us_, #9               wc
40a9c     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
40aa0     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
40aa4     18 38 63 FD |                 getqx   _10us_
40aa8     09 38 57 F0 |                 shr     _10us_, #9              wc
40aac     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
40ab0     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
40ab4     18 3A 63 FD |                 getqx   _33us_
40ab8     09 3A 57 F0 |                 shr     _33us_, #9              wc
40abc     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
40ac0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
40ac4     18 3C 63 FD |                 getqx   _txn_err_
40ac8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
40acc     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
40ad0     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
40ad4     18 3E 63 FD |                 getqx   _500us_
40ad8     09 3E 57 F0 |                 shr     _500us_, #9             wc
40adc     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
40ae0     01 00 00 FF 
40ae4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
40ae8     18 40 63 FD |                 getqx   _txn_ok_ls_
40aec     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
40af0     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
40af4     01 00 00 FF 
40af8     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
40afc     18 42 63 FD |                 getqx   _txn_ok_fs_
40b00     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
40b04     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
40b08     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
40b0c     05 00 00 FF 
40b10     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
40b14     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
40b18     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
40b1c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
40b20     1C 00 00 FF 
40b24     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
40b28     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
40b2c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
40b30     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
40b34     00 00 00 FF 
40b38     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
40b3c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
40b40     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
40b44     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
40b48     04 00 00 FF 
40b4c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
40b50     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
40b54     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
40b58     8D 5B 00 FF 
40b5c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
40b60     18 4C 63 FD |                 getqx   _preamble_wait_
40b64     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
40b68     01 00 00 FF 
40b6c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
40b70     18 2C 63 FD |                 getqx   _var_64_lower_
40b74     19 2E 63 FD |                 getqy   _var_64_upper_
40b78     28 2C 63 FD |                 setq    _var_64_lower_
40b7c     01 00 00 FF 
40b80     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
40b84     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
40b88     09 4E 57 F0 |                 shr     _1ms_, #9               wc
40b8c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
40b90     FF FF 7F FF 
40b94     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
40b98     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
40b9c     A7 51 03 F6 |                 mov     _2ms_, _1ms_
40ba0     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
40ba4     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
40ba8     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
40bac     A7 55 03 F6 |                 mov     _4ms_, _1ms_
40bb0     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
40bb4     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
40bb8     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
40bbc     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
40bc0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
40bc4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
40bc8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
40bcc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
40bd0     A7 59 03 F6 |                 mov     _8ms_, _1ms_
40bd4     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
40bd8     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
40bdc     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
40be0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
40be4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
40be8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
40bec     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
40bf0     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
40bf4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
40bf8     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
40bfc     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
40c00                 | '        _ret_   mov     _1sec_, save_sysclk
40c00                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
40c00                 | '                ret
40c00                 | {
40c00                 | }
40c00                 | 
40c00                 | '------------------------------------------------------------------------------
40c00                 | ' Parse a configuration descriptor chain to see if the device is a recognized
40c00                 | ' one. If it is, start the task progression that will configure the device for
40c00                 | ' use.
40c00                 | '------------------------------------------------------------------------------
40c00                 | ' On entry:
40c00                 | '   hconfig_base - start address of the cached config descriptor chain.
40c00                 | ' On exit:
40c00                 | '------------------------------------------------------------------------------
40c00                 | hparse_con_desc
40c00     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
40c04     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
40c08     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
40c0c     4E 70 FF F9 |                 movbyts htmp,#%%1032
40c10     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
40c14                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
40c14                 | 
40c14     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
40c18     6E ED 03 F1 |                 add     pa, hconfig_base
40c1c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
40c20                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
40c20                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
40c20                 | ' that defines a keyboard and/or mouse.
40c20     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
40c24                 | .next_intf
40c24     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
40c28     B8 01 90 3D |         if_ae   jmp     #hset_config
40c2c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
40c30     75 F3 03 F1 |                 add     ptrb, hnext_desc
40c34     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
40c38     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
40c3c     0C 00 90 AD |         if_z    jmp     #.intf
40c40     80 71 C7 FA |                 rdbyte  htmp, ptrb
40c44     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
40c48     D8 FF 9F FD |                 jmp     #.next_intf
40c4c                 | .intf
40c4c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
40c50     00 90 07 F6 |                 mov     hpar3, #0
40c54     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
40c58     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
40c5c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
40c60     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
40c64                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
40c64                 | 
40c64                 | .endp
40c64     80 71 C7 FA |                 rdbyte  htmp, ptrb
40c68     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
40c6c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
40c70     78 00 90 3D |         if_ae   jmp     #.get_device
40c74     6E F3 03 F6 |                 mov     ptrb, hconfig_base
40c78     75 F3 03 F1 |                 add     ptrb, hnext_desc
40c7c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
40c80     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
40c84     64 00 90 AD |         if_z    jmp     #.get_device
40c88     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
40c8c     04 00 90 AD |         if_z    jmp     #.get_ep
40c90     D0 FF 9F FD |                 jmp     #.endp
40c94                 | .get_ep
40c94     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
40c98     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
40c9c     0F 86 67 F0 |                 shl     hr1, #8 + 7
40ca0     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
40ca4     3F 00 00 FF 
40ca8     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
40cac     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
40cb0     00 8E 0F F2 |                 cmp     hpar2, #0               wz
40cb4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
40cb8     00 90 0F F2 |                 cmp     hpar3, #0               wz
40cbc     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
40cc0     A0 FF 9F FD |                 jmp     #.endp
40cc4                 | .in_ep
40cc4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
40cc8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
40ccc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
40ccc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
40cd0     C2 89 DB F8 |                 setbyte hr2, hr0, #3
40cd4     8C FF 9F FD |                 jmp     #.endp
40cd8                 | .out_ep
40cd8     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
40cdc     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
40ce0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
40ce0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
40ce4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
40ce8     78 FF 9F FD |                 jmp     #.endp
40cec                 | 
40cec                 | .get_device
40cec     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
40cf0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
40cf4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
40cf8     64 00 90 AD |         if_z    jmp     #.gamepad
40cfc     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
40d00     A8 00 90 AD |         if_z    jmp     #.hub
40d04     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
40d08     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
40d0c                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
40d0c     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
40d10     4C 00 90 AD |         if_z    jmp     #.gamepad
40d14     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
40d18     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
40d1c                 | .keyboard
40d1c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
40d20                 |         if HAVE_MOUSE
40d20     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
40d24                 |         else
40d24                 |         end
40d24     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
40d28     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
40d2c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40d30     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
40d34     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
40d38     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
40d3c                 |                 'debug(udec(kb_intf_num))
40d3c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
40d3c     E4 FE 9F FD |                 jmp     #.next_intf
40d40                 | if HAVE_MOUSE
40d40                 | .mouse
40d40     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
40d44     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
40d48     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
40d4c     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
40d50     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40d54                 |                 'getbyte ms_interval, hr2, #3
40d54     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
40d58     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
40d5c                 |                 'debug(udec(kb_intf_num))
40d5c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
40d5c     C4 FE 9F FD |                 jmp     #.next_intf
40d60                 | end
40d60                 | .gamepad
40d60     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
40d64     C7 71 63 F5 |                 xor     htmp, hpar2
40d68     3F 00 00 FF 
40d6c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40d70     B0 FE 9F AD |         if_z    jmp     #.next_intf
40d74                 |         if HAVE_MOUSE
40d74     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
40d78     C7 71 63 F5 |                 xor     htmp, hpar2
40d7c     3F 00 00 FF 
40d80     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40d84     9C FE 9F AD |         if_z    jmp     #.next_intf
40d88                 |         end
40d88     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
40d8c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
40d90     90 FE 9F 5D |         if_nz   jmp     #.next_intf
40d94                 | 
40d94     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40d98     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
40d9c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40da0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
40da4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
40da8                 |                 'debug(udec(gp_intf_num))
40da8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
40da8     78 FE 9F FD |                 jmp     #.next_intf
40dac                 | .hub
40dac     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
40db0     70 FE 9F 5D |         if_nz   jmp     #.next_intf
40db4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
40db8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
40dbc     64 FE 9F 5D |         if_nz   jmp     #.next_intf
40dc0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
40dc4     5C FE 9F 5D |         if_nz   jmp     #.next_intf
40dc8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
40dcc     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
40dd0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
40dd4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40dd8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
40ddc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
40de0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
40de0     40 FE 9F FD |                 jmp     #.next_intf
40de4                 | 
40de4                 | '------------------------------------------------------------------------------
40de4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
40de4                 | ' it according to its function, or functions. In the case of this boot protocol
40de4                 | ' keyboard/mouse class driver:
40de4                 | ' - SetConfiguration(config_num)
40de4                 | ' - SetProtocol(boot)
40de4                 | ' - SetIdle(indefinite)
40de4                 | ' - Enter the device interrupt IN polling task stage.
40de4                 | '------------------------------------------------------------------------------
40de4                 | ' On entry:
40de4                 | ' On exit:
40de4                 | '------------------------------------------------------------------------------
40de4                 | hset_config
40de4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
40de4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
40de4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
40de8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40dec     00 00 0C F2 |                 cmp     0-0, #0                 wz
40df0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
40df4                 |         if HAVE_MOUSE
40df4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
40df8                 |         end
40df8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
40dfc     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
40e00                 | .set_config
40e00     6C 0E D0 FE |                 loc     ptra, #set_config
40e04     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
40e08     6E ED 03 F1 |                 add     pa, hconfig_base
40e0c     F6 8D C3 FA |                 rdbyte  hpar1, pa
40e10     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
40e14     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
40e18     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
40e1c     A0 02 A0 FD |                 call    #control_write
40e20     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40e24     2D 00 64 5D |         if_nz   ret
40e28                 | .kbd_config
40e28     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
40e2c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
40e30                 | 
40e30     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
40e34     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40e38     3F 00 00 FF 
40e3c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40e40     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
40e44                 | 
40e44     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
40e48     34 0E D0 FE |                 loc     ptra, #set_protocol
40e4c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
40e50     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
40e54     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
40e58     A0 02 A0 FD |                 call    #control_write
40e5c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40e60     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
40e64     E4 02 90 5D |         if_nz   jmp     #.notify_client
40e68     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
40e6c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
40e70     30 03 B0 FD |                 call    #hset_idle
40e74                 |                 'cmp     retval, #PID_ACK        wz
40e74                 |         'if_nz   mov     hkbd_ep_addr, #0
40e74                 |         'if_nz   jmp     #.notify_client
40e74     A8 99 02 F6 |                 mov     hctwait, _2ms_
40e78     EF 02 A0 FD |                 call    #poll_waitx
40e7c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
40e80     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
40e84     90 17 90 FE |                 loc     pa, #hkbd_led_rep
40e88     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
40e8c     2C 03 B0 FD |                 call    #hset_kbdled_report
40e90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40e94     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
40e98     B0 02 90 5D |         if_nz   jmp     #.notify_client
40e9c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
40ea0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40ea4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40ea8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40eac     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
40eb0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
40eb4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
40eb8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40ebc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
40ec0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
40ec4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
40ec8                 |         if !!HAVE_MOUSE
40ec8                 |         end
40ec8                 | 
40ec8                 | .mouse_config
40ec8                 | if HAVE_MOUSE
40ec8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
40ecc     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
40ed0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
40ed4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40ed8     3F 00 00 FF 
40edc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40ee0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
40ee4                 | 
40ee4                 |                 debug("mouse passed addr check")
40ee4                 | 
40ee4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
40ee8     00 00 80 FF 
40eec     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
40ef0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
40ef4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40ef8     55 02 A0 FD |                 call    #control_read
40efc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40f00     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
40f04     44 02 90 5D |         if_nz   jmp     #.notify_client
40f08     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
40f0c     56 01 00 F6 |                 mov     0-0, total_data
40f10     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40f14                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
40f14                 | 
40f14     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
40f18     64 0D D0 FE |                 loc     ptra, #set_protocol
40f1c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
40f20     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
40f24     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
40f28     A0 02 A0 FD |                 call    #control_write
40f2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40f30     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
40f34     14 02 90 5D |         if_nz   jmp     #.notify_client
40f38                 |                 debug("mouse passed SetProtocol")
40f38     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
40f3c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
40f40     60 02 B0 FD |                 call    #hset_idle
40f44                 |                 'cmp     retval, #PID_ACK        wz
40f44                 |         'if_nz   mov     hmouse_ep_addr, #0
40f44                 |         'if_nz   jmp     #.notify_client
40f44                 |                 debug("mouse passed SetIdle")
40f44     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
40f48     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40f4c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40f50     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40f54     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
40f58     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40f5c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
40f60     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
40f64     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
40f68     3F 00 00 FF 
40f6c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
40f70     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
40f74     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
40f78     D0 01 90 FD |                 jmp     #.notify_client
40f7c                 | end
40f7c                 | .gamepad_config
40f7c                 | if _HAVE_GAMEPAD
40f7c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40f80     00 00 0C F2 |                 cmp     0-0, #0                 wz
40f84     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
40f88     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
40f8c     00 70 03 F6 |                 mov     htmp, 0-0
40f90     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40f94     3F 00 00 FF 
40f98     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40f9c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
40fa0                 | 
40fa0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
40fa4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
40fa8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40fac     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40fb0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40fb4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40fb8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
40fbc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
40fc0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
40fc4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40fc8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40fcc     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
40fd0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
40fd4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40fd8                 | 
40fd8                 |                 if EMUPAD_MAX_PLAYER > 0
40fd8                 |                 
40fd8                 | .rule_loop           
40fd8                 |                 end
40fd8                 | 
40fd8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
40fdc     5C 00 90 AD |         if_e    jmp     #.xinput
40fe0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
40fe4     00 70 03 F6 |                 mov     htmp,0-0
40fe8     01 A6 02 FF 
40fec     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
40ff0     7C 00 90 AD |         if_e    jmp     #.ps3
40ff4                 | 
40ff4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
40ff8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
40ffc     00 00 80 5F 
41000     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
41004     03 00 80 AF 
41008     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
4100c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
41010     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41014     55 02 A0 FD |                 call    #control_read
41018     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4101c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
41020     00 00 04 56 |         if_nz   mov     0-0, #0
41024     24 01 90 5D |         if_nz   jmp     #.notify_client
41028     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
4102c     56 01 00 F6 |                 mov     0-0, total_data
41030     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41034                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
41034                 | 
41034     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
41038     10 01 90 FD |                 jmp     #.notify_client
4103c                 | .xinput
4103c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
41040     2D EF 03 F6 |                 mov     pb,hdev_port
41044     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
41048     03 EE 27 F3 |                 fle     pb,#3
4104c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
41050     02 EF 47 FC |                 wrbyte  pb, ptra[2]
41054                 | 
41054     03 B0 06 F6 |                 mov     pkt_data, #3
41058     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
4105c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
41060     5A 00 A0 FD |                 call    #txn_out
41064     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
41068                 | 
41068     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
4106c     DC 00 90 FD |                 jmp     #.notify_client
41070                 | .ps3
41070     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
41074     2D EF 03 F6 |                 mov     pb,hdev_port
41078     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
4107c     04 EE 27 F3 |                 fle     pb,#4
41080     F7 EF C3 F9 |                 decod   pb
41084     09 EF 47 FC |                 wrbyte  pb, ptra[9]
41088                 | 
41088     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
4108c     00 0C D0 FE |                 loc     ptra, #set_report
41090     01 00 80 FF 
41094     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
41098     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
4109c     03 61 5C FC |                 wrword  #48, ptra[wLength]
410a0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
410a4     A0 02 A0 FD |                 call    #control_write
410a8                 | 
410a8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
410ac     E0 0B D0 FE |                 loc     ptra, #set_report
410b0     01 00 80 FF 
410b4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
410b8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
410bc     03 09 5C FC |                 wrword  #4, ptra[wLength]
410c0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
410c4     A0 02 A0 FD |                 call    #control_write
410c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
410cc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
410d0     00 00 04 56 |         if_nz   mov     0-0, #0
410d4     74 00 90 5D |         if_nz   jmp     #.notify_client
410d8                 | 
410d8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
410dc     6C 00 90 FD |                 jmp     #.notify_client
410e0                 | end
410e0                 | 
410e0                 | .hub_config
410e0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
410e4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
410e8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
410ec     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
410f0     3F 00 00 FF 
410f4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
410f8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
410fc                 | 
410fc     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
41100     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
41104     26 EF 03 F6 |                 mov     pb, hub_descr_p
41108     55 02 A0 FD |                 call    #control_read
4110c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41110     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
41114     34 00 90 5D |         if_nz   jmp     #.notify_client
41118                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
41118                 | 
41118     26 F1 03 F6 |                 mov     ptra, hub_descr_p
4111c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
41120     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
41124                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
41124                 | .pwr_loop
41124     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
41128     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
4112c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
41130     A0 02 A0 FD |                 call    #control_write
41134     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
41138                 | 
41138     B1 99 02 F6 |                 mov     hctwait, _500ms_
4113c     B0 99 02 F1 |                 add     hctwait, _100ms_
41140     EF 02 A0 FD |                 call    #poll_waitx
41144                 | 
41144     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
41148     00 00 90 FD |                 jmp     #.notify_client
4114c                 | 
4114c                 | .notify_client
4114c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
41150     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
41154                 |                 debug(uhex_long(hdev_type,hdev_type+1))
41154                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
41154     2D 00 64 FD |                 ret
41158                 | 
41158                 | '------------------------------------------------------------------------------
41158                 | ' Initialize the keyboard/mouse data area to start-up values.
41158                 | '------------------------------------------------------------------------------
41158                 | ' On entry:
41158                 | ' On exit:
41158                 | '------------------------------------------------------------------------------
41158                 | init_kbdm_data
41158     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
4115c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
41160                 | 
41160     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
41164     2B ED 03 F6 |                 mov     pa, cache_end_p
41168                 | .loop
41168     61 01 4C FC |                 wrbyte  #0, ptra++
4116c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
41170     F4 FF 9F CD |         if_b    jmp     #.loop
41174                 |         
41174                 |         if EMUPAD_MAX_PLAYER > 0
41174                 |         end
41174                 | 
41174                 | 
41174     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
41178                 | .regloop
41178     00 EC 8F F9 |                 altd    pa
4117c     00 00 04 F6 |                 mov     0-0, #0
41180     01 EC 07 F1 |                 add     pa, #1
41184     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
41188     EC FF 9F 5D |         if_nz   jmp     #.regloop
4118c                 | 
4118c     E1 E1 61 FF 
41190     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
41194     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
41198     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
4119c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
411a0                 | 
411a0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
411a4                 | 
411a4                 | '------------------------------------------------------------------------------
411a4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
411a4                 | ' function.
411a4                 | '------------------------------------------------------------------------------
411a4                 | ' On entry:
411a4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
411a4                 | '   hpar2 - index number of the target interface.
411a4                 | ' On exit:
411a4                 | '------------------------------------------------------------------------------
411a4                 | hset_idle
411a4     A8 99 02 F6 |                 mov     hctwait, _2ms_
411a8     EF 02 A0 FD |                 call    #poll_waitx
411ac     D8 0A D0 FE |                 loc     ptra, #set_idle
411b0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
411b4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
411b8     A0 02 80 FD |                 jmp     #control_write
411bc                 | 
411bc                 | '------------------------------------------------------------------------------
411bc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
411bc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
411bc                 | '------------------------------------------------------------------------------
411bc                 | ' On entry:
411bc                 | '   ep_addr_pid - device address and enpoint for the request.
411bc                 | ' On exit:
411bc                 | '   retval - transaction result.
411bc                 | '------------------------------------------------------------------------------
411bc                 | hset_kbdled_report
411bc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
411c0     CC 0A D0 FE |                 loc     ptra, #set_report
411c4     01 00 80 FF 
411c8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
411cc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
411d0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
411d4     27 EF 03 F6 |                 mov     pb, urx_buff_p
411d8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
411dc     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
411e0                 | 
411e0                 | '------------------------------------------------------------------------------
411e0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
411e0                 | '------------------------------------------------------------------------------
411e0                 | ' On entry:
411e0                 | ' On exit:
411e0                 | '------------------------------------------------------------------------------
411e0                 | hget_kbd_in_report
411e0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
411e4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
411e8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
411ec     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
411f0     CF 02 A0 FD |                 call    #do_int_in
411f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
411f8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
411fc                 | 
411fc     00 90 0F F2 |                 cmp     hpar3, #0               wz
41200     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41204                 | 
41204     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
41208     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
4120c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
41210     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
41214                 | 
41214     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
41218     18 00 B0 FD |                 call    #hkbd_compare
4121c                 |         if EMUPAD_MAX_PLAYER > 0
4121c                 |         end
4121c                 | 
4121c                 | .led_check
4121c     3B 71 03 F6 |                 mov     htmp, kb_led_states
41220     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
41224     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
41228     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
4122c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
41230     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
41234                 | 
41234                 | '------------------------------------------------------------------------------
41234                 | ' Compare current and previous keyboard data buffers for keypress changes.
41234                 | '------------------------------------------------------------------------------
41234                 | hkbd_compare
41234     27 F1 03 F6 |                 mov     ptra, urx_buff_p
41238     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
4123c     61 73 07 FB |                 rdlong  htmp1, ptra++
41240     E1 75 07 FB |                 rdlong  htmp2, ptrb++
41244     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
41248     61 73 07 FB |                 rdlong  htmp1, ptra++
4124c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
41250     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
41254     2D 00 64 AD |         if_z    ret
41258                 | 
41258     B4 13 D0 FE |                 loc     ptra, #hkbd_report
4125c                 | 
4125c                 |                 ' Handle modifiers
4125c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
41260     00 87 C7 FA |                 rdbyte  hr1, ptra
41264     C7 87 43 F9 |                 rolword hr1,hpar2,#0
41268     63 86 63 FD |                 mergew  hr1
4126c     08 EC 07 F6 |                 mov     pa,#8
41270                 | .modloop
41270     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
41274     E8 8C 07 F6 |                 mov     hpar1,#$E8
41278     F6 8D 83 F1 |                 sub     hpar1,pa
4127c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
41280     FB ED 6F FB |                 djnz    pa,#.modloop
41284                 | 
41284     6F E0 75 FD | .release        modc    _set    wc
41288                 |                 'alts    hdev_port, #hid_report_p
41288                 |                 'mov     ptra, hid_report_p
41288     02 F0 07 F1 |                 add     ptra, #2
4128c     06 EC 07 F6 |                 mov     pa, #6
41290     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
41294     20 00 90 AD |         if_z    jmp     #.rl3
41298     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
4129c     02 F2 07 F1 |                 add     ptrb, #2
412a0     06 EE 07 F6 |                 mov     pb, #6
412a4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
412a8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
412ac     08 00 90 AD |         if_z    jmp     #.rl3
412b0     FC EF 6F FB |                 djnz    pb, #.rl2
412b4     68 00 B0 FD |                 call    #hkbd_translate
412b8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
412bc                 | 
412bc     00 90 07 F6 |                 mov     hpar3, #0
412c0     1F 90 27 F4 |                 bith    hpar3, #31
412c4                 | 
412c4     6F 00 74 FD | .press          modc    _clr    wc
412c8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
412cc     02 F0 07 F1 |                 add     ptra, #2
412d0     06 EC 07 F6 |                 mov     pa, #6
412d4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
412d8     20 00 90 AD |         if_z    jmp     #.pl3
412dc     30 13 F0 FE |                 loc     ptrb, #hkbd_report
412e0     02 F2 07 F1 |                 add     ptrb, #2
412e4     06 EE 07 F6 |                 mov     pb, #6
412e8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
412ec     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
412f0     08 00 90 AD |         if_z    jmp     #.pl3
412f4     FC EF 6F FB |                 djnz    pb, #.pl2
412f8     24 00 B0 FD |                 call    #hkbd_translate
412fc     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
41300                 | 
41300     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
41304     08 13 F0 FE |                 loc     ptrb, #hkbd_report
41308     28 02 64 FD |                 setq #1
4130c     61 73 07 FB |                 rdlong  htmp1, ptra++
41310     28 02 64 FD |                 setq #1
41314     E1 73 67 FC |                 wrlong  htmp1, ptrb++
41318     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
4131c                 | 
4131c     2D 00 64 FD |                 ret
41320                 | 
41320                 | '------------------------------------------------------------------------------
41320                 | ' Translate keyboard scancode to ASCII
41320                 | '------------------------------------------------------------------------------
41320                 | ' On entry:
41320                 | '   hpar1 - scancode
41320                 | '   hpar2 - key modifiers state
41320                 | '       c - pressed (0) or released (1) flag
41320                 | ' On exit:
41320                 | '   hpar1 - bit     31 = 0 pressed, 1 released
41320                 | '               30..17 = unused
41320                 | '                   18 = scroll-lock state 
41320                 | '                   17 = caps-lock state
41320                 | '                   16 = num-lock state 
41320                 | '                15..8 = key modifiers state
41320                 | '                 7..0 = scancode
41320                 | '------------------------------------------------------------------------------
41320                 | hkbd_translate
41320     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
41324     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
41328     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
4132c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
41330     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
41334     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
41338                 | 
41338                 |         if EMUPAD_MAX_PLAYER > 0
41338                 | 
41338                 |         if EMUPAD_BT0_BIT >= 0
41338                 |         end
41338                 |         if EMUPAD_BT1_BIT >= 0
41338                 |         end
41338                 |         if EMUPAD_BT2_BIT >= 0
41338                 |         end
41338                 |         if EMUPAD_BT3_BIT >= 0
41338                 |         end
41338                 |         if EMUPAD_BT4_BIT >= 0
41338                 |         end
41338                 |         if EMUPAD_BT5_BIT >= 0
41338                 |         end
41338                 |         if EMUPAD_BT6_BIT >= 0
41338                 |         end
41338                 |         if EMUPAD_BT7_BIT >= 0
41338                 |         end
41338                 |         if EMUPAD_BT8_BIT >= 0
41338                 |         end
41338                 |         if EMUPAD_BT9_BIT >= 0
41338                 |         end
41338                 | 
41338                 |         end
41338     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
4133c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
41340     1F 8C 47 F4 |                 bitc    hpar1, #31
41344                 |         if KEYQUEUE_SIZE > 0
41344     C4 09 B0 FE |                 loc pb,#keyq_head
41348     F7 71 E3 FA |                 rdword htmp,pb
4134c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
41350     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
41354     B8 75 03 F6 |                 mov htmp2,htmp
41358     04 74 07 FA |                 mul htmp2,#4
4135c     F7 75 03 F1 |                 add htmp2,pb
41360     02 74 07 F1 |                 add htmp2,#2
41364     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
41368     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
4136c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
41370     F7 71 43 5C |         if_nz   wrbyte htmp,pb
41374                 |         end
41374     2D 00 7C FD |                 ret wcz
41378                 | 
41378                 | if HAVE_MOUSE
41378                 | '------------------------------------------------------------------------------
41378                 | ' Execute an IN interrupt transaction to poll for mouse activity.
41378                 | '------------------------------------------------------------------------------
41378                 | ' On entry:
41378                 | ' On exit:
41378                 | '------------------------------------------------------------------------------
41378                 | hget_mouse_in_report
41378     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
4137c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
41380     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
41384     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
41388     CF 02 A0 FD |                 call    #do_int_in
4138c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41390     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
41394                 | 
41394     00 90 0F F2 |                 cmp     hpar3, #0               wz
41398     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
4139c                 | 
4139c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
413a0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
413a4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
413a8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
413ac                 | 
413ac     27 F1 03 F6 |                 mov     ptra, urx_buff_p
413b0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
413b4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
413b8     01 90 87 31 |         if_ae   sub     hpar3, #1
413bc                 | 
413bc     40 09 90 FE |                 loc     pa, #mouse_limits
413c0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
413c4                 | 
413c4                 |                 ' load xacc,yacc,zacc
413c4     28 04 64 FD |                 setq    #3-1
413c8     80 87 07 FB |                 rdlong  hr1,ptrb
413cc                 |                 ' load limits and outptr
413cc     28 04 64 FD |                 setq    #3-1
413d0     F6 73 03 FB |                 rdlong  htmp1,pa
413d4                 | 
413d4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
413d8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
413dc     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
413e0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
413e4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
413e8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
413ec     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
413f0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
413f4                 |               
413f4                 | 
413f4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
413f8     07 70 67 F7 |                 signx   htmp, #7
413fc     B8 87 03 F1 |                 add     hr1,htmp
41400     00 72 0F F2 |                 cmp     htmp1,#0 wz
41404     B9 87 63 53 |         if_ne   fles    hr1,htmp1
41408     00 86 47 53 |         if_ne   fges    hr1,#0
4140c                 | 
4140c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
41410     07 70 67 F7 |                 signx   htmp, #7
41414     B8 89 03 F1 |                 add     hr2,htmp
41418     00 74 0F F2 |                 cmp     htmp2,#0 wz
4141c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
41420     00 88 47 53 |         if_ne   fges    hr2,#0
41424                 |                 
41424                 | 
41424     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
41428     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
4142c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
41430     B8 8B 03 A1 |         if_z    add     hr3,htmp
41434                 | 
41434     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
41438     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
4143c                 | 
4143c                 |                 ' write back accumulators
4143c     28 04 64 FD |                 setq    #3-1
41440     80 87 67 FC |                 wrlong  hr1,ptrb
41444                 |                 ' if outptr set, write X/Y words
41444     00 76 0F F2 |                 cmp htmp3,#0                    wz
41448     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
4144c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
41450     2D 00 64 FD |                 ret
41454                 | end
41454                 | 
41454                 | '------------------------------------------------------------------------------
41454                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
41454                 | '------------------------------------------------------------------------------
41454                 | ' On entry:
41454                 | ' On exit:
41454                 | '------------------------------------------------------------------------------
41454                 | if _HAVE_GAMEPAD
41454                 | hget_gp_in_report
41454     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
41458     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
4145c                 | 
4145c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
41460     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
41464     00 90 E3 F8 |                 getbyte hpar3
41468     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
4146c     CF 02 A0 FD |                 call    #do_int_in
41470     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41474     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
41478                 | 
41478     00 90 0F F2 |                 cmp     hpar3, #0               wz
4147c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41480                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
41480                 | 
41480     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
41484     00 70 E3 F8 |                 getbyte htmp                            ' |
41488     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
4148c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
41490     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
41494     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
41498     B8 01 C0 F8 |                 setbyte htmp                            ' |
4149c                 | 
4149c                 | ' Note: the following code compares the current and previous reports
4149c                 | ' and process the data if there are changes to ease the debug output.
4149c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
4149c                 | ' gpPreReport buffer.
4149c                 | 
4149c                 |                 ' ----- start of block to remove
4149c                 |                 {
4149c                 |                 }
4149c                 |                 ' ----- end of block to remove
4149c     F4 04 90 FE |                 loc pa,#hpad_translate
414a0     2A EC 63 FD |                 push pa
414a4                 | 
414a4                 |                 ' FALL THROUGH !!!!
414a4                 | 
414a4                 | '------------------------------------------------------------------------------
414a4                 | ' Decode controller report
414a4                 | '------------------------------------------------------------------------------
414a4                 | hid_decode
414a4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
414a4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
414a8     00 04 00 FF 
414ac     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
414b0                 | 
414b0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
414b4                 | 
414b4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
414b8     00 2A E3 F8 |                 getbyte hidr_type
414bc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
414c0     34 02 90 AD |         if_z    jmp     #hpad_xinput
414c4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
414c8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
414cc     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
414d0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
414d4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
414d8                 |                 
414d8                 | 
414d8                 | '------------------------------------------------------------------------------
414d8                 | ' Handle HID controller (or mouse now
414d8                 | ' On entry:
414d8                 | '   ptrb - controller report
414d8                 | '------------------------------------------------------------------------------
414d8                 | hpad_hid
414d8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
414dc     F7 F1 03 F6 |                 mov     ptra, pb
414e0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
414e4     00 EC 03 F6 |                 mov     pa, 0-0
414e8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
414e8     19 2A 3B FF 
414ec     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
414f0                 | 
414f0                 | .next
414f0     00 EC 5F F2 |                 cmps    pa, #0      wcz
414f4     2D 00 7C ED |         if_be   ret     wcz
414f8                 | 
414f8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
414fc     01 EC 87 F1 |                 sub     pa, #1
41500     00 8E 07 F6 |                 mov     hpar2, #0
41504                 | 
41504     C6 71 03 F6 |                 mov     htmp, hpar1
41508     03 70 07 F5 |                 and     htmp, #$03
4150c     01 70 0F F2 |                 cmp     htmp, #1    wz
41510     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
41514     07 8E 67 A7 |         if_z    signx   hpar2,#7
41518     01 EC 87 A1 |         if_z    sub     pa, #1
4151c     02 70 0F F2 |                 cmp     htmp, #2    wz
41520     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
41524     0F 8E 67 A7 |         if_z    signx   hpar2,#15
41528     02 EC 87 A1 |         if_z    sub     pa, #2
4152c     03 70 0F F2 |                 cmp     htmp, #3    wz
41530     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
41534     04 EC 87 A1 |         if_z    sub     pa, #4
41538                 | 
41538     FC 8C 07 F5 |                 and     hpar1, #$FC
4153c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
4153c                 | 
4153c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
41540     0C 01 90 AD |         if_z    jmp     #.report_id
41544     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
41548     24 01 90 AD |         if_z    jmp     #.usage_page
4154c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
41550     2C 01 90 AD |         if_z    jmp     #.usage
41554     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
41558     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
4155c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
41560     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
41564     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
41568     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
4156c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
41570     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
41574     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
41578     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
4157c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
41580     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
41584     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
41588     64 FF 9F 5D |         if_nz   jmp     #.next
4158c                 | 
4158c     D8 1D A7 FB |                 tjf     hidr_state,#.next
41590                 | 
41590     03 8E 07 F5 |                 and     hpar2, #$03
41594     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
41598     18 00 90 5D |         if_nz   jmp     #.skip
4159c                 | 
4159c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
415a0     20 00 90 AD |         if_z    jmp     #.axes
415a4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
415a8     5C 00 90 AD |         if_z    jmp     #.hats
415ac     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
415b0     70 00 90 AD |         if_z    jmp     #.buttons
415b4                 | .skip
415b4     8F 71 03 F6 |                 mov     htmp, hidr_size
415b8     90 71 03 FA |                 mul     htmp, hidr_count
415bc     B8 23 03 F1 |                 add     hidr_offset, htmp
415c0     2C FF 9F FD |                 jmp     #.next
415c4                 | .axes
415c4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
415c4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
415c8     90 87 03 F6 |                 mov     hr1, hidr_count
415cc                 | .l1
415cc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
415d0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
415d4     04 03 B0 FD |                 call    #hpad_getbits
415d8     64 03 B0 FD |                 call    #hpad_normalize
415dc     06 84 1F F2 |                 cmp     hr0, #6         wcz
415e0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
415e4     00 88 43 C8 |         if_b    getnib  hr2
415e8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
415ec     5F 01 20 C9 |         if_b    setword retval
415f0     01 84 07 C1 |         if_b    add     hr0, #1
415f4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
415f8     F4 87 6F FB |                 djnz    hr1, #.l1
415fc                 | 
415fc     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
41600     01 1C 07 F6 |                 mov     hidr_state, #1
41604     E8 FE 9F FD |                 jmp     #.next
41608                 | .hats
41608                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
41608     91 8D 03 F6 |                 mov     hpar1, hidr_offset
4160c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
41610     C8 02 B0 FD |                 call    #hpad_getbits
41614     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
41618     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
4161c     01 1C 07 F6 |                 mov     hidr_state, #1
41620     90 FF 9F FD |                 jmp     #.skip
41624                 | .buttons
41624                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
41624     91 8D 03 F6 |                 mov     hpar1, hidr_offset
41628     8F 8F 03 F6 |                 mov     hpar2, hidr_size
4162c     90 8F 03 FA |                 mul     hpar2, hidr_count
41630     A8 02 B0 FD |                 call    #hpad_getbits
41634     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
41638     B8 BF 62 F0 |                 shl     retval, htmp
4163c     5F 17 43 F5 |                 or      hidr_buttons, retval
41640     90 71 03 F1 |                 add     htmp, hidr_count
41644     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
41648     01 1C 07 F6 |                 mov     hidr_state, #1
4164c     64 FF 9F FD |                 jmp     #.skip
41650                 | .report_id
41650     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
41654     2D 00 7C 5D |         if_nz   ret     wcz
41658     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
4165c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
41660     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
41664     01 1C 67 56 |         if_nz   neg     hidr_state,#1
41668     01 F2 87 51 |         if_nz   sub     ptrb,#1
4166c     80 FE 9F FD |                 jmp     #.next
41670                 | .usage_page
41670     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
41674     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
41678     04 1C 07 A6 |         if_z    mov     hidr_state, #4
4167c     70 FE 9F FD |                 jmp     #.next
41680                 | .usage
41680     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
41684     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
41688     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
4168c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
41690     5C FE 9F AD |         if_z    jmp     #.next
41694     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
41698     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
4169c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
416a0     4C FE 9F AD |         if_z    jmp     #.next
416a4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
416a8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
416ac     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
416b0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
416b4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
416b8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
416bc     10 00 90 AD |         if_z    jmp     #.usage_axis
416c0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
416c4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
416c8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
416cc     20 FE 9F FD |                 jmp     #.next
416d0                 | .usage_axis
416d0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
416d4     18 FE 9F CD |         if_b    jmp     #.next
416d8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
416dc     C7 01 00 F8 |                 setnib  hpar2
416e0                 | 
416e0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
416e4     C7 8F C3 F9 |                 decod   hpar2
416e8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
416ec                 | 
416ec     01 24 07 F1 |                 add     hidr_usage_idx, #1
416f0     02 1C 07 F6 |                 mov     hidr_state, #2
416f4     F8 FD 9F FD |                 jmp     #.next
416f8                 | 
416f8                 | '------------------------------------------------------------------------------
416f8                 | ' Handle XInput controller
416f8                 | ' On entry:
416f8                 | '   ptrb - controller report
416f8                 | '------------------------------------------------------------------------------
416f8                 | '   Default implementation translates the report to a pseudo-defacto hid
416f8                 | '   standard and jumps to hpad_translate for actions.
416f8                 | '   Implementors may take specific actions for this kind of controller.
416f8                 | '------------------------------------------------------------------------------
416f8                 | hpad_xinput
416f8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
416fc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
41700     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
41704     14 70 0F F2 |                 cmp     htmp, #$14      wz
41708     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
4170c                 | 
4170c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
4170c                 | 
4170c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
41710     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
41714                 | 
41714     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
41718     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
4171c     5F BF 22 F6 |                 not     retval
41720     5F 11 2B F9 |                 setword hidr_axis, retval, #1
41724     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
41728     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
4172c     5F BF 22 F6 |                 not     retval
41730     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
41734                 | 
41734     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
41738     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
4173c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
41740     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
41744     F8 01 B0 FD |                 call    #hpad_normalize
41748     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
4174c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
41750     C0 BE 1E F2 |                 cmp     retval, #192    wcz
41754     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
41758     E4 01 B0 FD |                 call    #hpad_normalize
4175c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
41760                 | 
41760     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
41764     81 BF E6 FA |                 rdword  retval, ptrb[1]
41768     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
4176c     00 16 47 F4 |                 bitc    hidr_buttons, #0
41770     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
41774     01 16 47 F4 |                 bitc    hidr_buttons, #1
41778     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
4177c     02 16 47 F4 |                 bitc    hidr_buttons, #2
41780     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
41784     03 16 47 F4 |                 bitc    hidr_buttons, #3
41788     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
4178c     04 16 47 F4 |                 bitc    hidr_buttons, #4
41790     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
41794     05 16 47 F4 |                 bitc    hidr_buttons, #5
41798     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
4179c     08 16 47 F4 |                 bitc    hidr_buttons, #8
417a0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
417a4     09 16 47 F4 |                 bitc    hidr_buttons, #9
417a8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
417ac     0A 16 47 F4 |                 bitc    hidr_buttons, #10
417b0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
417b4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
417b8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
417bc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
417c0                 | 
417c0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
417c4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
417c8     7A BB 7A FF 
417cc     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
417d0     F9 FF 7F FF 
417d4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
417d8     B9 71 5F F9 |                 altgn   htmp, #htmp1
417dc     00 70 43 F8 |                 getnib  htmp
417e0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
417e4                 | 
417e4     AC 01 90 FD |                 jmp     #hpad_translate
417e8                 | 
417e8                 | '------------------------------------------------------------------------------
417e8                 | ' Handle PS3 controller
417e8                 | ' On entry:
417e8                 | '   ptrb - controller report
417e8                 | '------------------------------------------------------------------------------
417e8                 | '   Default implementation translates the report to a pseudo-defacto hid
417e8                 | '   standard and jumps to hpad_translate for actions.
417e8                 | '   Implementors may take specific actions for this kind of controller.
417e8                 | '------------------------------------------------------------------------------
417e8                 | hpad_ps3
417e8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
417ec     01 70 0F F2 |                 cmp     htmp, #$01      wz
417f0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
417f4                 | 
417f4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
417f4                 | 
417f4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
417f8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
417fc     40 01 B0 FD |                 call    #hpad_normalize
41800     5F 11 23 F9 |                 setword hidr_axis, retval, #0
41804     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
41808     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
4180c     30 01 B0 FD |                 call    #hpad_normalize
41810     5F 11 2B F9 |                 setword hidr_axis, retval, #1
41814     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
41818     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
4181c     20 01 B0 FD |                 call    #hpad_normalize
41820     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
41824     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
41828     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
4182c     10 01 B0 FD |                 call    #hpad_normalize
41830     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
41834     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
41838     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
4183c                 | 
4183c     08 8C 07 F6 |                 mov     hpar1, #8
41840     13 8E 07 F6 |                 mov     hpar2, #19
41844     94 00 B0 FD |                 call    #hpad_getbits
41848                 | 
41848     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
4184c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
41850     00 16 47 F4 |                 bitc    hidr_buttons, #0
41854     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
41858     01 16 47 F4 |                 bitc    hidr_buttons, #1
4185c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
41860     02 16 47 F4 |                 bitc    hidr_buttons, #2
41864     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
41868     03 16 47 F4 |                 bitc    hidr_buttons, #3
4186c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
41870     04 16 47 F4 |                 bitc    hidr_buttons, #4
41874     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
41878     05 16 47 F4 |                 bitc    hidr_buttons, #5
4187c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
41880     06 16 47 F4 |                 bitc    hidr_buttons, #6
41884     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
41888     07 16 47 F4 |                 bitc    hidr_buttons, #7
4188c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
41890     08 16 47 F4 |                 bitc    hidr_buttons, #8
41894     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
41898     09 16 47 F4 |                 bitc    hidr_buttons, #9
4189c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
418a0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
418a4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
418a8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
418ac     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
418b0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
418b4                 | 
418b4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
418b8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
418bc     09 FA 79 FF 
418c0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
418c4     FF FA 7F FF 
418c8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
418cc     B9 71 5F F9 |                 altgn   htmp, #htmp1
418d0     00 70 43 F8 |                 getnib  htmp
418d4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
418d8                 | 
418d8     B8 00 90 FD |                 jmp     #hpad_translate
418dc                 | 
418dc                 | '------------------------------------------------------------------------------
418dc                 | ' Read bits from report data buffer
418dc                 | '------------------------------------------------------------------------------
418dc                 | ' On entry:
418dc                 | '   PTRB - report buffer
418dc                 | '   hpar1 - start bit
418dc                 | '   hpar2 - number of bits
418dc                 | ' On exit:
418dc                 | '   retval - bits
418dc                 | '------------------------------------------------------------------------------
418dc                 | hpad_getbits
418dc     C6 71 03 F6 |                 mov     htmp, hpar1
418e0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
418e4     F9 71 03 F1 |                 add     htmp, ptrb
418e8     B8 BF 02 FB |                 rdlong  retval, htmp
418ec                 | 
418ec     C6 73 03 F6 |                 mov     htmp1, hpar1
418f0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
418f4     B9 BF 42 F0 |                 shr     retval, htmp1
418f8                 | 
418f8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
418fc     10 00 90 1D |         if_a    jmp     #.l1
41900                 | 
41900     C7 8F C3 F9 |                 decod   hpar2
41904     01 8E 87 F1 |                 sub     hpar2, #1
41908     C7 BF 02 F5 |                 and     retval, hpar2
4190c     2D 00 64 FD |                 ret
41910                 | .l1
41910     FF 7F 00 FF 
41914     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
41918     03 70 07 F1 |                 add     htmp, #3
4191c     B8 75 03 FB |                 rdlong  htmp2, htmp
41920     18 8E 87 F1 |                 sub     hpar2, #24
41924     C7 8F C3 F9 |                 decod   hpar2
41928     01 8E 87 F1 |                 sub     hpar2, #1
4192c     B9 75 43 F0 |                 shr     htmp2, htmp1
41930     C7 75 03 F5 |                 and     htmp2, hpar2
41934     18 74 67 F0 |                 shl     htmp2, #24
41938     BA BF 42 F5 |                 or      retval, htmp2
4193c     2D 00 64 FD |                 ret
41940                 | 
41940                 | '------------------------------------------------------------------------------
41940                 | ' Normalize value to signed word (-32768 / 32767)
41940                 | '------------------------------------------------------------------------------
41940                 | ' On entry:
41940                 | '   retval - value to normalize
41940                 | '   hidr_lminmax - min (word 1) max (word 0) value range
41940                 | '   - or -
41940                 | '   hidr_pminmax - min (word 1) max (word 0) value range
41940                 | '   hidr_size - value bits length
41940                 | ' On exit:
41940                 | '   retval - normalized value
41940                 | '------------------------------------------------------------------------------
41940                 | hpad_normalize
41940     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
41944     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
41948     2D 00 64 AD |         if_z    ret
4194c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
41950     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
41954     0F 72 77 F7 |                 signx   htmp1, #15      wc
41958     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
4195c     00 BE 66 C7 |         if_c    signx   retval, #0-0
41960     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
41964     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
41968     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
4196c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
41970     B8 71 53 F6 |                 abs     htmp            wc
41974     1F BE 0E F4 |                 testb   retval, #31     wz
41978     5F BF 42 F6 |                 abs     retval
4197c     B8 BF 12 FD |                 qdiv    retval, htmp
41980     18 BE 62 FD |                 getqx   retval
41984     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
41988     C0 FF 7F FF 
4198c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
41990     2D 00 64 FD |                 ret
41994                 | 
41994                 | '------------------------------------------------------------------------------
41994                 | ' Perform controller actions
41994                 | ' On entry:
41994                 | '    hidr_id        report id
41994                 | '    hidr_axis      axis value (signed word, 2 axes per long)
41994                 | '                      X = hidr_axis+0, #0
41994                 | '                      Y = hidr_axis+0, #1
41994                 | '                      Z = hidr_axis+1, #0
41994                 | '                     RX = hidr_axis+1, #1
41994                 | '                     RY = hidr_axis+2, #0
41994                 | '                     RZ = hidr_axis+2, #1
41994                 | '    hidr_buttons   buttons state (bits 0 to 31)
41994                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
41994                 | '
41994                 | '                     -------3 -------2 -------1 -------0 byte
41994                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
41994                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
41994                 | '                                zyx||| |||||||| ++++++++ n. buttons
41994                 | '                                |||||| ||||++++--------- n. axes
41994                 | '                                |||||| ++++------------- n. hats
41994                 | '                                ++++++------------------ valid axes
41994                 | '------------------------------------------------------------------------------
41994                 | hpad_translate
41994                 | 
41994                 | 
41994                 |         if HAVE_HIDPAD
41994     84 0C F0 FE |                 loc     ptrb,#hidpad_report
41998     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
4199c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
419a0     01 70 E7 F2 |                 cmpsub  htmp,#1
419a4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
419a8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
419ac     2D 00 7C 3D |         if_ae   ret     wcz
419b0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
419b4     B8 F3 03 F1 |                 add     ptrb,htmp
419b8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
419bc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
419c0     28 0C 64 FD |                 setq    #7-1
419c4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
419c8                 |         end
419c8                 | 
419c8                 | 
419c8                 |         if EMUPAD_MAX_PLAYER > 0
419c8                 | .emupad_no_hat
419c8                 |         if EMUPAD_BT0_BIT >= 0
419c8                 |         end
419c8                 |         if EMUPAD_BT1_BIT >= 0
419c8                 |         end
419c8                 |         if EMUPAD_BT2_BIT >= 0
419c8                 |         end
419c8                 |         if EMUPAD_BT3_BIT >= 0
419c8                 |         end
419c8                 |         if EMUPAD_BT4_BIT >= 0
419c8                 |         end
419c8                 |         if EMUPAD_BT5_BIT >= 0
419c8                 |         end
419c8                 |         if EMUPAD_BT6_BIT >= 0
419c8                 |         end
419c8                 |         if EMUPAD_BT7_BIT >= 0
419c8                 |         end
419c8                 |         if EMUPAD_BT8_BIT >= 0
419c8                 |         end
419c8                 |         if EMUPAD_BT9_BIT >= 0
419c8                 |         end
419c8                 | .emupad_slot_over
419c8                 |         end
419c8                 | 
419c8                 |         if 0
419c8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
419c8                 | 
419c8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
419c8                 | 
419c8                 |         end
419c8     2D 00 64 FD |                 ret
419cc                 | end
419cc                 | 
419cc                 | if EMUPAD_MAX_PLAYER > 0
419cc                 | '------------------------------------------------------------------------------
419cc                 | ' Clear EmuPad state
419cc                 | '------------------------------------------------------------------------------
419cc                 | emupad_reset
419cc                 | 
419cc                 | '------------------------------------------------------------------------------
419cc                 | ' Get EmuPad Player number for current device (into retval)
419cc                 | ' Z flag is also set if current device is valid
419cc                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
419cc                 | '------------------------------------------------------------------------------
419cc                 | emupad_getnum
419cc                 | .loop
419cc                 | '------------------------------------------------------------------------------
419cc                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
419cc                 | '------------------------------------------------------------------------------
419cc                 | emupad_discon
419cc                 | .loop         
419cc                 |         
419cc                 |         ' FALL THROUGH!!!
419cc                 | 
419cc                 | '------------------------------------------------------------------------------
419cc                 | ' Update EmuPad reports (all of them...)
419cc                 | '------------------------------------------------------------------------------
419cc                 | emupad_write_reports
419cc                 | .devloop
419cc                 | 
419cc                 | end
419cc                 | 
419cc                 | 
419cc                 | '------------------------------------------------------------------------------
419cc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
419cc                 | '------------------------------------------------------------------------------
419cc                 | ' On entry:
419cc                 | ' On exit:
419cc                 | '------------------------------------------------------------------------------
419cc                 | hget_hub_status
419cc     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
419d0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
419d4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
419d8     01 90 2F F9 |                 setword hpar3, #1, #1
419dc     CF 02 A0 FD |                 call    #do_int_in
419e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
419e4     0C 00 90 AD |         if_z    jmp     #.data
419e8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
419ec     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
419f0     2D 00 64 FD |                 ret
419f4                 | .data
419f4     00 90 0F F2 |                 cmp     hpar3, #0               wz
419f8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
419fc                 | 
419fc     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
41a00     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
41a04     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
41a08     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
41a0c                 |                 debug(ubin_long(hub_status_chg))
41a0c                 | 
41a0c     01 5A 06 F6 |                 mov     hdev_port, #1
41a10                 | .loop
41a10     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
41a14     0C 00 B0 AD |         if_x1   call    #hub_port_handler
41a18     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
41a1c     F0 FF 9F 3D |         if_nc   jmp     #.loop
41a20     2D 00 64 FD |                 ret
41a24                 | 
41a24                 | hub_port_handler
41a24     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
41a28     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41a2c     27 EF 03 F6 |                 mov     pb, urx_buff_p
41a30     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41a34     55 02 A0 FD |                 call    #control_read
41a38     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
41a3c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
41a3c                 | 
41a3c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
41a40     50 01 90 5D |         if_x0   jmp     #.other
41a44     68 02 D0 FE |                 loc     ptra, #clr_port_feat
41a48     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
41a4c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41a50     A0 02 A0 FD |                 call    #control_write
41a54     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
41a58     7C 01 90 5D |         if_x0   jmp     #.disconnect
41a5c     B0 99 02 F6 |                 mov     hctwait, _100ms_
41a60     EF 02 A0 FD |                 call    #poll_waitx
41a64                 | 
41a64     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
41a68     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
41a6c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41a70     A0 02 A0 FD |                 call    #control_write
41a74                 | 
41a74     02 76 07 F6 |                 mov     htmp3, #2
41a78                 | .wait_reset
41a78     AC 99 02 F6 |                 mov     hctwait, _8ms_
41a7c     EF 02 A0 FD |                 call    #poll_waitx
41a80     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41a84     27 EF 03 F6 |                 mov     pb, urx_buff_p
41a88     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41a8c     55 02 A0 FD |                 call    #control_read
41a90     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
41a94     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
41a98     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
41a9c                 | 
41a9c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
41aa0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
41aa4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41aa8     A0 02 A0 FD |                 call    #control_write
41aac                 | 
41aac     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
41ab0                 | .wait_recover
41ab0     A7 99 02 F6 |                 mov     hctwait, _1ms_
41ab4     EF 02 A0 FD |                 call    #poll_waitx
41ab8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
41abc                 | 
41abc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41ac0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
41ac4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
41ac8                 | 
41ac8     00 08 00 FF 
41acc     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
41ad0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
41ad4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
41ad8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
41adc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
41ae0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41ae4     48 01 90 5D |         if_nz   jmp     #.done
41ae8                 | .get_dev_desc
41ae8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
41aec     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
41af0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
41af4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
41af8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
41afc     01 71 57 FC |                 wrword  htmp, ptra[wValue]
41b00     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
41b04     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41b08     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
41b0c     AC 99 02 F6 |                 mov     hctwait, _8ms_
41b10     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
41b14     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
41b18     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
41b1c     BE 00 A0 FD |                 call    #calc_crc5
41b20     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
41b24     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
41b28     F7 AD C2 FA |                 rdbyte  total_data, pb
41b2c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
41b30     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
41b34     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41b38     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
41b3c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
41b40     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
41b44                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
41b44     9F 99 02 F6 |                 mov     hctwait, _500us_
41b48     EF 02 A0 FD |                 call    #poll_waitx
41b4c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
41b50     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
41b54     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
41b58     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
41b5c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41b60     CC 00 90 5D |         if_nz   jmp     #.done
41b64     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
41b68     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
41b6c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
41b70     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
41b74     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
41b78     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
41b7c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
41b80     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
41b84     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
41b88     A4 00 90 CD |         if_b    jmp     #.done
41b8c     70 F0 BF FD |                 call    #hparse_con_desc
41b90     9C 00 90 FD |                 jmp     #.done
41b94                 | 
41b94                 | .other
41b94     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
41b98     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
41b9c     28 00 90 AD |         if_x1   jmp     #.reset_feature
41ba0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
41ba4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
41ba8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
41bac     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
41bb0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
41bb4     10 00 90 AD |         if_x1   jmp     #.reset_feature
41bb8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
41bbc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
41bc0     04 00 90 AD |         if_x1   jmp     #.reset_feature
41bc4     68 00 90 FD |                 jmp     #.done
41bc8                 | .reset_feature
41bc8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
41bcc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41bd0     A0 02 A0 FD |                 call    #control_write
41bd4     58 00 90 FD |                 jmp     #.done
41bd8                 | .disconnect
41bd8                 | 
41bd8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
41bdc     00 70 E3 F8 |                 getbyte htmp
41be0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
41be4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
41be8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
41bec     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
41bf0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
41bf4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
41bf8                 |         if EMUPAD_MAX_PLAYER > 0
41bf8                 |         end
41bf8                 |         if HAVE_MOUSE
41bf8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
41bfc     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
41c00     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
41c04                 |         end
41c04                 |         if HAVE_HIDPAD
41c04     14 0A F0 FE |                 loc ptrb,#hidpad_report
41c08     2D 71 03 F6 |                 mov htmp,hdev_port
41c0c     01 70 E7 F2 |                 cmpsub htmp,#1
41c10     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
41c14     B8 F3 03 F1 |                 add ptrb,htmp
41c18     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
41c1c     80 01 6C FC |                 wrlong #0,ptrb
41c20                 |         end
41c20                 | 
41c20     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
41c24     00 00 C4 F8 |                 setbyte #0
41c28     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41c2c     00 00 04 F6 |                 mov     0-0, #0
41c30                 | 
41c30                 | .done
41c30     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
41c34     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
41c38     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
41c3c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
41c40     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
41c44     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
41c48                 | 
41c48     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41c4c     27 EF 03 F6 |                 mov     pb, urx_buff_p
41c50     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41c54     55 02 A0 FD |                 call    #control_read
41c58     00 69 06 FB |                 rdlong  hub_port_status, ptra
41c5c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
41c5c     2D 00 64 FD |                 ret
41c60                 | 
41c60                 | '------------------------------------------------------------------------------
41c60                 | ' Partially populated SETUP packets
41c60                 | '------------------------------------------------------------------------------
41c60     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
41c61     06          |                 byte    REQ_GET_DESC
41c62     00 01       |                 word    TYPE_DEVICE << 8
41c64     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41c66     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41c68     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
41c69     06          |                 byte    REQ_GET_DESC
41c6a     00 02       |                 word    TYPE_CONFIG << 8
41c6c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41c6e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41c70     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
41c71     09          |                 byte    REQ_SET_CONFIG
41c72     00 00       |                 word    0       ' Configuration value
41c74     00 00       |                 word    0       ' Zero
41c76     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
41c78     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
41c79     05          |                 byte    REQ_SET_ADDR
41c7a     00 00       |                 word    0       ' Zero
41c7c     00 00       |                 word    0       ' Zero
41c7e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
41c80                 | '------------------------------------------------------------------------------
41c80                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
41c80                 | ' wValue field dictates which protocol should be used.
41c80                 | '
41c80                 | ' When initialized, all devices default to report protocol. However the host
41c80                 | ' should not make any assumptions about the device state and should set the
41c80                 | ' desired protocol whenever initializing a device.
41c80                 | '------------------------------------------------------------------------------
41c80     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41c81     0B          |                 byte    HID_SET_PROTO
41c82     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
41c84                 |                                                 ' (HID 1.11 Section 7.2.6).
41c84     00 00       |                 word    0               ' Interface index number.
41c86     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
41c88                 | '------------------------------------------------------------------------------
41c88     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41c89     0A          |                 byte    HID_SET_IDLE
41c8a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
41c8c                 |                                         ' reporting until a change is detected in the report data
41c8c                 | 
41c8c                 |                                         ' (HID 1.11 Section 7.2.4).
41c8c     00 00       |                 word    0       ' Interface index number.
41c8e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
41c90     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41c91     09          |                 byte    HID_SET_REPORT
41c92     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
41c94                 |                                         ' (HID 1.11 Section 7.2.2).
41c94     00 00       |                 word    0       ' Interface index number.
41c96     00 00       |                 word    0       ' Size of the report, in bytes.
41c98     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
41c99     06          |                 byte    REQ_GET_DESC
41c9a     00 22       |                 word    TYPE_REPORT << 8
41c9c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41c9e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41ca0                 | '------------------------------------------------------------------------------
41ca0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
41ca1     06          |                 byte    REQ_GET_DESC
41ca2     00 29       |                 word    TYPE_HUB << 8
41ca4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41ca6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41ca8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
41ca9     03          |                 byte    REQ_SET_FEATURE
41caa     00 00       |                 word    0       ' port power
41cac     01 00       |                 word    1       ' Port index number (1+)
41cae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41cb0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
41cb1     01          |                 byte    REQ_CLEAR_FEATURE
41cb2     00 00       |                 word    0       ' port power
41cb4     01 00       |                 word    1       ' Port index number (1+)
41cb6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41cb8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
41cb9     00          |                 byte    REQ_GET_STATUS
41cba     00 00       |                 word    0
41cbc     01 00       |                 word    1       ' Port index number (1+)
41cbe     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
41cc0                 | '------------------------------------------------------------------------------
41cc0                 | if _HAVE_GAMEPAD
41cc0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
41cc4                 | ps3_command_buff
41cc4     00 00 00 00 
41cc8     00          |                 byte    $00, $00, $00, $00, $00
41cc9     00 00 00 00 
41ccd     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
41cce     FF 27 10 00 
41cd2     32          |                 byte    $FF, $27, $10, $00, $32
41cd3     FF 27 10 00 
41cd7     32          |                 byte    $FF, $27, $10, $00, $32
41cd8     FF 27 10 00 
41cdc     32          |                 byte    $FF, $27, $10, $00, $32
41cdd     FF 27 10 00 
41ce1     32          |                 byte    $FF, $27, $10, $00, $32
41ce2     00 00 00 00 
41ce6     00          |                 byte    $00, $00, $00, $00, $00
41ce7     00 00 00 00 
41ceb     00          |                 byte    $00, $00, $00, $00, $00
41cec     00 00 00 00 
41cf0     00          |                 byte    $00, $00, $00, $00, $00
41cf1     00 00 00    |                 byte    $00, $00, $00
41cf4                 | '------------------------------------------------------------------------------
41cf4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
41cf7                 |                                         ' 0x01 All blinking
41cf7                 |                                         ' 0x02 1 flashes, then on
41cf7                 |                                         ' 0x03 2 flashes, then on
41cf7                 |                                         ' 0x04 3 flashes, then on
41cf7                 |                                         ' 0x05 4 flashes, then on
41cf7                 |                                         ' 0x06 1 on
41cf7                 |                                         ' 0x07 2 on
41cf7                 |                                         ' 0x08 3 on
41cf7                 |                                         ' 0x09 4 on
41cf7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
41cf7                 |                                         ' 0x0B Blinking*
41cf7                 |                                         ' 0x0C Slow blinking*
41cf7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
41cf7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
41cfa     00          |                 byte    $00             ' Left rumble
41cfb     00          |                 byte    $00             ' Right rumble
41cfc     00 00 00    |                 byte    $00, $00, $00
41cff     00          | end
41d00                 | alignl
41d00                 | 
41d00                 | if HAVE_MOUSE
41d00     00 00 00 00 
41d04     00 00 00 00 | mouse_limits long 0[2]
41d08     00 00 00 00 | mouse_outptr long 0
41d0c                 | end
41d0c                 | 
41d0c                 | if KEYQUEUE_SIZE > 0
41d0c     00          | keyq_head byte 0
41d0d     00          | keyq_tail byte 0
41d0e     00 00 00 00 
      ...             
41f0a     00 00 00 00 
41f0e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
41f10                 | alignl
41f10                 | end
41f10                 | 
41f10                 | if EMUPAD_MAX_PLAYER > 0
41f10                 | emupad_rule_buffer
41f10                 | if EMUPAD_BUILTIN_RULES
41f10                 | file "padmap_builtin.dat"
41f10                 | end
41f10                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
41f10                 | '' Default rule directly follows!
41f10                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
41f10                 | end
41f10                 | 
41f10                 | '------------------------------------------------------------------------------
41f10                 | ' The USB data cache area gets zero-filled at every device disconnect
41f10                 | '------------------------------------------------------------------------------
41f10                 | usb_cache_start
41f10                 | 
41f10                 | ' HID descriptor and report buffers
41f10                 | if !!OVERLAP_MEMORY
41f10     00 00 00 00 
      ...             
42608     00 00 00 00 
4260c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
42610                 | end
42610     00 00 00 00 
42614     00 00 00 00 | hkbd_report     byte    0[8]
42618     00 00 00 00 | hkbd_led_rep    byte    0
4261c                 | alignl
4261c                 | 
4261c                 | if HAVE_HIDPAD
4261c     00 00 00 00 
      ...             
426d8     00 00 00 00 
426dc     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
426e0                 | end
426e0                 | 
426e0                 | ' HUB descriptor
426e0     00          | hub_descr       byte    0   ' bDescLength
426e1     00          |                 byte    0   ' bDescriptorType
426e2     00          |                 byte    0   ' bNbrPorts
426e3     00 00       |                 word    0   ' wHubCharacteristics
426e5     00          |                 byte    0   ' bPwrOn2PwrGood
426e6     00          |                 byte    0   ' bHubContrCurrent
426e7     00          |                 byte    0   ' DeviceRemoveable
426e8     00          |                 byte    0   ' PortPwrCtrlMask
426e9                 | 
426e9                 | usb_cache_end
426e9                 | 
426e9                 | if HAVE_MOUSE
426e9     00 00 00 00 | mouse_xacc      long 0
426ed     00 00 00 00 | mouse_yacc      long 0
426f1     00 00 00 00 | mouse_zacc      long 0
426f5     00          | mouse_bstate    byte 0
426f6     00          | mouse_lpending  byte 0
426f7     00          | mouse_rpending  byte 0
426f8     00          | mouse_mpending  byte 0
426f9     00          | mouse_lock      byte 0
426fa     00 00 00    |                 byte 0[3] ' padding
426fd                 | end
426fd                 | 
426fd     00 00 00 00 
      ...             
42775     00 00 00 00 
42779     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
4277d     00 00 00 00 
42781     00 00 00 00 
42785     00 00 00 00 
42789     00 00 00 00 
4278d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
4278f     00 00 00 00 
      ...             
42887     00 00 00 00 
4288b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
4288f                 | 
4288f     00          | driver_cog      byte    0                       ' Current driver cog + 1
42890                 | 	alignl
42890                 | _audio096_spin2_dat_
42890                 | 
42890                 | audio       org     0
42890                 | 
42890     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
42894     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
42898     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
4289c                 |  
4289c     01 EC 63 FD |             cogid   pa                   ' compute cogid
428a0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
428a4     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
428a8     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
428ac                 | 
428ac     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
428b0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
428b4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
428b8     0F 24 06 FC |             wrpin   dac2,#right
428bc     0F 00 1E FC |             wxpin   #256,#right    
428c0     41 9C 64 FD |             dirh    #left addpins 1
428c4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
428c8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
428cc     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
428d0                 |             
428d0                 | '---------------------------------------------------------------------------------        
428d0                 | '----------------- The main loop -------------------------------------------------
428d0                 | '---------------------------------------------------------------------------------
428d0                 | 
428d0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
428d4     10 00 90 CD |       if_c  jmp     #loop1
428d8                 |   
428d8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
428dc     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
428e0     D5 00 80 F1 |             sub     0-0,a40000000
428e4     FD 01 6E FB |             djnz    cn,#p402
428e8                 |     
428e8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
428ec     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
428f0     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
428f4     01 00 06 C6 |     if_c    mov     cn,#1
428f8     DA 02 3A F3 |             fle     ct,time3 wcz
428fc     02 00 06 C6 |     if_c    mov     cn,#2     
42900     DB 02 3A F3 |             fle     ct,time4 wcz
42904     03 00 06 C6 |     if_c    mov     cn,#3
42908     DC 02 3A F3 |             fle     ct,time5 wcz
4290c     04 00 06 C6 |     if_c    mov     cn,#4
42910     DD 02 3A F3 |             fle     ct,time6 wcz
42914     05 00 06 C6 |     if_c    mov     cn,#5
42918     DE 02 3A F3 |             fle     ct,time7 wcz
4291c     06 00 06 C6 |     if_c    mov     cn,#6
42920     DF 02 3A F3 |             fle     ct,time8 wcz
42924     07 00 06 C6 |     if_c    mov     cn,#7
42928                 | 
42928                 | 
42928                 | '----------------------------------------------------------------------------------
42928                 | '------------- Compute channel samples --------------------------------------------
42928                 | '----------------------------------------------------------------------------------
42928                 | 
42928                 | 
42928     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
4292c     06 C0 65 F0 |             shl     channeladd,#6
42930     E0 F0 03 F1 |             add     ptra,channeladd
42934                 | 
42934     28 16 64 FD |             setq    #11                        	' read parameters
42938     00 D7 05 FB |             rdlong  pointer0,ptra
4293c                 |     	    
4293c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
42940     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
42944     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
42948     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
4294c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
42950     00 C4 0D F2 |             cmp     qq,#0 wz                         
42954     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
42958     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
4295c                 |             
4295c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
42960     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
42964     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
42968                 | 
42968     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
4296c     EC 08 3A F9 |             getword oldrs,sample0,#1
42970     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
42974     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
42978     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
4297c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
42980                 | 
42980     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
42984     00 04 02 F6 |             mov     dt0,0-0    
42988     D7 04 82 F1 |             sub     dt0,time0
4298c                 |             
4298c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
42990     FB 00 00 F1 |             add     0-0,afreq0  	
42994                 |             
42994                 | '---- envelopes
42994                 |             
42994     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
42998     20 00 00 AF 
4299c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
429a0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
429a4                 | 
429a4     FB 48 02 F6 |             mov     envs1,afreq0
429a8     F5 48 02 FA |             mul     envs1,envspd0
429ac     24 E7 01 F1 |             add     envph0,envs1 
429b0                 | 
429b0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
429b4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
429b8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
429bc     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
429c0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
429c4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
429c8     00 46 06 36 |     if_ge   mov     envlo,#0
429cc     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
429d0     16 E6 65 30 |     if_ge   shl     envph0,#22
429d4                 | 
429d4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
429d8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
429dc     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
429e0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
429e4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
429e8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
429ec     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
429f0     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
429f4     23 49 02 FA |             mul     envs1,envlo
429f8     25 49 02 F1 |             add     envs1,envs2
429fc     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
42a00                 |             
42a00     1B DA 0D F4 | p410        testb   sstart0, #27 wz
42a04     1B C6 61 AD |     if_z    getrnd  spl
42a08     58 00 90 AD |     if_z    jmp     #p406
42a0c                 |  
42a0c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
42a10     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
42a14     08 D6 45 F0 |             shr     pointer0,#8
42a18                 |          
42a18     1F DA 0D F4 |             testb   sstart0,#31 wz            
42a1c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
42a20     1C DA 0D F4 |             testb   sstart0,#28 wz            
42a24     01 D6 65 A0 |     if_z    shl     pointer0,#1        
42a28                 |         
42a28     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
42a2c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
42a30     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
42a34                 |             
42a34     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
42a38     ED C4 01 F1 |             add     qq,sstart0            
42a3c                 | 
42a3c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
42a40     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
42a44     1C 01 B0 1D |     if_gt   call    #cache_read
42a48                 |          
42a48     1F DA 0D F4 |             testb   sstart0,#31 wz 
42a4c     08 C6 65 50 |     if_nz   shl     spl,#8
42a50     08 D6 65 50 |     if_nz   shl     pointer0,#8
42a54     07 D6 65 A0 |     if_z    shl     pointer0,#7
42a58     1C DA 0D F4 |             testb   sstart0,#28 wz            
42a5c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
42a60     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
42a64                 | 
42a64                 | 
42a64     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
42a68     00 C6 01 F6 |             mov     spl,0-0
42a6c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
42a70     00 C6 01 F6 |             mov     spl,0-0
42a74                 | 
42a74     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
42a78     00 0A 02 F6 |             mov     ls0,0-0
42a7c     20 00 00 FF 
42a80     00 C4 05 F6 |             mov     qq,##16384
42a84     FE C4 81 F1 |             sub     qq,apan0
42a88     E2 C6 31 FA |             scas    spl,qq
42a8c     00 0C 02 F6 |             mov     rs0, 0-0
42a90                 | 
42a90     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
42a94     06 11 02 F1 |             add     rs,rs0
42a98     03 0F 82 F1 |             sub     ls,oldls
42a9c     05 0F 02 F1 |             add     ls,ls0
42aa0                 |    
42aa0     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
42aa4     05 D9 21 F9 |             setword sample0,ls0,#0
42aa8                 |             
42aa8     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
42aac     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
42ab0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
42ab4                 |   '  if_z    mov     sample0,#0
42ab4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
42ab8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
42abc     04 00 00 AF 
42ac0     00 B0 05 A1 |     if_z    add     time1,##2048
42ac4     D8 B2 01 A6 |     if_z    mov     time2,time1
42ac8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
42acc                 | 
42acc     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
42ad0     00 D7 65 FC |             wrlong  pointer0,ptra
42ad4     08 E7 65 FC |             wrlong  envph0,ptra[8]
42ad8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
42adc                 |                       
42adc     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
42ae0     FF C3 25 A7 |     if_z    decmod  front, #511          
42ae4                 |          
42ae4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
42ae8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
42aec     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
42af0     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
42af4                 | 	    
42af4                 | 		    
42af4     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
42af8     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
42afc     04 15 02 F6 |             mov     newsample, oldrs       
42b00                 | 
42b00     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
42b04     02 AF 01 F1 |             add     time0,dt0    
42b08                 |                                      
42b08     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
42b0c     D8 FD 9F AD |     if_z    jmp     #loop1
42b10     02 C5 01 F6 |             mov     qq,dt0
42b14                 | 
42b14                 |     
42b14                 |             
42b14     01 4E 36 F0 | p301        rol     dropper,#1 wc
42b18     40 00 90 3D |     if_nc   jmp     #p399
42b1c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
42b20     00 C2 9D F2 |             cmpr    front, #0-0 wcz
42b24     F4 FF 9F AD |     if_e    jmp     #p398   
42b28                 | 		
42b28     00 1A 0E F2 | 	    cmp     scbase,#0 wz
42b2c     20 00 90 AD |     if_z    jmp     #p302	   
42b30                 |   
42b30     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
42b34     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
42b38     02 1E 66 C0 |     if_c    shl     scptr2,#2
42b3c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
42b40     60 1E 66 FC |             wrlong  scptr2,#$60
42b44     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
42b48     01 00 00 CF 
42b4c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
42b50                 | 			    
42b50     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
42b54     00 00 00 FF 
42b58     FF C3 05 F7 |             incmod  front, ##511
42b5c     ED C5 6D FB | p399        djnz    qq,#p301
42b60                 |             
42b60     6C FD 9F FD |             jmp     #loop            'loop
42b64                 | 
42b64                 | '----------------------------------------------------------------------------------
42b64                 | '------------- This is the end of the main loop -----------------------------------
42b64                 | '----------------------------------------------------------------------------------
42b64                 | 
42b64                 | '----------------------------------------------------------------------------------
42b64                 | '------------- PSRAM cache ----------- --------------------------------------------
42b64                 | '----------------------------------------------------------------------------------
42b64                 | 
42b64                 | ' There are 8 cache pointers for 8 channels
42b64                 | ' if 24 higher bits of address=cache, then get a word from the cache
42b64                 | ' else load the cache from PSRAM, update the pointer, then read a sample
42b64                 | 
42b64                 | 
42b64     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
42b68                 |             
42b68     E2 40 02 F6 | 	    mov     addrhi,qq		
42b6c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
42b70     14 01 96 F9 | 	    alts    cn,#cache1            
42b74     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
42b78     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
42b7c                 | 	
42b7c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
42b80     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
42b84     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
42b88     08 38 66 F0 | 	    shl     cmd,#8
42b8c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
42b90     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
42b94     08 3A 66 F0 |             shl     hubaddr,#8                  '
42b98     13 3B 02 F1 |             add     hubaddr,hubptr 
42b9c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
42ba0     28 04 64 FD |             setq    #2                          ' write 3 longs
42ba4     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
42ba8     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
42bac     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
42bb0                 |             
42bb0                 | 	
42bb0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
42bb4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
42bb8     13 C5 01 F1 | 	    add     qq,hubptr
42bbc     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
42bc0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
42bc4                 |           
42bc4                 | 
42bc4                 | '--------------------------------------------------------------------------
42bc4                 | '------ Interrupt service -------------------------------------------------
42bc4                 | '------ Output the sample, get the next one if exists ---------------------
42bc4                 | '--------------------------------------------------------------------------
42bc4                 | 
42bc4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
42bc8     0F D0 25 FC |             wypin   rsample,#right       '4
42bcc     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
42bd0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
42bd4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
42bd8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
42bdc     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
42be0                 |     
42be0     F5 FF 3B FB |             reti1                        '17/19 
42be4                 |           
42be4                 | '---------------------------------------------------------------------------
42be4                 | '-------- End of interrupt -------------------------------------------------
42be4                 | '---------------------------------------------------------------------------    
42be4                 | 
42be4                 | 
42be4                 | '---------------------------------------------------------------------------
42be4                 | '------- Variables ---------------------------------------------------------
42be4                 | '---------------------------------------------------------------------------
42be4                 | 
42be4                 | ' constants
42be4                 | 
42be4     00 00 00 40 | a40000000   long $40000000
42be8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
42bec                 | 
42bec                 | ' Time variables
42bec                 | 
42bec     00 00 00 00 | time0       long 0    ' Global sample computing time
42bf0     01 00 00 00 | time1       long 1    ' Local channels time
42bf4     02 00 00 00 | time2       long 2
42bf8     03 00 00 00 | time3       long 3
42bfc     04 00 00 00 | time4       long 4
42c00     05 00 00 00 | time5       long 5
42c04     06 00 00 00 | time6       long 6
42c08     07 00 00 00 | time7       long 7
42c0c     08 00 00 00 | time8       long 8
42c10                 | 
42c10     00 00 00 00 | channeladd long 0
42c14                 | 
42c14     00 00 00 00 | front       long 0
42c18                 | 
42c18                 | ' temporary variables 
42c18     00 00 00 00 | qq          long 0
42c1c     00 00 00 00 | spl         long 0
42c20     00 00 00 00 | zero        long 0
42c24     00 00 00 00 | mailbox     long 0
42c28     00 00 00 00 | mailbox2 long 0
42c2c                 | 
42c2c                 | ' Interrupt ISR variables
42c2c                 | 
42c2c     00 00 00 00 | lsample     long 0
42c30     00 00 00 00 | rsample     long 0
42c34     00 00 00 00 | lsnext      long 0
42c38     00 00 00 00 | rsnext      long 0 
42c3c                 | 
42c3c                 | ' channel parameter block
42c3c                 | 
42c3c     00 00 00 00 | pointer0    long 0     
42c40     00 00 00 00 | sample0     long 0
42c44     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
42c48     00 00 00 00 | lstart0     long 0
42c4c     00 00 00 00 | lend0       long 0
42c50     00 00 00 00 | volpan0     long 0
42c54     00 00 00 00 | freqskip0   long 0
42c58     00 00 00 00 | command0    long 0
42c5c     00 00 00 00 | envph0	    long 0
42c60     00 00 00 00 | envptr0	    long 0
42c64     00 00 00 00 | envspd0	    long 0
42c68     00 00 00 00 | envlen0	    long 0
42c6c     00 00 00 00 | res5	    long 0
42c70     00 00 00 00 | res6	    long 0
42c74     00 00 00 00 | res7	    long 0
42c78     00 00 00 00 | res8	    long 0
42c7c                 | 
42c7c     00 00 00 00 | afreq0      long 0
42c80     00 00 00 00 | askip0      long 0
42c84     00 00 00 00 | avol0       long 0
42c88     00 00 00 00 | apan0       long 0
42c8c                 | 
42c8c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
42c90     00 00 00 00 | cn          long 0
42c94     00 00 00 00 | ct          long 0
42c98     00 00 00 00 | dt0         long 0
42c9c                 | 
42c9c                 | ' Samples
42c9c     00 00 00 00 | oldls       long 0
42ca0     00 00 00 00 | oldrs       long 0
42ca4                 | 
42ca4     00 00 00 00 | ls0         long 0
42ca8     00 00 00 00 | rs0         long 0
42cac                 | 
42cac     00 00 00 00 | ls          long 0    
42cb0     00 00 00 00 | rs          long 0
42cb4                 | 
42cb4     00 00 00 00 | oldsample   long 0
42cb8     00 00 00 00 | newsample   long 0
42cbc                 | 
42cbc     00 00 00 00 | nrsample    long 0
42cc0     00 00 00 00 | nlsample    long 0
42cc4                 | 
42cc4     00 00 00 00 | scbase long 0
42cc8     00 00 00 00 | scptr long 0
42ccc     00 00 00 00 | scptr2 long 0
42cd0     00 00 00 00 | scope long 0
42cd4                 | 
42cd4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
42cd8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
42cdc                 | 
42cdc     00 18 07 00 | hubptr      long $71800
42ce0     00 00 00 00 | cache1      long 0
42ce4     00 00 00 00 | cache2      long 0
42ce8     00 00 00 00 | cache3      long 0
42cec     00 00 00 00 | cache4      long 0
42cf0     00 00 00 00 | cache5      long 0
42cf4     00 00 00 00 | cache6      long 0
42cf8     00 00 00 00 | cache7      long 0
42cfc     00 00 00 00 | cache8      long 0
42d00                 | 
42d00                 | 
42d00     00 00 00 00 | cmd         long 0
42d04     00 00 00 00 | hubaddr     long 0
42d08     00 01 00 00 | count       long 256
42d0c     00 00 00 00 | addrlo long 0
42d10     00 00 00 00 | addrhi long 0
42d14     00 00 00 00 | pointer00 long 0
42d18     00 00 00 00 | envhi long 0
42d1c     00 00 00 00 | envlo long 0
42d20     00 00 00 00 | envs1 long 0
42d24     00 00 00 00 | envs2 long 0
42d28     00 00 00 00 | noise0 long 0
42d2c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
42d30     00 00 00 00 
42d34     00 00 00 00 | null  			long 	0,0           ' for channel reset
42d38                 | 	alignl
42d38                 | __system__dat_
42d38     00 00 00 00 
42d3c     00 00 00 00 | 	byte	$00[8]
42d40     03 00 00 00 
42d44     00 00 00 00 
42d48     00 00 00 00 
42d4c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
42d50     00 00 00 00 
      ...             
42fdc     00 00 00 00 
42fe0     00 00 00 00 | 	byte	$00[660]
42fe4     00 00 D0 0A | 	long	(173 {__system____root_opendir})<<20
42fe8     00 00 E0 0A | 	long	(174 {__system____root_closedir})<<20
42fec     00 00 F0 0A | 	long	(175 {__system____root_readdir})<<20
42ff0     00 00 00 0B | 	long	(176 {__system____root_stat})<<20
42ff4     00 00 00 00 
42ff8     00 00 00 00 
42ffc     00 00 00 00 
43000     00 00 00 00 
43004     00 00 00 00 
43008     00 00 00 00 
4300c     00 00 00 00 | 	byte	$00[28]
43010     78 30 04 00 | 	long	@@@__system__dat_ + 832
43014     7B 30 04 00 | 	long	@@@__system__dat_ + 835
43018     9C 30 04 00 | 	long	@@@__system__dat_ + 868
4301c     B5 30 04 00 | 	long	@@@__system__dat_ + 893
43020     D0 30 04 00 | 	long	@@@__system__dat_ + 920
43024     EA 30 04 00 | 	long	@@@__system__dat_ + 946
43028     FA 30 04 00 | 	long	@@@__system__dat_ + 962
4302c     0C 31 04 00 | 	long	@@@__system__dat_ + 980
43030     1E 31 04 00 | 	long	@@@__system__dat_ + 998
43034     30 31 04 00 | 	long	@@@__system__dat_ + 1016
43038     3C 31 04 00 | 	long	@@@__system__dat_ + 1028
4303c     4D 31 04 00 | 	long	@@@__system__dat_ + 1045
43040     61 31 04 00 | 	long	@@@__system__dat_ + 1065
43044     6B 31 04 00 | 	long	@@@__system__dat_ + 1075
43048     7B 31 04 00 | 	long	@@@__system__dat_ + 1091
4304c     8A 31 04 00 | 	long	@@@__system__dat_ + 1106
43050     A0 31 04 00 | 	long	@@@__system__dat_ + 1128
43054     B9 31 04 00 | 	long	@@@__system__dat_ + 1153
43058     CD 31 04 00 | 	long	@@@__system__dat_ + 1173
4305c     DB 31 04 00 | 	long	@@@__system__dat_ + 1187
43060     EF 31 04 00 | 	long	@@@__system__dat_ + 1207
43064     FB 31 04 00 | 	long	@@@__system__dat_ + 1219
43068     0D 32 04 00 | 	long	@@@__system__dat_ + 1237
4306c     25 32 04 00 | 	long	@@@__system__dat_ + 1261
43070     37 32 04 00 | 	long	@@@__system__dat_ + 1279
43074     4A 32 04 00 | 	long	@@@__system__dat_ + 1298
43078     4F 4B 00 4E 
4307c     75 6D 65 72 
43080     69 63 61 6C 
43084     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
43088     75 6D 65 6E 
4308c     74 20 6F 75 
43090     74 20 6F 66 
43094     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
43098     61 69 6E 00 
4309c     52 65 73 75 
430a0     6C 74 20 6E 
430a4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
430a8     65 70 72 65 
430ac     73 65 6E 74 
430b0     61 62 6C 65 
430b4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
430b8     65 67 61 6C 
430bc     20 6D 75 6C 
430c0     74 69 62 79 
430c4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
430c8     65 71 75 65 
430cc     6E 63 65 00 
430d0     4E 6F 20 73 
430d4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
430d8     66 69 6C 65 
430dc     20 6F 72 20 
430e0     64 69 72 65 
430e4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
430e8     79 00 42 61 
430ec     64 20 66 69 
430f0     6C 65 20 6E 
430f4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
430f8     72 00 50 65 
430fc     72 6D 69 73 
43100     73 69 6F 6E 
43104     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
43108     69 65 64 00 
4310c     4E 6F 74 20 
43110     65 6E 6F 75 
43114     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
43118     65 6D 6F 72 
4311c     79 00 54 65 
43120     6D 70 6F 72 
43124     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
43128     66 61 69 6C 
4312c     75 72 65 00 
43130     46 69 6C 65 
43134     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
43138     73 74 73 00 
4313c     49 6E 76 61 
43140     6C 69 64 20 
43144     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
43148     6D 65 6E 74 
4314c     00 54 6F 6F 
43150     20 6D 61 6E 
43154     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
43158     65 6E 20 66 
4315c     69 6C 65 73 
43160     00 49 2F 4F 
43164     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
43168     6F 72 00 4E 
4316c     6F 74 20 61 
43170     20 64 69 72 
43174     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
43178     72 79 00 49 
4317c     73 20 61 20 
43180     64 69 72 65 
43184     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
43188     79 00 52 65 
4318c     61 64 20 6F 
43190     6E 6C 79 20 
43194     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
43198     20 73 79 73 
4319c     74 65 6D 00 
431a0     46 75 6E 63 
431a4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
431a8     20 6E 6F 74 
431ac     20 69 6D 70 
431b0     6C 65 6D 65 
431b4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
431b8     00 44 69 72 
431bc     65 63 74 6F 
431c0     72 79 20 6E 
431c4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
431c8     6D 70 74 79 
431cc     00 4E 61 6D 
431d0     65 20 74 6F 
431d4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
431d8     6E 67 00 44 
431dc     65 76 69 63 
431e0     65 20 6E 6F 
431e4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
431e8     65 6B 61 62 
431ec     6C 65 00 42 
431f0     61 64 20 61 
431f4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
431f8     73 73 00 42 
431fc     72 6F 6B 65 
43200     6E 20 63 6F 
43204     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
43208     74 69 6F 6E 
4320c     00 44 65 76 
43210     69 63 65 20 
43214     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
43218     65 73 6F 75 
4321c     72 63 65 20 
43220     62 75 73 79 
43224     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
43228     73 73 20 64 
4322c     65 76 69 63 
43230     65 20 6C 69 
43234     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
43238     6F 20 73 70 
4323c     61 63 65 20 
43240     6F 6E 20 64 
43244     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
43248     65 00 55 6E 
4324c     6B 6E 6F 77 
43250     6E 20 65 72 
43254     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
43258     00 00 00 00 
4325c     00 00 00 00 
43260     00 00 00 00 | 	byte	$00[12]
43264     05 00 00 00 
43268     00 00 00 00 
4326c     00 00 00 00 
43270     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43274     00 00 00 00 | 	byte	$00, $00, $00, $00
43278     00 00 50 0C | 	long	(197 {__system___tx})<<20
4327c     00 00 60 0C | 	long	(198 {__system___rx})<<20
43280     00 00 00 00 | 	byte	$00, $00, $00, $00
43284     00 00 70 0C | 	long	(199 {__system___rxtxioctl_0778})<<20
43288     00 00 80 0C | 	long	(200 {__system____dummy_flush_0779})<<20
4328c     00 00 00 00 
43290     00 00 00 00 | 	byte	$00[8]
43294     01 00 00 00 
43298     06 00 00 00 
4329c     00 00 00 00 
432a0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
432a4     00 00 00 00 
432a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
432ac     00 00 50 0C | 	long	(197 {__system___tx})<<20
432b0     00 00 60 0C | 	long	(198 {__system___rx})<<20
432b4     00 00 00 00 | 	byte	$00, $00, $00, $00
432b8     00 00 70 0C | 	long	(199 {__system___rxtxioctl_0778})<<20
432bc     00 00 80 0C | 	long	(200 {__system____dummy_flush_0779})<<20
432c0     00 00 00 00 
432c4     00 00 00 00 | 	byte	$00[8]
432c8     01 00 00 00 
432cc     06 00 00 00 
432d0     00 00 00 00 
432d4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
432d8     00 00 00 00 
432dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
432e0     00 00 50 0C | 	long	(197 {__system___tx})<<20
432e4     00 00 60 0C | 	long	(198 {__system___rx})<<20
432e8     00 00 00 00 | 	byte	$00, $00, $00, $00
432ec     00 00 70 0C | 	long	(199 {__system___rxtxioctl_0778})<<20
432f0     00 00 80 0C | 	long	(200 {__system____dummy_flush_0779})<<20
432f4     00 00 00 00 
      ...             
43464     00 00 00 00 
43468     00 00 00 00 | 	byte	$00[376]
4346c     70 34 04 00 | 	long	@@@__system__dat_ + 1848
43470     00 00 00 00 
43474     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
43478                 | 	alignl
43478                 | _fatfs_cc_dat_
43478     C7 00 FC 00 
4347c     E9 00 E2 00 
43480     E4 00 E0 00 
43484     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
43488     EA 00 EB 00 
4348c     E8 00 EF 00 
43490     EE 00 EC 00 
43494     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
43498     C9 00 E6 00 
4349c     C6 00 F4 00 
434a0     F6 00 F2 00 
434a4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
434a8     FF 00 D6 00 
434ac     DC 00 F8 00 
434b0     A3 00 D8 00 
434b4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
434b8     E1 00 ED 00 
434bc     F3 00 FA 00 
434c0     F1 00 D1 00 
434c4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
434c8     BF 00 AE 00 
434cc     AC 00 BD 00 
434d0     BC 00 A1 00 
434d4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
434d8     91 25 92 25 
434dc     93 25 02 25 
434e0     24 25 C1 00 
434e4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
434e8     A9 00 63 25 
434ec     51 25 57 25 
434f0     5D 25 A2 00 
434f4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
434f8     14 25 34 25 
434fc     2C 25 1C 25 
43500     00 25 3C 25 
43504     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
43508     5A 25 54 25 
4350c     69 25 66 25 
43510     60 25 50 25 
43514     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
43518     F0 00 D0 00 
4351c     CA 00 CB 00 
43520     C8 00 31 01 
43524     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
43528     CF 00 18 25 
4352c     0C 25 88 25 
43530     84 25 A6 00 
43534     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
43538     D3 00 DF 00 
4353c     D4 00 D2 00 
43540     F5 00 D5 00 
43544     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
43548     DE 00 DA 00 
4354c     DB 00 D9 00 
43550     FD 00 DD 00 
43554     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
43558     AD 00 B1 00 
4355c     17 20 BE 00 
43560     B6 00 A7 00 
43564     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
43568     B0 00 A8 00 
4356c     B7 00 B9 00 
43570     B3 00 B2 00 
43574     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
43578     61 00 1A 03 
4357c     E0 00 17 03 
43580     F8 00 07 03 
43584     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
43588     78 01 00 01 
4358c     30 01 32 01 
43590     06 01 39 01 
43594     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
43598     2E 01 79 01 
4359c     06 01 80 01 
435a0     4D 00 43 02 
435a4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
435a8     82 01 84 01 
435ac     84 01 86 01 
435b0     87 01 87 01 
435b4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
435b8     8B 01 8B 01 
435bc     8D 01 8E 01 
435c0     8F 01 90 01 
435c4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
435c8     93 01 94 01 
435cc     F6 01 96 01 
435d0     97 01 98 01 
435d4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
435d8     9B 01 9C 01 
435dc     9D 01 20 02 
435e0     9F 01 A0 01 
435e4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
435e8     A2 01 A4 01 
435ec     A4 01 A6 01 
435f0     A7 01 A7 01 
435f4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
435f8     AB 01 AC 01 
435fc     AC 01 AE 01 
43600     AF 01 AF 01 
43604     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
43608     B3 01 B3 01 
4360c     B5 01 B5 01 
43610     B7 01 B8 01 
43614     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
43618     BB 01 BC 01 
4361c     BC 01 BE 01 
43620     F7 01 C0 01 
43624     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
43628     C3 01 C4 01 
4362c     C5 01 C4 01 
43630     C7 01 C8 01 
43634     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
43638     CB 01 CA 01 
4363c     CD 01 10 01 
43640     DD 01 01 00 
43644     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
43648     12 01 F3 01 
4364c     03 00 F1 01 
43650     F4 01 F4 01 
43654     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
43658     22 02 12 01 
4365c     3A 02 09 00 
43660     65 2C 3B 02 
43664     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
43668     66 2C 3F 02 
4366c     40 02 41 02 
43670     41 02 46 02 
43674     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
43678     40 00 81 01 
4367c     86 01 55 02 
43680     89 01 8A 01 
43684     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
43688     5A 02 90 01 
4368c     5C 02 5D 02 
43690     5E 02 5F 02 
43694     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
43698     62 02 94 01 
4369c     64 02 65 02 
436a0     66 02 67 02 
436a4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
436a8     6A 02 62 2C 
436ac     6C 02 6D 02 
436b0     6E 02 9C 01 
436b4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
436b8     9D 01 73 02 
436bc     74 02 9F 01 
436c0     76 02 77 02 
436c4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
436c8     7A 02 7B 02 
436cc     7C 02 64 2C 
436d0     7E 02 7F 02 
436d4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
436d8     82 02 A9 01 
436dc     84 02 85 02 
436e0     86 02 87 02 
436e4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
436e8     B1 01 B2 01 
436ec     45 02 8D 02 
436f0     8E 02 8F 02 
436f4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
436f8     B7 01 7B 03 
436fc     03 00 FD 03 
43700     FE 03 FF 03 
43704     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
43708     86 03 88 03 
4370c     89 03 8A 03 
43710     B1 03 11 03 
43714     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
43718     A3 03 A3 03 
4371c     C4 03 08 03 
43720     CC 03 03 00 
43724     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
43728     8F 03 D8 03 
4372c     18 01 F2 03 
43730     0A 00 F9 03 
43734     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
43738     F5 03 F6 03 
4373c     F7 03 F7 03 
43740     F9 03 FA 03 
43744     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
43748     20 03 50 04 
4374c     10 07 60 04 
43750     22 01 8A 04 
43754     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
43758     0E 01 CF 04 
4375c     01 00 C0 04 
43760     D0 04 44 01 
43764     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
43768     00 00 7D 1D 
4376c     01 00 63 2C 
43770     00 1E 96 01 
43774     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
43778     00 1F 08 06 
4377c     10 1F 06 06 
43780     20 1F 08 06 
43784     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
43788     40 1F 06 06 
4378c     51 1F 07 00 
43790     59 1F 52 1F 
43794     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
43798     5D 1F 56 1F 
4379c     5F 1F 60 1F 
437a0     08 06 70 1F 
437a4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
437a8     BB 1F C8 1F 
437ac     C9 1F CA 1F 
437b0     CB 1F DA 1F 
437b4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
437b8     F9 1F EA 1F 
437bc     EB 1F FA 1F 
437c0     FB 1F 80 1F 
437c4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
437c8     08 06 A0 1F 
437cc     08 06 B0 1F 
437d0     04 00 B8 1F 
437d4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
437d8     BC 1F CC 1F 
437dc     01 00 C3 1F 
437e0     D0 1F 02 06 
437e4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
437e8     E5 1F 01 00 
437ec     EC 1F F3 1F 
437f0     01 00 FC 1F 
437f4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
437f8     32 21 70 21 
437fc     10 02 84 21 
43800     01 00 83 21 
43804     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
43808     30 2C 2F 04 
4380c     60 2C 02 01 
43810     67 2C 06 01 
43814     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
43818     80 2C 64 01 
4381c     00 2D 26 08 
43820     41 FF 1A 03 
43824     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
43828     05 07 09 0E 
4382c     10 12 14 16 
43830     18 1C 1E 43 
43834     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
43838     41 41 43 45 
4383c     45 45 49 49 
43840     49 41 41 45 
43844     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
43848     4F 55 55 59 
4384c     4F 55 4F 9C 
43850     4F 9E 9F 41 
43854     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
43858     A5 A6 A7 A8 
4385c     A9 AA AB AC 
43860     AD AE AF B0 
43864     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
43868     41 41 41 B8 
4386c     B9 BA BB BC 
43870     BD BE BF C0 
43874     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
43878     C5 41 41 C8 
4387c     C9 CA CB CC 
43880     CD CE CF D1 
43884     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
43888     49 49 49 49 
4388c     D9 DA DB DC 
43890     DD 49 DF 4F 
43894     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
43898     4F E6 E8 E8 
4389c     55 55 55 59 
438a0     59 EE EF F0 
438a4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
438a8     F5 F6 F7 F8 
438ac     F9 FA FB FC 
438b0     FD FE FF 00 
438b4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
438b8     00 00 00 00 | 	byte	$00, $00, $00, $00
438bc     00 00 40 0B | 	long	(180 {_fatfs_cc_v_close})<<20
438c0     00 00 50 0B | 	long	(181 {_fatfs_cc_v_read})<<20
438c4     00 00 60 0B | 	long	(182 {_fatfs_cc_v_write})<<20
438c8     00 00 70 0B | 	long	(183 {_fatfs_cc_v_lseek})<<20
438cc     00 00 80 0B | 	long	(184 {_fatfs_cc_v_ioctl})<<20
438d0     00 00 90 0C | 	long	(201 {_fatfs_cc_v_flush})<<20
438d4     00 00 00 00 
438d8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
438dc     00 00 90 0B | 	long	(185 {_fatfs_cc_v_open})<<20
438e0     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_creat})<<20
438e4     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_opendir})<<20
438e8     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_closedir})<<20
438ec     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_readdir})<<20
438f0     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_stat})<<20
438f4     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_mkdir})<<20
438f8     00 00 00 0C | 	long	(192 {_fatfs_cc_v_rmdir})<<20
438fc     00 00 10 0C | 	long	(193 {_fatfs_cc_v_remove})<<20
43900     00 00 20 0C | 	long	(194 {_fatfs_cc_v_rename})<<20
43904     00 00 30 0C | 	long	(195 {_fatfs_cc_v_init})<<20
43908     00 00 40 0C | 	long	(196 {_fatfs_cc_v_deinit})<<20
4390c     FF FF FF FF 
43910     1F 00 00 00 
43914     1C 00 00 00 
43918     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
4391c     1E 00 00 00 
43920     1F 00 00 00 
43924     1E 00 00 00 
43928     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
4392c     1F 00 00 00 
43930     1E 00 00 00 
43934     1F 00 00 00 
43938     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
4393c     1F 00 00 00 
43940     00 00 00 00 
43944     1F 00 00 00 
43948     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
4394c     5A 00 00 00 
43950     78 00 00 00 
43954     97 00 00 00 
43958     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
4395c     D4 00 00 00 
43960     F3 00 00 00 
43964     11 01 00 00 
43968     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
4396c     4E 01 00 00 
43970     6D 01 00 00 
43974     FF FF FF FF 
43978     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
4397c     00 00 00 00 
      ...             
43994     00 00 00 00 
43998     00 00 00 00 | 	byte	$00[32]
4399c     BA 39 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
439a0     BE 39 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
439a4     00 00 00 00 
439a8     00 00 00 00 
439ac     00 00 00 00 
439b0     00 00 00 00 
439b4     00 00       | 	byte	$00[18]
439b6     3F 3F 3F 00 
439ba     55 43 54 00 
439be     55 43 54 00 
439c2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
439c6     00 00 00 00 
439ca     00 00 00    | 	byte	$00[7]
439cd     CA 9A 3B 00 
439d1     00 00 00 01 
439d5     01 01 01 01 
439d9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
439dd     91 11 11 11 
439e1     11 01 01 01 
439e5     01 01 01 01 
439e9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
439ed     01 01 01 01 
439f1     01 01 01    | 	byte	$01[7]
439f4     90 20 20 20 
439f8     20 20 20 20 
439fc     20 20 20 20 
43a00     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
43a04     42 42 42 42 
43a08     42 42 42 42 
43a0c     42 42       | 	byte	$42[10]
43a0e     20 20 20 20 
43a12     20 20 20    | 	byte	$20[7]
43a15     44 44 44 44 
43a19     44 44       | 	byte	$44[6]
43a1b     04 04 04 04 
43a1f     04 04 04 04 
43a23     04 04 04 04 
43a27     04 04 04 04 
43a2b     04 04 04 04 | 	byte	$04[20]
43a2f     20 20 20 20 
43a33     20 20       | 	byte	$20[6]
43a35     48 48 48 48 
43a39     48 48       | 	byte	$48[6]
43a3b     08 08 08 08 
43a3f     08 08 08 08 
43a43     08 08 08 08 
43a47     08 08 08 08 
43a4b     08 08 08 08 | 	byte	$08[20]
43a4f     20 20 20 20 
43a53     01 00 00 00 
43a57     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
43a58                 | __methodtable__
43a58     E8 66 01 00 | 	long	@_do_no_command
43a5c     F4 0A 02 00 | 	long	@_do_plus
43a60     14 FB 01 00 | 	long	@_do_minus
43a64     DC 09 02 00 | 	long	@_do_or
43a68     94 01 02 00 | 	long	@_do_mul
43a6c     D8 E5 01 00 | 	long	@_do_fdiv
43a70     C4 DD 01 00 | 	long	@_do_and
43a74     DC DE 01 00 | 	long	@_do_div
43a78     74 FF 01 00 | 	long	@_do_mod
43a7c     A8 11 02 00 | 	long	@_do_shl
43a80     C0 12 02 00 | 	long	@_do_shr
43a84     E0 0F 02 00 | 	long	@_do_power
43a88     7C D3 01 00 | 	long	@_do_getvar
43a8c     24 94 01 00 | 	long	@_do_push
43a90     74 CD 01 00 | 	long	@_do_assign
43a94     0C F7 00 00 | 	long	@_do_cls
43a98     B4 60 01 00 | 	long	@_do_new
43a9c     68 8C 01 00 | 	long	@_do_plot
43aa0     60 1F 01 00 | 	long	@_do_draw
43aa4     D0 8E 01 00 | 	long	@_do_print
43aa8     EC F4 00 00 | 	long	@_do_circle
43aac     94 21 01 00 | 	long	@_do_fcircle
43ab0     E0 E3 00 00 | 	long	@_do_box
43ab4     78 26 01 00 | 	long	@_do_frame
43ab8     C8 F9 00 00 | 	long	@_do_color
43abc     08 24 01 00 | 	long	@_do_for
43ac0     20 63 01 00 | 	long	@_do_next
43ac4     C8 4D 01 00 | 	long	@_do_list
43ac8     48 B0 01 00 | 	long	@_do_run
43acc     BC 20 01 00 | 	long	@_do_error
43ad0     D0 33 01 00 | 	long	@_do_fast_goto
43ad4     C0 34 01 00 | 	long	@_do_find_goto
43ad8     D4 36 01 00 | 	long	@_do_slow_goto
43adc     08 67 01 00 | 	long	@_do_nothing
43ae0     64 B4 01 00 | 	long	@_do_save
43ae4     64 50 01 00 | 	long	@_do_load
43ae8     A4 7F 01 00 | 	long	@_do_pinwrite
43aec     B4 CA 01 00 | 	long	@_do_waitms
43af0     E8 CB 01 00 | 	long	@_do_waitvbl
43af4     C8 39 01 00 | 	long	@_do_if
43af8     54 20 01 00 | 	long	@_do_else
43afc     FC E0 01 00 | 	long	@_do_eq
43b00     A0 E7 01 00 | 	long	@_do_ge
43b04     6C F1 01 00 | 	long	@_do_le
43b08     88 EC 01 00 | 	long	@_do_gt
43b0c     48 F6 01 00 | 	long	@_do_lt
43b10     00 05 02 00 | 	long	@_do_ne
43b14     B0 AD 01 00 | 	long	@_do_rnd
43b18     C8 E5 00 00 | 	long	@_do_brun
43b1c     64 DF 00 00 | 	long	@_do_beep
43b20     F0 17 01 00 | 	long	@_do_dir
43b24     D8 7B 01 00 | 	long	@_do_paper
43b28     84 3D 01 00 | 	long	@_do_ink
43b2c     8C 23 01 00 | 	long	@_do_font
43b30     28 5B 01 00 | 	long	@_do_mode
43b34     70 5F 01 00 | 	long	@_do_mouse
43b38     50 32 01 00 | 	long	@_do_gettime
43b3c     FC FE 00 00 | 	long	@_do_cursor
43b40     64 F6 00 00 | 	long	@_do_click
43b44     2C 60 01 00 | 	long	@_do_mousex
43b48     70 60 01 00 | 	long	@_do_mousey
43b4c     A4 5F 01 00 | 	long	@_do_mousek
43b50     E8 5F 01 00 | 	long	@_do_mousew
43b54     1C C0 01 00 | 	long	@_do_sin
43b58     54 C3 01 00 | 	long	@_do_stick
43b5c     E4 C4 01 00 | 	long	@_do_strig
43b60     74 C1 01 00 | 	long	@_do_sprite
43b64     18 13 01 00 | 	long	@_do_defsprite
43b68     FC 30 01 00 | 	long	@_do_getpixel
43b6c     90 CA 01 00 | 	long	@_do_waitclock
43b70     C4 FE 01 00 | 	long	@_do_negative
43b74     A8 9A 01 00 | 	long	@_do_rdpin
43b78     D4 AF 01 00 | 	long	@_do_rqpin
43b7c     D0 7D 01 00 | 	long	@_do_pinread
43b80     F4 CB 01 00 | 	long	@_do_wrpin
43b84     74 CC 01 00 | 	long	@_do_wxpin
43b88     F4 CC 01 00 | 	long	@_do_wypin
43b8c     10 7D 01 00 | 	long	@_do_pinfloat
43b90     90 7D 01 00 | 	long	@_do_pinlo
43b94     50 7D 01 00 | 	long	@_do_pinhi
43b98     54 7E 01 00 | 	long	@_do_pinstart
43b9c     64 7F 01 00 | 	long	@_do_pintoggle
43ba0     48 8E 01 00 | 	long	@_do_position
43ba4     D8 FD 00 00 | 	long	@_do_cos
43ba8     74 C6 01 00 | 	long	@_do_tan
43bac     4C DE 00 00 | 	long	@_do_atn
43bb0     3C DD 00 00 | 	long	@_do_asin
43bb4     CC DA 00 00 | 	long	@_do_acos
43bb8     60 C2 01 00 | 	long	@_do_sqr
43bbc     78 22 01 00 | 	long	@_do_fill
43bc0     2C 0A 01 00 | 	long	@_do_defsnd
43bc4     30 FF 00 00 | 	long	@_do_defenv
43bc8     80 9A 01 00 | 	long	@_do_rad
43bcc     8C 16 01 00 | 	long	@_do_deg
43bd0     04 3E 01 00 | 	long	@_do_int
43bd4     2C 80 01 00 | 	long	@_do_play
43bd8     74 BA 01 00 | 	long	@_do_setdelay
43bdc     1C BB 01 00 | 	long	@_do_setenv
43be0     C4 BB 01 00 | 	long	@_do_setlen
43be4     6C BC 01 00 | 	long	@_do_setpan
43be8     BC BD 01 00 | 	long	@_do_setvol
43bec     64 BE 01 00 | 	long	@_do_setwave
43bf0     14 BD 01 00 | 	long	@_do_setsustain
43bf4     A0 AA 01 00 | 	long	@_do_release
43bf8     E8 2E 01 00 | 	long	@_do_getenvsustain
43bfc     38 8D 01 00 | 	long	@_do_poke
43c00     88 1E 01 00 | 	long	@_do_dpoke
43c04     3C 57 01 00 | 	long	@_do_lpoke
43c08     60 7C 01 00 | 	long	@_do_peek
43c0c     DC 1D 01 00 | 	long	@_do_dpeek
43c10     90 56 01 00 | 	long	@_do_lpeek
43c14     D4 27 01 00 | 	long	@_do_fre
43c18     F8 2F 01 00 | 	long	@_do_getnotevalue
43c1c     34 D9 01 00 | 	long	@_do_getaddr
43c20     AC 3A 01 00 | 	long	@_do_inkey
43c24     4C DA 00 00 | 	long	@_do_abs
43c28     64 38 01 00 | 	long	@_do_hex
43c2c     7C E2 00 00 | 	long	@_do_bin
43c30     84 C7 01 00 | 	long	@_do_val
43c34     EC F3 00 00 | 	long	@_do_chr
43c38     DC DB 00 00 | 	long	@_do_asc
43c3c     C8 4A 01 00 | 	long	@_do_left
43c40     24 AC 01 00 | 	long	@_do_right
43c44     9C 58 01 00 | 	long	@_do_mid
43c48     54 4C 01 00 | 	long	@_do_len
43c4c     B8 32 01 00 | 	long	@_do_gosub
43c50     78 AB 01 00 | 	long	@_do_return
43c54     78 20 01 00 | 	long	@_do_end
43c58     10 8E 01 00 | 	long	@_do_pop
43c5c     14 55 01 00 | 	long	@_do_log
43c60     E0 F1 00 00 | 	long	@_do_changevol
43c64     C0 F2 00 00 | 	long	@_do_changewav
43c68     D0 F0 00 00 | 	long	@_do_changepan
43c6c     B4 ED 00 00 | 	long	@_do_changefreq
43c70     0C BF 01 00 | 	long	@_do_shutup
43c74     80 AF 01 00 | 	long	@_do_round
43c78     AC 20 01 00 | 	long	@_do_enter
43c7c     30 68 01 00 | 	long	@_do_open
43c80     90 F6 00 00 | 	long	@_do_close
43c84     38 28 01 00 | 	long	@_do_get
43c88     40 95 01 00 | 	long	@_do_put
43c8c     00 E8 00 00 | 	long	@_do_cd
43c90     B4 16 01 00 | 	long	@_do_delete
43c94     68 5A 01 00 | 	long	@_do_mkdir
43c98     78 E0 00 00 | 	long	@_do_blit
43c9c     A0 27 01 00 | 	long	@_do_framebuf
43ca0     0C 67 01 00 | 	long	@_do_on
43ca4     2C C1 01 00 | 	long	@_do_skip
43ca8     C0 3E 01 00 | 	long	@_do_input
43cac     0C 9D 01 00 | 	long	@_do_read
43cb0     38 AB 01 00 | 	long	@_do_restore
43cb4     58 74 01 00 | 	long	@_do_padx
43cb8     D8 76 01 00 | 	long	@_do_pady
43cbc     58 79 01 00 | 	long	@_do_padz
43cc0     D8 6C 01 00 | 	long	@_do_padrx
43cc4     58 6F 01 00 | 	long	@_do_padry
43cc8     D8 71 01 00 | 	long	@_do_padrz
43ccc     48 6B 01 00 | 	long	@_do_padh
43cd0     00 FA 00 00 | 	long	@_do_copy
43cd4     4C F7 00 00 | 	long	@_do_coginit
43cd8     88 F9 00 00 | 	long	@_do_cogstop
43cdc     14 58 01 00 | 	long	@_do_memlo
43ce0     58 58 01 00 | 	long	@_do_memtop
43ce4     08 B8 01 00 | 	long	@_do_setcolor
43ce8     DC 2D 01 00 | 	long	@_do_getcolor
43cec     70 AB 01 00 | 	long	@_do_restorepalette
43cf0     4C 54 02 00 | 	long	@_hg010b_spin2_putchar
43cf4     A0 6A 03 00 | 	long	@__struct___bas_wrap_sender_tx
43cf8     E4 6A 03 00 | 	long	@__struct___bas_wrap_sender_rx
43cfc     2C 6B 03 00 | 	long	@__struct___bas_wrap_sender_close
43d00     D0 69 03 00 | 	long	@__struct__s_vfs_file_t_putchar
43d04     40 6A 03 00 | 	long	@__struct__s_vfs_file_t_getchar
43d08     88 69 03 00 | 	long	@___strs_cl_pfunc
43d0c     20 C7 02 00 | 	long	@__system____root_opendir
43d10     BC C7 02 00 | 	long	@__system____root_closedir
43d14     38 C7 02 00 | 	long	@__system____root_readdir
43d18     C4 C7 02 00 | 	long	@__system____root_stat
43d1c     10 C0 02 00 | 	long	@__system____default_putc
43d20     94 BF 02 00 | 	long	@__system____default_getc
43d24     B8 C0 02 00 | 	long	@__system____default_flush
43d28     90 54 03 00 | 	long	@_fatfs_cc_v_close
43d2c     AC 58 03 00 | 	long	@_fatfs_cc_v_read
43d30     C0 59 03 00 | 	long	@_fatfs_cc_v_write
43d34     A0 5A 03 00 | 	long	@_fatfs_cc_v_lseek
43d38     28 5B 03 00 | 	long	@_fatfs_cc_v_ioctl
43d3c     7C 5B 03 00 | 	long	@_fatfs_cc_v_open
43d40     F4 53 03 00 | 	long	@_fatfs_cc_v_creat
43d44     D4 54 03 00 | 	long	@_fatfs_cc_v_opendir
43d48     48 55 03 00 | 	long	@_fatfs_cc_v_closedir
43d4c     88 55 03 00 | 	long	@_fatfs_cc_v_readdir
43d50     BC 56 03 00 | 	long	@_fatfs_cc_v_stat
43d54     3C 5B 03 00 | 	long	@_fatfs_cc_v_mkdir
43d58     5C 5B 03 00 | 	long	@_fatfs_cc_v_rmdir
43d5c     4C 5B 03 00 | 	long	@_fatfs_cc_v_remove
43d60     6C 5B 03 00 | 	long	@_fatfs_cc_v_rename
43d64     8C 5C 03 00 | 	long	@_fatfs_cc_v_init
43d68     94 5C 03 00 | 	long	@_fatfs_cc_v_deinit
43d6c     64 71 02 00 | 	long	@__system___tx
43d70     A4 71 02 00 | 	long	@__system___rx
43d74     30 D3 02 00 | 	long	@__system___rxtxioctl_0778
43d78     88 D3 02 00 | 	long	@__system____dummy_flush_0779
43d7c     5C 5C 03 00 | 	long	@_fatfs_cc_v_flush
43d80                 | __heap_base
43d80     00 00 00 00 
      ...             
5b480     00 00 00 00 
5b484     00 00 00 00 | 	long	0[24002]
5b488                 | objmem
5b488     00 00 00 00 
      ...             
659a0     00 00 00 00 
659a4     00 00 00 00 | 	long	0[10568]
659a8                 | stackspace
659a8     00 00 00 00 | 	long	0[1]
659ac 100             | 	org	COG_BSS_START
659ac 100             | _var01
659ac 100             | 	res	1
659ac 101             | _var02
659ac 101             | 	res	1
659ac 102             | _var03
659ac 102             | 	res	1
659ac 103             | _var04
659ac 103             | 	res	1
659ac 104             | _var05
659ac 104             | 	res	1
659ac 105             | _var06
659ac 105             | 	res	1
659ac 106             | _var07
659ac 106             | 	res	1
659ac 107             | _var08
659ac 107             | 	res	1
659ac 108             | _var09
659ac 108             | 	res	1
659ac 109             | arg01
659ac 109             | 	res	1
659ac 10a             | arg02
659ac 10a             | 	res	1
659ac 10b             | arg03
659ac 10b             | 	res	1
659ac 10c             | arg04
659ac 10c             | 	res	1
659ac 10d             | arg05
659ac 10d             | 	res	1
659ac 10e             | arg06
659ac 10e             | 	res	1
659ac 10f             | arg07
659ac 10f             | 	res	1
659ac 110             | arg08
659ac 110             | 	res	1
659ac 111             | arg09
659ac 111             | 	res	1
659ac 112             | arg10
659ac 112             | 	res	1
659ac 113             | local01
659ac 113             | 	res	1
659ac 114             | local02
659ac 114             | 	res	1
659ac 115             | local03
659ac 115             | 	res	1
659ac 116             | local04
659ac 116             | 	res	1
659ac 117             | local05
659ac 117             | 	res	1
659ac 118             | local06
659ac 118             | 	res	1
659ac 119             | local07
659ac 119             | 	res	1
659ac 11a             | local08
659ac 11a             | 	res	1
659ac 11b             | local09
659ac 11b             | 	res	1
659ac 11c             | local10
659ac 11c             | 	res	1
659ac 11d             | local11
659ac 11d             | 	res	1
659ac 11e             | local12
659ac 11e             | 	res	1
659ac 11f             | local13
659ac 11f             | 	res	1
659ac 120             | local14
659ac 120             | 	res	1
659ac 121             | local15
659ac 121             | 	res	1
659ac 122             | local16
659ac 122             | 	res	1
659ac 123             | local17
659ac 123             | 	res	1
659ac 124             | local18
659ac 124             | 	res	1
659ac 125             | local19
659ac 125             | 	res	1
659ac 126             | local20
659ac 126             | 	res	1
659ac 127             | local21
659ac 127             | 	res	1
659ac 128             | local22
659ac 128             | 	res	1
659ac 129             | local23
659ac 129             | 	res	1
659ac 12a             | local24
659ac 12a             | 	res	1
659ac 12b             | local25
659ac 12b             | 	res	1
659ac 12c             | local26
659ac 12c             | 	res	1
659ac 12d             | local27
659ac 12d             | 	res	1
659ac 12e             | local28
659ac 12e             | 	res	1
659ac 12f             | local29
659ac 12f             | 	res	1
659ac 130             | local30
659ac 130             | 	res	1
659ac 131             | local31
659ac 131             | 	res	1
659ac 132             | local32
659ac 132             | 	res	1
659ac 133             | local33
659ac 133             | 	res	1
659ac 134             | local34
659ac 134             | 	res	1
659ac 135             | local35
659ac 135             | 	res	1
659ac 136             | local36
659ac 136             | 	res	1
659ac 137             | local37
659ac 137             | 	res	1
659ac 138             | local38
659ac 138             | 	res	1
659ac 139             | local39
659ac 139             | 	res	1
659ac 13a             | local40
659ac 13a             | 	res	1
659ac 13b             | local41
659ac 13b             | 	res	1
659ac 13c             | local42
659ac 13c             | 	res	1
659ac 13d             | local43
659ac 13d             | 	res	1
659ac 13e             | local44
659ac 13e             | 	res	1
659ac 13f             | local45
659ac 13f             | 	res	1
659ac 140             | local46
659ac 140             | 	res	1
659ac 141             | local47
659ac 141             | 	res	1
659ac 142             | local48
659ac 142             | 	res	1
659ac 143             | local49
659ac 143             | 	res	1
659ac 144             | local50
659ac 144             | 	res	1
659ac 145             | local51
659ac 145             | 	res	1
659ac 146             | local52
659ac 146             | 	res	1
659ac 147             | local53
659ac 147             | 	res	1
659ac 148             | muldiva_
659ac 148             | 	res	1
659ac 149             | muldivb_
659ac 149             | 	res	1
659ac 14a             | 	fit	480
659ac 14a             | 
