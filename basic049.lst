00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 2C 33 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec A8 1D 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 94 1A 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 B0 94 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 74 0D 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 CC 08 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 D0 75 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 B4 14 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 44 A7 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 F4 CE 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa AC CC 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 84 DE 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc D0 39 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     E0 43 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     74 58 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     B4 5B B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     08 63 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     00 5D B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     C4 5A B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     B4 28 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     AC 26 B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     4C 26 B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     DC 25 B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     28 3E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     44 41 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     F0 57 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     44 5F B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     40 59 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B2 01 00 FF 
00ccc     9A 50 06 F6 | 	mov	local22, ##@LR__5397
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     70 24 B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     24 7E B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     30 5C B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     94 45 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     C4 47 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     7C 56 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     D0 5D B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     CC 57 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     0C 23 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     04 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     F8 3C B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     88 3C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     54 3C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     74 3C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     64 3C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     B0 21 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     5C 21 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     2C 21 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     C4 20 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     10 39 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     EC 39 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     AC 1F B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     58 1F B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     28 1F B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     C0 1E B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     0C 37 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B2 01 00 FF 
01328     9B 50 06 F6 | 	mov	local22, ##@LR__5398
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     34 38 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     D4 37 B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     28 37 B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     CC 36 B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     18 25 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     08 25 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     84 56 B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     5C 56 B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     34 56 B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     44 4B B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     94 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     84 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     74 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     B4 4B B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     54 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     44 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     34 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     08 4A B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     35 4A 05 F6 | 	mov	COUNT_, #53
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     B8 75 B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     F0 74 B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     B2 01 00 FF 
018e0     9C 16 06 F6 | 	mov	arg03, ##@LR__5399
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     E0 74 B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     18 74 B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     B2 01 00 FF 
01940     9D 2C 06 F6 | 	mov	local04, ##@LR__5400
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     DC 29 90 AD |  if_e	jmp	#LR__0209
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     98 70 B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     B2 01 00 FF 
01a00     9E 14 06 F6 | 	mov	arg02, ##@LR__5401
01a04     18 4F B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     58 70 B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     B2 01 00 FF 
01a40     A0 14 06 F6 | 	mov	arg02, ##@LR__5402
01a44     D8 4E B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     E8 6F B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     B2 01 00 FF 
01ab0     A2 38 06 F6 | 	mov	local10, ##@LR__5403
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     64 4E B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     84 6E B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     84 72 B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     BC 71 B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     C0 6D B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     48 72 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     80 71 B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     B2 01 00 FF 
01be4     A4 2C 06 F6 | 	mov	local04, ##@LR__5404
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     B2 01 00 FF 
01c34     A5 30 06 F6 | 	mov	local06, ##@LR__5405
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     E0 4C B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     B2 01 00 FF 
01c94     A6 14 06 F6 | 	mov	arg02, ##@LR__5406
01c98     84 4C B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     B2 01 00 FF 
01cec     A7 14 06 F6 | 	mov	arg02, ##@LR__5407
01cf0     2C 4C B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     B2 01 00 FF 
01d44     A8 14 06 F6 | 	mov	arg02, ##@LR__5408
01d48     D4 4B B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     F4 6C B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     30 2E B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     F4 6B B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     B2 01 00 FF 
01ea4     A9 14 06 F6 | 	mov	arg02, ##@LR__5409
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     70 4A B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     70 6B B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     B2 01 00 FF 
01f28     AA 14 06 F6 | 	mov	arg02, ##@LR__5410
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     EC 49 B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     C8 4E B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     B2 01 00 FF 
0203c     AB 2C 06 F6 | 	mov	local04, ##@LR__5411
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     B2 01 00 FF 
02070     AD 14 06 F6 | 	mov	arg02, ##@LR__5412
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     A0 48 B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     74 48 B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     B2 01 00 FF 
02178     AF 14 06 F6 | 	mov	arg02, ##@LR__5413
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     9C 47 B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     B2 01 00 FF 
02194     B1 14 06 F6 | 	mov	arg02, ##@LR__5414
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     80 47 B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     1C 68 B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     B2 01 00 FF 
021ec     B3 14 06 F6 | 	mov	arg02, ##@LR__5415
021f0     2C 47 B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     4C 67 B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     B2 01 00 FF 
02234     B5 14 06 F6 | 	mov	arg02, ##@LR__5416
02238     E4 46 B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     34 67 B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     78 46 B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     B2 01 00 FF 
023b8     B7 14 06 F6 | 	mov	arg02, ##@LR__5417
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     54 45 B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     B2 01 00 FF 
023d8     B9 14 06 F6 | 	mov	arg02, ##@LR__5418
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     3C 45 B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     B2 01 00 FF 
023f0     BB 30 06 F6 | 	mov	local06, ##@LR__5419
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     20 45 B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     B2 01 00 FF 
0240c     BD 3C 06 F6 | 	mov	local12, ##@LR__5420
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     04 45 B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     B2 01 00 FF 
02428     BF 3A 06 F6 | 	mov	local11, ##@LR__5421
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     E4 44 B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     B2 01 00 FF 
02448     C1 3A 06 F6 | 	mov	local11, ##@LR__5422
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     C8 44 B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     B2 01 00 FF 
02464     C3 40 06 F6 | 	mov	local14, ##@LR__5423
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     AC 44 B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     B2 01 00 FF 
02480     C5 5C 06 F6 | 	mov	local28, ##@LR__5424
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     8C 44 B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     B2 01 00 FF 
024a0     C7 5C 06 F6 | 	mov	local28, ##@LR__5425
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     70 44 B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     B2 01 00 FF 
024bc     C9 52 06 F6 | 	mov	local23, ##@LR__5426
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     50 44 B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     B2 01 00 FF 
024dc     CB 52 06 F6 | 	mov	local23, ##@LR__5427
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     34 44 B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     B2 01 00 FF 
024f8     CD 5E 06 F6 | 	mov	local29, ##@LR__5428
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     14 44 B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     B2 01 00 FF 
02518     CF 60 06 F6 | 	mov	local30, ##@LR__5429
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     F4 43 B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     B2 01 00 FF 
02538     D1 62 06 F6 | 	mov	local31, ##@LR__5430
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     D4 43 B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     D4 43 B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     88 67 B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     C0 66 B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     94 61 B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     B2 01 00 FF 
027ec     D3 14 06 F6 | 	mov	arg02, ##@LR__5431
027f0     2C 41 B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     D8 61 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     B2 01 00 FF 
02830     D5 14 06 F6 | 	mov	arg02, ##@LR__5432
02834     E8 40 B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     0C 64 B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     94 45 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     B2 01 00 FF 
0290c     D7 14 06 F6 | 	mov	arg02, ##@LR__5433
02910     0C 40 B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     B2 01 00 FF 
0293c     DC 14 06 F6 | 	mov	arg02, ##@LR__5434
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     D4 3F B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	 							' then found
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     E4 5F B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     B2 01 00 FF 
0299c     E1 14 06 F6 | 	mov	arg02, ##@LR__5435
029a0     7C 3F B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     24 5F B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     B2 01 00 FF 
02af8     E3 30 06 F6 | 	mov	local06, ##@LR__5436
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     B2 01 00 FF 
02b2c     E5 16 06 F6 | 	mov	arg03, ##@LR__5437
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     80 63 B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     94 5D B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     C8 5C B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     B2 01 00 FF 
02cd0     E7 14 06 F6 | 	mov	arg02, ##@LR__5438
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     3C 3C B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     B2 01 00 FF 
02cf0     ED 14 06 F6 | 	mov	arg02, ##@LR__5439
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     24 3C B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     B2 01 00 FF 
02d08     F4 14 06 F6 | 	mov	arg02, ##@LR__5440
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     0C 3C B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     B2 01 00 FF 
02d3c     FA 14 06 F6 | 	mov	arg02, ##@LR__5441
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     D4 3B B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     B2 01 00 FF 
02d70     FD 30 06 F6 | 	mov	local06, ##@LR__5442
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     B2 01 00 FF 
02dac     FF 14 06 F6 | 	mov	arg02, ##@LR__5443
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     64 3B B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     B2 01 00 FF 
02de0     03 31 06 F6 | 	mov	local06, ##@LR__5444
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     B2 01 00 FF 
02e00     05 15 06 F6 | 	mov	arg02, ##@LR__5445
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     14 3B B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     B2 01 00 FF 
02e18     0A 15 06 F6 | 	mov	arg02, ##@LR__5446
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     FC 3A B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     F4 01 90 5D |  if_ne	jmp	#LR__0171
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     B2 01 00 FF 
02e4c     0D 15 06 F6 | 	mov	arg02, ##@LR__5447
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     C4 3A B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     B2 01 00 FF 
02e80     13 31 06 F6 | 	mov	local06, ##@LR__5448
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B2 01 00 FF 
02eb0     15 15 06 F6 | 	mov	arg02, ##@LR__5449
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     60 3A B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B2 01 00 FF 
02ee4     1E 31 06 F6 | 	mov	local06, ##@LR__5450
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B2 01 00 FF 
02f14     20 15 06 F6 | 	mov	arg02, ##@LR__5451
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     FC 39 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B2 01 00 FF 
02f48     29 31 06 F6 | 	mov	local06, ##@LR__5452
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B2 01 00 FF 
02f78     2B 15 06 F6 | 	mov	arg02, ##@LR__5453
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     98 39 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B2 01 00 FF 
02fac     34 31 06 F6 | 	mov	local06, ##@LR__5454
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B2 01 00 FF 
02fdc     36 15 06 F6 | 	mov	arg02, ##@LR__5455
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     34 39 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B2 01 00 FF 
03010     39 31 06 F6 | 	mov	local06, ##@LR__5456
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | LR__0171
03020                 | ' 
03020                 | ' ' find part types 
03020                 | ' 
03020                 | ' for i=0 to k-1
03020     00 28 06 F6 | 	mov	local02, #0
03024     23 79 02 F6 | 	mov	local42, local17
03028                 | LR__0172
03028     3C 29 52 F2 | 	cmps	local02, local42 wc
0302c     A4 07 90 3D |  if_ae	jmp	#LR__0184
03030     14 39 02 F6 | 	mov	local10, local02
03034     03 38 66 F0 | 	shl	local10, #3
03038     35 00 00 FF 
0303c     0C E4 05 F1 | 	add	objptr, ##27148
03040     F2 38 02 F1 | 	add	local10, objptr
03044     14 3B 02 F6 | 	mov	local11, local02
03048     1D 41 02 F6 | 	mov	local14, local11
0304c     20 3F 02 F6 | 	mov	local13, local14
03050     03 3E 66 F0 | 	shl	local13, #3
03054     F2 3E 02 F1 | 	add	local13, objptr
03058     1F 13 02 FB | 	rdlong	arg01, local13
0305c     35 00 00 FF 
03060     0C E4 85 F1 | 	sub	objptr, ##27148
03064     70 1B B0 FD | 	call	#_isseparator
03068     FD FA E1 F8 | 	getbyte	result1, result1, #0
0306c     04 38 06 F1 | 	add	local10, #4
03070     1C FB 61 FC | 	wrlong	result1, local10
03074                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     0C E4 05 F1 | 	add	objptr, ##27148
03084     F2 38 02 F1 | 	add	local10, objptr
03088     04 38 06 F1 | 	add	local10, #4
0308c     1C 3D 02 FB | 	rdlong	local12, local10
03090     01 3C 56 F2 | 	cmps	local12, #1 wc
03094     35 00 00 FF 
03098     0C E4 85 F1 | 	sub	objptr, ##27148
0309c     2C 07 90 3D |  if_ae	jmp	#LR__0183
030a0     14 39 02 F6 | 	mov	local10, local02
030a4     03 38 66 F0 | 	shl	local10, #3
030a8     35 00 00 FF 
030ac     0C E4 05 F1 | 	add	objptr, ##27148
030b0     F2 38 02 F1 | 	add	local10, objptr
030b4     14 3B 02 F6 | 	mov	local11, local02
030b8     1D 41 02 F6 | 	mov	local14, local11
030bc     20 3F 02 F6 | 	mov	local13, local14
030c0     03 3E 66 F0 | 	shl	local13, #3
030c4     F2 3E 02 F1 | 	add	local13, objptr
030c8     1F 13 02 FB | 	rdlong	arg01, local13
030cc     35 00 00 FF 
030d0     0C E4 85 F1 | 	sub	objptr, ##27148
030d4     4C 13 B0 FD | 	call	#_isoperator
030d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030dc     04 38 06 F1 | 	add	local10, #4
030e0     1C FB 61 FC | 	wrlong	result1, local10
030e4                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030e4     14 39 02 F6 | 	mov	local10, local02
030e8     03 38 66 F0 | 	shl	local10, #3
030ec     35 00 00 FF 
030f0     0C E4 05 F1 | 	add	objptr, ##27148
030f4     F2 38 02 F1 | 	add	local10, objptr
030f8     04 38 06 F1 | 	add	local10, #4
030fc     1C 3D 02 FB | 	rdlong	local12, local10
03100     01 3C 56 F2 | 	cmps	local12, #1 wc
03104     35 00 00 FF 
03108     0C E4 85 F1 | 	sub	objptr, ##27148
0310c     BC 06 90 3D |  if_ae	jmp	#LR__0183
03110     14 39 02 F6 | 	mov	local10, local02
03114     03 38 66 F0 | 	shl	local10, #3
03118     35 00 00 FF 
0311c     0C E4 05 F1 | 	add	objptr, ##27148
03120     F2 38 02 F1 | 	add	local10, objptr
03124     14 3B 02 F6 | 	mov	local11, local02
03128     1D 41 02 F6 | 	mov	local14, local11
0312c     20 3F 02 F6 | 	mov	local13, local14
03130     03 3E 66 F0 | 	shl	local13, #3
03134     F2 3E 02 F1 | 	add	local13, objptr
03138     1F 13 02 FB | 	rdlong	arg01, local13
0313c     35 00 00 FF 
03140     0C E4 85 F1 | 	sub	objptr, ##27148
03144                 | ' 
03144                 | ' select case s
03144     B3 01 00 FF 
03148     3E 14 06 F6 | 	mov	arg02, ##@LR__5547
0314c     D0 37 B2 FD | 	call	#__system___string_cmp
03150     00 FA 0D F2 | 	cmp	result1, #0 wz
03154     1B FA 05 A6 |  if_e	mov	result1, #27
03158     00 FA 05 56 |  if_ne	mov	result1, #0
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     38 06 90 3D |  if_ae	jmp	#LR__0183
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     20 3F 02 F6 | 	mov	local13, local14
031b4     03 3E 66 F0 | 	shl	local13, #3
031b8     F2 3E 02 F1 | 	add	local13, objptr
031bc     1F 13 02 FB | 	rdlong	arg01, local13
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     0C 1C B0 FD | 	call	#_iscommand
031cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
031d0     04 38 06 F1 | 	add	local10, #4
031d4     1C FB 61 FC | 	wrlong	result1, local10
031d8                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     0C E4 05 F1 | 	add	objptr, ##27148
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     04 38 06 F1 | 	add	local10, #4
031f0     1C 3D 02 FB | 	rdlong	local12, local10
031f4     01 3C 56 F2 | 	cmps	local12, #1 wc
031f8     35 00 00 FF 
031fc     0C E4 85 F1 | 	sub	objptr, ##27148
03200     C8 05 90 3D |  if_ae	jmp	#LR__0183
03204     14 39 02 F6 | 	mov	local10, local02
03208     03 38 66 F0 | 	shl	local10, #3
0320c     35 00 00 FF 
03210     0C E4 05 F1 | 	add	objptr, ##27148
03214     F2 38 02 F1 | 	add	local10, objptr
03218     14 3B 02 F6 | 	mov	local11, local02
0321c     1D 41 02 F6 | 	mov	local14, local11
03220     20 3F 02 F6 | 	mov	local13, local14
03224     03 3E 66 F0 | 	shl	local13, #3
03228     F2 5C 02 F6 | 	mov	local28, objptr
0322c     F2 3E 02 F1 | 	add	local13, objptr
03230     1F 13 02 FB | 	rdlong	arg01, local13
03234     35 00 00 FF 
03238     0C E4 85 F1 | 	sub	objptr, ##27148
0323c     58 2C B0 FD | 	call	#_isfunction
03240     FD FA E1 F8 | 	getbyte	result1, result1, #0
03244     04 38 06 F1 | 	add	local10, #4
03248     1C FB 61 FC | 	wrlong	result1, local10
0324c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0324c     14 39 02 F6 | 	mov	local10, local02
03250     03 38 66 F0 | 	shl	local10, #3
03254     35 00 00 FF 
03258     0C E4 05 F1 | 	add	objptr, ##27148
0325c     F2 38 02 F1 | 	add	local10, objptr
03260     04 38 06 F1 | 	add	local10, #4
03264     1C 3D 02 FB | 	rdlong	local12, local10
03268     01 3C 56 F2 | 	cmps	local12, #1 wc
0326c     35 00 00 FF 
03270     0C E4 85 F1 | 	sub	objptr, ##27148
03274     54 05 90 3D |  if_ae	jmp	#LR__0183
03278     14 39 02 F6 | 	mov	local10, local02
0327c     03 38 66 F0 | 	shl	local10, #3
03280     35 00 00 FF 
03284     0C E4 05 F1 | 	add	objptr, ##27148
03288     F2 38 02 F1 | 	add	local10, objptr
0328c     14 3B 02 F6 | 	mov	local11, local02
03290     1D 41 02 F6 | 	mov	local14, local11
03294     03 40 66 F0 | 	shl	local14, #3
03298     F2 3E 02 F6 | 	mov	local13, objptr
0329c     F2 40 02 F1 | 	add	local14, objptr
032a0     20 13 02 FB | 	rdlong	arg01, local14
032a4     35 00 00 FF 
032a8     0C E4 85 F1 | 	sub	objptr, ##27148
032ac     BC 15 B0 FD | 	call	#_isnotename
032b0     04 38 06 F1 | 	add	local10, #4
032b4     1C FB 61 FC | 	wrlong	result1, local10
032b8                 | ' lparts(i).token=isnotename(lparts(i).part$) 
032b8                 | ' if lparts(i).token>0 then 
032b8     14 39 02 F6 | 	mov	local10, local02
032bc     03 38 66 F0 | 	shl	local10, #3
032c0     35 00 00 FF 
032c4     0C E4 05 F1 | 	add	objptr, ##27148
032c8     F2 38 02 F1 | 	add	local10, objptr
032cc     04 38 06 F1 | 	add	local10, #4
032d0     1C 31 02 FB | 	rdlong	local06, local10
032d4     01 30 56 F2 | 	cmps	local06, #1 wc
032d8     35 00 00 FF 
032dc     0C E4 85 F1 | 	sub	objptr, ##27148
032e0     8C 00 90 CD |  if_b	jmp	#LR__0173
032e4     14 2F 02 F6 | 	mov	local05, local02
032e8     03 2E 66 F0 | 	shl	local05, #3
032ec     35 00 00 FF 
032f0     0C E4 05 F1 | 	add	objptr, ##27148
032f4     F2 2E 02 F1 | 	add	local05, objptr
032f8     04 2E 06 F1 | 	add	local05, #4
032fc     17 3D 02 FB | 	rdlong	local12, local05
03300     1E 13 02 F6 | 	mov	arg01, local12
03304     35 00 00 FF 
03308     0C E4 85 F1 | 	sub	objptr, ##27148
0330c     90 3C B0 FD | 	call	#_getnoteval
03310     FD 7A 02 F6 | 	mov	local43, result1
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     0C E4 05 F1 | 	add	objptr, ##27148
03324     F2 38 02 F1 | 	add	local10, objptr
03328     3D 13 02 F6 | 	mov	arg01, local43
0332c     35 00 00 FF 
03330     0C E4 85 F1 | 	sub	objptr, ##27148
03334     38 58 B2 FD | 	call	#__system__str_S
03338     1C FB 61 FC | 	wrlong	result1, local10
0333c     14 2D 02 F6 | 	mov	local04, local02
03340     16 2B 02 F6 | 	mov	local03, local04
03344     15 39 02 F6 | 	mov	local10, local03
03348     03 38 66 F0 | 	shl	local10, #3
0334c     35 00 00 FF 
03350     0C E4 05 F1 | 	add	objptr, ##27148
03354     F2 38 02 F1 | 	add	local10, objptr
03358     04 38 06 F1 | 	add	local10, #4
0335c     01 00 80 FF 
03360     1C 05 68 FC | 	wrlong	##514, local10
03364     35 00 00 FF 
03368     0C E4 85 F1 | 	sub	objptr, ##27148
0336c     5C 04 90 FD | 	jmp	#LR__0183
03370                 | LR__0173
03370     14 39 02 F6 | 	mov	local10, local02
03374     03 38 66 F0 | 	shl	local10, #3
03378     35 00 00 FF 
0337c     0C E4 05 F1 | 	add	objptr, ##27148
03380     F2 38 02 F1 | 	add	local10, objptr
03384     14 41 02 F6 | 	mov	local14, local02
03388     03 40 66 F0 | 	shl	local14, #3
0338c     F2 40 02 F1 | 	add	local14, objptr
03390     20 13 02 FB | 	rdlong	arg01, local14
03394     35 00 00 FF 
03398     0C E4 85 F1 | 	sub	objptr, ##27148
0339c     64 13 B0 FD | 	call	#_ischannel
033a0     04 38 06 F1 | 	add	local10, #4
033a4     1C FB 61 FC | 	wrlong	result1, local10
033a8                 | ' 
033a8                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
033a8                 | ' 
033a8                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
033a8     14 39 02 F6 | 	mov	local10, local02
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     1C 31 02 FB | 	rdlong	local06, local10
033c4     01 30 56 F2 | 	cmps	local06, #1 wc
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     74 00 90 CD |  if_b	jmp	#LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 3B 02 F6 | 	mov	local11, local02
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     20 13 02 FB | 	rdlong	arg01, local14
03400     01 3C 06 F6 | 	mov	local12, #1
03404     01 14 06 F6 | 	mov	arg02, #1
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     EC 55 B2 FD | 	call	#__system__Right_S
03414     1C FB 61 FC | 	wrlong	result1, local10
03418     14 2D 02 F6 | 	mov	local04, local02
0341c     16 2B 02 F6 | 	mov	local03, local04
03420     15 39 02 F6 | 	mov	local10, local03
03424     03 38 66 F0 | 	shl	local10, #3
03428     35 00 00 FF 
0342c     0C E4 05 F1 | 	add	objptr, ##27148
03430     F2 38 02 F1 | 	add	local10, objptr
03434     04 38 06 F1 | 	add	local10, #4
03438     1C 59 68 FC | 	wrlong	#44, local10
0343c     35 00 00 FF 
03440     0C E4 85 F1 | 	sub	objptr, ##27148
03444     84 03 90 FD | 	jmp	#LR__0183
03448                 | LR__0174
03448     14 39 02 F6 | 	mov	local10, local02
0344c     03 38 66 F0 | 	shl	local10, #3
03450     35 00 00 FF 
03454     0C E4 05 F1 | 	add	objptr, ##27148
03458     F2 38 02 F1 | 	add	local10, objptr
0345c     14 3B 02 F6 | 	mov	local11, local02
03460     1D 41 02 F6 | 	mov	local14, local11
03464     03 40 66 F0 | 	shl	local14, #3
03468     F2 3E 02 F6 | 	mov	local13, objptr
0346c     F2 40 02 F1 | 	add	local14, objptr
03470     20 13 02 FB | 	rdlong	arg01, local14
03474     35 00 00 FF 
03478     0C E4 85 F1 | 	sub	objptr, ##27148
0347c     6C 13 B0 FD | 	call	#_isconstant
03480     04 38 06 F1 | 	add	local10, #4
03484     1C FB 61 FC | 	wrlong	result1, local10
03488                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03488     14 39 02 F6 | 	mov	local10, local02
0348c     03 38 66 F0 | 	shl	local10, #3
03490     35 00 00 FF 
03494     0C E4 05 F1 | 	add	objptr, ##27148
03498     F2 38 02 F1 | 	add	local10, objptr
0349c     04 38 06 F1 | 	add	local10, #4
034a0     1C 3D 02 FB | 	rdlong	local12, local10
034a4     01 3C 56 F2 | 	cmps	local12, #1 wc
034a8     35 00 00 FF 
034ac     0C E4 85 F1 | 	sub	objptr, ##27148
034b0     94 00 90 CD |  if_b	jmp	#LR__0175
034b4     14 39 02 F6 | 	mov	local10, local02
034b8     03 38 66 F0 | 	shl	local10, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 38 02 F1 | 	add	local10, objptr
034c8     14 3D 02 F6 | 	mov	local12, local02
034cc     1E 3B 02 F6 | 	mov	local11, local12
034d0     1D 41 02 F6 | 	mov	local14, local11
034d4     03 40 66 F0 | 	shl	local14, #3
034d8     F2 3E 02 F6 | 	mov	local13, objptr
034dc     F2 40 02 F1 | 	add	local14, objptr
034e0     04 40 06 F1 | 	add	local14, #4
034e4     20 13 02 FB | 	rdlong	arg01, local14
034e8     04 40 86 F1 | 	sub	local14, #4
034ec     35 00 00 FF 
034f0     0C E4 85 F1 | 	sub	objptr, ##27148
034f4     09 13 52 F6 | 	abs	arg01, arg01 wc
034f8     1F 7C C6 C9 |  if_b	decod	local44, #31
034fc     00 7C 06 36 |  if_ae	mov	local44, #0
03500     6C 5E B2 FD | 	call	#__system___float_fromuns
03504     3E FB 61 F5 | 	xor	result1, local44
03508     FD 12 02 F6 | 	mov	arg01, result1
0350c     60 56 B2 FD | 	call	#__system__str_S
03510     1C FB 61 FC | 	wrlong	result1, local10
03514     14 2D 02 F6 | 	mov	local04, local02
03518     16 2B 02 F6 | 	mov	local03, local04
0351c     15 39 02 F6 | 	mov	local10, local03
03520     03 38 66 F0 | 	shl	local10, #3
03524     35 00 00 FF 
03528     0C E4 05 F1 | 	add	objptr, ##27148
0352c     F2 38 02 F1 | 	add	local10, objptr
03530     04 38 06 F1 | 	add	local10, #4
03534     01 00 80 FF 
03538     1C 03 68 FC | 	wrlong	##513, local10
0353c     35 00 00 FF 
03540     0C E4 85 F1 | 	sub	objptr, ##27148
03544     84 02 90 FD | 	jmp	#LR__0183
03548                 | LR__0175
03548     14 2F 02 F6 | 	mov	local05, local02
0354c     03 2E 66 F0 | 	shl	local05, #3
03550     35 00 00 FF 
03554     0C E4 05 F1 | 	add	objptr, ##27148
03558     F2 2E 02 F1 | 	add	local05, objptr
0355c     17 13 02 FB | 	rdlong	arg01, local05
03560     35 00 00 FF 
03564     0C E4 85 F1 | 	sub	objptr, ##27148
03568     80 32 B0 FD | 	call	#_isnum
0356c     FD 7E 02 F6 | 	mov	local45, result1
03570     14 2F 02 F6 | 	mov	local05, local02
03574     03 2E 66 F0 | 	shl	local05, #3
03578     35 00 00 FF 
0357c     0C E4 05 F1 | 	add	objptr, ##27148
03580     F2 2E 02 F1 | 	add	local05, objptr
03584     17 13 02 FB | 	rdlong	arg01, local05
03588     35 00 00 FF 
0358c     0C E4 85 F1 | 	sub	objptr, ##27148
03590     44 36 B0 FD | 	call	#_isint
03594     FD 80 02 F6 | 	mov	local46, result1
03598     14 2F 02 F6 | 	mov	local05, local02
0359c     03 2E 66 F0 | 	shl	local05, #3
035a0     35 00 00 FF 
035a4     0C E4 05 F1 | 	add	objptr, ##27148
035a8     F2 2E 02 F1 | 	add	local05, objptr
035ac     17 13 02 FB | 	rdlong	arg01, local05
035b0     35 00 00 FF 
035b4     0C E4 85 F1 | 	sub	objptr, ##27148
035b8     C0 38 B0 FD | 	call	#_isdec
035bc     FD 82 02 F6 | 	mov	local47, result1
035c0                 | ' 
035c0                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
035c0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
035c0     00 7E 0E F2 | 	cmp	local45, #0 wz
035c4     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
035c8     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
035cc     34 00 90 AD |  if_e	jmp	#LR__0176
035d0     14 2D 02 F6 | 	mov	local04, local02
035d4     16 2B 02 F6 | 	mov	local03, local04
035d8     15 39 02 F6 | 	mov	local10, local03
035dc     03 38 66 F0 | 	shl	local10, #3
035e0     35 00 00 FF 
035e4     0C E4 05 F1 | 	add	objptr, ##27148
035e8     F2 38 02 F1 | 	add	local10, objptr
035ec     04 38 06 F1 | 	add	local10, #4
035f0     01 00 80 FF 
035f4     1C 01 68 FC | 	wrlong	##512, local10
035f8     35 00 00 FF 
035fc     0C E4 85 F1 | 	sub	objptr, ##27148
03600     C8 01 90 FD | 	jmp	#LR__0183
03604                 | LR__0176
03604                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03604     00 7E 0E F2 | 	cmp	local45, #0 wz
03608     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0360c     41 2D 22 56 |  if_ne	not	local04, local47
03610     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03614     34 00 90 AD |  if_e	jmp	#LR__0177
03618     14 2D 02 F6 | 	mov	local04, local02
0361c     16 2B 02 F6 | 	mov	local03, local04
03620     15 39 02 F6 | 	mov	local10, local03
03624     03 38 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 38 02 F1 | 	add	local10, objptr
03634     04 38 06 F1 | 	add	local10, #4
03638     01 00 80 FF 
0363c     1C 03 68 FC | 	wrlong	##513, local10
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     80 01 90 FD | 	jmp	#LR__0183
0364c                 | LR__0177
0364c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
0364c     00 7E 0E F2 | 	cmp	local45, #0 wz
03650     40 2D 22 56 |  if_ne	not	local04, local46
03654     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03658     41 2B 22 56 |  if_ne	not	local03, local47
0365c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03660     34 00 90 AD |  if_e	jmp	#LR__0178
03664     14 2D 02 F6 | 	mov	local04, local02
03668     16 2B 02 F6 | 	mov	local03, local04
0366c     15 39 02 F6 | 	mov	local10, local03
03670     03 38 66 F0 | 	shl	local10, #3
03674     35 00 00 FF 
03678     0C E4 05 F1 | 	add	objptr, ##27148
0367c     F2 38 02 F1 | 	add	local10, objptr
03680     04 38 06 F1 | 	add	local10, #4
03684     01 00 80 FF 
03688     1C 05 68 FC | 	wrlong	##514, local10
0368c     35 00 00 FF 
03690     0C E4 85 F1 | 	sub	objptr, ##27148
03694     34 01 90 FD | 	jmp	#LR__0183
03698                 | LR__0178
03698                 | ' 
03698                 | ' if isstring(lparts(i).part$) then 
03698     14 2F 02 F6 | 	mov	local05, local02
0369c     03 2E 66 F0 | 	shl	local05, #3
036a0     35 00 00 FF 
036a4     0C E4 05 F1 | 	add	objptr, ##27148
036a8     F2 2E 02 F1 | 	add	local05, objptr
036ac     17 13 02 FB | 	rdlong	arg01, local05
036b0     35 00 00 FF 
036b4     0C E4 85 F1 | 	sub	objptr, ##27148
036b8     80 38 B0 FD | 	call	#_isstring
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     A8 00 90 AD |  if_e	jmp	#LR__0181
036c4     14 39 02 F6 | 	mov	local10, local02
036c8     03 38 66 F0 | 	shl	local10, #3
036cc     35 00 00 FF 
036d0     0C E4 05 F1 | 	add	objptr, ##27148
036d4     F2 38 02 F1 | 	add	local10, objptr
036d8     04 38 06 F1 | 	add	local10, #4
036dc     01 00 80 FF 
036e0     1C 07 68 FC | 	wrlong	##515, local10
036e4     14 2D 02 F6 | 	mov	local04, local02
036e8     16 2B 02 F6 | 	mov	local03, local04
036ec     15 39 02 F6 | 	mov	local10, local03
036f0     03 38 66 F0 | 	shl	local10, #3
036f4     F2 38 02 F1 | 	add	local10, objptr
036f8     14 41 02 F6 | 	mov	local14, local02
036fc     03 40 66 F0 | 	shl	local14, #3
03700     F2 40 02 F1 | 	add	local14, objptr
03704     20 31 02 FB | 	rdlong	local06, local14
03708     02 3C 06 F6 | 	mov	local12, #2
0370c     14 51 02 F6 | 	mov	local22, local02
03710     28 53 02 F6 | 	mov	local23, local22
03714     03 52 66 F0 | 	shl	local23, #3
03718     F2 54 02 F6 | 	mov	local24, objptr
0371c     F2 52 02 F1 | 	add	local23, objptr
03720     29 13 02 FB | 	rdlong	arg01, local23
03724     35 00 00 FF 
03728     0C E4 85 F1 | 	sub	objptr, ##27148
0372c     09 33 02 F6 | 	mov	local07, arg01
03730     97 06 48 FB | 	callpa	#(@LR__0180-@LR__0179)>>2,fcache_load_ptr_
03734                 | LR__0179
03734     19 FB C9 FA | 	rdbyte	result1, local07 wz
03738     01 32 06 51 |  if_ne	add	local07, #1
0373c     F4 FF 9F 5D |  if_ne	jmp	#LR__0179
03740                 | LR__0180
03740     09 33 82 F1 | 	sub	local07, arg01
03744     19 3F 02 F6 | 	mov	local13, local07
03748     1F 41 02 F6 | 	mov	local14, local13
0374c     02 40 86 F1 | 	sub	local14, #2
03750     20 3B 02 F6 | 	mov	local11, local14
03754     18 13 02 F6 | 	mov	arg01, local06
03758     1E 15 02 F6 | 	mov	arg02, local12
0375c     1D 17 02 F6 | 	mov	arg03, local11
03760     2C 53 B2 FD | 	call	#__system__Mid_S
03764     1C FB 61 FC | 	wrlong	result1, local10
03768     60 00 90 FD | 	jmp	#LR__0183
0376c                 | LR__0181
0376c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
0376c     14 2B 02 F6 | 	mov	local03, local02
03770     15 2F 02 F6 | 	mov	local05, local03
03774     03 2E 66 F0 | 	shl	local05, #3
03778     35 00 00 FF 
0377c     0C E4 05 F1 | 	add	objptr, ##27148
03780     F2 2E 02 F1 | 	add	local05, objptr
03784     17 13 02 FB | 	rdlong	arg01, local05
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     E4 2D B0 FD | 	call	#_isname
03794     FD 2C 0A F6 | 	mov	local04, result1 wz
03798     30 00 90 AD |  if_e	jmp	#LR__0182
0379c     14 2D 02 F6 | 	mov	local04, local02
037a0     16 2B 02 F6 | 	mov	local03, local04
037a4     15 39 02 F6 | 	mov	local10, local03
037a8     03 38 66 F0 | 	shl	local10, #3
037ac     35 00 00 FF 
037b0     0C E4 05 F1 | 	add	objptr, ##27148
037b4     F2 38 02 F1 | 	add	local10, objptr
037b8     04 38 06 F1 | 	add	local10, #4
037bc     01 00 80 FF 
037c0     1C 09 68 FC | 	wrlong	##516, local10
037c4     35 00 00 FF 
037c8     0C E4 85 F1 | 	sub	objptr, ##27148
037cc                 | LR__0182
037cc                 | LR__0183
037cc     01 28 06 F1 | 	add	local02, #1
037d0     54 F8 9F FD | 	jmp	#LR__0172
037d4                 | LR__0184
037d4     23 39 02 F6 | 	mov	local10, local17
037d8     03 38 66 F0 | 	shl	local10, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 38 02 F1 | 	add	local10, objptr
037e8     04 38 06 F1 | 	add	local10, #4
037ec     1C FD 6B FC | 	wrlong	#510, local10
037f0     23 39 02 F6 | 	mov	local10, local17
037f4     03 38 66 F0 | 	shl	local10, #3
037f8     F2 38 02 F1 | 	add	local10, objptr
037fc     B2 01 00 FF 
03800     3B 31 06 F6 | 	mov	local06, ##@LR__5457
03804     1C 31 62 FC | 	wrlong	local06, local10
03808     10 00 00 FF 
0380c     54 E4 05 F1 | 	add	objptr, ##8276
03810     F2 46 62 FC | 	wrlong	local17, objptr
03814     45 00 00 FF 
03818     60 E4 85 F1 | 	sub	objptr, ##35424
0381c                 | ' 
0381c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0381c                 | ' 
0381c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0381c                 | '  
0381c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
0381c     B2 01 00 FF 
03820     3C 15 06 F6 | 	mov	arg02, ##@LR__5458
03824     3B 13 02 F6 | 	mov	arg01, local41
03828     F4 30 B2 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     F0 00 90 AD |  if_e	jmp	#LR__0185
03834     B2 01 00 FF 
03838     41 15 06 F6 | 	mov	arg02, ##@LR__5459
0383c     3B 13 02 F6 | 	mov	arg01, local41
03840     DC 30 B2 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     D8 00 90 AD |  if_e	jmp	#LR__0185
0384c     B2 01 00 FF 
03850     46 31 06 F6 | 	mov	local06, ##@LR__5460
03854     3B 13 02 F6 | 	mov	arg01, local41
03858     18 15 02 F6 | 	mov	arg02, local06
0385c     C0 30 B2 FD | 	call	#__system___string_cmp
03860     00 FA 0D F2 | 	cmp	result1, #0 wz
03864     BC 00 90 AD |  if_e	jmp	#LR__0185
03868     B2 01 00 FF 
0386c     4B 3D 06 F6 | 	mov	local12, ##@LR__5461
03870     1E 31 02 F6 | 	mov	local06, local12
03874     3B 13 02 F6 | 	mov	arg01, local41
03878     18 15 02 F6 | 	mov	arg02, local06
0387c     A0 30 B2 FD | 	call	#__system___string_cmp
03880     00 FA 0D F2 | 	cmp	result1, #0 wz
03884     9C 00 90 AD |  if_e	jmp	#LR__0185
03888     B2 01 00 FF 
0388c     4F 3B 06 F6 | 	mov	local11, ##@LR__5462
03890     1D 3D 02 F6 | 	mov	local12, local11
03894     3B 13 02 F6 | 	mov	arg01, local41
03898     1E 15 02 F6 | 	mov	arg02, local12
0389c     80 30 B2 FD | 	call	#__system___string_cmp
038a0     FD 30 0A F6 | 	mov	local06, result1 wz
038a4     7C 00 90 AD |  if_e	jmp	#LR__0185
038a8     B2 01 00 FF 
038ac     53 41 06 F6 | 	mov	local14, ##@LR__5463
038b0     20 3B 02 F6 | 	mov	local11, local14
038b4     3B 13 02 F6 | 	mov	arg01, local41
038b8     1D 15 02 F6 | 	mov	arg02, local11
038bc     60 30 B2 FD | 	call	#__system___string_cmp
038c0     FD 3C 0A F6 | 	mov	local12, result1 wz
038c4     5C 00 90 AD |  if_e	jmp	#LR__0185
038c8     B2 01 00 FF 
038cc     56 3F 06 F6 | 	mov	local13, ##@LR__5464
038d0     1F 41 02 F6 | 	mov	local14, local13
038d4     3B 13 02 F6 | 	mov	arg01, local41
038d8     20 15 02 F6 | 	mov	arg02, local14
038dc     40 30 B2 FD | 	call	#__system___string_cmp
038e0     FD 3A 0A F6 | 	mov	local11, result1 wz
038e4     3C 00 90 AD |  if_e	jmp	#LR__0185
038e8     B2 01 00 FF 
038ec     5A 3F 06 F6 | 	mov	local13, ##@LR__5465
038f0     3B 13 02 F6 | 	mov	arg01, local41
038f4     1F 15 02 F6 | 	mov	arg02, local13
038f8     24 30 B2 FD | 	call	#__system___string_cmp
038fc     FD 40 0A F6 | 	mov	local14, result1 wz
03900     20 00 90 AD |  if_e	jmp	#LR__0185
03904     B2 01 00 FF 
03908     60 51 06 F6 | 	mov	local22, ##@LR__5466
0390c     28 5D 02 F6 | 	mov	local28, local22
03910     3B 13 02 F6 | 	mov	arg01, local41
03914     2E 15 02 F6 | 	mov	arg02, local28
03918     04 30 B2 FD | 	call	#__system___string_cmp
0391c     FD 3E 0A F6 | 	mov	local13, result1 wz
03920     CC 00 90 5D |  if_ne	jmp	#LR__0186
03924                 | LR__0185
03924     37 5D 02 F6 | 	mov	local28, local37
03928     01 5C 06 F1 | 	add	local28, #1
0392c     2E 51 02 F6 | 	mov	local22, local28
03930     28 53 02 F6 | 	mov	local23, local22
03934     03 52 66 F0 | 	shl	local23, #3
03938     35 00 00 FF 
0393c     0C E4 05 F1 | 	add	objptr, ##27148
03940     F2 54 02 F6 | 	mov	local24, objptr
03944     F2 52 02 F1 | 	add	local23, objptr
03948     04 52 06 F1 | 	add	local23, #4
0394c     29 61 02 FB | 	rdlong	local30, local23
03950     04 52 86 F1 | 	sub	local23, #4
03954     30 5F 02 F6 | 	mov	local29, local30
03958     01 00 00 FF 
0395c     04 5E 0E F2 | 	cmp	local29, ##516 wz
03960     35 00 00 FF 
03964     0C E4 85 F1 | 	sub	objptr, ##27148
03968     84 00 90 5D |  if_ne	jmp	#LR__0186
0396c     37 85 02 F6 | 	mov	local48, local37
03970     01 84 06 F1 | 	add	local48, #1
03974     03 84 66 F0 | 	shl	local48, #3
03978     35 00 00 FF 
0397c     0C E4 05 F1 | 	add	objptr, ##27148
03980     F2 86 02 F6 | 	mov	local49, objptr
03984     F2 84 02 F1 | 	add	local48, objptr
03988     42 13 02 FB | 	rdlong	arg01, local48
0398c     01 14 06 F6 | 	mov	arg02, #1
03990     35 00 00 FF 
03994     0C E4 85 F1 | 	sub	objptr, ##27148
03998     64 50 B2 FD | 	call	#__system__Right_S
0399c     FD 12 02 F6 | 	mov	arg01, result1
039a0     B2 01 00 FF 
039a4     63 89 06 F6 | 	mov	local50, ##@LR__5467
039a8     44 8B 02 F6 | 	mov	local51, local50
039ac     45 15 02 F6 | 	mov	arg02, local51
039b0     6C 2F B2 FD | 	call	#__system___string_cmp
039b4     FD 62 0A F6 | 	mov	local31, result1 wz
039b8     34 00 90 AD |  if_e	jmp	#LR__0186
039bc     37 39 02 F6 | 	mov	local10, local37
039c0     01 38 06 F1 | 	add	local10, #1
039c4     03 38 66 F0 | 	shl	local10, #3
039c8     35 00 00 FF 
039cc     0C E4 05 F1 | 	add	objptr, ##27148
039d0     F2 38 02 F1 | 	add	local10, objptr
039d4     01 00 00 FF 
039d8     03 30 06 F6 | 	mov	local06, ##515
039dc     04 38 06 F1 | 	add	local10, #4
039e0     01 00 80 FF 
039e4     1C 07 68 FC | 	wrlong	##515, local10
039e8     35 00 00 FF 
039ec     0C E4 85 F1 | 	sub	objptr, ##27148
039f0                 | LR__0186
039f0                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
039f0     B2 01 00 FF 
039f4     65 15 06 F6 | 	mov	arg02, ##@LR__5468
039f8     3B 13 02 F6 | 	mov	arg01, local41
039fc     20 2F B2 FD | 	call	#__system___string_cmp
03a00     00 FA 0D F2 | 	cmp	result1, #0 wz
03a04     1C 00 90 AD |  if_e	jmp	#LR__0187
03a08     B2 01 00 FF 
03a0c     6C 2F 06 F6 | 	mov	local05, ##@LR__5469
03a10     3B 13 02 F6 | 	mov	arg01, local41
03a14     17 15 02 F6 | 	mov	arg02, local05
03a18     04 2F B2 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     CC 00 90 5D |  if_ne	jmp	#LR__0188
03a24                 | LR__0187
03a24     37 2F 02 F6 | 	mov	local05, local37
03a28     01 2E 06 F1 | 	add	local05, #1
03a2c     17 31 02 F6 | 	mov	local06, local05
03a30     03 30 66 F0 | 	shl	local06, #3
03a34     35 00 00 FF 
03a38     0C E4 05 F1 | 	add	objptr, ##27148
03a3c     F2 3C 02 F6 | 	mov	local12, objptr
03a40     F2 30 02 F1 | 	add	local06, objptr
03a44     04 30 06 F1 | 	add	local06, #4
03a48     18 41 02 FB | 	rdlong	local14, local06
03a4c     04 30 86 F1 | 	sub	local06, #4
03a50     20 3B 02 F6 | 	mov	local11, local14
03a54     01 00 00 FF 
03a58     04 3A 0E F2 | 	cmp	local11, ##516 wz
03a5c     35 00 00 FF 
03a60     0C E4 85 F1 | 	sub	objptr, ##27148
03a64     88 00 90 5D |  if_ne	jmp	#LR__0188
03a68     37 53 02 F6 | 	mov	local23, local37
03a6c     01 52 06 F1 | 	add	local23, #1
03a70     03 52 66 F0 | 	shl	local23, #3
03a74     35 00 00 FF 
03a78     0C E4 05 F1 | 	add	objptr, ##27148
03a7c     F2 54 02 F6 | 	mov	local24, objptr
03a80     F2 52 02 F1 | 	add	local23, objptr
03a84     29 13 02 FB | 	rdlong	arg01, local23
03a88     01 14 06 F6 | 	mov	arg02, #1
03a8c     35 00 00 FF 
03a90     0C E4 85 F1 | 	sub	objptr, ##27148
03a94     68 4F B2 FD | 	call	#__system__Right_S
03a98     FD 12 02 F6 | 	mov	arg01, result1
03a9c     B2 01 00 FF 
03aa0     72 51 06 F6 | 	mov	local22, ##@LR__5470
03aa4     28 5D 02 F6 | 	mov	local28, local22
03aa8     2E 15 02 F6 | 	mov	arg02, local28
03aac     70 2E B2 FD | 	call	#__system___string_cmp
03ab0     FD 3E 0A F6 | 	mov	local13, result1 wz
03ab4     38 00 90 AD |  if_e	jmp	#LR__0188
03ab8     37 39 02 F6 | 	mov	local10, local37
03abc     01 38 06 F1 | 	add	local10, #1
03ac0     03 38 66 F0 | 	shl	local10, #3
03ac4     35 00 00 FF 
03ac8     0C E4 05 F1 | 	add	objptr, ##27148
03acc     F2 2E 02 F6 | 	mov	local05, objptr
03ad0     F2 38 02 F1 | 	add	local10, objptr
03ad4     01 00 00 FF 
03ad8     03 30 06 F6 | 	mov	local06, ##515
03adc     04 38 06 F1 | 	add	local10, #4
03ae0     01 00 80 FF 
03ae4     1C 07 68 FC | 	wrlong	##515, local10
03ae8     35 00 00 FF 
03aec     0C E4 85 F1 | 	sub	objptr, ##27148
03af0                 | LR__0188
03af0                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03af0     B2 01 00 FF 
03af4     74 15 06 F6 | 	mov	arg02, ##@LR__5471
03af8     3B 13 02 F6 | 	mov	arg01, local41
03afc     20 2E B2 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     C8 00 90 5D |  if_ne	jmp	#LR__0189
03b08     37 2F 02 F6 | 	mov	local05, local37
03b0c     01 2E 06 F1 | 	add	local05, #1
03b10     03 2E 66 F0 | 	shl	local05, #3
03b14     35 00 00 FF 
03b18     0C E4 05 F1 | 	add	objptr, ##27148
03b1c     F2 30 02 F6 | 	mov	local06, objptr
03b20     F2 2E 02 F1 | 	add	local05, objptr
03b24     04 2E 06 F1 | 	add	local05, #4
03b28     17 3B 02 FB | 	rdlong	local11, local05
03b2c     04 2E 86 F1 | 	sub	local05, #4
03b30     1D 3D 02 F6 | 	mov	local12, local11
03b34     01 00 00 FF 
03b38     04 3C 0E F2 | 	cmp	local12, ##516 wz
03b3c     35 00 00 FF 
03b40     0C E4 85 F1 | 	sub	objptr, ##27148
03b44     88 00 90 5D |  if_ne	jmp	#LR__0189
03b48     37 51 02 F6 | 	mov	local22, local37
03b4c     01 50 06 F1 | 	add	local22, #1
03b50     03 50 66 F0 | 	shl	local22, #3
03b54     35 00 00 FF 
03b58     0C E4 05 F1 | 	add	objptr, ##27148
03b5c     F2 52 02 F6 | 	mov	local23, objptr
03b60     F2 50 02 F1 | 	add	local22, objptr
03b64     28 13 02 FB | 	rdlong	arg01, local22
03b68     01 14 06 F6 | 	mov	arg02, #1
03b6c     35 00 00 FF 
03b70     0C E4 85 F1 | 	sub	objptr, ##27148
03b74     88 4E B2 FD | 	call	#__system__Right_S
03b78     FD 12 02 F6 | 	mov	arg01, result1
03b7c     B2 01 00 FF 
03b80     79 5D 06 F6 | 	mov	local28, ##@LR__5472
03b84     2E 3F 02 F6 | 	mov	local13, local28
03b88     1F 15 02 F6 | 	mov	arg02, local13
03b8c     90 2D B2 FD | 	call	#__system___string_cmp
03b90     FD 40 0A F6 | 	mov	local14, result1 wz
03b94     38 00 90 AD |  if_e	jmp	#LR__0189
03b98     37 39 02 F6 | 	mov	local10, local37
03b9c     01 38 06 F1 | 	add	local10, #1
03ba0     03 38 66 F0 | 	shl	local10, #3
03ba4     35 00 00 FF 
03ba8     0C E4 05 F1 | 	add	objptr, ##27148
03bac     F2 2E 02 F6 | 	mov	local05, objptr
03bb0     F2 38 02 F1 | 	add	local10, objptr
03bb4     01 00 00 FF 
03bb8     03 30 06 F6 | 	mov	local06, ##515
03bbc     04 38 06 F1 | 	add	local10, #4
03bc0     01 00 80 FF 
03bc4     1C 07 68 FC | 	wrlong	##515, local10
03bc8     35 00 00 FF 
03bcc     0C E4 85 F1 | 	sub	objptr, ##27148
03bd0                 | LR__0189
03bd0                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03bd0     B2 01 00 FF 
03bd4     7B 15 06 F6 | 	mov	arg02, ##@LR__5473
03bd8     3B 13 02 F6 | 	mov	arg01, local41
03bdc     40 2D B2 FD | 	call	#__system___string_cmp
03be0     00 FA 0D F2 | 	cmp	result1, #0 wz
03be4     C8 00 90 5D |  if_ne	jmp	#LR__0190
03be8     37 2F 02 F6 | 	mov	local05, local37
03bec     03 2E 06 F1 | 	add	local05, #3
03bf0     03 2E 66 F0 | 	shl	local05, #3
03bf4     35 00 00 FF 
03bf8     0C E4 05 F1 | 	add	objptr, ##27148
03bfc     F2 30 02 F6 | 	mov	local06, objptr
03c00     F2 2E 02 F1 | 	add	local05, objptr
03c04     04 2E 06 F1 | 	add	local05, #4
03c08     17 3B 02 FB | 	rdlong	local11, local05
03c0c     04 2E 86 F1 | 	sub	local05, #4
03c10     1D 3D 02 F6 | 	mov	local12, local11
03c14     01 00 00 FF 
03c18     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c1c     35 00 00 FF 
03c20     0C E4 85 F1 | 	sub	objptr, ##27148
03c24     88 00 90 5D |  if_ne	jmp	#LR__0190
03c28     37 51 02 F6 | 	mov	local22, local37
03c2c     03 50 06 F1 | 	add	local22, #3
03c30     03 50 66 F0 | 	shl	local22, #3
03c34     35 00 00 FF 
03c38     0C E4 05 F1 | 	add	objptr, ##27148
03c3c     F2 52 02 F6 | 	mov	local23, objptr
03c40     F2 50 02 F1 | 	add	local22, objptr
03c44     28 13 02 FB | 	rdlong	arg01, local22
03c48     01 14 06 F6 | 	mov	arg02, #1
03c4c     35 00 00 FF 
03c50     0C E4 85 F1 | 	sub	objptr, ##27148
03c54     A8 4D B2 FD | 	call	#__system__Right_S
03c58     FD 12 02 F6 | 	mov	arg01, result1
03c5c     B2 01 00 FF 
03c60     80 5D 06 F6 | 	mov	local28, ##@LR__5474
03c64     2E 3F 02 F6 | 	mov	local13, local28
03c68     1F 15 02 F6 | 	mov	arg02, local13
03c6c     B0 2C B2 FD | 	call	#__system___string_cmp
03c70     FD 40 0A F6 | 	mov	local14, result1 wz
03c74     38 00 90 AD |  if_e	jmp	#LR__0190
03c78     37 39 02 F6 | 	mov	local10, local37
03c7c     03 38 06 F1 | 	add	local10, #3
03c80     03 38 66 F0 | 	shl	local10, #3
03c84     35 00 00 FF 
03c88     0C E4 05 F1 | 	add	objptr, ##27148
03c8c     F2 2E 02 F6 | 	mov	local05, objptr
03c90     F2 38 02 F1 | 	add	local10, objptr
03c94     01 00 00 FF 
03c98     03 30 06 F6 | 	mov	local06, ##515
03c9c     04 38 06 F1 | 	add	local10, #4
03ca0     01 00 80 FF 
03ca4     1C 07 68 FC | 	wrlong	##515, local10
03ca8     35 00 00 FF 
03cac     0C E4 85 F1 | 	sub	objptr, ##27148
03cb0                 | LR__0190
03cb0                 | ' 
03cb0                 | ' ' cd needs special treatment..
03cb0                 | ' 
03cb0                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cb0     B2 01 00 FF 
03cb4     82 15 06 F6 | 	mov	arg02, ##@LR__5475
03cb8     3B 13 02 F6 | 	mov	arg01, local41
03cbc     60 2C B2 FD | 	call	#__system___string_cmp
03cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc4     38 00 90 5D |  if_ne	jmp	#LR__0191
03cc8     37 39 02 F6 | 	mov	local10, local37
03ccc     01 38 06 F1 | 	add	local10, #1
03cd0     03 38 66 F0 | 	shl	local10, #3
03cd4     35 00 00 FF 
03cd8     0C E4 05 F1 | 	add	objptr, ##27148
03cdc     F2 2E 02 F6 | 	mov	local05, objptr
03ce0     F2 38 02 F1 | 	add	local10, objptr
03ce4     01 00 00 FF 
03ce8     03 30 06 F6 | 	mov	local06, ##515
03cec     04 38 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     1C 07 68 FC | 	wrlong	##515, local10
03cf8     35 00 00 FF 
03cfc     0C E4 85 F1 | 	sub	objptr, ##27148
03d00                 | LR__0191
03d00                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d00     B2 01 00 FF 
03d04     85 15 06 F6 | 	mov	arg02, ##@LR__5476
03d08     3B 13 02 F6 | 	mov	arg01, local41
03d0c     10 2C B2 FD | 	call	#__system___string_cmp
03d10     00 FA 0D F2 | 	cmp	result1, #0 wz
03d14     A4 00 90 5D |  if_ne	jmp	#LR__0192
03d18     37 31 02 F6 | 	mov	local06, local37
03d1c     01 30 06 F1 | 	add	local06, #1
03d20     03 30 66 F0 | 	shl	local06, #3
03d24     35 00 00 FF 
03d28     0C E4 05 F1 | 	add	objptr, ##27148
03d2c     F2 3C 02 F6 | 	mov	local12, objptr
03d30     F2 30 02 F1 | 	add	local06, objptr
03d34     18 13 02 FB | 	rdlong	arg01, local06
03d38     B2 01 00 FF 
03d3c     89 2F 06 F6 | 	mov	local05, ##@LR__5477
03d40     17 15 02 F6 | 	mov	arg02, local05
03d44     35 00 00 FF 
03d48     0C E4 85 F1 | 	sub	objptr, ##27148
03d4c     D0 2B B2 FD | 	call	#__system___string_cmp
03d50     00 FA 0D F2 | 	cmp	result1, #0 wz
03d54     64 00 90 5D |  if_ne	jmp	#LR__0192
03d58     37 39 02 F6 | 	mov	local10, local37
03d5c     01 38 06 F1 | 	add	local10, #1
03d60     03 38 66 F0 | 	shl	local10, #3
03d64     35 00 00 FF 
03d68     0C E4 05 F1 | 	add	objptr, ##27148
03d6c     F2 38 02 F1 | 	add	local10, objptr
03d70     04 38 06 F1 | 	add	local10, #4
03d74     01 00 80 FF 
03d78     1C 07 68 FC | 	wrlong	##515, local10
03d7c     37 39 02 F6 | 	mov	local10, local37
03d80     01 38 06 F1 | 	add	local10, #1
03d84     03 38 66 F0 | 	shl	local10, #3
03d88     F2 38 02 F1 | 	add	local10, objptr
03d8c     B2 01 00 FF 
03d90     8B 31 06 F6 | 	mov	local06, ##@LR__5478
03d94     1C 31 62 FC | 	wrlong	local06, local10
03d98     37 39 02 F6 | 	mov	local10, local37
03d9c     03 38 66 F0 | 	shl	local10, #3
03da0     F2 2E 02 F6 | 	mov	local05, objptr
03da4     F2 38 02 F1 | 	add	local10, objptr
03da8     C3 30 06 F6 | 	mov	local06, #195
03dac     04 38 06 F1 | 	add	local10, #4
03db0     1C 87 69 FC | 	wrlong	#195, local10
03db4     35 00 00 FF 
03db8     0C E4 85 F1 | 	sub	objptr, ##27148
03dbc                 | LR__0192
03dbc                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03dbc     B2 01 00 FF 
03dc0     8E 39 06 F6 | 	mov	local10, ##@LR__5479
03dc4     3B 13 02 F6 | 	mov	arg01, local41
03dc8     1C 15 02 F6 | 	mov	arg02, local10
03dcc     50 2B B2 FD | 	call	#__system___string_cmp
03dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd4     04 01 90 5D |  if_ne	jmp	#LR__0195
03dd8     37 31 02 F6 | 	mov	local06, local37
03ddc     01 30 06 F1 | 	add	local06, #1
03de0     03 30 66 F0 | 	shl	local06, #3
03de4     35 00 00 FF 
03de8     0C E4 05 F1 | 	add	objptr, ##27148
03dec     F2 3C 02 F6 | 	mov	local12, objptr
03df0     F2 30 02 F1 | 	add	local06, objptr
03df4     18 13 02 FB | 	rdlong	arg01, local06
03df8     B2 01 00 FF 
03dfc     91 2F 06 F6 | 	mov	local05, ##@LR__5480
03e00     17 39 02 F6 | 	mov	local10, local05
03e04     1C 15 02 F6 | 	mov	arg02, local10
03e08     35 00 00 FF 
03e0c     0C E4 85 F1 | 	sub	objptr, ##27148
03e10     0C 2B B2 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     C0 00 90 5D |  if_ne	jmp	#LR__0195
03e1c     37 39 02 F6 | 	mov	local10, local37
03e20     01 38 06 F1 | 	add	local10, #1
03e24     03 38 66 F0 | 	shl	local10, #3
03e28     35 00 00 FF 
03e2c     0C E4 05 F1 | 	add	objptr, ##27148
03e30     F2 2E 02 F6 | 	mov	local05, objptr
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     01 00 00 FF 
03e3c     03 30 06 F6 | 	mov	local06, ##515
03e40     04 38 06 F1 | 	add	local10, #4
03e44     01 00 80 FF 
03e48     1C 07 68 FC | 	wrlong	##515, local10
03e4c     04 38 86 F1 | 	sub	local10, #4
03e50     37 29 02 F6 | 	mov	local02, local37
03e54     02 28 06 F1 | 	add	local02, #2
03e58     23 8D 02 F6 | 	mov	local52, local17
03e5c     01 8C 06 F1 | 	add	local52, #1
03e60     35 00 00 FF 
03e64     0C E4 85 F1 | 	sub	objptr, ##27148
03e68                 | LR__0193
03e68     46 29 52 F2 | 	cmps	local02, local52 wc
03e6c     6C 00 90 3D |  if_ae	jmp	#LR__0194
03e70     14 39 02 F6 | 	mov	local10, local02
03e74     03 38 66 F0 | 	shl	local10, #3
03e78     35 00 00 FF 
03e7c     0C E4 05 F1 | 	add	objptr, ##27148
03e80     F2 38 02 F1 | 	add	local10, objptr
03e84     1C 8F 02 FB | 	rdlong	local53, local10
03e88     37 39 02 F6 | 	mov	local10, local37
03e8c     01 38 06 F1 | 	add	local10, #1
03e90     03 38 66 F0 | 	shl	local10, #3
03e94     F2 2E 02 F6 | 	mov	local05, objptr
03e98     F2 38 02 F1 | 	add	local10, objptr
03e9c     37 3B 02 F6 | 	mov	local11, local37
03ea0     01 3A 06 F1 | 	add	local11, #1
03ea4     1D 41 02 F6 | 	mov	local14, local11
03ea8     03 40 66 F0 | 	shl	local14, #3
03eac     F2 3E 02 F6 | 	mov	local13, objptr
03eb0     F2 40 02 F1 | 	add	local14, objptr
03eb4     20 13 02 FB | 	rdlong	arg01, local14
03eb8     47 3D 02 F6 | 	mov	local12, local53
03ebc     1E 15 02 F6 | 	mov	arg02, local12
03ec0     35 00 00 FF 
03ec4     0C E4 85 F1 | 	sub	objptr, ##27148
03ec8     88 2A B2 FD | 	call	#__system___string_concat
03ecc     FD 30 02 F6 | 	mov	local06, result1
03ed0     1C 31 62 FC | 	wrlong	local06, local10
03ed4     01 28 06 F1 | 	add	local02, #1
03ed8     8C FF 9F FD | 	jmp	#LR__0193
03edc                 | LR__0194
03edc                 | LR__0195
03edc                 | ' 
03edc                 | ' ' determine a type of the line and compile it
03edc                 | ' 
03edc                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03edc     35 00 00 FF 
03ee0     0C E4 05 F1 | 	add	objptr, ##27148
03ee4     F2 12 02 FB | 	rdlong	arg01, objptr
03ee8     35 00 00 FF 
03eec     0C E4 85 F1 | 	sub	objptr, ##27148
03ef0     88 2F B0 FD | 	call	#_isdec
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     30 00 90 AD |  if_e	jmp	#LR__0196
03efc     35 00 00 FF 
03f00     0C E4 05 F1 | 	add	objptr, ##27148
03f04     F2 12 02 FB | 	rdlong	arg01, objptr
03f08     35 00 00 FF 
03f0c     0C E4 85 F1 | 	sub	objptr, ##27148
03f10     00 14 06 F6 | 	mov	arg02, #0
03f14     D4 5E B2 FD | 	call	#__system____builtin_atoi
03f18     52 00 00 FF 
03f1c     B0 E4 05 F1 | 	add	objptr, ##42160
03f20     F2 FA 61 FC | 	wrlong	result1, objptr
03f24     52 00 00 FF 
03f28     B0 E4 85 F1 | 	sub	objptr, ##42160
03f2c                 | LR__0196
03f2c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f2c     52 00 00 FF 
03f30     B0 E4 05 F1 | 	add	objptr, ##42160
03f34     F2 2C 02 FB | 	rdlong	local04, objptr
03f38     52 00 00 FF 
03f3c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f40     01 2C 16 F2 | 	cmp	local04, #1 wc
03f44     40 00 90 CD |  if_b	jmp	#LR__0197
03f48     01 46 0E F2 | 	cmp	local17, #1 wz
03f4c     37 00 00 AF 
03f50     24 E4 05 A1 |  if_e	add	objptr, ##28196
03f54     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03f58     37 00 00 AF 
03f5c     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03f60     17 39 02 A6 |  if_e	mov	local10, local05
03f64     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03f68     1C 00 90 5D |  if_ne	jmp	#LR__0197
03f6c     52 00 00 FF 
03f70     B0 E4 05 F1 | 	add	objptr, ##42160
03f74     F2 12 02 FB | 	rdlong	arg01, objptr
03f78     52 00 00 FF 
03f7c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f80     A4 30 B0 FD | 	call	#_deleteline
03f84     C8 03 90 FD | 	jmp	#LR__0208
03f88                 | LR__0197
03f88                 | ' 
03f88                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03f88     37 00 00 FF 
03f8c     24 E4 05 F1 | 	add	objptr, ##28196
03f90     F2 2C 0A FB | 	rdlong	local04, objptr wz
03f94     37 00 00 FF 
03f98     24 E4 85 F1 | 	sub	objptr, ##28196
03f9c     20 00 90 AD |  if_e	jmp	#LR__0198
03fa0     37 00 00 FF 
03fa4     24 E4 05 F1 | 	add	objptr, ##28196
03fa8     F2 2E 02 FB | 	rdlong	local05, objptr
03fac     37 00 00 FF 
03fb0     24 E4 85 F1 | 	sub	objptr, ##28196
03fb4     17 39 02 F6 | 	mov	local10, local05
03fb8     03 38 0E F2 | 	cmp	local10, #3 wz
03fbc     C0 00 90 5D |  if_ne	jmp	#LR__0200
03fc0                 | LR__0198
03fc0     35 00 00 FF 
03fc4     20 E4 05 F1 | 	add	objptr, ##27168
03fc8     F2 3C 02 FB | 	rdlong	local12, objptr
03fcc     35 00 00 FF 
03fd0     20 E4 85 F1 | 	sub	objptr, ##27168
03fd4     1B 3C 0E F2 | 	cmp	local12, #27 wz
03fd8     A4 00 90 AD |  if_e	jmp	#LR__0200
03fdc     52 00 00 FF 
03fe0     B0 E4 05 F1 | 	add	objptr, ##42160
03fe4     F2 12 02 FB | 	rdlong	arg01, objptr
03fe8     1B 00 00 FF 
03fec     8C E4 85 F1 | 	sub	objptr, ##13964
03ff0     F2 16 02 FB | 	rdlong	arg03, objptr
03ff4     37 00 00 FF 
03ff8     24 E4 85 F1 | 	sub	objptr, ##28196
03ffc     00 14 06 F6 | 	mov	arg02, #0
04000     84 44 B0 FD | 	call	#_compile
04004     FD 26 0A F6 | 	mov	local01, result1 wz
04008                 | '   err=compile(linenum,0,cont) 
04008                 | '   if err<>0 then printerror(err,linenum): goto 101
04008     20 00 90 AD |  if_e	jmp	#LR__0199
0400c     52 00 00 FF 
04010     B0 E4 05 F1 | 	add	objptr, ##42160
04014     F2 14 02 FB | 	rdlong	arg02, objptr
04018     52 00 00 FF 
0401c     B0 E4 85 F1 | 	sub	objptr, ##42160
04020     13 13 02 F6 | 	mov	arg01, local01
04024     E0 EE B1 FD | 	call	#_printerror
04028     44 03 90 FD | 	jmp	#LR__0209
0402c                 | LR__0199
0402c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0402c     52 00 00 FF 
04030     F4 E4 05 F1 | 	add	objptr, ##42228
04034     F2 12 02 FB | 	rdlong	arg01, objptr
04038     52 00 00 FF 
0403c     F4 E4 85 F1 | 	sub	objptr, ##42228
04040     B2 01 00 FF 
04044     93 15 06 F6 | 	mov	arg02, ##@LR__5481
04048     D4 28 B2 FD | 	call	#__system___string_cmp
0404c     00 FA 0D F2 | 	cmp	result1, #0 wz
04050     FC 02 90 AD |  if_e	jmp	#LR__0208
04054     52 00 00 FF 
04058     F4 E4 05 F1 | 	add	objptr, ##42228
0405c     F2 2C 02 FB | 	rdlong	local04, objptr
04060     1B 00 00 FF 
04064     D8 E4 85 F1 | 	sub	objptr, ##14040
04068     F2 2C 62 FC | 	wrlong	local04, objptr
0406c     08 E4 05 F1 | 	add	objptr, #8
04070     F2 08 68 FC | 	wrlong	#4, objptr
04074     37 00 00 FF 
04078     24 E4 85 F1 | 	sub	objptr, ##28196
0407c     14 D8 9F FD | 	jmp	#LR__0070
04080                 | LR__0200
04080                 | '       							
04080                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04080     37 00 00 FF 
04084     24 E4 05 F1 | 	add	objptr, ##28196
04088     F2 2C 02 FB | 	rdlong	local04, objptr
0408c     37 00 00 FF 
04090     24 E4 85 F1 | 	sub	objptr, ##28196
04094     01 2C 0E F2 | 	cmp	local04, #1 wz
04098     37 00 00 5F 
0409c     24 E4 05 51 |  if_ne	add	objptr, ##28196
040a0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
040a4     37 00 00 5F 
040a8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
040ac     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
040b0     C0 00 90 5D |  if_ne	jmp	#LR__0202
040b4     35 00 00 FF 
040b8     18 E4 05 F1 | 	add	objptr, ##27160
040bc     F2 3C 02 FB | 	rdlong	local12, objptr
040c0     35 00 00 FF 
040c4     18 E4 85 F1 | 	sub	objptr, ##27160
040c8     1B 3C 0E F2 | 	cmp	local12, #27 wz
040cc     A4 00 90 AD |  if_e	jmp	#LR__0202
040d0     52 00 00 FF 
040d4     B0 E4 05 F1 | 	add	objptr, ##42160
040d8     F2 12 02 FB | 	rdlong	arg01, objptr
040dc     1B 00 00 FF 
040e0     8C E4 85 F1 | 	sub	objptr, ##13964
040e4     F2 16 02 FB | 	rdlong	arg03, objptr
040e8     37 00 00 FF 
040ec     24 E4 85 F1 | 	sub	objptr, ##28196
040f0     00 14 06 F6 | 	mov	arg02, #0
040f4     90 43 B0 FD | 	call	#_compile
040f8     FD 26 0A F6 | 	mov	local01, result1 wz
040fc                 | '   err=compile(linenum,0,cont) 
040fc                 | '   if err<>0 then printerror(err,linenum): goto 101
040fc     20 00 90 AD |  if_e	jmp	#LR__0201
04100     52 00 00 FF 
04104     B0 E4 05 F1 | 	add	objptr, ##42160
04108     F2 14 02 FB | 	rdlong	arg02, objptr
0410c     52 00 00 FF 
04110     B0 E4 85 F1 | 	sub	objptr, ##42160
04114     13 13 02 F6 | 	mov	arg01, local01
04118     EC ED B1 FD | 	call	#_printerror
0411c     50 02 90 FD | 	jmp	#LR__0209
04120                 | LR__0201
04120                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04120     52 00 00 FF 
04124     F4 E4 05 F1 | 	add	objptr, ##42228
04128     F2 12 02 FB | 	rdlong	arg01, objptr
0412c     52 00 00 FF 
04130     F4 E4 85 F1 | 	sub	objptr, ##42228
04134     B2 01 00 FF 
04138     94 15 06 F6 | 	mov	arg02, ##@LR__5482
0413c     E0 27 B2 FD | 	call	#__system___string_cmp
04140     00 FA 0D F2 | 	cmp	result1, #0 wz
04144     08 02 90 AD |  if_e	jmp	#LR__0208
04148     52 00 00 FF 
0414c     F4 E4 05 F1 | 	add	objptr, ##42228
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     1B 00 00 FF 
04158     D8 E4 85 F1 | 	sub	objptr, ##14040
0415c     F2 2C 62 FC | 	wrlong	local04, objptr
04160     08 E4 05 F1 | 	add	objptr, #8
04164     F2 08 68 FC | 	wrlong	#4, objptr
04168     37 00 00 FF 
0416c     24 E4 85 F1 | 	sub	objptr, ##28196
04170     20 D7 9F FD | 	jmp	#LR__0070
04174                 | LR__0202
04174                 | ' 							 
04174                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
04174     37 00 00 FF 
04178     24 E4 05 F1 | 	add	objptr, ##28196
0417c     F2 2C 0A FB | 	rdlong	local04, objptr wz
04180     37 00 00 FF 
04184     24 E4 85 F1 | 	sub	objptr, ##28196
04188     37 00 00 5F 
0418c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04190     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04194     37 00 00 5F 
04198     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0419c     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
041a0     35 00 00 AF 
041a4     20 E4 05 A1 |  if_e	add	objptr, ##27168
041a8     F2 3C 02 AB |  if_e	rdlong	local12, objptr
041ac     35 00 00 AF 
041b0     20 E4 85 A1 |  if_e	sub	objptr, ##27168
041b4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
041b8     A4 00 90 5D |  if_ne	jmp	#LR__0204
041bc     52 00 00 FF 
041c0     B0 E4 05 F1 | 	add	objptr, ##42160
041c4     F2 12 02 FB | 	rdlong	arg01, objptr
041c8     1B 00 00 FF 
041cc     8C E4 85 F1 | 	sub	objptr, ##13964
041d0     F2 16 02 FB | 	rdlong	arg03, objptr
041d4     37 00 00 FF 
041d8     24 E4 85 F1 | 	sub	objptr, ##28196
041dc     00 14 06 F6 | 	mov	arg02, #0
041e0     6C 43 B0 FD | 	call	#_compile_assign
041e4     FD 26 0A F6 | 	mov	local01, result1 wz
041e8                 | '   err=compile_assign(linenum,0,cont)
041e8                 | '   if err<>0 then printerror(err,linenum): goto 101
041e8     20 00 90 AD |  if_e	jmp	#LR__0203
041ec     52 00 00 FF 
041f0     B0 E4 05 F1 | 	add	objptr, ##42160
041f4     F2 14 02 FB | 	rdlong	arg02, objptr
041f8     52 00 00 FF 
041fc     B0 E4 85 F1 | 	sub	objptr, ##42160
04200     13 13 02 F6 | 	mov	arg01, local01
04204     00 ED B1 FD | 	call	#_printerror
04208     64 01 90 FD | 	jmp	#LR__0209
0420c                 | LR__0203
0420c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
0420c     52 00 00 FF 
04210     F4 E4 05 F1 | 	add	objptr, ##42228
04214     F2 12 02 FB | 	rdlong	arg01, objptr
04218     52 00 00 FF 
0421c     F4 E4 85 F1 | 	sub	objptr, ##42228
04220     B2 01 00 FF 
04224     95 15 06 F6 | 	mov	arg02, ##@LR__5483
04228     F4 26 B2 FD | 	call	#__system___string_cmp
0422c     00 FA 0D F2 | 	cmp	result1, #0 wz
04230     1C 01 90 AD |  if_e	jmp	#LR__0208
04234     52 00 00 FF 
04238     F4 E4 05 F1 | 	add	objptr, ##42228
0423c     F2 2C 02 FB | 	rdlong	local04, objptr
04240     1B 00 00 FF 
04244     D8 E4 85 F1 | 	sub	objptr, ##14040
04248     F2 2C 62 FC | 	wrlong	local04, objptr
0424c     08 E4 05 F1 | 	add	objptr, #8
04250     F2 08 68 FC | 	wrlong	#4, objptr
04254     37 00 00 FF 
04258     24 E4 85 F1 | 	sub	objptr, ##28196
0425c     34 D6 9F FD | 	jmp	#LR__0070
04260                 | LR__0204
04260                 | '     							 
04260                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04260     37 00 00 FF 
04264     24 E4 05 F1 | 	add	objptr, ##28196
04268     F2 2C 02 FB | 	rdlong	local04, objptr
0426c     37 00 00 FF 
04270     24 E4 85 F1 | 	sub	objptr, ##28196
04274     01 2C 0E F2 | 	cmp	local04, #1 wz
04278     37 00 00 5F 
0427c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04280     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04284     37 00 00 5F 
04288     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0428c     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04290     35 00 00 AF 
04294     18 E4 05 A1 |  if_e	add	objptr, ##27160
04298     F2 3C 02 AB |  if_e	rdlong	local12, objptr
0429c     35 00 00 AF 
042a0     18 E4 85 A1 |  if_e	sub	objptr, ##27160
042a4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
042a8     A4 00 90 5D |  if_ne	jmp	#LR__0207
042ac     52 00 00 FF 
042b0     B0 E4 05 F1 | 	add	objptr, ##42160
042b4     F2 12 02 FB | 	rdlong	arg01, objptr
042b8     1B 00 00 FF 
042bc     8C E4 85 F1 | 	sub	objptr, ##13964
042c0     F2 16 02 FB | 	rdlong	arg03, objptr
042c4     37 00 00 FF 
042c8     24 E4 85 F1 | 	sub	objptr, ##28196
042cc     00 14 06 F6 | 	mov	arg02, #0
042d0     7C 42 B0 FD | 	call	#_compile_assign
042d4     FD 26 0A F6 | 	mov	local01, result1 wz
042d8                 | '   err=compile_assign(linenum,0,cont) 
042d8                 | '   if err<>0 then printerror(err,linenum): goto 101
042d8     20 00 90 AD |  if_e	jmp	#LR__0205
042dc     52 00 00 FF 
042e0     B0 E4 05 F1 | 	add	objptr, ##42160
042e4     F2 14 02 FB | 	rdlong	arg02, objptr
042e8     52 00 00 FF 
042ec     B0 E4 85 F1 | 	sub	objptr, ##42160
042f0     13 13 02 F6 | 	mov	arg01, local01
042f4     10 EC B1 FD | 	call	#_printerror
042f8     74 00 90 FD | 	jmp	#LR__0209
042fc                 | LR__0205
042fc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
042fc     52 00 00 FF 
04300     F4 E4 05 F1 | 	add	objptr, ##42228
04304     F2 12 02 FB | 	rdlong	arg01, objptr
04308     52 00 00 FF 
0430c     F4 E4 85 F1 | 	sub	objptr, ##42228
04310     B2 01 00 FF 
04314     96 15 06 F6 | 	mov	arg02, ##@LR__5484
04318     04 26 B2 FD | 	call	#__system___string_cmp
0431c     00 FA 4D F2 | 	cmps	result1, #0 wz
04320     2C 00 90 AD |  if_e	jmp	#LR__0206
04324     52 00 00 FF 
04328     F4 E4 05 F1 | 	add	objptr, ##42228
0432c     F2 2C 02 FB | 	rdlong	local04, objptr
04330     1B 00 00 FF 
04334     D8 E4 85 F1 | 	sub	objptr, ##14040
04338     F2 2C 62 FC | 	wrlong	local04, objptr
0433c     08 E4 05 F1 | 	add	objptr, #8
04340     F2 08 68 FC | 	wrlong	#4, objptr
04344     37 00 00 FF 
04348     24 E4 85 F1 | 	sub	objptr, ##28196
0434c     44 D5 9F FD | 	jmp	#LR__0070
04350                 | LR__0206
04350                 | LR__0207
04350                 | LR__0208
04350                 | ' 
04350                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04350     52 00 00 FF 
04354     B0 E4 05 F1 | 	add	objptr, ##42160
04358     F2 2C 0A FB | 	rdlong	local04, objptr wz
0435c     52 00 00 FF 
04360     B0 E4 85 F1 | 	sub	objptr, ##42160
04364     B0 00 90 5D |  if_ne	jmp	#LR__0212
04368     02 12 06 F6 | 	mov	arg01, #2
0436c     F4 90 B0 FD | 	call	#_execute_line
04370                 | LR__0209
04370                 | '   execute_line(2)
04370                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04370     52 00 00 FF 
04374     D4 E4 05 F1 | 	add	objptr, ##42196
04378     F2 2C 0A FB | 	rdlong	local04, objptr wz
0437c     52 00 00 FF 
04380     D4 E4 85 F1 | 	sub	objptr, ##42196
04384     20 00 90 5D |  if_ne	jmp	#LR__0210
04388     B2 01 00 FF 
0438c     97 13 06 F6 | 	mov	arg01, ##@LR__5485
04390                 | ' 
04390                 | ' write(text)
04390     A0 0C B2 FD | 	call	#_hg010b_spin2_write
04394                 | ' crlf
04394     9C 11 B2 FD | 	call	#_hg010b_spin2_crlf
04398     B2 01 00 FF 
0439c     98 13 06 F6 | 	mov	arg01, ##@LR__5486
043a0                 | ' 
043a0                 | ' write(text)
043a0     90 0C B2 FD | 	call	#_hg010b_spin2_write
043a4                 | ' crlf
043a4     8C 11 B2 FD | 	call	#_hg010b_spin2_crlf
043a8                 | LR__0210
043a8                 | '     if inload=1 andalso err>0 then print fullline$
043a8     52 00 00 FF 
043ac     D4 E4 05 F1 | 	add	objptr, ##42196
043b0     F2 2C 02 FB | 	rdlong	local04, objptr
043b4     52 00 00 FF 
043b8     D4 E4 85 F1 | 	sub	objptr, ##42196
043bc     01 2C 0E F2 | 	cmp	local04, #1 wz
043c0     54 00 90 5D |  if_ne	jmp	#LR__0211
043c4     01 26 56 F2 | 	cmps	local01, #1 wc
043c8     4C 00 90 CD |  if_b	jmp	#LR__0211
043cc     00 12 06 F6 | 	mov	arg01, #0
043d0     C8 81 B2 FD | 	call	#__system___getiolock_0602
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     1C 25 B2 FD | 	call	#__system___lockmem
043dc     37 00 00 FF 
043e0     20 E4 05 F1 | 	add	objptr, ##28192
043e4     F2 14 02 FB | 	rdlong	arg02, objptr
043e8     37 00 00 FF 
043ec     20 E4 85 F1 | 	sub	objptr, ##28192
043f0     00 12 06 F6 | 	mov	arg01, #0
043f4     00 16 06 F6 | 	mov	arg03, #0
043f8     F4 31 B2 FD | 	call	#__system___basic_print_string
043fc     00 12 06 F6 | 	mov	arg01, #0
04400     0A 14 06 F6 | 	mov	arg02, #10
04404     00 16 06 F6 | 	mov	arg03, #0
04408     8C 31 B2 FD | 	call	#__system___basic_print_char
0440c     00 12 06 F6 | 	mov	arg01, #0
04410     88 81 B2 FD | 	call	#__system___getiolock_0602
04414     FD 00 68 FC | 	wrlong	#0, result1
04418                 | LR__0211
04418                 | LR__0212
04418     A7 F0 03 F6 | 	mov	ptra, fp
0441c     B2 00 A0 FD | 	call	#popregs_
04420                 | _interpret_ret
04420     2D 00 64 FD | 	ret
04424                 | 
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '
04424                 | ' '                          END OF TOKENIZER MAIN CODE
04424                 | ' '
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' ' Check if the part is an operator, return a token or 0 if not found
04424                 | ' 
04424                 | ' function isoperator(s as string) as ubyte
04424                 | _isoperator
04424     01 4A 05 F6 | 	mov	COUNT_, #1
04428     A8 00 A0 FD | 	call	#pushregs_
0442c                 | ' 
0442c                 | ' select case s
0442c     09 27 02 F6 | 	mov	local01, arg01
04430     B2 01 00 FF 
04434     9E 15 06 F6 | 	mov	arg02, ##@LR__5487
04438     13 13 02 F6 | 	mov	arg01, local01
0443c     E0 24 B2 FD | 	call	#__system___string_cmp
04440     00 FA 0D F2 | 	cmp	result1, #0 wz
04444     FC 01 90 AD |  if_e	jmp	#LR__0220
04448     B2 01 00 FF 
0444c     A0 15 06 F6 | 	mov	arg02, ##@LR__5488
04450     13 13 02 F6 | 	mov	arg01, local01
04454     C8 24 B2 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     EC 01 90 AD |  if_e	jmp	#LR__0221
04460     B2 01 00 FF 
04464     A2 15 06 F6 | 	mov	arg02, ##@LR__5489
04468     13 13 02 F6 | 	mov	arg01, local01
0446c     B0 24 B2 FD | 	call	#__system___string_cmp
04470     00 FA 0D F2 | 	cmp	result1, #0 wz
04474     DC 01 90 AD |  if_e	jmp	#LR__0222
04478     B2 01 00 FF 
0447c     A5 15 06 F6 | 	mov	arg02, ##@LR__5490
04480     13 13 02 F6 | 	mov	arg01, local01
04484     98 24 B2 FD | 	call	#__system___string_cmp
04488     00 FA 0D F2 | 	cmp	result1, #0 wz
0448c     CC 01 90 AD |  if_e	jmp	#LR__0223
04490     B2 01 00 FF 
04494     A9 15 06 F6 | 	mov	arg02, ##@LR__5491
04498     13 13 02 F6 | 	mov	arg01, local01
0449c     80 24 B2 FD | 	call	#__system___string_cmp
044a0     00 FA 0D F2 | 	cmp	result1, #0 wz
044a4     BC 01 90 AD |  if_e	jmp	#LR__0224
044a8     B2 01 00 FF 
044ac     AB 15 06 F6 | 	mov	arg02, ##@LR__5492
044b0     13 13 02 F6 | 	mov	arg01, local01
044b4     68 24 B2 FD | 	call	#__system___string_cmp
044b8     00 FA 0D F2 | 	cmp	result1, #0 wz
044bc     AC 01 90 AD |  if_e	jmp	#LR__0225
044c0     B2 01 00 FF 
044c4     AD 15 06 F6 | 	mov	arg02, ##@LR__5493
044c8     13 13 02 F6 | 	mov	arg01, local01
044cc     50 24 B2 FD | 	call	#__system___string_cmp
044d0     00 FA 0D F2 | 	cmp	result1, #0 wz
044d4     9C 01 90 AD |  if_e	jmp	#LR__0226
044d8     B2 01 00 FF 
044dc     B1 15 06 F6 | 	mov	arg02, ##@LR__5494
044e0     13 13 02 F6 | 	mov	arg01, local01
044e4     38 24 B2 FD | 	call	#__system___string_cmp
044e8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ec     8C 01 90 AD |  if_e	jmp	#LR__0227
044f0     B2 01 00 FF 
044f4     B5 15 06 F6 | 	mov	arg02, ##@LR__5495
044f8     13 13 02 F6 | 	mov	arg01, local01
044fc     20 24 B2 FD | 	call	#__system___string_cmp
04500     00 FA 0D F2 | 	cmp	result1, #0 wz
04504     7C 01 90 AD |  if_e	jmp	#LR__0228
04508     B2 01 00 FF 
0450c     B9 15 06 F6 | 	mov	arg02, ##@LR__5496
04510     13 13 02 F6 | 	mov	arg01, local01
04514     08 24 B2 FD | 	call	#__system___string_cmp
04518     00 FA 0D F2 | 	cmp	result1, #0 wz
0451c     6C 01 90 AD |  if_e	jmp	#LR__0229
04520     B2 01 00 FF 
04524     BD 15 06 F6 | 	mov	arg02, ##@LR__5497
04528     13 13 02 F6 | 	mov	arg01, local01
0452c     F0 23 B2 FD | 	call	#__system___string_cmp
04530     00 FA 0D F2 | 	cmp	result1, #0 wz
04534     5C 01 90 AD |  if_e	jmp	#LR__0230
04538     B2 01 00 FF 
0453c     C1 15 06 F6 | 	mov	arg02, ##@LR__5498
04540     13 13 02 F6 | 	mov	arg01, local01
04544     D8 23 B2 FD | 	call	#__system___string_cmp
04548     00 FA 0D F2 | 	cmp	result1, #0 wz
0454c     4C 01 90 AD |  if_e	jmp	#LR__0231
04550     B2 01 00 FF 
04554     C3 15 06 F6 | 	mov	arg02, ##@LR__5499
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     C0 23 B2 FD | 	call	#__system___string_cmp
04560     00 FA 0D F2 | 	cmp	result1, #0 wz
04564     3C 01 90 AD |  if_e	jmp	#LR__0232
04568     B2 01 00 FF 
0456c     C7 15 06 F6 | 	mov	arg02, ##@LR__5500
04570     13 13 02 F6 | 	mov	arg01, local01
04574     A8 23 B2 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     2C 01 90 AD |  if_e	jmp	#LR__0233
04580     B2 01 00 FF 
04584     C9 15 06 F6 | 	mov	arg02, ##@LR__5501
04588     13 13 02 F6 | 	mov	arg01, local01
0458c     90 23 B2 FD | 	call	#__system___string_cmp
04590     00 FA 0D F2 | 	cmp	result1, #0 wz
04594     1C 01 90 AD |  if_e	jmp	#LR__0234
04598     B2 01 00 FF 
0459c     CB 15 06 F6 | 	mov	arg02, ##@LR__5502
045a0     13 13 02 F6 | 	mov	arg01, local01
045a4     78 23 B2 FD | 	call	#__system___string_cmp
045a8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ac     0C 01 90 AD |  if_e	jmp	#LR__0235
045b0     B2 01 00 FF 
045b4     CE 15 06 F6 | 	mov	arg02, ##@LR__5503
045b8     13 13 02 F6 | 	mov	arg01, local01
045bc     60 23 B2 FD | 	call	#__system___string_cmp
045c0     00 FA 0D F2 | 	cmp	result1, #0 wz
045c4     FC 00 90 AD |  if_e	jmp	#LR__0236
045c8     B2 01 00 FF 
045cc     D1 15 06 F6 | 	mov	arg02, ##@LR__5504
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     48 23 B2 FD | 	call	#__system___string_cmp
045d8     00 FA 0D F2 | 	cmp	result1, #0 wz
045dc     EC 00 90 AD |  if_e	jmp	#LR__0237
045e0     B2 01 00 FF 
045e4     D3 15 06 F6 | 	mov	arg02, ##@LR__5505
045e8     13 13 02 F6 | 	mov	arg01, local01
045ec     30 23 B2 FD | 	call	#__system___string_cmp
045f0     00 FA 0D F2 | 	cmp	result1, #0 wz
045f4     DC 00 90 AD |  if_e	jmp	#LR__0238
045f8     B2 01 00 FF 
045fc     D5 15 06 F6 | 	mov	arg02, ##@LR__5506
04600     13 13 02 F6 | 	mov	arg01, local01
04604     18 23 B2 FD | 	call	#__system___string_cmp
04608     00 FA 0D F2 | 	cmp	result1, #0 wz
0460c     CC 00 90 AD |  if_e	jmp	#LR__0239
04610     B2 01 00 FF 
04614     D8 15 06 F6 | 	mov	arg02, ##@LR__5507
04618     13 13 02 F6 | 	mov	arg01, local01
0461c     00 23 B2 FD | 	call	#__system___string_cmp
04620     00 FA 0D F2 | 	cmp	result1, #0 wz
04624     BC 00 90 AD |  if_e	jmp	#LR__0240
04628     B2 01 00 FF 
0462c     DB 15 06 F6 | 	mov	arg02, ##@LR__5508
04630     13 13 02 F6 | 	mov	arg01, local01
04634     E8 22 B2 FD | 	call	#__system___string_cmp
04638     00 FA 0D F2 | 	cmp	result1, #0 wz
0463c     AC 00 90 AD |  if_e	jmp	#LR__0241
04640     B0 00 90 FD | 	jmp	#LR__0242
04644                 | LR__0220
04644     01 FA 05 F6 | 	mov	result1, #1
04648     AC 00 90 FD | 	jmp	#LR__0243
0464c                 | LR__0221
0464c     02 FA 05 F6 | 	mov	result1, #2
04650     A4 00 90 FD | 	jmp	#LR__0243
04654                 | LR__0222
04654     03 FA 05 F6 | 	mov	result1, #3
04658     9C 00 90 FD | 	jmp	#LR__0243
0465c                 | LR__0223
0465c     04 FA 05 F6 | 	mov	result1, #4
04660     94 00 90 FD | 	jmp	#LR__0243
04664                 | LR__0224
04664     05 FA 05 F6 | 	mov	result1, #5
04668     8C 00 90 FD | 	jmp	#LR__0243
0466c                 | LR__0225
0466c     06 FA 05 F6 | 	mov	result1, #6
04670     84 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0226
04674     07 FA 05 F6 | 	mov	result1, #7
04678     7C 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0227
0467c     08 FA 05 F6 | 	mov	result1, #8
04680     74 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0228
04684     09 FA 05 F6 | 	mov	result1, #9
04688     6C 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0229
0468c     0A FA 05 F6 | 	mov	result1, #10
04690     64 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0230
04694     0B FA 05 F6 | 	mov	result1, #11
04698     5C 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0231
0469c     0C FA 05 F6 | 	mov	result1, #12
046a0     54 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0232
046a4     0D FA 05 F6 | 	mov	result1, #13
046a8     4C 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0233
046ac     0E FA 05 F6 | 	mov	result1, #14
046b0     44 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0234
046b4     1B FA 05 F6 | 	mov	result1, #27
046b8     3C 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0235
046bc     27 FA 05 F6 | 	mov	result1, #39
046c0     34 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0236
046c4     26 FA 05 F6 | 	mov	result1, #38
046c8     2C 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0237
046cc     10 FA 05 F6 | 	mov	result1, #16
046d0     24 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0238
046d4     0F FA 05 F6 | 	mov	result1, #15
046d8     1C 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0239
046dc     2A FA 05 F6 | 	mov	result1, #42
046e0     14 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0240
046e4     28 FA 05 F6 | 	mov	result1, #40
046e8     0C 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0241
046ec     29 FA 05 F6 | 	mov	result1, #41
046f0     04 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0242
046f4     00 FA 05 F6 | 	mov	result1, #0
046f8                 | LR__0243
046f8     A7 F0 03 F6 | 	mov	ptra, fp
046fc     B2 00 A0 FD | 	call	#popregs_
04700                 | _isoperator_ret
04700     2D 00 64 FD | 	ret
04704                 | 
04704                 | ' 
04704                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04704                 | ' 
04704                 | ' function ischannel(s as string) as ulong
04704                 | _ischannel
04704     02 4A 05 F6 | 	mov	COUNT_, #2
04708     A8 00 A0 FD | 	call	#pushregs_
0470c                 | ' if left$(s,1)<>"#" then return 0
0470c     09 27 02 F6 | 	mov	local01, arg01
04710     01 14 06 F6 | 	mov	arg02, #1
04714     60 42 B2 FD | 	call	#__system__Left_S
04718     FD 12 02 F6 | 	mov	arg01, result1
0471c     B2 01 00 FF 
04720     DE 15 06 F6 | 	mov	arg02, ##@LR__5509
04724     F8 21 B2 FD | 	call	#__system___string_cmp
04728     00 FA 0D F2 | 	cmp	result1, #0 wz
0472c     00 FA 05 56 |  if_ne	mov	result1, #0
04730     AC 00 90 5D |  if_ne	jmp	#LR__0254
04734                 | ' if len(s)<>2 then return 0
04734     13 13 02 F6 | 	mov	arg01, local01
04738     09 29 02 F6 | 	mov	local02, arg01
0473c     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04740                 | LR__0250
04740     14 FB C9 FA | 	rdbyte	result1, local02 wz
04744     01 28 06 51 |  if_ne	add	local02, #1
04748     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
0474c                 | LR__0251
0474c     09 29 82 F1 | 	sub	local02, arg01
04750     14 FB 01 F6 | 	mov	result1, local02
04754     02 FA 0D F2 | 	cmp	result1, #2 wz
04758     00 FA 05 56 |  if_ne	mov	result1, #0
0475c     80 00 90 5D |  if_ne	jmp	#LR__0254
04760                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04760     13 13 02 F6 | 	mov	arg01, local01
04764     01 14 06 F6 | 	mov	arg02, #1
04768     94 42 B2 FD | 	call	#__system__Right_S
0476c     FD 12 02 F6 | 	mov	arg01, result1
04770     B2 01 00 FF 
04774     E0 15 06 F6 | 	mov	arg02, ##@LR__5510
04778     A4 21 B2 FD | 	call	#__system___string_cmp
0477c     00 FA 55 F2 | 	cmps	result1, #0 wc
04780     24 00 90 CD |  if_b	jmp	#LR__0252
04784     13 13 02 F6 | 	mov	arg01, local01
04788     01 14 06 F6 | 	mov	arg02, #1
0478c     70 42 B2 FD | 	call	#__system__Right_S
04790     FD 12 02 F6 | 	mov	arg01, result1
04794     B2 01 00 FF 
04798     E2 15 06 F6 | 	mov	arg02, ##@LR__5511
0479c     80 21 B2 FD | 	call	#__system___string_cmp
047a0     01 FA 55 F2 | 	cmps	result1, #1 wc
047a4     08 00 90 CD |  if_b	jmp	#LR__0253
047a8                 | LR__0252
047a8     00 FA 05 F6 | 	mov	result1, #0
047ac     30 00 90 FD | 	jmp	#LR__0254
047b0                 | LR__0253
047b0                 | ' return token_channel+val(right$(s,1))
047b0     13 13 02 F6 | 	mov	arg01, local01
047b4     01 14 06 F6 | 	mov	arg02, #1
047b8     44 42 B2 FD | 	call	#__system__Right_S
047bc     FD 12 02 F6 | 	mov	arg01, result1
047c0     BC 57 B2 FD | 	call	#__system____builtin_atof
047c4     FD 14 02 F6 | 	mov	arg02, result1
047c8     00 18 21 FF 
047cc     00 12 06 F6 | 	mov	arg01, ##1110441984
047d0     D0 4B B2 FD | 	call	#__system___float_add
047d4     FD 12 02 F6 | 	mov	arg01, result1
047d8     00 14 06 F6 | 	mov	arg02, #0
047dc     5C 54 B2 FD | 	call	#__system___float_tointeger
047e0                 | LR__0254
047e0     A7 F0 03 F6 | 	mov	ptra, fp
047e4     B2 00 A0 FD | 	call	#popregs_
047e8                 | _ischannel_ret
047e8     2D 00 64 FD | 	ret
047ec                 | 
047ec                 | ' 
047ec                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
047ec                 | ' ' todo: add spin2/pasm constants for pin control
047ec                 | ' 
047ec                 | ' function isconstant(s as string) as integer
047ec                 | _isconstant
047ec     01 4A 05 F6 | 	mov	COUNT_, #1
047f0     A8 00 A0 FD | 	call	#pushregs_
047f4                 | ' 
047f4                 | ' select case s
047f4     09 27 02 F6 | 	mov	local01, arg01
047f8     B2 01 00 FF 
047fc     E4 15 06 F6 | 	mov	arg02, ##@LR__5512
04800     13 13 02 F6 | 	mov	arg01, local01
04804     18 21 B2 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     34 00 90 AD |  if_e	jmp	#LR__0260
04810     B2 01 00 FF 
04814     EA 15 06 F6 | 	mov	arg02, ##@LR__5513
04818     13 13 02 F6 | 	mov	arg01, local01
0481c     00 21 B2 FD | 	call	#__system___string_cmp
04820     00 FA 0D F2 | 	cmp	result1, #0 wz
04824     24 00 90 AD |  if_e	jmp	#LR__0261
04828     B2 01 00 FF 
0482c     F1 15 06 F6 | 	mov	arg02, ##@LR__5514
04830     13 13 02 F6 | 	mov	arg01, local01
04834     E8 20 B2 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     14 00 90 AD |  if_e	jmp	#LR__0262
04840     18 00 90 FD | 	jmp	#LR__0263
04844                 | LR__0260
04844     01 FA 05 F6 | 	mov	result1, #1
04848     14 00 90 FD | 	jmp	#LR__0264
0484c                 | LR__0261
0484c     02 FA 05 F6 | 	mov	result1, #2
04850     0C 00 90 FD | 	jmp	#LR__0264
04854                 | LR__0262
04854     04 FA 05 F6 | 	mov	result1, #4
04858     04 00 90 FD | 	jmp	#LR__0264
0485c                 | LR__0263
0485c     00 FA 05 F6 | 	mov	result1, #0
04860                 | LR__0264
04860     A7 F0 03 F6 | 	mov	ptra, fp
04864     B2 00 A0 FD | 	call	#popregs_
04868                 | _isconstant_ret
04868     2D 00 64 FD | 	ret
0486c                 | 
0486c                 | ' 
0486c                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
0486c                 | ' 
0486c                 | ' function isnotename(s as string) as ulong
0486c                 | _isnotename
0486c     07 4A 05 F6 | 	mov	COUNT_, #7
04870     A8 00 A0 FD | 	call	#pushregs_
04874                 | ' if left$(s,1)<>"#" then return 0
04874     09 27 02 F6 | 	mov	local01, arg01
04878     01 14 06 F6 | 	mov	arg02, #1
0487c     F8 40 B2 FD | 	call	#__system__Left_S
04880     FD 12 02 F6 | 	mov	arg01, result1
04884     B2 01 00 FF 
04888     F9 15 06 F6 | 	mov	arg02, ##@LR__5515
0488c     90 20 B2 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     00 FA 05 56 |  if_ne	mov	result1, #0
04898     30 03 90 5D |  if_ne	jmp	#LR__0293
0489c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0489c     13 13 02 F6 | 	mov	arg01, local01
048a0     03 14 06 F6 | 	mov	arg02, #3
048a4     01 16 06 F6 | 	mov	arg03, #1
048a8     E4 41 B2 FD | 	call	#__system__Mid_S
048ac     FD 12 02 F6 | 	mov	arg01, result1
048b0     B2 01 00 FF 
048b4     FB 15 06 F6 | 	mov	arg02, ##@LR__5516
048b8     64 20 B2 FD | 	call	#__system___string_cmp
048bc     00 FA 0D F2 | 	cmp	result1, #0 wz
048c0     18 00 90 5D |  if_ne	jmp	#LR__0270
048c4     13 13 02 F6 | 	mov	arg01, local01
048c8     02 14 06 F6 | 	mov	arg02, #2
048cc     02 16 06 F6 | 	mov	arg03, #2
048d0     BC 41 B2 FD | 	call	#__system__Mid_S
048d4     FD 28 02 F6 | 	mov	local02, result1
048d8     14 00 90 FD | 	jmp	#LR__0271
048dc                 | LR__0270
048dc     13 13 02 F6 | 	mov	arg01, local01
048e0     02 14 06 F6 | 	mov	arg02, #2
048e4     01 16 06 F6 | 	mov	arg03, #1
048e8     A4 41 B2 FD | 	call	#__system__Mid_S
048ec     FD 28 02 F6 | 	mov	local02, result1
048f0                 | LR__0271
048f0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     09 2B 02 F6 | 	mov	local03, arg01
048f8     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
048fc                 | LR__0272
048fc     15 FB C9 FA | 	rdbyte	result1, local03 wz
04900     01 2A 06 51 |  if_ne	add	local03, #1
04904     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04908                 | LR__0273
04908     09 2B 82 F1 | 	sub	local03, arg01
0490c     15 15 02 F6 | 	mov	arg02, local03
04910     01 14 86 F1 | 	sub	arg02, #1
04914     13 13 02 F6 | 	mov	arg01, local01
04918     01 16 06 F6 | 	mov	arg03, #1
0491c     70 41 B2 FD | 	call	#__system__Mid_S
04920     FD 12 02 F6 | 	mov	arg01, result1
04924     B2 01 00 FF 
04928     FD 15 06 F6 | 	mov	arg02, ##@LR__5517
0492c     F0 1F B2 FD | 	call	#__system___string_cmp
04930     00 FA 0D F2 | 	cmp	result1, #0 wz
04934     28 00 90 AD |  if_e	jmp	#LR__0274
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     01 14 06 F6 | 	mov	arg02, #1
04940     BC 40 B2 FD | 	call	#__system__Right_S
04944     FD 12 02 F6 | 	mov	arg01, result1
04948     34 56 B2 FD | 	call	#__system____builtin_atof
0494c     FD 12 02 F6 | 	mov	arg01, result1
04950     00 14 06 F6 | 	mov	arg02, #0
04954     E4 52 B2 FD | 	call	#__system___float_tointeger
04958     FD 2C 02 F6 | 	mov	local04, result1
0495c     34 00 90 FD | 	jmp	#LR__0275
04960                 | LR__0274
04960     13 13 02 F6 | 	mov	arg01, local01
04964     01 14 06 F6 | 	mov	arg02, #1
04968     94 40 B2 FD | 	call	#__system__Right_S
0496c     FD 12 02 F6 | 	mov	arg01, result1
04970     0C 56 B2 FD | 	call	#__system____builtin_atof
04974     FD 14 02 F6 | 	mov	arg02, result1
04978     00 C0 5F FF 
0497c     00 12 06 F6 | 	mov	arg01, ##-1082130432
04980     F0 4D B2 FD | 	call	#__system___float_mul
04984     FD 12 02 F6 | 	mov	arg01, result1
04988     00 14 06 F6 | 	mov	arg02, #0
0498c     AC 52 B2 FD | 	call	#__system___float_tointeger
04990     FD 2C 02 F6 | 	mov	local04, result1
04994                 | LR__0275
04994                 | ' 
04994                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04994     00 2C 0E F2 | 	cmp	local04, #0 wz
04998     24 00 90 5D |  if_ne	jmp	#LR__0276
0499c     13 13 02 F6 | 	mov	arg01, local01
049a0     01 14 06 F6 | 	mov	arg02, #1
049a4     58 40 B2 FD | 	call	#__system__Right_S
049a8     FD 12 02 F6 | 	mov	arg01, result1
049ac     B2 01 00 FF 
049b0     FF 15 06 F6 | 	mov	arg02, ##@LR__5518
049b4     68 1F B2 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     04 2C 06 56 |  if_ne	mov	local04, #4
049c0                 | LR__0276
049c0                 | ' 
049c0                 | ' select case s1
049c0     14 2F 02 F6 | 	mov	local05, local02
049c4     B3 01 00 FF 
049c8     01 14 06 F6 | 	mov	arg02, ##@LR__5519
049cc     17 13 02 F6 | 	mov	arg01, local05
049d0     4C 1F B2 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     24 01 90 AD |  if_e	jmp	#LR__0277
049dc     B3 01 00 FF 
049e0     03 14 06 F6 | 	mov	arg02, ##@LR__5520
049e4     17 13 02 F6 | 	mov	arg01, local05
049e8     34 1F B2 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     18 01 90 AD |  if_e	jmp	#LR__0278
049f4     B3 01 00 FF 
049f8     06 14 06 F6 | 	mov	arg02, ##@LR__5521
049fc     17 13 02 F6 | 	mov	arg01, local05
04a00     1C 1F B2 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     0C 01 90 AD |  if_e	jmp	#LR__0279
04a0c     B3 01 00 FF 
04a10     08 14 06 F6 | 	mov	arg02, ##@LR__5522
04a14     17 13 02 F6 | 	mov	arg01, local05
04a18     04 1F B2 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     00 01 90 AD |  if_e	jmp	#LR__0280
04a24     B3 01 00 FF 
04a28     0B 14 06 F6 | 	mov	arg02, ##@LR__5523
04a2c     17 13 02 F6 | 	mov	arg01, local05
04a30     EC 1E B2 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     F4 00 90 AD |  if_e	jmp	#LR__0281
04a3c     B3 01 00 FF 
04a40     0D 14 06 F6 | 	mov	arg02, ##@LR__5524
04a44     17 13 02 F6 | 	mov	arg01, local05
04a48     D4 1E B2 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     E8 00 90 AD |  if_e	jmp	#LR__0282
04a54     B3 01 00 FF 
04a58     0F 14 06 F6 | 	mov	arg02, ##@LR__5525
04a5c     17 13 02 F6 | 	mov	arg01, local05
04a60     BC 1E B2 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     DC 00 90 AD |  if_e	jmp	#LR__0283
04a6c     B3 01 00 FF 
04a70     12 14 06 F6 | 	mov	arg02, ##@LR__5526
04a74     17 13 02 F6 | 	mov	arg01, local05
04a78     A4 1E B2 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     D0 00 90 AD |  if_e	jmp	#LR__0284
04a84     B3 01 00 FF 
04a88     14 14 06 F6 | 	mov	arg02, ##@LR__5527
04a8c     17 13 02 F6 | 	mov	arg01, local05
04a90     8C 1E B2 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     C4 00 90 AD |  if_e	jmp	#LR__0285
04a9c     B3 01 00 FF 
04aa0     17 14 06 F6 | 	mov	arg02, ##@LR__5528
04aa4     17 13 02 F6 | 	mov	arg01, local05
04aa8     74 1E B2 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     B8 00 90 AD |  if_e	jmp	#LR__0286
04ab4     B3 01 00 FF 
04ab8     19 14 06 F6 | 	mov	arg02, ##@LR__5529
04abc     17 13 02 F6 | 	mov	arg01, local05
04ac0     5C 1E B2 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     AC 00 90 AD |  if_e	jmp	#LR__0287
04acc     B3 01 00 FF 
04ad0     1C 14 06 F6 | 	mov	arg02, ##@LR__5530
04ad4     17 13 02 F6 | 	mov	arg01, local05
04ad8     44 1E B2 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     A0 00 90 AD |  if_e	jmp	#LR__0288
04ae4     B3 01 00 FF 
04ae8     1E 14 06 F6 | 	mov	arg02, ##@LR__5531
04aec     17 13 02 F6 | 	mov	arg01, local05
04af0     2C 1E B2 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     94 00 90 AD |  if_e	jmp	#LR__0289
04afc     9C 00 90 FD | 	jmp	#LR__0290
04b00                 | LR__0277
04b00     01 00 00 FF 
04b04     00 31 06 F6 | 	mov	local06, ##768
04b08     98 00 90 FD | 	jmp	#LR__0291
04b0c                 | LR__0278
04b0c     01 00 00 FF 
04b10     01 31 06 F6 | 	mov	local06, ##769
04b14     8C 00 90 FD | 	jmp	#LR__0291
04b18                 | LR__0279
04b18     01 00 00 FF 
04b1c     02 31 06 F6 | 	mov	local06, ##770
04b20     80 00 90 FD | 	jmp	#LR__0291
04b24                 | LR__0280
04b24     01 00 00 FF 
04b28     03 31 06 F6 | 	mov	local06, ##771
04b2c     74 00 90 FD | 	jmp	#LR__0291
04b30                 | LR__0281
04b30     01 00 00 FF 
04b34     04 31 06 F6 | 	mov	local06, ##772
04b38     68 00 90 FD | 	jmp	#LR__0291
04b3c                 | LR__0282
04b3c     01 00 00 FF 
04b40     05 31 06 F6 | 	mov	local06, ##773
04b44     5C 00 90 FD | 	jmp	#LR__0291
04b48                 | LR__0283
04b48     01 00 00 FF 
04b4c     06 31 06 F6 | 	mov	local06, ##774
04b50     50 00 90 FD | 	jmp	#LR__0291
04b54                 | LR__0284
04b54     01 00 00 FF 
04b58     07 31 06 F6 | 	mov	local06, ##775
04b5c     44 00 90 FD | 	jmp	#LR__0291
04b60                 | LR__0285
04b60     01 00 00 FF 
04b64     08 31 06 F6 | 	mov	local06, ##776
04b68     38 00 90 FD | 	jmp	#LR__0291
04b6c                 | LR__0286
04b6c     01 00 00 FF 
04b70     09 31 06 F6 | 	mov	local06, ##777
04b74     2C 00 90 FD | 	jmp	#LR__0291
04b78                 | LR__0287
04b78     01 00 00 FF 
04b7c     0A 31 06 F6 | 	mov	local06, ##778
04b80     20 00 90 FD | 	jmp	#LR__0291
04b84                 | LR__0288
04b84     01 00 00 FF 
04b88     0B 31 06 F6 | 	mov	local06, ##779
04b8c     14 00 90 FD | 	jmp	#LR__0291
04b90                 | LR__0289
04b90     01 00 00 FF 
04b94     0B 31 06 F6 | 	mov	local06, ##779
04b98     08 00 90 FD | 	jmp	#LR__0291
04b9c                 | LR__0290
04b9c     00 FA 05 F6 | 	mov	result1, #0
04ba0     28 00 90 FD | 	jmp	#LR__0293
04ba4                 | LR__0291
04ba4                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04ba4     FF FF 7F FF 
04ba8     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04bac     18 00 90 CD |  if_b	jmp	#LR__0292
04bb0     0A 2C 56 F2 | 	cmps	local04, #10 wc
04bb4     16 33 02 C6 |  if_b	mov	local07, local04
04bb8     01 32 66 C0 |  if_b	shl	local07, #1
04bbc     16 33 02 C1 |  if_b	add	local07, local04
04bc0     02 32 66 C0 |  if_b	shl	local07, #2
04bc4     19 31 02 C1 |  if_b	add	local06, local07
04bc8                 | LR__0292
04bc8                 | ' return token
04bc8     18 FB 01 F6 | 	mov	result1, local06
04bcc                 | LR__0293
04bcc     A7 F0 03 F6 | 	mov	ptra, fp
04bd0     B2 00 A0 FD | 	call	#popregs_
04bd4                 | _isnotename_ret
04bd4     2D 00 64 FD | 	ret
04bd8                 | 
04bd8                 | ' 
04bd8                 | ' ' Check if the part is a separator, return a token or 0 if not found
04bd8                 | ' 
04bd8                 | ' function isseparator(s as string) as ubyte
04bd8                 | _isseparator
04bd8     01 4A 05 F6 | 	mov	COUNT_, #1
04bdc     A8 00 A0 FD | 	call	#pushregs_
04be0                 | ' 
04be0                 | ' select case s
04be0     09 27 02 F6 | 	mov	local01, arg01
04be4     B3 01 00 FF 
04be8     20 14 06 F6 | 	mov	arg02, ##@LR__5532
04bec     13 13 02 F6 | 	mov	arg01, local01
04bf0     2C 1D B2 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     54 01 90 AD |  if_e	jmp	#LR__0300
04bfc     B3 01 00 FF 
04c00     22 14 06 F6 | 	mov	arg02, ##@LR__5533
04c04     13 13 02 F6 | 	mov	arg01, local01
04c08     14 1D B2 FD | 	call	#__system___string_cmp
04c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c10     44 01 90 AD |  if_e	jmp	#LR__0301
04c14     B3 01 00 FF 
04c18     24 14 06 F6 | 	mov	arg02, ##@LR__5534
04c1c     13 13 02 F6 | 	mov	arg01, local01
04c20     FC 1C B2 FD | 	call	#__system___string_cmp
04c24     00 FA 0D F2 | 	cmp	result1, #0 wz
04c28     34 01 90 AD |  if_e	jmp	#LR__0302
04c2c     B3 01 00 FF 
04c30     26 14 06 F6 | 	mov	arg02, ##@LR__5535
04c34     13 13 02 F6 | 	mov	arg01, local01
04c38     E4 1C B2 FD | 	call	#__system___string_cmp
04c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c40     24 01 90 AD |  if_e	jmp	#LR__0303
04c44     B3 01 00 FF 
04c48     28 14 06 F6 | 	mov	arg02, ##@LR__5536
04c4c     13 13 02 F6 | 	mov	arg01, local01
04c50     CC 1C B2 FD | 	call	#__system___string_cmp
04c54     00 FA 0D F2 | 	cmp	result1, #0 wz
04c58     14 01 90 AD |  if_e	jmp	#LR__0304
04c5c     B3 01 00 FF 
04c60     2A 14 06 F6 | 	mov	arg02, ##@LR__5537
04c64     13 13 02 F6 | 	mov	arg01, local01
04c68     B4 1C B2 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     04 01 90 AD |  if_e	jmp	#LR__0305
04c74     B3 01 00 FF 
04c78     2C 14 06 F6 | 	mov	arg02, ##@LR__5538
04c7c     13 13 02 F6 | 	mov	arg01, local01
04c80     9C 1C B2 FD | 	call	#__system___string_cmp
04c84     00 FA 0D F2 | 	cmp	result1, #0 wz
04c88     F4 00 90 AD |  if_e	jmp	#LR__0306
04c8c     B3 01 00 FF 
04c90     2E 14 06 F6 | 	mov	arg02, ##@LR__5539
04c94     13 13 02 F6 | 	mov	arg01, local01
04c98     84 1C B2 FD | 	call	#__system___string_cmp
04c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca0     E4 00 90 AD |  if_e	jmp	#LR__0307
04ca4     B3 01 00 FF 
04ca8     30 14 06 F6 | 	mov	arg02, ##@LR__5540
04cac     13 13 02 F6 | 	mov	arg01, local01
04cb0     6C 1C B2 FD | 	call	#__system___string_cmp
04cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb8     D4 00 90 AD |  if_e	jmp	#LR__0308
04cbc     B3 01 00 FF 
04cc0     32 14 06 F6 | 	mov	arg02, ##@LR__5541
04cc4     13 13 02 F6 | 	mov	arg01, local01
04cc8     54 1C B2 FD | 	call	#__system___string_cmp
04ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd0     C4 00 90 AD |  if_e	jmp	#LR__0309
04cd4     B3 01 00 FF 
04cd8     34 14 06 F6 | 	mov	arg02, ##@LR__5542
04cdc     13 13 02 F6 | 	mov	arg01, local01
04ce0     3C 1C B2 FD | 	call	#__system___string_cmp
04ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce8     B4 00 90 AD |  if_e	jmp	#LR__0310
04cec     B3 01 00 FF 
04cf0     36 14 06 F6 | 	mov	arg02, ##@LR__5543
04cf4     13 13 02 F6 | 	mov	arg01, local01
04cf8     24 1C B2 FD | 	call	#__system___string_cmp
04cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04d00     A4 00 90 AD |  if_e	jmp	#LR__0311
04d04     B3 01 00 FF 
04d08     38 14 06 F6 | 	mov	arg02, ##@LR__5544
04d0c     13 13 02 F6 | 	mov	arg01, local01
04d10     0C 1C B2 FD | 	call	#__system___string_cmp
04d14     00 FA 0D F2 | 	cmp	result1, #0 wz
04d18     94 00 90 AD |  if_e	jmp	#LR__0312
04d1c     B3 01 00 FF 
04d20     3A 14 06 F6 | 	mov	arg02, ##@LR__5545
04d24     13 13 02 F6 | 	mov	arg01, local01
04d28     F4 1B B2 FD | 	call	#__system___string_cmp
04d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d30     84 00 90 AD |  if_e	jmp	#LR__0313
04d34     B3 01 00 FF 
04d38     3C 14 06 F6 | 	mov	arg02, ##@LR__5546
04d3c     13 13 02 F6 | 	mov	arg01, local01
04d40     DC 1B B2 FD | 	call	#__system___string_cmp
04d44     00 FA 0D F2 | 	cmp	result1, #0 wz
04d48     74 00 90 AD |  if_e	jmp	#LR__0314
04d4c     78 00 90 FD | 	jmp	#LR__0315
04d50                 | LR__0300
04d50     01 FA 05 F6 | 	mov	result1, #1
04d54     74 00 90 FD | 	jmp	#LR__0316
04d58                 | LR__0301
04d58     02 FA 05 F6 | 	mov	result1, #2
04d5c     6C 00 90 FD | 	jmp	#LR__0316
04d60                 | LR__0302
04d60     1B FA 05 F6 | 	mov	result1, #27
04d64     64 00 90 FD | 	jmp	#LR__0316
04d68                 | LR__0303
04d68     11 FA 05 F6 | 	mov	result1, #17
04d6c     5C 00 90 FD | 	jmp	#LR__0316
04d70                 | LR__0304
04d70     05 FA 05 F6 | 	mov	result1, #5
04d74     54 00 90 FD | 	jmp	#LR__0316
04d78                 | LR__0305
04d78     06 FA 05 F6 | 	mov	result1, #6
04d7c     4C 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0306
04d80     12 FA 05 F6 | 	mov	result1, #18
04d84     44 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0307
04d88     13 FA 05 F6 | 	mov	result1, #19
04d8c     3C 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0308
04d90     0C FA 05 F6 | 	mov	result1, #12
04d94     34 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0309
04d98     14 FA 05 F6 | 	mov	result1, #20
04d9c     2C 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0310
04da0     15 FA 05 F6 | 	mov	result1, #21
04da4     24 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0311
04da8     16 FA 05 F6 | 	mov	result1, #22
04dac     1C 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0312
04db0     FF FB 05 F6 | 	mov	result1, #511
04db4     14 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0313
04db8     0F FA 05 F6 | 	mov	result1, #15
04dbc     0C 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0314
04dc0     10 FA 05 F6 | 	mov	result1, #16
04dc4     04 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0315
04dc8     00 FA 05 F6 | 	mov	result1, #0
04dcc                 | LR__0316
04dcc     A7 F0 03 F6 | 	mov	ptra, fp
04dd0     B2 00 A0 FD | 	call	#popregs_
04dd4                 | _isseparator_ret
04dd4     2D 00 64 FD | 	ret
04dd8                 | 
04dd8                 | ' 
04dd8                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04dd8                 | ' 
04dd8                 | ' function iscommand(s as string) as ubyte
04dd8                 | _iscommand
04dd8     01 4A 05 F6 | 	mov	COUNT_, #1
04ddc     A8 00 A0 FD | 	call	#pushregs_
04de0                 | ' 
04de0                 | ' select case s
04de0     09 27 02 F6 | 	mov	local01, arg01
04de4     B3 01 00 FF 
04de8     40 14 06 F6 | 	mov	arg02, ##@LR__5548
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     2C 1B B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     64 0C 90 AD |  if_e	jmp	#LR__0320
04dfc     B3 01 00 FF 
04e00     45 14 06 F6 | 	mov	arg02, ##@LR__5549
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     14 1B B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     54 0C 90 AD |  if_e	jmp	#LR__0321
04e14     B3 01 00 FF 
04e18     48 14 06 F6 | 	mov	arg02, ##@LR__5550
04e1c     13 13 02 F6 | 	mov	arg01, local01
04e20     FC 1A B2 FD | 	call	#__system___string_cmp
04e24     00 FA 0D F2 | 	cmp	result1, #0 wz
04e28     44 0C 90 AD |  if_e	jmp	#LR__0322
04e2c     B3 01 00 FF 
04e30     4D 14 06 F6 | 	mov	arg02, ##@LR__5551
04e34     13 13 02 F6 | 	mov	arg01, local01
04e38     E4 1A B2 FD | 	call	#__system___string_cmp
04e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e40     34 0C 90 AD |  if_e	jmp	#LR__0323
04e44     B3 01 00 FF 
04e48     51 14 06 F6 | 	mov	arg02, ##@LR__5552
04e4c     13 13 02 F6 | 	mov	arg01, local01
04e50     CC 1A B2 FD | 	call	#__system___string_cmp
04e54     00 FA 0D F2 | 	cmp	result1, #0 wz
04e58     24 0C 90 AD |  if_e	jmp	#LR__0324
04e5c     B3 01 00 FF 
04e60     56 14 06 F6 | 	mov	arg02, ##@LR__5553
04e64     13 13 02 F6 | 	mov	arg01, local01
04e68     B4 1A B2 FD | 	call	#__system___string_cmp
04e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e70     14 0C 90 AD |  if_e	jmp	#LR__0325
04e74     B3 01 00 FF 
04e78     5A 14 06 F6 | 	mov	arg02, ##@LR__5554
04e7c     13 13 02 F6 | 	mov	arg01, local01
04e80     9C 1A B2 FD | 	call	#__system___string_cmp
04e84     00 FA 0D F2 | 	cmp	result1, #0 wz
04e88     04 0C 90 AD |  if_e	jmp	#LR__0326
04e8c     B3 01 00 FF 
04e90     5D 14 06 F6 | 	mov	arg02, ##@LR__5555
04e94     13 13 02 F6 | 	mov	arg01, local01
04e98     84 1A B2 FD | 	call	#__system___string_cmp
04e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea0     F4 0B 90 AD |  if_e	jmp	#LR__0327
04ea4     B3 01 00 FF 
04ea8     68 14 06 F6 | 	mov	arg02, ##@LR__5556
04eac     13 13 02 F6 | 	mov	arg01, local01
04eb0     6C 1A B2 FD | 	call	#__system___string_cmp
04eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb8     E4 0B 90 AD |  if_e	jmp	#LR__0328
04ebc     B3 01 00 FF 
04ec0     6C 14 06 F6 | 	mov	arg02, ##@LR__5557
04ec4     13 13 02 F6 | 	mov	arg01, local01
04ec8     54 1A B2 FD | 	call	#__system___string_cmp
04ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed0     D4 0B 90 AD |  if_e	jmp	#LR__0329
04ed4     B3 01 00 FF 
04ed8     76 14 06 F6 | 	mov	arg02, ##@LR__5558
04edc     13 13 02 F6 | 	mov	arg01, local01
04ee0     3C 1A B2 FD | 	call	#__system___string_cmp
04ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee8     C4 0B 90 AD |  if_e	jmp	#LR__0330
04eec     B3 01 00 FF 
04ef0     7A 14 06 F6 | 	mov	arg02, ##@LR__5559
04ef4     13 13 02 F6 | 	mov	arg01, local01
04ef8     24 1A B2 FD | 	call	#__system___string_cmp
04efc     00 FA 0D F2 | 	cmp	result1, #0 wz
04f00     B4 0B 90 AD |  if_e	jmp	#LR__0331
04f04     B3 01 00 FF 
04f08     84 14 06 F6 | 	mov	arg02, ##@LR__5560
04f0c     13 13 02 F6 | 	mov	arg01, local01
04f10     0C 1A B2 FD | 	call	#__system___string_cmp
04f14     00 FA 0D F2 | 	cmp	result1, #0 wz
04f18     A4 0B 90 AD |  if_e	jmp	#LR__0332
04f1c     B3 01 00 FF 
04f20     88 14 06 F6 | 	mov	arg02, ##@LR__5561
04f24     13 13 02 F6 | 	mov	arg01, local01
04f28     F4 19 B2 FD | 	call	#__system___string_cmp
04f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f30     94 0B 90 AD |  if_e	jmp	#LR__0333
04f34     B3 01 00 FF 
04f38     93 14 06 F6 | 	mov	arg02, ##@LR__5562
04f3c     13 13 02 F6 | 	mov	arg01, local01
04f40     DC 19 B2 FD | 	call	#__system___string_cmp
04f44     00 FA 0D F2 | 	cmp	result1, #0 wz
04f48     84 0B 90 AD |  if_e	jmp	#LR__0334
04f4c     B3 01 00 FF 
04f50     97 14 06 F6 | 	mov	arg02, ##@LR__5563
04f54     13 13 02 F6 | 	mov	arg01, local01
04f58     C4 19 B2 FD | 	call	#__system___string_cmp
04f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f60     74 0B 90 AD |  if_e	jmp	#LR__0335
04f64     B3 01 00 FF 
04f68     9E 14 06 F6 | 	mov	arg02, ##@LR__5564
04f6c     13 13 02 F6 | 	mov	arg01, local01
04f70     AC 19 B2 FD | 	call	#__system___string_cmp
04f74     00 FA 0D F2 | 	cmp	result1, #0 wz
04f78     64 0B 90 AD |  if_e	jmp	#LR__0336
04f7c     B3 01 00 FF 
04f80     A2 14 06 F6 | 	mov	arg02, ##@LR__5565
04f84     13 13 02 F6 | 	mov	arg01, local01
04f88     94 19 B2 FD | 	call	#__system___string_cmp
04f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f90     54 0B 90 AD |  if_e	jmp	#LR__0337
04f94     B3 01 00 FF 
04f98     A8 14 06 F6 | 	mov	arg02, ##@LR__5566
04f9c     13 13 02 F6 | 	mov	arg01, local01
04fa0     7C 19 B2 FD | 	call	#__system___string_cmp
04fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa8     44 0B 90 AD |  if_e	jmp	#LR__0338
04fac     B3 01 00 FF 
04fb0     AE 14 06 F6 | 	mov	arg02, ##@LR__5567
04fb4     13 13 02 F6 | 	mov	arg01, local01
04fb8     64 19 B2 FD | 	call	#__system___string_cmp
04fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc0     34 0B 90 AD |  if_e	jmp	#LR__0339
04fc4     B3 01 00 FF 
04fc8     B2 14 06 F6 | 	mov	arg02, ##@LR__5568
04fcc     13 13 02 F6 | 	mov	arg01, local01
04fd0     4C 19 B2 FD | 	call	#__system___string_cmp
04fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd8     24 0B 90 AD |  if_e	jmp	#LR__0340
04fdc     B3 01 00 FF 
04fe0     BA 14 06 F6 | 	mov	arg02, ##@LR__5569
04fe4     13 13 02 F6 | 	mov	arg01, local01
04fe8     34 19 B2 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     14 0B 90 AD |  if_e	jmp	#LR__0341
04ff4     B3 01 00 FF 
04ff8     C0 14 06 F6 | 	mov	arg02, ##@LR__5570
04ffc     13 13 02 F6 | 	mov	arg01, local01
05000     1C 19 B2 FD | 	call	#__system___string_cmp
05004     00 FA 0D F2 | 	cmp	result1, #0 wz
05008     04 0B 90 AD |  if_e	jmp	#LR__0342
0500c     B3 01 00 FF 
05010     C3 14 06 F6 | 	mov	arg02, ##@LR__5571
05014     13 13 02 F6 | 	mov	arg01, local01
05018     04 19 B2 FD | 	call	#__system___string_cmp
0501c     00 FA 0D F2 | 	cmp	result1, #0 wz
05020     F4 0A 90 AD |  if_e	jmp	#LR__0343
05024     B3 01 00 FF 
05028     C8 14 06 F6 | 	mov	arg02, ##@LR__5572
0502c     13 13 02 F6 | 	mov	arg01, local01
05030     EC 18 B2 FD | 	call	#__system___string_cmp
05034     00 FA 0D F2 | 	cmp	result1, #0 wz
05038     E4 0A 90 AD |  if_e	jmp	#LR__0344
0503c     B3 01 00 FF 
05040     CF 14 06 F6 | 	mov	arg02, ##@LR__5573
05044     13 13 02 F6 | 	mov	arg01, local01
05048     D4 18 B2 FD | 	call	#__system___string_cmp
0504c     00 FA 0D F2 | 	cmp	result1, #0 wz
05050     D4 0A 90 AD |  if_e	jmp	#LR__0345
05054     B3 01 00 FF 
05058     D4 14 06 F6 | 	mov	arg02, ##@LR__5574
0505c     13 13 02 F6 | 	mov	arg01, local01
05060     BC 18 B2 FD | 	call	#__system___string_cmp
05064     00 FA 0D F2 | 	cmp	result1, #0 wz
05068     C4 0A 90 AD |  if_e	jmp	#LR__0346
0506c     B3 01 00 FF 
05070     DB 14 06 F6 | 	mov	arg02, ##@LR__5575
05074     13 13 02 F6 | 	mov	arg01, local01
05078     A4 18 B2 FD | 	call	#__system___string_cmp
0507c     00 FA 0D F2 | 	cmp	result1, #0 wz
05080     B4 0A 90 AD |  if_e	jmp	#LR__0347
05084     B3 01 00 FF 
05088     E2 14 06 F6 | 	mov	arg02, ##@LR__5576
0508c     13 13 02 F6 | 	mov	arg01, local01
05090     8C 18 B2 FD | 	call	#__system___string_cmp
05094     00 FA 0D F2 | 	cmp	result1, #0 wz
05098     A4 0A 90 AD |  if_e	jmp	#LR__0348
0509c     B3 01 00 FF 
050a0     EC 14 06 F6 | 	mov	arg02, ##@LR__5577
050a4     13 13 02 F6 | 	mov	arg01, local01
050a8     74 18 B2 FD | 	call	#__system___string_cmp
050ac     00 FA 0D F2 | 	cmp	result1, #0 wz
050b0     94 0A 90 AD |  if_e	jmp	#LR__0349
050b4     B3 01 00 FF 
050b8     F0 14 06 F6 | 	mov	arg02, ##@LR__5578
050bc     13 13 02 F6 | 	mov	arg01, local01
050c0     5C 18 B2 FD | 	call	#__system___string_cmp
050c4     00 FA 0D F2 | 	cmp	result1, #0 wz
050c8     84 0A 90 AD |  if_e	jmp	#LR__0350
050cc     B3 01 00 FF 
050d0     F4 14 06 F6 | 	mov	arg02, ##@LR__5579
050d4     13 13 02 F6 | 	mov	arg01, local01
050d8     44 18 B2 FD | 	call	#__system___string_cmp
050dc     00 FA 0D F2 | 	cmp	result1, #0 wz
050e0     74 0A 90 AD |  if_e	jmp	#LR__0351
050e4     B3 01 00 FF 
050e8     FB 14 06 F6 | 	mov	arg02, ##@LR__5580
050ec     13 13 02 F6 | 	mov	arg01, local01
050f0     2C 18 B2 FD | 	call	#__system___string_cmp
050f4     00 FA 0D F2 | 	cmp	result1, #0 wz
050f8     64 0A 90 AD |  if_e	jmp	#LR__0352
050fc     B3 01 00 FF 
05100     FF 14 06 F6 | 	mov	arg02, ##@LR__5581
05104     13 13 02 F6 | 	mov	arg01, local01
05108     14 18 B2 FD | 	call	#__system___string_cmp
0510c     00 FA 0D F2 | 	cmp	result1, #0 wz
05110     54 0A 90 AD |  if_e	jmp	#LR__0353
05114     B3 01 00 FF 
05118     03 15 06 F6 | 	mov	arg02, ##@LR__5582
0511c     13 13 02 F6 | 	mov	arg01, local01
05120     FC 17 B2 FD | 	call	#__system___string_cmp
05124     00 FA 0D F2 | 	cmp	result1, #0 wz
05128     44 0A 90 AD |  if_e	jmp	#LR__0354
0512c     B3 01 00 FF 
05130     09 15 06 F6 | 	mov	arg02, ##@LR__5583
05134     13 13 02 F6 | 	mov	arg01, local01
05138     E4 17 B2 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     34 0A 90 AD |  if_e	jmp	#LR__0355
05144     B3 01 00 FF 
05148     0E 15 06 F6 | 	mov	arg02, ##@LR__5584
0514c     13 13 02 F6 | 	mov	arg01, local01
05150     CC 17 B2 FD | 	call	#__system___string_cmp
05154     00 FA 0D F2 | 	cmp	result1, #0 wz
05158     24 0A 90 AD |  if_e	jmp	#LR__0356
0515c     B3 01 00 FF 
05160     15 15 06 F6 | 	mov	arg02, ##@LR__5585
05164     13 13 02 F6 | 	mov	arg01, local01
05168     B4 17 B2 FD | 	call	#__system___string_cmp
0516c     00 FA 0D F2 | 	cmp	result1, #0 wz
05170     14 0A 90 AD |  if_e	jmp	#LR__0357
05174     B3 01 00 FF 
05178     19 15 06 F6 | 	mov	arg02, ##@LR__5586
0517c     13 13 02 F6 | 	mov	arg01, local01
05180     9C 17 B2 FD | 	call	#__system___string_cmp
05184     00 FA 0D F2 | 	cmp	result1, #0 wz
05188     04 0A 90 AD |  if_e	jmp	#LR__0358
0518c     B3 01 00 FF 
05190     1E 15 06 F6 | 	mov	arg02, ##@LR__5587
05194     13 13 02 F6 | 	mov	arg01, local01
05198     84 17 B2 FD | 	call	#__system___string_cmp
0519c     00 FA 0D F2 | 	cmp	result1, #0 wz
051a0     F4 09 90 AD |  if_e	jmp	#LR__0359
051a4     B3 01 00 FF 
051a8     22 15 06 F6 | 	mov	arg02, ##@LR__5588
051ac     13 13 02 F6 | 	mov	arg01, local01
051b0     6C 17 B2 FD | 	call	#__system___string_cmp
051b4     00 FA 0D F2 | 	cmp	result1, #0 wz
051b8     E4 09 90 AD |  if_e	jmp	#LR__0360
051bc     B3 01 00 FF 
051c0     28 15 06 F6 | 	mov	arg02, ##@LR__5589
051c4     13 13 02 F6 | 	mov	arg01, local01
051c8     54 17 B2 FD | 	call	#__system___string_cmp
051cc     00 FA 0D F2 | 	cmp	result1, #0 wz
051d0     D4 09 90 AD |  if_e	jmp	#LR__0361
051d4     B3 01 00 FF 
051d8     2B 15 06 F6 | 	mov	arg02, ##@LR__5590
051dc     13 13 02 F6 | 	mov	arg01, local01
051e0     3C 17 B2 FD | 	call	#__system___string_cmp
051e4     00 FA 0D F2 | 	cmp	result1, #0 wz
051e8     C4 09 90 AD |  if_e	jmp	#LR__0362
051ec     B3 01 00 FF 
051f0     33 15 06 F6 | 	mov	arg02, ##@LR__5591
051f4     13 13 02 F6 | 	mov	arg01, local01
051f8     24 17 B2 FD | 	call	#__system___string_cmp
051fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05200     B4 09 90 AD |  if_e	jmp	#LR__0363
05204     B3 01 00 FF 
05208     37 15 06 F6 | 	mov	arg02, ##@LR__5592
0520c     13 13 02 F6 | 	mov	arg01, local01
05210     0C 17 B2 FD | 	call	#__system___string_cmp
05214     00 FA 0D F2 | 	cmp	result1, #0 wz
05218     A4 09 90 AD |  if_e	jmp	#LR__0364
0521c     B3 01 00 FF 
05220     3C 15 06 F6 | 	mov	arg02, ##@LR__5593
05224     13 13 02 F6 | 	mov	arg01, local01
05228     F4 16 B2 FD | 	call	#__system___string_cmp
0522c     00 FA 0D F2 | 	cmp	result1, #0 wz
05230     94 09 90 AD |  if_e	jmp	#LR__0365
05234     B3 01 00 FF 
05238     40 15 06 F6 | 	mov	arg02, ##@LR__5594
0523c     13 13 02 F6 | 	mov	arg01, local01
05240     DC 16 B2 FD | 	call	#__system___string_cmp
05244     00 FA 0D F2 | 	cmp	result1, #0 wz
05248     84 09 90 AD |  if_e	jmp	#LR__0366
0524c     B3 01 00 FF 
05250     45 15 06 F6 | 	mov	arg02, ##@LR__5595
05254     13 13 02 F6 | 	mov	arg01, local01
05258     C4 16 B2 FD | 	call	#__system___string_cmp
0525c     00 FA 0D F2 | 	cmp	result1, #0 wz
05260     74 09 90 AD |  if_e	jmp	#LR__0367
05264     B3 01 00 FF 
05268     49 15 06 F6 | 	mov	arg02, ##@LR__5596
0526c     13 13 02 F6 | 	mov	arg01, local01
05270     AC 16 B2 FD | 	call	#__system___string_cmp
05274     00 FA 0D F2 | 	cmp	result1, #0 wz
05278     64 09 90 AD |  if_e	jmp	#LR__0368
0527c     B3 01 00 FF 
05280     4C 15 06 F6 | 	mov	arg02, ##@LR__5597
05284     13 13 02 F6 | 	mov	arg01, local01
05288     94 16 B2 FD | 	call	#__system___string_cmp
0528c     00 FA 0D F2 | 	cmp	result1, #0 wz
05290     54 09 90 AD |  if_e	jmp	#LR__0369
05294     B3 01 00 FF 
05298     52 15 06 F6 | 	mov	arg02, ##@LR__5598
0529c     13 13 02 F6 | 	mov	arg01, local01
052a0     7C 16 B2 FD | 	call	#__system___string_cmp
052a4     00 FA 0D F2 | 	cmp	result1, #0 wz
052a8     44 09 90 AD |  if_e	jmp	#LR__0370
052ac     B3 01 00 FF 
052b0     56 15 06 F6 | 	mov	arg02, ##@LR__5599
052b4     13 13 02 F6 | 	mov	arg01, local01
052b8     64 16 B2 FD | 	call	#__system___string_cmp
052bc     00 FA 0D F2 | 	cmp	result1, #0 wz
052c0     34 09 90 AD |  if_e	jmp	#LR__0371
052c4     B3 01 00 FF 
052c8     5A 15 06 F6 | 	mov	arg02, ##@LR__5600
052cc     13 13 02 F6 | 	mov	arg01, local01
052d0     4C 16 B2 FD | 	call	#__system___string_cmp
052d4     00 FA 0D F2 | 	cmp	result1, #0 wz
052d8     24 09 90 AD |  if_e	jmp	#LR__0372
052dc     B3 01 00 FF 
052e0     60 15 06 F6 | 	mov	arg02, ##@LR__5601
052e4     13 13 02 F6 | 	mov	arg01, local01
052e8     34 16 B2 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     14 09 90 AD |  if_e	jmp	#LR__0373
052f4     B3 01 00 FF 
052f8     65 15 06 F6 | 	mov	arg02, ##@LR__5602
052fc     13 13 02 F6 | 	mov	arg01, local01
05300     1C 16 B2 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     04 09 90 AD |  if_e	jmp	#LR__0374
0530c     B3 01 00 FF 
05310     68 15 06 F6 | 	mov	arg02, ##@LR__5603
05314     13 13 02 F6 | 	mov	arg01, local01
05318     04 16 B2 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     F4 08 90 AD |  if_e	jmp	#LR__0375
05324     B3 01 00 FF 
05328     6B 15 06 F6 | 	mov	arg02, ##@LR__5604
0532c     13 13 02 F6 | 	mov	arg01, local01
05330     EC 15 B2 FD | 	call	#__system___string_cmp
05334     00 FA 0D F2 | 	cmp	result1, #0 wz
05338     E4 08 90 AD |  if_e	jmp	#LR__0376
0533c     B3 01 00 FF 
05340     6F 15 06 F6 | 	mov	arg02, ##@LR__5605
05344     13 13 02 F6 | 	mov	arg01, local01
05348     D4 15 B2 FD | 	call	#__system___string_cmp
0534c     00 FA 0D F2 | 	cmp	result1, #0 wz
05350     D4 08 90 AD |  if_e	jmp	#LR__0377
05354     B3 01 00 FF 
05358     72 15 06 F6 | 	mov	arg02, ##@LR__5606
0535c     13 13 02 F6 | 	mov	arg01, local01
05360     BC 15 B2 FD | 	call	#__system___string_cmp
05364     00 FA 0D F2 | 	cmp	result1, #0 wz
05368     C4 08 90 AD |  if_e	jmp	#LR__0378
0536c     B3 01 00 FF 
05370     78 15 06 F6 | 	mov	arg02, ##@LR__5607
05374     13 13 02 F6 | 	mov	arg01, local01
05378     A4 15 B2 FD | 	call	#__system___string_cmp
0537c     00 FA 0D F2 | 	cmp	result1, #0 wz
05380     B4 08 90 AD |  if_e	jmp	#LR__0379
05384     B3 01 00 FF 
05388     7D 15 06 F6 | 	mov	arg02, ##@LR__5608
0538c     13 13 02 F6 | 	mov	arg01, local01
05390     8C 15 B2 FD | 	call	#__system___string_cmp
05394     00 FA 0D F2 | 	cmp	result1, #0 wz
05398     A4 08 90 AD |  if_e	jmp	#LR__0380
0539c     B3 01 00 FF 
053a0     80 15 06 F6 | 	mov	arg02, ##@LR__5609
053a4     13 13 02 F6 | 	mov	arg01, local01
053a8     74 15 B2 FD | 	call	#__system___string_cmp
053ac     00 FA 0D F2 | 	cmp	result1, #0 wz
053b0     94 08 90 AD |  if_e	jmp	#LR__0381
053b4     B3 01 00 FF 
053b8     85 15 06 F6 | 	mov	arg02, ##@LR__5610
053bc     13 13 02 F6 | 	mov	arg01, local01
053c0     5C 15 B2 FD | 	call	#__system___string_cmp
053c4     00 FA 0D F2 | 	cmp	result1, #0 wz
053c8     84 08 90 AD |  if_e	jmp	#LR__0382
053cc     B3 01 00 FF 
053d0     89 15 06 F6 | 	mov	arg02, ##@LR__5611
053d4     13 13 02 F6 | 	mov	arg01, local01
053d8     44 15 B2 FD | 	call	#__system___string_cmp
053dc     00 FA 0D F2 | 	cmp	result1, #0 wz
053e0     74 08 90 AD |  if_e	jmp	#LR__0383
053e4     B3 01 00 FF 
053e8     8F 15 06 F6 | 	mov	arg02, ##@LR__5612
053ec     13 13 02 F6 | 	mov	arg01, local01
053f0     2C 15 B2 FD | 	call	#__system___string_cmp
053f4     00 FA 0D F2 | 	cmp	result1, #0 wz
053f8     64 08 90 AD |  if_e	jmp	#LR__0384
053fc     B3 01 00 FF 
05400     95 15 06 F6 | 	mov	arg02, ##@LR__5613
05404     13 13 02 F6 | 	mov	arg01, local01
05408     14 15 B2 FD | 	call	#__system___string_cmp
0540c     00 FA 0D F2 | 	cmp	result1, #0 wz
05410     54 08 90 AD |  if_e	jmp	#LR__0385
05414     B3 01 00 FF 
05418     9A 15 06 F6 | 	mov	arg02, ##@LR__5614
0541c     13 13 02 F6 | 	mov	arg01, local01
05420     FC 14 B2 FD | 	call	#__system___string_cmp
05424     00 FA 0D F2 | 	cmp	result1, #0 wz
05428     44 08 90 AD |  if_e	jmp	#LR__0386
0542c     B3 01 00 FF 
05430     9D 15 06 F6 | 	mov	arg02, ##@LR__5615
05434     13 13 02 F6 | 	mov	arg01, local01
05438     E4 14 B2 FD | 	call	#__system___string_cmp
0543c     00 FA 0D F2 | 	cmp	result1, #0 wz
05440     34 08 90 AD |  if_e	jmp	#LR__0387
05444     B3 01 00 FF 
05448     A3 15 06 F6 | 	mov	arg02, ##@LR__5616
0544c     13 13 02 F6 | 	mov	arg01, local01
05450     CC 14 B2 FD | 	call	#__system___string_cmp
05454     00 FA 0D F2 | 	cmp	result1, #0 wz
05458     24 08 90 AD |  if_e	jmp	#LR__0388
0545c     B3 01 00 FF 
05460     A7 15 06 F6 | 	mov	arg02, ##@LR__5617
05464     13 13 02 F6 | 	mov	arg01, local01
05468     B4 14 B2 FD | 	call	#__system___string_cmp
0546c     00 FA 0D F2 | 	cmp	result1, #0 wz
05470     14 08 90 AD |  if_e	jmp	#LR__0389
05474     B3 01 00 FF 
05478     AC 15 06 F6 | 	mov	arg02, ##@LR__5618
0547c     13 13 02 F6 | 	mov	arg01, local01
05480     9C 14 B2 FD | 	call	#__system___string_cmp
05484     00 FA 0D F2 | 	cmp	result1, #0 wz
05488     04 08 90 AD |  if_e	jmp	#LR__0390
0548c     B3 01 00 FF 
05490     AF 15 06 F6 | 	mov	arg02, ##@LR__5619
05494     13 13 02 F6 | 	mov	arg01, local01
05498     84 14 B2 FD | 	call	#__system___string_cmp
0549c     00 FA 0D F2 | 	cmp	result1, #0 wz
054a0     F4 07 90 AD |  if_e	jmp	#LR__0391
054a4     B3 01 00 FF 
054a8     B2 15 06 F6 | 	mov	arg02, ##@LR__5620
054ac     13 13 02 F6 | 	mov	arg01, local01
054b0     6C 14 B2 FD | 	call	#__system___string_cmp
054b4     00 FA 0D F2 | 	cmp	result1, #0 wz
054b8     E4 07 90 AD |  if_e	jmp	#LR__0392
054bc     B3 01 00 FF 
054c0     B7 15 06 F6 | 	mov	arg02, ##@LR__5621
054c4     13 13 02 F6 | 	mov	arg01, local01
054c8     54 14 B2 FD | 	call	#__system___string_cmp
054cc     00 FA 0D F2 | 	cmp	result1, #0 wz
054d0     D4 07 90 AD |  if_e	jmp	#LR__0393
054d4     B3 01 00 FF 
054d8     BD 15 06 F6 | 	mov	arg02, ##@LR__5622
054dc     13 13 02 F6 | 	mov	arg01, local01
054e0     3C 14 B2 FD | 	call	#__system___string_cmp
054e4     00 FA 0D F2 | 	cmp	result1, #0 wz
054e8     C4 07 90 AD |  if_e	jmp	#LR__0394
054ec     B3 01 00 FF 
054f0     C1 15 06 F6 | 	mov	arg02, ##@LR__5623
054f4     13 13 02 F6 | 	mov	arg01, local01
054f8     24 14 B2 FD | 	call	#__system___string_cmp
054fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05500     B4 07 90 AD |  if_e	jmp	#LR__0395
05504     B3 01 00 FF 
05508     CA 15 06 F6 | 	mov	arg02, ##@LR__5624
0550c     13 13 02 F6 | 	mov	arg01, local01
05510     0C 14 B2 FD | 	call	#__system___string_cmp
05514     00 FA 0D F2 | 	cmp	result1, #0 wz
05518     A4 07 90 AD |  if_e	jmp	#LR__0396
0551c     B3 01 00 FF 
05520     D0 15 06 F6 | 	mov	arg02, ##@LR__5625
05524     13 13 02 F6 | 	mov	arg01, local01
05528     F4 13 B2 FD | 	call	#__system___string_cmp
0552c     00 FA 0D F2 | 	cmp	result1, #0 wz
05530     94 07 90 AD |  if_e	jmp	#LR__0397
05534     B3 01 00 FF 
05538     D6 15 06 F6 | 	mov	arg02, ##@LR__5626
0553c     13 13 02 F6 | 	mov	arg01, local01
05540     DC 13 B2 FD | 	call	#__system___string_cmp
05544     00 FA 0D F2 | 	cmp	result1, #0 wz
05548     84 07 90 AD |  if_e	jmp	#LR__0398
0554c     B3 01 00 FF 
05550     DF 15 06 F6 | 	mov	arg02, ##@LR__5627
05554     13 13 02 F6 | 	mov	arg01, local01
05558     C4 13 B2 FD | 	call	#__system___string_cmp
0555c     00 FA 0D F2 | 	cmp	result1, #0 wz
05560     74 07 90 AD |  if_e	jmp	#LR__0399
05564     B3 01 00 FF 
05568     E9 15 06 F6 | 	mov	arg02, ##@LR__5628
0556c     13 13 02 F6 | 	mov	arg01, local01
05570     AC 13 B2 FD | 	call	#__system___string_cmp
05574     00 FA 0D F2 | 	cmp	result1, #0 wz
05578     64 07 90 AD |  if_e	jmp	#LR__0400
0557c     B3 01 00 FF 
05580     F2 15 06 F6 | 	mov	arg02, ##@LR__5629
05584     13 13 02 F6 | 	mov	arg01, local01
05588     94 13 B2 FD | 	call	#__system___string_cmp
0558c     00 FA 0D F2 | 	cmp	result1, #0 wz
05590     54 07 90 AD |  if_e	jmp	#LR__0401
05594     B3 01 00 FF 
05598     F7 15 06 F6 | 	mov	arg02, ##@LR__5630
0559c     13 13 02 F6 | 	mov	arg01, local01
055a0     7C 13 B2 FD | 	call	#__system___string_cmp
055a4     00 FA 0D F2 | 	cmp	result1, #0 wz
055a8     44 07 90 AD |  if_e	jmp	#LR__0402
055ac     B3 01 00 FF 
055b0     FA 15 06 F6 | 	mov	arg02, ##@LR__5631
055b4     13 13 02 F6 | 	mov	arg01, local01
055b8     64 13 B2 FD | 	call	#__system___string_cmp
055bc     00 FA 0D F2 | 	cmp	result1, #0 wz
055c0     34 07 90 AD |  if_e	jmp	#LR__0403
055c4     B3 01 00 FF 
055c8     FF 15 06 F6 | 	mov	arg02, ##@LR__5632
055cc     13 13 02 F6 | 	mov	arg01, local01
055d0     4C 13 B2 FD | 	call	#__system___string_cmp
055d4     00 FA 0D F2 | 	cmp	result1, #0 wz
055d8     24 07 90 AD |  if_e	jmp	#LR__0404
055dc     B4 01 00 FF 
055e0     03 14 06 F6 | 	mov	arg02, ##@LR__5633
055e4     13 13 02 F6 | 	mov	arg01, local01
055e8     34 13 B2 FD | 	call	#__system___string_cmp
055ec     00 FA 0D F2 | 	cmp	result1, #0 wz
055f0     14 07 90 AD |  if_e	jmp	#LR__0405
055f4     B4 01 00 FF 
055f8     08 14 06 F6 | 	mov	arg02, ##@LR__5634
055fc     13 13 02 F6 | 	mov	arg01, local01
05600     1C 13 B2 FD | 	call	#__system___string_cmp
05604     00 FA 0D F2 | 	cmp	result1, #0 wz
05608     04 07 90 AD |  if_e	jmp	#LR__0406
0560c     B4 01 00 FF 
05610     0C 14 06 F6 | 	mov	arg02, ##@LR__5635
05614     13 13 02 F6 | 	mov	arg01, local01
05618     04 13 B2 FD | 	call	#__system___string_cmp
0561c     00 FA 0D F2 | 	cmp	result1, #0 wz
05620     F4 06 90 AD |  if_e	jmp	#LR__0407
05624     B4 01 00 FF 
05628     15 14 06 F6 | 	mov	arg02, ##@LR__5636
0562c     13 13 02 F6 | 	mov	arg01, local01
05630     EC 12 B2 FD | 	call	#__system___string_cmp
05634     00 FA 0D F2 | 	cmp	result1, #0 wz
05638     E4 06 90 AD |  if_e	jmp	#LR__0408
0563c     B4 01 00 FF 
05640     1A 14 06 F6 | 	mov	arg02, ##@LR__5637
05644     13 13 02 F6 | 	mov	arg01, local01
05648     D4 12 B2 FD | 	call	#__system___string_cmp
0564c     00 FA 0D F2 | 	cmp	result1, #0 wz
05650     D4 06 90 AD |  if_e	jmp	#LR__0409
05654     B4 01 00 FF 
05658     20 14 06 F6 | 	mov	arg02, ##@LR__5638
0565c     13 13 02 F6 | 	mov	arg01, local01
05660     BC 12 B2 FD | 	call	#__system___string_cmp
05664     00 FA 0D F2 | 	cmp	result1, #0 wz
05668     C4 06 90 AD |  if_e	jmp	#LR__0410
0566c     B4 01 00 FF 
05670     22 14 06 F6 | 	mov	arg02, ##@LR__5639
05674     13 13 02 F6 | 	mov	arg01, local01
05678     A4 12 B2 FD | 	call	#__system___string_cmp
0567c     00 FA 0D F2 | 	cmp	result1, #0 wz
05680     B4 06 90 AD |  if_e	jmp	#LR__0411
05684     B4 01 00 FF 
05688     26 14 06 F6 | 	mov	arg02, ##@LR__5640
0568c     13 13 02 F6 | 	mov	arg01, local01
05690     8C 12 B2 FD | 	call	#__system___string_cmp
05694     00 FA 0D F2 | 	cmp	result1, #0 wz
05698     A4 06 90 AD |  if_e	jmp	#LR__0412
0569c     B4 01 00 FF 
056a0     2A 14 06 F6 | 	mov	arg02, ##@LR__5641
056a4     13 13 02 F6 | 	mov	arg01, local01
056a8     74 12 B2 FD | 	call	#__system___string_cmp
056ac     00 FA 0D F2 | 	cmp	result1, #0 wz
056b0     94 06 90 AD |  if_e	jmp	#LR__0413
056b4     B4 01 00 FF 
056b8     2F 14 06 F6 | 	mov	arg02, ##@LR__5642
056bc     13 13 02 F6 | 	mov	arg01, local01
056c0     5C 12 B2 FD | 	call	#__system___string_cmp
056c4     00 FA 0D F2 | 	cmp	result1, #0 wz
056c8     84 06 90 AD |  if_e	jmp	#LR__0414
056cc     B4 01 00 FF 
056d0     37 14 06 F6 | 	mov	arg02, ##@LR__5643
056d4     13 13 02 F6 | 	mov	arg01, local01
056d8     44 12 B2 FD | 	call	#__system___string_cmp
056dc     00 FA 0D F2 | 	cmp	result1, #0 wz
056e0     74 06 90 AD |  if_e	jmp	#LR__0415
056e4     B4 01 00 FF 
056e8     3B 14 06 F6 | 	mov	arg02, ##@LR__5644
056ec     13 13 02 F6 | 	mov	arg01, local01
056f0     2C 12 B2 FD | 	call	#__system___string_cmp
056f4     00 FA 0D F2 | 	cmp	result1, #0 wz
056f8     64 06 90 AD |  if_e	jmp	#LR__0416
056fc     B4 01 00 FF 
05700     3D 14 06 F6 | 	mov	arg02, ##@LR__5645
05704     13 13 02 F6 | 	mov	arg01, local01
05708     14 12 B2 FD | 	call	#__system___string_cmp
0570c     00 FA 0D F2 | 	cmp	result1, #0 wz
05710     54 06 90 AD |  if_e	jmp	#LR__0417
05714     B4 01 00 FF 
05718     45 14 06 F6 | 	mov	arg02, ##@LR__5646
0571c     13 13 02 F6 | 	mov	arg01, local01
05720     FC 11 B2 FD | 	call	#__system___string_cmp
05724     00 FA 0D F2 | 	cmp	result1, #0 wz
05728     44 06 90 AD |  if_e	jmp	#LR__0418
0572c     B4 01 00 FF 
05730     4C 14 06 F6 | 	mov	arg02, ##@LR__5647
05734     13 13 02 F6 | 	mov	arg01, local01
05738     E4 11 B2 FD | 	call	#__system___string_cmp
0573c     00 FA 0D F2 | 	cmp	result1, #0 wz
05740     34 06 90 AD |  if_e	jmp	#LR__0419
05744     B4 01 00 FF 
05748     50 14 06 F6 | 	mov	arg02, ##@LR__5648
0574c     13 13 02 F6 | 	mov	arg01, local01
05750     CC 11 B2 FD | 	call	#__system___string_cmp
05754     00 FA 0D F2 | 	cmp	result1, #0 wz
05758     24 06 90 AD |  if_e	jmp	#LR__0420
0575c     B4 01 00 FF 
05760     55 14 06 F6 | 	mov	arg02, ##@LR__5649
05764     13 13 02 F6 | 	mov	arg01, local01
05768     B4 11 B2 FD | 	call	#__system___string_cmp
0576c     00 FA 0D F2 | 	cmp	result1, #0 wz
05770     14 06 90 AD |  if_e	jmp	#LR__0421
05774     B4 01 00 FF 
05778     58 14 06 F6 | 	mov	arg02, ##@LR__5650
0577c     13 13 02 F6 | 	mov	arg01, local01
05780     9C 11 B2 FD | 	call	#__system___string_cmp
05784     00 FA 0D F2 | 	cmp	result1, #0 wz
05788     04 06 90 AD |  if_e	jmp	#LR__0422
0578c     B4 01 00 FF 
05790     61 14 06 F6 | 	mov	arg02, ##@LR__5651
05794     13 13 02 F6 | 	mov	arg01, local01
05798     84 11 B2 FD | 	call	#__system___string_cmp
0579c     00 FA 0D F2 | 	cmp	result1, #0 wz
057a0     F4 05 90 AD |  if_e	jmp	#LR__0423
057a4     B4 01 00 FF 
057a8     65 14 06 F6 | 	mov	arg02, ##@LR__5652
057ac     13 13 02 F6 | 	mov	arg01, local01
057b0     6C 11 B2 FD | 	call	#__system___string_cmp
057b4     00 FA 0D F2 | 	cmp	result1, #0 wz
057b8     E4 05 90 AD |  if_e	jmp	#LR__0424
057bc     B4 01 00 FF 
057c0     6C 14 06 F6 | 	mov	arg02, ##@LR__5653
057c4     13 13 02 F6 | 	mov	arg01, local01
057c8     54 11 B2 FD | 	call	#__system___string_cmp
057cc     00 FA 0D F2 | 	cmp	result1, #0 wz
057d0     D4 05 90 AD |  if_e	jmp	#LR__0425
057d4     B4 01 00 FF 
057d8     70 14 06 F6 | 	mov	arg02, ##@LR__5654
057dc     13 13 02 F6 | 	mov	arg01, local01
057e0     3C 11 B2 FD | 	call	#__system___string_cmp
057e4     00 FA 0D F2 | 	cmp	result1, #0 wz
057e8     C4 05 90 AD |  if_e	jmp	#LR__0426
057ec     B4 01 00 FF 
057f0     77 14 06 F6 | 	mov	arg02, ##@LR__5655
057f4     13 13 02 F6 | 	mov	arg01, local01
057f8     24 11 B2 FD | 	call	#__system___string_cmp
057fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05800     B4 05 90 AD |  if_e	jmp	#LR__0427
05804     B4 01 00 FF 
05808     7B 14 06 F6 | 	mov	arg02, ##@LR__5656
0580c     13 13 02 F6 | 	mov	arg01, local01
05810     0C 11 B2 FD | 	call	#__system___string_cmp
05814     00 FA 0D F2 | 	cmp	result1, #0 wz
05818     A4 05 90 AD |  if_e	jmp	#LR__0428
0581c     B4 01 00 FF 
05820     82 14 06 F6 | 	mov	arg02, ##@LR__5657
05824     13 13 02 F6 | 	mov	arg01, local01
05828     F4 10 B2 FD | 	call	#__system___string_cmp
0582c     00 FA 0D F2 | 	cmp	result1, #0 wz
05830     94 05 90 AD |  if_e	jmp	#LR__0429
05834     B4 01 00 FF 
05838     86 14 06 F6 | 	mov	arg02, ##@LR__5658
0583c     13 13 02 F6 | 	mov	arg01, local01
05840     DC 10 B2 FD | 	call	#__system___string_cmp
05844     00 FA 0D F2 | 	cmp	result1, #0 wz
05848     84 05 90 AD |  if_e	jmp	#LR__0430
0584c     B4 01 00 FF 
05850     91 14 06 F6 | 	mov	arg02, ##@LR__5659
05854     13 13 02 F6 | 	mov	arg01, local01
05858     C4 10 B2 FD | 	call	#__system___string_cmp
0585c     00 FA 0D F2 | 	cmp	result1, #0 wz
05860     74 05 90 AD |  if_e	jmp	#LR__0431
05864     B4 01 00 FF 
05868     95 14 06 F6 | 	mov	arg02, ##@LR__5660
0586c     13 13 02 F6 | 	mov	arg01, local01
05870     AC 10 B2 FD | 	call	#__system___string_cmp
05874     00 FA 0D F2 | 	cmp	result1, #0 wz
05878     64 05 90 AD |  if_e	jmp	#LR__0432
0587c     B4 01 00 FF 
05880     9C 14 06 F6 | 	mov	arg02, ##@LR__5661
05884     13 13 02 F6 | 	mov	arg01, local01
05888     94 10 B2 FD | 	call	#__system___string_cmp
0588c     00 FA 0D F2 | 	cmp	result1, #0 wz
05890     54 05 90 AD |  if_e	jmp	#LR__0433
05894     B4 01 00 FF 
05898     A0 14 06 F6 | 	mov	arg02, ##@LR__5662
0589c     13 13 02 F6 | 	mov	arg01, local01
058a0     7C 10 B2 FD | 	call	#__system___string_cmp
058a4     00 FA 0D F2 | 	cmp	result1, #0 wz
058a8     44 05 90 AD |  if_e	jmp	#LR__0434
058ac     B4 01 00 FF 
058b0     A8 14 06 F6 | 	mov	arg02, ##@LR__5663
058b4     13 13 02 F6 | 	mov	arg01, local01
058b8     64 10 B2 FD | 	call	#__system___string_cmp
058bc     00 FA 0D F2 | 	cmp	result1, #0 wz
058c0     34 05 90 AD |  if_e	jmp	#LR__0435
058c4     B4 01 00 FF 
058c8     AC 14 06 F6 | 	mov	arg02, ##@LR__5664
058cc     13 13 02 F6 | 	mov	arg01, local01
058d0     4C 10 B2 FD | 	call	#__system___string_cmp
058d4     00 FA 0D F2 | 	cmp	result1, #0 wz
058d8     24 05 90 AD |  if_e	jmp	#LR__0436
058dc     B4 01 00 FF 
058e0     B3 14 06 F6 | 	mov	arg02, ##@LR__5665
058e4     13 13 02 F6 | 	mov	arg01, local01
058e8     34 10 B2 FD | 	call	#__system___string_cmp
058ec     00 FA 0D F2 | 	cmp	result1, #0 wz
058f0     14 05 90 AD |  if_e	jmp	#LR__0437
058f4     B4 01 00 FF 
058f8     BA 14 06 F6 | 	mov	arg02, ##@LR__5666
058fc     13 13 02 F6 | 	mov	arg01, local01
05900     1C 10 B2 FD | 	call	#__system___string_cmp
05904     00 FA 0D F2 | 	cmp	result1, #0 wz
05908     04 05 90 AD |  if_e	jmp	#LR__0438
0590c     B4 01 00 FF 
05910     BE 14 06 F6 | 	mov	arg02, ##@LR__5667
05914     13 13 02 F6 | 	mov	arg01, local01
05918     04 10 B2 FD | 	call	#__system___string_cmp
0591c     00 FA 0D F2 | 	cmp	result1, #0 wz
05920     F4 04 90 AD |  if_e	jmp	#LR__0439
05924     B4 01 00 FF 
05928     C4 14 06 F6 | 	mov	arg02, ##@LR__5668
0592c     13 13 02 F6 | 	mov	arg01, local01
05930     EC 0F B2 FD | 	call	#__system___string_cmp
05934     00 FA 0D F2 | 	cmp	result1, #0 wz
05938     E4 04 90 AD |  if_e	jmp	#LR__0440
0593c     B4 01 00 FF 
05940     C8 14 06 F6 | 	mov	arg02, ##@LR__5669
05944     13 13 02 F6 | 	mov	arg01, local01
05948     D4 0F B2 FD | 	call	#__system___string_cmp
0594c     00 FA 0D F2 | 	cmp	result1, #0 wz
05950     D4 04 90 AD |  if_e	jmp	#LR__0441
05954     B4 01 00 FF 
05958     CF 14 06 F6 | 	mov	arg02, ##@LR__5670
0595c     13 13 02 F6 | 	mov	arg01, local01
05960     BC 0F B2 FD | 	call	#__system___string_cmp
05964     00 FA 0D F2 | 	cmp	result1, #0 wz
05968     C4 04 90 AD |  if_e	jmp	#LR__0442
0596c     B4 01 00 FF 
05970     D4 14 06 F6 | 	mov	arg02, ##@LR__5671
05974     13 13 02 F6 | 	mov	arg01, local01
05978     A4 0F B2 FD | 	call	#__system___string_cmp
0597c     00 FA 0D F2 | 	cmp	result1, #0 wz
05980     B4 04 90 AD |  if_e	jmp	#LR__0443
05984     B4 01 00 FF 
05988     D9 14 06 F6 | 	mov	arg02, ##@LR__5672
0598c     13 13 02 F6 | 	mov	arg01, local01
05990     8C 0F B2 FD | 	call	#__system___string_cmp
05994     00 FA 0D F2 | 	cmp	result1, #0 wz
05998     A4 04 90 AD |  if_e	jmp	#LR__0444
0599c     B4 01 00 FF 
059a0     E0 14 06 F6 | 	mov	arg02, ##@LR__5673
059a4     13 13 02 F6 | 	mov	arg01, local01
059a8     74 0F B2 FD | 	call	#__system___string_cmp
059ac     00 FA 0D F2 | 	cmp	result1, #0 wz
059b0     94 04 90 AD |  if_e	jmp	#LR__0445
059b4     B4 01 00 FF 
059b8     E3 14 06 F6 | 	mov	arg02, ##@LR__5674
059bc     13 13 02 F6 | 	mov	arg01, local01
059c0     5C 0F B2 FD | 	call	#__system___string_cmp
059c4     00 FA 0D F2 | 	cmp	result1, #0 wz
059c8     84 04 90 AD |  if_e	jmp	#LR__0446
059cc     B4 01 00 FF 
059d0     ED 14 06 F6 | 	mov	arg02, ##@LR__5675
059d4     13 13 02 F6 | 	mov	arg01, local01
059d8     44 0F B2 FD | 	call	#__system___string_cmp
059dc     00 FA 0D F2 | 	cmp	result1, #0 wz
059e0     74 04 90 AD |  if_e	jmp	#LR__0447
059e4     B4 01 00 FF 
059e8     F1 14 06 F6 | 	mov	arg02, ##@LR__5676
059ec     13 13 02 F6 | 	mov	arg01, local01
059f0     2C 0F B2 FD | 	call	#__system___string_cmp
059f4     00 FA 0D F2 | 	cmp	result1, #0 wz
059f8     64 04 90 AD |  if_e	jmp	#LR__0448
059fc     B4 01 00 FF 
05a00     F9 14 06 F6 | 	mov	arg02, ##@LR__5677
05a04     13 13 02 F6 | 	mov	arg01, local01
05a08     14 0F B2 FD | 	call	#__system___string_cmp
05a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a10     54 04 90 AD |  if_e	jmp	#LR__0449
05a14     B4 01 00 FF 
05a18     FD 14 06 F6 | 	mov	arg02, ##@LR__5678
05a1c     13 13 02 F6 | 	mov	arg01, local01
05a20     FC 0E B2 FD | 	call	#__system___string_cmp
05a24     00 FA 0D F2 | 	cmp	result1, #0 wz
05a28     44 04 90 AD |  if_e	jmp	#LR__0450
05a2c     B4 01 00 FF 
05a30     03 15 06 F6 | 	mov	arg02, ##@LR__5679
05a34     13 13 02 F6 | 	mov	arg01, local01
05a38     E4 0E B2 FD | 	call	#__system___string_cmp
05a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a40     34 04 90 AD |  if_e	jmp	#LR__0451
05a44     B4 01 00 FF 
05a48     09 15 06 F6 | 	mov	arg02, ##@LR__5680
05a4c     13 13 02 F6 | 	mov	arg01, local01
05a50     CC 0E B2 FD | 	call	#__system___string_cmp
05a54     00 FA 0D F2 | 	cmp	result1, #0 wz
05a58     24 04 90 AD |  if_e	jmp	#LR__0452
05a5c     28 04 90 FD | 	jmp	#LR__0453
05a60                 | LR__0320
05a60     5C FA 05 F6 | 	mov	result1, #92
05a64     24 04 90 FD | 	jmp	#LR__0454
05a68                 | LR__0321
05a68     5C FA 05 F6 | 	mov	result1, #92
05a6c     1C 04 90 FD | 	jmp	#LR__0454
05a70                 | LR__0322
05a70     B9 FA 05 F6 | 	mov	result1, #185
05a74     14 04 90 FD | 	jmp	#LR__0454
05a78                 | LR__0323
05a78     47 FA 05 F6 | 	mov	result1, #71
05a7c     0C 04 90 FD | 	jmp	#LR__0454
05a80                 | LR__0324
05a80     59 FA 05 F6 | 	mov	result1, #89
05a84     04 04 90 FD | 	jmp	#LR__0454
05a88                 | LR__0325
05a88     59 FA 05 F6 | 	mov	result1, #89
05a8c     FC 03 90 FD | 	jmp	#LR__0454
05a90                 | LR__0326
05a90     C3 FA 05 F6 | 	mov	result1, #195
05a94     F4 03 90 FD | 	jmp	#LR__0454
05a98                 | LR__0327
05a98     AE FA 05 F6 | 	mov	result1, #174
05a9c     EC 03 90 FD | 	jmp	#LR__0454
05aa0                 | LR__0328
05aa0     AE FA 05 F6 | 	mov	result1, #174
05aa4     E4 03 90 FD | 	jmp	#LR__0454
05aa8                 | LR__0329
05aa8     B1 FA 05 F6 | 	mov	result1, #177
05aac     DC 03 90 FD | 	jmp	#LR__0454
05ab0                 | LR__0330
05ab0     B1 FA 05 F6 | 	mov	result1, #177
05ab4     D4 03 90 FD | 	jmp	#LR__0454
05ab8                 | LR__0331
05ab8     AF FA 05 F6 | 	mov	result1, #175
05abc     CC 03 90 FD | 	jmp	#LR__0454
05ac0                 | LR__0332
05ac0     AF FA 05 F6 | 	mov	result1, #175
05ac4     C4 03 90 FD | 	jmp	#LR__0454
05ac8                 | LR__0333
05ac8     B0 FA 05 F6 | 	mov	result1, #176
05acc     BC 03 90 FD | 	jmp	#LR__0454
05ad0                 | LR__0334
05ad0     B0 FA 05 F6 | 	mov	result1, #176
05ad4     B4 03 90 FD | 	jmp	#LR__0454
05ad8                 | LR__0335
05ad8     45 FA 05 F6 | 	mov	result1, #69
05adc     AC 03 90 FD | 	jmp	#LR__0454
05ae0                 | LR__0336
05ae0     45 FA 05 F6 | 	mov	result1, #69
05ae4     A4 03 90 FD | 	jmp	#LR__0454
05ae8                 | LR__0337
05ae8     69 FA 05 F6 | 	mov	result1, #105
05aec     9C 03 90 FD | 	jmp	#LR__0454
05af0                 | LR__0338
05af0     B4 FA 05 F6 | 	mov	result1, #180
05af4     94 03 90 FD | 	jmp	#LR__0454
05af8                 | LR__0339
05af8     40 FA 05 F6 | 	mov	result1, #64
05afc     8C 03 90 FD | 	jmp	#LR__0454
05b00                 | LR__0340
05b00     CF FA 05 F6 | 	mov	result1, #207
05b04     84 03 90 FD | 	jmp	#LR__0454
05b08                 | LR__0341
05b08     49 FA 05 F6 | 	mov	result1, #73
05b0c     7C 03 90 FD | 	jmp	#LR__0454
05b10                 | LR__0342
05b10     49 FA 05 F6 | 	mov	result1, #73
05b14     74 03 90 FD | 	jmp	#LR__0454
05b18                 | LR__0343
05b18     C4 FA 05 F6 | 	mov	result1, #196
05b1c     6C 03 90 FD | 	jmp	#LR__0454
05b20                 | LR__0344
05b20     68 FA 05 F6 | 	mov	result1, #104
05b24     64 03 90 FD | 	jmp	#LR__0454
05b28                 | LR__0345
05b28     B7 FA 05 F6 | 	mov	result1, #183
05b2c     5C 03 90 FD | 	jmp	#LR__0454
05b30                 | LR__0346
05b30     73 FA 05 F6 | 	mov	result1, #115
05b34     54 03 90 FD | 	jmp	#LR__0454
05b38                 | LR__0347
05b38     74 FA 05 F6 | 	mov	result1, #116
05b3c     4C 03 90 FD | 	jmp	#LR__0454
05b40                 | LR__0348
05b40     6C FA 05 F6 | 	mov	result1, #108
05b44     44 03 90 FD | 	jmp	#LR__0454
05b48                 | LR__0349
05b48     6C FA 05 F6 | 	mov	result1, #108
05b4c     3C 03 90 FD | 	jmp	#LR__0454
05b50                 | LR__0350
05b50     89 FA 05 F6 | 	mov	result1, #137
05b54     34 03 90 FD | 	jmp	#LR__0454
05b58                 | LR__0351
05b58     C2 FA 05 F6 | 	mov	result1, #194
05b5c     2C 03 90 FD | 	jmp	#LR__0454
05b60                 | LR__0352
05b60     72 FA 05 F6 | 	mov	result1, #114
05b64     24 03 90 FD | 	jmp	#LR__0454
05b68                 | LR__0353
05b68     5D FA 05 F6 | 	mov	result1, #93
05b6c     1C 03 90 FD | 	jmp	#LR__0454
05b70                 | LR__0354
05b70     96 FA 05 F6 | 	mov	result1, #150
05b74     14 03 90 FD | 	jmp	#LR__0454
05b78                 | LR__0355
05b78     43 FA 05 F6 | 	mov	result1, #67
05b7c     0C 03 90 FD | 	jmp	#LR__0454
05b80                 | LR__0356
05b80     43 FA 05 F6 | 	mov	result1, #67
05b84     04 03 90 FD | 	jmp	#LR__0454
05b88                 | LR__0357
05b88     43 FA 05 F6 | 	mov	result1, #67
05b8c     FC 02 90 FD | 	jmp	#LR__0454
05b90                 | LR__0358
05b90     5A FA 05 F6 | 	mov	result1, #90
05b94     F4 02 90 FD | 	jmp	#LR__0454
05b98                 | LR__0359
05b98     AB FA 05 F6 | 	mov	result1, #171
05b9c     EC 02 90 FD | 	jmp	#LR__0454
05ba0                 | LR__0360
05ba0     BD FA 05 F6 | 	mov	result1, #189
05ba4     E4 02 90 FD | 	jmp	#LR__0454
05ba8                 | LR__0361
05ba8     BD FA 05 F6 | 	mov	result1, #189
05bac     DC 02 90 FD | 	jmp	#LR__0454
05bb0                 | LR__0362
05bb0     46 FA 05 F6 | 	mov	result1, #70
05bb4     D4 02 90 FD | 	jmp	#LR__0454
05bb8                 | LR__0363
05bb8     46 FA 05 F6 | 	mov	result1, #70
05bbc     CC 02 90 FD | 	jmp	#LR__0454
05bc0                 | LR__0364
05bc0     71 FA 05 F6 | 	mov	result1, #113
05bc4     C4 02 90 FD | 	jmp	#LR__0454
05bc8                 | LR__0365
05bc8     71 FA 05 F6 | 	mov	result1, #113
05bcc     BC 02 90 FD | 	jmp	#LR__0454
05bd0                 | LR__0366
05bd0     60 FA 05 F6 | 	mov	result1, #96
05bd4     B4 02 90 FD | 	jmp	#LR__0454
05bd8                 | LR__0367
05bd8     4A FA 05 F6 | 	mov	result1, #74
05bdc     AC 02 90 FD | 	jmp	#LR__0454
05be0                 | LR__0368
05be0     4A FA 05 F6 | 	mov	result1, #74
05be4     A4 02 90 FD | 	jmp	#LR__0454
05be8                 | LR__0369
05be8     48 FA 05 F6 | 	mov	result1, #72
05bec     9C 02 90 FD | 	jmp	#LR__0454
05bf0                 | LR__0370
05bf0     48 FA 05 F6 | 	mov	result1, #72
05bf4     94 02 90 FD | 	jmp	#LR__0454
05bf8                 | LR__0371
05bf8     BB FA 05 F6 | 	mov	result1, #187
05bfc     8C 02 90 FD | 	jmp	#LR__0454
05c00                 | LR__0372
05c00     A9 FA 05 F6 | 	mov	result1, #169
05c04     84 02 90 FD | 	jmp	#LR__0454
05c08                 | LR__0373
05c08     4E FA 05 F6 | 	mov	result1, #78
05c0c     7C 02 90 FD | 	jmp	#LR__0454
05c10                 | LR__0374
05c10     4E FA 05 F6 | 	mov	result1, #78
05c14     74 02 90 FD | 	jmp	#LR__0454
05c18                 | LR__0375
05c18     58 FA 05 F6 | 	mov	result1, #88
05c1c     6C 02 90 FD | 	jmp	#LR__0454
05c20                 | LR__0376
05c20     5F FA 05 F6 | 	mov	result1, #95
05c24     64 02 90 FD | 	jmp	#LR__0454
05c28                 | LR__0377
05c28     5F FA 05 F6 | 	mov	result1, #95
05c2c     5C 02 90 FD | 	jmp	#LR__0454
05c30                 | LR__0378
05c30     B5 FA 05 F6 | 	mov	result1, #181
05c34     54 02 90 FD | 	jmp	#LR__0454
05c38                 | LR__0379
05c38     4C FA 05 F6 | 	mov	result1, #76
05c3c     4C 02 90 FD | 	jmp	#LR__0454
05c40                 | LR__0380
05c40     4C FA 05 F6 | 	mov	result1, #76
05c44     44 02 90 FD | 	jmp	#LR__0454
05c48                 | LR__0381
05c48     52 FA 05 F6 | 	mov	result1, #82
05c4c     3C 02 90 FD | 	jmp	#LR__0454
05c50                 | LR__0382
05c50     52 FA 05 F6 | 	mov	result1, #82
05c54     34 02 90 FD | 	jmp	#LR__0454
05c58                 | LR__0383
05c58     97 FA 05 F6 | 	mov	result1, #151
05c5c     2C 02 90 FD | 	jmp	#LR__0454
05c60                 | LR__0384
05c60     C6 FA 05 F6 | 	mov	result1, #198
05c64     24 02 90 FD | 	jmp	#LR__0454
05c68                 | LR__0385
05c68     61 FA 05 F6 | 	mov	result1, #97
05c6c     1C 02 90 FD | 	jmp	#LR__0454
05c70                 | LR__0386
05c70     61 FA 05 F6 | 	mov	result1, #97
05c74     14 02 90 FD | 	jmp	#LR__0454
05c78                 | LR__0387
05c78     63 FA 05 F6 | 	mov	result1, #99
05c7c     0C 02 90 FD | 	jmp	#LR__0454
05c80                 | LR__0388
05c80     41 FA 05 F6 | 	mov	result1, #65
05c84     04 02 90 FD | 	jmp	#LR__0454
05c88                 | LR__0389
05c88     4B FA 05 F6 | 	mov	result1, #75
05c8c     FC 01 90 FD | 	jmp	#LR__0454
05c90                 | LR__0390
05c90     4B FA 05 F6 | 	mov	result1, #75
05c94     F4 01 90 FD | 	jmp	#LR__0454
05c98                 | LR__0391
05c98     C1 FA 05 F6 | 	mov	result1, #193
05c9c     EC 01 90 FD | 	jmp	#LR__0454
05ca0                 | LR__0392
05ca0     B3 FA 05 F6 | 	mov	result1, #179
05ca4     E4 01 90 FD | 	jmp	#LR__0454
05ca8                 | LR__0393
05ca8     5E FA 05 F6 | 	mov	result1, #94
05cac     DC 01 90 FD | 	jmp	#LR__0454
05cb0                 | LR__0394
05cb0     5E FA 05 F6 | 	mov	result1, #94
05cb4     D4 01 90 FD | 	jmp	#LR__0454
05cb8                 | LR__0395
05cb8     7C FA 05 F6 | 	mov	result1, #124
05cbc     CC 01 90 FD | 	jmp	#LR__0454
05cc0                 | LR__0396
05cc0     7E FA 05 F6 | 	mov	result1, #126
05cc4     C4 01 90 FD | 	jmp	#LR__0454
05cc8                 | LR__0397
05cc8     7D FA 05 F6 | 	mov	result1, #125
05ccc     BC 01 90 FD | 	jmp	#LR__0454
05cd0                 | LR__0398
05cd0     7F FA 05 F6 | 	mov	result1, #127
05cd4     B4 01 90 FD | 	jmp	#LR__0454
05cd8                 | LR__0399
05cd8     80 FA 05 F6 | 	mov	result1, #128
05cdc     AC 01 90 FD | 	jmp	#LR__0454
05ce0                 | LR__0400
05ce0     55 FA 05 F6 | 	mov	result1, #85
05ce4     A4 01 90 FD | 	jmp	#LR__0454
05ce8                 | LR__0401
05ce8     75 FA 05 F6 | 	mov	result1, #117
05cec     9C 01 90 FD | 	jmp	#LR__0454
05cf0                 | LR__0402
05cf0     75 FA 05 F6 | 	mov	result1, #117
05cf4     94 01 90 FD | 	jmp	#LR__0454
05cf8                 | LR__0403
05cf8     42 FA 05 F6 | 	mov	result1, #66
05cfc     8C 01 90 FD | 	jmp	#LR__0454
05d00                 | LR__0404
05d00     42 FA 05 F6 | 	mov	result1, #66
05d04     84 01 90 FD | 	jmp	#LR__0454
05d08                 | LR__0405
05d08     95 FA 05 F6 | 	mov	result1, #149
05d0c     7C 01 90 FD | 	jmp	#LR__0454
05d10                 | LR__0406
05d10     AC FA 05 F6 | 	mov	result1, #172
05d14     74 01 90 FD | 	jmp	#LR__0454
05d18                 | LR__0407
05d18     81 FA 05 F6 | 	mov	result1, #129
05d1c     6C 01 90 FD | 	jmp	#LR__0454
05d20                 | LR__0408
05d20     81 FA 05 F6 | 	mov	result1, #129
05d24     64 01 90 FD | 	jmp	#LR__0454
05d28                 | LR__0409
05d28     44 FA 05 F6 | 	mov	result1, #68
05d2c     5C 01 90 FD | 	jmp	#LR__0454
05d30                 | LR__0410
05d30     44 FA 05 F6 | 	mov	result1, #68
05d34     54 01 90 FD | 	jmp	#LR__0454
05d38                 | LR__0411
05d38     BC FA 05 F6 | 	mov	result1, #188
05d3c     4C 01 90 FD | 	jmp	#LR__0454
05d40                 | LR__0412
05d40     88 FA 05 F6 | 	mov	result1, #136
05d44     44 01 90 FD | 	jmp	#LR__0454
05d48                 | LR__0413
05d48     B6 FA 05 F6 | 	mov	result1, #182
05d4c     3C 01 90 FD | 	jmp	#LR__0454
05d50                 | LR__0414
05d50     92 FA 05 F6 | 	mov	result1, #146
05d54     34 01 90 FD | 	jmp	#LR__0454
05d58                 | LR__0415
05d58     BE FA 05 F6 | 	mov	result1, #190
05d5c     2C 01 90 FD | 	jmp	#LR__0454
05d60                 | LR__0416
05d60     BE FA 05 F6 | 	mov	result1, #190
05d64     24 01 90 FD | 	jmp	#LR__0454
05d68                 | LR__0417
05d68     C7 FA 05 F6 | 	mov	result1, #199
05d6c     1C 01 90 FD | 	jmp	#LR__0454
05d70                 | LR__0418
05d70     AA FA 05 F6 | 	mov	result1, #170
05d74     14 01 90 FD | 	jmp	#LR__0454
05d78                 | LR__0419
05d78     4D FA 05 F6 | 	mov	result1, #77
05d7c     0C 01 90 FD | 	jmp	#LR__0454
05d80                 | LR__0420
05d80     51 FA 05 F6 | 	mov	result1, #81
05d84     04 01 90 FD | 	jmp	#LR__0454
05d88                 | LR__0421
05d88     51 FA 05 F6 | 	mov	result1, #81
05d8c     FC 00 90 FD | 	jmp	#LR__0454
05d90                 | LR__0422
05d90     8E FA 05 F6 | 	mov	result1, #142
05d94     F4 00 90 FD | 	jmp	#LR__0454
05d98                 | LR__0423
05d98     8E FA 05 F6 | 	mov	result1, #142
05d9c     EC 00 90 FD | 	jmp	#LR__0454
05da0                 | LR__0424
05da0     90 FA 05 F6 | 	mov	result1, #144
05da4     E4 00 90 FD | 	jmp	#LR__0454
05da8                 | LR__0425
05da8     90 FA 05 F6 | 	mov	result1, #144
05dac     DC 00 90 FD | 	jmp	#LR__0454
05db0                 | LR__0426
05db0     8D FA 05 F6 | 	mov	result1, #141
05db4     D4 00 90 FD | 	jmp	#LR__0454
05db8                 | LR__0427
05db8     8D FA 05 F6 | 	mov	result1, #141
05dbc     CC 00 90 FD | 	jmp	#LR__0454
05dc0                 | LR__0428
05dc0     8C FA 05 F6 | 	mov	result1, #140
05dc4     C4 00 90 FD | 	jmp	#LR__0454
05dc8                 | LR__0429
05dc8     8C FA 05 F6 | 	mov	result1, #140
05dcc     BC 00 90 FD | 	jmp	#LR__0454
05dd0                 | LR__0430
05dd0     91 FA 05 F6 | 	mov	result1, #145
05dd4     B4 00 90 FD | 	jmp	#LR__0454
05dd8                 | LR__0431
05dd8     91 FA 05 F6 | 	mov	result1, #145
05ddc     AC 00 90 FD | 	jmp	#LR__0454
05de0                 | LR__0432
05de0     8B FA 05 F6 | 	mov	result1, #139
05de4     A4 00 90 FD | 	jmp	#LR__0454
05de8                 | LR__0433
05de8     8B FA 05 F6 | 	mov	result1, #139
05dec     9C 00 90 FD | 	jmp	#LR__0454
05df0                 | LR__0434
05df0     8F FA 05 F6 | 	mov	result1, #143
05df4     94 00 90 FD | 	jmp	#LR__0454
05df8                 | LR__0435
05df8     8F FA 05 F6 | 	mov	result1, #143
05dfc     8C 00 90 FD | 	jmp	#LR__0454
05e00                 | LR__0436
05e00     8F FA 05 F6 | 	mov	result1, #143
05e04     84 00 90 FD | 	jmp	#LR__0454
05e08                 | LR__0437
05e08     B2 FA 05 F6 | 	mov	result1, #178
05e0c     7C 00 90 FD | 	jmp	#LR__0454
05e10                 | LR__0438
05e10     B2 FA 05 F6 | 	mov	result1, #178
05e14     74 00 90 FD | 	jmp	#LR__0454
05e18                 | LR__0439
05e18     75 FA 05 F6 | 	mov	result1, #117
05e1c     6C 00 90 FD | 	jmp	#LR__0454
05e20                 | LR__0440
05e20     75 FA 05 F6 | 	mov	result1, #117
05e24     64 00 90 FD | 	jmp	#LR__0454
05e28                 | LR__0441
05e28     6D FA 05 F6 | 	mov	result1, #109
05e2c     5C 00 90 FD | 	jmp	#LR__0454
05e30                 | LR__0442
05e30     6D FA 05 F6 | 	mov	result1, #109
05e34     54 00 90 FD | 	jmp	#LR__0454
05e38                 | LR__0443
05e38     5B FA 05 F6 | 	mov	result1, #91
05e3c     4C 00 90 FD | 	jmp	#LR__0454
05e40                 | LR__0444
05e40     56 FA 05 F6 | 	mov	result1, #86
05e44     44 00 90 FD | 	jmp	#LR__0454
05e48                 | LR__0445
05e48     56 FA 05 F6 | 	mov	result1, #86
05e4c     3C 00 90 FD | 	jmp	#LR__0454
05e50                 | LR__0446
05e50     70 FA 05 F6 | 	mov	result1, #112
05e54     34 00 90 FD | 	jmp	#LR__0454
05e58                 | LR__0447
05e58     70 FA 05 F6 | 	mov	result1, #112
05e5c     2C 00 90 FD | 	jmp	#LR__0454
05e60                 | LR__0448
05e60     57 FA 05 F6 | 	mov	result1, #87
05e64     24 00 90 FD | 	jmp	#LR__0454
05e68                 | LR__0449
05e68     57 FA 05 F6 | 	mov	result1, #87
05e6c     1C 00 90 FD | 	jmp	#LR__0454
05e70                 | LR__0450
05e70     79 FA 05 F6 | 	mov	result1, #121
05e74     14 00 90 FD | 	jmp	#LR__0454
05e78                 | LR__0451
05e78     77 FA 05 F6 | 	mov	result1, #119
05e7c     0C 00 90 FD | 	jmp	#LR__0454
05e80                 | LR__0452
05e80     78 FA 05 F6 | 	mov	result1, #120
05e84     04 00 90 FD | 	jmp	#LR__0454
05e88                 | LR__0453
05e88     00 FA 05 F6 | 	mov	result1, #0
05e8c                 | LR__0454
05e8c     A7 F0 03 F6 | 	mov	ptra, fp
05e90     B2 00 A0 FD | 	call	#popregs_
05e94                 | _iscommand_ret
05e94     2D 00 64 FD | 	ret
05e98                 | 
05e98                 | ' 
05e98                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05e98                 | ' 
05e98                 | ' function isfunction(s as string) as ubyte
05e98                 | _isfunction
05e98     01 4A 05 F6 | 	mov	COUNT_, #1
05e9c     A8 00 A0 FD | 	call	#pushregs_
05ea0                 | ' 
05ea0                 | ' select case s
05ea0     09 27 02 F6 | 	mov	local01, arg01
05ea4     B4 01 00 FF 
05ea8     0F 15 06 F6 | 	mov	arg02, ##@LR__5681
05eac     13 13 02 F6 | 	mov	arg01, local01
05eb0     6C 0A B2 FD | 	call	#__system___string_cmp
05eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb8     FC 04 90 AD |  if_e	jmp	#LR__0460
05ebc     B4 01 00 FF 
05ec0     13 15 06 F6 | 	mov	arg02, ##@LR__5682
05ec4     13 13 02 F6 | 	mov	arg01, local01
05ec8     54 0A B2 FD | 	call	#__system___string_cmp
05ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed0     EC 04 90 AD |  if_e	jmp	#LR__0461
05ed4     B4 01 00 FF 
05ed8     18 15 06 F6 | 	mov	arg02, ##@LR__5683
05edc     13 13 02 F6 | 	mov	arg01, local01
05ee0     3C 0A B2 FD | 	call	#__system___string_cmp
05ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee8     DC 04 90 AD |  if_e	jmp	#LR__0462
05eec     B4 01 00 FF 
05ef0     1C 15 06 F6 | 	mov	arg02, ##@LR__5684
05ef4     13 13 02 F6 | 	mov	arg01, local01
05ef8     24 0A B2 FD | 	call	#__system___string_cmp
05efc     00 FA 0D F2 | 	cmp	result1, #0 wz
05f00     CC 04 90 AD |  if_e	jmp	#LR__0463
05f04     B4 01 00 FF 
05f08     21 15 06 F6 | 	mov	arg02, ##@LR__5685
05f0c     13 13 02 F6 | 	mov	arg01, local01
05f10     0C 0A B2 FD | 	call	#__system___string_cmp
05f14     00 FA 0D F2 | 	cmp	result1, #0 wz
05f18     BC 04 90 AD |  if_e	jmp	#LR__0464
05f1c     B4 01 00 FF 
05f20     25 15 06 F6 | 	mov	arg02, ##@LR__5686
05f24     13 13 02 F6 | 	mov	arg01, local01
05f28     F4 09 B2 FD | 	call	#__system___string_cmp
05f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f30     AC 04 90 AD |  if_e	jmp	#LR__0465
05f34     B4 01 00 FF 
05f38     2A 15 06 F6 | 	mov	arg02, ##@LR__5687
05f3c     13 13 02 F6 | 	mov	arg01, local01
05f40     DC 09 B2 FD | 	call	#__system___string_cmp
05f44     00 FA 0D F2 | 	cmp	result1, #0 wz
05f48     9C 04 90 AD |  if_e	jmp	#LR__0466
05f4c     B4 01 00 FF 
05f50     2E 15 06 F6 | 	mov	arg02, ##@LR__5688
05f54     13 13 02 F6 | 	mov	arg01, local01
05f58     C4 09 B2 FD | 	call	#__system___string_cmp
05f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f60     8C 04 90 AD |  if_e	jmp	#LR__0467
05f64     B4 01 00 FF 
05f68     33 15 06 F6 | 	mov	arg02, ##@LR__5689
05f6c     13 13 02 F6 | 	mov	arg01, local01
05f70     AC 09 B2 FD | 	call	#__system___string_cmp
05f74     00 FA 0D F2 | 	cmp	result1, #0 wz
05f78     7C 04 90 AD |  if_e	jmp	#LR__0468
05f7c     B4 01 00 FF 
05f80     38 15 06 F6 | 	mov	arg02, ##@LR__5690
05f84     13 13 02 F6 | 	mov	arg01, local01
05f88     94 09 B2 FD | 	call	#__system___string_cmp
05f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f90     6C 04 90 AD |  if_e	jmp	#LR__0469
05f94     B4 01 00 FF 
05f98     40 15 06 F6 | 	mov	arg02, ##@LR__5691
05f9c     13 13 02 F6 | 	mov	arg01, local01
05fa0     7C 09 B2 FD | 	call	#__system___string_cmp
05fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa8     5C 04 90 AD |  if_e	jmp	#LR__0470
05fac     B4 01 00 FF 
05fb0     44 15 06 F6 | 	mov	arg02, ##@LR__5692
05fb4     13 13 02 F6 | 	mov	arg01, local01
05fb8     64 09 B2 FD | 	call	#__system___string_cmp
05fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc0     4C 04 90 AD |  if_e	jmp	#LR__0471
05fc4     B4 01 00 FF 
05fc8     4A 15 06 F6 | 	mov	arg02, ##@LR__5693
05fcc     13 13 02 F6 | 	mov	arg01, local01
05fd0     4C 09 B2 FD | 	call	#__system___string_cmp
05fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fd8     3C 04 90 AD |  if_e	jmp	#LR__0472
05fdc     B4 01 00 FF 
05fe0     53 15 06 F6 | 	mov	arg02, ##@LR__5694
05fe4     13 13 02 F6 | 	mov	arg01, local01
05fe8     34 09 B2 FD | 	call	#__system___string_cmp
05fec     00 FA 0D F2 | 	cmp	result1, #0 wz
05ff0     2C 04 90 AD |  if_e	jmp	#LR__0473
05ff4     B4 01 00 FF 
05ff8     57 15 06 F6 | 	mov	arg02, ##@LR__5695
05ffc     13 13 02 F6 | 	mov	arg01, local01
06000     1C 09 B2 FD | 	call	#__system___string_cmp
06004     00 FA 0D F2 | 	cmp	result1, #0 wz
06008     1C 04 90 AD |  if_e	jmp	#LR__0474
0600c     B4 01 00 FF 
06010     5B 15 06 F6 | 	mov	arg02, ##@LR__5696
06014     13 13 02 F6 | 	mov	arg01, local01
06018     04 09 B2 FD | 	call	#__system___string_cmp
0601c     00 FA 0D F2 | 	cmp	result1, #0 wz
06020     0C 04 90 AD |  if_e	jmp	#LR__0475
06024     B4 01 00 FF 
06028     64 15 06 F6 | 	mov	arg02, ##@LR__5697
0602c     13 13 02 F6 | 	mov	arg01, local01
06030     EC 08 B2 FD | 	call	#__system___string_cmp
06034     00 FA 0D F2 | 	cmp	result1, #0 wz
06038     FC 03 90 AD |  if_e	jmp	#LR__0476
0603c     B4 01 00 FF 
06040     68 15 06 F6 | 	mov	arg02, ##@LR__5698
06044     13 13 02 F6 | 	mov	arg01, local01
06048     D4 08 B2 FD | 	call	#__system___string_cmp
0604c     00 FA 0D F2 | 	cmp	result1, #0 wz
06050     EC 03 90 AD |  if_e	jmp	#LR__0477
06054     B4 01 00 FF 
06058     76 15 06 F6 | 	mov	arg02, ##@LR__5699
0605c     13 13 02 F6 | 	mov	arg01, local01
06060     BC 08 B2 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     DC 03 90 AD |  if_e	jmp	#LR__0478
0606c     B4 01 00 FF 
06070     83 15 06 F6 | 	mov	arg02, ##@LR__5700
06074     13 13 02 F6 | 	mov	arg01, local01
06078     A4 08 B2 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     CC 03 90 AD |  if_e	jmp	#LR__0479
06084     B4 01 00 FF 
06088     8B 15 06 F6 | 	mov	arg02, ##@LR__5701
0608c     13 13 02 F6 | 	mov	arg01, local01
06090     8C 08 B2 FD | 	call	#__system___string_cmp
06094     00 FA 0D F2 | 	cmp	result1, #0 wz
06098     BC 03 90 AD |  if_e	jmp	#LR__0480
0609c     B4 01 00 FF 
060a0     90 15 06 F6 | 	mov	arg02, ##@LR__5702
060a4     13 13 02 F6 | 	mov	arg01, local01
060a8     74 08 B2 FD | 	call	#__system___string_cmp
060ac     00 FA 0D F2 | 	cmp	result1, #0 wz
060b0     AC 03 90 AD |  if_e	jmp	#LR__0481
060b4     B4 01 00 FF 
060b8     97 15 06 F6 | 	mov	arg02, ##@LR__5703
060bc     13 13 02 F6 | 	mov	arg01, local01
060c0     5C 08 B2 FD | 	call	#__system___string_cmp
060c4     00 FA 0D F2 | 	cmp	result1, #0 wz
060c8     9C 03 90 AD |  if_e	jmp	#LR__0482
060cc     B4 01 00 FF 
060d0     9B 15 06 F6 | 	mov	arg02, ##@LR__5704
060d4     13 13 02 F6 | 	mov	arg01, local01
060d8     44 08 B2 FD | 	call	#__system___string_cmp
060dc     00 FA 0D F2 | 	cmp	result1, #0 wz
060e0     8C 03 90 AD |  if_e	jmp	#LR__0483
060e4     B4 01 00 FF 
060e8     A1 15 06 F6 | 	mov	arg02, ##@LR__5705
060ec     13 13 02 F6 | 	mov	arg01, local01
060f0     2C 08 B2 FD | 	call	#__system___string_cmp
060f4     00 FA 0D F2 | 	cmp	result1, #0 wz
060f8     7C 03 90 AD |  if_e	jmp	#LR__0484
060fc     B4 01 00 FF 
06100     A5 15 06 F6 | 	mov	arg02, ##@LR__5706
06104     13 13 02 F6 | 	mov	arg01, local01
06108     14 08 B2 FD | 	call	#__system___string_cmp
0610c     00 FA 0D F2 | 	cmp	result1, #0 wz
06110     6C 03 90 AD |  if_e	jmp	#LR__0485
06114     B4 01 00 FF 
06118     A9 15 06 F6 | 	mov	arg02, ##@LR__5707
0611c     13 13 02 F6 | 	mov	arg01, local01
06120     FC 07 B2 FD | 	call	#__system___string_cmp
06124     00 FA 0D F2 | 	cmp	result1, #0 wz
06128     5C 03 90 AD |  if_e	jmp	#LR__0486
0612c     B4 01 00 FF 
06130     AF 15 06 F6 | 	mov	arg02, ##@LR__5708
06134     13 13 02 F6 | 	mov	arg01, local01
06138     E4 07 B2 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     4C 03 90 AD |  if_e	jmp	#LR__0487
06144     B4 01 00 FF 
06148     B4 15 06 F6 | 	mov	arg02, ##@LR__5709
0614c     13 13 02 F6 | 	mov	arg01, local01
06150     CC 07 B2 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     3C 03 90 AD |  if_e	jmp	#LR__0488
0615c     B4 01 00 FF 
06160     BB 15 06 F6 | 	mov	arg02, ##@LR__5710
06164     13 13 02 F6 | 	mov	arg01, local01
06168     B4 07 B2 FD | 	call	#__system___string_cmp
0616c     00 FA 0D F2 | 	cmp	result1, #0 wz
06170     2C 03 90 AD |  if_e	jmp	#LR__0489
06174     B4 01 00 FF 
06178     C2 15 06 F6 | 	mov	arg02, ##@LR__5711
0617c     13 13 02 F6 | 	mov	arg01, local01
06180     9C 07 B2 FD | 	call	#__system___string_cmp
06184     00 FA 0D F2 | 	cmp	result1, #0 wz
06188     1C 03 90 AD |  if_e	jmp	#LR__0490
0618c     B4 01 00 FF 
06190     C9 15 06 F6 | 	mov	arg02, ##@LR__5712
06194     13 13 02 F6 | 	mov	arg01, local01
06198     84 07 B2 FD | 	call	#__system___string_cmp
0619c     00 FA 0D F2 | 	cmp	result1, #0 wz
061a0     0C 03 90 AD |  if_e	jmp	#LR__0491
061a4     B4 01 00 FF 
061a8     D0 15 06 F6 | 	mov	arg02, ##@LR__5713
061ac     13 13 02 F6 | 	mov	arg01, local01
061b0     6C 07 B2 FD | 	call	#__system___string_cmp
061b4     00 FA 0D F2 | 	cmp	result1, #0 wz
061b8     FC 02 90 AD |  if_e	jmp	#LR__0492
061bc     B4 01 00 FF 
061c0     D5 15 06 F6 | 	mov	arg02, ##@LR__5714
061c4     13 13 02 F6 | 	mov	arg01, local01
061c8     54 07 B2 FD | 	call	#__system___string_cmp
061cc     00 FA 0D F2 | 	cmp	result1, #0 wz
061d0     EC 02 90 AD |  if_e	jmp	#LR__0493
061d4     B4 01 00 FF 
061d8     DA 15 06 F6 | 	mov	arg02, ##@LR__5715
061dc     13 13 02 F6 | 	mov	arg01, local01
061e0     3C 07 B2 FD | 	call	#__system___string_cmp
061e4     00 FA 0D F2 | 	cmp	result1, #0 wz
061e8     DC 02 90 AD |  if_e	jmp	#LR__0494
061ec     B4 01 00 FF 
061f0     DF 15 06 F6 | 	mov	arg02, ##@LR__5716
061f4     13 13 02 F6 | 	mov	arg01, local01
061f8     24 07 B2 FD | 	call	#__system___string_cmp
061fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06200     CC 02 90 AD |  if_e	jmp	#LR__0495
06204     B4 01 00 FF 
06208     E5 15 06 F6 | 	mov	arg02, ##@LR__5717
0620c     13 13 02 F6 | 	mov	arg01, local01
06210     0C 07 B2 FD | 	call	#__system___string_cmp
06214     00 FA 0D F2 | 	cmp	result1, #0 wz
06218     BC 02 90 AD |  if_e	jmp	#LR__0496
0621c     B4 01 00 FF 
06220     EB 15 06 F6 | 	mov	arg02, ##@LR__5718
06224     13 13 02 F6 | 	mov	arg01, local01
06228     F4 06 B2 FD | 	call	#__system___string_cmp
0622c     00 FA 0D F2 | 	cmp	result1, #0 wz
06230     AC 02 90 AD |  if_e	jmp	#LR__0497
06234     B4 01 00 FF 
06238     F1 15 06 F6 | 	mov	arg02, ##@LR__5719
0623c     13 13 02 F6 | 	mov	arg01, local01
06240     DC 06 B2 FD | 	call	#__system___string_cmp
06244     00 FA 0D F2 | 	cmp	result1, #0 wz
06248     9C 02 90 AD |  if_e	jmp	#LR__0498
0624c     B4 01 00 FF 
06250     F6 15 06 F6 | 	mov	arg02, ##@LR__5720
06254     13 13 02 F6 | 	mov	arg01, local01
06258     C4 06 B2 FD | 	call	#__system___string_cmp
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     8C 02 90 AD |  if_e	jmp	#LR__0499
06264     B4 01 00 FF 
06268     FB 15 06 F6 | 	mov	arg02, ##@LR__5721
0626c     13 13 02 F6 | 	mov	arg01, local01
06270     AC 06 B2 FD | 	call	#__system___string_cmp
06274     00 FA 0D F2 | 	cmp	result1, #0 wz
06278     7C 02 90 AD |  if_e	jmp	#LR__0500
0627c     B5 01 00 FF 
06280     03 14 06 F6 | 	mov	arg02, ##@LR__5722
06284     13 13 02 F6 | 	mov	arg01, local01
06288     94 06 B2 FD | 	call	#__system___string_cmp
0628c     00 FA 0D F2 | 	cmp	result1, #0 wz
06290     6C 02 90 AD |  if_e	jmp	#LR__0501
06294     B5 01 00 FF 
06298     09 14 06 F6 | 	mov	arg02, ##@LR__5723
0629c     13 13 02 F6 | 	mov	arg01, local01
062a0     7C 06 B2 FD | 	call	#__system___string_cmp
062a4     00 FA 0D F2 | 	cmp	result1, #0 wz
062a8     5C 02 90 AD |  if_e	jmp	#LR__0502
062ac     B5 01 00 FF 
062b0     10 14 06 F6 | 	mov	arg02, ##@LR__5724
062b4     13 13 02 F6 | 	mov	arg01, local01
062b8     64 06 B2 FD | 	call	#__system___string_cmp
062bc     00 FA 0D F2 | 	cmp	result1, #0 wz
062c0     4C 02 90 AD |  if_e	jmp	#LR__0503
062c4     B5 01 00 FF 
062c8     16 14 06 F6 | 	mov	arg02, ##@LR__5725
062cc     13 13 02 F6 | 	mov	arg01, local01
062d0     4C 06 B2 FD | 	call	#__system___string_cmp
062d4     00 FA 0D F2 | 	cmp	result1, #0 wz
062d8     3C 02 90 AD |  if_e	jmp	#LR__0504
062dc     B5 01 00 FF 
062e0     1C 14 06 F6 | 	mov	arg02, ##@LR__5726
062e4     13 13 02 F6 | 	mov	arg01, local01
062e8     34 06 B2 FD | 	call	#__system___string_cmp
062ec     00 FA 0D F2 | 	cmp	result1, #0 wz
062f0     2C 02 90 AD |  if_e	jmp	#LR__0505
062f4     B5 01 00 FF 
062f8     20 14 06 F6 | 	mov	arg02, ##@LR__5727
062fc     13 13 02 F6 | 	mov	arg01, local01
06300     1C 06 B2 FD | 	call	#__system___string_cmp
06304     00 FA 0D F2 | 	cmp	result1, #0 wz
06308     1C 02 90 AD |  if_e	jmp	#LR__0506
0630c     B5 01 00 FF 
06310     24 14 06 F6 | 	mov	arg02, ##@LR__5728
06314     13 13 02 F6 | 	mov	arg01, local01
06318     04 06 B2 FD | 	call	#__system___string_cmp
0631c     00 FA 0D F2 | 	cmp	result1, #0 wz
06320     0C 02 90 AD |  if_e	jmp	#LR__0507
06324     B5 01 00 FF 
06328     28 14 06 F6 | 	mov	arg02, ##@LR__5729
0632c     13 13 02 F6 | 	mov	arg01, local01
06330     EC 05 B2 FD | 	call	#__system___string_cmp
06334     00 FA 0D F2 | 	cmp	result1, #0 wz
06338     FC 01 90 AD |  if_e	jmp	#LR__0508
0633c     B5 01 00 FF 
06340     2E 14 06 F6 | 	mov	arg02, ##@LR__5730
06344     13 13 02 F6 | 	mov	arg01, local01
06348     D4 05 B2 FD | 	call	#__system___string_cmp
0634c     00 FA 0D F2 | 	cmp	result1, #0 wz
06350     EC 01 90 AD |  if_e	jmp	#LR__0509
06354     B5 01 00 FF 
06358     34 14 06 F6 | 	mov	arg02, ##@LR__5731
0635c     13 13 02 F6 | 	mov	arg01, local01
06360     BC 05 B2 FD | 	call	#__system___string_cmp
06364     00 FA 0D F2 | 	cmp	result1, #0 wz
06368     DC 01 90 AD |  if_e	jmp	#LR__0510
0636c     B5 01 00 FF 
06370     39 14 06 F6 | 	mov	arg02, ##@LR__5732
06374     13 13 02 F6 | 	mov	arg01, local01
06378     A4 05 B2 FD | 	call	#__system___string_cmp
0637c     00 FA 0D F2 | 	cmp	result1, #0 wz
06380     CC 01 90 AD |  if_e	jmp	#LR__0511
06384     B5 01 00 FF 
06388     3D 14 06 F6 | 	mov	arg02, ##@LR__5733
0638c     13 13 02 F6 | 	mov	arg01, local01
06390     8C 05 B2 FD | 	call	#__system___string_cmp
06394     00 FA 0D F2 | 	cmp	result1, #0 wz
06398     BC 01 90 AD |  if_e	jmp	#LR__0512
0639c     B5 01 00 FF 
063a0     41 14 06 F6 | 	mov	arg02, ##@LR__5734
063a4     13 13 02 F6 | 	mov	arg01, local01
063a8     74 05 B2 FD | 	call	#__system___string_cmp
063ac     00 FA 0D F2 | 	cmp	result1, #0 wz
063b0     AC 01 90 AD |  if_e	jmp	#LR__0513
063b4     B0 01 90 FD | 	jmp	#LR__0514
063b8                 | LR__0460
063b8     9E FA 05 F6 | 	mov	result1, #158
063bc     AC 01 90 FD | 	jmp	#LR__0515
063c0                 | LR__0461
063c0     85 FA 05 F6 | 	mov	result1, #133
063c4     A4 01 90 FD | 	jmp	#LR__0515
063c8                 | LR__0462
063c8     9B FA 05 F6 | 	mov	result1, #155
063cc     9C 01 90 FD | 	jmp	#LR__0515
063d0                 | LR__0463
063d0     9B FA 05 F6 | 	mov	result1, #155
063d4     94 01 90 FD | 	jmp	#LR__0515
063d8                 | LR__0464
063d8     A7 FA 05 F6 | 	mov	result1, #167
063dc     8C 01 90 FD | 	jmp	#LR__0515
063e0                 | LR__0465
063e0     84 FA 05 F6 | 	mov	result1, #132
063e4     84 01 90 FD | 	jmp	#LR__0515
063e8                 | LR__0466
063e8     86 FA 05 F6 | 	mov	result1, #134
063ec     7C 01 90 FD | 	jmp	#LR__0515
063f0                 | LR__0467
063f0     A2 FA 05 F6 | 	mov	result1, #162
063f4     74 01 90 FD | 	jmp	#LR__0515
063f8                 | LR__0468
063f8     9F FA 05 F6 | 	mov	result1, #159
063fc     6C 01 90 FD | 	jmp	#LR__0515
06400                 | LR__0469
06400     C0 FA 05 F6 | 	mov	result1, #192
06404     64 01 90 FD | 	jmp	#LR__0515
06408                 | LR__0470
06408     82 FA 05 F6 | 	mov	result1, #130
0640c     5C 01 90 FD | 	jmp	#LR__0515
06410                 | LR__0471
06410     99 FA 05 F6 | 	mov	result1, #153
06414     54 01 90 FD | 	jmp	#LR__0515
06418                 | LR__0472
06418     C5 FA 05 F6 | 	mov	result1, #197
0641c     4C 01 90 FD | 	jmp	#LR__0515
06420                 | LR__0473
06420     C5 FA 05 F6 | 	mov	result1, #197
06424     44 01 90 FD | 	jmp	#LR__0515
06428                 | LR__0474
06428     9C FA 05 F6 | 	mov	result1, #156
0642c     3C 01 90 FD | 	jmp	#LR__0515
06430                 | LR__0475
06430     6F FA 05 F6 | 	mov	result1, #111
06434     34 01 90 FD | 	jmp	#LR__0515
06438                 | LR__0476
06438     6F FA 05 F6 | 	mov	result1, #111
0643c     2C 01 90 FD | 	jmp	#LR__0515
06440                 | LR__0477
06440     93 FA 05 F6 | 	mov	result1, #147
06444     24 01 90 FD | 	jmp	#LR__0515
06448                 | LR__0478
06448     94 FA 05 F6 | 	mov	result1, #148
0644c     1C 01 90 FD | 	jmp	#LR__0515
06450                 | LR__0479
06450     62 FA 05 F6 | 	mov	result1, #98
06454     14 01 90 FD | 	jmp	#LR__0515
06458                 | LR__0480
06458     A3 FA 05 F6 | 	mov	result1, #163
0645c     0C 01 90 FD | 	jmp	#LR__0515
06460                 | LR__0481
06460     9D FA 05 F6 | 	mov	result1, #157
06464     04 01 90 FD | 	jmp	#LR__0515
06468                 | LR__0482
06468     8A FA 05 F6 | 	mov	result1, #138
0646c     FC 00 90 FD | 	jmp	#LR__0515
06470                 | LR__0483
06470     A4 FA 05 F6 | 	mov	result1, #164
06474     F4 00 90 FD | 	jmp	#LR__0515
06478                 | LR__0484
06478     A8 FA 05 F6 | 	mov	result1, #168
0647c     EC 00 90 FD | 	jmp	#LR__0515
06480                 | LR__0485
06480     AD FA 05 F6 | 	mov	result1, #173
06484     E4 00 90 FD | 	jmp	#LR__0515
06488                 | LR__0486
06488     9A FA 05 F6 | 	mov	result1, #154
0648c     DC 00 90 FD | 	jmp	#LR__0515
06490                 | LR__0487
06490     A6 FA 05 F6 | 	mov	result1, #166
06494     D4 00 90 FD | 	jmp	#LR__0515
06498                 | LR__0488
06498     66 FA 05 F6 | 	mov	result1, #102
0649c     CC 00 90 FD | 	jmp	#LR__0515
064a0                 | LR__0489
064a0     67 FA 05 F6 | 	mov	result1, #103
064a4     C4 00 90 FD | 	jmp	#LR__0515
064a8                 | LR__0490
064a8     64 FA 05 F6 | 	mov	result1, #100
064ac     BC 00 90 FD | 	jmp	#LR__0515
064b0                 | LR__0491
064b0     65 FA 05 F6 | 	mov	result1, #101
064b4     B4 00 90 FD | 	jmp	#LR__0515
064b8                 | LR__0492
064b8     C8 FA 05 F6 | 	mov	result1, #200
064bc     AC 00 90 FD | 	jmp	#LR__0515
064c0                 | LR__0493
064c0     C9 FA 05 F6 | 	mov	result1, #201
064c4     A4 00 90 FD | 	jmp	#LR__0515
064c8                 | LR__0494
064c8     CA FA 05 F6 | 	mov	result1, #202
064cc     9C 00 90 FD | 	jmp	#LR__0515
064d0                 | LR__0495
064d0     CC FA 05 F6 | 	mov	result1, #204
064d4     94 00 90 FD | 	jmp	#LR__0515
064d8                 | LR__0496
064d8     CD FA 05 F6 | 	mov	result1, #205
064dc     8C 00 90 FD | 	jmp	#LR__0515
064e0                 | LR__0497
064e0     CE FA 05 F6 | 	mov	result1, #206
064e4     84 00 90 FD | 	jmp	#LR__0515
064e8                 | LR__0498
064e8     CB FA 05 F6 | 	mov	result1, #203
064ec     7C 00 90 FD | 	jmp	#LR__0515
064f0                 | LR__0499
064f0     98 FA 05 F6 | 	mov	result1, #152
064f4     74 00 90 FD | 	jmp	#LR__0515
064f8                 | LR__0500
064f8     7B FA 05 F6 | 	mov	result1, #123
064fc     6C 00 90 FD | 	jmp	#LR__0515
06500                 | LR__0501
06500     76 FA 05 F6 | 	mov	result1, #118
06504     64 00 90 FD | 	jmp	#LR__0515
06508                 | LR__0502
06508     A5 FA 05 F6 | 	mov	result1, #165
0650c     5C 00 90 FD | 	jmp	#LR__0515
06510                 | LR__0503
06510     7A FA 05 F6 | 	mov	result1, #122
06514     54 00 90 FD | 	jmp	#LR__0515
06518                 | LR__0504
06518     BF FA 05 F6 | 	mov	result1, #191
0651c     4C 00 90 FD | 	jmp	#LR__0515
06520                 | LR__0505
06520     54 FA 05 F6 | 	mov	result1, #84
06524     44 00 90 FD | 	jmp	#LR__0515
06528                 | LR__0506
06528     6B FA 05 F6 | 	mov	result1, #107
0652c     3C 00 90 FD | 	jmp	#LR__0515
06530                 | LR__0507
06530     87 FA 05 F6 | 	mov	result1, #135
06534     34 00 90 FD | 	jmp	#LR__0515
06538                 | LR__0508
06538     6A FA 05 F6 | 	mov	result1, #106
0653c     2C 00 90 FD | 	jmp	#LR__0515
06540                 | LR__0509
06540     6E FA 05 F6 | 	mov	result1, #110
06544     24 00 90 FD | 	jmp	#LR__0515
06548                 | LR__0510
06548     A1 FA 05 F6 | 	mov	result1, #161
0654c     1C 00 90 FD | 	jmp	#LR__0515
06550                 | LR__0511
06550     83 FA 05 F6 | 	mov	result1, #131
06554     14 00 90 FD | 	jmp	#LR__0515
06558                 | LR__0512
06558     A0 FA 05 F6 | 	mov	result1, #160
0655c     0C 00 90 FD | 	jmp	#LR__0515
06560                 | LR__0513
06560     9B FA 05 F6 | 	mov	result1, #155
06564     04 00 90 FD | 	jmp	#LR__0515
06568                 | LR__0514
06568     00 FA 05 F6 | 	mov	result1, #0
0656c                 | LR__0515
0656c     A7 F0 03 F6 | 	mov	ptra, fp
06570     B2 00 A0 FD | 	call	#popregs_
06574                 | _isfunction_ret
06574     2D 00 64 FD | 	ret
06578                 | 
06578                 | ' 
06578                 | ' ' Check if the part is a name
06578                 | ' 
06578                 | ' function isname(s as string) as boolean
06578                 | _isname
06578     0D 4A 05 F6 | 	mov	COUNT_, #13
0657c     A8 00 A0 FD | 	call	#pushregs_
06580     09 27 02 F6 | 	mov	local01, arg01
06584     09 29 02 F6 | 	mov	local02, arg01
06588     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
0658c                 | LR__0520
0658c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06590     01 28 06 51 |  if_ne	add	local02, #1
06594     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06598                 | LR__0521
06598     09 29 82 F1 | 	sub	local02, arg01
0659c     14 FB 01 F6 | 	mov	result1, local02
065a0     FD 2A 0A F6 | 	mov	local03, result1 wz
065a4     00 FA 05 A6 |  if_e	mov	result1, #0
065a8     34 02 90 AD |  if_e	jmp	#LR__0533
065ac     13 13 02 F6 | 	mov	arg01, local01
065b0     01 14 06 F6 | 	mov	arg02, #1
065b4     01 16 06 F6 | 	mov	arg03, #1
065b8     D4 24 B2 FD | 	call	#__system__Mid_S
065bc     FD 2C 02 F6 | 	mov	local04, result1
065c0                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
065c0     B5 01 00 FF 
065c4     48 14 06 F6 | 	mov	arg02, ##@LR__5735
065c8     16 13 02 F6 | 	mov	arg01, local04
065cc     50 03 B2 FD | 	call	#__system___string_cmp
065d0     00 FA 55 F2 | 	cmps	result1, #0 wc
065d4     18 00 90 CD |  if_b	jmp	#LR__0522
065d8     B5 01 00 FF 
065dc     4A 14 06 F6 | 	mov	arg02, ##@LR__5736
065e0     16 13 02 F6 | 	mov	arg01, local04
065e4     38 03 B2 FD | 	call	#__system___string_cmp
065e8     01 FA 55 F2 | 	cmps	result1, #1 wc
065ec     1C 00 90 CD |  if_b	jmp	#LR__0523
065f0                 | LR__0522
065f0     B5 01 00 FF 
065f4     4C 14 06 F6 | 	mov	arg02, ##@LR__5737
065f8     16 13 02 F6 | 	mov	arg01, local04
065fc     20 03 B2 FD | 	call	#__system___string_cmp
06600     00 FA 0D F2 | 	cmp	result1, #0 wz
06604     00 FA 05 56 |  if_ne	mov	result1, #0
06608     D4 01 90 5D |  if_ne	jmp	#LR__0533
0660c                 | LR__0523
0660c                 | ' if l>2 then 
0660c     03 2A 56 F2 | 	cmps	local03, #3 wc
06610     C8 01 90 CD |  if_b	jmp	#LR__0532
06614                 | '   for i=2 to l
06614     02 2E 06 F6 | 	mov	local05, #2
06618     15 31 02 F6 | 	mov	local06, local03
0661c     01 30 06 F1 | 	add	local06, #1
06620                 | LR__0524
06620     18 2F 52 F2 | 	cmps	local05, local06 wc
06624     B4 01 90 3D |  if_ae	jmp	#LR__0531
06628     13 13 02 F6 | 	mov	arg01, local01
0662c     17 15 02 F6 | 	mov	arg02, local05
06630     01 16 06 F6 | 	mov	arg03, #1
06634     58 24 B2 FD | 	call	#__system__Mid_S
06638     FD 2C 02 F6 | 	mov	local04, result1
0663c                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
0663c     15 2F 52 F2 | 	cmps	local05, local03 wc
06640     9C 00 90 3D |  if_ae	jmp	#LR__0527
06644     B5 01 00 FF 
06648     4E 14 06 F6 | 	mov	arg02, ##@LR__5738
0664c     16 13 02 F6 | 	mov	arg01, local04
06650     CC 02 B2 FD | 	call	#__system___string_cmp
06654     00 FA 55 F2 | 	cmps	result1, #0 wc
06658     18 00 90 CD |  if_b	jmp	#LR__0525
0665c     B5 01 00 FF 
06660     50 14 06 F6 | 	mov	arg02, ##@LR__5739
06664     16 13 02 F6 | 	mov	arg01, local04
06668     B4 02 B2 FD | 	call	#__system___string_cmp
0666c     01 FA 55 F2 | 	cmps	result1, #1 wc
06670     6C 00 90 CD |  if_b	jmp	#LR__0527
06674                 | LR__0525
06674     B5 01 00 FF 
06678     52 14 06 F6 | 	mov	arg02, ##@LR__5740
0667c     16 13 02 F6 | 	mov	arg01, local04
06680     9C 02 B2 FD | 	call	#__system___string_cmp
06684     00 FA 55 F2 | 	cmps	result1, #0 wc
06688     18 00 90 CD |  if_b	jmp	#LR__0526
0668c     B5 01 00 FF 
06690     54 14 06 F6 | 	mov	arg02, ##@LR__5741
06694     16 13 02 F6 | 	mov	arg01, local04
06698     84 02 B2 FD | 	call	#__system___string_cmp
0669c     01 FA 55 F2 | 	cmps	result1, #1 wc
066a0     3C 00 90 CD |  if_b	jmp	#LR__0527
066a4                 | LR__0526
066a4     B5 01 00 FF 
066a8     56 32 06 F6 | 	mov	local07, ##@LR__5742
066ac     16 13 02 F6 | 	mov	arg01, local04
066b0     19 15 02 F6 | 	mov	arg02, local07
066b4     68 02 B2 FD | 	call	#__system___string_cmp
066b8     00 FA 0D F2 | 	cmp	result1, #0 wz
066bc     20 00 90 AD |  if_e	jmp	#LR__0527
066c0     B5 01 00 FF 
066c4     58 34 06 F6 | 	mov	local08, ##@LR__5743
066c8     16 13 02 F6 | 	mov	arg01, local04
066cc     1A 15 02 F6 | 	mov	arg02, local08
066d0     4C 02 B2 FD | 	call	#__system___string_cmp
066d4     FD 36 0A F6 | 	mov	local09, result1 wz
066d8     00 FA 05 56 |  if_ne	mov	result1, #0
066dc     00 01 90 5D |  if_ne	jmp	#LR__0533
066e0                 | LR__0527
066e0                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
066e0     15 2F 0A F2 | 	cmp	local05, local03 wz
066e4     EC 00 90 5D |  if_ne	jmp	#LR__0530
066e8     B5 01 00 FF 
066ec     5A 38 06 F6 | 	mov	local10, ##@LR__5744
066f0     16 13 02 F6 | 	mov	arg01, local04
066f4     1C 15 02 F6 | 	mov	arg02, local10
066f8     24 02 B2 FD | 	call	#__system___string_cmp
066fc     FD 3A 02 F6 | 	mov	local11, result1
06700     00 3A 56 F2 | 	cmps	local11, #0 wc
06704     1C 00 90 CD |  if_b	jmp	#LR__0528
06708     B5 01 00 FF 
0670c     5C 14 06 F6 | 	mov	arg02, ##@LR__5745
06710     16 13 02 F6 | 	mov	arg01, local04
06714     08 02 B2 FD | 	call	#__system___string_cmp
06718     FD 38 02 F6 | 	mov	local10, result1
0671c     01 38 56 F2 | 	cmps	local10, #1 wc
06720     B0 00 90 CD |  if_b	jmp	#LR__0530
06724                 | LR__0528
06724     B5 01 00 FF 
06728     5E 14 06 F6 | 	mov	arg02, ##@LR__5746
0672c     16 13 02 F6 | 	mov	arg01, local04
06730     EC 01 B2 FD | 	call	#__system___string_cmp
06734     00 FA 55 F2 | 	cmps	result1, #0 wc
06738     1C 00 90 CD |  if_b	jmp	#LR__0529
0673c     B5 01 00 FF 
06740     60 36 06 F6 | 	mov	local09, ##@LR__5747
06744     16 13 02 F6 | 	mov	arg01, local04
06748     1B 15 02 F6 | 	mov	arg02, local09
0674c     D0 01 B2 FD | 	call	#__system___string_cmp
06750     01 FA 55 F2 | 	cmps	result1, #1 wc
06754     7C 00 90 CD |  if_b	jmp	#LR__0530
06758                 | LR__0529
06758     B5 01 00 FF 
0675c     62 36 06 F6 | 	mov	local09, ##@LR__5748
06760     16 13 02 F6 | 	mov	arg01, local04
06764     1B 15 02 F6 | 	mov	arg02, local09
06768     B4 01 B2 FD | 	call	#__system___string_cmp
0676c     00 FA 4D F2 | 	cmps	result1, #0 wz
06770     60 00 90 AD |  if_e	jmp	#LR__0530
06774     B5 01 00 FF 
06778     64 34 06 F6 | 	mov	local08, ##@LR__5749
0677c     16 13 02 F6 | 	mov	arg01, local04
06780     1A 15 02 F6 | 	mov	arg02, local08
06784     98 01 B2 FD | 	call	#__system___string_cmp
06788     FD 36 0A F6 | 	mov	local09, result1 wz
0678c     44 00 90 AD |  if_e	jmp	#LR__0530
06790     B5 01 00 FF 
06794     66 3C 06 F6 | 	mov	local12, ##@LR__5750
06798     1E 35 02 F6 | 	mov	local08, local12
0679c     16 13 02 F6 | 	mov	arg01, local04
067a0     1A 15 02 F6 | 	mov	arg02, local08
067a4     78 01 B2 FD | 	call	#__system___string_cmp
067a8     FD 32 0A F6 | 	mov	local07, result1 wz
067ac     24 00 90 AD |  if_e	jmp	#LR__0530
067b0     B5 01 00 FF 
067b4     68 3E 06 F6 | 	mov	local13, ##@LR__5751
067b8     1F 3D 02 F6 | 	mov	local12, local13
067bc     16 13 02 F6 | 	mov	arg01, local04
067c0     1E 15 02 F6 | 	mov	arg02, local12
067c4     58 01 B2 FD | 	call	#__system___string_cmp
067c8     FD 34 0A F6 | 	mov	local08, result1 wz
067cc     00 FA 05 56 |  if_ne	mov	result1, #0
067d0     0C 00 90 5D |  if_ne	jmp	#LR__0533
067d4                 | LR__0530
067d4     01 2E 06 F1 | 	add	local05, #1
067d8     44 FE 9F FD | 	jmp	#LR__0524
067dc                 | LR__0531
067dc                 | LR__0532
067dc                 | ' return true
067dc     01 FA 65 F6 | 	neg	result1, #1
067e0                 | LR__0533
067e0     A7 F0 03 F6 | 	mov	ptra, fp
067e4     B2 00 A0 FD | 	call	#popregs_
067e8                 | _isname_ret
067e8     2D 00 64 FD | 	ret
067ec                 | 
067ec                 | ' 
067ec                 | ' ' Check if the part is a number.  
067ec                 | ' 
067ec                 | ' function isnum(s as string) as boolean 
067ec                 | _isnum
067ec     13 4A 05 F6 | 	mov	COUNT_, #19
067f0     A8 00 A0 FD | 	call	#pushregs_
067f4     09 27 02 F6 | 	mov	local01, arg01
067f8     00 28 06 F6 | 	mov	local02, #0
067fc     00 2A 06 F6 | 	mov	local03, #0
06800     13 13 02 F6 | 	mov	arg01, local01
06804     09 2D 02 F6 | 	mov	local04, arg01
06808     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0680c                 | LR__0540
0680c     16 FB C9 FA | 	rdbyte	result1, local04 wz
06810     01 2C 06 51 |  if_ne	add	local04, #1
06814     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06818                 | LR__0541
06818     09 2D 82 F1 | 	sub	local04, arg01
0681c     16 FB 01 F6 | 	mov	result1, local04
06820     FD 2E 0A F6 | 	mov	local05, result1 wz
06824     00 FA 05 A6 |  if_e	mov	result1, #0
06828     A0 03 90 AD |  if_e	jmp	#LR__0556
0682c     13 13 02 F6 | 	mov	arg01, local01
06830     01 14 06 F6 | 	mov	arg02, #1
06834     01 16 06 F6 | 	mov	arg03, #1
06838     54 22 B2 FD | 	call	#__system__Mid_S
0683c     FD 30 02 F6 | 	mov	local06, result1
06840                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06840     B5 01 00 FF 
06844     6A 14 06 F6 | 	mov	arg02, ##@LR__5752
06848     18 13 02 F6 | 	mov	arg01, local06
0684c     D0 00 B2 FD | 	call	#__system___string_cmp
06850     00 FA 55 F2 | 	cmps	result1, #0 wc
06854     1C 00 90 CD |  if_b	jmp	#LR__0542
06858     B5 01 00 FF 
0685c     6C 32 06 F6 | 	mov	local07, ##@LR__5753
06860     18 13 02 F6 | 	mov	arg01, local06
06864     19 15 02 F6 | 	mov	arg02, local07
06868     B4 00 B2 FD | 	call	#__system___string_cmp
0686c     01 FA 55 F2 | 	cmps	result1, #1 wc
06870     84 00 90 CD |  if_b	jmp	#LR__0543
06874                 | LR__0542
06874     B5 01 00 FF 
06878     6E 34 06 F6 | 	mov	local08, ##@LR__5754
0687c     1A 33 02 F6 | 	mov	local07, local08
06880     18 13 02 F6 | 	mov	arg01, local06
06884     19 15 02 F6 | 	mov	arg02, local07
06888     94 00 B2 FD | 	call	#__system___string_cmp
0688c     00 FA 0D F2 | 	cmp	result1, #0 wz
06890     64 00 90 AD |  if_e	jmp	#LR__0543
06894     B5 01 00 FF 
06898     70 36 06 F6 | 	mov	local09, ##@LR__5755
0689c     1B 35 02 F6 | 	mov	local08, local09
068a0     18 13 02 F6 | 	mov	arg01, local06
068a4     1A 15 02 F6 | 	mov	arg02, local08
068a8     74 00 B2 FD | 	call	#__system___string_cmp
068ac     FD 32 0A F6 | 	mov	local07, result1 wz
068b0     44 00 90 AD |  if_e	jmp	#LR__0543
068b4     B5 01 00 FF 
068b8     72 38 06 F6 | 	mov	local10, ##@LR__5756
068bc     1C 37 02 F6 | 	mov	local09, local10
068c0     18 13 02 F6 | 	mov	arg01, local06
068c4     1B 15 02 F6 | 	mov	arg02, local09
068c8     54 00 B2 FD | 	call	#__system___string_cmp
068cc     FD 34 0A F6 | 	mov	local08, result1 wz
068d0     24 00 90 AD |  if_e	jmp	#LR__0543
068d4     B5 01 00 FF 
068d8     74 3A 06 F6 | 	mov	local11, ##@LR__5757
068dc     1D 39 02 F6 | 	mov	local10, local11
068e0     18 13 02 F6 | 	mov	arg01, local06
068e4     1C 15 02 F6 | 	mov	arg02, local10
068e8     34 00 B2 FD | 	call	#__system___string_cmp
068ec     FD 36 0A F6 | 	mov	local09, result1 wz
068f0     00 FA 05 56 |  if_ne	mov	result1, #0
068f4     D4 02 90 5D |  if_ne	jmp	#LR__0556
068f8                 | LR__0543
068f8                 | ' if m$="." then ds=1
068f8     B5 01 00 FF 
068fc     76 14 06 F6 | 	mov	arg02, ##@LR__5758
06900     18 13 02 F6 | 	mov	arg01, local06
06904     18 00 B2 FD | 	call	#__system___string_cmp
06908     00 FA 0D F2 | 	cmp	result1, #0 wz
0690c     01 28 06 A6 |  if_e	mov	local02, #1
06910                 | ' if m$="$" then hex=1 else hex=0
06910     B5 01 00 FF 
06914     78 14 06 F6 | 	mov	arg02, ##@LR__5759
06918     18 13 02 F6 | 	mov	arg01, local06
0691c     00 00 B2 FD | 	call	#__system___string_cmp
06920     00 FA 0D F2 | 	cmp	result1, #0 wz
06924     01 3C 06 A6 |  if_e	mov	local12, #1
06928     00 3C 06 56 |  if_ne	mov	local12, #0
0692c                 | ' if m$="%" then bin=1 else bin=0
0692c     B5 01 00 FF 
06930     7A 14 06 F6 | 	mov	arg02, ##@LR__5760
06934     18 13 02 F6 | 	mov	arg01, local06
06938     E4 FF B1 FD | 	call	#__system___string_cmp
0693c     00 FA 0D F2 | 	cmp	result1, #0 wz
06940     01 3E 06 A6 |  if_e	mov	local13, #1
06944     00 3E 06 56 |  if_ne	mov	local13, #0
06948                 | ' if l>1 then 
06948     02 2E 56 F2 | 	cmps	local05, #2 wc
0694c     78 02 90 CD |  if_b	jmp	#LR__0555
06950                 | '   for i=2 to l
06950     02 40 06 F6 | 	mov	local14, #2
06954     17 43 02 F6 | 	mov	local15, local05
06958     01 42 06 F1 | 	add	local15, #1
0695c                 | LR__0544
0695c     21 41 52 F2 | 	cmps	local14, local15 wc
06960     64 02 90 3D |  if_ae	jmp	#LR__0554
06964     13 13 02 F6 | 	mov	arg01, local01
06968     20 15 02 F6 | 	mov	arg02, local14
0696c     01 16 06 F6 | 	mov	arg03, #1
06970     1C 21 B2 FD | 	call	#__system__Mid_S
06974     FD 30 02 F6 | 	mov	local06, result1
06978     00 44 06 F6 | 	mov	local16, #0
0697c                 | '     m$=mid$(s,i,1) : b=false
0697c                 | '     if m$>="0" andalso m$<="9" then b=true  
0697c     B5 01 00 FF 
06980     7C 14 06 F6 | 	mov	arg02, ##@LR__5761
06984     18 13 02 F6 | 	mov	arg01, local06
06988     94 FF B1 FD | 	call	#__system___string_cmp
0698c     00 FA 55 F2 | 	cmps	result1, #0 wc
06990     1C 00 90 CD |  if_b	jmp	#LR__0545
06994     B5 01 00 FF 
06998     7E 32 06 F6 | 	mov	local07, ##@LR__5762
0699c     18 13 02 F6 | 	mov	arg01, local06
069a0     19 15 02 F6 | 	mov	arg02, local07
069a4     78 FF B1 FD | 	call	#__system___string_cmp
069a8     01 FA 55 F2 | 	cmps	result1, #1 wc
069ac     01 44 66 C6 |  if_b	neg	local16, #1
069b0                 | LR__0545
069b0                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
069b0     B5 01 00 FF 
069b4     80 14 06 F6 | 	mov	arg02, ##@LR__5763
069b8     18 13 02 F6 | 	mov	arg01, local06
069bc     60 FF B1 FD | 	call	#__system___string_cmp
069c0     00 FA 0D F2 | 	cmp	result1, #0 wz
069c4     7C 00 90 AD |  if_e	jmp	#LR__0546
069c8     B5 01 00 FF 
069cc     82 32 06 F6 | 	mov	local07, ##@LR__5764
069d0     18 13 02 F6 | 	mov	arg01, local06
069d4     19 15 02 F6 | 	mov	arg02, local07
069d8     44 FF B1 FD | 	call	#__system___string_cmp
069dc     00 FA 0D F2 | 	cmp	result1, #0 wz
069e0     60 00 90 AD |  if_e	jmp	#LR__0546
069e4     B5 01 00 FF 
069e8     84 34 06 F6 | 	mov	local08, ##@LR__5765
069ec     1A 33 02 F6 | 	mov	local07, local08
069f0     18 13 02 F6 | 	mov	arg01, local06
069f4     19 15 02 F6 | 	mov	arg02, local07
069f8     24 FF B1 FD | 	call	#__system___string_cmp
069fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06a00     40 00 90 AD |  if_e	jmp	#LR__0546
06a04     B5 01 00 FF 
06a08     86 36 06 F6 | 	mov	local09, ##@LR__5766
06a0c     1B 35 02 F6 | 	mov	local08, local09
06a10     18 13 02 F6 | 	mov	arg01, local06
06a14     1A 15 02 F6 | 	mov	arg02, local08
06a18     04 FF B1 FD | 	call	#__system___string_cmp
06a1c     FD 32 0A F6 | 	mov	local07, result1 wz
06a20     20 00 90 AD |  if_e	jmp	#LR__0546
06a24     B5 01 00 FF 
06a28     88 38 06 F6 | 	mov	local10, ##@LR__5767
06a2c     1C 37 02 F6 | 	mov	local09, local10
06a30     18 13 02 F6 | 	mov	arg01, local06
06a34     1B 15 02 F6 | 	mov	arg02, local09
06a38     E4 FE B1 FD | 	call	#__system___string_cmp
06a3c     FD 34 0A F6 | 	mov	local08, result1 wz
06a40     04 00 90 5D |  if_ne	jmp	#LR__0547
06a44                 | LR__0546
06a44     01 44 66 F6 | 	neg	local16, #1
06a48                 | LR__0547
06a48                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06a48     01 3C 0E F2 | 	cmp	local12, #1 wz
06a4c     34 00 90 5D |  if_ne	jmp	#LR__0548
06a50     B5 01 00 FF 
06a54     8A 14 06 F6 | 	mov	arg02, ##@LR__5768
06a58     18 13 02 F6 | 	mov	arg01, local06
06a5c     C0 FE B1 FD | 	call	#__system___string_cmp
06a60     00 FA 55 F2 | 	cmps	result1, #0 wc
06a64     1C 00 90 CD |  if_b	jmp	#LR__0548
06a68     B5 01 00 FF 
06a6c     8C 32 06 F6 | 	mov	local07, ##@LR__5769
06a70     18 13 02 F6 | 	mov	arg01, local06
06a74     19 15 02 F6 | 	mov	arg02, local07
06a78     A4 FE B1 FD | 	call	#__system___string_cmp
06a7c     01 FA 55 F2 | 	cmps	result1, #1 wc
06a80     01 44 66 C6 |  if_b	neg	local16, #1
06a84                 | LR__0548
06a84                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06a84     01 3E 0E F2 | 	cmp	local13, #1 wz
06a88     58 00 90 5D |  if_ne	jmp	#LR__0550
06a8c     B5 01 00 FF 
06a90     8E 14 06 F6 | 	mov	arg02, ##@LR__5770
06a94     18 13 02 F6 | 	mov	arg01, local06
06a98     84 FE B1 FD | 	call	#__system___string_cmp
06a9c     00 FA 55 F2 | 	cmps	result1, #0 wc
06aa0     1C 00 90 CD |  if_b	jmp	#LR__0549
06aa4     B5 01 00 FF 
06aa8     90 32 06 F6 | 	mov	local07, ##@LR__5771
06aac     18 13 02 F6 | 	mov	arg01, local06
06ab0     19 15 02 F6 | 	mov	arg02, local07
06ab4     68 FE B1 FD | 	call	#__system___string_cmp
06ab8     01 FA 55 F2 | 	cmps	result1, #1 wc
06abc     24 00 90 CD |  if_b	jmp	#LR__0550
06ac0                 | LR__0549
06ac0     B5 01 00 FF 
06ac4     92 34 06 F6 | 	mov	local08, ##@LR__5772
06ac8     1A 33 02 F6 | 	mov	local07, local08
06acc     18 13 02 F6 | 	mov	arg01, local06
06ad0     19 15 02 F6 | 	mov	arg02, local07
06ad4     48 FE B1 FD | 	call	#__system___string_cmp
06ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
06adc     00 FA 05 56 |  if_ne	mov	result1, #0
06ae0     E8 00 90 5D |  if_ne	jmp	#LR__0556
06ae4                 | LR__0550
06ae4                 | '     if not b then return false
06ae4     22 45 22 F6 | 	not	local16, local16
06ae8     00 44 0E F2 | 	cmp	local16, #0 wz
06aec     00 FA 05 56 |  if_ne	mov	result1, #0
06af0     D8 00 90 5D |  if_ne	jmp	#LR__0556
06af4                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06af4     B5 01 00 FF 
06af8     94 14 06 F6 | 	mov	arg02, ##@LR__5773
06afc     18 13 02 F6 | 	mov	arg01, local06
06b00     1C FE B1 FD | 	call	#__system___string_cmp
06b04     00 FA 0D F2 | 	cmp	result1, #0 wz
06b08     3C 00 90 5D |  if_ne	jmp	#LR__0551
06b0c     20 15 02 F6 | 	mov	arg02, local14
06b10     01 14 86 F1 | 	sub	arg02, #1
06b14     13 13 02 F6 | 	mov	arg01, local01
06b18     01 16 06 F6 | 	mov	arg03, #1
06b1c     70 1F B2 FD | 	call	#__system__Mid_S
06b20     FD 12 02 F6 | 	mov	arg01, result1
06b24     60 21 B2 FD | 	call	#__system__LCase_S
06b28     FD 12 02 F6 | 	mov	arg01, result1
06b2c     B5 01 00 FF 
06b30     96 32 06 F6 | 	mov	local07, ##@LR__5774
06b34     19 15 02 F6 | 	mov	arg02, local07
06b38     E4 FD B1 FD | 	call	#__system___string_cmp
06b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
06b40     00 FA 05 56 |  if_ne	mov	result1, #0
06b44     84 00 90 5D |  if_ne	jmp	#LR__0556
06b48                 | LR__0551
06b48                 | '     if m$="." then ds+=1: if ds>1 then return false
06b48     B5 01 00 FF 
06b4c     98 14 06 F6 | 	mov	arg02, ##@LR__5775
06b50     18 13 02 F6 | 	mov	arg01, local06
06b54     C8 FD B1 FD | 	call	#__system___string_cmp
06b58     00 FA 0D F2 | 	cmp	result1, #0 wz
06b5c     01 28 06 A1 |  if_e	add	local02, #1
06b60     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06b64     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06b68     60 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06b6c                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06b6c     B5 01 00 FF 
06b70     9A 46 06 F6 | 	mov	local17, ##@LR__5776
06b74     23 49 02 F6 | 	mov	local18, local17
06b78     18 13 02 F6 | 	mov	arg01, local06
06b7c     24 15 02 F6 | 	mov	arg02, local18
06b80     9C FD B1 FD | 	call	#__system___string_cmp
06b84     FD 4A 0A F6 | 	mov	local19, result1 wz
06b88     20 00 90 AD |  if_e	jmp	#LR__0552
06b8c     B5 01 00 FF 
06b90     9C 32 06 F6 | 	mov	local07, ##@LR__5777
06b94     19 47 02 F6 | 	mov	local17, local07
06b98     18 13 02 F6 | 	mov	arg01, local06
06b9c     23 15 02 F6 | 	mov	arg02, local17
06ba0     7C FD B1 FD | 	call	#__system___string_cmp
06ba4     FD 48 0A F6 | 	mov	local18, result1 wz
06ba8     14 00 90 5D |  if_ne	jmp	#LR__0553
06bac                 | LR__0552
06bac     01 2A 06 F1 | 	add	local03, #1
06bb0     00 3C 0E F2 | 	cmp	local12, #0 wz
06bb4     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06bb8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06bbc     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06bc0                 | LR__0553
06bc0     01 40 06 F1 | 	add	local14, #1
06bc4     94 FD 9F FD | 	jmp	#LR__0544
06bc8                 | LR__0554
06bc8                 | LR__0555
06bc8                 | ' return true
06bc8     01 FA 65 F6 | 	neg	result1, #1
06bcc                 | LR__0556
06bcc     A7 F0 03 F6 | 	mov	ptra, fp
06bd0     B2 00 A0 FD | 	call	#popregs_
06bd4                 | _isnum_ret
06bd4     2D 00 64 FD | 	ret
06bd8                 | 
06bd8                 | '   
06bd8                 | ' ' Check if the part is an integer number.    
06bd8                 | '   
06bd8                 | ' function isint(s as string) as boolean
06bd8                 | _isint
06bd8     0E 4A 05 F6 | 	mov	COUNT_, #14
06bdc     A8 00 A0 FD | 	call	#pushregs_
06be0     09 27 02 F6 | 	mov	local01, arg01
06be4     09 29 02 F6 | 	mov	local02, arg01
06be8     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06bec                 | LR__0560
06bec     14 FB C9 FA | 	rdbyte	result1, local02 wz
06bf0     01 28 06 51 |  if_ne	add	local02, #1
06bf4     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06bf8                 | LR__0561
06bf8     09 29 82 F1 | 	sub	local02, arg01
06bfc     14 FB 01 F6 | 	mov	result1, local02
06c00     FD 2A 0A F6 | 	mov	local03, result1 wz
06c04     00 FA 05 A6 |  if_e	mov	result1, #0
06c08     64 02 90 AD |  if_e	jmp	#LR__0574
06c0c     13 13 02 F6 | 	mov	arg01, local01
06c10     01 14 06 F6 | 	mov	arg02, #1
06c14     01 16 06 F6 | 	mov	arg03, #1
06c18     74 1E B2 FD | 	call	#__system__Mid_S
06c1c     FD 2C 02 F6 | 	mov	local04, result1
06c20                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06c20     B5 01 00 FF 
06c24     9E 14 06 F6 | 	mov	arg02, ##@LR__5778
06c28     16 13 02 F6 | 	mov	arg01, local04
06c2c     F0 FC B1 FD | 	call	#__system___string_cmp
06c30     00 FA 55 F2 | 	cmps	result1, #0 wc
06c34     1C 00 90 CD |  if_b	jmp	#LR__0562
06c38     B5 01 00 FF 
06c3c     A0 2E 06 F6 | 	mov	local05, ##@LR__5779
06c40     16 13 02 F6 | 	mov	arg01, local04
06c44     17 15 02 F6 | 	mov	arg02, local05
06c48     D4 FC B1 FD | 	call	#__system___string_cmp
06c4c     01 FA 55 F2 | 	cmps	result1, #1 wc
06c50     64 00 90 CD |  if_b	jmp	#LR__0563
06c54                 | LR__0562
06c54     B5 01 00 FF 
06c58     A2 30 06 F6 | 	mov	local06, ##@LR__5780
06c5c     18 2F 02 F6 | 	mov	local05, local06
06c60     16 13 02 F6 | 	mov	arg01, local04
06c64     17 15 02 F6 | 	mov	arg02, local05
06c68     B4 FC B1 FD | 	call	#__system___string_cmp
06c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06c70     44 00 90 AD |  if_e	jmp	#LR__0563
06c74     B5 01 00 FF 
06c78     A4 32 06 F6 | 	mov	local07, ##@LR__5781
06c7c     19 31 02 F6 | 	mov	local06, local07
06c80     16 13 02 F6 | 	mov	arg01, local04
06c84     18 15 02 F6 | 	mov	arg02, local06
06c88     94 FC B1 FD | 	call	#__system___string_cmp
06c8c     FD 2E 0A F6 | 	mov	local05, result1 wz
06c90     24 00 90 AD |  if_e	jmp	#LR__0563
06c94     B5 01 00 FF 
06c98     A6 34 06 F6 | 	mov	local08, ##@LR__5782
06c9c     1A 33 02 F6 | 	mov	local07, local08
06ca0     16 13 02 F6 | 	mov	arg01, local04
06ca4     19 15 02 F6 | 	mov	arg02, local07
06ca8     74 FC B1 FD | 	call	#__system___string_cmp
06cac     FD 30 0A F6 | 	mov	local06, result1 wz
06cb0     00 FA 05 56 |  if_ne	mov	result1, #0
06cb4     B8 01 90 5D |  if_ne	jmp	#LR__0574
06cb8                 | LR__0563
06cb8                 | ' if m$="$" then hex=1 else hex=0
06cb8     B5 01 00 FF 
06cbc     A8 14 06 F6 | 	mov	arg02, ##@LR__5783
06cc0     16 13 02 F6 | 	mov	arg01, local04
06cc4     58 FC B1 FD | 	call	#__system___string_cmp
06cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
06ccc     01 36 06 A6 |  if_e	mov	local09, #1
06cd0     00 36 06 56 |  if_ne	mov	local09, #0
06cd4                 | ' if m$="%" then bin=1 else bin=0
06cd4     B5 01 00 FF 
06cd8     AA 14 06 F6 | 	mov	arg02, ##@LR__5784
06cdc     16 13 02 F6 | 	mov	arg01, local04
06ce0     3C FC B1 FD | 	call	#__system___string_cmp
06ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ce8     01 38 06 A6 |  if_e	mov	local10, #1
06cec     00 38 06 56 |  if_ne	mov	local10, #0
06cf0                 | ' if l>1 then 
06cf0     02 2A 56 F2 | 	cmps	local03, #2 wc
06cf4     74 01 90 CD |  if_b	jmp	#LR__0573
06cf8                 | '   for i=2 to l
06cf8     02 3A 06 F6 | 	mov	local11, #2
06cfc     15 3D 02 F6 | 	mov	local12, local03
06d00     01 3C 06 F1 | 	add	local12, #1
06d04                 | LR__0564
06d04     1E 3B 52 F2 | 	cmps	local11, local12 wc
06d08     60 01 90 3D |  if_ae	jmp	#LR__0572
06d0c     13 13 02 F6 | 	mov	arg01, local01
06d10     1D 15 02 F6 | 	mov	arg02, local11
06d14     01 16 06 F6 | 	mov	arg03, #1
06d18     74 1D B2 FD | 	call	#__system__Mid_S
06d1c     FD 2C 02 F6 | 	mov	local04, result1
06d20                 | '     m$=mid$(s,i,1) 
06d20                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06d20     00 36 0E F2 | 	cmp	local09, #0 wz
06d24     50 00 90 5D |  if_ne	jmp	#LR__0566
06d28     B5 01 00 FF 
06d2c     AC 14 06 F6 | 	mov	arg02, ##@LR__5785
06d30     16 13 02 F6 | 	mov	arg01, local04
06d34     E8 FB B1 FD | 	call	#__system___string_cmp
06d38     00 FA 55 F2 | 	cmps	result1, #0 wc
06d3c     18 00 90 CD |  if_b	jmp	#LR__0565
06d40     B5 01 00 FF 
06d44     AE 14 06 F6 | 	mov	arg02, ##@LR__5786
06d48     16 13 02 F6 | 	mov	arg01, local04
06d4c     D0 FB B1 FD | 	call	#__system___string_cmp
06d50     01 FA 55 F2 | 	cmps	result1, #1 wc
06d54     20 00 90 CD |  if_b	jmp	#LR__0566
06d58                 | LR__0565
06d58     B5 01 00 FF 
06d5c     B0 30 06 F6 | 	mov	local06, ##@LR__5787
06d60     16 13 02 F6 | 	mov	arg01, local04
06d64     18 15 02 F6 | 	mov	arg02, local06
06d68     B4 FB B1 FD | 	call	#__system___string_cmp
06d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06d70     00 FA 05 56 |  if_ne	mov	result1, #0
06d74     F8 00 90 5D |  if_ne	jmp	#LR__0574
06d78                 | LR__0566
06d78                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06d78     01 36 0E F2 | 	cmp	local09, #1 wz
06d7c     90 00 90 5D |  if_ne	jmp	#LR__0569
06d80     B5 01 00 FF 
06d84     B2 14 06 F6 | 	mov	arg02, ##@LR__5788
06d88     16 13 02 F6 | 	mov	arg01, local04
06d8c     90 FB B1 FD | 	call	#__system___string_cmp
06d90     00 FA 55 F2 | 	cmps	result1, #0 wc
06d94     1C 00 90 CD |  if_b	jmp	#LR__0567
06d98     B5 01 00 FF 
06d9c     B4 14 06 F6 | 	mov	arg02, ##@LR__5789
06da0     16 13 02 F6 | 	mov	arg01, local04
06da4     78 FB B1 FD | 	call	#__system___string_cmp
06da8     FD 3E 02 F6 | 	mov	local13, result1
06dac     01 3E 56 F2 | 	cmps	local13, #1 wc
06db0     5C 00 90 CD |  if_b	jmp	#LR__0569
06db4                 | LR__0567
06db4     B5 01 00 FF 
06db8     B6 2E 06 F6 | 	mov	local05, ##@LR__5790
06dbc     16 13 02 F6 | 	mov	arg01, local04
06dc0     17 15 02 F6 | 	mov	arg02, local05
06dc4     58 FB B1 FD | 	call	#__system___string_cmp
06dc8     FD 40 02 F6 | 	mov	local14, result1
06dcc     00 40 56 F2 | 	cmps	local14, #0 wc
06dd0     1C 00 90 CD |  if_b	jmp	#LR__0568
06dd4     B5 01 00 FF 
06dd8     B8 32 06 F6 | 	mov	local07, ##@LR__5791
06ddc     16 13 02 F6 | 	mov	arg01, local04
06de0     19 15 02 F6 | 	mov	arg02, local07
06de4     38 FB B1 FD | 	call	#__system___string_cmp
06de8     01 FA 55 F2 | 	cmps	result1, #1 wc
06dec     20 00 90 CD |  if_b	jmp	#LR__0569
06df0                 | LR__0568
06df0     B5 01 00 FF 
06df4     BA 34 06 F6 | 	mov	local08, ##@LR__5792
06df8     16 13 02 F6 | 	mov	arg01, local04
06dfc     1A 15 02 F6 | 	mov	arg02, local08
06e00     1C FB B1 FD | 	call	#__system___string_cmp
06e04     00 FA 0D F2 | 	cmp	result1, #0 wz
06e08     00 FA 05 56 |  if_ne	mov	result1, #0
06e0c     60 00 90 5D |  if_ne	jmp	#LR__0574
06e10                 | LR__0569
06e10                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06e10     01 38 0E F2 | 	cmp	local10, #1 wz
06e14     4C 00 90 5D |  if_ne	jmp	#LR__0571
06e18     B5 01 00 FF 
06e1c     BC 14 06 F6 | 	mov	arg02, ##@LR__5793
06e20     16 13 02 F6 | 	mov	arg01, local04
06e24     F8 FA B1 FD | 	call	#__system___string_cmp
06e28     00 FA 55 F2 | 	cmps	result1, #0 wc
06e2c     18 00 90 CD |  if_b	jmp	#LR__0570
06e30     B5 01 00 FF 
06e34     BE 14 06 F6 | 	mov	arg02, ##@LR__5794
06e38     16 13 02 F6 | 	mov	arg01, local04
06e3c     E0 FA B1 FD | 	call	#__system___string_cmp
06e40     01 FA 55 F2 | 	cmps	result1, #1 wc
06e44     1C 00 90 CD |  if_b	jmp	#LR__0571
06e48                 | LR__0570
06e48     B5 01 00 FF 
06e4c     C0 14 06 F6 | 	mov	arg02, ##@LR__5795
06e50     16 13 02 F6 | 	mov	arg01, local04
06e54     C8 FA B1 FD | 	call	#__system___string_cmp
06e58     00 FA 0D F2 | 	cmp	result1, #0 wz
06e5c     00 FA 05 56 |  if_ne	mov	result1, #0
06e60     0C 00 90 5D |  if_ne	jmp	#LR__0574
06e64                 | LR__0571
06e64     01 3A 06 F1 | 	add	local11, #1
06e68     98 FE 9F FD | 	jmp	#LR__0564
06e6c                 | LR__0572
06e6c                 | LR__0573
06e6c                 | ' return true
06e6c     01 FA 65 F6 | 	neg	result1, #1
06e70                 | LR__0574
06e70     A7 F0 03 F6 | 	mov	ptra, fp
06e74     B2 00 A0 FD | 	call	#popregs_
06e78                 | _isint_ret
06e78     2D 00 64 FD | 	ret
06e7c                 | 
06e7c                 | ' 
06e7c                 | ' ' Check if the part is a positive decimal number.  
06e7c                 | ' 
06e7c                 | ' function isdec(s as string) as boolean
06e7c                 | _isdec
06e7c     05 4A 05 F6 | 	mov	COUNT_, #5
06e80     A8 00 A0 FD | 	call	#pushregs_
06e84     09 27 02 F6 | 	mov	local01, arg01
06e88     09 29 02 F6 | 	mov	local02, arg01
06e8c     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e90                 | LR__0580
06e90     14 FB C9 FA | 	rdbyte	result1, local02 wz
06e94     01 28 06 51 |  if_ne	add	local02, #1
06e98     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e9c                 | LR__0581
06e9c     09 29 82 F1 | 	sub	local02, arg01
06ea0     14 FB 01 F6 | 	mov	result1, local02
06ea4     FD 28 0A F6 | 	mov	local02, result1 wz
06ea8     00 FA 05 A6 |  if_e	mov	result1, #0
06eac     80 00 90 AD |  if_e	jmp	#LR__0586
06eb0                 | ' for i=1 to l
06eb0     01 2A 06 F6 | 	mov	local03, #1
06eb4     14 2D 02 F6 | 	mov	local04, local02
06eb8     01 2C 06 F1 | 	add	local04, #1
06ebc                 | LR__0582
06ebc     16 2B 52 F2 | 	cmps	local03, local04 wc
06ec0     68 00 90 3D |  if_ae	jmp	#LR__0585
06ec4     13 13 02 F6 | 	mov	arg01, local01
06ec8     15 15 02 F6 | 	mov	arg02, local03
06ecc     01 16 06 F6 | 	mov	arg03, #1
06ed0     BC 1B B2 FD | 	call	#__system__Mid_S
06ed4     FD 2E 02 F6 | 	mov	local05, result1
06ed8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06ed8     B5 01 00 FF 
06edc     C2 14 06 F6 | 	mov	arg02, ##@LR__5796
06ee0     17 13 02 F6 | 	mov	arg01, local05
06ee4     38 FA B1 FD | 	call	#__system___string_cmp
06ee8     00 FA 55 F2 | 	cmps	result1, #0 wc
06eec     18 00 90 CD |  if_b	jmp	#LR__0583
06ef0     B5 01 00 FF 
06ef4     C4 14 06 F6 | 	mov	arg02, ##@LR__5797
06ef8     17 13 02 F6 | 	mov	arg01, local05
06efc     20 FA B1 FD | 	call	#__system___string_cmp
06f00     01 FA 55 F2 | 	cmps	result1, #1 wc
06f04     1C 00 90 CD |  if_b	jmp	#LR__0584
06f08                 | LR__0583
06f08     B5 01 00 FF 
06f0c     C6 14 06 F6 | 	mov	arg02, ##@LR__5798
06f10     17 13 02 F6 | 	mov	arg01, local05
06f14     08 FA B1 FD | 	call	#__system___string_cmp
06f18     00 FA 0D F2 | 	cmp	result1, #0 wz
06f1c     00 FA 05 56 |  if_ne	mov	result1, #0
06f20     0C 00 90 5D |  if_ne	jmp	#LR__0586
06f24                 | LR__0584
06f24     01 2A 06 F1 | 	add	local03, #1
06f28     90 FF 9F FD | 	jmp	#LR__0582
06f2c                 | LR__0585
06f2c                 | ' return true
06f2c     01 FA 65 F6 | 	neg	result1, #1
06f30                 | LR__0586
06f30     A7 F0 03 F6 | 	mov	ptra, fp
06f34     B2 00 A0 FD | 	call	#popregs_
06f38                 | _isdec_ret
06f38     2D 00 64 FD | 	ret
06f3c                 | 
06f3c                 | ' 
06f3c                 | ' ' Check if the part is a string.  
06f3c                 | ' 
06f3c                 | ' function isstring(s as string) as boolean
06f3c                 | _isstring
06f3c     01 4A 05 F6 | 	mov	COUNT_, #1
06f40     A8 00 A0 FD | 	call	#pushregs_
06f44                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06f44     09 27 02 F6 | 	mov	local01, arg01
06f48     01 14 06 F6 | 	mov	arg02, #1
06f4c     28 1A B2 FD | 	call	#__system__Left_S
06f50     FD 12 02 F6 | 	mov	arg01, result1
06f54     B5 01 00 FF 
06f58     C8 14 06 F6 | 	mov	arg02, ##@LR__5799
06f5c     C0 F9 B1 FD | 	call	#__system___string_cmp
06f60     00 FA 4D F2 | 	cmps	result1, #0 wz
06f64     28 00 90 5D |  if_ne	jmp	#LR__0590
06f68     13 13 02 F6 | 	mov	arg01, local01
06f6c     01 14 06 F6 | 	mov	arg02, #1
06f70     8C 1A B2 FD | 	call	#__system__Right_S
06f74     FD 12 02 F6 | 	mov	arg01, result1
06f78     B5 01 00 FF 
06f7c     CA 14 06 F6 | 	mov	arg02, ##@LR__5800
06f80     9C F9 B1 FD | 	call	#__system___string_cmp
06f84     00 FA 4D F2 | 	cmps	result1, #0 wz
06f88     01 FA 65 A6 |  if_e	neg	result1, #1
06f8c     04 00 90 AD |  if_e	jmp	#LR__0591
06f90                 | LR__0590
06f90     00 FA 05 F6 | 	mov	result1, #0
06f94                 | LR__0591
06f94     A7 F0 03 F6 | 	mov	ptra, fp
06f98     B2 00 A0 FD | 	call	#popregs_
06f9c                 | _isstring_ret
06f9c     2D 00 64 FD | 	ret
06fa0                 | 
06fa0                 | ' 
06fa0                 | ' ' getnoteval. Returns the frequency of note token
06fa0                 | ' 
06fa0                 | ' function getnoteval(token) as single
06fa0                 | _getnoteval
06fa0     02 4A 05 F6 | 	mov	COUNT_, #2
06fa4     A8 00 A0 FD | 	call	#pushregs_
06fa8     01 00 00 FF 
06fac     00 13 86 F1 | 	sub	arg01, ##768
06fb0     09 15 52 F6 | 	abs	arg02, arg01 wc
06fb4     0C 14 16 FD | 	qdiv	arg02, #12
06fb8     14 00 00 FF 
06fbc     D8 E4 05 F1 | 	add	objptr, ##10456
06fc0     19 14 62 FD | 	getqy	arg02
06fc4     0A 15 82 F6 | 	negc	arg02, arg02
06fc8     02 14 66 F0 | 	shl	arg02, #2
06fcc     F2 14 02 F1 | 	add	arg02, objptr
06fd0     0A 27 02 FB | 	rdlong	local01, arg02
06fd4     09 15 52 F6 | 	abs	arg02, arg01 wc
06fd8     0C 14 16 FD | 	qdiv	arg02, #12
06fdc     14 00 00 FF 
06fe0     D8 E4 85 F1 | 	sub	objptr, ##10456
06fe4     01 12 06 F6 | 	mov	arg01, #1
06fe8                 | ' noteexp=1+(note/12) 
06fe8                 | ' return (2.0^noteexp)*notebase
06fe8     18 14 62 FD | 	getqx	arg02
06fec     0A 13 82 F3 | 	sumc	arg01, arg02
06ff0     09 13 52 F6 | 	abs	arg01, arg01 wc
06ff4     1F 28 C6 C9 |  if_b	decod	local02, #31
06ff8     00 28 06 36 |  if_ae	mov	local02, #0
06ffc     70 23 B2 FD | 	call	#__system___float_fromuns
07000     14 FB 61 F5 | 	xor	result1, local02
07004     FD 14 02 F6 | 	mov	arg02, result1
07008     1E 12 C6 F9 | 	decod	arg01, #30
0700c     6C 36 B2 FD | 	call	#__system____builtin_powf
07010     FD 12 02 F6 | 	mov	arg01, result1
07014     13 15 02 F6 | 	mov	arg02, local01
07018     58 27 B2 FD | 	call	#__system___float_mul
0701c     A7 F0 03 F6 | 	mov	ptra, fp
07020     B2 00 A0 FD | 	call	#popregs_
07024                 | _getnoteval_ret
07024     2D 00 64 FD | 	ret
07028                 | 
07028                 | ' 
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' 
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' '
07028                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
07028                 | ' '
07028                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
07028                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
07028                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
07028                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
07028                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
07028                 | ' ' 
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' 
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' ' Helper functions to manage program lines
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' 
07028                 | ' '----- delete a line from a program
07028                 | ' 
07028                 | ' function deleteline(aline as ulong) as integer
07028                 | _deleteline
07028     02 4A 05 F6 | 	mov	COUNT_, #2
0702c     A8 00 A0 FD | 	call	#pushregs_
07030     2C F0 07 F1 | 	add	ptra, #44
07034     04 4E 05 F1 | 	add	fp, #4
07038     A7 12 62 FC | 	wrlong	arg01, fp
0703c     4A 00 00 FF 
07040     88 E4 05 F1 | 	add	objptr, ##38024
07044     F2 26 02 FB | 	rdlong	local01, objptr
07048     0C 4E 05 F1 | 	add	fp, #12
0704c     A7 26 62 FC | 	wrlong	local01, fp
07050     10 4E 85 F1 | 	sub	fp, #16
07054                 | ' 
07054                 | ' searchptr=programstart
07054                 | ' do
07054     3E 00 00 FF 
07058     BC E5 85 F1 | 	sub	objptr, ##32188
0705c                 | LR__0600
0705c     14 4E 05 F1 | 	add	fp, #20
07060     A7 12 02 F6 | 	mov	arg01, fp
07064     04 4E 85 F1 | 	sub	fp, #4
07068     A7 14 02 FB | 	rdlong	arg02, fp
0706c     10 4E 85 F1 | 	sub	fp, #16
07070     18 16 06 F6 | 	mov	arg03, #24
07074     F8 EB B1 FD | 	call	#_psram_spin2_read1
07078     10 4E 05 F1 | 	add	fp, #16
0707c     A7 26 02 FB | 	rdlong	local01, fp
07080     08 4E 85 F1 | 	sub	fp, #8
07084     A7 26 62 FC | 	wrlong	local01, fp
07088     20 4E 05 F1 | 	add	fp, #32
0708c     A7 26 02 FB | 	rdlong	local01, fp
07090     18 4E 85 F1 | 	sub	fp, #24
07094     A7 26 62 FC | 	wrlong	local01, fp
07098     04 4E 05 F1 | 	add	fp, #4
0709c     A7 26 02 FB | 	rdlong	local01, fp
070a0     10 4E 85 F1 | 	sub	fp, #16
070a4     A7 16 02 FB | 	rdlong	arg03, fp
070a8     04 4E 85 F1 | 	sub	fp, #4
070ac     0B 27 12 F2 | 	cmp	local01, arg03 wc
070b0     28 4E 05 C1 |  if_b	add	fp, #40
070b4     A7 28 02 CB |  if_b	rdlong	local02, fp
070b8     28 4E 85 C1 |  if_b	sub	fp, #40
070bc     FF FF 3F CF 
070c0     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
070c4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
070c8     0B 00 00 FF 
070cc     CC E4 85 F1 | 	sub	objptr, ##5836
070d0                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
070d0     14 4E 05 F1 | 	add	fp, #20
070d4     A7 26 02 FB | 	rdlong	local01, fp
070d8     10 4E 85 F1 | 	sub	fp, #16
070dc     A7 28 02 FB | 	rdlong	local02, fp
070e0     04 4E 85 F1 | 	sub	fp, #4
070e4     14 27 0A F2 | 	cmp	local01, local02 wz
070e8     01 FA 65 56 |  if_ne	neg	result1, #1
070ec     34 02 90 5D |  if_ne	jmp	#LR__0605
070f0     08 4E 05 F1 | 	add	fp, #8
070f4     A7 12 02 FB | 	rdlong	arg01, fp
070f8     08 4E 85 F1 | 	sub	fp, #8
070fc     01 14 66 F6 | 	neg	arg02, #1
07100     A4 BF B1 FD | 	call	#_pslpoke
07104                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07104                 | ' 
07104                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07104     28 4E 05 F1 | 	add	fp, #40
07108     A7 26 02 FB | 	rdlong	local01, fp
0710c     28 4E 85 F1 | 	sub	fp, #40
07110     FF FF 3F FF 
07114     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07118     24 4E 05 A1 |  if_e	add	fp, #36
0711c     A7 28 02 AB |  if_e	rdlong	local02, fp
07120     24 4E 85 A1 |  if_e	sub	fp, #36
07124     FF FF 7F AF 
07128     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
0712c     88 00 90 5D |  if_ne	jmp	#LR__0601
07130     4A 00 00 FF 
07134     88 E4 05 F1 | 	add	objptr, ##38024
07138     00 04 80 FF 
0713c     F2 00 68 FC | 	wrlong	##524288, objptr
07140     07 00 00 FF 
07144     2C E4 85 F1 | 	sub	objptr, ##3628
07148     00 04 80 FF 
0714c     F2 00 68 FC | 	wrlong	##524288, objptr
07150     07 00 00 FF 
07154     30 E4 05 F1 | 	add	objptr, ##3632
07158     F2 00 68 FC | 	wrlong	#0, objptr
0715c     04 E4 05 F1 | 	add	objptr, #4
07160     FF FF FF FF 
07164     F2 FE 6B FC | 	wrlong	##-1, objptr
07168     4A 00 00 FF 
0716c     90 E4 85 F1 | 	sub	objptr, ##38032
07170     00 12 06 F6 | 	mov	arg01, #0
07174     01 14 66 F6 | 	neg	arg02, #1
07178     2C BF B1 FD | 	call	#_pslpoke
0717c     10 12 06 F6 | 	mov	arg01, #16
07180     01 14 66 F6 | 	neg	arg02, #1
07184     20 BF B1 FD | 	call	#_pslpoke
07188     14 12 06 F6 | 	mov	arg01, #20
0718c     1E 14 CE F9 | 	bmask	arg02, #30
07190     14 BF B1 FD | 	call	#_pslpoke
07194     50 00 00 FF 
07198     B8 E4 05 F1 | 	add	objptr, ##41144
0719c     00 04 80 FF 
071a0     F2 00 68 FC | 	wrlong	##524288, objptr
071a4     04 E4 05 F1 | 	add	objptr, #4
071a8     00 04 80 FF 
071ac     F2 00 68 FC | 	wrlong	##524288, objptr
071b0     50 00 00 FF 
071b4     BC E4 85 F1 | 	sub	objptr, ##41148
071b8                 | LR__0601
071b8                 | ' 
071b8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
071b8     28 4E 05 F1 | 	add	fp, #40
071bc     A7 26 02 FB | 	rdlong	local01, fp
071c0     28 4E 85 F1 | 	sub	fp, #40
071c4     FF FF 3F FF 
071c8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
071cc     74 00 90 5D |  if_ne	jmp	#LR__0602
071d0     24 4E 05 F1 | 	add	fp, #36
071d4     A7 28 02 FB | 	rdlong	local02, fp
071d8     24 4E 85 F1 | 	sub	fp, #36
071dc     FF FF 7F FF 
071e0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
071e4     5C 00 90 AD |  if_e	jmp	#LR__0602
071e8     24 4E 05 F1 | 	add	fp, #36
071ec     A7 12 02 FB | 	rdlong	arg01, fp
071f0     24 4E 85 F1 | 	sub	fp, #36
071f4     14 12 06 F1 | 	add	arg01, #20
071f8     1E 14 CE F9 | 	bmask	arg02, #30
071fc     A8 BE B1 FD | 	call	#_pslpoke
07200     24 4E 05 F1 | 	add	fp, #36
07204     A7 26 02 FB | 	rdlong	local01, fp
07208     4A 00 00 FF 
0720c     90 E4 05 F1 | 	add	objptr, ##38032
07210     F2 26 62 FC | 	wrlong	local01, objptr
07214     4A 00 00 FF 
07218     90 E4 85 F1 | 	sub	objptr, ##38032
0721c     A7 12 02 FB | 	rdlong	arg01, fp
07220     24 4E 85 F1 | 	sub	fp, #36
07224     B0 BF B1 FD | 	call	#_pslpeek
07228     4A 00 00 FF 
0722c     8C E4 05 F1 | 	add	objptr, ##38028
07230     F2 FA 61 FC | 	wrlong	result1, objptr
07234     4A 00 00 FF 
07238     8C E4 85 F1 | 	sub	objptr, ##38028
0723c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0723c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0723c                 | '   lastline=pslpeek(header(4))
0723c                 | '   return 0
0723c     00 FA 05 F6 | 	mov	result1, #0
07240     E0 00 90 FD | 	jmp	#LR__0605
07244                 | LR__0602
07244                 | ' 
07244                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07244     28 4E 05 F1 | 	add	fp, #40
07248     A7 26 02 FB | 	rdlong	local01, fp
0724c     28 4E 85 F1 | 	sub	fp, #40
07250     FF FF 3F FF 
07254     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07258     58 00 90 AD |  if_e	jmp	#LR__0603
0725c     24 4E 05 F1 | 	add	fp, #36
07260     A7 28 02 FB | 	rdlong	local02, fp
07264     24 4E 85 F1 | 	sub	fp, #36
07268     FF FF 7F FF 
0726c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07270     40 00 90 5D |  if_ne	jmp	#LR__0603
07274     28 4E 05 F1 | 	add	fp, #40
07278     A7 12 02 FB | 	rdlong	arg01, fp
0727c     28 4E 85 F1 | 	sub	fp, #40
07280     10 12 06 F1 | 	add	arg01, #16
07284     01 14 66 F6 | 	neg	arg02, #1
07288     1C BE B1 FD | 	call	#_pslpoke
0728c     28 4E 05 F1 | 	add	fp, #40
07290     A7 26 02 FB | 	rdlong	local01, fp
07294     28 4E 85 F1 | 	sub	fp, #40
07298     4A 00 00 FF 
0729c     88 E4 05 F1 | 	add	objptr, ##38024
072a0     F2 26 62 FC | 	wrlong	local01, objptr
072a4     4A 00 00 FF 
072a8     88 E4 85 F1 | 	sub	objptr, ##38024
072ac                 | ' '   print "deleted first line"
072ac                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
072ac                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
072ac                 | '   return 0
072ac     00 FA 05 F6 | 	mov	result1, #0
072b0     70 00 90 FD | 	jmp	#LR__0605
072b4                 | LR__0603
072b4                 | ' 
072b4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
072b4     28 4E 05 F1 | 	add	fp, #40
072b8     A7 26 02 FB | 	rdlong	local01, fp
072bc     28 4E 85 F1 | 	sub	fp, #40
072c0     FF FF 3F FF 
072c4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
072c8     24 4E 05 51 |  if_ne	add	fp, #36
072cc     A7 28 02 5B |  if_ne	rdlong	local02, fp
072d0     24 4E 85 51 |  if_ne	sub	fp, #36
072d4     FF FF 7F 5F 
072d8     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
072dc     40 00 90 AD |  if_e	jmp	#LR__0604
072e0     28 4E 05 F1 | 	add	fp, #40
072e4     A7 12 02 FB | 	rdlong	arg01, fp
072e8     10 12 06 F1 | 	add	arg01, #16
072ec     04 4E 85 F1 | 	sub	fp, #4
072f0     A7 14 02 FB | 	rdlong	arg02, fp
072f4     24 4E 85 F1 | 	sub	fp, #36
072f8     AC BD B1 FD | 	call	#_pslpoke
072fc     24 4E 05 F1 | 	add	fp, #36
07300     A7 12 02 FB | 	rdlong	arg01, fp
07304     14 12 06 F1 | 	add	arg01, #20
07308     04 4E 05 F1 | 	add	fp, #4
0730c     A7 14 02 FB | 	rdlong	arg02, fp
07310     28 4E 85 F1 | 	sub	fp, #40
07314     90 BD B1 FD | 	call	#_pslpoke
07318                 | '    pslpoke(header(5)+16,header(4))  
07318                 | '    pslpoke(header(4)+20, header(5))
07318                 | '    return 0
07318     00 FA 05 F6 | 	mov	result1, #0
0731c     04 00 90 FD | 	jmp	#LR__0605
07320                 | LR__0604
07320     00 FA 05 F6 | 	mov	result1, #0
07324                 | LR__0605
07324     A7 F0 03 F6 | 	mov	ptra, fp
07328     B2 00 A0 FD | 	call	#popregs_
0732c                 | _deleteline_ret
0732c     2D 00 64 FD | 	ret
07330                 | 
07330                 | ' 
07330                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07330                 | ' 
07330                 | ' sub save_line
07330                 | _save_line
07330     03 4A 05 F6 | 	mov	COUNT_, #3
07334     A8 00 A0 FD | 	call	#pushregs_
07338     4A 00 00 FF 
0733c     7C E4 05 F1 | 	add	objptr, ##38012
07340     F2 16 02 FB | 	rdlong	arg03, objptr
07344     01 16 06 F1 | 	add	arg03, #1
07348     05 00 00 FF 
0734c     18 E4 85 F1 | 	sub	objptr, ##2584
07350     F2 14 02 FB | 	rdlong	arg02, objptr
07354     0B 15 02 FD | 	qmul	arg02, arg03
07358     0E 00 00 FF 
0735c     44 E4 85 F1 | 	sub	objptr, ##7236
07360     F2 12 02 FB | 	rdlong	arg01, objptr
07364     37 00 00 FF 
07368     20 E4 85 F1 | 	sub	objptr, ##28192
0736c     09 27 02 F6 | 	mov	local01, arg01
07370     18 28 62 FD | 	getqx	local02
07374     97 06 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
07378                 | LR__0610
07378     13 FB C9 FA | 	rdbyte	result1, local01 wz
0737c     01 26 06 51 |  if_ne	add	local01, #1
07380     F4 FF 9F 5D |  if_ne	jmp	#LR__0610
07384                 | LR__0611
07384     09 27 82 F1 | 	sub	local01, arg01
07388     03 26 CE F7 | 	test	local01, #3 wz
0738c     02 26 46 50 |  if_ne	shr	local01, #2
07390     01 26 06 51 |  if_ne	add	local01, #1
07394     02 26 66 50 |  if_ne	shl	local01, #2
07398     14 2B 02 F6 | 	mov	local03, local02
0739c     13 2B 02 F1 | 	add	local03, local01
073a0     43 00 00 FF 
073a4     5C E4 05 F1 | 	add	objptr, ##34396
073a8     F2 16 02 FB | 	rdlong	arg03, objptr
073ac     14 17 02 F1 | 	add	arg03, local02
073b0     04 00 00 FF 
073b4     28 E4 05 F1 | 	add	objptr, ##2088
073b8     F2 16 62 FC | 	wrlong	arg03, objptr
073bc     04 E4 05 F1 | 	add	objptr, #4
073c0     F2 26 62 FC | 	wrlong	local01, objptr
073c4     0C E4 85 F1 | 	sub	objptr, #12
073c8     F2 12 02 F6 | 	mov	arg01, objptr
073cc     04 00 00 FF 
073d0     20 E4 85 F1 | 	sub	objptr, ##2080
073d4     F2 14 02 FB | 	rdlong	arg02, objptr
073d8     14 17 02 F6 | 	mov	arg03, local02
073dc     37 00 00 FF 
073e0     90 E5 85 F1 | 	sub	objptr, ##28560
073e4     24 E9 B1 FD | 	call	#_psram_spin2_write
073e8     2B 00 00 FF 
073ec     54 E5 05 F1 | 	add	objptr, ##22356
073f0     F2 12 02 FB | 	rdlong	arg01, objptr
073f4     0C 00 00 FF 
073f8     3C E4 05 F1 | 	add	objptr, ##6204
073fc     F2 14 02 FB | 	rdlong	arg02, objptr
07400     14 15 02 F1 | 	add	arg02, local02
07404     13 17 02 F6 | 	mov	arg03, local01
07408     37 00 00 FF 
0740c     90 E5 85 F1 | 	sub	objptr, ##28560
07410     F8 E8 B1 FD | 	call	#_psram_spin2_write
07414     37 00 00 FF 
07418     90 E5 05 F1 | 	add	objptr, ##28560
0741c     F2 26 02 FB | 	rdlong	local01, objptr
07420     15 27 02 F1 | 	add	local01, local03
07424     F2 26 62 FC | 	wrlong	local01, objptr
07428     43 00 00 FF 
0742c     5C E4 85 F1 | 	sub	objptr, ##34396
07430     A7 F0 03 F6 | 	mov	ptra, fp
07434     B2 00 A0 FD | 	call	#popregs_
07438                 | _save_line_ret
07438     2D 00 64 FD | 	ret
0743c                 | 
0743c                 | ' 
0743c                 | ' '----- Insert a new line into the middle of the program
0743c                 | ' 
0743c                 | ' function insertline(aline as ulong) as integer
0743c                 | _insertline
0743c     02 4A 05 F6 | 	mov	COUNT_, #2
07440     A8 00 A0 FD | 	call	#pushregs_
07444     28 F0 07 F1 | 	add	ptra, #40
07448     04 4E 05 F1 | 	add	fp, #4
0744c     A7 12 62 FC | 	wrlong	arg01, fp
07450     4A 00 00 FF 
07454     88 E4 05 F1 | 	add	objptr, ##38024
07458     F2 26 02 FB | 	rdlong	local01, objptr
0745c     04 4E 05 F1 | 	add	fp, #4
07460     A7 26 62 FC | 	wrlong	local01, fp
07464     08 4E 85 F1 | 	sub	fp, #8
07468                 | ' 
07468                 | ' do
07468     3E 00 00 FF 
0746c     BC E5 85 F1 | 	sub	objptr, ##32188
07470                 | LR__0620
07470     10 4E 05 F1 | 	add	fp, #16
07474     A7 12 02 F6 | 	mov	arg01, fp
07478     08 4E 85 F1 | 	sub	fp, #8
0747c     A7 14 02 FB | 	rdlong	arg02, fp
07480     08 4E 85 F1 | 	sub	fp, #8
07484     18 16 06 F6 | 	mov	arg03, #24
07488     E4 E7 B1 FD | 	call	#_psram_spin2_read1
0748c     08 4E 05 F1 | 	add	fp, #8
07490     A7 26 02 FB | 	rdlong	local01, fp
07494     04 4E 05 F1 | 	add	fp, #4
07498     A7 26 62 FC | 	wrlong	local01, fp
0749c     18 4E 05 F1 | 	add	fp, #24
074a0     A7 26 02 FB | 	rdlong	local01, fp
074a4     1C 4E 85 F1 | 	sub	fp, #28
074a8     A7 26 62 FC | 	wrlong	local01, fp
074ac     08 4E 05 F1 | 	add	fp, #8
074b0     A7 26 02 FB | 	rdlong	local01, fp
074b4     0C 4E 85 F1 | 	sub	fp, #12
074b8     A7 16 02 FB | 	rdlong	arg03, fp
074bc     04 4E 85 F1 | 	sub	fp, #4
074c0     0B 27 12 F2 | 	cmp	local01, arg03 wc
074c4     24 4E 05 C1 |  if_b	add	fp, #36
074c8     A7 28 02 CB |  if_b	rdlong	local02, fp
074cc     24 4E 85 C1 |  if_b	sub	fp, #36
074d0     FF FF 3F CF 
074d4     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
074d8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
074dc     0B 00 00 FF 
074e0     CC E4 85 F1 | 	sub	objptr, ##5836
074e4                 | ' 
074e4                 | ' if header(0)=aline then return -1 				' delete it first
074e4     10 4E 05 F1 | 	add	fp, #16
074e8     A7 26 02 FB | 	rdlong	local01, fp
074ec     0C 4E 85 F1 | 	sub	fp, #12
074f0     A7 28 02 FB | 	rdlong	local02, fp
074f4     04 4E 85 F1 | 	sub	fp, #4
074f8     14 27 0A F2 | 	cmp	local01, local02 wz
074fc     01 FA 65 A6 |  if_e	neg	result1, #1
07500     48 01 90 AD |  if_e	jmp	#LR__0623
07504                 | ' if header(0)<aline then return -2 				' end of program reached
07504     10 4E 05 F1 | 	add	fp, #16
07508     A7 26 02 FB | 	rdlong	local01, fp
0750c     0C 4E 85 F1 | 	sub	fp, #12
07510     A7 16 02 FB | 	rdlong	arg03, fp
07514     04 4E 85 F1 | 	sub	fp, #4
07518     0B 27 12 F2 | 	cmp	local01, arg03 wc
0751c     02 FA 65 C6 |  if_b	neg	result1, #2
07520     28 01 90 CD |  if_b	jmp	#LR__0623
07524                 | ' 
07524                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07524     20 4E 05 F1 | 	add	fp, #32
07528     A7 26 02 FB | 	rdlong	local01, fp
0752c     20 4E 85 F1 | 	sub	fp, #32
07530     FF FF 7F FF 
07534     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07538     78 00 90 5D |  if_ne	jmp	#LR__0621
0753c     43 00 00 FF 
07540     5C E4 05 F1 | 	add	objptr, ##34396
07544     F2 26 02 FB | 	rdlong	local01, objptr
07548     07 00 00 FF 
0754c     2C E4 05 F1 | 	add	objptr, ##3628
07550     F2 26 62 FC | 	wrlong	local01, objptr
07554     0C 4E 05 F1 | 	add	fp, #12
07558     A7 12 02 FB | 	rdlong	arg01, fp
0755c     0C 4E 85 F1 | 	sub	fp, #12
07560     10 12 06 F1 | 	add	arg01, #16
07564     07 00 00 FF 
07568     2C E4 85 F1 | 	sub	objptr, ##3628
0756c     F2 14 02 FB | 	rdlong	arg02, objptr
07570     43 00 00 FF 
07574     5C E4 85 F1 | 	sub	objptr, ##34396
07578     2C BB B1 FD | 	call	#_pslpoke
0757c     47 00 00 FF 
07580     8C E4 05 F1 | 	add	objptr, ##36492
07584     FF FF FF FF 
07588     F2 FE 6B FC | 	wrlong	##-1, objptr
0758c     0C 4E 05 F1 | 	add	fp, #12
07590     A7 26 02 FB | 	rdlong	local01, fp
07594     0C 4E 85 F1 | 	sub	fp, #12
07598     04 E4 05 F1 | 	add	objptr, #4
0759c     F2 26 62 FC | 	wrlong	local01, objptr
075a0     47 00 00 FF 
075a4     90 E4 85 F1 | 	sub	objptr, ##36496
075a8     84 FD BF FD | 	call	#_save_line
075ac                 | '   programstart=programptr
075ac                 | '   pslpoke(lineptr2+16,programptr)
075ac                 | '   ucompiledline(4)=$FFFF_FFFF
075ac                 | '   ucompiledline(5)=lineptr2
075ac                 | '   save_line
075ac                 | '   return 0
075ac     00 FA 05 F6 | 	mov	result1, #0
075b0     98 00 90 FD | 	jmp	#LR__0623
075b4                 | LR__0621
075b4                 | ' 
075b4                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
075b4     20 4E 05 F1 | 	add	fp, #32
075b8     A7 26 02 FB | 	rdlong	local01, fp
075bc     20 4E 85 F1 | 	sub	fp, #32
075c0     FF FF 7F FF 
075c4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
075c8     7C 00 90 AD |  if_e	jmp	#LR__0622
075cc     20 4E 05 F1 | 	add	fp, #32
075d0     A7 26 02 FB | 	rdlong	local01, fp
075d4     47 00 00 FF 
075d8     8C E4 05 F1 | 	add	objptr, ##36492
075dc     F2 26 62 FC | 	wrlong	local01, objptr
075e0     14 4E 85 F1 | 	sub	fp, #20
075e4     A7 26 02 FB | 	rdlong	local01, fp
075e8     04 E4 05 F1 | 	add	objptr, #4
075ec     F2 26 62 FC | 	wrlong	local01, objptr
075f0     A7 12 02 FB | 	rdlong	arg01, fp
075f4     0C 4E 85 F1 | 	sub	fp, #12
075f8     10 12 06 F1 | 	add	arg01, #16
075fc     04 00 00 FF 
07600     34 E4 85 F1 | 	sub	objptr, ##2100
07604     F2 14 02 FB | 	rdlong	arg02, objptr
07608     43 00 00 FF 
0760c     5C E4 85 F1 | 	sub	objptr, ##34396
07610     94 BA B1 FD | 	call	#_pslpoke
07614     20 4E 05 F1 | 	add	fp, #32
07618     A7 12 02 FB | 	rdlong	arg01, fp
0761c     20 4E 85 F1 | 	sub	fp, #32
07620     14 12 06 F1 | 	add	arg01, #20
07624     43 00 00 FF 
07628     5C E4 05 F1 | 	add	objptr, ##34396
0762c     F2 14 02 FB | 	rdlong	arg02, objptr
07630     43 00 00 FF 
07634     5C E4 85 F1 | 	sub	objptr, ##34396
07638     6C BA B1 FD | 	call	#_pslpoke
0763c     F0 FC BF FD | 	call	#_save_line
07640                 | '   ucompiledline(4)=header(4)
07640                 | '   ucompiledline(5)=lineptr2
07640                 | '   pslpoke(lineptr2+16,programptr)
07640                 | '   pslpoke(header(4)+20,programptr)
07640                 | '   save_line
07640                 | '   return 0
07640     00 FA 05 F6 | 	mov	result1, #0
07644     04 00 90 FD | 	jmp	#LR__0623
07648                 | LR__0622
07648     00 FA 05 F6 | 	mov	result1, #0
0764c                 | LR__0623
0764c     A7 F0 03 F6 | 	mov	ptra, fp
07650     B2 00 A0 FD | 	call	#popregs_
07654                 | _insertline_ret
07654     2D 00 64 FD | 	ret
07658                 | 
07658                 | ' 
07658                 | ' '----- Adds a new line at the end of the program
07658                 | ' 
07658                 | ' sub add_line_at_end(aline) 
07658                 | _add_line_at_end
07658     4A 00 00 FF 
0765c     8C E4 05 F1 | 	add	objptr, ##38028
07660     F2 12 62 FC | 	wrlong	arg01, objptr
07664     04 E4 05 F1 | 	add	objptr, #4
07668     F2 14 02 FB | 	rdlong	arg02, objptr
0766c     03 00 00 FF 
07670     04 E4 85 F1 | 	sub	objptr, ##1540
07674     F2 14 62 FC | 	wrlong	arg02, objptr
07678     03 00 00 FF 
0767c     04 E4 05 F1 | 	add	objptr, ##1540
07680     F2 12 02 FB | 	rdlong	arg01, objptr
07684     14 12 06 F1 | 	add	arg01, #20
07688     07 00 00 FF 
0768c     34 E4 85 F1 | 	sub	objptr, ##3636
07690     F2 14 02 FB | 	rdlong	arg02, objptr
07694     43 00 00 FF 
07698     5C E4 85 F1 | 	sub	objptr, ##34396
0769c     08 BA B1 FD | 	call	#_pslpoke
076a0     43 00 00 FF 
076a4     5C E4 05 F1 | 	add	objptr, ##34396
076a8     F2 14 02 FB | 	rdlong	arg02, objptr
076ac     07 00 00 FF 
076b0     34 E4 05 F1 | 	add	objptr, ##3636
076b4     F2 14 62 FC | 	wrlong	arg02, objptr
076b8     03 00 00 FF 
076bc     00 E4 85 F1 | 	sub	objptr, ##1536
076c0     FF FF BF FF 
076c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
076c8                 | ' 
076c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
076c8                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
076c8     04 00 00 FF 
076cc     34 E4 85 F1 | 	sub	objptr, ##2100
076d0     F2 14 02 FB | 	rdlong	arg02, objptr
076d4     43 00 00 FF 
076d8     5C E4 85 F1 | 	sub	objptr, ##34396
076dc     00 04 00 FF 
076e0     00 14 0E F2 | 	cmp	arg02, ##524288 wz
076e4     47 00 00 AF 
076e8     8C E4 05 A1 |  if_e	add	objptr, ##36492
076ec     FF FF FF AF 
076f0     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
076f4     47 00 00 AF 
076f8     8C E4 85 A1 |  if_e	sub	objptr, ##36492
076fc     30 FC BF FD | 	call	#_save_line
07700     43 00 00 FF 
07704     5C E4 05 F1 | 	add	objptr, ##34396
07708     F2 12 02 FB | 	rdlong	arg01, objptr
0770c     43 00 00 FF 
07710     5C E4 85 F1 | 	sub	objptr, ##34396
07714     01 14 66 F6 | 	neg	arg02, #1
07718     8C B9 B1 FD | 	call	#_pslpoke
0771c                 | _add_line_at_end_ret
0771c     2D 00 64 FD | 	ret
07720                 | 
07720                 | ' 
07720                 | ' '--------------------------------------------------------------------------------------------------------------------------
07720                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
07720                 | ' '--------------------------------------------------------------------------------------------------------------------------
07720                 | ' 
07720                 | ' '--------------------------------------------------------------------------------------------------------------------------
07720                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
07720                 | ' '--------------------------------------------------------------------------------------------------------------------------
07720                 | ' 
07720                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
07720                 | ' 
07720                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
07720                 | _compile_immediate
07720     0A 4A 05 F6 | 	mov	COUNT_, #10
07724     A8 00 A0 FD | 	call	#pushregs_
07728                 | _compile_immediate_enter
07728     09 2D 02 F6 | 	mov	local04, arg01
0772c     0A 2F 02 F6 | 	mov	local05, arg02
07730     00 30 06 F6 | 	mov	local06, #0
07734     00 32 06 F6 | 	mov	local07, #0
07738     00 34 06 F6 | 	mov	local08, #0
0773c                 | ' 
0773c                 | ' ' linetype=cont+1
0773c                 | ' ' 1 : this is the first part of the line that will continue
0773c                 | ' ' 2 - this is the continuation of the line
0773c                 | ' ' 3 - this is the last continued line
0773c                 | ' ' 4 - this is the one and only part
0773c                 | ' ' 5 - continued after if/else
0773c                 | ' 
0773c                 | ' err=0
0773c                 | ' cmd=0
0773c                 | ' vars=0
0773c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
0773c     02 2C 0E F2 | 	cmp	local04, #2 wz
07740     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07744     24 00 90 5D |  if_ne	jmp	#LR__0630
07748     35 00 00 FF 
0774c     10 E4 05 F1 | 	add	objptr, ##27152
07750     F2 32 02 FB | 	rdlong	local07, objptr
07754     01 36 06 F6 | 	mov	local09, #1
07758     02 00 00 FF 
0775c     34 E4 05 F1 | 	add	objptr, ##1076
07760     F2 02 68 FC | 	wrlong	#1, objptr
07764     37 00 00 FF 
07768     44 E4 85 F1 | 	sub	objptr, ##28228
0776c                 | LR__0630
0776c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0776c     04 2C 0E F2 | 	cmp	local04, #4 wz
07770     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07774     30 00 90 5D |  if_ne	jmp	#LR__0631
07778     35 00 00 FF 
0777c     18 E4 05 F1 | 	add	objptr, ##27160
07780     F2 32 02 FB | 	rdlong	local07, objptr
07784     02 36 06 F6 | 	mov	local09, #2
07788     02 00 00 FF 
0778c     2C E4 05 F1 | 	add	objptr, ##1068
07790     F2 04 68 FC | 	wrlong	#2, objptr
07794     13 00 00 FF 
07798     38 E4 05 F1 | 	add	objptr, ##9784
0779c     F2 04 68 FC | 	wrlong	#2, objptr
077a0     4A 00 00 FF 
077a4     7C E4 85 F1 | 	sub	objptr, ##38012
077a8                 | LR__0631
077a8                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
077a8     05 2C 0E F2 | 	cmp	local04, #5 wz
077ac     40 00 90 5D |  if_ne	jmp	#LR__0632
077b0     37 00 00 FF 
077b4     44 E4 05 F1 | 	add	objptr, ##28228
077b8     F2 FC 01 FB | 	rdlong	result2, objptr
077bc     FE 36 02 F6 | 	mov	local09, result2
077c0     03 36 66 F0 | 	shl	local09, #3
077c4     02 00 00 FF 
077c8     38 E4 85 F1 | 	sub	objptr, ##1080
077cc     F2 36 02 F1 | 	add	local09, objptr
077d0     04 36 06 F1 | 	add	local09, #4
077d4     1B 33 02 FB | 	rdlong	local07, local09
077d8     01 FC 05 F1 | 	add	result2, #1
077dc     02 00 00 FF 
077e0     38 E4 05 F1 | 	add	objptr, ##1080
077e4     F2 FC 61 FC | 	wrlong	result2, objptr
077e8     37 00 00 FF 
077ec     44 E4 85 F1 | 	sub	objptr, ##28228
077f0                 | LR__0632
077f0                 | ' 
077f0                 | ' 'print  "In compile_immediate cmd=:", cmd
077f0                 | ' 451 select case cmd
077f0     5C 32 0E F2 | 	cmp	local07, #92 wz
077f4     CC 02 90 AD |  if_e	jmp	#LR__0633
077f8     B9 32 0E F2 | 	cmp	local07, #185 wz
077fc     D0 02 90 AD |  if_e	jmp	#LR__0634
07800     47 32 0E F2 | 	cmp	local07, #71 wz
07804     D8 02 90 AD |  if_e	jmp	#LR__0635
07808     59 32 0E F2 | 	cmp	local07, #89 wz
0780c     E0 02 90 AD |  if_e	jmp	#LR__0636
07810     C3 32 0E F2 | 	cmp	local07, #195 wz
07814     E8 02 90 AD |  if_e	jmp	#LR__0637
07818     45 32 0E F2 | 	cmp	local07, #69 wz
0781c     EC 02 90 AD |  if_e	jmp	#LR__0638
07820     69 32 0E F2 | 	cmp	local07, #105 wz
07824     F4 02 90 AD |  if_e	jmp	#LR__0639
07828     40 32 0E F2 | 	cmp	local07, #64 wz
0782c     D4 06 90 AD |  if_e	jmp	#LR__0713
07830     B4 32 0E F2 | 	cmp	local07, #180 wz
07834     F0 02 90 AD |  if_e	jmp	#LR__0640
07838     49 32 0E F2 | 	cmp	local07, #73 wz
0783c     F4 02 90 AD |  if_e	jmp	#LR__0641
07840     C4 32 0E F2 | 	cmp	local07, #196 wz
07844     F8 02 90 AD |  if_e	jmp	#LR__0642
07848     AE 32 0E F2 | 	cmp	local07, #174 wz
0784c     FC 02 90 AD |  if_e	jmp	#LR__0643
07850     B0 32 0E F2 | 	cmp	local07, #176 wz
07854     00 03 90 AD |  if_e	jmp	#LR__0644
07858     AF 32 0E F2 | 	cmp	local07, #175 wz
0785c     04 03 90 AD |  if_e	jmp	#LR__0645
07860     B1 32 0E F2 | 	cmp	local07, #177 wz
07864     08 03 90 AD |  if_e	jmp	#LR__0646
07868     CF 32 0E F2 | 	cmp	local07, #207 wz
0786c     0C 03 90 AD |  if_e	jmp	#LR__0647
07870     68 32 0E F2 | 	cmp	local07, #104 wz
07874     10 03 90 AD |  if_e	jmp	#LR__0648
07878     B7 32 0E F2 | 	cmp	local07, #183 wz
0787c     84 06 90 AD |  if_e	jmp	#LR__0713
07880     74 32 0E F2 | 	cmp	local07, #116 wz
07884     0C 03 90 AD |  if_e	jmp	#LR__0649
07888     73 32 0E F2 | 	cmp	local07, #115 wz
0788c     14 03 90 AD |  if_e	jmp	#LR__0650
07890     6C 32 0E F2 | 	cmp	local07, #108 wz
07894     1C 03 90 AD |  if_e	jmp	#LR__0651
07898     89 32 0E F2 | 	cmp	local07, #137 wz
0789c     64 06 90 AD |  if_e	jmp	#LR__0713
078a0     C2 32 0E F2 | 	cmp	local07, #194 wz
078a4     1C 03 90 AD |  if_e	jmp	#LR__0652
078a8     72 32 0E F2 | 	cmp	local07, #114 wz
078ac     20 03 90 AD |  if_e	jmp	#LR__0653
078b0     5D 32 0E F2 | 	cmp	local07, #93 wz
078b4     24 03 90 AD |  if_e	jmp	#LR__0654
078b8     96 32 0E F2 | 	cmp	local07, #150 wz
078bc     2C 03 90 AD |  if_e	jmp	#LR__0655
078c0     43 32 0E F2 | 	cmp	local07, #67 wz
078c4     30 03 90 AD |  if_e	jmp	#LR__0656
078c8     5A 32 0E F2 | 	cmp	local07, #90 wz
078cc     38 03 90 AD |  if_e	jmp	#LR__0657
078d0     AB 32 0E F2 | 	cmp	local07, #171 wz
078d4     2C 06 90 AD |  if_e	jmp	#LR__0713
078d8     BD 32 0E F2 | 	cmp	local07, #189 wz
078dc     38 03 90 AD |  if_e	jmp	#LR__0658
078e0     BB 32 0E F2 | 	cmp	local07, #187 wz
078e4     40 03 90 AD |  if_e	jmp	#LR__0659
078e8     4E 32 0E F2 | 	cmp	local07, #78 wz
078ec     48 03 90 AD |  if_e	jmp	#LR__0660
078f0     A9 32 0E F2 | 	cmp	local07, #169 wz
078f4     60 03 90 AD |  if_e	jmp	#LR__0662
078f8     46 32 0E F2 | 	cmp	local07, #70 wz
078fc     78 03 90 AD |  if_e	jmp	#LR__0664
07900     71 32 0E F2 | 	cmp	local07, #113 wz
07904     80 03 90 AD |  if_e	jmp	#LR__0665
07908     60 32 0E F2 | 	cmp	local07, #96 wz
0790c     84 03 90 AD |  if_e	jmp	#LR__0666
07910     4A 32 0E F2 | 	cmp	local07, #74 wz
07914     88 03 90 AD |  if_e	jmp	#LR__0667
07918     48 32 0E F2 | 	cmp	local07, #72 wz
0791c     8C 03 90 AD |  if_e	jmp	#LR__0668
07920     58 32 0E F2 | 	cmp	local07, #88 wz
07924     94 03 90 AD |  if_e	jmp	#LR__0669
07928     5F 32 0E F2 | 	cmp	local07, #95 wz
0792c     9C 03 90 AD |  if_e	jmp	#LR__0670
07930     B5 32 0E F2 | 	cmp	local07, #181 wz
07934     A0 03 90 AD |  if_e	jmp	#LR__0671
07938     8A 32 0E F2 | 	cmp	local07, #138 wz
0793c     A8 03 90 AD |  if_e	jmp	#LR__0672
07940     4C 32 0E F2 | 	cmp	local07, #76 wz
07944     AC 03 90 AD |  if_e	jmp	#LR__0673
07948     52 32 0E F2 | 	cmp	local07, #82 wz
0794c     B4 03 90 AD |  if_e	jmp	#LR__0674
07950     97 32 0E F2 | 	cmp	local07, #151 wz
07954     BC 03 90 AD |  if_e	jmp	#LR__0675
07958     C6 32 0E F2 | 	cmp	local07, #198 wz
0795c     C0 03 90 AD |  if_e	jmp	#LR__0676
07960     61 32 0E F2 | 	cmp	local07, #97 wz
07964     C4 03 90 AD |  if_e	jmp	#LR__0677
07968     63 32 0E F2 | 	cmp	local07, #99 wz
0796c     C8 03 90 AD |  if_e	jmp	#LR__0678
07970     41 32 0E F2 | 	cmp	local07, #65 wz
07974     8C 05 90 AD |  if_e	jmp	#LR__0713
07978     4B 32 0E F2 | 	cmp	local07, #75 wz
0797c     C4 03 90 AD |  if_e	jmp	#LR__0679
07980     C1 32 0E F2 | 	cmp	local07, #193 wz
07984     C8 03 90 AD |  if_e	jmp	#LR__0680
07988     B3 32 0E F2 | 	cmp	local07, #179 wz
0798c     CC 03 90 AD |  if_e	jmp	#LR__0681
07990     5E 32 0E F2 | 	cmp	local07, #94 wz
07994     D0 03 90 AD |  if_e	jmp	#LR__0682
07998     7C 32 0E F2 | 	cmp	local07, #124 wz
0799c     D4 03 90 AD |  if_e	jmp	#LR__0683
079a0     7D 32 0E F2 | 	cmp	local07, #125 wz
079a4     D8 03 90 AD |  if_e	jmp	#LR__0684
079a8     7E 32 0E F2 | 	cmp	local07, #126 wz
079ac     DC 03 90 AD |  if_e	jmp	#LR__0685
079b0     7F 32 0E F2 | 	cmp	local07, #127 wz
079b4     E0 03 90 AD |  if_e	jmp	#LR__0686
079b8     80 32 0E F2 | 	cmp	local07, #128 wz
079bc     E4 03 90 AD |  if_e	jmp	#LR__0687
079c0     55 32 0E F2 | 	cmp	local07, #85 wz
079c4     E8 03 90 AD |  if_e	jmp	#LR__0688
079c8     75 32 0E F2 | 	cmp	local07, #117 wz
079cc     EC 03 90 AD |  if_e	jmp	#LR__0689
079d0     42 32 0E F2 | 	cmp	local07, #66 wz
079d4     F4 03 90 AD |  if_e	jmp	#LR__0690
079d8     95 32 0E F2 | 	cmp	local07, #149 wz
079dc     FC 03 90 AD |  if_e	jmp	#LR__0691
079e0     AC 32 0E F2 | 	cmp	local07, #172 wz
079e4     1C 05 90 AD |  if_e	jmp	#LR__0713
079e8     81 32 0E F2 | 	cmp	local07, #129 wz
079ec     F8 03 90 AD |  if_e	jmp	#LR__0692
079f0     44 32 0E F2 | 	cmp	local07, #68 wz
079f4     FC 03 90 AD |  if_e	jmp	#LR__0693
079f8     BC 32 0E F2 | 	cmp	local07, #188 wz
079fc     00 04 90 AD |  if_e	jmp	#LR__0694
07a00     88 32 0E F2 | 	cmp	local07, #136 wz
07a04     FC 04 90 AD |  if_e	jmp	#LR__0713
07a08     B6 32 0E F2 | 	cmp	local07, #182 wz
07a0c     00 04 90 AD |  if_e	jmp	#LR__0695
07a10     92 32 0E F2 | 	cmp	local07, #146 wz
07a14     08 04 90 AD |  if_e	jmp	#LR__0696
07a18     BE 32 0E F2 | 	cmp	local07, #190 wz
07a1c     A0 05 90 AD |  if_e	jmp	#LR__0714
07a20     C7 32 0E F2 | 	cmp	local07, #199 wz
07a24     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07a28     D8 04 90 AD |  if_e	jmp	#LR__0713
07a2c     4D 32 0E F2 | 	cmp	local07, #77 wz
07a30     F8 03 90 AD |  if_e	jmp	#LR__0697
07a34     51 32 0E F2 | 	cmp	local07, #81 wz
07a38     00 04 90 AD |  if_e	jmp	#LR__0698
07a3c     8E 32 0E F2 | 	cmp	local07, #142 wz
07a40     08 04 90 AD |  if_e	jmp	#LR__0699
07a44     90 32 0E F2 | 	cmp	local07, #144 wz
07a48     0C 04 90 AD |  if_e	jmp	#LR__0700
07a4c     8D 32 0E F2 | 	cmp	local07, #141 wz
07a50     10 04 90 AD |  if_e	jmp	#LR__0701
07a54     8C 32 0E F2 | 	cmp	local07, #140 wz
07a58     14 04 90 AD |  if_e	jmp	#LR__0702
07a5c     91 32 0E F2 | 	cmp	local07, #145 wz
07a60     18 04 90 AD |  if_e	jmp	#LR__0703
07a64     8B 32 0E F2 | 	cmp	local07, #139 wz
07a68     1C 04 90 AD |  if_e	jmp	#LR__0704
07a6c     8F 32 0E F2 | 	cmp	local07, #143 wz
07a70     20 04 90 AD |  if_e	jmp	#LR__0705
07a74     B2 32 0E F2 | 	cmp	local07, #178 wz
07a78     24 04 90 AD |  if_e	jmp	#LR__0706
07a7c     6D 32 0E F2 | 	cmp	local07, #109 wz
07a80     2C 04 90 AD |  if_e	jmp	#LR__0707
07a84     70 32 0E F2 | 	cmp	local07, #112 wz
07a88     78 04 90 AD |  if_e	jmp	#LR__0713
07a8c     56 32 0E F2 | 	cmp	local07, #86 wz
07a90     28 04 90 AD |  if_e	jmp	#LR__0708
07a94     57 32 0E F2 | 	cmp	local07, #87 wz
07a98     68 04 90 AD |  if_e	jmp	#LR__0713
07a9c     79 32 0E F2 | 	cmp	local07, #121 wz
07aa0     24 04 90 AD |  if_e	jmp	#LR__0709
07aa4     77 32 0E F2 | 	cmp	local07, #119 wz
07aa8     28 04 90 AD |  if_e	jmp	#LR__0710
07aac     78 32 0E F2 | 	cmp	local07, #120 wz
07ab0     2C 04 90 AD |  if_e	jmp	#LR__0711
07ab4     01 00 00 FF 
07ab8     04 32 0E F2 | 	cmp	local07, ##516 wz
07abc     2C 04 90 AD |  if_e	jmp	#LR__0712
07ac0     FC 04 90 FD | 	jmp	#LR__0714
07ac4                 | LR__0633
07ac4     48 0B B0 FD | 	call	#_compile_fun_2p
07ac8     FD 30 02 F6 | 	mov	local06, result1
07acc     34 04 90 FD | 	jmp	#LR__0713
07ad0                 | LR__0634
07ad0     0C 0E B0 FD | 	call	#_compile_fun_varp
07ad4     FD 34 02 F6 | 	mov	local08, result1
07ad8     FE 30 02 F6 | 	mov	local06, result2
07adc     24 04 90 FD | 	jmp	#LR__0713
07ae0                 | LR__0635
07ae0     FC 0D B0 FD | 	call	#_compile_fun_varp
07ae4     FD 34 02 F6 | 	mov	local08, result1
07ae8     FE 30 02 F6 | 	mov	local06, result2
07aec     14 04 90 FD | 	jmp	#LR__0713
07af0                 | LR__0636
07af0     EC 0D B0 FD | 	call	#_compile_fun_varp
07af4     FD 34 02 F6 | 	mov	local08, result1
07af8     FE 30 02 F6 | 	mov	local06, result2
07afc     04 04 90 FD | 	jmp	#LR__0713
07b00                 | LR__0637
07b00                 | ' return expr()
07b00     48 42 B0 FD | 	call	#_expr
07b04     FD 30 02 F6 | 	mov	local06, result1
07b08     F8 03 90 FD | 	jmp	#LR__0713
07b0c                 | LR__0638
07b0c     D0 0D B0 FD | 	call	#_compile_fun_varp
07b10     FD 34 02 F6 | 	mov	local08, result1
07b14     FE 30 02 F6 | 	mov	local06, result2
07b18     E8 03 90 FD | 	jmp	#LR__0713
07b1c                 | LR__0639
07b1c                 | ' return expr()
07b1c     2C 42 B0 FD | 	call	#_expr
07b20     FD 30 02 F6 | 	mov	local06, result1
07b24     DC 03 90 FD | 	jmp	#LR__0713
07b28                 | LR__0640
07b28                 | ' return expr()
07b28     20 42 B0 FD | 	call	#_expr
07b2c     FD 30 02 F6 | 	mov	local06, result1
07b30     D0 03 90 FD | 	jmp	#LR__0713
07b34                 | LR__0641
07b34                 | ' return expr()
07b34     14 42 B0 FD | 	call	#_expr
07b38     FD 30 02 F6 | 	mov	local06, result1
07b3c     C4 03 90 FD | 	jmp	#LR__0713
07b40                 | LR__0642
07b40     CC 0A B0 FD | 	call	#_compile_fun_2p
07b44     FD 30 02 F6 | 	mov	local06, result1
07b48     B8 03 90 FD | 	jmp	#LR__0713
07b4c                 | LR__0643
07b4c     C0 0A B0 FD | 	call	#_compile_fun_2p
07b50     FD 30 02 F6 | 	mov	local06, result1
07b54     AC 03 90 FD | 	jmp	#LR__0713
07b58                 | LR__0644
07b58     B4 0A B0 FD | 	call	#_compile_fun_2p
07b5c     FD 30 02 F6 | 	mov	local06, result1
07b60     A0 03 90 FD | 	jmp	#LR__0713
07b64                 | LR__0645
07b64     A8 0A B0 FD | 	call	#_compile_fun_2p
07b68     FD 30 02 F6 | 	mov	local06, result1
07b6c     94 03 90 FD | 	jmp	#LR__0713
07b70                 | LR__0646
07b70     9C 0A B0 FD | 	call	#_compile_fun_2p
07b74     FD 30 02 F6 | 	mov	local06, result1
07b78     88 03 90 FD | 	jmp	#LR__0713
07b7c                 | LR__0647
07b7c                 | ' return expr()
07b7c     CC 41 B0 FD | 	call	#_expr
07b80     FD 30 02 F6 | 	mov	local06, result1
07b84     7C 03 90 FD | 	jmp	#LR__0713
07b88                 | LR__0648
07b88                 | ' return expr()
07b88     C0 41 B0 FD | 	call	#_expr
07b8c     FD 30 02 F6 | 	mov	local06, result1
07b90     70 03 90 FD | 	jmp	#LR__0713
07b94                 | LR__0649
07b94     48 0D B0 FD | 	call	#_compile_fun_varp
07b98     FD 34 02 F6 | 	mov	local08, result1
07b9c     FE 30 02 F6 | 	mov	local06, result2
07ba0     60 03 90 FD | 	jmp	#LR__0713
07ba4                 | LR__0650
07ba4     38 0D B0 FD | 	call	#_compile_fun_varp
07ba8     FD 34 02 F6 | 	mov	local08, result1
07bac     FE 30 02 F6 | 	mov	local06, result2
07bb0     50 03 90 FD | 	jmp	#LR__0713
07bb4                 | LR__0651
07bb4     28 0D B0 FD | 	call	#_compile_fun_varp
07bb8     FD 34 02 F6 | 	mov	local08, result1
07bbc     FE 30 02 F6 | 	mov	local06, result2
07bc0     40 03 90 FD | 	jmp	#LR__0713
07bc4                 | LR__0652
07bc4                 | ' return expr()
07bc4     84 41 B0 FD | 	call	#_expr
07bc8     FD 30 02 F6 | 	mov	local06, result1
07bcc     34 03 90 FD | 	jmp	#LR__0713
07bd0                 | LR__0653
07bd0     30 22 B0 FD | 	call	#_compile_dim
07bd4     FD 30 02 F6 | 	mov	local06, result1
07bd8     E4 03 90 FD | 	jmp	#LR__0714
07bdc                 | LR__0654
07bdc     00 0D B0 FD | 	call	#_compile_fun_varp
07be0     FD 34 02 F6 | 	mov	local08, result1
07be4     FE 30 02 F6 | 	mov	local06, result2
07be8     18 03 90 FD | 	jmp	#LR__0713
07bec                 | LR__0655
07bec     20 0A B0 FD | 	call	#_compile_fun_2p
07bf0     FD 30 02 F6 | 	mov	local06, result1
07bf4     0C 03 90 FD | 	jmp	#LR__0713
07bf8                 | LR__0656
07bf8     E4 0C B0 FD | 	call	#_compile_fun_varp
07bfc     FD 34 02 F6 | 	mov	local08, result1
07c00     FE 30 02 F6 | 	mov	local06, result2
07c04     FC 02 90 FD | 	jmp	#LR__0713
07c08                 | LR__0657
07c08     17 13 02 F6 | 	mov	arg01, local05
07c0c     BC 20 B0 FD | 	call	#_compile_else
07c10     FD 30 02 F6 | 	mov	local06, result1
07c14     A8 03 90 FD | 	jmp	#LR__0714
07c18                 | LR__0658
07c18     C4 0C B0 FD | 	call	#_compile_fun_varp
07c1c     FD 34 02 F6 | 	mov	local08, result1
07c20     FE 30 02 F6 | 	mov	local06, result2
07c24     DC 02 90 FD | 	jmp	#LR__0713
07c28                 | LR__0659
07c28     B4 0C B0 FD | 	call	#_compile_fun_varp
07c2c     FD 34 02 F6 | 	mov	local08, result1
07c30     FE 30 02 F6 | 	mov	local06, result2
07c34     CC 02 90 FD | 	jmp	#LR__0713
07c38                 | LR__0660
07c38     01 2E 16 F2 | 	cmp	local05, #1 wc
07c3c     08 00 90 CD |  if_b	jmp	#LR__0661
07c40     5C 33 B0 FD | 	call	#_compile_goto
07c44     78 03 90 FD | 	jmp	#LR__0714
07c48                 | LR__0661
07c48     19 12 06 F6 | 	mov	arg01, #25
07c4c     00 14 06 F6 | 	mov	arg02, #0
07c50     B4 B2 B1 FD | 	call	#_printerror
07c54     68 03 90 FD | 	jmp	#LR__0714
07c58                 | LR__0662
07c58     01 2E 16 F2 | 	cmp	local05, #1 wc
07c5c     08 00 90 CD |  if_b	jmp	#LR__0663
07c60     D8 32 B0 FD | 	call	#_compile_gosub
07c64     58 03 90 FD | 	jmp	#LR__0714
07c68                 | LR__0663
07c68     19 12 06 F6 | 	mov	arg01, #25
07c6c     00 14 06 F6 | 	mov	arg02, #0
07c70     94 B2 B1 FD | 	call	#_printerror
07c74     48 03 90 FD | 	jmp	#LR__0714
07c78                 | LR__0664
07c78     64 0C B0 FD | 	call	#_compile_fun_varp
07c7c     FD 34 02 F6 | 	mov	local08, result1
07c80     FE 30 02 F6 | 	mov	local06, result2
07c84     7C 02 90 FD | 	jmp	#LR__0713
07c88                 | LR__0665
07c88     FC 0A B0 FD | 	call	#_compile_fun_4p
07c8c     FD 30 02 F6 | 	mov	local06, result1
07c90     70 02 90 FD | 	jmp	#LR__0713
07c94                 | LR__0666
07c94                 | ' return expr()
07c94     B4 40 B0 FD | 	call	#_expr
07c98     FD 30 02 F6 | 	mov	local06, result1
07c9c     64 02 90 FD | 	jmp	#LR__0713
07ca0                 | LR__0667
07ca0     34 28 B0 FD | 	call	#_compile_for
07ca4     FD 30 02 F6 | 	mov	local06, result1
07ca8     14 03 90 FD | 	jmp	#LR__0714
07cac                 | LR__0668
07cac     30 0C B0 FD | 	call	#_compile_fun_varp
07cb0     FD 34 02 F6 | 	mov	local08, result1
07cb4     FE 30 02 F6 | 	mov	local06, result2
07cb8     48 02 90 FD | 	jmp	#LR__0713
07cbc                 | LR__0669
07cbc     17 13 02 F6 | 	mov	arg01, local05
07cc0     80 1E B0 FD | 	call	#_compile_if
07cc4     FD 30 02 F6 | 	mov	local06, result1
07cc8     F4 02 90 FD | 	jmp	#LR__0714
07ccc                 | LR__0670
07ccc                 | ' return expr()
07ccc     7C 40 B0 FD | 	call	#_expr
07cd0     FD 30 02 F6 | 	mov	local06, result1
07cd4     2C 02 90 FD | 	jmp	#LR__0713
07cd8                 | LR__0671
07cd8     D0 0D B0 FD | 	call	#_compile_input
07cdc     FD 34 02 F6 | 	mov	local08, result1
07ce0     FE 30 02 F6 | 	mov	local06, result2
07ce4     1C 02 90 FD | 	jmp	#LR__0713
07ce8                 | LR__0672
07ce8                 | ' return expr()
07ce8     60 40 B0 FD | 	call	#_expr
07cec     FD 30 02 F6 | 	mov	local06, result1
07cf0     10 02 90 FD | 	jmp	#LR__0713
07cf4                 | LR__0673
07cf4     E8 0B B0 FD | 	call	#_compile_fun_varp
07cf8     FD 34 02 F6 | 	mov	local08, result1
07cfc     FE 30 02 F6 | 	mov	local06, result2
07d00     00 02 90 FD | 	jmp	#LR__0713
07d04                 | LR__0674
07d04     D8 0B B0 FD | 	call	#_compile_fun_varp
07d08     FD 34 02 F6 | 	mov	local08, result1
07d0c     FE 30 02 F6 | 	mov	local06, result2
07d10     F0 01 90 FD | 	jmp	#LR__0713
07d14                 | LR__0675
07d14     F8 08 B0 FD | 	call	#_compile_fun_2p
07d18     FD 30 02 F6 | 	mov	local06, result1
07d1c     E4 01 90 FD | 	jmp	#LR__0713
07d20                 | LR__0676
07d20                 | ' return expr()
07d20     28 40 B0 FD | 	call	#_expr
07d24     FD 30 02 F6 | 	mov	local06, result1
07d28     D8 01 90 FD | 	jmp	#LR__0713
07d2c                 | LR__0677
07d2c                 | ' return expr()
07d2c     1C 40 B0 FD | 	call	#_expr
07d30     FD 30 02 F6 | 	mov	local06, result1
07d34     CC 01 90 FD | 	jmp	#LR__0713
07d38                 | LR__0678
07d38                 | ' return expr()
07d38     10 40 B0 FD | 	call	#_expr
07d3c     FD 30 02 F6 | 	mov	local06, result1
07d40     C0 01 90 FD | 	jmp	#LR__0713
07d44                 | LR__0679
07d44     5C 30 B0 FD | 	call	#_compile_next
07d48     FD 30 02 F6 | 	mov	local06, result1
07d4c     70 02 90 FD | 	jmp	#LR__0714
07d50                 | LR__0680
07d50     3C 36 B0 FD | 	call	#_compile_on
07d54     FD 30 02 F6 | 	mov	local06, result1
07d58     64 02 90 FD | 	jmp	#LR__0714
07d5c                 | LR__0681
07d5c     38 09 B0 FD | 	call	#_compile_fun_3p
07d60     FD 30 02 F6 | 	mov	local06, result1
07d64     9C 01 90 FD | 	jmp	#LR__0713
07d68                 | LR__0682
07d68                 | ' return expr()
07d68     E0 3F B0 FD | 	call	#_expr
07d6c     FD 30 02 F6 | 	mov	local06, result1
07d70     90 01 90 FD | 	jmp	#LR__0713
07d74                 | LR__0683
07d74                 | ' return expr()
07d74     D4 3F B0 FD | 	call	#_expr
07d78     FD 30 02 F6 | 	mov	local06, result1
07d7c     84 01 90 FD | 	jmp	#LR__0713
07d80                 | LR__0684
07d80                 | ' return expr()
07d80     C8 3F B0 FD | 	call	#_expr
07d84     FD 30 02 F6 | 	mov	local06, result1
07d88     78 01 90 FD | 	jmp	#LR__0713
07d8c                 | LR__0685
07d8c                 | ' return expr()
07d8c     BC 3F B0 FD | 	call	#_expr
07d90     FD 30 02 F6 | 	mov	local06, result1
07d94     6C 01 90 FD | 	jmp	#LR__0713
07d98                 | LR__0686
07d98     EC 09 B0 FD | 	call	#_compile_fun_4p
07d9c     FD 30 02 F6 | 	mov	local06, result1
07da0     60 01 90 FD | 	jmp	#LR__0713
07da4                 | LR__0687
07da4                 | ' return expr()
07da4     A4 3F B0 FD | 	call	#_expr
07da8     FD 30 02 F6 | 	mov	local06, result1
07dac     54 01 90 FD | 	jmp	#LR__0713
07db0                 | LR__0688
07db0     5C 08 B0 FD | 	call	#_compile_fun_2p
07db4     FD 30 02 F6 | 	mov	local06, result1
07db8     48 01 90 FD | 	jmp	#LR__0713
07dbc                 | LR__0689
07dbc     20 0B B0 FD | 	call	#_compile_fun_varp
07dc0     FD 34 02 F6 | 	mov	local08, result1
07dc4     FE 30 02 F6 | 	mov	local06, result2
07dc8     38 01 90 FD | 	jmp	#LR__0713
07dcc                 | LR__0690
07dcc     10 0B B0 FD | 	call	#_compile_fun_varp
07dd0     FD 34 02 F6 | 	mov	local08, result1
07dd4     FE 30 02 F6 | 	mov	local06, result2
07dd8     28 01 90 FD | 	jmp	#LR__0713
07ddc                 | LR__0691
07ddc     30 08 B0 FD | 	call	#_compile_fun_2p
07de0     FD 30 02 F6 | 	mov	local06, result1
07de4     1C 01 90 FD | 	jmp	#LR__0713
07de8                 | LR__0692
07de8     24 08 B0 FD | 	call	#_compile_fun_2p
07dec     FD 30 02 F6 | 	mov	local06, result1
07df0     10 01 90 FD | 	jmp	#LR__0713
07df4                 | LR__0693
07df4     74 16 B0 FD | 	call	#_compile_print
07df8     FD 30 02 F6 | 	mov	local06, result1
07dfc     C0 01 90 FD | 	jmp	#LR__0714
07e00                 | LR__0694
07e00     DC 0A B0 FD | 	call	#_compile_fun_varp
07e04     FD 34 02 F6 | 	mov	local08, result1
07e08     FE 30 02 F6 | 	mov	local06, result2
07e0c     F4 00 90 FD | 	jmp	#LR__0713
07e10                 | LR__0695
07e10     A8 0B B0 FD | 	call	#_compile_read
07e14     FD 34 02 F6 | 	mov	local08, result1
07e18     FE 30 02 F6 | 	mov	local06, result2
07e1c     E4 00 90 FD | 	jmp	#LR__0713
07e20                 | LR__0696
07e20                 | ' return expr()
07e20     28 3F B0 FD | 	call	#_expr
07e24     FD 30 02 F6 | 	mov	local06, result1
07e28     D8 00 90 FD | 	jmp	#LR__0713
07e2c                 | LR__0697
07e2c     B0 0A B0 FD | 	call	#_compile_fun_varp
07e30     FD 34 02 F6 | 	mov	local08, result1
07e34     FE 30 02 F6 | 	mov	local06, result2
07e38     C8 00 90 FD | 	jmp	#LR__0713
07e3c                 | LR__0698
07e3c     A0 0A B0 FD | 	call	#_compile_fun_varp
07e40     FD 34 02 F6 | 	mov	local08, result1
07e44     FE 30 02 F6 | 	mov	local06, result2
07e48     B8 00 90 FD | 	jmp	#LR__0713
07e4c                 | LR__0699
07e4c     C0 07 B0 FD | 	call	#_compile_fun_2p
07e50     FD 30 02 F6 | 	mov	local06, result1
07e54     AC 00 90 FD | 	jmp	#LR__0713
07e58                 | LR__0700
07e58     B4 07 B0 FD | 	call	#_compile_fun_2p
07e5c     FD 30 02 F6 | 	mov	local06, result1
07e60     A0 00 90 FD | 	jmp	#LR__0713
07e64                 | LR__0701
07e64     A8 07 B0 FD | 	call	#_compile_fun_2p
07e68     FD 30 02 F6 | 	mov	local06, result1
07e6c     94 00 90 FD | 	jmp	#LR__0713
07e70                 | LR__0702
07e70     9C 07 B0 FD | 	call	#_compile_fun_2p
07e74     FD 30 02 F6 | 	mov	local06, result1
07e78     88 00 90 FD | 	jmp	#LR__0713
07e7c                 | LR__0703
07e7c     90 07 B0 FD | 	call	#_compile_fun_2p
07e80     FD 30 02 F6 | 	mov	local06, result1
07e84     7C 00 90 FD | 	jmp	#LR__0713
07e88                 | LR__0704
07e88     84 07 B0 FD | 	call	#_compile_fun_2p
07e8c     FD 30 02 F6 | 	mov	local06, result1
07e90     70 00 90 FD | 	jmp	#LR__0713
07e94                 | LR__0705
07e94     78 07 B0 FD | 	call	#_compile_fun_2p
07e98     FD 30 02 F6 | 	mov	local06, result1
07e9c     64 00 90 FD | 	jmp	#LR__0713
07ea0                 | LR__0706
07ea0     3C 0A B0 FD | 	call	#_compile_fun_varp
07ea4     FD 34 02 F6 | 	mov	local08, result1
07ea8     FE 30 02 F6 | 	mov	local06, result2
07eac     54 00 90 FD | 	jmp	#LR__0713
07eb0                 | LR__0707
07eb0     E4 07 B0 FD | 	call	#_compile_fun_3p
07eb4     FD 30 02 F6 | 	mov	local06, result1
07eb8     48 00 90 FD | 	jmp	#LR__0713
07ebc                 | LR__0708
07ebc                 | ' return expr()
07ebc     8C 3E B0 FD | 	call	#_expr
07ec0     FD 30 02 F6 | 	mov	local06, result1
07ec4     3C 00 90 FD | 	jmp	#LR__0713
07ec8                 | LR__0709
07ec8     44 07 B0 FD | 	call	#_compile_fun_2p
07ecc     FD 30 02 F6 | 	mov	local06, result1
07ed0     30 00 90 FD | 	jmp	#LR__0713
07ed4                 | LR__0710
07ed4     38 07 B0 FD | 	call	#_compile_fun_2p
07ed8     FD 30 02 F6 | 	mov	local06, result1
07edc     24 00 90 FD | 	jmp	#LR__0713
07ee0                 | LR__0711
07ee0     2C 07 B0 FD | 	call	#_compile_fun_2p
07ee4     FD 30 02 F6 | 	mov	local06, result1
07ee8     18 00 90 FD | 	jmp	#LR__0713
07eec                 | LR__0712
07eec     1C 13 B0 FD | 	call	#_compile_array_assign
07ef0     FD 30 02 F6 | 	mov	local06, result1
07ef4     0E 30 0E F2 | 	cmp	local06, #14 wz
07ef8     C4 00 90 5D |  if_ne	jmp	#LR__0714
07efc                 | ' return 23
07efc     17 30 06 F6 | 	mov	local06, #23
07f00     BC 00 90 FD | 	jmp	#LR__0714
07f04                 | ' return 23
07f04                 | LR__0713
07f04     19 2B 02 F6 | 	mov	local03, local07
07f08     1A 27 02 F6 | 	mov	local01, local08
07f0c     13 37 02 F6 | 	mov	local09, local01
07f10     14 39 02 F6 | 	mov	local10, local02
07f14     15 33 02 F6 | 	mov	local07, local03
07f18     4A 00 00 FF 
07f1c     7C E4 05 F1 | 	add	objptr, ##38012
07f20     F2 26 02 FB | 	rdlong	local01, objptr
07f24     13 35 02 F6 | 	mov	local08, local01
07f28     01 34 66 F0 | 	shl	local08, #1
07f2c     13 35 02 F1 | 	add	local08, local01
07f30     02 34 66 F0 | 	shl	local08, #2
07f34     03 00 00 FF 
07f38     00 E4 85 F1 | 	sub	objptr, ##1536
07f3c     F2 34 02 F1 | 	add	local08, objptr
07f40     1A 37 62 FC | 	wrlong	local09, local08
07f44     03 00 00 FF 
07f48     00 E4 05 F1 | 	add	objptr, ##1536
07f4c     F2 26 02 FB | 	rdlong	local01, objptr
07f50     13 37 02 F6 | 	mov	local09, local01
07f54     01 36 66 F0 | 	shl	local09, #1
07f58     13 37 02 F1 | 	add	local09, local01
07f5c     02 36 66 F0 | 	shl	local09, #2
07f60     03 00 00 FF 
07f64     00 E4 85 F1 | 	sub	objptr, ##1536
07f68     F2 36 02 F1 | 	add	local09, objptr
07f6c     04 36 06 F1 | 	add	local09, #4
07f70     1B 39 62 FC | 	wrlong	local10, local09
07f74     03 00 00 FF 
07f78     00 E4 05 F1 | 	add	objptr, ##1536
07f7c     F2 26 02 FB | 	rdlong	local01, objptr
07f80     13 39 02 F6 | 	mov	local10, local01
07f84     01 38 66 F0 | 	shl	local10, #1
07f88     13 39 02 F1 | 	add	local10, local01
07f8c     02 38 66 F0 | 	shl	local10, #2
07f90     03 00 00 FF 
07f94     00 E4 85 F1 | 	sub	objptr, ##1536
07f98     F2 38 02 F1 | 	add	local10, objptr
07f9c     08 38 06 F1 | 	add	local10, #8
07fa0     1C 33 62 FC | 	wrlong	local07, local10
07fa4     03 00 00 FF 
07fa8     00 E4 05 F1 | 	add	objptr, ##1536
07fac     F2 36 02 FB | 	rdlong	local09, objptr
07fb0     01 36 06 F1 | 	add	local09, #1
07fb4     F2 36 62 FC | 	wrlong	local09, objptr
07fb8     4A 00 00 FF 
07fbc     7C E4 85 F1 | 	sub	objptr, ##38012
07fc0                 | LR__0714
07fc0                 | ' 
07fc0                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07fc0                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07fc0     03 2C 0E F2 | 	cmp	local04, #3 wz
07fc4     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07fc8     38 00 90 5D |  if_ne	jmp	#LR__0715
07fcc     4A 00 00 FF 
07fd0     7C E4 05 F1 | 	add	objptr, ##38012
07fd4     F2 38 02 FB | 	rdlong	local10, objptr
07fd8     1C 27 02 F6 | 	mov	local01, local10
07fdc     01 26 66 F0 | 	shl	local01, #1
07fe0     1C 27 02 F1 | 	add	local01, local10
07fe4     02 26 66 F0 | 	shl	local01, #2
07fe8     03 00 00 FF 
07fec     00 E4 85 F1 | 	sub	objptr, ##1536
07ff0     F2 26 02 F1 | 	add	local01, objptr
07ff4     08 26 06 F1 | 	add	local01, #8
07ff8     13 FD 6B FC | 	wrlong	#510, local01
07ffc     47 00 00 FF 
08000     7C E4 85 F1 | 	sub	objptr, ##36476
08004                 | LR__0715
08004                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
08004                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08004     4A 00 00 FF 
08008     7C E4 05 F1 | 	add	objptr, ##38012
0800c     F2 26 02 FB | 	rdlong	local01, objptr
08010     4A 00 00 FF 
08014     7C E4 85 F1 | 	sub	objptr, ##38012
08018     97 58 48 FB | 	callpa	#(@LR__0718-@LR__0716)>>2,fcache_load_ptr_
0801c                 | LR__0716
0801c     13 39 02 F6 | 	mov	local10, local01
08020     01 38 66 F0 | 	shl	local10, #1
08024     13 39 02 F1 | 	add	local10, local01
08028     02 38 66 F0 | 	shl	local10, #2
0802c     47 00 00 FF 
08030     7C E4 05 F1 | 	add	objptr, ##36476
08034     F2 38 02 F1 | 	add	local10, objptr
08038     08 38 06 F1 | 	add	local10, #8
0803c     1C 39 02 FB | 	rdlong	local10, local10
08040     9B 38 0E F2 | 	cmp	local10, #155 wz
08044     47 00 00 FF 
08048     7C E4 85 F1 | 	sub	objptr, ##36476
0804c     70 00 90 5D |  if_ne	jmp	#LR__0717
08050     13 37 02 F6 | 	mov	local09, local01
08054     01 36 86 F1 | 	sub	local09, #1
08058     1B 39 02 F6 | 	mov	local10, local09
0805c     01 38 66 F0 | 	shl	local10, #1
08060     1B 39 02 F1 | 	add	local10, local09
08064     02 38 66 F0 | 	shl	local10, #2
08068     47 00 00 FF 
0806c     7C E4 05 F1 | 	add	objptr, ##36476
08070     F2 38 02 F1 | 	add	local10, objptr
08074     08 38 06 F1 | 	add	local10, #8
08078     1C 39 02 FB | 	rdlong	local10, local10
0807c     11 38 0E F2 | 	cmp	local10, #17 wz
08080     47 00 00 FF 
08084     7C E4 85 F1 | 	sub	objptr, ##36476
08088     34 00 90 5D |  if_ne	jmp	#LR__0717
0808c     13 37 02 F6 | 	mov	local09, local01
08090     01 36 86 F1 | 	sub	local09, #1
08094     1B 39 02 F6 | 	mov	local10, local09
08098     01 38 66 F0 | 	shl	local10, #1
0809c     1B 39 02 F1 | 	add	local10, local09
080a0     02 38 66 F0 | 	shl	local10, #2
080a4     47 00 00 FF 
080a8     7C E4 05 F1 | 	add	objptr, ##36476
080ac     F2 38 02 F1 | 	add	local10, objptr
080b0     08 38 06 F1 | 	add	local10, #8
080b4     1C 25 68 FC | 	wrlong	#18, local10
080b8     47 00 00 FF 
080bc     7C E4 85 F1 | 	sub	objptr, ##36476
080c0                 | LR__0717
080c0     01 26 86 F1 | 	sub	local01, #1
080c4     01 26 56 F2 | 	cmps	local01, #1 wc
080c8     50 FF 9F 3D |  if_ae	jmp	#LR__0716
080cc                 | LR__0718
080cc                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
080cc                 | ' return err
080cc     18 FB 01 F6 | 	mov	result1, local06
080d0     A7 F0 03 F6 | 	mov	ptra, fp
080d4     B2 00 A0 FD | 	call	#popregs_
080d8                 | _compile_immediate_ret
080d8     2D 00 64 FD | 	ret
080dc                 | 
080dc                 | ' 
080dc                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
080dc                 | ' 
080dc                 | ' function compile_immediate_assign(linetype as ulong) as ulong
080dc                 | _compile_immediate_assign
080dc     0C 4A 05 F6 | 	mov	COUNT_, #12
080e0     A8 00 A0 FD | 	call	#pushregs_
080e4     09 2D 02 F6 | 	mov	local04, arg01
080e8     FF 2A 06 F6 | 	mov	local03, #255
080ec     01 2E 66 F6 | 	neg	local05, #1
080f0     00 30 06 F6 | 	mov	local06, #0
080f4                 | ' 
080f4                 | ' t1.result_type=result_error : t1.result.uresult=0
080f4                 | ' i=-1: j=-1 : err=0
080f4                 | ' 
080f4                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
080f4     02 2C 0E F2 | 	cmp	local04, #2 wz
080f8     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
080fc     35 00 00 AF 
08100     0C E4 05 A1 |  if_e	add	objptr, ##27148
08104     F2 32 02 AB |  if_e	rdlong	local07, objptr
08108     02 00 00 AF 
0810c     38 E4 05 A1 |  if_e	add	objptr, ##1080
08110     F2 04 68 AC |  if_e	wrlong	#2, objptr
08114     37 00 00 AF 
08118     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0811c                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
0811c     04 2C 0E F2 | 	cmp	local04, #4 wz
08120     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
08124     2C 00 90 5D |  if_ne	jmp	#LR__0720
08128     35 00 00 FF 
0812c     14 E4 05 F1 | 	add	objptr, ##27156
08130     F2 32 02 FB | 	rdlong	local07, objptr
08134     02 00 00 FF 
08138     30 E4 05 F1 | 	add	objptr, ##1072
0813c     F2 06 68 FC | 	wrlong	#3, objptr
08140     13 00 00 FF 
08144     38 E4 05 F1 | 	add	objptr, ##9784
08148     F2 04 68 FC | 	wrlong	#2, objptr
0814c     4A 00 00 FF 
08150     7C E4 85 F1 | 	sub	objptr, ##38012
08154                 | LR__0720
08154                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08154     05 2C 0E F2 | 	cmp	local04, #5 wz
08158     3C 00 90 5D |  if_ne	jmp	#LR__0721
0815c     37 00 00 FF 
08160     44 E4 05 F1 | 	add	objptr, ##28228
08164     F2 FA 01 FB | 	rdlong	result1, objptr
08168     FD 32 02 F6 | 	mov	local07, result1
0816c     03 32 66 F0 | 	shl	local07, #3
08170     02 00 00 FF 
08174     38 E4 85 F1 | 	sub	objptr, ##1080
08178     F2 32 02 F1 | 	add	local07, objptr
0817c     19 33 02 FB | 	rdlong	local07, local07
08180     02 FA 05 F1 | 	add	result1, #2
08184     02 00 00 FF 
08188     38 E4 05 F1 | 	add	objptr, ##1080
0818c     F2 FA 61 FC | 	wrlong	result1, objptr
08190     37 00 00 FF 
08194     44 E4 85 F1 | 	sub	objptr, ##28228
08198                 | LR__0721
08198     19 13 02 F6 | 	mov	arg01, local07
0819c     01 14 06 F6 | 	mov	arg02, #1
081a0     5C 08 B2 FD | 	call	#__system__Right_S
081a4     FD 34 02 F6 | 	mov	local08, result1
081a8     A0 3B B0 FD | 	call	#_expr
081ac                 | ' 
081ac                 | ' suffix2$=right$(varname2$,1)
081ac                 | ' expr()
081ac                 | ' if varnum>0 then					' try to find a variable
081ac     35 00 00 FF 
081b0     08 E4 05 F1 | 	add	objptr, ##27144
081b4     F2 36 02 FB | 	rdlong	local09, objptr
081b8     35 00 00 FF 
081bc     08 E4 85 F1 | 	sub	objptr, ##27144
081c0     01 36 56 F2 | 	cmps	local09, #1 wc
081c4     58 00 90 CD |  if_b	jmp	#LR__0724
081c8                 | '   for i=0 to varnum-1
081c8     00 38 06 F6 | 	mov	local10, #0
081cc     35 00 00 FF 
081d0     08 E4 05 F1 | 	add	objptr, ##27144
081d4     F2 3A 02 FB | 	rdlong	local11, objptr
081d8     35 00 00 FF 
081dc     08 E4 85 F1 | 	sub	objptr, ##27144
081e0                 | LR__0722
081e0     1D 39 52 F2 | 	cmps	local10, local11 wc
081e4     38 00 90 3D |  if_ae	jmp	#LR__0723
081e8                 | '     if variables(i).name=varname2$ then j=i : exit
081e8     1C 37 02 F6 | 	mov	local09, local10
081ec     04 36 66 F0 | 	shl	local09, #4
081f0     14 00 00 FF 
081f4     F8 E5 05 F1 | 	add	objptr, ##10744
081f8     F2 36 02 F1 | 	add	local09, objptr
081fc     1B 13 02 FB | 	rdlong	arg01, local09
08200     19 15 02 F6 | 	mov	arg02, local07
08204     14 00 00 FF 
08208     F8 E5 85 F1 | 	sub	objptr, ##10744
0820c     10 E7 B1 FD | 	call	#__system___string_cmp
08210     00 FA 0D F2 | 	cmp	result1, #0 wz
08214     1C 2F 02 A6 |  if_e	mov	local05, local10
08218     01 38 06 51 |  if_ne	add	local10, #1
0821c     C0 FF 9F 5D |  if_ne	jmp	#LR__0722
08220                 | LR__0723
08220                 | LR__0724
08220                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08220     FF FF 7F FF 
08224     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
08228     60 00 90 5D |  if_ne	jmp	#LR__0725
0822c     35 00 00 FF 
08230     08 E4 05 F1 | 	add	objptr, ##27144
08234     F2 36 02 FB | 	rdlong	local09, objptr
08238     35 00 00 FF 
0823c     08 E4 85 F1 | 	sub	objptr, ##27144
08240     02 00 00 FF 
08244     00 36 56 F2 | 	cmps	local09, ##1024 wc
08248     40 00 90 3D |  if_ae	jmp	#LR__0725
0824c     35 00 00 FF 
08250     08 E4 05 F1 | 	add	objptr, ##27144
08254     F2 3A 02 FB | 	rdlong	local11, objptr
08258     04 3A 66 F0 | 	shl	local11, #4
0825c     20 00 00 FF 
08260     10 E4 85 F1 | 	sub	objptr, ##16400
08264     F2 3A 02 F1 | 	add	local11, objptr
08268     1D 33 62 FC | 	wrlong	local07, local11
0826c     20 00 00 FF 
08270     10 E4 05 F1 | 	add	objptr, ##16400
08274     F2 36 02 FB | 	rdlong	local09, objptr
08278     1B 2F 02 F6 | 	mov	local05, local09
0827c     01 36 06 F1 | 	add	local09, #1
08280     F2 36 62 FC | 	wrlong	local09, objptr
08284     35 00 00 FF 
08288     08 E4 85 F1 | 	sub	objptr, ##27144
0828c                 | LR__0725
0828c                 | ' if varnum>=maxvars then
0828c     35 00 00 FF 
08290     08 E4 05 F1 | 	add	objptr, ##27144
08294     F2 36 02 FB | 	rdlong	local09, objptr
08298     35 00 00 FF 
0829c     08 E4 85 F1 | 	sub	objptr, ##27144
082a0     02 00 00 FF 
082a4     00 36 56 F2 | 	cmps	local09, ##1024 wc
082a8     2D 30 06 36 |  if_ae	mov	local06, #45
082ac     C8 01 90 3D |  if_ae	jmp	#LR__0730
082b0     17 27 02 F6 | 	mov	local01, local05
082b4     17 2A 06 F6 | 	mov	local03, #23
082b8     13 37 02 F6 | 	mov	local09, local01
082bc     14 3D 02 F6 | 	mov	local12, local02
082c0     15 27 02 F6 | 	mov	local01, local03
082c4     4A 00 00 FF 
082c8     7C E4 05 F1 | 	add	objptr, ##38012
082cc     F2 3A 02 FB | 	rdlong	local11, objptr
082d0     1D 39 02 F6 | 	mov	local10, local11
082d4     01 38 66 F0 | 	shl	local10, #1
082d8     1D 39 02 F1 | 	add	local10, local11
082dc     02 38 66 F0 | 	shl	local10, #2
082e0     03 00 00 FF 
082e4     00 E4 85 F1 | 	sub	objptr, ##1536
082e8     F2 38 02 F1 | 	add	local10, objptr
082ec     1C 37 62 FC | 	wrlong	local09, local10
082f0     03 00 00 FF 
082f4     00 E4 05 F1 | 	add	objptr, ##1536
082f8     F2 36 02 FB | 	rdlong	local09, objptr
082fc     1B 3B 02 F6 | 	mov	local11, local09
08300     01 3A 66 F0 | 	shl	local11, #1
08304     1B 3B 02 F1 | 	add	local11, local09
08308     02 3A 66 F0 | 	shl	local11, #2
0830c     03 00 00 FF 
08310     00 E4 85 F1 | 	sub	objptr, ##1536
08314     F2 3A 02 F1 | 	add	local11, objptr
08318     04 3A 06 F1 | 	add	local11, #4
0831c     1D 3D 62 FC | 	wrlong	local12, local11
08320     03 00 00 FF 
08324     00 E4 05 F1 | 	add	objptr, ##1536
08328     F2 36 02 FB | 	rdlong	local09, objptr
0832c     1B 3D 02 F6 | 	mov	local12, local09
08330     01 3C 66 F0 | 	shl	local12, #1
08334     1B 3D 02 F1 | 	add	local12, local09
08338     02 3C 66 F0 | 	shl	local12, #2
0833c     03 00 00 FF 
08340     00 E4 85 F1 | 	sub	objptr, ##1536
08344     F2 3C 02 F1 | 	add	local12, objptr
08348     08 3C 06 F1 | 	add	local12, #8
0834c     1E 27 62 FC | 	wrlong	local01, local12
08350     03 00 00 FF 
08354     00 E4 05 F1 | 	add	objptr, ##1536
08358     F2 36 02 FB | 	rdlong	local09, objptr
0835c     01 36 06 F1 | 	add	local09, #1
08360     F2 36 62 FC | 	wrlong	local09, objptr
08364     4A 00 00 FF 
08368     7C E4 85 F1 | 	sub	objptr, ##38012
0836c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0836c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0836c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0836c     03 2C 0E F2 | 	cmp	local04, #3 wz
08370     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08374     38 00 90 5D |  if_ne	jmp	#LR__0726
08378     4A 00 00 FF 
0837c     7C E4 05 F1 | 	add	objptr, ##38012
08380     F2 3C 02 FB | 	rdlong	local12, objptr
08384     1E 27 02 F6 | 	mov	local01, local12
08388     01 26 66 F0 | 	shl	local01, #1
0838c     1E 27 02 F1 | 	add	local01, local12
08390     02 26 66 F0 | 	shl	local01, #2
08394     03 00 00 FF 
08398     00 E4 85 F1 | 	sub	objptr, ##1536
0839c     F2 26 02 F1 | 	add	local01, objptr
083a0     08 26 06 F1 | 	add	local01, #8
083a4     13 FD 6B FC | 	wrlong	#510, local01
083a8     47 00 00 FF 
083ac     7C E4 85 F1 | 	sub	objptr, ##36476
083b0                 | LR__0726
083b0                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
083b0     4A 00 00 FF 
083b4     7C E4 05 F1 | 	add	objptr, ##38012
083b8     F2 38 02 FB | 	rdlong	local10, objptr
083bc     4A 00 00 FF 
083c0     7C E4 85 F1 | 	sub	objptr, ##38012
083c4     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
083c8                 | LR__0727
083c8     1C 3D 02 F6 | 	mov	local12, local10
083cc     01 3C 66 F0 | 	shl	local12, #1
083d0     1C 3D 02 F1 | 	add	local12, local10
083d4     02 3C 66 F0 | 	shl	local12, #2
083d8     47 00 00 FF 
083dc     7C E4 05 F1 | 	add	objptr, ##36476
083e0     F2 3C 02 F1 | 	add	local12, objptr
083e4     08 3C 06 F1 | 	add	local12, #8
083e8     1E 3D 02 FB | 	rdlong	local12, local12
083ec     9B 3C 0E F2 | 	cmp	local12, #155 wz
083f0     47 00 00 FF 
083f4     7C E4 85 F1 | 	sub	objptr, ##36476
083f8     70 00 90 5D |  if_ne	jmp	#LR__0728
083fc     1C 3D 02 F6 | 	mov	local12, local10
08400     01 3C 86 F1 | 	sub	local12, #1
08404     1E 27 02 F6 | 	mov	local01, local12
08408     01 26 66 F0 | 	shl	local01, #1
0840c     1E 27 02 F1 | 	add	local01, local12
08410     02 26 66 F0 | 	shl	local01, #2
08414     47 00 00 FF 
08418     7C E4 05 F1 | 	add	objptr, ##36476
0841c     F2 26 02 F1 | 	add	local01, objptr
08420     08 26 06 F1 | 	add	local01, #8
08424     13 27 02 FB | 	rdlong	local01, local01
08428     11 26 0E F2 | 	cmp	local01, #17 wz
0842c     47 00 00 FF 
08430     7C E4 85 F1 | 	sub	objptr, ##36476
08434     34 00 90 5D |  if_ne	jmp	#LR__0728
08438     1C 3D 02 F6 | 	mov	local12, local10
0843c     01 3C 86 F1 | 	sub	local12, #1
08440     1E 27 02 F6 | 	mov	local01, local12
08444     01 26 66 F0 | 	shl	local01, #1
08448     1E 27 02 F1 | 	add	local01, local12
0844c     02 26 66 F0 | 	shl	local01, #2
08450     47 00 00 FF 
08454     7C E4 05 F1 | 	add	objptr, ##36476
08458     F2 26 02 F1 | 	add	local01, objptr
0845c     08 26 06 F1 | 	add	local01, #8
08460     13 25 68 FC | 	wrlong	#18, local01
08464     47 00 00 FF 
08468     7C E4 85 F1 | 	sub	objptr, ##36476
0846c                 | LR__0728
0846c     01 38 86 F1 | 	sub	local10, #1
08470     01 38 56 F2 | 	cmps	local10, #1 wc
08474     50 FF 9F 3D |  if_ae	jmp	#LR__0727
08478                 | LR__0729
08478                 | LR__0730
08478                 | ' return err
08478     18 FB 01 F6 | 	mov	result1, local06
0847c     A7 F0 03 F6 | 	mov	ptra, fp
08480     B2 00 A0 FD | 	call	#popregs_
08484                 | _compile_immediate_assign_ret
08484     2D 00 64 FD | 	ret
08488                 | 
08488                 | ' 
08488                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08488                 | ' 
08488                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08488                 | _compile
08488     03 4A 05 F6 | 	mov	COUNT_, #3
0848c     A8 00 A0 FD | 	call	#pushregs_
08490     09 27 02 F6 | 	mov	local01, arg01
08494     0B 29 02 F6 | 	mov	local02, arg03
08498     47 00 00 FF 
0849c     7C E4 05 F1 | 	add	objptr, ##36476
084a0     F2 26 62 FC | 	wrlong	local01, objptr
084a4     04 E4 05 F1 | 	add	objptr, #4
084a8     F2 14 62 FC | 	wrlong	arg02, objptr
084ac     47 00 00 FF 
084b0     80 E4 85 F1 | 	sub	objptr, ##36480
084b4     14 13 02 F6 | 	mov	arg01, local02
084b8     01 12 06 F1 | 	add	arg01, #1
084bc     13 15 02 F6 | 	mov	arg02, local01
084c0     5C F2 BF FD | 	call	#_compile_immediate
084c4     FD 2A 0A F6 | 	mov	local03, result1 wz
084c8                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
084c8                 | ' ucompiledline(0)=alinemajor
084c8                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
084c8                 | ' 
084c8                 | ' ' cont: 
084c8                 | ' ' 0 - this is the first part of the line that will continue
084c8                 | ' ' 1 - this is the continuation of the line
084c8                 | ' ' 2 - this is the last continued line
084c8                 | ' ' 3 - this is the one and only part
084c8                 | ' 
084c8                 | ' err=compile_immediate(cont+1,alinemajor) 
084c8                 | ' if err=0 andalso alinemajor>0 then
084c8     74 00 90 5D |  if_ne	jmp	#LR__0745
084cc     01 26 16 F2 | 	cmp	local01, #1 wc
084d0     6C 00 90 CD |  if_b	jmp	#LR__0745
084d4                 | '   if cont=3 orelse cont=2 then 
084d4     03 28 0E F2 | 	cmp	local02, #3 wz
084d8     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
084dc     60 00 90 5D |  if_ne	jmp	#LR__0744
084e0                 | '     if alinemajor >lastline then 
084e0     4A 00 00 FF 
084e4     8C E4 05 F1 | 	add	objptr, ##38028
084e8     F2 14 02 FB | 	rdlong	arg02, objptr
084ec     4A 00 00 FF 
084f0     8C E4 85 F1 | 	sub	objptr, ##38028
084f4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
084f8     0C 00 90 ED |  if_be	jmp	#LR__0740
084fc     13 13 02 F6 | 	mov	arg01, local01
08500     54 F1 BF FD | 	call	#_add_line_at_end
08504     38 00 90 FD | 	jmp	#LR__0743
08508                 | LR__0740
08508     13 13 02 F6 | 	mov	arg01, local01
0850c     18 EB BF FD | 	call	#_deleteline
08510                 | '       deleteline(alinemajor)  
08510                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08510     4A 00 00 FF 
08514     8C E4 05 F1 | 	add	objptr, ##38028
08518     F2 14 02 FB | 	rdlong	arg02, objptr
0851c     4A 00 00 FF 
08520     8C E4 85 F1 | 	sub	objptr, ##38028
08524     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08528     0C 00 90 ED |  if_be	jmp	#LR__0741
0852c     13 13 02 F6 | 	mov	arg01, local01
08530     24 F1 BF FD | 	call	#_add_line_at_end
08534     08 00 90 FD | 	jmp	#LR__0742
08538                 | LR__0741
08538     13 13 02 F6 | 	mov	arg01, local01
0853c     FC EE BF FD | 	call	#_insertline
08540                 | LR__0742
08540                 | LR__0743
08540                 | LR__0744
08540                 | LR__0745
08540                 | ' return err
08540     15 FB 01 F6 | 	mov	result1, local03
08544     A7 F0 03 F6 | 	mov	ptra, fp
08548     B2 00 A0 FD | 	call	#popregs_
0854c                 | _compile_ret
0854c     2D 00 64 FD | 	ret
08550                 | 
08550                 | ' 
08550                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08550                 | ' 
08550                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08550                 | _compile_assign
08550     03 4A 05 F6 | 	mov	COUNT_, #3
08554     A8 00 A0 FD | 	call	#pushregs_
08558     09 27 02 F6 | 	mov	local01, arg01
0855c     0B 29 02 F6 | 	mov	local02, arg03
08560     47 00 00 FF 
08564     7C E4 05 F1 | 	add	objptr, ##36476
08568     F2 26 62 FC | 	wrlong	local01, objptr
0856c     04 E4 05 F1 | 	add	objptr, #4
08570     F2 14 62 FC | 	wrlong	arg02, objptr
08574     47 00 00 FF 
08578     80 E4 85 F1 | 	sub	objptr, ##36480
0857c     14 13 02 F6 | 	mov	arg01, local02
08580     01 12 06 F1 | 	add	arg01, #1
08584     54 FB BF FD | 	call	#_compile_immediate_assign
08588     FD 2A 02 F6 | 	mov	local03, result1
0858c                 | ' 
0858c                 | ' ucompiledline(0)=alinemajor
0858c                 | ' ucompiledline(1)=alineminor
0858c                 | ' 
0858c                 | ' err=compile_immediate_assign(cont+1) 
0858c                 | ' if alinemajor>0 then
0858c     01 26 16 F2 | 	cmp	local01, #1 wc
08590     6C 00 90 CD |  if_b	jmp	#LR__0755
08594                 | '   if cont=3 orelse cont=2 then 
08594     03 28 0E F2 | 	cmp	local02, #3 wz
08598     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0859c     60 00 90 5D |  if_ne	jmp	#LR__0754
085a0                 | '     if alinemajor >lastline then 
085a0     4A 00 00 FF 
085a4     8C E4 05 F1 | 	add	objptr, ##38028
085a8     F2 14 02 FB | 	rdlong	arg02, objptr
085ac     4A 00 00 FF 
085b0     8C E4 85 F1 | 	sub	objptr, ##38028
085b4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
085b8     0C 00 90 ED |  if_be	jmp	#LR__0750
085bc     13 13 02 F6 | 	mov	arg01, local01
085c0     94 F0 BF FD | 	call	#_add_line_at_end
085c4     38 00 90 FD | 	jmp	#LR__0753
085c8                 | LR__0750
085c8     13 13 02 F6 | 	mov	arg01, local01
085cc     58 EA BF FD | 	call	#_deleteline
085d0                 | '       deleteline(alinemajor)  
085d0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
085d0     4A 00 00 FF 
085d4     8C E4 05 F1 | 	add	objptr, ##38028
085d8     F2 14 02 FB | 	rdlong	arg02, objptr
085dc     4A 00 00 FF 
085e0     8C E4 85 F1 | 	sub	objptr, ##38028
085e4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
085e8     0C 00 90 ED |  if_be	jmp	#LR__0751
085ec     13 13 02 F6 | 	mov	arg01, local01
085f0     64 F0 BF FD | 	call	#_add_line_at_end
085f4     08 00 90 FD | 	jmp	#LR__0752
085f8                 | LR__0751
085f8     13 13 02 F6 | 	mov	arg01, local01
085fc     3C EE BF FD | 	call	#_insertline
08600                 | LR__0752
08600                 | LR__0753
08600                 | LR__0754
08600                 | LR__0755
08600                 | ' return err
08600     15 FB 01 F6 | 	mov	result1, local03
08604     A7 F0 03 F6 | 	mov	ptra, fp
08608     B2 00 A0 FD | 	call	#popregs_
0860c                 | _compile_assign_ret
0860c     2D 00 64 FD | 	ret
08610                 | 
08610                 | ' 
08610                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08610                 | ' 
08610                 | ' function compile_fun_2p() as ulong
08610                 | _compile_fun_2p
08610     01 4A 05 F6 | 	mov	COUNT_, #1
08614     A8 00 A0 FD | 	call	#pushregs_
08618     30 37 B0 FD | 	call	#_expr
0861c     FD 26 02 F6 | 	mov	local01, result1
08620                 | ' err=expr() : if err>0 then return err
08620     01 26 16 F2 | 	cmp	local01, #1 wc
08624     13 FB 01 36 |  if_ae	mov	result1, local01
08628     60 00 90 3D |  if_ae	jmp	#LR__0760
0862c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0862c     37 00 00 FF 
08630     44 E4 05 F1 | 	add	objptr, ##28228
08634     F2 26 02 FB | 	rdlong	local01, objptr
08638     03 26 66 F0 | 	shl	local01, #3
0863c     02 00 00 FF 
08640     38 E4 85 F1 | 	sub	objptr, ##1080
08644     F2 26 02 F1 | 	add	local01, objptr
08648     04 26 06 F1 | 	add	local01, #4
0864c     13 27 02 FB | 	rdlong	local01, local01
08650     11 26 0E F2 | 	cmp	local01, #17 wz
08654     35 00 00 FF 
08658     0C E4 85 F1 | 	sub	objptr, ##27148
0865c     15 FA 05 56 |  if_ne	mov	result1, #21
08660     28 00 90 5D |  if_ne	jmp	#LR__0760
08664     37 00 00 FF 
08668     44 E4 05 F1 | 	add	objptr, ##28228
0866c     F2 26 02 FB | 	rdlong	local01, objptr
08670     01 26 06 F1 | 	add	local01, #1
08674     F2 26 62 FC | 	wrlong	local01, objptr
08678     37 00 00 FF 
0867c     44 E4 85 F1 | 	sub	objptr, ##28228
08680     C8 36 B0 FD | 	call	#_expr
08684                 | ' err=expr() : if err>0 then return err
08684     01 FA 15 F2 | 	cmp	result1, #1 wc
08688                 | ' return 0
08688     00 FA 05 C6 |  if_b	mov	result1, #0
0868c                 | LR__0760
0868c     A7 F0 03 F6 | 	mov	ptra, fp
08690     B2 00 A0 FD | 	call	#popregs_
08694                 | _compile_fun_2p_ret
08694     2D 00 64 FD | 	ret
08698                 | 
08698                 | ' 
08698                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08698                 | ' 
08698                 | ' function compile_fun_3p() as ulong
08698                 | _compile_fun_3p
08698     01 4A 05 F6 | 	mov	COUNT_, #1
0869c     A8 00 A0 FD | 	call	#pushregs_
086a0     A8 36 B0 FD | 	call	#_expr
086a4     FD 26 02 F6 | 	mov	local01, result1
086a8                 | ' err=expr() : if err>0 then return err
086a8     01 26 16 F2 | 	cmp	local01, #1 wc
086ac     13 FB 01 36 |  if_ae	mov	result1, local01
086b0     C8 00 90 3D |  if_ae	jmp	#LR__0770
086b4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
086b4     37 00 00 FF 
086b8     44 E4 05 F1 | 	add	objptr, ##28228
086bc     F2 26 02 FB | 	rdlong	local01, objptr
086c0     03 26 66 F0 | 	shl	local01, #3
086c4     02 00 00 FF 
086c8     38 E4 85 F1 | 	sub	objptr, ##1080
086cc     F2 26 02 F1 | 	add	local01, objptr
086d0     04 26 06 F1 | 	add	local01, #4
086d4     13 27 02 FB | 	rdlong	local01, local01
086d8     11 26 0E F2 | 	cmp	local01, #17 wz
086dc     35 00 00 FF 
086e0     0C E4 85 F1 | 	sub	objptr, ##27148
086e4     15 FA 05 56 |  if_ne	mov	result1, #21
086e8     90 00 90 5D |  if_ne	jmp	#LR__0770
086ec     37 00 00 FF 
086f0     44 E4 05 F1 | 	add	objptr, ##28228
086f4     F2 26 02 FB | 	rdlong	local01, objptr
086f8     01 26 06 F1 | 	add	local01, #1
086fc     F2 26 62 FC | 	wrlong	local01, objptr
08700     37 00 00 FF 
08704     44 E4 85 F1 | 	sub	objptr, ##28228
08708     40 36 B0 FD | 	call	#_expr
0870c     FD 26 02 F6 | 	mov	local01, result1
08710                 | ' err=expr() : if err>0 then return err
08710     01 26 16 F2 | 	cmp	local01, #1 wc
08714     13 FB 01 36 |  if_ae	mov	result1, local01
08718     60 00 90 3D |  if_ae	jmp	#LR__0770
0871c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0871c     37 00 00 FF 
08720     44 E4 05 F1 | 	add	objptr, ##28228
08724     F2 26 02 FB | 	rdlong	local01, objptr
08728     03 26 66 F0 | 	shl	local01, #3
0872c     02 00 00 FF 
08730     38 E4 85 F1 | 	sub	objptr, ##1080
08734     F2 26 02 F1 | 	add	local01, objptr
08738     04 26 06 F1 | 	add	local01, #4
0873c     13 27 02 FB | 	rdlong	local01, local01
08740     11 26 0E F2 | 	cmp	local01, #17 wz
08744     35 00 00 FF 
08748     0C E4 85 F1 | 	sub	objptr, ##27148
0874c     15 FA 05 56 |  if_ne	mov	result1, #21
08750     28 00 90 5D |  if_ne	jmp	#LR__0770
08754     37 00 00 FF 
08758     44 E4 05 F1 | 	add	objptr, ##28228
0875c     F2 26 02 FB | 	rdlong	local01, objptr
08760     01 26 06 F1 | 	add	local01, #1
08764     F2 26 62 FC | 	wrlong	local01, objptr
08768     37 00 00 FF 
0876c     44 E4 85 F1 | 	sub	objptr, ##28228
08770     D8 35 B0 FD | 	call	#_expr
08774                 | ' err=expr() : if err>0 then return err
08774     01 FA 15 F2 | 	cmp	result1, #1 wc
08778                 | ' return 0
08778     00 FA 05 C6 |  if_b	mov	result1, #0
0877c                 | LR__0770
0877c     A7 F0 03 F6 | 	mov	ptra, fp
08780     B2 00 A0 FD | 	call	#popregs_
08784                 | _compile_fun_3p_ret
08784     2D 00 64 FD | 	ret
08788                 | 
08788                 | ' 
08788                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08788                 | ' 
08788                 | ' function compile_fun_4p() as ulong
08788                 | _compile_fun_4p
08788     01 4A 05 F6 | 	mov	COUNT_, #1
0878c     A8 00 A0 FD | 	call	#pushregs_
08790     B8 35 B0 FD | 	call	#_expr
08794     FD 26 02 F6 | 	mov	local01, result1
08798                 | ' err=expr() : if err>0 then return err
08798     01 26 16 F2 | 	cmp	local01, #1 wc
0879c     13 FB 01 36 |  if_ae	mov	result1, local01
087a0     30 01 90 3D |  if_ae	jmp	#LR__0780
087a4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
087a4     37 00 00 FF 
087a8     44 E4 05 F1 | 	add	objptr, ##28228
087ac     F2 26 02 FB | 	rdlong	local01, objptr
087b0     03 26 66 F0 | 	shl	local01, #3
087b4     02 00 00 FF 
087b8     38 E4 85 F1 | 	sub	objptr, ##1080
087bc     F2 26 02 F1 | 	add	local01, objptr
087c0     04 26 06 F1 | 	add	local01, #4
087c4     13 27 02 FB | 	rdlong	local01, local01
087c8     11 26 0E F2 | 	cmp	local01, #17 wz
087cc     35 00 00 FF 
087d0     0C E4 85 F1 | 	sub	objptr, ##27148
087d4     15 FA 05 56 |  if_ne	mov	result1, #21
087d8     F8 00 90 5D |  if_ne	jmp	#LR__0780
087dc     37 00 00 FF 
087e0     44 E4 05 F1 | 	add	objptr, ##28228
087e4     F2 26 02 FB | 	rdlong	local01, objptr
087e8     01 26 06 F1 | 	add	local01, #1
087ec     F2 26 62 FC | 	wrlong	local01, objptr
087f0     37 00 00 FF 
087f4     44 E4 85 F1 | 	sub	objptr, ##28228
087f8     50 35 B0 FD | 	call	#_expr
087fc     FD 26 02 F6 | 	mov	local01, result1
08800                 | ' err=expr() : if err>0 then return err
08800     01 26 16 F2 | 	cmp	local01, #1 wc
08804     13 FB 01 36 |  if_ae	mov	result1, local01
08808     C8 00 90 3D |  if_ae	jmp	#LR__0780
0880c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
0880c     37 00 00 FF 
08810     44 E4 05 F1 | 	add	objptr, ##28228
08814     F2 26 02 FB | 	rdlong	local01, objptr
08818     03 26 66 F0 | 	shl	local01, #3
0881c     02 00 00 FF 
08820     38 E4 85 F1 | 	sub	objptr, ##1080
08824     F2 26 02 F1 | 	add	local01, objptr
08828     04 26 06 F1 | 	add	local01, #4
0882c     13 27 02 FB | 	rdlong	local01, local01
08830     11 26 0E F2 | 	cmp	local01, #17 wz
08834     35 00 00 FF 
08838     0C E4 85 F1 | 	sub	objptr, ##27148
0883c     15 FA 05 56 |  if_ne	mov	result1, #21
08840     90 00 90 5D |  if_ne	jmp	#LR__0780
08844     37 00 00 FF 
08848     44 E4 05 F1 | 	add	objptr, ##28228
0884c     F2 26 02 FB | 	rdlong	local01, objptr
08850     01 26 06 F1 | 	add	local01, #1
08854     F2 26 62 FC | 	wrlong	local01, objptr
08858     37 00 00 FF 
0885c     44 E4 85 F1 | 	sub	objptr, ##28228
08860     E8 34 B0 FD | 	call	#_expr
08864     FD 26 02 F6 | 	mov	local01, result1
08868                 | ' err=expr() : if err>0 then return err
08868     01 26 16 F2 | 	cmp	local01, #1 wc
0886c     13 FB 01 36 |  if_ae	mov	result1, local01
08870     60 00 90 3D |  if_ae	jmp	#LR__0780
08874                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08874     37 00 00 FF 
08878     44 E4 05 F1 | 	add	objptr, ##28228
0887c     F2 26 02 FB | 	rdlong	local01, objptr
08880     03 26 66 F0 | 	shl	local01, #3
08884     02 00 00 FF 
08888     38 E4 85 F1 | 	sub	objptr, ##1080
0888c     F2 26 02 F1 | 	add	local01, objptr
08890     04 26 06 F1 | 	add	local01, #4
08894     13 27 02 FB | 	rdlong	local01, local01
08898     11 26 0E F2 | 	cmp	local01, #17 wz
0889c     35 00 00 FF 
088a0     0C E4 85 F1 | 	sub	objptr, ##27148
088a4     15 FA 05 56 |  if_ne	mov	result1, #21
088a8     28 00 90 5D |  if_ne	jmp	#LR__0780
088ac     37 00 00 FF 
088b0     44 E4 05 F1 | 	add	objptr, ##28228
088b4     F2 26 02 FB | 	rdlong	local01, objptr
088b8     01 26 06 F1 | 	add	local01, #1
088bc     F2 26 62 FC | 	wrlong	local01, objptr
088c0     37 00 00 FF 
088c4     44 E4 85 F1 | 	sub	objptr, ##28228
088c8     80 34 B0 FD | 	call	#_expr
088cc                 | ' err=expr() : if err>0 then return err
088cc     01 FA 15 F2 | 	cmp	result1, #1 wc
088d0                 | ' return 0
088d0     00 FA 05 C6 |  if_b	mov	result1, #0
088d4                 | LR__0780
088d4     A7 F0 03 F6 | 	mov	ptra, fp
088d8     B2 00 A0 FD | 	call	#popregs_
088dc                 | _compile_fun_4p_ret
088dc     2D 00 64 FD | 	ret
088e0                 | 
088e0                 | ' 
088e0                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
088e0                 | ' 
088e0                 | ' function compile_fun_varp() as ulong,ulong 
088e0                 | _compile_fun_varp
088e0     03 4A 05 F6 | 	mov	COUNT_, #3
088e4     A8 00 A0 FD | 	call	#pushregs_
088e8     00 26 06 F6 | 	mov	local01, #0
088ec                 | ' 
088ec                 | ' i=0 : err=0
088ec                 | ' if lparts(ct).token<>token_end then
088ec     37 00 00 FF 
088f0     44 E4 05 F1 | 	add	objptr, ##28228
088f4     F2 28 02 FB | 	rdlong	local02, objptr
088f8     03 28 66 F0 | 	shl	local02, #3
088fc     02 00 00 FF 
08900     38 E4 85 F1 | 	sub	objptr, ##1080
08904     F2 28 02 F1 | 	add	local02, objptr
08908     04 28 06 F1 | 	add	local02, #4
0890c     14 29 02 FB | 	rdlong	local02, local02
08910     FE 29 0E F2 | 	cmp	local02, #510 wz
08914     35 00 00 FF 
08918     0C E4 85 F1 | 	sub	objptr, ##27148
0891c     88 00 90 AD |  if_e	jmp	#LR__0791
08920                 | '   do
08920                 | LR__0790
08920     28 34 B0 FD | 	call	#_expr
08924     01 26 06 F1 | 	add	local01, #1
08928                 | '     expr()
08928                 | '     i+=1
08928                 | '     if lparts(ct).token=token_comma then ct+=1
08928     37 00 00 FF 
0892c     44 E4 05 F1 | 	add	objptr, ##28228
08930     F2 28 02 FB | 	rdlong	local02, objptr
08934     03 28 66 F0 | 	shl	local02, #3
08938     02 00 00 FF 
0893c     38 E4 85 F1 | 	sub	objptr, ##1080
08940     F2 28 02 F1 | 	add	local02, objptr
08944     04 28 06 F1 | 	add	local02, #4
08948     14 29 02 FB | 	rdlong	local02, local02
0894c     11 28 0E F2 | 	cmp	local02, #17 wz
08950     35 00 00 FF 
08954     0C E4 85 F1 | 	sub	objptr, ##27148
08958     37 00 00 AF 
0895c     44 E4 05 A1 |  if_e	add	objptr, ##28228
08960     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08964     01 2A 06 A1 |  if_e	add	local03, #1
08968     F2 2A 62 AC |  if_e	wrlong	local03, objptr
0896c     37 00 00 AF 
08970     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08974                 | '     if lparts(ct).token=token_end then exit loop
08974     37 00 00 FF 
08978     44 E4 05 F1 | 	add	objptr, ##28228
0897c     F2 28 02 FB | 	rdlong	local02, objptr
08980     03 28 66 F0 | 	shl	local02, #3
08984     02 00 00 FF 
08988     38 E4 85 F1 | 	sub	objptr, ##1080
0898c     F2 28 02 F1 | 	add	local02, objptr
08990     04 28 06 F1 | 	add	local02, #4
08994     14 29 02 FB | 	rdlong	local02, local02
08998     FE 29 0E F2 | 	cmp	local02, #510 wz
0899c     35 00 00 FF 
089a0     0C E4 85 F1 | 	sub	objptr, ##27148
089a4     78 FF 9F 5D |  if_ne	jmp	#LR__0790
089a8                 | LR__0791
089a8                 | ' return i,err
089a8     13 FB 01 F6 | 	mov	result1, local01
089ac     00 FC 05 F6 | 	mov	result2, #0
089b0     A7 F0 03 F6 | 	mov	ptra, fp
089b4     B2 00 A0 FD | 	call	#popregs_
089b8                 | _compile_fun_varp_ret
089b8     2D 00 64 FD | 	ret
089bc                 | 
089bc                 | ' 
089bc                 | ' '----  Compile read. The same as compile_input() except printing a prompt
089bc                 | ' 
089bc                 | ' function compile_read() as ulong,ulong 
089bc                 | _compile_read
089bc     04 4A 05 F6 | 	mov	COUNT_, #4
089c0     A8 00 A0 FD | 	call	#pushregs_
089c4     00 26 06 F6 | 	mov	local01, #0
089c8                 | ' 
089c8                 | ' i=0 : err=0
089c8                 | ' if lparts(ct).token<>token_end then
089c8     37 00 00 FF 
089cc     44 E4 05 F1 | 	add	objptr, ##28228
089d0     F2 28 02 FB | 	rdlong	local02, objptr
089d4     03 28 66 F0 | 	shl	local02, #3
089d8     02 00 00 FF 
089dc     38 E4 85 F1 | 	sub	objptr, ##1080
089e0     F2 28 02 F1 | 	add	local02, objptr
089e4     04 28 06 F1 | 	add	local02, #4
089e8     14 29 02 FB | 	rdlong	local02, local02
089ec     FE 29 0E F2 | 	cmp	local02, #510 wz
089f0     35 00 00 FF 
089f4     0C E4 85 F1 | 	sub	objptr, ##27148
089f8     98 00 90 AD |  if_e	jmp	#LR__0801
089fc                 | '   do
089fc                 | LR__0800
089fc     B8 2F B0 FD | 	call	#_getaddr
08a00     FD 2A 02 F6 | 	mov	local03, result1
08a04     37 00 00 FF 
08a08     44 E4 05 F1 | 	add	objptr, ##28228
08a0c     F2 28 02 FB | 	rdlong	local02, objptr
08a10     01 28 06 F1 | 	add	local02, #1
08a14     F2 28 62 FC | 	wrlong	local02, objptr
08a18     01 26 06 F1 | 	add	local01, #1
08a1c                 | '     err=getaddr() :ct+=1
08a1c                 | '     i+=1 
08a1c                 | '     if lparts(ct).token=token_comma then ct+=1 
08a1c     03 28 66 F0 | 	shl	local02, #3
08a20     02 00 00 FF 
08a24     38 E4 85 F1 | 	sub	objptr, ##1080
08a28     F2 28 02 F1 | 	add	local02, objptr
08a2c     04 28 06 F1 | 	add	local02, #4
08a30     14 29 02 FB | 	rdlong	local02, local02
08a34     11 28 0E F2 | 	cmp	local02, #17 wz
08a38     35 00 00 FF 
08a3c     0C E4 85 F1 | 	sub	objptr, ##27148
08a40     37 00 00 AF 
08a44     44 E4 05 A1 |  if_e	add	objptr, ##28228
08a48     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08a4c     01 2C 06 A1 |  if_e	add	local04, #1
08a50     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08a54     37 00 00 AF 
08a58     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08a5c                 | '     if lparts(ct).token=token_end then exit loop
08a5c     37 00 00 FF 
08a60     44 E4 05 F1 | 	add	objptr, ##28228
08a64     F2 28 02 FB | 	rdlong	local02, objptr
08a68     03 28 66 F0 | 	shl	local02, #3
08a6c     02 00 00 FF 
08a70     38 E4 85 F1 | 	sub	objptr, ##1080
08a74     F2 28 02 F1 | 	add	local02, objptr
08a78     04 28 06 F1 | 	add	local02, #4
08a7c     14 29 02 FB | 	rdlong	local02, local02
08a80     FE 29 0E F2 | 	cmp	local02, #510 wz
08a84     35 00 00 FF 
08a88     0C E4 85 F1 | 	sub	objptr, ##27148
08a8c     08 00 90 AD |  if_e	jmp	#LR__0802
08a90     68 FF 9F FD | 	jmp	#LR__0800
08a94                 | LR__0801
08a94     36 2A 06 F6 | 	mov	local03, #54
08a98                 | LR__0802
08a98                 | ' return i,err
08a98     13 FB 01 F6 | 	mov	result1, local01
08a9c     15 FD 01 F6 | 	mov	result2, local03
08aa0     A7 F0 03 F6 | 	mov	ptra, fp
08aa4     B2 00 A0 FD | 	call	#popregs_
08aa8                 | _compile_read_ret
08aa8     2D 00 64 FD | 	ret
08aac                 | 
08aac                 | ' 
08aac                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08aac                 | ' 
08aac                 | ' function compile_input() as ulong,ulong 
08aac                 | _compile_input
08aac     0F 4A 05 F6 | 	mov	COUNT_, #15
08ab0     A8 00 A0 FD | 	call	#pushregs_
08ab4                 | ' 
08ab4                 | ' if lparts(ct).token=token_string then
08ab4     37 00 00 FF 
08ab8     44 E4 05 F1 | 	add	objptr, ##28228
08abc     F2 16 02 FB | 	rdlong	arg03, objptr
08ac0     03 16 66 F0 | 	shl	arg03, #3
08ac4     02 00 00 FF 
08ac8     38 E4 85 F1 | 	sub	objptr, ##1080
08acc     F2 16 02 F1 | 	add	arg03, objptr
08ad0     04 16 06 F1 | 	add	arg03, #4
08ad4     0B FD 01 FB | 	rdlong	result2, arg03
08ad8     01 00 00 FF 
08adc     03 FC 0D F2 | 	cmp	result2, ##515 wz
08ae0     35 00 00 FF 
08ae4     0C E4 85 F1 | 	sub	objptr, ##27148
08ae8     38 06 90 5D |  if_ne	jmp	#LR__0817
08aec     37 00 00 FF 
08af0     44 E4 05 F1 | 	add	objptr, ##28228
08af4     F2 14 02 FB | 	rdlong	arg02, objptr
08af8     03 14 66 F0 | 	shl	arg02, #3
08afc     02 00 00 FF 
08b00     38 E4 85 F1 | 	sub	objptr, ##1080
08b04     F2 14 02 F1 | 	add	arg02, objptr
08b08     0A 13 02 FB | 	rdlong	arg01, arg02
08b0c     35 00 00 FF 
08b10     0C E4 85 F1 | 	sub	objptr, ##27148
08b14     09 2D 02 F6 | 	mov	local04, arg01
08b18     97 06 48 FB | 	callpa	#(@LR__0811-@LR__0810)>>2,fcache_load_ptr_
08b1c                 | LR__0810
08b1c     16 FB C9 FA | 	rdbyte	result1, local04 wz
08b20     01 2C 06 51 |  if_ne	add	local04, #1
08b24     F4 FF 9F 5D |  if_ne	jmp	#LR__0810
08b28                 | LR__0811
08b28     09 2D 82 F1 | 	sub	local04, arg01
08b2c     16 FB 01 F6 | 	mov	result1, local04
08b30     52 00 00 FF 
08b34     F0 E4 05 F1 | 	add	objptr, ##42224
08b38     F2 FA 61 FC | 	wrlong	result1, objptr
08b3c     58 E4 85 F1 | 	sub	objptr, #88
08b40     F2 12 02 FB | 	rdlong	arg01, objptr
08b44     FD 12 82 F1 | 	sub	arg01, result1
08b48     04 12 86 F1 | 	sub	arg01, #4
08b4c     03 12 26 F5 | 	andn	arg01, #3
08b50     F2 12 62 FC | 	wrlong	arg01, objptr
08b54     58 E4 05 F1 | 	add	objptr, #88
08b58     F2 14 02 FB | 	rdlong	arg02, objptr
08b5c     52 00 00 FF 
08b60     F0 E4 85 F1 | 	sub	objptr, ##42224
08b64     40 A5 B1 FD | 	call	#_pslpoke
08b68                 | '   pslpoke memtop,l
08b68                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08b68     01 2E 06 F6 | 	mov	local05, #1
08b6c     52 00 00 FF 
08b70     F0 E4 05 F1 | 	add	objptr, ##42224
08b74     F2 30 02 FB | 	rdlong	local06, objptr
08b78     52 00 00 FF 
08b7c     F0 E4 85 F1 | 	sub	objptr, ##42224
08b80     01 30 06 F1 | 	add	local06, #1
08b84                 | LR__0812
08b84     18 2F 52 F2 | 	cmps	local05, local06 wc
08b88     5C 00 90 3D |  if_ae	jmp	#LR__0813
08b8c     52 00 00 FF 
08b90     98 E4 05 F1 | 	add	objptr, ##42136
08b94     F2 32 02 FB | 	rdlong	local07, objptr
08b98     03 32 06 F1 | 	add	local07, #3
08b9c     17 33 02 F1 | 	add	local07, local05
08ba0     1B 00 00 FF 
08ba4     54 E4 85 F1 | 	sub	objptr, ##13908
08ba8     F2 14 02 FB | 	rdlong	arg02, objptr
08bac     03 14 66 F0 | 	shl	arg02, #3
08bb0     02 00 00 FF 
08bb4     38 E4 85 F1 | 	sub	objptr, ##1080
08bb8     F2 14 02 F1 | 	add	arg02, objptr
08bbc     0A 13 02 FB | 	rdlong	arg01, arg02
08bc0     17 15 02 F6 | 	mov	arg02, local05
08bc4     01 16 06 F6 | 	mov	arg03, #1
08bc8     35 00 00 FF 
08bcc     0C E4 85 F1 | 	sub	objptr, ##27148
08bd0     BC FE B1 FD | 	call	#__system__Mid_S
08bd4     FD 14 C2 FA | 	rdbyte	arg02, result1
08bd8     19 13 02 F6 | 	mov	arg01, local07
08bdc     58 A5 B1 FD | 	call	#_pspoke
08be0     01 2E 06 F1 | 	add	local05, #1
08be4     9C FF 9F FD | 	jmp	#LR__0812
08be8                 | LR__0813
08be8     52 00 00 FF 
08bec     98 E4 05 F1 | 	add	objptr, ##42136
08bf0     F2 26 02 FB | 	rdlong	local01, objptr
08bf4     2B 2A 06 F6 | 	mov	local03, #43
08bf8     13 35 02 F6 | 	mov	local08, local01
08bfc     14 33 02 F6 | 	mov	local07, local02
08c00     15 37 02 F6 | 	mov	local09, local03
08c04     08 00 00 FF 
08c08     1C E4 85 F1 | 	sub	objptr, ##4124
08c0c     F2 30 02 FB | 	rdlong	local06, objptr
08c10     18 2F 02 F6 | 	mov	local05, local06
08c14     01 2E 66 F0 | 	shl	local05, #1
08c18     18 2F 02 F1 | 	add	local05, local06
08c1c     02 2E 66 F0 | 	shl	local05, #2
08c20     03 00 00 FF 
08c24     00 E4 85 F1 | 	sub	objptr, ##1536
08c28     F2 2E 02 F1 | 	add	local05, objptr
08c2c     17 35 62 FC | 	wrlong	local08, local05
08c30     03 00 00 FF 
08c34     00 E4 05 F1 | 	add	objptr, ##1536
08c38     F2 34 02 FB | 	rdlong	local08, objptr
08c3c     1A 31 02 F6 | 	mov	local06, local08
08c40     01 30 66 F0 | 	shl	local06, #1
08c44     1A 31 02 F1 | 	add	local06, local08
08c48     02 30 66 F0 | 	shl	local06, #2
08c4c     03 00 00 FF 
08c50     00 E4 85 F1 | 	sub	objptr, ##1536
08c54     F2 30 02 F1 | 	add	local06, objptr
08c58     04 30 06 F1 | 	add	local06, #4
08c5c     18 33 62 FC | 	wrlong	local07, local06
08c60     03 00 00 FF 
08c64     00 E4 05 F1 | 	add	objptr, ##1536
08c68     F2 34 02 FB | 	rdlong	local08, objptr
08c6c     1A 33 02 F6 | 	mov	local07, local08
08c70     01 32 66 F0 | 	shl	local07, #1
08c74     1A 33 02 F1 | 	add	local07, local08
08c78     02 32 66 F0 | 	shl	local07, #2
08c7c     03 00 00 FF 
08c80     00 E4 85 F1 | 	sub	objptr, ##1536
08c84     F2 32 02 F1 | 	add	local07, objptr
08c88     08 32 06 F1 | 	add	local07, #8
08c8c     19 37 62 FC | 	wrlong	local09, local07
08c90     03 00 00 FF 
08c94     00 E4 05 F1 | 	add	objptr, ##1536
08c98     F2 34 02 FB | 	rdlong	local08, objptr
08c9c     01 34 06 F1 | 	add	local08, #1
08ca0     F2 34 62 FC | 	wrlong	local08, objptr
08ca4     13 00 00 FF 
08ca8     38 E4 85 F1 | 	sub	objptr, ##9784
08cac     F2 34 02 FB | 	rdlong	local08, objptr
08cb0     01 34 06 F1 | 	add	local08, #1
08cb4     F2 34 62 FC | 	wrlong	local08, objptr
08cb8                 | '   t1.result.uresult=memtop
08cb8                 | '   t1.result_type=result_string2  
08cb8                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08cb8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08cb8     03 34 66 F0 | 	shl	local08, #3
08cbc     02 00 00 FF 
08cc0     38 E4 85 F1 | 	sub	objptr, ##1080
08cc4     F2 34 02 F1 | 	add	local08, objptr
08cc8     04 34 06 F1 | 	add	local08, #4
08ccc     1A 35 02 FB | 	rdlong	local08, local08
08cd0     11 34 0E F2 | 	cmp	local08, #17 wz
08cd4     35 00 00 FF 
08cd8     0C E4 85 F1 | 	sub	objptr, ##27148
08cdc     60 01 90 5D |  if_ne	jmp	#LR__0814
08ce0     21 2A 06 F6 | 	mov	local03, #33
08ce4     13 35 02 F6 | 	mov	local08, local01
08ce8     14 33 02 F6 | 	mov	local07, local02
08cec     15 39 02 F6 | 	mov	local10, local03
08cf0     4A 00 00 FF 
08cf4     7C E4 05 F1 | 	add	objptr, ##38012
08cf8     F2 3A 02 FB | 	rdlong	local11, objptr
08cfc     1D 3D 02 F6 | 	mov	local12, local11
08d00     01 3C 66 F0 | 	shl	local12, #1
08d04     1D 3D 02 F1 | 	add	local12, local11
08d08     02 3C 66 F0 | 	shl	local12, #2
08d0c     03 00 00 FF 
08d10     00 E4 85 F1 | 	sub	objptr, ##1536
08d14     F2 3C 02 F1 | 	add	local12, objptr
08d18     1E 35 62 FC | 	wrlong	local08, local12
08d1c     03 00 00 FF 
08d20     00 E4 05 F1 | 	add	objptr, ##1536
08d24     F2 3E 02 FB | 	rdlong	local13, objptr
08d28     1F 35 02 F6 | 	mov	local08, local13
08d2c     01 34 66 F0 | 	shl	local08, #1
08d30     1F 35 02 F1 | 	add	local08, local13
08d34     02 34 66 F0 | 	shl	local08, #2
08d38     03 00 00 FF 
08d3c     00 E4 85 F1 | 	sub	objptr, ##1536
08d40     F2 34 02 F1 | 	add	local08, objptr
08d44     04 34 06 F1 | 	add	local08, #4
08d48     1A 33 62 FC | 	wrlong	local07, local08
08d4c     03 00 00 FF 
08d50     00 E4 05 F1 | 	add	objptr, ##1536
08d54     F2 34 02 FB | 	rdlong	local08, objptr
08d58     1A 41 02 F6 | 	mov	local14, local08
08d5c     01 40 66 F0 | 	shl	local14, #1
08d60     1A 41 02 F1 | 	add	local14, local08
08d64     02 40 66 F0 | 	shl	local14, #2
08d68     03 00 00 FF 
08d6c     00 E4 85 F1 | 	sub	objptr, ##1536
08d70     F2 40 02 F1 | 	add	local14, objptr
08d74     08 40 06 F1 | 	add	local14, #8
08d78     20 39 62 FC | 	wrlong	local10, local14
08d7c     03 00 00 FF 
08d80     00 E4 05 F1 | 	add	objptr, ##1536
08d84     F2 34 02 FB | 	rdlong	local08, objptr
08d88     01 34 06 F1 | 	add	local08, #1
08d8c     F2 34 62 FC | 	wrlong	local08, objptr
08d90     44 2A 06 F6 | 	mov	local03, #68
08d94     13 35 02 F6 | 	mov	local08, local01
08d98     14 33 02 F6 | 	mov	local07, local02
08d9c     15 39 02 F6 | 	mov	local10, local03
08da0     F2 40 02 FB | 	rdlong	local14, objptr
08da4     20 3F 02 F6 | 	mov	local13, local14
08da8     01 3E 66 F0 | 	shl	local13, #1
08dac     20 3F 02 F1 | 	add	local13, local14
08db0     02 3E 66 F0 | 	shl	local13, #2
08db4     03 00 00 FF 
08db8     00 E4 85 F1 | 	sub	objptr, ##1536
08dbc     F2 3E 02 F1 | 	add	local13, objptr
08dc0     1F 35 62 FC | 	wrlong	local08, local13
08dc4     03 00 00 FF 
08dc8     00 E4 05 F1 | 	add	objptr, ##1536
08dcc     F2 40 02 FB | 	rdlong	local14, objptr
08dd0     20 3F 02 F6 | 	mov	local13, local14
08dd4     01 3E 66 F0 | 	shl	local13, #1
08dd8     20 3F 02 F1 | 	add	local13, local14
08ddc     02 3E 66 F0 | 	shl	local13, #2
08de0     03 00 00 FF 
08de4     00 E4 85 F1 | 	sub	objptr, ##1536
08de8     F2 3E 02 F1 | 	add	local13, objptr
08dec     04 3E 06 F1 | 	add	local13, #4
08df0     1F 33 62 FC | 	wrlong	local07, local13
08df4     03 00 00 FF 
08df8     00 E4 05 F1 | 	add	objptr, ##1536
08dfc     F2 3E 02 FB | 	rdlong	local13, objptr
08e00     1F 41 02 F6 | 	mov	local14, local13
08e04     01 40 66 F0 | 	shl	local14, #1
08e08     1F 41 02 F1 | 	add	local14, local13
08e0c     02 40 66 F0 | 	shl	local14, #2
08e10     03 00 00 FF 
08e14     00 E4 85 F1 | 	sub	objptr, ##1536
08e18     F2 40 02 F1 | 	add	local14, objptr
08e1c     08 40 06 F1 | 	add	local14, #8
08e20     20 39 62 FC | 	wrlong	local10, local14
08e24     03 00 00 FF 
08e28     00 E4 05 F1 | 	add	objptr, ##1536
08e2c     F2 34 02 FB | 	rdlong	local08, objptr
08e30     01 34 06 F1 | 	add	local08, #1
08e34     F2 34 62 FC | 	wrlong	local08, objptr
08e38     4A 00 00 FF 
08e3c     7C E4 85 F1 | 	sub	objptr, ##38012
08e40                 | LR__0814
08e40                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e40     37 00 00 FF 
08e44     44 E4 05 F1 | 	add	objptr, ##28228
08e48     F2 34 02 FB | 	rdlong	local08, objptr
08e4c     03 34 66 F0 | 	shl	local08, #3
08e50     02 00 00 FF 
08e54     38 E4 85 F1 | 	sub	objptr, ##1080
08e58     F2 34 02 F1 | 	add	local08, objptr
08e5c     04 34 06 F1 | 	add	local08, #4
08e60     1A 41 02 FB | 	rdlong	local14, local08
08e64     12 40 0E F2 | 	cmp	local14, #18 wz
08e68     35 00 00 FF 
08e6c     0C E4 85 F1 | 	sub	objptr, ##27148
08e70     60 01 90 5D |  if_ne	jmp	#LR__0815
08e74     22 2A 06 F6 | 	mov	local03, #34
08e78     13 35 02 F6 | 	mov	local08, local01
08e7c     14 33 02 F6 | 	mov	local07, local02
08e80     15 39 02 F6 | 	mov	local10, local03
08e84     4A 00 00 FF 
08e88     7C E4 05 F1 | 	add	objptr, ##38012
08e8c     F2 40 02 FB | 	rdlong	local14, objptr
08e90     20 3F 02 F6 | 	mov	local13, local14
08e94     01 3E 66 F0 | 	shl	local13, #1
08e98     20 3F 02 F1 | 	add	local13, local14
08e9c     02 3E 66 F0 | 	shl	local13, #2
08ea0     03 00 00 FF 
08ea4     00 E4 85 F1 | 	sub	objptr, ##1536
08ea8     F2 3E 02 F1 | 	add	local13, objptr
08eac     1F 35 62 FC | 	wrlong	local08, local13
08eb0     03 00 00 FF 
08eb4     00 E4 05 F1 | 	add	objptr, ##1536
08eb8     F2 40 02 FB | 	rdlong	local14, objptr
08ebc     20 35 02 F6 | 	mov	local08, local14
08ec0     01 34 66 F0 | 	shl	local08, #1
08ec4     20 35 02 F1 | 	add	local08, local14
08ec8     02 34 66 F0 | 	shl	local08, #2
08ecc     03 00 00 FF 
08ed0     00 E4 85 F1 | 	sub	objptr, ##1536
08ed4     F2 34 02 F1 | 	add	local08, objptr
08ed8     04 34 06 F1 | 	add	local08, #4
08edc     1A 33 62 FC | 	wrlong	local07, local08
08ee0     03 00 00 FF 
08ee4     00 E4 05 F1 | 	add	objptr, ##1536
08ee8     F2 34 02 FB | 	rdlong	local08, objptr
08eec     1A 41 02 F6 | 	mov	local14, local08
08ef0     01 40 66 F0 | 	shl	local14, #1
08ef4     1A 41 02 F1 | 	add	local14, local08
08ef8     02 40 66 F0 | 	shl	local14, #2
08efc     03 00 00 FF 
08f00     00 E4 85 F1 | 	sub	objptr, ##1536
08f04     F2 40 02 F1 | 	add	local14, objptr
08f08     08 40 06 F1 | 	add	local14, #8
08f0c     20 39 62 FC | 	wrlong	local10, local14
08f10     03 00 00 FF 
08f14     00 E4 05 F1 | 	add	objptr, ##1536
08f18     F2 34 02 FB | 	rdlong	local08, objptr
08f1c     01 34 06 F1 | 	add	local08, #1
08f20     F2 34 62 FC | 	wrlong	local08, objptr
08f24     44 2A 06 F6 | 	mov	local03, #68
08f28     13 35 02 F6 | 	mov	local08, local01
08f2c     14 33 02 F6 | 	mov	local07, local02
08f30     15 39 02 F6 | 	mov	local10, local03
08f34     F2 40 02 FB | 	rdlong	local14, objptr
08f38     20 3F 02 F6 | 	mov	local13, local14
08f3c     01 3E 66 F0 | 	shl	local13, #1
08f40     20 3F 02 F1 | 	add	local13, local14
08f44     02 3E 66 F0 | 	shl	local13, #2
08f48     03 00 00 FF 
08f4c     00 E4 85 F1 | 	sub	objptr, ##1536
08f50     F2 3E 02 F1 | 	add	local13, objptr
08f54     1F 35 62 FC | 	wrlong	local08, local13
08f58     03 00 00 FF 
08f5c     00 E4 05 F1 | 	add	objptr, ##1536
08f60     F2 40 02 FB | 	rdlong	local14, objptr
08f64     20 3F 02 F6 | 	mov	local13, local14
08f68     01 3E 66 F0 | 	shl	local13, #1
08f6c     20 3F 02 F1 | 	add	local13, local14
08f70     02 3E 66 F0 | 	shl	local13, #2
08f74     03 00 00 FF 
08f78     00 E4 85 F1 | 	sub	objptr, ##1536
08f7c     F2 3E 02 F1 | 	add	local13, objptr
08f80     04 3E 06 F1 | 	add	local13, #4
08f84     1F 33 62 FC | 	wrlong	local07, local13
08f88     03 00 00 FF 
08f8c     00 E4 05 F1 | 	add	objptr, ##1536
08f90     F2 3E 02 FB | 	rdlong	local13, objptr
08f94     1F 41 02 F6 | 	mov	local14, local13
08f98     01 40 66 F0 | 	shl	local14, #1
08f9c     1F 41 02 F1 | 	add	local14, local13
08fa0     02 40 66 F0 | 	shl	local14, #2
08fa4     03 00 00 FF 
08fa8     00 E4 85 F1 | 	sub	objptr, ##1536
08fac     F2 40 02 F1 | 	add	local14, objptr
08fb0     08 40 06 F1 | 	add	local14, #8
08fb4     20 39 62 FC | 	wrlong	local10, local14
08fb8     03 00 00 FF 
08fbc     00 E4 05 F1 | 	add	objptr, ##1536
08fc0     F2 34 02 FB | 	rdlong	local08, objptr
08fc4     01 34 06 F1 | 	add	local08, #1
08fc8     F2 34 62 FC | 	wrlong	local08, objptr
08fcc     4A 00 00 FF 
08fd0     7C E4 85 F1 | 	sub	objptr, ##38012
08fd4                 | LR__0815
08fd4                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08fd4     37 00 00 FF 
08fd8     44 E4 05 F1 | 	add	objptr, ##28228
08fdc     F2 34 02 FB | 	rdlong	local08, objptr
08fe0     03 34 66 F0 | 	shl	local08, #3
08fe4     02 00 00 FF 
08fe8     38 E4 85 F1 | 	sub	objptr, ##1080
08fec     F2 34 02 F1 | 	add	local08, objptr
08ff0     04 34 06 F1 | 	add	local08, #4
08ff4     1A 41 02 FB | 	rdlong	local14, local08
08ff8     12 40 0E F2 | 	cmp	local14, #18 wz
08ffc     35 00 00 FF 
09000     0C E4 85 F1 | 	sub	objptr, ##27148
09004     00 01 90 AD |  if_e	jmp	#LR__0816
09008     37 00 00 FF 
0900c     44 E4 05 F1 | 	add	objptr, ##28228
09010     F2 34 02 FB | 	rdlong	local08, objptr
09014     03 34 66 F0 | 	shl	local08, #3
09018     02 00 00 FF 
0901c     38 E4 85 F1 | 	sub	objptr, ##1080
09020     F2 34 02 F1 | 	add	local08, objptr
09024     04 34 06 F1 | 	add	local08, #4
09028     1A 41 02 FB | 	rdlong	local14, local08
0902c     11 40 0E F2 | 	cmp	local14, #17 wz
09030     35 00 00 FF 
09034     0C E4 85 F1 | 	sub	objptr, ##27148
09038     CC 00 90 AD |  if_e	jmp	#LR__0816
0903c     44 2A 06 F6 | 	mov	local03, #68
09040     13 35 02 F6 | 	mov	local08, local01
09044     14 33 02 F6 | 	mov	local07, local02
09048     15 39 02 F6 | 	mov	local10, local03
0904c     4A 00 00 FF 
09050     7C E4 05 F1 | 	add	objptr, ##38012
09054     F2 40 02 FB | 	rdlong	local14, objptr
09058     20 3F 02 F6 | 	mov	local13, local14
0905c     01 3E 66 F0 | 	shl	local13, #1
09060     20 3F 02 F1 | 	add	local13, local14
09064     02 3E 66 F0 | 	shl	local13, #2
09068     03 00 00 FF 
0906c     00 E4 85 F1 | 	sub	objptr, ##1536
09070     F2 3E 02 F1 | 	add	local13, objptr
09074     1F 35 62 FC | 	wrlong	local08, local13
09078     03 00 00 FF 
0907c     00 E4 05 F1 | 	add	objptr, ##1536
09080     F2 40 02 FB | 	rdlong	local14, objptr
09084     20 3F 02 F6 | 	mov	local13, local14
09088     01 3E 66 F0 | 	shl	local13, #1
0908c     20 3F 02 F1 | 	add	local13, local14
09090     02 3E 66 F0 | 	shl	local13, #2
09094     03 00 00 FF 
09098     00 E4 85 F1 | 	sub	objptr, ##1536
0909c     F2 3E 02 F1 | 	add	local13, objptr
090a0     04 3E 06 F1 | 	add	local13, #4
090a4     1F 33 62 FC | 	wrlong	local07, local13
090a8     03 00 00 FF 
090ac     00 E4 05 F1 | 	add	objptr, ##1536
090b0     F2 3E 02 FB | 	rdlong	local13, objptr
090b4     1F 41 02 F6 | 	mov	local14, local13
090b8     01 40 66 F0 | 	shl	local14, #1
090bc     1F 41 02 F1 | 	add	local14, local13
090c0     02 40 66 F0 | 	shl	local14, #2
090c4     03 00 00 FF 
090c8     00 E4 85 F1 | 	sub	objptr, ##1536
090cc     F2 40 02 F1 | 	add	local14, objptr
090d0     08 40 06 F1 | 	add	local14, #8
090d4     20 39 62 FC | 	wrlong	local10, local14
090d8     03 00 00 FF 
090dc     00 E4 05 F1 | 	add	objptr, ##1536
090e0     F2 34 02 FB | 	rdlong	local08, objptr
090e4     01 34 06 F1 | 	add	local08, #1
090e8     F2 34 62 FC | 	wrlong	local08, objptr
090ec     13 00 00 FF 
090f0     38 E4 85 F1 | 	sub	objptr, ##9784
090f4     F2 34 02 FB | 	rdlong	local08, objptr
090f8     01 34 86 F1 | 	sub	local08, #1
090fc     F2 34 62 FC | 	wrlong	local08, objptr
09100     37 00 00 FF 
09104     44 E4 85 F1 | 	sub	objptr, ##28228
09108                 | LR__0816
09108     37 00 00 FF 
0910c     44 E4 05 F1 | 	add	objptr, ##28228
09110     F2 34 02 FB | 	rdlong	local08, objptr
09114     01 34 06 F1 | 	add	local08, #1
09118     F2 34 62 FC | 	wrlong	local08, objptr
0911c     37 00 00 FF 
09120     44 E4 85 F1 | 	sub	objptr, ##28228
09124                 | LR__0817
09124     00 2E 06 F6 | 	mov	local05, #0
09128                 | ' i=0 : err=0
09128                 | ' if lparts(ct).token<>token_end then
09128     37 00 00 FF 
0912c     44 E4 05 F1 | 	add	objptr, ##28228
09130     F2 40 02 FB | 	rdlong	local14, objptr
09134     03 40 66 F0 | 	shl	local14, #3
09138     02 00 00 FF 
0913c     38 E4 85 F1 | 	sub	objptr, ##1080
09140     F2 40 02 F1 | 	add	local14, objptr
09144     04 40 06 F1 | 	add	local14, #4
09148     20 41 02 FB | 	rdlong	local14, local14
0914c     FE 41 0E F2 | 	cmp	local14, #510 wz
09150     35 00 00 FF 
09154     0C E4 85 F1 | 	sub	objptr, ##27148
09158     98 00 90 AD |  if_e	jmp	#LR__0819
0915c                 | '   do
0915c                 | LR__0818
0915c     58 28 B0 FD | 	call	#_getaddr
09160     FD 42 02 F6 | 	mov	local15, result1
09164     37 00 00 FF 
09168     44 E4 05 F1 | 	add	objptr, ##28228
0916c     F2 40 02 FB | 	rdlong	local14, objptr
09170     01 40 06 F1 | 	add	local14, #1
09174     F2 40 62 FC | 	wrlong	local14, objptr
09178     01 2E 06 F1 | 	add	local05, #1
0917c                 | '     err=getaddr() :ct+=1
0917c                 | '     i+=1 
0917c                 | '     if lparts(ct).token=token_comma then ct+=1 
0917c     03 40 66 F0 | 	shl	local14, #3
09180     02 00 00 FF 
09184     38 E4 85 F1 | 	sub	objptr, ##1080
09188     F2 40 02 F1 | 	add	local14, objptr
0918c     04 40 06 F1 | 	add	local14, #4
09190     20 41 02 FB | 	rdlong	local14, local14
09194     11 40 0E F2 | 	cmp	local14, #17 wz
09198     35 00 00 FF 
0919c     0C E4 85 F1 | 	sub	objptr, ##27148
091a0     37 00 00 AF 
091a4     44 E4 05 A1 |  if_e	add	objptr, ##28228
091a8     F2 34 02 AB |  if_e	rdlong	local08, objptr
091ac     01 34 06 A1 |  if_e	add	local08, #1
091b0     F2 34 62 AC |  if_e	wrlong	local08, objptr
091b4     37 00 00 AF 
091b8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
091bc                 | '     if lparts(ct).token=token_end then exit loop
091bc     37 00 00 FF 
091c0     44 E4 05 F1 | 	add	objptr, ##28228
091c4     F2 40 02 FB | 	rdlong	local14, objptr
091c8     03 40 66 F0 | 	shl	local14, #3
091cc     02 00 00 FF 
091d0     38 E4 85 F1 | 	sub	objptr, ##1080
091d4     F2 40 02 F1 | 	add	local14, objptr
091d8     04 40 06 F1 | 	add	local14, #4
091dc     20 41 02 FB | 	rdlong	local14, local14
091e0     FE 41 0E F2 | 	cmp	local14, #510 wz
091e4     35 00 00 FF 
091e8     0C E4 85 F1 | 	sub	objptr, ##27148
091ec     08 00 90 AD |  if_e	jmp	#LR__0820
091f0     68 FF 9F FD | 	jmp	#LR__0818
091f4                 | LR__0819
091f4     36 42 06 F6 | 	mov	local15, #54
091f8                 | LR__0820
091f8                 | ' return i,err
091f8     17 FB 01 F6 | 	mov	result1, local05
091fc     21 FD 01 F6 | 	mov	result2, local15
09200     A7 F0 03 F6 | 	mov	ptra, fp
09204     B2 00 A0 FD | 	call	#popregs_
09208                 | _compile_input_ret
09208     2D 00 64 FD | 	ret
0920c                 | 
0920c                 | ' 
0920c                 | ' '----- compile assign to an array element
0920c                 | ' 
0920c                 | ' function compile_array_assign() as ulong 
0920c                 | _compile_array_assign
0920c     0B 4A 05 F6 | 	mov	COUNT_, #11
09210     A8 00 A0 FD | 	call	#pushregs_
09214     00 2C 06 F6 | 	mov	local04, #0
09218     00 2E 06 F6 | 	mov	local05, #0
0921c     37 00 00 FF 
09220     44 E4 05 F1 | 	add	objptr, ##28228
09224     F2 30 02 FB | 	rdlong	local06, objptr
09228     18 FB 01 F6 | 	mov	result1, local06
0922c     01 FA 85 F1 | 	sub	result1, #1
09230     03 FA 65 F0 | 	shl	result1, #3
09234     02 00 00 FF 
09238     38 E4 85 F1 | 	sub	objptr, ##1080
0923c     F2 FA 01 F1 | 	add	result1, objptr
09240     FD 32 02 FB | 	rdlong	local07, result1
09244                 | ' numpar=0 : err=0
09244                 | ' varname$=lparts(ct-1).part$
09244                 | ' if lparts(ct).token=token_lpar then
09244     03 30 66 F0 | 	shl	local06, #3
09248     F2 30 02 F1 | 	add	local06, objptr
0924c     04 30 06 F1 | 	add	local06, #4
09250     18 31 02 FB | 	rdlong	local06, local06
09254     15 30 0E F2 | 	cmp	local06, #21 wz
09258     35 00 00 FF 
0925c     0C E4 85 F1 | 	sub	objptr, ##27148
09260     F4 01 90 5D |  if_ne	jmp	#LR__0834
09264     37 00 00 FF 
09268     44 E4 05 F1 | 	add	objptr, ##28228
0926c     F2 34 02 FB | 	rdlong	local08, objptr
09270     01 34 06 F1 | 	add	local08, #1
09274     F2 34 62 FC | 	wrlong	local08, objptr
09278     37 00 00 FF 
0927c     44 E4 85 F1 | 	sub	objptr, ##28228
09280                 | '   ct+=1 											' omit this lpar, this is for expr list
09280                 | '   do
09280                 | LR__0830
09280     C8 2A B0 FD | 	call	#_expr
09284     37 00 00 FF 
09288     44 E4 05 F1 | 	add	objptr, ##28228
0928c     F2 30 02 FB | 	rdlong	local06, objptr
09290     01 30 06 F1 | 	add	local06, #1
09294     F2 30 62 FC | 	wrlong	local06, objptr
09298     01 2C 06 F1 | 	add	local04, #1
0929c     01 30 86 F1 | 	sub	local06, #1
092a0     03 30 66 F0 | 	shl	local06, #3
092a4     02 00 00 FF 
092a8     38 E4 85 F1 | 	sub	objptr, ##1080
092ac     F2 30 02 F1 | 	add	local06, objptr
092b0     04 30 06 F1 | 	add	local06, #4
092b4     18 35 02 FB | 	rdlong	local08, local06
092b8     14 34 0E F2 | 	cmp	local08, #20 wz
092bc     35 00 00 FF 
092c0     0C E4 85 F1 | 	sub	objptr, ##27148
092c4     34 00 90 AD |  if_e	jmp	#LR__0831
092c8     37 00 00 FF 
092cc     44 E4 05 F1 | 	add	objptr, ##28228
092d0     F2 34 02 FB | 	rdlong	local08, objptr
092d4     03 34 66 F0 | 	shl	local08, #3
092d8     02 00 00 FF 
092dc     38 E4 85 F1 | 	sub	objptr, ##1080
092e0     F2 34 02 F1 | 	add	local08, objptr
092e4     04 34 06 F1 | 	add	local08, #4
092e8     1A 35 02 FB | 	rdlong	local08, local08
092ec     FE 35 0E F2 | 	cmp	local08, #510 wz
092f0     35 00 00 FF 
092f4     0C E4 85 F1 | 	sub	objptr, ##27148
092f8     84 FF 9F 5D |  if_ne	jmp	#LR__0830
092fc                 | LR__0831
092fc     37 00 00 FF 
09300     44 E4 05 F1 | 	add	objptr, ##28228
09304     F2 34 02 FB | 	rdlong	local08, objptr
09308     01 34 06 F1 | 	add	local08, #1
0930c     F2 34 62 FC | 	wrlong	local08, objptr
09310     37 00 00 FF 
09314     44 E4 85 F1 | 	sub	objptr, ##28228
09318     30 2A B0 FD | 	call	#_expr
0931c     01 36 66 F6 | 	neg	local09, #1
09320     00 38 06 F6 | 	mov	local10, #0
09324                 | '   ct+=1 : expr()
09324                 | '   j=-1 : i=0 
09324                 | '   do 
09324                 | LR__0832
09324                 | '     if variables(i).name=varname$ then j=i: exit loop
09324     1C 31 02 F6 | 	mov	local06, local10
09328     04 30 66 F0 | 	shl	local06, #4
0932c     14 00 00 FF 
09330     F8 E5 05 F1 | 	add	objptr, ##10744
09334     F2 30 02 F1 | 	add	local06, objptr
09338     18 13 02 FB | 	rdlong	arg01, local06
0933c     19 15 02 F6 | 	mov	arg02, local07
09340     14 00 00 FF 
09344     F8 E5 85 F1 | 	sub	objptr, ##10744
09348     D4 D5 B1 FD | 	call	#__system___string_cmp
0934c     00 FA 0D F2 | 	cmp	result1, #0 wz
09350     1C 37 02 A6 |  if_e	mov	local09, local10
09354     20 00 90 AD |  if_e	jmp	#LR__0833
09358     01 38 06 F1 | 	add	local10, #1
0935c     35 00 00 FF 
09360     08 E4 05 F1 | 	add	objptr, ##27144
09364     F2 34 02 FB | 	rdlong	local08, objptr
09368     35 00 00 FF 
0936c     08 E4 85 F1 | 	sub	objptr, ##27144
09370     1A 39 5A F2 | 	cmps	local10, local08 wcz
09374     AC FF 9F ED |  if_be	jmp	#LR__0832
09378                 | LR__0833
09378     1B 27 02 F6 | 	mov	local01, local09
0937c     16 29 02 F6 | 	mov	local02, local04
09380     17 2A 06 F6 | 	mov	local03, #23
09384     13 35 02 F6 | 	mov	local08, local01
09388     14 3B 02 F6 | 	mov	local11, local02
0938c     15 33 02 F6 | 	mov	local07, local03
09390     4A 00 00 FF 
09394     7C E4 05 F1 | 	add	objptr, ##38012
09398     F2 26 02 FB | 	rdlong	local01, objptr
0939c     13 37 02 F6 | 	mov	local09, local01
093a0     01 36 66 F0 | 	shl	local09, #1
093a4     13 37 02 F1 | 	add	local09, local01
093a8     02 36 66 F0 | 	shl	local09, #2
093ac     03 00 00 FF 
093b0     00 E4 85 F1 | 	sub	objptr, ##1536
093b4     F2 36 02 F1 | 	add	local09, objptr
093b8     1B 35 62 FC | 	wrlong	local08, local09
093bc     03 00 00 FF 
093c0     00 E4 05 F1 | 	add	objptr, ##1536
093c4     F2 26 02 FB | 	rdlong	local01, objptr
093c8     13 37 02 F6 | 	mov	local09, local01
093cc     01 36 66 F0 | 	shl	local09, #1
093d0     13 37 02 F1 | 	add	local09, local01
093d4     02 36 66 F0 | 	shl	local09, #2
093d8     03 00 00 FF 
093dc     00 E4 85 F1 | 	sub	objptr, ##1536
093e0     F2 36 02 F1 | 	add	local09, objptr
093e4     04 36 06 F1 | 	add	local09, #4
093e8     1B 3B 62 FC | 	wrlong	local11, local09
093ec     03 00 00 FF 
093f0     00 E4 05 F1 | 	add	objptr, ##1536
093f4     F2 3A 02 FB | 	rdlong	local11, objptr
093f8     1D 27 02 F6 | 	mov	local01, local11
093fc     01 26 66 F0 | 	shl	local01, #1
09400     1D 27 02 F1 | 	add	local01, local11
09404     02 26 66 F0 | 	shl	local01, #2
09408     03 00 00 FF 
0940c     00 E4 85 F1 | 	sub	objptr, ##1536
09410     F2 26 02 F1 | 	add	local01, objptr
09414     08 26 06 F1 | 	add	local01, #8
09418     13 33 62 FC | 	wrlong	local07, local01
0941c     03 00 00 FF 
09420     00 E4 05 F1 | 	add	objptr, ##1536
09424     F2 34 02 FB | 	rdlong	local08, objptr
09428     01 34 06 F1 | 	add	local08, #1
0942c     F2 34 62 FC | 	wrlong	local08, objptr
09430                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09430                 | '   if numpar>3 then err=45
09430     04 2C 16 F2 | 	cmp	local04, #4 wc
09434     2D 2E 06 36 |  if_ae	mov	local05, #45
09438                 | '   if i>varnum then err=20
09438     15 00 00 FF 
0943c     74 E4 85 F1 | 	sub	objptr, ##10868
09440     F2 34 02 FB | 	rdlong	local08, objptr
09444     35 00 00 FF 
09448     08 E4 85 F1 | 	sub	objptr, ##27144
0944c     1A 39 5A F2 | 	cmps	local10, local08 wcz
09450     14 2E 06 16 |  if_a	mov	local05, #20
09454     04 00 90 FD | 	jmp	#LR__0835
09458                 | LR__0834
09458     0E 2E 06 F6 | 	mov	local05, #14
0945c                 | LR__0835
0945c                 | ' return err
0945c     17 FB 01 F6 | 	mov	result1, local05
09460     A7 F0 03 F6 | 	mov	ptra, fp
09464     B2 00 A0 FD | 	call	#popregs_
09468                 | _compile_array_assign_ret
09468     2D 00 64 FD | 	ret
0946c                 | 
0946c                 | ' 
0946c                 | ' '----- compile print command with its ";" and "," modifiers
0946c                 | ' 
0946c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0946c                 | _compile_print
0946c     0B 4A 05 F6 | 	mov	COUNT_, #11
09470     A8 00 A0 FD | 	call	#pushregs_
09474     00 26 06 F6 | 	mov	local01, #0
09478     1D 2A 06 F6 | 	mov	local03, #29
0947c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0947c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0947c     37 00 00 FF 
09480     44 E4 05 F1 | 	add	objptr, ##28228
09484     F2 2C 02 FB | 	rdlong	local04, objptr
09488     03 2C 66 F0 | 	shl	local04, #3
0948c     02 00 00 FF 
09490     38 E4 85 F1 | 	sub	objptr, ##1080
09494     F2 2C 02 F1 | 	add	local04, objptr
09498     04 2C 06 F1 | 	add	local04, #4
0949c     16 2D 02 FB | 	rdlong	local04, local04
094a0     FE 2D 0E F2 | 	cmp	local04, #510 wz
094a4     35 00 00 FF 
094a8     0C E4 85 F1 | 	sub	objptr, ##27148
094ac     68 01 90 5D |  if_ne	jmp	#LR__0840
094b0     20 2A 06 F6 | 	mov	local03, #32
094b4     13 2F 02 F6 | 	mov	local05, local01
094b8     14 31 02 F6 | 	mov	local06, local02
094bc     15 33 02 F6 | 	mov	local07, local03
094c0     4A 00 00 FF 
094c4     7C E4 05 F1 | 	add	objptr, ##38012
094c8     F2 34 02 FB | 	rdlong	local08, objptr
094cc     1A 37 02 F6 | 	mov	local09, local08
094d0     01 36 66 F0 | 	shl	local09, #1
094d4     1A 37 02 F1 | 	add	local09, local08
094d8     02 36 66 F0 | 	shl	local09, #2
094dc     03 00 00 FF 
094e0     00 E4 85 F1 | 	sub	objptr, ##1536
094e4     F2 36 02 F1 | 	add	local09, objptr
094e8     1B 2F 62 FC | 	wrlong	local05, local09
094ec     03 00 00 FF 
094f0     00 E4 05 F1 | 	add	objptr, ##1536
094f4     F2 2E 02 FB | 	rdlong	local05, objptr
094f8     17 39 02 F6 | 	mov	local10, local05
094fc     01 38 66 F0 | 	shl	local10, #1
09500     17 39 02 F1 | 	add	local10, local05
09504     02 38 66 F0 | 	shl	local10, #2
09508     03 00 00 FF 
0950c     00 E4 85 F1 | 	sub	objptr, ##1536
09510     F2 38 02 F1 | 	add	local10, objptr
09514     04 38 06 F1 | 	add	local10, #4
09518     1C 31 62 FC | 	wrlong	local06, local10
0951c     03 00 00 FF 
09520     00 E4 05 F1 | 	add	objptr, ##1536
09524     F2 2E 02 FB | 	rdlong	local05, objptr
09528     17 3B 02 F6 | 	mov	local11, local05
0952c     01 3A 66 F0 | 	shl	local11, #1
09530     17 3B 02 F1 | 	add	local11, local05
09534     02 3A 66 F0 | 	shl	local11, #2
09538     03 00 00 FF 
0953c     00 E4 85 F1 | 	sub	objptr, ##1536
09540     F2 3A 02 F1 | 	add	local11, objptr
09544     08 3A 06 F1 | 	add	local11, #8
09548     1D 33 62 FC | 	wrlong	local07, local11
0954c     03 00 00 FF 
09550     00 E4 05 F1 | 	add	objptr, ##1536
09554     F2 2E 02 FB | 	rdlong	local05, objptr
09558     01 2E 06 F1 | 	add	local05, #1
0955c     F2 2E 62 FC | 	wrlong	local05, objptr
09560     44 2A 06 F6 | 	mov	local03, #68
09564     13 2F 02 F6 | 	mov	local05, local01
09568     14 31 02 F6 | 	mov	local06, local02
0956c     15 33 02 F6 | 	mov	local07, local03
09570     F2 34 02 FB | 	rdlong	local08, objptr
09574     1A 37 02 F6 | 	mov	local09, local08
09578     01 36 66 F0 | 	shl	local09, #1
0957c     1A 37 02 F1 | 	add	local09, local08
09580     02 36 66 F0 | 	shl	local09, #2
09584     03 00 00 FF 
09588     00 E4 85 F1 | 	sub	objptr, ##1536
0958c     F2 36 02 F1 | 	add	local09, objptr
09590     1B 2F 62 FC | 	wrlong	local05, local09
09594     03 00 00 FF 
09598     00 E4 05 F1 | 	add	objptr, ##1536
0959c     F2 3A 02 FB | 	rdlong	local11, objptr
095a0     1D 39 02 F6 | 	mov	local10, local11
095a4     01 38 66 F0 | 	shl	local10, #1
095a8     1D 39 02 F1 | 	add	local10, local11
095ac     02 38 66 F0 | 	shl	local10, #2
095b0     03 00 00 FF 
095b4     00 E4 85 F1 | 	sub	objptr, ##1536
095b8     F2 38 02 F1 | 	add	local10, objptr
095bc     04 38 06 F1 | 	add	local10, #4
095c0     1C 31 62 FC | 	wrlong	local06, local10
095c4     03 00 00 FF 
095c8     00 E4 05 F1 | 	add	objptr, ##1536
095cc     F2 38 02 FB | 	rdlong	local10, objptr
095d0     1C 3B 02 F6 | 	mov	local11, local10
095d4     01 3A 66 F0 | 	shl	local11, #1
095d8     1C 3B 02 F1 | 	add	local11, local10
095dc     02 3A 66 F0 | 	shl	local11, #2
095e0     03 00 00 FF 
095e4     00 E4 85 F1 | 	sub	objptr, ##1536
095e8     F2 3A 02 F1 | 	add	local11, objptr
095ec     08 3A 06 F1 | 	add	local11, #8
095f0     1D 33 62 FC | 	wrlong	local07, local11
095f4     03 00 00 FF 
095f8     00 E4 05 F1 | 	add	objptr, ##1536
095fc     F2 2E 02 FB | 	rdlong	local05, objptr
09600     01 2E 06 F1 | 	add	local05, #1
09604     F2 2E 62 FC | 	wrlong	local05, objptr
09608     4A 00 00 FF 
0960c     7C E4 85 F1 | 	sub	objptr, ##38012
09610     00 FA 05 F6 | 	mov	result1, #0
09614     20 05 90 FD | 	jmp	#LR__0847
09618                 | LR__0840
09618                 | ' do
09618                 | LR__0841
09618     30 27 B0 FD | 	call	#_expr
0961c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0961c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0961c     37 00 00 FF 
09620     44 E4 05 F1 | 	add	objptr, ##28228
09624     F2 2C 02 FB | 	rdlong	local04, objptr
09628     03 2C 66 F0 | 	shl	local04, #3
0962c     02 00 00 FF 
09630     38 E4 85 F1 | 	sub	objptr, ##1080
09634     F2 2C 02 F1 | 	add	local04, objptr
09638     04 2C 06 F1 | 	add	local04, #4
0963c     16 35 02 FB | 	rdlong	local08, local04
09640     11 34 0E F2 | 	cmp	local08, #17 wz
09644     35 00 00 FF 
09648     0C E4 85 F1 | 	sub	objptr, ##27148
0964c     60 01 90 5D |  if_ne	jmp	#LR__0842
09650     21 2A 06 F6 | 	mov	local03, #33
09654     13 2F 02 F6 | 	mov	local05, local01
09658     14 31 02 F6 | 	mov	local06, local02
0965c     15 33 02 F6 | 	mov	local07, local03
09660     4A 00 00 FF 
09664     7C E4 05 F1 | 	add	objptr, ##38012
09668     F2 34 02 FB | 	rdlong	local08, objptr
0966c     1A 37 02 F6 | 	mov	local09, local08
09670     01 36 66 F0 | 	shl	local09, #1
09674     1A 37 02 F1 | 	add	local09, local08
09678     02 36 66 F0 | 	shl	local09, #2
0967c     03 00 00 FF 
09680     00 E4 85 F1 | 	sub	objptr, ##1536
09684     F2 36 02 F1 | 	add	local09, objptr
09688     1B 2F 62 FC | 	wrlong	local05, local09
0968c     03 00 00 FF 
09690     00 E4 05 F1 | 	add	objptr, ##1536
09694     F2 3A 02 FB | 	rdlong	local11, objptr
09698     1D 39 02 F6 | 	mov	local10, local11
0969c     01 38 66 F0 | 	shl	local10, #1
096a0     1D 39 02 F1 | 	add	local10, local11
096a4     02 38 66 F0 | 	shl	local10, #2
096a8     03 00 00 FF 
096ac     00 E4 85 F1 | 	sub	objptr, ##1536
096b0     F2 38 02 F1 | 	add	local10, objptr
096b4     04 38 06 F1 | 	add	local10, #4
096b8     1C 31 62 FC | 	wrlong	local06, local10
096bc     03 00 00 FF 
096c0     00 E4 05 F1 | 	add	objptr, ##1536
096c4     F2 2E 02 FB | 	rdlong	local05, objptr
096c8     17 3B 02 F6 | 	mov	local11, local05
096cc     01 3A 66 F0 | 	shl	local11, #1
096d0     17 3B 02 F1 | 	add	local11, local05
096d4     02 3A 66 F0 | 	shl	local11, #2
096d8     03 00 00 FF 
096dc     00 E4 85 F1 | 	sub	objptr, ##1536
096e0     F2 3A 02 F1 | 	add	local11, objptr
096e4     08 3A 06 F1 | 	add	local11, #8
096e8     1D 33 62 FC | 	wrlong	local07, local11
096ec     03 00 00 FF 
096f0     00 E4 05 F1 | 	add	objptr, ##1536
096f4     F2 2E 02 FB | 	rdlong	local05, objptr
096f8     01 2E 06 F1 | 	add	local05, #1
096fc     F2 2E 62 FC | 	wrlong	local05, objptr
09700     44 2A 06 F6 | 	mov	local03, #68
09704     13 2F 02 F6 | 	mov	local05, local01
09708     14 31 02 F6 | 	mov	local06, local02
0970c     15 33 02 F6 | 	mov	local07, local03
09710     F2 34 02 FB | 	rdlong	local08, objptr
09714     1A 37 02 F6 | 	mov	local09, local08
09718     01 36 66 F0 | 	shl	local09, #1
0971c     1A 37 02 F1 | 	add	local09, local08
09720     02 36 66 F0 | 	shl	local09, #2
09724     03 00 00 FF 
09728     00 E4 85 F1 | 	sub	objptr, ##1536
0972c     F2 36 02 F1 | 	add	local09, objptr
09730     1B 2F 62 FC | 	wrlong	local05, local09
09734     03 00 00 FF 
09738     00 E4 05 F1 | 	add	objptr, ##1536
0973c     F2 3A 02 FB | 	rdlong	local11, objptr
09740     1D 39 02 F6 | 	mov	local10, local11
09744     01 38 66 F0 | 	shl	local10, #1
09748     1D 39 02 F1 | 	add	local10, local11
0974c     02 38 66 F0 | 	shl	local10, #2
09750     03 00 00 FF 
09754     00 E4 85 F1 | 	sub	objptr, ##1536
09758     F2 38 02 F1 | 	add	local10, objptr
0975c     04 38 06 F1 | 	add	local10, #4
09760     1C 31 62 FC | 	wrlong	local06, local10
09764     03 00 00 FF 
09768     00 E4 05 F1 | 	add	objptr, ##1536
0976c     F2 38 02 FB | 	rdlong	local10, objptr
09770     1C 3B 02 F6 | 	mov	local11, local10
09774     01 3A 66 F0 | 	shl	local11, #1
09778     1C 3B 02 F1 | 	add	local11, local10
0977c     02 3A 66 F0 | 	shl	local11, #2
09780     03 00 00 FF 
09784     00 E4 85 F1 | 	sub	objptr, ##1536
09788     F2 3A 02 F1 | 	add	local11, objptr
0978c     08 3A 06 F1 | 	add	local11, #8
09790     1D 33 62 FC | 	wrlong	local07, local11
09794     03 00 00 FF 
09798     00 E4 05 F1 | 	add	objptr, ##1536
0979c     F2 2E 02 FB | 	rdlong	local05, objptr
097a0     01 2E 06 F1 | 	add	local05, #1
097a4     F2 2E 62 FC | 	wrlong	local05, objptr
097a8     4A 00 00 FF 
097ac     7C E4 85 F1 | 	sub	objptr, ##38012
097b0                 | LR__0842
097b0                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
097b0     37 00 00 FF 
097b4     44 E4 05 F1 | 	add	objptr, ##28228
097b8     F2 2C 02 FB | 	rdlong	local04, objptr
097bc     03 2C 66 F0 | 	shl	local04, #3
097c0     02 00 00 FF 
097c4     38 E4 85 F1 | 	sub	objptr, ##1080
097c8     F2 2C 02 F1 | 	add	local04, objptr
097cc     04 2C 06 F1 | 	add	local04, #4
097d0     16 35 02 FB | 	rdlong	local08, local04
097d4     12 34 0E F2 | 	cmp	local08, #18 wz
097d8     35 00 00 FF 
097dc     0C E4 85 F1 | 	sub	objptr, ##27148
097e0     60 01 90 5D |  if_ne	jmp	#LR__0843
097e4     22 2A 06 F6 | 	mov	local03, #34
097e8     13 2F 02 F6 | 	mov	local05, local01
097ec     14 31 02 F6 | 	mov	local06, local02
097f0     15 33 02 F6 | 	mov	local07, local03
097f4     4A 00 00 FF 
097f8     7C E4 05 F1 | 	add	objptr, ##38012
097fc     F2 34 02 FB | 	rdlong	local08, objptr
09800     1A 37 02 F6 | 	mov	local09, local08
09804     01 36 66 F0 | 	shl	local09, #1
09808     1A 37 02 F1 | 	add	local09, local08
0980c     02 36 66 F0 | 	shl	local09, #2
09810     03 00 00 FF 
09814     00 E4 85 F1 | 	sub	objptr, ##1536
09818     F2 36 02 F1 | 	add	local09, objptr
0981c     1B 2F 62 FC | 	wrlong	local05, local09
09820     03 00 00 FF 
09824     00 E4 05 F1 | 	add	objptr, ##1536
09828     F2 3A 02 FB | 	rdlong	local11, objptr
0982c     1D 39 02 F6 | 	mov	local10, local11
09830     01 38 66 F0 | 	shl	local10, #1
09834     1D 39 02 F1 | 	add	local10, local11
09838     02 38 66 F0 | 	shl	local10, #2
0983c     03 00 00 FF 
09840     00 E4 85 F1 | 	sub	objptr, ##1536
09844     F2 38 02 F1 | 	add	local10, objptr
09848     04 38 06 F1 | 	add	local10, #4
0984c     1C 31 62 FC | 	wrlong	local06, local10
09850     03 00 00 FF 
09854     00 E4 05 F1 | 	add	objptr, ##1536
09858     F2 2E 02 FB | 	rdlong	local05, objptr
0985c     17 3B 02 F6 | 	mov	local11, local05
09860     01 3A 66 F0 | 	shl	local11, #1
09864     17 3B 02 F1 | 	add	local11, local05
09868     02 3A 66 F0 | 	shl	local11, #2
0986c     03 00 00 FF 
09870     00 E4 85 F1 | 	sub	objptr, ##1536
09874     F2 3A 02 F1 | 	add	local11, objptr
09878     08 3A 06 F1 | 	add	local11, #8
0987c     1D 33 62 FC | 	wrlong	local07, local11
09880     03 00 00 FF 
09884     00 E4 05 F1 | 	add	objptr, ##1536
09888     F2 2E 02 FB | 	rdlong	local05, objptr
0988c     01 2E 06 F1 | 	add	local05, #1
09890     F2 2E 62 FC | 	wrlong	local05, objptr
09894     44 2A 06 F6 | 	mov	local03, #68
09898     13 2F 02 F6 | 	mov	local05, local01
0989c     14 31 02 F6 | 	mov	local06, local02
098a0     15 33 02 F6 | 	mov	local07, local03
098a4     F2 34 02 FB | 	rdlong	local08, objptr
098a8     1A 37 02 F6 | 	mov	local09, local08
098ac     01 36 66 F0 | 	shl	local09, #1
098b0     1A 37 02 F1 | 	add	local09, local08
098b4     02 36 66 F0 | 	shl	local09, #2
098b8     03 00 00 FF 
098bc     00 E4 85 F1 | 	sub	objptr, ##1536
098c0     F2 36 02 F1 | 	add	local09, objptr
098c4     1B 2F 62 FC | 	wrlong	local05, local09
098c8     03 00 00 FF 
098cc     00 E4 05 F1 | 	add	objptr, ##1536
098d0     F2 3A 02 FB | 	rdlong	local11, objptr
098d4     1D 39 02 F6 | 	mov	local10, local11
098d8     01 38 66 F0 | 	shl	local10, #1
098dc     1D 39 02 F1 | 	add	local10, local11
098e0     02 38 66 F0 | 	shl	local10, #2
098e4     03 00 00 FF 
098e8     00 E4 85 F1 | 	sub	objptr, ##1536
098ec     F2 38 02 F1 | 	add	local10, objptr
098f0     04 38 06 F1 | 	add	local10, #4
098f4     1C 31 62 FC | 	wrlong	local06, local10
098f8     03 00 00 FF 
098fc     00 E4 05 F1 | 	add	objptr, ##1536
09900     F2 38 02 FB | 	rdlong	local10, objptr
09904     1C 3B 02 F6 | 	mov	local11, local10
09908     01 3A 66 F0 | 	shl	local11, #1
0990c     1C 3B 02 F1 | 	add	local11, local10
09910     02 3A 66 F0 | 	shl	local11, #2
09914     03 00 00 FF 
09918     00 E4 85 F1 | 	sub	objptr, ##1536
0991c     F2 3A 02 F1 | 	add	local11, objptr
09920     08 3A 06 F1 | 	add	local11, #8
09924     1D 33 62 FC | 	wrlong	local07, local11
09928     03 00 00 FF 
0992c     00 E4 05 F1 | 	add	objptr, ##1536
09930     F2 2E 02 FB | 	rdlong	local05, objptr
09934     01 2E 06 F1 | 	add	local05, #1
09938     F2 2E 62 FC | 	wrlong	local05, objptr
0993c     4A 00 00 FF 
09940     7C E4 85 F1 | 	sub	objptr, ##38012
09944                 | LR__0843
09944                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09944     37 00 00 FF 
09948     44 E4 05 F1 | 	add	objptr, ##28228
0994c     F2 2C 02 FB | 	rdlong	local04, objptr
09950     03 2C 66 F0 | 	shl	local04, #3
09954     02 00 00 FF 
09958     38 E4 85 F1 | 	sub	objptr, ##1080
0995c     F2 2C 02 F1 | 	add	local04, objptr
09960     04 2C 06 F1 | 	add	local04, #4
09964     16 35 02 FB | 	rdlong	local08, local04
09968     FE 35 0E F2 | 	cmp	local08, #510 wz
0996c     35 00 00 FF 
09970     0C E4 85 F1 | 	sub	objptr, ##27148
09974     B8 00 90 5D |  if_ne	jmp	#LR__0844
09978     44 2A 06 F6 | 	mov	local03, #68
0997c     13 2F 02 F6 | 	mov	local05, local01
09980     14 31 02 F6 | 	mov	local06, local02
09984     15 33 02 F6 | 	mov	local07, local03
09988     4A 00 00 FF 
0998c     7C E4 05 F1 | 	add	objptr, ##38012
09990     F2 34 02 FB | 	rdlong	local08, objptr
09994     1A 37 02 F6 | 	mov	local09, local08
09998     01 36 66 F0 | 	shl	local09, #1
0999c     1A 37 02 F1 | 	add	local09, local08
099a0     02 36 66 F0 | 	shl	local09, #2
099a4     03 00 00 FF 
099a8     00 E4 85 F1 | 	sub	objptr, ##1536
099ac     F2 36 02 F1 | 	add	local09, objptr
099b0     1B 2F 62 FC | 	wrlong	local05, local09
099b4     03 00 00 FF 
099b8     00 E4 05 F1 | 	add	objptr, ##1536
099bc     F2 3A 02 FB | 	rdlong	local11, objptr
099c0     1D 39 02 F6 | 	mov	local10, local11
099c4     01 38 66 F0 | 	shl	local10, #1
099c8     1D 39 02 F1 | 	add	local10, local11
099cc     02 38 66 F0 | 	shl	local10, #2
099d0     03 00 00 FF 
099d4     00 E4 85 F1 | 	sub	objptr, ##1536
099d8     F2 38 02 F1 | 	add	local10, objptr
099dc     04 38 06 F1 | 	add	local10, #4
099e0     1C 31 62 FC | 	wrlong	local06, local10
099e4     03 00 00 FF 
099e8     00 E4 05 F1 | 	add	objptr, ##1536
099ec     F2 38 02 FB | 	rdlong	local10, objptr
099f0     1C 3B 02 F6 | 	mov	local11, local10
099f4     01 3A 66 F0 | 	shl	local11, #1
099f8     1C 3B 02 F1 | 	add	local11, local10
099fc     02 3A 66 F0 | 	shl	local11, #2
09a00     03 00 00 FF 
09a04     00 E4 85 F1 | 	sub	objptr, ##1536
09a08     F2 3A 02 F1 | 	add	local11, objptr
09a0c     08 3A 06 F1 | 	add	local11, #8
09a10     1D 33 62 FC | 	wrlong	local07, local11
09a14     03 00 00 FF 
09a18     00 E4 05 F1 | 	add	objptr, ##1536
09a1c     F2 2E 02 FB | 	rdlong	local05, objptr
09a20     01 2E 06 F1 | 	add	local05, #1
09a24     F2 2E 62 FC | 	wrlong	local05, objptr
09a28     4A 00 00 FF 
09a2c     7C E4 85 F1 | 	sub	objptr, ##38012
09a30                 | LR__0844
09a30                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09a30     37 00 00 FF 
09a34     44 E4 05 F1 | 	add	objptr, ##28228
09a38     F2 2C 02 FB | 	rdlong	local04, objptr
09a3c     03 2C 66 F0 | 	shl	local04, #3
09a40     02 00 00 FF 
09a44     38 E4 85 F1 | 	sub	objptr, ##1080
09a48     F2 2C 02 F1 | 	add	local04, objptr
09a4c     04 2C 06 F1 | 	add	local04, #4
09a50     16 35 02 FB | 	rdlong	local08, local04
09a54     11 34 0E F2 | 	cmp	local08, #17 wz
09a58     35 00 00 FF 
09a5c     0C E4 85 F1 | 	sub	objptr, ##27148
09a60     6C 00 90 AD |  if_e	jmp	#LR__0845
09a64     37 00 00 FF 
09a68     44 E4 05 F1 | 	add	objptr, ##28228
09a6c     F2 34 02 FB | 	rdlong	local08, objptr
09a70     03 34 66 F0 | 	shl	local08, #3
09a74     02 00 00 FF 
09a78     38 E4 85 F1 | 	sub	objptr, ##1080
09a7c     F2 34 02 F1 | 	add	local08, objptr
09a80     04 34 06 F1 | 	add	local08, #4
09a84     1A 35 02 FB | 	rdlong	local08, local08
09a88     12 34 0E F2 | 	cmp	local08, #18 wz
09a8c     35 00 00 FF 
09a90     0C E4 85 F1 | 	sub	objptr, ##27148
09a94     38 00 90 AD |  if_e	jmp	#LR__0845
09a98     37 00 00 FF 
09a9c     44 E4 05 F1 | 	add	objptr, ##28228
09aa0     F2 3A 02 FB | 	rdlong	local11, objptr
09aa4     03 3A 66 F0 | 	shl	local11, #3
09aa8     02 00 00 FF 
09aac     38 E4 85 F1 | 	sub	objptr, ##1080
09ab0     F2 3A 02 F1 | 	add	local11, objptr
09ab4     04 3A 06 F1 | 	add	local11, #4
09ab8     1D 3B 02 FB | 	rdlong	local11, local11
09abc     FE 3B 0E F2 | 	cmp	local11, #510 wz
09ac0     35 00 00 FF 
09ac4     0C E4 85 F1 | 	sub	objptr, ##27148
09ac8     16 FA 05 56 |  if_ne	mov	result1, #22
09acc     68 00 90 5D |  if_ne	jmp	#LR__0847
09ad0                 | LR__0845
09ad0     37 00 00 FF 
09ad4     44 E4 05 F1 | 	add	objptr, ##28228
09ad8     F2 2C 02 FB | 	rdlong	local04, objptr
09adc     01 2C 06 F1 | 	add	local04, #1
09ae0     F2 2C 62 FC | 	wrlong	local04, objptr
09ae4     03 2C 66 F0 | 	shl	local04, #3
09ae8     02 00 00 FF 
09aec     38 E4 85 F1 | 	sub	objptr, ##1080
09af0     F2 2C 02 F1 | 	add	local04, objptr
09af4     04 2C 06 F1 | 	add	local04, #4
09af8     16 35 02 FB | 	rdlong	local08, local04
09afc     FE 35 0E F2 | 	cmp	local08, #510 wz
09b00     35 00 00 FF 
09b04     0C E4 85 F1 | 	sub	objptr, ##27148
09b08     28 00 90 AD |  if_e	jmp	#LR__0846
09b0c     37 00 00 FF 
09b10     44 E4 05 F1 | 	add	objptr, ##28228
09b14     F2 3A 02 FB | 	rdlong	local11, objptr
09b18     0E 00 00 FF 
09b1c     1C E4 05 F1 | 	add	objptr, ##7196
09b20     F2 38 02 FB | 	rdlong	local10, objptr
09b24     45 00 00 FF 
09b28     60 E4 85 F1 | 	sub	objptr, ##35424
09b2c     1C 3B 52 F2 | 	cmps	local11, local10 wc
09b30     E4 FA 9F CD |  if_b	jmp	#LR__0841
09b34                 | LR__0846
09b34                 | ' return 0
09b34     00 FA 05 F6 | 	mov	result1, #0
09b38                 | LR__0847
09b38     A7 F0 03 F6 | 	mov	ptra, fp
09b3c     B2 00 A0 FD | 	call	#popregs_
09b40                 | _compile_print_ret
09b40     2D 00 64 FD | 	ret
09b44                 | 
09b44                 | ' 
09b44                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09b44                 | ' 
09b44                 | ' function compile_if(aline as ulong) as ulong  
09b44                 | _compile_if
09b44     09 4A 05 F6 | 	mov	COUNT_, #9
09b48     A8 00 A0 FD | 	call	#pushregs_
09b4c                 | _compile_if_enter
09b4c     09 2D 02 F6 | 	mov	local04, arg01
09b50                 | ' return expr()
09b50     F8 21 B0 FD | 	call	#_expr
09b54     37 00 00 FF 
09b58     44 E4 05 F1 | 	add	objptr, ##28228
09b5c     F2 14 02 FB | 	rdlong	arg02, objptr
09b60     0A 2F 02 F6 | 	mov	local05, arg02
09b64     03 2E 66 F0 | 	shl	local05, #3
09b68     02 00 00 FF 
09b6c     38 E4 85 F1 | 	sub	objptr, ##1080
09b70     F2 2E 02 F1 | 	add	local05, objptr
09b74     04 2E 06 F1 | 	add	local05, #4
09b78     17 2F 02 FB | 	rdlong	local05, local05
09b7c     01 14 06 F1 | 	add	arg02, #1
09b80     02 00 00 FF 
09b84     38 E4 05 F1 | 	add	objptr, ##1080
09b88     F2 14 62 FC | 	wrlong	arg02, objptr
09b8c     37 00 00 FF 
09b90     44 E4 85 F1 | 	sub	objptr, ##28228
09b94                 | ' 
09b94                 | ' err=compile_fun_1p()
09b94                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09b94     5B 2E 0E F2 | 	cmp	local05, #91 wz
09b98     34 FA 05 56 |  if_ne	mov	result1, #52
09b9c     20 01 90 5D |  if_ne	jmp	#LR__0852
09ba0     58 2A 06 F6 | 	mov	local03, #88
09ba4     13 31 02 F6 | 	mov	local06, local01
09ba8     14 33 02 F6 | 	mov	local07, local02
09bac     15 15 02 F6 | 	mov	arg02, local03
09bb0     4A 00 00 FF 
09bb4     7C E4 05 F1 | 	add	objptr, ##38012
09bb8     F2 12 02 FB | 	rdlong	arg01, objptr
09bbc     09 35 02 F6 | 	mov	local08, arg01
09bc0     01 34 66 F0 | 	shl	local08, #1
09bc4     09 35 02 F1 | 	add	local08, arg01
09bc8     02 34 66 F0 | 	shl	local08, #2
09bcc     03 00 00 FF 
09bd0     00 E4 85 F1 | 	sub	objptr, ##1536
09bd4     F2 34 02 F1 | 	add	local08, objptr
09bd8     1A 31 62 FC | 	wrlong	local06, local08
09bdc     03 00 00 FF 
09be0     00 E4 05 F1 | 	add	objptr, ##1536
09be4     F2 30 02 FB | 	rdlong	local06, objptr
09be8     18 13 02 F6 | 	mov	arg01, local06
09bec     01 12 66 F0 | 	shl	arg01, #1
09bf0     18 13 02 F1 | 	add	arg01, local06
09bf4     02 12 66 F0 | 	shl	arg01, #2
09bf8     03 00 00 FF 
09bfc     00 E4 85 F1 | 	sub	objptr, ##1536
09c00     F2 12 02 F1 | 	add	arg01, objptr
09c04     04 12 06 F1 | 	add	arg01, #4
09c08     09 33 62 FC | 	wrlong	local07, arg01
09c0c     03 00 00 FF 
09c10     00 E4 05 F1 | 	add	objptr, ##1536
09c14     F2 30 02 FB | 	rdlong	local06, objptr
09c18     18 13 02 F6 | 	mov	arg01, local06
09c1c     01 12 66 F0 | 	shl	arg01, #1
09c20     18 13 02 F1 | 	add	arg01, local06
09c24     02 12 66 F0 | 	shl	arg01, #2
09c28     03 00 00 FF 
09c2c     00 E4 85 F1 | 	sub	objptr, ##1536
09c30     F2 12 02 F1 | 	add	arg01, objptr
09c34     08 12 06 F1 | 	add	arg01, #8
09c38     09 15 62 FC | 	wrlong	arg02, arg01
09c3c     03 00 00 FF 
09c40     00 E4 05 F1 | 	add	objptr, ##1536
09c44     F2 30 02 FB | 	rdlong	local06, objptr
09c48     01 30 06 F1 | 	add	local06, #1
09c4c     F2 30 62 FC | 	wrlong	local06, objptr
09c50                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09c50                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09c50     13 00 00 FF 
09c54     38 E4 85 F1 | 	sub	objptr, ##9784
09c58     F2 14 02 FB | 	rdlong	arg02, objptr
09c5c     01 14 06 F1 | 	add	arg02, #1
09c60     03 14 66 F0 | 	shl	arg02, #3
09c64     02 00 00 FF 
09c68     38 E4 85 F1 | 	sub	objptr, ##1080
09c6c     F2 14 02 F1 | 	add	arg02, objptr
09c70     0A 13 02 FB | 	rdlong	arg01, arg02
09c74     35 00 00 FF 
09c78     0C E4 85 F1 | 	sub	objptr, ##27148
09c7c                 | ' 
09c7c                 | ' select case s
09c7c     B3 01 00 FF 
09c80     3E 14 06 F6 | 	mov	arg02, ##@LR__5547
09c84     98 CC B1 FD | 	call	#__system___string_cmp
09c88     00 FA 0D F2 | 	cmp	result1, #0 wz
09c8c     1B FA 05 A6 |  if_e	mov	result1, #27
09c90     00 FA 05 56 |  if_ne	mov	result1, #0
09c94     00 FA 0D F2 | 	cmp	result1, #0 wz
09c98     10 00 90 AD |  if_e	jmp	#LR__0850
09c9c     05 12 06 F6 | 	mov	arg01, #5
09ca0     38 E4 BF FD | 	call	#_compile_immediate_assign
09ca4     FD 36 02 F6 | 	mov	local09, result1
09ca8     10 00 90 FD | 	jmp	#LR__0851
09cac                 | LR__0850
09cac     05 12 06 F6 | 	mov	arg01, #5
09cb0     16 15 02 F6 | 	mov	arg02, local04
09cb4     68 DA BF FD | 	call	#_compile_immediate
09cb8     FD 36 02 F6 | 	mov	local09, result1
09cbc                 | LR__0851
09cbc                 | ' return err
09cbc     1B FB 01 F6 | 	mov	result1, local09
09cc0                 | LR__0852
09cc0     A7 F0 03 F6 | 	mov	ptra, fp
09cc4     B2 00 A0 FD | 	call	#popregs_
09cc8                 | _compile_if_ret
09cc8     2D 00 64 FD | 	ret
09ccc                 | 
09ccc                 | ' 
09ccc                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ccc                 | ' 
09ccc                 | ' function compile_else(aline as ulong) as ulong  
09ccc                 | _compile_else
09ccc     07 4A 05 F6 | 	mov	COUNT_, #7
09cd0     A8 00 A0 FD | 	call	#pushregs_
09cd4                 | _compile_else_enter
09cd4     09 2D 02 F6 | 	mov	local04, arg01
09cd8     5A 2A 06 F6 | 	mov	local03, #90
09cdc     13 2F 02 F6 | 	mov	local05, local01
09ce0     14 31 02 F6 | 	mov	local06, local02
09ce4     15 27 02 F6 | 	mov	local01, local03
09ce8     4A 00 00 FF 
09cec     7C E4 05 F1 | 	add	objptr, ##38012
09cf0     F2 14 02 FB | 	rdlong	arg02, objptr
09cf4     0A 13 02 F6 | 	mov	arg01, arg02
09cf8     01 12 66 F0 | 	shl	arg01, #1
09cfc     0A 13 02 F1 | 	add	arg01, arg02
09d00     02 12 66 F0 | 	shl	arg01, #2
09d04     03 00 00 FF 
09d08     00 E4 85 F1 | 	sub	objptr, ##1536
09d0c     F2 12 02 F1 | 	add	arg01, objptr
09d10     09 2F 62 FC | 	wrlong	local05, arg01
09d14     03 00 00 FF 
09d18     00 E4 05 F1 | 	add	objptr, ##1536
09d1c     F2 2E 02 FB | 	rdlong	local05, objptr
09d20     17 15 02 F6 | 	mov	arg02, local05
09d24     01 14 66 F0 | 	shl	arg02, #1
09d28     17 15 02 F1 | 	add	arg02, local05
09d2c     02 14 66 F0 | 	shl	arg02, #2
09d30     03 00 00 FF 
09d34     00 E4 85 F1 | 	sub	objptr, ##1536
09d38     F2 14 02 F1 | 	add	arg02, objptr
09d3c     04 14 06 F1 | 	add	arg02, #4
09d40     0A 31 62 FC | 	wrlong	local06, arg02
09d44     03 00 00 FF 
09d48     00 E4 05 F1 | 	add	objptr, ##1536
09d4c     F2 30 02 FB | 	rdlong	local06, objptr
09d50     18 2F 02 F6 | 	mov	local05, local06
09d54     01 2E 66 F0 | 	shl	local05, #1
09d58     18 2F 02 F1 | 	add	local05, local06
09d5c     02 2E 66 F0 | 	shl	local05, #2
09d60     03 00 00 FF 
09d64     00 E4 85 F1 | 	sub	objptr, ##1536
09d68     F2 2E 02 F1 | 	add	local05, objptr
09d6c     08 2E 06 F1 | 	add	local05, #8
09d70     17 27 62 FC | 	wrlong	local01, local05
09d74     03 00 00 FF 
09d78     00 E4 05 F1 | 	add	objptr, ##1536
09d7c     F2 2E 02 FB | 	rdlong	local05, objptr
09d80     01 2E 06 F1 | 	add	local05, #1
09d84     F2 2E 62 FC | 	wrlong	local05, objptr
09d88                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09d88                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09d88     13 00 00 FF 
09d8c     38 E4 85 F1 | 	sub	objptr, ##9784
09d90     F2 30 02 FB | 	rdlong	local06, objptr
09d94     01 30 06 F1 | 	add	local06, #1
09d98     03 30 66 F0 | 	shl	local06, #3
09d9c     02 00 00 FF 
09da0     38 E4 85 F1 | 	sub	objptr, ##1080
09da4     F2 30 02 F1 | 	add	local06, objptr
09da8     18 13 02 FB | 	rdlong	arg01, local06
09dac     35 00 00 FF 
09db0     0C E4 85 F1 | 	sub	objptr, ##27148
09db4                 | ' 
09db4                 | ' select case s
09db4     B3 01 00 FF 
09db8     3E 14 06 F6 | 	mov	arg02, ##@LR__5547
09dbc     60 CB B1 FD | 	call	#__system___string_cmp
09dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
09dc4     1B FA 05 A6 |  if_e	mov	result1, #27
09dc8     00 FA 05 56 |  if_ne	mov	result1, #0
09dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
09dd0     10 00 90 AD |  if_e	jmp	#LR__0860
09dd4     05 12 06 F6 | 	mov	arg01, #5
09dd8     00 E3 BF FD | 	call	#_compile_immediate_assign
09ddc     FD 32 02 F6 | 	mov	local07, result1
09de0     10 00 90 FD | 	jmp	#LR__0861
09de4                 | LR__0860
09de4     05 12 06 F6 | 	mov	arg01, #5
09de8     16 15 02 F6 | 	mov	arg02, local04
09dec     30 D9 BF FD | 	call	#_compile_immediate
09df0     FD 32 02 F6 | 	mov	local07, result1
09df4                 | LR__0861
09df4                 | ' return err
09df4     19 FB 01 F6 | 	mov	result1, local07
09df8     A7 F0 03 F6 | 	mov	ptra, fp
09dfc     B2 00 A0 FD | 	call	#popregs_
09e00                 | _compile_else_ret
09e00     2D 00 64 FD | 	ret
09e04                 | 
09e04                 | ' 
09e04                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09e04                 | ' 
09e04                 | ' function compile_dim() as ulong  
09e04                 | _compile_dim
09e04     11 4A 05 F6 | 	mov	COUNT_, #17
09e08     A8 00 A0 FD | 	call	#pushregs_
09e0c     01 26 06 F6 | 	mov	local01, #1
09e10     01 28 06 F6 | 	mov	local02, #1
09e14     01 2A 06 F6 | 	mov	local03, #1
09e18                 | ' 
09e18                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09e18                 | ' if isname(lparts(ct).part$) then 
09e18     37 00 00 FF 
09e1c     44 E4 05 F1 | 	add	objptr, ##28228
09e20     F2 18 02 FB | 	rdlong	arg04, objptr
09e24     03 18 66 F0 | 	shl	arg04, #3
09e28     02 00 00 FF 
09e2c     38 E4 85 F1 | 	sub	objptr, ##1080
09e30     F2 18 02 F1 | 	add	arg04, objptr
09e34     0C 13 02 FB | 	rdlong	arg01, arg04
09e38     35 00 00 FF 
09e3c     0C E4 85 F1 | 	sub	objptr, ##27148
09e40     34 C7 BF FD | 	call	#_isname
09e44     00 FA 0D F2 | 	cmp	result1, #0 wz
09e48     78 05 90 AD |  if_e	jmp	#LR__0893
09e4c     37 00 00 FF 
09e50     44 E4 05 F1 | 	add	objptr, ##28228
09e54     F2 2C 02 FB | 	rdlong	local04, objptr
09e58     03 2C 66 F0 | 	shl	local04, #3
09e5c     02 00 00 FF 
09e60     38 E4 85 F1 | 	sub	objptr, ##1080
09e64     F2 2C 02 F1 | 	add	local04, objptr
09e68     16 2F 02 FB | 	rdlong	local05, local04
09e6c     01 30 66 F6 | 	neg	local06, #1
09e70                 | '   varname2$=lparts(ct).part$ 
09e70                 | '   j=-1
09e70                 | '   if varnum>0 then
09e70     04 E4 85 F1 | 	sub	objptr, #4
09e74     F2 32 02 FB | 	rdlong	local07, objptr
09e78     35 00 00 FF 
09e7c     08 E4 85 F1 | 	sub	objptr, ##27144
09e80     01 32 56 F2 | 	cmps	local07, #1 wc
09e84     58 00 90 CD |  if_b	jmp	#LR__0872
09e88                 | '     for i=0 to varnum-1
09e88     00 34 06 F6 | 	mov	local08, #0
09e8c     35 00 00 FF 
09e90     08 E4 05 F1 | 	add	objptr, ##27144
09e94     F2 36 02 FB | 	rdlong	local09, objptr
09e98     35 00 00 FF 
09e9c     08 E4 85 F1 | 	sub	objptr, ##27144
09ea0                 | LR__0870
09ea0     1B 35 52 F2 | 	cmps	local08, local09 wc
09ea4     38 00 90 3D |  if_ae	jmp	#LR__0871
09ea8                 | '       if variables(i).name=varname2$ then j=i : exit
09ea8     1A 2D 02 F6 | 	mov	local04, local08
09eac     04 2C 66 F0 | 	shl	local04, #4
09eb0     14 00 00 FF 
09eb4     F8 E5 05 F1 | 	add	objptr, ##10744
09eb8     F2 2C 02 F1 | 	add	local04, objptr
09ebc     16 13 02 FB | 	rdlong	arg01, local04
09ec0     17 15 02 F6 | 	mov	arg02, local05
09ec4     14 00 00 FF 
09ec8     F8 E5 85 F1 | 	sub	objptr, ##10744
09ecc     50 CA B1 FD | 	call	#__system___string_cmp
09ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
09ed4     1A 31 02 A6 |  if_e	mov	local06, local08
09ed8     01 34 06 51 |  if_ne	add	local08, #1
09edc     C0 FF 9F 5D |  if_ne	jmp	#LR__0870
09ee0                 | LR__0871
09ee0                 | LR__0872
09ee0                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09ee0     FF FF 7F FF 
09ee4     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09ee8     35 00 00 AF 
09eec     08 E4 05 A1 |  if_e	add	objptr, ##27144
09ef0     F2 30 02 AB |  if_e	rdlong	local06, objptr
09ef4     35 00 00 AF 
09ef8     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09efc     78 00 90 AD |  if_e	jmp	#LR__0873
09f00     00 12 06 F6 | 	mov	arg01, #0
09f04     94 26 B2 FD | 	call	#__system___getiolock_0602
09f08     FD 12 02 F6 | 	mov	arg01, result1
09f0c     E8 C9 B1 FD | 	call	#__system___lockmem
09f10     B5 01 00 FF 
09f14     CC 14 06 F6 | 	mov	arg02, ##@LR__5801
09f18     00 12 06 F6 | 	mov	arg01, #0
09f1c     00 16 06 F6 | 	mov	arg03, #0
09f20     CC D6 B1 FD | 	call	#__system___basic_print_string
09f24     52 00 00 FF 
09f28     B0 E4 05 F1 | 	add	objptr, ##42160
09f2c     F2 14 02 FB | 	rdlong	arg02, objptr
09f30     52 00 00 FF 
09f34     B0 E4 85 F1 | 	sub	objptr, ##42160
09f38     00 12 06 F6 | 	mov	arg01, #0
09f3c     00 16 06 F6 | 	mov	arg03, #0
09f40     0A 18 06 F6 | 	mov	arg04, #10
09f44     2C D7 B1 FD | 	call	#__system___basic_print_unsigned
09f48     B5 01 00 FF 
09f4c     DA 14 06 F6 | 	mov	arg02, ##@LR__5802
09f50     00 12 06 F6 | 	mov	arg01, #0
09f54     00 16 06 F6 | 	mov	arg03, #0
09f58     94 D6 B1 FD | 	call	#__system___basic_print_string
09f5c     00 12 06 F6 | 	mov	arg01, #0
09f60     0A 14 06 F6 | 	mov	arg02, #10
09f64     00 16 06 F6 | 	mov	arg03, #0
09f68     2C D6 B1 FD | 	call	#__system___basic_print_char
09f6c     00 12 06 F6 | 	mov	arg01, #0
09f70     28 26 B2 FD | 	call	#__system___getiolock_0602
09f74     FD 00 68 FC | 	wrlong	#0, result1
09f78                 | LR__0873
09f78                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09f78     37 00 00 FF 
09f7c     44 E4 05 F1 | 	add	objptr, ##28228
09f80     F2 14 02 FB | 	rdlong	arg02, objptr
09f84     01 14 06 F1 | 	add	arg02, #1
09f88     03 14 66 F0 | 	shl	arg02, #3
09f8c     02 00 00 FF 
09f90     38 E4 85 F1 | 	sub	objptr, ##1080
09f94     F2 14 02 F1 | 	add	arg02, objptr
09f98     0A 13 02 FB | 	rdlong	arg01, arg02
09f9c     B5 01 00 FF 
09fa0     FB 14 06 F6 | 	mov	arg02, ##@LR__5803
09fa4     35 00 00 FF 
09fa8     0C E4 85 F1 | 	sub	objptr, ##27148
09fac     70 C9 B1 FD | 	call	#__system___string_cmp
09fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
09fb4     44 00 90 AD |  if_e	jmp	#LR__0874
09fb8     37 00 00 FF 
09fbc     44 E4 05 F1 | 	add	objptr, ##28228
09fc0     F2 36 02 FB | 	rdlong	local09, objptr
09fc4     01 36 06 F1 | 	add	local09, #1
09fc8     03 36 66 F0 | 	shl	local09, #3
09fcc     02 00 00 FF 
09fd0     38 E4 85 F1 | 	sub	objptr, ##1080
09fd4     F2 36 02 F1 | 	add	local09, objptr
09fd8     1B 13 02 FB | 	rdlong	arg01, local09
09fdc     B5 01 00 FF 
09fe0     FD 14 06 F6 | 	mov	arg02, ##@LR__5804
09fe4     35 00 00 FF 
09fe8     0C E4 85 F1 | 	sub	objptr, ##27148
09fec     30 C9 B1 FD | 	call	#__system___string_cmp
09ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
09ff4     2B FA 05 56 |  if_ne	mov	result1, #43
09ff8     D0 04 90 5D |  if_ne	jmp	#LR__0895
09ffc                 | LR__0874
09ffc                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09ffc     37 00 00 FF 
0a000     44 E4 05 F1 | 	add	objptr, ##28228
0a004     F2 14 02 FB | 	rdlong	arg02, objptr
0a008     01 14 06 F1 | 	add	arg02, #1
0a00c     03 14 66 F0 | 	shl	arg02, #3
0a010     02 00 00 FF 
0a014     38 E4 85 F1 | 	sub	objptr, ##1080
0a018     F2 14 02 F1 | 	add	arg02, objptr
0a01c     0A 13 02 FB | 	rdlong	arg01, arg02
0a020     B5 01 00 FF 
0a024     00 15 06 F6 | 	mov	arg02, ##@LR__5805
0a028     35 00 00 FF 
0a02c     0C E4 85 F1 | 	sub	objptr, ##27148
0a030     EC C8 B1 FD | 	call	#__system___string_cmp
0a034     00 FA 0D F2 | 	cmp	result1, #0 wz
0a038     37 00 00 AF 
0a03c     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a040     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a044     37 00 00 AF 
0a048     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a04c     01 38 06 A1 |  if_e	add	local10, #1
0a050     5C 01 90 AD |  if_e	jmp	#LR__0879
0a054     37 00 00 FF 
0a058     44 E4 05 F1 | 	add	objptr, ##28228
0a05c     F2 38 02 FB | 	rdlong	local10, objptr
0a060     37 00 00 FF 
0a064     44 E4 85 F1 | 	sub	objptr, ##28228
0a068     02 38 06 F1 | 	add	local10, #2
0a06c     00 3A 06 F6 | 	mov	local11, #0
0a070                 | '   l=ct+2 : m=0 : do
0a070                 | LR__0875
0a070                 | '   if isdec(lparts(l).part$) then 
0a070     1C 2D 02 F6 | 	mov	local04, local10
0a074     03 2C 66 F0 | 	shl	local04, #3
0a078     35 00 00 FF 
0a07c     0C E4 05 F1 | 	add	objptr, ##27148
0a080     F2 2C 02 F1 | 	add	local04, objptr
0a084     16 13 02 FB | 	rdlong	arg01, local04
0a088     35 00 00 FF 
0a08c     0C E4 85 F1 | 	sub	objptr, ##27148
0a090     E8 CD BF FD | 	call	#_isdec
0a094     00 FA 0D F2 | 	cmp	result1, #0 wz
0a098     44 00 90 AD |  if_e	jmp	#LR__0876
0a09c     1D 3D 02 F6 | 	mov	local12, local11
0a0a0     13 3D 06 F1 | 	add	local12, #local01
0a0a4     1C 37 02 F6 | 	mov	local09, local10
0a0a8     03 36 66 F0 | 	shl	local09, #3
0a0ac     35 00 00 FF 
0a0b0     0C E4 05 F1 | 	add	objptr, ##27148
0a0b4     F2 36 02 F1 | 	add	local09, objptr
0a0b8     1B 13 02 FB | 	rdlong	arg01, local09
0a0bc     00 14 06 F6 | 	mov	arg02, #0
0a0c0     35 00 00 FF 
0a0c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0c8     20 FD B1 FD | 	call	#__system____builtin_atoi
0a0cc     FD 3E 02 F6 | 	mov	local13, result1
0a0d0                 | 	'.live	local13
0a0d0                 | 	'.live	local12
0a0d0     00 3C 8E F9 | 	altd	local12, #0
0a0d4     1F 3D 02 F6 | 	mov	local12, local13
0a0d8     01 3A 06 F1 | 	add	local11, #1
0a0dc     08 00 90 FD | 	jmp	#LR__0877
0a0e0                 | LR__0876
0a0e0                 | '     return(17)
0a0e0     11 FA 05 F6 | 	mov	result1, #17
0a0e4     E4 03 90 FD | 	jmp	#LR__0895
0a0e8                 | LR__0877
0a0e8                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a0e8     1C 2D 02 F6 | 	mov	local04, local10
0a0ec     01 2C 06 F1 | 	add	local04, #1
0a0f0     03 2C 66 F0 | 	shl	local04, #3
0a0f4     35 00 00 FF 
0a0f8     0C E4 05 F1 | 	add	objptr, ##27148
0a0fc     F2 2C 02 F1 | 	add	local04, objptr
0a100     16 13 02 FB | 	rdlong	arg01, local04
0a104     B5 01 00 FF 
0a108     03 15 06 F6 | 	mov	arg02, ##@LR__5806
0a10c     35 00 00 FF 
0a110     0C E4 85 F1 | 	sub	objptr, ##27148
0a114     08 C8 B1 FD | 	call	#__system___string_cmp
0a118     00 FA 0D F2 | 	cmp	result1, #0 wz
0a11c     3C 00 90 AD |  if_e	jmp	#LR__0878
0a120     1C 3F 02 F6 | 	mov	local13, local10
0a124     01 3E 06 F1 | 	add	local13, #1
0a128     03 3E 66 F0 | 	shl	local13, #3
0a12c     35 00 00 FF 
0a130     0C E4 05 F1 | 	add	objptr, ##27148
0a134     F2 3E 02 F1 | 	add	local13, objptr
0a138     1F 13 02 FB | 	rdlong	arg01, local13
0a13c     B5 01 00 FF 
0a140     05 15 06 F6 | 	mov	arg02, ##@LR__5807
0a144     35 00 00 FF 
0a148     0C E4 85 F1 | 	sub	objptr, ##27148
0a14c     D0 C7 B1 FD | 	call	#__system___string_cmp
0a150     00 FA 0D F2 | 	cmp	result1, #0 wz
0a154     2C FA 05 56 |  if_ne	mov	result1, #44
0a158     70 03 90 5D |  if_ne	jmp	#LR__0895
0a15c                 | LR__0878
0a15c     02 38 06 F1 | 	add	local10, #2
0a160     1C 2D 02 F6 | 	mov	local04, local10
0a164     01 2C 86 F1 | 	sub	local04, #1
0a168     03 2C 66 F0 | 	shl	local04, #3
0a16c     35 00 00 FF 
0a170     0C E4 05 F1 | 	add	objptr, ##27148
0a174     F2 2C 02 F1 | 	add	local04, objptr
0a178     16 13 02 FB | 	rdlong	arg01, local04
0a17c     B5 01 00 FF 
0a180     07 15 06 F6 | 	mov	arg02, ##@LR__5808
0a184     35 00 00 FF 
0a188     0C E4 85 F1 | 	sub	objptr, ##27148
0a18c     90 C7 B1 FD | 	call	#__system___string_cmp
0a190     00 FA 0D F2 | 	cmp	result1, #0 wz
0a194     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a198     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0875
0a19c                 | '   if m>3 then return 45
0a19c     04 3A 56 F2 | 	cmps	local11, #4 wc
0a1a0     2D FA 05 36 |  if_ae	mov	result1, #45
0a1a4     24 03 90 3D |  if_ae	jmp	#LR__0895
0a1a8     00 41 06 F6 | 	mov	local14, #256
0a1ac     0C 42 06 F6 | 	mov	local15, #12
0a1b0                 | LR__0879
0a1b0                 | '   arraytype=array_no_type : esize=12
0a1b0                 | ' 1350 
0a1b0                 | '   if lparts(l).part$="as" then
0a1b0     1C 2D 02 F6 | 	mov	local04, local10
0a1b4     03 2C 66 F0 | 	shl	local04, #3
0a1b8     35 00 00 FF 
0a1bc     0C E4 05 F1 | 	add	objptr, ##27148
0a1c0     F2 2C 02 F1 | 	add	local04, objptr
0a1c4     16 13 02 FB | 	rdlong	arg01, local04
0a1c8     B5 01 00 FF 
0a1cc     09 15 06 F6 | 	mov	arg02, ##@LR__5809
0a1d0     35 00 00 FF 
0a1d4     0C E4 85 F1 | 	sub	objptr, ##27148
0a1d8     44 C7 B1 FD | 	call	#__system___string_cmp
0a1dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1e0     E8 01 90 5D |  if_ne	jmp	#LR__0894
0a1e4                 | '     select case lparts(l+1).part$
0a1e4     1C 3D 02 F6 | 	mov	local12, local10
0a1e8     01 3C 06 F1 | 	add	local12, #1
0a1ec     03 3C 66 F0 | 	shl	local12, #3
0a1f0     35 00 00 FF 
0a1f4     0C E4 05 F1 | 	add	objptr, ##27148
0a1f8     F2 3C 02 F1 | 	add	local12, objptr
0a1fc     1E 45 02 FB | 	rdlong	local16, local12
0a200     B5 01 00 FF 
0a204     0C 15 06 F6 | 	mov	arg02, ##@LR__5810
0a208     22 13 02 F6 | 	mov	arg01, local16
0a20c     35 00 00 FF 
0a210     0C E4 85 F1 | 	sub	objptr, ##27148
0a214     08 C7 B1 FD | 	call	#__system___string_cmp
0a218     00 FA 0D F2 | 	cmp	result1, #0 wz
0a21c     0C 01 90 AD |  if_e	jmp	#LR__0880
0a220     B5 01 00 FF 
0a224     11 15 06 F6 | 	mov	arg02, ##@LR__5811
0a228     22 13 02 F6 | 	mov	arg01, local16
0a22c     F0 C6 B1 FD | 	call	#__system___string_cmp
0a230     00 FA 0D F2 | 	cmp	result1, #0 wz
0a234     00 01 90 AD |  if_e	jmp	#LR__0881
0a238     B5 01 00 FF 
0a23c     17 15 06 F6 | 	mov	arg02, ##@LR__5812
0a240     22 13 02 F6 | 	mov	arg01, local16
0a244     D8 C6 B1 FD | 	call	#__system___string_cmp
0a248     00 FA 0D F2 | 	cmp	result1, #0 wz
0a24c     F4 00 90 AD |  if_e	jmp	#LR__0882
0a250     B5 01 00 FF 
0a254     1D 15 06 F6 | 	mov	arg02, ##@LR__5813
0a258     22 13 02 F6 | 	mov	arg01, local16
0a25c     C0 C6 B1 FD | 	call	#__system___string_cmp
0a260     00 FA 0D F2 | 	cmp	result1, #0 wz
0a264     E8 00 90 AD |  if_e	jmp	#LR__0883
0a268     B5 01 00 FF 
0a26c     24 15 06 F6 | 	mov	arg02, ##@LR__5814
0a270     22 13 02 F6 | 	mov	arg01, local16
0a274     A8 C6 B1 FD | 	call	#__system___string_cmp
0a278     00 FA 0D F2 | 	cmp	result1, #0 wz
0a27c     DC 00 90 AD |  if_e	jmp	#LR__0884
0a280     B5 01 00 FF 
0a284     29 15 06 F6 | 	mov	arg02, ##@LR__5815
0a288     22 13 02 F6 | 	mov	arg01, local16
0a28c     90 C6 B1 FD | 	call	#__system___string_cmp
0a290     00 FA 0D F2 | 	cmp	result1, #0 wz
0a294     D0 00 90 AD |  if_e	jmp	#LR__0885
0a298     B5 01 00 FF 
0a29c     31 15 06 F6 | 	mov	arg02, ##@LR__5816
0a2a0     22 13 02 F6 | 	mov	arg01, local16
0a2a4     78 C6 B1 FD | 	call	#__system___string_cmp
0a2a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2ac     C4 00 90 AD |  if_e	jmp	#LR__0886
0a2b0     B5 01 00 FF 
0a2b4     37 15 06 F6 | 	mov	arg02, ##@LR__5817
0a2b8     22 13 02 F6 | 	mov	arg01, local16
0a2bc     60 C6 B1 FD | 	call	#__system___string_cmp
0a2c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2c4     B8 00 90 AD |  if_e	jmp	#LR__0887
0a2c8     B5 01 00 FF 
0a2cc     3D 15 06 F6 | 	mov	arg02, ##@LR__5818
0a2d0     22 13 02 F6 | 	mov	arg01, local16
0a2d4     48 C6 B1 FD | 	call	#__system___string_cmp
0a2d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2dc     AC 00 90 AD |  if_e	jmp	#LR__0888
0a2e0     B5 01 00 FF 
0a2e4     44 15 06 F6 | 	mov	arg02, ##@LR__5819
0a2e8     22 13 02 F6 | 	mov	arg01, local16
0a2ec     30 C6 B1 FD | 	call	#__system___string_cmp
0a2f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f4     A0 00 90 AD |  if_e	jmp	#LR__0889
0a2f8     B5 01 00 FF 
0a2fc     4B 15 06 F6 | 	mov	arg02, ##@LR__5820
0a300     22 13 02 F6 | 	mov	arg01, local16
0a304     18 C6 B1 FD | 	call	#__system___string_cmp
0a308     00 FA 0D F2 | 	cmp	result1, #0 wz
0a30c     94 00 90 AD |  if_e	jmp	#LR__0890
0a310     B5 01 00 FF 
0a314     52 15 06 F6 | 	mov	arg02, ##@LR__5821
0a318     22 13 02 F6 | 	mov	arg01, local16
0a31c     00 C6 B1 FD | 	call	#__system___string_cmp
0a320     00 FA 0D F2 | 	cmp	result1, #0 wz
0a324     88 00 90 AD |  if_e	jmp	#LR__0891
0a328     90 00 90 FD | 	jmp	#LR__0892
0a32c                 | LR__0880
0a32c     01 41 06 F6 | 	mov	local14, #257
0a330     01 42 06 F6 | 	mov	local15, #1
0a334     94 00 90 FD | 	jmp	#LR__0894
0a338                 | LR__0881
0a338     02 41 06 F6 | 	mov	local14, #258
0a33c     01 42 06 F6 | 	mov	local15, #1
0a340     88 00 90 FD | 	jmp	#LR__0894
0a344                 | LR__0882
0a344     03 41 06 F6 | 	mov	local14, #259
0a348     02 42 06 F6 | 	mov	local15, #2
0a34c     7C 00 90 FD | 	jmp	#LR__0894
0a350                 | LR__0883
0a350     04 41 06 F6 | 	mov	local14, #260
0a354     02 42 06 F6 | 	mov	local15, #2
0a358     70 00 90 FD | 	jmp	#LR__0894
0a35c                 | LR__0884
0a35c     05 41 06 F6 | 	mov	local14, #261
0a360     04 42 06 F6 | 	mov	local15, #4
0a364     64 00 90 FD | 	jmp	#LR__0894
0a368                 | LR__0885
0a368     05 41 06 F6 | 	mov	local14, #261
0a36c     04 42 06 F6 | 	mov	local15, #4
0a370     58 00 90 FD | 	jmp	#LR__0894
0a374                 | LR__0886
0a374     06 41 06 F6 | 	mov	local14, #262
0a378     04 42 06 F6 | 	mov	local15, #4
0a37c     4C 00 90 FD | 	jmp	#LR__0894
0a380                 | LR__0887
0a380     07 41 06 F6 | 	mov	local14, #263
0a384     08 42 06 F6 | 	mov	local15, #8
0a388     40 00 90 FD | 	jmp	#LR__0894
0a38c                 | LR__0888
0a38c     08 41 06 F6 | 	mov	local14, #264
0a390     08 42 06 F6 | 	mov	local15, #8
0a394     34 00 90 FD | 	jmp	#LR__0894
0a398                 | LR__0889
0a398     09 41 06 F6 | 	mov	local14, #265
0a39c     04 42 06 F6 | 	mov	local15, #4
0a3a0     28 00 90 FD | 	jmp	#LR__0894
0a3a4                 | LR__0890
0a3a4     0A 41 06 F6 | 	mov	local14, #266
0a3a8     08 42 06 F6 | 	mov	local15, #8
0a3ac     1C 00 90 FD | 	jmp	#LR__0894
0a3b0                 | LR__0891
0a3b0     0B 41 06 F6 | 	mov	local14, #267
0a3b4     04 42 06 F6 | 	mov	local15, #4
0a3b8     10 00 90 FD | 	jmp	#LR__0894
0a3bc                 | LR__0892
0a3bc     2F FA 05 F6 | 	mov	result1, #47
0a3c0     08 01 90 FD | 	jmp	#LR__0895
0a3c4                 | LR__0893
0a3c4                 | '   return 46
0a3c4     2E FA 05 F6 | 	mov	result1, #46
0a3c8     00 01 90 FD | 	jmp	#LR__0895
0a3cc                 | LR__0894
0a3cc     13 43 02 FD | 	qmul	local15, local01
0a3d0     18 32 62 FD | 	getqx	local07
0a3d4     14 33 02 FD | 	qmul	local07, local02
0a3d8     18 44 62 FD | 	getqx	local16
0a3dc     15 45 02 FD | 	qmul	local16, local03
0a3e0     52 00 00 FF 
0a3e4     98 E4 05 F1 | 	add	objptr, ##42136
0a3e8     F2 46 02 FB | 	rdlong	local17, objptr
0a3ec     20 15 02 F6 | 	mov	arg02, local14
0a3f0     18 44 62 FD | 	getqx	local16
0a3f4     22 47 82 F1 | 	sub	local17, local16
0a3f8     10 46 86 F1 | 	sub	local17, #16
0a3fc     0F 46 26 F5 | 	andn	local17, #15
0a400     F2 46 62 FC | 	wrlong	local17, objptr
0a404     52 00 00 FF 
0a408     98 E4 85 F1 | 	sub	objptr, ##42136
0a40c     23 13 02 F6 | 	mov	arg01, local17
0a410     DC 8C B1 FD | 	call	#_psdpoke
0a414     23 13 02 F6 | 	mov	arg01, local17
0a418     02 12 06 F1 | 	add	arg01, #2
0a41c     21 15 02 F6 | 	mov	arg02, local15
0a420     CC 8C B1 FD | 	call	#_psdpoke
0a424     23 13 02 F6 | 	mov	arg01, local17
0a428     04 12 06 F1 | 	add	arg01, #4
0a42c     13 15 02 F6 | 	mov	arg02, local01
0a430     74 8C B1 FD | 	call	#_pslpoke
0a434     23 13 02 F6 | 	mov	arg01, local17
0a438     08 12 06 F1 | 	add	arg01, #8
0a43c     14 15 02 F6 | 	mov	arg02, local02
0a440     64 8C B1 FD | 	call	#_pslpoke
0a444     23 13 02 F6 | 	mov	arg01, local17
0a448     0C 12 06 F1 | 	add	arg01, #12
0a44c     15 15 02 F6 | 	mov	arg02, local03
0a450     54 8C B1 FD | 	call	#_pslpoke
0a454     18 3D 02 F6 | 	mov	local12, local06
0a458     04 3C 66 F0 | 	shl	local12, #4
0a45c     14 00 00 FF 
0a460     F8 E5 05 F1 | 	add	objptr, ##10744
0a464     F2 3C 02 F1 | 	add	local12, objptr
0a468     1E 2F 62 FC | 	wrlong	local05, local12
0a46c     18 3D 02 F6 | 	mov	local12, local06
0a470     04 3C 66 F0 | 	shl	local12, #4
0a474     F2 3C 02 F1 | 	add	local12, objptr
0a478     04 3C 06 F1 | 	add	local12, #4
0a47c     1E 47 62 FC | 	wrlong	local17, local12
0a480     18 3D 02 F6 | 	mov	local12, local06
0a484     04 3C 66 F0 | 	shl	local12, #4
0a488     F2 3C 02 F1 | 	add	local12, objptr
0a48c     0C 3C 06 F1 | 	add	local12, #12
0a490     1E 41 62 FC | 	wrlong	local14, local12
0a494                 | ' memtop=arrayptr
0a494                 | ' psdpoke arrayptr,arraytype 
0a494                 | ' psdpoke arrayptr+2,esize 
0a494                 | ' pslpoke arrayptr+4,dims(0)
0a494                 | ' pslpoke arrayptr+8,dims(1)
0a494                 | ' pslpoke arrayptr+12,dims(2)
0a494                 | ' variables(j).name=varname2$
0a494                 | ' variables(j).value.uresult=arrayptr
0a494                 | ' variables(j).vartype=arraytype
0a494                 | ' if j=varnum then varnum+=1
0a494     20 00 00 FF 
0a498     10 E4 05 F1 | 	add	objptr, ##16400
0a49c     F2 32 02 FB | 	rdlong	local07, objptr
0a4a0     35 00 00 FF 
0a4a4     08 E4 85 F1 | 	sub	objptr, ##27144
0a4a8     19 31 0A F2 | 	cmp	local06, local07 wz
0a4ac     35 00 00 AF 
0a4b0     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a4b4     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a4b8     01 32 06 A1 |  if_e	add	local07, #1
0a4bc     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a4c0     35 00 00 AF 
0a4c4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a4c8                 | ' return 0
0a4c8     00 FA 05 F6 | 	mov	result1, #0
0a4cc                 | LR__0895
0a4cc     A7 F0 03 F6 | 	mov	ptra, fp
0a4d0     B2 00 A0 FD | 	call	#popregs_
0a4d4                 | _compile_dim_ret
0a4d4     2D 00 64 FD | 	ret
0a4d8                 | 
0a4d8                 | ' 
0a4d8                 | ' '----- compile 'for' command. 
0a4d8                 | ' 
0a4d8                 | ' function compile_for() as ulong  
0a4d8                 | _compile_for
0a4d8     0E 4A 05 F6 | 	mov	COUNT_, #14
0a4dc     A8 00 A0 FD | 	call	#pushregs_
0a4e0                 | ' 
0a4e0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a4e0     37 00 00 FF 
0a4e4     44 E4 05 F1 | 	add	objptr, ##28228
0a4e8     F2 14 02 FB | 	rdlong	arg02, objptr
0a4ec     01 14 06 F1 | 	add	arg02, #1
0a4f0     03 14 66 F0 | 	shl	arg02, #3
0a4f4     02 00 00 FF 
0a4f8     38 E4 85 F1 | 	sub	objptr, ##1080
0a4fc     F2 14 02 F1 | 	add	arg02, objptr
0a500     0A 13 02 FB | 	rdlong	arg01, arg02
0a504     35 00 00 FF 
0a508     0C E4 85 F1 | 	sub	objptr, ##27148
0a50c                 | ' 
0a50c                 | ' select case s
0a50c     B3 01 00 FF 
0a510     3E 14 06 F6 | 	mov	arg02, ##@LR__5547
0a514     08 C4 B1 FD | 	call	#__system___string_cmp
0a518     00 FA 0D F2 | 	cmp	result1, #0 wz
0a51c     1B FA 05 A6 |  if_e	mov	result1, #27
0a520     00 FA 05 56 |  if_ne	mov	result1, #0
0a524     00 FA 0D F2 | 	cmp	result1, #0 wz
0a528     0C 00 90 AD |  if_e	jmp	#LR__0900
0a52c     05 12 06 F6 | 	mov	arg01, #5
0a530     A8 DB BF FD | 	call	#_compile_immediate_assign
0a534     08 00 90 FD | 	jmp	#LR__0901
0a538                 | LR__0900
0a538     20 FA 05 F6 | 	mov	result1, #32
0a53c     58 08 90 FD | 	jmp	#LR__0917
0a540                 | LR__0901
0a540     4A 00 00 FF 
0a544     7C E4 05 F1 | 	add	objptr, ##38012
0a548     F2 14 02 FB | 	rdlong	arg02, objptr
0a54c     0A 13 02 F6 | 	mov	arg01, arg02
0a550     01 12 86 F1 | 	sub	arg01, #1
0a554     09 2D 02 F6 | 	mov	local04, arg01
0a558     01 2C 66 F0 | 	shl	local04, #1
0a55c     09 2D 02 F1 | 	add	local04, arg01
0a560     02 2C 66 F0 | 	shl	local04, #2
0a564     03 00 00 FF 
0a568     00 E4 85 F1 | 	sub	objptr, ##1536
0a56c     F2 2C 02 F1 | 	add	local04, objptr
0a570     16 27 02 FB | 	rdlong	local01, local04
0a574     04 2C 06 F1 | 	add	local04, #4
0a578     16 2F 02 FB | 	rdlong	local05, local04
0a57c     01 14 86 F1 | 	sub	arg02, #1
0a580     0A 2D 02 F6 | 	mov	local04, arg02
0a584     01 2C 66 F0 | 	shl	local04, #1
0a588     0A 2D 02 F1 | 	add	local04, arg02
0a58c     02 2C 66 F0 | 	shl	local04, #2
0a590     F2 30 02 F6 | 	mov	local06, objptr
0a594     F2 2C 02 F1 | 	add	local04, objptr
0a598     08 2C 06 F1 | 	add	local04, #8
0a59c     16 2D 02 FB | 	rdlong	local04, local04
0a5a0     17 29 02 F6 | 	mov	local02, local05
0a5a4     16 2B 02 F6 | 	mov	local03, local04
0a5a8                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a5a8     17 2A 0E F2 | 	cmp	local03, #23 wz
0a5ac     47 00 00 FF 
0a5b0     7C E4 85 F1 | 	sub	objptr, ##36476
0a5b4     22 FA 05 56 |  if_ne	mov	result1, #34
0a5b8     DC 07 90 5D |  if_ne	jmp	#LR__0917
0a5bc     13 33 02 F6 | 	mov	local07, local01
0a5c0                 | ' varnum=t1.result.uresult
0a5c0                 | ' if lparts(ct).part$<>"to" then return 33
0a5c0     37 00 00 FF 
0a5c4     44 E4 05 F1 | 	add	objptr, ##28228
0a5c8     F2 2C 02 FB | 	rdlong	local04, objptr
0a5cc     03 2C 66 F0 | 	shl	local04, #3
0a5d0     02 00 00 FF 
0a5d4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5d8     F2 2C 02 F1 | 	add	local04, objptr
0a5dc     16 13 02 FB | 	rdlong	arg01, local04
0a5e0     B5 01 00 FF 
0a5e4     59 15 06 F6 | 	mov	arg02, ##@LR__5822
0a5e8     35 00 00 FF 
0a5ec     0C E4 85 F1 | 	sub	objptr, ##27148
0a5f0     2C C3 B1 FD | 	call	#__system___string_cmp
0a5f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5f8     21 FA 05 56 |  if_ne	mov	result1, #33
0a5fc     98 07 90 5D |  if_ne	jmp	#LR__0917
0a600     37 00 00 FF 
0a604     44 E4 05 F1 | 	add	objptr, ##28228
0a608     F2 34 02 FB | 	rdlong	local08, objptr
0a60c     01 34 06 F1 | 	add	local08, #1
0a610     F2 34 62 FC | 	wrlong	local08, objptr
0a614     37 00 00 FF 
0a618     44 E4 85 F1 | 	sub	objptr, ##28228
0a61c     2C 17 B0 FD | 	call	#_expr
0a620                 | ' ct+=1
0a620                 | ' expr()  										' there is "to" value pushed on the stack
0a620                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a620     37 00 00 FF 
0a624     44 E4 05 F1 | 	add	objptr, ##28228
0a628     F2 2C 02 FB | 	rdlong	local04, objptr
0a62c     03 2C 66 F0 | 	shl	local04, #3
0a630     02 00 00 FF 
0a634     38 E4 85 F1 | 	sub	objptr, ##1080
0a638     F2 2C 02 F1 | 	add	local04, objptr
0a63c     16 13 02 FB | 	rdlong	arg01, local04
0a640     B5 01 00 FF 
0a644     5C 15 06 F6 | 	mov	arg02, ##@LR__5823
0a648     35 00 00 FF 
0a64c     0C E4 85 F1 | 	sub	objptr, ##27148
0a650     CC C2 B1 FD | 	call	#__system___string_cmp
0a654     00 FA 0D F2 | 	cmp	result1, #0 wz
0a658     48 00 90 AD |  if_e	jmp	#LR__0902
0a65c     37 00 00 FF 
0a660     44 E4 05 F1 | 	add	objptr, ##28228
0a664     F2 2C 02 FB | 	rdlong	local04, objptr
0a668     03 2C 66 F0 | 	shl	local04, #3
0a66c     02 00 00 FF 
0a670     38 E4 85 F1 | 	sub	objptr, ##1080
0a674     F2 2C 02 F1 | 	add	local04, objptr
0a678     16 13 02 FB | 	rdlong	arg01, local04
0a67c     02 14 06 F6 | 	mov	arg02, #2
0a680     35 00 00 FF 
0a684     0C E4 85 F1 | 	sub	objptr, ##27148
0a688     EC E2 B1 FD | 	call	#__system__Left_S
0a68c     FD 12 02 F6 | 	mov	arg01, result1
0a690     B5 01 00 FF 
0a694     61 15 06 F6 | 	mov	arg02, ##@LR__5824
0a698     84 C2 B1 FD | 	call	#__system___string_cmp
0a69c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6a0     9C 05 90 5D |  if_ne	jmp	#LR__0915
0a6a4                 | LR__0902
0a6a4                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a6a4     37 00 00 FF 
0a6a8     44 E4 05 F1 | 	add	objptr, ##28228
0a6ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a6b0     03 2C 66 F0 | 	shl	local04, #3
0a6b4     02 00 00 FF 
0a6b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a6bc     F2 2C 02 F1 | 	add	local04, objptr
0a6c0     16 13 02 FB | 	rdlong	arg01, local04
0a6c4     02 14 06 F6 | 	mov	arg02, #2
0a6c8     35 00 00 FF 
0a6cc     0C E4 85 F1 | 	sub	objptr, ##27148
0a6d0     A4 E2 B1 FD | 	call	#__system__Left_S
0a6d4     FD 12 02 F6 | 	mov	arg01, result1
0a6d8     B5 01 00 FF 
0a6dc     64 15 06 F6 | 	mov	arg02, ##@LR__5825
0a6e0     3C C2 B1 FD | 	call	#__system___string_cmp
0a6e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6e8     30 05 90 5D |  if_ne	jmp	#LR__0914
0a6ec     37 00 00 FF 
0a6f0     44 E4 05 F1 | 	add	objptr, ##28228
0a6f4     F2 2C 02 FB | 	rdlong	local04, objptr
0a6f8     03 2C 66 F0 | 	shl	local04, #3
0a6fc     02 00 00 FF 
0a700     38 E4 85 F1 | 	sub	objptr, ##1080
0a704     F2 2C 02 F1 | 	add	local04, objptr
0a708     16 13 02 FB | 	rdlong	arg01, local04
0a70c     35 00 00 FF 
0a710     0C E4 85 F1 | 	sub	objptr, ##27148
0a714     09 37 02 F6 | 	mov	local09, arg01
0a718     97 06 48 FB | 	callpa	#(@LR__0904-@LR__0903)>>2,fcache_load_ptr_
0a71c                 | LR__0903
0a71c     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a720     01 36 06 51 |  if_ne	add	local09, #1
0a724     F4 FF 9F 5D |  if_ne	jmp	#LR__0903
0a728                 | LR__0904
0a728     09 37 82 F1 | 	sub	local09, arg01
0a72c     03 36 56 F2 | 	cmps	local09, #3 wc
0a730     E8 04 90 CD |  if_b	jmp	#LR__0914
0a734     37 00 00 FF 
0a738     44 E4 05 F1 | 	add	objptr, ##28228
0a73c     F2 2C 02 FB | 	rdlong	local04, objptr
0a740     16 39 02 F6 | 	mov	local10, local04
0a744     03 38 66 F0 | 	shl	local10, #3
0a748     02 00 00 FF 
0a74c     38 E4 85 F1 | 	sub	objptr, ##1080
0a750     F2 38 02 F1 | 	add	local10, objptr
0a754     03 2C 66 F0 | 	shl	local04, #3
0a758     F2 2C 02 F1 | 	add	local04, objptr
0a75c     16 2D 02 FB | 	rdlong	local04, local04
0a760     02 00 00 FF 
0a764     38 E4 05 F1 | 	add	objptr, ##1080
0a768     F2 12 02 FB | 	rdlong	arg01, objptr
0a76c     03 12 66 F0 | 	shl	arg01, #3
0a770     02 00 00 FF 
0a774     38 E4 85 F1 | 	sub	objptr, ##1080
0a778     F2 12 02 F1 | 	add	arg01, objptr
0a77c     09 13 02 FB | 	rdlong	arg01, arg01
0a780     35 00 00 FF 
0a784     0C E4 85 F1 | 	sub	objptr, ##27148
0a788     09 37 02 F6 | 	mov	local09, arg01
0a78c     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a790                 | LR__0905
0a790     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a794     01 36 06 51 |  if_ne	add	local09, #1
0a798     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a79c                 | LR__0906
0a79c     09 37 82 F1 | 	sub	local09, arg01
0a7a0     1B 15 02 F6 | 	mov	arg02, local09
0a7a4     02 14 86 F1 | 	sub	arg02, #2
0a7a8     16 13 02 F6 | 	mov	arg01, local04
0a7ac     50 E2 B1 FD | 	call	#__system__Right_S
0a7b0     1C FB 61 FC | 	wrlong	result1, local10
0a7b4     37 00 00 FF 
0a7b8     44 E4 05 F1 | 	add	objptr, ##28228
0a7bc     F2 2C 02 FB | 	rdlong	local04, objptr
0a7c0     16 39 02 F6 | 	mov	local10, local04
0a7c4     03 38 66 F0 | 	shl	local10, #3
0a7c8     02 00 00 FF 
0a7cc     38 E4 85 F1 | 	sub	objptr, ##1080
0a7d0     F2 38 02 F1 | 	add	local10, objptr
0a7d4     03 2C 66 F0 | 	shl	local04, #3
0a7d8     F2 2C 02 F1 | 	add	local04, objptr
0a7dc     16 13 02 FB | 	rdlong	arg01, local04
0a7e0     35 00 00 FF 
0a7e4     0C E4 85 F1 | 	sub	objptr, ##27148
0a7e8     AC B6 BF FD | 	call	#_isfunction
0a7ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a7f0     04 38 06 F1 | 	add	local10, #4
0a7f4     1C FB 61 FC | 	wrlong	result1, local10
0a7f8                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a7f8     37 00 00 FF 
0a7fc     44 E4 05 F1 | 	add	objptr, ##28228
0a800     F2 38 02 FB | 	rdlong	local10, objptr
0a804     03 38 66 F0 | 	shl	local10, #3
0a808     02 00 00 FF 
0a80c     38 E4 85 F1 | 	sub	objptr, ##1080
0a810     F2 38 02 F1 | 	add	local10, objptr
0a814     04 38 06 F1 | 	add	local10, #4
0a818     1C 2D 02 FB | 	rdlong	local04, local10
0a81c     01 2C 56 F2 | 	cmps	local04, #1 wc
0a820     35 00 00 FF 
0a824     0C E4 85 F1 | 	sub	objptr, ##27148
0a828     D4 03 90 3D |  if_ae	jmp	#LR__0913
0a82c     37 00 00 FF 
0a830     44 E4 05 F1 | 	add	objptr, ##28228
0a834     F2 2C 02 FB | 	rdlong	local04, objptr
0a838     16 39 02 F6 | 	mov	local10, local04
0a83c     03 38 66 F0 | 	shl	local10, #3
0a840     02 00 00 FF 
0a844     38 E4 85 F1 | 	sub	objptr, ##1080
0a848     F2 38 02 F1 | 	add	local10, objptr
0a84c     03 2C 66 F0 | 	shl	local04, #3
0a850     F2 2C 02 F1 | 	add	local04, objptr
0a854     16 13 02 FB | 	rdlong	arg01, local04
0a858     35 00 00 FF 
0a85c     0C E4 85 F1 | 	sub	objptr, ##27148
0a860     08 A0 BF FD | 	call	#_isnotename
0a864     04 38 06 F1 | 	add	local10, #4
0a868     1C FB 61 FC | 	wrlong	result1, local10
0a86c                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0a86c                 | '     if lparts(ct).token>0 then 
0a86c     37 00 00 FF 
0a870     44 E4 05 F1 | 	add	objptr, ##28228
0a874     F2 38 02 FB | 	rdlong	local10, objptr
0a878     03 38 66 F0 | 	shl	local10, #3
0a87c     02 00 00 FF 
0a880     38 E4 85 F1 | 	sub	objptr, ##1080
0a884     F2 38 02 F1 | 	add	local10, objptr
0a888     04 38 06 F1 | 	add	local10, #4
0a88c     1C 2D 02 FB | 	rdlong	local04, local10
0a890     01 2C 56 F2 | 	cmps	local04, #1 wc
0a894     35 00 00 FF 
0a898     0C E4 85 F1 | 	sub	objptr, ##27148
0a89c     94 00 90 CD |  if_b	jmp	#LR__0907
0a8a0     37 00 00 FF 
0a8a4     44 E4 05 F1 | 	add	objptr, ##28228
0a8a8     F2 38 02 FB | 	rdlong	local10, objptr
0a8ac     03 38 66 F0 | 	shl	local10, #3
0a8b0     02 00 00 FF 
0a8b4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8b8     F2 38 02 F1 | 	add	local10, objptr
0a8bc     04 38 06 F1 | 	add	local10, #4
0a8c0     1C 13 02 FB | 	rdlong	arg01, local10
0a8c4     35 00 00 FF 
0a8c8     0C E4 85 F1 | 	sub	objptr, ##27148
0a8cc     D0 C6 BF FD | 	call	#_getnoteval
0a8d0     FD 12 02 F6 | 	mov	arg01, result1
0a8d4     37 00 00 FF 
0a8d8     44 E4 05 F1 | 	add	objptr, ##28228
0a8dc     F2 38 02 FB | 	rdlong	local10, objptr
0a8e0     03 38 66 F0 | 	shl	local10, #3
0a8e4     02 00 00 FF 
0a8e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a8ec     F2 38 02 F1 | 	add	local10, objptr
0a8f0     35 00 00 FF 
0a8f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a8f8     74 E2 B1 FD | 	call	#__system__str_S
0a8fc     1C FB 61 FC | 	wrlong	result1, local10
0a900     37 00 00 FF 
0a904     44 E4 05 F1 | 	add	objptr, ##28228
0a908     F2 38 02 FB | 	rdlong	local10, objptr
0a90c     03 38 66 F0 | 	shl	local10, #3
0a910     02 00 00 FF 
0a914     38 E4 85 F1 | 	sub	objptr, ##1080
0a918     F2 38 02 F1 | 	add	local10, objptr
0a91c     04 38 06 F1 | 	add	local10, #4
0a920     01 00 80 FF 
0a924     1C 05 68 FC | 	wrlong	##514, local10
0a928     35 00 00 FF 
0a92c     0C E4 85 F1 | 	sub	objptr, ##27148
0a930     CC 02 90 FD | 	jmp	#LR__0913
0a934                 | LR__0907
0a934     37 00 00 FF 
0a938     44 E4 05 F1 | 	add	objptr, ##28228
0a93c     F2 2C 02 FB | 	rdlong	local04, objptr
0a940     16 39 02 F6 | 	mov	local10, local04
0a944     03 38 66 F0 | 	shl	local10, #3
0a948     02 00 00 FF 
0a94c     38 E4 85 F1 | 	sub	objptr, ##1080
0a950     F2 38 02 F1 | 	add	local10, objptr
0a954     03 2C 66 F0 | 	shl	local04, #3
0a958     F2 2C 02 F1 | 	add	local04, objptr
0a95c     16 13 02 FB | 	rdlong	arg01, local04
0a960     35 00 00 FF 
0a964     0C E4 85 F1 | 	sub	objptr, ##27148
0a968     80 9E BF FD | 	call	#_isconstant
0a96c     04 38 06 F1 | 	add	local10, #4
0a970     1C FB 61 FC | 	wrlong	result1, local10
0a974                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0a974     37 00 00 FF 
0a978     44 E4 05 F1 | 	add	objptr, ##28228
0a97c     F2 38 02 FB | 	rdlong	local10, objptr
0a980     03 38 66 F0 | 	shl	local10, #3
0a984     02 00 00 FF 
0a988     38 E4 85 F1 | 	sub	objptr, ##1080
0a98c     F2 38 02 F1 | 	add	local10, objptr
0a990     04 38 06 F1 | 	add	local10, #4
0a994     1C 2D 02 FB | 	rdlong	local04, local10
0a998     01 2C 56 F2 | 	cmps	local04, #1 wc
0a99c     35 00 00 FF 
0a9a0     0C E4 85 F1 | 	sub	objptr, ##27148
0a9a4     8C 00 90 CD |  if_b	jmp	#LR__0908
0a9a8     37 00 00 FF 
0a9ac     44 E4 05 F1 | 	add	objptr, ##28228
0a9b0     F2 34 02 FB | 	rdlong	local08, objptr
0a9b4     1A 39 02 F6 | 	mov	local10, local08
0a9b8     03 38 66 F0 | 	shl	local10, #3
0a9bc     02 00 00 FF 
0a9c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a9c4     F2 38 02 F1 | 	add	local10, objptr
0a9c8     03 34 66 F0 | 	shl	local08, #3
0a9cc     F2 34 02 F1 | 	add	local08, objptr
0a9d0     04 34 06 F1 | 	add	local08, #4
0a9d4     1A 13 02 FB | 	rdlong	arg01, local08
0a9d8     35 00 00 FF 
0a9dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a9e0     09 13 52 F6 | 	abs	arg01, arg01 wc
0a9e4     1F 3A C6 C9 |  if_b	decod	local11, #31
0a9e8     00 3A 06 36 |  if_ae	mov	local11, #0
0a9ec     80 E9 B1 FD | 	call	#__system___float_fromuns
0a9f0     1D FB 61 F5 | 	xor	result1, local11
0a9f4     FD 12 02 F6 | 	mov	arg01, result1
0a9f8     74 E1 B1 FD | 	call	#__system__str_S
0a9fc     1C FB 61 FC | 	wrlong	result1, local10
0aa00     37 00 00 FF 
0aa04     44 E4 05 F1 | 	add	objptr, ##28228
0aa08     F2 38 02 FB | 	rdlong	local10, objptr
0aa0c     03 38 66 F0 | 	shl	local10, #3
0aa10     02 00 00 FF 
0aa14     38 E4 85 F1 | 	sub	objptr, ##1080
0aa18     F2 38 02 F1 | 	add	local10, objptr
0aa1c     04 38 06 F1 | 	add	local10, #4
0aa20     01 00 80 FF 
0aa24     1C 03 68 FC | 	wrlong	##513, local10
0aa28     35 00 00 FF 
0aa2c     0C E4 85 F1 | 	sub	objptr, ##27148
0aa30     CC 01 90 FD | 	jmp	#LR__0913
0aa34                 | LR__0908
0aa34     37 00 00 FF 
0aa38     44 E4 05 F1 | 	add	objptr, ##28228
0aa3c     F2 38 02 FB | 	rdlong	local10, objptr
0aa40     03 38 66 F0 | 	shl	local10, #3
0aa44     02 00 00 FF 
0aa48     38 E4 85 F1 | 	sub	objptr, ##1080
0aa4c     F2 38 02 F1 | 	add	local10, objptr
0aa50     1C 13 02 FB | 	rdlong	arg01, local10
0aa54     35 00 00 FF 
0aa58     0C E4 85 F1 | 	sub	objptr, ##27148
0aa5c     8C BD BF FD | 	call	#_isnum
0aa60     FD 3C 02 F6 | 	mov	local12, result1
0aa64     37 00 00 FF 
0aa68     44 E4 05 F1 | 	add	objptr, ##28228
0aa6c     F2 38 02 FB | 	rdlong	local10, objptr
0aa70     03 38 66 F0 | 	shl	local10, #3
0aa74     02 00 00 FF 
0aa78     38 E4 85 F1 | 	sub	objptr, ##1080
0aa7c     F2 38 02 F1 | 	add	local10, objptr
0aa80     1C 13 02 FB | 	rdlong	arg01, local10
0aa84     35 00 00 FF 
0aa88     0C E4 85 F1 | 	sub	objptr, ##27148
0aa8c     48 C1 BF FD | 	call	#_isint
0aa90     FD 3E 02 F6 | 	mov	local13, result1
0aa94     37 00 00 FF 
0aa98     44 E4 05 F1 | 	add	objptr, ##28228
0aa9c     F2 38 02 FB | 	rdlong	local10, objptr
0aaa0     03 38 66 F0 | 	shl	local10, #3
0aaa4     02 00 00 FF 
0aaa8     38 E4 85 F1 | 	sub	objptr, ##1080
0aaac     F2 38 02 F1 | 	add	local10, objptr
0aab0     1C 13 02 FB | 	rdlong	arg01, local10
0aab4     35 00 00 FF 
0aab8     0C E4 85 F1 | 	sub	objptr, ##27148
0aabc     BC C3 BF FD | 	call	#_isdec
0aac0     FD 40 02 F6 | 	mov	local14, result1
0aac4                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0aac4                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0aac4     00 3C 0E F2 | 	cmp	local12, #0 wz
0aac8     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0aacc     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0aad0     34 00 90 AD |  if_e	jmp	#LR__0909
0aad4     37 00 00 FF 
0aad8     44 E4 05 F1 | 	add	objptr, ##28228
0aadc     F2 38 02 FB | 	rdlong	local10, objptr
0aae0     03 38 66 F0 | 	shl	local10, #3
0aae4     02 00 00 FF 
0aae8     38 E4 85 F1 | 	sub	objptr, ##1080
0aaec     F2 38 02 F1 | 	add	local10, objptr
0aaf0     04 38 06 F1 | 	add	local10, #4
0aaf4     01 00 80 FF 
0aaf8     1C 01 68 FC | 	wrlong	##512, local10
0aafc     35 00 00 FF 
0ab00     0C E4 85 F1 | 	sub	objptr, ##27148
0ab04     F8 00 90 FD | 	jmp	#LR__0913
0ab08                 | LR__0909
0ab08                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0ab08     00 3C 0E F2 | 	cmp	local12, #0 wz
0ab0c     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ab10     20 35 22 56 |  if_ne	not	local08, local14
0ab14     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0ab18     34 00 90 AD |  if_e	jmp	#LR__0910
0ab1c     37 00 00 FF 
0ab20     44 E4 05 F1 | 	add	objptr, ##28228
0ab24     F2 38 02 FB | 	rdlong	local10, objptr
0ab28     03 38 66 F0 | 	shl	local10, #3
0ab2c     02 00 00 FF 
0ab30     38 E4 85 F1 | 	sub	objptr, ##1080
0ab34     F2 38 02 F1 | 	add	local10, objptr
0ab38     04 38 06 F1 | 	add	local10, #4
0ab3c     01 00 80 FF 
0ab40     1C 03 68 FC | 	wrlong	##513, local10
0ab44     35 00 00 FF 
0ab48     0C E4 85 F1 | 	sub	objptr, ##27148
0ab4c     B0 00 90 FD | 	jmp	#LR__0913
0ab50                 | LR__0910
0ab50                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ab50     00 3C 0E F2 | 	cmp	local12, #0 wz
0ab54     1F 3F 22 56 |  if_ne	not	local13, local13
0ab58     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ab5c     20 41 22 56 |  if_ne	not	local14, local14
0ab60     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ab64     34 00 90 AD |  if_e	jmp	#LR__0911
0ab68     37 00 00 FF 
0ab6c     44 E4 05 F1 | 	add	objptr, ##28228
0ab70     F2 38 02 FB | 	rdlong	local10, objptr
0ab74     03 38 66 F0 | 	shl	local10, #3
0ab78     02 00 00 FF 
0ab7c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab80     F2 38 02 F1 | 	add	local10, objptr
0ab84     04 38 06 F1 | 	add	local10, #4
0ab88     01 00 80 FF 
0ab8c     1C 05 68 FC | 	wrlong	##514, local10
0ab90     35 00 00 FF 
0ab94     0C E4 85 F1 | 	sub	objptr, ##27148
0ab98     64 00 90 FD | 	jmp	#LR__0913
0ab9c                 | LR__0911
0ab9c                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ab9c     37 00 00 FF 
0aba0     44 E4 05 F1 | 	add	objptr, ##28228
0aba4     F2 38 02 FB | 	rdlong	local10, objptr
0aba8     03 38 66 F0 | 	shl	local10, #3
0abac     02 00 00 FF 
0abb0     38 E4 85 F1 | 	sub	objptr, ##1080
0abb4     F2 38 02 F1 | 	add	local10, objptr
0abb8     1C 13 02 FB | 	rdlong	arg01, local10
0abbc     35 00 00 FF 
0abc0     0C E4 85 F1 | 	sub	objptr, ##27148
0abc4     B0 B9 BF FD | 	call	#_isname
0abc8     00 FA 0D F2 | 	cmp	result1, #0 wz
0abcc     30 00 90 AD |  if_e	jmp	#LR__0912
0abd0     37 00 00 FF 
0abd4     44 E4 05 F1 | 	add	objptr, ##28228
0abd8     F2 38 02 FB | 	rdlong	local10, objptr
0abdc     03 38 66 F0 | 	shl	local10, #3
0abe0     02 00 00 FF 
0abe4     38 E4 85 F1 | 	sub	objptr, ##1080
0abe8     F2 38 02 F1 | 	add	local10, objptr
0abec     04 38 06 F1 | 	add	local10, #4
0abf0     01 00 80 FF 
0abf4     1C 09 68 FC | 	wrlong	##516, local10
0abf8     35 00 00 FF 
0abfc     0C E4 85 F1 | 	sub	objptr, ##27148
0ac00                 | LR__0912
0ac00                 | LR__0913
0ac00     37 00 00 FF 
0ac04     44 E4 05 F1 | 	add	objptr, ##28228
0ac08     F2 34 02 FB | 	rdlong	local08, objptr
0ac0c     01 34 86 F1 | 	sub	local08, #1
0ac10     F2 34 62 FC | 	wrlong	local08, objptr
0ac14     37 00 00 FF 
0ac18     44 E4 85 F1 | 	sub	objptr, ##28228
0ac1c                 | LR__0914
0ac1c     37 00 00 FF 
0ac20     44 E4 05 F1 | 	add	objptr, ##28228
0ac24     F2 34 02 FB | 	rdlong	local08, objptr
0ac28     01 34 06 F1 | 	add	local08, #1
0ac2c     F2 34 62 FC | 	wrlong	local08, objptr
0ac30     37 00 00 FF 
0ac34     44 E4 85 F1 | 	sub	objptr, ##28228
0ac38     10 11 B0 FD | 	call	#_expr
0ac3c     78 00 90 FD | 	jmp	#LR__0916
0ac40                 | LR__0915
0ac40     4A 00 00 FF 
0ac44     7C E4 05 F1 | 	add	objptr, ##38012
0ac48     F2 40 02 FB | 	rdlong	local14, objptr
0ac4c     20 39 02 F6 | 	mov	local10, local14
0ac50     01 38 66 F0 | 	shl	local10, #1
0ac54     20 39 02 F1 | 	add	local10, local14
0ac58     02 38 66 F0 | 	shl	local10, #2
0ac5c     03 00 00 FF 
0ac60     00 E4 85 F1 | 	sub	objptr, ##1536
0ac64     F2 38 02 F1 | 	add	local10, objptr
0ac68     08 38 06 F1 | 	add	local10, #8
0ac6c     1C 39 68 FC | 	wrlong	#28, local10
0ac70     03 00 00 FF 
0ac74     00 E4 05 F1 | 	add	objptr, ##1536
0ac78     F2 40 02 FB | 	rdlong	local14, objptr
0ac7c     20 39 02 F6 | 	mov	local10, local14
0ac80     01 38 66 F0 | 	shl	local10, #1
0ac84     20 39 02 F1 | 	add	local10, local14
0ac88     02 38 66 F0 | 	shl	local10, #2
0ac8c     03 00 00 FF 
0ac90     00 E4 85 F1 | 	sub	objptr, ##1536
0ac94     F2 38 02 F1 | 	add	local10, objptr
0ac98     1C 03 68 FC | 	wrlong	#1, local10
0ac9c     03 00 00 FF 
0aca0     00 E4 05 F1 | 	add	objptr, ##1536
0aca4     F2 34 02 FB | 	rdlong	local08, objptr
0aca8     01 34 06 F1 | 	add	local08, #1
0acac     F2 34 62 FC | 	wrlong	local08, objptr
0acb0     4A 00 00 FF 
0acb4     7C E4 85 F1 | 	sub	objptr, ##38012
0acb8                 | LR__0916
0acb8     4A 00 00 FF 
0acbc     7C E4 05 F1 | 	add	objptr, ##38012
0acc0     F2 40 02 FB | 	rdlong	local14, objptr
0acc4     20 39 02 F6 | 	mov	local10, local14
0acc8     01 38 66 F0 | 	shl	local10, #1
0accc     20 39 02 F1 | 	add	local10, local14
0acd0     02 38 66 F0 | 	shl	local10, #2
0acd4     03 00 00 FF 
0acd8     00 E4 85 F1 | 	sub	objptr, ##1536
0acdc     F2 38 02 F1 | 	add	local10, objptr
0ace0     08 38 06 F1 | 	add	local10, #8
0ace4     1C 39 68 FC | 	wrlong	#28, local10
0ace8     03 00 00 FF 
0acec     00 E4 05 F1 | 	add	objptr, ##1536
0acf0     F2 40 02 FB | 	rdlong	local14, objptr
0acf4     20 39 02 F6 | 	mov	local10, local14
0acf8     01 38 66 F0 | 	shl	local10, #1
0acfc     20 39 02 F1 | 	add	local10, local14
0ad00     02 38 66 F0 | 	shl	local10, #2
0ad04     03 00 00 FF 
0ad08     00 E4 85 F1 | 	sub	objptr, ##1536
0ad0c     F2 38 02 F1 | 	add	local10, objptr
0ad10     1C 33 62 FC | 	wrlong	local07, local10
0ad14     03 00 00 FF 
0ad18     00 E4 05 F1 | 	add	objptr, ##1536
0ad1c     F2 40 02 FB | 	rdlong	local14, objptr
0ad20     01 40 06 F1 | 	add	local14, #1
0ad24     F2 40 62 FC | 	wrlong	local14, objptr
0ad28     20 39 02 F6 | 	mov	local10, local14
0ad2c     01 38 66 F0 | 	shl	local10, #1
0ad30     20 39 02 F1 | 	add	local10, local14
0ad34     02 38 66 F0 | 	shl	local10, #2
0ad38     03 00 00 FF 
0ad3c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad40     F2 38 02 F1 | 	add	local10, objptr
0ad44     08 38 06 F1 | 	add	local10, #8
0ad48     1C 95 68 FC | 	wrlong	#74, local10
0ad4c     03 00 00 FF 
0ad50     00 E4 05 F1 | 	add	objptr, ##1536
0ad54     F2 40 02 FB | 	rdlong	local14, objptr
0ad58     20 39 02 F6 | 	mov	local10, local14
0ad5c     01 38 66 F0 | 	shl	local10, #1
0ad60     20 39 02 F1 | 	add	local10, local14
0ad64     02 38 66 F0 | 	shl	local10, #2
0ad68     03 00 00 FF 
0ad6c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad70     F2 38 02 F1 | 	add	local10, objptr
0ad74     1C 01 68 FC | 	wrlong	#0, local10
0ad78     03 00 00 FF 
0ad7c     00 E4 05 F1 | 	add	objptr, ##1536
0ad80     F2 34 02 FB | 	rdlong	local08, objptr
0ad84     01 34 06 F1 | 	add	local08, #1
0ad88     F2 34 62 FC | 	wrlong	local08, objptr
0ad8c     4A 00 00 FF 
0ad90     7C E4 85 F1 | 	sub	objptr, ##38012
0ad94                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0ad94                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0ad94                 | ' return 0
0ad94     00 FA 05 F6 | 	mov	result1, #0
0ad98                 | LR__0917
0ad98     A7 F0 03 F6 | 	mov	ptra, fp
0ad9c     B2 00 A0 FD | 	call	#popregs_
0ada0                 | _compile_for_ret
0ada0     2D 00 64 FD | 	ret
0ada4                 | 
0ada4                 | ' 
0ada4                 | ' '----- compile 'next' command. 
0ada4                 | ' 
0ada4                 | ' function compile_next() as ulong
0ada4                 | _compile_next
0ada4     04 4A 05 F6 | 	mov	COUNT_, #4
0ada8     A8 00 A0 FD | 	call	#pushregs_
0adac     37 00 00 FF 
0adb0     44 E4 05 F1 | 	add	objptr, ##28228
0adb4     F2 14 02 FB | 	rdlong	arg02, objptr
0adb8     03 14 66 F0 | 	shl	arg02, #3
0adbc     02 00 00 FF 
0adc0     38 E4 85 F1 | 	sub	objptr, ##1080
0adc4     F2 14 02 F1 | 	add	arg02, objptr
0adc8     0A 27 02 FB | 	rdlong	local01, arg02
0adcc                 | ' 
0adcc                 | ' varname$=lparts(ct).part$ 
0adcc                 | ' if varnum=0 then return 35
0adcc     04 E4 85 F1 | 	sub	objptr, #4
0add0     F2 14 0A FB | 	rdlong	arg02, objptr wz
0add4     35 00 00 FF 
0add8     08 E4 85 F1 | 	sub	objptr, ##27144
0addc     23 FA 05 A6 |  if_e	mov	result1, #35
0ade0     4C 01 90 AD |  if_e	jmp	#LR__0922
0ade4     01 28 66 F6 | 	neg	local02, #1
0ade8                 | ' j=-1
0ade8                 | ' for i=0 to varnum-1
0ade8     00 2A 06 F6 | 	mov	local03, #0
0adec     35 00 00 FF 
0adf0     08 E4 05 F1 | 	add	objptr, ##27144
0adf4     F2 2C 02 FB | 	rdlong	local04, objptr
0adf8     35 00 00 FF 
0adfc     08 E4 85 F1 | 	sub	objptr, ##27144
0ae00                 | LR__0920
0ae00     16 2B 12 F2 | 	cmp	local03, local04 wc
0ae04     38 00 90 3D |  if_ae	jmp	#LR__0921
0ae08                 | '   if variables(i).name=varname$ then j=i : exit
0ae08     15 15 02 F6 | 	mov	arg02, local03
0ae0c     04 14 66 F0 | 	shl	arg02, #4
0ae10     14 00 00 FF 
0ae14     F8 E5 05 F1 | 	add	objptr, ##10744
0ae18     F2 14 02 F1 | 	add	arg02, objptr
0ae1c     0A 13 02 FB | 	rdlong	arg01, arg02
0ae20     13 15 02 F6 | 	mov	arg02, local01
0ae24     14 00 00 FF 
0ae28     F8 E5 85 F1 | 	sub	objptr, ##10744
0ae2c     F0 BA B1 FD | 	call	#__system___string_cmp
0ae30     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae34     15 29 02 A6 |  if_e	mov	local02, local03
0ae38     01 2A 06 51 |  if_ne	add	local03, #1
0ae3c     C0 FF 9F 5D |  if_ne	jmp	#LR__0920
0ae40                 | LR__0921
0ae40                 | ' if j=-1 then return 35
0ae40     FF FF 7F FF 
0ae44     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0ae48     23 FA 05 A6 |  if_e	mov	result1, #35
0ae4c     E0 00 90 AD |  if_e	jmp	#LR__0922
0ae50     4A 00 00 FF 
0ae54     7C E4 05 F1 | 	add	objptr, ##38012
0ae58     F2 2C 02 FB | 	rdlong	local04, objptr
0ae5c     16 2B 02 F6 | 	mov	local03, local04
0ae60     01 2A 66 F0 | 	shl	local03, #1
0ae64     16 2B 02 F1 | 	add	local03, local04
0ae68     02 2A 66 F0 | 	shl	local03, #2
0ae6c     03 00 00 FF 
0ae70     00 E4 85 F1 | 	sub	objptr, ##1536
0ae74     F2 2A 02 F1 | 	add	local03, objptr
0ae78     08 2A 06 F1 | 	add	local03, #8
0ae7c     15 39 68 FC | 	wrlong	#28, local03
0ae80     03 00 00 FF 
0ae84     00 E4 05 F1 | 	add	objptr, ##1536
0ae88     F2 2C 02 FB | 	rdlong	local04, objptr
0ae8c     16 2B 02 F6 | 	mov	local03, local04
0ae90     01 2A 66 F0 | 	shl	local03, #1
0ae94     16 2B 02 F1 | 	add	local03, local04
0ae98     02 2A 66 F0 | 	shl	local03, #2
0ae9c     03 00 00 FF 
0aea0     00 E4 85 F1 | 	sub	objptr, ##1536
0aea4     F2 2A 02 F1 | 	add	local03, objptr
0aea8     15 29 62 FC | 	wrlong	local02, local03
0aeac     03 00 00 FF 
0aeb0     00 E4 05 F1 | 	add	objptr, ##1536
0aeb4     F2 2C 02 FB | 	rdlong	local04, objptr
0aeb8     01 2C 06 F1 | 	add	local04, #1
0aebc     F2 2C 62 FC | 	wrlong	local04, objptr
0aec0     16 2B 02 F6 | 	mov	local03, local04
0aec4     01 2A 66 F0 | 	shl	local03, #1
0aec8     16 2B 02 F1 | 	add	local03, local04
0aecc     02 2A 66 F0 | 	shl	local03, #2
0aed0     03 00 00 FF 
0aed4     00 E4 85 F1 | 	sub	objptr, ##1536
0aed8     F2 2A 02 F1 | 	add	local03, objptr
0aedc     08 2A 06 F1 | 	add	local03, #8
0aee0     15 97 68 FC | 	wrlong	#75, local03
0aee4     03 00 00 FF 
0aee8     00 E4 05 F1 | 	add	objptr, ##1536
0aeec     F2 2C 02 FB | 	rdlong	local04, objptr
0aef0     16 2B 02 F6 | 	mov	local03, local04
0aef4     01 2A 66 F0 | 	shl	local03, #1
0aef8     16 2B 02 F1 | 	add	local03, local04
0aefc     02 2A 66 F0 | 	shl	local03, #2
0af00     03 00 00 FF 
0af04     00 E4 85 F1 | 	sub	objptr, ##1536
0af08     F2 2A 02 F1 | 	add	local03, objptr
0af0c     15 01 68 FC | 	wrlong	#0, local03
0af10     03 00 00 FF 
0af14     00 E4 05 F1 | 	add	objptr, ##1536
0af18     F2 2C 02 FB | 	rdlong	local04, objptr
0af1c     01 2C 06 F1 | 	add	local04, #1
0af20     F2 2C 62 FC | 	wrlong	local04, objptr
0af24     4A 00 00 FF 
0af28     7C E4 85 F1 | 	sub	objptr, ##38012
0af2c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0af2c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af2c                 | ' return 0
0af2c     00 FA 05 F6 | 	mov	result1, #0
0af30                 | LR__0922
0af30     A7 F0 03 F6 | 	mov	ptra, fp
0af34     B2 00 A0 FD | 	call	#popregs_
0af38                 | _compile_next_ret
0af38     2D 00 64 FD | 	ret
0af3c                 | 
0af3c                 | ' 
0af3c                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0af3c                 | ' 
0af3c                 | ' function compile_gosub() as ulong
0af3c                 | _compile_gosub
0af3c     02 4A 05 F6 | 	mov	COUNT_, #2
0af40     A8 00 A0 FD | 	call	#pushregs_
0af44     4A 00 00 FF 
0af48     7C E4 05 F1 | 	add	objptr, ##38012
0af4c     F2 26 02 FB | 	rdlong	local01, objptr
0af50     13 29 02 F6 | 	mov	local02, local01
0af54     01 28 66 F0 | 	shl	local02, #1
0af58     13 29 02 F1 | 	add	local02, local01
0af5c     02 28 66 F0 | 	shl	local02, #2
0af60     03 00 00 FF 
0af64     00 E4 85 F1 | 	sub	objptr, ##1536
0af68     F2 28 02 F1 | 	add	local02, objptr
0af6c     08 28 06 F1 | 	add	local02, #8
0af70     14 53 69 FC | 	wrlong	#169, local02
0af74     03 00 00 FF 
0af78     00 E4 05 F1 | 	add	objptr, ##1536
0af7c     F2 28 02 FB | 	rdlong	local02, objptr
0af80     01 28 06 F1 | 	add	local02, #1
0af84     F2 28 62 FC | 	wrlong	local02, objptr
0af88     4A 00 00 FF 
0af8c     7C E4 85 F1 | 	sub	objptr, ##38012
0af90     0C 00 B0 FD | 	call	#_compile_goto
0af94                 | ' compiledline(lineptr).result_type=token_gosub
0af94                 | ' lineptr+=1
0af94                 | ' err=compile_goto()
0af94                 | ' return err
0af94     A7 F0 03 F6 | 	mov	ptra, fp
0af98     B2 00 A0 FD | 	call	#popregs_
0af9c                 | _compile_gosub_ret
0af9c     2D 00 64 FD | 	ret
0afa0                 | 
0afa0                 | ' 
0afa0                 | ' '----- compile 'goto' 
0afa0                 | ' 
0afa0                 | ' function compile_goto() as ulong
0afa0                 | _compile_goto
0afa0     03 4A 05 F6 | 	mov	COUNT_, #3
0afa4     A8 00 A0 FD | 	call	#pushregs_
0afa8     34 F0 07 F1 | 	add	ptra, #52
0afac                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0afac     37 00 00 FF 
0afb0     44 E4 05 F1 | 	add	objptr, ##28228
0afb4     F2 16 02 FB | 	rdlong	arg03, objptr
0afb8     03 16 66 F0 | 	shl	arg03, #3
0afbc     02 00 00 FF 
0afc0     38 E4 85 F1 | 	sub	objptr, ##1080
0afc4     F2 16 02 F1 | 	add	arg03, objptr
0afc8     04 16 06 F1 | 	add	arg03, #4
0afcc     0B 17 02 FB | 	rdlong	arg03, arg03
0afd0     01 00 00 FF 
0afd4     00 16 0E F2 | 	cmp	arg03, ##512 wz
0afd8     35 00 00 FF 
0afdc     0C E4 85 F1 | 	sub	objptr, ##27148
0afe0     CC 02 90 5D |  if_ne	jmp	#LR__0935
0afe4     37 00 00 FF 
0afe8     44 E4 05 F1 | 	add	objptr, ##28228
0afec     F2 16 02 FB | 	rdlong	arg03, objptr
0aff0     01 16 06 F1 | 	add	arg03, #1
0aff4     03 16 66 F0 | 	shl	arg03, #3
0aff8     02 00 00 FF 
0affc     38 E4 85 F1 | 	sub	objptr, ##1080
0b000     F2 16 02 F1 | 	add	arg03, objptr
0b004     04 16 06 F1 | 	add	arg03, #4
0b008     0B 17 02 FB | 	rdlong	arg03, arg03
0b00c     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b010     35 00 00 FF 
0b014     0C E4 85 F1 | 	sub	objptr, ##27148
0b018     94 02 90 5D |  if_ne	jmp	#LR__0935
0b01c     37 00 00 FF 
0b020     44 E4 05 F1 | 	add	objptr, ##28228
0b024     F2 16 02 FB | 	rdlong	arg03, objptr
0b028     03 16 66 F0 | 	shl	arg03, #3
0b02c     02 00 00 FF 
0b030     38 E4 85 F1 | 	sub	objptr, ##1080
0b034     F2 16 02 F1 | 	add	arg03, objptr
0b038     0B 13 02 FB | 	rdlong	arg01, arg03
0b03c     00 14 06 F6 | 	mov	arg02, #0
0b040     35 00 00 FF 
0b044     0C E4 85 F1 | 	sub	objptr, ##27148
0b048     A0 ED B1 FD | 	call	#__system____builtin_atoi
0b04c     04 4E 05 F1 | 	add	fp, #4
0b050     A7 FA 61 FC | 	wrlong	result1, fp
0b054     4A 00 00 FF 
0b058     7C E4 05 F1 | 	add	objptr, ##38012
0b05c     F2 26 02 FB | 	rdlong	local01, objptr
0b060     13 29 02 F6 | 	mov	local02, local01
0b064     01 28 66 F0 | 	shl	local02, #1
0b068     13 29 02 F1 | 	add	local02, local01
0b06c     02 28 66 F0 | 	shl	local02, #2
0b070     03 00 00 FF 
0b074     00 E4 85 F1 | 	sub	objptr, ##1536
0b078     F2 28 02 F1 | 	add	local02, objptr
0b07c     08 28 06 F1 | 	add	local02, #8
0b080     14 9D 68 FC | 	wrlong	#78, local02
0b084     03 00 00 FF 
0b088     0C E4 05 F1 | 	add	objptr, ##1548
0b08c     F2 2A 02 FB | 	rdlong	local03, objptr
0b090     4A 00 00 FF 
0b094     88 E4 85 F1 | 	sub	objptr, ##38024
0b098     04 4E 05 F1 | 	add	fp, #4
0b09c     A7 2A 62 FC | 	wrlong	local03, fp
0b0a0     08 4E 85 F1 | 	sub	fp, #8
0b0a4                 | '   gotoline=val%(lparts(ct).part$) 
0b0a4                 | '   compiledline(lineptr).result_type=token_fast_goto
0b0a4                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b0a4                 | '   do
0b0a4                 | LR__0930
0b0a4     10 4E 05 F1 | 	add	fp, #16
0b0a8     A7 12 02 F6 | 	mov	arg01, fp
0b0ac     08 4E 85 F1 | 	sub	fp, #8
0b0b0     A7 14 02 FB | 	rdlong	arg02, fp
0b0b4     08 4E 85 F1 | 	sub	fp, #8
0b0b8     18 16 06 F6 | 	mov	arg03, #24
0b0bc     0B 00 00 FF 
0b0c0     CC E4 05 F1 | 	add	objptr, ##5836
0b0c4     A8 AB B1 FD | 	call	#_psram_spin2_read1
0b0c8     0B 00 00 FF 
0b0cc     CC E4 85 F1 | 	sub	objptr, ##5836
0b0d0                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b0d0                 | '     if gotoheader(0)<>$FFFFFFFF then
0b0d0     10 4E 05 F1 | 	add	fp, #16
0b0d4     A7 2A 02 FB | 	rdlong	local03, fp
0b0d8     10 4E 85 F1 | 	sub	fp, #16
0b0dc     FF FF 7F FF 
0b0e0     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b0e4     24 00 90 AD |  if_e	jmp	#LR__0931
0b0e8     08 4E 05 F1 | 	add	fp, #8
0b0ec     A7 2A 02 FB | 	rdlong	local03, fp
0b0f0     04 4E 05 F1 | 	add	fp, #4
0b0f4     A7 2A 62 FC | 	wrlong	local03, fp
0b0f8     18 4E 05 F1 | 	add	fp, #24
0b0fc     A7 2A 02 FB | 	rdlong	local03, fp
0b100     1C 4E 85 F1 | 	sub	fp, #28
0b104     A7 2A 62 FC | 	wrlong	local03, fp
0b108     08 4E 85 F1 | 	sub	fp, #8
0b10c                 | LR__0931
0b10c     24 4E 05 F1 | 	add	fp, #36
0b110     A7 2A 02 FB | 	rdlong	local03, fp
0b114     24 4E 85 F1 | 	sub	fp, #36
0b118     FF FF 3F FF 
0b11c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b120     10 4E 05 51 |  if_ne	add	fp, #16
0b124     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b128     10 4E 85 51 |  if_ne	sub	fp, #16
0b12c     FF FF 7F 5F 
0b130     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b134     1C 00 90 AD |  if_e	jmp	#LR__0932
0b138     10 4E 05 F1 | 	add	fp, #16
0b13c     A7 2A 02 FB | 	rdlong	local03, fp
0b140     0C 4E 85 F1 | 	sub	fp, #12
0b144     A7 28 02 FB | 	rdlong	local02, fp
0b148     04 4E 85 F1 | 	sub	fp, #4
0b14c     14 2B 0A F2 | 	cmp	local03, local02 wz
0b150     50 FF 9F 5D |  if_ne	jmp	#LR__0930
0b154                 | LR__0932
0b154                 | '   if gotoheader(0)=gotoline then
0b154     10 4E 05 F1 | 	add	fp, #16
0b158     A7 2A 02 FB | 	rdlong	local03, fp
0b15c     0C 4E 85 F1 | 	sub	fp, #12
0b160     A7 26 02 FB | 	rdlong	local01, fp
0b164     04 4E 85 F1 | 	sub	fp, #4
0b168     13 2B 0A F2 | 	cmp	local03, local01 wz
0b16c     7C 00 90 5D |  if_ne	jmp	#LR__0933
0b170     4A 00 00 FF 
0b174     7C E4 05 F1 | 	add	objptr, ##38012
0b178     F2 26 02 FB | 	rdlong	local01, objptr
0b17c     13 29 02 F6 | 	mov	local02, local01
0b180     01 28 66 F0 | 	shl	local02, #1
0b184     13 29 02 F1 | 	add	local02, local01
0b188     02 28 66 F0 | 	shl	local02, #2
0b18c     03 00 00 FF 
0b190     00 E4 85 F1 | 	sub	objptr, ##1536
0b194     F2 28 02 F1 | 	add	local02, objptr
0b198     0C 4E 05 F1 | 	add	fp, #12
0b19c     A7 2A 02 FB | 	rdlong	local03, fp
0b1a0     14 2B 62 FC | 	wrlong	local03, local02
0b1a4     03 00 00 FF 
0b1a8     00 E4 05 F1 | 	add	objptr, ##1536
0b1ac     F2 26 02 FB | 	rdlong	local01, objptr
0b1b0     13 29 02 F6 | 	mov	local02, local01
0b1b4     01 28 66 F0 | 	shl	local02, #1
0b1b8     13 29 02 F1 | 	add	local02, local01
0b1bc     02 28 66 F0 | 	shl	local02, #2
0b1c0     03 00 00 FF 
0b1c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b1c8     F2 28 02 F1 | 	add	local02, objptr
0b1cc     08 4E 85 F1 | 	sub	fp, #8
0b1d0     A7 2A 02 FB | 	rdlong	local03, fp
0b1d4     04 4E 85 F1 | 	sub	fp, #4
0b1d8     04 28 06 F1 | 	add	local02, #4
0b1dc     14 2B 62 FC | 	wrlong	local03, local02
0b1e0     47 00 00 FF 
0b1e4     7C E4 85 F1 | 	sub	objptr, ##36476
0b1e8     A4 00 90 FD | 	jmp	#LR__0934
0b1ec                 | LR__0933
0b1ec     4A 00 00 FF 
0b1f0     7C E4 05 F1 | 	add	objptr, ##38012
0b1f4     F2 26 02 FB | 	rdlong	local01, objptr
0b1f8     13 29 02 F6 | 	mov	local02, local01
0b1fc     01 28 66 F0 | 	shl	local02, #1
0b200     13 29 02 F1 | 	add	local02, local01
0b204     02 28 66 F0 | 	shl	local02, #2
0b208     03 00 00 FF 
0b20c     00 E4 85 F1 | 	sub	objptr, ##1536
0b210     F2 28 02 F1 | 	add	local02, objptr
0b214     00 00 C0 FF 
0b218     14 01 68 FC | 	wrlong	##-2147483648, local02
0b21c     03 00 00 FF 
0b220     00 E4 05 F1 | 	add	objptr, ##1536
0b224     F2 26 02 FB | 	rdlong	local01, objptr
0b228     13 29 02 F6 | 	mov	local02, local01
0b22c     01 28 66 F0 | 	shl	local02, #1
0b230     13 29 02 F1 | 	add	local02, local01
0b234     02 28 66 F0 | 	shl	local02, #2
0b238     03 00 00 FF 
0b23c     00 E4 85 F1 | 	sub	objptr, ##1536
0b240     F2 28 02 F1 | 	add	local02, objptr
0b244     04 4E 05 F1 | 	add	fp, #4
0b248     A7 2A 02 FB | 	rdlong	local03, fp
0b24c     04 4E 85 F1 | 	sub	fp, #4
0b250     04 28 06 F1 | 	add	local02, #4
0b254     14 2B 62 FC | 	wrlong	local03, local02
0b258     03 00 00 FF 
0b25c     00 E4 05 F1 | 	add	objptr, ##1536
0b260     F2 26 02 FB | 	rdlong	local01, objptr
0b264     13 29 02 F6 | 	mov	local02, local01
0b268     01 28 66 F0 | 	shl	local02, #1
0b26c     13 29 02 F1 | 	add	local02, local01
0b270     02 28 66 F0 | 	shl	local02, #2
0b274     03 00 00 FF 
0b278     00 E4 85 F1 | 	sub	objptr, ##1536
0b27c     F2 28 02 F1 | 	add	local02, objptr
0b280     08 28 06 F1 | 	add	local02, #8
0b284     14 A7 68 FC | 	wrlong	#83, local02
0b288     47 00 00 FF 
0b28c     7C E4 85 F1 | 	sub	objptr, ##36476
0b290                 | LR__0934
0b290     4A 00 00 FF 
0b294     7C E4 05 F1 | 	add	objptr, ##38012
0b298     F2 2A 02 FB | 	rdlong	local03, objptr
0b29c     01 2A 06 F1 | 	add	local03, #1
0b2a0     F2 2A 62 FC | 	wrlong	local03, objptr
0b2a4     4A 00 00 FF 
0b2a8     7C E4 85 F1 | 	sub	objptr, ##38012
0b2ac     D0 00 90 FD | 	jmp	#LR__0936
0b2b0                 | LR__0935
0b2b0     98 0A B0 FD | 	call	#_expr
0b2b4     30 4E 05 F1 | 	add	fp, #48
0b2b8     A7 9E 68 FC | 	wrlong	#79, fp
0b2bc     08 4E 85 F1 | 	sub	fp, #8
0b2c0     A7 00 68 FC | 	wrlong	#0, fp
0b2c4     04 4E 05 F1 | 	add	fp, #4
0b2c8     A7 2A 02 FB | 	rdlong	local03, fp
0b2cc     04 4E 05 F1 | 	add	fp, #4
0b2d0     A7 26 02 FB | 	rdlong	local01, fp
0b2d4     30 4E 85 F1 | 	sub	fp, #48
0b2d8     4A 00 00 FF 
0b2dc     7C E4 05 F1 | 	add	objptr, ##38012
0b2e0     F2 28 02 FB | 	rdlong	local02, objptr
0b2e4     14 17 02 F6 | 	mov	arg03, local02
0b2e8     01 16 66 F0 | 	shl	arg03, #1
0b2ec     14 17 02 F1 | 	add	arg03, local02
0b2f0     02 16 66 F0 | 	shl	arg03, #2
0b2f4     03 00 00 FF 
0b2f8     00 E4 85 F1 | 	sub	objptr, ##1536
0b2fc     F2 16 02 F1 | 	add	arg03, objptr
0b300     0B 01 68 FC | 	wrlong	#0, arg03
0b304     03 00 00 FF 
0b308     00 E4 05 F1 | 	add	objptr, ##1536
0b30c     F2 28 02 FB | 	rdlong	local02, objptr
0b310     14 17 02 F6 | 	mov	arg03, local02
0b314     01 16 66 F0 | 	shl	arg03, #1
0b318     14 17 02 F1 | 	add	arg03, local02
0b31c     02 16 66 F0 | 	shl	arg03, #2
0b320     03 00 00 FF 
0b324     00 E4 85 F1 | 	sub	objptr, ##1536
0b328     F2 16 02 F1 | 	add	arg03, objptr
0b32c     04 16 06 F1 | 	add	arg03, #4
0b330     0B 2B 62 FC | 	wrlong	local03, arg03
0b334     03 00 00 FF 
0b338     00 E4 05 F1 | 	add	objptr, ##1536
0b33c     F2 2A 02 FB | 	rdlong	local03, objptr
0b340     15 29 02 F6 | 	mov	local02, local03
0b344     01 28 66 F0 | 	shl	local02, #1
0b348     15 29 02 F1 | 	add	local02, local03
0b34c     02 28 66 F0 | 	shl	local02, #2
0b350     03 00 00 FF 
0b354     00 E4 85 F1 | 	sub	objptr, ##1536
0b358     F2 28 02 F1 | 	add	local02, objptr
0b35c     08 28 06 F1 | 	add	local02, #8
0b360     14 27 62 FC | 	wrlong	local01, local02
0b364     03 00 00 FF 
0b368     00 E4 05 F1 | 	add	objptr, ##1536
0b36c     F2 2A 02 FB | 	rdlong	local03, objptr
0b370     01 2A 06 F1 | 	add	local03, #1
0b374     F2 2A 62 FC | 	wrlong	local03, objptr
0b378     4A 00 00 FF 
0b37c     7C E4 85 F1 | 	sub	objptr, ##38012
0b380                 | LR__0936
0b380                 | ' return 0
0b380     00 FA 05 F6 | 	mov	result1, #0
0b384     A7 F0 03 F6 | 	mov	ptra, fp
0b388     B2 00 A0 FD | 	call	#popregs_
0b38c                 | _compile_goto_ret
0b38c     2D 00 64 FD | 	ret
0b390                 | 
0b390                 | ' 
0b390                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b390                 | ' 
0b390                 | ' function compile_on() as ulong
0b390                 | _compile_on
0b390     04 4A 05 F6 | 	mov	COUNT_, #4
0b394     A8 00 A0 FD | 	call	#pushregs_
0b398     B0 09 B0 FD | 	call	#_expr
0b39c     00 26 06 F6 | 	mov	local01, #0
0b3a0     4A 00 00 FF 
0b3a4     7C E4 05 F1 | 	add	objptr, ##38012
0b3a8     F2 14 02 FB | 	rdlong	arg02, objptr
0b3ac     0A 13 02 F6 | 	mov	arg01, arg02
0b3b0     01 12 66 F0 | 	shl	arg01, #1
0b3b4     0A 13 02 F1 | 	add	arg01, arg02
0b3b8     02 12 66 F0 | 	shl	arg01, #2
0b3bc     03 00 00 FF 
0b3c0     00 E4 85 F1 | 	sub	objptr, ##1536
0b3c4     F2 12 02 F1 | 	add	arg01, objptr
0b3c8     08 12 06 F1 | 	add	arg01, #8
0b3cc     09 83 69 FC | 	wrlong	#193, arg01
0b3d0     03 00 00 FF 
0b3d4     00 E4 05 F1 | 	add	objptr, ##1536
0b3d8     F2 14 02 FB | 	rdlong	arg02, objptr
0b3dc     0A 29 02 F6 | 	mov	local02, arg02
0b3e0     01 14 06 F1 | 	add	arg02, #1
0b3e4     F2 14 62 FC | 	wrlong	arg02, objptr
0b3e8                 | ' expr()
0b3e8                 | ' 'print lparts(ct).part$ 'ok
0b3e8                 | ' numpar=0
0b3e8                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b3e8                 | ' if lparts(ct).part$="goto" then
0b3e8     13 00 00 FF 
0b3ec     38 E4 85 F1 | 	sub	objptr, ##9784
0b3f0     F2 14 02 FB | 	rdlong	arg02, objptr
0b3f4     03 14 66 F0 | 	shl	arg02, #3
0b3f8     02 00 00 FF 
0b3fc     38 E4 85 F1 | 	sub	objptr, ##1080
0b400     F2 14 02 F1 | 	add	arg02, objptr
0b404     0A 13 02 FB | 	rdlong	arg01, arg02
0b408     B5 01 00 FF 
0b40c     67 15 06 F6 | 	mov	arg02, ##@LR__5826
0b410     35 00 00 FF 
0b414     0C E4 85 F1 | 	sub	objptr, ##27148
0b418     04 B5 B1 FD | 	call	#__system___string_cmp
0b41c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b420     14 02 90 5D |  if_ne	jmp	#LR__0945
0b424     37 00 00 FF 
0b428     44 E4 05 F1 | 	add	objptr, ##28228
0b42c     F2 2A 02 FB | 	rdlong	local03, objptr
0b430     37 00 00 FF 
0b434     44 E4 85 F1 | 	sub	objptr, ##28228
0b438     01 2A 06 F1 | 	add	local03, #1
0b43c                 | '   i=ct+1
0b43c                 | '   do
0b43c                 | LR__0940
0b43c                 | '     if lparts(i).token=token_decimal then
0b43c     15 FB 01 F6 | 	mov	result1, local03
0b440     03 FA 65 F0 | 	shl	result1, #3
0b444     35 00 00 FF 
0b448     0C E4 05 F1 | 	add	objptr, ##27148
0b44c     F2 FA 01 F1 | 	add	result1, objptr
0b450     04 FA 05 F1 | 	add	result1, #4
0b454     FD FA 01 FB | 	rdlong	result1, result1
0b458     01 00 00 FF 
0b45c     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b460     35 00 00 FF 
0b464     0C E4 85 F1 | 	sub	objptr, ##27148
0b468     DC 00 90 5D |  if_ne	jmp	#LR__0941
0b46c     4A 00 00 FF 
0b470     7C E4 05 F1 | 	add	objptr, ##38012
0b474     F2 FA 01 FB | 	rdlong	result1, objptr
0b478     FD 14 02 F6 | 	mov	arg02, result1
0b47c     01 14 66 F0 | 	shl	arg02, #1
0b480     FD 14 02 F1 | 	add	arg02, result1
0b484     02 14 66 F0 | 	shl	arg02, #2
0b488     03 00 00 FF 
0b48c     00 E4 85 F1 | 	sub	objptr, ##1536
0b490     F2 14 02 F1 | 	add	arg02, objptr
0b494     00 00 C0 FF 
0b498     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b49c     03 00 00 FF 
0b4a0     00 E4 05 F1 | 	add	objptr, ##1536
0b4a4     F2 14 02 FB | 	rdlong	arg02, objptr
0b4a8     0A 2D 02 F6 | 	mov	local04, arg02
0b4ac     01 2C 66 F0 | 	shl	local04, #1
0b4b0     0A 2D 02 F1 | 	add	local04, arg02
0b4b4     02 2C 66 F0 | 	shl	local04, #2
0b4b8     03 00 00 FF 
0b4bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c0     F2 2C 02 F1 | 	add	local04, objptr
0b4c4     15 15 02 F6 | 	mov	arg02, local03
0b4c8     03 14 66 F0 | 	shl	arg02, #3
0b4cc     12 00 00 FF 
0b4d0     70 E4 85 F1 | 	sub	objptr, ##9328
0b4d4     F2 14 02 F1 | 	add	arg02, objptr
0b4d8     0A 13 02 FB | 	rdlong	arg01, arg02
0b4dc     00 14 06 F6 | 	mov	arg02, #0
0b4e0     35 00 00 FF 
0b4e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b4e8     00 E9 B1 FD | 	call	#__system____builtin_atoi
0b4ec     04 2C 06 F1 | 	add	local04, #4
0b4f0     16 FB 61 FC | 	wrlong	result1, local04
0b4f4     4A 00 00 FF 
0b4f8     7C E4 05 F1 | 	add	objptr, ##38012
0b4fc     F2 14 02 FB | 	rdlong	arg02, objptr
0b500     0A 2D 02 F6 | 	mov	local04, arg02
0b504     01 2C 66 F0 | 	shl	local04, #1
0b508     0A 2D 02 F1 | 	add	local04, arg02
0b50c     02 2C 66 F0 | 	shl	local04, #2
0b510     03 00 00 FF 
0b514     00 E4 85 F1 | 	sub	objptr, ##1536
0b518     F2 2C 02 F1 | 	add	local04, objptr
0b51c     08 2C 06 F1 | 	add	local04, #8
0b520     16 A7 68 FC | 	wrlong	#83, local04
0b524     03 00 00 FF 
0b528     00 E4 05 F1 | 	add	objptr, ##1536
0b52c     F2 2C 02 FB | 	rdlong	local04, objptr
0b530     01 2C 06 F1 | 	add	local04, #1
0b534     F2 2C 62 FC | 	wrlong	local04, objptr
0b538     4A 00 00 FF 
0b53c     7C E4 85 F1 | 	sub	objptr, ##38012
0b540     01 26 06 F1 | 	add	local01, #1
0b544     08 00 90 FD | 	jmp	#LR__0942
0b548                 | LR__0941
0b548                 | '       return 17
0b548     11 FA 05 F6 | 	mov	result1, #17
0b54c     5C 04 90 FD | 	jmp	#LR__0955
0b550                 | LR__0942
0b550     01 2A 06 F1 | 	add	local03, #1
0b554                 | '     i+=1
0b554                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b554     15 2D 02 F6 | 	mov	local04, local03
0b558     03 2C 66 F0 | 	shl	local04, #3
0b55c     35 00 00 FF 
0b560     0C E4 05 F1 | 	add	objptr, ##27148
0b564     F2 2C 02 F1 | 	add	local04, objptr
0b568     04 2C 06 F1 | 	add	local04, #4
0b56c     16 2D 02 FB | 	rdlong	local04, local04
0b570     11 2C 0E F2 | 	cmp	local04, #17 wz
0b574     35 00 00 FF 
0b578     0C E4 85 F1 | 	sub	objptr, ##27148
0b57c     30 00 90 AD |  if_e	jmp	#LR__0943
0b580     15 2D 02 F6 | 	mov	local04, local03
0b584     03 2C 66 F0 | 	shl	local04, #3
0b588     35 00 00 FF 
0b58c     0C E4 05 F1 | 	add	objptr, ##27148
0b590     F2 2C 02 F1 | 	add	local04, objptr
0b594     04 2C 06 F1 | 	add	local04, #4
0b598     16 2D 02 FB | 	rdlong	local04, local04
0b59c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b5a0     35 00 00 FF 
0b5a4     0C E4 85 F1 | 	sub	objptr, ##27148
0b5a8     15 FA 05 56 |  if_ne	mov	result1, #21
0b5ac     FC 03 90 5D |  if_ne	jmp	#LR__0955
0b5b0                 | LR__0943
0b5b0                 | '     if lparts(i).token=token_end then exit loop
0b5b0     15 2D 02 F6 | 	mov	local04, local03
0b5b4     03 2C 66 F0 | 	shl	local04, #3
0b5b8     35 00 00 FF 
0b5bc     0C E4 05 F1 | 	add	objptr, ##27148
0b5c0     F2 2C 02 F1 | 	add	local04, objptr
0b5c4     04 2C 06 F1 | 	add	local04, #4
0b5c8     16 2D 02 FB | 	rdlong	local04, local04
0b5cc     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b5d0     35 00 00 FF 
0b5d4     0C E4 85 F1 | 	sub	objptr, ##27148
0b5d8     30 00 90 AD |  if_e	jmp	#LR__0944
0b5dc     01 2A 06 F1 | 	add	local03, #1
0b5e0     15 2D 02 F6 | 	mov	local04, local03
0b5e4     03 2C 66 F0 | 	shl	local04, #3
0b5e8     35 00 00 FF 
0b5ec     0C E4 05 F1 | 	add	objptr, ##27148
0b5f0     F2 2C 02 F1 | 	add	local04, objptr
0b5f4     04 2C 06 F1 | 	add	local04, #4
0b5f8     16 2D 02 FB | 	rdlong	local04, local04
0b5fc     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b600     35 00 00 FF 
0b604     0C E4 85 F1 | 	sub	objptr, ##27148
0b608     30 FE 9F 5D |  if_ne	jmp	#LR__0940
0b60c                 | LR__0944
0b60c     14 2D 02 F6 | 	mov	local04, local02
0b610     01 2C 66 F0 | 	shl	local04, #1
0b614     14 2D 02 F1 | 	add	local04, local02
0b618     02 2C 66 F0 | 	shl	local04, #2
0b61c     47 00 00 FF 
0b620     7C E4 05 F1 | 	add	objptr, ##36476
0b624     F2 2C 02 F1 | 	add	local04, objptr
0b628     04 2C 06 F1 | 	add	local04, #4
0b62c     16 03 68 FC | 	wrlong	#1, local04
0b630     47 00 00 FF 
0b634     7C E4 85 F1 | 	sub	objptr, ##36476
0b638                 | LR__0945
0b638                 | ' 
0b638                 | ' if lparts(ct).part$="gosub" then
0b638     37 00 00 FF 
0b63c     44 E4 05 F1 | 	add	objptr, ##28228
0b640     F2 2A 02 FB | 	rdlong	local03, objptr
0b644     03 2A 66 F0 | 	shl	local03, #3
0b648     02 00 00 FF 
0b64c     38 E4 85 F1 | 	sub	objptr, ##1080
0b650     F2 2A 02 F1 | 	add	local03, objptr
0b654     15 13 02 FB | 	rdlong	arg01, local03
0b658     B5 01 00 FF 
0b65c     6C 15 06 F6 | 	mov	arg02, ##@LR__5827
0b660     35 00 00 FF 
0b664     0C E4 85 F1 | 	sub	objptr, ##27148
0b668     B4 B2 B1 FD | 	call	#__system___string_cmp
0b66c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b670     84 02 90 5D |  if_ne	jmp	#LR__0951
0b674     37 00 00 FF 
0b678     44 E4 05 F1 | 	add	objptr, ##28228
0b67c     F2 2A 02 FB | 	rdlong	local03, objptr
0b680     37 00 00 FF 
0b684     44 E4 85 F1 | 	sub	objptr, ##28228
0b688     01 2A 06 F1 | 	add	local03, #1
0b68c                 | '   i=ct+1
0b68c                 | '   do
0b68c                 | LR__0946
0b68c                 | '     if lparts(i).token=token_decimal then
0b68c     15 2D 02 F6 | 	mov	local04, local03
0b690     03 2C 66 F0 | 	shl	local04, #3
0b694     35 00 00 FF 
0b698     0C E4 05 F1 | 	add	objptr, ##27148
0b69c     F2 2C 02 F1 | 	add	local04, objptr
0b6a0     04 2C 06 F1 | 	add	local04, #4
0b6a4     16 2D 02 FB | 	rdlong	local04, local04
0b6a8     01 00 00 FF 
0b6ac     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b6b0     35 00 00 FF 
0b6b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b6b8     4C 01 90 5D |  if_ne	jmp	#LR__0947
0b6bc     4A 00 00 FF 
0b6c0     7C E4 05 F1 | 	add	objptr, ##38012
0b6c4     F2 FA 01 FB | 	rdlong	result1, objptr
0b6c8     FD 2C 02 F6 | 	mov	local04, result1
0b6cc     01 2C 66 F0 | 	shl	local04, #1
0b6d0     FD 2C 02 F1 | 	add	local04, result1
0b6d4     02 2C 66 F0 | 	shl	local04, #2
0b6d8     03 00 00 FF 
0b6dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b6e0     F2 2C 02 F1 | 	add	local04, objptr
0b6e4     08 2C 06 F1 | 	add	local04, #8
0b6e8     16 53 69 FC | 	wrlong	#169, local04
0b6ec     03 00 00 FF 
0b6f0     00 E4 05 F1 | 	add	objptr, ##1536
0b6f4     F2 FA 01 FB | 	rdlong	result1, objptr
0b6f8     01 FA 05 F1 | 	add	result1, #1
0b6fc     F2 FA 61 FC | 	wrlong	result1, objptr
0b700     FD 2C 02 F6 | 	mov	local04, result1
0b704     01 2C 66 F0 | 	shl	local04, #1
0b708     FD 2C 02 F1 | 	add	local04, result1
0b70c     02 2C 66 F0 | 	shl	local04, #2
0b710     03 00 00 FF 
0b714     00 E4 85 F1 | 	sub	objptr, ##1536
0b718     F2 2C 02 F1 | 	add	local04, objptr
0b71c     00 00 C0 FF 
0b720     16 01 68 FC | 	wrlong	##-2147483648, local04
0b724     03 00 00 FF 
0b728     00 E4 05 F1 | 	add	objptr, ##1536
0b72c     F2 FA 01 FB | 	rdlong	result1, objptr
0b730     FD 2C 02 F6 | 	mov	local04, result1
0b734     01 2C 66 F0 | 	shl	local04, #1
0b738     FD 2C 02 F1 | 	add	local04, result1
0b73c     02 2C 66 F0 | 	shl	local04, #2
0b740     03 00 00 FF 
0b744     00 E4 85 F1 | 	sub	objptr, ##1536
0b748     F2 2C 02 F1 | 	add	local04, objptr
0b74c     15 13 02 F6 | 	mov	arg01, local03
0b750     03 12 66 F0 | 	shl	arg01, #3
0b754     12 00 00 FF 
0b758     70 E4 85 F1 | 	sub	objptr, ##9328
0b75c     F2 12 02 F1 | 	add	arg01, objptr
0b760     09 13 02 FB | 	rdlong	arg01, arg01
0b764     00 14 06 F6 | 	mov	arg02, #0
0b768     35 00 00 FF 
0b76c     0C E4 85 F1 | 	sub	objptr, ##27148
0b770     78 E6 B1 FD | 	call	#__system____builtin_atoi
0b774     04 2C 06 F1 | 	add	local04, #4
0b778     16 FB 61 FC | 	wrlong	result1, local04
0b77c     4A 00 00 FF 
0b780     7C E4 05 F1 | 	add	objptr, ##38012
0b784     F2 12 02 FB | 	rdlong	arg01, objptr
0b788     09 2D 02 F6 | 	mov	local04, arg01
0b78c     01 2C 66 F0 | 	shl	local04, #1
0b790     09 2D 02 F1 | 	add	local04, arg01
0b794     02 2C 66 F0 | 	shl	local04, #2
0b798     03 00 00 FF 
0b79c     00 E4 85 F1 | 	sub	objptr, ##1536
0b7a0     F2 2C 02 F1 | 	add	local04, objptr
0b7a4     08 2C 06 F1 | 	add	local04, #8
0b7a8     16 A7 68 FC | 	wrlong	#83, local04
0b7ac     03 00 00 FF 
0b7b0     00 E4 05 F1 | 	add	objptr, ##1536
0b7b4     F2 12 02 FB | 	rdlong	arg01, objptr
0b7b8     01 12 06 F1 | 	add	arg01, #1
0b7bc     F2 12 62 FC | 	wrlong	arg01, objptr
0b7c0     01 26 06 F1 | 	add	local01, #1
0b7c4     09 2D 02 F6 | 	mov	local04, arg01
0b7c8     01 2C 66 F0 | 	shl	local04, #1
0b7cc     09 2D 02 F1 | 	add	local04, arg01
0b7d0     02 2C 66 F0 | 	shl	local04, #2
0b7d4     03 00 00 FF 
0b7d8     00 E4 85 F1 | 	sub	objptr, ##1536
0b7dc     F2 2C 02 F1 | 	add	local04, objptr
0b7e0     08 2C 06 F1 | 	add	local04, #8
0b7e4     16 5B 68 FC | 	wrlong	#45, local04
0b7e8     03 00 00 FF 
0b7ec     00 E4 05 F1 | 	add	objptr, ##1536
0b7f0     F2 2C 02 FB | 	rdlong	local04, objptr
0b7f4     01 2C 06 F1 | 	add	local04, #1
0b7f8     F2 2C 62 FC | 	wrlong	local04, objptr
0b7fc     4A 00 00 FF 
0b800     7C E4 85 F1 | 	sub	objptr, ##38012
0b804     08 00 90 FD | 	jmp	#LR__0948
0b808                 | LR__0947
0b808                 | '       return 17
0b808     11 FA 05 F6 | 	mov	result1, #17
0b80c     9C 01 90 FD | 	jmp	#LR__0955
0b810                 | LR__0948
0b810     01 2A 06 F1 | 	add	local03, #1
0b814                 | '     i+=1
0b814                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b814     15 2D 02 F6 | 	mov	local04, local03
0b818     03 2C 66 F0 | 	shl	local04, #3
0b81c     35 00 00 FF 
0b820     0C E4 05 F1 | 	add	objptr, ##27148
0b824     F2 2C 02 F1 | 	add	local04, objptr
0b828     04 2C 06 F1 | 	add	local04, #4
0b82c     16 2D 02 FB | 	rdlong	local04, local04
0b830     11 2C 0E F2 | 	cmp	local04, #17 wz
0b834     35 00 00 FF 
0b838     0C E4 85 F1 | 	sub	objptr, ##27148
0b83c     30 00 90 AD |  if_e	jmp	#LR__0949
0b840     15 2D 02 F6 | 	mov	local04, local03
0b844     03 2C 66 F0 | 	shl	local04, #3
0b848     35 00 00 FF 
0b84c     0C E4 05 F1 | 	add	objptr, ##27148
0b850     F2 2C 02 F1 | 	add	local04, objptr
0b854     04 2C 06 F1 | 	add	local04, #4
0b858     16 2D 02 FB | 	rdlong	local04, local04
0b85c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b860     35 00 00 FF 
0b864     0C E4 85 F1 | 	sub	objptr, ##27148
0b868     15 FA 05 56 |  if_ne	mov	result1, #21
0b86c     3C 01 90 5D |  if_ne	jmp	#LR__0955
0b870                 | LR__0949
0b870                 | '     if lparts(i).token=token_end then exit loop
0b870     15 2D 02 F6 | 	mov	local04, local03
0b874     03 2C 66 F0 | 	shl	local04, #3
0b878     35 00 00 FF 
0b87c     0C E4 05 F1 | 	add	objptr, ##27148
0b880     F2 2C 02 F1 | 	add	local04, objptr
0b884     04 2C 06 F1 | 	add	local04, #4
0b888     16 2D 02 FB | 	rdlong	local04, local04
0b88c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b890     35 00 00 FF 
0b894     0C E4 85 F1 | 	sub	objptr, ##27148
0b898     30 00 90 AD |  if_e	jmp	#LR__0950
0b89c     01 2A 06 F1 | 	add	local03, #1
0b8a0     15 2D 02 F6 | 	mov	local04, local03
0b8a4     03 2C 66 F0 | 	shl	local04, #3
0b8a8     35 00 00 FF 
0b8ac     0C E4 05 F1 | 	add	objptr, ##27148
0b8b0     F2 2C 02 F1 | 	add	local04, objptr
0b8b4     04 2C 06 F1 | 	add	local04, #4
0b8b8     16 2D 02 FB | 	rdlong	local04, local04
0b8bc     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b8c0     35 00 00 FF 
0b8c4     0C E4 85 F1 | 	sub	objptr, ##27148
0b8c8     C0 FD 9F 5D |  if_ne	jmp	#LR__0946
0b8cc                 | LR__0950
0b8cc     14 2D 02 F6 | 	mov	local04, local02
0b8d0     01 2C 66 F0 | 	shl	local04, #1
0b8d4     14 2D 02 F1 | 	add	local04, local02
0b8d8     02 2C 66 F0 | 	shl	local04, #2
0b8dc     47 00 00 FF 
0b8e0     7C E4 05 F1 | 	add	objptr, ##36476
0b8e4     F2 2C 02 F1 | 	add	local04, objptr
0b8e8     04 2C 06 F1 | 	add	local04, #4
0b8ec     16 07 68 FC | 	wrlong	#3, local04
0b8f0     47 00 00 FF 
0b8f4     7C E4 85 F1 | 	sub	objptr, ##36476
0b8f8                 | LR__0951
0b8f8     14 2B 02 F6 | 	mov	local03, local02
0b8fc     01 2A 66 F0 | 	shl	local03, #1
0b900     14 2B 02 F1 | 	add	local03, local02
0b904     02 2A 66 F0 | 	shl	local03, #2
0b908     47 00 00 FF 
0b90c     7C E4 05 F1 | 	add	objptr, ##36476
0b910     F2 2A 02 F1 | 	add	local03, objptr
0b914     15 27 62 FC | 	wrlong	local01, local03
0b918                 | ' compiledline(onlineptr).result.uresult=numpar
0b918                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b918     03 00 00 FF 
0b91c     00 E4 05 F1 | 	add	objptr, ##1536
0b920     F2 2A 02 FB | 	rdlong	local03, objptr
0b924     4A 00 00 FF 
0b928     7C E4 85 F1 | 	sub	objptr, ##38012
0b92c     97 3C 48 FB | 	callpa	#(@LR__0954-@LR__0952)>>2,fcache_load_ptr_
0b930                 | LR__0952
0b930     15 2D 02 F6 | 	mov	local04, local03
0b934     01 2C 66 F0 | 	shl	local04, #1
0b938     15 2D 02 F1 | 	add	local04, local03
0b93c     02 2C 66 F0 | 	shl	local04, #2
0b940     47 00 00 FF 
0b944     7C E4 05 F1 | 	add	objptr, ##36476
0b948     F2 2C 02 F1 | 	add	local04, objptr
0b94c     08 2C 06 F1 | 	add	local04, #8
0b950     16 2D 02 FB | 	rdlong	local04, local04
0b954     2D 2C 0E F2 | 	cmp	local04, #45 wz
0b958     47 00 00 FF 
0b95c     7C E4 85 F1 | 	sub	objptr, ##36476
0b960     38 00 90 5D |  if_ne	jmp	#LR__0953
0b964     15 2D 02 F6 | 	mov	local04, local03
0b968     01 2C 66 F0 | 	shl	local04, #1
0b96c     15 2D 02 F1 | 	add	local04, local03
0b970     02 2C 66 F0 | 	shl	local04, #2
0b974     47 00 00 FF 
0b978     7C E4 05 F1 | 	add	objptr, ##36476
0b97c     F2 2C 02 F1 | 	add	local04, objptr
0b980     03 00 00 FF 
0b984     00 E4 05 F1 | 	add	objptr, ##1536
0b988     F2 26 02 FB | 	rdlong	local01, objptr
0b98c     4A 00 00 FF 
0b990     7C E4 85 F1 | 	sub	objptr, ##38012
0b994     02 26 86 F1 | 	sub	local01, #2
0b998     16 27 62 FC | 	wrlong	local01, local04
0b99c                 | LR__0953
0b99c     01 2A 86 F1 | 	sub	local03, #1
0b9a0     14 2B 52 F2 | 	cmps	local03, local02 wc
0b9a4     88 FF 9F 3D |  if_ae	jmp	#LR__0952
0b9a8                 | LR__0954
0b9a8                 | ' return 0
0b9a8     00 FA 05 F6 | 	mov	result1, #0
0b9ac                 | LR__0955
0b9ac     A7 F0 03 F6 | 	mov	ptra, fp
0b9b0     B2 00 A0 FD | 	call	#popregs_
0b9b4                 | _compile_on_ret
0b9b4     2D 00 64 FD | 	ret
0b9b8                 | 
0b9b8                 | ' 
0b9b8                 | ' '----- A helper for compile_input and compile_read
0b9b8                 | '  
0b9b8                 | ' function getaddr() as ulong
0b9b8                 | _getaddr
0b9b8     0B 4A 05 F6 | 	mov	COUNT_, #11
0b9bc     A8 00 A0 FD | 	call	#pushregs_
0b9c0     37 00 00 FF 
0b9c4     44 E4 05 F1 | 	add	objptr, ##28228
0b9c8     F2 2C 02 FB | 	rdlong	local04, objptr
0b9cc     03 2C 66 F0 | 	shl	local04, #3
0b9d0     02 00 00 FF 
0b9d4     38 E4 85 F1 | 	sub	objptr, ##1080
0b9d8     F2 2C 02 F1 | 	add	local04, objptr
0b9dc     16 2F 02 FB | 	rdlong	local05, local04
0b9e0     01 30 66 F6 | 	neg	local06, #1
0b9e4                 | ' 
0b9e4                 | ' varname$=lparts(ct).part$
0b9e4                 | ' j=-1
0b9e4                 | ' 
0b9e4                 | ' for i=0 to varnum-1
0b9e4     00 32 06 F6 | 	mov	local07, #0
0b9e8     04 E4 85 F1 | 	sub	objptr, #4
0b9ec     F2 34 02 FB | 	rdlong	local08, objptr
0b9f0     35 00 00 FF 
0b9f4     08 E4 85 F1 | 	sub	objptr, ##27144
0b9f8                 | LR__0960
0b9f8     1A 33 52 F2 | 	cmps	local07, local08 wc
0b9fc     38 00 90 3D |  if_ae	jmp	#LR__0961
0ba00                 | '   if variables(i).name=varname$ then j=i : exit
0ba00     19 2D 02 F6 | 	mov	local04, local07
0ba04     04 2C 66 F0 | 	shl	local04, #4
0ba08     14 00 00 FF 
0ba0c     F8 E5 05 F1 | 	add	objptr, ##10744
0ba10     F2 2C 02 F1 | 	add	local04, objptr
0ba14     16 13 02 FB | 	rdlong	arg01, local04
0ba18     17 15 02 F6 | 	mov	arg02, local05
0ba1c     14 00 00 FF 
0ba20     F8 E5 85 F1 | 	sub	objptr, ##10744
0ba24     F8 AE B1 FD | 	call	#__system___string_cmp
0ba28     00 FA 0D F2 | 	cmp	result1, #0 wz
0ba2c     19 31 02 A6 |  if_e	mov	local06, local07
0ba30     01 32 06 51 |  if_ne	add	local07, #1
0ba34     C0 FF 9F 5D |  if_ne	jmp	#LR__0960
0ba38                 | LR__0961
0ba38                 | ' if  j=-1 andalso varnum<maxvars then   
0ba38     FF FF 7F FF 
0ba3c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0ba40     A8 00 90 5D |  if_ne	jmp	#LR__0962
0ba44     35 00 00 FF 
0ba48     08 E4 05 F1 | 	add	objptr, ##27144
0ba4c     F2 34 02 FB | 	rdlong	local08, objptr
0ba50     35 00 00 FF 
0ba54     08 E4 85 F1 | 	sub	objptr, ##27144
0ba58     02 00 00 FF 
0ba5c     00 34 56 F2 | 	cmps	local08, ##1024 wc
0ba60     88 00 90 3D |  if_ae	jmp	#LR__0962
0ba64     35 00 00 FF 
0ba68     08 E4 05 F1 | 	add	objptr, ##27144
0ba6c     F2 2C 02 FB | 	rdlong	local04, objptr
0ba70     04 2C 66 F0 | 	shl	local04, #4
0ba74     20 00 00 FF 
0ba78     10 E4 85 F1 | 	sub	objptr, ##16400
0ba7c     F2 2C 02 F1 | 	add	local04, objptr
0ba80     16 2F 62 FC | 	wrlong	local05, local04
0ba84     20 00 00 FF 
0ba88     10 E4 05 F1 | 	add	objptr, ##16400
0ba8c     F2 2C 02 FB | 	rdlong	local04, objptr
0ba90     04 2C 66 F0 | 	shl	local04, #4
0ba94     20 00 00 FF 
0ba98     10 E4 85 F1 | 	sub	objptr, ##16400
0ba9c     F2 2C 02 F1 | 	add	local04, objptr
0baa0     04 2C 06 F1 | 	add	local04, #4
0baa4     16 01 68 FC | 	wrlong	#0, local04
0baa8     20 00 00 FF 
0baac     10 E4 05 F1 | 	add	objptr, ##16400
0bab0     F2 2C 02 FB | 	rdlong	local04, objptr
0bab4     04 2C 66 F0 | 	shl	local04, #4
0bab8     20 00 00 FF 
0babc     10 E4 85 F1 | 	sub	objptr, ##16400
0bac0     F2 2C 02 F1 | 	add	local04, objptr
0bac4     0C 2C 06 F1 | 	add	local04, #12
0bac8     16 39 68 FC | 	wrlong	#28, local04
0bacc     20 00 00 FF 
0bad0     10 E4 05 F1 | 	add	objptr, ##16400
0bad4     F2 34 02 FB | 	rdlong	local08, objptr
0bad8     1A 31 02 F6 | 	mov	local06, local08
0badc     01 34 06 F1 | 	add	local08, #1
0bae0     F2 34 62 FC | 	wrlong	local08, objptr
0bae4     35 00 00 FF 
0bae8     08 E4 85 F1 | 	sub	objptr, ##27144
0baec                 | LR__0962
0baec     00 34 06 F6 | 	mov	local08, #0
0baf0                 | ' numpar=0
0baf0                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0baf0     37 00 00 FF 
0baf4     44 E4 05 F1 | 	add	objptr, ##28228
0baf8     F2 2C 02 FB | 	rdlong	local04, objptr
0bafc     01 2C 06 F1 | 	add	local04, #1
0bb00     03 2C 66 F0 | 	shl	local04, #3
0bb04     02 00 00 FF 
0bb08     38 E4 85 F1 | 	sub	objptr, ##1080
0bb0c     F2 2C 02 F1 | 	add	local04, objptr
0bb10     04 2C 06 F1 | 	add	local04, #4
0bb14     16 33 02 FB | 	rdlong	local07, local04
0bb18     15 32 0E F2 | 	cmp	local07, #21 wz
0bb1c     35 00 00 FF 
0bb20     0C E4 85 F1 | 	sub	objptr, ##27148
0bb24     54 01 90 5D |  if_ne	jmp	#LR__0967
0bb28     37 00 00 FF 
0bb2c     44 E4 05 F1 | 	add	objptr, ##28228
0bb30     F2 36 02 FB | 	rdlong	local09, objptr
0bb34     01 36 06 F1 | 	add	local09, #1
0bb38     F2 36 62 FC | 	wrlong	local09, objptr
0bb3c     37 00 00 FF 
0bb40     44 E4 85 F1 | 	sub	objptr, ##28228
0bb44                 | '   ct+=1 											' omit this lpar, this is for expr list
0bb44                 | '   do
0bb44                 | LR__0963
0bb44     37 00 00 FF 
0bb48     44 E4 05 F1 | 	add	objptr, ##28228
0bb4c     F2 2C 02 FB | 	rdlong	local04, objptr
0bb50     01 2C 06 F1 | 	add	local04, #1
0bb54     F2 2C 62 FC | 	wrlong	local04, objptr
0bb58                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bb58                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bb58     03 2C 66 F0 | 	shl	local04, #3
0bb5c     02 00 00 FF 
0bb60     38 E4 85 F1 | 	sub	objptr, ##1080
0bb64     F2 2C 02 F1 | 	add	local04, objptr
0bb68     04 2C 06 F1 | 	add	local04, #4
0bb6c     16 37 02 FB | 	rdlong	local09, local04
0bb70     15 36 0E F2 | 	cmp	local09, #21 wz
0bb74     35 00 00 FF 
0bb78     0C E4 85 F1 | 	sub	objptr, ##27148
0bb7c     44 00 90 5D |  if_ne	jmp	#LR__0964
0bb80     37 00 00 FF 
0bb84     44 E4 05 F1 | 	add	objptr, ##28228
0bb88     F2 36 02 FB | 	rdlong	local09, objptr
0bb8c     01 36 06 F1 | 	add	local09, #1
0bb90     F2 36 62 FC | 	wrlong	local09, objptr
0bb94     37 00 00 FF 
0bb98     44 E4 85 F1 | 	sub	objptr, ##28228
0bb9c     AC 01 B0 FD | 	call	#_expr
0bba0     FD 38 02 F6 | 	mov	local10, result1
0bba4     37 00 00 FF 
0bba8     44 E4 05 F1 | 	add	objptr, ##28228
0bbac     F2 36 02 FB | 	rdlong	local09, objptr
0bbb0     01 36 06 F1 | 	add	local09, #1
0bbb4     F2 36 62 FC | 	wrlong	local09, objptr
0bbb8     37 00 00 FF 
0bbbc     44 E4 85 F1 | 	sub	objptr, ##28228
0bbc0     08 00 90 FD | 	jmp	#LR__0965
0bbc4                 | LR__0964
0bbc4     84 01 B0 FD | 	call	#_expr
0bbc8     FD 38 02 F6 | 	mov	local10, result1
0bbcc                 | LR__0965
0bbcc                 | '     if err>0 then return err
0bbcc     01 38 56 F2 | 	cmps	local10, #1 wc
0bbd0     1C FB 01 36 |  if_ae	mov	result1, local10
0bbd4     68 01 90 3D |  if_ae	jmp	#LR__0968
0bbd8     01 34 06 F1 | 	add	local08, #1
0bbdc     37 00 00 FF 
0bbe0     44 E4 05 F1 | 	add	objptr, ##28228
0bbe4     F2 2C 02 FB | 	rdlong	local04, objptr
0bbe8     03 2C 66 F0 | 	shl	local04, #3
0bbec     02 00 00 FF 
0bbf0     38 E4 85 F1 | 	sub	objptr, ##1080
0bbf4     F2 2C 02 F1 | 	add	local04, objptr
0bbf8     04 2C 06 F1 | 	add	local04, #4
0bbfc     16 39 02 FB | 	rdlong	local10, local04
0bc00     14 38 0E F2 | 	cmp	local10, #20 wz
0bc04     35 00 00 FF 
0bc08     0C E4 85 F1 | 	sub	objptr, ##27148
0bc0c     34 00 90 AD |  if_e	jmp	#LR__0966
0bc10     37 00 00 FF 
0bc14     44 E4 05 F1 | 	add	objptr, ##28228
0bc18     F2 38 02 FB | 	rdlong	local10, objptr
0bc1c     03 38 66 F0 | 	shl	local10, #3
0bc20     02 00 00 FF 
0bc24     38 E4 85 F1 | 	sub	objptr, ##1080
0bc28     F2 38 02 F1 | 	add	local10, objptr
0bc2c     04 38 06 F1 | 	add	local10, #4
0bc30     1C 39 02 FB | 	rdlong	local10, local10
0bc34     FE 39 0E F2 | 	cmp	local10, #510 wz
0bc38     35 00 00 FF 
0bc3c     0C E4 85 F1 | 	sub	objptr, ##27148
0bc40     00 FF 9F 5D |  if_ne	jmp	#LR__0963
0bc44                 | LR__0966
0bc44                 | '     if lparts(ct).token=token_end then return 14
0bc44     37 00 00 FF 
0bc48     44 E4 05 F1 | 	add	objptr, ##28228
0bc4c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc50     03 2C 66 F0 | 	shl	local04, #3
0bc54     02 00 00 FF 
0bc58     38 E4 85 F1 | 	sub	objptr, ##1080
0bc5c     F2 2C 02 F1 | 	add	local04, objptr
0bc60     04 2C 06 F1 | 	add	local04, #4
0bc64     16 39 02 FB | 	rdlong	local10, local04
0bc68     FE 39 0E F2 | 	cmp	local10, #510 wz
0bc6c     35 00 00 FF 
0bc70     0C E4 85 F1 | 	sub	objptr, ##27148
0bc74     0E FA 05 A6 |  if_e	mov	result1, #14
0bc78     C4 00 90 AD |  if_e	jmp	#LR__0968
0bc7c                 | LR__0967
0bc7c     1A 29 02 F6 | 	mov	local02, local08
0bc80     12 2A 06 F6 | 	mov	local03, #18
0bc84     18 27 02 F6 | 	mov	local01, local06
0bc88     13 37 02 F6 | 	mov	local09, local01
0bc8c     14 3B 02 F6 | 	mov	local11, local02
0bc90     15 27 02 F6 | 	mov	local01, local03
0bc94     4A 00 00 FF 
0bc98     7C E4 05 F1 | 	add	objptr, ##38012
0bc9c     F2 38 02 FB | 	rdlong	local10, objptr
0bca0     1C 35 02 F6 | 	mov	local08, local10
0bca4     01 34 66 F0 | 	shl	local08, #1
0bca8     1C 35 02 F1 | 	add	local08, local10
0bcac     02 34 66 F0 | 	shl	local08, #2
0bcb0     03 00 00 FF 
0bcb4     00 E4 85 F1 | 	sub	objptr, ##1536
0bcb8     F2 34 02 F1 | 	add	local08, objptr
0bcbc     1A 37 62 FC | 	wrlong	local09, local08
0bcc0     03 00 00 FF 
0bcc4     00 E4 05 F1 | 	add	objptr, ##1536
0bcc8     F2 38 02 FB | 	rdlong	local10, objptr
0bccc     1C 37 02 F6 | 	mov	local09, local10
0bcd0     01 36 66 F0 | 	shl	local09, #1
0bcd4     1C 37 02 F1 | 	add	local09, local10
0bcd8     02 36 66 F0 | 	shl	local09, #2
0bcdc     03 00 00 FF 
0bce0     00 E4 85 F1 | 	sub	objptr, ##1536
0bce4     F2 36 02 F1 | 	add	local09, objptr
0bce8     04 36 06 F1 | 	add	local09, #4
0bcec     1B 3B 62 FC | 	wrlong	local11, local09
0bcf0     03 00 00 FF 
0bcf4     00 E4 05 F1 | 	add	objptr, ##1536
0bcf8     F2 3A 02 FB | 	rdlong	local11, objptr
0bcfc     1D 39 02 F6 | 	mov	local10, local11
0bd00     01 38 66 F0 | 	shl	local10, #1
0bd04     1D 39 02 F1 | 	add	local10, local11
0bd08     02 38 66 F0 | 	shl	local10, #2
0bd0c     03 00 00 FF 
0bd10     00 E4 85 F1 | 	sub	objptr, ##1536
0bd14     F2 38 02 F1 | 	add	local10, objptr
0bd18     08 38 06 F1 | 	add	local10, #8
0bd1c     1C 27 62 FC | 	wrlong	local01, local10
0bd20     03 00 00 FF 
0bd24     00 E4 05 F1 | 	add	objptr, ##1536
0bd28     F2 36 02 FB | 	rdlong	local09, objptr
0bd2c     01 36 06 F1 | 	add	local09, #1
0bd30     F2 36 62 FC | 	wrlong	local09, objptr
0bd34     4A 00 00 FF 
0bd38     7C E4 85 F1 | 	sub	objptr, ##38012
0bd3c                 | ' t2.result.twowords(1)=numpar
0bd3c                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bd3c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bd3c                 | ' return 0
0bd3c     00 FA 05 F6 | 	mov	result1, #0
0bd40                 | LR__0968
0bd40     A7 F0 03 F6 | 	mov	ptra, fp
0bd44     B2 00 A0 FD | 	call	#popregs_
0bd48                 | _getaddr_ret
0bd48     2D 00 64 FD | 	ret
0bd4c                 | 
0bd4c                 | ' 
0bd4c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bd4c                 | ' '--------------------------------------------- 
0bd4c                 | ' 
0bd4c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd4c                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0bd4c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd4c                 | ' 
0bd4c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd4c                 | ' '
0bd4c                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0bd4c                 | ' '
0bd4c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd4c                 | ' 
0bd4c                 | ' function expr() as ulong 
0bd4c                 | _expr
0bd4c     07 4A 05 F6 | 	mov	COUNT_, #7
0bd50     A8 00 A0 FD | 	call	#pushregs_
0bd54                 | _expr_enter
0bd54     37 00 00 FF 
0bd58     44 E4 05 F1 | 	add	objptr, ##28228
0bd5c     F2 2C 02 FB | 	rdlong	local04, objptr
0bd60     03 2C 66 F0 | 	shl	local04, #3
0bd64     02 00 00 FF 
0bd68     38 E4 85 F1 | 	sub	objptr, ##1080
0bd6c     F2 2C 02 F1 | 	add	local04, objptr
0bd70     04 2C 06 F1 | 	add	local04, #4
0bd74     16 2F 02 FB | 	rdlong	local05, local04
0bd78                 | ' 
0bd78                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bd78     FE 2F 0E F2 | 	cmp	local05, #510 wz
0bd7c     35 00 00 FF 
0bd80     0C E4 85 F1 | 	sub	objptr, ##27148
0bd84     C4 00 90 5D |  if_ne	jmp	#LR__0970
0bd88     1D 26 06 F6 | 	mov	local01, #29
0bd8c     FF 2A 06 F6 | 	mov	local03, #255
0bd90     13 31 02 F6 | 	mov	local06, local01
0bd94     14 33 02 F6 | 	mov	local07, local02
0bd98     15 27 02 F6 | 	mov	local01, local03
0bd9c     4A 00 00 FF 
0bda0     7C E4 05 F1 | 	add	objptr, ##38012
0bda4     F2 2E 02 FB | 	rdlong	local05, objptr
0bda8     17 2D 02 F6 | 	mov	local04, local05
0bdac     01 2C 66 F0 | 	shl	local04, #1
0bdb0     17 2D 02 F1 | 	add	local04, local05
0bdb4     02 2C 66 F0 | 	shl	local04, #2
0bdb8     03 00 00 FF 
0bdbc     00 E4 85 F1 | 	sub	objptr, ##1536
0bdc0     F2 2C 02 F1 | 	add	local04, objptr
0bdc4     16 31 62 FC | 	wrlong	local06, local04
0bdc8     03 00 00 FF 
0bdcc     00 E4 05 F1 | 	add	objptr, ##1536
0bdd0     F2 30 02 FB | 	rdlong	local06, objptr
0bdd4     18 2F 02 F6 | 	mov	local05, local06
0bdd8     01 2E 66 F0 | 	shl	local05, #1
0bddc     18 2F 02 F1 | 	add	local05, local06
0bde0     02 2E 66 F0 | 	shl	local05, #2
0bde4     03 00 00 FF 
0bde8     00 E4 85 F1 | 	sub	objptr, ##1536
0bdec     F2 2E 02 F1 | 	add	local05, objptr
0bdf0     04 2E 06 F1 | 	add	local05, #4
0bdf4     17 33 62 FC | 	wrlong	local07, local05
0bdf8     03 00 00 FF 
0bdfc     00 E4 05 F1 | 	add	objptr, ##1536
0be00     F2 32 02 FB | 	rdlong	local07, objptr
0be04     19 31 02 F6 | 	mov	local06, local07
0be08     01 30 66 F0 | 	shl	local06, #1
0be0c     19 31 02 F1 | 	add	local06, local07
0be10     02 30 66 F0 | 	shl	local06, #2
0be14     03 00 00 FF 
0be18     00 E4 85 F1 | 	sub	objptr, ##1536
0be1c     F2 30 02 F1 | 	add	local06, objptr
0be20     08 30 06 F1 | 	add	local06, #8
0be24     18 27 62 FC | 	wrlong	local01, local06
0be28     03 00 00 FF 
0be2c     00 E4 05 F1 | 	add	objptr, ##1536
0be30     F2 30 02 FB | 	rdlong	local06, objptr
0be34     01 30 06 F1 | 	add	local06, #1
0be38     F2 30 62 FC | 	wrlong	local06, objptr
0be3c     4A 00 00 FF 
0be40     7C E4 85 F1 | 	sub	objptr, ##38012
0be44     1D FA 05 F6 | 	mov	result1, #29
0be48     64 01 90 FD | 	jmp	#LR__0973
0be4c                 | LR__0970
0be4c     00 26 06 F6 | 	mov	local01, #0
0be50     68 01 B0 FD | 	call	#_addsub
0be54                 | ' t3.result.uresult=0
0be54                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0be54                 | ' if err>0 then return err
0be54     01 FA 15 F2 | 	cmp	result1, #1 wc
0be58     54 01 90 3D |  if_ae	jmp	#LR__0973
0be5c     37 00 00 FF 
0be60     44 E4 05 F1 | 	add	objptr, ##28228
0be64     F2 2C 02 FB | 	rdlong	local04, objptr
0be68     03 2C 66 F0 | 	shl	local04, #3
0be6c     02 00 00 FF 
0be70     38 E4 85 F1 | 	sub	objptr, ##1080
0be74     F2 2C 02 F1 | 	add	local04, objptr
0be78     04 2C 06 F1 | 	add	local04, #4
0be7c     16 2F 02 FB | 	rdlong	local05, local04
0be80                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0be80                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0be80     35 00 00 FF 
0be84     0C E4 85 F1 | 	sub	objptr, ##27148
0be88                 | LR__0971
0be88     1B 2E 0E F2 | 	cmp	local05, #27 wz
0be8c     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0be90     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0be94     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0be98     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0be9c     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0bea0     08 01 90 5D |  if_ne	jmp	#LR__0972
0bea4     37 00 00 FF 
0bea8     44 E4 05 F1 | 	add	objptr, ##28228
0beac     F2 30 02 FB | 	rdlong	local06, objptr
0beb0     01 30 06 F1 | 	add	local06, #1
0beb4     F2 30 62 FC | 	wrlong	local06, objptr
0beb8     37 00 00 FF 
0bebc     44 E4 85 F1 | 	sub	objptr, ##28228
0bec0     F8 00 B0 FD | 	call	#_addsub
0bec4                 | '   ct+=1
0bec4                 | '   err=addsub() : if err>0 then return err
0bec4     01 FA 15 F2 | 	cmp	result1, #1 wc
0bec8     E4 00 90 3D |  if_ae	jmp	#LR__0973
0becc     17 2B 02 F6 | 	mov	local03, local05
0bed0     13 31 02 F6 | 	mov	local06, local01
0bed4     14 33 02 F6 | 	mov	local07, local02
0bed8     15 2F 02 F6 | 	mov	local05, local03
0bedc     4A 00 00 FF 
0bee0     7C E4 05 F1 | 	add	objptr, ##38012
0bee4     F2 2C 02 FB | 	rdlong	local04, objptr
0bee8     16 FB 01 F6 | 	mov	result1, local04
0beec     01 FA 65 F0 | 	shl	result1, #1
0bef0     16 FB 01 F1 | 	add	result1, local04
0bef4     02 FA 65 F0 | 	shl	result1, #2
0bef8     03 00 00 FF 
0befc     00 E4 85 F1 | 	sub	objptr, ##1536
0bf00     F2 FA 01 F1 | 	add	result1, objptr
0bf04     FD 30 62 FC | 	wrlong	local06, result1
0bf08     03 00 00 FF 
0bf0c     00 E4 05 F1 | 	add	objptr, ##1536
0bf10     F2 30 02 FB | 	rdlong	local06, objptr
0bf14     18 2D 02 F6 | 	mov	local04, local06
0bf18     01 2C 66 F0 | 	shl	local04, #1
0bf1c     18 2D 02 F1 | 	add	local04, local06
0bf20     02 2C 66 F0 | 	shl	local04, #2
0bf24     03 00 00 FF 
0bf28     00 E4 85 F1 | 	sub	objptr, ##1536
0bf2c     F2 2C 02 F1 | 	add	local04, objptr
0bf30     04 2C 06 F1 | 	add	local04, #4
0bf34     16 33 62 FC | 	wrlong	local07, local04
0bf38     03 00 00 FF 
0bf3c     00 E4 05 F1 | 	add	objptr, ##1536
0bf40     F2 32 02 FB | 	rdlong	local07, objptr
0bf44     19 31 02 F6 | 	mov	local06, local07
0bf48     01 30 66 F0 | 	shl	local06, #1
0bf4c     19 31 02 F1 | 	add	local06, local07
0bf50     02 30 66 F0 | 	shl	local06, #2
0bf54     03 00 00 FF 
0bf58     00 E4 85 F1 | 	sub	objptr, ##1536
0bf5c     F2 30 02 F1 | 	add	local06, objptr
0bf60     08 30 06 F1 | 	add	local06, #8
0bf64     18 2F 62 FC | 	wrlong	local05, local06
0bf68     03 00 00 FF 
0bf6c     00 E4 05 F1 | 	add	objptr, ##1536
0bf70     F2 30 02 FB | 	rdlong	local06, objptr
0bf74     01 30 06 F1 | 	add	local06, #1
0bf78     F2 30 62 FC | 	wrlong	local06, objptr
0bf7c     13 00 00 FF 
0bf80     38 E4 85 F1 | 	sub	objptr, ##9784
0bf84     F2 2C 02 FB | 	rdlong	local04, objptr
0bf88     03 2C 66 F0 | 	shl	local04, #3
0bf8c     02 00 00 FF 
0bf90     38 E4 85 F1 | 	sub	objptr, ##1080
0bf94     F2 2C 02 F1 | 	add	local04, objptr
0bf98     04 2C 06 F1 | 	add	local04, #4
0bf9c     16 2F 02 FB | 	rdlong	local05, local04
0bfa0     35 00 00 FF 
0bfa4     0C E4 85 F1 | 	sub	objptr, ##27148
0bfa8     DC FE 9F FD | 	jmp	#LR__0971
0bfac                 | LR__0972
0bfac                 | ' return 0  
0bfac     00 FA 05 F6 | 	mov	result1, #0
0bfb0                 | LR__0973
0bfb0     A7 F0 03 F6 | 	mov	ptra, fp
0bfb4     B2 00 A0 FD | 	call	#popregs_
0bfb8                 | _expr_ret
0bfb8     2D 00 64 FD | 	ret
0bfbc                 | 
0bfbc                 | ' 
0bfbc                 | ' ' Second level operators : add, sub, logic
0bfbc                 | ' 
0bfbc                 | ' function addsub() as ulong
0bfbc                 | _addsub
0bfbc     07 4A 05 F6 | 	mov	COUNT_, #7
0bfc0     A8 00 A0 FD | 	call	#pushregs_
0bfc4                 | _addsub_enter
0bfc4     00 26 06 F6 | 	mov	local01, #0
0bfc8     60 01 B0 FD | 	call	#_muldiv
0bfcc                 | ' 
0bfcc                 | ' t3.result.uresult=0
0bfcc                 | ' err=muldiv() : if err>0 then return err           			 
0bfcc     01 FA 15 F2 | 	cmp	result1, #1 wc
0bfd0     4C 01 90 3D |  if_ae	jmp	#LR__0982
0bfd4     37 00 00 FF 
0bfd8     44 E4 05 F1 | 	add	objptr, ##28228
0bfdc     F2 2C 02 FB | 	rdlong	local04, objptr
0bfe0     03 2C 66 F0 | 	shl	local04, #3
0bfe4     02 00 00 FF 
0bfe8     38 E4 85 F1 | 	sub	objptr, ##1080
0bfec     F2 2C 02 F1 | 	add	local04, objptr
0bff0     04 2C 06 F1 | 	add	local04, #4
0bff4     16 2F 02 FB | 	rdlong	local05, local04
0bff8                 | ' op = lparts(ct).token				 
0bff8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0bff8     35 00 00 FF 
0bffc     0C E4 85 F1 | 	sub	objptr, ##27148
0c000                 | LR__0980
0c000     01 2E 0E F2 | 	cmp	local05, #1 wz
0c004     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c008     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c00c     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c010     08 01 90 5D |  if_ne	jmp	#LR__0981
0c014     37 00 00 FF 
0c018     44 E4 05 F1 | 	add	objptr, ##28228
0c01c     F2 2C 02 FB | 	rdlong	local04, objptr
0c020     01 2C 06 F1 | 	add	local04, #1
0c024     F2 2C 62 FC | 	wrlong	local04, objptr
0c028     37 00 00 FF 
0c02c     44 E4 85 F1 | 	sub	objptr, ##28228
0c030     F8 00 B0 FD | 	call	#_muldiv
0c034                 | '   ct+=1
0c034                 | '   err=muldiv() : if err>0 then return err   
0c034     01 FA 15 F2 | 	cmp	result1, #1 wc
0c038     E4 00 90 3D |  if_ae	jmp	#LR__0982
0c03c     17 2B 02 F6 | 	mov	local03, local05
0c040     13 31 02 F6 | 	mov	local06, local01
0c044     14 33 02 F6 | 	mov	local07, local02
0c048     15 2F 02 F6 | 	mov	local05, local03
0c04c     4A 00 00 FF 
0c050     7C E4 05 F1 | 	add	objptr, ##38012
0c054     F2 2C 02 FB | 	rdlong	local04, objptr
0c058     16 FB 01 F6 | 	mov	result1, local04
0c05c     01 FA 65 F0 | 	shl	result1, #1
0c060     16 FB 01 F1 | 	add	result1, local04
0c064     02 FA 65 F0 | 	shl	result1, #2
0c068     03 00 00 FF 
0c06c     00 E4 85 F1 | 	sub	objptr, ##1536
0c070     F2 FA 01 F1 | 	add	result1, objptr
0c074     FD 30 62 FC | 	wrlong	local06, result1
0c078     03 00 00 FF 
0c07c     00 E4 05 F1 | 	add	objptr, ##1536
0c080     F2 30 02 FB | 	rdlong	local06, objptr
0c084     18 2D 02 F6 | 	mov	local04, local06
0c088     01 2C 66 F0 | 	shl	local04, #1
0c08c     18 2D 02 F1 | 	add	local04, local06
0c090     02 2C 66 F0 | 	shl	local04, #2
0c094     03 00 00 FF 
0c098     00 E4 85 F1 | 	sub	objptr, ##1536
0c09c     F2 2C 02 F1 | 	add	local04, objptr
0c0a0     04 2C 06 F1 | 	add	local04, #4
0c0a4     16 33 62 FC | 	wrlong	local07, local04
0c0a8     03 00 00 FF 
0c0ac     00 E4 05 F1 | 	add	objptr, ##1536
0c0b0     F2 32 02 FB | 	rdlong	local07, objptr
0c0b4     19 31 02 F6 | 	mov	local06, local07
0c0b8     01 30 66 F0 | 	shl	local06, #1
0c0bc     19 31 02 F1 | 	add	local06, local07
0c0c0     02 30 66 F0 | 	shl	local06, #2
0c0c4     03 00 00 FF 
0c0c8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0cc     F2 30 02 F1 | 	add	local06, objptr
0c0d0     08 30 06 F1 | 	add	local06, #8
0c0d4     18 2F 62 FC | 	wrlong	local05, local06
0c0d8     03 00 00 FF 
0c0dc     00 E4 05 F1 | 	add	objptr, ##1536
0c0e0     F2 30 02 FB | 	rdlong	local06, objptr
0c0e4     01 30 06 F1 | 	add	local06, #1
0c0e8     F2 30 62 FC | 	wrlong	local06, objptr
0c0ec     13 00 00 FF 
0c0f0     38 E4 85 F1 | 	sub	objptr, ##9784
0c0f4     F2 2C 02 FB | 	rdlong	local04, objptr
0c0f8     03 2C 66 F0 | 	shl	local04, #3
0c0fc     02 00 00 FF 
0c100     38 E4 85 F1 | 	sub	objptr, ##1080
0c104     F2 2C 02 F1 | 	add	local04, objptr
0c108     04 2C 06 F1 | 	add	local04, #4
0c10c     16 2F 02 FB | 	rdlong	local05, local04
0c110     35 00 00 FF 
0c114     0C E4 85 F1 | 	sub	objptr, ##27148
0c118     E4 FE 9F FD | 	jmp	#LR__0980
0c11c                 | LR__0981
0c11c                 | ' return 0
0c11c     00 FA 05 F6 | 	mov	result1, #0
0c120                 | LR__0982
0c120     A7 F0 03 F6 | 	mov	ptra, fp
0c124     B2 00 A0 FD | 	call	#popregs_
0c128                 | _addsub_ret
0c128     2D 00 64 FD | 	ret
0c12c                 | 
0c12c                 | ' 
0c12c                 | ' ' Third level operators : mul,div,shift,power
0c12c                 | ' 
0c12c                 | ' function muldiv() as ulong
0c12c                 | _muldiv
0c12c     07 4A 05 F6 | 	mov	COUNT_, #7
0c130     A8 00 A0 FD | 	call	#pushregs_
0c134                 | _muldiv_enter
0c134     00 26 06 F6 | 	mov	local01, #0
0c138     6C 01 B0 FD | 	call	#_getvalue
0c13c                 | ' 
0c13c                 | ' t3.result.uresult=0
0c13c                 | ' err=getvalue() : if err>0 then return err     
0c13c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c140     58 01 90 3D |  if_ae	jmp	#LR__0992
0c144     37 00 00 FF 
0c148     44 E4 05 F1 | 	add	objptr, ##28228
0c14c     F2 2C 02 FB | 	rdlong	local04, objptr
0c150     03 2C 66 F0 | 	shl	local04, #3
0c154     02 00 00 FF 
0c158     38 E4 85 F1 | 	sub	objptr, ##1080
0c15c     F2 2C 02 F1 | 	add	local04, objptr
0c160     04 2C 06 F1 | 	add	local04, #4
0c164     16 2F 02 FB | 	rdlong	local05, local04
0c168                 | ' op = lparts(ct).token
0c168                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c168     35 00 00 FF 
0c16c     0C E4 85 F1 | 	sub	objptr, ##27148
0c170                 | LR__0990
0c170     05 2E 0E F2 | 	cmp	local05, #5 wz
0c174     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c178     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c17c     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c180     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c184     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c188     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c18c     08 01 90 5D |  if_ne	jmp	#LR__0991
0c190     37 00 00 FF 
0c194     44 E4 05 F1 | 	add	objptr, ##28228
0c198     F2 2C 02 FB | 	rdlong	local04, objptr
0c19c     01 2C 06 F1 | 	add	local04, #1
0c1a0     F2 2C 62 FC | 	wrlong	local04, objptr
0c1a4     37 00 00 FF 
0c1a8     44 E4 85 F1 | 	sub	objptr, ##28228
0c1ac     F8 00 B0 FD | 	call	#_getvalue
0c1b0                 | '   ct+=1
0c1b0                 | '   err=getvalue() :if err>0 then return err   
0c1b0     01 FA 15 F2 | 	cmp	result1, #1 wc
0c1b4     E4 00 90 3D |  if_ae	jmp	#LR__0992
0c1b8     17 2B 02 F6 | 	mov	local03, local05
0c1bc     13 31 02 F6 | 	mov	local06, local01
0c1c0     14 33 02 F6 | 	mov	local07, local02
0c1c4     15 2F 02 F6 | 	mov	local05, local03
0c1c8     4A 00 00 FF 
0c1cc     7C E4 05 F1 | 	add	objptr, ##38012
0c1d0     F2 2C 02 FB | 	rdlong	local04, objptr
0c1d4     16 FB 01 F6 | 	mov	result1, local04
0c1d8     01 FA 65 F0 | 	shl	result1, #1
0c1dc     16 FB 01 F1 | 	add	result1, local04
0c1e0     02 FA 65 F0 | 	shl	result1, #2
0c1e4     03 00 00 FF 
0c1e8     00 E4 85 F1 | 	sub	objptr, ##1536
0c1ec     F2 FA 01 F1 | 	add	result1, objptr
0c1f0     FD 30 62 FC | 	wrlong	local06, result1
0c1f4     03 00 00 FF 
0c1f8     00 E4 05 F1 | 	add	objptr, ##1536
0c1fc     F2 30 02 FB | 	rdlong	local06, objptr
0c200     18 2D 02 F6 | 	mov	local04, local06
0c204     01 2C 66 F0 | 	shl	local04, #1
0c208     18 2D 02 F1 | 	add	local04, local06
0c20c     02 2C 66 F0 | 	shl	local04, #2
0c210     03 00 00 FF 
0c214     00 E4 85 F1 | 	sub	objptr, ##1536
0c218     F2 2C 02 F1 | 	add	local04, objptr
0c21c     04 2C 06 F1 | 	add	local04, #4
0c220     16 33 62 FC | 	wrlong	local07, local04
0c224     03 00 00 FF 
0c228     00 E4 05 F1 | 	add	objptr, ##1536
0c22c     F2 32 02 FB | 	rdlong	local07, objptr
0c230     19 31 02 F6 | 	mov	local06, local07
0c234     01 30 66 F0 | 	shl	local06, #1
0c238     19 31 02 F1 | 	add	local06, local07
0c23c     02 30 66 F0 | 	shl	local06, #2
0c240     03 00 00 FF 
0c244     00 E4 85 F1 | 	sub	objptr, ##1536
0c248     F2 30 02 F1 | 	add	local06, objptr
0c24c     08 30 06 F1 | 	add	local06, #8
0c250     18 2F 62 FC | 	wrlong	local05, local06
0c254     03 00 00 FF 
0c258     00 E4 05 F1 | 	add	objptr, ##1536
0c25c     F2 30 02 FB | 	rdlong	local06, objptr
0c260     01 30 06 F1 | 	add	local06, #1
0c264     F2 30 62 FC | 	wrlong	local06, objptr
0c268     13 00 00 FF 
0c26c     38 E4 85 F1 | 	sub	objptr, ##9784
0c270     F2 2C 02 FB | 	rdlong	local04, objptr
0c274     03 2C 66 F0 | 	shl	local04, #3
0c278     02 00 00 FF 
0c27c     38 E4 85 F1 | 	sub	objptr, ##1080
0c280     F2 2C 02 F1 | 	add	local04, objptr
0c284     04 2C 06 F1 | 	add	local04, #4
0c288     16 2F 02 FB | 	rdlong	local05, local04
0c28c     35 00 00 FF 
0c290     0C E4 85 F1 | 	sub	objptr, ##27148
0c294     D8 FE 9F FD | 	jmp	#LR__0990
0c298                 | LR__0991
0c298                 | ' return 0
0c298     00 FA 05 F6 | 	mov	result1, #0
0c29c                 | LR__0992
0c29c     A7 F0 03 F6 | 	mov	ptra, fp
0c2a0     B2 00 A0 FD | 	call	#popregs_
0c2a4                 | _muldiv_ret
0c2a4     2D 00 64 FD | 	ret
0c2a8                 | 
0c2a8                 | ' 
0c2a8                 | ' ' Get a value for operations
0c2a8                 | ' 
0c2a8                 | ' function getvalue()  as ulong
0c2a8                 | _getvalue
0c2a8     0B 4A 05 F6 | 	mov	COUNT_, #11
0c2ac     A8 00 A0 FD | 	call	#pushregs_
0c2b0                 | _getvalue_enter
0c2b0     01 2C 06 F6 | 	mov	local04, #1
0c2b4     00 26 06 F6 | 	mov	local01, #0
0c2b8     1D 2A 06 F6 | 	mov	local03, #29
0c2bc     37 00 00 FF 
0c2c0     44 E4 05 F1 | 	add	objptr, ##28228
0c2c4     F2 16 02 FB | 	rdlong	arg03, objptr
0c2c8     03 16 66 F0 | 	shl	arg03, #3
0c2cc     02 00 00 FF 
0c2d0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2d4     F2 16 02 F1 | 	add	arg03, objptr
0c2d8     04 16 06 F1 | 	add	arg03, #4
0c2dc     0B 2F 02 FB | 	rdlong	local05, arg03
0c2e0                 | ' 
0c2e0                 | ' m=1											' for negative numbers
0c2e0                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c2e0                 | ' op=lparts(ct).token
0c2e0                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c2e0     02 2E 0E F2 | 	cmp	local05, #2 wz
0c2e4     35 00 00 FF 
0c2e8     0C E4 85 F1 | 	sub	objptr, ##27148
0c2ec     38 00 90 5D |  if_ne	jmp	#LR__1000
0c2f0     01 2C 66 F6 | 	neg	local04, #1
0c2f4     37 00 00 FF 
0c2f8     44 E4 05 F1 | 	add	objptr, ##28228
0c2fc     F2 2E 02 FB | 	rdlong	local05, objptr
0c300     01 2E 06 F1 | 	add	local05, #1
0c304     F2 2E 62 FC | 	wrlong	local05, objptr
0c308     03 2E 66 F0 | 	shl	local05, #3
0c30c     02 00 00 FF 
0c310     38 E4 85 F1 | 	sub	objptr, ##1080
0c314     F2 2E 02 F1 | 	add	local05, objptr
0c318     04 2E 06 F1 | 	add	local05, #4
0c31c     17 2F 02 FB | 	rdlong	local05, local05
0c320     35 00 00 FF 
0c324     0C E4 85 F1 | 	sub	objptr, ##27148
0c328                 | LR__1000
0c328                 | ' select case op
0c328     01 00 00 FF 
0c32c     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c330     44 00 90 AD |  if_e	jmp	#LR__1001
0c334     01 00 00 FF 
0c338     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c33c     90 01 90 AD |  if_e	jmp	#LR__1004
0c340     01 00 00 FF 
0c344     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c348     44 04 90 AD |  if_e	jmp	#LR__1011
0c34c     01 00 00 FF 
0c350     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c354     A8 05 90 AD |  if_e	jmp	#LR__1014
0c358     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c35c     78 07 90 AD |  if_e	jmp	#LR__1019
0c360     01 00 00 FF 
0c364     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c368     70 08 90 AD |  if_e	jmp	#LR__1020
0c36c     15 2E 0E F2 | 	cmp	local05, #21 wz
0c370     98 08 90 AD |  if_e	jmp	#LR__1021
0c374     10 09 90 FD | 	jmp	#LR__1022
0c378                 | LR__1001
0c378                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c378     01 2C 0E F2 | 	cmp	local04, #1 wz
0c37c     3C 00 90 5D |  if_ne	jmp	#LR__1002
0c380     37 00 00 FF 
0c384     44 E4 05 F1 | 	add	objptr, ##28228
0c388     F2 2E 02 FB | 	rdlong	local05, objptr
0c38c     03 2E 66 F0 | 	shl	local05, #3
0c390     02 00 00 FF 
0c394     38 E4 85 F1 | 	sub	objptr, ##1080
0c398     F2 2E 02 F1 | 	add	local05, objptr
0c39c     17 13 02 FB | 	rdlong	arg01, local05
0c3a0     00 14 06 F6 | 	mov	arg02, #0
0c3a4     35 00 00 FF 
0c3a8     0C E4 85 F1 | 	sub	objptr, ##27148
0c3ac     3C DA B1 FD | 	call	#__system____builtin_atoi
0c3b0     FD 2C 02 FD | 	qmul	local04, result1
0c3b4     18 26 62 FD | 	getqx	local01
0c3b8     1C 2A 06 F6 | 	mov	local03, #28
0c3bc                 | LR__1002
0c3bc                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c3bc     FF FF 7F FF 
0c3c0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c3c4     3C 00 90 5D |  if_ne	jmp	#LR__1003
0c3c8     37 00 00 FF 
0c3cc     44 E4 05 F1 | 	add	objptr, ##28228
0c3d0     F2 2E 02 FB | 	rdlong	local05, objptr
0c3d4     03 2E 66 F0 | 	shl	local05, #3
0c3d8     02 00 00 FF 
0c3dc     38 E4 85 F1 | 	sub	objptr, ##1080
0c3e0     F2 2E 02 F1 | 	add	local05, objptr
0c3e4     17 13 02 FB | 	rdlong	arg01, local05
0c3e8     00 14 06 F6 | 	mov	arg02, #0
0c3ec     35 00 00 FF 
0c3f0     0C E4 85 F1 | 	sub	objptr, ##27148
0c3f4     F4 D9 B1 FD | 	call	#__system____builtin_atoi
0c3f8     FD 2C 02 FD | 	qmul	local04, result1
0c3fc     18 26 62 FD | 	getqx	local01
0c400     1C 2A 06 F6 | 	mov	local03, #28
0c404                 | LR__1003
0c404     13 31 02 F6 | 	mov	local06, local01
0c408     14 33 02 F6 | 	mov	local07, local02
0c40c     15 2F 02 F6 | 	mov	local05, local03
0c410     4A 00 00 FF 
0c414     7C E4 05 F1 | 	add	objptr, ##38012
0c418     F2 26 02 FB | 	rdlong	local01, objptr
0c41c     13 2D 02 F6 | 	mov	local04, local01
0c420     01 2C 66 F0 | 	shl	local04, #1
0c424     13 2D 02 F1 | 	add	local04, local01
0c428     02 2C 66 F0 | 	shl	local04, #2
0c42c     03 00 00 FF 
0c430     00 E4 85 F1 | 	sub	objptr, ##1536
0c434     F2 2C 02 F1 | 	add	local04, objptr
0c438     16 31 62 FC | 	wrlong	local06, local04
0c43c     03 00 00 FF 
0c440     00 E4 05 F1 | 	add	objptr, ##1536
0c444     F2 30 02 FB | 	rdlong	local06, objptr
0c448     18 27 02 F6 | 	mov	local01, local06
0c44c     01 26 66 F0 | 	shl	local01, #1
0c450     18 27 02 F1 | 	add	local01, local06
0c454     02 26 66 F0 | 	shl	local01, #2
0c458     03 00 00 FF 
0c45c     00 E4 85 F1 | 	sub	objptr, ##1536
0c460     F2 26 02 F1 | 	add	local01, objptr
0c464     04 26 06 F1 | 	add	local01, #4
0c468     13 33 62 FC | 	wrlong	local07, local01
0c46c     03 00 00 FF 
0c470     00 E4 05 F1 | 	add	objptr, ##1536
0c474     F2 32 02 FB | 	rdlong	local07, objptr
0c478     19 31 02 F6 | 	mov	local06, local07
0c47c     01 30 66 F0 | 	shl	local06, #1
0c480     19 31 02 F1 | 	add	local06, local07
0c484     02 30 66 F0 | 	shl	local06, #2
0c488     03 00 00 FF 
0c48c     00 E4 85 F1 | 	sub	objptr, ##1536
0c490     F2 30 02 F1 | 	add	local06, objptr
0c494     08 30 06 F1 | 	add	local06, #8
0c498     18 2F 62 FC | 	wrlong	local05, local06
0c49c     03 00 00 FF 
0c4a0     00 E4 05 F1 | 	add	objptr, ##1536
0c4a4     F2 30 02 FB | 	rdlong	local06, objptr
0c4a8     01 30 06 F1 | 	add	local06, #1
0c4ac     F2 30 62 FC | 	wrlong	local06, objptr
0c4b0     13 00 00 FF 
0c4b4     38 E4 85 F1 | 	sub	objptr, ##9784
0c4b8     F2 30 02 FB | 	rdlong	local06, objptr
0c4bc     01 30 06 F1 | 	add	local06, #1
0c4c0     F2 30 62 FC | 	wrlong	local06, objptr
0c4c4     37 00 00 FF 
0c4c8     44 E4 85 F1 | 	sub	objptr, ##28228
0c4cc     E4 07 90 FD | 	jmp	#LR__1023
0c4d0                 | LR__1004
0c4d0                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c4d0     37 00 00 FF 
0c4d4     44 E4 05 F1 | 	add	objptr, ##28228
0c4d8     F2 16 02 FB | 	rdlong	arg03, objptr
0c4dc     03 16 66 F0 | 	shl	arg03, #3
0c4e0     02 00 00 FF 
0c4e4     38 E4 85 F1 | 	sub	objptr, ##1080
0c4e8     F2 16 02 F1 | 	add	arg03, objptr
0c4ec     0B 13 02 FB | 	rdlong	arg01, arg03
0c4f0     01 14 06 F6 | 	mov	arg02, #1
0c4f4     35 00 00 FF 
0c4f8     0C E4 85 F1 | 	sub	objptr, ##27148
0c4fc     78 C4 B1 FD | 	call	#__system__Left_S
0c500     FD 12 02 F6 | 	mov	arg01, result1
0c504     B5 01 00 FF 
0c508     72 15 06 F6 | 	mov	arg02, ##@LR__5828
0c50c     10 A4 B1 FD | 	call	#__system___string_cmp
0c510     00 FA 0D F2 | 	cmp	result1, #0 wz
0c514     94 00 90 5D |  if_ne	jmp	#LR__1007
0c518     37 00 00 FF 
0c51c     44 E4 05 F1 | 	add	objptr, ##28228
0c520     F2 32 02 FB | 	rdlong	local07, objptr
0c524     19 31 02 F6 | 	mov	local06, local07
0c528     03 30 66 F0 | 	shl	local06, #3
0c52c     02 00 00 FF 
0c530     38 E4 85 F1 | 	sub	objptr, ##1080
0c534     F2 30 02 F1 | 	add	local06, objptr
0c538     B5 01 00 FF 
0c53c     74 2F 06 F6 | 	mov	local05, ##@LR__5829
0c540     03 32 66 F0 | 	shl	local07, #3
0c544     F2 32 02 F1 | 	add	local07, objptr
0c548     19 33 02 FB | 	rdlong	local07, local07
0c54c     02 00 00 FF 
0c550     38 E4 05 F1 | 	add	objptr, ##1080
0c554     F2 26 02 FB | 	rdlong	local01, objptr
0c558     03 26 66 F0 | 	shl	local01, #3
0c55c     02 00 00 FF 
0c560     38 E4 85 F1 | 	sub	objptr, ##1080
0c564     F2 26 02 F1 | 	add	local01, objptr
0c568     13 13 02 FB | 	rdlong	arg01, local01
0c56c     35 00 00 FF 
0c570     0C E4 85 F1 | 	sub	objptr, ##27148
0c574     09 35 02 F6 | 	mov	local08, arg01
0c578     97 06 48 FB | 	callpa	#(@LR__1006-@LR__1005)>>2,fcache_load_ptr_
0c57c                 | LR__1005
0c57c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c580     01 34 06 51 |  if_ne	add	local08, #1
0c584     F4 FF 9F 5D |  if_ne	jmp	#LR__1005
0c588                 | LR__1006
0c588     09 35 82 F1 | 	sub	local08, arg01
0c58c     1A 15 02 F6 | 	mov	arg02, local08
0c590     01 14 86 F1 | 	sub	arg02, #1
0c594     19 13 02 F6 | 	mov	arg01, local07
0c598     64 C4 B1 FD | 	call	#__system__Right_S
0c59c     FD 14 02 F6 | 	mov	arg02, result1
0c5a0     17 13 02 F6 | 	mov	arg01, local05
0c5a4     AC A3 B1 FD | 	call	#__system___string_concat
0c5a8     18 FB 61 FC | 	wrlong	result1, local06
0c5ac                 | LR__1007
0c5ac                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c5ac     37 00 00 FF 
0c5b0     44 E4 05 F1 | 	add	objptr, ##28228
0c5b4     F2 16 02 FB | 	rdlong	arg03, objptr
0c5b8     03 16 66 F0 | 	shl	arg03, #3
0c5bc     02 00 00 FF 
0c5c0     38 E4 85 F1 | 	sub	objptr, ##1080
0c5c4     F2 16 02 F1 | 	add	arg03, objptr
0c5c8     0B 13 02 FB | 	rdlong	arg01, arg03
0c5cc     01 14 06 F6 | 	mov	arg02, #1
0c5d0     35 00 00 FF 
0c5d4     0C E4 85 F1 | 	sub	objptr, ##27148
0c5d8     9C C3 B1 FD | 	call	#__system__Left_S
0c5dc     FD 12 02 F6 | 	mov	arg01, result1
0c5e0     B5 01 00 FF 
0c5e4     77 15 06 F6 | 	mov	arg02, ##@LR__5830
0c5e8     34 A3 B1 FD | 	call	#__system___string_cmp
0c5ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0c5f0     94 00 90 5D |  if_ne	jmp	#LR__1010
0c5f4     37 00 00 FF 
0c5f8     44 E4 05 F1 | 	add	objptr, ##28228
0c5fc     F2 32 02 FB | 	rdlong	local07, objptr
0c600     19 31 02 F6 | 	mov	local06, local07
0c604     03 30 66 F0 | 	shl	local06, #3
0c608     02 00 00 FF 
0c60c     38 E4 85 F1 | 	sub	objptr, ##1080
0c610     F2 30 02 F1 | 	add	local06, objptr
0c614     B5 01 00 FF 
0c618     79 2F 06 F6 | 	mov	local05, ##@LR__5831
0c61c     03 32 66 F0 | 	shl	local07, #3
0c620     F2 32 02 F1 | 	add	local07, objptr
0c624     19 33 02 FB | 	rdlong	local07, local07
0c628     02 00 00 FF 
0c62c     38 E4 05 F1 | 	add	objptr, ##1080
0c630     F2 26 02 FB | 	rdlong	local01, objptr
0c634     03 26 66 F0 | 	shl	local01, #3
0c638     02 00 00 FF 
0c63c     38 E4 85 F1 | 	sub	objptr, ##1080
0c640     F2 26 02 F1 | 	add	local01, objptr
0c644     13 13 02 FB | 	rdlong	arg01, local01
0c648     35 00 00 FF 
0c64c     0C E4 85 F1 | 	sub	objptr, ##27148
0c650     09 35 02 F6 | 	mov	local08, arg01
0c654     97 06 48 FB | 	callpa	#(@LR__1009-@LR__1008)>>2,fcache_load_ptr_
0c658                 | LR__1008
0c658     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c65c     01 34 06 51 |  if_ne	add	local08, #1
0c660     F4 FF 9F 5D |  if_ne	jmp	#LR__1008
0c664                 | LR__1009
0c664     09 35 82 F1 | 	sub	local08, arg01
0c668     1A 15 02 F6 | 	mov	arg02, local08
0c66c     01 14 86 F1 | 	sub	arg02, #1
0c670     19 13 02 F6 | 	mov	arg01, local07
0c674     88 C3 B1 FD | 	call	#__system__Right_S
0c678     FD 14 02 F6 | 	mov	arg02, result1
0c67c     17 13 02 F6 | 	mov	arg01, local05
0c680     D0 A2 B1 FD | 	call	#__system___string_concat
0c684     18 FB 61 FC | 	wrlong	result1, local06
0c688                 | LR__1010
0c688     37 00 00 FF 
0c68c     44 E4 05 F1 | 	add	objptr, ##28228
0c690     F2 30 02 FB | 	rdlong	local06, objptr
0c694     03 30 66 F0 | 	shl	local06, #3
0c698     02 00 00 FF 
0c69c     38 E4 85 F1 | 	sub	objptr, ##1080
0c6a0     F2 30 02 F1 | 	add	local06, objptr
0c6a4     18 13 02 FB | 	rdlong	arg01, local06
0c6a8     00 14 06 F6 | 	mov	arg02, #0
0c6ac     35 00 00 FF 
0c6b0     0C E4 85 F1 | 	sub	objptr, ##27148
0c6b4     34 D7 B1 FD | 	call	#__system____builtin_atoi
0c6b8     FD 2C 02 FD | 	qmul	local04, result1
0c6bc     4A 00 00 FF 
0c6c0     7C E4 05 F1 | 	add	objptr, ##38012
0c6c4     F2 30 02 FB | 	rdlong	local06, objptr
0c6c8     18 37 02 F6 | 	mov	local09, local06
0c6cc     01 36 66 F0 | 	shl	local09, #1
0c6d0     18 37 02 F1 | 	add	local09, local06
0c6d4     02 36 66 F0 | 	shl	local09, #2
0c6d8     03 00 00 FF 
0c6dc     00 E4 85 F1 | 	sub	objptr, ##1536
0c6e0     F2 36 02 F1 | 	add	local09, objptr
0c6e4     03 00 00 FF 
0c6e8     00 E4 05 F1 | 	add	objptr, ##1536
0c6ec     18 26 62 FD | 	getqx	local01
0c6f0     1C 2A 06 F6 | 	mov	local03, #28
0c6f4     13 31 02 F6 | 	mov	local06, local01
0c6f8     14 33 02 F6 | 	mov	local07, local02
0c6fc     1B 31 62 FC | 	wrlong	local06, local09
0c700     15 37 02 F6 | 	mov	local09, local03
0c704     F2 30 02 FB | 	rdlong	local06, objptr
0c708     18 2F 02 F6 | 	mov	local05, local06
0c70c     01 2E 66 F0 | 	shl	local05, #1
0c710     18 2F 02 F1 | 	add	local05, local06
0c714     02 2E 66 F0 | 	shl	local05, #2
0c718     03 00 00 FF 
0c71c     00 E4 85 F1 | 	sub	objptr, ##1536
0c720     F2 2E 02 F1 | 	add	local05, objptr
0c724     04 2E 06 F1 | 	add	local05, #4
0c728     17 33 62 FC | 	wrlong	local07, local05
0c72c     03 00 00 FF 
0c730     00 E4 05 F1 | 	add	objptr, ##1536
0c734     F2 32 02 FB | 	rdlong	local07, objptr
0c738     19 31 02 F6 | 	mov	local06, local07
0c73c     01 30 66 F0 | 	shl	local06, #1
0c740     19 31 02 F1 | 	add	local06, local07
0c744     02 30 66 F0 | 	shl	local06, #2
0c748     03 00 00 FF 
0c74c     00 E4 85 F1 | 	sub	objptr, ##1536
0c750     F2 30 02 F1 | 	add	local06, objptr
0c754     08 30 06 F1 | 	add	local06, #8
0c758     18 37 62 FC | 	wrlong	local09, local06
0c75c     03 00 00 FF 
0c760     00 E4 05 F1 | 	add	objptr, ##1536
0c764     F2 30 02 FB | 	rdlong	local06, objptr
0c768     01 30 06 F1 | 	add	local06, #1
0c76c     F2 30 62 FC | 	wrlong	local06, objptr
0c770     13 00 00 FF 
0c774     38 E4 85 F1 | 	sub	objptr, ##9784
0c778     F2 30 02 FB | 	rdlong	local06, objptr
0c77c     01 30 06 F1 | 	add	local06, #1
0c780     F2 30 62 FC | 	wrlong	local06, objptr
0c784     37 00 00 FF 
0c788     44 E4 85 F1 | 	sub	objptr, ##28228
0c78c     24 05 90 FD | 	jmp	#LR__1023
0c790                 | LR__1011
0c790                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c790     01 2C 0E F2 | 	cmp	local04, #1 wz
0c794     48 00 90 5D |  if_ne	jmp	#LR__1012
0c798     00 C0 1F FF 
0c79c     00 30 06 F6 | 	mov	local06, ##1065353216
0c7a0     37 00 00 FF 
0c7a4     44 E4 05 F1 | 	add	objptr, ##28228
0c7a8     F2 36 02 FB | 	rdlong	local09, objptr
0c7ac     03 36 66 F0 | 	shl	local09, #3
0c7b0     02 00 00 FF 
0c7b4     38 E4 85 F1 | 	sub	objptr, ##1080
0c7b8     F2 36 02 F1 | 	add	local09, objptr
0c7bc     1B 13 02 FB | 	rdlong	arg01, local09
0c7c0     35 00 00 FF 
0c7c4     0C E4 85 F1 | 	sub	objptr, ##27148
0c7c8     B4 D7 B1 FD | 	call	#__system____builtin_atof
0c7cc     FD 14 02 F6 | 	mov	arg02, result1
0c7d0     18 13 02 F6 | 	mov	arg01, local06
0c7d4     9C CF B1 FD | 	call	#__system___float_mul
0c7d8     FD 26 02 F6 | 	mov	local01, result1
0c7dc     1E 2A 06 F6 | 	mov	local03, #30
0c7e0                 | LR__1012
0c7e0                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c7e0     FF FF 7F FF 
0c7e4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c7e8     48 00 90 5D |  if_ne	jmp	#LR__1013
0c7ec     00 C0 5F FF 
0c7f0     00 30 06 F6 | 	mov	local06, ##-1082130432
0c7f4     37 00 00 FF 
0c7f8     44 E4 05 F1 | 	add	objptr, ##28228
0c7fc     F2 36 02 FB | 	rdlong	local09, objptr
0c800     03 36 66 F0 | 	shl	local09, #3
0c804     02 00 00 FF 
0c808     38 E4 85 F1 | 	sub	objptr, ##1080
0c80c     F2 36 02 F1 | 	add	local09, objptr
0c810     1B 13 02 FB | 	rdlong	arg01, local09
0c814     35 00 00 FF 
0c818     0C E4 85 F1 | 	sub	objptr, ##27148
0c81c     60 D7 B1 FD | 	call	#__system____builtin_atof
0c820     FD 14 02 F6 | 	mov	arg02, result1
0c824     18 13 02 F6 | 	mov	arg01, local06
0c828     48 CF B1 FD | 	call	#__system___float_mul
0c82c     FD 26 02 F6 | 	mov	local01, result1
0c830     1E 2A 06 F6 | 	mov	local03, #30
0c834                 | LR__1013
0c834     13 31 02 F6 | 	mov	local06, local01
0c838     14 33 02 F6 | 	mov	local07, local02
0c83c     15 2F 02 F6 | 	mov	local05, local03
0c840     4A 00 00 FF 
0c844     7C E4 05 F1 | 	add	objptr, ##38012
0c848     F2 26 02 FB | 	rdlong	local01, objptr
0c84c     13 37 02 F6 | 	mov	local09, local01
0c850     01 36 66 F0 | 	shl	local09, #1
0c854     13 37 02 F1 | 	add	local09, local01
0c858     02 36 66 F0 | 	shl	local09, #2
0c85c     03 00 00 FF 
0c860     00 E4 85 F1 | 	sub	objptr, ##1536
0c864     F2 36 02 F1 | 	add	local09, objptr
0c868     1B 31 62 FC | 	wrlong	local06, local09
0c86c     03 00 00 FF 
0c870     00 E4 05 F1 | 	add	objptr, ##1536
0c874     F2 36 02 FB | 	rdlong	local09, objptr
0c878     1B 31 02 F6 | 	mov	local06, local09
0c87c     01 30 66 F0 | 	shl	local06, #1
0c880     1B 31 02 F1 | 	add	local06, local09
0c884     02 30 66 F0 | 	shl	local06, #2
0c888     03 00 00 FF 
0c88c     00 E4 85 F1 | 	sub	objptr, ##1536
0c890     F2 30 02 F1 | 	add	local06, objptr
0c894     04 30 06 F1 | 	add	local06, #4
0c898     18 33 62 FC | 	wrlong	local07, local06
0c89c     03 00 00 FF 
0c8a0     00 E4 05 F1 | 	add	objptr, ##1536
0c8a4     F2 36 02 FB | 	rdlong	local09, objptr
0c8a8     1B 33 02 F6 | 	mov	local07, local09
0c8ac     01 32 66 F0 | 	shl	local07, #1
0c8b0     1B 33 02 F1 | 	add	local07, local09
0c8b4     02 32 66 F0 | 	shl	local07, #2
0c8b8     03 00 00 FF 
0c8bc     00 E4 85 F1 | 	sub	objptr, ##1536
0c8c0     F2 32 02 F1 | 	add	local07, objptr
0c8c4     08 32 06 F1 | 	add	local07, #8
0c8c8     19 2F 62 FC | 	wrlong	local05, local07
0c8cc     03 00 00 FF 
0c8d0     00 E4 05 F1 | 	add	objptr, ##1536
0c8d4     F2 30 02 FB | 	rdlong	local06, objptr
0c8d8     01 30 06 F1 | 	add	local06, #1
0c8dc     F2 30 62 FC | 	wrlong	local06, objptr
0c8e0     13 00 00 FF 
0c8e4     38 E4 85 F1 | 	sub	objptr, ##9784
0c8e8     F2 30 02 FB | 	rdlong	local06, objptr
0c8ec     01 30 06 F1 | 	add	local06, #1
0c8f0     F2 30 62 FC | 	wrlong	local06, objptr
0c8f4     37 00 00 FF 
0c8f8     44 E4 85 F1 | 	sub	objptr, ##28228
0c8fc     B4 03 90 FD | 	jmp	#LR__1023
0c900                 | LR__1014
0c900     37 00 00 FF 
0c904     44 E4 05 F1 | 	add	objptr, ##28228
0c908     F2 16 02 FB | 	rdlong	arg03, objptr
0c90c     03 16 66 F0 | 	shl	arg03, #3
0c910     02 00 00 FF 
0c914     38 E4 85 F1 | 	sub	objptr, ##1080
0c918     F2 16 02 F1 | 	add	arg03, objptr
0c91c     0B 13 02 FB | 	rdlong	arg01, arg03
0c920     35 00 00 FF 
0c924     0C E4 85 F1 | 	sub	objptr, ##27148
0c928     09 35 02 F6 | 	mov	local08, arg01
0c92c     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c930                 | LR__1015
0c930     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c934     01 34 06 51 |  if_ne	add	local08, #1
0c938     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c93c                 | LR__1016
0c93c     09 35 82 F1 | 	sub	local08, arg01
0c940     1A FB 01 F6 | 	mov	result1, local08
0c944     52 00 00 FF 
0c948     F0 E4 05 F1 | 	add	objptr, ##42224
0c94c     F2 FA 61 FC | 	wrlong	result1, objptr
0c950     58 E4 85 F1 | 	sub	objptr, #88
0c954     F2 12 02 FB | 	rdlong	arg01, objptr
0c958     FD 12 82 F1 | 	sub	arg01, result1
0c95c     04 12 86 F1 | 	sub	arg01, #4
0c960     03 12 26 F5 | 	andn	arg01, #3
0c964     F2 12 62 FC | 	wrlong	arg01, objptr
0c968     58 E4 05 F1 | 	add	objptr, #88
0c96c     F2 14 02 FB | 	rdlong	arg02, objptr
0c970     52 00 00 FF 
0c974     F0 E4 85 F1 | 	sub	objptr, ##42224
0c978     2C 67 B1 FD | 	call	#_pslpoke
0c97c                 | '     pslpoke memtop,l
0c97c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0c97c     01 38 06 F6 | 	mov	local10, #1
0c980     52 00 00 FF 
0c984     F0 E4 05 F1 | 	add	objptr, ##42224
0c988     F2 3A 02 FB | 	rdlong	local11, objptr
0c98c     52 00 00 FF 
0c990     F0 E4 85 F1 | 	sub	objptr, ##42224
0c994     01 3A 06 F1 | 	add	local11, #1
0c998                 | LR__1017
0c998     1D 39 52 F2 | 	cmps	local10, local11 wc
0c99c     5C 00 90 3D |  if_ae	jmp	#LR__1018
0c9a0     52 00 00 FF 
0c9a4     98 E4 05 F1 | 	add	objptr, ##42136
0c9a8     F2 32 02 FB | 	rdlong	local07, objptr
0c9ac     03 32 06 F1 | 	add	local07, #3
0c9b0     1C 33 02 F1 | 	add	local07, local10
0c9b4     1B 00 00 FF 
0c9b8     54 E4 85 F1 | 	sub	objptr, ##13908
0c9bc     F2 36 02 FB | 	rdlong	local09, objptr
0c9c0     03 36 66 F0 | 	shl	local09, #3
0c9c4     02 00 00 FF 
0c9c8     38 E4 85 F1 | 	sub	objptr, ##1080
0c9cc     F2 36 02 F1 | 	add	local09, objptr
0c9d0     1B 13 02 FB | 	rdlong	arg01, local09
0c9d4     1C 15 02 F6 | 	mov	arg02, local10
0c9d8     01 16 06 F6 | 	mov	arg03, #1
0c9dc     35 00 00 FF 
0c9e0     0C E4 85 F1 | 	sub	objptr, ##27148
0c9e4     A8 C0 B1 FD | 	call	#__system__Mid_S
0c9e8     FD 14 C2 FA | 	rdbyte	arg02, result1
0c9ec     19 13 02 F6 | 	mov	arg01, local07
0c9f0     44 67 B1 FD | 	call	#_pspoke
0c9f4     01 38 06 F1 | 	add	local10, #1
0c9f8     9C FF 9F FD | 	jmp	#LR__1017
0c9fc                 | LR__1018
0c9fc     52 00 00 FF 
0ca00     98 E4 05 F1 | 	add	objptr, ##42136
0ca04     F2 26 02 FB | 	rdlong	local01, objptr
0ca08     2B 2A 06 F6 | 	mov	local03, #43
0ca0c     13 31 02 F6 | 	mov	local06, local01
0ca10     14 33 02 F6 | 	mov	local07, local02
0ca14     15 3B 02 F6 | 	mov	local11, local03
0ca18     08 00 00 FF 
0ca1c     1C E4 85 F1 | 	sub	objptr, ##4124
0ca20     F2 38 02 FB | 	rdlong	local10, objptr
0ca24     1C 37 02 F6 | 	mov	local09, local10
0ca28     01 36 66 F0 | 	shl	local09, #1
0ca2c     1C 37 02 F1 | 	add	local09, local10
0ca30     02 36 66 F0 | 	shl	local09, #2
0ca34     03 00 00 FF 
0ca38     00 E4 85 F1 | 	sub	objptr, ##1536
0ca3c     F2 36 02 F1 | 	add	local09, objptr
0ca40     1B 31 62 FC | 	wrlong	local06, local09
0ca44     03 00 00 FF 
0ca48     00 E4 05 F1 | 	add	objptr, ##1536
0ca4c     F2 38 02 FB | 	rdlong	local10, objptr
0ca50     1C 37 02 F6 | 	mov	local09, local10
0ca54     01 36 66 F0 | 	shl	local09, #1
0ca58     1C 37 02 F1 | 	add	local09, local10
0ca5c     02 36 66 F0 | 	shl	local09, #2
0ca60     03 00 00 FF 
0ca64     00 E4 85 F1 | 	sub	objptr, ##1536
0ca68     F2 36 02 F1 | 	add	local09, objptr
0ca6c     04 36 06 F1 | 	add	local09, #4
0ca70     1B 33 62 FC | 	wrlong	local07, local09
0ca74     03 00 00 FF 
0ca78     00 E4 05 F1 | 	add	objptr, ##1536
0ca7c     F2 38 02 FB | 	rdlong	local10, objptr
0ca80     1C 37 02 F6 | 	mov	local09, local10
0ca84     01 36 66 F0 | 	shl	local09, #1
0ca88     1C 37 02 F1 | 	add	local09, local10
0ca8c     02 36 66 F0 | 	shl	local09, #2
0ca90     03 00 00 FF 
0ca94     00 E4 85 F1 | 	sub	objptr, ##1536
0ca98     F2 36 02 F1 | 	add	local09, objptr
0ca9c     08 36 06 F1 | 	add	local09, #8
0caa0     1B 3B 62 FC | 	wrlong	local11, local09
0caa4     03 00 00 FF 
0caa8     00 E4 05 F1 | 	add	objptr, ##1536
0caac     F2 30 02 FB | 	rdlong	local06, objptr
0cab0     01 30 06 F1 | 	add	local06, #1
0cab4     F2 30 62 FC | 	wrlong	local06, objptr
0cab8     13 00 00 FF 
0cabc     38 E4 85 F1 | 	sub	objptr, ##9784
0cac0     F2 30 02 FB | 	rdlong	local06, objptr
0cac4     01 30 06 F1 | 	add	local06, #1
0cac8     F2 30 62 FC | 	wrlong	local06, objptr
0cacc     37 00 00 FF 
0cad0     44 E4 85 F1 | 	sub	objptr, ##28228
0cad4     DC 01 90 FD | 	jmp	#LR__1023
0cad8                 | LR__1019
0cad8     2C 2A 06 F6 | 	mov	local03, #44
0cadc     37 00 00 FF 
0cae0     44 E4 05 F1 | 	add	objptr, ##28228
0cae4     F2 30 02 FB | 	rdlong	local06, objptr
0cae8     03 30 66 F0 | 	shl	local06, #3
0caec     02 00 00 FF 
0caf0     38 E4 85 F1 | 	sub	objptr, ##1080
0caf4     F2 30 02 F1 | 	add	local06, objptr
0caf8     18 13 02 FB | 	rdlong	arg01, local06
0cafc     00 14 06 F6 | 	mov	arg02, #0
0cb00     35 00 00 FF 
0cb04     0C E4 85 F1 | 	sub	objptr, ##27148
0cb08     E0 D2 B1 FD | 	call	#__system____builtin_atoi
0cb0c     FD 26 02 F6 | 	mov	local01, result1
0cb10     13 31 02 F6 | 	mov	local06, local01
0cb14     14 33 02 F6 | 	mov	local07, local02
0cb18     15 3B 02 F6 | 	mov	local11, local03
0cb1c     4A 00 00 FF 
0cb20     7C E4 05 F1 | 	add	objptr, ##38012
0cb24     F2 38 02 FB | 	rdlong	local10, objptr
0cb28     1C 37 02 F6 | 	mov	local09, local10
0cb2c     01 36 66 F0 | 	shl	local09, #1
0cb30     1C 37 02 F1 | 	add	local09, local10
0cb34     02 36 66 F0 | 	shl	local09, #2
0cb38     03 00 00 FF 
0cb3c     00 E4 85 F1 | 	sub	objptr, ##1536
0cb40     F2 36 02 F1 | 	add	local09, objptr
0cb44     1B 31 62 FC | 	wrlong	local06, local09
0cb48     03 00 00 FF 
0cb4c     00 E4 05 F1 | 	add	objptr, ##1536
0cb50     F2 38 02 FB | 	rdlong	local10, objptr
0cb54     1C 37 02 F6 | 	mov	local09, local10
0cb58     01 36 66 F0 | 	shl	local09, #1
0cb5c     1C 37 02 F1 | 	add	local09, local10
0cb60     02 36 66 F0 | 	shl	local09, #2
0cb64     03 00 00 FF 
0cb68     00 E4 85 F1 | 	sub	objptr, ##1536
0cb6c     F2 36 02 F1 | 	add	local09, objptr
0cb70     04 36 06 F1 | 	add	local09, #4
0cb74     1B 33 62 FC | 	wrlong	local07, local09
0cb78     03 00 00 FF 
0cb7c     00 E4 05 F1 | 	add	objptr, ##1536
0cb80     F2 38 02 FB | 	rdlong	local10, objptr
0cb84     1C 37 02 F6 | 	mov	local09, local10
0cb88     01 36 66 F0 | 	shl	local09, #1
0cb8c     1C 37 02 F1 | 	add	local09, local10
0cb90     02 36 66 F0 | 	shl	local09, #2
0cb94     03 00 00 FF 
0cb98     00 E4 85 F1 | 	sub	objptr, ##1536
0cb9c     F2 36 02 F1 | 	add	local09, objptr
0cba0     08 36 06 F1 | 	add	local09, #8
0cba4     1B 3B 62 FC | 	wrlong	local11, local09
0cba8     03 00 00 FF 
0cbac     00 E4 05 F1 | 	add	objptr, ##1536
0cbb0     F2 30 02 FB | 	rdlong	local06, objptr
0cbb4     01 30 06 F1 | 	add	local06, #1
0cbb8     F2 30 62 FC | 	wrlong	local06, objptr
0cbbc     13 00 00 FF 
0cbc0     38 E4 85 F1 | 	sub	objptr, ##9784
0cbc4     F2 30 02 FB | 	rdlong	local06, objptr
0cbc8     01 30 06 F1 | 	add	local06, #1
0cbcc     F2 30 62 FC | 	wrlong	local06, objptr
0cbd0     37 00 00 FF 
0cbd4     44 E4 85 F1 | 	sub	objptr, ##28228
0cbd8     D8 00 90 FD | 	jmp	#LR__1023
0cbdc                 | LR__1020
0cbdc     16 13 02 F6 | 	mov	arg01, local04
0cbe0     24 04 B0 FD | 	call	#_getvar
0cbe4     37 00 00 FF 
0cbe8     44 E4 05 F1 | 	add	objptr, ##28228
0cbec     F2 30 02 FB | 	rdlong	local06, objptr
0cbf0     01 30 06 F1 | 	add	local06, #1
0cbf4     F2 30 62 FC | 	wrlong	local06, objptr
0cbf8     37 00 00 FF 
0cbfc     44 E4 85 F1 | 	sub	objptr, ##28228
0cc00                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cc00     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc04     B0 00 90 3D |  if_ae	jmp	#LR__1024
0cc08     A8 00 90 FD | 	jmp	#LR__1023
0cc0c                 | LR__1021
0cc0c     37 00 00 FF 
0cc10     44 E4 05 F1 | 	add	objptr, ##28228
0cc14     F2 30 02 FB | 	rdlong	local06, objptr
0cc18     01 30 06 F1 | 	add	local06, #1
0cc1c     F2 30 62 FC | 	wrlong	local06, objptr
0cc20     37 00 00 FF 
0cc24     44 E4 85 F1 | 	sub	objptr, ##28228
0cc28     20 F1 BF FD | 	call	#_expr
0cc2c                 | '     ct+=1
0cc2c                 | '     err=expr() : if err>0 then return err 
0cc2c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc30     84 00 90 3D |  if_ae	jmp	#LR__1024
0cc34                 | '     if lparts(ct).token=token_rpar then ct+=1
0cc34     37 00 00 FF 
0cc38     44 E4 05 F1 | 	add	objptr, ##28228
0cc3c     F2 3A 02 FB | 	rdlong	local11, objptr
0cc40     03 3A 66 F0 | 	shl	local11, #3
0cc44     02 00 00 FF 
0cc48     38 E4 85 F1 | 	sub	objptr, ##1080
0cc4c     F2 3A 02 F1 | 	add	local11, objptr
0cc50     04 3A 06 F1 | 	add	local11, #4
0cc54     1D 3B 02 FB | 	rdlong	local11, local11
0cc58     14 3A 0E F2 | 	cmp	local11, #20 wz
0cc5c     35 00 00 FF 
0cc60     0C E4 85 F1 | 	sub	objptr, ##27148
0cc64     4C 00 90 5D |  if_ne	jmp	#LR__1023
0cc68     37 00 00 FF 
0cc6c     44 E4 05 F1 | 	add	objptr, ##28228
0cc70     F2 30 02 FB | 	rdlong	local06, objptr
0cc74     01 30 06 F1 | 	add	local06, #1
0cc78     F2 30 62 FC | 	wrlong	local06, objptr
0cc7c     37 00 00 FF 
0cc80     44 E4 85 F1 | 	sub	objptr, ##28228
0cc84     2C 00 90 FD | 	jmp	#LR__1023
0cc88                 | LR__1022
0cc88     16 13 02 F6 | 	mov	arg01, local04
0cc8c     34 00 B0 FD | 	call	#_getfun
0cc90     37 00 00 FF 
0cc94     44 E4 05 F1 | 	add	objptr, ##28228
0cc98     F2 30 02 FB | 	rdlong	local06, objptr
0cc9c     01 30 06 F1 | 	add	local06, #1
0cca0     F2 30 62 FC | 	wrlong	local06, objptr
0cca4     37 00 00 FF 
0cca8     44 E4 85 F1 | 	sub	objptr, ##28228
0ccac                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0ccac     01 FA 55 F2 | 	cmps	result1, #1 wc
0ccb0     04 00 90 3D |  if_ae	jmp	#LR__1024
0ccb4                 | LR__1023
0ccb4                 | ' return 0  
0ccb4     00 FA 05 F6 | 	mov	result1, #0
0ccb8                 | LR__1024
0ccb8     A7 F0 03 F6 | 	mov	ptra, fp
0ccbc     B2 00 A0 FD | 	call	#popregs_
0ccc0                 | _getvalue_ret
0ccc0     2D 00 64 FD | 	ret
0ccc4                 | 
0ccc4                 | ' 
0ccc4                 | ' ' Get a function result 
0ccc4                 | ' 
0ccc4                 | ' function getfun(m as integer) as ulong
0ccc4                 | _getfun
0ccc4     0F 4A 05 F6 | 	mov	COUNT_, #15
0ccc8     A8 00 A0 FD | 	call	#pushregs_
0cccc                 | _getfun_enter
0cccc     09 2D 02 F6 | 	mov	local04, arg01
0ccd0     37 00 00 FF 
0ccd4     44 E4 05 F1 | 	add	objptr, ##28228
0ccd8     F2 2E 02 FB | 	rdlong	local05, objptr
0ccdc     17 31 02 F6 | 	mov	local06, local05
0cce0     00 32 06 F6 | 	mov	local07, #0
0cce4                 | ' oldct=ct
0cce4                 | ' numpar=0
0cce4                 | ' if lparts(ct+1).token=token_lpar then
0cce4     01 2E 06 F1 | 	add	local05, #1
0cce8     03 2E 66 F0 | 	shl	local05, #3
0ccec     02 00 00 FF 
0ccf0     38 E4 85 F1 | 	sub	objptr, ##1080
0ccf4     F2 2E 02 F1 | 	add	local05, objptr
0ccf8     04 2E 06 F1 | 	add	local05, #4
0ccfc     17 2F 02 FB | 	rdlong	local05, local05
0cd00     15 2E 0E F2 | 	cmp	local05, #21 wz
0cd04     35 00 00 FF 
0cd08     0C E4 85 F1 | 	sub	objptr, ##27148
0cd0c     54 01 90 5D |  if_ne	jmp	#LR__1034
0cd10     37 00 00 FF 
0cd14     44 E4 05 F1 | 	add	objptr, ##28228
0cd18     F2 34 02 FB | 	rdlong	local08, objptr
0cd1c     01 34 06 F1 | 	add	local08, #1
0cd20     F2 34 62 FC | 	wrlong	local08, objptr
0cd24     37 00 00 FF 
0cd28     44 E4 85 F1 | 	sub	objptr, ##28228
0cd2c                 | '   ct+=1 											' omit this lpar, this is for expr list
0cd2c                 | '   do
0cd2c                 | LR__1030
0cd2c     37 00 00 FF 
0cd30     44 E4 05 F1 | 	add	objptr, ##28228
0cd34     F2 2E 02 FB | 	rdlong	local05, objptr
0cd38     01 2E 06 F1 | 	add	local05, #1
0cd3c     F2 2E 62 FC | 	wrlong	local05, objptr
0cd40                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cd40                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cd40     03 2E 66 F0 | 	shl	local05, #3
0cd44     02 00 00 FF 
0cd48     38 E4 85 F1 | 	sub	objptr, ##1080
0cd4c     F2 2E 02 F1 | 	add	local05, objptr
0cd50     04 2E 06 F1 | 	add	local05, #4
0cd54     17 35 02 FB | 	rdlong	local08, local05
0cd58     15 34 0E F2 | 	cmp	local08, #21 wz
0cd5c     35 00 00 FF 
0cd60     0C E4 85 F1 | 	sub	objptr, ##27148
0cd64     44 00 90 5D |  if_ne	jmp	#LR__1031
0cd68     37 00 00 FF 
0cd6c     44 E4 05 F1 | 	add	objptr, ##28228
0cd70     F2 34 02 FB | 	rdlong	local08, objptr
0cd74     01 34 06 F1 | 	add	local08, #1
0cd78     F2 34 62 FC | 	wrlong	local08, objptr
0cd7c     37 00 00 FF 
0cd80     44 E4 85 F1 | 	sub	objptr, ##28228
0cd84     C4 EF BF FD | 	call	#_expr
0cd88     FD 36 02 F6 | 	mov	local09, result1
0cd8c     37 00 00 FF 
0cd90     44 E4 05 F1 | 	add	objptr, ##28228
0cd94     F2 34 02 FB | 	rdlong	local08, objptr
0cd98     01 34 06 F1 | 	add	local08, #1
0cd9c     F2 34 62 FC | 	wrlong	local08, objptr
0cda0     37 00 00 FF 
0cda4     44 E4 85 F1 | 	sub	objptr, ##28228
0cda8     08 00 90 FD | 	jmp	#LR__1032
0cdac                 | LR__1031
0cdac     9C EF BF FD | 	call	#_expr
0cdb0     FD 36 02 F6 | 	mov	local09, result1
0cdb4                 | LR__1032
0cdb4                 | '     if err>0 then return err
0cdb4     01 36 16 F2 | 	cmp	local09, #1 wc
0cdb8     1B FB 01 36 |  if_ae	mov	result1, local09
0cdbc     3C 02 90 3D |  if_ae	jmp	#LR__1036
0cdc0     01 32 06 F1 | 	add	local07, #1
0cdc4     37 00 00 FF 
0cdc8     44 E4 05 F1 | 	add	objptr, ##28228
0cdcc     F2 2E 02 FB | 	rdlong	local05, objptr
0cdd0     03 2E 66 F0 | 	shl	local05, #3
0cdd4     02 00 00 FF 
0cdd8     38 E4 85 F1 | 	sub	objptr, ##1080
0cddc     F2 2E 02 F1 | 	add	local05, objptr
0cde0     04 2E 06 F1 | 	add	local05, #4
0cde4     17 37 02 FB | 	rdlong	local09, local05
0cde8     14 36 0E F2 | 	cmp	local09, #20 wz
0cdec     35 00 00 FF 
0cdf0     0C E4 85 F1 | 	sub	objptr, ##27148
0cdf4     34 00 90 AD |  if_e	jmp	#LR__1033
0cdf8     37 00 00 FF 
0cdfc     44 E4 05 F1 | 	add	objptr, ##28228
0ce00     F2 36 02 FB | 	rdlong	local09, objptr
0ce04     03 36 66 F0 | 	shl	local09, #3
0ce08     02 00 00 FF 
0ce0c     38 E4 85 F1 | 	sub	objptr, ##1080
0ce10     F2 36 02 F1 | 	add	local09, objptr
0ce14     04 36 06 F1 | 	add	local09, #4
0ce18     1B 37 02 FB | 	rdlong	local09, local09
0ce1c     FE 37 0E F2 | 	cmp	local09, #510 wz
0ce20     35 00 00 FF 
0ce24     0C E4 85 F1 | 	sub	objptr, ##27148
0ce28     00 FF 9F 5D |  if_ne	jmp	#LR__1030
0ce2c                 | LR__1033
0ce2c                 | '   if lparts(ct).token=token_end then return 14
0ce2c     37 00 00 FF 
0ce30     44 E4 05 F1 | 	add	objptr, ##28228
0ce34     F2 2E 02 FB | 	rdlong	local05, objptr
0ce38     03 2E 66 F0 | 	shl	local05, #3
0ce3c     02 00 00 FF 
0ce40     38 E4 85 F1 | 	sub	objptr, ##1080
0ce44     F2 2E 02 F1 | 	add	local05, objptr
0ce48     04 2E 06 F1 | 	add	local05, #4
0ce4c     17 37 02 FB | 	rdlong	local09, local05
0ce50     FE 37 0E F2 | 	cmp	local09, #510 wz
0ce54     35 00 00 FF 
0ce58     0C E4 85 F1 | 	sub	objptr, ##27148
0ce5c     0E FA 05 A6 |  if_e	mov	result1, #14
0ce60     98 01 90 AD |  if_e	jmp	#LR__1036
0ce64                 | LR__1034
0ce64     19 27 02 F6 | 	mov	local01, local07
0ce68     03 30 66 F0 | 	shl	local06, #3
0ce6c     35 00 00 FF 
0ce70     0C E4 05 F1 | 	add	objptr, ##27148
0ce74     F2 30 02 F1 | 	add	local06, objptr
0ce78     04 30 06 F1 | 	add	local06, #4
0ce7c     18 2B 02 FB | 	rdlong	local03, local06
0ce80     13 35 02 F6 | 	mov	local08, local01
0ce84     14 39 02 F6 | 	mov	local10, local02
0ce88     15 3B 02 F6 | 	mov	local11, local03
0ce8c     15 00 00 FF 
0ce90     70 E4 05 F1 | 	add	objptr, ##10864
0ce94     F2 3C 02 FB | 	rdlong	local12, objptr
0ce98     1E 3F 02 F6 | 	mov	local13, local12
0ce9c     01 3E 66 F0 | 	shl	local13, #1
0cea0     1E 3F 02 F1 | 	add	local13, local12
0cea4     02 3E 66 F0 | 	shl	local13, #2
0cea8     03 00 00 FF 
0ceac     00 E4 85 F1 | 	sub	objptr, ##1536
0ceb0     F2 3E 02 F1 | 	add	local13, objptr
0ceb4     1F 35 62 FC | 	wrlong	local08, local13
0ceb8     03 00 00 FF 
0cebc     00 E4 05 F1 | 	add	objptr, ##1536
0cec0     F2 34 02 FB | 	rdlong	local08, objptr
0cec4     1A 41 02 F6 | 	mov	local14, local08
0cec8     01 40 66 F0 | 	shl	local14, #1
0cecc     1A 41 02 F1 | 	add	local14, local08
0ced0     02 40 66 F0 | 	shl	local14, #2
0ced4     03 00 00 FF 
0ced8     00 E4 85 F1 | 	sub	objptr, ##1536
0cedc     F2 40 02 F1 | 	add	local14, objptr
0cee0     04 40 06 F1 | 	add	local14, #4
0cee4     20 39 62 FC | 	wrlong	local10, local14
0cee8     03 00 00 FF 
0ceec     00 E4 05 F1 | 	add	objptr, ##1536
0cef0     F2 34 02 FB | 	rdlong	local08, objptr
0cef4     1A 43 02 F6 | 	mov	local15, local08
0cef8     01 42 66 F0 | 	shl	local15, #1
0cefc     1A 43 02 F1 | 	add	local15, local08
0cf00     02 42 66 F0 | 	shl	local15, #2
0cf04     03 00 00 FF 
0cf08     00 E4 85 F1 | 	sub	objptr, ##1536
0cf0c     F2 42 02 F1 | 	add	local15, objptr
0cf10     08 42 06 F1 | 	add	local15, #8
0cf14     21 3B 62 FC | 	wrlong	local11, local15
0cf18     03 00 00 FF 
0cf1c     00 E4 05 F1 | 	add	objptr, ##1536
0cf20     F2 34 02 FB | 	rdlong	local08, objptr
0cf24     01 34 06 F1 | 	add	local08, #1
0cf28     F2 34 62 FC | 	wrlong	local08, objptr
0cf2c     4A 00 00 FF 
0cf30     7C E4 85 F1 | 	sub	objptr, ##38012
0cf34                 | ' t2.result.uresult=numpar
0cf34                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0cf34                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0cf34                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0cf34     FF FF 7F FF 
0cf38     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0cf3c     B8 00 90 5D |  if_ne	jmp	#LR__1035
0cf40     15 2A 06 F6 | 	mov	local03, #21
0cf44     13 35 02 F6 | 	mov	local08, local01
0cf48     14 39 02 F6 | 	mov	local10, local02
0cf4c     15 3B 02 F6 | 	mov	local11, local03
0cf50     4A 00 00 FF 
0cf54     7C E4 05 F1 | 	add	objptr, ##38012
0cf58     F2 3C 02 FB | 	rdlong	local12, objptr
0cf5c     1E 3F 02 F6 | 	mov	local13, local12
0cf60     01 3E 66 F0 | 	shl	local13, #1
0cf64     1E 3F 02 F1 | 	add	local13, local12
0cf68     02 3E 66 F0 | 	shl	local13, #2
0cf6c     03 00 00 FF 
0cf70     00 E4 85 F1 | 	sub	objptr, ##1536
0cf74     F2 3E 02 F1 | 	add	local13, objptr
0cf78     1F 35 62 FC | 	wrlong	local08, local13
0cf7c     03 00 00 FF 
0cf80     00 E4 05 F1 | 	add	objptr, ##1536
0cf84     F2 42 02 FB | 	rdlong	local15, objptr
0cf88     21 41 02 F6 | 	mov	local14, local15
0cf8c     01 40 66 F0 | 	shl	local14, #1
0cf90     21 41 02 F1 | 	add	local14, local15
0cf94     02 40 66 F0 | 	shl	local14, #2
0cf98     03 00 00 FF 
0cf9c     00 E4 85 F1 | 	sub	objptr, ##1536
0cfa0     F2 40 02 F1 | 	add	local14, objptr
0cfa4     04 40 06 F1 | 	add	local14, #4
0cfa8     20 39 62 FC | 	wrlong	local10, local14
0cfac     03 00 00 FF 
0cfb0     00 E4 05 F1 | 	add	objptr, ##1536
0cfb4     F2 40 02 FB | 	rdlong	local14, objptr
0cfb8     20 43 02 F6 | 	mov	local15, local14
0cfbc     01 42 66 F0 | 	shl	local15, #1
0cfc0     20 43 02 F1 | 	add	local15, local14
0cfc4     02 42 66 F0 | 	shl	local15, #2
0cfc8     03 00 00 FF 
0cfcc     00 E4 85 F1 | 	sub	objptr, ##1536
0cfd0     F2 42 02 F1 | 	add	local15, objptr
0cfd4     08 42 06 F1 | 	add	local15, #8
0cfd8     21 3B 62 FC | 	wrlong	local11, local15
0cfdc     03 00 00 FF 
0cfe0     00 E4 05 F1 | 	add	objptr, ##1536
0cfe4     F2 34 02 FB | 	rdlong	local08, objptr
0cfe8     01 34 06 F1 | 	add	local08, #1
0cfec     F2 34 62 FC | 	wrlong	local08, objptr
0cff0     4A 00 00 FF 
0cff4     7C E4 85 F1 | 	sub	objptr, ##38012
0cff8                 | LR__1035
0cff8                 | ' return 0
0cff8     00 FA 05 F6 | 	mov	result1, #0
0cffc                 | LR__1036
0cffc     A7 F0 03 F6 | 	mov	ptra, fp
0d000     B2 00 A0 FD | 	call	#popregs_
0d004                 | _getfun_ret
0d004     2D 00 64 FD | 	ret
0d008                 | 
0d008                 | '   
0d008                 | '   
0d008                 | ' function getvar(m as integer) as ulong
0d008                 | _getvar
0d008     11 4A 05 F6 | 	mov	COUNT_, #17
0d00c     A8 00 A0 FD | 	call	#pushregs_
0d010                 | _getvar_enter
0d010     09 2D 02 F6 | 	mov	local04, arg01
0d014     37 00 00 FF 
0d018     44 E4 05 F1 | 	add	objptr, ##28228
0d01c     F2 2E 02 FB | 	rdlong	local05, objptr
0d020     03 2E 66 F0 | 	shl	local05, #3
0d024     02 00 00 FF 
0d028     38 E4 85 F1 | 	sub	objptr, ##1080
0d02c     F2 2E 02 F1 | 	add	local05, objptr
0d030     17 31 02 FB | 	rdlong	local06, local05
0d034     01 32 66 F6 | 	neg	local07, #1
0d038                 | ' 
0d038                 | ' varname$=lparts(ct).part$
0d038                 | ' j=-1
0d038                 | ' 
0d038                 | ' for i=0 to varnum-1
0d038     00 34 06 F6 | 	mov	local08, #0
0d03c     04 E4 85 F1 | 	sub	objptr, #4
0d040     F2 36 02 FB | 	rdlong	local09, objptr
0d044     35 00 00 FF 
0d048     08 E4 85 F1 | 	sub	objptr, ##27144
0d04c                 | LR__1040
0d04c     1B 35 52 F2 | 	cmps	local08, local09 wc
0d050     38 00 90 3D |  if_ae	jmp	#LR__1041
0d054                 | '   if variables(i).name=varname$ then j=i : exit
0d054     1A 2F 02 F6 | 	mov	local05, local08
0d058     04 2E 66 F0 | 	shl	local05, #4
0d05c     14 00 00 FF 
0d060     F8 E5 05 F1 | 	add	objptr, ##10744
0d064     F2 2E 02 F1 | 	add	local05, objptr
0d068     17 13 02 FB | 	rdlong	arg01, local05
0d06c     18 15 02 F6 | 	mov	arg02, local06
0d070     14 00 00 FF 
0d074     F8 E5 85 F1 | 	sub	objptr, ##10744
0d078     A4 98 B1 FD | 	call	#__system___string_cmp
0d07c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d080     1A 33 02 A6 |  if_e	mov	local07, local08
0d084     01 34 06 51 |  if_ne	add	local08, #1
0d088     C0 FF 9F 5D |  if_ne	jmp	#LR__1040
0d08c                 | LR__1041
0d08c                 | ' if  j=-1 andalso varnum<maxvars then   
0d08c     FF FF 7F FF 
0d090     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d094     A8 00 90 5D |  if_ne	jmp	#LR__1042
0d098     35 00 00 FF 
0d09c     08 E4 05 F1 | 	add	objptr, ##27144
0d0a0     F2 36 02 FB | 	rdlong	local09, objptr
0d0a4     35 00 00 FF 
0d0a8     08 E4 85 F1 | 	sub	objptr, ##27144
0d0ac     02 00 00 FF 
0d0b0     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d0b4     88 00 90 3D |  if_ae	jmp	#LR__1042
0d0b8     35 00 00 FF 
0d0bc     08 E4 05 F1 | 	add	objptr, ##27144
0d0c0     F2 2E 02 FB | 	rdlong	local05, objptr
0d0c4     04 2E 66 F0 | 	shl	local05, #4
0d0c8     20 00 00 FF 
0d0cc     10 E4 85 F1 | 	sub	objptr, ##16400
0d0d0     F2 2E 02 F1 | 	add	local05, objptr
0d0d4     17 31 62 FC | 	wrlong	local06, local05
0d0d8     20 00 00 FF 
0d0dc     10 E4 05 F1 | 	add	objptr, ##16400
0d0e0     F2 2E 02 FB | 	rdlong	local05, objptr
0d0e4     04 2E 66 F0 | 	shl	local05, #4
0d0e8     20 00 00 FF 
0d0ec     10 E4 85 F1 | 	sub	objptr, ##16400
0d0f0     F2 2E 02 F1 | 	add	local05, objptr
0d0f4     04 2E 06 F1 | 	add	local05, #4
0d0f8     17 01 68 FC | 	wrlong	#0, local05
0d0fc     20 00 00 FF 
0d100     10 E4 05 F1 | 	add	objptr, ##16400
0d104     F2 2E 02 FB | 	rdlong	local05, objptr
0d108     04 2E 66 F0 | 	shl	local05, #4
0d10c     20 00 00 FF 
0d110     10 E4 85 F1 | 	sub	objptr, ##16400
0d114     F2 2E 02 F1 | 	add	local05, objptr
0d118     0C 2E 06 F1 | 	add	local05, #12
0d11c     17 39 68 FC | 	wrlong	#28, local05
0d120     20 00 00 FF 
0d124     10 E4 05 F1 | 	add	objptr, ##16400
0d128     F2 36 02 FB | 	rdlong	local09, objptr
0d12c     1B 33 02 F6 | 	mov	local07, local09
0d130     01 36 06 F1 | 	add	local09, #1
0d134     F2 36 62 FC | 	wrlong	local09, objptr
0d138     35 00 00 FF 
0d13c     08 E4 85 F1 | 	sub	objptr, ##27144
0d140                 | LR__1042
0d140     00 36 06 F6 | 	mov	local09, #0
0d144                 | ' numpar=0
0d144                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d144     37 00 00 FF 
0d148     44 E4 05 F1 | 	add	objptr, ##28228
0d14c     F2 2E 02 FB | 	rdlong	local05, objptr
0d150     01 2E 06 F1 | 	add	local05, #1
0d154     03 2E 66 F0 | 	shl	local05, #3
0d158     02 00 00 FF 
0d15c     38 E4 85 F1 | 	sub	objptr, ##1080
0d160     F2 2E 02 F1 | 	add	local05, objptr
0d164     04 2E 06 F1 | 	add	local05, #4
0d168     17 35 02 FB | 	rdlong	local08, local05
0d16c     15 34 0E F2 | 	cmp	local08, #21 wz
0d170     35 00 00 FF 
0d174     0C E4 85 F1 | 	sub	objptr, ##27148
0d178     54 01 90 5D |  if_ne	jmp	#LR__1047
0d17c     37 00 00 FF 
0d180     44 E4 05 F1 | 	add	objptr, ##28228
0d184     F2 38 02 FB | 	rdlong	local10, objptr
0d188     01 38 06 F1 | 	add	local10, #1
0d18c     F2 38 62 FC | 	wrlong	local10, objptr
0d190     37 00 00 FF 
0d194     44 E4 85 F1 | 	sub	objptr, ##28228
0d198                 | '   ct+=1 											' omit this lpar, this is for expr list
0d198                 | '   do
0d198                 | LR__1043
0d198     37 00 00 FF 
0d19c     44 E4 05 F1 | 	add	objptr, ##28228
0d1a0     F2 2E 02 FB | 	rdlong	local05, objptr
0d1a4     01 2E 06 F1 | 	add	local05, #1
0d1a8     F2 2E 62 FC | 	wrlong	local05, objptr
0d1ac                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d1ac                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d1ac     03 2E 66 F0 | 	shl	local05, #3
0d1b0     02 00 00 FF 
0d1b4     38 E4 85 F1 | 	sub	objptr, ##1080
0d1b8     F2 2E 02 F1 | 	add	local05, objptr
0d1bc     04 2E 06 F1 | 	add	local05, #4
0d1c0     17 39 02 FB | 	rdlong	local10, local05
0d1c4     15 38 0E F2 | 	cmp	local10, #21 wz
0d1c8     35 00 00 FF 
0d1cc     0C E4 85 F1 | 	sub	objptr, ##27148
0d1d0     44 00 90 5D |  if_ne	jmp	#LR__1044
0d1d4     37 00 00 FF 
0d1d8     44 E4 05 F1 | 	add	objptr, ##28228
0d1dc     F2 38 02 FB | 	rdlong	local10, objptr
0d1e0     01 38 06 F1 | 	add	local10, #1
0d1e4     F2 38 62 FC | 	wrlong	local10, objptr
0d1e8     37 00 00 FF 
0d1ec     44 E4 85 F1 | 	sub	objptr, ##28228
0d1f0     58 EB BF FD | 	call	#_expr
0d1f4     FD 3A 02 F6 | 	mov	local11, result1
0d1f8     37 00 00 FF 
0d1fc     44 E4 05 F1 | 	add	objptr, ##28228
0d200     F2 38 02 FB | 	rdlong	local10, objptr
0d204     01 38 06 F1 | 	add	local10, #1
0d208     F2 38 62 FC | 	wrlong	local10, objptr
0d20c     37 00 00 FF 
0d210     44 E4 85 F1 | 	sub	objptr, ##28228
0d214     08 00 90 FD | 	jmp	#LR__1045
0d218                 | LR__1044
0d218     30 EB BF FD | 	call	#_expr
0d21c     FD 3A 02 F6 | 	mov	local11, result1
0d220                 | LR__1045
0d220                 | '     if err>0 then return err
0d220     01 3A 56 F2 | 	cmps	local11, #1 wc
0d224     1D FB 01 36 |  if_ae	mov	result1, local11
0d228     2C 02 90 3D |  if_ae	jmp	#LR__1049
0d22c     01 36 06 F1 | 	add	local09, #1
0d230     37 00 00 FF 
0d234     44 E4 05 F1 | 	add	objptr, ##28228
0d238     F2 2E 02 FB | 	rdlong	local05, objptr
0d23c     03 2E 66 F0 | 	shl	local05, #3
0d240     02 00 00 FF 
0d244     38 E4 85 F1 | 	sub	objptr, ##1080
0d248     F2 2E 02 F1 | 	add	local05, objptr
0d24c     04 2E 06 F1 | 	add	local05, #4
0d250     17 3B 02 FB | 	rdlong	local11, local05
0d254     14 3A 0E F2 | 	cmp	local11, #20 wz
0d258     35 00 00 FF 
0d25c     0C E4 85 F1 | 	sub	objptr, ##27148
0d260     34 00 90 AD |  if_e	jmp	#LR__1046
0d264     37 00 00 FF 
0d268     44 E4 05 F1 | 	add	objptr, ##28228
0d26c     F2 3A 02 FB | 	rdlong	local11, objptr
0d270     03 3A 66 F0 | 	shl	local11, #3
0d274     02 00 00 FF 
0d278     38 E4 85 F1 | 	sub	objptr, ##1080
0d27c     F2 3A 02 F1 | 	add	local11, objptr
0d280     04 3A 06 F1 | 	add	local11, #4
0d284     1D 3B 02 FB | 	rdlong	local11, local11
0d288     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d28c     35 00 00 FF 
0d290     0C E4 85 F1 | 	sub	objptr, ##27148
0d294     00 FF 9F 5D |  if_ne	jmp	#LR__1043
0d298                 | LR__1046
0d298                 | '     if lparts(ct).token=token_end then return 14
0d298     37 00 00 FF 
0d29c     44 E4 05 F1 | 	add	objptr, ##28228
0d2a0     F2 2E 02 FB | 	rdlong	local05, objptr
0d2a4     03 2E 66 F0 | 	shl	local05, #3
0d2a8     02 00 00 FF 
0d2ac     38 E4 85 F1 | 	sub	objptr, ##1080
0d2b0     F2 2E 02 F1 | 	add	local05, objptr
0d2b4     04 2E 06 F1 | 	add	local05, #4
0d2b8     17 3B 02 FB | 	rdlong	local11, local05
0d2bc     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d2c0     35 00 00 FF 
0d2c4     0C E4 85 F1 | 	sub	objptr, ##27148
0d2c8     0E FA 05 A6 |  if_e	mov	result1, #14
0d2cc     88 01 90 AD |  if_e	jmp	#LR__1049
0d2d0                 | LR__1047
0d2d0     1B 29 02 F6 | 	mov	local02, local09
0d2d4     11 2A 06 F6 | 	mov	local03, #17
0d2d8     19 27 02 F6 | 	mov	local01, local07
0d2dc     13 39 02 F6 | 	mov	local10, local01
0d2e0     14 3D 02 F6 | 	mov	local12, local02
0d2e4     15 3F 02 F6 | 	mov	local13, local03
0d2e8     4A 00 00 FF 
0d2ec     7C E4 05 F1 | 	add	objptr, ##38012
0d2f0     F2 40 02 FB | 	rdlong	local14, objptr
0d2f4     20 43 02 F6 | 	mov	local15, local14
0d2f8     01 42 66 F0 | 	shl	local15, #1
0d2fc     20 43 02 F1 | 	add	local15, local14
0d300     02 42 66 F0 | 	shl	local15, #2
0d304     03 00 00 FF 
0d308     00 E4 85 F1 | 	sub	objptr, ##1536
0d30c     F2 42 02 F1 | 	add	local15, objptr
0d310     21 39 62 FC | 	wrlong	local10, local15
0d314     03 00 00 FF 
0d318     00 E4 05 F1 | 	add	objptr, ##1536
0d31c     F2 38 02 FB | 	rdlong	local10, objptr
0d320     1C 45 02 F6 | 	mov	local16, local10
0d324     01 44 66 F0 | 	shl	local16, #1
0d328     1C 45 02 F1 | 	add	local16, local10
0d32c     02 44 66 F0 | 	shl	local16, #2
0d330     03 00 00 FF 
0d334     00 E4 85 F1 | 	sub	objptr, ##1536
0d338     F2 44 02 F1 | 	add	local16, objptr
0d33c     04 44 06 F1 | 	add	local16, #4
0d340     22 3D 62 FC | 	wrlong	local12, local16
0d344     03 00 00 FF 
0d348     00 E4 05 F1 | 	add	objptr, ##1536
0d34c     F2 38 02 FB | 	rdlong	local10, objptr
0d350     1C 47 02 F6 | 	mov	local17, local10
0d354     01 46 66 F0 | 	shl	local17, #1
0d358     1C 47 02 F1 | 	add	local17, local10
0d35c     02 46 66 F0 | 	shl	local17, #2
0d360     03 00 00 FF 
0d364     00 E4 85 F1 | 	sub	objptr, ##1536
0d368     F2 46 02 F1 | 	add	local17, objptr
0d36c     08 46 06 F1 | 	add	local17, #8
0d370     23 3F 62 FC | 	wrlong	local13, local17
0d374     03 00 00 FF 
0d378     00 E4 05 F1 | 	add	objptr, ##1536
0d37c     F2 38 02 FB | 	rdlong	local10, objptr
0d380     01 38 06 F1 | 	add	local10, #1
0d384     F2 38 62 FC | 	wrlong	local10, objptr
0d388     4A 00 00 FF 
0d38c     7C E4 85 F1 | 	sub	objptr, ##38012
0d390                 | ' t2.result.twowords(1)=numpar
0d390                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d390                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d390                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d390     FF FF 7F FF 
0d394     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d398     B8 00 90 5D |  if_ne	jmp	#LR__1048
0d39c     15 2A 06 F6 | 	mov	local03, #21
0d3a0     13 39 02 F6 | 	mov	local10, local01
0d3a4     14 3D 02 F6 | 	mov	local12, local02
0d3a8     15 3F 02 F6 | 	mov	local13, local03
0d3ac     4A 00 00 FF 
0d3b0     7C E4 05 F1 | 	add	objptr, ##38012
0d3b4     F2 40 02 FB | 	rdlong	local14, objptr
0d3b8     20 43 02 F6 | 	mov	local15, local14
0d3bc     01 42 66 F0 | 	shl	local15, #1
0d3c0     20 43 02 F1 | 	add	local15, local14
0d3c4     02 42 66 F0 | 	shl	local15, #2
0d3c8     03 00 00 FF 
0d3cc     00 E4 85 F1 | 	sub	objptr, ##1536
0d3d0     F2 42 02 F1 | 	add	local15, objptr
0d3d4     21 39 62 FC | 	wrlong	local10, local15
0d3d8     03 00 00 FF 
0d3dc     00 E4 05 F1 | 	add	objptr, ##1536
0d3e0     F2 46 02 FB | 	rdlong	local17, objptr
0d3e4     23 45 02 F6 | 	mov	local16, local17
0d3e8     01 44 66 F0 | 	shl	local16, #1
0d3ec     23 45 02 F1 | 	add	local16, local17
0d3f0     02 44 66 F0 | 	shl	local16, #2
0d3f4     03 00 00 FF 
0d3f8     00 E4 85 F1 | 	sub	objptr, ##1536
0d3fc     F2 44 02 F1 | 	add	local16, objptr
0d400     04 44 06 F1 | 	add	local16, #4
0d404     22 3D 62 FC | 	wrlong	local12, local16
0d408     03 00 00 FF 
0d40c     00 E4 05 F1 | 	add	objptr, ##1536
0d410     F2 44 02 FB | 	rdlong	local16, objptr
0d414     22 47 02 F6 | 	mov	local17, local16
0d418     01 46 66 F0 | 	shl	local17, #1
0d41c     22 47 02 F1 | 	add	local17, local16
0d420     02 46 66 F0 | 	shl	local17, #2
0d424     03 00 00 FF 
0d428     00 E4 85 F1 | 	sub	objptr, ##1536
0d42c     F2 46 02 F1 | 	add	local17, objptr
0d430     08 46 06 F1 | 	add	local17, #8
0d434     23 3F 62 FC | 	wrlong	local13, local17
0d438     03 00 00 FF 
0d43c     00 E4 05 F1 | 	add	objptr, ##1536
0d440     F2 38 02 FB | 	rdlong	local10, objptr
0d444     01 38 06 F1 | 	add	local10, #1
0d448     F2 38 62 FC | 	wrlong	local10, objptr
0d44c     4A 00 00 FF 
0d450     7C E4 85 F1 | 	sub	objptr, ##38012
0d454                 | LR__1048
0d454                 | ' return 0
0d454     00 FA 05 F6 | 	mov	result1, #0
0d458                 | LR__1049
0d458     A7 F0 03 F6 | 	mov	ptra, fp
0d45c     B2 00 A0 FD | 	call	#popregs_
0d460                 | _getvar_ret
0d460     2D 00 64 FD | 	ret
0d464                 | 
0d464                 | ' 
0d464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d464                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d464                 | ' 
0d464                 | ' 
0d464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d464                 | ' '                                                                                                                                       -
0d464                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d464                 | ' '                                                                                                                                       -
0d464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d464                 | ' 
0d464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d464                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d464                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d464                 | ' 
0d464                 | ' function execute_line (astart=0 as integer) as integer
0d464                 | _execute_line
0d464     04 4A 05 F6 | 	mov	COUNT_, #4
0d468     A8 00 A0 FD | 	call	#pushregs_
0d46c     50 00 00 FF 
0d470     BC E4 05 F1 | 	add	objptr, ##41148
0d474     F2 00 68 FC | 	wrlong	#0, objptr
0d478                 | ' 
0d478                 | ' runptr2=0
0d478                 | ' for lineptr_e=astart to lineptr-1
0d478     06 00 00 FF 
0d47c     3C E4 85 F1 | 	sub	objptr, ##3132
0d480     F2 12 62 FC | 	wrlong	arg01, objptr
0d484     04 E4 85 F1 | 	sub	objptr, #4
0d488     F2 26 02 FB | 	rdlong	local01, objptr
0d48c     4A 00 00 FF 
0d490     7C E4 85 F1 | 	sub	objptr, ##38012
0d494                 | LR__1050
0d494     4A 00 00 FF 
0d498     80 E4 05 F1 | 	add	objptr, ##38016
0d49c     F2 FA 01 FB | 	rdlong	result1, objptr
0d4a0     4A 00 00 FF 
0d4a4     80 E4 85 F1 | 	sub	objptr, ##38016
0d4a8     13 FB 51 F2 | 	cmps	result1, local01 wc
0d4ac     98 00 90 3D |  if_ae	jmp	#LR__1051
0d4b0     4A 00 00 FF 
0d4b4     80 E4 05 F1 | 	add	objptr, ##38016
0d4b8     F2 FA 01 FB | 	rdlong	result1, objptr
0d4bc     FD 28 02 F6 | 	mov	local02, result1
0d4c0     01 28 66 F0 | 	shl	local02, #1
0d4c4     FD 28 02 F1 | 	add	local02, result1
0d4c8     02 28 66 F0 | 	shl	local02, #2
0d4cc     03 00 00 FF 
0d4d0     04 E4 85 F1 | 	sub	objptr, ##1540
0d4d4     F2 28 02 F1 | 	add	local02, objptr
0d4d8     08 28 06 F1 | 	add	local02, #8
0d4dc     14 29 02 FB | 	rdlong	local02, local02
0d4e0     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d4e4     02 28 66 F0 | 	shl	local02, #2
0d4e8     04 00 00 FF 
0d4ec     1C E4 85 F1 | 	sub	objptr, ##2076
0d4f0     F2 28 02 F1 | 	add	local02, objptr
0d4f4     14 29 02 FB | 	rdlong	local02, local02
0d4f8     14 2B 02 F6 | 	mov	local03, local02
0d4fc     13 28 46 F7 | 	zerox	local02, #19
0d500     14 2A 46 F0 | 	shr	local03, #20
0d504     02 2A 66 F0 | 	shl	local03, #2
0d508     ED 2A 02 F1 | 	add	local03, __methods__
0d50c     15 2B 02 FB | 	rdlong	local03, local03
0d510     43 00 00 FF 
0d514     60 E4 85 F1 | 	sub	objptr, ##34400
0d518     F2 2C 02 F6 | 	mov	local04, objptr
0d51c     14 E5 01 F6 | 	mov	objptr, local02
0d520     2D 2A 62 FD | 	call	local03
0d524     16 E5 01 F6 | 	mov	objptr, local04
0d528     4A 00 00 FF 
0d52c     80 E4 05 F1 | 	add	objptr, ##38016
0d530     F2 2C 02 FB | 	rdlong	local04, objptr
0d534     01 2C 06 F1 | 	add	local04, #1
0d538     F2 2C 62 FC | 	wrlong	local04, objptr
0d53c     4A 00 00 FF 
0d540     80 E4 85 F1 | 	sub	objptr, ##38016
0d544     4C FF 9F FD | 	jmp	#LR__1050
0d548                 | LR__1051
0d548                 | ' return runptr2
0d548     50 00 00 FF 
0d54c     BC E4 05 F1 | 	add	objptr, ##41148
0d550     F2 FA 01 FB | 	rdlong	result1, objptr
0d554     50 00 00 FF 
0d558     BC E4 85 F1 | 	sub	objptr, ##41148
0d55c     A7 F0 03 F6 | 	mov	ptra, fp
0d560     B2 00 A0 FD | 	call	#popregs_
0d564                 | _execute_line_ret
0d564     2D 00 64 FD | 	ret
0d568                 | 
0d568                 | ' 
0d568                 | ' 
0d568                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d568                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d568                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d568                 | ' 
0d568                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d568                 | ' 
0d568                 | ' function pop() as expr_result
0d568                 | _pop
0d568                 | ' if stackpointer=0 then
0d568     43 00 00 FF 
0d56c     58 E4 05 F1 | 	add	objptr, ##34392
0d570     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d574     43 00 00 FF 
0d578     58 E4 85 F1 | 	sub	objptr, ##34392
0d57c     FF 04 06 A6 |  if_e	mov	_var03, #255
0d580     18 00 06 A6 |  if_e	mov	_var01, #24
0d584     68 00 90 AD |  if_e	jmp	#LR__1060
0d588     43 00 00 FF 
0d58c     58 E4 05 F1 | 	add	objptr, ##34392
0d590     F2 FA 01 FB | 	rdlong	result1, objptr
0d594     01 FA 85 F1 | 	sub	result1, #1
0d598     F2 FA 61 FC | 	wrlong	result1, objptr
0d59c     FD FE 01 F6 | 	mov	result3, result1
0d5a0     01 FE 65 F0 | 	shl	result3, #1
0d5a4     FD FE 01 F1 | 	add	result3, result1
0d5a8     02 FE 65 F0 | 	shl	result3, #2
0d5ac     0C 00 00 FF 
0d5b0     0C E4 85 F1 | 	sub	objptr, ##6156
0d5b4     F2 FE 01 F1 | 	add	result3, objptr
0d5b8     FF 00 02 FB | 	rdlong	_var01, result3
0d5bc     04 FE 05 F1 | 	add	result3, #4
0d5c0     FF FE 01 FB | 	rdlong	result3, result3
0d5c4     FD FC 01 F6 | 	mov	result2, result1
0d5c8     01 FC 65 F0 | 	shl	result2, #1
0d5cc     FD FC 01 F1 | 	add	result2, result1
0d5d0     02 FC 65 F0 | 	shl	result2, #2
0d5d4     F2 FC 01 F1 | 	add	result2, objptr
0d5d8     08 FC 05 F1 | 	add	result2, #8
0d5dc     FE FA 01 FB | 	rdlong	result1, result2
0d5e0     FF 02 02 F6 | 	mov	_var02, result3
0d5e4     FD 04 02 F6 | 	mov	_var03, result1
0d5e8     37 00 00 FF 
0d5ec     4C E4 85 F1 | 	sub	objptr, ##28236
0d5f0                 | LR__1060
0d5f0                 | ' return t1
0d5f0     01 FD 01 F6 | 	mov	result2, _var02
0d5f4     02 FF 01 F6 | 	mov	result3, _var03
0d5f8     00 FB 01 F6 | 	mov	result1, _var01
0d5fc                 | _pop_ret
0d5fc     2D 00 64 FD | 	ret
0d600                 | 
0d600                 | ' 
0d600                 | ' sub push(t1 as expr_result )
0d600                 | _push
0d600                 | ' if stackpointer<maxstack then 
0d600     43 00 00 FF 
0d604     58 E4 05 F1 | 	add	objptr, ##34392
0d608     F2 00 02 FB | 	rdlong	_var01, objptr
0d60c     43 00 00 FF 
0d610     58 E4 85 F1 | 	sub	objptr, ##34392
0d614     01 00 00 FF 
0d618     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d61c     BC 00 90 3D |  if_ae	jmp	#LR__1070
0d620     09 01 02 FB | 	rdlong	_var01, arg01
0d624     04 12 06 F1 | 	add	arg01, #4
0d628     09 03 02 FB | 	rdlong	_var02, arg01
0d62c     04 12 06 F1 | 	add	arg01, #4
0d630     09 13 02 FB | 	rdlong	arg01, arg01
0d634     43 00 00 FF 
0d638     58 E4 05 F1 | 	add	objptr, ##34392
0d63c     F2 04 02 FB | 	rdlong	_var03, objptr
0d640     02 07 02 F6 | 	mov	_var04, _var03
0d644     01 06 66 F0 | 	shl	_var04, #1
0d648     02 07 02 F1 | 	add	_var04, _var03
0d64c     02 06 66 F0 | 	shl	_var04, #2
0d650     0C 00 00 FF 
0d654     0C E4 85 F1 | 	sub	objptr, ##6156
0d658     F2 06 02 F1 | 	add	_var04, objptr
0d65c     03 01 62 FC | 	wrlong	_var01, _var04
0d660     0C 00 00 FF 
0d664     0C E4 05 F1 | 	add	objptr, ##6156
0d668     F2 06 02 FB | 	rdlong	_var04, objptr
0d66c     03 05 02 F6 | 	mov	_var03, _var04
0d670     01 04 66 F0 | 	shl	_var03, #1
0d674     03 05 02 F1 | 	add	_var03, _var04
0d678     02 04 66 F0 | 	shl	_var03, #2
0d67c     0C 00 00 FF 
0d680     0C E4 85 F1 | 	sub	objptr, ##6156
0d684     F2 04 02 F1 | 	add	_var03, objptr
0d688     04 04 06 F1 | 	add	_var03, #4
0d68c     02 03 62 FC | 	wrlong	_var02, _var03
0d690     0C 00 00 FF 
0d694     0C E4 05 F1 | 	add	objptr, ##6156
0d698     F2 06 02 FB | 	rdlong	_var04, objptr
0d69c     03 05 02 F6 | 	mov	_var03, _var04
0d6a0     01 04 66 F0 | 	shl	_var03, #1
0d6a4     03 05 02 F1 | 	add	_var03, _var04
0d6a8     02 04 66 F0 | 	shl	_var03, #2
0d6ac     0C 00 00 FF 
0d6b0     0C E4 85 F1 | 	sub	objptr, ##6156
0d6b4     F2 04 02 F1 | 	add	_var03, objptr
0d6b8     08 04 06 F1 | 	add	_var03, #8
0d6bc     02 13 62 FC | 	wrlong	arg01, _var03
0d6c0     0C 00 00 FF 
0d6c4     0C E4 05 F1 | 	add	objptr, ##6156
0d6c8     F2 00 02 FB | 	rdlong	_var01, objptr
0d6cc     01 00 06 F1 | 	add	_var01, #1
0d6d0     F2 00 62 FC | 	wrlong	_var01, objptr
0d6d4     43 00 00 FF 
0d6d8     58 E4 85 F1 | 	sub	objptr, ##34392
0d6dc                 | LR__1070
0d6dc                 | _push_ret
0d6dc     2D 00 64 FD | 	ret
0d6e0                 | 
0d6e0                 | ' 
0d6e0                 | ' ' -------------------------------- Runtime converting functions
0d6e0                 | ' 
0d6e0                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d6e0                 | ' 
0d6e0                 | ' function  convertstring(psaddr as ulong) as string
0d6e0                 | _convertstring
0d6e0     04 4A 05 F6 | 	mov	COUNT_, #4
0d6e4     A8 00 A0 FD | 	call	#pushregs_
0d6e8     09 27 02 F6 | 	mov	local01, arg01
0d6ec     E8 5A B1 FD | 	call	#_pslpeek
0d6f0     FD 28 02 F6 | 	mov	local02, result1
0d6f4     B5 01 00 FF 
0d6f8     7C 2B 06 F6 | 	mov	local03, ##@LR__5832
0d6fc                 | ' l=pslpeek(psaddr) 
0d6fc                 | ' s="" 
0d6fc                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d6fc     01 2C 06 F6 | 	mov	local04, #1
0d700     01 28 06 F1 | 	add	local02, #1
0d704                 | LR__1080
0d704     14 2D 52 F2 | 	cmps	local04, local02 wc
0d708     30 00 90 3D |  if_ae	jmp	#LR__1081
0d70c     13 13 02 F6 | 	mov	arg01, local01
0d710     03 12 06 F1 | 	add	arg01, #3
0d714     16 13 02 F1 | 	add	arg01, local04
0d718     64 5A B1 FD | 	call	#_pspeek
0d71c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d720     18 B4 B1 FD | 	call	#__system__Chr_S
0d724     FD 14 02 F6 | 	mov	arg02, result1
0d728     15 13 02 F6 | 	mov	arg01, local03
0d72c     24 92 B1 FD | 	call	#__system___string_concat
0d730     FD 2A 02 F6 | 	mov	local03, result1
0d734     01 2C 06 F1 | 	add	local04, #1
0d738     C8 FF 9F FD | 	jmp	#LR__1080
0d73c                 | LR__1081
0d73c                 | ' return s
0d73c     15 FB 01 F6 | 	mov	result1, local03
0d740     A7 F0 03 F6 | 	mov	ptra, fp
0d744     B2 00 A0 FD | 	call	#popregs_
0d748                 | _convertstring_ret
0d748     2D 00 64 FD | 	ret
0d74c                 | 
0d74c                 | ' 
0d74c                 | ' ' converts a variable to an integer
0d74c                 | ' 
0d74c                 | ' function converttoint (t1 as expr_result) as integer 
0d74c                 | _converttoint
0d74c     02 4A 05 F6 | 	mov	COUNT_, #2
0d750     A8 00 A0 FD | 	call	#pushregs_
0d754     09 27 02 F6 | 	mov	local01, arg01
0d758                 | ' 
0d758                 | ' select case t1.result_type
0d758     08 26 06 F1 | 	add	local01, #8
0d75c     13 29 02 FB | 	rdlong	local02, local01
0d760     08 26 86 F1 | 	sub	local01, #8
0d764     1C 28 0E F2 | 	cmp	local02, #28 wz
0d768     2C 00 90 AD |  if_e	jmp	#LR__1090
0d76c     1D 28 0E F2 | 	cmp	local02, #29 wz
0d770     2C 00 90 AD |  if_e	jmp	#LR__1091
0d774     1E 28 0E F2 | 	cmp	local02, #30 wz
0d778     2C 00 90 AD |  if_e	jmp	#LR__1092
0d77c     1F 28 0E F2 | 	cmp	local02, #31 wz
0d780     34 00 90 AD |  if_e	jmp	#LR__1093
0d784     2B 28 0E F2 | 	cmp	local02, #43 wz
0d788     44 00 90 AD |  if_e	jmp	#LR__1094
0d78c     2C 28 0E F2 | 	cmp	local02, #44 wz
0d790     5C 00 90 AD |  if_e	jmp	#LR__1095
0d794     60 00 90 FD | 	jmp	#LR__1096
0d798                 | LR__1090
0d798     13 FB 01 FB | 	rdlong	result1, local01
0d79c     5C 00 90 FD | 	jmp	#LR__1097
0d7a0                 | LR__1091
0d7a0     13 FB 01 FB | 	rdlong	result1, local01
0d7a4     54 00 90 FD | 	jmp	#LR__1097
0d7a8                 | LR__1092
0d7a8     13 13 02 FB | 	rdlong	arg01, local01
0d7ac     01 14 06 F6 | 	mov	arg02, #1
0d7b0     88 C4 B1 FD | 	call	#__system___float_tointeger
0d7b4     44 00 90 FD | 	jmp	#LR__1097
0d7b8                 | LR__1093
0d7b8     13 13 02 FB | 	rdlong	arg01, local01
0d7bc     C0 C7 B1 FD | 	call	#__system____builtin_atof
0d7c0     FD 12 02 F6 | 	mov	arg01, result1
0d7c4     01 14 06 F6 | 	mov	arg02, #1
0d7c8     70 C4 B1 FD | 	call	#__system___float_tointeger
0d7cc     2C 00 90 FD | 	jmp	#LR__1097
0d7d0                 | LR__1094
0d7d0     13 13 02 FB | 	rdlong	arg01, local01
0d7d4     08 FF BF FD | 	call	#_convertstring
0d7d8     FD 12 02 F6 | 	mov	arg01, result1
0d7dc     A0 C7 B1 FD | 	call	#__system____builtin_atof
0d7e0     FD 12 02 F6 | 	mov	arg01, result1
0d7e4     01 14 06 F6 | 	mov	arg02, #1
0d7e8     50 C4 B1 FD | 	call	#__system___float_tointeger
0d7ec     0C 00 90 FD | 	jmp	#LR__1097
0d7f0                 | LR__1095
0d7f0     13 FB 01 FB | 	rdlong	result1, local01
0d7f4     04 00 90 FD | 	jmp	#LR__1097
0d7f8                 | LR__1096
0d7f8     00 FA 05 F6 | 	mov	result1, #0
0d7fc                 | LR__1097
0d7fc     A7 F0 03 F6 | 	mov	ptra, fp
0d800     B2 00 A0 FD | 	call	#popregs_
0d804                 | _converttoint_ret
0d804     2D 00 64 FD | 	ret
0d808                 | 
0d808                 | ' 
0d808                 | ' ' converts a variable to float
0d808                 | ' 
0d808                 | ' function converttofloat (t1 as expr_result) as single
0d808                 | _converttofloat
0d808     03 4A 05 F6 | 	mov	COUNT_, #3
0d80c     A8 00 A0 FD | 	call	#pushregs_
0d810     09 27 02 F6 | 	mov	local01, arg01
0d814                 | ' 
0d814                 | ' select case t1.result_type
0d814     08 26 06 F1 | 	add	local01, #8
0d818     13 29 02 FB | 	rdlong	local02, local01
0d81c     08 26 86 F1 | 	sub	local01, #8
0d820     1C 28 0E F2 | 	cmp	local02, #28 wz
0d824     24 00 90 AD |  if_e	jmp	#LR__1100
0d828     1D 28 0E F2 | 	cmp	local02, #29 wz
0d82c     38 00 90 AD |  if_e	jmp	#LR__1101
0d830     1E 28 0E F2 | 	cmp	local02, #30 wz
0d834     3C 00 90 AD |  if_e	jmp	#LR__1102
0d838     1F 28 0E F2 | 	cmp	local02, #31 wz
0d83c     3C 00 90 AD |  if_e	jmp	#LR__1103
0d840     2B 28 0E F2 | 	cmp	local02, #43 wz
0d844     40 00 90 AD |  if_e	jmp	#LR__1104
0d848     50 00 90 FD | 	jmp	#LR__1105
0d84c                 | LR__1100
0d84c     13 13 02 FB | 	rdlong	arg01, local01
0d850     09 13 52 F6 | 	abs	arg01, arg01 wc
0d854     1F 2A C6 C9 |  if_b	decod	local03, #31
0d858     00 2A 06 36 |  if_ae	mov	local03, #0
0d85c     10 BB B1 FD | 	call	#__system___float_fromuns
0d860     15 FB 61 F5 | 	xor	result1, local03
0d864     38 00 90 FD | 	jmp	#LR__1106
0d868                 | LR__1101
0d868     13 13 02 FB | 	rdlong	arg01, local01
0d86c     00 BB B1 FD | 	call	#__system___float_fromuns
0d870     2C 00 90 FD | 	jmp	#LR__1106
0d874                 | LR__1102
0d874     13 FB 01 FB | 	rdlong	result1, local01
0d878     24 00 90 FD | 	jmp	#LR__1106
0d87c                 | LR__1103
0d87c     13 13 02 FB | 	rdlong	arg01, local01
0d880     FC C6 B1 FD | 	call	#__system____builtin_atof
0d884     18 00 90 FD | 	jmp	#LR__1106
0d888                 | LR__1104
0d888     13 13 02 FB | 	rdlong	arg01, local01
0d88c     50 FE BF FD | 	call	#_convertstring
0d890     FD 12 02 F6 | 	mov	arg01, result1
0d894     E8 C6 B1 FD | 	call	#__system____builtin_atof
0d898     04 00 90 FD | 	jmp	#LR__1106
0d89c                 | LR__1105
0d89c     00 FA 05 F6 | 	mov	result1, #0
0d8a0                 | LR__1106
0d8a0     A7 F0 03 F6 | 	mov	ptra, fp
0d8a4     B2 00 A0 FD | 	call	#popregs_
0d8a8                 | _converttofloat_ret
0d8a8     2D 00 64 FD | 	ret
0d8ac                 | 
0d8ac                 | ' 
0d8ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8ac                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d8ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8ac                 | ' 
0d8ac                 | ' 
0d8ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8ac                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d8ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8ac                 | ' 
0d8ac                 | ' '-------------------- abs
0d8ac                 | ' 
0d8ac                 | ' sub do_abs
0d8ac                 | _do_abs
0d8ac     01 4A 05 F6 | 	mov	COUNT_, #1
0d8b0     A8 00 A0 FD | 	call	#pushregs_
0d8b4     0C F0 07 F1 | 	add	ptra, #12
0d8b8     AC FC BF FD | 	call	#_pop
0d8bc     FF 26 02 F6 | 	mov	local01, result3
0d8c0     A7 FA 61 FC | 	wrlong	result1, fp
0d8c4     04 4E 05 F1 | 	add	fp, #4
0d8c8     A7 FC 61 FC | 	wrlong	result2, fp
0d8cc     04 4E 05 F1 | 	add	fp, #4
0d8d0     A7 26 62 FC | 	wrlong	local01, fp
0d8d4                 | ' 
0d8d4                 | ' t1=pop()
0d8d4                 | ' if t1.result_type=result_int then 
0d8d4     08 4E 85 F1 | 	sub	fp, #8
0d8d8     1C 26 0E F2 | 	cmp	local01, #28 wz
0d8dc     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d8e0     09 27 42 A6 |  if_e	abs	local01, arg01
0d8e4     A7 26 62 AC |  if_e	wrlong	local01, fp
0d8e8     2C 00 90 AD |  if_e	jmp	#LR__1110
0d8ec     08 4E 05 F1 | 	add	fp, #8
0d8f0     A7 26 02 FB | 	rdlong	local01, fp
0d8f4     08 4E 85 F1 | 	sub	fp, #8
0d8f8     1E 26 0E F2 | 	cmp	local01, #30 wz
0d8fc     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d900     1F FA 05 A4 |  if_e	bitl	result1, #31
0d904     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d908     08 4E 05 51 |  if_ne	add	fp, #8
0d90c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d910     08 4E 85 51 |  if_ne	sub	fp, #8
0d914     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d918                 | LR__1110
0d918     A7 12 02 F6 | 	mov	arg01, fp
0d91c     E0 FC BF FD | 	call	#_push
0d920     A7 F0 03 F6 | 	mov	ptra, fp
0d924     B2 00 A0 FD | 	call	#popregs_
0d928                 | _do_abs_ret
0d928     2D 00 64 FD | 	ret
0d92c                 | 
0d92c                 | ' 
0d92c                 | ' '-------------------- acos
0d92c                 | ' 
0d92c                 | ' sub do_acos
0d92c                 | _do_acos
0d92c     01 4A 05 F6 | 	mov	COUNT_, #1
0d930     A8 00 A0 FD | 	call	#pushregs_
0d934     10 F0 07 F1 | 	add	ptra, #16
0d938     4A 00 00 FF 
0d93c     80 E4 05 F1 | 	add	objptr, ##38016
0d940     F2 26 02 FB | 	rdlong	local01, objptr
0d944     13 17 02 F6 | 	mov	arg03, local01
0d948     01 16 66 F0 | 	shl	arg03, #1
0d94c     13 17 02 F1 | 	add	arg03, local01
0d950     02 16 66 F0 | 	shl	arg03, #2
0d954     03 00 00 FF 
0d958     04 E4 85 F1 | 	sub	objptr, ##1540
0d95c     F2 16 02 F1 | 	add	arg03, objptr
0d960     0B 17 02 FB | 	rdlong	arg03, arg03
0d964     0C 4E 05 F1 | 	add	fp, #12
0d968     A7 16 62 FC | 	wrlong	arg03, fp
0d96c                 | ' 
0d96c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d96c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d96c     0C 4E 85 F1 | 	sub	fp, #12
0d970     02 16 16 F2 | 	cmp	arg03, #2 wc
0d974     47 00 00 FF 
0d978     7C E4 85 F1 | 	sub	objptr, ##36476
0d97c     0C 4E 05 C1 |  if_b	add	fp, #12
0d980     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d984     0C 4E 85 C1 |  if_b	sub	fp, #12
0d988     40 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0d98c     00 12 06 F6 | 	mov	arg01, #0
0d990     08 EC B1 FD | 	call	#__system___getiolock_0602
0d994     FD 12 02 F6 | 	mov	arg01, result1
0d998     5C 8F B1 FD | 	call	#__system___lockmem
0d99c     B5 01 00 FF 
0d9a0     7D 15 06 F6 | 	mov	arg02, ##@LR__5833
0d9a4     00 12 06 F6 | 	mov	arg01, #0
0d9a8     00 16 06 F6 | 	mov	arg03, #0
0d9ac     40 9C B1 FD | 	call	#__system___basic_print_string
0d9b0     00 12 06 F6 | 	mov	arg01, #0
0d9b4     E4 EB B1 FD | 	call	#__system___getiolock_0602
0d9b8     FD 00 68 FC | 	wrlong	#0, result1
0d9bc     27 12 06 F6 | 	mov	arg01, #39
0d9c0     00 14 06 F6 | 	mov	arg02, #0
0d9c4     40 55 B1 FD | 	call	#_printerror
0d9c8     64 00 90 FD | 	jmp	#LR__1121
0d9cc                 | LR__1120
0d9cc     98 FB BF FD | 	call	#_pop
0d9d0     FF 26 02 F6 | 	mov	local01, result3
0d9d4     A7 FA 61 FC | 	wrlong	result1, fp
0d9d8     04 4E 05 F1 | 	add	fp, #4
0d9dc     A7 FC 61 FC | 	wrlong	result2, fp
0d9e0     04 4E 05 F1 | 	add	fp, #4
0d9e4     A7 26 62 FC | 	wrlong	local01, fp
0d9e8     08 4E 85 F1 | 	sub	fp, #8
0d9ec     A7 12 02 F6 | 	mov	arg01, fp
0d9f0     14 FE BF FD | 	call	#_converttofloat
0d9f4     FD 12 02 F6 | 	mov	arg01, result1
0d9f8     B8 C8 B1 FD | 	call	#__system____builtin_acosf
0d9fc     FD 12 02 F6 | 	mov	arg01, result1
0da00     52 00 00 FF 
0da04     AC E4 05 F1 | 	add	objptr, ##42156
0da08     F2 14 02 FB | 	rdlong	arg02, objptr
0da0c     52 00 00 FF 
0da10     AC E4 85 F1 | 	sub	objptr, ##42156
0da14     5C BD B1 FD | 	call	#__system___float_mul
0da18     A7 FA 61 FC | 	wrlong	result1, fp
0da1c     08 4E 05 F1 | 	add	fp, #8
0da20     A7 3C 68 FC | 	wrlong	#30, fp
0da24     08 4E 85 F1 | 	sub	fp, #8
0da28     A7 12 02 F6 | 	mov	arg01, fp
0da2c     D0 FB BF FD | 	call	#_push
0da30                 | LR__1121
0da30     A7 F0 03 F6 | 	mov	ptra, fp
0da34     B2 00 A0 FD | 	call	#popregs_
0da38                 | _do_acos_ret
0da38     2D 00 64 FD | 	ret
0da3c                 | 
0da3c                 | ' 
0da3c                 | ' '-------------------- asc
0da3c                 | ' 
0da3c                 | ' sub do_asc
0da3c                 | _do_asc
0da3c     01 4A 05 F6 | 	mov	COUNT_, #1
0da40     A8 00 A0 FD | 	call	#pushregs_
0da44     14 F0 07 F1 | 	add	ptra, #20
0da48     4A 00 00 FF 
0da4c     80 E4 05 F1 | 	add	objptr, ##38016
0da50     F2 26 02 FB | 	rdlong	local01, objptr
0da54     13 17 02 F6 | 	mov	arg03, local01
0da58     01 16 66 F0 | 	shl	arg03, #1
0da5c     13 17 02 F1 | 	add	arg03, local01
0da60     02 16 66 F0 | 	shl	arg03, #2
0da64     03 00 00 FF 
0da68     04 E4 85 F1 | 	sub	objptr, ##1540
0da6c     F2 16 02 F1 | 	add	arg03, objptr
0da70     0B 17 02 FB | 	rdlong	arg03, arg03
0da74     0C 4E 05 F1 | 	add	fp, #12
0da78     A7 16 62 FC | 	wrlong	arg03, fp
0da7c                 | ' 
0da7c                 | ' numpar=compiledline(lineptr_e).result.uresult
0da7c                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0da7c     0C 4E 85 F1 | 	sub	fp, #12
0da80     02 16 16 F2 | 	cmp	arg03, #2 wc
0da84     47 00 00 FF 
0da88     7C E4 85 F1 | 	sub	objptr, ##36476
0da8c     0C 4E 05 C1 |  if_b	add	fp, #12
0da90     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0da94     0C 4E 85 C1 |  if_b	sub	fp, #12
0da98     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0da9c     00 12 06 F6 | 	mov	arg01, #0
0daa0     F8 EA B1 FD | 	call	#__system___getiolock_0602
0daa4     FD 12 02 F6 | 	mov	arg01, result1
0daa8     4C 8E B1 FD | 	call	#__system___lockmem
0daac     B5 01 00 FF 
0dab0     84 15 06 F6 | 	mov	arg02, ##@LR__5834
0dab4     00 12 06 F6 | 	mov	arg01, #0
0dab8     00 16 06 F6 | 	mov	arg03, #0
0dabc     30 9B B1 FD | 	call	#__system___basic_print_string
0dac0     00 12 06 F6 | 	mov	arg01, #0
0dac4     D4 EA B1 FD | 	call	#__system___getiolock_0602
0dac8     FD 00 68 FC | 	wrlong	#0, result1
0dacc     27 12 06 F6 | 	mov	arg01, #39
0dad0     00 14 06 F6 | 	mov	arg02, #0
0dad4     30 54 B1 FD | 	call	#_printerror
0dad8     B4 00 90 FD | 	jmp	#LR__1133
0dadc                 | LR__1130
0dadc     88 FA BF FD | 	call	#_pop
0dae0     FF 16 02 F6 | 	mov	arg03, result3
0dae4     A7 FA 61 FC | 	wrlong	result1, fp
0dae8     04 4E 05 F1 | 	add	fp, #4
0daec     A7 FC 61 FC | 	wrlong	result2, fp
0daf0     04 4E 05 F1 | 	add	fp, #4
0daf4     A7 16 62 FC | 	wrlong	arg03, fp
0daf8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0daf8     08 4E 85 F1 | 	sub	fp, #8
0dafc     2B 16 0E F2 | 	cmp	arg03, #43 wz
0db00     18 00 90 5D |  if_ne	jmp	#LR__1131
0db04     A7 12 02 FB | 	rdlong	arg01, fp
0db08     D4 FB BF FD | 	call	#_convertstring
0db0c     A7 FA 61 FC | 	wrlong	result1, fp
0db10     08 4E 05 F1 | 	add	fp, #8
0db14     A7 3E 68 FC | 	wrlong	#31, fp
0db18     08 4E 85 F1 | 	sub	fp, #8
0db1c                 | LR__1131
0db1c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0db1c     08 4E 05 F1 | 	add	fp, #8
0db20     A7 16 02 FB | 	rdlong	arg03, fp
0db24     08 4E 85 F1 | 	sub	fp, #8
0db28     1F 16 0E F2 | 	cmp	arg03, #31 wz
0db2c     40 00 90 AD |  if_e	jmp	#LR__1132
0db30     00 12 06 F6 | 	mov	arg01, #0
0db34     64 EA B1 FD | 	call	#__system___getiolock_0602
0db38     FD 12 02 F6 | 	mov	arg01, result1
0db3c     B8 8D B1 FD | 	call	#__system___lockmem
0db40     B5 01 00 FF 
0db44     8A 15 06 F6 | 	mov	arg02, ##@LR__5835
0db48     00 12 06 F6 | 	mov	arg01, #0
0db4c     00 16 06 F6 | 	mov	arg03, #0
0db50     9C 9A B1 FD | 	call	#__system___basic_print_string
0db54     00 12 06 F6 | 	mov	arg01, #0
0db58     40 EA B1 FD | 	call	#__system___getiolock_0602
0db5c     FD 00 68 FC | 	wrlong	#0, result1
0db60     0F 12 06 F6 | 	mov	arg01, #15
0db64     00 14 06 F6 | 	mov	arg02, #0
0db68     9C 53 B1 FD | 	call	#_printerror
0db6c     20 00 90 FD | 	jmp	#LR__1133
0db70                 | LR__1132
0db70     A7 26 02 FB | 	rdlong	local01, fp
0db74     13 27 C2 FA | 	rdbyte	local01, local01
0db78     A7 26 62 FC | 	wrlong	local01, fp
0db7c     08 4E 05 F1 | 	add	fp, #8
0db80     A7 38 68 FC | 	wrlong	#28, fp
0db84     08 4E 85 F1 | 	sub	fp, #8
0db88     A7 12 02 F6 | 	mov	arg01, fp
0db8c     70 FA BF FD | 	call	#_push
0db90                 | LR__1133
0db90     A7 F0 03 F6 | 	mov	ptra, fp
0db94     B2 00 A0 FD | 	call	#popregs_
0db98                 | _do_asc_ret
0db98     2D 00 64 FD | 	ret
0db9c                 | 
0db9c                 | ' 
0db9c                 | ' '-------------------- asin
0db9c                 | ' 
0db9c                 | ' sub do_asin
0db9c                 | _do_asin
0db9c     01 4A 05 F6 | 	mov	COUNT_, #1
0dba0     A8 00 A0 FD | 	call	#pushregs_
0dba4     10 F0 07 F1 | 	add	ptra, #16
0dba8     4A 00 00 FF 
0dbac     80 E4 05 F1 | 	add	objptr, ##38016
0dbb0     F2 26 02 FB | 	rdlong	local01, objptr
0dbb4     13 17 02 F6 | 	mov	arg03, local01
0dbb8     01 16 66 F0 | 	shl	arg03, #1
0dbbc     13 17 02 F1 | 	add	arg03, local01
0dbc0     02 16 66 F0 | 	shl	arg03, #2
0dbc4     03 00 00 FF 
0dbc8     04 E4 85 F1 | 	sub	objptr, ##1540
0dbcc     F2 16 02 F1 | 	add	arg03, objptr
0dbd0     0B 17 02 FB | 	rdlong	arg03, arg03
0dbd4     0C 4E 05 F1 | 	add	fp, #12
0dbd8     A7 16 62 FC | 	wrlong	arg03, fp
0dbdc                 | ' 
0dbdc                 | ' numpar=compiledline(lineptr_e).result.uresult
0dbdc                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dbdc     0C 4E 85 F1 | 	sub	fp, #12
0dbe0     02 16 16 F2 | 	cmp	arg03, #2 wc
0dbe4     47 00 00 FF 
0dbe8     7C E4 85 F1 | 	sub	objptr, ##36476
0dbec     0C 4E 05 C1 |  if_b	add	fp, #12
0dbf0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dbf4     0C 4E 85 C1 |  if_b	sub	fp, #12
0dbf8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dbfc     00 12 06 F6 | 	mov	arg01, #0
0dc00     98 E9 B1 FD | 	call	#__system___getiolock_0602
0dc04     FD 12 02 F6 | 	mov	arg01, result1
0dc08     EC 8C B1 FD | 	call	#__system___lockmem
0dc0c     B5 01 00 FF 
0dc10     90 15 06 F6 | 	mov	arg02, ##@LR__5836
0dc14     00 12 06 F6 | 	mov	arg01, #0
0dc18     00 16 06 F6 | 	mov	arg03, #0
0dc1c     D0 99 B1 FD | 	call	#__system___basic_print_string
0dc20     00 12 06 F6 | 	mov	arg01, #0
0dc24     74 E9 B1 FD | 	call	#__system___getiolock_0602
0dc28     FD 00 68 FC | 	wrlong	#0, result1
0dc2c     27 12 06 F6 | 	mov	arg01, #39
0dc30     00 14 06 F6 | 	mov	arg02, #0
0dc34     D0 52 B1 FD | 	call	#_printerror
0dc38     64 00 90 FD | 	jmp	#LR__1141
0dc3c                 | LR__1140
0dc3c     28 F9 BF FD | 	call	#_pop
0dc40     FF 26 02 F6 | 	mov	local01, result3
0dc44     A7 FA 61 FC | 	wrlong	result1, fp
0dc48     04 4E 05 F1 | 	add	fp, #4
0dc4c     A7 FC 61 FC | 	wrlong	result2, fp
0dc50     04 4E 05 F1 | 	add	fp, #4
0dc54     A7 26 62 FC | 	wrlong	local01, fp
0dc58     08 4E 85 F1 | 	sub	fp, #8
0dc5c     A7 12 02 F6 | 	mov	arg01, fp
0dc60     A4 FB BF FD | 	call	#_converttofloat
0dc64     FD 12 02 F6 | 	mov	arg01, result1
0dc68     FC C5 B1 FD | 	call	#__system____builtin_asinf
0dc6c     FD 12 02 F6 | 	mov	arg01, result1
0dc70     52 00 00 FF 
0dc74     AC E4 05 F1 | 	add	objptr, ##42156
0dc78     F2 14 02 FB | 	rdlong	arg02, objptr
0dc7c     52 00 00 FF 
0dc80     AC E4 85 F1 | 	sub	objptr, ##42156
0dc84     EC BA B1 FD | 	call	#__system___float_mul
0dc88     A7 FA 61 FC | 	wrlong	result1, fp
0dc8c     08 4E 05 F1 | 	add	fp, #8
0dc90     A7 3C 68 FC | 	wrlong	#30, fp
0dc94     08 4E 85 F1 | 	sub	fp, #8
0dc98     A7 12 02 F6 | 	mov	arg01, fp
0dc9c     60 F9 BF FD | 	call	#_push
0dca0                 | LR__1141
0dca0     A7 F0 03 F6 | 	mov	ptra, fp
0dca4     B2 00 A0 FD | 	call	#popregs_
0dca8                 | _do_asin_ret
0dca8     2D 00 64 FD | 	ret
0dcac                 | 
0dcac                 | ' 
0dcac                 | ' '-------------------- atn
0dcac                 | ' 
0dcac                 | ' sub do_atn
0dcac                 | _do_atn
0dcac     01 4A 05 F6 | 	mov	COUNT_, #1
0dcb0     A8 00 A0 FD | 	call	#pushregs_
0dcb4     10 F0 07 F1 | 	add	ptra, #16
0dcb8     4A 00 00 FF 
0dcbc     80 E4 05 F1 | 	add	objptr, ##38016
0dcc0     F2 26 02 FB | 	rdlong	local01, objptr
0dcc4     13 17 02 F6 | 	mov	arg03, local01
0dcc8     01 16 66 F0 | 	shl	arg03, #1
0dccc     13 17 02 F1 | 	add	arg03, local01
0dcd0     02 16 66 F0 | 	shl	arg03, #2
0dcd4     03 00 00 FF 
0dcd8     04 E4 85 F1 | 	sub	objptr, ##1540
0dcdc     F2 16 02 F1 | 	add	arg03, objptr
0dce0     0B 17 02 FB | 	rdlong	arg03, arg03
0dce4     0C 4E 05 F1 | 	add	fp, #12
0dce8     A7 16 62 FC | 	wrlong	arg03, fp
0dcec                 | ' 
0dcec                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcec                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dcec     0C 4E 85 F1 | 	sub	fp, #12
0dcf0     02 16 16 F2 | 	cmp	arg03, #2 wc
0dcf4     47 00 00 FF 
0dcf8     7C E4 85 F1 | 	sub	objptr, ##36476
0dcfc     0C 4E 05 C1 |  if_b	add	fp, #12
0dd00     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd04     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd08     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dd0c     00 12 06 F6 | 	mov	arg01, #0
0dd10     88 E8 B1 FD | 	call	#__system___getiolock_0602
0dd14     FD 12 02 F6 | 	mov	arg01, result1
0dd18     DC 8B B1 FD | 	call	#__system___lockmem
0dd1c     B5 01 00 FF 
0dd20     97 15 06 F6 | 	mov	arg02, ##@LR__5837
0dd24     00 12 06 F6 | 	mov	arg01, #0
0dd28     00 16 06 F6 | 	mov	arg03, #0
0dd2c     C0 98 B1 FD | 	call	#__system___basic_print_string
0dd30     00 12 06 F6 | 	mov	arg01, #0
0dd34     64 E8 B1 FD | 	call	#__system___getiolock_0602
0dd38     FD 00 68 FC | 	wrlong	#0, result1
0dd3c     27 12 06 F6 | 	mov	arg01, #39
0dd40     00 14 06 F6 | 	mov	arg02, #0
0dd44     C0 51 B1 FD | 	call	#_printerror
0dd48     6C 00 90 FD | 	jmp	#LR__1151
0dd4c                 | LR__1150
0dd4c     18 F8 BF FD | 	call	#_pop
0dd50     FF 26 02 F6 | 	mov	local01, result3
0dd54     A7 FA 61 FC | 	wrlong	result1, fp
0dd58     04 4E 05 F1 | 	add	fp, #4
0dd5c     A7 FC 61 FC | 	wrlong	result2, fp
0dd60     04 4E 05 F1 | 	add	fp, #4
0dd64     A7 26 62 FC | 	wrlong	local01, fp
0dd68     08 4E 85 F1 | 	sub	fp, #8
0dd6c     A7 12 02 F6 | 	mov	arg01, fp
0dd70     94 FA BF FD | 	call	#_converttofloat
0dd74     FD 12 02 F6 | 	mov	arg01, result1
0dd78     00 C0 1F FF 
0dd7c     00 14 06 F6 | 	mov	arg02, ##1065353216
0dd80     7C C5 B1 FD | 	call	#__system____builtin_atan2f
0dd84     FD 12 02 F6 | 	mov	arg01, result1
0dd88     52 00 00 FF 
0dd8c     AC E4 05 F1 | 	add	objptr, ##42156
0dd90     F2 14 02 FB | 	rdlong	arg02, objptr
0dd94     52 00 00 FF 
0dd98     AC E4 85 F1 | 	sub	objptr, ##42156
0dd9c     D4 B9 B1 FD | 	call	#__system___float_mul
0dda0     A7 FA 61 FC | 	wrlong	result1, fp
0dda4     08 4E 05 F1 | 	add	fp, #8
0dda8     A7 3C 68 FC | 	wrlong	#30, fp
0ddac     08 4E 85 F1 | 	sub	fp, #8
0ddb0     A7 12 02 F6 | 	mov	arg01, fp
0ddb4     48 F8 BF FD | 	call	#_push
0ddb8                 | LR__1151
0ddb8     A7 F0 03 F6 | 	mov	ptra, fp
0ddbc     B2 00 A0 FD | 	call	#popregs_
0ddc0                 | _do_atn_ret
0ddc0     2D 00 64 FD | 	ret
0ddc4                 | 
0ddc4                 | ' 
0ddc4                 | ' '-------------------- beep
0ddc4                 | ' 
0ddc4                 | ' sub do_beep
0ddc4                 | _do_beep
0ddc4     02 4A 05 F6 | 	mov	COUNT_, #2
0ddc8     A8 00 A0 FD | 	call	#pushregs_
0ddcc     20 F0 07 F1 | 	add	ptra, #32
0ddd0     94 F7 BF FD | 	call	#_pop
0ddd4     FD 26 02 F6 | 	mov	local01, result1
0ddd8     FE 1C 02 F6 | 	mov	arg06, result2
0dddc     FF 28 02 F6 | 	mov	local02, result3
0dde0     0C 4E 05 F1 | 	add	fp, #12
0dde4     A7 26 62 FC | 	wrlong	local01, fp
0dde8     04 4E 05 F1 | 	add	fp, #4
0ddec     A7 1C 62 FC | 	wrlong	arg06, fp
0ddf0     04 4E 05 F1 | 	add	fp, #4
0ddf4     A7 28 62 FC | 	wrlong	local02, fp
0ddf8     14 4E 85 F1 | 	sub	fp, #20
0ddfc     68 F7 BF FD | 	call	#_pop
0de00     A7 FA 61 FC | 	wrlong	result1, fp
0de04     04 4E 05 F1 | 	add	fp, #4
0de08     A7 FC 61 FC | 	wrlong	result2, fp
0de0c     04 4E 05 F1 | 	add	fp, #4
0de10     A7 FE 61 FC | 	wrlong	result3, fp
0de14                 | ' 
0de14                 | ' t2=pop()
0de14                 | ' t1=pop()
0de14                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0de14     08 4E 85 F1 | 	sub	fp, #8
0de18     1C FE 0D F2 | 	cmp	result3, #28 wz
0de1c     08 4E 05 51 |  if_ne	add	fp, #8
0de20     A7 28 02 5B |  if_ne	rdlong	local02, fp
0de24     08 4E 85 51 |  if_ne	sub	fp, #8
0de28     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0de2c     A7 26 02 AB |  if_e	rdlong	local01, fp
0de30     18 4E 05 A1 |  if_e	add	fp, #24
0de34     A7 26 62 AC |  if_e	wrlong	local01, fp
0de38     18 4E 85 A1 |  if_e	sub	fp, #24
0de3c     14 00 90 AD |  if_e	jmp	#LR__1160
0de40     A7 12 02 F6 | 	mov	arg01, fp
0de44     04 F9 BF FD | 	call	#_converttoint
0de48     18 4E 05 F1 | 	add	fp, #24
0de4c     A7 FA 61 FC | 	wrlong	result1, fp
0de50     18 4E 85 F1 | 	sub	fp, #24
0de54                 | LR__1160
0de54     1C 4E 05 F1 | 	add	fp, #28
0de58     A7 FE 48 FC | 	wrbyte	#127, fp
0de5c     01 4E 05 F1 | 	add	fp, #1
0de60     A7 00 49 FC | 	wrbyte	#128, fp
0de64     01 4E 85 F1 | 	sub	fp, #1
0de68     A7 14 02 F6 | 	mov	arg02, fp
0de6c     04 4E 85 F1 | 	sub	fp, #4
0de70     A7 16 02 FB | 	rdlong	arg03, fp
0de74     18 4E 85 F1 | 	sub	fp, #24
0de78     01 16 66 F0 | 	shl	arg03, #1
0de7c     07 12 06 F6 | 	mov	arg01, #7
0de80     0E 18 C6 F9 | 	decod	arg04, #14
0de84     02 1A 06 F6 | 	mov	arg05, #2
0de88     00 1C 06 F6 | 	mov	arg06, #0
0de8c     0B 00 00 FF 
0de90     CC E4 05 F1 | 	add	objptr, ##5836
0de94     BC 86 B1 FD | 	call	#_audio096_spin2_play8
0de98     0B 00 00 FF 
0de9c     CC E4 85 F1 | 	sub	objptr, ##5836
0dea0     0C 4E 05 F1 | 	add	fp, #12
0dea4     A7 12 02 F6 | 	mov	arg01, fp
0dea8     0C 4E 85 F1 | 	sub	fp, #12
0deac     50 F7 BF FD | 	call	#_push
0deb0     E8 E5 B0 FD | 	call	#_do_waitms
0deb4     07 12 06 F6 | 	mov	arg01, #7
0deb8     0B 00 00 FF 
0debc     CC E4 05 F1 | 	add	objptr, ##5836
0dec0     34 87 B1 FD | 	call	#_audio096_spin2_stop
0dec4     0B 00 00 FF 
0dec8     CC E4 85 F1 | 	sub	objptr, ##5836
0decc     A7 F0 03 F6 | 	mov	ptra, fp
0ded0     B2 00 A0 FD | 	call	#popregs_
0ded4                 | _do_beep_ret
0ded4     2D 00 64 FD | 	ret
0ded8                 | 
0ded8                 | ' 
0ded8                 | ' '-------------------- blit
0ded8                 | ' 
0ded8                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0ded8                 | ' sub do_blit
0ded8                 | _do_blit
0ded8     02 4A 05 F6 | 	mov	COUNT_, #2
0dedc     A8 00 A0 FD | 	call	#pushregs_
0dee0     3C F0 07 F1 | 	add	ptra, #60
0dee4     4A 00 00 FF 
0dee8     80 E4 05 F1 | 	add	objptr, ##38016
0deec     F2 26 02 FB | 	rdlong	local01, objptr
0def0     13 25 02 F6 | 	mov	arg10, local01
0def4     01 24 66 F0 | 	shl	arg10, #1
0def8     13 25 02 F1 | 	add	arg10, local01
0defc     02 24 66 F0 | 	shl	arg10, #2
0df00     03 00 00 FF 
0df04     04 E4 85 F1 | 	sub	objptr, ##1540
0df08     F2 24 02 F1 | 	add	arg10, objptr
0df0c     12 25 02 FB | 	rdlong	arg10, arg10
0df10     38 4E 05 F1 | 	add	fp, #56
0df14     A7 24 62 FC | 	wrlong	arg10, fp
0df18                 | ' 
0df18                 | ' numpar=compiledline(lineptr_e).result.uresult
0df18                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0df18     38 4E 85 F1 | 	sub	fp, #56
0df1c     0A 24 0E F2 | 	cmp	arg10, #10 wz
0df20     47 00 00 FF 
0df24     7C E4 85 F1 | 	sub	objptr, ##36476
0df28     38 4E 05 51 |  if_ne	add	fp, #56
0df2c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0df30     38 4E 85 51 |  if_ne	sub	fp, #56
0df34     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0df38     50 00 90 AD |  if_e	jmp	#LR__1170
0df3c     00 12 06 F6 | 	mov	arg01, #0
0df40     58 E6 B1 FD | 	call	#__system___getiolock_0602
0df44     FD 12 02 F6 | 	mov	arg01, result1
0df48     AC 89 B1 FD | 	call	#__system___lockmem
0df4c     B5 01 00 FF 
0df50     9D 15 06 F6 | 	mov	arg02, ##@LR__5838
0df54     00 12 06 F6 | 	mov	arg01, #0
0df58     00 16 06 F6 | 	mov	arg03, #0
0df5c     90 96 B1 FD | 	call	#__system___basic_print_string
0df60     00 12 06 F6 | 	mov	arg01, #0
0df64     34 E6 B1 FD | 	call	#__system___getiolock_0602
0df68     FD 00 68 FC | 	wrlong	#0, result1
0df6c     50 00 00 FF 
0df70     F0 E4 05 F1 | 	add	objptr, ##41200
0df74     F2 14 02 FB | 	rdlong	arg02, objptr
0df78     50 00 00 FF 
0df7c     F0 E4 85 F1 | 	sub	objptr, ##41200
0df80     27 12 06 F6 | 	mov	arg01, #39
0df84     80 4F B1 FD | 	call	#_printerror
0df88     44 01 90 FD | 	jmp	#LR__1175
0df8c                 | LR__1170
0df8c                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0df8c     38 4E 05 F1 | 	add	fp, #56
0df90     A7 28 02 FB | 	rdlong	local02, fp
0df94     01 28 86 F1 | 	sub	local02, #1
0df98     04 4E 85 F1 | 	sub	fp, #4
0df9c     A7 28 62 FC | 	wrlong	local02, fp
0dfa0     34 4E 85 F1 | 	sub	fp, #52
0dfa4                 | LR__1171
0dfa4     38 4E 05 F1 | 	add	fp, #56
0dfa8     A7 26 02 FB | 	rdlong	local01, fp
0dfac     01 26 86 F1 | 	sub	local01, #1
0dfb0     04 4E 85 F1 | 	sub	fp, #4
0dfb4     A7 24 02 FB | 	rdlong	arg10, fp
0dfb8     34 4E 85 F1 | 	sub	fp, #52
0dfbc     13 25 1A F2 | 	cmp	arg10, local01 wcz
0dfc0     54 00 90 1D |  if_a	jmp	#LR__1172
0dfc4     A0 F5 BF FD | 	call	#_pop
0dfc8     A7 FA 61 FC | 	wrlong	result1, fp
0dfcc     04 4E 05 F1 | 	add	fp, #4
0dfd0     A7 FC 61 FC | 	wrlong	result2, fp
0dfd4     04 4E 05 F1 | 	add	fp, #4
0dfd8     A7 FE 61 FC | 	wrlong	result3, fp
0dfdc     2C 4E 05 F1 | 	add	fp, #44
0dfe0     A7 28 02 FB | 	rdlong	local02, fp
0dfe4     02 28 66 F0 | 	shl	local02, #2
0dfe8     28 4E 85 F1 | 	sub	fp, #40
0dfec     A7 28 02 F1 | 	add	local02, fp
0dff0     0C 4E 85 F1 | 	sub	fp, #12
0dff4     A7 12 02 F6 | 	mov	arg01, fp
0dff8     50 F7 BF FD | 	call	#_converttoint
0dffc     14 FB 61 FC | 	wrlong	result1, local02
0e000     34 4E 05 F1 | 	add	fp, #52
0e004     A7 28 02 FB | 	rdlong	local02, fp
0e008     01 28 86 F1 | 	sub	local02, #1
0e00c     A7 28 62 FC | 	wrlong	local02, fp
0e010     34 4E 85 F1 | 	sub	fp, #52
0e014     8C FF 9F FD | 	jmp	#LR__1171
0e018                 | LR__1172
0e018                 | ' if numpar=10 then 
0e018     38 4E 05 F1 | 	add	fp, #56
0e01c     A7 28 02 FB | 	rdlong	local02, fp
0e020     38 4E 85 F1 | 	sub	fp, #56
0e024     0A 28 0E F2 | 	cmp	local02, #10 wz
0e028     5C 00 90 5D |  if_ne	jmp	#LR__1173
0e02c     0C 4E 05 F1 | 	add	fp, #12
0e030     A7 12 02 FB | 	rdlong	arg01, fp
0e034     04 4E 05 F1 | 	add	fp, #4
0e038     A7 14 02 FB | 	rdlong	arg02, fp
0e03c     04 4E 05 F1 | 	add	fp, #4
0e040     A7 16 02 FB | 	rdlong	arg03, fp
0e044     04 4E 05 F1 | 	add	fp, #4
0e048     A7 18 02 FB | 	rdlong	arg04, fp
0e04c     04 4E 05 F1 | 	add	fp, #4
0e050     A7 1A 02 FB | 	rdlong	arg05, fp
0e054     04 4E 05 F1 | 	add	fp, #4
0e058     A7 1C 02 FB | 	rdlong	arg06, fp
0e05c     04 4E 05 F1 | 	add	fp, #4
0e060     A7 1E 02 FB | 	rdlong	arg07, fp
0e064     04 4E 05 F1 | 	add	fp, #4
0e068     A7 20 02 FB | 	rdlong	arg08, fp
0e06c     04 4E 05 F1 | 	add	fp, #4
0e070     A7 22 02 FB | 	rdlong	arg09, fp
0e074     04 4E 05 F1 | 	add	fp, #4
0e078     A7 24 02 FB | 	rdlong	arg10, fp
0e07c     30 4E 85 F1 | 	sub	fp, #48
0e080     60 76 B1 FD | 	call	#_hg010b_spin2_blit
0e084     48 00 90 FD | 	jmp	#LR__1174
0e088                 | LR__1173
0e088     F2 1E 02 FB | 	rdlong	arg07, objptr
0e08c     0C 4E 05 F1 | 	add	fp, #12
0e090     A7 14 02 FB | 	rdlong	arg02, fp
0e094     04 4E 05 F1 | 	add	fp, #4
0e098     A7 16 02 FB | 	rdlong	arg03, fp
0e09c     04 4E 05 F1 | 	add	fp, #4
0e0a0     A7 18 02 FB | 	rdlong	arg04, fp
0e0a4     04 4E 05 F1 | 	add	fp, #4
0e0a8     A7 1A 02 FB | 	rdlong	arg05, fp
0e0ac     04 4E 05 F1 | 	add	fp, #4
0e0b0     A7 20 02 FB | 	rdlong	arg08, fp
0e0b4     04 4E 05 F1 | 	add	fp, #4
0e0b8     A7 22 02 FB | 	rdlong	arg09, fp
0e0bc     20 4E 85 F1 | 	sub	fp, #32
0e0c0     0F 13 02 F6 | 	mov	arg01, arg07
0e0c4     0A 1C C6 F9 | 	decod	arg06, #10
0e0c8     0A 24 C6 F9 | 	decod	arg10, #10
0e0cc     14 76 B1 FD | 	call	#_hg010b_spin2_blit
0e0d0                 | LR__1174
0e0d0                 | LR__1175
0e0d0     A7 F0 03 F6 | 	mov	ptra, fp
0e0d4     B2 00 A0 FD | 	call	#popregs_
0e0d8                 | _do_blit_ret
0e0d8     2D 00 64 FD | 	ret
0e0dc                 | 
0e0dc                 | ' 
0e0dc                 | ' 
0e0dc                 | ' '-------------------- bin$
0e0dc                 | ' 
0e0dc                 | ' sub do_bin
0e0dc                 | _do_bin
0e0dc     01 4A 05 F6 | 	mov	COUNT_, #1
0e0e0     A8 00 A0 FD | 	call	#pushregs_
0e0e4     18 F0 07 F1 | 	add	ptra, #24
0e0e8     4A 00 00 FF 
0e0ec     80 E4 05 F1 | 	add	objptr, ##38016
0e0f0     F2 26 02 FB | 	rdlong	local01, objptr
0e0f4     13 17 02 F6 | 	mov	arg03, local01
0e0f8     01 16 66 F0 | 	shl	arg03, #1
0e0fc     13 17 02 F1 | 	add	arg03, local01
0e100     02 16 66 F0 | 	shl	arg03, #2
0e104     03 00 00 FF 
0e108     04 E4 85 F1 | 	sub	objptr, ##1540
0e10c     F2 16 02 F1 | 	add	arg03, objptr
0e110     0B 17 02 FB | 	rdlong	arg03, arg03
0e114     0C 4E 05 F1 | 	add	fp, #12
0e118     A7 16 62 FC | 	wrlong	arg03, fp
0e11c                 | ' 
0e11c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e11c                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e11c     0C 4E 85 F1 | 	sub	fp, #12
0e120     03 16 16 F2 | 	cmp	arg03, #3 wc
0e124     47 00 00 FF 
0e128     7C E4 85 F1 | 	sub	objptr, ##36476
0e12c     0C 4E 05 C1 |  if_b	add	fp, #12
0e130     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e134     0C 4E 85 C1 |  if_b	sub	fp, #12
0e138     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0e13c     00 12 06 F6 | 	mov	arg01, #0
0e140     58 E4 B1 FD | 	call	#__system___getiolock_0602
0e144     FD 12 02 F6 | 	mov	arg01, result1
0e148     AC 87 B1 FD | 	call	#__system___lockmem
0e14c     B5 01 00 FF 
0e150     A4 15 06 F6 | 	mov	arg02, ##@LR__5839
0e154     00 12 06 F6 | 	mov	arg01, #0
0e158     00 16 06 F6 | 	mov	arg03, #0
0e15c     90 94 B1 FD | 	call	#__system___basic_print_string
0e160     00 12 06 F6 | 	mov	arg01, #0
0e164     34 E4 B1 FD | 	call	#__system___getiolock_0602
0e168     FD 00 68 FC | 	wrlong	#0, result1
0e16c     27 12 06 F6 | 	mov	arg01, #39
0e170     00 14 06 F6 | 	mov	arg02, #0
0e174     90 4D B1 FD | 	call	#_printerror
0e178     B8 00 90 FD | 	jmp	#LR__1183
0e17c                 | LR__1180
0e17c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e17c     0C 4E 05 F1 | 	add	fp, #12
0e180     A7 26 02 FB | 	rdlong	local01, fp
0e184     0C 4E 85 F1 | 	sub	fp, #12
0e188     02 26 0E F2 | 	cmp	local01, #2 wz
0e18c     38 00 90 5D |  if_ne	jmp	#LR__1181
0e190     D4 F3 BF FD | 	call	#_pop
0e194     FF 26 02 F6 | 	mov	local01, result3
0e198     A7 FA 61 FC | 	wrlong	result1, fp
0e19c     04 4E 05 F1 | 	add	fp, #4
0e1a0     A7 FC 61 FC | 	wrlong	result2, fp
0e1a4     04 4E 05 F1 | 	add	fp, #4
0e1a8     A7 26 62 FC | 	wrlong	local01, fp
0e1ac     08 4E 85 F1 | 	sub	fp, #8
0e1b0     A7 12 02 F6 | 	mov	arg01, fp
0e1b4     94 F5 BF FD | 	call	#_converttoint
0e1b8     14 4E 05 F1 | 	add	fp, #20
0e1bc     A7 FA 61 FC | 	wrlong	result1, fp
0e1c0     14 4E 85 F1 | 	sub	fp, #20
0e1c4     0C 00 90 FD | 	jmp	#LR__1182
0e1c8                 | LR__1181
0e1c8     14 4E 05 F1 | 	add	fp, #20
0e1cc     A7 00 68 FC | 	wrlong	#0, fp
0e1d0     14 4E 85 F1 | 	sub	fp, #20
0e1d4                 | LR__1182
0e1d4     90 F3 BF FD | 	call	#_pop
0e1d8     FF 26 02 F6 | 	mov	local01, result3
0e1dc     A7 FA 61 FC | 	wrlong	result1, fp
0e1e0     04 4E 05 F1 | 	add	fp, #4
0e1e4     A7 FC 61 FC | 	wrlong	result2, fp
0e1e8     04 4E 05 F1 | 	add	fp, #4
0e1ec     A7 26 62 FC | 	wrlong	local01, fp
0e1f0     08 4E 85 F1 | 	sub	fp, #8
0e1f4     A7 12 02 F6 | 	mov	arg01, fp
0e1f8     50 F5 BF FD | 	call	#_converttoint
0e1fc     10 4E 05 F1 | 	add	fp, #16
0e200     A7 FA 61 FC | 	wrlong	result1, fp
0e204     FD 12 02 F6 | 	mov	arg01, result1
0e208     04 4E 05 F1 | 	add	fp, #4
0e20c     A7 14 02 FB | 	rdlong	arg02, fp
0e210     14 4E 85 F1 | 	sub	fp, #20
0e214     02 16 06 F6 | 	mov	arg03, #2
0e218     B0 A9 B1 FD | 	call	#__system__Number_S
0e21c     A7 FA 61 FC | 	wrlong	result1, fp
0e220     08 4E 05 F1 | 	add	fp, #8
0e224     A7 3E 68 FC | 	wrlong	#31, fp
0e228     08 4E 85 F1 | 	sub	fp, #8
0e22c     A7 12 02 F6 | 	mov	arg01, fp
0e230     CC F3 BF FD | 	call	#_push
0e234                 | LR__1183
0e234     A7 F0 03 F6 | 	mov	ptra, fp
0e238     B2 00 A0 FD | 	call	#popregs_
0e23c                 | _do_bin_ret
0e23c     2D 00 64 FD | 	ret
0e240                 | 
0e240                 | ' 
0e240                 | ' '-------------------- box
0e240                 | ' 
0e240                 | ' sub do_box
0e240                 | _do_box
0e240     03 4A 05 F6 | 	mov	COUNT_, #3
0e244     A8 00 A0 FD | 	call	#pushregs_
0e248     30 F0 07 F1 | 	add	ptra, #48
0e24c     18 F3 BF FD | 	call	#_pop
0e250     FD 1A 02 F6 | 	mov	arg05, result1
0e254     FE 18 02 F6 | 	mov	arg04, result2
0e258     FF 16 02 F6 | 	mov	arg03, result3
0e25c     24 4E 05 F1 | 	add	fp, #36
0e260     A7 1A 62 FC | 	wrlong	arg05, fp
0e264     04 4E 05 F1 | 	add	fp, #4
0e268     A7 18 62 FC | 	wrlong	arg04, fp
0e26c     04 4E 05 F1 | 	add	fp, #4
0e270     A7 16 62 FC | 	wrlong	arg03, fp
0e274     2C 4E 85 F1 | 	sub	fp, #44
0e278     EC F2 BF FD | 	call	#_pop
0e27c     FD 1A 02 F6 | 	mov	arg05, result1
0e280     FE 18 02 F6 | 	mov	arg04, result2
0e284     FF 16 02 F6 | 	mov	arg03, result3
0e288     18 4E 05 F1 | 	add	fp, #24
0e28c     A7 1A 62 FC | 	wrlong	arg05, fp
0e290     04 4E 05 F1 | 	add	fp, #4
0e294     A7 18 62 FC | 	wrlong	arg04, fp
0e298     04 4E 05 F1 | 	add	fp, #4
0e29c     A7 16 62 FC | 	wrlong	arg03, fp
0e2a0     20 4E 85 F1 | 	sub	fp, #32
0e2a4     C0 F2 BF FD | 	call	#_pop
0e2a8     FD 1A 02 F6 | 	mov	arg05, result1
0e2ac     FE 18 02 F6 | 	mov	arg04, result2
0e2b0     FF 26 02 F6 | 	mov	local01, result3
0e2b4     0C 4E 05 F1 | 	add	fp, #12
0e2b8     A7 1A 62 FC | 	wrlong	arg05, fp
0e2bc     04 4E 05 F1 | 	add	fp, #4
0e2c0     A7 18 62 FC | 	wrlong	arg04, fp
0e2c4     04 4E 05 F1 | 	add	fp, #4
0e2c8     A7 26 62 FC | 	wrlong	local01, fp
0e2cc     14 4E 85 F1 | 	sub	fp, #20
0e2d0     94 F2 BF FD | 	call	#_pop
0e2d4     A7 FA 61 FC | 	wrlong	result1, fp
0e2d8     04 4E 05 F1 | 	add	fp, #4
0e2dc     A7 FC 61 FC | 	wrlong	result2, fp
0e2e0     04 4E 05 F1 | 	add	fp, #4
0e2e4     A7 FE 61 FC | 	wrlong	result3, fp
0e2e8                 | ' 
0e2e8                 | ' t4=pop()
0e2e8                 | ' t3=pop()
0e2e8                 | ' t2=pop()
0e2e8                 | ' t1=pop()
0e2e8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e2e8     FF 1A 02 F6 | 	mov	arg05, result3
0e2ec     08 4E 85 F1 | 	sub	fp, #8
0e2f0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e2f4     08 4E 05 51 |  if_ne	add	fp, #8
0e2f8     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e2fc     08 4E 85 51 |  if_ne	sub	fp, #8
0e300     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e304     A8 00 90 5D |  if_ne	jmp	#LR__1190
0e308     14 4E 05 F1 | 	add	fp, #20
0e30c     A7 26 02 FB | 	rdlong	local01, fp
0e310     14 4E 85 F1 | 	sub	fp, #20
0e314     1C 26 0E F2 | 	cmp	local01, #28 wz
0e318     14 4E 05 51 |  if_ne	add	fp, #20
0e31c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e320     14 4E 85 51 |  if_ne	sub	fp, #20
0e324     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e328     84 00 90 5D |  if_ne	jmp	#LR__1190
0e32c     20 4E 05 F1 | 	add	fp, #32
0e330     A7 26 02 FB | 	rdlong	local01, fp
0e334     20 4E 85 F1 | 	sub	fp, #32
0e338     1C 26 0E F2 | 	cmp	local01, #28 wz
0e33c     20 4E 05 51 |  if_ne	add	fp, #32
0e340     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e344     20 4E 85 51 |  if_ne	sub	fp, #32
0e348     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e34c     60 00 90 5D |  if_ne	jmp	#LR__1190
0e350     2C 4E 05 F1 | 	add	fp, #44
0e354     A7 26 02 FB | 	rdlong	local01, fp
0e358     2C 4E 85 F1 | 	sub	fp, #44
0e35c     1C 26 0E F2 | 	cmp	local01, #28 wz
0e360     2C 4E 05 51 |  if_ne	add	fp, #44
0e364     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e368     2C 4E 85 51 |  if_ne	sub	fp, #44
0e36c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e370     3C 00 90 5D |  if_ne	jmp	#LR__1190
0e374     A7 12 02 FB | 	rdlong	arg01, fp
0e378     0C 4E 05 F1 | 	add	fp, #12
0e37c     A7 14 02 FB | 	rdlong	arg02, fp
0e380     0C 4E 05 F1 | 	add	fp, #12
0e384     A7 16 02 FB | 	rdlong	arg03, fp
0e388     0C 4E 05 F1 | 	add	fp, #12
0e38c     A7 18 02 FB | 	rdlong	arg04, fp
0e390     24 4E 85 F1 | 	sub	fp, #36
0e394     37 00 00 FF 
0e398     28 E4 05 F1 | 	add	objptr, ##28200
0e39c     F2 1A 02 FB | 	rdlong	arg05, objptr
0e3a0     37 00 00 FF 
0e3a4     28 E4 85 F1 | 	sub	objptr, ##28200
0e3a8     00 66 B1 FD | 	call	#_hg010b_spin2_box
0e3ac                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e3ac     6C 00 90 FD | 	jmp	#LR__1191
0e3b0                 | LR__1190
0e3b0     A7 12 02 F6 | 	mov	arg01, fp
0e3b4     94 F3 BF FD | 	call	#_converttoint
0e3b8     FD 28 02 F6 | 	mov	local02, result1
0e3bc     0C 4E 05 F1 | 	add	fp, #12
0e3c0     A7 12 02 F6 | 	mov	arg01, fp
0e3c4     0C 4E 85 F1 | 	sub	fp, #12
0e3c8     80 F3 BF FD | 	call	#_converttoint
0e3cc     FD 2A 02 F6 | 	mov	local03, result1
0e3d0     18 4E 05 F1 | 	add	fp, #24
0e3d4     A7 12 02 F6 | 	mov	arg01, fp
0e3d8     18 4E 85 F1 | 	sub	fp, #24
0e3dc     6C F3 BF FD | 	call	#_converttoint
0e3e0     FD 26 02 F6 | 	mov	local01, result1
0e3e4     24 4E 05 F1 | 	add	fp, #36
0e3e8     A7 12 02 F6 | 	mov	arg01, fp
0e3ec     24 4E 85 F1 | 	sub	fp, #36
0e3f0     58 F3 BF FD | 	call	#_converttoint
0e3f4     FD 18 02 F6 | 	mov	arg04, result1
0e3f8     37 00 00 FF 
0e3fc     28 E4 05 F1 | 	add	objptr, ##28200
0e400     F2 1A 02 FB | 	rdlong	arg05, objptr
0e404     37 00 00 FF 
0e408     28 E4 85 F1 | 	sub	objptr, ##28200
0e40c     14 13 02 F6 | 	mov	arg01, local02
0e410     15 15 02 F6 | 	mov	arg02, local03
0e414     13 17 02 F6 | 	mov	arg03, local01
0e418     90 65 B1 FD | 	call	#_hg010b_spin2_box
0e41c                 | LR__1191
0e41c     A7 F0 03 F6 | 	mov	ptra, fp
0e420     B2 00 A0 FD | 	call	#popregs_
0e424                 | _do_box_ret
0e424     2D 00 64 FD | 	ret
0e428                 | 
0e428                 | ' 
0e428                 | ' '-------------------- brun
0e428                 | ' 
0e428                 | ' sub do_brun
0e428                 | _do_brun
0e428     08 4A 05 F6 | 	mov	COUNT_, #8
0e42c     A8 00 A0 FD | 	call	#pushregs_
0e430     34 F1 BF FD | 	call	#_pop
0e434     FE 1A 02 F6 | 	mov	arg05, result2
0e438     FF 18 02 F6 | 	mov	arg04, result3
0e43c     FD 26 02 F6 | 	mov	local01, result1
0e440     0D 29 02 F6 | 	mov	local02, arg05
0e444     0C 2B 02 F6 | 	mov	local03, arg04
0e448                 | ' 
0e448                 | ' t1=pop() 
0e448                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e448     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e44c     10 00 90 5D |  if_ne	jmp	#LR__1200
0e450     13 13 02 F6 | 	mov	arg01, local01
0e454     88 F2 BF FD | 	call	#_convertstring
0e458     FD 26 02 F6 | 	mov	local01, result1
0e45c     1F 2A 06 F6 | 	mov	local03, #31
0e460                 | LR__1200
0e460                 | ' if t1.result_type=result_string then
0e460     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e464     F0 01 90 5D |  if_ne	jmp	#LR__1204
0e468     13 2D 02 F6 | 	mov	local04, local01
0e46c                 | '   filename=t1.result.sresult
0e46c                 | '   if left$(filename,1)="/" then 
0e46c     16 13 02 F6 | 	mov	arg01, local04
0e470     01 14 06 F6 | 	mov	arg02, #1
0e474     00 A5 B1 FD | 	call	#__system__Left_S
0e478     FD 12 02 F6 | 	mov	arg01, result1
0e47c     B5 01 00 FF 
0e480     AB 15 06 F6 | 	mov	arg02, ##@LR__5840
0e484     98 84 B1 FD | 	call	#__system___string_cmp
0e488     00 FA 0D F2 | 	cmp	result1, #0 wz
0e48c     16 2F 02 A6 |  if_e	mov	local05, local04
0e490     14 00 90 AD |  if_e	jmp	#LR__1201
0e494     B5 01 00 FF 
0e498     AD 13 06 F6 | 	mov	arg01, ##@LR__5841
0e49c     16 15 02 F6 | 	mov	arg02, local04
0e4a0     B0 84 B1 FD | 	call	#__system___string_concat
0e4a4     FD 2E 02 F6 | 	mov	local05, result1
0e4a8                 | LR__1201
0e4a8                 | '   open fullfilename for input as #9
0e4a8     09 12 06 F6 | 	mov	arg01, #9
0e4ac     17 15 02 F6 | 	mov	arg02, local05
0e4b0     00 16 06 F6 | 	mov	arg03, #0
0e4b4     44 90 B1 FD | 	call	#__system___basic_open_string
0e4b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e4bc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e4c0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e4c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e4c8     FD 30 0A F6 | 	mov	local06, result1 wz
0e4cc                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e4cc     8C 00 90 AD |  if_e	jmp	#LR__1202
0e4d0     00 12 06 F6 | 	mov	arg01, #0
0e4d4     C4 E0 B1 FD | 	call	#__system___getiolock_0602
0e4d8     FD 12 02 F6 | 	mov	arg01, result1
0e4dc     18 84 B1 FD | 	call	#__system___lockmem
0e4e0     B5 01 00 FF 
0e4e4     B6 15 06 F6 | 	mov	arg02, ##@LR__5842
0e4e8     00 12 06 F6 | 	mov	arg01, #0
0e4ec     00 16 06 F6 | 	mov	arg03, #0
0e4f0     FC 90 B1 FD | 	call	#__system___basic_print_string
0e4f4     00 12 06 F6 | 	mov	arg01, #0
0e4f8     18 15 02 F6 | 	mov	arg02, local06
0e4fc     00 16 06 F6 | 	mov	arg03, #0
0e500     0A 18 06 F6 | 	mov	arg04, #10
0e504     2C 91 B1 FD | 	call	#__system___basic_print_integer
0e508     B5 01 00 FF 
0e50c     C4 15 06 F6 | 	mov	arg02, ##@LR__5843
0e510     00 12 06 F6 | 	mov	arg01, #0
0e514     00 16 06 F6 | 	mov	arg03, #0
0e518     D4 90 B1 FD | 	call	#__system___basic_print_string
0e51c     18 13 02 F6 | 	mov	arg01, local06
0e520     64 AD B1 FD | 	call	#__system___strerror
0e524     FD 14 02 F6 | 	mov	arg02, result1
0e528     00 12 06 F6 | 	mov	arg01, #0
0e52c     00 16 06 F6 | 	mov	arg03, #0
0e530     BC 90 B1 FD | 	call	#__system___basic_print_string
0e534     00 12 06 F6 | 	mov	arg01, #0
0e538     0A 14 06 F6 | 	mov	arg02, #10
0e53c     00 16 06 F6 | 	mov	arg03, #0
0e540     54 90 B1 FD | 	call	#__system___basic_print_char
0e544     00 12 06 F6 | 	mov	arg01, #0
0e548     50 E0 B1 FD | 	call	#__system___getiolock_0602
0e54c     FD 00 68 FC | 	wrlong	#0, result1
0e550     09 12 06 F6 | 	mov	arg01, #9
0e554     FC D6 B1 FD | 	call	#__system__close
0e558     FC 00 90 FD | 	jmp	#LR__1205
0e55c                 | LR__1202
0e55c     01 32 06 F6 | 	mov	local07, #1
0e560     00 34 06 F6 | 	mov	local08, #0
0e564                 | '   do
0e564                 | LR__1203
0e564                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e564     4E 00 00 FF 
0e568     B4 E4 05 F1 | 	add	objptr, ##40116
0e56c     F2 16 02 F6 | 	mov	arg03, objptr
0e570     4E 00 00 FF 
0e574     B4 E4 85 F1 | 	sub	objptr, ##40116
0e578     09 12 06 F6 | 	mov	arg01, #9
0e57c     19 15 02 F6 | 	mov	arg02, local07
0e580     0A 18 C6 F9 | 	decod	arg04, #10
0e584     01 1A 06 F6 | 	mov	arg05, #1
0e588     E0 91 B1 FD | 	call	#__system___basic_get
0e58c     FD 30 02 F6 | 	mov	local06, result1
0e590     FD 32 02 F1 | 	add	local07, result1
0e594     4E 00 00 FF 
0e598     B4 E4 05 F1 | 	add	objptr, ##40116
0e59c     F2 12 02 F6 | 	mov	arg01, objptr
0e5a0     1A 15 02 F6 | 	mov	arg02, local08
0e5a4     0A 16 C6 F9 | 	decod	arg03, #10
0e5a8     42 00 00 FF 
0e5ac     E8 E5 85 F1 | 	sub	objptr, ##34280
0e5b0     58 77 B1 FD | 	call	#_psram_spin2_write
0e5b4     0B 00 00 FF 
0e5b8     CC E4 85 F1 | 	sub	objptr, ##5836
0e5bc     18 35 02 F1 | 	add	local08, local06
0e5c0     02 00 00 FF 
0e5c4     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e5c8     E0 03 00 AF 
0e5cc     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5d0     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1203
0e5d4     36 00 00 FF 
0e5d8     FC E5 05 F1 | 	add	objptr, ##28156
0e5dc     F2 12 02 FB | 	rdlong	arg01, objptr
0e5e0     03 12 62 FD | 	cogstop	arg01
0e5e4     04 E4 05 F1 | 	add	objptr, #4
0e5e8     F2 12 02 FB | 	rdlong	arg01, objptr
0e5ec     03 12 62 FD | 	cogstop	arg01
0e5f0     04 E4 05 F1 | 	add	objptr, #4
0e5f4     F2 12 02 FB | 	rdlong	arg01, objptr
0e5f8     03 12 62 FD | 	cogstop	arg01
0e5fc     19 00 00 FF 
0e600     3C E5 05 F1 | 	add	objptr, ##13116
0e604     F2 12 02 FB | 	rdlong	arg01, objptr
0e608     03 12 62 FD | 	cogstop	arg01
0e60c     18 00 00 FF 
0e610     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e614     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e618     18 00 00 FF 
0e61c     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e620     19 00 00 FF 
0e624     34 E5 85 F1 | 	sub	objptr, ##13108
0e628     1E 34 06 F6 | 	mov	local08, #30
0e62c     28 E4 61 FD | 	setq	objptr
0e630     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e634     01 34 66 C6 |  if_b	neg	local08, #1
0e638     1B 00 00 FF 
0e63c     0C E5 05 F1 | 	add	objptr, ##14092
0e640     F2 34 62 FC | 	wrlong	local08, objptr
0e644     52 00 00 FF 
0e648     18 E5 85 F1 | 	sub	objptr, ##42264
0e64c     00 12 06 F6 | 	mov	arg01, #0
0e650     01 12 62 FD | 	cogid	arg01
0e654     03 12 62 FD | 	cogstop	arg01
0e658                 | LR__1204
0e658                 | LR__1205
0e658     A7 F0 03 F6 | 	mov	ptra, fp
0e65c     B2 00 A0 FD | 	call	#popregs_
0e660                 | _do_brun_ret
0e660     2D 00 64 FD | 	ret
0e664                 | 
0e664                 | ' 
0e664                 | ' '-------------------- cd
0e664                 | ' 
0e664                 | ' sub do_cd
0e664                 | _do_cd
0e664     06 4A 05 F6 | 	mov	COUNT_, #6
0e668     A8 00 A0 FD | 	call	#pushregs_
0e66c     B5 01 00 FF 
0e670     C7 13 06 F6 | 	mov	arg01, ##@LR__5844
0e674     31 14 06 F6 | 	mov	arg02, #49
0e678     E0 E0 B1 FD | 	call	#__system___basic_dir
0e67c     E8 EE BF FD | 	call	#_pop
0e680     FE 18 02 F6 | 	mov	arg04, result2
0e684     FF 16 02 F6 | 	mov	arg03, result3
0e688     FD 26 02 F6 | 	mov	local01, result1
0e68c     0C 29 02 F6 | 	mov	local02, arg04
0e690     0B 2B 02 F6 | 	mov	local03, arg03
0e694                 | ' t1=pop()
0e694                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e694     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e698     10 00 90 5D |  if_ne	jmp	#LR__1210
0e69c     13 13 02 F6 | 	mov	arg01, local01
0e6a0     3C F0 BF FD | 	call	#_convertstring
0e6a4     FD 26 02 F6 | 	mov	local01, result1
0e6a8     1F 2A 06 F6 | 	mov	local03, #31
0e6ac                 | LR__1210
0e6ac                 | ' if t1.result_type<>result_string then printerror(15): return
0e6ac     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e6b0     10 00 90 AD |  if_e	jmp	#LR__1211
0e6b4     0F 12 06 F6 | 	mov	arg01, #15
0e6b8     00 14 06 F6 | 	mov	arg02, #0
0e6bc     48 48 B1 FD | 	call	#_printerror
0e6c0     54 05 90 FD | 	jmp	#LR__1229
0e6c4                 | LR__1211
0e6c4     13 2D 02 F6 | 	mov	local04, local01
0e6c8                 | ' newdir$=t1.result.sresult
0e6c8                 | ' if newdir$=".." then 
0e6c8     B5 01 00 FF 
0e6cc     C9 15 06 F6 | 	mov	arg02, ##@LR__5845
0e6d0     16 13 02 F6 | 	mov	arg01, local04
0e6d4     48 82 B1 FD | 	call	#__system___string_cmp
0e6d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e6dc     C8 01 90 5D |  if_ne	jmp	#LR__1218
0e6e0     4A 00 00 FF 
0e6e4     94 E4 05 F1 | 	add	objptr, ##38036
0e6e8     F2 12 02 FB | 	rdlong	arg01, objptr
0e6ec     4A 00 00 FF 
0e6f0     94 E4 85 F1 | 	sub	objptr, ##38036
0e6f4     09 2F 02 F6 | 	mov	local05, arg01
0e6f8     97 06 48 FB | 	callpa	#(@LR__1213-@LR__1212)>>2,fcache_load_ptr_
0e6fc                 | LR__1212
0e6fc     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e700     01 2E 06 51 |  if_ne	add	local05, #1
0e704     F4 FF 9F 5D |  if_ne	jmp	#LR__1212
0e708                 | LR__1213
0e708     17 13 C2 F2 | 	subr	arg01, local05
0e70c     4A 00 00 FF 
0e710     94 E4 05 F1 | 	add	objptr, ##38036
0e714     F2 14 02 FB | 	rdlong	arg02, objptr
0e718     4A 00 00 FF 
0e71c     94 E4 85 F1 | 	sub	objptr, ##38036
0e720     B5 01 00 FF 
0e724     CC 17 06 F6 | 	mov	arg03, ##@LR__5846
0e728     98 A8 B1 FD | 	call	#__system__InstrRev
0e72c     FD 2C 02 F6 | 	mov	local04, result1
0e730                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e730     02 2C 56 F2 | 	cmps	local04, #2 wc
0e734     28 00 90 CD |  if_b	jmp	#LR__1214
0e738     4A 00 00 FF 
0e73c     94 E4 05 F1 | 	add	objptr, ##38036
0e740     F2 12 02 FB | 	rdlong	arg01, objptr
0e744     4A 00 00 FF 
0e748     94 E4 85 F1 | 	sub	objptr, ##38036
0e74c     01 2C 86 F1 | 	sub	local04, #1
0e750     16 15 02 F6 | 	mov	arg02, local04
0e754     20 A2 B1 FD | 	call	#__system__Left_S
0e758     FD 2C 02 F6 | 	mov	local04, result1
0e75c     08 00 90 FD | 	jmp	#LR__1215
0e760                 | LR__1214
0e760     B5 01 00 FF 
0e764     CE 2D 06 F6 | 	mov	local04, ##@LR__5847
0e768                 | LR__1215
0e768     16 13 02 F6 | 	mov	arg01, local04
0e76c     14 88 B1 FD | 	call	#__system___chdir
0e770     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e774     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e778     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e77c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e780     FD 30 0A F6 | 	mov	local06, result1 wz
0e784                 | '   chdir newdir$
0e784                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e784     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e788     A4 00 90 AD |  if_e	jmp	#LR__1216
0e78c     00 12 06 F6 | 	mov	arg01, #0
0e790     08 DE B1 FD | 	call	#__system___getiolock_0602
0e794     FD 12 02 F6 | 	mov	arg01, result1
0e798     5C 81 B1 FD | 	call	#__system___lockmem
0e79c     B5 01 00 FF 
0e7a0     D0 15 06 F6 | 	mov	arg02, ##@LR__5848
0e7a4     00 12 06 F6 | 	mov	arg01, #0
0e7a8     00 16 06 F6 | 	mov	arg03, #0
0e7ac     40 8E B1 FD | 	call	#__system___basic_print_string
0e7b0     00 12 06 F6 | 	mov	arg01, #0
0e7b4     18 15 02 F6 | 	mov	arg02, local06
0e7b8     00 16 06 F6 | 	mov	arg03, #0
0e7bc     0A 18 06 F6 | 	mov	arg04, #10
0e7c0     70 8E B1 FD | 	call	#__system___basic_print_integer
0e7c4     B5 01 00 FF 
0e7c8     DE 15 06 F6 | 	mov	arg02, ##@LR__5849
0e7cc     00 12 06 F6 | 	mov	arg01, #0
0e7d0     00 16 06 F6 | 	mov	arg03, #0
0e7d4     18 8E B1 FD | 	call	#__system___basic_print_string
0e7d8     45 00 00 FF 
0e7dc     50 E5 05 F1 | 	add	objptr, ##35664
0e7e0     F2 14 02 FB | 	rdlong	arg02, objptr
0e7e4     45 00 00 FF 
0e7e8     50 E5 85 F1 | 	sub	objptr, ##35664
0e7ec     00 12 06 F6 | 	mov	arg01, #0
0e7f0     00 16 06 F6 | 	mov	arg03, #0
0e7f4     F8 8D B1 FD | 	call	#__system___basic_print_string
0e7f8     00 12 06 F6 | 	mov	arg01, #0
0e7fc     0A 14 06 F6 | 	mov	arg02, #10
0e800     00 16 06 F6 | 	mov	arg03, #0
0e804     90 8D B1 FD | 	call	#__system___basic_print_char
0e808     00 12 06 F6 | 	mov	arg01, #0
0e80c     8C DD B1 FD | 	call	#__system___getiolock_0602
0e810     FD 00 68 FC | 	wrlong	#0, result1
0e814     4A 00 00 FF 
0e818     94 E4 05 F1 | 	add	objptr, ##38036
0e81c     F2 12 02 FB | 	rdlong	arg01, objptr
0e820     4A 00 00 FF 
0e824     94 E4 85 F1 | 	sub	objptr, ##38036
0e828     58 87 B1 FD | 	call	#__system___chdir
0e82c     14 00 90 FD | 	jmp	#LR__1217
0e830                 | LR__1216
0e830     4A 00 00 FF 
0e834     94 E4 05 F1 | 	add	objptr, ##38036
0e838     F2 2C 62 FC | 	wrlong	local04, objptr
0e83c     4A 00 00 FF 
0e840     94 E4 85 F1 | 	sub	objptr, ##38036
0e844                 | LR__1217
0e844                 | '   print "Current directory: ";currentdir$
0e844     00 12 06 F6 | 	mov	arg01, #0
0e848     50 DD B1 FD | 	call	#__system___getiolock_0602
0e84c     FD 12 02 F6 | 	mov	arg01, result1
0e850     A4 80 B1 FD | 	call	#__system___lockmem
0e854     B5 01 00 FF 
0e858     E1 15 06 F6 | 	mov	arg02, ##@LR__5850
0e85c     00 12 06 F6 | 	mov	arg01, #0
0e860     00 16 06 F6 | 	mov	arg03, #0
0e864     88 8D B1 FD | 	call	#__system___basic_print_string
0e868     4A 00 00 FF 
0e86c     94 E4 05 F1 | 	add	objptr, ##38036
0e870     F2 14 02 FB | 	rdlong	arg02, objptr
0e874     4A 00 00 FF 
0e878     94 E4 85 F1 | 	sub	objptr, ##38036
0e87c     00 12 06 F6 | 	mov	arg01, #0
0e880     00 16 06 F6 | 	mov	arg03, #0
0e884     68 8D B1 FD | 	call	#__system___basic_print_string
0e888     00 12 06 F6 | 	mov	arg01, #0
0e88c     0A 14 06 F6 | 	mov	arg02, #10
0e890     00 16 06 F6 | 	mov	arg03, #0
0e894     00 8D B1 FD | 	call	#__system___basic_print_char
0e898     00 12 06 F6 | 	mov	arg01, #0
0e89c     FC DC B1 FD | 	call	#__system___getiolock_0602
0e8a0     FD 00 68 FC | 	wrlong	#0, result1
0e8a4                 | '   return
0e8a4     70 03 90 FD | 	jmp	#LR__1229
0e8a8                 | LR__1218
0e8a8                 | ' if left$(newdir$,1)="/" then 
0e8a8     16 13 02 F6 | 	mov	arg01, local04
0e8ac     01 14 06 F6 | 	mov	arg02, #1
0e8b0     C4 A0 B1 FD | 	call	#__system__Left_S
0e8b4     FD 12 02 F6 | 	mov	arg01, result1
0e8b8     B5 01 00 FF 
0e8bc     F5 15 06 F6 | 	mov	arg02, ##@LR__5851
0e8c0     5C 80 B1 FD | 	call	#__system___string_cmp
0e8c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e8c8     40 01 90 5D |  if_ne	jmp	#LR__1221
0e8cc     16 13 02 F6 | 	mov	arg01, local04
0e8d0     B0 86 B1 FD | 	call	#__system___chdir
0e8d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e8d8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e8dc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e8e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e8e4     FD 30 0A F6 | 	mov	local06, result1 wz
0e8e8                 | '   chdir(newdir$)
0e8e8                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e8e8     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e8ec     A4 00 90 AD |  if_e	jmp	#LR__1219
0e8f0     00 12 06 F6 | 	mov	arg01, #0
0e8f4     A4 DC B1 FD | 	call	#__system___getiolock_0602
0e8f8     FD 12 02 F6 | 	mov	arg01, result1
0e8fc     F8 7F B1 FD | 	call	#__system___lockmem
0e900     B5 01 00 FF 
0e904     F7 15 06 F6 | 	mov	arg02, ##@LR__5852
0e908     00 12 06 F6 | 	mov	arg01, #0
0e90c     00 16 06 F6 | 	mov	arg03, #0
0e910     DC 8C B1 FD | 	call	#__system___basic_print_string
0e914     00 12 06 F6 | 	mov	arg01, #0
0e918     18 15 02 F6 | 	mov	arg02, local06
0e91c     00 16 06 F6 | 	mov	arg03, #0
0e920     0A 18 06 F6 | 	mov	arg04, #10
0e924     0C 8D B1 FD | 	call	#__system___basic_print_integer
0e928     B6 01 00 FF 
0e92c     05 14 06 F6 | 	mov	arg02, ##@LR__5853
0e930     00 12 06 F6 | 	mov	arg01, #0
0e934     00 16 06 F6 | 	mov	arg03, #0
0e938     B4 8C B1 FD | 	call	#__system___basic_print_string
0e93c     45 00 00 FF 
0e940     50 E5 05 F1 | 	add	objptr, ##35664
0e944     F2 14 02 FB | 	rdlong	arg02, objptr
0e948     45 00 00 FF 
0e94c     50 E5 85 F1 | 	sub	objptr, ##35664
0e950     00 12 06 F6 | 	mov	arg01, #0
0e954     00 16 06 F6 | 	mov	arg03, #0
0e958     94 8C B1 FD | 	call	#__system___basic_print_string
0e95c     00 12 06 F6 | 	mov	arg01, #0
0e960     0A 14 06 F6 | 	mov	arg02, #10
0e964     00 16 06 F6 | 	mov	arg03, #0
0e968     2C 8C B1 FD | 	call	#__system___basic_print_char
0e96c     00 12 06 F6 | 	mov	arg01, #0
0e970     28 DC B1 FD | 	call	#__system___getiolock_0602
0e974     FD 00 68 FC | 	wrlong	#0, result1
0e978     4A 00 00 FF 
0e97c     94 E4 05 F1 | 	add	objptr, ##38036
0e980     F2 12 02 FB | 	rdlong	arg01, objptr
0e984     4A 00 00 FF 
0e988     94 E4 85 F1 | 	sub	objptr, ##38036
0e98c     F4 85 B1 FD | 	call	#__system___chdir
0e990     14 00 90 FD | 	jmp	#LR__1220
0e994                 | LR__1219
0e994     4A 00 00 FF 
0e998     94 E4 05 F1 | 	add	objptr, ##38036
0e99c     F2 2C 62 FC | 	wrlong	local04, objptr
0e9a0     4A 00 00 FF 
0e9a4     94 E4 85 F1 | 	sub	objptr, ##38036
0e9a8                 | LR__1220
0e9a8                 | '   print "Current directory: ";currentdir$
0e9a8     00 12 06 F6 | 	mov	arg01, #0
0e9ac     EC DB B1 FD | 	call	#__system___getiolock_0602
0e9b0     FD 12 02 F6 | 	mov	arg01, result1
0e9b4     40 7F B1 FD | 	call	#__system___lockmem
0e9b8     B6 01 00 FF 
0e9bc     08 14 06 F6 | 	mov	arg02, ##@LR__5854
0e9c0     00 12 06 F6 | 	mov	arg01, #0
0e9c4     00 16 06 F6 | 	mov	arg03, #0
0e9c8     24 8C B1 FD | 	call	#__system___basic_print_string
0e9cc     4A 00 00 FF 
0e9d0     94 E4 05 F1 | 	add	objptr, ##38036
0e9d4     F2 14 02 FB | 	rdlong	arg02, objptr
0e9d8     4A 00 00 FF 
0e9dc     94 E4 85 F1 | 	sub	objptr, ##38036
0e9e0     00 12 06 F6 | 	mov	arg01, #0
0e9e4     00 16 06 F6 | 	mov	arg03, #0
0e9e8     04 8C B1 FD | 	call	#__system___basic_print_string
0e9ec     00 12 06 F6 | 	mov	arg01, #0
0e9f0     0A 14 06 F6 | 	mov	arg02, #10
0e9f4     00 16 06 F6 | 	mov	arg03, #0
0e9f8     9C 8B B1 FD | 	call	#__system___basic_print_char
0e9fc     00 12 06 F6 | 	mov	arg01, #0
0ea00     98 DB B1 FD | 	call	#__system___getiolock_0602
0ea04     FD 00 68 FC | 	wrlong	#0, result1
0ea08                 | '   return
0ea08     0C 02 90 FD | 	jmp	#LR__1229
0ea0c                 | LR__1221
0ea0c                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ea0c     4A 00 00 FF 
0ea10     94 E4 05 F1 | 	add	objptr, ##38036
0ea14     F2 12 02 FB | 	rdlong	arg01, objptr
0ea18     4A 00 00 FF 
0ea1c     94 E4 85 F1 | 	sub	objptr, ##38036
0ea20     B6 01 00 FF 
0ea24     1C 14 06 F6 | 	mov	arg02, ##@LR__5855
0ea28     F4 7E B1 FD | 	call	#__system___string_cmp
0ea2c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea30     34 00 90 AD |  if_e	jmp	#LR__1222
0ea34     4A 00 00 FF 
0ea38     94 E4 05 F1 | 	add	objptr, ##38036
0ea3c     F2 12 02 FB | 	rdlong	arg01, objptr
0ea40     4A 00 00 FF 
0ea44     94 E4 85 F1 | 	sub	objptr, ##38036
0ea48     B6 01 00 FF 
0ea4c     1E 14 06 F6 | 	mov	arg02, ##@LR__5856
0ea50     00 7F B1 FD | 	call	#__system___string_concat
0ea54     FD 12 02 F6 | 	mov	arg01, result1
0ea58     16 15 02 F6 | 	mov	arg02, local04
0ea5c     F4 7E B1 FD | 	call	#__system___string_concat
0ea60     FD 2C 02 F6 | 	mov	local04, result1
0ea64     20 00 90 FD | 	jmp	#LR__1223
0ea68                 | LR__1222
0ea68     4A 00 00 FF 
0ea6c     94 E4 05 F1 | 	add	objptr, ##38036
0ea70     F2 12 02 FB | 	rdlong	arg01, objptr
0ea74     4A 00 00 FF 
0ea78     94 E4 85 F1 | 	sub	objptr, ##38036
0ea7c     16 15 02 F6 | 	mov	arg02, local04
0ea80     D0 7E B1 FD | 	call	#__system___string_concat
0ea84     FD 2C 02 F6 | 	mov	local04, result1
0ea88                 | LR__1223
0ea88                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea88     16 13 02 F6 | 	mov	arg01, local04
0ea8c     01 14 06 F6 | 	mov	arg02, #1
0ea90     6C 9F B1 FD | 	call	#__system__Right_S
0ea94     FD 12 02 F6 | 	mov	arg01, result1
0ea98     B6 01 00 FF 
0ea9c     20 14 06 F6 | 	mov	arg02, ##@LR__5857
0eaa0     7C 7E B1 FD | 	call	#__system___string_cmp
0eaa4     00 FA 0D F2 | 	cmp	result1, #0 wz
0eaa8     30 00 90 5D |  if_ne	jmp	#LR__1226
0eaac     16 13 02 F6 | 	mov	arg01, local04
0eab0     09 2F 02 F6 | 	mov	local05, arg01
0eab4     97 06 48 FB | 	callpa	#(@LR__1225-@LR__1224)>>2,fcache_load_ptr_
0eab8                 | LR__1224
0eab8     17 FB C9 FA | 	rdbyte	result1, local05 wz
0eabc     01 2E 06 51 |  if_ne	add	local05, #1
0eac0     F4 FF 9F 5D |  if_ne	jmp	#LR__1224
0eac4                 | LR__1225
0eac4     09 2F 82 F1 | 	sub	local05, arg01
0eac8     17 15 02 F6 | 	mov	arg02, local05
0eacc     01 14 86 F1 | 	sub	arg02, #1
0ead0     16 13 02 F6 | 	mov	arg01, local04
0ead4     A0 9E B1 FD | 	call	#__system__Left_S
0ead8     FD 2C 02 F6 | 	mov	local04, result1
0eadc                 | LR__1226
0eadc     16 13 02 F6 | 	mov	arg01, local04
0eae0     A0 84 B1 FD | 	call	#__system___chdir
0eae4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eae8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eaec     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eaf0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eaf4     FD 30 0A F6 | 	mov	local06, result1 wz
0eaf8                 | '   chdir(newdir$)
0eaf8                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eaf8     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0eafc     A4 00 90 AD |  if_e	jmp	#LR__1227
0eb00     00 12 06 F6 | 	mov	arg01, #0
0eb04     94 DA B1 FD | 	call	#__system___getiolock_0602
0eb08     FD 12 02 F6 | 	mov	arg01, result1
0eb0c     E8 7D B1 FD | 	call	#__system___lockmem
0eb10     B6 01 00 FF 
0eb14     22 14 06 F6 | 	mov	arg02, ##@LR__5858
0eb18     00 12 06 F6 | 	mov	arg01, #0
0eb1c     00 16 06 F6 | 	mov	arg03, #0
0eb20     CC 8A B1 FD | 	call	#__system___basic_print_string
0eb24     00 12 06 F6 | 	mov	arg01, #0
0eb28     18 15 02 F6 | 	mov	arg02, local06
0eb2c     00 16 06 F6 | 	mov	arg03, #0
0eb30     0A 18 06 F6 | 	mov	arg04, #10
0eb34     FC 8A B1 FD | 	call	#__system___basic_print_integer
0eb38     B6 01 00 FF 
0eb3c     30 14 06 F6 | 	mov	arg02, ##@LR__5859
0eb40     00 12 06 F6 | 	mov	arg01, #0
0eb44     00 16 06 F6 | 	mov	arg03, #0
0eb48     A4 8A B1 FD | 	call	#__system___basic_print_string
0eb4c     45 00 00 FF 
0eb50     50 E5 05 F1 | 	add	objptr, ##35664
0eb54     F2 14 02 FB | 	rdlong	arg02, objptr
0eb58     45 00 00 FF 
0eb5c     50 E5 85 F1 | 	sub	objptr, ##35664
0eb60     00 12 06 F6 | 	mov	arg01, #0
0eb64     00 16 06 F6 | 	mov	arg03, #0
0eb68     84 8A B1 FD | 	call	#__system___basic_print_string
0eb6c     00 12 06 F6 | 	mov	arg01, #0
0eb70     0A 14 06 F6 | 	mov	arg02, #10
0eb74     00 16 06 F6 | 	mov	arg03, #0
0eb78     1C 8A B1 FD | 	call	#__system___basic_print_char
0eb7c     00 12 06 F6 | 	mov	arg01, #0
0eb80     18 DA B1 FD | 	call	#__system___getiolock_0602
0eb84     FD 00 68 FC | 	wrlong	#0, result1
0eb88     4A 00 00 FF 
0eb8c     94 E4 05 F1 | 	add	objptr, ##38036
0eb90     F2 12 02 FB | 	rdlong	arg01, objptr
0eb94     4A 00 00 FF 
0eb98     94 E4 85 F1 | 	sub	objptr, ##38036
0eb9c     E4 83 B1 FD | 	call	#__system___chdir
0eba0     14 00 90 FD | 	jmp	#LR__1228
0eba4                 | LR__1227
0eba4     4A 00 00 FF 
0eba8     94 E4 05 F1 | 	add	objptr, ##38036
0ebac     F2 2C 62 FC | 	wrlong	local04, objptr
0ebb0     4A 00 00 FF 
0ebb4     94 E4 85 F1 | 	sub	objptr, ##38036
0ebb8                 | LR__1228
0ebb8                 | '   print "Current directory: ";currentdir$
0ebb8     00 12 06 F6 | 	mov	arg01, #0
0ebbc     DC D9 B1 FD | 	call	#__system___getiolock_0602
0ebc0     FD 12 02 F6 | 	mov	arg01, result1
0ebc4     30 7D B1 FD | 	call	#__system___lockmem
0ebc8     B6 01 00 FF 
0ebcc     33 14 06 F6 | 	mov	arg02, ##@LR__5860
0ebd0     00 12 06 F6 | 	mov	arg01, #0
0ebd4     00 16 06 F6 | 	mov	arg03, #0
0ebd8     14 8A B1 FD | 	call	#__system___basic_print_string
0ebdc     4A 00 00 FF 
0ebe0     94 E4 05 F1 | 	add	objptr, ##38036
0ebe4     F2 14 02 FB | 	rdlong	arg02, objptr
0ebe8     4A 00 00 FF 
0ebec     94 E4 85 F1 | 	sub	objptr, ##38036
0ebf0     00 12 06 F6 | 	mov	arg01, #0
0ebf4     00 16 06 F6 | 	mov	arg03, #0
0ebf8     F4 89 B1 FD | 	call	#__system___basic_print_string
0ebfc     00 12 06 F6 | 	mov	arg01, #0
0ec00     0A 14 06 F6 | 	mov	arg02, #10
0ec04     00 16 06 F6 | 	mov	arg03, #0
0ec08     8C 89 B1 FD | 	call	#__system___basic_print_char
0ec0c     00 12 06 F6 | 	mov	arg01, #0
0ec10     88 D9 B1 FD | 	call	#__system___getiolock_0602
0ec14     FD 00 68 FC | 	wrlong	#0, result1
0ec18                 | LR__1229
0ec18     A7 F0 03 F6 | 	mov	ptra, fp
0ec1c     B2 00 A0 FD | 	call	#popregs_
0ec20                 | _do_cd_ret
0ec20     2D 00 64 FD | 	ret
0ec24                 | 
0ec24                 | ' 
0ec24                 | ' '-------------------- changefreq
0ec24                 | ' 
0ec24                 | ' sub do_changefreq
0ec24                 | _do_changefreq
0ec24     04 4A 05 F6 | 	mov	COUNT_, #4
0ec28     A8 00 A0 FD | 	call	#pushregs_
0ec2c     28 F0 07 F1 | 	add	ptra, #40
0ec30     34 E9 BF FD | 	call	#_pop
0ec34     FF 14 02 F6 | 	mov	arg02, result3
0ec38     A7 FA 61 FC | 	wrlong	result1, fp
0ec3c     04 4E 05 F1 | 	add	fp, #4
0ec40     A7 FC 61 FC | 	wrlong	result2, fp
0ec44     04 4E 05 F1 | 	add	fp, #4
0ec48     A7 14 62 FC | 	wrlong	arg02, fp
0ec4c     08 4E 85 F1 | 	sub	fp, #8
0ec50     A7 12 02 F6 | 	mov	arg01, fp
0ec54     B0 EB BF FD | 	call	#_converttofloat
0ec58     24 4E 05 F1 | 	add	fp, #36
0ec5c     A7 FA 61 FC | 	wrlong	result1, fp
0ec60     24 4E 85 F1 | 	sub	fp, #36
0ec64     FD 14 02 F6 | 	mov	arg02, result1
0ec68     FC 16 20 FF 
0ec6c     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec70     D0 BA B1 FD | 	call	#__system____builtin_logbase
0ec74     FD 26 02 F6 | 	mov	local01, result1
0ec78     1E 14 C6 F9 | 	decod	arg02, #30
0ec7c     FC 16 20 FF 
0ec80     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec84     BC BA B1 FD | 	call	#__system____builtin_logbase
0ec88     FD 14 02 F6 | 	mov	arg02, result1
0ec8c     13 13 02 F6 | 	mov	arg01, local01
0ec90     E4 AC B1 FD | 	call	#__system___float_div
0ec94     FD 12 02 F6 | 	mov	arg01, result1
0ec98     00 14 06 F6 | 	mov	arg02, #0
0ec9c     9C AF B1 FD | 	call	#__system___float_tointeger
0eca0     10 4E 05 F1 | 	add	fp, #16
0eca4     A7 FA 61 FC | 	wrlong	result1, fp
0eca8     1E 26 C6 F9 | 	decod	local01, #30
0ecac     FD 12 02 F6 | 	mov	arg01, result1
0ecb0     10 4E 85 F1 | 	sub	fp, #16
0ecb4     05 12 06 F1 | 	add	arg01, #5
0ecb8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ecbc     1F 28 C6 C9 |  if_b	decod	local02, #31
0ecc0     00 28 06 36 |  if_ae	mov	local02, #0
0ecc4     A8 A6 B1 FD | 	call	#__system___float_fromuns
0ecc8     14 FB 61 F5 | 	xor	result1, local02
0eccc     FD 14 02 F6 | 	mov	arg02, result1
0ecd0     13 13 02 F6 | 	mov	arg01, local01
0ecd4     A4 B9 B1 FD | 	call	#__system____builtin_powf
0ecd8     FD 12 02 F6 | 	mov	arg01, result1
0ecdc     01 14 06 F6 | 	mov	arg02, #1
0ece0     58 AF B1 FD | 	call	#__system___float_tointeger
0ece4     14 4E 05 F1 | 	add	fp, #20
0ece8     A7 FA 61 FC | 	wrlong	result1, fp
0ecec                 | ' skip=round(2^(lfreq+5))
0ecec                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ecec     14 4E 85 F1 | 	sub	fp, #20
0ecf0     40 00 00 FF 
0ecf4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ecf8     30 00 90 CD |  if_b	jmp	#LR__1230
0ecfc     14 4E 05 F1 | 	add	fp, #20
0ed00     A7 26 02 FB | 	rdlong	local01, fp
0ed04     13 27 52 F6 | 	abs	local01, local01 wc
0ed08     0F 26 46 F0 | 	shr	local01, #15
0ed0c     13 27 82 F6 | 	negc	local01, local01
0ed10     04 4E 05 F1 | 	add	fp, #4
0ed14     A7 26 62 FC | 	wrlong	local01, fp
0ed18     04 4E 85 F1 | 	sub	fp, #4
0ed1c     40 00 80 FF 
0ed20     A7 00 68 FC | 	wrlong	##32768, fp
0ed24     14 4E 85 F1 | 	sub	fp, #20
0ed28     0C 00 90 FD | 	jmp	#LR__1231
0ed2c                 | LR__1230
0ed2c     18 4E 05 F1 | 	add	fp, #24
0ed30     A7 02 68 FC | 	wrlong	#1, fp
0ed34     18 4E 85 F1 | 	sub	fp, #24
0ed38                 | LR__1231
0ed38     24 4E 05 F1 | 	add	fp, #36
0ed3c     A7 14 02 FB | 	rdlong	arg02, fp
0ed40     24 4E 85 F1 | 	sub	fp, #36
0ed44     3E 2C 25 FF 
0ed48     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ed4c     28 AC B1 FD | 	call	#__system___float_div
0ed50     FD 26 02 F6 | 	mov	local01, result1
0ed54     18 4E 05 F1 | 	add	fp, #24
0ed58     A7 12 02 FB | 	rdlong	arg01, fp
0ed5c     18 4E 85 F1 | 	sub	fp, #24
0ed60     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed64     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed68     00 28 06 36 |  if_ae	mov	local02, #0
0ed6c     00 A6 B1 FD | 	call	#__system___float_fromuns
0ed70     14 FB 61 F5 | 	xor	result1, local02
0ed74     FD 2A 02 F6 | 	mov	local03, result1
0ed78     1E 2C C6 F9 | 	decod	local04, #30
0ed7c     0D 12 06 F6 | 	mov	arg01, #13
0ed80     10 4E 05 F1 | 	add	fp, #16
0ed84     A7 14 02 FB | 	rdlong	arg02, fp
0ed88     10 4E 85 F1 | 	sub	fp, #16
0ed8c     0A 13 82 F1 | 	sub	arg01, arg02
0ed90     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed94     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed98     00 28 06 36 |  if_ae	mov	local02, #0
0ed9c     D0 A5 B1 FD | 	call	#__system___float_fromuns
0eda0     14 FB 61 F5 | 	xor	result1, local02
0eda4     FD 14 02 F6 | 	mov	arg02, result1
0eda8     16 13 02 F6 | 	mov	arg01, local04
0edac     CC B8 B1 FD | 	call	#__system____builtin_powf
0edb0     FD 14 02 F6 | 	mov	arg02, result1
0edb4     15 13 02 F6 | 	mov	arg01, local03
0edb8     B8 A9 B1 FD | 	call	#__system___float_mul
0edbc     FD 14 02 F6 | 	mov	arg02, result1
0edc0     13 13 02 F6 | 	mov	arg01, local01
0edc4     B0 AB B1 FD | 	call	#__system___float_div
0edc8     FD 12 02 F6 | 	mov	arg01, result1
0edcc     01 14 06 F6 | 	mov	arg02, #1
0edd0     68 AE B1 FD | 	call	#__system___float_tointeger
0edd4     FD 26 02 F6 | 	mov	local01, result1
0edd8     1C 4E 05 F1 | 	add	fp, #28
0eddc     A7 26 62 FC | 	wrlong	local01, fp
0ede0     1C 4E 85 F1 | 	sub	fp, #28
0ede4     80 E7 BF FD | 	call	#_pop
0ede8     FF 2C 02 F6 | 	mov	local04, result3
0edec     A7 FA 61 FC | 	wrlong	result1, fp
0edf0     04 4E 05 F1 | 	add	fp, #4
0edf4     A7 FC 61 FC | 	wrlong	result2, fp
0edf8     04 4E 05 F1 | 	add	fp, #4
0edfc     A7 2C 62 FC | 	wrlong	local04, fp
0ee00     08 4E 85 F1 | 	sub	fp, #8
0ee04     A7 12 02 F6 | 	mov	arg01, fp
0ee08     40 E9 BF FD | 	call	#_converttoint
0ee0c     FD 2A 52 F6 | 	abs	local03, result1 wc
0ee10     07 2A 06 F5 | 	and	local03, #7
0ee14     15 2B 82 F6 | 	negc	local03, local03
0ee18     0C 4E 05 F1 | 	add	fp, #12
0ee1c     A7 2A 62 FC | 	wrlong	local03, fp
0ee20     08 4E 05 F1 | 	add	fp, #8
0ee24     A7 26 02 FB | 	rdlong	local01, fp
0ee28     10 26 66 F0 | 	shl	local01, #16
0ee2c     08 4E 05 F1 | 	add	fp, #8
0ee30     A7 2C 02 FB | 	rdlong	local04, fp
0ee34     16 27 02 F1 | 	add	local01, local04
0ee38     04 4E 05 F1 | 	add	fp, #4
0ee3c     A7 26 62 FC | 	wrlong	local01, fp
0ee40                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ee40     37 00 00 FF 
0ee44     10 E4 05 F1 | 	add	objptr, ##28176
0ee48     F2 12 02 FB | 	rdlong	arg01, objptr
0ee4c     37 00 00 FF 
0ee50     10 E4 85 F1 | 	sub	objptr, ##28176
0ee54     14 4E 85 F1 | 	sub	fp, #20
0ee58     A7 2C 02 FB | 	rdlong	local04, fp
0ee5c     0C 4E 85 F1 | 	sub	fp, #12
0ee60     06 2C 66 F0 | 	shl	local04, #6
0ee64     16 13 02 F1 | 	add	arg01, local04
0ee68     08 12 06 F1 | 	add	arg01, #8
0ee6c     09 FB 01 FB | 	rdlong	result1, arg01
0ee70     1B FA 2D F4 | 	testbn	result1, #27 wz
0ee74     3C 00 90 5D |  if_ne	jmp	#LR__1232
0ee78     37 00 00 FF 
0ee7c     10 E4 05 F1 | 	add	objptr, ##28176
0ee80     F2 12 02 FB | 	rdlong	arg01, objptr
0ee84     37 00 00 FF 
0ee88     10 E4 85 F1 | 	sub	objptr, ##28176
0ee8c     0C 4E 05 F1 | 	add	fp, #12
0ee90     A7 2C 02 FB | 	rdlong	local04, fp
0ee94     06 2C 66 F0 | 	shl	local04, #6
0ee98     16 13 02 F1 | 	add	arg01, local04
0ee9c     18 12 06 F1 | 	add	arg01, #24
0eea0     14 4E 05 F1 | 	add	fp, #20
0eea4     A7 14 02 FB | 	rdlong	arg02, fp
0eea8     20 4E 85 F1 | 	sub	fp, #32
0eeac     09 15 62 FC | 	wrlong	arg02, arg01
0eeb0     80 00 90 FD | 	jmp	#LR__1233
0eeb4                 | LR__1232
0eeb4     37 00 00 FF 
0eeb8     10 E4 05 F1 | 	add	objptr, ##28176
0eebc     F2 26 02 FB | 	rdlong	local01, objptr
0eec0     37 00 00 FF 
0eec4     10 E4 85 F1 | 	sub	objptr, ##28176
0eec8     0C 4E 05 F1 | 	add	fp, #12
0eecc     A7 2C 02 FB | 	rdlong	local04, fp
0eed0     06 2C 66 F0 | 	shl	local04, #6
0eed4     16 27 02 F1 | 	add	local01, local04
0eed8     18 26 06 F1 | 	add	local01, #24
0eedc     18 4E 05 F1 | 	add	fp, #24
0eee0     A7 14 02 FB | 	rdlong	arg02, fp
0eee4     24 4E 85 F1 | 	sub	fp, #36
0eee8     3E 2C 25 FF 
0eeec     3C 12 06 F6 | 	mov	arg01, ##1247312956
0eef0     84 AA B1 FD | 	call	#__system___float_div
0eef4     FD 12 02 F6 | 	mov	arg01, result1
0eef8     01 14 06 F6 | 	mov	arg02, #1
0eefc     3C AD B1 FD | 	call	#__system___float_tointeger
0ef00     13 FB 51 FC | 	wrword	result1, local01
0ef04     37 00 00 FF 
0ef08     10 E4 05 F1 | 	add	objptr, ##28176
0ef0c     F2 12 02 FB | 	rdlong	arg01, objptr
0ef10     37 00 00 FF 
0ef14     10 E4 85 F1 | 	sub	objptr, ##28176
0ef18     0C 4E 05 F1 | 	add	fp, #12
0ef1c     A7 2C 02 FB | 	rdlong	local04, fp
0ef20     0C 4E 85 F1 | 	sub	fp, #12
0ef24     06 2C 66 F0 | 	shl	local04, #6
0ef28     16 13 02 F1 | 	add	arg01, local04
0ef2c     1A 12 06 F1 | 	add	arg01, #26
0ef30     09 01 5A FC | 	wrword	#256, arg01
0ef34                 | LR__1233
0ef34     A7 F0 03 F6 | 	mov	ptra, fp
0ef38     B2 00 A0 FD | 	call	#popregs_
0ef3c                 | _do_changefreq_ret
0ef3c     2D 00 64 FD | 	ret
0ef40                 | 
0ef40                 | ' 
0ef40                 | ' '-------------------- changepan
0ef40                 | ' 
0ef40                 | ' sub do_changepan
0ef40                 | _do_changepan
0ef40     01 4A 05 F6 | 	mov	COUNT_, #1
0ef44     A8 00 A0 FD | 	call	#pushregs_
0ef48     14 F0 07 F1 | 	add	ptra, #20
0ef4c     18 E6 BF FD | 	call	#_pop
0ef50     A7 FA 61 FC | 	wrlong	result1, fp
0ef54     04 4E 05 F1 | 	add	fp, #4
0ef58     A7 FC 61 FC | 	wrlong	result2, fp
0ef5c     04 4E 05 F1 | 	add	fp, #4
0ef60     A7 FE 61 FC | 	wrlong	result3, fp
0ef64     08 4E 85 F1 | 	sub	fp, #8
0ef68     00 00 23 FF 
0ef6c     00 26 06 F6 | 	mov	local01, ##1174405120
0ef70     A7 12 02 F6 | 	mov	arg01, fp
0ef74     90 E8 BF FD | 	call	#_converttofloat
0ef78     FD 14 02 F6 | 	mov	arg02, result1
0ef7c     13 13 02 F6 | 	mov	arg01, local01
0ef80     F0 A7 B1 FD | 	call	#__system___float_mul
0ef84     FD 12 02 F6 | 	mov	arg01, result1
0ef88     01 14 06 F6 | 	mov	arg02, #1
0ef8c     AC AC B1 FD | 	call	#__system___float_tointeger
0ef90     0D 26 C6 F9 | 	decod	local01, #13
0ef94     FD 26 02 F1 | 	add	local01, result1
0ef98     10 4E 05 F1 | 	add	fp, #16
0ef9c     A7 26 62 FC | 	wrlong	local01, fp
0efa0                 | ' 
0efa0                 | ' t1=pop()
0efa0                 | ' pan=8192+round(8192*converttofloat(t1)) 
0efa0                 | ' if pan<0 then pan=0
0efa0     10 4E 85 F1 | 	sub	fp, #16
0efa4     00 26 56 F2 | 	cmps	local01, #0 wc
0efa8     10 4E 05 C1 |  if_b	add	fp, #16
0efac     A7 00 68 CC |  if_b	wrlong	#0, fp
0efb0     10 4E 85 C1 |  if_b	sub	fp, #16
0efb4                 | ' if pan>16384 then pan=16384
0efb4     10 4E 05 F1 | 	add	fp, #16
0efb8     A7 26 02 FB | 	rdlong	local01, fp
0efbc     10 4E 85 F1 | 	sub	fp, #16
0efc0     20 00 00 FF 
0efc4     01 26 56 F2 | 	cmps	local01, ##16385 wc
0efc8     10 4E 05 31 |  if_ae	add	fp, #16
0efcc     20 00 80 3F 
0efd0     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0efd4     10 4E 85 31 |  if_ae	sub	fp, #16
0efd8     8C E5 BF FD | 	call	#_pop
0efdc     FF 26 02 F6 | 	mov	local01, result3
0efe0     A7 FA 61 FC | 	wrlong	result1, fp
0efe4     04 4E 05 F1 | 	add	fp, #4
0efe8     A7 FC 61 FC | 	wrlong	result2, fp
0efec     04 4E 05 F1 | 	add	fp, #4
0eff0     A7 26 62 FC | 	wrlong	local01, fp
0eff4     08 4E 85 F1 | 	sub	fp, #8
0eff8     A7 12 02 F6 | 	mov	arg01, fp
0effc     4C E7 BF FD | 	call	#_converttoint
0f000     FD 26 52 F6 | 	abs	local01, result1 wc
0f004     07 26 06 F5 | 	and	local01, #7
0f008     13 27 82 F6 | 	negc	local01, local01
0f00c     0C 4E 05 F1 | 	add	fp, #12
0f010     A7 26 62 FC | 	wrlong	local01, fp
0f014     37 00 00 FF 
0f018     10 E4 05 F1 | 	add	objptr, ##28176
0f01c     F2 12 02 FB | 	rdlong	arg01, objptr
0f020     37 00 00 FF 
0f024     10 E4 85 F1 | 	sub	objptr, ##28176
0f028     06 26 66 F0 | 	shl	local01, #6
0f02c     13 13 02 F1 | 	add	arg01, local01
0f030     16 12 06 F1 | 	add	arg01, #22
0f034     04 4E 05 F1 | 	add	fp, #4
0f038     A7 14 02 FB | 	rdlong	arg02, fp
0f03c     10 4E 85 F1 | 	sub	fp, #16
0f040     09 15 52 FC | 	wrword	arg02, arg01
0f044     A7 F0 03 F6 | 	mov	ptra, fp
0f048     B2 00 A0 FD | 	call	#popregs_
0f04c                 | _do_changepan_ret
0f04c     2D 00 64 FD | 	ret
0f050                 | 
0f050                 | ' 
0f050                 | ' '-------------------- changevol
0f050                 | ' 
0f050                 | ' sub do_changevol
0f050                 | _do_changevol
0f050     00 4A 05 F6 | 	mov	COUNT_, #0
0f054     A8 00 A0 FD | 	call	#pushregs_
0f058     14 F0 07 F1 | 	add	ptra, #20
0f05c     08 E5 BF FD | 	call	#_pop
0f060     FF 14 02 F6 | 	mov	arg02, result3
0f064     A7 FA 61 FC | 	wrlong	result1, fp
0f068     04 4E 05 F1 | 	add	fp, #4
0f06c     A7 FC 61 FC | 	wrlong	result2, fp
0f070     04 4E 05 F1 | 	add	fp, #4
0f074     A7 14 62 FC | 	wrlong	arg02, fp
0f078     08 4E 85 F1 | 	sub	fp, #8
0f07c     A7 12 02 F6 | 	mov	arg01, fp
0f080     84 E7 BF FD | 	call	#_converttofloat
0f084     FD 12 02 F6 | 	mov	arg01, result1
0f088     00 3D 22 FF 
0f08c     00 14 06 F6 | 	mov	arg02, ##1148846080
0f090     E0 A6 B1 FD | 	call	#__system___float_mul
0f094     FD 12 02 F6 | 	mov	arg01, result1
0f098     01 14 06 F6 | 	mov	arg02, #1
0f09c     9C AB B1 FD | 	call	#__system___float_tointeger
0f0a0     FD 14 52 F6 | 	abs	arg02, result1 wc
0f0a4     0D 14 46 F7 | 	zerox	arg02, #13
0f0a8     0A 15 82 F6 | 	negc	arg02, arg02
0f0ac     10 4E 05 F1 | 	add	fp, #16
0f0b0     A7 14 62 FC | 	wrlong	arg02, fp
0f0b4     10 4E 85 F1 | 	sub	fp, #16
0f0b8     AC E4 BF FD | 	call	#_pop
0f0bc     FF 14 02 F6 | 	mov	arg02, result3
0f0c0     A7 FA 61 FC | 	wrlong	result1, fp
0f0c4     04 4E 05 F1 | 	add	fp, #4
0f0c8     A7 FC 61 FC | 	wrlong	result2, fp
0f0cc     04 4E 05 F1 | 	add	fp, #4
0f0d0     A7 14 62 FC | 	wrlong	arg02, fp
0f0d4     08 4E 85 F1 | 	sub	fp, #8
0f0d8     A7 12 02 F6 | 	mov	arg01, fp
0f0dc     6C E6 BF FD | 	call	#_converttoint
0f0e0     FD 14 52 F6 | 	abs	arg02, result1 wc
0f0e4     07 14 06 F5 | 	and	arg02, #7
0f0e8     0A 15 82 F6 | 	negc	arg02, arg02
0f0ec     0C 4E 05 F1 | 	add	fp, #12
0f0f0     A7 14 62 FC | 	wrlong	arg02, fp
0f0f4     37 00 00 FF 
0f0f8     10 E4 05 F1 | 	add	objptr, ##28176
0f0fc     F2 12 02 FB | 	rdlong	arg01, objptr
0f100     37 00 00 FF 
0f104     10 E4 85 F1 | 	sub	objptr, ##28176
0f108     06 14 66 F0 | 	shl	arg02, #6
0f10c     0A 13 02 F1 | 	add	arg01, arg02
0f110     14 12 06 F1 | 	add	arg01, #20
0f114     04 4E 05 F1 | 	add	fp, #4
0f118     A7 14 02 FB | 	rdlong	arg02, fp
0f11c     10 4E 85 F1 | 	sub	fp, #16
0f120     09 15 52 FC | 	wrword	arg02, arg01
0f124     A7 F0 03 F6 | 	mov	ptra, fp
0f128     B2 00 A0 FD | 	call	#popregs_
0f12c                 | _do_changevol_ret
0f12c     2D 00 64 FD | 	ret
0f130                 | 
0f130                 | ' 
0f130                 | ' '-------------------- changewav
0f130                 | ' 
0f130                 | ' sub do_changewav
0f130                 | _do_changewav
0f130     00 4A 05 F6 | 	mov	COUNT_, #0
0f134     A8 00 A0 FD | 	call	#pushregs_
0f138     14 F0 07 F1 | 	add	ptra, #20
0f13c     28 E4 BF FD | 	call	#_pop
0f140     FF 14 02 F6 | 	mov	arg02, result3
0f144     A7 FA 61 FC | 	wrlong	result1, fp
0f148     04 4E 05 F1 | 	add	fp, #4
0f14c     A7 FC 61 FC | 	wrlong	result2, fp
0f150     04 4E 05 F1 | 	add	fp, #4
0f154     A7 14 62 FC | 	wrlong	arg02, fp
0f158     08 4E 85 F1 | 	sub	fp, #8
0f15c     A7 12 02 F6 | 	mov	arg01, fp
0f160     E8 E5 BF FD | 	call	#_converttoint
0f164     10 4E 05 F1 | 	add	fp, #16
0f168     A7 FA 61 FC | 	wrlong	result1, fp
0f16c                 | ' 
0f16c                 | ' t1=pop()
0f16c                 | ' wave=converttoint(t1)
0f16c                 | ' if wave<0 then wave=0
0f16c     FD 14 02 F6 | 	mov	arg02, result1
0f170     10 4E 85 F1 | 	sub	fp, #16
0f174     00 14 56 F2 | 	cmps	arg02, #0 wc
0f178     10 4E 05 C1 |  if_b	add	fp, #16
0f17c     A7 00 68 CC |  if_b	wrlong	#0, fp
0f180     10 4E 85 C1 |  if_b	sub	fp, #16
0f184     E0 E3 BF FD | 	call	#_pop
0f188     FF 14 02 F6 | 	mov	arg02, result3
0f18c     A7 FA 61 FC | 	wrlong	result1, fp
0f190     04 4E 05 F1 | 	add	fp, #4
0f194     A7 FC 61 FC | 	wrlong	result2, fp
0f198     04 4E 05 F1 | 	add	fp, #4
0f19c     A7 14 62 FC | 	wrlong	arg02, fp
0f1a0     08 4E 85 F1 | 	sub	fp, #8
0f1a4     A7 12 02 F6 | 	mov	arg01, fp
0f1a8     A0 E5 BF FD | 	call	#_converttoint
0f1ac     FD 14 52 F6 | 	abs	arg02, result1 wc
0f1b0     07 14 06 F5 | 	and	arg02, #7
0f1b4     0A 15 82 F6 | 	negc	arg02, arg02
0f1b8     0C 4E 05 F1 | 	add	fp, #12
0f1bc     A7 14 62 FC | 	wrlong	arg02, fp
0f1c0                 | ' if wave <32 then 
0f1c0     04 4E 05 F1 | 	add	fp, #4
0f1c4     A7 14 02 FB | 	rdlong	arg02, fp
0f1c8     10 4E 85 F1 | 	sub	fp, #16
0f1cc     20 14 56 F2 | 	cmps	arg02, #32 wc
0f1d0     48 00 90 3D |  if_ae	jmp	#LR__1240
0f1d4     37 00 00 FF 
0f1d8     10 E4 05 F1 | 	add	objptr, ##28176
0f1dc     F2 12 02 FB | 	rdlong	arg01, objptr
0f1e0     37 00 00 FF 
0f1e4     10 E4 85 F1 | 	sub	objptr, ##28176
0f1e8     0C 4E 05 F1 | 	add	fp, #12
0f1ec     A7 14 02 FB | 	rdlong	arg02, fp
0f1f0     06 14 66 F0 | 	shl	arg02, #6
0f1f4     0A 13 02 F1 | 	add	arg01, arg02
0f1f8     08 12 06 F1 | 	add	arg01, #8
0f1fc     04 4E 05 F1 | 	add	fp, #4
0f200     A7 14 02 FB | 	rdlong	arg02, fp
0f204     10 4E 85 F1 | 	sub	fp, #16
0f208     0B 14 66 F0 | 	shl	arg02, #11
0f20c     00 00 40 FF 
0f210     00 14 06 F1 | 	add	arg02, ##-2147483648
0f214     09 15 62 FC | 	wrlong	arg02, arg01
0f218     34 00 90 FD | 	jmp	#LR__1241
0f21c                 | LR__1240
0f21c     37 00 00 FF 
0f220     10 E4 05 F1 | 	add	objptr, ##28176
0f224     F2 12 02 FB | 	rdlong	arg01, objptr
0f228     37 00 00 FF 
0f22c     10 E4 85 F1 | 	sub	objptr, ##28176
0f230     0C 4E 05 F1 | 	add	fp, #12
0f234     A7 14 02 FB | 	rdlong	arg02, fp
0f238     0C 4E 85 F1 | 	sub	fp, #12
0f23c     06 14 66 F0 | 	shl	arg02, #6
0f240     0A 13 02 F1 | 	add	arg01, arg02
0f244     08 12 06 F1 | 	add	arg01, #8
0f248     00 00 C4 FF 
0f24c     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f250                 | LR__1241
0f250     A7 F0 03 F6 | 	mov	ptra, fp
0f254     B2 00 A0 FD | 	call	#popregs_
0f258                 | _do_changewav_ret
0f258     2D 00 64 FD | 	ret
0f25c                 | 
0f25c                 | ' 
0f25c                 | ' '-------------------- chr$
0f25c                 | ' 
0f25c                 | ' sub do_chr
0f25c                 | _do_chr
0f25c     01 4A 05 F6 | 	mov	COUNT_, #1
0f260     A8 00 A0 FD | 	call	#pushregs_
0f264     14 F0 07 F1 | 	add	ptra, #20
0f268     4A 00 00 FF 
0f26c     80 E4 05 F1 | 	add	objptr, ##38016
0f270     F2 26 02 FB | 	rdlong	local01, objptr
0f274     13 17 02 F6 | 	mov	arg03, local01
0f278     01 16 66 F0 | 	shl	arg03, #1
0f27c     13 17 02 F1 | 	add	arg03, local01
0f280     02 16 66 F0 | 	shl	arg03, #2
0f284     03 00 00 FF 
0f288     04 E4 85 F1 | 	sub	objptr, ##1540
0f28c     F2 16 02 F1 | 	add	arg03, objptr
0f290     0B 17 02 FB | 	rdlong	arg03, arg03
0f294     0C 4E 05 F1 | 	add	fp, #12
0f298     A7 16 62 FC | 	wrlong	arg03, fp
0f29c                 | ' 
0f29c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f29c                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f29c     0C 4E 85 F1 | 	sub	fp, #12
0f2a0     02 16 16 F2 | 	cmp	arg03, #2 wc
0f2a4     47 00 00 FF 
0f2a8     7C E4 85 F1 | 	sub	objptr, ##36476
0f2ac     0C 4E 05 C1 |  if_b	add	fp, #12
0f2b0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f2b4     0C 4E 85 C1 |  if_b	sub	fp, #12
0f2b8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1250
0f2bc     00 12 06 F6 | 	mov	arg01, #0
0f2c0     D8 D2 B1 FD | 	call	#__system___getiolock_0602
0f2c4     FD 12 02 F6 | 	mov	arg01, result1
0f2c8     2C 76 B1 FD | 	call	#__system___lockmem
0f2cc     B6 01 00 FF 
0f2d0     47 14 06 F6 | 	mov	arg02, ##@LR__5861
0f2d4     00 12 06 F6 | 	mov	arg01, #0
0f2d8     00 16 06 F6 | 	mov	arg03, #0
0f2dc     10 83 B1 FD | 	call	#__system___basic_print_string
0f2e0     00 12 06 F6 | 	mov	arg01, #0
0f2e4     B4 D2 B1 FD | 	call	#__system___getiolock_0602
0f2e8     FD 00 68 FC | 	wrlong	#0, result1
0f2ec     27 12 06 F6 | 	mov	arg01, #39
0f2f0     00 14 06 F6 | 	mov	arg02, #0
0f2f4     10 3C B1 FD | 	call	#_printerror
0f2f8     54 00 90 FD | 	jmp	#LR__1251
0f2fc                 | LR__1250
0f2fc     68 E2 BF FD | 	call	#_pop
0f300     FF 26 02 F6 | 	mov	local01, result3
0f304     A7 FA 61 FC | 	wrlong	result1, fp
0f308     04 4E 05 F1 | 	add	fp, #4
0f30c     A7 FC 61 FC | 	wrlong	result2, fp
0f310     04 4E 05 F1 | 	add	fp, #4
0f314     A7 26 62 FC | 	wrlong	local01, fp
0f318     08 4E 85 F1 | 	sub	fp, #8
0f31c     A7 12 02 F6 | 	mov	arg01, fp
0f320     28 E4 BF FD | 	call	#_converttoint
0f324     10 4E 05 F1 | 	add	fp, #16
0f328     A7 FA 61 FC | 	wrlong	result1, fp
0f32c     FD 12 02 F6 | 	mov	arg01, result1
0f330     10 4E 85 F1 | 	sub	fp, #16
0f334     04 98 B1 FD | 	call	#__system__Chr_S
0f338     A7 FA 61 FC | 	wrlong	result1, fp
0f33c     08 4E 05 F1 | 	add	fp, #8
0f340     A7 3E 68 FC | 	wrlong	#31, fp
0f344     08 4E 85 F1 | 	sub	fp, #8
0f348     A7 12 02 F6 | 	mov	arg01, fp
0f34c     B0 E2 BF FD | 	call	#_push
0f350                 | LR__1251
0f350     A7 F0 03 F6 | 	mov	ptra, fp
0f354     B2 00 A0 FD | 	call	#popregs_
0f358                 | _do_chr_ret
0f358     2D 00 64 FD | 	ret
0f35c                 | 
0f35c                 | ' 
0f35c                 | ' '-------------------- circle
0f35c                 | ' 
0f35c                 | ' sub do_circle
0f35c                 | _do_circle
0f35c     02 4A 05 F6 | 	mov	COUNT_, #2
0f360     A8 00 A0 FD | 	call	#pushregs_
0f364     24 F0 07 F1 | 	add	ptra, #36
0f368     FC E1 BF FD | 	call	#_pop
0f36c     FD 18 02 F6 | 	mov	arg04, result1
0f370     FE 16 02 F6 | 	mov	arg03, result2
0f374     FF 14 02 F6 | 	mov	arg02, result3
0f378     18 4E 05 F1 | 	add	fp, #24
0f37c     A7 18 62 FC | 	wrlong	arg04, fp
0f380     04 4E 05 F1 | 	add	fp, #4
0f384     A7 16 62 FC | 	wrlong	arg03, fp
0f388     04 4E 05 F1 | 	add	fp, #4
0f38c     A7 14 62 FC | 	wrlong	arg02, fp
0f390     20 4E 85 F1 | 	sub	fp, #32
0f394     D0 E1 BF FD | 	call	#_pop
0f398     FD 18 02 F6 | 	mov	arg04, result1
0f39c     FE 16 02 F6 | 	mov	arg03, result2
0f3a0     FF 26 02 F6 | 	mov	local01, result3
0f3a4     0C 4E 05 F1 | 	add	fp, #12
0f3a8     A7 18 62 FC | 	wrlong	arg04, fp
0f3ac     04 4E 05 F1 | 	add	fp, #4
0f3b0     A7 16 62 FC | 	wrlong	arg03, fp
0f3b4     04 4E 05 F1 | 	add	fp, #4
0f3b8     A7 26 62 FC | 	wrlong	local01, fp
0f3bc     14 4E 85 F1 | 	sub	fp, #20
0f3c0     A4 E1 BF FD | 	call	#_pop
0f3c4     A7 FA 61 FC | 	wrlong	result1, fp
0f3c8     04 4E 05 F1 | 	add	fp, #4
0f3cc     A7 FC 61 FC | 	wrlong	result2, fp
0f3d0     04 4E 05 F1 | 	add	fp, #4
0f3d4     A7 FE 61 FC | 	wrlong	result3, fp
0f3d8                 | ' 
0f3d8                 | ' t3=pop()
0f3d8                 | ' t2=pop()
0f3d8                 | ' t1=pop()
0f3d8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f3d8     FF 18 02 F6 | 	mov	arg04, result3
0f3dc     08 4E 85 F1 | 	sub	fp, #8
0f3e0     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f3e4     08 4E 05 51 |  if_ne	add	fp, #8
0f3e8     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f3ec     08 4E 85 51 |  if_ne	sub	fp, #8
0f3f0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f3f4     7C 00 90 5D |  if_ne	jmp	#LR__1260
0f3f8     14 4E 05 F1 | 	add	fp, #20
0f3fc     A7 26 02 FB | 	rdlong	local01, fp
0f400     14 4E 85 F1 | 	sub	fp, #20
0f404     1C 26 0E F2 | 	cmp	local01, #28 wz
0f408     14 4E 05 51 |  if_ne	add	fp, #20
0f40c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f410     14 4E 85 51 |  if_ne	sub	fp, #20
0f414     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f418     58 00 90 5D |  if_ne	jmp	#LR__1260
0f41c     20 4E 05 F1 | 	add	fp, #32
0f420     A7 26 02 FB | 	rdlong	local01, fp
0f424     20 4E 85 F1 | 	sub	fp, #32
0f428     1C 26 0E F2 | 	cmp	local01, #28 wz
0f42c     20 4E 05 51 |  if_ne	add	fp, #32
0f430     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f434     20 4E 85 51 |  if_ne	sub	fp, #32
0f438     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f43c     34 00 90 5D |  if_ne	jmp	#LR__1260
0f440     A7 12 02 FB | 	rdlong	arg01, fp
0f444     0C 4E 05 F1 | 	add	fp, #12
0f448     A7 14 02 FB | 	rdlong	arg02, fp
0f44c     0C 4E 05 F1 | 	add	fp, #12
0f450     A7 16 02 FB | 	rdlong	arg03, fp
0f454     18 4E 85 F1 | 	sub	fp, #24
0f458     37 00 00 FF 
0f45c     28 E4 05 F1 | 	add	objptr, ##28200
0f460     F2 18 02 FB | 	rdlong	arg04, objptr
0f464     37 00 00 FF 
0f468     28 E4 85 F1 | 	sub	objptr, ##28200
0f46c     70 53 B1 FD | 	call	#_hg010b_spin2_circle
0f470                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f470     54 00 90 FD | 	jmp	#LR__1261
0f474                 | LR__1260
0f474     A7 12 02 F6 | 	mov	arg01, fp
0f478     D0 E2 BF FD | 	call	#_converttoint
0f47c     FD 26 02 F6 | 	mov	local01, result1
0f480     0C 4E 05 F1 | 	add	fp, #12
0f484     A7 12 02 F6 | 	mov	arg01, fp
0f488     0C 4E 85 F1 | 	sub	fp, #12
0f48c     BC E2 BF FD | 	call	#_converttoint
0f490     FD 28 02 F6 | 	mov	local02, result1
0f494     18 4E 05 F1 | 	add	fp, #24
0f498     A7 12 02 F6 | 	mov	arg01, fp
0f49c     18 4E 85 F1 | 	sub	fp, #24
0f4a0     A8 E2 BF FD | 	call	#_converttoint
0f4a4     FD 16 02 F6 | 	mov	arg03, result1
0f4a8     37 00 00 FF 
0f4ac     28 E4 05 F1 | 	add	objptr, ##28200
0f4b0     F2 18 02 FB | 	rdlong	arg04, objptr
0f4b4     37 00 00 FF 
0f4b8     28 E4 85 F1 | 	sub	objptr, ##28200
0f4bc     13 13 02 F6 | 	mov	arg01, local01
0f4c0     14 15 02 F6 | 	mov	arg02, local02
0f4c4     18 53 B1 FD | 	call	#_hg010b_spin2_circle
0f4c8                 | LR__1261
0f4c8     A7 F0 03 F6 | 	mov	ptra, fp
0f4cc     B2 00 A0 FD | 	call	#popregs_
0f4d0                 | _do_circle_ret
0f4d0     2D 00 64 FD | 	ret
0f4d4                 | 
0f4d4                 | ' 
0f4d4                 | ' '-------------------- click
0f4d4                 | ' 
0f4d4                 | ' sub do_click
0f4d4                 | _do_click
0f4d4     90 E0 BF FD | 	call	#_pop
0f4d8     00 FA 4D F2 | 	cmps	result1, #0 wz
0f4dc                 | ' 
0f4dc                 | ' t1=pop()
0f4dc                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f4dc     50 00 00 AF 
0f4e0     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f4e4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f4e8     50 00 00 FF 
0f4ec     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f4f0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f4f4     50 00 00 5F 
0f4f8     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f4fc                 | _do_click_ret
0f4fc     2D 00 64 FD | 	ret
0f500                 | 
0f500                 | ' 
0f500                 | ' '-------------------- close
0f500                 | ' 
0f500                 | ' sub do_close
0f500                 | _do_close
0f500     03 4A 05 F6 | 	mov	COUNT_, #3
0f504     A8 00 A0 FD | 	call	#pushregs_
0f508     5C E0 BF FD | 	call	#_pop
0f50c     FD 26 02 F6 | 	mov	local01, result1
0f510     FF 16 02 F6 | 	mov	arg03, result3
0f514     FE 28 02 F6 | 	mov	local02, result2
0f518     0B 2B 02 F6 | 	mov	local03, arg03
0f51c                 | ' 
0f51c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f51c                 | ' t1=pop()
0f51c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f51c     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f520     44 00 90 AD |  if_e	jmp	#LR__1270
0f524     00 12 06 F6 | 	mov	arg01, #0
0f528     70 D0 B1 FD | 	call	#__system___getiolock_0602
0f52c     FD 12 02 F6 | 	mov	arg01, result1
0f530     C4 73 B1 FD | 	call	#__system___lockmem
0f534     B6 01 00 FF 
0f538     4E 14 06 F6 | 	mov	arg02, ##@LR__5862
0f53c     00 12 06 F6 | 	mov	arg01, #0
0f540     00 16 06 F6 | 	mov	arg03, #0
0f544     A8 80 B1 FD | 	call	#__system___basic_print_string
0f548     00 12 06 F6 | 	mov	arg01, #0
0f54c     0A 14 06 F6 | 	mov	arg02, #10
0f550     00 16 06 F6 | 	mov	arg03, #0
0f554     40 80 B1 FD | 	call	#__system___basic_print_char
0f558     00 12 06 F6 | 	mov	arg01, #0
0f55c     3C D0 B1 FD | 	call	#__system___getiolock_0602
0f560     FD 00 68 FC | 	wrlong	#0, result1
0f564     08 00 90 FD | 	jmp	#LR__1271
0f568                 | LR__1270
0f568                 | ' channel  = t1.result.iresult
0f568                 | ' close #channel
0f568     13 13 02 F6 | 	mov	arg01, local01
0f56c     E4 C6 B1 FD | 	call	#__system__close
0f570                 | LR__1271
0f570     A7 F0 03 F6 | 	mov	ptra, fp
0f574     B2 00 A0 FD | 	call	#popregs_
0f578                 | _do_close_ret
0f578     2D 00 64 FD | 	ret
0f57c                 | 
0f57c                 | ' 
0f57c                 | ' '-------------------- cls
0f57c                 | ' 
0f57c                 | ' sub do_cls
0f57c                 | _do_cls
0f57c     37 00 00 FF 
0f580     3C E4 05 F1 | 	add	objptr, ##28220
0f584     F2 12 02 FB | 	rdlong	arg01, objptr
0f588     04 E4 85 F1 | 	sub	objptr, #4
0f58c     F2 14 02 FB | 	rdlong	arg02, objptr
0f590     37 00 00 FF 
0f594     38 E4 85 F1 | 	sub	objptr, ##28216
0f598     D8 56 B1 FD | 	call	#_hg010b_spin2_cls
0f59c     37 00 00 FF 
0f5a0     3C E4 05 F1 | 	add	objptr, ##28220
0f5a4     F2 14 02 FB | 	rdlong	arg02, objptr
0f5a8     14 E4 85 F1 | 	sub	objptr, #20
0f5ac     F2 14 62 FC | 	wrlong	arg02, objptr
0f5b0     37 00 00 FF 
0f5b4     28 E4 85 F1 | 	sub	objptr, ##28200
0f5b8                 | _do_cls_ret
0f5b8     2D 00 64 FD | 	ret
0f5bc                 | 
0f5bc                 | ' 
0f5bc                 | ' sub do_coginit
0f5bc                 | _do_coginit
0f5bc     00 4A 05 F6 | 	mov	COUNT_, #0
0f5c0     A8 00 A0 FD | 	call	#pushregs_
0f5c4     08 00 00 FF 
0f5c8     1C F0 07 F1 | 	add	ptra, ##4124
0f5cc     4A 00 00 FF 
0f5d0     80 E4 05 F1 | 	add	objptr, ##38016
0f5d4     F2 FA 01 FB | 	rdlong	result1, objptr
0f5d8     FD FC 01 F6 | 	mov	result2, result1
0f5dc     01 FC 65 F0 | 	shl	result2, #1
0f5e0     FD FC 01 F1 | 	add	result2, result1
0f5e4     02 FC 65 F0 | 	shl	result2, #2
0f5e8     03 00 00 FF 
0f5ec     04 E4 85 F1 | 	sub	objptr, ##1540
0f5f0     F2 FC 01 F1 | 	add	result2, objptr
0f5f4     FE FC 01 FB | 	rdlong	result2, result2
0f5f8     A7 FC 61 FC | 	wrlong	result2, fp
0f5fc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5fc                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f5fc     02 FC 55 F2 | 	cmps	result2, #2 wc
0f600     47 00 00 FF 
0f604     7C E4 85 F1 | 	sub	objptr, ##36476
0f608     0C 00 90 CD |  if_b	jmp	#LR__1280
0f60c     A7 FA 01 FB | 	rdlong	result1, fp
0f610     04 FA 55 F2 | 	cmps	result1, #4 wc
0f614     40 00 90 CD |  if_b	jmp	#LR__1281
0f618                 | LR__1280
0f618     00 12 06 F6 | 	mov	arg01, #0
0f61c     7C CF B1 FD | 	call	#__system___getiolock_0602
0f620     FD 12 02 F6 | 	mov	arg01, result1
0f624     D0 72 B1 FD | 	call	#__system___lockmem
0f628     B6 01 00 FF 
0f62c     60 14 06 F6 | 	mov	arg02, ##@LR__5863
0f630     00 12 06 F6 | 	mov	arg01, #0
0f634     00 16 06 F6 | 	mov	arg03, #0
0f638     B4 7F B1 FD | 	call	#__system___basic_print_string
0f63c     00 12 06 F6 | 	mov	arg01, #0
0f640     58 CF B1 FD | 	call	#__system___getiolock_0602
0f644     FD 00 68 FC | 	wrlong	#0, result1
0f648     27 12 06 F6 | 	mov	arg01, #39
0f64c     00 14 06 F6 | 	mov	arg02, #0
0f650     B4 38 B1 FD | 	call	#_printerror
0f654     94 01 90 FD | 	jmp	#LR__1285
0f658                 | LR__1281
0f658     0C DF BF FD | 	call	#_pop
0f65c     FF 16 02 F6 | 	mov	arg03, result3
0f660     08 00 00 FF 
0f664     10 4E 05 F1 | 	add	fp, ##4112
0f668     A7 FA 61 FC | 	wrlong	result1, fp
0f66c     04 4E 05 F1 | 	add	fp, #4
0f670     A7 FC 61 FC | 	wrlong	result2, fp
0f674     04 4E 05 F1 | 	add	fp, #4
0f678     A7 16 62 FC | 	wrlong	arg03, fp
0f67c     08 4E 85 F1 | 	sub	fp, #8
0f680     A7 12 02 F6 | 	mov	arg01, fp
0f684     08 00 00 FF 
0f688     10 4E 85 F1 | 	sub	fp, ##4112
0f68c     BC E0 BF FD | 	call	#_converttoint
0f690     FD 16 02 F6 | 	mov	arg03, result1
0f694     04 4E 05 F1 | 	add	fp, #4
0f698     A7 16 62 FC | 	wrlong	arg03, fp
0f69c     04 4E 85 F1 | 	sub	fp, #4
0f6a0     C4 DE BF FD | 	call	#_pop
0f6a4     FF 16 02 F6 | 	mov	arg03, result3
0f6a8     08 00 00 FF 
0f6ac     10 4E 05 F1 | 	add	fp, ##4112
0f6b0     A7 FA 61 FC | 	wrlong	result1, fp
0f6b4     04 4E 05 F1 | 	add	fp, #4
0f6b8     A7 FC 61 FC | 	wrlong	result2, fp
0f6bc     04 4E 05 F1 | 	add	fp, #4
0f6c0     A7 16 62 FC | 	wrlong	arg03, fp
0f6c4     08 4E 85 F1 | 	sub	fp, #8
0f6c8     A7 12 02 F6 | 	mov	arg01, fp
0f6cc     08 00 00 FF 
0f6d0     10 4E 85 F1 | 	sub	fp, ##4112
0f6d4     74 E0 BF FD | 	call	#_converttoint
0f6d8     08 4E 05 F1 | 	add	fp, #8
0f6dc     A7 FA 61 FC | 	wrlong	result1, fp
0f6e0     08 4E 85 F1 | 	sub	fp, #8
0f6e4                 | ' t1=pop()
0f6e4                 | ' ptra_val=converttoint(t1)
0f6e4                 | ' t1=pop()
0f6e4                 | ' addrval=converttoint(t1)
0f6e4                 | ' if numpar=3 then 
0f6e4     A7 FA 01 FB | 	rdlong	result1, fp
0f6e8     03 FA 0D F2 | 	cmp	result1, #3 wz
0f6ec     48 00 90 5D |  if_ne	jmp	#LR__1282
0f6f0     74 DE BF FD | 	call	#_pop
0f6f4     FF 16 02 F6 | 	mov	arg03, result3
0f6f8     08 00 00 FF 
0f6fc     10 4E 05 F1 | 	add	fp, ##4112
0f700     A7 FA 61 FC | 	wrlong	result1, fp
0f704     04 4E 05 F1 | 	add	fp, #4
0f708     A7 FC 61 FC | 	wrlong	result2, fp
0f70c     04 4E 05 F1 | 	add	fp, #4
0f710     A7 16 62 FC | 	wrlong	arg03, fp
0f714     08 4E 85 F1 | 	sub	fp, #8
0f718     A7 12 02 F6 | 	mov	arg01, fp
0f71c     08 00 00 FF 
0f720     10 4E 85 F1 | 	sub	fp, ##4112
0f724     24 E0 BF FD | 	call	#_converttoint
0f728     0C 4E 05 F1 | 	add	fp, #12
0f72c     A7 FA 61 FC | 	wrlong	result1, fp
0f730     0C 4E 85 F1 | 	sub	fp, #12
0f734     0C 00 90 FD | 	jmp	#LR__1283
0f738                 | LR__1282
0f738     0C 4E 05 F1 | 	add	fp, #12
0f73c     A7 20 68 FC | 	wrlong	#16, fp
0f740     0C 4E 85 F1 | 	sub	fp, #12
0f744                 | LR__1283
0f744                 | '     
0f744                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f744     08 4E 05 F1 | 	add	fp, #8
0f748     A7 16 02 FB | 	rdlong	arg03, fp
0f74c     08 4E 85 F1 | 	sub	fp, #8
0f750     00 04 00 FF 
0f754     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0f758     40 00 90 CD |  if_b	jmp	#LR__1284
0f75c     10 4E 05 F1 | 	add	fp, #16
0f760     A7 12 02 F6 | 	mov	arg01, fp
0f764     08 4E 85 F1 | 	sub	fp, #8
0f768     A7 14 02 FB | 	rdlong	arg02, fp
0f76c     08 4E 85 F1 | 	sub	fp, #8
0f770     0C 16 C6 F9 | 	decod	arg03, #12
0f774     0B 00 00 FF 
0f778     CC E4 05 F1 | 	add	objptr, ##5836
0f77c     F0 64 B1 FD | 	call	#_psram_spin2_read1
0f780     0B 00 00 FF 
0f784     CC E4 85 F1 | 	sub	objptr, ##5836
0f788     10 4E 05 F1 | 	add	fp, #16
0f78c     A7 FA 01 F6 | 	mov	result1, fp
0f790     08 4E 85 F1 | 	sub	fp, #8
0f794     A7 FA 61 FC | 	wrlong	result1, fp
0f798     08 4E 85 F1 | 	sub	fp, #8
0f79c                 | LR__1284
0f79c     0C 4E 05 F1 | 	add	fp, #12
0f7a0     A7 FA 01 FB | 	rdlong	result1, fp
0f7a4     04 4E 85 F1 | 	sub	fp, #4
0f7a8     A7 14 02 FB | 	rdlong	arg02, fp
0f7ac     04 4E 85 F1 | 	sub	fp, #4
0f7b0     A7 16 02 FB | 	rdlong	arg03, fp
0f7b4                 | ' 
0f7b4                 | '  asm
0f7b4     28 16 62 FD | 	setq	arg03
0f7b8     0A FB F1 FC | 	coginit	result1, arg02 wc
0f7bc                 | '  
0f7bc                 | ' return cog 
0f7bc     08 4E 05 F1 | 	add	fp, #8
0f7c0     A7 FA 61 FC | 	wrlong	result1, fp
0f7c4     08 00 00 FF 
0f7c8     04 4E 05 F1 | 	add	fp, ##4100
0f7cc     A7 FA 61 FC | 	wrlong	result1, fp
0f7d0     08 4E 05 F1 | 	add	fp, #8
0f7d4     A7 38 68 FC | 	wrlong	#28, fp
0f7d8     08 4E 85 F1 | 	sub	fp, #8
0f7dc     A7 12 02 F6 | 	mov	arg01, fp
0f7e0     08 00 00 FF 
0f7e4     10 4E 85 F1 | 	sub	fp, ##4112
0f7e8     14 DE BF FD | 	call	#_push
0f7ec                 | LR__1285
0f7ec     A7 F0 03 F6 | 	mov	ptra, fp
0f7f0     B2 00 A0 FD | 	call	#popregs_
0f7f4                 | _do_coginit_ret
0f7f4     2D 00 64 FD | 	ret
0f7f8                 | 
0f7f8                 | ' 
0f7f8                 | ' '-------------------- cogstop
0f7f8                 | ' 
0f7f8                 | ' sub do_cogstop
0f7f8                 | _do_cogstop
0f7f8     00 4A 05 F6 | 	mov	COUNT_, #0
0f7fc     A8 00 A0 FD | 	call	#pushregs_
0f800     0C F0 07 F1 | 	add	ptra, #12
0f804     60 DD BF FD | 	call	#_pop
0f808     A7 FA 61 FC | 	wrlong	result1, fp
0f80c     04 4E 05 F1 | 	add	fp, #4
0f810     A7 FC 61 FC | 	wrlong	result2, fp
0f814     04 4E 05 F1 | 	add	fp, #4
0f818     A7 FE 61 FC | 	wrlong	result3, fp
0f81c     08 4E 85 F1 | 	sub	fp, #8
0f820     A7 12 02 F6 | 	mov	arg01, fp
0f824     24 DF BF FD | 	call	#_converttoint
0f828     03 FA 61 FD | 	cogstop	result1
0f82c     A7 F0 03 F6 | 	mov	ptra, fp
0f830     B2 00 A0 FD | 	call	#popregs_
0f834                 | _do_cogstop_ret
0f834     2D 00 64 FD | 	ret
0f838                 | 
0f838                 | ' 
0f838                 | ' '-------------------- color
0f838                 | ' 
0f838                 | ' sub do_color
0f838                 | _do_color
0f838     03 4A 05 F6 | 	mov	COUNT_, #3
0f83c     A8 00 A0 FD | 	call	#pushregs_
0f840     24 DD BF FD | 	call	#_pop
0f844     FD 26 02 F6 | 	mov	local01, result1
0f848     FE 28 02 F6 | 	mov	local02, result2
0f84c     FF 2A 02 F6 | 	mov	local03, result3
0f850     37 00 00 FF 
0f854     28 E4 05 F1 | 	add	objptr, ##28200
0f858     F2 26 62 FC | 	wrlong	local01, objptr
0f85c     37 00 00 FF 
0f860     28 E4 85 F1 | 	sub	objptr, ##28200
0f864     A7 F0 03 F6 | 	mov	ptra, fp
0f868     B2 00 A0 FD | 	call	#popregs_
0f86c                 | _do_color_ret
0f86c     2D 00 64 FD | 	ret
0f870                 | 
0f870                 | ' 
0f870                 | ' '-------------------- copy
0f870                 | ' 
0f870                 | ' sub do_copy
0f870                 | _do_copy
0f870     08 4A 05 F6 | 	mov	COUNT_, #8
0f874     A8 00 A0 FD | 	call	#pushregs_
0f878     EC DC BF FD | 	call	#_pop
0f87c     FD 26 02 F6 | 	mov	local01, result1
0f880     FE 1A 02 F6 | 	mov	arg05, result2
0f884     FF 18 02 F6 | 	mov	arg04, result3
0f888     0D 29 02 F6 | 	mov	local02, arg05
0f88c     0C 2B 02 F6 | 	mov	local03, arg04
0f890     D4 DC BF FD | 	call	#_pop
0f894     FE 1A 02 F6 | 	mov	arg05, result2
0f898     FF 18 02 F6 | 	mov	arg04, result3
0f89c     FD 2C 02 F6 | 	mov	local04, result1
0f8a0     0D 2F 02 F6 | 	mov	local05, arg05
0f8a4     0C 31 02 F6 | 	mov	local06, arg04
0f8a8                 | ' 
0f8a8                 | ' t1=pop()
0f8a8                 | ' t2=pop()
0f8a8                 | ' if t2.result_type=result_string2 then 
0f8a8     2B 30 0E F2 | 	cmp	local06, #43 wz
0f8ac     10 00 90 5D |  if_ne	jmp	#LR__1290
0f8b0     16 13 02 F6 | 	mov	arg01, local04
0f8b4     28 DE BF FD | 	call	#_convertstring
0f8b8     FD 32 02 F6 | 	mov	local07, result1
0f8bc     2C 00 90 FD | 	jmp	#LR__1292
0f8c0                 | LR__1290
0f8c0     1F 30 0E F2 | 	cmp	local06, #31 wz
0f8c4     16 33 02 A6 |  if_e	mov	local07, local04
0f8c8     20 00 90 AD |  if_e	jmp	#LR__1291
0f8cc     50 00 00 FF 
0f8d0     F0 E4 05 F1 | 	add	objptr, ##41200
0f8d4     F2 14 02 FB | 	rdlong	arg02, objptr
0f8d8     50 00 00 FF 
0f8dc     F0 E4 85 F1 | 	sub	objptr, ##41200
0f8e0     0F 12 06 F6 | 	mov	arg01, #15
0f8e4     20 36 B1 FD | 	call	#_printerror
0f8e8                 | '   printerror(15,runheader(0)) : return
0f8e8     58 03 90 FD | 	jmp	#LR__1299
0f8ec                 | LR__1291
0f8ec                 | LR__1292
0f8ec                 | ' if t1.result_type=result_string2 then 
0f8ec     2B 2A 0E F2 | 	cmp	local03, #43 wz
0f8f0     10 00 90 5D |  if_ne	jmp	#LR__1293
0f8f4     13 13 02 F6 | 	mov	arg01, local01
0f8f8     E4 DD BF FD | 	call	#_convertstring
0f8fc     FD 34 02 F6 | 	mov	local08, result1
0f900     2C 00 90 FD | 	jmp	#LR__1295
0f904                 | LR__1293
0f904     1F 2A 0E F2 | 	cmp	local03, #31 wz
0f908     13 35 02 A6 |  if_e	mov	local08, local01
0f90c     20 00 90 AD |  if_e	jmp	#LR__1294
0f910     50 00 00 FF 
0f914     F0 E4 05 F1 | 	add	objptr, ##41200
0f918     F2 14 02 FB | 	rdlong	arg02, objptr
0f91c     50 00 00 FF 
0f920     F0 E4 85 F1 | 	sub	objptr, ##41200
0f924     0F 12 06 F6 | 	mov	arg01, #15
0f928     DC 35 B1 FD | 	call	#_printerror
0f92c                 | '   printerror(15,runheader(0)) : return
0f92c     14 03 90 FD | 	jmp	#LR__1299
0f930                 | LR__1294
0f930                 | LR__1295
0f930                 | ' 
0f930                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f930     09 12 06 F6 | 	mov	arg01, #9
0f934     19 15 02 F6 | 	mov	arg02, local07
0f938     00 16 06 F6 | 	mov	arg03, #0
0f93c     BC 7B B1 FD | 	call	#__system___basic_open_string
0f940     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f944     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f948     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0f94c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f950     52 00 00 FF 
0f954     D8 E4 05 F1 | 	add	objptr, ##42200
0f958     F2 FA 61 FC | 	wrlong	result1, objptr
0f95c     52 00 00 FF 
0f960     D8 E4 85 F1 | 	sub	objptr, ##42200
0f964     0C 01 90 AD |  if_e	jmp	#LR__1296
0f968     00 12 06 F6 | 	mov	arg01, #0
0f96c     2C CC B1 FD | 	call	#__system___getiolock_0602
0f970     FD 12 02 F6 | 	mov	arg01, result1
0f974     80 6F B1 FD | 	call	#__system___lockmem
0f978     B6 01 00 FF 
0f97c     6A 14 06 F6 | 	mov	arg02, ##@LR__5864
0f980     00 12 06 F6 | 	mov	arg01, #0
0f984     00 16 06 F6 | 	mov	arg03, #0
0f988     64 7C B1 FD | 	call	#__system___basic_print_string
0f98c     52 00 00 FF 
0f990     D8 E4 05 F1 | 	add	objptr, ##42200
0f994     F2 14 02 FB | 	rdlong	arg02, objptr
0f998     52 00 00 FF 
0f99c     D8 E4 85 F1 | 	sub	objptr, ##42200
0f9a0     00 12 06 F6 | 	mov	arg01, #0
0f9a4     00 16 06 F6 | 	mov	arg03, #0
0f9a8     0A 18 06 F6 | 	mov	arg04, #10
0f9ac     84 7C B1 FD | 	call	#__system___basic_print_integer
0f9b0     B6 01 00 FF 
0f9b4     7A 14 06 F6 | 	mov	arg02, ##@LR__5865
0f9b8     00 12 06 F6 | 	mov	arg01, #0
0f9bc     00 16 06 F6 | 	mov	arg03, #0
0f9c0     2C 7C B1 FD | 	call	#__system___basic_print_string
0f9c4     50 00 00 FF 
0f9c8     F0 E4 05 F1 | 	add	objptr, ##41200
0f9cc     F2 14 02 FB | 	rdlong	arg02, objptr
0f9d0     50 00 00 FF 
0f9d4     F0 E4 85 F1 | 	sub	objptr, ##41200
0f9d8     00 12 06 F6 | 	mov	arg01, #0
0f9dc     00 16 06 F6 | 	mov	arg03, #0
0f9e0     0A 18 06 F6 | 	mov	arg04, #10
0f9e4     8C 7C B1 FD | 	call	#__system___basic_print_unsigned
0f9e8     B6 01 00 FF 
0f9ec     84 14 06 F6 | 	mov	arg02, ##@LR__5866
0f9f0     00 12 06 F6 | 	mov	arg01, #0
0f9f4     00 16 06 F6 | 	mov	arg03, #0
0f9f8     F4 7B B1 FD | 	call	#__system___basic_print_string
0f9fc     00 34 06 F6 | 	mov	local08, #0
0fa00     52 00 00 FF 
0fa04     D8 E4 05 F1 | 	add	objptr, ##42200
0fa08     F2 12 02 FB | 	rdlong	arg01, objptr
0fa0c     52 00 00 FF 
0fa10     D8 E4 85 F1 | 	sub	objptr, ##42200
0fa14     70 98 B1 FD | 	call	#__system___strerror
0fa18     FD 14 02 F6 | 	mov	arg02, result1
0fa1c     1A 13 02 F6 | 	mov	arg01, local08
0fa20     00 16 06 F6 | 	mov	arg03, #0
0fa24     C8 7B B1 FD | 	call	#__system___basic_print_string
0fa28     B6 01 00 FF 
0fa2c     87 14 06 F6 | 	mov	arg02, ##@LR__5867
0fa30     00 12 06 F6 | 	mov	arg01, #0
0fa34     00 16 06 F6 | 	mov	arg03, #0
0fa38     B4 7B B1 FD | 	call	#__system___basic_print_string
0fa3c     00 12 06 F6 | 	mov	arg01, #0
0fa40     19 15 02 F6 | 	mov	arg02, local07
0fa44     00 16 06 F6 | 	mov	arg03, #0
0fa48     A4 7B B1 FD | 	call	#__system___basic_print_string
0fa4c     00 12 06 F6 | 	mov	arg01, #0
0fa50     0A 14 06 F6 | 	mov	arg02, #10
0fa54     00 16 06 F6 | 	mov	arg03, #0
0fa58     3C 7B B1 FD | 	call	#__system___basic_print_char
0fa5c     00 12 06 F6 | 	mov	arg01, #0
0fa60     38 CB B1 FD | 	call	#__system___getiolock_0602
0fa64     FD 00 68 FC | 	wrlong	#0, result1
0fa68     09 12 06 F6 | 	mov	arg01, #9
0fa6c     E4 C1 B1 FD | 	call	#__system__close
0fa70     D0 01 90 FD | 	jmp	#LR__1299
0fa74                 | LR__1296
0fa74                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fa74     08 12 06 F6 | 	mov	arg01, #8
0fa78     1A 15 02 F6 | 	mov	arg02, local08
0fa7c     0D 16 06 F6 | 	mov	arg03, #13
0fa80     78 7A B1 FD | 	call	#__system___basic_open_string
0fa84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fa88     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fa8c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fa90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fa94     52 00 00 FF 
0fa98     D8 E4 05 F1 | 	add	objptr, ##42200
0fa9c     F2 FA 61 FC | 	wrlong	result1, objptr
0faa0     52 00 00 FF 
0faa4     D8 E4 85 F1 | 	sub	objptr, ##42200
0faa8     0C 01 90 AD |  if_e	jmp	#LR__1297
0faac     00 12 06 F6 | 	mov	arg01, #0
0fab0     E8 CA B1 FD | 	call	#__system___getiolock_0602
0fab4     FD 12 02 F6 | 	mov	arg01, result1
0fab8     3C 6E B1 FD | 	call	#__system___lockmem
0fabc     B6 01 00 FF 
0fac0     95 14 06 F6 | 	mov	arg02, ##@LR__5868
0fac4     00 12 06 F6 | 	mov	arg01, #0
0fac8     00 16 06 F6 | 	mov	arg03, #0
0facc     20 7B B1 FD | 	call	#__system___basic_print_string
0fad0     52 00 00 FF 
0fad4     D8 E4 05 F1 | 	add	objptr, ##42200
0fad8     F2 14 02 FB | 	rdlong	arg02, objptr
0fadc     52 00 00 FF 
0fae0     D8 E4 85 F1 | 	sub	objptr, ##42200
0fae4     00 12 06 F6 | 	mov	arg01, #0
0fae8     00 16 06 F6 | 	mov	arg03, #0
0faec     0A 18 06 F6 | 	mov	arg04, #10
0faf0     40 7B B1 FD | 	call	#__system___basic_print_integer
0faf4     B6 01 00 FF 
0faf8     A5 14 06 F6 | 	mov	arg02, ##@LR__5869
0fafc     00 12 06 F6 | 	mov	arg01, #0
0fb00     00 16 06 F6 | 	mov	arg03, #0
0fb04     E8 7A B1 FD | 	call	#__system___basic_print_string
0fb08     50 00 00 FF 
0fb0c     F0 E4 05 F1 | 	add	objptr, ##41200
0fb10     F2 14 02 FB | 	rdlong	arg02, objptr
0fb14     50 00 00 FF 
0fb18     F0 E4 85 F1 | 	sub	objptr, ##41200
0fb1c     00 12 06 F6 | 	mov	arg01, #0
0fb20     00 16 06 F6 | 	mov	arg03, #0
0fb24     0A 18 06 F6 | 	mov	arg04, #10
0fb28     48 7B B1 FD | 	call	#__system___basic_print_unsigned
0fb2c     B6 01 00 FF 
0fb30     AF 14 06 F6 | 	mov	arg02, ##@LR__5870
0fb34     00 12 06 F6 | 	mov	arg01, #0
0fb38     00 16 06 F6 | 	mov	arg03, #0
0fb3c     B0 7A B1 FD | 	call	#__system___basic_print_string
0fb40     00 32 06 F6 | 	mov	local07, #0
0fb44     52 00 00 FF 
0fb48     D8 E4 05 F1 | 	add	objptr, ##42200
0fb4c     F2 12 02 FB | 	rdlong	arg01, objptr
0fb50     52 00 00 FF 
0fb54     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb58     2C 97 B1 FD | 	call	#__system___strerror
0fb5c     FD 14 02 F6 | 	mov	arg02, result1
0fb60     19 13 02 F6 | 	mov	arg01, local07
0fb64     00 16 06 F6 | 	mov	arg03, #0
0fb68     84 7A B1 FD | 	call	#__system___basic_print_string
0fb6c     B6 01 00 FF 
0fb70     B2 14 06 F6 | 	mov	arg02, ##@LR__5871
0fb74     00 12 06 F6 | 	mov	arg01, #0
0fb78     00 16 06 F6 | 	mov	arg03, #0
0fb7c     70 7A B1 FD | 	call	#__system___basic_print_string
0fb80     00 12 06 F6 | 	mov	arg01, #0
0fb84     1A 15 02 F6 | 	mov	arg02, local08
0fb88     00 16 06 F6 | 	mov	arg03, #0
0fb8c     60 7A B1 FD | 	call	#__system___basic_print_string
0fb90     00 12 06 F6 | 	mov	arg01, #0
0fb94     0A 14 06 F6 | 	mov	arg02, #10
0fb98     00 16 06 F6 | 	mov	arg03, #0
0fb9c     F8 79 B1 FD | 	call	#__system___basic_print_char
0fba0     00 12 06 F6 | 	mov	arg01, #0
0fba4     F4 C9 B1 FD | 	call	#__system___getiolock_0602
0fba8     FD 00 68 FC | 	wrlong	#0, result1
0fbac     08 12 06 F6 | 	mov	arg01, #8
0fbb0     A0 C0 B1 FD | 	call	#__system__close
0fbb4     8C 00 90 FD | 	jmp	#LR__1299
0fbb8                 | LR__1297
0fbb8                 | ' 
0fbb8                 | ' do
0fbb8                 | LR__1298
0fbb8                 | '   get #9,,block(0),1024,r
0fbb8     4E 00 00 FF 
0fbbc     B4 E4 05 F1 | 	add	objptr, ##40116
0fbc0     F2 16 02 F6 | 	mov	arg03, objptr
0fbc4     4E 00 00 FF 
0fbc8     B4 E4 85 F1 | 	sub	objptr, ##40116
0fbcc     09 12 06 F6 | 	mov	arg01, #9
0fbd0     00 14 06 F6 | 	mov	arg02, #0
0fbd4     0A 18 C6 F9 | 	decod	arg04, #10
0fbd8     01 1A 06 F6 | 	mov	arg05, #1
0fbdc     8C 7B B1 FD | 	call	#__system___basic_get
0fbe0     52 00 00 FF 
0fbe4     10 E5 05 F1 | 	add	objptr, ##42256
0fbe8     F2 FA 61 FC | 	wrlong	result1, objptr
0fbec                 | '   put #8,,block(0),r
0fbec     04 00 00 FF 
0fbf0     5C E4 85 F1 | 	sub	objptr, ##2140
0fbf4     F2 16 02 F6 | 	mov	arg03, objptr
0fbf8     FD 18 02 F6 | 	mov	arg04, result1
0fbfc     4E 00 00 FF 
0fc00     B4 E4 85 F1 | 	sub	objptr, ##40116
0fc04     08 12 06 F6 | 	mov	arg01, #8
0fc08     00 14 06 F6 | 	mov	arg02, #0
0fc0c     01 1A 06 F6 | 	mov	arg05, #1
0fc10     EC 7A B1 FD | 	call	#__system___basic_put
0fc14     52 00 00 FF 
0fc18     10 E5 05 F1 | 	add	objptr, ##42256
0fc1c     F2 34 02 FB | 	rdlong	local08, objptr
0fc20     52 00 00 FF 
0fc24     10 E5 85 F1 | 	sub	objptr, ##42256
0fc28     02 00 00 FF 
0fc2c     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fc30     84 FF 9F AD |  if_e	jmp	#LR__1298
0fc34                 | ' close #8
0fc34     08 12 06 F6 | 	mov	arg01, #8
0fc38     18 C0 B1 FD | 	call	#__system__close
0fc3c                 | ' close #9
0fc3c     09 12 06 F6 | 	mov	arg01, #9
0fc40     10 C0 B1 FD | 	call	#__system__close
0fc44                 | LR__1299
0fc44     A7 F0 03 F6 | 	mov	ptra, fp
0fc48     B2 00 A0 FD | 	call	#popregs_
0fc4c                 | _do_copy_ret
0fc4c     2D 00 64 FD | 	ret
0fc50                 | 
0fc50                 | ' 
0fc50                 | ' '-------------------- cos
0fc50                 | ' 
0fc50                 | ' sub do_cos
0fc50                 | _do_cos
0fc50     01 4A 05 F6 | 	mov	COUNT_, #1
0fc54     A8 00 A0 FD | 	call	#pushregs_
0fc58     10 F0 07 F1 | 	add	ptra, #16
0fc5c     4A 00 00 FF 
0fc60     80 E4 05 F1 | 	add	objptr, ##38016
0fc64     F2 26 02 FB | 	rdlong	local01, objptr
0fc68     13 17 02 F6 | 	mov	arg03, local01
0fc6c     01 16 66 F0 | 	shl	arg03, #1
0fc70     13 17 02 F1 | 	add	arg03, local01
0fc74     02 16 66 F0 | 	shl	arg03, #2
0fc78     03 00 00 FF 
0fc7c     04 E4 85 F1 | 	sub	objptr, ##1540
0fc80     F2 16 02 F1 | 	add	arg03, objptr
0fc84     0B 17 02 FB | 	rdlong	arg03, arg03
0fc88     0C 4E 05 F1 | 	add	fp, #12
0fc8c     A7 16 62 FC | 	wrlong	arg03, fp
0fc90                 | ' 
0fc90                 | ' numpar=compiledline(lineptr_e).result.uresult
0fc90                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fc90     0C 4E 85 F1 | 	sub	fp, #12
0fc94     02 16 16 F2 | 	cmp	arg03, #2 wc
0fc98     47 00 00 FF 
0fc9c     7C E4 85 F1 | 	sub	objptr, ##36476
0fca0     0C 4E 05 C1 |  if_b	add	fp, #12
0fca4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0fca8     0C 4E 85 C1 |  if_b	sub	fp, #12
0fcac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1300
0fcb0     00 12 06 F6 | 	mov	arg01, #0
0fcb4     E4 C8 B1 FD | 	call	#__system___getiolock_0602
0fcb8     FD 12 02 F6 | 	mov	arg01, result1
0fcbc     38 6C B1 FD | 	call	#__system___lockmem
0fcc0     B6 01 00 FF 
0fcc4     C0 14 06 F6 | 	mov	arg02, ##@LR__5872
0fcc8     00 12 06 F6 | 	mov	arg01, #0
0fccc     00 16 06 F6 | 	mov	arg03, #0
0fcd0     1C 79 B1 FD | 	call	#__system___basic_print_string
0fcd4     00 12 06 F6 | 	mov	arg01, #0
0fcd8     C0 C8 B1 FD | 	call	#__system___getiolock_0602
0fcdc     FD 00 68 FC | 	wrlong	#0, result1
0fce0     27 12 06 F6 | 	mov	arg01, #39
0fce4     00 14 06 F6 | 	mov	arg02, #0
0fce8     1C 32 B1 FD | 	call	#_printerror
0fcec     78 00 90 FD | 	jmp	#LR__1301
0fcf0                 | LR__1300
0fcf0     74 D8 BF FD | 	call	#_pop
0fcf4     A7 FA 61 FC | 	wrlong	result1, fp
0fcf8     04 4E 05 F1 | 	add	fp, #4
0fcfc     A7 FC 61 FC | 	wrlong	result2, fp
0fd00     04 4E 05 F1 | 	add	fp, #4
0fd04     A7 FE 61 FC | 	wrlong	result3, fp
0fd08     08 4E 85 F1 | 	sub	fp, #8
0fd0c     52 00 00 FF 
0fd10     A8 E4 05 F1 | 	add	objptr, ##42152
0fd14     F2 26 02 FB | 	rdlong	local01, objptr
0fd18     52 00 00 FF 
0fd1c     A8 E4 85 F1 | 	sub	objptr, ##42152
0fd20     A7 12 02 F6 | 	mov	arg01, fp
0fd24     E0 DA BF FD | 	call	#_converttofloat
0fd28     FD 14 02 F6 | 	mov	arg02, result1
0fd2c     13 13 02 F6 | 	mov	arg01, local01
0fd30     40 9A B1 FD | 	call	#__system___float_mul
0fd34     FD 14 02 F6 | 	mov	arg02, result1
0fd38     87 E4 1F FF 
0fd3c     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fd40     1F 14 E6 F4 | 	bitnot	arg02, #31
0fd44     5C 96 B1 FD | 	call	#__system___float_add
0fd48     FD 12 02 F6 | 	mov	arg01, result1
0fd4c     84 A3 B1 FD | 	call	#__system____builtin_sinf
0fd50     A7 FA 61 FC | 	wrlong	result1, fp
0fd54     08 4E 05 F1 | 	add	fp, #8
0fd58     A7 3C 68 FC | 	wrlong	#30, fp
0fd5c     08 4E 85 F1 | 	sub	fp, #8
0fd60     A7 12 02 F6 | 	mov	arg01, fp
0fd64     98 D8 BF FD | 	call	#_push
0fd68                 | LR__1301
0fd68     A7 F0 03 F6 | 	mov	ptra, fp
0fd6c     B2 00 A0 FD | 	call	#popregs_
0fd70                 | _do_cos_ret
0fd70     2D 00 64 FD | 	ret
0fd74                 | 
0fd74                 | ' 
0fd74                 | ' '-------------------- cursor
0fd74                 | ' 
0fd74                 | ' sub do_cursor
0fd74                 | _do_cursor
0fd74     F0 D7 BF FD | 	call	#_pop
0fd78     00 FA 4D F2 | 	cmps	result1, #0 wz
0fd7c                 | ' t1=pop()
0fd7c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fd7c     14 00 90 5D |  if_ne	jmp	#LR__1310
0fd80     11 12 06 F6 | 	mov	arg01, #17
0fd84     00 14 06 F6 | 	mov	arg02, #0
0fd88     00 16 06 F6 | 	mov	arg03, #0
0fd8c     C4 41 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fd90     10 00 90 FD | 	jmp	#LR__1311
0fd94                 | LR__1310
0fd94     11 12 06 F6 | 	mov	arg01, #17
0fd98     08 14 06 F6 | 	mov	arg02, #8
0fd9c     10 16 06 F6 | 	mov	arg03, #16
0fda0     B0 41 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fda4                 | LR__1311
0fda4                 | _do_cursor_ret
0fda4     2D 00 64 FD | 	ret
0fda8                 | 
0fda8                 | ' 
0fda8                 | ' '-------------------- defenv
0fda8                 | ' 
0fda8                 | ' sub do_defenv
0fda8                 | _do_defenv
0fda8     08 4A 05 F6 | 	mov	COUNT_, #8
0fdac     A8 00 A0 FD | 	call	#pushregs_
0fdb0     58 F0 07 F1 | 	add	ptra, #88
0fdb4     4A 00 00 FF 
0fdb8     80 E4 05 F1 | 	add	objptr, ##38016
0fdbc     F2 26 02 FB | 	rdlong	local01, objptr
0fdc0     13 1B 02 F6 | 	mov	arg05, local01
0fdc4     01 1A 66 F0 | 	shl	arg05, #1
0fdc8     13 1B 02 F1 | 	add	arg05, local01
0fdcc     02 1A 66 F0 | 	shl	arg05, #2
0fdd0     03 00 00 FF 
0fdd4     04 E4 85 F1 | 	sub	objptr, ##1540
0fdd8     F2 1A 02 F1 | 	add	arg05, objptr
0fddc     0D 1B 02 FB | 	rdlong	arg05, arg05
0fde0     10 4E 05 F1 | 	add	fp, #16
0fde4     A7 1A 62 FC | 	wrlong	arg05, fp
0fde8                 | ' 
0fde8                 | ' numpar=compiledline(lineptr_e).result.uresult
0fde8                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fde8     10 4E 85 F1 | 	sub	fp, #16
0fdec     02 1A 0E F2 | 	cmp	arg05, #2 wz
0fdf0     47 00 00 FF 
0fdf4     7C E4 85 F1 | 	sub	objptr, ##36476
0fdf8     10 4E 05 51 |  if_ne	add	fp, #16
0fdfc     A7 26 02 5B |  if_ne	rdlong	local01, fp
0fe00     10 4E 85 51 |  if_ne	sub	fp, #16
0fe04     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0fe08     90 0A 90 5D |  if_ne	jmp	#LR__1341
0fe0c                 | ' 
0fe0c                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe0c     10 4E 05 F1 | 	add	fp, #16
0fe10     A7 26 02 FB | 	rdlong	local01, fp
0fe14     10 4E 85 F1 | 	sub	fp, #16
0fe18     02 26 0E F2 | 	cmp	local01, #2 wz
0fe1c     28 04 90 5D |  if_ne	jmp	#LR__1333
0fe20     44 D7 BF FD | 	call	#_pop
0fe24     FF 1A 02 F6 | 	mov	arg05, result3
0fe28     40 4E 05 F1 | 	add	fp, #64
0fe2c     A7 FA 61 FC | 	wrlong	result1, fp
0fe30     04 4E 05 F1 | 	add	fp, #4
0fe34     A7 FC 61 FC | 	wrlong	result2, fp
0fe38     04 4E 05 F1 | 	add	fp, #4
0fe3c     A7 1A 62 FC | 	wrlong	arg05, fp
0fe40                 | '   t1=pop()
0fe40                 | '   if t1.result_type=result_string2 then 
0fe40     48 4E 85 F1 | 	sub	fp, #72
0fe44     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0fe48     20 00 90 5D |  if_ne	jmp	#LR__1320
0fe4c     40 4E 05 F1 | 	add	fp, #64
0fe50     A7 12 02 FB | 	rdlong	arg01, fp
0fe54     40 4E 85 F1 | 	sub	fp, #64
0fe58     84 D8 BF FD | 	call	#_convertstring
0fe5c     4C 4E 05 F1 | 	add	fp, #76
0fe60     A7 FA 61 FC | 	wrlong	result1, fp
0fe64     4C 4E 85 F1 | 	sub	fp, #76
0fe68     58 00 90 FD | 	jmp	#LR__1323
0fe6c                 | LR__1320
0fe6c     48 4E 05 F1 | 	add	fp, #72
0fe70     A7 26 02 FB | 	rdlong	local01, fp
0fe74     48 4E 85 F1 | 	sub	fp, #72
0fe78     1F 26 0E F2 | 	cmp	local01, #31 wz
0fe7c     18 00 90 5D |  if_ne	jmp	#LR__1321
0fe80     40 4E 05 F1 | 	add	fp, #64
0fe84     A7 26 02 FB | 	rdlong	local01, fp
0fe88     0C 4E 05 F1 | 	add	fp, #12
0fe8c     A7 26 62 FC | 	wrlong	local01, fp
0fe90     4C 4E 85 F1 | 	sub	fp, #76
0fe94     2C 00 90 FD | 	jmp	#LR__1322
0fe98                 | LR__1321
0fe98     B6 01 00 FF 
0fe9c     C6 26 06 F6 | 	mov	local01, ##@LR__5873
0fea0     4C 4E 05 F1 | 	add	fp, #76
0fea4     A7 26 62 FC | 	wrlong	local01, fp
0fea8     0C 4E 85 F1 | 	sub	fp, #12
0feac     A7 12 02 F6 | 	mov	arg01, fp
0feb0     40 4E 85 F1 | 	sub	fp, #64
0feb4     94 D8 BF FD | 	call	#_converttoint
0feb8     1C 4E 05 F1 | 	add	fp, #28
0febc     A7 FA 61 FC | 	wrlong	result1, fp
0fec0     1C 4E 85 F1 | 	sub	fp, #28
0fec4                 | LR__1322
0fec4                 | LR__1323
0fec4                 | '   if s1<>"" then 
0fec4     4C 4E 05 F1 | 	add	fp, #76
0fec8     A7 12 02 FB | 	rdlong	arg01, fp
0fecc     4C 4E 85 F1 | 	sub	fp, #76
0fed0     B6 01 00 FF 
0fed4     C7 14 06 F6 | 	mov	arg02, ##@LR__5874
0fed8     44 6A B1 FD | 	call	#__system___string_cmp
0fedc     00 FA 0D F2 | 	cmp	result1, #0 wz
0fee0     28 02 90 AD |  if_e	jmp	#LR__1327
0fee4     80 D6 BF FD | 	call	#_pop
0fee8     FF 26 02 F6 | 	mov	local01, result3
0feec     40 4E 05 F1 | 	add	fp, #64
0fef0     A7 FA 61 FC | 	wrlong	result1, fp
0fef4     04 4E 05 F1 | 	add	fp, #4
0fef8     A7 FC 61 FC | 	wrlong	result2, fp
0fefc     04 4E 05 F1 | 	add	fp, #4
0ff00     A7 26 62 FC | 	wrlong	local01, fp
0ff04     08 4E 85 F1 | 	sub	fp, #8
0ff08     A7 12 02 F6 | 	mov	arg01, fp
0ff0c     40 4E 85 F1 | 	sub	fp, #64
0ff10     38 D8 BF FD | 	call	#_converttoint
0ff14     18 4E 05 F1 | 	add	fp, #24
0ff18     A7 FA 61 FC | 	wrlong	result1, fp
0ff1c     18 4E 85 F1 | 	sub	fp, #24
0ff20                 | '     t1=pop()
0ff20                 | '     channel=converttoint(t1) 
0ff20                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0ff20     09 12 06 F6 | 	mov	arg01, #9
0ff24     2C BD B1 FD | 	call	#__system__close
0ff28     09 26 06 F6 | 	mov	local01, #9
0ff2c     B6 01 00 FF 
0ff30     C8 12 06 F6 | 	mov	arg01, ##@LR__5875
0ff34     4C 4E 05 F1 | 	add	fp, #76
0ff38     A7 14 02 FB | 	rdlong	arg02, fp
0ff3c     4C 4E 85 F1 | 	sub	fp, #76
0ff40     10 6A B1 FD | 	call	#__system___string_concat
0ff44     FD 14 02 F6 | 	mov	arg02, result1
0ff48     13 13 02 F6 | 	mov	arg01, local01
0ff4c     00 16 06 F6 | 	mov	arg03, #0
0ff50     A8 75 B1 FD | 	call	#__system___basic_open_string
0ff54     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ff58     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ff5c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ff60     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ff64     0C 4E 05 F1 | 	add	fp, #12
0ff68     A7 FA 61 FC | 	wrlong	result1, fp
0ff6c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ff6c     0C 4E 85 F1 | 	sub	fp, #12
0ff70     A0 00 90 AD |  if_e	jmp	#LR__1324
0ff74     00 12 06 F6 | 	mov	arg01, #0
0ff78     20 C6 B1 FD | 	call	#__system___getiolock_0602
0ff7c     FD 12 02 F6 | 	mov	arg01, result1
0ff80     74 69 B1 FD | 	call	#__system___lockmem
0ff84     B6 01 00 FF 
0ff88     D5 14 06 F6 | 	mov	arg02, ##@LR__5876
0ff8c     00 12 06 F6 | 	mov	arg01, #0
0ff90     00 16 06 F6 | 	mov	arg03, #0
0ff94     58 76 B1 FD | 	call	#__system___basic_print_string
0ff98     0C 4E 05 F1 | 	add	fp, #12
0ff9c     A7 14 02 FB | 	rdlong	arg02, fp
0ffa0     0C 4E 85 F1 | 	sub	fp, #12
0ffa4     00 12 06 F6 | 	mov	arg01, #0
0ffa8     00 16 06 F6 | 	mov	arg03, #0
0ffac     0A 18 06 F6 | 	mov	arg04, #10
0ffb0     80 76 B1 FD | 	call	#__system___basic_print_integer
0ffb4     B6 01 00 FF 
0ffb8     E3 14 06 F6 | 	mov	arg02, ##@LR__5877
0ffbc     00 12 06 F6 | 	mov	arg01, #0
0ffc0     00 16 06 F6 | 	mov	arg03, #0
0ffc4     28 76 B1 FD | 	call	#__system___basic_print_string
0ffc8     00 26 06 F6 | 	mov	local01, #0
0ffcc     0C 4E 05 F1 | 	add	fp, #12
0ffd0     A7 12 02 FB | 	rdlong	arg01, fp
0ffd4     0C 4E 85 F1 | 	sub	fp, #12
0ffd8     AC 92 B1 FD | 	call	#__system___strerror
0ffdc     FD 14 02 F6 | 	mov	arg02, result1
0ffe0     13 13 02 F6 | 	mov	arg01, local01
0ffe4     00 16 06 F6 | 	mov	arg03, #0
0ffe8     04 76 B1 FD | 	call	#__system___basic_print_string
0ffec     00 12 06 F6 | 	mov	arg01, #0
0fff0     0A 14 06 F6 | 	mov	arg02, #10
0fff4     00 16 06 F6 | 	mov	arg03, #0
0fff8     9C 75 B1 FD | 	call	#__system___basic_print_char
0fffc     00 12 06 F6 | 	mov	arg01, #0
10000     98 C5 B1 FD | 	call	#__system___getiolock_0602
10004     FD 00 68 FC | 	wrlong	#0, result1
10008     09 12 06 F6 | 	mov	arg01, #9
1000c     44 BC B1 FD | 	call	#__system__close
10010     88 08 90 FD | 	jmp	#LR__1341
10014                 | LR__1324
10014                 | '     get #9,17,envbuf8(channel,0),256
10014     18 4E 05 F1 | 	add	fp, #24
10018     A7 1A 02 FB | 	rdlong	arg05, fp
1001c     18 4E 85 F1 | 	sub	fp, #24
10020     0D 17 02 F6 | 	mov	arg03, arg05
10024     09 16 66 F0 | 	shl	arg03, #9
10028     0D 17 02 F1 | 	add	arg03, arg05
1002c     0C 00 00 FF 
10030     D8 E4 05 F1 | 	add	objptr, ##6360
10034     F2 16 02 F1 | 	add	arg03, objptr
10038     09 12 06 F6 | 	mov	arg01, #9
1003c     11 14 06 F6 | 	mov	arg02, #17
10040     00 19 06 F6 | 	mov	arg04, #256
10044     01 1A 06 F6 | 	mov	arg05, #1
10048     0C 00 00 FF 
1004c     D8 E4 85 F1 | 	sub	objptr, ##6360
10050     18 77 B1 FD | 	call	#__system___basic_get
10054                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
10054     14 4E 05 F1 | 	add	fp, #20
10058     A7 FE 69 FC | 	wrlong	#255, fp
1005c     14 4E 85 F1 | 	sub	fp, #20
10060     0C 00 00 FF 
10064     D8 E4 05 F1 | 	add	objptr, ##6360
10068     97 30 48 FB | 	callpa	#(@LR__1326-@LR__1325)>>2,fcache_load_ptr_
1006c                 | LR__1325
1006c     18 4E 05 F1 | 	add	fp, #24
10070     A7 16 02 FB | 	rdlong	arg03, fp
10074     0B 27 02 F6 | 	mov	local01, arg03
10078     09 26 66 F0 | 	shl	local01, #9
1007c     F2 26 02 F1 | 	add	local01, objptr
10080     04 4E 85 F1 | 	sub	fp, #4
10084     A7 1A 02 FB | 	rdlong	arg05, fp
10088     0D 19 02 F6 | 	mov	arg04, arg05
1008c     01 18 66 F0 | 	shl	arg04, #1
10090     13 19 02 F1 | 	add	arg04, local01
10094     0B 27 02 F6 | 	mov	local01, arg03
10098     09 26 66 F0 | 	shl	local01, #9
1009c     0B 27 02 F1 | 	add	local01, arg03
100a0     F2 26 02 F1 | 	add	local01, objptr
100a4     13 1B 02 F1 | 	add	arg05, local01
100a8     0D 27 C2 FA | 	rdbyte	local01, arg05
100ac     00 27 06 FA | 	mul	local01, #256
100b0     0C 27 52 FC | 	wrword	local01, arg04
100b4     A7 26 02 FB | 	rdlong	local01, fp
100b8     01 26 86 F1 | 	sub	local01, #1
100bc     A7 26 62 FC | 	wrlong	local01, fp
100c0     14 4E 85 F1 | 	sub	fp, #20
100c4     00 26 56 F2 | 	cmps	local01, #0 wc
100c8     A0 FF 9F 3D |  if_ae	jmp	#LR__1325
100cc                 | LR__1326
100cc     0C 00 00 FF 
100d0     D8 E4 85 F1 | 	sub	objptr, ##6360
100d4                 | '     close #9
100d4     09 12 06 F6 | 	mov	arg01, #9
100d8     78 BB B1 FD | 	call	#__system__close
100dc     18 4E 05 F1 | 	add	fp, #24
100e0     A7 26 02 FB | 	rdlong	local01, fp
100e4     18 4E 85 F1 | 	sub	fp, #24
100e8     09 26 66 F0 | 	shl	local01, #9
100ec     0C 00 00 FF 
100f0     D8 E4 05 F1 | 	add	objptr, ##6360
100f4     F2 26 02 F1 | 	add	local01, objptr
100f8     FE 27 06 F1 | 	add	local01, #510
100fc     13 01 58 FC | 	wrword	#0, local01
10100                 | '     envbuf(channel,255)=0                                                              
10100                 | '     return
10100     0C 00 00 FF 
10104     D8 E4 85 F1 | 	sub	objptr, ##6360
10108     90 07 90 FD | 	jmp	#LR__1341
1010c                 | LR__1327
1010c                 | '     if wptr < $80000 then 
1010c     1C 4E 05 F1 | 	add	fp, #28
10110     A7 28 02 FB | 	rdlong	local02, fp
10114     1C 4E 85 F1 | 	sub	fp, #28
10118     00 04 00 FF 
1011c     00 28 56 F2 | 	cmps	local02, ##524288 wc
10120     7C 00 90 3D |  if_ae	jmp	#LR__1330
10124                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
10124     14 4E 05 F1 | 	add	fp, #20
10128     A7 00 68 FC | 	wrlong	#0, fp
1012c     14 4E 85 F1 | 	sub	fp, #20
10130     0C 00 00 FF 
10134     D8 E4 05 F1 | 	add	objptr, ##6360
10138     97 2C 48 FB | 	callpa	#(@LR__1329-@LR__1328)>>2,fcache_load_ptr_
1013c                 | LR__1328
1013c     18 4E 05 F1 | 	add	fp, #24
10140     A7 28 02 FB | 	rdlong	local02, fp
10144     09 28 66 F0 | 	shl	local02, #9
10148     F2 28 02 F1 | 	add	local02, objptr
1014c     04 4E 85 F1 | 	sub	fp, #4
10150     A7 26 02 FB | 	rdlong	local01, fp
10154     13 1B 02 F6 | 	mov	arg05, local01
10158     01 1A 66 F0 | 	shl	arg05, #1
1015c     14 1B 02 F1 | 	add	arg05, local02
10160     08 4E 05 F1 | 	add	fp, #8
10164     A7 12 02 FB | 	rdlong	arg01, fp
10168     01 26 66 F0 | 	shl	local01, #1
1016c     13 13 02 F1 | 	add	arg01, local01
10170     09 FB E1 FA | 	rdword	result1, arg01
10174     0D FB 51 FC | 	wrword	result1, arg05
10178     08 4E 85 F1 | 	sub	fp, #8
1017c     A7 28 02 FB | 	rdlong	local02, fp
10180     01 28 06 F1 | 	add	local02, #1
10184     A7 28 62 FC | 	wrlong	local02, fp
10188     14 4E 85 F1 | 	sub	fp, #20
1018c     00 29 56 F2 | 	cmps	local02, #256 wc
10190     A8 FF 9F CD |  if_b	jmp	#LR__1328
10194                 | LR__1329
10194     0C 00 00 FF 
10198     D8 E4 85 F1 | 	sub	objptr, ##6360
1019c     78 00 90 FD | 	jmp	#LR__1332
101a0                 | LR__1330
101a0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
101a0     14 4E 05 F1 | 	add	fp, #20
101a4     A7 00 68 FC | 	wrlong	#0, fp
101a8     14 4E 85 F1 | 	sub	fp, #20
101ac                 | LR__1331
101ac     18 4E 05 F1 | 	add	fp, #24
101b0     A7 28 02 FB | 	rdlong	local02, fp
101b4     09 28 66 F0 | 	shl	local02, #9
101b8     0C 00 00 FF 
101bc     D8 E4 05 F1 | 	add	objptr, ##6360
101c0     F2 28 02 F1 | 	add	local02, objptr
101c4     04 4E 85 F1 | 	sub	fp, #4
101c8     A7 26 02 FB | 	rdlong	local01, fp
101cc     13 2B 02 F6 | 	mov	local03, local01
101d0     01 2A 66 F0 | 	shl	local03, #1
101d4     14 2B 02 F1 | 	add	local03, local02
101d8     08 4E 05 F1 | 	add	fp, #8
101dc     A7 12 02 FB | 	rdlong	arg01, fp
101e0     1C 4E 85 F1 | 	sub	fp, #28
101e4     01 26 66 F0 | 	shl	local01, #1
101e8     13 13 02 F1 | 	add	arg01, local01
101ec     0C 00 00 FF 
101f0     D8 E4 85 F1 | 	sub	objptr, ##6360
101f4     38 30 B1 FD | 	call	#_psdpeek
101f8     15 FB 51 FC | 	wrword	result1, local03
101fc     14 4E 05 F1 | 	add	fp, #20
10200     A7 2A 02 FB | 	rdlong	local03, fp
10204     01 2A 06 F1 | 	add	local03, #1
10208     A7 2A 62 FC | 	wrlong	local03, fp
1020c     14 4E 85 F1 | 	sub	fp, #20
10210     00 2B 56 F2 | 	cmps	local03, #256 wc
10214     94 FF 9F CD |  if_b	jmp	#LR__1331
10218                 | LR__1332
10218     18 4E 05 F1 | 	add	fp, #24
1021c     A7 2A 02 FB | 	rdlong	local03, fp
10220     18 4E 85 F1 | 	sub	fp, #24
10224     09 2A 66 F0 | 	shl	local03, #9
10228     0C 00 00 FF 
1022c     D8 E4 05 F1 | 	add	objptr, ##6360
10230     F2 2A 02 F1 | 	add	local03, objptr
10234     FE 2B 06 F1 | 	add	local03, #510
10238     15 01 58 FC | 	wrword	#0, local03
1023c                 | '     envbuf(channel,255)=0
1023c                 | '     return   
1023c     0C 00 00 FF 
10240     D8 E4 85 F1 | 	sub	objptr, ##6360
10244     54 06 90 FD | 	jmp	#LR__1341
10248                 | LR__1333
10248                 | ' 
10248                 | ' if numpar=5 then   						 'simple adsr
10248     10 4E 05 F1 | 	add	fp, #16
1024c     A7 28 02 FB | 	rdlong	local02, fp
10250     10 4E 85 F1 | 	sub	fp, #16
10254     05 28 0E F2 | 	cmp	local02, #5 wz
10258     14 06 90 5D |  if_ne	jmp	#LR__1340
1025c     08 D3 BF FD | 	call	#_pop
10260     FF 26 02 F6 | 	mov	local01, result3
10264     40 4E 05 F1 | 	add	fp, #64
10268     A7 FA 61 FC | 	wrlong	result1, fp
1026c     04 4E 05 F1 | 	add	fp, #4
10270     A7 FC 61 FC | 	wrlong	result2, fp
10274     04 4E 05 F1 | 	add	fp, #4
10278     A7 26 62 FC | 	wrlong	local01, fp
1027c     08 4E 85 F1 | 	sub	fp, #8
10280     A7 12 02 F6 | 	mov	arg01, fp
10284     40 4E 85 F1 | 	sub	fp, #64
10288     7C D5 BF FD | 	call	#_converttofloat
1028c     FD 28 02 F6 | 	mov	local02, result1
10290     2C 4E 05 F1 | 	add	fp, #44
10294     A7 28 62 FC | 	wrlong	local02, fp
10298     2C 4E 85 F1 | 	sub	fp, #44
1029c     C8 D2 BF FD | 	call	#_pop
102a0     FF 26 02 F6 | 	mov	local01, result3
102a4     40 4E 05 F1 | 	add	fp, #64
102a8     A7 FA 61 FC | 	wrlong	result1, fp
102ac     04 4E 05 F1 | 	add	fp, #4
102b0     A7 FC 61 FC | 	wrlong	result2, fp
102b4     04 4E 05 F1 | 	add	fp, #4
102b8     A7 26 62 FC | 	wrlong	local01, fp
102bc     08 4E 85 F1 | 	sub	fp, #8
102c0     A7 12 02 F6 | 	mov	arg01, fp
102c4     40 4E 85 F1 | 	sub	fp, #64
102c8     3C D5 BF FD | 	call	#_converttofloat
102cc     FD 28 02 F6 | 	mov	local02, result1
102d0     28 4E 05 F1 | 	add	fp, #40
102d4     A7 28 62 FC | 	wrlong	local02, fp
102d8     28 4E 85 F1 | 	sub	fp, #40
102dc     88 D2 BF FD | 	call	#_pop
102e0     FF 26 02 F6 | 	mov	local01, result3
102e4     40 4E 05 F1 | 	add	fp, #64
102e8     A7 FA 61 FC | 	wrlong	result1, fp
102ec     04 4E 05 F1 | 	add	fp, #4
102f0     A7 FC 61 FC | 	wrlong	result2, fp
102f4     04 4E 05 F1 | 	add	fp, #4
102f8     A7 26 62 FC | 	wrlong	local01, fp
102fc     08 4E 85 F1 | 	sub	fp, #8
10300     A7 12 02 F6 | 	mov	arg01, fp
10304     40 4E 85 F1 | 	sub	fp, #64
10308     FC D4 BF FD | 	call	#_converttofloat
1030c     FD 28 02 F6 | 	mov	local02, result1
10310     24 4E 05 F1 | 	add	fp, #36
10314     A7 28 62 FC | 	wrlong	local02, fp
10318     24 4E 85 F1 | 	sub	fp, #36
1031c     48 D2 BF FD | 	call	#_pop
10320     FF 26 02 F6 | 	mov	local01, result3
10324     40 4E 05 F1 | 	add	fp, #64
10328     A7 FA 61 FC | 	wrlong	result1, fp
1032c     04 4E 05 F1 | 	add	fp, #4
10330     A7 FC 61 FC | 	wrlong	result2, fp
10334     04 4E 05 F1 | 	add	fp, #4
10338     A7 26 62 FC | 	wrlong	local01, fp
1033c     08 4E 85 F1 | 	sub	fp, #8
10340     A7 12 02 F6 | 	mov	arg01, fp
10344     40 4E 85 F1 | 	sub	fp, #64
10348     BC D4 BF FD | 	call	#_converttofloat
1034c     FD 28 02 F6 | 	mov	local02, result1
10350     20 4E 05 F1 | 	add	fp, #32
10354     A7 28 62 FC | 	wrlong	local02, fp
10358     20 4E 85 F1 | 	sub	fp, #32
1035c     08 D2 BF FD | 	call	#_pop
10360     FF 26 02 F6 | 	mov	local01, result3
10364     40 4E 05 F1 | 	add	fp, #64
10368     A7 FA 61 FC | 	wrlong	result1, fp
1036c     04 4E 05 F1 | 	add	fp, #4
10370     A7 FC 61 FC | 	wrlong	result2, fp
10374     04 4E 05 F1 | 	add	fp, #4
10378     A7 26 62 FC | 	wrlong	local01, fp
1037c     08 4E 85 F1 | 	sub	fp, #8
10380     A7 12 02 F6 | 	mov	arg01, fp
10384     40 4E 85 F1 | 	sub	fp, #64
10388     C0 D3 BF FD | 	call	#_converttoint
1038c     18 4E 05 F1 | 	add	fp, #24
10390     A7 FA 61 FC | 	wrlong	result1, fp
10394                 | '   t1=pop() : rr=converttofloat(t1)
10394                 | '   t1=pop() : ss=converttofloat(t1) 
10394                 | '   t1=pop() : dd=converttofloat(t1)
10394                 | '   t1=pop() : aa=converttofloat(t1)
10394                 | '   t1=pop() : channel=converttoint(t1)
10394                 | '   if ss<0.0 then ss=0.0 
10394     10 4E 05 F1 | 	add	fp, #16
10398     A7 12 02 FB | 	rdlong	arg01, fp
1039c     28 4E 85 F1 | 	sub	fp, #40
103a0     00 14 06 F6 | 	mov	arg02, #0
103a4     01 16 06 F6 | 	mov	arg03, #1
103a8     FC 97 B1 FD | 	call	#__system___float_cmp
103ac     00 FA 55 F2 | 	cmps	result1, #0 wc
103b0     28 4E 05 C1 |  if_b	add	fp, #40
103b4     A7 00 68 CC |  if_b	wrlong	#0, fp
103b8     28 4E 85 C1 |  if_b	sub	fp, #40
103bc                 | '   if ss>1.0 then ss=1.0
103bc     28 4E 05 F1 | 	add	fp, #40
103c0     A7 12 02 FB | 	rdlong	arg01, fp
103c4     28 4E 85 F1 | 	sub	fp, #40
103c8     00 C0 1F FF 
103cc     00 14 06 F6 | 	mov	arg02, ##1065353216
103d0     01 16 66 F6 | 	neg	arg03, #1
103d4     D0 97 B1 FD | 	call	#__system___float_cmp
103d8     01 FA 55 F2 | 	cmps	result1, #1 wc
103dc     28 4E 05 31 |  if_ae	add	fp, #40
103e0     00 C0 9F 3F 
103e4     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
103e8     28 4E 85 31 |  if_ae	sub	fp, #40
103ec     20 4E 05 F1 | 	add	fp, #32
103f0     A7 12 02 FB | 	rdlong	arg01, fp
103f4     04 4E 05 F1 | 	add	fp, #4
103f8     A7 14 02 FB | 	rdlong	arg02, fp
103fc     24 4E 85 F1 | 	sub	fp, #36
10400     A0 8F B1 FD | 	call	#__system___float_add
10404     FD 12 02 F6 | 	mov	arg01, result1
10408     2C 4E 05 F1 | 	add	fp, #44
1040c     A7 14 02 FB | 	rdlong	arg02, fp
10410     2C 4E 85 F1 | 	sub	fp, #44
10414     8C 8F B1 FD | 	call	#__system___float_add
10418     30 4E 05 F1 | 	add	fp, #48
1041c     A7 FA 61 FC | 	wrlong	result1, fp
10420     FD 14 02 F6 | 	mov	arg02, result1
10424     30 4E 85 F1 | 	sub	fp, #48
10428     00 C0 21 FF 
1042c     00 12 06 F6 | 	mov	arg01, ##1132462080
10430     44 95 B1 FD | 	call	#__system___float_div
10434     34 4E 05 F1 | 	add	fp, #52
10438     A7 FA 61 FC | 	wrlong	result1, fp
1043c     14 4E 85 F1 | 	sub	fp, #20
10440     A7 12 02 FB | 	rdlong	arg01, fp
10444     FD 14 02 F6 | 	mov	arg02, result1
10448     20 4E 85 F1 | 	sub	fp, #32
1044c     24 93 B1 FD | 	call	#__system___float_mul
10450     FD 12 02 F6 | 	mov	arg01, result1
10454     01 14 06 F6 | 	mov	arg02, #1
10458     E0 97 B1 FD | 	call	#__system___float_tointeger
1045c     A7 FA 61 FC | 	wrlong	result1, fp
10460     24 4E 05 F1 | 	add	fp, #36
10464     A7 12 02 FB | 	rdlong	arg01, fp
10468     10 4E 05 F1 | 	add	fp, #16
1046c     A7 14 02 FB | 	rdlong	arg02, fp
10470     34 4E 85 F1 | 	sub	fp, #52
10474     FC 92 B1 FD | 	call	#__system___float_mul
10478     FD 12 02 F6 | 	mov	arg01, result1
1047c     01 14 06 F6 | 	mov	arg02, #1
10480     B8 97 B1 FD | 	call	#__system___float_tointeger
10484     04 4E 05 F1 | 	add	fp, #4
10488     A7 FA 61 FC | 	wrlong	result1, fp
1048c     28 4E 05 F1 | 	add	fp, #40
10490     A7 12 02 FB | 	rdlong	arg01, fp
10494     08 4E 05 F1 | 	add	fp, #8
10498     A7 14 02 FB | 	rdlong	arg02, fp
1049c     34 4E 85 F1 | 	sub	fp, #52
104a0     D0 92 B1 FD | 	call	#__system___float_mul
104a4     FD 12 02 F6 | 	mov	arg01, result1
104a8     01 14 06 F6 | 	mov	arg02, #1
104ac     8C 97 B1 FD | 	call	#__system___float_tointeger
104b0     0C 4E 05 F1 | 	add	fp, #12
104b4     A7 FA 61 FC | 	wrlong	result1, fp
104b8     0C 4E 85 F1 | 	sub	fp, #12
104bc     F8 BF 23 FF 
104c0     00 28 06 F6 | 	mov	local02, ##1199566848
104c4     A7 12 02 FB | 	rdlong	arg01, fp
104c8     09 13 52 F6 | 	abs	arg01, arg01 wc
104cc     1F 2C C6 C9 |  if_b	decod	local04, #31
104d0     00 2C 06 36 |  if_ae	mov	local04, #0
104d4     98 8E B1 FD | 	call	#__system___float_fromuns
104d8     16 FB 61 F5 | 	xor	result1, local04
104dc     FD 14 02 F6 | 	mov	arg02, result1
104e0     14 13 02 F6 | 	mov	arg01, local02
104e4     90 94 B1 FD | 	call	#__system___float_div
104e8     38 4E 05 F1 | 	add	fp, #56
104ec     A7 FA 61 FC | 	wrlong	result1, fp
104f0     F8 BF 23 FF 
104f4     00 28 06 F6 | 	mov	local02, ##1199566848
104f8     10 4E 85 F1 | 	sub	fp, #16
104fc     A7 14 02 FB | 	rdlong	arg02, fp
10500     28 4E 85 F1 | 	sub	fp, #40
10504     F8 BF 23 FF 
10508     00 12 06 F6 | 	mov	arg01, ##1199566848
1050c     64 92 B1 FD | 	call	#__system___float_mul
10510     FD 14 02 F6 | 	mov	arg02, result1
10514     14 13 02 F6 | 	mov	arg01, local02
10518     1F 14 E6 F4 | 	bitnot	arg02, #31
1051c     84 8E B1 FD | 	call	#__system___float_add
10520     FD 28 02 F6 | 	mov	local02, result1
10524     04 4E 05 F1 | 	add	fp, #4
10528     A7 12 02 FB | 	rdlong	arg01, fp
1052c     04 4E 85 F1 | 	sub	fp, #4
10530     09 13 52 F6 | 	abs	arg01, arg01 wc
10534     1F 2C C6 C9 |  if_b	decod	local04, #31
10538     00 2C 06 36 |  if_ae	mov	local04, #0
1053c     30 8E B1 FD | 	call	#__system___float_fromuns
10540     16 FB 61 F5 | 	xor	result1, local04
10544     FD 14 02 F6 | 	mov	arg02, result1
10548     14 13 02 F6 | 	mov	arg01, local02
1054c     28 94 B1 FD | 	call	#__system___float_div
10550     24 4E 05 F1 | 	add	fp, #36
10554     A7 FA 61 FC | 	wrlong	result1, fp
10558     04 4E 05 F1 | 	add	fp, #4
1055c     A7 14 02 FB | 	rdlong	arg02, fp
10560     28 4E 85 F1 | 	sub	fp, #40
10564     F8 BF 23 FF 
10568     00 12 06 F6 | 	mov	arg01, ##1199566848
1056c     04 92 B1 FD | 	call	#__system___float_mul
10570     FD 28 02 F6 | 	mov	local02, result1
10574     0C 4E 05 F1 | 	add	fp, #12
10578     A7 12 02 FB | 	rdlong	arg01, fp
1057c     0C 4E 85 F1 | 	sub	fp, #12
10580     09 13 52 F6 | 	abs	arg01, arg01 wc
10584     1F 2C C6 C9 |  if_b	decod	local04, #31
10588     00 2C 06 36 |  if_ae	mov	local04, #0
1058c     E0 8D B1 FD | 	call	#__system___float_fromuns
10590     16 FB 61 F5 | 	xor	result1, local04
10594     FD 14 02 F6 | 	mov	arg02, result1
10598     14 13 02 F6 | 	mov	arg01, local02
1059c     D8 93 B1 FD | 	call	#__system___float_div
105a0     3C 4E 05 F1 | 	add	fp, #60
105a4     A7 FA 61 FC | 	wrlong	result1, fp
105a8     24 4E 85 F1 | 	sub	fp, #36
105ac     A7 2E 02 FB | 	rdlong	local05, fp
105b0     18 4E 85 F1 | 	sub	fp, #24
105b4     01 2E 66 F0 | 	shl	local05, #1
105b8     52 00 00 FF 
105bc     B4 E4 05 F1 | 	add	objptr, ##42164
105c0     F2 2E 02 F1 | 	add	local05, objptr
105c4     A7 30 02 FB | 	rdlong	local06, fp
105c8     04 4E 05 F1 | 	add	fp, #4
105cc     A7 2A 02 FB | 	rdlong	local03, fp
105d0     15 31 02 F1 | 	add	local06, local03
105d4     17 31 52 FC | 	wrword	local06, local05
105d8     1C 4E 05 F1 | 	add	fp, #28
105dc     A7 00 68 FC | 	wrlong	#0, fp
105e0                 | '   fulltime=aa+dd+rr
105e0                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
105e0                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
105e0                 | '   suspoints(channel)=a+d
105e0                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
105e0     0C 4E 85 F1 | 	sub	fp, #12
105e4     A7 00 68 FC | 	wrlong	#0, fp
105e8     14 4E 85 F1 | 	sub	fp, #20
105ec     A7 32 02 FB | 	rdlong	local07, fp
105f0     52 00 00 FF 
105f4     B4 E4 85 F1 | 	sub	objptr, ##42164
105f8                 | LR__1334
105f8     14 4E 05 F1 | 	add	fp, #20
105fc     A7 28 02 FB | 	rdlong	local02, fp
10600     14 4E 85 F1 | 	sub	fp, #20
10604     19 29 52 F2 | 	cmps	local02, local07 wc
10608     80 00 90 3D |  if_ae	jmp	#LR__1335
1060c     18 4E 05 F1 | 	add	fp, #24
10610     A7 30 02 FB | 	rdlong	local06, fp
10614     09 30 66 F0 | 	shl	local06, #9
10618     0C 00 00 FF 
1061c     D8 E4 05 F1 | 	add	objptr, ##6360
10620     F2 30 02 F1 | 	add	local06, objptr
10624     04 4E 85 F1 | 	sub	fp, #4
10628     A7 2E 02 FB | 	rdlong	local05, fp
1062c     01 2E 66 F0 | 	shl	local05, #1
10630     18 2F 02 F1 | 	add	local05, local06
10634     0C 4E 05 F1 | 	add	fp, #12
10638     A7 12 02 FB | 	rdlong	arg01, fp
1063c     20 4E 85 F1 | 	sub	fp, #32
10640     0C 00 00 FF 
10644     D8 E4 85 F1 | 	sub	objptr, ##6360
10648     01 14 06 F6 | 	mov	arg02, #1
1064c     EC 95 B1 FD | 	call	#__system___float_tointeger
10650     17 FB 51 FC | 	wrword	result1, local05
10654     20 4E 05 F1 | 	add	fp, #32
10658     A7 12 02 FB | 	rdlong	arg01, fp
1065c     18 4E 05 F1 | 	add	fp, #24
10660     A7 14 02 FB | 	rdlong	arg02, fp
10664     38 4E 85 F1 | 	sub	fp, #56
10668     38 8D B1 FD | 	call	#__system___float_add
1066c     20 4E 05 F1 | 	add	fp, #32
10670     A7 FA 61 FC | 	wrlong	result1, fp
10674     0C 4E 85 F1 | 	sub	fp, #12
10678     A7 30 02 FB | 	rdlong	local06, fp
1067c     01 30 06 F1 | 	add	local06, #1
10680     A7 30 62 FC | 	wrlong	local06, fp
10684     14 4E 85 F1 | 	sub	fp, #20
10688     6C FF 9F FD | 	jmp	#LR__1334
1068c                 | LR__1335
1068c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
1068c     A7 28 02 FB | 	rdlong	local02, fp
10690     14 4E 05 F1 | 	add	fp, #20
10694     A7 28 62 FC | 	wrlong	local02, fp
10698     14 4E 85 F1 | 	sub	fp, #20
1069c     A7 34 02 FB | 	rdlong	local08, fp
106a0     04 4E 05 F1 | 	add	fp, #4
106a4     A7 28 02 FB | 	rdlong	local02, fp
106a8     04 4E 85 F1 | 	sub	fp, #4
106ac     14 35 02 F1 | 	add	local08, local02
106b0                 | LR__1336
106b0     14 4E 05 F1 | 	add	fp, #20
106b4     A7 28 02 FB | 	rdlong	local02, fp
106b8     14 4E 85 F1 | 	sub	fp, #20
106bc     1A 29 52 F2 | 	cmps	local02, local08 wc
106c0     A8 00 90 3D |  if_ae	jmp	#LR__1337
106c4     18 4E 05 F1 | 	add	fp, #24
106c8     A7 32 02 FB | 	rdlong	local07, fp
106cc     09 32 66 F0 | 	shl	local07, #9
106d0     0C 00 00 FF 
106d4     D8 E4 05 F1 | 	add	objptr, ##6360
106d8     F2 32 02 F1 | 	add	local07, objptr
106dc     04 4E 85 F1 | 	sub	fp, #4
106e0     A7 30 02 FB | 	rdlong	local06, fp
106e4     01 30 66 F0 | 	shl	local06, #1
106e8     19 31 02 F1 | 	add	local06, local07
106ec     0C 4E 05 F1 | 	add	fp, #12
106f0     A7 12 02 FB | 	rdlong	arg01, fp
106f4     20 4E 85 F1 | 	sub	fp, #32
106f8     0C 00 00 FF 
106fc     D8 E4 85 F1 | 	sub	objptr, ##6360
10700     01 14 06 F6 | 	mov	arg02, #1
10704     34 95 B1 FD | 	call	#__system___float_tointeger
10708     18 FB 51 FC | 	wrword	result1, local06
1070c     20 4E 05 F1 | 	add	fp, #32
10710     A7 12 02 FB | 	rdlong	arg01, fp
10714     04 4E 05 F1 | 	add	fp, #4
10718     A7 14 02 FB | 	rdlong	arg02, fp
1071c     24 4E 85 F1 | 	sub	fp, #36
10720     1F 14 E6 F4 | 	bitnot	arg02, #31
10724     7C 8C B1 FD | 	call	#__system___float_add
10728     20 4E 05 F1 | 	add	fp, #32
1072c     A7 FA 61 FC | 	wrlong	result1, fp
10730     20 4E 85 F1 | 	sub	fp, #32
10734     FD 12 02 F6 | 	mov	arg01, result1
10738     00 14 06 F6 | 	mov	arg02, #0
1073c     01 16 06 F6 | 	mov	arg03, #1
10740     64 94 B1 FD | 	call	#__system___float_cmp
10744     00 FA 55 F2 | 	cmps	result1, #0 wc
10748     20 4E 05 C1 |  if_b	add	fp, #32
1074c     A7 00 68 CC |  if_b	wrlong	#0, fp
10750     20 4E 85 C1 |  if_b	sub	fp, #32
10754     14 4E 05 F1 | 	add	fp, #20
10758     A7 32 02 FB | 	rdlong	local07, fp
1075c     01 32 06 F1 | 	add	local07, #1
10760     A7 32 62 FC | 	wrlong	local07, fp
10764     14 4E 85 F1 | 	sub	fp, #20
10768     44 FF 9F FD | 	jmp	#LR__1336
1076c                 | LR__1337
1076c                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
1076c     A7 28 02 FB | 	rdlong	local02, fp
10770     04 4E 05 F1 | 	add	fp, #4
10774     A7 34 02 FB | 	rdlong	local08, fp
10778     1A 29 02 F1 | 	add	local02, local08
1077c     10 4E 05 F1 | 	add	fp, #16
10780     A7 28 62 FC | 	wrlong	local02, fp
10784     14 4E 85 F1 | 	sub	fp, #20
10788                 | LR__1338
10788     14 4E 05 F1 | 	add	fp, #20
1078c     A7 2E 02 FB | 	rdlong	local05, fp
10790     14 4E 85 F1 | 	sub	fp, #20
10794     00 2F 56 F2 | 	cmps	local05, #256 wc
10798     A8 00 90 3D |  if_ae	jmp	#LR__1339
1079c     18 4E 05 F1 | 	add	fp, #24
107a0     A7 34 02 FB | 	rdlong	local08, fp
107a4     09 34 66 F0 | 	shl	local08, #9
107a8     0C 00 00 FF 
107ac     D8 E4 05 F1 | 	add	objptr, ##6360
107b0     F2 34 02 F1 | 	add	local08, objptr
107b4     04 4E 85 F1 | 	sub	fp, #4
107b8     A7 32 02 FB | 	rdlong	local07, fp
107bc     01 32 66 F0 | 	shl	local07, #1
107c0     1A 33 02 F1 | 	add	local07, local08
107c4     0C 4E 05 F1 | 	add	fp, #12
107c8     A7 12 02 FB | 	rdlong	arg01, fp
107cc     20 4E 85 F1 | 	sub	fp, #32
107d0     0C 00 00 FF 
107d4     D8 E4 85 F1 | 	sub	objptr, ##6360
107d8     01 14 06 F6 | 	mov	arg02, #1
107dc     5C 94 B1 FD | 	call	#__system___float_tointeger
107e0     19 FB 51 FC | 	wrword	result1, local07
107e4     20 4E 05 F1 | 	add	fp, #32
107e8     A7 12 02 FB | 	rdlong	arg01, fp
107ec     1C 4E 05 F1 | 	add	fp, #28
107f0     A7 14 02 FB | 	rdlong	arg02, fp
107f4     3C 4E 85 F1 | 	sub	fp, #60
107f8     1F 14 E6 F4 | 	bitnot	arg02, #31
107fc     A4 8B B1 FD | 	call	#__system___float_add
10800     20 4E 05 F1 | 	add	fp, #32
10804     A7 FA 61 FC | 	wrlong	result1, fp
10808     20 4E 85 F1 | 	sub	fp, #32
1080c     FD 12 02 F6 | 	mov	arg01, result1
10810     00 14 06 F6 | 	mov	arg02, #0
10814     01 16 06 F6 | 	mov	arg03, #1
10818     8C 93 B1 FD | 	call	#__system___float_cmp
1081c     00 FA 55 F2 | 	cmps	result1, #0 wc
10820     20 4E 05 C1 |  if_b	add	fp, #32
10824     A7 00 68 CC |  if_b	wrlong	#0, fp
10828     20 4E 85 C1 |  if_b	sub	fp, #32
1082c     14 4E 05 F1 | 	add	fp, #20
10830     A7 34 02 FB | 	rdlong	local08, fp
10834     01 34 06 F1 | 	add	local08, #1
10838     A7 34 62 FC | 	wrlong	local08, fp
1083c     14 4E 85 F1 | 	sub	fp, #20
10840     44 FF 9F FD | 	jmp	#LR__1338
10844                 | LR__1339
10844     18 4E 05 F1 | 	add	fp, #24
10848     A7 2E 02 FB | 	rdlong	local05, fp
1084c     18 4E 85 F1 | 	sub	fp, #24
10850     09 2E 66 F0 | 	shl	local05, #9
10854     0C 00 00 FF 
10858     D8 E4 05 F1 | 	add	objptr, ##6360
1085c     F2 2E 02 F1 | 	add	local05, objptr
10860     FE 2F 06 F1 | 	add	local05, #510
10864     17 01 58 FC | 	wrword	#0, local05
10868     0C 00 00 FF 
1086c     D8 E4 85 F1 | 	sub	objptr, ##6360
10870                 | LR__1340
10870     18 4E 05 F1 | 	add	fp, #24
10874     A7 2E 02 FB | 	rdlong	local05, fp
10878     18 4E 85 F1 | 	sub	fp, #24
1087c     09 2E 66 F0 | 	shl	local05, #9
10880     0C 00 00 FF 
10884     D8 E4 05 F1 | 	add	objptr, ##6360
10888     F2 2E 02 F1 | 	add	local05, objptr
1088c     FE 2F 06 F1 | 	add	local05, #510
10890     17 01 58 FC | 	wrword	#0, local05
10894     0C 00 00 FF 
10898     D8 E4 85 F1 | 	sub	objptr, ##6360
1089c                 | LR__1341
1089c     A7 F0 03 F6 | 	mov	ptra, fp
108a0     B2 00 A0 FD | 	call	#popregs_
108a4                 | _do_defenv_ret
108a4     2D 00 64 FD | 	ret
108a8                 | 
108a8                 | ' 
108a8                 | ' '-------------------- defsnd
108a8                 | ' 
108a8                 | ' sub do_defsnd
108a8                 | _do_defsnd
108a8     04 4A 05 F6 | 	mov	COUNT_, #4
108ac     A8 00 A0 FD | 	call	#pushregs_
108b0     88 F0 07 F1 | 	add	ptra, #136
108b4     4A 00 00 FF 
108b8     80 E4 05 F1 | 	add	objptr, ##38016
108bc     F2 1A 02 FB | 	rdlong	arg05, objptr
108c0     0D 19 02 F6 | 	mov	arg04, arg05
108c4     01 18 66 F0 | 	shl	arg04, #1
108c8     0D 19 02 F1 | 	add	arg04, arg05
108cc     02 18 66 F0 | 	shl	arg04, #2
108d0     03 00 00 FF 
108d4     04 E4 85 F1 | 	sub	objptr, ##1540
108d8     F2 18 02 F1 | 	add	arg04, objptr
108dc     0C 1B 02 FB | 	rdlong	arg05, arg04
108e0     A7 1A 62 FC | 	wrlong	arg05, fp
108e4                 | ' 
108e4                 | ' numpar=compiledline(lineptr_e).result.uresult
108e4                 | ' 
108e4                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
108e4                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
108e4                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
108e4                 | ' ' defsnd channel, oneint - loads the wave from the pointer
108e4                 | ' 
108e4                 | ' if numpar<2 then return
108e4     02 1A 56 F2 | 	cmps	arg05, #2 wc
108e8     47 00 00 FF 
108ec     7C E4 85 F1 | 	sub	objptr, ##36476
108f0     98 08 90 CD |  if_b	jmp	#LR__1373
108f4                 | '  
108f4                 | ' if numpar=2 then
108f4     A7 1A 02 FB | 	rdlong	arg05, fp
108f8     02 1A 0E F2 | 	cmp	arg05, #2 wz
108fc     A4 03 90 5D |  if_ne	jmp	#LR__1360
10900     64 CC BF FD | 	call	#_pop
10904     FF 1A 02 F6 | 	mov	arg05, result3
10908     2C 4E 05 F1 | 	add	fp, #44
1090c     A7 FA 61 FC | 	wrlong	result1, fp
10910     04 4E 05 F1 | 	add	fp, #4
10914     A7 FC 61 FC | 	wrlong	result2, fp
10918     04 4E 05 F1 | 	add	fp, #4
1091c     A7 1A 62 FC | 	wrlong	arg05, fp
10920                 | '   t1=pop()
10920                 | '   if t1.result_type=result_string2 then 
10920     34 4E 85 F1 | 	sub	fp, #52
10924     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10928     20 00 90 5D |  if_ne	jmp	#LR__1350
1092c     2C 4E 05 F1 | 	add	fp, #44
10930     A7 12 02 FB | 	rdlong	arg01, fp
10934     2C 4E 85 F1 | 	sub	fp, #44
10938     A4 CD BF FD | 	call	#_convertstring
1093c     38 4E 05 F1 | 	add	fp, #56
10940     A7 FA 61 FC | 	wrlong	result1, fp
10944     38 4E 85 F1 | 	sub	fp, #56
10948     58 00 90 FD | 	jmp	#LR__1353
1094c                 | LR__1350
1094c     34 4E 05 F1 | 	add	fp, #52
10950     A7 1A 02 FB | 	rdlong	arg05, fp
10954     34 4E 85 F1 | 	sub	fp, #52
10958     1F 1A 0E F2 | 	cmp	arg05, #31 wz
1095c     18 00 90 5D |  if_ne	jmp	#LR__1351
10960     2C 4E 05 F1 | 	add	fp, #44
10964     A7 1A 02 FB | 	rdlong	arg05, fp
10968     0C 4E 05 F1 | 	add	fp, #12
1096c     A7 1A 62 FC | 	wrlong	arg05, fp
10970     38 4E 85 F1 | 	sub	fp, #56
10974     2C 00 90 FD | 	jmp	#LR__1352
10978                 | LR__1351
10978     B6 01 00 FF 
1097c     E6 1A 06 F6 | 	mov	arg05, ##@LR__5878
10980     38 4E 05 F1 | 	add	fp, #56
10984     A7 1A 62 FC | 	wrlong	arg05, fp
10988     0C 4E 85 F1 | 	sub	fp, #12
1098c     A7 12 02 F6 | 	mov	arg01, fp
10990     2C 4E 85 F1 | 	sub	fp, #44
10994     B4 CD BF FD | 	call	#_converttoint
10998     14 4E 05 F1 | 	add	fp, #20
1099c     A7 FA 61 FC | 	wrlong	result1, fp
109a0     14 4E 85 F1 | 	sub	fp, #20
109a4                 | LR__1352
109a4                 | LR__1353
109a4                 | '   if s<>"" then 
109a4     38 4E 05 F1 | 	add	fp, #56
109a8     A7 12 02 FB | 	rdlong	arg01, fp
109ac     38 4E 85 F1 | 	sub	fp, #56
109b0     B6 01 00 FF 
109b4     E7 14 06 F6 | 	mov	arg02, ##@LR__5879
109b8     64 5F B1 FD | 	call	#__system___string_cmp
109bc     00 FA 0D F2 | 	cmp	result1, #0 wz
109c0     E4 01 90 AD |  if_e	jmp	#LR__1356
109c4     A0 CB BF FD | 	call	#_pop
109c8     FF 1A 02 F6 | 	mov	arg05, result3
109cc     2C 4E 05 F1 | 	add	fp, #44
109d0     A7 FA 61 FC | 	wrlong	result1, fp
109d4     04 4E 05 F1 | 	add	fp, #4
109d8     A7 FC 61 FC | 	wrlong	result2, fp
109dc     04 4E 05 F1 | 	add	fp, #4
109e0     A7 1A 62 FC | 	wrlong	arg05, fp
109e4     08 4E 85 F1 | 	sub	fp, #8
109e8     A7 12 02 F6 | 	mov	arg01, fp
109ec     2C 4E 85 F1 | 	sub	fp, #44
109f0     58 CD BF FD | 	call	#_converttoint
109f4     10 4E 05 F1 | 	add	fp, #16
109f8     A7 FA 61 FC | 	wrlong	result1, fp
109fc                 | '     t1=pop()
109fc                 | '     channel=converttoint(t1) : if channel>31 then return
109fc     FD 1A 02 F6 | 	mov	arg05, result1
10a00     10 4E 85 F1 | 	sub	fp, #16
10a04     20 1A 56 F2 | 	cmps	arg05, #32 wc
10a08     80 07 90 3D |  if_ae	jmp	#LR__1373
10a0c                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10a0c     09 12 06 F6 | 	mov	arg01, #9
10a10     40 B2 B1 FD | 	call	#__system__close
10a14     09 26 06 F6 | 	mov	local01, #9
10a18     B6 01 00 FF 
10a1c     E8 12 06 F6 | 	mov	arg01, ##@LR__5880
10a20     38 4E 05 F1 | 	add	fp, #56
10a24     A7 14 02 FB | 	rdlong	arg02, fp
10a28     38 4E 85 F1 | 	sub	fp, #56
10a2c     24 5F B1 FD | 	call	#__system___string_concat
10a30     FD 14 02 F6 | 	mov	arg02, result1
10a34     13 13 02 F6 | 	mov	arg01, local01
10a38     00 16 06 F6 | 	mov	arg03, #0
10a3c     BC 6A B1 FD | 	call	#__system___basic_open_string
10a40     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10a44     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10a48     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10a4c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10a50     52 00 00 FF 
10a54     10 E5 05 F1 | 	add	objptr, ##42256
10a58     F2 FA 61 FC | 	wrlong	result1, objptr
10a5c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10a5c     52 00 00 FF 
10a60     10 E5 85 F1 | 	sub	objptr, ##42256
10a64     B0 00 90 AD |  if_e	jmp	#LR__1354
10a68     00 12 06 F6 | 	mov	arg01, #0
10a6c     2C BB B1 FD | 	call	#__system___getiolock_0602
10a70     FD 12 02 F6 | 	mov	arg01, result1
10a74     80 5E B1 FD | 	call	#__system___lockmem
10a78     B6 01 00 FF 
10a7c     F5 14 06 F6 | 	mov	arg02, ##@LR__5881
10a80     00 12 06 F6 | 	mov	arg01, #0
10a84     00 16 06 F6 | 	mov	arg03, #0
10a88     64 6B B1 FD | 	call	#__system___basic_print_string
10a8c     52 00 00 FF 
10a90     10 E5 05 F1 | 	add	objptr, ##42256
10a94     F2 14 02 FB | 	rdlong	arg02, objptr
10a98     52 00 00 FF 
10a9c     10 E5 85 F1 | 	sub	objptr, ##42256
10aa0     00 12 06 F6 | 	mov	arg01, #0
10aa4     00 16 06 F6 | 	mov	arg03, #0
10aa8     0A 18 06 F6 | 	mov	arg04, #10
10aac     84 6B B1 FD | 	call	#__system___basic_print_integer
10ab0     B6 01 00 FF 
10ab4     03 15 06 F6 | 	mov	arg02, ##@LR__5882
10ab8     00 12 06 F6 | 	mov	arg01, #0
10abc     00 16 06 F6 | 	mov	arg03, #0
10ac0     2C 6B B1 FD | 	call	#__system___basic_print_string
10ac4     00 26 06 F6 | 	mov	local01, #0
10ac8     52 00 00 FF 
10acc     10 E5 05 F1 | 	add	objptr, ##42256
10ad0     F2 12 02 FB | 	rdlong	arg01, objptr
10ad4     52 00 00 FF 
10ad8     10 E5 85 F1 | 	sub	objptr, ##42256
10adc     A8 87 B1 FD | 	call	#__system___strerror
10ae0     FD 14 02 F6 | 	mov	arg02, result1
10ae4     13 13 02 F6 | 	mov	arg01, local01
10ae8     00 16 06 F6 | 	mov	arg03, #0
10aec     00 6B B1 FD | 	call	#__system___basic_print_string
10af0     00 12 06 F6 | 	mov	arg01, #0
10af4     0A 14 06 F6 | 	mov	arg02, #10
10af8     00 16 06 F6 | 	mov	arg03, #0
10afc     98 6A B1 FD | 	call	#__system___basic_print_char
10b00     00 12 06 F6 | 	mov	arg01, #0
10b04     94 BA B1 FD | 	call	#__system___getiolock_0602
10b08     FD 00 68 FC | 	wrlong	#0, result1
10b0c     09 12 06 F6 | 	mov	arg01, #9
10b10     40 B1 B1 FD | 	call	#__system__close
10b14     74 06 90 FD | 	jmp	#LR__1373
10b18                 | LR__1354
10b18                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10b18     04 4E 05 F1 | 	add	fp, #4
10b1c     A7 00 68 FC | 	wrlong	#0, fp
10b20                 | LR__1355
10b20     A7 26 02 FB | 	rdlong	local01, fp
10b24     01 26 66 F0 | 	shl	local01, #1
10b28     11 14 06 F6 | 	mov	arg02, #17
10b2c     13 15 02 F1 | 	add	arg02, local01
10b30     78 4E 05 F1 | 	add	fp, #120
10b34     A7 16 02 F6 | 	mov	arg03, fp
10b38     7C 4E 85 F1 | 	sub	fp, #124
10b3c     09 12 06 F6 | 	mov	arg01, #9
10b40     01 18 06 F6 | 	mov	arg04, #1
10b44     02 1A 06 F6 | 	mov	arg05, #2
10b48     20 6C B1 FD | 	call	#__system___basic_get
10b4c     10 4E 05 F1 | 	add	fp, #16
10b50     A7 12 02 FB | 	rdlong	arg01, fp
10b54     0B 12 66 F0 | 	shl	arg01, #11
10b58     0C 4E 85 F1 | 	sub	fp, #12
10b5c     A7 26 02 FB | 	rdlong	local01, fp
10b60     01 26 66 F0 | 	shl	local01, #1
10b64     13 13 02 F1 | 	add	arg01, local01
10b68     78 4E 05 F1 | 	add	fp, #120
10b6c     A7 14 E2 FA | 	rdword	arg02, fp
10b70     7C 4E 85 F1 | 	sub	fp, #124
10b74     0F 14 66 F7 | 	signx	arg02, #15
10b78     74 25 B1 FD | 	call	#_psdpoke
10b7c     04 4E 05 F1 | 	add	fp, #4
10b80     A7 26 02 FB | 	rdlong	local01, fp
10b84     01 26 06 F1 | 	add	local01, #1
10b88     A7 26 62 FC | 	wrlong	local01, fp
10b8c     02 00 00 FF 
10b90     01 26 56 F2 | 	cmps	local01, ##1025 wc
10b94     88 FF 9F CD |  if_b	jmp	#LR__1355
10b98     04 4E 85 F1 | 	sub	fp, #4
10b9c                 | '     close #9
10b9c     09 12 06 F6 | 	mov	arg01, #9
10ba0     B0 B0 B1 FD | 	call	#__system__close
10ba4                 | '     return
10ba4     E4 05 90 FD | 	jmp	#LR__1373
10ba8                 | LR__1356
10ba8                 | '     if wptr < ($80000 - 2048) then 
10ba8     14 4E 05 F1 | 	add	fp, #20
10bac     A7 26 02 FB | 	rdlong	local01, fp
10bb0     14 4E 85 F1 | 	sub	fp, #20
10bb4     FC 03 00 FF 
10bb8     00 26 56 F2 | 	cmps	local01, ##522240 wc
10bbc     70 00 90 3D |  if_ae	jmp	#LR__1358
10bc0                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10bc0     04 4E 05 F1 | 	add	fp, #4
10bc4     A7 00 68 FC | 	wrlong	#0, fp
10bc8     04 4E 85 F1 | 	sub	fp, #4
10bcc                 | LR__1357
10bcc     10 4E 05 F1 | 	add	fp, #16
10bd0     A7 26 02 FB | 	rdlong	local01, fp
10bd4     0B 26 66 F0 | 	shl	local01, #11
10bd8     0C 4E 85 F1 | 	sub	fp, #12
10bdc     A7 1A 02 FB | 	rdlong	arg05, fp
10be0     0D 19 02 F6 | 	mov	arg04, arg05
10be4     01 18 66 F0 | 	shl	arg04, #1
10be8     0C 27 02 F1 | 	add	local01, arg04
10bec     10 4E 05 F1 | 	add	fp, #16
10bf0     A7 12 02 FB | 	rdlong	arg01, fp
10bf4     14 4E 85 F1 | 	sub	fp, #20
10bf8     01 1A 66 F0 | 	shl	arg05, #1
10bfc     0D 13 02 F1 | 	add	arg01, arg05
10c00     09 15 E2 FA | 	rdword	arg02, arg01
10c04     13 13 02 F6 | 	mov	arg01, local01
10c08     E4 24 B1 FD | 	call	#_psdpoke
10c0c     04 4E 05 F1 | 	add	fp, #4
10c10     A7 26 02 FB | 	rdlong	local01, fp
10c14     01 26 06 F1 | 	add	local01, #1
10c18     A7 26 62 FC | 	wrlong	local01, fp
10c1c     04 4E 85 F1 | 	sub	fp, #4
10c20     02 00 00 FF 
10c24     00 26 56 F2 | 	cmps	local01, ##1024 wc
10c28     A0 FF 9F CD |  if_b	jmp	#LR__1357
10c2c     5C 05 90 FD | 	jmp	#LR__1373
10c30                 | LR__1358
10c30                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10c30     04 4E 05 F1 | 	add	fp, #4
10c34     A7 00 68 FC | 	wrlong	#0, fp
10c38     04 4E 85 F1 | 	sub	fp, #4
10c3c                 | LR__1359
10c3c     10 4E 05 F1 | 	add	fp, #16
10c40     A7 26 02 FB | 	rdlong	local01, fp
10c44     0B 26 66 F0 | 	shl	local01, #11
10c48     0C 4E 85 F1 | 	sub	fp, #12
10c4c     A7 1A 02 FB | 	rdlong	arg05, fp
10c50     0D 19 02 F6 | 	mov	arg04, arg05
10c54     01 18 66 F0 | 	shl	arg04, #1
10c58     0C 27 02 F1 | 	add	local01, arg04
10c5c     10 4E 05 F1 | 	add	fp, #16
10c60     A7 12 02 FB | 	rdlong	arg01, fp
10c64     14 4E 85 F1 | 	sub	fp, #20
10c68     01 1A 66 F0 | 	shl	arg05, #1
10c6c     0D 13 02 F1 | 	add	arg01, arg05
10c70     BC 25 B1 FD | 	call	#_psdpeek
10c74     FD 14 02 F6 | 	mov	arg02, result1
10c78     13 13 02 F6 | 	mov	arg01, local01
10c7c     70 24 B1 FD | 	call	#_psdpoke
10c80     04 4E 05 F1 | 	add	fp, #4
10c84     A7 26 02 FB | 	rdlong	local01, fp
10c88     01 26 06 F1 | 	add	local01, #1
10c8c     A7 26 62 FC | 	wrlong	local01, fp
10c90     04 4E 85 F1 | 	sub	fp, #4
10c94     02 00 00 FF 
10c98     00 26 56 F2 | 	cmps	local01, ##1024 wc
10c9c     9C FF 9F CD |  if_b	jmp	#LR__1359
10ca0                 | '     return 
10ca0     E8 04 90 FD | 	jmp	#LR__1373
10ca4                 | '   return
10ca4                 | LR__1360
10ca4                 | ' for i=0 to 15 : harm(i)=0: next i  
10ca4     04 4E 05 F1 | 	add	fp, #4
10ca8     A7 00 68 FC | 	wrlong	#0, fp
10cac     97 16 48 FB | 	callpa	#(@LR__1362-@LR__1361)>>2,fcache_load_ptr_
10cb0                 | LR__1361
10cb0     A7 26 02 FB | 	rdlong	local01, fp
10cb4     02 26 66 F0 | 	shl	local01, #2
10cb8     38 4E 05 F1 | 	add	fp, #56
10cbc     A7 26 02 F1 | 	add	local01, fp
10cc0     13 01 68 FC | 	wrlong	#0, local01
10cc4     38 4E 85 F1 | 	sub	fp, #56
10cc8     A7 26 02 FB | 	rdlong	local01, fp
10ccc     01 26 06 F1 | 	add	local01, #1
10cd0     A7 26 62 FC | 	wrlong	local01, fp
10cd4     10 26 56 F2 | 	cmps	local01, #16 wc
10cd8     D4 FF 9F CD |  if_b	jmp	#LR__1361
10cdc                 | LR__1362
10cdc     04 4E 85 F1 | 	sub	fp, #4
10ce0                 | ' for i=numpar to 2 step -1 
10ce0     A7 26 02 FB | 	rdlong	local01, fp
10ce4     04 4E 05 F1 | 	add	fp, #4
10ce8     A7 26 62 FC | 	wrlong	local01, fp
10cec     04 4E 85 F1 | 	sub	fp, #4
10cf0                 | LR__1363
10cf0     74 C8 BF FD | 	call	#_pop
10cf4     2C 4E 05 F1 | 	add	fp, #44
10cf8     A7 FA 61 FC | 	wrlong	result1, fp
10cfc     04 4E 05 F1 | 	add	fp, #4
10d00     A7 FC 61 FC | 	wrlong	result2, fp
10d04     04 4E 05 F1 | 	add	fp, #4
10d08     A7 FE 61 FC | 	wrlong	result3, fp
10d0c     30 4E 85 F1 | 	sub	fp, #48
10d10     A7 26 02 FB | 	rdlong	local01, fp
10d14     02 26 86 F1 | 	sub	local01, #2
10d18     02 26 66 F0 | 	shl	local01, #2
10d1c     38 4E 05 F1 | 	add	fp, #56
10d20     A7 26 02 F1 | 	add	local01, fp
10d24     10 4E 85 F1 | 	sub	fp, #16
10d28     A7 12 02 F6 | 	mov	arg01, fp
10d2c     2C 4E 85 F1 | 	sub	fp, #44
10d30     D4 CA BF FD | 	call	#_converttofloat
10d34     13 FB 61 FC | 	wrlong	result1, local01
10d38     04 4E 05 F1 | 	add	fp, #4
10d3c     A7 26 02 FB | 	rdlong	local01, fp
10d40     01 26 86 F1 | 	sub	local01, #1
10d44     A7 26 62 FC | 	wrlong	local01, fp
10d48     04 4E 85 F1 | 	sub	fp, #4
10d4c     02 26 56 F2 | 	cmps	local01, #2 wc
10d50     9C FF 9F 3D |  if_ae	jmp	#LR__1363
10d54     10 C8 BF FD | 	call	#_pop
10d58     FF 26 02 F6 | 	mov	local01, result3
10d5c     2C 4E 05 F1 | 	add	fp, #44
10d60     A7 FA 61 FC | 	wrlong	result1, fp
10d64     04 4E 05 F1 | 	add	fp, #4
10d68     A7 FC 61 FC | 	wrlong	result2, fp
10d6c     04 4E 05 F1 | 	add	fp, #4
10d70     A7 26 62 FC | 	wrlong	local01, fp
10d74     08 4E 85 F1 | 	sub	fp, #8
10d78     A7 12 02 F6 | 	mov	arg01, fp
10d7c     2C 4E 85 F1 | 	sub	fp, #44
10d80     C8 C9 BF FD | 	call	#_converttoint
10d84     10 4E 05 F1 | 	add	fp, #16
10d88     A7 FA 61 FC | 	wrlong	result1, fp
10d8c                 | ' t1=pop()
10d8c                 | ' channel=converttoint(t1) : : if channel>31 then return
10d8c     FD 26 02 F6 | 	mov	local01, result1
10d90     10 4E 85 F1 | 	sub	fp, #16
10d94     20 26 56 F2 | 	cmps	local01, #32 wc
10d98     F0 03 90 3D |  if_ae	jmp	#LR__1373
10d9c     20 4E 05 F1 | 	add	fp, #32
10da0     A7 00 68 FC | 	wrlong	#0, fp
10da4                 | ' max=0
10da4                 | ' if harm(0)<0 then
10da4     1C 4E 05 F1 | 	add	fp, #28
10da8     A7 12 02 FB | 	rdlong	arg01, fp
10dac     3C 4E 85 F1 | 	sub	fp, #60
10db0     00 14 06 F6 | 	mov	arg02, #0
10db4     01 16 06 F6 | 	mov	arg03, #1
10db8     EC 8D B1 FD | 	call	#__system___float_cmp
10dbc     00 FA 55 F2 | 	cmps	result1, #0 wc
10dc0     04 01 90 3D |  if_ae	jmp	#LR__1366
10dc4     3C 4E 05 F1 | 	add	fp, #60
10dc8     A7 FA 01 FB | 	rdlong	result1, fp
10dcc     1F FA 05 F4 | 	bitl	result1, #31
10dd0     24 4E 85 F1 | 	sub	fp, #36
10dd4     A7 FA 61 FC | 	wrlong	result1, fp
10dd8     28 4E 05 F1 | 	add	fp, #40
10ddc     A7 FA 01 FB | 	rdlong	result1, fp
10de0     1F FA 05 F4 | 	bitl	result1, #31
10de4     24 4E 85 F1 | 	sub	fp, #36
10de8     A7 FA 61 FC | 	wrlong	result1, fp
10dec     20 4E 05 F1 | 	add	fp, #32
10df0     00 C0 9F FF 
10df4     A7 00 68 FC | 	wrlong	##1065353216, fp
10df8     24 4E 85 F1 | 	sub	fp, #36
10dfc     A7 26 02 FB | 	rdlong	local01, fp
10e00     28 4E 05 F1 | 	add	fp, #40
10e04     A7 26 62 FC | 	wrlong	local01, fp
10e08     24 4E 85 F1 | 	sub	fp, #36
10e0c     A7 26 02 FB | 	rdlong	local01, fp
10e10     28 4E 05 F1 | 	add	fp, #40
10e14     A7 26 62 FC | 	wrlong	local01, fp
10e18                 | '   harm(0)=1
10e18                 | '   harm(1)=even
10e18                 | '   harm(2)=odd
10e18                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10e18     40 4E 85 F1 | 	sub	fp, #64
10e1c     A7 06 68 FC | 	wrlong	#3, fp
10e20                 | LR__1364
10e20     A7 1A 02 FB | 	rdlong	arg05, fp
10e24     0D 29 02 F6 | 	mov	local02, arg05
10e28     02 28 66 F0 | 	shl	local02, #2
10e2c     38 4E 05 F1 | 	add	fp, #56
10e30     A7 28 02 F1 | 	add	local02, fp
10e34     02 1A 86 F1 | 	sub	arg05, #2
10e38     02 1A 66 F0 | 	shl	arg05, #2
10e3c     A7 1A 02 F1 | 	add	arg05, fp
10e40     0D 13 02 FB | 	rdlong	arg01, arg05
10e44     24 4E 85 F1 | 	sub	fp, #36
10e48     A7 14 02 FB | 	rdlong	arg02, fp
10e4c     18 4E 85 F1 | 	sub	fp, #24
10e50     20 89 B1 FD | 	call	#__system___float_mul
10e54     14 FB 61 FC | 	wrlong	result1, local02
10e58     04 4E 05 F1 | 	add	fp, #4
10e5c     A7 2A 02 FB | 	rdlong	local03, fp
10e60     02 2A 06 F1 | 	add	local03, #2
10e64     A7 2A 62 FC | 	wrlong	local03, fp
10e68     10 2A 56 F2 | 	cmps	local03, #16 wc
10e6c     B0 FF 9F CD |  if_b	jmp	#LR__1364
10e70                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10e70     A7 08 68 FC | 	wrlong	#4, fp
10e74                 | LR__1365
10e74     A7 2A 02 FB | 	rdlong	local03, fp
10e78     15 29 02 F6 | 	mov	local02, local03
10e7c     02 28 66 F0 | 	shl	local02, #2
10e80     38 4E 05 F1 | 	add	fp, #56
10e84     A7 28 02 F1 | 	add	local02, fp
10e88     02 2A 86 F1 | 	sub	local03, #2
10e8c     02 2A 66 F0 | 	shl	local03, #2
10e90     A7 2A 02 F1 | 	add	local03, fp
10e94     15 13 02 FB | 	rdlong	arg01, local03
10e98     20 4E 85 F1 | 	sub	fp, #32
10e9c     A7 14 02 FB | 	rdlong	arg02, fp
10ea0     1C 4E 85 F1 | 	sub	fp, #28
10ea4     CC 88 B1 FD | 	call	#__system___float_mul
10ea8     14 FB 61 FC | 	wrlong	result1, local02
10eac     04 4E 05 F1 | 	add	fp, #4
10eb0     A7 2A 02 FB | 	rdlong	local03, fp
10eb4     02 2A 06 F1 | 	add	local03, #2
10eb8     A7 2A 62 FC | 	wrlong	local03, fp
10ebc     0F 2A 56 F2 | 	cmps	local03, #15 wc
10ec0     B0 FF 9F CD |  if_b	jmp	#LR__1365
10ec4     04 4E 85 F1 | 	sub	fp, #4
10ec8                 | LR__1366
10ec8                 | ' if harm(0)>=0 then ' synthesize with harmonics
10ec8     3C 4E 05 F1 | 	add	fp, #60
10ecc     A7 12 02 FB | 	rdlong	arg01, fp
10ed0     3C 4E 85 F1 | 	sub	fp, #60
10ed4     00 14 06 F6 | 	mov	arg02, #0
10ed8     01 16 66 F6 | 	neg	arg03, #1
10edc     C8 8C B1 FD | 	call	#__system___float_cmp
10ee0     00 FA 55 F2 | 	cmps	result1, #0 wc
10ee4     A4 02 90 CD |  if_b	jmp	#LR__1372
10ee8                 | '   for i=0 to 1023
10ee8     04 4E 05 F1 | 	add	fp, #4
10eec     A7 00 68 FC | 	wrlong	#0, fp
10ef0     04 4E 85 F1 | 	sub	fp, #4
10ef4                 | LR__1367
10ef4     24 4E 05 F1 | 	add	fp, #36
10ef8     A7 00 68 FC | 	wrlong	#0, fp
10efc                 | '     spl=0
10efc                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10efc     1C 4E 85 F1 | 	sub	fp, #28
10f00     A7 00 68 FC | 	wrlong	#0, fp
10f04                 | LR__1368
10f04     A7 28 02 FB | 	rdlong	local02, fp
10f08     02 28 66 F0 | 	shl	local02, #2
10f0c     34 4E 05 F1 | 	add	fp, #52
10f10     A7 28 02 F1 | 	add	local02, fp
10f14     14 2B 02 FB | 	rdlong	local03, local02
10f18     87 E4 1D FF 
10f1c     DB 29 06 F6 | 	mov	local02, ##1003032539
10f20     38 4E 85 F1 | 	sub	fp, #56
10f24     A7 12 02 FB | 	rdlong	arg01, fp
10f28     04 4E 85 F1 | 	sub	fp, #4
10f2c     09 13 52 F6 | 	abs	arg01, arg01 wc
10f30     1F 2C C6 C9 |  if_b	decod	local04, #31
10f34     00 2C 06 36 |  if_ae	mov	local04, #0
10f38     34 84 B1 FD | 	call	#__system___float_fromuns
10f3c     16 FB 61 F5 | 	xor	result1, local04
10f40     FD 14 02 F6 | 	mov	arg02, result1
10f44     14 13 02 F6 | 	mov	arg01, local02
10f48     28 88 B1 FD | 	call	#__system___float_mul
10f4c     FD 28 02 F6 | 	mov	local02, result1
10f50     08 4E 05 F1 | 	add	fp, #8
10f54     A7 12 02 FB | 	rdlong	arg01, fp
10f58     08 4E 85 F1 | 	sub	fp, #8
10f5c     01 12 06 F1 | 	add	arg01, #1
10f60     09 13 52 F6 | 	abs	arg01, arg01 wc
10f64     1F 2C C6 C9 |  if_b	decod	local04, #31
10f68     00 2C 06 36 |  if_ae	mov	local04, #0
10f6c     00 84 B1 FD | 	call	#__system___float_fromuns
10f70     16 FB 61 F5 | 	xor	result1, local04
10f74     FD 14 02 F6 | 	mov	arg02, result1
10f78     14 13 02 F6 | 	mov	arg01, local02
10f7c     F4 87 B1 FD | 	call	#__system___float_mul
10f80     FD 12 02 F6 | 	mov	arg01, result1
10f84     4C 91 B1 FD | 	call	#__system____builtin_sinf
10f88     FD 14 02 F6 | 	mov	arg02, result1
10f8c     15 13 02 F6 | 	mov	arg01, local03
10f90     E0 87 B1 FD | 	call	#__system___float_mul
10f94     FD 14 02 F6 | 	mov	arg02, result1
10f98     24 4E 05 F1 | 	add	fp, #36
10f9c     A7 12 02 FB | 	rdlong	arg01, fp
10fa0     24 4E 85 F1 | 	sub	fp, #36
10fa4     FC 83 B1 FD | 	call	#__system___float_add
10fa8     24 4E 05 F1 | 	add	fp, #36
10fac     A7 FA 61 FC | 	wrlong	result1, fp
10fb0     1C 4E 85 F1 | 	sub	fp, #28
10fb4     A7 16 02 FB | 	rdlong	arg03, fp
10fb8     01 16 06 F1 | 	add	arg03, #1
10fbc     A7 16 62 FC | 	wrlong	arg03, fp
10fc0     10 16 56 F2 | 	cmps	arg03, #16 wc
10fc4     3C FF 9F CD |  if_b	jmp	#LR__1368
10fc8                 | '     if abs(spl)>max then max=abs(spl)  
10fc8     1C 4E 05 F1 | 	add	fp, #28
10fcc     A7 12 02 FB | 	rdlong	arg01, fp
10fd0     1F 12 06 F4 | 	bitl	arg01, #31
10fd4     04 4E 85 F1 | 	sub	fp, #4
10fd8     A7 14 02 FB | 	rdlong	arg02, fp
10fdc     20 4E 85 F1 | 	sub	fp, #32
10fe0     01 16 66 F6 | 	neg	arg03, #1
10fe4     C0 8B B1 FD | 	call	#__system___float_cmp
10fe8     01 FA 55 F2 | 	cmps	result1, #1 wc
10fec     18 00 90 CD |  if_b	jmp	#LR__1369
10ff0     24 4E 05 F1 | 	add	fp, #36
10ff4     A7 FA 01 FB | 	rdlong	result1, fp
10ff8     1F FA 05 F4 | 	bitl	result1, #31
10ffc     04 4E 85 F1 | 	sub	fp, #4
11000     A7 FA 61 FC | 	wrlong	result1, fp
11004     20 4E 85 F1 | 	sub	fp, #32
11008                 | LR__1369
11008     04 4E 05 F1 | 	add	fp, #4
1100c     A7 2A 02 FB | 	rdlong	local03, fp
11010     01 2A 06 F1 | 	add	local03, #1
11014     A7 2A 62 FC | 	wrlong	local03, fp
11018     04 4E 85 F1 | 	sub	fp, #4
1101c     02 00 00 FF 
11020     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11024     CC FE 9F CD |  if_b	jmp	#LR__1367
11028                 | '   for i=0 to 1023
11028     04 4E 05 F1 | 	add	fp, #4
1102c     A7 00 68 FC | 	wrlong	#0, fp
11030     04 4E 85 F1 | 	sub	fp, #4
11034                 | LR__1370
11034     24 4E 05 F1 | 	add	fp, #36
11038     A7 00 68 FC | 	wrlong	#0, fp
1103c                 | '     spl=0
1103c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
1103c     1C 4E 85 F1 | 	sub	fp, #28
11040     A7 00 68 FC | 	wrlong	#0, fp
11044                 | LR__1371
11044     A7 2A 02 FB | 	rdlong	local03, fp
11048     02 2A 66 F0 | 	shl	local03, #2
1104c     34 4E 05 F1 | 	add	fp, #52
11050     A7 2A 02 F1 | 	add	local03, fp
11054     15 2B 02 FB | 	rdlong	local03, local03
11058     1C 4E 85 F1 | 	sub	fp, #28
1105c     A7 14 02 FB | 	rdlong	arg02, fp
11060     20 4E 85 F1 | 	sub	fp, #32
11064     58 7F 23 FF 
11068     00 12 06 F6 | 	mov	arg01, ##1191096320
1106c     08 89 B1 FD | 	call	#__system___float_div
11070     FD 14 02 F6 | 	mov	arg02, result1
11074     15 13 02 F6 | 	mov	arg01, local03
11078     F8 86 B1 FD | 	call	#__system___float_mul
1107c     FD 2A 02 F6 | 	mov	local03, result1
11080     87 E4 1D FF 
11084     DB 29 06 F6 | 	mov	local02, ##1003032539
11088     04 4E 05 F1 | 	add	fp, #4
1108c     A7 12 02 FB | 	rdlong	arg01, fp
11090     04 4E 85 F1 | 	sub	fp, #4
11094     09 13 52 F6 | 	abs	arg01, arg01 wc
11098     1F 2C C6 C9 |  if_b	decod	local04, #31
1109c     00 2C 06 36 |  if_ae	mov	local04, #0
110a0     CC 82 B1 FD | 	call	#__system___float_fromuns
110a4     16 FB 61 F5 | 	xor	result1, local04
110a8     FD 14 02 F6 | 	mov	arg02, result1
110ac     14 13 02 F6 | 	mov	arg01, local02
110b0     C0 86 B1 FD | 	call	#__system___float_mul
110b4     FD 28 02 F6 | 	mov	local02, result1
110b8     08 4E 05 F1 | 	add	fp, #8
110bc     A7 12 02 FB | 	rdlong	arg01, fp
110c0     08 4E 85 F1 | 	sub	fp, #8
110c4     01 12 06 F1 | 	add	arg01, #1
110c8     09 13 52 F6 | 	abs	arg01, arg01 wc
110cc     1F 2C C6 C9 |  if_b	decod	local04, #31
110d0     00 2C 06 36 |  if_ae	mov	local04, #0
110d4     98 82 B1 FD | 	call	#__system___float_fromuns
110d8     16 FB 61 F5 | 	xor	result1, local04
110dc     FD 14 02 F6 | 	mov	arg02, result1
110e0     14 13 02 F6 | 	mov	arg01, local02
110e4     8C 86 B1 FD | 	call	#__system___float_mul
110e8     FD 12 02 F6 | 	mov	arg01, result1
110ec     E4 8F B1 FD | 	call	#__system____builtin_sinf
110f0     FD 14 02 F6 | 	mov	arg02, result1
110f4     15 13 02 F6 | 	mov	arg01, local03
110f8     78 86 B1 FD | 	call	#__system___float_mul
110fc     FD 14 02 F6 | 	mov	arg02, result1
11100     24 4E 05 F1 | 	add	fp, #36
11104     A7 12 02 FB | 	rdlong	arg01, fp
11108     24 4E 85 F1 | 	sub	fp, #36
1110c     94 82 B1 FD | 	call	#__system___float_add
11110     24 4E 05 F1 | 	add	fp, #36
11114     A7 FA 61 FC | 	wrlong	result1, fp
11118     1C 4E 85 F1 | 	sub	fp, #28
1111c     A7 2A 02 FB | 	rdlong	local03, fp
11120     01 2A 06 F1 | 	add	local03, #1
11124     A7 2A 62 FC | 	wrlong	local03, fp
11128     10 2A 56 F2 | 	cmps	local03, #16 wc
1112c     14 FF 9F CD |  if_b	jmp	#LR__1371
11130     08 4E 05 F1 | 	add	fp, #8
11134     A7 2A 02 FB | 	rdlong	local03, fp
11138     0B 2A 66 F0 | 	shl	local03, #11
1113c     0C 4E 85 F1 | 	sub	fp, #12
11140     A7 28 02 FB | 	rdlong	local02, fp
11144     01 28 66 F0 | 	shl	local02, #1
11148     14 2B 02 F1 | 	add	local03, local02
1114c     20 4E 05 F1 | 	add	fp, #32
11150     A7 12 02 FB | 	rdlong	arg01, fp
11154     24 4E 85 F1 | 	sub	fp, #36
11158     01 14 06 F6 | 	mov	arg02, #1
1115c     DC 8A B1 FD | 	call	#__system___float_tointeger
11160     FD 14 02 F6 | 	mov	arg02, result1
11164     15 13 02 F6 | 	mov	arg01, local03
11168     84 1F B1 FD | 	call	#_psdpoke
1116c     04 4E 05 F1 | 	add	fp, #4
11170     A7 2A 02 FB | 	rdlong	local03, fp
11174     01 2A 06 F1 | 	add	local03, #1
11178     A7 2A 62 FC | 	wrlong	local03, fp
1117c     04 4E 85 F1 | 	sub	fp, #4
11180     02 00 00 FF 
11184     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11188     A8 FE 9F CD |  if_b	jmp	#LR__1370
1118c                 | LR__1372
1118c                 | LR__1373
1118c     A7 F0 03 F6 | 	mov	ptra, fp
11190     B2 00 A0 FD | 	call	#popregs_
11194                 | _do_defsnd_ret
11194     2D 00 64 FD | 	ret
11198                 | 
11198                 | ' 
11198                 | ' '-------------------- defsprite
11198                 | ' 
11198                 | ' sub do_defsprite
11198                 | _do_defsprite
11198     07 4A 05 F6 | 	mov	COUNT_, #7
1119c     A8 00 A0 FD | 	call	#pushregs_
111a0     60 F0 07 F1 | 	add	ptra, #96
111a4     C0 C3 BF FD | 	call	#_pop
111a8     FD 16 02 F6 | 	mov	arg03, result1
111ac     FE 14 02 F6 | 	mov	arg02, result2
111b0     FF 12 02 F6 | 	mov	arg01, result3
111b4     30 4E 05 F1 | 	add	fp, #48
111b8     A7 16 62 FC | 	wrlong	arg03, fp
111bc     04 4E 05 F1 | 	add	fp, #4
111c0     A7 14 62 FC | 	wrlong	arg02, fp
111c4     04 4E 05 F1 | 	add	fp, #4
111c8     A7 12 62 FC | 	wrlong	arg01, fp
111cc     38 4E 85 F1 | 	sub	fp, #56
111d0     94 C3 BF FD | 	call	#_pop
111d4     FD 16 02 F6 | 	mov	arg03, result1
111d8     FE 14 02 F6 | 	mov	arg02, result2
111dc     FF 12 02 F6 | 	mov	arg01, result3
111e0     24 4E 05 F1 | 	add	fp, #36
111e4     A7 16 62 FC | 	wrlong	arg03, fp
111e8     04 4E 05 F1 | 	add	fp, #4
111ec     A7 14 62 FC | 	wrlong	arg02, fp
111f0     04 4E 05 F1 | 	add	fp, #4
111f4     A7 12 62 FC | 	wrlong	arg01, fp
111f8     2C 4E 85 F1 | 	sub	fp, #44
111fc     68 C3 BF FD | 	call	#_pop
11200     FD 16 02 F6 | 	mov	arg03, result1
11204     FE 14 02 F6 | 	mov	arg02, result2
11208     FF 12 02 F6 | 	mov	arg01, result3
1120c     18 4E 05 F1 | 	add	fp, #24
11210     A7 16 62 FC | 	wrlong	arg03, fp
11214     04 4E 05 F1 | 	add	fp, #4
11218     A7 14 62 FC | 	wrlong	arg02, fp
1121c     04 4E 05 F1 | 	add	fp, #4
11220     A7 12 62 FC | 	wrlong	arg01, fp
11224     20 4E 85 F1 | 	sub	fp, #32
11228     3C C3 BF FD | 	call	#_pop
1122c     FD 16 02 F6 | 	mov	arg03, result1
11230     FE 14 02 F6 | 	mov	arg02, result2
11234     FF 12 02 F6 | 	mov	arg01, result3
11238     0C 4E 05 F1 | 	add	fp, #12
1123c     A7 16 62 FC | 	wrlong	arg03, fp
11240     04 4E 05 F1 | 	add	fp, #4
11244     A7 14 62 FC | 	wrlong	arg02, fp
11248     04 4E 05 F1 | 	add	fp, #4
1124c     A7 12 62 FC | 	wrlong	arg01, fp
11250     14 4E 85 F1 | 	sub	fp, #20
11254     10 C3 BF FD | 	call	#_pop
11258     FF 16 02 F6 | 	mov	arg03, result3
1125c     A7 FA 61 FC | 	wrlong	result1, fp
11260     04 4E 05 F1 | 	add	fp, #4
11264     A7 FC 61 FC | 	wrlong	result2, fp
11268     04 4E 05 F1 | 	add	fp, #4
1126c     A7 16 62 FC | 	wrlong	arg03, fp
11270     08 4E 85 F1 | 	sub	fp, #8
11274     A7 12 02 F6 | 	mov	arg01, fp
11278     D0 C4 BF FD | 	call	#_converttoint
1127c     3C 4E 05 F1 | 	add	fp, #60
11280     A7 FA 61 FC | 	wrlong	result1, fp
11284     30 4E 85 F1 | 	sub	fp, #48
11288     A7 12 02 F6 | 	mov	arg01, fp
1128c     0C 4E 85 F1 | 	sub	fp, #12
11290     B8 C4 BF FD | 	call	#_converttoint
11294     40 4E 05 F1 | 	add	fp, #64
11298     A7 FA 61 FC | 	wrlong	result1, fp
1129c     28 4E 85 F1 | 	sub	fp, #40
112a0     A7 12 02 F6 | 	mov	arg01, fp
112a4     18 4E 85 F1 | 	sub	fp, #24
112a8     A0 C4 BF FD | 	call	#_converttoint
112ac     44 4E 05 F1 | 	add	fp, #68
112b0     A7 FA 61 FC | 	wrlong	result1, fp
112b4     20 4E 85 F1 | 	sub	fp, #32
112b8     A7 12 02 F6 | 	mov	arg01, fp
112bc     24 4E 85 F1 | 	sub	fp, #36
112c0     88 C4 BF FD | 	call	#_converttoint
112c4     48 4E 05 F1 | 	add	fp, #72
112c8     A7 FA 61 FC | 	wrlong	result1, fp
112cc     18 4E 85 F1 | 	sub	fp, #24
112d0     A7 12 02 F6 | 	mov	arg01, fp
112d4     30 4E 85 F1 | 	sub	fp, #48
112d8     70 C4 BF FD | 	call	#_converttoint
112dc     4C 4E 05 F1 | 	add	fp, #76
112e0     A7 FA 61 FC | 	wrlong	result1, fp
112e4                 | ' 
112e4                 | ' t5=pop()
112e4                 | ' t4=pop()
112e4                 | ' t3=pop()
112e4                 | ' t2=pop()
112e4                 | ' t1=pop()
112e4                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
112e4                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
112e4     10 4E 85 F1 | 	sub	fp, #16
112e8     A7 16 02 FB | 	rdlong	arg03, fp
112ec     3C 4E 85 F1 | 	sub	fp, #60
112f0     02 16 66 F0 | 	shl	arg03, #2
112f4     52 00 00 FF 
112f8     54 E4 05 F1 | 	add	objptr, ##42068
112fc     F2 16 02 F1 | 	add	arg03, objptr
11300     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11304     52 00 00 FF 
11308     54 E4 85 F1 | 	sub	objptr, ##42068
1130c     2C 00 90 AD |  if_e	jmp	#LR__1380
11310     3C 4E 05 F1 | 	add	fp, #60
11314     A7 16 02 FB | 	rdlong	arg03, fp
11318     3C 4E 85 F1 | 	sub	fp, #60
1131c     02 16 66 F0 | 	shl	arg03, #2
11320     52 00 00 FF 
11324     54 E4 05 F1 | 	add	objptr, ##42068
11328     F2 16 02 F1 | 	add	arg03, objptr
1132c     0B 13 02 FB | 	rdlong	arg01, arg03
11330     52 00 00 FF 
11334     54 E4 85 F1 | 	sub	objptr, ##42068
11338     9C 98 B1 FD | 	call	#__system___gc_free
1133c                 | LR__1380
1133c     3C 4E 05 F1 | 	add	fp, #60
11340     A7 26 02 FB | 	rdlong	local01, fp
11344     0C 4E 05 F1 | 	add	fp, #12
11348     A7 16 02 FB | 	rdlong	arg03, fp
1134c     04 4E 05 F1 | 	add	fp, #4
11350     A7 14 02 FB | 	rdlong	arg02, fp
11354     0A 17 02 FD | 	qmul	arg03, arg02
11358     02 26 66 F0 | 	shl	local01, #2
1135c     52 00 00 FF 
11360     54 E4 05 F1 | 	add	objptr, ##42068
11364     F2 26 02 F1 | 	add	local01, objptr
11368     4C 4E 85 F1 | 	sub	fp, #76
1136c     52 00 00 FF 
11370     54 E4 85 F1 | 	sub	objptr, ##42068
11374     18 12 62 FD | 	getqx	arg01
11378     20 97 B1 FD | 	call	#__system___gc_alloc_managed
1137c     13 FB 61 FC | 	wrlong	result1, local01
11380                 | ' for y=a3 to a3+a5-1
11380     44 4E 05 F1 | 	add	fp, #68
11384     A7 28 02 FB | 	rdlong	local02, fp
11388     0C 4E 05 F1 | 	add	fp, #12
1138c     A7 28 62 FC | 	wrlong	local02, fp
11390     0C 4E 85 F1 | 	sub	fp, #12
11394     A7 2A 02 FB | 	rdlong	local03, fp
11398     08 4E 05 F1 | 	add	fp, #8
1139c     A7 2C 02 FB | 	rdlong	local04, fp
113a0     4C 4E 85 F1 | 	sub	fp, #76
113a4     16 2B 02 F1 | 	add	local03, local04
113a8                 | LR__1381
113a8     50 4E 05 F1 | 	add	fp, #80
113ac     A7 28 02 FB | 	rdlong	local02, fp
113b0     50 4E 85 F1 | 	sub	fp, #80
113b4     15 29 52 F2 | 	cmps	local02, local03 wc
113b8     F4 00 90 3D |  if_ae	jmp	#LR__1384
113bc                 | '   for x=a2 to a4+a2-1
113bc     40 4E 05 F1 | 	add	fp, #64
113c0     A7 26 02 FB | 	rdlong	local01, fp
113c4     14 4E 05 F1 | 	add	fp, #20
113c8     A7 26 62 FC | 	wrlong	local01, fp
113cc     0C 4E 85 F1 | 	sub	fp, #12
113d0     A7 2E 02 FB | 	rdlong	local05, fp
113d4     08 4E 85 F1 | 	sub	fp, #8
113d8     A7 30 02 FB | 	rdlong	local06, fp
113dc     40 4E 85 F1 | 	sub	fp, #64
113e0     18 2F 02 F1 | 	add	local05, local06
113e4                 | LR__1382
113e4     54 4E 05 F1 | 	add	fp, #84
113e8     A7 26 02 FB | 	rdlong	local01, fp
113ec     54 4E 85 F1 | 	sub	fp, #84
113f0     17 27 52 F2 | 	cmps	local01, local05 wc
113f4     A0 00 90 3D |  if_ae	jmp	#LR__1383
113f8     3C 4E 05 F1 | 	add	fp, #60
113fc     A7 30 02 FB | 	rdlong	local06, fp
11400     18 4E 05 F1 | 	add	fp, #24
11404     A7 2C 02 FB | 	rdlong	local04, fp
11408     14 4E 85 F1 | 	sub	fp, #20
1140c     A7 28 02 FB | 	rdlong	local02, fp
11410     10 4E 05 F1 | 	add	fp, #16
11414     A7 26 02 FB | 	rdlong	local01, fp
11418     13 17 02 F6 | 	mov	arg03, local01
1141c     0C 4E 85 F1 | 	sub	fp, #12
11420     A7 14 02 FB | 	rdlong	arg02, fp
11424     0A 17 82 F1 | 	sub	arg03, arg02
11428     04 4E 05 F1 | 	add	fp, #4
1142c     A7 14 02 FB | 	rdlong	arg02, fp
11430     0A 17 02 FD | 	qmul	arg03, arg02
11434     02 30 66 F0 | 	shl	local06, #2
11438     52 00 00 FF 
1143c     54 E4 05 F1 | 	add	objptr, ##42068
11440     F2 30 02 F1 | 	add	local06, objptr
11444     18 31 02 FB | 	rdlong	local06, local06
11448     16 33 02 F6 | 	mov	local07, local04
1144c     14 33 82 F1 | 	sub	local07, local02
11450     52 00 00 FF 
11454     54 E4 85 F1 | 	sub	objptr, ##42068
11458     F2 12 02 FB | 	rdlong	arg01, objptr
1145c     16 13 02 F1 | 	add	arg01, local04
11460     48 4E 85 F1 | 	sub	fp, #72
11464     0A 26 66 F0 | 	shl	local01, #10
11468     13 13 02 F1 | 	add	arg01, local01
1146c     18 2C 62 FD | 	getqx	local04
11470     16 33 02 F1 | 	add	local07, local04
11474     18 33 02 F1 | 	add	local07, local06
11478     04 1D B1 FD | 	call	#_pspeek
1147c     19 FB 41 FC | 	wrbyte	result1, local07
11480     54 4E 05 F1 | 	add	fp, #84
11484     A7 32 02 FB | 	rdlong	local07, fp
11488     01 32 06 F1 | 	add	local07, #1
1148c     A7 32 62 FC | 	wrlong	local07, fp
11490     54 4E 85 F1 | 	sub	fp, #84
11494     4C FF 9F FD | 	jmp	#LR__1382
11498                 | LR__1383
11498     50 4E 05 F1 | 	add	fp, #80
1149c     A7 32 02 FB | 	rdlong	local07, fp
114a0     01 32 06 F1 | 	add	local07, #1
114a4     A7 32 62 FC | 	wrlong	local07, fp
114a8     50 4E 85 F1 | 	sub	fp, #80
114ac     F8 FE 9F FD | 	jmp	#LR__1381
114b0                 | LR__1384
114b0     3C 4E 05 F1 | 	add	fp, #60
114b4     A7 32 02 FB | 	rdlong	local07, fp
114b8     19 13 02 F6 | 	mov	arg01, local07
114bc     3C 4E 85 F1 | 	sub	fp, #60
114c0     02 32 66 F0 | 	shl	local07, #2
114c4     52 00 00 FF 
114c8     54 E4 05 F1 | 	add	objptr, ##42068
114cc     F2 32 02 F1 | 	add	local07, objptr
114d0     19 15 02 FB | 	rdlong	arg02, local07
114d4     52 00 00 FF 
114d8     54 E4 85 F1 | 	sub	objptr, ##42068
114dc     E4 29 B1 FD | 	call	#_hg010b_spin2_setspriteptr
114e0     3C 4E 05 F1 | 	add	fp, #60
114e4     A7 12 02 FB | 	rdlong	arg01, fp
114e8     0C 4E 05 F1 | 	add	fp, #12
114ec     A7 14 02 FB | 	rdlong	arg02, fp
114f0     04 4E 05 F1 | 	add	fp, #4
114f4     A7 16 02 FB | 	rdlong	arg03, fp
114f8     4C 4E 85 F1 | 	sub	fp, #76
114fc     54 2A B1 FD | 	call	#_hg010b_spin2_setspritesize
11500     A7 F0 03 F6 | 	mov	ptra, fp
11504     B2 00 A0 FD | 	call	#popregs_
11508                 | _do_defsprite_ret
11508     2D 00 64 FD | 	ret
1150c                 | 
1150c                 | ' 
1150c                 | ' '-------------------- deg
1150c                 | ' 
1150c                 | ' sub do_deg
1150c                 | _do_deg
1150c     52 00 00 FF 
11510     A8 E4 05 F1 | 	add	objptr, ##42152
11514     7D 47 9E FF 
11518     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1151c     04 E4 05 F1 | 	add	objptr, #4
11520     97 32 A1 FF 
11524     F2 C2 69 FC | 	wrlong	##1113927393, objptr
11528     52 00 00 FF 
1152c     AC E4 85 F1 | 	sub	objptr, ##42156
11530                 | _do_deg_ret
11530     2D 00 64 FD | 	ret
11534                 | 
11534                 | ' 
11534                 | ' '-------------------- delete
11534                 | ' 
11534                 | ' sub do_delete
11534                 | _do_delete
11534     05 4A 05 F6 | 	mov	COUNT_, #5
11538     A8 00 A0 FD | 	call	#pushregs_
1153c     28 C0 BF FD | 	call	#_pop
11540     FE 18 02 F6 | 	mov	arg04, result2
11544     FF 16 02 F6 | 	mov	arg03, result3
11548     FD 26 02 F6 | 	mov	local01, result1
1154c     0C 29 02 F6 | 	mov	local02, arg04
11550     0B 2B 02 F6 | 	mov	local03, arg03
11554                 | ' 
11554                 | ' t1=pop()
11554                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11554     2B 2A 0E F2 | 	cmp	local03, #43 wz
11558     10 00 90 5D |  if_ne	jmp	#LR__1390
1155c     13 13 02 F6 | 	mov	arg01, local01
11560     7C C1 BF FD | 	call	#_convertstring
11564     FD 26 02 F6 | 	mov	local01, result1
11568     1F 2A 06 F6 | 	mov	local03, #31
1156c                 | LR__1390
1156c                 | ' if t1.result_type<>result_string then printerror(15): return
1156c     1F 2A 0E F2 | 	cmp	local03, #31 wz
11570     10 00 90 AD |  if_e	jmp	#LR__1391
11574     0F 12 06 F6 | 	mov	arg01, #15
11578     00 14 06 F6 | 	mov	arg02, #0
1157c     88 19 B1 FD | 	call	#_printerror
11580     E4 00 90 FD | 	jmp	#LR__1395
11584                 | LR__1391
11584                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
11584     4A 00 00 FF 
11588     94 E4 05 F1 | 	add	objptr, ##38036
1158c     F2 12 02 FB | 	rdlong	arg01, objptr
11590     4A 00 00 FF 
11594     94 E4 85 F1 | 	sub	objptr, ##38036
11598     B6 01 00 FF 
1159c     06 15 06 F6 | 	mov	arg02, ##@LR__5883
115a0     7C 53 B1 FD | 	call	#__system___string_cmp
115a4     00 FA 0D F2 | 	cmp	result1, #0 wz
115a8     34 00 90 AD |  if_e	jmp	#LR__1392
115ac     4A 00 00 FF 
115b0     94 E4 05 F1 | 	add	objptr, ##38036
115b4     F2 12 02 FB | 	rdlong	arg01, objptr
115b8     4A 00 00 FF 
115bc     94 E4 85 F1 | 	sub	objptr, ##38036
115c0     B6 01 00 FF 
115c4     08 15 06 F6 | 	mov	arg02, ##@LR__5884
115c8     88 53 B1 FD | 	call	#__system___string_concat
115cc     FD 12 02 F6 | 	mov	arg01, result1
115d0     13 15 02 F6 | 	mov	arg02, local01
115d4     7C 53 B1 FD | 	call	#__system___string_concat
115d8     FD 2C 02 F6 | 	mov	local04, result1
115dc     14 00 90 FD | 	jmp	#LR__1393
115e0                 | LR__1392
115e0     B6 01 00 FF 
115e4     0A 13 06 F6 | 	mov	arg01, ##@LR__5885
115e8     13 15 02 F6 | 	mov	arg02, local01
115ec     64 53 B1 FD | 	call	#__system___string_concat
115f0     FD 2C 02 F6 | 	mov	local04, result1
115f4                 | LR__1393
115f4     16 13 02 F6 | 	mov	arg01, local04
115f8     CC 7A B1 FD | 	call	#__system___remove
115fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11600     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11604     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
11608     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1160c     FD 2E 0A F6 | 	mov	local05, result1 wz
11610                 | ' kill filename$
11610                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
11610     54 00 90 AD |  if_e	jmp	#LR__1394
11614     00 12 06 F6 | 	mov	arg01, #0
11618     80 AF B1 FD | 	call	#__system___getiolock_0602
1161c     FD 12 02 F6 | 	mov	arg01, result1
11620     D4 52 B1 FD | 	call	#__system___lockmem
11624     B6 01 00 FF 
11628     0C 15 06 F6 | 	mov	arg02, ##@LR__5886
1162c     00 12 06 F6 | 	mov	arg01, #0
11630     00 16 06 F6 | 	mov	arg03, #0
11634     B8 5F B1 FD | 	call	#__system___basic_print_string
11638     00 12 06 F6 | 	mov	arg01, #0
1163c     17 15 02 F6 | 	mov	arg02, local05
11640     00 16 06 F6 | 	mov	arg03, #0
11644     0A 18 06 F6 | 	mov	arg04, #10
11648     E8 5F B1 FD | 	call	#__system___basic_print_integer
1164c     00 12 06 F6 | 	mov	arg01, #0
11650     0A 14 06 F6 | 	mov	arg02, #10
11654     00 16 06 F6 | 	mov	arg03, #0
11658     3C 5F B1 FD | 	call	#__system___basic_print_char
1165c     00 12 06 F6 | 	mov	arg01, #0
11660     38 AF B1 FD | 	call	#__system___getiolock_0602
11664     FD 00 68 FC | 	wrlong	#0, result1
11668                 | LR__1394
11668                 | LR__1395
11668     A7 F0 03 F6 | 	mov	ptra, fp
1166c     B2 00 A0 FD | 	call	#popregs_
11670                 | _do_delete_ret
11670     2D 00 64 FD | 	ret
11674                 | 
11674                 | ' 
11674                 | ' '-------------------- dir
11674                 | ' 
11674                 | ' sub do_dir
11674                 | _do_dir
11674     13 4A 05 F6 | 	mov	COUNT_, #19
11678     A8 00 A0 FD | 	call	#pushregs_
1167c     01 00 00 FF 
11680     38 F0 07 F1 | 	add	ptra, ##568
11684                 | ' 
11684                 | ' print "Current directory: "; currentdir$ 
11684     00 12 06 F6 | 	mov	arg01, #0
11688     10 AF B1 FD | 	call	#__system___getiolock_0602
1168c     FD 12 02 F6 | 	mov	arg01, result1
11690     64 52 B1 FD | 	call	#__system___lockmem
11694     B6 01 00 FF 
11698     44 15 06 F6 | 	mov	arg02, ##@LR__5887
1169c     00 12 06 F6 | 	mov	arg01, #0
116a0     00 16 06 F6 | 	mov	arg03, #0
116a4     48 5F B1 FD | 	call	#__system___basic_print_string
116a8     4A 00 00 FF 
116ac     94 E4 05 F1 | 	add	objptr, ##38036
116b0     F2 14 02 FB | 	rdlong	arg02, objptr
116b4     4A 00 00 FF 
116b8     94 E4 85 F1 | 	sub	objptr, ##38036
116bc     00 12 06 F6 | 	mov	arg01, #0
116c0     00 16 06 F6 | 	mov	arg03, #0
116c4     28 5F B1 FD | 	call	#__system___basic_print_string
116c8     00 12 06 F6 | 	mov	arg01, #0
116cc     0A 14 06 F6 | 	mov	arg02, #10
116d0     00 16 06 F6 | 	mov	arg03, #0
116d4     C0 5E B1 FD | 	call	#__system___basic_print_char
116d8     01 26 06 F6 | 	mov	local01, #1
116dc     00 12 06 F6 | 	mov	arg01, #0
116e0     B8 AE B1 FD | 	call	#__system___getiolock_0602
116e4     FD 00 68 FC | 	wrlong	#0, result1
116e8     00 28 06 F6 | 	mov	local02, #0
116ec     00 2A 06 F6 | 	mov	local03, #0
116f0                 | ' px=0
116f0                 | ' for i=0 to 127: filelist(i)="" : next i
116f0     00 2C 06 F6 | 	mov	local04, #0
116f4     1C 4E 05 F1 | 	add	fp, #28
116f8     97 12 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
116fc                 | LR__1400
116fc     16 2F 02 F6 | 	mov	local05, local04
11700     02 2E 66 F0 | 	shl	local05, #2
11704     A7 2E 02 F1 | 	add	local05, fp
11708     B6 01 00 FF 
1170c     58 31 06 F6 | 	mov	local06, ##@LR__5888
11710     17 31 62 FC | 	wrlong	local06, local05
11714     01 2C 06 F1 | 	add	local04, #1
11718     80 2C 56 F2 | 	cmps	local04, #128 wc
1171c     DC FF 9F CD |  if_b	jmp	#LR__1400
11720                 | LR__1401
11720     1C 4E 85 F1 | 	sub	fp, #28
11724     B6 01 00 FF 
11728     59 13 06 F6 | 	mov	arg01, ##@LR__5889
1172c     10 14 06 F6 | 	mov	arg02, #16
11730     28 B0 B1 FD | 	call	#__system___basic_dir
11734     FD 32 02 F6 | 	mov	local07, result1
11738     00 34 06 F6 | 	mov	local08, #0
1173c                 | ' filename=dir$("*", fbDirectory)
1173c                 | ' n=0
1173c                 | ' while filename <> "" andalso filename <> nil andalso n<128
1173c                 | LR__1402
1173c     B6 01 00 FF 
11740     5B 37 06 F6 | 	mov	local09, ##@LR__5890
11744     19 13 02 F6 | 	mov	arg01, local07
11748     1B 15 02 F6 | 	mov	arg02, local09
1174c     D0 51 B1 FD | 	call	#__system___string_cmp
11750     00 FA 0D F2 | 	cmp	result1, #0 wz
11754     68 00 90 AD |  if_e	jmp	#LR__1403
11758     00 36 06 F6 | 	mov	local09, #0
1175c     19 13 02 F6 | 	mov	arg01, local07
11760     00 14 06 F6 | 	mov	arg02, #0
11764     B8 51 B1 FD | 	call	#__system___string_cmp
11768     00 FA 0D F2 | 	cmp	result1, #0 wz
1176c     50 00 90 AD |  if_e	jmp	#LR__1403
11770     80 34 56 F2 | 	cmps	local08, #128 wc
11774     48 00 90 3D |  if_ae	jmp	#LR__1403
11778     B6 01 00 FF 
1177c     5C 13 06 F6 | 	mov	arg01, ##@LR__5891
11780     19 15 02 F6 | 	mov	arg02, local07
11784     CC 51 B1 FD | 	call	#__system___string_concat
11788     FD 32 02 F6 | 	mov	local07, result1
1178c     1A 2F 02 F6 | 	mov	local05, local08
11790     02 2E 66 F0 | 	shl	local05, #2
11794     1C 4E 05 F1 | 	add	fp, #28
11798     A7 2E 02 F1 | 	add	local05, fp
1179c     17 33 62 FC | 	wrlong	local07, local05
117a0     01 34 06 F1 | 	add	local08, #1
117a4     00 2E 06 F6 | 	mov	local05, #0
117a8     00 12 06 F6 | 	mov	arg01, #0
117ac     00 14 06 F6 | 	mov	arg02, #0
117b0     1C 4E 85 F1 | 	sub	fp, #28
117b4     A4 AF B1 FD | 	call	#__system___basic_dir
117b8     FD 32 02 F6 | 	mov	local07, result1
117bc     7C FF 9F FD | 	jmp	#LR__1402
117c0                 | LR__1403
117c0                 | ' for i=0 to n-1			' now sort this
117c0     00 2C 06 F6 | 	mov	local04, #0
117c4     1A 39 02 F6 | 	mov	local10, local08
117c8                 | LR__1404
117c8     1C 2D 52 F2 | 	cmps	local04, local10 wc
117cc     DC 00 90 3D |  if_ae	jmp	#LR__1408
117d0     00 3A 06 F6 | 	mov	local11, #0
117d4                 | '   swapped=false
117d4                 | '   for j=0 to n-i-2
117d4     00 3C 06 F6 | 	mov	local12, #0
117d8     1A 3F 02 F6 | 	mov	local13, local08
117dc     16 3F 82 F1 | 	sub	local13, local04
117e0     01 3E 86 F1 | 	sub	local13, #1
117e4                 | LR__1405
117e4     1F 3D 52 F2 | 	cmps	local12, local13 wc
117e8     B0 00 90 3D |  if_ae	jmp	#LR__1407
117ec                 | '     if filelist(j) > filelist(j+1) then
117ec     1E 37 02 F6 | 	mov	local09, local12
117f0     02 36 66 F0 | 	shl	local09, #2
117f4     1C 4E 05 F1 | 	add	fp, #28
117f8     A7 36 02 F1 | 	add	local09, fp
117fc     1B 13 02 FB | 	rdlong	arg01, local09
11800     1E 37 02 F6 | 	mov	local09, local12
11804     01 36 06 F1 | 	add	local09, #1
11808     1B 31 02 F6 | 	mov	local06, local09
1180c     02 30 66 F0 | 	shl	local06, #2
11810     A7 26 02 F6 | 	mov	local01, fp
11814     A7 30 02 F1 | 	add	local06, fp
11818     18 2F 02 FB | 	rdlong	local05, local06
1181c     17 15 02 F6 | 	mov	arg02, local05
11820     1C 4E 85 F1 | 	sub	fp, #28
11824     F8 50 B1 FD | 	call	#__system___string_cmp
11828     01 FA 55 F2 | 	cmps	result1, #1 wc
1182c     64 00 90 CD |  if_b	jmp	#LR__1406
11830     1E 37 02 F6 | 	mov	local09, local12
11834     01 36 06 F1 | 	add	local09, #1
11838     02 36 66 F0 | 	shl	local09, #2
1183c     1C 4E 05 F1 | 	add	fp, #28
11840     A7 36 02 F1 | 	add	local09, fp
11844     1B 3B 02 FB | 	rdlong	local11, local09
11848     1E 31 02 F6 | 	mov	local06, local12
1184c     02 30 66 F0 | 	shl	local06, #2
11850     A7 30 02 F1 | 	add	local06, fp
11854     18 2F 02 FB | 	rdlong	local05, local06
11858     1E 37 02 F6 | 	mov	local09, local12
1185c     1B 31 02 F6 | 	mov	local06, local09
11860     02 30 66 F0 | 	shl	local06, #2
11864     A7 26 02 F6 | 	mov	local01, fp
11868     A7 30 02 F1 | 	add	local06, fp
1186c     18 3B 62 FC | 	wrlong	local11, local06
11870     1E 29 02 F6 | 	mov	local02, local12
11874     01 28 06 F1 | 	add	local02, #1
11878     14 41 02 F6 | 	mov	local14, local02
1187c     02 40 66 F0 | 	shl	local14, #2
11880     A7 42 02 F6 | 	mov	local15, fp
11884     A7 40 02 F1 | 	add	local14, fp
11888     20 2F 62 FC | 	wrlong	local05, local14
1188c     01 3A 66 F6 | 	neg	local11, #1
11890     1C 4E 85 F1 | 	sub	fp, #28
11894                 | LR__1406
11894     01 3C 06 F1 | 	add	local12, #1
11898     48 FF 9F FD | 	jmp	#LR__1405
1189c                 | LR__1407
1189c                 | ' if not swapped then exit for
1189c     1D 45 22 F6 | 	not	local16, local11
118a0     00 44 0E F2 | 	cmp	local16, #0 wz
118a4     01 2C 06 A1 |  if_e	add	local04, #1
118a8     1C FF 9F AD |  if_e	jmp	#LR__1404
118ac                 | LR__1408
118ac                 | ' for i=0 to n-1
118ac     00 2C 06 F6 | 	mov	local04, #0
118b0     1A 47 02 F6 | 	mov	local17, local08
118b4                 | LR__1409
118b4     23 2D 52 F2 | 	cmps	local04, local17 wc
118b8     94 00 90 3D |  if_ae	jmp	#LR__1411
118bc                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
118bc     00 12 06 F6 | 	mov	arg01, #0
118c0     D8 AC B1 FD | 	call	#__system___getiolock_0602
118c4     FD 12 02 F6 | 	mov	arg01, result1
118c8     2C 50 B1 FD | 	call	#__system___lockmem
118cc     16 29 02 F6 | 	mov	local02, local04
118d0     02 28 66 F0 | 	shl	local02, #2
118d4     1C 4E 05 F1 | 	add	fp, #28
118d8     A7 40 02 F6 | 	mov	local14, fp
118dc     A7 28 02 F1 | 	add	local02, fp
118e0     14 15 02 FB | 	rdlong	arg02, local02
118e4     00 26 06 F6 | 	mov	local01, #0
118e8     00 12 06 F6 | 	mov	arg01, #0
118ec     00 16 06 F6 | 	mov	arg03, #0
118f0     1C 4E 85 F1 | 	sub	fp, #28
118f4     F8 5C B1 FD | 	call	#__system___basic_print_string
118f8     00 12 06 F6 | 	mov	arg01, #0
118fc     9C AC B1 FD | 	call	#__system___getiolock_0602
11900     FD 00 68 FC | 	wrlong	#0, result1
11904     40 2A 06 F1 | 	add	local03, #64
11908     15 13 02 F6 | 	mov	arg01, local03
1190c     90 32 B1 FD | 	call	#_hg010b_spin2_setcursorx
11910     00 2B 56 F2 | 	cmps	local03, #256 wc
11914     30 00 90 CD |  if_b	jmp	#LR__1410
11918     00 2A 06 F6 | 	mov	local03, #0
1191c     00 12 06 F6 | 	mov	arg01, #0
11920     78 AC B1 FD | 	call	#__system___getiolock_0602
11924     FD 12 02 F6 | 	mov	arg01, result1
11928     CC 4F B1 FD | 	call	#__system___lockmem
1192c     00 12 06 F6 | 	mov	arg01, #0
11930     0A 14 06 F6 | 	mov	arg02, #10
11934     00 16 06 F6 | 	mov	arg03, #0
11938     5C 5C B1 FD | 	call	#__system___basic_print_char
1193c     00 12 06 F6 | 	mov	arg01, #0
11940     58 AC B1 FD | 	call	#__system___getiolock_0602
11944     FD 00 68 FC | 	wrlong	#0, result1
11948                 | LR__1410
11948     01 2C 06 F1 | 	add	local04, #1
1194c     64 FF 9F FD | 	jmp	#LR__1409
11950                 | LR__1411
11950                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11950     80 34 56 F2 | 	cmps	local08, #128 wc
11954     44 00 90 CD |  if_b	jmp	#LR__1412
11958     00 12 06 F6 | 	mov	arg01, #0
1195c     3C AC B1 FD | 	call	#__system___getiolock_0602
11960     FD 12 02 F6 | 	mov	arg01, result1
11964     90 4F B1 FD | 	call	#__system___lockmem
11968     B6 01 00 FF 
1196c     63 15 06 F6 | 	mov	arg02, ##@LR__5892
11970     00 12 06 F6 | 	mov	arg01, #0
11974     00 16 06 F6 | 	mov	arg03, #0
11978     74 5C B1 FD | 	call	#__system___basic_print_string
1197c     00 12 06 F6 | 	mov	arg01, #0
11980     0A 14 06 F6 | 	mov	arg02, #10
11984     00 16 06 F6 | 	mov	arg03, #0
11988     0C 5C B1 FD | 	call	#__system___basic_print_char
1198c     00 12 06 F6 | 	mov	arg01, #0
11990     08 AC B1 FD | 	call	#__system___getiolock_0602
11994     FD 00 68 FC | 	wrlong	#0, result1
11998     00 26 06 F6 | 	mov	local01, #0
1199c                 | LR__1412
1199c                 | ' print
1199c     00 12 06 F6 | 	mov	arg01, #0
119a0     F8 AB B1 FD | 	call	#__system___getiolock_0602
119a4     FD 12 02 F6 | 	mov	arg01, result1
119a8     4C 4F B1 FD | 	call	#__system___lockmem
119ac     00 12 06 F6 | 	mov	arg01, #0
119b0     0A 14 06 F6 | 	mov	arg02, #10
119b4     00 16 06 F6 | 	mov	arg03, #0
119b8     DC 5B B1 FD | 	call	#__system___basic_print_char
119bc     00 12 06 F6 | 	mov	arg01, #0
119c0     D8 AB B1 FD | 	call	#__system___getiolock_0602
119c4     FD 00 68 FC | 	wrlong	#0, result1
119c8     00 30 06 F6 | 	mov	local06, #0
119cc     00 34 06 F6 | 	mov	local08, #0
119d0     00 2A 06 F6 | 	mov	local03, #0
119d4                 | ' return cursor_y
119d4     3E E4 05 F1 | 	add	objptr, #62
119d8     F2 48 C2 FA | 	rdbyte	local18, objptr
119dc     3E E4 85 F1 | 	sub	objptr, #62
119e0     B6 01 00 FF 
119e4     95 13 06 F6 | 	mov	arg01, ##@LR__5893
119e8     21 14 06 F6 | 	mov	arg02, #33
119ec     6C AD B1 FD | 	call	#__system___basic_dir
119f0     FD 32 02 F6 | 	mov	local07, result1
119f4                 | ' n=0
119f4                 | ' px=0: py=v.getcursory()
119f4                 | ' filename = dir$("*", fbNormal )   
119f4                 | ' do while filename <> "" andalso filename <> nil andalso n<128
119f4                 | LR__1413
119f4     B6 01 00 FF 
119f8     97 37 06 F6 | 	mov	local09, ##@LR__5894
119fc     19 13 02 F6 | 	mov	arg01, local07
11a00     1B 15 02 F6 | 	mov	arg02, local09
11a04     18 4F B1 FD | 	call	#__system___string_cmp
11a08     00 FA 0D F2 | 	cmp	result1, #0 wz
11a0c     54 00 90 AD |  if_e	jmp	#LR__1414
11a10     00 36 06 F6 | 	mov	local09, #0
11a14     19 13 02 F6 | 	mov	arg01, local07
11a18     00 14 06 F6 | 	mov	arg02, #0
11a1c     00 4F B1 FD | 	call	#__system___string_cmp
11a20     00 FA 0D F2 | 	cmp	result1, #0 wz
11a24     3C 00 90 AD |  if_e	jmp	#LR__1414
11a28     80 34 56 F2 | 	cmps	local08, #128 wc
11a2c     34 00 90 3D |  if_ae	jmp	#LR__1414
11a30     1A 2F 02 F6 | 	mov	local05, local08
11a34     02 2E 66 F0 | 	shl	local05, #2
11a38     1C 4E 05 F1 | 	add	fp, #28
11a3c     A7 2E 02 F1 | 	add	local05, fp
11a40     17 33 62 FC | 	wrlong	local07, local05
11a44     01 34 06 F1 | 	add	local08, #1
11a48     00 2E 06 F6 | 	mov	local05, #0
11a4c     00 12 06 F6 | 	mov	arg01, #0
11a50     00 14 06 F6 | 	mov	arg02, #0
11a54     1C 4E 85 F1 | 	sub	fp, #28
11a58     00 AD B1 FD | 	call	#__system___basic_dir
11a5c     FD 32 02 F6 | 	mov	local07, result1
11a60     90 FF 9F FD | 	jmp	#LR__1413
11a64                 | LR__1414
11a64                 | ' for i =0 to n-1
11a64     00 2C 06 F6 | 	mov	local04, #0
11a68                 | LR__1415
11a68     1A 2D 52 F2 | 	cmps	local04, local08 wc
11a6c     D8 00 90 3D |  if_ae	jmp	#LR__1419
11a70     00 3A 06 F6 | 	mov	local11, #0
11a74                 | '   swapped=false
11a74                 | '   for j=0 to n-i-2
11a74     00 3C 06 F6 | 	mov	local12, #0
11a78     1A 4B 02 F6 | 	mov	local19, local08
11a7c     16 4B 82 F1 | 	sub	local19, local04
11a80     01 4A 86 F1 | 	sub	local19, #1
11a84                 | LR__1416
11a84     25 3D 52 F2 | 	cmps	local12, local19 wc
11a88     AC 00 90 3D |  if_ae	jmp	#LR__1418
11a8c                 | '     if filelist(j) > filelist(j+1) then
11a8c     1E 37 02 F6 | 	mov	local09, local12
11a90     02 36 66 F0 | 	shl	local09, #2
11a94     1C 4E 05 F1 | 	add	fp, #28
11a98     A7 36 02 F1 | 	add	local09, fp
11a9c     1B 13 02 FB | 	rdlong	arg01, local09
11aa0     1E 37 02 F6 | 	mov	local09, local12
11aa4     01 36 06 F1 | 	add	local09, #1
11aa8     1B 31 02 F6 | 	mov	local06, local09
11aac     02 30 66 F0 | 	shl	local06, #2
11ab0     A7 26 02 F6 | 	mov	local01, fp
11ab4     A7 30 02 F1 | 	add	local06, fp
11ab8     18 2F 02 FB | 	rdlong	local05, local06
11abc     17 15 02 F6 | 	mov	arg02, local05
11ac0     1C 4E 85 F1 | 	sub	fp, #28
11ac4     58 4E B1 FD | 	call	#__system___string_cmp
11ac8     01 FA 55 F2 | 	cmps	result1, #1 wc
11acc     60 00 90 CD |  if_b	jmp	#LR__1417
11ad0     1E 37 02 F6 | 	mov	local09, local12
11ad4     01 36 06 F1 | 	add	local09, #1
11ad8     02 36 66 F0 | 	shl	local09, #2
11adc     1C 4E 05 F1 | 	add	fp, #28
11ae0     A7 36 02 F1 | 	add	local09, fp
11ae4     1B 45 02 FB | 	rdlong	local16, local09
11ae8     1E 31 02 F6 | 	mov	local06, local12
11aec     02 30 66 F0 | 	shl	local06, #2
11af0     A7 30 02 F1 | 	add	local06, fp
11af4     18 2F 02 FB | 	rdlong	local05, local06
11af8     1E 37 02 F6 | 	mov	local09, local12
11afc     1B 31 02 F6 | 	mov	local06, local09
11b00     02 30 66 F0 | 	shl	local06, #2
11b04     A7 26 02 F6 | 	mov	local01, fp
11b08     A7 30 02 F1 | 	add	local06, fp
11b0c     18 45 62 FC | 	wrlong	local16, local06
11b10     1E 41 02 F6 | 	mov	local14, local12
11b14     01 40 06 F1 | 	add	local14, #1
11b18     02 40 66 F0 | 	shl	local14, #2
11b1c     A7 42 02 F6 | 	mov	local15, fp
11b20     A7 40 02 F1 | 	add	local14, fp
11b24     20 2F 62 FC | 	wrlong	local05, local14
11b28     01 3A 66 F6 | 	neg	local11, #1
11b2c     1C 4E 85 F1 | 	sub	fp, #28
11b30                 | LR__1417
11b30     01 3C 06 F1 | 	add	local12, #1
11b34     4C FF 9F FD | 	jmp	#LR__1416
11b38                 | LR__1418
11b38                 | ' if not swapped then exit for
11b38     1D 45 22 F6 | 	not	local16, local11
11b3c     00 44 0E F2 | 	cmp	local16, #0 wz
11b40     01 2C 06 A1 |  if_e	add	local04, #1
11b44     20 FF 9F AD |  if_e	jmp	#LR__1415
11b48                 | LR__1419
11b48                 | ' for i=0 to n-1
11b48     00 2C 06 F6 | 	mov	local04, #0
11b4c                 | LR__1420
11b4c     1A 2D 52 F2 | 	cmps	local04, local08 wc
11b50     8C 00 90 3D |  if_ae	jmp	#LR__1422
11b54                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11b54     00 12 06 F6 | 	mov	arg01, #0
11b58     40 AA B1 FD | 	call	#__system___getiolock_0602
11b5c     FD 12 02 F6 | 	mov	arg01, result1
11b60     94 4D B1 FD | 	call	#__system___lockmem
11b64     16 29 02 F6 | 	mov	local02, local04
11b68     02 28 66 F0 | 	shl	local02, #2
11b6c     1C 4E 05 F1 | 	add	fp, #28
11b70     A7 28 02 F1 | 	add	local02, fp
11b74     14 15 02 FB | 	rdlong	arg02, local02
11b78     00 12 06 F6 | 	mov	arg01, #0
11b7c     00 16 06 F6 | 	mov	arg03, #0
11b80     1C 4E 85 F1 | 	sub	fp, #28
11b84     68 5A B1 FD | 	call	#__system___basic_print_string
11b88     00 12 06 F6 | 	mov	arg01, #0
11b8c     0C AA B1 FD | 	call	#__system___getiolock_0602
11b90     FD 00 68 FC | 	wrlong	#0, result1
11b94     40 2A 06 F1 | 	add	local03, #64
11b98     15 13 02 F6 | 	mov	arg01, local03
11b9c     00 30 B1 FD | 	call	#_hg010b_spin2_setcursorx
11ba0     00 2B 56 F2 | 	cmps	local03, #256 wc
11ba4     30 00 90 CD |  if_b	jmp	#LR__1421
11ba8     00 2A 06 F6 | 	mov	local03, #0
11bac     00 12 06 F6 | 	mov	arg01, #0
11bb0     E8 A9 B1 FD | 	call	#__system___getiolock_0602
11bb4     FD 12 02 F6 | 	mov	arg01, result1
11bb8     3C 4D B1 FD | 	call	#__system___lockmem
11bbc     00 12 06 F6 | 	mov	arg01, #0
11bc0     0A 14 06 F6 | 	mov	arg02, #10
11bc4     00 16 06 F6 | 	mov	arg03, #0
11bc8     CC 59 B1 FD | 	call	#__system___basic_print_char
11bcc     00 12 06 F6 | 	mov	arg01, #0
11bd0     C8 A9 B1 FD | 	call	#__system___getiolock_0602
11bd4     FD 00 68 FC | 	wrlong	#0, result1
11bd8                 | LR__1421
11bd8     01 2C 06 F1 | 	add	local04, #1
11bdc     6C FF 9F FD | 	jmp	#LR__1420
11be0                 | LR__1422
11be0                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11be0     80 34 56 F2 | 	cmps	local08, #128 wc
11be4     40 00 90 CD |  if_b	jmp	#LR__1423
11be8     00 12 06 F6 | 	mov	arg01, #0
11bec     AC A9 B1 FD | 	call	#__system___getiolock_0602
11bf0     FD 12 02 F6 | 	mov	arg01, result1
11bf4     00 4D B1 FD | 	call	#__system___lockmem
11bf8     B6 01 00 FF 
11bfc     98 15 06 F6 | 	mov	arg02, ##@LR__5895
11c00     00 12 06 F6 | 	mov	arg01, #0
11c04     00 16 06 F6 | 	mov	arg03, #0
11c08     E4 59 B1 FD | 	call	#__system___basic_print_string
11c0c     00 12 06 F6 | 	mov	arg01, #0
11c10     0A 14 06 F6 | 	mov	arg02, #10
11c14     00 16 06 F6 | 	mov	arg03, #0
11c18     7C 59 B1 FD | 	call	#__system___basic_print_char
11c1c     00 12 06 F6 | 	mov	arg01, #0
11c20     78 A9 B1 FD | 	call	#__system___getiolock_0602
11c24     FD 00 68 FC | 	wrlong	#0, result1
11c28                 | LR__1423
11c28                 | ' print
11c28     00 12 06 F6 | 	mov	arg01, #0
11c2c     6C A9 B1 FD | 	call	#__system___getiolock_0602
11c30     FD 12 02 F6 | 	mov	arg01, result1
11c34     C0 4C B1 FD | 	call	#__system___lockmem
11c38     00 12 06 F6 | 	mov	arg01, #0
11c3c     0A 14 06 F6 | 	mov	arg02, #10
11c40     00 16 06 F6 | 	mov	arg03, #0
11c44     50 59 B1 FD | 	call	#__system___basic_print_char
11c48     00 12 06 F6 | 	mov	arg01, #0
11c4c     4C A9 B1 FD | 	call	#__system___getiolock_0602
11c50     FD 00 68 FC | 	wrlong	#0, result1
11c54     A7 F0 03 F6 | 	mov	ptra, fp
11c58     B2 00 A0 FD | 	call	#popregs_
11c5c                 | _do_dir_ret
11c5c     2D 00 64 FD | 	ret
11c60                 | 
11c60                 | ' 
11c60                 | ' '-------------------- dpeek
11c60                 | ' 
11c60                 | ' sub do_dpeek
11c60                 | _do_dpeek
11c60     00 4A 05 F6 | 	mov	COUNT_, #0
11c64     A8 00 A0 FD | 	call	#pushregs_
11c68     14 F0 07 F1 | 	add	ptra, #20
11c6c     F8 B8 BF FD | 	call	#_pop
11c70     A7 FA 61 FC | 	wrlong	result1, fp
11c74     04 4E 05 F1 | 	add	fp, #4
11c78     A7 FC 61 FC | 	wrlong	result2, fp
11c7c     04 4E 05 F1 | 	add	fp, #4
11c80     A7 FE 61 FC | 	wrlong	result3, fp
11c84     08 4E 85 F1 | 	sub	fp, #8
11c88     A7 12 02 F6 | 	mov	arg01, fp
11c8c     BC BA BF FD | 	call	#_converttoint
11c90     0C 4E 05 F1 | 	add	fp, #12
11c94     A7 FA 61 FC | 	wrlong	result1, fp
11c98                 | ' 
11c98                 | ' t1=pop()
11c98                 | ' a=converttoint(t1)
11c98                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11c98     0C 4E 85 F1 | 	sub	fp, #12
11c9c     00 04 00 FF 
11ca0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11ca4     1C 00 90 3D |  if_ae	jmp	#LR__1430
11ca8     0C 4E 05 F1 | 	add	fp, #12
11cac     A7 12 02 FB | 	rdlong	arg01, fp
11cb0     09 FB E1 FA | 	rdword	result1, arg01
11cb4     04 4E 05 F1 | 	add	fp, #4
11cb8     A7 FA 61 FC | 	wrlong	result1, fp
11cbc     10 4E 85 F1 | 	sub	fp, #16
11cc0     1C 00 90 FD | 	jmp	#LR__1431
11cc4                 | LR__1430
11cc4     0C 4E 05 F1 | 	add	fp, #12
11cc8     A7 12 02 FB | 	rdlong	arg01, fp
11ccc     0C 4E 85 F1 | 	sub	fp, #12
11cd0     5C 15 B1 FD | 	call	#_psdpeek
11cd4     10 4E 05 F1 | 	add	fp, #16
11cd8     A7 FA 61 FC | 	wrlong	result1, fp
11cdc     10 4E 85 F1 | 	sub	fp, #16
11ce0                 | LR__1431
11ce0     08 4E 05 F1 | 	add	fp, #8
11ce4     A7 3A 68 FC | 	wrlong	#29, fp
11ce8     08 4E 05 F1 | 	add	fp, #8
11cec     A7 12 02 FB | 	rdlong	arg01, fp
11cf0     10 4E 85 F1 | 	sub	fp, #16
11cf4     A7 12 62 FC | 	wrlong	arg01, fp
11cf8     A7 12 02 F6 | 	mov	arg01, fp
11cfc     00 B9 BF FD | 	call	#_push
11d00     A7 F0 03 F6 | 	mov	ptra, fp
11d04     B2 00 A0 FD | 	call	#popregs_
11d08                 | _do_dpeek_ret
11d08     2D 00 64 FD | 	ret
11d0c                 | 
11d0c                 | ' 
11d0c                 | ' '-------------------- dpoke
11d0c                 | ' 
11d0c                 | ' sub do_dpoke
11d0c                 | _do_dpoke
11d0c     01 4A 05 F6 | 	mov	COUNT_, #1
11d10     A8 00 A0 FD | 	call	#pushregs_
11d14     20 F0 07 F1 | 	add	ptra, #32
11d18     4C B8 BF FD | 	call	#_pop
11d1c     FD 14 02 F6 | 	mov	arg02, result1
11d20     FE 12 02 F6 | 	mov	arg01, result2
11d24     FF 26 02 F6 | 	mov	local01, result3
11d28     A7 14 62 FC | 	wrlong	arg02, fp
11d2c     04 4E 05 F1 | 	add	fp, #4
11d30     A7 12 62 FC | 	wrlong	arg01, fp
11d34     04 4E 05 F1 | 	add	fp, #4
11d38     A7 26 62 FC | 	wrlong	local01, fp
11d3c     08 4E 85 F1 | 	sub	fp, #8
11d40     24 B8 BF FD | 	call	#_pop
11d44     FF 26 02 F6 | 	mov	local01, result3
11d48     0C 4E 05 F1 | 	add	fp, #12
11d4c     A7 FA 61 FC | 	wrlong	result1, fp
11d50     04 4E 05 F1 | 	add	fp, #4
11d54     A7 FC 61 FC | 	wrlong	result2, fp
11d58     04 4E 05 F1 | 	add	fp, #4
11d5c     A7 26 62 FC | 	wrlong	local01, fp
11d60     08 4E 85 F1 | 	sub	fp, #8
11d64     A7 12 02 F6 | 	mov	arg01, fp
11d68     0C 4E 85 F1 | 	sub	fp, #12
11d6c     DC B9 BF FD | 	call	#_converttoint
11d70     18 4E 05 F1 | 	add	fp, #24
11d74     A7 FA 61 FC | 	wrlong	result1, fp
11d78     18 4E 85 F1 | 	sub	fp, #24
11d7c     A7 12 02 F6 | 	mov	arg01, fp
11d80     C8 B9 BF FD | 	call	#_converttoint
11d84     1C 4E 05 F1 | 	add	fp, #28
11d88     A7 FA 61 FC | 	wrlong	result1, fp
11d8c                 | ' 
11d8c                 | ' t1=pop() 'value
11d8c                 | ' t2=pop() 
11d8c                 | ' a=converttoint(t2) : v=converttoint(t1)
11d8c                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11d8c     04 4E 85 F1 | 	sub	fp, #4
11d90     A7 26 02 FB | 	rdlong	local01, fp
11d94     18 4E 85 F1 | 	sub	fp, #24
11d98     00 04 00 FF 
11d9c     00 26 16 F2 | 	cmp	local01, ##524288 wc
11da0     1C 00 90 3D |  if_ae	jmp	#LR__1440
11da4     18 4E 05 F1 | 	add	fp, #24
11da8     A7 12 02 FB | 	rdlong	arg01, fp
11dac     04 4E 05 F1 | 	add	fp, #4
11db0     A7 14 02 FB | 	rdlong	arg02, fp
11db4     1C 4E 85 F1 | 	sub	fp, #28
11db8     09 15 52 FC | 	wrword	arg02, arg01
11dbc     18 00 90 FD | 	jmp	#LR__1441
11dc0                 | LR__1440
11dc0     18 4E 05 F1 | 	add	fp, #24
11dc4     A7 12 02 FB | 	rdlong	arg01, fp
11dc8     04 4E 05 F1 | 	add	fp, #4
11dcc     A7 14 02 FB | 	rdlong	arg02, fp
11dd0     1C 4E 85 F1 | 	sub	fp, #28
11dd4     18 13 B1 FD | 	call	#_psdpoke
11dd8                 | LR__1441
11dd8     A7 F0 03 F6 | 	mov	ptra, fp
11ddc     B2 00 A0 FD | 	call	#popregs_
11de0                 | _do_dpoke_ret
11de0     2D 00 64 FD | 	ret
11de4                 | 
11de4                 | ' '-------------------- draw
11de4                 | ' 
11de4                 | ' sub do_draw
11de4                 | _do_draw
11de4     00 4A 05 F6 | 	mov	COUNT_, #0
11de8     A8 00 A0 FD | 	call	#pushregs_
11dec     20 F0 07 F1 | 	add	ptra, #32
11df0     74 B7 BF FD | 	call	#_pop
11df4     FD 1A 02 F6 | 	mov	arg05, result1
11df8     FE 18 02 F6 | 	mov	arg04, result2
11dfc     FF 16 02 F6 | 	mov	arg03, result3
11e00     0C 4E 05 F1 | 	add	fp, #12
11e04     A7 1A 62 FC | 	wrlong	arg05, fp
11e08     04 4E 05 F1 | 	add	fp, #4
11e0c     A7 18 62 FC | 	wrlong	arg04, fp
11e10     04 4E 05 F1 | 	add	fp, #4
11e14     A7 16 62 FC | 	wrlong	arg03, fp
11e18     14 4E 85 F1 | 	sub	fp, #20
11e1c     48 B7 BF FD | 	call	#_pop
11e20     FF 1A 02 F6 | 	mov	arg05, result3
11e24     A7 FA 61 FC | 	wrlong	result1, fp
11e28     04 4E 05 F1 | 	add	fp, #4
11e2c     A7 FC 61 FC | 	wrlong	result2, fp
11e30     04 4E 05 F1 | 	add	fp, #4
11e34     A7 1A 62 FC | 	wrlong	arg05, fp
11e38     08 4E 85 F1 | 	sub	fp, #8
11e3c     A7 12 02 F6 | 	mov	arg01, fp
11e40     08 B9 BF FD | 	call	#_converttoint
11e44     18 4E 05 F1 | 	add	fp, #24
11e48     A7 FA 61 FC | 	wrlong	result1, fp
11e4c     0C 4E 85 F1 | 	sub	fp, #12
11e50     A7 12 02 F6 | 	mov	arg01, fp
11e54     0C 4E 85 F1 | 	sub	fp, #12
11e58     F0 B8 BF FD | 	call	#_converttoint
11e5c     1C 4E 05 F1 | 	add	fp, #28
11e60     A7 FA 61 FC | 	wrlong	result1, fp
11e64     37 00 00 FF 
11e68     2C E4 05 F1 | 	add	objptr, ##28204
11e6c     F2 12 02 FB | 	rdlong	arg01, objptr
11e70     04 E4 05 F1 | 	add	objptr, #4
11e74     F2 14 02 FB | 	rdlong	arg02, objptr
11e78     04 4E 85 F1 | 	sub	fp, #4
11e7c     A7 16 02 FB | 	rdlong	arg03, fp
11e80     FD 18 02 F6 | 	mov	arg04, result1
11e84     18 4E 85 F1 | 	sub	fp, #24
11e88     08 E4 85 F1 | 	sub	objptr, #8
11e8c     F2 1A 02 FB | 	rdlong	arg05, objptr
11e90     37 00 00 FF 
11e94     28 E4 85 F1 | 	sub	objptr, ##28200
11e98     B4 23 B1 FD | 	call	#_hg010b_spin2_draw
11e9c     18 4E 05 F1 | 	add	fp, #24
11ea0     A7 1A 02 FB | 	rdlong	arg05, fp
11ea4     37 00 00 FF 
11ea8     2C E4 05 F1 | 	add	objptr, ##28204
11eac     F2 1A 62 FC | 	wrlong	arg05, objptr
11eb0     04 4E 05 F1 | 	add	fp, #4
11eb4     A7 1A 02 FB | 	rdlong	arg05, fp
11eb8     1C 4E 85 F1 | 	sub	fp, #28
11ebc     04 E4 05 F1 | 	add	objptr, #4
11ec0     F2 1A 62 FC | 	wrlong	arg05, objptr
11ec4     37 00 00 FF 
11ec8     30 E4 85 F1 | 	sub	objptr, ##28208
11ecc     A7 F0 03 F6 | 	mov	ptra, fp
11ed0     B2 00 A0 FD | 	call	#popregs_
11ed4                 | _do_draw_ret
11ed4     2D 00 64 FD | 	ret
11ed8                 | 
11ed8                 | ' 
11ed8                 | ' '-------------------- else
11ed8                 | ' 
11ed8                 | ' sub do_else
11ed8                 | _do_else
11ed8     4A 00 00 FF 
11edc     7C E4 05 F1 | 	add	objptr, ##38012
11ee0     F2 00 02 FB | 	rdlong	_var01, objptr
11ee4     01 00 86 F1 | 	sub	_var01, #1
11ee8     04 E4 05 F1 | 	add	objptr, #4
11eec     F2 00 62 FC | 	wrlong	_var01, objptr
11ef0     4A 00 00 FF 
11ef4     80 E4 85 F1 | 	sub	objptr, ##38016
11ef8                 | _do_else_ret
11ef8     2D 00 64 FD | 	ret
11efc                 | 
11efc                 | ' 
11efc                 | ' '-------------------- end
11efc                 | ' 
11efc                 | ' sub do_end
11efc                 | _do_end
11efc     4A 00 00 FF 
11f00     7C E4 05 F1 | 	add	objptr, ##38012
11f04     F2 00 02 FB | 	rdlong	_var01, objptr
11f08     01 00 86 F1 | 	sub	_var01, #1
11f0c     04 E4 05 F1 | 	add	objptr, #4
11f10     F2 00 62 FC | 	wrlong	_var01, objptr
11f14     06 00 00 FF 
11f18     38 E4 05 F1 | 	add	objptr, ##3128
11f1c     FF FF BF FF 
11f20     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11f24     50 00 00 FF 
11f28     B8 E4 85 F1 | 	sub	objptr, ##41144
11f2c                 | _do_end_ret
11f2c     2D 00 64 FD | 	ret
11f30                 | 
11f30                 | ' 
11f30                 | ' '-------------------- enter
11f30                 | ' 
11f30                 | ' sub do_enter
11f30                 | _do_enter
11f30     02 00 00 FF 
11f34     D2 12 06 F6 | 	mov	arg01, ##1234
11f38     A0 2E B0 FD | 	call	#_do_load
11f3c                 | _do_enter_ret
11f3c     2D 00 64 FD | 	ret
11f40                 | 
11f40                 | ' 
11f40                 | ' '------------------- error processing
11f40                 | ' 
11f40                 | ' sub do_error
11f40                 | _do_error
11f40     01 4A 05 F6 | 	mov	COUNT_, #1
11f44     A8 00 A0 FD | 	call	#pushregs_
11f48     4A 00 00 FF 
11f4c     80 E4 05 F1 | 	add	objptr, ##38016
11f50     F2 18 02 FB | 	rdlong	arg04, objptr
11f54     0C 17 02 F6 | 	mov	arg03, arg04
11f58     01 16 66 F0 | 	shl	arg03, #1
11f5c     0C 17 02 F1 | 	add	arg03, arg04
11f60     02 16 66 F0 | 	shl	arg03, #2
11f64     03 00 00 FF 
11f68     04 E4 85 F1 | 	sub	objptr, ##1540
11f6c     F2 16 02 F1 | 	add	arg03, objptr
11f70     0B 27 02 FB | 	rdlong	local01, arg03
11f74                 | ' r=compiledline(lineptr_e).result.uresult
11f74                 | ' print "Error ";r;": ";errors$(r)
11f74     00 12 06 F6 | 	mov	arg01, #0
11f78     47 00 00 FF 
11f7c     7C E4 85 F1 | 	sub	objptr, ##36476
11f80     18 A6 B1 FD | 	call	#__system___getiolock_0602
11f84     FD 12 02 F6 | 	mov	arg01, result1
11f88     6C 49 B1 FD | 	call	#__system___lockmem
11f8c     B6 01 00 FF 
11f90     CA 15 06 F6 | 	mov	arg02, ##@LR__5896
11f94     00 12 06 F6 | 	mov	arg01, #0
11f98     00 16 06 F6 | 	mov	arg03, #0
11f9c     50 56 B1 FD | 	call	#__system___basic_print_string
11fa0     00 12 06 F6 | 	mov	arg01, #0
11fa4     13 15 02 F6 | 	mov	arg02, local01
11fa8     00 16 06 F6 | 	mov	arg03, #0
11fac     0A 18 06 F6 | 	mov	arg04, #10
11fb0     C0 56 B1 FD | 	call	#__system___basic_print_unsigned
11fb4     B6 01 00 FF 
11fb8     D1 15 06 F6 | 	mov	arg02, ##@LR__5897
11fbc     00 12 06 F6 | 	mov	arg01, #0
11fc0     00 16 06 F6 | 	mov	arg03, #0
11fc4     28 56 B1 FD | 	call	#__system___basic_print_string
11fc8     02 26 66 F0 | 	shl	local01, #2
11fcc     45 00 00 FF 
11fd0     7C E4 05 F1 | 	add	objptr, ##35452
11fd4     F2 26 02 F1 | 	add	local01, objptr
11fd8     13 15 02 FB | 	rdlong	arg02, local01
11fdc     00 12 06 F6 | 	mov	arg01, #0
11fe0     00 16 06 F6 | 	mov	arg03, #0
11fe4     45 00 00 FF 
11fe8     7C E4 85 F1 | 	sub	objptr, ##35452
11fec     00 56 B1 FD | 	call	#__system___basic_print_string
11ff0     00 12 06 F6 | 	mov	arg01, #0
11ff4     0A 14 06 F6 | 	mov	arg02, #10
11ff8     00 16 06 F6 | 	mov	arg03, #0
11ffc     98 55 B1 FD | 	call	#__system___basic_print_char
12000     00 12 06 F6 | 	mov	arg01, #0
12004     94 A5 B1 FD | 	call	#__system___getiolock_0602
12008     FD 00 68 FC | 	wrlong	#0, result1
1200c     A7 F0 03 F6 | 	mov	ptra, fp
12010     B2 00 A0 FD | 	call	#popregs_
12014                 | _do_error_ret
12014     2D 00 64 FD | 	ret
12018                 | 
12018                 | ' 
12018                 | ' '-------------------- fcircle
12018                 | ' 
12018                 | ' sub do_fcircle
12018                 | _do_fcircle
12018     02 4A 05 F6 | 	mov	COUNT_, #2
1201c     A8 00 A0 FD | 	call	#pushregs_
12020     24 F0 07 F1 | 	add	ptra, #36
12024     40 B5 BF FD | 	call	#_pop
12028     FD 14 02 F6 | 	mov	arg02, result1
1202c     FE 18 02 F6 | 	mov	arg04, result2
12030     FF 16 02 F6 | 	mov	arg03, result3
12034     18 4E 05 F1 | 	add	fp, #24
12038     A7 14 62 FC | 	wrlong	arg02, fp
1203c     04 4E 05 F1 | 	add	fp, #4
12040     A7 18 62 FC | 	wrlong	arg04, fp
12044     04 4E 05 F1 | 	add	fp, #4
12048     A7 16 62 FC | 	wrlong	arg03, fp
1204c     20 4E 85 F1 | 	sub	fp, #32
12050     14 B5 BF FD | 	call	#_pop
12054     FD 14 02 F6 | 	mov	arg02, result1
12058     FE 18 02 F6 | 	mov	arg04, result2
1205c     FF 16 02 F6 | 	mov	arg03, result3
12060     0C 4E 05 F1 | 	add	fp, #12
12064     A7 14 62 FC | 	wrlong	arg02, fp
12068     04 4E 05 F1 | 	add	fp, #4
1206c     A7 18 62 FC | 	wrlong	arg04, fp
12070     04 4E 05 F1 | 	add	fp, #4
12074     A7 16 62 FC | 	wrlong	arg03, fp
12078     14 4E 85 F1 | 	sub	fp, #20
1207c     E8 B4 BF FD | 	call	#_pop
12080     FF 14 02 F6 | 	mov	arg02, result3
12084     A7 FA 61 FC | 	wrlong	result1, fp
12088     04 4E 05 F1 | 	add	fp, #4
1208c     A7 FC 61 FC | 	wrlong	result2, fp
12090     04 4E 05 F1 | 	add	fp, #4
12094     A7 14 62 FC | 	wrlong	arg02, fp
12098     08 4E 85 F1 | 	sub	fp, #8
1209c     A7 12 02 F6 | 	mov	arg01, fp
120a0     A8 B6 BF FD | 	call	#_converttoint
120a4     FD 26 02 F6 | 	mov	local01, result1
120a8     0C 4E 05 F1 | 	add	fp, #12
120ac     A7 12 02 F6 | 	mov	arg01, fp
120b0     0C 4E 85 F1 | 	sub	fp, #12
120b4     94 B6 BF FD | 	call	#_converttoint
120b8     FD 28 02 F6 | 	mov	local02, result1
120bc     18 4E 05 F1 | 	add	fp, #24
120c0     A7 12 02 F6 | 	mov	arg01, fp
120c4     18 4E 85 F1 | 	sub	fp, #24
120c8     80 B6 BF FD | 	call	#_converttoint
120cc     FD 16 02 F6 | 	mov	arg03, result1
120d0     37 00 00 FF 
120d4     28 E4 05 F1 | 	add	objptr, ##28200
120d8     F2 18 02 FB | 	rdlong	arg04, objptr
120dc     37 00 00 FF 
120e0     28 E4 85 F1 | 	sub	objptr, ##28200
120e4     13 13 02 F6 | 	mov	arg01, local01
120e8     14 15 02 F6 | 	mov	arg02, local02
120ec     E4 25 B1 FD | 	call	#_hg010b_spin2_fcircle
120f0     A7 F0 03 F6 | 	mov	ptra, fp
120f4     B2 00 A0 FD | 	call	#popregs_
120f8                 | _do_fcircle_ret
120f8     2D 00 64 FD | 	ret
120fc                 | 
120fc                 | ' 
120fc                 | ' '-------------------- fill
120fc                 | ' 
120fc                 | ' sub do_fill
120fc                 | _do_fill
120fc     03 4A 05 F6 | 	mov	COUNT_, #3
12100     A8 00 A0 FD | 	call	#pushregs_
12104     30 F0 07 F1 | 	add	ptra, #48
12108     5C B4 BF FD | 	call	#_pop
1210c     FD 16 02 F6 | 	mov	arg03, result1
12110     FE 14 02 F6 | 	mov	arg02, result2
12114     FF 18 02 F6 | 	mov	arg04, result3
12118     24 4E 05 F1 | 	add	fp, #36
1211c     A7 16 62 FC | 	wrlong	arg03, fp
12120     04 4E 05 F1 | 	add	fp, #4
12124     A7 14 62 FC | 	wrlong	arg02, fp
12128     04 4E 05 F1 | 	add	fp, #4
1212c     A7 18 62 FC | 	wrlong	arg04, fp
12130     2C 4E 85 F1 | 	sub	fp, #44
12134     30 B4 BF FD | 	call	#_pop
12138     FD 16 02 F6 | 	mov	arg03, result1
1213c     FE 14 02 F6 | 	mov	arg02, result2
12140     FF 18 02 F6 | 	mov	arg04, result3
12144     18 4E 05 F1 | 	add	fp, #24
12148     A7 16 62 FC | 	wrlong	arg03, fp
1214c     04 4E 05 F1 | 	add	fp, #4
12150     A7 14 62 FC | 	wrlong	arg02, fp
12154     04 4E 05 F1 | 	add	fp, #4
12158     A7 18 62 FC | 	wrlong	arg04, fp
1215c     20 4E 85 F1 | 	sub	fp, #32
12160     04 B4 BF FD | 	call	#_pop
12164     FD 16 02 F6 | 	mov	arg03, result1
12168     FE 14 02 F6 | 	mov	arg02, result2
1216c     FF 18 02 F6 | 	mov	arg04, result3
12170     0C 4E 05 F1 | 	add	fp, #12
12174     A7 16 62 FC | 	wrlong	arg03, fp
12178     04 4E 05 F1 | 	add	fp, #4
1217c     A7 14 62 FC | 	wrlong	arg02, fp
12180     04 4E 05 F1 | 	add	fp, #4
12184     A7 18 62 FC | 	wrlong	arg04, fp
12188     14 4E 85 F1 | 	sub	fp, #20
1218c     D8 B3 BF FD | 	call	#_pop
12190     FF 16 02 F6 | 	mov	arg03, result3
12194     A7 FA 61 FC | 	wrlong	result1, fp
12198     04 4E 05 F1 | 	add	fp, #4
1219c     A7 FC 61 FC | 	wrlong	result2, fp
121a0     04 4E 05 F1 | 	add	fp, #4
121a4     A7 16 62 FC | 	wrlong	arg03, fp
121a8     08 4E 85 F1 | 	sub	fp, #8
121ac     A7 12 02 F6 | 	mov	arg01, fp
121b0     98 B5 BF FD | 	call	#_converttoint
121b4     FD 26 02 F6 | 	mov	local01, result1
121b8     0C 4E 05 F1 | 	add	fp, #12
121bc     A7 12 02 F6 | 	mov	arg01, fp
121c0     0C 4E 85 F1 | 	sub	fp, #12
121c4     84 B5 BF FD | 	call	#_converttoint
121c8     FD 28 02 F6 | 	mov	local02, result1
121cc     18 4E 05 F1 | 	add	fp, #24
121d0     A7 12 02 F6 | 	mov	arg01, fp
121d4     18 4E 85 F1 | 	sub	fp, #24
121d8     70 B5 BF FD | 	call	#_converttoint
121dc     FD 2A 02 F6 | 	mov	local03, result1
121e0     24 4E 05 F1 | 	add	fp, #36
121e4     A7 12 02 F6 | 	mov	arg01, fp
121e8     24 4E 85 F1 | 	sub	fp, #36
121ec     5C B5 BF FD | 	call	#_converttoint
121f0     FD 18 02 F6 | 	mov	arg04, result1
121f4     13 13 02 F6 | 	mov	arg01, local01
121f8     14 15 02 F6 | 	mov	arg02, local02
121fc     15 17 02 F6 | 	mov	arg03, local03
12200     3C 22 B1 FD | 	call	#_hg010b_spin2_fill
12204     A7 F0 03 F6 | 	mov	ptra, fp
12208     B2 00 A0 FD | 	call	#popregs_
1220c                 | _do_fill_ret
1220c     2D 00 64 FD | 	ret
12210                 | 
12210                 | ' 
12210                 | ' '-------------------- font
12210                 | ' 
12210                 | ' sub do_font
12210                 | _do_font
12210     03 4A 05 F6 | 	mov	COUNT_, #3
12214     A8 00 A0 FD | 	call	#pushregs_
12218     4C B3 BF FD | 	call	#_pop
1221c     FD 26 02 F6 | 	mov	local01, result1
12220     FE 28 02 F6 | 	mov	local02, result2
12224     FF 2A 02 F6 | 	mov	local03, result3
12228                 | ' 
12228                 | ' t1=pop() 
12228                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12228     1E 2A 0E F2 | 	cmp	local03, #30 wz
1222c     10 00 90 5D |  if_ne	jmp	#LR__1450
12230     13 13 02 F6 | 	mov	arg01, local01
12234     00 14 06 F6 | 	mov	arg02, #0
12238     00 7A B1 FD | 	call	#__system___float_tointeger
1223c     FD 26 02 F6 | 	mov	local01, result1
12240                 | LR__1450
12240                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12240     1F 2A 0E F2 | 	cmp	local03, #31 wz
12244     18 00 90 5D |  if_ne	jmp	#LR__1451
12248     13 13 02 F6 | 	mov	arg01, local01
1224c     30 7D B1 FD | 	call	#__system____builtin_atof
12250     FD 12 02 F6 | 	mov	arg01, result1
12254     00 14 06 F6 | 	mov	arg02, #0
12258     E0 79 B1 FD | 	call	#__system___float_tointeger
1225c     FD 26 02 F6 | 	mov	local01, result1
12260                 | LR__1451
12260     37 00 00 FF 
12264     40 E4 05 F1 | 	add	objptr, ##28224
12268     F2 26 62 FC | 	wrlong	local01, objptr
1226c     37 00 00 FF 
12270     40 E4 85 F1 | 	sub	objptr, ##28224
12274     02 26 66 F0 | 	shl	local01, #2
12278     13 13 02 F6 | 	mov	arg01, local01
1227c     A4 28 B1 FD | 	call	#_hg010b_spin2_setfontfamily
12280     A7 F0 03 F6 | 	mov	ptra, fp
12284     B2 00 A0 FD | 	call	#popregs_
12288                 | _do_font_ret
12288     2D 00 64 FD | 	ret
1228c                 | 
1228c                 | ' 
1228c                 | ' '-------------------- for
1228c                 | ' 
1228c                 | ' sub do_for()
1228c                 | _do_for
1228c     01 4A 05 F6 | 	mov	COUNT_, #1
12290     A8 00 A0 FD | 	call	#pushregs_
12294     10 F0 07 F1 | 	add	ptra, #16
12298     50 00 00 FF 
1229c     30 E5 05 F1 | 	add	objptr, ##41264
122a0     F2 12 02 FB | 	rdlong	arg01, objptr
122a4     01 12 06 F1 | 	add	arg01, #1
122a8     F2 12 62 FC | 	wrlong	arg01, objptr
122ac     50 00 00 FF 
122b0     30 E5 85 F1 | 	sub	objptr, ##41264
122b4     B0 B2 BF FD | 	call	#_pop
122b8     A7 FA 61 FC | 	wrlong	result1, fp
122bc     04 4E 05 F1 | 	add	fp, #4
122c0     A7 FC 61 FC | 	wrlong	result2, fp
122c4     04 4E 05 F1 | 	add	fp, #4
122c8     A7 FE 61 FC | 	wrlong	result3, fp
122cc     08 4E 85 F1 | 	sub	fp, #8
122d0     50 00 00 FF 
122d4     30 E5 05 F1 | 	add	objptr, ##41264
122d8     F2 12 02 FB | 	rdlong	arg01, objptr
122dc     09 27 02 F6 | 	mov	local01, arg01
122e0     02 26 66 F0 | 	shl	local01, #2
122e4     09 27 02 F1 | 	add	local01, arg01
122e8     02 26 66 F0 | 	shl	local01, #2
122ec     06 00 00 FF 
122f0     98 E4 85 F1 | 	sub	objptr, ##3224
122f4     F2 26 02 F1 | 	add	local01, objptr
122f8     A7 12 02 FB | 	rdlong	arg01, fp
122fc     08 26 06 F1 | 	add	local01, #8
12300     13 13 62 FC | 	wrlong	arg01, local01
12304     4A 00 00 FF 
12308     98 E4 85 F1 | 	sub	objptr, ##38040
1230c     58 B2 BF FD | 	call	#_pop
12310     A7 FA 61 FC | 	wrlong	result1, fp
12314     04 4E 05 F1 | 	add	fp, #4
12318     A7 FC 61 FC | 	wrlong	result2, fp
1231c     04 4E 05 F1 | 	add	fp, #4
12320     A7 FE 61 FC | 	wrlong	result3, fp
12324     08 4E 85 F1 | 	sub	fp, #8
12328     50 00 00 FF 
1232c     30 E5 05 F1 | 	add	objptr, ##41264
12330     F2 12 02 FB | 	rdlong	arg01, objptr
12334     09 27 02 F6 | 	mov	local01, arg01
12338     02 26 66 F0 | 	shl	local01, #2
1233c     09 27 02 F1 | 	add	local01, arg01
12340     02 26 66 F0 | 	shl	local01, #2
12344     06 00 00 FF 
12348     98 E4 85 F1 | 	sub	objptr, ##3224
1234c     F2 26 02 F1 | 	add	local01, objptr
12350     A7 12 02 F6 | 	mov	arg01, fp
12354     4A 00 00 FF 
12358     98 E4 85 F1 | 	sub	objptr, ##38040
1235c     EC B3 BF FD | 	call	#_converttoint
12360     FD 12 02 F6 | 	mov	arg01, result1
12364     0C 26 06 F1 | 	add	local01, #12
12368     13 13 62 FC | 	wrlong	arg01, local01
1236c     F8 B1 BF FD | 	call	#_pop
12370     A7 FA 61 FC | 	wrlong	result1, fp
12374     04 4E 05 F1 | 	add	fp, #4
12378     A7 FC 61 FC | 	wrlong	result2, fp
1237c     04 4E 05 F1 | 	add	fp, #4
12380     A7 FE 61 FC | 	wrlong	result3, fp
12384     08 4E 85 F1 | 	sub	fp, #8
12388     50 00 00 FF 
1238c     30 E5 05 F1 | 	add	objptr, ##41264
12390     F2 12 02 FB | 	rdlong	arg01, objptr
12394     09 27 02 F6 | 	mov	local01, arg01
12398     02 26 66 F0 | 	shl	local01, #2
1239c     09 27 02 F1 | 	add	local01, arg01
123a0     02 26 66 F0 | 	shl	local01, #2
123a4     06 00 00 FF 
123a8     98 E4 85 F1 | 	sub	objptr, ##3224
123ac     F2 26 02 F1 | 	add	local01, objptr
123b0     A7 12 02 F6 | 	mov	arg01, fp
123b4     4A 00 00 FF 
123b8     98 E4 85 F1 | 	sub	objptr, ##38040
123bc     8C B3 BF FD | 	call	#_converttoint
123c0     10 26 06 F1 | 	add	local01, #16
123c4     13 FB 61 FC | 	wrlong	result1, local01
123c8                 | ' fortop+=1
123c8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
123c8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
123c8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
123c8                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
123c8     4A 00 00 FF 
123cc     80 E4 05 F1 | 	add	objptr, ##38016
123d0     F2 12 02 FB | 	rdlong	arg01, objptr
123d4     09 27 02 F6 | 	mov	local01, arg01
123d8     01 26 66 F0 | 	shl	local01, #1
123dc     09 27 02 F1 | 	add	local01, arg01
123e0     02 26 66 F0 | 	shl	local01, #2
123e4     03 00 00 FF 
123e8     04 E4 85 F1 | 	sub	objptr, ##1540
123ec     F2 26 02 F1 | 	add	local01, objptr
123f0     08 26 06 F1 | 	add	local01, #8
123f4     13 27 02 FB | 	rdlong	local01, local01
123f8     FE 27 0E F2 | 	cmp	local01, #510 wz
123fc     47 00 00 FF 
12400     7C E4 85 F1 | 	sub	objptr, ##36476
12404     70 00 90 5D |  if_ne	jmp	#LR__1460
12408     50 00 00 FF 
1240c     30 E5 05 F1 | 	add	objptr, ##41264
12410     F2 12 02 FB | 	rdlong	arg01, objptr
12414     09 27 02 F6 | 	mov	local01, arg01
12418     02 26 66 F0 | 	shl	local01, #2
1241c     09 27 02 F1 | 	add	local01, arg01
12420     02 26 66 F0 | 	shl	local01, #2
12424     06 00 00 FF 
12428     98 E4 85 F1 | 	sub	objptr, ##3224
1242c     F2 26 02 F1 | 	add	local01, objptr
12430     06 00 00 FF 
12434     20 E4 05 F1 | 	add	objptr, ##3104
12438     F2 12 02 FB | 	rdlong	arg01, objptr
1243c     13 13 62 FC | 	wrlong	arg01, local01
12440     78 E4 05 F1 | 	add	objptr, #120
12444     F2 12 02 FB | 	rdlong	arg01, objptr
12448     09 27 02 F6 | 	mov	local01, arg01
1244c     02 26 66 F0 | 	shl	local01, #2
12450     09 27 02 F1 | 	add	local01, arg01
12454     02 26 66 F0 | 	shl	local01, #2
12458     06 00 00 FF 
1245c     98 E4 85 F1 | 	sub	objptr, ##3224
12460     F2 26 02 F1 | 	add	local01, objptr
12464     04 26 06 F1 | 	add	local01, #4
12468     13 01 68 FC | 	wrlong	#0, local01
1246c     4A 00 00 FF 
12470     98 E4 85 F1 | 	sub	objptr, ##38040
12474     78 00 90 FD | 	jmp	#LR__1461
12478                 | LR__1460
12478     50 00 00 FF 
1247c     30 E5 05 F1 | 	add	objptr, ##41264
12480     F2 12 02 FB | 	rdlong	arg01, objptr
12484     09 27 02 F6 | 	mov	local01, arg01
12488     02 26 66 F0 | 	shl	local01, #2
1248c     09 27 02 F1 | 	add	local01, arg01
12490     02 26 66 F0 | 	shl	local01, #2
12494     06 00 00 FF 
12498     98 E4 85 F1 | 	sub	objptr, ##3224
1249c     F2 26 02 F1 | 	add	local01, objptr
124a0     06 00 00 FF 
124a4     28 E4 05 F1 | 	add	objptr, ##3112
124a8     F2 12 02 FB | 	rdlong	arg01, objptr
124ac     13 13 62 FC | 	wrlong	arg01, local01
124b0     70 E4 05 F1 | 	add	objptr, #112
124b4     F2 12 02 FB | 	rdlong	arg01, objptr
124b8     09 27 02 F6 | 	mov	local01, arg01
124bc     02 26 66 F0 | 	shl	local01, #2
124c0     09 27 02 F1 | 	add	local01, arg01
124c4     02 26 66 F0 | 	shl	local01, #2
124c8     06 00 00 FF 
124cc     98 E4 85 F1 | 	sub	objptr, ##3224
124d0     F2 26 02 F1 | 	add	local01, objptr
124d4     18 E4 85 F1 | 	sub	objptr, #24
124d8     F2 12 02 FB | 	rdlong	arg01, objptr
124dc     4A 00 00 FF 
124e0     80 E4 85 F1 | 	sub	objptr, ##38016
124e4     01 12 06 F1 | 	add	arg01, #1
124e8     04 26 06 F1 | 	add	local01, #4
124ec     13 13 62 FC | 	wrlong	arg01, local01
124f0                 | LR__1461
124f0     A7 F0 03 F6 | 	mov	ptra, fp
124f4     B2 00 A0 FD | 	call	#popregs_
124f8                 | _do_for_ret
124f8     2D 00 64 FD | 	ret
124fc                 | 
124fc                 | ' 
124fc                 | ' '-------------------- frame
124fc                 | ' 
124fc                 | ' sub do_frame
124fc                 | _do_frame
124fc     03 4A 05 F6 | 	mov	COUNT_, #3
12500     A8 00 A0 FD | 	call	#pushregs_
12504     30 F0 07 F1 | 	add	ptra, #48
12508     5C B0 BF FD | 	call	#_pop
1250c     FD 16 02 F6 | 	mov	arg03, result1
12510     FE 14 02 F6 | 	mov	arg02, result2
12514     FF 1A 02 F6 | 	mov	arg05, result3
12518     24 4E 05 F1 | 	add	fp, #36
1251c     A7 16 62 FC | 	wrlong	arg03, fp
12520     04 4E 05 F1 | 	add	fp, #4
12524     A7 14 62 FC | 	wrlong	arg02, fp
12528     04 4E 05 F1 | 	add	fp, #4
1252c     A7 1A 62 FC | 	wrlong	arg05, fp
12530     2C 4E 85 F1 | 	sub	fp, #44
12534     30 B0 BF FD | 	call	#_pop
12538     FD 16 02 F6 | 	mov	arg03, result1
1253c     FE 14 02 F6 | 	mov	arg02, result2
12540     FF 1A 02 F6 | 	mov	arg05, result3
12544     18 4E 05 F1 | 	add	fp, #24
12548     A7 16 62 FC | 	wrlong	arg03, fp
1254c     04 4E 05 F1 | 	add	fp, #4
12550     A7 14 62 FC | 	wrlong	arg02, fp
12554     04 4E 05 F1 | 	add	fp, #4
12558     A7 1A 62 FC | 	wrlong	arg05, fp
1255c     20 4E 85 F1 | 	sub	fp, #32
12560     04 B0 BF FD | 	call	#_pop
12564     FD 16 02 F6 | 	mov	arg03, result1
12568     FE 14 02 F6 | 	mov	arg02, result2
1256c     FF 1A 02 F6 | 	mov	arg05, result3
12570     0C 4E 05 F1 | 	add	fp, #12
12574     A7 16 62 FC | 	wrlong	arg03, fp
12578     04 4E 05 F1 | 	add	fp, #4
1257c     A7 14 62 FC | 	wrlong	arg02, fp
12580     04 4E 05 F1 | 	add	fp, #4
12584     A7 1A 62 FC | 	wrlong	arg05, fp
12588     14 4E 85 F1 | 	sub	fp, #20
1258c     D8 AF BF FD | 	call	#_pop
12590     FF 16 02 F6 | 	mov	arg03, result3
12594     A7 FA 61 FC | 	wrlong	result1, fp
12598     04 4E 05 F1 | 	add	fp, #4
1259c     A7 FC 61 FC | 	wrlong	result2, fp
125a0     04 4E 05 F1 | 	add	fp, #4
125a4     A7 16 62 FC | 	wrlong	arg03, fp
125a8     08 4E 85 F1 | 	sub	fp, #8
125ac     A7 12 02 F6 | 	mov	arg01, fp
125b0     98 B1 BF FD | 	call	#_converttoint
125b4     FD 26 02 F6 | 	mov	local01, result1
125b8     0C 4E 05 F1 | 	add	fp, #12
125bc     A7 12 02 F6 | 	mov	arg01, fp
125c0     0C 4E 85 F1 | 	sub	fp, #12
125c4     84 B1 BF FD | 	call	#_converttoint
125c8     FD 28 02 F6 | 	mov	local02, result1
125cc     18 4E 05 F1 | 	add	fp, #24
125d0     A7 12 02 F6 | 	mov	arg01, fp
125d4     18 4E 85 F1 | 	sub	fp, #24
125d8     70 B1 BF FD | 	call	#_converttoint
125dc     FD 2A 02 F6 | 	mov	local03, result1
125e0     24 4E 05 F1 | 	add	fp, #36
125e4     A7 12 02 F6 | 	mov	arg01, fp
125e8     24 4E 85 F1 | 	sub	fp, #36
125ec     5C B1 BF FD | 	call	#_converttoint
125f0     FD 18 02 F6 | 	mov	arg04, result1
125f4     37 00 00 FF 
125f8     28 E4 05 F1 | 	add	objptr, ##28200
125fc     F2 1A 02 FB | 	rdlong	arg05, objptr
12600     37 00 00 FF 
12604     28 E4 85 F1 | 	sub	objptr, ##28200
12608     13 13 02 F6 | 	mov	arg01, local01
1260c     14 15 02 F6 | 	mov	arg02, local02
12610     15 17 02 F6 | 	mov	arg03, local03
12614     14 23 B1 FD | 	call	#_hg010b_spin2_frame
12618     A7 F0 03 F6 | 	mov	ptra, fp
1261c     B2 00 A0 FD | 	call	#popregs_
12620                 | _do_frame_ret
12620     2D 00 64 FD | 	ret
12624                 | 
12624                 | ' 
12624                 | ' '-------------------- framebuf
12624                 | ' 
12624                 | ' sub do_framebuf
12624                 | _do_framebuf
12624     00 4A 05 F6 | 	mov	COUNT_, #0
12628     A8 00 A0 FD | 	call	#pushregs_
1262c     0C F0 07 F1 | 	add	ptra, #12
12630     08 4E 05 F1 | 	add	fp, #8
12634     A7 3A 68 FC | 	wrlong	#29, fp
12638     F2 12 02 FB | 	rdlong	arg01, objptr
1263c     08 4E 85 F1 | 	sub	fp, #8
12640     A7 12 62 FC | 	wrlong	arg01, fp
12644     A7 12 02 F6 | 	mov	arg01, fp
12648     B4 AF BF FD | 	call	#_push
1264c     A7 F0 03 F6 | 	mov	ptra, fp
12650     B2 00 A0 FD | 	call	#popregs_
12654                 | _do_framebuf_ret
12654     2D 00 64 FD | 	ret
12658                 | 
12658                 | ' '-------------------- fre
12658                 | ' 
12658                 | ' sub do_fre
12658                 | _do_fre
12658     01 4A 05 F6 | 	mov	COUNT_, #1
1265c     A8 00 A0 FD | 	call	#pushregs_
12660     0C F0 07 F1 | 	add	ptra, #12
12664     52 00 00 FF 
12668     98 E4 05 F1 | 	add	objptr, ##42136
1266c     F2 12 02 FB | 	rdlong	arg01, objptr
12670     0F 00 00 FF 
12674     3C E4 85 F1 | 	sub	objptr, ##7740
12678     F2 26 02 FB | 	rdlong	local01, objptr
1267c     13 13 82 F1 | 	sub	arg01, local01
12680     0F 00 00 FF 
12684     B4 E4 05 F1 | 	add	objptr, ##7860
12688     F2 12 62 FC | 	wrlong	arg01, objptr
1268c     08 4E 05 F1 | 	add	fp, #8
12690     A7 3A 68 FC | 	wrlong	#29, fp
12694     08 4E 85 F1 | 	sub	fp, #8
12698     F2 26 02 FB | 	rdlong	local01, objptr
1269c     52 00 00 FF 
126a0     10 E5 85 F1 | 	sub	objptr, ##42256
126a4     A7 26 62 FC | 	wrlong	local01, fp
126a8     A7 12 02 F6 | 	mov	arg01, fp
126ac     50 AF BF FD | 	call	#_push
126b0     A7 F0 03 F6 | 	mov	ptra, fp
126b4     B2 00 A0 FD | 	call	#popregs_
126b8                 | _do_fre_ret
126b8     2D 00 64 FD | 	ret
126bc                 | 
126bc                 | ' 
126bc                 | ' '-------------------- get
126bc                 | ' 
126bc                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
126bc                 | _do_get
126bc     09 4A 05 F6 | 	mov	COUNT_, #9
126c0     A8 00 A0 FD | 	call	#pushregs_
126c4     40 F0 07 F1 | 	add	ptra, #64
126c8     4A 00 00 FF 
126cc     80 E4 05 F1 | 	add	objptr, ##38016
126d0     F2 1A 02 FB | 	rdlong	arg05, objptr
126d4     0D 19 02 F6 | 	mov	arg04, arg05
126d8     01 18 66 F0 | 	shl	arg04, #1
126dc     0D 19 02 F1 | 	add	arg04, arg05
126e0     02 18 66 F0 | 	shl	arg04, #2
126e4     03 00 00 FF 
126e8     04 E4 85 F1 | 	sub	objptr, ##1540
126ec     F2 18 02 F1 | 	add	arg04, objptr
126f0     0C 1B 02 FB | 	rdlong	arg05, arg04
126f4     A7 1A 62 FC | 	wrlong	arg05, fp
126f8                 | ' 
126f8                 | ' numpar=compiledline(lineptr_e).result.uresult
126f8                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
126f8     04 1A 0E F2 | 	cmp	arg05, #4 wz
126fc     47 00 00 FF 
12700     7C E4 85 F1 | 	sub	objptr, ##36476
12704     48 00 90 5D |  if_ne	jmp	#LR__1470
12708     5C AE BF FD | 	call	#_pop
1270c     FF 1A 02 F6 | 	mov	arg05, result3
12710     1C 4E 05 F1 | 	add	fp, #28
12714     A7 FA 61 FC | 	wrlong	result1, fp
12718     04 4E 05 F1 | 	add	fp, #4
1271c     A7 FC 61 FC | 	wrlong	result2, fp
12720     04 4E 05 F1 | 	add	fp, #4
12724     A7 1A 62 FC | 	wrlong	arg05, fp
12728     08 4E 85 F1 | 	sub	fp, #8
1272c     A7 12 02 F6 | 	mov	arg01, fp
12730     1C 4E 85 F1 | 	sub	fp, #28
12734     14 B0 BF FD | 	call	#_converttoint
12738     52 00 00 FF 
1273c     0C E5 05 F1 | 	add	objptr, ##42252
12740     F2 FA 61 FC | 	wrlong	result1, objptr
12744     52 00 00 FF 
12748     0C E5 85 F1 | 	sub	objptr, ##42252
1274c     18 00 90 FD | 	jmp	#LR__1471
12750                 | LR__1470
12750     52 00 00 FF 
12754     0C E5 05 F1 | 	add	objptr, ##42252
12758     FF FF FF FF 
1275c     F2 FE 6B FC | 	wrlong	##-1, objptr
12760     52 00 00 FF 
12764     0C E5 85 F1 | 	sub	objptr, ##42252
12768                 | LR__1471
12768                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12768     A7 16 02 FB | 	rdlong	arg03, fp
1276c     03 16 56 F2 | 	cmps	arg03, #3 wc
12770     40 00 90 CD |  if_b	jmp	#LR__1472
12774     F0 AD BF FD | 	call	#_pop
12778     FF 16 02 F6 | 	mov	arg03, result3
1277c     1C 4E 05 F1 | 	add	fp, #28
12780     A7 FA 61 FC | 	wrlong	result1, fp
12784     04 4E 05 F1 | 	add	fp, #4
12788     A7 FC 61 FC | 	wrlong	result2, fp
1278c     04 4E 05 F1 | 	add	fp, #4
12790     A7 16 62 FC | 	wrlong	arg03, fp
12794     08 4E 85 F1 | 	sub	fp, #8
12798     A7 12 02 F6 | 	mov	arg01, fp
1279c     1C 4E 85 F1 | 	sub	fp, #28
127a0     A8 AF BF FD | 	call	#_converttoint
127a4     08 4E 05 F1 | 	add	fp, #8
127a8     A7 FA 61 FC | 	wrlong	result1, fp
127ac     08 4E 85 F1 | 	sub	fp, #8
127b0     0C 00 90 FD | 	jmp	#LR__1473
127b4                 | LR__1472
127b4     08 4E 05 F1 | 	add	fp, #8
127b8     A7 02 68 FC | 	wrlong	#1, fp
127bc     08 4E 85 F1 | 	sub	fp, #8
127c0                 | LR__1473
127c0                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
127c0     A7 16 02 FB | 	rdlong	arg03, fp
127c4     02 16 56 F2 | 	cmps	arg03, #2 wc
127c8     3C 00 90 CD |  if_b	jmp	#LR__1474
127cc     98 AD BF FD | 	call	#_pop
127d0     FF 16 02 F6 | 	mov	arg03, result3
127d4     1C 4E 05 F1 | 	add	fp, #28
127d8     A7 FA 61 FC | 	wrlong	result1, fp
127dc     04 4E 05 F1 | 	add	fp, #4
127e0     A7 FC 61 FC | 	wrlong	result2, fp
127e4     04 4E 05 F1 | 	add	fp, #4
127e8     A7 16 62 FC | 	wrlong	arg03, fp
127ec     08 4E 85 F1 | 	sub	fp, #8
127f0     A7 12 02 F6 | 	mov	arg01, fp
127f4     1C 4E 85 F1 | 	sub	fp, #28
127f8     50 AF BF FD | 	call	#_converttoint
127fc     0C 4E 05 F1 | 	add	fp, #12
12800     A7 FA 61 FC | 	wrlong	result1, fp
12804     0C 4E 85 F1 | 	sub	fp, #12
12808                 | LR__1474
12808     5C AD BF FD | 	call	#_pop
1280c     FF 16 02 F6 | 	mov	arg03, result3
12810     1C 4E 05 F1 | 	add	fp, #28
12814     A7 FA 61 FC | 	wrlong	result1, fp
12818     04 4E 05 F1 | 	add	fp, #4
1281c     A7 FC 61 FC | 	wrlong	result2, fp
12820     04 4E 05 F1 | 	add	fp, #4
12824     A7 16 62 FC | 	wrlong	arg03, fp
12828     08 4E 85 F1 | 	sub	fp, #8
1282c     A7 12 02 F6 | 	mov	arg01, fp
12830     1C 4E 85 F1 | 	sub	fp, #28
12834     14 AF BF FD | 	call	#_converttoint
12838     04 4E 05 F1 | 	add	fp, #4
1283c     A7 FA 61 FC | 	wrlong	result1, fp
12840     10 4E 05 F1 | 	add	fp, #16
12844     A7 16 02 FB | 	rdlong	arg03, fp
12848     14 4E 85 F1 | 	sub	fp, #20
1284c     02 16 66 F0 | 	shl	arg03, #2
12850     50 00 00 FF 
12854     C4 E4 05 F1 | 	add	objptr, ##41156
12858     F2 26 02 F6 | 	mov	local01, objptr
1285c     F2 16 02 F1 | 	add	arg03, objptr
12860     0B 01 68 FC | 	wrlong	#0, arg03
12864                 | ' t1=pop() : channel=converttoint(t1)
12864                 | ' getres(j)=0
12864                 | ' if pos>=0 then
12864     02 00 00 FF 
12868     48 E4 05 F1 | 	add	objptr, ##1096
1286c     F2 28 02 FB | 	rdlong	local02, objptr
12870     52 00 00 FF 
12874     0C E5 85 F1 | 	sub	objptr, ##42252
12878     00 28 56 F2 | 	cmps	local02, #0 wc
1287c     F0 01 90 CD |  if_b	jmp	#LR__1481
12880                 | '   for i=0 to  amount/1024
12880     10 4E 05 F1 | 	add	fp, #16
12884     A7 00 68 FC | 	wrlong	#0, fp
12888     08 4E 85 F1 | 	sub	fp, #8
1288c     A7 2A 02 FB | 	rdlong	local03, fp
12890     08 4E 85 F1 | 	sub	fp, #8
12894     15 2D 52 F6 | 	abs	local04, local03 wc
12898     0A 2C 46 F0 | 	shr	local04, #10
1289c     16 2D 82 F6 | 	negc	local04, local04
128a0     01 2C 06 F1 | 	add	local04, #1
128a4                 | LR__1475
128a4     10 4E 05 F1 | 	add	fp, #16
128a8     A7 2A 02 FB | 	rdlong	local03, fp
128ac     10 4E 85 F1 | 	sub	fp, #16
128b0     16 2B 52 F2 | 	cmps	local03, local04 wc
128b4     9C 03 90 3D |  if_ae	jmp	#LR__1489
128b8                 | '     get #channel,pos+1,block(0),amount,r
128b8     04 4E 05 F1 | 	add	fp, #4
128bc     A7 12 02 FB | 	rdlong	arg01, fp
128c0     52 00 00 FF 
128c4     0C E5 05 F1 | 	add	objptr, ##42252
128c8     F2 14 02 FB | 	rdlong	arg02, objptr
128cc     01 14 06 F1 | 	add	arg02, #1
128d0     04 00 00 FF 
128d4     58 E4 85 F1 | 	sub	objptr, ##2136
128d8     F2 16 02 F6 | 	mov	arg03, objptr
128dc     4E 00 00 FF 
128e0     B4 E4 85 F1 | 	sub	objptr, ##40116
128e4     04 4E 05 F1 | 	add	fp, #4
128e8     A7 18 02 FB | 	rdlong	arg04, fp
128ec     08 4E 85 F1 | 	sub	fp, #8
128f0     01 1A 06 F6 | 	mov	arg05, #1
128f4     74 4E B1 FD | 	call	#__system___basic_get
128f8     18 4E 05 F1 | 	add	fp, #24
128fc     A7 FA 61 FC | 	wrlong	result1, fp
12900                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12900     0C 4E 85 F1 | 	sub	fp, #12
12904     A7 28 02 FB | 	rdlong	local02, fp
12908     0C 4E 85 F1 | 	sub	fp, #12
1290c     00 04 00 FF 
12910     00 28 56 F2 | 	cmps	local02, ##524288 wc
12914     7C 00 90 3D |  if_ae	jmp	#LR__1477
12918     14 4E 05 F1 | 	add	fp, #20
1291c     A7 00 68 FC | 	wrlong	#0, fp
12920     04 4E 05 F1 | 	add	fp, #4
12924     A7 2E 02 FB | 	rdlong	local05, fp
12928     18 4E 85 F1 | 	sub	fp, #24
1292c                 | LR__1476
1292c     14 4E 05 F1 | 	add	fp, #20
12930     A7 28 02 FB | 	rdlong	local02, fp
12934     14 4E 85 F1 | 	sub	fp, #20
12938     17 29 52 F2 | 	cmps	local02, local05 wc
1293c     D8 00 90 3D |  if_ae	jmp	#LR__1480
12940     0C 4E 05 F1 | 	add	fp, #12
12944     A7 12 02 FB | 	rdlong	arg01, fp
12948     04 4E 05 F1 | 	add	fp, #4
1294c     A7 2A 02 FB | 	rdlong	local03, fp
12950     0A 2A 66 F0 | 	shl	local03, #10
12954     15 13 02 F1 | 	add	arg01, local03
12958     04 4E 05 F1 | 	add	fp, #4
1295c     A7 2A 02 FB | 	rdlong	local03, fp
12960     15 13 02 F1 | 	add	arg01, local03
12964     4E 00 00 FF 
12968     B4 E4 05 F1 | 	add	objptr, ##40116
1296c     F2 2A 02 F1 | 	add	local03, objptr
12970     15 15 C2 FA | 	rdbyte	arg02, local03
12974     09 15 42 FC | 	wrbyte	arg02, arg01
12978     4E 00 00 FF 
1297c     B4 E4 85 F1 | 	sub	objptr, ##40116
12980     A7 2A 02 FB | 	rdlong	local03, fp
12984     01 2A 06 F1 | 	add	local03, #1
12988     A7 2A 62 FC | 	wrlong	local03, fp
1298c     14 4E 85 F1 | 	sub	fp, #20
12990     98 FF 9F FD | 	jmp	#LR__1476
12994                 | LR__1477
12994     14 4E 05 F1 | 	add	fp, #20
12998     A7 00 68 FC | 	wrlong	#0, fp
1299c     04 4E 05 F1 | 	add	fp, #4
129a0     A7 30 02 FB | 	rdlong	local06, fp
129a4     18 4E 85 F1 | 	sub	fp, #24
129a8                 | LR__1478
129a8     14 4E 05 F1 | 	add	fp, #20
129ac     A7 28 02 FB | 	rdlong	local02, fp
129b0     14 4E 85 F1 | 	sub	fp, #20
129b4     18 29 52 F2 | 	cmps	local02, local06 wc
129b8     5C 00 90 3D |  if_ae	jmp	#LR__1479
129bc     0C 4E 05 F1 | 	add	fp, #12
129c0     A7 12 02 FB | 	rdlong	arg01, fp
129c4     04 4E 05 F1 | 	add	fp, #4
129c8     A7 2E 02 FB | 	rdlong	local05, fp
129cc     0A 2E 66 F0 | 	shl	local05, #10
129d0     17 13 02 F1 | 	add	arg01, local05
129d4     04 4E 05 F1 | 	add	fp, #4
129d8     A7 2E 02 FB | 	rdlong	local05, fp
129dc     17 13 02 F1 | 	add	arg01, local05
129e0     14 4E 85 F1 | 	sub	fp, #20
129e4     4E 00 00 FF 
129e8     B4 E4 05 F1 | 	add	objptr, ##40116
129ec     F2 2E 02 F1 | 	add	local05, objptr
129f0     17 15 C2 FA | 	rdbyte	arg02, local05
129f4     4E 00 00 FF 
129f8     B4 E4 85 F1 | 	sub	objptr, ##40116
129fc     38 07 B1 FD | 	call	#_pspoke
12a00     14 4E 05 F1 | 	add	fp, #20
12a04     A7 2E 02 FB | 	rdlong	local05, fp
12a08     01 2E 06 F1 | 	add	local05, #1
12a0c     A7 2E 62 FC | 	wrlong	local05, fp
12a10     14 4E 85 F1 | 	sub	fp, #20
12a14     90 FF 9F FD | 	jmp	#LR__1478
12a18                 | LR__1479
12a18                 | LR__1480
12a18     14 4E 05 F1 | 	add	fp, #20
12a1c     A7 30 02 FB | 	rdlong	local06, fp
12a20     18 2B 02 F6 | 	mov	local03, local06
12a24     02 2A 66 F0 | 	shl	local03, #2
12a28     50 00 00 FF 
12a2c     C4 E4 05 F1 | 	add	objptr, ##41156
12a30     F2 2A 02 F1 | 	add	local03, objptr
12a34     02 30 66 F0 | 	shl	local06, #2
12a38     F2 30 02 F1 | 	add	local06, objptr
12a3c     18 31 02 FB | 	rdlong	local06, local06
12a40     04 4E 05 F1 | 	add	fp, #4
12a44     A7 2E 02 FB | 	rdlong	local05, fp
12a48     17 31 02 F1 | 	add	local06, local05
12a4c     15 31 62 FC | 	wrlong	local06, local03
12a50     08 4E 85 F1 | 	sub	fp, #8
12a54     A7 30 02 FB | 	rdlong	local06, fp
12a58     01 30 06 F1 | 	add	local06, #1
12a5c     A7 30 62 FC | 	wrlong	local06, fp
12a60     10 4E 85 F1 | 	sub	fp, #16
12a64     50 00 00 FF 
12a68     C4 E4 85 F1 | 	sub	objptr, ##41156
12a6c     34 FE 9F FD | 	jmp	#LR__1475
12a70                 | LR__1481
12a70                 | '   for i=0 to  amount/1024
12a70     10 4E 05 F1 | 	add	fp, #16
12a74     A7 00 68 FC | 	wrlong	#0, fp
12a78     08 4E 85 F1 | 	sub	fp, #8
12a7c     A7 2A 02 FB | 	rdlong	local03, fp
12a80     08 4E 85 F1 | 	sub	fp, #8
12a84     15 33 52 F6 | 	abs	local07, local03 wc
12a88     0A 32 46 F0 | 	shr	local07, #10
12a8c     19 33 82 F6 | 	negc	local07, local07
12a90     01 32 06 F1 | 	add	local07, #1
12a94                 | LR__1482
12a94     10 4E 05 F1 | 	add	fp, #16
12a98     A7 2A 02 FB | 	rdlong	local03, fp
12a9c     10 4E 85 F1 | 	sub	fp, #16
12aa0     19 2B 52 F2 | 	cmps	local03, local07 wc
12aa4     AC 01 90 3D |  if_ae	jmp	#LR__1488
12aa8                 | '     get #channel,,block(0),amount,r
12aa8     04 4E 05 F1 | 	add	fp, #4
12aac     A7 12 02 FB | 	rdlong	arg01, fp
12ab0     4E 00 00 FF 
12ab4     B4 E4 05 F1 | 	add	objptr, ##40116
12ab8     F2 16 02 F6 | 	mov	arg03, objptr
12abc     4E 00 00 FF 
12ac0     B4 E4 85 F1 | 	sub	objptr, ##40116
12ac4     04 4E 05 F1 | 	add	fp, #4
12ac8     A7 18 02 FB | 	rdlong	arg04, fp
12acc     08 4E 85 F1 | 	sub	fp, #8
12ad0     00 14 06 F6 | 	mov	arg02, #0
12ad4     01 1A 06 F6 | 	mov	arg05, #1
12ad8     90 4C B1 FD | 	call	#__system___basic_get
12adc     18 4E 05 F1 | 	add	fp, #24
12ae0     A7 FA 61 FC | 	wrlong	result1, fp
12ae4                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12ae4     0C 4E 85 F1 | 	sub	fp, #12
12ae8     A7 28 02 FB | 	rdlong	local02, fp
12aec     0C 4E 85 F1 | 	sub	fp, #12
12af0     00 04 00 FF 
12af4     00 28 56 F2 | 	cmps	local02, ##524288 wc
12af8     7C 00 90 3D |  if_ae	jmp	#LR__1484
12afc     14 4E 05 F1 | 	add	fp, #20
12b00     A7 00 68 FC | 	wrlong	#0, fp
12b04     04 4E 05 F1 | 	add	fp, #4
12b08     A7 34 02 FB | 	rdlong	local08, fp
12b0c     18 4E 85 F1 | 	sub	fp, #24
12b10                 | LR__1483
12b10     14 4E 05 F1 | 	add	fp, #20
12b14     A7 28 02 FB | 	rdlong	local02, fp
12b18     14 4E 85 F1 | 	sub	fp, #20
12b1c     1A 29 52 F2 | 	cmps	local02, local08 wc
12b20     D8 00 90 3D |  if_ae	jmp	#LR__1487
12b24     0C 4E 05 F1 | 	add	fp, #12
12b28     A7 12 02 FB | 	rdlong	arg01, fp
12b2c     04 4E 05 F1 | 	add	fp, #4
12b30     A7 30 02 FB | 	rdlong	local06, fp
12b34     0A 30 66 F0 | 	shl	local06, #10
12b38     18 13 02 F1 | 	add	arg01, local06
12b3c     04 4E 05 F1 | 	add	fp, #4
12b40     A7 30 02 FB | 	rdlong	local06, fp
12b44     18 13 02 F1 | 	add	arg01, local06
12b48     4E 00 00 FF 
12b4c     B4 E4 05 F1 | 	add	objptr, ##40116
12b50     F2 30 02 F1 | 	add	local06, objptr
12b54     18 15 C2 FA | 	rdbyte	arg02, local06
12b58     09 15 42 FC | 	wrbyte	arg02, arg01
12b5c     4E 00 00 FF 
12b60     B4 E4 85 F1 | 	sub	objptr, ##40116
12b64     A7 30 02 FB | 	rdlong	local06, fp
12b68     01 30 06 F1 | 	add	local06, #1
12b6c     A7 30 62 FC | 	wrlong	local06, fp
12b70     14 4E 85 F1 | 	sub	fp, #20
12b74     98 FF 9F FD | 	jmp	#LR__1483
12b78                 | LR__1484
12b78     14 4E 05 F1 | 	add	fp, #20
12b7c     A7 00 68 FC | 	wrlong	#0, fp
12b80     04 4E 05 F1 | 	add	fp, #4
12b84     A7 36 02 FB | 	rdlong	local09, fp
12b88     18 4E 85 F1 | 	sub	fp, #24
12b8c                 | LR__1485
12b8c     14 4E 05 F1 | 	add	fp, #20
12b90     A7 28 02 FB | 	rdlong	local02, fp
12b94     14 4E 85 F1 | 	sub	fp, #20
12b98     1B 29 52 F2 | 	cmps	local02, local09 wc
12b9c     5C 00 90 3D |  if_ae	jmp	#LR__1486
12ba0     0C 4E 05 F1 | 	add	fp, #12
12ba4     A7 12 02 FB | 	rdlong	arg01, fp
12ba8     04 4E 05 F1 | 	add	fp, #4
12bac     A7 34 02 FB | 	rdlong	local08, fp
12bb0     0A 34 66 F0 | 	shl	local08, #10
12bb4     1A 13 02 F1 | 	add	arg01, local08
12bb8     04 4E 05 F1 | 	add	fp, #4
12bbc     A7 34 02 FB | 	rdlong	local08, fp
12bc0     1A 13 02 F1 | 	add	arg01, local08
12bc4     14 4E 85 F1 | 	sub	fp, #20
12bc8     4E 00 00 FF 
12bcc     B4 E4 05 F1 | 	add	objptr, ##40116
12bd0     F2 34 02 F1 | 	add	local08, objptr
12bd4     1A 15 C2 FA | 	rdbyte	arg02, local08
12bd8     4E 00 00 FF 
12bdc     B4 E4 85 F1 | 	sub	objptr, ##40116
12be0     54 05 B1 FD | 	call	#_pspoke
12be4     14 4E 05 F1 | 	add	fp, #20
12be8     A7 34 02 FB | 	rdlong	local08, fp
12bec     01 34 06 F1 | 	add	local08, #1
12bf0     A7 34 62 FC | 	wrlong	local08, fp
12bf4     14 4E 85 F1 | 	sub	fp, #20
12bf8     90 FF 9F FD | 	jmp	#LR__1485
12bfc                 | LR__1486
12bfc                 | LR__1487
12bfc     14 4E 05 F1 | 	add	fp, #20
12c00     A7 36 02 FB | 	rdlong	local09, fp
12c04     1B 31 02 F6 | 	mov	local06, local09
12c08     02 30 66 F0 | 	shl	local06, #2
12c0c     50 00 00 FF 
12c10     C4 E4 05 F1 | 	add	objptr, ##41156
12c14     F2 30 02 F1 | 	add	local06, objptr
12c18     02 36 66 F0 | 	shl	local09, #2
12c1c     F2 36 02 F1 | 	add	local09, objptr
12c20     1B 37 02 FB | 	rdlong	local09, local09
12c24     04 4E 05 F1 | 	add	fp, #4
12c28     A7 34 02 FB | 	rdlong	local08, fp
12c2c     1A 37 02 F1 | 	add	local09, local08
12c30     18 37 62 FC | 	wrlong	local09, local06
12c34     08 4E 85 F1 | 	sub	fp, #8
12c38     A7 36 02 FB | 	rdlong	local09, fp
12c3c     01 36 06 F1 | 	add	local09, #1
12c40     A7 36 62 FC | 	wrlong	local09, fp
12c44     10 4E 85 F1 | 	sub	fp, #16
12c48     50 00 00 FF 
12c4c     C4 E4 85 F1 | 	sub	objptr, ##41156
12c50     40 FE 9F FD | 	jmp	#LR__1482
12c54                 | LR__1488
12c54                 | LR__1489
12c54     A7 F0 03 F6 | 	mov	ptra, fp
12c58     B2 00 A0 FD | 	call	#popregs_
12c5c                 | _do_get_ret
12c5c     2D 00 64 FD | 	ret
12c60                 | 
12c60                 | ' 
12c60                 | ' '-------------------- getenvsustain
12c60                 | ' 
12c60                 | ' sub do_getenvsustain
12c60                 | _do_getenvsustain
12c60     01 4A 05 F6 | 	mov	COUNT_, #1
12c64     A8 00 A0 FD | 	call	#pushregs_
12c68     10 F0 07 F1 | 	add	ptra, #16
12c6c     4A 00 00 FF 
12c70     80 E4 05 F1 | 	add	objptr, ##38016
12c74     F2 26 02 FB | 	rdlong	local01, objptr
12c78     13 17 02 F6 | 	mov	arg03, local01
12c7c     01 16 66 F0 | 	shl	arg03, #1
12c80     13 17 02 F1 | 	add	arg03, local01
12c84     02 16 66 F0 | 	shl	arg03, #2
12c88     03 00 00 FF 
12c8c     04 E4 85 F1 | 	sub	objptr, ##1540
12c90     F2 16 02 F1 | 	add	arg03, objptr
12c94     0B 17 02 FB | 	rdlong	arg03, arg03
12c98     0C 4E 05 F1 | 	add	fp, #12
12c9c     A7 16 62 FC | 	wrlong	arg03, fp
12ca0                 | ' 
12ca0                 | ' numpar=compiledline(lineptr_e).result.uresult
12ca0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12ca0     0C 4E 85 F1 | 	sub	fp, #12
12ca4     02 16 16 F2 | 	cmp	arg03, #2 wc
12ca8     47 00 00 FF 
12cac     7C E4 85 F1 | 	sub	objptr, ##36476
12cb0     0C 4E 05 C1 |  if_b	add	fp, #12
12cb4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12cb8     0C 4E 85 C1 |  if_b	sub	fp, #12
12cbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1490
12cc0     00 12 06 F6 | 	mov	arg01, #0
12cc4     D4 98 B1 FD | 	call	#__system___getiolock_0602
12cc8     FD 12 02 F6 | 	mov	arg01, result1
12ccc     28 3C B1 FD | 	call	#__system___lockmem
12cd0     B6 01 00 FF 
12cd4     D4 15 06 F6 | 	mov	arg02, ##@LR__5898
12cd8     00 12 06 F6 | 	mov	arg01, #0
12cdc     00 16 06 F6 | 	mov	arg03, #0
12ce0     0C 49 B1 FD | 	call	#__system___basic_print_string
12ce4     00 12 06 F6 | 	mov	arg01, #0
12ce8     B0 98 B1 FD | 	call	#__system___getiolock_0602
12cec     FD 00 68 FC | 	wrlong	#0, result1
12cf0     27 12 06 F6 | 	mov	arg01, #39
12cf4     00 14 06 F6 | 	mov	arg02, #0
12cf8     0C 02 B1 FD | 	call	#_printerror
12cfc     64 00 90 FD | 	jmp	#LR__1491
12d00                 | LR__1490
12d00     64 A8 BF FD | 	call	#_pop
12d04     FD 26 02 F6 | 	mov	local01, result1
12d08     FE 16 02 F6 | 	mov	arg03, result2
12d0c     A7 26 62 FC | 	wrlong	local01, fp
12d10     04 4E 05 F1 | 	add	fp, #4
12d14     A7 16 62 FC | 	wrlong	arg03, fp
12d18     04 4E 05 F1 | 	add	fp, #4
12d1c     A7 FE 61 FC | 	wrlong	result3, fp
12d20     08 4E 85 F1 | 	sub	fp, #8
12d24     A7 12 02 F6 | 	mov	arg01, fp
12d28     20 AA BF FD | 	call	#_converttoint
12d2c     FD 26 02 F6 | 	mov	local01, result1
12d30     01 26 66 F0 | 	shl	local01, #1
12d34     52 00 00 FF 
12d38     B4 E4 05 F1 | 	add	objptr, ##42164
12d3c     F2 26 02 F1 | 	add	local01, objptr
12d40     13 27 E2 FA | 	rdword	local01, local01
12d44     A7 26 62 FC | 	wrlong	local01, fp
12d48     08 4E 05 F1 | 	add	fp, #8
12d4c     A7 38 68 FC | 	wrlong	#28, fp
12d50     08 4E 85 F1 | 	sub	fp, #8
12d54     A7 12 02 F6 | 	mov	arg01, fp
12d58     52 00 00 FF 
12d5c     B4 E4 85 F1 | 	sub	objptr, ##42164
12d60     9C A8 BF FD | 	call	#_push
12d64                 | LR__1491
12d64     A7 F0 03 F6 | 	mov	ptra, fp
12d68     B2 00 A0 FD | 	call	#popregs_
12d6c                 | _do_getenvsustain_ret
12d6c     2D 00 64 FD | 	ret
12d70                 | 
12d70                 | ' 
12d70                 | ' '-------------------- getnotevalue
12d70                 | ' 
12d70                 | ' sub do_getnotevalue
12d70                 | _do_getnotevalue
12d70     01 4A 05 F6 | 	mov	COUNT_, #1
12d74     A8 00 A0 FD | 	call	#pushregs_
12d78     1C F0 07 F1 | 	add	ptra, #28
12d7c     E8 A7 BF FD | 	call	#_pop
12d80     FF 14 02 F6 | 	mov	arg02, result3
12d84     10 4E 05 F1 | 	add	fp, #16
12d88     A7 FA 61 FC | 	wrlong	result1, fp
12d8c     04 4E 05 F1 | 	add	fp, #4
12d90     A7 FC 61 FC | 	wrlong	result2, fp
12d94     04 4E 05 F1 | 	add	fp, #4
12d98     A7 14 62 FC | 	wrlong	arg02, fp
12d9c     08 4E 85 F1 | 	sub	fp, #8
12da0     A7 12 02 F6 | 	mov	arg01, fp
12da4     10 4E 85 F1 | 	sub	fp, #16
12da8     A0 A9 BF FD | 	call	#_converttoint
12dac     FD 14 52 F6 | 	abs	arg02, result1 wc
12db0     0C 14 16 FD | 	qdiv	arg02, #12
12db4     0C 4E 05 F1 | 	add	fp, #12
12db8     A7 FA 61 FC | 	wrlong	result1, fp
12dbc     14 00 00 FF 
12dc0     D8 E4 05 F1 | 	add	objptr, ##10456
12dc4     08 4E 85 F1 | 	sub	fp, #8
12dc8     19 14 62 FD | 	getqy	arg02
12dcc     0A 15 82 F6 | 	negc	arg02, arg02
12dd0     02 14 66 F0 | 	shl	arg02, #2
12dd4     F2 14 02 F1 | 	add	arg02, objptr
12dd8     0A 15 02 FB | 	rdlong	arg02, arg02
12ddc     A7 14 62 FC | 	wrlong	arg02, fp
12de0     08 4E 05 F1 | 	add	fp, #8
12de4     A7 14 02 FB | 	rdlong	arg02, fp
12de8     0A 15 52 F6 | 	abs	arg02, arg02 wc
12dec     0C 14 16 FD | 	qdiv	arg02, #12
12df0     0C 4E 85 F1 | 	sub	fp, #12
12df4     14 00 00 FF 
12df8     D8 E4 85 F1 | 	sub	objptr, ##10456
12dfc     18 14 62 FD | 	getqx	arg02
12e00     0A 13 82 F6 | 	negc	arg01, arg02
12e04     09 13 52 F6 | 	abs	arg01, arg01 wc
12e08     1F 26 C6 C9 |  if_b	decod	local01, #31
12e0c     00 26 06 36 |  if_ae	mov	local01, #0
12e10     5C 65 B1 FD | 	call	#__system___float_fromuns
12e14     13 FB 61 F5 | 	xor	result1, local01
12e18     08 4E 05 F1 | 	add	fp, #8
12e1c     A7 FA 61 FC | 	wrlong	result1, fp
12e20     FD 14 02 F6 | 	mov	arg02, result1
12e24     08 4E 85 F1 | 	sub	fp, #8
12e28     1E 12 C6 F9 | 	decod	arg01, #30
12e2c     4C 78 B1 FD | 	call	#__system____builtin_powf
12e30     FD 12 02 F6 | 	mov	arg01, result1
12e34     04 4E 05 F1 | 	add	fp, #4
12e38     A7 14 02 FB | 	rdlong	arg02, fp
12e3c     04 4E 85 F1 | 	sub	fp, #4
12e40     30 69 B1 FD | 	call	#__system___float_mul
12e44     A7 FA 61 FC | 	wrlong	result1, fp
12e48     10 4E 05 F1 | 	add	fp, #16
12e4c     A7 FA 61 FC | 	wrlong	result1, fp
12e50     08 4E 05 F1 | 	add	fp, #8
12e54     A7 3C 68 FC | 	wrlong	#30, fp
12e58     08 4E 85 F1 | 	sub	fp, #8
12e5c     A7 12 02 F6 | 	mov	arg01, fp
12e60     10 4E 85 F1 | 	sub	fp, #16
12e64     98 A7 BF FD | 	call	#_push
12e68     A7 F0 03 F6 | 	mov	ptra, fp
12e6c     B2 00 A0 FD | 	call	#popregs_
12e70                 | _do_getnotevalue_ret
12e70     2D 00 64 FD | 	ret
12e74                 | 
12e74                 | ' 
12e74                 | ' '-------------------- getpixel
12e74                 | ' 
12e74                 | ' sub do_getpixel
12e74                 | _do_getpixel
12e74     00 4A 05 F6 | 	mov	COUNT_, #0
12e78     A8 00 A0 FD | 	call	#pushregs_
12e7c     24 F0 07 F1 | 	add	ptra, #36
12e80     4A 00 00 FF 
12e84     80 E4 05 F1 | 	add	objptr, ##38016
12e88     F2 16 02 FB | 	rdlong	arg03, objptr
12e8c     0B 15 02 F6 | 	mov	arg02, arg03
12e90     01 14 66 F0 | 	shl	arg02, #1
12e94     0B 15 02 F1 | 	add	arg02, arg03
12e98     02 14 66 F0 | 	shl	arg02, #2
12e9c     03 00 00 FF 
12ea0     04 E4 85 F1 | 	sub	objptr, ##1540
12ea4     F2 14 02 F1 | 	add	arg02, objptr
12ea8     0A 17 02 FB | 	rdlong	arg03, arg02
12eac     18 4E 05 F1 | 	add	fp, #24
12eb0     A7 16 62 FC | 	wrlong	arg03, fp
12eb4                 | ' 
12eb4                 | ' numpar=compiledline(lineptr_e).result.uresult
12eb4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12eb4     18 4E 85 F1 | 	sub	fp, #24
12eb8     02 16 0E F2 | 	cmp	arg03, #2 wz
12ebc     47 00 00 FF 
12ec0     7C E4 85 F1 | 	sub	objptr, ##36476
12ec4     40 00 90 AD |  if_e	jmp	#LR__1500
12ec8     00 12 06 F6 | 	mov	arg01, #0
12ecc     CC 96 B1 FD | 	call	#__system___getiolock_0602
12ed0     FD 12 02 F6 | 	mov	arg01, result1
12ed4     20 3A B1 FD | 	call	#__system___lockmem
12ed8     B6 01 00 FF 
12edc     E4 15 06 F6 | 	mov	arg02, ##@LR__5899
12ee0     00 12 06 F6 | 	mov	arg01, #0
12ee4     00 16 06 F6 | 	mov	arg03, #0
12ee8     04 47 B1 FD | 	call	#__system___basic_print_string
12eec     00 12 06 F6 | 	mov	arg01, #0
12ef0     A8 96 B1 FD | 	call	#__system___getiolock_0602
12ef4     FD 00 68 FC | 	wrlong	#0, result1
12ef8     27 12 06 F6 | 	mov	arg01, #39
12efc     00 14 06 F6 | 	mov	arg02, #0
12f00     04 00 B1 FD | 	call	#_printerror
12f04     B4 00 90 FD | 	jmp	#LR__1501
12f08                 | LR__1500
12f08     5C A6 BF FD | 	call	#_pop
12f0c     FD 16 02 F6 | 	mov	arg03, result1
12f10     FE 14 02 F6 | 	mov	arg02, result2
12f14     FF 12 02 F6 | 	mov	arg01, result3
12f18     0C 4E 05 F1 | 	add	fp, #12
12f1c     A7 16 62 FC | 	wrlong	arg03, fp
12f20     04 4E 05 F1 | 	add	fp, #4
12f24     A7 14 62 FC | 	wrlong	arg02, fp
12f28     04 4E 05 F1 | 	add	fp, #4
12f2c     A7 12 62 FC | 	wrlong	arg01, fp
12f30     14 4E 85 F1 | 	sub	fp, #20
12f34     30 A6 BF FD | 	call	#_pop
12f38     FF 16 02 F6 | 	mov	arg03, result3
12f3c     A7 FA 61 FC | 	wrlong	result1, fp
12f40     04 4E 05 F1 | 	add	fp, #4
12f44     A7 FC 61 FC | 	wrlong	result2, fp
12f48     04 4E 05 F1 | 	add	fp, #4
12f4c     A7 16 62 FC | 	wrlong	arg03, fp
12f50     08 4E 85 F1 | 	sub	fp, #8
12f54     A7 12 02 F6 | 	mov	arg01, fp
12f58     F0 A7 BF FD | 	call	#_converttoint
12f5c     1C 4E 05 F1 | 	add	fp, #28
12f60     A7 FA 61 FC | 	wrlong	result1, fp
12f64     10 4E 85 F1 | 	sub	fp, #16
12f68     A7 12 02 F6 | 	mov	arg01, fp
12f6c     0C 4E 85 F1 | 	sub	fp, #12
12f70     D8 A7 BF FD | 	call	#_converttoint
12f74     FD 16 02 F6 | 	mov	arg03, result1
12f78     20 4E 05 F1 | 	add	fp, #32
12f7c     A7 16 62 FC | 	wrlong	arg03, fp
12f80     F2 12 02 FB | 	rdlong	arg01, objptr
12f84     04 4E 85 F1 | 	sub	fp, #4
12f88     A7 FE 01 FB | 	rdlong	result3, fp
12f8c     FF 12 02 F1 | 	add	arg01, result3
12f90     1C 4E 85 F1 | 	sub	fp, #28
12f94     0A 16 66 F0 | 	shl	arg03, #10
12f98     0B 13 02 F1 | 	add	arg01, arg03
12f9c     E0 01 B1 FD | 	call	#_pspeek
12fa0     FD FA E1 F8 | 	getbyte	result1, result1, #0
12fa4     A7 FA 61 FC | 	wrlong	result1, fp
12fa8     08 4E 05 F1 | 	add	fp, #8
12fac     A7 3A 68 FC | 	wrlong	#29, fp
12fb0     08 4E 85 F1 | 	sub	fp, #8
12fb4     A7 12 02 F6 | 	mov	arg01, fp
12fb8     44 A6 BF FD | 	call	#_push
12fbc                 | LR__1501
12fbc     A7 F0 03 F6 | 	mov	ptra, fp
12fc0     B2 00 A0 FD | 	call	#popregs_
12fc4                 | _do_getpixel_ret
12fc4     2D 00 64 FD | 	ret
12fc8                 | 
12fc8                 | ' 
12fc8                 | ' '-------------------- gettime
12fc8                 | ' 
12fc8                 | ' sub do_gettime
12fc8                 | _do_gettime
12fc8     02 4A 05 F6 | 	mov	COUNT_, #2
12fcc     A8 00 A0 FD | 	call	#pushregs_
12fd0     14 F0 07 F1 | 	add	ptra, #20
12fd4                 | ' 
12fd4                 | ' const asm 
12fd4     1A 26 72 FD | 	getct	local01 wc
12fd8     1A 28 62 FD | 	getct	local02
12fdc                 | ' return hi1, lo1
12fdc     14 FD 01 F6 | 	mov	result2, local02
12fe0     A7 26 62 FC | 	wrlong	local01, fp
12fe4     04 4E 05 F1 | 	add	fp, #4
12fe8     A7 FC 61 FC | 	wrlong	result2, fp
12fec     0C 4E 05 F1 | 	add	fp, #12
12ff0     A7 3A 68 FC | 	wrlong	#29, fp
12ff4     0C 4E 85 F1 | 	sub	fp, #12
12ff8     A7 12 02 FB | 	rdlong	arg01, fp
12ffc     04 4E 05 F1 | 	add	fp, #4
13000     A7 12 62 FC | 	wrlong	arg01, fp
13004     08 4E 85 F1 | 	sub	fp, #8
13008     A7 12 02 FB | 	rdlong	arg01, fp
1300c     0C 4E 05 F1 | 	add	fp, #12
13010     A7 12 62 FC | 	wrlong	arg01, fp
13014     04 4E 85 F1 | 	sub	fp, #4
13018     A7 12 02 F6 | 	mov	arg01, fp
1301c     08 4E 85 F1 | 	sub	fp, #8
13020     DC A5 BF FD | 	call	#_push
13024     A7 F0 03 F6 | 	mov	ptra, fp
13028     B2 00 A0 FD | 	call	#popregs_
1302c                 | _do_gettime_ret
1302c     2D 00 64 FD | 	ret
13030                 | 
13030                 | ' 
13030                 | ' '-------------------- gosub
13030                 | ' 
13030                 | ' sub do_gosub()
13030                 | _do_gosub
13030     50 00 00 FF 
13034     34 E5 05 F1 | 	add	objptr, ##41268
13038     F2 00 02 FB | 	rdlong	_var01, objptr
1303c     01 00 06 F1 | 	add	_var01, #1
13040     F2 00 62 FC | 	wrlong	_var01, objptr
13044                 | ' gosubtop+=1
13044                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13044     06 00 00 FF 
13048     B4 E4 85 F1 | 	sub	objptr, ##3252
1304c     F2 00 02 FB | 	rdlong	_var01, objptr
13050     01 00 06 F1 | 	add	_var01, #1
13054     00 03 02 F6 | 	mov	_var02, _var01
13058     01 02 66 F0 | 	shl	_var02, #1
1305c     00 03 02 F1 | 	add	_var02, _var01
13060     02 02 66 F0 | 	shl	_var02, #2
13064     03 00 00 FF 
13068     04 E4 85 F1 | 	sub	objptr, ##1540
1306c     F2 02 02 F1 | 	add	_var02, objptr
13070     08 02 06 F1 | 	add	_var02, #8
13074     01 03 02 FB | 	rdlong	_var02, _var02
13078     FE 03 0E F2 | 	cmp	_var02, #510 wz
1307c     47 00 00 FF 
13080     7C E4 85 F1 | 	sub	objptr, ##36476
13084     58 00 90 5D |  if_ne	jmp	#LR__1510
13088     50 00 00 FF 
1308c     34 E5 05 F1 | 	add	objptr, ##41268
13090     F2 02 02 FB | 	rdlong	_var02, objptr
13094     03 02 66 F0 | 	shl	_var02, #3
13098     03 00 00 FF 
1309c     88 E5 85 F1 | 	sub	objptr, ##1928
130a0     F2 02 02 F1 | 	add	_var02, objptr
130a4     03 00 00 FF 
130a8     0C E5 05 F1 | 	add	objptr, ##1804
130ac     F2 00 02 FB | 	rdlong	_var01, objptr
130b0     01 01 62 FC | 	wrlong	_var01, _var02
130b4     7C E4 05 F1 | 	add	objptr, #124
130b8     F2 02 02 FB | 	rdlong	_var02, objptr
130bc     03 02 66 F0 | 	shl	_var02, #3
130c0     03 00 00 FF 
130c4     88 E5 85 F1 | 	sub	objptr, ##1928
130c8     F2 02 02 F1 | 	add	_var02, objptr
130cc     04 02 06 F1 | 	add	_var02, #4
130d0     01 01 68 FC | 	wrlong	#0, _var02
130d4     4C 00 00 FF 
130d8     AC E5 85 F1 | 	sub	objptr, ##39340
130dc     64 00 90 FD | 	jmp	#LR__1511
130e0                 | LR__1510
130e0     50 00 00 FF 
130e4     34 E5 05 F1 | 	add	objptr, ##41268
130e8     F2 02 02 FB | 	rdlong	_var02, objptr
130ec     03 02 66 F0 | 	shl	_var02, #3
130f0     03 00 00 FF 
130f4     88 E5 85 F1 | 	sub	objptr, ##1928
130f8     F2 02 02 F1 | 	add	_var02, objptr
130fc     03 00 00 FF 
13100     14 E5 05 F1 | 	add	objptr, ##1812
13104     F2 00 02 FB | 	rdlong	_var01, objptr
13108     01 01 62 FC | 	wrlong	_var01, _var02
1310c     74 E4 05 F1 | 	add	objptr, #116
13110     F2 02 02 FB | 	rdlong	_var02, objptr
13114     03 02 66 F0 | 	shl	_var02, #3
13118     03 00 00 FF 
1311c     88 E5 85 F1 | 	sub	objptr, ##1928
13120     F2 02 02 F1 | 	add	_var02, objptr
13124     02 00 00 FF 
13128     2C E5 85 F1 | 	sub	objptr, ##1324
1312c     F2 00 02 FB | 	rdlong	_var01, objptr
13130     4A 00 00 FF 
13134     80 E4 85 F1 | 	sub	objptr, ##38016
13138     02 00 06 F1 | 	add	_var01, #2
1313c     04 02 06 F1 | 	add	_var02, #4
13140     01 01 62 FC | 	wrlong	_var01, _var02
13144                 | LR__1511
13144                 | _do_gosub_ret
13144     2D 00 64 FD | 	ret
13148                 | 
13148                 | ' 
13148                 | ' '--------------------- goto
13148                 | ' 
13148                 | ' '------- fast goto
13148                 | ' 
13148                 | ' sub do_fast_goto
13148                 | _do_fast_goto
13148     02 4A 05 F6 | 	mov	COUNT_, #2
1314c     A8 00 A0 FD | 	call	#pushregs_
13150                 | _do_fast_goto_enter
13150     4A 00 00 FF 
13154     80 E4 05 F1 | 	add	objptr, ##38016
13158     F2 12 02 FB | 	rdlong	arg01, objptr
1315c     09 27 02 F6 | 	mov	local01, arg01
13160     01 26 66 F0 | 	shl	local01, #1
13164     09 27 02 F1 | 	add	local01, arg01
13168     02 26 66 F0 | 	shl	local01, #2
1316c     03 00 00 FF 
13170     04 E4 85 F1 | 	sub	objptr, ##1540
13174     F2 26 02 F1 | 	add	local01, objptr
13178     13 29 02 FB | 	rdlong	local02, local01
1317c     14 13 02 F6 | 	mov	arg01, local02
13180     47 00 00 FF 
13184     7C E4 85 F1 | 	sub	objptr, ##36476
13188     4C 00 B1 FD | 	call	#_pslpeek
1318c     FD 12 02 F6 | 	mov	arg01, result1
13190                 | ' 
13190                 | ' testptr=compiledline(lineptr_e).result.uresult
13190                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
13190                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
13190     4A 00 00 FF 
13194     80 E4 05 F1 | 	add	objptr, ##38016
13198     F2 FA 01 FB | 	rdlong	result1, objptr
1319c     FD 26 02 F6 | 	mov	local01, result1
131a0     01 26 66 F0 | 	shl	local01, #1
131a4     FD 26 02 F1 | 	add	local01, result1
131a8     02 26 66 F0 | 	shl	local01, #2
131ac     03 00 00 FF 
131b0     04 E4 85 F1 | 	sub	objptr, ##1540
131b4     F2 26 02 F1 | 	add	local01, objptr
131b8     04 26 06 F1 | 	add	local01, #4
131bc     13 27 02 FB | 	rdlong	local01, local01
131c0     13 13 0A F2 | 	cmp	arg01, local01 wz
131c4     47 00 00 FF 
131c8     7C E4 85 F1 | 	sub	objptr, ##36476
131cc     58 00 90 5D |  if_ne	jmp	#LR__1520
131d0     50 00 00 FF 
131d4     B8 E4 05 F1 | 	add	objptr, ##41144
131d8     F2 28 62 FC | 	wrlong	local02, objptr
131dc     06 00 00 FF 
131e0     3C E4 85 F1 | 	sub	objptr, ##3132
131e4     F2 28 02 FB | 	rdlong	local02, objptr
131e8     01 28 86 F1 | 	sub	local02, #1
131ec     04 E4 05 F1 | 	add	objptr, #4
131f0     F2 28 62 FC | 	wrlong	local02, objptr
131f4                 | '   runptr=testptr
131f4                 | '   lineptr_e=lineptr-1
131f4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
131f4     06 00 00 FF 
131f8     84 E4 05 F1 | 	add	objptr, ##3204
131fc     F2 28 02 FB | 	rdlong	local02, objptr
13200     50 00 00 FF 
13204     04 E5 85 F1 | 	sub	objptr, ##41220
13208     FF FF 3F FF 
1320c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13210     50 00 00 AF 
13214     04 E5 05 A1 |  if_e	add	objptr, ##41220
13218     F2 00 68 AC |  if_e	wrlong	#0, objptr
1321c     50 00 00 AF 
13220     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13224     04 00 90 FD | 	jmp	#LR__1521
13228                 | LR__1520
13228     0C 00 B0 FD | 	call	#_do_find_goto
1322c                 | LR__1521
1322c     A7 F0 03 F6 | 	mov	ptra, fp
13230     B2 00 A0 FD | 	call	#popregs_
13234                 | _do_fast_goto_ret
13234     2D 00 64 FD | 	ret
13238                 | 
13238                 | ' 
13238                 | ' '------- find goto  
13238                 | ' 
13238                 | ' sub do_find_goto
13238                 | _do_find_goto
13238     03 4A 05 F6 | 	mov	COUNT_, #3
1323c     A8 00 A0 FD | 	call	#pushregs_
13240     24 F0 07 F1 | 	add	ptra, #36
13244                 | _do_find_goto_enter
13244     4A 00 00 FF 
13248     80 E4 05 F1 | 	add	objptr, ##38016
1324c     F2 26 02 FB | 	rdlong	local01, objptr
13250     13 29 02 F6 | 	mov	local02, local01
13254     01 28 66 F0 | 	shl	local02, #1
13258     13 29 02 F1 | 	add	local02, local01
1325c     02 28 66 F0 | 	shl	local02, #2
13260     03 00 00 FF 
13264     04 E4 85 F1 | 	sub	objptr, ##1540
13268     F2 28 02 F1 | 	add	local02, objptr
1326c     04 28 06 F1 | 	add	local02, #4
13270     14 29 02 FB | 	rdlong	local02, local02
13274     A7 28 62 FC | 	wrlong	local02, fp
13278     03 00 00 FF 
1327c     0C E4 05 F1 | 	add	objptr, ##1548
13280     F2 2A 02 FB | 	rdlong	local03, objptr
13284     4A 00 00 FF 
13288     88 E4 85 F1 | 	sub	objptr, ##38024
1328c     04 4E 05 F1 | 	add	fp, #4
13290     A7 2A 62 FC | 	wrlong	local03, fp
13294     04 4E 85 F1 | 	sub	fp, #4
13298                 | ' 
13298                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
13298                 | ' gotoptr=programstart
13298                 | ' do
13298                 | LR__1530
13298     0C 4E 05 F1 | 	add	fp, #12
1329c     A7 12 02 F6 | 	mov	arg01, fp
132a0     08 4E 85 F1 | 	sub	fp, #8
132a4     A7 14 02 FB | 	rdlong	arg02, fp
132a8     04 4E 85 F1 | 	sub	fp, #4
132ac     18 16 06 F6 | 	mov	arg03, #24
132b0     0B 00 00 FF 
132b4     CC E4 05 F1 | 	add	objptr, ##5836
132b8     B4 29 B1 FD | 	call	#_psram_spin2_read1
132bc     0B 00 00 FF 
132c0     CC E4 85 F1 | 	sub	objptr, ##5836
132c4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
132c4                 | '   if gotoheader(0)<>$FFFFFFFF then
132c4     0C 4E 05 F1 | 	add	fp, #12
132c8     A7 2A 02 FB | 	rdlong	local03, fp
132cc     0C 4E 85 F1 | 	sub	fp, #12
132d0     FF FF 7F FF 
132d4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
132d8     24 00 90 AD |  if_e	jmp	#LR__1531
132dc     04 4E 05 F1 | 	add	fp, #4
132e0     A7 2A 02 FB | 	rdlong	local03, fp
132e4     04 4E 05 F1 | 	add	fp, #4
132e8     A7 2A 62 FC | 	wrlong	local03, fp
132ec     18 4E 05 F1 | 	add	fp, #24
132f0     A7 2A 02 FB | 	rdlong	local03, fp
132f4     1C 4E 85 F1 | 	sub	fp, #28
132f8     A7 2A 62 FC | 	wrlong	local03, fp
132fc     04 4E 85 F1 | 	sub	fp, #4
13300                 | LR__1531
13300     20 4E 05 F1 | 	add	fp, #32
13304     A7 2A 02 FB | 	rdlong	local03, fp
13308     20 4E 85 F1 | 	sub	fp, #32
1330c     FF FF 3F FF 
13310     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
13314     0C 4E 05 51 |  if_ne	add	fp, #12
13318     A7 26 02 5B |  if_ne	rdlong	local01, fp
1331c     0C 4E 85 51 |  if_ne	sub	fp, #12
13320     FF FF 7F 5F 
13324     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13328     18 00 90 AD |  if_e	jmp	#LR__1532
1332c     0C 4E 05 F1 | 	add	fp, #12
13330     A7 2A 02 FB | 	rdlong	local03, fp
13334     0C 4E 85 F1 | 	sub	fp, #12
13338     A7 28 02 FB | 	rdlong	local02, fp
1333c     14 2B 0A F2 | 	cmp	local03, local02 wz
13340     54 FF 9F 5D |  if_ne	jmp	#LR__1530
13344                 | LR__1532
13344                 | ' 
13344                 | ' if gotoheader(0)=gotoline then
13344     0C 4E 05 F1 | 	add	fp, #12
13348     A7 2A 02 FB | 	rdlong	local03, fp
1334c     0C 4E 85 F1 | 	sub	fp, #12
13350     A7 26 02 FB | 	rdlong	local01, fp
13354     13 2B 0A F2 | 	cmp	local03, local01 wz
13358     D8 00 90 5D |  if_ne	jmp	#LR__1533
1335c     4A 00 00 FF 
13360     80 E4 05 F1 | 	add	objptr, ##38016
13364     F2 26 02 FB | 	rdlong	local01, objptr
13368     13 29 02 F6 | 	mov	local02, local01
1336c     01 28 66 F0 | 	shl	local02, #1
13370     13 29 02 F1 | 	add	local02, local01
13374     02 28 66 F0 | 	shl	local02, #2
13378     03 00 00 FF 
1337c     04 E4 85 F1 | 	sub	objptr, ##1540
13380     F2 28 02 F1 | 	add	local02, objptr
13384     08 4E 05 F1 | 	add	fp, #8
13388     A7 2A 02 FB | 	rdlong	local03, fp
1338c     14 2B 62 FC | 	wrlong	local03, local02
13390     03 00 00 FF 
13394     04 E4 05 F1 | 	add	objptr, ##1540
13398     F2 26 02 FB | 	rdlong	local01, objptr
1339c     13 29 02 F6 | 	mov	local02, local01
133a0     01 28 66 F0 | 	shl	local02, #1
133a4     13 29 02 F1 | 	add	local02, local01
133a8     02 28 66 F0 | 	shl	local02, #2
133ac     03 00 00 FF 
133b0     04 E4 85 F1 | 	sub	objptr, ##1540
133b4     F2 28 02 F1 | 	add	local02, objptr
133b8     08 28 06 F1 | 	add	local02, #8
133bc     14 9D 68 FC | 	wrlong	#78, local02
133c0     03 00 00 FF 
133c4     04 E4 05 F1 | 	add	objptr, ##1540
133c8     F2 28 02 FB | 	rdlong	local02, objptr
133cc     14 13 02 F6 | 	mov	arg01, local02
133d0     01 12 66 F0 | 	shl	arg01, #1
133d4     14 13 02 F1 | 	add	arg01, local02
133d8     02 12 66 F0 | 	shl	arg01, #2
133dc     03 00 00 FF 
133e0     04 E4 85 F1 | 	sub	objptr, ##1540
133e4     F2 12 02 F1 | 	add	arg01, objptr
133e8     09 00 00 FF 
133ec     44 E4 05 F1 | 	add	objptr, ##4676
133f0     F2 14 02 FB | 	rdlong	arg02, objptr
133f4     02 2A 06 F6 | 	mov	local03, #2
133f8     14 2B 02 F1 | 	add	local03, local02
133fc     0B 00 00 FF 
13400     5C E4 85 F1 | 	sub	objptr, ##5724
13404     F2 16 02 FB | 	rdlong	arg03, objptr
13408     0B 2B 02 FD | 	qmul	local03, arg03
1340c     08 4E 85 F1 | 	sub	fp, #8
13410     39 00 00 FF 
13414     98 E5 85 F1 | 	sub	objptr, ##29592
13418     18 2A 62 FD | 	getqx	local03
1341c     15 15 02 F1 | 	add	arg02, local03
13420     E8 28 B1 FD | 	call	#_psram_spin2_write
13424     0B 00 00 FF 
13428     CC E4 85 F1 | 	sub	objptr, ##5836
1342c     18 FD BF FD | 	call	#_do_fast_goto
13430     0C 00 90 FD | 	jmp	#LR__1534
13434                 | LR__1533
13434     26 12 06 F6 | 	mov	arg01, #38
13438     00 14 06 F6 | 	mov	arg02, #0
1343c     C8 FA B0 FD | 	call	#_printerror
13440                 | LR__1534
13440     A7 F0 03 F6 | 	mov	ptra, fp
13444     B2 00 A0 FD | 	call	#popregs_
13448                 | _do_find_goto_ret
13448     2D 00 64 FD | 	ret
1344c                 | 
1344c                 | ' 
1344c                 | ' '------- slow goto  
1344c                 | ' 
1344c                 | ' sub do_slow_goto
1344c                 | _do_slow_goto
1344c     02 4A 05 F6 | 	mov	COUNT_, #2
13450     A8 00 A0 FD | 	call	#pushregs_
13454     30 F0 07 F1 | 	add	ptra, #48
13458     0C A1 BF FD | 	call	#_pop
1345c     FF 26 02 F6 | 	mov	local01, result3
13460     24 4E 05 F1 | 	add	fp, #36
13464     A7 FA 61 FC | 	wrlong	result1, fp
13468     04 4E 05 F1 | 	add	fp, #4
1346c     A7 FC 61 FC | 	wrlong	result2, fp
13470     04 4E 05 F1 | 	add	fp, #4
13474     A7 26 62 FC | 	wrlong	local01, fp
13478     08 4E 85 F1 | 	sub	fp, #8
1347c     A7 12 02 F6 | 	mov	arg01, fp
13480     24 4E 85 F1 | 	sub	fp, #36
13484     C4 A2 BF FD | 	call	#_converttoint
13488     A7 FA 61 FC | 	wrlong	result1, fp
1348c     4A 00 00 FF 
13490     88 E4 05 F1 | 	add	objptr, ##38024
13494     F2 28 02 FB | 	rdlong	local02, objptr
13498     4A 00 00 FF 
1349c     88 E4 85 F1 | 	sub	objptr, ##38024
134a0     04 4E 05 F1 | 	add	fp, #4
134a4     A7 28 62 FC | 	wrlong	local02, fp
134a8     04 4E 85 F1 | 	sub	fp, #4
134ac                 | ' 
134ac                 | ' t1=pop() : gotoline=converttoint(t1)
134ac                 | ' gotoptr=programstart
134ac                 | ' do
134ac                 | LR__1540
134ac     0C 4E 05 F1 | 	add	fp, #12
134b0     A7 12 02 F6 | 	mov	arg01, fp
134b4     08 4E 85 F1 | 	sub	fp, #8
134b8     A7 14 02 FB | 	rdlong	arg02, fp
134bc     04 4E 85 F1 | 	sub	fp, #4
134c0     18 16 06 F6 | 	mov	arg03, #24
134c4     0B 00 00 FF 
134c8     CC E4 05 F1 | 	add	objptr, ##5836
134cc     A0 27 B1 FD | 	call	#_psram_spin2_read1
134d0     0B 00 00 FF 
134d4     CC E4 85 F1 | 	sub	objptr, ##5836
134d8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
134d8                 | '   if gotoheader(0)<>$FFFFFFFF then
134d8     0C 4E 05 F1 | 	add	fp, #12
134dc     A7 28 02 FB | 	rdlong	local02, fp
134e0     0C 4E 85 F1 | 	sub	fp, #12
134e4     FF FF 7F FF 
134e8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
134ec     24 00 90 AD |  if_e	jmp	#LR__1541
134f0     04 4E 05 F1 | 	add	fp, #4
134f4     A7 28 02 FB | 	rdlong	local02, fp
134f8     04 4E 05 F1 | 	add	fp, #4
134fc     A7 28 62 FC | 	wrlong	local02, fp
13500     18 4E 05 F1 | 	add	fp, #24
13504     A7 28 02 FB | 	rdlong	local02, fp
13508     1C 4E 85 F1 | 	sub	fp, #28
1350c     A7 28 62 FC | 	wrlong	local02, fp
13510     04 4E 85 F1 | 	sub	fp, #4
13514                 | LR__1541
13514     20 4E 05 F1 | 	add	fp, #32
13518     A7 28 02 FB | 	rdlong	local02, fp
1351c     20 4E 85 F1 | 	sub	fp, #32
13520     FF FF 3F FF 
13524     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13528     0C 4E 05 51 |  if_ne	add	fp, #12
1352c     A7 26 02 5B |  if_ne	rdlong	local01, fp
13530     0C 4E 85 51 |  if_ne	sub	fp, #12
13534     FF FF 7F 5F 
13538     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
1353c     18 00 90 AD |  if_e	jmp	#LR__1542
13540     0C 4E 05 F1 | 	add	fp, #12
13544     A7 28 02 FB | 	rdlong	local02, fp
13548     0C 4E 85 F1 | 	sub	fp, #12
1354c     A7 16 02 FB | 	rdlong	arg03, fp
13550     0B 29 0A F2 | 	cmp	local02, arg03 wz
13554     54 FF 9F 5D |  if_ne	jmp	#LR__1540
13558                 | LR__1542
13558                 | ' if gotoheader(0)=gotoline then  
13558     0C 4E 05 F1 | 	add	fp, #12
1355c     A7 28 02 FB | 	rdlong	local02, fp
13560     0C 4E 85 F1 | 	sub	fp, #12
13564     A7 26 02 FB | 	rdlong	local01, fp
13568     13 29 0A F2 | 	cmp	local02, local01 wz
1356c     60 00 90 5D |  if_ne	jmp	#LR__1543
13570     08 4E 05 F1 | 	add	fp, #8
13574     A7 28 02 FB | 	rdlong	local02, fp
13578     08 4E 85 F1 | 	sub	fp, #8
1357c     50 00 00 FF 
13580     B8 E4 05 F1 | 	add	objptr, ##41144
13584     F2 28 62 FC | 	wrlong	local02, objptr
13588     06 00 00 FF 
1358c     3C E4 85 F1 | 	sub	objptr, ##3132
13590     F2 28 02 FB | 	rdlong	local02, objptr
13594     01 28 86 F1 | 	sub	local02, #1
13598     04 E4 05 F1 | 	add	objptr, #4
1359c     F2 28 62 FC | 	wrlong	local02, objptr
135a0                 | '    runptr=oldgotoptr
135a0                 | '    lineptr_e=lineptr-1
135a0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
135a0     06 00 00 FF 
135a4     84 E4 05 F1 | 	add	objptr, ##3204
135a8     F2 28 02 FB | 	rdlong	local02, objptr
135ac     50 00 00 FF 
135b0     04 E5 85 F1 | 	sub	objptr, ##41220
135b4     FF FF 3F FF 
135b8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
135bc     50 00 00 AF 
135c0     04 E5 05 A1 |  if_e	add	objptr, ##41220
135c4     F2 00 68 AC |  if_e	wrlong	#0, objptr
135c8     50 00 00 AF 
135cc     04 E5 85 A1 |  if_e	sub	objptr, ##41220
135d0                 | LR__1543
135d0     A7 F0 03 F6 | 	mov	ptra, fp
135d4     B2 00 A0 FD | 	call	#popregs_
135d8                 | _do_slow_goto_ret
135d8     2D 00 64 FD | 	ret
135dc                 | 
135dc                 | ' 
135dc                 | ' ' ----------------  hex$
135dc                 | ' 
135dc                 | ' sub do_hex
135dc                 | _do_hex
135dc     01 4A 05 F6 | 	mov	COUNT_, #1
135e0     A8 00 A0 FD | 	call	#pushregs_
135e4     18 F0 07 F1 | 	add	ptra, #24
135e8     4A 00 00 FF 
135ec     80 E4 05 F1 | 	add	objptr, ##38016
135f0     F2 26 02 FB | 	rdlong	local01, objptr
135f4     13 17 02 F6 | 	mov	arg03, local01
135f8     01 16 66 F0 | 	shl	arg03, #1
135fc     13 17 02 F1 | 	add	arg03, local01
13600     02 16 66 F0 | 	shl	arg03, #2
13604     03 00 00 FF 
13608     04 E4 85 F1 | 	sub	objptr, ##1540
1360c     F2 16 02 F1 | 	add	arg03, objptr
13610     0B 17 02 FB | 	rdlong	arg03, arg03
13614     0C 4E 05 F1 | 	add	fp, #12
13618     A7 16 62 FC | 	wrlong	arg03, fp
1361c                 | ' 
1361c                 | ' numpar=compiledline(lineptr_e).result.uresult
1361c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
1361c     0C 4E 85 F1 | 	sub	fp, #12
13620     03 16 16 F2 | 	cmp	arg03, #3 wc
13624     47 00 00 FF 
13628     7C E4 85 F1 | 	sub	objptr, ##36476
1362c     0C 4E 05 C1 |  if_b	add	fp, #12
13630     A7 26 0A CB |  if_b	rdlong	local01, fp wz
13634     0C 4E 85 C1 |  if_b	sub	fp, #12
13638     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
1363c     00 12 06 F6 | 	mov	arg01, #0
13640     58 8F B1 FD | 	call	#__system___getiolock_0602
13644     FD 12 02 F6 | 	mov	arg01, result1
13648     AC 32 B1 FD | 	call	#__system___lockmem
1364c     B6 01 00 FF 
13650     EF 15 06 F6 | 	mov	arg02, ##@LR__5900
13654     00 12 06 F6 | 	mov	arg01, #0
13658     00 16 06 F6 | 	mov	arg03, #0
1365c     90 3F B1 FD | 	call	#__system___basic_print_string
13660     00 12 06 F6 | 	mov	arg01, #0
13664     34 8F B1 FD | 	call	#__system___getiolock_0602
13668     FD 00 68 FC | 	wrlong	#0, result1
1366c     27 12 06 F6 | 	mov	arg01, #39
13670     00 14 06 F6 | 	mov	arg02, #0
13674     90 F8 B0 FD | 	call	#_printerror
13678     B8 00 90 FD | 	jmp	#LR__1553
1367c                 | LR__1550
1367c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
1367c     0C 4E 05 F1 | 	add	fp, #12
13680     A7 26 02 FB | 	rdlong	local01, fp
13684     0C 4E 85 F1 | 	sub	fp, #12
13688     02 26 0E F2 | 	cmp	local01, #2 wz
1368c     38 00 90 5D |  if_ne	jmp	#LR__1551
13690     D4 9E BF FD | 	call	#_pop
13694     FF 26 02 F6 | 	mov	local01, result3
13698     A7 FA 61 FC | 	wrlong	result1, fp
1369c     04 4E 05 F1 | 	add	fp, #4
136a0     A7 FC 61 FC | 	wrlong	result2, fp
136a4     04 4E 05 F1 | 	add	fp, #4
136a8     A7 26 62 FC | 	wrlong	local01, fp
136ac     08 4E 85 F1 | 	sub	fp, #8
136b0     A7 12 02 F6 | 	mov	arg01, fp
136b4     94 A0 BF FD | 	call	#_converttoint
136b8     14 4E 05 F1 | 	add	fp, #20
136bc     A7 FA 61 FC | 	wrlong	result1, fp
136c0     14 4E 85 F1 | 	sub	fp, #20
136c4     0C 00 90 FD | 	jmp	#LR__1552
136c8                 | LR__1551
136c8     14 4E 05 F1 | 	add	fp, #20
136cc     A7 10 68 FC | 	wrlong	#8, fp
136d0     14 4E 85 F1 | 	sub	fp, #20
136d4                 | LR__1552
136d4     90 9E BF FD | 	call	#_pop
136d8     FF 26 02 F6 | 	mov	local01, result3
136dc     A7 FA 61 FC | 	wrlong	result1, fp
136e0     04 4E 05 F1 | 	add	fp, #4
136e4     A7 FC 61 FC | 	wrlong	result2, fp
136e8     04 4E 05 F1 | 	add	fp, #4
136ec     A7 26 62 FC | 	wrlong	local01, fp
136f0     08 4E 85 F1 | 	sub	fp, #8
136f4     A7 12 02 F6 | 	mov	arg01, fp
136f8     50 A0 BF FD | 	call	#_converttoint
136fc     10 4E 05 F1 | 	add	fp, #16
13700     A7 FA 61 FC | 	wrlong	result1, fp
13704     FD 12 02 F6 | 	mov	arg01, result1
13708     04 4E 05 F1 | 	add	fp, #4
1370c     A7 14 02 FB | 	rdlong	arg02, fp
13710     14 4E 85 F1 | 	sub	fp, #20
13714     10 16 06 F6 | 	mov	arg03, #16
13718     B0 54 B1 FD | 	call	#__system__Number_S
1371c     A7 FA 61 FC | 	wrlong	result1, fp
13720     08 4E 05 F1 | 	add	fp, #8
13724     A7 3E 68 FC | 	wrlong	#31, fp
13728     08 4E 85 F1 | 	sub	fp, #8
1372c     A7 12 02 F6 | 	mov	arg01, fp
13730     CC 9E BF FD | 	call	#_push
13734                 | LR__1553
13734     A7 F0 03 F6 | 	mov	ptra, fp
13738     B2 00 A0 FD | 	call	#popregs_
1373c                 | _do_hex_ret
1373c     2D 00 64 FD | 	ret
13740                 | 
13740                 | ' 
13740                 | ' ' ----------------  if
13740                 | ' 
13740                 | ' sub do_if
13740                 | _do_if
13740     05 4A 05 F6 | 	mov	COUNT_, #5
13744     A8 00 A0 FD | 	call	#pushregs_
13748     1C 9E BF FD | 	call	#_pop
1374c     FD 26 0A F6 | 	mov	local01, result1 wz
13750     FE 28 02 F6 | 	mov	local02, result2
13754     FF 2A 02 F6 | 	mov	local03, result3
13758                 | ' t1=pop()
13758                 | ' ' if uresult=0, jump over else
13758                 | ' if t1.result.uresult = 0 then 
13758     BC 00 90 5D |  if_ne	jmp	#LR__1562
1375c                 | '   for i=lineptr_e to lineptr-1
1375c     4A 00 00 FF 
13760     80 E4 05 F1 | 	add	objptr, ##38016
13764     F2 2C 02 FB | 	rdlong	local04, objptr
13768     04 E4 85 F1 | 	sub	objptr, #4
1376c     F2 2E 02 FB | 	rdlong	local05, objptr
13770     4A 00 00 FF 
13774     7C E4 85 F1 | 	sub	objptr, ##38012
13778                 | LR__1560
13778     17 2D 52 F2 | 	cmps	local04, local05 wc
1377c     78 00 90 3D |  if_ae	jmp	#LR__1561
13780     16 FF 01 F6 | 	mov	result3, local04
13784     01 FE 65 F0 | 	shl	result3, #1
13788     16 FF 01 F1 | 	add	result3, local04
1378c     02 FE 65 F0 | 	shl	result3, #2
13790     47 00 00 FF 
13794     7C E4 05 F1 | 	add	objptr, ##36476
13798     F2 FE 01 F1 | 	add	result3, objptr
1379c     FF 26 02 FB | 	rdlong	local01, result3
137a0     04 FE 05 F1 | 	add	result3, #4
137a4     FF FC 01 FB | 	rdlong	result2, result3
137a8     16 FF 01 F6 | 	mov	result3, local04
137ac     01 FE 65 F0 | 	shl	result3, #1
137b0     16 FF 01 F1 | 	add	result3, local04
137b4     02 FE 65 F0 | 	shl	result3, #2
137b8     F2 FE 01 F1 | 	add	result3, objptr
137bc     08 FE 05 F1 | 	add	result3, #8
137c0     FF FE 01 FB | 	rdlong	result3, result3
137c4     FE 28 02 F6 | 	mov	local02, result2
137c8     FF 2A 02 F6 | 	mov	local03, result3
137cc                 | '     t1=compiledline(i)
137cc                 | '     if t1.result_type=token_else then lineptr_e=i : return
137cc     5A 2A 0E F2 | 	cmp	local03, #90 wz
137d0     47 00 00 FF 
137d4     7C E4 85 F1 | 	sub	objptr, ##36476
137d8     4A 00 00 AF 
137dc     80 E4 05 A1 |  if_e	add	objptr, ##38016
137e0     F2 2C 62 AC |  if_e	wrlong	local04, objptr
137e4     4A 00 00 AF 
137e8     80 E4 85 A1 |  if_e	sub	objptr, ##38016
137ec     28 00 90 AD |  if_e	jmp	#LR__1563
137f0     01 2C 06 F1 | 	add	local04, #1
137f4     80 FF 9F FD | 	jmp	#LR__1560
137f8                 | LR__1561
137f8     4A 00 00 FF 
137fc     7C E4 05 F1 | 	add	objptr, ##38012
13800     F2 2E 02 FB | 	rdlong	local05, objptr
13804     01 2E 86 F1 | 	sub	local05, #1
13808     04 E4 05 F1 | 	add	objptr, #4
1380c     F2 2E 62 FC | 	wrlong	local05, objptr
13810     4A 00 00 FF 
13814     80 E4 85 F1 | 	sub	objptr, ##38016
13818                 | LR__1562
13818                 | LR__1563
13818     A7 F0 03 F6 | 	mov	ptra, fp
1381c     B2 00 A0 FD | 	call	#popregs_
13820                 | _do_if_ret
13820     2D 00 64 FD | 	ret
13824                 | 
13824                 | ' 
13824                 | ' ' ----------------  inkey$
13824                 | ' 
13824                 | ' sub do_inkey
13824                 | _do_inkey
13824     02 4A 05 F6 | 	mov	COUNT_, #2
13828     A8 00 A0 FD | 	call	#pushregs_
1382c     0C F0 07 F1 | 	add	ptra, #12
13830     68 28 B1 FD | 	call	#_usbnew_spin2_get_key
13834     45 00 00 FF 
13838     74 E4 05 F1 | 	add	objptr, ##35444
1383c     F2 FA 61 FC | 	wrlong	result1, objptr
13840                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13840     45 00 00 FF 
13844     74 E4 85 F1 | 	sub	objptr, ##35444
13848     00 FA 0D F2 | 	cmp	result1, #0 wz
1384c     94 00 90 AD |  if_e	jmp	#LR__1571
13850     45 00 00 FF 
13854     74 E4 05 F1 | 	add	objptr, ##35444
13858     F2 1C 02 FB | 	rdlong	arg06, objptr
1385c     45 00 00 FF 
13860     74 E4 85 F1 | 	sub	objptr, ##35444
13864     00 00 40 FF 
13868     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1386c     45 00 00 CF 
13870     74 E4 05 C1 |  if_b	add	objptr, ##35444
13874     F2 26 02 CB |  if_b	rdlong	local01, objptr
13878     45 00 00 CF 
1387c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13880     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13884     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13888     58 00 90 3D |  if_ae	jmp	#LR__1571
1388c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1388c     50 00 00 FF 
13890     3C E5 05 F1 | 	add	objptr, ##41276
13894     F2 1C 02 FB | 	rdlong	arg06, objptr
13898     50 00 00 FF 
1389c     3C E5 85 F1 | 	sub	objptr, ##41276
138a0     01 1C 0E F2 | 	cmp	arg06, #1 wz
138a4     3C 00 90 5D |  if_ne	jmp	#LR__1570
138a8     52 00 00 FF 
138ac     A4 E4 05 F1 | 	add	objptr, ##42148
138b0     F2 14 02 FB | 	rdlong	arg02, objptr
138b4     04 E4 85 F1 | 	sub	objptr, #4
138b8     F2 1A 02 FB | 	rdlong	arg05, objptr
138bc     07 12 06 F6 | 	mov	arg01, #7
138c0     56 00 00 FF 
138c4     44 16 06 F6 | 	mov	arg03, ##44100
138c8     0C 18 C6 F9 | 	decod	arg04, #12
138cc     01 1C 66 F6 | 	neg	arg06, #1
138d0     46 00 00 FF 
138d4     D4 E5 85 F1 | 	sub	objptr, ##36308
138d8     AC 2B B1 FD | 	call	#_audio096_spin2_play
138dc     0B 00 00 FF 
138e0     CC E4 85 F1 | 	sub	objptr, ##5836
138e4                 | LR__1570
138e4                 | LR__1571
138e4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
138e4     45 00 00 FF 
138e8     74 E4 05 F1 | 	add	objptr, ##35444
138ec     F2 1C 0A FB | 	rdlong	arg06, objptr wz
138f0     45 00 00 FF 
138f4     74 E4 85 F1 | 	sub	objptr, ##35444
138f8     D4 01 90 AD |  if_e	jmp	#LR__1580
138fc     45 00 00 FF 
13900     74 E4 05 F1 | 	add	objptr, ##35444
13904     F2 1C 02 FB | 	rdlong	arg06, objptr
13908     45 00 00 FF 
1390c     74 E4 85 F1 | 	sub	objptr, ##35444
13910     00 00 40 FF 
13914     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13918     45 00 00 CF 
1391c     74 E4 05 C1 |  if_b	add	objptr, ##35444
13920     F2 26 02 CB |  if_b	rdlong	local01, objptr
13924     45 00 00 CF 
13928     74 E4 85 C1 |  if_b	sub	objptr, ##35444
1392c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13930     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13934     98 01 90 3D |  if_ae	jmp	#LR__1580
13938                 | '   if leds and 2 = 2 then 
13938     52 00 00 FF 
1393c     E0 E4 05 F1 | 	add	objptr, ##42208
13940     F2 26 0A FB | 	rdlong	local01, objptr wz
13944     52 00 00 FF 
13948     E0 E4 85 F1 | 	sub	objptr, ##42208
1394c     58 01 90 AD |  if_e	jmp	#LR__1579
13950                 | '     if key>96 andalso key<123 then
13950     45 00 00 FF 
13954     74 E4 05 F1 | 	add	objptr, ##35444
13958     F2 26 02 FB | 	rdlong	local01, objptr
1395c     45 00 00 FF 
13960     74 E4 85 F1 | 	sub	objptr, ##35444
13964     61 26 16 F2 | 	cmp	local01, #97 wc
13968     3C 00 90 CD |  if_b	jmp	#LR__1572
1396c     45 00 00 FF 
13970     74 E4 05 F1 | 	add	objptr, ##35444
13974     F2 26 02 FB | 	rdlong	local01, objptr
13978     45 00 00 FF 
1397c     74 E4 85 F1 | 	sub	objptr, ##35444
13980     7B 26 16 F2 | 	cmp	local01, #123 wc
13984     20 00 90 3D |  if_ae	jmp	#LR__1572
13988     45 00 00 FF 
1398c     74 E4 05 F1 | 	add	objptr, ##35444
13990     F2 26 02 FB | 	rdlong	local01, objptr
13994     20 26 86 F1 | 	sub	local01, #32
13998     F2 26 62 FC | 	wrlong	local01, objptr
1399c     45 00 00 FF 
139a0     74 E4 85 F1 | 	sub	objptr, ##35444
139a4     00 01 90 FD | 	jmp	#LR__1578
139a8                 | LR__1572
139a8     45 00 00 FF 
139ac     74 E4 05 F1 | 	add	objptr, ##35444
139b0     F2 26 02 FB | 	rdlong	local01, objptr
139b4     45 00 00 FF 
139b8     74 E4 85 F1 | 	sub	objptr, ##35444
139bc     41 26 16 F2 | 	cmp	local01, #65 wc
139c0     3C 00 90 CD |  if_b	jmp	#LR__1573
139c4     45 00 00 FF 
139c8     74 E4 05 F1 | 	add	objptr, ##35444
139cc     F2 26 02 FB | 	rdlong	local01, objptr
139d0     45 00 00 FF 
139d4     74 E4 85 F1 | 	sub	objptr, ##35444
139d8     5B 26 16 F2 | 	cmp	local01, #91 wc
139dc     20 00 90 3D |  if_ae	jmp	#LR__1573
139e0     45 00 00 FF 
139e4     74 E4 05 F1 | 	add	objptr, ##35444
139e8     F2 26 02 FB | 	rdlong	local01, objptr
139ec     20 26 06 F1 | 	add	local01, #32
139f0     F2 26 62 FC | 	wrlong	local01, objptr
139f4     45 00 00 FF 
139f8     74 E4 85 F1 | 	sub	objptr, ##35444
139fc     A8 00 90 FD | 	jmp	#LR__1577
13a00                 | LR__1573
13a00     45 00 00 FF 
13a04     74 E4 05 F1 | 	add	objptr, ##35444
13a08     F2 26 02 FB | 	rdlong	local01, objptr
13a0c     45 00 00 FF 
13a10     74 E4 85 F1 | 	sub	objptr, ##35444
13a14     17 26 16 F2 | 	cmp	local01, #23 wc
13a18     3C 00 90 CD |  if_b	jmp	#LR__1574
13a1c     45 00 00 FF 
13a20     74 E4 05 F1 | 	add	objptr, ##35444
13a24     F2 26 02 FB | 	rdlong	local01, objptr
13a28     45 00 00 FF 
13a2c     74 E4 85 F1 | 	sub	objptr, ##35444
13a30     20 26 16 F2 | 	cmp	local01, #32 wc
13a34     20 00 90 3D |  if_ae	jmp	#LR__1574
13a38     45 00 00 FF 
13a3c     74 E4 05 F1 | 	add	objptr, ##35444
13a40     F2 26 02 FB | 	rdlong	local01, objptr
13a44     09 26 86 F1 | 	sub	local01, #9
13a48     F2 26 62 FC | 	wrlong	local01, objptr
13a4c     45 00 00 FF 
13a50     74 E4 85 F1 | 	sub	objptr, ##35444
13a54     50 00 90 FD | 	jmp	#LR__1576
13a58                 | LR__1574
13a58     45 00 00 FF 
13a5c     74 E4 05 F1 | 	add	objptr, ##35444
13a60     F2 28 02 FB | 	rdlong	local02, objptr
13a64     45 00 00 FF 
13a68     74 E4 85 F1 | 	sub	objptr, ##35444
13a6c     0E 28 16 F2 | 	cmp	local02, #14 wc
13a70     34 00 90 CD |  if_b	jmp	#LR__1575
13a74     45 00 00 FF 
13a78     74 E4 05 F1 | 	add	objptr, ##35444
13a7c     F2 26 02 FB | 	rdlong	local01, objptr
13a80     45 00 00 FF 
13a84     74 E4 85 F1 | 	sub	objptr, ##35444
13a88     17 26 16 F2 | 	cmp	local01, #23 wc
13a8c     52 00 00 CF 
13a90     E4 E4 05 C1 |  if_b	add	objptr, ##42212
13a94     F2 28 02 CB |  if_b	rdlong	local02, objptr
13a98     27 28 06 C1 |  if_b	add	local02, #39
13a9c     F2 28 62 CC |  if_b	wrlong	local02, objptr
13aa0     52 00 00 CF 
13aa4     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
13aa8                 | LR__1575
13aa8                 | LR__1576
13aa8                 | LR__1577
13aa8                 | LR__1578
13aa8                 | LR__1579
13aa8     45 00 00 FF 
13aac     74 E4 05 F1 | 	add	objptr, ##35444
13ab0     F2 12 02 FB | 	rdlong	arg01, objptr
13ab4     45 00 00 FF 
13ab8     74 E4 85 F1 | 	sub	objptr, ##35444
13abc     C8 F7 B0 FD | 	call	#_scantochar
13ac0     FD 12 02 F6 | 	mov	arg01, result1
13ac4     74 50 B1 FD | 	call	#__system__Chr_S
13ac8     A7 FA 61 FC | 	wrlong	result1, fp
13acc     0C 00 90 FD | 	jmp	#LR__1581
13ad0                 | LR__1580
13ad0     B6 01 00 FF 
13ad4     F6 29 06 F6 | 	mov	local02, ##@LR__5901
13ad8     A7 28 62 FC | 	wrlong	local02, fp
13adc                 | LR__1581
13adc     08 4E 05 F1 | 	add	fp, #8
13ae0     A7 3E 68 FC | 	wrlong	#31, fp
13ae4     08 4E 85 F1 | 	sub	fp, #8
13ae8     A7 12 02 F6 | 	mov	arg01, fp
13aec     10 9B BF FD | 	call	#_push
13af0     A7 F0 03 F6 | 	mov	ptra, fp
13af4     B2 00 A0 FD | 	call	#popregs_
13af8                 | _do_inkey_ret
13af8     2D 00 64 FD | 	ret
13afc                 | 
13afc                 | ' 
13afc                 | ' ' ----------------  ink
13afc                 | ' 
13afc                 | ' sub do_ink
13afc                 | _do_ink
13afc     00 4A 05 F6 | 	mov	COUNT_, #0
13b00     A8 00 A0 FD | 	call	#pushregs_
13b04     0C F0 07 F1 | 	add	ptra, #12
13b08     5C 9A BF FD | 	call	#_pop
13b0c     FF 14 02 F6 | 	mov	arg02, result3
13b10     A7 FA 61 FC | 	wrlong	result1, fp
13b14     04 4E 05 F1 | 	add	fp, #4
13b18     A7 FC 61 FC | 	wrlong	result2, fp
13b1c     04 4E 05 F1 | 	add	fp, #4
13b20     A7 14 62 FC | 	wrlong	arg02, fp
13b24     08 4E 85 F1 | 	sub	fp, #8
13b28     A7 12 02 F6 | 	mov	arg01, fp
13b2c     1C 9C BF FD | 	call	#_converttoint
13b30     37 00 00 FF 
13b34     3C E4 05 F1 | 	add	objptr, ##28220
13b38     F2 FA 61 FC | 	wrlong	result1, objptr
13b3c     04 E4 85 F1 | 	sub	objptr, #4
13b40     F2 14 02 FB | 	rdlong	arg02, objptr
13b44                 | ' 
13b44                 | ' write_color:=ff
13b44     36 00 00 FF 
13b48     F7 E5 85 F1 | 	sub	objptr, ##28151
13b4c     F2 FA 61 FC | 	wrlong	result1, objptr
13b50                 | ' write_background:=bb
13b50     04 E4 05 F1 | 	add	objptr, #4
13b54     F2 14 62 FC | 	wrlong	arg02, objptr
13b58     36 00 00 FF 
13b5c     F7 E5 05 F1 | 	add	objptr, ##28151
13b60     F2 12 02 FB | 	rdlong	arg01, objptr
13b64     37 00 00 FF 
13b68     3C E4 85 F1 | 	sub	objptr, ##28220
13b6c     70 FF B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13b70     A7 F0 03 F6 | 	mov	ptra, fp
13b74     B2 00 A0 FD | 	call	#popregs_
13b78                 | _do_ink_ret
13b78     2D 00 64 FD | 	ret
13b7c                 | 
13b7c                 | ' 
13b7c                 | ' ' ----------------  int
13b7c                 | ' 
13b7c                 | ' sub do_int
13b7c                 | _do_int
13b7c     02 4A 05 F6 | 	mov	COUNT_, #2
13b80     A8 00 A0 FD | 	call	#pushregs_
13b84     10 F0 07 F1 | 	add	ptra, #16
13b88     DC 99 BF FD | 	call	#_pop
13b8c     FE 26 02 F6 | 	mov	local01, result2
13b90     FF 28 02 F6 | 	mov	local02, result3
13b94     A7 FA 61 FC | 	wrlong	result1, fp
13b98     04 4E 05 F1 | 	add	fp, #4
13b9c     A7 26 62 FC | 	wrlong	local01, fp
13ba0     04 4E 05 F1 | 	add	fp, #4
13ba4     A7 28 62 FC | 	wrlong	local02, fp
13ba8                 | ' 
13ba8                 | ' t1=pop()
13ba8                 | ' select case t1.result_type
13ba8     08 4E 85 F1 | 	sub	fp, #8
13bac     1E 28 0E F2 | 	cmp	local02, #30 wz
13bb0     14 00 90 AD |  if_e	jmp	#LR__1590
13bb4     1F 28 0E F2 | 	cmp	local02, #31 wz
13bb8     20 00 90 AD |  if_e	jmp	#LR__1591
13bbc     2B 28 0E F2 | 	cmp	local02, #43 wz
13bc0     34 00 90 AD |  if_e	jmp	#LR__1592
13bc4     50 00 90 FD | 	jmp	#LR__1593
13bc8                 | LR__1590
13bc8     A7 12 02 FB | 	rdlong	arg01, fp
13bcc     00 14 06 F6 | 	mov	arg02, #0
13bd0     68 60 B1 FD | 	call	#__system___float_tointeger
13bd4     A7 FA 61 FC | 	wrlong	result1, fp
13bd8     3C 00 90 FD | 	jmp	#LR__1593
13bdc                 | LR__1591
13bdc     A7 12 02 FB | 	rdlong	arg01, fp
13be0     9C 63 B1 FD | 	call	#__system____builtin_atof
13be4     FD 12 02 F6 | 	mov	arg01, result1
13be8     00 14 06 F6 | 	mov	arg02, #0
13bec     4C 60 B1 FD | 	call	#__system___float_tointeger
13bf0     A7 FA 61 FC | 	wrlong	result1, fp
13bf4     20 00 90 FD | 	jmp	#LR__1593
13bf8                 | LR__1592
13bf8     A7 12 02 FB | 	rdlong	arg01, fp
13bfc     E0 9A BF FD | 	call	#_convertstring
13c00     FD 12 02 F6 | 	mov	arg01, result1
13c04     78 63 B1 FD | 	call	#__system____builtin_atof
13c08     FD 12 02 F6 | 	mov	arg01, result1
13c0c     00 14 06 F6 | 	mov	arg02, #0
13c10     28 60 B1 FD | 	call	#__system___float_tointeger
13c14     A7 FA 61 FC | 	wrlong	result1, fp
13c18                 | LR__1593
13c18     08 4E 05 F1 | 	add	fp, #8
13c1c     A7 38 68 FC | 	wrlong	#28, fp
13c20     08 4E 85 F1 | 	sub	fp, #8
13c24     A7 12 02 F6 | 	mov	arg01, fp
13c28     D4 99 BF FD | 	call	#_push
13c2c     A7 F0 03 F6 | 	mov	ptra, fp
13c30     B2 00 A0 FD | 	call	#popregs_
13c34                 | _do_int_ret
13c34     2D 00 64 FD | 	ret
13c38                 | 
13c38                 | ' 
13c38                 | ' ' ----------------  input
13c38                 | ' 
13c38                 | ' sub do_input
13c38                 | _do_input
13c38     11 4A 05 F6 | 	mov	COUNT_, #17
13c3c     A8 00 A0 FD | 	call	#pushregs_
13c40     50 F1 07 F1 | 	add	ptra, #336
13c44     4A 00 00 FF 
13c48     80 E4 05 F1 | 	add	objptr, ##38016
13c4c     F2 FE 01 FB | 	rdlong	result3, objptr
13c50     FF FC 01 F6 | 	mov	result2, result3
13c54     01 FC 65 F0 | 	shl	result2, #1
13c58     FF FC 01 F1 | 	add	result2, result3
13c5c     02 FC 65 F0 | 	shl	result2, #2
13c60     03 00 00 FF 
13c64     04 E4 85 F1 | 	sub	objptr, ##1540
13c68     F2 FC 01 F1 | 	add	result2, objptr
13c6c     FE FC 01 FB | 	rdlong	result2, result2
13c70     08 4E 05 F1 | 	add	fp, #8
13c74     A7 FC 61 FC | 	wrlong	result2, fp
13c78                 | ' 
13c78                 | ' numpar=compiledline(lineptr_e).result.uresult
13c78                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13c78     08 4E 85 F1 | 	sub	fp, #8
13c7c     01 FC 15 F2 | 	cmp	result2, #1 wc
13c80     47 00 00 FF 
13c84     7C E4 85 F1 | 	sub	objptr, ##36476
13c88     14 00 90 CD |  if_b	jmp	#LR__1600
13c8c     08 4E 05 F1 | 	add	fp, #8
13c90     A7 FC 01 FB | 	rdlong	result2, fp
13c94     08 4E 85 F1 | 	sub	fp, #8
13c98     41 FC 15 F2 | 	cmp	result2, #65 wc
13c9c     50 00 90 CD |  if_b	jmp	#LR__1601
13ca0                 | LR__1600
13ca0     00 12 06 F6 | 	mov	arg01, #0
13ca4     F4 88 B1 FD | 	call	#__system___getiolock_0602
13ca8     FD 12 02 F6 | 	mov	arg01, result1
13cac     48 2C B1 FD | 	call	#__system___lockmem
13cb0     B6 01 00 FF 
13cb4     F7 15 06 F6 | 	mov	arg02, ##@LR__5902
13cb8     00 12 06 F6 | 	mov	arg01, #0
13cbc     00 16 06 F6 | 	mov	arg03, #0
13cc0     2C 39 B1 FD | 	call	#__system___basic_print_string
13cc4     00 12 06 F6 | 	mov	arg01, #0
13cc8     D0 88 B1 FD | 	call	#__system___getiolock_0602
13ccc     FD 00 68 FC | 	wrlong	#0, result1
13cd0     50 00 00 FF 
13cd4     F0 E4 05 F1 | 	add	objptr, ##41200
13cd8     F2 14 02 FB | 	rdlong	arg02, objptr
13cdc     50 00 00 FF 
13ce0     F0 E4 85 F1 | 	sub	objptr, ##41200
13ce4     27 12 06 F6 | 	mov	arg01, #39
13ce8     1C F2 B0 FD | 	call	#_printerror
13cec     44 0B 90 FD | 	jmp	#LR__1650
13cf0                 | LR__1601
13cf0     08 4E 05 F1 | 	add	fp, #8
13cf4     A7 FC 01 FB | 	rdlong	result2, fp
13cf8     01 FC 85 F1 | 	sub	result2, #1
13cfc     28 4F 05 F1 | 	add	fp, #296
13d00     A7 FC 61 FC | 	wrlong	result2, fp
13d04     3C E4 05 F1 | 	add	objptr, #60
13d08     F2 FC E1 FA | 	rdword	result2, objptr
13d0c     FE FC 51 F6 | 	abs	result2, result2 wc
13d10     01 FC 45 F0 | 	shr	result2, #1
13d14     FE FC 81 F6 | 	negc	result2, result2
13d18     0C 4E 05 F1 | 	add	fp, #12
13d1c     A7 FC 61 FC | 	wrlong	result2, fp
13d20     02 E4 05 F1 | 	add	objptr, #2
13d24     F2 26 C2 FA | 	rdbyte	local01, objptr
13d28     3E E4 85 F1 | 	sub	objptr, #62
13d2c     04 4E 05 F1 | 	add	fp, #4
13d30     A7 26 62 FC | 	wrlong	local01, fp
13d34     40 4F 85 F1 | 	sub	fp, #320
13d38                 | ' i=numpar-1
13d38                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13d38                 | ' do
13d38                 | LR__1602
13d38     C8 CA BE FD | 	call	#_edit
13d3c     A7 FA 61 FC | 	wrlong	result1, fp
13d40                 | ' 
13d40                 | '   line$=edit()
13d40                 | ' 
13d40                 | '   if v.cursor_y=cpy+1 then
13d40     3E E4 05 F1 | 	add	objptr, #62
13d44     F2 26 C2 FA | 	rdbyte	local01, objptr
13d48     3E E4 85 F1 | 	sub	objptr, #62
13d4c     40 4F 05 F1 | 	add	fp, #320
13d50     A7 16 02 FB | 	rdlong	arg03, fp
13d54     40 4F 85 F1 | 	sub	fp, #320
13d58     01 16 06 F1 | 	add	arg03, #1
13d5c     0B 27 0A F2 | 	cmp	local01, arg03 wz
13d60     6C 00 90 5D |  if_ne	jmp	#LR__1605
13d64     A7 26 02 FB | 	rdlong	local01, fp
13d68     13 13 02 F6 | 	mov	arg01, local01
13d6c     09 29 02 F6 | 	mov	local02, arg01
13d70     97 06 48 FB | 	callpa	#(@LR__1604-@LR__1603)>>2,fcache_load_ptr_
13d74                 | LR__1603
13d74     14 FB C9 FA | 	rdbyte	result1, local02 wz
13d78     01 28 06 51 |  if_ne	add	local02, #1
13d7c     F4 FF 9F 5D |  if_ne	jmp	#LR__1603
13d80                 | LR__1604
13d80     09 29 82 F1 | 	sub	local02, arg01
13d84     14 15 02 F6 | 	mov	arg02, local02
13d88     3C 4F 05 F1 | 	add	fp, #316
13d8c     A7 16 02 FB | 	rdlong	arg03, fp
13d90     3C 4F 85 F1 | 	sub	fp, #316
13d94     0B 15 82 F1 | 	sub	arg02, arg03
13d98     37 00 00 FF 
13d9c     34 E4 05 F1 | 	add	objptr, ##28212
13da0     F2 16 02 FB | 	rdlong	arg03, objptr
13da4     37 00 00 FF 
13da8     34 E4 85 F1 | 	sub	objptr, ##28212
13dac     0B 15 02 F1 | 	add	arg02, arg03
13db0     13 13 02 F6 | 	mov	arg01, local01
13db4     48 4C B1 FD | 	call	#__system__Right_S
13db8     FD 12 02 F6 | 	mov	arg01, result1
13dbc     48 50 B1 FD | 	call	#__system__RTrim_S
13dc0     FD 12 02 F6 | 	mov	arg01, result1
13dc4     80 4F B1 FD | 	call	#__system__LTrim_S
13dc8     A7 FA 61 FC | 	wrlong	result1, fp
13dcc     14 00 90 FD | 	jmp	#LR__1606
13dd0                 | LR__1605
13dd0     A7 12 02 FB | 	rdlong	arg01, fp
13dd4     30 50 B1 FD | 	call	#__system__RTrim_S
13dd8     FD 12 02 F6 | 	mov	arg01, result1
13ddc     68 4F B1 FD | 	call	#__system__LTrim_S
13de0     A7 FA 61 FC | 	wrlong	result1, fp
13de4                 | LR__1606
13de4                 | '   do
13de4                 | LR__1607
13de4     A7 14 02 FB | 	rdlong	arg02, fp
13de8     B7 01 00 FF 
13dec     02 16 06 F6 | 	mov	arg03, ##@LR__5903
13df0     01 12 06 F6 | 	mov	arg01, #1
13df4     C8 50 B1 FD | 	call	#__system__Instr
13df8     0C 4E 05 F1 | 	add	fp, #12
13dfc     A7 FA 61 FC | 	wrlong	result1, fp
13e00                 | '    comma=instr(1,line$,",")  
13e00                 | '    if comma>0  then 
13e00     0C 4E 85 F1 | 	sub	fp, #12
13e04     01 FA 15 F2 | 	cmp	result1, #1 wc
13e08     68 00 90 CD |  if_b	jmp	#LR__1610
13e0c     A7 12 02 FB | 	rdlong	arg01, fp
13e10     0C 4E 05 F1 | 	add	fp, #12
13e14     A7 14 02 FB | 	rdlong	arg02, fp
13e18     0C 4E 85 F1 | 	sub	fp, #12
13e1c     01 14 86 F1 | 	sub	arg02, #1
13e20     54 4B B1 FD | 	call	#__system__Left_S
13e24     04 4E 05 F1 | 	add	fp, #4
13e28     A7 FA 61 FC | 	wrlong	result1, fp
13e2c     04 4E 85 F1 | 	sub	fp, #4
13e30     A7 26 02 FB | 	rdlong	local01, fp
13e34     13 13 02 F6 | 	mov	arg01, local01
13e38     09 29 02 F6 | 	mov	local02, arg01
13e3c     97 06 48 FB | 	callpa	#(@LR__1609-@LR__1608)>>2,fcache_load_ptr_
13e40                 | LR__1608
13e40     14 FB C9 FA | 	rdbyte	result1, local02 wz
13e44     01 28 06 51 |  if_ne	add	local02, #1
13e48     F4 FF 9F 5D |  if_ne	jmp	#LR__1608
13e4c                 | LR__1609
13e4c     09 29 82 F1 | 	sub	local02, arg01
13e50     14 15 02 F6 | 	mov	arg02, local02
13e54     0C 4E 05 F1 | 	add	fp, #12
13e58     A7 16 02 FB | 	rdlong	arg03, fp
13e5c     0C 4E 85 F1 | 	sub	fp, #12
13e60     0B 15 82 F1 | 	sub	arg02, arg03
13e64     13 13 02 F6 | 	mov	arg01, local01
13e68     94 4B B1 FD | 	call	#__system__Right_S
13e6c     A7 FA 61 FC | 	wrlong	result1, fp
13e70     28 00 90 FD | 	jmp	#LR__1611
13e74                 | LR__1610
13e74     A7 12 02 FB | 	rdlong	arg01, fp
13e78     8C 4F B1 FD | 	call	#__system__RTrim_S
13e7c     FD 12 02 F6 | 	mov	arg01, result1
13e80     C4 4E B1 FD | 	call	#__system__LTrim_S
13e84     04 4E 05 F1 | 	add	fp, #4
13e88     A7 FA 61 FC | 	wrlong	result1, fp
13e8c     04 4E 85 F1 | 	sub	fp, #4
13e90     B7 01 00 FF 
13e94     04 26 06 F6 | 	mov	local01, ##@LR__5904
13e98     A7 26 62 FC | 	wrlong	local01, fp
13e9c                 | LR__1611
13e9c     30 4F 05 F1 | 	add	fp, #304
13ea0     A7 26 02 FB | 	rdlong	local01, fp
13ea4     02 26 66 F0 | 	shl	local01, #2
13ea8     04 4F 85 F1 | 	sub	fp, #260
13eac     A7 26 02 F1 | 	add	local01, fp
13eb0     28 4E 85 F1 | 	sub	fp, #40
13eb4     A7 FA 01 FB | 	rdlong	result1, fp
13eb8     13 FB 61 FC | 	wrlong	result1, local01
13ebc     2C 4F 05 F1 | 	add	fp, #300
13ec0     A7 26 02 FB | 	rdlong	local01, fp
13ec4     01 26 86 F1 | 	sub	local01, #1
13ec8     A7 26 62 FC | 	wrlong	local01, fp
13ecc     30 4F 85 F1 | 	sub	fp, #304
13ed0     00 26 56 F2 | 	cmps	local01, #0 wc
13ed4     18 00 90 CD |  if_b	jmp	#LR__1612
13ed8     A7 12 02 FB | 	rdlong	arg01, fp
13edc     B7 01 00 FF 
13ee0     05 14 06 F6 | 	mov	arg02, ##@LR__5905
13ee4     38 2A B1 FD | 	call	#__system___string_cmp
13ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
13eec     F4 FE 9F 5D |  if_ne	jmp	#LR__1607
13ef0                 | LR__1612
13ef0     30 4F 05 F1 | 	add	fp, #304
13ef4     A7 26 02 FB | 	rdlong	local01, fp
13ef8     30 4F 85 F1 | 	sub	fp, #304
13efc     00 26 56 F2 | 	cmps	local01, #0 wc
13f00     34 FE 9F 3D |  if_ae	jmp	#LR__1602
13f04                 | ' 
13f04                 | ' for i=0 to numpar-1
13f04     30 4F 05 F1 | 	add	fp, #304
13f08     A7 00 68 FC | 	wrlong	#0, fp
13f0c     28 4F 85 F1 | 	sub	fp, #296
13f10     A7 2A 02 FB | 	rdlong	local03, fp
13f14     08 4E 85 F1 | 	sub	fp, #8
13f18                 | LR__1613
13f18     30 4F 05 F1 | 	add	fp, #304
13f1c     A7 2C 02 FB | 	rdlong	local04, fp
13f20     30 4F 85 F1 | 	sub	fp, #304
13f24     16 27 02 F6 | 	mov	local01, local04
13f28     15 27 52 F2 | 	cmps	local01, local03 wc
13f2c     04 09 90 3D |  if_ae	jmp	#LR__1649
13f30                 | ' 
13f30                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13f30     30 4F 05 F1 | 	add	fp, #304
13f34     A7 16 02 FB | 	rdlong	arg03, fp
13f38     02 16 66 F0 | 	shl	arg03, #2
13f3c     04 4F 85 F1 | 	sub	fp, #260
13f40     A7 16 02 F1 | 	add	arg03, fp
13f44     0B 13 02 FB | 	rdlong	arg01, arg03
13f48     2C 4E 85 F1 | 	sub	fp, #44
13f4c     9C 28 BF FD | 	call	#_isnum
13f50     FD 2E 02 F6 | 	mov	local05, result1
13f54     30 4F 05 F1 | 	add	fp, #304
13f58     A7 16 02 FB | 	rdlong	arg03, fp
13f5c     02 16 66 F0 | 	shl	arg03, #2
13f60     04 4F 85 F1 | 	sub	fp, #260
13f64     A7 30 02 F6 | 	mov	local06, fp
13f68     A7 16 02 F1 | 	add	arg03, fp
13f6c     0B 13 02 FB | 	rdlong	arg01, arg03
13f70     2C 4E 85 F1 | 	sub	fp, #44
13f74     60 2C BF FD | 	call	#_isint
13f78     FD 2E 2A F5 | 	andn	local05, result1 wz
13f7c     52 00 00 5F 
13f80     10 E5 05 51 |  if_ne	add	objptr, ##42256
13f84     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
13f88     52 00 00 5F 
13f8c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
13f90                 | '   if isint(args(i)) then r=result_int 
13f90     30 4F 05 F1 | 	add	fp, #304
13f94     A7 2E 02 FB | 	rdlong	local05, fp
13f98     02 2E 66 F0 | 	shl	local05, #2
13f9c     04 4F 85 F1 | 	sub	fp, #260
13fa0     A7 2E 02 F1 | 	add	local05, fp
13fa4     17 13 02 FB | 	rdlong	arg01, local05
13fa8     2C 4E 85 F1 | 	sub	fp, #44
13fac     28 2C BF FD | 	call	#_isint
13fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
13fb4     52 00 00 5F 
13fb8     10 E5 05 51 |  if_ne	add	objptr, ##42256
13fbc     F2 38 68 5C |  if_ne	wrlong	#28, objptr
13fc0     52 00 00 5F 
13fc4     10 E5 85 51 |  if_ne	sub	objptr, ##42256
13fc8                 | '   if isdec(args(i)) then r=result_uint 
13fc8     30 4F 05 F1 | 	add	fp, #304
13fcc     A7 2E 02 FB | 	rdlong	local05, fp
13fd0     02 2E 66 F0 | 	shl	local05, #2
13fd4     04 4F 85 F1 | 	sub	fp, #260
13fd8     A7 2E 02 F1 | 	add	local05, fp
13fdc     17 13 02 FB | 	rdlong	arg01, local05
13fe0     2C 4E 85 F1 | 	sub	fp, #44
13fe4     94 2E BF FD | 	call	#_isdec
13fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
13fec     52 00 00 5F 
13ff0     10 E5 05 51 |  if_ne	add	objptr, ##42256
13ff4     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
13ff8     52 00 00 5F 
13ffc     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14000                 | '   if not isnum(args(i)) then 
14000     30 4F 05 F1 | 	add	fp, #304
14004     A7 32 02 FB | 	rdlong	local07, fp
14008     19 35 02 F6 | 	mov	local08, local07
1400c     02 34 66 F0 | 	shl	local08, #2
14010     04 4F 85 F1 | 	sub	fp, #260
14014     A7 36 02 F6 | 	mov	local09, fp
14018     A7 34 02 F1 | 	add	local08, fp
1401c     1A 13 02 FB | 	rdlong	arg01, local08
14020     2C 4E 85 F1 | 	sub	fp, #44
14024     C4 27 BF FD | 	call	#_isnum
14028     FD 2E 22 F6 | 	not	local05, result1
1402c     00 2E 0E F2 | 	cmp	local05, #0 wz
14030     44 01 90 AD |  if_e	jmp	#LR__1618
14034     52 00 00 FF 
14038     10 E5 05 F1 | 	add	objptr, ##42256
1403c     F2 56 68 FC | 	wrlong	#43, objptr
14040     52 00 00 FF 
14044     10 E5 85 F1 | 	sub	objptr, ##42256
14048     04 4E 05 F1 | 	add	fp, #4
1404c     A7 12 02 FB | 	rdlong	arg01, fp
14050     04 4E 85 F1 | 	sub	fp, #4
14054     09 29 02 F6 | 	mov	local02, arg01
14058     97 06 48 FB | 	callpa	#(@LR__1615-@LR__1614)>>2,fcache_load_ptr_
1405c                 | LR__1614
1405c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14060     01 28 06 51 |  if_ne	add	local02, #1
14064     F4 FF 9F 5D |  if_ne	jmp	#LR__1614
14068                 | LR__1615
14068     09 29 82 F1 | 	sub	local02, arg01
1406c     14 33 02 F6 | 	mov	local07, local02
14070     38 4F 05 F1 | 	add	fp, #312
14074     A7 32 62 FC | 	wrlong	local07, fp
14078     52 00 00 FF 
1407c     98 E4 05 F1 | 	add	objptr, ##42136
14080     F2 12 02 FB | 	rdlong	arg01, objptr
14084     19 13 82 F1 | 	sub	arg01, local07
14088     04 12 86 F1 | 	sub	arg01, #4
1408c     03 12 26 F5 | 	andn	arg01, #3
14090     F2 12 62 FC | 	wrlong	arg01, objptr
14094     52 00 00 FF 
14098     98 E4 85 F1 | 	sub	objptr, ##42136
1409c     A7 14 02 FB | 	rdlong	arg02, fp
140a0     38 4F 85 F1 | 	sub	fp, #312
140a4     00 F0 B0 FD | 	call	#_pslpoke
140a8                 | '     pslpoke memtop,l
140a8                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
140a8     34 4F 05 F1 | 	add	fp, #308
140ac     A7 02 68 FC | 	wrlong	#1, fp
140b0     04 4E 05 F1 | 	add	fp, #4
140b4     A7 38 02 FB | 	rdlong	local10, fp
140b8     38 4F 85 F1 | 	sub	fp, #312
140bc     01 38 06 F1 | 	add	local10, #1
140c0                 | LR__1616
140c0     34 4F 05 F1 | 	add	fp, #308
140c4     A7 2E 02 FB | 	rdlong	local05, fp
140c8     34 4F 85 F1 | 	sub	fp, #308
140cc     1C 2F 52 F2 | 	cmps	local05, local10 wc
140d0     84 00 90 3D |  if_ae	jmp	#LR__1617
140d4     52 00 00 FF 
140d8     98 E4 05 F1 | 	add	objptr, ##42136
140dc     F2 32 02 FB | 	rdlong	local07, objptr
140e0     52 00 00 FF 
140e4     98 E4 85 F1 | 	sub	objptr, ##42136
140e8     03 32 06 F1 | 	add	local07, #3
140ec     34 4F 05 F1 | 	add	fp, #308
140f0     A7 3A 02 FB | 	rdlong	local11, fp
140f4     1D 33 02 F1 | 	add	local07, local11
140f8     04 4E 85 F1 | 	sub	fp, #4
140fc     A7 3C 02 FB | 	rdlong	local12, fp
14100     02 3C 66 F0 | 	shl	local12, #2
14104     04 4F 85 F1 | 	sub	fp, #260
14108     A7 3E 02 F6 | 	mov	local13, fp
1410c     A7 3C 02 F1 | 	add	local12, fp
14110     1E 13 02 FB | 	rdlong	arg01, local12
14114     2C 4E 85 F1 | 	sub	fp, #44
14118     01 40 06 F6 | 	mov	local14, #1
1411c     1D 15 02 F6 | 	mov	arg02, local11
14120     01 16 06 F6 | 	mov	arg03, #1
14124     68 49 B1 FD | 	call	#__system__Mid_S
14128     FD 14 C2 FA | 	rdbyte	arg02, result1
1412c     19 13 02 F6 | 	mov	arg01, local07
14130     04 F0 B0 FD | 	call	#_pspoke
14134     34 4F 05 F1 | 	add	fp, #308
14138     A7 34 02 FB | 	rdlong	local08, fp
1413c     1A 33 02 F6 | 	mov	local07, local08
14140     1A 31 02 F6 | 	mov	local06, local08
14144     18 37 02 F6 | 	mov	local09, local06
14148     01 36 06 F1 | 	add	local09, #1
1414c     A7 36 62 FC | 	wrlong	local09, fp
14150     34 4F 85 F1 | 	sub	fp, #308
14154     68 FF 9F FD | 	jmp	#LR__1616
14158                 | LR__1617
14158     52 00 00 FF 
1415c     98 E4 05 F1 | 	add	objptr, ##42136
14160     F2 2E 02 FB | 	rdlong	local05, objptr
14164     52 00 00 FF 
14168     98 E4 85 F1 | 	sub	objptr, ##42136
1416c     10 4E 05 F1 | 	add	fp, #16
14170     A7 2E 62 FC | 	wrlong	local05, fp
14174     10 4E 85 F1 | 	sub	fp, #16
14178                 | LR__1618
14178     EC 93 BF FD | 	call	#_pop
1417c     FE 2E 02 F6 | 	mov	local05, result2
14180     FF 42 02 F6 | 	mov	local15, result3
14184     1C 4E 05 F1 | 	add	fp, #28
14188     A7 FA 61 FC | 	wrlong	result1, fp
1418c     04 4E 05 F1 | 	add	fp, #4
14190     A7 2E 62 FC | 	wrlong	local05, fp
14194     04 4E 05 F1 | 	add	fp, #4
14198     A7 42 62 FC | 	wrlong	local15, fp
1419c     04 4E 85 F1 | 	sub	fp, #4
141a0     A7 44 02 FB | 	rdlong	local16, fp
141a4     0C 4E 85 F1 | 	sub	fp, #12
141a8     A7 44 62 FC | 	wrlong	local16, fp
141ac                 | '   t1=pop() : vartype=t1.result.twowords(1)
141ac                 | '   select case vartype
141ac     14 4E 85 F1 | 	sub	fp, #20
141b0     22 47 0A F6 | 	mov	local17, local16 wz
141b4     64 00 90 AD |  if_e	jmp	#LR__1619
141b8     00 47 0E F2 | 	cmp	local17, #256 wz
141bc     6C 00 90 AD |  if_e	jmp	#LR__1620
141c0     01 47 0E F2 | 	cmp	local17, #257 wz
141c4     74 00 90 AD |  if_e	jmp	#LR__1621
141c8     02 47 0E F2 | 	cmp	local17, #258 wz
141cc     7C 00 90 AD |  if_e	jmp	#LR__1622
141d0     03 47 0E F2 | 	cmp	local17, #259 wz
141d4     84 00 90 AD |  if_e	jmp	#LR__1623
141d8     04 47 0E F2 | 	cmp	local17, #260 wz
141dc     8C 00 90 AD |  if_e	jmp	#LR__1624
141e0     05 47 0E F2 | 	cmp	local17, #261 wz
141e4     94 00 90 AD |  if_e	jmp	#LR__1625
141e8     06 47 0E F2 | 	cmp	local17, #262 wz
141ec     9C 00 90 AD |  if_e	jmp	#LR__1626
141f0     07 47 0E F2 | 	cmp	local17, #263 wz
141f4     A4 00 90 AD |  if_e	jmp	#LR__1627
141f8     08 47 0E F2 | 	cmp	local17, #264 wz
141fc     AC 00 90 AD |  if_e	jmp	#LR__1628
14200     09 47 0E F2 | 	cmp	local17, #265 wz
14204     B4 00 90 AD |  if_e	jmp	#LR__1629
14208     0A 47 0E F2 | 	cmp	local17, #266 wz
1420c     BC 00 90 AD |  if_e	jmp	#LR__1630
14210     0B 47 0E F2 | 	cmp	local17, #267 wz
14214     C4 00 90 AD |  if_e	jmp	#LR__1631
14218     D0 00 90 FD | 	jmp	#LR__1632
1421c                 | LR__1619
1421c     18 4E 05 F1 | 	add	fp, #24
14220     A7 18 68 FC | 	wrlong	#12, fp
14224     18 4E 85 F1 | 	sub	fp, #24
14228     CC 00 90 FD | 	jmp	#LR__1633
1422c                 | LR__1620
1422c     18 4E 05 F1 | 	add	fp, #24
14230     A7 18 68 FC | 	wrlong	#12, fp
14234     18 4E 85 F1 | 	sub	fp, #24
14238     BC 00 90 FD | 	jmp	#LR__1633
1423c                 | LR__1621
1423c     18 4E 05 F1 | 	add	fp, #24
14240     A7 02 68 FC | 	wrlong	#1, fp
14244     18 4E 85 F1 | 	sub	fp, #24
14248     AC 00 90 FD | 	jmp	#LR__1633
1424c                 | LR__1622
1424c     18 4E 05 F1 | 	add	fp, #24
14250     A7 02 68 FC | 	wrlong	#1, fp
14254     18 4E 85 F1 | 	sub	fp, #24
14258     9C 00 90 FD | 	jmp	#LR__1633
1425c                 | LR__1623
1425c     18 4E 05 F1 | 	add	fp, #24
14260     A7 04 68 FC | 	wrlong	#2, fp
14264     18 4E 85 F1 | 	sub	fp, #24
14268     8C 00 90 FD | 	jmp	#LR__1633
1426c                 | LR__1624
1426c     18 4E 05 F1 | 	add	fp, #24
14270     A7 04 68 FC | 	wrlong	#2, fp
14274     18 4E 85 F1 | 	sub	fp, #24
14278     7C 00 90 FD | 	jmp	#LR__1633
1427c                 | LR__1625
1427c     18 4E 05 F1 | 	add	fp, #24
14280     A7 08 68 FC | 	wrlong	#4, fp
14284     18 4E 85 F1 | 	sub	fp, #24
14288     6C 00 90 FD | 	jmp	#LR__1633
1428c                 | LR__1626
1428c     18 4E 05 F1 | 	add	fp, #24
14290     A7 08 68 FC | 	wrlong	#4, fp
14294     18 4E 85 F1 | 	sub	fp, #24
14298     5C 00 90 FD | 	jmp	#LR__1633
1429c                 | LR__1627
1429c     18 4E 05 F1 | 	add	fp, #24
142a0     A7 10 68 FC | 	wrlong	#8, fp
142a4     18 4E 85 F1 | 	sub	fp, #24
142a8     4C 00 90 FD | 	jmp	#LR__1633
142ac                 | LR__1628
142ac     18 4E 05 F1 | 	add	fp, #24
142b0     A7 10 68 FC | 	wrlong	#8, fp
142b4     18 4E 85 F1 | 	sub	fp, #24
142b8     3C 00 90 FD | 	jmp	#LR__1633
142bc                 | LR__1629
142bc     18 4E 05 F1 | 	add	fp, #24
142c0     A7 0C 68 FC | 	wrlong	#6, fp
142c4     18 4E 85 F1 | 	sub	fp, #24
142c8     2C 00 90 FD | 	jmp	#LR__1633
142cc                 | LR__1630
142cc     18 4E 05 F1 | 	add	fp, #24
142d0     A7 10 68 FC | 	wrlong	#8, fp
142d4     18 4E 85 F1 | 	sub	fp, #24
142d8     1C 00 90 FD | 	jmp	#LR__1633
142dc                 | LR__1631
142dc     18 4E 05 F1 | 	add	fp, #24
142e0     A7 0A 68 FC | 	wrlong	#5, fp
142e4     18 4E 85 F1 | 	sub	fp, #24
142e8     0C 00 90 FD | 	jmp	#LR__1633
142ec                 | LR__1632
142ec     18 4E 05 F1 | 	add	fp, #24
142f0     A7 18 68 FC | 	wrlong	#12, fp
142f4     18 4E 85 F1 | 	sub	fp, #24
142f8                 | LR__1633
142f8                 | '   if esize=12 andalso t1.result.uresult<$80000 then
142f8     18 4E 05 F1 | 	add	fp, #24
142fc     A7 44 02 FB | 	rdlong	local16, fp
14300     18 4E 85 F1 | 	sub	fp, #24
14304     0C 44 0E F2 | 	cmp	local16, #12 wz
14308     74 01 90 5D |  if_ne	jmp	#LR__1638
1430c     1C 4E 05 F1 | 	add	fp, #28
14310     A7 32 02 FB | 	rdlong	local07, fp
14314     1C 4E 85 F1 | 	sub	fp, #28
14318     00 04 00 FF 
1431c     00 32 16 F2 | 	cmp	local07, ##524288 wc
14320     5C 01 90 3D |  if_ae	jmp	#LR__1638
14324                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14324     52 00 00 FF 
14328     10 E5 05 F1 | 	add	objptr, ##42256
1432c     F2 44 02 FB | 	rdlong	local16, objptr
14330     52 00 00 FF 
14334     10 E5 85 F1 | 	sub	objptr, ##42256
14338     1C 44 0E F2 | 	cmp	local16, #28 wz
1433c     38 00 90 5D |  if_ne	jmp	#LR__1634
14340     1C 4E 05 F1 | 	add	fp, #28
14344     A7 44 02 FB | 	rdlong	local16, fp
14348     14 4F 05 F1 | 	add	fp, #276
1434c     A7 32 02 FB | 	rdlong	local07, fp
14350     19 35 02 F6 | 	mov	local08, local07
14354     02 34 66 F0 | 	shl	local08, #2
14358     04 4F 85 F1 | 	sub	fp, #260
1435c     A7 36 02 F6 | 	mov	local09, fp
14360     A7 34 02 F1 | 	add	local08, fp
14364     1A 13 02 FB | 	rdlong	arg01, local08
14368     00 14 06 F6 | 	mov	arg02, #0
1436c     2C 4E 85 F1 | 	sub	fp, #44
14370     78 5A B1 FD | 	call	#__system____builtin_atoi
14374     22 FB 61 FC | 	wrlong	result1, local16
14378                 | LR__1634
14378                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
14378     52 00 00 FF 
1437c     10 E5 05 F1 | 	add	objptr, ##42256
14380     F2 44 02 FB | 	rdlong	local16, objptr
14384     52 00 00 FF 
14388     10 E5 85 F1 | 	sub	objptr, ##42256
1438c     1D 44 0E F2 | 	cmp	local16, #29 wz
14390     38 00 90 5D |  if_ne	jmp	#LR__1635
14394     1C 4E 05 F1 | 	add	fp, #28
14398     A7 44 02 FB | 	rdlong	local16, fp
1439c     14 4F 05 F1 | 	add	fp, #276
143a0     A7 32 02 FB | 	rdlong	local07, fp
143a4     19 35 02 F6 | 	mov	local08, local07
143a8     02 34 66 F0 | 	shl	local08, #2
143ac     04 4F 85 F1 | 	sub	fp, #260
143b0     A7 36 02 F6 | 	mov	local09, fp
143b4     A7 34 02 F1 | 	add	local08, fp
143b8     1A 13 02 FB | 	rdlong	arg01, local08
143bc     00 14 06 F6 | 	mov	arg02, #0
143c0     2C 4E 85 F1 | 	sub	fp, #44
143c4     24 5A B1 FD | 	call	#__system____builtin_atoi
143c8     22 FB 61 FC | 	wrlong	result1, local16
143cc                 | LR__1635
143cc                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
143cc     52 00 00 FF 
143d0     10 E5 05 F1 | 	add	objptr, ##42256
143d4     F2 44 02 FB | 	rdlong	local16, objptr
143d8     52 00 00 FF 
143dc     10 E5 85 F1 | 	sub	objptr, ##42256
143e0     1E 44 0E F2 | 	cmp	local16, #30 wz
143e4     3C 00 90 5D |  if_ne	jmp	#LR__1636
143e8     30 4F 05 F1 | 	add	fp, #304
143ec     A7 32 02 FB | 	rdlong	local07, fp
143f0     02 32 66 F0 | 	shl	local07, #2
143f4     04 4F 85 F1 | 	sub	fp, #260
143f8     A7 34 02 F6 | 	mov	local08, fp
143fc     A7 32 02 F1 | 	add	local07, fp
14400     19 13 02 FB | 	rdlong	arg01, local07
14404     2C 4E 85 F1 | 	sub	fp, #44
14408     74 5B B1 FD | 	call	#__system____builtin_atof
1440c     28 4E 05 F1 | 	add	fp, #40
14410     A7 FA 61 FC | 	wrlong	result1, fp
14414     0C 4E 85 F1 | 	sub	fp, #12
14418     A7 44 02 FB | 	rdlong	local16, fp
1441c     1C 4E 85 F1 | 	sub	fp, #28
14420     22 FB 61 FC | 	wrlong	result1, local16
14424                 | LR__1636
14424                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14424     52 00 00 FF 
14428     10 E5 05 F1 | 	add	objptr, ##42256
1442c     F2 44 02 FB | 	rdlong	local16, objptr
14430     52 00 00 FF 
14434     10 E5 85 F1 | 	sub	objptr, ##42256
14438     2B 44 0E F2 | 	cmp	local16, #43 wz
1443c     18 00 90 5D |  if_ne	jmp	#LR__1637
14440     1C 4E 05 F1 | 	add	fp, #28
14444     A7 12 02 FB | 	rdlong	arg01, fp
14448     0C 4E 85 F1 | 	sub	fp, #12
1444c     A7 14 02 FB | 	rdlong	arg02, fp
14450     10 4E 85 F1 | 	sub	fp, #16
14454     09 15 62 FC | 	wrlong	arg02, arg01
14458                 | LR__1637
14458     1C 4E 05 F1 | 	add	fp, #28
1445c     A7 12 02 FB | 	rdlong	arg01, fp
14460     1C 4E 85 F1 | 	sub	fp, #28
14464     08 12 06 F1 | 	add	arg01, #8
14468     52 00 00 FF 
1446c     10 E5 05 F1 | 	add	objptr, ##42256
14470     F2 14 02 FB | 	rdlong	arg02, objptr
14474     52 00 00 FF 
14478     10 E5 85 F1 | 	sub	objptr, ##42256
1447c     09 15 62 FC | 	wrlong	arg02, arg01
14480                 | LR__1638
14480                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
14480     18 4E 05 F1 | 	add	fp, #24
14484     A7 44 02 FB | 	rdlong	local16, fp
14488     18 4E 85 F1 | 	sub	fp, #24
1448c     0C 44 0E F2 | 	cmp	local16, #12 wz
14490     94 01 90 5D |  if_ne	jmp	#LR__1643
14494     1C 4E 05 F1 | 	add	fp, #28
14498     A7 32 02 FB | 	rdlong	local07, fp
1449c     1C 4E 85 F1 | 	sub	fp, #28
144a0     00 04 00 FF 
144a4     00 32 16 F2 | 	cmp	local07, ##524288 wc
144a8     7C 01 90 CD |  if_b	jmp	#LR__1643
144ac                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
144ac     52 00 00 FF 
144b0     10 E5 05 F1 | 	add	objptr, ##42256
144b4     F2 44 02 FB | 	rdlong	local16, objptr
144b8     52 00 00 FF 
144bc     10 E5 85 F1 | 	sub	objptr, ##42256
144c0     1C 44 0E F2 | 	cmp	local16, #28 wz
144c4     40 00 90 5D |  if_ne	jmp	#LR__1639
144c8     1C 4E 05 F1 | 	add	fp, #28
144cc     A7 44 02 FB | 	rdlong	local16, fp
144d0     14 4F 05 F1 | 	add	fp, #276
144d4     A7 32 02 FB | 	rdlong	local07, fp
144d8     19 35 02 F6 | 	mov	local08, local07
144dc     02 34 66 F0 | 	shl	local08, #2
144e0     04 4F 85 F1 | 	sub	fp, #260
144e4     A7 36 02 F6 | 	mov	local09, fp
144e8     A7 34 02 F1 | 	add	local08, fp
144ec     1A 13 02 FB | 	rdlong	arg01, local08
144f0     00 14 06 F6 | 	mov	arg02, #0
144f4     2C 4E 85 F1 | 	sub	fp, #44
144f8     F0 58 B1 FD | 	call	#__system____builtin_atoi
144fc     FD 14 02 F6 | 	mov	arg02, result1
14500     22 13 02 F6 | 	mov	arg01, local16
14504     A0 EB B0 FD | 	call	#_pslpoke
14508                 | LR__1639
14508                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
14508     52 00 00 FF 
1450c     10 E5 05 F1 | 	add	objptr, ##42256
14510     F2 44 02 FB | 	rdlong	local16, objptr
14514     52 00 00 FF 
14518     10 E5 85 F1 | 	sub	objptr, ##42256
1451c     1D 44 0E F2 | 	cmp	local16, #29 wz
14520     40 00 90 5D |  if_ne	jmp	#LR__1640
14524     1C 4E 05 F1 | 	add	fp, #28
14528     A7 44 02 FB | 	rdlong	local16, fp
1452c     14 4F 05 F1 | 	add	fp, #276
14530     A7 32 02 FB | 	rdlong	local07, fp
14534     19 35 02 F6 | 	mov	local08, local07
14538     02 34 66 F0 | 	shl	local08, #2
1453c     04 4F 85 F1 | 	sub	fp, #260
14540     A7 36 02 F6 | 	mov	local09, fp
14544     A7 34 02 F1 | 	add	local08, fp
14548     1A 13 02 FB | 	rdlong	arg01, local08
1454c     00 14 06 F6 | 	mov	arg02, #0
14550     2C 4E 85 F1 | 	sub	fp, #44
14554     94 58 B1 FD | 	call	#__system____builtin_atoi
14558     FD 14 02 F6 | 	mov	arg02, result1
1455c     22 13 02 F6 | 	mov	arg01, local16
14560     44 EB B0 FD | 	call	#_pslpoke
14564                 | LR__1640
14564                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14564     52 00 00 FF 
14568     10 E5 05 F1 | 	add	objptr, ##42256
1456c     F2 44 02 FB | 	rdlong	local16, objptr
14570     52 00 00 FF 
14574     10 E5 85 F1 | 	sub	objptr, ##42256
14578     1E 44 0E F2 | 	cmp	local16, #30 wz
1457c     4C 00 90 5D |  if_ne	jmp	#LR__1641
14580     30 4F 05 F1 | 	add	fp, #304
14584     A7 32 02 FB | 	rdlong	local07, fp
14588     02 32 66 F0 | 	shl	local07, #2
1458c     04 4F 85 F1 | 	sub	fp, #260
14590     A7 34 02 F6 | 	mov	local08, fp
14594     A7 32 02 F1 | 	add	local07, fp
14598     19 13 02 FB | 	rdlong	arg01, local07
1459c     2C 4E 85 F1 | 	sub	fp, #44
145a0     DC 59 B1 FD | 	call	#__system____builtin_atof
145a4     28 4E 05 F1 | 	add	fp, #40
145a8     A7 FA 61 FC | 	wrlong	result1, fp
145ac     0C 4E 85 F1 | 	sub	fp, #12
145b0     A7 44 02 FB | 	rdlong	local16, fp
145b4     0C 4E 05 F1 | 	add	fp, #12
145b8     A7 12 02 F6 | 	mov	arg01, fp
145bc     28 4E 85 F1 | 	sub	fp, #40
145c0     09 15 02 FB | 	rdlong	arg02, arg01
145c4     22 13 02 F6 | 	mov	arg01, local16
145c8     DC EA B0 FD | 	call	#_pslpoke
145cc                 | LR__1641
145cc                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
145cc     52 00 00 FF 
145d0     10 E5 05 F1 | 	add	objptr, ##42256
145d4     F2 44 02 FB | 	rdlong	local16, objptr
145d8     52 00 00 FF 
145dc     10 E5 85 F1 | 	sub	objptr, ##42256
145e0     2B 44 0E F2 | 	cmp	local16, #43 wz
145e4     18 00 90 5D |  if_ne	jmp	#LR__1642
145e8     1C 4E 05 F1 | 	add	fp, #28
145ec     A7 12 02 FB | 	rdlong	arg01, fp
145f0     0C 4E 85 F1 | 	sub	fp, #12
145f4     A7 14 02 FB | 	rdlong	arg02, fp
145f8     10 4E 85 F1 | 	sub	fp, #16
145fc     A8 EA B0 FD | 	call	#_pslpoke
14600                 | LR__1642
14600     1C 4E 05 F1 | 	add	fp, #28
14604     A7 12 02 FB | 	rdlong	arg01, fp
14608     1C 4E 85 F1 | 	sub	fp, #28
1460c     08 12 06 F1 | 	add	arg01, #8
14610     52 00 00 FF 
14614     10 E5 05 F1 | 	add	objptr, ##42256
14618     F2 14 02 FB | 	rdlong	arg02, objptr
1461c     52 00 00 FF 
14620     10 E5 85 F1 | 	sub	objptr, ##42256
14624     80 EA B0 FD | 	call	#_pslpoke
14628                 | LR__1643
14628                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
14628     18 4E 05 F1 | 	add	fp, #24
1462c     A7 44 02 FB | 	rdlong	local16, fp
14630     18 4E 85 F1 | 	sub	fp, #24
14634     05 44 0E F2 | 	cmp	local16, #5 wz
14638     52 00 00 AF 
1463c     10 E5 05 A1 |  if_e	add	objptr, ##42256
14640     F2 42 02 AB |  if_e	rdlong	local15, objptr
14644     52 00 00 AF 
14648     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1464c     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
14650     18 00 90 5D |  if_ne	jmp	#LR__1644
14654     1C 4E 05 F1 | 	add	fp, #28
14658     A7 12 02 FB | 	rdlong	arg01, fp
1465c     0C 4E 85 F1 | 	sub	fp, #12
14660     A7 14 02 FB | 	rdlong	arg02, fp
14664     10 4E 85 F1 | 	sub	fp, #16
14668     3C EA B0 FD | 	call	#_pslpoke
1466c                 | LR__1644
1466c                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1466c     18 4E 05 F1 | 	add	fp, #24
14670     A7 44 02 FB | 	rdlong	local16, fp
14674     18 4E 85 F1 | 	sub	fp, #24
14678     04 44 0E F2 | 	cmp	local16, #4 wz
1467c     54 00 90 5D |  if_ne	jmp	#LR__1645
14680     52 00 00 FF 
14684     10 E5 05 F1 | 	add	objptr, ##42256
14688     F2 42 02 FB | 	rdlong	local15, objptr
1468c     52 00 00 FF 
14690     10 E5 85 F1 | 	sub	objptr, ##42256
14694     2B 42 0E F2 | 	cmp	local15, #43 wz
14698     38 00 90 AD |  if_e	jmp	#LR__1645
1469c     1C 4E 05 F1 | 	add	fp, #28
146a0     A7 44 02 FB | 	rdlong	local16, fp
146a4     14 4F 05 F1 | 	add	fp, #276
146a8     A7 34 02 FB | 	rdlong	local08, fp
146ac     02 34 66 F0 | 	shl	local08, #2
146b0     04 4F 85 F1 | 	sub	fp, #260
146b4     A7 34 02 F1 | 	add	local08, fp
146b8     1A 13 02 FB | 	rdlong	arg01, local08
146bc     00 14 06 F6 | 	mov	arg02, #0
146c0     2C 4E 85 F1 | 	sub	fp, #44
146c4     24 57 B1 FD | 	call	#__system____builtin_atoi
146c8     FD 14 02 F6 | 	mov	arg02, result1
146cc     22 13 02 F6 | 	mov	arg01, local16
146d0     D4 E9 B0 FD | 	call	#_pslpoke
146d4                 | LR__1645
146d4                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
146d4     18 4E 05 F1 | 	add	fp, #24
146d8     A7 44 02 FB | 	rdlong	local16, fp
146dc     18 4E 85 F1 | 	sub	fp, #24
146e0     02 44 0E F2 | 	cmp	local16, #2 wz
146e4     54 00 90 5D |  if_ne	jmp	#LR__1646
146e8     52 00 00 FF 
146ec     10 E5 05 F1 | 	add	objptr, ##42256
146f0     F2 42 02 FB | 	rdlong	local15, objptr
146f4     52 00 00 FF 
146f8     10 E5 85 F1 | 	sub	objptr, ##42256
146fc     2B 42 0E F2 | 	cmp	local15, #43 wz
14700     38 00 90 AD |  if_e	jmp	#LR__1646
14704     1C 4E 05 F1 | 	add	fp, #28
14708     A7 44 02 FB | 	rdlong	local16, fp
1470c     14 4F 05 F1 | 	add	fp, #276
14710     A7 34 02 FB | 	rdlong	local08, fp
14714     02 34 66 F0 | 	shl	local08, #2
14718     04 4F 85 F1 | 	sub	fp, #260
1471c     A7 34 02 F1 | 	add	local08, fp
14720     1A 13 02 FB | 	rdlong	arg01, local08
14724     00 14 06 F6 | 	mov	arg02, #0
14728     2C 4E 85 F1 | 	sub	fp, #44
1472c     BC 56 B1 FD | 	call	#__system____builtin_atoi
14730     FD 14 02 F6 | 	mov	arg02, result1
14734     22 13 02 F6 | 	mov	arg01, local16
14738     B4 E9 B0 FD | 	call	#_psdpoke
1473c                 | LR__1646
1473c                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1473c     18 4E 05 F1 | 	add	fp, #24
14740     A7 44 02 FB | 	rdlong	local16, fp
14744     18 4E 85 F1 | 	sub	fp, #24
14748     01 44 0E F2 | 	cmp	local16, #1 wz
1474c     54 00 90 5D |  if_ne	jmp	#LR__1647
14750     52 00 00 FF 
14754     10 E5 05 F1 | 	add	objptr, ##42256
14758     F2 42 02 FB | 	rdlong	local15, objptr
1475c     52 00 00 FF 
14760     10 E5 85 F1 | 	sub	objptr, ##42256
14764     2B 42 0E F2 | 	cmp	local15, #43 wz
14768     38 00 90 AD |  if_e	jmp	#LR__1647
1476c     1C 4E 05 F1 | 	add	fp, #28
14770     A7 44 02 FB | 	rdlong	local16, fp
14774     14 4F 05 F1 | 	add	fp, #276
14778     A7 34 02 FB | 	rdlong	local08, fp
1477c     02 34 66 F0 | 	shl	local08, #2
14780     04 4F 85 F1 | 	sub	fp, #260
14784     A7 34 02 F1 | 	add	local08, fp
14788     1A 13 02 FB | 	rdlong	arg01, local08
1478c     00 14 06 F6 | 	mov	arg02, #0
14790     2C 4E 85 F1 | 	sub	fp, #44
14794     54 56 B1 FD | 	call	#__system____builtin_atoi
14798     FD 14 02 F6 | 	mov	arg02, result1
1479c     22 13 02 F6 | 	mov	arg01, local16
147a0     94 E9 B0 FD | 	call	#_pspoke
147a4                 | LR__1647
147a4                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
147a4     18 4E 05 F1 | 	add	fp, #24
147a8     A7 44 02 FB | 	rdlong	local16, fp
147ac     18 4E 85 F1 | 	sub	fp, #24
147b0     06 44 0E F2 | 	cmp	local16, #6 wz
147b4     64 00 90 5D |  if_ne	jmp	#LR__1648
147b8     52 00 00 FF 
147bc     10 E5 05 F1 | 	add	objptr, ##42256
147c0     F2 42 02 FB | 	rdlong	local15, objptr
147c4     52 00 00 FF 
147c8     10 E5 85 F1 | 	sub	objptr, ##42256
147cc     2B 42 0E F2 | 	cmp	local15, #43 wz
147d0     48 00 90 AD |  if_e	jmp	#LR__1648
147d4     30 4F 05 F1 | 	add	fp, #304
147d8     A7 32 02 FB | 	rdlong	local07, fp
147dc     02 32 66 F0 | 	shl	local07, #2
147e0     04 4F 85 F1 | 	sub	fp, #260
147e4     A7 32 02 F1 | 	add	local07, fp
147e8     19 13 02 FB | 	rdlong	arg01, local07
147ec     2C 4E 85 F1 | 	sub	fp, #44
147f0     8C 57 B1 FD | 	call	#__system____builtin_atof
147f4     28 4E 05 F1 | 	add	fp, #40
147f8     A7 FA 61 FC | 	wrlong	result1, fp
147fc     0C 4E 85 F1 | 	sub	fp, #12
14800     A7 44 02 FB | 	rdlong	local16, fp
14804     0C 4E 05 F1 | 	add	fp, #12
14808     A7 12 02 F6 | 	mov	arg01, fp
1480c     28 4E 85 F1 | 	sub	fp, #40
14810     09 15 02 FB | 	rdlong	arg02, arg01
14814     22 13 02 F6 | 	mov	arg01, local16
14818     8C E8 B0 FD | 	call	#_pslpoke
1481c                 | LR__1648
1481c     30 4F 05 F1 | 	add	fp, #304
14820     A7 42 02 FB | 	rdlong	local15, fp
14824     01 42 06 F1 | 	add	local15, #1
14828     A7 42 62 FC | 	wrlong	local15, fp
1482c     30 4F 85 F1 | 	sub	fp, #304
14830     E4 F6 9F FD | 	jmp	#LR__1613
14834                 | LR__1649
14834                 | LR__1650
14834     A7 F0 03 F6 | 	mov	ptra, fp
14838     B2 00 A0 FD | 	call	#popregs_
1483c                 | _do_input_ret
1483c     2D 00 64 FD | 	ret
14840                 | 
14840                 | ' 
14840                 | ' ' ----------------  left$
14840                 | ' 
14840                 | ' sub do_left
14840                 | _do_left
14840     00 4A 05 F6 | 	mov	COUNT_, #0
14844     A8 00 A0 FD | 	call	#pushregs_
14848     14 F0 07 F1 | 	add	ptra, #20
1484c     4A 00 00 FF 
14850     80 E4 05 F1 | 	add	objptr, ##38016
14854     F2 16 02 FB | 	rdlong	arg03, objptr
14858     0B 15 02 F6 | 	mov	arg02, arg03
1485c     01 14 66 F0 | 	shl	arg02, #1
14860     0B 15 02 F1 | 	add	arg02, arg03
14864     02 14 66 F0 | 	shl	arg02, #2
14868     03 00 00 FF 
1486c     04 E4 85 F1 | 	sub	objptr, ##1540
14870     F2 14 02 F1 | 	add	arg02, objptr
14874     0A 17 02 FB | 	rdlong	arg03, arg02
14878     0C 4E 05 F1 | 	add	fp, #12
1487c     A7 16 62 FC | 	wrlong	arg03, fp
14880                 | ' 
14880                 | ' numpar=compiledline(lineptr_e).result.uresult
14880                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
14880     0C 4E 85 F1 | 	sub	fp, #12
14884     02 16 0E F2 | 	cmp	arg03, #2 wz
14888     47 00 00 FF 
1488c     7C E4 85 F1 | 	sub	objptr, ##36476
14890     40 00 90 AD |  if_e	jmp	#LR__1660
14894     00 12 06 F6 | 	mov	arg01, #0
14898     00 7D B1 FD | 	call	#__system___getiolock_0602
1489c     FD 12 02 F6 | 	mov	arg01, result1
148a0     54 20 B1 FD | 	call	#__system___lockmem
148a4     B7 01 00 FF 
148a8     06 14 06 F6 | 	mov	arg02, ##@LR__5906
148ac     00 12 06 F6 | 	mov	arg01, #0
148b0     00 16 06 F6 | 	mov	arg03, #0
148b4     38 2D B1 FD | 	call	#__system___basic_print_string
148b8     00 12 06 F6 | 	mov	arg01, #0
148bc     DC 7C B1 FD | 	call	#__system___getiolock_0602
148c0     FD 00 68 FC | 	wrlong	#0, result1
148c4     27 12 06 F6 | 	mov	arg01, #39
148c8     00 14 06 F6 | 	mov	arg02, #0
148cc     38 E6 B0 FD | 	call	#_printerror
148d0     EC 00 90 FD | 	jmp	#LR__1663
148d4                 | LR__1660
148d4     90 8C BF FD | 	call	#_pop
148d8     FF 16 02 F6 | 	mov	arg03, result3
148dc     A7 FA 61 FC | 	wrlong	result1, fp
148e0     04 4E 05 F1 | 	add	fp, #4
148e4     A7 FC 61 FC | 	wrlong	result2, fp
148e8     04 4E 05 F1 | 	add	fp, #4
148ec     A7 16 62 FC | 	wrlong	arg03, fp
148f0     08 4E 85 F1 | 	sub	fp, #8
148f4     A7 12 02 F6 | 	mov	arg01, fp
148f8     50 8E BF FD | 	call	#_converttoint
148fc     FD 16 02 F6 | 	mov	arg03, result1
14900     10 4E 05 F1 | 	add	fp, #16
14904     A7 16 62 FC | 	wrlong	arg03, fp
14908     10 4E 85 F1 | 	sub	fp, #16
1490c     58 8C BF FD | 	call	#_pop
14910     FF 16 02 F6 | 	mov	arg03, result3
14914     A7 FA 61 FC | 	wrlong	result1, fp
14918     04 4E 05 F1 | 	add	fp, #4
1491c     A7 FC 61 FC | 	wrlong	result2, fp
14920     04 4E 05 F1 | 	add	fp, #4
14924     A7 16 62 FC | 	wrlong	arg03, fp
14928                 | ' t1=pop() : arg=converttoint(t1)
14928                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14928     08 4E 85 F1 | 	sub	fp, #8
1492c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14930     18 00 90 5D |  if_ne	jmp	#LR__1661
14934     A7 12 02 FB | 	rdlong	arg01, fp
14938     A4 8D BF FD | 	call	#_convertstring
1493c     A7 FA 61 FC | 	wrlong	result1, fp
14940     08 4E 05 F1 | 	add	fp, #8
14944     A7 3E 68 FC | 	wrlong	#31, fp
14948     08 4E 85 F1 | 	sub	fp, #8
1494c                 | LR__1661
1494c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
1494c     08 4E 05 F1 | 	add	fp, #8
14950     A7 16 02 FB | 	rdlong	arg03, fp
14954     08 4E 85 F1 | 	sub	fp, #8
14958     1F 16 0E F2 | 	cmp	arg03, #31 wz
1495c     40 00 90 AD |  if_e	jmp	#LR__1662
14960     00 12 06 F6 | 	mov	arg01, #0
14964     34 7C B1 FD | 	call	#__system___getiolock_0602
14968     FD 12 02 F6 | 	mov	arg01, result1
1496c     88 1F B1 FD | 	call	#__system___lockmem
14970     B7 01 00 FF 
14974     0E 14 06 F6 | 	mov	arg02, ##@LR__5907
14978     00 12 06 F6 | 	mov	arg01, #0
1497c     00 16 06 F6 | 	mov	arg03, #0
14980     6C 2C B1 FD | 	call	#__system___basic_print_string
14984     00 12 06 F6 | 	mov	arg01, #0
14988     10 7C B1 FD | 	call	#__system___getiolock_0602
1498c     FD 00 68 FC | 	wrlong	#0, result1
14990     0F 12 06 F6 | 	mov	arg01, #15
14994     00 14 06 F6 | 	mov	arg02, #0
14998     6C E5 B0 FD | 	call	#_printerror
1499c     20 00 90 FD | 	jmp	#LR__1663
149a0                 | LR__1662
149a0     A7 12 02 FB | 	rdlong	arg01, fp
149a4     10 4E 05 F1 | 	add	fp, #16
149a8     A7 14 02 FB | 	rdlong	arg02, fp
149ac     10 4E 85 F1 | 	sub	fp, #16
149b0     C4 3F B1 FD | 	call	#__system__Left_S
149b4     A7 FA 61 FC | 	wrlong	result1, fp
149b8     A7 12 02 F6 | 	mov	arg01, fp
149bc     40 8C BF FD | 	call	#_push
149c0                 | LR__1663
149c0     A7 F0 03 F6 | 	mov	ptra, fp
149c4     B2 00 A0 FD | 	call	#popregs_
149c8                 | _do_left_ret
149c8     2D 00 64 FD | 	ret
149cc                 | 
149cc                 | ' 
149cc                 | ' ' ----------------  len
149cc                 | ' 
149cc                 | ' sub do_len
149cc                 | _do_len
149cc     02 4A 05 F6 | 	mov	COUNT_, #2
149d0     A8 00 A0 FD | 	call	#pushregs_
149d4     14 F0 07 F1 | 	add	ptra, #20
149d8     4A 00 00 FF 
149dc     80 E4 05 F1 | 	add	objptr, ##38016
149e0     F2 26 02 FB | 	rdlong	local01, objptr
149e4     13 17 02 F6 | 	mov	arg03, local01
149e8     01 16 66 F0 | 	shl	arg03, #1
149ec     13 17 02 F1 | 	add	arg03, local01
149f0     02 16 66 F0 | 	shl	arg03, #2
149f4     03 00 00 FF 
149f8     04 E4 85 F1 | 	sub	objptr, ##1540
149fc     F2 16 02 F1 | 	add	arg03, objptr
14a00     0B 17 02 FB | 	rdlong	arg03, arg03
14a04     0C 4E 05 F1 | 	add	fp, #12
14a08     A7 16 62 FC | 	wrlong	arg03, fp
14a0c                 | ' 
14a0c                 | ' numpar=compiledline(lineptr_e).result.uresult
14a0c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14a0c     0C 4E 85 F1 | 	sub	fp, #12
14a10     02 16 16 F2 | 	cmp	arg03, #2 wc
14a14     47 00 00 FF 
14a18     7C E4 85 F1 | 	sub	objptr, ##36476
14a1c     0C 4E 05 C1 |  if_b	add	fp, #12
14a20     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14a24     0C 4E 85 C1 |  if_b	sub	fp, #12
14a28     40 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14a2c     00 12 06 F6 | 	mov	arg01, #0
14a30     68 7B B1 FD | 	call	#__system___getiolock_0602
14a34     FD 12 02 F6 | 	mov	arg01, result1
14a38     BC 1E B1 FD | 	call	#__system___lockmem
14a3c     B7 01 00 FF 
14a40     16 14 06 F6 | 	mov	arg02, ##@LR__5908
14a44     00 12 06 F6 | 	mov	arg01, #0
14a48     00 16 06 F6 | 	mov	arg03, #0
14a4c     A0 2B B1 FD | 	call	#__system___basic_print_string
14a50     00 12 06 F6 | 	mov	arg01, #0
14a54     44 7B B1 FD | 	call	#__system___getiolock_0602
14a58     FD 00 68 FC | 	wrlong	#0, result1
14a5c     27 12 06 F6 | 	mov	arg01, #39
14a60     00 14 06 F6 | 	mov	arg02, #0
14a64     A0 E4 B0 FD | 	call	#_printerror
14a68     C8 00 90 FD | 	jmp	#LR__1675
14a6c                 | LR__1670
14a6c     F8 8A BF FD | 	call	#_pop
14a70     FF 16 02 F6 | 	mov	arg03, result3
14a74     A7 FA 61 FC | 	wrlong	result1, fp
14a78     04 4E 05 F1 | 	add	fp, #4
14a7c     A7 FC 61 FC | 	wrlong	result2, fp
14a80     04 4E 05 F1 | 	add	fp, #4
14a84     A7 16 62 FC | 	wrlong	arg03, fp
14a88                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14a88     08 4E 85 F1 | 	sub	fp, #8
14a8c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14a90     18 00 90 5D |  if_ne	jmp	#LR__1671
14a94     A7 12 02 FB | 	rdlong	arg01, fp
14a98     44 8C BF FD | 	call	#_convertstring
14a9c     A7 FA 61 FC | 	wrlong	result1, fp
14aa0     08 4E 05 F1 | 	add	fp, #8
14aa4     A7 3E 68 FC | 	wrlong	#31, fp
14aa8     08 4E 85 F1 | 	sub	fp, #8
14aac                 | LR__1671
14aac                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14aac     08 4E 05 F1 | 	add	fp, #8
14ab0     A7 16 02 FB | 	rdlong	arg03, fp
14ab4     08 4E 85 F1 | 	sub	fp, #8
14ab8     1F 16 0E F2 | 	cmp	arg03, #31 wz
14abc     40 00 90 AD |  if_e	jmp	#LR__1672
14ac0     00 12 06 F6 | 	mov	arg01, #0
14ac4     D4 7A B1 FD | 	call	#__system___getiolock_0602
14ac8     FD 12 02 F6 | 	mov	arg01, result1
14acc     28 1E B1 FD | 	call	#__system___lockmem
14ad0     B7 01 00 FF 
14ad4     1C 14 06 F6 | 	mov	arg02, ##@LR__5909
14ad8     00 12 06 F6 | 	mov	arg01, #0
14adc     00 16 06 F6 | 	mov	arg03, #0
14ae0     0C 2B B1 FD | 	call	#__system___basic_print_string
14ae4     00 12 06 F6 | 	mov	arg01, #0
14ae8     B0 7A B1 FD | 	call	#__system___getiolock_0602
14aec     FD 00 68 FC | 	wrlong	#0, result1
14af0     0F 12 06 F6 | 	mov	arg01, #15
14af4     00 14 06 F6 | 	mov	arg02, #0
14af8     0C E4 B0 FD | 	call	#_printerror
14afc     34 00 90 FD | 	jmp	#LR__1675
14b00                 | LR__1672
14b00     A7 12 02 FB | 	rdlong	arg01, fp
14b04     09 29 02 F6 | 	mov	local02, arg01
14b08     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
14b0c                 | LR__1673
14b0c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14b10     01 28 06 51 |  if_ne	add	local02, #1
14b14     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
14b18                 | LR__1674
14b18     09 29 82 F1 | 	sub	local02, arg01
14b1c     A7 28 62 FC | 	wrlong	local02, fp
14b20     08 4E 05 F1 | 	add	fp, #8
14b24     A7 38 68 FC | 	wrlong	#28, fp
14b28     08 4E 85 F1 | 	sub	fp, #8
14b2c     A7 12 02 F6 | 	mov	arg01, fp
14b30     CC 8A BF FD | 	call	#_push
14b34                 | LR__1675
14b34     A7 F0 03 F6 | 	mov	ptra, fp
14b38     B2 00 A0 FD | 	call	#popregs_
14b3c                 | _do_len_ret
14b3c     2D 00 64 FD | 	ret
14b40                 | 
14b40                 | ' 
14b40                 | ' ' ----------------  list
14b40                 | ' 
14b40                 | ' sub do_list
14b40                 | _do_list
14b40     02 4A 05 F6 | 	mov	COUNT_, #2
14b44     A8 00 A0 FD | 	call	#pushregs_
14b48     B8 F0 07 F1 | 	add	ptra, #184
14b4c     04 4E 05 F1 | 	add	fp, #4
14b50     A7 00 68 FC | 	wrlong	#0, fp
14b54     04 4E 05 F1 | 	add	fp, #4
14b58     FF FF BF FF 
14b5c     A7 FE 6B FC | 	wrlong	##2147483647, fp
14b60     08 4E 85 F1 | 	sub	fp, #8
14b64     4A 00 00 FF 
14b68     80 E4 05 F1 | 	add	objptr, ##38016
14b6c     F2 26 02 FB | 	rdlong	local01, objptr
14b70     13 17 02 F6 | 	mov	arg03, local01
14b74     01 16 66 F0 | 	shl	arg03, #1
14b78     13 17 02 F1 | 	add	arg03, local01
14b7c     02 16 66 F0 | 	shl	arg03, #2
14b80     03 00 00 FF 
14b84     04 E4 85 F1 | 	sub	objptr, ##1540
14b88     F2 16 02 F1 | 	add	arg03, objptr
14b8c     0B 17 02 FB | 	rdlong	arg03, arg03
14b90     A7 16 62 FC | 	wrlong	arg03, fp
14b94                 | ' 
14b94                 | ' startline=0 : endline=$7FFFFFFF
14b94                 | ' numpar=compiledline(lineptr_e).result.uresult
14b94                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14b94     01 16 0E F2 | 	cmp	arg03, #1 wz
14b98     47 00 00 FF 
14b9c     7C E4 85 F1 | 	sub	objptr, ##36476
14ba0     3C 00 90 5D |  if_ne	jmp	#LR__1680
14ba4     C0 89 BF FD | 	call	#_pop
14ba8     FF 26 02 F6 | 	mov	local01, result3
14bac     0C 4E 05 F1 | 	add	fp, #12
14bb0     A7 FA 61 FC | 	wrlong	result1, fp
14bb4     04 4E 05 F1 | 	add	fp, #4
14bb8     A7 FC 61 FC | 	wrlong	result2, fp
14bbc     04 4E 05 F1 | 	add	fp, #4
14bc0     A7 26 62 FC | 	wrlong	local01, fp
14bc4     08 4E 85 F1 | 	sub	fp, #8
14bc8     A7 12 02 F6 | 	mov	arg01, fp
14bcc     0C 4E 85 F1 | 	sub	fp, #12
14bd0     78 8B BF FD | 	call	#_converttoint
14bd4     04 4E 05 F1 | 	add	fp, #4
14bd8     A7 FA 61 FC | 	wrlong	result1, fp
14bdc     04 4E 85 F1 | 	sub	fp, #4
14be0                 | LR__1680
14be0                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14be0     A7 16 02 FB | 	rdlong	arg03, fp
14be4     02 16 0E F2 | 	cmp	arg03, #2 wz
14be8     7C 00 90 5D |  if_ne	jmp	#LR__1681
14bec     78 89 BF FD | 	call	#_pop
14bf0     FF 26 02 F6 | 	mov	local01, result3
14bf4     0C 4E 05 F1 | 	add	fp, #12
14bf8     A7 FA 61 FC | 	wrlong	result1, fp
14bfc     04 4E 05 F1 | 	add	fp, #4
14c00     A7 FC 61 FC | 	wrlong	result2, fp
14c04     04 4E 05 F1 | 	add	fp, #4
14c08     A7 26 62 FC | 	wrlong	local01, fp
14c0c     08 4E 85 F1 | 	sub	fp, #8
14c10     A7 12 02 F6 | 	mov	arg01, fp
14c14     0C 4E 85 F1 | 	sub	fp, #12
14c18     30 8B BF FD | 	call	#_converttoint
14c1c     FD 26 02 F6 | 	mov	local01, result1
14c20     08 4E 05 F1 | 	add	fp, #8
14c24     A7 26 62 FC | 	wrlong	local01, fp
14c28     08 4E 85 F1 | 	sub	fp, #8
14c2c     38 89 BF FD | 	call	#_pop
14c30     FF 26 02 F6 | 	mov	local01, result3
14c34     0C 4E 05 F1 | 	add	fp, #12
14c38     A7 FA 61 FC | 	wrlong	result1, fp
14c3c     04 4E 05 F1 | 	add	fp, #4
14c40     A7 FC 61 FC | 	wrlong	result2, fp
14c44     04 4E 05 F1 | 	add	fp, #4
14c48     A7 26 62 FC | 	wrlong	local01, fp
14c4c     08 4E 85 F1 | 	sub	fp, #8
14c50     A7 12 02 F6 | 	mov	arg01, fp
14c54     0C 4E 85 F1 | 	sub	fp, #12
14c58     F0 8A BF FD | 	call	#_converttoint
14c5c     04 4E 05 F1 | 	add	fp, #4
14c60     A7 FA 61 FC | 	wrlong	result1, fp
14c64     04 4E 85 F1 | 	sub	fp, #4
14c68                 | LR__1681
14c68                 | ' 
14c68                 | ' 
14c68                 | ' print
14c68     00 12 06 F6 | 	mov	arg01, #0
14c6c     2C 79 B1 FD | 	call	#__system___getiolock_0602
14c70     FD 12 02 F6 | 	mov	arg01, result1
14c74     80 1C B1 FD | 	call	#__system___lockmem
14c78     00 12 06 F6 | 	mov	arg01, #0
14c7c     0A 14 06 F6 | 	mov	arg02, #10
14c80     00 16 06 F6 | 	mov	arg03, #0
14c84     10 29 B1 FD | 	call	#__system___basic_print_char
14c88     00 12 06 F6 | 	mov	arg01, #0
14c8c     0C 79 B1 FD | 	call	#__system___getiolock_0602
14c90     FD 00 68 FC | 	wrlong	#0, result1
14c94     4A 00 00 FF 
14c98     88 E4 05 F1 | 	add	objptr, ##38024
14c9c     F2 28 02 FB | 	rdlong	local02, objptr
14ca0     08 00 00 FF 
14ca4     94 E4 05 F1 | 	add	objptr, ##4244
14ca8     F2 28 62 FC | 	wrlong	local02, objptr
14cac     52 00 00 FF 
14cb0     1C E5 85 F1 | 	sub	objptr, ##42268
14cb4                 | ' do 
14cb4                 | LR__1682
14cb4     20 4E 05 F1 | 	add	fp, #32
14cb8     A7 12 02 F6 | 	mov	arg01, fp
14cbc     20 4E 85 F1 | 	sub	fp, #32
14cc0     52 00 00 FF 
14cc4     1C E5 05 F1 | 	add	objptr, ##42268
14cc8     F2 14 02 FB | 	rdlong	arg02, objptr
14ccc     18 16 06 F6 | 	mov	arg03, #24
14cd0     47 00 00 FF 
14cd4     50 E4 85 F1 | 	sub	objptr, ##36432
14cd8     94 0F B1 FD | 	call	#_psram_spin2_read1
14cdc     0B 00 00 FF 
14ce0     CC E4 85 F1 | 	sub	objptr, ##5836
14ce4                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14ce4                 | '   
14ce4                 | '   if header(0)<> $FFFFFFFF then
14ce4     20 4E 05 F1 | 	add	fp, #32
14ce8     A7 28 02 FB | 	rdlong	local02, fp
14cec     20 4E 85 F1 | 	sub	fp, #32
14cf0     FF FF 7F FF 
14cf4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14cf8     A8 00 90 AD |  if_e	jmp	#LR__1684
14cfc     38 4E 05 F1 | 	add	fp, #56
14d00     3F 16 06 F6 | 	mov	arg03, #63
14d04     28 16 62 FD | 	setq	arg03
14d08     A7 00 68 FC | 	wrlong	#0, fp
14d0c     A7 12 02 F6 | 	mov	arg01, fp
14d10     10 4E 85 F1 | 	sub	fp, #16
14d14     A7 14 02 FB | 	rdlong	arg02, fp
14d18     04 4E 05 F1 | 	add	fp, #4
14d1c     A7 16 02 FB | 	rdlong	arg03, fp
14d20     2C 4E 85 F1 | 	sub	fp, #44
14d24     0B 00 00 FF 
14d28     CC E4 05 F1 | 	add	objptr, ##5836
14d2c     40 0F B1 FD | 	call	#_psram_spin2_read1
14d30     0B 00 00 FF 
14d34     CC E4 85 F1 | 	sub	objptr, ##5836
14d38                 | '     longfill(linebuf,0,64)
14d38                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14d38                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14d38     20 4E 05 F1 | 	add	fp, #32
14d3c     A7 28 02 FB | 	rdlong	local02, fp
14d40     1C 4E 85 F1 | 	sub	fp, #28
14d44     A7 26 02 FB | 	rdlong	local01, fp
14d48     04 4E 85 F1 | 	sub	fp, #4
14d4c     13 29 52 F2 | 	cmps	local02, local01 wc
14d50     30 00 90 CD |  if_b	jmp	#LR__1683
14d54     20 4E 05 F1 | 	add	fp, #32
14d58     A7 28 02 FB | 	rdlong	local02, fp
14d5c     18 4E 85 F1 | 	sub	fp, #24
14d60     A7 16 02 FB | 	rdlong	arg03, fp
14d64     08 4E 85 F1 | 	sub	fp, #8
14d68     0B 29 5A F2 | 	cmps	local02, arg03 wcz
14d6c     14 00 90 1D |  if_a	jmp	#LR__1683
14d70     38 4E 05 F1 | 	add	fp, #56
14d74     A7 12 02 F6 | 	mov	arg01, fp
14d78     38 4E 85 F1 | 	sub	fp, #56
14d7c                 | ' 
14d7c                 | ' write(text)
14d7c     B4 02 B1 FD | 	call	#_hg010b_spin2_write
14d80                 | ' crlf
14d80     B0 07 B1 FD | 	call	#_hg010b_spin2_crlf
14d84                 | LR__1683
14d84     34 4E 05 F1 | 	add	fp, #52
14d88     A7 28 02 FB | 	rdlong	local02, fp
14d8c     34 4E 85 F1 | 	sub	fp, #52
14d90     52 00 00 FF 
14d94     1C E5 05 F1 | 	add	objptr, ##42268
14d98     F2 28 62 FC | 	wrlong	local02, objptr
14d9c     52 00 00 FF 
14da0     1C E5 85 F1 | 	sub	objptr, ##42268
14da4                 | LR__1684
14da4     34 4E 05 F1 | 	add	fp, #52
14da8     A7 28 02 FB | 	rdlong	local02, fp
14dac     34 4E 85 F1 | 	sub	fp, #52
14db0     FF FF 3F FF 
14db4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14db8     20 4E 05 51 |  if_ne	add	fp, #32
14dbc     A7 26 02 5B |  if_ne	rdlong	local01, fp
14dc0     20 4E 85 51 |  if_ne	sub	fp, #32
14dc4     FF FF 7F 5F 
14dc8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14dcc     E4 FE 9F 5D |  if_ne	jmp	#LR__1682
14dd0     A7 F0 03 F6 | 	mov	ptra, fp
14dd4     B2 00 A0 FD | 	call	#popregs_
14dd8                 | _do_list_ret
14dd8     2D 00 64 FD | 	ret
14ddc                 | 
14ddc                 | ' 
14ddc                 | ' '-------------------- load
14ddc                 | ' 
14ddc                 | ' sub do_load(amode=0 as integer)  
14ddc                 | _do_load
14ddc     01 4A 05 F6 | 	mov	COUNT_, #1
14de0     A8 00 A0 FD | 	call	#pushregs_
14de4     AC F0 07 F1 | 	add	ptra, #172
14de8     A7 12 62 FC | 	wrlong	arg01, fp
14dec     52 00 00 FF 
14df0     D4 E4 05 F1 | 	add	objptr, ##42196
14df4     F2 02 68 FC | 	wrlong	#1, objptr
14df8     08 00 00 FF 
14dfc     54 E4 85 F1 | 	sub	objptr, ##4180
14e00     F2 14 02 FB | 	rdlong	arg02, objptr
14e04     0A 13 02 F6 | 	mov	arg01, arg02
14e08     01 12 66 F0 | 	shl	arg01, #1
14e0c     0A 13 02 F1 | 	add	arg01, arg02
14e10     02 12 66 F0 | 	shl	arg01, #2
14e14     03 00 00 FF 
14e18     04 E4 85 F1 | 	sub	objptr, ##1540
14e1c     F2 12 02 F1 | 	add	arg01, objptr
14e20     09 15 02 FB | 	rdlong	arg02, arg01
14e24     1C 4E 05 F1 | 	add	fp, #28
14e28     A7 14 62 FC | 	wrlong	arg02, fp
14e2c     8C 4E 05 F1 | 	add	fp, #140
14e30     A7 12 02 F6 | 	mov	arg01, fp
14e34     47 00 00 FF 
14e38     7C E4 85 F1 | 	sub	objptr, ##36476
14e3c     80 4E 85 F1 | 	sub	fp, #128
14e40     09 4F 61 FC | 	wrlong	fp, arg01
14e44                 | ' 
14e44                 | ' inload=1
14e44                 | ' numpar=compiledline(lineptr_e).result.uresult
14e44                 | ' lpoke varptr(line2$),varptr(line2)
14e44                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14e44     0C 4E 85 F1 | 	sub	fp, #12
14e48     A7 26 02 FB | 	rdlong	local01, fp
14e4c     1C 4E 85 F1 | 	sub	fp, #28
14e50     01 26 56 F2 | 	cmps	local01, #1 wc
14e54     24 00 90 CD |  if_b	jmp	#LR__1690
14e58     0C 87 BF FD | 	call	#_pop
14e5c     04 4E 05 F1 | 	add	fp, #4
14e60     A7 FA 61 FC | 	wrlong	result1, fp
14e64     04 4E 05 F1 | 	add	fp, #4
14e68     A7 FC 61 FC | 	wrlong	result2, fp
14e6c     04 4E 05 F1 | 	add	fp, #4
14e70     A7 FE 61 FC | 	wrlong	result3, fp
14e74     0C 4E 85 F1 | 	sub	fp, #12
14e78     28 00 90 FD | 	jmp	#LR__1691
14e7c                 | LR__1690
14e7c     52 00 00 FF 
14e80     C4 E4 05 F1 | 	add	objptr, ##42180
14e84     F2 26 02 FB | 	rdlong	local01, objptr
14e88     52 00 00 FF 
14e8c     C4 E4 85 F1 | 	sub	objptr, ##42180
14e90     04 4E 05 F1 | 	add	fp, #4
14e94     A7 26 62 FC | 	wrlong	local01, fp
14e98     08 4E 05 F1 | 	add	fp, #8
14e9c     A7 3E 68 FC | 	wrlong	#31, fp
14ea0     0C 4E 85 F1 | 	sub	fp, #12
14ea4                 | LR__1691
14ea4                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14ea4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14ea4     0C 4E 05 F1 | 	add	fp, #12
14ea8     A7 26 02 FB | 	rdlong	local01, fp
14eac     0C 4E 85 F1 | 	sub	fp, #12
14eb0     2B 26 0E F2 | 	cmp	local01, #43 wz
14eb4     24 00 90 5D |  if_ne	jmp	#LR__1692
14eb8     04 4E 05 F1 | 	add	fp, #4
14ebc     A7 12 02 FB | 	rdlong	arg01, fp
14ec0     04 4E 85 F1 | 	sub	fp, #4
14ec4     18 88 BF FD | 	call	#_convertstring
14ec8     04 4E 05 F1 | 	add	fp, #4
14ecc     A7 FA 61 FC | 	wrlong	result1, fp
14ed0     08 4E 05 F1 | 	add	fp, #8
14ed4     A7 3E 68 FC | 	wrlong	#31, fp
14ed8     0C 4E 85 F1 | 	sub	fp, #12
14edc                 | LR__1692
14edc                 | ' if t1.result_type=result_string then
14edc     0C 4E 05 F1 | 	add	fp, #12
14ee0     A7 26 02 FB | 	rdlong	local01, fp
14ee4     0C 4E 85 F1 | 	sub	fp, #12
14ee8     1F 26 0E F2 | 	cmp	local01, #31 wz
14eec     E8 02 90 5D |  if_ne	jmp	#LR__1698
14ef0                 | '   if amode<>1234 then do_new
14ef0     A7 26 02 FB | 	rdlong	local01, fp
14ef4     02 00 00 FF 
14ef8     D2 26 0E F2 | 	cmp	local01, ##1234 wz
14efc     10 0E B0 5D |  if_ne	call	#_do_new
14f00                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14f00     04 4E 05 F1 | 	add	fp, #4
14f04     A7 12 02 FB | 	rdlong	arg01, fp
14f08     04 4E 85 F1 | 	sub	fp, #4
14f0c     B7 01 00 FF 
14f10     22 14 06 F6 | 	mov	arg02, ##@LR__5910
14f14     08 1A B1 FD | 	call	#__system___string_cmp
14f18     00 FA 0D F2 | 	cmp	result1, #0 wz
14f1c     24 00 90 5D |  if_ne	jmp	#LR__1693
14f20     52 00 00 FF 
14f24     C4 E4 05 F1 | 	add	objptr, ##42180
14f28     F2 26 02 FB | 	rdlong	local01, objptr
14f2c     52 00 00 FF 
14f30     C4 E4 85 F1 | 	sub	objptr, ##42180
14f34     04 4E 05 F1 | 	add	fp, #4
14f38     A7 26 62 FC | 	wrlong	local01, fp
14f3c     04 4E 85 F1 | 	sub	fp, #4
14f40     20 00 90 FD | 	jmp	#LR__1694
14f44                 | LR__1693
14f44     04 4E 05 F1 | 	add	fp, #4
14f48     A7 26 02 FB | 	rdlong	local01, fp
14f4c     04 4E 85 F1 | 	sub	fp, #4
14f50     52 00 00 FF 
14f54     C4 E4 05 F1 | 	add	objptr, ##42180
14f58     F2 26 62 FC | 	wrlong	local01, objptr
14f5c     52 00 00 FF 
14f60     C4 E4 85 F1 | 	sub	objptr, ##42180
14f64                 | LR__1694
14f64                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14f64     09 12 06 F6 | 	mov	arg01, #9
14f68     E8 6C B1 FD | 	call	#__system__close
14f6c     09 26 06 F6 | 	mov	local01, #9
14f70     4A 00 00 FF 
14f74     94 E4 05 F1 | 	add	objptr, ##38036
14f78     F2 12 02 FB | 	rdlong	arg01, objptr
14f7c     4A 00 00 FF 
14f80     94 E4 85 F1 | 	sub	objptr, ##38036
14f84     B7 01 00 FF 
14f88     23 14 06 F6 | 	mov	arg02, ##@LR__5911
14f8c     C4 19 B1 FD | 	call	#__system___string_concat
14f90     FD 12 02 F6 | 	mov	arg01, result1
14f94     04 4E 05 F1 | 	add	fp, #4
14f98     A7 14 02 FB | 	rdlong	arg02, fp
14f9c     04 4E 85 F1 | 	sub	fp, #4
14fa0     B0 19 B1 FD | 	call	#__system___string_concat
14fa4     FD 14 02 F6 | 	mov	arg02, result1
14fa8     13 13 02 F6 | 	mov	arg01, local01
14fac     00 16 06 F6 | 	mov	arg03, #0
14fb0     48 25 B1 FD | 	call	#__system___basic_open_string
14fb4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14fb8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14fbc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
14fc0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14fc4     14 4E 05 F1 | 	add	fp, #20
14fc8     A7 FA 61 FC | 	wrlong	result1, fp
14fcc                 | '   r=geterr() 
14fcc                 | '   if r then 
14fcc     14 4E 85 F1 | 	sub	fp, #20
14fd0     54 01 90 AD |  if_e	jmp	#LR__1696
14fd4                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14fd4     09 12 06 F6 | 	mov	arg01, #9
14fd8     78 6C B1 FD | 	call	#__system__close
14fdc     09 26 06 F6 | 	mov	local01, #9
14fe0     4A 00 00 FF 
14fe4     94 E4 05 F1 | 	add	objptr, ##38036
14fe8     F2 12 02 FB | 	rdlong	arg01, objptr
14fec     4A 00 00 FF 
14ff0     94 E4 85 F1 | 	sub	objptr, ##38036
14ff4     B7 01 00 FF 
14ff8     25 14 06 F6 | 	mov	arg02, ##@LR__5912
14ffc     54 19 B1 FD | 	call	#__system___string_concat
15000     FD 12 02 F6 | 	mov	arg01, result1
15004     04 4E 05 F1 | 	add	fp, #4
15008     A7 14 02 FB | 	rdlong	arg02, fp
1500c     04 4E 85 F1 | 	sub	fp, #4
15010     40 19 B1 FD | 	call	#__system___string_concat
15014     FD 12 02 F6 | 	mov	arg01, result1
15018     B7 01 00 FF 
1501c     27 14 06 F6 | 	mov	arg02, ##@LR__5913
15020     30 19 B1 FD | 	call	#__system___string_concat
15024     FD 14 02 F6 | 	mov	arg02, result1
15028     13 13 02 F6 | 	mov	arg01, local01
1502c     00 16 06 F6 | 	mov	arg03, #0
15030     C8 24 B1 FD | 	call	#__system___basic_open_string
15034     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15038     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1503c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15040     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15044     14 4E 05 F1 | 	add	fp, #20
15048     A7 FA 61 FC | 	wrlong	result1, fp
1504c                 | '     r=geterr() 
1504c                 | '     if r then 
1504c     14 4E 85 F1 | 	sub	fp, #20
15050     A0 00 90 AD |  if_e	jmp	#LR__1695
15054                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
15054     00 12 06 F6 | 	mov	arg01, #0
15058     40 75 B1 FD | 	call	#__system___getiolock_0602
1505c     FD 12 02 F6 | 	mov	arg01, result1
15060     94 18 B1 FD | 	call	#__system___lockmem
15064     B7 01 00 FF 
15068     2C 14 06 F6 | 	mov	arg02, ##@LR__5914
1506c     00 12 06 F6 | 	mov	arg01, #0
15070     00 16 06 F6 | 	mov	arg03, #0
15074     78 25 B1 FD | 	call	#__system___basic_print_string
15078     14 4E 05 F1 | 	add	fp, #20
1507c     A7 14 02 FB | 	rdlong	arg02, fp
15080     14 4E 85 F1 | 	sub	fp, #20
15084     00 12 06 F6 | 	mov	arg01, #0
15088     00 16 06 F6 | 	mov	arg03, #0
1508c     0A 18 06 F6 | 	mov	arg04, #10
15090     A0 25 B1 FD | 	call	#__system___basic_print_integer
15094     B7 01 00 FF 
15098     3A 14 06 F6 | 	mov	arg02, ##@LR__5915
1509c     00 12 06 F6 | 	mov	arg01, #0
150a0     00 16 06 F6 | 	mov	arg03, #0
150a4     48 25 B1 FD | 	call	#__system___basic_print_string
150a8     00 26 06 F6 | 	mov	local01, #0
150ac     14 4E 05 F1 | 	add	fp, #20
150b0     A7 12 02 FB | 	rdlong	arg01, fp
150b4     14 4E 85 F1 | 	sub	fp, #20
150b8     CC 41 B1 FD | 	call	#__system___strerror
150bc     FD 14 02 F6 | 	mov	arg02, result1
150c0     13 13 02 F6 | 	mov	arg01, local01
150c4     00 16 06 F6 | 	mov	arg03, #0
150c8     24 25 B1 FD | 	call	#__system___basic_print_string
150cc     00 12 06 F6 | 	mov	arg01, #0
150d0     0A 14 06 F6 | 	mov	arg02, #10
150d4     00 16 06 F6 | 	mov	arg03, #0
150d8     BC 24 B1 FD | 	call	#__system___basic_print_char
150dc     00 12 06 F6 | 	mov	arg01, #0
150e0     B8 74 B1 FD | 	call	#__system___getiolock_0602
150e4     FD 00 68 FC | 	wrlong	#0, result1
150e8     09 12 06 F6 | 	mov	arg01, #9
150ec     64 6B B1 FD | 	call	#__system__close
150f0     94 01 90 FD | 	jmp	#LR__1700
150f4                 | LR__1695
150f4     52 00 00 FF 
150f8     C4 E4 05 F1 | 	add	objptr, ##42180
150fc     F2 12 02 FB | 	rdlong	arg01, objptr
15100     52 00 00 FF 
15104     C4 E4 85 F1 | 	sub	objptr, ##42180
15108     B7 01 00 FF 
1510c     3D 14 06 F6 | 	mov	arg02, ##@LR__5916
15110     40 18 B1 FD | 	call	#__system___string_concat
15114     52 00 00 FF 
15118     C4 E4 05 F1 | 	add	objptr, ##42180
1511c     F2 FA 61 FC | 	wrlong	result1, objptr
15120     52 00 00 FF 
15124     C4 E4 85 F1 | 	sub	objptr, ##42180
15128                 | LR__1696
15128                 | '   close #9: open currentdir$+"/"+loadname for input as #9
15128     09 12 06 F6 | 	mov	arg01, #9
1512c     24 6B B1 FD | 	call	#__system__close
15130     09 26 06 F6 | 	mov	local01, #9
15134     4A 00 00 FF 
15138     94 E4 05 F1 | 	add	objptr, ##38036
1513c     F2 12 02 FB | 	rdlong	arg01, objptr
15140     4A 00 00 FF 
15144     94 E4 85 F1 | 	sub	objptr, ##38036
15148     B7 01 00 FF 
1514c     42 14 06 F6 | 	mov	arg02, ##@LR__5917
15150     00 18 B1 FD | 	call	#__system___string_concat
15154     FD 12 02 F6 | 	mov	arg01, result1
15158     52 00 00 FF 
1515c     C4 E4 05 F1 | 	add	objptr, ##42180
15160     F2 14 02 FB | 	rdlong	arg02, objptr
15164     52 00 00 FF 
15168     C4 E4 85 F1 | 	sub	objptr, ##42180
1516c     E4 17 B1 FD | 	call	#__system___string_concat
15170     FD 14 02 F6 | 	mov	arg02, result1
15174     13 13 02 F6 | 	mov	arg01, local01
15178     00 16 06 F6 | 	mov	arg03, #0
1517c     7C 23 B1 FD | 	call	#__system___basic_open_string
15180                 | '   do
15180                 | LR__1697
15180     09 12 06 F6 | 	mov	arg01, #9
15184     7C 19 B1 FD | 	call	#__system___basic_read_line
15188     FD 26 02 F6 | 	mov	local01, result1
1518c     37 00 00 FF 
15190     1C E4 05 F1 | 	add	objptr, ##28188
15194     F2 26 62 FC | 	wrlong	local01, objptr
15198     37 00 00 FF 
1519c     1C E4 85 F1 | 	sub	objptr, ##28188
151a0     84 C6 BE FD | 	call	#_interpret
151a4     37 00 00 FF 
151a8     1C E4 05 F1 | 	add	objptr, ##28188
151ac     F2 12 02 FB | 	rdlong	arg01, objptr
151b0     37 00 00 FF 
151b4     1C E4 85 F1 | 	sub	objptr, ##28188
151b8     B7 01 00 FF 
151bc     44 14 06 F6 | 	mov	arg02, ##@LR__5918
151c0     5C 17 B1 FD | 	call	#__system___string_cmp
151c4     00 FA 0D F2 | 	cmp	result1, #0 wz
151c8     B4 FF 9F 5D |  if_ne	jmp	#LR__1697
151cc                 | '   close #9   
151cc     09 12 06 F6 | 	mov	arg01, #9
151d0     80 6A B1 FD | 	call	#__system__close
151d4     0C 00 90 FD | 	jmp	#LR__1699
151d8                 | LR__1698
151d8     1E 12 06 F6 | 	mov	arg01, #30
151dc     00 14 06 F6 | 	mov	arg02, #0
151e0     24 DD B0 FD | 	call	#_printerror
151e4                 | LR__1699
151e4                 | ' print "Loaded ";currentdir$+"/"+loadname
151e4     00 12 06 F6 | 	mov	arg01, #0
151e8     B0 73 B1 FD | 	call	#__system___getiolock_0602
151ec     FD 12 02 F6 | 	mov	arg01, result1
151f0     04 17 B1 FD | 	call	#__system___lockmem
151f4     B7 01 00 FF 
151f8     45 14 06 F6 | 	mov	arg02, ##@LR__5919
151fc     00 12 06 F6 | 	mov	arg01, #0
15200     00 16 06 F6 | 	mov	arg03, #0
15204     E8 23 B1 FD | 	call	#__system___basic_print_string
15208     00 26 06 F6 | 	mov	local01, #0
1520c     4A 00 00 FF 
15210     94 E4 05 F1 | 	add	objptr, ##38036
15214     F2 12 02 FB | 	rdlong	arg01, objptr
15218     4A 00 00 FF 
1521c     94 E4 85 F1 | 	sub	objptr, ##38036
15220     B7 01 00 FF 
15224     4D 14 06 F6 | 	mov	arg02, ##@LR__5920
15228     28 17 B1 FD | 	call	#__system___string_concat
1522c     FD 12 02 F6 | 	mov	arg01, result1
15230     52 00 00 FF 
15234     C4 E4 05 F1 | 	add	objptr, ##42180
15238     F2 14 02 FB | 	rdlong	arg02, objptr
1523c     52 00 00 FF 
15240     C4 E4 85 F1 | 	sub	objptr, ##42180
15244     0C 17 B1 FD | 	call	#__system___string_concat
15248     FD 14 02 F6 | 	mov	arg02, result1
1524c     13 13 02 F6 | 	mov	arg01, local01
15250     00 16 06 F6 | 	mov	arg03, #0
15254     98 23 B1 FD | 	call	#__system___basic_print_string
15258     00 12 06 F6 | 	mov	arg01, #0
1525c     0A 14 06 F6 | 	mov	arg02, #10
15260     00 16 06 F6 | 	mov	arg03, #0
15264     30 23 B1 FD | 	call	#__system___basic_print_char
15268     00 12 06 F6 | 	mov	arg01, #0
1526c     2C 73 B1 FD | 	call	#__system___getiolock_0602
15270     FD 00 68 FC | 	wrlong	#0, result1
15274     52 00 00 FF 
15278     D4 E4 05 F1 | 	add	objptr, ##42196
1527c     F2 00 68 FC | 	wrlong	#0, objptr
15280     52 00 00 FF 
15284     D4 E4 85 F1 | 	sub	objptr, ##42196
15288                 | LR__1700
15288     A7 F0 03 F6 | 	mov	ptra, fp
1528c     B2 00 A0 FD | 	call	#popregs_
15290                 | _do_load_ret
15290     2D 00 64 FD | 	ret
15294                 | 
15294                 | ' 
15294                 | ' '-------------------- log
15294                 | ' 
15294                 | ' sub do_log
15294                 | _do_log
15294     01 4A 05 F6 | 	mov	COUNT_, #1
15298     A8 00 A0 FD | 	call	#pushregs_
1529c     14 F0 07 F1 | 	add	ptra, #20
152a0     4A 00 00 FF 
152a4     80 E4 05 F1 | 	add	objptr, ##38016
152a8     F2 26 02 FB | 	rdlong	local01, objptr
152ac     13 17 02 F6 | 	mov	arg03, local01
152b0     01 16 66 F0 | 	shl	arg03, #1
152b4     13 17 02 F1 | 	add	arg03, local01
152b8     02 16 66 F0 | 	shl	arg03, #2
152bc     03 00 00 FF 
152c0     04 E4 85 F1 | 	sub	objptr, ##1540
152c4     F2 16 02 F1 | 	add	arg03, objptr
152c8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
152cc     0C 4E 05 F1 | 	add	fp, #12
152d0     A7 16 62 FC | 	wrlong	arg03, fp
152d4                 | ' 
152d4                 | ' numpar=compiledline(lineptr_e).result.uresult
152d4                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
152d4     0C 4E 85 F1 | 	sub	fp, #12
152d8     47 00 00 FF 
152dc     7C E4 85 F1 | 	sub	objptr, ##36476
152e0     0C 4E 05 51 |  if_ne	add	fp, #12
152e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
152e8     0C 4E 85 51 |  if_ne	sub	fp, #12
152ec     03 26 16 52 |  if_ne	cmp	local01, #3 wc
152f0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1710
152f4     00 12 06 F6 | 	mov	arg01, #0
152f8     A0 72 B1 FD | 	call	#__system___getiolock_0602
152fc     FD 12 02 F6 | 	mov	arg01, result1
15300     F4 15 B1 FD | 	call	#__system___lockmem
15304     B7 01 00 FF 
15308     4F 14 06 F6 | 	mov	arg02, ##@LR__5921
1530c     00 12 06 F6 | 	mov	arg01, #0
15310     00 16 06 F6 | 	mov	arg03, #0
15314     D8 22 B1 FD | 	call	#__system___basic_print_string
15318     00 12 06 F6 | 	mov	arg01, #0
1531c     7C 72 B1 FD | 	call	#__system___getiolock_0602
15320     FD 00 68 FC | 	wrlong	#0, result1
15324     27 12 06 F6 | 	mov	arg01, #39
15328     00 14 06 F6 | 	mov	arg02, #0
1532c     D8 DB B0 FD | 	call	#_printerror
15330     D0 00 90 FD | 	jmp	#LR__1713
15334                 | LR__1710
15334                 | ' if numpar=2 then 
15334     0C 4E 05 F1 | 	add	fp, #12
15338     A7 26 02 FB | 	rdlong	local01, fp
1533c     0C 4E 85 F1 | 	sub	fp, #12
15340     02 26 0E F2 | 	cmp	local01, #2 wz
15344     48 00 90 5D |  if_ne	jmp	#LR__1711
15348     1C 82 BF FD | 	call	#_pop
1534c     FF 26 02 F6 | 	mov	local01, result3
15350     A7 FA 61 FC | 	wrlong	result1, fp
15354     04 4E 05 F1 | 	add	fp, #4
15358     A7 FC 61 FC | 	wrlong	result2, fp
1535c     04 4E 05 F1 | 	add	fp, #4
15360     A7 26 62 FC | 	wrlong	local01, fp
15364     08 4E 85 F1 | 	sub	fp, #8
15368     A7 12 02 F6 | 	mov	arg01, fp
1536c     98 84 BF FD | 	call	#_converttofloat
15370     FD 14 02 F6 | 	mov	arg02, result1
15374     FC 16 20 FF 
15378     54 12 06 F6 | 	mov	arg01, ##1076754516
1537c     C4 53 B1 FD | 	call	#__system____builtin_logbase
15380     10 4E 05 F1 | 	add	fp, #16
15384     A7 FA 61 FC | 	wrlong	result1, fp
15388     10 4E 85 F1 | 	sub	fp, #16
1538c     10 00 90 FD | 	jmp	#LR__1712
15390                 | LR__1711
15390     10 4E 05 F1 | 	add	fp, #16
15394     00 C0 9F FF 
15398     A7 00 68 FC | 	wrlong	##1065353216, fp
1539c     10 4E 85 F1 | 	sub	fp, #16
153a0                 | LR__1712
153a0     C4 81 BF FD | 	call	#_pop
153a4     FF 26 02 F6 | 	mov	local01, result3
153a8     A7 FA 61 FC | 	wrlong	result1, fp
153ac     04 4E 05 F1 | 	add	fp, #4
153b0     A7 FC 61 FC | 	wrlong	result2, fp
153b4     04 4E 05 F1 | 	add	fp, #4
153b8     A7 26 62 FC | 	wrlong	local01, fp
153bc     08 4E 85 F1 | 	sub	fp, #8
153c0     A7 12 02 F6 | 	mov	arg01, fp
153c4     40 84 BF FD | 	call	#_converttofloat
153c8     FD 14 02 F6 | 	mov	arg02, result1
153cc     FC 16 20 FF 
153d0     54 12 06 F6 | 	mov	arg01, ##1076754516
153d4     6C 53 B1 FD | 	call	#__system____builtin_logbase
153d8     FD 12 02 F6 | 	mov	arg01, result1
153dc     10 4E 05 F1 | 	add	fp, #16
153e0     A7 14 02 FB | 	rdlong	arg02, fp
153e4     10 4E 85 F1 | 	sub	fp, #16
153e8     8C 45 B1 FD | 	call	#__system___float_div
153ec     A7 FA 61 FC | 	wrlong	result1, fp
153f0     08 4E 05 F1 | 	add	fp, #8
153f4     A7 3C 68 FC | 	wrlong	#30, fp
153f8     08 4E 85 F1 | 	sub	fp, #8
153fc     A7 12 02 F6 | 	mov	arg01, fp
15400     FC 81 BF FD | 	call	#_push
15404                 | LR__1713
15404     A7 F0 03 F6 | 	mov	ptra, fp
15408     B2 00 A0 FD | 	call	#popregs_
1540c                 | _do_log_ret
1540c     2D 00 64 FD | 	ret
15410                 | 
15410                 | ' 
15410                 | ' '-------------------- lpeek
15410                 | ' 
15410                 | ' sub do_lpeek
15410                 | _do_lpeek
15410     00 4A 05 F6 | 	mov	COUNT_, #0
15414     A8 00 A0 FD | 	call	#pushregs_
15418     14 F0 07 F1 | 	add	ptra, #20
1541c     48 81 BF FD | 	call	#_pop
15420     A7 FA 61 FC | 	wrlong	result1, fp
15424     04 4E 05 F1 | 	add	fp, #4
15428     A7 FC 61 FC | 	wrlong	result2, fp
1542c     04 4E 05 F1 | 	add	fp, #4
15430     A7 FE 61 FC | 	wrlong	result3, fp
15434     08 4E 85 F1 | 	sub	fp, #8
15438     A7 12 02 F6 | 	mov	arg01, fp
1543c     0C 83 BF FD | 	call	#_converttoint
15440     0C 4E 05 F1 | 	add	fp, #12
15444     A7 FA 61 FC | 	wrlong	result1, fp
15448                 | ' 
15448                 | ' t1=pop()
15448                 | ' a=converttoint(t1)
15448                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
15448     0C 4E 85 F1 | 	sub	fp, #12
1544c     00 04 00 FF 
15450     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15454     1C 00 90 3D |  if_ae	jmp	#LR__1720
15458     0C 4E 05 F1 | 	add	fp, #12
1545c     A7 12 02 FB | 	rdlong	arg01, fp
15460     09 FB 01 FB | 	rdlong	result1, arg01
15464     04 4E 05 F1 | 	add	fp, #4
15468     A7 FA 61 FC | 	wrlong	result1, fp
1546c     10 4E 85 F1 | 	sub	fp, #16
15470     1C 00 90 FD | 	jmp	#LR__1721
15474                 | LR__1720
15474     0C 4E 05 F1 | 	add	fp, #12
15478     A7 12 02 FB | 	rdlong	arg01, fp
1547c     0C 4E 85 F1 | 	sub	fp, #12
15480     54 DD B0 FD | 	call	#_pslpeek
15484     10 4E 05 F1 | 	add	fp, #16
15488     A7 FA 61 FC | 	wrlong	result1, fp
1548c     10 4E 85 F1 | 	sub	fp, #16
15490                 | LR__1721
15490     08 4E 05 F1 | 	add	fp, #8
15494     A7 3A 68 FC | 	wrlong	#29, fp
15498     08 4E 05 F1 | 	add	fp, #8
1549c     A7 12 02 FB | 	rdlong	arg01, fp
154a0     10 4E 85 F1 | 	sub	fp, #16
154a4     A7 12 62 FC | 	wrlong	arg01, fp
154a8     A7 12 02 F6 | 	mov	arg01, fp
154ac     50 81 BF FD | 	call	#_push
154b0     A7 F0 03 F6 | 	mov	ptra, fp
154b4     B2 00 A0 FD | 	call	#popregs_
154b8                 | _do_lpeek_ret
154b8     2D 00 64 FD | 	ret
154bc                 | 
154bc                 | ' 
154bc                 | ' '-------------------- lpoke
154bc                 | ' 
154bc                 | ' sub do_lpoke
154bc                 | _do_lpoke
154bc     01 4A 05 F6 | 	mov	COUNT_, #1
154c0     A8 00 A0 FD | 	call	#pushregs_
154c4     20 F0 07 F1 | 	add	ptra, #32
154c8     9C 80 BF FD | 	call	#_pop
154cc     FD 14 02 F6 | 	mov	arg02, result1
154d0     FE 12 02 F6 | 	mov	arg01, result2
154d4     FF 26 02 F6 | 	mov	local01, result3
154d8     A7 14 62 FC | 	wrlong	arg02, fp
154dc     04 4E 05 F1 | 	add	fp, #4
154e0     A7 12 62 FC | 	wrlong	arg01, fp
154e4     04 4E 05 F1 | 	add	fp, #4
154e8     A7 26 62 FC | 	wrlong	local01, fp
154ec     08 4E 85 F1 | 	sub	fp, #8
154f0     74 80 BF FD | 	call	#_pop
154f4     FF 26 02 F6 | 	mov	local01, result3
154f8     0C 4E 05 F1 | 	add	fp, #12
154fc     A7 FA 61 FC | 	wrlong	result1, fp
15500     04 4E 05 F1 | 	add	fp, #4
15504     A7 FC 61 FC | 	wrlong	result2, fp
15508     04 4E 05 F1 | 	add	fp, #4
1550c     A7 26 62 FC | 	wrlong	local01, fp
15510     08 4E 85 F1 | 	sub	fp, #8
15514     A7 12 02 F6 | 	mov	arg01, fp
15518     0C 4E 85 F1 | 	sub	fp, #12
1551c     2C 82 BF FD | 	call	#_converttoint
15520     18 4E 05 F1 | 	add	fp, #24
15524     A7 FA 61 FC | 	wrlong	result1, fp
15528     18 4E 85 F1 | 	sub	fp, #24
1552c     A7 12 02 F6 | 	mov	arg01, fp
15530     18 82 BF FD | 	call	#_converttoint
15534     1C 4E 05 F1 | 	add	fp, #28
15538     A7 FA 61 FC | 	wrlong	result1, fp
1553c                 | ' 
1553c                 | ' t1=pop() 'value
1553c                 | ' t2=pop() 
1553c                 | ' a=converttoint(t2) : v=converttoint(t1)
1553c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1553c     04 4E 85 F1 | 	sub	fp, #4
15540     A7 26 02 FB | 	rdlong	local01, fp
15544     18 4E 85 F1 | 	sub	fp, #24
15548     00 04 00 FF 
1554c     00 26 16 F2 | 	cmp	local01, ##524288 wc
15550     1C 00 90 3D |  if_ae	jmp	#LR__1730
15554     18 4E 05 F1 | 	add	fp, #24
15558     A7 12 02 FB | 	rdlong	arg01, fp
1555c     04 4E 05 F1 | 	add	fp, #4
15560     A7 14 02 FB | 	rdlong	arg02, fp
15564     1C 4E 85 F1 | 	sub	fp, #28
15568     09 15 62 FC | 	wrlong	arg02, arg01
1556c     18 00 90 FD | 	jmp	#LR__1731
15570                 | LR__1730
15570     18 4E 05 F1 | 	add	fp, #24
15574     A7 12 02 FB | 	rdlong	arg01, fp
15578     04 4E 05 F1 | 	add	fp, #4
1557c     A7 14 02 FB | 	rdlong	arg02, fp
15580     1C 4E 85 F1 | 	sub	fp, #28
15584     20 DB B0 FD | 	call	#_pslpoke
15588                 | LR__1731
15588     A7 F0 03 F6 | 	mov	ptra, fp
1558c     B2 00 A0 FD | 	call	#popregs_
15590                 | _do_lpoke_ret
15590     2D 00 64 FD | 	ret
15594                 | 
15594                 | ' 
15594                 | ' '-------------------- mid$
15594                 | ' 
15594                 | ' sub do_mid
15594                 | _do_mid
15594     00 4A 05 F6 | 	mov	COUNT_, #0
15598     A8 00 A0 FD | 	call	#pushregs_
1559c     18 F0 07 F1 | 	add	ptra, #24
155a0     4A 00 00 FF 
155a4     80 E4 05 F1 | 	add	objptr, ##38016
155a8     F2 16 02 FB | 	rdlong	arg03, objptr
155ac     0B 15 02 F6 | 	mov	arg02, arg03
155b0     01 14 66 F0 | 	shl	arg02, #1
155b4     0B 15 02 F1 | 	add	arg02, arg03
155b8     02 14 66 F0 | 	shl	arg02, #2
155bc     03 00 00 FF 
155c0     04 E4 85 F1 | 	sub	objptr, ##1540
155c4     F2 14 02 F1 | 	add	arg02, objptr
155c8     0A 17 02 FB | 	rdlong	arg03, arg02
155cc     0C 4E 05 F1 | 	add	fp, #12
155d0     A7 16 62 FC | 	wrlong	arg03, fp
155d4                 | ' 
155d4                 | ' numpar=compiledline(lineptr_e).result.uresult
155d4                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
155d4     0C 4E 85 F1 | 	sub	fp, #12
155d8     03 16 0E F2 | 	cmp	arg03, #3 wz
155dc     47 00 00 FF 
155e0     7C E4 85 F1 | 	sub	objptr, ##36476
155e4     40 00 90 AD |  if_e	jmp	#LR__1740
155e8     00 12 06 F6 | 	mov	arg01, #0
155ec     AC 6F B1 FD | 	call	#__system___getiolock_0602
155f0     FD 12 02 F6 | 	mov	arg01, result1
155f4     00 13 B1 FD | 	call	#__system___lockmem
155f8     B7 01 00 FF 
155fc     55 14 06 F6 | 	mov	arg02, ##@LR__5922
15600     00 12 06 F6 | 	mov	arg01, #0
15604     00 16 06 F6 | 	mov	arg03, #0
15608     E4 1F B1 FD | 	call	#__system___basic_print_string
1560c     00 12 06 F6 | 	mov	arg01, #0
15610     88 6F B1 FD | 	call	#__system___getiolock_0602
15614     FD 00 68 FC | 	wrlong	#0, result1
15618     27 12 06 F6 | 	mov	arg01, #39
1561c     00 14 06 F6 | 	mov	arg02, #0
15620     E4 D8 B0 FD | 	call	#_printerror
15624     2C 01 90 FD | 	jmp	#LR__1743
15628                 | LR__1740
15628     3C 7F BF FD | 	call	#_pop
1562c     FF 16 02 F6 | 	mov	arg03, result3
15630     A7 FA 61 FC | 	wrlong	result1, fp
15634     04 4E 05 F1 | 	add	fp, #4
15638     A7 FC 61 FC | 	wrlong	result2, fp
1563c     04 4E 05 F1 | 	add	fp, #4
15640     A7 16 62 FC | 	wrlong	arg03, fp
15644     08 4E 85 F1 | 	sub	fp, #8
15648     A7 12 02 F6 | 	mov	arg01, fp
1564c     FC 80 BF FD | 	call	#_converttoint
15650     FD 16 02 F6 | 	mov	arg03, result1
15654     14 4E 05 F1 | 	add	fp, #20
15658     A7 16 62 FC | 	wrlong	arg03, fp
1565c     14 4E 85 F1 | 	sub	fp, #20
15660     04 7F BF FD | 	call	#_pop
15664     FF 16 02 F6 | 	mov	arg03, result3
15668     A7 FA 61 FC | 	wrlong	result1, fp
1566c     04 4E 05 F1 | 	add	fp, #4
15670     A7 FC 61 FC | 	wrlong	result2, fp
15674     04 4E 05 F1 | 	add	fp, #4
15678     A7 16 62 FC | 	wrlong	arg03, fp
1567c     08 4E 85 F1 | 	sub	fp, #8
15680     A7 12 02 F6 | 	mov	arg01, fp
15684     C4 80 BF FD | 	call	#_converttoint
15688     FD 16 02 F6 | 	mov	arg03, result1
1568c     10 4E 05 F1 | 	add	fp, #16
15690     A7 16 62 FC | 	wrlong	arg03, fp
15694     10 4E 85 F1 | 	sub	fp, #16
15698     CC 7E BF FD | 	call	#_pop
1569c     FF 16 02 F6 | 	mov	arg03, result3
156a0     A7 FA 61 FC | 	wrlong	result1, fp
156a4     04 4E 05 F1 | 	add	fp, #4
156a8     A7 FC 61 FC | 	wrlong	result2, fp
156ac     04 4E 05 F1 | 	add	fp, #4
156b0     A7 16 62 FC | 	wrlong	arg03, fp
156b4                 | ' t1=pop() : arg2=converttoint(t1)
156b4                 | ' t1=pop() : arg1=converttoint(t1)
156b4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
156b4     08 4E 85 F1 | 	sub	fp, #8
156b8     2B 16 0E F2 | 	cmp	arg03, #43 wz
156bc     18 00 90 5D |  if_ne	jmp	#LR__1741
156c0     A7 12 02 FB | 	rdlong	arg01, fp
156c4     18 80 BF FD | 	call	#_convertstring
156c8     A7 FA 61 FC | 	wrlong	result1, fp
156cc     08 4E 05 F1 | 	add	fp, #8
156d0     A7 3E 68 FC | 	wrlong	#31, fp
156d4     08 4E 85 F1 | 	sub	fp, #8
156d8                 | LR__1741
156d8                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
156d8     08 4E 05 F1 | 	add	fp, #8
156dc     A7 16 02 FB | 	rdlong	arg03, fp
156e0     08 4E 85 F1 | 	sub	fp, #8
156e4     1F 16 0E F2 | 	cmp	arg03, #31 wz
156e8     40 00 90 AD |  if_e	jmp	#LR__1742
156ec     00 12 06 F6 | 	mov	arg01, #0
156f0     A8 6E B1 FD | 	call	#__system___getiolock_0602
156f4     FD 12 02 F6 | 	mov	arg01, result1
156f8     FC 11 B1 FD | 	call	#__system___lockmem
156fc     B7 01 00 FF 
15700     5C 14 06 F6 | 	mov	arg02, ##@LR__5923
15704     00 12 06 F6 | 	mov	arg01, #0
15708     00 16 06 F6 | 	mov	arg03, #0
1570c     E0 1E B1 FD | 	call	#__system___basic_print_string
15710     00 12 06 F6 | 	mov	arg01, #0
15714     84 6E B1 FD | 	call	#__system___getiolock_0602
15718     FD 00 68 FC | 	wrlong	#0, result1
1571c     0F 12 06 F6 | 	mov	arg01, #15
15720     00 14 06 F6 | 	mov	arg02, #0
15724     E0 D7 B0 FD | 	call	#_printerror
15728     28 00 90 FD | 	jmp	#LR__1743
1572c                 | LR__1742
1572c     A7 12 02 FB | 	rdlong	arg01, fp
15730     10 4E 05 F1 | 	add	fp, #16
15734     A7 14 02 FB | 	rdlong	arg02, fp
15738     04 4E 05 F1 | 	add	fp, #4
1573c     A7 16 02 FB | 	rdlong	arg03, fp
15740     14 4E 85 F1 | 	sub	fp, #20
15744     48 33 B1 FD | 	call	#__system__Mid_S
15748     A7 FA 61 FC | 	wrlong	result1, fp
1574c     A7 12 02 F6 | 	mov	arg01, fp
15750     AC 7E BF FD | 	call	#_push
15754                 | LR__1743
15754     A7 F0 03 F6 | 	mov	ptra, fp
15758     B2 00 A0 FD | 	call	#popregs_
1575c                 | _do_mid_ret
1575c     2D 00 64 FD | 	ret
15760                 | 
15760                 | ' 
15760                 | ' '-------------------- mkdir
15760                 | ' 
15760                 | ' sub do_mkdir
15760                 | _do_mkdir
15760     04 4A 05 F6 | 	mov	COUNT_, #4
15764     A8 00 A0 FD | 	call	#pushregs_
15768     FC 7D BF FD | 	call	#_pop
1576c     FE 18 02 F6 | 	mov	arg04, result2
15770     FF 16 02 F6 | 	mov	arg03, result3
15774     FD 26 02 F6 | 	mov	local01, result1
15778     0C 29 02 F6 | 	mov	local02, arg04
1577c     0B 2B 02 F6 | 	mov	local03, arg03
15780                 | ' 
15780                 | ' t1=pop()
15780                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15780     2B 2A 0E F2 | 	cmp	local03, #43 wz
15784     10 00 90 5D |  if_ne	jmp	#LR__1750
15788     13 13 02 F6 | 	mov	arg01, local01
1578c     50 7F BF FD | 	call	#_convertstring
15790     FD 26 02 F6 | 	mov	local01, result1
15794     1F 2A 06 F6 | 	mov	local03, #31
15798                 | LR__1750
15798                 | ' if t1.result_type<>result_string then printerror(15): return
15798     1F 2A 0E F2 | 	cmp	local03, #31 wz
1579c     10 00 90 AD |  if_e	jmp	#LR__1751
157a0     0F 12 06 F6 | 	mov	arg01, #15
157a4     00 14 06 F6 | 	mov	arg02, #0
157a8     5C D7 B0 FD | 	call	#_printerror
157ac     64 00 90 FD | 	jmp	#LR__1753
157b0                 | LR__1751
157b0     13 13 02 F6 | 	mov	arg01, local01
157b4     14 3A B1 FD | 	call	#__system___mkdir
157b8     FD 2C 0A F6 | 	mov	local04, result1 wz
157bc                 | ' filename$=t1.result.sresult
157bc                 | ' err=mkdir(filename$)
157bc                 | ' 'err=geterr() : 
157bc                 | ' if err<>0 then print "Cannot create a directory: system error "; err
157bc     54 00 90 AD |  if_e	jmp	#LR__1752
157c0     00 12 06 F6 | 	mov	arg01, #0
157c4     D4 6D B1 FD | 	call	#__system___getiolock_0602
157c8     FD 12 02 F6 | 	mov	arg01, result1
157cc     28 11 B1 FD | 	call	#__system___lockmem
157d0     B7 01 00 FF 
157d4     63 14 06 F6 | 	mov	arg02, ##@LR__5924
157d8     00 12 06 F6 | 	mov	arg01, #0
157dc     00 16 06 F6 | 	mov	arg03, #0
157e0     0C 1E B1 FD | 	call	#__system___basic_print_string
157e4     00 12 06 F6 | 	mov	arg01, #0
157e8     16 15 02 F6 | 	mov	arg02, local04
157ec     00 16 06 F6 | 	mov	arg03, #0
157f0     0A 18 06 F6 | 	mov	arg04, #10
157f4     3C 1E B1 FD | 	call	#__system___basic_print_integer
157f8     00 12 06 F6 | 	mov	arg01, #0
157fc     0A 14 06 F6 | 	mov	arg02, #10
15800     00 16 06 F6 | 	mov	arg03, #0
15804     90 1D B1 FD | 	call	#__system___basic_print_char
15808     00 12 06 F6 | 	mov	arg01, #0
1580c     8C 6D B1 FD | 	call	#__system___getiolock_0602
15810     FD 00 68 FC | 	wrlong	#0, result1
15814                 | LR__1752
15814                 | LR__1753
15814     A7 F0 03 F6 | 	mov	ptra, fp
15818     B2 00 A0 FD | 	call	#popregs_
1581c                 | _do_mkdir_ret
1581c     2D 00 64 FD | 	ret
15820                 | 
15820                 | ' 
15820                 | ' '-------------------- mode
15820                 | ' 
15820                 | ' sub do_mode
15820                 | _do_mode
15820     05 4A 05 F6 | 	mov	COUNT_, #5
15824     A8 00 A0 FD | 	call	#pushregs_
15828     3C 7D BF FD | 	call	#_pop
1582c     FD 26 02 F6 | 	mov	local01, result1
15830     FE 28 02 F6 | 	mov	local02, result2
15834     FF 2A 02 F6 | 	mov	local03, result3
15838                 | ' t1=pop() 
15838                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15838     1E 2A 0E F2 | 	cmp	local03, #30 wz
1583c     10 00 90 5D |  if_ne	jmp	#LR__1760
15840     13 13 02 F6 | 	mov	arg01, local01
15844     00 14 06 F6 | 	mov	arg02, #0
15848     F0 43 B1 FD | 	call	#__system___float_tointeger
1584c     FD 26 02 F6 | 	mov	local01, result1
15850                 | LR__1760
15850                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15850     1F 2A 0E F2 | 	cmp	local03, #31 wz
15854     18 00 90 5D |  if_ne	jmp	#LR__1761
15858     13 13 02 F6 | 	mov	arg01, local01
1585c     20 47 B1 FD | 	call	#__system____builtin_atof
15860     FD 12 02 F6 | 	mov	arg01, result1
15864     00 14 06 F6 | 	mov	arg02, #0
15868     D0 43 B1 FD | 	call	#__system___float_tointeger
1586c     FD 26 02 F6 | 	mov	local01, result1
15870                 | LR__1761
15870                 | ' select case t1.result.iresult
15870     13 2D 02 F6 | 	mov	local04, local01
15874     05 2C 26 F3 | 	fle	local04, #5
15878     30 2C 62 FD | 	jmprel	local04
1587c                 | LR__1762
1587c     14 00 90 FD | 	jmp	#LR__1763
15880     A8 00 90 FD | 	jmp	#LR__1764
15884     10 01 90 FD | 	jmp	#LR__1765
15888     78 01 90 FD | 	jmp	#LR__1766
1588c     E0 01 90 FD | 	jmp	#LR__1767
15890     70 02 90 FD | 	jmp	#LR__1768
15894                 | LR__1763
15894     37 00 00 FF 
15898     40 E4 05 F1 | 	add	objptr, ##28224
1589c     F2 02 68 FC | 	wrlong	#1, objptr
158a0     04 E4 85 F1 | 	sub	objptr, #4
158a4     F2 34 69 FC | 	wrlong	#154, objptr
158a8     19 00 00 FF 
158ac     00 E5 05 F1 | 	add	objptr, ##13056
158b0     F2 02 68 FC | 	wrlong	#1, objptr
158b4     19 00 00 FF 
158b8     04 E5 85 F1 | 	sub	objptr, ##13060
158bc     F2 26 69 FC | 	wrlong	#147, objptr
158c0     37 00 00 FF 
158c4     38 E4 85 F1 | 	sub	objptr, ##28216
158c8     04 12 06 F6 | 	mov	arg01, #4
158cc     54 F2 B0 FD | 	call	#_hg010b_spin2_setfontfamily
158d0     37 00 00 FF 
158d4     3C E4 05 F1 | 	add	objptr, ##28220
158d8     F2 12 02 FB | 	rdlong	arg01, objptr
158dc     04 E4 85 F1 | 	sub	objptr, #4
158e0     F2 14 02 FB | 	rdlong	arg02, objptr
158e4                 | ' 
158e4                 | ' write_color:=ff
158e4     36 00 00 FF 
158e8     F7 E5 85 F1 | 	sub	objptr, ##28151
158ec     F2 12 62 FC | 	wrlong	arg01, objptr
158f0                 | ' write_background:=bb
158f0     04 E4 05 F1 | 	add	objptr, #4
158f4     F2 14 62 FC | 	wrlong	arg02, objptr
158f8     01 00 00 FF 
158fc     00 EA 05 F1 | 	add	ptr__dat__, ##512
15900     52 00 00 FF 
15904     5F E4 05 F1 | 	add	objptr, ##42079
15908     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1590c     04 E4 85 F1 | 	sub	objptr, #4
15910     03 00 80 FF 
15914     F2 30 69 FC | 	wrlong	##1688, objptr
15918     52 00 00 FF 
1591c     A0 E4 85 F1 | 	sub	objptr, ##42144
15920     01 00 00 FF 
15924     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15928     D8 01 90 FD | 	jmp	#LR__1768
1592c                 | LR__1764
1592c     37 00 00 FF 
15930     40 E4 05 F1 | 	add	objptr, ##28224
15934     F2 00 68 FC | 	wrlong	#0, objptr
15938     04 E4 85 F1 | 	sub	objptr, #4
1593c     F2 2E 68 FC | 	wrlong	#23, objptr
15940     19 00 00 FF 
15944     00 E5 05 F1 | 	add	objptr, ##13056
15948     F2 00 68 FC | 	wrlong	#0, objptr
1594c     19 00 00 FF 
15950     04 E5 85 F1 | 	sub	objptr, ##13060
15954     F2 00 68 FC | 	wrlong	#0, objptr
15958     37 00 00 FF 
1595c     38 E4 85 F1 | 	sub	objptr, ##28216
15960     00 12 06 F6 | 	mov	arg01, #0
15964     BC F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15968     37 00 00 FF 
1596c     3C E4 05 F1 | 	add	objptr, ##28220
15970     F2 12 02 FB | 	rdlong	arg01, objptr
15974     04 E4 85 F1 | 	sub	objptr, #4
15978     F2 14 02 FB | 	rdlong	arg02, objptr
1597c                 | ' 
1597c                 | ' write_color:=ff
1597c     36 00 00 FF 
15980     F7 E5 85 F1 | 	sub	objptr, ##28151
15984     F2 12 62 FC | 	wrlong	arg01, objptr
15988                 | ' write_background:=bb
15988     04 E4 05 F1 | 	add	objptr, #4
1598c     F2 14 62 FC | 	wrlong	arg02, objptr
15990     45 E4 85 F1 | 	sub	objptr, #69
15994     6C 01 90 FD | 	jmp	#LR__1768
15998                 | LR__1765
15998     37 00 00 FF 
1599c     40 E4 05 F1 | 	add	objptr, ##28224
159a0     F2 00 68 FC | 	wrlong	#0, objptr
159a4     04 E4 85 F1 | 	sub	objptr, #4
159a8     F2 6A 69 FC | 	wrlong	#181, objptr
159ac     19 00 00 FF 
159b0     00 E5 05 F1 | 	add	objptr, ##13056
159b4     F2 00 68 FC | 	wrlong	#0, objptr
159b8     19 00 00 FF 
159bc     04 E5 85 F1 | 	sub	objptr, ##13060
159c0     F2 00 68 FC | 	wrlong	#0, objptr
159c4     37 00 00 FF 
159c8     38 E4 85 F1 | 	sub	objptr, ##28216
159cc     00 12 06 F6 | 	mov	arg01, #0
159d0     50 F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
159d4     37 00 00 FF 
159d8     3C E4 05 F1 | 	add	objptr, ##28220
159dc     F2 12 02 FB | 	rdlong	arg01, objptr
159e0     04 E4 85 F1 | 	sub	objptr, #4
159e4     F2 14 02 FB | 	rdlong	arg02, objptr
159e8                 | ' 
159e8                 | ' write_color:=ff
159e8     36 00 00 FF 
159ec     F7 E5 85 F1 | 	sub	objptr, ##28151
159f0     F2 12 62 FC | 	wrlong	arg01, objptr
159f4                 | ' write_background:=bb
159f4     04 E4 05 F1 | 	add	objptr, #4
159f8     F2 14 62 FC | 	wrlong	arg02, objptr
159fc     45 E4 85 F1 | 	sub	objptr, #69
15a00     00 01 90 FD | 	jmp	#LR__1768
15a04                 | LR__1766
15a04     37 00 00 FF 
15a08     40 E4 05 F1 | 	add	objptr, ##28224
15a0c     F2 00 68 FC | 	wrlong	#0, objptr
15a10     04 E4 85 F1 | 	sub	objptr, #4
15a14     F2 1E 68 FC | 	wrlong	#15, objptr
15a18     19 00 00 FF 
15a1c     00 E5 05 F1 | 	add	objptr, ##13056
15a20     F2 00 68 FC | 	wrlong	#0, objptr
15a24     19 00 00 FF 
15a28     04 E5 85 F1 | 	sub	objptr, ##13060
15a2c     F2 00 68 FC | 	wrlong	#0, objptr
15a30     37 00 00 FF 
15a34     38 E4 85 F1 | 	sub	objptr, ##28216
15a38     00 12 06 F6 | 	mov	arg01, #0
15a3c     E4 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15a40     37 00 00 FF 
15a44     3C E4 05 F1 | 	add	objptr, ##28220
15a48     F2 12 02 FB | 	rdlong	arg01, objptr
15a4c     04 E4 85 F1 | 	sub	objptr, #4
15a50     F2 14 02 FB | 	rdlong	arg02, objptr
15a54                 | ' 
15a54                 | ' write_color:=ff
15a54     36 00 00 FF 
15a58     F7 E5 85 F1 | 	sub	objptr, ##28151
15a5c     F2 12 62 FC | 	wrlong	arg01, objptr
15a60                 | ' write_background:=bb
15a60     04 E4 05 F1 | 	add	objptr, #4
15a64     F2 14 62 FC | 	wrlong	arg02, objptr
15a68     45 E4 85 F1 | 	sub	objptr, #69
15a6c     94 00 90 FD | 	jmp	#LR__1768
15a70                 | LR__1767
15a70     37 00 00 FF 
15a74     40 E4 05 F1 | 	add	objptr, ##28224
15a78     F2 02 68 FC | 	wrlong	#1, objptr
15a7c     04 E4 85 F1 | 	sub	objptr, #4
15a80     F2 02 68 FC | 	wrlong	#1, objptr
15a84     19 00 00 FF 
15a88     00 E5 05 F1 | 	add	objptr, ##13056
15a8c     F2 02 68 FC | 	wrlong	#1, objptr
15a90     19 00 00 FF 
15a94     04 E5 85 F1 | 	sub	objptr, ##13060
15a98     F2 1C 68 FC | 	wrlong	#14, objptr
15a9c     37 00 00 FF 
15aa0     38 E4 85 F1 | 	sub	objptr, ##28216
15aa4     04 12 06 F6 | 	mov	arg01, #4
15aa8     78 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15aac     37 00 00 FF 
15ab0     3C E4 05 F1 | 	add	objptr, ##28220
15ab4     F2 12 02 FB | 	rdlong	arg01, objptr
15ab8     04 E4 85 F1 | 	sub	objptr, #4
15abc     F2 14 02 FB | 	rdlong	arg02, objptr
15ac0                 | ' 
15ac0                 | ' write_color:=ff
15ac0     36 00 00 FF 
15ac4     F7 E5 85 F1 | 	sub	objptr, ##28151
15ac8     F2 12 62 FC | 	wrlong	arg01, objptr
15acc                 | ' write_background:=bb
15acc     04 E4 05 F1 | 	add	objptr, #4
15ad0     F2 14 62 FC | 	wrlong	arg02, objptr
15ad4     07 00 00 FF 
15ad8     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15adc     52 00 00 FF 
15ae0     5F E4 05 F1 | 	add	objptr, ##42079
15ae4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15ae8     04 E4 85 F1 | 	sub	objptr, #4
15aec     03 00 80 FF 
15af0     F2 30 69 FC | 	wrlong	##1688, objptr
15af4     52 00 00 FF 
15af8     A0 E4 85 F1 | 	sub	objptr, ##42144
15afc     07 00 00 FF 
15b00     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15b04                 | LR__1768
15b04     52 00 00 FF 
15b08     9C E4 05 F1 | 	add	objptr, ##42140
15b0c     F2 26 62 FC | 	wrlong	local01, objptr
15b10     04 E4 85 F1 | 	sub	objptr, #4
15b14     F2 12 02 FB | 	rdlong	arg01, objptr
15b18     0F 00 00 FF 
15b1c     3C E4 85 F1 | 	sub	objptr, ##7740
15b20     F2 2E 02 FB | 	rdlong	local05, objptr
15b24     43 00 00 FF 
15b28     5C E4 85 F1 | 	sub	objptr, ##34396
15b2c     17 13 82 F1 | 	sub	arg01, local05
15b30     00 14 06 F6 | 	mov	arg02, #0
15b34     0A 16 06 F6 | 	mov	arg03, #10
15b38     90 30 B1 FD | 	call	#__system__Number_S
15b3c     FD 12 02 F6 | 	mov	arg01, result1
15b40     B7 01 00 FF 
15b44     8C 14 06 F6 | 	mov	arg02, ##@LR__5925
15b48     08 0E B1 FD | 	call	#__system___string_concat
15b4c     50 00 00 FF 
15b50     38 E5 05 F1 | 	add	objptr, ##41272
15b54     F2 FA 61 FC | 	wrlong	result1, objptr
15b58     19 00 00 FF 
15b5c     FC E4 85 F1 | 	sub	objptr, ##13052
15b60     F2 12 02 FB | 	rdlong	arg01, objptr
15b64     04 E4 85 F1 | 	sub	objptr, #4
15b68     F2 14 02 FB | 	rdlong	arg02, objptr
15b6c     37 00 00 FF 
15b70     38 E4 85 F1 | 	sub	objptr, ##28216
15b74     FC F0 B0 FD | 	call	#_hg010b_spin2_cls
15b78     B7 01 00 FF 
15b7c     9E 12 06 F6 | 	mov	arg01, ##@LR__5926
15b80                 | ' 
15b80                 | ' write(text)
15b80     B0 F4 B0 FD | 	call	#_hg010b_spin2_write
15b84                 | ' crlf
15b84     AC F9 B0 FD | 	call	#_hg010b_spin2_crlf
15b88     18 00 00 FF 
15b8c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15b90     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15b94     18 00 00 FF 
15b98     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
15b9c                 | ' 
15b9c                 | ' write(text)
15b9c     94 F4 B0 FD | 	call	#_hg010b_spin2_write
15ba0                 | ' crlf
15ba0     90 F9 B0 FD | 	call	#_hg010b_spin2_crlf
15ba4     50 00 00 FF 
15ba8     38 E5 05 F1 | 	add	objptr, ##41272
15bac     F2 12 02 FB | 	rdlong	arg01, objptr
15bb0     50 00 00 FF 
15bb4     38 E5 85 F1 | 	sub	objptr, ##41272
15bb8                 | ' 
15bb8                 | ' write(text)
15bb8     78 F4 B0 FD | 	call	#_hg010b_spin2_write
15bbc                 | ' crlf
15bbc     74 F9 B0 FD | 	call	#_hg010b_spin2_crlf
15bc0     A7 F0 03 F6 | 	mov	ptra, fp
15bc4     B2 00 A0 FD | 	call	#popregs_
15bc8                 | _do_mode_ret
15bc8     2D 00 64 FD | 	ret
15bcc                 | 
15bcc                 | ' 
15bcc                 | ' '-------------------- mouse
15bcc                 | ' 
15bcc                 | ' sub do_mouse
15bcc                 | _do_mouse
15bcc     98 79 BF FD | 	call	#_pop
15bd0     00 FA 4D F2 | 	cmps	result1, #0 wz
15bd4                 | ' 
15bd4                 | ' t1=pop()
15bd4                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15bd4     14 00 90 5D |  if_ne	jmp	#LR__1770
15bd8     10 12 06 F6 | 	mov	arg01, #16
15bdc     00 14 06 F6 | 	mov	arg02, #0
15be0     00 16 06 F6 | 	mov	arg03, #0
15be4     6C E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
15be8     10 00 90 FD | 	jmp	#LR__1771
15bec                 | LR__1770
15bec     10 12 06 F6 | 	mov	arg01, #16
15bf0     20 14 06 F6 | 	mov	arg02, #32
15bf4     20 16 06 F6 | 	mov	arg03, #32
15bf8     58 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
15bfc                 | LR__1771
15bfc                 | _do_mouse_ret
15bfc     2D 00 64 FD | 	ret
15c00                 | 
15c00                 | ' 
15c00                 | ' '-------------------- mousek
15c00                 | ' 
15c00                 | ' sub do_mousek
15c00                 | _do_mousek
15c00     00 4A 05 F6 | 	mov	COUNT_, #0
15c04     A8 00 A0 FD | 	call	#pushregs_
15c08     0C F0 07 F1 | 	add	ptra, #12
15c0c     08 4E 05 F1 | 	add	fp, #8
15c10     A7 3A 68 FC | 	wrlong	#29, fp
15c14     08 4E 85 F1 | 	sub	fp, #8
15c18     51 00 00 FF 
15c1c     50 E5 05 F1 | 	add	objptr, ##41808
15c20     F2 12 02 FB | 	rdlong	arg01, objptr
15c24     51 00 00 FF 
15c28     50 E5 85 F1 | 	sub	objptr, ##41808
15c2c     A7 12 62 FC | 	wrlong	arg01, fp
15c30     A7 12 02 F6 | 	mov	arg01, fp
15c34     C8 79 BF FD | 	call	#_push
15c38     A7 F0 03 F6 | 	mov	ptra, fp
15c3c     B2 00 A0 FD | 	call	#popregs_
15c40                 | _do_mousek_ret
15c40     2D 00 64 FD | 	ret
15c44                 | 
15c44                 | ' 
15c44                 | ' '-------------------- mousew
15c44                 | ' 
15c44                 | ' sub do_mousew
15c44                 | _do_mousew
15c44     00 4A 05 F6 | 	mov	COUNT_, #0
15c48     A8 00 A0 FD | 	call	#pushregs_
15c4c     0C F0 07 F1 | 	add	ptra, #12
15c50     08 4E 05 F1 | 	add	fp, #8
15c54     A7 38 68 FC | 	wrlong	#28, fp
15c58     08 4E 85 F1 | 	sub	fp, #8
15c5c     51 00 00 FF 
15c60     54 E5 05 F1 | 	add	objptr, ##41812
15c64     F2 12 02 FB | 	rdlong	arg01, objptr
15c68     51 00 00 FF 
15c6c     54 E5 85 F1 | 	sub	objptr, ##41812
15c70     A7 12 62 FC | 	wrlong	arg01, fp
15c74     A7 12 02 F6 | 	mov	arg01, fp
15c78     84 79 BF FD | 	call	#_push
15c7c     A7 F0 03 F6 | 	mov	ptra, fp
15c80     B2 00 A0 FD | 	call	#popregs_
15c84                 | _do_mousew_ret
15c84     2D 00 64 FD | 	ret
15c88                 | 
15c88                 | ' 
15c88                 | ' '-------------------- mousex
15c88                 | ' 
15c88                 | ' sub do_mousex
15c88                 | _do_mousex
15c88     00 4A 05 F6 | 	mov	COUNT_, #0
15c8c     A8 00 A0 FD | 	call	#pushregs_
15c90     0C F0 07 F1 | 	add	ptra, #12
15c94     08 4E 05 F1 | 	add	fp, #8
15c98     A7 3A 68 FC | 	wrlong	#29, fp
15c9c     08 4E 85 F1 | 	sub	fp, #8
15ca0     51 00 00 FF 
15ca4     48 E5 05 F1 | 	add	objptr, ##41800
15ca8     F2 12 02 FB | 	rdlong	arg01, objptr
15cac     51 00 00 FF 
15cb0     48 E5 85 F1 | 	sub	objptr, ##41800
15cb4     A7 12 62 FC | 	wrlong	arg01, fp
15cb8     A7 12 02 F6 | 	mov	arg01, fp
15cbc     40 79 BF FD | 	call	#_push
15cc0     A7 F0 03 F6 | 	mov	ptra, fp
15cc4     B2 00 A0 FD | 	call	#popregs_
15cc8                 | _do_mousex_ret
15cc8     2D 00 64 FD | 	ret
15ccc                 | 
15ccc                 | ' 
15ccc                 | ' '-------------------- mousey
15ccc                 | ' 
15ccc                 | ' sub do_mousey
15ccc                 | _do_mousey
15ccc     00 4A 05 F6 | 	mov	COUNT_, #0
15cd0     A8 00 A0 FD | 	call	#pushregs_
15cd4     0C F0 07 F1 | 	add	ptra, #12
15cd8     08 4E 05 F1 | 	add	fp, #8
15cdc     A7 3A 68 FC | 	wrlong	#29, fp
15ce0     08 4E 85 F1 | 	sub	fp, #8
15ce4     51 00 00 FF 
15ce8     4C E5 05 F1 | 	add	objptr, ##41804
15cec     F2 12 02 FB | 	rdlong	arg01, objptr
15cf0     51 00 00 FF 
15cf4     4C E5 85 F1 | 	sub	objptr, ##41804
15cf8     A7 12 62 FC | 	wrlong	arg01, fp
15cfc     A7 12 02 F6 | 	mov	arg01, fp
15d00     FC 78 BF FD | 	call	#_push
15d04     A7 F0 03 F6 | 	mov	ptra, fp
15d08     B2 00 A0 FD | 	call	#popregs_
15d0c                 | _do_mousey_ret
15d0c     2D 00 64 FD | 	ret
15d10                 | 
15d10                 | ' 
15d10                 | ' '------------------ new
15d10                 | ' 
15d10                 | ' sub do_new
15d10                 | _do_new
15d10     03 4A 05 F6 | 	mov	COUNT_, #3
15d14     A8 00 A0 FD | 	call	#pushregs_
15d18                 | ' 
15d18                 | ' if inrun=1 then inrun=2
15d18     50 00 00 FF 
15d1c     EC E4 05 F1 | 	add	objptr, ##41196
15d20     F2 16 02 FB | 	rdlong	arg03, objptr
15d24     50 00 00 FF 
15d28     EC E4 85 F1 | 	sub	objptr, ##41196
15d2c     01 16 0E F2 | 	cmp	arg03, #1 wz
15d30     50 00 00 AF 
15d34     EC E4 05 A1 |  if_e	add	objptr, ##41196
15d38     F2 04 68 AC |  if_e	wrlong	#2, objptr
15d3c     50 00 00 AF 
15d40     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15d44     13 12 C6 F9 | 	decod	arg01, #19
15d48     01 14 66 F6 | 	neg	arg02, #1
15d4c     58 D3 B0 FD | 	call	#_pslpoke
15d50     35 00 00 FF 
15d54     08 E4 05 F1 | 	add	objptr, ##27144
15d58     F2 00 68 FC | 	wrlong	#0, objptr
15d5c                 | ' pslpoke(memlo,$FFFFFFFF)
15d5c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15d5c     00 26 06 F6 | 	mov	local01, #0
15d60     20 00 00 FF 
15d64     10 E4 85 F1 | 	sub	objptr, ##16400
15d68     97 1E 48 FB | 	callpa	#(@LR__1781-@LR__1780)>>2,fcache_load_ptr_
15d6c                 | LR__1780
15d6c     13 17 02 F6 | 	mov	arg03, local01
15d70     04 16 66 F0 | 	shl	arg03, #4
15d74     F2 16 02 F1 | 	add	arg03, objptr
15d78     B7 01 00 FF 
15d7c     9F 14 06 F6 | 	mov	arg02, ##@LR__5927
15d80     0B 15 62 FC | 	wrlong	arg02, arg03
15d84     13 29 02 F6 | 	mov	local02, local01
15d88     04 28 66 F0 | 	shl	local02, #4
15d8c     F2 28 02 F1 | 	add	local02, objptr
15d90     0C 28 06 F1 | 	add	local02, #12
15d94     14 01 68 FC | 	wrlong	#0, local02
15d98     01 26 06 F1 | 	add	local01, #1
15d9c     02 00 00 FF 
15da0     01 26 56 F2 | 	cmps	local01, ##1025 wc
15da4     C4 FF 9F CD |  if_b	jmp	#LR__1780
15da8                 | LR__1781
15da8     35 00 00 FF 
15dac     90 E4 05 F1 | 	add	objptr, ##27280
15db0     00 04 80 FF 
15db4     F2 00 68 FC | 	wrlong	##524288, objptr
15db8     06 00 00 FF 
15dbc     30 E4 05 F1 | 	add	objptr, ##3120
15dc0     00 04 80 FF 
15dc4     F2 00 68 FC | 	wrlong	##524288, objptr
15dc8     04 E4 05 F1 | 	add	objptr, #4
15dcc     00 04 80 FF 
15dd0     F2 00 68 FC | 	wrlong	##524288, objptr
15dd4     0D 00 00 FF 
15dd8     64 E4 85 F1 | 	sub	objptr, ##6756
15ddc     F2 00 68 FC | 	wrlong	#0, objptr
15de0     07 00 00 FF 
15de4     24 E4 05 F1 | 	add	objptr, ##3620
15de8     F2 00 68 FC | 	wrlong	#0, objptr
15dec     07 00 00 FF 
15df0     20 E4 85 F1 | 	sub	objptr, ##3616
15df4     00 04 80 FF 
15df8     F2 00 68 FC | 	wrlong	##524288, objptr
15dfc     0D 00 00 FF 
15e00     D0 E4 05 F1 | 	add	objptr, ##6864
15e04     F2 00 68 FC | 	wrlong	#0, objptr
15e08     B7 01 00 FF 
15e0c     A0 2A 06 F6 | 	mov	local03, ##@LR__5928
15e10     01 00 00 FF 
15e14     B0 E5 05 F1 | 	add	objptr, ##944
15e18     F2 2A 62 FC | 	wrlong	local03, objptr
15e1c     08 00 00 FF 
15e20     50 E4 85 F1 | 	sub	objptr, ##4176
15e24     F2 00 68 FC | 	wrlong	#0, objptr
15e28     04 E4 05 F1 | 	add	objptr, #4
15e2c     FF FF FF FF 
15e30     F2 FE 6B FC | 	wrlong	##-1, objptr
15e34     06 00 00 FF 
15e38     A0 E4 05 F1 | 	add	objptr, ##3232
15e3c     F2 00 68 FC | 	wrlong	#0, objptr
15e40     04 E4 05 F1 | 	add	objptr, #4
15e44     F2 00 68 FC | 	wrlong	#0, objptr
15e48                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15e48                 | ' stackpointer=0
15e48                 | ' lineptr=0 
15e48                 | ' programptr=memlo ': stringptr=0
15e48                 | ' dataptr=0 : readline=""
15e48                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15e48                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15e48     00 26 06 F6 | 	mov	local01, #0
15e4c     06 00 00 FF 
15e50     9C E4 85 F1 | 	sub	objptr, ##3228
15e54     97 16 48 FB | 	callpa	#(@LR__1783-@LR__1782)>>2,fcache_load_ptr_
15e58                 | LR__1782
15e58     13 29 02 F6 | 	mov	local02, local01
15e5c     02 28 66 F0 | 	shl	local02, #2
15e60     13 29 02 F1 | 	add	local02, local01
15e64     02 28 66 F0 | 	shl	local02, #2
15e68     F2 28 02 F1 | 	add	local02, objptr
15e6c     08 28 06 F1 | 	add	local02, #8
15e70     FF FF FF FF 
15e74     14 FF 6B FC | 	wrlong	##-1, local02
15e78     01 26 06 F1 | 	add	local01, #1
15e7c     41 26 56 F2 | 	cmps	local01, #65 wc
15e80     D4 FF 9F CD |  if_b	jmp	#LR__1782
15e84                 | LR__1783
15e84     4A 00 00 FF 
15e88     98 E4 85 F1 | 	sub	objptr, ##38040
15e8c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
15e8c     00 26 06 F6 | 	mov	local01, #0
15e90                 | LR__1784
15e90     13 29 02 F6 | 	mov	local02, local01
15e94     02 28 66 F0 | 	shl	local02, #2
15e98     52 00 00 FF 
15e9c     54 E4 05 F1 | 	add	objptr, ##42068
15ea0     F2 28 02 F1 | 	add	local02, objptr
15ea4     14 2B 0A FB | 	rdlong	local03, local02 wz
15ea8     52 00 00 FF 
15eac     54 E4 85 F1 | 	sub	objptr, ##42068
15eb0     34 00 90 AD |  if_e	jmp	#LR__1785
15eb4     13 13 02 F6 | 	mov	arg01, local01
15eb8     00 14 06 F6 | 	mov	arg02, #0
15ebc     00 16 06 F6 | 	mov	arg03, #0
15ec0     90 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15ec4     13 29 02 F6 | 	mov	local02, local01
15ec8     02 28 66 F0 | 	shl	local02, #2
15ecc     52 00 00 FF 
15ed0     54 E4 05 F1 | 	add	objptr, ##42068
15ed4     F2 28 02 F1 | 	add	local02, objptr
15ed8     14 13 02 FB | 	rdlong	arg01, local02
15edc     52 00 00 FF 
15ee0     54 E4 85 F1 | 	sub	objptr, ##42068
15ee4     F0 4C B1 FD | 	call	#__system___gc_free
15ee8                 | LR__1785
15ee8     01 26 06 F1 | 	add	local01, #1
15eec     10 26 56 F2 | 	cmps	local01, #16 wc
15ef0     9C FF 9F CD |  if_b	jmp	#LR__1784
15ef4     52 00 00 FF 
15ef8     A8 E4 05 F1 | 	add	objptr, ##42152
15efc     00 C0 9F FF 
15f00     F2 00 68 FC | 	wrlong	##1065353216, objptr
15f04     04 E4 05 F1 | 	add	objptr, #4
15f08     00 C0 9F FF 
15f0c     F2 00 68 FC | 	wrlong	##1065353216, objptr
15f10     52 00 00 FF 
15f14     A8 E4 85 F1 | 	sub	objptr, ##42152
15f18     F2 2A 02 FB | 	rdlong	local03, objptr
15f1c     52 00 00 FF 
15f20     94 E4 05 F1 | 	add	objptr, ##42132
15f24     F2 2A 62 FC | 	wrlong	local03, objptr
15f28     52 00 00 FF 
15f2c     98 E4 85 F1 | 	sub	objptr, ##42136
15f30     11 12 06 F6 | 	mov	arg01, #17
15f34     08 14 06 F6 | 	mov	arg02, #8
15f38     10 16 06 F6 | 	mov	arg03, #16
15f3c     14 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15f40     10 12 06 F6 | 	mov	arg01, #16
15f44     20 14 06 F6 | 	mov	arg02, #32
15f48     20 16 06 F6 | 	mov	arg03, #32
15f4c     04 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15f50     B7 01 00 FF 
15f54     A1 2A 06 F6 | 	mov	local03, ##@LR__5929
15f58     52 00 00 FF 
15f5c     C4 E4 05 F1 | 	add	objptr, ##42180
15f60     F2 2A 62 FC | 	wrlong	local03, objptr
15f64     52 00 00 FF 
15f68     C4 E4 85 F1 | 	sub	objptr, ##42180
15f6c     90 C3 B0 FD | 	call	#_init_audio
15f70     A7 F0 03 F6 | 	mov	ptra, fp
15f74     B2 00 A0 FD | 	call	#popregs_
15f78                 | _do_new_ret
15f78     2D 00 64 FD | 	ret
15f7c                 | 
15f7c                 | ' 
15f7c                 | ' '-------------------- next
15f7c                 | ' 
15f7c                 | ' sub do_next()
15f7c                 | _do_next
15f7c     04 4A 05 F6 | 	mov	COUNT_, #4
15f80     A8 00 A0 FD | 	call	#pushregs_
15f84     E0 75 BF FD | 	call	#_pop
15f88     FD 26 02 F6 | 	mov	local01, result1
15f8c     FE 28 02 F6 | 	mov	local02, result2
15f90     FF 2A 02 F6 | 	mov	local03, result3
15f94                 | ' t1=pop() :varnum=t1.result.uresult
15f94                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
15f94     50 00 00 FF 
15f98     30 E5 05 F1 | 	add	objptr, ##41264
15f9c     F2 14 02 FB | 	rdlong	arg02, objptr
15fa0     0A 13 02 F6 | 	mov	arg01, arg02
15fa4     02 12 66 F0 | 	shl	arg01, #2
15fa8     0A 13 02 F1 | 	add	arg01, arg02
15fac     02 12 66 F0 | 	shl	arg01, #2
15fb0     06 00 00 FF 
15fb4     98 E4 85 F1 | 	sub	objptr, ##3224
15fb8     F2 12 02 F1 | 	add	arg01, objptr
15fbc     08 12 06 F1 | 	add	arg01, #8
15fc0     09 15 02 FB | 	rdlong	arg02, arg01
15fc4     13 15 0A F2 | 	cmp	arg02, local01 wz
15fc8     4A 00 00 FF 
15fcc     98 E4 85 F1 | 	sub	objptr, ##38040
15fd0     10 00 90 AD |  if_e	jmp	#LR__1790
15fd4     25 12 06 F6 | 	mov	arg01, #37
15fd8     00 14 06 F6 | 	mov	arg02, #0
15fdc     28 CF B0 FD | 	call	#_printerror
15fe0     54 03 90 FD | 	jmp	#LR__1797
15fe4                 | LR__1790
15fe4                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15fe4     13 15 02 F6 | 	mov	arg02, local01
15fe8     04 14 66 F0 | 	shl	arg02, #4
15fec     14 00 00 FF 
15ff0     F8 E5 05 F1 | 	add	objptr, ##10744
15ff4     F2 14 02 F1 | 	add	arg02, objptr
15ff8     0C 14 06 F1 | 	add	arg02, #12
15ffc     0A 15 02 FB | 	rdlong	arg02, arg02
16000     1E 14 0E F2 | 	cmp	arg02, #30 wz
16004     14 00 00 FF 
16008     F8 E5 85 F1 | 	sub	objptr, ##10744
1600c     54 00 90 5D |  if_ne	jmp	#LR__1791
16010     13 15 02 F6 | 	mov	arg02, local01
16014     04 14 66 F0 | 	shl	arg02, #4
16018     14 00 00 FF 
1601c     F8 E5 05 F1 | 	add	objptr, ##10744
16020     F2 14 02 F1 | 	add	arg02, objptr
16024     0C 14 06 F1 | 	add	arg02, #12
16028     0A 39 68 FC | 	wrlong	#28, arg02
1602c     13 2D 02 F6 | 	mov	local04, local01
16030     04 2C 66 F0 | 	shl	local04, #4
16034     F2 2C 02 F1 | 	add	local04, objptr
16038     13 15 02 F6 | 	mov	arg02, local01
1603c     04 14 66 F0 | 	shl	arg02, #4
16040     F2 14 02 F1 | 	add	arg02, objptr
16044     04 14 06 F1 | 	add	arg02, #4
16048     0A 13 02 FB | 	rdlong	arg01, arg02
1604c     14 00 00 FF 
16050     F8 E5 85 F1 | 	sub	objptr, ##10744
16054     01 14 06 F6 | 	mov	arg02, #1
16058     E0 3B B1 FD | 	call	#__system___float_tointeger
1605c     04 2C 06 F1 | 	add	local04, #4
16060     16 FB 61 FC | 	wrlong	result1, local04
16064                 | LR__1791
16064     50 00 00 FF 
16068     30 E5 05 F1 | 	add	objptr, ##41264
1606c     F2 2C 02 FB | 	rdlong	local04, objptr
16070     16 15 02 F6 | 	mov	arg02, local04
16074     02 14 66 F0 | 	shl	arg02, #2
16078     16 15 02 F1 | 	add	arg02, local04
1607c     02 14 66 F0 | 	shl	arg02, #2
16080     06 00 00 FF 
16084     98 E4 85 F1 | 	sub	objptr, ##3224
16088     F2 14 02 F1 | 	add	arg02, objptr
1608c     0C 14 06 F1 | 	add	arg02, #12
16090     0A FF 01 FB | 	rdlong	result3, arg02
16094     13 2D 02 F6 | 	mov	local04, local01
16098     04 2C 66 F0 | 	shl	local04, #4
1609c     35 00 00 FF 
160a0     A0 E4 85 F1 | 	sub	objptr, ##27296
160a4     F2 2C 02 F1 | 	add	local04, objptr
160a8     13 15 02 F6 | 	mov	arg02, local01
160ac     04 14 66 F0 | 	shl	arg02, #4
160b0     F2 14 02 F1 | 	add	arg02, objptr
160b4     04 14 06 F1 | 	add	arg02, #4
160b8     0A 13 02 FB | 	rdlong	arg01, arg02
160bc     FF 12 02 F1 | 	add	arg01, result3
160c0     04 2C 06 F1 | 	add	local04, #4
160c4     16 13 62 FC | 	wrlong	arg01, local04
160c8                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
160c8                 | ' if fortable(fortop).stepval>=0 then
160c8     3B 00 00 FF 
160cc     38 E5 05 F1 | 	add	objptr, ##30520
160d0     F2 2C 02 FB | 	rdlong	local04, objptr
160d4     16 13 02 F6 | 	mov	arg01, local04
160d8     02 12 66 F0 | 	shl	arg01, #2
160dc     16 13 02 F1 | 	add	arg01, local04
160e0     02 12 66 F0 | 	shl	arg01, #2
160e4     06 00 00 FF 
160e8     98 E4 85 F1 | 	sub	objptr, ##3224
160ec     F2 12 02 F1 | 	add	arg01, objptr
160f0     0C 12 06 F1 | 	add	arg01, #12
160f4     09 13 02 FB | 	rdlong	arg01, arg01
160f8     00 12 56 F2 | 	cmps	arg01, #0 wc
160fc     4A 00 00 FF 
16100     98 E4 85 F1 | 	sub	objptr, ##38040
16104     78 00 90 CD |  if_b	jmp	#LR__1792
16108                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
16108     04 26 66 F0 | 	shl	local01, #4
1610c     14 00 00 FF 
16110     F8 E5 05 F1 | 	add	objptr, ##10744
16114     F2 26 02 F1 | 	add	local01, objptr
16118     3B 00 00 FF 
1611c     38 E5 05 F1 | 	add	objptr, ##30520
16120     F2 12 02 FB | 	rdlong	arg01, objptr
16124     09 2D 02 F6 | 	mov	local04, arg01
16128     02 2C 66 F0 | 	shl	local04, #2
1612c     09 2D 02 F1 | 	add	local04, arg01
16130     02 2C 66 F0 | 	shl	local04, #2
16134     06 00 00 FF 
16138     98 E4 85 F1 | 	sub	objptr, ##3224
1613c     F2 2C 02 F1 | 	add	local04, objptr
16140     04 26 06 F1 | 	add	local01, #4
16144     13 27 02 FB | 	rdlong	local01, local01
16148     10 2C 06 F1 | 	add	local04, #16
1614c     16 2D 02 FB | 	rdlong	local04, local04
16150     16 27 5A F2 | 	cmps	local01, local04 wcz
16154     4A 00 00 FF 
16158     98 E4 85 F1 | 	sub	objptr, ##38040
1615c     9C 00 90 ED |  if_be	jmp	#LR__1794
16160     50 00 00 FF 
16164     30 E5 05 F1 | 	add	objptr, ##41264
16168     F2 2C 02 FB | 	rdlong	local04, objptr
1616c     01 2C 86 F1 | 	sub	local04, #1
16170     F2 2C 62 FC | 	wrlong	local04, objptr
16174     50 00 00 FF 
16178     30 E5 85 F1 | 	sub	objptr, ##41264
1617c     B8 01 90 FD | 	jmp	#LR__1797
16180                 | LR__1792
16180                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
16180     13 2D 02 F6 | 	mov	local04, local01
16184     04 2C 66 F0 | 	shl	local04, #4
16188     14 00 00 FF 
1618c     F8 E5 05 F1 | 	add	objptr, ##10744
16190     F2 2C 02 F1 | 	add	local04, objptr
16194     3B 00 00 FF 
16198     38 E5 05 F1 | 	add	objptr, ##30520
1619c     F2 26 02 FB | 	rdlong	local01, objptr
161a0     13 13 02 F6 | 	mov	arg01, local01
161a4     02 12 66 F0 | 	shl	arg01, #2
161a8     13 13 02 F1 | 	add	arg01, local01
161ac     02 12 66 F0 | 	shl	arg01, #2
161b0     06 00 00 FF 
161b4     98 E4 85 F1 | 	sub	objptr, ##3224
161b8     F2 12 02 F1 | 	add	arg01, objptr
161bc     04 2C 06 F1 | 	add	local04, #4
161c0     16 2D 02 FB | 	rdlong	local04, local04
161c4     10 12 06 F1 | 	add	arg01, #16
161c8     09 13 02 FB | 	rdlong	arg01, arg01
161cc     09 2D 52 F2 | 	cmps	local04, arg01 wc
161d0     4A 00 00 FF 
161d4     98 E4 85 F1 | 	sub	objptr, ##38040
161d8     20 00 90 3D |  if_ae	jmp	#LR__1793
161dc     50 00 00 FF 
161e0     30 E5 05 F1 | 	add	objptr, ##41264
161e4     F2 2C 02 FB | 	rdlong	local04, objptr
161e8     01 2C 86 F1 | 	sub	local04, #1
161ec     F2 2C 62 FC | 	wrlong	local04, objptr
161f0     50 00 00 FF 
161f4     30 E5 85 F1 | 	sub	objptr, ##41264
161f8     3C 01 90 FD | 	jmp	#LR__1797
161fc                 | LR__1793
161fc                 | LR__1794
161fc                 | ' ' if not returned, goto pointer 
161fc                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
161fc     50 00 00 FF 
16200     EC E4 05 F1 | 	add	objptr, ##41196
16204     F2 2C 02 FB | 	rdlong	local04, objptr
16208     50 00 00 FF 
1620c     EC E4 85 F1 | 	sub	objptr, ##41196
16210     01 2C 16 F2 | 	cmp	local04, #1 wc
16214     DC 00 90 CD |  if_b	jmp	#LR__1795
16218     50 00 00 FF 
1621c     30 E5 05 F1 | 	add	objptr, ##41264
16220     F2 2C 02 FB | 	rdlong	local04, objptr
16224     16 27 02 F6 | 	mov	local01, local04
16228     02 26 66 F0 | 	shl	local01, #2
1622c     16 27 02 F1 | 	add	local01, local04
16230     02 26 66 F0 | 	shl	local01, #2
16234     06 00 00 FF 
16238     98 E4 85 F1 | 	sub	objptr, ##3224
1623c     F2 26 02 F1 | 	add	local01, objptr
16240     06 00 00 FF 
16244     20 E4 05 F1 | 	add	objptr, ##3104
16248     F2 2C 02 FB | 	rdlong	local04, objptr
1624c     50 00 00 FF 
16250     B8 E4 85 F1 | 	sub	objptr, ##41144
16254     13 27 02 FB | 	rdlong	local01, local01
16258     13 2D 0A F2 | 	cmp	local04, local01 wz
1625c     94 00 90 AD |  if_e	jmp	#LR__1795
16260     50 00 00 FF 
16264     30 E5 05 F1 | 	add	objptr, ##41264
16268     F2 2C 02 FB | 	rdlong	local04, objptr
1626c     16 27 02 F6 | 	mov	local01, local04
16270     02 26 66 F0 | 	shl	local01, #2
16274     16 27 02 F1 | 	add	local01, local04
16278     02 26 66 F0 | 	shl	local01, #2
1627c     06 00 00 FF 
16280     98 E4 85 F1 | 	sub	objptr, ##3224
16284     F2 26 02 F1 | 	add	local01, objptr
16288     13 27 02 FB | 	rdlong	local01, local01
1628c     06 00 00 FF 
16290     20 E4 05 F1 | 	add	objptr, ##3104
16294     F2 26 62 FC | 	wrlong	local01, objptr
16298     78 E4 05 F1 | 	add	objptr, #120
1629c     F2 2C 02 FB | 	rdlong	local04, objptr
162a0     16 27 02 F6 | 	mov	local01, local04
162a4     02 26 66 F0 | 	shl	local01, #2
162a8     16 27 02 F1 | 	add	local01, local04
162ac     02 26 66 F0 | 	shl	local01, #2
162b0     06 00 00 FF 
162b4     98 E4 85 F1 | 	sub	objptr, ##3224
162b8     F2 26 02 F1 | 	add	local01, objptr
162bc     04 26 06 F1 | 	add	local01, #4
162c0     13 27 02 FB | 	rdlong	local01, local01
162c4     06 00 00 FF 
162c8     24 E4 05 F1 | 	add	objptr, ##3108
162cc     F2 26 62 FC | 	wrlong	local01, objptr
162d0     06 00 00 FF 
162d4     40 E4 85 F1 | 	sub	objptr, ##3136
162d8     F2 2C 02 FB | 	rdlong	local04, objptr
162dc     01 2C 86 F1 | 	sub	local04, #1
162e0     04 E4 05 F1 | 	add	objptr, #4
162e4     F2 2C 62 FC | 	wrlong	local04, objptr
162e8     4A 00 00 FF 
162ec     80 E4 85 F1 | 	sub	objptr, ##38016
162f0     44 00 90 FD | 	jmp	#LR__1796
162f4                 | LR__1795
162f4     50 00 00 FF 
162f8     30 E5 05 F1 | 	add	objptr, ##41264
162fc     F2 2C 02 FB | 	rdlong	local04, objptr
16300     16 27 02 F6 | 	mov	local01, local04
16304     02 26 66 F0 | 	shl	local01, #2
16308     16 27 02 F1 | 	add	local01, local04
1630c     02 26 66 F0 | 	shl	local01, #2
16310     06 00 00 FF 
16314     98 E4 85 F1 | 	sub	objptr, ##3224
16318     F2 26 02 F1 | 	add	local01, objptr
1631c     04 26 06 F1 | 	add	local01, #4
16320     13 27 02 FB | 	rdlong	local01, local01
16324     01 26 86 F1 | 	sub	local01, #1
16328     18 E4 85 F1 | 	sub	objptr, #24
1632c     F2 26 62 FC | 	wrlong	local01, objptr
16330     4A 00 00 FF 
16334     80 E4 85 F1 | 	sub	objptr, ##38016
16338                 | LR__1796
16338                 | LR__1797
16338     A7 F0 03 F6 | 	mov	ptra, fp
1633c     B2 00 A0 FD | 	call	#popregs_
16340                 | _do_next_ret
16340     2D 00 64 FD | 	ret
16344                 | 
16344                 | ' 
16344                 | ' '-------------------- no command (print "Unknown command")
16344                 | ' 
16344                 | ' sub do_no_command
16344                 | _do_no_command
16344     50 00 00 FF 
16348     F0 E4 05 F1 | 	add	objptr, ##41200
1634c     F2 14 02 FB | 	rdlong	arg02, objptr
16350     50 00 00 FF 
16354     F0 E4 85 F1 | 	sub	objptr, ##41200
16358     17 12 06 F6 | 	mov	arg01, #23
1635c     A8 CB B0 FD | 	call	#_printerror
16360                 | _do_no_command_ret
16360     2D 00 64 FD | 	ret
16364                 | 
16364                 | ' 
16364                 | ' '-------------------- nothing
16364                 | ' 
16364                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
16364                 | _do_nothing
16364                 | _do_nothing_ret
16364     2D 00 64 FD | 	ret
16368                 | 
16368                 | ' 
16368                 | ' '-------------------- on
16368                 | ' 
16368                 | ' sub do_on
16368                 | _do_on
16368     01 4A 05 F6 | 	mov	COUNT_, #1
1636c     A8 00 A0 FD | 	call	#pushregs_
16370     18 F0 07 F1 | 	add	ptra, #24
16374     4A 00 00 FF 
16378     80 E4 05 F1 | 	add	objptr, ##38016
1637c     F2 12 02 FB | 	rdlong	arg01, objptr
16380     09 FD 01 F6 | 	mov	result2, arg01
16384     01 FC 65 F0 | 	shl	result2, #1
16388     09 FD 01 F1 | 	add	result2, arg01
1638c     02 FC 65 F0 | 	shl	result2, #2
16390     03 00 00 FF 
16394     04 E4 85 F1 | 	sub	objptr, ##1540
16398     F2 FC 01 F1 | 	add	result2, objptr
1639c     FE 12 02 FB | 	rdlong	arg01, result2
163a0     14 4E 05 F1 | 	add	fp, #20
163a4     A7 12 62 FC | 	wrlong	arg01, fp
163a8     03 00 00 FF 
163ac     04 E4 05 F1 | 	add	objptr, ##1540
163b0     F2 12 02 FB | 	rdlong	arg01, objptr
163b4     09 27 02 F6 | 	mov	local01, arg01
163b8     01 26 66 F0 | 	shl	local01, #1
163bc     09 27 02 F1 | 	add	local01, arg01
163c0     02 26 66 F0 | 	shl	local01, #2
163c4     03 00 00 FF 
163c8     04 E4 85 F1 | 	sub	objptr, ##1540
163cc     F2 26 02 F1 | 	add	local01, objptr
163d0     04 26 06 F1 | 	add	local01, #4
163d4     13 27 02 FB | 	rdlong	local01, local01
163d8     08 4E 85 F1 | 	sub	fp, #8
163dc     A7 26 62 FC | 	wrlong	local01, fp
163e0     0C 4E 85 F1 | 	sub	fp, #12
163e4     47 00 00 FF 
163e8     7C E4 85 F1 | 	sub	objptr, ##36476
163ec     78 71 BF FD | 	call	#_pop
163f0     FF 26 02 F6 | 	mov	local01, result3
163f4     A7 FA 61 FC | 	wrlong	result1, fp
163f8     04 4E 05 F1 | 	add	fp, #4
163fc     A7 FC 61 FC | 	wrlong	result2, fp
16400     04 4E 05 F1 | 	add	fp, #4
16404     A7 26 62 FC | 	wrlong	local01, fp
16408     08 4E 85 F1 | 	sub	fp, #8
1640c     A7 12 02 F6 | 	mov	arg01, fp
16410     38 73 BF FD | 	call	#_converttoint
16414     10 4E 05 F1 | 	add	fp, #16
16418     A7 FA 61 FC | 	wrlong	result1, fp
1641c                 | ' 
1641c                 | ' numpar=compiledline(lineptr_e).result.uresult
1641c                 | ' skip=compiledline(lineptr_e).result.twowords(1)
1641c                 | ' t1=pop()
1641c                 | ' t=converttoint(t1)
1641c                 | ' if t<1 orelse t>numpar then return
1641c     10 4E 85 F1 | 	sub	fp, #16
16420     01 FA 55 F2 | 	cmps	result1, #1 wc
16424     58 00 90 CD |  if_b	jmp	#LR__1800
16428     10 4E 05 F1 | 	add	fp, #16
1642c     A7 26 02 FB | 	rdlong	local01, fp
16430     04 4E 05 F1 | 	add	fp, #4
16434     A7 12 02 FB | 	rdlong	arg01, fp
16438     14 4E 85 F1 | 	sub	fp, #20
1643c     09 27 5A F2 | 	cmps	local01, arg01 wcz
16440     3C 00 90 1D |  if_a	jmp	#LR__1800
16444     10 4E 05 F1 | 	add	fp, #16
16448     A7 26 02 FB | 	rdlong	local01, fp
1644c     01 26 86 F1 | 	sub	local01, #1
16450     04 4E 85 F1 | 	sub	fp, #4
16454     A7 12 02 FB | 	rdlong	arg01, fp
16458     13 13 02 FD | 	qmul	arg01, local01
1645c     4A 00 00 FF 
16460     80 E4 05 F1 | 	add	objptr, ##38016
16464     F2 26 02 FB | 	rdlong	local01, objptr
16468     0C 4E 85 F1 | 	sub	fp, #12
1646c     18 12 62 FD | 	getqx	arg01
16470     09 27 02 F1 | 	add	local01, arg01
16474     F2 26 62 FC | 	wrlong	local01, objptr
16478     4A 00 00 FF 
1647c     80 E4 85 F1 | 	sub	objptr, ##38016
16480                 | LR__1800
16480     A7 F0 03 F6 | 	mov	ptra, fp
16484     B2 00 A0 FD | 	call	#popregs_
16488                 | _do_on_ret
16488     2D 00 64 FD | 	ret
1648c                 | 
1648c                 | ' 
1648c                 | ' '-------------------- open
1648c                 | ' 
1648c                 | ' sub do_open
1648c                 | _do_open
1648c     02 4A 05 F6 | 	mov	COUNT_, #2
16490     A8 00 A0 FD | 	call	#pushregs_
16494     20 F0 07 F1 | 	add	ptra, #32
16498     4A 00 00 FF 
1649c     80 E4 05 F1 | 	add	objptr, ##38016
164a0     F2 16 02 FB | 	rdlong	arg03, objptr
164a4     0B 15 02 F6 | 	mov	arg02, arg03
164a8     01 14 66 F0 | 	shl	arg02, #1
164ac     0B 15 02 F1 | 	add	arg02, arg03
164b0     02 14 66 F0 | 	shl	arg02, #2
164b4     03 00 00 FF 
164b8     04 E4 85 F1 | 	sub	objptr, ##1540
164bc     F2 14 02 F1 | 	add	arg02, objptr
164c0     0A 17 02 FB | 	rdlong	arg03, arg02
164c4     10 4E 05 F1 | 	add	fp, #16
164c8     A7 16 62 FC | 	wrlong	arg03, fp
164cc     10 4E 85 F1 | 	sub	fp, #16
164d0     47 00 00 FF 
164d4     7C E4 85 F1 | 	sub	objptr, ##36476
164d8     8C 70 BF FD | 	call	#_pop
164dc     FF 16 02 F6 | 	mov	arg03, result3
164e0     A7 FA 61 FC | 	wrlong	result1, fp
164e4     04 4E 05 F1 | 	add	fp, #4
164e8     A7 FC 61 FC | 	wrlong	result2, fp
164ec     04 4E 05 F1 | 	add	fp, #4
164f0     A7 16 62 FC | 	wrlong	arg03, fp
164f4                 | ' 
164f4                 | ' numpar=compiledline(lineptr_e).result.uresult
164f4                 | ' 
164f4                 | ' t1=pop()
164f4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
164f4     08 4E 85 F1 | 	sub	fp, #8
164f8     2B 16 0E F2 | 	cmp	arg03, #43 wz
164fc     18 00 90 5D |  if_ne	jmp	#LR__1810
16500     A7 12 02 FB | 	rdlong	arg01, fp
16504     D8 71 BF FD | 	call	#_convertstring
16508     A7 FA 61 FC | 	wrlong	result1, fp
1650c     08 4E 05 F1 | 	add	fp, #8
16510     A7 3E 68 FC | 	wrlong	#31, fp
16514     08 4E 85 F1 | 	sub	fp, #8
16518                 | LR__1810
16518                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
16518     08 4E 05 F1 | 	add	fp, #8
1651c     A7 16 02 FB | 	rdlong	arg03, fp
16520     08 4E 85 F1 | 	sub	fp, #8
16524     1F 16 0E F2 | 	cmp	arg03, #31 wz
16528     44 00 90 AD |  if_e	jmp	#LR__1811
1652c     00 12 06 F6 | 	mov	arg01, #0
16530     68 60 B1 FD | 	call	#__system___getiolock_0602
16534     FD 12 02 F6 | 	mov	arg01, result1
16538     BC 03 B1 FD | 	call	#__system___lockmem
1653c     B7 01 00 FF 
16540     AC 14 06 F6 | 	mov	arg02, ##@LR__5930
16544     00 12 06 F6 | 	mov	arg01, #0
16548     00 16 06 F6 | 	mov	arg03, #0
1654c     A0 10 B1 FD | 	call	#__system___basic_print_string
16550     00 12 06 F6 | 	mov	arg01, #0
16554     0A 14 06 F6 | 	mov	arg02, #10
16558     00 16 06 F6 | 	mov	arg03, #0
1655c     38 10 B1 FD | 	call	#__system___basic_print_char
16560     00 12 06 F6 | 	mov	arg01, #0
16564     34 60 B1 FD | 	call	#__system___getiolock_0602
16568     FD 00 68 FC | 	wrlong	#0, result1
1656c     28 02 90 FD | 	jmp	#LR__1822
16570                 | LR__1811
16570     A7 16 02 FB | 	rdlong	arg03, fp
16574     0C 4E 05 F1 | 	add	fp, #12
16578     A7 16 62 FC | 	wrlong	arg03, fp
1657c     0C 4E 85 F1 | 	sub	fp, #12
16580     E4 6F BF FD | 	call	#_pop
16584     FF 16 02 F6 | 	mov	arg03, result3
16588     A7 FA 61 FC | 	wrlong	result1, fp
1658c     04 4E 05 F1 | 	add	fp, #4
16590     A7 FC 61 FC | 	wrlong	result2, fp
16594     04 4E 05 F1 | 	add	fp, #4
16598     A7 16 62 FC | 	wrlong	arg03, fp
1659c                 | ' filename=t1.result.sresult
1659c                 | ' t1=pop()
1659c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1659c     08 4E 85 F1 | 	sub	fp, #8
165a0     2B 16 0E F2 | 	cmp	arg03, #43 wz
165a4     18 00 90 5D |  if_ne	jmp	#LR__1812
165a8     A7 12 02 FB | 	rdlong	arg01, fp
165ac     30 71 BF FD | 	call	#_convertstring
165b0     A7 FA 61 FC | 	wrlong	result1, fp
165b4     08 4E 05 F1 | 	add	fp, #8
165b8     A7 3E 68 FC | 	wrlong	#31, fp
165bc     08 4E 85 F1 | 	sub	fp, #8
165c0                 | LR__1812
165c0     14 4E 05 F1 | 	add	fp, #20
165c4     A7 00 68 FC | 	wrlong	#0, fp
165c8                 | ' mode=0
165c8                 | ' if t1.result_type=result_string then
165c8     0C 4E 85 F1 | 	sub	fp, #12
165cc     A7 14 02 FB | 	rdlong	arg02, fp
165d0     08 4E 85 F1 | 	sub	fp, #8
165d4     1F 14 0E F2 | 	cmp	arg02, #31 wz
165d8     64 00 90 5D |  if_ne	jmp	#LR__1813
165dc                 | '   if t1.result.sresult="read" then mode=1
165dc     A7 12 02 FB | 	rdlong	arg01, fp
165e0     B7 01 00 FF 
165e4     BE 14 06 F6 | 	mov	arg02, ##@LR__5931
165e8     34 03 B1 FD | 	call	#__system___string_cmp
165ec     00 FA 0D F2 | 	cmp	result1, #0 wz
165f0     14 4E 05 A1 |  if_e	add	fp, #20
165f4     A7 02 68 AC |  if_e	wrlong	#1, fp
165f8     14 4E 85 A1 |  if_e	sub	fp, #20
165fc                 | '   if t1.result.sresult="write" then mode=2
165fc     A7 12 02 FB | 	rdlong	arg01, fp
16600     B7 01 00 FF 
16604     C3 14 06 F6 | 	mov	arg02, ##@LR__5932
16608     14 03 B1 FD | 	call	#__system___string_cmp
1660c     00 FA 0D F2 | 	cmp	result1, #0 wz
16610     14 4E 05 A1 |  if_e	add	fp, #20
16614     A7 04 68 AC |  if_e	wrlong	#2, fp
16618     14 4E 85 A1 |  if_e	sub	fp, #20
1661c                 | '   if t1.result.sresult="append" then mode=4
1661c     A7 12 02 FB | 	rdlong	arg01, fp
16620     B7 01 00 FF 
16624     C9 14 06 F6 | 	mov	arg02, ##@LR__5933
16628     F4 02 B1 FD | 	call	#__system___string_cmp
1662c     00 FA 0D F2 | 	cmp	result1, #0 wz
16630     14 4E 05 A1 |  if_e	add	fp, #20
16634     A7 08 68 AC |  if_e	wrlong	#4, fp
16638     14 4E 85 A1 |  if_e	sub	fp, #20
1663c     14 00 90 FD | 	jmp	#LR__1814
16640                 | LR__1813
16640     A7 12 02 F6 | 	mov	arg01, fp
16644     04 71 BF FD | 	call	#_converttoint
16648     14 4E 05 F1 | 	add	fp, #20
1664c     A7 FA 61 FC | 	wrlong	result1, fp
16650     14 4E 85 F1 | 	sub	fp, #20
16654                 | LR__1814
16654     10 6F BF FD | 	call	#_pop
16658     FF 16 02 F6 | 	mov	arg03, result3
1665c     A7 FA 61 FC | 	wrlong	result1, fp
16660     04 4E 05 F1 | 	add	fp, #4
16664     A7 FC 61 FC | 	wrlong	result2, fp
16668     04 4E 05 F1 | 	add	fp, #4
1666c     A7 16 62 FC | 	wrlong	arg03, fp
16670                 | ' t1=pop()
16670                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
16670     08 4E 85 F1 | 	sub	fp, #8
16674     2C 16 0E F2 | 	cmp	arg03, #44 wz
16678     44 00 90 AD |  if_e	jmp	#LR__1815
1667c     00 12 06 F6 | 	mov	arg01, #0
16680     18 5F B1 FD | 	call	#__system___getiolock_0602
16684     FD 12 02 F6 | 	mov	arg01, result1
16688     6C 02 B1 FD | 	call	#__system___lockmem
1668c     B7 01 00 FF 
16690     D0 14 06 F6 | 	mov	arg02, ##@LR__5934
16694     00 12 06 F6 | 	mov	arg01, #0
16698     00 16 06 F6 | 	mov	arg03, #0
1669c     50 0F B1 FD | 	call	#__system___basic_print_string
166a0     00 12 06 F6 | 	mov	arg01, #0
166a4     0A 14 06 F6 | 	mov	arg02, #10
166a8     00 16 06 F6 | 	mov	arg03, #0
166ac     E8 0E B1 FD | 	call	#__system___basic_print_char
166b0     00 12 06 F6 | 	mov	arg01, #0
166b4     E4 5E B1 FD | 	call	#__system___getiolock_0602
166b8     FD 00 68 FC | 	wrlong	#0, result1
166bc     D8 00 90 FD | 	jmp	#LR__1822
166c0                 | LR__1815
166c0     A7 26 02 FB | 	rdlong	local01, fp
166c4     18 4E 05 F1 | 	add	fp, #24
166c8     A7 26 62 FC | 	wrlong	local01, fp
166cc                 | ' channel  = t1.result.iresult
166cc                 | ' select case  mode
166cc     04 4E 85 F1 | 	sub	fp, #4
166d0     A7 28 02 FB | 	rdlong	local02, fp
166d4     14 4E 85 F1 | 	sub	fp, #20
166d8     01 28 86 F1 | 	sub	local02, #1
166dc     04 28 26 F3 | 	fle	local02, #4
166e0     30 28 62 FD | 	jmprel	local02
166e4                 | LR__1816
166e4     10 00 90 FD | 	jmp	#LR__1817
166e8     2C 00 90 FD | 	jmp	#LR__1818
166ec     68 00 90 FD | 	jmp	#LR__1820
166f0     44 00 90 FD | 	jmp	#LR__1819
166f4     60 00 90 FD | 	jmp	#LR__1820
166f8                 | LR__1817
166f8     18 4E 05 F1 | 	add	fp, #24
166fc     A7 12 02 FB | 	rdlong	arg01, fp
16700     0C 4E 85 F1 | 	sub	fp, #12
16704     A7 14 02 FB | 	rdlong	arg02, fp
16708     0C 4E 85 F1 | 	sub	fp, #12
1670c     00 16 06 F6 | 	mov	arg03, #0
16710     E8 0D B1 FD | 	call	#__system___basic_open_string
16714     80 00 90 FD | 	jmp	#LR__1821
16718                 | LR__1818
16718     18 4E 05 F1 | 	add	fp, #24
1671c     A7 12 02 FB | 	rdlong	arg01, fp
16720     0C 4E 85 F1 | 	sub	fp, #12
16724     A7 14 02 FB | 	rdlong	arg02, fp
16728     0C 4E 85 F1 | 	sub	fp, #12
1672c     0D 16 06 F6 | 	mov	arg03, #13
16730     C8 0D B1 FD | 	call	#__system___basic_open_string
16734     60 00 90 FD | 	jmp	#LR__1821
16738                 | LR__1819
16738     18 4E 05 F1 | 	add	fp, #24
1673c     A7 12 02 FB | 	rdlong	arg01, fp
16740     0C 4E 85 F1 | 	sub	fp, #12
16744     A7 14 02 FB | 	rdlong	arg02, fp
16748     0C 4E 85 F1 | 	sub	fp, #12
1674c     25 16 06 F6 | 	mov	arg03, #37
16750     A8 0D B1 FD | 	call	#__system___basic_open_string
16754     40 00 90 FD | 	jmp	#LR__1821
16758                 | LR__1820
16758     00 12 06 F6 | 	mov	arg01, #0
1675c     3C 5E B1 FD | 	call	#__system___getiolock_0602
16760     FD 12 02 F6 | 	mov	arg01, result1
16764     90 01 B1 FD | 	call	#__system___lockmem
16768     B7 01 00 FF 
1676c     E2 14 06 F6 | 	mov	arg02, ##@LR__5935
16770     00 12 06 F6 | 	mov	arg01, #0
16774     00 16 06 F6 | 	mov	arg03, #0
16778     74 0E B1 FD | 	call	#__system___basic_print_string
1677c     00 12 06 F6 | 	mov	arg01, #0
16780     0A 14 06 F6 | 	mov	arg02, #10
16784     00 16 06 F6 | 	mov	arg03, #0
16788     0C 0E B1 FD | 	call	#__system___basic_print_char
1678c     00 12 06 F6 | 	mov	arg01, #0
16790     08 5E B1 FD | 	call	#__system___getiolock_0602
16794     FD 00 68 FC | 	wrlong	#0, result1
16798                 | LR__1821
16798                 | LR__1822
16798     A7 F0 03 F6 | 	mov	ptra, fp
1679c     B2 00 A0 FD | 	call	#popregs_
167a0                 | _do_open_ret
167a0     2D 00 64 FD | 	ret
167a4                 | 
167a4                 | ' 
167a4                 | ' ' ------------------ padh
167a4                 | ' 
167a4                 | ' sub do_padh
167a4                 | _do_padh
167a4     01 4A 05 F6 | 	mov	COUNT_, #1
167a8     A8 00 A0 FD | 	call	#pushregs_
167ac     14 F0 07 F1 | 	add	ptra, #20
167b0     4A 00 00 FF 
167b4     80 E4 05 F1 | 	add	objptr, ##38016
167b8     F2 26 02 FB | 	rdlong	local01, objptr
167bc     13 17 02 F6 | 	mov	arg03, local01
167c0     01 16 66 F0 | 	shl	arg03, #1
167c4     13 17 02 F1 | 	add	arg03, local01
167c8     02 16 66 F0 | 	shl	arg03, #2
167cc     03 00 00 FF 
167d0     04 E4 85 F1 | 	sub	objptr, ##1540
167d4     F2 16 02 F1 | 	add	arg03, objptr
167d8     0B 17 02 FB | 	rdlong	arg03, arg03
167dc     0C 4E 05 F1 | 	add	fp, #12
167e0     A7 16 62 FC | 	wrlong	arg03, fp
167e4                 | ' 
167e4                 | ' numpar=compiledline(lineptr_e).result.uresult
167e4                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
167e4     0C 4E 85 F1 | 	sub	fp, #12
167e8     02 16 16 F2 | 	cmp	arg03, #2 wc
167ec     47 00 00 FF 
167f0     7C E4 85 F1 | 	sub	objptr, ##36476
167f4     40 00 90 CD |  if_b	jmp	#LR__1830
167f8     00 12 06 F6 | 	mov	arg01, #0
167fc     9C 5D B1 FD | 	call	#__system___getiolock_0602
16800     FD 12 02 F6 | 	mov	arg01, result1
16804     F0 00 B1 FD | 	call	#__system___lockmem
16808     B7 01 00 FF 
1680c     F5 14 06 F6 | 	mov	arg02, ##@LR__5936
16810     00 12 06 F6 | 	mov	arg01, #0
16814     00 16 06 F6 | 	mov	arg03, #0
16818     D4 0D B1 FD | 	call	#__system___basic_print_string
1681c     00 12 06 F6 | 	mov	arg01, #0
16820     78 5D B1 FD | 	call	#__system___getiolock_0602
16824     FD 00 68 FC | 	wrlong	#0, result1
16828     27 12 06 F6 | 	mov	arg01, #39
1682c     00 14 06 F6 | 	mov	arg02, #0
16830     D4 C6 B0 FD | 	call	#_printerror
16834     F0 00 90 FD | 	jmp	#LR__1834
16838                 | LR__1830
16838                 | ' if numpar=0 then 
16838     0C 4E 05 F1 | 	add	fp, #12
1683c     A7 FE 09 FB | 	rdlong	result3, fp wz
16840     0C 4E 85 F1 | 	sub	fp, #12
16844     30 00 90 5D |  if_ne	jmp	#LR__1831
16848     51 00 00 FF 
1684c     AC E5 05 F1 | 	add	objptr, ##41900
16850     F2 26 02 FB | 	rdlong	local01, objptr
16854     51 00 00 FF 
16858     AC E5 85 F1 | 	sub	objptr, ##41900
1685c     A7 26 62 FC | 	wrlong	local01, fp
16860     08 4E 05 F1 | 	add	fp, #8
16864     A7 38 68 FC | 	wrlong	#28, fp
16868     08 4E 85 F1 | 	sub	fp, #8
1686c     A7 12 02 F6 | 	mov	arg01, fp
16870     8C 6D BF FD | 	call	#_push
16874                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
16874     B0 00 90 FD | 	jmp	#LR__1834
16878                 | LR__1831
16878     EC 6C BF FD | 	call	#_pop
1687c     A7 FA 61 FC | 	wrlong	result1, fp
16880     04 4E 05 F1 | 	add	fp, #4
16884     A7 FC 61 FC | 	wrlong	result2, fp
16888     04 4E 05 F1 | 	add	fp, #4
1688c     A7 FE 61 FC | 	wrlong	result3, fp
16890                 | ' t1=pop()
16890                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16890     08 4E 85 F1 | 	sub	fp, #8
16894     1C FE 0D F2 | 	cmp	result3, #28 wz
16898     08 4E 05 51 |  if_ne	add	fp, #8
1689c     A7 26 02 5B |  if_ne	rdlong	local01, fp
168a0     08 4E 85 51 |  if_ne	sub	fp, #8
168a4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
168a8     70 00 90 5D |  if_ne	jmp	#LR__1833
168ac     A7 26 02 FB | 	rdlong	local01, fp
168b0     52 00 00 FF 
168b4     08 E5 05 F1 | 	add	objptr, ##42248
168b8     F2 26 62 FC | 	wrlong	local01, objptr
168bc                 | '   q=t1.result.uresult
168bc                 | '   if q<7 then 
168bc     52 00 00 FF 
168c0     08 E5 85 F1 | 	sub	objptr, ##42248
168c4     07 26 56 F2 | 	cmps	local01, #7 wc
168c8     40 00 90 3D |  if_ae	jmp	#LR__1832
168cc     52 00 00 FF 
168d0     08 E5 05 F1 | 	add	objptr, ##42248
168d4     F2 26 02 FB | 	rdlong	local01, objptr
168d8     02 26 66 F0 | 	shl	local01, #2
168dc     5C E5 85 F1 | 	sub	objptr, #348
168e0     F2 26 02 F1 | 	add	local01, objptr
168e4     13 27 02 FB | 	rdlong	local01, local01
168e8     A7 26 62 FC | 	wrlong	local01, fp
168ec     08 4E 05 F1 | 	add	fp, #8
168f0     A7 38 68 FC | 	wrlong	#28, fp
168f4     08 4E 85 F1 | 	sub	fp, #8
168f8     A7 12 02 F6 | 	mov	arg01, fp
168fc     51 00 00 FF 
16900     AC E5 85 F1 | 	sub	objptr, ##41900
16904     F8 6C BF FD | 	call	#_push
16908                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16908     1C 00 90 FD | 	jmp	#LR__1834
1690c                 | LR__1832
1690c     29 12 06 F6 | 	mov	arg01, #41
16910     00 14 06 F6 | 	mov	arg02, #0
16914     F0 C5 B0 FD | 	call	#_printerror
16918                 | '      printerror(41) : return
16918     0C 00 90 FD | 	jmp	#LR__1834
1691c                 | LR__1833
1691c     29 12 06 F6 | 	mov	arg01, #41
16920     00 14 06 F6 | 	mov	arg02, #0
16924     E0 C5 B0 FD | 	call	#_printerror
16928                 | LR__1834
16928     A7 F0 03 F6 | 	mov	ptra, fp
1692c     B2 00 A0 FD | 	call	#popregs_
16930                 | _do_padh_ret
16930     2D 00 64 FD | 	ret
16934                 | 
16934                 | ' 
16934                 | ' ' ------------------ padrx
16934                 | ' 
16934                 | ' sub do_padrx
16934                 | _do_padrx
16934     02 4A 05 F6 | 	mov	COUNT_, #2
16938     A8 00 A0 FD | 	call	#pushregs_
1693c     14 F0 07 F1 | 	add	ptra, #20
16940     4A 00 00 FF 
16944     80 E4 05 F1 | 	add	objptr, ##38016
16948     F2 26 02 FB | 	rdlong	local01, objptr
1694c     13 17 02 F6 | 	mov	arg03, local01
16950     01 16 66 F0 | 	shl	arg03, #1
16954     13 17 02 F1 | 	add	arg03, local01
16958     02 16 66 F0 | 	shl	arg03, #2
1695c     03 00 00 FF 
16960     04 E4 85 F1 | 	sub	objptr, ##1540
16964     F2 16 02 F1 | 	add	arg03, objptr
16968     0B 17 02 FB | 	rdlong	arg03, arg03
1696c     0C 4E 05 F1 | 	add	fp, #12
16970     A7 16 62 FC | 	wrlong	arg03, fp
16974                 | ' 
16974                 | ' numpar=compiledline(lineptr_e).result.uresult
16974                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
16974     0C 4E 85 F1 | 	sub	fp, #12
16978     02 16 16 F2 | 	cmp	arg03, #2 wc
1697c     47 00 00 FF 
16980     7C E4 85 F1 | 	sub	objptr, ##36476
16984     40 00 90 CD |  if_b	jmp	#LR__1840
16988     00 12 06 F6 | 	mov	arg01, #0
1698c     0C 5C B1 FD | 	call	#__system___getiolock_0602
16990     FD 12 02 F6 | 	mov	arg01, result1
16994     60 FF B0 FD | 	call	#__system___lockmem
16998     B7 01 00 FF 
1699c     FC 14 06 F6 | 	mov	arg02, ##@LR__5937
169a0     00 12 06 F6 | 	mov	arg01, #0
169a4     00 16 06 F6 | 	mov	arg03, #0
169a8     44 0C B1 FD | 	call	#__system___basic_print_string
169ac     00 12 06 F6 | 	mov	arg01, #0
169b0     E8 5B B1 FD | 	call	#__system___getiolock_0602
169b4     FD 00 68 FC | 	wrlong	#0, result1
169b8     27 12 06 F6 | 	mov	arg01, #39
169bc     00 14 06 F6 | 	mov	arg02, #0
169c0     44 C5 B0 FD | 	call	#_printerror
169c4     E0 01 90 FD | 	jmp	#LR__1844
169c8                 | LR__1840
169c8                 | ' if numpar=0 then 
169c8     0C 4E 05 F1 | 	add	fp, #12
169cc     A7 FE 09 FB | 	rdlong	result3, fp wz
169d0     0C 4E 85 F1 | 	sub	fp, #12
169d4     A8 00 90 5D |  if_ne	jmp	#LR__1841
169d8     00 C0 1B FF 
169dc     00 26 06 F6 | 	mov	local01, ##931135488
169e0     51 00 00 FF 
169e4     C8 E5 05 F1 | 	add	objptr, ##41928
169e8     F2 12 02 FB | 	rdlong	arg01, objptr
169ec     51 00 00 FF 
169f0     C8 E5 85 F1 | 	sub	objptr, ##41928
169f4     09 13 52 F6 | 	abs	arg01, arg01 wc
169f8     1F 28 C6 C9 |  if_b	decod	local02, #31
169fc     00 28 06 36 |  if_ae	mov	local02, #0
16a00     6C 29 B1 FD | 	call	#__system___float_fromuns
16a04     14 FB 61 F5 | 	xor	result1, local02
16a08     FD 12 02 F6 | 	mov	arg01, result1
16a0c     FF 7F 23 FF 
16a10     00 14 06 F6 | 	mov	arg02, ##1191181824
16a14     60 2F B1 FD | 	call	#__system___float_div
16a18     FD 14 02 F6 | 	mov	arg02, result1
16a1c     13 13 02 F6 | 	mov	arg01, local01
16a20     80 29 B1 FD | 	call	#__system___float_add
16a24     10 4E 05 F1 | 	add	fp, #16
16a28     A7 FA 61 FC | 	wrlong	result1, fp
16a2c                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16a2c     10 4E 85 F1 | 	sub	fp, #16
16a30     1F FA 05 F4 | 	bitl	result1, #31
16a34     FD 12 02 F6 | 	mov	arg01, result1
16a38     89 41 1D FF 
16a3c     6F 14 06 F6 | 	mov	arg02, ##981668463
16a40     01 16 06 F6 | 	mov	arg03, #1
16a44     60 31 B1 FD | 	call	#__system___float_cmp
16a48     00 FA 55 F2 | 	cmps	result1, #0 wc
16a4c     10 4E 05 C1 |  if_b	add	fp, #16
16a50     A7 00 68 CC |  if_b	wrlong	#0, fp
16a54     10 4E 85 C1 |  if_b	sub	fp, #16
16a58     10 4E 05 F1 | 	add	fp, #16
16a5c     A7 26 02 FB | 	rdlong	local01, fp
16a60     10 4E 85 F1 | 	sub	fp, #16
16a64     A7 26 62 FC | 	wrlong	local01, fp
16a68     08 4E 05 F1 | 	add	fp, #8
16a6c     A7 3C 68 FC | 	wrlong	#30, fp
16a70     08 4E 85 F1 | 	sub	fp, #8
16a74     A7 12 02 F6 | 	mov	arg01, fp
16a78     84 6B BF FD | 	call	#_push
16a7c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16a7c     28 01 90 FD | 	jmp	#LR__1844
16a80                 | LR__1841
16a80     E4 6A BF FD | 	call	#_pop
16a84     A7 FA 61 FC | 	wrlong	result1, fp
16a88     04 4E 05 F1 | 	add	fp, #4
16a8c     A7 FC 61 FC | 	wrlong	result2, fp
16a90     04 4E 05 F1 | 	add	fp, #4
16a94     A7 FE 61 FC | 	wrlong	result3, fp
16a98                 | ' t1=pop()
16a98                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16a98     08 4E 85 F1 | 	sub	fp, #8
16a9c     1C FE 0D F2 | 	cmp	result3, #28 wz
16aa0     08 4E 05 51 |  if_ne	add	fp, #8
16aa4     A7 26 02 5B |  if_ne	rdlong	local01, fp
16aa8     08 4E 85 51 |  if_ne	sub	fp, #8
16aac     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16ab0     E8 00 90 5D |  if_ne	jmp	#LR__1843
16ab4     A7 26 02 FB | 	rdlong	local01, fp
16ab8     52 00 00 FF 
16abc     08 E5 05 F1 | 	add	objptr, ##42248
16ac0     F2 26 62 FC | 	wrlong	local01, objptr
16ac4                 | '   q=t1.result.uresult
16ac4                 | '   if q<7 then 
16ac4     52 00 00 FF 
16ac8     08 E5 85 F1 | 	sub	objptr, ##42248
16acc     07 26 56 F2 | 	cmps	local01, #7 wc
16ad0     B8 00 90 3D |  if_ae	jmp	#LR__1842
16ad4     00 C0 1B FF 
16ad8     00 26 06 F6 | 	mov	local01, ##931135488
16adc     52 00 00 FF 
16ae0     08 E5 05 F1 | 	add	objptr, ##42248
16ae4     F2 16 02 FB | 	rdlong	arg03, objptr
16ae8     02 16 66 F0 | 	shl	arg03, #2
16aec     40 E5 85 F1 | 	sub	objptr, #320
16af0     F2 16 02 F1 | 	add	arg03, objptr
16af4     0B 13 02 FB | 	rdlong	arg01, arg03
16af8     51 00 00 FF 
16afc     C8 E5 85 F1 | 	sub	objptr, ##41928
16b00     09 13 52 F6 | 	abs	arg01, arg01 wc
16b04     1F 28 C6 C9 |  if_b	decod	local02, #31
16b08     00 28 06 36 |  if_ae	mov	local02, #0
16b0c     60 28 B1 FD | 	call	#__system___float_fromuns
16b10     14 FB 61 F5 | 	xor	result1, local02
16b14     FD 12 02 F6 | 	mov	arg01, result1
16b18     FF 7F 23 FF 
16b1c     00 14 06 F6 | 	mov	arg02, ##1191181824
16b20     54 2E B1 FD | 	call	#__system___float_div
16b24     FD 14 02 F6 | 	mov	arg02, result1
16b28     13 13 02 F6 | 	mov	arg01, local01
16b2c     74 28 B1 FD | 	call	#__system___float_add
16b30     10 4E 05 F1 | 	add	fp, #16
16b34     A7 FA 61 FC | 	wrlong	result1, fp
16b38                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16b38     10 4E 85 F1 | 	sub	fp, #16
16b3c     1F FA 05 F4 | 	bitl	result1, #31
16b40     FD 12 02 F6 | 	mov	arg01, result1
16b44     89 41 1D FF 
16b48     6F 14 06 F6 | 	mov	arg02, ##981668463
16b4c     01 16 06 F6 | 	mov	arg03, #1
16b50     54 30 B1 FD | 	call	#__system___float_cmp
16b54     00 FA 55 F2 | 	cmps	result1, #0 wc
16b58     10 4E 05 C1 |  if_b	add	fp, #16
16b5c     A7 00 68 CC |  if_b	wrlong	#0, fp
16b60     10 4E 85 C1 |  if_b	sub	fp, #16
16b64     10 4E 05 F1 | 	add	fp, #16
16b68     A7 26 02 FB | 	rdlong	local01, fp
16b6c     10 4E 85 F1 | 	sub	fp, #16
16b70     A7 26 62 FC | 	wrlong	local01, fp
16b74     08 4E 05 F1 | 	add	fp, #8
16b78     A7 3C 68 FC | 	wrlong	#30, fp
16b7c     08 4E 85 F1 | 	sub	fp, #8
16b80     A7 12 02 F6 | 	mov	arg01, fp
16b84     78 6A BF FD | 	call	#_push
16b88                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16b88     1C 00 90 FD | 	jmp	#LR__1844
16b8c                 | LR__1842
16b8c     29 12 06 F6 | 	mov	arg01, #41
16b90     00 14 06 F6 | 	mov	arg02, #0
16b94     70 C3 B0 FD | 	call	#_printerror
16b98                 | '      printerror(41) : return
16b98     0C 00 90 FD | 	jmp	#LR__1844
16b9c                 | LR__1843
16b9c     29 12 06 F6 | 	mov	arg01, #41
16ba0     00 14 06 F6 | 	mov	arg02, #0
16ba4     60 C3 B0 FD | 	call	#_printerror
16ba8                 | LR__1844
16ba8     A7 F0 03 F6 | 	mov	ptra, fp
16bac     B2 00 A0 FD | 	call	#popregs_
16bb0                 | _do_padrx_ret
16bb0     2D 00 64 FD | 	ret
16bb4                 | 
16bb4                 | ' 
16bb4                 | ' ' ------------------ padry
16bb4                 | ' 
16bb4                 | ' sub do_padry
16bb4                 | _do_padry
16bb4     02 4A 05 F6 | 	mov	COUNT_, #2
16bb8     A8 00 A0 FD | 	call	#pushregs_
16bbc     14 F0 07 F1 | 	add	ptra, #20
16bc0     4A 00 00 FF 
16bc4     80 E4 05 F1 | 	add	objptr, ##38016
16bc8     F2 26 02 FB | 	rdlong	local01, objptr
16bcc     13 17 02 F6 | 	mov	arg03, local01
16bd0     01 16 66 F0 | 	shl	arg03, #1
16bd4     13 17 02 F1 | 	add	arg03, local01
16bd8     02 16 66 F0 | 	shl	arg03, #2
16bdc     03 00 00 FF 
16be0     04 E4 85 F1 | 	sub	objptr, ##1540
16be4     F2 16 02 F1 | 	add	arg03, objptr
16be8     0B 17 02 FB | 	rdlong	arg03, arg03
16bec     0C 4E 05 F1 | 	add	fp, #12
16bf0     A7 16 62 FC | 	wrlong	arg03, fp
16bf4                 | ' 
16bf4                 | ' numpar=compiledline(lineptr_e).result.uresult
16bf4                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16bf4     0C 4E 85 F1 | 	sub	fp, #12
16bf8     02 16 16 F2 | 	cmp	arg03, #2 wc
16bfc     47 00 00 FF 
16c00     7C E4 85 F1 | 	sub	objptr, ##36476
16c04     40 00 90 CD |  if_b	jmp	#LR__1850
16c08     00 12 06 F6 | 	mov	arg01, #0
16c0c     8C 59 B1 FD | 	call	#__system___getiolock_0602
16c10     FD 12 02 F6 | 	mov	arg01, result1
16c14     E0 FC B0 FD | 	call	#__system___lockmem
16c18     B7 01 00 FF 
16c1c     04 15 06 F6 | 	mov	arg02, ##@LR__5938
16c20     00 12 06 F6 | 	mov	arg01, #0
16c24     00 16 06 F6 | 	mov	arg03, #0
16c28     C4 09 B1 FD | 	call	#__system___basic_print_string
16c2c     00 12 06 F6 | 	mov	arg01, #0
16c30     68 59 B1 FD | 	call	#__system___getiolock_0602
16c34     FD 00 68 FC | 	wrlong	#0, result1
16c38     27 12 06 F6 | 	mov	arg01, #39
16c3c     00 14 06 F6 | 	mov	arg02, #0
16c40     C4 C2 B0 FD | 	call	#_printerror
16c44     E0 01 90 FD | 	jmp	#LR__1854
16c48                 | LR__1850
16c48                 | ' if numpar=0 then 
16c48     0C 4E 05 F1 | 	add	fp, #12
16c4c     A7 FE 09 FB | 	rdlong	result3, fp wz
16c50     0C 4E 85 F1 | 	sub	fp, #12
16c54     A8 00 90 5D |  if_ne	jmp	#LR__1851
16c58     00 C0 1B FF 
16c5c     00 26 06 F6 | 	mov	local01, ##931135488
16c60     51 00 00 FF 
16c64     E4 E5 05 F1 | 	add	objptr, ##41956
16c68     F2 12 02 FB | 	rdlong	arg01, objptr
16c6c     51 00 00 FF 
16c70     E4 E5 85 F1 | 	sub	objptr, ##41956
16c74     09 13 52 F6 | 	abs	arg01, arg01 wc
16c78     1F 28 C6 C9 |  if_b	decod	local02, #31
16c7c     00 28 06 36 |  if_ae	mov	local02, #0
16c80     EC 26 B1 FD | 	call	#__system___float_fromuns
16c84     14 FB 61 F5 | 	xor	result1, local02
16c88     FD 12 02 F6 | 	mov	arg01, result1
16c8c     FF 7F 23 FF 
16c90     00 14 06 F6 | 	mov	arg02, ##1191181824
16c94     E0 2C B1 FD | 	call	#__system___float_div
16c98     FD 14 02 F6 | 	mov	arg02, result1
16c9c     13 13 02 F6 | 	mov	arg01, local01
16ca0     00 27 B1 FD | 	call	#__system___float_add
16ca4     10 4E 05 F1 | 	add	fp, #16
16ca8     A7 FA 61 FC | 	wrlong	result1, fp
16cac                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16cac     10 4E 85 F1 | 	sub	fp, #16
16cb0     1F FA 05 F4 | 	bitl	result1, #31
16cb4     FD 12 02 F6 | 	mov	arg01, result1
16cb8     89 41 1D FF 
16cbc     6F 14 06 F6 | 	mov	arg02, ##981668463
16cc0     01 16 06 F6 | 	mov	arg03, #1
16cc4     E0 2E B1 FD | 	call	#__system___float_cmp
16cc8     00 FA 55 F2 | 	cmps	result1, #0 wc
16ccc     10 4E 05 C1 |  if_b	add	fp, #16
16cd0     A7 00 68 CC |  if_b	wrlong	#0, fp
16cd4     10 4E 85 C1 |  if_b	sub	fp, #16
16cd8     10 4E 05 F1 | 	add	fp, #16
16cdc     A7 26 02 FB | 	rdlong	local01, fp
16ce0     10 4E 85 F1 | 	sub	fp, #16
16ce4     A7 26 62 FC | 	wrlong	local01, fp
16ce8     08 4E 05 F1 | 	add	fp, #8
16cec     A7 3C 68 FC | 	wrlong	#30, fp
16cf0     08 4E 85 F1 | 	sub	fp, #8
16cf4     A7 12 02 F6 | 	mov	arg01, fp
16cf8     04 69 BF FD | 	call	#_push
16cfc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16cfc     28 01 90 FD | 	jmp	#LR__1854
16d00                 | LR__1851
16d00     64 68 BF FD | 	call	#_pop
16d04     A7 FA 61 FC | 	wrlong	result1, fp
16d08     04 4E 05 F1 | 	add	fp, #4
16d0c     A7 FC 61 FC | 	wrlong	result2, fp
16d10     04 4E 05 F1 | 	add	fp, #4
16d14     A7 FE 61 FC | 	wrlong	result3, fp
16d18                 | ' t1=pop()
16d18                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16d18     08 4E 85 F1 | 	sub	fp, #8
16d1c     1C FE 0D F2 | 	cmp	result3, #28 wz
16d20     08 4E 05 51 |  if_ne	add	fp, #8
16d24     A7 26 02 5B |  if_ne	rdlong	local01, fp
16d28     08 4E 85 51 |  if_ne	sub	fp, #8
16d2c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16d30     E8 00 90 5D |  if_ne	jmp	#LR__1853
16d34     A7 26 02 FB | 	rdlong	local01, fp
16d38     52 00 00 FF 
16d3c     08 E5 05 F1 | 	add	objptr, ##42248
16d40     F2 26 62 FC | 	wrlong	local01, objptr
16d44                 | '   q=t1.result.uresult
16d44                 | '   if q<7 then 
16d44     52 00 00 FF 
16d48     08 E5 85 F1 | 	sub	objptr, ##42248
16d4c     07 26 56 F2 | 	cmps	local01, #7 wc
16d50     B8 00 90 3D |  if_ae	jmp	#LR__1852
16d54     00 C0 1B FF 
16d58     00 26 06 F6 | 	mov	local01, ##931135488
16d5c     52 00 00 FF 
16d60     08 E5 05 F1 | 	add	objptr, ##42248
16d64     F2 16 02 FB | 	rdlong	arg03, objptr
16d68     02 16 66 F0 | 	shl	arg03, #2
16d6c     24 E5 85 F1 | 	sub	objptr, #292
16d70     F2 16 02 F1 | 	add	arg03, objptr
16d74     0B 13 02 FB | 	rdlong	arg01, arg03
16d78     51 00 00 FF 
16d7c     E4 E5 85 F1 | 	sub	objptr, ##41956
16d80     09 13 52 F6 | 	abs	arg01, arg01 wc
16d84     1F 28 C6 C9 |  if_b	decod	local02, #31
16d88     00 28 06 36 |  if_ae	mov	local02, #0
16d8c     E0 25 B1 FD | 	call	#__system___float_fromuns
16d90     14 FB 61 F5 | 	xor	result1, local02
16d94     FD 12 02 F6 | 	mov	arg01, result1
16d98     FF 7F 23 FF 
16d9c     00 14 06 F6 | 	mov	arg02, ##1191181824
16da0     D4 2B B1 FD | 	call	#__system___float_div
16da4     FD 14 02 F6 | 	mov	arg02, result1
16da8     13 13 02 F6 | 	mov	arg01, local01
16dac     F4 25 B1 FD | 	call	#__system___float_add
16db0     10 4E 05 F1 | 	add	fp, #16
16db4     A7 FA 61 FC | 	wrlong	result1, fp
16db8                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16db8     10 4E 85 F1 | 	sub	fp, #16
16dbc     1F FA 05 F4 | 	bitl	result1, #31
16dc0     FD 12 02 F6 | 	mov	arg01, result1
16dc4     89 41 1D FF 
16dc8     6F 14 06 F6 | 	mov	arg02, ##981668463
16dcc     01 16 06 F6 | 	mov	arg03, #1
16dd0     D4 2D B1 FD | 	call	#__system___float_cmp
16dd4     00 FA 55 F2 | 	cmps	result1, #0 wc
16dd8     10 4E 05 C1 |  if_b	add	fp, #16
16ddc     A7 00 68 CC |  if_b	wrlong	#0, fp
16de0     10 4E 85 C1 |  if_b	sub	fp, #16
16de4     10 4E 05 F1 | 	add	fp, #16
16de8     A7 26 02 FB | 	rdlong	local01, fp
16dec     10 4E 85 F1 | 	sub	fp, #16
16df0     A7 26 62 FC | 	wrlong	local01, fp
16df4     08 4E 05 F1 | 	add	fp, #8
16df8     A7 3C 68 FC | 	wrlong	#30, fp
16dfc     08 4E 85 F1 | 	sub	fp, #8
16e00     A7 12 02 F6 | 	mov	arg01, fp
16e04     F8 67 BF FD | 	call	#_push
16e08                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16e08     1C 00 90 FD | 	jmp	#LR__1854
16e0c                 | LR__1852
16e0c     29 12 06 F6 | 	mov	arg01, #41
16e10     00 14 06 F6 | 	mov	arg02, #0
16e14     F0 C0 B0 FD | 	call	#_printerror
16e18                 | '      printerror(41) : return
16e18     0C 00 90 FD | 	jmp	#LR__1854
16e1c                 | LR__1853
16e1c     29 12 06 F6 | 	mov	arg01, #41
16e20     00 14 06 F6 | 	mov	arg02, #0
16e24     E0 C0 B0 FD | 	call	#_printerror
16e28                 | LR__1854
16e28     A7 F0 03 F6 | 	mov	ptra, fp
16e2c     B2 00 A0 FD | 	call	#popregs_
16e30                 | _do_padry_ret
16e30     2D 00 64 FD | 	ret
16e34                 | 
16e34                 | ' 
16e34                 | ' ' ------------------ padrz
16e34                 | ' 
16e34                 | ' sub do_padrz
16e34                 | _do_padrz
16e34     02 4A 05 F6 | 	mov	COUNT_, #2
16e38     A8 00 A0 FD | 	call	#pushregs_
16e3c     14 F0 07 F1 | 	add	ptra, #20
16e40     4A 00 00 FF 
16e44     80 E4 05 F1 | 	add	objptr, ##38016
16e48     F2 26 02 FB | 	rdlong	local01, objptr
16e4c     13 17 02 F6 | 	mov	arg03, local01
16e50     01 16 66 F0 | 	shl	arg03, #1
16e54     13 17 02 F1 | 	add	arg03, local01
16e58     02 16 66 F0 | 	shl	arg03, #2
16e5c     03 00 00 FF 
16e60     04 E4 85 F1 | 	sub	objptr, ##1540
16e64     F2 16 02 F1 | 	add	arg03, objptr
16e68     0B 17 02 FB | 	rdlong	arg03, arg03
16e6c     0C 4E 05 F1 | 	add	fp, #12
16e70     A7 16 62 FC | 	wrlong	arg03, fp
16e74                 | ' 
16e74                 | ' numpar=compiledline(lineptr_e).result.uresult
16e74                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
16e74     0C 4E 85 F1 | 	sub	fp, #12
16e78     02 16 16 F2 | 	cmp	arg03, #2 wc
16e7c     47 00 00 FF 
16e80     7C E4 85 F1 | 	sub	objptr, ##36476
16e84     40 00 90 CD |  if_b	jmp	#LR__1860
16e88     00 12 06 F6 | 	mov	arg01, #0
16e8c     0C 57 B1 FD | 	call	#__system___getiolock_0602
16e90     FD 12 02 F6 | 	mov	arg01, result1
16e94     60 FA B0 FD | 	call	#__system___lockmem
16e98     B7 01 00 FF 
16e9c     0C 15 06 F6 | 	mov	arg02, ##@LR__5939
16ea0     00 12 06 F6 | 	mov	arg01, #0
16ea4     00 16 06 F6 | 	mov	arg03, #0
16ea8     44 07 B1 FD | 	call	#__system___basic_print_string
16eac     00 12 06 F6 | 	mov	arg01, #0
16eb0     E8 56 B1 FD | 	call	#__system___getiolock_0602
16eb4     FD 00 68 FC | 	wrlong	#0, result1
16eb8     27 12 06 F6 | 	mov	arg01, #39
16ebc     00 14 06 F6 | 	mov	arg02, #0
16ec0     44 C0 B0 FD | 	call	#_printerror
16ec4     E0 01 90 FD | 	jmp	#LR__1864
16ec8                 | LR__1860
16ec8                 | ' if numpar=0 then 
16ec8     0C 4E 05 F1 | 	add	fp, #12
16ecc     A7 FE 09 FB | 	rdlong	result3, fp wz
16ed0     0C 4E 85 F1 | 	sub	fp, #12
16ed4     A8 00 90 5D |  if_ne	jmp	#LR__1861
16ed8     00 C0 1B FF 
16edc     00 26 06 F6 | 	mov	local01, ##931135488
16ee0     52 00 00 FF 
16ee4     00 E4 05 F1 | 	add	objptr, ##41984
16ee8     F2 12 02 FB | 	rdlong	arg01, objptr
16eec     52 00 00 FF 
16ef0     00 E4 85 F1 | 	sub	objptr, ##41984
16ef4     09 13 52 F6 | 	abs	arg01, arg01 wc
16ef8     1F 28 C6 C9 |  if_b	decod	local02, #31
16efc     00 28 06 36 |  if_ae	mov	local02, #0
16f00     6C 24 B1 FD | 	call	#__system___float_fromuns
16f04     14 FB 61 F5 | 	xor	result1, local02
16f08     FD 12 02 F6 | 	mov	arg01, result1
16f0c     FF 7F 23 FF 
16f10     00 14 06 F6 | 	mov	arg02, ##1191181824
16f14     60 2A B1 FD | 	call	#__system___float_div
16f18     FD 14 02 F6 | 	mov	arg02, result1
16f1c     13 13 02 F6 | 	mov	arg01, local01
16f20     80 24 B1 FD | 	call	#__system___float_add
16f24     10 4E 05 F1 | 	add	fp, #16
16f28     A7 FA 61 FC | 	wrlong	result1, fp
16f2c                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f2c     10 4E 85 F1 | 	sub	fp, #16
16f30     1F FA 05 F4 | 	bitl	result1, #31
16f34     FD 12 02 F6 | 	mov	arg01, result1
16f38     89 41 1D FF 
16f3c     6F 14 06 F6 | 	mov	arg02, ##981668463
16f40     01 16 06 F6 | 	mov	arg03, #1
16f44     60 2C B1 FD | 	call	#__system___float_cmp
16f48     00 FA 55 F2 | 	cmps	result1, #0 wc
16f4c     10 4E 05 C1 |  if_b	add	fp, #16
16f50     A7 00 68 CC |  if_b	wrlong	#0, fp
16f54     10 4E 85 C1 |  if_b	sub	fp, #16
16f58     10 4E 05 F1 | 	add	fp, #16
16f5c     A7 26 02 FB | 	rdlong	local01, fp
16f60     10 4E 85 F1 | 	sub	fp, #16
16f64     A7 26 62 FC | 	wrlong	local01, fp
16f68     08 4E 05 F1 | 	add	fp, #8
16f6c     A7 3C 68 FC | 	wrlong	#30, fp
16f70     08 4E 85 F1 | 	sub	fp, #8
16f74     A7 12 02 F6 | 	mov	arg01, fp
16f78     84 66 BF FD | 	call	#_push
16f7c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16f7c     28 01 90 FD | 	jmp	#LR__1864
16f80                 | LR__1861
16f80     E4 65 BF FD | 	call	#_pop
16f84     A7 FA 61 FC | 	wrlong	result1, fp
16f88     04 4E 05 F1 | 	add	fp, #4
16f8c     A7 FC 61 FC | 	wrlong	result2, fp
16f90     04 4E 05 F1 | 	add	fp, #4
16f94     A7 FE 61 FC | 	wrlong	result3, fp
16f98                 | ' t1=pop()
16f98                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16f98     08 4E 85 F1 | 	sub	fp, #8
16f9c     1C FE 0D F2 | 	cmp	result3, #28 wz
16fa0     08 4E 05 51 |  if_ne	add	fp, #8
16fa4     A7 26 02 5B |  if_ne	rdlong	local01, fp
16fa8     08 4E 85 51 |  if_ne	sub	fp, #8
16fac     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16fb0     E8 00 90 5D |  if_ne	jmp	#LR__1863
16fb4     A7 26 02 FB | 	rdlong	local01, fp
16fb8     52 00 00 FF 
16fbc     08 E5 05 F1 | 	add	objptr, ##42248
16fc0     F2 26 62 FC | 	wrlong	local01, objptr
16fc4                 | '   q=t1.result.uresult
16fc4                 | '   if q<7 then 
16fc4     52 00 00 FF 
16fc8     08 E5 85 F1 | 	sub	objptr, ##42248
16fcc     07 26 56 F2 | 	cmps	local01, #7 wc
16fd0     B8 00 90 3D |  if_ae	jmp	#LR__1862
16fd4     00 C0 1B FF 
16fd8     00 26 06 F6 | 	mov	local01, ##931135488
16fdc     52 00 00 FF 
16fe0     08 E5 05 F1 | 	add	objptr, ##42248
16fe4     F2 16 02 FB | 	rdlong	arg03, objptr
16fe8     02 16 66 F0 | 	shl	arg03, #2
16fec     08 E5 85 F1 | 	sub	objptr, #264
16ff0     F2 16 02 F1 | 	add	arg03, objptr
16ff4     0B 13 02 FB | 	rdlong	arg01, arg03
16ff8     52 00 00 FF 
16ffc     00 E4 85 F1 | 	sub	objptr, ##41984
17000     09 13 52 F6 | 	abs	arg01, arg01 wc
17004     1F 28 C6 C9 |  if_b	decod	local02, #31
17008     00 28 06 36 |  if_ae	mov	local02, #0
1700c     60 23 B1 FD | 	call	#__system___float_fromuns
17010     14 FB 61 F5 | 	xor	result1, local02
17014     FD 12 02 F6 | 	mov	arg01, result1
17018     FF 7F 23 FF 
1701c     00 14 06 F6 | 	mov	arg02, ##1191181824
17020     54 29 B1 FD | 	call	#__system___float_div
17024     FD 14 02 F6 | 	mov	arg02, result1
17028     13 13 02 F6 | 	mov	arg01, local01
1702c     74 23 B1 FD | 	call	#__system___float_add
17030     10 4E 05 F1 | 	add	fp, #16
17034     A7 FA 61 FC | 	wrlong	result1, fp
17038                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17038     10 4E 85 F1 | 	sub	fp, #16
1703c     1F FA 05 F4 | 	bitl	result1, #31
17040     FD 12 02 F6 | 	mov	arg01, result1
17044     89 41 1D FF 
17048     6F 14 06 F6 | 	mov	arg02, ##981668463
1704c     01 16 06 F6 | 	mov	arg03, #1
17050     54 2B B1 FD | 	call	#__system___float_cmp
17054     00 FA 55 F2 | 	cmps	result1, #0 wc
17058     10 4E 05 C1 |  if_b	add	fp, #16
1705c     A7 00 68 CC |  if_b	wrlong	#0, fp
17060     10 4E 85 C1 |  if_b	sub	fp, #16
17064     10 4E 05 F1 | 	add	fp, #16
17068     A7 26 02 FB | 	rdlong	local01, fp
1706c     10 4E 85 F1 | 	sub	fp, #16
17070     A7 26 62 FC | 	wrlong	local01, fp
17074     08 4E 05 F1 | 	add	fp, #8
17078     A7 3C 68 FC | 	wrlong	#30, fp
1707c     08 4E 85 F1 | 	sub	fp, #8
17080     A7 12 02 F6 | 	mov	arg01, fp
17084     78 65 BF FD | 	call	#_push
17088                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17088     1C 00 90 FD | 	jmp	#LR__1864
1708c                 | LR__1862
1708c     29 12 06 F6 | 	mov	arg01, #41
17090     00 14 06 F6 | 	mov	arg02, #0
17094     70 BE B0 FD | 	call	#_printerror
17098                 | '      printerror(41) : return
17098     0C 00 90 FD | 	jmp	#LR__1864
1709c                 | LR__1863
1709c     29 12 06 F6 | 	mov	arg01, #41
170a0     00 14 06 F6 | 	mov	arg02, #0
170a4     60 BE B0 FD | 	call	#_printerror
170a8                 | LR__1864
170a8     A7 F0 03 F6 | 	mov	ptra, fp
170ac     B2 00 A0 FD | 	call	#popregs_
170b0                 | _do_padrz_ret
170b0     2D 00 64 FD | 	ret
170b4                 | 
170b4                 | ' ' ------------------ padx
170b4                 | ' 
170b4                 | ' sub do_padx
170b4                 | _do_padx
170b4     02 4A 05 F6 | 	mov	COUNT_, #2
170b8     A8 00 A0 FD | 	call	#pushregs_
170bc     14 F0 07 F1 | 	add	ptra, #20
170c0     4A 00 00 FF 
170c4     80 E4 05 F1 | 	add	objptr, ##38016
170c8     F2 26 02 FB | 	rdlong	local01, objptr
170cc     13 17 02 F6 | 	mov	arg03, local01
170d0     01 16 66 F0 | 	shl	arg03, #1
170d4     13 17 02 F1 | 	add	arg03, local01
170d8     02 16 66 F0 | 	shl	arg03, #2
170dc     03 00 00 FF 
170e0     04 E4 85 F1 | 	sub	objptr, ##1540
170e4     F2 16 02 F1 | 	add	arg03, objptr
170e8     0B 17 02 FB | 	rdlong	arg03, arg03
170ec     0C 4E 05 F1 | 	add	fp, #12
170f0     A7 16 62 FC | 	wrlong	arg03, fp
170f4                 | ' 
170f4                 | ' numpar=compiledline(lineptr_e).result.uresult
170f4                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
170f4     0C 4E 85 F1 | 	sub	fp, #12
170f8     02 16 16 F2 | 	cmp	arg03, #2 wc
170fc     47 00 00 FF 
17100     7C E4 85 F1 | 	sub	objptr, ##36476
17104     40 00 90 CD |  if_b	jmp	#LR__1870
17108     00 12 06 F6 | 	mov	arg01, #0
1710c     8C 54 B1 FD | 	call	#__system___getiolock_0602
17110     FD 12 02 F6 | 	mov	arg01, result1
17114     E0 F7 B0 FD | 	call	#__system___lockmem
17118     B7 01 00 FF 
1711c     14 15 06 F6 | 	mov	arg02, ##@LR__5940
17120     00 12 06 F6 | 	mov	arg01, #0
17124     00 16 06 F6 | 	mov	arg03, #0
17128     C4 04 B1 FD | 	call	#__system___basic_print_string
1712c     00 12 06 F6 | 	mov	arg01, #0
17130     68 54 B1 FD | 	call	#__system___getiolock_0602
17134     FD 00 68 FC | 	wrlong	#0, result1
17138     27 12 06 F6 | 	mov	arg01, #39
1713c     00 14 06 F6 | 	mov	arg02, #0
17140     C4 BD B0 FD | 	call	#_printerror
17144     E0 01 90 FD | 	jmp	#LR__1874
17148                 | LR__1870
17148                 | ' if numpar=0 then 
17148     0C 4E 05 F1 | 	add	fp, #12
1714c     A7 FE 09 FB | 	rdlong	result3, fp wz
17150     0C 4E 85 F1 | 	sub	fp, #12
17154     A8 00 90 5D |  if_ne	jmp	#LR__1871
17158     00 C0 1B FF 
1715c     00 26 06 F6 | 	mov	local01, ##931135488
17160     51 00 00 FF 
17164     58 E5 05 F1 | 	add	objptr, ##41816
17168     F2 12 02 FB | 	rdlong	arg01, objptr
1716c     51 00 00 FF 
17170     58 E5 85 F1 | 	sub	objptr, ##41816
17174     09 13 52 F6 | 	abs	arg01, arg01 wc
17178     1F 28 C6 C9 |  if_b	decod	local02, #31
1717c     00 28 06 36 |  if_ae	mov	local02, #0
17180     EC 21 B1 FD | 	call	#__system___float_fromuns
17184     14 FB 61 F5 | 	xor	result1, local02
17188     FD 12 02 F6 | 	mov	arg01, result1
1718c     FF 7F 23 FF 
17190     00 14 06 F6 | 	mov	arg02, ##1191181824
17194     E0 27 B1 FD | 	call	#__system___float_div
17198     FD 14 02 F6 | 	mov	arg02, result1
1719c     13 13 02 F6 | 	mov	arg01, local01
171a0     00 22 B1 FD | 	call	#__system___float_add
171a4     10 4E 05 F1 | 	add	fp, #16
171a8     A7 FA 61 FC | 	wrlong	result1, fp
171ac                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
171ac     10 4E 85 F1 | 	sub	fp, #16
171b0     1F FA 05 F4 | 	bitl	result1, #31
171b4     FD 12 02 F6 | 	mov	arg01, result1
171b8     89 41 1D FF 
171bc     6F 14 06 F6 | 	mov	arg02, ##981668463
171c0     01 16 06 F6 | 	mov	arg03, #1
171c4     E0 29 B1 FD | 	call	#__system___float_cmp
171c8     00 FA 55 F2 | 	cmps	result1, #0 wc
171cc     10 4E 05 C1 |  if_b	add	fp, #16
171d0     A7 00 68 CC |  if_b	wrlong	#0, fp
171d4     10 4E 85 C1 |  if_b	sub	fp, #16
171d8     10 4E 05 F1 | 	add	fp, #16
171dc     A7 26 02 FB | 	rdlong	local01, fp
171e0     10 4E 85 F1 | 	sub	fp, #16
171e4     A7 26 62 FC | 	wrlong	local01, fp
171e8     08 4E 05 F1 | 	add	fp, #8
171ec     A7 3C 68 FC | 	wrlong	#30, fp
171f0     08 4E 85 F1 | 	sub	fp, #8
171f4     A7 12 02 F6 | 	mov	arg01, fp
171f8     04 64 BF FD | 	call	#_push
171fc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
171fc     28 01 90 FD | 	jmp	#LR__1874
17200                 | LR__1871
17200     64 63 BF FD | 	call	#_pop
17204     A7 FA 61 FC | 	wrlong	result1, fp
17208     04 4E 05 F1 | 	add	fp, #4
1720c     A7 FC 61 FC | 	wrlong	result2, fp
17210     04 4E 05 F1 | 	add	fp, #4
17214     A7 FE 61 FC | 	wrlong	result3, fp
17218                 | ' t1=pop()
17218                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17218     08 4E 85 F1 | 	sub	fp, #8
1721c     1C FE 0D F2 | 	cmp	result3, #28 wz
17220     08 4E 05 51 |  if_ne	add	fp, #8
17224     A7 26 02 5B |  if_ne	rdlong	local01, fp
17228     08 4E 85 51 |  if_ne	sub	fp, #8
1722c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17230     E8 00 90 5D |  if_ne	jmp	#LR__1873
17234     A7 26 02 FB | 	rdlong	local01, fp
17238     52 00 00 FF 
1723c     08 E5 05 F1 | 	add	objptr, ##42248
17240     F2 26 62 FC | 	wrlong	local01, objptr
17244                 | '   q=t1.result.uresult
17244                 | '   if q<7 then 
17244     52 00 00 FF 
17248     08 E5 85 F1 | 	sub	objptr, ##42248
1724c     07 26 56 F2 | 	cmps	local01, #7 wc
17250     B8 00 90 3D |  if_ae	jmp	#LR__1872
17254     00 C0 1B FF 
17258     00 26 06 F6 | 	mov	local01, ##931135488
1725c     52 00 00 FF 
17260     08 E5 05 F1 | 	add	objptr, ##42248
17264     F2 16 02 FB | 	rdlong	arg03, objptr
17268     02 16 66 F0 | 	shl	arg03, #2
1726c     B0 E5 85 F1 | 	sub	objptr, #432
17270     F2 16 02 F1 | 	add	arg03, objptr
17274     0B 13 02 FB | 	rdlong	arg01, arg03
17278     51 00 00 FF 
1727c     58 E5 85 F1 | 	sub	objptr, ##41816
17280     09 13 52 F6 | 	abs	arg01, arg01 wc
17284     1F 28 C6 C9 |  if_b	decod	local02, #31
17288     00 28 06 36 |  if_ae	mov	local02, #0
1728c     E0 20 B1 FD | 	call	#__system___float_fromuns
17290     14 FB 61 F5 | 	xor	result1, local02
17294     FD 12 02 F6 | 	mov	arg01, result1
17298     FF 7F 23 FF 
1729c     00 14 06 F6 | 	mov	arg02, ##1191181824
172a0     D4 26 B1 FD | 	call	#__system___float_div
172a4     FD 14 02 F6 | 	mov	arg02, result1
172a8     13 13 02 F6 | 	mov	arg01, local01
172ac     F4 20 B1 FD | 	call	#__system___float_add
172b0     10 4E 05 F1 | 	add	fp, #16
172b4     A7 FA 61 FC | 	wrlong	result1, fp
172b8                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
172b8     10 4E 85 F1 | 	sub	fp, #16
172bc     1F FA 05 F4 | 	bitl	result1, #31
172c0     FD 12 02 F6 | 	mov	arg01, result1
172c4     89 41 1D FF 
172c8     6F 14 06 F6 | 	mov	arg02, ##981668463
172cc     01 16 06 F6 | 	mov	arg03, #1
172d0     D4 28 B1 FD | 	call	#__system___float_cmp
172d4     00 FA 55 F2 | 	cmps	result1, #0 wc
172d8     10 4E 05 C1 |  if_b	add	fp, #16
172dc     A7 00 68 CC |  if_b	wrlong	#0, fp
172e0     10 4E 85 C1 |  if_b	sub	fp, #16
172e4     10 4E 05 F1 | 	add	fp, #16
172e8     A7 26 02 FB | 	rdlong	local01, fp
172ec     10 4E 85 F1 | 	sub	fp, #16
172f0     A7 26 62 FC | 	wrlong	local01, fp
172f4     08 4E 05 F1 | 	add	fp, #8
172f8     A7 3C 68 FC | 	wrlong	#30, fp
172fc     08 4E 85 F1 | 	sub	fp, #8
17300     A7 12 02 F6 | 	mov	arg01, fp
17304     F8 62 BF FD | 	call	#_push
17308                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17308     1C 00 90 FD | 	jmp	#LR__1874
1730c                 | LR__1872
1730c     29 12 06 F6 | 	mov	arg01, #41
17310     00 14 06 F6 | 	mov	arg02, #0
17314     F0 BB B0 FD | 	call	#_printerror
17318                 | '      printerror(41) : return
17318     0C 00 90 FD | 	jmp	#LR__1874
1731c                 | LR__1873
1731c     29 12 06 F6 | 	mov	arg01, #41
17320     00 14 06 F6 | 	mov	arg02, #0
17324     E0 BB B0 FD | 	call	#_printerror
17328                 | LR__1874
17328     A7 F0 03 F6 | 	mov	ptra, fp
1732c     B2 00 A0 FD | 	call	#popregs_
17330                 | _do_padx_ret
17330     2D 00 64 FD | 	ret
17334                 | 
17334                 | ' 
17334                 | ' ' ------------------ pady
17334                 | ' 
17334                 | ' sub do_pady
17334                 | _do_pady
17334     02 4A 05 F6 | 	mov	COUNT_, #2
17338     A8 00 A0 FD | 	call	#pushregs_
1733c     14 F0 07 F1 | 	add	ptra, #20
17340     4A 00 00 FF 
17344     80 E4 05 F1 | 	add	objptr, ##38016
17348     F2 26 02 FB | 	rdlong	local01, objptr
1734c     13 17 02 F6 | 	mov	arg03, local01
17350     01 16 66 F0 | 	shl	arg03, #1
17354     13 17 02 F1 | 	add	arg03, local01
17358     02 16 66 F0 | 	shl	arg03, #2
1735c     03 00 00 FF 
17360     04 E4 85 F1 | 	sub	objptr, ##1540
17364     F2 16 02 F1 | 	add	arg03, objptr
17368     0B 17 02 FB | 	rdlong	arg03, arg03
1736c     0C 4E 05 F1 | 	add	fp, #12
17370     A7 16 62 FC | 	wrlong	arg03, fp
17374                 | ' 
17374                 | ' numpar=compiledline(lineptr_e).result.uresult
17374                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
17374     0C 4E 85 F1 | 	sub	fp, #12
17378     02 16 16 F2 | 	cmp	arg03, #2 wc
1737c     47 00 00 FF 
17380     7C E4 85 F1 | 	sub	objptr, ##36476
17384     40 00 90 CD |  if_b	jmp	#LR__1880
17388     00 12 06 F6 | 	mov	arg01, #0
1738c     0C 52 B1 FD | 	call	#__system___getiolock_0602
17390     FD 12 02 F6 | 	mov	arg01, result1
17394     60 F5 B0 FD | 	call	#__system___lockmem
17398     B7 01 00 FF 
1739c     1B 15 06 F6 | 	mov	arg02, ##@LR__5941
173a0     00 12 06 F6 | 	mov	arg01, #0
173a4     00 16 06 F6 | 	mov	arg03, #0
173a8     44 02 B1 FD | 	call	#__system___basic_print_string
173ac     00 12 06 F6 | 	mov	arg01, #0
173b0     E8 51 B1 FD | 	call	#__system___getiolock_0602
173b4     FD 00 68 FC | 	wrlong	#0, result1
173b8     27 12 06 F6 | 	mov	arg01, #39
173bc     00 14 06 F6 | 	mov	arg02, #0
173c0     44 BB B0 FD | 	call	#_printerror
173c4     E0 01 90 FD | 	jmp	#LR__1884
173c8                 | LR__1880
173c8                 | ' if numpar=0 then 
173c8     0C 4E 05 F1 | 	add	fp, #12
173cc     A7 FE 09 FB | 	rdlong	result3, fp wz
173d0     0C 4E 85 F1 | 	sub	fp, #12
173d4     A8 00 90 5D |  if_ne	jmp	#LR__1881
173d8     00 C0 1B FF 
173dc     00 26 06 F6 | 	mov	local01, ##931135488
173e0     51 00 00 FF 
173e4     74 E5 05 F1 | 	add	objptr, ##41844
173e8     F2 12 02 FB | 	rdlong	arg01, objptr
173ec     51 00 00 FF 
173f0     74 E5 85 F1 | 	sub	objptr, ##41844
173f4     09 13 52 F6 | 	abs	arg01, arg01 wc
173f8     1F 28 C6 C9 |  if_b	decod	local02, #31
173fc     00 28 06 36 |  if_ae	mov	local02, #0
17400     6C 1F B1 FD | 	call	#__system___float_fromuns
17404     14 FB 61 F5 | 	xor	result1, local02
17408     FD 12 02 F6 | 	mov	arg01, result1
1740c     FF 7F 23 FF 
17410     00 14 06 F6 | 	mov	arg02, ##1191181824
17414     60 25 B1 FD | 	call	#__system___float_div
17418     FD 14 02 F6 | 	mov	arg02, result1
1741c     13 13 02 F6 | 	mov	arg01, local01
17420     80 1F B1 FD | 	call	#__system___float_add
17424     10 4E 05 F1 | 	add	fp, #16
17428     A7 FA 61 FC | 	wrlong	result1, fp
1742c                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1742c     10 4E 85 F1 | 	sub	fp, #16
17430     1F FA 05 F4 | 	bitl	result1, #31
17434     FD 12 02 F6 | 	mov	arg01, result1
17438     89 41 1D FF 
1743c     6F 14 06 F6 | 	mov	arg02, ##981668463
17440     01 16 06 F6 | 	mov	arg03, #1
17444     60 27 B1 FD | 	call	#__system___float_cmp
17448     00 FA 55 F2 | 	cmps	result1, #0 wc
1744c     10 4E 05 C1 |  if_b	add	fp, #16
17450     A7 00 68 CC |  if_b	wrlong	#0, fp
17454     10 4E 85 C1 |  if_b	sub	fp, #16
17458     10 4E 05 F1 | 	add	fp, #16
1745c     A7 26 02 FB | 	rdlong	local01, fp
17460     10 4E 85 F1 | 	sub	fp, #16
17464     A7 26 62 FC | 	wrlong	local01, fp
17468     08 4E 05 F1 | 	add	fp, #8
1746c     A7 3C 68 FC | 	wrlong	#30, fp
17470     08 4E 85 F1 | 	sub	fp, #8
17474     A7 12 02 F6 | 	mov	arg01, fp
17478     84 61 BF FD | 	call	#_push
1747c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1747c     28 01 90 FD | 	jmp	#LR__1884
17480                 | LR__1881
17480     E4 60 BF FD | 	call	#_pop
17484     A7 FA 61 FC | 	wrlong	result1, fp
17488     04 4E 05 F1 | 	add	fp, #4
1748c     A7 FC 61 FC | 	wrlong	result2, fp
17490     04 4E 05 F1 | 	add	fp, #4
17494     A7 FE 61 FC | 	wrlong	result3, fp
17498                 | ' t1=pop()
17498                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17498     08 4E 85 F1 | 	sub	fp, #8
1749c     1C FE 0D F2 | 	cmp	result3, #28 wz
174a0     08 4E 05 51 |  if_ne	add	fp, #8
174a4     A7 26 02 5B |  if_ne	rdlong	local01, fp
174a8     08 4E 85 51 |  if_ne	sub	fp, #8
174ac     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
174b0     E8 00 90 5D |  if_ne	jmp	#LR__1883
174b4     A7 26 02 FB | 	rdlong	local01, fp
174b8     52 00 00 FF 
174bc     08 E5 05 F1 | 	add	objptr, ##42248
174c0     F2 26 62 FC | 	wrlong	local01, objptr
174c4                 | '   q=t1.result.uresult
174c4                 | '   if q<7 then 
174c4     52 00 00 FF 
174c8     08 E5 85 F1 | 	sub	objptr, ##42248
174cc     07 26 56 F2 | 	cmps	local01, #7 wc
174d0     B8 00 90 3D |  if_ae	jmp	#LR__1882
174d4     00 C0 1B FF 
174d8     00 26 06 F6 | 	mov	local01, ##931135488
174dc     52 00 00 FF 
174e0     08 E5 05 F1 | 	add	objptr, ##42248
174e4     F2 16 02 FB | 	rdlong	arg03, objptr
174e8     02 16 66 F0 | 	shl	arg03, #2
174ec     94 E5 85 F1 | 	sub	objptr, #404
174f0     F2 16 02 F1 | 	add	arg03, objptr
174f4     0B 13 02 FB | 	rdlong	arg01, arg03
174f8     51 00 00 FF 
174fc     74 E5 85 F1 | 	sub	objptr, ##41844
17500     09 13 52 F6 | 	abs	arg01, arg01 wc
17504     1F 28 C6 C9 |  if_b	decod	local02, #31
17508     00 28 06 36 |  if_ae	mov	local02, #0
1750c     60 1E B1 FD | 	call	#__system___float_fromuns
17510     14 FB 61 F5 | 	xor	result1, local02
17514     FD 12 02 F6 | 	mov	arg01, result1
17518     FF 7F 23 FF 
1751c     00 14 06 F6 | 	mov	arg02, ##1191181824
17520     54 24 B1 FD | 	call	#__system___float_div
17524     FD 14 02 F6 | 	mov	arg02, result1
17528     13 13 02 F6 | 	mov	arg01, local01
1752c     74 1E B1 FD | 	call	#__system___float_add
17530     10 4E 05 F1 | 	add	fp, #16
17534     A7 FA 61 FC | 	wrlong	result1, fp
17538                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17538     10 4E 85 F1 | 	sub	fp, #16
1753c     1F FA 05 F4 | 	bitl	result1, #31
17540     FD 12 02 F6 | 	mov	arg01, result1
17544     89 41 1D FF 
17548     6F 14 06 F6 | 	mov	arg02, ##981668463
1754c     01 16 06 F6 | 	mov	arg03, #1
17550     54 26 B1 FD | 	call	#__system___float_cmp
17554     00 FA 55 F2 | 	cmps	result1, #0 wc
17558     10 4E 05 C1 |  if_b	add	fp, #16
1755c     A7 00 68 CC |  if_b	wrlong	#0, fp
17560     10 4E 85 C1 |  if_b	sub	fp, #16
17564     10 4E 05 F1 | 	add	fp, #16
17568     A7 26 02 FB | 	rdlong	local01, fp
1756c     10 4E 85 F1 | 	sub	fp, #16
17570     A7 26 62 FC | 	wrlong	local01, fp
17574     08 4E 05 F1 | 	add	fp, #8
17578     A7 3C 68 FC | 	wrlong	#30, fp
1757c     08 4E 85 F1 | 	sub	fp, #8
17580     A7 12 02 F6 | 	mov	arg01, fp
17584     78 60 BF FD | 	call	#_push
17588                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17588     1C 00 90 FD | 	jmp	#LR__1884
1758c                 | LR__1882
1758c     29 12 06 F6 | 	mov	arg01, #41
17590     00 14 06 F6 | 	mov	arg02, #0
17594     70 B9 B0 FD | 	call	#_printerror
17598                 | '      printerror(41) : return
17598     0C 00 90 FD | 	jmp	#LR__1884
1759c                 | LR__1883
1759c     29 12 06 F6 | 	mov	arg01, #41
175a0     00 14 06 F6 | 	mov	arg02, #0
175a4     60 B9 B0 FD | 	call	#_printerror
175a8                 | LR__1884
175a8     A7 F0 03 F6 | 	mov	ptra, fp
175ac     B2 00 A0 FD | 	call	#popregs_
175b0                 | _do_pady_ret
175b0     2D 00 64 FD | 	ret
175b4                 | 
175b4                 | ' 
175b4                 | ' ' ------------------ padz
175b4                 | ' 
175b4                 | ' sub do_padz
175b4                 | _do_padz
175b4     02 4A 05 F6 | 	mov	COUNT_, #2
175b8     A8 00 A0 FD | 	call	#pushregs_
175bc     14 F0 07 F1 | 	add	ptra, #20
175c0     4A 00 00 FF 
175c4     80 E4 05 F1 | 	add	objptr, ##38016
175c8     F2 26 02 FB | 	rdlong	local01, objptr
175cc     13 17 02 F6 | 	mov	arg03, local01
175d0     01 16 66 F0 | 	shl	arg03, #1
175d4     13 17 02 F1 | 	add	arg03, local01
175d8     02 16 66 F0 | 	shl	arg03, #2
175dc     03 00 00 FF 
175e0     04 E4 85 F1 | 	sub	objptr, ##1540
175e4     F2 16 02 F1 | 	add	arg03, objptr
175e8     0B 17 02 FB | 	rdlong	arg03, arg03
175ec     0C 4E 05 F1 | 	add	fp, #12
175f0     A7 16 62 FC | 	wrlong	arg03, fp
175f4                 | ' 
175f4                 | ' numpar=compiledline(lineptr_e).result.uresult
175f4                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
175f4     0C 4E 85 F1 | 	sub	fp, #12
175f8     02 16 16 F2 | 	cmp	arg03, #2 wc
175fc     47 00 00 FF 
17600     7C E4 85 F1 | 	sub	objptr, ##36476
17604     40 00 90 CD |  if_b	jmp	#LR__1890
17608     00 12 06 F6 | 	mov	arg01, #0
1760c     8C 4F B1 FD | 	call	#__system___getiolock_0602
17610     FD 12 02 F6 | 	mov	arg01, result1
17614     E0 F2 B0 FD | 	call	#__system___lockmem
17618     B7 01 00 FF 
1761c     22 15 06 F6 | 	mov	arg02, ##@LR__5942
17620     00 12 06 F6 | 	mov	arg01, #0
17624     00 16 06 F6 | 	mov	arg03, #0
17628     C4 FF B0 FD | 	call	#__system___basic_print_string
1762c     00 12 06 F6 | 	mov	arg01, #0
17630     68 4F B1 FD | 	call	#__system___getiolock_0602
17634     FD 00 68 FC | 	wrlong	#0, result1
17638     27 12 06 F6 | 	mov	arg01, #39
1763c     00 14 06 F6 | 	mov	arg02, #0
17640     C4 B8 B0 FD | 	call	#_printerror
17644     E0 01 90 FD | 	jmp	#LR__1894
17648                 | LR__1890
17648                 | ' if numpar=0 then 
17648     0C 4E 05 F1 | 	add	fp, #12
1764c     A7 FE 09 FB | 	rdlong	result3, fp wz
17650     0C 4E 85 F1 | 	sub	fp, #12
17654     A8 00 90 5D |  if_ne	jmp	#LR__1891
17658     00 C0 1B FF 
1765c     00 26 06 F6 | 	mov	local01, ##931135488
17660     51 00 00 FF 
17664     90 E5 05 F1 | 	add	objptr, ##41872
17668     F2 12 02 FB | 	rdlong	arg01, objptr
1766c     51 00 00 FF 
17670     90 E5 85 F1 | 	sub	objptr, ##41872
17674     09 13 52 F6 | 	abs	arg01, arg01 wc
17678     1F 28 C6 C9 |  if_b	decod	local02, #31
1767c     00 28 06 36 |  if_ae	mov	local02, #0
17680     EC 1C B1 FD | 	call	#__system___float_fromuns
17684     14 FB 61 F5 | 	xor	result1, local02
17688     FD 12 02 F6 | 	mov	arg01, result1
1768c     FF 7F 23 FF 
17690     00 14 06 F6 | 	mov	arg02, ##1191181824
17694     E0 22 B1 FD | 	call	#__system___float_div
17698     FD 14 02 F6 | 	mov	arg02, result1
1769c     13 13 02 F6 | 	mov	arg01, local01
176a0     00 1D B1 FD | 	call	#__system___float_add
176a4     10 4E 05 F1 | 	add	fp, #16
176a8     A7 FA 61 FC | 	wrlong	result1, fp
176ac                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
176ac     10 4E 85 F1 | 	sub	fp, #16
176b0     1F FA 05 F4 | 	bitl	result1, #31
176b4     FD 12 02 F6 | 	mov	arg01, result1
176b8     89 41 1D FF 
176bc     6F 14 06 F6 | 	mov	arg02, ##981668463
176c0     01 16 06 F6 | 	mov	arg03, #1
176c4     E0 24 B1 FD | 	call	#__system___float_cmp
176c8     00 FA 55 F2 | 	cmps	result1, #0 wc
176cc     10 4E 05 C1 |  if_b	add	fp, #16
176d0     A7 00 68 CC |  if_b	wrlong	#0, fp
176d4     10 4E 85 C1 |  if_b	sub	fp, #16
176d8     10 4E 05 F1 | 	add	fp, #16
176dc     A7 26 02 FB | 	rdlong	local01, fp
176e0     10 4E 85 F1 | 	sub	fp, #16
176e4     A7 26 62 FC | 	wrlong	local01, fp
176e8     08 4E 05 F1 | 	add	fp, #8
176ec     A7 3C 68 FC | 	wrlong	#30, fp
176f0     08 4E 85 F1 | 	sub	fp, #8
176f4     A7 12 02 F6 | 	mov	arg01, fp
176f8     04 5F BF FD | 	call	#_push
176fc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
176fc     28 01 90 FD | 	jmp	#LR__1894
17700                 | LR__1891
17700     64 5E BF FD | 	call	#_pop
17704     A7 FA 61 FC | 	wrlong	result1, fp
17708     04 4E 05 F1 | 	add	fp, #4
1770c     A7 FC 61 FC | 	wrlong	result2, fp
17710     04 4E 05 F1 | 	add	fp, #4
17714     A7 FE 61 FC | 	wrlong	result3, fp
17718                 | ' t1=pop()
17718                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17718     08 4E 85 F1 | 	sub	fp, #8
1771c     1C FE 0D F2 | 	cmp	result3, #28 wz
17720     08 4E 05 51 |  if_ne	add	fp, #8
17724     A7 26 02 5B |  if_ne	rdlong	local01, fp
17728     08 4E 85 51 |  if_ne	sub	fp, #8
1772c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17730     E8 00 90 5D |  if_ne	jmp	#LR__1893
17734     A7 26 02 FB | 	rdlong	local01, fp
17738     52 00 00 FF 
1773c     08 E5 05 F1 | 	add	objptr, ##42248
17740     F2 26 62 FC | 	wrlong	local01, objptr
17744                 | '   q=t1.result.uresult
17744                 | '   if q<7 then 
17744     52 00 00 FF 
17748     08 E5 85 F1 | 	sub	objptr, ##42248
1774c     07 26 56 F2 | 	cmps	local01, #7 wc
17750     B8 00 90 3D |  if_ae	jmp	#LR__1892
17754     00 C0 1B FF 
17758     00 26 06 F6 | 	mov	local01, ##931135488
1775c     52 00 00 FF 
17760     08 E5 05 F1 | 	add	objptr, ##42248
17764     F2 16 02 FB | 	rdlong	arg03, objptr
17768     02 16 66 F0 | 	shl	arg03, #2
1776c     78 E5 85 F1 | 	sub	objptr, #376
17770     F2 16 02 F1 | 	add	arg03, objptr
17774     0B 13 02 FB | 	rdlong	arg01, arg03
17778     51 00 00 FF 
1777c     90 E5 85 F1 | 	sub	objptr, ##41872
17780     09 13 52 F6 | 	abs	arg01, arg01 wc
17784     1F 28 C6 C9 |  if_b	decod	local02, #31
17788     00 28 06 36 |  if_ae	mov	local02, #0
1778c     E0 1B B1 FD | 	call	#__system___float_fromuns
17790     14 FB 61 F5 | 	xor	result1, local02
17794     FD 12 02 F6 | 	mov	arg01, result1
17798     FF 7F 23 FF 
1779c     00 14 06 F6 | 	mov	arg02, ##1191181824
177a0     D4 21 B1 FD | 	call	#__system___float_div
177a4     FD 14 02 F6 | 	mov	arg02, result1
177a8     13 13 02 F6 | 	mov	arg01, local01
177ac     F4 1B B1 FD | 	call	#__system___float_add
177b0     10 4E 05 F1 | 	add	fp, #16
177b4     A7 FA 61 FC | 	wrlong	result1, fp
177b8                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
177b8     10 4E 85 F1 | 	sub	fp, #16
177bc     1F FA 05 F4 | 	bitl	result1, #31
177c0     FD 12 02 F6 | 	mov	arg01, result1
177c4     89 41 1D FF 
177c8     6F 14 06 F6 | 	mov	arg02, ##981668463
177cc     01 16 06 F6 | 	mov	arg03, #1
177d0     D4 23 B1 FD | 	call	#__system___float_cmp
177d4     00 FA 55 F2 | 	cmps	result1, #0 wc
177d8     10 4E 05 C1 |  if_b	add	fp, #16
177dc     A7 00 68 CC |  if_b	wrlong	#0, fp
177e0     10 4E 85 C1 |  if_b	sub	fp, #16
177e4     10 4E 05 F1 | 	add	fp, #16
177e8     A7 26 02 FB | 	rdlong	local01, fp
177ec     10 4E 85 F1 | 	sub	fp, #16
177f0     A7 26 62 FC | 	wrlong	local01, fp
177f4     08 4E 05 F1 | 	add	fp, #8
177f8     A7 3C 68 FC | 	wrlong	#30, fp
177fc     08 4E 85 F1 | 	sub	fp, #8
17800     A7 12 02 F6 | 	mov	arg01, fp
17804     F8 5D BF FD | 	call	#_push
17808                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17808     1C 00 90 FD | 	jmp	#LR__1894
1780c                 | LR__1892
1780c     29 12 06 F6 | 	mov	arg01, #41
17810     00 14 06 F6 | 	mov	arg02, #0
17814     F0 B6 B0 FD | 	call	#_printerror
17818                 | '      printerror(41) : return
17818     0C 00 90 FD | 	jmp	#LR__1894
1781c                 | LR__1893
1781c     29 12 06 F6 | 	mov	arg01, #41
17820     00 14 06 F6 | 	mov	arg02, #0
17824     E0 B6 B0 FD | 	call	#_printerror
17828                 | LR__1894
17828     A7 F0 03 F6 | 	mov	ptra, fp
1782c     B2 00 A0 FD | 	call	#popregs_
17830                 | _do_padz_ret
17830     2D 00 64 FD | 	ret
17834                 | 
17834                 | ' 
17834                 | ' '-------------------- paper
17834                 | ' 
17834                 | ' sub do_paper
17834                 | _do_paper
17834     03 4A 05 F6 | 	mov	COUNT_, #3
17838     A8 00 A0 FD | 	call	#pushregs_
1783c     28 5D BF FD | 	call	#_pop
17840     FD 26 02 F6 | 	mov	local01, result1
17844     FE 28 02 F6 | 	mov	local02, result2
17848     FF 2A 02 F6 | 	mov	local03, result3
1784c                 | ' t1=pop() 
1784c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1784c     1E 2A 0E F2 | 	cmp	local03, #30 wz
17850     10 00 90 5D |  if_ne	jmp	#LR__1900
17854     13 13 02 F6 | 	mov	arg01, local01
17858     00 14 06 F6 | 	mov	arg02, #0
1785c     DC 23 B1 FD | 	call	#__system___float_tointeger
17860     FD 26 02 F6 | 	mov	local01, result1
17864                 | LR__1900
17864                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
17864     1F 2A 0E F2 | 	cmp	local03, #31 wz
17868     18 00 90 5D |  if_ne	jmp	#LR__1901
1786c     13 13 02 F6 | 	mov	arg01, local01
17870     0C 27 B1 FD | 	call	#__system____builtin_atof
17874     FD 12 02 F6 | 	mov	arg01, result1
17878     00 14 06 F6 | 	mov	arg02, #0
1787c     BC 23 B1 FD | 	call	#__system___float_tointeger
17880     FD 26 02 F6 | 	mov	local01, result1
17884                 | LR__1901
17884     37 00 00 FF 
17888     38 E4 05 F1 | 	add	objptr, ##28216
1788c     F2 26 62 FC | 	wrlong	local01, objptr
17890     04 E4 05 F1 | 	add	objptr, #4
17894     F2 12 02 FB | 	rdlong	arg01, objptr
17898                 | ' 
17898                 | ' write_color:=ff
17898     36 00 00 FF 
1789c     FB E5 85 F1 | 	sub	objptr, ##28155
178a0     F2 12 62 FC | 	wrlong	arg01, objptr
178a4                 | ' write_background:=bb
178a4     04 E4 05 F1 | 	add	objptr, #4
178a8     F2 26 62 FC | 	wrlong	local01, objptr
178ac     45 E4 85 F1 | 	sub	objptr, #69
178b0     A7 F0 03 F6 | 	mov	ptra, fp
178b4     B2 00 A0 FD | 	call	#popregs_
178b8                 | _do_paper_ret
178b8     2D 00 64 FD | 	ret
178bc                 | 
178bc                 | ' 
178bc                 | ' '-------------------- peek
178bc                 | ' 
178bc                 | ' sub do_peek
178bc                 | _do_peek
178bc     00 4A 05 F6 | 	mov	COUNT_, #0
178c0     A8 00 A0 FD | 	call	#pushregs_
178c4     14 F0 07 F1 | 	add	ptra, #20
178c8     9C 5C BF FD | 	call	#_pop
178cc     A7 FA 61 FC | 	wrlong	result1, fp
178d0     04 4E 05 F1 | 	add	fp, #4
178d4     A7 FC 61 FC | 	wrlong	result2, fp
178d8     04 4E 05 F1 | 	add	fp, #4
178dc     A7 FE 61 FC | 	wrlong	result3, fp
178e0     08 4E 85 F1 | 	sub	fp, #8
178e4     A7 12 02 F6 | 	mov	arg01, fp
178e8     60 5E BF FD | 	call	#_converttoint
178ec     0C 4E 05 F1 | 	add	fp, #12
178f0     A7 FA 61 FC | 	wrlong	result1, fp
178f4                 | ' 
178f4                 | ' t1=pop()
178f4                 | ' a=converttoint(t1)
178f4                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
178f4     0C 4E 85 F1 | 	sub	fp, #12
178f8     00 04 00 FF 
178fc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17900     1C 00 90 3D |  if_ae	jmp	#LR__1910
17904     0C 4E 05 F1 | 	add	fp, #12
17908     A7 12 02 FB | 	rdlong	arg01, fp
1790c     09 FB C1 FA | 	rdbyte	result1, arg01
17910     04 4E 05 F1 | 	add	fp, #4
17914     A7 FA 61 FC | 	wrlong	result1, fp
17918     10 4E 85 F1 | 	sub	fp, #16
1791c     20 00 90 FD | 	jmp	#LR__1911
17920                 | LR__1910
17920     0C 4E 05 F1 | 	add	fp, #12
17924     A7 12 02 FB | 	rdlong	arg01, fp
17928     0C 4E 85 F1 | 	sub	fp, #12
1792c     50 B8 B0 FD | 	call	#_pspeek
17930     FD FA E1 F8 | 	getbyte	result1, result1, #0
17934     10 4E 05 F1 | 	add	fp, #16
17938     A7 FA 61 FC | 	wrlong	result1, fp
1793c     10 4E 85 F1 | 	sub	fp, #16
17940                 | LR__1911
17940     08 4E 05 F1 | 	add	fp, #8
17944     A7 3A 68 FC | 	wrlong	#29, fp
17948     08 4E 05 F1 | 	add	fp, #8
1794c     A7 12 02 FB | 	rdlong	arg01, fp
17950     10 4E 85 F1 | 	sub	fp, #16
17954     A7 12 62 FC | 	wrlong	arg01, fp
17958     A7 12 02 F6 | 	mov	arg01, fp
1795c     A0 5C BF FD | 	call	#_push
17960     A7 F0 03 F6 | 	mov	ptra, fp
17964     B2 00 A0 FD | 	call	#popregs_
17968                 | _do_peek_ret
17968     2D 00 64 FD | 	ret
1796c                 | 
1796c                 | ' 
1796c                 | ' '-------------------- pinfloat
1796c                 | ' 
1796c                 | ' sub do_pinfloat
1796c                 | _do_pinfloat
1796c     00 4A 05 F6 | 	mov	COUNT_, #0
17970     A8 00 A0 FD | 	call	#pushregs_
17974     0C F0 07 F1 | 	add	ptra, #12
17978     EC 5B BF FD | 	call	#_pop
1797c     A7 FA 61 FC | 	wrlong	result1, fp
17980     04 4E 05 F1 | 	add	fp, #4
17984     A7 FC 61 FC | 	wrlong	result2, fp
17988     04 4E 05 F1 | 	add	fp, #4
1798c     A7 FE 61 FC | 	wrlong	result3, fp
17990     08 4E 85 F1 | 	sub	fp, #8
17994     A7 12 02 F6 | 	mov	arg01, fp
17998     B0 5D BF FD | 	call	#_converttoint
1799c     50 FA 61 FD | 	fltl	result1
179a0     A7 F0 03 F6 | 	mov	ptra, fp
179a4     B2 00 A0 FD | 	call	#popregs_
179a8                 | _do_pinfloat_ret
179a8     2D 00 64 FD | 	ret
179ac                 | 
179ac                 | ' 
179ac                 | ' '-------------------- pinhi
179ac                 | ' 
179ac                 | ' sub do_pinhi
179ac                 | _do_pinhi
179ac     00 4A 05 F6 | 	mov	COUNT_, #0
179b0     A8 00 A0 FD | 	call	#pushregs_
179b4     0C F0 07 F1 | 	add	ptra, #12
179b8     AC 5B BF FD | 	call	#_pop
179bc     A7 FA 61 FC | 	wrlong	result1, fp
179c0     04 4E 05 F1 | 	add	fp, #4
179c4     A7 FC 61 FC | 	wrlong	result2, fp
179c8     04 4E 05 F1 | 	add	fp, #4
179cc     A7 FE 61 FC | 	wrlong	result3, fp
179d0     08 4E 85 F1 | 	sub	fp, #8
179d4     A7 12 02 F6 | 	mov	arg01, fp
179d8     70 5D BF FD | 	call	#_converttoint
179dc     59 FA 61 FD | 	drvh	result1
179e0     A7 F0 03 F6 | 	mov	ptra, fp
179e4     B2 00 A0 FD | 	call	#popregs_
179e8                 | _do_pinhi_ret
179e8     2D 00 64 FD | 	ret
179ec                 | 
179ec                 | ' 
179ec                 | ' '-------------------- pinlo
179ec                 | ' 
179ec                 | ' sub do_pinlo
179ec                 | _do_pinlo
179ec     00 4A 05 F6 | 	mov	COUNT_, #0
179f0     A8 00 A0 FD | 	call	#pushregs_
179f4     0C F0 07 F1 | 	add	ptra, #12
179f8     6C 5B BF FD | 	call	#_pop
179fc     A7 FA 61 FC | 	wrlong	result1, fp
17a00     04 4E 05 F1 | 	add	fp, #4
17a04     A7 FC 61 FC | 	wrlong	result2, fp
17a08     04 4E 05 F1 | 	add	fp, #4
17a0c     A7 FE 61 FC | 	wrlong	result3, fp
17a10     08 4E 85 F1 | 	sub	fp, #8
17a14     A7 12 02 F6 | 	mov	arg01, fp
17a18     30 5D BF FD | 	call	#_converttoint
17a1c     58 FA 61 FD | 	drvl	result1
17a20     A7 F0 03 F6 | 	mov	ptra, fp
17a24     B2 00 A0 FD | 	call	#popregs_
17a28                 | _do_pinlo_ret
17a28     2D 00 64 FD | 	ret
17a2c                 | 
17a2c                 | ' 
17a2c                 | ' '-------------------- pinread
17a2c                 | ' 
17a2c                 | ' sub do_pinread
17a2c                 | _do_pinread
17a2c     00 4A 05 F6 | 	mov	COUNT_, #0
17a30     A8 00 A0 FD | 	call	#pushregs_
17a34     0C F0 07 F1 | 	add	ptra, #12
17a38     2C 5B BF FD | 	call	#_pop
17a3c     A7 FA 61 FC | 	wrlong	result1, fp
17a40     04 4E 05 F1 | 	add	fp, #4
17a44     A7 FC 61 FC | 	wrlong	result2, fp
17a48     04 4E 05 F1 | 	add	fp, #4
17a4c     A7 FE 61 FC | 	wrlong	result3, fp
17a50     08 4E 85 F1 | 	sub	fp, #8
17a54     A7 12 02 F6 | 	mov	arg01, fp
17a58     F0 5C BF FD | 	call	#_converttoint
17a5c     FD 12 02 F6 | 	mov	arg01, result1
17a60     20 12 CE F7 | 	test	arg01, #32 wz
17a64     FF FB 01 56 |  if_ne	mov	result1, inb
17a68     FE FB 01 A6 |  if_e	mov	result1, ina
17a6c     09 FB 41 F0 | 	shr	result1, arg01
17a70     06 12 46 F0 | 	shr	arg01, #6
17a74     09 FB 41 F7 | 	zerox	result1, arg01
17a78     52 00 00 FF 
17a7c     10 E5 05 F1 | 	add	objptr, ##42256
17a80     F2 FA 61 FC | 	wrlong	result1, objptr
17a84     52 00 00 FF 
17a88     10 E5 85 F1 | 	sub	objptr, ##42256
17a8c     08 4E 05 F1 | 	add	fp, #8
17a90     A7 3A 68 FC | 	wrlong	#29, fp
17a94     08 4E 85 F1 | 	sub	fp, #8
17a98     A7 08 68 FC | 	wrlong	#4, fp
17a9c     A7 12 02 F6 | 	mov	arg01, fp
17aa0     5C 5B BF FD | 	call	#_push
17aa4     A7 F0 03 F6 | 	mov	ptra, fp
17aa8     B2 00 A0 FD | 	call	#popregs_
17aac                 | _do_pinread_ret
17aac     2D 00 64 FD | 	ret
17ab0                 | 
17ab0                 | ' 
17ab0                 | ' '-------------------- pinstart
17ab0                 | ' 
17ab0                 | ' sub do_pinstart
17ab0                 | _do_pinstart
17ab0     03 4A 05 F6 | 	mov	COUNT_, #3
17ab4     A8 00 A0 FD | 	call	#pushregs_
17ab8     30 F0 07 F1 | 	add	ptra, #48
17abc     A8 5A BF FD | 	call	#_pop
17ac0     FD 16 02 F6 | 	mov	arg03, result1
17ac4     FE 14 02 F6 | 	mov	arg02, result2
17ac8     FF 18 02 F6 | 	mov	arg04, result3
17acc     A7 16 62 FC | 	wrlong	arg03, fp
17ad0     04 4E 05 F1 | 	add	fp, #4
17ad4     A7 14 62 FC | 	wrlong	arg02, fp
17ad8     04 4E 05 F1 | 	add	fp, #4
17adc     A7 18 62 FC | 	wrlong	arg04, fp
17ae0     08 4E 85 F1 | 	sub	fp, #8
17ae4     80 5A BF FD | 	call	#_pop
17ae8     FD 16 02 F6 | 	mov	arg03, result1
17aec     FE 14 02 F6 | 	mov	arg02, result2
17af0     FF 18 02 F6 | 	mov	arg04, result3
17af4     0C 4E 05 F1 | 	add	fp, #12
17af8     A7 16 62 FC | 	wrlong	arg03, fp
17afc     04 4E 05 F1 | 	add	fp, #4
17b00     A7 14 62 FC | 	wrlong	arg02, fp
17b04     04 4E 05 F1 | 	add	fp, #4
17b08     A7 18 62 FC | 	wrlong	arg04, fp
17b0c     14 4E 85 F1 | 	sub	fp, #20
17b10     54 5A BF FD | 	call	#_pop
17b14     FD 16 02 F6 | 	mov	arg03, result1
17b18     FE 14 02 F6 | 	mov	arg02, result2
17b1c     FF 18 02 F6 | 	mov	arg04, result3
17b20     18 4E 05 F1 | 	add	fp, #24
17b24     A7 16 62 FC | 	wrlong	arg03, fp
17b28     04 4E 05 F1 | 	add	fp, #4
17b2c     A7 14 62 FC | 	wrlong	arg02, fp
17b30     04 4E 05 F1 | 	add	fp, #4
17b34     A7 18 62 FC | 	wrlong	arg04, fp
17b38     20 4E 85 F1 | 	sub	fp, #32
17b3c     28 5A BF FD | 	call	#_pop
17b40     FF 16 02 F6 | 	mov	arg03, result3
17b44     24 4E 05 F1 | 	add	fp, #36
17b48     A7 FA 61 FC | 	wrlong	result1, fp
17b4c     04 4E 05 F1 | 	add	fp, #4
17b50     A7 FC 61 FC | 	wrlong	result2, fp
17b54     04 4E 05 F1 | 	add	fp, #4
17b58     A7 16 62 FC | 	wrlong	arg03, fp
17b5c     08 4E 85 F1 | 	sub	fp, #8
17b60     A7 12 02 F6 | 	mov	arg01, fp
17b64     24 4E 85 F1 | 	sub	fp, #36
17b68     E0 5B BF FD | 	call	#_converttoint
17b6c     FD 26 02 F6 | 	mov	local01, result1
17b70     18 4E 05 F1 | 	add	fp, #24
17b74     A7 12 02 F6 | 	mov	arg01, fp
17b78     18 4E 85 F1 | 	sub	fp, #24
17b7c     CC 5B BF FD | 	call	#_converttoint
17b80     FD 28 02 F6 | 	mov	local02, result1
17b84     0C 4E 05 F1 | 	add	fp, #12
17b88     A7 12 02 F6 | 	mov	arg01, fp
17b8c     0C 4E 85 F1 | 	sub	fp, #12
17b90     B8 5B BF FD | 	call	#_converttoint
17b94     FD 2A 02 F6 | 	mov	local03, result1
17b98     A7 12 02 F6 | 	mov	arg01, fp
17b9c     AC 5B BF FD | 	call	#_converttoint
17ba0     40 26 62 FD | 	dirl	local01
17ba4     13 29 02 FC | 	wrpin	local02, local01
17ba8     13 2B 12 FC | 	wxpin	local03, local01
17bac     13 FB 21 FC | 	wypin	result1, local01
17bb0     41 26 62 FD | 	dirh	local01
17bb4     A7 F0 03 F6 | 	mov	ptra, fp
17bb8     B2 00 A0 FD | 	call	#popregs_
17bbc                 | _do_pinstart_ret
17bbc     2D 00 64 FD | 	ret
17bc0                 | 
17bc0                 | ' 
17bc0                 | ' '-------------------- pintoggle
17bc0                 | ' 
17bc0                 | ' sub do_pintoggle
17bc0                 | _do_pintoggle
17bc0     00 4A 05 F6 | 	mov	COUNT_, #0
17bc4     A8 00 A0 FD | 	call	#pushregs_
17bc8     0C F0 07 F1 | 	add	ptra, #12
17bcc     98 59 BF FD | 	call	#_pop
17bd0     A7 FA 61 FC | 	wrlong	result1, fp
17bd4     04 4E 05 F1 | 	add	fp, #4
17bd8     A7 FC 61 FC | 	wrlong	result2, fp
17bdc     04 4E 05 F1 | 	add	fp, #4
17be0     A7 FE 61 FC | 	wrlong	result3, fp
17be4     08 4E 85 F1 | 	sub	fp, #8
17be8     A7 12 02 F6 | 	mov	arg01, fp
17bec     5C 5B BF FD | 	call	#_converttoint
17bf0     5F FA 61 FD | 	drvnot	result1
17bf4     A7 F0 03 F6 | 	mov	ptra, fp
17bf8     B2 00 A0 FD | 	call	#popregs_
17bfc                 | _do_pintoggle_ret
17bfc     2D 00 64 FD | 	ret
17c00                 | 
17c00                 | ' 
17c00                 | ' '-------------------- pinwrite
17c00                 | ' 
17c00                 | ' sub do_pinwrite
17c00                 | _do_pinwrite
17c00     01 4A 05 F6 | 	mov	COUNT_, #1
17c04     A8 00 A0 FD | 	call	#pushregs_
17c08     18 F0 07 F1 | 	add	ptra, #24
17c0c     58 59 BF FD | 	call	#_pop
17c10     FD 14 02 F6 | 	mov	arg02, result1
17c14     FE 12 02 F6 | 	mov	arg01, result2
17c18     FF 26 02 F6 | 	mov	local01, result3
17c1c     A7 14 62 FC | 	wrlong	arg02, fp
17c20     04 4E 05 F1 | 	add	fp, #4
17c24     A7 12 62 FC | 	wrlong	arg01, fp
17c28     04 4E 05 F1 | 	add	fp, #4
17c2c     A7 26 62 FC | 	wrlong	local01, fp
17c30     08 4E 85 F1 | 	sub	fp, #8
17c34     30 59 BF FD | 	call	#_pop
17c38     FF 26 02 F6 | 	mov	local01, result3
17c3c     0C 4E 05 F1 | 	add	fp, #12
17c40     A7 FA 61 FC | 	wrlong	result1, fp
17c44     04 4E 05 F1 | 	add	fp, #4
17c48     A7 FC 61 FC | 	wrlong	result2, fp
17c4c     04 4E 05 F1 | 	add	fp, #4
17c50     A7 26 62 FC | 	wrlong	local01, fp
17c54     08 4E 85 F1 | 	sub	fp, #8
17c58     A7 12 02 F6 | 	mov	arg01, fp
17c5c     0C 4E 85 F1 | 	sub	fp, #12
17c60     E8 5A BF FD | 	call	#_converttoint
17c64     FD 26 02 F6 | 	mov	local01, result1
17c68     A7 12 02 F6 | 	mov	arg01, fp
17c6c     DC 5A BF FD | 	call	#_converttoint
17c70     FD 14 02 F6 | 	mov	arg02, result1
17c74     13 13 02 F6 | 	mov	arg01, local01
17c78     30 EE B0 FD | 	call	#__system___pinwrite
17c7c     A7 F0 03 F6 | 	mov	ptra, fp
17c80     B2 00 A0 FD | 	call	#popregs_
17c84                 | _do_pinwrite_ret
17c84     2D 00 64 FD | 	ret
17c88                 | 
17c88                 | ' 
17c88                 | ' '-------------------- play
17c88                 | ' 
17c88                 | ' sub do_play
17c88                 | _do_play
17c88     08 4A 05 F6 | 	mov	COUNT_, #8
17c8c     A8 00 A0 FD | 	call	#pushregs_
17c90     7C F0 07 F1 | 	add	ptra, #124
17c94     68 4E 05 F1 | 	add	fp, #104
17c98     77 CC A1 FF 
17c9c     A7 7C 6B FC | 	wrlong	##1134096318, fp
17ca0                 | ' speed_coeff=305.873
17ca0                 | ' 
17ca0                 | ' for i=0 to 8 : params(i)=-2.0 : next i
17ca0     64 4E 85 F1 | 	sub	fp, #100
17ca4     A7 00 68 FC | 	wrlong	#0, fp
17ca8     97 18 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
17cac                 | LR__1920
17cac     A7 16 02 FB | 	rdlong	arg03, fp
17cb0     02 16 66 F0 | 	shl	arg03, #2
17cb4     34 4E 05 F1 | 	add	fp, #52
17cb8     A7 16 02 F1 | 	add	arg03, fp
17cbc     00 00 E0 FF 
17cc0     0B 01 68 FC | 	wrlong	##-1073741824, arg03
17cc4     34 4E 85 F1 | 	sub	fp, #52
17cc8     A7 26 02 FB | 	rdlong	local01, fp
17ccc     01 26 06 F1 | 	add	local01, #1
17cd0     A7 26 62 FC | 	wrlong	local01, fp
17cd4     09 26 56 F2 | 	cmps	local01, #9 wc
17cd8     D0 FF 9F CD |  if_b	jmp	#LR__1920
17cdc                 | LR__1921
17cdc     04 4E 85 F1 | 	sub	fp, #4
17ce0     4A 00 00 FF 
17ce4     80 E4 05 F1 | 	add	objptr, ##38016
17ce8     F2 28 02 FB | 	rdlong	local02, objptr
17cec     14 2B 02 F6 | 	mov	local03, local02
17cf0     01 2A 66 F0 | 	shl	local03, #1
17cf4     14 2B 02 F1 | 	add	local03, local02
17cf8     02 2A 66 F0 | 	shl	local03, #2
17cfc     03 00 00 FF 
17d00     04 E4 85 F1 | 	sub	objptr, ##1540
17d04     F2 2A 02 F1 | 	add	local03, objptr
17d08     15 2D 02 FB | 	rdlong	local04, local03
17d0c     A7 2C 62 FC | 	wrlong	local04, fp
17d10                 | ' numpar=compiledline(lineptr_e).result.uresult
17d10                 | ' for i=numpar to 1 step -1 
17d10     04 4E 05 F1 | 	add	fp, #4
17d14     A7 2C 62 FC | 	wrlong	local04, fp
17d18     04 4E 85 F1 | 	sub	fp, #4
17d1c     47 00 00 FF 
17d20     7C E4 85 F1 | 	sub	objptr, ##36476
17d24                 | LR__1922
17d24     40 58 BF FD | 	call	#_pop
17d28     5C 4E 05 F1 | 	add	fp, #92
17d2c     A7 FA 61 FC | 	wrlong	result1, fp
17d30     04 4E 05 F1 | 	add	fp, #4
17d34     A7 FC 61 FC | 	wrlong	result2, fp
17d38     04 4E 05 F1 | 	add	fp, #4
17d3c     A7 FE 61 FC | 	wrlong	result3, fp
17d40     60 4E 85 F1 | 	sub	fp, #96
17d44     A7 2A 02 FB | 	rdlong	local03, fp
17d48     01 2A 86 F1 | 	sub	local03, #1
17d4c     02 2A 66 F0 | 	shl	local03, #2
17d50     34 4E 05 F1 | 	add	fp, #52
17d54     A7 2A 02 F1 | 	add	local03, fp
17d58     24 4E 05 F1 | 	add	fp, #36
17d5c     A7 2E 02 F6 | 	mov	local05, fp
17d60     17 13 02 F6 | 	mov	arg01, local05
17d64     5C 4E 85 F1 | 	sub	fp, #92
17d68     9C 5A BF FD | 	call	#_converttofloat
17d6c     15 FB 61 FC | 	wrlong	result1, local03
17d70     04 4E 05 F1 | 	add	fp, #4
17d74     A7 26 02 FB | 	rdlong	local01, fp
17d78     01 26 86 F1 | 	sub	local01, #1
17d7c     A7 26 62 FC | 	wrlong	local01, fp
17d80     04 4E 85 F1 | 	sub	fp, #4
17d84     01 26 56 F2 | 	cmps	local01, #1 wc
17d88     98 FF 9F 3D |  if_ae	jmp	#LR__1922
17d8c                 | ' 
17d8c                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17d8c     38 4E 05 F1 | 	add	fp, #56
17d90     A7 12 02 FB | 	rdlong	arg01, fp
17d94     38 4E 85 F1 | 	sub	fp, #56
17d98     00 14 06 F6 | 	mov	arg02, #0
17d9c     01 16 06 F6 | 	mov	arg03, #1
17da0     04 1E B1 FD | 	call	#__system___float_cmp
17da4     00 FA 55 F2 | 	cmps	result1, #0 wc
17da8     0C 4E 05 C1 |  if_b	add	fp, #12
17dac     A7 00 68 CC |  if_b	wrlong	#0, fp
17db0     0C 4E 85 C1 |  if_b	sub	fp, #12
17db4     2C 00 90 CD |  if_b	jmp	#LR__1923
17db8     38 4E 05 F1 | 	add	fp, #56
17dbc     A7 12 02 FB | 	rdlong	arg01, fp
17dc0     38 4E 85 F1 | 	sub	fp, #56
17dc4     01 14 06 F6 | 	mov	arg02, #1
17dc8     70 1E B1 FD | 	call	#__system___float_tointeger
17dcc     FD 26 52 F6 | 	abs	local01, result1 wc
17dd0     07 26 06 F5 | 	and	local01, #7
17dd4     13 27 82 F6 | 	negc	local01, local01
17dd8     0C 4E 05 F1 | 	add	fp, #12
17ddc     A7 26 62 FC | 	wrlong	local01, fp
17de0     0C 4E 85 F1 | 	sub	fp, #12
17de4                 | LR__1923
17de4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
17de4     3C 4E 05 F1 | 	add	fp, #60
17de8     A7 12 02 FB | 	rdlong	arg01, fp
17dec     3C 4E 85 F1 | 	sub	fp, #60
17df0     00 14 06 F6 | 	mov	arg02, #0
17df4     01 16 06 F6 | 	mov	arg03, #1
17df8     AC 1D B1 FD | 	call	#__system___float_cmp
17dfc     00 FA 55 F2 | 	cmps	result1, #0 wc
17e00     40 00 90 3D |  if_ae	jmp	#LR__1924
17e04     0C 4E 05 F1 | 	add	fp, #12
17e08     A7 28 02 FB | 	rdlong	local02, fp
17e0c     14 2B 02 F6 | 	mov	local03, local02
17e10     01 2A 66 F0 | 	shl	local03, #1
17e14     14 2B 02 F1 | 	add	local03, local02
17e18     03 2A 66 F0 | 	shl	local03, #3
17e1c     14 00 00 FF 
17e20     38 E5 05 F1 | 	add	objptr, ##10552
17e24     F2 2A 02 F1 | 	add	local03, objptr
17e28     15 31 02 FB | 	rdlong	local06, local03
17e2c     60 4E 05 F1 | 	add	fp, #96
17e30     A7 30 62 FC | 	wrlong	local06, fp
17e34     6C 4E 85 F1 | 	sub	fp, #108
17e38     14 00 00 FF 
17e3c     38 E5 85 F1 | 	sub	objptr, ##10552
17e40     44 00 90 FD | 	jmp	#LR__1925
17e44                 | LR__1924
17e44     3C 4E 05 F1 | 	add	fp, #60
17e48     A7 2C 02 FB | 	rdlong	local04, fp
17e4c     30 4E 05 F1 | 	add	fp, #48
17e50     A7 2C 62 FC | 	wrlong	local04, fp
17e54     60 4E 85 F1 | 	sub	fp, #96
17e58     A7 28 02 FB | 	rdlong	local02, fp
17e5c     14 2B 02 F6 | 	mov	local03, local02
17e60     01 2A 66 F0 | 	shl	local03, #1
17e64     14 2B 02 F1 | 	add	local03, local02
17e68     03 2A 66 F0 | 	shl	local03, #3
17e6c     14 00 00 FF 
17e70     38 E5 05 F1 | 	add	objptr, ##10552
17e74     F2 2A 02 F1 | 	add	local03, objptr
17e78     0C 4E 85 F1 | 	sub	fp, #12
17e7c     15 2D 62 FC | 	wrlong	local04, local03
17e80     14 00 00 FF 
17e84     38 E5 85 F1 | 	sub	objptr, ##10552
17e88                 | LR__1925
17e88                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17e88     40 4E 05 F1 | 	add	fp, #64
17e8c     A7 12 02 FB | 	rdlong	arg01, fp
17e90     40 4E 85 F1 | 	sub	fp, #64
17e94     00 14 06 F6 | 	mov	arg02, #0
17e98     01 16 06 F6 | 	mov	arg03, #1
17e9c     08 1D B1 FD | 	call	#__system___float_cmp
17ea0     00 FA 55 F2 | 	cmps	result1, #0 wc
17ea4     24 00 90 CD |  if_b	jmp	#LR__1926
17ea8     40 4E 05 F1 | 	add	fp, #64
17eac     A7 12 02 FB | 	rdlong	arg01, fp
17eb0     40 4E 85 F1 | 	sub	fp, #64
17eb4     20 0E 23 FF 
17eb8     00 14 06 F6 | 	mov	arg02, ##1176256512
17ebc     01 16 66 F6 | 	neg	arg03, #1
17ec0     E4 1C B1 FD | 	call	#__system___float_cmp
17ec4     01 FA 55 F2 | 	cmps	result1, #1 wc
17ec8     48 00 90 CD |  if_b	jmp	#LR__1927
17ecc                 | LR__1926
17ecc     0C 4E 05 F1 | 	add	fp, #12
17ed0     A7 2A 02 FB | 	rdlong	local03, fp
17ed4     15 33 02 F6 | 	mov	local07, local03
17ed8     01 32 66 F0 | 	shl	local07, #1
17edc     15 33 02 F1 | 	add	local07, local03
17ee0     03 32 66 F0 | 	shl	local07, #3
17ee4     14 00 00 FF 
17ee8     38 E5 05 F1 | 	add	objptr, ##10552
17eec     F2 32 02 F1 | 	add	local07, objptr
17ef0     06 32 06 F1 | 	add	local07, #6
17ef4     19 2F E2 FA | 	rdword	local05, local07
17ef8     17 2D 32 F9 | 	getword	local04, local05, #0
17efc     1C 4E 05 F1 | 	add	fp, #28
17f00     A7 2C 62 FC | 	wrlong	local04, fp
17f04     28 4E 85 F1 | 	sub	fp, #40
17f08     14 00 00 FF 
17f0c     38 E5 85 F1 | 	sub	objptr, ##10552
17f10     54 00 90 FD | 	jmp	#LR__1928
17f14                 | LR__1927
17f14     40 4E 05 F1 | 	add	fp, #64
17f18     A7 12 02 FB | 	rdlong	arg01, fp
17f1c     40 4E 85 F1 | 	sub	fp, #64
17f20     01 14 06 F6 | 	mov	arg02, #1
17f24     14 1D B1 FD | 	call	#__system___float_tointeger
17f28     28 4E 05 F1 | 	add	fp, #40
17f2c     A7 FA 61 FC | 	wrlong	result1, fp
17f30     1C 4E 85 F1 | 	sub	fp, #28
17f34     A7 28 02 FB | 	rdlong	local02, fp
17f38     14 2B 02 F6 | 	mov	local03, local02
17f3c     01 2A 66 F0 | 	shl	local03, #1
17f40     14 2B 02 F1 | 	add	local03, local02
17f44     03 2A 66 F0 | 	shl	local03, #3
17f48     14 00 00 FF 
17f4c     38 E5 05 F1 | 	add	objptr, ##10552
17f50     F2 2A 02 F1 | 	add	local03, objptr
17f54     0C 4E 85 F1 | 	sub	fp, #12
17f58     06 2A 06 F1 | 	add	local03, #6
17f5c     15 FB 51 FC | 	wrword	result1, local03
17f60     14 00 00 FF 
17f64     38 E5 85 F1 | 	sub	objptr, ##10552
17f68                 | LR__1928
17f68                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17f68     44 4E 05 F1 | 	add	fp, #68
17f6c     A7 12 02 FB | 	rdlong	arg01, fp
17f70     44 4E 85 F1 | 	sub	fp, #68
17f74     00 14 06 F6 | 	mov	arg02, #0
17f78     01 16 06 F6 | 	mov	arg03, #1
17f7c     28 1C B1 FD | 	call	#__system___float_cmp
17f80     00 FA 55 F2 | 	cmps	result1, #0 wc
17f84     24 00 90 CD |  if_b	jmp	#LR__1929
17f88     44 4E 05 F1 | 	add	fp, #68
17f8c     A7 12 02 FB | 	rdlong	arg01, fp
17f90     44 4E 85 F1 | 	sub	fp, #68
17f94     89 C1 20 FF 
17f98     6F 14 06 F6 | 	mov	arg02, ##1099108975
17f9c     01 16 66 F6 | 	neg	arg03, #1
17fa0     04 1C B1 FD | 	call	#__system___float_cmp
17fa4     01 FA 55 F2 | 	cmps	result1, #1 wc
17fa8     44 00 90 CD |  if_b	jmp	#LR__1930
17fac                 | LR__1929
17fac     0C 4E 05 F1 | 	add	fp, #12
17fb0     A7 28 02 FB | 	rdlong	local02, fp
17fb4     14 2B 02 F6 | 	mov	local03, local02
17fb8     01 2A 66 F0 | 	shl	local03, #1
17fbc     14 2B 02 F1 | 	add	local03, local02
17fc0     03 2A 66 F0 | 	shl	local03, #3
17fc4     14 00 00 FF 
17fc8     38 E5 05 F1 | 	add	objptr, ##10552
17fcc     F2 2A 02 F1 | 	add	local03, objptr
17fd0     0C 2A 06 F1 | 	add	local03, #12
17fd4     15 31 02 FB | 	rdlong	local06, local03
17fd8     68 4E 05 F1 | 	add	fp, #104
17fdc     A7 30 62 FC | 	wrlong	local06, fp
17fe0     74 4E 85 F1 | 	sub	fp, #116
17fe4     14 00 00 FF 
17fe8     38 E5 85 F1 | 	sub	objptr, ##10552
17fec     48 00 90 FD | 	jmp	#LR__1931
17ff0                 | LR__1930
17ff0     44 4E 05 F1 | 	add	fp, #68
17ff4     A7 2C 02 FB | 	rdlong	local04, fp
17ff8     30 4E 05 F1 | 	add	fp, #48
17ffc     A7 2C 62 FC | 	wrlong	local04, fp
18000     68 4E 85 F1 | 	sub	fp, #104
18004     A7 28 02 FB | 	rdlong	local02, fp
18008     14 2B 02 F6 | 	mov	local03, local02
1800c     01 2A 66 F0 | 	shl	local03, #1
18010     14 2B 02 F1 | 	add	local03, local02
18014     03 2A 66 F0 | 	shl	local03, #3
18018     14 00 00 FF 
1801c     38 E5 05 F1 | 	add	objptr, ##10552
18020     F2 2A 02 F1 | 	add	local03, objptr
18024     0C 4E 85 F1 | 	sub	fp, #12
18028     0C 2A 06 F1 | 	add	local03, #12
1802c     15 2D 62 FC | 	wrlong	local04, local03
18030     14 00 00 FF 
18034     38 E5 85 F1 | 	sub	objptr, ##10552
18038                 | LR__1931
18038                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
18038     48 4E 05 F1 | 	add	fp, #72
1803c     A7 12 02 FB | 	rdlong	arg01, fp
18040     48 4E 85 F1 | 	sub	fp, #72
18044     00 14 06 F6 | 	mov	arg02, #0
18048     01 16 06 F6 | 	mov	arg03, #1
1804c     58 1B B1 FD | 	call	#__system___float_cmp
18050     00 FA 55 F2 | 	cmps	result1, #0 wc
18054     24 00 90 CD |  if_b	jmp	#LR__1932
18058     48 4E 05 F1 | 	add	fp, #72
1805c     A7 12 02 FB | 	rdlong	arg01, fp
18060     48 4E 85 F1 | 	sub	fp, #72
18064     00 00 21 FF 
18068     00 14 06 F6 | 	mov	arg02, ##1107296256
1806c     01 16 66 F6 | 	neg	arg03, #1
18070     34 1B B1 FD | 	call	#__system___float_cmp
18074     01 FA 55 F2 | 	cmps	result1, #1 wc
18078     48 00 90 CD |  if_b	jmp	#LR__1933
1807c                 | LR__1932
1807c     0C 4E 05 F1 | 	add	fp, #12
18080     A7 2A 02 FB | 	rdlong	local03, fp
18084     15 33 02 F6 | 	mov	local07, local03
18088     01 32 66 F0 | 	shl	local07, #1
1808c     15 33 02 F1 | 	add	local07, local03
18090     03 32 66 F0 | 	shl	local07, #3
18094     14 00 00 FF 
18098     38 E5 05 F1 | 	add	objptr, ##10552
1809c     F2 32 02 F1 | 	add	local07, objptr
180a0     04 32 06 F1 | 	add	local07, #4
180a4     19 2F C2 FA | 	rdbyte	local05, local07
180a8     17 2D E2 F8 | 	getbyte	local04, local05, #0
180ac     14 4E 05 F1 | 	add	fp, #20
180b0     A7 2C 62 FC | 	wrlong	local04, fp
180b4     20 4E 85 F1 | 	sub	fp, #32
180b8     14 00 00 FF 
180bc     38 E5 85 F1 | 	sub	objptr, ##10552
180c0     54 00 90 FD | 	jmp	#LR__1934
180c4                 | LR__1933
180c4     48 4E 05 F1 | 	add	fp, #72
180c8     A7 12 02 FB | 	rdlong	arg01, fp
180cc     48 4E 85 F1 | 	sub	fp, #72
180d0     01 14 06 F6 | 	mov	arg02, #1
180d4     64 1B B1 FD | 	call	#__system___float_tointeger
180d8     20 4E 05 F1 | 	add	fp, #32
180dc     A7 FA 61 FC | 	wrlong	result1, fp
180e0     14 4E 85 F1 | 	sub	fp, #20
180e4     A7 28 02 FB | 	rdlong	local02, fp
180e8     14 2B 02 F6 | 	mov	local03, local02
180ec     01 2A 66 F0 | 	shl	local03, #1
180f0     14 2B 02 F1 | 	add	local03, local02
180f4     03 2A 66 F0 | 	shl	local03, #3
180f8     14 00 00 FF 
180fc     38 E5 05 F1 | 	add	objptr, ##10552
18100     F2 2A 02 F1 | 	add	local03, objptr
18104     0C 4E 85 F1 | 	sub	fp, #12
18108     04 2A 06 F1 | 	add	local03, #4
1810c     15 FB 41 FC | 	wrbyte	result1, local03
18110     14 00 00 FF 
18114     38 E5 85 F1 | 	sub	objptr, ##10552
18118                 | LR__1934
18118                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
18118     4C 4E 05 F1 | 	add	fp, #76
1811c     A7 12 02 FB | 	rdlong	arg01, fp
18120     4C 4E 85 F1 | 	sub	fp, #76
18124     00 14 06 F6 | 	mov	arg02, #0
18128     01 16 06 F6 | 	mov	arg03, #1
1812c     78 1A B1 FD | 	call	#__system___float_cmp
18130     00 FA 55 F2 | 	cmps	result1, #0 wc
18134     24 00 90 CD |  if_b	jmp	#LR__1935
18138     4C 4E 05 F1 | 	add	fp, #76
1813c     A7 12 02 FB | 	rdlong	arg01, fp
18140     4C 4E 85 F1 | 	sub	fp, #76
18144     00 80 20 FF 
18148     00 14 06 F6 | 	mov	arg02, ##1090519040
1814c     01 16 66 F6 | 	neg	arg03, #1
18150     54 1A B1 FD | 	call	#__system___float_cmp
18154     01 FA 55 F2 | 	cmps	result1, #1 wc
18158     48 00 90 CD |  if_b	jmp	#LR__1936
1815c                 | LR__1935
1815c     0C 4E 05 F1 | 	add	fp, #12
18160     A7 2A 02 FB | 	rdlong	local03, fp
18164     15 33 02 F6 | 	mov	local07, local03
18168     01 32 66 F0 | 	shl	local07, #1
1816c     15 33 02 F1 | 	add	local07, local03
18170     03 32 66 F0 | 	shl	local07, #3
18174     14 00 00 FF 
18178     38 E5 05 F1 | 	add	objptr, ##10552
1817c     F2 32 02 F1 | 	add	local07, objptr
18180     05 32 06 F1 | 	add	local07, #5
18184     19 2F C2 FA | 	rdbyte	local05, local07
18188     17 2D E2 F8 | 	getbyte	local04, local05, #0
1818c     18 4E 05 F1 | 	add	fp, #24
18190     A7 2C 62 FC | 	wrlong	local04, fp
18194     24 4E 85 F1 | 	sub	fp, #36
18198     14 00 00 FF 
1819c     38 E5 85 F1 | 	sub	objptr, ##10552
181a0     54 00 90 FD | 	jmp	#LR__1937
181a4                 | LR__1936
181a4     4C 4E 05 F1 | 	add	fp, #76
181a8     A7 12 02 FB | 	rdlong	arg01, fp
181ac     4C 4E 85 F1 | 	sub	fp, #76
181b0     01 14 06 F6 | 	mov	arg02, #1
181b4     84 1A B1 FD | 	call	#__system___float_tointeger
181b8     24 4E 05 F1 | 	add	fp, #36
181bc     A7 FA 61 FC | 	wrlong	result1, fp
181c0     18 4E 85 F1 | 	sub	fp, #24
181c4     A7 28 02 FB | 	rdlong	local02, fp
181c8     14 2B 02 F6 | 	mov	local03, local02
181cc     01 2A 66 F0 | 	shl	local03, #1
181d0     14 2B 02 F1 | 	add	local03, local02
181d4     03 2A 66 F0 | 	shl	local03, #3
181d8     14 00 00 FF 
181dc     38 E5 05 F1 | 	add	objptr, ##10552
181e0     F2 2A 02 F1 | 	add	local03, objptr
181e4     0C 4E 85 F1 | 	sub	fp, #12
181e8     05 2A 06 F1 | 	add	local03, #5
181ec     15 FB 41 FC | 	wrbyte	result1, local03
181f0     14 00 00 FF 
181f4     38 E5 85 F1 | 	sub	objptr, ##10552
181f8                 | LR__1937
181f8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
181f8     50 4E 05 F1 | 	add	fp, #80
181fc     A7 12 02 FB | 	rdlong	arg01, fp
18200     50 4E 85 F1 | 	sub	fp, #80
18204     00 14 06 F6 | 	mov	arg02, #0
18208     01 16 06 F6 | 	mov	arg03, #1
1820c     98 19 B1 FD | 	call	#__system___float_cmp
18210     00 FA 55 F2 | 	cmps	result1, #0 wc
18214     24 00 90 CD |  if_b	jmp	#LR__1938
18218     50 4E 05 F1 | 	add	fp, #80
1821c     A7 12 02 FB | 	rdlong	arg01, fp
18220     50 4E 85 F1 | 	sub	fp, #80
18224     00 3D 22 FF 
18228     00 14 06 F6 | 	mov	arg02, ##1148846080
1822c     01 16 66 F6 | 	neg	arg03, #1
18230     74 19 B1 FD | 	call	#__system___float_cmp
18234     01 FA 55 F2 | 	cmps	result1, #1 wc
18238     44 00 90 CD |  if_b	jmp	#LR__1939
1823c                 | LR__1938
1823c     0C 4E 05 F1 | 	add	fp, #12
18240     A7 28 02 FB | 	rdlong	local02, fp
18244     14 2B 02 F6 | 	mov	local03, local02
18248     01 2A 66 F0 | 	shl	local03, #1
1824c     14 2B 02 F1 | 	add	local03, local02
18250     03 2A 66 F0 | 	shl	local03, #3
18254     14 00 00 FF 
18258     38 E5 05 F1 | 	add	objptr, ##10552
1825c     F2 2A 02 F1 | 	add	local03, objptr
18260     08 2A 06 F1 | 	add	local03, #8
18264     15 31 02 FB | 	rdlong	local06, local03
18268     6C 4E 05 F1 | 	add	fp, #108
1826c     A7 30 62 FC | 	wrlong	local06, fp
18270     78 4E 85 F1 | 	sub	fp, #120
18274     14 00 00 FF 
18278     38 E5 85 F1 | 	sub	objptr, ##10552
1827c     48 00 90 FD | 	jmp	#LR__1940
18280                 | LR__1939
18280     50 4E 05 F1 | 	add	fp, #80
18284     A7 30 02 FB | 	rdlong	local06, fp
18288     28 4E 05 F1 | 	add	fp, #40
1828c     A7 30 62 FC | 	wrlong	local06, fp
18290     6C 4E 85 F1 | 	sub	fp, #108
18294     A7 28 02 FB | 	rdlong	local02, fp
18298     14 2B 02 F6 | 	mov	local03, local02
1829c     01 2A 66 F0 | 	shl	local03, #1
182a0     14 2B 02 F1 | 	add	local03, local02
182a4     03 2A 66 F0 | 	shl	local03, #3
182a8     14 00 00 FF 
182ac     38 E5 05 F1 | 	add	objptr, ##10552
182b0     F2 2A 02 F1 | 	add	local03, objptr
182b4     0C 4E 85 F1 | 	sub	fp, #12
182b8     08 2A 06 F1 | 	add	local03, #8
182bc     15 31 62 FC | 	wrlong	local06, local03
182c0     14 00 00 FF 
182c4     38 E5 85 F1 | 	sub	objptr, ##10552
182c8                 | LR__1940
182c8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
182c8     54 4E 05 F1 | 	add	fp, #84
182cc     A7 12 02 FB | 	rdlong	arg01, fp
182d0     54 4E 85 F1 | 	sub	fp, #84
182d4     00 C0 5F FF 
182d8     00 14 06 F6 | 	mov	arg02, ##-1082130432
182dc     01 16 06 F6 | 	mov	arg03, #1
182e0     C4 18 B1 FD | 	call	#__system___float_cmp
182e4     00 FA 55 F2 | 	cmps	result1, #0 wc
182e8     24 00 90 CD |  if_b	jmp	#LR__1941
182ec     54 4E 05 F1 | 	add	fp, #84
182f0     A7 12 02 FB | 	rdlong	arg01, fp
182f4     54 4E 85 F1 | 	sub	fp, #84
182f8     00 C0 1F FF 
182fc     00 14 06 F6 | 	mov	arg02, ##1065353216
18300     01 16 66 F6 | 	neg	arg03, #1
18304     A0 18 B1 FD | 	call	#__system___float_cmp
18308     01 FA 55 F2 | 	cmps	result1, #1 wc
1830c     44 00 90 CD |  if_b	jmp	#LR__1942
18310                 | LR__1941
18310     0C 4E 05 F1 | 	add	fp, #12
18314     A7 28 02 FB | 	rdlong	local02, fp
18318     14 2B 02 F6 | 	mov	local03, local02
1831c     01 2A 66 F0 | 	shl	local03, #1
18320     14 2B 02 F1 | 	add	local03, local02
18324     03 2A 66 F0 | 	shl	local03, #3
18328     14 00 00 FF 
1832c     38 E5 05 F1 | 	add	objptr, ##10552
18330     F2 2A 02 F1 | 	add	local03, objptr
18334     10 2A 06 F1 | 	add	local03, #16
18338     15 31 02 FB | 	rdlong	local06, local03
1833c     64 4E 05 F1 | 	add	fp, #100
18340     A7 30 62 FC | 	wrlong	local06, fp
18344     70 4E 85 F1 | 	sub	fp, #112
18348     14 00 00 FF 
1834c     38 E5 85 F1 | 	sub	objptr, ##10552
18350     48 00 90 FD | 	jmp	#LR__1943
18354                 | LR__1942
18354     54 4E 05 F1 | 	add	fp, #84
18358     A7 30 02 FB | 	rdlong	local06, fp
1835c     1C 4E 05 F1 | 	add	fp, #28
18360     A7 30 62 FC | 	wrlong	local06, fp
18364     64 4E 85 F1 | 	sub	fp, #100
18368     A7 28 02 FB | 	rdlong	local02, fp
1836c     14 2B 02 F6 | 	mov	local03, local02
18370     01 2A 66 F0 | 	shl	local03, #1
18374     14 2B 02 F1 | 	add	local03, local02
18378     03 2A 66 F0 | 	shl	local03, #3
1837c     14 00 00 FF 
18380     38 E5 05 F1 | 	add	objptr, ##10552
18384     F2 2A 02 F1 | 	add	local03, objptr
18388     0C 4E 85 F1 | 	sub	fp, #12
1838c     10 2A 06 F1 | 	add	local03, #16
18390     15 31 62 FC | 	wrlong	local06, local03
18394     14 00 00 FF 
18398     38 E5 85 F1 | 	sub	objptr, ##10552
1839c                 | LR__1943
1839c                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
1839c     58 4E 05 F1 | 	add	fp, #88
183a0     A7 12 02 FB | 	rdlong	arg01, fp
183a4     58 4E 85 F1 | 	sub	fp, #88
183a8     00 14 06 F6 | 	mov	arg02, #0
183ac     01 16 06 F6 | 	mov	arg03, #1
183b0     F4 17 B1 FD | 	call	#__system___float_cmp
183b4     00 FA 55 F2 | 	cmps	result1, #0 wc
183b8     24 00 90 CD |  if_b	jmp	#LR__1944
183bc     58 4E 05 F1 | 	add	fp, #88
183c0     A7 12 02 FB | 	rdlong	arg01, fp
183c4     58 4E 85 F1 | 	sub	fp, #88
183c8     80 BF 21 FF 
183cc     00 14 06 F6 | 	mov	arg02, ##1132396544
183d0     01 16 66 F6 | 	neg	arg03, #1
183d4     D0 17 B1 FD | 	call	#__system___float_cmp
183d8     01 FA 55 F2 | 	cmps	result1, #1 wc
183dc     44 00 90 CD |  if_b	jmp	#LR__1945
183e0                 | LR__1944
183e0     0C 4E 05 F1 | 	add	fp, #12
183e4     A7 2A 02 FB | 	rdlong	local03, fp
183e8     15 33 02 F6 | 	mov	local07, local03
183ec     01 32 66 F0 | 	shl	local07, #1
183f0     15 33 02 F1 | 	add	local07, local03
183f4     03 32 66 F0 | 	shl	local07, #3
183f8     14 00 00 FF 
183fc     38 E5 05 F1 | 	add	objptr, ##10552
18400     F2 32 02 F1 | 	add	local07, objptr
18404     14 32 06 F1 | 	add	local07, #20
18408     19 2D E2 FA | 	rdword	local04, local07
1840c     20 4E 05 F1 | 	add	fp, #32
18410     A7 2C 62 FC | 	wrlong	local04, fp
18414     2C 4E 85 F1 | 	sub	fp, #44
18418     14 00 00 FF 
1841c     38 E5 85 F1 | 	sub	objptr, ##10552
18420     54 00 90 FD | 	jmp	#LR__1946
18424                 | LR__1945
18424     58 4E 05 F1 | 	add	fp, #88
18428     A7 12 02 FB | 	rdlong	arg01, fp
1842c     58 4E 85 F1 | 	sub	fp, #88
18430     01 14 06 F6 | 	mov	arg02, #1
18434     04 18 B1 FD | 	call	#__system___float_tointeger
18438     2C 4E 05 F1 | 	add	fp, #44
1843c     A7 FA 61 FC | 	wrlong	result1, fp
18440     20 4E 85 F1 | 	sub	fp, #32
18444     A7 28 02 FB | 	rdlong	local02, fp
18448     14 2B 02 F6 | 	mov	local03, local02
1844c     01 2A 66 F0 | 	shl	local03, #1
18450     14 2B 02 F1 | 	add	local03, local02
18454     03 2A 66 F0 | 	shl	local03, #3
18458     14 00 00 FF 
1845c     38 E5 05 F1 | 	add	objptr, ##10552
18460     F2 2A 02 F1 | 	add	local03, objptr
18464     0C 4E 85 F1 | 	sub	fp, #12
18468     14 2A 06 F1 | 	add	local03, #20
1846c     15 FB 51 FC | 	wrword	result1, local03
18470     14 00 00 FF 
18474     38 E5 85 F1 | 	sub	objptr, ##10552
18478                 | LR__1946
18478     6C 4E 05 F1 | 	add	fp, #108
1847c     A7 14 02 FB | 	rdlong	arg02, fp
18480     6C 4E 85 F1 | 	sub	fp, #108
18484     FC 16 20 FF 
18488     54 12 06 F6 | 	mov	arg01, ##1076754516
1848c     B4 22 B1 FD | 	call	#__system____builtin_logbase
18490     FD 2C 02 F6 | 	mov	local04, result1
18494     1E 14 C6 F9 | 	decod	arg02, #30
18498     FC 16 20 FF 
1849c     54 12 06 F6 | 	mov	arg01, ##1076754516
184a0     A0 22 B1 FD | 	call	#__system____builtin_logbase
184a4     FD 14 02 F6 | 	mov	arg02, result1
184a8     16 13 02 F6 | 	mov	arg01, local04
184ac     C8 14 B1 FD | 	call	#__system___float_div
184b0     FD 12 02 F6 | 	mov	arg01, result1
184b4     00 14 06 F6 | 	mov	arg02, #0
184b8     80 17 B1 FD | 	call	#__system___float_tointeger
184bc     30 4E 05 F1 | 	add	fp, #48
184c0     A7 FA 61 FC | 	wrlong	result1, fp
184c4     1E 2C C6 F9 | 	decod	local04, #30
184c8     FD 12 02 F6 | 	mov	arg01, result1
184cc     30 4E 85 F1 | 	sub	fp, #48
184d0     05 12 06 F1 | 	add	arg01, #5
184d4     09 13 52 F6 | 	abs	arg01, arg01 wc
184d8     1F 34 C6 C9 |  if_b	decod	local08, #31
184dc     00 34 06 36 |  if_ae	mov	local08, #0
184e0     8C 0E B1 FD | 	call	#__system___float_fromuns
184e4     1A FB 61 F5 | 	xor	result1, local08
184e8     FD 14 02 F6 | 	mov	arg02, result1
184ec     16 13 02 F6 | 	mov	arg01, local04
184f0     88 21 B1 FD | 	call	#__system____builtin_powf
184f4     FD 12 02 F6 | 	mov	arg01, result1
184f8     01 14 06 F6 | 	mov	arg02, #1
184fc     3C 17 B1 FD | 	call	#__system___float_tointeger
18500     10 4E 05 F1 | 	add	fp, #16
18504     A7 FA 61 FC | 	wrlong	result1, fp
18508                 | ' skip=round(2^(lfreq+5))
18508                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
18508     10 4E 85 F1 | 	sub	fp, #16
1850c     40 00 00 FF 
18510     01 FA 55 F2 | 	cmps	result1, ##32769 wc
18514     30 00 90 CD |  if_b	jmp	#LR__1947
18518     10 4E 05 F1 | 	add	fp, #16
1851c     A7 26 02 FB | 	rdlong	local01, fp
18520     13 2D 52 F6 | 	abs	local04, local01 wc
18524     0F 2C 46 F0 | 	shr	local04, #15
18528     16 2D 82 F6 | 	negc	local04, local04
1852c     0C 4E 85 F1 | 	sub	fp, #12
18530     A7 2C 62 FC | 	wrlong	local04, fp
18534     0C 4E 05 F1 | 	add	fp, #12
18538     40 00 80 FF 
1853c     A7 00 68 FC | 	wrlong	##32768, fp
18540     10 4E 85 F1 | 	sub	fp, #16
18544     0C 00 90 FD | 	jmp	#LR__1948
18548                 | LR__1947
18548     04 4E 05 F1 | 	add	fp, #4
1854c     A7 02 68 FC | 	wrlong	#1, fp
18550     04 4E 85 F1 | 	sub	fp, #4
18554                 | LR__1948
18554     6C 4E 05 F1 | 	add	fp, #108
18558     A7 14 02 FB | 	rdlong	arg02, fp
1855c     6C 4E 85 F1 | 	sub	fp, #108
18560     3E 2C 25 FF 
18564     3C 12 06 F6 | 	mov	arg01, ##1247312956
18568     0C 14 B1 FD | 	call	#__system___float_div
1856c     FD 2C 02 F6 | 	mov	local04, result1
18570     04 4E 05 F1 | 	add	fp, #4
18574     A7 12 02 FB | 	rdlong	arg01, fp
18578     04 4E 85 F1 | 	sub	fp, #4
1857c     09 13 52 F6 | 	abs	arg01, arg01 wc
18580     1F 34 C6 C9 |  if_b	decod	local08, #31
18584     00 34 06 36 |  if_ae	mov	local08, #0
18588     E4 0D B1 FD | 	call	#__system___float_fromuns
1858c     1A FB 61 F5 | 	xor	result1, local08
18590     FD 26 02 F6 | 	mov	local01, result1
18594     1E 28 C6 F9 | 	decod	local02, #30
18598     0D 12 06 F6 | 	mov	arg01, #13
1859c     30 4E 05 F1 | 	add	fp, #48
185a0     A7 30 02 FB | 	rdlong	local06, fp
185a4     30 4E 85 F1 | 	sub	fp, #48
185a8     18 13 82 F1 | 	sub	arg01, local06
185ac     09 13 52 F6 | 	abs	arg01, arg01 wc
185b0     1F 34 C6 C9 |  if_b	decod	local08, #31
185b4     00 34 06 36 |  if_ae	mov	local08, #0
185b8     B4 0D B1 FD | 	call	#__system___float_fromuns
185bc     1A FB 61 F5 | 	xor	result1, local08
185c0     FD 14 02 F6 | 	mov	arg02, result1
185c4     14 13 02 F6 | 	mov	arg01, local02
185c8     B0 20 B1 FD | 	call	#__system____builtin_powf
185cc     FD 14 02 F6 | 	mov	arg02, result1
185d0     13 13 02 F6 | 	mov	arg01, local01
185d4     9C 11 B1 FD | 	call	#__system___float_mul
185d8     FD 14 02 F6 | 	mov	arg02, result1
185dc     16 13 02 F6 | 	mov	arg01, local04
185e0     94 13 B1 FD | 	call	#__system___float_div
185e4     FD 12 02 F6 | 	mov	arg01, result1
185e8     01 14 06 F6 | 	mov	arg02, #1
185ec     4C 16 B1 FD | 	call	#__system___float_tointeger
185f0     34 4E 05 F1 | 	add	fp, #52
185f4     A7 FA 61 FC | 	wrlong	result1, fp
185f8     34 4E 05 F1 | 	add	fp, #52
185fc     A7 12 02 FB | 	rdlong	arg01, fp
18600     10 4E 05 F1 | 	add	fp, #16
18604     A7 14 02 FB | 	rdlong	arg02, fp
18608     78 4E 85 F1 | 	sub	fp, #120
1860c     68 13 B1 FD | 	call	#__system___float_div
18610     FD 12 02 F6 | 	mov	arg01, result1
18614     01 14 06 F6 | 	mov	arg02, #1
18618     20 16 B1 FD | 	call	#__system___float_tointeger
1861c     FD 2C 02 F6 | 	mov	local04, result1
18620     14 4E 05 F1 | 	add	fp, #20
18624     A7 2C 62 FC | 	wrlong	local04, fp
18628     5C 4E 05 F1 | 	add	fp, #92
1862c     A7 14 02 FB | 	rdlong	arg02, fp
18630     70 4E 85 F1 | 	sub	fp, #112
18634     00 00 23 FF 
18638     00 12 06 F6 | 	mov	arg01, ##1174405120
1863c     34 11 B1 FD | 	call	#__system___float_mul
18640     FD 12 02 F6 | 	mov	arg01, result1
18644     01 14 06 F6 | 	mov	arg02, #1
18648     F0 15 B1 FD | 	call	#__system___float_tointeger
1864c     0D 2C C6 F9 | 	decod	local04, #13
18650     FD 2C 02 F1 | 	add	local04, result1
18654     18 4E 05 F1 | 	add	fp, #24
18658     A7 2C 62 FC | 	wrlong	local04, fp
1865c     5C 4E 05 F1 | 	add	fp, #92
18660     A7 14 02 FB | 	rdlong	arg02, fp
18664     74 4E 85 F1 | 	sub	fp, #116
18668     00 3D 22 FF 
1866c     00 12 06 F6 | 	mov	arg01, ##1148846080
18670     00 11 B1 FD | 	call	#__system___float_mul
18674     FD 12 02 F6 | 	mov	arg01, result1
18678     01 14 06 F6 | 	mov	arg02, #1
1867c     BC 15 B1 FD | 	call	#__system___float_tointeger
18680     1C 4E 05 F1 | 	add	fp, #28
18684     A7 FA 61 FC | 	wrlong	result1, fp
18688     37 00 00 FF 
1868c     10 E4 05 F1 | 	add	objptr, ##28176
18690     F2 2C 02 FB | 	rdlong	local04, objptr
18694     37 00 00 FF 
18698     10 E4 85 F1 | 	sub	objptr, ##28176
1869c     10 4E 85 F1 | 	sub	fp, #16
186a0     A7 28 02 FB | 	rdlong	local02, fp
186a4     06 28 66 F0 | 	shl	local02, #6
186a8     14 2D 02 F1 | 	add	local04, local02
186ac     04 4E 85 F1 | 	sub	fp, #4
186b0     A7 2C 62 FC | 	wrlong	local04, fp
186b4                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
186b4                 | ' speed=round(speed_coeff/slen)
186b4                 | ' ipan=8192+round(8192*pan)
186b4                 | ' ivol=round(1000.0*vol)
186b4                 | ' base2=base+64*channel
186b4                 | ' if wave <32 then 
186b4     18 4E 05 F1 | 	add	fp, #24
186b8     A7 2C 02 FB | 	rdlong	local04, fp
186bc     20 4E 85 F1 | 	sub	fp, #32
186c0     20 2C 56 F2 | 	cmps	local04, #32 wc
186c4     2C 00 90 3D |  if_ae	jmp	#LR__1949
186c8     08 4E 05 F1 | 	add	fp, #8
186cc     A7 12 02 FB | 	rdlong	arg01, fp
186d0     08 12 06 F1 | 	add	arg01, #8
186d4     18 4E 05 F1 | 	add	fp, #24
186d8     A7 14 02 FB | 	rdlong	arg02, fp
186dc     20 4E 85 F1 | 	sub	fp, #32
186e0     0B 14 66 F0 | 	shl	arg02, #11
186e4     00 00 60 FF 
186e8     00 14 06 F1 | 	add	arg02, ##-1073741824
186ec     09 15 62 FC | 	wrlong	arg02, arg01
186f0     18 00 90 FD | 	jmp	#LR__1950
186f4                 | LR__1949
186f4     08 4E 05 F1 | 	add	fp, #8
186f8     A7 12 02 FB | 	rdlong	arg01, fp
186fc     08 4E 85 F1 | 	sub	fp, #8
18700     08 12 06 F1 | 	add	arg01, #8
18704     00 00 E4 FF 
18708     09 01 68 FC | 	wrlong	##-939524096, arg01
1870c                 | LR__1950
1870c     08 4E 05 F1 | 	add	fp, #8
18710     A7 12 02 FB | 	rdlong	arg01, fp
18714     10 12 06 F1 | 	add	arg01, #16
18718     04 00 80 FF 
1871c     09 01 68 FC | 	wrlong	##2048, arg01
18720     A7 12 02 FB | 	rdlong	arg01, fp
18724     0C 12 06 F1 | 	add	arg01, #12
18728     09 01 68 FC | 	wrlong	#0, arg01
1872c     A7 12 02 FB | 	rdlong	arg01, fp
18730     14 12 06 F1 | 	add	arg01, #20
18734     14 4E 05 F1 | 	add	fp, #20
18738     A7 14 02 FB | 	rdlong	arg02, fp
1873c     09 15 52 FC | 	wrword	arg02, arg01
18740     14 4E 85 F1 | 	sub	fp, #20
18744     A7 12 02 FB | 	rdlong	arg01, fp
18748     16 12 06 F1 | 	add	arg01, #22
1874c     10 4E 05 F1 | 	add	fp, #16
18750     A7 14 02 FB | 	rdlong	arg02, fp
18754     09 15 52 FC | 	wrword	arg02, arg01
18758                 | ' lpoke base2+16,2048
18758                 | ' lpoke base2+12,0
18758                 | ' dpoke base2+20,ivol 
18758                 | ' dpoke base2+22,ipan 
18758                 | ' if wave<32 then
18758     08 4E 05 F1 | 	add	fp, #8
1875c     A7 2C 02 FB | 	rdlong	local04, fp
18760     20 4E 85 F1 | 	sub	fp, #32
18764     20 2C 56 F2 | 	cmps	local04, #32 wc
18768     38 00 90 3D |  if_ae	jmp	#LR__1951
1876c     08 4E 05 F1 | 	add	fp, #8
18770     A7 12 02 FB | 	rdlong	arg01, fp
18774     18 12 06 F1 | 	add	arg01, #24
18778     2C 4E 05 F1 | 	add	fp, #44
1877c     A7 14 02 FB | 	rdlong	arg02, fp
18780     09 15 52 FC | 	wrword	arg02, arg01
18784     2C 4E 85 F1 | 	sub	fp, #44
18788     A7 12 02 FB | 	rdlong	arg01, fp
1878c     1A 12 06 F1 | 	add	arg01, #26
18790     08 4E 05 F1 | 	add	fp, #8
18794     A7 14 02 FB | 	rdlong	arg02, fp
18798     10 4E 85 F1 | 	sub	fp, #16
1879c     09 15 52 FC | 	wrword	arg02, arg01
187a0     48 00 90 FD | 	jmp	#LR__1952
187a4                 | LR__1951
187a4     08 4E 05 F1 | 	add	fp, #8
187a8     A7 2C 02 FB | 	rdlong	local04, fp
187ac     18 2C 06 F1 | 	add	local04, #24
187b0     64 4E 05 F1 | 	add	fp, #100
187b4     A7 14 02 FB | 	rdlong	arg02, fp
187b8     6C 4E 85 F1 | 	sub	fp, #108
187bc     3E 2C 25 FF 
187c0     3C 12 06 F6 | 	mov	arg01, ##1247312956
187c4     B0 11 B1 FD | 	call	#__system___float_div
187c8     FD 12 02 F6 | 	mov	arg01, result1
187cc     01 14 06 F6 | 	mov	arg02, #1
187d0     68 14 B1 FD | 	call	#__system___float_tointeger
187d4     16 FB 51 FC | 	wrword	result1, local04
187d8     08 4E 05 F1 | 	add	fp, #8
187dc     A7 12 02 FB | 	rdlong	arg01, fp
187e0     08 4E 85 F1 | 	sub	fp, #8
187e4     1A 12 06 F1 | 	add	arg01, #26
187e8     09 01 5A FC | 	wrword	#256, arg01
187ec                 | LR__1952
187ec     08 4E 05 F1 | 	add	fp, #8
187f0     A7 12 02 FB | 	rdlong	arg01, fp
187f4     1C 12 06 F1 | 	add	arg01, #28
187f8     09 01 68 FC | 	wrlong	#0, arg01
187fc     A7 12 02 FB | 	rdlong	arg01, fp
18800     20 12 06 F1 | 	add	arg01, #32
18804     09 01 68 FC | 	wrlong	#0, arg01
18808                 | ' lpoke base2+28,$0000_0000
18808                 | ' lpoke base2+32,0 
18808                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
18808     1C 4E 05 F1 | 	add	fp, #28
1880c     A7 2C 02 FB | 	rdlong	local04, fp
18810     24 4E 85 F1 | 	sub	fp, #36
18814     08 2C 0E F2 | 	cmp	local04, #8 wz
18818     18 00 90 5D |  if_ne	jmp	#LR__1953
1881c     08 4E 05 F1 | 	add	fp, #8
18820     A7 12 02 FB | 	rdlong	arg01, fp
18824     08 4E 85 F1 | 	sub	fp, #8
18828     24 12 06 F1 | 	add	arg01, #36
1882c     09 01 68 FC | 	wrlong	#0, arg01
18830     34 00 90 FD | 	jmp	#LR__1954
18834                 | LR__1953
18834     08 4E 05 F1 | 	add	fp, #8
18838     A7 12 02 FB | 	rdlong	arg01, fp
1883c     24 12 06 F1 | 	add	arg01, #36
18840     1C 4E 05 F1 | 	add	fp, #28
18844     A7 14 02 FB | 	rdlong	arg02, fp
18848     24 4E 85 F1 | 	sub	fp, #36
1884c     09 14 66 F0 | 	shl	arg02, #9
18850     0C 00 00 FF 
18854     D8 E4 05 F1 | 	add	objptr, ##6360
18858     F2 14 02 F1 | 	add	arg02, objptr
1885c     0C 00 00 FF 
18860     D8 E4 85 F1 | 	sub	objptr, ##6360
18864     09 15 62 FC | 	wrlong	arg02, arg01
18868                 | LR__1954
18868     08 4E 05 F1 | 	add	fp, #8
1886c     A7 12 02 FB | 	rdlong	arg01, fp
18870     28 12 06 F1 | 	add	arg01, #40
18874     0C 4E 05 F1 | 	add	fp, #12
18878     A7 14 02 FB | 	rdlong	arg02, fp
1887c     09 15 62 FC | 	wrlong	arg02, arg01
18880     0C 4E 85 F1 | 	sub	fp, #12
18884     A7 12 02 FB | 	rdlong	arg01, fp
18888     2C 12 06 F1 | 	add	arg01, #44
1888c     24 4E 05 F1 | 	add	fp, #36
18890     A7 14 02 FB | 	rdlong	arg02, fp
18894     09 15 62 FC | 	wrlong	arg02, arg01
18898                 | ' lpoke base2+40,speed 
18898                 | ' lpoke base2+44,sus 
18898                 | ' if delay>0 then waitms(delay) 
18898     04 4E 85 F1 | 	sub	fp, #4
1889c     A7 2C 02 FB | 	rdlong	local04, fp
188a0     28 4E 85 F1 | 	sub	fp, #40
188a4     01 2C 56 F2 | 	cmps	local04, #1 wc
188a8     28 4E 05 31 |  if_ae	add	fp, #40
188ac     A7 12 02 3B |  if_ae	rdlong	arg01, fp
188b0     28 4E 85 31 |  if_ae	sub	fp, #40
188b4     34 E3 B0 3D |  if_ae	call	#__system___waitms
188b8     A7 F0 03 F6 | 	mov	ptra, fp
188bc     B2 00 A0 FD | 	call	#popregs_
188c0                 | _do_play_ret
188c0     2D 00 64 FD | 	ret
188c4                 | 
188c4                 | ' 
188c4                 | ' '-------------------- plot
188c4                 | ' 
188c4                 | ' sub do_plot
188c4                 | _do_plot
188c4     00 4A 05 F6 | 	mov	COUNT_, #0
188c8     A8 00 A0 FD | 	call	#pushregs_
188cc     20 F0 07 F1 | 	add	ptra, #32
188d0     94 4C BF FD | 	call	#_pop
188d4     FD 16 02 F6 | 	mov	arg03, result1
188d8     FE 14 02 F6 | 	mov	arg02, result2
188dc     FF 12 02 F6 | 	mov	arg01, result3
188e0     0C 4E 05 F1 | 	add	fp, #12
188e4     A7 16 62 FC | 	wrlong	arg03, fp
188e8     04 4E 05 F1 | 	add	fp, #4
188ec     A7 14 62 FC | 	wrlong	arg02, fp
188f0     04 4E 05 F1 | 	add	fp, #4
188f4     A7 12 62 FC | 	wrlong	arg01, fp
188f8     14 4E 85 F1 | 	sub	fp, #20
188fc     68 4C BF FD | 	call	#_pop
18900     FF 16 02 F6 | 	mov	arg03, result3
18904     A7 FA 61 FC | 	wrlong	result1, fp
18908     04 4E 05 F1 | 	add	fp, #4
1890c     A7 FC 61 FC | 	wrlong	result2, fp
18910     04 4E 05 F1 | 	add	fp, #4
18914     A7 16 62 FC | 	wrlong	arg03, fp
18918     08 4E 85 F1 | 	sub	fp, #8
1891c     A7 12 02 F6 | 	mov	arg01, fp
18920     28 4E BF FD | 	call	#_converttoint
18924     18 4E 05 F1 | 	add	fp, #24
18928     A7 FA 61 FC | 	wrlong	result1, fp
1892c     0C 4E 85 F1 | 	sub	fp, #12
18930     A7 12 02 F6 | 	mov	arg01, fp
18934     0C 4E 85 F1 | 	sub	fp, #12
18938     10 4E BF FD | 	call	#_converttoint
1893c     1C 4E 05 F1 | 	add	fp, #28
18940     A7 FA 61 FC | 	wrlong	result1, fp
18944     04 4E 85 F1 | 	sub	fp, #4
18948     A7 16 02 FB | 	rdlong	arg03, fp
1894c     37 00 00 FF 
18950     2C E4 05 F1 | 	add	objptr, ##28204
18954     F2 16 62 FC | 	wrlong	arg03, objptr
18958     04 4E 05 F1 | 	add	fp, #4
1895c     A7 14 02 FB | 	rdlong	arg02, fp
18960     1C 4E 85 F1 | 	sub	fp, #28
18964     04 E4 05 F1 | 	add	objptr, #4
18968     F2 14 62 FC | 	wrlong	arg02, objptr
1896c     04 E4 85 F1 | 	sub	objptr, #4
18970     F2 12 02 FB | 	rdlong	arg01, objptr
18974     04 E4 85 F1 | 	sub	objptr, #4
18978     F2 16 02 FB | 	rdlong	arg03, objptr
1897c     37 00 00 FF 
18980     28 E4 85 F1 | 	sub	objptr, ##28200
18984     18 B6 B0 FD | 	call	#_hg010b_spin2_putpixel
18988     A7 F0 03 F6 | 	mov	ptra, fp
1898c     B2 00 A0 FD | 	call	#popregs_
18990                 | _do_plot_ret
18990     2D 00 64 FD | 	ret
18994                 | 
18994                 | ' 
18994                 | ' '-------------------- poke
18994                 | ' 
18994                 | ' sub do_poke
18994                 | _do_poke
18994     01 4A 05 F6 | 	mov	COUNT_, #1
18998     A8 00 A0 FD | 	call	#pushregs_
1899c     20 F0 07 F1 | 	add	ptra, #32
189a0     C4 4B BF FD | 	call	#_pop
189a4     FD 14 02 F6 | 	mov	arg02, result1
189a8     FE 12 02 F6 | 	mov	arg01, result2
189ac     FF 26 02 F6 | 	mov	local01, result3
189b0     A7 14 62 FC | 	wrlong	arg02, fp
189b4     04 4E 05 F1 | 	add	fp, #4
189b8     A7 12 62 FC | 	wrlong	arg01, fp
189bc     04 4E 05 F1 | 	add	fp, #4
189c0     A7 26 62 FC | 	wrlong	local01, fp
189c4     08 4E 85 F1 | 	sub	fp, #8
189c8     9C 4B BF FD | 	call	#_pop
189cc     FF 26 02 F6 | 	mov	local01, result3
189d0     0C 4E 05 F1 | 	add	fp, #12
189d4     A7 FA 61 FC | 	wrlong	result1, fp
189d8     04 4E 05 F1 | 	add	fp, #4
189dc     A7 FC 61 FC | 	wrlong	result2, fp
189e0     04 4E 05 F1 | 	add	fp, #4
189e4     A7 26 62 FC | 	wrlong	local01, fp
189e8     08 4E 85 F1 | 	sub	fp, #8
189ec     A7 12 02 F6 | 	mov	arg01, fp
189f0     0C 4E 85 F1 | 	sub	fp, #12
189f4     54 4D BF FD | 	call	#_converttoint
189f8     18 4E 05 F1 | 	add	fp, #24
189fc     A7 FA 61 FC | 	wrlong	result1, fp
18a00     18 4E 85 F1 | 	sub	fp, #24
18a04     A7 12 02 F6 | 	mov	arg01, fp
18a08     40 4D BF FD | 	call	#_converttoint
18a0c     1C 4E 05 F1 | 	add	fp, #28
18a10     A7 FA 61 FC | 	wrlong	result1, fp
18a14                 | ' t1=pop() 'value
18a14                 | ' t2=pop() 
18a14                 | ' a=converttoint(t2) : v=converttoint(t1)
18a14                 | ' if a<$80000 then poke a,v else pspoke a,v
18a14     04 4E 85 F1 | 	sub	fp, #4
18a18     A7 26 02 FB | 	rdlong	local01, fp
18a1c     18 4E 85 F1 | 	sub	fp, #24
18a20     00 04 00 FF 
18a24     00 26 16 F2 | 	cmp	local01, ##524288 wc
18a28     1C 00 90 3D |  if_ae	jmp	#LR__1960
18a2c     18 4E 05 F1 | 	add	fp, #24
18a30     A7 12 02 FB | 	rdlong	arg01, fp
18a34     04 4E 05 F1 | 	add	fp, #4
18a38     A7 14 02 FB | 	rdlong	arg02, fp
18a3c     1C 4E 85 F1 | 	sub	fp, #28
18a40     09 15 42 FC | 	wrbyte	arg02, arg01
18a44     18 00 90 FD | 	jmp	#LR__1961
18a48                 | LR__1960
18a48     18 4E 05 F1 | 	add	fp, #24
18a4c     A7 12 02 FB | 	rdlong	arg01, fp
18a50     04 4E 05 F1 | 	add	fp, #4
18a54     A7 14 02 FB | 	rdlong	arg02, fp
18a58     1C 4E 85 F1 | 	sub	fp, #28
18a5c     D8 A6 B0 FD | 	call	#_pspoke
18a60                 | LR__1961
18a60     A7 F0 03 F6 | 	mov	ptra, fp
18a64     B2 00 A0 FD | 	call	#popregs_
18a68                 | _do_poke_ret
18a68     2D 00 64 FD | 	ret
18a6c                 | 
18a6c                 | ' 
18a6c                 | ' '-------------------- pop
18a6c                 | ' 
18a6c                 | ' sub do_pop()
18a6c                 | _do_pop
18a6c                 | ' if gosubtop>0 then  gosubtop -=1 
18a6c     50 00 00 FF 
18a70     34 E5 05 F1 | 	add	objptr, ##41268
18a74     F2 00 02 FB | 	rdlong	_var01, objptr
18a78     50 00 00 FF 
18a7c     34 E5 85 F1 | 	sub	objptr, ##41268
18a80     01 00 56 F2 | 	cmps	_var01, #1 wc
18a84     50 00 00 3F 
18a88     34 E5 05 31 |  if_ae	add	objptr, ##41268
18a8c     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
18a90     01 00 86 31 |  if_ae	sub	_var01, #1
18a94     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
18a98     50 00 00 3F 
18a9c     34 E5 85 31 |  if_ae	sub	objptr, ##41268
18aa0                 | _do_pop_ret
18aa0     2D 00 64 FD | 	ret
18aa4                 | 
18aa4                 | ' 
18aa4                 | ' '-------------------- position
18aa4                 | ' 
18aa4                 | ' sub do_position
18aa4                 | _do_position
18aa4     01 4A 05 F6 | 	mov	COUNT_, #1
18aa8     A8 00 A0 FD | 	call	#pushregs_
18aac     18 F0 07 F1 | 	add	ptra, #24
18ab0     B4 4A BF FD | 	call	#_pop
18ab4     FD 14 02 F6 | 	mov	arg02, result1
18ab8     FE 12 02 F6 | 	mov	arg01, result2
18abc     FF 26 02 F6 | 	mov	local01, result3
18ac0     A7 14 62 FC | 	wrlong	arg02, fp
18ac4     04 4E 05 F1 | 	add	fp, #4
18ac8     A7 12 62 FC | 	wrlong	arg01, fp
18acc     04 4E 05 F1 | 	add	fp, #4
18ad0     A7 26 62 FC | 	wrlong	local01, fp
18ad4     08 4E 85 F1 | 	sub	fp, #8
18ad8     8C 4A BF FD | 	call	#_pop
18adc     FF 26 02 F6 | 	mov	local01, result3
18ae0     0C 4E 05 F1 | 	add	fp, #12
18ae4     A7 FA 61 FC | 	wrlong	result1, fp
18ae8     04 4E 05 F1 | 	add	fp, #4
18aec     A7 FC 61 FC | 	wrlong	result2, fp
18af0     04 4E 05 F1 | 	add	fp, #4
18af4     A7 26 62 FC | 	wrlong	local01, fp
18af8     08 4E 85 F1 | 	sub	fp, #8
18afc     A7 12 02 F6 | 	mov	arg01, fp
18b00     0C 4E 85 F1 | 	sub	fp, #12
18b04     44 4C BF FD | 	call	#_converttoint
18b08     FD 26 02 F6 | 	mov	local01, result1
18b0c     A7 12 02 F6 | 	mov	arg01, fp
18b10     38 4C BF FD | 	call	#_converttoint
18b14     FD 14 02 F6 | 	mov	arg02, result1
18b18     13 13 02 F6 | 	mov	arg01, local01
18b1c     44 C0 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18b20     A7 F0 03 F6 | 	mov	ptra, fp
18b24     B2 00 A0 FD | 	call	#popregs_
18b28                 | _do_position_ret
18b28     2D 00 64 FD | 	ret
18b2c                 | 
18b2c                 | ' 
18b2c                 | ' '-------------------- print
18b2c                 | ' 
18b2c                 | ' sub do_print  
18b2c                 | _do_print
18b2c     0B 4A 05 F6 | 	mov	COUNT_, #11
18b30     A8 00 A0 FD | 	call	#pushregs_
18b34     00 2C 06 F6 | 	mov	local04, #0
18b38     2C 4A BF FD | 	call	#_pop
18b3c     FD 2E 02 F6 | 	mov	local05, result1
18b40     FE 30 02 F6 | 	mov	local06, result2
18b44     FF 32 02 F6 | 	mov	local07, result3
18b48     17 27 02 F6 | 	mov	local01, local05
18b4c     18 29 02 F6 | 	mov	local02, local06
18b50     19 2B 02 F6 | 	mov	local03, local07
18b54                 | '  
18b54                 | ' r=0
18b54                 | ' t1=pop() 
18b54                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18b54     21 2A 0E F2 | 	cmp	local03, #33 wz
18b58     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18b5c     20 00 90 5D |  if_ne	jmp	#LR__1970
18b60     15 2D 02 F6 | 	mov	local04, local03
18b64     00 4A BF FD | 	call	#_pop
18b68     FD 2E 02 F6 | 	mov	local05, result1
18b6c     FE 30 02 F6 | 	mov	local06, result2
18b70     FF 32 02 F6 | 	mov	local07, result3
18b74     17 27 02 F6 | 	mov	local01, local05
18b78     18 29 02 F6 | 	mov	local02, local06
18b7c     19 2B 02 F6 | 	mov	local03, local07
18b80                 | LR__1970
18b80                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18b80     20 2A 0E F2 | 	cmp	local03, #32 wz
18b84     15 2D 02 A6 |  if_e	mov	local04, local03
18b88                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18b88     FF 2A 0E F2 | 	cmp	local03, #255 wz
18b8c     10 00 90 5D |  if_ne	jmp	#LR__1971
18b90     13 13 02 F6 | 	mov	arg01, local01
18b94     00 14 06 F6 | 	mov	arg02, #0
18b98     6C A3 B0 FD | 	call	#_printerror
18b9c     D4 04 90 FD | 	jmp	#LR__1990
18ba0                 | LR__1971
18ba0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18ba0     2B 2A 0E F2 | 	cmp	local03, #43 wz
18ba4     14 00 90 5D |  if_ne	jmp	#LR__1972
18ba8     13 13 02 F6 | 	mov	arg01, local01
18bac     30 4B BF FD | 	call	#_convertstring
18bb0     FD 2E 02 F6 | 	mov	local05, result1
18bb4     17 27 02 F6 | 	mov	local01, local05
18bb8     1F 2A 06 F6 | 	mov	local03, #31
18bbc                 | LR__1972
18bbc                 | ' 
18bbc                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18bbc     2C 2A 0E F2 | 	cmp	local03, #44 wz
18bc0     80 00 90 5D |  if_ne	jmp	#LR__1973
18bc4     00 12 06 F6 | 	mov	arg01, #0
18bc8     D0 39 B1 FD | 	call	#__system___getiolock_0602
18bcc     FD 12 02 F6 | 	mov	arg01, result1
18bd0     24 DD B0 FD | 	call	#__system___lockmem
18bd4     B7 01 00 FF 
18bd8     29 15 06 F6 | 	mov	arg02, ##@LR__5943
18bdc     00 12 06 F6 | 	mov	arg01, #0
18be0     00 16 06 F6 | 	mov	arg03, #0
18be4     08 EA B0 FD | 	call	#__system___basic_print_string
18be8     0A 34 06 F6 | 	mov	local08, #10
18bec     00 12 06 F6 | 	mov	arg01, #0
18bf0     13 15 02 F6 | 	mov	arg02, local01
18bf4     00 16 06 F6 | 	mov	arg03, #0
18bf8     0A 18 06 F6 | 	mov	arg04, #10
18bfc     34 EA B0 FD | 	call	#__system___basic_print_integer
18c00     FD 36 02 F6 | 	mov	local09, result1
18c04     00 12 06 F6 | 	mov	arg01, #0
18c08     0A 14 06 F6 | 	mov	arg02, #10
18c0c     00 16 06 F6 | 	mov	arg03, #0
18c10     84 E9 B0 FD | 	call	#__system___basic_print_char
18c14     01 38 06 F6 | 	mov	local10, #1
18c18     00 12 06 F6 | 	mov	arg01, #0
18c1c     7C 39 B1 FD | 	call	#__system___getiolock_0602
18c20     FD 00 68 FC | 	wrlong	#0, result1
18c24     00 3A 06 F6 | 	mov	local11, #0
18c28     3C 49 BF FD | 	call	#_pop
18c2c     FD 2E 02 F6 | 	mov	local05, result1
18c30     FE 30 02 F6 | 	mov	local06, result2
18c34     FF 32 02 F6 | 	mov	local07, result3
18c38     17 27 02 F6 | 	mov	local01, local05
18c3c     18 29 02 F6 | 	mov	local02, local06
18c40     19 2B 02 F6 | 	mov	local03, local07
18c44                 | LR__1973
18c44                 | ' 
18c44                 | ' if r=print_mod_comma  then
18c44     21 2C 0E F2 | 	cmp	local04, #33 wz
18c48     AC 01 90 5D |  if_ne	jmp	#LR__1978
18c4c                 | '   if t1.result_type=result_int then print t1.result.iresult,
18c4c     1C 2A 0E F2 | 	cmp	local03, #28 wz
18c50     64 00 90 5D |  if_ne	jmp	#LR__1974
18c54     00 12 06 F6 | 	mov	arg01, #0
18c58     40 39 B1 FD | 	call	#__system___getiolock_0602
18c5c     FD 12 02 F6 | 	mov	arg01, result1
18c60     94 DC B0 FD | 	call	#__system___lockmem
18c64     00 30 06 F6 | 	mov	local06, #0
18c68     00 12 06 F6 | 	mov	arg01, #0
18c6c     13 15 02 F6 | 	mov	arg02, local01
18c70     00 16 06 F6 | 	mov	arg03, #0
18c74     0A 18 06 F6 | 	mov	arg04, #10
18c78     B8 E9 B0 FD | 	call	#__system___basic_print_integer
18c7c     FD 32 02 F6 | 	mov	local07, result1
18c80     18 2F 02 F6 | 	mov	local05, local06
18c84     19 2F 02 F1 | 	add	local05, local07
18c88     00 3A 06 F6 | 	mov	local11, #0
18c8c     00 12 06 F6 | 	mov	arg01, #0
18c90     09 14 06 F6 | 	mov	arg02, #9
18c94     00 16 06 F6 | 	mov	arg03, #0
18c98     FC E8 B0 FD | 	call	#__system___basic_print_char
18c9c     FD 36 02 F6 | 	mov	local09, result1
18ca0     FD 2E 02 F1 | 	add	local05, result1
18ca4     00 12 06 F6 | 	mov	arg01, #0
18ca8     F0 38 B1 FD | 	call	#__system___getiolock_0602
18cac     FD 00 68 FC | 	wrlong	#0, result1
18cb0     00 FA 05 F6 | 	mov	result1, #0
18cb4     00 38 06 F6 | 	mov	local10, #0
18cb8                 | LR__1974
18cb8                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18cb8     1D 2A 0E F2 | 	cmp	local03, #29 wz
18cbc     64 00 90 5D |  if_ne	jmp	#LR__1975
18cc0     00 12 06 F6 | 	mov	arg01, #0
18cc4     D4 38 B1 FD | 	call	#__system___getiolock_0602
18cc8     FD 12 02 F6 | 	mov	arg01, result1
18ccc     28 DC B0 FD | 	call	#__system___lockmem
18cd0     00 30 06 F6 | 	mov	local06, #0
18cd4     00 12 06 F6 | 	mov	arg01, #0
18cd8     13 15 02 F6 | 	mov	arg02, local01
18cdc     00 16 06 F6 | 	mov	arg03, #0
18ce0     0A 18 06 F6 | 	mov	arg04, #10
18ce4     8C E9 B0 FD | 	call	#__system___basic_print_unsigned
18ce8     FD 32 02 F6 | 	mov	local07, result1
18cec     18 2F 02 F6 | 	mov	local05, local06
18cf0     19 2F 02 F1 | 	add	local05, local07
18cf4     00 3A 06 F6 | 	mov	local11, #0
18cf8     00 12 06 F6 | 	mov	arg01, #0
18cfc     09 14 06 F6 | 	mov	arg02, #9
18d00     00 16 06 F6 | 	mov	arg03, #0
18d04     90 E8 B0 FD | 	call	#__system___basic_print_char
18d08     FD 36 02 F6 | 	mov	local09, result1
18d0c     FD 2E 02 F1 | 	add	local05, result1
18d10     00 12 06 F6 | 	mov	arg01, #0
18d14     84 38 B1 FD | 	call	#__system___getiolock_0602
18d18     FD 00 68 FC | 	wrlong	#0, result1
18d1c     00 FA 05 F6 | 	mov	result1, #0
18d20     00 38 06 F6 | 	mov	local10, #0
18d24                 | LR__1975
18d24                 | '   if t1.result_type=result_float then print t1.result.fresult,
18d24     1E 2A 0E F2 | 	cmp	local03, #30 wz
18d28     64 00 90 5D |  if_ne	jmp	#LR__1976
18d2c     00 12 06 F6 | 	mov	arg01, #0
18d30     68 38 B1 FD | 	call	#__system___getiolock_0602
18d34     FD 12 02 F6 | 	mov	arg01, result1
18d38     BC DB B0 FD | 	call	#__system___lockmem
18d3c     00 30 06 F6 | 	mov	local06, #0
18d40     00 12 06 F6 | 	mov	arg01, #0
18d44     13 15 02 F6 | 	mov	arg02, local01
18d48     00 16 06 F6 | 	mov	arg03, #0
18d4c     23 18 06 F6 | 	mov	arg04, #35
18d50     38 10 B1 FD | 	call	#__system___basic_print_float
18d54     FD 32 02 F6 | 	mov	local07, result1
18d58     18 2F 02 F6 | 	mov	local05, local06
18d5c     19 2F 02 F1 | 	add	local05, local07
18d60     00 3A 06 F6 | 	mov	local11, #0
18d64     00 12 06 F6 | 	mov	arg01, #0
18d68     09 14 06 F6 | 	mov	arg02, #9
18d6c     00 16 06 F6 | 	mov	arg03, #0
18d70     24 E8 B0 FD | 	call	#__system___basic_print_char
18d74     FD 36 02 F6 | 	mov	local09, result1
18d78     FD 2E 02 F1 | 	add	local05, result1
18d7c     00 12 06 F6 | 	mov	arg01, #0
18d80     18 38 B1 FD | 	call	#__system___getiolock_0602
18d84     FD 00 68 FC | 	wrlong	#0, result1
18d88     00 FA 05 F6 | 	mov	result1, #0
18d8c     00 38 06 F6 | 	mov	local10, #0
18d90                 | LR__1976
18d90                 | '   if t1.result_type=result_string then print t1.result.sresult,
18d90     1F 2A 0E F2 | 	cmp	local03, #31 wz
18d94     60 00 90 5D |  if_ne	jmp	#LR__1977
18d98     00 12 06 F6 | 	mov	arg01, #0
18d9c     FC 37 B1 FD | 	call	#__system___getiolock_0602
18da0     FD 12 02 F6 | 	mov	arg01, result1
18da4     50 DB B0 FD | 	call	#__system___lockmem
18da8     00 30 06 F6 | 	mov	local06, #0
18dac     00 12 06 F6 | 	mov	arg01, #0
18db0     13 15 02 F6 | 	mov	arg02, local01
18db4     00 16 06 F6 | 	mov	arg03, #0
18db8     34 E8 B0 FD | 	call	#__system___basic_print_string
18dbc     FD 32 02 F6 | 	mov	local07, result1
18dc0     18 2F 02 F6 | 	mov	local05, local06
18dc4     19 2F 02 F1 | 	add	local05, local07
18dc8     00 3A 06 F6 | 	mov	local11, #0
18dcc     00 12 06 F6 | 	mov	arg01, #0
18dd0     09 14 06 F6 | 	mov	arg02, #9
18dd4     00 16 06 F6 | 	mov	arg03, #0
18dd8     BC E7 B0 FD | 	call	#__system___basic_print_char
18ddc     FD 36 02 F6 | 	mov	local09, result1
18de0     FD 2E 02 F1 | 	add	local05, result1
18de4     00 12 06 F6 | 	mov	arg01, #0
18de8     B0 37 B1 FD | 	call	#__system___getiolock_0602
18dec     FD 00 68 FC | 	wrlong	#0, result1
18df0     00 FA 05 F6 | 	mov	result1, #0
18df4     00 38 06 F6 | 	mov	local10, #0
18df8                 | LR__1977
18df8                 | LR__1978
18df8                 | ' if r=print_mod_semicolon then 
18df8     22 2C 0E F2 | 	cmp	local04, #34 wz
18dfc     1C 01 90 5D |  if_ne	jmp	#LR__1983
18e00                 | '   if t1.result_type=result_int then print t1.result.iresult;
18e00     1C 2A 0E F2 | 	cmp	local03, #28 wz
18e04     50 00 90 5D |  if_ne	jmp	#LR__1979
18e08     00 12 06 F6 | 	mov	arg01, #0
18e0c     8C 37 B1 FD | 	call	#__system___getiolock_0602
18e10     FD 12 02 F6 | 	mov	arg01, result1
18e14     E0 DA B0 FD | 	call	#__system___lockmem
18e18     00 30 06 F6 | 	mov	local06, #0
18e1c     00 38 06 F6 | 	mov	local10, #0
18e20     0A 3A 06 F6 | 	mov	local11, #10
18e24     00 12 06 F6 | 	mov	arg01, #0
18e28     13 15 02 F6 | 	mov	arg02, local01
18e2c     00 16 06 F6 | 	mov	arg03, #0
18e30     0A 18 06 F6 | 	mov	arg04, #10
18e34     FC E7 B0 FD | 	call	#__system___basic_print_integer
18e38     FD 32 02 F6 | 	mov	local07, result1
18e3c     18 2F 02 F6 | 	mov	local05, local06
18e40     19 2F 02 F1 | 	add	local05, local07
18e44     00 12 06 F6 | 	mov	arg01, #0
18e48     50 37 B1 FD | 	call	#__system___getiolock_0602
18e4c     FD 00 68 FC | 	wrlong	#0, result1
18e50     00 FA 05 F6 | 	mov	result1, #0
18e54     00 36 06 F6 | 	mov	local09, #0
18e58                 | LR__1979
18e58                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18e58     1D 2A 0E F2 | 	cmp	local03, #29 wz
18e5c     50 00 90 5D |  if_ne	jmp	#LR__1980
18e60     00 12 06 F6 | 	mov	arg01, #0
18e64     34 37 B1 FD | 	call	#__system___getiolock_0602
18e68     FD 12 02 F6 | 	mov	arg01, result1
18e6c     88 DA B0 FD | 	call	#__system___lockmem
18e70     00 30 06 F6 | 	mov	local06, #0
18e74     00 38 06 F6 | 	mov	local10, #0
18e78     0A 3A 06 F6 | 	mov	local11, #10
18e7c     00 12 06 F6 | 	mov	arg01, #0
18e80     13 15 02 F6 | 	mov	arg02, local01
18e84     00 16 06 F6 | 	mov	arg03, #0
18e88     0A 18 06 F6 | 	mov	arg04, #10
18e8c     E4 E7 B0 FD | 	call	#__system___basic_print_unsigned
18e90     FD 32 02 F6 | 	mov	local07, result1
18e94     18 2F 02 F6 | 	mov	local05, local06
18e98     19 2F 02 F1 | 	add	local05, local07
18e9c     00 12 06 F6 | 	mov	arg01, #0
18ea0     F8 36 B1 FD | 	call	#__system___getiolock_0602
18ea4     FD 00 68 FC | 	wrlong	#0, result1
18ea8     00 FA 05 F6 | 	mov	result1, #0
18eac     00 36 06 F6 | 	mov	local09, #0
18eb0                 | LR__1980
18eb0                 | '   if t1.result_type=result_float then print t1.result.fresult;
18eb0     1E 2A 0E F2 | 	cmp	local03, #30 wz
18eb4     30 00 90 5D |  if_ne	jmp	#LR__1981
18eb8     00 12 06 F6 | 	mov	arg01, #0
18ebc     DC 36 B1 FD | 	call	#__system___getiolock_0602
18ec0     FD 12 02 F6 | 	mov	arg01, result1
18ec4     30 DA B0 FD | 	call	#__system___lockmem
18ec8     00 12 06 F6 | 	mov	arg01, #0
18ecc     13 15 02 F6 | 	mov	arg02, local01
18ed0     00 16 06 F6 | 	mov	arg03, #0
18ed4     23 18 06 F6 | 	mov	arg04, #35
18ed8     B0 0E B1 FD | 	call	#__system___basic_print_float
18edc     00 12 06 F6 | 	mov	arg01, #0
18ee0     B8 36 B1 FD | 	call	#__system___getiolock_0602
18ee4     FD 00 68 FC | 	wrlong	#0, result1
18ee8                 | LR__1981
18ee8                 | '   if t1.result_type=result_string then print t1.result.sresult;
18ee8     1F 2A 0E F2 | 	cmp	local03, #31 wz
18eec     2C 00 90 5D |  if_ne	jmp	#LR__1982
18ef0     00 12 06 F6 | 	mov	arg01, #0
18ef4     A4 36 B1 FD | 	call	#__system___getiolock_0602
18ef8     FD 12 02 F6 | 	mov	arg01, result1
18efc     F8 D9 B0 FD | 	call	#__system___lockmem
18f00     00 12 06 F6 | 	mov	arg01, #0
18f04     13 15 02 F6 | 	mov	arg02, local01
18f08     00 16 06 F6 | 	mov	arg03, #0
18f0c     E0 E6 B0 FD | 	call	#__system___basic_print_string
18f10     00 12 06 F6 | 	mov	arg01, #0
18f14     84 36 B1 FD | 	call	#__system___getiolock_0602
18f18     FD 00 68 FC | 	wrlong	#0, result1
18f1c                 | LR__1982
18f1c                 | LR__1983
18f1c                 | ' if r=0 then 
18f1c     00 2C 0E F2 | 	cmp	local04, #0 wz
18f20     1C 01 90 5D |  if_ne	jmp	#LR__1988
18f24                 | '   if t1.result_type=result_int then print t1.result.iresult
18f24     1C 2A 0E F2 | 	cmp	local03, #28 wz
18f28     40 00 90 5D |  if_ne	jmp	#LR__1984
18f2c     00 12 06 F6 | 	mov	arg01, #0
18f30     68 36 B1 FD | 	call	#__system___getiolock_0602
18f34     FD 12 02 F6 | 	mov	arg01, result1
18f38     BC D9 B0 FD | 	call	#__system___lockmem
18f3c     00 12 06 F6 | 	mov	arg01, #0
18f40     13 15 02 F6 | 	mov	arg02, local01
18f44     00 16 06 F6 | 	mov	arg03, #0
18f48     0A 18 06 F6 | 	mov	arg04, #10
18f4c     E4 E6 B0 FD | 	call	#__system___basic_print_integer
18f50     00 12 06 F6 | 	mov	arg01, #0
18f54     0A 14 06 F6 | 	mov	arg02, #10
18f58     00 16 06 F6 | 	mov	arg03, #0
18f5c     38 E6 B0 FD | 	call	#__system___basic_print_char
18f60     00 12 06 F6 | 	mov	arg01, #0
18f64     34 36 B1 FD | 	call	#__system___getiolock_0602
18f68     FD 00 68 FC | 	wrlong	#0, result1
18f6c                 | LR__1984
18f6c                 | '   if t1.result_type=result_uint then print t1.result.uresult
18f6c     1D 2A 0E F2 | 	cmp	local03, #29 wz
18f70     40 00 90 5D |  if_ne	jmp	#LR__1985
18f74     00 12 06 F6 | 	mov	arg01, #0
18f78     20 36 B1 FD | 	call	#__system___getiolock_0602
18f7c     FD 12 02 F6 | 	mov	arg01, result1
18f80     74 D9 B0 FD | 	call	#__system___lockmem
18f84     00 12 06 F6 | 	mov	arg01, #0
18f88     13 15 02 F6 | 	mov	arg02, local01
18f8c     00 16 06 F6 | 	mov	arg03, #0
18f90     0A 18 06 F6 | 	mov	arg04, #10
18f94     DC E6 B0 FD | 	call	#__system___basic_print_unsigned
18f98     00 12 06 F6 | 	mov	arg01, #0
18f9c     0A 14 06 F6 | 	mov	arg02, #10
18fa0     00 16 06 F6 | 	mov	arg03, #0
18fa4     F0 E5 B0 FD | 	call	#__system___basic_print_char
18fa8     00 12 06 F6 | 	mov	arg01, #0
18fac     EC 35 B1 FD | 	call	#__system___getiolock_0602
18fb0     FD 00 68 FC | 	wrlong	#0, result1
18fb4                 | LR__1985
18fb4                 | '   if t1.result_type=result_float then print t1.result.fresult
18fb4     1E 2A 0E F2 | 	cmp	local03, #30 wz
18fb8     40 00 90 5D |  if_ne	jmp	#LR__1986
18fbc     00 12 06 F6 | 	mov	arg01, #0
18fc0     D8 35 B1 FD | 	call	#__system___getiolock_0602
18fc4     FD 12 02 F6 | 	mov	arg01, result1
18fc8     2C D9 B0 FD | 	call	#__system___lockmem
18fcc     00 12 06 F6 | 	mov	arg01, #0
18fd0     13 15 02 F6 | 	mov	arg02, local01
18fd4     00 16 06 F6 | 	mov	arg03, #0
18fd8     23 18 06 F6 | 	mov	arg04, #35
18fdc     AC 0D B1 FD | 	call	#__system___basic_print_float
18fe0     00 12 06 F6 | 	mov	arg01, #0
18fe4     0A 14 06 F6 | 	mov	arg02, #10
18fe8     00 16 06 F6 | 	mov	arg03, #0
18fec     A8 E5 B0 FD | 	call	#__system___basic_print_char
18ff0     00 12 06 F6 | 	mov	arg01, #0
18ff4     A4 35 B1 FD | 	call	#__system___getiolock_0602
18ff8     FD 00 68 FC | 	wrlong	#0, result1
18ffc                 | LR__1986
18ffc                 | '   if t1.result_type=result_string then print t1.result.sresult
18ffc     1F 2A 0E F2 | 	cmp	local03, #31 wz
19000     3C 00 90 5D |  if_ne	jmp	#LR__1987
19004     00 12 06 F6 | 	mov	arg01, #0
19008     90 35 B1 FD | 	call	#__system___getiolock_0602
1900c     FD 12 02 F6 | 	mov	arg01, result1
19010     E4 D8 B0 FD | 	call	#__system___lockmem
19014     00 12 06 F6 | 	mov	arg01, #0
19018     13 15 02 F6 | 	mov	arg02, local01
1901c     00 16 06 F6 | 	mov	arg03, #0
19020     CC E5 B0 FD | 	call	#__system___basic_print_string
19024     00 12 06 F6 | 	mov	arg01, #0
19028     0A 14 06 F6 | 	mov	arg02, #10
1902c     00 16 06 F6 | 	mov	arg03, #0
19030     64 E5 B0 FD | 	call	#__system___basic_print_char
19034     00 12 06 F6 | 	mov	arg01, #0
19038     60 35 B1 FD | 	call	#__system___getiolock_0602
1903c     FD 00 68 FC | 	wrlong	#0, result1
19040                 | LR__1987
19040                 | LR__1988
19040                 | ' if r=print_mod_empty then print
19040     20 2C 0E F2 | 	cmp	local04, #32 wz
19044     2C 00 90 5D |  if_ne	jmp	#LR__1989
19048     00 12 06 F6 | 	mov	arg01, #0
1904c     4C 35 B1 FD | 	call	#__system___getiolock_0602
19050     FD 12 02 F6 | 	mov	arg01, result1
19054     A0 D8 B0 FD | 	call	#__system___lockmem
19058     00 12 06 F6 | 	mov	arg01, #0
1905c     0A 14 06 F6 | 	mov	arg02, #10
19060     00 16 06 F6 | 	mov	arg03, #0
19064     30 E5 B0 FD | 	call	#__system___basic_print_char
19068     00 12 06 F6 | 	mov	arg01, #0
1906c     2C 35 B1 FD | 	call	#__system___getiolock_0602
19070     FD 00 68 FC | 	wrlong	#0, result1
19074                 | LR__1989
19074                 | LR__1990
19074     A7 F0 03 F6 | 	mov	ptra, fp
19078     B2 00 A0 FD | 	call	#popregs_
1907c                 | _do_print_ret
1907c     2D 00 64 FD | 	ret
19080                 | 
19080                 | ' 
19080                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
19080                 | ' 
19080                 | ' sub do_push
19080                 | _do_push
19080                 | ' if stackpointer<maxstack then 
19080     43 00 00 FF 
19084     58 E4 05 F1 | 	add	objptr, ##34392
19088     F2 00 02 FB | 	rdlong	_var01, objptr
1908c     43 00 00 FF 
19090     58 E4 85 F1 | 	sub	objptr, ##34392
19094     01 00 00 FF 
19098     00 00 56 F2 | 	cmps	_var01, ##512 wc
1909c     F8 00 90 3D |  if_ae	jmp	#LR__2000
190a0     4A 00 00 FF 
190a4     80 E4 05 F1 | 	add	objptr, ##38016
190a8     F2 02 02 FB | 	rdlong	_var02, objptr
190ac     01 05 02 F6 | 	mov	_var03, _var02
190b0     01 04 66 F0 | 	shl	_var03, #1
190b4     01 05 02 F1 | 	add	_var03, _var02
190b8     02 04 66 F0 | 	shl	_var03, #2
190bc     03 00 00 FF 
190c0     04 E4 85 F1 | 	sub	objptr, ##1540
190c4     F2 04 02 F1 | 	add	_var03, objptr
190c8     02 01 02 FB | 	rdlong	_var01, _var03
190cc     04 04 06 F1 | 	add	_var03, #4
190d0     02 07 02 FB | 	rdlong	_var04, _var03
190d4     01 05 02 F6 | 	mov	_var03, _var02
190d8     01 04 66 F0 | 	shl	_var03, #1
190dc     01 05 02 F1 | 	add	_var03, _var02
190e0     02 04 66 F0 | 	shl	_var03, #2
190e4     F2 04 02 F1 | 	add	_var03, objptr
190e8     08 04 06 F1 | 	add	_var03, #8
190ec     02 03 02 FB | 	rdlong	_var02, _var03
190f0     04 00 00 FF 
190f4     24 E4 85 F1 | 	sub	objptr, ##2084
190f8     F2 04 02 FB | 	rdlong	_var03, objptr
190fc     02 09 02 F6 | 	mov	_var05, _var03
19100     01 08 66 F0 | 	shl	_var05, #1
19104     02 09 02 F1 | 	add	_var05, _var03
19108     02 08 66 F0 | 	shl	_var05, #2
1910c     0C 00 00 FF 
19110     0C E4 85 F1 | 	sub	objptr, ##6156
19114     F2 08 02 F1 | 	add	_var05, objptr
19118     04 01 62 FC | 	wrlong	_var01, _var05
1911c     0C 00 00 FF 
19120     0C E4 05 F1 | 	add	objptr, ##6156
19124     F2 08 02 FB | 	rdlong	_var05, objptr
19128     04 05 02 F6 | 	mov	_var03, _var05
1912c     01 04 66 F0 | 	shl	_var03, #1
19130     04 05 02 F1 | 	add	_var03, _var05
19134     02 04 66 F0 | 	shl	_var03, #2
19138     0C 00 00 FF 
1913c     0C E4 85 F1 | 	sub	objptr, ##6156
19140     F2 04 02 F1 | 	add	_var03, objptr
19144     04 04 06 F1 | 	add	_var03, #4
19148     02 07 62 FC | 	wrlong	_var04, _var03
1914c     0C 00 00 FF 
19150     0C E4 05 F1 | 	add	objptr, ##6156
19154     F2 08 02 FB | 	rdlong	_var05, objptr
19158     04 07 02 F6 | 	mov	_var04, _var05
1915c     01 06 66 F0 | 	shl	_var04, #1
19160     04 07 02 F1 | 	add	_var04, _var05
19164     02 06 66 F0 | 	shl	_var04, #2
19168     0C 00 00 FF 
1916c     0C E4 85 F1 | 	sub	objptr, ##6156
19170     F2 06 02 F1 | 	add	_var04, objptr
19174     08 06 06 F1 | 	add	_var04, #8
19178     03 03 62 FC | 	wrlong	_var02, _var04
1917c     0C 00 00 FF 
19180     0C E4 05 F1 | 	add	objptr, ##6156
19184     F2 00 02 FB | 	rdlong	_var01, objptr
19188     01 00 06 F1 | 	add	_var01, #1
1918c     F2 00 62 FC | 	wrlong	_var01, objptr
19190     43 00 00 FF 
19194     58 E4 85 F1 | 	sub	objptr, ##34392
19198                 | LR__2000
19198                 | _do_push_ret
19198     2D 00 64 FD | 	ret
1919c                 | 
1919c                 | ' 
1919c                 | ' '-------------------- put
1919c                 | ' 
1919c                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
1919c                 | _do_put
1919c     03 4A 05 F6 | 	mov	COUNT_, #3
191a0     A8 00 A0 FD | 	call	#pushregs_
191a4     28 F0 07 F1 | 	add	ptra, #40
191a8     4A 00 00 FF 
191ac     80 E4 05 F1 | 	add	objptr, ##38016
191b0     F2 1A 02 FB | 	rdlong	arg05, objptr
191b4     0D 19 02 F6 | 	mov	arg04, arg05
191b8     01 18 66 F0 | 	shl	arg04, #1
191bc     0D 19 02 F1 | 	add	arg04, arg05
191c0     02 18 66 F0 | 	shl	arg04, #2
191c4     03 00 00 FF 
191c8     04 E4 85 F1 | 	sub	objptr, ##1540
191cc     F2 18 02 F1 | 	add	arg04, objptr
191d0     0C 1B 02 FB | 	rdlong	arg05, arg04
191d4     A7 1A 62 FC | 	wrlong	arg05, fp
191d8                 | ' 
191d8                 | ' numpar=compiledline(lineptr_e).result.uresult
191d8                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
191d8     04 1A 0E F2 | 	cmp	arg05, #4 wz
191dc     47 00 00 FF 
191e0     7C E4 85 F1 | 	sub	objptr, ##36476
191e4     48 00 90 5D |  if_ne	jmp	#LR__2010
191e8     7C 43 BF FD | 	call	#_pop
191ec     FF 1A 02 F6 | 	mov	arg05, result3
191f0     1C 4E 05 F1 | 	add	fp, #28
191f4     A7 FA 61 FC | 	wrlong	result1, fp
191f8     04 4E 05 F1 | 	add	fp, #4
191fc     A7 FC 61 FC | 	wrlong	result2, fp
19200     04 4E 05 F1 | 	add	fp, #4
19204     A7 1A 62 FC | 	wrlong	arg05, fp
19208     08 4E 85 F1 | 	sub	fp, #8
1920c     A7 12 02 F6 | 	mov	arg01, fp
19210     1C 4E 85 F1 | 	sub	fp, #28
19214     34 45 BF FD | 	call	#_converttoint
19218     52 00 00 FF 
1921c     0C E5 05 F1 | 	add	objptr, ##42252
19220     F2 FA 61 FC | 	wrlong	result1, objptr
19224     52 00 00 FF 
19228     0C E5 85 F1 | 	sub	objptr, ##42252
1922c     18 00 90 FD | 	jmp	#LR__2011
19230                 | LR__2010
19230     52 00 00 FF 
19234     0C E5 05 F1 | 	add	objptr, ##42252
19238     FF FF FF FF 
1923c     F2 FE 6B FC | 	wrlong	##-1, objptr
19240     52 00 00 FF 
19244     0C E5 85 F1 | 	sub	objptr, ##42252
19248                 | LR__2011
19248                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
19248     A7 1A 02 FB | 	rdlong	arg05, fp
1924c     03 1A 56 F2 | 	cmps	arg05, #3 wc
19250     40 00 90 CD |  if_b	jmp	#LR__2012
19254     10 43 BF FD | 	call	#_pop
19258     FF 1A 02 F6 | 	mov	arg05, result3
1925c     1C 4E 05 F1 | 	add	fp, #28
19260     A7 FA 61 FC | 	wrlong	result1, fp
19264     04 4E 05 F1 | 	add	fp, #4
19268     A7 FC 61 FC | 	wrlong	result2, fp
1926c     04 4E 05 F1 | 	add	fp, #4
19270     A7 1A 62 FC | 	wrlong	arg05, fp
19274     08 4E 85 F1 | 	sub	fp, #8
19278     A7 12 02 F6 | 	mov	arg01, fp
1927c     1C 4E 85 F1 | 	sub	fp, #28
19280     C8 44 BF FD | 	call	#_converttoint
19284     08 4E 05 F1 | 	add	fp, #8
19288     A7 FA 61 FC | 	wrlong	result1, fp
1928c     08 4E 85 F1 | 	sub	fp, #8
19290     0C 00 90 FD | 	jmp	#LR__2013
19294                 | LR__2012
19294     08 4E 05 F1 | 	add	fp, #8
19298     A7 02 68 FC | 	wrlong	#1, fp
1929c     08 4E 85 F1 | 	sub	fp, #8
192a0                 | LR__2013
192a0                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
192a0     A7 18 02 FB | 	rdlong	arg04, fp
192a4     02 18 56 F2 | 	cmps	arg04, #2 wc
192a8     3C 00 90 CD |  if_b	jmp	#LR__2014
192ac     B8 42 BF FD | 	call	#_pop
192b0     FF 18 02 F6 | 	mov	arg04, result3
192b4     1C 4E 05 F1 | 	add	fp, #28
192b8     A7 FA 61 FC | 	wrlong	result1, fp
192bc     04 4E 05 F1 | 	add	fp, #4
192c0     A7 FC 61 FC | 	wrlong	result2, fp
192c4     04 4E 05 F1 | 	add	fp, #4
192c8     A7 18 62 FC | 	wrlong	arg04, fp
192cc     08 4E 85 F1 | 	sub	fp, #8
192d0     A7 12 02 F6 | 	mov	arg01, fp
192d4     1C 4E 85 F1 | 	sub	fp, #28
192d8     70 44 BF FD | 	call	#_converttoint
192dc     0C 4E 05 F1 | 	add	fp, #12
192e0     A7 FA 61 FC | 	wrlong	result1, fp
192e4     0C 4E 85 F1 | 	sub	fp, #12
192e8                 | LR__2014
192e8     7C 42 BF FD | 	call	#_pop
192ec     FF 18 02 F6 | 	mov	arg04, result3
192f0     1C 4E 05 F1 | 	add	fp, #28
192f4     A7 FA 61 FC | 	wrlong	result1, fp
192f8     04 4E 05 F1 | 	add	fp, #4
192fc     A7 FC 61 FC | 	wrlong	result2, fp
19300     04 4E 05 F1 | 	add	fp, #4
19304     A7 18 62 FC | 	wrlong	arg04, fp
19308     08 4E 85 F1 | 	sub	fp, #8
1930c     A7 12 02 F6 | 	mov	arg01, fp
19310     1C 4E 85 F1 | 	sub	fp, #28
19314     34 44 BF FD | 	call	#_converttoint
19318     04 4E 05 F1 | 	add	fp, #4
1931c     A7 FA 61 FC | 	wrlong	result1, fp
19320     10 4E 05 F1 | 	add	fp, #16
19324     A7 26 02 FB | 	rdlong	local01, fp
19328     14 4E 85 F1 | 	sub	fp, #20
1932c     02 26 66 F0 | 	shl	local01, #2
19330     50 00 00 FF 
19334     C4 E4 05 F1 | 	add	objptr, ##41156
19338     F2 26 02 F1 | 	add	local01, objptr
1933c     13 01 68 FC | 	wrlong	#0, local01
19340                 | ' t1=pop() : channel=converttoint(t1)
19340                 | ' getres(j)=0
19340                 | ' if pos>=0 then
19340     02 00 00 FF 
19344     48 E4 05 F1 | 	add	objptr, ##1096
19348     F2 28 02 FB | 	rdlong	local02, objptr
1934c     52 00 00 FF 
19350     0C E5 85 F1 | 	sub	objptr, ##42252
19354     00 28 56 F2 | 	cmps	local02, #0 wc
19358     C0 01 90 CD |  if_b	jmp	#LR__2020
1935c     10 4E 05 F1 | 	add	fp, #16
19360     A7 00 68 FC | 	wrlong	#0, fp
19364     10 4E 85 F1 | 	sub	fp, #16
19368                 | '    i=0: do
19368                 | LR__2015
19368     14 4E 05 F1 | 	add	fp, #20
1936c     A7 00 68 FC | 	wrlong	#0, fp
19370     14 4E 85 F1 | 	sub	fp, #20
19374                 | '    j=0: do    
19374                 | LR__2016
19374                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19374     0C 4E 05 F1 | 	add	fp, #12
19378     A7 28 02 FB | 	rdlong	local02, fp
1937c     0C 4E 85 F1 | 	sub	fp, #12
19380     00 04 00 FF 
19384     00 28 56 F2 | 	cmps	local02, ##524288 wc
19388     4C 00 90 3D |  if_ae	jmp	#LR__2017
1938c     14 4E 05 F1 | 	add	fp, #20
19390     A7 28 02 FB | 	rdlong	local02, fp
19394     14 27 02 F6 | 	mov	local01, local02
19398     4E 00 00 FF 
1939c     B4 E4 05 F1 | 	add	objptr, ##40116
193a0     F2 26 02 F1 | 	add	local01, objptr
193a4     08 4E 85 F1 | 	sub	fp, #8
193a8     A7 12 02 FB | 	rdlong	arg01, fp
193ac     04 4E 05 F1 | 	add	fp, #4
193b0     A7 18 02 FB | 	rdlong	arg04, fp
193b4     0A 18 66 F0 | 	shl	arg04, #10
193b8     0C 13 02 F1 | 	add	arg01, arg04
193bc     10 4E 85 F1 | 	sub	fp, #16
193c0     14 13 02 F1 | 	add	arg01, local02
193c4     09 FB C1 FA | 	rdbyte	result1, arg01
193c8     4E 00 00 FF 
193cc     B4 E4 85 F1 | 	sub	objptr, ##40116
193d0     13 FB 41 FC | 	wrbyte	result1, local01
193d4     48 00 90 FD | 	jmp	#LR__2018
193d8                 | LR__2017
193d8     14 4E 05 F1 | 	add	fp, #20
193dc     A7 28 02 FB | 	rdlong	local02, fp
193e0     14 27 02 F6 | 	mov	local01, local02
193e4     4E 00 00 FF 
193e8     B4 E4 05 F1 | 	add	objptr, ##40116
193ec     F2 26 02 F1 | 	add	local01, objptr
193f0     08 4E 85 F1 | 	sub	fp, #8
193f4     A7 12 02 FB | 	rdlong	arg01, fp
193f8     04 4E 05 F1 | 	add	fp, #4
193fc     A7 18 02 FB | 	rdlong	arg04, fp
19400     0A 18 66 F0 | 	shl	arg04, #10
19404     0C 13 02 F1 | 	add	arg01, arg04
19408     10 4E 85 F1 | 	sub	fp, #16
1940c     14 13 02 F1 | 	add	arg01, local02
19410     4E 00 00 FF 
19414     B4 E4 85 F1 | 	sub	objptr, ##40116
19418     64 9D B0 FD | 	call	#_pspeek
1941c     13 FB 41 FC | 	wrbyte	result1, local01
19420                 | LR__2018
19420     14 4E 05 F1 | 	add	fp, #20
19424     A7 28 02 FB | 	rdlong	local02, fp
19428     01 28 06 F1 | 	add	local02, #1
1942c     A7 28 62 FC | 	wrlong	local02, fp
19430     14 4E 85 F1 | 	sub	fp, #20
19434     02 00 00 FF 
19438     00 28 56 F2 | 	cmps	local02, ##1024 wc
1943c     2C 00 90 3D |  if_ae	jmp	#LR__2019
19440     10 4E 05 F1 | 	add	fp, #16
19444     A7 26 02 FB | 	rdlong	local01, fp
19448     0A 26 66 F0 | 	shl	local01, #10
1944c     04 4E 05 F1 | 	add	fp, #4
19450     A7 28 02 FB | 	rdlong	local02, fp
19454     14 27 02 F1 | 	add	local01, local02
19458     0C 4E 85 F1 | 	sub	fp, #12
1945c     A7 28 02 FB | 	rdlong	local02, fp
19460     08 4E 85 F1 | 	sub	fp, #8
19464     14 27 5A F2 | 	cmps	local01, local02 wcz
19468     08 FF 9F ED |  if_be	jmp	#LR__2016
1946c                 | LR__2019
1946c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
1946c     04 4E 05 F1 | 	add	fp, #4
19470     A7 12 02 FB | 	rdlong	arg01, fp
19474     52 00 00 FF 
19478     0C E5 05 F1 | 	add	objptr, ##42252
1947c     F2 14 02 FB | 	rdlong	arg02, objptr
19480     01 14 06 F1 | 	add	arg02, #1
19484     04 00 00 FF 
19488     58 E4 85 F1 | 	sub	objptr, ##2136
1948c     F2 16 02 F6 | 	mov	arg03, objptr
19490     4E 00 00 FF 
19494     B4 E4 85 F1 | 	sub	objptr, ##40116
19498     04 4E 05 F1 | 	add	fp, #4
1949c     A7 18 02 FB | 	rdlong	arg04, fp
194a0     08 4E 85 F1 | 	sub	fp, #8
194a4     01 1A 06 F6 | 	mov	arg05, #1
194a8     54 E2 B0 FD | 	call	#__system___basic_put
194ac     18 4E 05 F1 | 	add	fp, #24
194b0     A7 FA 61 FC | 	wrlong	result1, fp
194b4     14 4E 85 F1 | 	sub	fp, #20
194b8     A7 26 02 FB | 	rdlong	local01, fp
194bc     02 26 66 F0 | 	shl	local01, #2
194c0     50 00 00 FF 
194c4     C4 E4 05 F1 | 	add	objptr, ##41156
194c8     F2 26 02 F1 | 	add	local01, objptr
194cc     13 FB 61 FC | 	wrlong	result1, local01
194d0                 | '    if 1024*i+j>amount then exit loop
194d0     0C 4E 05 F1 | 	add	fp, #12
194d4     A7 28 02 FB | 	rdlong	local02, fp
194d8     0A 28 66 F0 | 	shl	local02, #10
194dc     04 4E 05 F1 | 	add	fp, #4
194e0     A7 26 02 FB | 	rdlong	local01, fp
194e4     13 29 02 F1 | 	add	local02, local01
194e8     0C 4E 85 F1 | 	sub	fp, #12
194ec     A7 26 02 FB | 	rdlong	local01, fp
194f0     08 4E 85 F1 | 	sub	fp, #8
194f4     13 29 5A F2 | 	cmps	local02, local01 wcz
194f8     50 00 00 FF 
194fc     C4 E4 85 F1 | 	sub	objptr, ##41156
19500     CC 01 90 1D |  if_a	jmp	#LR__2027
19504     10 4E 05 F1 | 	add	fp, #16
19508     A7 28 02 FB | 	rdlong	local02, fp
1950c     01 28 06 F1 | 	add	local02, #1
19510     A7 28 62 FC | 	wrlong	local02, fp
19514     10 4E 85 F1 | 	sub	fp, #16
19518     4C FE 9F FD | 	jmp	#LR__2015
1951c                 | LR__2020
1951c     10 4E 05 F1 | 	add	fp, #16
19520     A7 00 68 FC | 	wrlong	#0, fp
19524     10 4E 85 F1 | 	sub	fp, #16
19528                 | '    i=0: do
19528                 | LR__2021
19528     14 4E 05 F1 | 	add	fp, #20
1952c     A7 00 68 FC | 	wrlong	#0, fp
19530     14 4E 85 F1 | 	sub	fp, #20
19534                 | '    j=0: do  
19534                 | LR__2022
19534                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19534     0C 4E 05 F1 | 	add	fp, #12
19538     A7 28 02 FB | 	rdlong	local02, fp
1953c     0C 4E 85 F1 | 	sub	fp, #12
19540     00 04 00 FF 
19544     00 28 56 F2 | 	cmps	local02, ##524288 wc
19548     4C 00 90 3D |  if_ae	jmp	#LR__2023
1954c     14 4E 05 F1 | 	add	fp, #20
19550     A7 28 02 FB | 	rdlong	local02, fp
19554     14 27 02 F6 | 	mov	local01, local02
19558     4E 00 00 FF 
1955c     B4 E4 05 F1 | 	add	objptr, ##40116
19560     F2 26 02 F1 | 	add	local01, objptr
19564     08 4E 85 F1 | 	sub	fp, #8
19568     A7 12 02 FB | 	rdlong	arg01, fp
1956c     04 4E 05 F1 | 	add	fp, #4
19570     A7 18 02 FB | 	rdlong	arg04, fp
19574     0A 18 66 F0 | 	shl	arg04, #10
19578     0C 13 02 F1 | 	add	arg01, arg04
1957c     10 4E 85 F1 | 	sub	fp, #16
19580     14 13 02 F1 | 	add	arg01, local02
19584     09 FB C1 FA | 	rdbyte	result1, arg01
19588     4E 00 00 FF 
1958c     B4 E4 85 F1 | 	sub	objptr, ##40116
19590     13 FB 41 FC | 	wrbyte	result1, local01
19594     48 00 90 FD | 	jmp	#LR__2024
19598                 | LR__2023
19598     14 4E 05 F1 | 	add	fp, #20
1959c     A7 28 02 FB | 	rdlong	local02, fp
195a0     14 27 02 F6 | 	mov	local01, local02
195a4     4E 00 00 FF 
195a8     B4 E4 05 F1 | 	add	objptr, ##40116
195ac     F2 26 02 F1 | 	add	local01, objptr
195b0     08 4E 85 F1 | 	sub	fp, #8
195b4     A7 12 02 FB | 	rdlong	arg01, fp
195b8     04 4E 05 F1 | 	add	fp, #4
195bc     A7 18 02 FB | 	rdlong	arg04, fp
195c0     0A 18 66 F0 | 	shl	arg04, #10
195c4     0C 13 02 F1 | 	add	arg01, arg04
195c8     10 4E 85 F1 | 	sub	fp, #16
195cc     14 13 02 F1 | 	add	arg01, local02
195d0     4E 00 00 FF 
195d4     B4 E4 85 F1 | 	sub	objptr, ##40116
195d8     A4 9B B0 FD | 	call	#_pspeek
195dc     13 FB 41 FC | 	wrbyte	result1, local01
195e0                 | LR__2024
195e0     14 4E 05 F1 | 	add	fp, #20
195e4     A7 28 02 FB | 	rdlong	local02, fp
195e8     01 28 06 F1 | 	add	local02, #1
195ec     A7 28 62 FC | 	wrlong	local02, fp
195f0     14 4E 85 F1 | 	sub	fp, #20
195f4     02 00 00 FF 
195f8     00 28 56 F2 | 	cmps	local02, ##1024 wc
195fc     2C 00 90 3D |  if_ae	jmp	#LR__2025
19600     10 4E 05 F1 | 	add	fp, #16
19604     A7 26 02 FB | 	rdlong	local01, fp
19608     0A 26 66 F0 | 	shl	local01, #10
1960c     04 4E 05 F1 | 	add	fp, #4
19610     A7 28 02 FB | 	rdlong	local02, fp
19614     14 27 02 F1 | 	add	local01, local02
19618     0C 4E 85 F1 | 	sub	fp, #12
1961c     A7 28 02 FB | 	rdlong	local02, fp
19620     08 4E 85 F1 | 	sub	fp, #8
19624     14 27 5A F2 | 	cmps	local01, local02 wcz
19628     08 FF 9F ED |  if_be	jmp	#LR__2022
1962c                 | LR__2025
1962c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1962c     04 4E 05 F1 | 	add	fp, #4
19630     A7 12 02 FB | 	rdlong	arg01, fp
19634     4E 00 00 FF 
19638     B4 E4 05 F1 | 	add	objptr, ##40116
1963c     F2 16 02 F6 | 	mov	arg03, objptr
19640     4E 00 00 FF 
19644     B4 E4 85 F1 | 	sub	objptr, ##40116
19648     04 4E 05 F1 | 	add	fp, #4
1964c     A7 18 02 FB | 	rdlong	arg04, fp
19650     08 4E 85 F1 | 	sub	fp, #8
19654     00 14 06 F6 | 	mov	arg02, #0
19658     01 1A 06 F6 | 	mov	arg05, #1
1965c     A0 E0 B0 FD | 	call	#__system___basic_put
19660     18 4E 05 F1 | 	add	fp, #24
19664     A7 FA 61 FC | 	wrlong	result1, fp
19668     14 4E 85 F1 | 	sub	fp, #20
1966c     A7 26 02 FB | 	rdlong	local01, fp
19670     02 26 66 F0 | 	shl	local01, #2
19674     50 00 00 FF 
19678     C4 E4 05 F1 | 	add	objptr, ##41156
1967c     F2 26 02 F1 | 	add	local01, objptr
19680     13 FB 61 FC | 	wrlong	result1, local01
19684                 | '    if 1024*i+j>amount then exit loop
19684     0C 4E 05 F1 | 	add	fp, #12
19688     A7 28 02 FB | 	rdlong	local02, fp
1968c     0A 28 66 F0 | 	shl	local02, #10
19690     04 4E 05 F1 | 	add	fp, #4
19694     A7 26 02 FB | 	rdlong	local01, fp
19698     13 29 02 F1 | 	add	local02, local01
1969c     0C 4E 85 F1 | 	sub	fp, #12
196a0     A7 2A 02 FB | 	rdlong	local03, fp
196a4     08 4E 85 F1 | 	sub	fp, #8
196a8     15 29 5A F2 | 	cmps	local02, local03 wcz
196ac     50 00 00 FF 
196b0     C4 E4 85 F1 | 	sub	objptr, ##41156
196b4     18 00 90 1D |  if_a	jmp	#LR__2026
196b8     10 4E 05 F1 | 	add	fp, #16
196bc     A7 28 02 FB | 	rdlong	local02, fp
196c0     01 28 06 F1 | 	add	local02, #1
196c4     A7 28 62 FC | 	wrlong	local02, fp
196c8     10 4E 85 F1 | 	sub	fp, #16
196cc     58 FE 9F FD | 	jmp	#LR__2021
196d0                 | LR__2026
196d0                 | LR__2027
196d0     A7 F0 03 F6 | 	mov	ptra, fp
196d4     B2 00 A0 FD | 	call	#popregs_
196d8                 | _do_put_ret
196d8     2D 00 64 FD | 	ret
196dc                 | 
196dc                 | ' 
196dc                 | ' '-------------------- rad
196dc                 | ' 
196dc                 | ' sub do_rad
196dc                 | _do_rad
196dc     52 00 00 FF 
196e0     A8 E4 05 F1 | 	add	objptr, ##42152
196e4     00 C0 9F FF 
196e8     F2 00 68 FC | 	wrlong	##1065353216, objptr
196ec     04 E4 05 F1 | 	add	objptr, #4
196f0     00 C0 9F FF 
196f4     F2 00 68 FC | 	wrlong	##1065353216, objptr
196f8     52 00 00 FF 
196fc     AC E4 85 F1 | 	sub	objptr, ##42156
19700                 | _do_rad_ret
19700     2D 00 64 FD | 	ret
19704                 | 
19704                 | ' 
19704                 | ' '-------------------- rdpin
19704                 | ' 
19704                 | ' sub do_rdpin
19704                 | _do_rdpin
19704     00 4A 05 F6 | 	mov	COUNT_, #0
19708     A8 00 A0 FD | 	call	#pushregs_
1970c     0C F0 07 F1 | 	add	ptra, #12
19710     54 3E BF FD | 	call	#_pop
19714     A7 FA 61 FC | 	wrlong	result1, fp
19718     04 4E 05 F1 | 	add	fp, #4
1971c     A7 FC 61 FC | 	wrlong	result2, fp
19720     04 4E 05 F1 | 	add	fp, #4
19724     A7 FE 61 FC | 	wrlong	result3, fp
19728     08 4E 85 F1 | 	sub	fp, #8
1972c     A7 12 02 F6 | 	mov	arg01, fp
19730     18 40 BF FD | 	call	#_converttoint
19734     FD FA 89 FA | 	rdpin	result1, result1
19738     52 00 00 FF 
1973c     10 E5 05 F1 | 	add	objptr, ##42256
19740     F2 FA 61 FC | 	wrlong	result1, objptr
19744     52 00 00 FF 
19748     10 E5 85 F1 | 	sub	objptr, ##42256
1974c     08 4E 05 F1 | 	add	fp, #8
19750     A7 3A 68 FC | 	wrlong	#29, fp
19754     08 4E 85 F1 | 	sub	fp, #8
19758     A7 08 68 FC | 	wrlong	#4, fp
1975c     A7 12 02 F6 | 	mov	arg01, fp
19760     9C 3E BF FD | 	call	#_push
19764     A7 F0 03 F6 | 	mov	ptra, fp
19768     B2 00 A0 FD | 	call	#popregs_
1976c                 | _do_rdpin_ret
1976c     2D 00 64 FD | 	ret
19770                 | 
19770                 | ' 
19770                 | ' ' ----------------  read
19770                 | ' 
19770                 | ' function read_next_line() as string
19770                 | _read_next_line
19770     07 4A 05 F6 | 	mov	COUNT_, #7
19774     A8 00 A0 FD | 	call	#pushregs_
19778                 | ' if dataptr=$7FFFFFFF then return("")
19778     50 00 00 FF 
1977c     2C E5 05 F1 | 	add	objptr, ##41260
19780     F2 26 02 FB | 	rdlong	local01, objptr
19784     50 00 00 FF 
19788     2C E5 85 F1 | 	sub	objptr, ##41260
1978c     FF FF 3F FF 
19790     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19794     B7 01 00 AF 
19798     50 FB 05 A6 |  if_e	mov	result1, ##@LR__5944
1979c     BC 01 90 AD |  if_e	jmp	#LR__2037
197a0                 | ' do
197a0                 | LR__2030
197a0     50 00 00 FF 
197a4     08 E5 05 F1 | 	add	objptr, ##41224
197a8     F2 12 02 F6 | 	mov	arg01, objptr
197ac     24 E4 05 F1 | 	add	objptr, #36
197b0     F2 14 02 FB | 	rdlong	arg02, objptr
197b4     24 16 06 F6 | 	mov	arg03, #36
197b8     45 00 00 FF 
197bc     60 E4 85 F1 | 	sub	objptr, ##35424
197c0     AC C4 B0 FD | 	call	#_psram_spin2_read1
197c4                 | '  ' print dataptr
197c4                 | '   psram.read1(varptr(dataheader),dataptr,36) 
197c4                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
197c4     45 00 00 FF 
197c8     3C E4 05 F1 | 	add	objptr, ##35388
197cc     F2 26 02 FB | 	rdlong	local01, objptr
197d0     50 00 00 FF 
197d4     08 E5 85 F1 | 	sub	objptr, ##41224
197d8     FF FF 7F FF 
197dc     FF 27 0E F2 | 	cmp	local01, ##-1 wz
197e0     50 00 00 5F 
197e4     1C E5 05 51 |  if_ne	add	objptr, ##41244
197e8     F2 26 02 5B |  if_ne	rdlong	local01, objptr
197ec     10 E4 05 51 |  if_ne	add	objptr, #16
197f0     F2 26 62 5C |  if_ne	wrlong	local01, objptr
197f4     50 00 00 5F 
197f8     2C E5 85 51 |  if_ne	sub	objptr, ##41260
197fc     50 00 00 FF 
19800     1C E5 05 F1 | 	add	objptr, ##41244
19804     F2 26 02 FB | 	rdlong	local01, objptr
19808     50 00 00 FF 
1980c     1C E5 85 F1 | 	sub	objptr, ##41244
19810     FF FF 3F FF 
19814     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19818     50 00 00 5F 
1981c     08 E5 05 51 |  if_ne	add	objptr, ##41224
19820     F2 28 02 5B |  if_ne	rdlong	local02, objptr
19824     50 00 00 5F 
19828     08 E5 85 51 |  if_ne	sub	objptr, ##41224
1982c     FF FF 7F 5F 
19830     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
19834     50 00 00 5F 
19838     28 E5 05 51 |  if_ne	add	objptr, ##41256
1983c     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
19840     50 00 00 5F 
19844     28 E5 85 51 |  if_ne	sub	objptr, ##41256
19848     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
1984c     50 FF 9F 5D |  if_ne	jmp	#LR__2030
19850                 | ' if dataheader(8)=token_data then 
19850     50 00 00 FF 
19854     28 E5 05 F1 | 	add	objptr, ##41256
19858     F2 26 02 FB | 	rdlong	local01, objptr
1985c     50 00 00 FF 
19860     28 E5 85 F1 | 	sub	objptr, ##41256
19864     B7 26 0E F2 | 	cmp	local01, #183 wz
19868     E0 00 90 5D |  if_ne	jmp	#LR__2035
1986c     50 00 00 FF 
19870     10 E5 05 F1 | 	add	objptr, ##41232
19874     F2 26 02 FB | 	rdlong	local01, objptr
19878     01 00 00 FF 
1987c     E0 E5 05 F1 | 	add	objptr, ##992
19880     F2 26 62 FC | 	wrlong	local01, objptr
19884     01 00 00 FF 
19888     DC E5 85 F1 | 	sub	objptr, ##988
1988c     F2 2C 02 FB | 	rdlong	local04, objptr
19890     01 00 00 FF 
19894     D4 E5 05 F1 | 	add	objptr, ##980
19898     F2 2C 62 FC | 	wrlong	local04, objptr
1989c                 | '  'print "data found at line "; dataheader(0)
1989c                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
1989c     00 2E 06 F6 | 	mov	local05, #0
198a0     52 00 00 FF 
198a4     E8 E4 85 F1 | 	sub	objptr, ##42216
198a8                 | LR__2031
198a8     16 2F 52 F2 | 	cmps	local05, local04 wc
198ac     3C 00 90 3D |  if_ae	jmp	#LR__2032
198b0     52 00 00 FF 
198b4     F0 E4 05 F1 | 	add	objptr, ##42224
198b8     F2 12 02 FB | 	rdlong	arg01, objptr
198bc     52 00 00 FF 
198c0     F0 E4 85 F1 | 	sub	objptr, ##42224
198c4     17 13 02 F1 | 	add	arg01, local05
198c8     B4 98 B0 FD | 	call	#_pspeek
198cc     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
198d0     68 F2 B0 FD | 	call	#__system__Chr_S
198d4     FD 14 02 F6 | 	mov	arg02, result1
198d8     18 13 02 F6 | 	mov	arg01, local06
198dc     74 D0 B0 FD | 	call	#__system___string_concat
198e0     FD 30 02 F6 | 	mov	local06, result1
198e4     01 2E 06 F1 | 	add	local05, #1
198e8     BC FF 9F FD | 	jmp	#LR__2031
198ec                 | LR__2032
198ec     B7 01 00 FF 
198f0     51 17 06 F6 | 	mov	arg03, ##@LR__5945
198f4     01 12 06 F6 | 	mov	arg01, #1
198f8     18 15 02 F6 | 	mov	arg02, local06
198fc     C0 F5 B0 FD | 	call	#__system__Instr
19900     FD 2E 02 F6 | 	mov	local05, result1
19904     18 13 02 F6 | 	mov	arg01, local06
19908     09 33 02 F6 | 	mov	local07, arg01
1990c     97 06 48 FB | 	callpa	#(@LR__2034-@LR__2033)>>2,fcache_load_ptr_
19910                 | LR__2033
19910     19 FB C9 FA | 	rdbyte	result1, local07 wz
19914     01 32 06 51 |  if_ne	add	local07, #1
19918     F4 FF 9F 5D |  if_ne	jmp	#LR__2033
1991c                 | LR__2034
1991c     09 33 82 F1 | 	sub	local07, arg01
19920     19 15 02 F6 | 	mov	arg02, local07
19924     17 15 82 F1 | 	sub	arg02, local05
19928     04 14 86 F1 | 	sub	arg02, #4
1992c     18 13 02 F6 | 	mov	arg01, local06
19930     CC F0 B0 FD | 	call	#__system__Right_S
19934     FD 12 02 F6 | 	mov	arg01, result1
19938     CC F4 B0 FD | 	call	#__system__RTrim_S
1993c     FD 12 02 F6 | 	mov	arg01, result1
19940     04 F4 B0 FD | 	call	#__system__LTrim_S
19944     FD 30 02 F6 | 	mov	local06, result1
19948     0C 00 90 FD | 	jmp	#LR__2036
1994c                 | LR__2035
1994c                 | '   return ("") 'todo proper err
1994c     B7 01 00 FF 
19950     56 FB 05 F6 | 	mov	result1, ##@LR__5946
19954     04 00 90 FD | 	jmp	#LR__2037
19958                 | LR__2036
19958                 | ' return readline
19958     18 FB 01 F6 | 	mov	result1, local06
1995c                 | LR__2037
1995c     A7 F0 03 F6 | 	mov	ptra, fp
19960     B2 00 A0 FD | 	call	#popregs_
19964                 | _read_next_line_ret
19964     2D 00 64 FD | 	ret
19968                 | 
19968                 | ' 
19968                 | ' sub do_read
19968                 | _do_read
19968     11 4A 05 F6 | 	mov	COUNT_, #17
1996c     A8 00 A0 FD | 	call	#pushregs_
19970     58 F1 07 F1 | 	add	ptra, #344
19974     4A 00 00 FF 
19978     80 E4 05 F1 | 	add	objptr, ##38016
1997c     F2 FE 01 FB | 	rdlong	result3, objptr
19980     FF FC 01 F6 | 	mov	result2, result3
19984     01 FC 65 F0 | 	shl	result2, #1
19988     FF FC 01 F1 | 	add	result2, result3
1998c     02 FC 65 F0 | 	shl	result2, #2
19990     03 00 00 FF 
19994     04 E4 85 F1 | 	sub	objptr, ##1540
19998     F2 FC 01 F1 | 	add	result2, objptr
1999c     FE FC 01 FB | 	rdlong	result2, result2
199a0     08 4E 05 F1 | 	add	fp, #8
199a4     A7 FC 61 FC | 	wrlong	result2, fp
199a8                 | ' 
199a8                 | ' 
199a8                 | ' numpar=compiledline(lineptr_e).result.uresult
199a8                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
199a8     08 4E 85 F1 | 	sub	fp, #8
199ac     01 FC 15 F2 | 	cmp	result2, #1 wc
199b0     47 00 00 FF 
199b4     7C E4 85 F1 | 	sub	objptr, ##36476
199b8     14 00 90 CD |  if_b	jmp	#LR__2040
199bc     08 4E 05 F1 | 	add	fp, #8
199c0     A7 FC 01 FB | 	rdlong	result2, fp
199c4     08 4E 85 F1 | 	sub	fp, #8
199c8     41 FC 15 F2 | 	cmp	result2, #65 wc
199cc     50 00 90 CD |  if_b	jmp	#LR__2041
199d0                 | LR__2040
199d0     00 12 06 F6 | 	mov	arg01, #0
199d4     C4 2B B1 FD | 	call	#__system___getiolock_0602
199d8     FD 12 02 F6 | 	mov	arg01, result1
199dc     18 CF B0 FD | 	call	#__system___lockmem
199e0     B7 01 00 FF 
199e4     57 15 06 F6 | 	mov	arg02, ##@LR__5947
199e8     00 12 06 F6 | 	mov	arg01, #0
199ec     00 16 06 F6 | 	mov	arg03, #0
199f0     FC DB B0 FD | 	call	#__system___basic_print_string
199f4     00 12 06 F6 | 	mov	arg01, #0
199f8     A0 2B B1 FD | 	call	#__system___getiolock_0602
199fc     FD 00 68 FC | 	wrlong	#0, result1
19a00     50 00 00 FF 
19a04     F0 E4 05 F1 | 	add	objptr, ##41200
19a08     F2 14 02 FB | 	rdlong	arg02, objptr
19a0c     50 00 00 FF 
19a10     F0 E4 85 F1 | 	sub	objptr, ##41200
19a14     27 12 06 F6 | 	mov	arg01, #39
19a18     EC 94 B0 FD | 	call	#_printerror
19a1c     D0 0C 90 FD | 	jmp	#LR__2091
19a20                 | LR__2041
19a20     08 4E 05 F1 | 	add	fp, #8
19a24     A7 16 02 FB | 	rdlong	arg03, fp
19a28     01 16 86 F1 | 	sub	arg03, #1
19a2c     28 4F 05 F1 | 	add	fp, #296
19a30     A7 16 62 FC | 	wrlong	arg03, fp
19a34     30 4F 85 F1 | 	sub	fp, #304
19a38                 | ' i=numpar-1
19a38                 | ' if readline="" then readline=read_next_line() ': print readline
19a38     52 00 00 FF 
19a3c     DC E4 05 F1 | 	add	objptr, ##42204
19a40     F2 12 02 FB | 	rdlong	arg01, objptr
19a44     52 00 00 FF 
19a48     DC E4 85 F1 | 	sub	objptr, ##42204
19a4c     B7 01 00 FF 
19a50     61 15 06 F6 | 	mov	arg02, ##@LR__5948
19a54     C8 CE B0 FD | 	call	#__system___string_cmp
19a58     00 FA 0D F2 | 	cmp	result1, #0 wz
19a5c     18 00 90 5D |  if_ne	jmp	#LR__2042
19a60     0C FD BF FD | 	call	#_read_next_line
19a64     52 00 00 FF 
19a68     DC E4 05 F1 | 	add	objptr, ##42204
19a6c     F2 FA 61 FC | 	wrlong	result1, objptr
19a70     52 00 00 FF 
19a74     DC E4 85 F1 | 	sub	objptr, ##42204
19a78                 | LR__2042
19a78                 | ' if readline="" then printerror(55,runheader(0)) :return
19a78     52 00 00 FF 
19a7c     DC E4 05 F1 | 	add	objptr, ##42204
19a80     F2 12 02 FB | 	rdlong	arg01, objptr
19a84     52 00 00 FF 
19a88     DC E4 85 F1 | 	sub	objptr, ##42204
19a8c     B7 01 00 FF 
19a90     62 15 06 F6 | 	mov	arg02, ##@LR__5949
19a94     88 CE B0 FD | 	call	#__system___string_cmp
19a98     00 FA 0D F2 | 	cmp	result1, #0 wz
19a9c     20 00 90 5D |  if_ne	jmp	#LR__2043
19aa0     50 00 00 FF 
19aa4     F0 E4 05 F1 | 	add	objptr, ##41200
19aa8     F2 14 02 FB | 	rdlong	arg02, objptr
19aac     50 00 00 FF 
19ab0     F0 E4 85 F1 | 	sub	objptr, ##41200
19ab4     37 12 06 F6 | 	mov	arg01, #55
19ab8     4C 94 B0 FD | 	call	#_printerror
19abc     30 0C 90 FD | 	jmp	#LR__2091
19ac0                 | LR__2043
19ac0     34 4F 05 F1 | 	add	fp, #308
19ac4     A7 00 68 FC | 	wrlong	#0, fp
19ac8     2C 4F 85 F1 | 	sub	fp, #300
19acc     A7 26 02 FB | 	rdlong	local01, fp
19ad0     01 26 86 F1 | 	sub	local01, #1
19ad4     28 4F 05 F1 | 	add	fp, #296
19ad8     A7 26 62 FC | 	wrlong	local01, fp
19adc     30 4F 85 F1 | 	sub	fp, #304
19ae0                 | ' j=0
19ae0                 | ' i=numpar-1
19ae0                 | ' do
19ae0                 | LR__2044
19ae0                 | '   do
19ae0                 | LR__2045
19ae0     52 00 00 FF 
19ae4     DC E4 05 F1 | 	add	objptr, ##42204
19ae8     F2 14 02 FB | 	rdlong	arg02, objptr
19aec     52 00 00 FF 
19af0     DC E4 85 F1 | 	sub	objptr, ##42204
19af4     B7 01 00 FF 
19af8     63 17 06 F6 | 	mov	arg03, ##@LR__5950
19afc     01 12 06 F6 | 	mov	arg01, #1
19b00     BC F3 B0 FD | 	call	#__system__Instr
19b04     0C 4E 05 F1 | 	add	fp, #12
19b08     A7 FA 61 FC | 	wrlong	result1, fp
19b0c                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
19b0c     0C 4E 85 F1 | 	sub	fp, #12
19b10     01 FA 15 F2 | 	cmp	result1, #1 wc
19b14     3C 00 90 CD |  if_b	jmp	#LR__2046
19b18     52 00 00 FF 
19b1c     DC E4 05 F1 | 	add	objptr, ##42204
19b20     F2 12 02 FB | 	rdlong	arg01, objptr
19b24     52 00 00 FF 
19b28     DC E4 85 F1 | 	sub	objptr, ##42204
19b2c     0C 4E 05 F1 | 	add	fp, #12
19b30     A7 14 02 FB | 	rdlong	arg02, fp
19b34     0C 4E 85 F1 | 	sub	fp, #12
19b38     01 14 86 F1 | 	sub	arg02, #1
19b3c     38 EE B0 FD | 	call	#__system__Left_S
19b40     52 00 00 FF 
19b44     DC E4 05 F1 | 	add	objptr, ##42204
19b48     F2 FA 61 FC | 	wrlong	result1, objptr
19b4c     52 00 00 FF 
19b50     DC E4 85 F1 | 	sub	objptr, ##42204
19b54                 | LR__2046
19b54     52 00 00 FF 
19b58     DC E4 05 F1 | 	add	objptr, ##42204
19b5c     F2 14 02 FB | 	rdlong	arg02, objptr
19b60     52 00 00 FF 
19b64     DC E4 85 F1 | 	sub	objptr, ##42204
19b68     B7 01 00 FF 
19b6c     65 17 06 F6 | 	mov	arg03, ##@LR__5951
19b70     01 12 06 F6 | 	mov	arg01, #1
19b74     48 F3 B0 FD | 	call	#__system__Instr
19b78     0C 4E 05 F1 | 	add	fp, #12
19b7c     A7 FA 61 FC | 	wrlong	result1, fp
19b80                 | '     comma=instr(1,readline,",")  
19b80                 | '       if comma>0  then 
19b80     0C 4E 85 F1 | 	sub	fp, #12
19b84     01 FA 15 F2 | 	cmp	result1, #1 wc
19b88     98 00 90 CD |  if_b	jmp	#LR__2049
19b8c     52 00 00 FF 
19b90     DC E4 05 F1 | 	add	objptr, ##42204
19b94     F2 12 02 FB | 	rdlong	arg01, objptr
19b98     52 00 00 FF 
19b9c     DC E4 85 F1 | 	sub	objptr, ##42204
19ba0     0C 4E 05 F1 | 	add	fp, #12
19ba4     A7 14 02 FB | 	rdlong	arg02, fp
19ba8     0C 4E 85 F1 | 	sub	fp, #12
19bac     01 14 86 F1 | 	sub	arg02, #1
19bb0     C4 ED B0 FD | 	call	#__system__Left_S
19bb4     04 4E 05 F1 | 	add	fp, #4
19bb8     A7 FA 61 FC | 	wrlong	result1, fp
19bbc     04 4E 85 F1 | 	sub	fp, #4
19bc0     52 00 00 FF 
19bc4     DC E4 05 F1 | 	add	objptr, ##42204
19bc8     F2 12 02 FB | 	rdlong	arg01, objptr
19bcc     09 27 02 F6 | 	mov	local01, arg01
19bd0     52 00 00 FF 
19bd4     DC E4 85 F1 | 	sub	objptr, ##42204
19bd8     09 29 02 F6 | 	mov	local02, arg01
19bdc     97 06 48 FB | 	callpa	#(@LR__2048-@LR__2047)>>2,fcache_load_ptr_
19be0                 | LR__2047
19be0     14 FB C9 FA | 	rdbyte	result1, local02 wz
19be4     01 28 06 51 |  if_ne	add	local02, #1
19be8     F4 FF 9F 5D |  if_ne	jmp	#LR__2047
19bec                 | LR__2048
19bec     09 29 82 F1 | 	sub	local02, arg01
19bf0     14 15 02 F6 | 	mov	arg02, local02
19bf4     0C 4E 05 F1 | 	add	fp, #12
19bf8     A7 16 02 FB | 	rdlong	arg03, fp
19bfc     0C 4E 85 F1 | 	sub	fp, #12
19c00     0B 15 82 F1 | 	sub	arg02, arg03
19c04     13 13 02 F6 | 	mov	arg01, local01
19c08     F4 ED B0 FD | 	call	#__system__Right_S
19c0c     52 00 00 FF 
19c10     DC E4 05 F1 | 	add	objptr, ##42204
19c14     F2 FA 61 FC | 	wrlong	result1, objptr
19c18     52 00 00 FF 
19c1c     DC E4 85 F1 | 	sub	objptr, ##42204
19c20     48 00 90 FD | 	jmp	#LR__2050
19c24                 | LR__2049
19c24     52 00 00 FF 
19c28     DC E4 05 F1 | 	add	objptr, ##42204
19c2c     F2 12 02 FB | 	rdlong	arg01, objptr
19c30     52 00 00 FF 
19c34     DC E4 85 F1 | 	sub	objptr, ##42204
19c38     CC F1 B0 FD | 	call	#__system__RTrim_S
19c3c     FD 12 02 F6 | 	mov	arg01, result1
19c40     04 F1 B0 FD | 	call	#__system__LTrim_S
19c44     04 4E 05 F1 | 	add	fp, #4
19c48     A7 FA 61 FC | 	wrlong	result1, fp
19c4c     04 4E 85 F1 | 	sub	fp, #4
19c50     B7 01 00 FF 
19c54     67 27 06 F6 | 	mov	local01, ##@LR__5952
19c58     52 00 00 FF 
19c5c     DC E4 05 F1 | 	add	objptr, ##42204
19c60     F2 26 62 FC | 	wrlong	local01, objptr
19c64     52 00 00 FF 
19c68     DC E4 85 F1 | 	sub	objptr, ##42204
19c6c                 | LR__2050
19c6c                 | '      
19c6c                 | '      if part$<>"" then j=j+1
19c6c     04 4E 05 F1 | 	add	fp, #4
19c70     A7 12 02 FB | 	rdlong	arg01, fp
19c74     04 4E 85 F1 | 	sub	fp, #4
19c78     B7 01 00 FF 
19c7c     68 15 06 F6 | 	mov	arg02, ##@LR__5953
19c80     9C CC B0 FD | 	call	#__system___string_cmp
19c84     00 FA 0D F2 | 	cmp	result1, #0 wz
19c88     34 4F 05 51 |  if_ne	add	fp, #308
19c8c     A7 26 02 5B |  if_ne	rdlong	local01, fp
19c90     01 26 06 51 |  if_ne	add	local01, #1
19c94     A7 26 62 5C |  if_ne	wrlong	local01, fp
19c98     34 4F 85 51 |  if_ne	sub	fp, #308
19c9c     30 4F 05 F1 | 	add	fp, #304
19ca0     A7 26 02 FB | 	rdlong	local01, fp
19ca4     02 26 66 F0 | 	shl	local01, #2
19ca8     04 4F 85 F1 | 	sub	fp, #260
19cac     A7 26 02 F1 | 	add	local01, fp
19cb0     28 4E 85 F1 | 	sub	fp, #40
19cb4     A7 FA 01 FB | 	rdlong	result1, fp
19cb8     13 FB 61 FC | 	wrlong	result1, local01
19cbc     2C 4F 05 F1 | 	add	fp, #300
19cc0     A7 26 02 FB | 	rdlong	local01, fp
19cc4     01 26 86 F1 | 	sub	local01, #1
19cc8     A7 26 62 FC | 	wrlong	local01, fp
19ccc     30 4F 85 F1 | 	sub	fp, #304
19cd0                 | '      args(i)=part$  
19cd0                 | '      i=i-1
19cd0                 | '     if readline="" then readline=read_next_line() 
19cd0     52 00 00 FF 
19cd4     DC E4 05 F1 | 	add	objptr, ##42204
19cd8     F2 12 02 FB | 	rdlong	arg01, objptr
19cdc     52 00 00 FF 
19ce0     DC E4 85 F1 | 	sub	objptr, ##42204
19ce4     B7 01 00 FF 
19ce8     69 15 06 F6 | 	mov	arg02, ##@LR__5954
19cec     30 CC B0 FD | 	call	#__system___string_cmp
19cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
19cf4     18 00 90 5D |  if_ne	jmp	#LR__2051
19cf8     74 FA BF FD | 	call	#_read_next_line
19cfc     52 00 00 FF 
19d00     DC E4 05 F1 | 	add	objptr, ##42204
19d04     F2 FA 61 FC | 	wrlong	result1, objptr
19d08     52 00 00 FF 
19d0c     DC E4 85 F1 | 	sub	objptr, ##42204
19d10                 | LR__2051
19d10     30 4F 05 F1 | 	add	fp, #304
19d14     A7 26 02 FB | 	rdlong	local01, fp
19d18     30 4F 85 F1 | 	sub	fp, #304
19d1c     00 26 56 F2 | 	cmps	local01, #0 wc
19d20     28 00 90 CD |  if_b	jmp	#LR__2052
19d24     52 00 00 FF 
19d28     DC E4 05 F1 | 	add	objptr, ##42204
19d2c     F2 12 02 FB | 	rdlong	arg01, objptr
19d30     52 00 00 FF 
19d34     DC E4 85 F1 | 	sub	objptr, ##42204
19d38     B7 01 00 FF 
19d3c     6A 15 06 F6 | 	mov	arg02, ##@LR__5955
19d40     DC CB B0 FD | 	call	#__system___string_cmp
19d44     00 FA 0D F2 | 	cmp	result1, #0 wz
19d48     94 FD 9F 5D |  if_ne	jmp	#LR__2045
19d4c                 | LR__2052
19d4c     30 4F 05 F1 | 	add	fp, #304
19d50     A7 26 02 FB | 	rdlong	local01, fp
19d54     30 4F 85 F1 | 	sub	fp, #304
19d58     00 26 56 F2 | 	cmps	local01, #0 wc
19d5c     80 FD 9F 3D |  if_ae	jmp	#LR__2044
19d60                 | ' if j<numpar then printerror(55,runheader(0))
19d60     34 4F 05 F1 | 	add	fp, #308
19d64     A7 26 02 FB | 	rdlong	local01, fp
19d68     2C 4F 85 F1 | 	sub	fp, #300
19d6c     A7 16 02 FB | 	rdlong	arg03, fp
19d70     08 4E 85 F1 | 	sub	fp, #8
19d74     0B 27 52 F2 | 	cmps	local01, arg03 wc
19d78     50 00 00 CF 
19d7c     F0 E4 05 C1 |  if_b	add	objptr, ##41200
19d80     F2 14 02 CB |  if_b	rdlong	arg02, objptr
19d84     50 00 00 CF 
19d88     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
19d8c     37 12 06 C6 |  if_b	mov	arg01, #55
19d90     74 91 B0 CD |  if_b	call	#_printerror
19d94                 | ' 
19d94                 | ' for i=0 to numpar-1
19d94     30 4F 05 F1 | 	add	fp, #304
19d98     A7 00 68 FC | 	wrlong	#0, fp
19d9c     28 4F 85 F1 | 	sub	fp, #296
19da0     A7 2A 02 FB | 	rdlong	local03, fp
19da4     08 4E 85 F1 | 	sub	fp, #8
19da8                 | LR__2053
19da8     30 4F 05 F1 | 	add	fp, #304
19dac     A7 2C 02 FB | 	rdlong	local04, fp
19db0     30 4F 85 F1 | 	sub	fp, #304
19db4     16 27 02 F6 | 	mov	local01, local04
19db8     15 27 52 F2 | 	cmps	local01, local03 wc
19dbc     30 09 90 3D |  if_ae	jmp	#LR__2090
19dc0                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
19dc0     30 4F 05 F1 | 	add	fp, #304
19dc4     A7 16 02 FB | 	rdlong	arg03, fp
19dc8     02 16 66 F0 | 	shl	arg03, #2
19dcc     04 4F 85 F1 | 	sub	fp, #260
19dd0     A7 16 02 F1 | 	add	arg03, fp
19dd4     0B 13 02 FB | 	rdlong	arg01, arg03
19dd8     2C 4E 85 F1 | 	sub	fp, #44
19ddc     0C CA BE FD | 	call	#_isnum
19de0     FD 2E 02 F6 | 	mov	local05, result1
19de4     30 4F 05 F1 | 	add	fp, #304
19de8     A7 16 02 FB | 	rdlong	arg03, fp
19dec     02 16 66 F0 | 	shl	arg03, #2
19df0     04 4F 85 F1 | 	sub	fp, #260
19df4     A7 30 02 F6 | 	mov	local06, fp
19df8     A7 16 02 F1 | 	add	arg03, fp
19dfc     0B 13 02 FB | 	rdlong	arg01, arg03
19e00     2C 4E 85 F1 | 	sub	fp, #44
19e04     D0 CD BE FD | 	call	#_isint
19e08     FD 2E 2A F5 | 	andn	local05, result1 wz
19e0c     52 00 00 5F 
19e10     10 E5 05 51 |  if_ne	add	objptr, ##42256
19e14     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
19e18     52 00 00 5F 
19e1c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19e20                 | '   if isint(args(i)) then r=result_int 
19e20     30 4F 05 F1 | 	add	fp, #304
19e24     A7 2E 02 FB | 	rdlong	local05, fp
19e28     02 2E 66 F0 | 	shl	local05, #2
19e2c     04 4F 85 F1 | 	sub	fp, #260
19e30     A7 2E 02 F1 | 	add	local05, fp
19e34     17 13 02 FB | 	rdlong	arg01, local05
19e38     2C 4E 85 F1 | 	sub	fp, #44
19e3c     98 CD BE FD | 	call	#_isint
19e40     00 FA 0D F2 | 	cmp	result1, #0 wz
19e44     52 00 00 5F 
19e48     10 E5 05 51 |  if_ne	add	objptr, ##42256
19e4c     F2 38 68 5C |  if_ne	wrlong	#28, objptr
19e50     52 00 00 5F 
19e54     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19e58                 | '   if isdec(args(i)) then r=result_uint 
19e58     30 4F 05 F1 | 	add	fp, #304
19e5c     A7 2E 02 FB | 	rdlong	local05, fp
19e60     02 2E 66 F0 | 	shl	local05, #2
19e64     04 4F 85 F1 | 	sub	fp, #260
19e68     A7 2E 02 F1 | 	add	local05, fp
19e6c     17 13 02 FB | 	rdlong	arg01, local05
19e70     2C 4E 85 F1 | 	sub	fp, #44
19e74     04 D0 BE FD | 	call	#_isdec
19e78     00 FA 0D F2 | 	cmp	result1, #0 wz
19e7c     52 00 00 5F 
19e80     10 E5 05 51 |  if_ne	add	objptr, ##42256
19e84     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
19e88     52 00 00 5F 
19e8c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19e90                 | '   if not isnum(args(i)) then 
19e90     30 4F 05 F1 | 	add	fp, #304
19e94     A7 2E 02 FB | 	rdlong	local05, fp
19e98     02 2E 66 F0 | 	shl	local05, #2
19e9c     04 4F 85 F1 | 	sub	fp, #260
19ea0     A7 2E 02 F1 | 	add	local05, fp
19ea4     17 13 02 FB | 	rdlong	arg01, local05
19ea8     2C 4E 85 F1 | 	sub	fp, #44
19eac     3C C9 BE FD | 	call	#_isnum
19eb0     FD 2E 22 F6 | 	not	local05, result1
19eb4     00 2E 0E F2 | 	cmp	local05, #0 wz
19eb8     4C 01 90 AD |  if_e	jmp	#LR__2058
19ebc     52 00 00 FF 
19ec0     10 E5 05 F1 | 	add	objptr, ##42256
19ec4     F2 56 68 FC | 	wrlong	#43, objptr
19ec8     52 00 00 FF 
19ecc     10 E5 85 F1 | 	sub	objptr, ##42256
19ed0     30 4F 05 F1 | 	add	fp, #304
19ed4     A7 16 02 FB | 	rdlong	arg03, fp
19ed8     02 16 66 F0 | 	shl	arg03, #2
19edc     04 4F 85 F1 | 	sub	fp, #260
19ee0     A7 16 02 F1 | 	add	arg03, fp
19ee4     0B 13 02 FB | 	rdlong	arg01, arg03
19ee8     2C 4E 85 F1 | 	sub	fp, #44
19eec     09 29 02 F6 | 	mov	local02, arg01
19ef0     97 06 48 FB | 	callpa	#(@LR__2055-@LR__2054)>>2,fcache_load_ptr_
19ef4                 | LR__2054
19ef4     14 FB C9 FA | 	rdbyte	result1, local02 wz
19ef8     01 28 06 51 |  if_ne	add	local02, #1
19efc     F4 FF 9F 5D |  if_ne	jmp	#LR__2054
19f00                 | LR__2055
19f00     09 29 82 F1 | 	sub	local02, arg01
19f04     14 FB 01 F6 | 	mov	result1, local02
19f08     38 4F 05 F1 | 	add	fp, #312
19f0c     A7 FA 61 FC | 	wrlong	result1, fp
19f10     52 00 00 FF 
19f14     98 E4 05 F1 | 	add	objptr, ##42136
19f18     F2 12 02 FB | 	rdlong	arg01, objptr
19f1c     FD 12 82 F1 | 	sub	arg01, result1
19f20     04 12 86 F1 | 	sub	arg01, #4
19f24     03 12 26 F5 | 	andn	arg01, #3
19f28     F2 12 62 FC | 	wrlong	arg01, objptr
19f2c     52 00 00 FF 
19f30     98 E4 85 F1 | 	sub	objptr, ##42136
19f34     A7 14 02 FB | 	rdlong	arg02, fp
19f38     38 4F 85 F1 | 	sub	fp, #312
19f3c     68 91 B0 FD | 	call	#_pslpoke
19f40                 | '     pslpoke memtop,l
19f40                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
19f40     34 4F 05 F1 | 	add	fp, #308
19f44     A7 02 68 FC | 	wrlong	#1, fp
19f48     04 4E 05 F1 | 	add	fp, #4
19f4c     A7 32 02 FB | 	rdlong	local07, fp
19f50     38 4F 85 F1 | 	sub	fp, #312
19f54     01 32 06 F1 | 	add	local07, #1
19f58                 | LR__2056
19f58     34 4F 05 F1 | 	add	fp, #308
19f5c     A7 2E 02 FB | 	rdlong	local05, fp
19f60     34 4F 85 F1 | 	sub	fp, #308
19f64     19 2F 52 F2 | 	cmps	local05, local07 wc
19f68     7C 00 90 3D |  if_ae	jmp	#LR__2057
19f6c     52 00 00 FF 
19f70     98 E4 05 F1 | 	add	objptr, ##42136
19f74     F2 30 02 FB | 	rdlong	local06, objptr
19f78     52 00 00 FF 
19f7c     98 E4 85 F1 | 	sub	objptr, ##42136
19f80     03 30 06 F1 | 	add	local06, #3
19f84     34 4F 05 F1 | 	add	fp, #308
19f88     A7 34 02 FB | 	rdlong	local08, fp
19f8c     1A 31 02 F1 | 	add	local06, local08
19f90     04 4E 85 F1 | 	sub	fp, #4
19f94     A7 36 02 FB | 	rdlong	local09, fp
19f98     02 36 66 F0 | 	shl	local09, #2
19f9c     04 4F 85 F1 | 	sub	fp, #260
19fa0     A7 38 02 F6 | 	mov	local10, fp
19fa4     A7 36 02 F1 | 	add	local09, fp
19fa8     1B 13 02 FB | 	rdlong	arg01, local09
19fac     2C 4E 85 F1 | 	sub	fp, #44
19fb0     01 3A 06 F6 | 	mov	local11, #1
19fb4     1A 15 02 F6 | 	mov	arg02, local08
19fb8     01 16 06 F6 | 	mov	arg03, #1
19fbc     D0 EA B0 FD | 	call	#__system__Mid_S
19fc0     FD 14 C2 FA | 	rdbyte	arg02, result1
19fc4     18 13 02 F6 | 	mov	arg01, local06
19fc8     6C 91 B0 FD | 	call	#_pspoke
19fcc     34 4F 05 F1 | 	add	fp, #308
19fd0     A7 30 02 FB | 	rdlong	local06, fp
19fd4     18 2F 02 F6 | 	mov	local05, local06
19fd8     01 2E 06 F1 | 	add	local05, #1
19fdc     A7 2E 62 FC | 	wrlong	local05, fp
19fe0     34 4F 85 F1 | 	sub	fp, #308
19fe4     70 FF 9F FD | 	jmp	#LR__2056
19fe8                 | LR__2057
19fe8     52 00 00 FF 
19fec     98 E4 05 F1 | 	add	objptr, ##42136
19ff0     F2 2E 02 FB | 	rdlong	local05, objptr
19ff4     52 00 00 FF 
19ff8     98 E4 85 F1 | 	sub	objptr, ##42136
19ffc     10 4E 05 F1 | 	add	fp, #16
1a000     A7 2E 62 FC | 	wrlong	local05, fp
1a004     10 4E 85 F1 | 	sub	fp, #16
1a008                 | LR__2058
1a008     5C 35 BF FD | 	call	#_pop
1a00c     1C 4E 05 F1 | 	add	fp, #28
1a010     A7 FA 61 FC | 	wrlong	result1, fp
1a014     04 4E 05 F1 | 	add	fp, #4
1a018     A7 FC 61 FC | 	wrlong	result2, fp
1a01c     04 4E 05 F1 | 	add	fp, #4
1a020     A7 FE 61 FC | 	wrlong	result3, fp
1a024                 | '   t1=pop() 
1a024                 | '   if i>=numpar-j then
1a024     1C 4E 85 F1 | 	sub	fp, #28
1a028     A7 2E 02 FB | 	rdlong	local05, fp
1a02c     17 3D 02 F6 | 	mov	local12, local05
1a030     2C 4F 05 F1 | 	add	fp, #300
1a034     A7 3E 02 FB | 	rdlong	local13, fp
1a038     1F 41 02 F6 | 	mov	local14, local13
1a03c     20 3D 82 F1 | 	sub	local12, local14
1a040     04 4E 85 F1 | 	sub	fp, #4
1a044     A7 42 02 FB | 	rdlong	local15, fp
1a048     30 4F 85 F1 | 	sub	fp, #304
1a04c     21 45 02 F6 | 	mov	local16, local15
1a050     1E 45 52 F2 | 	cmps	local16, local12 wc
1a054     80 06 90 CD |  if_b	jmp	#LR__2089
1a058     20 4E 05 F1 | 	add	fp, #32
1a05c     A7 3C 02 FB | 	rdlong	local12, fp
1a060     0C 4E 85 F1 | 	sub	fp, #12
1a064     A7 3C 62 FC | 	wrlong	local12, fp
1a068                 | '     vartype=t1.result.twowords(1)
1a068                 | '     select case vartype
1a068     14 4E 85 F1 | 	sub	fp, #20
1a06c     1E 47 0A F6 | 	mov	local17, local12 wz
1a070     64 00 90 AD |  if_e	jmp	#LR__2059
1a074     00 47 0E F2 | 	cmp	local17, #256 wz
1a078     6C 00 90 AD |  if_e	jmp	#LR__2060
1a07c     01 47 0E F2 | 	cmp	local17, #257 wz
1a080     74 00 90 AD |  if_e	jmp	#LR__2061
1a084     02 47 0E F2 | 	cmp	local17, #258 wz
1a088     7C 00 90 AD |  if_e	jmp	#LR__2062
1a08c     03 47 0E F2 | 	cmp	local17, #259 wz
1a090     84 00 90 AD |  if_e	jmp	#LR__2063
1a094     04 47 0E F2 | 	cmp	local17, #260 wz
1a098     8C 00 90 AD |  if_e	jmp	#LR__2064
1a09c     05 47 0E F2 | 	cmp	local17, #261 wz
1a0a0     94 00 90 AD |  if_e	jmp	#LR__2065
1a0a4     06 47 0E F2 | 	cmp	local17, #262 wz
1a0a8     9C 00 90 AD |  if_e	jmp	#LR__2066
1a0ac     07 47 0E F2 | 	cmp	local17, #263 wz
1a0b0     A4 00 90 AD |  if_e	jmp	#LR__2067
1a0b4     08 47 0E F2 | 	cmp	local17, #264 wz
1a0b8     AC 00 90 AD |  if_e	jmp	#LR__2068
1a0bc     09 47 0E F2 | 	cmp	local17, #265 wz
1a0c0     B4 00 90 AD |  if_e	jmp	#LR__2069
1a0c4     0A 47 0E F2 | 	cmp	local17, #266 wz
1a0c8     BC 00 90 AD |  if_e	jmp	#LR__2070
1a0cc     0B 47 0E F2 | 	cmp	local17, #267 wz
1a0d0     C4 00 90 AD |  if_e	jmp	#LR__2071
1a0d4     D0 00 90 FD | 	jmp	#LR__2072
1a0d8                 | LR__2059
1a0d8     18 4E 05 F1 | 	add	fp, #24
1a0dc     A7 18 68 FC | 	wrlong	#12, fp
1a0e0     18 4E 85 F1 | 	sub	fp, #24
1a0e4     CC 00 90 FD | 	jmp	#LR__2073
1a0e8                 | LR__2060
1a0e8     18 4E 05 F1 | 	add	fp, #24
1a0ec     A7 18 68 FC | 	wrlong	#12, fp
1a0f0     18 4E 85 F1 | 	sub	fp, #24
1a0f4     BC 00 90 FD | 	jmp	#LR__2073
1a0f8                 | LR__2061
1a0f8     18 4E 05 F1 | 	add	fp, #24
1a0fc     A7 02 68 FC | 	wrlong	#1, fp
1a100     18 4E 85 F1 | 	sub	fp, #24
1a104     AC 00 90 FD | 	jmp	#LR__2073
1a108                 | LR__2062
1a108     18 4E 05 F1 | 	add	fp, #24
1a10c     A7 02 68 FC | 	wrlong	#1, fp
1a110     18 4E 85 F1 | 	sub	fp, #24
1a114     9C 00 90 FD | 	jmp	#LR__2073
1a118                 | LR__2063
1a118     18 4E 05 F1 | 	add	fp, #24
1a11c     A7 04 68 FC | 	wrlong	#2, fp
1a120     18 4E 85 F1 | 	sub	fp, #24
1a124     8C 00 90 FD | 	jmp	#LR__2073
1a128                 | LR__2064
1a128     18 4E 05 F1 | 	add	fp, #24
1a12c     A7 04 68 FC | 	wrlong	#2, fp
1a130     18 4E 85 F1 | 	sub	fp, #24
1a134     7C 00 90 FD | 	jmp	#LR__2073
1a138                 | LR__2065
1a138     18 4E 05 F1 | 	add	fp, #24
1a13c     A7 08 68 FC | 	wrlong	#4, fp
1a140     18 4E 85 F1 | 	sub	fp, #24
1a144     6C 00 90 FD | 	jmp	#LR__2073
1a148                 | LR__2066
1a148     18 4E 05 F1 | 	add	fp, #24
1a14c     A7 08 68 FC | 	wrlong	#4, fp
1a150     18 4E 85 F1 | 	sub	fp, #24
1a154     5C 00 90 FD | 	jmp	#LR__2073
1a158                 | LR__2067
1a158     18 4E 05 F1 | 	add	fp, #24
1a15c     A7 10 68 FC | 	wrlong	#8, fp
1a160     18 4E 85 F1 | 	sub	fp, #24
1a164     4C 00 90 FD | 	jmp	#LR__2073
1a168                 | LR__2068
1a168     18 4E 05 F1 | 	add	fp, #24
1a16c     A7 10 68 FC | 	wrlong	#8, fp
1a170     18 4E 85 F1 | 	sub	fp, #24
1a174     3C 00 90 FD | 	jmp	#LR__2073
1a178                 | LR__2069
1a178     18 4E 05 F1 | 	add	fp, #24
1a17c     A7 0C 68 FC | 	wrlong	#6, fp
1a180     18 4E 85 F1 | 	sub	fp, #24
1a184     2C 00 90 FD | 	jmp	#LR__2073
1a188                 | LR__2070
1a188     18 4E 05 F1 | 	add	fp, #24
1a18c     A7 10 68 FC | 	wrlong	#8, fp
1a190     18 4E 85 F1 | 	sub	fp, #24
1a194     1C 00 90 FD | 	jmp	#LR__2073
1a198                 | LR__2071
1a198     18 4E 05 F1 | 	add	fp, #24
1a19c     A7 0A 68 FC | 	wrlong	#5, fp
1a1a0     18 4E 85 F1 | 	sub	fp, #24
1a1a4     0C 00 90 FD | 	jmp	#LR__2073
1a1a8                 | LR__2072
1a1a8     18 4E 05 F1 | 	add	fp, #24
1a1ac     A7 18 68 FC | 	wrlong	#12, fp
1a1b0     18 4E 85 F1 | 	sub	fp, #24
1a1b4                 | LR__2073
1a1b4                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1a1b4     18 4E 05 F1 | 	add	fp, #24
1a1b8     A7 3C 02 FB | 	rdlong	local12, fp
1a1bc     18 4E 85 F1 | 	sub	fp, #24
1a1c0     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a1c4     74 01 90 5D |  if_ne	jmp	#LR__2078
1a1c8     1C 4E 05 F1 | 	add	fp, #28
1a1cc     A7 3E 02 FB | 	rdlong	local13, fp
1a1d0     1C 4E 85 F1 | 	sub	fp, #28
1a1d4     00 04 00 FF 
1a1d8     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a1dc     5C 01 90 3D |  if_ae	jmp	#LR__2078
1a1e0                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1a1e0     52 00 00 FF 
1a1e4     10 E5 05 F1 | 	add	objptr, ##42256
1a1e8     F2 3C 02 FB | 	rdlong	local12, objptr
1a1ec     52 00 00 FF 
1a1f0     10 E5 85 F1 | 	sub	objptr, ##42256
1a1f4     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a1f8     38 00 90 5D |  if_ne	jmp	#LR__2074
1a1fc     1C 4E 05 F1 | 	add	fp, #28
1a200     A7 3C 02 FB | 	rdlong	local12, fp
1a204     14 4F 05 F1 | 	add	fp, #276
1a208     A7 3E 02 FB | 	rdlong	local13, fp
1a20c     1F 45 02 F6 | 	mov	local16, local13
1a210     02 44 66 F0 | 	shl	local16, #2
1a214     04 4F 85 F1 | 	sub	fp, #260
1a218     A7 42 02 F6 | 	mov	local15, fp
1a21c     A7 44 02 F1 | 	add	local16, fp
1a220     22 13 02 FB | 	rdlong	arg01, local16
1a224     00 14 06 F6 | 	mov	arg02, #0
1a228     2C 4E 85 F1 | 	sub	fp, #44
1a22c     BC FB B0 FD | 	call	#__system____builtin_atoi
1a230     1E FB 61 FC | 	wrlong	result1, local12
1a234                 | LR__2074
1a234                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1a234     52 00 00 FF 
1a238     10 E5 05 F1 | 	add	objptr, ##42256
1a23c     F2 3C 02 FB | 	rdlong	local12, objptr
1a240     52 00 00 FF 
1a244     10 E5 85 F1 | 	sub	objptr, ##42256
1a248     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a24c     38 00 90 5D |  if_ne	jmp	#LR__2075
1a250     1C 4E 05 F1 | 	add	fp, #28
1a254     A7 3C 02 FB | 	rdlong	local12, fp
1a258     14 4F 05 F1 | 	add	fp, #276
1a25c     A7 3E 02 FB | 	rdlong	local13, fp
1a260     1F 45 02 F6 | 	mov	local16, local13
1a264     02 44 66 F0 | 	shl	local16, #2
1a268     04 4F 85 F1 | 	sub	fp, #260
1a26c     A7 42 02 F6 | 	mov	local15, fp
1a270     A7 44 02 F1 | 	add	local16, fp
1a274     22 13 02 FB | 	rdlong	arg01, local16
1a278     00 14 06 F6 | 	mov	arg02, #0
1a27c     2C 4E 85 F1 | 	sub	fp, #44
1a280     68 FB B0 FD | 	call	#__system____builtin_atoi
1a284     1E FB 61 FC | 	wrlong	result1, local12
1a288                 | LR__2075
1a288                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1a288     52 00 00 FF 
1a28c     10 E5 05 F1 | 	add	objptr, ##42256
1a290     F2 3C 02 FB | 	rdlong	local12, objptr
1a294     52 00 00 FF 
1a298     10 E5 85 F1 | 	sub	objptr, ##42256
1a29c     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a2a0     3C 00 90 5D |  if_ne	jmp	#LR__2076
1a2a4     30 4F 05 F1 | 	add	fp, #304
1a2a8     A7 3E 02 FB | 	rdlong	local13, fp
1a2ac     02 3E 66 F0 | 	shl	local13, #2
1a2b0     04 4F 85 F1 | 	sub	fp, #260
1a2b4     A7 44 02 F6 | 	mov	local16, fp
1a2b8     A7 3E 02 F1 | 	add	local13, fp
1a2bc     1F 13 02 FB | 	rdlong	arg01, local13
1a2c0     2C 4E 85 F1 | 	sub	fp, #44
1a2c4     B8 FC B0 FD | 	call	#__system____builtin_atof
1a2c8     28 4E 05 F1 | 	add	fp, #40
1a2cc     A7 FA 61 FC | 	wrlong	result1, fp
1a2d0     0C 4E 85 F1 | 	sub	fp, #12
1a2d4     A7 3C 02 FB | 	rdlong	local12, fp
1a2d8     1C 4E 85 F1 | 	sub	fp, #28
1a2dc     1E FB 61 FC | 	wrlong	result1, local12
1a2e0                 | LR__2076
1a2e0                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1a2e0     52 00 00 FF 
1a2e4     10 E5 05 F1 | 	add	objptr, ##42256
1a2e8     F2 3C 02 FB | 	rdlong	local12, objptr
1a2ec     52 00 00 FF 
1a2f0     10 E5 85 F1 | 	sub	objptr, ##42256
1a2f4     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a2f8     18 00 90 5D |  if_ne	jmp	#LR__2077
1a2fc     1C 4E 05 F1 | 	add	fp, #28
1a300     A7 12 02 FB | 	rdlong	arg01, fp
1a304     0C 4E 85 F1 | 	sub	fp, #12
1a308     A7 14 02 FB | 	rdlong	arg02, fp
1a30c     10 4E 85 F1 | 	sub	fp, #16
1a310     09 15 62 FC | 	wrlong	arg02, arg01
1a314                 | LR__2077
1a314     1C 4E 05 F1 | 	add	fp, #28
1a318     A7 12 02 FB | 	rdlong	arg01, fp
1a31c     1C 4E 85 F1 | 	sub	fp, #28
1a320     08 12 06 F1 | 	add	arg01, #8
1a324     52 00 00 FF 
1a328     10 E5 05 F1 | 	add	objptr, ##42256
1a32c     F2 14 02 FB | 	rdlong	arg02, objptr
1a330     52 00 00 FF 
1a334     10 E5 85 F1 | 	sub	objptr, ##42256
1a338     09 15 62 FC | 	wrlong	arg02, arg01
1a33c                 | LR__2078
1a33c                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1a33c     18 4E 05 F1 | 	add	fp, #24
1a340     A7 3C 02 FB | 	rdlong	local12, fp
1a344     18 4E 85 F1 | 	sub	fp, #24
1a348     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a34c     94 01 90 5D |  if_ne	jmp	#LR__2083
1a350     1C 4E 05 F1 | 	add	fp, #28
1a354     A7 3E 02 FB | 	rdlong	local13, fp
1a358     1C 4E 85 F1 | 	sub	fp, #28
1a35c     00 04 00 FF 
1a360     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a364     7C 01 90 CD |  if_b	jmp	#LR__2083
1a368                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1a368     52 00 00 FF 
1a36c     10 E5 05 F1 | 	add	objptr, ##42256
1a370     F2 3C 02 FB | 	rdlong	local12, objptr
1a374     52 00 00 FF 
1a378     10 E5 85 F1 | 	sub	objptr, ##42256
1a37c     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a380     40 00 90 5D |  if_ne	jmp	#LR__2079
1a384     1C 4E 05 F1 | 	add	fp, #28
1a388     A7 3C 02 FB | 	rdlong	local12, fp
1a38c     14 4F 05 F1 | 	add	fp, #276
1a390     A7 3E 02 FB | 	rdlong	local13, fp
1a394     1F 45 02 F6 | 	mov	local16, local13
1a398     02 44 66 F0 | 	shl	local16, #2
1a39c     04 4F 85 F1 | 	sub	fp, #260
1a3a0     A7 42 02 F6 | 	mov	local15, fp
1a3a4     A7 44 02 F1 | 	add	local16, fp
1a3a8     22 13 02 FB | 	rdlong	arg01, local16
1a3ac     00 14 06 F6 | 	mov	arg02, #0
1a3b0     2C 4E 85 F1 | 	sub	fp, #44
1a3b4     34 FA B0 FD | 	call	#__system____builtin_atoi
1a3b8     FD 14 02 F6 | 	mov	arg02, result1
1a3bc     1E 13 02 F6 | 	mov	arg01, local12
1a3c0     E4 8C B0 FD | 	call	#_pslpoke
1a3c4                 | LR__2079
1a3c4                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1a3c4     52 00 00 FF 
1a3c8     10 E5 05 F1 | 	add	objptr, ##42256
1a3cc     F2 3C 02 FB | 	rdlong	local12, objptr
1a3d0     52 00 00 FF 
1a3d4     10 E5 85 F1 | 	sub	objptr, ##42256
1a3d8     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a3dc     40 00 90 5D |  if_ne	jmp	#LR__2080
1a3e0     1C 4E 05 F1 | 	add	fp, #28
1a3e4     A7 3C 02 FB | 	rdlong	local12, fp
1a3e8     14 4F 05 F1 | 	add	fp, #276
1a3ec     A7 3E 02 FB | 	rdlong	local13, fp
1a3f0     1F 45 02 F6 | 	mov	local16, local13
1a3f4     02 44 66 F0 | 	shl	local16, #2
1a3f8     04 4F 85 F1 | 	sub	fp, #260
1a3fc     A7 42 02 F6 | 	mov	local15, fp
1a400     A7 44 02 F1 | 	add	local16, fp
1a404     22 13 02 FB | 	rdlong	arg01, local16
1a408     00 14 06 F6 | 	mov	arg02, #0
1a40c     2C 4E 85 F1 | 	sub	fp, #44
1a410     D8 F9 B0 FD | 	call	#__system____builtin_atoi
1a414     FD 14 02 F6 | 	mov	arg02, result1
1a418     1E 13 02 F6 | 	mov	arg01, local12
1a41c     88 8C B0 FD | 	call	#_pslpoke
1a420                 | LR__2080
1a420                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a420     52 00 00 FF 
1a424     10 E5 05 F1 | 	add	objptr, ##42256
1a428     F2 3C 02 FB | 	rdlong	local12, objptr
1a42c     52 00 00 FF 
1a430     10 E5 85 F1 | 	sub	objptr, ##42256
1a434     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a438     4C 00 90 5D |  if_ne	jmp	#LR__2081
1a43c     30 4F 05 F1 | 	add	fp, #304
1a440     A7 3E 02 FB | 	rdlong	local13, fp
1a444     02 3E 66 F0 | 	shl	local13, #2
1a448     04 4F 85 F1 | 	sub	fp, #260
1a44c     A7 44 02 F6 | 	mov	local16, fp
1a450     A7 3E 02 F1 | 	add	local13, fp
1a454     1F 13 02 FB | 	rdlong	arg01, local13
1a458     2C 4E 85 F1 | 	sub	fp, #44
1a45c     20 FB B0 FD | 	call	#__system____builtin_atof
1a460     28 4E 05 F1 | 	add	fp, #40
1a464     A7 FA 61 FC | 	wrlong	result1, fp
1a468     0C 4E 85 F1 | 	sub	fp, #12
1a46c     A7 3C 02 FB | 	rdlong	local12, fp
1a470     0C 4E 05 F1 | 	add	fp, #12
1a474     A7 12 02 F6 | 	mov	arg01, fp
1a478     28 4E 85 F1 | 	sub	fp, #40
1a47c     09 15 02 FB | 	rdlong	arg02, arg01
1a480     1E 13 02 F6 | 	mov	arg01, local12
1a484     20 8C B0 FD | 	call	#_pslpoke
1a488                 | LR__2081
1a488                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a488     52 00 00 FF 
1a48c     10 E5 05 F1 | 	add	objptr, ##42256
1a490     F2 3C 02 FB | 	rdlong	local12, objptr
1a494     52 00 00 FF 
1a498     10 E5 85 F1 | 	sub	objptr, ##42256
1a49c     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a4a0     18 00 90 5D |  if_ne	jmp	#LR__2082
1a4a4     1C 4E 05 F1 | 	add	fp, #28
1a4a8     A7 12 02 FB | 	rdlong	arg01, fp
1a4ac     0C 4E 85 F1 | 	sub	fp, #12
1a4b0     A7 14 02 FB | 	rdlong	arg02, fp
1a4b4     10 4E 85 F1 | 	sub	fp, #16
1a4b8     EC 8B B0 FD | 	call	#_pslpoke
1a4bc                 | LR__2082
1a4bc     1C 4E 05 F1 | 	add	fp, #28
1a4c0     A7 12 02 FB | 	rdlong	arg01, fp
1a4c4     1C 4E 85 F1 | 	sub	fp, #28
1a4c8     08 12 06 F1 | 	add	arg01, #8
1a4cc     52 00 00 FF 
1a4d0     10 E5 05 F1 | 	add	objptr, ##42256
1a4d4     F2 14 02 FB | 	rdlong	arg02, objptr
1a4d8     52 00 00 FF 
1a4dc     10 E5 85 F1 | 	sub	objptr, ##42256
1a4e0     C4 8B B0 FD | 	call	#_pslpoke
1a4e4                 | LR__2083
1a4e4                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a4e4     18 4E 05 F1 | 	add	fp, #24
1a4e8     A7 3C 02 FB | 	rdlong	local12, fp
1a4ec     18 4E 85 F1 | 	sub	fp, #24
1a4f0     05 3C 0E F2 | 	cmp	local12, #5 wz
1a4f4     52 00 00 AF 
1a4f8     10 E5 05 A1 |  if_e	add	objptr, ##42256
1a4fc     F2 40 02 AB |  if_e	rdlong	local14, objptr
1a500     52 00 00 AF 
1a504     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1a508     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1a50c     18 00 90 5D |  if_ne	jmp	#LR__2084
1a510     1C 4E 05 F1 | 	add	fp, #28
1a514     A7 12 02 FB | 	rdlong	arg01, fp
1a518     0C 4E 85 F1 | 	sub	fp, #12
1a51c     A7 14 02 FB | 	rdlong	arg02, fp
1a520     10 4E 85 F1 | 	sub	fp, #16
1a524     80 8B B0 FD | 	call	#_pslpoke
1a528                 | LR__2084
1a528                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1a528     18 4E 05 F1 | 	add	fp, #24
1a52c     A7 3C 02 FB | 	rdlong	local12, fp
1a530     18 4E 85 F1 | 	sub	fp, #24
1a534     04 3C 0E F2 | 	cmp	local12, #4 wz
1a538     54 00 90 5D |  if_ne	jmp	#LR__2085
1a53c     52 00 00 FF 
1a540     10 E5 05 F1 | 	add	objptr, ##42256
1a544     F2 40 02 FB | 	rdlong	local14, objptr
1a548     52 00 00 FF 
1a54c     10 E5 85 F1 | 	sub	objptr, ##42256
1a550     2B 40 0E F2 | 	cmp	local14, #43 wz
1a554     38 00 90 AD |  if_e	jmp	#LR__2085
1a558     1C 4E 05 F1 | 	add	fp, #28
1a55c     A7 3C 02 FB | 	rdlong	local12, fp
1a560     14 4F 05 F1 | 	add	fp, #276
1a564     A7 44 02 FB | 	rdlong	local16, fp
1a568     02 44 66 F0 | 	shl	local16, #2
1a56c     04 4F 85 F1 | 	sub	fp, #260
1a570     A7 44 02 F1 | 	add	local16, fp
1a574     22 13 02 FB | 	rdlong	arg01, local16
1a578     00 14 06 F6 | 	mov	arg02, #0
1a57c     2C 4E 85 F1 | 	sub	fp, #44
1a580     68 F8 B0 FD | 	call	#__system____builtin_atoi
1a584     FD 14 02 F6 | 	mov	arg02, result1
1a588     1E 13 02 F6 | 	mov	arg01, local12
1a58c     18 8B B0 FD | 	call	#_pslpoke
1a590                 | LR__2085
1a590                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1a590     18 4E 05 F1 | 	add	fp, #24
1a594     A7 3C 02 FB | 	rdlong	local12, fp
1a598     18 4E 85 F1 | 	sub	fp, #24
1a59c     02 3C 0E F2 | 	cmp	local12, #2 wz
1a5a0     54 00 90 5D |  if_ne	jmp	#LR__2086
1a5a4     52 00 00 FF 
1a5a8     10 E5 05 F1 | 	add	objptr, ##42256
1a5ac     F2 40 02 FB | 	rdlong	local14, objptr
1a5b0     52 00 00 FF 
1a5b4     10 E5 85 F1 | 	sub	objptr, ##42256
1a5b8     2B 40 0E F2 | 	cmp	local14, #43 wz
1a5bc     38 00 90 AD |  if_e	jmp	#LR__2086
1a5c0     1C 4E 05 F1 | 	add	fp, #28
1a5c4     A7 3C 02 FB | 	rdlong	local12, fp
1a5c8     14 4F 05 F1 | 	add	fp, #276
1a5cc     A7 44 02 FB | 	rdlong	local16, fp
1a5d0     02 44 66 F0 | 	shl	local16, #2
1a5d4     04 4F 85 F1 | 	sub	fp, #260
1a5d8     A7 44 02 F1 | 	add	local16, fp
1a5dc     22 13 02 FB | 	rdlong	arg01, local16
1a5e0     00 14 06 F6 | 	mov	arg02, #0
1a5e4     2C 4E 85 F1 | 	sub	fp, #44
1a5e8     00 F8 B0 FD | 	call	#__system____builtin_atoi
1a5ec     FD 14 02 F6 | 	mov	arg02, result1
1a5f0     1E 13 02 F6 | 	mov	arg01, local12
1a5f4     F8 8A B0 FD | 	call	#_psdpoke
1a5f8                 | LR__2086
1a5f8                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1a5f8     18 4E 05 F1 | 	add	fp, #24
1a5fc     A7 3C 02 FB | 	rdlong	local12, fp
1a600     18 4E 85 F1 | 	sub	fp, #24
1a604     01 3C 0E F2 | 	cmp	local12, #1 wz
1a608     54 00 90 5D |  if_ne	jmp	#LR__2087
1a60c     52 00 00 FF 
1a610     10 E5 05 F1 | 	add	objptr, ##42256
1a614     F2 40 02 FB | 	rdlong	local14, objptr
1a618     52 00 00 FF 
1a61c     10 E5 85 F1 | 	sub	objptr, ##42256
1a620     2B 40 0E F2 | 	cmp	local14, #43 wz
1a624     38 00 90 AD |  if_e	jmp	#LR__2087
1a628     1C 4E 05 F1 | 	add	fp, #28
1a62c     A7 3C 02 FB | 	rdlong	local12, fp
1a630     14 4F 05 F1 | 	add	fp, #276
1a634     A7 44 02 FB | 	rdlong	local16, fp
1a638     02 44 66 F0 | 	shl	local16, #2
1a63c     04 4F 85 F1 | 	sub	fp, #260
1a640     A7 44 02 F1 | 	add	local16, fp
1a644     22 13 02 FB | 	rdlong	arg01, local16
1a648     00 14 06 F6 | 	mov	arg02, #0
1a64c     2C 4E 85 F1 | 	sub	fp, #44
1a650     98 F7 B0 FD | 	call	#__system____builtin_atoi
1a654     FD 14 02 F6 | 	mov	arg02, result1
1a658     1E 13 02 F6 | 	mov	arg01, local12
1a65c     D8 8A B0 FD | 	call	#_pspoke
1a660                 | LR__2087
1a660                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a660     18 4E 05 F1 | 	add	fp, #24
1a664     A7 3C 02 FB | 	rdlong	local12, fp
1a668     18 4E 85 F1 | 	sub	fp, #24
1a66c     06 3C 0E F2 | 	cmp	local12, #6 wz
1a670     64 00 90 5D |  if_ne	jmp	#LR__2088
1a674     52 00 00 FF 
1a678     10 E5 05 F1 | 	add	objptr, ##42256
1a67c     F2 40 02 FB | 	rdlong	local14, objptr
1a680     52 00 00 FF 
1a684     10 E5 85 F1 | 	sub	objptr, ##42256
1a688     2B 40 0E F2 | 	cmp	local14, #43 wz
1a68c     48 00 90 AD |  if_e	jmp	#LR__2088
1a690     30 4F 05 F1 | 	add	fp, #304
1a694     A7 3E 02 FB | 	rdlong	local13, fp
1a698     02 3E 66 F0 | 	shl	local13, #2
1a69c     04 4F 85 F1 | 	sub	fp, #260
1a6a0     A7 3E 02 F1 | 	add	local13, fp
1a6a4     1F 13 02 FB | 	rdlong	arg01, local13
1a6a8     2C 4E 85 F1 | 	sub	fp, #44
1a6ac     D0 F8 B0 FD | 	call	#__system____builtin_atof
1a6b0     28 4E 05 F1 | 	add	fp, #40
1a6b4     A7 FA 61 FC | 	wrlong	result1, fp
1a6b8     0C 4E 85 F1 | 	sub	fp, #12
1a6bc     A7 3C 02 FB | 	rdlong	local12, fp
1a6c0     0C 4E 05 F1 | 	add	fp, #12
1a6c4     A7 12 02 F6 | 	mov	arg01, fp
1a6c8     28 4E 85 F1 | 	sub	fp, #40
1a6cc     09 15 02 FB | 	rdlong	arg02, arg01
1a6d0     1E 13 02 F6 | 	mov	arg01, local12
1a6d4     D0 89 B0 FD | 	call	#_pslpoke
1a6d8                 | LR__2088
1a6d8                 | LR__2089
1a6d8     30 4F 05 F1 | 	add	fp, #304
1a6dc     A7 40 02 FB | 	rdlong	local14, fp
1a6e0     01 40 06 F1 | 	add	local14, #1
1a6e4     A7 40 62 FC | 	wrlong	local14, fp
1a6e8     30 4F 85 F1 | 	sub	fp, #304
1a6ec     B8 F6 9F FD | 	jmp	#LR__2053
1a6f0                 | LR__2090
1a6f0                 | LR__2091
1a6f0     A7 F0 03 F6 | 	mov	ptra, fp
1a6f4     B2 00 A0 FD | 	call	#popregs_
1a6f8                 | _do_read_ret
1a6f8     2D 00 64 FD | 	ret
1a6fc                 | 
1a6fc                 | ' 
1a6fc                 | ' '------------------- release
1a6fc                 | ' 
1a6fc                 | ' sub do_release
1a6fc                 | _do_release
1a6fc     00 4A 05 F6 | 	mov	COUNT_, #0
1a700     A8 00 A0 FD | 	call	#pushregs_
1a704     10 F0 07 F1 | 	add	ptra, #16
1a708     5C 2E BF FD | 	call	#_pop
1a70c     FF 14 02 F6 | 	mov	arg02, result3
1a710     A7 FA 61 FC | 	wrlong	result1, fp
1a714     04 4E 05 F1 | 	add	fp, #4
1a718     A7 FC 61 FC | 	wrlong	result2, fp
1a71c     04 4E 05 F1 | 	add	fp, #4
1a720     A7 14 62 FC | 	wrlong	arg02, fp
1a724     08 4E 85 F1 | 	sub	fp, #8
1a728     A7 12 02 F6 | 	mov	arg01, fp
1a72c     1C 30 BF FD | 	call	#_converttoint
1a730     0C 4E 05 F1 | 	add	fp, #12
1a734     A7 FA 61 FC | 	wrlong	result1, fp
1a738                 | ' 
1a738                 | ' t1=pop()
1a738                 | ' channel=converttoint(t1)
1a738                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1a738     0C 4E 85 F1 | 	sub	fp, #12
1a73c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a740     44 00 90 CD |  if_b	jmp	#LR__2100
1a744     0C 4E 05 F1 | 	add	fp, #12
1a748     A7 14 02 FB | 	rdlong	arg02, fp
1a74c     0C 4E 85 F1 | 	sub	fp, #12
1a750     08 14 56 F2 | 	cmps	arg02, #8 wc
1a754     30 00 90 3D |  if_ae	jmp	#LR__2100
1a758     37 00 00 FF 
1a75c     10 E4 05 F1 | 	add	objptr, ##28176
1a760     F2 12 02 FB | 	rdlong	arg01, objptr
1a764     37 00 00 FF 
1a768     10 E4 85 F1 | 	sub	objptr, ##28176
1a76c     0C 4E 05 F1 | 	add	fp, #12
1a770     A7 14 02 FB | 	rdlong	arg02, fp
1a774     0C 4E 85 F1 | 	sub	fp, #12
1a778     06 14 66 F0 | 	shl	arg02, #6
1a77c     0A 13 02 F1 | 	add	arg01, arg02
1a780     2C 12 06 F1 | 	add	arg01, #44
1a784     09 FF 69 FC | 	wrlong	#255, arg01
1a788                 | LR__2100
1a788     A7 F0 03 F6 | 	mov	ptra, fp
1a78c     B2 00 A0 FD | 	call	#popregs_
1a790                 | _do_release_ret
1a790     2D 00 64 FD | 	ret
1a794                 | 
1a794                 | ' 
1a794                 | ' '------------------- restore
1a794                 | ' 
1a794                 | ' sub do_restore()
1a794                 | _do_restore
1a794     4A 00 00 FF 
1a798     88 E4 05 F1 | 	add	objptr, ##38024
1a79c     F2 00 02 FB | 	rdlong	_var01, objptr
1a7a0     06 00 00 FF 
1a7a4     A4 E4 05 F1 | 	add	objptr, ##3236
1a7a8     F2 00 62 FC | 	wrlong	_var01, objptr
1a7ac     B7 01 00 FF 
1a7b0     6B 01 06 F6 | 	mov	_var01, ##@LR__5956
1a7b4     01 00 00 FF 
1a7b8     B0 E5 05 F1 | 	add	objptr, ##944
1a7bc     F2 00 62 FC | 	wrlong	_var01, objptr
1a7c0     52 00 00 FF 
1a7c4     DC E4 85 F1 | 	sub	objptr, ##42204
1a7c8                 | _do_restore_ret
1a7c8     2D 00 64 FD | 	ret
1a7cc                 | 
1a7cc                 | ' 
1a7cc                 | ' '------------------- return
1a7cc                 | ' 
1a7cc                 | ' sub do_return()
1a7cc                 | _do_return
1a7cc                 | ' if gosubtop>0 then
1a7cc     50 00 00 FF 
1a7d0     34 E5 05 F1 | 	add	objptr, ##41268
1a7d4     F2 00 02 FB | 	rdlong	_var01, objptr
1a7d8     50 00 00 FF 
1a7dc     34 E5 85 F1 | 	sub	objptr, ##41268
1a7e0     01 00 56 F2 | 	cmps	_var01, #1 wc
1a7e4     8C 00 90 CD |  if_b	jmp	#LR__2110
1a7e8     50 00 00 FF 
1a7ec     34 E5 05 F1 | 	add	objptr, ##41268
1a7f0     F2 00 02 FB | 	rdlong	_var01, objptr
1a7f4     03 00 66 F0 | 	shl	_var01, #3
1a7f8     03 00 00 FF 
1a7fc     88 E5 85 F1 | 	sub	objptr, ##1928
1a800     F2 00 02 F1 | 	add	_var01, objptr
1a804     00 01 02 FB | 	rdlong	_var01, _var01
1a808     03 00 00 FF 
1a80c     0C E5 05 F1 | 	add	objptr, ##1804
1a810     F2 00 62 FC | 	wrlong	_var01, objptr
1a814     7C E4 05 F1 | 	add	objptr, #124
1a818     F2 00 02 FB | 	rdlong	_var01, objptr
1a81c     03 00 66 F0 | 	shl	_var01, #3
1a820     03 00 00 FF 
1a824     88 E5 85 F1 | 	sub	objptr, ##1928
1a828     F2 00 02 F1 | 	add	_var01, objptr
1a82c     04 00 06 F1 | 	add	_var01, #4
1a830     00 01 02 FB | 	rdlong	_var01, _var01
1a834     03 00 00 FF 
1a838     10 E5 05 F1 | 	add	objptr, ##1808
1a83c     F2 00 62 FC | 	wrlong	_var01, objptr
1a840     06 00 00 FF 
1a844     40 E4 85 F1 | 	sub	objptr, ##3136
1a848     F2 00 02 FB | 	rdlong	_var01, objptr
1a84c     01 00 86 F1 | 	sub	_var01, #1
1a850     04 E4 05 F1 | 	add	objptr, #4
1a854     F2 00 62 FC | 	wrlong	_var01, objptr
1a858     06 00 00 FF 
1a85c     B4 E4 05 F1 | 	add	objptr, ##3252
1a860     F2 00 02 FB | 	rdlong	_var01, objptr
1a864     01 00 86 F1 | 	sub	_var01, #1
1a868     F2 00 62 FC | 	wrlong	_var01, objptr
1a86c     50 00 00 FF 
1a870     34 E5 85 F1 | 	sub	objptr, ##41268
1a874                 | LR__2110
1a874                 | _do_return_ret
1a874     2D 00 64 FD | 	ret
1a878                 | 
1a878                 | ' 
1a878                 | ' '------------------- right$
1a878                 | ' 
1a878                 | ' sub do_right
1a878                 | _do_right
1a878     00 4A 05 F6 | 	mov	COUNT_, #0
1a87c     A8 00 A0 FD | 	call	#pushregs_
1a880     14 F0 07 F1 | 	add	ptra, #20
1a884     4A 00 00 FF 
1a888     80 E4 05 F1 | 	add	objptr, ##38016
1a88c     F2 16 02 FB | 	rdlong	arg03, objptr
1a890     0B 15 02 F6 | 	mov	arg02, arg03
1a894     01 14 66 F0 | 	shl	arg02, #1
1a898     0B 15 02 F1 | 	add	arg02, arg03
1a89c     02 14 66 F0 | 	shl	arg02, #2
1a8a0     03 00 00 FF 
1a8a4     04 E4 85 F1 | 	sub	objptr, ##1540
1a8a8     F2 14 02 F1 | 	add	arg02, objptr
1a8ac     0A 17 02 FB | 	rdlong	arg03, arg02
1a8b0     0C 4E 05 F1 | 	add	fp, #12
1a8b4     A7 16 62 FC | 	wrlong	arg03, fp
1a8b8                 | ' 
1a8b8                 | ' numpar=compiledline(lineptr_e).result.uresult
1a8b8                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1a8b8     0C 4E 85 F1 | 	sub	fp, #12
1a8bc     02 16 0E F2 | 	cmp	arg03, #2 wz
1a8c0     47 00 00 FF 
1a8c4     7C E4 85 F1 | 	sub	objptr, ##36476
1a8c8     40 00 90 AD |  if_e	jmp	#LR__2120
1a8cc     00 12 06 F6 | 	mov	arg01, #0
1a8d0     C8 1C B1 FD | 	call	#__system___getiolock_0602
1a8d4     FD 12 02 F6 | 	mov	arg01, result1
1a8d8     1C C0 B0 FD | 	call	#__system___lockmem
1a8dc     B7 01 00 FF 
1a8e0     6C 15 06 F6 | 	mov	arg02, ##@LR__5957
1a8e4     00 12 06 F6 | 	mov	arg01, #0
1a8e8     00 16 06 F6 | 	mov	arg03, #0
1a8ec     00 CD B0 FD | 	call	#__system___basic_print_string
1a8f0     00 12 06 F6 | 	mov	arg01, #0
1a8f4     A4 1C B1 FD | 	call	#__system___getiolock_0602
1a8f8     FD 00 68 FC | 	wrlong	#0, result1
1a8fc     27 12 06 F6 | 	mov	arg01, #39
1a900     00 14 06 F6 | 	mov	arg02, #0
1a904     00 86 B0 FD | 	call	#_printerror
1a908     EC 00 90 FD | 	jmp	#LR__2123
1a90c                 | LR__2120
1a90c     58 2C BF FD | 	call	#_pop
1a910     FF 16 02 F6 | 	mov	arg03, result3
1a914     A7 FA 61 FC | 	wrlong	result1, fp
1a918     04 4E 05 F1 | 	add	fp, #4
1a91c     A7 FC 61 FC | 	wrlong	result2, fp
1a920     04 4E 05 F1 | 	add	fp, #4
1a924     A7 16 62 FC | 	wrlong	arg03, fp
1a928     08 4E 85 F1 | 	sub	fp, #8
1a92c     A7 12 02 F6 | 	mov	arg01, fp
1a930     18 2E BF FD | 	call	#_converttoint
1a934     FD 16 02 F6 | 	mov	arg03, result1
1a938     10 4E 05 F1 | 	add	fp, #16
1a93c     A7 16 62 FC | 	wrlong	arg03, fp
1a940     10 4E 85 F1 | 	sub	fp, #16
1a944     20 2C BF FD | 	call	#_pop
1a948     FF 16 02 F6 | 	mov	arg03, result3
1a94c     A7 FA 61 FC | 	wrlong	result1, fp
1a950     04 4E 05 F1 | 	add	fp, #4
1a954     A7 FC 61 FC | 	wrlong	result2, fp
1a958     04 4E 05 F1 | 	add	fp, #4
1a95c     A7 16 62 FC | 	wrlong	arg03, fp
1a960                 | ' t1=pop() : arg=converttoint(t1)
1a960                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1a960     08 4E 85 F1 | 	sub	fp, #8
1a964     2B 16 0E F2 | 	cmp	arg03, #43 wz
1a968     18 00 90 5D |  if_ne	jmp	#LR__2121
1a96c     A7 12 02 FB | 	rdlong	arg01, fp
1a970     6C 2D BF FD | 	call	#_convertstring
1a974     A7 FA 61 FC | 	wrlong	result1, fp
1a978     08 4E 05 F1 | 	add	fp, #8
1a97c     A7 3E 68 FC | 	wrlong	#31, fp
1a980     08 4E 85 F1 | 	sub	fp, #8
1a984                 | LR__2121
1a984                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1a984     08 4E 05 F1 | 	add	fp, #8
1a988     A7 16 02 FB | 	rdlong	arg03, fp
1a98c     08 4E 85 F1 | 	sub	fp, #8
1a990     1F 16 0E F2 | 	cmp	arg03, #31 wz
1a994     40 00 90 AD |  if_e	jmp	#LR__2122
1a998     00 12 06 F6 | 	mov	arg01, #0
1a99c     FC 1B B1 FD | 	call	#__system___getiolock_0602
1a9a0     FD 12 02 F6 | 	mov	arg01, result1
1a9a4     50 BF B0 FD | 	call	#__system___lockmem
1a9a8     B7 01 00 FF 
1a9ac     75 15 06 F6 | 	mov	arg02, ##@LR__5958
1a9b0     00 12 06 F6 | 	mov	arg01, #0
1a9b4     00 16 06 F6 | 	mov	arg03, #0
1a9b8     34 CC B0 FD | 	call	#__system___basic_print_string
1a9bc     00 12 06 F6 | 	mov	arg01, #0
1a9c0     D8 1B B1 FD | 	call	#__system___getiolock_0602
1a9c4     FD 00 68 FC | 	wrlong	#0, result1
1a9c8     0F 12 06 F6 | 	mov	arg01, #15
1a9cc     00 14 06 F6 | 	mov	arg02, #0
1a9d0     34 85 B0 FD | 	call	#_printerror
1a9d4     20 00 90 FD | 	jmp	#LR__2123
1a9d8                 | LR__2122
1a9d8     A7 12 02 FB | 	rdlong	arg01, fp
1a9dc     10 4E 05 F1 | 	add	fp, #16
1a9e0     A7 14 02 FB | 	rdlong	arg02, fp
1a9e4     10 4E 85 F1 | 	sub	fp, #16
1a9e8     14 E0 B0 FD | 	call	#__system__Right_S
1a9ec     A7 FA 61 FC | 	wrlong	result1, fp
1a9f0     A7 12 02 F6 | 	mov	arg01, fp
1a9f4     08 2C BF FD | 	call	#_push
1a9f8                 | LR__2123
1a9f8     A7 F0 03 F6 | 	mov	ptra, fp
1a9fc     B2 00 A0 FD | 	call	#popregs_
1aa00                 | _do_right_ret
1aa00     2D 00 64 FD | 	ret
1aa04                 | 
1aa04                 | ' 
1aa04                 | ' '------------------- rnd
1aa04                 | ' 
1aa04                 | ' sub do_rnd
1aa04                 | _do_rnd
1aa04     01 4A 05 F6 | 	mov	COUNT_, #1
1aa08     A8 00 A0 FD | 	call	#pushregs_
1aa0c     10 F0 07 F1 | 	add	ptra, #16
1aa10     4A 00 00 FF 
1aa14     80 E4 05 F1 | 	add	objptr, ##38016
1aa18     F2 26 02 FB | 	rdlong	local01, objptr
1aa1c     13 17 02 F6 | 	mov	arg03, local01
1aa20     01 16 66 F0 | 	shl	arg03, #1
1aa24     13 17 02 F1 | 	add	arg03, local01
1aa28     02 16 66 F0 | 	shl	arg03, #2
1aa2c     03 00 00 FF 
1aa30     04 E4 85 F1 | 	sub	objptr, ##1540
1aa34     F2 16 02 F1 | 	add	arg03, objptr
1aa38     0B 17 02 FB | 	rdlong	arg03, arg03
1aa3c     0C 4E 05 F1 | 	add	fp, #12
1aa40     A7 16 62 FC | 	wrlong	arg03, fp
1aa44                 | ' 
1aa44                 | ' numpar=compiledline(lineptr_e).result.uresult
1aa44                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1aa44     0C 4E 85 F1 | 	sub	fp, #12
1aa48     02 16 16 F2 | 	cmp	arg03, #2 wc
1aa4c     47 00 00 FF 
1aa50     7C E4 85 F1 | 	sub	objptr, ##36476
1aa54     40 00 90 CD |  if_b	jmp	#LR__2130
1aa58     00 12 06 F6 | 	mov	arg01, #0
1aa5c     3C 1B B1 FD | 	call	#__system___getiolock_0602
1aa60     FD 12 02 F6 | 	mov	arg01, result1
1aa64     90 BE B0 FD | 	call	#__system___lockmem
1aa68     B7 01 00 FF 
1aa6c     7E 15 06 F6 | 	mov	arg02, ##@LR__5959
1aa70     00 12 06 F6 | 	mov	arg01, #0
1aa74     00 16 06 F6 | 	mov	arg03, #0
1aa78     74 CB B0 FD | 	call	#__system___basic_print_string
1aa7c     00 12 06 F6 | 	mov	arg01, #0
1aa80     18 1B B1 FD | 	call	#__system___getiolock_0602
1aa84     FD 00 68 FC | 	wrlong	#0, result1
1aa88     27 12 06 F6 | 	mov	arg01, #39
1aa8c     00 14 06 F6 | 	mov	arg02, #0
1aa90     74 84 B0 FD | 	call	#_printerror
1aa94     30 01 90 FD | 	jmp	#LR__2137
1aa98                 | LR__2130
1aa98                 | ' if numpar=0 then
1aa98     0C 4E 05 F1 | 	add	fp, #12
1aa9c     A7 FE 09 FB | 	rdlong	result3, fp wz
1aaa0     0C 4E 85 F1 | 	sub	fp, #12
1aaa4     20 00 90 5D |  if_ne	jmp	#LR__2131
1aaa8     08 4E 05 F1 | 	add	fp, #8
1aaac     A7 3A 68 FC | 	wrlong	#29, fp
1aab0     08 4E 85 F1 | 	sub	fp, #8
1aab4     1B FA 61 FD | 	getrnd	result1
1aab8     A7 FA 61 FC | 	wrlong	result1, fp
1aabc     A7 12 02 F6 | 	mov	arg01, fp
1aac0     3C 2B BF FD | 	call	#_push
1aac4     00 01 90 FD | 	jmp	#LR__2136
1aac8                 | LR__2131
1aac8     9C 2A BF FD | 	call	#_pop
1aacc     A7 FA 61 FC | 	wrlong	result1, fp
1aad0     04 4E 05 F1 | 	add	fp, #4
1aad4     A7 FC 61 FC | 	wrlong	result2, fp
1aad8     04 4E 05 F1 | 	add	fp, #4
1aadc     A7 FE 61 FC | 	wrlong	result3, fp
1aae0                 | '   t1=pop()
1aae0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1aae0     08 4E 85 F1 | 	sub	fp, #8
1aae4     1C FE 0D F2 | 	cmp	result3, #28 wz
1aae8     08 4E 05 51 |  if_ne	add	fp, #8
1aaec     A7 26 02 5B |  if_ne	rdlong	local01, fp
1aaf0     08 4E 85 51 |  if_ne	sub	fp, #8
1aaf4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1aaf8     2C 00 90 5D |  if_ne	jmp	#LR__2132
1aafc     1B FA 61 FD | 	getrnd	result1
1ab00     A7 26 02 FB | 	rdlong	local01, fp
1ab04     13 FB 11 FD | 	qdiv	result1, local01
1ab08     A7 12 02 F6 | 	mov	arg01, fp
1ab0c     19 26 62 FD | 	getqy	local01
1ab10     A7 26 62 FC | 	wrlong	local01, fp
1ab14     08 4E 05 F1 | 	add	fp, #8
1ab18     A7 3A 68 FC | 	wrlong	#29, fp
1ab1c     08 4E 85 F1 | 	sub	fp, #8
1ab20     DC 2A BF FD | 	call	#_push
1ab24     A0 00 90 FD | 	jmp	#LR__2135
1ab28                 | LR__2132
1ab28     08 4E 05 F1 | 	add	fp, #8
1ab2c     A7 26 02 FB | 	rdlong	local01, fp
1ab30     08 4E 85 F1 | 	sub	fp, #8
1ab34     1E 26 0E F2 | 	cmp	local01, #30 wz
1ab38     48 00 90 5D |  if_ne	jmp	#LR__2133
1ab3c     A7 12 02 FB | 	rdlong	arg01, fp
1ab40     00 C0 24 FF 
1ab44     00 14 06 F6 | 	mov	arg02, ##1233125376
1ab48     2C EE B0 FD | 	call	#__system___float_div
1ab4c     FD 26 02 F6 | 	mov	local01, result1
1ab50     1B 12 62 FD | 	getrnd	arg01
1ab54     74 13 06 F4 | 	bitl	arg01, #372
1ab58     14 E8 B0 FD | 	call	#__system___float_fromuns
1ab5c     FD 14 02 F6 | 	mov	arg02, result1
1ab60     13 13 02 F6 | 	mov	arg01, local01
1ab64     0C EC B0 FD | 	call	#__system___float_mul
1ab68     A7 FA 61 FC | 	wrlong	result1, fp
1ab6c     08 4E 05 F1 | 	add	fp, #8
1ab70     A7 3C 68 FC | 	wrlong	#30, fp
1ab74     08 4E 85 F1 | 	sub	fp, #8
1ab78     A7 12 02 F6 | 	mov	arg01, fp
1ab7c     80 2A BF FD | 	call	#_push
1ab80     44 00 90 FD | 	jmp	#LR__2134
1ab84                 | LR__2133
1ab84                 | '     print "rnd: "; : printerror(40) 
1ab84     00 12 06 F6 | 	mov	arg01, #0
1ab88     10 1A B1 FD | 	call	#__system___getiolock_0602
1ab8c     FD 12 02 F6 | 	mov	arg01, result1
1ab90     64 BD B0 FD | 	call	#__system___lockmem
1ab94     B7 01 00 FF 
1ab98     84 15 06 F6 | 	mov	arg02, ##@LR__5960
1ab9c     00 12 06 F6 | 	mov	arg01, #0
1aba0     00 16 06 F6 | 	mov	arg03, #0
1aba4     48 CA B0 FD | 	call	#__system___basic_print_string
1aba8     00 12 06 F6 | 	mov	arg01, #0
1abac     EC 19 B1 FD | 	call	#__system___getiolock_0602
1abb0     FD 00 68 FC | 	wrlong	#0, result1
1abb4     28 12 06 F6 | 	mov	arg01, #40
1abb8     00 14 06 F6 | 	mov	arg02, #0
1abbc     48 83 B0 FD | 	call	#_printerror
1abc0     A7 12 02 F6 | 	mov	arg01, fp
1abc4     38 2A BF FD | 	call	#_push
1abc8                 | LR__2134
1abc8                 | LR__2135
1abc8                 | LR__2136
1abc8                 | LR__2137
1abc8     A7 F0 03 F6 | 	mov	ptra, fp
1abcc     B2 00 A0 FD | 	call	#popregs_
1abd0                 | _do_rnd_ret
1abd0     2D 00 64 FD | 	ret
1abd4                 | 
1abd4                 | ' 
1abd4                 | ' '-------------------- round
1abd4                 | ' 
1abd4                 | ' sub do_round
1abd4                 | _do_round
1abd4     00 4A 05 F6 | 	mov	COUNT_, #0
1abd8     A8 00 A0 FD | 	call	#pushregs_
1abdc     0C F0 07 F1 | 	add	ptra, #12
1abe0     84 29 BF FD | 	call	#_pop
1abe4     A7 FA 61 FC | 	wrlong	result1, fp
1abe8     04 4E 05 F1 | 	add	fp, #4
1abec     A7 FC 61 FC | 	wrlong	result2, fp
1abf0     04 4E 05 F1 | 	add	fp, #4
1abf4     A7 FE 61 FC | 	wrlong	result3, fp
1abf8     08 4E 85 F1 | 	sub	fp, #8
1abfc     A7 12 02 F6 | 	mov	arg01, fp
1ac00     48 2B BF FD | 	call	#_converttoint
1ac04     A7 FA 61 FC | 	wrlong	result1, fp
1ac08     08 4E 05 F1 | 	add	fp, #8
1ac0c     A7 38 68 FC | 	wrlong	#28, fp
1ac10     08 4E 85 F1 | 	sub	fp, #8
1ac14     A7 12 02 F6 | 	mov	arg01, fp
1ac18     E4 29 BF FD | 	call	#_push
1ac1c     A7 F0 03 F6 | 	mov	ptra, fp
1ac20     B2 00 A0 FD | 	call	#popregs_
1ac24                 | _do_round_ret
1ac24     2D 00 64 FD | 	ret
1ac28                 | 
1ac28                 | ' 
1ac28                 | ' '-------------------- rqpin
1ac28                 | ' 
1ac28                 | ' sub do_rqpin
1ac28                 | _do_rqpin
1ac28     00 4A 05 F6 | 	mov	COUNT_, #0
1ac2c     A8 00 A0 FD | 	call	#pushregs_
1ac30     0C F0 07 F1 | 	add	ptra, #12
1ac34     30 29 BF FD | 	call	#_pop
1ac38     A7 FA 61 FC | 	wrlong	result1, fp
1ac3c     04 4E 05 F1 | 	add	fp, #4
1ac40     A7 FC 61 FC | 	wrlong	result2, fp
1ac44     04 4E 05 F1 | 	add	fp, #4
1ac48     A7 FE 61 FC | 	wrlong	result3, fp
1ac4c     08 4E 85 F1 | 	sub	fp, #8
1ac50     A7 12 02 F6 | 	mov	arg01, fp
1ac54     F4 2A BF FD | 	call	#_converttoint
1ac58     FD 12 02 F6 | 	mov	arg01, result1
1ac5c     00 FA 05 F6 | 	mov	result1, #0
1ac60     09 FB 81 FA | 	rqpin	result1, arg01
1ac64     52 00 00 FF 
1ac68     10 E5 05 F1 | 	add	objptr, ##42256
1ac6c     F2 FA 61 FC | 	wrlong	result1, objptr
1ac70     52 00 00 FF 
1ac74     10 E5 85 F1 | 	sub	objptr, ##42256
1ac78     08 4E 05 F1 | 	add	fp, #8
1ac7c     A7 3A 68 FC | 	wrlong	#29, fp
1ac80     08 4E 85 F1 | 	sub	fp, #8
1ac84     A7 08 68 FC | 	wrlong	#4, fp
1ac88     A7 12 02 F6 | 	mov	arg01, fp
1ac8c     70 29 BF FD | 	call	#_push
1ac90     A7 F0 03 F6 | 	mov	ptra, fp
1ac94     B2 00 A0 FD | 	call	#popregs_
1ac98                 | _do_rqpin_ret
1ac98     2D 00 64 FD | 	ret
1ac9c                 | 
1ac9c                 | ' 
1ac9c                 | ' ' ------------------ run
1ac9c                 | ' 
1ac9c                 | ' sub do_run
1ac9c                 | _do_run
1ac9c     04 4A 05 F6 | 	mov	COUNT_, #4
1aca0     A8 00 A0 FD | 	call	#pushregs_
1aca4     4A 00 00 FF 
1aca8     80 E4 05 F1 | 	add	objptr, ##38016
1acac     F2 26 02 FB | 	rdlong	local01, objptr
1acb0     06 00 00 FF 
1acb4     38 E4 05 F1 | 	add	objptr, ##3128
1acb8     F2 28 02 FB | 	rdlong	local02, objptr
1acbc     04 E4 05 F1 | 	add	objptr, #4
1acc0     F2 2A 02 FB | 	rdlong	local03, objptr
1acc4     13 19 02 F6 | 	mov	arg04, local01
1acc8     0C 17 02 F6 | 	mov	arg03, arg04
1accc     01 16 66 F0 | 	shl	arg03, #1
1acd0     0C 17 02 F1 | 	add	arg03, arg04
1acd4     02 16 66 F0 | 	shl	arg03, #2
1acd8     09 00 00 FF 
1acdc     40 E4 85 F1 | 	sub	objptr, ##4672
1ace0     F2 16 02 F1 | 	add	arg03, objptr
1ace4     0B 15 02 FB | 	rdlong	arg02, arg03
1ace8                 | ' 
1ace8                 | ' r_lineptr_e=lineptr_e
1ace8                 | ' r_runptr=runptr
1ace8                 | ' r_runptr2=runptr2
1ace8                 | ' 
1ace8                 | ' numpar=compiledline(lineptr_e).result.uresult
1ace8                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1ace8     01 14 0E F2 | 	cmp	arg02, #1 wz
1acec     47 00 00 FF 
1acf0     7C E4 85 F1 | 	sub	objptr, ##36476
1acf4     00 12 06 A6 |  if_e	mov	arg01, #0
1acf8     E0 A0 BF AD |  if_e	call	#_do_load
1acfc     4A 00 00 FF 
1ad00     88 E4 05 F1 | 	add	objptr, ##38024
1ad04     F2 18 02 FB | 	rdlong	arg04, objptr
1ad08     06 00 00 FF 
1ad0c     30 E4 05 F1 | 	add	objptr, ##3120
1ad10     F2 18 62 FC | 	wrlong	arg04, objptr
1ad14     04 E4 05 F1 | 	add	objptr, #4
1ad18     F2 00 68 FC | 	wrlong	#0, objptr
1ad1c     04 E4 05 F1 | 	add	objptr, #4
1ad20     FF FF FF FF 
1ad24     F2 FE 6B FC | 	wrlong	##-1, objptr
1ad28     06 00 00 FF 
1ad2c     38 E4 85 F1 | 	sub	objptr, ##3128
1ad30     F2 18 02 FB | 	rdlong	arg04, objptr
1ad34     06 00 00 FF 
1ad38     A4 E4 05 F1 | 	add	objptr, ##3236
1ad3c     F2 18 62 FC | 	wrlong	arg04, objptr
1ad40     B7 01 00 FF 
1ad44     8A 19 06 F6 | 	mov	arg04, ##@LR__5961
1ad48     01 00 00 FF 
1ad4c     B0 E5 05 F1 | 	add	objptr, ##944
1ad50     F2 18 62 FC | 	wrlong	arg04, objptr
1ad54                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1ad54                 | ' dataptr=programstart : readline="" ' reset the data pointer
1ad54                 | ' if inrun>0 then 
1ad54     01 00 00 FF 
1ad58     F0 E5 85 F1 | 	sub	objptr, ##1008
1ad5c     F2 18 02 FB | 	rdlong	arg04, objptr
1ad60     50 00 00 FF 
1ad64     EC E4 85 F1 | 	sub	objptr, ##41196
1ad68     01 18 16 F2 | 	cmp	arg04, #1 wc
1ad6c     30 00 90 CD |  if_b	jmp	#LR__2140
1ad70     50 00 00 FF 
1ad74     F0 E4 05 F1 | 	add	objptr, ##41200
1ad78     F2 12 02 F6 | 	mov	arg01, objptr
1ad7c     38 E4 85 F1 | 	sub	objptr, #56
1ad80     F2 14 02 FB | 	rdlong	arg02, objptr
1ad84     18 16 06 F6 | 	mov	arg03, #24
1ad88     44 00 00 FF 
1ad8c     EC E5 85 F1 | 	sub	objptr, ##35308
1ad90     DC AE B0 FD | 	call	#_psram_spin2_read1
1ad94     0B 00 00 FF 
1ad98     CC E4 85 F1 | 	sub	objptr, ##5836
1ad9c                 | '   psram.read1(varptr(runheader),runptr,24)  
1ad9c                 | '   return
1ad9c     0C 03 90 FD | 	jmp	#LR__2147
1ada0                 | LR__2140
1ada0     50 00 00 FF 
1ada4     EC E4 05 F1 | 	add	objptr, ##41196
1ada8     F2 02 68 FC | 	wrlong	#1, objptr
1adac     04 E4 05 F1 | 	add	objptr, #4
1adb0     F2 12 02 F6 | 	mov	arg01, objptr
1adb4     38 E4 85 F1 | 	sub	objptr, #56
1adb8     F2 14 02 FB | 	rdlong	arg02, objptr
1adbc     18 16 06 F6 | 	mov	arg03, #24
1adc0     44 00 00 FF 
1adc4     EC E5 85 F1 | 	sub	objptr, ##35308
1adc8     A4 AE B0 FD | 	call	#_psram_spin2_read1
1adcc                 | ' inrun=1
1adcc                 | ' psram.read1(varptr(runheader),runptr,24) 
1adcc                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1adcc     45 00 00 FF 
1add0     24 E4 05 F1 | 	add	objptr, ##35364
1add4     F2 2C 02 FB | 	rdlong	local04, objptr
1add8     50 00 00 FF 
1addc     F0 E4 85 F1 | 	sub	objptr, ##41200
1ade0     FF FF 7F FF 
1ade4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1ade8     50 00 00 AF 
1adec     EC E4 05 A1 |  if_e	add	objptr, ##41196
1adf0     F2 00 68 AC |  if_e	wrlong	#0, objptr
1adf4     50 00 00 AF 
1adf8     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1adfc     AC 02 90 AD |  if_e	jmp	#LR__2147
1ae00                 | ' do 
1ae00                 | LR__2141
1ae00                 | '   if runptr<>oldrunptr then
1ae00     50 00 00 FF 
1ae04     B8 E4 05 F1 | 	add	objptr, ##41144
1ae08     F2 2C 02 FB | 	rdlong	local04, objptr
1ae0c     08 E4 05 F1 | 	add	objptr, #8
1ae10     F2 18 02 FB | 	rdlong	arg04, objptr
1ae14     50 00 00 FF 
1ae18     C0 E4 85 F1 | 	sub	objptr, ##41152
1ae1c     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1ae20     CC 00 90 AD |  if_e	jmp	#LR__2142
1ae24     50 00 00 FF 
1ae28     F0 E4 05 F1 | 	add	objptr, ##41200
1ae2c     F2 12 02 F6 | 	mov	arg01, objptr
1ae30     38 E4 85 F1 | 	sub	objptr, #56
1ae34     F2 14 02 FB | 	rdlong	arg02, objptr
1ae38     18 16 06 F6 | 	mov	arg03, #24
1ae3c     44 00 00 FF 
1ae40     EC E5 85 F1 | 	sub	objptr, ##35308
1ae44     28 AE B0 FD | 	call	#_psram_spin2_read1
1ae48     3B 00 00 FF 
1ae4c     B0 E5 05 F1 | 	add	objptr, ##30640
1ae50     F2 12 02 F6 | 	mov	arg01, objptr
1ae54     09 00 00 FF 
1ae58     3C E4 05 F1 | 	add	objptr, ##4668
1ae5c     F2 14 02 FB | 	rdlong	arg02, objptr
1ae60     0B 00 00 FF 
1ae64     54 E4 85 F1 | 	sub	objptr, ##5716
1ae68     F2 2C 02 FB | 	rdlong	local04, objptr
1ae6c     01 2C 66 F0 | 	shl	local04, #1
1ae70     16 15 02 F1 | 	add	arg02, local04
1ae74     0B 00 00 FF 
1ae78     94 E4 05 F1 | 	add	objptr, ##5780
1ae7c     F2 16 02 FB | 	rdlong	arg03, objptr
1ae80     40 E4 85 F1 | 	sub	objptr, #64
1ae84     F2 2C 02 FB | 	rdlong	local04, objptr
1ae88     16 17 82 F1 | 	sub	arg03, local04
1ae8c     44 00 00 FF 
1ae90     EC E5 85 F1 | 	sub	objptr, ##35308
1ae94     D8 AD B0 FD | 	call	#_psram_spin2_read1
1ae98     45 00 00 FF 
1ae9c     2C E4 05 F1 | 	add	objptr, ##35372
1aea0     F2 2C 02 FB | 	rdlong	local04, objptr
1aea4     40 E4 85 F1 | 	sub	objptr, #64
1aea8     F2 14 02 FB | 	rdlong	arg02, objptr
1aeac     0A 2D 82 F1 | 	sub	local04, arg02
1aeb0     0B 00 00 FF 
1aeb4     54 E4 85 F1 | 	sub	objptr, ##5716
1aeb8     F2 14 02 FB | 	rdlong	arg02, objptr
1aebc     0A 2D 12 FD | 	qdiv	local04, arg02
1aec0     05 00 00 FF 
1aec4     18 E4 05 F1 | 	add	objptr, ##2584
1aec8     18 2C 62 FD | 	getqx	local04
1aecc     03 2C 86 F1 | 	sub	local04, #3
1aed0     F2 2C 62 FC | 	wrlong	local04, objptr
1aed4     06 00 00 FF 
1aed8     3C E4 05 F1 | 	add	objptr, ##3132
1aedc     F2 2C 02 FB | 	rdlong	local04, objptr
1aee0     08 E4 05 F1 | 	add	objptr, #8
1aee4     F2 2C 62 FC | 	wrlong	local04, objptr
1aee8     50 00 00 FF 
1aeec     C0 E4 85 F1 | 	sub	objptr, ##41152
1aef0                 | LR__2142
1aef0     50 00 00 FF 
1aef4     04 E5 05 F1 | 	add	objptr, ##41220
1aef8     F2 2C 02 FB | 	rdlong	local04, objptr
1aefc     4C E4 85 F1 | 	sub	objptr, #76
1af00     F2 2C 62 FC | 	wrlong	local04, objptr
1af04     04 E4 05 F1 | 	add	objptr, #4
1af08     F2 12 02 FB | 	rdlong	arg01, objptr
1af0c     50 00 00 FF 
1af10     BC E4 85 F1 | 	sub	objptr, ##41148
1af14     4C 25 BF FD | 	call	#_execute_line
1af18     50 00 00 FF 
1af1c     BC E4 05 F1 | 	add	objptr, ##41148
1af20     F2 FA 61 FC | 	wrlong	result1, objptr
1af24     04 E4 85 F1 | 	sub	objptr, #4
1af28     F2 2C 02 FB | 	rdlong	local04, objptr
1af2c     50 00 00 FF 
1af30     B8 E4 85 F1 | 	sub	objptr, ##41144
1af34     FF FF 3F FF 
1af38     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1af3c     4C 00 90 AD |  if_e	jmp	#LR__2145
1af40     E0 12 06 F6 | 	mov	arg01, #224
1af44     B8 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1af48     00 FA 0D F2 | 	cmp	result1, #0 wz
1af4c     10 00 90 5D |  if_ne	jmp	#LR__2143
1af50     E4 12 06 F6 | 	mov	arg01, #228
1af54     A8 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1af58     00 FA 0D F2 | 	cmp	result1, #0 wz
1af5c     10 00 90 AD |  if_e	jmp	#LR__2144
1af60                 | LR__2143
1af60     06 12 06 F6 | 	mov	arg01, #6
1af64     98 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1af68     00 FA 0D F2 | 	cmp	result1, #0 wz
1af6c     1C 00 90 5D |  if_ne	jmp	#LR__2145
1af70                 | LR__2144
1af70     50 00 00 FF 
1af74     EC E4 05 F1 | 	add	objptr, ##41196
1af78     F2 2C 02 FB | 	rdlong	local04, objptr
1af7c     50 00 00 FF 
1af80     EC E4 85 F1 | 	sub	objptr, ##41196
1af84     02 2C 0E F2 | 	cmp	local04, #2 wz
1af88     74 FE 9F 5D |  if_ne	jmp	#LR__2141
1af8c                 | LR__2145
1af8c                 | '   ''do whatever kbm.peek_latest_key()=$106 
1af8c                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1af8c     50 00 00 FF 
1af90     B8 E4 05 F1 | 	add	objptr, ##41144
1af94     F2 2C 02 FB | 	rdlong	local04, objptr
1af98     50 00 00 FF 
1af9c     B8 E4 85 F1 | 	sub	objptr, ##41144
1afa0     FF FF 3F FF 
1afa4     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1afa8     AC 00 90 AD |  if_e	jmp	#LR__2146
1afac     50 00 00 FF 
1afb0     EC E4 05 F1 | 	add	objptr, ##41196
1afb4     F2 2C 02 FB | 	rdlong	local04, objptr
1afb8     50 00 00 FF 
1afbc     EC E4 85 F1 | 	sub	objptr, ##41196
1afc0     01 2C 0E F2 | 	cmp	local04, #1 wz
1afc4     90 00 90 5D |  if_ne	jmp	#LR__2146
1afc8                 | '   print: print "Stopped at line ";runheader(0) 
1afc8     00 12 06 F6 | 	mov	arg01, #0
1afcc     CC 15 B1 FD | 	call	#__system___getiolock_0602
1afd0     FD 12 02 F6 | 	mov	arg01, result1
1afd4     20 B9 B0 FD | 	call	#__system___lockmem
1afd8     00 12 06 F6 | 	mov	arg01, #0
1afdc     0A 14 06 F6 | 	mov	arg02, #10
1afe0     00 16 06 F6 | 	mov	arg03, #0
1afe4     B0 C5 B0 FD | 	call	#__system___basic_print_char
1afe8     00 12 06 F6 | 	mov	arg01, #0
1afec     AC 15 B1 FD | 	call	#__system___getiolock_0602
1aff0     FD 00 68 FC | 	wrlong	#0, result1
1aff4     00 12 06 F6 | 	mov	arg01, #0
1aff8     A0 15 B1 FD | 	call	#__system___getiolock_0602
1affc     FD 12 02 F6 | 	mov	arg01, result1
1b000     F4 B8 B0 FD | 	call	#__system___lockmem
1b004     B7 01 00 FF 
1b008     8B 15 06 F6 | 	mov	arg02, ##@LR__5962
1b00c     00 12 06 F6 | 	mov	arg01, #0
1b010     00 16 06 F6 | 	mov	arg03, #0
1b014     D8 C5 B0 FD | 	call	#__system___basic_print_string
1b018     50 00 00 FF 
1b01c     F0 E4 05 F1 | 	add	objptr, ##41200
1b020     F2 14 02 FB | 	rdlong	arg02, objptr
1b024     50 00 00 FF 
1b028     F0 E4 85 F1 | 	sub	objptr, ##41200
1b02c     00 12 06 F6 | 	mov	arg01, #0
1b030     00 16 06 F6 | 	mov	arg03, #0
1b034     0A 18 06 F6 | 	mov	arg04, #10
1b038     38 C6 B0 FD | 	call	#__system___basic_print_unsigned
1b03c     00 12 06 F6 | 	mov	arg01, #0
1b040     0A 14 06 F6 | 	mov	arg02, #10
1b044     00 16 06 F6 | 	mov	arg03, #0
1b048     4C C5 B0 FD | 	call	#__system___basic_print_char
1b04c     00 12 06 F6 | 	mov	arg01, #0
1b050     48 15 B1 FD | 	call	#__system___getiolock_0602
1b054     FD 00 68 FC | 	wrlong	#0, result1
1b058                 | LR__2146
1b058     50 00 00 FF 
1b05c     EC E4 05 F1 | 	add	objptr, ##41196
1b060     F2 00 68 FC | 	wrlong	#0, objptr
1b064     06 00 00 FF 
1b068     6C E4 85 F1 | 	sub	objptr, ##3180
1b06c     F2 26 62 FC | 	wrlong	local01, objptr
1b070     06 00 00 FF 
1b074     38 E4 05 F1 | 	add	objptr, ##3128
1b078     F2 28 62 FC | 	wrlong	local02, objptr
1b07c     04 E4 05 F1 | 	add	objptr, #4
1b080     F2 2A 62 FC | 	wrlong	local03, objptr
1b084     50 00 00 FF 
1b088     BC E4 85 F1 | 	sub	objptr, ##41148
1b08c     11 12 06 F6 | 	mov	arg01, #17
1b090     08 14 06 F6 | 	mov	arg02, #8
1b094     10 16 06 F6 | 	mov	arg03, #16
1b098     B8 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1b09c     10 12 06 F6 | 	mov	arg01, #16
1b0a0     20 14 06 F6 | 	mov	arg02, #32
1b0a4     20 16 06 F6 | 	mov	arg03, #32
1b0a8     A8 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1b0ac                 | LR__2147
1b0ac     A7 F0 03 F6 | 	mov	ptra, fp
1b0b0     B2 00 A0 FD | 	call	#popregs_
1b0b4                 | _do_run_ret
1b0b4     2D 00 64 FD | 	ret
1b0b8                 | 
1b0b8                 | ' 
1b0b8                 | ' ' ------------------ save
1b0b8                 | ' 
1b0b8                 | ' sub do_save                        
1b0b8                 | _do_save
1b0b8     04 4A 05 F6 | 	mov	COUNT_, #4
1b0bc     A8 00 A0 FD | 	call	#pushregs_
1b0c0     B8 F0 07 F1 | 	add	ptra, #184
1b0c4     4A 00 00 FF 
1b0c8     80 E4 05 F1 | 	add	objptr, ##38016
1b0cc     F2 26 02 FB | 	rdlong	local01, objptr
1b0d0     13 29 02 F6 | 	mov	local02, local01
1b0d4     01 28 66 F0 | 	shl	local02, #1
1b0d8     13 29 02 F1 | 	add	local02, local01
1b0dc     02 28 66 F0 | 	shl	local02, #2
1b0e0     03 00 00 FF 
1b0e4     04 E4 85 F1 | 	sub	objptr, ##1540
1b0e8     F2 28 02 F1 | 	add	local02, objptr
1b0ec     14 2B 02 FB | 	rdlong	local03, local02
1b0f0     10 4E 05 F1 | 	add	fp, #16
1b0f4     A7 2A 62 FC | 	wrlong	local03, fp
1b0f8                 | ' 
1b0f8                 | ' numpar=compiledline(lineptr_e).result.uresult
1b0f8                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1b0f8     10 4E 85 F1 | 	sub	fp, #16
1b0fc     01 2A 56 F2 | 	cmps	local03, #1 wc
1b100     47 00 00 FF 
1b104     7C E4 85 F1 | 	sub	objptr, ##36476
1b108     20 00 90 CD |  if_b	jmp	#LR__2150
1b10c     58 24 BF FD | 	call	#_pop
1b110     A7 FA 61 FC | 	wrlong	result1, fp
1b114     04 4E 05 F1 | 	add	fp, #4
1b118     A7 FC 61 FC | 	wrlong	result2, fp
1b11c     04 4E 05 F1 | 	add	fp, #4
1b120     A7 FE 61 FC | 	wrlong	result3, fp
1b124     08 4E 85 F1 | 	sub	fp, #8
1b128     24 00 90 FD | 	jmp	#LR__2151
1b12c                 | LR__2150
1b12c     52 00 00 FF 
1b130     C4 E4 05 F1 | 	add	objptr, ##42180
1b134     F2 2A 02 FB | 	rdlong	local03, objptr
1b138     52 00 00 FF 
1b13c     C4 E4 85 F1 | 	sub	objptr, ##42180
1b140     A7 2A 62 FC | 	wrlong	local03, fp
1b144     08 4E 05 F1 | 	add	fp, #8
1b148     A7 3E 68 FC | 	wrlong	#31, fp
1b14c     08 4E 85 F1 | 	sub	fp, #8
1b150                 | LR__2151
1b150                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1b150     4A 00 00 FF 
1b154     88 E4 05 F1 | 	add	objptr, ##38024
1b158     F2 12 02 FB | 	rdlong	arg01, objptr
1b15c     4A 00 00 FF 
1b160     88 E4 85 F1 | 	sub	objptr, ##38024
1b164     70 80 B0 FD | 	call	#_pslpeek
1b168     FF FF 7F FF 
1b16c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b170     10 00 90 5D |  if_ne	jmp	#LR__2152
1b174     1B 12 06 F6 | 	mov	arg01, #27
1b178     00 14 06 F6 | 	mov	arg02, #0
1b17c     88 7D B0 FD | 	call	#_printerror
1b180     CC 02 90 FD | 	jmp	#LR__2158
1b184                 | LR__2152
1b184                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b184     08 4E 05 F1 | 	add	fp, #8
1b188     A7 2A 02 FB | 	rdlong	local03, fp
1b18c     08 4E 85 F1 | 	sub	fp, #8
1b190     2B 2A 0E F2 | 	cmp	local03, #43 wz
1b194     18 00 90 5D |  if_ne	jmp	#LR__2153
1b198     A7 12 02 FB | 	rdlong	arg01, fp
1b19c     40 25 BF FD | 	call	#_convertstring
1b1a0     A7 FA 61 FC | 	wrlong	result1, fp
1b1a4     08 4E 05 F1 | 	add	fp, #8
1b1a8     A7 3E 68 FC | 	wrlong	#31, fp
1b1ac     08 4E 85 F1 | 	sub	fp, #8
1b1b0                 | LR__2153
1b1b0                 | ' if t1.result_type=result_string then
1b1b0     08 4E 05 F1 | 	add	fp, #8
1b1b4     A7 2A 02 FB | 	rdlong	local03, fp
1b1b8     08 4E 85 F1 | 	sub	fp, #8
1b1bc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b1c0     8C 02 90 5D |  if_ne	jmp	#LR__2157
1b1c4                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1b1c4     A7 12 02 FB | 	rdlong	arg01, fp
1b1c8     B7 01 00 FF 
1b1cc     9C 15 06 F6 | 	mov	arg02, ##@LR__5963
1b1d0     4C B7 B0 FD | 	call	#__system___string_cmp
1b1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1d8     52 00 00 AF 
1b1dc     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1b1e0     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1b1e4     A7 2A 62 AC |  if_e	wrlong	local03, fp
1b1e8     52 00 00 AF 
1b1ec     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1b1f0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b1f4     52 00 00 5F 
1b1f8     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1b1fc     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1b200     52 00 00 5F 
1b204     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1b208                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1b208     09 12 06 F6 | 	mov	arg01, #9
1b20c     44 0A B1 FD | 	call	#__system__close
1b210     09 2A 06 F6 | 	mov	local03, #9
1b214     4A 00 00 FF 
1b218     94 E4 05 F1 | 	add	objptr, ##38036
1b21c     F2 12 02 FB | 	rdlong	arg01, objptr
1b220     4A 00 00 FF 
1b224     94 E4 85 F1 | 	sub	objptr, ##38036
1b228     B7 01 00 FF 
1b22c     9D 15 06 F6 | 	mov	arg02, ##@LR__5964
1b230     20 B7 B0 FD | 	call	#__system___string_concat
1b234     FD 12 02 F6 | 	mov	arg01, result1
1b238     A7 14 02 FB | 	rdlong	arg02, fp
1b23c     14 B7 B0 FD | 	call	#__system___string_concat
1b240     FD 14 02 F6 | 	mov	arg02, result1
1b244     15 13 02 F6 | 	mov	arg01, local03
1b248     0D 16 06 F6 | 	mov	arg03, #13
1b24c     AC C2 B0 FD | 	call	#__system___basic_open_string
1b250     4A 00 00 FF 
1b254     88 E4 05 F1 | 	add	objptr, ##38024
1b258     F2 2A 02 FB | 	rdlong	local03, objptr
1b25c     4A 00 00 FF 
1b260     88 E4 85 F1 | 	sub	objptr, ##38024
1b264     B0 4E 05 F1 | 	add	fp, #176
1b268     A7 2A 62 FC | 	wrlong	local03, fp
1b26c     B0 4E 85 F1 | 	sub	fp, #176
1b270                 | '   saveptr=programstart
1b270                 | '   do
1b270                 | LR__2154
1b270     14 4E 05 F1 | 	add	fp, #20
1b274     A7 12 02 F6 | 	mov	arg01, fp
1b278     9C 4E 05 F1 | 	add	fp, #156
1b27c     A7 14 02 FB | 	rdlong	arg02, fp
1b280     B0 4E 85 F1 | 	sub	fp, #176
1b284     18 16 06 F6 | 	mov	arg03, #24
1b288     0B 00 00 FF 
1b28c     CC E4 05 F1 | 	add	objptr, ##5836
1b290     DC A9 B0 FD | 	call	#_psram_spin2_read1
1b294     2C 4E 05 F1 | 	add	fp, #44
1b298     A7 12 02 F6 | 	mov	arg01, fp
1b29c     10 4E 85 F1 | 	sub	fp, #16
1b2a0     A7 14 02 FB | 	rdlong	arg02, fp
1b2a4     04 4E 05 F1 | 	add	fp, #4
1b2a8     A7 16 02 FB | 	rdlong	arg03, fp
1b2ac     20 4E 85 F1 | 	sub	fp, #32
1b2b0     BC A9 B0 FD | 	call	#_psram_spin2_read1
1b2b4     0B 00 00 FF 
1b2b8     CC E4 85 F1 | 	sub	objptr, ##5836
1b2bc     B7 01 00 FF 
1b2c0     9F 2B 06 F6 | 	mov	local03, ##@LR__5965
1b2c4     AC 4E 05 F1 | 	add	fp, #172
1b2c8     A7 2A 62 FC | 	wrlong	local03, fp
1b2cc                 | '     psram.read1(varptr(header(0)),saveptr,24)
1b2cc                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1b2cc                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1b2cc     A0 4E 85 F1 | 	sub	fp, #160
1b2d0     A7 02 68 FC | 	wrlong	#1, fp
1b2d4     14 4E 05 F1 | 	add	fp, #20
1b2d8     A7 2C 02 FB | 	rdlong	local04, fp
1b2dc     20 4E 85 F1 | 	sub	fp, #32
1b2e0     01 2C 06 F1 | 	add	local04, #1
1b2e4                 | LR__2155
1b2e4     0C 4E 05 F1 | 	add	fp, #12
1b2e8     A7 2A 02 FB | 	rdlong	local03, fp
1b2ec     0C 4E 85 F1 | 	sub	fp, #12
1b2f0     16 2B 52 F2 | 	cmps	local03, local04 wc
1b2f4     54 00 90 3D |  if_ae	jmp	#LR__2156
1b2f8     AC 4E 05 F1 | 	add	fp, #172
1b2fc     A7 26 02 FB | 	rdlong	local01, fp
1b300     A0 4E 85 F1 | 	sub	fp, #160
1b304     A7 2A 02 FB | 	rdlong	local03, fp
1b308     01 2A 86 F1 | 	sub	local03, #1
1b30c     20 4E 05 F1 | 	add	fp, #32
1b310     A7 2A 02 F1 | 	add	local03, fp
1b314     15 13 C2 FA | 	rdbyte	arg01, local03
1b318     2C 4E 85 F1 | 	sub	fp, #44
1b31c     1C D8 B0 FD | 	call	#__system__Chr_S
1b320     FD 14 02 F6 | 	mov	arg02, result1
1b324     13 13 02 F6 | 	mov	arg01, local01
1b328     28 B6 B0 FD | 	call	#__system___string_concat
1b32c     AC 4E 05 F1 | 	add	fp, #172
1b330     A7 FA 61 FC | 	wrlong	result1, fp
1b334     A0 4E 85 F1 | 	sub	fp, #160
1b338     A7 2A 02 FB | 	rdlong	local03, fp
1b33c     01 2A 06 F1 | 	add	local03, #1
1b340     A7 2A 62 FC | 	wrlong	local03, fp
1b344     0C 4E 85 F1 | 	sub	fp, #12
1b348     98 FF 9F FD | 	jmp	#LR__2155
1b34c                 | LR__2156
1b34c                 | '     print #9, saveline$
1b34c     09 12 06 F6 | 	mov	arg01, #9
1b350     48 12 B1 FD | 	call	#__system___getiolock_0602
1b354     FD 12 02 F6 | 	mov	arg01, result1
1b358     9C B5 B0 FD | 	call	#__system___lockmem
1b35c     AC 4E 05 F1 | 	add	fp, #172
1b360     A7 14 02 FB | 	rdlong	arg02, fp
1b364     AC 4E 85 F1 | 	sub	fp, #172
1b368     09 12 06 F6 | 	mov	arg01, #9
1b36c     00 16 06 F6 | 	mov	arg03, #0
1b370     7C C2 B0 FD | 	call	#__system___basic_print_string
1b374     09 12 06 F6 | 	mov	arg01, #9
1b378     0A 14 06 F6 | 	mov	arg02, #10
1b37c     00 16 06 F6 | 	mov	arg03, #0
1b380     14 C2 B0 FD | 	call	#__system___basic_print_char
1b384     09 12 06 F6 | 	mov	arg01, #9
1b388     10 12 B1 FD | 	call	#__system___getiolock_0602
1b38c     FD 00 68 FC | 	wrlong	#0, result1
1b390     28 4E 05 F1 | 	add	fp, #40
1b394     A7 2A 02 FB | 	rdlong	local03, fp
1b398     88 4E 05 F1 | 	add	fp, #136
1b39c     A7 2A 62 FC | 	wrlong	local03, fp
1b3a0     88 4E 85 F1 | 	sub	fp, #136
1b3a4     A7 2A 02 FB | 	rdlong	local03, fp
1b3a8     28 4E 85 F1 | 	sub	fp, #40
1b3ac     FF FF 3F FF 
1b3b0     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1b3b4     B8 FE 9F 5D |  if_ne	jmp	#LR__2154
1b3b8                 | '   close #9  
1b3b8     09 12 06 F6 | 	mov	arg01, #9
1b3bc     94 08 B1 FD | 	call	#__system__close
1b3c0                 | '   print "Saved as ";currentdir$+"/"+loadname
1b3c0     00 12 06 F6 | 	mov	arg01, #0
1b3c4     D4 11 B1 FD | 	call	#__system___getiolock_0602
1b3c8     FD 12 02 F6 | 	mov	arg01, result1
1b3cc     28 B5 B0 FD | 	call	#__system___lockmem
1b3d0     B7 01 00 FF 
1b3d4     A0 15 06 F6 | 	mov	arg02, ##@LR__5966
1b3d8     00 12 06 F6 | 	mov	arg01, #0
1b3dc     00 16 06 F6 | 	mov	arg03, #0
1b3e0     0C C2 B0 FD | 	call	#__system___basic_print_string
1b3e4     00 28 06 F6 | 	mov	local02, #0
1b3e8     4A 00 00 FF 
1b3ec     94 E4 05 F1 | 	add	objptr, ##38036
1b3f0     F2 12 02 FB | 	rdlong	arg01, objptr
1b3f4     4A 00 00 FF 
1b3f8     94 E4 85 F1 | 	sub	objptr, ##38036
1b3fc     B7 01 00 FF 
1b400     AA 15 06 F6 | 	mov	arg02, ##@LR__5967
1b404     4C B5 B0 FD | 	call	#__system___string_concat
1b408     FD 12 02 F6 | 	mov	arg01, result1
1b40c     52 00 00 FF 
1b410     C4 E4 05 F1 | 	add	objptr, ##42180
1b414     F2 14 02 FB | 	rdlong	arg02, objptr
1b418     52 00 00 FF 
1b41c     C4 E4 85 F1 | 	sub	objptr, ##42180
1b420     30 B5 B0 FD | 	call	#__system___string_concat
1b424     FD 14 02 F6 | 	mov	arg02, result1
1b428     14 13 02 F6 | 	mov	arg01, local02
1b42c     00 16 06 F6 | 	mov	arg03, #0
1b430     BC C1 B0 FD | 	call	#__system___basic_print_string
1b434     00 12 06 F6 | 	mov	arg01, #0
1b438     0A 14 06 F6 | 	mov	arg02, #10
1b43c     00 16 06 F6 | 	mov	arg03, #0
1b440     54 C1 B0 FD | 	call	#__system___basic_print_char
1b444     00 12 06 F6 | 	mov	arg01, #0
1b448     50 11 B1 FD | 	call	#__system___getiolock_0602
1b44c     FD 00 68 FC | 	wrlong	#0, result1
1b450                 | LR__2157
1b450                 | LR__2158
1b450     A7 F0 03 F6 | 	mov	ptra, fp
1b454     B2 00 A0 FD | 	call	#popregs_
1b458                 | _do_save_ret
1b458     2D 00 64 FD | 	ret
1b45c                 | 
1b45c                 | ' 
1b45c                 | ' ' ------------------ setdelay
1b45c                 | ' 
1b45c                 | ' sub do_setdelay
1b45c                 | _do_setdelay
1b45c     02 4A 05 F6 | 	mov	COUNT_, #2
1b460     A8 00 A0 FD | 	call	#pushregs_
1b464     18 F0 07 F1 | 	add	ptra, #24
1b468     FC 20 BF FD | 	call	#_pop
1b46c     FD 12 02 F6 | 	mov	arg01, result1
1b470     FE 26 02 F6 | 	mov	local01, result2
1b474     FF 28 02 F6 | 	mov	local02, result3
1b478     A7 12 62 FC | 	wrlong	arg01, fp
1b47c     04 4E 05 F1 | 	add	fp, #4
1b480     A7 26 62 FC | 	wrlong	local01, fp
1b484     04 4E 05 F1 | 	add	fp, #4
1b488     A7 28 62 FC | 	wrlong	local02, fp
1b48c     08 4E 85 F1 | 	sub	fp, #8
1b490     D4 20 BF FD | 	call	#_pop
1b494     FD 28 02 F6 | 	mov	local02, result1
1b498     0C 4E 05 F1 | 	add	fp, #12
1b49c     A7 28 62 FC | 	wrlong	local02, fp
1b4a0     04 4E 05 F1 | 	add	fp, #4
1b4a4     A7 FC 61 FC | 	wrlong	result2, fp
1b4a8     04 4E 05 F1 | 	add	fp, #4
1b4ac     A7 FE 61 FC | 	wrlong	result3, fp
1b4b0     08 4E 85 F1 | 	sub	fp, #8
1b4b4     A7 12 02 F6 | 	mov	arg01, fp
1b4b8     0C 4E 85 F1 | 	sub	fp, #12
1b4bc     8C 22 BF FD | 	call	#_converttoint
1b4c0     FD 28 02 F6 | 	mov	local02, result1
1b4c4     14 27 02 F6 | 	mov	local01, local02
1b4c8     01 26 66 F0 | 	shl	local01, #1
1b4cc     14 27 02 F1 | 	add	local01, local02
1b4d0     03 26 66 F0 | 	shl	local01, #3
1b4d4     14 00 00 FF 
1b4d8     38 E5 05 F1 | 	add	objptr, ##10552
1b4dc     F2 26 02 F1 | 	add	local01, objptr
1b4e0     A7 12 02 F6 | 	mov	arg01, fp
1b4e4     14 00 00 FF 
1b4e8     38 E5 85 F1 | 	sub	objptr, ##10552
1b4ec     5C 22 BF FD | 	call	#_converttoint
1b4f0     06 26 06 F1 | 	add	local01, #6
1b4f4     13 FB 51 FC | 	wrword	result1, local01
1b4f8     A7 F0 03 F6 | 	mov	ptra, fp
1b4fc     B2 00 A0 FD | 	call	#popregs_
1b500                 | _do_setdelay_ret
1b500     2D 00 64 FD | 	ret
1b504                 | 
1b504                 | ' 
1b504                 | ' ' ------------------ setenv
1b504                 | ' 
1b504                 | ' sub do_setenv
1b504                 | _do_setenv
1b504     02 4A 05 F6 | 	mov	COUNT_, #2
1b508     A8 00 A0 FD | 	call	#pushregs_
1b50c     18 F0 07 F1 | 	add	ptra, #24
1b510     54 20 BF FD | 	call	#_pop
1b514     FD 12 02 F6 | 	mov	arg01, result1
1b518     FE 26 02 F6 | 	mov	local01, result2
1b51c     FF 28 02 F6 | 	mov	local02, result3
1b520     A7 12 62 FC | 	wrlong	arg01, fp
1b524     04 4E 05 F1 | 	add	fp, #4
1b528     A7 26 62 FC | 	wrlong	local01, fp
1b52c     04 4E 05 F1 | 	add	fp, #4
1b530     A7 28 62 FC | 	wrlong	local02, fp
1b534     08 4E 85 F1 | 	sub	fp, #8
1b538     2C 20 BF FD | 	call	#_pop
1b53c     FD 28 02 F6 | 	mov	local02, result1
1b540     0C 4E 05 F1 | 	add	fp, #12
1b544     A7 28 62 FC | 	wrlong	local02, fp
1b548     04 4E 05 F1 | 	add	fp, #4
1b54c     A7 FC 61 FC | 	wrlong	result2, fp
1b550     04 4E 05 F1 | 	add	fp, #4
1b554     A7 FE 61 FC | 	wrlong	result3, fp
1b558     08 4E 85 F1 | 	sub	fp, #8
1b55c     A7 12 02 F6 | 	mov	arg01, fp
1b560     0C 4E 85 F1 | 	sub	fp, #12
1b564     E4 21 BF FD | 	call	#_converttoint
1b568     FD 28 02 F6 | 	mov	local02, result1
1b56c     14 27 02 F6 | 	mov	local01, local02
1b570     01 26 66 F0 | 	shl	local01, #1
1b574     14 27 02 F1 | 	add	local01, local02
1b578     03 26 66 F0 | 	shl	local01, #3
1b57c     14 00 00 FF 
1b580     38 E5 05 F1 | 	add	objptr, ##10552
1b584     F2 26 02 F1 | 	add	local01, objptr
1b588     A7 12 02 F6 | 	mov	arg01, fp
1b58c     14 00 00 FF 
1b590     38 E5 85 F1 | 	sub	objptr, ##10552
1b594     B4 21 BF FD | 	call	#_converttoint
1b598     05 26 06 F1 | 	add	local01, #5
1b59c     13 FB 41 FC | 	wrbyte	result1, local01
1b5a0     A7 F0 03 F6 | 	mov	ptra, fp
1b5a4     B2 00 A0 FD | 	call	#popregs_
1b5a8                 | _do_setenv_ret
1b5a8     2D 00 64 FD | 	ret
1b5ac                 | 
1b5ac                 | ' 
1b5ac                 | ' ' ------------------ setlen
1b5ac                 | ' 
1b5ac                 | ' sub do_setlen
1b5ac                 | _do_setlen
1b5ac     02 4A 05 F6 | 	mov	COUNT_, #2
1b5b0     A8 00 A0 FD | 	call	#pushregs_
1b5b4     18 F0 07 F1 | 	add	ptra, #24
1b5b8     AC 1F BF FD | 	call	#_pop
1b5bc     FD 12 02 F6 | 	mov	arg01, result1
1b5c0     FE 26 02 F6 | 	mov	local01, result2
1b5c4     FF 28 02 F6 | 	mov	local02, result3
1b5c8     A7 12 62 FC | 	wrlong	arg01, fp
1b5cc     04 4E 05 F1 | 	add	fp, #4
1b5d0     A7 26 62 FC | 	wrlong	local01, fp
1b5d4     04 4E 05 F1 | 	add	fp, #4
1b5d8     A7 28 62 FC | 	wrlong	local02, fp
1b5dc     08 4E 85 F1 | 	sub	fp, #8
1b5e0     84 1F BF FD | 	call	#_pop
1b5e4     FD 28 02 F6 | 	mov	local02, result1
1b5e8     0C 4E 05 F1 | 	add	fp, #12
1b5ec     A7 28 62 FC | 	wrlong	local02, fp
1b5f0     04 4E 05 F1 | 	add	fp, #4
1b5f4     A7 FC 61 FC | 	wrlong	result2, fp
1b5f8     04 4E 05 F1 | 	add	fp, #4
1b5fc     A7 FE 61 FC | 	wrlong	result3, fp
1b600     08 4E 85 F1 | 	sub	fp, #8
1b604     A7 12 02 F6 | 	mov	arg01, fp
1b608     0C 4E 85 F1 | 	sub	fp, #12
1b60c     3C 21 BF FD | 	call	#_converttoint
1b610     FD 28 02 F6 | 	mov	local02, result1
1b614     14 27 02 F6 | 	mov	local01, local02
1b618     01 26 66 F0 | 	shl	local01, #1
1b61c     14 27 02 F1 | 	add	local01, local02
1b620     03 26 66 F0 | 	shl	local01, #3
1b624     14 00 00 FF 
1b628     38 E5 05 F1 | 	add	objptr, ##10552
1b62c     F2 26 02 F1 | 	add	local01, objptr
1b630     A7 12 02 F6 | 	mov	arg01, fp
1b634     14 00 00 FF 
1b638     38 E5 85 F1 | 	sub	objptr, ##10552
1b63c     C8 21 BF FD | 	call	#_converttofloat
1b640     08 26 06 F1 | 	add	local01, #8
1b644     13 FB 61 FC | 	wrlong	result1, local01
1b648     A7 F0 03 F6 | 	mov	ptra, fp
1b64c     B2 00 A0 FD | 	call	#popregs_
1b650                 | _do_setlen_ret
1b650     2D 00 64 FD | 	ret
1b654                 | 
1b654                 | ' 
1b654                 | ' ' ------------------ setpan
1b654                 | ' 
1b654                 | ' sub do_setpan
1b654                 | _do_setpan
1b654     02 4A 05 F6 | 	mov	COUNT_, #2
1b658     A8 00 A0 FD | 	call	#pushregs_
1b65c     18 F0 07 F1 | 	add	ptra, #24
1b660     04 1F BF FD | 	call	#_pop
1b664     FD 12 02 F6 | 	mov	arg01, result1
1b668     FE 26 02 F6 | 	mov	local01, result2
1b66c     FF 28 02 F6 | 	mov	local02, result3
1b670     A7 12 62 FC | 	wrlong	arg01, fp
1b674     04 4E 05 F1 | 	add	fp, #4
1b678     A7 26 62 FC | 	wrlong	local01, fp
1b67c     04 4E 05 F1 | 	add	fp, #4
1b680     A7 28 62 FC | 	wrlong	local02, fp
1b684     08 4E 85 F1 | 	sub	fp, #8
1b688     DC 1E BF FD | 	call	#_pop
1b68c     FD 28 02 F6 | 	mov	local02, result1
1b690     0C 4E 05 F1 | 	add	fp, #12
1b694     A7 28 62 FC | 	wrlong	local02, fp
1b698     04 4E 05 F1 | 	add	fp, #4
1b69c     A7 FC 61 FC | 	wrlong	result2, fp
1b6a0     04 4E 05 F1 | 	add	fp, #4
1b6a4     A7 FE 61 FC | 	wrlong	result3, fp
1b6a8     08 4E 85 F1 | 	sub	fp, #8
1b6ac     A7 12 02 F6 | 	mov	arg01, fp
1b6b0     0C 4E 85 F1 | 	sub	fp, #12
1b6b4     94 20 BF FD | 	call	#_converttoint
1b6b8     FD 28 02 F6 | 	mov	local02, result1
1b6bc     14 27 02 F6 | 	mov	local01, local02
1b6c0     01 26 66 F0 | 	shl	local01, #1
1b6c4     14 27 02 F1 | 	add	local01, local02
1b6c8     03 26 66 F0 | 	shl	local01, #3
1b6cc     14 00 00 FF 
1b6d0     38 E5 05 F1 | 	add	objptr, ##10552
1b6d4     F2 26 02 F1 | 	add	local01, objptr
1b6d8     A7 12 02 F6 | 	mov	arg01, fp
1b6dc     14 00 00 FF 
1b6e0     38 E5 85 F1 | 	sub	objptr, ##10552
1b6e4     20 21 BF FD | 	call	#_converttofloat
1b6e8     10 26 06 F1 | 	add	local01, #16
1b6ec     13 FB 61 FC | 	wrlong	result1, local01
1b6f0     A7 F0 03 F6 | 	mov	ptra, fp
1b6f4     B2 00 A0 FD | 	call	#popregs_
1b6f8                 | _do_setpan_ret
1b6f8     2D 00 64 FD | 	ret
1b6fc                 | 
1b6fc                 | ' 
1b6fc                 | ' ' ------------------ setsustain
1b6fc                 | ' 
1b6fc                 | ' sub do_setsustain
1b6fc                 | _do_setsustain
1b6fc     02 4A 05 F6 | 	mov	COUNT_, #2
1b700     A8 00 A0 FD | 	call	#pushregs_
1b704     18 F0 07 F1 | 	add	ptra, #24
1b708     5C 1E BF FD | 	call	#_pop
1b70c     FD 12 02 F6 | 	mov	arg01, result1
1b710     FE 26 02 F6 | 	mov	local01, result2
1b714     FF 28 02 F6 | 	mov	local02, result3
1b718     A7 12 62 FC | 	wrlong	arg01, fp
1b71c     04 4E 05 F1 | 	add	fp, #4
1b720     A7 26 62 FC | 	wrlong	local01, fp
1b724     04 4E 05 F1 | 	add	fp, #4
1b728     A7 28 62 FC | 	wrlong	local02, fp
1b72c     08 4E 85 F1 | 	sub	fp, #8
1b730     34 1E BF FD | 	call	#_pop
1b734     FD 28 02 F6 | 	mov	local02, result1
1b738     0C 4E 05 F1 | 	add	fp, #12
1b73c     A7 28 62 FC | 	wrlong	local02, fp
1b740     04 4E 05 F1 | 	add	fp, #4
1b744     A7 FC 61 FC | 	wrlong	result2, fp
1b748     04 4E 05 F1 | 	add	fp, #4
1b74c     A7 FE 61 FC | 	wrlong	result3, fp
1b750     08 4E 85 F1 | 	sub	fp, #8
1b754     A7 12 02 F6 | 	mov	arg01, fp
1b758     0C 4E 85 F1 | 	sub	fp, #12
1b75c     EC 1F BF FD | 	call	#_converttoint
1b760     FD 28 02 F6 | 	mov	local02, result1
1b764     14 27 02 F6 | 	mov	local01, local02
1b768     01 26 66 F0 | 	shl	local01, #1
1b76c     14 27 02 F1 | 	add	local01, local02
1b770     03 26 66 F0 | 	shl	local01, #3
1b774     14 00 00 FF 
1b778     38 E5 05 F1 | 	add	objptr, ##10552
1b77c     F2 26 02 F1 | 	add	local01, objptr
1b780     A7 12 02 F6 | 	mov	arg01, fp
1b784     14 00 00 FF 
1b788     38 E5 85 F1 | 	sub	objptr, ##10552
1b78c     BC 1F BF FD | 	call	#_converttoint
1b790     14 26 06 F1 | 	add	local01, #20
1b794     13 FB 51 FC | 	wrword	result1, local01
1b798     A7 F0 03 F6 | 	mov	ptra, fp
1b79c     B2 00 A0 FD | 	call	#popregs_
1b7a0                 | _do_setsustain_ret
1b7a0     2D 00 64 FD | 	ret
1b7a4                 | 
1b7a4                 | ' 
1b7a4                 | ' ' ------------------ setvol
1b7a4                 | ' 
1b7a4                 | ' sub do_setvol
1b7a4                 | _do_setvol
1b7a4     02 4A 05 F6 | 	mov	COUNT_, #2
1b7a8     A8 00 A0 FD | 	call	#pushregs_
1b7ac     18 F0 07 F1 | 	add	ptra, #24
1b7b0     B4 1D BF FD | 	call	#_pop
1b7b4     FD 12 02 F6 | 	mov	arg01, result1
1b7b8     FE 26 02 F6 | 	mov	local01, result2
1b7bc     FF 28 02 F6 | 	mov	local02, result3
1b7c0     A7 12 62 FC | 	wrlong	arg01, fp
1b7c4     04 4E 05 F1 | 	add	fp, #4
1b7c8     A7 26 62 FC | 	wrlong	local01, fp
1b7cc     04 4E 05 F1 | 	add	fp, #4
1b7d0     A7 28 62 FC | 	wrlong	local02, fp
1b7d4     08 4E 85 F1 | 	sub	fp, #8
1b7d8     8C 1D BF FD | 	call	#_pop
1b7dc     FD 28 02 F6 | 	mov	local02, result1
1b7e0     0C 4E 05 F1 | 	add	fp, #12
1b7e4     A7 28 62 FC | 	wrlong	local02, fp
1b7e8     04 4E 05 F1 | 	add	fp, #4
1b7ec     A7 FC 61 FC | 	wrlong	result2, fp
1b7f0     04 4E 05 F1 | 	add	fp, #4
1b7f4     A7 FE 61 FC | 	wrlong	result3, fp
1b7f8     08 4E 85 F1 | 	sub	fp, #8
1b7fc     A7 12 02 F6 | 	mov	arg01, fp
1b800     0C 4E 85 F1 | 	sub	fp, #12
1b804     44 1F BF FD | 	call	#_converttoint
1b808     FD 28 02 F6 | 	mov	local02, result1
1b80c     14 27 02 F6 | 	mov	local01, local02
1b810     01 26 66 F0 | 	shl	local01, #1
1b814     14 27 02 F1 | 	add	local01, local02
1b818     03 26 66 F0 | 	shl	local01, #3
1b81c     14 00 00 FF 
1b820     38 E5 05 F1 | 	add	objptr, ##10552
1b824     F2 26 02 F1 | 	add	local01, objptr
1b828     A7 12 02 F6 | 	mov	arg01, fp
1b82c     14 00 00 FF 
1b830     38 E5 85 F1 | 	sub	objptr, ##10552
1b834     D0 1F BF FD | 	call	#_converttofloat
1b838     0C 26 06 F1 | 	add	local01, #12
1b83c     13 FB 61 FC | 	wrlong	result1, local01
1b840     A7 F0 03 F6 | 	mov	ptra, fp
1b844     B2 00 A0 FD | 	call	#popregs_
1b848                 | _do_setvol_ret
1b848     2D 00 64 FD | 	ret
1b84c                 | 
1b84c                 | ' 
1b84c                 | ' ' ------------------ setwave
1b84c                 | ' 
1b84c                 | ' sub do_setwave
1b84c                 | _do_setwave
1b84c     02 4A 05 F6 | 	mov	COUNT_, #2
1b850     A8 00 A0 FD | 	call	#pushregs_
1b854     18 F0 07 F1 | 	add	ptra, #24
1b858     0C 1D BF FD | 	call	#_pop
1b85c     FD 12 02 F6 | 	mov	arg01, result1
1b860     FE 26 02 F6 | 	mov	local01, result2
1b864     FF 28 02 F6 | 	mov	local02, result3
1b868     A7 12 62 FC | 	wrlong	arg01, fp
1b86c     04 4E 05 F1 | 	add	fp, #4
1b870     A7 26 62 FC | 	wrlong	local01, fp
1b874     04 4E 05 F1 | 	add	fp, #4
1b878     A7 28 62 FC | 	wrlong	local02, fp
1b87c     08 4E 85 F1 | 	sub	fp, #8
1b880     E4 1C BF FD | 	call	#_pop
1b884     FD 28 02 F6 | 	mov	local02, result1
1b888     0C 4E 05 F1 | 	add	fp, #12
1b88c     A7 28 62 FC | 	wrlong	local02, fp
1b890     04 4E 05 F1 | 	add	fp, #4
1b894     A7 FC 61 FC | 	wrlong	result2, fp
1b898     04 4E 05 F1 | 	add	fp, #4
1b89c     A7 FE 61 FC | 	wrlong	result3, fp
1b8a0     08 4E 85 F1 | 	sub	fp, #8
1b8a4     A7 12 02 F6 | 	mov	arg01, fp
1b8a8     0C 4E 85 F1 | 	sub	fp, #12
1b8ac     9C 1E BF FD | 	call	#_converttoint
1b8b0     FD 28 02 F6 | 	mov	local02, result1
1b8b4     14 27 02 F6 | 	mov	local01, local02
1b8b8     01 26 66 F0 | 	shl	local01, #1
1b8bc     14 27 02 F1 | 	add	local01, local02
1b8c0     03 26 66 F0 | 	shl	local01, #3
1b8c4     14 00 00 FF 
1b8c8     38 E5 05 F1 | 	add	objptr, ##10552
1b8cc     F2 26 02 F1 | 	add	local01, objptr
1b8d0     A7 12 02 F6 | 	mov	arg01, fp
1b8d4     14 00 00 FF 
1b8d8     38 E5 85 F1 | 	sub	objptr, ##10552
1b8dc     6C 1E BF FD | 	call	#_converttoint
1b8e0     04 26 06 F1 | 	add	local01, #4
1b8e4     13 FB 41 FC | 	wrbyte	result1, local01
1b8e8     A7 F0 03 F6 | 	mov	ptra, fp
1b8ec     B2 00 A0 FD | 	call	#popregs_
1b8f0                 | _do_setwave_ret
1b8f0     2D 00 64 FD | 	ret
1b8f4                 | 
1b8f4                 | ' 
1b8f4                 | ' ' ------------------ shutup
1b8f4                 | ' 
1b8f4                 | ' sub do_shutup
1b8f4                 | _do_shutup
1b8f4     03 4A 05 F6 | 	mov	COUNT_, #3
1b8f8     A8 00 A0 FD | 	call	#pushregs_
1b8fc     18 F0 07 F1 | 	add	ptra, #24
1b900     4A 00 00 FF 
1b904     80 E4 05 F1 | 	add	objptr, ##38016
1b908     F2 26 02 FB | 	rdlong	local01, objptr
1b90c     13 29 02 F6 | 	mov	local02, local01
1b910     01 28 66 F0 | 	shl	local02, #1
1b914     13 29 02 F1 | 	add	local02, local01
1b918     02 28 66 F0 | 	shl	local02, #2
1b91c     03 00 00 FF 
1b920     04 E4 85 F1 | 	sub	objptr, ##1540
1b924     F2 28 02 F1 | 	add	local02, objptr
1b928     14 2B 0A FB | 	rdlong	local03, local02 wz
1b92c     14 4E 05 F1 | 	add	fp, #20
1b930     A7 2A 62 FC | 	wrlong	local03, fp
1b934                 | ' 
1b934                 | ' numpar=compiledline(lineptr_e).result.uresult
1b934                 | ' if numpar=0 then
1b934     14 4E 85 F1 | 	sub	fp, #20
1b938     47 00 00 FF 
1b93c     7C E4 85 F1 | 	sub	objptr, ##36476
1b940     50 00 90 5D |  if_ne	jmp	#LR__2162
1b944                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1b944     10 4E 05 F1 | 	add	fp, #16
1b948     A7 00 68 FC | 	wrlong	#0, fp
1b94c     37 00 00 FF 
1b950     10 E4 05 F1 | 	add	objptr, ##28176
1b954     97 16 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
1b958                 | LR__2160
1b958     F2 12 02 FB | 	rdlong	arg01, objptr
1b95c     A7 2A 02 FB | 	rdlong	local03, fp
1b960     06 2A 66 F0 | 	shl	local03, #6
1b964     15 13 02 F1 | 	add	arg01, local03
1b968     14 12 06 F1 | 	add	arg01, #20
1b96c     09 01 58 FC | 	wrword	#0, arg01
1b970     A7 2A 02 FB | 	rdlong	local03, fp
1b974     01 2A 06 F1 | 	add	local03, #1
1b978     A7 2A 62 FC | 	wrlong	local03, fp
1b97c     08 2A 56 F2 | 	cmps	local03, #8 wc
1b980     D4 FF 9F CD |  if_b	jmp	#LR__2160
1b984                 | LR__2161
1b984     37 00 00 FF 
1b988     10 E4 85 F1 | 	sub	objptr, ##28176
1b98c     10 4E 85 F1 | 	sub	fp, #16
1b990     64 00 90 FD | 	jmp	#LR__2163
1b994                 | LR__2162
1b994     D0 1B BF FD | 	call	#_pop
1b998     FF 26 02 F6 | 	mov	local01, result3
1b99c     A7 FA 61 FC | 	wrlong	result1, fp
1b9a0     04 4E 05 F1 | 	add	fp, #4
1b9a4     A7 FC 61 FC | 	wrlong	result2, fp
1b9a8     04 4E 05 F1 | 	add	fp, #4
1b9ac     A7 26 62 FC | 	wrlong	local01, fp
1b9b0     08 4E 85 F1 | 	sub	fp, #8
1b9b4     A7 12 02 F6 | 	mov	arg01, fp
1b9b8     90 1D BF FD | 	call	#_converttoint
1b9bc     FD 2A 52 F6 | 	abs	local03, result1 wc
1b9c0     07 2A 06 F5 | 	and	local03, #7
1b9c4     15 29 82 F6 | 	negc	local02, local03
1b9c8     0C 4E 05 F1 | 	add	fp, #12
1b9cc     A7 28 62 FC | 	wrlong	local02, fp
1b9d0     37 00 00 FF 
1b9d4     10 E4 05 F1 | 	add	objptr, ##28176
1b9d8     F2 12 02 FB | 	rdlong	arg01, objptr
1b9dc     37 00 00 FF 
1b9e0     10 E4 85 F1 | 	sub	objptr, ##28176
1b9e4     0C 4E 85 F1 | 	sub	fp, #12
1b9e8     06 28 66 F0 | 	shl	local02, #6
1b9ec     14 13 02 F1 | 	add	arg01, local02
1b9f0     14 12 06 F1 | 	add	arg01, #20
1b9f4     09 01 58 FC | 	wrword	#0, arg01
1b9f8                 | LR__2163
1b9f8     A7 F0 03 F6 | 	mov	ptra, fp
1b9fc     B2 00 A0 FD | 	call	#popregs_
1ba00                 | _do_shutup_ret
1ba00     2D 00 64 FD | 	ret
1ba04                 | 
1ba04                 | ' 
1ba04                 | ' ' ------------------ sin
1ba04                 | ' 
1ba04                 | ' sub do_sin
1ba04                 | _do_sin
1ba04     01 4A 05 F6 | 	mov	COUNT_, #1
1ba08     A8 00 A0 FD | 	call	#pushregs_
1ba0c     10 F0 07 F1 | 	add	ptra, #16
1ba10     4A 00 00 FF 
1ba14     80 E4 05 F1 | 	add	objptr, ##38016
1ba18     F2 26 02 FB | 	rdlong	local01, objptr
1ba1c     13 17 02 F6 | 	mov	arg03, local01
1ba20     01 16 66 F0 | 	shl	arg03, #1
1ba24     13 17 02 F1 | 	add	arg03, local01
1ba28     02 16 66 F0 | 	shl	arg03, #2
1ba2c     03 00 00 FF 
1ba30     04 E4 85 F1 | 	sub	objptr, ##1540
1ba34     F2 16 02 F1 | 	add	arg03, objptr
1ba38     0B 17 02 FB | 	rdlong	arg03, arg03
1ba3c     0C 4E 05 F1 | 	add	fp, #12
1ba40     A7 16 62 FC | 	wrlong	arg03, fp
1ba44                 | ' 
1ba44                 | ' numpar=compiledline(lineptr_e).result.uresult
1ba44                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1ba44     0C 4E 85 F1 | 	sub	fp, #12
1ba48     02 16 16 F2 | 	cmp	arg03, #2 wc
1ba4c     47 00 00 FF 
1ba50     7C E4 85 F1 | 	sub	objptr, ##36476
1ba54     0C 4E 05 C1 |  if_b	add	fp, #12
1ba58     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1ba5c     0C 4E 85 C1 |  if_b	sub	fp, #12
1ba60     40 00 90 4D |  if_c_and_nz	jmp	#LR__2170
1ba64     00 12 06 F6 | 	mov	arg01, #0
1ba68     30 0B B1 FD | 	call	#__system___getiolock_0602
1ba6c     FD 12 02 F6 | 	mov	arg01, result1
1ba70     84 AE B0 FD | 	call	#__system___lockmem
1ba74     B7 01 00 FF 
1ba78     AC 15 06 F6 | 	mov	arg02, ##@LR__5968
1ba7c     00 12 06 F6 | 	mov	arg01, #0
1ba80     00 16 06 F6 | 	mov	arg03, #0
1ba84     68 BB B0 FD | 	call	#__system___basic_print_string
1ba88     00 12 06 F6 | 	mov	arg01, #0
1ba8c     0C 0B B1 FD | 	call	#__system___getiolock_0602
1ba90     FD 00 68 FC | 	wrlong	#0, result1
1ba94     27 12 06 F6 | 	mov	arg01, #39
1ba98     00 14 06 F6 | 	mov	arg02, #0
1ba9c     68 74 B0 FD | 	call	#_printerror
1baa0     64 00 90 FD | 	jmp	#LR__2171
1baa4                 | LR__2170
1baa4     C0 1A BF FD | 	call	#_pop
1baa8     A7 FA 61 FC | 	wrlong	result1, fp
1baac     04 4E 05 F1 | 	add	fp, #4
1bab0     A7 FC 61 FC | 	wrlong	result2, fp
1bab4     04 4E 05 F1 | 	add	fp, #4
1bab8     A7 FE 61 FC | 	wrlong	result3, fp
1babc     08 4E 85 F1 | 	sub	fp, #8
1bac0     52 00 00 FF 
1bac4     A8 E4 05 F1 | 	add	objptr, ##42152
1bac8     F2 26 02 FB | 	rdlong	local01, objptr
1bacc     52 00 00 FF 
1bad0     A8 E4 85 F1 | 	sub	objptr, ##42152
1bad4     A7 12 02 F6 | 	mov	arg01, fp
1bad8     2C 1D BF FD | 	call	#_converttofloat
1badc     FD 14 02 F6 | 	mov	arg02, result1
1bae0     13 13 02 F6 | 	mov	arg01, local01
1bae4     8C DC B0 FD | 	call	#__system___float_mul
1bae8     FD 12 02 F6 | 	mov	arg01, result1
1baec     E4 E5 B0 FD | 	call	#__system____builtin_sinf
1baf0     A7 FA 61 FC | 	wrlong	result1, fp
1baf4     08 4E 05 F1 | 	add	fp, #8
1baf8     A7 3C 68 FC | 	wrlong	#30, fp
1bafc     08 4E 85 F1 | 	sub	fp, #8
1bb00     A7 12 02 F6 | 	mov	arg01, fp
1bb04     F8 1A BF FD | 	call	#_push
1bb08                 | LR__2171
1bb08     A7 F0 03 F6 | 	mov	ptra, fp
1bb0c     B2 00 A0 FD | 	call	#popregs_
1bb10                 | _do_sin_ret
1bb10     2D 00 64 FD | 	ret
1bb14                 | 
1bb14                 | ' 
1bb14                 | ' ' ------------------ skip
1bb14                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1bb14                 | ' 
1bb14                 | ' sub do_skip
1bb14                 | _do_skip
1bb14     4A 00 00 FF 
1bb18     80 E4 05 F1 | 	add	objptr, ##38016
1bb1c     F2 00 02 FB | 	rdlong	_var01, objptr
1bb20     00 03 02 F6 | 	mov	_var02, _var01
1bb24     01 02 66 F0 | 	shl	_var02, #1
1bb28     00 03 02 F1 | 	add	_var02, _var01
1bb2c     02 02 66 F0 | 	shl	_var02, #2
1bb30     03 00 00 FF 
1bb34     04 E4 85 F1 | 	sub	objptr, ##1540
1bb38     F2 02 02 F1 | 	add	_var02, objptr
1bb3c     01 03 02 FB | 	rdlong	_var02, _var02
1bb40     01 02 86 F1 | 	sub	_var02, #1
1bb44     03 00 00 FF 
1bb48     04 E4 05 F1 | 	add	objptr, ##1540
1bb4c     F2 02 62 FC | 	wrlong	_var02, objptr
1bb50     4A 00 00 FF 
1bb54     80 E4 85 F1 | 	sub	objptr, ##38016
1bb58                 | _do_skip_ret
1bb58     2D 00 64 FD | 	ret
1bb5c                 | 
1bb5c                 | ' 
1bb5c                 | ' ' ------------------ sprite
1bb5c                 | ' 
1bb5c                 | ' sub do_sprite
1bb5c                 | _do_sprite
1bb5c     00 4A 05 F6 | 	mov	COUNT_, #0
1bb60     A8 00 A0 FD | 	call	#pushregs_
1bb64     30 F0 07 F1 | 	add	ptra, #48
1bb68     FC 19 BF FD | 	call	#_pop
1bb6c     FD 16 02 F6 | 	mov	arg03, result1
1bb70     FE 14 02 F6 | 	mov	arg02, result2
1bb74     FF 12 02 F6 | 	mov	arg01, result3
1bb78     18 4E 05 F1 | 	add	fp, #24
1bb7c     A7 16 62 FC | 	wrlong	arg03, fp
1bb80     04 4E 05 F1 | 	add	fp, #4
1bb84     A7 14 62 FC | 	wrlong	arg02, fp
1bb88     04 4E 05 F1 | 	add	fp, #4
1bb8c     A7 12 62 FC | 	wrlong	arg01, fp
1bb90     20 4E 85 F1 | 	sub	fp, #32
1bb94     D0 19 BF FD | 	call	#_pop
1bb98     FD 16 02 F6 | 	mov	arg03, result1
1bb9c     FE 14 02 F6 | 	mov	arg02, result2
1bba0     FF 12 02 F6 | 	mov	arg01, result3
1bba4     0C 4E 05 F1 | 	add	fp, #12
1bba8     A7 16 62 FC | 	wrlong	arg03, fp
1bbac     04 4E 05 F1 | 	add	fp, #4
1bbb0     A7 14 62 FC | 	wrlong	arg02, fp
1bbb4     04 4E 05 F1 | 	add	fp, #4
1bbb8     A7 12 62 FC | 	wrlong	arg01, fp
1bbbc     14 4E 85 F1 | 	sub	fp, #20
1bbc0     A4 19 BF FD | 	call	#_pop
1bbc4     FF 16 02 F6 | 	mov	arg03, result3
1bbc8     A7 FA 61 FC | 	wrlong	result1, fp
1bbcc     04 4E 05 F1 | 	add	fp, #4
1bbd0     A7 FC 61 FC | 	wrlong	result2, fp
1bbd4     04 4E 05 F1 | 	add	fp, #4
1bbd8     A7 16 62 FC | 	wrlong	arg03, fp
1bbdc     08 4E 85 F1 | 	sub	fp, #8
1bbe0     A7 12 02 F6 | 	mov	arg01, fp
1bbe4     64 1B BF FD | 	call	#_converttoint
1bbe8     24 4E 05 F1 | 	add	fp, #36
1bbec     A7 FA 61 FC | 	wrlong	result1, fp
1bbf0     18 4E 85 F1 | 	sub	fp, #24
1bbf4     A7 12 02 F6 | 	mov	arg01, fp
1bbf8     0C 4E 85 F1 | 	sub	fp, #12
1bbfc     4C 1B BF FD | 	call	#_converttoint
1bc00     28 4E 05 F1 | 	add	fp, #40
1bc04     A7 FA 61 FC | 	wrlong	result1, fp
1bc08     10 4E 85 F1 | 	sub	fp, #16
1bc0c     A7 12 02 F6 | 	mov	arg01, fp
1bc10     18 4E 85 F1 | 	sub	fp, #24
1bc14     34 1B BF FD | 	call	#_converttoint
1bc18     2C 4E 05 F1 | 	add	fp, #44
1bc1c     A7 FA 61 FC | 	wrlong	result1, fp
1bc20     08 4E 85 F1 | 	sub	fp, #8
1bc24     A7 12 02 FB | 	rdlong	arg01, fp
1bc28     04 4E 05 F1 | 	add	fp, #4
1bc2c     A7 14 02 FB | 	rdlong	arg02, fp
1bc30     FD 16 02 F6 | 	mov	arg03, result1
1bc34     28 4E 85 F1 | 	sub	fp, #40
1bc38     B0 82 B0 FD | 	call	#_hg010b_spin2_setspritepos
1bc3c     A7 F0 03 F6 | 	mov	ptra, fp
1bc40     B2 00 A0 FD | 	call	#popregs_
1bc44                 | _do_sprite_ret
1bc44     2D 00 64 FD | 	ret
1bc48                 | 
1bc48                 | ' 
1bc48                 | ' ' ------------------ sqr
1bc48                 | ' 
1bc48                 | ' sub do_sqr
1bc48                 | _do_sqr
1bc48     01 4A 05 F6 | 	mov	COUNT_, #1
1bc4c     A8 00 A0 FD | 	call	#pushregs_
1bc50     10 F0 07 F1 | 	add	ptra, #16
1bc54     4A 00 00 FF 
1bc58     80 E4 05 F1 | 	add	objptr, ##38016
1bc5c     F2 26 02 FB | 	rdlong	local01, objptr
1bc60     13 17 02 F6 | 	mov	arg03, local01
1bc64     01 16 66 F0 | 	shl	arg03, #1
1bc68     13 17 02 F1 | 	add	arg03, local01
1bc6c     02 16 66 F0 | 	shl	arg03, #2
1bc70     03 00 00 FF 
1bc74     04 E4 85 F1 | 	sub	objptr, ##1540
1bc78     F2 16 02 F1 | 	add	arg03, objptr
1bc7c     0B 17 02 FB | 	rdlong	arg03, arg03
1bc80     0C 4E 05 F1 | 	add	fp, #12
1bc84     A7 16 62 FC | 	wrlong	arg03, fp
1bc88                 | ' 
1bc88                 | ' numpar=compiledline(lineptr_e).result.uresult
1bc88                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1bc88     0C 4E 85 F1 | 	sub	fp, #12
1bc8c     02 16 16 F2 | 	cmp	arg03, #2 wc
1bc90     47 00 00 FF 
1bc94     7C E4 85 F1 | 	sub	objptr, ##36476
1bc98     0C 4E 05 C1 |  if_b	add	fp, #12
1bc9c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1bca0     0C 4E 85 C1 |  if_b	sub	fp, #12
1bca4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2180
1bca8     00 12 06 F6 | 	mov	arg01, #0
1bcac     EC 08 B1 FD | 	call	#__system___getiolock_0602
1bcb0     FD 12 02 F6 | 	mov	arg01, result1
1bcb4     40 AC B0 FD | 	call	#__system___lockmem
1bcb8     B7 01 00 FF 
1bcbc     B2 15 06 F6 | 	mov	arg02, ##@LR__5969
1bcc0     00 12 06 F6 | 	mov	arg01, #0
1bcc4     00 16 06 F6 | 	mov	arg03, #0
1bcc8     24 B9 B0 FD | 	call	#__system___basic_print_string
1bccc     00 12 06 F6 | 	mov	arg01, #0
1bcd0     C8 08 B1 FD | 	call	#__system___getiolock_0602
1bcd4     FD 00 68 FC | 	wrlong	#0, result1
1bcd8     27 12 06 F6 | 	mov	arg01, #39
1bcdc     00 14 06 F6 | 	mov	arg02, #0
1bce0     24 72 B0 FD | 	call	#_printerror
1bce4     48 00 90 FD | 	jmp	#LR__2181
1bce8                 | LR__2180
1bce8     7C 18 BF FD | 	call	#_pop
1bcec     FF 26 02 F6 | 	mov	local01, result3
1bcf0     A7 FA 61 FC | 	wrlong	result1, fp
1bcf4     04 4E 05 F1 | 	add	fp, #4
1bcf8     A7 FC 61 FC | 	wrlong	result2, fp
1bcfc     04 4E 05 F1 | 	add	fp, #4
1bd00     A7 26 62 FC | 	wrlong	local01, fp
1bd04     08 4E 85 F1 | 	sub	fp, #8
1bd08     A7 12 02 F6 | 	mov	arg01, fp
1bd0c     F8 1A BF FD | 	call	#_converttofloat
1bd10     FD 12 02 F6 | 	mov	arg01, result1
1bd14     84 D9 B0 FD | 	call	#__system___float_sqrt
1bd18     A7 FA 61 FC | 	wrlong	result1, fp
1bd1c     08 4E 05 F1 | 	add	fp, #8
1bd20     A7 3C 68 FC | 	wrlong	#30, fp
1bd24     08 4E 85 F1 | 	sub	fp, #8
1bd28     A7 12 02 F6 | 	mov	arg01, fp
1bd2c     D0 18 BF FD | 	call	#_push
1bd30                 | LR__2181
1bd30     A7 F0 03 F6 | 	mov	ptra, fp
1bd34     B2 00 A0 FD | 	call	#popregs_
1bd38                 | _do_sqr_ret
1bd38     2D 00 64 FD | 	ret
1bd3c                 | 
1bd3c                 | ' 
1bd3c                 | ' ' ------------------ stick
1bd3c                 | ' 
1bd3c                 | ' sub do_stick
1bd3c                 | _do_stick
1bd3c     01 4A 05 F6 | 	mov	COUNT_, #1
1bd40     A8 00 A0 FD | 	call	#pushregs_
1bd44     10 F0 07 F1 | 	add	ptra, #16
1bd48     4A 00 00 FF 
1bd4c     80 E4 05 F1 | 	add	objptr, ##38016
1bd50     F2 26 02 FB | 	rdlong	local01, objptr
1bd54     13 17 02 F6 | 	mov	arg03, local01
1bd58     01 16 66 F0 | 	shl	arg03, #1
1bd5c     13 17 02 F1 | 	add	arg03, local01
1bd60     02 16 66 F0 | 	shl	arg03, #2
1bd64     03 00 00 FF 
1bd68     04 E4 85 F1 | 	sub	objptr, ##1540
1bd6c     F2 16 02 F1 | 	add	arg03, objptr
1bd70     0B 17 02 FB | 	rdlong	arg03, arg03
1bd74     0C 4E 05 F1 | 	add	fp, #12
1bd78     A7 16 62 FC | 	wrlong	arg03, fp
1bd7c                 | ' 
1bd7c                 | ' numpar=compiledline(lineptr_e).result.uresult
1bd7c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1bd7c     0C 4E 85 F1 | 	sub	fp, #12
1bd80     02 16 16 F2 | 	cmp	arg03, #2 wc
1bd84     47 00 00 FF 
1bd88     7C E4 85 F1 | 	sub	objptr, ##36476
1bd8c     40 00 90 CD |  if_b	jmp	#LR__2190
1bd90     00 12 06 F6 | 	mov	arg01, #0
1bd94     04 08 B1 FD | 	call	#__system___getiolock_0602
1bd98     FD 12 02 F6 | 	mov	arg01, result1
1bd9c     58 AB B0 FD | 	call	#__system___lockmem
1bda0     B7 01 00 FF 
1bda4     B8 15 06 F6 | 	mov	arg02, ##@LR__5970
1bda8     00 12 06 F6 | 	mov	arg01, #0
1bdac     00 16 06 F6 | 	mov	arg03, #0
1bdb0     3C B8 B0 FD | 	call	#__system___basic_print_string
1bdb4     00 12 06 F6 | 	mov	arg01, #0
1bdb8     E0 07 B1 FD | 	call	#__system___getiolock_0602
1bdbc     FD 00 68 FC | 	wrlong	#0, result1
1bdc0     27 12 06 F6 | 	mov	arg01, #39
1bdc4     00 14 06 F6 | 	mov	arg02, #0
1bdc8     3C 71 B0 FD | 	call	#_printerror
1bdcc     F0 00 90 FD | 	jmp	#LR__2194
1bdd0                 | LR__2190
1bdd0                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1bdd0     0C 4E 05 F1 | 	add	fp, #12
1bdd4     A7 FE 09 FB | 	rdlong	result3, fp wz
1bdd8     0C 4E 85 F1 | 	sub	fp, #12
1bddc     30 00 90 5D |  if_ne	jmp	#LR__2191
1bde0     52 00 00 FF 
1bde4     1C E4 05 F1 | 	add	objptr, ##42012
1bde8     F2 26 02 FB | 	rdlong	local01, objptr
1bdec     52 00 00 FF 
1bdf0     1C E4 85 F1 | 	sub	objptr, ##42012
1bdf4     A7 26 62 FC | 	wrlong	local01, fp
1bdf8     08 4E 05 F1 | 	add	fp, #8
1bdfc     A7 3A 68 FC | 	wrlong	#29, fp
1be00     08 4E 85 F1 | 	sub	fp, #8
1be04     A7 12 02 F6 | 	mov	arg01, fp
1be08     F4 17 BF FD | 	call	#_push
1be0c     B0 00 90 FD | 	jmp	#LR__2194
1be10                 | LR__2191
1be10     54 17 BF FD | 	call	#_pop
1be14     A7 FA 61 FC | 	wrlong	result1, fp
1be18     04 4E 05 F1 | 	add	fp, #4
1be1c     A7 FC 61 FC | 	wrlong	result2, fp
1be20     04 4E 05 F1 | 	add	fp, #4
1be24     A7 FE 61 FC | 	wrlong	result3, fp
1be28                 | ' t1=pop()
1be28                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1be28     08 4E 85 F1 | 	sub	fp, #8
1be2c     1C FE 0D F2 | 	cmp	result3, #28 wz
1be30     08 4E 05 51 |  if_ne	add	fp, #8
1be34     A7 26 02 5B |  if_ne	rdlong	local01, fp
1be38     08 4E 85 51 |  if_ne	sub	fp, #8
1be3c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1be40     70 00 90 5D |  if_ne	jmp	#LR__2193
1be44     A7 26 02 FB | 	rdlong	local01, fp
1be48     52 00 00 FF 
1be4c     08 E5 05 F1 | 	add	objptr, ##42248
1be50     F2 26 62 FC | 	wrlong	local01, objptr
1be54                 | '   q=t1.result.uresult
1be54                 | '   if q<7 then 
1be54     52 00 00 FF 
1be58     08 E5 85 F1 | 	sub	objptr, ##42248
1be5c     07 26 56 F2 | 	cmps	local01, #7 wc
1be60     40 00 90 3D |  if_ae	jmp	#LR__2192
1be64     52 00 00 FF 
1be68     08 E5 05 F1 | 	add	objptr, ##42248
1be6c     F2 26 02 FB | 	rdlong	local01, objptr
1be70     02 26 66 F0 | 	shl	local01, #2
1be74     EC E4 85 F1 | 	sub	objptr, #236
1be78     F2 26 02 F1 | 	add	local01, objptr
1be7c     13 27 02 FB | 	rdlong	local01, local01
1be80     A7 26 62 FC | 	wrlong	local01, fp
1be84     08 4E 05 F1 | 	add	fp, #8
1be88     A7 3A 68 FC | 	wrlong	#29, fp
1be8c     08 4E 85 F1 | 	sub	fp, #8
1be90     A7 12 02 F6 | 	mov	arg01, fp
1be94     52 00 00 FF 
1be98     1C E4 85 F1 | 	sub	objptr, ##42012
1be9c     60 17 BF FD | 	call	#_push
1bea0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1bea0     1C 00 90 FD | 	jmp	#LR__2194
1bea4                 | LR__2192
1bea4     29 12 06 F6 | 	mov	arg01, #41
1bea8     00 14 06 F6 | 	mov	arg02, #0
1beac     58 70 B0 FD | 	call	#_printerror
1beb0                 | '      printerror(41) : return
1beb0     0C 00 90 FD | 	jmp	#LR__2194
1beb4                 | LR__2193
1beb4     29 12 06 F6 | 	mov	arg01, #41
1beb8     00 14 06 F6 | 	mov	arg02, #0
1bebc     48 70 B0 FD | 	call	#_printerror
1bec0                 | LR__2194
1bec0     A7 F0 03 F6 | 	mov	ptra, fp
1bec4     B2 00 A0 FD | 	call	#popregs_
1bec8                 | _do_stick_ret
1bec8     2D 00 64 FD | 	ret
1becc                 | 
1becc                 | ' 
1becc                 | ' ' ------------------ strig
1becc                 | ' 
1becc                 | ' sub do_strig
1becc                 | _do_strig
1becc     01 4A 05 F6 | 	mov	COUNT_, #1
1bed0     A8 00 A0 FD | 	call	#pushregs_
1bed4     10 F0 07 F1 | 	add	ptra, #16
1bed8     4A 00 00 FF 
1bedc     80 E4 05 F1 | 	add	objptr, ##38016
1bee0     F2 26 02 FB | 	rdlong	local01, objptr
1bee4     13 17 02 F6 | 	mov	arg03, local01
1bee8     01 16 66 F0 | 	shl	arg03, #1
1beec     13 17 02 F1 | 	add	arg03, local01
1bef0     02 16 66 F0 | 	shl	arg03, #2
1bef4     03 00 00 FF 
1bef8     04 E4 85 F1 | 	sub	objptr, ##1540
1befc     F2 16 02 F1 | 	add	arg03, objptr
1bf00     0B 17 02 FB | 	rdlong	arg03, arg03
1bf04     0C 4E 05 F1 | 	add	fp, #12
1bf08     A7 16 62 FC | 	wrlong	arg03, fp
1bf0c                 | ' 
1bf0c                 | ' numpar=compiledline(lineptr_e).result.uresult
1bf0c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1bf0c     0C 4E 85 F1 | 	sub	fp, #12
1bf10     02 16 16 F2 | 	cmp	arg03, #2 wc
1bf14     47 00 00 FF 
1bf18     7C E4 85 F1 | 	sub	objptr, ##36476
1bf1c     40 00 90 CD |  if_b	jmp	#LR__2200
1bf20     00 12 06 F6 | 	mov	arg01, #0
1bf24     74 06 B1 FD | 	call	#__system___getiolock_0602
1bf28     FD 12 02 F6 | 	mov	arg01, result1
1bf2c     C8 A9 B0 FD | 	call	#__system___lockmem
1bf30     B7 01 00 FF 
1bf34     C0 15 06 F6 | 	mov	arg02, ##@LR__5971
1bf38     00 12 06 F6 | 	mov	arg01, #0
1bf3c     00 16 06 F6 | 	mov	arg03, #0
1bf40     AC B6 B0 FD | 	call	#__system___basic_print_string
1bf44     00 12 06 F6 | 	mov	arg01, #0
1bf48     50 06 B1 FD | 	call	#__system___getiolock_0602
1bf4c     FD 00 68 FC | 	wrlong	#0, result1
1bf50     27 12 06 F6 | 	mov	arg01, #39
1bf54     00 14 06 F6 | 	mov	arg02, #0
1bf58     AC 6F B0 FD | 	call	#_printerror
1bf5c     F0 00 90 FD | 	jmp	#LR__2204
1bf60                 | LR__2200
1bf60                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1bf60     0C 4E 05 F1 | 	add	fp, #12
1bf64     A7 FE 09 FB | 	rdlong	result3, fp wz
1bf68     0C 4E 85 F1 | 	sub	fp, #12
1bf6c     30 00 90 5D |  if_ne	jmp	#LR__2201
1bf70     52 00 00 FF 
1bf74     38 E4 05 F1 | 	add	objptr, ##42040
1bf78     F2 26 02 FB | 	rdlong	local01, objptr
1bf7c     52 00 00 FF 
1bf80     38 E4 85 F1 | 	sub	objptr, ##42040
1bf84     A7 26 62 FC | 	wrlong	local01, fp
1bf88     08 4E 05 F1 | 	add	fp, #8
1bf8c     A7 3A 68 FC | 	wrlong	#29, fp
1bf90     08 4E 85 F1 | 	sub	fp, #8
1bf94     A7 12 02 F6 | 	mov	arg01, fp
1bf98     64 16 BF FD | 	call	#_push
1bf9c     B0 00 90 FD | 	jmp	#LR__2204
1bfa0                 | LR__2201
1bfa0     C4 15 BF FD | 	call	#_pop
1bfa4     A7 FA 61 FC | 	wrlong	result1, fp
1bfa8     04 4E 05 F1 | 	add	fp, #4
1bfac     A7 FC 61 FC | 	wrlong	result2, fp
1bfb0     04 4E 05 F1 | 	add	fp, #4
1bfb4     A7 FE 61 FC | 	wrlong	result3, fp
1bfb8                 | ' t1=pop()
1bfb8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1bfb8     08 4E 85 F1 | 	sub	fp, #8
1bfbc     1C FE 0D F2 | 	cmp	result3, #28 wz
1bfc0     08 4E 05 51 |  if_ne	add	fp, #8
1bfc4     A7 26 02 5B |  if_ne	rdlong	local01, fp
1bfc8     08 4E 85 51 |  if_ne	sub	fp, #8
1bfcc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1bfd0     70 00 90 5D |  if_ne	jmp	#LR__2203
1bfd4     A7 26 02 FB | 	rdlong	local01, fp
1bfd8     52 00 00 FF 
1bfdc     08 E5 05 F1 | 	add	objptr, ##42248
1bfe0     F2 26 62 FC | 	wrlong	local01, objptr
1bfe4                 | '   q=t1.result.uresult
1bfe4                 | '   if q<7 then 
1bfe4     52 00 00 FF 
1bfe8     08 E5 85 F1 | 	sub	objptr, ##42248
1bfec     07 26 56 F2 | 	cmps	local01, #7 wc
1bff0     40 00 90 3D |  if_ae	jmp	#LR__2202
1bff4     52 00 00 FF 
1bff8     08 E5 05 F1 | 	add	objptr, ##42248
1bffc     F2 26 02 FB | 	rdlong	local01, objptr
1c000     02 26 66 F0 | 	shl	local01, #2
1c004     D0 E4 85 F1 | 	sub	objptr, #208
1c008     F2 26 02 F1 | 	add	local01, objptr
1c00c     13 27 02 FB | 	rdlong	local01, local01
1c010     A7 26 62 FC | 	wrlong	local01, fp
1c014     08 4E 05 F1 | 	add	fp, #8
1c018     A7 3A 68 FC | 	wrlong	#29, fp
1c01c     08 4E 85 F1 | 	sub	fp, #8
1c020     A7 12 02 F6 | 	mov	arg01, fp
1c024     52 00 00 FF 
1c028     38 E4 85 F1 | 	sub	objptr, ##42040
1c02c     D0 15 BF FD | 	call	#_push
1c030                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1c030     1C 00 90 FD | 	jmp	#LR__2204
1c034                 | LR__2202
1c034     29 12 06 F6 | 	mov	arg01, #41
1c038     00 14 06 F6 | 	mov	arg02, #0
1c03c     C8 6E B0 FD | 	call	#_printerror
1c040                 | '      printerror(41) : return
1c040     0C 00 90 FD | 	jmp	#LR__2204
1c044                 | LR__2203
1c044     29 12 06 F6 | 	mov	arg01, #41
1c048     00 14 06 F6 | 	mov	arg02, #0
1c04c     B8 6E B0 FD | 	call	#_printerror
1c050                 | LR__2204
1c050     A7 F0 03 F6 | 	mov	ptra, fp
1c054     B2 00 A0 FD | 	call	#popregs_
1c058                 | _do_strig_ret
1c058     2D 00 64 FD | 	ret
1c05c                 | 
1c05c                 | ' 
1c05c                 | ' ' ------------------ tan
1c05c                 | ' 
1c05c                 | ' sub do_tan
1c05c                 | _do_tan
1c05c     01 4A 05 F6 | 	mov	COUNT_, #1
1c060     A8 00 A0 FD | 	call	#pushregs_
1c064     10 F0 07 F1 | 	add	ptra, #16
1c068     4A 00 00 FF 
1c06c     80 E4 05 F1 | 	add	objptr, ##38016
1c070     F2 26 02 FB | 	rdlong	local01, objptr
1c074     13 17 02 F6 | 	mov	arg03, local01
1c078     01 16 66 F0 | 	shl	arg03, #1
1c07c     13 17 02 F1 | 	add	arg03, local01
1c080     02 16 66 F0 | 	shl	arg03, #2
1c084     03 00 00 FF 
1c088     04 E4 85 F1 | 	sub	objptr, ##1540
1c08c     F2 16 02 F1 | 	add	arg03, objptr
1c090     0B 17 02 FB | 	rdlong	arg03, arg03
1c094     0C 4E 05 F1 | 	add	fp, #12
1c098     A7 16 62 FC | 	wrlong	arg03, fp
1c09c                 | ' 
1c09c                 | ' numpar=compiledline(lineptr_e).result.uresult
1c09c                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1c09c     0C 4E 85 F1 | 	sub	fp, #12
1c0a0     02 16 16 F2 | 	cmp	arg03, #2 wc
1c0a4     47 00 00 FF 
1c0a8     7C E4 85 F1 | 	sub	objptr, ##36476
1c0ac     0C 4E 05 C1 |  if_b	add	fp, #12
1c0b0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c0b4     0C 4E 85 C1 |  if_b	sub	fp, #12
1c0b8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1c0bc     00 12 06 F6 | 	mov	arg01, #0
1c0c0     D8 04 B1 FD | 	call	#__system___getiolock_0602
1c0c4     FD 12 02 F6 | 	mov	arg01, result1
1c0c8     2C A8 B0 FD | 	call	#__system___lockmem
1c0cc     B7 01 00 FF 
1c0d0     C8 15 06 F6 | 	mov	arg02, ##@LR__5972
1c0d4     00 12 06 F6 | 	mov	arg01, #0
1c0d8     00 16 06 F6 | 	mov	arg03, #0
1c0dc     10 B5 B0 FD | 	call	#__system___basic_print_string
1c0e0     00 12 06 F6 | 	mov	arg01, #0
1c0e4     B4 04 B1 FD | 	call	#__system___getiolock_0602
1c0e8     FD 00 68 FC | 	wrlong	#0, result1
1c0ec     27 12 06 F6 | 	mov	arg01, #39
1c0f0     00 14 06 F6 | 	mov	arg02, #0
1c0f4     10 6E B0 FD | 	call	#_printerror
1c0f8     64 00 90 FD | 	jmp	#LR__2211
1c0fc                 | LR__2210
1c0fc     68 14 BF FD | 	call	#_pop
1c100     A7 FA 61 FC | 	wrlong	result1, fp
1c104     04 4E 05 F1 | 	add	fp, #4
1c108     A7 FC 61 FC | 	wrlong	result2, fp
1c10c     04 4E 05 F1 | 	add	fp, #4
1c110     A7 FE 61 FC | 	wrlong	result3, fp
1c114     08 4E 85 F1 | 	sub	fp, #8
1c118     52 00 00 FF 
1c11c     A8 E4 05 F1 | 	add	objptr, ##42152
1c120     F2 26 02 FB | 	rdlong	local01, objptr
1c124     52 00 00 FF 
1c128     A8 E4 85 F1 | 	sub	objptr, ##42152
1c12c     A7 12 02 F6 | 	mov	arg01, fp
1c130     D4 16 BF FD | 	call	#_converttofloat
1c134     FD 14 02 F6 | 	mov	arg02, result1
1c138     13 13 02 F6 | 	mov	arg01, local01
1c13c     34 D6 B0 FD | 	call	#__system___float_mul
1c140     FD 12 02 F6 | 	mov	arg01, result1
1c144     D8 E0 B0 FD | 	call	#__system____builtin_tanf
1c148     A7 FA 61 FC | 	wrlong	result1, fp
1c14c     08 4E 05 F1 | 	add	fp, #8
1c150     A7 3C 68 FC | 	wrlong	#30, fp
1c154     08 4E 85 F1 | 	sub	fp, #8
1c158     A7 12 02 F6 | 	mov	arg01, fp
1c15c     A0 14 BF FD | 	call	#_push
1c160                 | LR__2211
1c160     A7 F0 03 F6 | 	mov	ptra, fp
1c164     B2 00 A0 FD | 	call	#popregs_
1c168                 | _do_tan_ret
1c168     2D 00 64 FD | 	ret
1c16c                 | 
1c16c                 | ' 
1c16c                 | ' ' ------------------ val
1c16c                 | ' 
1c16c                 | ' sub do_val
1c16c                 | _do_val
1c16c     03 4A 05 F6 | 	mov	COUNT_, #3
1c170     A8 00 A0 FD | 	call	#pushregs_
1c174     20 F0 07 F1 | 	add	ptra, #32
1c178     4A 00 00 FF 
1c17c     80 E4 05 F1 | 	add	objptr, ##38016
1c180     F2 16 02 FB | 	rdlong	arg03, objptr
1c184     0B 27 02 F6 | 	mov	local01, arg03
1c188     01 26 66 F0 | 	shl	local01, #1
1c18c     0B 27 02 F1 | 	add	local01, arg03
1c190     02 26 66 F0 | 	shl	local01, #2
1c194     03 00 00 FF 
1c198     04 E4 85 F1 | 	sub	objptr, ##1540
1c19c     F2 26 02 F1 | 	add	local01, objptr
1c1a0     13 17 02 FB | 	rdlong	arg03, local01
1c1a4     0C 4E 05 F1 | 	add	fp, #12
1c1a8     A7 16 62 FC | 	wrlong	arg03, fp
1c1ac                 | ' 
1c1ac                 | ' numpar=compiledline(lineptr_e).result.uresult
1c1ac                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1c1ac     0C 4E 85 F1 | 	sub	fp, #12
1c1b0     02 16 16 F2 | 	cmp	arg03, #2 wc
1c1b4     47 00 00 FF 
1c1b8     7C E4 85 F1 | 	sub	objptr, ##36476
1c1bc     0C 4E 05 C1 |  if_b	add	fp, #12
1c1c0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c1c4     0C 4E 85 C1 |  if_b	sub	fp, #12
1c1c8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1c1cc     00 12 06 F6 | 	mov	arg01, #0
1c1d0     C8 03 B1 FD | 	call	#__system___getiolock_0602
1c1d4     FD 12 02 F6 | 	mov	arg01, result1
1c1d8     1C A7 B0 FD | 	call	#__system___lockmem
1c1dc     B7 01 00 FF 
1c1e0     CE 15 06 F6 | 	mov	arg02, ##@LR__5973
1c1e4     00 12 06 F6 | 	mov	arg01, #0
1c1e8     00 16 06 F6 | 	mov	arg03, #0
1c1ec     00 B4 B0 FD | 	call	#__system___basic_print_string
1c1f0     00 12 06 F6 | 	mov	arg01, #0
1c1f4     A4 03 B1 FD | 	call	#__system___getiolock_0602
1c1f8     FD 00 68 FC | 	wrlong	#0, result1
1c1fc     27 12 06 F6 | 	mov	arg01, #39
1c200     00 14 06 F6 | 	mov	arg02, #0
1c204     00 6D B0 FD | 	call	#_printerror
1c208     60 02 90 FD | 	jmp	#LR__2233
1c20c                 | LR__2220
1c20c     58 13 BF FD | 	call	#_pop
1c210     FF 16 02 F6 | 	mov	arg03, result3
1c214     A7 FA 61 FC | 	wrlong	result1, fp
1c218     04 4E 05 F1 | 	add	fp, #4
1c21c     A7 FC 61 FC | 	wrlong	result2, fp
1c220     04 4E 05 F1 | 	add	fp, #4
1c224     A7 16 62 FC | 	wrlong	arg03, fp
1c228                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1c228     08 4E 85 F1 | 	sub	fp, #8
1c22c     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c230     18 00 90 5D |  if_ne	jmp	#LR__2221
1c234     A7 12 02 FB | 	rdlong	arg01, fp
1c238     A4 14 BF FD | 	call	#_convertstring
1c23c     A7 FA 61 FC | 	wrlong	result1, fp
1c240     08 4E 05 F1 | 	add	fp, #8
1c244     A7 3E 68 FC | 	wrlong	#31, fp
1c248     08 4E 85 F1 | 	sub	fp, #8
1c24c                 | LR__2221
1c24c                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1c24c     08 4E 05 F1 | 	add	fp, #8
1c250     A7 16 02 FB | 	rdlong	arg03, fp
1c254     08 4E 85 F1 | 	sub	fp, #8
1c258     1F 16 0E F2 | 	cmp	arg03, #31 wz
1c25c     40 00 90 AD |  if_e	jmp	#LR__2222
1c260     00 12 06 F6 | 	mov	arg01, #0
1c264     34 03 B1 FD | 	call	#__system___getiolock_0602
1c268     FD 12 02 F6 | 	mov	arg01, result1
1c26c     88 A6 B0 FD | 	call	#__system___lockmem
1c270     B7 01 00 FF 
1c274     D4 15 06 F6 | 	mov	arg02, ##@LR__5974
1c278     00 12 06 F6 | 	mov	arg01, #0
1c27c     00 16 06 F6 | 	mov	arg03, #0
1c280     6C B3 B0 FD | 	call	#__system___basic_print_string
1c284     00 12 06 F6 | 	mov	arg01, #0
1c288     10 03 B1 FD | 	call	#__system___getiolock_0602
1c28c     FD 00 68 FC | 	wrlong	#0, result1
1c290     0F 12 06 F6 | 	mov	arg01, #15
1c294     00 14 06 F6 | 	mov	arg02, #0
1c298     6C 6C B0 FD | 	call	#_printerror
1c29c     CC 01 90 FD | 	jmp	#LR__2233
1c2a0                 | LR__2222
1c2a0                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c2a0     A7 12 02 FB | 	rdlong	arg01, fp
1c2a4     01 14 06 F6 | 	mov	arg02, #1
1c2a8     CC C6 B0 FD | 	call	#__system__Left_S
1c2ac     FD 12 02 F6 | 	mov	arg01, result1
1c2b0     B7 01 00 FF 
1c2b4     DA 15 06 F6 | 	mov	arg02, ##@LR__5975
1c2b8     64 A6 B0 FD | 	call	#__system___string_cmp
1c2bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c2c0     48 00 90 5D |  if_ne	jmp	#LR__2225
1c2c4     B7 01 00 FF 
1c2c8     DC 27 06 F6 | 	mov	local01, ##@LR__5976
1c2cc     A7 16 02 FB | 	rdlong	arg03, fp
1c2d0     0B 13 02 F6 | 	mov	arg01, arg03
1c2d4     09 29 02 F6 | 	mov	local02, arg01
1c2d8     97 06 48 FB | 	callpa	#(@LR__2224-@LR__2223)>>2,fcache_load_ptr_
1c2dc                 | LR__2223
1c2dc     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c2e0     01 28 06 51 |  if_ne	add	local02, #1
1c2e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2223
1c2e8                 | LR__2224
1c2e8     09 29 82 F1 | 	sub	local02, arg01
1c2ec     14 15 02 F6 | 	mov	arg02, local02
1c2f0     01 14 86 F1 | 	sub	arg02, #1
1c2f4     0B 13 02 F6 | 	mov	arg01, arg03
1c2f8     04 C7 B0 FD | 	call	#__system__Right_S
1c2fc     FD 14 02 F6 | 	mov	arg02, result1
1c300     13 13 02 F6 | 	mov	arg01, local01
1c304     4C A6 B0 FD | 	call	#__system___string_concat
1c308     A7 FA 61 FC | 	wrlong	result1, fp
1c30c                 | LR__2225
1c30c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c30c     A7 12 02 FB | 	rdlong	arg01, fp
1c310     01 14 06 F6 | 	mov	arg02, #1
1c314     60 C6 B0 FD | 	call	#__system__Left_S
1c318     FD 12 02 F6 | 	mov	arg01, result1
1c31c     B7 01 00 FF 
1c320     DF 15 06 F6 | 	mov	arg02, ##@LR__5977
1c324     F8 A5 B0 FD | 	call	#__system___string_cmp
1c328     00 FA 0D F2 | 	cmp	result1, #0 wz
1c32c     48 00 90 5D |  if_ne	jmp	#LR__2228
1c330     B7 01 00 FF 
1c334     E1 27 06 F6 | 	mov	local01, ##@LR__5978
1c338     A7 16 02 FB | 	rdlong	arg03, fp
1c33c     0B 13 02 F6 | 	mov	arg01, arg03
1c340     09 29 02 F6 | 	mov	local02, arg01
1c344     97 06 48 FB | 	callpa	#(@LR__2227-@LR__2226)>>2,fcache_load_ptr_
1c348                 | LR__2226
1c348     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c34c     01 28 06 51 |  if_ne	add	local02, #1
1c350     F4 FF 9F 5D |  if_ne	jmp	#LR__2226
1c354                 | LR__2227
1c354     09 29 82 F1 | 	sub	local02, arg01
1c358     14 15 02 F6 | 	mov	arg02, local02
1c35c     01 14 86 F1 | 	sub	arg02, #1
1c360     0B 13 02 F6 | 	mov	arg01, arg03
1c364     98 C6 B0 FD | 	call	#__system__Right_S
1c368     FD 14 02 F6 | 	mov	arg02, result1
1c36c     13 13 02 F6 | 	mov	arg01, local01
1c370     E0 A5 B0 FD | 	call	#__system___string_concat
1c374     A7 FA 61 FC | 	wrlong	result1, fp
1c378                 | LR__2228
1c378     A7 12 02 FB | 	rdlong	arg01, fp
1c37c     00 DC B0 FD | 	call	#__system____builtin_atof
1c380     1C 4E 05 F1 | 	add	fp, #28
1c384     A7 FA 61 FC | 	wrlong	result1, fp
1c388     1C 4E 85 F1 | 	sub	fp, #28
1c38c     A7 12 02 FB | 	rdlong	arg01, fp
1c390     00 14 06 F6 | 	mov	arg02, #0
1c394     54 DA B0 FD | 	call	#__system____builtin_atoi
1c398     18 4E 05 F1 | 	add	fp, #24
1c39c     A7 FA 61 FC | 	wrlong	result1, fp
1c3a0                 | ' fval=val(t1.result.sresult)
1c3a0                 | ' ival=val%(t1.result.sresult)
1c3a0                 | ' if fval=ival then
1c3a0     04 4E 05 F1 | 	add	fp, #4
1c3a4     A7 26 02 FB | 	rdlong	local01, fp
1c3a8     1C 4E 85 F1 | 	sub	fp, #28
1c3ac     FD 12 52 F6 | 	abs	arg01, result1 wc
1c3b0     1F 2A C6 C9 |  if_b	decod	local03, #31
1c3b4     00 2A 06 36 |  if_ae	mov	local03, #0
1c3b8     B4 CF B0 FD | 	call	#__system___float_fromuns
1c3bc     15 FB 61 F5 | 	xor	result1, local03
1c3c0     FD 14 02 F6 | 	mov	arg02, result1
1c3c4     13 13 02 F6 | 	mov	arg01, local01
1c3c8     01 16 06 F6 | 	mov	arg03, #1
1c3cc     D8 D7 B0 FD | 	call	#__system___float_cmp
1c3d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3d4     20 00 90 5D |  if_ne	jmp	#LR__2229
1c3d8     18 4E 05 F1 | 	add	fp, #24
1c3dc     A7 26 02 FB | 	rdlong	local01, fp
1c3e0     18 4E 85 F1 | 	sub	fp, #24
1c3e4     A7 26 62 FC | 	wrlong	local01, fp
1c3e8     08 4E 05 F1 | 	add	fp, #8
1c3ec     A7 38 68 FC | 	wrlong	#28, fp
1c3f0     08 4E 85 F1 | 	sub	fp, #8
1c3f4     6C 00 90 FD | 	jmp	#LR__2232
1c3f8                 | LR__2229
1c3f8                 | '   if fval=0 andalso ival<>0 then
1c3f8     1C 4E 05 F1 | 	add	fp, #28
1c3fc     A7 12 02 FB | 	rdlong	arg01, fp
1c400     1C 4E 85 F1 | 	sub	fp, #28
1c404     00 14 06 F6 | 	mov	arg02, #0
1c408     01 16 06 F6 | 	mov	arg03, #1
1c40c     98 D7 B0 FD | 	call	#__system___float_cmp
1c410     00 FA 0D F2 | 	cmp	result1, #0 wz
1c414     30 00 90 5D |  if_ne	jmp	#LR__2230
1c418     18 4E 05 F1 | 	add	fp, #24
1c41c     A7 26 0A FB | 	rdlong	local01, fp wz
1c420     18 4E 85 F1 | 	sub	fp, #24
1c424     20 00 90 AD |  if_e	jmp	#LR__2230
1c428     18 4E 05 F1 | 	add	fp, #24
1c42c     A7 26 02 FB | 	rdlong	local01, fp
1c430     18 4E 85 F1 | 	sub	fp, #24
1c434     A7 26 62 FC | 	wrlong	local01, fp
1c438     08 4E 05 F1 | 	add	fp, #8
1c43c     A7 38 68 FC | 	wrlong	#28, fp
1c440     08 4E 85 F1 | 	sub	fp, #8
1c444     1C 00 90 FD | 	jmp	#LR__2231
1c448                 | LR__2230
1c448     1C 4E 05 F1 | 	add	fp, #28
1c44c     A7 26 02 FB | 	rdlong	local01, fp
1c450     1C 4E 85 F1 | 	sub	fp, #28
1c454     A7 26 62 FC | 	wrlong	local01, fp
1c458     08 4E 05 F1 | 	add	fp, #8
1c45c     A7 3C 68 FC | 	wrlong	#30, fp
1c460     08 4E 85 F1 | 	sub	fp, #8
1c464                 | LR__2231
1c464                 | LR__2232
1c464     A7 12 02 F6 | 	mov	arg01, fp
1c468     94 11 BF FD | 	call	#_push
1c46c                 | LR__2233
1c46c     A7 F0 03 F6 | 	mov	ptra, fp
1c470     B2 00 A0 FD | 	call	#popregs_
1c474                 | _do_val_ret
1c474     2D 00 64 FD | 	ret
1c478                 | 
1c478                 | ' 
1c478                 | ' ' ------------------ waitclock
1c478                 | ' 
1c478                 | ' sub do_waitclock
1c478                 | _do_waitclock
1c478     52 00 00 FF 
1c47c     94 E4 05 F1 | 	add	objptr, ##42132
1c480     F2 00 02 FB | 	rdlong	_var01, objptr
1c484                 | ' c=hkcnt
1c484                 | ' do: loop until hkcnt<>c
1c484                 | LR__2240
1c484     F2 02 02 FB | 	rdlong	_var02, objptr
1c488     00 03 0A F2 | 	cmp	_var02, _var01 wz
1c48c     F4 FF 9F AD |  if_e	jmp	#LR__2240
1c490     52 00 00 FF 
1c494     94 E4 85 F1 | 	sub	objptr, ##42132
1c498                 | _do_waitclock_ret
1c498     2D 00 64 FD | 	ret
1c49c                 | 
1c49c                 | ' 
1c49c                 | ' ' ------------------ waitms
1c49c                 | ' 
1c49c                 | ' sub do_waitms
1c49c                 | _do_waitms
1c49c     01 4A 05 F6 | 	mov	COUNT_, #1
1c4a0     A8 00 A0 FD | 	call	#pushregs_
1c4a4     18 F0 07 F1 | 	add	ptra, #24
1c4a8     BC 10 BF FD | 	call	#_pop
1c4ac     A7 FA 61 FC | 	wrlong	result1, fp
1c4b0     04 4E 05 F1 | 	add	fp, #4
1c4b4     A7 FC 61 FC | 	wrlong	result2, fp
1c4b8     04 4E 05 F1 | 	add	fp, #4
1c4bc     A7 FE 61 FC | 	wrlong	result3, fp
1c4c0     08 4E 85 F1 | 	sub	fp, #8
1c4c4     A7 12 02 F6 | 	mov	arg01, fp
1c4c8     80 12 BF FD | 	call	#_converttoint
1c4cc     0C 4E 05 F1 | 	add	fp, #12
1c4d0     A7 FA 61 FC | 	wrlong	result1, fp
1c4d4                 | ' 
1c4d4                 | ' t1=pop()  
1c4d4                 | ' t=converttoint(t1)
1c4d4                 | ' if t<0 then return
1c4d4     0C 4E 85 F1 | 	sub	fp, #12
1c4d8     00 FA 55 F2 | 	cmps	result1, #0 wc
1c4dc     E4 00 90 CD |  if_b	jmp	#LR__2256
1c4e0                 | ' if t < 1000 then 
1c4e0     0C 4E 05 F1 | 	add	fp, #12
1c4e4     A7 12 02 FB | 	rdlong	arg01, fp
1c4e8     0C 4E 85 F1 | 	sub	fp, #12
1c4ec     01 00 00 FF 
1c4f0     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1c4f4     14 00 90 3D |  if_ae	jmp	#LR__2250
1c4f8     0C 4E 05 F1 | 	add	fp, #12
1c4fc     A7 12 02 FB | 	rdlong	arg01, fp
1c500     0C 4E 85 F1 | 	sub	fp, #12
1c504     E4 A6 B0 FD | 	call	#__system___waitms
1c508     B8 00 90 FD | 	jmp	#LR__2255
1c50c                 | LR__2250
1c50c     10 4E 05 F1 | 	add	fp, #16
1c510     A7 02 68 FC | 	wrlong	#1, fp
1c514     04 4E 85 F1 | 	sub	fp, #4
1c518     A7 12 02 FB | 	rdlong	arg01, fp
1c51c     09 13 52 F6 | 	abs	arg01, arg01 wc
1c520     01 00 00 FF 
1c524     E8 13 16 FD | 	qdiv	arg01, ##1000
1c528                 | '   for i=1 to t/1000
1c528     0C 4E 85 F1 | 	sub	fp, #12
1c52c     18 26 62 FD | 	getqx	local01
1c530     13 27 82 F6 | 	negc	local01, local01
1c534     01 26 06 F1 | 	add	local01, #1
1c538                 | LR__2251
1c538     10 4E 05 F1 | 	add	fp, #16
1c53c     A7 12 02 FB | 	rdlong	arg01, fp
1c540     10 4E 85 F1 | 	sub	fp, #16
1c544     13 13 52 F2 | 	cmps	arg01, local01 wc
1c548     54 00 90 3D |  if_ae	jmp	#LR__2254
1c54c     01 00 00 FF 
1c550     E8 13 06 F6 | 	mov	arg01, ##1000
1c554     94 A6 B0 FD | 	call	#__system___waitms
1c558                 | '     waitms(1000)
1c558                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1c558     E0 12 06 F6 | 	mov	arg01, #224
1c55c     A0 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c560     00 FA 0D F2 | 	cmp	result1, #0 wz
1c564     10 00 90 5D |  if_ne	jmp	#LR__2252
1c568     E4 12 06 F6 | 	mov	arg01, #228
1c56c     90 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c570     00 FA 0D F2 | 	cmp	result1, #0 wz
1c574     10 00 90 AD |  if_e	jmp	#LR__2253
1c578                 | LR__2252
1c578     06 12 06 F6 | 	mov	arg01, #6
1c57c     80 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c580     00 FA 0D F2 | 	cmp	result1, #0 wz
1c584     3C 00 90 5D |  if_ne	jmp	#LR__2256
1c588                 | LR__2253
1c588     10 4E 05 F1 | 	add	fp, #16
1c58c     A7 12 02 FB | 	rdlong	arg01, fp
1c590     01 12 06 F1 | 	add	arg01, #1
1c594     A7 12 62 FC | 	wrlong	arg01, fp
1c598     10 4E 85 F1 | 	sub	fp, #16
1c59c     98 FF 9F FD | 	jmp	#LR__2251
1c5a0                 | LR__2254
1c5a0     0C 4E 05 F1 | 	add	fp, #12
1c5a4     A7 26 02 FB | 	rdlong	local01, fp
1c5a8     13 27 52 F6 | 	abs	local01, local01 wc
1c5ac     01 00 00 FF 
1c5b0     E8 27 16 FD | 	qdiv	local01, ##1000
1c5b4     0C 4E 85 F1 | 	sub	fp, #12
1c5b8     19 26 62 FD | 	getqy	local01
1c5bc     13 13 82 F6 | 	negc	arg01, local01
1c5c0     28 A6 B0 FD | 	call	#__system___waitms
1c5c4                 | LR__2255
1c5c4                 | LR__2256
1c5c4     A7 F0 03 F6 | 	mov	ptra, fp
1c5c8     B2 00 A0 FD | 	call	#popregs_
1c5cc                 | _do_waitms_ret
1c5cc     2D 00 64 FD | 	ret
1c5d0                 | 
1c5d0                 | ' 
1c5d0                 | ' ' ------------------ waitvbl
1c5d0                 | ' 
1c5d0                 | ' sub do_waitvbl
1c5d0                 | _do_waitvbl
1c5d0     01 12 06 F6 | 	mov	arg01, #1
1c5d4     2C 86 B0 FD | 	call	#_hg010b_spin2_waitvbl
1c5d8                 | _do_waitvbl_ret
1c5d8     2D 00 64 FD | 	ret
1c5dc                 | 
1c5dc                 | ' 
1c5dc                 | ' ' ------------------ wrpin
1c5dc                 | ' 
1c5dc                 | ' sub do_wrpin
1c5dc                 | _do_wrpin
1c5dc     01 4A 05 F6 | 	mov	COUNT_, #1
1c5e0     A8 00 A0 FD | 	call	#pushregs_
1c5e4     18 F0 07 F1 | 	add	ptra, #24
1c5e8     7C 0F BF FD | 	call	#_pop
1c5ec     FD 14 02 F6 | 	mov	arg02, result1
1c5f0     FE 12 02 F6 | 	mov	arg01, result2
1c5f4     FF 26 02 F6 | 	mov	local01, result3
1c5f8     A7 14 62 FC | 	wrlong	arg02, fp
1c5fc     04 4E 05 F1 | 	add	fp, #4
1c600     A7 12 62 FC | 	wrlong	arg01, fp
1c604     04 4E 05 F1 | 	add	fp, #4
1c608     A7 26 62 FC | 	wrlong	local01, fp
1c60c     08 4E 85 F1 | 	sub	fp, #8
1c610     54 0F BF FD | 	call	#_pop
1c614     FF 26 02 F6 | 	mov	local01, result3
1c618     0C 4E 05 F1 | 	add	fp, #12
1c61c     A7 FA 61 FC | 	wrlong	result1, fp
1c620     04 4E 05 F1 | 	add	fp, #4
1c624     A7 FC 61 FC | 	wrlong	result2, fp
1c628     04 4E 05 F1 | 	add	fp, #4
1c62c     A7 26 62 FC | 	wrlong	local01, fp
1c630     08 4E 85 F1 | 	sub	fp, #8
1c634     A7 12 02 F6 | 	mov	arg01, fp
1c638     0C 4E 85 F1 | 	sub	fp, #12
1c63c     0C 11 BF FD | 	call	#_converttoint
1c640     FD 26 02 F6 | 	mov	local01, result1
1c644     A7 12 02 F6 | 	mov	arg01, fp
1c648     00 11 BF FD | 	call	#_converttoint
1c64c     13 FB 01 FC | 	wrpin	result1, local01
1c650     A7 F0 03 F6 | 	mov	ptra, fp
1c654     B2 00 A0 FD | 	call	#popregs_
1c658                 | _do_wrpin_ret
1c658     2D 00 64 FD | 	ret
1c65c                 | 
1c65c                 | ' 
1c65c                 | ' ' ------------------ wxpin
1c65c                 | ' 
1c65c                 | ' sub do_wxpin
1c65c                 | _do_wxpin
1c65c     01 4A 05 F6 | 	mov	COUNT_, #1
1c660     A8 00 A0 FD | 	call	#pushregs_
1c664     18 F0 07 F1 | 	add	ptra, #24
1c668     FC 0E BF FD | 	call	#_pop
1c66c     FD 14 02 F6 | 	mov	arg02, result1
1c670     FE 12 02 F6 | 	mov	arg01, result2
1c674     FF 26 02 F6 | 	mov	local01, result3
1c678     A7 14 62 FC | 	wrlong	arg02, fp
1c67c     04 4E 05 F1 | 	add	fp, #4
1c680     A7 12 62 FC | 	wrlong	arg01, fp
1c684     04 4E 05 F1 | 	add	fp, #4
1c688     A7 26 62 FC | 	wrlong	local01, fp
1c68c     08 4E 85 F1 | 	sub	fp, #8
1c690     D4 0E BF FD | 	call	#_pop
1c694     FF 26 02 F6 | 	mov	local01, result3
1c698     0C 4E 05 F1 | 	add	fp, #12
1c69c     A7 FA 61 FC | 	wrlong	result1, fp
1c6a0     04 4E 05 F1 | 	add	fp, #4
1c6a4     A7 FC 61 FC | 	wrlong	result2, fp
1c6a8     04 4E 05 F1 | 	add	fp, #4
1c6ac     A7 26 62 FC | 	wrlong	local01, fp
1c6b0     08 4E 85 F1 | 	sub	fp, #8
1c6b4     A7 12 02 F6 | 	mov	arg01, fp
1c6b8     0C 4E 85 F1 | 	sub	fp, #12
1c6bc     8C 10 BF FD | 	call	#_converttoint
1c6c0     FD 26 02 F6 | 	mov	local01, result1
1c6c4     A7 12 02 F6 | 	mov	arg01, fp
1c6c8     80 10 BF FD | 	call	#_converttoint
1c6cc     13 FB 11 FC | 	wxpin	result1, local01
1c6d0     A7 F0 03 F6 | 	mov	ptra, fp
1c6d4     B2 00 A0 FD | 	call	#popregs_
1c6d8                 | _do_wxpin_ret
1c6d8     2D 00 64 FD | 	ret
1c6dc                 | 
1c6dc                 | ' 
1c6dc                 | ' ' ------------------ wypin
1c6dc                 | ' 
1c6dc                 | ' sub do_wypin
1c6dc                 | _do_wypin
1c6dc     01 4A 05 F6 | 	mov	COUNT_, #1
1c6e0     A8 00 A0 FD | 	call	#pushregs_
1c6e4     18 F0 07 F1 | 	add	ptra, #24
1c6e8     7C 0E BF FD | 	call	#_pop
1c6ec     FD 14 02 F6 | 	mov	arg02, result1
1c6f0     FE 12 02 F6 | 	mov	arg01, result2
1c6f4     FF 26 02 F6 | 	mov	local01, result3
1c6f8     A7 14 62 FC | 	wrlong	arg02, fp
1c6fc     04 4E 05 F1 | 	add	fp, #4
1c700     A7 12 62 FC | 	wrlong	arg01, fp
1c704     04 4E 05 F1 | 	add	fp, #4
1c708     A7 26 62 FC | 	wrlong	local01, fp
1c70c     08 4E 85 F1 | 	sub	fp, #8
1c710     54 0E BF FD | 	call	#_pop
1c714     FF 26 02 F6 | 	mov	local01, result3
1c718     0C 4E 05 F1 | 	add	fp, #12
1c71c     A7 FA 61 FC | 	wrlong	result1, fp
1c720     04 4E 05 F1 | 	add	fp, #4
1c724     A7 FC 61 FC | 	wrlong	result2, fp
1c728     04 4E 05 F1 | 	add	fp, #4
1c72c     A7 26 62 FC | 	wrlong	local01, fp
1c730     08 4E 85 F1 | 	sub	fp, #8
1c734     A7 12 02 F6 | 	mov	arg01, fp
1c738     0C 4E 85 F1 | 	sub	fp, #12
1c73c     0C 10 BF FD | 	call	#_converttoint
1c740     FD 26 02 F6 | 	mov	local01, result1
1c744     A7 12 02 F6 | 	mov	arg01, fp
1c748     00 10 BF FD | 	call	#_converttoint
1c74c     13 FB 21 FC | 	wypin	result1, local01
1c750     A7 F0 03 F6 | 	mov	ptra, fp
1c754     B2 00 A0 FD | 	call	#popregs_
1c758                 | _do_wypin_ret
1c758     2D 00 64 FD | 	ret
1c75c                 | 
1c75c                 | ' 
1c75c                 | ' 
1c75c                 | ' 
1c75c                 | ' 
1c75c                 | ' 
1c75c                 | ' 
1c75c                 | ' 
1c75c                 | ' 
1c75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c75c                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1c75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c75c                 | ' 
1c75c                 | ' 
1c75c                 | ' '------------------ Assign
1c75c                 | ' 
1c75c                 | ' sub do_assign
1c75c                 | _do_assign
1c75c     05 4A 05 F6 | 	mov	COUNT_, #5
1c760     A8 00 A0 FD | 	call	#pushregs_
1c764     44 F0 07 F1 | 	add	ptra, #68
1c768     4A 00 00 FF 
1c76c     80 E4 05 F1 | 	add	objptr, ##38016
1c770     F2 16 02 FB | 	rdlong	arg03, objptr
1c774     0B 15 02 F6 | 	mov	arg02, arg03
1c778     01 14 66 F0 | 	shl	arg02, #1
1c77c     0B 15 02 F1 | 	add	arg02, arg03
1c780     02 14 66 F0 | 	shl	arg02, #2
1c784     03 00 00 FF 
1c788     04 E4 85 F1 | 	sub	objptr, ##1540
1c78c     F2 14 02 F1 | 	add	arg02, objptr
1c790     0A 15 02 FB | 	rdlong	arg02, arg02
1c794     18 4E 05 F1 | 	add	fp, #24
1c798     A7 14 62 FC | 	wrlong	arg02, fp
1c79c                 | ' 
1c79c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1c79c                 | ' if variables(varnum).vartype<array_no_type then 
1c79c     18 4E 85 F1 | 	sub	fp, #24
1c7a0     04 14 66 F0 | 	shl	arg02, #4
1c7a4     32 00 00 FF 
1c7a8     84 E4 85 F1 | 	sub	objptr, ##25732
1c7ac     F2 14 02 F1 | 	add	arg02, objptr
1c7b0     0C 14 06 F1 | 	add	arg02, #12
1c7b4     0A 17 02 FB | 	rdlong	arg03, arg02
1c7b8     00 17 16 F2 | 	cmp	arg03, #256 wc
1c7bc     14 00 00 FF 
1c7c0     F8 E5 85 F1 | 	sub	objptr, ##10744
1c7c4     18 01 90 3D |  if_ae	jmp	#LR__2260
1c7c8     9C 0D BF FD | 	call	#_pop
1c7cc     A7 FA 61 FC | 	wrlong	result1, fp
1c7d0     04 4E 05 F1 | 	add	fp, #4
1c7d4     A7 FC 61 FC | 	wrlong	result2, fp
1c7d8     04 4E 05 F1 | 	add	fp, #4
1c7dc     A7 FE 61 FC | 	wrlong	result3, fp
1c7e0     08 4E 85 F1 | 	sub	fp, #8
1c7e4     A7 16 02 FB | 	rdlong	arg03, fp
1c7e8     04 4E 05 F1 | 	add	fp, #4
1c7ec     A7 14 02 FB | 	rdlong	arg02, fp
1c7f0     14 4E 05 F1 | 	add	fp, #20
1c7f4     A7 12 02 FB | 	rdlong	arg01, fp
1c7f8     04 12 66 F0 | 	shl	arg01, #4
1c7fc     14 00 00 FF 
1c800     F8 E5 05 F1 | 	add	objptr, ##10744
1c804     F2 12 02 F1 | 	add	arg01, objptr
1c808     04 12 06 F1 | 	add	arg01, #4
1c80c     09 17 62 FC | 	wrlong	arg03, arg01
1c810     A7 16 02 FB | 	rdlong	arg03, fp
1c814     04 16 66 F0 | 	shl	arg03, #4
1c818     F2 16 02 F1 | 	add	arg03, objptr
1c81c     08 16 06 F1 | 	add	arg03, #8
1c820     0B 15 62 FC | 	wrlong	arg02, arg03
1c824     A7 16 02 FB | 	rdlong	arg03, fp
1c828     04 16 66 F0 | 	shl	arg03, #4
1c82c     F2 16 02 F1 | 	add	arg03, objptr
1c830     10 4E 85 F1 | 	sub	fp, #16
1c834     A7 14 02 FB | 	rdlong	arg02, fp
1c838     0C 16 06 F1 | 	add	arg03, #12
1c83c     0B 15 62 FC | 	wrlong	arg02, arg03
1c840                 | '   t1=pop() 
1c840                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1c840                 | '   if variables(varnum).vartype<>result_string2 then return
1c840     10 4E 05 F1 | 	add	fp, #16
1c844     A7 16 02 FB | 	rdlong	arg03, fp
1c848     18 4E 85 F1 | 	sub	fp, #24
1c84c     04 16 66 F0 | 	shl	arg03, #4
1c850     F2 16 02 F1 | 	add	arg03, objptr
1c854     0C 16 06 F1 | 	add	arg03, #12
1c858     0B 17 02 FB | 	rdlong	arg03, arg03
1c85c     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c860     14 00 00 FF 
1c864     F8 E5 85 F1 | 	sub	objptr, ##10744
1c868     EC 04 90 5D |  if_ne	jmp	#LR__2283
1c86c     18 4E 05 F1 | 	add	fp, #24
1c870     A7 16 02 FB | 	rdlong	arg03, fp
1c874     0B 27 02 F6 | 	mov	local01, arg03
1c878     04 26 66 F0 | 	shl	local01, #4
1c87c     14 00 00 FF 
1c880     F8 E5 05 F1 | 	add	objptr, ##10744
1c884     F2 26 02 F1 | 	add	local01, objptr
1c888     18 4E 85 F1 | 	sub	fp, #24
1c88c     04 16 66 F0 | 	shl	arg03, #4
1c890     F2 16 02 F1 | 	add	arg03, objptr
1c894     04 16 06 F1 | 	add	arg03, #4
1c898     0B 13 02 FB | 	rdlong	arg01, arg03
1c89c     14 00 00 FF 
1c8a0     F8 E5 85 F1 | 	sub	objptr, ##10744
1c8a4     38 0E BF FD | 	call	#_convertstring
1c8a8     04 26 06 F1 | 	add	local01, #4
1c8ac     13 FB 61 FC | 	wrlong	result1, local01
1c8b0     18 4E 05 F1 | 	add	fp, #24
1c8b4     A7 26 02 FB | 	rdlong	local01, fp
1c8b8     18 4E 85 F1 | 	sub	fp, #24
1c8bc     04 26 66 F0 | 	shl	local01, #4
1c8c0     14 00 00 FF 
1c8c4     F8 E5 05 F1 | 	add	objptr, ##10744
1c8c8     F2 26 02 F1 | 	add	local01, objptr
1c8cc     0C 26 06 F1 | 	add	local01, #12
1c8d0     13 3F 68 FC | 	wrlong	#31, local01
1c8d4                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1c8d4                 | '   variables(varnum).vartype=result_string
1c8d4                 | '   return
1c8d4     14 00 00 FF 
1c8d8     F8 E5 85 F1 | 	sub	objptr, ##10744
1c8dc     78 04 90 FD | 	jmp	#LR__2283
1c8e0                 | LR__2260
1c8e0                 | ' for i=0 to 2 : arrid(i)=0 : next i
1c8e0     1C 4E 05 F1 | 	add	fp, #28
1c8e4     A7 00 68 FC | 	wrlong	#0, fp
1c8e8     97 16 48 FB | 	callpa	#(@LR__2262-@LR__2261)>>2,fcache_load_ptr_
1c8ec                 | LR__2261
1c8ec     A7 26 02 FB | 	rdlong	local01, fp
1c8f0     02 26 66 F0 | 	shl	local01, #2
1c8f4     18 4E 05 F1 | 	add	fp, #24
1c8f8     A7 26 02 F1 | 	add	local01, fp
1c8fc     13 01 68 FC | 	wrlong	#0, local01
1c900     18 4E 85 F1 | 	sub	fp, #24
1c904     A7 26 02 FB | 	rdlong	local01, fp
1c908     01 26 06 F1 | 	add	local01, #1
1c90c     A7 26 62 FC | 	wrlong	local01, fp
1c910     03 26 16 F2 | 	cmp	local01, #3 wc
1c914     D4 FF 9F CD |  if_b	jmp	#LR__2261
1c918                 | LR__2262
1c918     4A 00 00 FF 
1c91c     80 E4 05 F1 | 	add	objptr, ##38016
1c920     F2 16 02 FB | 	rdlong	arg03, objptr
1c924     0B 27 02 F6 | 	mov	local01, arg03
1c928     01 26 66 F0 | 	shl	local01, #1
1c92c     0B 27 02 F1 | 	add	local01, arg03
1c930     02 26 66 F0 | 	shl	local01, #2
1c934     03 00 00 FF 
1c938     04 E4 85 F1 | 	sub	objptr, ##1540
1c93c     F2 26 02 F1 | 	add	local01, objptr
1c940     04 26 06 F1 | 	add	local01, #4
1c944     13 29 02 FB | 	rdlong	local02, local01
1c948     04 4E 05 F1 | 	add	fp, #4
1c94c     A7 28 62 FC | 	wrlong	local02, fp
1c950     20 4E 85 F1 | 	sub	fp, #32
1c954     47 00 00 FF 
1c958     7C E4 85 F1 | 	sub	objptr, ##36476
1c95c     08 0C BF FD | 	call	#_pop
1c960     A7 FA 61 FC | 	wrlong	result1, fp
1c964     04 4E 05 F1 | 	add	fp, #4
1c968     A7 FC 61 FC | 	wrlong	result2, fp
1c96c     04 4E 05 F1 | 	add	fp, #4
1c970     A7 FE 61 FC | 	wrlong	result3, fp
1c974                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1c974                 | ' t1=pop() ' var value
1c974                 | ' if numpar>0 then
1c974     18 4E 05 F1 | 	add	fp, #24
1c978     A7 2A 02 FB | 	rdlong	local03, fp
1c97c     20 4E 85 F1 | 	sub	fp, #32
1c980     01 2A 16 F2 | 	cmp	local03, #1 wc
1c984     78 00 90 CD |  if_b	jmp	#LR__2265
1c988                 | '   for i=numpar to 1 step -1
1c988     20 4E 05 F1 | 	add	fp, #32
1c98c     A7 2C 0A FB | 	rdlong	local04, fp wz
1c990     04 4E 85 F1 | 	sub	fp, #4
1c994     A7 2C 62 FC | 	wrlong	local04, fp
1c998     1C 4E 85 F1 | 	sub	fp, #28
1c99c     60 00 90 AD |  if_e	jmp	#LR__2264
1c9a0                 | LR__2263
1c9a0     C4 0B BF FD | 	call	#_pop
1c9a4     0C 4E 05 F1 | 	add	fp, #12
1c9a8     A7 FA 61 FC | 	wrlong	result1, fp
1c9ac     04 4E 05 F1 | 	add	fp, #4
1c9b0     A7 FC 61 FC | 	wrlong	result2, fp
1c9b4     04 4E 05 F1 | 	add	fp, #4
1c9b8     A7 FE 61 FC | 	wrlong	result3, fp
1c9bc     08 4E 05 F1 | 	add	fp, #8
1c9c0     A7 2A 02 FB | 	rdlong	local03, fp
1c9c4     01 2A 86 F1 | 	sub	local03, #1
1c9c8     02 2A 66 F0 | 	shl	local03, #2
1c9cc     18 4E 05 F1 | 	add	fp, #24
1c9d0     A7 2A 02 F1 | 	add	local03, fp
1c9d4     28 4E 85 F1 | 	sub	fp, #40
1c9d8     A7 12 02 F6 | 	mov	arg01, fp
1c9dc     0C 4E 85 F1 | 	sub	fp, #12
1c9e0     68 0D BF FD | 	call	#_converttoint
1c9e4     15 FB 61 FC | 	wrlong	result1, local03
1c9e8     1C 4E 05 F1 | 	add	fp, #28
1c9ec     A7 2C 02 FB | 	rdlong	local04, fp
1c9f0     01 2C 8E F1 | 	sub	local04, #1 wz
1c9f4     A7 2C 62 FC | 	wrlong	local04, fp
1c9f8     1C 4E 85 F1 | 	sub	fp, #28
1c9fc     A0 FF 9F 5D |  if_ne	jmp	#LR__2263
1ca00                 | LR__2264
1ca00                 | LR__2265
1ca00     18 4E 05 F1 | 	add	fp, #24
1ca04     A7 26 02 FB | 	rdlong	local01, fp
1ca08     04 26 66 F0 | 	shl	local01, #4
1ca0c     14 00 00 FF 
1ca10     F8 E5 05 F1 | 	add	objptr, ##10744
1ca14     F2 26 02 F1 | 	add	local01, objptr
1ca18     04 26 06 F1 | 	add	local01, #4
1ca1c     13 13 02 FB | 	rdlong	arg01, local01
1ca20     0C 4E 05 F1 | 	add	fp, #12
1ca24     A7 12 62 FC | 	wrlong	arg01, fp
1ca28     24 4E 85 F1 | 	sub	fp, #36
1ca2c     14 00 00 FF 
1ca30     F8 E5 85 F1 | 	sub	objptr, ##10744
1ca34     A0 67 B0 FD | 	call	#_pslpeek
1ca38     FD 2C 32 F9 | 	getword	local04, result1, #0
1ca3c     28 4E 05 F1 | 	add	fp, #40
1ca40     A7 2C 62 FC | 	wrlong	local04, fp
1ca44     04 4E 85 F1 | 	sub	fp, #4
1ca48     A7 12 02 FB | 	rdlong	arg01, fp
1ca4c     24 4E 85 F1 | 	sub	fp, #36
1ca50     02 12 06 F1 | 	add	arg01, #2
1ca54     28 67 B0 FD | 	call	#_pspeek
1ca58     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ca5c     2C 4E 05 F1 | 	add	fp, #44
1ca60     A7 FA 61 FC | 	wrlong	result1, fp
1ca64                 | ' esize=pspeek(arrptr+2)
1ca64                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1ca64     08 4E 85 F1 | 	sub	fp, #8
1ca68     A7 12 02 FB | 	rdlong	arg01, fp
1ca6c     24 4E 85 F1 | 	sub	fp, #36
1ca70     04 12 06 F1 | 	add	arg01, #4
1ca74     60 67 B0 FD | 	call	#_pslpeek
1ca78     FD 2C 02 F6 | 	mov	local04, result1
1ca7c     34 4E 05 F1 | 	add	fp, #52
1ca80     A7 26 02 FB | 	rdlong	local01, fp
1ca84     34 4E 85 F1 | 	sub	fp, #52
1ca88     16 27 12 F2 | 	cmp	local01, local04 wc
1ca8c     54 00 90 3D |  if_ae	jmp	#LR__2266
1ca90     24 4E 05 F1 | 	add	fp, #36
1ca94     A7 12 02 FB | 	rdlong	arg01, fp
1ca98     24 4E 85 F1 | 	sub	fp, #36
1ca9c     08 12 06 F1 | 	add	arg01, #8
1caa0     34 67 B0 FD | 	call	#_pslpeek
1caa4     FD 26 02 F6 | 	mov	local01, result1
1caa8     38 4E 05 F1 | 	add	fp, #56
1caac     A7 2C 02 FB | 	rdlong	local04, fp
1cab0     38 4E 85 F1 | 	sub	fp, #56
1cab4     13 2D 12 F2 | 	cmp	local04, local01 wc
1cab8     28 00 90 3D |  if_ae	jmp	#LR__2266
1cabc     24 4E 05 F1 | 	add	fp, #36
1cac0     A7 12 02 FB | 	rdlong	arg01, fp
1cac4     24 4E 85 F1 | 	sub	fp, #36
1cac8     0C 12 06 F1 | 	add	arg01, #12
1cacc     08 67 B0 FD | 	call	#_pslpeek
1cad0     3C 4E 05 F1 | 	add	fp, #60
1cad4     A7 2C 02 FB | 	rdlong	local04, fp
1cad8     3C 4E 85 F1 | 	sub	fp, #60
1cadc     FD 2C 12 F2 | 	cmp	local04, result1 wc
1cae0     10 00 90 CD |  if_b	jmp	#LR__2267
1cae4                 | LR__2266
1cae4     31 12 06 F6 | 	mov	arg01, #49
1cae8     00 14 06 F6 | 	mov	arg02, #0
1caec     18 64 B0 FD | 	call	#_printerror
1caf0     64 02 90 FD | 	jmp	#LR__2283
1caf4                 | LR__2267
1caf4     24 4E 05 F1 | 	add	fp, #36
1caf8     A7 12 02 FB | 	rdlong	arg01, fp
1cafc     09 2D 02 F6 | 	mov	local04, arg01
1cb00     10 2C 06 F1 | 	add	local04, #16
1cb04     24 4E 85 F1 | 	sub	fp, #36
1cb08     04 12 06 F1 | 	add	arg01, #4
1cb0c     C8 66 B0 FD | 	call	#_pslpeek
1cb10     FD 26 02 F6 | 	mov	local01, result1
1cb14     38 4E 05 F1 | 	add	fp, #56
1cb18     A7 28 02 FB | 	rdlong	local02, fp
1cb1c     14 27 02 FD | 	qmul	local01, local02
1cb20     04 4E 85 F1 | 	sub	fp, #4
1cb24     A7 2A 02 FB | 	rdlong	local03, fp
1cb28     10 4E 85 F1 | 	sub	fp, #16
1cb2c     A7 12 02 FB | 	rdlong	arg01, fp
1cb30     24 4E 85 F1 | 	sub	fp, #36
1cb34     08 12 06 F1 | 	add	arg01, #8
1cb38     18 28 62 FD | 	getqx	local02
1cb3c     14 2B 02 F1 | 	add	local03, local02
1cb40     94 66 B0 FD | 	call	#_pslpeek
1cb44     FD 28 02 F6 | 	mov	local02, result1
1cb48     24 4E 05 F1 | 	add	fp, #36
1cb4c     A7 12 02 FB | 	rdlong	arg01, fp
1cb50     24 4E 85 F1 | 	sub	fp, #36
1cb54     04 12 06 F1 | 	add	arg01, #4
1cb58     7C 66 B0 FD | 	call	#_pslpeek
1cb5c     FD 28 02 FD | 	qmul	local02, result1
1cb60     3C 4E 05 F1 | 	add	fp, #60
1cb64     A7 28 02 FB | 	rdlong	local02, fp
1cb68     18 26 62 FD | 	getqx	local01
1cb6c     14 27 02 FD | 	qmul	local01, local02
1cb70     10 4E 85 F1 | 	sub	fp, #16
1cb74     A7 28 02 FB | 	rdlong	local02, fp
1cb78     18 26 62 FD | 	getqx	local01
1cb7c     13 2B 02 F1 | 	add	local03, local01
1cb80     15 29 02 FD | 	qmul	local02, local03
1cb84     04 4E 05 F1 | 	add	fp, #4
1cb88                 | ' 
1cb88                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1cb88                 | ' select case arrtype
1cb88     18 2A 62 FD | 	getqx	local03
1cb8c     15 2D 02 F1 | 	add	local04, local03
1cb90     A7 2C 62 FC | 	wrlong	local04, fp
1cb94     08 4E 85 F1 | 	sub	fp, #8
1cb98     A7 2E 02 FB | 	rdlong	local05, fp
1cb9c     28 4E 85 F1 | 	sub	fp, #40
1cba0     00 2F 86 F1 | 	sub	local05, #256
1cba4     0C 2E 26 F3 | 	fle	local05, #12
1cba8     30 2E 62 FD | 	jmprel	local05
1cbac                 | LR__2268
1cbac     30 00 90 FD | 	jmp	#LR__2269
1cbb0     58 00 90 FD | 	jmp	#LR__2270
1cbb4     6C 00 90 FD | 	jmp	#LR__2271
1cbb8     80 00 90 FD | 	jmp	#LR__2272
1cbbc     B0 00 90 FD | 	jmp	#LR__2273
1cbc0     E0 00 90 FD | 	jmp	#LR__2274
1cbc4     F4 00 90 FD | 	jmp	#LR__2275
1cbc8     08 01 90 FD | 	jmp	#LR__2276
1cbcc     1C 01 90 FD | 	jmp	#LR__2277
1cbd0     30 01 90 FD | 	jmp	#LR__2278
1cbd4     44 01 90 FD | 	jmp	#LR__2279
1cbd8     58 01 90 FD | 	jmp	#LR__2280
1cbdc     6C 01 90 FD | 	jmp	#LR__2281
1cbe0                 | LR__2269
1cbe0     A7 12 02 F6 | 	mov	arg01, fp
1cbe4     30 4E 05 F1 | 	add	fp, #48
1cbe8     A7 14 02 FB | 	rdlong	arg02, fp
1cbec     30 4E 85 F1 | 	sub	fp, #48
1cbf0     0C 16 06 F6 | 	mov	arg03, #12
1cbf4     0B 00 00 FF 
1cbf8     CC E4 05 F1 | 	add	objptr, ##5836
1cbfc     0C 91 B0 FD | 	call	#_psram_spin2_write
1cc00     0B 00 00 FF 
1cc04     CC E4 85 F1 | 	sub	objptr, ##5836
1cc08     4C 01 90 FD | 	jmp	#LR__2282
1cc0c                 | LR__2270
1cc0c     30 4E 05 F1 | 	add	fp, #48
1cc10     A7 12 02 FB | 	rdlong	arg01, fp
1cc14     30 4E 85 F1 | 	sub	fp, #48
1cc18     A7 14 02 FB | 	rdlong	arg02, fp
1cc1c     18 65 B0 FD | 	call	#_pspoke
1cc20     34 01 90 FD | 	jmp	#LR__2282
1cc24                 | LR__2271
1cc24     30 4E 05 F1 | 	add	fp, #48
1cc28     A7 12 02 FB | 	rdlong	arg01, fp
1cc2c     30 4E 85 F1 | 	sub	fp, #48
1cc30     A7 14 02 FB | 	rdlong	arg02, fp
1cc34     00 65 B0 FD | 	call	#_pspoke
1cc38     1C 01 90 FD | 	jmp	#LR__2282
1cc3c                 | LR__2272
1cc3c     30 4E 05 F1 | 	add	fp, #48
1cc40     A7 12 02 FB | 	rdlong	arg01, fp
1cc44     30 4E 85 F1 | 	sub	fp, #48
1cc48     A7 14 02 FB | 	rdlong	arg02, fp
1cc4c     E8 64 B0 FD | 	call	#_pspoke
1cc50     30 4E 05 F1 | 	add	fp, #48
1cc54     A7 12 02 FB | 	rdlong	arg01, fp
1cc58     30 4E 85 F1 | 	sub	fp, #48
1cc5c     01 12 06 F1 | 	add	arg01, #1
1cc60     A7 14 02 FB | 	rdlong	arg02, fp
1cc64     08 14 46 F0 | 	shr	arg02, #8
1cc68     CC 64 B0 FD | 	call	#_pspoke
1cc6c     E8 00 90 FD | 	jmp	#LR__2282
1cc70                 | LR__2273
1cc70     30 4E 05 F1 | 	add	fp, #48
1cc74     A7 12 02 FB | 	rdlong	arg01, fp
1cc78     30 4E 85 F1 | 	sub	fp, #48
1cc7c     A7 14 02 FB | 	rdlong	arg02, fp
1cc80     B4 64 B0 FD | 	call	#_pspoke
1cc84     30 4E 05 F1 | 	add	fp, #48
1cc88     A7 12 02 FB | 	rdlong	arg01, fp
1cc8c     30 4E 85 F1 | 	sub	fp, #48
1cc90     01 12 06 F1 | 	add	arg01, #1
1cc94     A7 14 02 FB | 	rdlong	arg02, fp
1cc98     08 14 46 F0 | 	shr	arg02, #8
1cc9c     98 64 B0 FD | 	call	#_pspoke
1cca0     B4 00 90 FD | 	jmp	#LR__2282
1cca4                 | LR__2274
1cca4     30 4E 05 F1 | 	add	fp, #48
1cca8     A7 12 02 FB | 	rdlong	arg01, fp
1ccac     30 4E 85 F1 | 	sub	fp, #48
1ccb0     A7 14 02 FB | 	rdlong	arg02, fp
1ccb4     F0 63 B0 FD | 	call	#_pslpoke
1ccb8     9C 00 90 FD | 	jmp	#LR__2282
1ccbc                 | LR__2275
1ccbc     30 4E 05 F1 | 	add	fp, #48
1ccc0     A7 12 02 FB | 	rdlong	arg01, fp
1ccc4     30 4E 85 F1 | 	sub	fp, #48
1ccc8     A7 14 02 FB | 	rdlong	arg02, fp
1cccc     D8 63 B0 FD | 	call	#_pslpoke
1ccd0     84 00 90 FD | 	jmp	#LR__2282
1ccd4                 | LR__2276
1ccd4     30 4E 05 F1 | 	add	fp, #48
1ccd8     A7 12 02 FB | 	rdlong	arg01, fp
1ccdc     30 4E 85 F1 | 	sub	fp, #48
1cce0     A7 14 02 FB | 	rdlong	arg02, fp
1cce4     C0 63 B0 FD | 	call	#_pslpoke
1cce8     6C 00 90 FD | 	jmp	#LR__2282
1ccec                 | LR__2277
1ccec     30 4E 05 F1 | 	add	fp, #48
1ccf0     A7 12 02 FB | 	rdlong	arg01, fp
1ccf4     30 4E 85 F1 | 	sub	fp, #48
1ccf8     A7 14 02 FB | 	rdlong	arg02, fp
1ccfc     A8 63 B0 FD | 	call	#_pslpoke
1cd00     54 00 90 FD | 	jmp	#LR__2282
1cd04                 | LR__2278
1cd04     30 4E 05 F1 | 	add	fp, #48
1cd08     A7 12 02 FB | 	rdlong	arg01, fp
1cd0c     30 4E 85 F1 | 	sub	fp, #48
1cd10     A7 14 02 FB | 	rdlong	arg02, fp
1cd14     90 63 B0 FD | 	call	#_pslpoke
1cd18     3C 00 90 FD | 	jmp	#LR__2282
1cd1c                 | LR__2279
1cd1c     30 4E 05 F1 | 	add	fp, #48
1cd20     A7 12 02 FB | 	rdlong	arg01, fp
1cd24     30 4E 85 F1 | 	sub	fp, #48
1cd28     A7 14 02 FB | 	rdlong	arg02, fp
1cd2c     78 63 B0 FD | 	call	#_pslpoke
1cd30     24 00 90 FD | 	jmp	#LR__2282
1cd34                 | LR__2280
1cd34     30 4E 05 F1 | 	add	fp, #48
1cd38     A7 12 02 FB | 	rdlong	arg01, fp
1cd3c     30 4E 85 F1 | 	sub	fp, #48
1cd40     A7 14 02 FB | 	rdlong	arg02, fp
1cd44     60 63 B0 FD | 	call	#_pslpoke
1cd48     0C 00 90 FD | 	jmp	#LR__2282
1cd4c                 | LR__2281
1cd4c     32 12 06 F6 | 	mov	arg01, #50
1cd50     00 14 06 F6 | 	mov	arg02, #0
1cd54     B0 61 B0 FD | 	call	#_printerror
1cd58                 | LR__2282
1cd58                 | LR__2283
1cd58     A7 F0 03 F6 | 	mov	ptra, fp
1cd5c     B2 00 A0 FD | 	call	#popregs_
1cd60                 | _do_assign_ret
1cd60     2D 00 64 FD | 	ret
1cd64                 | 
1cd64                 | ' 
1cd64                 | ' 
1cd64                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1cd64                 | ' 
1cd64                 | ' sub do_getvar
1cd64                 | _do_getvar
1cd64     04 4A 05 F6 | 	mov	COUNT_, #4
1cd68     A8 00 A0 FD | 	call	#pushregs_
1cd6c     3C F0 07 F1 | 	add	ptra, #60
1cd70                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1cd70     4A 00 00 FF 
1cd74     80 E4 05 F1 | 	add	objptr, ##38016
1cd78     F2 26 02 FB | 	rdlong	local01, objptr
1cd7c     13 17 02 F6 | 	mov	arg03, local01
1cd80     01 16 66 F0 | 	shl	arg03, #1
1cd84     13 17 02 F1 | 	add	arg03, local01
1cd88     02 16 66 F0 | 	shl	arg03, #2
1cd8c     03 00 00 FF 
1cd90     04 E4 85 F1 | 	sub	objptr, ##1540
1cd94     F2 16 02 F1 | 	add	arg03, objptr
1cd98     04 16 06 F1 | 	add	arg03, #4
1cd9c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1cda0     47 00 00 FF 
1cda4     7C E4 85 F1 | 	sub	objptr, ##36476
1cda8     C4 00 90 5D |  if_ne	jmp	#LR__2291
1cdac     4A 00 00 FF 
1cdb0     80 E4 05 F1 | 	add	objptr, ##38016
1cdb4     F2 26 02 FB | 	rdlong	local01, objptr
1cdb8     13 13 02 F6 | 	mov	arg01, local01
1cdbc     01 12 66 F0 | 	shl	arg01, #1
1cdc0     13 13 02 F1 | 	add	arg01, local01
1cdc4     02 12 66 F0 | 	shl	arg01, #2
1cdc8     03 00 00 FF 
1cdcc     04 E4 85 F1 | 	sub	objptr, ##1540
1cdd0     F2 12 02 F1 | 	add	arg01, objptr
1cdd4     09 27 02 FB | 	rdlong	local01, arg01
1cdd8     04 26 66 F0 | 	shl	local01, #4
1cddc     32 00 00 FF 
1cde0     84 E4 85 F1 | 	sub	objptr, ##25732
1cde4     F2 26 02 F1 | 	add	local01, objptr
1cde8     04 26 06 F1 | 	add	local01, #4
1cdec     13 13 02 FB | 	rdlong	arg01, local01
1cdf0     04 26 06 F1 | 	add	local01, #4
1cdf4     13 27 02 FB | 	rdlong	local01, local01
1cdf8     A7 12 62 FC | 	wrlong	arg01, fp
1cdfc     04 4E 05 F1 | 	add	fp, #4
1ce00     A7 26 62 FC | 	wrlong	local01, fp
1ce04     35 00 00 FF 
1ce08     88 E4 05 F1 | 	add	objptr, ##27272
1ce0c     F2 26 02 FB | 	rdlong	local01, objptr
1ce10     13 13 02 F6 | 	mov	arg01, local01
1ce14     01 12 66 F0 | 	shl	arg01, #1
1ce18     13 13 02 F1 | 	add	arg01, local01
1ce1c     02 12 66 F0 | 	shl	arg01, #2
1ce20     03 00 00 FF 
1ce24     04 E4 85 F1 | 	sub	objptr, ##1540
1ce28     F2 12 02 F1 | 	add	arg01, objptr
1ce2c     09 27 02 FB | 	rdlong	local01, arg01
1ce30     04 26 66 F0 | 	shl	local01, #4
1ce34     32 00 00 FF 
1ce38     84 E4 85 F1 | 	sub	objptr, ##25732
1ce3c     F2 26 02 F1 | 	add	local01, objptr
1ce40     0C 26 06 F1 | 	add	local01, #12
1ce44     13 27 02 FB | 	rdlong	local01, local01
1ce48     04 4E 05 F1 | 	add	fp, #4
1ce4c     A7 26 62 FC | 	wrlong	local01, fp
1ce50                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1ce50                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1ce50                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1ce50     08 4E 85 F1 | 	sub	fp, #8
1ce54     00 27 16 F2 | 	cmp	local01, #256 wc
1ce58     14 00 00 FF 
1ce5c     F8 E5 85 F1 | 	sub	objptr, ##10744
1ce60     0C 00 90 3D |  if_ae	jmp	#LR__2290
1ce64     A7 12 02 F6 | 	mov	arg01, fp
1ce68     94 07 BF FD | 	call	#_push
1ce6c     A0 04 90 FD | 	jmp	#LR__2312
1ce70                 | LR__2290
1ce70                 | LR__2291
1ce70     4A 00 00 FF 
1ce74     80 E4 05 F1 | 	add	objptr, ##38016
1ce78     F2 16 02 FB | 	rdlong	arg03, objptr
1ce7c     0B 15 02 F6 | 	mov	arg02, arg03
1ce80     01 14 66 F0 | 	shl	arg02, #1
1ce84     0B 15 02 F1 | 	add	arg02, arg03
1ce88     02 14 66 F0 | 	shl	arg02, #2
1ce8c     03 00 00 FF 
1ce90     04 E4 85 F1 | 	sub	objptr, ##1540
1ce94     F2 14 02 F1 | 	add	arg02, objptr
1ce98     0A 17 02 FB | 	rdlong	arg03, arg02
1ce9c     04 16 66 F0 | 	shl	arg03, #4
1cea0     32 00 00 FF 
1cea4     84 E4 85 F1 | 	sub	objptr, ##25732
1cea8     F2 16 02 F1 | 	add	arg03, objptr
1ceac     04 16 06 F1 | 	add	arg03, #4
1ceb0     0B 13 02 FB | 	rdlong	arg01, arg03
1ceb4     0C 4E 05 F1 | 	add	fp, #12
1ceb8     A7 12 62 FC | 	wrlong	arg01, fp
1cebc     0C 4E 85 F1 | 	sub	fp, #12
1cec0     14 00 00 FF 
1cec4     F8 E5 85 F1 | 	sub	objptr, ##10744
1cec8     0C 63 B0 FD | 	call	#_pslpeek
1cecc     FD FA 31 F9 | 	getword	result1, result1, #0
1ced0     10 4E 05 F1 | 	add	fp, #16
1ced4     A7 FA 61 FC | 	wrlong	result1, fp
1ced8     4A 00 00 FF 
1cedc     80 E4 05 F1 | 	add	objptr, ##38016
1cee0     F2 16 02 FB | 	rdlong	arg03, objptr
1cee4     0B 15 02 F6 | 	mov	arg02, arg03
1cee8     01 14 66 F0 | 	shl	arg02, #1
1ceec     0B 15 02 F1 | 	add	arg02, arg03
1cef0     02 14 66 F0 | 	shl	arg02, #2
1cef4     03 00 00 FF 
1cef8     04 E4 85 F1 | 	sub	objptr, ##1540
1cefc     F2 14 02 F1 | 	add	arg02, objptr
1cf00     04 14 06 F1 | 	add	arg02, #4
1cf04     0A 17 02 FB | 	rdlong	arg03, arg02
1cf08     04 4E 05 F1 | 	add	fp, #4
1cf0c     A7 16 62 FC | 	wrlong	arg03, fp
1cf10     08 4E 85 F1 | 	sub	fp, #8
1cf14     A7 12 02 FB | 	rdlong	arg01, fp
1cf18     0C 4E 85 F1 | 	sub	fp, #12
1cf1c     02 12 06 F1 | 	add	arg01, #2
1cf20     47 00 00 FF 
1cf24     7C E4 85 F1 | 	sub	objptr, ##36476
1cf28     54 62 B0 FD | 	call	#_pspeek
1cf2c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cf30     18 4E 05 F1 | 	add	fp, #24
1cf34     A7 FA 61 FC | 	wrlong	result1, fp
1cf38     0C 4E 85 F1 | 	sub	fp, #12
1cf3c     A7 12 02 FB | 	rdlong	arg01, fp
1cf40     0C 4E 85 F1 | 	sub	fp, #12
1cf44     04 12 06 F1 | 	add	arg01, #4
1cf48     8C 62 B0 FD | 	call	#_pslpeek
1cf4c     1C 4E 05 F1 | 	add	fp, #28
1cf50     A7 FA 61 FC | 	wrlong	result1, fp
1cf54     10 4E 85 F1 | 	sub	fp, #16
1cf58     A7 12 02 FB | 	rdlong	arg01, fp
1cf5c     0C 4E 85 F1 | 	sub	fp, #12
1cf60     08 12 06 F1 | 	add	arg01, #8
1cf64     70 62 B0 FD | 	call	#_pslpeek
1cf68     20 4E 05 F1 | 	add	fp, #32
1cf6c     A7 FA 61 FC | 	wrlong	result1, fp
1cf70     14 4E 85 F1 | 	sub	fp, #20
1cf74     A7 12 02 FB | 	rdlong	arg01, fp
1cf78     0C 4E 85 F1 | 	sub	fp, #12
1cf7c     0C 12 06 F1 | 	add	arg01, #12
1cf80     54 62 B0 FD | 	call	#_pslpeek
1cf84     24 4E 05 F1 | 	add	fp, #36
1cf88     A7 FA 61 FC | 	wrlong	result1, fp
1cf8c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1cf8c                 | ' esize=pspeek(arrptr+2)
1cf8c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1cf8c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1cf8c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1cf8c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1cf8c     10 4E 85 F1 | 	sub	fp, #16
1cf90     A7 16 02 FB | 	rdlong	arg03, fp
1cf94     14 4E 85 F1 | 	sub	fp, #20
1cf98     03 16 16 F2 | 	cmp	arg03, #3 wc
1cf9c     38 00 90 CD |  if_b	jmp	#LR__2292
1cfa0     C4 05 BF FD | 	call	#_pop
1cfa4     FF 16 02 F6 | 	mov	arg03, result3
1cfa8     A7 FA 61 FC | 	wrlong	result1, fp
1cfac     04 4E 05 F1 | 	add	fp, #4
1cfb0     A7 FC 61 FC | 	wrlong	result2, fp
1cfb4     04 4E 05 F1 | 	add	fp, #4
1cfb8     A7 16 62 FC | 	wrlong	arg03, fp
1cfbc     08 4E 85 F1 | 	sub	fp, #8
1cfc0     A7 12 02 F6 | 	mov	arg01, fp
1cfc4     84 07 BF FD | 	call	#_converttoint
1cfc8     30 4E 05 F1 | 	add	fp, #48
1cfcc     A7 FA 61 FC | 	wrlong	result1, fp
1cfd0     30 4E 85 F1 | 	sub	fp, #48
1cfd4     0C 00 90 FD | 	jmp	#LR__2293
1cfd8                 | LR__2292
1cfd8     30 4E 05 F1 | 	add	fp, #48
1cfdc     A7 00 68 FC | 	wrlong	#0, fp
1cfe0     30 4E 85 F1 | 	sub	fp, #48
1cfe4                 | LR__2293
1cfe4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1cfe4     14 4E 05 F1 | 	add	fp, #20
1cfe8     A7 16 02 FB | 	rdlong	arg03, fp
1cfec     14 4E 85 F1 | 	sub	fp, #20
1cff0     02 16 16 F2 | 	cmp	arg03, #2 wc
1cff4     38 00 90 CD |  if_b	jmp	#LR__2294
1cff8     6C 05 BF FD | 	call	#_pop
1cffc     FF 16 02 F6 | 	mov	arg03, result3
1d000     A7 FA 61 FC | 	wrlong	result1, fp
1d004     04 4E 05 F1 | 	add	fp, #4
1d008     A7 FC 61 FC | 	wrlong	result2, fp
1d00c     04 4E 05 F1 | 	add	fp, #4
1d010     A7 16 62 FC | 	wrlong	arg03, fp
1d014     08 4E 85 F1 | 	sub	fp, #8
1d018     A7 12 02 F6 | 	mov	arg01, fp
1d01c     2C 07 BF FD | 	call	#_converttoint
1d020     2C 4E 05 F1 | 	add	fp, #44
1d024     A7 FA 61 FC | 	wrlong	result1, fp
1d028     2C 4E 85 F1 | 	sub	fp, #44
1d02c     0C 00 90 FD | 	jmp	#LR__2295
1d030                 | LR__2294
1d030     2C 4E 05 F1 | 	add	fp, #44
1d034     A7 00 68 FC | 	wrlong	#0, fp
1d038     2C 4E 85 F1 | 	sub	fp, #44
1d03c                 | LR__2295
1d03c                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d03c     14 4E 05 F1 | 	add	fp, #20
1d040     A7 16 02 FB | 	rdlong	arg03, fp
1d044     14 4E 85 F1 | 	sub	fp, #20
1d048     01 16 16 F2 | 	cmp	arg03, #1 wc
1d04c     38 00 90 CD |  if_b	jmp	#LR__2296
1d050     14 05 BF FD | 	call	#_pop
1d054     FF 16 02 F6 | 	mov	arg03, result3
1d058     A7 FA 61 FC | 	wrlong	result1, fp
1d05c     04 4E 05 F1 | 	add	fp, #4
1d060     A7 FC 61 FC | 	wrlong	result2, fp
1d064     04 4E 05 F1 | 	add	fp, #4
1d068     A7 16 62 FC | 	wrlong	arg03, fp
1d06c     08 4E 85 F1 | 	sub	fp, #8
1d070     A7 12 02 F6 | 	mov	arg01, fp
1d074     D4 06 BF FD | 	call	#_converttoint
1d078     28 4E 05 F1 | 	add	fp, #40
1d07c     A7 FA 61 FC | 	wrlong	result1, fp
1d080     28 4E 85 F1 | 	sub	fp, #40
1d084     0C 00 90 FD | 	jmp	#LR__2297
1d088                 | LR__2296
1d088     28 4E 05 F1 | 	add	fp, #40
1d08c     A7 00 68 FC | 	wrlong	#0, fp
1d090     28 4E 85 F1 | 	sub	fp, #40
1d094                 | LR__2297
1d094     0C 4E 05 F1 | 	add	fp, #12
1d098     A7 28 02 FB | 	rdlong	local02, fp
1d09c     1C 4E 05 F1 | 	add	fp, #28
1d0a0     A7 2A 02 FB | 	rdlong	local03, fp
1d0a4     04 4E 05 F1 | 	add	fp, #4
1d0a8     A7 FC 01 FB | 	rdlong	result2, fp
1d0ac     10 4E 85 F1 | 	sub	fp, #16
1d0b0     A7 FE 01 FB | 	rdlong	result3, fp
1d0b4     FF FC 01 FD | 	qmul	result2, result3
1d0b8     10 28 06 F1 | 	add	local02, #16
1d0bc     14 4E 05 F1 | 	add	fp, #20
1d0c0     A7 FC 01 FB | 	rdlong	result2, fp
1d0c4     18 FA 61 FD | 	getqx	result1
1d0c8     FF FC 01 FD | 	qmul	result2, result3
1d0cc     FD 2A 02 F1 | 	add	local03, result1
1d0d0     10 4E 85 F1 | 	sub	fp, #16
1d0d4     A7 FE 01 FB | 	rdlong	result3, fp
1d0d8     18 FC 61 FD | 	getqx	result2
1d0dc     FF FC 01 FD | 	qmul	result2, result3
1d0e0     08 4E 85 F1 | 	sub	fp, #8
1d0e4     A7 FE 01 FB | 	rdlong	result3, fp
1d0e8     18 FC 61 FD | 	getqx	result2
1d0ec     FE 2A 02 F1 | 	add	local03, result2
1d0f0     FF 2A 02 FD | 	qmul	local03, result3
1d0f4     1C 4E 05 F1 | 	add	fp, #28
1d0f8                 | ' 
1d0f8                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1d0f8                 | ' 
1d0f8                 | ' select case vartype
1d0f8     18 FC 61 FD | 	getqx	result2
1d0fc     FE 28 02 F1 | 	add	local02, result2
1d100     A7 28 62 FC | 	wrlong	local02, fp
1d104     24 4E 85 F1 | 	sub	fp, #36
1d108     A7 2C 02 FB | 	rdlong	local04, fp
1d10c     10 4E 85 F1 | 	sub	fp, #16
1d110     00 2D 86 F1 | 	sub	local04, #256
1d114     0C 2C 26 F3 | 	fle	local04, #12
1d118     30 2C 62 FD | 	jmprel	local04
1d11c                 | LR__2298
1d11c     30 00 90 FD | 	jmp	#LR__2299
1d120     58 00 90 FD | 	jmp	#LR__2300
1d124     8C 00 90 FD | 	jmp	#LR__2301
1d128     AC 00 90 FD | 	jmp	#LR__2302
1d12c     E8 00 90 FD | 	jmp	#LR__2303
1d130     08 01 90 FD | 	jmp	#LR__2304
1d134     24 01 90 FD | 	jmp	#LR__2305
1d138     40 01 90 FD | 	jmp	#LR__2306
1d13c     50 01 90 FD | 	jmp	#LR__2307
1d140     60 01 90 FD | 	jmp	#LR__2308
1d144     7C 01 90 FD | 	jmp	#LR__2309
1d148     8C 01 90 FD | 	jmp	#LR__2310
1d14c     B8 01 90 FD | 	jmp	#LR__2311
1d150                 | LR__2299
1d150     A7 12 02 F6 | 	mov	arg01, fp
1d154     34 4E 05 F1 | 	add	fp, #52
1d158     A7 14 02 FB | 	rdlong	arg02, fp
1d15c     34 4E 85 F1 | 	sub	fp, #52
1d160     0C 16 06 F6 | 	mov	arg03, #12
1d164     0B 00 00 FF 
1d168     CC E4 05 F1 | 	add	objptr, ##5836
1d16c     00 8B B0 FD | 	call	#_psram_spin2_read1
1d170     0B 00 00 FF 
1d174     CC E4 85 F1 | 	sub	objptr, ##5836
1d178     8C 01 90 FD | 	jmp	#LR__2311
1d17c                 | LR__2300
1d17c     08 4E 05 F1 | 	add	fp, #8
1d180     A7 38 68 FC | 	wrlong	#28, fp
1d184     2C 4E 05 F1 | 	add	fp, #44
1d188     A7 12 02 FB | 	rdlong	arg01, fp
1d18c     34 4E 85 F1 | 	sub	fp, #52
1d190     EC 5F B0 FD | 	call	#_pspeek
1d194     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d198     A7 FA 61 FC | 	wrlong	result1, fp
1d19c     80 FA 15 F2 | 	cmp	result1, #128 wc
1d1a0     00 27 66 36 |  if_ae	neg	local01, #256
1d1a4     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d1a8     15 27 42 35 |  if_ae	or	local01, local03
1d1ac     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d1b0     54 01 90 FD | 	jmp	#LR__2311
1d1b4                 | LR__2301
1d1b4     08 4E 05 F1 | 	add	fp, #8
1d1b8     A7 3A 68 FC | 	wrlong	#29, fp
1d1bc     2C 4E 05 F1 | 	add	fp, #44
1d1c0     A7 12 02 FB | 	rdlong	arg01, fp
1d1c4     34 4E 85 F1 | 	sub	fp, #52
1d1c8     B4 5F B0 FD | 	call	#_pspeek
1d1cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d1d0     A7 FA 61 FC | 	wrlong	result1, fp
1d1d4     30 01 90 FD | 	jmp	#LR__2311
1d1d8                 | LR__2302
1d1d8     08 4E 05 F1 | 	add	fp, #8
1d1dc     A7 38 68 FC | 	wrlong	#28, fp
1d1e0     2C 4E 05 F1 | 	add	fp, #44
1d1e4     A7 12 02 FB | 	rdlong	arg01, fp
1d1e8     34 4E 85 F1 | 	sub	fp, #52
1d1ec     E8 5F B0 FD | 	call	#_pslpeek
1d1f0     FD FA 31 F9 | 	getword	result1, result1, #0
1d1f4     A7 FA 61 FC | 	wrlong	result1, fp
1d1f8     40 00 00 FF 
1d1fc     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1d200     FF 7F 00 3F 
1d204     00 27 06 36 |  if_ae	mov	local01, ##16776960
1d208     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d20c     15 27 42 35 |  if_ae	or	local01, local03
1d210     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d214     F0 00 90 FD | 	jmp	#LR__2311
1d218                 | LR__2303
1d218     08 4E 05 F1 | 	add	fp, #8
1d21c     A7 3A 68 FC | 	wrlong	#29, fp
1d220     2C 4E 05 F1 | 	add	fp, #44
1d224     A7 12 02 FB | 	rdlong	arg01, fp
1d228     34 4E 85 F1 | 	sub	fp, #52
1d22c     A8 5F B0 FD | 	call	#_pslpeek
1d230     FD FA 31 F9 | 	getword	result1, result1, #0
1d234     A7 FA 61 FC | 	wrlong	result1, fp
1d238     CC 00 90 FD | 	jmp	#LR__2311
1d23c                 | LR__2304
1d23c     08 4E 05 F1 | 	add	fp, #8
1d240     A7 38 68 FC | 	wrlong	#28, fp
1d244     2C 4E 05 F1 | 	add	fp, #44
1d248     A7 12 02 FB | 	rdlong	arg01, fp
1d24c     34 4E 85 F1 | 	sub	fp, #52
1d250     84 5F B0 FD | 	call	#_pslpeek
1d254     A7 FA 61 FC | 	wrlong	result1, fp
1d258     AC 00 90 FD | 	jmp	#LR__2311
1d25c                 | LR__2305
1d25c     08 4E 05 F1 | 	add	fp, #8
1d260     A7 3A 68 FC | 	wrlong	#29, fp
1d264     2C 4E 05 F1 | 	add	fp, #44
1d268     A7 12 02 FB | 	rdlong	arg01, fp
1d26c     34 4E 85 F1 | 	sub	fp, #52
1d270     64 5F B0 FD | 	call	#_pslpeek
1d274     A7 FA 61 FC | 	wrlong	result1, fp
1d278     8C 00 90 FD | 	jmp	#LR__2311
1d27c                 | LR__2306
1d27c     08 4E 05 F1 | 	add	fp, #8
1d280     A7 FE 69 FC | 	wrlong	#255, fp
1d284     08 4E 85 F1 | 	sub	fp, #8
1d288     A7 60 68 FC | 	wrlong	#48, fp
1d28c     78 00 90 FD | 	jmp	#LR__2311
1d290                 | LR__2307
1d290     08 4E 05 F1 | 	add	fp, #8
1d294     A7 FE 69 FC | 	wrlong	#255, fp
1d298     08 4E 85 F1 | 	sub	fp, #8
1d29c     A7 60 68 FC | 	wrlong	#48, fp
1d2a0     64 00 90 FD | 	jmp	#LR__2311
1d2a4                 | LR__2308
1d2a4     08 4E 05 F1 | 	add	fp, #8
1d2a8     A7 3C 68 FC | 	wrlong	#30, fp
1d2ac     2C 4E 05 F1 | 	add	fp, #44
1d2b0     A7 12 02 FB | 	rdlong	arg01, fp
1d2b4     34 4E 85 F1 | 	sub	fp, #52
1d2b8     1C 5F B0 FD | 	call	#_pslpeek
1d2bc     A7 FA 61 FC | 	wrlong	result1, fp
1d2c0     44 00 90 FD | 	jmp	#LR__2311
1d2c4                 | LR__2309
1d2c4     08 4E 05 F1 | 	add	fp, #8
1d2c8     A7 FE 69 FC | 	wrlong	#255, fp
1d2cc     08 4E 85 F1 | 	sub	fp, #8
1d2d0     A7 60 68 FC | 	wrlong	#48, fp
1d2d4     30 00 90 FD | 	jmp	#LR__2311
1d2d8                 | LR__2310
1d2d8     08 4E 05 F1 | 	add	fp, #8
1d2dc     A7 3E 68 FC | 	wrlong	#31, fp
1d2e0     2C 4E 05 F1 | 	add	fp, #44
1d2e4     A7 12 02 FB | 	rdlong	arg01, fp
1d2e8     34 4E 85 F1 | 	sub	fp, #52
1d2ec     E8 5E B0 FD | 	call	#_pslpeek
1d2f0     A7 FA 61 FC | 	wrlong	result1, fp
1d2f4     00 04 00 FF 
1d2f8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1d2fc     08 4E 05 31 |  if_ae	add	fp, #8
1d300     A7 56 68 3C |  if_ae	wrlong	#43, fp
1d304     08 4E 85 31 |  if_ae	sub	fp, #8
1d308                 | LR__2311
1d308     A7 12 02 F6 | 	mov	arg01, fp
1d30c     F0 02 BF FD | 	call	#_push
1d310                 | LR__2312
1d310     A7 F0 03 F6 | 	mov	ptra, fp
1d314     B2 00 A0 FD | 	call	#popregs_
1d318                 | _do_getvar_ret
1d318     2D 00 64 FD | 	ret
1d31c                 | 
1d31c                 | ' 
1d31c                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1d31c                 | ' 
1d31c                 | ' sub do_getaddr
1d31c                 | _do_getaddr
1d31c     01 4A 05 F6 | 	mov	COUNT_, #1
1d320     A8 00 A0 FD | 	call	#pushregs_
1d324     38 F0 07 F1 | 	add	ptra, #56
1d328                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1d328                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d328     4A 00 00 FF 
1d32c     80 E4 05 F1 | 	add	objptr, ##38016
1d330     F2 12 02 FB | 	rdlong	arg01, objptr
1d334     09 FD 01 F6 | 	mov	result2, arg01
1d338     01 FC 65 F0 | 	shl	result2, #1
1d33c     09 FD 01 F1 | 	add	result2, arg01
1d340     02 FC 65 F0 | 	shl	result2, #2
1d344     03 00 00 FF 
1d348     04 E4 85 F1 | 	sub	objptr, ##1540
1d34c     F2 FC 01 F1 | 	add	result2, objptr
1d350     04 FC 05 F1 | 	add	result2, #4
1d354     FE FC 09 FB | 	rdlong	result2, result2 wz
1d358     47 00 00 FF 
1d35c     7C E4 85 F1 | 	sub	objptr, ##36476
1d360     10 01 90 5D |  if_ne	jmp	#LR__2320
1d364     4A 00 00 FF 
1d368     80 E4 05 F1 | 	add	objptr, ##38016
1d36c     F2 12 02 FB | 	rdlong	arg01, objptr
1d370     09 FD 01 F6 | 	mov	result2, arg01
1d374     01 FC 65 F0 | 	shl	result2, #1
1d378     09 FD 01 F1 | 	add	result2, arg01
1d37c     02 FC 65 F0 | 	shl	result2, #2
1d380     03 00 00 FF 
1d384     04 E4 85 F1 | 	sub	objptr, ##1540
1d388     F2 FC 01 F1 | 	add	result2, objptr
1d38c     FE 12 02 FB | 	rdlong	arg01, result2
1d390     04 12 66 F0 | 	shl	arg01, #4
1d394     32 00 00 FF 
1d398     84 E4 85 F1 | 	sub	objptr, ##25732
1d39c     F2 12 02 F1 | 	add	arg01, objptr
1d3a0     0C 12 06 F1 | 	add	arg01, #12
1d3a4     09 13 02 FB | 	rdlong	arg01, arg01
1d3a8     08 4E 05 F1 | 	add	fp, #8
1d3ac     A7 12 62 FC | 	wrlong	arg01, fp
1d3b0                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d3b0                 | '    if t1.result_type>=array_no_type then goto 2200
1d3b0     08 4E 85 F1 | 	sub	fp, #8
1d3b4     00 13 16 F2 | 	cmp	arg01, #256 wc
1d3b8     14 00 00 FF 
1d3bc     F8 E5 85 F1 | 	sub	objptr, ##10744
1d3c0     B0 00 90 3D |  if_ae	jmp	#LR__2321
1d3c4     4A 00 00 FF 
1d3c8     80 E4 05 F1 | 	add	objptr, ##38016
1d3cc     F2 12 02 FB | 	rdlong	arg01, objptr
1d3d0     09 FF 01 F6 | 	mov	result3, arg01
1d3d4     01 FE 65 F0 | 	shl	result3, #1
1d3d8     09 FF 01 F1 | 	add	result3, arg01
1d3dc     02 FE 65 F0 | 	shl	result3, #2
1d3e0     03 00 00 FF 
1d3e4     04 E4 85 F1 | 	sub	objptr, ##1540
1d3e8     F2 FE 01 F1 | 	add	result3, objptr
1d3ec     FF FA 01 FB | 	rdlong	result1, result3
1d3f0     04 FA 65 F0 | 	shl	result1, #4
1d3f4     32 00 00 FF 
1d3f8     84 E4 85 F1 | 	sub	objptr, ##25732
1d3fc     F2 FA 01 F1 | 	add	result1, objptr
1d400     04 FA 05 F1 | 	add	result1, #4
1d404     A7 FA 61 FC | 	wrlong	result1, fp
1d408     35 00 00 FF 
1d40c     88 E4 05 F1 | 	add	objptr, ##27272
1d410     F2 FE 01 FB | 	rdlong	result3, objptr
1d414     FF 12 02 F6 | 	mov	arg01, result3
1d418     01 12 66 F0 | 	shl	arg01, #1
1d41c     FF 12 02 F1 | 	add	arg01, result3
1d420     02 12 66 F0 | 	shl	arg01, #2
1d424     03 00 00 FF 
1d428     04 E4 85 F1 | 	sub	objptr, ##1540
1d42c     F2 12 02 F1 | 	add	arg01, objptr
1d430     09 13 02 FB | 	rdlong	arg01, arg01
1d434     04 12 66 F0 | 	shl	arg01, #4
1d438     32 00 00 FF 
1d43c     84 E4 85 F1 | 	sub	objptr, ##25732
1d440     F2 12 02 F1 | 	add	arg01, objptr
1d444     0C 12 06 F1 | 	add	arg01, #12
1d448     09 13 02 FB | 	rdlong	arg01, arg01
1d44c     04 4E 05 F1 | 	add	fp, #4
1d450     A7 12 62 FC | 	wrlong	arg01, fp
1d454     04 4E 05 F1 | 	add	fp, #4
1d458     A7 3A 68 FC | 	wrlong	#29, fp
1d45c     08 4E 85 F1 | 	sub	fp, #8
1d460     A7 12 02 F6 | 	mov	arg01, fp
1d464     14 00 00 FF 
1d468     F8 E5 85 F1 | 	sub	objptr, ##10744
1d46c     90 01 BF FD | 	call	#_push
1d470                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1d470                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1d470                 | '   t1.result_type=result_uint
1d470                 | '   push t1 : return
1d470     2C 03 90 FD | 	jmp	#LR__2330
1d474                 | LR__2320
1d474                 | LR__2321
1d474     4A 00 00 FF 
1d478     80 E4 05 F1 | 	add	objptr, ##38016
1d47c     F2 FE 01 FB | 	rdlong	result3, objptr
1d480     FF FC 01 F6 | 	mov	result2, result3
1d484     01 FC 65 F0 | 	shl	result2, #1
1d488     FF FC 01 F1 | 	add	result2, result3
1d48c     02 FC 65 F0 | 	shl	result2, #2
1d490     03 00 00 FF 
1d494     04 E4 85 F1 | 	sub	objptr, ##1540
1d498     F2 FC 01 F1 | 	add	result2, objptr
1d49c     FE FE 01 FB | 	rdlong	result3, result2
1d4a0     04 FE 65 F0 | 	shl	result3, #4
1d4a4     32 00 00 FF 
1d4a8     84 E4 85 F1 | 	sub	objptr, ##25732
1d4ac     F2 FE 01 F1 | 	add	result3, objptr
1d4b0     04 FE 05 F1 | 	add	result3, #4
1d4b4     FF FE 01 FB | 	rdlong	result3, result3
1d4b8     0C 4E 05 F1 | 	add	fp, #12
1d4bc     A7 FE 61 FC | 	wrlong	result3, fp
1d4c0     35 00 00 FF 
1d4c4     88 E4 05 F1 | 	add	objptr, ##27272
1d4c8     F2 FE 01 FB | 	rdlong	result3, objptr
1d4cc     FF 12 02 F6 | 	mov	arg01, result3
1d4d0     01 12 66 F0 | 	shl	arg01, #1
1d4d4     FF 12 02 F1 | 	add	arg01, result3
1d4d8     02 12 66 F0 | 	shl	arg01, #2
1d4dc     03 00 00 FF 
1d4e0     04 E4 85 F1 | 	sub	objptr, ##1540
1d4e4     F2 12 02 F1 | 	add	arg01, objptr
1d4e8     09 13 02 FB | 	rdlong	arg01, arg01
1d4ec     04 12 66 F0 | 	shl	arg01, #4
1d4f0     32 00 00 FF 
1d4f4     84 E4 85 F1 | 	sub	objptr, ##25732
1d4f8     F2 12 02 F1 | 	add	arg01, objptr
1d4fc     0C 12 06 F1 | 	add	arg01, #12
1d500     09 13 02 FB | 	rdlong	arg01, arg01
1d504     08 4E 85 F1 | 	sub	fp, #8
1d508     A7 12 62 FC | 	wrlong	arg01, fp
1d50c     08 4E 05 F1 | 	add	fp, #8
1d510     A7 12 02 FB | 	rdlong	arg01, fp
1d514     0C 4E 85 F1 | 	sub	fp, #12
1d518     14 00 00 FF 
1d51c     F8 E5 85 F1 | 	sub	objptr, ##10744
1d520     B4 5C B0 FD | 	call	#_pslpeek
1d524     FD FA 31 F9 | 	getword	result1, result1, #0
1d528     10 4E 05 F1 | 	add	fp, #16
1d52c     A7 FA 61 FC | 	wrlong	result1, fp
1d530     4A 00 00 FF 
1d534     80 E4 05 F1 | 	add	objptr, ##38016
1d538     F2 FE 01 FB | 	rdlong	result3, objptr
1d53c     FF 12 02 F6 | 	mov	arg01, result3
1d540     01 12 66 F0 | 	shl	arg01, #1
1d544     FF 12 02 F1 | 	add	arg01, result3
1d548     02 12 66 F0 | 	shl	arg01, #2
1d54c     03 00 00 FF 
1d550     04 E4 85 F1 | 	sub	objptr, ##1540
1d554     F2 12 02 F1 | 	add	arg01, objptr
1d558     04 12 06 F1 | 	add	arg01, #4
1d55c     09 13 02 FB | 	rdlong	arg01, arg01
1d560     04 4E 05 F1 | 	add	fp, #4
1d564     A7 12 62 FC | 	wrlong	arg01, fp
1d568     08 4E 85 F1 | 	sub	fp, #8
1d56c     A7 12 02 FB | 	rdlong	arg01, fp
1d570     0C 4E 85 F1 | 	sub	fp, #12
1d574     02 12 06 F1 | 	add	arg01, #2
1d578     47 00 00 FF 
1d57c     7C E4 85 F1 | 	sub	objptr, ##36476
1d580     FC 5B B0 FD | 	call	#_pspeek
1d584     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d588     18 4E 05 F1 | 	add	fp, #24
1d58c     A7 FA 61 FC | 	wrlong	result1, fp
1d590     0C 4E 85 F1 | 	sub	fp, #12
1d594     A7 12 02 FB | 	rdlong	arg01, fp
1d598     0C 4E 85 F1 | 	sub	fp, #12
1d59c     04 12 06 F1 | 	add	arg01, #4
1d5a0     34 5C B0 FD | 	call	#_pslpeek
1d5a4     1C 4E 05 F1 | 	add	fp, #28
1d5a8     A7 FA 61 FC | 	wrlong	result1, fp
1d5ac     10 4E 85 F1 | 	sub	fp, #16
1d5b0     A7 12 02 FB | 	rdlong	arg01, fp
1d5b4     0C 4E 85 F1 | 	sub	fp, #12
1d5b8     08 12 06 F1 | 	add	arg01, #8
1d5bc     18 5C B0 FD | 	call	#_pslpeek
1d5c0     20 4E 05 F1 | 	add	fp, #32
1d5c4     A7 FA 61 FC | 	wrlong	result1, fp
1d5c8     14 4E 85 F1 | 	sub	fp, #20
1d5cc     A7 12 02 FB | 	rdlong	arg01, fp
1d5d0     0C 4E 85 F1 | 	sub	fp, #12
1d5d4     0C 12 06 F1 | 	add	arg01, #12
1d5d8     FC 5B B0 FD | 	call	#_pslpeek
1d5dc     24 4E 05 F1 | 	add	fp, #36
1d5e0     A7 FA 61 FC | 	wrlong	result1, fp
1d5e4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1d5e4                 | ' esize=pspeek(arrptr+2)
1d5e4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1d5e4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1d5e4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1d5e4                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1d5e4     10 4E 85 F1 | 	sub	fp, #16
1d5e8     A7 12 02 FB | 	rdlong	arg01, fp
1d5ec     14 4E 85 F1 | 	sub	fp, #20
1d5f0     03 12 16 F2 | 	cmp	arg01, #3 wc
1d5f4     34 00 90 CD |  if_b	jmp	#LR__2322
1d5f8     6C FF BE FD | 	call	#_pop
1d5fc     A7 FA 61 FC | 	wrlong	result1, fp
1d600     04 4E 05 F1 | 	add	fp, #4
1d604     A7 FC 61 FC | 	wrlong	result2, fp
1d608     04 4E 05 F1 | 	add	fp, #4
1d60c     A7 FE 61 FC | 	wrlong	result3, fp
1d610     08 4E 85 F1 | 	sub	fp, #8
1d614     A7 12 02 F6 | 	mov	arg01, fp
1d618     30 01 BF FD | 	call	#_converttoint
1d61c     30 4E 05 F1 | 	add	fp, #48
1d620     A7 FA 61 FC | 	wrlong	result1, fp
1d624     30 4E 85 F1 | 	sub	fp, #48
1d628     0C 00 90 FD | 	jmp	#LR__2323
1d62c                 | LR__2322
1d62c     30 4E 05 F1 | 	add	fp, #48
1d630     A7 00 68 FC | 	wrlong	#0, fp
1d634     30 4E 85 F1 | 	sub	fp, #48
1d638                 | LR__2323
1d638                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d638     14 4E 05 F1 | 	add	fp, #20
1d63c     A7 12 02 FB | 	rdlong	arg01, fp
1d640     14 4E 85 F1 | 	sub	fp, #20
1d644     02 12 16 F2 | 	cmp	arg01, #2 wc
1d648     34 00 90 CD |  if_b	jmp	#LR__2324
1d64c     18 FF BE FD | 	call	#_pop
1d650     A7 FA 61 FC | 	wrlong	result1, fp
1d654     04 4E 05 F1 | 	add	fp, #4
1d658     A7 FC 61 FC | 	wrlong	result2, fp
1d65c     04 4E 05 F1 | 	add	fp, #4
1d660     A7 FE 61 FC | 	wrlong	result3, fp
1d664     08 4E 85 F1 | 	sub	fp, #8
1d668     A7 12 02 F6 | 	mov	arg01, fp
1d66c     DC 00 BF FD | 	call	#_converttoint
1d670     2C 4E 05 F1 | 	add	fp, #44
1d674     A7 FA 61 FC | 	wrlong	result1, fp
1d678     2C 4E 85 F1 | 	sub	fp, #44
1d67c     0C 00 90 FD | 	jmp	#LR__2325
1d680                 | LR__2324
1d680     2C 4E 05 F1 | 	add	fp, #44
1d684     A7 00 68 FC | 	wrlong	#0, fp
1d688     2C 4E 85 F1 | 	sub	fp, #44
1d68c                 | LR__2325
1d68c                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d68c     14 4E 05 F1 | 	add	fp, #20
1d690     A7 12 02 FB | 	rdlong	arg01, fp
1d694     14 4E 85 F1 | 	sub	fp, #20
1d698     01 12 16 F2 | 	cmp	arg01, #1 wc
1d69c     34 00 90 CD |  if_b	jmp	#LR__2326
1d6a0     C4 FE BE FD | 	call	#_pop
1d6a4     A7 FA 61 FC | 	wrlong	result1, fp
1d6a8     04 4E 05 F1 | 	add	fp, #4
1d6ac     A7 FC 61 FC | 	wrlong	result2, fp
1d6b0     04 4E 05 F1 | 	add	fp, #4
1d6b4     A7 FE 61 FC | 	wrlong	result3, fp
1d6b8     08 4E 85 F1 | 	sub	fp, #8
1d6bc     A7 12 02 F6 | 	mov	arg01, fp
1d6c0     88 00 BF FD | 	call	#_converttoint
1d6c4     28 4E 05 F1 | 	add	fp, #40
1d6c8     A7 FA 61 FC | 	wrlong	result1, fp
1d6cc     28 4E 85 F1 | 	sub	fp, #40
1d6d0     0C 00 90 FD | 	jmp	#LR__2327
1d6d4                 | LR__2326
1d6d4     28 4E 05 F1 | 	add	fp, #40
1d6d8     A7 00 68 FC | 	wrlong	#0, fp
1d6dc     28 4E 85 F1 | 	sub	fp, #40
1d6e0                 | LR__2327
1d6e0                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1d6e0                 | ' if numpar>0 then
1d6e0     14 4E 05 F1 | 	add	fp, #20
1d6e4     A7 FE 01 FB | 	rdlong	result3, fp
1d6e8     14 4E 85 F1 | 	sub	fp, #20
1d6ec     01 FE 15 F2 | 	cmp	result3, #1 wc
1d6f0     8C 00 90 CD |  if_b	jmp	#LR__2328
1d6f4     0C 4E 05 F1 | 	add	fp, #12
1d6f8     A7 FC 01 FB | 	rdlong	result2, fp
1d6fc     1C 4E 05 F1 | 	add	fp, #28
1d700     A7 FE 01 FB | 	rdlong	result3, fp
1d704     04 4E 05 F1 | 	add	fp, #4
1d708     A7 12 02 FB | 	rdlong	arg01, fp
1d70c     10 4E 85 F1 | 	sub	fp, #16
1d710     A7 FA 01 FB | 	rdlong	result1, fp
1d714     FD 12 02 FD | 	qmul	arg01, result1
1d718     10 FC 05 F1 | 	add	result2, #16
1d71c     14 4E 05 F1 | 	add	fp, #20
1d720     A7 26 02 FB | 	rdlong	local01, fp
1d724     18 12 62 FD | 	getqx	arg01
1d728     FD 26 02 FD | 	qmul	local01, result1
1d72c     09 FF 01 F1 | 	add	result3, arg01
1d730     10 4E 85 F1 | 	sub	fp, #16
1d734     A7 26 02 FB | 	rdlong	local01, fp
1d738     18 FA 61 FD | 	getqx	result1
1d73c     13 FB 01 FD | 	qmul	result1, local01
1d740     08 4E 85 F1 | 	sub	fp, #8
1d744     A7 26 02 FB | 	rdlong	local01, fp
1d748     18 FA 61 FD | 	getqx	result1
1d74c     FD FE 01 F1 | 	add	result3, result1
1d750     13 FF 01 FD | 	qmul	result3, local01
1d754     1C 4E 05 F1 | 	add	fp, #28
1d758     18 26 62 FD | 	getqx	local01
1d75c     13 FD 01 F1 | 	add	result2, local01
1d760     A7 FC 61 FC | 	wrlong	result2, fp
1d764     2C 4E 85 F1 | 	sub	fp, #44
1d768     A7 3A 68 FC | 	wrlong	#29, fp
1d76c     2C 4E 05 F1 | 	add	fp, #44
1d770     A7 26 02 FB | 	rdlong	local01, fp
1d774     34 4E 85 F1 | 	sub	fp, #52
1d778     A7 26 62 FC | 	wrlong	local01, fp
1d77c     18 00 90 FD | 	jmp	#LR__2329
1d780                 | LR__2328
1d780     08 4E 05 F1 | 	add	fp, #8
1d784     A7 3A 68 FC | 	wrlong	#29, fp
1d788     04 4E 05 F1 | 	add	fp, #4
1d78c     A7 26 02 FB | 	rdlong	local01, fp
1d790     0C 4E 85 F1 | 	sub	fp, #12
1d794     A7 26 62 FC | 	wrlong	local01, fp
1d798                 | LR__2329
1d798     A7 12 02 F6 | 	mov	arg01, fp
1d79c     60 FE BE FD | 	call	#_push
1d7a0                 | LR__2330
1d7a0     A7 F0 03 F6 | 	mov	ptra, fp
1d7a4     B2 00 A0 FD | 	call	#popregs_
1d7a8                 | _do_getaddr_ret
1d7a8     2D 00 64 FD | 	ret
1d7ac                 | 
1d7ac                 | ' 
1d7ac                 | ' 
1d7ac                 | ' 
1d7ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d7ac                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1d7ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d7ac                 | ' 
1d7ac                 | ' '--------------------------------- AND 
1d7ac                 | ' 
1d7ac                 | ' sub do_and 
1d7ac                 | _do_and
1d7ac     03 4A 05 F6 | 	mov	COUNT_, #3
1d7b0     A8 00 A0 FD | 	call	#pushregs_
1d7b4     18 F0 07 F1 | 	add	ptra, #24
1d7b8     AC FD BE FD | 	call	#_pop
1d7bc     FD 12 02 F6 | 	mov	arg01, result1
1d7c0     FE 26 02 F6 | 	mov	local01, result2
1d7c4     FF 28 02 F6 | 	mov	local02, result3
1d7c8     0C 4E 05 F1 | 	add	fp, #12
1d7cc     A7 12 62 FC | 	wrlong	arg01, fp
1d7d0     04 4E 05 F1 | 	add	fp, #4
1d7d4     A7 26 62 FC | 	wrlong	local01, fp
1d7d8     04 4E 05 F1 | 	add	fp, #4
1d7dc     A7 28 62 FC | 	wrlong	local02, fp
1d7e0     14 4E 85 F1 | 	sub	fp, #20
1d7e4     80 FD BE FD | 	call	#_pop
1d7e8     FF 2A 02 F6 | 	mov	local03, result3
1d7ec     A7 FA 61 FC | 	wrlong	result1, fp
1d7f0     04 4E 05 F1 | 	add	fp, #4
1d7f4     A7 FC 61 FC | 	wrlong	result2, fp
1d7f8     04 4E 05 F1 | 	add	fp, #4
1d7fc     A7 2A 62 FC | 	wrlong	local03, fp
1d800                 | ' 
1d800                 | ' t2=pop()
1d800                 | ' t1=pop()
1d800                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1d800     08 4E 85 F1 | 	sub	fp, #8
1d804     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d808     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d80c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1d810     08 4E 05 A1 |  if_e	add	fp, #8
1d814     A7 3A 68 AC |  if_e	wrlong	#29, fp
1d818     08 4E 85 A1 |  if_e	sub	fp, #8
1d81c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1d81c     14 4E 05 F1 | 	add	fp, #20
1d820     A7 2A 02 FB | 	rdlong	local03, fp
1d824     14 4E 85 F1 | 	sub	fp, #20
1d828     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d82c     18 00 90 5D |  if_ne	jmp	#LR__2340
1d830     0C 4E 05 F1 | 	add	fp, #12
1d834     A7 2A 02 FB | 	rdlong	local03, fp
1d838     A7 2A 62 FC | 	wrlong	local03, fp
1d83c     08 4E 05 F1 | 	add	fp, #8
1d840     A7 3A 68 FC | 	wrlong	#29, fp
1d844     14 4E 85 F1 | 	sub	fp, #20
1d848                 | LR__2340
1d848                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1d848     08 4E 05 F1 | 	add	fp, #8
1d84c     A7 2A 02 FB | 	rdlong	local03, fp
1d850     08 4E 85 F1 | 	sub	fp, #8
1d854     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d858     14 4E 05 51 |  if_ne	add	fp, #20
1d85c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1d860     14 4E 85 51 |  if_ne	sub	fp, #20
1d864     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1d868     08 4E 05 51 |  if_ne	add	fp, #8
1d86c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1d870     08 4E 85 51 |  if_ne	sub	fp, #8
1d874     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1d878     14 4E 05 51 |  if_ne	add	fp, #20
1d87c     14 4E 85 51 |  if_ne	sub	fp, #20
1d880     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1d884     A7 0C 68 AC |  if_e	wrlong	#6, fp
1d888     08 4E 05 A1 |  if_e	add	fp, #8
1d88c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d890     08 4E 85 A1 |  if_e	sub	fp, #8
1d894     18 00 90 AD |  if_e	jmp	#LR__2341
1d898     A7 2A 02 FB | 	rdlong	local03, fp
1d89c     0C 4E 05 F1 | 	add	fp, #12
1d8a0     A7 26 02 FB | 	rdlong	local01, fp
1d8a4     0C 4E 85 F1 | 	sub	fp, #12
1d8a8     13 2B 02 F5 | 	and	local03, local01
1d8ac     A7 2A 62 FC | 	wrlong	local03, fp
1d8b0                 | LR__2341
1d8b0     A7 12 02 F6 | 	mov	arg01, fp
1d8b4     48 FD BE FD | 	call	#_push
1d8b8     A7 F0 03 F6 | 	mov	ptra, fp
1d8bc     B2 00 A0 FD | 	call	#popregs_
1d8c0                 | _do_and_ret
1d8c0     2D 00 64 FD | 	ret
1d8c4                 | 
1d8c4                 | ' 
1d8c4                 | ' '--------------------------------- DIV (integer divide)
1d8c4                 | ' 
1d8c4                 | ' sub do_div 
1d8c4                 | _do_div
1d8c4     01 4A 05 F6 | 	mov	COUNT_, #1
1d8c8     A8 00 A0 FD | 	call	#pushregs_
1d8cc     18 F0 07 F1 | 	add	ptra, #24
1d8d0     94 FC BE FD | 	call	#_pop
1d8d4     FD 92 02 F6 | 	mov	muldivb_, result1
1d8d8     FE 90 02 F6 | 	mov	muldiva_, result2
1d8dc     FF 26 02 F6 | 	mov	local01, result3
1d8e0     0C 4E 05 F1 | 	add	fp, #12
1d8e4     A7 92 62 FC | 	wrlong	muldivb_, fp
1d8e8     04 4E 05 F1 | 	add	fp, #4
1d8ec     A7 90 62 FC | 	wrlong	muldiva_, fp
1d8f0     04 4E 05 F1 | 	add	fp, #4
1d8f4     A7 26 62 FC | 	wrlong	local01, fp
1d8f8     14 4E 85 F1 | 	sub	fp, #20
1d8fc     68 FC BE FD | 	call	#_pop
1d900     A7 FA 61 FC | 	wrlong	result1, fp
1d904     04 4E 05 F1 | 	add	fp, #4
1d908     A7 FC 61 FC | 	wrlong	result2, fp
1d90c     04 4E 05 F1 | 	add	fp, #4
1d910     A7 FE 61 FC | 	wrlong	result3, fp
1d914                 | ' 
1d914                 | ' t2=pop()
1d914                 | ' t1=pop()
1d914                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1d914     08 4E 85 F1 | 	sub	fp, #8
1d918     1F FE 0D F2 | 	cmp	result3, #31 wz
1d91c     14 4E 05 51 |  if_ne	add	fp, #20
1d920     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1d924     14 4E 85 51 |  if_ne	sub	fp, #20
1d928     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1d92c     A7 14 68 AC |  if_e	wrlong	#10, fp
1d930     08 4E 05 A1 |  if_e	add	fp, #8
1d934     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d938     08 4E 85 A1 |  if_e	sub	fp, #8
1d93c     90 01 90 AD |  if_e	jmp	#LR__2356
1d940                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1d940     08 4E 05 F1 | 	add	fp, #8
1d944     A7 92 02 FB | 	rdlong	muldivb_, fp
1d948     08 4E 85 F1 | 	sub	fp, #8
1d94c     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1d950     1C 00 90 5D |  if_ne	jmp	#LR__2350
1d954     08 4E 05 F1 | 	add	fp, #8
1d958     A7 38 68 FC | 	wrlong	#28, fp
1d95c     08 4E 85 F1 | 	sub	fp, #8
1d960     A7 12 02 FB | 	rdlong	arg01, fp
1d964     00 14 06 F6 | 	mov	arg02, #0
1d968     D0 C2 B0 FD | 	call	#__system___float_tointeger
1d96c     A7 FA 61 FC | 	wrlong	result1, fp
1d970                 | LR__2350
1d970                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1d970     14 4E 05 F1 | 	add	fp, #20
1d974     A7 92 02 FB | 	rdlong	muldivb_, fp
1d978     14 4E 85 F1 | 	sub	fp, #20
1d97c     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1d980     28 00 90 5D |  if_ne	jmp	#LR__2351
1d984     14 4E 05 F1 | 	add	fp, #20
1d988     A7 38 68 FC | 	wrlong	#28, fp
1d98c     08 4E 85 F1 | 	sub	fp, #8
1d990     A7 12 02 FB | 	rdlong	arg01, fp
1d994     0C 4E 85 F1 | 	sub	fp, #12
1d998     00 14 06 F6 | 	mov	arg02, #0
1d99c     9C C2 B0 FD | 	call	#__system___float_tointeger
1d9a0     0C 4E 05 F1 | 	add	fp, #12
1d9a4     A7 FA 61 FC | 	wrlong	result1, fp
1d9a8     0C 4E 85 F1 | 	sub	fp, #12
1d9ac                 | LR__2351
1d9ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1d9ac     08 4E 05 F1 | 	add	fp, #8
1d9b0     A7 92 02 FB | 	rdlong	muldivb_, fp
1d9b4     08 4E 85 F1 | 	sub	fp, #8
1d9b8     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1d9bc     14 4E 05 A1 |  if_e	add	fp, #20
1d9c0     A7 26 02 AB |  if_e	rdlong	local01, fp
1d9c4     14 4E 85 A1 |  if_e	sub	fp, #20
1d9c8     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d9cc     20 00 90 5D |  if_ne	jmp	#LR__2352
1d9d0     0C 4E 05 F1 | 	add	fp, #12
1d9d4     A7 26 02 FB | 	rdlong	local01, fp
1d9d8     0C 4E 85 F1 | 	sub	fp, #12
1d9dc     A7 92 02 FB | 	rdlong	muldivb_, fp
1d9e0     13 93 12 FD | 	qdiv	muldivb_, local01
1d9e4     18 26 62 FD | 	getqx	local01
1d9e8     A7 26 62 FC | 	wrlong	local01, fp
1d9ec     E0 00 90 FD | 	jmp	#LR__2356
1d9f0                 | LR__2352
1d9f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1d9f0     08 4E 05 F1 | 	add	fp, #8
1d9f4     A7 92 02 FB | 	rdlong	muldivb_, fp
1d9f8     08 4E 85 F1 | 	sub	fp, #8
1d9fc     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1da00     14 4E 05 A1 |  if_e	add	fp, #20
1da04     A7 26 02 AB |  if_e	rdlong	local01, fp
1da08     14 4E 85 A1 |  if_e	sub	fp, #20
1da0c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1da10     2C 00 90 5D |  if_ne	jmp	#LR__2353
1da14     0C 4E 05 F1 | 	add	fp, #12
1da18     A7 26 02 FB | 	rdlong	local01, fp
1da1c     0C 4E 85 F1 | 	sub	fp, #12
1da20     A7 92 02 FB | 	rdlong	muldivb_, fp
1da24     13 93 12 FD | 	qdiv	muldivb_, local01
1da28     18 26 62 FD | 	getqx	local01
1da2c     A7 26 62 FC | 	wrlong	local01, fp
1da30     08 4E 05 F1 | 	add	fp, #8
1da34     A7 38 68 FC | 	wrlong	#28, fp
1da38     08 4E 85 F1 | 	sub	fp, #8
1da3c     90 00 90 FD | 	jmp	#LR__2356
1da40                 | LR__2353
1da40                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1da40     08 4E 05 F1 | 	add	fp, #8
1da44     A7 92 02 FB | 	rdlong	muldivb_, fp
1da48     08 4E 85 F1 | 	sub	fp, #8
1da4c     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1da50     14 4E 05 A1 |  if_e	add	fp, #20
1da54     A7 26 02 AB |  if_e	rdlong	local01, fp
1da58     14 4E 85 A1 |  if_e	sub	fp, #20
1da5c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1da60     1C 00 90 5D |  if_ne	jmp	#LR__2354
1da64     A7 90 02 FB | 	rdlong	muldiva_, fp
1da68     0C 4E 05 F1 | 	add	fp, #12
1da6c     A7 92 02 FB | 	rdlong	muldivb_, fp
1da70     0C 4E 85 F1 | 	sub	fp, #12
1da74     BA 00 A0 FD | 	call	#divide_
1da78     A7 92 62 FC | 	wrlong	muldivb_, fp
1da7c     50 00 90 FD | 	jmp	#LR__2356
1da80                 | LR__2354
1da80                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1da80     08 4E 05 F1 | 	add	fp, #8
1da84     A7 92 02 FB | 	rdlong	muldivb_, fp
1da88     08 4E 85 F1 | 	sub	fp, #8
1da8c     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1da90     14 4E 05 A1 |  if_e	add	fp, #20
1da94     A7 26 02 AB |  if_e	rdlong	local01, fp
1da98     14 4E 85 A1 |  if_e	sub	fp, #20
1da9c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1daa0     1C 00 90 5D |  if_ne	jmp	#LR__2355
1daa4     A7 90 02 FB | 	rdlong	muldiva_, fp
1daa8     0C 4E 05 F1 | 	add	fp, #12
1daac     A7 92 02 FB | 	rdlong	muldivb_, fp
1dab0     0C 4E 85 F1 | 	sub	fp, #12
1dab4     BA 00 A0 FD | 	call	#divide_
1dab8     A7 92 62 FC | 	wrlong	muldivb_, fp
1dabc     10 00 90 FD | 	jmp	#LR__2356
1dac0                 | LR__2355
1dac0     A7 16 68 FC | 	wrlong	#11, fp
1dac4     08 4E 05 F1 | 	add	fp, #8
1dac8     A7 FE 69 FC | 	wrlong	#255, fp
1dacc     08 4E 85 F1 | 	sub	fp, #8
1dad0                 | LR__2356
1dad0     A7 12 02 F6 | 	mov	arg01, fp
1dad4     28 FB BE FD | 	call	#_push
1dad8     A7 F0 03 F6 | 	mov	ptra, fp
1dadc     B2 00 A0 FD | 	call	#popregs_
1dae0                 | _do_div_ret
1dae0     2D 00 64 FD | 	ret
1dae4                 | 
1dae4                 | ' 
1dae4                 | ' '--------------------------------- equal (=)
1dae4                 | ' 
1dae4                 | ' sub do_eq
1dae4                 | _do_eq
1dae4     05 4A 05 F6 | 	mov	COUNT_, #5
1dae8     A8 00 A0 FD | 	call	#pushregs_
1daec     18 F0 07 F1 | 	add	ptra, #24
1daf0     74 FA BE FD | 	call	#_pop
1daf4     FD 26 02 F6 | 	mov	local01, result1
1daf8     FE 28 02 F6 | 	mov	local02, result2
1dafc     FF 2A 02 F6 | 	mov	local03, result3
1db00     0C 4E 05 F1 | 	add	fp, #12
1db04     A7 26 62 FC | 	wrlong	local01, fp
1db08     04 4E 05 F1 | 	add	fp, #4
1db0c     A7 28 62 FC | 	wrlong	local02, fp
1db10     04 4E 05 F1 | 	add	fp, #4
1db14     A7 2A 62 FC | 	wrlong	local03, fp
1db18     14 4E 85 F1 | 	sub	fp, #20
1db1c     48 FA BE FD | 	call	#_pop
1db20     FF 2A 02 F6 | 	mov	local03, result3
1db24     A7 FA 61 FC | 	wrlong	result1, fp
1db28     04 4E 05 F1 | 	add	fp, #4
1db2c     A7 FC 61 FC | 	wrlong	result2, fp
1db30     04 4E 05 F1 | 	add	fp, #4
1db34     A7 2A 62 FC | 	wrlong	local03, fp
1db38                 | ' 
1db38                 | ' t2=pop()
1db38                 | ' t1=pop()
1db38                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1db38     08 4E 85 F1 | 	sub	fp, #8
1db3c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1db40     14 4E 05 A1 |  if_e	add	fp, #20
1db44     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db48     14 4E 85 A1 |  if_e	sub	fp, #20
1db4c     16 2B 02 A6 |  if_e	mov	local03, local04
1db50     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1db54     28 00 90 5D |  if_ne	jmp	#LR__2360
1db58     00 26 06 F6 | 	mov	local01, #0
1db5c     A7 12 02 FB | 	rdlong	arg01, fp
1db60     0C 4E 05 F1 | 	add	fp, #12
1db64     A7 14 02 FB | 	rdlong	arg02, fp
1db68     0C 4E 85 F1 | 	sub	fp, #12
1db6c     B0 8D B0 FD | 	call	#__system___string_cmp
1db70     00 FA 0D F2 | 	cmp	result1, #0 wz
1db74     00 26 26 A6 |  if_e	not	local01, #0
1db78     A7 26 62 FC | 	wrlong	local01, fp
1db7c     20 04 90 FD | 	jmp	#LR__2373
1db80                 | LR__2360
1db80                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1db80     08 4E 05 F1 | 	add	fp, #8
1db84     A7 26 02 FB | 	rdlong	local01, fp
1db88     08 4E 85 F1 | 	sub	fp, #8
1db8c     1E 26 0E F2 | 	cmp	local01, #30 wz
1db90     14 4E 05 A1 |  if_e	add	fp, #20
1db94     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db98     14 4E 85 A1 |  if_e	sub	fp, #20
1db9c     16 2B 02 A6 |  if_e	mov	local03, local04
1dba0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dba4     2C 00 90 5D |  if_ne	jmp	#LR__2361
1dba8     00 26 06 F6 | 	mov	local01, #0
1dbac     A7 12 02 FB | 	rdlong	arg01, fp
1dbb0     0C 4E 05 F1 | 	add	fp, #12
1dbb4     A7 14 02 FB | 	rdlong	arg02, fp
1dbb8     0C 4E 85 F1 | 	sub	fp, #12
1dbbc     01 16 06 F6 | 	mov	arg03, #1
1dbc0     E4 BF B0 FD | 	call	#__system___float_cmp
1dbc4     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbc8     00 26 26 A6 |  if_e	not	local01, #0
1dbcc     A7 26 62 FC | 	wrlong	local01, fp
1dbd0     CC 03 90 FD | 	jmp	#LR__2373
1dbd4                 | LR__2361
1dbd4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1dbd4     08 4E 05 F1 | 	add	fp, #8
1dbd8     A7 26 02 FB | 	rdlong	local01, fp
1dbdc     08 4E 85 F1 | 	sub	fp, #8
1dbe0     1E 26 0E F2 | 	cmp	local01, #30 wz
1dbe4     14 4E 05 A1 |  if_e	add	fp, #20
1dbe8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dbec     14 4E 85 A1 |  if_e	sub	fp, #20
1dbf0     16 2B 02 A6 |  if_e	mov	local03, local04
1dbf4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dbf8     48 00 90 5D |  if_ne	jmp	#LR__2362
1dbfc     00 26 06 F6 | 	mov	local01, #0
1dc00     A7 28 02 FB | 	rdlong	local02, fp
1dc04     0C 4E 05 F1 | 	add	fp, #12
1dc08     A7 12 02 FB | 	rdlong	arg01, fp
1dc0c     0C 4E 85 F1 | 	sub	fp, #12
1dc10     09 13 52 F6 | 	abs	arg01, arg01 wc
1dc14     1F 2E C6 C9 |  if_b	decod	local05, #31
1dc18     00 2E 06 36 |  if_ae	mov	local05, #0
1dc1c     50 B7 B0 FD | 	call	#__system___float_fromuns
1dc20     17 FB 61 F5 | 	xor	result1, local05
1dc24     FD 14 02 F6 | 	mov	arg02, result1
1dc28     14 13 02 F6 | 	mov	arg01, local02
1dc2c     01 16 06 F6 | 	mov	arg03, #1
1dc30     74 BF B0 FD | 	call	#__system___float_cmp
1dc34     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc38     00 26 26 A6 |  if_e	not	local01, #0
1dc3c     A7 26 62 FC | 	wrlong	local01, fp
1dc40     5C 03 90 FD | 	jmp	#LR__2373
1dc44                 | LR__2362
1dc44                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1dc44     08 4E 05 F1 | 	add	fp, #8
1dc48     A7 26 02 FB | 	rdlong	local01, fp
1dc4c     08 4E 85 F1 | 	sub	fp, #8
1dc50     1E 26 0E F2 | 	cmp	local01, #30 wz
1dc54     14 4E 05 A1 |  if_e	add	fp, #20
1dc58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dc5c     14 4E 85 A1 |  if_e	sub	fp, #20
1dc60     16 2B 02 A6 |  if_e	mov	local03, local04
1dc64     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dc68     38 00 90 5D |  if_ne	jmp	#LR__2363
1dc6c     00 26 06 F6 | 	mov	local01, #0
1dc70     A7 28 02 FB | 	rdlong	local02, fp
1dc74     0C 4E 05 F1 | 	add	fp, #12
1dc78     A7 12 02 FB | 	rdlong	arg01, fp
1dc7c     0C 4E 85 F1 | 	sub	fp, #12
1dc80     EC B6 B0 FD | 	call	#__system___float_fromuns
1dc84     FD 14 02 F6 | 	mov	arg02, result1
1dc88     14 13 02 F6 | 	mov	arg01, local02
1dc8c     01 16 06 F6 | 	mov	arg03, #1
1dc90     14 BF B0 FD | 	call	#__system___float_cmp
1dc94     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc98     00 26 26 A6 |  if_e	not	local01, #0
1dc9c     A7 26 62 FC | 	wrlong	local01, fp
1dca0     FC 02 90 FD | 	jmp	#LR__2373
1dca4                 | LR__2363
1dca4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1dca4     08 4E 05 F1 | 	add	fp, #8
1dca8     A7 26 02 FB | 	rdlong	local01, fp
1dcac     08 4E 85 F1 | 	sub	fp, #8
1dcb0     1C 26 0E F2 | 	cmp	local01, #28 wz
1dcb4     14 4E 05 A1 |  if_e	add	fp, #20
1dcb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dcbc     14 4E 85 A1 |  if_e	sub	fp, #20
1dcc0     16 2B 02 A6 |  if_e	mov	local03, local04
1dcc4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dcc8     44 00 90 5D |  if_ne	jmp	#LR__2364
1dccc     00 26 06 F6 | 	mov	local01, #0
1dcd0     A7 12 02 FB | 	rdlong	arg01, fp
1dcd4     09 13 52 F6 | 	abs	arg01, arg01 wc
1dcd8     1F 2E C6 C9 |  if_b	decod	local05, #31
1dcdc     00 2E 06 36 |  if_ae	mov	local05, #0
1dce0     8C B6 B0 FD | 	call	#__system___float_fromuns
1dce4     17 FB 61 F5 | 	xor	result1, local05
1dce8     FD 12 02 F6 | 	mov	arg01, result1
1dcec     0C 4E 05 F1 | 	add	fp, #12
1dcf0     A7 14 02 FB | 	rdlong	arg02, fp
1dcf4     0C 4E 85 F1 | 	sub	fp, #12
1dcf8     01 16 06 F6 | 	mov	arg03, #1
1dcfc     A8 BE B0 FD | 	call	#__system___float_cmp
1dd00     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd04     00 26 26 A6 |  if_e	not	local01, #0
1dd08     A7 26 62 FC | 	wrlong	local01, fp
1dd0c     90 02 90 FD | 	jmp	#LR__2373
1dd10                 | LR__2364
1dd10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1dd10     08 4E 05 F1 | 	add	fp, #8
1dd14     A7 26 02 FB | 	rdlong	local01, fp
1dd18     08 4E 85 F1 | 	sub	fp, #8
1dd1c     1C 26 0E F2 | 	cmp	local01, #28 wz
1dd20     14 4E 05 A1 |  if_e	add	fp, #20
1dd24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd28     14 4E 85 A1 |  if_e	sub	fp, #20
1dd2c     16 2B 02 A6 |  if_e	mov	local03, local04
1dd30     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dd34     24 00 90 5D |  if_ne	jmp	#LR__2365
1dd38     00 26 06 F6 | 	mov	local01, #0
1dd3c     A7 28 02 FB | 	rdlong	local02, fp
1dd40     0C 4E 05 F1 | 	add	fp, #12
1dd44     A7 2A 02 FB | 	rdlong	local03, fp
1dd48     0C 4E 85 F1 | 	sub	fp, #12
1dd4c     15 29 0A F2 | 	cmp	local02, local03 wz
1dd50     01 26 66 A6 |  if_e	neg	local01, #1
1dd54     A7 26 62 FC | 	wrlong	local01, fp
1dd58     44 02 90 FD | 	jmp	#LR__2373
1dd5c                 | LR__2365
1dd5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1dd5c     08 4E 05 F1 | 	add	fp, #8
1dd60     A7 26 02 FB | 	rdlong	local01, fp
1dd64     08 4E 85 F1 | 	sub	fp, #8
1dd68     1C 26 0E F2 | 	cmp	local01, #28 wz
1dd6c     14 4E 05 A1 |  if_e	add	fp, #20
1dd70     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd74     14 4E 85 A1 |  if_e	sub	fp, #20
1dd78     16 2B 02 A6 |  if_e	mov	local03, local04
1dd7c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dd80     24 00 90 5D |  if_ne	jmp	#LR__2366
1dd84     00 26 06 F6 | 	mov	local01, #0
1dd88     A7 28 02 FB | 	rdlong	local02, fp
1dd8c     0C 4E 05 F1 | 	add	fp, #12
1dd90     A7 2A 02 FB | 	rdlong	local03, fp
1dd94     0C 4E 85 F1 | 	sub	fp, #12
1dd98     15 29 0A F2 | 	cmp	local02, local03 wz
1dd9c     01 26 66 A6 |  if_e	neg	local01, #1
1dda0     A7 26 62 FC | 	wrlong	local01, fp
1dda4     F8 01 90 FD | 	jmp	#LR__2373
1dda8                 | LR__2366
1dda8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1dda8     08 4E 05 F1 | 	add	fp, #8
1ddac     A7 26 02 FB | 	rdlong	local01, fp
1ddb0     08 4E 85 F1 | 	sub	fp, #8
1ddb4     1D 26 0E F2 | 	cmp	local01, #29 wz
1ddb8     14 4E 05 A1 |  if_e	add	fp, #20
1ddbc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ddc0     14 4E 85 A1 |  if_e	sub	fp, #20
1ddc4     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ddc8     34 00 90 5D |  if_ne	jmp	#LR__2367
1ddcc     00 26 06 F6 | 	mov	local01, #0
1ddd0     A7 12 02 FB | 	rdlong	arg01, fp
1ddd4     98 B5 B0 FD | 	call	#__system___float_fromuns
1ddd8     FD 12 02 F6 | 	mov	arg01, result1
1dddc     0C 4E 05 F1 | 	add	fp, #12
1dde0     A7 14 02 FB | 	rdlong	arg02, fp
1dde4     0C 4E 85 F1 | 	sub	fp, #12
1dde8     01 16 06 F6 | 	mov	arg03, #1
1ddec     B8 BD B0 FD | 	call	#__system___float_cmp
1ddf0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ddf4     00 26 26 A6 |  if_e	not	local01, #0
1ddf8     A7 26 62 FC | 	wrlong	local01, fp
1ddfc     A0 01 90 FD | 	jmp	#LR__2373
1de00                 | LR__2367
1de00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1de00     08 4E 05 F1 | 	add	fp, #8
1de04     A7 26 02 FB | 	rdlong	local01, fp
1de08     08 4E 85 F1 | 	sub	fp, #8
1de0c     1D 26 0E F2 | 	cmp	local01, #29 wz
1de10     14 4E 05 A1 |  if_e	add	fp, #20
1de14     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de18     14 4E 85 A1 |  if_e	sub	fp, #20
1de1c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1de20     24 00 90 5D |  if_ne	jmp	#LR__2368
1de24     00 26 06 F6 | 	mov	local01, #0
1de28     A7 28 02 FB | 	rdlong	local02, fp
1de2c     0C 4E 05 F1 | 	add	fp, #12
1de30     A7 2A 02 FB | 	rdlong	local03, fp
1de34     0C 4E 85 F1 | 	sub	fp, #12
1de38     15 29 0A F2 | 	cmp	local02, local03 wz
1de3c     01 26 66 A6 |  if_e	neg	local01, #1
1de40     A7 26 62 FC | 	wrlong	local01, fp
1de44     58 01 90 FD | 	jmp	#LR__2373
1de48                 | LR__2368
1de48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1de48     08 4E 05 F1 | 	add	fp, #8
1de4c     A7 26 02 FB | 	rdlong	local01, fp
1de50     08 4E 85 F1 | 	sub	fp, #8
1de54     1D 26 0E F2 | 	cmp	local01, #29 wz
1de58     14 4E 05 A1 |  if_e	add	fp, #20
1de5c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de60     14 4E 85 A1 |  if_e	sub	fp, #20
1de64     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1de68     24 00 90 5D |  if_ne	jmp	#LR__2369
1de6c     00 26 06 F6 | 	mov	local01, #0
1de70     A7 28 02 FB | 	rdlong	local02, fp
1de74     0C 4E 05 F1 | 	add	fp, #12
1de78     A7 2A 02 FB | 	rdlong	local03, fp
1de7c     0C 4E 85 F1 | 	sub	fp, #12
1de80     15 29 0A F2 | 	cmp	local02, local03 wz
1de84     01 26 66 A6 |  if_e	neg	local01, #1
1de88     A7 26 62 FC | 	wrlong	local01, fp
1de8c     10 01 90 FD | 	jmp	#LR__2373
1de90                 | LR__2369
1de90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1de90     08 4E 05 F1 | 	add	fp, #8
1de94     A7 26 02 FB | 	rdlong	local01, fp
1de98     08 4E 85 F1 | 	sub	fp, #8
1de9c     2B 26 0E F2 | 	cmp	local01, #43 wz
1dea0     14 4E 05 A1 |  if_e	add	fp, #20
1dea4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dea8     14 4E 85 A1 |  if_e	sub	fp, #20
1deac     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1deb0     30 00 90 5D |  if_ne	jmp	#LR__2370
1deb4     00 26 06 F6 | 	mov	local01, #0
1deb8     A7 12 02 FB | 	rdlong	arg01, fp
1debc     20 F8 BE FD | 	call	#_convertstring
1dec0     FD 12 02 F6 | 	mov	arg01, result1
1dec4     0C 4E 05 F1 | 	add	fp, #12
1dec8     A7 14 02 FB | 	rdlong	arg02, fp
1decc     0C 4E 85 F1 | 	sub	fp, #12
1ded0     4C 8A B0 FD | 	call	#__system___string_cmp
1ded4     00 FA 0D F2 | 	cmp	result1, #0 wz
1ded8     00 26 26 A6 |  if_e	not	local01, #0
1dedc     A7 26 62 FC | 	wrlong	local01, fp
1dee0     BC 00 90 FD | 	jmp	#LR__2373
1dee4                 | LR__2370
1dee4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1dee4     08 4E 05 F1 | 	add	fp, #8
1dee8     A7 26 02 FB | 	rdlong	local01, fp
1deec     08 4E 85 F1 | 	sub	fp, #8
1def0     1F 26 0E F2 | 	cmp	local01, #31 wz
1def4     14 4E 05 A1 |  if_e	add	fp, #20
1def8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1defc     14 4E 85 A1 |  if_e	sub	fp, #20
1df00     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1df04     34 00 90 5D |  if_ne	jmp	#LR__2371
1df08     00 26 06 F6 | 	mov	local01, #0
1df0c     A7 28 02 FB | 	rdlong	local02, fp
1df10     0C 4E 05 F1 | 	add	fp, #12
1df14     A7 12 02 FB | 	rdlong	arg01, fp
1df18     0C 4E 85 F1 | 	sub	fp, #12
1df1c     C0 F7 BE FD | 	call	#_convertstring
1df20     FD 14 02 F6 | 	mov	arg02, result1
1df24     14 13 02 F6 | 	mov	arg01, local02
1df28     F4 89 B0 FD | 	call	#__system___string_cmp
1df2c     00 FA 0D F2 | 	cmp	result1, #0 wz
1df30     00 26 26 A6 |  if_e	not	local01, #0
1df34     A7 26 62 FC | 	wrlong	local01, fp
1df38     64 00 90 FD | 	jmp	#LR__2373
1df3c                 | LR__2371
1df3c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1df3c     08 4E 05 F1 | 	add	fp, #8
1df40     A7 26 02 FB | 	rdlong	local01, fp
1df44     08 4E 85 F1 | 	sub	fp, #8
1df48     2B 26 0E F2 | 	cmp	local01, #43 wz
1df4c     14 4E 05 A1 |  if_e	add	fp, #20
1df50     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df54     14 4E 85 A1 |  if_e	sub	fp, #20
1df58     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1df5c     3C 00 90 5D |  if_ne	jmp	#LR__2372
1df60     00 26 06 F6 | 	mov	local01, #0
1df64     A7 12 02 FB | 	rdlong	arg01, fp
1df68     74 F7 BE FD | 	call	#_convertstring
1df6c     FD 28 02 F6 | 	mov	local02, result1
1df70     0C 4E 05 F1 | 	add	fp, #12
1df74     A7 12 02 FB | 	rdlong	arg01, fp
1df78     0C 4E 85 F1 | 	sub	fp, #12
1df7c     60 F7 BE FD | 	call	#_convertstring
1df80     FD 14 02 F6 | 	mov	arg02, result1
1df84     14 13 02 F6 | 	mov	arg01, local02
1df88     94 89 B0 FD | 	call	#__system___string_cmp
1df8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1df90     00 26 26 A6 |  if_e	not	local01, #0
1df94     A7 26 62 FC | 	wrlong	local01, fp
1df98     04 00 90 FD | 	jmp	#LR__2373
1df9c                 | LR__2372
1df9c     A7 00 68 FC | 	wrlong	#0, fp
1dfa0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dfa0                 | LR__2373
1dfa0     08 4E 05 F1 | 	add	fp, #8
1dfa4     A7 38 68 FC | 	wrlong	#28, fp
1dfa8     08 4E 85 F1 | 	sub	fp, #8
1dfac     A7 12 02 F6 | 	mov	arg01, fp
1dfb0     4C F6 BE FD | 	call	#_push
1dfb4     A7 F0 03 F6 | 	mov	ptra, fp
1dfb8     B2 00 A0 FD | 	call	#popregs_
1dfbc                 | _do_eq_ret
1dfbc     2D 00 64 FD | 	ret
1dfc0                 | 
1dfc0                 | ' 
1dfc0                 | ' '--------------------------------- fdiv (/) - float divide
1dfc0                 | ' 
1dfc0                 | ' sub do_fdiv 
1dfc0                 | _do_fdiv
1dfc0     02 4A 05 F6 | 	mov	COUNT_, #2
1dfc4     A8 00 A0 FD | 	call	#pushregs_
1dfc8     18 F0 07 F1 | 	add	ptra, #24
1dfcc     98 F5 BE FD | 	call	#_pop
1dfd0     FD 14 02 F6 | 	mov	arg02, result1
1dfd4     FE 12 02 F6 | 	mov	arg01, result2
1dfd8     FF 26 02 F6 | 	mov	local01, result3
1dfdc     0C 4E 05 F1 | 	add	fp, #12
1dfe0     A7 14 62 FC | 	wrlong	arg02, fp
1dfe4     04 4E 05 F1 | 	add	fp, #4
1dfe8     A7 12 62 FC | 	wrlong	arg01, fp
1dfec     04 4E 05 F1 | 	add	fp, #4
1dff0     A7 26 62 FC | 	wrlong	local01, fp
1dff4     14 4E 85 F1 | 	sub	fp, #20
1dff8     6C F5 BE FD | 	call	#_pop
1dffc     A7 FA 61 FC | 	wrlong	result1, fp
1e000     04 4E 05 F1 | 	add	fp, #4
1e004     A7 FC 61 FC | 	wrlong	result2, fp
1e008     04 4E 05 F1 | 	add	fp, #4
1e00c     A7 FE 61 FC | 	wrlong	result3, fp
1e010                 | ' 
1e010                 | ' t2=pop()
1e010                 | ' t1=pop()
1e010                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1e010     08 4E 85 F1 | 	sub	fp, #8
1e014     1F FE 0D F2 | 	cmp	result3, #31 wz
1e018     14 4E 05 51 |  if_ne	add	fp, #20
1e01c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1e020     14 4E 85 51 |  if_ne	sub	fp, #20
1e024     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1e028     A7 14 68 AC |  if_e	wrlong	#10, fp
1e02c     08 4E 05 A1 |  if_e	add	fp, #8
1e030     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e034     08 4E 85 A1 |  if_e	sub	fp, #8
1e038     38 01 90 AD |  if_e	jmp	#LR__2385
1e03c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e03c     08 4E 05 F1 | 	add	fp, #8
1e040     A7 14 02 FB | 	rdlong	arg02, fp
1e044     08 4E 85 F1 | 	sub	fp, #8
1e048     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e04c     28 00 90 5D |  if_ne	jmp	#LR__2380
1e050     08 4E 05 F1 | 	add	fp, #8
1e054     A7 3C 68 FC | 	wrlong	#30, fp
1e058     08 4E 85 F1 | 	sub	fp, #8
1e05c     A7 12 02 FB | 	rdlong	arg01, fp
1e060     09 13 52 F6 | 	abs	arg01, arg01 wc
1e064     1F 28 C6 C9 |  if_b	decod	local02, #31
1e068     00 28 06 36 |  if_ae	mov	local02, #0
1e06c     00 B3 B0 FD | 	call	#__system___float_fromuns
1e070     14 FB 61 F5 | 	xor	result1, local02
1e074     A7 FA 61 FC | 	wrlong	result1, fp
1e078                 | LR__2380
1e078                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1e078     08 4E 05 F1 | 	add	fp, #8
1e07c     A7 14 02 FB | 	rdlong	arg02, fp
1e080     08 4E 85 F1 | 	sub	fp, #8
1e084     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e088     18 00 90 5D |  if_ne	jmp	#LR__2381
1e08c     08 4E 05 F1 | 	add	fp, #8
1e090     A7 3C 68 FC | 	wrlong	#30, fp
1e094     08 4E 85 F1 | 	sub	fp, #8
1e098     A7 12 02 FB | 	rdlong	arg01, fp
1e09c     D0 B2 B0 FD | 	call	#__system___float_fromuns
1e0a0     A7 FA 61 FC | 	wrlong	result1, fp
1e0a4                 | LR__2381
1e0a4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e0a4     14 4E 05 F1 | 	add	fp, #20
1e0a8     A7 14 02 FB | 	rdlong	arg02, fp
1e0ac     14 4E 85 F1 | 	sub	fp, #20
1e0b0     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e0b4     34 00 90 5D |  if_ne	jmp	#LR__2382
1e0b8     14 4E 05 F1 | 	add	fp, #20
1e0bc     A7 3C 68 FC | 	wrlong	#30, fp
1e0c0     08 4E 85 F1 | 	sub	fp, #8
1e0c4     A7 12 02 FB | 	rdlong	arg01, fp
1e0c8     0C 4E 85 F1 | 	sub	fp, #12
1e0cc     09 13 52 F6 | 	abs	arg01, arg01 wc
1e0d0     1F 28 C6 C9 |  if_b	decod	local02, #31
1e0d4     00 28 06 36 |  if_ae	mov	local02, #0
1e0d8     94 B2 B0 FD | 	call	#__system___float_fromuns
1e0dc     14 FB 61 F5 | 	xor	result1, local02
1e0e0     0C 4E 05 F1 | 	add	fp, #12
1e0e4     A7 FA 61 FC | 	wrlong	result1, fp
1e0e8     0C 4E 85 F1 | 	sub	fp, #12
1e0ec                 | LR__2382
1e0ec                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e0ec     14 4E 05 F1 | 	add	fp, #20
1e0f0     A7 14 02 FB | 	rdlong	arg02, fp
1e0f4     14 4E 85 F1 | 	sub	fp, #20
1e0f8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e0fc     24 00 90 5D |  if_ne	jmp	#LR__2383
1e100     14 4E 05 F1 | 	add	fp, #20
1e104     A7 3C 68 FC | 	wrlong	#30, fp
1e108     08 4E 85 F1 | 	sub	fp, #8
1e10c     A7 12 02 FB | 	rdlong	arg01, fp
1e110     0C 4E 85 F1 | 	sub	fp, #12
1e114     58 B2 B0 FD | 	call	#__system___float_fromuns
1e118     0C 4E 05 F1 | 	add	fp, #12
1e11c     A7 FA 61 FC | 	wrlong	result1, fp
1e120     0C 4E 85 F1 | 	sub	fp, #12
1e124                 | LR__2383
1e124                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1e124     08 4E 05 F1 | 	add	fp, #8
1e128     A7 14 02 FB | 	rdlong	arg02, fp
1e12c     08 4E 85 F1 | 	sub	fp, #8
1e130     1E 14 0E F2 | 	cmp	arg02, #30 wz
1e134     14 4E 05 A1 |  if_e	add	fp, #20
1e138     A7 26 02 AB |  if_e	rdlong	local01, fp
1e13c     14 4E 85 A1 |  if_e	sub	fp, #20
1e140     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1e144     1C 00 90 5D |  if_ne	jmp	#LR__2384
1e148     A7 12 02 FB | 	rdlong	arg01, fp
1e14c     0C 4E 05 F1 | 	add	fp, #12
1e150     A7 14 02 FB | 	rdlong	arg02, fp
1e154     0C 4E 85 F1 | 	sub	fp, #12
1e158     1C B8 B0 FD | 	call	#__system___float_div
1e15c     A7 FA 61 FC | 	wrlong	result1, fp
1e160     10 00 90 FD | 	jmp	#LR__2385
1e164                 | LR__2384
1e164     A7 16 68 FC | 	wrlong	#11, fp
1e168     08 4E 05 F1 | 	add	fp, #8
1e16c     A7 FE 69 FC | 	wrlong	#255, fp
1e170     08 4E 85 F1 | 	sub	fp, #8
1e174                 | LR__2385
1e174     A7 12 02 F6 | 	mov	arg01, fp
1e178     84 F4 BE FD | 	call	#_push
1e17c     A7 F0 03 F6 | 	mov	ptra, fp
1e180     B2 00 A0 FD | 	call	#popregs_
1e184                 | _do_fdiv_ret
1e184     2D 00 64 FD | 	ret
1e188                 | 
1e188                 | ' 
1e188                 | ' '--------------------------------- greater or equal (>=)
1e188                 | ' 
1e188                 | ' sub do_ge
1e188                 | _do_ge
1e188     05 4A 05 F6 | 	mov	COUNT_, #5
1e18c     A8 00 A0 FD | 	call	#pushregs_
1e190     18 F0 07 F1 | 	add	ptra, #24
1e194     D0 F3 BE FD | 	call	#_pop
1e198     FD 26 02 F6 | 	mov	local01, result1
1e19c     FE 28 02 F6 | 	mov	local02, result2
1e1a0     FF 2A 02 F6 | 	mov	local03, result3
1e1a4     0C 4E 05 F1 | 	add	fp, #12
1e1a8     A7 26 62 FC | 	wrlong	local01, fp
1e1ac     04 4E 05 F1 | 	add	fp, #4
1e1b0     A7 28 62 FC | 	wrlong	local02, fp
1e1b4     04 4E 05 F1 | 	add	fp, #4
1e1b8     A7 2A 62 FC | 	wrlong	local03, fp
1e1bc     14 4E 85 F1 | 	sub	fp, #20
1e1c0     A4 F3 BE FD | 	call	#_pop
1e1c4     FF 2A 02 F6 | 	mov	local03, result3
1e1c8     A7 FA 61 FC | 	wrlong	result1, fp
1e1cc     04 4E 05 F1 | 	add	fp, #4
1e1d0     A7 FC 61 FC | 	wrlong	result2, fp
1e1d4     04 4E 05 F1 | 	add	fp, #4
1e1d8     A7 2A 62 FC | 	wrlong	local03, fp
1e1dc                 | ' 
1e1dc                 | ' t2=pop()
1e1dc                 | ' t1=pop()
1e1dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1e1dc     08 4E 85 F1 | 	sub	fp, #8
1e1e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e1e4     14 4E 05 A1 |  if_e	add	fp, #20
1e1e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e1ec     14 4E 85 A1 |  if_e	sub	fp, #20
1e1f0     16 2B 02 A6 |  if_e	mov	local03, local04
1e1f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e1f8     28 00 90 5D |  if_ne	jmp	#LR__2390
1e1fc     00 26 06 F6 | 	mov	local01, #0
1e200     A7 12 02 FB | 	rdlong	arg01, fp
1e204     0C 4E 05 F1 | 	add	fp, #12
1e208     A7 14 02 FB | 	rdlong	arg02, fp
1e20c     0C 4E 85 F1 | 	sub	fp, #12
1e210     0C 87 B0 FD | 	call	#__system___string_cmp
1e214     00 FA 55 F2 | 	cmps	result1, #0 wc
1e218     00 26 26 36 |  if_ae	not	local01, #0
1e21c     A7 26 62 FC | 	wrlong	local01, fp
1e220     24 04 90 FD | 	jmp	#LR__2403
1e224                 | LR__2390
1e224                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1e224     08 4E 05 F1 | 	add	fp, #8
1e228     A7 26 02 FB | 	rdlong	local01, fp
1e22c     08 4E 85 F1 | 	sub	fp, #8
1e230     1E 26 0E F2 | 	cmp	local01, #30 wz
1e234     14 4E 05 A1 |  if_e	add	fp, #20
1e238     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e23c     14 4E 85 A1 |  if_e	sub	fp, #20
1e240     16 2B 02 A6 |  if_e	mov	local03, local04
1e244     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e248     2C 00 90 5D |  if_ne	jmp	#LR__2391
1e24c     00 26 06 F6 | 	mov	local01, #0
1e250     A7 12 02 FB | 	rdlong	arg01, fp
1e254     0C 4E 05 F1 | 	add	fp, #12
1e258     A7 14 02 FB | 	rdlong	arg02, fp
1e25c     0C 4E 85 F1 | 	sub	fp, #12
1e260     01 16 66 F6 | 	neg	arg03, #1
1e264     40 B9 B0 FD | 	call	#__system___float_cmp
1e268     00 FA 55 F2 | 	cmps	result1, #0 wc
1e26c     00 26 26 36 |  if_ae	not	local01, #0
1e270     A7 26 62 FC | 	wrlong	local01, fp
1e274     D0 03 90 FD | 	jmp	#LR__2403
1e278                 | LR__2391
1e278                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1e278     08 4E 05 F1 | 	add	fp, #8
1e27c     A7 26 02 FB | 	rdlong	local01, fp
1e280     08 4E 85 F1 | 	sub	fp, #8
1e284     1E 26 0E F2 | 	cmp	local01, #30 wz
1e288     14 4E 05 A1 |  if_e	add	fp, #20
1e28c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e290     14 4E 85 A1 |  if_e	sub	fp, #20
1e294     16 2B 02 A6 |  if_e	mov	local03, local04
1e298     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e29c     48 00 90 5D |  if_ne	jmp	#LR__2392
1e2a0     00 26 06 F6 | 	mov	local01, #0
1e2a4     A7 28 02 FB | 	rdlong	local02, fp
1e2a8     0C 4E 05 F1 | 	add	fp, #12
1e2ac     A7 12 02 FB | 	rdlong	arg01, fp
1e2b0     0C 4E 85 F1 | 	sub	fp, #12
1e2b4     09 13 52 F6 | 	abs	arg01, arg01 wc
1e2b8     1F 2E C6 C9 |  if_b	decod	local05, #31
1e2bc     00 2E 06 36 |  if_ae	mov	local05, #0
1e2c0     AC B0 B0 FD | 	call	#__system___float_fromuns
1e2c4     17 FB 61 F5 | 	xor	result1, local05
1e2c8     FD 14 02 F6 | 	mov	arg02, result1
1e2cc     14 13 02 F6 | 	mov	arg01, local02
1e2d0     01 16 66 F6 | 	neg	arg03, #1
1e2d4     D0 B8 B0 FD | 	call	#__system___float_cmp
1e2d8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e2dc     00 26 26 36 |  if_ae	not	local01, #0
1e2e0     A7 26 62 FC | 	wrlong	local01, fp
1e2e4     60 03 90 FD | 	jmp	#LR__2403
1e2e8                 | LR__2392
1e2e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1e2e8     08 4E 05 F1 | 	add	fp, #8
1e2ec     A7 26 02 FB | 	rdlong	local01, fp
1e2f0     08 4E 85 F1 | 	sub	fp, #8
1e2f4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e2f8     14 4E 05 A1 |  if_e	add	fp, #20
1e2fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e300     14 4E 85 A1 |  if_e	sub	fp, #20
1e304     16 2B 02 A6 |  if_e	mov	local03, local04
1e308     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e30c     38 00 90 5D |  if_ne	jmp	#LR__2393
1e310     00 26 06 F6 | 	mov	local01, #0
1e314     A7 28 02 FB | 	rdlong	local02, fp
1e318     0C 4E 05 F1 | 	add	fp, #12
1e31c     A7 12 02 FB | 	rdlong	arg01, fp
1e320     0C 4E 85 F1 | 	sub	fp, #12
1e324     48 B0 B0 FD | 	call	#__system___float_fromuns
1e328     FD 14 02 F6 | 	mov	arg02, result1
1e32c     14 13 02 F6 | 	mov	arg01, local02
1e330     01 16 66 F6 | 	neg	arg03, #1
1e334     70 B8 B0 FD | 	call	#__system___float_cmp
1e338     00 FA 55 F2 | 	cmps	result1, #0 wc
1e33c     00 26 26 36 |  if_ae	not	local01, #0
1e340     A7 26 62 FC | 	wrlong	local01, fp
1e344     00 03 90 FD | 	jmp	#LR__2403
1e348                 | LR__2393
1e348                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1e348     08 4E 05 F1 | 	add	fp, #8
1e34c     A7 26 02 FB | 	rdlong	local01, fp
1e350     08 4E 85 F1 | 	sub	fp, #8
1e354     1C 26 0E F2 | 	cmp	local01, #28 wz
1e358     14 4E 05 A1 |  if_e	add	fp, #20
1e35c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e360     14 4E 85 A1 |  if_e	sub	fp, #20
1e364     16 2B 02 A6 |  if_e	mov	local03, local04
1e368     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e36c     44 00 90 5D |  if_ne	jmp	#LR__2394
1e370     00 26 06 F6 | 	mov	local01, #0
1e374     A7 12 02 FB | 	rdlong	arg01, fp
1e378     09 13 52 F6 | 	abs	arg01, arg01 wc
1e37c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e380     00 2E 06 36 |  if_ae	mov	local05, #0
1e384     E8 AF B0 FD | 	call	#__system___float_fromuns
1e388     17 FB 61 F5 | 	xor	result1, local05
1e38c     FD 12 02 F6 | 	mov	arg01, result1
1e390     0C 4E 05 F1 | 	add	fp, #12
1e394     A7 14 02 FB | 	rdlong	arg02, fp
1e398     0C 4E 85 F1 | 	sub	fp, #12
1e39c     01 16 66 F6 | 	neg	arg03, #1
1e3a0     04 B8 B0 FD | 	call	#__system___float_cmp
1e3a4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e3a8     00 26 26 36 |  if_ae	not	local01, #0
1e3ac     A7 26 62 FC | 	wrlong	local01, fp
1e3b0     94 02 90 FD | 	jmp	#LR__2403
1e3b4                 | LR__2394
1e3b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1e3b4     08 4E 05 F1 | 	add	fp, #8
1e3b8     A7 26 02 FB | 	rdlong	local01, fp
1e3bc     08 4E 85 F1 | 	sub	fp, #8
1e3c0     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3c4     14 4E 05 A1 |  if_e	add	fp, #20
1e3c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3cc     14 4E 85 A1 |  if_e	sub	fp, #20
1e3d0     16 2B 02 A6 |  if_e	mov	local03, local04
1e3d4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e3d8     24 00 90 5D |  if_ne	jmp	#LR__2395
1e3dc     00 26 06 F6 | 	mov	local01, #0
1e3e0     A7 28 02 FB | 	rdlong	local02, fp
1e3e4     0C 4E 05 F1 | 	add	fp, #12
1e3e8     A7 2A 02 FB | 	rdlong	local03, fp
1e3ec     0C 4E 85 F1 | 	sub	fp, #12
1e3f0     15 29 52 F2 | 	cmps	local02, local03 wc
1e3f4     01 26 66 36 |  if_ae	neg	local01, #1
1e3f8     A7 26 62 FC | 	wrlong	local01, fp
1e3fc     48 02 90 FD | 	jmp	#LR__2403
1e400                 | LR__2395
1e400                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1e400     08 4E 05 F1 | 	add	fp, #8
1e404     A7 26 02 FB | 	rdlong	local01, fp
1e408     08 4E 85 F1 | 	sub	fp, #8
1e40c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e410     14 4E 05 A1 |  if_e	add	fp, #20
1e414     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e418     14 4E 85 A1 |  if_e	sub	fp, #20
1e41c     16 2B 02 A6 |  if_e	mov	local03, local04
1e420     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e424     24 00 90 5D |  if_ne	jmp	#LR__2396
1e428     00 26 06 F6 | 	mov	local01, #0
1e42c     A7 28 02 FB | 	rdlong	local02, fp
1e430     0C 4E 05 F1 | 	add	fp, #12
1e434     A7 2A 02 FB | 	rdlong	local03, fp
1e438     0C 4E 85 F1 | 	sub	fp, #12
1e43c     15 29 52 F2 | 	cmps	local02, local03 wc
1e440     01 26 66 36 |  if_ae	neg	local01, #1
1e444     A7 26 62 FC | 	wrlong	local01, fp
1e448     FC 01 90 FD | 	jmp	#LR__2403
1e44c                 | LR__2396
1e44c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1e44c     08 4E 05 F1 | 	add	fp, #8
1e450     A7 26 02 FB | 	rdlong	local01, fp
1e454     08 4E 85 F1 | 	sub	fp, #8
1e458     1D 26 0E F2 | 	cmp	local01, #29 wz
1e45c     14 4E 05 A1 |  if_e	add	fp, #20
1e460     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e464     14 4E 85 A1 |  if_e	sub	fp, #20
1e468     16 2B 02 A6 |  if_e	mov	local03, local04
1e46c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e470     34 00 90 5D |  if_ne	jmp	#LR__2397
1e474     00 26 06 F6 | 	mov	local01, #0
1e478     A7 12 02 FB | 	rdlong	arg01, fp
1e47c     F0 AE B0 FD | 	call	#__system___float_fromuns
1e480     FD 12 02 F6 | 	mov	arg01, result1
1e484     0C 4E 05 F1 | 	add	fp, #12
1e488     A7 14 02 FB | 	rdlong	arg02, fp
1e48c     0C 4E 85 F1 | 	sub	fp, #12
1e490     01 16 66 F6 | 	neg	arg03, #1
1e494     10 B7 B0 FD | 	call	#__system___float_cmp
1e498     00 FA 55 F2 | 	cmps	result1, #0 wc
1e49c     00 26 26 36 |  if_ae	not	local01, #0
1e4a0     A7 26 62 FC | 	wrlong	local01, fp
1e4a4     A0 01 90 FD | 	jmp	#LR__2403
1e4a8                 | LR__2397
1e4a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1e4a8     08 4E 05 F1 | 	add	fp, #8
1e4ac     A7 26 02 FB | 	rdlong	local01, fp
1e4b0     08 4E 85 F1 | 	sub	fp, #8
1e4b4     1D 26 0E F2 | 	cmp	local01, #29 wz
1e4b8     14 4E 05 A1 |  if_e	add	fp, #20
1e4bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e4c0     14 4E 85 A1 |  if_e	sub	fp, #20
1e4c4     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1e4c8     24 00 90 5D |  if_ne	jmp	#LR__2398
1e4cc     00 26 06 F6 | 	mov	local01, #0
1e4d0     A7 28 02 FB | 	rdlong	local02, fp
1e4d4     0C 4E 05 F1 | 	add	fp, #12
1e4d8     A7 2A 02 FB | 	rdlong	local03, fp
1e4dc     0C 4E 85 F1 | 	sub	fp, #12
1e4e0     15 29 52 F2 | 	cmps	local02, local03 wc
1e4e4     01 26 66 36 |  if_ae	neg	local01, #1
1e4e8     A7 26 62 FC | 	wrlong	local01, fp
1e4ec     58 01 90 FD | 	jmp	#LR__2403
1e4f0                 | LR__2398
1e4f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1e4f0     08 4E 05 F1 | 	add	fp, #8
1e4f4     A7 26 02 FB | 	rdlong	local01, fp
1e4f8     08 4E 85 F1 | 	sub	fp, #8
1e4fc     1D 26 0E F2 | 	cmp	local01, #29 wz
1e500     14 4E 05 A1 |  if_e	add	fp, #20
1e504     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e508     14 4E 85 A1 |  if_e	sub	fp, #20
1e50c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e510     24 00 90 5D |  if_ne	jmp	#LR__2399
1e514     00 26 06 F6 | 	mov	local01, #0
1e518     A7 28 02 FB | 	rdlong	local02, fp
1e51c     0C 4E 05 F1 | 	add	fp, #12
1e520     A7 2A 02 FB | 	rdlong	local03, fp
1e524     0C 4E 85 F1 | 	sub	fp, #12
1e528     15 29 12 F2 | 	cmp	local02, local03 wc
1e52c     01 26 66 36 |  if_ae	neg	local01, #1
1e530     A7 26 62 FC | 	wrlong	local01, fp
1e534     10 01 90 FD | 	jmp	#LR__2403
1e538                 | LR__2399
1e538                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1e538     08 4E 05 F1 | 	add	fp, #8
1e53c     A7 26 02 FB | 	rdlong	local01, fp
1e540     08 4E 85 F1 | 	sub	fp, #8
1e544     2B 26 0E F2 | 	cmp	local01, #43 wz
1e548     14 4E 05 A1 |  if_e	add	fp, #20
1e54c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e550     14 4E 85 A1 |  if_e	sub	fp, #20
1e554     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e558     30 00 90 5D |  if_ne	jmp	#LR__2400
1e55c     00 26 06 F6 | 	mov	local01, #0
1e560     A7 12 02 FB | 	rdlong	arg01, fp
1e564     78 F1 BE FD | 	call	#_convertstring
1e568     FD 12 02 F6 | 	mov	arg01, result1
1e56c     0C 4E 05 F1 | 	add	fp, #12
1e570     A7 14 02 FB | 	rdlong	arg02, fp
1e574     0C 4E 85 F1 | 	sub	fp, #12
1e578     A4 83 B0 FD | 	call	#__system___string_cmp
1e57c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e580     00 26 26 36 |  if_ae	not	local01, #0
1e584     A7 26 62 FC | 	wrlong	local01, fp
1e588     BC 00 90 FD | 	jmp	#LR__2403
1e58c                 | LR__2400
1e58c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1e58c     08 4E 05 F1 | 	add	fp, #8
1e590     A7 26 02 FB | 	rdlong	local01, fp
1e594     08 4E 85 F1 | 	sub	fp, #8
1e598     1F 26 0E F2 | 	cmp	local01, #31 wz
1e59c     14 4E 05 A1 |  if_e	add	fp, #20
1e5a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e5a4     14 4E 85 A1 |  if_e	sub	fp, #20
1e5a8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e5ac     34 00 90 5D |  if_ne	jmp	#LR__2401
1e5b0     00 26 06 F6 | 	mov	local01, #0
1e5b4     A7 28 02 FB | 	rdlong	local02, fp
1e5b8     0C 4E 05 F1 | 	add	fp, #12
1e5bc     A7 12 02 FB | 	rdlong	arg01, fp
1e5c0     0C 4E 85 F1 | 	sub	fp, #12
1e5c4     18 F1 BE FD | 	call	#_convertstring
1e5c8     FD 14 02 F6 | 	mov	arg02, result1
1e5cc     14 13 02 F6 | 	mov	arg01, local02
1e5d0     4C 83 B0 FD | 	call	#__system___string_cmp
1e5d4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e5d8     00 26 26 36 |  if_ae	not	local01, #0
1e5dc     A7 26 62 FC | 	wrlong	local01, fp
1e5e0     64 00 90 FD | 	jmp	#LR__2403
1e5e4                 | LR__2401
1e5e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1e5e4     08 4E 05 F1 | 	add	fp, #8
1e5e8     A7 26 02 FB | 	rdlong	local01, fp
1e5ec     08 4E 85 F1 | 	sub	fp, #8
1e5f0     2B 26 0E F2 | 	cmp	local01, #43 wz
1e5f4     14 4E 05 A1 |  if_e	add	fp, #20
1e5f8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e5fc     14 4E 85 A1 |  if_e	sub	fp, #20
1e600     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e604     3C 00 90 5D |  if_ne	jmp	#LR__2402
1e608     00 26 06 F6 | 	mov	local01, #0
1e60c     A7 12 02 FB | 	rdlong	arg01, fp
1e610     CC F0 BE FD | 	call	#_convertstring
1e614     FD 28 02 F6 | 	mov	local02, result1
1e618     0C 4E 05 F1 | 	add	fp, #12
1e61c     A7 12 02 FB | 	rdlong	arg01, fp
1e620     0C 4E 85 F1 | 	sub	fp, #12
1e624     B8 F0 BE FD | 	call	#_convertstring
1e628     FD 14 02 F6 | 	mov	arg02, result1
1e62c     14 13 02 F6 | 	mov	arg01, local02
1e630     EC 82 B0 FD | 	call	#__system___string_cmp
1e634     00 FA 55 F2 | 	cmps	result1, #0 wc
1e638     00 26 26 36 |  if_ae	not	local01, #0
1e63c     A7 26 62 FC | 	wrlong	local01, fp
1e640     04 00 90 FD | 	jmp	#LR__2403
1e644                 | LR__2402
1e644     A7 00 68 FC | 	wrlong	#0, fp
1e648                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e648                 | LR__2403
1e648     08 4E 05 F1 | 	add	fp, #8
1e64c     A7 38 68 FC | 	wrlong	#28, fp
1e650     08 4E 85 F1 | 	sub	fp, #8
1e654                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e654     A7 26 0A FB | 	rdlong	local01, fp wz
1e658     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e65c     A7 12 02 F6 | 	mov	arg01, fp
1e660     9C EF BE FD | 	call	#_push
1e664     A7 F0 03 F6 | 	mov	ptra, fp
1e668     B2 00 A0 FD | 	call	#popregs_
1e66c                 | _do_ge_ret
1e66c     2D 00 64 FD | 	ret
1e670                 | 
1e670                 | ' 
1e670                 | ' '--------------------------------- greater than (>)
1e670                 | ' 
1e670                 | ' sub do_gt
1e670                 | _do_gt
1e670     05 4A 05 F6 | 	mov	COUNT_, #5
1e674     A8 00 A0 FD | 	call	#pushregs_
1e678     18 F0 07 F1 | 	add	ptra, #24
1e67c     E8 EE BE FD | 	call	#_pop
1e680     FD 26 02 F6 | 	mov	local01, result1
1e684     FE 28 02 F6 | 	mov	local02, result2
1e688     FF 2A 02 F6 | 	mov	local03, result3
1e68c     0C 4E 05 F1 | 	add	fp, #12
1e690     A7 26 62 FC | 	wrlong	local01, fp
1e694     04 4E 05 F1 | 	add	fp, #4
1e698     A7 28 62 FC | 	wrlong	local02, fp
1e69c     04 4E 05 F1 | 	add	fp, #4
1e6a0     A7 2A 62 FC | 	wrlong	local03, fp
1e6a4     14 4E 85 F1 | 	sub	fp, #20
1e6a8     BC EE BE FD | 	call	#_pop
1e6ac     FF 2A 02 F6 | 	mov	local03, result3
1e6b0     A7 FA 61 FC | 	wrlong	result1, fp
1e6b4     04 4E 05 F1 | 	add	fp, #4
1e6b8     A7 FC 61 FC | 	wrlong	result2, fp
1e6bc     04 4E 05 F1 | 	add	fp, #4
1e6c0     A7 2A 62 FC | 	wrlong	local03, fp
1e6c4                 | ' 
1e6c4                 | ' t2=pop()
1e6c4                 | ' t1=pop()
1e6c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1e6c4     08 4E 85 F1 | 	sub	fp, #8
1e6c8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e6cc     14 4E 05 A1 |  if_e	add	fp, #20
1e6d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e6d4     14 4E 85 A1 |  if_e	sub	fp, #20
1e6d8     16 2B 02 A6 |  if_e	mov	local03, local04
1e6dc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e6e0     28 00 90 5D |  if_ne	jmp	#LR__2410
1e6e4     00 26 06 F6 | 	mov	local01, #0
1e6e8     A7 12 02 FB | 	rdlong	arg01, fp
1e6ec     0C 4E 05 F1 | 	add	fp, #12
1e6f0     A7 14 02 FB | 	rdlong	arg02, fp
1e6f4     0C 4E 85 F1 | 	sub	fp, #12
1e6f8     24 82 B0 FD | 	call	#__system___string_cmp
1e6fc     01 FA 55 F2 | 	cmps	result1, #1 wc
1e700     00 26 26 36 |  if_ae	not	local01, #0
1e704     A7 26 62 FC | 	wrlong	local01, fp
1e708     20 04 90 FD | 	jmp	#LR__2423
1e70c                 | LR__2410
1e70c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1e70c     08 4E 05 F1 | 	add	fp, #8
1e710     A7 26 02 FB | 	rdlong	local01, fp
1e714     08 4E 85 F1 | 	sub	fp, #8
1e718     1E 26 0E F2 | 	cmp	local01, #30 wz
1e71c     14 4E 05 A1 |  if_e	add	fp, #20
1e720     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e724     14 4E 85 A1 |  if_e	sub	fp, #20
1e728     16 2B 02 A6 |  if_e	mov	local03, local04
1e72c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e730     2C 00 90 5D |  if_ne	jmp	#LR__2411
1e734     00 26 06 F6 | 	mov	local01, #0
1e738     A7 12 02 FB | 	rdlong	arg01, fp
1e73c     0C 4E 05 F1 | 	add	fp, #12
1e740     A7 14 02 FB | 	rdlong	arg02, fp
1e744     0C 4E 85 F1 | 	sub	fp, #12
1e748     01 16 66 F6 | 	neg	arg03, #1
1e74c     58 B4 B0 FD | 	call	#__system___float_cmp
1e750     01 FA 55 F2 | 	cmps	result1, #1 wc
1e754     00 26 26 36 |  if_ae	not	local01, #0
1e758     A7 26 62 FC | 	wrlong	local01, fp
1e75c     CC 03 90 FD | 	jmp	#LR__2423
1e760                 | LR__2411
1e760                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1e760     08 4E 05 F1 | 	add	fp, #8
1e764     A7 26 02 FB | 	rdlong	local01, fp
1e768     08 4E 85 F1 | 	sub	fp, #8
1e76c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e770     14 4E 05 A1 |  if_e	add	fp, #20
1e774     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e778     14 4E 85 A1 |  if_e	sub	fp, #20
1e77c     16 2B 02 A6 |  if_e	mov	local03, local04
1e780     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e784     48 00 90 5D |  if_ne	jmp	#LR__2412
1e788     00 26 06 F6 | 	mov	local01, #0
1e78c     A7 28 02 FB | 	rdlong	local02, fp
1e790     0C 4E 05 F1 | 	add	fp, #12
1e794     A7 12 02 FB | 	rdlong	arg01, fp
1e798     0C 4E 85 F1 | 	sub	fp, #12
1e79c     09 13 52 F6 | 	abs	arg01, arg01 wc
1e7a0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e7a4     00 2E 06 36 |  if_ae	mov	local05, #0
1e7a8     C4 AB B0 FD | 	call	#__system___float_fromuns
1e7ac     17 FB 61 F5 | 	xor	result1, local05
1e7b0     FD 14 02 F6 | 	mov	arg02, result1
1e7b4     14 13 02 F6 | 	mov	arg01, local02
1e7b8     01 16 66 F6 | 	neg	arg03, #1
1e7bc     E8 B3 B0 FD | 	call	#__system___float_cmp
1e7c0     01 FA 55 F2 | 	cmps	result1, #1 wc
1e7c4     00 26 26 36 |  if_ae	not	local01, #0
1e7c8     A7 26 62 FC | 	wrlong	local01, fp
1e7cc     5C 03 90 FD | 	jmp	#LR__2423
1e7d0                 | LR__2412
1e7d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1e7d0     08 4E 05 F1 | 	add	fp, #8
1e7d4     A7 26 02 FB | 	rdlong	local01, fp
1e7d8     08 4E 85 F1 | 	sub	fp, #8
1e7dc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e7e0     14 4E 05 A1 |  if_e	add	fp, #20
1e7e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7e8     14 4E 85 A1 |  if_e	sub	fp, #20
1e7ec     16 2B 02 A6 |  if_e	mov	local03, local04
1e7f0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e7f4     38 00 90 5D |  if_ne	jmp	#LR__2413
1e7f8     00 26 06 F6 | 	mov	local01, #0
1e7fc     A7 28 02 FB | 	rdlong	local02, fp
1e800     0C 4E 05 F1 | 	add	fp, #12
1e804     A7 12 02 FB | 	rdlong	arg01, fp
1e808     0C 4E 85 F1 | 	sub	fp, #12
1e80c     60 AB B0 FD | 	call	#__system___float_fromuns
1e810     FD 14 02 F6 | 	mov	arg02, result1
1e814     14 13 02 F6 | 	mov	arg01, local02
1e818     01 16 66 F6 | 	neg	arg03, #1
1e81c     88 B3 B0 FD | 	call	#__system___float_cmp
1e820     01 FA 55 F2 | 	cmps	result1, #1 wc
1e824     00 26 26 36 |  if_ae	not	local01, #0
1e828     A7 26 62 FC | 	wrlong	local01, fp
1e82c     FC 02 90 FD | 	jmp	#LR__2423
1e830                 | LR__2413
1e830                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1e830     08 4E 05 F1 | 	add	fp, #8
1e834     A7 26 02 FB | 	rdlong	local01, fp
1e838     08 4E 85 F1 | 	sub	fp, #8
1e83c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e840     14 4E 05 A1 |  if_e	add	fp, #20
1e844     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e848     14 4E 85 A1 |  if_e	sub	fp, #20
1e84c     16 2B 02 A6 |  if_e	mov	local03, local04
1e850     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e854     44 00 90 5D |  if_ne	jmp	#LR__2414
1e858     00 26 06 F6 | 	mov	local01, #0
1e85c     A7 12 02 FB | 	rdlong	arg01, fp
1e860     09 13 52 F6 | 	abs	arg01, arg01 wc
1e864     1F 2E C6 C9 |  if_b	decod	local05, #31
1e868     00 2E 06 36 |  if_ae	mov	local05, #0
1e86c     00 AB B0 FD | 	call	#__system___float_fromuns
1e870     17 FB 61 F5 | 	xor	result1, local05
1e874     FD 12 02 F6 | 	mov	arg01, result1
1e878     0C 4E 05 F1 | 	add	fp, #12
1e87c     A7 14 02 FB | 	rdlong	arg02, fp
1e880     0C 4E 85 F1 | 	sub	fp, #12
1e884     01 16 66 F6 | 	neg	arg03, #1
1e888     1C B3 B0 FD | 	call	#__system___float_cmp
1e88c     01 FA 55 F2 | 	cmps	result1, #1 wc
1e890     00 26 26 36 |  if_ae	not	local01, #0
1e894     A7 26 62 FC | 	wrlong	local01, fp
1e898     90 02 90 FD | 	jmp	#LR__2423
1e89c                 | LR__2414
1e89c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1e89c     08 4E 05 F1 | 	add	fp, #8
1e8a0     A7 26 02 FB | 	rdlong	local01, fp
1e8a4     08 4E 85 F1 | 	sub	fp, #8
1e8a8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e8ac     14 4E 05 A1 |  if_e	add	fp, #20
1e8b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8b4     14 4E 85 A1 |  if_e	sub	fp, #20
1e8b8     16 2B 02 A6 |  if_e	mov	local03, local04
1e8bc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e8c0     24 00 90 5D |  if_ne	jmp	#LR__2415
1e8c4     00 26 06 F6 | 	mov	local01, #0
1e8c8     A7 28 02 FB | 	rdlong	local02, fp
1e8cc     0C 4E 05 F1 | 	add	fp, #12
1e8d0     A7 2A 02 FB | 	rdlong	local03, fp
1e8d4     0C 4E 85 F1 | 	sub	fp, #12
1e8d8     15 29 5A F2 | 	cmps	local02, local03 wcz
1e8dc     01 26 66 16 |  if_a	neg	local01, #1
1e8e0     A7 26 62 FC | 	wrlong	local01, fp
1e8e4     44 02 90 FD | 	jmp	#LR__2423
1e8e8                 | LR__2415
1e8e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1e8e8     08 4E 05 F1 | 	add	fp, #8
1e8ec     A7 26 02 FB | 	rdlong	local01, fp
1e8f0     08 4E 85 F1 | 	sub	fp, #8
1e8f4     1C 26 0E F2 | 	cmp	local01, #28 wz
1e8f8     14 4E 05 A1 |  if_e	add	fp, #20
1e8fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e900     14 4E 85 A1 |  if_e	sub	fp, #20
1e904     16 2B 02 A6 |  if_e	mov	local03, local04
1e908     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e90c     24 00 90 5D |  if_ne	jmp	#LR__2416
1e910     00 26 06 F6 | 	mov	local01, #0
1e914     A7 28 02 FB | 	rdlong	local02, fp
1e918     0C 4E 05 F1 | 	add	fp, #12
1e91c     A7 2A 02 FB | 	rdlong	local03, fp
1e920     0C 4E 85 F1 | 	sub	fp, #12
1e924     15 29 5A F2 | 	cmps	local02, local03 wcz
1e928     01 26 66 16 |  if_a	neg	local01, #1
1e92c     A7 26 62 FC | 	wrlong	local01, fp
1e930     F8 01 90 FD | 	jmp	#LR__2423
1e934                 | LR__2416
1e934                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1e934     08 4E 05 F1 | 	add	fp, #8
1e938     A7 26 02 FB | 	rdlong	local01, fp
1e93c     08 4E 85 F1 | 	sub	fp, #8
1e940     1D 26 0E F2 | 	cmp	local01, #29 wz
1e944     14 4E 05 A1 |  if_e	add	fp, #20
1e948     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e94c     14 4E 85 A1 |  if_e	sub	fp, #20
1e950     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e954     34 00 90 5D |  if_ne	jmp	#LR__2417
1e958     00 26 06 F6 | 	mov	local01, #0
1e95c     A7 12 02 FB | 	rdlong	arg01, fp
1e960     0C AA B0 FD | 	call	#__system___float_fromuns
1e964     FD 12 02 F6 | 	mov	arg01, result1
1e968     0C 4E 05 F1 | 	add	fp, #12
1e96c     A7 14 02 FB | 	rdlong	arg02, fp
1e970     0C 4E 85 F1 | 	sub	fp, #12
1e974     01 16 66 F6 | 	neg	arg03, #1
1e978     2C B2 B0 FD | 	call	#__system___float_cmp
1e97c     01 FA 55 F2 | 	cmps	result1, #1 wc
1e980     00 26 26 36 |  if_ae	not	local01, #0
1e984     A7 26 62 FC | 	wrlong	local01, fp
1e988     A0 01 90 FD | 	jmp	#LR__2423
1e98c                 | LR__2417
1e98c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1e98c     08 4E 05 F1 | 	add	fp, #8
1e990     A7 26 02 FB | 	rdlong	local01, fp
1e994     08 4E 85 F1 | 	sub	fp, #8
1e998     1D 26 0E F2 | 	cmp	local01, #29 wz
1e99c     14 4E 05 A1 |  if_e	add	fp, #20
1e9a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9a4     14 4E 85 A1 |  if_e	sub	fp, #20
1e9a8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e9ac     24 00 90 5D |  if_ne	jmp	#LR__2418
1e9b0     00 26 06 F6 | 	mov	local01, #0
1e9b4     A7 28 02 FB | 	rdlong	local02, fp
1e9b8     0C 4E 05 F1 | 	add	fp, #12
1e9bc     A7 2A 02 FB | 	rdlong	local03, fp
1e9c0     0C 4E 85 F1 | 	sub	fp, #12
1e9c4     15 29 5A F2 | 	cmps	local02, local03 wcz
1e9c8     01 26 66 16 |  if_a	neg	local01, #1
1e9cc     A7 26 62 FC | 	wrlong	local01, fp
1e9d0     58 01 90 FD | 	jmp	#LR__2423
1e9d4                 | LR__2418
1e9d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1e9d4     08 4E 05 F1 | 	add	fp, #8
1e9d8     A7 26 02 FB | 	rdlong	local01, fp
1e9dc     08 4E 85 F1 | 	sub	fp, #8
1e9e0     1D 26 0E F2 | 	cmp	local01, #29 wz
1e9e4     14 4E 05 A1 |  if_e	add	fp, #20
1e9e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9ec     14 4E 85 A1 |  if_e	sub	fp, #20
1e9f0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e9f4     24 00 90 5D |  if_ne	jmp	#LR__2419
1e9f8     00 26 06 F6 | 	mov	local01, #0
1e9fc     A7 28 02 FB | 	rdlong	local02, fp
1ea00     0C 4E 05 F1 | 	add	fp, #12
1ea04     A7 2A 02 FB | 	rdlong	local03, fp
1ea08     0C 4E 85 F1 | 	sub	fp, #12
1ea0c     15 29 1A F2 | 	cmp	local02, local03 wcz
1ea10     01 26 66 16 |  if_a	neg	local01, #1
1ea14     A7 26 62 FC | 	wrlong	local01, fp
1ea18     10 01 90 FD | 	jmp	#LR__2423
1ea1c                 | LR__2419
1ea1c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1ea1c     08 4E 05 F1 | 	add	fp, #8
1ea20     A7 26 02 FB | 	rdlong	local01, fp
1ea24     08 4E 85 F1 | 	sub	fp, #8
1ea28     2B 26 0E F2 | 	cmp	local01, #43 wz
1ea2c     14 4E 05 A1 |  if_e	add	fp, #20
1ea30     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea34     14 4E 85 A1 |  if_e	sub	fp, #20
1ea38     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ea3c     30 00 90 5D |  if_ne	jmp	#LR__2420
1ea40     00 26 06 F6 | 	mov	local01, #0
1ea44     A7 12 02 FB | 	rdlong	arg01, fp
1ea48     94 EC BE FD | 	call	#_convertstring
1ea4c     FD 12 02 F6 | 	mov	arg01, result1
1ea50     0C 4E 05 F1 | 	add	fp, #12
1ea54     A7 14 02 FB | 	rdlong	arg02, fp
1ea58     0C 4E 85 F1 | 	sub	fp, #12
1ea5c     C0 7E B0 FD | 	call	#__system___string_cmp
1ea60     01 FA 55 F2 | 	cmps	result1, #1 wc
1ea64     00 26 26 36 |  if_ae	not	local01, #0
1ea68     A7 26 62 FC | 	wrlong	local01, fp
1ea6c     BC 00 90 FD | 	jmp	#LR__2423
1ea70                 | LR__2420
1ea70                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1ea70     08 4E 05 F1 | 	add	fp, #8
1ea74     A7 26 02 FB | 	rdlong	local01, fp
1ea78     08 4E 85 F1 | 	sub	fp, #8
1ea7c     1F 26 0E F2 | 	cmp	local01, #31 wz
1ea80     14 4E 05 A1 |  if_e	add	fp, #20
1ea84     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea88     14 4E 85 A1 |  if_e	sub	fp, #20
1ea8c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ea90     34 00 90 5D |  if_ne	jmp	#LR__2421
1ea94     00 26 06 F6 | 	mov	local01, #0
1ea98     A7 28 02 FB | 	rdlong	local02, fp
1ea9c     0C 4E 05 F1 | 	add	fp, #12
1eaa0     A7 12 02 FB | 	rdlong	arg01, fp
1eaa4     0C 4E 85 F1 | 	sub	fp, #12
1eaa8     34 EC BE FD | 	call	#_convertstring
1eaac     FD 14 02 F6 | 	mov	arg02, result1
1eab0     14 13 02 F6 | 	mov	arg01, local02
1eab4     68 7E B0 FD | 	call	#__system___string_cmp
1eab8     01 FA 55 F2 | 	cmps	result1, #1 wc
1eabc     00 26 26 36 |  if_ae	not	local01, #0
1eac0     A7 26 62 FC | 	wrlong	local01, fp
1eac4     64 00 90 FD | 	jmp	#LR__2423
1eac8                 | LR__2421
1eac8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1eac8     08 4E 05 F1 | 	add	fp, #8
1eacc     A7 26 02 FB | 	rdlong	local01, fp
1ead0     08 4E 85 F1 | 	sub	fp, #8
1ead4     2B 26 0E F2 | 	cmp	local01, #43 wz
1ead8     14 4E 05 A1 |  if_e	add	fp, #20
1eadc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eae0     14 4E 85 A1 |  if_e	sub	fp, #20
1eae4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eae8     3C 00 90 5D |  if_ne	jmp	#LR__2422
1eaec     00 26 06 F6 | 	mov	local01, #0
1eaf0     A7 12 02 FB | 	rdlong	arg01, fp
1eaf4     E8 EB BE FD | 	call	#_convertstring
1eaf8     FD 28 02 F6 | 	mov	local02, result1
1eafc     0C 4E 05 F1 | 	add	fp, #12
1eb00     A7 12 02 FB | 	rdlong	arg01, fp
1eb04     0C 4E 85 F1 | 	sub	fp, #12
1eb08     D4 EB BE FD | 	call	#_convertstring
1eb0c     FD 14 02 F6 | 	mov	arg02, result1
1eb10     14 13 02 F6 | 	mov	arg01, local02
1eb14     08 7E B0 FD | 	call	#__system___string_cmp
1eb18     01 FA 55 F2 | 	cmps	result1, #1 wc
1eb1c     00 26 26 36 |  if_ae	not	local01, #0
1eb20     A7 26 62 FC | 	wrlong	local01, fp
1eb24     04 00 90 FD | 	jmp	#LR__2423
1eb28                 | LR__2422
1eb28     A7 00 68 FC | 	wrlong	#0, fp
1eb2c                 | LR__2423
1eb2c     08 4E 05 F1 | 	add	fp, #8
1eb30     A7 38 68 FC | 	wrlong	#28, fp
1eb34     08 4E 85 F1 | 	sub	fp, #8
1eb38                 | ' t1.result.uresult=0
1eb38                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1eb38     A7 26 0A FB | 	rdlong	local01, fp wz
1eb3c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1eb40     A7 12 02 F6 | 	mov	arg01, fp
1eb44     B8 EA BE FD | 	call	#_push
1eb48     A7 F0 03 F6 | 	mov	ptra, fp
1eb4c     B2 00 A0 FD | 	call	#popregs_
1eb50                 | _do_gt_ret
1eb50     2D 00 64 FD | 	ret
1eb54                 | 
1eb54                 | ' 
1eb54                 | ' '--------------------------------- less or equal (<=)
1eb54                 | ' 
1eb54                 | ' sub do_le
1eb54                 | _do_le
1eb54     05 4A 05 F6 | 	mov	COUNT_, #5
1eb58     A8 00 A0 FD | 	call	#pushregs_
1eb5c     18 F0 07 F1 | 	add	ptra, #24
1eb60     04 EA BE FD | 	call	#_pop
1eb64     FD 26 02 F6 | 	mov	local01, result1
1eb68     FE 28 02 F6 | 	mov	local02, result2
1eb6c     FF 2A 02 F6 | 	mov	local03, result3
1eb70     0C 4E 05 F1 | 	add	fp, #12
1eb74     A7 26 62 FC | 	wrlong	local01, fp
1eb78     04 4E 05 F1 | 	add	fp, #4
1eb7c     A7 28 62 FC | 	wrlong	local02, fp
1eb80     04 4E 05 F1 | 	add	fp, #4
1eb84     A7 2A 62 FC | 	wrlong	local03, fp
1eb88     14 4E 85 F1 | 	sub	fp, #20
1eb8c     D8 E9 BE FD | 	call	#_pop
1eb90     FF 2A 02 F6 | 	mov	local03, result3
1eb94     A7 FA 61 FC | 	wrlong	result1, fp
1eb98     04 4E 05 F1 | 	add	fp, #4
1eb9c     A7 FC 61 FC | 	wrlong	result2, fp
1eba0     04 4E 05 F1 | 	add	fp, #4
1eba4     A7 2A 62 FC | 	wrlong	local03, fp
1eba8                 | ' 
1eba8                 | ' t2=pop()
1eba8                 | ' t1=pop()
1eba8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1eba8     08 4E 85 F1 | 	sub	fp, #8
1ebac     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ebb0     14 4E 05 A1 |  if_e	add	fp, #20
1ebb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ebb8     14 4E 85 A1 |  if_e	sub	fp, #20
1ebbc     16 2B 02 A6 |  if_e	mov	local03, local04
1ebc0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ebc4     28 00 90 5D |  if_ne	jmp	#LR__2430
1ebc8     00 26 06 F6 | 	mov	local01, #0
1ebcc     A7 12 02 FB | 	rdlong	arg01, fp
1ebd0     0C 4E 05 F1 | 	add	fp, #12
1ebd4     A7 14 02 FB | 	rdlong	arg02, fp
1ebd8     0C 4E 85 F1 | 	sub	fp, #12
1ebdc     40 7D B0 FD | 	call	#__system___string_cmp
1ebe0     01 FA 55 F2 | 	cmps	result1, #1 wc
1ebe4     00 26 26 C6 |  if_b	not	local01, #0
1ebe8     A7 26 62 FC | 	wrlong	local01, fp
1ebec     20 04 90 FD | 	jmp	#LR__2443
1ebf0                 | LR__2430
1ebf0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1ebf0     08 4E 05 F1 | 	add	fp, #8
1ebf4     A7 26 02 FB | 	rdlong	local01, fp
1ebf8     08 4E 85 F1 | 	sub	fp, #8
1ebfc     1E 26 0E F2 | 	cmp	local01, #30 wz
1ec00     14 4E 05 A1 |  if_e	add	fp, #20
1ec04     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec08     14 4E 85 A1 |  if_e	sub	fp, #20
1ec0c     16 2B 02 A6 |  if_e	mov	local03, local04
1ec10     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ec14     2C 00 90 5D |  if_ne	jmp	#LR__2431
1ec18     00 26 06 F6 | 	mov	local01, #0
1ec1c     A7 12 02 FB | 	rdlong	arg01, fp
1ec20     0C 4E 05 F1 | 	add	fp, #12
1ec24     A7 14 02 FB | 	rdlong	arg02, fp
1ec28     0C 4E 85 F1 | 	sub	fp, #12
1ec2c     01 16 06 F6 | 	mov	arg03, #1
1ec30     74 AF B0 FD | 	call	#__system___float_cmp
1ec34     01 FA 55 F2 | 	cmps	result1, #1 wc
1ec38     00 26 26 C6 |  if_b	not	local01, #0
1ec3c     A7 26 62 FC | 	wrlong	local01, fp
1ec40     CC 03 90 FD | 	jmp	#LR__2443
1ec44                 | LR__2431
1ec44                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1ec44     08 4E 05 F1 | 	add	fp, #8
1ec48     A7 26 02 FB | 	rdlong	local01, fp
1ec4c     08 4E 85 F1 | 	sub	fp, #8
1ec50     1E 26 0E F2 | 	cmp	local01, #30 wz
1ec54     14 4E 05 A1 |  if_e	add	fp, #20
1ec58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec5c     14 4E 85 A1 |  if_e	sub	fp, #20
1ec60     16 2B 02 A6 |  if_e	mov	local03, local04
1ec64     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ec68     48 00 90 5D |  if_ne	jmp	#LR__2432
1ec6c     00 26 06 F6 | 	mov	local01, #0
1ec70     A7 28 02 FB | 	rdlong	local02, fp
1ec74     0C 4E 05 F1 | 	add	fp, #12
1ec78     A7 12 02 FB | 	rdlong	arg01, fp
1ec7c     0C 4E 85 F1 | 	sub	fp, #12
1ec80     09 13 52 F6 | 	abs	arg01, arg01 wc
1ec84     1F 2E C6 C9 |  if_b	decod	local05, #31
1ec88     00 2E 06 36 |  if_ae	mov	local05, #0
1ec8c     E0 A6 B0 FD | 	call	#__system___float_fromuns
1ec90     17 FB 61 F5 | 	xor	result1, local05
1ec94     FD 14 02 F6 | 	mov	arg02, result1
1ec98     14 13 02 F6 | 	mov	arg01, local02
1ec9c     01 16 06 F6 | 	mov	arg03, #1
1eca0     04 AF B0 FD | 	call	#__system___float_cmp
1eca4     01 FA 55 F2 | 	cmps	result1, #1 wc
1eca8     00 26 26 C6 |  if_b	not	local01, #0
1ecac     A7 26 62 FC | 	wrlong	local01, fp
1ecb0     5C 03 90 FD | 	jmp	#LR__2443
1ecb4                 | LR__2432
1ecb4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1ecb4     08 4E 05 F1 | 	add	fp, #8
1ecb8     A7 26 02 FB | 	rdlong	local01, fp
1ecbc     08 4E 85 F1 | 	sub	fp, #8
1ecc0     1E 26 0E F2 | 	cmp	local01, #30 wz
1ecc4     14 4E 05 A1 |  if_e	add	fp, #20
1ecc8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eccc     14 4E 85 A1 |  if_e	sub	fp, #20
1ecd0     16 2B 02 A6 |  if_e	mov	local03, local04
1ecd4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ecd8     38 00 90 5D |  if_ne	jmp	#LR__2433
1ecdc     00 26 06 F6 | 	mov	local01, #0
1ece0     A7 28 02 FB | 	rdlong	local02, fp
1ece4     0C 4E 05 F1 | 	add	fp, #12
1ece8     A7 12 02 FB | 	rdlong	arg01, fp
1ecec     0C 4E 85 F1 | 	sub	fp, #12
1ecf0     7C A6 B0 FD | 	call	#__system___float_fromuns
1ecf4     FD 14 02 F6 | 	mov	arg02, result1
1ecf8     14 13 02 F6 | 	mov	arg01, local02
1ecfc     01 16 06 F6 | 	mov	arg03, #1
1ed00     A4 AE B0 FD | 	call	#__system___float_cmp
1ed04     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed08     00 26 26 C6 |  if_b	not	local01, #0
1ed0c     A7 26 62 FC | 	wrlong	local01, fp
1ed10     FC 02 90 FD | 	jmp	#LR__2443
1ed14                 | LR__2433
1ed14                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1ed14     08 4E 05 F1 | 	add	fp, #8
1ed18     A7 26 02 FB | 	rdlong	local01, fp
1ed1c     08 4E 85 F1 | 	sub	fp, #8
1ed20     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed24     14 4E 05 A1 |  if_e	add	fp, #20
1ed28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed2c     14 4E 85 A1 |  if_e	sub	fp, #20
1ed30     16 2B 02 A6 |  if_e	mov	local03, local04
1ed34     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ed38     44 00 90 5D |  if_ne	jmp	#LR__2434
1ed3c     00 26 06 F6 | 	mov	local01, #0
1ed40     A7 12 02 FB | 	rdlong	arg01, fp
1ed44     09 13 52 F6 | 	abs	arg01, arg01 wc
1ed48     1F 2E C6 C9 |  if_b	decod	local05, #31
1ed4c     00 2E 06 36 |  if_ae	mov	local05, #0
1ed50     1C A6 B0 FD | 	call	#__system___float_fromuns
1ed54     17 FB 61 F5 | 	xor	result1, local05
1ed58     FD 12 02 F6 | 	mov	arg01, result1
1ed5c     0C 4E 05 F1 | 	add	fp, #12
1ed60     A7 14 02 FB | 	rdlong	arg02, fp
1ed64     0C 4E 85 F1 | 	sub	fp, #12
1ed68     01 16 06 F6 | 	mov	arg03, #1
1ed6c     38 AE B0 FD | 	call	#__system___float_cmp
1ed70     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed74     00 26 26 C6 |  if_b	not	local01, #0
1ed78     A7 26 62 FC | 	wrlong	local01, fp
1ed7c     90 02 90 FD | 	jmp	#LR__2443
1ed80                 | LR__2434
1ed80                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1ed80     08 4E 05 F1 | 	add	fp, #8
1ed84     A7 26 02 FB | 	rdlong	local01, fp
1ed88     08 4E 85 F1 | 	sub	fp, #8
1ed8c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed90     14 4E 05 A1 |  if_e	add	fp, #20
1ed94     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed98     14 4E 85 A1 |  if_e	sub	fp, #20
1ed9c     16 2B 02 A6 |  if_e	mov	local03, local04
1eda0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eda4     24 00 90 5D |  if_ne	jmp	#LR__2435
1eda8     00 26 06 F6 | 	mov	local01, #0
1edac     A7 28 02 FB | 	rdlong	local02, fp
1edb0     0C 4E 05 F1 | 	add	fp, #12
1edb4     A7 2A 02 FB | 	rdlong	local03, fp
1edb8     0C 4E 85 F1 | 	sub	fp, #12
1edbc     15 29 5A F2 | 	cmps	local02, local03 wcz
1edc0     01 26 66 E6 |  if_be	neg	local01, #1
1edc4     A7 26 62 FC | 	wrlong	local01, fp
1edc8     44 02 90 FD | 	jmp	#LR__2443
1edcc                 | LR__2435
1edcc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1edcc     08 4E 05 F1 | 	add	fp, #8
1edd0     A7 26 02 FB | 	rdlong	local01, fp
1edd4     08 4E 85 F1 | 	sub	fp, #8
1edd8     1C 26 0E F2 | 	cmp	local01, #28 wz
1eddc     14 4E 05 A1 |  if_e	add	fp, #20
1ede0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ede4     14 4E 85 A1 |  if_e	sub	fp, #20
1ede8     16 2B 02 A6 |  if_e	mov	local03, local04
1edec     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1edf0     24 00 90 5D |  if_ne	jmp	#LR__2436
1edf4     00 26 06 F6 | 	mov	local01, #0
1edf8     A7 28 02 FB | 	rdlong	local02, fp
1edfc     0C 4E 05 F1 | 	add	fp, #12
1ee00     A7 2A 02 FB | 	rdlong	local03, fp
1ee04     0C 4E 85 F1 | 	sub	fp, #12
1ee08     15 29 5A F2 | 	cmps	local02, local03 wcz
1ee0c     01 26 66 E6 |  if_be	neg	local01, #1
1ee10     A7 26 62 FC | 	wrlong	local01, fp
1ee14     F8 01 90 FD | 	jmp	#LR__2443
1ee18                 | LR__2436
1ee18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1ee18     08 4E 05 F1 | 	add	fp, #8
1ee1c     A7 26 02 FB | 	rdlong	local01, fp
1ee20     08 4E 85 F1 | 	sub	fp, #8
1ee24     1D 26 0E F2 | 	cmp	local01, #29 wz
1ee28     14 4E 05 A1 |  if_e	add	fp, #20
1ee2c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee30     14 4E 85 A1 |  if_e	sub	fp, #20
1ee34     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ee38     34 00 90 5D |  if_ne	jmp	#LR__2437
1ee3c     00 26 06 F6 | 	mov	local01, #0
1ee40     A7 12 02 FB | 	rdlong	arg01, fp
1ee44     28 A5 B0 FD | 	call	#__system___float_fromuns
1ee48     FD 12 02 F6 | 	mov	arg01, result1
1ee4c     0C 4E 05 F1 | 	add	fp, #12
1ee50     A7 14 02 FB | 	rdlong	arg02, fp
1ee54     0C 4E 85 F1 | 	sub	fp, #12
1ee58     01 16 06 F6 | 	mov	arg03, #1
1ee5c     48 AD B0 FD | 	call	#__system___float_cmp
1ee60     01 FA 55 F2 | 	cmps	result1, #1 wc
1ee64     00 26 26 C6 |  if_b	not	local01, #0
1ee68     A7 26 62 FC | 	wrlong	local01, fp
1ee6c     A0 01 90 FD | 	jmp	#LR__2443
1ee70                 | LR__2437
1ee70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1ee70     08 4E 05 F1 | 	add	fp, #8
1ee74     A7 26 02 FB | 	rdlong	local01, fp
1ee78     08 4E 85 F1 | 	sub	fp, #8
1ee7c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ee80     14 4E 05 A1 |  if_e	add	fp, #20
1ee84     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee88     14 4E 85 A1 |  if_e	sub	fp, #20
1ee8c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ee90     24 00 90 5D |  if_ne	jmp	#LR__2438
1ee94     00 26 06 F6 | 	mov	local01, #0
1ee98     A7 28 02 FB | 	rdlong	local02, fp
1ee9c     0C 4E 05 F1 | 	add	fp, #12
1eea0     A7 2A 02 FB | 	rdlong	local03, fp
1eea4     0C 4E 85 F1 | 	sub	fp, #12
1eea8     15 29 5A F2 | 	cmps	local02, local03 wcz
1eeac     01 26 66 E6 |  if_be	neg	local01, #1
1eeb0     A7 26 62 FC | 	wrlong	local01, fp
1eeb4     58 01 90 FD | 	jmp	#LR__2443
1eeb8                 | LR__2438
1eeb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1eeb8     08 4E 05 F1 | 	add	fp, #8
1eebc     A7 26 02 FB | 	rdlong	local01, fp
1eec0     08 4E 85 F1 | 	sub	fp, #8
1eec4     1D 26 0E F2 | 	cmp	local01, #29 wz
1eec8     14 4E 05 A1 |  if_e	add	fp, #20
1eecc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eed0     14 4E 85 A1 |  if_e	sub	fp, #20
1eed4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eed8     24 00 90 5D |  if_ne	jmp	#LR__2439
1eedc     00 26 06 F6 | 	mov	local01, #0
1eee0     A7 28 02 FB | 	rdlong	local02, fp
1eee4     0C 4E 05 F1 | 	add	fp, #12
1eee8     A7 2A 02 FB | 	rdlong	local03, fp
1eeec     0C 4E 85 F1 | 	sub	fp, #12
1eef0     15 29 1A F2 | 	cmp	local02, local03 wcz
1eef4     01 26 66 E6 |  if_be	neg	local01, #1
1eef8     A7 26 62 FC | 	wrlong	local01, fp
1eefc     10 01 90 FD | 	jmp	#LR__2443
1ef00                 | LR__2439
1ef00                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1ef00     08 4E 05 F1 | 	add	fp, #8
1ef04     A7 26 02 FB | 	rdlong	local01, fp
1ef08     08 4E 85 F1 | 	sub	fp, #8
1ef0c     2B 26 0E F2 | 	cmp	local01, #43 wz
1ef10     14 4E 05 A1 |  if_e	add	fp, #20
1ef14     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef18     14 4E 85 A1 |  if_e	sub	fp, #20
1ef1c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ef20     30 00 90 5D |  if_ne	jmp	#LR__2440
1ef24     00 26 06 F6 | 	mov	local01, #0
1ef28     A7 12 02 FB | 	rdlong	arg01, fp
1ef2c     B0 E7 BE FD | 	call	#_convertstring
1ef30     FD 12 02 F6 | 	mov	arg01, result1
1ef34     0C 4E 05 F1 | 	add	fp, #12
1ef38     A7 14 02 FB | 	rdlong	arg02, fp
1ef3c     0C 4E 85 F1 | 	sub	fp, #12
1ef40     DC 79 B0 FD | 	call	#__system___string_cmp
1ef44     01 FA 55 F2 | 	cmps	result1, #1 wc
1ef48     00 26 26 C6 |  if_b	not	local01, #0
1ef4c     A7 26 62 FC | 	wrlong	local01, fp
1ef50     BC 00 90 FD | 	jmp	#LR__2443
1ef54                 | LR__2440
1ef54                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1ef54     08 4E 05 F1 | 	add	fp, #8
1ef58     A7 26 02 FB | 	rdlong	local01, fp
1ef5c     08 4E 85 F1 | 	sub	fp, #8
1ef60     1F 26 0E F2 | 	cmp	local01, #31 wz
1ef64     14 4E 05 A1 |  if_e	add	fp, #20
1ef68     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef6c     14 4E 85 A1 |  if_e	sub	fp, #20
1ef70     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ef74     34 00 90 5D |  if_ne	jmp	#LR__2441
1ef78     00 26 06 F6 | 	mov	local01, #0
1ef7c     A7 28 02 FB | 	rdlong	local02, fp
1ef80     0C 4E 05 F1 | 	add	fp, #12
1ef84     A7 12 02 FB | 	rdlong	arg01, fp
1ef88     0C 4E 85 F1 | 	sub	fp, #12
1ef8c     50 E7 BE FD | 	call	#_convertstring
1ef90     FD 14 02 F6 | 	mov	arg02, result1
1ef94     14 13 02 F6 | 	mov	arg01, local02
1ef98     84 79 B0 FD | 	call	#__system___string_cmp
1ef9c     01 FA 55 F2 | 	cmps	result1, #1 wc
1efa0     00 26 26 C6 |  if_b	not	local01, #0
1efa4     A7 26 62 FC | 	wrlong	local01, fp
1efa8     64 00 90 FD | 	jmp	#LR__2443
1efac                 | LR__2441
1efac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1efac     08 4E 05 F1 | 	add	fp, #8
1efb0     A7 26 02 FB | 	rdlong	local01, fp
1efb4     08 4E 85 F1 | 	sub	fp, #8
1efb8     2B 26 0E F2 | 	cmp	local01, #43 wz
1efbc     14 4E 05 A1 |  if_e	add	fp, #20
1efc0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efc4     14 4E 85 A1 |  if_e	sub	fp, #20
1efc8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1efcc     3C 00 90 5D |  if_ne	jmp	#LR__2442
1efd0     00 26 06 F6 | 	mov	local01, #0
1efd4     A7 12 02 FB | 	rdlong	arg01, fp
1efd8     04 E7 BE FD | 	call	#_convertstring
1efdc     FD 28 02 F6 | 	mov	local02, result1
1efe0     0C 4E 05 F1 | 	add	fp, #12
1efe4     A7 12 02 FB | 	rdlong	arg01, fp
1efe8     0C 4E 85 F1 | 	sub	fp, #12
1efec     F0 E6 BE FD | 	call	#_convertstring
1eff0     FD 14 02 F6 | 	mov	arg02, result1
1eff4     14 13 02 F6 | 	mov	arg01, local02
1eff8     24 79 B0 FD | 	call	#__system___string_cmp
1effc     01 FA 55 F2 | 	cmps	result1, #1 wc
1f000     00 26 26 C6 |  if_b	not	local01, #0
1f004     A7 26 62 FC | 	wrlong	local01, fp
1f008     04 00 90 FD | 	jmp	#LR__2443
1f00c                 | LR__2442
1f00c     A7 00 68 FC | 	wrlong	#0, fp
1f010                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f010                 | LR__2443
1f010     08 4E 05 F1 | 	add	fp, #8
1f014     A7 38 68 FC | 	wrlong	#28, fp
1f018     08 4E 85 F1 | 	sub	fp, #8
1f01c     A7 12 02 F6 | 	mov	arg01, fp
1f020     DC E5 BE FD | 	call	#_push
1f024     A7 F0 03 F6 | 	mov	ptra, fp
1f028     B2 00 A0 FD | 	call	#popregs_
1f02c                 | _do_le_ret
1f02c     2D 00 64 FD | 	ret
1f030                 | 
1f030                 | ' 
1f030                 | ' '--------------------------------- less than (<)
1f030                 | ' 
1f030                 | ' sub do_lt
1f030                 | _do_lt
1f030     05 4A 05 F6 | 	mov	COUNT_, #5
1f034     A8 00 A0 FD | 	call	#pushregs_
1f038     18 F0 07 F1 | 	add	ptra, #24
1f03c     28 E5 BE FD | 	call	#_pop
1f040     FD 26 02 F6 | 	mov	local01, result1
1f044     FE 28 02 F6 | 	mov	local02, result2
1f048     FF 2A 02 F6 | 	mov	local03, result3
1f04c     0C 4E 05 F1 | 	add	fp, #12
1f050     A7 26 62 FC | 	wrlong	local01, fp
1f054     04 4E 05 F1 | 	add	fp, #4
1f058     A7 28 62 FC | 	wrlong	local02, fp
1f05c     04 4E 05 F1 | 	add	fp, #4
1f060     A7 2A 62 FC | 	wrlong	local03, fp
1f064     14 4E 85 F1 | 	sub	fp, #20
1f068     FC E4 BE FD | 	call	#_pop
1f06c     FF 2A 02 F6 | 	mov	local03, result3
1f070     A7 FA 61 FC | 	wrlong	result1, fp
1f074     04 4E 05 F1 | 	add	fp, #4
1f078     A7 FC 61 FC | 	wrlong	result2, fp
1f07c     04 4E 05 F1 | 	add	fp, #4
1f080     A7 2A 62 FC | 	wrlong	local03, fp
1f084                 | ' 
1f084                 | ' t2=pop()
1f084                 | ' t1=pop()
1f084                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1f084     08 4E 85 F1 | 	sub	fp, #8
1f088     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f08c     14 4E 05 A1 |  if_e	add	fp, #20
1f090     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f094     14 4E 85 A1 |  if_e	sub	fp, #20
1f098     16 2B 02 A6 |  if_e	mov	local03, local04
1f09c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f0a0     28 00 90 5D |  if_ne	jmp	#LR__2450
1f0a4     00 26 06 F6 | 	mov	local01, #0
1f0a8     A7 12 02 FB | 	rdlong	arg01, fp
1f0ac     0C 4E 05 F1 | 	add	fp, #12
1f0b0     A7 14 02 FB | 	rdlong	arg02, fp
1f0b4     0C 4E 85 F1 | 	sub	fp, #12
1f0b8     64 78 B0 FD | 	call	#__system___string_cmp
1f0bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1f0c0     00 26 26 C6 |  if_b	not	local01, #0
1f0c4     A7 26 62 FC | 	wrlong	local01, fp
1f0c8     10 04 90 FD | 	jmp	#LR__2463
1f0cc                 | LR__2450
1f0cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1f0cc     08 4E 05 F1 | 	add	fp, #8
1f0d0     A7 26 02 FB | 	rdlong	local01, fp
1f0d4     08 4E 85 F1 | 	sub	fp, #8
1f0d8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f0dc     14 4E 05 A1 |  if_e	add	fp, #20
1f0e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f0e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f0e8     16 2B 02 A6 |  if_e	mov	local03, local04
1f0ec     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f0f0     2C 00 90 5D |  if_ne	jmp	#LR__2451
1f0f4     00 26 06 F6 | 	mov	local01, #0
1f0f8     A7 12 02 FB | 	rdlong	arg01, fp
1f0fc     0C 4E 05 F1 | 	add	fp, #12
1f100     A7 14 02 FB | 	rdlong	arg02, fp
1f104     0C 4E 85 F1 | 	sub	fp, #12
1f108     01 16 06 F6 | 	mov	arg03, #1
1f10c     98 AA B0 FD | 	call	#__system___float_cmp
1f110     00 FA 55 F2 | 	cmps	result1, #0 wc
1f114     00 26 26 C6 |  if_b	not	local01, #0
1f118     A7 26 62 FC | 	wrlong	local01, fp
1f11c     BC 03 90 FD | 	jmp	#LR__2463
1f120                 | LR__2451
1f120                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1f120     08 4E 05 F1 | 	add	fp, #8
1f124     A7 26 02 FB | 	rdlong	local01, fp
1f128     08 4E 85 F1 | 	sub	fp, #8
1f12c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f130     14 4E 05 A1 |  if_e	add	fp, #20
1f134     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f138     14 4E 85 A1 |  if_e	sub	fp, #20
1f13c     16 2B 02 A6 |  if_e	mov	local03, local04
1f140     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f144     48 00 90 5D |  if_ne	jmp	#LR__2452
1f148     00 26 06 F6 | 	mov	local01, #0
1f14c     A7 28 02 FB | 	rdlong	local02, fp
1f150     0C 4E 05 F1 | 	add	fp, #12
1f154     A7 12 02 FB | 	rdlong	arg01, fp
1f158     0C 4E 85 F1 | 	sub	fp, #12
1f15c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f160     1F 2E C6 C9 |  if_b	decod	local05, #31
1f164     00 2E 06 36 |  if_ae	mov	local05, #0
1f168     04 A2 B0 FD | 	call	#__system___float_fromuns
1f16c     17 FB 61 F5 | 	xor	result1, local05
1f170     FD 14 02 F6 | 	mov	arg02, result1
1f174     14 13 02 F6 | 	mov	arg01, local02
1f178     01 16 06 F6 | 	mov	arg03, #1
1f17c     28 AA B0 FD | 	call	#__system___float_cmp
1f180     00 FA 55 F2 | 	cmps	result1, #0 wc
1f184     00 26 26 C6 |  if_b	not	local01, #0
1f188     A7 26 62 FC | 	wrlong	local01, fp
1f18c     4C 03 90 FD | 	jmp	#LR__2463
1f190                 | LR__2452
1f190                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1f190     08 4E 05 F1 | 	add	fp, #8
1f194     A7 26 02 FB | 	rdlong	local01, fp
1f198     08 4E 85 F1 | 	sub	fp, #8
1f19c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f1a0     14 4E 05 A1 |  if_e	add	fp, #20
1f1a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1a8     14 4E 85 A1 |  if_e	sub	fp, #20
1f1ac     16 2B 02 A6 |  if_e	mov	local03, local04
1f1b0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f1b4     38 00 90 5D |  if_ne	jmp	#LR__2453
1f1b8     00 26 06 F6 | 	mov	local01, #0
1f1bc     A7 28 02 FB | 	rdlong	local02, fp
1f1c0     0C 4E 05 F1 | 	add	fp, #12
1f1c4     A7 12 02 FB | 	rdlong	arg01, fp
1f1c8     0C 4E 85 F1 | 	sub	fp, #12
1f1cc     A0 A1 B0 FD | 	call	#__system___float_fromuns
1f1d0     FD 14 02 F6 | 	mov	arg02, result1
1f1d4     14 13 02 F6 | 	mov	arg01, local02
1f1d8     01 16 06 F6 | 	mov	arg03, #1
1f1dc     C8 A9 B0 FD | 	call	#__system___float_cmp
1f1e0     00 FA 55 F2 | 	cmps	result1, #0 wc
1f1e4     00 26 26 C6 |  if_b	not	local01, #0
1f1e8     A7 26 62 FC | 	wrlong	local01, fp
1f1ec     EC 02 90 FD | 	jmp	#LR__2463
1f1f0                 | LR__2453
1f1f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1f1f0     08 4E 05 F1 | 	add	fp, #8
1f1f4     A7 26 02 FB | 	rdlong	local01, fp
1f1f8     08 4E 85 F1 | 	sub	fp, #8
1f1fc     1C 26 0E F2 | 	cmp	local01, #28 wz
1f200     14 4E 05 A1 |  if_e	add	fp, #20
1f204     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f208     14 4E 85 A1 |  if_e	sub	fp, #20
1f20c     16 2B 02 A6 |  if_e	mov	local03, local04
1f210     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f214     44 00 90 5D |  if_ne	jmp	#LR__2454
1f218     00 26 06 F6 | 	mov	local01, #0
1f21c     A7 12 02 FB | 	rdlong	arg01, fp
1f220     09 13 52 F6 | 	abs	arg01, arg01 wc
1f224     1F 2E C6 C9 |  if_b	decod	local05, #31
1f228     00 2E 06 36 |  if_ae	mov	local05, #0
1f22c     40 A1 B0 FD | 	call	#__system___float_fromuns
1f230     17 FB 61 F5 | 	xor	result1, local05
1f234     FD 12 02 F6 | 	mov	arg01, result1
1f238     0C 4E 05 F1 | 	add	fp, #12
1f23c     A7 14 02 FB | 	rdlong	arg02, fp
1f240     0C 4E 85 F1 | 	sub	fp, #12
1f244     01 16 06 F6 | 	mov	arg03, #1
1f248     5C A9 B0 FD | 	call	#__system___float_cmp
1f24c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f250     00 26 26 C6 |  if_b	not	local01, #0
1f254     A7 26 62 FC | 	wrlong	local01, fp
1f258     80 02 90 FD | 	jmp	#LR__2463
1f25c                 | LR__2454
1f25c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1f25c     08 4E 05 F1 | 	add	fp, #8
1f260     A7 26 02 FB | 	rdlong	local01, fp
1f264     08 4E 85 F1 | 	sub	fp, #8
1f268     1C 26 0E F2 | 	cmp	local01, #28 wz
1f26c     14 4E 05 A1 |  if_e	add	fp, #20
1f270     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f274     14 4E 85 A1 |  if_e	sub	fp, #20
1f278     16 2B 02 A6 |  if_e	mov	local03, local04
1f27c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f280     20 00 90 5D |  if_ne	jmp	#LR__2455
1f284     A7 28 02 FB | 	rdlong	local02, fp
1f288     0C 4E 05 F1 | 	add	fp, #12
1f28c     A7 2A 02 FB | 	rdlong	local03, fp
1f290     0C 4E 85 F1 | 	sub	fp, #12
1f294     15 29 52 F2 | 	cmps	local02, local03 wc
1f298     13 27 A2 F1 | 	subx	local01, local01
1f29c     A7 26 62 FC | 	wrlong	local01, fp
1f2a0     38 02 90 FD | 	jmp	#LR__2463
1f2a4                 | LR__2455
1f2a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1f2a4     08 4E 05 F1 | 	add	fp, #8
1f2a8     A7 26 02 FB | 	rdlong	local01, fp
1f2ac     08 4E 85 F1 | 	sub	fp, #8
1f2b0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f2b4     14 4E 05 A1 |  if_e	add	fp, #20
1f2b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2bc     14 4E 85 A1 |  if_e	sub	fp, #20
1f2c0     16 2B 02 A6 |  if_e	mov	local03, local04
1f2c4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f2c8     20 00 90 5D |  if_ne	jmp	#LR__2456
1f2cc     A7 28 02 FB | 	rdlong	local02, fp
1f2d0     0C 4E 05 F1 | 	add	fp, #12
1f2d4     A7 2A 02 FB | 	rdlong	local03, fp
1f2d8     0C 4E 85 F1 | 	sub	fp, #12
1f2dc     15 29 52 F2 | 	cmps	local02, local03 wc
1f2e0     13 27 A2 F1 | 	subx	local01, local01
1f2e4     A7 26 62 FC | 	wrlong	local01, fp
1f2e8     F0 01 90 FD | 	jmp	#LR__2463
1f2ec                 | LR__2456
1f2ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1f2ec     08 4E 05 F1 | 	add	fp, #8
1f2f0     A7 26 02 FB | 	rdlong	local01, fp
1f2f4     08 4E 85 F1 | 	sub	fp, #8
1f2f8     1D 26 0E F2 | 	cmp	local01, #29 wz
1f2fc     14 4E 05 A1 |  if_e	add	fp, #20
1f300     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f304     14 4E 85 A1 |  if_e	sub	fp, #20
1f308     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f30c     34 00 90 5D |  if_ne	jmp	#LR__2457
1f310     00 26 06 F6 | 	mov	local01, #0
1f314     A7 12 02 FB | 	rdlong	arg01, fp
1f318     54 A0 B0 FD | 	call	#__system___float_fromuns
1f31c     FD 12 02 F6 | 	mov	arg01, result1
1f320     0C 4E 05 F1 | 	add	fp, #12
1f324     A7 14 02 FB | 	rdlong	arg02, fp
1f328     0C 4E 85 F1 | 	sub	fp, #12
1f32c     01 16 06 F6 | 	mov	arg03, #1
1f330     74 A8 B0 FD | 	call	#__system___float_cmp
1f334     00 FA 55 F2 | 	cmps	result1, #0 wc
1f338     00 26 26 C6 |  if_b	not	local01, #0
1f33c     A7 26 62 FC | 	wrlong	local01, fp
1f340     98 01 90 FD | 	jmp	#LR__2463
1f344                 | LR__2457
1f344                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1f344     08 4E 05 F1 | 	add	fp, #8
1f348     A7 26 02 FB | 	rdlong	local01, fp
1f34c     08 4E 85 F1 | 	sub	fp, #8
1f350     1D 26 0E F2 | 	cmp	local01, #29 wz
1f354     14 4E 05 A1 |  if_e	add	fp, #20
1f358     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f35c     14 4E 85 A1 |  if_e	sub	fp, #20
1f360     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f364     20 00 90 5D |  if_ne	jmp	#LR__2458
1f368     A7 28 02 FB | 	rdlong	local02, fp
1f36c     0C 4E 05 F1 | 	add	fp, #12
1f370     A7 2A 02 FB | 	rdlong	local03, fp
1f374     0C 4E 85 F1 | 	sub	fp, #12
1f378     15 29 52 F2 | 	cmps	local02, local03 wc
1f37c     13 27 A2 F1 | 	subx	local01, local01
1f380     A7 26 62 FC | 	wrlong	local01, fp
1f384     54 01 90 FD | 	jmp	#LR__2463
1f388                 | LR__2458
1f388                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1f388     08 4E 05 F1 | 	add	fp, #8
1f38c     A7 26 02 FB | 	rdlong	local01, fp
1f390     08 4E 85 F1 | 	sub	fp, #8
1f394     1D 26 0E F2 | 	cmp	local01, #29 wz
1f398     14 4E 05 A1 |  if_e	add	fp, #20
1f39c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f3a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f3a4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f3a8     20 00 90 5D |  if_ne	jmp	#LR__2459
1f3ac     A7 28 02 FB | 	rdlong	local02, fp
1f3b0     0C 4E 05 F1 | 	add	fp, #12
1f3b4     A7 2A 02 FB | 	rdlong	local03, fp
1f3b8     0C 4E 85 F1 | 	sub	fp, #12
1f3bc     15 29 12 F2 | 	cmp	local02, local03 wc
1f3c0     13 27 A2 F1 | 	subx	local01, local01
1f3c4     A7 26 62 FC | 	wrlong	local01, fp
1f3c8     10 01 90 FD | 	jmp	#LR__2463
1f3cc                 | LR__2459
1f3cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1f3cc     08 4E 05 F1 | 	add	fp, #8
1f3d0     A7 26 02 FB | 	rdlong	local01, fp
1f3d4     08 4E 85 F1 | 	sub	fp, #8
1f3d8     2B 26 0E F2 | 	cmp	local01, #43 wz
1f3dc     14 4E 05 A1 |  if_e	add	fp, #20
1f3e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f3e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f3e8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f3ec     30 00 90 5D |  if_ne	jmp	#LR__2460
1f3f0     00 26 06 F6 | 	mov	local01, #0
1f3f4     A7 12 02 FB | 	rdlong	arg01, fp
1f3f8     E4 E2 BE FD | 	call	#_convertstring
1f3fc     FD 12 02 F6 | 	mov	arg01, result1
1f400     0C 4E 05 F1 | 	add	fp, #12
1f404     A7 14 02 FB | 	rdlong	arg02, fp
1f408     0C 4E 85 F1 | 	sub	fp, #12
1f40c     10 75 B0 FD | 	call	#__system___string_cmp
1f410     00 FA 55 F2 | 	cmps	result1, #0 wc
1f414     00 26 26 C6 |  if_b	not	local01, #0
1f418     A7 26 62 FC | 	wrlong	local01, fp
1f41c     BC 00 90 FD | 	jmp	#LR__2463
1f420                 | LR__2460
1f420                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1f420     08 4E 05 F1 | 	add	fp, #8
1f424     A7 26 02 FB | 	rdlong	local01, fp
1f428     08 4E 85 F1 | 	sub	fp, #8
1f42c     1F 26 0E F2 | 	cmp	local01, #31 wz
1f430     14 4E 05 A1 |  if_e	add	fp, #20
1f434     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f438     14 4E 85 A1 |  if_e	sub	fp, #20
1f43c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f440     34 00 90 5D |  if_ne	jmp	#LR__2461
1f444     00 26 06 F6 | 	mov	local01, #0
1f448     A7 28 02 FB | 	rdlong	local02, fp
1f44c     0C 4E 05 F1 | 	add	fp, #12
1f450     A7 12 02 FB | 	rdlong	arg01, fp
1f454     0C 4E 85 F1 | 	sub	fp, #12
1f458     84 E2 BE FD | 	call	#_convertstring
1f45c     FD 14 02 F6 | 	mov	arg02, result1
1f460     14 13 02 F6 | 	mov	arg01, local02
1f464     B8 74 B0 FD | 	call	#__system___string_cmp
1f468     00 FA 55 F2 | 	cmps	result1, #0 wc
1f46c     00 26 26 C6 |  if_b	not	local01, #0
1f470     A7 26 62 FC | 	wrlong	local01, fp
1f474     64 00 90 FD | 	jmp	#LR__2463
1f478                 | LR__2461
1f478                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1f478     08 4E 05 F1 | 	add	fp, #8
1f47c     A7 26 02 FB | 	rdlong	local01, fp
1f480     08 4E 85 F1 | 	sub	fp, #8
1f484     2B 26 0E F2 | 	cmp	local01, #43 wz
1f488     14 4E 05 A1 |  if_e	add	fp, #20
1f48c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f490     14 4E 85 A1 |  if_e	sub	fp, #20
1f494     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f498     3C 00 90 5D |  if_ne	jmp	#LR__2462
1f49c     00 26 06 F6 | 	mov	local01, #0
1f4a0     A7 12 02 FB | 	rdlong	arg01, fp
1f4a4     38 E2 BE FD | 	call	#_convertstring
1f4a8     FD 28 02 F6 | 	mov	local02, result1
1f4ac     0C 4E 05 F1 | 	add	fp, #12
1f4b0     A7 12 02 FB | 	rdlong	arg01, fp
1f4b4     0C 4E 85 F1 | 	sub	fp, #12
1f4b8     24 E2 BE FD | 	call	#_convertstring
1f4bc     FD 14 02 F6 | 	mov	arg02, result1
1f4c0     14 13 02 F6 | 	mov	arg01, local02
1f4c4     58 74 B0 FD | 	call	#__system___string_cmp
1f4c8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f4cc     00 26 26 C6 |  if_b	not	local01, #0
1f4d0     A7 26 62 FC | 	wrlong	local01, fp
1f4d4     04 00 90 FD | 	jmp	#LR__2463
1f4d8                 | LR__2462
1f4d8     A7 00 68 FC | 	wrlong	#0, fp
1f4dc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f4dc                 | LR__2463
1f4dc     08 4E 05 F1 | 	add	fp, #8
1f4e0     A7 38 68 FC | 	wrlong	#28, fp
1f4e4     08 4E 85 F1 | 	sub	fp, #8
1f4e8     A7 12 02 F6 | 	mov	arg01, fp
1f4ec     10 E1 BE FD | 	call	#_push
1f4f0     A7 F0 03 F6 | 	mov	ptra, fp
1f4f4     B2 00 A0 FD | 	call	#popregs_
1f4f8                 | _do_lt_ret
1f4f8     2D 00 64 FD | 	ret
1f4fc                 | 
1f4fc                 | ' 
1f4fc                 | ' '--------------------------------- minus (-)
1f4fc                 | ' 
1f4fc                 | ' sub do_minus
1f4fc                 | _do_minus
1f4fc     05 4A 05 F6 | 	mov	COUNT_, #5
1f500     A8 00 A0 FD | 	call	#pushregs_
1f504     18 F0 07 F1 | 	add	ptra, #24
1f508     5C E0 BE FD | 	call	#_pop
1f50c     FD 26 02 F6 | 	mov	local01, result1
1f510     FE 28 02 F6 | 	mov	local02, result2
1f514     FF 2A 02 F6 | 	mov	local03, result3
1f518     0C 4E 05 F1 | 	add	fp, #12
1f51c     A7 26 62 FC | 	wrlong	local01, fp
1f520     04 4E 05 F1 | 	add	fp, #4
1f524     A7 28 62 FC | 	wrlong	local02, fp
1f528     04 4E 05 F1 | 	add	fp, #4
1f52c     A7 2A 62 FC | 	wrlong	local03, fp
1f530     14 4E 85 F1 | 	sub	fp, #20
1f534     30 E0 BE FD | 	call	#_pop
1f538     FF 2A 02 F6 | 	mov	local03, result3
1f53c     A7 FA 61 FC | 	wrlong	result1, fp
1f540     04 4E 05 F1 | 	add	fp, #4
1f544     A7 FC 61 FC | 	wrlong	result2, fp
1f548     04 4E 05 F1 | 	add	fp, #4
1f54c     A7 2A 62 FC | 	wrlong	local03, fp
1f550                 | ' 
1f550                 | ' t2=pop()
1f550                 | ' t1=pop()
1f550                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1f550     08 4E 85 F1 | 	sub	fp, #8
1f554     1D 2A 0E F2 | 	cmp	local03, #29 wz
1f558     14 4E 05 A1 |  if_e	add	fp, #20
1f55c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f560     14 4E 85 A1 |  if_e	sub	fp, #20
1f564     16 2B 02 A6 |  if_e	mov	local03, local04
1f568     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f56c     5C 00 90 5D |  if_ne	jmp	#LR__2471
1f570                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1f570     0C 4E 05 F1 | 	add	fp, #12
1f574     A7 26 02 FB | 	rdlong	local01, fp
1f578     0C 4E 85 F1 | 	sub	fp, #12
1f57c     A7 2A 02 FB | 	rdlong	local03, fp
1f580     15 27 12 F2 | 	cmp	local01, local03 wc
1f584     1C 00 90 3D |  if_ae	jmp	#LR__2470
1f588     A7 26 02 FB | 	rdlong	local01, fp
1f58c     0C 4E 05 F1 | 	add	fp, #12
1f590     A7 28 02 FB | 	rdlong	local02, fp
1f594     0C 4E 85 F1 | 	sub	fp, #12
1f598     14 27 82 F1 | 	sub	local01, local02
1f59c     A7 26 62 FC | 	wrlong	local01, fp
1f5a0     F4 02 90 FD | 	jmp	#LR__2480
1f5a4                 | LR__2470
1f5a4     A7 26 02 FB | 	rdlong	local01, fp
1f5a8     0C 4E 05 F1 | 	add	fp, #12
1f5ac     A7 28 02 FB | 	rdlong	local02, fp
1f5b0     0C 4E 85 F1 | 	sub	fp, #12
1f5b4     14 27 82 F1 | 	sub	local01, local02
1f5b8     A7 26 62 FC | 	wrlong	local01, fp
1f5bc     08 4E 05 F1 | 	add	fp, #8
1f5c0     A7 38 68 FC | 	wrlong	#28, fp
1f5c4     08 4E 85 F1 | 	sub	fp, #8
1f5c8     CC 02 90 FD | 	jmp	#LR__2480
1f5cc                 | LR__2471
1f5cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1f5cc     08 4E 05 F1 | 	add	fp, #8
1f5d0     A7 26 02 FB | 	rdlong	local01, fp
1f5d4     08 4E 85 F1 | 	sub	fp, #8
1f5d8     1D 26 0E F2 | 	cmp	local01, #29 wz
1f5dc     14 4E 05 A1 |  if_e	add	fp, #20
1f5e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f5e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f5e8     16 2B 02 A6 |  if_e	mov	local03, local04
1f5ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f5f0     28 00 90 5D |  if_ne	jmp	#LR__2472
1f5f4     A7 26 02 FB | 	rdlong	local01, fp
1f5f8     0C 4E 05 F1 | 	add	fp, #12
1f5fc     A7 28 02 FB | 	rdlong	local02, fp
1f600     0C 4E 85 F1 | 	sub	fp, #12
1f604     14 27 82 F1 | 	sub	local01, local02
1f608     A7 26 62 FC | 	wrlong	local01, fp
1f60c     08 4E 05 F1 | 	add	fp, #8
1f610     A7 38 68 FC | 	wrlong	#28, fp
1f614     08 4E 85 F1 | 	sub	fp, #8
1f618     7C 02 90 FD | 	jmp	#LR__2480
1f61c                 | LR__2472
1f61c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1f61c     08 4E 05 F1 | 	add	fp, #8
1f620     A7 26 02 FB | 	rdlong	local01, fp
1f624     08 4E 85 F1 | 	sub	fp, #8
1f628     1D 26 0E F2 | 	cmp	local01, #29 wz
1f62c     14 4E 05 A1 |  if_e	add	fp, #20
1f630     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f634     14 4E 85 A1 |  if_e	sub	fp, #20
1f638     16 2B 02 A6 |  if_e	mov	local03, local04
1f63c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f640     34 00 90 5D |  if_ne	jmp	#LR__2473
1f644     A7 12 02 FB | 	rdlong	arg01, fp
1f648     24 9D B0 FD | 	call	#__system___float_fromuns
1f64c     FD 12 02 F6 | 	mov	arg01, result1
1f650     0C 4E 05 F1 | 	add	fp, #12
1f654     A7 14 02 FB | 	rdlong	arg02, fp
1f658     0C 4E 85 F1 | 	sub	fp, #12
1f65c     1F 14 E6 F4 | 	bitnot	arg02, #31
1f660     40 9D B0 FD | 	call	#__system___float_add
1f664     A7 FA 61 FC | 	wrlong	result1, fp
1f668     08 4E 05 F1 | 	add	fp, #8
1f66c     A7 3C 68 FC | 	wrlong	#30, fp
1f670     08 4E 85 F1 | 	sub	fp, #8
1f674     20 02 90 FD | 	jmp	#LR__2480
1f678                 | LR__2473
1f678                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1f678     08 4E 05 F1 | 	add	fp, #8
1f67c     A7 26 02 FB | 	rdlong	local01, fp
1f680     08 4E 85 F1 | 	sub	fp, #8
1f684     1C 26 0E F2 | 	cmp	local01, #28 wz
1f688     14 4E 05 A1 |  if_e	add	fp, #20
1f68c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f690     14 4E 85 A1 |  if_e	sub	fp, #20
1f694     16 2B 02 A6 |  if_e	mov	local03, local04
1f698     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f69c     1C 00 90 5D |  if_ne	jmp	#LR__2474
1f6a0     A7 26 02 FB | 	rdlong	local01, fp
1f6a4     0C 4E 05 F1 | 	add	fp, #12
1f6a8     A7 28 02 FB | 	rdlong	local02, fp
1f6ac     0C 4E 85 F1 | 	sub	fp, #12
1f6b0     14 27 82 F1 | 	sub	local01, local02
1f6b4     A7 26 62 FC | 	wrlong	local01, fp
1f6b8     DC 01 90 FD | 	jmp	#LR__2480
1f6bc                 | LR__2474
1f6bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1f6bc     08 4E 05 F1 | 	add	fp, #8
1f6c0     A7 26 02 FB | 	rdlong	local01, fp
1f6c4     08 4E 85 F1 | 	sub	fp, #8
1f6c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f6cc     14 4E 05 A1 |  if_e	add	fp, #20
1f6d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6d4     14 4E 85 A1 |  if_e	sub	fp, #20
1f6d8     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1f6dc     1C 00 90 5D |  if_ne	jmp	#LR__2475
1f6e0     A7 26 02 FB | 	rdlong	local01, fp
1f6e4     0C 4E 05 F1 | 	add	fp, #12
1f6e8     A7 28 02 FB | 	rdlong	local02, fp
1f6ec     0C 4E 85 F1 | 	sub	fp, #12
1f6f0     14 27 82 F1 | 	sub	local01, local02
1f6f4     A7 26 62 FC | 	wrlong	local01, fp
1f6f8     9C 01 90 FD | 	jmp	#LR__2480
1f6fc                 | LR__2475
1f6fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1f6fc     08 4E 05 F1 | 	add	fp, #8
1f700     A7 26 02 FB | 	rdlong	local01, fp
1f704     08 4E 85 F1 | 	sub	fp, #8
1f708     1C 26 0E F2 | 	cmp	local01, #28 wz
1f70c     14 4E 05 A1 |  if_e	add	fp, #20
1f710     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f714     14 4E 85 A1 |  if_e	sub	fp, #20
1f718     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f71c     44 00 90 5D |  if_ne	jmp	#LR__2476
1f720     A7 12 02 FB | 	rdlong	arg01, fp
1f724     09 13 52 F6 | 	abs	arg01, arg01 wc
1f728     1F 2E C6 C9 |  if_b	decod	local05, #31
1f72c     00 2E 06 36 |  if_ae	mov	local05, #0
1f730     3C 9C B0 FD | 	call	#__system___float_fromuns
1f734     17 FB 61 F5 | 	xor	result1, local05
1f738     FD 12 02 F6 | 	mov	arg01, result1
1f73c     0C 4E 05 F1 | 	add	fp, #12
1f740     A7 14 02 FB | 	rdlong	arg02, fp
1f744     0C 4E 85 F1 | 	sub	fp, #12
1f748     1F 14 E6 F4 | 	bitnot	arg02, #31
1f74c     54 9C B0 FD | 	call	#__system___float_add
1f750     A7 FA 61 FC | 	wrlong	result1, fp
1f754     08 4E 05 F1 | 	add	fp, #8
1f758     A7 3C 68 FC | 	wrlong	#30, fp
1f75c     08 4E 85 F1 | 	sub	fp, #8
1f760     34 01 90 FD | 	jmp	#LR__2480
1f764                 | LR__2476
1f764                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1f764     08 4E 05 F1 | 	add	fp, #8
1f768     A7 26 02 FB | 	rdlong	local01, fp
1f76c     08 4E 85 F1 | 	sub	fp, #8
1f770     1E 26 0E F2 | 	cmp	local01, #30 wz
1f774     14 4E 05 A1 |  if_e	add	fp, #20
1f778     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f77c     14 4E 85 A1 |  if_e	sub	fp, #20
1f780     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f784     2C 00 90 5D |  if_ne	jmp	#LR__2477
1f788     A7 26 02 FB | 	rdlong	local01, fp
1f78c     0C 4E 05 F1 | 	add	fp, #12
1f790     A7 12 02 FB | 	rdlong	arg01, fp
1f794     0C 4E 85 F1 | 	sub	fp, #12
1f798     D4 9B B0 FD | 	call	#__system___float_fromuns
1f79c     FD 14 02 F6 | 	mov	arg02, result1
1f7a0     13 13 02 F6 | 	mov	arg01, local01
1f7a4     1F 14 E6 F4 | 	bitnot	arg02, #31
1f7a8     F8 9B B0 FD | 	call	#__system___float_add
1f7ac     A7 FA 61 FC | 	wrlong	result1, fp
1f7b0     E4 00 90 FD | 	jmp	#LR__2480
1f7b4                 | LR__2477
1f7b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1f7b4     08 4E 05 F1 | 	add	fp, #8
1f7b8     A7 26 02 FB | 	rdlong	local01, fp
1f7bc     08 4E 85 F1 | 	sub	fp, #8
1f7c0     1E 26 0E F2 | 	cmp	local01, #30 wz
1f7c4     14 4E 05 A1 |  if_e	add	fp, #20
1f7c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f7cc     14 4E 85 A1 |  if_e	sub	fp, #20
1f7d0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f7d4     3C 00 90 5D |  if_ne	jmp	#LR__2478
1f7d8     A7 26 02 FB | 	rdlong	local01, fp
1f7dc     0C 4E 05 F1 | 	add	fp, #12
1f7e0     A7 12 02 FB | 	rdlong	arg01, fp
1f7e4     0C 4E 85 F1 | 	sub	fp, #12
1f7e8     09 13 52 F6 | 	abs	arg01, arg01 wc
1f7ec     1F 2E C6 C9 |  if_b	decod	local05, #31
1f7f0     00 2E 06 36 |  if_ae	mov	local05, #0
1f7f4     78 9B B0 FD | 	call	#__system___float_fromuns
1f7f8     17 FB 61 F5 | 	xor	result1, local05
1f7fc     FD 14 02 F6 | 	mov	arg02, result1
1f800     13 13 02 F6 | 	mov	arg01, local01
1f804     1F 14 E6 F4 | 	bitnot	arg02, #31
1f808     98 9B B0 FD | 	call	#__system___float_add
1f80c     A7 FA 61 FC | 	wrlong	result1, fp
1f810     84 00 90 FD | 	jmp	#LR__2480
1f814                 | LR__2478
1f814                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1f814     08 4E 05 F1 | 	add	fp, #8
1f818     A7 26 02 FB | 	rdlong	local01, fp
1f81c     08 4E 85 F1 | 	sub	fp, #8
1f820     1E 26 0E F2 | 	cmp	local01, #30 wz
1f824     14 4E 05 A1 |  if_e	add	fp, #20
1f828     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f82c     14 4E 85 A1 |  if_e	sub	fp, #20
1f830     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f834     20 00 90 5D |  if_ne	jmp	#LR__2479
1f838     A7 12 02 FB | 	rdlong	arg01, fp
1f83c     0C 4E 05 F1 | 	add	fp, #12
1f840     A7 14 02 FB | 	rdlong	arg02, fp
1f844     0C 4E 85 F1 | 	sub	fp, #12
1f848     1F 14 E6 F4 | 	bitnot	arg02, #31
1f84c     54 9B B0 FD | 	call	#__system___float_add
1f850     A7 FA 61 FC | 	wrlong	result1, fp
1f854     40 00 90 FD | 	jmp	#LR__2480
1f858                 | LR__2479
1f858                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1f858     08 4E 05 F1 | 	add	fp, #8
1f85c     A7 26 02 FB | 	rdlong	local01, fp
1f860     08 4E 85 F1 | 	sub	fp, #8
1f864     1F 26 0E F2 | 	cmp	local01, #31 wz
1f868     14 4E 05 51 |  if_ne	add	fp, #20
1f86c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f870     14 4E 85 51 |  if_ne	sub	fp, #20
1f874     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1f878     A7 06 68 AC |  if_e	wrlong	#3, fp
1f87c     08 4E 05 A1 |  if_e	add	fp, #8
1f880     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f884     08 4E 85 A1 |  if_e	sub	fp, #8
1f888     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1f88c     08 4E 05 51 |  if_ne	add	fp, #8
1f890     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f894     08 4E 85 51 |  if_ne	sub	fp, #8
1f898                 | LR__2480
1f898     A7 12 02 F6 | 	mov	arg01, fp
1f89c     60 DD BE FD | 	call	#_push
1f8a0     A7 F0 03 F6 | 	mov	ptra, fp
1f8a4     B2 00 A0 FD | 	call	#popregs_
1f8a8                 | _do_minus_ret
1f8a8     2D 00 64 FD | 	ret
1f8ac                 | 
1f8ac                 | ' 
1f8ac                 | ' '--------------------------------- negative (-), one argument negative
1f8ac                 | ' 
1f8ac                 | ' sub do_negative
1f8ac                 | _do_negative
1f8ac     02 4A 05 F6 | 	mov	COUNT_, #2
1f8b0     A8 00 A0 FD | 	call	#pushregs_
1f8b4     0C F0 07 F1 | 	add	ptra, #12
1f8b8     AC DC BE FD | 	call	#_pop
1f8bc     FF 26 02 F6 | 	mov	local01, result3
1f8c0     A7 FA 61 FC | 	wrlong	result1, fp
1f8c4     04 4E 05 F1 | 	add	fp, #4
1f8c8     A7 FC 61 FC | 	wrlong	result2, fp
1f8cc     04 4E 05 F1 | 	add	fp, #4
1f8d0     A7 26 62 FC | 	wrlong	local01, fp
1f8d4                 | ' 
1f8d4                 | ' t1=pop()
1f8d4                 | ' if t1.result_type=result_int then 
1f8d4     08 4E 85 F1 | 	sub	fp, #8
1f8d8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f8dc     A7 28 02 AB |  if_e	rdlong	local02, fp
1f8e0     14 27 62 A6 |  if_e	neg	local01, local02
1f8e4     A7 26 62 AC |  if_e	wrlong	local01, fp
1f8e8     5C 00 90 AD |  if_e	jmp	#LR__2492
1f8ec     08 4E 05 F1 | 	add	fp, #8
1f8f0     A7 26 02 FB | 	rdlong	local01, fp
1f8f4     08 4E 85 F1 | 	sub	fp, #8
1f8f8     1D 26 0E F2 | 	cmp	local01, #29 wz
1f8fc     1C 00 90 5D |  if_ne	jmp	#LR__2490
1f900     A7 28 02 FB | 	rdlong	local02, fp
1f904     14 27 62 F6 | 	neg	local01, local02
1f908     A7 26 62 FC | 	wrlong	local01, fp
1f90c     08 4E 05 F1 | 	add	fp, #8
1f910     A7 38 68 FC | 	wrlong	#28, fp
1f914     08 4E 85 F1 | 	sub	fp, #8
1f918     2C 00 90 FD | 	jmp	#LR__2491
1f91c                 | LR__2490
1f91c     08 4E 05 F1 | 	add	fp, #8
1f920     A7 26 02 FB | 	rdlong	local01, fp
1f924     08 4E 85 F1 | 	sub	fp, #8
1f928     1E 26 0E F2 | 	cmp	local01, #30 wz
1f92c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1f930     1F FA E5 A4 |  if_e	bitnot	result1, #31
1f934     A7 FA 61 AC |  if_e	wrlong	result1, fp
1f938     08 4E 05 51 |  if_ne	add	fp, #8
1f93c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f940     08 4E 85 51 |  if_ne	sub	fp, #8
1f944     A7 50 68 5C |  if_ne	wrlong	#40, fp
1f948                 | LR__2491
1f948                 | LR__2492
1f948     A7 12 02 F6 | 	mov	arg01, fp
1f94c     B0 DC BE FD | 	call	#_push
1f950     A7 F0 03 F6 | 	mov	ptra, fp
1f954     B2 00 A0 FD | 	call	#popregs_
1f958                 | _do_negative_ret
1f958     2D 00 64 FD | 	ret
1f95c                 | 
1f95c                 | ' 
1f95c                 | ' '--------------------------------- MOD (modulo)
1f95c                 | ' 
1f95c                 | ' sub do_mod 
1f95c                 | _do_mod
1f95c     01 4A 05 F6 | 	mov	COUNT_, #1
1f960     A8 00 A0 FD | 	call	#pushregs_
1f964     18 F0 07 F1 | 	add	ptra, #24
1f968     FC DB BE FD | 	call	#_pop
1f96c     FD 92 02 F6 | 	mov	muldivb_, result1
1f970     FE 90 02 F6 | 	mov	muldiva_, result2
1f974     FF 26 02 F6 | 	mov	local01, result3
1f978     0C 4E 05 F1 | 	add	fp, #12
1f97c     A7 92 62 FC | 	wrlong	muldivb_, fp
1f980     04 4E 05 F1 | 	add	fp, #4
1f984     A7 90 62 FC | 	wrlong	muldiva_, fp
1f988     04 4E 05 F1 | 	add	fp, #4
1f98c     A7 26 62 FC | 	wrlong	local01, fp
1f990     14 4E 85 F1 | 	sub	fp, #20
1f994     D0 DB BE FD | 	call	#_pop
1f998     A7 FA 61 FC | 	wrlong	result1, fp
1f99c     04 4E 05 F1 | 	add	fp, #4
1f9a0     A7 FC 61 FC | 	wrlong	result2, fp
1f9a4     04 4E 05 F1 | 	add	fp, #4
1f9a8     A7 FE 61 FC | 	wrlong	result3, fp
1f9ac                 | ' 
1f9ac                 | ' t2=pop()
1f9ac                 | ' t1=pop()
1f9ac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1f9ac     08 4E 85 F1 | 	sub	fp, #8
1f9b0     1F FE 0D F2 | 	cmp	result3, #31 wz
1f9b4     14 4E 05 51 |  if_ne	add	fp, #20
1f9b8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1f9bc     14 4E 85 51 |  if_ne	sub	fp, #20
1f9c0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1f9c4     A7 14 68 AC |  if_e	wrlong	#10, fp
1f9c8     08 4E 05 A1 |  if_e	add	fp, #8
1f9cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f9d0     08 4E 85 A1 |  if_e	sub	fp, #8
1f9d4     90 01 90 AD |  if_e	jmp	#LR__2506
1f9d8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1f9d8     08 4E 05 F1 | 	add	fp, #8
1f9dc     A7 92 02 FB | 	rdlong	muldivb_, fp
1f9e0     08 4E 85 F1 | 	sub	fp, #8
1f9e4     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1f9e8     1C 00 90 5D |  if_ne	jmp	#LR__2500
1f9ec     08 4E 05 F1 | 	add	fp, #8
1f9f0     A7 38 68 FC | 	wrlong	#28, fp
1f9f4     08 4E 85 F1 | 	sub	fp, #8
1f9f8     A7 12 02 FB | 	rdlong	arg01, fp
1f9fc     00 14 06 F6 | 	mov	arg02, #0
1fa00     38 A2 B0 FD | 	call	#__system___float_tointeger
1fa04     A7 FA 61 FC | 	wrlong	result1, fp
1fa08                 | LR__2500
1fa08                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1fa08     14 4E 05 F1 | 	add	fp, #20
1fa0c     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa10     14 4E 85 F1 | 	sub	fp, #20
1fa14     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1fa18     28 00 90 5D |  if_ne	jmp	#LR__2501
1fa1c     14 4E 05 F1 | 	add	fp, #20
1fa20     A7 38 68 FC | 	wrlong	#28, fp
1fa24     08 4E 85 F1 | 	sub	fp, #8
1fa28     A7 12 02 FB | 	rdlong	arg01, fp
1fa2c     0C 4E 85 F1 | 	sub	fp, #12
1fa30     00 14 06 F6 | 	mov	arg02, #0
1fa34     04 A2 B0 FD | 	call	#__system___float_tointeger
1fa38     0C 4E 05 F1 | 	add	fp, #12
1fa3c     A7 FA 61 FC | 	wrlong	result1, fp
1fa40     0C 4E 85 F1 | 	sub	fp, #12
1fa44                 | LR__2501
1fa44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1fa44     08 4E 05 F1 | 	add	fp, #8
1fa48     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa4c     08 4E 85 F1 | 	sub	fp, #8
1fa50     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1fa54     14 4E 05 A1 |  if_e	add	fp, #20
1fa58     A7 26 02 AB |  if_e	rdlong	local01, fp
1fa5c     14 4E 85 A1 |  if_e	sub	fp, #20
1fa60     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1fa64     20 00 90 5D |  if_ne	jmp	#LR__2502
1fa68     0C 4E 05 F1 | 	add	fp, #12
1fa6c     A7 26 02 FB | 	rdlong	local01, fp
1fa70     0C 4E 85 F1 | 	sub	fp, #12
1fa74     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa78     13 93 12 FD | 	qdiv	muldivb_, local01
1fa7c     19 26 62 FD | 	getqy	local01
1fa80     A7 26 62 FC | 	wrlong	local01, fp
1fa84     E0 00 90 FD | 	jmp	#LR__2506
1fa88                 | LR__2502
1fa88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1fa88     08 4E 05 F1 | 	add	fp, #8
1fa8c     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa90     08 4E 85 F1 | 	sub	fp, #8
1fa94     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1fa98     14 4E 05 A1 |  if_e	add	fp, #20
1fa9c     A7 26 02 AB |  if_e	rdlong	local01, fp
1faa0     14 4E 85 A1 |  if_e	sub	fp, #20
1faa4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1faa8     2C 00 90 5D |  if_ne	jmp	#LR__2503
1faac     0C 4E 05 F1 | 	add	fp, #12
1fab0     A7 26 02 FB | 	rdlong	local01, fp
1fab4     0C 4E 85 F1 | 	sub	fp, #12
1fab8     A7 92 02 FB | 	rdlong	muldivb_, fp
1fabc     13 93 12 FD | 	qdiv	muldivb_, local01
1fac0     19 26 62 FD | 	getqy	local01
1fac4     A7 26 62 FC | 	wrlong	local01, fp
1fac8     08 4E 05 F1 | 	add	fp, #8
1facc     A7 38 68 FC | 	wrlong	#28, fp
1fad0     08 4E 85 F1 | 	sub	fp, #8
1fad4     90 00 90 FD | 	jmp	#LR__2506
1fad8                 | LR__2503
1fad8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1fad8     08 4E 05 F1 | 	add	fp, #8
1fadc     A7 92 02 FB | 	rdlong	muldivb_, fp
1fae0     08 4E 85 F1 | 	sub	fp, #8
1fae4     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1fae8     14 4E 05 A1 |  if_e	add	fp, #20
1faec     A7 26 02 AB |  if_e	rdlong	local01, fp
1faf0     14 4E 85 A1 |  if_e	sub	fp, #20
1faf4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1faf8     1C 00 90 5D |  if_ne	jmp	#LR__2504
1fafc     A7 90 02 FB | 	rdlong	muldiva_, fp
1fb00     0C 4E 05 F1 | 	add	fp, #12
1fb04     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb08     0C 4E 85 F1 | 	sub	fp, #12
1fb0c     BA 00 A0 FD | 	call	#divide_
1fb10     A7 90 62 FC | 	wrlong	muldiva_, fp
1fb14     50 00 90 FD | 	jmp	#LR__2506
1fb18                 | LR__2504
1fb18                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1fb18     08 4E 05 F1 | 	add	fp, #8
1fb1c     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb20     08 4E 85 F1 | 	sub	fp, #8
1fb24     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1fb28     14 4E 05 A1 |  if_e	add	fp, #20
1fb2c     A7 26 02 AB |  if_e	rdlong	local01, fp
1fb30     14 4E 85 A1 |  if_e	sub	fp, #20
1fb34     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1fb38     1C 00 90 5D |  if_ne	jmp	#LR__2505
1fb3c     A7 90 02 FB | 	rdlong	muldiva_, fp
1fb40     0C 4E 05 F1 | 	add	fp, #12
1fb44     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb48     0C 4E 85 F1 | 	sub	fp, #12
1fb4c     BA 00 A0 FD | 	call	#divide_
1fb50     A7 90 62 FC | 	wrlong	muldiva_, fp
1fb54     10 00 90 FD | 	jmp	#LR__2506
1fb58                 | LR__2505
1fb58     A7 16 68 FC | 	wrlong	#11, fp
1fb5c     08 4E 05 F1 | 	add	fp, #8
1fb60     A7 FE 69 FC | 	wrlong	#255, fp
1fb64     08 4E 85 F1 | 	sub	fp, #8
1fb68                 | LR__2506
1fb68     A7 12 02 F6 | 	mov	arg01, fp
1fb6c     90 DA BE FD | 	call	#_push
1fb70     A7 F0 03 F6 | 	mov	ptra, fp
1fb74     B2 00 A0 FD | 	call	#popregs_
1fb78                 | _do_mod_ret
1fb78     2D 00 64 FD | 	ret
1fb7c                 | 
1fb7c                 | ' 
1fb7c                 | ' '--------------------------------- mul (*)
1fb7c                 | ' 
1fb7c                 | ' sub do_mul
1fb7c                 | _do_mul
1fb7c     05 4A 05 F6 | 	mov	COUNT_, #5
1fb80     A8 00 A0 FD | 	call	#pushregs_
1fb84     18 F0 07 F1 | 	add	ptra, #24
1fb88     DC D9 BE FD | 	call	#_pop
1fb8c     FD 26 02 F6 | 	mov	local01, result1
1fb90     FE 28 02 F6 | 	mov	local02, result2
1fb94     FF 2A 02 F6 | 	mov	local03, result3
1fb98     0C 4E 05 F1 | 	add	fp, #12
1fb9c     A7 26 62 FC | 	wrlong	local01, fp
1fba0     04 4E 05 F1 | 	add	fp, #4
1fba4     A7 28 62 FC | 	wrlong	local02, fp
1fba8     04 4E 05 F1 | 	add	fp, #4
1fbac     A7 2A 62 FC | 	wrlong	local03, fp
1fbb0     14 4E 85 F1 | 	sub	fp, #20
1fbb4     B0 D9 BE FD | 	call	#_pop
1fbb8     FF 2A 02 F6 | 	mov	local03, result3
1fbbc     A7 FA 61 FC | 	wrlong	result1, fp
1fbc0     04 4E 05 F1 | 	add	fp, #4
1fbc4     A7 FC 61 FC | 	wrlong	result2, fp
1fbc8     04 4E 05 F1 | 	add	fp, #4
1fbcc     A7 2A 62 FC | 	wrlong	local03, fp
1fbd0                 | ' 
1fbd0                 | ' t2=pop()
1fbd0                 | ' t1=pop()
1fbd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1fbd0     08 4E 85 F1 | 	sub	fp, #8
1fbd4     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fbd8     14 4E 05 A1 |  if_e	add	fp, #20
1fbdc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fbe0     14 4E 85 A1 |  if_e	sub	fp, #20
1fbe4     16 2B 02 A6 |  if_e	mov	local03, local04
1fbe8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fbec     20 00 90 5D |  if_ne	jmp	#LR__2510
1fbf0     A7 28 02 FB | 	rdlong	local02, fp
1fbf4     0C 4E 05 F1 | 	add	fp, #12
1fbf8     A7 2A 02 FB | 	rdlong	local03, fp
1fbfc     15 29 02 FD | 	qmul	local02, local03
1fc00     0C 4E 85 F1 | 	sub	fp, #12
1fc04     18 26 62 FD | 	getqx	local01
1fc08     A7 26 62 FC | 	wrlong	local01, fp
1fc0c     C4 02 90 FD | 	jmp	#LR__2519
1fc10                 | LR__2510
1fc10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1fc10     08 4E 05 F1 | 	add	fp, #8
1fc14     A7 26 02 FB | 	rdlong	local01, fp
1fc18     08 4E 85 F1 | 	sub	fp, #8
1fc1c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc20     14 4E 05 A1 |  if_e	add	fp, #20
1fc24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc28     14 4E 85 A1 |  if_e	sub	fp, #20
1fc2c     16 2B 02 A6 |  if_e	mov	local03, local04
1fc30     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fc34     2C 00 90 5D |  if_ne	jmp	#LR__2511
1fc38     A7 28 02 FB | 	rdlong	local02, fp
1fc3c     0C 4E 05 F1 | 	add	fp, #12
1fc40     A7 2A 02 FB | 	rdlong	local03, fp
1fc44     15 29 02 FD | 	qmul	local02, local03
1fc48     0C 4E 85 F1 | 	sub	fp, #12
1fc4c     18 26 62 FD | 	getqx	local01
1fc50     A7 26 62 FC | 	wrlong	local01, fp
1fc54     08 4E 05 F1 | 	add	fp, #8
1fc58     A7 38 68 FC | 	wrlong	#28, fp
1fc5c     08 4E 85 F1 | 	sub	fp, #8
1fc60     70 02 90 FD | 	jmp	#LR__2519
1fc64                 | LR__2511
1fc64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1fc64     08 4E 05 F1 | 	add	fp, #8
1fc68     A7 26 02 FB | 	rdlong	local01, fp
1fc6c     08 4E 85 F1 | 	sub	fp, #8
1fc70     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc74     14 4E 05 A1 |  if_e	add	fp, #20
1fc78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc7c     14 4E 85 A1 |  if_e	sub	fp, #20
1fc80     16 2B 02 A6 |  if_e	mov	local03, local04
1fc84     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fc88     30 00 90 5D |  if_ne	jmp	#LR__2512
1fc8c     A7 12 02 FB | 	rdlong	arg01, fp
1fc90     DC 96 B0 FD | 	call	#__system___float_fromuns
1fc94     FD 12 02 F6 | 	mov	arg01, result1
1fc98     0C 4E 05 F1 | 	add	fp, #12
1fc9c     A7 14 02 FB | 	rdlong	arg02, fp
1fca0     0C 4E 85 F1 | 	sub	fp, #12
1fca4     CC 9A B0 FD | 	call	#__system___float_mul
1fca8     A7 FA 61 FC | 	wrlong	result1, fp
1fcac     08 4E 05 F1 | 	add	fp, #8
1fcb0     A7 3C 68 FC | 	wrlong	#30, fp
1fcb4     08 4E 85 F1 | 	sub	fp, #8
1fcb8     18 02 90 FD | 	jmp	#LR__2519
1fcbc                 | LR__2512
1fcbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1fcbc     08 4E 05 F1 | 	add	fp, #8
1fcc0     A7 26 02 FB | 	rdlong	local01, fp
1fcc4     08 4E 85 F1 | 	sub	fp, #8
1fcc8     1C 26 0E F2 | 	cmp	local01, #28 wz
1fccc     14 4E 05 A1 |  if_e	add	fp, #20
1fcd0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcd4     14 4E 85 A1 |  if_e	sub	fp, #20
1fcd8     16 2B 02 A6 |  if_e	mov	local03, local04
1fcdc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fce0     20 00 90 5D |  if_ne	jmp	#LR__2513
1fce4     A7 28 02 FB | 	rdlong	local02, fp
1fce8     0C 4E 05 F1 | 	add	fp, #12
1fcec     A7 2A 02 FB | 	rdlong	local03, fp
1fcf0     15 29 02 FD | 	qmul	local02, local03
1fcf4     0C 4E 85 F1 | 	sub	fp, #12
1fcf8     18 26 62 FD | 	getqx	local01
1fcfc     A7 26 62 FC | 	wrlong	local01, fp
1fd00     D0 01 90 FD | 	jmp	#LR__2519
1fd04                 | LR__2513
1fd04                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1fd04     08 4E 05 F1 | 	add	fp, #8
1fd08     A7 26 02 FB | 	rdlong	local01, fp
1fd0c     08 4E 85 F1 | 	sub	fp, #8
1fd10     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd14     14 4E 05 A1 |  if_e	add	fp, #20
1fd18     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd1c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd20     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fd24     20 00 90 5D |  if_ne	jmp	#LR__2514
1fd28     A7 28 02 FB | 	rdlong	local02, fp
1fd2c     0C 4E 05 F1 | 	add	fp, #12
1fd30     A7 2A 02 FB | 	rdlong	local03, fp
1fd34     15 29 02 FD | 	qmul	local02, local03
1fd38     0C 4E 85 F1 | 	sub	fp, #12
1fd3c     18 26 62 FD | 	getqx	local01
1fd40     A7 26 62 FC | 	wrlong	local01, fp
1fd44     8C 01 90 FD | 	jmp	#LR__2519
1fd48                 | LR__2514
1fd48                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1fd48     08 4E 05 F1 | 	add	fp, #8
1fd4c     A7 26 02 FB | 	rdlong	local01, fp
1fd50     08 4E 85 F1 | 	sub	fp, #8
1fd54     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd58     14 4E 05 A1 |  if_e	add	fp, #20
1fd5c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fd60     14 4E 85 A1 |  if_e	sub	fp, #20
1fd64     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fd68     40 00 90 5D |  if_ne	jmp	#LR__2515
1fd6c     A7 12 02 FB | 	rdlong	arg01, fp
1fd70     09 13 52 F6 | 	abs	arg01, arg01 wc
1fd74     1F 2E C6 C9 |  if_b	decod	local05, #31
1fd78     00 2E 06 36 |  if_ae	mov	local05, #0
1fd7c     F0 95 B0 FD | 	call	#__system___float_fromuns
1fd80     17 FB 61 F5 | 	xor	result1, local05
1fd84     FD 12 02 F6 | 	mov	arg01, result1
1fd88     0C 4E 05 F1 | 	add	fp, #12
1fd8c     A7 14 02 FB | 	rdlong	arg02, fp
1fd90     0C 4E 85 F1 | 	sub	fp, #12
1fd94     DC 99 B0 FD | 	call	#__system___float_mul
1fd98     A7 FA 61 FC | 	wrlong	result1, fp
1fd9c     08 4E 05 F1 | 	add	fp, #8
1fda0     A7 3C 68 FC | 	wrlong	#30, fp
1fda4     08 4E 85 F1 | 	sub	fp, #8
1fda8     28 01 90 FD | 	jmp	#LR__2519
1fdac                 | LR__2515
1fdac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1fdac     08 4E 05 F1 | 	add	fp, #8
1fdb0     A7 26 02 FB | 	rdlong	local01, fp
1fdb4     08 4E 85 F1 | 	sub	fp, #8
1fdb8     1E 26 0E F2 | 	cmp	local01, #30 wz
1fdbc     14 4E 05 A1 |  if_e	add	fp, #20
1fdc0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fdc4     14 4E 85 A1 |  if_e	sub	fp, #20
1fdc8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fdcc     28 00 90 5D |  if_ne	jmp	#LR__2516
1fdd0     A7 26 02 FB | 	rdlong	local01, fp
1fdd4     0C 4E 05 F1 | 	add	fp, #12
1fdd8     A7 12 02 FB | 	rdlong	arg01, fp
1fddc     0C 4E 85 F1 | 	sub	fp, #12
1fde0     8C 95 B0 FD | 	call	#__system___float_fromuns
1fde4     FD 14 02 F6 | 	mov	arg02, result1
1fde8     13 13 02 F6 | 	mov	arg01, local01
1fdec     84 99 B0 FD | 	call	#__system___float_mul
1fdf0     A7 FA 61 FC | 	wrlong	result1, fp
1fdf4     DC 00 90 FD | 	jmp	#LR__2519
1fdf8                 | LR__2516
1fdf8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1fdf8     08 4E 05 F1 | 	add	fp, #8
1fdfc     A7 26 02 FB | 	rdlong	local01, fp
1fe00     08 4E 85 F1 | 	sub	fp, #8
1fe04     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe08     14 4E 05 A1 |  if_e	add	fp, #20
1fe0c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe10     14 4E 85 A1 |  if_e	sub	fp, #20
1fe14     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fe18     38 00 90 5D |  if_ne	jmp	#LR__2517
1fe1c     A7 26 02 FB | 	rdlong	local01, fp
1fe20     0C 4E 05 F1 | 	add	fp, #12
1fe24     A7 12 02 FB | 	rdlong	arg01, fp
1fe28     0C 4E 85 F1 | 	sub	fp, #12
1fe2c     09 13 52 F6 | 	abs	arg01, arg01 wc
1fe30     1F 2E C6 C9 |  if_b	decod	local05, #31
1fe34     00 2E 06 36 |  if_ae	mov	local05, #0
1fe38     34 95 B0 FD | 	call	#__system___float_fromuns
1fe3c     17 FB 61 F5 | 	xor	result1, local05
1fe40     FD 14 02 F6 | 	mov	arg02, result1
1fe44     13 13 02 F6 | 	mov	arg01, local01
1fe48     28 99 B0 FD | 	call	#__system___float_mul
1fe4c     A7 FA 61 FC | 	wrlong	result1, fp
1fe50     80 00 90 FD | 	jmp	#LR__2519
1fe54                 | LR__2517
1fe54                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1fe54     08 4E 05 F1 | 	add	fp, #8
1fe58     A7 26 02 FB | 	rdlong	local01, fp
1fe5c     08 4E 85 F1 | 	sub	fp, #8
1fe60     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe64     14 4E 05 A1 |  if_e	add	fp, #20
1fe68     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe6c     14 4E 85 A1 |  if_e	sub	fp, #20
1fe70     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fe74     1C 00 90 5D |  if_ne	jmp	#LR__2518
1fe78     A7 12 02 FB | 	rdlong	arg01, fp
1fe7c     0C 4E 05 F1 | 	add	fp, #12
1fe80     A7 14 02 FB | 	rdlong	arg02, fp
1fe84     0C 4E 85 F1 | 	sub	fp, #12
1fe88     E8 98 B0 FD | 	call	#__system___float_mul
1fe8c     A7 FA 61 FC | 	wrlong	result1, fp
1fe90     40 00 90 FD | 	jmp	#LR__2519
1fe94                 | LR__2518
1fe94                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1fe94     08 4E 05 F1 | 	add	fp, #8
1fe98     A7 26 02 FB | 	rdlong	local01, fp
1fe9c     08 4E 85 F1 | 	sub	fp, #8
1fea0     1F 26 0E F2 | 	cmp	local01, #31 wz
1fea4     14 4E 05 51 |  if_ne	add	fp, #20
1fea8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1feac     14 4E 85 51 |  if_ne	sub	fp, #20
1feb0     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1feb4     A7 10 68 AC |  if_e	wrlong	#8, fp
1feb8     08 4E 05 A1 |  if_e	add	fp, #8
1febc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fec0     08 4E 85 A1 |  if_e	sub	fp, #8
1fec4     A7 12 68 5C |  if_ne	wrlong	#9, fp
1fec8     08 4E 05 51 |  if_ne	add	fp, #8
1fecc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fed0     08 4E 85 51 |  if_ne	sub	fp, #8
1fed4                 | LR__2519
1fed4     A7 12 02 F6 | 	mov	arg01, fp
1fed8     24 D7 BE FD | 	call	#_push
1fedc     A7 F0 03 F6 | 	mov	ptra, fp
1fee0     B2 00 A0 FD | 	call	#popregs_
1fee4                 | _do_mul_ret
1fee4     2D 00 64 FD | 	ret
1fee8                 | 
1fee8                 | ' 
1fee8                 | ' '--------------------------------- not equal (<>)
1fee8                 | ' 
1fee8                 | ' sub do_ne
1fee8                 | _do_ne
1fee8     05 4A 05 F6 | 	mov	COUNT_, #5
1feec     A8 00 A0 FD | 	call	#pushregs_
1fef0     18 F0 07 F1 | 	add	ptra, #24
1fef4     70 D6 BE FD | 	call	#_pop
1fef8     FD 26 02 F6 | 	mov	local01, result1
1fefc     FE 28 02 F6 | 	mov	local02, result2
1ff00     FF 2A 02 F6 | 	mov	local03, result3
1ff04     0C 4E 05 F1 | 	add	fp, #12
1ff08     A7 26 62 FC | 	wrlong	local01, fp
1ff0c     04 4E 05 F1 | 	add	fp, #4
1ff10     A7 28 62 FC | 	wrlong	local02, fp
1ff14     04 4E 05 F1 | 	add	fp, #4
1ff18     A7 2A 62 FC | 	wrlong	local03, fp
1ff1c     14 4E 85 F1 | 	sub	fp, #20
1ff20     44 D6 BE FD | 	call	#_pop
1ff24     FF 2A 02 F6 | 	mov	local03, result3
1ff28     A7 FA 61 FC | 	wrlong	result1, fp
1ff2c     04 4E 05 F1 | 	add	fp, #4
1ff30     A7 FC 61 FC | 	wrlong	result2, fp
1ff34     04 4E 05 F1 | 	add	fp, #4
1ff38     A7 2A 62 FC | 	wrlong	local03, fp
1ff3c                 | ' 
1ff3c                 | ' t2=pop()
1ff3c                 | ' t1=pop()
1ff3c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1ff3c     08 4E 85 F1 | 	sub	fp, #8
1ff40     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ff44     14 4E 05 A1 |  if_e	add	fp, #20
1ff48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ff4c     14 4E 85 A1 |  if_e	sub	fp, #20
1ff50     16 2B 02 A6 |  if_e	mov	local03, local04
1ff54     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ff58     28 00 90 5D |  if_ne	jmp	#LR__2520
1ff5c     00 26 06 F6 | 	mov	local01, #0
1ff60     A7 12 02 FB | 	rdlong	arg01, fp
1ff64     0C 4E 05 F1 | 	add	fp, #12
1ff68     A7 14 02 FB | 	rdlong	arg02, fp
1ff6c     0C 4E 85 F1 | 	sub	fp, #12
1ff70     AC 69 B0 FD | 	call	#__system___string_cmp
1ff74     00 FA 0D F2 | 	cmp	result1, #0 wz
1ff78     00 26 26 56 |  if_ne	not	local01, #0
1ff7c     A7 26 62 FC | 	wrlong	local01, fp
1ff80     20 04 90 FD | 	jmp	#LR__2533
1ff84                 | LR__2520
1ff84                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1ff84     08 4E 05 F1 | 	add	fp, #8
1ff88     A7 26 02 FB | 	rdlong	local01, fp
1ff8c     08 4E 85 F1 | 	sub	fp, #8
1ff90     1E 26 0E F2 | 	cmp	local01, #30 wz
1ff94     14 4E 05 A1 |  if_e	add	fp, #20
1ff98     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ff9c     14 4E 85 A1 |  if_e	sub	fp, #20
1ffa0     16 2B 02 A6 |  if_e	mov	local03, local04
1ffa4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ffa8     2C 00 90 5D |  if_ne	jmp	#LR__2521
1ffac     00 26 06 F6 | 	mov	local01, #0
1ffb0     A7 12 02 FB | 	rdlong	arg01, fp
1ffb4     0C 4E 05 F1 | 	add	fp, #12
1ffb8     A7 14 02 FB | 	rdlong	arg02, fp
1ffbc     0C 4E 85 F1 | 	sub	fp, #12
1ffc0     01 16 06 F6 | 	mov	arg03, #1
1ffc4     E0 9B B0 FD | 	call	#__system___float_cmp
1ffc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffcc     00 26 26 56 |  if_ne	not	local01, #0
1ffd0     A7 26 62 FC | 	wrlong	local01, fp
1ffd4     CC 03 90 FD | 	jmp	#LR__2533
1ffd8                 | LR__2521
1ffd8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1ffd8     08 4E 05 F1 | 	add	fp, #8
1ffdc     A7 26 02 FB | 	rdlong	local01, fp
1ffe0     08 4E 85 F1 | 	sub	fp, #8
1ffe4     1E 26 0E F2 | 	cmp	local01, #30 wz
1ffe8     14 4E 05 A1 |  if_e	add	fp, #20
1ffec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fff0     14 4E 85 A1 |  if_e	sub	fp, #20
1fff4     16 2B 02 A6 |  if_e	mov	local03, local04
1fff8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fffc     48 00 90 5D |  if_ne	jmp	#LR__2522
20000     00 26 06 F6 | 	mov	local01, #0
20004     A7 28 02 FB | 	rdlong	local02, fp
20008     0C 4E 05 F1 | 	add	fp, #12
2000c     A7 12 02 FB | 	rdlong	arg01, fp
20010     0C 4E 85 F1 | 	sub	fp, #12
20014     09 13 52 F6 | 	abs	arg01, arg01 wc
20018     1F 2E C6 C9 |  if_b	decod	local05, #31
2001c     00 2E 06 36 |  if_ae	mov	local05, #0
20020     4C 93 B0 FD | 	call	#__system___float_fromuns
20024     17 FB 61 F5 | 	xor	result1, local05
20028     FD 14 02 F6 | 	mov	arg02, result1
2002c     14 13 02 F6 | 	mov	arg01, local02
20030     01 16 06 F6 | 	mov	arg03, #1
20034     70 9B B0 FD | 	call	#__system___float_cmp
20038     00 FA 0D F2 | 	cmp	result1, #0 wz
2003c     00 26 26 56 |  if_ne	not	local01, #0
20040     A7 26 62 FC | 	wrlong	local01, fp
20044     5C 03 90 FD | 	jmp	#LR__2533
20048                 | LR__2522
20048                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
20048     08 4E 05 F1 | 	add	fp, #8
2004c     A7 26 02 FB | 	rdlong	local01, fp
20050     08 4E 85 F1 | 	sub	fp, #8
20054     1E 26 0E F2 | 	cmp	local01, #30 wz
20058     14 4E 05 A1 |  if_e	add	fp, #20
2005c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20060     14 4E 85 A1 |  if_e	sub	fp, #20
20064     16 2B 02 A6 |  if_e	mov	local03, local04
20068     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2006c     38 00 90 5D |  if_ne	jmp	#LR__2523
20070     00 26 06 F6 | 	mov	local01, #0
20074     A7 28 02 FB | 	rdlong	local02, fp
20078     0C 4E 05 F1 | 	add	fp, #12
2007c     A7 12 02 FB | 	rdlong	arg01, fp
20080     0C 4E 85 F1 | 	sub	fp, #12
20084     E8 92 B0 FD | 	call	#__system___float_fromuns
20088     FD 14 02 F6 | 	mov	arg02, result1
2008c     14 13 02 F6 | 	mov	arg01, local02
20090     01 16 06 F6 | 	mov	arg03, #1
20094     10 9B B0 FD | 	call	#__system___float_cmp
20098     00 FA 0D F2 | 	cmp	result1, #0 wz
2009c     00 26 26 56 |  if_ne	not	local01, #0
200a0     A7 26 62 FC | 	wrlong	local01, fp
200a4     FC 02 90 FD | 	jmp	#LR__2533
200a8                 | LR__2523
200a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
200a8     08 4E 05 F1 | 	add	fp, #8
200ac     A7 26 02 FB | 	rdlong	local01, fp
200b0     08 4E 85 F1 | 	sub	fp, #8
200b4     1C 26 0E F2 | 	cmp	local01, #28 wz
200b8     14 4E 05 A1 |  if_e	add	fp, #20
200bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
200c0     14 4E 85 A1 |  if_e	sub	fp, #20
200c4     16 2B 02 A6 |  if_e	mov	local03, local04
200c8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
200cc     44 00 90 5D |  if_ne	jmp	#LR__2524
200d0     00 26 06 F6 | 	mov	local01, #0
200d4     A7 12 02 FB | 	rdlong	arg01, fp
200d8     09 13 52 F6 | 	abs	arg01, arg01 wc
200dc     1F 2E C6 C9 |  if_b	decod	local05, #31
200e0     00 2E 06 36 |  if_ae	mov	local05, #0
200e4     88 92 B0 FD | 	call	#__system___float_fromuns
200e8     17 FB 61 F5 | 	xor	result1, local05
200ec     FD 12 02 F6 | 	mov	arg01, result1
200f0     0C 4E 05 F1 | 	add	fp, #12
200f4     A7 14 02 FB | 	rdlong	arg02, fp
200f8     0C 4E 85 F1 | 	sub	fp, #12
200fc     01 16 06 F6 | 	mov	arg03, #1
20100     A4 9A B0 FD | 	call	#__system___float_cmp
20104     00 FA 0D F2 | 	cmp	result1, #0 wz
20108     00 26 26 56 |  if_ne	not	local01, #0
2010c     A7 26 62 FC | 	wrlong	local01, fp
20110     90 02 90 FD | 	jmp	#LR__2533
20114                 | LR__2524
20114                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
20114     08 4E 05 F1 | 	add	fp, #8
20118     A7 26 02 FB | 	rdlong	local01, fp
2011c     08 4E 85 F1 | 	sub	fp, #8
20120     1C 26 0E F2 | 	cmp	local01, #28 wz
20124     14 4E 05 A1 |  if_e	add	fp, #20
20128     A7 2C 02 AB |  if_e	rdlong	local04, fp
2012c     14 4E 85 A1 |  if_e	sub	fp, #20
20130     16 2B 02 A6 |  if_e	mov	local03, local04
20134     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20138     24 00 90 5D |  if_ne	jmp	#LR__2525
2013c     00 26 06 F6 | 	mov	local01, #0
20140     A7 28 02 FB | 	rdlong	local02, fp
20144     0C 4E 05 F1 | 	add	fp, #12
20148     A7 2A 02 FB | 	rdlong	local03, fp
2014c     0C 4E 85 F1 | 	sub	fp, #12
20150     15 29 0A F2 | 	cmp	local02, local03 wz
20154     01 26 66 56 |  if_ne	neg	local01, #1
20158     A7 26 62 FC | 	wrlong	local01, fp
2015c     44 02 90 FD | 	jmp	#LR__2533
20160                 | LR__2525
20160                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
20160     08 4E 05 F1 | 	add	fp, #8
20164     A7 26 02 FB | 	rdlong	local01, fp
20168     08 4E 85 F1 | 	sub	fp, #8
2016c     1C 26 0E F2 | 	cmp	local01, #28 wz
20170     14 4E 05 A1 |  if_e	add	fp, #20
20174     A7 2C 02 AB |  if_e	rdlong	local04, fp
20178     14 4E 85 A1 |  if_e	sub	fp, #20
2017c     16 2B 02 A6 |  if_e	mov	local03, local04
20180     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20184     24 00 90 5D |  if_ne	jmp	#LR__2526
20188     00 26 06 F6 | 	mov	local01, #0
2018c     A7 28 02 FB | 	rdlong	local02, fp
20190     0C 4E 05 F1 | 	add	fp, #12
20194     A7 2A 02 FB | 	rdlong	local03, fp
20198     0C 4E 85 F1 | 	sub	fp, #12
2019c     15 29 0A F2 | 	cmp	local02, local03 wz
201a0     01 26 66 56 |  if_ne	neg	local01, #1
201a4     A7 26 62 FC | 	wrlong	local01, fp
201a8     F8 01 90 FD | 	jmp	#LR__2533
201ac                 | LR__2526
201ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
201ac     08 4E 05 F1 | 	add	fp, #8
201b0     A7 26 02 FB | 	rdlong	local01, fp
201b4     08 4E 85 F1 | 	sub	fp, #8
201b8     1D 26 0E F2 | 	cmp	local01, #29 wz
201bc     14 4E 05 A1 |  if_e	add	fp, #20
201c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
201c4     14 4E 85 A1 |  if_e	sub	fp, #20
201c8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
201cc     34 00 90 5D |  if_ne	jmp	#LR__2527
201d0     00 26 06 F6 | 	mov	local01, #0
201d4     A7 12 02 FB | 	rdlong	arg01, fp
201d8     94 91 B0 FD | 	call	#__system___float_fromuns
201dc     FD 12 02 F6 | 	mov	arg01, result1
201e0     0C 4E 05 F1 | 	add	fp, #12
201e4     A7 14 02 FB | 	rdlong	arg02, fp
201e8     0C 4E 85 F1 | 	sub	fp, #12
201ec     01 16 06 F6 | 	mov	arg03, #1
201f0     B4 99 B0 FD | 	call	#__system___float_cmp
201f4     00 FA 0D F2 | 	cmp	result1, #0 wz
201f8     00 26 26 56 |  if_ne	not	local01, #0
201fc     A7 26 62 FC | 	wrlong	local01, fp
20200     A0 01 90 FD | 	jmp	#LR__2533
20204                 | LR__2527
20204                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
20204     08 4E 05 F1 | 	add	fp, #8
20208     A7 26 02 FB | 	rdlong	local01, fp
2020c     08 4E 85 F1 | 	sub	fp, #8
20210     1D 26 0E F2 | 	cmp	local01, #29 wz
20214     14 4E 05 A1 |  if_e	add	fp, #20
20218     A7 2A 02 AB |  if_e	rdlong	local03, fp
2021c     14 4E 85 A1 |  if_e	sub	fp, #20
20220     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20224     24 00 90 5D |  if_ne	jmp	#LR__2528
20228     00 26 06 F6 | 	mov	local01, #0
2022c     A7 28 02 FB | 	rdlong	local02, fp
20230     0C 4E 05 F1 | 	add	fp, #12
20234     A7 2A 02 FB | 	rdlong	local03, fp
20238     0C 4E 85 F1 | 	sub	fp, #12
2023c     15 29 0A F2 | 	cmp	local02, local03 wz
20240     01 26 66 56 |  if_ne	neg	local01, #1
20244     A7 26 62 FC | 	wrlong	local01, fp
20248     58 01 90 FD | 	jmp	#LR__2533
2024c                 | LR__2528
2024c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
2024c     08 4E 05 F1 | 	add	fp, #8
20250     A7 26 02 FB | 	rdlong	local01, fp
20254     08 4E 85 F1 | 	sub	fp, #8
20258     1D 26 0E F2 | 	cmp	local01, #29 wz
2025c     14 4E 05 A1 |  if_e	add	fp, #20
20260     A7 2A 02 AB |  if_e	rdlong	local03, fp
20264     14 4E 85 A1 |  if_e	sub	fp, #20
20268     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2026c     24 00 90 5D |  if_ne	jmp	#LR__2529
20270     00 26 06 F6 | 	mov	local01, #0
20274     A7 28 02 FB | 	rdlong	local02, fp
20278     0C 4E 05 F1 | 	add	fp, #12
2027c     A7 2A 02 FB | 	rdlong	local03, fp
20280     0C 4E 85 F1 | 	sub	fp, #12
20284     15 29 0A F2 | 	cmp	local02, local03 wz
20288     01 26 66 56 |  if_ne	neg	local01, #1
2028c     A7 26 62 FC | 	wrlong	local01, fp
20290     10 01 90 FD | 	jmp	#LR__2533
20294                 | LR__2529
20294                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
20294     08 4E 05 F1 | 	add	fp, #8
20298     A7 26 02 FB | 	rdlong	local01, fp
2029c     08 4E 85 F1 | 	sub	fp, #8
202a0     2B 26 0E F2 | 	cmp	local01, #43 wz
202a4     14 4E 05 A1 |  if_e	add	fp, #20
202a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
202ac     14 4E 85 A1 |  if_e	sub	fp, #20
202b0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
202b4     30 00 90 5D |  if_ne	jmp	#LR__2530
202b8     00 26 06 F6 | 	mov	local01, #0
202bc     A7 12 02 FB | 	rdlong	arg01, fp
202c0     1C D4 BE FD | 	call	#_convertstring
202c4     FD 12 02 F6 | 	mov	arg01, result1
202c8     0C 4E 05 F1 | 	add	fp, #12
202cc     A7 14 02 FB | 	rdlong	arg02, fp
202d0     0C 4E 85 F1 | 	sub	fp, #12
202d4     48 66 B0 FD | 	call	#__system___string_cmp
202d8     00 FA 0D F2 | 	cmp	result1, #0 wz
202dc     00 26 26 56 |  if_ne	not	local01, #0
202e0     A7 26 62 FC | 	wrlong	local01, fp
202e4     BC 00 90 FD | 	jmp	#LR__2533
202e8                 | LR__2530
202e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
202e8     08 4E 05 F1 | 	add	fp, #8
202ec     A7 26 02 FB | 	rdlong	local01, fp
202f0     08 4E 85 F1 | 	sub	fp, #8
202f4     1F 26 0E F2 | 	cmp	local01, #31 wz
202f8     14 4E 05 A1 |  if_e	add	fp, #20
202fc     A7 2A 02 AB |  if_e	rdlong	local03, fp
20300     14 4E 85 A1 |  if_e	sub	fp, #20
20304     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20308     34 00 90 5D |  if_ne	jmp	#LR__2531
2030c     00 26 06 F6 | 	mov	local01, #0
20310     A7 28 02 FB | 	rdlong	local02, fp
20314     0C 4E 05 F1 | 	add	fp, #12
20318     A7 12 02 FB | 	rdlong	arg01, fp
2031c     0C 4E 85 F1 | 	sub	fp, #12
20320     BC D3 BE FD | 	call	#_convertstring
20324     FD 14 02 F6 | 	mov	arg02, result1
20328     14 13 02 F6 | 	mov	arg01, local02
2032c     F0 65 B0 FD | 	call	#__system___string_cmp
20330     00 FA 0D F2 | 	cmp	result1, #0 wz
20334     00 26 26 56 |  if_ne	not	local01, #0
20338     A7 26 62 FC | 	wrlong	local01, fp
2033c     64 00 90 FD | 	jmp	#LR__2533
20340                 | LR__2531
20340                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
20340     08 4E 05 F1 | 	add	fp, #8
20344     A7 26 02 FB | 	rdlong	local01, fp
20348     08 4E 85 F1 | 	sub	fp, #8
2034c     2B 26 0E F2 | 	cmp	local01, #43 wz
20350     14 4E 05 A1 |  if_e	add	fp, #20
20354     A7 2A 02 AB |  if_e	rdlong	local03, fp
20358     14 4E 85 A1 |  if_e	sub	fp, #20
2035c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20360     3C 00 90 5D |  if_ne	jmp	#LR__2532
20364     00 26 06 F6 | 	mov	local01, #0
20368     A7 12 02 FB | 	rdlong	arg01, fp
2036c     70 D3 BE FD | 	call	#_convertstring
20370     FD 28 02 F6 | 	mov	local02, result1
20374     0C 4E 05 F1 | 	add	fp, #12
20378     A7 12 02 FB | 	rdlong	arg01, fp
2037c     0C 4E 85 F1 | 	sub	fp, #12
20380     5C D3 BE FD | 	call	#_convertstring
20384     FD 14 02 F6 | 	mov	arg02, result1
20388     14 13 02 F6 | 	mov	arg01, local02
2038c     90 65 B0 FD | 	call	#__system___string_cmp
20390     00 FA 0D F2 | 	cmp	result1, #0 wz
20394     00 26 26 56 |  if_ne	not	local01, #0
20398     A7 26 62 FC | 	wrlong	local01, fp
2039c     04 00 90 FD | 	jmp	#LR__2533
203a0                 | LR__2532
203a0     A7 00 68 FC | 	wrlong	#0, fp
203a4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
203a4                 | LR__2533
203a4     08 4E 05 F1 | 	add	fp, #8
203a8     A7 38 68 FC | 	wrlong	#28, fp
203ac     08 4E 85 F1 | 	sub	fp, #8
203b0     A7 12 02 F6 | 	mov	arg01, fp
203b4     48 D2 BE FD | 	call	#_push
203b8     A7 F0 03 F6 | 	mov	ptra, fp
203bc     B2 00 A0 FD | 	call	#popregs_
203c0                 | _do_ne_ret
203c0     2D 00 64 FD | 	ret
203c4                 | 
203c4                 | ' 
203c4                 | ' '--------------------------------- OR
203c4                 | ' 
203c4                 | ' sub do_or 
203c4                 | _do_or
203c4     03 4A 05 F6 | 	mov	COUNT_, #3
203c8     A8 00 A0 FD | 	call	#pushregs_
203cc     18 F0 07 F1 | 	add	ptra, #24
203d0     94 D1 BE FD | 	call	#_pop
203d4     FD 12 02 F6 | 	mov	arg01, result1
203d8     FE 26 02 F6 | 	mov	local01, result2
203dc     FF 28 02 F6 | 	mov	local02, result3
203e0     0C 4E 05 F1 | 	add	fp, #12
203e4     A7 12 62 FC | 	wrlong	arg01, fp
203e8     04 4E 05 F1 | 	add	fp, #4
203ec     A7 26 62 FC | 	wrlong	local01, fp
203f0     04 4E 05 F1 | 	add	fp, #4
203f4     A7 28 62 FC | 	wrlong	local02, fp
203f8     14 4E 85 F1 | 	sub	fp, #20
203fc     68 D1 BE FD | 	call	#_pop
20400     FF 2A 02 F6 | 	mov	local03, result3
20404     A7 FA 61 FC | 	wrlong	result1, fp
20408     04 4E 05 F1 | 	add	fp, #4
2040c     A7 FC 61 FC | 	wrlong	result2, fp
20410     04 4E 05 F1 | 	add	fp, #4
20414     A7 2A 62 FC | 	wrlong	local03, fp
20418                 | ' 
20418                 | ' t2=pop()
20418                 | ' t1=pop()
20418                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20418     08 4E 85 F1 | 	sub	fp, #8
2041c     1C 2A 0E F2 | 	cmp	local03, #28 wz
20420     A7 2A 02 AB |  if_e	rdlong	local03, fp
20424     A7 2A 62 AC |  if_e	wrlong	local03, fp
20428     08 4E 05 A1 |  if_e	add	fp, #8
2042c     A7 3A 68 AC |  if_e	wrlong	#29, fp
20430     08 4E 85 A1 |  if_e	sub	fp, #8
20434                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20434     14 4E 05 F1 | 	add	fp, #20
20438     A7 2A 02 FB | 	rdlong	local03, fp
2043c     14 4E 85 F1 | 	sub	fp, #20
20440     1C 2A 0E F2 | 	cmp	local03, #28 wz
20444     18 00 90 5D |  if_ne	jmp	#LR__2540
20448     0C 4E 05 F1 | 	add	fp, #12
2044c     A7 2A 02 FB | 	rdlong	local03, fp
20450     A7 2A 62 FC | 	wrlong	local03, fp
20454     08 4E 05 F1 | 	add	fp, #8
20458     A7 3A 68 FC | 	wrlong	#29, fp
2045c     14 4E 85 F1 | 	sub	fp, #20
20460                 | LR__2540
20460                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
20460     08 4E 05 F1 | 	add	fp, #8
20464     A7 2A 02 FB | 	rdlong	local03, fp
20468     08 4E 85 F1 | 	sub	fp, #8
2046c     1F 2A 0E F2 | 	cmp	local03, #31 wz
20470     14 4E 05 51 |  if_ne	add	fp, #20
20474     A7 28 02 5B |  if_ne	rdlong	local02, fp
20478     14 4E 85 51 |  if_ne	sub	fp, #20
2047c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20480     08 4E 05 51 |  if_ne	add	fp, #8
20484     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20488     08 4E 85 51 |  if_ne	sub	fp, #8
2048c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20490     14 4E 05 51 |  if_ne	add	fp, #20
20494     14 4E 85 51 |  if_ne	sub	fp, #20
20498     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
2049c     A7 0C 68 AC |  if_e	wrlong	#6, fp
204a0     08 4E 05 A1 |  if_e	add	fp, #8
204a4     A7 FE 69 AC |  if_e	wrlong	#255, fp
204a8     08 4E 85 A1 |  if_e	sub	fp, #8
204ac     18 00 90 AD |  if_e	jmp	#LR__2541
204b0     A7 2A 02 FB | 	rdlong	local03, fp
204b4     0C 4E 05 F1 | 	add	fp, #12
204b8     A7 26 02 FB | 	rdlong	local01, fp
204bc     0C 4E 85 F1 | 	sub	fp, #12
204c0     13 2B 42 F5 | 	or	local03, local01
204c4     A7 2A 62 FC | 	wrlong	local03, fp
204c8                 | LR__2541
204c8     A7 12 02 F6 | 	mov	arg01, fp
204cc     30 D1 BE FD | 	call	#_push
204d0     A7 F0 03 F6 | 	mov	ptra, fp
204d4     B2 00 A0 FD | 	call	#popregs_
204d8                 | _do_or_ret
204d8     2D 00 64 FD | 	ret
204dc                 | 
204dc                 | ' 
204dc                 | ' '--------------------------------- plus (+)
204dc                 | ' 
204dc                 | ' sub do_plus 
204dc                 | _do_plus
204dc     05 4A 05 F6 | 	mov	COUNT_, #5
204e0     A8 00 A0 FD | 	call	#pushregs_
204e4     18 F0 07 F1 | 	add	ptra, #24
204e8     7C D0 BE FD | 	call	#_pop
204ec     FD 26 02 F6 | 	mov	local01, result1
204f0     FE 28 02 F6 | 	mov	local02, result2
204f4     FF 2A 02 F6 | 	mov	local03, result3
204f8     0C 4E 05 F1 | 	add	fp, #12
204fc     A7 26 62 FC | 	wrlong	local01, fp
20500     04 4E 05 F1 | 	add	fp, #4
20504     A7 28 62 FC | 	wrlong	local02, fp
20508     04 4E 05 F1 | 	add	fp, #4
2050c     A7 2A 62 FC | 	wrlong	local03, fp
20510     14 4E 85 F1 | 	sub	fp, #20
20514     50 D0 BE FD | 	call	#_pop
20518     FF 2A 02 F6 | 	mov	local03, result3
2051c     A7 FA 61 FC | 	wrlong	result1, fp
20520     04 4E 05 F1 | 	add	fp, #4
20524     A7 FC 61 FC | 	wrlong	result2, fp
20528     04 4E 05 F1 | 	add	fp, #4
2052c     A7 2A 62 FC | 	wrlong	local03, fp
20530                 | ' 
20530                 | ' t2=pop()
20530                 | ' t1=pop()
20530                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
20530     08 4E 85 F1 | 	sub	fp, #8
20534     1D 2A 0E F2 | 	cmp	local03, #29 wz
20538     14 4E 05 A1 |  if_e	add	fp, #20
2053c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20540     14 4E 85 A1 |  if_e	sub	fp, #20
20544     16 2B 02 A6 |  if_e	mov	local03, local04
20548     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2054c     1C 00 90 5D |  if_ne	jmp	#LR__2550
20550     A7 26 02 FB | 	rdlong	local01, fp
20554     0C 4E 05 F1 | 	add	fp, #12
20558     A7 28 02 FB | 	rdlong	local02, fp
2055c     0C 4E 85 F1 | 	sub	fp, #12
20560     14 27 02 F1 | 	add	local01, local02
20564     A7 26 62 FC | 	wrlong	local01, fp
20568     48 04 90 FD | 	jmp	#LR__2565
2056c                 | LR__2550
2056c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
2056c     08 4E 05 F1 | 	add	fp, #8
20570     A7 26 02 FB | 	rdlong	local01, fp
20574     08 4E 85 F1 | 	sub	fp, #8
20578     1D 26 0E F2 | 	cmp	local01, #29 wz
2057c     14 4E 05 A1 |  if_e	add	fp, #20
20580     A7 2C 02 AB |  if_e	rdlong	local04, fp
20584     14 4E 85 A1 |  if_e	sub	fp, #20
20588     16 2B 02 A6 |  if_e	mov	local03, local04
2058c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20590     28 00 90 5D |  if_ne	jmp	#LR__2551
20594     A7 26 02 FB | 	rdlong	local01, fp
20598     0C 4E 05 F1 | 	add	fp, #12
2059c     A7 28 02 FB | 	rdlong	local02, fp
205a0     0C 4E 85 F1 | 	sub	fp, #12
205a4     14 27 02 F1 | 	add	local01, local02
205a8     A7 26 62 FC | 	wrlong	local01, fp
205ac     08 4E 05 F1 | 	add	fp, #8
205b0     A7 38 68 FC | 	wrlong	#28, fp
205b4     08 4E 85 F1 | 	sub	fp, #8
205b8     F8 03 90 FD | 	jmp	#LR__2565
205bc                 | LR__2551
205bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
205bc     08 4E 05 F1 | 	add	fp, #8
205c0     A7 26 02 FB | 	rdlong	local01, fp
205c4     08 4E 85 F1 | 	sub	fp, #8
205c8     1D 26 0E F2 | 	cmp	local01, #29 wz
205cc     14 4E 05 A1 |  if_e	add	fp, #20
205d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
205d4     14 4E 85 A1 |  if_e	sub	fp, #20
205d8     16 2B 02 A6 |  if_e	mov	local03, local04
205dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
205e0     30 00 90 5D |  if_ne	jmp	#LR__2552
205e4     A7 12 02 FB | 	rdlong	arg01, fp
205e8     84 8D B0 FD | 	call	#__system___float_fromuns
205ec     FD 12 02 F6 | 	mov	arg01, result1
205f0     0C 4E 05 F1 | 	add	fp, #12
205f4     A7 14 02 FB | 	rdlong	arg02, fp
205f8     0C 4E 85 F1 | 	sub	fp, #12
205fc     A4 8D B0 FD | 	call	#__system___float_add
20600     A7 FA 61 FC | 	wrlong	result1, fp
20604     08 4E 05 F1 | 	add	fp, #8
20608     A7 3C 68 FC | 	wrlong	#30, fp
2060c     08 4E 85 F1 | 	sub	fp, #8
20610     A0 03 90 FD | 	jmp	#LR__2565
20614                 | LR__2552
20614                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
20614     08 4E 05 F1 | 	add	fp, #8
20618     A7 26 02 FB | 	rdlong	local01, fp
2061c     08 4E 85 F1 | 	sub	fp, #8
20620     1C 26 0E F2 | 	cmp	local01, #28 wz
20624     14 4E 05 A1 |  if_e	add	fp, #20
20628     A7 2C 02 AB |  if_e	rdlong	local04, fp
2062c     14 4E 85 A1 |  if_e	sub	fp, #20
20630     16 2B 02 A6 |  if_e	mov	local03, local04
20634     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20638     1C 00 90 5D |  if_ne	jmp	#LR__2553
2063c     A7 26 02 FB | 	rdlong	local01, fp
20640     0C 4E 05 F1 | 	add	fp, #12
20644     A7 28 02 FB | 	rdlong	local02, fp
20648     0C 4E 85 F1 | 	sub	fp, #12
2064c     14 27 02 F1 | 	add	local01, local02
20650     A7 26 62 FC | 	wrlong	local01, fp
20654     5C 03 90 FD | 	jmp	#LR__2565
20658                 | LR__2553
20658                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
20658     08 4E 05 F1 | 	add	fp, #8
2065c     A7 26 02 FB | 	rdlong	local01, fp
20660     08 4E 85 F1 | 	sub	fp, #8
20664     1C 26 0E F2 | 	cmp	local01, #28 wz
20668     14 4E 05 A1 |  if_e	add	fp, #20
2066c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20670     14 4E 85 A1 |  if_e	sub	fp, #20
20674     16 2B 02 A6 |  if_e	mov	local03, local04
20678     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2067c     1C 00 90 5D |  if_ne	jmp	#LR__2554
20680     A7 26 02 FB | 	rdlong	local01, fp
20684     0C 4E 05 F1 | 	add	fp, #12
20688     A7 28 02 FB | 	rdlong	local02, fp
2068c     0C 4E 85 F1 | 	sub	fp, #12
20690     14 27 02 F1 | 	add	local01, local02
20694     A7 26 62 FC | 	wrlong	local01, fp
20698     18 03 90 FD | 	jmp	#LR__2565
2069c                 | LR__2554
2069c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
2069c     08 4E 05 F1 | 	add	fp, #8
206a0     A7 26 02 FB | 	rdlong	local01, fp
206a4     08 4E 85 F1 | 	sub	fp, #8
206a8     1C 26 0E F2 | 	cmp	local01, #28 wz
206ac     14 4E 05 A1 |  if_e	add	fp, #20
206b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
206b4     14 4E 85 A1 |  if_e	sub	fp, #20
206b8     16 2B 02 A6 |  if_e	mov	local03, local04
206bc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
206c0     40 00 90 5D |  if_ne	jmp	#LR__2555
206c4     A7 12 02 FB | 	rdlong	arg01, fp
206c8     09 13 52 F6 | 	abs	arg01, arg01 wc
206cc     1F 2E C6 C9 |  if_b	decod	local05, #31
206d0     00 2E 06 36 |  if_ae	mov	local05, #0
206d4     98 8C B0 FD | 	call	#__system___float_fromuns
206d8     17 FB 61 F5 | 	xor	result1, local05
206dc     FD 12 02 F6 | 	mov	arg01, result1
206e0     0C 4E 05 F1 | 	add	fp, #12
206e4     A7 14 02 FB | 	rdlong	arg02, fp
206e8     0C 4E 85 F1 | 	sub	fp, #12
206ec     B4 8C B0 FD | 	call	#__system___float_add
206f0     A7 FA 61 FC | 	wrlong	result1, fp
206f4     08 4E 05 F1 | 	add	fp, #8
206f8     A7 3C 68 FC | 	wrlong	#30, fp
206fc     08 4E 85 F1 | 	sub	fp, #8
20700     B0 02 90 FD | 	jmp	#LR__2565
20704                 | LR__2555
20704                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
20704     08 4E 05 F1 | 	add	fp, #8
20708     A7 26 02 FB | 	rdlong	local01, fp
2070c     08 4E 85 F1 | 	sub	fp, #8
20710     1E 26 0E F2 | 	cmp	local01, #30 wz
20714     14 4E 05 A1 |  if_e	add	fp, #20
20718     A7 2C 02 AB |  if_e	rdlong	local04, fp
2071c     14 4E 85 A1 |  if_e	sub	fp, #20
20720     16 2B 02 A6 |  if_e	mov	local03, local04
20724     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20728     28 00 90 5D |  if_ne	jmp	#LR__2556
2072c     A7 26 02 FB | 	rdlong	local01, fp
20730     0C 4E 05 F1 | 	add	fp, #12
20734     A7 12 02 FB | 	rdlong	arg01, fp
20738     0C 4E 85 F1 | 	sub	fp, #12
2073c     30 8C B0 FD | 	call	#__system___float_fromuns
20740     FD 14 02 F6 | 	mov	arg02, result1
20744     13 13 02 F6 | 	mov	arg01, local01
20748     58 8C B0 FD | 	call	#__system___float_add
2074c     A7 FA 61 FC | 	wrlong	result1, fp
20750     60 02 90 FD | 	jmp	#LR__2565
20754                 | LR__2556
20754                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
20754     08 4E 05 F1 | 	add	fp, #8
20758     A7 26 02 FB | 	rdlong	local01, fp
2075c     08 4E 85 F1 | 	sub	fp, #8
20760     1E 26 0E F2 | 	cmp	local01, #30 wz
20764     14 4E 05 A1 |  if_e	add	fp, #20
20768     A7 2C 02 AB |  if_e	rdlong	local04, fp
2076c     14 4E 85 A1 |  if_e	sub	fp, #20
20770     16 2B 02 A6 |  if_e	mov	local03, local04
20774     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20778     38 00 90 5D |  if_ne	jmp	#LR__2557
2077c     A7 26 02 FB | 	rdlong	local01, fp
20780     0C 4E 05 F1 | 	add	fp, #12
20784     A7 12 02 FB | 	rdlong	arg01, fp
20788     0C 4E 85 F1 | 	sub	fp, #12
2078c     09 13 52 F6 | 	abs	arg01, arg01 wc
20790     1F 2E C6 C9 |  if_b	decod	local05, #31
20794     00 2E 06 36 |  if_ae	mov	local05, #0
20798     D4 8B B0 FD | 	call	#__system___float_fromuns
2079c     17 FB 61 F5 | 	xor	result1, local05
207a0     FD 14 02 F6 | 	mov	arg02, result1
207a4     13 13 02 F6 | 	mov	arg01, local01
207a8     F8 8B B0 FD | 	call	#__system___float_add
207ac     A7 FA 61 FC | 	wrlong	result1, fp
207b0     00 02 90 FD | 	jmp	#LR__2565
207b4                 | LR__2557
207b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
207b4     08 4E 05 F1 | 	add	fp, #8
207b8     A7 26 02 FB | 	rdlong	local01, fp
207bc     08 4E 85 F1 | 	sub	fp, #8
207c0     1E 26 0E F2 | 	cmp	local01, #30 wz
207c4     14 4E 05 A1 |  if_e	add	fp, #20
207c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
207cc     14 4E 85 A1 |  if_e	sub	fp, #20
207d0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
207d4     1C 00 90 5D |  if_ne	jmp	#LR__2558
207d8     A7 12 02 FB | 	rdlong	arg01, fp
207dc     0C 4E 05 F1 | 	add	fp, #12
207e0     A7 14 02 FB | 	rdlong	arg02, fp
207e4     0C 4E 85 F1 | 	sub	fp, #12
207e8     B8 8B B0 FD | 	call	#__system___float_add
207ec     A7 FA 61 FC | 	wrlong	result1, fp
207f0     C0 01 90 FD | 	jmp	#LR__2565
207f4                 | LR__2558
207f4                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
207f4     08 4E 05 F1 | 	add	fp, #8
207f8     A7 26 02 FB | 	rdlong	local01, fp
207fc     08 4E 85 F1 | 	sub	fp, #8
20800     1F 26 0E F2 | 	cmp	local01, #31 wz
20804     24 00 90 5D |  if_ne	jmp	#LR__2559
20808     14 4E 05 F1 | 	add	fp, #20
2080c     A7 2A 02 FB | 	rdlong	local03, fp
20810     14 4E 85 F1 | 	sub	fp, #20
20814     1F 2A 0E F2 | 	cmp	local03, #31 wz
20818     A7 04 68 5C |  if_ne	wrlong	#2, fp
2081c     08 4E 05 51 |  if_ne	add	fp, #8
20820     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20824     08 4E 85 51 |  if_ne	sub	fp, #8
20828     88 01 90 5D |  if_ne	jmp	#LR__2565
2082c                 | LR__2559
2082c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
2082c     14 4E 05 F1 | 	add	fp, #20
20830     A7 26 02 FB | 	rdlong	local01, fp
20834     14 4E 85 F1 | 	sub	fp, #20
20838     1F 26 0E F2 | 	cmp	local01, #31 wz
2083c     24 00 90 5D |  if_ne	jmp	#LR__2560
20840     08 4E 05 F1 | 	add	fp, #8
20844     A7 2A 02 FB | 	rdlong	local03, fp
20848     08 4E 85 F1 | 	sub	fp, #8
2084c     1F 2A 0E F2 | 	cmp	local03, #31 wz
20850     A7 04 68 5C |  if_ne	wrlong	#2, fp
20854     08 4E 05 51 |  if_ne	add	fp, #8
20858     A7 FE 69 5C |  if_ne	wrlong	#255, fp
2085c     08 4E 85 51 |  if_ne	sub	fp, #8
20860     50 01 90 5D |  if_ne	jmp	#LR__2565
20864                 | LR__2560
20864                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
20864     08 4E 05 F1 | 	add	fp, #8
20868     A7 26 02 FB | 	rdlong	local01, fp
2086c     08 4E 85 F1 | 	sub	fp, #8
20870     1F 26 0E F2 | 	cmp	local01, #31 wz
20874     14 4E 05 A1 |  if_e	add	fp, #20
20878     A7 2A 02 AB |  if_e	rdlong	local03, fp
2087c     14 4E 85 A1 |  if_e	sub	fp, #20
20880     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20884     1C 00 90 5D |  if_ne	jmp	#LR__2561
20888     A7 12 02 FB | 	rdlong	arg01, fp
2088c     0C 4E 05 F1 | 	add	fp, #12
20890     A7 14 02 FB | 	rdlong	arg02, fp
20894     0C 4E 85 F1 | 	sub	fp, #12
20898     B8 60 B0 FD | 	call	#__system___string_concat
2089c     A7 FA 61 FC | 	wrlong	result1, fp
208a0     10 01 90 FD | 	jmp	#LR__2565
208a4                 | LR__2561
208a4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
208a4     08 4E 05 F1 | 	add	fp, #8
208a8     A7 26 02 FB | 	rdlong	local01, fp
208ac     08 4E 85 F1 | 	sub	fp, #8
208b0     2B 26 0E F2 | 	cmp	local01, #43 wz
208b4     14 4E 05 A1 |  if_e	add	fp, #20
208b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
208bc     14 4E 85 A1 |  if_e	sub	fp, #20
208c0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
208c4     30 00 90 5D |  if_ne	jmp	#LR__2562
208c8     A7 12 02 FB | 	rdlong	arg01, fp
208cc     10 CE BE FD | 	call	#_convertstring
208d0     FD 12 02 F6 | 	mov	arg01, result1
208d4     0C 4E 05 F1 | 	add	fp, #12
208d8     A7 14 02 FB | 	rdlong	arg02, fp
208dc     0C 4E 85 F1 | 	sub	fp, #12
208e0     70 60 B0 FD | 	call	#__system___string_concat
208e4     A7 FA 61 FC | 	wrlong	result1, fp
208e8     08 4E 05 F1 | 	add	fp, #8
208ec     A7 3E 68 FC | 	wrlong	#31, fp
208f0     08 4E 85 F1 | 	sub	fp, #8
208f4     BC 00 90 FD | 	jmp	#LR__2565
208f8                 | LR__2562
208f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
208f8     08 4E 05 F1 | 	add	fp, #8
208fc     A7 26 02 FB | 	rdlong	local01, fp
20900     08 4E 85 F1 | 	sub	fp, #8
20904     1F 26 0E F2 | 	cmp	local01, #31 wz
20908     14 4E 05 A1 |  if_e	add	fp, #20
2090c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20910     14 4E 85 A1 |  if_e	sub	fp, #20
20914     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20918     28 00 90 5D |  if_ne	jmp	#LR__2563
2091c     A7 26 02 FB | 	rdlong	local01, fp
20920     0C 4E 05 F1 | 	add	fp, #12
20924     A7 12 02 FB | 	rdlong	arg01, fp
20928     0C 4E 85 F1 | 	sub	fp, #12
2092c     B0 CD BE FD | 	call	#_convertstring
20930     FD 14 02 F6 | 	mov	arg02, result1
20934     13 13 02 F6 | 	mov	arg01, local01
20938     18 60 B0 FD | 	call	#__system___string_concat
2093c     A7 FA 61 FC | 	wrlong	result1, fp
20940     70 00 90 FD | 	jmp	#LR__2565
20944                 | LR__2563
20944                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
20944     08 4E 05 F1 | 	add	fp, #8
20948     A7 26 02 FB | 	rdlong	local01, fp
2094c     08 4E 85 F1 | 	sub	fp, #8
20950     2B 26 0E F2 | 	cmp	local01, #43 wz
20954     14 4E 05 A1 |  if_e	add	fp, #20
20958     A7 2A 02 AB |  if_e	rdlong	local03, fp
2095c     14 4E 85 A1 |  if_e	sub	fp, #20
20960     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20964     3C 00 90 5D |  if_ne	jmp	#LR__2564
20968     A7 12 02 FB | 	rdlong	arg01, fp
2096c     70 CD BE FD | 	call	#_convertstring
20970     FD 26 02 F6 | 	mov	local01, result1
20974     0C 4E 05 F1 | 	add	fp, #12
20978     A7 12 02 FB | 	rdlong	arg01, fp
2097c     0C 4E 85 F1 | 	sub	fp, #12
20980     5C CD BE FD | 	call	#_convertstring
20984     FD 14 02 F6 | 	mov	arg02, result1
20988     13 13 02 F6 | 	mov	arg01, local01
2098c     C4 5F B0 FD | 	call	#__system___string_concat
20990     A7 FA 61 FC | 	wrlong	result1, fp
20994     08 4E 05 F1 | 	add	fp, #8
20998     A7 3E 68 FC | 	wrlong	#31, fp
2099c     08 4E 85 F1 | 	sub	fp, #8
209a0     10 00 90 FD | 	jmp	#LR__2565
209a4                 | LR__2564
209a4     A7 08 68 FC | 	wrlong	#4, fp
209a8     08 4E 05 F1 | 	add	fp, #8
209ac     A7 FE 69 FC | 	wrlong	#255, fp
209b0     08 4E 85 F1 | 	sub	fp, #8
209b4                 | LR__2565
209b4     A7 12 02 F6 | 	mov	arg01, fp
209b8     44 CC BE FD | 	call	#_push
209bc     A7 F0 03 F6 | 	mov	ptra, fp
209c0     B2 00 A0 FD | 	call	#popregs_
209c4                 | _do_plus_ret
209c4     2D 00 64 FD | 	ret
209c8                 | 
209c8                 | ' 
209c8                 | ' '--------------------------------- power (^)
209c8                 | ' 
209c8                 | ' sub do_power 
209c8                 | _do_power
209c8     02 4A 05 F6 | 	mov	COUNT_, #2
209cc     A8 00 A0 FD | 	call	#pushregs_
209d0     18 F0 07 F1 | 	add	ptra, #24
209d4     90 CB BE FD | 	call	#_pop
209d8     FD 14 02 F6 | 	mov	arg02, result1
209dc     FE 12 02 F6 | 	mov	arg01, result2
209e0     FF 26 02 F6 | 	mov	local01, result3
209e4     0C 4E 05 F1 | 	add	fp, #12
209e8     A7 14 62 FC | 	wrlong	arg02, fp
209ec     04 4E 05 F1 | 	add	fp, #4
209f0     A7 12 62 FC | 	wrlong	arg01, fp
209f4     04 4E 05 F1 | 	add	fp, #4
209f8     A7 26 62 FC | 	wrlong	local01, fp
209fc     14 4E 85 F1 | 	sub	fp, #20
20a00     64 CB BE FD | 	call	#_pop
20a04     A7 FA 61 FC | 	wrlong	result1, fp
20a08     04 4E 05 F1 | 	add	fp, #4
20a0c     A7 FC 61 FC | 	wrlong	result2, fp
20a10     04 4E 05 F1 | 	add	fp, #4
20a14     A7 FE 61 FC | 	wrlong	result3, fp
20a18                 | ' 
20a18                 | ' t2=pop()
20a18                 | ' t1=pop()
20a18                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
20a18     08 4E 85 F1 | 	sub	fp, #8
20a1c     1F FE 0D F2 | 	cmp	result3, #31 wz
20a20     14 4E 05 51 |  if_ne	add	fp, #20
20a24     A7 26 02 5B |  if_ne	rdlong	local01, fp
20a28     14 4E 85 51 |  if_ne	sub	fp, #20
20a2c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
20a30     A7 18 68 AC |  if_e	wrlong	#12, fp
20a34     08 4E 05 A1 |  if_e	add	fp, #8
20a38     A7 FE 69 AC |  if_e	wrlong	#255, fp
20a3c     08 4E 85 A1 |  if_e	sub	fp, #8
20a40     38 01 90 AD |  if_e	jmp	#LR__2575
20a44                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
20a44     08 4E 05 F1 | 	add	fp, #8
20a48     A7 14 02 FB | 	rdlong	arg02, fp
20a4c     08 4E 85 F1 | 	sub	fp, #8
20a50     1C 14 0E F2 | 	cmp	arg02, #28 wz
20a54     28 00 90 5D |  if_ne	jmp	#LR__2570
20a58     08 4E 05 F1 | 	add	fp, #8
20a5c     A7 3C 68 FC | 	wrlong	#30, fp
20a60     08 4E 85 F1 | 	sub	fp, #8
20a64     A7 12 02 FB | 	rdlong	arg01, fp
20a68     09 13 52 F6 | 	abs	arg01, arg01 wc
20a6c     1F 28 C6 C9 |  if_b	decod	local02, #31
20a70     00 28 06 36 |  if_ae	mov	local02, #0
20a74     F8 88 B0 FD | 	call	#__system___float_fromuns
20a78     14 FB 61 F5 | 	xor	result1, local02
20a7c     A7 FA 61 FC | 	wrlong	result1, fp
20a80                 | LR__2570
20a80                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
20a80     08 4E 05 F1 | 	add	fp, #8
20a84     A7 14 02 FB | 	rdlong	arg02, fp
20a88     08 4E 85 F1 | 	sub	fp, #8
20a8c     1D 14 0E F2 | 	cmp	arg02, #29 wz
20a90     18 00 90 5D |  if_ne	jmp	#LR__2571
20a94     08 4E 05 F1 | 	add	fp, #8
20a98     A7 3C 68 FC | 	wrlong	#30, fp
20a9c     08 4E 85 F1 | 	sub	fp, #8
20aa0     A7 12 02 FB | 	rdlong	arg01, fp
20aa4     C8 88 B0 FD | 	call	#__system___float_fromuns
20aa8     A7 FA 61 FC | 	wrlong	result1, fp
20aac                 | LR__2571
20aac                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
20aac     14 4E 05 F1 | 	add	fp, #20
20ab0     A7 14 02 FB | 	rdlong	arg02, fp
20ab4     14 4E 85 F1 | 	sub	fp, #20
20ab8     1C 14 0E F2 | 	cmp	arg02, #28 wz
20abc     34 00 90 5D |  if_ne	jmp	#LR__2572
20ac0     14 4E 05 F1 | 	add	fp, #20
20ac4     A7 3C 68 FC | 	wrlong	#30, fp
20ac8     08 4E 85 F1 | 	sub	fp, #8
20acc     A7 12 02 FB | 	rdlong	arg01, fp
20ad0     0C 4E 85 F1 | 	sub	fp, #12
20ad4     09 13 52 F6 | 	abs	arg01, arg01 wc
20ad8     1F 28 C6 C9 |  if_b	decod	local02, #31
20adc     00 28 06 36 |  if_ae	mov	local02, #0
20ae0     8C 88 B0 FD | 	call	#__system___float_fromuns
20ae4     14 FB 61 F5 | 	xor	result1, local02
20ae8     0C 4E 05 F1 | 	add	fp, #12
20aec     A7 FA 61 FC | 	wrlong	result1, fp
20af0     0C 4E 85 F1 | 	sub	fp, #12
20af4                 | LR__2572
20af4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
20af4     14 4E 05 F1 | 	add	fp, #20
20af8     A7 14 02 FB | 	rdlong	arg02, fp
20afc     14 4E 85 F1 | 	sub	fp, #20
20b00     1D 14 0E F2 | 	cmp	arg02, #29 wz
20b04     24 00 90 5D |  if_ne	jmp	#LR__2573
20b08     14 4E 05 F1 | 	add	fp, #20
20b0c     A7 3C 68 FC | 	wrlong	#30, fp
20b10     08 4E 85 F1 | 	sub	fp, #8
20b14     A7 12 02 FB | 	rdlong	arg01, fp
20b18     0C 4E 85 F1 | 	sub	fp, #12
20b1c     50 88 B0 FD | 	call	#__system___float_fromuns
20b20     0C 4E 05 F1 | 	add	fp, #12
20b24     A7 FA 61 FC | 	wrlong	result1, fp
20b28     0C 4E 85 F1 | 	sub	fp, #12
20b2c                 | LR__2573
20b2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
20b2c     08 4E 05 F1 | 	add	fp, #8
20b30     A7 14 02 FB | 	rdlong	arg02, fp
20b34     08 4E 85 F1 | 	sub	fp, #8
20b38     1E 14 0E F2 | 	cmp	arg02, #30 wz
20b3c     14 4E 05 A1 |  if_e	add	fp, #20
20b40     A7 26 02 AB |  if_e	rdlong	local01, fp
20b44     14 4E 85 A1 |  if_e	sub	fp, #20
20b48     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
20b4c     1C 00 90 5D |  if_ne	jmp	#LR__2574
20b50     A7 12 02 FB | 	rdlong	arg01, fp
20b54     0C 4E 05 F1 | 	add	fp, #12
20b58     A7 14 02 FB | 	rdlong	arg02, fp
20b5c     0C 4E 85 F1 | 	sub	fp, #12
20b60     18 9B B0 FD | 	call	#__system____builtin_powf
20b64     A7 FA 61 FC | 	wrlong	result1, fp
20b68     10 00 90 FD | 	jmp	#LR__2575
20b6c                 | LR__2574
20b6c     A7 1A 68 FC | 	wrlong	#13, fp
20b70     08 4E 05 F1 | 	add	fp, #8
20b74     A7 FE 69 FC | 	wrlong	#255, fp
20b78     08 4E 85 F1 | 	sub	fp, #8
20b7c                 | LR__2575
20b7c     A7 12 02 F6 | 	mov	arg01, fp
20b80     7C CA BE FD | 	call	#_push
20b84     A7 F0 03 F6 | 	mov	ptra, fp
20b88     B2 00 A0 FD | 	call	#popregs_
20b8c                 | _do_power_ret
20b8c     2D 00 64 FD | 	ret
20b90                 | 
20b90                 | ' 
20b90                 | ' '--------------------------------- SHL
20b90                 | ' 
20b90                 | ' sub do_shl 
20b90                 | _do_shl
20b90     03 4A 05 F6 | 	mov	COUNT_, #3
20b94     A8 00 A0 FD | 	call	#pushregs_
20b98     18 F0 07 F1 | 	add	ptra, #24
20b9c     C8 C9 BE FD | 	call	#_pop
20ba0     FD 12 02 F6 | 	mov	arg01, result1
20ba4     FE 26 02 F6 | 	mov	local01, result2
20ba8     FF 28 02 F6 | 	mov	local02, result3
20bac     0C 4E 05 F1 | 	add	fp, #12
20bb0     A7 12 62 FC | 	wrlong	arg01, fp
20bb4     04 4E 05 F1 | 	add	fp, #4
20bb8     A7 26 62 FC | 	wrlong	local01, fp
20bbc     04 4E 05 F1 | 	add	fp, #4
20bc0     A7 28 62 FC | 	wrlong	local02, fp
20bc4     14 4E 85 F1 | 	sub	fp, #20
20bc8     9C C9 BE FD | 	call	#_pop
20bcc     FF 2A 02 F6 | 	mov	local03, result3
20bd0     A7 FA 61 FC | 	wrlong	result1, fp
20bd4     04 4E 05 F1 | 	add	fp, #4
20bd8     A7 FC 61 FC | 	wrlong	result2, fp
20bdc     04 4E 05 F1 | 	add	fp, #4
20be0     A7 2A 62 FC | 	wrlong	local03, fp
20be4                 | ' 
20be4                 | ' t2=pop()
20be4                 | ' t1=pop()
20be4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20be4     08 4E 85 F1 | 	sub	fp, #8
20be8     1C 2A 0E F2 | 	cmp	local03, #28 wz
20bec     A7 2A 02 AB |  if_e	rdlong	local03, fp
20bf0     A7 2A 62 AC |  if_e	wrlong	local03, fp
20bf4     08 4E 05 A1 |  if_e	add	fp, #8
20bf8     A7 3A 68 AC |  if_e	wrlong	#29, fp
20bfc     08 4E 85 A1 |  if_e	sub	fp, #8
20c00                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20c00     14 4E 05 F1 | 	add	fp, #20
20c04     A7 2A 02 FB | 	rdlong	local03, fp
20c08     14 4E 85 F1 | 	sub	fp, #20
20c0c     1C 2A 0E F2 | 	cmp	local03, #28 wz
20c10     18 00 90 5D |  if_ne	jmp	#LR__2580
20c14     0C 4E 05 F1 | 	add	fp, #12
20c18     A7 2A 02 FB | 	rdlong	local03, fp
20c1c     A7 2A 62 FC | 	wrlong	local03, fp
20c20     08 4E 05 F1 | 	add	fp, #8
20c24     A7 3A 68 FC | 	wrlong	#29, fp
20c28     14 4E 85 F1 | 	sub	fp, #20
20c2c                 | LR__2580
20c2c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
20c2c     08 4E 05 F1 | 	add	fp, #8
20c30     A7 2A 02 FB | 	rdlong	local03, fp
20c34     08 4E 85 F1 | 	sub	fp, #8
20c38     1F 2A 0E F2 | 	cmp	local03, #31 wz
20c3c     14 4E 05 51 |  if_ne	add	fp, #20
20c40     A7 28 02 5B |  if_ne	rdlong	local02, fp
20c44     14 4E 85 51 |  if_ne	sub	fp, #20
20c48     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20c4c     08 4E 05 51 |  if_ne	add	fp, #8
20c50     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20c54     08 4E 85 51 |  if_ne	sub	fp, #8
20c58     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20c5c     14 4E 05 51 |  if_ne	add	fp, #20
20c60     14 4E 85 51 |  if_ne	sub	fp, #20
20c64     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20c68     A7 0C 68 AC |  if_e	wrlong	#6, fp
20c6c     08 4E 05 A1 |  if_e	add	fp, #8
20c70     A7 FE 69 AC |  if_e	wrlong	#255, fp
20c74     08 4E 85 A1 |  if_e	sub	fp, #8
20c78     18 00 90 AD |  if_e	jmp	#LR__2581
20c7c     A7 2A 02 FB | 	rdlong	local03, fp
20c80     0C 4E 05 F1 | 	add	fp, #12
20c84     A7 26 02 FB | 	rdlong	local01, fp
20c88     0C 4E 85 F1 | 	sub	fp, #12
20c8c     13 2B 62 F0 | 	shl	local03, local01
20c90     A7 2A 62 FC | 	wrlong	local03, fp
20c94                 | LR__2581
20c94     A7 12 02 F6 | 	mov	arg01, fp
20c98     64 C9 BE FD | 	call	#_push
20c9c     A7 F0 03 F6 | 	mov	ptra, fp
20ca0     B2 00 A0 FD | 	call	#popregs_
20ca4                 | _do_shl_ret
20ca4     2D 00 64 FD | 	ret
20ca8                 | 
20ca8                 | ' 
20ca8                 | ' '--------------------------------- SHR
20ca8                 | ' 
20ca8                 | ' sub do_shr 
20ca8                 | _do_shr
20ca8     03 4A 05 F6 | 	mov	COUNT_, #3
20cac     A8 00 A0 FD | 	call	#pushregs_
20cb0     18 F0 07 F1 | 	add	ptra, #24
20cb4     B0 C8 BE FD | 	call	#_pop
20cb8     FD 12 02 F6 | 	mov	arg01, result1
20cbc     FE 26 02 F6 | 	mov	local01, result2
20cc0     FF 28 02 F6 | 	mov	local02, result3
20cc4     0C 4E 05 F1 | 	add	fp, #12
20cc8     A7 12 62 FC | 	wrlong	arg01, fp
20ccc     04 4E 05 F1 | 	add	fp, #4
20cd0     A7 26 62 FC | 	wrlong	local01, fp
20cd4     04 4E 05 F1 | 	add	fp, #4
20cd8     A7 28 62 FC | 	wrlong	local02, fp
20cdc     14 4E 85 F1 | 	sub	fp, #20
20ce0     84 C8 BE FD | 	call	#_pop
20ce4     FF 2A 02 F6 | 	mov	local03, result3
20ce8     A7 FA 61 FC | 	wrlong	result1, fp
20cec     04 4E 05 F1 | 	add	fp, #4
20cf0     A7 FC 61 FC | 	wrlong	result2, fp
20cf4     04 4E 05 F1 | 	add	fp, #4
20cf8     A7 2A 62 FC | 	wrlong	local03, fp
20cfc                 | ' 
20cfc                 | ' t2=pop()
20cfc                 | ' t1=pop()
20cfc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20cfc     08 4E 85 F1 | 	sub	fp, #8
20d00     1C 2A 0E F2 | 	cmp	local03, #28 wz
20d04     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d08     A7 2A 62 AC |  if_e	wrlong	local03, fp
20d0c     08 4E 05 A1 |  if_e	add	fp, #8
20d10     A7 3A 68 AC |  if_e	wrlong	#29, fp
20d14     08 4E 85 A1 |  if_e	sub	fp, #8
20d18                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20d18     14 4E 05 F1 | 	add	fp, #20
20d1c     A7 2A 02 FB | 	rdlong	local03, fp
20d20     14 4E 85 F1 | 	sub	fp, #20
20d24     1C 2A 0E F2 | 	cmp	local03, #28 wz
20d28     18 00 90 5D |  if_ne	jmp	#LR__2590
20d2c     0C 4E 05 F1 | 	add	fp, #12
20d30     A7 2A 02 FB | 	rdlong	local03, fp
20d34     A7 2A 62 FC | 	wrlong	local03, fp
20d38     08 4E 05 F1 | 	add	fp, #8
20d3c     A7 3A 68 FC | 	wrlong	#29, fp
20d40     14 4E 85 F1 | 	sub	fp, #20
20d44                 | LR__2590
20d44                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
20d44     08 4E 05 F1 | 	add	fp, #8
20d48     A7 2A 02 FB | 	rdlong	local03, fp
20d4c     08 4E 85 F1 | 	sub	fp, #8
20d50     1F 2A 0E F2 | 	cmp	local03, #31 wz
20d54     14 4E 05 51 |  if_ne	add	fp, #20
20d58     A7 28 02 5B |  if_ne	rdlong	local02, fp
20d5c     14 4E 85 51 |  if_ne	sub	fp, #20
20d60     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20d64     08 4E 05 51 |  if_ne	add	fp, #8
20d68     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20d6c     08 4E 85 51 |  if_ne	sub	fp, #8
20d70     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20d74     14 4E 05 51 |  if_ne	add	fp, #20
20d78     14 4E 85 51 |  if_ne	sub	fp, #20
20d7c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20d80     A7 0C 68 AC |  if_e	wrlong	#6, fp
20d84     08 4E 05 A1 |  if_e	add	fp, #8
20d88     A7 FE 69 AC |  if_e	wrlong	#255, fp
20d8c     08 4E 85 A1 |  if_e	sub	fp, #8
20d90     18 00 90 AD |  if_e	jmp	#LR__2591
20d94     A7 2A 02 FB | 	rdlong	local03, fp
20d98     0C 4E 05 F1 | 	add	fp, #12
20d9c     A7 26 02 FB | 	rdlong	local01, fp
20da0     0C 4E 85 F1 | 	sub	fp, #12
20da4     13 2B 42 F0 | 	shr	local03, local01
20da8     A7 2A 62 FC | 	wrlong	local03, fp
20dac                 | LR__2591
20dac     A7 12 02 F6 | 	mov	arg01, fp
20db0     4C C8 BE FD | 	call	#_push
20db4     A7 F0 03 F6 | 	mov	ptra, fp
20db8     B2 00 A0 FD | 	call	#popregs_
20dbc                 | _do_shr_ret
20dbc     2D 00 64 FD | 	ret
20dc0                 | 
20dc0                 | ' 
20dc0                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
20dc0                 | ' 
20dc0                 | ' ''----------------------------------------------------------------------------------------------------
20dc0                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
20dc0                 | ' ''----------------------------------------------------------------------------------------------------
20dc0                 | ' 
20dc0                 | ' ''--------------------------- Command function pointers
20dc0                 | ' 
20dc0                 | ' sub init_commands
20dc0                 | _init_commands
20dc0                 | ' 
20dc0                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
20dc0     00 00 06 F6 | 	mov	_var01, #0
20dc4     97 16 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
20dc8                 | LR__2600
20dc8     00 FB 01 F6 | 	mov	result1, _var01
20dcc     02 FA 65 F0 | 	shl	result1, #2
20dd0     43 00 00 FF 
20dd4     60 E4 05 F1 | 	add	objptr, ##34400
20dd8     F2 FA 01 F1 | 	add	result1, objptr
20ddc     43 00 00 FF 
20de0     60 E4 85 F1 | 	sub	objptr, ##34400
20de4     FD E4 61 FC | 	wrlong	objptr, result1
20de8     01 00 06 F1 | 	add	_var01, #1
20dec     00 01 56 F2 | 	cmps	_var01, #256 wc
20df0     D4 FF 9F CD |  if_b	jmp	#LR__2600
20df4                 | LR__2601
20df4     F2 FA 01 F6 | 	mov	result1, objptr
20df8     14 FA 25 F4 | 	bith	result1, #20
20dfc     43 00 00 FF 
20e00     64 E4 05 F1 | 	add	objptr, ##34404
20e04     F2 FA 61 FC | 	wrlong	result1, objptr
20e08     43 00 00 FF 
20e0c     64 E4 85 F1 | 	sub	objptr, ##34404
20e10     F2 FA 01 F6 | 	mov	result1, objptr
20e14     15 FA 25 F4 | 	bith	result1, #21
20e18     43 00 00 FF 
20e1c     68 E4 05 F1 | 	add	objptr, ##34408
20e20     F2 FA 61 FC | 	wrlong	result1, objptr
20e24     43 00 00 FF 
20e28     68 E4 85 F1 | 	sub	objptr, ##34408
20e2c     F2 FA 01 F6 | 	mov	result1, objptr
20e30     34 FA 25 F4 | 	bith	result1, #52
20e34     43 00 00 FF 
20e38     6C E4 05 F1 | 	add	objptr, ##34412
20e3c     F2 FA 61 FC | 	wrlong	result1, objptr
20e40     43 00 00 FF 
20e44     6C E4 85 F1 | 	sub	objptr, ##34412
20e48     F2 FA 01 F6 | 	mov	result1, objptr
20e4c     16 FA 25 F4 | 	bith	result1, #22
20e50     43 00 00 FF 
20e54     74 E4 05 F1 | 	add	objptr, ##34420
20e58     F2 FA 61 FC | 	wrlong	result1, objptr
20e5c     43 00 00 FF 
20e60     74 E4 85 F1 | 	sub	objptr, ##34420
20e64     F2 FA 01 F6 | 	mov	result1, objptr
20e68     00 28 00 FF 
20e6c     00 FA 45 F5 | 	or	result1, ##5242880
20e70     43 00 00 FF 
20e74     78 E4 05 F1 | 	add	objptr, ##34424
20e78     F2 FA 61 FC | 	wrlong	result1, objptr
20e7c     43 00 00 FF 
20e80     78 E4 85 F1 | 	sub	objptr, ##34424
20e84     F2 FA 01 F6 | 	mov	result1, objptr
20e88     35 FA 25 F4 | 	bith	result1, #53
20e8c     43 00 00 FF 
20e90     7C E4 05 F1 | 	add	objptr, ##34428
20e94     F2 FA 61 FC | 	wrlong	result1, objptr
20e98     43 00 00 FF 
20e9c     7C E4 85 F1 | 	sub	objptr, ##34428
20ea0     F2 FA 01 F6 | 	mov	result1, objptr
20ea4     54 FA 25 F4 | 	bith	result1, #84
20ea8     43 00 00 FF 
20eac     80 E4 05 F1 | 	add	objptr, ##34432
20eb0     F2 FA 61 FC | 	wrlong	result1, objptr
20eb4     43 00 00 FF 
20eb8     80 E4 85 F1 | 	sub	objptr, ##34432
20ebc     F2 FA 01 F6 | 	mov	result1, objptr
20ec0     17 FA 25 F4 | 	bith	result1, #23
20ec4     43 00 00 FF 
20ec8     84 E4 05 F1 | 	add	objptr, ##34436
20ecc     F2 FA 61 FC | 	wrlong	result1, objptr
20ed0     43 00 00 FF 
20ed4     84 E4 85 F1 | 	sub	objptr, ##34436
20ed8     F2 FA 01 F6 | 	mov	result1, objptr
20edc     00 48 00 FF 
20ee0     00 FA 45 F5 | 	or	result1, ##9437184
20ee4     43 00 00 FF 
20ee8     88 E4 05 F1 | 	add	objptr, ##34440
20eec     F2 FA 61 FC | 	wrlong	result1, objptr
20ef0     43 00 00 FF 
20ef4     88 E4 85 F1 | 	sub	objptr, ##34440
20ef8     F2 FA 01 F6 | 	mov	result1, objptr
20efc     00 50 00 FF 
20f00     00 FA 45 F5 | 	or	result1, ##10485760
20f04     43 00 00 FF 
20f08     8C E4 05 F1 | 	add	objptr, ##34444
20f0c     F2 FA 61 FC | 	wrlong	result1, objptr
20f10     43 00 00 FF 
20f14     8C E4 85 F1 | 	sub	objptr, ##34444
20f18     F2 FA 01 F6 | 	mov	result1, objptr
20f1c     00 58 00 FF 
20f20     00 FA 45 F5 | 	or	result1, ##11534336
20f24     43 00 00 FF 
20f28     90 E4 05 F1 | 	add	objptr, ##34448
20f2c     F2 FA 61 FC | 	wrlong	result1, objptr
20f30     43 00 00 FF 
20f34     90 E4 85 F1 | 	sub	objptr, ##34448
20f38     F2 FA 01 F6 | 	mov	result1, objptr
20f3c     36 FA 25 F4 | 	bith	result1, #54
20f40     43 00 00 FF 
20f44     A4 E4 05 F1 | 	add	objptr, ##34468
20f48     F2 FA 61 FC | 	wrlong	result1, objptr
20f4c     43 00 00 FF 
20f50     A4 E4 85 F1 | 	sub	objptr, ##34468
20f54     F2 FA 01 F6 | 	mov	result1, objptr
20f58     00 68 00 FF 
20f5c     00 FA 45 F5 | 	or	result1, ##13631488
20f60     43 00 00 FF 
20f64     D4 E4 05 F1 | 	add	objptr, ##34516
20f68     F2 FA 61 FC | 	wrlong	result1, objptr
20f6c     43 00 00 FF 
20f70     D4 E4 85 F1 | 	sub	objptr, ##34516
20f74     F2 FA 01 F6 | 	mov	result1, objptr
20f78     00 68 00 FF 
20f7c     00 FA 45 F5 | 	or	result1, ##13631488
20f80     43 00 00 FF 
20f84     D0 E4 05 F1 | 	add	objptr, ##34512
20f88     F2 FA 61 FC | 	wrlong	result1, objptr
20f8c     43 00 00 FF 
20f90     D0 E4 85 F1 | 	sub	objptr, ##34512
20f94     F2 FA 01 F6 | 	mov	result1, objptr
20f98     00 68 00 FF 
20f9c     00 FA 45 F5 | 	or	result1, ##13631488
20fa0     43 00 00 FF 
20fa4     D8 E4 05 F1 | 	add	objptr, ##34520
20fa8     F2 FA 61 FC | 	wrlong	result1, objptr
20fac     43 00 00 FF 
20fb0     D8 E4 85 F1 | 	sub	objptr, ##34520
20fb4     F2 FA 01 F6 | 	mov	result1, objptr
20fb8     00 68 00 FF 
20fbc     00 FA 45 F5 | 	or	result1, ##13631488
20fc0     43 00 00 FF 
20fc4     DC E4 05 F1 | 	add	objptr, ##34524
20fc8     F2 FA 61 FC | 	wrlong	result1, objptr
20fcc     43 00 00 FF 
20fd0     DC E4 85 F1 | 	sub	objptr, ##34524
20fd4     F2 FA 01 F6 | 	mov	result1, objptr
20fd8     00 68 00 FF 
20fdc     00 FA 45 F5 | 	or	result1, ##13631488
20fe0     43 00 00 FF 
20fe4     0C E5 05 F1 | 	add	objptr, ##34572
20fe8     F2 FA 61 FC | 	wrlong	result1, objptr
20fec     43 00 00 FF 
20ff0     0C E5 85 F1 | 	sub	objptr, ##34572
20ff4     F2 FA 01 F6 | 	mov	result1, objptr
20ff8     55 FA 25 F4 | 	bith	result1, #85
20ffc     43 00 00 FF 
21000     BC E4 05 F1 | 	add	objptr, ##34492
21004     F2 FA 61 FC | 	wrlong	result1, objptr
21008     43 00 00 FF 
2100c     BC E4 85 F1 | 	sub	objptr, ##34492
21010     F2 FA 01 F6 | 	mov	result1, objptr
21014     00 68 00 FF 
21018     00 FA 45 F5 | 	or	result1, ##13631488
2101c     43 00 00 FF 
21020     10 E5 05 F1 | 	add	objptr, ##34576
21024     F2 FA 61 FC | 	wrlong	result1, objptr
21028     43 00 00 FF 
2102c     10 E5 85 F1 | 	sub	objptr, ##34576
21030     F2 FA 01 F6 | 	mov	result1, objptr
21034     00 68 00 FF 
21038     00 FA 45 F5 | 	or	result1, ##13631488
2103c     43 00 00 FF 
21040     E0 E4 05 F1 | 	add	objptr, ##34528
21044     F2 FA 61 FC | 	wrlong	result1, objptr
21048     43 00 00 FF 
2104c     E0 E4 85 F1 | 	sub	objptr, ##34528
21050     F2 FA 01 F6 | 	mov	result1, objptr
21054     00 68 00 FF 
21058     00 FA 45 F5 | 	or	result1, ##13631488
2105c     43 00 00 FF 
21060     E4 E4 05 F1 | 	add	objptr, ##34532
21064     F2 FA 61 FC | 	wrlong	result1, objptr
21068     43 00 00 FF 
2106c     E4 E4 85 F1 | 	sub	objptr, ##34532
21070     F2 FA 01 F6 | 	mov	result1, objptr
21074     00 68 00 FF 
21078     00 FA 45 F5 | 	or	result1, ##13631488
2107c     43 00 00 FF 
21080     E8 E4 05 F1 | 	add	objptr, ##34536
21084     F2 FA 61 FC | 	wrlong	result1, objptr
21088     43 00 00 FF 
2108c     E8 E4 85 F1 | 	sub	objptr, ##34536
21090     F2 FA 01 F6 | 	mov	result1, objptr
21094     74 FA 25 F4 | 	bith	result1, #116
21098     43 00 00 FF 
2109c     60 E5 05 F1 | 	add	objptr, ##34656
210a0     F2 FA 61 FC | 	wrlong	result1, objptr
210a4     43 00 00 FF 
210a8     60 E5 85 F1 | 	sub	objptr, ##34656
210ac     F2 FA 01 F6 | 	mov	result1, objptr
210b0     18 FA 25 F4 | 	bith	result1, #24
210b4     43 00 00 FF 
210b8     64 E5 05 F1 | 	add	objptr, ##34660
210bc     F2 FA 61 FC | 	wrlong	result1, objptr
210c0     43 00 00 FF 
210c4     64 E5 85 F1 | 	sub	objptr, ##34660
210c8     F2 FA 01 F6 | 	mov	result1, objptr
210cc     00 88 00 FF 
210d0     00 FA 45 F5 | 	or	result1, ##17825792
210d4     43 00 00 FF 
210d8     68 E5 05 F1 | 	add	objptr, ##34664
210dc     F2 FA 61 FC | 	wrlong	result1, objptr
210e0     43 00 00 FF 
210e4     68 E5 85 F1 | 	sub	objptr, ##34664
210e8     F2 FA 01 F6 | 	mov	result1, objptr
210ec     00 90 00 FF 
210f0     00 FA 45 F5 | 	or	result1, ##18874368
210f4     43 00 00 FF 
210f8     6C E5 05 F1 | 	add	objptr, ##34668
210fc     F2 FA 61 FC | 	wrlong	result1, objptr
21100     43 00 00 FF 
21104     6C E5 85 F1 | 	sub	objptr, ##34668
21108     F2 FA 01 F6 | 	mov	result1, objptr
2110c     00 98 00 FF 
21110     00 FA 45 F5 | 	or	result1, ##19922944
21114     43 00 00 FF 
21118     70 E5 05 F1 | 	add	objptr, ##34672
2111c     F2 FA 61 FC | 	wrlong	result1, objptr
21120     43 00 00 FF 
21124     70 E5 85 F1 | 	sub	objptr, ##34672
21128     F2 FA 01 F6 | 	mov	result1, objptr
2112c     00 A0 00 FF 
21130     00 FA 45 F5 | 	or	result1, ##20971520
21134     43 00 00 FF 
21138     74 E5 05 F1 | 	add	objptr, ##34676
2113c     F2 FA 61 FC | 	wrlong	result1, objptr
21140     43 00 00 FF 
21144     74 E5 85 F1 | 	sub	objptr, ##34676
21148     F2 FA 01 F6 | 	mov	result1, objptr
2114c     00 A8 00 FF 
21150     00 FA 45 F5 | 	or	result1, ##22020096
21154     43 00 00 FF 
21158     78 E5 05 F1 | 	add	objptr, ##34680
2115c     F2 FA 61 FC | 	wrlong	result1, objptr
21160     43 00 00 FF 
21164     78 E5 85 F1 | 	sub	objptr, ##34680
21168     F2 FA 01 F6 | 	mov	result1, objptr
2116c     00 B0 00 FF 
21170     00 FA 45 F5 | 	or	result1, ##23068672
21174     43 00 00 FF 
21178     7C E5 05 F1 | 	add	objptr, ##34684
2117c     F2 FA 61 FC | 	wrlong	result1, objptr
21180     43 00 00 FF 
21184     7C E5 85 F1 | 	sub	objptr, ##34684
21188     F2 FA 01 F6 | 	mov	result1, objptr
2118c     00 B8 00 FF 
21190     00 FA 45 F5 | 	or	result1, ##24117248
21194     43 00 00 FF 
21198     80 E5 05 F1 | 	add	objptr, ##34688
2119c     F2 FA 61 FC | 	wrlong	result1, objptr
211a0     43 00 00 FF 
211a4     80 E5 85 F1 | 	sub	objptr, ##34688
211a8     F2 FA 01 F6 | 	mov	result1, objptr
211ac     37 FA 25 F4 | 	bith	result1, #55
211b0     43 00 00 FF 
211b4     84 E5 05 F1 | 	add	objptr, ##34692
211b8     F2 FA 61 FC | 	wrlong	result1, objptr
211bc     43 00 00 FF 
211c0     84 E5 85 F1 | 	sub	objptr, ##34692
211c4     F2 FA 01 F6 | 	mov	result1, objptr
211c8     00 C8 00 FF 
211cc     00 FA 45 F5 | 	or	result1, ##26214400
211d0     43 00 00 FF 
211d4     88 E5 05 F1 | 	add	objptr, ##34696
211d8     F2 FA 61 FC | 	wrlong	result1, objptr
211dc     43 00 00 FF 
211e0     88 E5 85 F1 | 	sub	objptr, ##34696
211e4     F2 FA 01 F6 | 	mov	result1, objptr
211e8     00 D0 00 FF 
211ec     00 FA 45 F5 | 	or	result1, ##27262976
211f0     43 00 00 FF 
211f4     8C E5 05 F1 | 	add	objptr, ##34700
211f8     F2 FA 61 FC | 	wrlong	result1, objptr
211fc     43 00 00 FF 
21200     8C E5 85 F1 | 	sub	objptr, ##34700
21204     F2 FA 01 F6 | 	mov	result1, objptr
21208     00 D8 00 FF 
2120c     00 FA 45 F5 | 	or	result1, ##28311552
21210     43 00 00 FF 
21214     90 E5 05 F1 | 	add	objptr, ##34704
21218     F2 FA 61 FC | 	wrlong	result1, objptr
2121c     43 00 00 FF 
21220     90 E5 85 F1 | 	sub	objptr, ##34704
21224     F2 FA 01 F6 | 	mov	result1, objptr
21228     56 FA 25 F4 | 	bith	result1, #86
2122c     43 00 00 FF 
21230     94 E5 05 F1 | 	add	objptr, ##34708
21234     F2 FA 61 FC | 	wrlong	result1, objptr
21238     43 00 00 FF 
2123c     94 E5 85 F1 | 	sub	objptr, ##34708
21240     F2 FA 01 F6 | 	mov	result1, objptr
21244     00 E8 00 FF 
21248     00 FA 45 F5 | 	or	result1, ##30408704
2124c     45 00 00 FF 
21250     5C E4 05 F1 | 	add	objptr, ##35420
21254     F2 FA 61 FC | 	wrlong	result1, objptr
21258     45 00 00 FF 
2125c     5C E4 85 F1 | 	sub	objptr, ##35420
21260     F2 FA 01 F6 | 	mov	result1, objptr
21264     75 FA 25 F4 | 	bith	result1, #117
21268     43 00 00 FF 
2126c     98 E5 05 F1 | 	add	objptr, ##34712
21270     F2 FA 61 FC | 	wrlong	result1, objptr
21274     43 00 00 FF 
21278     98 E5 85 F1 | 	sub	objptr, ##34712
2127c     F2 FA 01 F6 | 	mov	result1, objptr
21280     94 FA 25 F4 | 	bith	result1, #148
21284     43 00 00 FF 
21288     AC E5 05 F1 | 	add	objptr, ##34732
2128c     F2 FA 61 FC | 	wrlong	result1, objptr
21290     43 00 00 FF 
21294     AC E5 85 F1 | 	sub	objptr, ##34732
21298     F2 FA 01 F6 | 	mov	result1, objptr
2129c     19 FA 25 F4 | 	bith	result1, #25
212a0     43 00 00 FF 
212a4     9C E5 05 F1 | 	add	objptr, ##34716
212a8     F2 FA 61 FC | 	wrlong	result1, objptr
212ac     43 00 00 FF 
212b0     9C E5 85 F1 | 	sub	objptr, ##34716
212b4     F2 FA 01 F6 | 	mov	result1, objptr
212b8     00 08 01 FF 
212bc     00 FA 45 F5 | 	or	result1, ##34603008
212c0     43 00 00 FF 
212c4     B8 E4 05 F1 | 	add	objptr, ##34488
212c8     F2 FA 61 FC | 	wrlong	result1, objptr
212cc     43 00 00 FF 
212d0     B8 E4 85 F1 | 	sub	objptr, ##34488
212d4     F2 FA 01 F6 | 	mov	result1, objptr
212d8     00 10 01 FF 
212dc     00 FA 45 F5 | 	or	result1, ##35651584
212e0     43 00 00 FF 
212e4     A4 E5 05 F1 | 	add	objptr, ##34724
212e8     F2 FA 61 FC | 	wrlong	result1, objptr
212ec     43 00 00 FF 
212f0     A4 E5 85 F1 | 	sub	objptr, ##34724
212f4     F2 FA 01 F6 | 	mov	result1, objptr
212f8     00 18 01 FF 
212fc     00 FA 45 F5 | 	or	result1, ##36700160
21300     43 00 00 FF 
21304     A8 E5 05 F1 | 	add	objptr, ##34728
21308     F2 FA 61 FC | 	wrlong	result1, objptr
2130c     43 00 00 FF 
21310     A8 E5 85 F1 | 	sub	objptr, ##34728
21314     F2 FA 01 F6 | 	mov	result1, objptr
21318     00 20 01 FF 
2131c     00 FA 45 F5 | 	or	result1, ##37748736
21320     43 00 00 FF 
21324     B4 E5 05 F1 | 	add	objptr, ##34740
21328     F2 FA 61 FC | 	wrlong	result1, objptr
2132c     43 00 00 FF 
21330     B4 E5 85 F1 | 	sub	objptr, ##34740
21334     F2 FA 01 F6 | 	mov	result1, objptr
21338     00 28 01 FF 
2133c     00 FA 45 F5 | 	or	result1, ##38797312
21340     43 00 00 FF 
21344     B8 E5 05 F1 | 	add	objptr, ##34744
21348     F2 FA 61 FC | 	wrlong	result1, objptr
2134c     43 00 00 FF 
21350     B8 E5 85 F1 | 	sub	objptr, ##34744
21354     F2 FA 01 F6 | 	mov	result1, objptr
21358     00 30 01 FF 
2135c     00 FA 45 F5 | 	or	result1, ##39845888
21360     43 00 00 FF 
21364     BC E5 05 F1 | 	add	objptr, ##34748
21368     F2 FA 61 FC | 	wrlong	result1, objptr
2136c     43 00 00 FF 
21370     BC E5 85 F1 | 	sub	objptr, ##34748
21374     F2 FA 01 F6 | 	mov	result1, objptr
21378     00 38 01 FF 
2137c     00 FA 45 F5 | 	or	result1, ##40894464
21380     43 00 00 FF 
21384     C0 E5 05 F1 | 	add	objptr, ##34752
21388     F2 FA 61 FC | 	wrlong	result1, objptr
2138c     43 00 00 FF 
21390     C0 E5 85 F1 | 	sub	objptr, ##34752
21394     F2 FA 01 F6 | 	mov	result1, objptr
21398     00 40 01 FF 
2139c     00 FA 45 F5 | 	or	result1, ##41943040
213a0     43 00 00 FF 
213a4     C8 E5 05 F1 | 	add	objptr, ##34760
213a8     F2 FA 61 FC | 	wrlong	result1, objptr
213ac     43 00 00 FF 
213b0     C8 E5 85 F1 | 	sub	objptr, ##34760
213b4     F2 FA 01 F6 | 	mov	result1, objptr
213b8     00 08 01 FF 
213bc     00 FA 45 F5 | 	or	result1, ##34603008
213c0     43 00 00 FF 
213c4     CC E5 05 F1 | 	add	objptr, ##34764
213c8     F2 FA 61 FC | 	wrlong	result1, objptr
213cc     43 00 00 FF 
213d0     CC E5 85 F1 | 	sub	objptr, ##34764
213d4     F2 FA 01 F6 | 	mov	result1, objptr
213d8     00 48 01 FF 
213dc     00 FA 45 F5 | 	or	result1, ##42991616
213e0     43 00 00 FF 
213e4     CC E4 05 F1 | 	add	objptr, ##34508
213e8     F2 FA 61 FC | 	wrlong	result1, objptr
213ec     43 00 00 FF 
213f0     CC E4 85 F1 | 	sub	objptr, ##34508
213f4     F2 FA 01 F6 | 	mov	result1, objptr
213f8     00 50 01 FF 
213fc     00 FA 45 F5 | 	or	result1, ##44040192
21400     43 00 00 FF 
21404     FC E4 05 F1 | 	add	objptr, ##34556
21408     F2 FA 61 FC | 	wrlong	result1, objptr
2140c     43 00 00 FF 
21410     FC E4 85 F1 | 	sub	objptr, ##34556
21414     F2 FA 01 F6 | 	mov	result1, objptr
21418     00 58 01 FF 
2141c     00 FA 45 F5 | 	or	result1, ##45088768
21420     43 00 00 FF 
21424     F8 E4 05 F1 | 	add	objptr, ##34552
21428     F2 FA 61 FC | 	wrlong	result1, objptr
2142c     43 00 00 FF 
21430     F8 E4 85 F1 | 	sub	objptr, ##34552
21434     F2 FA 01 F6 | 	mov	result1, objptr
21438     00 60 01 FF 
2143c     00 FA 45 F5 | 	or	result1, ##46137344
21440     43 00 00 FF 
21444     9C E4 05 F1 | 	add	objptr, ##34460
21448     F2 FA 61 FC | 	wrlong	result1, objptr
2144c     43 00 00 FF 
21450     9C E4 85 F1 | 	sub	objptr, ##34460
21454     F2 FA 01 F6 | 	mov	result1, objptr
21458     00 68 01 FF 
2145c     00 FA 45 F5 | 	or	result1, ##47185920
21460     43 00 00 FF 
21464     A0 E4 05 F1 | 	add	objptr, ##34464
21468     F2 FA 61 FC | 	wrlong	result1, objptr
2146c     43 00 00 FF 
21470     A0 E4 85 F1 | 	sub	objptr, ##34464
21474     F2 FA 01 F6 | 	mov	result1, objptr
21478     00 70 01 FF 
2147c     00 FA 45 F5 | 	or	result1, ##48234496
21480     43 00 00 FF 
21484     08 E5 05 F1 | 	add	objptr, ##34568
21488     F2 FA 61 FC | 	wrlong	result1, objptr
2148c     43 00 00 FF 
21490     08 E5 85 F1 | 	sub	objptr, ##34568
21494     F2 FA 01 F6 | 	mov	result1, objptr
21498     00 78 01 FF 
2149c     00 FA 45 F5 | 	or	result1, ##49283072
214a0     43 00 00 FF 
214a4     B0 E5 05 F1 | 	add	objptr, ##34736
214a8     F2 FA 61 FC | 	wrlong	result1, objptr
214ac     43 00 00 FF 
214b0     B0 E5 85 F1 | 	sub	objptr, ##34736
214b4     F2 FA 01 F6 | 	mov	result1, objptr
214b8     38 FA 25 F4 | 	bith	result1, #56
214bc     43 00 00 FF 
214c0     C4 E5 05 F1 | 	add	objptr, ##34756
214c4     F2 FA 61 FC | 	wrlong	result1, objptr
214c8     43 00 00 FF 
214cc     C4 E5 85 F1 | 	sub	objptr, ##34756
214d0     F2 FA 01 F6 | 	mov	result1, objptr
214d4     00 88 01 FF 
214d8     00 FA 45 F5 | 	or	result1, ##51380224
214dc     43 00 00 FF 
214e0     D0 E5 05 F1 | 	add	objptr, ##34768
214e4     F2 FA 61 FC | 	wrlong	result1, objptr
214e8     43 00 00 FF 
214ec     D0 E5 85 F1 | 	sub	objptr, ##34768
214f0     F2 FA 01 F6 | 	mov	result1, objptr
214f4     00 90 01 FF 
214f8     00 FA 45 F5 | 	or	result1, ##52428800
214fc     43 00 00 FF 
21500     D4 E5 05 F1 | 	add	objptr, ##34772
21504     F2 FA 61 FC | 	wrlong	result1, objptr
21508     43 00 00 FF 
2150c     D4 E5 85 F1 | 	sub	objptr, ##34772
21510     F2 FA 01 F6 | 	mov	result1, objptr
21514     00 98 01 FF 
21518     00 FA 45 F5 | 	or	result1, ##53477376
2151c     43 00 00 FF 
21520     D8 E5 05 F1 | 	add	objptr, ##34776
21524     F2 FA 61 FC | 	wrlong	result1, objptr
21528     43 00 00 FF 
2152c     D8 E5 85 F1 | 	sub	objptr, ##34776
21530     F2 FA 01 F6 | 	mov	result1, objptr
21534     00 A0 01 FF 
21538     00 FA 45 F5 | 	or	result1, ##54525952
2153c     43 00 00 FF 
21540     DC E5 05 F1 | 	add	objptr, ##34780
21544     F2 FA 61 FC | 	wrlong	result1, objptr
21548     43 00 00 FF 
2154c     DC E5 85 F1 | 	sub	objptr, ##34780
21550     F2 FA 01 F6 | 	mov	result1, objptr
21554     00 A8 01 FF 
21558     00 FA 45 F5 | 	or	result1, ##55574528
2155c     43 00 00 FF 
21560     E0 E5 05 F1 | 	add	objptr, ##34784
21564     F2 FA 61 FC | 	wrlong	result1, objptr
21568     43 00 00 FF 
2156c     E0 E5 85 F1 | 	sub	objptr, ##34784
21570     F2 FA 01 F6 | 	mov	result1, objptr
21574     00 B0 01 FF 
21578     00 FA 45 F5 | 	or	result1, ##56623104
2157c     43 00 00 FF 
21580     E4 E5 05 F1 | 	add	objptr, ##34788
21584     F2 FA 61 FC | 	wrlong	result1, objptr
21588     43 00 00 FF 
2158c     E4 E5 85 F1 | 	sub	objptr, ##34788
21590     F2 FA 01 F6 | 	mov	result1, objptr
21594     94 FA 25 F4 | 	bith	result1, #148
21598     43 00 00 FF 
2159c     AC E5 05 F1 | 	add	objptr, ##34732
215a0     F2 FA 61 FC | 	wrlong	result1, objptr
215a4     43 00 00 FF 
215a8     AC E5 85 F1 | 	sub	objptr, ##34732
215ac     F2 FA 01 F6 | 	mov	result1, objptr
215b0     00 B8 01 FF 
215b4     00 FA 45 F5 | 	or	result1, ##57671680
215b8     43 00 00 FF 
215bc     EC E5 05 F1 | 	add	objptr, ##34796
215c0     F2 FA 61 FC | 	wrlong	result1, objptr
215c4     43 00 00 FF 
215c8     EC E5 85 F1 | 	sub	objptr, ##34796
215cc     F2 FA 01 F6 | 	mov	result1, objptr
215d0     57 FA 25 F4 | 	bith	result1, #87
215d4     43 00 00 FF 
215d8     E8 E5 05 F1 | 	add	objptr, ##34792
215dc     F2 FA 61 FC | 	wrlong	result1, objptr
215e0     43 00 00 FF 
215e4     E8 E5 85 F1 | 	sub	objptr, ##34792
215e8     F2 FA 01 F6 | 	mov	result1, objptr
215ec     00 C8 01 FF 
215f0     00 FA 45 F5 | 	or	result1, ##59768832
215f4     44 00 00 FF 
215f8     00 E4 05 F1 | 	add	objptr, ##34816
215fc     F2 FA 61 FC | 	wrlong	result1, objptr
21600     44 00 00 FF 
21604     00 E4 85 F1 | 	sub	objptr, ##34816
21608     F2 FA 01 F6 | 	mov	result1, objptr
2160c     00 D0 01 FF 
21610     00 FA 45 F5 | 	or	result1, ##60817408
21614     44 00 00 FF 
21618     04 E4 05 F1 | 	add	objptr, ##34820
2161c     F2 FA 61 FC | 	wrlong	result1, objptr
21620     44 00 00 FF 
21624     04 E4 85 F1 | 	sub	objptr, ##34820
21628     F2 FA 01 F6 | 	mov	result1, objptr
2162c     00 D8 01 FF 
21630     00 FA 45 F5 | 	or	result1, ##61865984
21634     43 00 00 FF 
21638     F0 E5 05 F1 | 	add	objptr, ##34800
2163c     F2 FA 61 FC | 	wrlong	result1, objptr
21640     43 00 00 FF 
21644     F0 E5 85 F1 | 	sub	objptr, ##34800
21648     F2 FA 01 F6 | 	mov	result1, objptr
2164c     76 FA 25 F4 | 	bith	result1, #118
21650     43 00 00 FF 
21654     F4 E5 05 F1 | 	add	objptr, ##34804
21658     F2 FA 61 FC | 	wrlong	result1, objptr
2165c     43 00 00 FF 
21660     F4 E5 85 F1 | 	sub	objptr, ##34804
21664     F2 FA 01 F6 | 	mov	result1, objptr
21668     00 E8 01 FF 
2166c     00 FA 45 F5 | 	or	result1, ##63963136
21670     43 00 00 FF 
21674     F8 E5 05 F1 | 	add	objptr, ##34808
21678     F2 FA 61 FC | 	wrlong	result1, objptr
2167c     43 00 00 FF 
21680     F8 E5 85 F1 | 	sub	objptr, ##34808
21684     F2 FA 01 F6 | 	mov	result1, objptr
21688     95 FA 25 F4 | 	bith	result1, #149
2168c     43 00 00 FF 
21690     FC E5 05 F1 | 	add	objptr, ##34812
21694     F2 FA 61 FC | 	wrlong	result1, objptr
21698     43 00 00 FF 
2169c     FC E5 85 F1 | 	sub	objptr, ##34812
216a0     F2 FA 01 F6 | 	mov	result1, objptr
216a4     B4 FA 25 F4 | 	bith	result1, #180
216a8     44 00 00 FF 
216ac     0C E4 05 F1 | 	add	objptr, ##34828
216b0     F2 FA 61 FC | 	wrlong	result1, objptr
216b4     44 00 00 FF 
216b8     0C E4 85 F1 | 	sub	objptr, ##34828
216bc     F2 FA 01 F6 | 	mov	result1, objptr
216c0     1A FA 25 F4 | 	bith	result1, #26
216c4     44 00 00 FF 
216c8     08 E4 05 F1 | 	add	objptr, ##34824
216cc     F2 FA 61 FC | 	wrlong	result1, objptr
216d0     44 00 00 FF 
216d4     08 E4 85 F1 | 	sub	objptr, ##34824
216d8     F2 FA 01 F6 | 	mov	result1, objptr
216dc     00 08 02 FF 
216e0     00 FA 45 F5 | 	or	result1, ##68157440
216e4     44 00 00 FF 
216e8     18 E4 05 F1 | 	add	objptr, ##34840
216ec     F2 FA 61 FC | 	wrlong	result1, objptr
216f0     44 00 00 FF 
216f4     18 E4 85 F1 | 	sub	objptr, ##34840
216f8     F2 FA 01 F6 | 	mov	result1, objptr
216fc     00 10 02 FF 
21700     00 FA 45 F5 | 	or	result1, ##69206016
21704     44 00 00 FF 
21708     14 E4 05 F1 | 	add	objptr, ##34836
2170c     F2 FA 61 FC | 	wrlong	result1, objptr
21710     44 00 00 FF 
21714     14 E4 85 F1 | 	sub	objptr, ##34836
21718     F2 FA 01 F6 | 	mov	result1, objptr
2171c     00 18 02 FF 
21720     00 FA 45 F5 | 	or	result1, ##70254592
21724     44 00 00 FF 
21728     10 E4 05 F1 | 	add	objptr, ##34832
2172c     F2 FA 61 FC | 	wrlong	result1, objptr
21730     44 00 00 FF 
21734     10 E4 85 F1 | 	sub	objptr, ##34832
21738     F2 FA 01 F6 | 	mov	result1, objptr
2173c     00 20 02 FF 
21740     00 FA 45 F5 | 	or	result1, ##71303168
21744     44 00 00 FF 
21748     1C E4 05 F1 | 	add	objptr, ##34844
2174c     F2 FA 61 FC | 	wrlong	result1, objptr
21750     44 00 00 FF 
21754     1C E4 85 F1 | 	sub	objptr, ##34844
21758     F2 FA 01 F6 | 	mov	result1, objptr
2175c     00 28 02 FF 
21760     00 FA 45 F5 | 	or	result1, ##72351744
21764     44 00 00 FF 
21768     20 E4 05 F1 | 	add	objptr, ##34848
2176c     F2 FA 61 FC | 	wrlong	result1, objptr
21770     44 00 00 FF 
21774     20 E4 85 F1 | 	sub	objptr, ##34848
21778     F2 FA 01 F6 | 	mov	result1, objptr
2177c     00 30 02 FF 
21780     00 FA 45 F5 | 	or	result1, ##73400320
21784     43 00 00 FF 
21788     B4 E4 05 F1 | 	add	objptr, ##34484
2178c     F2 FA 61 FC | 	wrlong	result1, objptr
21790     43 00 00 FF 
21794     B4 E4 85 F1 | 	sub	objptr, ##34484
21798     F2 FA 01 F6 | 	mov	result1, objptr
2179c     00 38 02 FF 
217a0     00 FA 45 F5 | 	or	result1, ##74448896
217a4     44 00 00 FF 
217a8     38 E4 05 F1 | 	add	objptr, ##34872
217ac     F2 FA 61 FC | 	wrlong	result1, objptr
217b0     44 00 00 FF 
217b4     38 E4 85 F1 | 	sub	objptr, ##34872
217b8     F2 FA 01 F6 | 	mov	result1, objptr
217bc     00 40 02 FF 
217c0     00 FA 45 F5 | 	or	result1, ##75497472
217c4     44 00 00 FF 
217c8     48 E4 05 F1 | 	add	objptr, ##34888
217cc     F2 FA 61 FC | 	wrlong	result1, objptr
217d0     44 00 00 FF 
217d4     48 E4 85 F1 | 	sub	objptr, ##34888
217d8     F2 FA 01 F6 | 	mov	result1, objptr
217dc     00 48 02 FF 
217e0     00 FA 45 F5 | 	or	result1, ##76546048
217e4     44 00 00 FF 
217e8     4C E4 05 F1 | 	add	objptr, ##34892
217ec     F2 FA 61 FC | 	wrlong	result1, objptr
217f0     44 00 00 FF 
217f4     4C E4 85 F1 | 	sub	objptr, ##34892
217f8     F2 FA 01 F6 | 	mov	result1, objptr
217fc     00 50 02 FF 
21800     00 FA 45 F5 | 	or	result1, ##77594624
21804     44 00 00 FF 
21808     44 E4 05 F1 | 	add	objptr, ##34884
2180c     F2 FA 61 FC | 	wrlong	result1, objptr
21810     44 00 00 FF 
21814     44 E4 85 F1 | 	sub	objptr, ##34884
21818     F2 FA 01 F6 | 	mov	result1, objptr
2181c     00 58 02 FF 
21820     00 FA 45 F5 | 	or	result1, ##78643200
21824     44 00 00 FF 
21828     3C E4 05 F1 | 	add	objptr, ##34876
2182c     F2 FA 61 FC | 	wrlong	result1, objptr
21830     44 00 00 FF 
21834     3C E4 85 F1 | 	sub	objptr, ##34876
21838     F2 FA 01 F6 | 	mov	result1, objptr
2183c     00 60 02 FF 
21840     00 FA 45 F5 | 	or	result1, ##79691776
21844     44 00 00 FF 
21848     40 E4 05 F1 | 	add	objptr, ##34880
2184c     F2 FA 61 FC | 	wrlong	result1, objptr
21850     44 00 00 FF 
21854     40 E4 85 F1 | 	sub	objptr, ##34880
21858     F2 FA 01 F6 | 	mov	result1, objptr
2185c     00 68 02 FF 
21860     00 FA 45 F5 | 	or	result1, ##80740352
21864     44 00 00 FF 
21868     50 E4 05 F1 | 	add	objptr, ##34896
2186c     F2 FA 61 FC | 	wrlong	result1, objptr
21870     44 00 00 FF 
21874     50 E4 85 F1 | 	sub	objptr, ##34896
21878     F2 FA 01 F6 | 	mov	result1, objptr
2187c     00 70 02 FF 
21880     00 FA 45 F5 | 	or	result1, ##81788928
21884     44 00 00 FF 
21888     54 E4 05 F1 | 	add	objptr, ##34900
2188c     F2 FA 61 FC | 	wrlong	result1, objptr
21890     44 00 00 FF 
21894     54 E4 85 F1 | 	sub	objptr, ##34900
21898     F2 FA 01 F6 | 	mov	result1, objptr
2189c     00 78 02 FF 
218a0     00 FA 45 F5 | 	or	result1, ##82837504
218a4     44 00 00 FF 
218a8     58 E4 05 F1 | 	add	objptr, ##34904
218ac     F2 FA 61 FC | 	wrlong	result1, objptr
218b0     44 00 00 FF 
218b4     58 E4 85 F1 | 	sub	objptr, ##34904
218b8     F2 FA 01 F6 | 	mov	result1, objptr
218bc     00 80 02 FF 
218c0     00 FA 45 F5 | 	or	result1, ##83886080
218c4     44 00 00 FF 
218c8     5C E4 05 F1 | 	add	objptr, ##34908
218cc     F2 FA 61 FC | 	wrlong	result1, objptr
218d0     44 00 00 FF 
218d4     5C E4 85 F1 | 	sub	objptr, ##34908
218d8     F2 FA 01 F6 | 	mov	result1, objptr
218dc     00 88 02 FF 
218e0     00 FA 45 F5 | 	or	result1, ##84934656
218e4     44 00 00 FF 
218e8     60 E4 05 F1 | 	add	objptr, ##34912
218ec     F2 FA 61 FC | 	wrlong	result1, objptr
218f0     44 00 00 FF 
218f4     60 E4 85 F1 | 	sub	objptr, ##34912
218f8     F2 FA 01 F6 | 	mov	result1, objptr
218fc     00 90 02 FF 
21900     00 FA 45 F5 | 	or	result1, ##85983232
21904     44 00 00 FF 
21908     64 E4 05 F1 | 	add	objptr, ##34916
2190c     F2 FA 61 FC | 	wrlong	result1, objptr
21910     44 00 00 FF 
21914     64 E4 85 F1 | 	sub	objptr, ##34916
21918     F2 FA 01 F6 | 	mov	result1, objptr
2191c     00 98 02 FF 
21920     00 FA 45 F5 | 	or	result1, ##87031808
21924     44 00 00 FF 
21928     68 E4 05 F1 | 	add	objptr, ##34920
2192c     F2 FA 61 FC | 	wrlong	result1, objptr
21930     44 00 00 FF 
21934     68 E4 85 F1 | 	sub	objptr, ##34920
21938     F2 FA 01 F6 | 	mov	result1, objptr
2193c     00 A0 02 FF 
21940     00 FA 45 F5 | 	or	result1, ##88080384
21944     44 00 00 FF 
21948     6C E4 05 F1 | 	add	objptr, ##34924
2194c     F2 FA 61 FC | 	wrlong	result1, objptr
21950     44 00 00 FF 
21954     6C E4 85 F1 | 	sub	objptr, ##34924
21958     F2 FA 01 F6 | 	mov	result1, objptr
2195c     00 A8 02 FF 
21960     00 FA 45 F5 | 	or	result1, ##89128960
21964     44 00 00 FF 
21968     78 E4 05 F1 | 	add	objptr, ##34936
2196c     F2 FA 61 FC | 	wrlong	result1, objptr
21970     44 00 00 FF 
21974     78 E4 85 F1 | 	sub	objptr, ##34936
21978     F2 FA 01 F6 | 	mov	result1, objptr
2197c     00 B0 02 FF 
21980     00 FA 45 F5 | 	or	result1, ##90177536
21984     44 00 00 FF 
21988     70 E4 05 F1 | 	add	objptr, ##34928
2198c     F2 FA 61 FC | 	wrlong	result1, objptr
21990     44 00 00 FF 
21994     70 E4 85 F1 | 	sub	objptr, ##34928
21998     F2 FA 01 F6 | 	mov	result1, objptr
2199c     00 B8 02 FF 
219a0     00 FA 45 F5 | 	or	result1, ##91226112
219a4     44 00 00 FF 
219a8     74 E4 05 F1 | 	add	objptr, ##34932
219ac     F2 FA 61 FC | 	wrlong	result1, objptr
219b0     44 00 00 FF 
219b4     74 E4 85 F1 | 	sub	objptr, ##34932
219b8     F2 FA 01 F6 | 	mov	result1, objptr
219bc     00 C0 02 FF 
219c0     00 FA 45 F5 | 	or	result1, ##92274688
219c4     44 00 00 FF 
219c8     7C E4 05 F1 | 	add	objptr, ##34940
219cc     F2 FA 61 FC | 	wrlong	result1, objptr
219d0     44 00 00 FF 
219d4     7C E4 85 F1 | 	sub	objptr, ##34940
219d8     F2 FA 01 F6 | 	mov	result1, objptr
219dc     00 C8 02 FF 
219e0     00 FA 45 F5 | 	or	result1, ##93323264
219e4     44 00 00 FF 
219e8     24 E4 05 F1 | 	add	objptr, ##34852
219ec     F2 FA 61 FC | 	wrlong	result1, objptr
219f0     44 00 00 FF 
219f4     24 E4 85 F1 | 	sub	objptr, ##34852
219f8     F2 FA 01 F6 | 	mov	result1, objptr
219fc     00 D0 02 FF 
21a00     00 FA 45 F5 | 	or	result1, ##94371840
21a04     44 00 00 FF 
21a08     2C E4 05 F1 | 	add	objptr, ##34860
21a0c     F2 FA 61 FC | 	wrlong	result1, objptr
21a10     44 00 00 FF 
21a14     2C E4 85 F1 | 	sub	objptr, ##34860
21a18     F2 FA 01 F6 | 	mov	result1, objptr
21a1c     00 D8 02 FF 
21a20     00 FA 45 F5 | 	or	result1, ##95420416
21a24     44 00 00 FF 
21a28     30 E4 05 F1 | 	add	objptr, ##34864
21a2c     F2 FA 61 FC | 	wrlong	result1, objptr
21a30     44 00 00 FF 
21a34     30 E4 85 F1 | 	sub	objptr, ##34864
21a38     F2 FA 01 F6 | 	mov	result1, objptr
21a3c     00 E0 02 FF 
21a40     00 FA 45 F5 | 	or	result1, ##96468992
21a44     44 00 00 FF 
21a48     80 E4 05 F1 | 	add	objptr, ##34944
21a4c     F2 FA 61 FC | 	wrlong	result1, objptr
21a50     44 00 00 FF 
21a54     80 E4 85 F1 | 	sub	objptr, ##34944
21a58     F2 FA 01 F6 | 	mov	result1, objptr
21a5c     00 E8 02 FF 
21a60     00 FA 45 F5 | 	or	result1, ##97517568
21a64     44 00 00 FF 
21a68     84 E4 05 F1 | 	add	objptr, ##34948
21a6c     F2 FA 61 FC | 	wrlong	result1, objptr
21a70     44 00 00 FF 
21a74     84 E4 85 F1 | 	sub	objptr, ##34948
21a78     F2 FA 01 F6 | 	mov	result1, objptr
21a7c     00 F0 02 FF 
21a80     00 FA 45 F5 | 	or	result1, ##98566144
21a84     44 00 00 FF 
21a88     88 E4 05 F1 | 	add	objptr, ##34952
21a8c     F2 FA 61 FC | 	wrlong	result1, objptr
21a90     44 00 00 FF 
21a94     88 E4 85 F1 | 	sub	objptr, ##34952
21a98     F2 FA 01 F6 | 	mov	result1, objptr
21a9c     00 F8 02 FF 
21aa0     00 FA 45 F5 | 	or	result1, ##99614720
21aa4     44 00 00 FF 
21aa8     34 E4 05 F1 | 	add	objptr, ##34868
21aac     F2 FA 61 FC | 	wrlong	result1, objptr
21ab0     44 00 00 FF 
21ab4     34 E4 85 F1 | 	sub	objptr, ##34868
21ab8     F2 FA 01 F6 | 	mov	result1, objptr
21abc     39 FA 25 F4 | 	bith	result1, #57
21ac0     44 00 00 FF 
21ac4     98 E4 05 F1 | 	add	objptr, ##34968
21ac8     F2 FA 61 FC | 	wrlong	result1, objptr
21acc     44 00 00 FF 
21ad0     98 E4 85 F1 | 	sub	objptr, ##34968
21ad4     F2 FA 01 F6 | 	mov	result1, objptr
21ad8     00 08 03 FF 
21adc     00 FA 45 F5 | 	or	result1, ##101711872
21ae0     44 00 00 FF 
21ae4     A0 E4 05 F1 | 	add	objptr, ##34976
21ae8     F2 FA 61 FC | 	wrlong	result1, objptr
21aec     44 00 00 FF 
21af0     A0 E4 85 F1 | 	sub	objptr, ##34976
21af4     F2 FA 01 F6 | 	mov	result1, objptr
21af8     00 10 03 FF 
21afc     00 FA 45 F5 | 	or	result1, ##102760448
21b00     44 00 00 FF 
21b04     94 E4 05 F1 | 	add	objptr, ##34964
21b08     F2 FA 61 FC | 	wrlong	result1, objptr
21b0c     44 00 00 FF 
21b10     94 E4 85 F1 | 	sub	objptr, ##34964
21b14     F2 FA 01 F6 | 	mov	result1, objptr
21b18     00 18 03 FF 
21b1c     00 FA 45 F5 | 	or	result1, ##103809024
21b20     44 00 00 FF 
21b24     90 E4 05 F1 | 	add	objptr, ##34960
21b28     F2 FA 61 FC | 	wrlong	result1, objptr
21b2c     44 00 00 FF 
21b30     90 E4 85 F1 | 	sub	objptr, ##34960
21b34     F2 FA 01 F6 | 	mov	result1, objptr
21b38     00 20 03 FF 
21b3c     00 FA 45 F5 | 	or	result1, ##104857600
21b40     44 00 00 FF 
21b44     8C E4 05 F1 | 	add	objptr, ##34956
21b48     F2 FA 61 FC | 	wrlong	result1, objptr
21b4c     44 00 00 FF 
21b50     8C E4 85 F1 | 	sub	objptr, ##34956
21b54     F2 FA 01 F6 | 	mov	result1, objptr
21b58     00 28 03 FF 
21b5c     00 FA 45 F5 | 	or	result1, ##105906176
21b60     44 00 00 FF 
21b64     9C E4 05 F1 | 	add	objptr, ##34972
21b68     F2 FA 61 FC | 	wrlong	result1, objptr
21b6c     44 00 00 FF 
21b70     9C E4 85 F1 | 	sub	objptr, ##34972
21b74     F2 FA 01 F6 | 	mov	result1, objptr
21b78     00 30 03 FF 
21b7c     00 FA 45 F5 | 	or	result1, ##106954752
21b80     44 00 00 FF 
21b84     A4 E4 05 F1 | 	add	objptr, ##34980
21b88     F2 FA 61 FC | 	wrlong	result1, objptr
21b8c     44 00 00 FF 
21b90     A4 E4 85 F1 | 	sub	objptr, ##34980
21b94     F2 FA 01 F6 | 	mov	result1, objptr
21b98     00 38 03 FF 
21b9c     00 FA 45 F5 | 	or	result1, ##108003328
21ba0     44 00 00 FF 
21ba4     A8 E4 05 F1 | 	add	objptr, ##34984
21ba8     F2 FA 61 FC | 	wrlong	result1, objptr
21bac     44 00 00 FF 
21bb0     A8 E4 85 F1 | 	sub	objptr, ##34984
21bb4     F2 FA 01 F6 | 	mov	result1, objptr
21bb8     00 40 03 FF 
21bbc     00 FA 45 F5 | 	or	result1, ##109051904
21bc0     44 00 00 FF 
21bc4     AC E4 05 F1 | 	add	objptr, ##34988
21bc8     F2 FA 61 FC | 	wrlong	result1, objptr
21bcc     44 00 00 FF 
21bd0     AC E4 85 F1 | 	sub	objptr, ##34988
21bd4     F2 FA 01 F6 | 	mov	result1, objptr
21bd8     00 48 03 FF 
21bdc     00 FA 45 F5 | 	or	result1, ##110100480
21be0     44 00 00 FF 
21be4     B4 E4 05 F1 | 	add	objptr, ##34996
21be8     F2 FA 61 FC | 	wrlong	result1, objptr
21bec     44 00 00 FF 
21bf0     B4 E4 85 F1 | 	sub	objptr, ##34996
21bf4     F2 FA 01 F6 | 	mov	result1, objptr
21bf8     00 50 03 FF 
21bfc     00 FA 45 F5 | 	or	result1, ##111149056
21c00     44 00 00 FF 
21c04     B8 E4 05 F1 | 	add	objptr, ##35000
21c08     F2 FA 61 FC | 	wrlong	result1, objptr
21c0c     44 00 00 FF 
21c10     B8 E4 85 F1 | 	sub	objptr, ##35000
21c14     F2 FA 01 F6 | 	mov	result1, objptr
21c18     00 58 03 FF 
21c1c     00 FA 45 F5 | 	or	result1, ##112197632
21c20     44 00 00 FF 
21c24     BC E4 05 F1 | 	add	objptr, ##35004
21c28     F2 FA 61 FC | 	wrlong	result1, objptr
21c2c     44 00 00 FF 
21c30     BC E4 85 F1 | 	sub	objptr, ##35004
21c34     F2 FA 01 F6 | 	mov	result1, objptr
21c38     00 60 03 FF 
21c3c     00 FA 45 F5 | 	or	result1, ##113246208
21c40     44 00 00 FF 
21c44     C0 E4 05 F1 | 	add	objptr, ##35008
21c48     F2 FA 61 FC | 	wrlong	result1, objptr
21c4c     44 00 00 FF 
21c50     C0 E4 85 F1 | 	sub	objptr, ##35008
21c54     F2 FA 01 F6 | 	mov	result1, objptr
21c58     00 68 03 FF 
21c5c     00 FA 45 F5 | 	or	result1, ##114294784
21c60     44 00 00 FF 
21c64     C4 E4 05 F1 | 	add	objptr, ##35012
21c68     F2 FA 61 FC | 	wrlong	result1, objptr
21c6c     44 00 00 FF 
21c70     C4 E4 85 F1 | 	sub	objptr, ##35012
21c74     F2 FA 01 F6 | 	mov	result1, objptr
21c78     00 70 03 FF 
21c7c     00 FA 45 F5 | 	or	result1, ##115343360
21c80     44 00 00 FF 
21c84     C8 E4 05 F1 | 	add	objptr, ##35016
21c88     F2 FA 61 FC | 	wrlong	result1, objptr
21c8c     44 00 00 FF 
21c90     C8 E4 85 F1 | 	sub	objptr, ##35016
21c94     F2 FA 01 F6 | 	mov	result1, objptr
21c98     00 08 01 FF 
21c9c     00 FA 45 F5 | 	or	result1, ##34603008
21ca0     44 00 00 FF 
21ca4     CC E4 05 F1 | 	add	objptr, ##35020
21ca8     F2 FA 61 FC | 	wrlong	result1, objptr
21cac     44 00 00 FF 
21cb0     CC E4 85 F1 | 	sub	objptr, ##35020
21cb4     F2 FA 01 F6 | 	mov	result1, objptr
21cb8     00 78 03 FF 
21cbc     00 FA 45 F5 | 	or	result1, ##116391936
21cc0     44 00 00 FF 
21cc4     D0 E4 05 F1 | 	add	objptr, ##35024
21cc8     F2 FA 61 FC | 	wrlong	result1, objptr
21ccc     44 00 00 FF 
21cd0     D0 E4 85 F1 | 	sub	objptr, ##35024
21cd4     F2 FA 01 F6 | 	mov	result1, objptr
21cd8     58 FA 25 F4 | 	bith	result1, #88
21cdc     44 00 00 FF 
21ce0     B0 E4 05 F1 | 	add	objptr, ##34992
21ce4     F2 FA 61 FC | 	wrlong	result1, objptr
21ce8     44 00 00 FF 
21cec     B0 E4 85 F1 | 	sub	objptr, ##34992
21cf0     F2 FA 01 F6 | 	mov	result1, objptr
21cf4     00 88 03 FF 
21cf8     00 FA 45 F5 | 	or	result1, ##118489088
21cfc     43 00 00 FF 
21d00     A8 E4 05 F1 | 	add	objptr, ##34472
21d04     F2 FA 61 FC | 	wrlong	result1, objptr
21d08     43 00 00 FF 
21d0c     A8 E4 85 F1 | 	sub	objptr, ##34472
21d10     F2 FA 01 F6 | 	mov	result1, objptr
21d14     00 90 03 FF 
21d18     00 FA 45 F5 | 	or	result1, ##119537664
21d1c     44 00 00 FF 
21d20     D4 E4 05 F1 | 	add	objptr, ##35028
21d24     F2 FA 61 FC | 	wrlong	result1, objptr
21d28     44 00 00 FF 
21d2c     D4 E4 85 F1 | 	sub	objptr, ##35028
21d30     F2 FA 01 F6 | 	mov	result1, objptr
21d34     00 98 03 FF 
21d38     00 FA 45 F5 | 	or	result1, ##120586240
21d3c     44 00 00 FF 
21d40     D8 E4 05 F1 | 	add	objptr, ##35032
21d44     F2 FA 61 FC | 	wrlong	result1, objptr
21d48     44 00 00 FF 
21d4c     D8 E4 85 F1 | 	sub	objptr, ##35032
21d50     F2 FA 01 F6 | 	mov	result1, objptr
21d54     00 A0 03 FF 
21d58     00 FA 45 F5 | 	or	result1, ##121634816
21d5c     44 00 00 FF 
21d60     EC E4 05 F1 | 	add	objptr, ##35052
21d64     F2 FA 61 FC | 	wrlong	result1, objptr
21d68     44 00 00 FF 
21d6c     EC E4 85 F1 | 	sub	objptr, ##35052
21d70     F2 FA 01 F6 | 	mov	result1, objptr
21d74     00 A8 03 FF 
21d78     00 FA 45 F5 | 	or	result1, ##122683392
21d7c     44 00 00 FF 
21d80     E8 E4 05 F1 | 	add	objptr, ##35048
21d84     F2 FA 61 FC | 	wrlong	result1, objptr
21d88     44 00 00 FF 
21d8c     E8 E4 85 F1 | 	sub	objptr, ##35048
21d90     F2 FA 01 F6 | 	mov	result1, objptr
21d94     00 B0 03 FF 
21d98     00 FA 45 F5 | 	or	result1, ##123731968
21d9c     44 00 00 FF 
21da0     E0 E4 05 F1 | 	add	objptr, ##35040
21da4     F2 FA 61 FC | 	wrlong	result1, objptr
21da8     44 00 00 FF 
21dac     E0 E4 85 F1 | 	sub	objptr, ##35040
21db0     F2 FA 01 F6 | 	mov	result1, objptr
21db4     00 B8 03 FF 
21db8     00 FA 45 F5 | 	or	result1, ##124780544
21dbc     44 00 00 FF 
21dc0     DC E4 05 F1 | 	add	objptr, ##35036
21dc4     F2 FA 61 FC | 	wrlong	result1, objptr
21dc8     44 00 00 FF 
21dcc     DC E4 85 F1 | 	sub	objptr, ##35036
21dd0     F2 FA 01 F6 | 	mov	result1, objptr
21dd4     77 FA 25 F4 | 	bith	result1, #119
21dd8     44 00 00 FF 
21ddc     FC E4 05 F1 | 	add	objptr, ##35068
21de0     F2 FA 61 FC | 	wrlong	result1, objptr
21de4     44 00 00 FF 
21de8     FC E4 85 F1 | 	sub	objptr, ##35068
21dec     F2 FA 01 F6 | 	mov	result1, objptr
21df0     00 C8 03 FF 
21df4     00 FA 45 F5 | 	or	result1, ##126877696
21df8     44 00 00 FF 
21dfc     F0 E4 05 F1 | 	add	objptr, ##35056
21e00     F2 FA 61 FC | 	wrlong	result1, objptr
21e04     44 00 00 FF 
21e08     F0 E4 85 F1 | 	sub	objptr, ##35056
21e0c     F2 FA 01 F6 | 	mov	result1, objptr
21e10     00 D0 03 FF 
21e14     00 FA 45 F5 | 	or	result1, ##127926272
21e18     44 00 00 FF 
21e1c     F4 E4 05 F1 | 	add	objptr, ##35060
21e20     F2 FA 61 FC | 	wrlong	result1, objptr
21e24     44 00 00 FF 
21e28     F4 E4 85 F1 | 	sub	objptr, ##35060
21e2c     F2 FA 01 F6 | 	mov	result1, objptr
21e30     00 D8 03 FF 
21e34     00 FA 45 F5 | 	or	result1, ##128974848
21e38     44 00 00 FF 
21e3c     F8 E4 05 F1 | 	add	objptr, ##35064
21e40     F2 FA 61 FC | 	wrlong	result1, objptr
21e44     44 00 00 FF 
21e48     F8 E4 85 F1 | 	sub	objptr, ##35064
21e4c     F2 FA 01 F6 | 	mov	result1, objptr
21e50     96 FA 25 F4 | 	bith	result1, #150
21e54     44 00 00 FF 
21e58     00 E5 05 F1 | 	add	objptr, ##35072
21e5c     F2 FA 61 FC | 	wrlong	result1, objptr
21e60     44 00 00 FF 
21e64     00 E5 85 F1 | 	sub	objptr, ##35072
21e68     F2 FA 01 F6 | 	mov	result1, objptr
21e6c     00 E8 03 FF 
21e70     00 FA 45 F5 | 	or	result1, ##131072000
21e74     44 00 00 FF 
21e78     04 E5 05 F1 | 	add	objptr, ##35076
21e7c     F2 FA 61 FC | 	wrlong	result1, objptr
21e80     44 00 00 FF 
21e84     04 E5 85 F1 | 	sub	objptr, ##35076
21e88     F2 FA 01 F6 | 	mov	result1, objptr
21e8c     B5 FA 25 F4 | 	bith	result1, #181
21e90     44 00 00 FF 
21e94     08 E5 05 F1 | 	add	objptr, ##35080
21e98     F2 FA 61 FC | 	wrlong	result1, objptr
21e9c     44 00 00 FF 
21ea0     08 E5 85 F1 | 	sub	objptr, ##35080
21ea4     F2 FA 01 F6 | 	mov	result1, objptr
21ea8     D4 FA 25 F4 | 	bith	result1, #212
21eac     44 00 00 FF 
21eb0     0C E5 05 F1 | 	add	objptr, ##35084
21eb4     F2 FA 61 FC | 	wrlong	result1, objptr
21eb8     44 00 00 FF 
21ebc     0C E5 85 F1 | 	sub	objptr, ##35084
21ec0     F2 FA 01 F6 | 	mov	result1, objptr
21ec4     1B FA 25 F4 | 	bith	result1, #27
21ec8     44 00 00 FF 
21ecc     10 E5 05 F1 | 	add	objptr, ##35088
21ed0     F2 FA 61 FC | 	wrlong	result1, objptr
21ed4     44 00 00 FF 
21ed8     10 E5 85 F1 | 	sub	objptr, ##35088
21edc     F2 FA 01 F6 | 	mov	result1, objptr
21ee0     00 08 04 FF 
21ee4     00 FA 45 F5 | 	or	result1, ##135266304
21ee8     44 00 00 FF 
21eec     14 E5 05 F1 | 	add	objptr, ##35092
21ef0     F2 FA 61 FC | 	wrlong	result1, objptr
21ef4     44 00 00 FF 
21ef8     14 E5 85 F1 | 	sub	objptr, ##35092
21efc     F2 FA 01 F6 | 	mov	result1, objptr
21f00     00 10 04 FF 
21f04     00 FA 45 F5 | 	or	result1, ##136314880
21f08     44 00 00 FF 
21f0c     1C E5 05 F1 | 	add	objptr, ##35100
21f10     F2 FA 61 FC | 	wrlong	result1, objptr
21f14     44 00 00 FF 
21f18     1C E5 85 F1 | 	sub	objptr, ##35100
21f1c     F2 FA 01 F6 | 	mov	result1, objptr
21f20     00 18 04 FF 
21f24     00 FA 45 F5 | 	or	result1, ##137363456
21f28     44 00 00 FF 
21f2c     20 E5 05 F1 | 	add	objptr, ##35104
21f30     F2 FA 61 FC | 	wrlong	result1, objptr
21f34     44 00 00 FF 
21f38     20 E5 85 F1 | 	sub	objptr, ##35104
21f3c     F2 FA 01 F6 | 	mov	result1, objptr
21f40     00 20 04 FF 
21f44     00 FA 45 F5 | 	or	result1, ##138412032
21f48     44 00 00 FF 
21f4c     24 E5 05 F1 | 	add	objptr, ##35108
21f50     F2 FA 61 FC | 	wrlong	result1, objptr
21f54     44 00 00 FF 
21f58     24 E5 85 F1 | 	sub	objptr, ##35108
21f5c     F2 FA 01 F6 | 	mov	result1, objptr
21f60     00 28 04 FF 
21f64     00 FA 45 F5 | 	or	result1, ##139460608
21f68     44 00 00 FF 
21f6c     18 E5 05 F1 | 	add	objptr, ##35096
21f70     F2 FA 61 FC | 	wrlong	result1, objptr
21f74     44 00 00 FF 
21f78     18 E5 85 F1 | 	sub	objptr, ##35096
21f7c     F2 FA 01 F6 | 	mov	result1, objptr
21f80     00 30 04 FF 
21f84     00 FA 45 F5 | 	or	result1, ##140509184
21f88     44 00 00 FF 
21f8c     28 E5 05 F1 | 	add	objptr, ##35112
21f90     F2 FA 61 FC | 	wrlong	result1, objptr
21f94     44 00 00 FF 
21f98     28 E5 85 F1 | 	sub	objptr, ##35112
21f9c     F2 FA 01 F6 | 	mov	result1, objptr
21fa0     00 38 04 FF 
21fa4     00 FA 45 F5 | 	or	result1, ##141557760
21fa8     44 00 00 FF 
21fac     5C E5 05 F1 | 	add	objptr, ##35164
21fb0     F2 FA 61 FC | 	wrlong	result1, objptr
21fb4     44 00 00 FF 
21fb8     5C E5 85 F1 | 	sub	objptr, ##35164
21fbc     F2 FA 01 F6 | 	mov	result1, objptr
21fc0     00 40 04 FF 
21fc4     00 FA 45 F5 | 	or	result1, ##142606336
21fc8     44 00 00 FF 
21fcc     54 E5 05 F1 | 	add	objptr, ##35156
21fd0     F2 FA 61 FC | 	wrlong	result1, objptr
21fd4     44 00 00 FF 
21fd8     54 E5 85 F1 | 	sub	objptr, ##35156
21fdc     F2 FA 01 F6 | 	mov	result1, objptr
21fe0     00 48 04 FF 
21fe4     00 FA 45 F5 | 	or	result1, ##143654912
21fe8     44 00 00 FF 
21fec     2C E5 05 F1 | 	add	objptr, ##35116
21ff0     F2 FA 61 FC | 	wrlong	result1, objptr
21ff4     44 00 00 FF 
21ff8     2C E5 85 F1 | 	sub	objptr, ##35116
21ffc     F2 FA 01 F6 | 	mov	result1, objptr
22000     00 50 04 FF 
22004     00 FA 45 F5 | 	or	result1, ##144703488
22008     44 00 00 FF 
2200c     30 E5 05 F1 | 	add	objptr, ##35120
22010     F2 FA 61 FC | 	wrlong	result1, objptr
22014     44 00 00 FF 
22018     30 E5 85 F1 | 	sub	objptr, ##35120
2201c     F2 FA 01 F6 | 	mov	result1, objptr
22020     00 58 04 FF 
22024     00 FA 45 F5 | 	or	result1, ##145752064
22028     44 00 00 FF 
2202c     4C E5 05 F1 | 	add	objptr, ##35148
22030     F2 FA 61 FC | 	wrlong	result1, objptr
22034     44 00 00 FF 
22038     4C E5 85 F1 | 	sub	objptr, ##35148
2203c     F2 FA 01 F6 | 	mov	result1, objptr
22040     00 60 04 FF 
22044     00 FA 45 F5 | 	or	result1, ##146800640
22048     44 00 00 FF 
2204c     50 E5 05 F1 | 	add	objptr, ##35152
22050     F2 FA 61 FC | 	wrlong	result1, objptr
22054     44 00 00 FF 
22058     50 E5 85 F1 | 	sub	objptr, ##35152
2205c     F2 FA 01 F6 | 	mov	result1, objptr
22060     00 68 04 FF 
22064     00 FA 45 F5 | 	or	result1, ##147849216
22068     44 00 00 FF 
2206c     6C E5 05 F1 | 	add	objptr, ##35180
22070     F2 FA 61 FC | 	wrlong	result1, objptr
22074     44 00 00 FF 
22078     6C E5 85 F1 | 	sub	objptr, ##35180
2207c     F2 FA 01 F6 | 	mov	result1, objptr
22080     00 70 04 FF 
22084     00 FA 45 F5 | 	or	result1, ##148897792
22088     44 00 00 FF 
2208c     68 E5 05 F1 | 	add	objptr, ##35176
22090     F2 FA 61 FC | 	wrlong	result1, objptr
22094     44 00 00 FF 
22098     68 E5 85 F1 | 	sub	objptr, ##35176
2209c     F2 FA 01 F6 | 	mov	result1, objptr
220a0     00 78 04 FF 
220a4     00 FA 45 F5 | 	or	result1, ##149946368
220a8     44 00 00 FF 
220ac     78 E5 05 F1 | 	add	objptr, ##35192
220b0     F2 FA 61 FC | 	wrlong	result1, objptr
220b4     44 00 00 FF 
220b8     78 E5 85 F1 | 	sub	objptr, ##35192
220bc     F2 FA 01 F6 | 	mov	result1, objptr
220c0     00 80 04 FF 
220c4     00 FA 45 F5 | 	or	result1, ##150994944
220c8     44 00 00 FF 
220cc     44 E5 05 F1 | 	add	objptr, ##35140
220d0     F2 FA 61 FC | 	wrlong	result1, objptr
220d4     44 00 00 FF 
220d8     44 E5 85 F1 | 	sub	objptr, ##35140
220dc     F2 FA 01 F6 | 	mov	result1, objptr
220e0     00 88 04 FF 
220e4     00 FA 45 F5 | 	or	result1, ##152043520
220e8     44 00 00 FF 
220ec     74 E5 05 F1 | 	add	objptr, ##35188
220f0     F2 FA 61 FC | 	wrlong	result1, objptr
220f4     44 00 00 FF 
220f8     74 E5 85 F1 | 	sub	objptr, ##35188
220fc     F2 FA 01 F6 | 	mov	result1, objptr
22100     00 90 04 FF 
22104     00 FA 45 F5 | 	or	result1, ##153092096
22108     44 00 00 FF 
2210c     64 E5 05 F1 | 	add	objptr, ##35172
22110     F2 FA 61 FC | 	wrlong	result1, objptr
22114     44 00 00 FF 
22118     64 E5 85 F1 | 	sub	objptr, ##35172
2211c     F2 FA 01 F6 | 	mov	result1, objptr
22120     00 98 04 FF 
22124     00 FA 45 F5 | 	or	result1, ##154140672
22128     43 00 00 FF 
2212c     14 E5 05 F1 | 	add	objptr, ##34580
22130     F2 FA 61 FC | 	wrlong	result1, objptr
22134     43 00 00 FF 
22138     14 E5 85 F1 | 	sub	objptr, ##34580
2213c     F2 FA 01 F6 | 	mov	result1, objptr
22140     00 A0 04 FF 
22144     00 FA 45 F5 | 	or	result1, ##155189248
22148     44 00 00 FF 
2214c     34 E5 05 F1 | 	add	objptr, ##35124
22150     F2 FA 61 FC | 	wrlong	result1, objptr
22154     44 00 00 FF 
22158     34 E5 85 F1 | 	sub	objptr, ##35124
2215c     F2 FA 01 F6 | 	mov	result1, objptr
22160     00 08 01 FF 
22164     00 FA 45 F5 | 	or	result1, ##34603008
22168     44 00 00 FF 
2216c     3C E5 05 F1 | 	add	objptr, ##35132
22170     F2 FA 61 FC | 	wrlong	result1, objptr
22174     44 00 00 FF 
22178     3C E5 85 F1 | 	sub	objptr, ##35132
2217c     F2 FA 01 F6 | 	mov	result1, objptr
22180     00 A8 04 FF 
22184     00 FA 45 F5 | 	or	result1, ##156237824
22188     44 00 00 FF 
2218c     38 E5 05 F1 | 	add	objptr, ##35128
22190     F2 FA 61 FC | 	wrlong	result1, objptr
22194     44 00 00 FF 
22198     38 E5 85 F1 | 	sub	objptr, ##35128
2219c     F2 FA 01 F6 | 	mov	result1, objptr
221a0     00 B0 04 FF 
221a4     00 FA 45 F5 | 	or	result1, ##157286400
221a8     44 00 00 FF 
221ac     7C E5 05 F1 | 	add	objptr, ##35196
221b0     F2 FA 61 FC | 	wrlong	result1, objptr
221b4     44 00 00 FF 
221b8     7C E5 85 F1 | 	sub	objptr, ##35196
221bc     F2 FA 01 F6 | 	mov	result1, objptr
221c0     00 B8 04 FF 
221c4     00 FA 45 F5 | 	or	result1, ##158334976
221c8     44 00 00 FF 
221cc     80 E5 05 F1 | 	add	objptr, ##35200
221d0     F2 FA 61 FC | 	wrlong	result1, objptr
221d4     44 00 00 FF 
221d8     80 E5 85 F1 | 	sub	objptr, ##35200
221dc     F2 FA 01 F6 | 	mov	result1, objptr
221e0     00 C0 04 FF 
221e4     00 FA 45 F5 | 	or	result1, ##159383552
221e8     44 00 00 FF 
221ec     84 E5 05 F1 | 	add	objptr, ##35204
221f0     F2 FA 61 FC | 	wrlong	result1, objptr
221f4     44 00 00 FF 
221f8     84 E5 85 F1 | 	sub	objptr, ##35204
221fc     F2 FA 01 F6 | 	mov	result1, objptr
22200     00 C8 04 FF 
22204     00 FA 45 F5 | 	or	result1, ##160432128
22208     44 00 00 FF 
2220c     88 E5 05 F1 | 	add	objptr, ##35208
22210     F2 FA 61 FC | 	wrlong	result1, objptr
22214     44 00 00 FF 
22218     88 E5 85 F1 | 	sub	objptr, ##35208
2221c     F2 FA 01 F6 | 	mov	result1, objptr
22220     00 D0 04 FF 
22224     00 FA 45 F5 | 	or	result1, ##161480704
22228     44 00 00 FF 
2222c     90 E5 05 F1 | 	add	objptr, ##35216
22230     F2 FA 61 FC | 	wrlong	result1, objptr
22234     44 00 00 FF 
22238     90 E5 85 F1 | 	sub	objptr, ##35216
2223c     F2 FA 01 F6 | 	mov	result1, objptr
22240     00 D8 04 FF 
22244     00 FA 45 F5 | 	or	result1, ##162529280
22248     44 00 00 FF 
2224c     94 E5 05 F1 | 	add	objptr, ##35220
22250     F2 FA 61 FC | 	wrlong	result1, objptr
22254     44 00 00 FF 
22258     94 E5 85 F1 | 	sub	objptr, ##35220
2225c     F2 FA 01 F6 | 	mov	result1, objptr
22260     00 E0 04 FF 
22264     00 FA 45 F5 | 	or	result1, ##163577856
22268     44 00 00 FF 
2226c     98 E5 05 F1 | 	add	objptr, ##35224
22270     F2 FA 61 FC | 	wrlong	result1, objptr
22274     44 00 00 FF 
22278     98 E5 85 F1 | 	sub	objptr, ##35224
2227c     F2 FA 01 F6 | 	mov	result1, objptr
22280     00 E8 04 FF 
22284     00 FA 45 F5 | 	or	result1, ##164626432
22288     44 00 00 FF 
2228c     8C E5 05 F1 | 	add	objptr, ##35212
22290     F2 FA 61 FC | 	wrlong	result1, objptr
22294     44 00 00 FF 
22298     8C E5 85 F1 | 	sub	objptr, ##35212
2229c     F2 FA 01 F6 | 	mov	result1, objptr
222a0     00 F0 04 FF 
222a4     00 FA 45 F5 | 	or	result1, ##165675008
222a8     44 00 00 FF 
222ac     70 E5 05 F1 | 	add	objptr, ##35184
222b0     F2 FA 61 FC | 	wrlong	result1, objptr
222b4     44 00 00 FF 
222b8     70 E5 85 F1 | 	sub	objptr, ##35184
222bc     F2 FA 01 F6 | 	mov	result1, objptr
222c0     00 F8 04 FF 
222c4     00 FA 45 F5 | 	or	result1, ##166723584
222c8     44 00 00 FF 
222cc     60 E5 05 F1 | 	add	objptr, ##35168
222d0     F2 FA 61 FC | 	wrlong	result1, objptr
222d4     44 00 00 FF 
222d8     60 E5 85 F1 | 	sub	objptr, ##35168
222dc     F2 FA 01 F6 | 	mov	result1, objptr
222e0     00 00 05 FF 
222e4     00 FA 45 F5 | 	or	result1, ##167772160
222e8     44 00 00 FF 
222ec     9C E5 05 F1 | 	add	objptr, ##35228
222f0     F2 FA 61 FC | 	wrlong	result1, objptr
222f4     44 00 00 FF 
222f8     9C E5 85 F1 | 	sub	objptr, ##35228
222fc                 | _init_commands_ret
222fc     2D 00 64 FD | 	ret
22300                 | 
22300                 | ' 
22300                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
22300                 | ' 
22300                 | ' sub init_audio
22300                 | _init_audio
22300     06 4A 05 F6 | 	mov	COUNT_, #6
22304     A8 00 A0 FD | 	call	#pushregs_
22308     00 C0 1F FF 
2230c     00 26 06 F6 | 	mov	local01, ##1065353216
22310                 | ' 
22310                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
22310     00 28 06 F6 | 	mov	local02, #0
22314                 | LR__2610
22314     14 2B 02 F6 | 	mov	local03, local02
22318     01 2A 66 F0 | 	shl	local03, #1
2231c     58 7F 23 FF 
22320     00 2C 06 F6 | 	mov	local04, ##1191096320
22324     14 13 52 F6 | 	abs	arg01, local02 wc
22328     1F 2E C6 C9 |  if_b	decod	local05, #31
2232c     00 2E 06 36 |  if_ae	mov	local05, #0
22330     3C 70 B0 FD | 	call	#__system___float_fromuns
22334     17 FB 61 F5 | 	xor	result1, local05
22338     FD 12 02 F6 | 	mov	arg01, result1
2233c     87 24 20 FF 
22340     DB 15 06 F6 | 	mov	arg02, ##1078530011
22344     2C 74 B0 FD | 	call	#__system___float_mul
22348     FD 12 02 F6 | 	mov	arg01, result1
2234c     00 00 22 FF 
22350     00 14 06 F6 | 	mov	arg02, ##1140850688
22354     20 76 B0 FD | 	call	#__system___float_div
22358     FD 12 02 F6 | 	mov	arg01, result1
2235c     74 7D B0 FD | 	call	#__system____builtin_sinf
22360     FD 14 02 F6 | 	mov	arg02, result1
22364     16 13 02 F6 | 	mov	arg01, local04
22368     08 74 B0 FD | 	call	#__system___float_mul
2236c     FD 12 02 F6 | 	mov	arg01, result1
22370     01 14 06 F6 | 	mov	arg02, #1
22374     C4 78 B0 FD | 	call	#__system___float_tointeger
22378     FD 14 02 F6 | 	mov	arg02, result1
2237c     15 13 02 F6 | 	mov	arg01, local03
22380     6C 0D B0 FD | 	call	#_psdpoke
22384     01 28 06 F1 | 	add	local02, #1
22388     02 00 00 FF 
2238c     00 28 56 F2 | 	cmps	local02, ##1024 wc
22390     80 FF 9F CD |  if_b	jmp	#LR__2610
22394                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
22394     00 28 06 F6 | 	mov	local02, #0
22398                 | LR__2611
22398     14 15 02 F6 | 	mov	arg02, local02
2239c     01 14 66 F0 | 	shl	arg02, #1
223a0     0B 12 C6 F9 | 	decod	arg01, #11
223a4     0A 13 02 F1 | 	add	arg01, arg02
223a8     14 2D 02 F6 | 	mov	local04, local02
223ac     07 2C 66 F0 | 	shl	local04, #7
223b0     14 2D 82 F1 | 	sub	local04, local02
223b4     C0 FF 7F FF 
223b8     00 15 06 F6 | 	mov	arg02, ##-32512
223bc     16 15 02 F1 | 	add	arg02, local04
223c0     2C 0D B0 FD | 	call	#_psdpoke
223c4     09 2C C6 F9 | 	decod	local04, #9
223c8     14 2D 02 F1 | 	add	local04, local02
223cc     01 2C 66 F0 | 	shl	local04, #1
223d0     0B 12 C6 F9 | 	decod	arg01, #11
223d4     16 13 02 F1 | 	add	arg01, local04
223d8     14 2F 02 F6 | 	mov	local05, local02
223dc     07 2E 66 F0 | 	shl	local05, #7
223e0     14 2F 82 F1 | 	sub	local05, local02
223e4     3F 00 00 FF 
223e8     00 15 06 F6 | 	mov	arg02, ##32512
223ec     17 15 82 F1 | 	sub	arg02, local05
223f0     FC 0C B0 FD | 	call	#_psdpoke
223f4     01 28 06 F1 | 	add	local02, #1
223f8     01 00 00 FF 
223fc     00 28 56 F2 | 	cmps	local02, ##512 wc
22400     94 FF 9F CD |  if_b	jmp	#LR__2611
22404                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
22404     00 28 06 F6 | 	mov	local02, #0
22408                 | LR__2612
22408     14 2F 02 F6 | 	mov	local05, local02
2240c     01 2E 66 F0 | 	shl	local05, #1
22410     0C 12 C6 F9 | 	decod	arg01, #12
22414     17 13 02 F1 | 	add	arg01, local05
22418     14 2F 02 F6 | 	mov	local05, local02
2241c     06 2E 66 F0 | 	shl	local05, #6
22420     14 2F 82 F1 | 	sub	local05, local02
22424     C1 FF 7F FF 
22428     00 14 06 F6 | 	mov	arg02, ##-32256
2242c     17 15 02 F1 | 	add	arg02, local05
22430     BC 0C B0 FD | 	call	#_psdpoke
22434     01 28 06 F1 | 	add	local02, #1
22438     02 00 00 FF 
2243c     00 28 56 F2 | 	cmps	local02, ##1024 wc
22440     C4 FF 9F CD |  if_b	jmp	#LR__2612
22444                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
22444     00 28 06 F6 | 	mov	local02, #0
22448                 | LR__2613
22448     14 2F 02 F6 | 	mov	local05, local02
2244c     01 2E 66 F0 | 	shl	local05, #1
22450     0C 00 00 FF 
22454     00 12 06 F6 | 	mov	arg01, ##6144
22458     17 13 02 F1 | 	add	arg01, local05
2245c     C0 FF 7F FF 
22460     A8 14 06 F6 | 	mov	arg02, ##-32600
22464     88 0C B0 FD | 	call	#_psdpoke
22468     01 28 06 F1 | 	add	local02, #1
2246c     80 28 56 F2 | 	cmps	local02, #128 wc
22470     D4 FF 9F CD |  if_b	jmp	#LR__2613
22474     80 28 06 F6 | 	mov	local02, #128
22478                 | LR__2614
22478     14 2F 02 F6 | 	mov	local05, local02
2247c     01 2E 66 F0 | 	shl	local05, #1
22480     0C 00 00 FF 
22484     00 12 06 F6 | 	mov	arg01, ##6144
22488     17 13 02 F1 | 	add	arg01, local05
2248c     3F 00 00 FF 
22490     58 15 06 F6 | 	mov	arg02, ##32600
22494     58 0C B0 FD | 	call	#_psdpoke
22498     01 28 06 F1 | 	add	local02, #1
2249c     02 00 00 FF 
224a0     00 28 16 F2 | 	cmp	local02, ##1024 wc
224a4     D0 FF 9F CD |  if_b	jmp	#LR__2614
224a8                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
224a8     00 28 06 F6 | 	mov	local02, #0
224ac                 | LR__2615
224ac     14 2F 02 F6 | 	mov	local05, local02
224b0     01 2E 66 F0 | 	shl	local05, #1
224b4     0D 12 C6 F9 | 	decod	arg01, #13
224b8     17 13 02 F1 | 	add	arg01, local05
224bc     C0 FF 7F FF 
224c0     A8 14 06 F6 | 	mov	arg02, ##-32600
224c4     28 0C B0 FD | 	call	#_psdpoke
224c8     01 28 06 F1 | 	add	local02, #1
224cc     01 00 00 FF 
224d0     00 28 56 F2 | 	cmps	local02, ##512 wc
224d4     D4 FF 9F CD |  if_b	jmp	#LR__2615
224d8     09 28 C6 F9 | 	decod	local02, #9
224dc                 | LR__2616
224dc     14 2F 02 F6 | 	mov	local05, local02
224e0     01 2E 66 F0 | 	shl	local05, #1
224e4     0D 12 C6 F9 | 	decod	arg01, #13
224e8     17 13 02 F1 | 	add	arg01, local05
224ec     3F 00 00 FF 
224f0     58 15 06 F6 | 	mov	arg02, ##32600
224f4     F8 0B B0 FD | 	call	#_psdpoke
224f8     01 28 06 F1 | 	add	local02, #1
224fc     02 00 00 FF 
22500     00 28 16 F2 | 	cmp	local02, ##1024 wc
22504     D4 FF 9F CD |  if_b	jmp	#LR__2616
22508                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
22508     00 28 06 F6 | 	mov	local02, #0
2250c                 | LR__2617
2250c     14 2F 02 F6 | 	mov	local05, local02
22510     01 2E 66 F0 | 	shl	local05, #1
22514     14 00 00 FF 
22518     00 12 06 F6 | 	mov	arg01, ##10240
2251c     17 13 02 F1 | 	add	arg01, local05
22520     C0 FF 7F FF 
22524     A8 14 06 F6 | 	mov	arg02, ##-32600
22528     C4 0B B0 FD | 	call	#_psdpoke
2252c     01 28 06 F1 | 	add	local02, #1
22530     00 29 56 F2 | 	cmps	local02, #256 wc
22534     D4 FF 9F CD |  if_b	jmp	#LR__2617
22538     00 29 06 F6 | 	mov	local02, #256
2253c                 | LR__2618
2253c     14 2F 02 F6 | 	mov	local05, local02
22540     01 2E 66 F0 | 	shl	local05, #1
22544     14 00 00 FF 
22548     00 12 06 F6 | 	mov	arg01, ##10240
2254c     17 13 02 F1 | 	add	arg01, local05
22550     3F 00 00 FF 
22554     58 15 06 F6 | 	mov	arg02, ##32600
22558     94 0B B0 FD | 	call	#_psdpoke
2255c     01 28 06 F1 | 	add	local02, #1
22560     02 00 00 FF 
22564     00 28 16 F2 | 	cmp	local02, ##1024 wc
22568     D0 FF 9F CD |  if_b	jmp	#LR__2618
2256c                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
2256c     18 00 00 FF 
22570     00 28 06 F6 | 	mov	local02, ##12288
22574                 | LR__2619
22574     14 13 02 F6 | 	mov	arg01, local02
22578     00 14 06 F6 | 	mov	arg02, #0
2257c     28 0B B0 FD | 	call	#_pslpoke
22580     04 28 06 F1 | 	add	local02, #4
22584     77 00 00 FF 
22588     FD 29 56 F2 | 	cmps	local02, ##61437 wc
2258c     E4 FF 9F CD |  if_b	jmp	#LR__2619
22590                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
22590     00 28 06 F6 | 	mov	local02, #0
22594                 | LR__2620
22594     14 2F 02 F6 | 	mov	local05, local02
22598     01 2E 66 F0 | 	shl	local05, #1
2259c     78 00 00 FF 
225a0     00 2A 06 F6 | 	mov	local03, ##61440
225a4     17 2B 02 F1 | 	add	local03, local05
225a8     12 00 00 FF 
225ac     BA EA 05 F1 | 	add	ptr__dat__, ##9402
225b0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
225b4     12 00 00 FF 
225b8     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
225bc     10 12 06 F1 | 	add	arg01, #16
225c0     14 15 02 F6 | 	mov	arg02, local02
225c4     01 14 66 F0 | 	shl	arg02, #1
225c8     0A 13 02 F1 | 	add	arg01, arg02
225cc     09 15 E2 FA | 	rdword	arg02, arg01
225d0     15 13 02 F6 | 	mov	arg01, local03
225d4     18 0B B0 FD | 	call	#_psdpoke
225d8     01 28 06 F1 | 	add	local02, #1
225dc     02 00 00 FF 
225e0     00 28 56 F2 | 	cmps	local02, ##1024 wc
225e4     AC FF 9F CD |  if_b	jmp	#LR__2620
225e8                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
225e8     00 28 06 F6 | 	mov	local02, #0
225ec                 | LR__2621
225ec     14 2F 02 F6 | 	mov	local05, local02
225f0     01 2E 66 F0 | 	shl	local05, #1
225f4     7C 00 00 FF 
225f8     00 2A 06 F6 | 	mov	local03, ##63488
225fc     17 2B 02 F1 | 	add	local03, local05
22600     0E 00 00 FF 
22604     AA EA 05 F1 | 	add	ptr__dat__, ##7338
22608     F5 12 02 F6 | 	mov	arg01, ptr__dat__
2260c     0E 00 00 FF 
22610     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
22614     10 12 06 F1 | 	add	arg01, #16
22618     14 15 02 F6 | 	mov	arg02, local02
2261c     01 14 66 F0 | 	shl	arg02, #1
22620     0A 13 02 F1 | 	add	arg01, arg02
22624     09 15 E2 FA | 	rdword	arg02, arg01
22628     15 13 02 F6 | 	mov	arg01, local03
2262c     C0 0A B0 FD | 	call	#_psdpoke
22630     01 28 06 F1 | 	add	local02, #1
22634     02 00 00 FF 
22638     00 28 56 F2 | 	cmps	local02, ##1024 wc
2263c     AC FF 9F CD |  if_b	jmp	#LR__2621
22640                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
22640     00 28 06 F6 | 	mov	local02, #0
22644     0C 00 00 FF 
22648     D8 E4 05 F1 | 	add	objptr, ##6360
2264c     97 18 48 FB | 	callpa	#(@LR__2623-@LR__2622)>>2,fcache_load_ptr_
22650                 | LR__2622
22650     14 2F 02 F6 | 	mov	local05, local02
22654     01 2E 66 F0 | 	shl	local05, #1
22658     F2 2E 02 F1 | 	add	local05, objptr
2265c     14 2B 02 F6 | 	mov	local03, local02
22660     08 2A 66 F0 | 	shl	local03, #8
22664     7F 00 00 FF 
22668     00 31 06 F6 | 	mov	local06, ##65280
2266c     15 31 82 F1 | 	sub	local06, local03
22670     17 31 52 FC | 	wrword	local06, local05
22674     01 28 06 F1 | 	add	local02, #1
22678     00 29 56 F2 | 	cmps	local02, #256 wc
2267c     D0 FF 9F CD |  if_b	jmp	#LR__2622
22680                 | LR__2623
22680     0C 00 00 FF 
22684     D8 E4 85 F1 | 	sub	objptr, ##6360
22688                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
22688     00 28 06 F6 | 	mov	local02, #0
2268c                 | LR__2624
2268c     14 2F 02 F6 | 	mov	local05, local02
22690     01 2E 66 F0 | 	shl	local05, #1
22694     0D 00 00 FF 
22698     D8 E4 05 F1 | 	add	objptr, ##6872
2269c     F2 2E 02 F1 | 	add	local05, objptr
226a0     80 BF 23 FF 
226a4     00 12 06 F6 | 	mov	arg01, ##1199505408
226a8     13 15 02 F6 | 	mov	arg02, local01
226ac     0D 00 00 FF 
226b0     D8 E4 85 F1 | 	sub	objptr, ##6872
226b4     BC 70 B0 FD | 	call	#__system___float_mul
226b8     FD 12 02 F6 | 	mov	arg01, result1
226bc     01 14 06 F6 | 	mov	arg02, #1
226c0     78 75 B0 FD | 	call	#__system___float_tointeger
226c4     17 FB 51 FC | 	wrword	result1, local05
226c8     13 13 02 F6 | 	mov	arg01, local01
226cc     CC BC 1F FF 
226d0     9A 15 06 F6 | 	mov	arg02, ##1064933786
226d4     9C 70 B0 FD | 	call	#__system___float_mul
226d8     FD 26 02 F6 | 	mov	local01, result1
226dc     01 28 06 F1 | 	add	local02, #1
226e0     00 29 56 F2 | 	cmps	local02, #256 wc
226e4     A4 FF 9F CD |  if_b	jmp	#LR__2624
226e8     0E 00 00 FF 
226ec     D6 E4 05 F1 | 	add	objptr, ##7382
226f0     F2 00 58 FC | 	wrword	#0, objptr
226f4                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
226f4     00 28 06 F6 | 	mov	local02, #0
226f8     02 E4 05 F1 | 	add	objptr, #2
226fc     97 10 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
22700                 | LR__2625
22700     14 2F 02 F6 | 	mov	local05, local02
22704     01 2E 66 F0 | 	shl	local05, #1
22708     F2 2E 02 F1 | 	add	local05, objptr
2270c     7F 00 80 FF 
22710     17 01 5A FC | 	wrword	##65280, local05
22714     01 28 06 F1 | 	add	local02, #1
22718     FF 28 56 F2 | 	cmps	local02, #255 wc
2271c     E0 FF 9F CD |  if_b	jmp	#LR__2625
22720                 | LR__2626
22720     FE E5 05 F1 | 	add	objptr, #510
22724     F2 00 58 FC | 	wrword	#0, objptr
22728                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
22728     00 28 06 F6 | 	mov	local02, #0
2272c     02 E4 05 F1 | 	add	objptr, #2
22730     97 52 48 FB | 	callpa	#(@LR__2631-@LR__2627)>>2,fcache_load_ptr_
22734                 | LR__2627
22734     14 2F 02 F6 | 	mov	local05, local02
22738     01 2E 66 F0 | 	shl	local05, #1
2273c     F2 2E 02 F1 | 	add	local05, objptr
22740     14 31 02 F6 | 	mov	local06, local02
22744     0C 30 66 F0 | 	shl	local06, #12
22748     17 31 52 FC | 	wrword	local06, local05
2274c     01 28 06 F1 | 	add	local02, #1
22750     10 28 56 F2 | 	cmps	local02, #16 wc
22754     DC FF 9F CD |  if_b	jmp	#LR__2627
22758                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
22758     10 28 06 F6 | 	mov	local02, #16
2275c                 | LR__2628
2275c     14 2F 02 F6 | 	mov	local05, local02
22760     01 2E 66 F0 | 	shl	local05, #1
22764     F2 2E 02 F1 | 	add	local05, objptr
22768     7F 00 80 FF 
2276c     17 01 5A FC | 	wrword	##65280, local05
22770     01 28 06 F1 | 	add	local02, #1
22774     F0 28 16 F2 | 	cmp	local02, #240 wc
22778     E0 FF 9F CD |  if_b	jmp	#LR__2628
2277c                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
2277c     F0 28 06 F6 | 	mov	local02, #240
22780                 | LR__2629
22780     14 2F 02 F6 | 	mov	local05, local02
22784     01 2E 66 F0 | 	shl	local05, #1
22788     F2 2E 02 F1 | 	add	local05, objptr
2278c     FF 2A 06 F6 | 	mov	local03, #255
22790     14 2B 82 F1 | 	sub	local03, local02
22794     0C 2A 66 F0 | 	shl	local03, #12
22798     17 2B 52 FC | 	wrword	local03, local05
2279c     01 28 06 F1 | 	add	local02, #1
227a0     00 29 16 F2 | 	cmp	local02, #256 wc
227a4     D8 FF 9F CD |  if_b	jmp	#LR__2629
227a8                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
227a8     00 28 06 F6 | 	mov	local02, #0
227ac     01 00 00 FF 
227b0     00 E4 05 F1 | 	add	objptr, ##512
227b4                 | LR__2630
227b4     14 2F 02 F6 | 	mov	local05, local02
227b8     01 2E 66 F0 | 	shl	local05, #1
227bc     F2 2E 02 F1 | 	add	local05, objptr
227c0     14 31 02 F6 | 	mov	local06, local02
227c4     08 30 66 F0 | 	shl	local06, #8
227c8     17 31 52 FC | 	wrword	local06, local05
227cc     01 28 06 F1 | 	add	local02, #1
227d0     00 29 56 F2 | 	cmps	local02, #256 wc
227d4     DC FF 9F CD |  if_b	jmp	#LR__2630
227d8                 | LR__2631
227d8     FE E5 05 F1 | 	add	objptr, #510
227dc     F2 00 58 FC | 	wrword	#0, objptr
227e0                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
227e0     00 28 06 F6 | 	mov	local02, #0
227e4     02 E4 05 F1 | 	add	objptr, #2
227e8     97 6A 48 FB | 	callpa	#(@LR__2636-@LR__2632)>>2,fcache_load_ptr_
227ec                 | LR__2632
227ec     14 2F 02 F6 | 	mov	local05, local02
227f0     01 2E 66 F0 | 	shl	local05, #1
227f4     F2 2E 02 F1 | 	add	local05, objptr
227f8     14 31 02 F6 | 	mov	local06, local02
227fc     04 30 66 F0 | 	shl	local06, #4
22800     14 31 02 F1 | 	add	local06, local02
22804     04 30 66 F0 | 	shl	local06, #4
22808     17 31 52 FC | 	wrword	local06, local05
2280c     01 28 06 F1 | 	add	local02, #1
22810     F0 28 56 F2 | 	cmps	local02, #240 wc
22814     D4 FF 9F CD |  if_b	jmp	#LR__2632
22818     F0 28 06 F6 | 	mov	local02, #240
2281c                 | LR__2633
2281c     14 2F 02 F6 | 	mov	local05, local02
22820     01 2E 66 F0 | 	shl	local05, #1
22824     F2 2E 02 F1 | 	add	local05, objptr
22828     FF 2A 06 F6 | 	mov	local03, #255
2282c     14 2B 82 F1 | 	sub	local03, local02
22830     0C 2A 66 F0 | 	shl	local03, #12
22834     17 2B 52 FC | 	wrword	local03, local05
22838     01 28 06 F1 | 	add	local02, #1
2283c     00 29 16 F2 | 	cmp	local02, #256 wc
22840     D8 FF 9F CD |  if_b	jmp	#LR__2633
22844                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
22844     00 28 06 F6 | 	mov	local02, #0
22848     01 00 00 FF 
2284c     00 E4 05 F1 | 	add	objptr, ##512
22850                 | LR__2634
22850     14 2F 02 F6 | 	mov	local05, local02
22854     01 2E 66 F0 | 	shl	local05, #1
22858     F2 2E 02 F1 | 	add	local05, objptr
2285c     14 31 02 F6 | 	mov	local06, local02
22860     09 30 66 F0 | 	shl	local06, #9
22864     17 31 52 FC | 	wrword	local06, local05
22868     FF 2E 06 F6 | 	mov	local05, #255
2286c     14 2F 82 F1 | 	sub	local05, local02
22870     01 2E 66 F0 | 	shl	local05, #1
22874     F2 2E 02 F1 | 	add	local05, objptr
22878     14 31 02 F6 | 	mov	local06, local02
2287c     09 30 66 F0 | 	shl	local06, #9
22880     17 31 52 FC | 	wrword	local06, local05
22884     01 28 06 F1 | 	add	local02, #1
22888     80 28 56 F2 | 	cmps	local02, #128 wc
2288c     C0 FF 9F CD |  if_b	jmp	#LR__2634
22890                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
22890     00 28 06 F6 | 	mov	local02, #0
22894     01 00 00 FF 
22898     00 E4 05 F1 | 	add	objptr, ##512
2289c                 | LR__2635
2289c     14 2F 02 F6 | 	mov	local05, local02
228a0     01 2E 66 F0 | 	shl	local05, #1
228a4     F2 2E 02 F1 | 	add	local05, objptr
228a8     14 31 02 F6 | 	mov	local06, local02
228ac     0D 30 66 F0 | 	shl	local06, #13
228b0     17 31 52 FC | 	wrword	local06, local05
228b4     01 28 06 F1 | 	add	local02, #1
228b8     08 28 56 F2 | 	cmps	local02, #8 wc
228bc     DC FF 9F CD |  if_b	jmp	#LR__2635
228c0                 | LR__2636
228c0                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
228c0     08 28 06 F6 | 	mov	local02, #8
228c4     97 42 48 FB | 	callpa	#(@LR__2640-@LR__2637)>>2,fcache_load_ptr_
228c8                 | LR__2637
228c8     14 2F 02 F6 | 	mov	local05, local02
228cc     01 2E 66 F0 | 	shl	local05, #1
228d0     F2 2E 02 F1 | 	add	local05, objptr
228d4     14 27 02 F6 | 	mov	local01, local02
228d8     08 26 86 F1 | 	sub	local01, #8
228dc     0B 26 66 F0 | 	shl	local01, #11
228e0     7F 00 00 FF 
228e4     00 31 06 F6 | 	mov	local06, ##65280
228e8     13 31 82 F1 | 	sub	local06, local01
228ec     17 31 52 FC | 	wrword	local06, local05
228f0     01 28 06 F1 | 	add	local02, #1
228f4     18 28 16 F2 | 	cmp	local02, #24 wc
228f8     CC FF 9F CD |  if_b	jmp	#LR__2637
228fc                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
228fc     18 28 06 F6 | 	mov	local02, #24
22900                 | LR__2638
22900     14 2F 02 F6 | 	mov	local05, local02
22904     01 2E 66 F0 | 	shl	local05, #1
22908     F2 2E 02 F1 | 	add	local05, objptr
2290c     40 00 80 FF 
22910     17 01 58 FC | 	wrword	##32768, local05
22914     01 28 06 F1 | 	add	local02, #1
22918     81 28 16 F2 | 	cmp	local02, #129 wc
2291c     E0 FF 9F CD |  if_b	jmp	#LR__2638
22920                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
22920     81 28 06 F6 | 	mov	local02, #129
22924                 | LR__2639
22924     14 2F 02 F6 | 	mov	local05, local02
22928     01 2E 66 F0 | 	shl	local05, #1
2292c     F2 2E 02 F1 | 	add	local05, objptr
22930     FF 2A 06 F6 | 	mov	local03, #255
22934     14 2B 82 F1 | 	sub	local03, local02
22938     08 2A 66 F0 | 	shl	local03, #8
2293c     17 2B 52 FC | 	wrword	local03, local05
22940     01 28 06 F1 | 	add	local02, #1
22944     00 29 16 F2 | 	cmp	local02, #256 wc
22948     D8 FF 9F CD |  if_b	jmp	#LR__2639
2294c                 | LR__2640
2294c     3E 00 00 FF 
22950     EA E5 05 F1 | 	add	objptr, ##32234
22954     F2 00 59 FC | 	wrword	#128, objptr
22958     52 00 00 FF 
2295c     C2 E4 85 F1 | 	sub	objptr, ##42178
22960                 | ' for i=0 to 7
22960     00 28 06 F6 | 	mov	local02, #0
22964     97 8E 48 FB | 	callpa	#(@LR__2642-@LR__2641)>>2,fcache_load_ptr_
22968                 | LR__2641
22968     14 2F 02 F6 | 	mov	local05, local02
2296c     01 2E 66 F0 | 	shl	local05, #1
22970     14 2F 02 F1 | 	add	local05, local02
22974     03 2E 66 F0 | 	shl	local05, #3
22978     14 00 00 FF 
2297c     38 E5 05 F1 | 	add	objptr, ##10552
22980     F2 2E 02 F1 | 	add	local05, objptr
22984     00 EE A1 FF 
22988     17 01 68 FC | 	wrlong	##1138491392, local05
2298c     14 2F 02 F6 | 	mov	local05, local02
22990     01 2E 66 F0 | 	shl	local05, #1
22994     14 2F 02 F1 | 	add	local05, local02
22998     03 2E 66 F0 | 	shl	local05, #3
2299c     F2 2E 02 F1 | 	add	local05, objptr
229a0     04 2E 06 F1 | 	add	local05, #4
229a4     17 29 42 FC | 	wrbyte	local02, local05
229a8     14 2F 02 F6 | 	mov	local05, local02
229ac     01 2E 66 F0 | 	shl	local05, #1
229b0     14 2F 02 F1 | 	add	local05, local02
229b4     03 2E 66 F0 | 	shl	local05, #3
229b8     F2 2E 02 F1 | 	add	local05, objptr
229bc     05 2E 06 F1 | 	add	local05, #5
229c0     17 29 42 FC | 	wrbyte	local02, local05
229c4     14 2F 02 F6 | 	mov	local05, local02
229c8     01 2E 66 F0 | 	shl	local05, #1
229cc     14 2F 02 F1 | 	add	local05, local02
229d0     03 2E 66 F0 | 	shl	local05, #3
229d4     F2 2E 02 F1 | 	add	local05, objptr
229d8     06 2E 06 F1 | 	add	local05, #6
229dc     17 01 58 FC | 	wrword	#0, local05
229e0     14 2F 02 F6 | 	mov	local05, local02
229e4     01 2E 66 F0 | 	shl	local05, #1
229e8     14 2F 02 F1 | 	add	local05, local02
229ec     03 2E 66 F0 | 	shl	local05, #3
229f0     F2 2E 02 F1 | 	add	local05, objptr
229f4     08 2E 06 F1 | 	add	local05, #8
229f8     00 C0 9F FF 
229fc     17 01 68 FC | 	wrlong	##1065353216, local05
22a00     14 2F 02 F6 | 	mov	local05, local02
22a04     01 2E 66 F0 | 	shl	local05, #1
22a08     14 2F 02 F1 | 	add	local05, local02
22a0c     03 2E 66 F0 | 	shl	local05, #3
22a10     F2 2E 02 F1 | 	add	local05, objptr
22a14     0C 2E 06 F1 | 	add	local05, #12
22a18     00 40 A0 FF 
22a1c     17 01 68 FC | 	wrlong	##1082130432, local05
22a20     14 2F 02 F6 | 	mov	local05, local02
22a24     01 2E 66 F0 | 	shl	local05, #1
22a28     14 2F 02 F1 | 	add	local05, local02
22a2c     03 2E 66 F0 | 	shl	local05, #3
22a30     F2 2E 02 F1 | 	add	local05, objptr
22a34     10 2E 06 F1 | 	add	local05, #16
22a38     17 01 68 FC | 	wrlong	#0, local05
22a3c     14 2F 02 F6 | 	mov	local05, local02
22a40     01 2E 66 F0 | 	shl	local05, #1
22a44     14 2F 02 F1 | 	add	local05, local02
22a48     03 2E 66 F0 | 	shl	local05, #3
22a4c     F2 2E 02 F1 | 	add	local05, objptr
22a50     14 2E 06 F1 | 	add	local05, #20
22a54     17 FF 59 FC | 	wrword	#255, local05
22a58     14 2F 02 F6 | 	mov	local05, local02
22a5c     01 2E 66 F0 | 	shl	local05, #1
22a60     3D 00 00 FF 
22a64     7C E5 05 F1 | 	add	objptr, ##31612
22a68     F2 2E 02 F1 | 	add	local05, objptr
22a6c     17 FF 59 FC | 	wrword	#255, local05
22a70     01 28 06 F1 | 	add	local02, #1
22a74     08 28 56 F2 | 	cmps	local02, #8 wc
22a78     52 00 00 FF 
22a7c     B4 E4 85 F1 | 	sub	objptr, ##42164
22a80     E4 FE 9F CD |  if_b	jmp	#LR__2641
22a84                 | LR__2642
22a84     00 6E 20 FF 
22a88     00 30 06 F6 | 	mov	local06, ##1088159744
22a8c                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
22a8c     03 2E 06 F6 | 	mov	local05, #3
22a90                 | LR__2643
22a90     18 13 02 F6 | 	mov	arg01, local06
22a94     CE C3 1F FF 
22a98     7D 14 06 F6 | 	mov	arg02, ##1065852029
22a9c     D4 6C B0 FD | 	call	#__system___float_mul
22aa0     FD 30 02 F6 | 	mov	local06, result1
22aa4     FA 2F 6E FB | 	djnz	local05, #LR__2643
22aa8     00 28 06 F6 | 	mov	local02, #0
22aac                 | LR__2644
22aac     14 2D 02 F6 | 	mov	local04, local02
22ab0     02 2C 66 F0 | 	shl	local04, #2
22ab4     14 00 00 FF 
22ab8     D8 E4 05 F1 | 	add	objptr, ##10456
22abc     F2 2C 02 F1 | 	add	local04, objptr
22ac0     16 31 62 FC | 	wrlong	local06, local04
22ac4     18 13 02 F6 | 	mov	arg01, local06
22ac8     CE C3 1F FF 
22acc     7D 14 06 F6 | 	mov	arg02, ##1065852029
22ad0     14 00 00 FF 
22ad4     D8 E4 85 F1 | 	sub	objptr, ##10456
22ad8     98 6C B0 FD | 	call	#__system___float_mul
22adc     FD 30 02 F6 | 	mov	local06, result1
22ae0     01 28 06 F1 | 	add	local02, #1
22ae4     0C 28 56 F2 | 	cmps	local02, #12 wc
22ae8     C0 FF 9F CD |  if_b	jmp	#LR__2644
22aec     14 00 00 FF 
22af0     08 E5 05 F1 | 	add	objptr, ##10504
22af4     F2 50 6B FC | 	wrlong	#424, objptr
22af8     04 E4 05 F1 | 	add	objptr, #4
22afc     F2 20 6B FC | 	wrlong	#400, objptr
22b00     04 E4 05 F1 | 	add	objptr, #4
22b04     F2 F2 6A FC | 	wrlong	#377, objptr
22b08     04 E4 05 F1 | 	add	objptr, #4
22b0c     F2 C8 6A FC | 	wrlong	#356, objptr
22b10     04 E4 05 F1 | 	add	objptr, #4
22b14     F2 A0 6A FC | 	wrlong	#336, objptr
22b18     04 E4 05 F1 | 	add	objptr, #4
22b1c     F2 7A 6A FC | 	wrlong	#317, objptr
22b20     04 E4 05 F1 | 	add	objptr, #4
22b24     F2 58 6A FC | 	wrlong	#300, objptr
22b28     04 E4 05 F1 | 	add	objptr, #4
22b2c     F2 36 6A FC | 	wrlong	#283, objptr
22b30     04 E4 05 F1 | 	add	objptr, #4
22b34     F2 16 6A FC | 	wrlong	#267, objptr
22b38     04 E4 05 F1 | 	add	objptr, #4
22b3c     F2 F8 69 FC | 	wrlong	#252, objptr
22b40     04 E4 05 F1 | 	add	objptr, #4
22b44     F2 DC 69 FC | 	wrlong	#238, objptr
22b48     04 E4 05 F1 | 	add	objptr, #4
22b4c     F2 C0 69 FC | 	wrlong	#224, objptr
22b50     3D 00 00 FF 
22b54     8E E5 05 F1 | 	add	objptr, ##31630
22b58     F2 00 59 FC | 	wrword	#128, objptr
22b5c     02 E4 85 F1 | 	sub	objptr, #2
22b60     F2 00 59 FC | 	wrword	#128, objptr
22b64     52 00 00 FF 
22b68     C0 E4 85 F1 | 	sub	objptr, ##42176
22b6c     A7 F0 03 F6 | 	mov	ptra, fp
22b70     B2 00 A0 FD | 	call	#popregs_
22b74                 | _init_audio_ret
22b74     2D 00 64 FD | 	ret
22b78                 | 
22b78                 | ' 
22b78                 | ' '------------------- Error messages
22b78                 | ' 
22b78                 | ' sub init_error_strings
22b78                 | _init_error_strings
22b78     B7 01 00 FF 
22b7c     E4 01 06 F6 | 	mov	_var01, ##@LR__5979
22b80     45 00 00 FF 
22b84     7C E4 05 F1 | 	add	objptr, ##35452
22b88     F2 00 62 FC | 	wrlong	_var01, objptr
22b8c     B7 01 00 FF 
22b90     E5 01 06 F6 | 	mov	_var01, ##@LR__5980
22b94     04 E4 05 F1 | 	add	objptr, #4
22b98     F2 00 62 FC | 	wrlong	_var01, objptr
22b9c     B8 01 00 FF 
22ba0     09 00 06 F6 | 	mov	_var01, ##@LR__5981
22ba4     04 E4 05 F1 | 	add	objptr, #4
22ba8     F2 00 62 FC | 	wrlong	_var01, objptr
22bac     B8 01 00 FF 
22bb0     29 00 06 F6 | 	mov	_var01, ##@LR__5982
22bb4     04 E4 05 F1 | 	add	objptr, #4
22bb8     F2 00 62 FC | 	wrlong	_var01, objptr
22bbc     B8 01 00 FF 
22bc0     42 00 06 F6 | 	mov	_var01, ##@LR__5983
22bc4     04 E4 05 F1 | 	add	objptr, #4
22bc8     F2 00 62 FC | 	wrlong	_var01, objptr
22bcc     B8 01 00 FF 
22bd0     5D 00 06 F6 | 	mov	_var01, ##@LR__5984
22bd4     04 E4 05 F1 | 	add	objptr, #4
22bd8     F2 00 62 FC | 	wrlong	_var01, objptr
22bdc     B8 01 00 FF 
22be0     7E 00 06 F6 | 	mov	_var01, ##@LR__5985
22be4     04 E4 05 F1 | 	add	objptr, #4
22be8     F2 00 62 FC | 	wrlong	_var01, objptr
22bec     B8 01 00 FF 
22bf0     AB 00 06 F6 | 	mov	_var01, ##@LR__5986
22bf4     04 E4 05 F1 | 	add	objptr, #4
22bf8     F2 00 62 FC | 	wrlong	_var01, objptr
22bfc     B8 01 00 FF 
22c00     D5 00 06 F6 | 	mov	_var01, ##@LR__5987
22c04     04 E4 05 F1 | 	add	objptr, #4
22c08     F2 00 62 FC | 	wrlong	_var01, objptr
22c0c     B8 01 00 FF 
22c10     ED 00 06 F6 | 	mov	_var01, ##@LR__5988
22c14     04 E4 05 F1 | 	add	objptr, #4
22c18     F2 00 62 FC | 	wrlong	_var01, objptr
22c1c     B8 01 00 FF 
22c20     0D 01 06 F6 | 	mov	_var01, ##@LR__5989
22c24     04 E4 05 F1 | 	add	objptr, #4
22c28     F2 00 62 FC | 	wrlong	_var01, objptr
22c2c     B8 01 00 FF 
22c30     23 01 06 F6 | 	mov	_var01, ##@LR__5990
22c34     04 E4 05 F1 | 	add	objptr, #4
22c38     F2 00 62 FC | 	wrlong	_var01, objptr
22c3c     B8 01 00 FF 
22c40     40 01 06 F6 | 	mov	_var01, ##@LR__5991
22c44     04 E4 05 F1 | 	add	objptr, #4
22c48     F2 00 62 FC | 	wrlong	_var01, objptr
22c4c     B8 01 00 FF 
22c50     63 01 06 F6 | 	mov	_var01, ##@LR__5992
22c54     04 E4 05 F1 | 	add	objptr, #4
22c58     F2 00 62 FC | 	wrlong	_var01, objptr
22c5c     B8 01 00 FF 
22c60     89 01 06 F6 | 	mov	_var01, ##@LR__5993
22c64     04 E4 05 F1 | 	add	objptr, #4
22c68     F2 00 62 FC | 	wrlong	_var01, objptr
22c6c     B8 01 00 FF 
22c70     A4 01 06 F6 | 	mov	_var01, ##@LR__5994
22c74     04 E4 05 F1 | 	add	objptr, #4
22c78     F2 00 62 FC | 	wrlong	_var01, objptr
22c7c     B8 01 00 FF 
22c80     B4 01 06 F6 | 	mov	_var01, ##@LR__5995
22c84     04 E4 05 F1 | 	add	objptr, #4
22c88     F2 00 62 FC | 	wrlong	_var01, objptr
22c8c     B8 01 00 FF 
22c90     C3 01 06 F6 | 	mov	_var01, ##@LR__5996
22c94     04 E4 05 F1 | 	add	objptr, #4
22c98     F2 00 62 FC | 	wrlong	_var01, objptr
22c9c     B8 01 00 FF 
22ca0     DD 01 06 F6 | 	mov	_var01, ##@LR__5997
22ca4     04 E4 05 F1 | 	add	objptr, #4
22ca8     F2 00 62 FC | 	wrlong	_var01, objptr
22cac     B8 01 00 FF 
22cb0     EE 01 06 F6 | 	mov	_var01, ##@LR__5998
22cb4     04 E4 05 F1 | 	add	objptr, #4
22cb8     F2 00 62 FC | 	wrlong	_var01, objptr
22cbc     B9 01 00 FF 
22cc0     05 00 06 F6 | 	mov	_var01, ##@LR__5999
22cc4     04 E4 05 F1 | 	add	objptr, #4
22cc8     F2 00 62 FC | 	wrlong	_var01, objptr
22ccc     B9 01 00 FF 
22cd0     18 00 06 F6 | 	mov	_var01, ##@LR__6000
22cd4     04 E4 05 F1 | 	add	objptr, #4
22cd8     F2 00 62 FC | 	wrlong	_var01, objptr
22cdc     B9 01 00 FF 
22ce0     27 00 06 F6 | 	mov	_var01, ##@LR__6001
22ce4     04 E4 05 F1 | 	add	objptr, #4
22ce8     F2 00 62 FC | 	wrlong	_var01, objptr
22cec     B9 01 00 FF 
22cf0     43 00 06 F6 | 	mov	_var01, ##@LR__6002
22cf4     04 E4 05 F1 | 	add	objptr, #4
22cf8     F2 00 62 FC | 	wrlong	_var01, objptr
22cfc     B9 01 00 FF 
22d00     53 00 06 F6 | 	mov	_var01, ##@LR__6003
22d04     04 E4 05 F1 | 	add	objptr, #4
22d08     F2 00 62 FC | 	wrlong	_var01, objptr
22d0c     B9 01 00 FF 
22d10     63 00 06 F6 | 	mov	_var01, ##@LR__6004
22d14     04 E4 05 F1 | 	add	objptr, #4
22d18     F2 00 62 FC | 	wrlong	_var01, objptr
22d1c     B9 01 00 FF 
22d20     96 00 06 F6 | 	mov	_var01, ##@LR__6005
22d24     04 E4 05 F1 | 	add	objptr, #4
22d28     F2 00 62 FC | 	wrlong	_var01, objptr
22d2c     B9 01 00 FF 
22d30     B1 00 06 F6 | 	mov	_var01, ##@LR__6006
22d34     04 E4 05 F1 | 	add	objptr, #4
22d38     F2 00 62 FC | 	wrlong	_var01, objptr
22d3c     B9 01 00 FF 
22d40     C6 00 06 F6 | 	mov	_var01, ##@LR__6007
22d44     04 E4 05 F1 | 	add	objptr, #4
22d48     F2 00 62 FC | 	wrlong	_var01, objptr
22d4c     B9 01 00 FF 
22d50     D2 00 06 F6 | 	mov	_var01, ##@LR__6008
22d54     04 E4 05 F1 | 	add	objptr, #4
22d58     F2 00 62 FC | 	wrlong	_var01, objptr
22d5c     B9 01 00 FF 
22d60     E3 00 06 F6 | 	mov	_var01, ##@LR__6009
22d64     04 E4 05 F1 | 	add	objptr, #4
22d68     F2 00 62 FC | 	wrlong	_var01, objptr
22d6c     B9 01 00 FF 
22d70     F3 00 06 F6 | 	mov	_var01, ##@LR__6010
22d74     04 E4 05 F1 | 	add	objptr, #4
22d78     F2 00 62 FC | 	wrlong	_var01, objptr
22d7c     B9 01 00 FF 
22d80     0E 01 06 F6 | 	mov	_var01, ##@LR__6011
22d84     04 E4 05 F1 | 	add	objptr, #4
22d88     F2 00 62 FC | 	wrlong	_var01, objptr
22d8c     B9 01 00 FF 
22d90     1E 01 06 F6 | 	mov	_var01, ##@LR__6012
22d94     04 E4 05 F1 | 	add	objptr, #4
22d98     F2 00 62 FC | 	wrlong	_var01, objptr
22d9c     B9 01 00 FF 
22da0     2C 01 06 F6 | 	mov	_var01, ##@LR__6013
22da4     04 E4 05 F1 | 	add	objptr, #4
22da8     F2 00 62 FC | 	wrlong	_var01, objptr
22dac     B9 01 00 FF 
22db0     46 01 06 F6 | 	mov	_var01, ##@LR__6014
22db4     04 E4 05 F1 | 	add	objptr, #4
22db8     F2 00 62 FC | 	wrlong	_var01, objptr
22dbc     B9 01 00 FF 
22dc0     79 01 06 F6 | 	mov	_var01, ##@LR__6015
22dc4     04 E4 05 F1 | 	add	objptr, #4
22dc8     F2 00 62 FC | 	wrlong	_var01, objptr
22dcc     B9 01 00 FF 
22dd0     91 01 06 F6 | 	mov	_var01, ##@LR__6016
22dd4     04 E4 05 F1 | 	add	objptr, #4
22dd8     F2 00 62 FC | 	wrlong	_var01, objptr
22ddc     B9 01 00 FF 
22de0     AC 01 06 F6 | 	mov	_var01, ##@LR__6017
22de4     04 E4 05 F1 | 	add	objptr, #4
22de8     F2 00 62 FC | 	wrlong	_var01, objptr
22dec     B9 01 00 FF 
22df0     C9 01 06 F6 | 	mov	_var01, ##@LR__6018
22df4     04 E4 05 F1 | 	add	objptr, #4
22df8     F2 00 62 FC | 	wrlong	_var01, objptr
22dfc     B9 01 00 FF 
22e00     E2 01 06 F6 | 	mov	_var01, ##@LR__6019
22e04     04 E4 05 F1 | 	add	objptr, #4
22e08     F2 00 62 FC | 	wrlong	_var01, objptr
22e0c     BA 01 00 FF 
22e10     01 00 06 F6 | 	mov	_var01, ##@LR__6020
22e14     04 E4 05 F1 | 	add	objptr, #4
22e18     F2 00 62 FC | 	wrlong	_var01, objptr
22e1c     BA 01 00 FF 
22e20     0F 00 06 F6 | 	mov	_var01, ##@LR__6021
22e24     04 E4 05 F1 | 	add	objptr, #4
22e28     F2 00 62 FC | 	wrlong	_var01, objptr
22e2c     BA 01 00 FF 
22e30     3C 00 06 F6 | 	mov	_var01, ##@LR__6022
22e34     04 E4 05 F1 | 	add	objptr, #4
22e38     F2 00 62 FC | 	wrlong	_var01, objptr
22e3c     BA 01 00 FF 
22e40     49 00 06 F6 | 	mov	_var01, ##@LR__6023
22e44     04 E4 05 F1 | 	add	objptr, #4
22e48     F2 00 62 FC | 	wrlong	_var01, objptr
22e4c     BA 01 00 FF 
22e50     5D 00 06 F6 | 	mov	_var01, ##@LR__6024
22e54     04 E4 05 F1 | 	add	objptr, #4
22e58     F2 00 62 FC | 	wrlong	_var01, objptr
22e5c     BA 01 00 FF 
22e60     81 00 06 F6 | 	mov	_var01, ##@LR__6025
22e64     04 E4 05 F1 | 	add	objptr, #4
22e68     F2 00 62 FC | 	wrlong	_var01, objptr
22e6c     BA 01 00 FF 
22e70     98 00 06 F6 | 	mov	_var01, ##@LR__6026
22e74     04 E4 05 F1 | 	add	objptr, #4
22e78     F2 00 62 FC | 	wrlong	_var01, objptr
22e7c     BA 01 00 FF 
22e80     AB 00 06 F6 | 	mov	_var01, ##@LR__6027
22e84     04 E4 05 F1 | 	add	objptr, #4
22e88     F2 00 62 FC | 	wrlong	_var01, objptr
22e8c     BA 01 00 FF 
22e90     C2 00 06 F6 | 	mov	_var01, ##@LR__6028
22e94     04 E4 05 F1 | 	add	objptr, #4
22e98     F2 00 62 FC | 	wrlong	_var01, objptr
22e9c     BA 01 00 FF 
22ea0     DB 00 06 F6 | 	mov	_var01, ##@LR__6029
22ea4     04 E4 05 F1 | 	add	objptr, #4
22ea8     F2 00 62 FC | 	wrlong	_var01, objptr
22eac     BA 01 00 FF 
22eb0     FD 00 06 F6 | 	mov	_var01, ##@LR__6030
22eb4     04 E4 05 F1 | 	add	objptr, #4
22eb8     F2 00 62 FC | 	wrlong	_var01, objptr
22ebc     BA 01 00 FF 
22ec0     10 01 06 F6 | 	mov	_var01, ##@LR__6031
22ec4     04 E4 05 F1 | 	add	objptr, #4
22ec8     F2 00 62 FC | 	wrlong	_var01, objptr
22ecc     BA 01 00 FF 
22ed0     20 01 06 F6 | 	mov	_var01, ##@LR__6032
22ed4     04 E4 05 F1 | 	add	objptr, #4
22ed8     F2 00 62 FC | 	wrlong	_var01, objptr
22edc     BA 01 00 FF 
22ee0     38 01 06 F6 | 	mov	_var01, ##@LR__6033
22ee4     04 E4 05 F1 | 	add	objptr, #4
22ee8     F2 00 62 FC | 	wrlong	_var01, objptr
22eec     BA 01 00 FF 
22ef0     4F 01 06 F6 | 	mov	_var01, ##@LR__6034
22ef4     04 E4 05 F1 | 	add	objptr, #4
22ef8     F2 00 62 FC | 	wrlong	_var01, objptr
22efc     45 00 00 FF 
22f00     58 E5 85 F1 | 	sub	objptr, ##35672
22f04                 | _init_error_strings_ret
22f04     2D 00 64 FD | 	ret
22f08                 | 
22f08                 | '         
22f08                 | ' sub printerror(err as integer, linenum=0 as integer)
22f08                 | _printerror
22f08     02 4A 05 F6 | 	mov	COUNT_, #2
22f0c     A8 00 A0 FD | 	call	#pushregs_
22f10     09 27 02 F6 | 	mov	local01, arg01
22f14     0A 29 02 F6 | 	mov	local02, arg02
22f18     BA 01 00 FF 
22f1c     5C 13 06 F6 | 	mov	arg01, ##@LR__6035
22f20     10 21 B0 FD | 	call	#_hg010b_spin2_write
22f24     13 13 02 F6 | 	mov	arg01, local01
22f28     AC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22f2c     FD 12 02 F6 | 	mov	arg01, result1
22f30     00 21 B0 FD | 	call	#_hg010b_spin2_write
22f34     BA 01 00 FF 
22f38     63 13 06 F6 | 	mov	arg01, ##@LR__6036
22f3c     F4 20 B0 FD | 	call	#_hg010b_spin2_write
22f40     02 26 66 F0 | 	shl	local01, #2
22f44     45 00 00 FF 
22f48     7C E4 05 F1 | 	add	objptr, ##35452
22f4c     F2 26 02 F1 | 	add	local01, objptr
22f50     13 13 02 FB | 	rdlong	arg01, local01
22f54     45 00 00 FF 
22f58     7C E4 85 F1 | 	sub	objptr, ##35452
22f5c     D4 20 B0 FD | 	call	#_hg010b_spin2_write
22f60                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
22f60                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
22f60     01 28 56 F2 | 	cmps	local02, #1 wc
22f64     24 00 90 CD |  if_b	jmp	#LR__2650
22f68     BA 01 00 FF 
22f6c     67 13 06 F6 | 	mov	arg01, ##@LR__6037
22f70     C0 20 B0 FD | 	call	#_hg010b_spin2_write
22f74     14 13 02 F6 | 	mov	arg01, local02
22f78     5C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22f7c     FD 12 02 F6 | 	mov	arg01, result1
22f80                 | ' 
22f80                 | ' write(text)
22f80     B0 20 B0 FD | 	call	#_hg010b_spin2_write
22f84                 | ' crlf
22f84     AC 25 B0 FD | 	call	#_hg010b_spin2_crlf
22f88     10 00 90 FD | 	jmp	#LR__2651
22f8c                 | LR__2650
22f8c     BA 01 00 FF 
22f90     71 13 06 F6 | 	mov	arg01, ##@LR__6038
22f94                 | ' 
22f94                 | ' write(text)
22f94     9C 20 B0 FD | 	call	#_hg010b_spin2_write
22f98                 | ' crlf
22f98     98 25 B0 FD | 	call	#_hg010b_spin2_crlf
22f9c                 | LR__2651
22f9c     A7 F0 03 F6 | 	mov	ptra, fp
22fa0     B2 00 A0 FD | 	call	#popregs_
22fa4                 | _printerror_ret
22fa4     2D 00 64 FD | 	ret
22fa8                 | 
22fa8                 | ' 
22fa8                 | ' '' ------------------------------- Hardware start/stop/initialization 
22fa8                 | ' 
22fa8                 | ' sub startpsram
22fa8                 | _startpsram
22fa8     00 12 06 F6 | 	mov	arg01, #0
22fac     0A 14 C6 F9 | 	decod	arg02, #10
22fb0     0B 16 06 F6 | 	mov	arg03, #11
22fb4     07 18 06 F6 | 	mov	arg04, #7
22fb8     0B 00 00 FF 
22fbc     CC E4 05 F1 | 	add	objptr, ##5836
22fc0     80 2A B0 FD | 	call	#_psram_spin2_startx
22fc4     2B 00 00 FF 
22fc8     3C E5 05 F1 | 	add	objptr, ##22332
22fcc     F2 FA 61 FC | 	wrlong	result1, objptr
22fd0                 | '     return $7FF00 + cog*12
22fd0     0C E4 05 F1 | 	add	objptr, #12
22fd4     FF 03 80 FF 
22fd8     F2 00 6A FC | 	wrlong	##524032, objptr
22fdc     37 00 00 FF 
22fe0     14 E4 85 F1 | 	sub	objptr, ##28180
22fe4                 | _startpsram_ret
22fe4     2D 00 64 FD | 	ret
22fe8                 | 
22fe8                 | ' 
22fe8                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
22fe8                 | _startvideo
22fe8     01 4A 05 F6 | 	mov	COUNT_, #1
22fec     A8 00 A0 FD | 	call	#pushregs_
22ff0     37 00 00 FF 
22ff4     14 E4 05 F1 | 	add	objptr, ##28180
22ff8     F2 18 02 FB | 	rdlong	arg04, objptr
22ffc     37 00 00 FF 
23000     14 E4 85 F1 | 	sub	objptr, ##28180
23004     0A 13 02 F6 | 	mov	arg01, arg02
23008     0C 15 02 F6 | 	mov	arg02, arg04
2300c     1C 08 B0 FD | 	call	#_hg010b_spin2_start
23010     37 00 00 FF 
23014     00 E4 05 F1 | 	add	objptr, ##28160
23018     F2 FA 61 FC | 	wrlong	result1, objptr
2301c                 | ' 
2301c                 | ' videocog=v.start(pin,mbox)
2301c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
2301c     00 26 06 F6 | 	mov	local01, #0
23020     2B 00 00 FF 
23024     34 E5 85 F1 | 	sub	objptr, ##22324
23028                 | LR__2660
23028     13 13 02 F6 | 	mov	arg01, local01
2302c     00 28 00 FF 
23030     00 14 06 F6 | 	mov	arg02, ##5242880
23034     64 2E B0 FD | 	call	#_psram_spin2_setQos
23038     01 26 06 F1 | 	add	local01, #1
2303c     08 26 56 F2 | 	cmps	local01, #8 wc
23040     E4 FF 9F CD |  if_b	jmp	#LR__2660
23044     2B 00 00 FF 
23048     34 E5 05 F1 | 	add	objptr, ##22324
2304c     F2 12 02 FB | 	rdlong	arg01, objptr
23050     7A 00 02 FF 
23054     00 14 06 F6 | 	mov	arg02, ##67171328
23058     2B 00 00 FF 
2305c     34 E5 85 F1 | 	sub	objptr, ##22324
23060     38 2E B0 FD | 	call	#_psram_spin2_setQos
23064     0B 00 00 FF 
23068     CC E4 85 F1 | 	sub	objptr, ##5836
2306c                 | ' psram.setQoS(videocog, $0400f400) 
2306c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
2306c     F2 14 02 F6 | 	mov	arg02, objptr
23070     00 08 05 FF 
23074     00 14 46 F5 | 	or	arg02, ##168820736
23078     00 16 06 F6 | 	mov	arg03, #0
2307c     00 18 06 F6 | 	mov	arg04, #0
23080     00 12 06 F6 | 	mov	arg01, #0
23084     18 43 B0 FD | 	call	#__system___basic_open
23088                 | ' return videocog
23088     37 00 00 FF 
2308c     00 E4 05 F1 | 	add	objptr, ##28160
23090     F2 FA 01 FB | 	rdlong	result1, objptr
23094     37 00 00 FF 
23098     00 E4 85 F1 | 	sub	objptr, ##28160
2309c     A7 F0 03 F6 | 	mov	ptra, fp
230a0     B2 00 A0 FD | 	call	#popregs_
230a4                 | _startvideo_ret
230a4     2D 00 64 FD | 	ret
230a8                 | 
230a8                 | ' 
230a8                 | ' 
230a8                 | ' 
230a8                 | ' '' ------------------------------- Convenient psram peek/poke
230a8                 | ' 
230a8                 | ' sub pslpoke(addr as ulong,value as ulong)
230a8                 | _pslpoke
230a8     00 4A 05 F6 | 	mov	COUNT_, #0
230ac     A8 00 A0 FD | 	call	#pushregs_
230b0     08 F0 07 F1 | 	add	ptra, #8
230b4     A7 12 62 FC | 	wrlong	arg01, fp
230b8     04 4E 05 F1 | 	add	fp, #4
230bc     A7 14 62 FC | 	wrlong	arg02, fp
230c0     A7 12 02 F6 | 	mov	arg01, fp
230c4     04 4E 85 F1 | 	sub	fp, #4
230c8     A7 14 02 FB | 	rdlong	arg02, fp
230cc     04 16 06 F6 | 	mov	arg03, #4
230d0     0B 00 00 FF 
230d4     CC E4 05 F1 | 	add	objptr, ##5836
230d8     30 2C B0 FD | 	call	#_psram_spin2_write
230dc     0B 00 00 FF 
230e0     CC E4 85 F1 | 	sub	objptr, ##5836
230e4     A7 F0 03 F6 | 	mov	ptra, fp
230e8     B2 00 A0 FD | 	call	#popregs_
230ec                 | _pslpoke_ret
230ec     2D 00 64 FD | 	ret
230f0                 | 
230f0                 | ' 
230f0                 | ' sub psdpoke(addr as ulong,value as ulong)
230f0                 | _psdpoke
230f0     00 4A 05 F6 | 	mov	COUNT_, #0
230f4     A8 00 A0 FD | 	call	#pushregs_
230f8     08 F0 07 F1 | 	add	ptra, #8
230fc     A7 12 62 FC | 	wrlong	arg01, fp
23100     04 4E 05 F1 | 	add	fp, #4
23104     A7 14 62 FC | 	wrlong	arg02, fp
23108     A7 12 02 F6 | 	mov	arg01, fp
2310c     04 4E 85 F1 | 	sub	fp, #4
23110     A7 14 02 FB | 	rdlong	arg02, fp
23114     02 16 06 F6 | 	mov	arg03, #2
23118     0B 00 00 FF 
2311c     CC E4 05 F1 | 	add	objptr, ##5836
23120     E8 2B B0 FD | 	call	#_psram_spin2_write
23124     0B 00 00 FF 
23128     CC E4 85 F1 | 	sub	objptr, ##5836
2312c     A7 F0 03 F6 | 	mov	ptra, fp
23130     B2 00 A0 FD | 	call	#popregs_
23134                 | _psdpoke_ret
23134     2D 00 64 FD | 	ret
23138                 | 
23138                 | ' 
23138                 | ' sub pspoke(addr as ulong,value as ulong)
23138                 | _pspoke
23138     00 4A 05 F6 | 	mov	COUNT_, #0
2313c     A8 00 A0 FD | 	call	#pushregs_
23140     08 F0 07 F1 | 	add	ptra, #8
23144     A7 12 62 FC | 	wrlong	arg01, fp
23148     04 4E 05 F1 | 	add	fp, #4
2314c     A7 14 62 FC | 	wrlong	arg02, fp
23150     A7 12 02 F6 | 	mov	arg01, fp
23154     04 4E 85 F1 | 	sub	fp, #4
23158     A7 14 02 FB | 	rdlong	arg02, fp
2315c     01 16 06 F6 | 	mov	arg03, #1
23160     0B 00 00 FF 
23164     CC E4 05 F1 | 	add	objptr, ##5836
23168     A0 2B B0 FD | 	call	#_psram_spin2_write
2316c     0B 00 00 FF 
23170     CC E4 85 F1 | 	sub	objptr, ##5836
23174     A7 F0 03 F6 | 	mov	ptra, fp
23178     B2 00 A0 FD | 	call	#popregs_
2317c                 | _pspoke_ret
2317c     2D 00 64 FD | 	ret
23180                 | 
23180                 | ' 
23180                 | ' function pspeek(adr as ulong) as ubyte
23180                 | _pspeek
23180     00 4A 05 F6 | 	mov	COUNT_, #0
23184     A8 00 A0 FD | 	call	#pushregs_
23188     0C F0 07 F1 | 	add	ptra, #12
2318c     04 4E 05 F1 | 	add	fp, #4
23190     A7 12 62 FC | 	wrlong	arg01, fp
23194     04 4E 05 F1 | 	add	fp, #4
23198     A7 12 02 F6 | 	mov	arg01, fp
2319c     04 4E 85 F1 | 	sub	fp, #4
231a0     A7 14 02 FB | 	rdlong	arg02, fp
231a4     04 4E 85 F1 | 	sub	fp, #4
231a8     01 16 06 F6 | 	mov	arg03, #1
231ac     0B 00 00 FF 
231b0     CC E4 05 F1 | 	add	objptr, ##5836
231b4     B8 2A B0 FD | 	call	#_psram_spin2_read1
231b8     0B 00 00 FF 
231bc     CC E4 85 F1 | 	sub	objptr, ##5836
231c0                 | ' psram.read1(varptr(res),adr,1)
231c0                 | ' return res
231c0     08 4E 05 F1 | 	add	fp, #8
231c4     A7 FA C1 FA | 	rdbyte	result1, fp
231c8     08 4E 85 F1 | 	sub	fp, #8
231cc     A7 F0 03 F6 | 	mov	ptra, fp
231d0     B2 00 A0 FD | 	call	#popregs_
231d4                 | _pspeek_ret
231d4     2D 00 64 FD | 	ret
231d8                 | 
231d8                 | ' 
231d8                 | ' function pslpeek(adr as ulong) as ulong
231d8                 | _pslpeek
231d8     00 4A 05 F6 | 	mov	COUNT_, #0
231dc     A8 00 A0 FD | 	call	#pushregs_
231e0     0C F0 07 F1 | 	add	ptra, #12
231e4     04 4E 05 F1 | 	add	fp, #4
231e8     A7 12 62 FC | 	wrlong	arg01, fp
231ec     04 4E 05 F1 | 	add	fp, #4
231f0     A7 12 02 F6 | 	mov	arg01, fp
231f4     04 4E 85 F1 | 	sub	fp, #4
231f8     A7 14 02 FB | 	rdlong	arg02, fp
231fc     04 4E 85 F1 | 	sub	fp, #4
23200     04 16 06 F6 | 	mov	arg03, #4
23204     0B 00 00 FF 
23208     CC E4 05 F1 | 	add	objptr, ##5836
2320c     60 2A B0 FD | 	call	#_psram_spin2_read1
23210     0B 00 00 FF 
23214     CC E4 85 F1 | 	sub	objptr, ##5836
23218                 | ' psram.read1(varptr(res),adr,4)
23218                 | ' return res
23218     08 4E 05 F1 | 	add	fp, #8
2321c     A7 FA 01 FB | 	rdlong	result1, fp
23220     08 4E 85 F1 | 	sub	fp, #8
23224     A7 F0 03 F6 | 	mov	ptra, fp
23228     B2 00 A0 FD | 	call	#popregs_
2322c                 | _pslpeek_ret
2322c     2D 00 64 FD | 	ret
23230                 | 
23230                 | ' 
23230                 | ' function psdpeek(adr as ulong) as ulong
23230                 | _psdpeek
23230     00 4A 05 F6 | 	mov	COUNT_, #0
23234     A8 00 A0 FD | 	call	#pushregs_
23238     0C F0 07 F1 | 	add	ptra, #12
2323c     04 4E 05 F1 | 	add	fp, #4
23240     A7 12 62 FC | 	wrlong	arg01, fp
23244     04 4E 05 F1 | 	add	fp, #4
23248     A7 12 02 F6 | 	mov	arg01, fp
2324c     04 4E 85 F1 | 	sub	fp, #4
23250     A7 14 02 FB | 	rdlong	arg02, fp
23254     04 4E 85 F1 | 	sub	fp, #4
23258     02 16 06 F6 | 	mov	arg03, #2
2325c     0B 00 00 FF 
23260     CC E4 05 F1 | 	add	objptr, ##5836
23264     08 2A B0 FD | 	call	#_psram_spin2_read1
23268     0B 00 00 FF 
2326c     CC E4 85 F1 | 	sub	objptr, ##5836
23270                 | ' psram.read1(varptr(res),adr,2)
23270                 | ' return res
23270     08 4E 05 F1 | 	add	fp, #8
23274     A7 FA E1 FA | 	rdword	result1, fp
23278     08 4E 85 F1 | 	sub	fp, #8
2327c     A7 F0 03 F6 | 	mov	ptra, fp
23280     B2 00 A0 FD | 	call	#popregs_
23284                 | _psdpeek_ret
23284     2D 00 64 FD | 	ret
23288                 | 
23288                 | ' 
23288                 | ' '' ------------------------------- USB keyboard scan to char translator
23288                 | ' 
23288                 | ' function scantochar(key)
23288                 | _scantochar
23288                 | ' 
23288                 | ' select case (key shr 8) and 255
23288     09 01 02 F6 | 	mov	_var01, arg01
2328c     08 00 C6 F0 | 	sar	_var01, #8
23290     FF 00 0E F5 | 	and	_var01, #255 wz
23294     24 00 90 AD |  if_e	jmp	#LR__2670
23298     02 00 0E F2 | 	cmp	_var01, #2 wz
2329c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
232a0     30 00 90 AD |  if_e	jmp	#LR__2671
232a4     40 00 0E F2 | 	cmp	_var01, #64 wz
232a8     44 00 90 AD |  if_e	jmp	#LR__2672
232ac     42 00 0E F2 | 	cmp	_var01, #66 wz
232b0     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
232b4     70 00 90 5D |  if_ne	jmp	#LR__2674
232b8     50 00 90 FD | 	jmp	#LR__2673
232bc                 | LR__2670
232bc     09 FB 01 F6 | 	mov	result1, arg01
232c0     7F FA 05 F5 | 	and	result1, #127
232c4     02 FA 65 F0 | 	shl	result1, #2
232c8     F5 FA 01 F1 | 	add	result1, ptr__dat__
232cc     FD FA C1 FA | 	rdbyte	result1, result1
232d0     54 00 90 FD | 	jmp	#_scantochar_ret
232d4                 | LR__2671
232d4     09 FB 01 F6 | 	mov	result1, arg01
232d8     7F FA 05 F5 | 	and	result1, #127
232dc     02 FA 65 F0 | 	shl	result1, #2
232e0     01 FA 05 F1 | 	add	result1, #1
232e4     F5 FA 01 F1 | 	add	result1, ptr__dat__
232e8     FD FA C1 FA | 	rdbyte	result1, result1
232ec     38 00 90 FD | 	jmp	#_scantochar_ret
232f0                 | LR__2672
232f0     09 FB 01 F6 | 	mov	result1, arg01
232f4     7F FA 05 F5 | 	and	result1, #127
232f8     02 FA 65 F0 | 	shl	result1, #2
232fc     02 FA 05 F1 | 	add	result1, #2
23300     F5 FA 01 F1 | 	add	result1, ptr__dat__
23304     FD FA C1 FA | 	rdbyte	result1, result1
23308     1C 00 90 FD | 	jmp	#_scantochar_ret
2330c                 | LR__2673
2330c     09 FB 01 F6 | 	mov	result1, arg01
23310     7F FA 05 F5 | 	and	result1, #127
23314     02 FA 65 F0 | 	shl	result1, #2
23318     03 FA 05 F1 | 	add	result1, #3
2331c     F5 FA 01 F1 | 	add	result1, ptr__dat__
23320     FD FA C1 FA | 	rdbyte	result1, result1
23324     00 00 90 FD | 	jmp	#_scantochar_ret
23328                 | LR__2674
23328                 | _scantochar_ret
23328     2D 00 64 FD | 	ret
2332c                 | 
2332c                 | _program
2332c     01 4A 05 F6 | 	mov	COUNT_, #1
23330     A8 00 A0 FD | 	call	#pushregs_
23334     70 FC BF FD | 	call	#_startpsram
23338     40 12 06 F6 | 	mov	arg01, #64
2333c     00 14 06 F6 | 	mov	arg02, #0
23340     00 16 06 F6 | 	mov	arg03, #0
23344     A0 FC BF FD | 	call	#_startvideo
23348     37 00 00 FF 
2334c     14 E4 05 F1 | 	add	objptr, ##28180
23350     F2 12 02 FB | 	rdlong	arg01, objptr
23354     00 14 06 F6 | 	mov	arg02, #0
23358     FB 03 00 FF 
2335c     00 17 06 F6 | 	mov	arg03, ##521984
23360     2B 00 00 FF 
23364     48 E5 85 F1 | 	sub	objptr, ##22344
23368     28 2F B0 FD | 	call	#_audio096_spin2_start
2336c     FE 16 02 F6 | 	mov	arg03, result2
23370     2B 00 00 FF 
23374     30 E5 05 F1 | 	add	objptr, ##22320
23378     F2 FA 61 FC | 	wrlong	result1, objptr
2337c     14 E4 05 F1 | 	add	objptr, #20
23380     F2 16 62 FC | 	wrlong	arg03, objptr
23384     37 00 00 FF 
23388     10 E4 85 F1 | 	sub	objptr, ##28176
2338c     32 12 06 F6 | 	mov	arg01, #50
23390     58 38 B0 FD | 	call	#__system___waitms
23394     37 00 00 FF 
23398     10 E4 05 F1 | 	add	objptr, ##28176
2339c     F2 12 02 FB | 	rdlong	arg01, objptr
233a0     37 00 00 FF 
233a4     10 E4 85 F1 | 	sub	objptr, ##28176
233a8     14 12 06 F1 | 	add	arg01, #20
233ac     20 00 80 FF 
233b0     09 01 58 FC | 	wrword	##16384, arg01
233b4     EC 2B B0 FD | 	call	#_usbnew_spin2_start
233b8     37 00 00 FF 
233bc     04 E4 05 F1 | 	add	objptr, ##28164
233c0     F2 FA 61 FC | 	wrlong	result1, objptr
233c4                 | '   mouse_limits[0] := xlim
233c4     0F 00 00 FF 
233c8     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
233cc     01 00 80 FF 
233d0     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
233d4                 | '   mouse_limits[1] := ylim
233d4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
233d8     01 00 80 FF 
233dc     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
233e0     36 00 00 FF 
233e4     F3 E4 85 F1 | 	sub	objptr, ##27891
233e8     F2 12 02 F6 | 	mov	arg01, objptr
233ec     11 E5 85 F1 | 	sub	objptr, #273
233f0     C4 12 06 F1 | 	add	arg01, #196
233f4                 | '   mouse_outptr := ptr
233f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
233f8     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
233fc     0F 00 00 FF 
23400     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
23404     16 00 00 FF 
23408     CA EA 05 F1 | 	add	ptr__dat__, ##11466
2340c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
23410     16 00 00 FF 
23414     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
23418     10 12 06 F6 | 	mov	arg01, #16
2341c     A4 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
23420     10 12 06 F6 | 	mov	arg01, #16
23424     20 14 06 F6 | 	mov	arg02, #32
23428     20 16 06 F6 | 	mov	arg03, #32
2342c     24 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
23430     09 12 C6 F9 | 	decod	arg01, #9
23434     2C 15 06 F6 | 	mov	arg02, #300
23438     C0 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
2343c     F2 16 02 F6 | 	mov	arg03, objptr
23440     50 00 00 FF 
23444     44 E5 05 F1 | 	add	objptr, ##41284
23448     F2 14 02 F6 | 	mov	arg02, objptr
2344c     0A 17 62 FC | 	wrlong	arg03, arg02
23450     04 14 06 F1 | 	add	arg02, #4
23454     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
23458     EF 14 02 F6 | 	mov	arg02, entryptr__
2345c     1E FA 05 F6 | 	mov	result1, #30
23460     28 E4 61 FD | 	setq	objptr
23464     0A FB F1 FC | 	coginit	result1, arg02 wc
23468     01 FA 65 C6 |  if_b	neg	result1, #1
2346c     04 E4 85 F1 | 	sub	objptr, #4
23470     F2 FA 61 FC | 	wrlong	result1, objptr
23474     01 00 00 FF 
23478     54 E5 05 F1 | 	add	objptr, ##852
2347c     F2 00 68 FC | 	wrlong	#0, objptr
23480     1B 00 00 FF 
23484     60 E4 85 F1 | 	sub	objptr, ##13920
23488     F2 04 68 FC | 	wrlong	#2, objptr
2348c     04 E4 05 F1 | 	add	objptr, #4
23490     F2 26 69 FC | 	wrlong	#147, objptr
23494     04 E4 05 F1 | 	add	objptr, #4
23498     F2 34 69 FC | 	wrlong	#154, objptr
2349c     04 E4 05 F1 | 	add	objptr, #4
234a0     F2 08 68 FC | 	wrlong	#4, objptr
234a4     04 E4 85 F1 | 	sub	objptr, #4
234a8     F2 16 02 FB | 	rdlong	arg03, objptr
234ac     14 E4 85 F1 | 	sub	objptr, #20
234b0     F2 16 62 FC | 	wrlong	arg03, objptr
234b4     04 E4 05 F1 | 	add	objptr, #4
234b8     F2 00 68 FC | 	wrlong	#0, objptr
234bc     04 E4 05 F1 | 	add	objptr, #4
234c0     F2 00 68 FC | 	wrlong	#0, objptr
234c4     19 00 00 FF 
234c8     0C E5 05 F1 | 	add	objptr, ##13068
234cc     F2 02 68 FC | 	wrlong	#1, objptr
234d0     01 00 00 FF 
234d4     60 E5 05 F1 | 	add	objptr, ##864
234d8     F2 00 68 FC | 	wrlong	#0, objptr
234dc     01 00 00 FF 
234e0     00 EA 05 F1 | 	add	ptr__dat__, ##512
234e4     08 E4 05 F1 | 	add	objptr, #8
234e8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
234ec     04 E4 85 F1 | 	sub	objptr, #4
234f0     03 00 80 FF 
234f4     F2 3C 69 FC | 	wrlong	##1694, objptr
234f8     0D 00 00 FF 
234fc     3C E4 85 F1 | 	sub	objptr, ##6716
23500     F2 18 68 FC | 	wrlong	#12, objptr
23504     45 00 00 FF 
23508     64 E4 85 F1 | 	sub	objptr, ##35428
2350c     01 00 00 FF 
23510     00 EA 85 F1 | 	sub	ptr__dat__, ##512
23514     A8 D8 BF FD | 	call	#_init_commands
23518     5C F6 BF FD | 	call	#_init_error_strings
2351c     E0 ED BF FD | 	call	#_init_audio
23520     EC 27 BF FD | 	call	#_do_new
23524     37 00 00 FF 
23528     3C E4 05 F1 | 	add	objptr, ##28220
2352c     F2 12 02 FB | 	rdlong	arg01, objptr
23530     04 E4 85 F1 | 	sub	objptr, #4
23534     F2 14 02 FB | 	rdlong	arg02, objptr
23538     37 00 00 FF 
2353c     38 E4 85 F1 | 	sub	objptr, ##28216
23540     30 17 B0 FD | 	call	#_hg010b_spin2_cls
23544     37 00 00 FF 
23548     40 E4 05 F1 | 	add	objptr, ##28224
2354c     F2 12 02 FB | 	rdlong	arg01, objptr
23550     37 00 00 FF 
23554     40 E4 85 F1 | 	sub	objptr, ##28224
23558     C8 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
2355c                 | ' 
2355c                 | ' leading_spaces:=amount
2355c     01 00 00 FF 
23560     B6 E4 05 F1 | 	add	objptr, ##694
23564     F2 04 68 FC | 	wrlong	#2, objptr
23568     01 00 00 FF 
2356c     B6 E4 85 F1 | 	sub	objptr, ##694
23570     BA 01 00 FF 
23574     72 27 06 F6 | 	mov	local01, ##@LR__6039
23578     3D 12 06 F6 | 	mov	arg01, #61
2357c     3C 14 06 F6 | 	mov	arg02, #60
23580     3B 16 06 F6 | 	mov	arg03, #59
23584     3A 18 06 F6 | 	mov	arg04, #58
23588     F4 80 B0 FD | 	call	#__system___vfs_open_sdcardx
2358c     FD 14 02 F6 | 	mov	arg02, result1
23590     13 13 02 F6 | 	mov	arg01, local01
23594     2C 37 B0 FD | 	call	#__system___mount
23598     BA 01 00 FF 
2359c     76 13 06 F6 | 	mov	arg01, ##@LR__6040
235a0     E0 39 B0 FD | 	call	#__system___chdir
235a4     BA 01 00 FF 
235a8     7E 27 06 F6 | 	mov	local01, ##@LR__6041
235ac     4A 00 00 FF 
235b0     94 E4 05 F1 | 	add	objptr, ##38036
235b4     F2 26 62 FC | 	wrlong	local01, objptr
235b8     13 00 00 FF 
235bc     60 E4 85 F1 | 	sub	objptr, ##9824
235c0     F2 12 02 FB | 	rdlong	arg01, objptr
235c4     37 00 00 FF 
235c8     34 E4 85 F1 | 	sub	objptr, ##28212
235cc     01 12 66 F0 | 	shl	arg01, #1
235d0     01 14 06 F6 | 	mov	arg02, #1
235d4     8C 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
235d8                 | ' init_commands
235d8                 | ' init_error_strings
235d8                 | ' init_audio
235d8                 | ' do_new
235d8                 | ' cls(ink, paper)
235d8                 | ' v.setfontfamily(font) 				' use ST Mono font
235d8                 | ' v.setleadingspaces(2)
235d8                 | ' mount "/sd", _vfs_open_sdcard()
235d8                 | ' chdir "/sd/bas"
235d8                 | ' currentdir$="/sd/bas"
235d8                 | ' position 2*editor_spaces,1 : print ver$
235d8     00 12 06 F6 | 	mov	arg01, #0
235dc     BC 8F B0 FD | 	call	#__system___getiolock_0602
235e0     FD 12 02 F6 | 	mov	arg01, result1
235e4     10 33 B0 FD | 	call	#__system___lockmem
235e8     18 00 00 FF 
235ec     40 EB 05 F1 | 	add	ptr__dat__, ##12608
235f0     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
235f4     18 00 00 FF 
235f8     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
235fc     00 12 06 F6 | 	mov	arg01, #0
23600     00 16 06 F6 | 	mov	arg03, #0
23604     E8 3F B0 FD | 	call	#__system___basic_print_string
23608     00 12 06 F6 | 	mov	arg01, #0
2360c     0A 14 06 F6 | 	mov	arg02, #10
23610     00 16 06 F6 | 	mov	arg03, #0
23614     80 3F B0 FD | 	call	#__system___basic_print_char
23618     00 12 06 F6 | 	mov	arg01, #0
2361c     7C 8F B0 FD | 	call	#__system___getiolock_0602
23620     FD 00 68 FC | 	wrlong	#0, result1
23624     52 00 00 FF 
23628     98 E4 05 F1 | 	add	objptr, ##42136
2362c     F2 12 02 FB | 	rdlong	arg01, objptr
23630     0F 00 00 FF 
23634     3C E4 85 F1 | 	sub	objptr, ##7740
23638     F2 26 02 FB | 	rdlong	local01, objptr
2363c     43 00 00 FF 
23640     5C E4 85 F1 | 	sub	objptr, ##34396
23644     13 13 82 F1 | 	sub	arg01, local01
23648     00 14 06 F6 | 	mov	arg02, #0
2364c     0A 16 06 F6 | 	mov	arg03, #10
23650     78 55 B0 FD | 	call	#__system__Number_S
23654     FD 12 02 F6 | 	mov	arg01, result1
23658     BA 01 00 FF 
2365c     86 15 06 F6 | 	mov	arg02, ##@LR__6042
23660     F0 32 B0 FD | 	call	#__system___string_concat
23664     FD 26 02 F6 | 	mov	local01, result1
23668     50 00 00 FF 
2366c     38 E5 05 F1 | 	add	objptr, ##41272
23670     F2 26 62 FC | 	wrlong	local01, objptr
23674     50 00 00 FF 
23678     38 E5 85 F1 | 	sub	objptr, ##41272
2367c                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
2367c     00 12 06 F6 | 	mov	arg01, #0
23680     18 8F B0 FD | 	call	#__system___getiolock_0602
23684     FD 12 02 F6 | 	mov	arg01, result1
23688     6C 32 B0 FD | 	call	#__system___lockmem
2368c     50 00 00 FF 
23690     38 E5 05 F1 | 	add	objptr, ##41272
23694     F2 14 02 FB | 	rdlong	arg02, objptr
23698     50 00 00 FF 
2369c     38 E5 85 F1 | 	sub	objptr, ##41272
236a0     00 12 06 F6 | 	mov	arg01, #0
236a4     00 16 06 F6 | 	mov	arg03, #0
236a8     44 3F B0 FD | 	call	#__system___basic_print_string
236ac     00 12 06 F6 | 	mov	arg01, #0
236b0     0A 14 06 F6 | 	mov	arg02, #10
236b4     00 16 06 F6 | 	mov	arg03, #0
236b8     DC 3E B0 FD | 	call	#__system___basic_print_char
236bc     00 12 06 F6 | 	mov	arg01, #0
236c0     D8 8E B0 FD | 	call	#__system___getiolock_0602
236c4     FD 00 68 FC | 	wrlong	#0, result1
236c8     37 00 00 FF 
236cc     34 E4 05 F1 | 	add	objptr, ##28212
236d0     F2 12 02 FB | 	rdlong	arg01, objptr
236d4     37 00 00 FF 
236d8     34 E4 85 F1 | 	sub	objptr, ##28212
236dc     01 12 66 F0 | 	shl	arg01, #1
236e0     04 14 06 F6 | 	mov	arg02, #4
236e4     7C 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
236e8                 | ' position 2*editor_spaces,4 : print "Ready"
236e8     00 12 06 F6 | 	mov	arg01, #0
236ec     AC 8E B0 FD | 	call	#__system___getiolock_0602
236f0     FD 12 02 F6 | 	mov	arg01, result1
236f4     00 32 B0 FD | 	call	#__system___lockmem
236f8     BA 01 00 FF 
236fc     98 15 06 F6 | 	mov	arg02, ##@LR__6043
23700     00 12 06 F6 | 	mov	arg01, #0
23704     00 16 06 F6 | 	mov	arg03, #0
23708     E4 3E B0 FD | 	call	#__system___basic_print_string
2370c     00 12 06 F6 | 	mov	arg01, #0
23710     0A 14 06 F6 | 	mov	arg02, #10
23714     00 16 06 F6 | 	mov	arg03, #0
23718     7C 3E B0 FD | 	call	#__system___basic_print_char
2371c     00 12 06 F6 | 	mov	arg01, #0
23720     78 8E B0 FD | 	call	#__system___getiolock_0602
23724     FD 00 68 FC | 	wrlong	#0, result1
23728     00 14 06 F6 | 	mov	arg02, #0
2372c     01 14 D6 F7 | 	test	arg02, #1 wc
23730     5A 4C 64 FD | 	drvc	#38
23734     01 14 D6 F7 | 	test	arg02, #1 wc
23738     5A 4E 64 FD | 	drvc	#39
2373c     BA 01 00 FF 
23740     9E 27 06 F6 | 	mov	local01, ##@LR__6044
23744     52 00 00 FF 
23748     C4 E4 05 F1 | 	add	objptr, ##42180
2374c     F2 26 62 FC | 	wrlong	local01, objptr
23750     04 E4 05 F1 | 	add	objptr, #4
23754     FF FF FF FF 
23758     F2 FE 6B FC | 	wrlong	##-1, objptr
2375c     0C E4 05 F1 | 	add	objptr, #12
23760     F2 00 68 FC | 	wrlong	#0, objptr
23764     52 00 00 FF 
23768     D4 E4 85 F1 | 	sub	objptr, ##42196
2376c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
2376c                 | ' loadname="noname.bas"
2376c                 | ' do_insert=-1
2376c                 | ' inload=0
2376c                 | ' 
2376c                 | ' open "/sd/bas/autorun.bas" for input as #9
2376c     BA 01 00 FF 
23770     A9 15 06 F6 | 	mov	arg02, ##@LR__6045
23774     09 12 06 F6 | 	mov	arg01, #9
23778     00 16 06 F6 | 	mov	arg03, #0
2377c     7C 3D B0 FD | 	call	#__system___basic_open_string
23780     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23784     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
23788     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2378c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23790     52 00 00 FF 
23794     D8 E4 05 F1 | 	add	objptr, ##42200
23798     F2 FA 61 FC | 	wrlong	result1, objptr
2379c     52 00 00 FF 
237a0     D8 E4 85 F1 | 	sub	objptr, ##42200
237a4                 | ' err=geterr()
237a4                 | ' close #9
237a4     09 12 06 F6 | 	mov	arg01, #9
237a8     A8 84 B0 FD | 	call	#__system__close
237ac                 | ' if err=0 then line$="run autorun.bas" : interpret
237ac     52 00 00 FF 
237b0     D8 E4 05 F1 | 	add	objptr, ##42200
237b4     F2 26 0A FB | 	rdlong	local01, objptr wz
237b8     52 00 00 FF 
237bc     D8 E4 85 F1 | 	sub	objptr, ##42200
237c0     BA 01 00 AF 
237c4     BD 27 06 A6 |  if_e	mov	local01, ##@LR__6046
237c8     37 00 00 AF 
237cc     1C E4 05 A1 |  if_e	add	objptr, ##28188
237d0     F2 26 62 AC |  if_e	wrlong	local01, objptr
237d4     37 00 00 AF 
237d8     1C E4 85 A1 |  if_e	sub	objptr, ##28188
237dc     48 E0 BD AD |  if_e	call	#_interpret
237e0                 | ' 
237e0                 | ' 
237e0                 | ' '-------------------------------------------------------------------------------------------------------- 
237e0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
237e0                 | ' '--------------------------------------------------------------------------------------------------------
237e0                 | ' 
237e0                 | ' do
237e0                 | LR__2680
237e0     20 D0 BD FD | 	call	#_edit
237e4     FD 26 02 F6 | 	mov	local01, result1
237e8     37 00 00 FF 
237ec     1C E4 05 F1 | 	add	objptr, ##28188
237f0     F2 26 62 FC | 	wrlong	local01, objptr
237f4     37 00 00 FF 
237f8     1C E4 85 F1 | 	sub	objptr, ##28188
237fc     28 E0 BD FD | 	call	#_interpret
23800     BA 01 00 FF 
23804     CD 27 06 F6 | 	mov	local01, ##@LR__6047
23808     37 00 00 FF 
2380c     1C E4 05 F1 | 	add	objptr, ##28188
23810     F2 26 62 FC | 	wrlong	local01, objptr
23814     37 00 00 FF 
23818     1C E4 85 F1 | 	sub	objptr, ##28188
2381c     C0 FF 9F FD | 	jmp	#LR__2680
23820     A7 F0 03 F6 | 	mov	ptra, fp
23824     B2 00 A0 FD | 	call	#popregs_
23828                 | _program_ret
23828     2D 00 64 FD | 	ret
2382c                 | 
2382c                 | ' '' this is not a main program.
2382c                 | ' 
2382c                 | ' '****************************************************************************************************************
2382c                 | ' '                                                                                                             	*
2382c                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
2382c                 | ' '                                                                                                            	*
2382c                 | ' ' base - HDMI base pin												*
2382c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
2382c                 | ' '														*
2382c                 | ' '														*
2382c                 | ' '****************************************************************************************************************
2382c                 | ' 
2382c                 | ' pub start(base,mb):result |i
2382c                 | _hg010b_spin2_start
2382c                 | ' 
2382c                 | ' '--------------------------- initialize pointers and variables
2382c                 | ' 
2382c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
2382c     34 E4 05 F1 | 	add	objptr, #52
23830     F2 FA 01 F6 | 	mov	result1, objptr
23834     28 E4 85 F1 | 	sub	objptr, #40
23838     F2 FA 61 FC | 	wrlong	result1, objptr
2383c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
2383c                 | ' hdmibase:=base							' HDMI base pin, 8*n
2383c     18 E4 05 F1 | 	add	objptr, #24
23840     F2 12 62 FC | 	wrlong	arg01, objptr
23844                 | ' mailbox_ptr:=mb		
23844     04 E4 05 F1 | 	add	objptr, #4
23848     F2 14 62 FC | 	wrlong	arg02, objptr
2384c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
2384c     C1 E5 05 F1 | 	add	objptr, #449
23850     F2 14 62 FC | 	wrlong	arg02, objptr
23854                 | ' sprite_ptr:=@spr1ptr
23854     D8 E4 85 F1 | 	sub	objptr, #216
23858     F2 FA 01 F6 | 	mov	result1, objptr
2385c     E5 E4 85 F1 | 	sub	objptr, #229
23860     F2 FA 61 FC | 	wrlong	result1, objptr
23864                 | ' 
23864                 | ' 		'
23864                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
23864     E5 E4 05 F1 | 	add	objptr, #229
23868     F2 FA 01 FB | 	rdlong	result1, objptr
2386c     D0 FA 05 F1 | 	add	result1, #208
23870     FD 10 58 FC | 	wrword	#8, result1
23874                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
23874     F2 16 02 FB | 	rdlong	arg03, objptr
23878     D2 16 06 F1 | 	add	arg03, #210
2387c     0B 21 58 FC | 	wrword	#16, arg03
23880                 | ' leading_spaces:=0				'
23880     A5 E5 05 F1 | 	add	objptr, #421
23884     F2 00 68 FC | 	wrlong	#0, objptr
23888                 | ' 
23888                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
23888     99 E4 85 F1 | 	sub	objptr, #153
2388c     00 00 A0 FF 
23890     F2 0E 68 FC | 	wrlong	##1073741831, objptr
23894                 | ' emptydl[1]:=0
23894     04 E4 05 F1 | 	add	objptr, #4
23898     F2 00 68 FC | 	wrlong	#0, objptr
2389c                 | ' 
2389c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
2389c                 | ' 
2389c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
2389c     28 E5 85 F1 | 	sub	objptr, #296
238a0     F2 02 68 FC | 	wrlong	#1, objptr
238a4                 | ' if s_debug<>0
238a4                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
238a4     20 00 80 FF 
238a8     F2 00 68 FC | 	wrlong	##16384, objptr
238ac     F9 E4 85 F1 | 	sub	objptr, #249
238b0                 | ' setmode()							' set the mode, see below
238b0     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
238b4                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
238b4     49 E4 05 F1 | 	add	objptr, #73
238b8     F2 FA 01 F6 | 	mov	result1, objptr
238bc     35 E4 85 F1 | 	sub	objptr, #53
238c0     F2 FA 61 FC | 	wrlong	result1, objptr
238c4                 | ' cursor_ptr:=@cursor_x						
238c4     28 E4 05 F1 | 	add	objptr, #40
238c8     F2 16 02 F6 | 	mov	arg03, objptr
238cc     2C E4 85 F1 | 	sub	objptr, #44
238d0     F2 16 62 FC | 	wrlong	arg03, objptr
238d4                 | ' fontnum:=0  							' start with a PC type font 
238d4     55 E4 05 F1 | 	add	objptr, #85
238d8     F2 00 68 FC | 	wrlong	#0, objptr
238dc                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
238dc     1C E4 05 F1 | 	add	objptr, #28
238e0     F2 12 02 F6 | 	mov	arg01, objptr
238e4     81 E4 85 F1 | 	sub	objptr, #129
238e8     10 00 00 FF 
238ec     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
238f0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
238f4     10 00 00 FF 
238f8     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
238fc     10 16 06 F6 | 	mov	arg03, #16
23900     14 2F B0 FD | 	call	#__system____builtin_memmove
23904                 | ' leading_spaces:=0
23904     01 00 00 FF 
23908     B6 E4 05 F1 | 	add	objptr, ##694
2390c     F2 00 68 FC | 	wrlong	#0, objptr
23910     01 00 00 FF 
23914     B6 E4 85 F1 | 	sub	objptr, ##694
23918                 | ' '---------------------------- initialize a cursor (MSDOS type)
23918                 | ' 
23918                 | ' initcursor(154)
23918     9A 12 06 F6 | 	mov	arg01, #154
2391c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
23920                 | ' 
23920                 | ' '---------------------------- start the cog
23920                 | ' 
23920                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
23920     10 00 00 FF 
23924     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
23928     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
2392c     10 00 00 FF 
23930     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
23934     14 E4 05 F1 | 	add	objptr, #20
23938     10 FA 05 F6 | 	mov	result1, #16
2393c     28 E4 61 FD | 	setq	objptr
23940     0A FB F1 FC | 	coginit	result1, arg02 wc
23944     01 FA 65 C6 |  if_b	neg	result1, #1
23948     1C E4 05 F1 | 	add	objptr, #28
2394c     F2 FA 61 FC | 	wrlong	result1, objptr
23950     30 E4 85 F1 | 	sub	objptr, #48
23954                 | ' waitms(40)							' wait for stabilize
23954     28 12 06 F6 | 	mov	arg01, #40
23958     90 32 B0 FD | 	call	#__system___waitms
2395c                 | ' return cog							' return the driver's cog #
2395c     30 E4 05 F1 | 	add	objptr, #48
23960     F2 FA 01 FB | 	rdlong	result1, objptr
23964     30 E4 85 F1 | 	sub	objptr, #48
23968                 | _hg010b_spin2_start_ret
23968     2D 00 64 FD | 	ret
2396c                 | 
2396c                 | ' 
2396c                 | ' 
2396c                 | ' '**************************************************************************************************************** 
2396c                 | ' '                                                                                                             	*
2396c                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
2396c                 | ' '  Mode number - see start() above or bits below								*
2396c                 | ' '                                                                                                             	*
2396c                 | ' '****************************************************************************************************************
2396c                 | ' 
2396c                 | ' '---------------------------- initialize a cursor (MSDOS type)
2396c                 | ' pub initcursor(color) |i
2396c                 | _hg010b_spin2_initcursor
2396c     03 4A 05 F6 | 	mov	COUNT_, #3
23970     A8 00 A0 FD | 	call	#pushregs_
23974     09 27 02 F6 | 	mov	local01, arg01
23978                 | ' 
23978                 | ' cursor_x:=0							' place the cursor at 0:0
23978     3C E4 05 F1 | 	add	objptr, #60
2397c     F2 00 58 FC | 	wrword	#0, objptr
23980                 | ' cursor_y:=0
23980     02 E4 05 F1 | 	add	objptr, #2
23984     F2 00 48 FC | 	wrbyte	#0, objptr
23988                 | ' repeat i from 0 to 111
23988     00 28 06 F6 | 	mov	local02, #0
2398c     F8 E5 05 F1 | 	add	objptr, #504
23990     97 1A 48 FB | 	callpa	#(@LR__2692-@LR__2690)>>2,fcache_load_ptr_
23994                 | LR__2690
23994                 | '   cursor[i]:=0
23994     14 2B 02 F6 | 	mov	local03, local02
23998     F2 2A 02 F1 | 	add	local03, objptr
2399c     15 01 48 FC | 	wrbyte	#0, local03
239a0     01 28 06 F1 | 	add	local02, #1
239a4     70 28 56 F2 | 	cmps	local02, #112 wc
239a8     E8 FF 9F CD |  if_b	jmp	#LR__2690
239ac                 | ' repeat i from 112 to 127
239ac     70 28 06 F6 | 	mov	local02, #112
239b0                 | LR__2691
239b0                 | '   cursor[i]:=color  
239b0     14 2B 02 F6 | 	mov	local03, local02
239b4     F2 2A 02 F1 | 	add	local03, objptr
239b8     15 27 42 FC | 	wrbyte	local01, local03
239bc     01 28 06 F1 | 	add	local02, #1
239c0     80 28 16 F2 | 	cmp	local02, #128 wc
239c4     E8 FF 9F CD |  if_b	jmp	#LR__2691
239c8                 | LR__2692
239c8                 | ' 'repeat i from 0 to 127
239c8                 | ' '  if ((i/8)//2)
239c8                 | ' '    cursor[i]:=15
239c8                 | ' '  else
239c8                 | ' '    cursor[i]:=0
239c8                 | ' '  if i>=120    
239c8                 | ' '    cursor[i]:=40
239c8                 | ' setspriteptr(17,@cursor)
239c8     F2 14 02 F6 | 	mov	arg02, objptr
239cc     01 00 00 FF 
239d0     36 E4 85 F1 | 	sub	objptr, ##566
239d4     11 12 06 F6 | 	mov	arg01, #17
239d8     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
239dc                 | ' setspritesize(17,8,16)
239dc     11 12 06 F6 | 	mov	arg01, #17
239e0     08 14 06 F6 | 	mov	arg02, #8
239e4     10 16 06 F6 | 	mov	arg03, #16
239e8     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
239ec                 | ' setspritepos(17,0,0)
239ec     11 12 06 F6 | 	mov	arg01, #17
239f0     00 14 06 F6 | 	mov	arg02, #0
239f4     00 16 06 F6 | 	mov	arg03, #0
239f8     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
239fc                 | ' cursorshape:=14
239fc     0B 00 00 FF 
23a00     C6 E4 05 F1 | 	add	objptr, ##5830
23a04     F2 1C 68 FC | 	wrlong	#14, objptr
23a08                 | ' cursorcolor:=color
23a08     04 E4 85 F1 | 	sub	objptr, #4
23a0c     F2 26 62 FC | 	wrlong	local01, objptr
23a10     0B 00 00 FF 
23a14     C2 E4 85 F1 | 	sub	objptr, ##5826
23a18     A7 F0 03 F6 | 	mov	ptra, fp
23a1c     B2 00 A0 FD | 	call	#popregs_
23a20                 | _hg010b_spin2_initcursor_ret
23a20     2D 00 64 FD | 	ret
23a24                 | 
23a24                 | ' 
23a24                 | ' pub setcursorshape(shape) | i
23a24                 | _hg010b_spin2_setcursorshape
23a24                 | ' 
23a24                 | ' cursorshape:=shape
23a24     0B 00 00 FF 
23a28     C6 E4 05 F1 | 	add	objptr, ##5830
23a2c     F2 12 62 FC | 	wrlong	arg01, objptr
23a30                 | ' repeat i from 0 to (8*cursorshape)-1
23a30     00 00 06 F6 | 	mov	_var01, #0
23a34     09 03 02 F6 | 	mov	_var02, arg01
23a38     03 02 66 F0 | 	shl	_var02, #3
23a3c     01 02 86 F1 | 	sub	_var02, #1
23a40     00 02 56 F2 | 	cmps	_var02, #0 wc
23a44     01 04 86 F6 | 	negc	_var03, #1
23a48     02 07 02 F6 | 	mov	_var04, _var03
23a4c     02 03 02 F1 | 	add	_var02, _var03
23a50     0A 00 00 FF 
23a54     90 E4 85 F1 | 	sub	objptr, ##5264
23a58     97 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
23a5c                 | LR__2700
23a5c                 | '   cursor[i]:=0
23a5c     00 05 02 F6 | 	mov	_var03, _var01
23a60     F2 04 02 F1 | 	add	_var03, objptr
23a64     02 01 48 FC | 	wrbyte	#0, _var03
23a68     03 01 02 F1 | 	add	_var01, _var04
23a6c     01 01 0A F2 | 	cmp	_var01, _var02 wz
23a70     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
23a74                 | LR__2701
23a74                 | ' repeat i from 8*cursorshape to 127
23a74     0A 00 00 FF 
23a78     90 E4 05 F1 | 	add	objptr, ##5264
23a7c     F2 06 02 FB | 	rdlong	_var04, objptr
23a80     03 01 02 F6 | 	mov	_var01, _var04
23a84     03 00 66 F0 | 	shl	_var01, #3
23a88     0B 00 00 FF 
23a8c     C6 E4 85 F1 | 	sub	objptr, ##5830
23a90     03 06 66 F0 | 	shl	_var04, #3
23a94     80 06 56 F2 | 	cmps	_var04, #128 wc
23a98     01 04 A6 F6 | 	negnc	_var03, #1
23a9c     7F 02 06 F6 | 	mov	_var02, #127
23aa0     02 03 02 F1 | 	add	_var02, _var03
23aa4     97 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
23aa8                 | LR__2702
23aa8                 | '   cursor[i]:=cursorcolor
23aa8     00 07 02 F6 | 	mov	_var04, _var01
23aac     01 00 00 FF 
23ab0     36 E4 05 F1 | 	add	objptr, ##566
23ab4     F2 06 02 F1 | 	add	_var04, objptr
23ab8     0A 00 00 FF 
23abc     8C E4 05 F1 | 	add	objptr, ##5260
23ac0     F2 12 02 FB | 	rdlong	arg01, objptr
23ac4     0B 00 00 FF 
23ac8     C2 E4 85 F1 | 	sub	objptr, ##5826
23acc     03 13 42 FC | 	wrbyte	arg01, _var04
23ad0     02 01 02 F1 | 	add	_var01, _var03
23ad4     01 01 0A F2 | 	cmp	_var01, _var02 wz
23ad8     CC FF 9F 5D |  if_ne	jmp	#LR__2702
23adc                 | LR__2703
23adc                 | _hg010b_spin2_setcursorshape_ret
23adc     2D 00 64 FD | 	ret
23ae0                 | 
23ae0                 | ' 
23ae0                 | ' pub setcursorcolor(color) | i
23ae0                 | _hg010b_spin2_setcursorcolor
23ae0                 | ' 
23ae0                 | ' cursorcolor:=color
23ae0     0B 00 00 FF 
23ae4     C2 E4 05 F1 | 	add	objptr, ##5826
23ae8     F2 12 62 FC | 	wrlong	arg01, objptr
23aec                 | ' repeat i from 0 to (8*cursorshape)-1
23aec     00 12 06 F6 | 	mov	arg01, #0
23af0     04 E4 05 F1 | 	add	objptr, #4
23af4     F2 00 02 FB | 	rdlong	_var01, objptr
23af8     03 00 66 F0 | 	shl	_var01, #3
23afc     01 00 86 F1 | 	sub	_var01, #1
23b00     00 00 56 F2 | 	cmps	_var01, #0 wc
23b04     01 02 86 F6 | 	negc	_var02, #1
23b08     01 05 02 F6 | 	mov	_var03, _var02
23b0c     01 01 02 F1 | 	add	_var01, _var02
23b10     0A 00 00 FF 
23b14     90 E4 85 F1 | 	sub	objptr, ##5264
23b18     97 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
23b1c                 | LR__2710
23b1c                 | '   cursor[i]:=0
23b1c     09 03 02 F6 | 	mov	_var02, arg01
23b20     F2 02 02 F1 | 	add	_var02, objptr
23b24     01 01 48 FC | 	wrbyte	#0, _var02
23b28     02 13 02 F1 | 	add	arg01, _var03
23b2c     00 13 0A F2 | 	cmp	arg01, _var01 wz
23b30     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
23b34                 | LR__2711
23b34                 | ' repeat i from 8*cursorshape to 127
23b34     0A 00 00 FF 
23b38     90 E4 05 F1 | 	add	objptr, ##5264
23b3c     F2 04 02 FB | 	rdlong	_var03, objptr
23b40     02 13 02 F6 | 	mov	arg01, _var03
23b44     03 12 66 F0 | 	shl	arg01, #3
23b48     0B 00 00 FF 
23b4c     C6 E4 85 F1 | 	sub	objptr, ##5830
23b50     03 04 66 F0 | 	shl	_var03, #3
23b54     80 04 56 F2 | 	cmps	_var03, #128 wc
23b58     01 02 A6 F6 | 	negnc	_var02, #1
23b5c     7F 00 06 F6 | 	mov	_var01, #127
23b60     01 01 02 F1 | 	add	_var01, _var02
23b64     97 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
23b68                 | LR__2712
23b68                 | '   cursor[i]:=cursorcolor
23b68     09 05 02 F6 | 	mov	_var03, arg01
23b6c     01 00 00 FF 
23b70     36 E4 05 F1 | 	add	objptr, ##566
23b74     F2 04 02 F1 | 	add	_var03, objptr
23b78     0A 00 00 FF 
23b7c     8C E4 05 F1 | 	add	objptr, ##5260
23b80     F2 06 02 FB | 	rdlong	_var04, objptr
23b84     0B 00 00 FF 
23b88     C2 E4 85 F1 | 	sub	objptr, ##5826
23b8c     02 07 42 FC | 	wrbyte	_var04, _var03
23b90     01 13 02 F1 | 	add	arg01, _var02
23b94     00 13 0A F2 | 	cmp	arg01, _var01 wz
23b98     CC FF 9F 5D |  if_ne	jmp	#LR__2712
23b9c                 | LR__2713
23b9c                 | _hg010b_spin2_setcursorcolor_ret
23b9c     2D 00 64 FD | 	ret
23ba0                 | 
23ba0                 | '   
23ba0                 | '   
23ba0                 | '   
23ba0                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
23ba0                 | _hg010b_spin2_setmode
23ba0     02 4A 05 F6 | 	mov	COUNT_, #2
23ba4     A8 00 A0 FD | 	call	#pushregs_
23ba8                 | ' 
23ba8                 | ' 
23ba8                 | ' dl_ptr:=@emptydl[0]
23ba8     01 00 00 FF 
23bac     1D E4 05 F1 | 	add	objptr, ##541
23bb0     F2 1A 02 F6 | 	mov	arg05, objptr
23bb4     FD E5 85 F1 | 	sub	objptr, #509
23bb8     F2 1A 62 FC | 	wrlong	arg05, objptr
23bbc                 | ' 
23bbc                 | ' if cog>0 
23bbc     10 E4 05 F1 | 	add	objptr, #16
23bc0     F2 1A 02 FB | 	rdlong	arg05, objptr
23bc4     30 E4 85 F1 | 	sub	objptr, #48
23bc8     01 1A 56 F2 | 	cmps	arg05, #1 wc
23bcc                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
23bcc     01 12 06 36 |  if_ae	mov	arg01, #1
23bd0     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
23bd4                 | ' xres:=1024
23bd4     01 00 00 FF 
23bd8     26 E4 05 F1 | 	add	objptr, ##550
23bdc     02 00 80 FF 
23be0     F2 00 68 FC | 	wrlong	##1024, objptr
23be4                 | ' yres:=600
23be4     04 E4 05 F1 | 	add	objptr, #4
23be8     01 00 80 FF 
23bec     F2 B0 68 FC | 	wrlong	##600, objptr
23bf0                 | ' ppl:=(timings[3])
23bf0     10 00 00 FF 
23bf4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
23bf8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23bfc     51 E5 85 F1 | 	sub	objptr, #337
23c00     F2 1A 62 FC | 	wrlong	arg05, objptr
23c04                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
23c04     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
23c08     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
23c0c     01 26 66 F0 | 	shl	local01, #1
23c10     80 E4 85 F1 | 	sub	objptr, #128
23c14     F2 26 62 FC | 	wrlong	local01, objptr
23c18                 | ' cpl1:=cpl '' todo remove
23c18     04 E4 05 F1 | 	add	objptr, #4
23c1c     F2 26 62 FC | 	wrlong	local01, objptr
23c20                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
23c20     02 00 00 FF 
23c24     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
23c28     41 E4 85 F1 | 	sub	objptr, #65
23c2c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23c30                 | ' repeat i from 0 to 3
23c30     00 28 06 F6 | 	mov	local02, #0
23c34     02 00 00 FF 
23c38     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
23c3c     08 E4 05 F1 | 	add	objptr, #8
23c40     97 20 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
23c44                 | LR__2720
23c44                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
23c44     14 27 02 F6 | 	mov	local01, local02
23c48     02 26 66 F0 | 	shl	local01, #2
23c4c     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
23c50     F2 1A 02 FB | 	rdlong	arg05, objptr
23c54     11 1A 66 F0 | 	shl	arg05, #17
23c58     13 27 02 FB | 	rdlong	local01, local01
23c5c     0D 27 02 F1 | 	add	local01, arg05
23c60     80 40 38 FF 
23c64     00 26 06 F1 | 	add	local01, ##1887502336
23c68     14 1B 02 F6 | 	mov	arg05, local02
23c6c     02 1A 66 F0 | 	shl	arg05, #2
23c70     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
23c74     0D 27 62 FC | 	wrlong	local01, arg05
23c78     01 28 06 F1 | 	add	local02, #1
23c7c     04 28 56 F2 | 	cmps	local02, #4 wc
23c80     C0 FF 9F CD |  if_b	jmp	#LR__2720
23c84                 | LR__2721
23c84     24 E4 85 F1 | 	sub	objptr, #36
23c88                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
23c88     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
23c8c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
23c90     14 26 66 FC | 	wrlong	local01, #20
23c94                 | ' hubset(timings[10])
23c94     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
23c98     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
23c9c     10 00 00 FF 
23ca0     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
23ca4     00 12 62 FD | 	hubset	arg01
23ca8                 | ' waitms(1)                                                   	' wait for stabilization
23ca8     01 12 06 F6 | 	mov	arg01, #1
23cac     3C 2F B0 FD | 	call	#__system___waitms
23cb0     10 00 00 FF 
23cb4     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
23cb8     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
23cbc     61 E4 05 F1 | 	add	objptr, #97
23cc0     F2 28 62 FC | 	wrlong	local02, objptr
23cc4     14 27 52 F6 | 	abs	local01, local02 wc
23cc8     04 26 46 F0 | 	shr	local01, #4
23ccc     13 27 82 F6 | 	negc	local01, local01
23cd0     9C E4 05 F1 | 	add	objptr, #156
23cd4     F2 26 62 FC | 	wrlong	local01, objptr
23cd8     A4 E4 85 F1 | 	sub	objptr, #164
23cdc     F2 28 02 FB | 	rdlong	local02, objptr
23ce0     08 E4 05 F1 | 	add	objptr, #8
23ce4     F2 26 02 FB | 	rdlong	local01, objptr
23ce8     13 29 02 FD | 	qmul	local02, local01
23cec                 | ' lines:=timings[11]
23cec                 | ' t_lines:=lines/16
23cec                 | ' buflen:=cpl*lines						' framebuffer length in longs
23cec     29 E4 85 F1 | 	sub	objptr, #41
23cf0     19 26 C6 F9 | 	decod	local01, #25
23cf4     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
23cf8     18 28 62 FD | 	getqx	local02
23cfc     F2 28 62 FC | 	wrlong	local02, objptr
23d00     38 E4 85 F1 | 	sub	objptr, #56
23d04     02 28 66 F0 | 	shl	local02, #2
23d08     14 27 82 F1 | 	sub	local01, local02
23d0c     F2 26 62 FC | 	wrlong	local01, objptr
23d10     FD E4 05 F1 | 	add	objptr, #253
23d14     F2 28 02 FB | 	rdlong	local02, objptr
23d18     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23d1c     0D 29 02 FD | 	qmul	local02, arg05
23d20                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
23d20                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
23d20     F9 E4 85 F1 | 	sub	objptr, #249
23d24                 | ' mode_ptr:=@timings						' set pointers to timings
23d24     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
23d28                 | ' graphmode:=1024+512+192+48							' det global variable
23d28                 | ' makedl(graphmode)							' make a DL for the mode
23d28     03 00 00 FF 
23d2c     F0 12 06 F6 | 	mov	arg01, ##1776
23d30     18 28 62 FD | 	getqx	local02
23d34     14 27 82 F1 | 	sub	local01, local02
23d38     F2 26 62 FC | 	wrlong	local01, objptr
23d3c     14 E4 05 F1 | 	add	objptr, #20
23d40     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23d44     79 E4 05 F1 | 	add	objptr, #121
23d48     03 00 80 FF 
23d4c     F2 E0 69 FC | 	wrlong	##1776, objptr
23d50     91 E4 85 F1 | 	sub	objptr, #145
23d54     10 00 00 FF 
23d58     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
23d5c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
23d60                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
23d60     F2 26 02 FB | 	rdlong	local01, objptr
23d64     DD E4 05 F1 | 	add	objptr, #221
23d68     F2 26 62 FC | 	wrlong	local01, objptr
23d6c                 | ' s_font_ptr:=font_ptr
23d6c     D5 E4 85 F1 | 	sub	objptr, #213
23d70     F2 26 02 FB | 	rdlong	local01, objptr
23d74     D9 E4 05 F1 | 	add	objptr, #217
23d78     F2 26 62 FC | 	wrlong	local01, objptr
23d7c                 | ' s_lines:=lines
23d7c     80 E4 85 F1 | 	sub	objptr, #128
23d80     F2 26 02 FB | 	rdlong	local01, objptr
23d84     84 E4 05 F1 | 	add	objptr, #132
23d88     F2 26 62 FC | 	wrlong	local01, objptr
23d8c                 | ' s_buflen:=buflen
23d8c     AD E4 85 F1 | 	sub	objptr, #173
23d90     F2 26 02 FB | 	rdlong	local01, objptr
23d94     B5 E4 05 F1 | 	add	objptr, #181
23d98     F2 26 62 FC | 	wrlong	local01, objptr
23d9c                 | ' s_cpl:=cpl
23d9c     94 E4 85 F1 | 	sub	objptr, #148
23da0     F2 26 02 FB | 	rdlong	local01, objptr
23da4     90 E4 05 F1 | 	add	objptr, #144
23da8     F2 26 62 FC | 	wrlong	local01, objptr
23dac                 | ' s_cpl1:=cpl
23dac     90 E4 85 F1 | 	sub	objptr, #144
23db0     F2 26 02 FB | 	rdlong	local01, objptr
23db4     98 E4 05 F1 | 	add	objptr, #152
23db8     F2 26 62 FC | 	wrlong	local01, objptr
23dbc                 | ' st_lines:=t_lines
23dbc     0C E4 05 F1 | 	add	objptr, #12
23dc0     F2 26 02 FB | 	rdlong	local01, objptr
23dc4     04 E4 05 F1 | 	add	objptr, #4
23dc8     F2 26 62 FC | 	wrlong	local01, objptr
23dcc                 | ' ppl:=ppl/xzoom  
23dcc     28 E4 85 F1 | 	sub	objptr, #40
23dd0     F2 90 02 FB | 	rdlong	muldiva_, objptr
23dd4     2C E4 05 F1 | 	add	objptr, #44
23dd8     F2 92 02 FB | 	rdlong	muldivb_, objptr
23ddc     05 E5 85 F1 | 	sub	objptr, #261
23de0     BA 00 A0 FD | 	call	#divide_
23de4     D9 E4 05 F1 | 	add	objptr, #217
23de8     F2 92 62 FC | 	wrlong	muldivb_, objptr
23dec                 | ' s_ppl:=ppl
23dec     1C E4 05 F1 | 	add	objptr, #28
23df0     F2 92 62 FC | 	wrlong	muldivb_, objptr
23df4     F5 E4 85 F1 | 	sub	objptr, #245
23df8                 | ' waitms(20)							' wait 
23df8     14 12 06 F6 | 	mov	arg01, #20
23dfc     EC 2D B0 FD | 	call	#__system___waitms
23e00                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23e00     04 E4 05 F1 | 	add	objptr, #4
23e04     F2 12 02 FB | 	rdlong	arg01, objptr
23e08     04 E4 85 F1 | 	sub	objptr, #4
23e0c     F2 16 02 FB | 	rdlong	arg03, objptr
23e10     09 17 82 F1 | 	sub	arg03, arg01
23e14     20 14 06 F6 | 	mov	arg02, #32
23e18     00 18 06 F6 | 	mov	arg04, #0
23e1c     01 1A 06 F6 | 	mov	arg05, #1
23e20     0B 00 00 FF 
23e24     CC E4 05 F1 | 	add	objptr, ##5836
23e28     7C 1F B0 FD | 	call	#_psram_spin2_fill
23e2c     0B 00 00 FF 
23e30     CC E4 85 F1 | 	sub	objptr, ##5836
23e34     A7 F0 03 F6 | 	mov	ptra, fp
23e38     B2 00 A0 FD | 	call	#popregs_
23e3c                 | _hg010b_spin2_setmode_ret
23e3c     2D 00 64 FD | 	ret
23e40                 | 
23e40                 | ' 
23e40                 | ' '****************************************************************************************************************
23e40                 | ' '                                                                                                             	*
23e40                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
23e40                 | ' '                                                                                                             	*
23e40                 | ' '****************************************************************************************************************
23e40                 | ' 
23e40                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
23e40                 | _hg010b_spin2_makedl
23e40                 | ' 
23e40                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
23e40                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
23e40                 | ' repeat i from 0 to 11                                                           ' clear DL
23e40     00 00 06 F6 | 	mov	_var01, #0
23e44     ED E5 05 F1 | 	add	objptr, #493
23e48     97 0E 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
23e4c                 | LR__2730
23e4c                 | '   displaylist[i]:=0 
23e4c     00 03 02 F6 | 	mov	_var02, _var01
23e50     02 02 66 F0 | 	shl	_var02, #2
23e54     F2 02 02 F1 | 	add	_var02, objptr
23e58     01 01 68 FC | 	wrlong	#0, _var02
23e5c     01 00 06 F1 | 	add	_var01, #1
23e60     0C 00 56 F2 | 	cmps	_var01, #12 wc
23e64     E4 FF 9F CD |  if_b	jmp	#LR__2730
23e68                 | LR__2731
23e68                 | '                         ' 
23e68                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
23e68     8C E5 85 F1 | 	sub	objptr, #396
23e6c     F2 02 02 FB | 	rdlong	_var02, objptr
23e70     14 02 66 F0 | 	shl	_var02, #20
23e74     01 02 06 F1 | 	add	_var02, #1
23e78     04 E4 85 F1 | 	sub	objptr, #4
23e7c     F2 00 02 FB | 	rdlong	_var01, objptr
23e80     02 00 66 F0 | 	shl	_var01, #2
23e84     04 00 66 F0 | 	shl	_var01, #4
23e88     00 03 02 F1 | 	add	_var02, _var01
23e8c     90 E5 05 F1 | 	add	objptr, #400
23e90     F2 02 62 FC | 	wrlong	_var02, objptr
23e94     ED E5 85 F1 | 	sub	objptr, #493
23e98                 | ' displaylist[1]:=buf_ptr<<4+%10  
23e98     F2 02 02 FB | 	rdlong	_var02, objptr
23e9c     04 02 66 F0 | 	shl	_var02, #4
23ea0     02 02 06 F1 | 	add	_var02, #2
23ea4     F1 E5 05 F1 | 	add	objptr, #497
23ea8     F2 02 62 FC | 	wrlong	_var02, objptr
23eac                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
23eac     04 E4 85 F1 | 	sub	objptr, #4
23eb0     F2 02 02 F6 | 	mov	_var02, objptr
23eb4     CD E5 85 F1 | 	sub	objptr, #461
23eb8     F2 02 62 FC | 	wrlong	_var02, objptr
23ebc     20 E4 85 F1 | 	sub	objptr, #32
23ec0                 | _hg010b_spin2_makedl_ret
23ec0     2D 00 64 FD | 	ret
23ec4                 | 
23ec4                 | ' 
23ec4                 | ' 
23ec4                 | ' '****************************************************************************************************************
23ec4                 | ' '                                                                        					*
23ec4                 | ' '  Graphic primitives                                                    					*
23ec4                 | ' '                                                                        					*
23ec4                 | ' '****************************************************************************************************************
23ec4                 | ' 
23ec4                 | ' pub setspriteptr(num,ptr)
23ec4                 | _hg010b_spin2_setspriteptr
23ec4                 | ' long[@spr1ptr+12*num]:=ptr
23ec4     11 E5 05 F1 | 	add	objptr, #273
23ec8     F2 00 02 F6 | 	mov	_var01, objptr
23ecc     09 03 02 F6 | 	mov	_var02, arg01
23ed0     01 02 66 F0 | 	shl	_var02, #1
23ed4     09 03 02 F1 | 	add	_var02, arg01
23ed8     02 02 66 F0 | 	shl	_var02, #2
23edc     01 01 02 F1 | 	add	_var01, _var02
23ee0     00 15 62 FC | 	wrlong	arg02, _var01
23ee4     11 E5 85 F1 | 	sub	objptr, #273
23ee8                 | _hg010b_spin2_setspriteptr_ret
23ee8     2D 00 64 FD | 	ret
23eec                 | 
23eec                 | ' 
23eec                 | ' pub setspritepos(num,x,y)
23eec                 | _hg010b_spin2_setspritepos
23eec                 | ' if y>601
23eec     01 00 00 FF 
23ef0     5A 16 56 F2 | 	cmps	arg03, ##602 wc
23ef4                 | '   y:=601
23ef4     01 00 00 3F 
23ef8     59 16 06 36 |  if_ae	mov	arg03, ##601
23efc                 | ' if x>1024
23efc     02 00 00 FF 
23f00     01 14 56 F2 | 	cmps	arg02, ##1025 wc
23f04                 | '   x:=1024
23f04     0A 14 C6 39 |  if_ae	decod	arg02, #10
23f08                 | ' word[@spr1ptr+12*num+4]:=x
23f08     11 E5 05 F1 | 	add	objptr, #273
23f0c     F2 00 02 F6 | 	mov	_var01, objptr
23f10     09 03 02 F6 | 	mov	_var02, arg01
23f14     01 02 66 F0 | 	shl	_var02, #1
23f18     09 03 02 F1 | 	add	_var02, arg01
23f1c     02 02 66 F0 | 	shl	_var02, #2
23f20     01 01 02 F1 | 	add	_var01, _var02
23f24     04 00 06 F1 | 	add	_var01, #4
23f28     00 15 52 FC | 	wrword	arg02, _var01
23f2c                 | ' word[@spr1ptr+12*num+6]:=y
23f2c     F2 00 02 F6 | 	mov	_var01, objptr
23f30     09 03 02 F6 | 	mov	_var02, arg01
23f34     01 02 66 F0 | 	shl	_var02, #1
23f38     09 03 02 F1 | 	add	_var02, arg01
23f3c     02 02 66 F0 | 	shl	_var02, #2
23f40     01 01 02 F1 | 	add	_var01, _var02
23f44     06 00 06 F1 | 	add	_var01, #6
23f48     00 17 52 FC | 	wrword	arg03, _var01
23f4c     11 E5 85 F1 | 	sub	objptr, #273
23f50                 | _hg010b_spin2_setspritepos_ret
23f50     2D 00 64 FD | 	ret
23f54                 | 
23f54                 | ' 
23f54                 | ' pub setspritesize(num,w,h)
23f54                 | _hg010b_spin2_setspritesize
23f54                 | ' word[@spr1ptr+12*num+8]:=w
23f54     11 E5 05 F1 | 	add	objptr, #273
23f58     F2 00 02 F6 | 	mov	_var01, objptr
23f5c     09 03 02 F6 | 	mov	_var02, arg01
23f60     01 02 66 F0 | 	shl	_var02, #1
23f64     09 03 02 F1 | 	add	_var02, arg01
23f68     02 02 66 F0 | 	shl	_var02, #2
23f6c     01 01 02 F1 | 	add	_var01, _var02
23f70     08 00 06 F1 | 	add	_var01, #8
23f74     00 15 52 FC | 	wrword	arg02, _var01
23f78                 | ' word[@spr1ptr+12*num+10]:=h
23f78     F2 00 02 F6 | 	mov	_var01, objptr
23f7c     09 03 02 F6 | 	mov	_var02, arg01
23f80     01 02 66 F0 | 	shl	_var02, #1
23f84     09 03 02 F1 | 	add	_var02, arg01
23f88     02 02 66 F0 | 	shl	_var02, #2
23f8c     01 01 02 F1 | 	add	_var01, _var02
23f90     0A 00 06 F1 | 	add	_var01, #10
23f94     00 17 52 FC | 	wrword	arg03, _var01
23f98     11 E5 85 F1 | 	sub	objptr, #273
23f9c                 | _hg010b_spin2_setspritesize_ret
23f9c     2D 00 64 FD | 	ret
23fa0                 | 
23fa0                 | ' 
23fa0                 | ' 
23fa0                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
23fa0                 | ' 
23fa0                 | ' 
23fa0                 | ' pub putpixel(x,y,c)
23fa0                 | _hg010b_spin2_putpixel
23fa0     04 4A 05 F6 | 	mov	COUNT_, #4
23fa4     A8 00 A0 FD | 	call	#pushregs_
23fa8     09 27 02 F6 | 	mov	local01, arg01
23fac                 | ' 
23fac                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
23fac     00 28 06 F6 | 	mov	local02, #0
23fb0     00 26 56 F2 | 	cmps	local01, #0 wc
23fb4     01 28 66 36 |  if_ae	neg	local02, #1
23fb8     E9 E4 05 F1 | 	add	objptr, #233
23fbc     F2 1A 02 FB | 	rdlong	arg05, objptr
23fc0     02 1A 66 F0 | 	shl	arg05, #2
23fc4     0D 27 52 F2 | 	cmps	local01, arg05 wc
23fc8     15 2B A2 F1 | 	subx	local03, local03
23fcc     15 29 02 F5 | 	and	local02, local03
23fd0     00 2A 06 F6 | 	mov	local03, #0
23fd4     00 14 56 F2 | 	cmps	arg02, #0 wc
23fd8     01 2A 66 36 |  if_ae	neg	local03, #1
23fdc     15 29 02 F5 | 	and	local02, local03
23fe0     04 E4 85 F1 | 	sub	objptr, #4
23fe4     F2 2A 02 FB | 	rdlong	local03, objptr
23fe8     E5 E4 85 F1 | 	sub	objptr, #229
23fec     15 15 52 F2 | 	cmps	arg02, local03 wc
23ff0     16 2D A2 F1 | 	subx	local04, local04
23ff4     16 29 CA F7 | 	test	local02, local04 wz
23ff8     48 00 90 AD |  if_e	jmp	#LR__2740
23ffc     DD E4 05 F1 | 	add	objptr, #221
24000     F2 12 02 FB | 	rdlong	arg01, objptr
24004     14 E4 05 F1 | 	add	objptr, #20
24008     F2 2C 02 FB | 	rdlong	local04, objptr
2400c     02 2C 66 F0 | 	shl	local04, #2
24010     0A 2D 02 FD | 	qmul	local04, arg02
24014                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24014     0B 15 02 F6 | 	mov	arg02, arg03
24018     01 16 06 F6 | 	mov	arg03, #1
2401c     00 18 06 F6 | 	mov	arg04, #0
24020     01 1A 06 F6 | 	mov	arg05, #1
24024     0A 00 00 FF 
24028     DB E5 05 F1 | 	add	objptr, ##5595
2402c     18 2C 62 FD | 	getqx	local04
24030     13 2D 02 F1 | 	add	local04, local01
24034     16 13 02 F1 | 	add	arg01, local04
24038     6C 1D B0 FD | 	call	#_psram_spin2_fill
2403c     0B 00 00 FF 
24040     CC E4 85 F1 | 	sub	objptr, ##5836
24044                 | LR__2740
24044     A7 F0 03 F6 | 	mov	ptra, fp
24048     B2 00 A0 FD | 	call	#popregs_
2404c                 | _hg010b_spin2_putpixel_ret
2404c     2D 00 64 FD | 	ret
24050                 | 
24050                 | ' 
24050                 | ' pub putpixel2(x,y,c)
24050                 | _hg010b_spin2_putpixel2
24050     02 4A 05 F6 | 	mov	COUNT_, #2
24054     A8 00 A0 FD | 	call	#pushregs_
24058     DD E4 05 F1 | 	add	objptr, #221
2405c     F2 26 02 FB | 	rdlong	local01, objptr
24060     14 E4 05 F1 | 	add	objptr, #20
24064     F2 1A 02 FB | 	rdlong	arg05, objptr
24068     02 1A 66 F0 | 	shl	arg05, #2
2406c     0A 1B 02 FD | 	qmul	arg05, arg02
24070                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24070     0B 15 02 F6 | 	mov	arg02, arg03
24074     01 16 06 F6 | 	mov	arg03, #1
24078     00 18 06 F6 | 	mov	arg04, #0
2407c     01 1A 06 F6 | 	mov	arg05, #1
24080     0A 00 00 FF 
24084     DB E5 05 F1 | 	add	objptr, ##5595
24088     18 28 62 FD | 	getqx	local02
2408c     09 29 02 F1 | 	add	local02, arg01
24090     14 27 02 F1 | 	add	local01, local02
24094     13 13 02 F6 | 	mov	arg01, local01
24098     0C 1D B0 FD | 	call	#_psram_spin2_fill
2409c     0B 00 00 FF 
240a0     CC E4 85 F1 | 	sub	objptr, ##5836
240a4     A7 F0 03 F6 | 	mov	ptra, fp
240a8     B2 00 A0 FD | 	call	#popregs_
240ac                 | _hg010b_spin2_putpixel2_ret
240ac     2D 00 64 FD | 	ret
240b0                 | 
240b0                 | ' 
240b0                 | ' pub getpixel2(x,y): c 
240b0                 | _hg010b_spin2_getpixel2
240b0     02 4A 05 F6 | 	mov	COUNT_, #2
240b4     A8 00 A0 FD | 	call	#pushregs_
240b8     0C F0 07 F1 | 	add	ptra, #12
240bc     04 4E 05 F1 | 	add	fp, #4
240c0     A7 12 62 FC | 	wrlong	arg01, fp
240c4     04 4E 05 F1 | 	add	fp, #4
240c8     A7 14 62 FC | 	wrlong	arg02, fp
240cc     08 4E 85 F1 | 	sub	fp, #8
240d0     A7 00 68 FC | 	wrlong	#0, fp
240d4     A7 12 02 F6 | 	mov	arg01, fp
240d8     DD E4 05 F1 | 	add	objptr, #221
240dc     F2 14 02 FB | 	rdlong	arg02, objptr
240e0     14 E4 05 F1 | 	add	objptr, #20
240e4     F2 16 02 FB | 	rdlong	arg03, objptr
240e8     02 16 66 F0 | 	shl	arg03, #2
240ec     08 4E 05 F1 | 	add	fp, #8
240f0     A7 FA 01 FB | 	rdlong	result1, fp
240f4     FD 16 02 FD | 	qmul	arg03, result1
240f8                 | ' 
240f8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
240f8     04 4E 85 F1 | 	sub	fp, #4
240fc     A7 26 02 FB | 	rdlong	local01, fp
24100     04 4E 85 F1 | 	sub	fp, #4
24104     01 16 06 F6 | 	mov	arg03, #1
24108     0A 00 00 FF 
2410c     DB E5 05 F1 | 	add	objptr, ##5595
24110     18 28 62 FD | 	getqx	local02
24114     13 29 02 F1 | 	add	local02, local01
24118     14 15 02 F1 | 	add	arg02, local02
2411c     50 1B B0 FD | 	call	#_psram_spin2_read1
24120     0B 00 00 FF 
24124     CC E4 85 F1 | 	sub	objptr, ##5836
24128                 | ' return c
24128     A7 FA 01 FB | 	rdlong	result1, fp
2412c     A7 F0 03 F6 | 	mov	ptra, fp
24130     B2 00 A0 FD | 	call	#popregs_
24134                 | _hg010b_spin2_getpixel2_ret
24134     2D 00 64 FD | 	ret
24138                 | 
24138                 | '   
24138                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
24138                 | ' 
24138                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
24138                 | _hg010b_spin2_fastline
24138     02 4A 05 F6 | 	mov	COUNT_, #2
2413c     A8 00 A0 FD | 	call	#pushregs_
24140     09 27 02 F6 | 	mov	local01, arg01
24144     0A 29 02 F6 | 	mov	local02, arg02
24148                 | ' 
24148                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
24148     00 16 56 F2 | 	cmps	arg03, #0 wc
2414c     F4 00 90 CD |  if_b	jmp	#LR__2750
24150     01 00 00 FF 
24154     2A E4 05 F1 | 	add	objptr, ##554
24158     F2 1A 02 FB | 	rdlong	arg05, objptr
2415c     01 00 00 FF 
24160     2A E4 85 F1 | 	sub	objptr, ##554
24164     0D 17 52 F2 | 	cmps	arg03, arg05 wc
24168     D8 00 90 3D |  if_ae	jmp	#LR__2750
2416c     00 26 56 F2 | 	cmps	local01, #0 wc
24170     00 28 56 C2 |  if_b	cmps	local02, #0 wc
24174     CC 00 90 CD |  if_b	jmp	#LR__2750
24178     01 00 00 FF 
2417c     26 E4 05 F1 | 	add	objptr, ##550
24180     F2 1A 02 FB | 	rdlong	arg05, objptr
24184     01 00 00 FF 
24188     26 E4 85 F1 | 	sub	objptr, ##550
2418c     0D 27 5A F2 | 	cmps	local01, arg05 wcz
24190     01 00 00 1F 
24194     26 E4 05 11 |  if_a	add	objptr, ##550
24198     F2 12 02 1B |  if_a	rdlong	arg01, objptr
2419c     01 00 00 1F 
241a0     26 E4 85 11 |  if_a	sub	objptr, ##550
241a4     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
241a8                 | '   return
241a8     98 00 90 1D |  if_a	jmp	#LR__2750
241ac     14 27 5A F2 | 	cmps	local01, local02 wcz
241b0     13 1B 02 16 |  if_a	mov	arg05, local01
241b4     14 27 02 16 |  if_a	mov	local01, local02
241b8     0D 29 02 16 |  if_a	mov	local02, arg05
241bc     00 26 56 F2 | 	cmps	local01, #0 wc
241c0     00 26 06 C6 |  if_b	mov	local01, #0
241c4     01 00 00 FF 
241c8     26 E4 05 F1 | 	add	objptr, ##550
241cc     F2 1A 02 FB | 	rdlong	arg05, objptr
241d0     01 00 00 FF 
241d4     26 E4 85 F1 | 	sub	objptr, ##550
241d8     0D 29 52 F2 | 	cmps	local02, arg05 wc
241dc     01 00 00 3F 
241e0     26 E4 05 31 |  if_ae	add	objptr, ##550
241e4     F2 28 02 3B |  if_ae	rdlong	local02, objptr
241e8     01 00 00 3F 
241ec     26 E4 85 31 |  if_ae	sub	objptr, ##550
241f0     DD E4 05 F1 | 	add	objptr, #221
241f4     F2 12 02 FB | 	rdlong	arg01, objptr
241f8     14 E4 05 F1 | 	add	objptr, #20
241fc     F2 1A 02 FB | 	rdlong	arg05, objptr
24200     02 1A 66 F0 | 	shl	arg05, #2
24204     0B 1B 02 FD | 	qmul	arg05, arg03
24208                 | ' if x1>x2
24208                 | '   x1,x2:=x2,x1
24208                 | ' if x1<0 
24208                 | '   x1:=0
24208                 | ' if x2>=xres
24208                 | '   x2:=xres-1  
24208     01 28 86 31 |  if_ae	sub	local02, #1
2420c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
2420c     01 16 06 F6 | 	mov	arg03, #1
24210     14 17 02 F1 | 	add	arg03, local02
24214     13 17 82 F1 | 	sub	arg03, local01
24218     0C 15 02 F6 | 	mov	arg02, arg04
2421c     00 18 06 F6 | 	mov	arg04, #0
24220     01 1A 06 F6 | 	mov	arg05, #1
24224     0A 00 00 FF 
24228     DB E5 05 F1 | 	add	objptr, ##5595
2422c     18 28 62 FD | 	getqx	local02
24230     13 29 02 F1 | 	add	local02, local01
24234     14 13 02 F1 | 	add	arg01, local02
24238     6C 1B B0 FD | 	call	#_psram_spin2_fill
2423c     0B 00 00 FF 
24240     CC E4 85 F1 | 	sub	objptr, ##5836
24244                 | LR__2750
24244     A7 F0 03 F6 | 	mov	ptra, fp
24248     B2 00 A0 FD | 	call	#popregs_
2424c                 | _hg010b_spin2_fastline_ret
2424c     2D 00 64 FD | 	ret
24250                 | 
24250                 | ' 
24250                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
24250                 | _hg010b_spin2_draw
24250     0E 4A 05 F6 | 	mov	COUNT_, #14
24254     A8 00 A0 FD | 	call	#pushregs_
24258     09 27 02 F6 | 	mov	local01, arg01
2425c     0A 29 02 F6 | 	mov	local02, arg02
24260     0B 2B 02 F6 | 	mov	local03, arg03
24264     0C 2D 02 F6 | 	mov	local04, arg04
24268     0D 2F 02 F6 | 	mov	local05, arg05
2426c                 | ' 
2426c                 | ' if (y1==y2)
2426c     16 29 0A F2 | 	cmp	local02, local04 wz
24270     18 00 90 5D |  if_ne	jmp	#LR__2760
24274                 | '   fastline(x1,x2,y1,c)
24274     13 13 02 F6 | 	mov	arg01, local01
24278     15 15 02 F6 | 	mov	arg02, local03
2427c     14 17 02 F6 | 	mov	arg03, local02
24280     17 19 02 F6 | 	mov	arg04, local05
24284     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
24288     F8 00 90 FD | 	jmp	#LR__2766
2428c                 | LR__2760
2428c                 | ' else  
2428c                 | '   x:=x1
2428c     13 31 02 F6 | 	mov	local06, local01
24290                 | '   y:=y1
24290     14 33 02 F6 | 	mov	local07, local02
24294                 | ' 
24294                 | '   if (x1<x2) 
24294     15 27 52 F2 | 	cmps	local01, local03 wc
24298                 | '     xi:=1
24298     01 34 06 C6 |  if_b	mov	local08, #1
2429c                 | '     dx:=x2-x1
2429c     15 37 02 C6 |  if_b	mov	local09, local03
242a0     13 37 82 C1 |  if_b	sub	local09, local01
242a4                 | '   else
242a4                 | '     xi:=-1
242a4     01 34 66 36 |  if_ae	neg	local08, #1
242a8                 | '     dx:=x1-x2
242a8     15 27 82 31 |  if_ae	sub	local01, local03
242ac     13 37 02 36 |  if_ae	mov	local09, local01
242b0                 | '   
242b0                 | '   if (y1<y2) 
242b0     16 29 52 F2 | 	cmps	local02, local04 wc
242b4                 | '     yi:=1
242b4     01 38 06 C6 |  if_b	mov	local10, #1
242b8                 | '     dy:=y2-y1
242b8     16 3B 02 C6 |  if_b	mov	local11, local04
242bc     14 3B 82 C1 |  if_b	sub	local11, local02
242c0                 | '   else
242c0                 | '     yi:=-1
242c0     01 38 66 36 |  if_ae	neg	local10, #1
242c4                 | '     dy:=y1-y2
242c4     16 29 82 31 |  if_ae	sub	local02, local04
242c8     14 3B 02 36 |  if_ae	mov	local11, local02
242cc                 | ' 
242cc                 | '   putpixel(x,y,c)
242cc     17 17 02 F6 | 	mov	arg03, local05
242d0     18 13 02 F6 | 	mov	arg01, local06
242d4     19 15 02 F6 | 	mov	arg02, local07
242d8     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
242dc                 | ' 
242dc                 | '   if (dx>dy)
242dc     1D 37 5A F2 | 	cmps	local09, local11 wcz
242e0     50 00 90 ED |  if_be	jmp	#LR__2762
242e4                 | '     ai:=(dy-dx)*2
242e4     1D 3D 02 F6 | 	mov	local12, local11
242e8     1B 3D 82 F1 | 	sub	local12, local09
242ec     01 3C 66 F0 | 	shl	local12, #1
242f0                 | '     bi:=dy*2
242f0     01 3A 66 F0 | 	shl	local11, #1
242f4     1D 3F 02 F6 | 	mov	local13, local11
242f8                 | '     d:= bi-dx
242f8     1F 41 02 F6 | 	mov	local14, local13
242fc     1B 41 82 F1 | 	sub	local14, local09
24300                 | '     repeat while (x<>x2) 
24300                 | LR__2761
24300     15 31 0A F2 | 	cmp	local06, local03 wz
24304     7C 00 90 AD |  if_e	jmp	#LR__2765
24308                 | '       if (d>=0) 
24308     00 40 56 F2 | 	cmps	local14, #0 wc
2430c                 | '         x+=xi
2430c     1A 31 02 31 |  if_ae	add	local06, local08
24310                 | '         y+=yi
24310     1C 33 02 31 |  if_ae	add	local07, local10
24314                 | '         d+=ai
24314     1E 41 02 31 |  if_ae	add	local14, local12
24318                 | '       else
24318                 | '         d+=bi
24318     1F 41 02 C1 |  if_b	add	local14, local13
2431c                 | '         x+=xi
2431c     1A 31 02 C1 |  if_b	add	local06, local08
24320                 | '       putpixel(x,y,c)
24320     18 13 02 F6 | 	mov	arg01, local06
24324     19 15 02 F6 | 	mov	arg02, local07
24328     17 17 02 F6 | 	mov	arg03, local05
2432c     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
24330     CC FF 9F FD | 	jmp	#LR__2761
24334                 | LR__2762
24334                 | '   else
24334                 | '     ai:=(dx-dy)*2
24334     1B 3D 02 F6 | 	mov	local12, local09
24338     1D 3D 82 F1 | 	sub	local12, local11
2433c     01 3C 66 F0 | 	shl	local12, #1
24340                 | '     bi:=dx*2
24340     01 36 66 F0 | 	shl	local09, #1
24344     1B 3F 02 F6 | 	mov	local13, local09
24348                 | '     d:=bi-dy
24348     1F 41 02 F6 | 	mov	local14, local13
2434c     1D 41 82 F1 | 	sub	local14, local11
24350                 | '     repeat while (y<>y2)
24350                 | LR__2763
24350     16 33 0A F2 | 	cmp	local07, local04 wz
24354     2C 00 90 AD |  if_e	jmp	#LR__2764
24358                 | '       if (d>=0)
24358     00 40 56 F2 | 	cmps	local14, #0 wc
2435c                 | '         x+=xi
2435c     1A 31 02 31 |  if_ae	add	local06, local08
24360                 | '         y+=yi
24360     1C 33 02 31 |  if_ae	add	local07, local10
24364                 | '         d+=ai
24364     1E 41 02 31 |  if_ae	add	local14, local12
24368                 | '       else
24368                 | '         d+=bi
24368     1F 41 02 C1 |  if_b	add	local14, local13
2436c                 | '         y+=yi
2436c     1C 33 02 C1 |  if_b	add	local07, local10
24370                 | '       putpixel(x, y,c)
24370     18 13 02 F6 | 	mov	arg01, local06
24374     19 15 02 F6 | 	mov	arg02, local07
24378     17 17 02 F6 | 	mov	arg03, local05
2437c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
24380     CC FF 9F FD | 	jmp	#LR__2763
24384                 | LR__2764
24384                 | LR__2765
24384                 | LR__2766
24384     A7 F0 03 F6 | 	mov	ptra, fp
24388     B2 00 A0 FD | 	call	#popregs_
2438c                 | _hg010b_spin2_draw_ret
2438c     2D 00 64 FD | 	ret
24390                 | 
24390                 | '  
24390                 | ' pub fillpush(val) 
24390                 | _hg010b_spin2_fillpush
24390                 | ' fillstack[fillptr]:=val
24390     0B 00 00 FF 
24394     BA E4 05 F1 | 	add	objptr, ##5818
24398     F2 00 02 FB | 	rdlong	_var01, objptr
2439c     02 00 66 F0 | 	shl	_var01, #2
243a0     0A 00 00 FF 
243a4     00 E4 85 F1 | 	sub	objptr, ##5120
243a8     F2 00 02 F1 | 	add	_var01, objptr
243ac     00 13 62 FC | 	wrlong	arg01, _var01
243b0                 | ' fillptr+=1   
243b0     0A 00 00 FF 
243b4     00 E4 05 F1 | 	add	objptr, ##5120
243b8     F2 00 02 FB | 	rdlong	_var01, objptr
243bc     01 00 06 F1 | 	add	_var01, #1
243c0     F2 00 62 FC | 	wrlong	_var01, objptr
243c4     0B 00 00 FF 
243c8     BA E4 85 F1 | 	sub	objptr, ##5818
243cc                 | _hg010b_spin2_fillpush_ret
243cc     2D 00 64 FD | 	ret
243d0                 | 
243d0                 | ' 
243d0                 | '     
243d0                 | ' pub fillpop() : val
243d0                 | _hg010b_spin2_fillpop
243d0                 | ' 
243d0                 | ' fillptr-=1
243d0     0B 00 00 FF 
243d4     BA E4 05 F1 | 	add	objptr, ##5818
243d8     F2 FA 01 FB | 	rdlong	result1, objptr
243dc     01 FA 85 F1 | 	sub	result1, #1
243e0     F2 FA 61 FC | 	wrlong	result1, objptr
243e4                 | ' if fillptr<0
243e4     0B 00 00 FF 
243e8     BA E4 85 F1 | 	sub	objptr, ##5818
243ec     00 FA 55 F2 | 	cmps	result1, #0 wc
243f0                 | '   fillptr:=0
243f0     0B 00 00 CF 
243f4     BA E4 05 C1 |  if_b	add	objptr, ##5818
243f8     F2 00 68 CC |  if_b	wrlong	#0, objptr
243fc     0B 00 00 CF 
24400     BA E4 85 C1 |  if_b	sub	objptr, ##5818
24404                 | '   val:=-12345
24404     E7 FF 7F CF 
24408     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
2440c     28 00 90 CD |  if_b	jmp	#LR__2770
24410                 | ' else 
24410                 | '   val:=fillstack[fillptr]
24410     0B 00 00 FF 
24414     BA E4 05 F1 | 	add	objptr, ##5818
24418     F2 00 02 FB | 	rdlong	_var01, objptr
2441c     02 00 66 F0 | 	shl	_var01, #2
24420     0A 00 00 FF 
24424     00 E4 85 F1 | 	sub	objptr, ##5120
24428     F2 00 02 F1 | 	add	_var01, objptr
2442c     00 01 02 FB | 	rdlong	_var01, _var01
24430     01 00 00 FF 
24434     BA E4 85 F1 | 	sub	objptr, ##698
24438                 | LR__2770
24438                 | ' return val
24438     00 FB 01 F6 | 	mov	result1, _var01
2443c                 | _hg010b_spin2_fillpop_ret
2443c     2D 00 64 FD | 	ret
24440                 | 
24440                 | ' 
24440                 | '       
24440                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
24440                 | _hg010b_spin2_fill
24440     0B 4A 05 F6 | 	mov	COUNT_, #11
24444     A8 00 A0 FD | 	call	#pushregs_
24448                 | ' 
24448                 | ' newcolor:=newcolor & 255
24448     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
2444c                 | ' oldcolor:=oldcolor & 255
2444c     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
24450                 | ' 
24450                 | ' if (oldcolor == newcolor) 
24450     13 29 0A F2 | 	cmp	local02, local01 wz
24454                 | '   return
24454     70 02 90 AD |  if_e	jmp	#LR__2789
24458                 | ' 
24458                 | ' fillptr:=0
24458     0B 00 00 FF 
2445c     BA E4 05 F1 | 	add	objptr, ##5818
24460     F2 00 68 FC | 	wrlong	#0, objptr
24464                 | ' fillmax:=0
24464     04 E4 05 F1 | 	add	objptr, #4
24468     F2 00 68 FC | 	wrlong	#0, objptr
2446c     0B 00 00 FF 
24470     BE E4 85 F1 | 	sub	objptr, ##5822
24474                 | ' fillpush(x)
24474     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
24478                 | ' fillpush(y)
24478     0A 13 02 F6 | 	mov	arg01, arg02
2447c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
24480                 | ' y:=fillpop()
24480     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
24484     FD 2A 02 F6 | 	mov	local03, result1
24488                 | ' x:=fillpop()
24488     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
2448c     FD 2C 02 F6 | 	mov	local04, result1
24490                 | ' 'pinhigh(38)
24490                 | ' repeat while (x>-1)       
24490                 | LR__2780
24490     00 2C 56 F2 | 	cmps	local04, #0 wc
24494     30 02 90 CD |  if_b	jmp	#LR__2788
24498                 | '  ' pintoggle(39)
24498                 | '   x1 := x
24498     16 2F 02 F6 | 	mov	local05, local04
2449c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
2449c                 | LR__2781
2449c     00 30 06 F6 | 	mov	local06, #0
244a0     00 32 06 F6 | 	mov	local07, #0
244a4     00 2E 56 F2 | 	cmps	local05, #0 wc
244a8     01 32 66 36 |  if_ae	neg	local07, #1
244ac     00 32 0E F2 | 	cmp	local07, #0 wz
244b0     00 30 26 56 |  if_ne	not	local06, #0
244b4     00 34 06 F6 | 	mov	local08, #0
244b8     00 36 06 F6 | 	mov	local09, #0
244bc     15 15 02 F6 | 	mov	arg02, local03
244c0     17 13 02 F6 | 	mov	arg01, local05
244c4     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
244c8     14 FB 09 F2 | 	cmp	result1, local02 wz
244cc     00 36 26 A6 |  if_e	not	local09, #0
244d0     00 36 0E F2 | 	cmp	local09, #0 wz
244d4     00 34 26 56 |  if_ne	not	local08, #0
244d8     1A 31 CA F7 | 	test	local06, local08 wz
244dc                 | '     x1--
244dc     01 2E 86 51 |  if_ne	sub	local05, #1
244e0     B8 FF 9F 5D |  if_ne	jmp	#LR__2781
244e4                 | '   x1++
244e4     01 2E 06 F1 | 	add	local05, #1
244e8                 | '   spanabove := 0
244e8     00 38 06 F6 | 	mov	local10, #0
244ec                 | '   spanbelow := 0
244ec     00 3A 06 F6 | 	mov	local11, #0
244f0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
244f0                 | LR__2782
244f0     00 30 06 F6 | 	mov	local06, #0
244f4     02 00 00 FF 
244f8     00 2E 56 F2 | 	cmps	local05, ##1024 wc
244fc     00 30 26 C6 |  if_b	not	local06, #0
24500     00 34 06 F6 | 	mov	local08, #0
24504     00 36 06 F6 | 	mov	local09, #0
24508     15 15 02 F6 | 	mov	arg02, local03
2450c     17 13 02 F6 | 	mov	arg01, local05
24510     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
24514     14 FB 09 F2 | 	cmp	result1, local02 wz
24518     00 36 26 A6 |  if_e	not	local09, #0
2451c     00 36 0E F2 | 	cmp	local09, #0 wz
24520     00 34 26 56 |  if_ne	not	local08, #0
24524     1A 31 CA F7 | 	test	local06, local08 wz
24528     88 01 90 AD |  if_e	jmp	#LR__2787
2452c                 | '     putpixel2 (x1,y, newcolor & 255)
2452c     13 17 E2 F8 | 	getbyte	arg03, local01, #0
24530     17 13 02 F6 | 	mov	arg01, local05
24534     15 15 02 F6 | 	mov	arg02, local03
24538     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
2453c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
2453c     00 30 06 F6 | 	mov	local06, #0
24540     00 32 06 F6 | 	mov	local07, #0
24544     00 38 0E F2 | 	cmp	local10, #0 wz
24548     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
2454c     01 32 66 26 |  if_nc_and_z	neg	local07, #1
24550     00 32 0E F2 | 	cmp	local07, #0 wz
24554     00 30 26 56 |  if_ne	not	local06, #0
24558     00 34 06 F6 | 	mov	local08, #0
2455c     00 36 06 F6 | 	mov	local09, #0
24560     15 15 02 F6 | 	mov	arg02, local03
24564     01 14 86 F1 | 	sub	arg02, #1
24568     17 13 02 F6 | 	mov	arg01, local05
2456c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24570     14 FB 09 F2 | 	cmp	result1, local02 wz
24574     00 36 26 A6 |  if_e	not	local09, #0
24578     00 36 0E F2 | 	cmp	local09, #0 wz
2457c     00 34 26 56 |  if_ne	not	local08, #0
24580     1A 31 CA F7 | 	test	local06, local08 wz
24584     1C 00 90 AD |  if_e	jmp	#LR__2783
24588                 | '       fillpush(x1)
24588     17 13 02 F6 | 	mov	arg01, local05
2458c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
24590                 | '       fillpush(y-1)
24590     15 13 02 F6 | 	mov	arg01, local03
24594     01 12 86 F1 | 	sub	arg01, #1
24598     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
2459c                 | '       spanabove := 1 
2459c     01 38 06 F6 | 	mov	local10, #1
245a0     4C 00 90 FD | 	jmp	#LR__2784
245a4                 | LR__2783
245a4                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
245a4     00 30 06 F6 | 	mov	local06, #0
245a8     00 32 06 F6 | 	mov	local07, #0
245ac     00 38 0E F2 | 	cmp	local10, #0 wz
245b0     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
245b4     01 32 66 16 |  if_a	neg	local07, #1
245b8     00 32 0E F2 | 	cmp	local07, #0 wz
245bc     00 30 26 56 |  if_ne	not	local06, #0
245c0     00 34 06 F6 | 	mov	local08, #0
245c4     00 36 06 F6 | 	mov	local09, #0
245c8     15 15 02 F6 | 	mov	arg02, local03
245cc     01 14 86 F1 | 	sub	arg02, #1
245d0     17 13 02 F6 | 	mov	arg01, local05
245d4     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
245d8     14 FB 09 F2 | 	cmp	result1, local02 wz
245dc     00 36 26 56 |  if_ne	not	local09, #0
245e0     00 36 0E F2 | 	cmp	local09, #0 wz
245e4     00 34 26 56 |  if_ne	not	local08, #0
245e8     1A 31 CA F7 | 	test	local06, local08 wz
245ec                 | '       spanabove := 0 
245ec     00 38 06 56 |  if_ne	mov	local10, #0
245f0                 | LR__2784
245f0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
245f0     00 30 06 F6 | 	mov	local06, #0
245f4     00 32 06 F6 | 	mov	local07, #0
245f8     00 3A 0E F2 | 	cmp	local11, #0 wz
245fc     01 00 00 AF 
24600     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
24604     01 32 66 86 |  if_c_and_z	neg	local07, #1
24608     00 32 0E F2 | 	cmp	local07, #0 wz
2460c     00 30 26 56 |  if_ne	not	local06, #0
24610     00 34 06 F6 | 	mov	local08, #0
24614     00 36 06 F6 | 	mov	local09, #0
24618     15 15 02 F6 | 	mov	arg02, local03
2461c     01 14 06 F1 | 	add	arg02, #1
24620     17 13 02 F6 | 	mov	arg01, local05
24624     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24628     14 FB 09 F2 | 	cmp	result1, local02 wz
2462c     00 36 26 A6 |  if_e	not	local09, #0
24630     00 36 0E F2 | 	cmp	local09, #0 wz
24634     00 34 26 56 |  if_ne	not	local08, #0
24638     1A 31 CA F7 | 	test	local06, local08 wz
2463c     1C 00 90 AD |  if_e	jmp	#LR__2785
24640                 | '       fillpush(x1)
24640     17 13 02 F6 | 	mov	arg01, local05
24644     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
24648                 | '       fillpush(y + 1)
24648     15 13 02 F6 | 	mov	arg01, local03
2464c     01 12 06 F1 | 	add	arg01, #1
24650     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
24654                 | '       spanBelow := 1
24654     01 3A 06 F6 | 	mov	local11, #1
24658     50 00 90 FD | 	jmp	#LR__2786
2465c                 | LR__2785
2465c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
2465c     00 30 06 F6 | 	mov	local06, #0
24660     00 32 06 F6 | 	mov	local07, #0
24664     00 3A 0E F2 | 	cmp	local11, #0 wz
24668     01 00 00 5F 
2466c     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
24670     01 32 66 46 |  if_c_and_nz	neg	local07, #1
24674     00 32 0E F2 | 	cmp	local07, #0 wz
24678     00 30 26 56 |  if_ne	not	local06, #0
2467c     00 34 06 F6 | 	mov	local08, #0
24680     00 36 06 F6 | 	mov	local09, #0
24684     15 15 02 F6 | 	mov	arg02, local03
24688     01 14 06 F1 | 	add	arg02, #1
2468c     17 13 02 F6 | 	mov	arg01, local05
24690     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
24694     14 FB 09 F2 | 	cmp	result1, local02 wz
24698     00 36 26 56 |  if_ne	not	local09, #0
2469c     00 36 0E F2 | 	cmp	local09, #0 wz
246a0     00 34 26 56 |  if_ne	not	local08, #0
246a4     1A 31 CA F7 | 	test	local06, local08 wz
246a8                 | '       spanbelow := 0
246a8     00 3A 06 56 |  if_ne	mov	local11, #0
246ac                 | LR__2786
246ac                 | '     x1++
246ac     01 2E 06 F1 | 	add	local05, #1
246b0     3C FE 9F FD | 	jmp	#LR__2782
246b4                 | LR__2787
246b4                 | '   y:=fillpop()
246b4     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
246b8     FD 2A 02 F6 | 	mov	local03, result1
246bc                 | '   x:=fillpop()
246bc     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
246c0     FD 2C 02 F6 | 	mov	local04, result1
246c4     C8 FD 9F FD | 	jmp	#LR__2780
246c8                 | LR__2788
246c8                 | LR__2789
246c8     A7 F0 03 F6 | 	mov	ptra, fp
246cc     B2 00 A0 FD | 	call	#popregs_
246d0                 | _hg010b_spin2_fill_ret
246d0     2D 00 64 FD | 	ret
246d4                 | 
246d4                 | ' 'pinlow(38)    
246d4                 | ' 
246d4                 | ' '-- A filled circle -----------------------------------------------------
246d4                 | ' 
246d4                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
246d4                 | _hg010b_spin2_fcircle
246d4     08 4A 05 F6 | 	mov	COUNT_, #8
246d8     A8 00 A0 FD | 	call	#pushregs_
246dc     0B 27 02 F6 | 	mov	local01, arg03
246e0     FF FF 7F FF 
246e4     FE 27 06 FD | 	qmul	local01, ##-2
246e8     09 29 02 F6 | 	mov	local02, arg01
246ec     0A 2B 02 F6 | 	mov	local03, arg02
246f0     0C 2D 02 F6 | 	mov	local04, arg04
246f4                 | ' 
246f4                 | ' d:=5-4*r
246f4     13 19 02 F6 | 	mov	arg04, local01
246f8     02 18 66 F0 | 	shl	arg04, #2
246fc     05 2E 06 F6 | 	mov	local05, #5
24700     0C 2F 82 F1 | 	sub	local05, arg04
24704                 | ' x:=0
24704     00 30 06 F6 | 	mov	local06, #0
24708                 | ' y:=r
24708                 | ' da:=(-2*r+5)*4
24708                 | ' db:=3*4
24708     0C 32 06 F6 | 	mov	local07, #12
2470c                 | ' repeat while (x<=y) 
2470c     18 34 62 FD | 	getqx	local08
24710     05 34 06 F1 | 	add	local08, #5
24714     02 34 66 F0 | 	shl	local08, #2
24718                 | LR__2790
24718     13 31 5A F2 | 	cmps	local06, local01 wcz
2471c     B4 00 90 1D |  if_a	jmp	#LR__2792
24720                 | '   fastline(x0-x,x0+x,y0-y,c)
24720     14 13 02 F6 | 	mov	arg01, local02
24724     18 13 82 F1 | 	sub	arg01, local06
24728     14 15 02 F6 | 	mov	arg02, local02
2472c     18 15 02 F1 | 	add	arg02, local06
24730     15 17 02 F6 | 	mov	arg03, local03
24734     13 17 82 F1 | 	sub	arg03, local01
24738     16 19 02 F6 | 	mov	arg04, local04
2473c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24740                 | '   fastline(x0-x,x0+x,y0+y,c)
24740     14 13 02 F6 | 	mov	arg01, local02
24744     18 13 82 F1 | 	sub	arg01, local06
24748     14 15 02 F6 | 	mov	arg02, local02
2474c     18 15 02 F1 | 	add	arg02, local06
24750     15 17 02 F6 | 	mov	arg03, local03
24754     13 17 02 F1 | 	add	arg03, local01
24758     16 19 02 F6 | 	mov	arg04, local04
2475c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24760                 | '   fastline(x0-y,x0+y,y0-x,c)
24760     14 13 02 F6 | 	mov	arg01, local02
24764     13 13 82 F1 | 	sub	arg01, local01
24768     14 15 02 F6 | 	mov	arg02, local02
2476c     13 15 02 F1 | 	add	arg02, local01
24770     15 17 02 F6 | 	mov	arg03, local03
24774     18 17 82 F1 | 	sub	arg03, local06
24778     16 19 02 F6 | 	mov	arg04, local04
2477c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24780                 | '   fastline(x0-y,x0+y,y0+x,c)
24780     14 13 02 F6 | 	mov	arg01, local02
24784     13 13 82 F1 | 	sub	arg01, local01
24788     14 15 02 F6 | 	mov	arg02, local02
2478c     13 15 02 F1 | 	add	arg02, local01
24790     15 17 02 F6 | 	mov	arg03, local03
24794     18 17 02 F1 | 	add	arg03, local06
24798     16 19 02 F6 | 	mov	arg04, local04
2479c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
247a0                 | '   if d>0 
247a0     01 2E 56 F2 | 	cmps	local05, #1 wc
247a4     18 00 90 CD |  if_b	jmp	#LR__2791
247a8                 | '     d+=da
247a8     1A 2F 02 F1 | 	add	local05, local08
247ac                 | '     y-=1
247ac     01 26 86 F1 | 	sub	local01, #1
247b0                 | '     x+=1
247b0     01 30 06 F1 | 	add	local06, #1
247b4                 | '     da+=4*4
247b4     10 34 06 F1 | 	add	local08, #16
247b8                 | '     db+=2*4
247b8     08 32 06 F1 | 	add	local07, #8
247bc     58 FF 9F FD | 	jmp	#LR__2790
247c0                 | LR__2791
247c0                 | '   else
247c0                 | '     d+=db
247c0     19 2F 02 F1 | 	add	local05, local07
247c4                 | '     x+=1
247c4     01 30 06 F1 | 	add	local06, #1
247c8                 | '     da+=2*4
247c8     08 34 06 F1 | 	add	local08, #8
247cc                 | '     db+=2*4
247cc     08 32 06 F1 | 	add	local07, #8
247d0     44 FF 9F FD | 	jmp	#LR__2790
247d4                 | LR__2792
247d4     A7 F0 03 F6 | 	mov	ptra, fp
247d8     B2 00 A0 FD | 	call	#popregs_
247dc                 | _hg010b_spin2_fcircle_ret
247dc     2D 00 64 FD | 	ret
247e0                 | 
247e0                 | '  
247e0                 | ' '-- A circle ------------------------------------------------------------ 
247e0                 | '  
247e0                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
247e0                 | _hg010b_spin2_circle
247e0     08 4A 05 F6 | 	mov	COUNT_, #8
247e4     A8 00 A0 FD | 	call	#pushregs_
247e8     0B 27 02 F6 | 	mov	local01, arg03
247ec     FF FF 7F FF 
247f0     FE 27 06 FD | 	qmul	local01, ##-2
247f4     09 29 02 F6 | 	mov	local02, arg01
247f8     0A 2B 02 F6 | 	mov	local03, arg02
247fc     0C 2D 02 F6 | 	mov	local04, arg04
24800                 | ' 
24800                 | '  
24800                 | ' d:=5-4*r
24800     13 19 02 F6 | 	mov	arg04, local01
24804     02 18 66 F0 | 	shl	arg04, #2
24808     05 2E 06 F6 | 	mov	local05, #5
2480c     0C 2F 82 F1 | 	sub	local05, arg04
24810                 | ' x:=0
24810     00 30 06 F6 | 	mov	local06, #0
24814                 | ' y:=r
24814                 | ' da:=(-2*r+5)*4
24814                 | ' db:=3*4
24814     0C 32 06 F6 | 	mov	local07, #12
24818                 | ' repeat while (x<=y) 
24818     18 34 62 FD | 	getqx	local08
2481c     05 34 06 F1 | 	add	local08, #5
24820     02 34 66 F0 | 	shl	local08, #2
24824                 | LR__2800
24824     13 31 5A F2 | 	cmps	local06, local01 wcz
24828     F4 00 90 1D |  if_a	jmp	#LR__2802
2482c                 | '   putpixel(x0-x,y0-y,c)
2482c     14 13 02 F6 | 	mov	arg01, local02
24830     18 13 82 F1 | 	sub	arg01, local06
24834     15 15 02 F6 | 	mov	arg02, local03
24838     13 15 82 F1 | 	sub	arg02, local01
2483c     16 17 02 F6 | 	mov	arg03, local04
24840     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24844                 | '   putpixel(x0-x,y0+y,c)
24844     14 13 02 F6 | 	mov	arg01, local02
24848     18 13 82 F1 | 	sub	arg01, local06
2484c     15 15 02 F6 | 	mov	arg02, local03
24850     13 15 02 F1 | 	add	arg02, local01
24854     16 17 02 F6 | 	mov	arg03, local04
24858     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2485c                 | '   putpixel(x0+x,y0-y,c)
2485c     14 13 02 F6 | 	mov	arg01, local02
24860     18 13 02 F1 | 	add	arg01, local06
24864     15 15 02 F6 | 	mov	arg02, local03
24868     13 15 82 F1 | 	sub	arg02, local01
2486c     16 17 02 F6 | 	mov	arg03, local04
24870     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24874                 | '   putpixel(x0+x,y0+y,c)
24874     14 13 02 F6 | 	mov	arg01, local02
24878     18 13 02 F1 | 	add	arg01, local06
2487c     15 15 02 F6 | 	mov	arg02, local03
24880     13 15 02 F1 | 	add	arg02, local01
24884     16 17 02 F6 | 	mov	arg03, local04
24888     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2488c                 | '   putpixel(x0-y,y0-x,c)
2488c     14 13 02 F6 | 	mov	arg01, local02
24890     13 13 82 F1 | 	sub	arg01, local01
24894     15 15 02 F6 | 	mov	arg02, local03
24898     18 15 82 F1 | 	sub	arg02, local06
2489c     16 17 02 F6 | 	mov	arg03, local04
248a0     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
248a4                 | '   putpixel(x0-y,y0+x,c)
248a4     14 13 02 F6 | 	mov	arg01, local02
248a8     13 13 82 F1 | 	sub	arg01, local01
248ac     15 15 02 F6 | 	mov	arg02, local03
248b0     18 15 02 F1 | 	add	arg02, local06
248b4     16 17 02 F6 | 	mov	arg03, local04
248b8     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
248bc                 | '   putpixel(x0+y,y0-x,c)
248bc     14 13 02 F6 | 	mov	arg01, local02
248c0     13 13 02 F1 | 	add	arg01, local01
248c4     15 15 02 F6 | 	mov	arg02, local03
248c8     18 15 82 F1 | 	sub	arg02, local06
248cc     16 17 02 F6 | 	mov	arg03, local04
248d0     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
248d4                 | '   putpixel(x0+y,y0+x,c)
248d4     14 13 02 F6 | 	mov	arg01, local02
248d8     13 13 02 F1 | 	add	arg01, local01
248dc     15 15 02 F6 | 	mov	arg02, local03
248e0     18 15 02 F1 | 	add	arg02, local06
248e4     16 17 02 F6 | 	mov	arg03, local04
248e8     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
248ec                 | '   if d>0 
248ec     01 2E 56 F2 | 	cmps	local05, #1 wc
248f0     18 00 90 CD |  if_b	jmp	#LR__2801
248f4                 | '     d+=da
248f4     1A 2F 02 F1 | 	add	local05, local08
248f8                 | '     y-=1
248f8     01 26 86 F1 | 	sub	local01, #1
248fc                 | '     x+=1
248fc     01 30 06 F1 | 	add	local06, #1
24900                 | '     da+=4*4
24900     10 34 06 F1 | 	add	local08, #16
24904                 | '     db+=2*4
24904     08 32 06 F1 | 	add	local07, #8
24908     18 FF 9F FD | 	jmp	#LR__2800
2490c                 | LR__2801
2490c                 | '   else
2490c                 | '     d+=db
2490c     19 2F 02 F1 | 	add	local05, local07
24910                 | '     x+=1
24910     01 30 06 F1 | 	add	local06, #1
24914                 | '     da+=2*4
24914     08 34 06 F1 | 	add	local08, #8
24918                 | '     db+=2*4
24918     08 32 06 F1 | 	add	local07, #8
2491c     04 FF 9F FD | 	jmp	#LR__2800
24920                 | LR__2802
24920     A7 F0 03 F6 | 	mov	ptra, fp
24924     B2 00 A0 FD | 	call	#popregs_
24928                 | _hg010b_spin2_circle_ret
24928     2D 00 64 FD | 	ret
2492c                 | 
2492c                 | '     
2492c                 | ' '-- A frame (an empty rectangle) ---------------------------------------
2492c                 | ' 
2492c                 | ' pub frame(x1,y1,x2,y2,c)
2492c                 | _hg010b_spin2_frame
2492c     05 4A 05 F6 | 	mov	COUNT_, #5
24930     A8 00 A0 FD | 	call	#pushregs_
24934     09 27 02 F6 | 	mov	local01, arg01
24938     0A 29 02 F6 | 	mov	local02, arg02
2493c     0B 2B 02 F6 | 	mov	local03, arg03
24940     0C 2D 02 F6 | 	mov	local04, arg04
24944     0D 2F 02 F6 | 	mov	local05, arg05
24948                 | ' 
24948                 | ' fastline(x1,x2,y1,c)
24948     13 13 02 F6 | 	mov	arg01, local01
2494c     15 15 02 F6 | 	mov	arg02, local03
24950     14 17 02 F6 | 	mov	arg03, local02
24954     17 19 02 F6 | 	mov	arg04, local05
24958     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
2495c                 | ' fastline(x1,x2,y2,c)
2495c     13 13 02 F6 | 	mov	arg01, local01
24960     15 15 02 F6 | 	mov	arg02, local03
24964     16 17 02 F6 | 	mov	arg03, local04
24968     17 19 02 F6 | 	mov	arg04, local05
2496c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
24970                 | ' line(x1,y1,x1,y2,c)
24970     13 13 02 F6 | 	mov	arg01, local01
24974     14 15 02 F6 | 	mov	arg02, local02
24978     13 17 02 F6 | 	mov	arg03, local01
2497c     16 19 02 F6 | 	mov	arg04, local04
24980     17 1B 02 F6 | 	mov	arg05, local05
24984                 | ' draw(x1,y1,x2,y2,c)
24984     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
24988                 | ' line(x2,y1,x2,y2,c)
24988     15 13 02 F6 | 	mov	arg01, local03
2498c     14 15 02 F6 | 	mov	arg02, local02
24990     15 17 02 F6 | 	mov	arg03, local03
24994     16 19 02 F6 | 	mov	arg04, local04
24998     17 1B 02 F6 | 	mov	arg05, local05
2499c                 | ' draw(x1,y1,x2,y2,c)
2499c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
249a0     A7 F0 03 F6 | 	mov	ptra, fp
249a4     B2 00 A0 FD | 	call	#popregs_
249a8                 | _hg010b_spin2_frame_ret
249a8     2D 00 64 FD | 	ret
249ac                 | 
249ac                 | ' 
249ac                 | ' '-- A box (a filled rectangle) ----------------------------------------
249ac                 | ' 
249ac                 | ' pub box(x1,y1,x2,y2,c) |yy
249ac                 | _hg010b_spin2_box
249ac     06 4A 05 F6 | 	mov	COUNT_, #6
249b0     A8 00 A0 FD | 	call	#pushregs_
249b4     09 27 02 F6 | 	mov	local01, arg01
249b8     0A 29 02 F6 | 	mov	local02, arg02
249bc     0B 2B 02 F6 | 	mov	local03, arg03
249c0     0C 2D 02 F6 | 	mov	local04, arg04
249c4     0D 2F 02 F6 | 	mov	local05, arg05
249c8                 | ' 
249c8                 | ' repeat yy from y1 to y2
249c8     14 2D 52 F2 | 	cmps	local04, local02 wc
249cc     01 30 86 F6 | 	negc	local06, #1
249d0     18 2D 02 F1 | 	add	local04, local06
249d4                 | LR__2810
249d4                 | '   fastline(x1,x2,yy,c)
249d4     13 13 02 F6 | 	mov	arg01, local01
249d8     15 15 02 F6 | 	mov	arg02, local03
249dc     17 19 02 F6 | 	mov	arg04, local05
249e0     14 17 02 F6 | 	mov	arg03, local02
249e4     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
249e8     18 29 02 F1 | 	add	local02, local06
249ec     16 29 0A F2 | 	cmp	local02, local04 wz
249f0     E0 FF 9F 5D |  if_ne	jmp	#LR__2810
249f4     A7 F0 03 F6 | 	mov	ptra, fp
249f8     B2 00 A0 FD | 	call	#popregs_
249fc                 | _hg010b_spin2_box_ret
249fc     2D 00 64 FD | 	ret
24a00                 | 
24a00                 | '       
24a00                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
24a00                 | _hg010b_spin2_putcharxycgf
24a00                 | ' 
24a00                 | '  
24a00                 | ' repeat yy from 0 to 15
24a00     00 00 06 F6 | 	mov	_var01, #0
24a04     97 8C 48 FB | 	callpa	#(@LR__2822-@LR__2820)>>2,fcache_load_ptr_
24a08                 | LR__2820
24a08                 | ' 
24a08                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
24a08     95 E4 05 F1 | 	add	objptr, #149
24a0c     F2 02 02 FB | 	rdlong	_var02, objptr
24a10     0A 02 66 F0 | 	shl	_var02, #10
24a14     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
24a18     01 05 02 F1 | 	add	_var03, _var02
24a1c     0B 03 02 F6 | 	mov	_var02, arg03
24a20     04 02 66 F0 | 	shl	_var02, #4
24a24     01 05 02 F1 | 	add	_var03, _var02
24a28     00 05 02 F1 | 	add	_var03, _var01
24a2c     02 05 C2 FA | 	rdbyte	_var03, _var03
24a30                 | '   asm
24a30     00 04 0E F4 | 	testb	_var03, #0 wz
24a34     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
24a38     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
24a3c     01 04 0E F4 | 	testb	_var03, #1 wz
24a40     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
24a44     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
24a48     02 04 0E F4 | 	testb	_var03, #2 wz
24a4c     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
24a50     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
24a54     03 04 0E F4 | 	testb	_var03, #3 wz
24a58     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
24a5c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
24a60     04 04 0E F4 | 	testb	_var03, #4 wz
24a64     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
24a68     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
24a6c     05 04 0E F4 | 	testb	_var03, #5 wz
24a70     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
24a74     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
24a78     06 04 0E F4 | 	testb	_var03, #6 wz
24a7c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
24a80     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
24a84     07 04 0E F4 | 	testb	_var03, #7 wz
24a88     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
24a8c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
24a90                 | '   
24a90                 | '   ccc[0]:=c1
24a90     99 E5 05 F1 | 	add	objptr, #409
24a94     F2 06 62 FC | 	wrlong	_var04, objptr
24a98                 | '   ccc[1]:=c2 
24a98     04 E4 05 F1 | 	add	objptr, #4
24a9c     F2 08 62 FC | 	wrlong	_var05, objptr
24aa0                 | '   long[mailbox0][2]:=8
24aa0     49 E4 85 F1 | 	sub	objptr, #73
24aa4     F2 04 02 FB | 	rdlong	_var03, objptr
24aa8     08 04 06 F1 | 	add	_var03, #8
24aac     02 11 68 FC | 	wrlong	#8, _var03
24ab0                 | '   long[mailbox0][1]:=@ccc
24ab0     45 E4 05 F1 | 	add	objptr, #69
24ab4     F2 04 02 F6 | 	mov	_var03, objptr
24ab8     45 E4 85 F1 | 	sub	objptr, #69
24abc     F2 02 02 FB | 	rdlong	_var02, objptr
24ac0     04 02 06 F1 | 	add	_var02, #4
24ac4     01 05 62 FC | 	wrlong	_var03, _var02
24ac8                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
24ac8     0C E5 85 F1 | 	sub	objptr, #268
24acc     F2 04 02 FB | 	rdlong	_var03, objptr
24ad0     0A 03 02 F6 | 	mov	_var02, arg02
24ad4     00 03 02 F1 | 	add	_var02, _var01
24ad8     0A 02 66 F0 | 	shl	_var02, #10
24adc     09 0B 02 F6 | 	mov	_var06, arg01
24ae0     02 0A 66 F0 | 	shl	_var06, #2
24ae4     05 03 02 F1 | 	add	_var02, _var06
24ae8     01 05 02 F1 | 	add	_var03, _var02
24aec     00 00 78 FF 
24af0     00 04 06 F1 | 	add	_var03, ##-268435456
24af4     0C E5 05 F1 | 	add	objptr, #268
24af8     F2 0A 02 FB | 	rdlong	_var06, objptr
24afc     05 05 62 FC | 	wrlong	_var03, _var06
24b00                 | '   repeat
24b00                 | LR__2821
24b00     F2 04 02 FB | 	rdlong	_var03, objptr
24b04     02 03 02 FB | 	rdlong	_var02, _var03
24b08     00 02 56 F2 | 	cmps	_var02, #0 wc
24b0c     F0 FF 9F CD |  if_b	jmp	#LR__2821
24b10     E9 E5 85 F1 | 	sub	objptr, #489
24b14     01 00 06 F1 | 	add	_var01, #1
24b18     10 00 56 F2 | 	cmps	_var01, #16 wc
24b1c     E8 FE 9F CD |  if_b	jmp	#LR__2820
24b20                 | LR__2822
24b20                 | _hg010b_spin2_putcharxycgf_ret
24b20     2D 00 64 FD | 	ret
24b24                 | 
24b24                 | ' 
24b24                 | ' 
24b24                 | ' '**********************************************************************r***
24b24                 | ' '                                                                        *
24b24                 | ' ' Font related functions                                                 *
24b24                 | ' '                                                                        *
24b24                 | ' '*************************************************************************
24b24                 | ' 
24b24                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
24b24                 | ' 
24b24                 | ' pub setfontfamily(afontnum)
24b24                 | _hg010b_spin2_setfontfamily
24b24                 | ' 
24b24                 | ' font_family:=afontnum
24b24     95 E4 05 F1 | 	add	objptr, #149
24b28     F2 12 62 FC | 	wrlong	arg01, objptr
24b2c     95 E4 85 F1 | 	sub	objptr, #149
24b30                 | ' 'if afontnum==8
24b30                 | ' '  font_ptr:=@amiga_font
24b30                 | ' 
24b30                 | ' if afontnum==4
24b30     04 12 0E F2 | 	cmp	arg01, #4 wz
24b34                 | '   font_ptr:=@st_font
24b34     08 00 00 AF 
24b38     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
24b3c     08 E4 05 A1 |  if_e	add	objptr, #8
24b40     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
24b44     08 E4 85 A1 |  if_e	sub	objptr, #8
24b48     08 00 00 AF 
24b4c     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
24b50                 | ' if afontnum==0
24b50     00 12 0E F2 | 	cmp	arg01, #0 wz
24b54                 | '   font_ptr:=@vga_font
24b54     08 E4 05 A1 |  if_e	add	objptr, #8
24b58     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
24b5c     08 E4 85 A1 |  if_e	sub	objptr, #8
24b60                 | _hg010b_spin2_setfontfamily_ret
24b60     2D 00 64 FD | 	ret
24b64                 | 
24b64                 | ' 
24b64                 | ' '*************************************************************************
24b64                 | ' '                                                                        *
24b64                 | ' '  Cursor functions                                                      *
24b64                 | ' '                                                                        *
24b64                 | ' '*************************************************************************
24b64                 | ' 
24b64                 | ' 
24b64                 | ' pub setcursorpos(x,y)
24b64                 | _hg010b_spin2_setcursorpos
24b64                 | ' 
24b64                 | ' ''---------- Set the (x,y) position of cursor
24b64                 | ' 
24b64                 | ' cursor_x:=x
24b64     3C E4 05 F1 | 	add	objptr, #60
24b68     F2 12 52 FC | 	wrword	arg01, objptr
24b6c                 | ' cursor_y:=y
24b6c     02 E4 05 F1 | 	add	objptr, #2
24b70     F2 14 42 FC | 	wrbyte	arg02, objptr
24b74                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24b74     02 E4 85 F1 | 	sub	objptr, #2
24b78     F2 14 E2 FA | 	rdword	arg02, objptr
24b7c     02 14 66 F0 | 	shl	arg02, #2
24b80     02 E4 05 F1 | 	add	objptr, #2
24b84     F2 16 C2 FA | 	rdbyte	arg03, objptr
24b88     3E E4 85 F1 | 	sub	objptr, #62
24b8c     04 16 66 F0 | 	shl	arg03, #4
24b90     04 16 06 F1 | 	add	arg03, #4
24b94     11 12 06 F6 | 	mov	arg01, #17
24b98     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
24b9c                 | _hg010b_spin2_setcursorpos_ret
24b9c     2D 00 64 FD | 	ret
24ba0                 | 
24ba0                 | ' 
24ba0                 | ' pub setcursorx(x)
24ba0                 | _hg010b_spin2_setcursorx
24ba0                 | ' cursor_x:=x
24ba0     3C E4 05 F1 | 	add	objptr, #60
24ba4     F2 12 52 FC | 	wrword	arg01, objptr
24ba8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24ba8     F2 14 E2 FA | 	rdword	arg02, objptr
24bac     02 14 66 F0 | 	shl	arg02, #2
24bb0     02 E4 05 F1 | 	add	objptr, #2
24bb4     F2 16 C2 FA | 	rdbyte	arg03, objptr
24bb8     3E E4 85 F1 | 	sub	objptr, #62
24bbc     04 16 66 F0 | 	shl	arg03, #4
24bc0     04 16 06 F1 | 	add	arg03, #4
24bc4     11 12 06 F6 | 	mov	arg01, #17
24bc8     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
24bcc                 | _hg010b_spin2_setcursorx_ret
24bcc     2D 00 64 FD | 	ret
24bd0                 | 
24bd0                 | ' 
24bd0                 | ' pub setcursory(y) 
24bd0                 | _hg010b_spin2_setcursory
24bd0                 | ' cursor_y:=y
24bd0     3E E4 05 F1 | 	add	objptr, #62
24bd4     F2 12 42 FC | 	wrbyte	arg01, objptr
24bd8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
24bd8     02 E4 85 F1 | 	sub	objptr, #2
24bdc     F2 14 E2 FA | 	rdword	arg02, objptr
24be0     02 14 66 F0 | 	shl	arg02, #2
24be4     02 E4 05 F1 | 	add	objptr, #2
24be8     F2 16 C2 FA | 	rdbyte	arg03, objptr
24bec     3E E4 85 F1 | 	sub	objptr, #62
24bf0     04 16 66 F0 | 	shl	arg03, #4
24bf4     04 16 06 F1 | 	add	arg03, #4
24bf8     11 12 06 F6 | 	mov	arg01, #17
24bfc     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
24c00                 | _hg010b_spin2_setcursory_ret
24c00     2D 00 64 FD | 	ret
24c04                 | 
24c04                 | ' 
24c04                 | ' '*************************************************************************
24c04                 | ' '                                                                        *
24c04                 | ' '  VBlank functions                                                      *
24c04                 | ' '                                                                        *
24c04                 | ' '*************************************************************************
24c04                 | ' 
24c04                 | ' pub waitvbl(amount) | i
24c04                 | _hg010b_spin2_waitvbl
24c04     03 4A 05 F6 | 	mov	COUNT_, #3
24c08     A8 00 A0 FD | 	call	#pushregs_
24c0c     09 27 02 F6 | 	mov	local01, arg01
24c10                 | ' 
24c10                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
24c10                 | ' 
24c10                 | ' repeat i from 1 to amount
24c10     01 28 06 F6 | 	mov	local02, #1
24c14     01 26 56 F2 | 	cmps	local01, #1 wc
24c18     01 2A 86 F6 | 	negc	local03, #1
24c1c     15 27 02 F1 | 	add	local01, local03
24c20                 | LR__2830
24c20                 | '   repeat until vblank==0
24c20                 | LR__2831
24c20     49 E4 05 F1 | 	add	objptr, #73
24c24     F2 12 0A FB | 	rdlong	arg01, objptr wz
24c28     49 E4 85 F1 | 	sub	objptr, #73
24c2c     0C 00 90 AD |  if_e	jmp	#LR__2832
24c30                 | '     waitus(100)
24c30     64 12 06 F6 | 	mov	arg01, #100
24c34     20 20 B0 FD | 	call	#__system___waitus
24c38     E4 FF 9F FD | 	jmp	#LR__2831
24c3c                 | LR__2832
24c3c                 | '   repeat until vblank==1
24c3c                 | LR__2833
24c3c     49 E4 05 F1 | 	add	objptr, #73
24c40     F2 12 02 FB | 	rdlong	arg01, objptr
24c44     49 E4 85 F1 | 	sub	objptr, #73
24c48     01 12 0E F2 | 	cmp	arg01, #1 wz
24c4c     0C 00 90 AD |  if_e	jmp	#LR__2834
24c50                 | '     waitus(100)
24c50     64 12 06 F6 | 	mov	arg01, #100
24c54     00 20 B0 FD | 	call	#__system___waitus
24c58     E0 FF 9F FD | 	jmp	#LR__2833
24c5c                 | LR__2834
24c5c     15 29 02 F1 | 	add	local02, local03
24c60     13 29 0A F2 | 	cmp	local02, local01 wz
24c64     B8 FF 9F 5D |  if_ne	jmp	#LR__2830
24c68     A7 F0 03 F6 | 	mov	ptra, fp
24c6c     B2 00 A0 FD | 	call	#popregs_
24c70                 | _hg010b_spin2_waitvbl_ret
24c70     2D 00 64 FD | 	ret
24c74                 | 
24c74                 | ' 
24c74                 | ' 
24c74                 | ' pub cls(fc,bc)   :c,i
24c74                 | _hg010b_spin2_cls
24c74     02 4A 05 F6 | 	mov	COUNT_, #2
24c78     A8 00 A0 FD | 	call	#pushregs_
24c7c     09 27 02 F6 | 	mov	local01, arg01
24c80     0A 29 02 F6 | 	mov	local02, arg02
24c84                 | ' 
24c84                 | ' c:=bc
24c84                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
24c84     DD E4 05 F1 | 	add	objptr, #221
24c88     F2 12 02 FB | 	rdlong	arg01, objptr
24c8c     A5 E4 85 F1 | 	sub	objptr, #165
24c90     F2 16 02 FB | 	rdlong	arg03, objptr
24c94     02 16 66 F0 | 	shl	arg03, #2
24c98     14 15 02 F6 | 	mov	arg02, local02
24c9c     00 18 06 F6 | 	mov	arg04, #0
24ca0     01 1A 06 F6 | 	mov	arg05, #1
24ca4     0B 00 00 FF 
24ca8     94 E4 05 F1 | 	add	objptr, ##5780
24cac     F8 10 B0 FD | 	call	#_psram_spin2_fill
24cb0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
24cb0     0B 00 00 FF 
24cb4     C8 E4 85 F1 | 	sub	objptr, ##5832
24cb8     F2 12 02 FB | 	rdlong	arg01, objptr
24cbc     04 E4 85 F1 | 	sub	objptr, #4
24cc0     F2 16 02 FB | 	rdlong	arg03, objptr
24cc4     09 17 82 F1 | 	sub	arg03, arg01
24cc8     20 14 06 F6 | 	mov	arg02, #32
24ccc     00 18 06 F6 | 	mov	arg04, #0
24cd0     01 1A 06 F6 | 	mov	arg05, #1
24cd4     0B 00 00 FF 
24cd8     CC E4 05 F1 | 	add	objptr, ##5836
24cdc     C8 10 B0 FD | 	call	#_psram_spin2_fill
24ce0                 | ' setwritecolors(fc,bc)
24ce0                 | ' 
24ce0                 | ' write_color:=ff
24ce0     0B 00 00 FF 
24ce4     8B E4 85 F1 | 	sub	objptr, ##5771
24ce8     F2 26 62 FC | 	wrlong	local01, objptr
24cec                 | ' write_background:=bb
24cec     04 E4 05 F1 | 	add	objptr, #4
24cf0     F2 28 62 FC | 	wrlong	local02, objptr
24cf4                 | ' cursor_x:=0
24cf4     09 E4 85 F1 | 	sub	objptr, #9
24cf8     F2 00 58 FC | 	wrword	#0, objptr
24cfc                 | ' cursor_y:=0
24cfc     02 E4 05 F1 | 	add	objptr, #2
24d00     F2 00 48 FC | 	wrbyte	#0, objptr
24d04                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24d04     02 E4 85 F1 | 	sub	objptr, #2
24d08     F2 14 E2 FA | 	rdword	arg02, objptr
24d0c     02 14 66 F0 | 	shl	arg02, #2
24d10     02 E4 05 F1 | 	add	objptr, #2
24d14     F2 16 C2 FA | 	rdbyte	arg03, objptr
24d18     3E E4 85 F1 | 	sub	objptr, #62
24d1c     04 16 66 F0 | 	shl	arg03, #4
24d20     04 16 06 F1 | 	add	arg03, #4
24d24     11 12 06 F6 | 	mov	arg01, #17
24d28     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
24d2c                 | ' setcursorcolor(fc)
24d2c     13 13 02 F6 | 	mov	arg01, local01
24d30     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
24d34     14 FB 01 F6 | 	mov	result1, local02
24d38     00 FC 05 F6 | 	mov	result2, #0
24d3c     A7 F0 03 F6 | 	mov	ptra, fp
24d40     B2 00 A0 FD | 	call	#popregs_
24d44                 | _hg010b_spin2_cls_ret
24d44     2D 00 64 FD | 	ret
24d48                 | 
24d48                 | ' 
24d48                 | ' ''---------- Output a char at the cursor position, move the cursor 
24d48                 | ' 
24d48                 | ' pub putchar(achar) | c,x,y,l,newcpl
24d48                 | _hg010b_spin2_putchar
24d48     02 4A 05 F6 | 	mov	COUNT_, #2
24d4c     A8 00 A0 FD | 	call	#pushregs_
24d50     09 27 02 F6 | 	mov	local01, arg01
24d54                 | ' 
24d54                 | ' if achar==10
24d54     0A 26 0E F2 | 	cmp	local01, #10 wz
24d58                 | '   crlf()
24d58     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
24d5c                 | ' if achar==9
24d5c     09 26 0E F2 | 	cmp	local01, #9 wz
24d60     18 00 90 5D |  if_ne	jmp	#LR__2840
24d64                 | '   cursor_x:=(cursor_x& %11110000)+16
24d64     3C E4 05 F1 | 	add	objptr, #60
24d68     F2 16 E2 FA | 	rdword	arg03, objptr
24d6c     F0 16 06 F5 | 	and	arg03, #240
24d70     10 16 06 F1 | 	add	arg03, #16
24d74     F2 16 52 FC | 	wrword	arg03, objptr
24d78     3C E4 85 F1 | 	sub	objptr, #60
24d7c                 | LR__2840
24d7c                 | '   
24d7c                 | ' if (achar<>9) && (achar<>10) 
24d7c     09 26 0E F2 | 	cmp	local01, #9 wz
24d80     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
24d84     A8 00 90 AD |  if_e	jmp	#LR__2841
24d88                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24d88     3C E4 05 F1 | 	add	objptr, #60
24d8c     F2 12 E2 FA | 	rdword	arg01, objptr
24d90     02 E4 05 F1 | 	add	objptr, #2
24d94     F2 14 C2 FA | 	rdbyte	arg02, objptr
24d98     04 14 66 F0 | 	shl	arg02, #4
24d9c     04 14 06 F1 | 	add	arg02, #4
24da0     03 E4 05 F1 | 	add	objptr, #3
24da4     F2 18 02 FB | 	rdlong	arg04, objptr
24da8     04 E4 05 F1 | 	add	objptr, #4
24dac     F2 1A 02 FB | 	rdlong	arg05, objptr
24db0     45 E4 85 F1 | 	sub	objptr, #69
24db4     13 17 02 F6 | 	mov	arg03, local01
24db8     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
24dbc     04 E4 05 F1 | 	add	objptr, #4
24dc0     F2 12 02 FB | 	rdlong	arg01, objptr
24dc4     10 00 00 FF 
24dc8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24dcc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24dd0     3A E4 05 F1 | 	add	objptr, #58
24dd4     F2 1A C2 FA | 	rdbyte	arg05, objptr
24dd8     0D 17 02 FD | 	qmul	arg03, arg05
24ddc                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24ddc     10 00 00 FF 
24de0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24de4     02 E4 85 F1 | 	sub	objptr, #2
24de8     F2 28 E2 FA | 	rdword	local02, objptr
24dec     01 28 46 F0 | 	shr	local02, #1
24df0     13 15 02 F6 | 	mov	arg02, local01
24df4     01 16 06 F6 | 	mov	arg03, #1
24df8     00 18 06 F6 | 	mov	arg04, #0
24dfc     01 1A 06 F6 | 	mov	arg05, #1
24e00     0B 00 00 FF 
24e04     90 E4 05 F1 | 	add	objptr, ##5776
24e08     18 26 62 FD | 	getqx	local01
24e0c     14 27 02 F1 | 	add	local01, local02
24e10     13 13 02 F1 | 	add	arg01, local01
24e14     90 0F B0 FD | 	call	#_psram_spin2_fill
24e18                 | '   cursor_x+=2
24e18     0B 00 00 FF 
24e1c     90 E4 85 F1 | 	sub	objptr, ##5776
24e20     F2 28 E2 FA | 	rdword	local02, objptr
24e24     02 28 06 F1 | 	add	local02, #2
24e28     F2 28 52 FC | 	wrword	local02, objptr
24e2c     3C E4 85 F1 | 	sub	objptr, #60
24e30                 | LR__2841
24e30                 | ' 
24e30                 | ' if cursor_x>=256
24e30     3C E4 05 F1 | 	add	objptr, #60
24e34     F2 28 E2 FA | 	rdword	local02, objptr
24e38     3C E4 85 F1 | 	sub	objptr, #60
24e3c     00 29 56 F2 | 	cmps	local02, #256 wc
24e40     64 00 90 CD |  if_b	jmp	#LR__2843
24e44                 | '   cursor_x:=0
24e44     3C E4 05 F1 | 	add	objptr, #60
24e48     F2 00 58 FC | 	wrword	#0, objptr
24e4c                 | '   cursor_y+=1
24e4c     02 E4 05 F1 | 	add	objptr, #2
24e50     F2 28 C2 FA | 	rdbyte	local02, objptr
24e54     01 28 06 F1 | 	add	local02, #1
24e58     F2 28 42 FC | 	wrbyte	local02, objptr
24e5c                 | '   if cursor_y>st_lines-1
24e5c     C3 E4 05 F1 | 	add	objptr, #195
24e60     F2 28 02 FB | 	rdlong	local02, objptr
24e64     01 28 86 F1 | 	sub	local02, #1
24e68     C3 E4 85 F1 | 	sub	objptr, #195
24e6c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24e70     3E E4 85 F1 | 	sub	objptr, #62
24e74     14 17 5A F2 | 	cmps	arg03, local02 wcz
24e78     2C 00 90 ED |  if_be	jmp	#LR__2842
24e7c                 | '     scrollup2()
24e7c     00 12 06 F6 | 	mov	arg01, #0
24e80     01 00 00 FF 
24e84     58 14 06 F6 | 	mov	arg02, ##600
24e88     10 16 06 F6 | 	mov	arg03, #16
24e8c     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
24e90                 | '     cursor_y:=st_lines-1
24e90     01 E5 05 F1 | 	add	objptr, #257
24e94     F2 28 02 FB | 	rdlong	local02, objptr
24e98     01 28 86 F1 | 	sub	local02, #1
24e9c     C3 E4 85 F1 | 	sub	objptr, #195
24ea0     F2 28 42 FC | 	wrbyte	local02, objptr
24ea4     3E E4 85 F1 | 	sub	objptr, #62
24ea8                 | LR__2842
24ea8                 | LR__2843
24ea8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24ea8     3C E4 05 F1 | 	add	objptr, #60
24eac     F2 14 E2 FA | 	rdword	arg02, objptr
24eb0     02 14 66 F0 | 	shl	arg02, #2
24eb4     02 E4 05 F1 | 	add	objptr, #2
24eb8     F2 16 C2 FA | 	rdbyte	arg03, objptr
24ebc     3E E4 85 F1 | 	sub	objptr, #62
24ec0     04 16 66 F0 | 	shl	arg03, #4
24ec4     04 16 06 F1 | 	add	arg03, #4
24ec8     11 12 06 F6 | 	mov	arg01, #17
24ecc     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
24ed0     A7 F0 03 F6 | 	mov	ptra, fp
24ed4     B2 00 A0 FD | 	call	#popregs_
24ed8                 | _hg010b_spin2_putchar_ret
24ed8     2D 00 64 FD | 	ret
24edc                 | 
24edc                 | '     
24edc                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
24edc                 | ' 
24edc                 | ' pub putchar2(achar) | c,x,y,l,newcpl
24edc                 | _hg010b_spin2_putchar2
24edc     02 4A 05 F6 | 	mov	COUNT_, #2
24ee0     A8 00 A0 FD | 	call	#pushregs_
24ee4     09 27 02 F6 | 	mov	local01, arg01
24ee8                 | ' 
24ee8                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24ee8     3C E4 05 F1 | 	add	objptr, #60
24eec     F2 12 E2 FA | 	rdword	arg01, objptr
24ef0     02 E4 05 F1 | 	add	objptr, #2
24ef4     F2 14 C2 FA | 	rdbyte	arg02, objptr
24ef8     04 14 66 F0 | 	shl	arg02, #4
24efc     04 14 06 F1 | 	add	arg02, #4
24f00     03 E4 05 F1 | 	add	objptr, #3
24f04     F2 18 02 FB | 	rdlong	arg04, objptr
24f08     04 E4 05 F1 | 	add	objptr, #4
24f0c     F2 1A 02 FB | 	rdlong	arg05, objptr
24f10     45 E4 85 F1 | 	sub	objptr, #69
24f14     13 17 02 F6 | 	mov	arg03, local01
24f18     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
24f1c     04 E4 05 F1 | 	add	objptr, #4
24f20     F2 12 02 FB | 	rdlong	arg01, objptr
24f24     10 00 00 FF 
24f28     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24f2c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24f30     3A E4 05 F1 | 	add	objptr, #58
24f34     F2 1A C2 FA | 	rdbyte	arg05, objptr
24f38     0D 17 02 FD | 	qmul	arg03, arg05
24f3c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24f3c     10 00 00 FF 
24f40     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24f44     02 E4 85 F1 | 	sub	objptr, #2
24f48     F2 28 E2 FA | 	rdword	local02, objptr
24f4c     01 28 46 F0 | 	shr	local02, #1
24f50     13 15 02 F6 | 	mov	arg02, local01
24f54     01 16 06 F6 | 	mov	arg03, #1
24f58     00 18 06 F6 | 	mov	arg04, #0
24f5c     01 1A 06 F6 | 	mov	arg05, #1
24f60     0B 00 00 FF 
24f64     90 E4 05 F1 | 	add	objptr, ##5776
24f68     18 26 62 FD | 	getqx	local01
24f6c     14 27 02 F1 | 	add	local01, local02
24f70     13 13 02 F1 | 	add	arg01, local01
24f74     30 0E B0 FD | 	call	#_psram_spin2_fill
24f78                 | ' 
24f78                 | ' cursor_x+=2
24f78     0B 00 00 FF 
24f7c     90 E4 85 F1 | 	sub	objptr, ##5776
24f80     F2 28 E2 FA | 	rdword	local02, objptr
24f84     02 28 06 F1 | 	add	local02, #2
24f88     F2 28 52 FC | 	wrword	local02, objptr
24f8c                 | ' if cursor_x>=256
24f8c     F2 28 E2 FA | 	rdword	local02, objptr
24f90     3C E4 85 F1 | 	sub	objptr, #60
24f94     00 29 56 F2 | 	cmps	local02, #256 wc
24f98     64 00 90 CD |  if_b	jmp	#LR__2851
24f9c                 | '   cursor_x:=0
24f9c     3C E4 05 F1 | 	add	objptr, #60
24fa0     F2 00 58 FC | 	wrword	#0, objptr
24fa4                 | '   cursor_y+=1
24fa4     02 E4 05 F1 | 	add	objptr, #2
24fa8     F2 28 C2 FA | 	rdbyte	local02, objptr
24fac     01 28 06 F1 | 	add	local02, #1
24fb0     F2 28 42 FC | 	wrbyte	local02, objptr
24fb4                 | '   if cursor_y>st_lines-1
24fb4     C3 E4 05 F1 | 	add	objptr, #195
24fb8     F2 28 02 FB | 	rdlong	local02, objptr
24fbc     01 28 86 F1 | 	sub	local02, #1
24fc0     C3 E4 85 F1 | 	sub	objptr, #195
24fc4     F2 16 C2 FA | 	rdbyte	arg03, objptr
24fc8     3E E4 85 F1 | 	sub	objptr, #62
24fcc     14 17 5A F2 | 	cmps	arg03, local02 wcz
24fd0     2C 00 90 ED |  if_be	jmp	#LR__2850
24fd4                 | '     scrollup2()
24fd4     00 12 06 F6 | 	mov	arg01, #0
24fd8     01 00 00 FF 
24fdc     58 14 06 F6 | 	mov	arg02, ##600
24fe0     10 16 06 F6 | 	mov	arg03, #16
24fe4     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
24fe8                 | '     cursor_y:=st_lines-1
24fe8     01 E5 05 F1 | 	add	objptr, #257
24fec     F2 28 02 FB | 	rdlong	local02, objptr
24ff0     01 28 86 F1 | 	sub	local02, #1
24ff4     C3 E4 85 F1 | 	sub	objptr, #195
24ff8     F2 28 42 FC | 	wrbyte	local02, objptr
24ffc     3E E4 85 F1 | 	sub	objptr, #62
25000                 | LR__2850
25000                 | LR__2851
25000                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
25000     3C E4 05 F1 | 	add	objptr, #60
25004     F2 14 E2 FA | 	rdword	arg02, objptr
25008     02 14 66 F0 | 	shl	arg02, #2
2500c     02 E4 05 F1 | 	add	objptr, #2
25010     F2 16 C2 FA | 	rdbyte	arg03, objptr
25014     3E E4 85 F1 | 	sub	objptr, #62
25018     04 16 66 F0 | 	shl	arg03, #4
2501c     04 16 06 F1 | 	add	arg03, #4
25020     11 12 06 F6 | 	mov	arg01, #17
25024     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
25028     A7 F0 03 F6 | 	mov	ptra, fp
2502c     B2 00 A0 FD | 	call	#popregs_
25030                 | _hg010b_spin2_putchar2_ret
25030     2D 00 64 FD | 	ret
25034                 | 
25034                 | ' ''--------- Output a string at the cursor position, move the cursor  
25034                 | ' 
25034                 | ' pub write(text) | iii,c,ncx,ncy
25034                 | _hg010b_spin2_write
25034     04 4A 05 F6 | 	mov	COUNT_, #4
25038     A8 00 A0 FD | 	call	#pushregs_
2503c     09 27 02 F6 | 	mov	local01, arg01
25040                 | ' 
25040                 | ' repeat iii from 0 to strsize(text)-1
25040     00 28 06 F6 | 	mov	local02, #0
25044     13 13 02 F6 | 	mov	arg01, local01
25048     09 2B 02 F6 | 	mov	local03, arg01
2504c     97 06 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
25050                 | LR__2860
25050     15 FB C9 FA | 	rdbyte	result1, local03 wz
25054     01 2A 06 51 |  if_ne	add	local03, #1
25058     F4 FF 9F 5D |  if_ne	jmp	#LR__2860
2505c                 | LR__2861
2505c     09 2B 82 F1 | 	sub	local03, arg01
25060     01 2A 86 F1 | 	sub	local03, #1
25064     00 2A 56 F2 | 	cmps	local03, #0 wc
25068     01 2C 86 F6 | 	negc	local04, #1
2506c     16 2B 02 F1 | 	add	local03, local04
25070                 | LR__2862
25070                 | '   putchar2(byte[text+iii])
25070     13 13 02 F6 | 	mov	arg01, local01
25074     14 13 02 F1 | 	add	arg01, local02
25078     09 13 C2 FA | 	rdbyte	arg01, arg01
2507c     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
25080     16 29 02 F1 | 	add	local02, local04
25084     15 29 0A F2 | 	cmp	local02, local03 wz
25088     E4 FF 9F 5D |  if_ne	jmp	#LR__2862
2508c     A7 F0 03 F6 | 	mov	ptra, fp
25090     B2 00 A0 FD | 	call	#popregs_
25094                 | _hg010b_spin2_write_ret
25094     2D 00 64 FD | 	ret
25098                 | 
25098                 | '    
25098                 | ' ' a version for text scrolling in Basic shifted 4 lines down
25098                 | ' 
25098                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
25098                 | _hg010b_spin2_scrollup2
25098     03 4A 05 F6 | 	mov	COUNT_, #3
2509c     A8 00 A0 FD | 	call	#pushregs_
250a0                 | ' 	
250a0                 | ' repeat i from 4 to 579 
250a0     04 26 06 F6 | 	mov	local01, #4
250a4                 | LR__2870
250a4     F9 E4 05 F1 | 	add	objptr, #249
250a8     F2 1A 02 FB | 	rdlong	arg05, objptr
250ac     1C E4 85 F1 | 	sub	objptr, #28
250b0     F2 14 02 FB | 	rdlong	arg02, objptr
250b4     13 19 02 F6 | 	mov	arg04, local01
250b8     10 18 06 F1 | 	add	arg04, #16
250bc     02 18 66 F0 | 	shl	arg04, #2
250c0     14 E4 05 F1 | 	add	objptr, #20
250c4     F2 16 02 FB | 	rdlong	arg03, objptr
250c8     0B 19 02 FD | 	qmul	arg04, arg03
250cc                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
250cc     F6 03 00 FF 
250d0     00 12 06 F6 | 	mov	arg01, ##519168
250d4     0D 13 82 F1 | 	sub	arg01, arg05
250d8     02 16 66 F0 | 	shl	arg03, #2
250dc     0A 00 00 FF 
250e0     DB E5 05 F1 | 	add	objptr, ##5595
250e4     18 1A 62 FD | 	getqx	arg05
250e8     0D 15 02 F1 | 	add	arg02, arg05
250ec     80 0B B0 FD | 	call	#_psram_spin2_read1
250f0     0A 00 00 FF 
250f4     D3 E5 85 F1 | 	sub	objptr, ##5587
250f8     F2 1A 02 FB | 	rdlong	arg05, objptr
250fc     1C E4 85 F1 | 	sub	objptr, #28
25100     F2 14 02 FB | 	rdlong	arg02, objptr
25104     13 19 02 F6 | 	mov	arg04, local01
25108     02 18 66 F0 | 	shl	arg04, #2
2510c     14 E4 05 F1 | 	add	objptr, #20
25110     F2 16 02 FB | 	rdlong	arg03, objptr
25114     0B 19 02 FD | 	qmul	arg04, arg03
25118                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25118     F6 03 00 FF 
2511c     00 12 06 F6 | 	mov	arg01, ##519168
25120     0D 13 82 F1 | 	sub	arg01, arg05
25124     02 16 66 F0 | 	shl	arg03, #2
25128     0A 00 00 FF 
2512c     DB E5 05 F1 | 	add	objptr, ##5595
25130     18 1A 62 FD | 	getqx	arg05
25134     0D 15 02 F1 | 	add	arg02, arg05
25138     D0 0B B0 FD | 	call	#_psram_spin2_write
2513c     0B 00 00 FF 
25140     CC E4 85 F1 | 	sub	objptr, ##5836
25144     01 26 06 F1 | 	add	local01, #1
25148     01 00 00 FF 
2514c     44 26 16 F2 | 	cmp	local01, ##580 wc
25150     50 FF 9F CD |  if_b	jmp	#LR__2870
25154                 | ' 
25154                 | ' repeat i from 580 to 599
25154     01 00 00 FF 
25158     44 26 06 F6 | 	mov	local01, ##580
2515c                 | LR__2871
2515c                 | '    fastline(0,1023,i,write_background)   
2515c     45 E4 05 F1 | 	add	objptr, #69
25160     F2 18 02 FB | 	rdlong	arg04, objptr
25164     45 E4 85 F1 | 	sub	objptr, #69
25168     00 12 06 F6 | 	mov	arg01, #0
2516c     09 14 CE F9 | 	bmask	arg02, #9
25170     13 17 02 F6 | 	mov	arg03, local01
25174     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
25178     01 26 06 F1 | 	add	local01, #1
2517c     01 00 00 FF 
25180     58 26 16 F2 | 	cmp	local01, ##600 wc
25184     D4 FF 9F CD |  if_b	jmp	#LR__2871
25188                 | ' repeat i from 0 to 3
25188     00 26 06 F6 | 	mov	local01, #0
2518c                 | LR__2872
2518c                 | '    fastline(0,1023,i,write_background)      
2518c     45 E4 05 F1 | 	add	objptr, #69
25190     F2 18 02 FB | 	rdlong	arg04, objptr
25194     45 E4 85 F1 | 	sub	objptr, #69
25198     00 12 06 F6 | 	mov	arg01, #0
2519c     09 14 CE F9 | 	bmask	arg02, #9
251a0     13 17 02 F6 | 	mov	arg03, local01
251a4     90 EF BF FD | 	call	#_hg010b_spin2_fastline
251a8     01 26 06 F1 | 	add	local01, #1
251ac     04 26 56 F2 | 	cmps	local01, #4 wc
251b0     D8 FF 9F CD |  if_b	jmp	#LR__2872
251b4                 | ' 
251b4                 | ' repeat i from 0 to 35
251b4     00 26 06 F6 | 	mov	local01, #0
251b8                 | LR__2873
251b8     13 1B 02 F6 | 	mov	arg05, local01
251bc     01 1A 06 F1 | 	add	arg05, #1
251c0     10 00 00 FF 
251c4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
251c8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
251cc     0B 1B 02 FD | 	qmul	arg05, arg03
251d0                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
251d0     F6 03 00 FF 
251d4     00 12 06 F6 | 	mov	arg01, ##519168
251d8     F9 E4 05 F1 | 	add	objptr, #249
251dc     F2 1A 02 FB | 	rdlong	arg05, objptr
251e0     0D 13 82 F1 | 	sub	arg01, arg05
251e4     F5 E4 85 F1 | 	sub	objptr, #245
251e8     F2 14 02 FB | 	rdlong	arg02, objptr
251ec     10 00 00 FF 
251f0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
251f4     0B 00 00 FF 
251f8     C8 E4 05 F1 | 	add	objptr, ##5832
251fc     18 1A 62 FD | 	getqx	arg05
25200     0D 15 02 F1 | 	add	arg02, arg05
25204     68 0A B0 FD | 	call	#_psram_spin2_read1
25208     10 00 00 FF 
2520c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25210     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25214     0B 27 02 FD | 	qmul	local01, arg03
25218                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
25218     F6 03 00 FF 
2521c     00 12 06 F6 | 	mov	arg01, ##519168
25220     0A 00 00 FF 
25224     D3 E5 85 F1 | 	sub	objptr, ##5587
25228     F2 1A 02 FB | 	rdlong	arg05, objptr
2522c     0D 13 82 F1 | 	sub	arg01, arg05
25230     F5 E4 85 F1 | 	sub	objptr, #245
25234     F2 14 02 FB | 	rdlong	arg02, objptr
25238     10 00 00 FF 
2523c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
25240     0B 00 00 FF 
25244     C8 E4 05 F1 | 	add	objptr, ##5832
25248     18 1A 62 FD | 	getqx	arg05
2524c     0D 15 02 F1 | 	add	arg02, arg05
25250     B8 0A B0 FD | 	call	#_psram_spin2_write
25254     0B 00 00 FF 
25258     CC E4 85 F1 | 	sub	objptr, ##5836
2525c     01 26 06 F1 | 	add	local01, #1
25260     24 26 56 F2 | 	cmps	local01, #36 wc
25264     50 FF 9F CD |  if_b	jmp	#LR__2873
25268                 | ' repeat i from 0 to timings[7]-1
25268     00 26 06 F6 | 	mov	local01, #0
2526c     10 00 00 FF 
25270     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25274     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
25278     10 00 00 FF 
2527c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
25280     01 28 86 F1 | 	sub	local02, #1
25284     00 28 56 F2 | 	cmps	local02, #0 wc
25288     01 2A 86 F6 | 	negc	local03, #1
2528c     15 29 02 F1 | 	add	local02, local03
25290                 | LR__2874
25290                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
25290     04 E4 05 F1 | 	add	objptr, #4
25294     F2 12 02 FB | 	rdlong	arg01, objptr
25298     10 00 00 FF 
2529c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
252a0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
252a4     10 00 00 FF 
252a8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
252ac     0D 19 02 F6 | 	mov	arg04, arg05
252b0     03 18 66 F0 | 	shl	arg04, #3
252b4     0D 19 02 F1 | 	add	arg04, arg05
252b8     02 18 66 F0 | 	shl	arg04, #2
252bc     13 19 02 F1 | 	add	arg04, local01
252c0     0C 13 02 F1 | 	add	arg01, arg04
252c4     20 14 06 F6 | 	mov	arg02, #32
252c8     01 16 06 F6 | 	mov	arg03, #1
252cc     00 18 06 F6 | 	mov	arg04, #0
252d0     01 1A 06 F6 | 	mov	arg05, #1
252d4     0B 00 00 FF 
252d8     C8 E4 05 F1 | 	add	objptr, ##5832
252dc     C8 0A B0 FD | 	call	#_psram_spin2_fill
252e0     0B 00 00 FF 
252e4     CC E4 85 F1 | 	sub	objptr, ##5836
252e8     15 27 02 F1 | 	add	local01, local03
252ec     14 27 0A F2 | 	cmp	local01, local02 wz
252f0     9C FF 9F 5D |  if_ne	jmp	#LR__2874
252f4     A7 F0 03 F6 | 	mov	ptra, fp
252f8     B2 00 A0 FD | 	call	#popregs_
252fc                 | _hg010b_spin2_scrollup2_ret
252fc     2D 00 64 FD | 	ret
25300                 | 
25300                 | '  
25300                 | ' ''----------- Scroll the screen one line down 
25300                 | ' 
25300                 | ' pub scrolldown(start=0) | i
25300                 | _hg010b_spin2_scrolldown
25300     05 4A 05 F6 | 	mov	COUNT_, #5
25304     A8 00 A0 FD | 	call	#pushregs_
25308     09 27 02 F6 | 	mov	local01, arg01
2530c                 | ' 
2530c                 | ' repeat i from 579 to (start*16)+4
2530c     01 00 00 FF 
25310     43 28 06 F6 | 	mov	local02, ##579
25314     13 2B 02 F6 | 	mov	local03, local01
25318     04 2A 66 F0 | 	shl	local03, #4
2531c     04 2A 06 F1 | 	add	local03, #4
25320     01 00 00 FF 
25324     43 2A 56 F2 | 	cmps	local03, ##579 wc
25328     01 2C 86 F6 | 	negc	local04, #1
2532c     16 2F 02 F6 | 	mov	local05, local04
25330     16 2B 02 F1 | 	add	local03, local04
25334                 | LR__2880
25334     F9 E4 05 F1 | 	add	objptr, #249
25338     F2 2C 02 FB | 	rdlong	local04, objptr
2533c     1C E4 85 F1 | 	sub	objptr, #28
25340     F2 14 02 FB | 	rdlong	arg02, objptr
25344     14 1B 02 F6 | 	mov	arg05, local02
25348     02 1A 66 F0 | 	shl	arg05, #2
2534c     14 E4 05 F1 | 	add	objptr, #20
25350     F2 16 02 FB | 	rdlong	arg03, objptr
25354     0B 1B 02 FD | 	qmul	arg05, arg03
25358                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25358     F6 03 00 FF 
2535c     00 12 06 F6 | 	mov	arg01, ##519168
25360     16 13 82 F1 | 	sub	arg01, local04
25364     02 16 66 F0 | 	shl	arg03, #2
25368     0A 00 00 FF 
2536c     DB E5 05 F1 | 	add	objptr, ##5595
25370     18 2C 62 FD | 	getqx	local04
25374     16 15 02 F1 | 	add	arg02, local04
25378     F4 08 B0 FD | 	call	#_psram_spin2_read1
2537c     0A 00 00 FF 
25380     D3 E5 85 F1 | 	sub	objptr, ##5587
25384     F2 2C 02 FB | 	rdlong	local04, objptr
25388     1C E4 85 F1 | 	sub	objptr, #28
2538c     F2 14 02 FB | 	rdlong	arg02, objptr
25390     14 1B 02 F6 | 	mov	arg05, local02
25394     10 1A 06 F1 | 	add	arg05, #16
25398     02 1A 66 F0 | 	shl	arg05, #2
2539c     14 E4 05 F1 | 	add	objptr, #20
253a0     F2 16 02 FB | 	rdlong	arg03, objptr
253a4     0B 1B 02 FD | 	qmul	arg05, arg03
253a8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
253a8     F6 03 00 FF 
253ac     00 12 06 F6 | 	mov	arg01, ##519168
253b0     16 13 82 F1 | 	sub	arg01, local04
253b4     02 16 66 F0 | 	shl	arg03, #2
253b8     0A 00 00 FF 
253bc     DB E5 05 F1 | 	add	objptr, ##5595
253c0     18 2C 62 FD | 	getqx	local04
253c4     16 15 02 F1 | 	add	arg02, local04
253c8     40 09 B0 FD | 	call	#_psram_spin2_write
253cc     0B 00 00 FF 
253d0     CC E4 85 F1 | 	sub	objptr, ##5836
253d4     17 29 02 F1 | 	add	local02, local05
253d8     15 29 0A F2 | 	cmp	local02, local03 wz
253dc     54 FF 9F 5D |  if_ne	jmp	#LR__2880
253e0                 | ' 
253e0                 | ' repeat i from (start*16)+4 to (start*16)+19
253e0     13 29 02 F6 | 	mov	local02, local01
253e4     04 28 66 F0 | 	shl	local02, #4
253e8     04 28 06 F1 | 	add	local02, #4
253ec     13 2F 02 F6 | 	mov	local05, local01
253f0     04 2E 66 F0 | 	shl	local05, #4
253f4     13 2E 06 F1 | 	add	local05, #19
253f8     13 2D 02 F6 | 	mov	local04, local01
253fc     04 2C 66 F0 | 	shl	local04, #4
25400     04 2C 06 F1 | 	add	local04, #4
25404     16 2F 52 F2 | 	cmps	local05, local04 wc
25408     01 2C 86 F6 | 	negc	local04, #1
2540c     16 2B 02 F6 | 	mov	local03, local04
25410     16 2F 02 F1 | 	add	local05, local04
25414                 | LR__2881
25414                 | '    fastline(0,1023,i,write_background)    
25414     45 E4 05 F1 | 	add	objptr, #69
25418     F2 18 02 FB | 	rdlong	arg04, objptr
2541c     45 E4 85 F1 | 	sub	objptr, #69
25420     00 12 06 F6 | 	mov	arg01, #0
25424     09 14 CE F9 | 	bmask	arg02, #9
25428     14 17 02 F6 | 	mov	arg03, local02
2542c     08 ED BF FD | 	call	#_hg010b_spin2_fastline
25430     15 29 02 F1 | 	add	local02, local03
25434     17 29 0A F2 | 	cmp	local02, local05 wz
25438     D8 FF 9F 5D |  if_ne	jmp	#LR__2881
2543c                 | '    
2543c                 | ' repeat i from 35 to start
2543c     23 28 06 F6 | 	mov	local02, #35
25440     23 26 56 F2 | 	cmps	local01, #35 wc
25444     01 2C 86 F6 | 	negc	local04, #1
25448     13 2F 02 F6 | 	mov	local05, local01
2544c     16 2F 02 F1 | 	add	local05, local04
25450                 | LR__2882
25450                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
25450     F6 03 00 FF 
25454     00 12 06 F6 | 	mov	arg01, ##519168
25458     F9 E4 05 F1 | 	add	objptr, #249
2545c     F2 2A 02 FB | 	rdlong	local03, objptr
25460     15 13 82 F1 | 	sub	arg01, local03
25464     F5 E4 85 F1 | 	sub	objptr, #245
25468     F2 14 02 FB | 	rdlong	arg02, objptr
2546c     14 2B 02 F6 | 	mov	local03, local02
25470     07 2A 66 F0 | 	shl	local03, #7
25474     15 15 02 F1 | 	add	arg02, local03
25478     80 16 06 F6 | 	mov	arg03, #128
2547c     0B 00 00 FF 
25480     C8 E4 05 F1 | 	add	objptr, ##5832
25484     E8 07 B0 FD | 	call	#_psram_spin2_read1
25488                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
25488     F6 03 00 FF 
2548c     00 12 06 F6 | 	mov	arg01, ##519168
25490     0A 00 00 FF 
25494     D3 E5 85 F1 | 	sub	objptr, ##5587
25498     F2 2A 02 FB | 	rdlong	local03, objptr
2549c     15 13 82 F1 | 	sub	arg01, local03
254a0     F5 E4 85 F1 | 	sub	objptr, #245
254a4     F2 14 02 FB | 	rdlong	arg02, objptr
254a8     14 2B 02 F6 | 	mov	local03, local02
254ac     01 2A 06 F1 | 	add	local03, #1
254b0     07 2A 66 F0 | 	shl	local03, #7
254b4     15 15 02 F1 | 	add	arg02, local03
254b8     80 16 06 F6 | 	mov	arg03, #128
254bc     0B 00 00 FF 
254c0     C8 E4 05 F1 | 	add	objptr, ##5832
254c4     44 08 B0 FD | 	call	#_psram_spin2_write
254c8     0B 00 00 FF 
254cc     CC E4 85 F1 | 	sub	objptr, ##5836
254d0     16 29 02 F1 | 	add	local02, local04
254d4     17 29 0A F2 | 	cmp	local02, local05 wz
254d8     74 FF 9F 5D |  if_ne	jmp	#LR__2882
254dc                 | ' repeat i from 0 to 127
254dc     00 28 06 F6 | 	mov	local02, #0
254e0                 | LR__2883
254e0                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
254e0     04 E4 05 F1 | 	add	objptr, #4
254e4     F2 12 02 FB | 	rdlong	arg01, objptr
254e8     13 2F 02 F6 | 	mov	local05, local01
254ec     07 2E 66 F0 | 	shl	local05, #7
254f0     17 13 02 F1 | 	add	arg01, local05
254f4     14 13 02 F1 | 	add	arg01, local02
254f8     20 14 06 F6 | 	mov	arg02, #32
254fc     01 16 06 F6 | 	mov	arg03, #1
25500     00 18 06 F6 | 	mov	arg04, #0
25504     01 1A 06 F6 | 	mov	arg05, #1
25508     0B 00 00 FF 
2550c     C8 E4 05 F1 | 	add	objptr, ##5832
25510     94 08 B0 FD | 	call	#_psram_spin2_fill
25514     0B 00 00 FF 
25518     CC E4 85 F1 | 	sub	objptr, ##5836
2551c     01 28 06 F1 | 	add	local02, #1
25520     80 28 56 F2 | 	cmps	local02, #128 wc
25524     B8 FF 9F CD |  if_b	jmp	#LR__2883
25528     A7 F0 03 F6 | 	mov	ptra, fp
2552c     B2 00 A0 FD | 	call	#popregs_
25530                 | _hg010b_spin2_scrolldown_ret
25530     2D 00 64 FD | 	ret
25534                 | 
25534                 | ' 
25534                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
25534                 | ' 
25534                 | ' pub crlf()
25534                 | _hg010b_spin2_crlf
25534                 | ' 
25534                 | ' cursor_x:=leading_spaces*2
25534     01 00 00 FF 
25538     B6 E4 05 F1 | 	add	objptr, ##694
2553c     F2 16 02 FB | 	rdlong	arg03, objptr
25540     01 16 66 F0 | 	shl	arg03, #1
25544     01 00 00 FF 
25548     7A E4 85 F1 | 	sub	objptr, ##634
2554c     F2 16 52 FC | 	wrword	arg03, objptr
25550                 | ' cursor_y+=1
25550     02 E4 05 F1 | 	add	objptr, #2
25554     F2 16 C2 FA | 	rdbyte	arg03, objptr
25558     01 16 06 F1 | 	add	arg03, #1
2555c     F2 16 42 FC | 	wrbyte	arg03, objptr
25560                 | ' if cursor_y>st_lines-1
25560     C3 E4 05 F1 | 	add	objptr, #195
25564     F2 16 02 FB | 	rdlong	arg03, objptr
25568     01 16 86 F1 | 	sub	arg03, #1
2556c     C3 E4 85 F1 | 	sub	objptr, #195
25570     F2 14 C2 FA | 	rdbyte	arg02, objptr
25574     3E E4 85 F1 | 	sub	objptr, #62
25578     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
2557c     2C 00 90 ED |  if_be	jmp	#LR__2890
25580                 | '   scrollup2()
25580     00 12 06 F6 | 	mov	arg01, #0
25584     01 00 00 FF 
25588     58 14 06 F6 | 	mov	arg02, ##600
2558c     10 16 06 F6 | 	mov	arg03, #16
25590     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
25594                 | '   cursor_y:=st_lines-1
25594     01 E5 05 F1 | 	add	objptr, #257
25598     F2 16 02 FB | 	rdlong	arg03, objptr
2559c     01 16 86 F1 | 	sub	arg03, #1
255a0     C3 E4 85 F1 | 	sub	objptr, #195
255a4     F2 16 42 FC | 	wrbyte	arg03, objptr
255a8     3E E4 85 F1 | 	sub	objptr, #62
255ac                 | LR__2890
255ac                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
255ac     3C E4 05 F1 | 	add	objptr, #60
255b0     F2 14 E2 FA | 	rdword	arg02, objptr
255b4     02 14 66 F0 | 	shl	arg02, #2
255b8     02 E4 05 F1 | 	add	objptr, #2
255bc     F2 16 C2 FA | 	rdbyte	arg03, objptr
255c0     3E E4 85 F1 | 	sub	objptr, #62
255c4     04 16 66 F0 | 	shl	arg03, #4
255c8     04 16 06 F1 | 	add	arg03, #4
255cc     11 12 06 F6 | 	mov	arg01, #17
255d0     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
255d4                 | _hg010b_spin2_crlf_ret
255d4     2D 00 64 FD | 	ret
255d8                 | 
255d8                 | ' 
255d8                 | ' 
255d8                 | ' '*************************************************************************
255d8                 | ' '                                                                        *
255d8                 | ' '  Conversions                                                           *
255d8                 | ' '                                                                        *
255d8                 | ' '*************************************************************************
255d8                 | ' 
255d8                 | ' ''---------- Convert a integer to dec string, return a pointer
255d8                 | ' 
255d8                 | ' pub inttostr(i):result |q,pos,k,j
255d8                 | _hg010b_spin2_inttostr
255d8     03 4A 05 F6 | 	mov	COUNT_, #3
255dc     A8 00 A0 FD | 	call	#pushregs_
255e0     09 27 0A F6 | 	mov	local01, arg01 wz
255e4                 | ' 
255e4                 | ' j:=i
255e4                 | ' pos:=10
255e4     0A 28 06 F6 | 	mov	local02, #10
255e8                 | ' k:=0
255e8     00 2A 06 F6 | 	mov	local03, #0
255ec                 | ' 
255ec                 | ' if (j==0)
255ec     18 00 90 5D |  if_ne	jmp	#LR__2900
255f0                 | '   n_string[0]:=48
255f0     4D E4 05 F1 | 	add	objptr, #77
255f4     F2 60 48 FC | 	wrbyte	#48, objptr
255f8                 | '   n_string[1]:=0
255f8     01 E4 05 F1 | 	add	objptr, #1
255fc     F2 00 48 FC | 	wrbyte	#0, objptr
25600     4E E4 85 F1 | 	sub	objptr, #78
25604     C4 00 90 FD | 	jmp	#LR__2907
25608                 | LR__2900
25608                 | ' 
25608                 | ' else
25608                 | '   if (j<0)
25608     13 27 52 F6 | 	abs	local01, local01 wc
2560c                 | '     j:=0-j
2560c                 | '     k:=45
2560c     2D 2A 06 C6 |  if_b	mov	local03, #45
25610                 | ' 
25610                 | '   n_string[11]:=0
25610     58 E4 05 F1 | 	add	objptr, #88
25614     F2 00 48 FC | 	wrbyte	#0, objptr
25618     58 E4 85 F1 | 	sub	objptr, #88
2561c     97 24 48 FB | 	callpa	#(@LR__2902-@LR__2901)>>2,fcache_load_ptr_
25620                 | '   repeat while (pos>-1)
25620                 | LR__2901
25620     00 28 56 F2 | 	cmps	local02, #0 wc
25624     40 00 90 CD |  if_b	jmp	#LR__2903
25628     13 FB 51 F6 | 	abs	result1, local01 wc
2562c     0A FA 15 FD | 	qdiv	result1, #10
25630                 | '     q:=j//10
25630     19 FA 61 FD | 	getqy	result1
25634     FD FA 81 F6 | 	negc	result1, result1
25638     13 27 52 F6 | 	abs	local01, local01 wc
2563c     0A 26 16 FD | 	qdiv	local01, #10
25640                 | '     q:=48+q
25640     30 FA 05 F1 | 	add	result1, #48
25644                 | '     n_string[pos]:=q
25644     14 27 02 F6 | 	mov	local01, local02
25648     4D E4 05 F1 | 	add	objptr, #77
2564c     F2 26 02 F1 | 	add	local01, objptr
25650     13 FB 41 FC | 	wrbyte	result1, local01
25654                 | '     j:=j/10
25654     4D E4 85 F1 | 	sub	objptr, #77
25658                 | '     pos-=1
25658     01 28 86 F1 | 	sub	local02, #1
2565c     18 26 62 FD | 	getqx	local01
25660     13 27 82 F6 | 	negc	local01, local01
25664     B8 FF 9F FD | 	jmp	#LR__2901
25668                 | LR__2902
25668                 | LR__2903
25668                 | '   repeat while n_string[0]==48
25668                 | LR__2904
25668     4D E4 05 F1 | 	add	objptr, #77
2566c     F2 16 C2 FA | 	rdbyte	arg03, objptr
25670     4D E4 85 F1 | 	sub	objptr, #77
25674     30 16 0E F2 | 	cmp	arg03, #48 wz
25678     20 00 90 5D |  if_ne	jmp	#LR__2905
2567c                 | '     bytemove(@n_string,@n_string+1,12)
2567c     4D E4 05 F1 | 	add	objptr, #77
25680     F2 12 02 F6 | 	mov	arg01, objptr
25684     F2 14 02 F6 | 	mov	arg02, objptr
25688     4D E4 85 F1 | 	sub	objptr, #77
2568c     01 14 06 F1 | 	add	arg02, #1
25690     0C 16 06 F6 | 	mov	arg03, #12
25694     80 11 B0 FD | 	call	#__system____builtin_memmove
25698     CC FF 9F FD | 	jmp	#LR__2904
2569c                 | LR__2905
2569c                 | ' 
2569c                 | '   if k==45
2569c     2D 2A 0E F2 | 	cmp	local03, #45 wz
256a0     28 00 90 5D |  if_ne	jmp	#LR__2906
256a4                 | '      bytemove(@n_string+1,@n_string,12)
256a4     4D E4 05 F1 | 	add	objptr, #77
256a8     F2 12 02 F6 | 	mov	arg01, objptr
256ac     01 12 06 F1 | 	add	arg01, #1
256b0     F2 14 02 F6 | 	mov	arg02, objptr
256b4     4D E4 85 F1 | 	sub	objptr, #77
256b8     0C 16 06 F6 | 	mov	arg03, #12
256bc     58 11 B0 FD | 	call	#__system____builtin_memmove
256c0                 | '      n_string[0]:=k
256c0     4D E4 05 F1 | 	add	objptr, #77
256c4     F2 2A 42 FC | 	wrbyte	local03, objptr
256c8     4D E4 85 F1 | 	sub	objptr, #77
256cc                 | LR__2906
256cc                 | LR__2907
256cc                 | ' 
256cc                 | ' q:=@n_string
256cc     4D E4 05 F1 | 	add	objptr, #77
256d0     F2 FA 01 F6 | 	mov	result1, objptr
256d4     4D E4 85 F1 | 	sub	objptr, #77
256d8                 | ' return q
256d8     A7 F0 03 F6 | 	mov	ptra, fp
256dc     B2 00 A0 FD | 	call	#popregs_
256e0                 | _hg010b_spin2_inttostr_ret
256e0     2D 00 64 FD | 	ret
256e4                 | 
256e4                 | ' 
256e4                 | ' '**********************************************************************************
256e4                 | ' '
256e4                 | ' '        Blitting
256e4                 | ' '
256e4                 | ' '**********************************************************************************
256e4                 | ' 
256e4                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
256e4                 | _hg010b_spin2_blit
256e4     18 4A 05 F6 | 	mov	COUNT_, #24
256e8     A8 00 A0 FD | 	call	#pushregs_
256ec     09 27 02 F6 | 	mov	local01, arg01
256f0     0A 29 02 F6 | 	mov	local02, arg02
256f4     0B 2B 02 F6 | 	mov	local03, arg03
256f8     0C 2D 02 F6 | 	mov	local04, arg04
256fc     0D 2F 02 F6 | 	mov	local05, arg05
25700     0E 31 02 F6 | 	mov	local06, arg06
25704     0F 33 02 F6 | 	mov	local07, arg07
25708     10 35 02 F6 | 	mov	local08, arg08
2570c     11 37 02 F6 | 	mov	local09, arg09
25710     12 39 02 F6 | 	mov	local10, arg10
25714                 | ' 
25714                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
25714     00 04 00 FF 
25718     00 26 56 F2 | 	cmps	local01, ##524288 wc
2571c     00 04 00 3F 
25720     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
25724     7C 01 90 CD |  if_b	jmp	#LR__2914
25728     16 29 5A F2 | 	cmps	local02, local04 wcz
2572c     14 3B 02 16 |  if_a	mov	local11, local02
25730     16 29 02 16 |  if_a	mov	local02, local04
25734     1D 2D 02 16 |  if_a	mov	local04, local11
25738     17 2B 5A F2 | 	cmps	local03, local05 wcz
2573c     15 3B 02 16 |  if_a	mov	local11, local03
25740     17 2B 02 16 |  if_a	mov	local03, local05
25744     18 2B 02 FD | 	qmul	local03, local06
25748                 | '   if x1a>x2a
25748                 | '     x1a,x2a:=x2a,x1a
25748                 | '   if y1a>y2a
25748                 | '     y1a,y2a:=y2a,y1a  
25748     1D 2F 02 16 |  if_a	mov	local05, local11
2574c                 | ' 
2574c                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
2574c     19 3D 02 F6 | 	mov	local12, local07
25750     14 3D 02 F1 | 	add	local12, local02
25754     18 3A 62 FD | 	getqx	local11
25758     1C 37 02 FD | 	qmul	local09, local10
2575c     1D 3D 02 F1 | 	add	local12, local11
25760     13 3F 02 F6 | 	mov	local13, local01
25764     1A 3F 02 F1 | 	add	local13, local08
25768     18 3A 62 FD | 	getqx	local11
2576c     1D 3F 02 F1 | 	add	local13, local11
25770     1F 3D 5A F2 | 	cmps	local12, local13 wcz
25774     98 00 90 ED |  if_be	jmp	#LR__2911
25778                 | '     repeat y from y1a to y2a
25778     15 41 02 F6 | 	mov	local14, local03
2577c     15 2F 52 F2 | 	cmps	local05, local03 wc
25780     01 42 86 F6 | 	negc	local15, #1
25784     17 45 02 F6 | 	mov	local16, local05
25788     21 45 02 F1 | 	add	local16, local15
2578c     0B 00 00 FF 
25790     CC E4 05 F1 | 	add	objptr, ##5836
25794                 | LR__2910
25794     18 41 02 FD | 	qmul	local14, local06
25798                 | '   '    writeln(string("I am here"))
25798                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25798     13 15 02 F6 | 	mov	arg02, local01
2579c     16 17 02 F6 | 	mov	arg03, local04
257a0     14 17 82 F1 | 	sub	arg03, local02
257a4     01 16 06 F1 | 	add	arg03, #1
257a8     F6 03 00 FF 
257ac     00 12 06 F6 | 	mov	arg01, ##519168
257b0     18 3E 62 FD | 	getqx	local13
257b4     1F 15 02 F1 | 	add	arg02, local13
257b8     14 15 02 F1 | 	add	arg02, local02
257bc     B0 04 B0 FD | 	call	#_psram_spin2_read1
257c0     1B 3F 02 F6 | 	mov	local13, local09
257c4     15 3F 82 F1 | 	sub	local13, local03
257c8     20 3F 02 F1 | 	add	local13, local14
257cc     1C 3F 02 FD | 	qmul	local13, local10
257d0                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
257d0     19 15 02 F6 | 	mov	arg02, local07
257d4     16 17 02 F6 | 	mov	arg03, local04
257d8     14 17 82 F1 | 	sub	arg03, local02
257dc     01 16 06 F1 | 	add	arg03, #1
257e0     F6 03 00 FF 
257e4     00 12 06 F6 | 	mov	arg01, ##519168
257e8     18 3E 62 FD | 	getqx	local13
257ec     1F 15 02 F1 | 	add	arg02, local13
257f0     1A 15 02 F1 | 	add	arg02, local08
257f4     14 05 B0 FD | 	call	#_psram_spin2_write
257f8     21 41 02 F1 | 	add	local14, local15
257fc     22 41 0A F2 | 	cmp	local14, local16 wz
25800     90 FF 9F 5D |  if_ne	jmp	#LR__2910
25804     0B 00 00 FF 
25808     CC E4 85 F1 | 	sub	objptr, ##5836
2580c     94 00 90 FD | 	jmp	#LR__2913
25810                 | LR__2911
25810                 | '   else
25810                 | '     repeat y from y2a to y1a
25810     17 41 02 F6 | 	mov	local14, local05
25814     17 2B 52 F2 | 	cmps	local03, local05 wc
25818     01 46 86 F6 | 	negc	local17, #1
2581c     15 49 02 F6 | 	mov	local18, local03
25820     23 49 02 F1 | 	add	local18, local17
25824     0B 00 00 FF 
25828     CC E4 05 F1 | 	add	objptr, ##5836
2582c                 | LR__2912
2582c     18 41 02 FD | 	qmul	local14, local06
25830                 | '  '     writeln(string("I am there"))
25830                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25830     13 15 02 F6 | 	mov	arg02, local01
25834     16 17 02 F6 | 	mov	arg03, local04
25838     14 17 82 F1 | 	sub	arg03, local02
2583c     01 16 06 F1 | 	add	arg03, #1
25840     F6 03 00 FF 
25844     00 12 06 F6 | 	mov	arg01, ##519168
25848     18 44 62 FD | 	getqx	local16
2584c     22 15 02 F1 | 	add	arg02, local16
25850     14 15 02 F1 | 	add	arg02, local02
25854     18 04 B0 FD | 	call	#_psram_spin2_read1
25858     1B 45 02 F6 | 	mov	local16, local09
2585c     15 45 82 F1 | 	sub	local16, local03
25860     20 45 02 F1 | 	add	local16, local14
25864     1C 45 02 FD | 	qmul	local16, local10
25868                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
25868     19 15 02 F6 | 	mov	arg02, local07
2586c     16 17 02 F6 | 	mov	arg03, local04
25870     14 17 82 F1 | 	sub	arg03, local02
25874     01 16 06 F1 | 	add	arg03, #1
25878     F6 03 00 FF 
2587c     00 12 06 F6 | 	mov	arg01, ##519168
25880     18 44 62 FD | 	getqx	local16
25884     22 15 02 F1 | 	add	arg02, local16
25888     1A 15 02 F1 | 	add	arg02, local08
2588c     7C 04 B0 FD | 	call	#_psram_spin2_write
25890     23 41 02 F1 | 	add	local14, local17
25894     24 41 0A F2 | 	cmp	local14, local18 wz
25898     90 FF 9F 5D |  if_ne	jmp	#LR__2912
2589c     0B 00 00 FF 
258a0     CC E4 85 F1 | 	sub	objptr, ##5836
258a4                 | LR__2913
258a4                 | LR__2914
258a4                 | '     
258a4                 | ' if ((f>=$80000) && (t<$80000)) 
258a4     00 04 00 FF 
258a8     00 26 56 F2 | 	cmps	local01, ##524288 wc
258ac     80 00 90 CD |  if_b	jmp	#LR__2916
258b0     00 04 00 FF 
258b4     00 32 56 F2 | 	cmps	local07, ##524288 wc
258b8     74 00 90 3D |  if_ae	jmp	#LR__2916
258bc                 | '   repeat y from y1a to y2a
258bc     15 41 02 F6 | 	mov	local14, local03
258c0     15 2F 52 F2 | 	cmps	local05, local03 wc
258c4     01 4A 86 F6 | 	negc	local19, #1
258c8     17 4D 02 F6 | 	mov	local20, local05
258cc     25 4D 02 F1 | 	add	local20, local19
258d0     0B 00 00 FF 
258d4     CC E4 05 F1 | 	add	objptr, ##5836
258d8                 | LR__2915
258d8     1B 49 02 F6 | 	mov	local18, local09
258dc     15 49 82 F1 | 	sub	local18, local03
258e0     20 49 02 F1 | 	add	local18, local14
258e4     1C 49 02 FD | 	qmul	local18, local10
258e8                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
258e8     19 13 02 F6 | 	mov	arg01, local07
258ec     18 48 62 FD | 	getqx	local18
258f0     18 41 02 FD | 	qmul	local14, local06
258f4     24 13 02 F1 | 	add	arg01, local18
258f8     1A 13 02 F1 | 	add	arg01, local08
258fc     13 15 02 F6 | 	mov	arg02, local01
25900     16 17 02 F6 | 	mov	arg03, local04
25904     14 17 82 F1 | 	sub	arg03, local02
25908     01 16 06 F1 | 	add	arg03, #1
2590c     18 48 62 FD | 	getqx	local18
25910     24 15 02 F1 | 	add	arg02, local18
25914     14 15 02 F1 | 	add	arg02, local02
25918     54 03 B0 FD | 	call	#_psram_spin2_read1
2591c     25 41 02 F1 | 	add	local14, local19
25920     26 41 0A F2 | 	cmp	local14, local20 wz
25924     B0 FF 9F 5D |  if_ne	jmp	#LR__2915
25928     0B 00 00 FF 
2592c     CC E4 85 F1 | 	sub	objptr, ##5836
25930                 | LR__2916
25930                 | '     
25930                 | ' if ((f<$80000) && (t>=$80000)) 
25930     00 04 00 FF 
25934     00 26 56 F2 | 	cmps	local01, ##524288 wc
25938     84 00 90 3D |  if_ae	jmp	#LR__2918
2593c     00 04 00 FF 
25940     00 32 56 F2 | 	cmps	local07, ##524288 wc
25944     78 00 90 CD |  if_b	jmp	#LR__2918
25948                 | '   t:=t & $FFFFFFF
25948     7C 32 06 F4 | 	bitl	local07, #124
2594c                 | '   repeat y from y1a to y2a
2594c     15 41 02 F6 | 	mov	local14, local03
25950     15 2F 52 F2 | 	cmps	local05, local03 wc
25954     01 4E 86 F6 | 	negc	local21, #1
25958     17 51 02 F6 | 	mov	local22, local05
2595c     27 51 02 F1 | 	add	local22, local21
25960     0B 00 00 FF 
25964     CC E4 05 F1 | 	add	objptr, ##5836
25968                 | LR__2917
25968     18 41 02 FD | 	qmul	local14, local06
2596c                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
2596c     13 13 02 F6 | 	mov	arg01, local01
25970     1B 4D 02 F6 | 	mov	local20, local09
25974     15 4D 82 F1 | 	sub	local20, local03
25978     20 4D 02 F1 | 	add	local20, local14
2597c     18 4A 62 FD | 	getqx	local19
25980     1C 4D 02 FD | 	qmul	local20, local10
25984     25 13 02 F1 | 	add	arg01, local19
25988     14 13 02 F1 | 	add	arg01, local02
2598c     19 15 02 F6 | 	mov	arg02, local07
25990     16 17 02 F6 | 	mov	arg03, local04
25994     14 17 82 F1 | 	sub	arg03, local02
25998     01 16 06 F1 | 	add	arg03, #1
2599c     18 4C 62 FD | 	getqx	local20
259a0     26 15 02 F1 | 	add	arg02, local20
259a4     1A 15 02 F1 | 	add	arg02, local08
259a8     60 03 B0 FD | 	call	#_psram_spin2_write
259ac     27 41 02 F1 | 	add	local14, local21
259b0     28 41 0A F2 | 	cmp	local14, local22 wz
259b4     B0 FF 9F 5D |  if_ne	jmp	#LR__2917
259b8     0B 00 00 FF 
259bc     CC E4 85 F1 | 	sub	objptr, ##5836
259c0                 | LR__2918
259c0                 | '     
259c0                 | ' if ((f<$80000) && (t<$80000)) 
259c0     00 04 00 FF 
259c4     00 26 56 F2 | 	cmps	local01, ##524288 wc
259c8     00 04 00 CF 
259cc     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
259d0     64 00 90 3D |  if_ae	jmp	#LR__2920
259d4                 | '   repeat y from y1a to y2a
259d4     15 41 02 F6 | 	mov	local14, local03
259d8     15 2F 52 F2 | 	cmps	local05, local03 wc
259dc     01 52 86 F6 | 	negc	local23, #1
259e0     17 55 02 F6 | 	mov	local24, local05
259e4     29 55 02 F1 | 	add	local24, local23
259e8                 | LR__2919
259e8     18 41 02 FD | 	qmul	local14, local06
259ec                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
259ec     13 13 02 F6 | 	mov	arg01, local01
259f0     1B 51 02 F6 | 	mov	local22, local09
259f4     15 51 82 F1 | 	sub	local22, local03
259f8     20 51 02 F1 | 	add	local22, local14
259fc     18 4E 62 FD | 	getqx	local21
25a00     1C 51 02 FD | 	qmul	local22, local10
25a04     27 13 02 F1 | 	add	arg01, local21
25a08     14 13 02 F1 | 	add	arg01, local02
25a0c     19 15 02 F6 | 	mov	arg02, local07
25a10     16 17 02 F6 | 	mov	arg03, local04
25a14     14 17 82 F1 | 	sub	arg03, local02
25a18     01 16 06 F1 | 	add	arg03, #1
25a1c     18 50 62 FD | 	getqx	local22
25a20     28 15 02 F1 | 	add	arg02, local22
25a24     1A 15 02 F1 | 	add	arg02, local08
25a28     EC 0D B0 FD | 	call	#__system____builtin_memmove
25a2c     29 41 02 F1 | 	add	local14, local23
25a30     2A 41 0A F2 | 	cmp	local14, local24 wz
25a34     B0 FF 9F 5D |  if_ne	jmp	#LR__2919
25a38                 | LR__2920
25a38     A7 F0 03 F6 | 	mov	ptra, fp
25a3c     B2 00 A0 FD | 	call	#popregs_
25a40                 | _hg010b_spin2_blit_ret
25a40     2D 00 64 FD | 	ret
25a44                 | 
25a44                 | ' 
25a44                 | ' '..............................................................................
25a44                 | ' 
25a44                 | ' {{
25a44                 | ' }}
25a44                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
25a44                 | _psram_spin2_startx
25a44     04 4A 05 F6 | 	mov	COUNT_, #4
25a48     A8 00 A0 FD | 	call	#pushregs_
25a4c     09 27 02 F6 | 	mov	local01, arg01
25a50     0B 29 02 F6 | 	mov	local02, arg03
25a54     0C 2B 02 F6 | 	mov	local03, arg04
25a58                 | '     stop() ' restart driver if required
25a58     54 01 B0 FD | 	call	#_psram_spin2_stop
25a5c     00 26 0E F2 | 	cmp	local01, #0 wz
25a60     14 26 06 AB |  if_e	rdlong	local01, #20
25a64     13 15 52 F6 | 	abs	arg02, local01 wc
25a68     A1 07 00 FF 
25a6c     40 14 16 FD | 	qdiv	arg02, ##1000000
25a70                 | ' 
25a70                 | '     ' use current frequency if none specified
25a70                 | ' 
25a70                 | '     if freq == 0 
25a70                 | '         freq := clkfreq 
25a70                 | ' 
25a70                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
25a70                 | ' 
25a70                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
25a70                 | '     if burst < 0
25a70                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
25a70     18 14 62 FD | 	getqx	arg02
25a74     0A 19 82 F6 | 	negc	arg04, arg02
25a78     03 18 66 F0 | 	shl	arg04, #3
25a7c     84 18 86 F1 | 	sub	arg04, #132
25a80     04 18 46 F0 | 	shr	arg04, #4
25a84     04 18 66 F0 | 	shl	arg04, #4
25a88     00 18 56 F2 | 	cmps	arg04, #0 wc
25a8c     0E FA 65 C6 |  if_b	neg	result1, #14
25a90     10 01 90 CD |  if_b	jmp	#LR__2933
25a94                 | ' 
25a94                 | '     ' compute the input delay
25a94                 | ' 
25a94                 | '     if delay <= 0
25a94     01 28 56 F2 | 	cmps	local02, #1 wc
25a98     10 00 90 3D |  if_ae	jmp	#LR__2930
25a9c                 | '         delay := lookupDelay(freq)
25a9c     13 13 02 F6 | 	mov	arg01, local01
25aa0     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
25aa4     FD 28 02 F6 | 	mov	local02, result1
25aa8     04 00 90 FD | 	jmp	#LR__2931
25aac                 | LR__2930
25aac                 | '     else
25aac                 | '         delay <#= $f ' limit to 15
25aac     0F 28 66 F3 | 	fles	local02, #15
25ab0                 | LR__2931
25ab0                 | ' 
25ab0                 | '     ' create our lock
25ab0                 | ' 
25ab0                 | '     driverlock := LOCKNEW()  
25ab0     00 FA 05 F6 | 	mov	result1, #0
25ab4     04 FA 61 FD | 	locknew	result1
25ab8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25abc     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
25ac0                 | '     if driverlock == -1
25ac0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25ac4     FF FF 7F FF 
25ac8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25acc                 | '         return ERR_NO_LOCK
25acc     1A FA 65 A6 |  if_e	neg	result1, #26
25ad0     D0 00 90 AD |  if_e	jmp	#LR__2933
25ad4                 | ' 
25ad4                 | '     ' patch in the proper data and HUB addresses to the startup structure
25ad4                 | ' 
25ad4                 | '     long[@startupData][0]:=clkfreq
25ad4     14 26 06 FB | 	rdlong	local01, #20
25ad8     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
25adc     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
25ae0                 | ' '    long[@startupData][1]:=$1000_0000
25ae0                 | '     long[@startupData][5]:=@deviceData
25ae0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25ae4     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25ae8     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
25aec     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25af0     14 14 06 F1 | 	add	arg02, #20
25af4     0A 27 62 FC | 	wrlong	local01, arg02
25af8                 | '     long[@startupData][6]:=@qosData
25af8     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
25afc     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25b00     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
25b04     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25b08     18 14 06 F1 | 	add	arg02, #24
25b0c     0A 27 62 FC | 	wrlong	local01, arg02
25b10                 | '     long[@startupData][7]:=$7FF00
25b10     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25b14     1C 26 06 F1 | 	add	local01, #28
25b18     FF 03 80 FF 
25b1c     13 01 6A FC | 	wrlong	##524032, local01
25b20                 | ' 
25b20                 | '     ' setup some default bank and QoS parameter values
25b20                 | ' 
25b20                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
25b20     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25b24     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
25b28     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
25b2c     10 18 66 F0 | 	shl	arg04, #16
25b30     0C 28 66 F0 | 	shl	local02, #12
25b34     14 19 42 F5 | 	or	arg04, local02
25b38     18 18 46 F5 | 	or	arg04, #24
25b3c     0C 15 02 F6 | 	mov	arg02, arg04
25b40     02 16 06 F6 | 	mov	arg03, #2
25b44     A0 00 A0 FD | 	call	#\builtin_longfill_
25b48                 | '     longfill(@qosData, $FFFF0000, 8)
25b48     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25b4c     07 16 06 F6 | 	mov	arg03, #7
25b50     28 16 62 FD | 	setq	arg03
25b54     80 FF FF FF 
25b58     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
25b5c                 | ' 
25b5c                 | '     ' get the address of the PSRAM memory driver so we can start it
25b5c                 | ' 
25b5c                 | '     driverAddr:= driver.getDriverAddr()
25b5c                 | '     return @driver_start
25b5c     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
25b60     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
25b64     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
25b68                 | ' 
25b68                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
25b68                 | ' 
25b68                 | '     if desiredcog < 0
25b68     00 2A 56 F2 | 	cmps	local03, #0 wc
25b6c                 | '         desiredcog := NEWCOG
25b6c     10 2A 06 C6 |  if_b	mov	local03, #16
25b70                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
25b70     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
25b74     15 2D 02 F6 | 	mov	local04, local03
25b78     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
25b7c     0A 2D F2 FC | 	coginit	local04, arg02 wc
25b80     01 2C 66 C6 |  if_b	neg	local04, #1
25b84     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
25b88     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
25b8c                 | '     repeat until long[@startupData] == 0 
25b8c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
25b90                 | LR__2932
25b90     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
25b94     F8 FF 9F 5D |  if_ne	jmp	#LR__2932
25b98                 | ' 
25b98                 | '     return drivercog
25b98     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
25b9c     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
25ba0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25ba4                 | LR__2933
25ba4     A7 F0 03 F6 | 	mov	ptra, fp
25ba8     B2 00 A0 FD | 	call	#popregs_
25bac                 | _psram_spin2_startx_ret
25bac     2D 00 64 FD | 	ret
25bb0                 | 
25bb0                 | ' 
25bb0                 | ' '..............................................................................
25bb0                 | ' 
25bb0                 | ' {{
25bb0                 | ' }}
25bb0                 | ' PUB stop() : i
25bb0                 | _psram_spin2_stop
25bb0     00 00 06 F6 | 	mov	_var01, #0
25bb4                 | '     if drivercog <> -1
25bb4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25bb8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25bbc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25bc0     FF FF 7F FF 
25bc4     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
25bc8     70 00 90 AD |  if_e	jmp	#LR__2943
25bcc                 | '         cogstop(drivercog) ' a rather brutal stop
25bcc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25bd0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25bd4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25bd8     03 12 62 FD | 	cogstop	arg01
25bdc     97 26 48 FB | 	callpa	#(@LR__2942-@LR__2940)>>2,fcache_load_ptr_
25be0                 | '         repeat i from 0 to 7
25be0                 | LR__2940
25be0                 | '             if long[$7FF00][i*3] < 0
25be0     00 FB 01 F6 | 	mov	result1, _var01
25be4     01 FA 65 F0 | 	shl	result1, #1
25be8     00 FB 01 F1 | 	add	result1, _var01
25bec     02 FA 65 F0 | 	shl	result1, #2
25bf0     FF 03 00 FF 
25bf4     00 FB 05 F1 | 	add	result1, ##524032
25bf8     FD FA 01 FB | 	rdlong	result1, result1
25bfc     00 FA 55 F2 | 	cmps	result1, #0 wc
25c00     1C 00 90 3D |  if_ae	jmp	#LR__2941
25c04                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
25c04     00 FB 01 F6 | 	mov	result1, _var01
25c08     01 FA 65 F0 | 	shl	result1, #1
25c0c     00 FB 01 F1 | 	add	result1, _var01
25c10     02 FA 65 F0 | 	shl	result1, #2
25c14     FF 03 00 FF 
25c18     00 FB 05 F1 | 	add	result1, ##524032
25c1c     FD 20 68 FC | 	wrlong	#16, result1
25c20                 | LR__2941
25c20     01 00 06 F1 | 	add	_var01, #1
25c24     08 00 56 F2 | 	cmps	_var01, #8 wc
25c28     B4 FF 9F CD |  if_b	jmp	#LR__2940
25c2c                 | LR__2942
25c2c                 | '         drivercog := -1
25c2c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25c30     FF FF FF FF 
25c34     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
25c38     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25c3c                 | LR__2943
25c3c                 | '     if driverlock <> -1
25c3c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25c40     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
25c44     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25c48     FF FF 7F FF 
25c4c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25c50                 | '         LOCKRET(driverlock)
25c50     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
25c54     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
25c58     05 12 62 5D |  if_ne	lockret	arg01
25c5c                 | '         driverlock := -1
25c5c     FF FF FF 5F 
25c60     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
25c64     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
25c68     00 FB 01 F6 | 	mov	result1, _var01
25c6c                 | _psram_spin2_stop_ret
25c6c     2D 00 64 FD | 	ret
25c70                 | 
25c70                 | ' 
25c70                 | ' '..............................................................................
25c70                 | ' 
25c70                 | ' {{
25c70                 | ' }}
25c70                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
25c70                 | _psram_spin2_read1
25c70                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25c70                 | '     if drivercog == -1 ' driver must be running
25c70     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25c74     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25c78     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25c7c     FF FF 7F FF 
25c80     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25c84                 | '         return ERR_INACTIVE
25c84     0F FA 65 A6 |  if_e	neg	result1, #15
25c88     7C 00 90 AD |  if_e	jmp	#LR__2951
25c8c                 | '     if count == 0 ' don't even bother reading
25c8c     00 16 0E F2 | 	cmp	arg03, #0 wz
25c90                 | '         return 0
25c90     00 FA 05 A6 |  if_e	mov	result1, #0
25c94     70 00 90 AD |  if_e	jmp	#LR__2951
25c98                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
25c98     00 FA 05 F6 | 	mov	result1, #0
25c9c     01 FA 61 FD | 	cogid	result1
25ca0     FD 00 02 F6 | 	mov	_var01, result1
25ca4     01 00 66 F0 | 	shl	_var01, #1
25ca8     FD 00 02 F1 | 	add	_var01, result1
25cac     02 00 66 F0 | 	shl	_var01, #2
25cb0     FF 03 00 FF 
25cb4     00 03 06 F6 | 	mov	_var02, ##524032
25cb8     00 03 02 F1 | 	add	_var02, _var01
25cbc                 | '     if long[mailbox] < 0
25cbc     01 01 02 FB | 	rdlong	_var01, _var02
25cc0     00 00 56 F2 | 	cmps	_var01, #0 wc
25cc4                 | '         return ERR_MAILBOX_BUSY
25cc4     1C FA 65 C6 |  if_b	neg	result1, #28
25cc8     3C 00 90 CD |  if_b	jmp	#LR__2951
25ccc                 | '     long[mailbox][2] := count
25ccc     08 02 06 F1 | 	add	_var02, #8
25cd0     01 17 62 FC | 	wrlong	arg03, _var02
25cd4                 | '     long[mailbox][1] := dstHubAddr
25cd4     04 02 86 F1 | 	sub	_var02, #4
25cd8     01 13 62 FC | 	wrlong	arg01, _var02
25cdc     04 02 86 F1 | 	sub	_var02, #4
25ce0                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
25ce0     0A 05 02 F6 | 	mov	_var03, arg02
25ce4     D9 04 06 F4 | 	bitl	_var03, #217
25ce8     00 00 58 FF 
25cec     00 00 06 F6 | 	mov	_var01, ##-1342177280
25cf0     02 01 02 F1 | 	add	_var01, _var03
25cf4     01 01 62 FC | 	wrlong	_var01, _var02
25cf8                 | '     repeat
25cf8                 | LR__2950
25cf8                 | '         result := long[mailbox]    
25cf8     01 05 02 FB | 	rdlong	_var03, _var02
25cfc     00 04 56 F2 | 	cmps	_var03, #0 wc
25d00     F4 FF 9F CD |  if_b	jmp	#LR__2950
25d04                 | '     while result < 0   
25d04                 | '     return -result                       'return success or error
25d04     02 FB 61 F6 | 	neg	result1, _var03
25d08                 | LR__2951
25d08                 | _psram_spin2_read1_ret
25d08     2D 00 64 FD | 	ret
25d0c                 | 
25d0c                 | ' 
25d0c                 | ' '..............................................................................
25d0c                 | ' 
25d0c                 | ' {{
25d0c                 | ' }}
25d0c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
25d0c                 | _psram_spin2_write
25d0c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25d0c                 | '     if drivercog == -1 ' driver must be running
25d0c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25d10     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25d14     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25d18     FF FF 7F FF 
25d1c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25d20                 | '         return ERR_INACTIVE
25d20     0F FA 65 A6 |  if_e	neg	result1, #15
25d24     7C 00 90 AD |  if_e	jmp	#LR__2961
25d28                 | '     if count == 0 ' don't even bother writing
25d28     00 16 0E F2 | 	cmp	arg03, #0 wz
25d2c                 | '         return 0
25d2c     00 FA 05 A6 |  if_e	mov	result1, #0
25d30     70 00 90 AD |  if_e	jmp	#LR__2961
25d34                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
25d34     00 FA 05 F6 | 	mov	result1, #0
25d38     01 FA 61 FD | 	cogid	result1
25d3c     FD 00 02 F6 | 	mov	_var01, result1
25d40     01 00 66 F0 | 	shl	_var01, #1
25d44     FD 00 02 F1 | 	add	_var01, result1
25d48     02 00 66 F0 | 	shl	_var01, #2
25d4c     FF 03 00 FF 
25d50     00 03 06 F6 | 	mov	_var02, ##524032
25d54     00 03 02 F1 | 	add	_var02, _var01
25d58                 | '     if long[mailbox] < 0
25d58     01 01 02 FB | 	rdlong	_var01, _var02
25d5c     00 00 56 F2 | 	cmps	_var01, #0 wc
25d60                 | '         return ERR_MAILBOX_BUSY
25d60     1C FA 65 C6 |  if_b	neg	result1, #28
25d64     3C 00 90 CD |  if_b	jmp	#LR__2961
25d68                 | '     long[mailbox][2] := count
25d68     08 02 06 F1 | 	add	_var02, #8
25d6c     01 17 62 FC | 	wrlong	arg03, _var02
25d70                 | '     long[mailbox][1] := srcHubAddr
25d70     04 02 86 F1 | 	sub	_var02, #4
25d74     01 13 62 FC | 	wrlong	arg01, _var02
25d78     04 02 86 F1 | 	sub	_var02, #4
25d7c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
25d7c     0A 05 02 F6 | 	mov	_var03, arg02
25d80     D9 04 06 F4 | 	bitl	_var03, #217
25d84     00 00 78 FF 
25d88     00 00 06 F6 | 	mov	_var01, ##-268435456
25d8c     02 01 02 F1 | 	add	_var01, _var03
25d90     01 01 62 FC | 	wrlong	_var01, _var02
25d94                 | '     repeat
25d94                 | LR__2960
25d94                 | '         result := long[mailbox]    
25d94     01 05 02 FB | 	rdlong	_var03, _var02
25d98     00 04 56 F2 | 	cmps	_var03, #0 wc
25d9c     F4 FF 9F CD |  if_b	jmp	#LR__2960
25da0                 | '     while result < 0   
25da0                 | '     return -result                       'return success or error
25da0     02 FB 61 F6 | 	neg	result1, _var03
25da4                 | LR__2961
25da4                 | _psram_spin2_write_ret
25da4     2D 00 64 FD | 	ret
25da8                 | 
25da8                 | ' 
25da8                 | ' ' generalized fill
25da8                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
25da8                 | _psram_spin2_fill
25da8     09 01 02 F6 | 	mov	_var01, arg01
25dac     0A 03 02 F6 | 	mov	_var02, arg02
25db0     0B 05 02 F6 | 	mov	_var03, arg03
25db4     0D 07 02 F6 | 	mov	_var04, arg05
25db8                 | '     case datasize 
25db8     01 06 86 F1 | 	sub	_var04, #1
25dbc     04 06 26 F3 | 	fle	_var04, #4
25dc0     30 06 62 FD | 	jmprel	_var04
25dc4                 | LR__2970
25dc4     10 00 90 FD | 	jmp	#LR__2971
25dc8     18 00 90 FD | 	jmp	#LR__2972
25dcc     2C 00 90 FD | 	jmp	#LR__2974
25dd0     1C 00 90 FD | 	jmp	#LR__2973
25dd4     24 00 90 FD | 	jmp	#LR__2974
25dd8                 | LR__2971
25dd8                 | '         1: req := driver.R_WRITEBYTE
25dd8     00 00 60 FF 
25ddc     00 08 06 F6 | 	mov	_var05, ##-1073741824
25de0     20 00 90 FD | 	jmp	#LR__2975
25de4                 | LR__2972
25de4                 | '         2: req := driver.R_WRITEWORD
25de4     00 00 68 FF 
25de8     00 08 06 F6 | 	mov	_var05, ##-805306368
25dec     14 00 90 FD | 	jmp	#LR__2975
25df0                 | LR__2973
25df0                 | '         4: req := driver.R_WRITELONG
25df0     00 00 70 FF 
25df4     00 08 06 F6 | 	mov	_var05, ##-536870912
25df8     08 00 90 FD | 	jmp	#LR__2975
25dfc                 | LR__2974
25dfc                 | '         other : return ERR_INVALID
25dfc     06 FA 65 F6 | 	neg	result1, #6
25e00     94 00 90 FD | 	jmp	#LR__2977
25e04                 | LR__2975
25e04                 | '     if count == 0   ' nothing to do
25e04     00 04 0E F2 | 	cmp	_var03, #0 wz
25e08                 | '         return 0
25e08     00 FA 05 A6 |  if_e	mov	result1, #0
25e0c     88 00 90 AD |  if_e	jmp	#LR__2977
25e10                 | '     if drivercog == -1
25e10     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25e14     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
25e18     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25e1c     FF FF 7F FF 
25e20     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
25e24                 | '         return ERR_INACTIVE
25e24     0F FA 65 A6 |  if_e	neg	result1, #15
25e28     6C 00 90 AD |  if_e	jmp	#LR__2977
25e2c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
25e2c     00 FA 05 F6 | 	mov	result1, #0
25e30     01 FA 61 FD | 	cogid	result1
25e34     FD 06 02 F6 | 	mov	_var04, result1
25e38     01 06 66 F0 | 	shl	_var04, #1
25e3c     FD 06 02 F1 | 	add	_var04, result1
25e40     02 06 66 F0 | 	shl	_var04, #2
25e44     FF 03 00 FF 
25e48     00 0B 06 F6 | 	mov	_var06, ##524032
25e4c     03 0B 02 F1 | 	add	_var06, _var04
25e50                 | '     if long[mailbox] < 0
25e50     05 07 02 FB | 	rdlong	_var04, _var06
25e54     00 06 56 F2 | 	cmps	_var04, #0 wc
25e58                 | '         return ERR_MAILBOX_BUSY
25e58     1C FA 65 C6 |  if_b	neg	result1, #28
25e5c     38 00 90 CD |  if_b	jmp	#LR__2977
25e60                 | '     long[mailbox][2] := count
25e60     08 0A 06 F1 | 	add	_var06, #8
25e64     05 05 62 FC | 	wrlong	_var03, _var06
25e68                 | '     long[mailbox][1] := pattern
25e68     04 0A 86 F1 | 	sub	_var06, #4
25e6c     05 03 62 FC | 	wrlong	_var02, _var06
25e70     04 0A 86 F1 | 	sub	_var06, #4
25e74                 | '     long[mailbox] := req + (addr & $1ffffff)
25e74     04 0D 02 F6 | 	mov	_var07, _var05
25e78     00 0F 02 F6 | 	mov	_var08, _var01
25e7c     D9 0E 06 F4 | 	bitl	_var08, #217
25e80     07 0D 02 F1 | 	add	_var07, _var08
25e84     05 0D 62 FC | 	wrlong	_var07, _var06
25e88                 | '     repeat
25e88                 | LR__2976
25e88                 | '         r := long[mailbox]
25e88     05 0F 02 FB | 	rdlong	_var08, _var06
25e8c     00 0E 56 F2 | 	cmps	_var08, #0 wc
25e90     F4 FF 9F CD |  if_b	jmp	#LR__2976
25e94                 | '     while r < 0
25e94                 | '     return -r                  ' return 0 for success or negated error code
25e94     07 FB 61 F6 | 	neg	result1, _var08
25e98                 | LR__2977
25e98                 | _psram_spin2_fill_ret
25e98     2D 00 64 FD | 	ret
25e9c                 | 
25e9c                 | ' 
25e9c                 | ' '..............................................................................
25e9c                 | ' 
25e9c                 | ' {{
25e9c                 | ' }}
25e9c                 | ' PUB setQos(cog, qos) : result | mailbox
25e9c                 | _psram_spin2_setQos
25e9c     09 01 02 F6 | 	mov	_var01, arg01
25ea0                 | '     if drivercog == -1 ' driver must be running
25ea0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25ea4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
25ea8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25eac     FF FF 7F FF 
25eb0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25eb4                 | '         return ERR_INACTIVE
25eb4     0F FA 65 A6 |  if_e	neg	result1, #15
25eb8     9C 00 90 AD |  if_e	jmp	#LR__2984
25ebc                 | '     if cog < 0 or cog > 7 ' enforce cog id range
25ebc     00 00 56 F2 | 	cmps	_var01, #0 wc
25ec0     08 00 90 CD |  if_b	jmp	#LR__2980
25ec4     08 00 56 F2 | 	cmps	_var01, #8 wc
25ec8     08 00 90 CD |  if_b	jmp	#LR__2981
25ecc                 | LR__2980
25ecc                 | '         return ERR_INVALID
25ecc     06 FA 65 F6 | 	neg	result1, #6
25ed0     84 00 90 FD | 	jmp	#LR__2984
25ed4                 | LR__2981
25ed4                 | '     long[@qosData][cog] := qos & !$1ff
25ed4     FF 15 26 F5 | 	andn	arg02, #511
25ed8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25edc     02 00 66 F0 | 	shl	_var01, #2
25ee0     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
25ee4     00 15 62 FC | 	wrlong	arg02, _var01
25ee8                 | '     mailbox := $7FF00 + drivercog*12
25ee8     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
25eec     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
25ef0     02 07 02 F6 | 	mov	_var04, _var03
25ef4     01 06 66 F0 | 	shl	_var04, #1
25ef8     02 07 02 F1 | 	add	_var04, _var03
25efc     02 06 66 F0 | 	shl	_var04, #2
25f00     FF 03 00 FF 
25f04     00 09 06 F6 | 	mov	_var05, ##524032
25f08     03 09 02 F1 | 	add	_var05, _var04
25f0c                 | '     repeat until LOCKTRY(driverlock)
25f0c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
25f10                 | LR__2982
25f10     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25f14     06 12 72 FD | 	locktry	arg01 wc
25f18     F4 FF 9F 3D |  if_ae	jmp	#LR__2982
25f1c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25f20                 | '     long[mailbox] := driver.R_CONFIG + cogid()
25f20     00 06 06 F6 | 	mov	_var04, #0
25f24     01 06 62 FD | 	cogid	_var04
25f28     00 00 78 FF 
25f2c     00 02 06 F6 | 	mov	_var02, ##-268435456
25f30     03 03 02 F1 | 	add	_var02, _var04
25f34     04 03 62 FC | 	wrlong	_var02, _var05
25f38                 | '     repeat while long[mailbox] < 0
25f38                 | LR__2983
25f38     04 03 02 FB | 	rdlong	_var02, _var05
25f3c     00 02 56 F2 | 	cmps	_var02, #0 wc
25f40     F4 FF 9F CD |  if_b	jmp	#LR__2983
25f44                 | '     LOCKREL(driverlock)
25f44     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25f48     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25f4c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25f50     07 12 72 FD | 	lockrel	arg01 wc
25f54     00 FA 05 F6 | 	mov	result1, #0
25f58                 | LR__2984
25f58                 | _psram_spin2_setQos_ret
25f58     2D 00 64 FD | 	ret
25f5c                 | 
25f5c                 | ' 
25f5c                 | ' '..............................................................................
25f5c                 | ' 
25f5c                 | ' {{
25f5c                 | ' }}
25f5c                 | ' PRI lookupDelay(freq) : delay | profile
25f5c                 | _psram_spin2_lookupDelay
25f5c                 | '     profile := @delayTable
25f5c     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
25f60     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
25f64                 | '     delay := long[profile][0]
25f64     00 03 02 FB | 	rdlong	_var02, _var01
25f68                 | '     repeat while long[profile][1] 
25f68     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
25f6c     97 16 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
25f70                 | LR__2990
25f70     04 00 06 F1 | 	add	_var01, #4
25f74     00 FB 09 FB | 	rdlong	result1, _var01 wz
25f78     04 00 86 F1 | 	sub	_var01, #4
25f7c     1C 00 90 AD |  if_e	jmp	#LR__2992
25f80                 | '         if freq +< long[profile][1] 
25f80     04 00 06 F1 | 	add	_var01, #4
25f84     00 FB 01 FB | 	rdlong	result1, _var01
25f88     04 00 86 F1 | 	sub	_var01, #4
25f8c     FD 12 12 F2 | 	cmp	arg01, result1 wc
25f90                 | '             quit
25f90                 | '         profile += 4
25f90     04 00 06 31 |  if_ae	add	_var01, #4
25f94                 | '         delay++
25f94     01 02 06 31 |  if_ae	add	_var02, #1
25f98     D4 FF 9F 3D |  if_ae	jmp	#LR__2990
25f9c                 | LR__2991
25f9c                 | LR__2992
25f9c     01 FB 01 F6 | 	mov	result1, _var02
25fa0                 | _psram_spin2_lookupDelay_ret
25fa0     2D 00 64 FD | 	ret
25fa4                 | 
25fa4                 | ' 
25fa4                 | ' PUB start() : r
25fa4                 | _usbnew_spin2_start
25fa4     00 00 06 F6 | 	mov	_var01, #0
25fa8                 | '   ifnot driver_cog
25fa8     15 00 00 FF 
25fac     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
25fb0     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
25fb4     15 00 00 FF 
25fb8     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
25fbc     38 00 90 5D |  if_ne	jmp	#LR__3000
25fc0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
25fc0     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
25fc4     10 00 06 F6 | 	mov	_var01, #16
25fc8     00 16 06 F6 | 	mov	arg03, #0
25fcc     28 16 62 FD | 	setq	arg03
25fd0     0A 01 F2 FC | 	coginit	_var01, arg02 wc
25fd4     01 00 66 C6 |  if_b	neg	_var01, #1
25fd8                 | '     if r >= 0
25fd8     00 00 56 F2 | 	cmps	_var01, #0 wc
25fdc                 | '       driver_cog := r+1
25fdc     00 03 02 36 |  if_ae	mov	_var02, _var01
25fe0     01 02 06 31 |  if_ae	add	_var02, #1
25fe4     15 00 00 3F 
25fe8     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
25fec     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
25ff0     15 00 00 3F 
25ff4     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
25ff8                 | LR__3000
25ff8     00 FB 01 F6 | 	mov	result1, _var01
25ffc                 | _usbnew_spin2_start_ret
25ffc     2D 00 64 FD | 	ret
26000                 | 
26000                 | '     '' (Always enabled)
26000                 | ' 
26000                 | ' '' Get current pressed state of a keyboard key
26000                 | ' PUB keystate(key) : r | buf[2],tmp
26000                 | _usbnew_spin2_keystate
26000     00 04 06 F6 | 	mov	_var03, #0
26004                 | '   if key >= $E0 && key < $E8
26004     E0 12 56 F2 | 	cmps	arg01, #224 wc
26008     34 00 90 CD |  if_b	jmp	#LR__3010
2600c     E8 12 56 F2 | 	cmps	arg01, #232 wc
26010     2C 00 90 3D |  if_ae	jmp	#LR__3010
26014                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
26014     00 FA 05 F6 | 	mov	result1, #0
26018     13 00 00 FF 
2601c     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
26020     09 07 02 F6 | 	mov	_var04, arg01
26024     E0 06 86 F1 | 	sub	_var04, #224
26028     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
2602c     03 09 4A F0 | 	shr	_var05, _var04 wz
26030     13 00 00 FF 
26034     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
26038     01 FA 65 56 |  if_ne	neg	result1, #1
2603c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
26040                 | LR__3010
26040                 | '   else
26040                 | '     '' Do this in inline ASM to ensure atomicity
26040                 | '     tmp := @hkbd_report
26040     13 00 00 FF 
26044     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
26048     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
2604c                 | '     org
2604c     13 00 00 FF 
26050     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
26054     97 1E 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
26058                 | LR__3011
26058 000             | 	org	0
26058 000 28 02 64 FD | 	setq	#1
2605c 001 04 01 02 FB | 	rdlong	_var01, _var05
26060 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
26064 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
26068 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
2606c 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26070 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
26074 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26078 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
2607c 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26080 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
26084 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26088 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
2608c 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26090 00e 01 04 66 A6 |  if_e	neg	_var03, #1
26094 00f             | LR__3012
26094                 | 	orgh
26094     02 FB 01 F6 | 	mov	result1, _var03
26098                 | _usbnew_spin2_keystate_ret
26098     2D 00 64 FD | 	ret
2609c                 | 
2609c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
2609c                 | ' 
2609c                 | ' '' Return key event from buffer if there is one
2609c                 | ' PUB get_key() : r | tail
2609c                 | _usbnew_spin2_get_key
2609c                 | '   tail := keyq_tail
2609c     0F 00 00 FF 
260a0     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
260a4     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
260a8                 | '   if keyq_head == tail
260a8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
260ac     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
260b0     0F 00 00 FF 
260b4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
260b8     00 03 0A F2 | 	cmp	_var02, _var01 wz
260bc                 | '     return 0 ' No event
260bc     00 FA 05 A6 |  if_e	mov	result1, #0
260c0     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
260c4                 | '   r := keyq_data[tail]
260c4     00 03 02 F6 | 	mov	_var02, _var01
260c8     02 02 66 F0 | 	shl	_var02, #2
260cc     0F 00 00 FF 
260d0     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
260d4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
260d8     01 FB 01 FB | 	rdlong	result1, _var02
260dc                 | '   if ++tail == KEYQUEUE_SIZE
260dc     01 00 06 F1 | 	add	_var01, #1
260e0     80 00 0E F2 | 	cmp	_var01, #128 wz
260e4                 | '     tail := 0
260e4     00 00 06 A6 |  if_e	mov	_var01, #0
260e8                 | '   keyq_tail := tail
260e8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
260ec     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
260f0     0F 00 00 FF 
260f4     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
260f8                 | _usbnew_spin2_get_key_ret
260f8     2D 00 64 FD | 	ret
260fc                 | 
260fc                 | ' 
260fc                 | ' '' Emulate mouse movement
260fc                 | ' PUB mouse_move(x,y)
260fc                 | _usbnew_spin2_mouse_move
260fc     02 4A 05 F6 | 	mov	COUNT_, #2
26100     A8 00 A0 FD | 	call	#pushregs_
26104     09 27 02 F6 | 	mov	local01, arg01
26108     0A 29 02 F6 | 	mov	local02, arg02
2610c                 | '   mouse_lock := 1
2610c     14 00 00 FF 
26110     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
26114     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
26118     14 00 00 FF 
2611c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26120                 | '   waitus(2) ' hope driver is now done
26120     02 12 06 F6 | 	mov	arg01, #2
26124     30 0B B0 FD | 	call	#__system___waitus
26128                 | '   mouse_xacc := x
26128     14 00 00 FF 
2612c     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
26130     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
26134                 | '   mouse_yacc := y
26134     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
26138     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
2613c                 | '   if mouse_outptr
2613c     04 00 00 FF 
26140     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
26144     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
26148     0F 00 00 FF 
2614c     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
26150     24 00 90 AD |  if_e	jmp	#LR__3020
26154                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
26154     10 28 66 F0 | 	shl	local02, #16
26158     13 27 32 F9 | 	getword	local01, local01, #0
2615c     13 29 42 F5 | 	or	local02, local01
26160     0F 00 00 FF 
26164     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
26168     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
2616c     0F 00 00 FF 
26170     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
26174     13 29 62 FC | 	wrlong	local02, local01
26178                 | LR__3020
26178                 | '   mouse_lock := 0
26178     14 00 00 FF 
2617c     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
26180     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
26184     14 00 00 FF 
26188     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
2618c     A7 F0 03 F6 | 	mov	ptra, fp
26190     B2 00 A0 FD | 	call	#popregs_
26194                 | _usbnew_spin2_mouse_move_ret
26194     2D 00 64 FD | 	ret
26198                 | 
26198                 | '     '' Set HAVE_HIDPAD to enable.
26198                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
26198                 | ' 
26198                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
26198                 | ' PUB hidpad_id(dev) : r
26198                 | _usbnew_spin2_hidpad_id
26198                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
26198     13 00 00 FF 
2619c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
261a0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
261a4     09 01 02 F6 | 	mov	_var01, arg01
261a8     03 00 66 F0 | 	shl	_var01, #3
261ac     09 01 82 F1 | 	sub	_var01, arg01
261b0     02 00 66 F0 | 	shl	_var01, #2
261b4     00 FB 01 F1 | 	add	result1, _var01
261b8     FD FA 01 FB | 	rdlong	result1, result1
261bc     13 00 00 FF 
261c0     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
261c4                 | _usbnew_spin2_hidpad_id_ret
261c4     2D 00 64 FD | 	ret
261c8                 | 
261c8                 | ' 
261c8                 | ' '' Get all button states for a device
261c8                 | ' PUB hidpad_buttons(dev) : r 
261c8                 | _usbnew_spin2_hidpad_buttons
261c8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
261c8     13 00 00 FF 
261cc     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
261d0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
261d4     09 01 02 F6 | 	mov	_var01, arg01
261d8     03 00 66 F0 | 	shl	_var01, #3
261dc     09 01 82 F1 | 	sub	_var01, arg01
261e0     02 00 66 F0 | 	shl	_var01, #2
261e4     00 FB 01 F1 | 	add	result1, _var01
261e8     14 FA 05 F1 | 	add	result1, #20
261ec     FD FA 01 FB | 	rdlong	result1, result1
261f0     13 00 00 FF 
261f4     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
261f8                 | _usbnew_spin2_hidpad_buttons_ret
261f8     2D 00 64 FD | 	ret
261fc                 | 
261fc                 | ' 
261fc                 | ' '' Get state of an axis (normalized between -32768 and 32767)
261fc                 | ' PUB hidpad_axis(dev,axnum) : r
261fc                 | _usbnew_spin2_hidpad_axis
261fc                 | '   if axnum +>= 6
261fc     06 14 16 F2 | 	cmp	arg02, #6 wc
26200                 | '     return 0
26200     00 FA 05 36 |  if_ae	mov	result1, #0
26204     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
26208                 | '   else 
26208                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
26208     13 00 00 FF 
2620c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26210     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26214     09 01 02 F6 | 	mov	_var01, arg01
26218     03 00 66 F0 | 	shl	_var01, #3
2621c     09 01 82 F1 | 	sub	_var01, arg01
26220     02 00 66 F0 | 	shl	_var01, #2
26224     00 FB 01 F1 | 	add	result1, _var01
26228     04 00 06 F6 | 	mov	_var01, #4
2622c     0A 01 02 F1 | 	add	_var01, arg02
26230     01 00 66 F0 | 	shl	_var01, #1
26234     FD 00 02 F1 | 	add	_var01, result1
26238     00 FB E1 FA | 	rdword	result1, _var01
2623c     0F FA 65 F7 | 	signx	result1, #15
26240     13 00 00 FF 
26244     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26248                 | _usbnew_spin2_hidpad_axis_ret
26248     2D 00 64 FD | 	ret
2624c                 | 
2624c                 | ' 
2624c                 | ' '' Get state of a hat
2624c                 | ' PUB hidpad_hat(dev,hatnum) : r
2624c                 | _usbnew_spin2_hidpad_hat
2624c                 | '   if hatnum +>= 4
2624c     04 14 16 F2 | 	cmp	arg02, #4 wc
26250                 | '     return 0
26250     00 FA 05 36 |  if_ae	mov	result1, #0
26254     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
26258                 | '   else 
26258                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
26258     13 00 00 FF 
2625c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26260     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26264     09 01 02 F6 | 	mov	_var01, arg01
26268     03 00 66 F0 | 	shl	_var01, #3
2626c     09 01 82 F1 | 	sub	_var01, arg01
26270     02 00 66 F0 | 	shl	_var01, #2
26274     00 FB 01 F1 | 	add	result1, _var01
26278     18 00 06 F6 | 	mov	_var01, #24
2627c     0A 01 02 F1 | 	add	_var01, arg02
26280     FD 00 02 F1 | 	add	_var01, result1
26284     00 FB C1 FA | 	rdbyte	result1, _var01
26288     13 00 00 FF 
2628c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26290                 | _usbnew_spin2_hidpad_hat_ret
26290     2D 00 64 FD | 	ret
26294                 | 
26294                 | ' 
26294                 | ' 
26294                 | ' '--------------------------------------------------------------
26294                 | ' '---------- Init the variables, start the cog. ----------------
26294                 | ' '--------------------------------------------------------------
26294                 | ' 
26294                 | ' pub start(mbox,scope,cache) :cog,base | iii
26294                 | _audio096_spin2_start
26294     04 4A 05 F6 | 	mov	COUNT_, #4
26298     A8 00 A0 FD | 	call	#pushregs_
2629c     09 27 02 F6 | 	mov	local01, arg01
262a0                 | ' 
262a0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
262a0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
262a0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
262a0                 | ' 
262a0                 | ' mailboxaddr:=mbox 
262a0     F2 26 62 FC | 	wrlong	local01, objptr
262a4                 | ' scope_ptr:=scope
262a4     04 E4 05 F1 | 	add	objptr, #4
262a8     F2 14 62 FC | 	wrlong	arg02, objptr
262ac                 | ' cache_ptr:=cache
262ac     04 E4 05 F1 | 	add	objptr, #4
262b0     F2 16 62 FC | 	wrlong	arg03, objptr
262b4                 | ' base:=@channel1[0]
262b4     04 E4 05 F1 | 	add	objptr, #4
262b8     F2 28 02 F6 | 	mov	local02, objptr
262bc                 | ' long[$40]:=mbox
262bc     40 26 66 FC | 	wrlong	local01, #64
262c0                 | ' repeat iii from 0 to 7
262c0     00 2A 06 F6 | 	mov	local03, #0
262c4     02 00 00 FF 
262c8     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
262cc     0C E4 85 F1 | 	sub	objptr, #12
262d0     97 BC 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
262d4                 | LR__3030
262d4                 | '   long[base+64*iii]:=0
262d4     14 27 02 F6 | 	mov	local01, local02
262d8     15 FD 01 F6 | 	mov	result2, local03
262dc     06 FC 65 F0 | 	shl	result2, #6
262e0     FE 26 02 F1 | 	add	local01, result2
262e4     13 01 68 FC | 	wrlong	#0, local01
262e8                 | '   long[base+64*iii+4]:=0
262e8     14 27 02 F6 | 	mov	local01, local02
262ec     15 FD 01 F6 | 	mov	result2, local03
262f0     06 FC 65 F0 | 	shl	result2, #6
262f4     FE 26 02 F1 | 	add	local01, result2
262f8     04 26 06 F1 | 	add	local01, #4
262fc     13 01 68 FC | 	wrlong	#0, local01
26300                 | '   long[base+64*iii+12]:=0
26300     14 2D 02 F6 | 	mov	local04, local02
26304     15 27 02 F6 | 	mov	local01, local03
26308     06 26 66 F0 | 	shl	local01, #6
2630c     13 2D 02 F1 | 	add	local04, local01
26310     0C 2C 06 F1 | 	add	local04, #12
26314     16 01 68 FC | 	wrlong	#0, local04
26318                 | '   long[base+64*iii+16]:=2 
26318     14 2D 02 F6 | 	mov	local04, local02
2631c     15 27 02 F6 | 	mov	local01, local03
26320     06 26 66 F0 | 	shl	local01, #6
26324     13 2D 02 F1 | 	add	local04, local01
26328     10 2C 06 F1 | 	add	local04, #16
2632c     16 05 68 FC | 	wrlong	#2, local04
26330                 | '   word[base+64*iii+20]:=0
26330     14 2D 02 F6 | 	mov	local04, local02
26334     15 27 02 F6 | 	mov	local01, local03
26338     06 26 66 F0 | 	shl	local01, #6
2633c     13 2D 02 F1 | 	add	local04, local01
26340     14 2C 06 F1 | 	add	local04, #20
26344     16 01 58 FC | 	wrword	#0, local04
26348                 | '   word[base+64*iii+22]:=8192
26348     14 2D 02 F6 | 	mov	local04, local02
2634c     15 27 02 F6 | 	mov	local01, local03
26350     06 26 66 F0 | 	shl	local01, #6
26354     13 2D 02 F1 | 	add	local04, local01
26358     16 2C 06 F1 | 	add	local04, #22
2635c     10 00 80 FF 
26360     16 01 58 FC | 	wrword	##8192, local04
26364                 | '   word[base+64*iii+24]:=4000+2*iii
26364     15 2D 02 F6 | 	mov	local04, local03
26368     01 2C 66 F0 | 	shl	local04, #1
2636c     07 00 00 FF 
26370     A0 27 06 F6 | 	mov	local01, ##4000
26374     16 27 02 F1 | 	add	local01, local04
26378     14 2D 02 F6 | 	mov	local04, local02
2637c     15 FD 01 F6 | 	mov	result2, local03
26380     06 FC 65 F0 | 	shl	result2, #6
26384     FE 2C 02 F1 | 	add	local04, result2
26388     18 2C 06 F1 | 	add	local04, #24
2638c     16 27 52 FC | 	wrword	local01, local04
26390                 | '   word[base+64*iii+26]:=2
26390     14 2D 02 F6 | 	mov	local04, local02
26394     15 27 02 F6 | 	mov	local01, local03
26398     06 26 66 F0 | 	shl	local01, #6
2639c     13 2D 02 F1 | 	add	local04, local01
263a0     1A 2C 06 F1 | 	add	local04, #26
263a4     16 05 58 FC | 	wrword	#2, local04
263a8                 | '   long [base+64*iii+8]:=@null | $C0000000
263a8     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
263ac     3E 26 26 F4 | 	bith	local01, #62
263b0     14 2D 02 F6 | 	mov	local04, local02
263b4     15 17 02 F6 | 	mov	arg03, local03
263b8     06 16 66 F0 | 	shl	arg03, #6
263bc     0B 2D 02 F1 | 	add	local04, arg03
263c0     08 2C 06 F1 | 	add	local04, #8
263c4     16 27 62 FC | 	wrlong	local01, local04
263c8                 | '   long[base+64*iii+32]:=0
263c8     14 2D 02 F6 | 	mov	local04, local02
263cc     15 27 02 F6 | 	mov	local01, local03
263d0     06 26 66 F0 | 	shl	local01, #6
263d4     13 2D 02 F1 | 	add	local04, local01
263d8     20 2C 06 F1 | 	add	local04, #32
263dc     16 01 68 FC | 	wrlong	#0, local04
263e0                 | '   long[base+64*iii+36]:=0
263e0     14 2D 02 F6 | 	mov	local04, local02
263e4     15 27 02 F6 | 	mov	local01, local03
263e8     06 26 66 F0 | 	shl	local01, #6
263ec     13 2D 02 F1 | 	add	local04, local01
263f0     24 2C 06 F1 | 	add	local04, #36
263f4     16 01 68 FC | 	wrlong	#0, local04
263f8                 | '   long[base+64*iii+40]:=0
263f8     14 2D 02 F6 | 	mov	local04, local02
263fc     15 27 02 F6 | 	mov	local01, local03
26400     06 26 66 F0 | 	shl	local01, #6
26404     13 2D 02 F1 | 	add	local04, local01
26408     28 2C 06 F1 | 	add	local04, #40
2640c     16 01 68 FC | 	wrlong	#0, local04
26410                 | '   long[base+64*iii+44]:=0
26410     14 2D 02 F6 | 	mov	local04, local02
26414     15 27 02 F6 | 	mov	local01, local03
26418     06 26 66 F0 | 	shl	local01, #6
2641c     13 2D 02 F1 | 	add	local04, local01
26420     2C 2C 06 F1 | 	add	local04, #44
26424     16 01 68 FC | 	wrlong	#0, local04
26428                 | '   long[base+64*iii+28]:=0
26428     14 2D 02 F6 | 	mov	local04, local02
2642c     15 27 02 F6 | 	mov	local01, local03
26430     06 26 66 F0 | 	shl	local01, #6
26434     13 2D 02 F1 | 	add	local04, local01
26438     1C 2C 06 F1 | 	add	local04, #28
2643c     16 01 68 FC | 	wrlong	#0, local04
26440     01 2A 06 F1 | 	add	local03, #1
26444     08 2A 56 F2 | 	cmps	local03, #8 wc
26448     88 FE 9F CD |  if_b	jmp	#LR__3030
2644c                 | LR__3031
2644c     02 00 00 FF 
26450     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
26454                 | '   
26454                 | ' cog:=coginit(16,@audio,@mailboxaddr)
26454     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
26458     F2 16 02 F6 | 	mov	arg03, objptr
2645c     10 2C 06 F6 | 	mov	local04, #16
26460     28 16 62 FD | 	setq	arg03
26464     0A 2D F2 FC | 	coginit	local04, arg02 wc
26468     01 2C 66 C6 |  if_b	neg	local04, #1
2646c                 | ' waitms(100)
2646c     64 12 06 F6 | 	mov	arg01, #100
26470     78 07 B0 FD | 	call	#__system___waitms
26474                 | ' return cog,base
26474     14 FD 01 F6 | 	mov	result2, local02
26478     16 FB 01 F6 | 	mov	result1, local04
2647c     A7 F0 03 F6 | 	mov	ptra, fp
26480     B2 00 A0 FD | 	call	#popregs_
26484                 | _audio096_spin2_start_ret
26484     2D 00 64 FD | 	ret
26488                 | 
26488                 | ' 
26488                 | ' ' a simple play procedure to not poke everything. 
26488                 | ' 
26488                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
26488                 | _audio096_spin2_play
26488     0C E4 05 F1 | 	add	objptr, #12
2648c     F2 00 02 F6 | 	mov	_var01, objptr
26490     06 12 66 F0 | 	shl	arg01, #6
26494     09 01 02 F1 | 	add	_var01, arg01
26498     00 13 02 F6 | 	mov	arg01, _var01
2649c     0C 12 06 F1 | 	add	arg01, #12
264a0     09 1B 62 FC | 	wrlong	arg05, arg01
264a4     00 1C 56 F2 | 	cmps	arg06, #0 wc
264a8     00 13 02 36 |  if_ae	mov	arg01, _var01
264ac     10 12 06 31 |  if_ae	add	arg01, #16
264b0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
264b4     02 1A 06 C1 |  if_b	add	arg05, #2
264b8     00 13 02 C6 |  if_b	mov	arg01, _var01
264bc     10 12 06 C1 |  if_b	add	arg01, #16
264c0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
264c4     0B 13 52 F6 | 	abs	arg01, arg03 wc
264c8     0F 1B 80 FF 
264cc     09 1F 1A FD | 	qdiv	##3546895, arg01
264d0                 | ' 
264d0                 | ' base2:=@channel1[0]+64*channel
264d0                 | ' 
264d0                 | ' 
264d0                 | ' long[base2+12]:= len
264d0                 | ' if loop >=0 
264d0                 | '   long[base2+16]:= loop
264d0     0C E4 85 F1 | 	sub	objptr, #12
264d4                 | ' else
264d4                 | '   long[base2+16]:= len+2
264d4                 | ' word[base2+20]:=vol
264d4     00 13 02 F6 | 	mov	arg01, _var01
264d8     14 12 06 F1 | 	add	arg01, #20
264dc     09 19 52 FC | 	wrword	arg04, arg01
264e0                 | ' word[base2+24]:= 3546895/splfreq 
264e0     00 19 02 F6 | 	mov	arg04, _var01
264e4     18 18 06 F1 | 	add	arg04, #24
264e8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
264e8                 | ' long[base2+28]:=$40000000    
264e8                 | ' long[base2+32]:=0    
264e8                 | ' long[base2+36]:=0    
264e8                 | ' long[base2+40]:=0    
264e8                 | ' long[base2+44]:=0    
264e8                 | ' long[base2+8]:=sample+$C0000000     
264e8     00 00 60 FF 
264ec     00 14 06 F1 | 	add	arg02, ##-1073741824
264f0     18 12 62 FD | 	getqx	arg01
264f4     09 13 82 F6 | 	negc	arg01, arg01
264f8     0C 13 52 FC | 	wrword	arg01, arg04
264fc     00 13 02 F6 | 	mov	arg01, _var01
26500     1A 12 06 F1 | 	add	arg01, #26
26504     09 01 5A FC | 	wrword	#256, arg01
26508     00 13 02 F6 | 	mov	arg01, _var01
2650c     1C 12 06 F1 | 	add	arg01, #28
26510     00 00 A0 FF 
26514     09 01 68 FC | 	wrlong	##1073741824, arg01
26518     00 13 02 F6 | 	mov	arg01, _var01
2651c     20 12 06 F1 | 	add	arg01, #32
26520     09 01 68 FC | 	wrlong	#0, arg01
26524     00 13 02 F6 | 	mov	arg01, _var01
26528     24 12 06 F1 | 	add	arg01, #36
2652c     09 01 68 FC | 	wrlong	#0, arg01
26530     00 13 02 F6 | 	mov	arg01, _var01
26534     28 12 06 F1 | 	add	arg01, #40
26538     09 01 68 FC | 	wrlong	#0, arg01
2653c     00 13 02 F6 | 	mov	arg01, _var01
26540     2C 12 06 F1 | 	add	arg01, #44
26544     09 01 68 FC | 	wrlong	#0, arg01
26548     08 00 06 F1 | 	add	_var01, #8
2654c     00 15 62 FC | 	wrlong	arg02, _var01
26550                 | _audio096_spin2_play_ret
26550     2D 00 64 FD | 	ret
26554                 | 
26554                 | ' 
26554                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
26554                 | _audio096_spin2_play8
26554                 | ' 
26554                 | ' base2:=@channel1[0]+64*channel
26554     0C E4 05 F1 | 	add	objptr, #12
26558     F2 00 02 F6 | 	mov	_var01, objptr
2655c     06 12 66 F0 | 	shl	arg01, #6
26560     09 01 02 F1 | 	add	_var01, arg01
26564                 | ' long[base2]:=0
26564     00 01 68 FC | 	wrlong	#0, _var01
26568                 | ' long[base2+8]:=sample+$40000000 
26568     00 00 20 FF 
2656c     00 14 06 F1 | 	add	arg02, ##1073741824
26570     00 13 02 F6 | 	mov	arg01, _var01
26574     08 12 06 F1 | 	add	arg01, #8
26578     09 15 62 FC | 	wrlong	arg02, arg01
2657c                 | ' if loop>=0
2657c     00 1C 56 F2 | 	cmps	arg06, #0 wc
26580     0C E4 85 F1 | 	sub	objptr, #12
26584     1C 00 90 CD |  if_b	jmp	#LR__3040
26588                 | '   long[base2+12]:=loop
26588     00 15 02 F6 | 	mov	arg02, _var01
2658c     0C 14 06 F1 | 	add	arg02, #12
26590     0A 1D 62 FC | 	wrlong	arg06, arg02
26594                 | '   long[base2+16]:= len
26594     00 1D 02 F6 | 	mov	arg06, _var01
26598     10 1C 06 F1 | 	add	arg06, #16
2659c     0E 1B 62 FC | 	wrlong	arg05, arg06
265a0     1C 00 90 FD | 	jmp	#LR__3041
265a4                 | LR__3040
265a4                 | ' else
265a4                 | '   long[base2+12]:= len
265a4     00 1D 02 F6 | 	mov	arg06, _var01
265a8     0C 1C 06 F1 | 	add	arg06, #12
265ac     0E 1B 62 FC | 	wrlong	arg05, arg06
265b0                 | '   long[base2+16]:= len+1
265b0     01 1A 06 F1 | 	add	arg05, #1
265b4     00 13 02 F6 | 	mov	arg01, _var01
265b8     10 12 06 F1 | 	add	arg01, #16
265bc     09 1B 62 FC | 	wrlong	arg05, arg01
265c0                 | LR__3041
265c0     0B 17 52 F6 | 	abs	arg03, arg03 wc
265c4     0F 1B 80 FF 
265c8     0B 1F 1A FD | 	qdiv	##3546895, arg03
265cc                 | ' word[base2+20]:=vol
265cc     00 17 02 F6 | 	mov	arg03, _var01
265d0     14 16 06 F1 | 	add	arg03, #20
265d4     0B 19 52 FC | 	wrword	arg04, arg03
265d8                 | ' word[base2+24]:= 3546895 /splfreq 
265d8     00 13 02 F6 | 	mov	arg01, _var01
265dc     18 12 06 F1 | 	add	arg01, #24
265e0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
265e0     1A 00 06 F1 | 	add	_var01, #26
265e4     18 18 62 FD | 	getqx	arg04
265e8     0C 19 82 F6 | 	negc	arg04, arg04
265ec     09 19 52 FC | 	wrword	arg04, arg01
265f0     00 01 5A FC | 	wrword	#256, _var01
265f4                 | _audio096_spin2_play8_ret
265f4     2D 00 64 FD | 	ret
265f8                 | 
265f8                 | ' 'long[base2+28]:=$40000000
265f8                 | ' 
265f8                 | '     
265f8                 | ' pub stop(channel) 'silence it
265f8                 | _audio096_spin2_stop
265f8                 | ' 
265f8                 | ' word[@channel1[0]+64*channel+20]:=0
265f8     0C E4 05 F1 | 	add	objptr, #12
265fc     F2 00 02 F6 | 	mov	_var01, objptr
26600     09 03 02 F6 | 	mov	_var02, arg01
26604     06 02 66 F0 | 	shl	_var02, #6
26608     01 01 02 F1 | 	add	_var01, _var02
2660c     14 00 06 F1 | 	add	_var01, #20
26610     00 01 58 FC | 	wrword	#0, _var01
26614                 | ' word[@channel1[0]+64*channel+20]:=0
26614     F2 00 02 F6 | 	mov	_var01, objptr
26618     06 12 66 F0 | 	shl	arg01, #6
2661c     09 01 02 F1 | 	add	_var01, arg01
26620     14 00 06 F1 | 	add	_var01, #20
26624     00 01 58 FC | 	wrword	#0, _var01
26628     0C E4 85 F1 | 	sub	objptr, #12
2662c                 | _audio096_spin2_stop_ret
2662c     2D 00 64 FD | 	ret
26630                 | hubexit
26630     81 00 80 FD | 	jmp	#cogexit
26634                 | 
26634                 | __system___setbaud
26634     14 90 06 FB | 	rdlong	muldiva_, #20
26638     09 93 02 F6 | 	mov	muldivb_, arg01
2663c     BA 00 A0 FD | 	call	#divide_
26640     97 06 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
26644                 | LR__3050
26644     3E FA 9D FA | 	rdpin	result1, #62 wc
26648     FE FC A1 F1 | 	subx	result2, result2
2664c     F4 FF 9F CD |  if_b	jmp	#LR__3050
26650                 | LR__3051
26650     40 7C 64 FD | 	dirl	#62
26654     40 7E 64 FD | 	dirl	#63
26658     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
2665c     10 92 66 F0 | 	shl	muldivb_, #16
26660     07 14 06 F6 | 	mov	arg02, #7
26664     49 15 02 F1 | 	add	arg02, muldivb_
26668     3E F8 0C FC | 	wrpin	#124, #62
2666c     3E 14 16 FC | 	wxpin	arg02, #62
26670     3F 7C 0C FC | 	wrpin	#62, #63
26674     14 14 06 F1 | 	add	arg02, #20
26678     3F 14 16 FC | 	wxpin	arg02, #63
2667c     41 7C 64 FD | 	dirh	#62
26680     41 7E 64 FD | 	dirh	#63
26684                 | __system___setbaud_ret
26684     2D 00 64 FD | 	ret
26688                 | 
26688                 | __system___txraw
26688     01 4A 05 F6 | 	mov	COUNT_, #1
2668c     A8 00 A0 FD | 	call	#pushregs_
26690     09 27 02 F6 | 	mov	local01, arg01
26694     97 06 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
26698                 | LR__3060
26698     3E FA 9D FA | 	rdpin	result1, #62 wc
2669c     FE FC A1 F1 | 	subx	result2, result2
266a0     F4 FF 9F CD |  if_b	jmp	#LR__3060
266a4                 | LR__3061
266a4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
266a8     C2 01 00 AF 
266ac     00 12 06 A6 |  if_e	mov	arg01, ##230400
266b0     80 FF BF AD |  if_e	call	#__system___setbaud
266b4     58 7C 64 FD | 	drvl	#62
266b8     3E 26 26 FC | 	wypin	local01, #62
266bc     01 FA 05 F6 | 	mov	result1, #1
266c0     A7 F0 03 F6 | 	mov	ptra, fp
266c4     B2 00 A0 FD | 	call	#popregs_
266c8                 | __system___txraw_ret
266c8     2D 00 64 FD | 	ret
266cc                 | 
266cc                 | __system___rxraw
266cc     0D 4A 05 F6 | 	mov	COUNT_, #13
266d0     A8 00 A0 FD | 	call	#pushregs_
266d4     09 27 02 F6 | 	mov	local01, arg01
266d8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
266dc     C2 01 00 AF 
266e0     00 12 06 A6 |  if_e	mov	arg01, ##230400
266e4     4C FF BF AD |  if_e	call	#__system___setbaud
266e8     00 26 0E F2 | 	cmp	local01, #0 wz
266ec     20 00 90 AD |  if_e	jmp	#LR__3070
266f0     14 2A 06 FB | 	rdlong	local03, #20
266f4     0A 2A 46 F0 | 	shr	local03, #10
266f8     15 27 02 FD | 	qmul	local01, local03
266fc     1A FA 61 FD | 	getct	result1
26700     18 2C 62 FD | 	getqx	local04
26704     16 FB 01 F1 | 	add	result1, local04
26708     FD 2E 02 F6 | 	mov	local05, result1
2670c     04 00 90 FD | 	jmp	#LR__3071
26710                 | LR__3070
26710     00 2E 06 F6 | 	mov	local05, #0
26714                 | LR__3071
26714     01 30 66 F6 | 	neg	local06, #1
26718     3F 32 06 F6 | 	mov	local07, #63
2671c     00 34 06 F6 | 	mov	local08, #0
26720     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26724     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
26728     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
2672c                 | LR__3072
2672c     08 36 16 F4 | 	testb	local09, #8 wc
26730     09 36 76 F4 | 	testbn	local09, #9 andc
26734     0A 36 46 F0 | 	shr	local09, #10
26738     01 34 06 C6 |  if_b	mov	local08, #1
2673c     40 7E 6C 3D |  if_ae	testp	#63 wz
26740     01 34 06 26 |  if_nc_and_z	mov	local08, #1
26744     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
26748     04 36 46 20 |  if_nc_and_z	shr	local09, #4
2674c                 | LR__3073
2674c     00 28 06 F6 | 	mov	local02, #0
26750     00 34 0E F2 | 	cmp	local08, #0 wz
26754     01 28 66 56 |  if_ne	neg	local02, #1
26758     00 38 06 F6 | 	mov	local10, #0
2675c     00 2A 06 F6 | 	mov	local03, #0
26760     00 26 0E F2 | 	cmp	local01, #0 wz
26764     01 2A 66 56 |  if_ne	neg	local03, #1
26768     00 2C 06 F6 | 	mov	local04, #0
2676c     00 3A 06 F6 | 	mov	local11, #0
26770     17 3D 02 F6 | 	mov	local12, local05
26774     1A FA 61 FD | 	getct	result1
26778     FD 3E 02 F6 | 	mov	local13, result1
2677c     1F 3D 82 F1 | 	sub	local12, local13
26780     00 3C 56 F2 | 	cmps	local12, #0 wc
26784     00 3A 26 C6 |  if_b	not	local11, #0
26788     00 3A 0E F2 | 	cmp	local11, #0 wz
2678c     00 2C 26 56 |  if_ne	not	local04, #0
26790     16 2B CA F7 | 	test	local03, local04 wz
26794     00 38 26 56 |  if_ne	not	local10, #0
26798     1C 29 4A F5 | 	or	local02, local10 wz
2679c     8C FF 9F AD |  if_e	jmp	#LR__3072
267a0     00 34 0E F2 | 	cmp	local08, #0 wz
267a4     1B 31 02 56 |  if_ne	mov	local06, local09
267a8     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
267ac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
267b0     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
267b4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
267b8     18 FB 01 F6 | 	mov	result1, local06
267bc     A7 F0 03 F6 | 	mov	ptra, fp
267c0     B2 00 A0 FD | 	call	#popregs_
267c4                 | __system___rxraw_ret
267c4     2D 00 64 FD | 	ret
267c8                 | 
267c8                 | __system___getus
267c8     1A FC 71 FD | 	getct	result2 wc
267cc     1A 00 62 FD | 	getct	_var01
267d0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
267d4     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
267d8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
267dc     20 00 90 5D |  if_ne	jmp	#LR__3080
267e0     14 02 06 FB | 	rdlong	_var02, #20
267e4     A1 07 00 FF 
267e8     40 02 16 FD | 	qdiv	_var02, ##1000000
267ec     10 E6 05 F1 | 	add	ptr___system__dat__, #16
267f0     18 FA 61 FD | 	getqx	result1
267f4     FD 02 02 F6 | 	mov	_var02, result1
267f8     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
267fc     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26800                 | LR__3080
26800     01 FD 11 FD | 	qdiv	result2, _var02
26804     19 FC 61 FD | 	getqy	result2
26808     28 FC 61 FD | 	setq	result2
2680c     01 01 12 FD | 	qdiv	_var01, _var02
26810     18 FA 61 FD | 	getqx	result1
26814                 | __system___getus_ret
26814     2D 00 64 FD | 	ret
26818                 | 
26818                 | __system____builtin_memmove
26818     09 01 02 F6 | 	mov	_var01, arg01
2681c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
26820     10 00 90 CD |  if_b	jmp	#LR__3090
26824     0A 03 02 F6 | 	mov	_var02, arg02
26828     0B 03 02 F1 | 	add	_var02, arg03
2682c     01 13 52 F2 | 	cmps	arg01, _var02 wc
26830     48 00 90 CD |  if_b	jmp	#LR__3096
26834                 | LR__3090
26834     0B 05 02 F6 | 	mov	_var03, arg03
26838     02 04 4E F0 | 	shr	_var03, #2 wz
2683c     18 00 90 AD |  if_e	jmp	#LR__3095
26840     97 0A 48 FB | 	callpa	#(@LR__3093-@LR__3091)>>2,fcache_load_ptr_
26844                 | LR__3091
26844     02 09 D8 FC | 	rep	@LR__3094, _var03
26848                 | LR__3092
26848     0A 05 02 FB | 	rdlong	_var03, arg02
2684c     09 05 62 FC | 	wrlong	_var03, arg01
26850     04 12 06 F1 | 	add	arg01, #4
26854     04 14 06 F1 | 	add	arg02, #4
26858                 | LR__3093
26858                 | LR__3094
26858                 | LR__3095
26858     02 16 CE F7 | 	test	arg03, #2 wz
2685c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
26860     09 03 52 5C |  if_ne	wrword	_var02, arg01
26864     02 12 06 51 |  if_ne	add	arg01, #2
26868     02 14 06 51 |  if_ne	add	arg02, #2
2686c     01 16 CE F7 | 	test	arg03, #1 wz
26870     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
26874     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
26878     28 00 90 FD | 	jmp	#LR__3102
2687c                 | LR__3096
2687c     0B 13 02 F1 | 	add	arg01, arg03
26880     0B 15 02 F1 | 	add	arg02, arg03
26884     0B 07 0A F6 | 	mov	_var04, arg03 wz
26888     18 00 90 AD |  if_e	jmp	#LR__3101
2688c     97 0A 48 FB | 	callpa	#(@LR__3099-@LR__3097)>>2,fcache_load_ptr_
26890                 | LR__3097
26890     03 09 D8 FC | 	rep	@LR__3100, _var04
26894                 | LR__3098
26894     01 12 86 F1 | 	sub	arg01, #1
26898     01 14 86 F1 | 	sub	arg02, #1
2689c     0A 03 C2 FA | 	rdbyte	_var02, arg02
268a0     09 03 42 FC | 	wrbyte	_var02, arg01
268a4                 | LR__3099
268a4                 | LR__3100
268a4                 | LR__3101
268a4                 | LR__3102
268a4     00 FB 01 F6 | 	mov	result1, _var01
268a8                 | __system____builtin_memmove_ret
268a8     2D 00 64 FD | 	ret
268ac                 | 
268ac                 | __system____builtin_strcpy
268ac     09 01 02 F6 | 	mov	_var01, arg01
268b0     97 0A 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
268b4                 | LR__3110
268b4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
268b8     09 FB 41 FC | 	wrbyte	result1, arg01
268bc     01 14 06 F1 | 	add	arg02, #1
268c0     01 12 06 F1 | 	add	arg01, #1
268c4     EC FF 9F 5D |  if_ne	jmp	#LR__3110
268c8                 | LR__3111
268c8     00 FB 01 F6 | 	mov	result1, _var01
268cc                 | __system____builtin_strcpy_ret
268cc     2D 00 64 FD | 	ret
268d0                 | 
268d0                 | __system____topofstack
268d0     00 4A 05 F6 | 	mov	COUNT_, #0
268d4     A8 00 A0 FD | 	call	#pushregs_
268d8     08 F0 07 F1 | 	add	ptra, #8
268dc     04 4E 05 F1 | 	add	fp, #4
268e0     A7 12 62 FC | 	wrlong	arg01, fp
268e4     A7 FA 01 F6 | 	mov	result1, fp
268e8     04 4E 85 F1 | 	sub	fp, #4
268ec     A7 F0 03 F6 | 	mov	ptra, fp
268f0     B2 00 A0 FD | 	call	#popregs_
268f4                 | __system____topofstack_ret
268f4     2D 00 64 FD | 	ret
268f8                 | 
268f8                 | __system___lockmem
268f8     00 FA 05 F6 | 	mov	result1, #0
268fc     01 FA 61 FD | 	cogid	result1
26900     00 FB 05 F1 | 	add	result1, #256
26904                 | LR__3120
26904     09 01 0A FB | 	rdlong	_var01, arg01 wz
26908     09 FB 61 AC |  if_e	wrlong	result1, arg01
2690c     09 01 02 AB |  if_e	rdlong	_var01, arg01
26910     09 01 02 AB |  if_e	rdlong	_var01, arg01
26914     FD 00 0A F2 | 	cmp	_var01, result1 wz
26918     E8 FF 9F 5D |  if_ne	jmp	#LR__3120
2691c                 | __system___lockmem_ret
2691c     2D 00 64 FD | 	ret
26920                 | 
26920                 | __system___string_cmp
26920     97 14 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
26924                 | LR__3130
26924     09 01 C2 FA | 	rdbyte	_var01, arg01
26928     0A 03 C2 FA | 	rdbyte	_var02, arg02
2692c     00 05 02 F6 | 	mov	_var03, _var01
26930     01 05 8A F1 | 	sub	_var03, _var02 wz
26934     01 12 06 F1 | 	add	arg01, #1
26938     01 14 06 F1 | 	add	arg02, #1
2693c     0C 00 90 5D |  if_ne	jmp	#LR__3132
26940     00 00 0E F2 | 	cmp	_var01, #0 wz
26944     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
26948     D8 FF 9F 5D |  if_ne	jmp	#LR__3130
2694c                 | LR__3131
2694c                 | LR__3132
2694c     02 FB 01 F6 | 	mov	result1, _var03
26950                 | __system___string_cmp_ret
26950     2D 00 64 FD | 	ret
26954                 | 
26954                 | __system___string_concat
26954     05 4A 05 F6 | 	mov	COUNT_, #5
26958     A8 00 A0 FD | 	call	#pushregs_
2695c     09 27 02 F6 | 	mov	local01, arg01
26960     0A 29 02 F6 | 	mov	local02, arg02
26964     13 13 02 F6 | 	mov	arg01, local01
26968     09 2B 02 F6 | 	mov	local03, arg01
2696c     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
26970                 | LR__3140
26970     15 FB C9 FA | 	rdbyte	result1, local03 wz
26974     01 2A 06 51 |  if_ne	add	local03, #1
26978     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
2697c                 | LR__3141
2697c     09 2B 82 F1 | 	sub	local03, arg01
26980     15 2D 02 F6 | 	mov	local04, local03
26984     14 13 02 F6 | 	mov	arg01, local02
26988     09 2B 02 F6 | 	mov	local03, arg01
2698c     97 06 48 FB | 	callpa	#(@LR__3143-@LR__3142)>>2,fcache_load_ptr_
26990                 | LR__3142
26990     15 FB C9 FA | 	rdbyte	result1, local03 wz
26994     01 2A 06 51 |  if_ne	add	local03, #1
26998     F4 FF 9F 5D |  if_ne	jmp	#LR__3142
2699c                 | LR__3143
2699c     09 2B 82 F1 | 	sub	local03, arg01
269a0     16 13 02 F6 | 	mov	arg01, local04
269a4     15 13 02 F1 | 	add	arg01, local03
269a8     01 12 06 F1 | 	add	arg01, #1
269ac     EC 40 B0 FD | 	call	#__system___gc_alloc_managed
269b0     FD 2E 0A F6 | 	mov	local05, result1 wz
269b4     28 00 90 AD |  if_e	jmp	#LR__3144
269b8     17 13 02 F6 | 	mov	arg01, local05
269bc     13 15 02 F6 | 	mov	arg02, local01
269c0     16 17 02 F6 | 	mov	arg03, local04
269c4     50 FE BF FD | 	call	#__system____builtin_memmove
269c8     17 13 02 F6 | 	mov	arg01, local05
269cc     16 13 02 F1 | 	add	arg01, local04
269d0     01 2A 06 F1 | 	add	local03, #1
269d4     14 15 02 F6 | 	mov	arg02, local02
269d8     15 17 02 F6 | 	mov	arg03, local03
269dc     38 FE BF FD | 	call	#__system____builtin_memmove
269e0                 | LR__3144
269e0     17 FB 01 F6 | 	mov	result1, local05
269e4     A7 F0 03 F6 | 	mov	ptra, fp
269e8     B2 00 A0 FD | 	call	#popregs_
269ec                 | __system___string_concat_ret
269ec     2D 00 64 FD | 	ret
269f0                 | 
269f0                 | __system___tx
269f0     02 4A 05 F6 | 	mov	COUNT_, #2
269f4     A8 00 A0 FD | 	call	#pushregs_
269f8     09 27 02 F6 | 	mov	local01, arg01
269fc     0A 26 0E F2 | 	cmp	local01, #10 wz
26a00     18 00 90 5D |  if_ne	jmp	#LR__3150
26a04     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a08     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
26a0c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a10     02 28 CE F7 | 	test	local02, #2 wz
26a14     0D 12 06 56 |  if_ne	mov	arg01, #13
26a18     6C FC BF 5D |  if_ne	call	#__system___txraw
26a1c                 | LR__3150
26a1c     13 13 02 F6 | 	mov	arg01, local01
26a20     64 FC BF FD | 	call	#__system___txraw
26a24     A7 F0 03 F6 | 	mov	ptra, fp
26a28     B2 00 A0 FD | 	call	#popregs_
26a2c                 | __system___tx_ret
26a2c     2D 00 64 FD | 	ret
26a30                 | 
26a30                 | __system___rx
26a30     01 4A 05 F6 | 	mov	COUNT_, #1
26a34     A8 00 A0 FD | 	call	#pushregs_
26a38                 | LR__3160
26a38     00 12 06 F6 | 	mov	arg01, #0
26a3c     8C FC BF FD | 	call	#__system___rxraw
26a40     FD 26 02 F6 | 	mov	local01, result1
26a44     FF FF 7F FF 
26a48     FF 27 0E F2 | 	cmp	local01, ##-1 wz
26a4c     E8 FF 9F AD |  if_e	jmp	#LR__3160
26a50     0D 26 0E F2 | 	cmp	local01, #13 wz
26a54     14 00 90 5D |  if_ne	jmp	#LR__3161
26a58     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a5c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26a60     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a64     02 FA CD F7 | 	test	result1, #2 wz
26a68     0A 26 06 56 |  if_ne	mov	local01, #10
26a6c                 | LR__3161
26a6c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a70     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26a74     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a78     01 12 CE F7 | 	test	arg01, #1 wz
26a7c     1C 00 90 AD |  if_e	jmp	#LR__3164
26a80     7F 26 0E F2 | 	cmp	local01, #127 wz
26a84     0C 00 90 5D |  if_ne	jmp	#LR__3162
26a88     08 12 06 F6 | 	mov	arg01, #8
26a8c     60 FF BF FD | 	call	#__system___tx
26a90     08 00 90 FD | 	jmp	#LR__3163
26a94                 | LR__3162
26a94     13 13 02 F6 | 	mov	arg01, local01
26a98     54 FF BF FD | 	call	#__system___tx
26a9c                 | LR__3163
26a9c                 | LR__3164
26a9c     13 FB 01 F6 | 	mov	result1, local01
26aa0     A7 F0 03 F6 | 	mov	ptra, fp
26aa4     B2 00 A0 FD | 	call	#popregs_
26aa8                 | __system___rx_ret
26aa8     2D 00 64 FD | 	ret
26aac                 | 
26aac                 | __system___pinwrite
26aac     09 01 02 F6 | 	mov	_var01, arg01
26ab0     1F 00 06 F5 | 	and	_var01, #31
26ab4     20 12 CE F7 | 	test	arg01, #32 wz
26ab8     06 12 46 F0 | 	shr	arg01, #6
26abc     09 13 CA F9 | 	bmask	arg01, arg01
26ac0     00 13 62 F0 | 	shl	arg01, _var01
26ac4     00 15 62 F0 | 	shl	arg02, _var01
26ac8     1C 00 90 AD |  if_e	jmp	#LR__3170
26acc     09 F7 43 F5 | 	or	dirb, arg01
26ad0     FD 01 02 F6 | 	mov	_var01, outb
26ad4     09 01 22 F5 | 	andn	_var01, arg01
26ad8     09 15 02 F5 | 	and	arg02, arg01
26adc     0A 01 42 F5 | 	or	_var01, arg02
26ae0     00 FB 03 F6 | 	mov	outb, _var01
26ae4     18 00 90 FD | 	jmp	#LR__3171
26ae8                 | LR__3170
26ae8     09 F5 43 F5 | 	or	dira, arg01
26aec     FC 01 02 F6 | 	mov	_var01, outa
26af0     09 01 22 F5 | 	andn	_var01, arg01
26af4     09 15 02 F5 | 	and	arg02, arg01
26af8     0A 01 42 F5 | 	or	_var01, arg02
26afc     00 F9 03 F6 | 	mov	outa, _var01
26b00                 | LR__3171
26b00                 | __system___pinwrite_ret
26b00     2D 00 64 FD | 	ret
26b04                 | 
26b04                 | __system___basic_read_line
26b04     06 4A 05 F6 | 	mov	COUNT_, #6
26b08     A8 00 A0 FD | 	call	#pushregs_
26b0c     09 27 02 F6 | 	mov	local01, arg01
26b10     00 28 06 F6 | 	mov	local02, #0
26b14     18 2A 06 F6 | 	mov	local03, #24
26b18     00 2C 06 F6 | 	mov	local04, #0
26b1c     18 12 06 F6 | 	mov	arg01, #24
26b20     78 3F B0 FD | 	call	#__system___gc_alloc_managed
26b24     FD 2E 0A F6 | 	mov	local05, result1 wz
26b28     17 FB 01 A6 |  if_e	mov	result1, local05
26b2c     B0 00 90 AD |  if_e	jmp	#LR__3183
26b30                 | LR__3180
26b30     13 13 02 F6 | 	mov	arg01, local01
26b34     7C 0B B0 FD | 	call	#__system___basic_get_char
26b38     FD 30 02 F6 | 	mov	local06, result1
26b3c     01 30 56 F2 | 	cmps	local06, #1 wc
26b40     8C 00 90 CD |  if_b	jmp	#LR__3182
26b44     0A 30 0E F2 | 	cmp	local06, #10 wz
26b48     10 00 90 5D |  if_ne	jmp	#LR__3181
26b4c     00 2C 0E F2 | 	cmp	local04, #0 wz
26b50     01 28 56 52 |  if_ne	cmps	local02, #1 wc
26b54     01 28 86 11 |  if_a	sub	local02, #1
26b58     74 00 90 FD | 	jmp	#LR__3182
26b5c                 | LR__3181
26b5c     0D 30 0E F2 | 	cmp	local06, #13 wz
26b60     01 2C 06 A6 |  if_e	mov	local04, #1
26b64     00 2C 06 56 |  if_ne	mov	local04, #0
26b68     08 30 0E F2 | 	cmp	local06, #8 wz
26b6c     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
26b70     01 28 56 A2 |  if_e	cmps	local02, #1 wc
26b74     01 28 86 21 |  if_nc_and_z	sub	local02, #1
26b78     B4 FF 9F AD |  if_e	jmp	#LR__3180
26b7c     17 17 02 F6 | 	mov	arg03, local05
26b80     14 17 02 F1 | 	add	arg03, local02
26b84     0B 31 42 FC | 	wrbyte	local06, arg03
26b88     01 28 06 F1 | 	add	local02, #1
26b8c     15 29 0A F2 | 	cmp	local02, local03 wz
26b90     9C FF 9F 5D |  if_ne	jmp	#LR__3180
26b94     15 13 02 F6 | 	mov	arg01, local03
26b98     20 12 06 F1 | 	add	arg01, #32
26b9c     FC 3E B0 FD | 	call	#__system___gc_alloc_managed
26ba0     FD 30 0A F6 | 	mov	local06, result1 wz
26ba4     18 FB 01 A6 |  if_e	mov	result1, local06
26ba8     34 00 90 AD |  if_e	jmp	#LR__3183
26bac     18 13 02 F6 | 	mov	arg01, local06
26bb0     17 15 02 F6 | 	mov	arg02, local05
26bb4     15 17 02 F6 | 	mov	arg03, local03
26bb8     5C FC BF FD | 	call	#__system____builtin_memmove
26bbc     20 2A 06 F1 | 	add	local03, #32
26bc0     17 13 02 F6 | 	mov	arg01, local05
26bc4     10 40 B0 FD | 	call	#__system___gc_free
26bc8     18 2F 02 F6 | 	mov	local05, local06
26bcc     60 FF 9F FD | 	jmp	#LR__3180
26bd0                 | LR__3182
26bd0     17 31 02 F6 | 	mov	local06, local05
26bd4     14 31 02 F1 | 	add	local06, local02
26bd8     18 01 48 FC | 	wrbyte	#0, local06
26bdc     17 FB 01 F6 | 	mov	result1, local05
26be0                 | LR__3183
26be0     A7 F0 03 F6 | 	mov	ptra, fp
26be4     B2 00 A0 FD | 	call	#popregs_
26be8                 | __system___basic_read_line_ret
26be8     2D 00 64 FD | 	ret
26bec                 | 
26bec                 | __system___waitms
26bec     09 01 02 F6 | 	mov	_var01, arg01
26bf0     1A 02 62 FD | 	getct	_var02
26bf4     14 04 06 FB | 	rdlong	_var03, #20
26bf8     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
26bfc                 | LR__3190
26bfc     01 00 00 FF 
26c00     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
26c04     1C 00 90 CD |  if_b	jmp	#LR__3192
26c08     02 03 02 F1 | 	add	_var02, _var03
26c0c     01 13 02 F6 | 	mov	arg01, _var02
26c10     00 12 66 FA | 	addct1	arg01, #0
26c14     24 22 60 FD | 	waitct1
26c18     01 00 00 FF 
26c1c     E8 01 86 F1 | 	sub	_var01, ##1000
26c20     D8 FF 9F FD | 	jmp	#LR__3190
26c24                 | LR__3191
26c24                 | LR__3192
26c24     01 00 56 F2 | 	cmps	_var01, #1 wc
26c28     28 00 90 CD |  if_b	jmp	#LR__3193
26c2c     02 01 02 FD | 	qmul	_var01, _var03
26c30     01 00 00 FF 
26c34     E8 17 06 F6 | 	mov	arg03, ##1000
26c38     19 FA 61 FD | 	getqy	result1
26c3c     18 12 62 FD | 	getqx	arg01
26c40     28 FA 61 FD | 	setq	result1
26c44     0B 13 12 FD | 	qdiv	arg01, arg03
26c48     18 12 62 FD | 	getqx	arg01
26c4c     01 13 62 FA | 	addct1	arg01, _var02
26c50     24 22 60 FD | 	waitct1
26c54                 | LR__3193
26c54                 | __system___waitms_ret
26c54     2D 00 64 FD | 	ret
26c58                 | 
26c58                 | __system___waitus
26c58     09 01 02 F6 | 	mov	_var01, arg01
26c5c     1A 02 62 FD | 	getct	_var02
26c60     14 04 06 FB | 	rdlong	_var03, #20
26c64     97 14 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
26c68                 | LR__3200
26c68     A1 07 00 FF 
26c6c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
26c70     1C 00 90 CD |  if_b	jmp	#LR__3202
26c74     02 03 02 F1 | 	add	_var02, _var03
26c78     01 13 02 F6 | 	mov	arg01, _var02
26c7c     00 12 66 FA | 	addct1	arg01, #0
26c80     24 22 60 FD | 	waitct1
26c84     A1 07 00 FF 
26c88     40 00 86 F1 | 	sub	_var01, ##1000000
26c8c     D8 FF 9F FD | 	jmp	#LR__3200
26c90                 | LR__3201
26c90                 | LR__3202
26c90     01 00 56 F2 | 	cmps	_var01, #1 wc
26c94     28 00 90 CD |  if_b	jmp	#LR__3203
26c98     02 01 02 FD | 	qmul	_var01, _var03
26c9c     A1 07 00 FF 
26ca0     40 16 06 F6 | 	mov	arg03, ##1000000
26ca4     19 FA 61 FD | 	getqy	result1
26ca8     18 12 62 FD | 	getqx	arg01
26cac     28 FA 61 FD | 	setq	result1
26cb0     0B 13 12 FD | 	qdiv	arg01, arg03
26cb4     18 FA 61 FD | 	getqx	result1
26cb8     FD 02 62 FA | 	addct1	_var02, result1
26cbc     24 22 60 FD | 	waitct1
26cc0                 | LR__3203
26cc0                 | __system___waitus_ret
26cc0     2D 00 64 FD | 	ret
26cc4                 | 
26cc4                 | __system___mount
26cc4     0B 4A 05 F6 | 	mov	COUNT_, #11
26cc8     A8 00 A0 FD | 	call	#pushregs_
26ccc     09 27 02 F6 | 	mov	local01, arg01
26cd0     0A 29 0A F6 | 	mov	local02, arg02 wz
26cd4     01 2A 66 F6 | 	neg	local03, #1
26cd8     01 FA 65 A6 |  if_e	neg	result1, #1
26cdc     98 02 90 AD |  if_e	jmp	#LR__3225
26ce0     13 FB C1 FA | 	rdbyte	result1, local01
26ce4     2F FA 0D F2 | 	cmp	result1, #47 wz
26ce8     28 00 90 5D |  if_ne	jmp	#LR__3212
26cec     13 13 02 F6 | 	mov	arg01, local01
26cf0     09 2D 02 F6 | 	mov	local04, arg01
26cf4     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
26cf8                 | LR__3210
26cf8     16 FB C9 FA | 	rdbyte	result1, local04 wz
26cfc     01 2C 06 51 |  if_ne	add	local04, #1
26d00     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
26d04                 | LR__3211
26d04     09 2D 82 F1 | 	sub	local04, arg01
26d08     16 FB 01 F6 | 	mov	result1, local04
26d0c     10 FA 55 F2 | 	cmps	result1, #16 wc
26d10     14 00 90 CD |  if_b	jmp	#LR__3213
26d14                 | LR__3212
26d14     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26d18     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26d1c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26d20     01 FA 65 F6 | 	neg	result1, #1
26d24     50 02 90 FD | 	jmp	#LR__3225
26d28                 | LR__3213
26d28     00 2E 06 F6 | 	mov	local05, #0
26d2c                 | LR__3214
26d2c     04 2E 56 F2 | 	cmps	local05, #4 wc
26d30     B0 00 90 3D |  if_ae	jmp	#LR__3219
26d34     17 13 02 F6 | 	mov	arg01, local05
26d38     02 12 66 F0 | 	shl	arg01, #2
26d3c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26d40     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26d44     09 FB 09 FB | 	rdlong	result1, arg01 wz
26d48     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26d4c     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
26d50     17 2B 02 86 |  if_c_and_z	mov	local03, local05
26d54     84 00 90 8D |  if_c_and_z	jmp	#LR__3218
26d58     17 13 02 F6 | 	mov	arg01, local05
26d5c     02 12 66 F0 | 	shl	arg01, #2
26d60     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26d64     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26d68     09 13 02 FB | 	rdlong	arg01, arg01
26d6c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26d70     09 2D 02 F6 | 	mov	local04, arg01
26d74     97 06 48 FB | 	callpa	#(@LR__3216-@LR__3215)>>2,fcache_load_ptr_
26d78                 | LR__3215
26d78     16 FB C9 FA | 	rdbyte	result1, local04 wz
26d7c     01 2C 06 51 |  if_ne	add	local04, #1
26d80     F4 FF 9F 5D |  if_ne	jmp	#LR__3215
26d84                 | LR__3216
26d84     09 2D 82 F1 | 	sub	local04, arg01
26d88     16 31 02 F6 | 	mov	local06, local04
26d8c     18 13 02 F6 | 	mov	arg01, local06
26d90     13 13 02 F1 | 	add	arg01, local01
26d94     09 FB C1 FA | 	rdbyte	result1, arg01
26d98     2F FA 0D F2 | 	cmp	result1, #47 wz
26d9c     18 33 02 56 |  if_ne	mov	local07, local06
26da0     13 33 02 51 |  if_ne	add	local07, local01
26da4     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
26da8     30 00 90 5D |  if_ne	jmp	#LR__3217
26dac     17 17 02 F6 | 	mov	arg03, local05
26db0     02 16 66 F0 | 	shl	arg03, #2
26db4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26db8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
26dbc     0B 15 02 FB | 	rdlong	arg02, arg03
26dc0     13 13 02 F6 | 	mov	arg01, local01
26dc4     18 17 02 F6 | 	mov	arg03, local06
26dc8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26dcc     4C 51 B0 FD | 	call	#__system__strncmp
26dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
26dd4     17 2B 02 A6 |  if_e	mov	local03, local05
26dd8     08 00 90 AD |  if_e	jmp	#LR__3219
26ddc                 | LR__3217
26ddc                 | LR__3218
26ddc     01 2E 06 F1 | 	add	local05, #1
26de0     48 FF 9F FD | 	jmp	#LR__3214
26de4                 | LR__3219
26de4     FF FF 7F FF 
26de8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
26dec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26df0     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
26df4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26df8     01 FA 65 A6 |  if_e	neg	result1, #1
26dfc     78 01 90 AD |  if_e	jmp	#LR__3225
26e00     15 2F 02 F6 | 	mov	local05, local03
26e04     17 33 02 F6 | 	mov	local07, local05
26e08     02 32 66 F0 | 	shl	local07, #2
26e0c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26e10     F3 32 02 F1 | 	add	local07, ptr___system__dat__
26e14     19 31 0A FB | 	rdlong	local06, local07 wz
26e18     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26e1c     58 00 90 AD |  if_e	jmp	#LR__3220
26e20     4C 30 06 F1 | 	add	local06, #76
26e24     18 33 0A FB | 	rdlong	local07, local06 wz
26e28     4C 30 86 F1 | 	sub	local06, #76
26e2c     48 00 90 AD |  if_e	jmp	#LR__3220
26e30     4C 30 06 F1 | 	add	local06, #76
26e34     18 33 02 FB | 	rdlong	local07, local06
26e38     19 2B 02 F6 | 	mov	local03, local07
26e3c     13 32 46 F7 | 	zerox	local07, #19
26e40     14 2A 46 F0 | 	shr	local03, #20
26e44     02 2A 66 F0 | 	shl	local03, #2
26e48     ED 2A 02 F1 | 	add	local03, __methods__
26e4c     15 2B 02 FB | 	rdlong	local03, local03
26e50     17 31 02 F6 | 	mov	local06, local05
26e54     02 30 66 F0 | 	shl	local06, #2
26e58     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26e5c     F3 30 02 F1 | 	add	local06, ptr___system__dat__
26e60     18 13 02 FB | 	rdlong	arg01, local06
26e64     F2 30 02 F6 | 	mov	local06, objptr
26e68     19 E5 01 F6 | 	mov	objptr, local07
26e6c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26e70     2D 2A 62 FD | 	call	local03
26e74     18 E5 01 F6 | 	mov	objptr, local06
26e78                 | LR__3220
26e78     17 35 02 F6 | 	mov	local08, local05
26e7c     02 34 66 F0 | 	shl	local08, #2
26e80     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26e84     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26e88     1A 29 62 FC | 	wrlong	local02, local08
26e8c     00 28 0E F2 | 	cmp	local02, #0 wz
26e90     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26e94     18 00 90 5D |  if_ne	jmp	#LR__3221
26e98     02 2E 66 F0 | 	shl	local05, #2
26e9c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26ea0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26ea4     17 01 68 FC | 	wrlong	#0, local05
26ea8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26eac     C4 00 90 FD | 	jmp	#LR__3224
26eb0                 | LR__3221
26eb0     17 37 02 F6 | 	mov	local09, local05
26eb4     04 36 66 F0 | 	shl	local09, #4
26eb8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
26ebc     F3 36 02 F1 | 	add	local09, ptr___system__dat__
26ec0     1B 13 02 F6 | 	mov	arg01, local09
26ec4     13 15 02 F6 | 	mov	arg02, local01
26ec8     10 16 06 F6 | 	mov	arg03, #16
26ecc     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
26ed0     9C 4F B0 FD | 	call	#__system__strncpy
26ed4     48 28 06 F1 | 	add	local02, #72
26ed8     14 35 0A FB | 	rdlong	local08, local02 wz
26edc     48 28 86 F1 | 	sub	local02, #72
26ee0     7C 00 90 AD |  if_e	jmp	#LR__3223
26ee4     48 28 06 F1 | 	add	local02, #72
26ee8     14 35 02 FB | 	rdlong	local08, local02
26eec     1A 39 02 F6 | 	mov	local10, local08
26ef0     13 34 46 F7 | 	zerox	local08, #19
26ef4     14 38 46 F0 | 	shr	local10, #20
26ef8     02 38 66 F0 | 	shl	local10, #2
26efc     ED 38 02 F1 | 	add	local10, __methods__
26f00     1C 39 02 FB | 	rdlong	local10, local10
26f04     1B 13 02 F6 | 	mov	arg01, local09
26f08     F2 3A 02 F6 | 	mov	local11, objptr
26f0c     1A E5 01 F6 | 	mov	objptr, local08
26f10     2D 38 62 FD | 	call	local10
26f14     1D E5 01 F6 | 	mov	objptr, local11
26f18     FD 12 0A F6 | 	mov	arg01, result1 wz
26f1c     40 00 90 AD |  if_e	jmp	#LR__3222
26f20     17 35 02 F6 | 	mov	local08, local05
26f24     02 34 66 F0 | 	shl	local08, #2
26f28     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26f2c     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26f30     1A 01 68 FC | 	wrlong	#0, local08
26f34     02 2E 66 F0 | 	shl	local05, #2
26f38     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26f3c     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26f40     17 01 68 FC | 	wrlong	#0, local05
26f44     09 13 6A F6 | 	neg	arg01, arg01 wz
26f48     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
26f4c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26f50     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26f54     01 FA 65 56 |  if_ne	neg	result1, #1
26f58     00 FA 05 A6 |  if_e	mov	result1, #0
26f5c     18 00 90 FD | 	jmp	#LR__3225
26f60                 | LR__3222
26f60                 | LR__3223
26f60     02 2E 66 F0 | 	shl	local05, #2
26f64     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26f68     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26f6c     17 37 62 FC | 	wrlong	local09, local05
26f70     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26f74                 | LR__3224
26f74     00 FA 05 F6 | 	mov	result1, #0
26f78                 | LR__3225
26f78     A7 F0 03 F6 | 	mov	ptra, fp
26f7c     B2 00 A0 FD | 	call	#popregs_
26f80                 | __system___mount_ret
26f80     2D 00 64 FD | 	ret
26f84                 | 
26f84                 | __system___chdir
26f84     00 4A 05 F6 | 	mov	COUNT_, #0
26f88     A8 00 A0 FD | 	call	#pushregs_
26f8c     40 F0 07 F1 | 	add	ptra, #64
26f90     04 4E 05 F1 | 	add	fp, #4
26f94     A7 12 62 FC | 	wrlong	arg01, fp
26f98     04 4E 05 F1 | 	add	fp, #4
26f9c     A7 14 02 F6 | 	mov	arg02, fp
26fa0     08 4E 85 F1 | 	sub	fp, #8
26fa4     6C 4B B0 FD | 	call	#__system__stat
26fa8     3C 4E 05 F1 | 	add	fp, #60
26fac     A7 FA 61 FC | 	wrlong	result1, fp
26fb0     3C 4E 85 F1 | 	sub	fp, #60
26fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
26fb8     3C 4E 05 51 |  if_ne	add	fp, #60
26fbc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
26fc0     3C 4E 85 51 |  if_ne	sub	fp, #60
26fc4     BC 00 90 5D |  if_ne	jmp	#LR__3232
26fc8     10 4E 05 F1 | 	add	fp, #16
26fcc     A7 12 02 FB | 	rdlong	arg01, fp
26fd0     10 4E 85 F1 | 	sub	fp, #16
26fd4     78 00 00 FF 
26fd8     00 12 06 F5 | 	and	arg01, ##61440
26fdc     08 00 00 FF 
26fe0     00 12 0E F2 | 	cmp	arg01, ##4096 wz
26fe4     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
26fe8     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
26fec     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
26ff0     01 FA 65 56 |  if_ne	neg	result1, #1
26ff4     8C 00 90 5D |  if_ne	jmp	#LR__3232
26ff8     04 4E 05 F1 | 	add	fp, #4
26ffc     A7 16 02 FB | 	rdlong	arg03, fp
27000     04 4E 85 F1 | 	sub	fp, #4
27004     0B 17 C2 FA | 	rdbyte	arg03, arg03
27008     2F 16 0E F2 | 	cmp	arg03, #47 wz
2700c     24 00 90 5D |  if_ne	jmp	#LR__3230
27010     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27014     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27018     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2701c     04 4E 05 F1 | 	add	fp, #4
27020     A7 14 02 FB | 	rdlong	arg02, fp
27024     04 4E 85 F1 | 	sub	fp, #4
27028     00 17 06 F6 | 	mov	arg03, #256
2702c     40 4E B0 FD | 	call	#__system__strncpy
27030     4C 00 90 FD | 	jmp	#LR__3231
27034                 | LR__3230
27034     84 E7 05 F1 | 	add	ptr___system__dat__, #388
27038     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2703c     38 4E 05 F1 | 	add	fp, #56
27040     A7 12 62 FC | 	wrlong	arg01, fp
27044     38 4E 85 F1 | 	sub	fp, #56
27048     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
2704c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27050     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27054     00 17 06 F6 | 	mov	arg03, #256
27058     14 4E B0 FD | 	call	#__system__strncpy
2705c     38 4E 05 F1 | 	add	fp, #56
27060     A7 12 02 FB | 	rdlong	arg01, fp
27064     34 4E 85 F1 | 	sub	fp, #52
27068     A7 14 02 FB | 	rdlong	arg02, fp
2706c     04 4E 85 F1 | 	sub	fp, #4
27070     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27074     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
27078     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2707c     10 00 B0 FD | 	call	#__system____getvfsforfile
27080                 | LR__3231
27080     00 FA 05 F6 | 	mov	result1, #0
27084                 | LR__3232
27084     A7 F0 03 F6 | 	mov	ptra, fp
27088     B2 00 A0 FD | 	call	#popregs_
2708c                 | __system___chdir_ret
2708c     2D 00 64 FD | 	ret
27090                 | 
27090                 | __system____getvfsforfile
27090     0E 4A 05 F6 | 	mov	COUNT_, #14
27094     A8 00 A0 FD | 	call	#pushregs_
27098     09 27 02 F6 | 	mov	local01, arg01
2709c     0A 29 02 F6 | 	mov	local02, arg02
270a0     0B 2B 02 F6 | 	mov	local03, arg03
270a4     97 10 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
270a8                 | LR__3240
270a8     14 FB C1 FA | 	rdbyte	result1, local02
270ac     2F FA 0D F2 | 	cmp	result1, #47 wz
270b0     01 28 06 A1 |  if_e	add	local02, #1
270b4     14 2D C2 AA |  if_e	rdbyte	local04, local02
270b8     01 28 86 A1 |  if_e	sub	local02, #1
270bc     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
270c0     01 28 06 A1 |  if_e	add	local02, #1
270c4     E0 FF 9F AD |  if_e	jmp	#LR__3240
270c8                 | LR__3241
270c8     14 2D C2 FA | 	rdbyte	local04, local02
270cc     2F 2C 0E F2 | 	cmp	local04, #47 wz
270d0     14 00 90 5D |  if_ne	jmp	#LR__3242
270d4     13 13 02 F6 | 	mov	arg01, local01
270d8     14 15 02 F6 | 	mov	arg02, local02
270dc     00 17 06 F6 | 	mov	arg03, #256
270e0     8C 4D B0 FD | 	call	#__system__strncpy
270e4     7C 00 90 FD | 	jmp	#LR__3244
270e8                 | LR__3242
270e8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
270ec     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
270f0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
270f4     13 13 02 F6 | 	mov	arg01, local01
270f8     00 17 06 F6 | 	mov	arg03, #256
270fc     70 4D B0 FD | 	call	#__system__strncpy
27100     14 2D CA FA | 	rdbyte	local04, local02 wz
27104     5C 00 90 AD |  if_e	jmp	#LR__3243
27108     14 2D C2 FA | 	rdbyte	local04, local02
2710c     2E 2C 0E F2 | 	cmp	local04, #46 wz
27110     01 28 06 A1 |  if_e	add	local02, #1
27114     14 2F C2 AA |  if_e	rdbyte	local05, local02
27118     01 28 86 A1 |  if_e	sub	local02, #1
2711c     17 31 02 A6 |  if_e	mov	local06, local05
27120     07 30 4E A7 |  if_e	zerox	local06, #7 wz
27124     3C 00 90 AD |  if_e	jmp	#LR__3243
27128     13 2F C2 FA | 	rdbyte	local05, local01
2712c     2F 2E 0E F2 | 	cmp	local05, #47 wz
27130     01 26 06 A1 |  if_e	add	local01, #1
27134     13 2D C2 AA |  if_e	rdbyte	local04, local01
27138     01 26 86 A1 |  if_e	sub	local01, #1
2713c     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
27140     B2 01 00 5F 
27144     08 14 06 56 |  if_ne	mov	arg02, ##@LR__5370
27148     13 13 02 56 |  if_ne	mov	arg01, local01
2714c     00 17 06 56 |  if_ne	mov	arg03, #256
27150     68 4D B0 5D |  if_ne	call	#__system__strncat
27154     13 13 02 F6 | 	mov	arg01, local01
27158     14 15 02 F6 | 	mov	arg02, local02
2715c     00 17 06 F6 | 	mov	arg03, #256
27160     58 4D B0 FD | 	call	#__system__strncat
27164                 | LR__3243
27164                 | LR__3244
27164     13 13 02 F6 | 	mov	arg01, local01
27168     10 4F B0 FD | 	call	#__system___normalizeName
2716c     13 2D CA FA | 	rdbyte	local04, local01 wz
27170     1C 00 90 AD |  if_e	jmp	#LR__3245
27174     13 2D C2 FA | 	rdbyte	local04, local01
27178     2F 2C 0E F2 | 	cmp	local04, #47 wz
2717c     01 26 06 A1 |  if_e	add	local01, #1
27180     13 31 C2 AA |  if_e	rdbyte	local06, local01
27184     01 26 86 A1 |  if_e	sub	local01, #1
27188     00 30 4E A2 |  if_e	cmps	local06, #0 wz
2718c     18 00 90 5D |  if_ne	jmp	#LR__3246
27190                 | LR__3245
27190     01 00 00 FF 
27194     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
27198     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2719c     01 00 00 FF 
271a0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
271a4     EC 01 90 FD | 	jmp	#LR__3260
271a8                 | LR__3246
271a8     00 32 06 F6 | 	mov	local07, #0
271ac                 | LR__3247
271ac     04 32 56 F2 | 	cmps	local07, #4 wc
271b0     CC 01 90 3D |  if_ae	jmp	#LR__3259
271b4     19 31 02 F6 | 	mov	local06, local07
271b8     02 30 66 F0 | 	shl	local06, #2
271bc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
271c0     F3 30 02 F1 | 	add	local06, ptr___system__dat__
271c4     18 31 0A FB | 	rdlong	local06, local06 wz
271c8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
271cc     A8 01 90 AD |  if_e	jmp	#LR__3258
271d0     19 2D 02 F6 | 	mov	local04, local07
271d4     02 2C 66 F0 | 	shl	local04, #2
271d8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
271dc     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
271e0     16 13 02 FB | 	rdlong	arg01, local04
271e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
271e8     09 35 02 F6 | 	mov	local08, arg01
271ec     97 06 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
271f0                 | LR__3248
271f0     1A FB C9 FA | 	rdbyte	result1, local08 wz
271f4     01 34 06 51 |  if_ne	add	local08, #1
271f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3248
271fc                 | LR__3249
271fc     09 35 82 F1 | 	sub	local08, arg01
27200     1A 37 02 F6 | 	mov	local09, local08
27204     1B 2D 02 F6 | 	mov	local04, local09
27208     13 2D 02 F1 | 	add	local04, local01
2720c     16 31 C2 FA | 	rdbyte	local06, local04
27210     2F 30 0E F2 | 	cmp	local06, #47 wz
27214     1B 39 02 56 |  if_ne	mov	local10, local09
27218     13 39 02 51 |  if_ne	add	local10, local01
2721c     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
27220     54 01 90 5D |  if_ne	jmp	#LR__3257
27224     19 17 02 F6 | 	mov	arg03, local07
27228     02 16 66 F0 | 	shl	arg03, #2
2722c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27230     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
27234     0B 15 02 FB | 	rdlong	arg02, arg03
27238     1B 17 02 F6 | 	mov	arg03, local09
2723c     13 13 02 F6 | 	mov	arg01, local01
27240     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27244     D4 4C B0 FD | 	call	#__system__strncmp
27248     00 FA 4D F2 | 	cmps	result1, #0 wz
2724c     28 01 90 5D |  if_ne	jmp	#LR__3257
27250     19 3B 02 F6 | 	mov	local11, local07
27254     02 3A 66 F0 | 	shl	local11, #2
27258     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2725c     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
27260     1D 3D 02 FB | 	rdlong	local12, local11
27264     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27268     97 22 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
2726c                 | LR__3250
2726c     1B 31 02 F6 | 	mov	local06, local09
27270     01 30 06 F1 | 	add	local06, #1
27274     13 31 02 F1 | 	add	local06, local01
27278     18 3B C2 FA | 	rdbyte	local11, local06
2727c     2E 3A 0E F2 | 	cmp	local11, #46 wz
27280     2C 00 90 5D |  if_ne	jmp	#LR__3252
27284     1B 3B 02 F6 | 	mov	local11, local09
27288     02 3A 06 F1 | 	add	local11, #2
2728c     13 3B 02 F1 | 	add	local11, local01
27290     1D 39 C2 FA | 	rdbyte	local10, local11
27294     2F 38 0E F2 | 	cmp	local10, #47 wz
27298     1B 3F 02 56 |  if_ne	mov	local13, local09
2729c     02 3E 06 51 |  if_ne	add	local13, #2
272a0     13 3F 02 51 |  if_ne	add	local13, local01
272a4     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
272a8     01 36 06 A1 |  if_e	add	local09, #1
272ac     BC FF 9F AD |  if_e	jmp	#LR__3250
272b0                 | LR__3251
272b0                 | LR__3252
272b0     00 2A 0E F2 | 	cmp	local03, #0 wz
272b4     15 13 02 56 |  if_ne	mov	arg01, local03
272b8     13 15 02 56 |  if_ne	mov	arg02, local01
272bc     00 17 06 56 |  if_ne	mov	arg03, #256
272c0     AC 4B B0 5D |  if_ne	call	#__system__strncpy
272c4     13 15 02 F6 | 	mov	arg02, local01
272c8     1B 15 02 F1 | 	add	arg02, local09
272cc     01 14 06 F1 | 	add	arg02, #1
272d0     13 13 02 F6 | 	mov	arg01, local01
272d4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
272d8     13 13 02 F6 | 	mov	arg01, local01
272dc     09 35 02 F6 | 	mov	local08, arg01
272e0     97 06 48 FB | 	callpa	#(@LR__3254-@LR__3253)>>2,fcache_load_ptr_
272e4                 | LR__3253
272e4     1A FB C9 FA | 	rdbyte	result1, local08 wz
272e8     01 34 06 51 |  if_ne	add	local08, #1
272ec     F4 FF 9F 5D |  if_ne	jmp	#LR__3253
272f0                 | LR__3254
272f0     09 35 82 F1 | 	sub	local08, arg01
272f4     1A 37 02 F6 | 	mov	local09, local08
272f8                 | LR__3255
272f8     01 36 56 F2 | 	cmps	local09, #1 wc
272fc     70 00 90 CD |  if_b	jmp	#LR__3256
27300     1B 2D 02 F6 | 	mov	local04, local09
27304     13 2D 02 F1 | 	add	local04, local01
27308     16 3B C2 FA | 	rdbyte	local11, local04
2730c     2F 3A 0E F2 | 	cmp	local11, #47 wz
27310     1B 3B 02 A6 |  if_e	mov	local11, local09
27314     13 3B 02 A1 |  if_e	add	local11, local01
27318     1D 01 48 AC |  if_e	wrbyte	#0, local11
2731c     01 36 86 A1 |  if_e	sub	local09, #1
27320     D4 FF 9F AD |  if_e	jmp	#LR__3255
27324     1B 2D 02 F6 | 	mov	local04, local09
27328     13 2D 02 F1 | 	add	local04, local01
2732c     16 3B C2 FA | 	rdbyte	local11, local04
27330     2E 3A 0E F2 | 	cmp	local11, #46 wz
27334     38 00 90 5D |  if_ne	jmp	#LR__3256
27338     02 36 56 F2 | 	cmps	local09, #2 wc
2733c     30 00 90 CD |  if_b	jmp	#LR__3256
27340     1B 41 02 F6 | 	mov	local14, local09
27344     01 40 86 F1 | 	sub	local14, #1
27348     13 41 02 F1 | 	add	local14, local01
2734c     20 2F C2 FA | 	rdbyte	local05, local14
27350     2F 2E 0E F2 | 	cmp	local05, #47 wz
27354     18 00 90 5D |  if_ne	jmp	#LR__3256
27358     1B 2D 02 F6 | 	mov	local04, local09
2735c     01 2C 86 F1 | 	sub	local04, #1
27360     13 2D 02 F1 | 	add	local04, local01
27364     16 01 48 FC | 	wrbyte	#0, local04
27368     02 36 86 F1 | 	sub	local09, #2
2736c     88 FF 9F FD | 	jmp	#LR__3255
27370                 | LR__3256
27370     1E FB 01 F6 | 	mov	result1, local12
27374     1C 00 90 FD | 	jmp	#LR__3260
27378                 | LR__3257
27378                 | LR__3258
27378     01 32 06 F1 | 	add	local07, #1
2737c     2C FE 9F FD | 	jmp	#LR__3247
27380                 | LR__3259
27380     02 00 00 FF 
27384     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
27388     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2738c     02 00 00 FF 
27390     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
27394                 | LR__3260
27394     A7 F0 03 F6 | 	mov	ptra, fp
27398     B2 00 A0 FD | 	call	#popregs_
2739c                 | __system____getvfsforfile_ret
2739c     2D 00 64 FD | 	ret
273a0                 | 
273a0                 | __system___basic_open
273a0     05 4A 05 F6 | 	mov	COUNT_, #5
273a4     A8 00 A0 FD | 	call	#pushregs_
273a8     0A 27 02 F6 | 	mov	local01, arg02
273ac     0B 29 02 F6 | 	mov	local02, arg03
273b0     0C 2B 02 F6 | 	mov	local03, arg04
273b4     00 2C 06 F6 | 	mov	local04, #0
273b8     8C 4A B0 FD | 	call	#__system____getftab
273bc     FD 2E 0A F6 | 	mov	local05, result1 wz
273c0     18 00 90 5D |  if_ne	jmp	#LR__3270
273c4     EE 12 02 F6 | 	mov	arg01, abortchain
273c8     0C 14 06 F6 | 	mov	arg02, #12
273cc     01 16 06 F6 | 	mov	arg03, #1
273d0     DA 00 A0 FD | 	call	#__longjmp
273d4     01 FA 65 F6 | 	neg	result1, #1
273d8     14 01 90 FD | 	jmp	#LR__3279
273dc                 | LR__3270
273dc     08 2E 06 F1 | 	add	local05, #8
273e0     17 FB 09 FB | 	rdlong	result1, local05 wz
273e4     08 2E 86 F1 | 	sub	local05, #8
273e8     17 13 02 56 |  if_ne	mov	arg01, local05
273ec     AC 41 B0 5D |  if_ne	call	#__system___closeraw
273f0     00 26 0E F2 | 	cmp	local01, #0 wz
273f4     00 28 0E A2 |  if_e	cmp	local02, #0 wz
273f8     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
273fc     3C 00 90 AD |  if_e	jmp	#LR__3272
27400     0C 12 06 F6 | 	mov	arg01, #12
27404     94 36 B0 FD | 	call	#__system___gc_alloc_managed
27408     FD 2C 0A F6 | 	mov	local04, result1 wz
2740c     18 00 90 5D |  if_ne	jmp	#LR__3271
27410     EE 12 02 F6 | 	mov	arg01, abortchain
27414     07 14 06 F6 | 	mov	arg02, #7
27418     01 16 06 F6 | 	mov	arg03, #1
2741c     DA 00 A0 FD | 	call	#__longjmp
27420     01 FA 65 F6 | 	neg	result1, #1
27424     C8 00 90 FD | 	jmp	#LR__3279
27428                 | LR__3271
27428     16 01 68 FC | 	wrlong	#0, local04
2742c     04 2C 06 F1 | 	add	local04, #4
27430     16 01 68 FC | 	wrlong	#0, local04
27434     04 2C 86 F1 | 	sub	local04, #4
27438     17 2D 62 FC | 	wrlong	local04, local05
2743c                 | LR__3272
2743c     00 26 0E F2 | 	cmp	local01, #0 wz
27440     20 00 90 AD |  if_e	jmp	#LR__3273
27444     16 27 62 FC | 	wrlong	local01, local04
27448     16 FB 01 F6 | 	mov	result1, local04
2744c     00 10 05 FF 
27450     00 FA 45 F5 | 	or	result1, ##169869312
27454     1C 2E 06 F1 | 	add	local05, #28
27458     17 FB 61 FC | 	wrlong	result1, local05
2745c     1C 2E 86 F1 | 	sub	local05, #28
27460     0C 00 90 FD | 	jmp	#LR__3274
27464                 | LR__3273
27464     1C 2E 06 F1 | 	add	local05, #28
27468     17 01 68 FC | 	wrlong	#0, local05
2746c     1C 2E 86 F1 | 	sub	local05, #28
27470                 | LR__3274
27470     00 28 0E F2 | 	cmp	local02, #0 wz
27474     28 00 90 AD |  if_e	jmp	#LR__3275
27478     04 2C 06 F1 | 	add	local04, #4
2747c     16 29 62 FC | 	wrlong	local02, local04
27480     04 2C 86 F1 | 	sub	local04, #4
27484     16 FB 01 F6 | 	mov	result1, local04
27488     00 18 05 FF 
2748c     00 FA 45 F5 | 	or	result1, ##170917888
27490     20 2E 06 F1 | 	add	local05, #32
27494     17 FB 61 FC | 	wrlong	result1, local05
27498     20 2E 86 F1 | 	sub	local05, #32
2749c     0C 00 90 FD | 	jmp	#LR__3276
274a0                 | LR__3275
274a0     20 2E 06 F1 | 	add	local05, #32
274a4     17 01 68 FC | 	wrlong	#0, local05
274a8     20 2E 86 F1 | 	sub	local05, #32
274ac                 | LR__3276
274ac     00 2A 0E F2 | 	cmp	local03, #0 wz
274b0     24 00 90 AD |  if_e	jmp	#LR__3277
274b4     08 2C 06 F1 | 	add	local04, #8
274b8     16 2B 62 FC | 	wrlong	local03, local04
274bc     08 2C 86 F1 | 	sub	local04, #8
274c0     00 20 05 FF 
274c4     00 2C 46 F5 | 	or	local04, ##171966464
274c8     24 2E 06 F1 | 	add	local05, #36
274cc     17 2D 62 FC | 	wrlong	local04, local05
274d0     24 2E 86 F1 | 	sub	local05, #36
274d4     0C 00 90 FD | 	jmp	#LR__3278
274d8                 | LR__3277
274d8     24 2E 06 F1 | 	add	local05, #36
274dc     17 01 68 FC | 	wrlong	#0, local05
274e0     24 2E 86 F1 | 	sub	local05, #36
274e4                 | LR__3278
274e4     08 2E 06 F1 | 	add	local05, #8
274e8     17 0F 68 FC | 	wrlong	#7, local05
274ec     00 FA 05 F6 | 	mov	result1, #0
274f0                 | LR__3279
274f0     A7 F0 03 F6 | 	mov	ptra, fp
274f4     B2 00 A0 FD | 	call	#popregs_
274f8                 | __system___basic_open_ret
274f8     2D 00 64 FD | 	ret
274fc                 | 
274fc                 | __system___basic_open_string
274fc     04 4A 05 F6 | 	mov	COUNT_, #4
27500     A8 00 A0 FD | 	call	#pushregs_
27504     0A 27 02 F6 | 	mov	local01, arg02
27508     0B 29 02 F6 | 	mov	local02, arg03
2750c     38 49 B0 FD | 	call	#__system____getftab
27510     FD 2A 0A F6 | 	mov	local03, result1 wz
27514     18 00 90 5D |  if_ne	jmp	#LR__3280
27518     EE 12 02 F6 | 	mov	arg01, abortchain
2751c     0C 14 06 F6 | 	mov	arg02, #12
27520     01 16 06 F6 | 	mov	arg03, #1
27524     DA 00 A0 FD | 	call	#__longjmp
27528     01 FA 65 F6 | 	neg	result1, #1
2752c     5C 00 90 FD | 	jmp	#LR__3282
27530                 | LR__3280
27530     08 2A 06 F1 | 	add	local03, #8
27534     15 19 0A FB | 	rdlong	arg04, local03 wz
27538     08 2A 86 F1 | 	sub	local03, #8
2753c     15 13 02 56 |  if_ne	mov	arg01, local03
27540     58 40 B0 5D |  if_ne	call	#__system___closeraw
27544     13 15 02 F6 | 	mov	arg02, local01
27548     14 17 02 F6 | 	mov	arg03, local02
2754c     15 13 02 F6 | 	mov	arg01, local03
27550     B6 19 06 F6 | 	mov	arg04, #438
27554     40 3D B0 FD | 	call	#__system___openraw
27558     FD 2C 02 F6 | 	mov	local04, result1
2755c     00 2C 56 F2 | 	cmps	local04, #0 wc
27560     24 00 90 3D |  if_ae	jmp	#LR__3281
27564     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27568     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2756c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27570     EE 12 02 F6 | 	mov	arg01, abortchain
27574     FD 14 02 FB | 	rdlong	arg02, result1
27578     01 16 06 F6 | 	mov	arg03, #1
2757c     DA 00 A0 FD | 	call	#__longjmp
27580     01 FA 65 F6 | 	neg	result1, #1
27584     04 00 90 FD | 	jmp	#LR__3282
27588                 | LR__3281
27588     16 FB 01 F6 | 	mov	result1, local04
2758c                 | LR__3282
2758c     A7 F0 03 F6 | 	mov	ptra, fp
27590     B2 00 A0 FD | 	call	#popregs_
27594                 | __system___basic_open_string_ret
27594     2D 00 64 FD | 	ret
27598                 | 
27598                 | __system___basic_print_char
27598     03 4A 05 F6 | 	mov	COUNT_, #3
2759c     A8 00 A0 FD | 	call	#pushregs_
275a0     0A 27 02 F6 | 	mov	local01, arg02
275a4     44 50 B0 FD | 	call	#__system___gettxfunc
275a8     FD 28 0A F6 | 	mov	local02, result1 wz
275ac     00 FA 05 A6 |  if_e	mov	result1, #0
275b0     30 00 90 AD |  if_e	jmp	#LR__3290
275b4     14 2B 02 F6 | 	mov	local03, local02
275b8     13 28 46 F7 | 	zerox	local02, #19
275bc     14 2A 46 F0 | 	shr	local03, #20
275c0     02 2A 66 F0 | 	shl	local03, #2
275c4     ED 2A 02 F1 | 	add	local03, __methods__
275c8     15 2B 02 FB | 	rdlong	local03, local03
275cc     13 13 02 F6 | 	mov	arg01, local01
275d0     F2 26 02 F6 | 	mov	local01, objptr
275d4     14 E5 01 F6 | 	mov	objptr, local02
275d8     2D 2A 62 FD | 	call	local03
275dc     13 E5 01 F6 | 	mov	objptr, local01
275e0     01 FA 05 F6 | 	mov	result1, #1
275e4                 | LR__3290
275e4     A7 F0 03 F6 | 	mov	ptra, fp
275e8     B2 00 A0 FD | 	call	#popregs_
275ec                 | __system___basic_print_char_ret
275ec     2D 00 64 FD | 	ret
275f0                 | 
275f0                 | __system___basic_print_string
275f0     03 4A 05 F6 | 	mov	COUNT_, #3
275f4     A8 00 A0 FD | 	call	#pushregs_
275f8     0A 27 02 F6 | 	mov	local01, arg02
275fc     0B 29 02 F6 | 	mov	local02, arg03
27600     E8 4F B0 FD | 	call	#__system___gettxfunc
27604     FD 2A 0A F6 | 	mov	local03, result1 wz
27608     00 FA 05 A6 |  if_e	mov	result1, #0
2760c     18 00 90 AD |  if_e	jmp	#LR__3300
27610     00 26 0E F2 | 	cmp	local01, #0 wz
27614     00 FA 05 A6 |  if_e	mov	result1, #0
27618     15 13 02 56 |  if_ne	mov	arg01, local03
2761c     14 15 02 56 |  if_ne	mov	arg02, local02
27620     13 17 02 56 |  if_ne	mov	arg03, local01
27624     08 02 B0 5D |  if_ne	call	#__system___fmtstr
27628                 | LR__3300
27628     A7 F0 03 F6 | 	mov	ptra, fp
2762c     B2 00 A0 FD | 	call	#popregs_
27630                 | __system___basic_print_string_ret
27630     2D 00 64 FD | 	ret
27634                 | 
27634                 | __system___basic_print_integer
27634     04 4A 05 F6 | 	mov	COUNT_, #4
27638     A8 00 A0 FD | 	call	#pushregs_
2763c     0A 27 02 F6 | 	mov	local01, arg02
27640     0B 29 02 F6 | 	mov	local02, arg03
27644     0C 2B 02 F6 | 	mov	local03, arg04
27648     A0 4F B0 FD | 	call	#__system___gettxfunc
2764c     FD 2C 0A F6 | 	mov	local04, result1 wz
27650     00 FA 05 A6 |  if_e	mov	result1, #0
27654     16 13 02 56 |  if_ne	mov	arg01, local04
27658     14 15 02 56 |  if_ne	mov	arg02, local02
2765c     13 17 02 56 |  if_ne	mov	arg03, local01
27660     15 19 02 56 |  if_ne	mov	arg04, local03
27664     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
27668     A7 F0 03 F6 | 	mov	ptra, fp
2766c     B2 00 A0 FD | 	call	#popregs_
27670                 | __system___basic_print_integer_ret
27670     2D 00 64 FD | 	ret
27674                 | 
27674                 | __system___basic_print_unsigned
27674     03 4A 05 F6 | 	mov	COUNT_, #3
27678     A8 00 A0 FD | 	call	#pushregs_
2767c     0A 27 02 F6 | 	mov	local01, arg02
27680     0B 29 02 F6 | 	mov	local02, arg03
27684     0C 2B 02 F6 | 	mov	local03, arg04
27688     60 4F B0 FD | 	call	#__system___gettxfunc
2768c     FD 12 0A F6 | 	mov	arg01, result1 wz
27690     00 FA 05 A6 |  if_e	mov	result1, #0
27694     3A 28 26 54 |  if_ne	bith	local02, #58
27698     14 15 02 56 |  if_ne	mov	arg02, local02
2769c     13 17 02 56 |  if_ne	mov	arg03, local01
276a0     15 19 02 56 |  if_ne	mov	arg04, local03
276a4     74 02 B0 5D |  if_ne	call	#__system___fmtnum
276a8     A7 F0 03 F6 | 	mov	ptra, fp
276ac     B2 00 A0 FD | 	call	#popregs_
276b0                 | __system___basic_print_unsigned_ret
276b0     2D 00 64 FD | 	ret
276b4                 | 
276b4                 | __system___basic_get_char
276b4     03 4A 05 F6 | 	mov	COUNT_, #3
276b8     A8 00 A0 FD | 	call	#pushregs_
276bc     70 4F B0 FD | 	call	#__system___getrxfunc
276c0     FD 26 0A F6 | 	mov	local01, result1 wz
276c4     01 FA 65 A6 |  if_e	neg	result1, #1
276c8     28 00 90 AD |  if_e	jmp	#LR__3310
276cc     13 29 02 F6 | 	mov	local02, local01
276d0     13 26 46 F7 | 	zerox	local01, #19
276d4     14 28 46 F0 | 	shr	local02, #20
276d8     02 28 66 F0 | 	shl	local02, #2
276dc     ED 28 02 F1 | 	add	local02, __methods__
276e0     14 29 02 FB | 	rdlong	local02, local02
276e4     F2 2A 02 F6 | 	mov	local03, objptr
276e8     13 E5 01 F6 | 	mov	objptr, local01
276ec     2D 28 62 FD | 	call	local02
276f0     15 E5 01 F6 | 	mov	objptr, local03
276f4                 | LR__3310
276f4     A7 F0 03 F6 | 	mov	ptra, fp
276f8     B2 00 A0 FD | 	call	#popregs_
276fc                 | __system___basic_get_char_ret
276fc     2D 00 64 FD | 	ret
27700                 | 
27700                 | __system___basic_put
27700     04 4A 05 F6 | 	mov	COUNT_, #4
27704     A8 00 A0 FD | 	call	#pushregs_
27708     0D 27 02 F6 | 	mov	local01, arg05
2770c     13 19 02 FD | 	qmul	arg04, local01
27710     09 29 02 F6 | 	mov	local02, arg01
27714     0B 2B 02 F6 | 	mov	local03, arg03
27718     00 14 0E F2 | 	cmp	arg02, #0 wz
2771c     01 14 86 51 |  if_ne	sub	arg02, #1
27720     14 13 02 56 |  if_ne	mov	arg01, local02
27724     00 16 06 56 |  if_ne	mov	arg03, #0
27728     18 2C 62 FD | 	getqx	local04
2772c     60 45 B0 5D |  if_ne	call	#__system__lseek
27730     15 15 02 F6 | 	mov	arg02, local03
27734     16 17 02 F6 | 	mov	arg03, local04
27738     14 13 02 F6 | 	mov	arg01, local02
2773c     9C 44 B0 FD | 	call	#__system__write
27740     FD 2C 02 F6 | 	mov	local04, result1
27744     01 2C 56 F2 | 	cmps	local04, #1 wc
27748     10 00 90 CD |  if_b	jmp	#LR__3320
2774c     16 91 02 F6 | 	mov	muldiva_, local04
27750     13 93 02 F6 | 	mov	muldivb_, local01
27754     BA 00 A0 FD | 	call	#divide_
27758     49 2D 02 F6 | 	mov	local04, muldivb_
2775c                 | LR__3320
2775c     16 FB 01 F6 | 	mov	result1, local04
27760     A7 F0 03 F6 | 	mov	ptra, fp
27764     B2 00 A0 FD | 	call	#popregs_
27768                 | __system___basic_put_ret
27768     2D 00 64 FD | 	ret
2776c                 | 
2776c                 | __system___basic_get
2776c     04 4A 05 F6 | 	mov	COUNT_, #4
27770     A8 00 A0 FD | 	call	#pushregs_
27774     0D 27 02 F6 | 	mov	local01, arg05
27778     13 19 02 FD | 	qmul	arg04, local01
2777c     09 29 02 F6 | 	mov	local02, arg01
27780     0B 2B 02 F6 | 	mov	local03, arg03
27784     00 14 0E F2 | 	cmp	arg02, #0 wz
27788     01 14 86 51 |  if_ne	sub	arg02, #1
2778c     14 13 02 56 |  if_ne	mov	arg01, local02
27790     00 16 06 56 |  if_ne	mov	arg03, #0
27794     18 2C 62 FD | 	getqx	local04
27798     F4 44 B0 5D |  if_ne	call	#__system__lseek
2779c     15 15 02 F6 | 	mov	arg02, local03
277a0     16 17 02 F6 | 	mov	arg03, local04
277a4     14 13 02 F6 | 	mov	arg01, local02
277a8     6C 44 B0 FD | 	call	#__system__read
277ac     FD 2C 02 F6 | 	mov	local04, result1
277b0     01 2C 56 F2 | 	cmps	local04, #1 wc
277b4     10 00 90 CD |  if_b	jmp	#LR__3330
277b8     16 91 02 F6 | 	mov	muldiva_, local04
277bc     13 93 02 F6 | 	mov	muldivb_, local01
277c0     BA 00 A0 FD | 	call	#divide_
277c4     49 2D 02 F6 | 	mov	local04, muldivb_
277c8                 | LR__3330
277c8     16 FB 01 F6 | 	mov	result1, local04
277cc     A7 F0 03 F6 | 	mov	ptra, fp
277d0     B2 00 A0 FD | 	call	#popregs_
277d4                 | __system___basic_get_ret
277d4     2D 00 64 FD | 	ret
277d8                 | 
277d8                 | __system___fmtchar
277d8     00 4A 05 F6 | 	mov	COUNT_, #0
277dc     A8 00 A0 FD | 	call	#pushregs_
277e0     10 F0 07 F1 | 	add	ptra, #16
277e4     04 4E 05 F1 | 	add	fp, #4
277e8     A7 12 62 FC | 	wrlong	arg01, fp
277ec     04 4E 05 F1 | 	add	fp, #4
277f0     A7 14 62 FC | 	wrlong	arg02, fp
277f4     04 4E 05 F1 | 	add	fp, #4
277f8     A7 16 62 FC | 	wrlong	arg03, fp
277fc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
27800     A7 16 62 FC | 	wrlong	arg03, fp
27804     08 4E 85 F1 | 	sub	fp, #8
27808     A7 12 02 FB | 	rdlong	arg01, fp
2780c     04 4E 05 F1 | 	add	fp, #4
27810     A7 14 02 FB | 	rdlong	arg02, fp
27814     04 4E 05 F1 | 	add	fp, #4
27818     A7 16 02 F6 | 	mov	arg03, fp
2781c     0C 4E 85 F1 | 	sub	fp, #12
27820     0C 00 B0 FD | 	call	#__system___fmtstr
27824     A7 F0 03 F6 | 	mov	ptra, fp
27828     B2 00 A0 FD | 	call	#popregs_
2782c                 | __system___fmtchar_ret
2782c     2D 00 64 FD | 	ret
27830                 | 
27830                 | __system___fmtstr
27830     09 4A 05 F6 | 	mov	COUNT_, #9
27834     A8 00 A0 FD | 	call	#pushregs_
27838     09 27 02 F6 | 	mov	local01, arg01
2783c     0A 29 02 F6 | 	mov	local02, arg02
27840     0B 2B 02 F6 | 	mov	local03, arg03
27844     14 19 E2 F8 | 	getbyte	arg04, local02, #0
27848     15 13 02 F6 | 	mov	arg01, local03
2784c     09 2D 02 F6 | 	mov	local04, arg01
27850     97 06 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
27854                 | LR__3340
27854     16 FB C9 FA | 	rdbyte	result1, local04 wz
27858     01 2C 06 51 |  if_ne	add	local04, #1
2785c     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
27860                 | LR__3341
27860     09 2D 82 F1 | 	sub	local04, arg01
27864     00 18 0E F2 | 	cmp	arg04, #0 wz
27868     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
2786c     14 15 02 F6 | 	mov	arg02, local02
27870     16 17 02 F6 | 	mov	arg03, local04
27874     13 13 02 F6 | 	mov	arg01, local01
27878     02 18 06 F6 | 	mov	arg04, #2
2787c     BC 49 B0 FD | 	call	#__system___fmtpad
27880     FD 2E 02 F6 | 	mov	local05, result1
27884     00 2E 56 F2 | 	cmps	local05, #0 wc
27888     17 FB 01 C6 |  if_b	mov	result1, local05
2788c     80 00 90 CD |  if_b	jmp	#LR__3344
27890     01 2C 56 F2 | 	cmps	local04, #1 wc
27894     50 00 90 CD |  if_b	jmp	#LR__3343
27898     16 31 02 F6 | 	mov	local06, local04
2789c                 | LR__3342
2789c     13 33 02 F6 | 	mov	local07, local01
278a0     13 35 02 F6 | 	mov	local08, local01
278a4     13 32 46 F7 | 	zerox	local07, #19
278a8     14 34 46 F0 | 	shr	local08, #20
278ac     02 34 66 F0 | 	shl	local08, #2
278b0     ED 34 02 F1 | 	add	local08, __methods__
278b4     1A 35 02 FB | 	rdlong	local08, local08
278b8     15 13 C2 FA | 	rdbyte	arg01, local03
278bc     F2 36 02 F6 | 	mov	local09, objptr
278c0     19 E5 01 F6 | 	mov	objptr, local07
278c4     01 2A 06 F1 | 	add	local03, #1
278c8     2D 34 62 FD | 	call	local08
278cc     1B E5 01 F6 | 	mov	objptr, local09
278d0     FD 36 02 F6 | 	mov	local09, result1
278d4     00 36 56 F2 | 	cmps	local09, #0 wc
278d8     1B FB 01 C6 |  if_b	mov	result1, local09
278dc     30 00 90 CD |  if_b	jmp	#LR__3344
278e0     1B 2F 02 F1 | 	add	local05, local09
278e4     ED 31 6E FB | 	djnz	local06, #LR__3342
278e8                 | LR__3343
278e8     14 15 02 F6 | 	mov	arg02, local02
278ec     16 17 02 F6 | 	mov	arg03, local04
278f0     13 13 02 F6 | 	mov	arg01, local01
278f4     01 18 06 F6 | 	mov	arg04, #1
278f8     40 49 B0 FD | 	call	#__system___fmtpad
278fc     FD 36 02 F6 | 	mov	local09, result1
27900     00 36 56 F2 | 	cmps	local09, #0 wc
27904     1B FB 01 C6 |  if_b	mov	result1, local09
27908     1B 2F 02 31 |  if_ae	add	local05, local09
2790c     17 FB 01 36 |  if_ae	mov	result1, local05
27910                 | LR__3344
27910     A7 F0 03 F6 | 	mov	ptra, fp
27914     B2 00 A0 FD | 	call	#popregs_
27918                 | __system___fmtstr_ret
27918     2D 00 64 FD | 	ret
2791c                 | 
2791c                 | __system___fmtnum
2791c     0B 4A 05 F6 | 	mov	COUNT_, #11
27920     A8 00 A0 FD | 	call	#pushregs_
27924     09 27 02 F6 | 	mov	local01, arg01
27928     0A 29 02 F6 | 	mov	local02, arg02
2792c     0B 2B 02 F6 | 	mov	local03, arg03
27930     0C 2D 02 F6 | 	mov	local04, arg04
27934     F8 2F 02 F6 | 	mov	local05, ptra
27938     17 31 02 F6 | 	mov	local06, local05
2793c     00 32 06 F6 | 	mov	local07, #0
27940     14 35 02 F6 | 	mov	local08, local02
27944     10 34 46 F0 | 	shr	local08, #16
27948     3F 34 06 F5 | 	and	local08, #63
2794c     14 37 E2 F8 | 	getbyte	local09, local02, #0
27950     14 39 02 F6 | 	mov	local10, local02
27954     1A 38 46 F0 | 	shr	local10, #26
27958     03 38 06 F5 | 	and	local10, #3
2795c     1C 3B 02 F6 | 	mov	local11, local10
27960     01 34 56 F2 | 	cmps	local08, #1 wc
27964     44 F0 07 F1 | 	add	ptra, #68
27968     01 34 86 31 |  if_ae	sub	local08, #1
2796c     41 36 56 F2 | 	cmps	local09, #65 wc
27970     00 36 0E C2 |  if_b	cmp	local09, #0 wz
27974     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
27978     03 3A 0E F2 | 	cmp	local11, #3 wz
2797c     00 3A 06 A6 |  if_e	mov	local11, #0
27980     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
27984     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
27988     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
2798c     00 3A 0E F2 | 	cmp	local11, #0 wz
27990     4C 00 90 AD |  if_e	jmp	#LR__3353
27994     01 32 06 F6 | 	mov	local07, #1
27998     1B 35 0A F2 | 	cmp	local08, local09 wz
2799c     18 00 90 5D |  if_ne	jmp	#LR__3351
279a0     05 34 6E FB | 	djnz	local08, #LR__3350
279a4     13 13 02 F6 | 	mov	arg01, local01
279a8     14 15 02 F6 | 	mov	arg02, local02
279ac     23 16 06 F6 | 	mov	arg03, #35
279b0     24 FE BF FD | 	call	#__system___fmtchar
279b4     88 00 90 FD | 	jmp	#LR__3357
279b8                 | LR__3350
279b8                 | LR__3351
279b8     02 3A 0E F2 | 	cmp	local11, #2 wz
279bc     18 39 02 A6 |  if_e	mov	local10, local06
279c0     01 30 06 A1 |  if_e	add	local06, #1
279c4     1C 41 48 AC |  if_e	wrbyte	#32, local10
279c8     14 00 90 AD |  if_e	jmp	#LR__3352
279cc     04 3A 0E F2 | 	cmp	local11, #4 wz
279d0     18 5B 48 AC |  if_e	wrbyte	#45, local06
279d4     01 30 06 A1 |  if_e	add	local06, #1
279d8     18 57 48 5C |  if_ne	wrbyte	#43, local06
279dc     01 30 06 51 |  if_ne	add	local06, #1
279e0                 | LR__3352
279e0                 | LR__3353
279e0     18 13 02 F6 | 	mov	arg01, local06
279e4     15 15 02 F6 | 	mov	arg02, local03
279e8     16 17 02 F6 | 	mov	arg03, local04
279ec     1A 19 02 F6 | 	mov	arg04, local08
279f0     00 1A 06 F6 | 	mov	arg05, #0
279f4     1D 28 2E F4 | 	testbn	local02, #29 wz
279f8     01 1A 06 56 |  if_ne	mov	arg05, #1
279fc     04 49 B0 FD | 	call	#__system___uitoa
27a00     FD 32 02 F1 | 	add	local07, result1
27a04     1B 33 5A F2 | 	cmps	local07, local09 wcz
27a08     24 00 90 ED |  if_be	jmp	#LR__3356
27a0c     97 0E 48 FB | 	callpa	#(@LR__3355-@LR__3354)>>2,fcache_load_ptr_
27a10                 | LR__3354
27a10     1B 39 02 F6 | 	mov	local10, local09
27a14     01 38 56 F2 | 	cmps	local10, #1 wc
27a18     01 36 86 F1 | 	sub	local09, #1
27a1c     18 39 02 36 |  if_ae	mov	local10, local06
27a20     01 30 06 31 |  if_ae	add	local06, #1
27a24     1C 47 48 3C |  if_ae	wrbyte	#35, local10
27a28     E4 FF 9F 3D |  if_ae	jmp	#LR__3354
27a2c                 | LR__3355
27a2c     18 01 48 FC | 	wrbyte	#0, local06
27a30                 | LR__3356
27a30     13 13 02 F6 | 	mov	arg01, local01
27a34     14 15 02 F6 | 	mov	arg02, local02
27a38     17 17 02 F6 | 	mov	arg03, local05
27a3c     F0 FD BF FD | 	call	#__system___fmtstr
27a40                 | LR__3357
27a40     A7 F0 03 F6 | 	mov	ptra, fp
27a44     B2 00 A0 FD | 	call	#popregs_
27a48                 | __system___fmtnum_ret
27a48     2D 00 64 FD | 	ret
27a4c                 | 
27a4c                 | __system___fmtfloat
27a4c     10 4A 05 F6 | 	mov	COUNT_, #16
27a50     A8 00 A0 FD | 	call	#pushregs_
27a54     24 F1 07 F1 | 	add	ptra, #292
27a58     04 4E 05 F1 | 	add	fp, #4
27a5c     A7 12 62 FC | 	wrlong	arg01, fp
27a60     04 4E 05 F1 | 	add	fp, #4
27a64     A7 14 62 FC | 	wrlong	arg02, fp
27a68     04 4E 05 F1 | 	add	fp, #4
27a6c     A7 16 62 FC | 	wrlong	arg03, fp
27a70     04 4E 05 F1 | 	add	fp, #4
27a74     A7 18 62 FC | 	wrlong	arg04, fp
27a78     0C 4E 05 F1 | 	add	fp, #12
27a7c     A7 14 68 FC | 	wrlong	#10, fp
27a80     08 4E 05 F1 | 	add	fp, #8
27a84     A7 00 68 FC | 	wrlong	#0, fp
27a88     08 4E 05 F1 | 	add	fp, #8
27a8c     A7 00 68 FC | 	wrlong	#0, fp
27a90     08 4E 05 F1 | 	add	fp, #8
27a94     A7 00 68 FC | 	wrlong	#0, fp
27a98     04 4E 05 F1 | 	add	fp, #4
27a9c     A7 04 68 FC | 	wrlong	#2, fp
27aa0     04 4E 05 F1 | 	add	fp, #4
27aa4     A7 00 68 FC | 	wrlong	#0, fp
27aa8     04 4E 05 F1 | 	add	fp, #4
27aac     A7 00 68 FC | 	wrlong	#0, fp
27ab0     04 4E 05 F1 | 	add	fp, #4
27ab4     A7 00 68 FC | 	wrlong	#0, fp
27ab8     04 4E 05 F1 | 	add	fp, #4
27abc     A7 00 68 FC | 	wrlong	#0, fp
27ac0     18 4E 05 F1 | 	add	fp, #24
27ac4     A7 00 68 FC | 	wrlong	#0, fp
27ac8     68 4E 05 F1 | 	add	fp, #104
27acc     A7 26 02 F6 | 	mov	local01, fp
27ad0     08 4E 85 F1 | 	sub	fp, #8
27ad4     A7 26 62 FC | 	wrlong	local01, fp
27ad8     04 4E 05 F1 | 	add	fp, #4
27adc     A7 26 62 FC | 	wrlong	local01, fp
27ae0     BC 4E 85 F1 | 	sub	fp, #188
27ae4     A7 26 02 FB | 	rdlong	local01, fp
27ae8     10 26 46 F0 | 	shr	local01, #16
27aec     3F 26 06 F5 | 	and	local01, #63
27af0     B0 4E 05 F1 | 	add	fp, #176
27af4     A7 26 62 FC | 	wrlong	local01, fp
27af8     B0 4E 85 F1 | 	sub	fp, #176
27afc     A7 26 02 FB | 	rdlong	local01, fp
27b00     1C 26 46 F0 | 	shr	local01, #28
27b04     01 26 06 F5 | 	and	local01, #1
27b08     08 4F 05 F1 | 	add	fp, #264
27b0c     A7 26 62 FC | 	wrlong	local01, fp
27b10     58 4E 85 F1 | 	sub	fp, #88
27b14     A7 26 0A FB | 	rdlong	local01, fp wz
27b18     B8 4E 85 F1 | 	sub	fp, #184
27b1c     3C 00 90 5D |  if_ne	jmp	#LR__3361
27b20     10 4E 05 F1 | 	add	fp, #16
27b24     A7 26 02 FB | 	rdlong	local01, fp
27b28     10 4E 85 F1 | 	sub	fp, #16
27b2c     61 26 0E F2 | 	cmp	local01, #97 wz
27b30     18 00 90 5D |  if_ne	jmp	#LR__3360
27b34     B8 4E 05 F1 | 	add	fp, #184
27b38     A7 1A 68 FC | 	wrlong	#13, fp
27b3c     84 4E 85 F1 | 	sub	fp, #132
27b40     A7 02 68 FC | 	wrlong	#1, fp
27b44     34 4E 85 F1 | 	sub	fp, #52
27b48     24 00 90 FD | 	jmp	#LR__3362
27b4c                 | LR__3360
27b4c     B8 4E 05 F1 | 	add	fp, #184
27b50     A7 0C 68 FC | 	wrlong	#6, fp
27b54     B8 4E 85 F1 | 	sub	fp, #184
27b58     14 00 90 FD | 	jmp	#LR__3362
27b5c                 | LR__3361
27b5c     B8 4E 05 F1 | 	add	fp, #184
27b60     A7 26 02 FB | 	rdlong	local01, fp
27b64     01 26 86 F1 | 	sub	local01, #1
27b68     A7 26 62 FC | 	wrlong	local01, fp
27b6c     B8 4E 85 F1 | 	sub	fp, #184
27b70                 | LR__3362
27b70     08 4E 05 F1 | 	add	fp, #8
27b74     A7 26 02 FB | 	rdlong	local01, fp
27b78     16 26 46 F0 | 	shr	local01, #22
27b7c     03 26 06 F5 | 	and	local01, #3
27b80     04 4F 05 F1 | 	add	fp, #260
27b84     A7 26 62 FC | 	wrlong	local01, fp
27b88     04 4F 85 F1 | 	sub	fp, #260
27b8c     A7 26 02 FB | 	rdlong	local01, fp
27b90     1D 26 46 F0 | 	shr	local01, #29
27b94     01 26 06 F5 | 	and	local01, #1
27b98     B4 4E 05 F1 | 	add	fp, #180
27b9c     A7 26 62 FC | 	wrlong	local01, fp
27ba0     B4 4E 85 F1 | 	sub	fp, #180
27ba4     A7 26 02 FB | 	rdlong	local01, fp
27ba8     13 27 EA F8 | 	getbyte	local01, local01, #1
27bac     60 4E 05 F1 | 	add	fp, #96
27bb0     A7 26 62 FC | 	wrlong	local01, fp
27bb4     60 4E 85 F1 | 	sub	fp, #96
27bb8     A7 26 02 FB | 	rdlong	local01, fp
27bbc     13 27 E2 F8 | 	getbyte	local01, local01, #0
27bc0     64 4E 05 F1 | 	add	fp, #100
27bc4     A7 26 62 FC | 	wrlong	local01, fp
27bc8     00 26 06 F6 | 	mov	local01, #0
27bcc     5C 4E 85 F1 | 	sub	fp, #92
27bd0     A7 1A 02 FB | 	rdlong	arg05, fp
27bd4     65 1A 0E F2 | 	cmp	arg05, #101 wz
27bd8     01 26 06 A6 |  if_e	mov	local01, #1
27bdc     14 4E 05 F1 | 	add	fp, #20
27be0     A7 26 62 FC | 	wrlong	local01, fp
27be4     98 4E 05 F1 | 	add	fp, #152
27be8     A7 28 0A FB | 	rdlong	local02, fp wz
27bec     45 26 06 56 |  if_ne	mov	local01, #69
27bf0     65 26 06 A6 |  if_e	mov	local01, #101
27bf4     8C 4E 85 F1 | 	sub	fp, #140
27bf8     A7 26 62 FC | 	wrlong	local01, fp
27bfc     20 4E 85 F1 | 	sub	fp, #32
27c00     A7 26 02 FB | 	rdlong	local01, fp
27c04     10 4E 85 F1 | 	sub	fp, #16
27c08     61 26 0E F2 | 	cmp	local01, #97 wz
27c0c     4C 00 90 5D |  if_ne	jmp	#LR__3363
27c10     24 4E 05 F1 | 	add	fp, #36
27c14     A7 02 68 FC | 	wrlong	#1, fp
27c18     98 4E 05 F1 | 	add	fp, #152
27c1c     A7 28 0A FB | 	rdlong	local02, fp wz
27c20     50 26 06 56 |  if_ne	mov	local01, #80
27c24     70 26 06 A6 |  if_e	mov	local01, #112
27c28     8C 4E 85 F1 | 	sub	fp, #140
27c2c     A7 26 62 FC | 	wrlong	local01, fp
27c30     14 4E 85 F1 | 	sub	fp, #20
27c34     A7 04 68 FC | 	wrlong	#2, fp
27c38     1C 4E 05 F1 | 	add	fp, #28
27c3c     A7 02 68 FC | 	wrlong	#1, fp
27c40     84 4E 05 F1 | 	add	fp, #132
27c44     A7 28 0A FB | 	rdlong	local02, fp wz
27c48     58 26 06 56 |  if_ne	mov	local01, #88
27c4c     78 26 06 A6 |  if_e	mov	local01, #120
27c50     7C 4E 85 F1 | 	sub	fp, #124
27c54     A7 26 62 FC | 	wrlong	local01, fp
27c58     40 4E 85 F1 | 	sub	fp, #64
27c5c                 | LR__3363
27c5c     10 4E 05 F1 | 	add	fp, #16
27c60     A7 26 02 FB | 	rdlong	local01, fp
27c64     10 4E 85 F1 | 	sub	fp, #16
27c68     23 26 0E F2 | 	cmp	local01, #35 wz
27c6c     3C 00 90 5D |  if_ne	jmp	#LR__3366
27c70     48 4E 05 F1 | 	add	fp, #72
27c74     A7 02 68 FC | 	wrlong	#1, fp
27c78     C8 4E 05 F1 | 	add	fp, #200
27c7c     A7 26 0A FB | 	rdlong	local01, fp wz
27c80     10 4F 85 F1 | 	sub	fp, #272
27c84     18 00 90 AD |  if_e	jmp	#LR__3364
27c88     10 4E 05 F1 | 	add	fp, #16
27c8c     A7 CC 68 FC | 	wrlong	#102, fp
27c90     00 4F 05 F1 | 	add	fp, #256
27c94     A7 00 68 FC | 	wrlong	#0, fp
27c98     10 4F 85 F1 | 	sub	fp, #272
27c9c     0C 00 90 FD | 	jmp	#LR__3365
27ca0                 | LR__3364
27ca0     10 4F 05 F1 | 	add	fp, #272
27ca4     A7 02 68 FC | 	wrlong	#1, fp
27ca8     10 4F 85 F1 | 	sub	fp, #272
27cac                 | LR__3365
27cac                 | LR__3366
27cac     08 4E 05 F1 | 	add	fp, #8
27cb0     A7 26 02 FB | 	rdlong	local01, fp
27cb4     1A 26 46 F0 | 	shr	local01, #26
27cb8     03 26 06 F5 | 	and	local01, #3
27cbc     5C 4E 05 F1 | 	add	fp, #92
27cc0     A7 26 62 FC | 	wrlong	local01, fp
27cc4     58 4E 85 F1 | 	sub	fp, #88
27cc8     A7 FA 01 FB | 	rdlong	result1, fp
27ccc     0C 4E 85 F1 | 	sub	fp, #12
27cd0     1F FA 4D F0 | 	shr	result1, #31 wz
27cd4     20 00 90 AD |  if_e	jmp	#LR__3367
27cd8     2C 4E 05 F1 | 	add	fp, #44
27cdc     A7 5A 68 FC | 	wrlong	#45, fp
27ce0     20 4E 85 F1 | 	sub	fp, #32
27ce4     A7 FA 01 FB | 	rdlong	result1, fp
27ce8     1F FA E5 F4 | 	bitnot	result1, #31
27cec     A7 FA 61 FC | 	wrlong	result1, fp
27cf0     0C 4E 85 F1 | 	sub	fp, #12
27cf4     3C 00 90 FD | 	jmp	#LR__3369
27cf8                 | LR__3367
27cf8     64 4E 05 F1 | 	add	fp, #100
27cfc     A7 26 02 FB | 	rdlong	local01, fp
27d00     64 4E 85 F1 | 	sub	fp, #100
27d04     01 26 0E F2 | 	cmp	local01, #1 wz
27d08     2C 4E 05 A1 |  if_e	add	fp, #44
27d0c     A7 56 68 AC |  if_e	wrlong	#43, fp
27d10     2C 4E 85 A1 |  if_e	sub	fp, #44
27d14     1C 00 90 AD |  if_e	jmp	#LR__3368
27d18     64 4E 05 F1 | 	add	fp, #100
27d1c     A7 26 02 FB | 	rdlong	local01, fp
27d20     64 4E 85 F1 | 	sub	fp, #100
27d24     02 26 0E F2 | 	cmp	local01, #2 wz
27d28     2C 4E 05 A1 |  if_e	add	fp, #44
27d2c     A7 40 68 AC |  if_e	wrlong	#32, fp
27d30     2C 4E 85 A1 |  if_e	sub	fp, #44
27d34                 | LR__3368
27d34                 | LR__3369
27d34     08 4E 05 F1 | 	add	fp, #8
27d38     A7 26 02 FB | 	rdlong	local01, fp
27d3c     18 26 46 F0 | 	shr	local01, #24
27d40     03 26 06 F5 | 	and	local01, #3
27d44     3C 4E 05 F1 | 	add	fp, #60
27d48     A7 26 62 FC | 	wrlong	local01, fp
27d4c     00 26 06 F6 | 	mov	local01, #0
27d50     18 4E 85 F1 | 	sub	fp, #24
27d54     A7 2A 0A FB | 	rdlong	local03, fp wz
27d58     2C 4E 85 F1 | 	sub	fp, #44
27d5c     18 00 90 5D |  if_ne	jmp	#LR__3370
27d60     1C 4E 05 F1 | 	add	fp, #28
27d64     A7 2C 02 FB | 	rdlong	local04, fp
27d68     1C 4E 85 F1 | 	sub	fp, #28
27d6c     16 2F 02 F6 | 	mov	local05, local04
27d70     0A 2E 0E F2 | 	cmp	local05, #10 wz
27d74     04 00 90 AD |  if_e	jmp	#LR__3371
27d78                 | LR__3370
27d78     01 26 66 F5 | 	xor	local01, #1
27d7c                 | LR__3371
27d7c     3C 4E 05 F1 | 	add	fp, #60
27d80     A7 26 62 FC | 	wrlong	local01, fp
27d84     3C 4E 85 F1 | 	sub	fp, #60
27d88     00 26 0E F2 | 	cmp	local01, #0 wz
27d8c     0C 01 90 AD |  if_e	jmp	#LR__3373
27d90     44 4E 05 F1 | 	add	fp, #68
27d94     A7 2E 02 FB | 	rdlong	local05, fp
27d98     44 4E 85 F1 | 	sub	fp, #68
27d9c     17 2B 02 F6 | 	mov	local03, local05
27da0     02 2A 0E F2 | 	cmp	local03, #2 wz
27da4     F4 00 90 5D |  if_ne	jmp	#LR__3373
27da8     0C 4F 05 F1 | 	add	fp, #268
27dac     A7 30 02 FB | 	rdlong	local06, fp
27db0     0C 4F 85 F1 | 	sub	fp, #268
27db4     18 2D 02 F6 | 	mov	local04, local06
27db8     02 2C 0E F2 | 	cmp	local04, #2 wz
27dbc     DC 00 90 AD |  if_e	jmp	#LR__3373
27dc0     C0 4E 05 F1 | 	add	fp, #192
27dc4     A7 12 02 FB | 	rdlong	arg01, fp
27dc8     94 4E 85 F1 | 	sub	fp, #148
27dcc     A7 14 02 FB | 	rdlong	arg02, fp
27dd0     14 4E 05 F1 | 	add	fp, #20
27dd4     A7 16 02 FB | 	rdlong	arg03, fp
27dd8     40 4E 85 F1 | 	sub	fp, #64
27ddc     8C 47 B0 FD | 	call	#__system__emitsign_0564
27de0     14 4F 05 F1 | 	add	fp, #276
27de4     A7 FA 61 FC | 	wrlong	result1, fp
27de8     14 4F 85 F1 | 	sub	fp, #276
27dec     00 FA 55 F2 | 	cmps	result1, #0 wc
27df0     14 4F 05 C1 |  if_b	add	fp, #276
27df4     A7 FA 01 CB |  if_b	rdlong	result1, fp
27df8     14 4F 85 C1 |  if_b	sub	fp, #276
27dfc     6C 0B 90 CD |  if_b	jmp	#LR__3423
27e00     C0 4E 05 F1 | 	add	fp, #192
27e04     A7 26 02 FB | 	rdlong	local01, fp
27e08     54 4E 05 F1 | 	add	fp, #84
27e0c     A7 2E 02 FB | 	rdlong	local05, fp
27e10     17 2B 02 F6 | 	mov	local03, local05
27e14     17 27 02 F1 | 	add	local01, local05
27e18     54 4E 85 F1 | 	sub	fp, #84
27e1c     A7 26 62 FC | 	wrlong	local01, fp
27e20     58 4E 85 F1 | 	sub	fp, #88
27e24     A7 26 0A FB | 	rdlong	local01, fp wz
27e28     68 4E 85 F1 | 	sub	fp, #104
27e2c     60 00 90 AD |  if_e	jmp	#LR__3372
27e30     68 4E 05 F1 | 	add	fp, #104
27e34     A7 26 02 FB | 	rdlong	local01, fp
27e38     AC 4E 05 F1 | 	add	fp, #172
27e3c     A7 2A 02 FB | 	rdlong	local03, fp
27e40     15 27 82 F1 | 	sub	local01, local03
27e44     AC 4E 85 F1 | 	sub	fp, #172
27e48     A7 26 62 FC | 	wrlong	local01, fp
27e4c     68 4E 85 F1 | 	sub	fp, #104
27e50     00 26 56 F2 | 	cmps	local01, #0 wc
27e54     68 4E 05 C1 |  if_b	add	fp, #104
27e58     A7 00 68 CC |  if_b	wrlong	#0, fp
27e5c     68 4E 85 C1 |  if_b	sub	fp, #104
27e60     08 4E 05 F1 | 	add	fp, #8
27e64     A7 26 02 FB | 	rdlong	local01, fp
27e68     E8 26 06 F4 | 	bitl	local01, #232
27e6c     A7 26 62 FC | 	wrlong	local01, fp
27e70     60 4E 05 F1 | 	add	fp, #96
27e74     A7 2E 02 FB | 	rdlong	local05, fp
27e78     17 2B 02 F6 | 	mov	local03, local05
27e7c     08 2A 66 F0 | 	shl	local03, #8
27e80     15 27 42 F5 | 	or	local01, local03
27e84     60 4E 85 F1 | 	sub	fp, #96
27e88     A7 26 62 FC | 	wrlong	local01, fp
27e8c     08 4E 85 F1 | 	sub	fp, #8
27e90                 | LR__3372
27e90     3C 4E 05 F1 | 	add	fp, #60
27e94     A7 00 68 FC | 	wrlong	#0, fp
27e98     3C 4E 85 F1 | 	sub	fp, #60
27e9c                 | LR__3373
27e9c     0C 4E 05 F1 | 	add	fp, #12
27ea0     A7 12 02 FB | 	rdlong	arg01, fp
27ea4     0C 4E 85 F1 | 	sub	fp, #12
27ea8     EC 21 B0 FD | 	call	#__system____builtin_ilogb
27eac     FF FF 3F FF 
27eb0     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
27eb4     50 00 90 5D |  if_ne	jmp	#LR__3375
27eb8     2C 4E 05 F1 | 	add	fp, #44
27ebc     A7 26 0A FB | 	rdlong	local01, fp wz
27ec0     2C 4E 85 F1 | 	sub	fp, #44
27ec4     24 00 90 AD |  if_e	jmp	#LR__3374
27ec8     C0 4E 05 F1 | 	add	fp, #192
27ecc     A7 28 02 FB | 	rdlong	local02, fp
27ed0     14 2B 02 F6 | 	mov	local03, local02
27ed4     01 2A 06 F1 | 	add	local03, #1
27ed8     A7 2A 62 FC | 	wrlong	local03, fp
27edc     94 4E 85 F1 | 	sub	fp, #148
27ee0     A7 2C 02 FB | 	rdlong	local04, fp
27ee4     2C 4E 85 F1 | 	sub	fp, #44
27ee8     14 2D 42 FC | 	wrbyte	local04, local02
27eec                 | LR__3374
27eec     C0 4E 05 F1 | 	add	fp, #192
27ef0     A7 12 02 FB | 	rdlong	arg01, fp
27ef4     C0 4E 85 F1 | 	sub	fp, #192
27ef8     B2 01 00 FF 
27efc     0A 14 06 F6 | 	mov	arg02, ##@LR__5371
27f00     A8 E9 BF FD | 	call	#__system____builtin_strcpy
27f04     A4 08 90 FD | 	jmp	#LR__3411
27f08                 | LR__3375
27f08     0C 4E 05 F1 | 	add	fp, #12
27f0c     A7 28 02 FB | 	rdlong	local02, fp
27f10     0C 4E 85 F1 | 	sub	fp, #12
27f14     14 13 02 F6 | 	mov	arg01, local02
27f18     7C 21 B0 FD | 	call	#__system____builtin_ilogb
27f1c     00 00 40 FF 
27f20     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
27f24     50 00 90 5D |  if_ne	jmp	#LR__3377
27f28     2C 4E 05 F1 | 	add	fp, #44
27f2c     A7 26 0A FB | 	rdlong	local01, fp wz
27f30     2C 4E 85 F1 | 	sub	fp, #44
27f34     24 00 90 AD |  if_e	jmp	#LR__3376
27f38     C0 4E 05 F1 | 	add	fp, #192
27f3c     A7 28 02 FB | 	rdlong	local02, fp
27f40     14 2B 02 F6 | 	mov	local03, local02
27f44     01 2A 06 F1 | 	add	local03, #1
27f48     A7 2A 62 FC | 	wrlong	local03, fp
27f4c     94 4E 85 F1 | 	sub	fp, #148
27f50     A7 2C 02 FB | 	rdlong	local04, fp
27f54     2C 4E 85 F1 | 	sub	fp, #44
27f58     14 2D 42 FC | 	wrbyte	local04, local02
27f5c                 | LR__3376
27f5c     C0 4E 05 F1 | 	add	fp, #192
27f60     A7 12 02 FB | 	rdlong	arg01, fp
27f64     C0 4E 85 F1 | 	sub	fp, #192
27f68     B2 01 00 FF 
27f6c     0E 14 06 F6 | 	mov	arg02, ##@LR__5372
27f70     38 E9 BF FD | 	call	#__system____builtin_strcpy
27f74     34 08 90 FD | 	jmp	#LR__3411
27f78                 | LR__3377
27f78     10 4E 05 F1 | 	add	fp, #16
27f7c     A7 26 02 FB | 	rdlong	local01, fp
27f80     10 4E 85 F1 | 	sub	fp, #16
27f84     67 26 0E F2 | 	cmp	local01, #103 wz
27f88     10 4E 05 51 |  if_ne	add	fp, #16
27f8c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
27f90     10 4E 85 51 |  if_ne	sub	fp, #16
27f94     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
27f98     94 01 90 5D |  if_ne	jmp	#LR__3382
27f9c     0C 4E 05 F1 | 	add	fp, #12
27fa0     A7 12 02 FB | 	rdlong	arg01, fp
27fa4     08 4E 05 F1 | 	add	fp, #8
27fa8     A7 14 02 F6 | 	mov	arg02, fp
27fac     0C 4E 05 F1 | 	add	fp, #12
27fb0     A7 16 02 F6 | 	mov	arg03, fp
27fb4     98 4E 05 F1 | 	add	fp, #152
27fb8     A7 18 02 FB | 	rdlong	arg04, fp
27fbc     9C 4E 85 F1 | 	sub	fp, #156
27fc0     A7 1A 02 FB | 	rdlong	arg05, fp
27fc4     1C 4E 85 F1 | 	sub	fp, #28
27fc8     AC 43 B0 FD | 	call	#__system__disassemble_0562
27fcc     10 4E 05 F1 | 	add	fp, #16
27fd0     A7 26 02 FB | 	rdlong	local01, fp
27fd4     10 4E 85 F1 | 	sub	fp, #16
27fd8     23 26 0E F2 | 	cmp	local01, #35 wz
27fdc     A0 00 90 5D |  if_ne	jmp	#LR__3379
27fe0     20 4E 05 F1 | 	add	fp, #32
27fe4     A7 26 02 FB | 	rdlong	local01, fp
27fe8     98 4E 05 F1 | 	add	fp, #152
27fec     A7 2A 02 FB | 	rdlong	local03, fp
27ff0     B8 4E 85 F1 | 	sub	fp, #184
27ff4     15 27 5A F2 | 	cmps	local01, local03 wcz
27ff8     24 4E 05 11 |  if_a	add	fp, #36
27ffc     A7 02 68 1C |  if_a	wrlong	#1, fp
28000     24 4E 85 11 |  if_a	sub	fp, #36
28004     A4 01 90 1D |  if_a	jmp	#LR__3385
28008     20 4E 05 F1 | 	add	fp, #32
2800c     A7 26 02 FB | 	rdlong	local01, fp
28010     20 4E 85 F1 | 	sub	fp, #32
28014     00 26 56 F2 | 	cmps	local01, #0 wc
28018     2C 00 90 3D |  if_ae	jmp	#LR__3378
2801c     B8 4E 05 F1 | 	add	fp, #184
28020     A7 26 02 FB | 	rdlong	local01, fp
28024     13 27 62 F6 | 	neg	local01, local01
28028     98 4E 85 F1 | 	sub	fp, #152
2802c     A7 2A 02 FB | 	rdlong	local03, fp
28030     20 4E 85 F1 | 	sub	fp, #32
28034     13 2B 5A F2 | 	cmps	local03, local01 wcz
28038     24 4E 05 E1 |  if_be	add	fp, #36
2803c     A7 02 68 EC |  if_be	wrlong	#1, fp
28040     24 4E 85 E1 |  if_be	sub	fp, #36
28044     64 01 90 FD | 	jmp	#LR__3385
28048                 | LR__3378
28048     20 4E 05 F1 | 	add	fp, #32
2804c     A7 26 02 FB | 	rdlong	local01, fp
28050     20 4E 85 F1 | 	sub	fp, #32
28054     01 26 56 F2 | 	cmps	local01, #1 wc
28058     50 01 90 CD |  if_b	jmp	#LR__3385
2805c     B8 4E 05 F1 | 	add	fp, #184
28060     A7 26 02 FB | 	rdlong	local01, fp
28064     98 4E 85 F1 | 	sub	fp, #152
28068     A7 2A 02 FB | 	rdlong	local03, fp
2806c     15 27 82 F1 | 	sub	local01, local03
28070     98 4E 05 F1 | 	add	fp, #152
28074     A7 26 62 FC | 	wrlong	local01, fp
28078     B8 4E 85 F1 | 	sub	fp, #184
2807c     2C 01 90 FD | 	jmp	#LR__3385
28080                 | LR__3379
28080     00 26 06 F6 | 	mov	local01, #0
28084     08 4E 05 F1 | 	add	fp, #8
28088     A7 28 02 FB | 	rdlong	local02, fp
2808c     1C 28 46 F0 | 	shr	local02, #28
28090     01 28 0E F5 | 	and	local02, #1 wz
28094     01 26 06 A6 |  if_e	mov	local01, #1
28098     2C 4E 05 F1 | 	add	fp, #44
2809c     A7 26 62 FC | 	wrlong	local01, fp
280a0     14 4E 85 F1 | 	sub	fp, #20
280a4     A7 26 02 FB | 	rdlong	local01, fp
280a8     98 4E 05 F1 | 	add	fp, #152
280ac     A7 2A 02 FB | 	rdlong	local03, fp
280b0     B8 4E 85 F1 | 	sub	fp, #184
280b4     15 27 52 F2 | 	cmps	local01, local03 wc
280b8     18 00 90 3D |  if_ae	jmp	#LR__3380
280bc     20 4E 05 F1 | 	add	fp, #32
280c0     A7 2C 02 FB | 	rdlong	local04, fp
280c4     20 4E 85 F1 | 	sub	fp, #32
280c8     FF FF 7F FF 
280cc     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
280d0     10 00 90 3D |  if_ae	jmp	#LR__3381
280d4                 | LR__3380
280d4     24 4E 05 F1 | 	add	fp, #36
280d8     A7 02 68 FC | 	wrlong	#1, fp
280dc     24 4E 85 F1 | 	sub	fp, #36
280e0     C8 00 90 FD | 	jmp	#LR__3385
280e4                 | LR__3381
280e4     B8 4E 05 F1 | 	add	fp, #184
280e8     A7 2C 02 FB | 	rdlong	local04, fp
280ec     98 4E 85 F1 | 	sub	fp, #152
280f0     A7 2A 02 FB | 	rdlong	local03, fp
280f4     15 2D 82 F1 | 	sub	local04, local03
280f8     98 4E 05 F1 | 	add	fp, #152
280fc     A7 2C 62 FC | 	wrlong	local04, fp
28100     AC 4E 85 F1 | 	sub	fp, #172
28104     A7 12 02 FB | 	rdlong	arg01, fp
28108     08 4E 05 F1 | 	add	fp, #8
2810c     A7 14 02 F6 | 	mov	arg02, fp
28110     0C 4E 05 F1 | 	add	fp, #12
28114     A7 16 02 F6 | 	mov	arg03, fp
28118     16 19 62 F6 | 	neg	arg04, local04
2811c     04 4E 85 F1 | 	sub	fp, #4
28120     A7 1A 02 FB | 	rdlong	arg05, fp
28124     1C 4E 85 F1 | 	sub	fp, #28
28128     4C 42 B0 FD | 	call	#__system__disassemble_0562
2812c     7C 00 90 FD | 	jmp	#LR__3385
28130                 | LR__3382
28130     24 4E 05 F1 | 	add	fp, #36
28134     A7 26 0A FB | 	rdlong	local01, fp wz
28138     24 4E 85 F1 | 	sub	fp, #36
2813c     34 00 90 AD |  if_e	jmp	#LR__3383
28140     0C 4E 05 F1 | 	add	fp, #12
28144     A7 12 02 FB | 	rdlong	arg01, fp
28148     08 4E 05 F1 | 	add	fp, #8
2814c     A7 14 02 F6 | 	mov	arg02, fp
28150     0C 4E 05 F1 | 	add	fp, #12
28154     A7 16 02 F6 | 	mov	arg03, fp
28158     98 4E 05 F1 | 	add	fp, #152
2815c     A7 18 02 FB | 	rdlong	arg04, fp
28160     9C 4E 85 F1 | 	sub	fp, #156
28164     A7 1A 02 FB | 	rdlong	arg05, fp
28168     1C 4E 85 F1 | 	sub	fp, #28
2816c     08 42 B0 FD | 	call	#__system__disassemble_0562
28170     38 00 90 FD | 	jmp	#LR__3384
28174                 | LR__3383
28174     0C 4E 05 F1 | 	add	fp, #12
28178     A7 12 02 FB | 	rdlong	arg01, fp
2817c     08 4E 05 F1 | 	add	fp, #8
28180     A7 14 02 F6 | 	mov	arg02, fp
28184     0C 4E 05 F1 | 	add	fp, #12
28188     A7 16 02 F6 | 	mov	arg03, fp
2818c     98 4E 05 F1 | 	add	fp, #152
28190     A7 2C 02 FB | 	rdlong	local04, fp
28194     01 2C 06 F1 | 	add	local04, #1
28198     16 19 62 F6 | 	neg	arg04, local04
2819c     9C 4E 85 F1 | 	sub	fp, #156
281a0     A7 1A 02 FB | 	rdlong	arg05, fp
281a4     1C 4E 85 F1 | 	sub	fp, #28
281a8     CC 41 B0 FD | 	call	#__system__disassemble_0562
281ac                 | LR__3384
281ac                 | LR__3385
281ac     1C 4E 05 F1 | 	add	fp, #28
281b0     A7 26 02 FB | 	rdlong	local01, fp
281b4     1C 4E 85 F1 | 	sub	fp, #28
281b8     02 26 0E F2 | 	cmp	local01, #2 wz
281bc     4C 00 90 5D |  if_ne	jmp	#LR__3388
281c0     1C 4E 05 F1 | 	add	fp, #28
281c4     A7 20 68 FC | 	wrlong	#16, fp
281c8     1C 4E 85 F1 | 	sub	fp, #28
281cc                 | LR__3386
281cc     14 4E 05 F1 | 	add	fp, #20
281d0     A7 26 0A FB | 	rdlong	local01, fp wz
281d4     14 4E 85 F1 | 	sub	fp, #20
281d8     30 00 90 AD |  if_e	jmp	#LR__3387
281dc     14 4E 05 F1 | 	add	fp, #20
281e0     A7 2A 02 FB | 	rdlong	local03, fp
281e4     14 4E 85 F1 | 	sub	fp, #20
281e8     00 80 00 FF 
281ec     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
281f0     18 00 90 3D |  if_ae	jmp	#LR__3387
281f4     14 4E 05 F1 | 	add	fp, #20
281f8     A7 26 02 FB | 	rdlong	local01, fp
281fc     01 26 66 F0 | 	shl	local01, #1
28200     A7 26 62 FC | 	wrlong	local01, fp
28204     14 4E 85 F1 | 	sub	fp, #20
28208     C0 FF 9F FD | 	jmp	#LR__3386
2820c                 | LR__3387
2820c                 | LR__3388
2820c     70 4E 05 F1 | 	add	fp, #112
28210     A7 12 02 F6 | 	mov	arg01, fp
28214     5C 4E 85 F1 | 	sub	fp, #92
28218     A7 14 02 FB | 	rdlong	arg02, fp
2821c     08 4E 05 F1 | 	add	fp, #8
28220     A7 16 02 FB | 	rdlong	arg03, fp
28224     A0 4E 05 F1 | 	add	fp, #160
28228     A7 1A 02 FB | 	rdlong	arg05, fp
2822c     BC 4E 85 F1 | 	sub	fp, #188
28230     01 18 06 F6 | 	mov	arg04, #1
28234     CC 40 B0 FD | 	call	#__system___uitoa
28238     58 4E 05 F1 | 	add	fp, #88
2823c     A7 FA 61 FC | 	wrlong	result1, fp
28240     38 4E 85 F1 | 	sub	fp, #56
28244     A7 26 02 FB | 	rdlong	local01, fp
28248     20 4E 85 F1 | 	sub	fp, #32
2824c     00 26 56 F2 | 	cmps	local01, #0 wc
28250     50 00 90 3D |  if_ae	jmp	#LR__3389
28254     60 4E 05 F1 | 	add	fp, #96
28258     A7 5A 68 FC | 	wrlong	#45, fp
2825c     50 4E 05 F1 | 	add	fp, #80
28260     A7 12 02 F6 | 	mov	arg01, fp
28264     90 4E 85 F1 | 	sub	fp, #144
28268     A7 2A 02 FB | 	rdlong	local03, fp
2826c     15 15 62 F6 | 	neg	arg02, local03
28270     18 4E 05 F1 | 	add	fp, #24
28274     A7 18 02 FB | 	rdlong	arg04, fp
28278     84 4E 05 F1 | 	add	fp, #132
2827c     A7 30 02 FB | 	rdlong	local06, fp
28280     BC 4E 85 F1 | 	sub	fp, #188
28284     18 2D 02 F6 | 	mov	local04, local06
28288     0A 16 06 F6 | 	mov	arg03, #10
2828c     16 1B 02 F6 | 	mov	arg05, local04
28290     70 40 B0 FD | 	call	#__system___uitoa
28294     5C 4E 05 F1 | 	add	fp, #92
28298     A7 FA 61 FC | 	wrlong	result1, fp
2829c     5C 4E 85 F1 | 	sub	fp, #92
282a0     48 00 90 FD | 	jmp	#LR__3390
282a4                 | LR__3389
282a4     60 4E 05 F1 | 	add	fp, #96
282a8     A7 56 68 FC | 	wrlong	#43, fp
282ac     50 4E 05 F1 | 	add	fp, #80
282b0     A7 12 02 F6 | 	mov	arg01, fp
282b4     90 4E 85 F1 | 	sub	fp, #144
282b8     A7 14 02 FB | 	rdlong	arg02, fp
282bc     18 4E 05 F1 | 	add	fp, #24
282c0     A7 18 02 FB | 	rdlong	arg04, fp
282c4     84 4E 05 F1 | 	add	fp, #132
282c8     A7 30 02 FB | 	rdlong	local06, fp
282cc     BC 4E 85 F1 | 	sub	fp, #188
282d0     18 2D 02 F6 | 	mov	local04, local06
282d4     0A 16 06 F6 | 	mov	arg03, #10
282d8     16 1B 02 F6 | 	mov	arg05, local04
282dc     24 40 B0 FD | 	call	#__system___uitoa
282e0     5C 4E 05 F1 | 	add	fp, #92
282e4     A7 FA 61 FC | 	wrlong	result1, fp
282e8     5C 4E 85 F1 | 	sub	fp, #92
282ec                 | LR__3390
282ec     24 4E 05 F1 | 	add	fp, #36
282f0     A7 26 0A FB | 	rdlong	local01, fp wz
282f4     24 4E 85 F1 | 	sub	fp, #36
282f8     2C 00 90 AD |  if_e	jmp	#LR__3391
282fc     50 4E 05 F1 | 	add	fp, #80
28300     A7 00 68 FC | 	wrlong	#0, fp
28304     04 4E 85 F1 | 	sub	fp, #4
28308     A7 00 68 FC | 	wrlong	#0, fp
2830c     6C 4E 05 F1 | 	add	fp, #108
28310     A7 26 02 FB | 	rdlong	local01, fp
28314     01 26 06 F1 | 	add	local01, #1
28318     64 4E 85 F1 | 	sub	fp, #100
2831c     A7 26 62 FC | 	wrlong	local01, fp
28320     54 4E 85 F1 | 	sub	fp, #84
28324     88 00 90 FD | 	jmp	#LR__3394
28328                 | LR__3391
28328     20 4E 05 F1 | 	add	fp, #32
2832c     A7 26 02 FB | 	rdlong	local01, fp
28330     20 4E 85 F1 | 	sub	fp, #32
28334     00 26 56 F2 | 	cmps	local01, #0 wc
28338     40 00 90 3D |  if_ae	jmp	#LR__3392
2833c     20 4E 05 F1 | 	add	fp, #32
28340     A7 28 02 FB | 	rdlong	local02, fp
28344     30 4E 05 F1 | 	add	fp, #48
28348     A7 28 62 FC | 	wrlong	local02, fp
2834c     04 4E 85 F1 | 	sub	fp, #4
28350     A7 28 62 FC | 	wrlong	local02, fp
28354     2C 4E 85 F1 | 	sub	fp, #44
28358     A7 26 02 FB | 	rdlong	local01, fp
2835c     98 4E 05 F1 | 	add	fp, #152
28360     A7 2A 02 FB | 	rdlong	local03, fp
28364     15 27 02 F1 | 	add	local01, local03
28368     01 26 06 F1 | 	add	local01, #1
2836c     64 4E 85 F1 | 	sub	fp, #100
28370     A7 26 62 FC | 	wrlong	local01, fp
28374     54 4E 85 F1 | 	sub	fp, #84
28378     34 00 90 FD | 	jmp	#LR__3393
2837c                 | LR__3392
2837c     4C 4E 05 F1 | 	add	fp, #76
28380     A7 00 68 FC | 	wrlong	#0, fp
28384     2C 4E 85 F1 | 	sub	fp, #44
28388     A7 26 02 FB | 	rdlong	local01, fp
2838c     30 4E 05 F1 | 	add	fp, #48
28390     A7 26 62 FC | 	wrlong	local01, fp
28394     68 4E 05 F1 | 	add	fp, #104
28398     A7 2A 02 FB | 	rdlong	local03, fp
2839c     15 27 02 F1 | 	add	local01, local03
283a0     01 26 06 F1 | 	add	local01, #1
283a4     64 4E 85 F1 | 	sub	fp, #100
283a8     A7 26 62 FC | 	wrlong	local01, fp
283ac     54 4E 85 F1 | 	sub	fp, #84
283b0                 | LR__3393
283b0                 | LR__3394
283b0     54 4E 05 F1 | 	add	fp, #84
283b4     A7 26 02 FB | 	rdlong	local01, fp
283b8     08 4E 85 F1 | 	sub	fp, #8
283bc     A7 2A 02 FB | 	rdlong	local03, fp
283c0     15 27 82 F1 | 	sub	local01, local03
283c4     01 26 06 F1 | 	add	local01, #1
283c8     24 4E 85 F1 | 	sub	fp, #36
283cc     A7 26 62 FC | 	wrlong	local01, fp
283d0     04 4E 05 F1 | 	add	fp, #4
283d4     A7 26 0A FB | 	rdlong	local01, fp wz
283d8     2C 4E 85 F1 | 	sub	fp, #44
283dc     28 4E 05 51 |  if_ne	add	fp, #40
283e0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
283e4     01 2A 06 51 |  if_ne	add	local03, #1
283e8     A7 2A 62 5C |  if_ne	wrlong	local03, fp
283ec     28 4E 85 51 |  if_ne	sub	fp, #40
283f0     1C 4E 05 F1 | 	add	fp, #28
283f4     A7 26 02 FB | 	rdlong	local01, fp
283f8     1C 4E 85 F1 | 	sub	fp, #28
283fc     10 26 0E F2 | 	cmp	local01, #16 wz
28400     28 4E 05 A1 |  if_e	add	fp, #40
28404     A7 26 02 AB |  if_e	rdlong	local01, fp
28408     02 26 06 A1 |  if_e	add	local01, #2
2840c     A7 26 62 AC |  if_e	wrlong	local01, fp
28410     28 4E 85 A1 |  if_e	sub	fp, #40
28414     24 4E 05 F1 | 	add	fp, #36
28418     A7 26 0A FB | 	rdlong	local01, fp wz
2841c     24 4E 85 F1 | 	sub	fp, #36
28420     28 00 90 AD |  if_e	jmp	#LR__3395
28424     28 4E 05 F1 | 	add	fp, #40
28428     A7 26 02 FB | 	rdlong	local01, fp
2842c     02 2A 06 F6 | 	mov	local03, #2
28430     34 4E 05 F1 | 	add	fp, #52
28434     A7 2E 02 FB | 	rdlong	local05, fp
28438     17 2B 02 F1 | 	add	local03, local05
2843c     15 27 02 F1 | 	add	local01, local03
28440     34 4E 85 F1 | 	sub	fp, #52
28444     A7 26 62 FC | 	wrlong	local01, fp
28448     28 4E 85 F1 | 	sub	fp, #40
2844c                 | LR__3395
2844c     28 4E 05 F1 | 	add	fp, #40
28450     A7 26 02 FB | 	rdlong	local01, fp
28454     28 4E 85 F1 | 	sub	fp, #40
28458     41 26 56 F2 | 	cmps	local01, #65 wc
2845c     01 FA 65 36 |  if_ae	neg	result1, #1
28460     08 05 90 3D |  if_ae	jmp	#LR__3423
28464     3C 4E 05 F1 | 	add	fp, #60
28468     A7 26 0A FB | 	rdlong	local01, fp wz
2846c     3C 4E 85 F1 | 	sub	fp, #60
28470     60 00 90 AD |  if_e	jmp	#LR__3396
28474     C0 4E 05 F1 | 	add	fp, #192
28478     A7 12 02 FB | 	rdlong	arg01, fp
2847c     94 4E 85 F1 | 	sub	fp, #148
28480     A7 14 02 FB | 	rdlong	arg02, fp
28484     14 4E 05 F1 | 	add	fp, #20
28488     A7 16 02 FB | 	rdlong	arg03, fp
2848c     40 4E 85 F1 | 	sub	fp, #64
28490     D8 40 B0 FD | 	call	#__system__emitsign_0564
28494     18 4F 05 F1 | 	add	fp, #280
28498     A7 FA 61 FC | 	wrlong	result1, fp
2849c     18 4F 85 F1 | 	sub	fp, #280
284a0     00 FA 55 F2 | 	cmps	result1, #0 wc
284a4     18 4F 05 C1 |  if_b	add	fp, #280
284a8     A7 FA 01 CB |  if_b	rdlong	result1, fp
284ac     18 4F 85 C1 |  if_b	sub	fp, #280
284b0     B8 04 90 CD |  if_b	jmp	#LR__3423
284b4     C0 4E 05 F1 | 	add	fp, #192
284b8     A7 26 02 FB | 	rdlong	local01, fp
284bc     58 4E 05 F1 | 	add	fp, #88
284c0     A7 2A 02 FB | 	rdlong	local03, fp
284c4     15 27 02 F1 | 	add	local01, local03
284c8     58 4E 85 F1 | 	sub	fp, #88
284cc     A7 26 62 FC | 	wrlong	local01, fp
284d0     C0 4E 85 F1 | 	sub	fp, #192
284d4                 | LR__3396
284d4     4C 4E 05 F1 | 	add	fp, #76
284d8     A7 26 02 FB | 	rdlong	local01, fp
284dc     34 4E 85 F1 | 	sub	fp, #52
284e0     A7 26 62 FC | 	wrlong	local01, fp
284e4     18 4E 85 F1 | 	sub	fp, #24
284e8     97 9E 48 FB | 	callpa	#(@LR__3402-@LR__3397)>>2,fcache_load_ptr_
284ec                 | LR__3397
284ec     18 4E 05 F1 | 	add	fp, #24
284f0     A7 28 02 FB | 	rdlong	local02, fp
284f4     3C 4E 05 F1 | 	add	fp, #60
284f8     A7 2E 02 FB | 	rdlong	local05, fp
284fc     54 4E 85 F1 | 	sub	fp, #84
28500     17 29 52 F2 | 	cmps	local02, local05 wc
28504     20 01 90 3D |  if_ae	jmp	#LR__3403
28508     18 4E 05 F1 | 	add	fp, #24
2850c     A7 30 02 FB | 	rdlong	local06, fp
28510     18 4E 85 F1 | 	sub	fp, #24
28514     00 30 56 F2 | 	cmps	local06, #0 wc
28518     58 00 90 CD |  if_b	jmp	#LR__3398
2851c     18 4E 05 F1 | 	add	fp, #24
28520     A7 30 02 FB | 	rdlong	local06, fp
28524     40 4E 05 F1 | 	add	fp, #64
28528     A7 32 02 FB | 	rdlong	local07, fp
2852c     58 4E 85 F1 | 	sub	fp, #88
28530     19 31 52 F2 | 	cmps	local06, local07 wc
28534     3C 00 90 3D |  if_ae	jmp	#LR__3398
28538     C0 4E 05 F1 | 	add	fp, #192
2853c     A7 34 02 FB | 	rdlong	local08, fp
28540     1A 33 02 F6 | 	mov	local07, local08
28544     01 32 06 F1 | 	add	local07, #1
28548     A7 32 62 FC | 	wrlong	local07, fp
2854c     A8 4E 85 F1 | 	sub	fp, #168
28550     A7 32 02 FB | 	rdlong	local07, fp
28554     19 37 02 F6 | 	mov	local09, local07
28558     58 4E 05 F1 | 	add	fp, #88
2855c     A7 38 02 F6 | 	mov	local10, fp
28560     A7 36 02 F1 | 	add	local09, fp
28564     1B 3B C2 FA | 	rdbyte	local11, local09
28568     1A 3B 42 FC | 	wrbyte	local11, local08
2856c     70 4E 85 F1 | 	sub	fp, #112
28570     20 00 90 FD | 	jmp	#LR__3399
28574                 | LR__3398
28574     C0 4E 05 F1 | 	add	fp, #192
28578     A7 34 02 FB | 	rdlong	local08, fp
2857c     1A 37 02 F6 | 	mov	local09, local08
28580     01 36 06 F1 | 	add	local09, #1
28584     A7 36 62 FC | 	wrlong	local09, fp
28588     C0 4E 85 F1 | 	sub	fp, #192
2858c     30 36 06 F6 | 	mov	local09, #48
28590     1A 61 48 FC | 	wrbyte	#48, local08
28594                 | LR__3399
28594     18 4E 05 F1 | 	add	fp, #24
28598     A7 30 02 FB | 	rdlong	local06, fp
2859c     38 4E 05 F1 | 	add	fp, #56
285a0     A7 3C 02 FB | 	rdlong	local12, fp
285a4     50 4E 85 F1 | 	sub	fp, #80
285a8     1E 31 0A F2 | 	cmp	local06, local12 wz
285ac     5C 00 90 5D |  if_ne	jmp	#LR__3401
285b0     10 4F 05 F1 | 	add	fp, #272
285b4     A7 32 02 FB | 	rdlong	local07, fp
285b8     10 4F 85 F1 | 	sub	fp, #272
285bc     19 37 0A F6 | 	mov	local09, local07 wz
285c0     28 00 90 5D |  if_ne	jmp	#LR__3400
285c4     54 4E 05 F1 | 	add	fp, #84
285c8     A7 3A 02 FB | 	rdlong	local11, fp
285cc     1D 39 02 F6 | 	mov	local10, local11
285d0     01 38 86 F1 | 	sub	local10, #1
285d4     3C 4E 85 F1 | 	sub	fp, #60
285d8     A7 3E 02 FB | 	rdlong	local13, fp
285dc     18 4E 85 F1 | 	sub	fp, #24
285e0     1F 41 02 F6 | 	mov	local14, local13
285e4     1C 41 52 F2 | 	cmps	local14, local10 wc
285e8     20 00 90 3D |  if_ae	jmp	#LR__3401
285ec                 | LR__3400
285ec     C0 4E 05 F1 | 	add	fp, #192
285f0     A7 34 02 FB | 	rdlong	local08, fp
285f4     1A 3D 02 F6 | 	mov	local12, local08
285f8     01 3C 06 F1 | 	add	local12, #1
285fc     A7 3C 62 FC | 	wrlong	local12, fp
28600     C0 4E 85 F1 | 	sub	fp, #192
28604     2E 36 06 F6 | 	mov	local09, #46
28608     1A 5D 48 FC | 	wrbyte	#46, local08
2860c                 | LR__3401
2860c     18 4E 05 F1 | 	add	fp, #24
28610     A7 42 02 FB | 	rdlong	local15, fp
28614     21 3D 02 F6 | 	mov	local12, local15
28618     01 3C 06 F1 | 	add	local12, #1
2861c     A7 3C 62 FC | 	wrlong	local12, fp
28620     18 4E 85 F1 | 	sub	fp, #24
28624     C4 FE 9F FD | 	jmp	#LR__3397
28628                 | LR__3402
28628                 | LR__3403
28628     34 4E 05 F1 | 	add	fp, #52
2862c     A7 26 0A FB | 	rdlong	local01, fp wz
28630     34 4E 85 F1 | 	sub	fp, #52
28634     A0 00 90 AD |  if_e	jmp	#LR__3407
28638     C0 4E 05 F1 | 	add	fp, #192
2863c     A7 26 02 FB | 	rdlong	local01, fp
28640     01 26 86 F1 | 	sub	local01, #1
28644     A7 26 62 FC | 	wrlong	local01, fp
28648     C0 4E 85 F1 | 	sub	fp, #192
2864c     97 26 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
28650                 | LR__3404
28650     C0 4E 05 F1 | 	add	fp, #192
28654     A7 26 02 FB | 	rdlong	local01, fp
28658     04 4E 05 F1 | 	add	fp, #4
2865c     A7 2A 02 FB | 	rdlong	local03, fp
28660     C4 4E 85 F1 | 	sub	fp, #196
28664     15 27 5A F2 | 	cmps	local01, local03 wcz
28668     30 00 90 ED |  if_be	jmp	#LR__3406
2866c     C0 4E 05 F1 | 	add	fp, #192
28670     A7 30 02 FB | 	rdlong	local06, fp
28674     C0 4E 85 F1 | 	sub	fp, #192
28678     18 2D C2 FA | 	rdbyte	local04, local06
2867c     30 2C 0E F2 | 	cmp	local04, #48 wz
28680     18 00 90 5D |  if_ne	jmp	#LR__3406
28684     C0 4E 05 F1 | 	add	fp, #192
28688     A7 26 02 FB | 	rdlong	local01, fp
2868c     01 26 86 F1 | 	sub	local01, #1
28690     A7 26 62 FC | 	wrlong	local01, fp
28694     C0 4E 85 F1 | 	sub	fp, #192
28698     B4 FF 9F FD | 	jmp	#LR__3404
2869c                 | LR__3405
2869c                 | LR__3406
2869c     C0 4E 05 F1 | 	add	fp, #192
286a0     A7 28 02 FB | 	rdlong	local02, fp
286a4     C0 4E 85 F1 | 	sub	fp, #192
286a8     14 27 C2 FA | 	rdbyte	local01, local02
286ac     2E 26 0E F2 | 	cmp	local01, #46 wz
286b0     C0 4E 05 A1 |  if_e	add	fp, #192
286b4     A7 26 02 AB |  if_e	rdlong	local01, fp
286b8     01 26 86 A1 |  if_e	sub	local01, #1
286bc     A7 26 62 AC |  if_e	wrlong	local01, fp
286c0     C0 4E 85 A1 |  if_e	sub	fp, #192
286c4     C0 4E 05 F1 | 	add	fp, #192
286c8     A7 2A 02 FB | 	rdlong	local03, fp
286cc     01 2A 06 F1 | 	add	local03, #1
286d0     A7 2A 62 FC | 	wrlong	local03, fp
286d4     C0 4E 85 F1 | 	sub	fp, #192
286d8                 | LR__3407
286d8     24 4E 05 F1 | 	add	fp, #36
286dc     A7 26 0A FB | 	rdlong	local01, fp wz
286e0     24 4E 85 F1 | 	sub	fp, #36
286e4     B4 00 90 AD |  if_e	jmp	#LR__3410
286e8     C0 4E 05 F1 | 	add	fp, #192
286ec     A7 28 02 FB | 	rdlong	local02, fp
286f0     14 2B 02 F6 | 	mov	local03, local02
286f4     01 2A 06 F1 | 	add	local03, #1
286f8     A7 2A 62 FC | 	wrlong	local03, fp
286fc     90 4E 85 F1 | 	sub	fp, #144
28700     A7 2C 02 FB | 	rdlong	local04, fp
28704     14 2D 42 FC | 	wrbyte	local04, local02
28708     90 4E 05 F1 | 	add	fp, #144
2870c     A7 28 02 FB | 	rdlong	local02, fp
28710     14 2B 02 F6 | 	mov	local03, local02
28714     01 2A 06 F1 | 	add	local03, #1
28718     A7 2A 62 FC | 	wrlong	local03, fp
2871c     60 4E 85 F1 | 	sub	fp, #96
28720     A7 2C 02 FB | 	rdlong	local04, fp
28724     14 2D 42 FC | 	wrbyte	local04, local02
28728     48 4E 85 F1 | 	sub	fp, #72
2872c     A7 00 68 FC | 	wrlong	#0, fp
28730     18 4E 85 F1 | 	sub	fp, #24
28734                 | LR__3408
28734     18 4E 05 F1 | 	add	fp, #24
28738     A7 28 02 FB | 	rdlong	local02, fp
2873c     44 4E 05 F1 | 	add	fp, #68
28740     A7 2E 02 FB | 	rdlong	local05, fp
28744     5C 4E 85 F1 | 	sub	fp, #92
28748     17 29 52 F2 | 	cmps	local02, local05 wc
2874c     4C 00 90 3D |  if_ae	jmp	#LR__3409
28750     C0 4E 05 F1 | 	add	fp, #192
28754     A7 34 02 FB | 	rdlong	local08, fp
28758     1A 3D 02 F6 | 	mov	local12, local08
2875c     01 3C 06 F1 | 	add	local12, #1
28760     A7 3C 62 FC | 	wrlong	local12, fp
28764     A8 4E 85 F1 | 	sub	fp, #168
28768     A7 32 02 FB | 	rdlong	local07, fp
2876c     19 37 02 F6 | 	mov	local09, local07
28770     98 4E 05 F1 | 	add	fp, #152
28774     A7 38 02 F6 | 	mov	local10, fp
28778     A7 36 02 F1 | 	add	local09, fp
2877c     1B 3B C2 FA | 	rdbyte	local11, local09
28780     1A 3B 42 FC | 	wrbyte	local11, local08
28784     98 4E 85 F1 | 	sub	fp, #152
28788     A7 3C 02 FB | 	rdlong	local12, fp
2878c     01 3C 06 F1 | 	add	local12, #1
28790     A7 3C 62 FC | 	wrlong	local12, fp
28794     18 4E 85 F1 | 	sub	fp, #24
28798     98 FF 9F FD | 	jmp	#LR__3408
2879c                 | LR__3409
2879c                 | LR__3410
2879c     C0 4E 05 F1 | 	add	fp, #192
287a0     A7 26 02 FB | 	rdlong	local01, fp
287a4     C0 4E 85 F1 | 	sub	fp, #192
287a8     13 01 48 FC | 	wrbyte	#0, local01
287ac                 | LR__3411
287ac     6C 4E 05 F1 | 	add	fp, #108
287b0     A7 26 0A FB | 	rdlong	local01, fp wz
287b4     6C 4E 85 F1 | 	sub	fp, #108
287b8     90 01 90 AD |  if_e	jmp	#LR__3422
287bc     48 4E 05 F1 | 	add	fp, #72
287c0     A7 2A 0A FB | 	rdlong	local03, fp wz
287c4     48 4E 85 F1 | 	sub	fp, #72
287c8     80 01 90 AD |  if_e	jmp	#LR__3422
287cc     C4 4E 05 F1 | 	add	fp, #196
287d0     A7 12 02 FB | 	rdlong	arg01, fp
287d4     C4 4E 85 F1 | 	sub	fp, #196
287d8     09 45 02 F6 | 	mov	local16, arg01
287dc     97 06 48 FB | 	callpa	#(@LR__3413-@LR__3412)>>2,fcache_load_ptr_
287e0                 | LR__3412
287e0     22 FB C9 FA | 	rdbyte	result1, local16 wz
287e4     01 44 06 51 |  if_ne	add	local16, #1
287e8     F4 FF 9F 5D |  if_ne	jmp	#LR__3412
287ec                 | LR__3413
287ec     09 45 82 F1 | 	sub	local16, arg01
287f0     22 2D 02 F6 | 	mov	local04, local16
287f4     6C 4E 05 F1 | 	add	fp, #108
287f8     A7 30 02 FB | 	rdlong	local06, fp
287fc     6C 4E 85 F1 | 	sub	fp, #108
28800     18 2D 5A F2 | 	cmps	local04, local06 wcz
28804     44 01 90 ED |  if_be	jmp	#LR__3422
28808     C4 4E 05 F1 | 	add	fp, #196
2880c     A7 26 02 FB | 	rdlong	local01, fp
28810     5C 4E 05 F1 | 	add	fp, #92
28814     A7 26 62 FC | 	wrlong	local01, fp
28818     FC 4E 85 F1 | 	sub	fp, #252
2881c     A7 26 0A FB | 	rdlong	local01, fp wz
28820     24 4E 85 F1 | 	sub	fp, #36
28824     20 00 90 AD |  if_e	jmp	#LR__3414
28828     B8 4E 05 F1 | 	add	fp, #184
2882c     A7 00 68 FC | 	wrlong	#0, fp
28830     4C 4E 85 F1 | 	sub	fp, #76
28834     A7 26 02 FB | 	rdlong	local01, fp
28838     B0 4E 05 F1 | 	add	fp, #176
2883c     A7 26 62 FC | 	wrlong	local01, fp
28840     1C 4F 85 F1 | 	sub	fp, #284
28844     24 00 90 FD | 	jmp	#LR__3415
28848                 | LR__3414
28848     6C 4E 05 F1 | 	add	fp, #108
2884c     A7 26 02 FB | 	rdlong	local01, fp
28850     01 26 86 F1 | 	sub	local01, #1
28854     4C 4E 05 F1 | 	add	fp, #76
28858     A7 2A 02 FB | 	rdlong	local03, fp
2885c     15 27 82 F1 | 	sub	local01, local03
28860     64 4E 05 F1 | 	add	fp, #100
28864     A7 26 62 FC | 	wrlong	local01, fp
28868     1C 4F 85 F1 | 	sub	fp, #284
2886c                 | LR__3415
2886c     97 20 48 FB | 	callpa	#(@LR__3417-@LR__3416)>>2,fcache_load_ptr_
28870                 | LR__3416
28870     1C 4F 05 F1 | 	add	fp, #284
28874     A7 26 0A FB | 	rdlong	local01, fp wz
28878     1C 4F 85 F1 | 	sub	fp, #284
2887c     30 00 90 AD |  if_e	jmp	#LR__3418
28880     20 4F 05 F1 | 	add	fp, #288
28884     A7 28 02 FB | 	rdlong	local02, fp
28888     14 2B 02 F6 | 	mov	local03, local02
2888c     01 2A 06 F1 | 	add	local03, #1
28890     A7 2A 62 FC | 	wrlong	local03, fp
28894     14 55 48 FC | 	wrbyte	#42, local02
28898     04 4E 85 F1 | 	sub	fp, #4
2889c     A7 26 02 FB | 	rdlong	local01, fp
288a0     01 26 86 F1 | 	sub	local01, #1
288a4     A7 26 62 FC | 	wrlong	local01, fp
288a8     1C 4F 85 F1 | 	sub	fp, #284
288ac     C0 FF 9F FD | 	jmp	#LR__3416
288b0                 | LR__3417
288b0                 | LR__3418
288b0     B8 4E 05 F1 | 	add	fp, #184
288b4     A7 26 0A FB | 	rdlong	local01, fp wz
288b8     B8 4E 85 F1 | 	sub	fp, #184
288bc     70 00 90 AD |  if_e	jmp	#LR__3421
288c0     20 4F 05 F1 | 	add	fp, #288
288c4     A7 28 02 FB | 	rdlong	local02, fp
288c8     14 2B 02 F6 | 	mov	local03, local02
288cc     01 2A 06 F1 | 	add	local03, #1
288d0     A7 2A 62 FC | 	wrlong	local03, fp
288d4     14 5D 48 FC | 	wrbyte	#46, local02
288d8     04 4E 85 F1 | 	sub	fp, #4
288dc     A7 00 68 FC | 	wrlong	#0, fp
288e0     1C 4F 85 F1 | 	sub	fp, #284
288e4                 | LR__3419
288e4     1C 4F 05 F1 | 	add	fp, #284
288e8     A7 28 02 FB | 	rdlong	local02, fp
288ec     64 4E 85 F1 | 	sub	fp, #100
288f0     A7 2E 02 FB | 	rdlong	local05, fp
288f4     B8 4E 85 F1 | 	sub	fp, #184
288f8     17 29 52 F2 | 	cmps	local02, local05 wc
288fc     30 00 90 3D |  if_ae	jmp	#LR__3420
28900     20 4F 05 F1 | 	add	fp, #288
28904     A7 34 02 FB | 	rdlong	local08, fp
28908     1A 3D 02 F6 | 	mov	local12, local08
2890c     01 3C 06 F1 | 	add	local12, #1
28910     A7 3C 62 FC | 	wrlong	local12, fp
28914     1A 55 48 FC | 	wrbyte	#42, local08
28918     04 4E 85 F1 | 	sub	fp, #4
2891c     A7 3C 02 FB | 	rdlong	local12, fp
28920     01 3C 06 F1 | 	add	local12, #1
28924     A7 3C 62 FC | 	wrlong	local12, fp
28928     1C 4F 85 F1 | 	sub	fp, #284
2892c     B4 FF 9F FD | 	jmp	#LR__3419
28930                 | LR__3420
28930                 | LR__3421
28930     20 4F 05 F1 | 	add	fp, #288
28934     A7 28 02 FB | 	rdlong	local02, fp
28938     14 2B 02 F6 | 	mov	local03, local02
2893c     01 2A 06 F1 | 	add	local03, #1
28940     A7 2A 62 FC | 	wrlong	local03, fp
28944     20 4F 85 F1 | 	sub	fp, #288
28948     14 01 48 FC | 	wrbyte	#0, local02
2894c                 | LR__3422
2894c     04 4E 05 F1 | 	add	fp, #4
28950     A7 12 02 FB | 	rdlong	arg01, fp
28954     04 4E 05 F1 | 	add	fp, #4
28958     A7 14 02 FB | 	rdlong	arg02, fp
2895c     BC 4E 05 F1 | 	add	fp, #188
28960     A7 16 02 FB | 	rdlong	arg03, fp
28964     C4 4E 85 F1 | 	sub	fp, #196
28968     C4 EE BF FD | 	call	#__system___fmtstr
2896c                 | LR__3423
2896c     A7 F0 03 F6 | 	mov	ptra, fp
28970     B2 00 A0 FD | 	call	#popregs_
28974                 | __system___fmtfloat_ret
28974     2D 00 64 FD | 	ret
28978                 | 
28978                 | __system__Left_S
28978     04 4A 05 F6 | 	mov	COUNT_, #4
2897c     A8 00 A0 FD | 	call	#pushregs_
28980     09 27 02 F6 | 	mov	local01, arg01
28984     0A 29 02 F6 | 	mov	local02, arg02
28988     01 28 56 F2 | 	cmps	local02, #1 wc
2898c     B2 01 00 CF 
28990     12 FA 05 C6 |  if_b	mov	result1, ##@LR__5373
28994     5C 00 90 CD |  if_b	jmp	#LR__3433
28998     13 13 02 F6 | 	mov	arg01, local01
2899c     09 2B 02 F6 | 	mov	local03, arg01
289a0     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
289a4                 | LR__3430
289a4     15 FB C9 FA | 	rdbyte	result1, local03 wz
289a8     01 2A 06 51 |  if_ne	add	local03, #1
289ac     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
289b0                 | LR__3431
289b0     09 2B 82 F1 | 	sub	local03, arg01
289b4     15 FB 01 F6 | 	mov	result1, local03
289b8     14 FB 59 F2 | 	cmps	result1, local02 wcz
289bc     13 FB 01 E6 |  if_be	mov	result1, local01
289c0     30 00 90 ED |  if_be	jmp	#LR__3433
289c4     14 13 02 F6 | 	mov	arg01, local02
289c8     02 12 06 F1 | 	add	arg01, #2
289cc     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
289d0     FD 2C 0A F6 | 	mov	local04, result1 wz
289d4     18 00 90 AD |  if_e	jmp	#LR__3432
289d8     16 13 02 F6 | 	mov	arg01, local04
289dc     13 15 02 F6 | 	mov	arg02, local01
289e0     14 17 02 F6 | 	mov	arg03, local02
289e4     30 DE BF FD | 	call	#__system____builtin_memmove
289e8     16 29 02 F1 | 	add	local02, local04
289ec     14 01 48 FC | 	wrbyte	#0, local02
289f0                 | LR__3432
289f0     16 FB 01 F6 | 	mov	result1, local04
289f4                 | LR__3433
289f4     A7 F0 03 F6 | 	mov	ptra, fp
289f8     B2 00 A0 FD | 	call	#popregs_
289fc                 | __system__Left_S_ret
289fc     2D 00 64 FD | 	ret
28a00                 | 
28a00                 | __system__Right_S
28a00     05 4A 05 F6 | 	mov	COUNT_, #5
28a04     A8 00 A0 FD | 	call	#pushregs_
28a08     09 27 02 F6 | 	mov	local01, arg01
28a0c     0A 29 02 F6 | 	mov	local02, arg02
28a10     01 28 56 F2 | 	cmps	local02, #1 wc
28a14     B2 01 00 CF 
28a18     13 FA 05 C6 |  if_b	mov	result1, ##@LR__5374
28a1c     64 00 90 CD |  if_b	jmp	#LR__3443
28a20     13 13 02 F6 | 	mov	arg01, local01
28a24     09 2B 02 F6 | 	mov	local03, arg01
28a28     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
28a2c                 | LR__3440
28a2c     15 FB C9 FA | 	rdbyte	result1, local03 wz
28a30     01 2A 06 51 |  if_ne	add	local03, #1
28a34     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
28a38                 | LR__3441
28a38     09 2B 82 F1 | 	sub	local03, arg01
28a3c     15 FB 01 F6 | 	mov	result1, local03
28a40     FD 2C 02 F6 | 	mov	local04, result1
28a44     14 2D 5A F2 | 	cmps	local04, local02 wcz
28a48     13 FB 01 E6 |  if_be	mov	result1, local01
28a4c     34 00 90 ED |  if_be	jmp	#LR__3443
28a50     14 13 02 F6 | 	mov	arg01, local02
28a54     02 12 06 F1 | 	add	arg01, #2
28a58     40 20 B0 FD | 	call	#__system___gc_alloc_managed
28a5c     FD 2E 0A F6 | 	mov	local05, result1 wz
28a60     1C 00 90 AD |  if_e	jmp	#LR__3442
28a64     14 2D 82 F1 | 	sub	local04, local02
28a68     13 2D 02 F1 | 	add	local04, local01
28a6c     01 28 06 F1 | 	add	local02, #1
28a70     17 13 02 F6 | 	mov	arg01, local05
28a74     16 15 02 F6 | 	mov	arg02, local04
28a78     14 17 02 F6 | 	mov	arg03, local02
28a7c     98 DD BF FD | 	call	#__system____builtin_memmove
28a80                 | LR__3442
28a80     17 FB 01 F6 | 	mov	result1, local05
28a84                 | LR__3443
28a84     A7 F0 03 F6 | 	mov	ptra, fp
28a88     B2 00 A0 FD | 	call	#popregs_
28a8c                 | __system__Right_S_ret
28a8c     2D 00 64 FD | 	ret
28a90                 | 
28a90                 | __system__Mid_S
28a90     05 4A 05 F6 | 	mov	COUNT_, #5
28a94     A8 00 A0 FD | 	call	#pushregs_
28a98     09 27 02 F6 | 	mov	local01, arg01
28a9c     0A 29 02 F6 | 	mov	local02, arg02
28aa0     01 16 56 F2 | 	cmps	arg03, #1 wc
28aa4     B2 01 00 CF 
28aa8     14 FA 05 C6 |  if_b	mov	result1, ##@LR__5375
28aac     80 00 90 CD |  if_b	jmp	#LR__3453
28ab0     01 28 86 F1 | 	sub	local02, #1
28ab4     00 28 56 F3 | 	fges	local02, #0 wc
28ab8     13 13 02 F6 | 	mov	arg01, local01
28abc     09 2B 02 F6 | 	mov	local03, arg01
28ac0     97 06 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
28ac4                 | LR__3450
28ac4     15 FB C9 FA | 	rdbyte	result1, local03 wz
28ac8     01 2A 06 51 |  if_ne	add	local03, #1
28acc     F4 FF 9F 5D |  if_ne	jmp	#LR__3450
28ad0                 | LR__3451
28ad0     09 2B 82 F1 | 	sub	local03, arg01
28ad4     15 FB 01 F6 | 	mov	result1, local03
28ad8     FD 14 02 F6 | 	mov	arg02, result1
28adc     14 15 52 F2 | 	cmps	arg02, local02 wc
28ae0     B2 01 00 CF 
28ae4     15 FA 05 C6 |  if_b	mov	result1, ##@LR__5376
28ae8     44 00 90 CD |  if_b	jmp	#LR__3453
28aec     0A 2D 02 F6 | 	mov	local04, arg02
28af0     14 2D 82 F1 | 	sub	local04, local02
28af4     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
28af8     0B 2D 02 16 |  if_a	mov	local04, arg03
28afc     16 13 02 F6 | 	mov	arg01, local04
28b00     02 12 06 F1 | 	add	arg01, #2
28b04     94 1F B0 FD | 	call	#__system___gc_alloc_managed
28b08     FD 2E 0A F6 | 	mov	local05, result1 wz
28b0c     1C 00 90 AD |  if_e	jmp	#LR__3452
28b10     13 29 02 F1 | 	add	local02, local01
28b14     17 13 02 F6 | 	mov	arg01, local05
28b18     14 15 02 F6 | 	mov	arg02, local02
28b1c     16 17 02 F6 | 	mov	arg03, local04
28b20     F4 DC BF FD | 	call	#__system____builtin_memmove
28b24     17 2D 02 F1 | 	add	local04, local05
28b28     16 01 48 FC | 	wrbyte	#0, local04
28b2c                 | LR__3452
28b2c     17 FB 01 F6 | 	mov	result1, local05
28b30                 | LR__3453
28b30     A7 F0 03 F6 | 	mov	ptra, fp
28b34     B2 00 A0 FD | 	call	#popregs_
28b38                 | __system__Mid_S_ret
28b38     2D 00 64 FD | 	ret
28b3c                 | 
28b3c                 | __system__Chr_S
28b3c     01 4A 05 F6 | 	mov	COUNT_, #1
28b40     A8 00 A0 FD | 	call	#pushregs_
28b44     09 27 02 F6 | 	mov	local01, arg01
28b48     03 12 06 F6 | 	mov	arg01, #3
28b4c     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
28b50     00 FA 4D F2 | 	cmps	result1, #0 wz
28b54     FD 26 42 5C |  if_ne	wrbyte	local01, result1
28b58     01 FA 05 51 |  if_ne	add	result1, #1
28b5c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
28b60     01 FA 85 51 |  if_ne	sub	result1, #1
28b64     A7 F0 03 F6 | 	mov	ptra, fp
28b68     B2 00 A0 FD | 	call	#popregs_
28b6c                 | __system__Chr_S_ret
28b6c     2D 00 64 FD | 	ret
28b70                 | 
28b70                 | __system__str_S
28b70     02 4A 05 F6 | 	mov	COUNT_, #2
28b74     A8 00 A0 FD | 	call	#pushregs_
28b78     09 27 02 F6 | 	mov	local01, arg01
28b7c     10 12 06 F6 | 	mov	arg01, #16
28b80     18 1F B0 FD | 	call	#__system___gc_alloc_managed
28b84     FD 28 0A F6 | 	mov	local02, result1 wz
28b88     30 00 90 AD |  if_e	jmp	#LR__3460
28b8c     F8 13 02 F6 | 	mov	arg01, ptra
28b90     08 F0 07 F1 | 	add	ptra, #8
28b94     09 29 62 FC | 	wrlong	local02, arg01
28b98     04 12 06 F1 | 	add	arg01, #4
28b9c     09 01 68 FC | 	wrlong	#0, arg01
28ba0     04 12 86 F1 | 	sub	arg01, #4
28ba4     00 38 05 FF 
28ba8     00 12 46 F5 | 	or	arg01, ##175112192
28bac     00 14 06 F6 | 	mov	arg02, #0
28bb0     13 17 02 F6 | 	mov	arg03, local01
28bb4     67 18 06 F6 | 	mov	arg04, #103
28bb8     90 EE BF FD | 	call	#__system___fmtfloat
28bbc                 | LR__3460
28bbc     14 FB 01 F6 | 	mov	result1, local02
28bc0     A7 F0 03 F6 | 	mov	ptra, fp
28bc4     B2 00 A0 FD | 	call	#popregs_
28bc8                 | __system__str_S_ret
28bc8     2D 00 64 FD | 	ret
28bcc                 | 
28bcc                 | __system__Number_S
28bcc     08 4A 05 F6 | 	mov	COUNT_, #8
28bd0     A8 00 A0 FD | 	call	#pushregs_
28bd4     09 27 02 F6 | 	mov	local01, arg01
28bd8     0A 29 0A F6 | 	mov	local02, arg02 wz
28bdc     0B 2B 02 F6 | 	mov	local03, arg03
28be0     3C 00 90 5D |  if_ne	jmp	#LR__3472
28be4     01 28 06 F6 | 	mov	local02, #1
28be8     15 2D 02 F6 | 	mov	local04, local03
28bec     01 2E 06 F6 | 	mov	local05, #1
28bf0     97 16 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
28bf4                 | LR__3470
28bf4     00 30 06 F6 | 	mov	local06, #0
28bf8     13 2D 1A F2 | 	cmp	local04, local01 wcz
28bfc     01 30 66 E6 |  if_be	neg	local06, #1
28c00     16 2F 12 F2 | 	cmp	local05, local04 wc
28c04     19 33 A2 F1 | 	subx	local07, local07
28c08     19 31 CA F7 | 	test	local06, local07 wz
28c0c     15 2D 02 5D |  if_ne	qmul	local04, local03
28c10     16 2F 02 56 |  if_ne	mov	local05, local04
28c14     01 28 06 51 |  if_ne	add	local02, #1
28c18     18 2C 62 5D |  if_ne	getqx	local04
28c1c     D4 FF 9F 5D |  if_ne	jmp	#LR__3470
28c20                 | LR__3471
28c20                 | LR__3472
28c20     20 28 36 F3 | 	fle	local02, #32 wc
28c24     14 13 02 F6 | 	mov	arg01, local02
28c28     02 12 06 F1 | 	add	arg01, #2
28c2c     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
28c30     FD 30 02 F6 | 	mov	local06, result1
28c34     14 33 02 F6 | 	mov	local07, local02
28c38     18 33 02 F1 | 	add	local07, local06
28c3c     19 01 48 FC | 	wrbyte	#0, local07
28c40     97 1A 48 FB | 	callpa	#(@LR__3474-@LR__3473)>>2,fcache_load_ptr_
28c44                 | LR__3473
28c44     01 28 16 F2 | 	cmp	local02, #1 wc
28c48     2C 00 90 CD |  if_b	jmp	#LR__3475
28c4c     15 27 12 FD | 	qdiv	local01, local03
28c50     01 28 86 F1 | 	sub	local02, #1
28c54     14 33 02 F6 | 	mov	local07, local02
28c58     18 33 02 F1 | 	add	local07, local06
28c5c     19 34 62 FD | 	getqy	local08
28c60     0A 34 16 F2 | 	cmp	local08, #10 wc
28c64     30 34 06 C1 |  if_b	add	local08, #48
28c68     37 34 06 31 |  if_ae	add	local08, #55
28c6c     19 35 42 FC | 	wrbyte	local08, local07
28c70     18 26 62 FD | 	getqx	local01
28c74     CC FF 9F FD | 	jmp	#LR__3473
28c78                 | LR__3474
28c78                 | LR__3475
28c78     18 FB 01 F6 | 	mov	result1, local06
28c7c     A7 F0 03 F6 | 	mov	ptra, fp
28c80     B2 00 A0 FD | 	call	#popregs_
28c84                 | __system__Number_S_ret
28c84     2D 00 64 FD | 	ret
28c88                 | 
28c88                 | __system__LCase_S
28c88     07 4A 05 F6 | 	mov	COUNT_, #7
28c8c     A8 00 A0 FD | 	call	#pushregs_
28c90     09 27 02 F6 | 	mov	local01, arg01
28c94     09 29 02 F6 | 	mov	local02, arg01
28c98     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
28c9c                 | LR__3480
28c9c     14 FB C9 FA | 	rdbyte	result1, local02 wz
28ca0     01 28 06 51 |  if_ne	add	local02, #1
28ca4     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
28ca8                 | LR__3481
28ca8     09 29 82 F1 | 	sub	local02, arg01
28cac     14 FB 01 F6 | 	mov	result1, local02
28cb0     FD 28 0A F6 | 	mov	local02, result1 wz
28cb4     B2 01 00 AF 
28cb8     16 FA 05 A6 |  if_e	mov	result1, ##@LR__5377
28cbc     7C 00 90 AD |  if_e	jmp	#LR__3487
28cc0     14 13 02 F6 | 	mov	arg01, local02
28cc4     02 12 06 F1 | 	add	arg01, #2
28cc8     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
28ccc     FD 2A 0A F6 | 	mov	local03, result1 wz
28cd0     64 00 90 AD |  if_e	jmp	#LR__3486
28cd4     01 2C 66 F6 | 	neg	local04, #1
28cd8     97 26 48 FB | 	callpa	#(@LR__3485-@LR__3482)>>2,fcache_load_ptr_
28cdc                 | LR__3482
28cdc     01 2C 06 F1 | 	add	local04, #1
28ce0     16 2F 02 F6 | 	mov	local05, local04
28ce4     13 2F 02 F1 | 	add	local05, local01
28ce8     17 31 C2 FA | 	rdbyte	local06, local05
28cec     41 30 56 F2 | 	cmps	local06, #65 wc
28cf0     18 00 90 CD |  if_b	jmp	#LR__3483
28cf4     5B 30 56 F2 | 	cmps	local06, #91 wc
28cf8     16 33 02 C6 |  if_b	mov	local07, local04
28cfc     15 33 02 C1 |  if_b	add	local07, local03
28d00     20 30 06 C1 |  if_b	add	local06, #32
28d04     19 31 42 CC |  if_b	wrbyte	local06, local07
28d08     0C 00 90 CD |  if_b	jmp	#LR__3484
28d0c                 | LR__3483
28d0c     16 33 02 F6 | 	mov	local07, local04
28d10     15 33 02 F1 | 	add	local07, local03
28d14     19 31 42 FC | 	wrbyte	local06, local07
28d18                 | LR__3484
28d18     14 31 02 F6 | 	mov	local06, local02
28d1c     01 30 86 F1 | 	sub	local06, #1
28d20     18 2D 0A F2 | 	cmp	local04, local06 wz
28d24     B4 FF 9F 5D |  if_ne	jmp	#LR__3482
28d28                 | LR__3485
28d28     15 29 02 F1 | 	add	local02, local03
28d2c     14 01 48 FC | 	wrbyte	#0, local02
28d30     15 FB 01 F6 | 	mov	result1, local03
28d34     04 00 90 FD | 	jmp	#LR__3487
28d38                 | LR__3486
28d38     15 FB 01 F6 | 	mov	result1, local03
28d3c                 | LR__3487
28d3c     A7 F0 03 F6 | 	mov	ptra, fp
28d40     B2 00 A0 FD | 	call	#popregs_
28d44                 | __system__LCase_S_ret
28d44     2D 00 64 FD | 	ret
28d48                 | 
28d48                 | __system__LTrim_S
28d48     05 4A 05 F6 | 	mov	COUNT_, #5
28d4c     A8 00 A0 FD | 	call	#pushregs_
28d50     09 27 02 F6 | 	mov	local01, arg01
28d54     09 29 02 F6 | 	mov	local02, arg01
28d58     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
28d5c                 | LR__3490
28d5c     14 FB C9 FA | 	rdbyte	result1, local02 wz
28d60     01 28 06 51 |  if_ne	add	local02, #1
28d64     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
28d68                 | LR__3491
28d68     09 29 82 F1 | 	sub	local02, arg01
28d6c     14 FB 01 F6 | 	mov	result1, local02
28d70     FD 28 0A F6 | 	mov	local02, result1 wz
28d74     B2 01 00 AF 
28d78     17 FA 05 A6 |  if_e	mov	result1, ##@LR__5378
28d7c     7C 00 90 AD |  if_e	jmp	#LR__3496
28d80     00 2A 06 F6 | 	mov	local03, #0
28d84     14 2D 02 F6 | 	mov	local04, local02
28d88                 | LR__3492
28d88     16 2B 52 F2 | 	cmps	local03, local04 wc
28d8c     68 00 90 3D |  if_ae	jmp	#LR__3495
28d90     15 17 02 F6 | 	mov	arg03, local03
28d94     13 17 02 F1 | 	add	arg03, local01
28d98     0B 17 C2 FA | 	rdbyte	arg03, arg03
28d9c     20 16 0E F2 | 	cmp	arg03, #32 wz
28da0     4C 00 90 AD |  if_e	jmp	#LR__3494
28da4     14 13 02 F6 | 	mov	arg01, local02
28da8     15 13 82 F1 | 	sub	arg01, local03
28dac     02 12 06 F1 | 	add	arg01, #2
28db0     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
28db4     FD 2E 0A F6 | 	mov	local05, result1 wz
28db8     2C 00 90 AD |  if_e	jmp	#LR__3493
28dbc     15 15 02 F6 | 	mov	arg02, local03
28dc0     13 15 02 F1 | 	add	arg02, local01
28dc4     14 17 02 F6 | 	mov	arg03, local02
28dc8     15 17 82 F1 | 	sub	arg03, local03
28dcc     17 13 02 F6 | 	mov	arg01, local05
28dd0     44 DA BF FD | 	call	#__system____builtin_memmove
28dd4     15 29 82 F1 | 	sub	local02, local03
28dd8     17 29 02 F1 | 	add	local02, local05
28ddc     14 01 48 FC | 	wrbyte	#0, local02
28de0     17 FB 01 F6 | 	mov	result1, local05
28de4     14 00 90 FD | 	jmp	#LR__3496
28de8                 | LR__3493
28de8     17 FB 01 F6 | 	mov	result1, local05
28dec     0C 00 90 FD | 	jmp	#LR__3496
28df0                 | LR__3494
28df0     01 2A 06 F1 | 	add	local03, #1
28df4     90 FF 9F FD | 	jmp	#LR__3492
28df8                 | LR__3495
28df8     13 FB 01 F6 | 	mov	result1, local01
28dfc                 | LR__3496
28dfc     A7 F0 03 F6 | 	mov	ptra, fp
28e00     B2 00 A0 FD | 	call	#popregs_
28e04                 | __system__LTrim_S_ret
28e04     2D 00 64 FD | 	ret
28e08                 | 
28e08                 | __system__RTrim_S
28e08     04 4A 05 F6 | 	mov	COUNT_, #4
28e0c     A8 00 A0 FD | 	call	#pushregs_
28e10     09 27 02 F6 | 	mov	local01, arg01
28e14     09 29 02 F6 | 	mov	local02, arg01
28e18     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
28e1c                 | LR__3500
28e1c     14 FB C9 FA | 	rdbyte	result1, local02 wz
28e20     01 28 06 51 |  if_ne	add	local02, #1
28e24     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
28e28                 | LR__3501
28e28     09 29 82 F1 | 	sub	local02, arg01
28e2c     14 FB 01 F6 | 	mov	result1, local02
28e30     FD 28 0A F6 | 	mov	local02, result1 wz
28e34     B2 01 00 AF 
28e38     18 FA 05 A6 |  if_e	mov	result1, ##@LR__5379
28e3c     74 00 90 AD |  if_e	jmp	#LR__3505
28e40     14 2B 02 F6 | 	mov	local03, local02
28e44     01 2A 86 F1 | 	sub	local03, #1
28e48                 | LR__3502
28e48     15 15 02 F6 | 	mov	arg02, local03
28e4c     13 15 02 F1 | 	add	arg02, local01
28e50     0A 29 C2 FA | 	rdbyte	local02, arg02
28e54     20 28 0E F2 | 	cmp	local02, #32 wz
28e58     44 00 90 AD |  if_e	jmp	#LR__3504
28e5c     15 13 02 F6 | 	mov	arg01, local03
28e60     02 12 06 F1 | 	add	arg01, #2
28e64     34 1C B0 FD | 	call	#__system___gc_alloc_managed
28e68     FD 2C 0A F6 | 	mov	local04, result1 wz
28e6c     28 00 90 AD |  if_e	jmp	#LR__3503
28e70     15 17 02 F6 | 	mov	arg03, local03
28e74     01 16 06 F1 | 	add	arg03, #1
28e78     16 13 02 F6 | 	mov	arg01, local04
28e7c     13 15 02 F6 | 	mov	arg02, local01
28e80     94 D9 BF FD | 	call	#__system____builtin_memmove
28e84     01 2A 06 F1 | 	add	local03, #1
28e88     16 2B 02 F1 | 	add	local03, local04
28e8c     15 01 48 FC | 	wrbyte	#0, local03
28e90     16 FB 01 F6 | 	mov	result1, local04
28e94     1C 00 90 FD | 	jmp	#LR__3505
28e98                 | LR__3503
28e98     16 FB 01 F6 | 	mov	result1, local04
28e9c     14 00 90 FD | 	jmp	#LR__3505
28ea0                 | LR__3504
28ea0     01 2A 86 F1 | 	sub	local03, #1
28ea4     00 2A 56 F2 | 	cmps	local03, #0 wc
28ea8     9C FF 9F 3D |  if_ae	jmp	#LR__3502
28eac     B2 01 00 FF 
28eb0     19 FA 05 F6 | 	mov	result1, ##@LR__5380
28eb4                 | LR__3505
28eb4     A7 F0 03 F6 | 	mov	ptra, fp
28eb8     B2 00 A0 FD | 	call	#popregs_
28ebc                 | __system__RTrim_S_ret
28ebc     2D 00 64 FD | 	ret
28ec0                 | 
28ec0                 | __system__Instr
28ec0     07 4A 05 F6 | 	mov	COUNT_, #7
28ec4     A8 00 A0 FD | 	call	#pushregs_
28ec8     09 27 02 F6 | 	mov	local01, arg01
28ecc     0A 29 02 F6 | 	mov	local02, arg02
28ed0     0B 2B 02 F6 | 	mov	local03, arg03
28ed4     15 13 02 F6 | 	mov	arg01, local03
28ed8     09 2D 02 F6 | 	mov	local04, arg01
28edc     97 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
28ee0                 | LR__3510
28ee0     16 FB C9 FA | 	rdbyte	result1, local04 wz
28ee4     01 2C 06 51 |  if_ne	add	local04, #1
28ee8     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
28eec                 | LR__3511
28eec     09 2D 82 F1 | 	sub	local04, arg01
28ef0     16 2F 02 F6 | 	mov	local05, local04
28ef4     14 13 02 F6 | 	mov	arg01, local02
28ef8     09 2D 02 F6 | 	mov	local04, arg01
28efc     97 06 48 FB | 	callpa	#(@LR__3513-@LR__3512)>>2,fcache_load_ptr_
28f00                 | LR__3512
28f00     16 FB C9 FA | 	rdbyte	result1, local04 wz
28f04     01 2C 06 51 |  if_ne	add	local04, #1
28f08     F4 FF 9F 5D |  if_ne	jmp	#LR__3512
28f0c                 | LR__3513
28f0c     09 2D 82 F1 | 	sub	local04, arg01
28f10     16 FB 01 F6 | 	mov	result1, local04
28f14     FD 18 0A F6 | 	mov	arg04, result1 wz
28f18     00 FA 05 A6 |  if_e	mov	result1, #0
28f1c     98 00 90 AD |  if_e	jmp	#LR__3517
28f20     00 2E 0E F2 | 	cmp	local05, #0 wz
28f24     00 FA 05 A6 |  if_e	mov	result1, #0
28f28     8C 00 90 AD |  if_e	jmp	#LR__3517
28f2c     0C 27 5A F2 | 	cmps	local01, arg04 wcz
28f30     00 FA 05 16 |  if_a	mov	result1, #0
28f34     80 00 90 1D |  if_a	jmp	#LR__3517
28f38     01 26 56 F2 | 	cmps	local01, #1 wc
28f3c     01 26 06 C6 |  if_b	mov	local01, #1
28f40     15 31 C2 FA | 	rdbyte	local06, local03
28f44     01 2E 0E F2 | 	cmp	local05, #1 wz
28f48     18 00 90 5D |  if_ne	jmp	#LR__3514
28f4c     14 13 02 F6 | 	mov	arg01, local02
28f50     18 15 02 F6 | 	mov	arg02, local06
28f54     13 17 02 F6 | 	mov	arg03, local01
28f58     00 18 06 F6 | 	mov	arg04, #0
28f5c     14 37 B0 FD | 	call	#__system____ScanForChar
28f60     54 00 90 FD | 	jmp	#LR__3517
28f64                 | LR__3514
28f64     13 33 02 F6 | 	mov	local07, local01
28f68                 | LR__3515
28f68     14 13 02 F6 | 	mov	arg01, local02
28f6c     18 15 02 F6 | 	mov	arg02, local06
28f70     19 17 02 F6 | 	mov	arg03, local07
28f74     00 18 06 F6 | 	mov	arg04, #0
28f78     F8 36 B0 FD | 	call	#__system____ScanForChar
28f7c     FD 32 0A F6 | 	mov	local07, result1 wz
28f80     30 00 90 AD |  if_e	jmp	#LR__3516
28f84     17 17 02 F6 | 	mov	arg03, local05
28f88     14 13 02 F6 | 	mov	arg01, local02
28f8c     19 15 02 F6 | 	mov	arg02, local07
28f90     FC FA BF FD | 	call	#__system__Mid_S
28f94     FD 12 02 F6 | 	mov	arg01, result1
28f98     15 15 02 F6 | 	mov	arg02, local03
28f9c     80 D9 BF FD | 	call	#__system___string_cmp
28fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
28fa4     19 FB 01 A6 |  if_e	mov	result1, local07
28fa8     0C 00 90 AD |  if_e	jmp	#LR__3517
28fac     17 33 02 F1 | 	add	local07, local05
28fb0     B4 FF 9F FD | 	jmp	#LR__3515
28fb4                 | LR__3516
28fb4     00 FA 05 F6 | 	mov	result1, #0
28fb8                 | LR__3517
28fb8     A7 F0 03 F6 | 	mov	ptra, fp
28fbc     B2 00 A0 FD | 	call	#popregs_
28fc0                 | __system__Instr_ret
28fc0     2D 00 64 FD | 	ret
28fc4                 | 
28fc4                 | __system__InstrRev
28fc4     07 4A 05 F6 | 	mov	COUNT_, #7
28fc8     A8 00 A0 FD | 	call	#pushregs_
28fcc     09 27 02 F6 | 	mov	local01, arg01
28fd0     0A 29 02 F6 | 	mov	local02, arg02
28fd4     0B 2B 02 F6 | 	mov	local03, arg03
28fd8     15 13 02 F6 | 	mov	arg01, local03
28fdc     09 2D 02 F6 | 	mov	local04, arg01
28fe0     97 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
28fe4                 | LR__3520
28fe4     16 FB C9 FA | 	rdbyte	result1, local04 wz
28fe8     01 2C 06 51 |  if_ne	add	local04, #1
28fec     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
28ff0                 | LR__3521
28ff0     09 2D 82 F1 | 	sub	local04, arg01
28ff4     16 2F 02 F6 | 	mov	local05, local04
28ff8     14 13 02 F6 | 	mov	arg01, local02
28ffc     09 2D 02 F6 | 	mov	local04, arg01
29000     97 06 48 FB | 	callpa	#(@LR__3523-@LR__3522)>>2,fcache_load_ptr_
29004                 | LR__3522
29004     16 FB C9 FA | 	rdbyte	result1, local04 wz
29008     01 2C 06 51 |  if_ne	add	local04, #1
2900c     F4 FF 9F 5D |  if_ne	jmp	#LR__3522
29010                 | LR__3523
29010     09 2D 82 F1 | 	sub	local04, arg01
29014     16 FB 01 F6 | 	mov	result1, local04
29018     FD 18 0A F6 | 	mov	arg04, result1 wz
2901c     00 FA 05 A6 |  if_e	mov	result1, #0
29020     98 00 90 AD |  if_e	jmp	#LR__3527
29024     00 2E 0E F2 | 	cmp	local05, #0 wz
29028     00 FA 05 A6 |  if_e	mov	result1, #0
2902c     8C 00 90 AD |  if_e	jmp	#LR__3527
29030     0C 27 5A F2 | 	cmps	local01, arg04 wcz
29034     0C 27 02 16 |  if_a	mov	local01, arg04
29038     01 26 56 F2 | 	cmps	local01, #1 wc
2903c     01 26 06 C6 |  if_b	mov	local01, #1
29040     15 31 C2 FA | 	rdbyte	local06, local03
29044     01 2E 0E F2 | 	cmp	local05, #1 wz
29048     18 00 90 5D |  if_ne	jmp	#LR__3524
2904c     14 13 02 F6 | 	mov	arg01, local02
29050     18 15 02 F6 | 	mov	arg02, local06
29054     13 17 02 F6 | 	mov	arg03, local01
29058     01 18 06 F6 | 	mov	arg04, #1
2905c     14 36 B0 FD | 	call	#__system____ScanForChar
29060     58 00 90 FD | 	jmp	#LR__3527
29064                 | LR__3524
29064     17 33 02 F6 | 	mov	local07, local05
29068     01 32 86 F1 | 	sub	local07, #1
2906c                 | LR__3525
2906c     14 13 02 F6 | 	mov	arg01, local02
29070     18 15 02 F6 | 	mov	arg02, local06
29074     19 17 02 F6 | 	mov	arg03, local07
29078     01 18 06 F6 | 	mov	arg04, #1
2907c     F4 35 B0 FD | 	call	#__system____ScanForChar
29080     FD 32 0A F6 | 	mov	local07, result1 wz
29084     30 00 90 AD |  if_e	jmp	#LR__3526
29088     17 17 02 F6 | 	mov	arg03, local05
2908c     14 13 02 F6 | 	mov	arg01, local02
29090     19 15 02 F6 | 	mov	arg02, local07
29094     F8 F9 BF FD | 	call	#__system__Mid_S
29098     FD 12 02 F6 | 	mov	arg01, result1
2909c     15 15 02 F6 | 	mov	arg02, local03
290a0     7C D8 BF FD | 	call	#__system___string_cmp
290a4     00 FA 0D F2 | 	cmp	result1, #0 wz
290a8     19 FB 01 A6 |  if_e	mov	result1, local07
290ac     0C 00 90 AD |  if_e	jmp	#LR__3527
290b0     17 33 82 F1 | 	sub	local07, local05
290b4     B4 FF 9F FD | 	jmp	#LR__3525
290b8                 | LR__3526
290b8     00 FA 05 F6 | 	mov	result1, #0
290bc                 | LR__3527
290bc     A7 F0 03 F6 | 	mov	ptra, fp
290c0     B2 00 A0 FD | 	call	#popregs_
290c4                 | __system__InstrRev_ret
290c4     2D 00 64 FD | 	ret
290c8                 | 
290c8                 | __system___remove
290c8     06 4A 05 F6 | 	mov	COUNT_, #6
290cc     A8 00 A0 FD | 	call	#pushregs_
290d0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
290d4     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
290d8     09 15 02 F6 | 	mov	arg02, arg01
290dc     13 13 02 F6 | 	mov	arg01, local01
290e0     00 16 06 F6 | 	mov	arg03, #0
290e4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
290e8     A4 DF BF FD | 	call	#__system____getvfsforfile
290ec     FD 28 0A F6 | 	mov	local02, result1 wz
290f0     10 00 90 AD |  if_e	jmp	#LR__3530
290f4     20 28 06 F1 | 	add	local02, #32
290f8     14 13 0A FB | 	rdlong	arg01, local02 wz
290fc     20 28 86 F1 | 	sub	local02, #32
29100     14 00 90 5D |  if_ne	jmp	#LR__3531
29104                 | LR__3530
29104     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29108     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2910c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29110     01 FA 65 F6 | 	neg	result1, #1
29114     A8 00 90 FD | 	jmp	#LR__3534
29118                 | LR__3531
29118     40 28 06 F1 | 	add	local02, #64
2911c     14 2B 02 FB | 	rdlong	local03, local02
29120     15 2D 02 F6 | 	mov	local04, local03
29124     40 28 86 F1 | 	sub	local02, #64
29128     13 2C 46 F7 | 	zerox	local04, #19
2912c     14 2A 46 F0 | 	shr	local03, #20
29130     02 2A 66 F0 | 	shl	local03, #2
29134     ED 2A 02 F1 | 	add	local03, __methods__
29138     15 2B 02 FB | 	rdlong	local03, local03
2913c     13 13 02 F6 | 	mov	arg01, local01
29140     F2 2E 02 F6 | 	mov	local05, objptr
29144     16 E5 01 F6 | 	mov	objptr, local04
29148     2D 2A 62 FD | 	call	local03
2914c     17 E5 01 F6 | 	mov	objptr, local05
29150     FD 30 02 F6 | 	mov	local06, result1
29154     FF FF 7F FF 
29158     F2 31 0E F2 | 	cmp	local06, ##-14 wz
2915c     38 00 90 5D |  if_ne	jmp	#LR__3532
29160     3C 28 06 F1 | 	add	local02, #60
29164     14 31 02 FB | 	rdlong	local06, local02
29168     18 2B 02 F6 | 	mov	local03, local06
2916c     13 30 46 F7 | 	zerox	local06, #19
29170     14 2A 46 F0 | 	shr	local03, #20
29174     02 2A 66 F0 | 	shl	local03, #2
29178     ED 2A 02 F1 | 	add	local03, __methods__
2917c     15 2B 02 FB | 	rdlong	local03, local03
29180     13 13 02 F6 | 	mov	arg01, local01
29184     F2 2E 02 F6 | 	mov	local05, objptr
29188     18 E5 01 F6 | 	mov	objptr, local06
2918c     2D 2A 62 FD | 	call	local03
29190     17 E5 01 F6 | 	mov	objptr, local05
29194     FD 30 02 F6 | 	mov	local06, result1
29198                 | LR__3532
29198     00 30 0E F2 | 	cmp	local06, #0 wz
2919c     1C 00 90 AD |  if_e	jmp	#LR__3533
291a0     18 13 6A F6 | 	neg	arg01, local06 wz
291a4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
291a8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
291ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
291b0     01 FA 65 56 |  if_ne	neg	result1, #1
291b4     00 FA 05 A6 |  if_e	mov	result1, #0
291b8     04 00 90 FD | 	jmp	#LR__3534
291bc                 | LR__3533
291bc     00 FA 05 F6 | 	mov	result1, #0
291c0                 | LR__3534
291c0     A7 F0 03 F6 | 	mov	ptra, fp
291c4     B2 00 A0 FD | 	call	#popregs_
291c8                 | __system___remove_ret
291c8     2D 00 64 FD | 	ret
291cc                 | 
291cc                 | __system___mkdir
291cc     05 4A 05 F6 | 	mov	COUNT_, #5
291d0     A8 00 A0 FD | 	call	#pushregs_
291d4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
291d8     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
291dc     09 15 02 F6 | 	mov	arg02, arg01
291e0     13 13 02 F6 | 	mov	arg01, local01
291e4     00 16 06 F6 | 	mov	arg03, #0
291e8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
291ec     A0 DE BF FD | 	call	#__system____getvfsforfile
291f0     FD 28 0A F6 | 	mov	local02, result1 wz
291f4     10 00 90 AD |  if_e	jmp	#LR__3540
291f8     20 28 06 F1 | 	add	local02, #32
291fc     14 15 0A FB | 	rdlong	arg02, local02 wz
29200     20 28 86 F1 | 	sub	local02, #32
29204     14 00 90 5D |  if_ne	jmp	#LR__3541
29208                 | LR__3540
29208     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2920c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29210     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29214     01 FA 65 F6 | 	neg	result1, #1
29218     60 00 90 FD | 	jmp	#LR__3543
2921c                 | LR__3541
2921c     38 28 06 F1 | 	add	local02, #56
29220     14 2B 02 FB | 	rdlong	local03, local02
29224     15 2D 02 F6 | 	mov	local04, local03
29228     13 2A 46 F7 | 	zerox	local03, #19
2922c     14 2C 46 F0 | 	shr	local04, #20
29230     02 2C 66 F0 | 	shl	local04, #2
29234     ED 2C 02 F1 | 	add	local04, __methods__
29238     16 2D 02 FB | 	rdlong	local04, local04
2923c     13 13 02 F6 | 	mov	arg01, local01
29240     FF 15 06 F6 | 	mov	arg02, #511
29244     F2 2E 02 F6 | 	mov	local05, objptr
29248     15 E5 01 F6 | 	mov	objptr, local03
2924c     2D 2C 62 FD | 	call	local04
29250     17 E5 01 F6 | 	mov	objptr, local05
29254     FD 12 0A F6 | 	mov	arg01, result1 wz
29258     1C 00 90 AD |  if_e	jmp	#LR__3542
2925c     09 13 6A F6 | 	neg	arg01, arg01 wz
29260     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29264     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29268     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2926c     01 FA 65 56 |  if_ne	neg	result1, #1
29270     00 FA 05 A6 |  if_e	mov	result1, #0
29274     04 00 90 FD | 	jmp	#LR__3543
29278                 | LR__3542
29278     00 FA 05 F6 | 	mov	result1, #0
2927c                 | LR__3543
2927c     A7 F0 03 F6 | 	mov	ptra, fp
29280     B2 00 A0 FD | 	call	#popregs_
29284                 | __system___mkdir_ret
29284     2D 00 64 FD | 	ret
29288                 | 
29288                 | __system___strerror
29288     00 12 56 F2 | 	cmps	arg01, #0 wc
2928c     08 00 90 CD |  if_b	jmp	#LR__3550
29290     1A 12 56 F2 | 	cmps	arg01, #26 wc
29294     04 00 90 CD |  if_b	jmp	#LR__3551
29298                 | LR__3550
29298     19 12 06 F6 | 	mov	arg01, #25
2929c                 | LR__3551
2929c     02 12 66 F0 | 	shl	arg01, #2
292a0     01 00 00 FF 
292a4     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
292a8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
292ac     09 FB 01 FB | 	rdlong	result1, arg01
292b0     01 00 00 FF 
292b4     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
292b8                 | __system___strerror_ret
292b8     2D 00 64 FD | 	ret
292bc                 | 
292bc                 | __system___int64_shl
292bc     20 16 CE F7 | 	test	arg03, #32 wz
292c0     09 15 02 56 |  if_ne	mov	arg02, arg01
292c4     00 12 06 56 |  if_ne	mov	arg01, #0
292c8     1F 16 CE F7 | 	test	arg03, #31 wz
292cc     18 00 90 AD |  if_e	jmp	#LR__3560
292d0     0B 15 62 F0 | 	shl	arg02, arg03
292d4     09 FB 01 F6 | 	mov	result1, arg01
292d8     0B FD 61 F6 | 	neg	result2, arg03
292dc     FE FA 41 F0 | 	shr	result1, result2
292e0     FD 14 42 F5 | 	or	arg02, result1
292e4     0B 13 62 F0 | 	shl	arg01, arg03
292e8                 | LR__3560
292e8     0A FD 01 F6 | 	mov	result2, arg02
292ec     09 FB 01 F6 | 	mov	result1, arg01
292f0                 | __system___int64_shl_ret
292f0     2D 00 64 FD | 	ret
292f4                 | 
292f4                 | __system___usepins
292f4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
292f8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
292fc     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
29300     00 13 CA F7 | 	test	arg01, _var01 wz
29304     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
29308     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
2930c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
29310     01 15 CA A7 |  if_e	test	arg02, _var02 wz
29314     00 FA 05 56 |  if_ne	mov	result1, #0
29318     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
2931c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29320     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29324     09 03 42 F5 | 	or	_var02, arg01
29328     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2932c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29330     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29334     0A 03 42 F5 | 	or	_var02, arg02
29338     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2933c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29340     01 FA 65 F6 | 	neg	result1, #1
29344                 | __system___usepins_ret
29344     2D 00 64 FD | 	ret
29348                 | 
29348                 | __system___freepins
29348     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2934c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29350     09 01 22 F5 | 	andn	_var01, arg01
29354     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29358     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2935c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29360     0A 01 22 F5 | 	andn	_var01, arg02
29364     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29368     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2936c                 | __system___freepins_ret
2936c     2D 00 64 FD | 	ret
29370                 | 
29370                 | __system___float_fromuns
29370     09 17 0A F6 | 	mov	arg03, arg01 wz
29374     0B FB 01 A6 |  if_e	mov	result1, arg03
29378     24 00 90 AD |  if_e	jmp	#LR__3570
2937c     0B 15 92 F7 | 	encod	arg02, arg03 wc
29380     01 14 06 C1 |  if_b	add	arg02, #1
29384     01 14 86 F1 | 	sub	arg02, #1
29388     1F 12 06 F6 | 	mov	arg01, #31
2938c     0A 13 82 F1 | 	sub	arg01, arg02
29390     09 17 62 F0 | 	shl	arg03, arg01
29394     02 16 46 F0 | 	shr	arg03, #2
29398     00 12 06 F6 | 	mov	arg01, #0
2939c     4C 09 B0 FD | 	call	#__system___float_Pack
293a0                 | LR__3570
293a0                 | __system___float_fromuns_ret
293a0     2D 00 64 FD | 	ret
293a4                 | 
293a4                 | __system___float_add
293a4     0F 4A 05 F6 | 	mov	COUNT_, #15
293a8     A8 00 A0 FD | 	call	#pushregs_
293ac     09 27 02 F6 | 	mov	local01, arg01
293b0     0A 29 02 F6 | 	mov	local02, arg02
293b4     00 2A 06 F6 | 	mov	local03, #0
293b8     13 2D 02 F6 | 	mov	local04, local01
293bc     16 2F 02 F6 | 	mov	local05, local04
293c0     16 2E 46 F7 | 	zerox	local05, #22
293c4     16 31 02 F6 | 	mov	local06, local04
293c8     01 30 66 F0 | 	shl	local06, #1
293cc     18 30 46 F0 | 	shr	local06, #24
293d0     1F 2C 46 F0 | 	shr	local04, #31
293d4     14 13 02 F6 | 	mov	arg01, local02
293d8     09 FB 01 F6 | 	mov	result1, arg01
293dc     FD 32 02 F6 | 	mov	local07, result1
293e0     19 35 02 F6 | 	mov	local08, local07
293e4     16 34 46 F7 | 	zerox	local08, #22
293e8     19 37 02 F6 | 	mov	local09, local07
293ec     01 36 66 F0 | 	shl	local09, #1
293f0     18 36 46 F0 | 	shr	local09, #24
293f4     1B 39 02 F6 | 	mov	local10, local09
293f8     1F 32 46 F0 | 	shr	local07, #31
293fc     00 3A 06 F6 | 	mov	local11, #0
29400     00 3C 06 F6 | 	mov	local12, #0
29404     1C 31 12 F2 | 	cmp	local06, local10 wc
29408     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
2940c     2C 00 90 1D |  if_a	jmp	#LR__3580
29410     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
29414     24 00 90 3D |  if_ae	jmp	#LR__3580
29418     17 3F 02 F6 | 	mov	local13, local05
2941c     1A 2F 02 F6 | 	mov	local05, local08
29420     1F 35 02 F6 | 	mov	local08, local13
29424     18 3F 02 F6 | 	mov	local13, local06
29428     1C 31 02 F6 | 	mov	local06, local10
2942c     1F 39 02 F6 | 	mov	local10, local13
29430     16 3F 02 F6 | 	mov	local13, local04
29434     19 2D 02 F6 | 	mov	local04, local07
29438     1F 33 02 F6 | 	mov	local07, local13
2943c                 | LR__3580
2943c     FF 30 0E F2 | 	cmp	local06, #255 wz
29440     70 01 90 AD |  if_e	jmp	#LR__3595
29444     00 30 0E F2 | 	cmp	local06, #0 wz
29448     AC 01 90 AD |  if_e	jmp	#LR__3597
2944c     17 2E 26 F4 | 	bith	local05, #23
29450                 | LR__3581
29450     00 38 0E F2 | 	cmp	local10, #0 wz
29454     F0 01 90 AD |  if_e	jmp	#LR__3601
29458     17 34 26 F4 | 	bith	local08, #23
2945c                 | LR__3582
2945c     7F 30 86 F1 | 	sub	local06, #127
29460     7F 38 86 F1 | 	sub	local10, #127
29464     18 41 02 F6 | 	mov	local14, local06
29468     1C 41 82 F1 | 	sub	local14, local10
2946c     97 14 48 FB | 	callpa	#(@LR__3584-@LR__3583)>>2,fcache_load_ptr_
29470                 | LR__3583
29470     20 40 56 F2 | 	cmps	local14, #32 wc
29474     20 00 90 CD |  if_b	jmp	#LR__3585
29478     1A 37 02 F6 | 	mov	local09, local08
2947c     00 3A 0E F2 | 	cmp	local11, #0 wz
29480     6F 3A 62 FD | 	wrnz	local11
29484     1D 37 42 F5 | 	or	local09, local11
29488     1B 3B 02 F6 | 	mov	local11, local09
2948c     00 34 06 F6 | 	mov	local08, #0
29490     20 40 86 F1 | 	sub	local14, #32
29494     D8 FF 9F FD | 	jmp	#LR__3583
29498                 | LR__3584
29498                 | LR__3585
29498     00 40 0E F2 | 	cmp	local14, #0 wz
2949c     38 00 90 AD |  if_e	jmp	#LR__3586
294a0     1A 3F 02 F6 | 	mov	local13, local08
294a4     20 38 06 F6 | 	mov	local10, #32
294a8     20 39 82 F1 | 	sub	local10, local14
294ac     1C 3F 62 F0 | 	shl	local13, local10
294b0     1D 39 02 F6 | 	mov	local10, local11
294b4     20 36 06 F6 | 	mov	local09, #32
294b8     20 37 82 F1 | 	sub	local09, local14
294bc     1B 39 6A F0 | 	shl	local10, local09 wz
294c0     20 3B 42 F0 | 	shr	local11, local14
294c4     20 35 42 F0 | 	shr	local08, local14
294c8     1F 3B 42 F5 | 	or	local11, local13
294cc     00 42 06 F6 | 	mov	local15, #0
294d0     01 42 06 56 |  if_ne	mov	local15, #1
294d4     21 3B 42 F5 | 	or	local11, local15
294d8                 | LR__3586
294d8     16 43 02 F6 | 	mov	local15, local04
294dc     19 43 62 F5 | 	xor	local15, local07
294e0     01 42 CE F7 | 	test	local15, #1 wz
294e4     18 00 90 AD |  if_e	jmp	#LR__3587
294e8     1A 35 22 F6 | 	not	local08, local08
294ec     1D 3B 22 F6 | 	not	local11, local11
294f0     01 3A 0E F1 | 	add	local11, #1 wz
294f4     00 42 06 F6 | 	mov	local15, #0
294f8     01 42 06 A6 |  if_e	mov	local15, #1
294fc     21 35 02 F1 | 	add	local08, local15
29500                 | LR__3587
29500     1D 3D 12 F1 | 	add	local12, local11 wc
29504     1A 2F 22 F1 | 	addx	local05, local08
29508     00 2E 56 F2 | 	cmps	local05, #0 wc
2950c     1C 00 90 3D |  if_ae	jmp	#LR__3588
29510     01 2C 66 F5 | 	xor	local04, #1
29514     17 2F 22 F6 | 	not	local05, local05
29518     1E 3D 22 F6 | 	not	local12, local12
2951c     01 3C 0E F1 | 	add	local12, #1 wz
29520     00 42 06 F6 | 	mov	local15, #0
29524     01 42 06 A6 |  if_e	mov	local15, #1
29528     21 2F 02 F1 | 	add	local05, local15
2952c                 | LR__3588
2952c     00 80 00 FF 
29530     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
29534     28 00 90 CD |  if_b	jmp	#LR__3589
29538     01 30 06 F1 | 	add	local06, #1
2953c     1E 41 02 F6 | 	mov	local14, local12
29540     01 40 06 F5 | 	and	local14, #1
29544     01 3C 46 F0 | 	shr	local12, #1
29548     17 43 02 F6 | 	mov	local15, local05
2954c     1F 42 66 F0 | 	shl	local15, #31
29550     21 3D 42 F5 | 	or	local12, local15
29554     20 3D 42 F5 | 	or	local12, local14
29558     01 2E 46 F0 | 	shr	local05, #1
2955c     3C 00 90 FD | 	jmp	#LR__3594
29560                 | LR__3589
29560     00 40 00 FF 
29564     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29568     30 00 90 3D |  if_ae	jmp	#LR__3593
2956c     00 2E 0E F2 | 	cmp	local05, #0 wz
29570     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
29574     08 2C 46 A5 |  if_e	or	local04, #8
29578     01 2C 26 A5 |  if_e	andn	local04, #1
2957c     1C 00 90 AD |  if_e	jmp	#LR__3592
29580                 | LR__3590
29580     00 40 00 FF 
29584     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29588     10 00 90 3D |  if_ae	jmp	#LR__3591
2958c     1E 3D 12 F1 | 	add	local12, local12 wc
29590     17 2F 22 F1 | 	addx	local05, local05
29594     01 30 86 F1 | 	sub	local06, #1
29598     E4 FF 9F FD | 	jmp	#LR__3590
2959c                 | LR__3591
2959c                 | LR__3592
2959c                 | LR__3593
2959c                 | LR__3594
2959c     17 13 02 F6 | 	mov	arg01, local05
295a0     1E 15 02 F6 | 	mov	arg02, local12
295a4     18 17 02 F6 | 	mov	arg03, local06
295a8     16 19 02 F6 | 	mov	arg04, local04
295ac     08 35 B0 FD | 	call	#__system__pack_0677
295b0     DC 00 90 FD | 	jmp	#LR__3605
295b4                 | LR__3595
295b4     FF 38 0E F2 | 	cmp	local10, #255 wz
295b8     10 00 90 5D |  if_ne	jmp	#LR__3596
295bc     16 33 0A F2 | 	cmp	local07, local04 wz
295c0     00 F8 3F 5F 
295c4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
295c8     C4 00 90 5D |  if_ne	jmp	#LR__3605
295cc                 | LR__3596
295cc     00 2E 0E F2 | 	cmp	local05, #0 wz
295d0     00 F8 3F 5F 
295d4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
295d8     B4 00 90 5D |  if_ne	jmp	#LR__3605
295dc     1E 15 02 F6 | 	mov	arg02, local12
295e0     18 17 02 F6 | 	mov	arg03, local06
295e4     16 19 02 F6 | 	mov	arg04, local04
295e8     02 18 46 F5 | 	or	arg04, #2
295ec     17 13 02 F6 | 	mov	arg01, local05
295f0     C4 34 B0 FD | 	call	#__system__pack_0677
295f4     98 00 90 FD | 	jmp	#LR__3605
295f8                 | LR__3597
295f8     00 2E 0E F2 | 	cmp	local05, #0 wz
295fc     28 00 90 AD |  if_e	jmp	#LR__3600
29600     01 2E 66 F0 | 	shl	local05, #1
29604     97 0E 48 FB | 	callpa	#(@LR__3599-@LR__3598)>>2,fcache_load_ptr_
29608                 | LR__3598
29608     00 40 00 FF 
2960c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29610     18 43 02 C6 |  if_b	mov	local15, local06
29614     01 42 86 C1 |  if_b	sub	local15, #1
29618     21 31 02 C6 |  if_b	mov	local06, local15
2961c     01 2E 66 C0 |  if_b	shl	local05, #1
29620     E4 FF 9F CD |  if_b	jmp	#LR__3598
29624                 | LR__3599
29624     28 FE 9F FD | 	jmp	#LR__3581
29628                 | LR__3600
29628     19 2D 02 F5 | 	and	local04, local07
2962c     16 19 02 F6 | 	mov	arg04, local04
29630     08 18 46 F5 | 	or	arg04, #8
29634     00 12 06 F6 | 	mov	arg01, #0
29638     00 14 06 F6 | 	mov	arg02, #0
2963c     00 16 06 F6 | 	mov	arg03, #0
29640     74 34 B0 FD | 	call	#__system__pack_0677
29644     48 00 90 FD | 	jmp	#LR__3605
29648                 | LR__3601
29648     00 34 0E F2 | 	cmp	local08, #0 wz
2964c     28 00 90 AD |  if_e	jmp	#LR__3604
29650     01 34 66 F0 | 	shl	local08, #1
29654     97 0E 48 FB | 	callpa	#(@LR__3603-@LR__3602)>>2,fcache_load_ptr_
29658                 | LR__3602
29658     00 40 00 FF 
2965c     00 34 16 F2 | 	cmp	local08, ##8388608 wc
29660     1C 43 02 C6 |  if_b	mov	local15, local10
29664     01 42 86 C1 |  if_b	sub	local15, #1
29668     21 39 02 C6 |  if_b	mov	local10, local15
2966c     01 34 66 C0 |  if_b	shl	local08, #1
29670     E4 FF 9F CD |  if_b	jmp	#LR__3602
29674                 | LR__3603
29674     E4 FD 9F FD | 	jmp	#LR__3582
29678                 | LR__3604
29678     7F 30 86 F1 | 	sub	local06, #127
2967c     17 13 02 F6 | 	mov	arg01, local05
29680     1E 15 02 F6 | 	mov	arg02, local12
29684     18 17 02 F6 | 	mov	arg03, local06
29688     16 19 02 F6 | 	mov	arg04, local04
2968c     28 34 B0 FD | 	call	#__system__pack_0677
29690                 | LR__3605
29690     A7 F0 03 F6 | 	mov	ptra, fp
29694     B2 00 A0 FD | 	call	#popregs_
29698                 | __system___float_add_ret
29698     2D 00 64 FD | 	ret
2969c                 | 
2969c                 | __system___float_sqrt
2969c     04 4A 05 F6 | 	mov	COUNT_, #4
296a0     A8 00 A0 FD | 	call	#pushregs_
296a4     09 27 02 F6 | 	mov	local01, arg01
296a8     09 FB 01 F6 | 	mov	result1, arg01
296ac     FD 28 02 F6 | 	mov	local02, result1
296b0     14 2B 02 F6 | 	mov	local03, local02
296b4     16 2A 46 F7 | 	zerox	local03, #22
296b8     14 2D 02 F6 | 	mov	local04, local02
296bc     01 2C 66 F0 | 	shl	local04, #1
296c0     18 2C 4E F0 | 	shr	local04, #24 wz
296c4     1F 28 46 F0 | 	shr	local02, #31
296c8     70 00 90 AD |  if_e	jmp	#LR__3611
296cc     17 2A 26 F4 | 	bith	local03, #23
296d0                 | LR__3610
296d0     00 28 0E F2 | 	cmp	local02, #0 wz
296d4     00 F8 3F 5F 
296d8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
296dc     88 00 90 5D |  if_ne	jmp	#LR__3614
296e0     FF 2C 0E F2 | 	cmp	local04, #255 wz
296e4     13 FB 01 A6 |  if_e	mov	result1, local01
296e8     7C 00 90 AD |  if_e	jmp	#LR__3614
296ec     7F 2C 86 F1 | 	sub	local04, #127
296f0     01 2C CE F7 | 	test	local04, #1 wz
296f4     01 2A 66 50 |  if_ne	shl	local03, #1
296f8     05 2A 66 F0 | 	shl	local03, #5
296fc     15 01 38 FD | 	qsqrt	#0, local03
29700     01 2C 86 51 |  if_ne	sub	local04, #1
29704     16 2D 52 F6 | 	abs	local04, local04 wc
29708     01 2C 46 F0 | 	shr	local04, #1
2970c     16 17 82 F6 | 	negc	arg03, local04
29710     14 19 02 F6 | 	mov	arg04, local02
29714     18 12 62 FD | 	getqx	arg01
29718     09 15 02 F6 | 	mov	arg02, arg01
2971c     19 14 66 F0 | 	shl	arg02, #25
29720     07 12 46 F0 | 	shr	arg01, #7
29724     00 80 00 FF 
29728     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2972c     01 16 06 31 |  if_ae	add	arg03, #1
29730     01 12 46 30 |  if_ae	shr	arg01, #1
29734     80 33 B0 FD | 	call	#__system__pack_0677
29738     2C 00 90 FD | 	jmp	#LR__3614
2973c                 | LR__3611
2973c     00 2A 0E F2 | 	cmp	local03, #0 wz
29740     13 FB 01 A6 |  if_e	mov	result1, local01
29744     20 00 90 AD |  if_e	jmp	#LR__3614
29748     01 2A 66 F0 | 	shl	local03, #1
2974c     97 0A 48 FB | 	callpa	#(@LR__3613-@LR__3612)>>2,fcache_load_ptr_
29750                 | LR__3612
29750     00 40 00 FF 
29754     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
29758     01 2C 86 C1 |  if_b	sub	local04, #1
2975c     01 2A 66 C0 |  if_b	shl	local03, #1
29760     EC FF 9F CD |  if_b	jmp	#LR__3612
29764                 | LR__3613
29764     68 FF 9F FD | 	jmp	#LR__3610
29768                 | LR__3614
29768     A7 F0 03 F6 | 	mov	ptra, fp
2976c     B2 00 A0 FD | 	call	#popregs_
29770                 | __system___float_sqrt_ret
29770     2D 00 64 FD | 	ret
29774                 | 
29774                 | __system___float_mul
29774     0B 4A 05 F6 | 	mov	COUNT_, #11
29778     A8 00 A0 FD | 	call	#pushregs_
2977c     09 27 02 F6 | 	mov	local01, arg01
29780     0A 29 02 F6 | 	mov	local02, arg02
29784     13 2B 02 F6 | 	mov	local03, local01
29788     15 2D 02 F6 | 	mov	local04, local03
2978c     16 2C 46 F7 | 	zerox	local04, #22
29790     15 2F 02 F6 | 	mov	local05, local03
29794     01 2E 66 F0 | 	shl	local05, #1
29798     18 2E 46 F0 | 	shr	local05, #24
2979c     1F 2A 46 F0 | 	shr	local03, #31
297a0     14 FB 01 F6 | 	mov	result1, local02
297a4     FD 30 02 F6 | 	mov	local06, result1
297a8     18 33 02 F6 | 	mov	local07, local06
297ac     16 32 46 F7 | 	zerox	local07, #22
297b0     18 35 02 F6 | 	mov	local08, local06
297b4     01 34 66 F0 | 	shl	local08, #1
297b8     18 34 46 F0 | 	shr	local08, #24
297bc     1F 30 46 F0 | 	shr	local06, #31
297c0     18 2B 62 F5 | 	xor	local03, local06
297c4     FF 2E 0E F2 | 	cmp	local05, #255 wz
297c8     90 00 90 AD |  if_e	jmp	#LR__3623
297cc     FF 34 0E F2 | 	cmp	local08, #255 wz
297d0     D8 00 90 AD |  if_e	jmp	#LR__3625
297d4     00 2E 0E F2 | 	cmp	local05, #0 wz
297d8     0C 01 90 AD |  if_e	jmp	#LR__3626
297dc     17 2C 26 F4 | 	bith	local04, #23
297e0                 | LR__3620
297e0     00 34 0E F2 | 	cmp	local08, #0 wz
297e4     44 01 90 AD |  if_e	jmp	#LR__3630
297e8     17 32 26 F4 | 	bith	local07, #23
297ec                 | LR__3621
297ec     16 29 02 F6 | 	mov	local02, local04
297f0     04 28 66 F0 | 	shl	local02, #4
297f4     19 31 02 F6 | 	mov	local06, local07
297f8     05 30 66 F0 | 	shl	local06, #5
297fc     18 29 02 FD | 	qmul	local02, local06
29800     1A 2F 02 F1 | 	add	local05, local08
29804     FE 2E 86 F1 | 	sub	local05, #254
29808     17 37 02 F6 | 	mov	local09, local05
2980c     04 2C 66 F0 | 	shl	local04, #4
29810     05 32 66 F0 | 	shl	local07, #5
29814     18 38 62 FD | 	getqx	local10
29818     19 2D 02 FD | 	qmul	local04, local07
2981c     19 3A 62 FD | 	getqy	local11
29820     00 80 00 FF 
29824     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
29828     18 00 90 CD |  if_b	jmp	#LR__3622
2982c     01 36 06 F1 | 	add	local09, #1
29830     01 38 46 F0 | 	shr	local10, #1
29834     1D 35 02 F6 | 	mov	local08, local11
29838     1F 34 66 F0 | 	shl	local08, #31
2983c     1A 39 42 F5 | 	or	local10, local08
29840     01 3A 46 F0 | 	shr	local11, #1
29844                 | LR__3622
29844     1D 13 02 F6 | 	mov	arg01, local11
29848     1C 15 02 F6 | 	mov	arg02, local10
2984c     1B 17 02 F6 | 	mov	arg03, local09
29850     15 19 02 F6 | 	mov	arg04, local03
29854     60 32 B0 FD | 	call	#__system__pack_0677
29858     10 01 90 FD | 	jmp	#LR__3634
2985c                 | LR__3623
2985c     00 2C 0E F2 | 	cmp	local04, #0 wz
29860     13 FB 01 56 |  if_ne	mov	result1, local01
29864     04 01 90 5D |  if_ne	jmp	#LR__3634
29868     FF 34 56 F2 | 	cmps	local08, #255 wc
2986c     00 34 0E C2 |  if_b	cmp	local08, #0 wz
29870     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
29874     18 00 90 4D |  if_c_and_nz	jmp	#LR__3624
29878     00 F8 3F CF 
2987c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
29880     E8 00 90 CD |  if_b	jmp	#LR__3634
29884     00 32 0E F2 | 	cmp	local07, #0 wz
29888     14 FB 01 56 |  if_ne	mov	result1, local02
2988c     DC 00 90 5D |  if_ne	jmp	#LR__3634
29890                 | LR__3624
29890     02 2A 46 F5 | 	or	local03, #2
29894     00 12 06 F6 | 	mov	arg01, #0
29898     00 14 06 F6 | 	mov	arg02, #0
2989c     17 17 02 F6 | 	mov	arg03, local05
298a0     15 19 02 F6 | 	mov	arg04, local03
298a4     10 32 B0 FD | 	call	#__system__pack_0677
298a8     C0 00 90 FD | 	jmp	#LR__3634
298ac                 | LR__3625
298ac     00 2E 0E F2 | 	cmp	local05, #0 wz
298b0     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
298b4     00 F8 3F AF 
298b8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
298bc     AC 00 90 AD |  if_e	jmp	#LR__3634
298c0     00 32 0E F2 | 	cmp	local07, #0 wz
298c4     14 FB 01 56 |  if_ne	mov	result1, local02
298c8     A0 00 90 5D |  if_ne	jmp	#LR__3634
298cc     1A 17 02 F6 | 	mov	arg03, local08
298d0     15 19 02 F6 | 	mov	arg04, local03
298d4     02 18 46 F5 | 	or	arg04, #2
298d8     00 12 06 F6 | 	mov	arg01, #0
298dc     00 14 06 F6 | 	mov	arg02, #0
298e0     D4 31 B0 FD | 	call	#__system__pack_0677
298e4     84 00 90 FD | 	jmp	#LR__3634
298e8                 | LR__3626
298e8     00 2C 0E F2 | 	cmp	local04, #0 wz
298ec     20 00 90 AD |  if_e	jmp	#LR__3629
298f0     01 2C 66 F0 | 	shl	local04, #1
298f4     97 0A 48 FB | 	callpa	#(@LR__3628-@LR__3627)>>2,fcache_load_ptr_
298f8                 | LR__3627
298f8     00 40 00 FF 
298fc     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
29900     01 2E 86 C1 |  if_b	sub	local05, #1
29904     01 2C 66 C0 |  if_b	shl	local04, #1
29908     EC FF 9F CD |  if_b	jmp	#LR__3627
2990c                 | LR__3628
2990c     D0 FE 9F FD | 	jmp	#LR__3620
29910                 | LR__3629
29910     08 2A 46 F5 | 	or	local03, #8
29914     00 12 06 F6 | 	mov	arg01, #0
29918     00 14 06 F6 | 	mov	arg02, #0
2991c     00 16 06 F6 | 	mov	arg03, #0
29920     15 19 02 F6 | 	mov	arg04, local03
29924     90 31 B0 FD | 	call	#__system__pack_0677
29928     40 00 90 FD | 	jmp	#LR__3634
2992c                 | LR__3630
2992c     00 32 0E F2 | 	cmp	local07, #0 wz
29930     20 00 90 AD |  if_e	jmp	#LR__3633
29934     01 32 66 F0 | 	shl	local07, #1
29938     97 0A 48 FB | 	callpa	#(@LR__3632-@LR__3631)>>2,fcache_load_ptr_
2993c                 | LR__3631
2993c     00 40 00 FF 
29940     00 32 16 F2 | 	cmp	local07, ##8388608 wc
29944     01 34 86 C1 |  if_b	sub	local08, #1
29948     01 32 66 C0 |  if_b	shl	local07, #1
2994c     EC FF 9F CD |  if_b	jmp	#LR__3631
29950                 | LR__3632
29950     98 FE 9F FD | 	jmp	#LR__3621
29954                 | LR__3633
29954     08 2A 46 F5 | 	or	local03, #8
29958     00 12 06 F6 | 	mov	arg01, #0
2995c     00 14 06 F6 | 	mov	arg02, #0
29960     00 16 06 F6 | 	mov	arg03, #0
29964     15 19 02 F6 | 	mov	arg04, local03
29968     4C 31 B0 FD | 	call	#__system__pack_0677
2996c                 | LR__3634
2996c     A7 F0 03 F6 | 	mov	ptra, fp
29970     B2 00 A0 FD | 	call	#popregs_
29974                 | __system___float_mul_ret
29974     2D 00 64 FD | 	ret
29978                 | 
29978                 | __system___float_div
29978     0E 4A 05 F6 | 	mov	COUNT_, #14
2997c     A8 00 A0 FD | 	call	#pushregs_
29980     09 2B 02 F6 | 	mov	local03, arg01
29984     0A 2D 02 F6 | 	mov	local04, arg02
29988     15 2F 02 F6 | 	mov	local05, local03
2998c     17 31 02 F6 | 	mov	local06, local05
29990     16 30 46 F7 | 	zerox	local06, #22
29994     17 33 02 F6 | 	mov	local07, local05
29998     01 32 66 F0 | 	shl	local07, #1
2999c     18 32 46 F0 | 	shr	local07, #24
299a0     1F 2E 46 F0 | 	shr	local05, #31
299a4     16 FB 01 F6 | 	mov	result1, local04
299a8     FD 34 02 F6 | 	mov	local08, result1
299ac     1A 37 02 F6 | 	mov	local09, local08
299b0     16 36 46 F7 | 	zerox	local09, #22
299b4     1A 39 02 F6 | 	mov	local10, local08
299b8     01 38 66 F0 | 	shl	local10, #1
299bc     18 38 46 F0 | 	shr	local10, #24
299c0     1F 34 46 F0 | 	shr	local08, #31
299c4     1A 2F 62 F5 | 	xor	local05, local08
299c8     FF 32 0E F2 | 	cmp	local07, #255 wz
299cc     D4 00 90 AD |  if_e	jmp	#LR__3645
299d0     FF 38 0E F2 | 	cmp	local10, #255 wz
299d4     04 01 90 AD |  if_e	jmp	#LR__3646
299d8     00 32 0E F2 | 	cmp	local07, #0 wz
299dc     24 01 90 AD |  if_e	jmp	#LR__3647
299e0     17 30 26 F4 | 	bith	local06, #23
299e4                 | LR__3640
299e4     00 38 0E F2 | 	cmp	local10, #0 wz
299e8     70 01 90 AD |  if_e	jmp	#LR__3651
299ec     17 36 26 F4 | 	bith	local09, #23
299f0                 | LR__3641
299f0     1C 33 82 F1 | 	sub	local07, local10
299f4     19 3B 02 F6 | 	mov	local11, local07
299f8     18 13 02 F6 | 	mov	arg01, local06
299fc     02 12 46 F0 | 	shr	arg01, #2
29a00     1E 30 66 F0 | 	shl	local06, #30
29a04     18 15 02 F6 | 	mov	arg02, local06
29a08     1B 17 02 F6 | 	mov	arg03, local09
29a0c     28 12 62 FD | 	setq	arg01
29a10     0B 15 12 FD | 	qdiv	arg02, arg03
29a14     00 3C 06 F6 | 	mov	local12, #0
29a18     18 26 62 FD | 	getqx	local01
29a1c     19 FC 61 FD | 	getqy	result2
29a20     FE 28 02 F6 | 	mov	local02, result2
29a24     13 3F 02 F6 | 	mov	local13, local01
29a28     00 28 4E F2 | 	cmps	local02, #0 wz
29a2c     1F 41 02 F6 | 	mov	local14, local13
29a30     19 40 66 F0 | 	shl	local14, #25
29a34     01 3C 06 56 |  if_ne	mov	local12, #1
29a38     1E 41 42 F5 | 	or	local14, local12
29a3c     07 3E 46 F0 | 	shr	local13, #7
29a40     00 80 00 FF 
29a44     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
29a48     1C 00 90 CD |  if_b	jmp	#LR__3642
29a4c     01 3A 06 F1 | 	add	local11, #1
29a50     01 40 46 F0 | 	shr	local14, #1
29a54     1F 3D 02 F6 | 	mov	local12, local13
29a58     1F 3C 66 F0 | 	shl	local12, #31
29a5c     1E 41 42 F5 | 	or	local14, local12
29a60     01 3E 46 F0 | 	shr	local13, #1
29a64     24 00 90 FD | 	jmp	#LR__3644
29a68                 | LR__3642
29a68     00 40 00 FF 
29a6c     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
29a70     18 00 90 3D |  if_ae	jmp	#LR__3643
29a74     01 3A 86 F1 | 	sub	local11, #1
29a78     01 3E 66 F0 | 	shl	local13, #1
29a7c     20 3D 02 F6 | 	mov	local12, local14
29a80     1F 3C 46 F0 | 	shr	local12, #31
29a84     1E 3F 42 F5 | 	or	local13, local12
29a88     01 40 66 F0 | 	shl	local14, #1
29a8c                 | LR__3643
29a8c                 | LR__3644
29a8c     1F 13 02 F6 | 	mov	arg01, local13
29a90     20 15 02 F6 | 	mov	arg02, local14
29a94     1D 17 02 F6 | 	mov	arg03, local11
29a98     17 19 02 F6 | 	mov	arg04, local05
29a9c     18 30 B0 FD | 	call	#__system__pack_0677
29aa0     F8 00 90 FD | 	jmp	#LR__3655
29aa4                 | LR__3645
29aa4     00 30 0E F2 | 	cmp	local06, #0 wz
29aa8     15 FB 01 56 |  if_ne	mov	result1, local03
29aac     EC 00 90 5D |  if_ne	jmp	#LR__3655
29ab0     FF 38 0E F2 | 	cmp	local10, #255 wz
29ab4     00 F8 3F AF 
29ab8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29abc     DC 00 90 AD |  if_e	jmp	#LR__3655
29ac0     02 2E 46 F5 | 	or	local05, #2
29ac4     00 12 06 F6 | 	mov	arg01, #0
29ac8     00 14 06 F6 | 	mov	arg02, #0
29acc     19 17 02 F6 | 	mov	arg03, local07
29ad0     17 19 02 F6 | 	mov	arg04, local05
29ad4     E0 2F B0 FD | 	call	#__system__pack_0677
29ad8     C0 00 90 FD | 	jmp	#LR__3655
29adc                 | LR__3646
29adc     00 36 0E F2 | 	cmp	local09, #0 wz
29ae0     16 FB 01 56 |  if_ne	mov	result1, local04
29ae4     B4 00 90 5D |  if_ne	jmp	#LR__3655
29ae8     17 19 02 F6 | 	mov	arg04, local05
29aec     08 18 46 F5 | 	or	arg04, #8
29af0     00 12 06 F6 | 	mov	arg01, #0
29af4     00 14 06 F6 | 	mov	arg02, #0
29af8     00 16 06 F6 | 	mov	arg03, #0
29afc     B8 2F B0 FD | 	call	#__system__pack_0677
29b00     98 00 90 FD | 	jmp	#LR__3655
29b04                 | LR__3647
29b04     00 30 0E F2 | 	cmp	local06, #0 wz
29b08     20 00 90 AD |  if_e	jmp	#LR__3650
29b0c     01 30 66 F0 | 	shl	local06, #1
29b10     97 0A 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
29b14                 | LR__3648
29b14     00 40 00 FF 
29b18     00 30 16 F2 | 	cmp	local06, ##8388608 wc
29b1c     01 32 86 C1 |  if_b	sub	local07, #1
29b20     01 30 66 C0 |  if_b	shl	local06, #1
29b24     EC FF 9F CD |  if_b	jmp	#LR__3648
29b28                 | LR__3649
29b28     B8 FE 9F FD | 	jmp	#LR__3640
29b2c                 | LR__3650
29b2c     00 38 0E F2 | 	cmp	local10, #0 wz
29b30     00 36 0E A2 |  if_e	cmp	local09, #0 wz
29b34     00 F8 3F AF 
29b38     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29b3c     5C 00 90 AD |  if_e	jmp	#LR__3655
29b40     17 19 02 F6 | 	mov	arg04, local05
29b44     08 18 46 F5 | 	or	arg04, #8
29b48     00 12 06 F6 | 	mov	arg01, #0
29b4c     00 14 06 F6 | 	mov	arg02, #0
29b50     00 16 06 F6 | 	mov	arg03, #0
29b54     60 2F B0 FD | 	call	#__system__pack_0677
29b58     40 00 90 FD | 	jmp	#LR__3655
29b5c                 | LR__3651
29b5c     00 36 0E F2 | 	cmp	local09, #0 wz
29b60     20 00 90 AD |  if_e	jmp	#LR__3654
29b64     01 36 66 F0 | 	shl	local09, #1
29b68     97 0A 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
29b6c                 | LR__3652
29b6c     00 40 00 FF 
29b70     00 36 16 F2 | 	cmp	local09, ##8388608 wc
29b74     01 38 86 C1 |  if_b	sub	local10, #1
29b78     01 36 66 C0 |  if_b	shl	local09, #1
29b7c     EC FF 9F CD |  if_b	jmp	#LR__3652
29b80                 | LR__3653
29b80     6C FE 9F FD | 	jmp	#LR__3641
29b84                 | LR__3654
29b84     02 2E 46 F5 | 	or	local05, #2
29b88     00 12 06 F6 | 	mov	arg01, #0
29b8c     00 14 06 F6 | 	mov	arg02, #0
29b90     00 16 06 F6 | 	mov	arg03, #0
29b94     17 19 02 F6 | 	mov	arg04, local05
29b98     1C 2F B0 FD | 	call	#__system__pack_0677
29b9c                 | LR__3655
29b9c     A7 F0 03 F6 | 	mov	ptra, fp
29ba0     B2 00 A0 FD | 	call	#popregs_
29ba4                 | __system___float_div_ret
29ba4     2D 00 64 FD | 	ret
29ba8                 | 
29ba8                 | __system___float_cmp
29ba8     00 C0 3F FF 
29bac     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
29bb0     00 C0 3F CF 
29bb4     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
29bb8     0B FB 01 36 |  if_ae	mov	result1, arg03
29bbc     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
29bc0     00 C0 7F FF 
29bc4     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
29bc8     00 C0 7F CF 
29bcc     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
29bd0     0B FB 01 36 |  if_ae	mov	result1, arg03
29bd4     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
29bd8     00 12 56 F2 | 	cmps	arg01, #0 wc
29bdc     2C 00 90 3D |  if_ae	jmp	#LR__3660
29be0     00 14 56 F2 | 	cmps	arg02, #0 wc
29be4     0A FB 01 C6 |  if_b	mov	result1, arg02
29be8     09 FB 81 C1 |  if_b	sub	result1, arg01
29bec     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
29bf0     00 14 0E F2 | 	cmp	arg02, #0 wz
29bf4     00 00 40 AF 
29bf8     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
29bfc     00 FA 05 A6 |  if_e	mov	result1, #0
29c00     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29c04     01 FA 65 F6 | 	neg	result1, #1
29c08     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
29c0c                 | LR__3660
29c0c     00 14 56 F2 | 	cmps	arg02, #0 wc
29c10     1C 00 90 3D |  if_ae	jmp	#LR__3661
29c14     00 12 0E F2 | 	cmp	arg01, #0 wz
29c18     00 00 40 AF 
29c1c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
29c20     00 FA 05 A6 |  if_e	mov	result1, #0
29c24     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29c28     01 FA 05 F6 | 	mov	result1, #1
29c2c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
29c30                 | LR__3661
29c30     0A 13 82 F1 | 	sub	arg01, arg02
29c34     09 FB 01 F6 | 	mov	result1, arg01
29c38                 | __system___float_cmp_ret
29c38     2D 00 64 FD | 	ret
29c3c                 | 
29c3c                 | __system___float_tointeger
29c3c     02 4A 05 F6 | 	mov	COUNT_, #2
29c40     A8 00 A0 FD | 	call	#pushregs_
29c44     50 00 B0 FD | 	call	#__system___float_Unpack
29c48     FF FF 7F FF 
29c4c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
29c50     34 00 90 CD |  if_b	jmp	#LR__3670
29c54     1F FC 55 F2 | 	cmps	result2, #31 wc
29c58     2C 00 90 3D |  if_ae	jmp	#LR__3670
29c5c     02 FE 65 F0 | 	shl	result3, #2
29c60     1E 26 06 F6 | 	mov	local01, #30
29c64     FE 26 82 F1 | 	sub	local01, result2
29c68     13 FF 41 F0 | 	shr	result3, local01
29c6c     FF 28 02 F6 | 	mov	local02, result3
29c70     0A 29 02 F1 | 	add	local02, arg02
29c74     01 28 46 F0 | 	shr	local02, #1
29c78     00 FA 0D F2 | 	cmp	result1, #0 wz
29c7c     14 29 62 56 |  if_ne	neg	local02, local02
29c80     14 FB 01 F6 | 	mov	result1, local02
29c84     04 00 90 FD | 	jmp	#LR__3671
29c88                 | LR__3670
29c88     00 FA 05 F6 | 	mov	result1, #0
29c8c                 | LR__3671
29c8c     A7 F0 03 F6 | 	mov	ptra, fp
29c90     B2 00 A0 FD | 	call	#popregs_
29c94                 | __system___float_tointeger_ret
29c94     2D 00 64 FD | 	ret
29c98                 | 
29c98                 | __system___float_Unpack
29c98     09 01 02 F6 | 	mov	_var01, arg01
29c9c     1F 00 46 F0 | 	shr	_var01, #31
29ca0     09 03 02 F6 | 	mov	_var02, arg01
29ca4     01 02 66 F0 | 	shl	_var02, #1
29ca8     18 02 4E F0 | 	shr	_var02, #24 wz
29cac     17 13 06 F4 | 	bitl	arg01, #279
29cb0     06 12 66 50 |  if_ne	shl	arg01, #6
29cb4     1D 12 26 54 |  if_ne	bith	arg01, #29
29cb8     1C 00 90 5D |  if_ne	jmp	#LR__3680
29cbc     09 05 92 F7 | 	encod	_var03, arg01 wc
29cc0     01 04 06 C1 |  if_b	add	_var03, #1
29cc4     17 04 86 F1 | 	sub	_var03, #23
29cc8     02 03 02 F6 | 	mov	_var02, _var03
29ccc     07 FC 05 F6 | 	mov	result2, #7
29cd0     02 FD 81 F1 | 	sub	result2, _var03
29cd4     FE 12 62 F0 | 	shl	arg01, result2
29cd8                 | LR__3680
29cd8     7F 02 86 F1 | 	sub	_var02, #127
29cdc     09 FF 01 F6 | 	mov	result3, arg01
29ce0     00 FB 01 F6 | 	mov	result1, _var01
29ce4     01 FD 01 F6 | 	mov	result2, _var02
29ce8                 | __system___float_Unpack_ret
29ce8     2D 00 64 FD | 	ret
29cec                 | 
29cec                 | __system___float_Pack
29cec     00 00 06 F6 | 	mov	_var01, #0
29cf0     00 16 0E F2 | 	cmp	arg03, #0 wz
29cf4     8C 00 90 AD |  if_e	jmp	#LR__3691
29cf8     0B 03 92 F7 | 	encod	_var02, arg03 wc
29cfc     01 02 06 C1 |  if_b	add	_var02, #1
29d00     21 00 06 F6 | 	mov	_var01, #33
29d04     01 01 82 F1 | 	sub	_var01, _var02
29d08     00 17 62 F0 | 	shl	arg03, _var01
29d0c     03 02 06 F6 | 	mov	_var02, #3
29d10     00 03 82 F1 | 	sub	_var02, _var01
29d14     01 15 02 F1 | 	add	arg02, _var02
29d18     0A 05 02 F6 | 	mov	_var03, arg02
29d1c     00 17 06 F1 | 	add	arg03, #256
29d20     0B 03 02 F6 | 	mov	_var02, arg03
29d24     FF 02 2E F5 | 	andn	_var02, #255 wz
29d28     01 04 06 A1 |  if_e	add	_var03, #1
29d2c     7F 04 06 F1 | 	add	_var03, #127
29d30     FF FF 7F FF 
29d34     E9 05 46 F3 | 	fges	_var03, ##-23
29d38     FF 04 66 F3 | 	fles	_var03, #255
29d3c     01 04 56 F2 | 	cmps	_var03, #1 wc
29d40     1C 00 90 3D |  if_ae	jmp	#LR__3690
29d44     01 16 46 F0 | 	shr	arg03, #1
29d48     1F 02 C6 F9 | 	decod	_var02, #31
29d4c     0B 03 02 F1 | 	add	_var02, arg03
29d50     02 05 62 F6 | 	neg	_var03, _var03
29d54     02 03 42 F0 | 	shr	_var02, _var03
29d58     01 17 02 F6 | 	mov	arg03, _var02
29d5c     00 04 06 F6 | 	mov	_var03, #0
29d60                 | LR__3690
29d60     09 FB 01 F6 | 	mov	result1, arg01
29d64     1F FA 65 F0 | 	shl	result1, #31
29d68     02 03 02 F6 | 	mov	_var02, _var03
29d6c     17 02 66 F0 | 	shl	_var02, #23
29d70     01 FB 41 F5 | 	or	result1, _var02
29d74     0B 07 02 F6 | 	mov	_var04, arg03
29d78     09 06 46 F0 | 	shr	_var04, #9
29d7c     03 FB 41 F5 | 	or	result1, _var04
29d80     04 00 90 FD | 	jmp	#__system___float_Pack_ret
29d84                 | LR__3691
29d84     00 FB 01 F6 | 	mov	result1, _var01
29d88                 | __system___float_Pack_ret
29d88     2D 00 64 FD | 	ret
29d8c                 | 
29d8c                 | __system___basic_print_float
29d8c     05 4A 05 F6 | 	mov	COUNT_, #5
29d90     A8 00 A0 FD | 	call	#pushregs_
29d94     09 27 02 F6 | 	mov	local01, arg01
29d98     0A 29 02 F6 | 	mov	local02, arg02
29d9c     0B 2B 0A F6 | 	mov	local03, arg03 wz
29da0     0C 2D 02 F6 | 	mov	local04, arg04
29da4     14 00 90 5D |  if_ne	jmp	#LR__3700
29da8     23 2C 0E F2 | 	cmp	local04, #35 wz
29dac     80 02 10 AF 
29db0     00 2E 06 A6 |  if_e	mov	local05, ##537198592
29db4     1D 2E C6 59 |  if_ne	decod	local05, #29
29db8     17 2B 02 F6 | 	mov	local03, local05
29dbc                 | LR__3700
29dbc     13 13 02 F6 | 	mov	arg01, local01
29dc0     28 28 B0 FD | 	call	#__system___gettxfunc
29dc4     FD 2E 0A F6 | 	mov	local05, result1 wz
29dc8     00 FA 05 A6 |  if_e	mov	result1, #0
29dcc     17 13 02 56 |  if_ne	mov	arg01, local05
29dd0     15 15 02 56 |  if_ne	mov	arg02, local03
29dd4     14 17 02 56 |  if_ne	mov	arg03, local02
29dd8     16 19 02 56 |  if_ne	mov	arg04, local04
29ddc     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
29de0     A7 F0 03 F6 | 	mov	ptra, fp
29de4     B2 00 A0 FD | 	call	#popregs_
29de8                 | __system___basic_print_float_ret
29de8     2D 00 64 FD | 	ret
29dec                 | 
29dec                 | __system____builtin_atoi
29dec     07 4A 05 F6 | 	mov	COUNT_, #7
29df0     A8 00 A0 FD | 	call	#pushregs_
29df4                 | __system____builtin_atoi_enter
29df4     09 27 02 F6 | 	mov	local01, arg01
29df8     0A 29 02 F6 | 	mov	local02, arg02
29dfc     00 2A 06 F6 | 	mov	local03, #0
29e00     00 2C 06 F6 | 	mov	local04, #0
29e04     00 2E 06 F6 | 	mov	local05, #0
29e08     97 1C 48 FB | 	callpa	#(@LR__3712-@LR__3710)>>2,fcache_load_ptr_
29e0c                 | LR__3710
29e0c     13 31 C2 FA | 	rdbyte	local06, local01
29e10     20 30 0E F2 | 	cmp	local06, #32 wz
29e14     01 26 06 A1 |  if_e	add	local01, #1
29e18     F0 FF 9F AD |  if_e	jmp	#LR__3710
29e1c     13 33 C2 FA | 	rdbyte	local07, local01
29e20                 | LR__3711
29e20     2D 32 0E F2 | 	cmp	local07, #45 wz
29e24     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
29e28     18 00 90 5D |  if_ne	jmp	#LR__3713
29e2c     01 26 06 F1 | 	add	local01, #1
29e30     2D 32 0E F2 | 	cmp	local07, #45 wz
29e34     01 30 06 A6 |  if_e	mov	local06, #1
29e38     18 2F C2 A2 |  if_e	subr	local05, local06
29e3c     13 33 C2 FA | 	rdbyte	local07, local01
29e40     DC FF 9F FD | 	jmp	#LR__3711
29e44                 | LR__3712
29e44                 | LR__3713
29e44     00 28 0E F2 | 	cmp	local02, #0 wz
29e48     1C 00 90 5D |  if_ne	jmp	#LR__3715
29e4c     24 32 0E F2 | 	cmp	local07, #36 wz
29e50     10 28 06 A6 |  if_e	mov	local02, #16
29e54     01 26 06 A1 |  if_e	add	local01, #1
29e58     0C 00 90 AD |  if_e	jmp	#LR__3714
29e5c     25 32 0E F2 | 	cmp	local07, #37 wz
29e60     02 28 06 A6 |  if_e	mov	local02, #2
29e64     01 26 06 A1 |  if_e	add	local01, #1
29e68                 | LR__3714
29e68                 | LR__3715
29e68     97 48 48 FB | 	callpa	#(@LR__3723-@LR__3716)>>2,fcache_load_ptr_
29e6c                 | LR__3716
29e6c                 | LR__3717
29e6c     13 33 C2 FA | 	rdbyte	local07, local01
29e70     5F 32 0E F2 | 	cmp	local07, #95 wz
29e74     01 26 06 F1 | 	add	local01, #1
29e78     F0 FF 9F AD |  if_e	jmp	#LR__3717
29e7c     30 32 0E F2 | 	cmp	local07, #48 wz
29e80     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
29e84     00 2C 06 A6 |  if_e	mov	local04, #0
29e88     60 00 90 AD |  if_e	jmp	#LR__3722
29e8c     31 32 56 F2 | 	cmps	local07, #49 wc
29e90     18 00 90 CD |  if_b	jmp	#LR__3718
29e94     3A 32 56 F2 | 	cmps	local07, #58 wc
29e98     19 2D 02 C6 |  if_b	mov	local04, local07
29e9c     30 2C 86 C1 |  if_b	sub	local04, #48
29ea0     00 28 0E C2 |  if_b	cmp	local02, #0 wz
29ea4     0A 28 06 86 |  if_c_and_z	mov	local02, #10
29ea8     40 00 90 CD |  if_b	jmp	#LR__3721
29eac                 | LR__3718
29eac     0B 28 56 F2 | 	cmps	local02, #11 wc
29eb0     61 32 56 32 |  if_ae	cmps	local07, #97 wc
29eb4     14 00 90 CD |  if_b	jmp	#LR__3719
29eb8     67 32 56 F2 | 	cmps	local07, #103 wc
29ebc     61 32 86 C1 |  if_b	sub	local07, #97
29ec0     0A 2C 06 C6 |  if_b	mov	local04, #10
29ec4     19 2D 02 C1 |  if_b	add	local04, local07
29ec8     20 00 90 CD |  if_b	jmp	#LR__3720
29ecc                 | LR__3719
29ecc     0B 28 56 F2 | 	cmps	local02, #11 wc
29ed0     41 32 56 32 |  if_ae	cmps	local07, #65 wc
29ed4     24 00 90 CD |  if_b	jmp	#LR__3724
29ed8     47 32 56 F2 | 	cmps	local07, #71 wc
29edc     41 32 86 C1 |  if_b	sub	local07, #65
29ee0     0A 2C 06 C6 |  if_b	mov	local04, #10
29ee4     19 2D 02 C1 |  if_b	add	local04, local07
29ee8     10 00 90 3D |  if_ae	jmp	#LR__3724
29eec                 | LR__3720
29eec                 | LR__3721
29eec                 | LR__3722
29eec     15 29 02 FD | 	qmul	local02, local03
29ef0     18 2A 62 FD | 	getqx	local03
29ef4     16 2B 02 F1 | 	add	local03, local04
29ef8     70 FF 9F FD | 	jmp	#LR__3716
29efc                 | LR__3723
29efc                 | LR__3724
29efc     00 28 0E F2 | 	cmp	local02, #0 wz
29f00     64 00 90 5D |  if_ne	jmp	#LR__3730
29f04     78 32 0E F2 | 	cmp	local07, #120 wz
29f08     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
29f0c     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
29f10     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
29f14     14 00 90 5D |  if_ne	jmp	#LR__3725
29f18     13 13 02 F6 | 	mov	arg01, local01
29f1c     10 14 06 F6 | 	mov	arg02, #16
29f20     C8 FE BF FD | 	call	#__system____builtin_atoi
29f24     FD 2A 02 F6 | 	mov	local03, result1
29f28     3C 00 90 FD | 	jmp	#LR__3729
29f2c                 | LR__3725
29f2c     62 32 0E F2 | 	cmp	local07, #98 wz
29f30     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
29f34     14 00 90 5D |  if_ne	jmp	#LR__3726
29f38     13 13 02 F6 | 	mov	arg01, local01
29f3c     02 14 06 F6 | 	mov	arg02, #2
29f40     A8 FE BF FD | 	call	#__system____builtin_atoi
29f44     FD 2A 02 F6 | 	mov	local03, result1
29f48     1C 00 90 FD | 	jmp	#LR__3728
29f4c                 | LR__3726
29f4c     6F 32 0E F2 | 	cmp	local07, #111 wz
29f50     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
29f54     10 00 90 5D |  if_ne	jmp	#LR__3727
29f58     13 13 02 F6 | 	mov	arg01, local01
29f5c     08 14 06 F6 | 	mov	arg02, #8
29f60     88 FE BF FD | 	call	#__system____builtin_atoi
29f64     FD 2A 02 F6 | 	mov	local03, result1
29f68                 | LR__3727
29f68                 | LR__3728
29f68                 | LR__3729
29f68                 | LR__3730
29f68     00 2E 0E F2 | 	cmp	local05, #0 wz
29f6c     15 2B 62 56 |  if_ne	neg	local03, local03
29f70     15 FB 01 F6 | 	mov	result1, local03
29f74     A7 F0 03 F6 | 	mov	ptra, fp
29f78     B2 00 A0 FD | 	call	#popregs_
29f7c                 | __system____builtin_atoi_ret
29f7c     2D 00 64 FD | 	ret
29f80                 | 
29f80                 | __system____builtin_atof
29f80     07 4A 05 F6 | 	mov	COUNT_, #7
29f84     A8 00 A0 FD | 	call	#pushregs_
29f88     09 27 02 F6 | 	mov	local01, arg01
29f8c     00 28 06 F6 | 	mov	local02, #0
29f90     00 2A 06 F6 | 	mov	local03, #0
29f94     00 2C 06 F6 | 	mov	local04, #0
29f98     00 2E 06 F6 | 	mov	local05, #0
29f9c     97 08 48 FB | 	callpa	#(@LR__3741-@LR__3740)>>2,fcache_load_ptr_
29fa0                 | LR__3740
29fa0     13 17 C2 FA | 	rdbyte	arg03, local01
29fa4     20 16 0E F2 | 	cmp	arg03, #32 wz
29fa8     01 26 06 A1 |  if_e	add	local01, #1
29fac     F0 FF 9F AD |  if_e	jmp	#LR__3740
29fb0                 | LR__3741
29fb0     13 31 C2 FA | 	rdbyte	local06, local01
29fb4                 | LR__3742
29fb4     2B 30 0E F2 | 	cmp	local06, #43 wz
29fb8     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
29fbc     14 00 90 5D |  if_ne	jmp	#LR__3743
29fc0     2D 30 0E F2 | 	cmp	local06, #45 wz
29fc4     1F 2C E6 A4 |  if_e	bitnot	local04, #31
29fc8     01 26 06 F1 | 	add	local01, #1
29fcc     13 31 C2 FA | 	rdbyte	local06, local01
29fd0     E0 FF 9F FD | 	jmp	#LR__3742
29fd4                 | LR__3743
29fd4                 | LR__3744
29fd4     97 08 48 FB | 	callpa	#(@LR__3746-@LR__3745)>>2,fcache_load_ptr_
29fd8                 | LR__3745
29fd8     13 31 C2 FA | 	rdbyte	local06, local01
29fdc     5F 30 0E F2 | 	cmp	local06, #95 wz
29fe0     01 26 06 F1 | 	add	local01, #1
29fe4     F0 FF 9F AD |  if_e	jmp	#LR__3745
29fe8                 | LR__3746
29fe8     00 30 0E F2 | 	cmp	local06, #0 wz
29fec     5C 00 90 AD |  if_e	jmp	#LR__3748
29ff0     30 30 56 F2 | 	cmps	local06, #48 wc
29ff4     44 00 90 CD |  if_b	jmp	#LR__3747
29ff8     3A 30 56 F2 | 	cmps	local06, #58 wc
29ffc     3C 00 90 3D |  if_ae	jmp	#LR__3747
2a000     14 13 02 F6 | 	mov	arg01, local02
2a004     00 90 20 FF 
2a008     00 14 06 F6 | 	mov	arg02, ##1092616192
2a00c     64 F7 BF FD | 	call	#__system___float_mul
2a010     FD 28 02 F6 | 	mov	local02, result1
2a014     30 30 86 F1 | 	sub	local06, #48
2a018     18 13 02 F6 | 	mov	arg01, local06
2a01c     50 F3 BF FD | 	call	#__system___float_fromuns
2a020     FD 14 02 F6 | 	mov	arg02, result1
2a024     14 13 02 F6 | 	mov	arg01, local02
2a028     78 F3 BF FD | 	call	#__system___float_add
2a02c     FD 28 02 F6 | 	mov	local02, result1
2a030     00 2E 0E F2 | 	cmp	local05, #0 wz
2a034     01 2A 86 51 |  if_ne	sub	local03, #1
2a038     98 FF 9F FD | 	jmp	#LR__3744
2a03c                 | LR__3747
2a03c     2E 30 0E F2 | 	cmp	local06, #46 wz
2a040     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2a044     01 2E 06 A6 |  if_e	mov	local05, #1
2a048     88 FF 9F AD |  if_e	jmp	#LR__3744
2a04c                 | LR__3748
2a04c     45 30 0E F2 | 	cmp	local06, #69 wz
2a050     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2a054     18 00 90 5D |  if_ne	jmp	#LR__3749
2a058     13 13 02 F6 | 	mov	arg01, local01
2a05c     00 14 06 F6 | 	mov	arg02, #0
2a060     88 FD BF FD | 	call	#__system____builtin_atoi
2a064     15 FB 01 F1 | 	add	result1, local03
2a068     FD 32 02 F6 | 	mov	local07, result1
2a06c     04 00 90 FD | 	jmp	#LR__3750
2a070                 | LR__3749
2a070     15 33 02 F6 | 	mov	local07, local03
2a074                 | LR__3750
2a074     19 17 02 F6 | 	mov	arg03, local07
2a078     14 13 02 F6 | 	mov	arg01, local02
2a07c     00 90 20 FF 
2a080     00 14 06 F6 | 	mov	arg02, ##1092616192
2a084     F4 06 B0 FD | 	call	#__system___float_pow_n
2a088     16 FB 61 F5 | 	xor	result1, local04
2a08c     A7 F0 03 F6 | 	mov	ptra, fp
2a090     B2 00 A0 FD | 	call	#popregs_
2a094                 | __system____builtin_atof_ret
2a094     2D 00 64 FD | 	ret
2a098                 | 
2a098                 | __system____builtin_ilogb
2a098     FC FB BF FD | 	call	#__system___float_Unpack
2a09c     00 FE 0D F2 | 	cmp	result3, #0 wz
2a0a0     00 00 40 AF 
2a0a4     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2a0a8     24 00 90 AD |  if_e	jmp	#LR__3761
2a0ac     80 FC 0D F2 | 	cmp	result2, #128 wz
2a0b0     18 00 90 5D |  if_ne	jmp	#LR__3760
2a0b4     00 00 10 FF 
2a0b8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2a0bc     1E FA CD A9 |  if_e	bmask	result1, #30
2a0c0     0C 00 90 AD |  if_e	jmp	#LR__3761
2a0c4     1F FA C5 F9 | 	decod	result1, #31
2a0c8     04 00 90 FD | 	jmp	#LR__3761
2a0cc                 | LR__3760
2a0cc     FE FA 01 F6 | 	mov	result1, result2
2a0d0                 | LR__3761
2a0d0                 | __system____builtin_ilogb_ret
2a0d0     2D 00 64 FD | 	ret
2a0d4                 | 
2a0d4                 | __system____builtin_sinf
2a0d4     03 4A 05 F6 | 	mov	COUNT_, #3
2a0d8     A8 00 A0 FD | 	call	#pushregs_
2a0dc     09 27 02 F6 | 	mov	local01, arg01
2a0e0     87 64 20 FF 
2a0e4     DB 15 06 F6 | 	mov	arg02, ##1086918619
2a0e8     8C F8 BF FD | 	call	#__system___float_div
2a0ec     FD 12 02 F6 | 	mov	arg01, result1
2a0f0     00 14 06 F6 | 	mov	arg02, #0
2a0f4     44 FB BF FD | 	call	#__system___float_tointeger
2a0f8     FD 16 0A F6 | 	mov	arg03, result1 wz
2a0fc     44 00 90 AD |  if_e	jmp	#LR__3770
2a100     0B 13 52 F6 | 	abs	arg01, arg03 wc
2a104     1F 28 C6 C9 |  if_b	decod	local02, #31
2a108     00 28 06 36 |  if_ae	mov	local02, #0
2a10c     60 F2 BF FD | 	call	#__system___float_fromuns
2a110     14 FB 61 F5 | 	xor	result1, local02
2a114     FD 12 02 F6 | 	mov	arg01, result1
2a118     1E 14 C6 F9 | 	decod	arg02, #30
2a11c     54 F6 BF FD | 	call	#__system___float_mul
2a120     FD 12 02 F6 | 	mov	arg01, result1
2a124     87 24 20 FF 
2a128     DB 15 06 F6 | 	mov	arg02, ##1078530011
2a12c     44 F6 BF FD | 	call	#__system___float_mul
2a130     FD 14 02 F6 | 	mov	arg02, result1
2a134     13 13 02 F6 | 	mov	arg01, local01
2a138     1F 14 E6 F4 | 	bitnot	arg02, #31
2a13c     64 F2 BF FD | 	call	#__system___float_add
2a140     FD 26 02 F6 | 	mov	local01, result1
2a144                 | LR__3770
2a144     13 13 02 F6 | 	mov	arg01, local01
2a148     66 E6 1E FF 
2a14c     CD 14 06 F6 | 	mov	arg02, ##1036831949
2a150     01 16 06 F6 | 	mov	arg03, #1
2a154     50 FA BF FD | 	call	#__system___float_cmp
2a158     00 FA 55 F2 | 	cmps	result1, #0 wc
2a15c     5C 00 90 3D |  if_ae	jmp	#LR__3771
2a160     13 13 02 F6 | 	mov	arg01, local01
2a164     66 E6 5E FF 
2a168     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2a16c     01 16 66 F6 | 	neg	arg03, #1
2a170     34 FA BF FD | 	call	#__system___float_cmp
2a174     01 FA 55 F2 | 	cmps	result1, #1 wc
2a178     40 00 90 CD |  if_b	jmp	#LR__3771
2a17c     13 13 02 F6 | 	mov	arg01, local01
2a180     13 15 02 F6 | 	mov	arg02, local01
2a184     EC F5 BF FD | 	call	#__system___float_mul
2a188     FD 12 02 F6 | 	mov	arg01, result1
2a18c     13 15 02 F6 | 	mov	arg02, local01
2a190     E0 F5 BF FD | 	call	#__system___float_mul
2a194     FD 12 02 F6 | 	mov	arg01, result1
2a198     00 60 20 FF 
2a19c     00 14 06 F6 | 	mov	arg02, ##1086324736
2a1a0     D4 F7 BF FD | 	call	#__system___float_div
2a1a4     FD 14 02 F6 | 	mov	arg02, result1
2a1a8     13 13 02 F6 | 	mov	arg01, local01
2a1ac     1F 14 E6 F4 | 	bitnot	arg02, #31
2a1b0     F0 F1 BF FD | 	call	#__system___float_add
2a1b4     FD 2A 02 F6 | 	mov	local03, result1
2a1b8     54 00 90 FD | 	jmp	#LR__3772
2a1bc                 | LR__3771
2a1bc     13 13 02 F6 | 	mov	arg01, local01
2a1c0     7C 91 26 FF 
2a1c4     83 15 06 F6 | 	mov	arg02, ##1294137731
2a1c8     A8 F5 BF FD | 	call	#__system___float_mul
2a1cc     FD 12 02 F6 | 	mov	arg01, result1
2a1d0     00 14 06 F6 | 	mov	arg02, #0
2a1d4     64 FA BF FD | 	call	#__system___float_tointeger
2a1d8     02 FA 65 F0 | 	shl	result1, #2
2a1dc     00 00 A0 FF 
2a1e0     FD 00 48 FD | 	qrotate	##1073741824, result1
2a1e4     19 12 62 FD | 	getqy	arg01
2a1e8     09 13 52 F6 | 	abs	arg01, arg01 wc
2a1ec     1F 28 C6 C9 |  if_b	decod	local02, #31
2a1f0     00 28 06 36 |  if_ae	mov	local02, #0
2a1f4     78 F1 BF FD | 	call	#__system___float_fromuns
2a1f8     14 FB 61 F5 | 	xor	result1, local02
2a1fc     FD 12 02 F6 | 	mov	arg01, result1
2a200     00 40 27 FF 
2a204     00 14 06 F6 | 	mov	arg02, ##1317011456
2a208     6C F7 BF FD | 	call	#__system___float_div
2a20c     FD 2A 02 F6 | 	mov	local03, result1
2a210                 | LR__3772
2a210     15 FB 01 F6 | 	mov	result1, local03
2a214     A7 F0 03 F6 | 	mov	ptra, fp
2a218     B2 00 A0 FD | 	call	#popregs_
2a21c                 | __system____builtin_sinf_ret
2a21c     2D 00 64 FD | 	ret
2a220                 | 
2a220                 | __system____builtin_tanf
2a220     02 4A 05 F6 | 	mov	COUNT_, #2
2a224     A8 00 A0 FD | 	call	#pushregs_
2a228     09 27 02 F6 | 	mov	local01, arg01
2a22c     A4 FE BF FD | 	call	#__system____builtin_sinf
2a230     FD 28 02 F6 | 	mov	local02, result1
2a234     13 15 02 F6 | 	mov	arg02, local01
2a238     87 E4 1F FF 
2a23c     DB 13 06 F6 | 	mov	arg01, ##1070141403
2a240     1F 14 E6 F4 | 	bitnot	arg02, #31
2a244     5C F1 BF FD | 	call	#__system___float_add
2a248     FD 12 02 F6 | 	mov	arg01, result1
2a24c     84 FE BF FD | 	call	#__system____builtin_sinf
2a250     FD 14 02 F6 | 	mov	arg02, result1
2a254     14 13 02 F6 | 	mov	arg01, local02
2a258     1C F7 BF FD | 	call	#__system___float_div
2a25c     A7 F0 03 F6 | 	mov	ptra, fp
2a260     B2 00 A0 FD | 	call	#popregs_
2a264                 | __system____builtin_tanf_ret
2a264     2D 00 64 FD | 	ret
2a268                 | 
2a268                 | __system____builtin_asinf
2a268     01 4A 05 F6 | 	mov	COUNT_, #1
2a26c     A8 00 A0 FD | 	call	#pushregs_
2a270     09 27 02 F6 | 	mov	local01, arg01
2a274     13 15 02 F6 | 	mov	arg02, local01
2a278     13 13 02 F6 | 	mov	arg01, local01
2a27c     F4 F4 BF FD | 	call	#__system___float_mul
2a280     FD 14 02 F6 | 	mov	arg02, result1
2a284     00 C0 1F FF 
2a288     00 12 06 F6 | 	mov	arg01, ##1065353216
2a28c     1F 14 E6 F4 | 	bitnot	arg02, #31
2a290     10 F1 BF FD | 	call	#__system___float_add
2a294     FD 12 02 F6 | 	mov	arg01, result1
2a298     00 F4 BF FD | 	call	#__system___float_sqrt
2a29c     FD 14 02 F6 | 	mov	arg02, result1
2a2a0     13 13 02 F6 | 	mov	arg01, local01
2a2a4     58 00 B0 FD | 	call	#__system____builtin_atan2f
2a2a8     A7 F0 03 F6 | 	mov	ptra, fp
2a2ac     B2 00 A0 FD | 	call	#popregs_
2a2b0                 | __system____builtin_asinf_ret
2a2b0     2D 00 64 FD | 	ret
2a2b4                 | 
2a2b4                 | __system____builtin_acosf
2a2b4     01 4A 05 F6 | 	mov	COUNT_, #1
2a2b8     A8 00 A0 FD | 	call	#pushregs_
2a2bc     09 27 02 F6 | 	mov	local01, arg01
2a2c0     13 15 02 F6 | 	mov	arg02, local01
2a2c4     13 13 02 F6 | 	mov	arg01, local01
2a2c8     A8 F4 BF FD | 	call	#__system___float_mul
2a2cc     FD 14 02 F6 | 	mov	arg02, result1
2a2d0     00 C0 1F FF 
2a2d4     00 12 06 F6 | 	mov	arg01, ##1065353216
2a2d8     1F 14 E6 F4 | 	bitnot	arg02, #31
2a2dc     C4 F0 BF FD | 	call	#__system___float_add
2a2e0     FD 12 02 F6 | 	mov	arg01, result1
2a2e4     B4 F3 BF FD | 	call	#__system___float_sqrt
2a2e8     FD 12 02 F6 | 	mov	arg01, result1
2a2ec     13 15 02 F6 | 	mov	arg02, local01
2a2f0     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2a2f4     A7 F0 03 F6 | 	mov	ptra, fp
2a2f8     B2 00 A0 FD | 	call	#popregs_
2a2fc                 | __system____builtin_acosf_ret
2a2fc     2D 00 64 FD | 	ret
2a300                 | 
2a300                 | __system____builtin_atan2f
2a300     04 4A 05 F6 | 	mov	COUNT_, #4
2a304     A8 00 A0 FD | 	call	#pushregs_
2a308     09 27 02 F6 | 	mov	local01, arg01
2a30c     0A 29 02 F6 | 	mov	local02, arg02
2a310     13 13 02 F6 | 	mov	arg01, local01
2a314     00 14 06 F6 | 	mov	arg02, #0
2a318     01 16 06 F6 | 	mov	arg03, #1
2a31c     88 F8 BF FD | 	call	#__system___float_cmp
2a320     00 FA 0D F2 | 	cmp	result1, #0 wz
2a324     28 00 90 5D |  if_ne	jmp	#LR__3780
2a328     14 13 02 F6 | 	mov	arg01, local02
2a32c     00 14 06 F6 | 	mov	arg02, #0
2a330     01 16 06 F6 | 	mov	arg03, #1
2a334     70 F8 BF FD | 	call	#__system___float_cmp
2a338     00 FA 55 F2 | 	cmps	result1, #0 wc
2a33c     87 24 60 CF 
2a340     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2a344     DC 00 90 CD |  if_b	jmp	#LR__3781
2a348     00 FA 05 F6 | 	mov	result1, #0
2a34c     D4 00 90 FD | 	jmp	#LR__3781
2a350                 | LR__3780
2a350     14 13 02 F6 | 	mov	arg01, local02
2a354     14 15 02 F6 | 	mov	arg02, local02
2a358     18 F4 BF FD | 	call	#__system___float_mul
2a35c     FD 2A 02 F6 | 	mov	local03, result1
2a360     13 13 02 F6 | 	mov	arg01, local01
2a364     13 15 02 F6 | 	mov	arg02, local01
2a368     08 F4 BF FD | 	call	#__system___float_mul
2a36c     FD 14 02 F6 | 	mov	arg02, result1
2a370     15 13 02 F6 | 	mov	arg01, local03
2a374     2C F0 BF FD | 	call	#__system___float_add
2a378     FD 12 02 F6 | 	mov	arg01, result1
2a37c     1C F3 BF FD | 	call	#__system___float_sqrt
2a380     FD 2A 02 F6 | 	mov	local03, result1
2a384     14 13 02 F6 | 	mov	arg01, local02
2a388     15 15 02 F6 | 	mov	arg02, local03
2a38c     E8 F5 BF FD | 	call	#__system___float_div
2a390     FD 28 02 F6 | 	mov	local02, result1
2a394     13 13 02 F6 | 	mov	arg01, local01
2a398     15 15 02 F6 | 	mov	arg02, local03
2a39c     D8 F5 BF FD | 	call	#__system___float_div
2a3a0     FD 26 02 F6 | 	mov	local01, result1
2a3a4     00 40 27 FF 
2a3a8     00 12 06 F6 | 	mov	arg01, ##1317011456
2a3ac     14 15 02 F6 | 	mov	arg02, local02
2a3b0     C0 F3 BF FD | 	call	#__system___float_mul
2a3b4     FD 12 02 F6 | 	mov	arg01, result1
2a3b8     00 14 06 F6 | 	mov	arg02, #0
2a3bc     7C F8 BF FD | 	call	#__system___float_tointeger
2a3c0     FD 2A 02 F6 | 	mov	local03, result1
2a3c4     00 40 27 FF 
2a3c8     00 12 06 F6 | 	mov	arg01, ##1317011456
2a3cc     13 15 02 F6 | 	mov	arg02, local01
2a3d0     A0 F3 BF FD | 	call	#__system___float_mul
2a3d4     FD 12 02 F6 | 	mov	arg01, result1
2a3d8     00 14 06 F6 | 	mov	arg02, #0
2a3dc     5C F8 BF FD | 	call	#__system___float_tointeger
2a3e0     FD 2A 52 FD | 	qvector	local03, result1
2a3e4     87 24 20 FF 
2a3e8     DB 2B 06 F6 | 	mov	local03, ##1078530011
2a3ec     19 12 62 FD | 	getqy	arg01
2a3f0     01 12 C6 F0 | 	sar	arg01, #1
2a3f4     09 13 52 F6 | 	abs	arg01, arg01 wc
2a3f8     1F 2C C6 C9 |  if_b	decod	local04, #31
2a3fc     00 2C 06 36 |  if_ae	mov	local04, #0
2a400     6C EF BF FD | 	call	#__system___float_fromuns
2a404     16 FB 61 F5 | 	xor	result1, local04
2a408     FD 12 02 F6 | 	mov	arg01, result1
2a40c     00 40 27 FF 
2a410     00 14 06 F6 | 	mov	arg02, ##1317011456
2a414     60 F5 BF FD | 	call	#__system___float_div
2a418     FD 14 02 F6 | 	mov	arg02, result1
2a41c     15 13 02 F6 | 	mov	arg01, local03
2a420     50 F3 BF FD | 	call	#__system___float_mul
2a424                 | LR__3781
2a424     A7 F0 03 F6 | 	mov	ptra, fp
2a428     B2 00 A0 FD | 	call	#popregs_
2a42c                 | __system____builtin_atan2f_ret
2a42c     2D 00 64 FD | 	ret
2a430                 | 
2a430                 | __system____builtin_exp2f
2a430     04 4A 05 F6 | 	mov	COUNT_, #4
2a434     A8 00 A0 FD | 	call	#pushregs_
2a438     09 27 02 F6 | 	mov	local01, arg01
2a43c     00 7F 21 FF 
2a440     00 14 06 F6 | 	mov	arg02, ##1123942400
2a444     01 16 66 F6 | 	neg	arg03, #1
2a448     5C F7 BF FD | 	call	#__system___float_cmp
2a44c     00 FA 55 F2 | 	cmps	result1, #0 wc
2a450     00 C0 3F 3F 
2a454     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2a458     DC 00 90 3D |  if_ae	jmp	#LR__3791
2a45c     13 13 02 F6 | 	mov	arg01, local01
2a460     00 7F 61 FF 
2a464     00 14 06 F6 | 	mov	arg02, ##-1023541248
2a468     01 16 06 F6 | 	mov	arg03, #1
2a46c     38 F7 BF FD | 	call	#__system___float_cmp
2a470     00 FA 55 F2 | 	cmps	result1, #0 wc
2a474     00 FA 05 C6 |  if_b	mov	result1, #0
2a478     BC 00 90 CD |  if_b	jmp	#LR__3791
2a47c     13 13 02 F6 | 	mov	arg01, local01
2a480     00 14 06 F6 | 	mov	arg02, #0
2a484     B4 F7 BF FD | 	call	#__system___float_tointeger
2a488     FD 28 02 F6 | 	mov	local02, result1
2a48c     14 13 52 F6 | 	abs	arg01, local02 wc
2a490     1F 2A C6 C9 |  if_b	decod	local03, #31
2a494     00 2A 06 36 |  if_ae	mov	local03, #0
2a498     D4 EE BF FD | 	call	#__system___float_fromuns
2a49c     15 FB 61 F5 | 	xor	result1, local03
2a4a0     FD 14 02 F6 | 	mov	arg02, result1
2a4a4     13 13 02 F6 | 	mov	arg01, local01
2a4a8     1F 14 E6 F4 | 	bitnot	arg02, #31
2a4ac     F4 EE BF FD | 	call	#__system___float_add
2a4b0     FD 2C 02 F6 | 	mov	local04, result1
2a4b4     16 13 02 F6 | 	mov	arg01, local04
2a4b8     00 14 06 F6 | 	mov	arg02, #0
2a4bc     01 16 06 F6 | 	mov	arg03, #1
2a4c0     E4 F6 BF FD | 	call	#__system___float_cmp
2a4c4     00 FA 55 F2 | 	cmps	result1, #0 wc
2a4c8     18 00 90 3D |  if_ae	jmp	#LR__3790
2a4cc     16 13 02 F6 | 	mov	arg01, local04
2a4d0     00 C0 1F FF 
2a4d4     00 14 06 F6 | 	mov	arg02, ##1065353216
2a4d8     C8 EE BF FD | 	call	#__system___float_add
2a4dc     FD 2C 02 F6 | 	mov	local04, result1
2a4e0     01 28 86 F1 | 	sub	local02, #1
2a4e4                 | LR__3790
2a4e4     7F 28 06 F1 | 	add	local02, #127
2a4e8     17 28 66 F0 | 	shl	local02, #23
2a4ec     16 13 02 F6 | 	mov	arg01, local04
2a4f0     00 80 26 FF 
2a4f4     00 14 06 F6 | 	mov	arg02, ##1291845632
2a4f8     78 F2 BF FD | 	call	#__system___float_mul
2a4fc     FD 12 02 F6 | 	mov	arg01, result1
2a500     00 14 06 F6 | 	mov	arg02, #0
2a504     34 F7 BF FD | 	call	#__system___float_tointeger
2a508     FD 2C 0A F6 | 	mov	local04, result1 wz
2a50c     14 FB 01 A6 |  if_e	mov	result1, local02
2a510     24 00 90 AD |  if_e	jmp	#LR__3791
2a514     3E 2C 26 F4 | 	bith	local04, #62
2a518     0F 2C 62 FD | 	qexp	local04
2a51c     14 13 02 F6 | 	mov	arg01, local02
2a520     18 14 62 FD | 	getqx	arg02
2a524     01 14 06 F1 | 	add	arg02, #1
2a528     01 14 46 F0 | 	shr	arg02, #1
2a52c     00 80 1F FF 
2a530     00 14 06 F1 | 	add	arg02, ##1056964608
2a534     3C F2 BF FD | 	call	#__system___float_mul
2a538                 | LR__3791
2a538     A7 F0 03 F6 | 	mov	ptra, fp
2a53c     B2 00 A0 FD | 	call	#popregs_
2a540                 | __system____builtin_exp2f_ret
2a540     2D 00 64 FD | 	ret
2a544                 | 
2a544                 | __system____builtin_log2f
2a544     06 4A 05 F6 | 	mov	COUNT_, #6
2a548     A8 00 A0 FD | 	call	#pushregs_
2a54c     09 27 02 F6 | 	mov	local01, arg01
2a550     09 29 0A F6 | 	mov	local02, arg01 wz
2a554     00 00 40 5F 
2a558     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2a55c     00 40 00 AF 
2a560     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2a564     08 01 90 AD |  if_e	jmp	#LR__3804
2a568     00 28 56 F2 | 	cmps	local02, #0 wc
2a56c     00 E0 3F CF 
2a570     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2a574     F8 00 90 CD |  if_b	jmp	#LR__3804
2a578     13 13 02 F6 | 	mov	arg01, local01
2a57c     00 90 20 FF 
2a580     00 14 06 F6 | 	mov	arg02, ##1092616192
2a584     01 16 06 F6 | 	mov	arg03, #1
2a588     1C F6 BF FD | 	call	#__system___float_cmp
2a58c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a590     4D 2A 20 AF 
2a594     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2a598     D4 00 90 AD |  if_e	jmp	#LR__3804
2a59c     13 13 02 F6 | 	mov	arg01, local01
2a5a0     FC 16 20 FF 
2a5a4     54 14 06 F6 | 	mov	arg02, ##1076754516
2a5a8     01 16 06 F6 | 	mov	arg03, #1
2a5ac     F8 F5 BF FD | 	call	#__system___float_cmp
2a5b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a5b4     55 DC 1F AF 
2a5b8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2a5bc     B0 00 90 AD |  if_e	jmp	#LR__3804
2a5c0     14 2B 02 F6 | 	mov	local03, local02
2a5c4     17 2A 46 F0 | 	shr	local03, #23
2a5c8     15 2B E2 F8 | 	getbyte	local03, local03, #0
2a5cc     17 29 06 F4 | 	bitl	local02, #279
2a5d0     14 2D 02 F6 | 	mov	local04, local02
2a5d4     FF 2A 0E F2 | 	cmp	local03, #255 wz
2a5d8     1C 00 90 5D |  if_ne	jmp	#LR__3800
2a5dc     00 2C 0E F2 | 	cmp	local04, #0 wz
2a5e0     00 C0 3F 5F 
2a5e4     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2a5e8     00 E0 3F AF 
2a5ec     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2a5f0     17 FB 01 F6 | 	mov	result1, local05
2a5f4     78 00 90 FD | 	jmp	#LR__3804
2a5f8                 | LR__3800
2a5f8     00 2A 0E F2 | 	cmp	local03, #0 wz
2a5fc     17 2C 26 54 |  if_ne	bith	local04, #23
2a600     7F 2A 86 51 |  if_ne	sub	local03, #127
2a604     28 00 90 5D |  if_ne	jmp	#LR__3803
2a608     00 2C 0E F2 | 	cmp	local04, #0 wz
2a60c     00 40 00 AF 
2a610     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2a614     58 00 90 AD |  if_e	jmp	#LR__3804
2a618     7E 2A 66 F6 | 	neg	local03, #126
2a61c     97 08 48 FB | 	callpa	#(@LR__3802-@LR__3801)>>2,fcache_load_ptr_
2a620                 | LR__3801
2a620     17 2C 2E F4 | 	testbn	local04, #23 wz
2a624     01 2C 66 A0 |  if_e	shl	local04, #1
2a628     01 2A 06 A1 |  if_e	add	local03, #1
2a62c     F0 FF 9F AD |  if_e	jmp	#LR__3801
2a630                 | LR__3802
2a630                 | LR__3803
2a630     0E 2C 62 FD | 	qlog	local04
2a634     01 2A 86 F1 | 	sub	local03, #1
2a638     15 13 52 F6 | 	abs	arg01, local03 wc
2a63c     1F 30 C6 C9 |  if_b	decod	local06, #31
2a640     00 30 06 36 |  if_ae	mov	local06, #0
2a644     18 2E 62 FD | 	getqx	local05
2a648     9B 2E 06 F4 | 	bitl	local05, #155
2a64c     08 2E 06 F1 | 	add	local05, #8
2a650     04 2E 46 F0 | 	shr	local05, #4
2a654     00 C0 1F FF 
2a658     00 2E 06 F1 | 	add	local05, ##1065353216
2a65c     10 ED BF FD | 	call	#__system___float_fromuns
2a660     18 FB 61 F5 | 	xor	result1, local06
2a664     FD 14 02 F6 | 	mov	arg02, result1
2a668     17 13 02 F6 | 	mov	arg01, local05
2a66c     34 ED BF FD | 	call	#__system___float_add
2a670                 | LR__3804
2a670     A7 F0 03 F6 | 	mov	ptra, fp
2a674     B2 00 A0 FD | 	call	#popregs_
2a678                 | __system____builtin_log2f_ret
2a678     2D 00 64 FD | 	ret
2a67c                 | 
2a67c                 | __system____builtin_powf
2a67c     04 4A 05 F6 | 	mov	COUNT_, #4
2a680     A8 00 A0 FD | 	call	#pushregs_
2a684     09 27 02 F6 | 	mov	local01, arg01
2a688     0A 29 02 F6 | 	mov	local02, arg02
2a68c     14 13 02 F6 | 	mov	arg01, local02
2a690     00 14 06 F6 | 	mov	arg02, #0
2a694     A4 F5 BF FD | 	call	#__system___float_tointeger
2a698     FD 2A 02 F6 | 	mov	local03, result1
2a69c     15 13 52 F6 | 	abs	arg01, local03 wc
2a6a0     1F 2C C6 C9 |  if_b	decod	local04, #31
2a6a4     00 2C 06 36 |  if_ae	mov	local04, #0
2a6a8     C4 EC BF FD | 	call	#__system___float_fromuns
2a6ac     16 FB 61 F5 | 	xor	result1, local04
2a6b0     FD 12 02 F6 | 	mov	arg01, result1
2a6b4     14 15 02 F6 | 	mov	arg02, local02
2a6b8     01 16 06 F6 | 	mov	arg03, #1
2a6bc     E8 F4 BF FD | 	call	#__system___float_cmp
2a6c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a6c4     18 00 90 5D |  if_ne	jmp	#LR__3810
2a6c8     00 C0 1F FF 
2a6cc     00 12 06 F6 | 	mov	arg01, ##1065353216
2a6d0     13 15 02 F6 | 	mov	arg02, local01
2a6d4     15 17 02 F6 | 	mov	arg03, local03
2a6d8     A0 00 B0 FD | 	call	#__system___float_pow_n
2a6dc     58 00 90 FD | 	jmp	#LR__3811
2a6e0                 | LR__3810
2a6e0     13 13 02 F6 | 	mov	arg01, local01
2a6e4     00 14 06 F6 | 	mov	arg02, #0
2a6e8     01 16 06 F6 | 	mov	arg03, #1
2a6ec     B8 F4 BF FD | 	call	#__system___float_cmp
2a6f0     00 FA 55 F2 | 	cmps	result1, #0 wc
2a6f4     00 E0 3F CF 
2a6f8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2a6fc     38 00 90 CD |  if_b	jmp	#LR__3811
2a700     13 13 02 F6 | 	mov	arg01, local01
2a704     00 14 06 F6 | 	mov	arg02, #0
2a708     01 16 06 F6 | 	mov	arg03, #1
2a70c     98 F4 BF FD | 	call	#__system___float_cmp
2a710     00 FA 0D F2 | 	cmp	result1, #0 wz
2a714     00 FA 05 A6 |  if_e	mov	result1, #0
2a718     1C 00 90 AD |  if_e	jmp	#LR__3811
2a71c     13 13 02 F6 | 	mov	arg01, local01
2a720     20 FE BF FD | 	call	#__system____builtin_log2f
2a724     FD 12 02 F6 | 	mov	arg01, result1
2a728     14 15 02 F6 | 	mov	arg02, local02
2a72c     44 F0 BF FD | 	call	#__system___float_mul
2a730     FD 12 02 F6 | 	mov	arg01, result1
2a734     F8 FC BF FD | 	call	#__system____builtin_exp2f
2a738                 | LR__3811
2a738     A7 F0 03 F6 | 	mov	ptra, fp
2a73c     B2 00 A0 FD | 	call	#popregs_
2a740                 | __system____builtin_powf_ret
2a740     2D 00 64 FD | 	ret
2a744                 | 
2a744                 | __system____builtin_logbase
2a744     02 4A 05 F6 | 	mov	COUNT_, #2
2a748     A8 00 A0 FD | 	call	#pushregs_
2a74c     09 27 02 F6 | 	mov	local01, arg01
2a750     0A 13 02 F6 | 	mov	arg01, arg02
2a754     EC FD BF FD | 	call	#__system____builtin_log2f
2a758     FD 28 02 F6 | 	mov	local02, result1
2a75c     13 13 02 F6 | 	mov	arg01, local01
2a760     E0 FD BF FD | 	call	#__system____builtin_log2f
2a764     FD 14 02 F6 | 	mov	arg02, result1
2a768     14 13 02 F6 | 	mov	arg01, local02
2a76c     08 F2 BF FD | 	call	#__system___float_div
2a770     A7 F0 03 F6 | 	mov	ptra, fp
2a774     B2 00 A0 FD | 	call	#popregs_
2a778                 | __system____builtin_logbase_ret
2a778     2D 00 64 FD | 	ret
2a77c                 | 
2a77c                 | __system___float_pow_n
2a77c     05 4A 05 F6 | 	mov	COUNT_, #5
2a780     A8 00 A0 FD | 	call	#pushregs_
2a784     09 27 02 F6 | 	mov	local01, arg01
2a788     0A 29 02 F6 | 	mov	local02, arg02
2a78c     0B 2B 02 F6 | 	mov	local03, arg03
2a790     00 2A 56 F2 | 	cmps	local03, #0 wc
2a794     18 00 90 3D |  if_ae	jmp	#LR__3820
2a798     01 2C 06 F6 | 	mov	local04, #1
2a79c     15 2B 62 F6 | 	neg	local03, local03
2a7a0     00 2A 56 F2 | 	cmps	local03, #0 wc
2a7a4     00 FA 05 C6 |  if_b	mov	result1, #0
2a7a8     94 00 90 CD |  if_b	jmp	#LR__3828
2a7ac     04 00 90 FD | 	jmp	#LR__3821
2a7b0                 | LR__3820
2a7b0     00 2C 06 F6 | 	mov	local04, #0
2a7b4                 | LR__3821
2a7b4     00 C0 1F FF 
2a7b8     00 2E 06 F6 | 	mov	local05, ##1065353216
2a7bc                 | LR__3822
2a7bc     01 2A 56 F2 | 	cmps	local03, #1 wc
2a7c0     30 00 90 CD |  if_b	jmp	#LR__3824
2a7c4     01 2A CE F7 | 	test	local03, #1 wz
2a7c8     10 00 90 AD |  if_e	jmp	#LR__3823
2a7cc     17 13 02 F6 | 	mov	arg01, local05
2a7d0     14 15 02 F6 | 	mov	arg02, local02
2a7d4     9C EF BF FD | 	call	#__system___float_mul
2a7d8     FD 2E 02 F6 | 	mov	local05, result1
2a7dc                 | LR__3823
2a7dc     01 2A C6 F0 | 	sar	local03, #1
2a7e0     14 13 02 F6 | 	mov	arg01, local02
2a7e4     14 15 02 F6 | 	mov	arg02, local02
2a7e8     88 EF BF FD | 	call	#__system___float_mul
2a7ec     FD 28 02 F6 | 	mov	local02, result1
2a7f0     C8 FF 9F FD | 	jmp	#LR__3822
2a7f4                 | LR__3824
2a7f4     00 2C 0E F2 | 	cmp	local04, #0 wz
2a7f8     14 00 90 AD |  if_e	jmp	#LR__3825
2a7fc     13 13 02 F6 | 	mov	arg01, local01
2a800     17 15 02 F6 | 	mov	arg02, local05
2a804     70 F1 BF FD | 	call	#__system___float_div
2a808     FD 2E 02 F6 | 	mov	local05, result1
2a80c     2C 00 90 FD | 	jmp	#LR__3827
2a810                 | LR__3825
2a810     13 13 02 F6 | 	mov	arg01, local01
2a814     00 C0 1F FF 
2a818     00 14 06 F6 | 	mov	arg02, ##1065353216
2a81c     01 16 06 F6 | 	mov	arg03, #1
2a820     84 F3 BF FD | 	call	#__system___float_cmp
2a824     00 FA 0D F2 | 	cmp	result1, #0 wz
2a828     10 00 90 AD |  if_e	jmp	#LR__3826
2a82c     13 13 02 F6 | 	mov	arg01, local01
2a830     17 15 02 F6 | 	mov	arg02, local05
2a834     3C EF BF FD | 	call	#__system___float_mul
2a838     FD 2E 02 F6 | 	mov	local05, result1
2a83c                 | LR__3826
2a83c                 | LR__3827
2a83c     17 FB 01 F6 | 	mov	result1, local05
2a840                 | LR__3828
2a840     A7 F0 03 F6 | 	mov	ptra, fp
2a844     B2 00 A0 FD | 	call	#popregs_
2a848                 | __system___float_pow_n_ret
2a848     2D 00 64 FD | 	ret
2a84c                 | 
2a84c                 | __system___gc_ptrs
2a84c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2a850     00 03 02 F6 | 	mov	_var02, _var01
2a854     BB 00 00 FF 
2a858     F8 02 06 F1 | 	add	_var02, ##95992
2a85c     00 FD 09 FB | 	rdlong	result2, _var01 wz
2a860     74 00 90 5D |  if_ne	jmp	#LR__3830
2a864     01 FD 01 F6 | 	mov	result2, _var02
2a868     00 FD 81 F1 | 	sub	result2, _var01
2a86c     00 03 58 FC | 	wrword	#1, _var01
2a870     00 FB 01 F6 | 	mov	result1, _var01
2a874     02 FA 05 F1 | 	add	result1, #2
2a878     36 00 80 FF 
2a87c     FD 20 59 FC | 	wrword	##27792, result1
2a880     00 FB 01 F6 | 	mov	result1, _var01
2a884     04 FA 05 F1 | 	add	result1, #4
2a888     FD 00 58 FC | 	wrword	#0, result1
2a88c     00 FB 01 F6 | 	mov	result1, _var01
2a890     06 FA 05 F1 | 	add	result1, #6
2a894     FD 02 58 FC | 	wrword	#1, result1
2a898     10 00 06 F1 | 	add	_var01, #16
2a89c     FE FC 51 F6 | 	abs	result2, result2 wc
2a8a0     04 FC 45 F0 | 	shr	result2, #4
2a8a4     FE FC 81 F6 | 	negc	result2, result2
2a8a8     00 FD 51 FC | 	wrword	result2, _var01
2a8ac     00 FD 01 F6 | 	mov	result2, _var01
2a8b0     02 FC 05 F1 | 	add	result2, #2
2a8b4     36 00 80 FF 
2a8b8     FE 1E 59 FC | 	wrword	##27791, result2
2a8bc     00 FD 01 F6 | 	mov	result2, _var01
2a8c0     04 FC 05 F1 | 	add	result2, #4
2a8c4     FE 00 58 FC | 	wrword	#0, result2
2a8c8     00 FD 01 F6 | 	mov	result2, _var01
2a8cc     06 FC 05 F1 | 	add	result2, #6
2a8d0     FE 00 58 FC | 	wrword	#0, result2
2a8d4     10 00 86 F1 | 	sub	_var01, #16
2a8d8                 | LR__3830
2a8d8     00 FB 01 F6 | 	mov	result1, _var01
2a8dc     01 FD 01 F6 | 	mov	result2, _var02
2a8e0                 | __system___gc_ptrs_ret
2a8e0     2D 00 64 FD | 	ret
2a8e4                 | 
2a8e4                 | __system___gc_tryalloc
2a8e4     0B 4A 05 F6 | 	mov	COUNT_, #11
2a8e8     A8 00 A0 FD | 	call	#pushregs_
2a8ec     09 27 02 F6 | 	mov	local01, arg01
2a8f0     0A 29 02 F6 | 	mov	local02, arg02
2a8f4     54 FF BF FD | 	call	#__system___gc_ptrs
2a8f8     FD 2A 02 F6 | 	mov	local03, result1
2a8fc     FE 2C 02 F6 | 	mov	local04, result2
2a900     15 2F 02 F6 | 	mov	local05, local03
2a904     00 30 06 F6 | 	mov	local06, #0
2a908     97 1E 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
2a90c                 | LR__3840
2a90c     17 33 02 F6 | 	mov	local07, local05
2a910     06 2E 06 F1 | 	add	local05, #6
2a914     17 15 EA FA | 	rdword	arg02, local05 wz
2a918     15 13 02 F6 | 	mov	arg01, local03
2a91c     00 FA 05 A6 |  if_e	mov	result1, #0
2a920     04 14 66 50 |  if_ne	shl	arg02, #4
2a924     0A 13 02 51 |  if_ne	add	arg01, arg02
2a928     09 FB 01 56 |  if_ne	mov	result1, arg01
2a92c     FD 2E 0A F6 | 	mov	local05, result1 wz
2a930     17 31 E2 5A |  if_ne	rdword	local06, local05
2a934     00 2E 0E F2 | 	cmp	local05, #0 wz
2a938     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2a93c     08 00 90 1D |  if_a	jmp	#LR__3842
2a940     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2a944     C4 FF 9F 1D |  if_a	jmp	#LR__3840
2a948                 | LR__3841
2a948                 | LR__3842
2a948     00 2E 0E F2 | 	cmp	local05, #0 wz
2a94c     17 FB 01 A6 |  if_e	mov	result1, local05
2a950     3C 01 90 AD |  if_e	jmp	#LR__3845
2a954     17 FD 01 F6 | 	mov	result2, local05
2a958     06 FC 05 F1 | 	add	result2, #6
2a95c     FE 34 E2 FA | 	rdword	local08, result2
2a960     18 27 52 F2 | 	cmps	local01, local06 wc
2a964     C0 00 90 3D |  if_ae	jmp	#LR__3844
2a968     17 27 52 FC | 	wrword	local01, local05
2a96c     17 13 02 F6 | 	mov	arg01, local05
2a970     13 35 02 F6 | 	mov	local08, local01
2a974     04 34 66 F0 | 	shl	local08, #4
2a978     1A 13 02 F1 | 	add	arg01, local08
2a97c     13 31 82 F1 | 	sub	local06, local01
2a980     09 31 52 FC | 	wrword	local06, arg01
2a984     09 35 02 F6 | 	mov	local08, arg01
2a988     02 34 06 F1 | 	add	local08, #2
2a98c     36 00 80 FF 
2a990     1A 1F 59 FC | 	wrword	##27791, local08
2a994     17 15 0A F6 | 	mov	arg02, local05 wz
2a998     00 FA 05 A6 |  if_e	mov	result1, #0
2a99c     15 15 82 51 |  if_ne	sub	arg02, local03
2a9a0     04 14 46 50 |  if_ne	shr	arg02, #4
2a9a4     0A FB 01 56 |  if_ne	mov	result1, arg02
2a9a8     09 35 02 F6 | 	mov	local08, arg01
2a9ac     04 34 06 F1 | 	add	local08, #4
2a9b0     1A FB 51 FC | 	wrword	result1, local08
2a9b4     17 35 02 F6 | 	mov	local08, local05
2a9b8     06 34 06 F1 | 	add	local08, #6
2a9bc     09 15 02 F6 | 	mov	arg02, arg01
2a9c0     1A 35 E2 FA | 	rdword	local08, local08
2a9c4     06 14 06 F1 | 	add	arg02, #6
2a9c8     0A 35 52 FC | 	wrword	local08, arg02
2a9cc     09 37 02 F6 | 	mov	local09, arg01
2a9d0     1B 15 0A F6 | 	mov	arg02, local09 wz
2a9d4     00 FA 05 A6 |  if_e	mov	result1, #0
2a9d8     15 15 82 51 |  if_ne	sub	arg02, local03
2a9dc     04 14 46 50 |  if_ne	shr	arg02, #4
2a9e0     0A FB 01 56 |  if_ne	mov	result1, arg02
2a9e4     FD 34 02 F6 | 	mov	local08, result1
2a9e8     09 39 EA FA | 	rdword	local10, arg01 wz
2a9ec     00 FA 05 A6 |  if_e	mov	result1, #0
2a9f0     04 38 66 50 |  if_ne	shl	local10, #4
2a9f4     1C 13 02 51 |  if_ne	add	arg01, local10
2a9f8     09 FB 01 56 |  if_ne	mov	result1, arg01
2a9fc     FD 3A 0A F6 | 	mov	local11, result1 wz
2aa00     24 00 90 AD |  if_e	jmp	#LR__3843
2aa04     16 3B 52 F2 | 	cmps	local11, local04 wc
2aa08     1C 00 90 3D |  if_ae	jmp	#LR__3843
2aa0c     1B 15 0A F6 | 	mov	arg02, local09 wz
2aa10     00 FA 05 A6 |  if_e	mov	result1, #0
2aa14     15 15 82 51 |  if_ne	sub	arg02, local03
2aa18     04 14 46 50 |  if_ne	shr	arg02, #4
2aa1c     0A FB 01 56 |  if_ne	mov	result1, arg02
2aa20     04 3A 06 F1 | 	add	local11, #4
2aa24     1D FB 51 FC | 	wrword	result1, local11
2aa28                 | LR__3843
2aa28                 | LR__3844
2aa28     06 32 06 F1 | 	add	local07, #6
2aa2c     19 35 52 FC | 	wrword	local08, local07
2aa30     36 00 00 FF 
2aa34     80 36 06 F6 | 	mov	local09, ##27776
2aa38     14 37 42 F5 | 	or	local09, local02
2aa3c     00 FA 05 F6 | 	mov	result1, #0
2aa40     01 FA 61 FD | 	cogid	result1
2aa44     FD 36 42 F5 | 	or	local09, result1
2aa48     17 3B 02 F6 | 	mov	local11, local05
2aa4c     02 3A 06 F1 | 	add	local11, #2
2aa50     1D 37 52 FC | 	wrword	local09, local11
2aa54     15 37 02 F6 | 	mov	local09, local03
2aa58     08 36 06 F1 | 	add	local09, #8
2aa5c     17 3B 02 F6 | 	mov	local11, local05
2aa60     1B 37 E2 FA | 	rdword	local09, local09
2aa64     06 3A 06 F1 | 	add	local11, #6
2aa68     1D 37 52 FC | 	wrword	local09, local11
2aa6c     17 15 0A F6 | 	mov	arg02, local05 wz
2aa70     00 FA 05 A6 |  if_e	mov	result1, #0
2aa74     15 15 82 51 |  if_ne	sub	arg02, local03
2aa78     04 14 46 50 |  if_ne	shr	arg02, #4
2aa7c     0A FB 01 56 |  if_ne	mov	result1, arg02
2aa80     08 2A 06 F1 | 	add	local03, #8
2aa84     15 FB 51 FC | 	wrword	result1, local03
2aa88     08 2E 06 F1 | 	add	local05, #8
2aa8c     17 FB 01 F6 | 	mov	result1, local05
2aa90                 | LR__3845
2aa90     A7 F0 03 F6 | 	mov	ptra, fp
2aa94     B2 00 A0 FD | 	call	#popregs_
2aa98                 | __system___gc_tryalloc_ret
2aa98     2D 00 64 FD | 	ret
2aa9c                 | 
2aa9c                 | __system___gc_alloc_managed
2aa9c     01 4A 05 F6 | 	mov	COUNT_, #1
2aaa0     A8 00 A0 FD | 	call	#pushregs_
2aaa4     09 27 02 F6 | 	mov	local01, arg01
2aaa8     00 14 06 F6 | 	mov	arg02, #0
2aaac     1C 00 B0 FD | 	call	#__system___gc_doalloc
2aab0     FD 14 0A F6 | 	mov	arg02, result1 wz
2aab4     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2aab8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2aabc     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2aac0     A7 F0 03 F6 | 	mov	ptra, fp
2aac4     B2 00 A0 FD | 	call	#popregs_
2aac8                 | __system___gc_alloc_managed_ret
2aac8     2D 00 64 FD | 	ret
2aacc                 | 
2aacc                 | __system___gc_doalloc
2aacc     06 4A 05 F6 | 	mov	COUNT_, #6
2aad0     A8 00 A0 FD | 	call	#pushregs_
2aad4     09 27 0A F6 | 	mov	local01, arg01 wz
2aad8     0A 29 02 F6 | 	mov	local02, arg02
2aadc     00 FA 05 A6 |  if_e	mov	result1, #0
2aae0     8C 00 90 AD |  if_e	jmp	#LR__3857
2aae4     17 26 06 F1 | 	add	local01, #23
2aae8     0F 26 26 F5 | 	andn	local01, #15
2aaec     04 26 46 F0 | 	shr	local01, #4
2aaf0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2aaf4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2aaf8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2aafc     F8 BD BF FD | 	call	#__system___lockmem
2ab00     13 13 02 F6 | 	mov	arg01, local01
2ab04     14 15 02 F6 | 	mov	arg02, local02
2ab08     D8 FD BF FD | 	call	#__system___gc_tryalloc
2ab0c     FD 2A 0A F6 | 	mov	local03, result1 wz
2ab10     14 00 90 5D |  if_ne	jmp	#LR__3850
2ab14     70 03 B0 FD | 	call	#__system___gc_docollect
2ab18     13 13 02 F6 | 	mov	arg01, local01
2ab1c     14 15 02 F6 | 	mov	arg02, local02
2ab20     C0 FD BF FD | 	call	#__system___gc_tryalloc
2ab24     FD 2A 02 F6 | 	mov	local03, result1
2ab28                 | LR__3850
2ab28     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2ab2c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2ab30     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ab34     09 01 68 FC | 	wrlong	#0, arg01
2ab38     00 2A 0E F2 | 	cmp	local03, #0 wz
2ab3c     2C 00 90 AD |  if_e	jmp	#LR__3856
2ab40     04 26 66 F0 | 	shl	local01, #4
2ab44     08 26 86 F1 | 	sub	local01, #8
2ab48     13 2D 52 F6 | 	abs	local04, local01 wc
2ab4c     02 2C 46 F0 | 	shr	local04, #2
2ab50     16 2F 8A F6 | 	negc	local05, local04 wz
2ab54     15 31 02 F6 | 	mov	local06, local03
2ab58     10 00 90 AD |  if_e	jmp	#LR__3855
2ab5c     97 06 48 FB | 	callpa	#(@LR__3853-@LR__3851)>>2,fcache_load_ptr_
2ab60                 | LR__3851
2ab60     17 05 D8 FC | 	rep	@LR__3854, local05
2ab64                 | LR__3852
2ab64     18 01 68 FC | 	wrlong	#0, local06
2ab68     04 30 06 F1 | 	add	local06, #4
2ab6c                 | LR__3853
2ab6c                 | LR__3854
2ab6c                 | LR__3855
2ab6c                 | LR__3856
2ab6c     15 FB 01 F6 | 	mov	result1, local03
2ab70                 | LR__3857
2ab70     A7 F0 03 F6 | 	mov	ptra, fp
2ab74     B2 00 A0 FD | 	call	#popregs_
2ab78                 | __system___gc_doalloc_ret
2ab78     2D 00 64 FD | 	ret
2ab7c                 | 
2ab7c                 | __system___gc_isvalidptr
2ab7c     F8 16 06 F4 | 	bitl	arg03, #248
2ab80     08 16 86 F1 | 	sub	arg03, #8
2ab84     09 17 52 F2 | 	cmps	arg03, arg01 wc
2ab88     08 00 90 CD |  if_b	jmp	#LR__3860
2ab8c     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2ab90     08 00 90 CD |  if_b	jmp	#LR__3861
2ab94                 | LR__3860
2ab94     00 FA 05 F6 | 	mov	result1, #0
2ab98     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2ab9c                 | LR__3861
2ab9c     0B 01 02 F6 | 	mov	_var01, arg03
2aba0     09 01 62 F5 | 	xor	_var01, arg01
2aba4     0F 00 CE F7 | 	test	_var01, #15 wz
2aba8     00 FA 05 56 |  if_ne	mov	result1, #0
2abac     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2abb0     0B 01 02 F6 | 	mov	_var01, arg03
2abb4     02 00 06 F1 | 	add	_var01, #2
2abb8     00 01 E2 FA | 	rdword	_var01, _var01
2abbc     7F 00 00 FF 
2abc0     C0 01 06 F5 | 	and	_var01, ##65472
2abc4     36 00 00 FF 
2abc8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2abcc     00 FA 05 56 |  if_ne	mov	result1, #0
2abd0     0B FB 01 A6 |  if_e	mov	result1, arg03
2abd4                 | __system___gc_isvalidptr_ret
2abd4     2D 00 64 FD | 	ret
2abd8                 | 
2abd8                 | __system___gc_free
2abd8     09 17 02 F6 | 	mov	arg03, arg01
2abdc     6C FC BF FD | 	call	#__system___gc_ptrs
2abe0     FD 12 02 F6 | 	mov	arg01, result1
2abe4     FE 14 02 F6 | 	mov	arg02, result2
2abe8     90 FF BF FD | 	call	#__system___gc_isvalidptr
2abec     FD 14 0A F6 | 	mov	arg02, result1 wz
2abf0     28 00 90 AD |  if_e	jmp	#LR__3870
2abf4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2abf8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2abfc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ac00     F4 BC BF FD | 	call	#__system___lockmem
2ac04     0A 13 02 F6 | 	mov	arg01, arg02
2ac08     14 00 B0 FD | 	call	#__system___gc_dofree
2ac0c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2ac10     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2ac14     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ac18     09 01 68 FC | 	wrlong	#0, arg01
2ac1c                 | LR__3870
2ac1c                 | __system___gc_free_ret
2ac1c     2D 00 64 FD | 	ret
2ac20                 | 
2ac20                 | __system___gc_dofree
2ac20     06 4A 05 F6 | 	mov	COUNT_, #6
2ac24     A8 00 A0 FD | 	call	#pushregs_
2ac28     09 27 02 F6 | 	mov	local01, arg01
2ac2c     1C FC BF FD | 	call	#__system___gc_ptrs
2ac30     FD 28 02 F6 | 	mov	local02, result1
2ac34     FE 2A 02 F6 | 	mov	local03, result2
2ac38     13 15 02 F6 | 	mov	arg02, local01
2ac3c     02 14 06 F1 | 	add	arg02, #2
2ac40     36 00 80 FF 
2ac44     0A 1F 59 FC | 	wrword	##27791, arg02
2ac48     13 2D 02 F6 | 	mov	local04, local01
2ac4c     13 13 02 F6 | 	mov	arg01, local01
2ac50     09 2F EA FA | 	rdword	local05, arg01 wz
2ac54     00 FA 05 A6 |  if_e	mov	result1, #0
2ac58     04 2E 66 50 |  if_ne	shl	local05, #4
2ac5c     17 13 02 51 |  if_ne	add	arg01, local05
2ac60     09 FB 01 56 |  if_ne	mov	result1, arg01
2ac64     FD 30 02 F6 | 	mov	local06, result1
2ac68     97 24 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
2ac6c                 | LR__3880
2ac6c     04 2C 06 F1 | 	add	local04, #4
2ac70     16 15 EA FA | 	rdword	arg02, local04 wz
2ac74     14 13 02 F6 | 	mov	arg01, local02
2ac78     00 FA 05 A6 |  if_e	mov	result1, #0
2ac7c     04 14 66 50 |  if_ne	shl	arg02, #4
2ac80     0A 13 02 51 |  if_ne	add	arg01, arg02
2ac84     09 FB 01 56 |  if_ne	mov	result1, arg01
2ac88     FD 2C 0A F6 | 	mov	local04, result1 wz
2ac8c     24 00 90 AD |  if_e	jmp	#LR__3882
2ac90     16 13 02 F6 | 	mov	arg01, local04
2ac94     00 FA 05 F6 | 	mov	result1, #0
2ac98     02 12 06 F1 | 	add	arg01, #2
2ac9c     09 13 E2 FA | 	rdword	arg01, arg01
2aca0     36 00 00 FF 
2aca4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2aca8     01 FA 65 A6 |  if_e	neg	result1, #1
2acac     00 FA 0D F2 | 	cmp	result1, #0 wz
2acb0     B8 FF 9F AD |  if_e	jmp	#LR__3880
2acb4                 | LR__3881
2acb4                 | LR__3882
2acb4     00 2C 0E F2 | 	cmp	local04, #0 wz
2acb8     14 2D 02 A6 |  if_e	mov	local04, local02
2acbc     16 15 02 F6 | 	mov	arg02, local04
2acc0     06 14 06 F1 | 	add	arg02, #6
2acc4     13 13 02 F6 | 	mov	arg01, local01
2acc8     0A 15 E2 FA | 	rdword	arg02, arg02
2accc     06 12 06 F1 | 	add	arg01, #6
2acd0     09 15 52 FC | 	wrword	arg02, arg01
2acd4     13 15 0A F6 | 	mov	arg02, local01 wz
2acd8     00 FA 05 A6 |  if_e	mov	result1, #0
2acdc     14 15 82 51 |  if_ne	sub	arg02, local02
2ace0     04 14 46 50 |  if_ne	shr	arg02, #4
2ace4     0A FB 01 56 |  if_ne	mov	result1, arg02
2ace8     16 15 02 F6 | 	mov	arg02, local04
2acec     06 14 06 F1 | 	add	arg02, #6
2acf0     0A FB 51 FC | 	wrword	result1, arg02
2acf4     14 2D 0A F2 | 	cmp	local04, local02 wz
2acf8     A4 00 90 AD |  if_e	jmp	#LR__3885
2acfc     16 13 02 F6 | 	mov	arg01, local04
2ad00     09 2F EA FA | 	rdword	local05, arg01 wz
2ad04     00 FA 05 A6 |  if_e	mov	result1, #0
2ad08     04 2E 66 50 |  if_ne	shl	local05, #4
2ad0c     17 13 02 51 |  if_ne	add	arg01, local05
2ad10     09 FB 01 56 |  if_ne	mov	result1, arg01
2ad14     13 FB 09 F2 | 	cmp	result1, local01 wz
2ad18     84 00 90 5D |  if_ne	jmp	#LR__3884
2ad1c     16 31 E2 FA | 	rdword	local06, local04
2ad20     13 15 E2 FA | 	rdword	arg02, local01
2ad24     0A 31 02 F1 | 	add	local06, arg02
2ad28     16 31 52 FC | 	wrword	local06, local04
2ad2c     13 31 02 F6 | 	mov	local06, local01
2ad30     02 30 06 F1 | 	add	local06, #2
2ad34     18 01 58 FC | 	wrword	#0, local06
2ad38     13 13 02 F6 | 	mov	arg01, local01
2ad3c     09 2F EA FA | 	rdword	local05, arg01 wz
2ad40     00 FA 05 A6 |  if_e	mov	result1, #0
2ad44     04 2E 66 50 |  if_ne	shl	local05, #4
2ad48     17 13 02 51 |  if_ne	add	arg01, local05
2ad4c     09 FB 01 56 |  if_ne	mov	result1, arg01
2ad50     FD 30 02 F6 | 	mov	local06, result1
2ad54     15 31 52 F2 | 	cmps	local06, local03 wc
2ad58     20 00 90 3D |  if_ae	jmp	#LR__3883
2ad5c     16 15 0A F6 | 	mov	arg02, local04 wz
2ad60     00 FA 05 A6 |  if_e	mov	result1, #0
2ad64     14 15 82 51 |  if_ne	sub	arg02, local02
2ad68     04 14 46 50 |  if_ne	shr	arg02, #4
2ad6c     0A FB 01 56 |  if_ne	mov	result1, arg02
2ad70     18 15 02 F6 | 	mov	arg02, local06
2ad74     04 14 06 F1 | 	add	arg02, #4
2ad78     0A FB 51 FC | 	wrword	result1, arg02
2ad7c                 | LR__3883
2ad7c     13 15 02 F6 | 	mov	arg02, local01
2ad80     06 14 06 F1 | 	add	arg02, #6
2ad84     16 FD 01 F6 | 	mov	result2, local04
2ad88     0A 15 E2 FA | 	rdword	arg02, arg02
2ad8c     06 FC 05 F1 | 	add	result2, #6
2ad90     FE 14 52 FC | 	wrword	arg02, result2
2ad94     06 26 06 F1 | 	add	local01, #6
2ad98     13 01 58 FC | 	wrword	#0, local01
2ad9c     16 27 02 F6 | 	mov	local01, local04
2ada0                 | LR__3884
2ada0                 | LR__3885
2ada0     13 13 02 F6 | 	mov	arg01, local01
2ada4     09 2F EA FA | 	rdword	local05, arg01 wz
2ada8     00 FA 05 A6 |  if_e	mov	result1, #0
2adac     04 2E 66 50 |  if_ne	shl	local05, #4
2adb0     17 13 02 51 |  if_ne	add	arg01, local05
2adb4     09 FB 01 56 |  if_ne	mov	result1, arg01
2adb8     FD 14 0A F6 | 	mov	arg02, result1 wz
2adbc     B8 00 90 AD |  if_e	jmp	#LR__3887
2adc0     15 15 52 F2 | 	cmps	arg02, local03 wc
2adc4     B0 00 90 3D |  if_ae	jmp	#LR__3887
2adc8     0A 13 02 F6 | 	mov	arg01, arg02
2adcc     00 FA 05 F6 | 	mov	result1, #0
2add0     02 12 06 F1 | 	add	arg01, #2
2add4     09 13 E2 FA | 	rdword	arg01, arg01
2add8     36 00 00 FF 
2addc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2ade0     01 FA 65 A6 |  if_e	neg	result1, #1
2ade4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ade8     8C 00 90 AD |  if_e	jmp	#LR__3887
2adec     13 2D 02 F6 | 	mov	local04, local01
2adf0     16 31 E2 FA | 	rdword	local06, local04
2adf4     0A 13 02 F6 | 	mov	arg01, arg02
2adf8     09 27 E2 FA | 	rdword	local01, arg01
2adfc     13 31 02 F1 | 	add	local06, local01
2ae00     16 31 52 FC | 	wrword	local06, local04
2ae04     09 31 02 F6 | 	mov	local06, arg01
2ae08     06 30 06 F1 | 	add	local06, #6
2ae0c     16 27 02 F6 | 	mov	local01, local04
2ae10     18 31 E2 FA | 	rdword	local06, local06
2ae14     06 26 06 F1 | 	add	local01, #6
2ae18     13 31 52 FC | 	wrword	local06, local01
2ae1c     09 31 02 F6 | 	mov	local06, arg01
2ae20     02 30 06 F1 | 	add	local06, #2
2ae24     18 55 59 FC | 	wrword	#170, local06
2ae28     09 31 02 F6 | 	mov	local06, arg01
2ae2c     06 30 06 F1 | 	add	local06, #6
2ae30     18 01 58 FC | 	wrword	#0, local06
2ae34     09 2F EA FA | 	rdword	local05, arg01 wz
2ae38     00 FA 05 A6 |  if_e	mov	result1, #0
2ae3c     04 2E 66 50 |  if_ne	shl	local05, #4
2ae40     17 13 02 51 |  if_ne	add	arg01, local05
2ae44     09 FB 01 56 |  if_ne	mov	result1, arg01
2ae48     FD 30 0A F6 | 	mov	local06, result1 wz
2ae4c     28 00 90 AD |  if_e	jmp	#LR__3886
2ae50     15 31 52 F2 | 	cmps	local06, local03 wc
2ae54     20 00 90 3D |  if_ae	jmp	#LR__3886
2ae58     16 15 0A F6 | 	mov	arg02, local04 wz
2ae5c     00 FA 05 A6 |  if_e	mov	result1, #0
2ae60     14 15 82 51 |  if_ne	sub	arg02, local02
2ae64     04 14 46 50 |  if_ne	shr	arg02, #4
2ae68     0A FB 01 56 |  if_ne	mov	result1, arg02
2ae6c     18 2D 02 F6 | 	mov	local04, local06
2ae70     04 2C 06 F1 | 	add	local04, #4
2ae74     16 FB 51 FC | 	wrword	result1, local04
2ae78                 | LR__3886
2ae78                 | LR__3887
2ae78     18 FB 01 F6 | 	mov	result1, local06
2ae7c     A7 F0 03 F6 | 	mov	ptra, fp
2ae80     B2 00 A0 FD | 	call	#popregs_
2ae84                 | __system___gc_dofree_ret
2ae84     2D 00 64 FD | 	ret
2ae88                 | 
2ae88                 | __system___gc_docollect
2ae88     05 4A 05 F6 | 	mov	COUNT_, #5
2ae8c     A8 00 A0 FD | 	call	#pushregs_
2ae90     B8 F9 BF FD | 	call	#__system___gc_ptrs
2ae94     FE 26 02 F6 | 	mov	local01, result2
2ae98     FD 28 02 F6 | 	mov	local02, result1
2ae9c     14 13 02 F6 | 	mov	arg01, local02
2aea0     09 2B EA FA | 	rdword	local03, arg01 wz
2aea4     00 FA 05 A6 |  if_e	mov	result1, #0
2aea8     04 2A 66 50 |  if_ne	shl	local03, #4
2aeac     15 13 02 51 |  if_ne	add	arg01, local03
2aeb0     09 FB 01 56 |  if_ne	mov	result1, arg01
2aeb4     FD 2C 0A F6 | 	mov	local04, result1 wz
2aeb8     00 FA 05 F6 | 	mov	result1, #0
2aebc     01 FA 61 FD | 	cogid	result1
2aec0     FD 2E 02 F6 | 	mov	local05, result1
2aec4     48 00 90 AD |  if_e	jmp	#LR__3892
2aec8     97 22 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
2aecc                 | LR__3890
2aecc     13 2D 52 F2 | 	cmps	local04, local01 wc
2aed0     3C 00 90 3D |  if_ae	jmp	#LR__3892
2aed4     16 15 02 F6 | 	mov	arg02, local04
2aed8     02 14 06 F1 | 	add	arg02, #2
2aedc     0A 15 E2 FA | 	rdword	arg02, arg02
2aee0     20 14 26 F5 | 	andn	arg02, #32
2aee4     16 13 02 F6 | 	mov	arg01, local04
2aee8     02 12 06 F1 | 	add	arg01, #2
2aeec     09 15 52 FC | 	wrword	arg02, arg01
2aef0     16 13 02 F6 | 	mov	arg01, local04
2aef4     09 2B EA FA | 	rdword	local03, arg01 wz
2aef8     00 FA 05 A6 |  if_e	mov	result1, #0
2aefc     04 2A 66 50 |  if_ne	shl	local03, #4
2af00     15 13 02 51 |  if_ne	add	arg01, local03
2af04     09 FB 01 56 |  if_ne	mov	result1, arg01
2af08     FD 2C 0A F6 | 	mov	local04, result1 wz
2af0c     BC FF 9F 5D |  if_ne	jmp	#LR__3890
2af10                 | LR__3891
2af10                 | LR__3892
2af10     00 2A 06 F6 | 	mov	local03, #0
2af14     00 12 06 F6 | 	mov	arg01, #0
2af18     B4 B9 BF FD | 	call	#__system____topofstack
2af1c     FD 14 02 F6 | 	mov	arg02, result1
2af20     15 13 02 F6 | 	mov	arg01, local03
2af24     90 00 B0 FD | 	call	#__system___gc_markhub
2af28     1C 01 B0 FD | 	call	#__system___gc_markcog
2af2c     14 13 02 F6 | 	mov	arg01, local02
2af30     09 2B EA FA | 	rdword	local03, arg01 wz
2af34     00 FA 05 A6 |  if_e	mov	result1, #0
2af38     04 2A 66 50 |  if_ne	shl	local03, #4
2af3c     15 13 02 51 |  if_ne	add	arg01, local03
2af40     09 FB 01 56 |  if_ne	mov	result1, arg01
2af44     FD 28 0A F6 | 	mov	local02, result1 wz
2af48     60 00 90 AD |  if_e	jmp	#LR__3896
2af4c                 | LR__3893
2af4c     14 2D 02 F6 | 	mov	local04, local02
2af50     16 13 02 F6 | 	mov	arg01, local04
2af54     09 2B EA FA | 	rdword	local03, arg01 wz
2af58     00 FA 05 A6 |  if_e	mov	result1, #0
2af5c     04 2A 66 50 |  if_ne	shl	local03, #4
2af60     15 13 02 51 |  if_ne	add	arg01, local03
2af64     09 FB 01 56 |  if_ne	mov	result1, arg01
2af68     FD 28 02 F6 | 	mov	local02, result1
2af6c     16 15 02 F6 | 	mov	arg02, local04
2af70     02 14 06 F1 | 	add	arg02, #2
2af74     0A 15 E2 FA | 	rdword	arg02, arg02
2af78     20 14 CE F7 | 	test	arg02, #32 wz
2af7c     10 14 CE A7 |  if_e	test	arg02, #16 wz
2af80     1C 00 90 5D |  if_ne	jmp	#LR__3895
2af84     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2af88     17 15 0A F2 | 	cmp	arg02, local05 wz
2af8c     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2af90     0C 00 90 5D |  if_ne	jmp	#LR__3894
2af94     16 13 02 F6 | 	mov	arg01, local04
2af98     84 FC BF FD | 	call	#__system___gc_dofree
2af9c     FD 28 02 F6 | 	mov	local02, result1
2afa0                 | LR__3894
2afa0                 | LR__3895
2afa0     00 28 0E F2 | 	cmp	local02, #0 wz
2afa4     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2afa8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3893
2afac                 | LR__3896
2afac     A7 F0 03 F6 | 	mov	ptra, fp
2afb0     B2 00 A0 FD | 	call	#popregs_
2afb4                 | __system___gc_docollect_ret
2afb4     2D 00 64 FD | 	ret
2afb8                 | 
2afb8                 | __system___gc_markhub
2afb8     04 4A 05 F6 | 	mov	COUNT_, #4
2afbc     A8 00 A0 FD | 	call	#pushregs_
2afc0     09 27 02 F6 | 	mov	local01, arg01
2afc4     0A 29 02 F6 | 	mov	local02, arg02
2afc8     80 F8 BF FD | 	call	#__system___gc_ptrs
2afcc     FD 2A 02 F6 | 	mov	local03, result1
2afd0     FE 2C 02 F6 | 	mov	local04, result2
2afd4                 | LR__3900
2afd4     14 27 52 F2 | 	cmps	local01, local02 wc
2afd8     60 00 90 3D |  if_ae	jmp	#LR__3901
2afdc     13 17 02 FB | 	rdlong	arg03, local01
2afe0     04 26 06 F1 | 	add	local01, #4
2afe4     16 15 02 F6 | 	mov	arg02, local04
2afe8     15 13 02 F6 | 	mov	arg01, local03
2afec     8C FB BF FD | 	call	#__system___gc_isvalidptr
2aff0     FD 16 0A F6 | 	mov	arg03, result1 wz
2aff4     DC FF 9F AD |  if_e	jmp	#LR__3900
2aff8     0B 13 02 F6 | 	mov	arg01, arg03
2affc     00 FA 05 F6 | 	mov	result1, #0
2b000     02 12 06 F1 | 	add	arg01, #2
2b004     09 13 E2 FA | 	rdword	arg01, arg01
2b008     36 00 00 FF 
2b00c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b010     01 FA 65 A6 |  if_e	neg	result1, #1
2b014     00 FA 0D F2 | 	cmp	result1, #0 wz
2b018     B8 FF 9F 5D |  if_ne	jmp	#LR__3900
2b01c     0B FD 01 F6 | 	mov	result2, arg03
2b020     02 FC 05 F1 | 	add	result2, #2
2b024     FE FC E1 FA | 	rdword	result2, result2
2b028     0F FC 25 F5 | 	andn	result2, #15
2b02c     2E FC 45 F5 | 	or	result2, #46
2b030     02 16 06 F1 | 	add	arg03, #2
2b034     0B FD 51 FC | 	wrword	result2, arg03
2b038     98 FF 9F FD | 	jmp	#LR__3900
2b03c                 | LR__3901
2b03c     A7 F0 03 F6 | 	mov	ptra, fp
2b040     B2 00 A0 FD | 	call	#popregs_
2b044                 | __system___gc_markhub_ret
2b044     2D 00 64 FD | 	ret
2b048                 | 
2b048                 | __system___gc_markcog
2b048     04 4A 05 F6 | 	mov	COUNT_, #4
2b04c     A8 00 A0 FD | 	call	#pushregs_
2b050     F8 F7 BF FD | 	call	#__system___gc_ptrs
2b054     FD 26 02 F6 | 	mov	local01, result1
2b058     FE 28 02 F6 | 	mov	local02, result2
2b05c     EF 2B 06 F6 | 	mov	local03, #495
2b060                 | LR__3910
2b060                 | 	'.live	local03
2b060     00 2A 96 F9 | 	alts	local03, #0
2b064     15 2D 02 F6 | 	mov	local04, local03
2b068     13 13 02 F6 | 	mov	arg01, local01
2b06c     14 15 02 F6 | 	mov	arg02, local02
2b070     16 17 02 F6 | 	mov	arg03, local04
2b074     04 FB BF FD | 	call	#__system___gc_isvalidptr
2b078     00 FA 0D F2 | 	cmp	result1, #0 wz
2b07c     18 00 90 AD |  if_e	jmp	#LR__3911
2b080     FD 2C 02 F6 | 	mov	local04, result1
2b084     02 2C 06 F1 | 	add	local04, #2
2b088     16 2D E2 FA | 	rdword	local04, local04
2b08c     20 2C 46 F5 | 	or	local04, #32
2b090     02 FA 05 F1 | 	add	result1, #2
2b094     FD 2C 52 FC | 	wrword	local04, result1
2b098                 | LR__3911
2b098     01 2A 86 F1 | 	sub	local03, #1
2b09c     00 2A 56 F2 | 	cmps	local03, #0 wc
2b0a0     BC FF 9F 3D |  if_ae	jmp	#LR__3910
2b0a4     A7 F0 03 F6 | 	mov	ptra, fp
2b0a8     B2 00 A0 FD | 	call	#popregs_
2b0ac                 | __system___gc_markcog_ret
2b0ac     2D 00 64 FD | 	ret
2b0b0                 | 
2b0b0                 | __system__opendir
2b0b0     06 4A 05 F6 | 	mov	COUNT_, #6
2b0b4     A8 00 A0 FD | 	call	#pushregs_
2b0b8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b0bc     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2b0c0     09 15 02 F6 | 	mov	arg02, arg01
2b0c4     13 13 02 F6 | 	mov	arg01, local01
2b0c8     00 16 06 F6 | 	mov	arg03, #0
2b0cc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b0d0     BC BF BF FD | 	call	#__system____getvfsforfile
2b0d4     FD 28 0A F6 | 	mov	local02, result1 wz
2b0d8     10 00 90 AD |  if_e	jmp	#LR__3920
2b0dc     28 28 06 F1 | 	add	local02, #40
2b0e0     14 17 0A FB | 	rdlong	arg03, local02 wz
2b0e4     28 28 86 F1 | 	sub	local02, #40
2b0e8     14 00 90 5D |  if_ne	jmp	#LR__3921
2b0ec                 | LR__3920
2b0ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b0f0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b0f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b0f8     00 FA 05 F6 | 	mov	result1, #0
2b0fc     90 00 90 FD | 	jmp	#LR__3923
2b100                 | LR__3921
2b100     5C 12 06 F6 | 	mov	arg01, #92
2b104     10 14 06 F6 | 	mov	arg02, #16
2b108     C0 F9 BF FD | 	call	#__system___gc_doalloc
2b10c     FD 2A 0A F6 | 	mov	local03, result1 wz
2b110     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b114     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b118     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b11c     00 FA 05 A6 |  if_e	mov	result1, #0
2b120     6C 00 90 AD |  if_e	jmp	#LR__3923
2b124     28 28 06 F1 | 	add	local02, #40
2b128     14 2D 02 FB | 	rdlong	local04, local02
2b12c     16 2F 02 F6 | 	mov	local05, local04
2b130     28 28 86 F1 | 	sub	local02, #40
2b134     13 2E 46 F7 | 	zerox	local05, #19
2b138     14 2C 46 F0 | 	shr	local04, #20
2b13c     02 2C 66 F0 | 	shl	local04, #2
2b140     ED 2C 02 F1 | 	add	local04, __methods__
2b144     16 2D 02 FB | 	rdlong	local04, local04
2b148     15 13 02 F6 | 	mov	arg01, local03
2b14c     13 15 02 F6 | 	mov	arg02, local01
2b150     F2 30 02 F6 | 	mov	local06, objptr
2b154     17 E5 01 F6 | 	mov	objptr, local05
2b158     2D 2C 62 FD | 	call	local04
2b15c     18 E5 01 F6 | 	mov	objptr, local06
2b160     FD 16 0A F6 | 	mov	arg03, result1 wz
2b164     20 00 90 AD |  if_e	jmp	#LR__3922
2b168     00 16 4E F2 | 	cmps	arg03, #0 wz
2b16c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b170     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2b174     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b178     15 13 02 F6 | 	mov	arg01, local03
2b17c     58 FA BF FD | 	call	#__system___gc_free
2b180     00 FA 05 F6 | 	mov	result1, #0
2b184     08 00 90 FD | 	jmp	#LR__3923
2b188                 | LR__3922
2b188     15 29 62 FC | 	wrlong	local02, local03
2b18c     15 FB 01 F6 | 	mov	result1, local03
2b190                 | LR__3923
2b190     A7 F0 03 F6 | 	mov	ptra, fp
2b194     B2 00 A0 FD | 	call	#popregs_
2b198                 | __system__opendir_ret
2b198     2D 00 64 FD | 	ret
2b19c                 | 
2b19c                 | __system__closedir
2b19c     04 4A 05 F6 | 	mov	COUNT_, #4
2b1a0     A8 00 A0 FD | 	call	#pushregs_
2b1a4     09 27 02 F6 | 	mov	local01, arg01
2b1a8     13 13 02 FB | 	rdlong	arg01, local01
2b1ac     2C 12 06 F1 | 	add	arg01, #44
2b1b0     09 29 02 FB | 	rdlong	local02, arg01
2b1b4     14 2B 02 F6 | 	mov	local03, local02
2b1b8     13 2A 46 F7 | 	zerox	local03, #19
2b1bc     14 28 46 F0 | 	shr	local02, #20
2b1c0     02 28 66 F0 | 	shl	local02, #2
2b1c4     ED 28 02 F1 | 	add	local02, __methods__
2b1c8     14 29 02 FB | 	rdlong	local02, local02
2b1cc     13 13 02 F6 | 	mov	arg01, local01
2b1d0     F2 2C 02 F6 | 	mov	local04, objptr
2b1d4     15 E5 01 F6 | 	mov	objptr, local03
2b1d8     2D 28 62 FD | 	call	local02
2b1dc     16 E5 01 F6 | 	mov	objptr, local04
2b1e0     FD 2C 02 F6 | 	mov	local04, result1
2b1e4     13 13 02 F6 | 	mov	arg01, local01
2b1e8     EC F9 BF FD | 	call	#__system___gc_free
2b1ec     00 2C 4E F2 | 	cmps	local04, #0 wz
2b1f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b1f4     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2b1f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b1fc     01 FA 65 56 |  if_ne	neg	result1, #1
2b200     00 FA 05 A6 |  if_e	mov	result1, #0
2b204     A7 F0 03 F6 | 	mov	ptra, fp
2b208     B2 00 A0 FD | 	call	#popregs_
2b20c                 | __system__closedir_ret
2b20c     2D 00 64 FD | 	ret
2b210                 | 
2b210                 | __system__readdir
2b210     04 4A 05 F6 | 	mov	COUNT_, #4
2b214     A8 00 A0 FD | 	call	#pushregs_
2b218     09 15 0A FB | 	rdlong	arg02, arg01 wz
2b21c     08 12 06 F1 | 	add	arg01, #8
2b220     09 27 02 F6 | 	mov	local01, arg01
2b224     08 12 86 F1 | 	sub	arg01, #8
2b228     00 FA 05 A6 |  if_e	mov	result1, #0
2b22c     5C 00 90 AD |  if_e	jmp	#LR__3931
2b230     30 14 06 F1 | 	add	arg02, #48
2b234     0A 29 02 FB | 	rdlong	local02, arg02
2b238     14 2B 02 F6 | 	mov	local03, local02
2b23c     13 2A 46 F7 | 	zerox	local03, #19
2b240     14 28 46 F0 | 	shr	local02, #20
2b244     02 28 66 F0 | 	shl	local02, #2
2b248     ED 28 02 F1 | 	add	local02, __methods__
2b24c     14 29 02 FB | 	rdlong	local02, local02
2b250     13 15 02 F6 | 	mov	arg02, local01
2b254     F2 2C 02 F6 | 	mov	local04, objptr
2b258     15 E5 01 F6 | 	mov	objptr, local03
2b25c     2D 28 62 FD | 	call	local02
2b260     16 E5 01 F6 | 	mov	objptr, local04
2b264     00 FA 4D F2 | 	cmps	result1, #0 wz
2b268     1C 00 90 AD |  if_e	jmp	#LR__3930
2b26c     01 FA 55 F2 | 	cmps	result1, #1 wc
2b270     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2b274     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b278     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2b27c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b280     00 FA 05 F6 | 	mov	result1, #0
2b284     04 00 90 FD | 	jmp	#LR__3931
2b288                 | LR__3930
2b288     13 FB 01 F6 | 	mov	result1, local01
2b28c                 | LR__3931
2b28c     A7 F0 03 F6 | 	mov	ptra, fp
2b290     B2 00 A0 FD | 	call	#popregs_
2b294                 | __system__readdir_ret
2b294     2D 00 64 FD | 	ret
2b298                 | 
2b298                 | __system___openraw
2b298     15 4A 05 F6 | 	mov	COUNT_, #21
2b29c     A8 00 A0 FD | 	call	#pushregs_
2b2a0     09 27 02 F6 | 	mov	local01, arg01
2b2a4     0A 29 02 F6 | 	mov	local02, arg02
2b2a8     0B 2B 02 F6 | 	mov	local03, arg03
2b2ac     0C 2D 02 F6 | 	mov	local04, arg04
2b2b0     04 2E 06 F6 | 	mov	local05, #4
2b2b4     13 31 02 F6 | 	mov	local06, local01
2b2b8     00 32 06 F6 | 	mov	local07, #0
2b2bc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b2c0     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2b2c4     1A 13 02 F6 | 	mov	arg01, local08
2b2c8     14 15 02 F6 | 	mov	arg02, local02
2b2cc     00 16 06 F6 | 	mov	arg03, #0
2b2d0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b2d4     B8 BD BF FD | 	call	#__system____getvfsforfile
2b2d8     FD 36 0A F6 | 	mov	local09, result1 wz
2b2dc     10 00 90 AD |  if_e	jmp	#LR__3940
2b2e0     20 36 06 F1 | 	add	local09, #32
2b2e4     1B FB 09 FB | 	rdlong	result1, local09 wz
2b2e8     20 36 86 F1 | 	sub	local09, #32
2b2ec     14 00 90 5D |  if_ne	jmp	#LR__3941
2b2f0                 | LR__3940
2b2f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b2f4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b2f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b2fc     01 FA 65 F6 | 	neg	result1, #1
2b300     8C 02 90 FD | 	jmp	#LR__3954
2b304                 | LR__3941
2b304     18 13 02 F6 | 	mov	arg01, local06
2b308     00 14 06 F6 | 	mov	arg02, #0
2b30c     34 16 06 F6 | 	mov	arg03, #52
2b310     09 39 02 F6 | 	mov	local10, arg01
2b314     98 00 A0 FD | 	call	#\builtin_bytefill_
2b318     20 36 06 F1 | 	add	local09, #32
2b31c     1B 3B 02 FB | 	rdlong	local11, local09
2b320     1D 3D 02 F6 | 	mov	local12, local11
2b324     1D 3F 02 F6 | 	mov	local13, local11
2b328     20 36 86 F1 | 	sub	local09, #32
2b32c     1F 41 02 F6 | 	mov	local14, local13
2b330     13 3C 46 F7 | 	zerox	local12, #19
2b334     14 40 46 F0 | 	shr	local14, #20
2b338     02 40 66 F0 | 	shl	local14, #2
2b33c     ED 40 02 F1 | 	add	local14, __methods__
2b340     20 41 02 FB | 	rdlong	local14, local14
2b344     18 43 02 F6 | 	mov	local15, local06
2b348     1A 45 02 F6 | 	mov	local16, local08
2b34c     15 47 02 F6 | 	mov	local17, local03
2b350     21 13 02 F6 | 	mov	arg01, local15
2b354     22 15 02 F6 | 	mov	arg02, local16
2b358     23 17 02 F6 | 	mov	arg03, local17
2b35c     F2 48 02 F6 | 	mov	local18, objptr
2b360     1E E5 01 F6 | 	mov	objptr, local12
2b364     2D 40 62 FD | 	call	local14
2b368     24 E5 01 F6 | 	mov	objptr, local18
2b36c     FD 4A 0A F6 | 	mov	local19, result1 wz
2b370     04 2A CE 57 |  if_ne	test	local03, #4 wz
2b374     58 00 90 AD |  if_e	jmp	#LR__3942
2b378     24 36 06 F1 | 	add	local09, #36
2b37c     1B 3B 02 FB | 	rdlong	local11, local09
2b380     1D 3D 02 F6 | 	mov	local12, local11
2b384     1D 3F 02 F6 | 	mov	local13, local11
2b388     24 36 86 F1 | 	sub	local09, #36
2b38c     1F 41 02 F6 | 	mov	local14, local13
2b390     13 3C 46 F7 | 	zerox	local12, #19
2b394     14 40 46 F0 | 	shr	local14, #20
2b398     02 40 66 F0 | 	shl	local14, #2
2b39c     ED 40 02 F1 | 	add	local14, __methods__
2b3a0     20 41 02 FB | 	rdlong	local14, local14
2b3a4     18 43 02 F6 | 	mov	local15, local06
2b3a8     1A 45 02 F6 | 	mov	local16, local08
2b3ac     16 47 02 F6 | 	mov	local17, local04
2b3b0     21 13 02 F6 | 	mov	arg01, local15
2b3b4     22 15 02 F6 | 	mov	arg02, local16
2b3b8     23 17 02 F6 | 	mov	arg03, local17
2b3bc     F2 48 02 F6 | 	mov	local18, objptr
2b3c0     1E E5 01 F6 | 	mov	objptr, local12
2b3c4     2D 40 62 FD | 	call	local14
2b3c8     24 E5 01 F6 | 	mov	objptr, local18
2b3cc     FD 4A 02 F6 | 	mov	local19, result1
2b3d0                 | LR__3942
2b3d0     00 4A 0E F2 | 	cmp	local19, #0 wz
2b3d4     8C 01 90 5D |  if_ne	jmp	#LR__3952
2b3d8     15 4D 02 F6 | 	mov	local20, local03
2b3dc     03 4C 0E F5 | 	and	local20, #3 wz
2b3e0     02 2E 46 55 |  if_ne	or	local05, #2
2b3e4     01 4C 0E F2 | 	cmp	local20, #1 wz
2b3e8     01 2E 46 55 |  if_ne	or	local05, #1
2b3ec     20 2A CE F7 | 	test	local03, #32 wz
2b3f0     C0 2E 46 55 |  if_ne	or	local05, #192
2b3f4     08 30 06 F1 | 	add	local06, #8
2b3f8     18 2F 62 FC | 	wrlong	local05, local06
2b3fc     0C 30 06 F1 | 	add	local06, #12
2b400     18 4F 0A FB | 	rdlong	local21, local06 wz
2b404     14 30 86 F1 | 	sub	local06, #20
2b408     18 00 90 5D |  if_ne	jmp	#LR__3943
2b40c     04 36 06 F1 | 	add	local09, #4
2b410     1B 4F 02 FB | 	rdlong	local21, local09
2b414     04 36 86 F1 | 	sub	local09, #4
2b418     14 30 06 F1 | 	add	local06, #20
2b41c     18 4F 62 FC | 	wrlong	local21, local06
2b420     14 30 86 F1 | 	sub	local06, #20
2b424                 | LR__3943
2b424     18 30 06 F1 | 	add	local06, #24
2b428     18 4F 0A FB | 	rdlong	local21, local06 wz
2b42c     18 30 86 F1 | 	sub	local06, #24
2b430     18 00 90 5D |  if_ne	jmp	#LR__3944
2b434     08 36 06 F1 | 	add	local09, #8
2b438     1B 4F 02 FB | 	rdlong	local21, local09
2b43c     08 36 86 F1 | 	sub	local09, #8
2b440     18 30 06 F1 | 	add	local06, #24
2b444     18 4F 62 FC | 	wrlong	local21, local06
2b448     18 30 86 F1 | 	sub	local06, #24
2b44c                 | LR__3944
2b44c     24 30 06 F1 | 	add	local06, #36
2b450     18 4F 0A FB | 	rdlong	local21, local06 wz
2b454     24 30 86 F1 | 	sub	local06, #36
2b458     1B 4F 02 AB |  if_e	rdlong	local21, local09
2b45c     24 30 06 A1 |  if_e	add	local06, #36
2b460     18 4F 62 AC |  if_e	wrlong	local21, local06
2b464     24 30 86 A1 |  if_e	sub	local06, #36
2b468     28 30 06 F1 | 	add	local06, #40
2b46c     18 4F 0A FB | 	rdlong	local21, local06 wz
2b470     28 30 86 F1 | 	sub	local06, #40
2b474     18 00 90 5D |  if_ne	jmp	#LR__3945
2b478     10 36 06 F1 | 	add	local09, #16
2b47c     1B 4F 02 FB | 	rdlong	local21, local09
2b480     10 36 86 F1 | 	sub	local09, #16
2b484     28 30 06 F1 | 	add	local06, #40
2b488     18 4F 62 FC | 	wrlong	local21, local06
2b48c     28 30 86 F1 | 	sub	local06, #40
2b490                 | LR__3945
2b490     30 30 06 F1 | 	add	local06, #48
2b494     18 4F 0A FB | 	rdlong	local21, local06 wz
2b498     30 30 86 F1 | 	sub	local06, #48
2b49c     18 00 90 5D |  if_ne	jmp	#LR__3946
2b4a0     0C 36 06 F1 | 	add	local09, #12
2b4a4     1B 4F 02 FB | 	rdlong	local21, local09
2b4a8     0C 36 86 F1 | 	sub	local09, #12
2b4ac     30 30 06 F1 | 	add	local06, #48
2b4b0     18 4F 62 FC | 	wrlong	local21, local06
2b4b4     30 30 86 F1 | 	sub	local06, #48
2b4b8                 | LR__3946
2b4b8     1C 30 06 F1 | 	add	local06, #28
2b4bc     18 4F 0A FB | 	rdlong	local21, local06 wz
2b4c0     1C 30 86 F1 | 	sub	local06, #28
2b4c4     1C 00 90 5D |  if_ne	jmp	#LR__3947
2b4c8     01 32 06 F6 | 	mov	local07, #1
2b4cc     F2 12 02 F6 | 	mov	arg01, objptr
2b4d0     00 60 05 FF 
2b4d4     00 12 46 F5 | 	or	arg01, ##180355072
2b4d8     1C 30 06 F1 | 	add	local06, #28
2b4dc     18 13 62 FC | 	wrlong	arg01, local06
2b4e0     1C 30 86 F1 | 	sub	local06, #28
2b4e4                 | LR__3947
2b4e4     20 30 06 F1 | 	add	local06, #32
2b4e8     18 4F 0A FB | 	rdlong	local21, local06 wz
2b4ec     20 30 86 F1 | 	sub	local06, #32
2b4f0     1C 00 90 5D |  if_ne	jmp	#LR__3948
2b4f4     01 32 06 F6 | 	mov	local07, #1
2b4f8     F2 12 02 F6 | 	mov	arg01, objptr
2b4fc     00 68 05 FF 
2b500     00 12 46 F5 | 	or	arg01, ##181403648
2b504     20 30 06 F1 | 	add	local06, #32
2b508     18 13 62 FC | 	wrlong	arg01, local06
2b50c     20 30 86 F1 | 	sub	local06, #32
2b510                 | LR__3948
2b510     2C 30 06 F1 | 	add	local06, #44
2b514     18 4F 0A FB | 	rdlong	local21, local06 wz
2b518     2C 30 86 F1 | 	sub	local06, #44
2b51c     44 00 90 5D |  if_ne	jmp	#LR__3951
2b520     14 36 06 F1 | 	add	local09, #20
2b524     1B 4F 0A FB | 	rdlong	local21, local09 wz
2b528     14 36 86 F1 | 	sub	local09, #20
2b52c     18 00 90 AD |  if_e	jmp	#LR__3949
2b530     14 36 06 F1 | 	add	local09, #20
2b534     1B 4F 02 FB | 	rdlong	local21, local09
2b538     2C 30 06 F1 | 	add	local06, #44
2b53c     18 4F 62 FC | 	wrlong	local21, local06
2b540     2C 30 86 F1 | 	sub	local06, #44
2b544     1C 00 90 FD | 	jmp	#LR__3950
2b548                 | LR__3949
2b548     01 32 06 F6 | 	mov	local07, #1
2b54c     F2 12 02 F6 | 	mov	arg01, objptr
2b550     00 70 05 FF 
2b554     00 12 46 F5 | 	or	arg01, ##182452224
2b558     2C 30 06 F1 | 	add	local06, #44
2b55c     18 13 62 FC | 	wrlong	arg01, local06
2b560     2C 30 86 F1 | 	sub	local06, #44
2b564                 | LR__3950
2b564                 | LR__3951
2b564                 | LR__3952
2b564     00 32 0E F2 | 	cmp	local07, #0 wz
2b568     18 13 02 56 |  if_ne	mov	arg01, local06
2b56c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2b570     00 4A 0E F2 | 	cmp	local19, #0 wz
2b574     00 12 06 A6 |  if_e	mov	arg01, #0
2b578     10 00 90 5D |  if_ne	jmp	#LR__3953
2b57c     00 12 4E F2 | 	cmps	arg01, #0 wz
2b580     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b584     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b588     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b58c                 | LR__3953
2b58c     25 FB 01 F6 | 	mov	result1, local19
2b590                 | LR__3954
2b590     A7 F0 03 F6 | 	mov	ptra, fp
2b594     B2 00 A0 FD | 	call	#popregs_
2b598                 | __system___openraw_ret
2b598     2D 00 64 FD | 	ret
2b59c                 | 
2b59c                 | __system___closeraw
2b59c     05 4A 05 F6 | 	mov	COUNT_, #5
2b5a0     A8 00 A0 FD | 	call	#pushregs_
2b5a4     09 27 02 F6 | 	mov	local01, arg01
2b5a8     00 28 06 F6 | 	mov	local02, #0
2b5ac     08 26 06 F1 | 	add	local01, #8
2b5b0     13 FB 09 FB | 	rdlong	result1, local01 wz
2b5b4     08 26 86 F1 | 	sub	local01, #8
2b5b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b5bc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b5c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b5c4     01 FA 65 A6 |  if_e	neg	result1, #1
2b5c8     A8 00 90 AD |  if_e	jmp	#LR__3962
2b5cc     2C 26 06 F1 | 	add	local01, #44
2b5d0     13 FB 09 FB | 	rdlong	result1, local01 wz
2b5d4     2C 26 86 F1 | 	sub	local01, #44
2b5d8     38 00 90 AD |  if_e	jmp	#LR__3960
2b5dc     2C 26 06 F1 | 	add	local01, #44
2b5e0     13 2B 02 FB | 	rdlong	local03, local01
2b5e4     15 2D 02 F6 | 	mov	local04, local03
2b5e8     2C 26 86 F1 | 	sub	local01, #44
2b5ec     13 2C 46 F7 | 	zerox	local04, #19
2b5f0     14 2A 46 F0 | 	shr	local03, #20
2b5f4     02 2A 66 F0 | 	shl	local03, #2
2b5f8     ED 2A 02 F1 | 	add	local03, __methods__
2b5fc     15 2B 02 FB | 	rdlong	local03, local03
2b600     13 13 02 F6 | 	mov	arg01, local01
2b604     F2 2E 02 F6 | 	mov	local05, objptr
2b608     16 E5 01 F6 | 	mov	objptr, local04
2b60c     2D 2A 62 FD | 	call	local03
2b610     17 E5 01 F6 | 	mov	objptr, local05
2b614                 | LR__3960
2b614     24 26 06 F1 | 	add	local01, #36
2b618     13 2F 0A FB | 	rdlong	local05, local01 wz
2b61c     24 26 86 F1 | 	sub	local01, #36
2b620     3C 00 90 AD |  if_e	jmp	#LR__3961
2b624     24 26 06 F1 | 	add	local01, #36
2b628     13 2B 02 FB | 	rdlong	local03, local01
2b62c     15 2D 02 F6 | 	mov	local04, local03
2b630     24 26 86 F1 | 	sub	local01, #36
2b634     13 2C 46 F7 | 	zerox	local04, #19
2b638     14 2A 46 F0 | 	shr	local03, #20
2b63c     02 2A 66 F0 | 	shl	local03, #2
2b640     ED 2A 02 F1 | 	add	local03, __methods__
2b644     15 2B 02 FB | 	rdlong	local03, local03
2b648     13 13 02 F6 | 	mov	arg01, local01
2b64c     F2 2E 02 F6 | 	mov	local05, objptr
2b650     16 E5 01 F6 | 	mov	objptr, local04
2b654     2D 2A 62 FD | 	call	local03
2b658     17 E5 01 F6 | 	mov	objptr, local05
2b65c     FD 28 02 F6 | 	mov	local02, result1
2b660                 | LR__3961
2b660     13 13 02 F6 | 	mov	arg01, local01
2b664     00 14 06 F6 | 	mov	arg02, #0
2b668     34 16 06 F6 | 	mov	arg03, #52
2b66c     98 00 A0 FD | 	call	#\builtin_bytefill_
2b670     14 FB 01 F6 | 	mov	result1, local02
2b674                 | LR__3962
2b674     A7 F0 03 F6 | 	mov	ptra, fp
2b678     B2 00 A0 FD | 	call	#popregs_
2b67c                 | __system___closeraw_ret
2b67c     2D 00 64 FD | 	ret
2b680                 | 
2b680                 | __system___vfs_open_sdcardx
2b680     0B 4A 05 F6 | 	mov	COUNT_, #11
2b684     A8 00 A0 FD | 	call	#pushregs_
2b688     09 2B 02 F6 | 	mov	local03, arg01
2b68c     0A 2D 02 F6 | 	mov	local04, arg02
2b690     0B 2F 02 F6 | 	mov	local05, arg03
2b694     0C 31 02 F6 | 	mov	local06, arg04
2b698     01 00 00 FF 
2b69c     24 12 06 F6 | 	mov	arg01, ##548
2b6a0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2b6a4     FD 32 02 F6 | 	mov	local07, result1
2b6a8     01 00 00 FF 
2b6ac     34 12 06 F6 | 	mov	arg01, ##564
2b6b0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2b6b4     FD 34 02 F6 | 	mov	local08, result1
2b6b8     15 19 02 F6 | 	mov	arg04, local03
2b6bc     1F 18 C6 F0 | 	sar	arg04, #31
2b6c0     15 17 02 F6 | 	mov	arg03, local03
2b6c4     01 12 06 F6 | 	mov	arg01, #1
2b6c8     00 14 06 F6 | 	mov	arg02, #0
2b6cc     EC DB BF FD | 	call	#__system___int64_shl
2b6d0     FD 26 02 F6 | 	mov	local01, result1
2b6d4     FE 36 02 F6 | 	mov	local09, result2
2b6d8     16 19 02 F6 | 	mov	arg04, local04
2b6dc     1F 18 C6 F0 | 	sar	arg04, #31
2b6e0     16 17 02 F6 | 	mov	arg03, local04
2b6e4     01 12 06 F6 | 	mov	arg01, #1
2b6e8     00 14 06 F6 | 	mov	arg02, #0
2b6ec     CC DB BF FD | 	call	#__system___int64_shl
2b6f0     FD 26 42 F5 | 	or	local01, result1
2b6f4     FE 36 42 F5 | 	or	local09, result2
2b6f8     17 19 02 F6 | 	mov	arg04, local05
2b6fc     1F 18 C6 F0 | 	sar	arg04, #31
2b700     17 17 02 F6 | 	mov	arg03, local05
2b704     01 12 06 F6 | 	mov	arg01, #1
2b708     00 14 06 F6 | 	mov	arg02, #0
2b70c     AC DB BF FD | 	call	#__system___int64_shl
2b710     FD 26 42 F5 | 	or	local01, result1
2b714     FE 36 42 F5 | 	or	local09, result2
2b718     18 19 02 F6 | 	mov	arg04, local06
2b71c     1F 18 C6 F0 | 	sar	arg04, #31
2b720     18 17 02 F6 | 	mov	arg03, local06
2b724     01 12 06 F6 | 	mov	arg01, #1
2b728     00 14 06 F6 | 	mov	arg02, #0
2b72c     8C DB BF FD | 	call	#__system___int64_shl
2b730     1B 15 02 F6 | 	mov	arg02, local09
2b734     FD 26 42 F5 | 	or	local01, result1
2b738     0A FD 41 F5 | 	or	result2, arg02
2b73c     FE 28 02 F6 | 	mov	local02, result2
2b740     13 13 02 F6 | 	mov	arg01, local01
2b744     14 15 02 F6 | 	mov	arg02, local02
2b748     A8 DB BF FD | 	call	#__system___usepins
2b74c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b750     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b754     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2b758     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b75c     00 FA 05 A6 |  if_e	mov	result1, #0
2b760     B4 00 90 AD |  if_e	jmp	#LR__3972
2b764     13 39 02 F6 | 	mov	local10, local01
2b768     14 37 02 F6 | 	mov	local09, local02
2b76c     01 00 00 FF 
2b770     08 32 06 F1 | 	add	local07, ##520
2b774     19 39 62 FC | 	wrlong	local10, local07
2b778     04 32 06 F1 | 	add	local07, #4
2b77c     19 37 62 FC | 	wrlong	local09, local07
2b780     01 00 00 FF 
2b784     0C 32 86 F1 | 	sub	local07, ##524
2b788     18 1B 02 F6 | 	mov	arg05, local06
2b78c     00 12 06 F6 | 	mov	arg01, #0
2b790     15 15 02 F6 | 	mov	arg02, local03
2b794     16 17 02 F6 | 	mov	arg03, local04
2b798     17 19 02 F6 | 	mov	arg04, local05
2b79c     F2 38 02 F6 | 	mov	local10, objptr
2b7a0     19 E5 01 F6 | 	mov	objptr, local07
2b7a4     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2b7a8     1C E5 01 F6 | 	mov	objptr, local10
2b7ac     FD 3A 0A F6 | 	mov	local11, result1 wz
2b7b0     24 00 90 5D |  if_ne	jmp	#LR__3970
2b7b4     B2 01 00 FF 
2b7b8     72 14 06 F6 | 	mov	arg02, ##@LR__5387
2b7bc     1A 13 02 F6 | 	mov	arg01, local08
2b7c0     00 16 06 F6 | 	mov	arg03, #0
2b7c4     F2 3A 02 F6 | 	mov	local11, objptr
2b7c8     19 E5 01 F6 | 	mov	objptr, local07
2b7cc     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2b7d0     1D E5 01 F6 | 	mov	objptr, local11
2b7d4     FD 3A 02 F6 | 	mov	local11, result1
2b7d8                 | LR__3970
2b7d8     00 3A 0E F2 | 	cmp	local11, #0 wz
2b7dc     24 00 90 AD |  if_e	jmp	#LR__3971
2b7e0     13 13 02 F6 | 	mov	arg01, local01
2b7e4     14 15 02 F6 | 	mov	arg02, local02
2b7e8     5C DB BF FD | 	call	#__system___freepins
2b7ec     1D 13 6A F6 | 	neg	arg01, local11 wz
2b7f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b7f4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b7f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b7fc     00 FA 05 F6 | 	mov	result1, #0
2b800     14 00 90 FD | 	jmp	#LR__3972
2b804                 | LR__3971
2b804     19 13 02 F6 | 	mov	arg01, local07
2b808     F2 3A 02 F6 | 	mov	local11, objptr
2b80c     19 E5 01 F6 | 	mov	objptr, local07
2b810     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2b814     1D E5 01 F6 | 	mov	objptr, local11
2b818                 | LR__3972
2b818     A7 F0 03 F6 | 	mov	ptra, fp
2b81c     B2 00 A0 FD | 	call	#popregs_
2b820                 | __system___vfs_open_sdcardx_ret
2b820     2D 00 64 FD | 	ret
2b824                 | 
2b824                 | __system____default_getc
2b824     03 4A 05 F6 | 	mov	COUNT_, #3
2b828     A8 00 A0 FD | 	call	#pushregs_
2b82c     09 27 02 F6 | 	mov	local01, arg01
2b830     13 29 02 FB | 	rdlong	local02, local01
2b834     08 28 06 F1 | 	add	local02, #8
2b838     14 2B 02 FB | 	rdlong	local03, local02
2b83c     02 2A CE F7 | 	test	local03, #2 wz
2b840     13 13 02 56 |  if_ne	mov	arg01, local01
2b844     00 01 B0 5D |  if_ne	call	#__system____default_flush
2b848     14 2B 02 FB | 	rdlong	local03, local02
2b84c     01 2A 46 F5 | 	or	local03, #1
2b850     14 2B 62 FC | 	wrlong	local03, local02
2b854     08 28 86 F1 | 	sub	local02, #8
2b858     14 2B 0A FB | 	rdlong	local03, local02 wz
2b85c     0C 00 90 5D |  if_ne	jmp	#LR__3980
2b860     13 13 02 F6 | 	mov	arg01, local01
2b864     68 18 B0 FD | 	call	#__system____default_filbuf
2b868     FD 2A 02 F6 | 	mov	local03, result1
2b86c                 | LR__3980
2b86c     01 2A 56 F2 | 	cmps	local03, #1 wc
2b870     01 FA 65 C6 |  if_b	neg	result1, #1
2b874     1C 00 90 CD |  if_b	jmp	#LR__3981
2b878     01 2A 86 F1 | 	sub	local03, #1
2b87c     14 2B 62 FC | 	wrlong	local03, local02
2b880     04 28 06 F1 | 	add	local02, #4
2b884     14 2B 02 FB | 	rdlong	local03, local02
2b888     15 FB C1 FA | 	rdbyte	result1, local03
2b88c     01 2A 06 F1 | 	add	local03, #1
2b890     14 2B 62 FC | 	wrlong	local03, local02
2b894                 | LR__3981
2b894     A7 F0 03 F6 | 	mov	ptra, fp
2b898     B2 00 A0 FD | 	call	#popregs_
2b89c                 | __system____default_getc_ret
2b89c     2D 00 64 FD | 	ret
2b8a0                 | 
2b8a0                 | __system____default_putc
2b8a0     06 4A 05 F6 | 	mov	COUNT_, #6
2b8a4     A8 00 A0 FD | 	call	#pushregs_
2b8a8     09 27 02 F6 | 	mov	local01, arg01
2b8ac     0A 29 02 F6 | 	mov	local02, arg02
2b8b0     14 2B 02 FB | 	rdlong	local03, local02
2b8b4     08 2A 06 F1 | 	add	local03, #8
2b8b8     15 FB 01 FB | 	rdlong	result1, local03
2b8bc     01 FA CD F7 | 	test	result1, #1 wz
2b8c0     14 13 02 56 |  if_ne	mov	arg01, local02
2b8c4     80 00 B0 5D |  if_ne	call	#__system____default_flush
2b8c8     15 2D 02 FB | 	rdlong	local04, local03
2b8cc     02 2C 46 F5 | 	or	local04, #2
2b8d0     15 2D 62 FC | 	wrlong	local04, local03
2b8d4     08 2A 86 F1 | 	sub	local03, #8
2b8d8     15 2F 02 FB | 	rdlong	local05, local03
2b8dc     10 2A 06 F1 | 	add	local03, #16
2b8e0     15 15 02 FB | 	rdlong	arg02, local03
2b8e4     10 2A 86 F1 | 	sub	local03, #16
2b8e8     17 FB 01 F6 | 	mov	result1, local05
2b8ec     0A FB 01 F1 | 	add	result1, arg02
2b8f0     FD 26 42 FC | 	wrbyte	local01, result1
2b8f4     13 27 E2 F8 | 	getbyte	local01, local01, #0
2b8f8     01 2E 06 F1 | 	add	local05, #1
2b8fc     15 2F 62 FC | 	wrlong	local05, local03
2b900     06 28 06 F1 | 	add	local02, #6
2b904     14 31 EA FA | 	rdword	local06, local02 wz
2b908     06 28 86 F1 | 	sub	local02, #6
2b90c     0C 2A 06 51 |  if_ne	add	local03, #12
2b910     15 2D 02 5B |  if_ne	rdlong	local04, local03
2b914     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2b918     0C 00 90 AD |  if_e	jmp	#LR__3990
2b91c     0A 26 0E F2 | 	cmp	local01, #10 wz
2b920     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2b924     10 00 90 5D |  if_ne	jmp	#LR__3991
2b928                 | LR__3990
2b928     14 13 02 F6 | 	mov	arg01, local02
2b92c     18 00 B0 FD | 	call	#__system____default_flush
2b930     00 FA 0D F2 | 	cmp	result1, #0 wz
2b934     01 26 66 56 |  if_ne	neg	local01, #1
2b938                 | LR__3991
2b938     13 FB 01 F6 | 	mov	result1, local01
2b93c     A7 F0 03 F6 | 	mov	ptra, fp
2b940     B2 00 A0 FD | 	call	#popregs_
2b944                 | __system____default_putc_ret
2b944     2D 00 64 FD | 	ret
2b948                 | 
2b948                 | __system____default_flush
2b948     06 4A 05 F6 | 	mov	COUNT_, #6
2b94c     A8 00 A0 FD | 	call	#pushregs_
2b950     09 27 02 F6 | 	mov	local01, arg01
2b954     13 29 02 FB | 	rdlong	local02, local01
2b958     14 2B 02 FB | 	rdlong	local03, local02
2b95c     08 28 06 F1 | 	add	local02, #8
2b960     14 FB 01 FB | 	rdlong	result1, local02
2b964     08 28 86 F1 | 	sub	local02, #8
2b968     02 FA CD F7 | 	test	result1, #2 wz
2b96c     D0 00 90 AD |  if_e	jmp	#LR__4002
2b970     01 2A 56 F2 | 	cmps	local03, #1 wc
2b974     20 01 90 CD |  if_b	jmp	#LR__4004
2b978     08 26 06 F1 | 	add	local01, #8
2b97c     13 FB 01 FB | 	rdlong	result1, local01
2b980     08 26 86 F1 | 	sub	local01, #8
2b984     40 FA CD F7 | 	test	result1, #64 wz
2b988     68 00 90 AD |  if_e	jmp	#LR__4001
2b98c     08 26 06 F1 | 	add	local01, #8
2b990     13 17 02 FB | 	rdlong	arg03, local01
2b994     08 26 86 F1 | 	sub	local01, #8
2b998     80 16 CE F7 | 	test	arg03, #128 wz
2b99c     54 00 90 AD |  if_e	jmp	#LR__4000
2b9a0     30 26 06 F1 | 	add	local01, #48
2b9a4     13 2D 02 FB | 	rdlong	local04, local01
2b9a8     16 2F 02 F6 | 	mov	local05, local04
2b9ac     30 26 86 F1 | 	sub	local01, #48
2b9b0     13 2E 46 F7 | 	zerox	local05, #19
2b9b4     14 2C 46 F0 | 	shr	local04, #20
2b9b8     02 2C 66 F0 | 	shl	local04, #2
2b9bc     ED 2C 02 F1 | 	add	local04, __methods__
2b9c0     16 2D 02 FB | 	rdlong	local04, local04
2b9c4     13 13 02 F6 | 	mov	arg01, local01
2b9c8     00 14 06 F6 | 	mov	arg02, #0
2b9cc     02 16 06 F6 | 	mov	arg03, #2
2b9d0     F2 30 02 F6 | 	mov	local06, objptr
2b9d4     17 E5 01 F6 | 	mov	objptr, local05
2b9d8     2D 2C 62 FD | 	call	local04
2b9dc     18 E5 01 F6 | 	mov	objptr, local06
2b9e0     08 26 06 F1 | 	add	local01, #8
2b9e4     13 31 02 FB | 	rdlong	local06, local01
2b9e8     80 30 26 F5 | 	andn	local06, #128
2b9ec     13 31 62 FC | 	wrlong	local06, local01
2b9f0     08 26 86 F1 | 	sub	local01, #8
2b9f4                 | LR__4000
2b9f4                 | LR__4001
2b9f4     18 26 06 F1 | 	add	local01, #24
2b9f8     13 2D 02 FB | 	rdlong	local04, local01
2b9fc     16 2F 02 F6 | 	mov	local05, local04
2ba00     18 26 86 F1 | 	sub	local01, #24
2ba04     13 2E 46 F7 | 	zerox	local05, #19
2ba08     14 2C 46 F0 | 	shr	local04, #20
2ba0c     02 2C 66 F0 | 	shl	local04, #2
2ba10     ED 2C 02 F1 | 	add	local04, __methods__
2ba14     16 2D 02 FB | 	rdlong	local04, local04
2ba18     10 28 06 F1 | 	add	local02, #16
2ba1c     14 15 02 FB | 	rdlong	arg02, local02
2ba20     10 28 86 F1 | 	sub	local02, #16
2ba24     13 13 02 F6 | 	mov	arg01, local01
2ba28     15 17 02 F6 | 	mov	arg03, local03
2ba2c     F2 30 02 F6 | 	mov	local06, objptr
2ba30     17 E5 01 F6 | 	mov	objptr, local05
2ba34     2D 2C 62 FD | 	call	local04
2ba38     18 E5 01 F6 | 	mov	objptr, local06
2ba3c     58 00 90 FD | 	jmp	#LR__4004
2ba40                 | LR__4002
2ba40     08 28 06 F1 | 	add	local02, #8
2ba44     14 31 02 FB | 	rdlong	local06, local02
2ba48     08 28 86 F1 | 	sub	local02, #8
2ba4c     01 30 CE F7 | 	test	local06, #1 wz
2ba50     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2ba54     40 00 90 AD |  if_e	jmp	#LR__4003
2ba58     30 26 06 F1 | 	add	local01, #48
2ba5c     13 2D 02 FB | 	rdlong	local04, local01
2ba60     16 2F 02 F6 | 	mov	local05, local04
2ba64     30 26 86 F1 | 	sub	local01, #48
2ba68     13 2E 46 F7 | 	zerox	local05, #19
2ba6c     14 2C 46 F0 | 	shr	local04, #20
2ba70     02 2C 66 F0 | 	shl	local04, #2
2ba74     ED 2C 02 F1 | 	add	local04, __methods__
2ba78     16 2D 02 FB | 	rdlong	local04, local04
2ba7c     13 13 02 F6 | 	mov	arg01, local01
2ba80     15 15 62 F6 | 	neg	arg02, local03
2ba84     01 16 06 F6 | 	mov	arg03, #1
2ba88     F2 30 02 F6 | 	mov	local06, objptr
2ba8c     17 E5 01 F6 | 	mov	objptr, local05
2ba90     2D 2C 62 FD | 	call	local04
2ba94     18 E5 01 F6 | 	mov	objptr, local06
2ba98                 | LR__4003
2ba98                 | LR__4004
2ba98     14 01 68 FC | 	wrlong	#0, local02
2ba9c     04 28 06 F1 | 	add	local02, #4
2baa0     14 01 68 FC | 	wrlong	#0, local02
2baa4     04 28 06 F1 | 	add	local02, #4
2baa8     14 01 68 FC | 	wrlong	#0, local02
2baac     00 FA 05 F6 | 	mov	result1, #0
2bab0     A7 F0 03 F6 | 	mov	ptra, fp
2bab4     B2 00 A0 FD | 	call	#popregs_
2bab8                 | __system____default_flush_ret
2bab8     2D 00 64 FD | 	ret
2babc                 | 
2babc                 | __system____default_buffer_init
2babc     02 4A 05 F6 | 	mov	COUNT_, #2
2bac0     A8 00 A0 FD | 	call	#pushregs_
2bac4     09 27 02 F6 | 	mov	local01, arg01
2bac8     13 29 02 FB | 	rdlong	local02, local01
2bacc     13 13 02 F6 | 	mov	arg01, local01
2bad0     34 03 B0 FD | 	call	#__system___isatty
2bad4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bad8     06 26 06 51 |  if_ne	add	local01, #6
2badc     13 0B 58 5C |  if_ne	wrword	#5, local01
2bae0     06 26 06 A1 |  if_e	add	local01, #6
2bae4     13 0D 58 AC |  if_e	wrword	#6, local01
2bae8     14 28 06 F1 | 	add	local02, #20
2baec     14 27 02 F6 | 	mov	local01, local02
2baf0     04 28 86 F1 | 	sub	local02, #4
2baf4     14 27 62 FC | 	wrlong	local01, local02
2baf8     04 28 86 F1 | 	sub	local02, #4
2bafc     02 00 80 FF 
2bb00     14 01 68 FC | 	wrlong	##1024, local02
2bb04     00 FA 05 F6 | 	mov	result1, #0
2bb08     A7 F0 03 F6 | 	mov	ptra, fp
2bb0c     B2 00 A0 FD | 	call	#popregs_
2bb10                 | __system____default_buffer_init_ret
2bb10     2D 00 64 FD | 	ret
2bb14                 | 
2bb14                 | __system__stat
2bb14     04 4A 05 F6 | 	mov	COUNT_, #4
2bb18     A8 00 A0 FD | 	call	#pushregs_
2bb1c     0A 27 02 F6 | 	mov	local01, arg02
2bb20     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2bb24     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2bb28     09 15 02 F6 | 	mov	arg02, arg01
2bb2c     14 13 02 F6 | 	mov	arg01, local02
2bb30     00 16 06 F6 | 	mov	arg03, #0
2bb34     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2bb38     54 B5 BF FD | 	call	#__system____getvfsforfile
2bb3c     FD 2A 0A F6 | 	mov	local03, result1 wz
2bb40     10 00 90 AD |  if_e	jmp	#LR__4010
2bb44     34 2A 06 F1 | 	add	local03, #52
2bb48     15 17 0A FB | 	rdlong	arg03, local03 wz
2bb4c     34 2A 86 F1 | 	sub	local03, #52
2bb50     14 00 90 5D |  if_ne	jmp	#LR__4011
2bb54                 | LR__4010
2bb54     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bb58     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2bb5c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bb60     01 FA 65 F6 | 	neg	result1, #1
2bb64     68 00 90 FD | 	jmp	#LR__4012
2bb68                 | LR__4011
2bb68     13 13 02 F6 | 	mov	arg01, local01
2bb6c     00 14 06 F6 | 	mov	arg02, #0
2bb70     30 16 06 F6 | 	mov	arg03, #48
2bb74     09 2D 02 F6 | 	mov	local04, arg01
2bb78     98 00 A0 FD | 	call	#\builtin_bytefill_
2bb7c     16 FB 01 F6 | 	mov	result1, local04
2bb80     14 13 CA FA | 	rdbyte	arg01, local02 wz
2bb84     08 26 06 A1 |  if_e	add	local01, #8
2bb88     08 00 80 AF 
2bb8c     13 FF 6B AC |  if_e	wrlong	##4607, local01
2bb90     00 FA 05 A6 |  if_e	mov	result1, #0
2bb94     38 00 90 AD |  if_e	jmp	#LR__4012
2bb98     34 2A 06 F1 | 	add	local03, #52
2bb9c     15 2B 02 FB | 	rdlong	local03, local03
2bba0     15 2D 02 F6 | 	mov	local04, local03
2bba4     13 2A 46 F7 | 	zerox	local03, #19
2bba8     14 2C 46 F0 | 	shr	local04, #20
2bbac     02 2C 66 F0 | 	shl	local04, #2
2bbb0     ED 2C 02 F1 | 	add	local04, __methods__
2bbb4     16 2D 02 FB | 	rdlong	local04, local04
2bbb8     14 13 02 F6 | 	mov	arg01, local02
2bbbc     13 15 02 F6 | 	mov	arg02, local01
2bbc0     F2 28 02 F6 | 	mov	local02, objptr
2bbc4     15 E5 01 F6 | 	mov	objptr, local03
2bbc8     2D 2C 62 FD | 	call	local04
2bbcc     14 E5 01 F6 | 	mov	objptr, local02
2bbd0                 | LR__4012
2bbd0     A7 F0 03 F6 | 	mov	ptra, fp
2bbd4     B2 00 A0 FD | 	call	#popregs_
2bbd8                 | __system__stat_ret
2bbd8     2D 00 64 FD | 	ret
2bbdc                 | 
2bbdc                 | __system__write
2bbdc     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bbe0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bbe4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bbe8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bbec     01 FA 65 36 |  if_ae	neg	result1, #1
2bbf0     20 00 90 3D |  if_ae	jmp	#LR__4020
2bbf4     34 12 06 FD | 	qmul	arg01, #52
2bbf8     02 00 00 FF 
2bbfc     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bc00     18 12 62 FD | 	getqx	arg01
2bc04     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bc08     02 00 00 FF 
2bc0c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bc10     0C 10 B0 FD | 	call	#__system___vfswrite
2bc14                 | LR__4020
2bc14                 | __system__write_ret
2bc14     2D 00 64 FD | 	ret
2bc18                 | 
2bc18                 | __system__read
2bc18     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bc1c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bc20     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bc24     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bc28     01 FA 65 36 |  if_ae	neg	result1, #1
2bc2c     20 00 90 3D |  if_ae	jmp	#LR__4030
2bc30     34 12 06 FD | 	qmul	arg01, #52
2bc34     02 00 00 FF 
2bc38     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bc3c     18 12 62 FD | 	getqx	arg01
2bc40     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bc44     02 00 00 FF 
2bc48     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bc4c     98 11 B0 FD | 	call	#__system___vfsread
2bc50                 | LR__4030
2bc50                 | __system__read_ret
2bc50     2D 00 64 FD | 	ret
2bc54                 | 
2bc54                 | __system__close
2bc54     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bc58     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bc5c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bc60     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bc64     01 FA 65 36 |  if_ae	neg	result1, #1
2bc68     20 00 90 3D |  if_ae	jmp	#LR__4040
2bc6c     34 12 06 FD | 	qmul	arg01, #52
2bc70     02 00 00 FF 
2bc74     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bc78     18 12 62 FD | 	getqx	arg01
2bc7c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bc80     02 00 00 FF 
2bc84     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bc88     10 F9 BF FD | 	call	#__system___closeraw
2bc8c                 | LR__4040
2bc8c                 | __system__close_ret
2bc8c     2D 00 64 FD | 	ret
2bc90                 | 
2bc90                 | __system__lseek
2bc90     06 4A 05 F6 | 	mov	COUNT_, #6
2bc94     A8 00 A0 FD | 	call	#pushregs_
2bc98     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bc9c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bca0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bca4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bca8     01 FA 65 36 |  if_ae	neg	result1, #1
2bcac     C4 00 90 3D |  if_ae	jmp	#LR__4051
2bcb0     34 12 06 FD | 	qmul	arg01, #52
2bcb4     02 00 00 FF 
2bcb8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bcbc     18 26 62 FD | 	getqx	local01
2bcc0     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2bcc4     30 26 06 F1 | 	add	local01, #48
2bcc8     13 13 0A FB | 	rdlong	arg01, local01 wz
2bccc     30 26 86 F1 | 	sub	local01, #48
2bcd0     02 00 00 FF 
2bcd4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bcd8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bcdc     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2bce0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bce4     01 FA 65 A6 |  if_e	neg	result1, #1
2bce8     88 00 90 AD |  if_e	jmp	#LR__4051
2bcec     08 26 06 F1 | 	add	local01, #8
2bcf0     13 29 02 FB | 	rdlong	local02, local01
2bcf4     08 26 86 F1 | 	sub	local01, #8
2bcf8     40 28 CE F7 | 	test	local02, #64 wz
2bcfc     08 26 06 51 |  if_ne	add	local01, #8
2bd00     13 29 02 5B |  if_ne	rdlong	local02, local01
2bd04     80 28 46 55 |  if_ne	or	local02, #128
2bd08     13 29 62 5C |  if_ne	wrlong	local02, local01
2bd0c     08 26 86 51 |  if_ne	sub	local01, #8
2bd10     30 26 06 F1 | 	add	local01, #48
2bd14     13 2B 02 FB | 	rdlong	local03, local01
2bd18     15 2D 02 F6 | 	mov	local04, local03
2bd1c     30 26 86 F1 | 	sub	local01, #48
2bd20     13 2C 46 F7 | 	zerox	local04, #19
2bd24     14 2A 46 F0 | 	shr	local03, #20
2bd28     02 2A 66 F0 | 	shl	local03, #2
2bd2c     ED 2A 02 F1 | 	add	local03, __methods__
2bd30     15 2B 02 FB | 	rdlong	local03, local03
2bd34     13 13 02 F6 | 	mov	arg01, local01
2bd38     F2 2E 02 F6 | 	mov	local05, objptr
2bd3c     16 E5 01 F6 | 	mov	objptr, local04
2bd40     2D 2A 62 FD | 	call	local03
2bd44     17 E5 01 F6 | 	mov	objptr, local05
2bd48     FD 30 02 F6 | 	mov	local06, result1
2bd4c     00 30 56 F2 | 	cmps	local06, #0 wc
2bd50     1C 00 90 3D |  if_ae	jmp	#LR__4050
2bd54     18 13 6A F6 | 	neg	arg01, local06 wz
2bd58     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bd5c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bd60     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bd64     01 FA 65 56 |  if_ne	neg	result1, #1
2bd68     00 FA 05 A6 |  if_e	mov	result1, #0
2bd6c     04 00 90 FD | 	jmp	#LR__4051
2bd70                 | LR__4050
2bd70     18 FB 01 F6 | 	mov	result1, local06
2bd74                 | LR__4051
2bd74     A7 F0 03 F6 | 	mov	ptra, fp
2bd78     B2 00 A0 FD | 	call	#popregs_
2bd7c                 | __system__lseek_ret
2bd7c     2D 00 64 FD | 	ret
2bd80                 | 
2bd80                 | __system___ioctl
2bd80     03 4A 05 F6 | 	mov	COUNT_, #3
2bd84     A8 00 A0 FD | 	call	#pushregs_
2bd88     00 12 4E F2 | 	cmps	arg01, #0 wz
2bd8c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bd90     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2bd94     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bd98     01 FA 65 A6 |  if_e	neg	result1, #1
2bd9c     5C 00 90 AD |  if_e	jmp	#LR__4061
2bda0     28 12 06 F1 | 	add	arg01, #40
2bda4     09 27 02 FB | 	rdlong	local01, arg01
2bda8     13 29 02 F6 | 	mov	local02, local01
2bdac     28 12 86 F1 | 	sub	arg01, #40
2bdb0     13 28 46 F7 | 	zerox	local02, #19
2bdb4     14 26 46 F0 | 	shr	local01, #20
2bdb8     02 26 66 F0 | 	shl	local01, #2
2bdbc     ED 26 02 F1 | 	add	local01, __methods__
2bdc0     13 27 02 FB | 	rdlong	local01, local01
2bdc4     F2 2A 02 F6 | 	mov	local03, objptr
2bdc8     14 E5 01 F6 | 	mov	objptr, local02
2bdcc     2D 26 62 FD | 	call	local01
2bdd0     15 E5 01 F6 | 	mov	objptr, local03
2bdd4     FD 12 0A F6 | 	mov	arg01, result1 wz
2bdd8     1C 00 90 AD |  if_e	jmp	#LR__4060
2bddc     00 12 4E F2 | 	cmps	arg01, #0 wz
2bde0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bde4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bde8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bdec     01 FA 65 56 |  if_ne	neg	result1, #1
2bdf0     00 FA 05 A6 |  if_e	mov	result1, #0
2bdf4     04 00 90 FD | 	jmp	#LR__4061
2bdf8                 | LR__4060
2bdf8     00 FA 05 F6 | 	mov	result1, #0
2bdfc                 | LR__4061
2bdfc     A7 F0 03 F6 | 	mov	ptra, fp
2be00     B2 00 A0 FD | 	call	#popregs_
2be04                 | __system___ioctl_ret
2be04     2D 00 64 FD | 	ret
2be08                 | 
2be08                 | __system___isatty
2be08     00 4A 05 F6 | 	mov	COUNT_, #0
2be0c     A8 00 A0 FD | 	call	#pushregs_
2be10     0C F0 07 F1 | 	add	ptra, #12
2be14     04 4E 05 F1 | 	add	fp, #4
2be18     A7 12 62 FC | 	wrlong	arg01, fp
2be1c     04 4E 05 F1 | 	add	fp, #4
2be20     A7 16 02 F6 | 	mov	arg03, fp
2be24     08 4E 85 F1 | 	sub	fp, #8
2be28     00 15 06 F6 | 	mov	arg02, #256
2be2c     50 FF BF FD | 	call	#__system___ioctl
2be30     00 FA 0D F2 | 	cmp	result1, #0 wz
2be34     01 FA 05 A6 |  if_e	mov	result1, #1
2be38     00 FA 05 56 |  if_ne	mov	result1, #0
2be3c     A7 F0 03 F6 | 	mov	ptra, fp
2be40     B2 00 A0 FD | 	call	#popregs_
2be44                 | __system___isatty_ret
2be44     2D 00 64 FD | 	ret
2be48                 | 
2be48                 | __system____getftab
2be48     0A 12 16 F2 | 	cmp	arg01, #10 wc
2be4c     34 12 06 CD |  if_b	qmul	arg01, #52
2be50     00 FA 05 36 |  if_ae	mov	result1, #0
2be54     02 00 00 CF 
2be58     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2be5c     18 FA 61 CD |  if_b	getqx	result1
2be60     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2be64     02 00 00 CF 
2be68     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2be6c                 | __system____getftab_ret
2be6c     2D 00 64 FD | 	ret
2be70                 | 
2be70                 | __system__strncpy
2be70     09 01 02 F6 | 	mov	_var01, arg01
2be74                 | LR__4070
2be74     01 16 86 F1 | 	sub	arg03, #1
2be78     00 16 56 F2 | 	cmps	arg03, #0 wc
2be7c     18 00 90 CD |  if_b	jmp	#LR__4071
2be80     0A FB C1 FA | 	rdbyte	result1, arg02
2be84     00 FB 41 FC | 	wrbyte	result1, _var01
2be88     01 14 06 F1 | 	add	arg02, #1
2be8c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2be90     01 00 06 F1 | 	add	_var01, #1
2be94     DC FF 9F 5D |  if_ne	jmp	#LR__4070
2be98                 | LR__4071
2be98     97 0C 48 FB | 	callpa	#(@LR__4073-@LR__4072)>>2,fcache_load_ptr_
2be9c                 | LR__4072
2be9c     01 16 86 F1 | 	sub	arg03, #1
2bea0     00 16 56 F2 | 	cmps	arg03, #0 wc
2bea4     00 03 02 36 |  if_ae	mov	_var02, _var01
2bea8     01 00 06 31 |  if_ae	add	_var01, #1
2beac     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2beb0     E8 FF 9F 3D |  if_ae	jmp	#LR__4072
2beb4                 | LR__4073
2beb4     09 FB 01 F6 | 	mov	result1, arg01
2beb8                 | __system__strncpy_ret
2beb8     2D 00 64 FD | 	ret
2bebc                 | 
2bebc                 | __system__strncat
2bebc     00 14 4E F2 | 	cmps	arg02, #0 wz
2bec0     50 00 90 AD |  if_e	jmp	#LR__4084
2bec4     01 16 16 F2 | 	cmp	arg03, #1 wc
2bec8     48 00 90 CD |  if_b	jmp	#LR__4084
2becc     09 01 02 F6 | 	mov	_var01, arg01
2bed0     97 1E 48 FB | 	callpa	#(@LR__4082-@LR__4080)>>2,fcache_load_ptr_
2bed4                 | LR__4080
2bed4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2bed8     01 00 06 51 |  if_ne	add	_var01, #1
2bedc     F4 FF 9F 5D |  if_ne	jmp	#LR__4080
2bee0     0B 03 02 F6 | 	mov	_var02, arg03
2bee4                 | LR__4081
2bee4     0A 05 C2 FA | 	rdbyte	_var03, arg02
2bee8     02 07 02 F6 | 	mov	_var04, _var03
2beec     07 06 4E F7 | 	zerox	_var04, #7 wz
2bef0     01 14 06 F1 | 	add	arg02, #1
2bef4     18 00 90 AD |  if_e	jmp	#LR__4083
2bef8     01 02 86 F1 | 	sub	_var02, #1
2befc     00 02 56 F2 | 	cmps	_var02, #0 wc
2bf00     00 07 02 36 |  if_ae	mov	_var04, _var01
2bf04     01 00 06 31 |  if_ae	add	_var01, #1
2bf08     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2bf0c     D4 FF 9F 3D |  if_ae	jmp	#LR__4081
2bf10                 | LR__4082
2bf10                 | LR__4083
2bf10     00 01 48 FC | 	wrbyte	#0, _var01
2bf14                 | LR__4084
2bf14     09 FB 01 F6 | 	mov	result1, arg01
2bf18                 | __system__strncat_ret
2bf18     2D 00 64 FD | 	ret
2bf1c                 | 
2bf1c                 | __system__strncmp
2bf1c     09 01 0A F6 | 	mov	_var01, arg01 wz
2bf20     14 00 90 5D |  if_ne	jmp	#LR__4090
2bf24     00 14 0E F2 | 	cmp	arg02, #0 wz
2bf28     01 02 66 56 |  if_ne	neg	_var02, #1
2bf2c     00 02 06 A6 |  if_e	mov	_var02, #0
2bf30     01 FB 01 F6 | 	mov	result1, _var02
2bf34     74 00 90 FD | 	jmp	#__system__strncmp_ret
2bf38                 | LR__4090
2bf38     00 14 0E F2 | 	cmp	arg02, #0 wz
2bf3c     01 FA 05 A6 |  if_e	mov	result1, #1
2bf40     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bf44     0B 05 02 F6 | 	mov	_var03, arg03
2bf48     97 16 48 FB | 	callpa	#(@LR__4092-@LR__4091)>>2,fcache_load_ptr_
2bf4c                 | LR__4091
2bf4c     00 07 C2 FA | 	rdbyte	_var04, _var01
2bf50     0A 09 02 F6 | 	mov	_var05, arg02
2bf54     04 0B C2 FA | 	rdbyte	_var06, _var05
2bf58     01 04 86 F1 | 	sub	_var03, #1
2bf5c     00 04 56 F2 | 	cmps	_var03, #0 wc
2bf60     01 00 06 F1 | 	add	_var01, #1
2bf64     01 14 06 F1 | 	add	arg02, #1
2bf68     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2bf6c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4093
2bf70     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2bf74     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4091
2bf78                 | LR__4092
2bf78                 | LR__4093
2bf78     00 04 56 F2 | 	cmps	_var03, #0 wc
2bf7c     00 FA 05 C6 |  if_b	mov	result1, #0
2bf80     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2bf84     05 07 0A F2 | 	cmp	_var04, _var06 wz
2bf88     00 FA 05 A6 |  if_e	mov	result1, #0
2bf8c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bf90     00 06 0E F2 | 	cmp	_var04, #0 wz
2bf94     01 FA 65 A6 |  if_e	neg	result1, #1
2bf98     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bf9c     00 0A 0E F2 | 	cmp	_var06, #0 wz
2bfa0     01 FA 05 A6 |  if_e	mov	result1, #1
2bfa4     03 FB 01 56 |  if_ne	mov	result1, _var04
2bfa8     05 FB 81 51 |  if_ne	sub	result1, _var06
2bfac                 | __system__strncmp_ret
2bfac     2D 00 64 FD | 	ret
2bfb0                 | 
2bfb0                 | __system____root_opendir
2bfb0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2bfb4     04 12 06 F1 | 	add	arg01, #4
2bfb8     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2bfbc     00 FA 05 F6 | 	mov	result1, #0
2bfc0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2bfc4                 | __system____root_opendir_ret
2bfc4     2D 00 64 FD | 	ret
2bfc8                 | 
2bfc8                 | __system____root_readdir
2bfc8     03 4A 05 F6 | 	mov	COUNT_, #3
2bfcc     A8 00 A0 FD | 	call	#pushregs_
2bfd0     09 27 02 F6 | 	mov	local01, arg01
2bfd4     0A 29 02 F6 | 	mov	local02, arg02
2bfd8     04 26 06 F1 | 	add	local01, #4
2bfdc     13 2B 02 FB | 	rdlong	local03, local01
2bfe0     04 26 86 F1 | 	sub	local01, #4
2bfe4                 | LR__4100
2bfe4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2bfe8     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2bfec     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2bff0     01 FA 65 A6 |  if_e	neg	result1, #1
2bff4     48 00 90 AD |  if_e	jmp	#LR__4101
2bff8     15 17 0A FB | 	rdlong	arg03, local03 wz
2bffc     04 2A 06 A1 |  if_e	add	local03, #4
2c000     E0 FF 9F AD |  if_e	jmp	#LR__4100
2c004     15 15 02 FB | 	rdlong	arg02, local03
2c008     01 14 06 F1 | 	add	arg02, #1
2c00c     14 13 02 F6 | 	mov	arg01, local02
2c010     40 16 06 F6 | 	mov	arg03, #64
2c014     58 FE BF FD | 	call	#__system__strncpy
2c018     50 28 06 F1 | 	add	local02, #80
2c01c     14 03 48 FC | 	wrbyte	#1, local02
2c020     08 28 86 F1 | 	sub	local02, #8
2c024     14 01 68 FC | 	wrlong	#0, local02
2c028     04 28 06 F1 | 	add	local02, #4
2c02c     14 01 68 FC | 	wrlong	#0, local02
2c030     04 2A 06 F1 | 	add	local03, #4
2c034     04 26 06 F1 | 	add	local01, #4
2c038     13 2B 62 FC | 	wrlong	local03, local01
2c03c     00 FA 05 F6 | 	mov	result1, #0
2c040                 | LR__4101
2c040     A7 F0 03 F6 | 	mov	ptra, fp
2c044     B2 00 A0 FD | 	call	#popregs_
2c048                 | __system____root_readdir_ret
2c048     2D 00 64 FD | 	ret
2c04c                 | 
2c04c                 | __system____root_closedir
2c04c     00 FA 05 F6 | 	mov	result1, #0
2c050                 | __system____root_closedir_ret
2c050     2D 00 64 FD | 	ret
2c054                 | 
2c054                 | __system____root_stat
2c054     0A 01 02 F6 | 	mov	_var01, arg02
2c058     00 13 02 F6 | 	mov	arg01, _var01
2c05c     00 14 06 F6 | 	mov	arg02, #0
2c060     30 16 06 F6 | 	mov	arg03, #48
2c064     98 00 A0 FD | 	call	#\builtin_bytefill_
2c068     08 00 06 F1 | 	add	_var01, #8
2c06c     08 00 80 FF 
2c070     00 FF 6B FC | 	wrlong	##4607, _var01
2c074     00 FA 05 F6 | 	mov	result1, #0
2c078                 | __system____root_stat_ret
2c078     2D 00 64 FD | 	ret
2c07c                 | 
2c07c                 | __system___normalizeName
2c07c     00 00 06 F6 | 	mov	_var01, #0
2c080     09 03 02 F6 | 	mov	_var02, arg01
2c084     01 05 02 F6 | 	mov	_var03, _var02
2c088                 | LR__4110
2c088     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c08c     5C 01 90 AD |  if_e	jmp	#LR__4129
2c090     00 00 0E F2 | 	cmp	_var01, #0 wz
2c094     02 07 02 56 |  if_ne	mov	_var04, _var03
2c098     01 04 06 51 |  if_ne	add	_var03, #1
2c09c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2c0a0     00 00 06 56 |  if_ne	mov	_var01, #0
2c0a4     01 07 C2 FA | 	rdbyte	_var04, _var02
2c0a8     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c0ac     D8 00 90 5D |  if_ne	jmp	#LR__4122
2c0b0     01 02 06 F1 | 	add	_var02, #1
2c0b4     01 07 C2 FA | 	rdbyte	_var04, _var02
2c0b8     01 02 86 F1 | 	sub	_var02, #1
2c0bc     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c0c0     18 00 90 AD |  if_e	jmp	#LR__4111
2c0c4     01 02 06 F1 | 	add	_var02, #1
2c0c8     01 09 C2 FA | 	rdbyte	_var05, _var02
2c0cc     01 02 86 F1 | 	sub	_var02, #1
2c0d0     04 0B 02 F6 | 	mov	_var06, _var05
2c0d4     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c0d8     10 00 90 5D |  if_ne	jmp	#LR__4112
2c0dc                 | LR__4111
2c0dc     01 0D 02 F6 | 	mov	_var07, _var02
2c0e0     01 0C 06 F1 | 	add	_var07, #1
2c0e4     06 03 02 F6 | 	mov	_var02, _var07
2c0e8     E0 00 90 FD | 	jmp	#LR__4126
2c0ec                 | LR__4112
2c0ec     01 02 06 F1 | 	add	_var02, #1
2c0f0     01 0D C2 FA | 	rdbyte	_var07, _var02
2c0f4     01 02 86 F1 | 	sub	_var02, #1
2c0f8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c0fc     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c100     84 00 90 5D |  if_ne	jmp	#LR__4121
2c104     02 02 06 F1 | 	add	_var02, #2
2c108     01 0D C2 FA | 	rdbyte	_var07, _var02
2c10c     02 02 86 F1 | 	sub	_var02, #2
2c110     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c114     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c118     18 00 90 AD |  if_e	jmp	#LR__4113
2c11c     02 02 06 F1 | 	add	_var02, #2
2c120     01 09 C2 FA | 	rdbyte	_var05, _var02
2c124     02 02 86 F1 | 	sub	_var02, #2
2c128     04 0B 02 F6 | 	mov	_var06, _var05
2c12c     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c130     54 00 90 5D |  if_ne	jmp	#LR__4120
2c134                 | LR__4113
2c134     02 02 06 F1 | 	add	_var02, #2
2c138     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2c13c     40 00 90 ED |  if_be	jmp	#LR__4119
2c140     02 0F 02 F6 | 	mov	_var08, _var03
2c144     01 0E 86 F1 | 	sub	_var08, #1
2c148                 | LR__4114
2c148     07 07 C2 FA | 	rdbyte	_var04, _var08
2c14c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c150     0C 00 90 5D |  if_ne	jmp	#LR__4115
2c154     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c158     01 0E 86 11 |  if_a	sub	_var08, #1
2c15c     E8 FF 9F 1D |  if_a	jmp	#LR__4114
2c160                 | LR__4115
2c160     97 0C 48 FB | 	callpa	#(@LR__4117-@LR__4116)>>2,fcache_load_ptr_
2c164                 | LR__4116
2c164     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c168     10 00 90 ED |  if_be	jmp	#LR__4118
2c16c     07 07 C2 FA | 	rdbyte	_var04, _var08
2c170     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c174     01 0E 86 51 |  if_ne	sub	_var08, #1
2c178     E8 FF 9F 5D |  if_ne	jmp	#LR__4116
2c17c                 | LR__4117
2c17c                 | LR__4118
2c17c     07 05 02 F6 | 	mov	_var03, _var08
2c180                 | LR__4119
2c180     01 00 06 F6 | 	mov	_var01, #1
2c184     44 00 90 FD | 	jmp	#LR__4126
2c188                 | LR__4120
2c188                 | LR__4121
2c188                 | LR__4122
2c188     97 18 48 FB | 	callpa	#(@LR__4124-@LR__4123)>>2,fcache_load_ptr_
2c18c                 | LR__4123
2c18c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c190     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2c194     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2c198     20 00 90 AD |  if_e	jmp	#LR__4125
2c19c     01 0B 02 F6 | 	mov	_var06, _var02
2c1a0     01 09 02 F6 | 	mov	_var05, _var02
2c1a4     01 08 06 F1 | 	add	_var05, #1
2c1a8     05 11 C2 FA | 	rdbyte	_var09, _var06
2c1ac     04 03 02 F6 | 	mov	_var02, _var05
2c1b0     02 11 42 FC | 	wrbyte	_var09, _var03
2c1b4     01 04 06 F1 | 	add	_var03, #1
2c1b8     D0 FF 9F FD | 	jmp	#LR__4123
2c1bc                 | LR__4124
2c1bc                 | LR__4125
2c1bc     01 07 C2 FA | 	rdbyte	_var04, _var02
2c1c0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c1c4     C0 FE 9F 5D |  if_ne	jmp	#LR__4110
2c1c8     01 00 06 F6 | 	mov	_var01, #1
2c1cc                 | LR__4126
2c1cc     97 0C 48 FB | 	callpa	#(@LR__4128-@LR__4127)>>2,fcache_load_ptr_
2c1d0                 | LR__4127
2c1d0     01 07 C2 FA | 	rdbyte	_var04, _var02
2c1d4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c1d8     01 0D 02 A6 |  if_e	mov	_var07, _var02
2c1dc     01 0C 06 A1 |  if_e	add	_var07, #1
2c1e0     06 03 02 A6 |  if_e	mov	_var02, _var07
2c1e4     E8 FF 9F AD |  if_e	jmp	#LR__4127
2c1e8                 | LR__4128
2c1e8     9C FE 9F FD | 	jmp	#LR__4110
2c1ec                 | LR__4129
2c1ec     02 01 48 FC | 	wrbyte	#0, _var03
2c1f0                 | __system___normalizeName_ret
2c1f0     2D 00 64 FD | 	ret
2c1f4                 | 
2c1f4                 | __system___strrev
2c1f4     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2c1f8     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2c1fc     09 03 02 F6 | 	mov	_var02, arg01
2c200     97 1A 48 FB | 	callpa	#(@LR__4132-@LR__4130)>>2,fcache_load_ptr_
2c204                 | LR__4130
2c204     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2c208     01 02 06 51 |  if_ne	add	_var02, #1
2c20c     F4 FF 9F 5D |  if_ne	jmp	#LR__4130
2c210     01 02 86 F1 | 	sub	_var02, #1
2c214                 | LR__4131
2c214     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2c218     1C 00 90 ED |  if_be	jmp	#LR__4133
2c21c     09 01 C2 FA | 	rdbyte	_var01, arg01
2c220     01 05 C2 FA | 	rdbyte	_var03, _var02
2c224     09 05 42 FC | 	wrbyte	_var03, arg01
2c228     01 01 42 FC | 	wrbyte	_var01, _var02
2c22c     01 12 06 F1 | 	add	arg01, #1
2c230     01 02 86 F1 | 	sub	_var02, #1
2c234     DC FF 9F FD | 	jmp	#LR__4131
2c238                 | LR__4132
2c238                 | LR__4133
2c238                 | __system___strrev_ret
2c238     2D 00 64 FD | 	ret
2c23c                 | 
2c23c                 | __system___fmtpad
2c23c     06 4A 05 F6 | 	mov	COUNT_, #6
2c240     A8 00 A0 FD | 	call	#pushregs_
2c244     09 27 02 F6 | 	mov	local01, arg01
2c248     0A 29 02 F6 | 	mov	local02, arg02
2c24c     0B 2B 02 F6 | 	mov	local03, arg03
2c250     14 13 EA F8 | 	getbyte	arg01, local02, #1
2c254     16 28 46 F0 | 	shr	local02, #22
2c258     03 28 0E F5 | 	and	local02, #3 wz
2c25c     00 2C 06 F6 | 	mov	local04, #0
2c260     01 28 06 A6 |  if_e	mov	local02, #1
2c264     0C 29 CA F7 | 	test	local02, arg04 wz
2c268     00 FA 05 A6 |  if_e	mov	result1, #0
2c26c     88 00 90 AD |  if_e	jmp	#LR__4143
2c270     09 2B C2 F2 | 	subr	local03, arg01
2c274     01 2A 56 F2 | 	cmps	local03, #1 wc
2c278     00 FA 05 C6 |  if_b	mov	result1, #0
2c27c     78 00 90 CD |  if_b	jmp	#LR__4143
2c280     03 28 0E F2 | 	cmp	local02, #3 wz
2c284     18 00 90 5D |  if_ne	jmp	#LR__4140
2c288     01 18 0E F2 | 	cmp	arg04, #1 wz
2c28c     6E 28 62 FD | 	wrz	local02
2c290     14 2B 02 F1 | 	add	local03, local02
2c294     15 2B 52 F6 | 	abs	local03, local03 wc
2c298     01 2A 46 F0 | 	shr	local03, #1
2c29c     15 2B 82 F6 | 	negc	local03, local03
2c2a0                 | LR__4140
2c2a0     01 2A 56 F2 | 	cmps	local03, #1 wc
2c2a4     4C 00 90 CD |  if_b	jmp	#LR__4142
2c2a8     15 2F 02 F6 | 	mov	local05, local03
2c2ac                 | LR__4141
2c2ac     13 29 02 F6 | 	mov	local02, local01
2c2b0     13 31 02 F6 | 	mov	local06, local01
2c2b4     13 28 46 F7 | 	zerox	local02, #19
2c2b8     14 30 46 F0 | 	shr	local06, #20
2c2bc     02 30 66 F0 | 	shl	local06, #2
2c2c0     ED 30 02 F1 | 	add	local06, __methods__
2c2c4     18 31 02 FB | 	rdlong	local06, local06
2c2c8     20 12 06 F6 | 	mov	arg01, #32
2c2cc     F2 2A 02 F6 | 	mov	local03, objptr
2c2d0     14 E5 01 F6 | 	mov	objptr, local02
2c2d4     2D 30 62 FD | 	call	local06
2c2d8     15 E5 01 F6 | 	mov	objptr, local03
2c2dc     FD 30 02 F6 | 	mov	local06, result1
2c2e0     00 30 56 F2 | 	cmps	local06, #0 wc
2c2e4     18 FB 01 C6 |  if_b	mov	result1, local06
2c2e8     0C 00 90 CD |  if_b	jmp	#LR__4143
2c2ec     18 2D 02 F1 | 	add	local04, local06
2c2f0     EE 2F 6E FB | 	djnz	local05, #LR__4141
2c2f4                 | LR__4142
2c2f4     16 FB 01 F6 | 	mov	result1, local04
2c2f8                 | LR__4143
2c2f8     A7 F0 03 F6 | 	mov	ptra, fp
2c2fc     B2 00 A0 FD | 	call	#popregs_
2c300                 | __system___fmtpad_ret
2c300     2D 00 64 FD | 	ret
2c304                 | 
2c304                 | __system___uitoa
2c304     04 4A 05 F6 | 	mov	COUNT_, #4
2c308     A8 00 A0 FD | 	call	#pushregs_
2c30c     09 27 02 F6 | 	mov	local01, arg01
2c310     00 1A 4E F2 | 	cmps	arg05, #0 wz
2c314     13 1B 02 F6 | 	mov	arg05, local01
2c318     00 28 06 F6 | 	mov	local02, #0
2c31c     37 2A 06 56 |  if_ne	mov	local03, #55
2c320     57 2A 06 A6 |  if_e	mov	local03, #87
2c324                 | LR__4150
2c324     0B 15 12 FD | 	qdiv	arg02, arg03
2c328     19 2C 62 FD | 	getqy	local04
2c32c     0B 15 12 FD | 	qdiv	arg02, arg03
2c330     0A 2C 16 F2 | 	cmp	local04, #10 wc
2c334     30 2C 06 C1 |  if_b	add	local04, #48
2c338     15 2D 02 31 |  if_ae	add	local04, local03
2c33c     0D 2D 42 FC | 	wrbyte	local04, arg05
2c340     01 1A 06 F1 | 	add	arg05, #1
2c344     01 28 06 F1 | 	add	local02, #1
2c348     18 14 62 FD | 	getqx	arg02
2c34c     00 14 0E F2 | 	cmp	arg02, #0 wz
2c350     D0 FF 9F 5D |  if_ne	jmp	#LR__4150
2c354     0C 29 12 F2 | 	cmp	local02, arg04 wc
2c358     C8 FF 9F CD |  if_b	jmp	#LR__4150
2c35c     0D 01 48 FC | 	wrbyte	#0, arg05
2c360     13 13 02 F6 | 	mov	arg01, local01
2c364     8C FE BF FD | 	call	#__system___strrev
2c368     14 FB 01 F6 | 	mov	result1, local02
2c36c     A7 F0 03 F6 | 	mov	ptra, fp
2c370     B2 00 A0 FD | 	call	#popregs_
2c374                 | __system___uitoa_ret
2c374     2D 00 64 FD | 	ret
2c378                 | 
2c378                 | __system__disassemble_0562
2c378     10 4A 05 F6 | 	mov	COUNT_, #16
2c37c     A8 00 A0 FD | 	call	#pushregs_
2c380     09 27 02 F6 | 	mov	local01, arg01
2c384     0A 29 02 F6 | 	mov	local02, arg02
2c388     0B 2B 02 F6 | 	mov	local03, arg03
2c38c     0C 2D 02 F6 | 	mov	local04, arg04
2c390     0D 2F 02 F6 | 	mov	local05, arg05
2c394     17 13 52 F6 | 	abs	arg01, local05 wc
2c398     1F 30 C6 C9 |  if_b	decod	local06, #31
2c39c     00 30 06 36 |  if_ae	mov	local06, #0
2c3a0     CC CF BF FD | 	call	#__system___float_fromuns
2c3a4     18 FB 61 F5 | 	xor	result1, local06
2c3a8     FD 32 02 F6 | 	mov	local07, result1
2c3ac     00 34 06 F6 | 	mov	local08, #0
2c3b0     13 13 02 F6 | 	mov	arg01, local01
2c3b4     00 14 06 F6 | 	mov	arg02, #0
2c3b8     01 16 06 F6 | 	mov	arg03, #1
2c3bc     E8 D7 BF FD | 	call	#__system___float_cmp
2c3c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3c4     00 36 06 A6 |  if_e	mov	local09, #0
2c3c8     14 01 68 AC |  if_e	wrlong	#0, local02
2c3cc     15 37 62 AC |  if_e	wrlong	local09, local03
2c3d0     8C 01 90 AD |  if_e	jmp	#LR__4172
2c3d4     13 13 02 F6 | 	mov	arg01, local01
2c3d8     BC DC BF FD | 	call	#__system____builtin_ilogb
2c3dc     FD 38 02 F6 | 	mov	local10, result1
2c3e0     0A 2E 0E F2 | 	cmp	local05, #10 wz
2c3e4     24 00 90 5D |  if_ne	jmp	#LR__4160
2c3e8     1C 37 02 F6 | 	mov	local09, local10
2c3ec     01 36 66 F0 | 	shl	local09, #1
2c3f0     1C 37 02 F1 | 	add	local09, local10
2c3f4     1B 39 52 F6 | 	abs	local10, local09 wc
2c3f8     0A 38 16 FD | 	qdiv	local10, #10
2c3fc     09 3A 06 F6 | 	mov	local11, #9
2c400     18 38 62 FD | 	getqx	local10
2c404     1C 39 82 F6 | 	negc	local10, local10
2c408     04 00 90 FD | 	jmp	#LR__4161
2c40c                 | LR__4160
2c40c     18 3A 06 F6 | 	mov	local11, #24
2c410                 | LR__4161
2c410                 | LR__4162
2c410     08 34 56 F2 | 	cmps	local08, #8 wc
2c414     01 34 06 F1 | 	add	local08, #1
2c418     60 00 90 3D |  if_ae	jmp	#LR__4163
2c41c     00 C0 1F FF 
2c420     00 12 06 F6 | 	mov	arg01, ##1065353216
2c424     19 15 02 F6 | 	mov	arg02, local07
2c428     1C 17 02 F6 | 	mov	arg03, local10
2c42c     4C E3 BF FD | 	call	#__system___float_pow_n
2c430     FD 14 02 F6 | 	mov	arg02, result1
2c434     13 13 02 F6 | 	mov	arg01, local01
2c438     3C D5 BF FD | 	call	#__system___float_div
2c43c     FD 3C 02 F6 | 	mov	local12, result1
2c440     1E 13 02 F6 | 	mov	arg01, local12
2c444     00 C0 1F FF 
2c448     00 14 06 F6 | 	mov	arg02, ##1065353216
2c44c     01 16 06 F6 | 	mov	arg03, #1
2c450     54 D7 BF FD | 	call	#__system___float_cmp
2c454     00 FA 55 F2 | 	cmps	result1, #0 wc
2c458     01 38 86 C1 |  if_b	sub	local10, #1
2c45c     B0 FF 9F CD |  if_b	jmp	#LR__4162
2c460     19 15 02 F6 | 	mov	arg02, local07
2c464     1E 13 02 F6 | 	mov	arg01, local12
2c468     01 16 66 F6 | 	neg	arg03, #1
2c46c     38 D7 BF FD | 	call	#__system___float_cmp
2c470     00 FA 55 F2 | 	cmps	result1, #0 wc
2c474     01 38 06 31 |  if_ae	add	local10, #1
2c478     94 FF 9F 3D |  if_ae	jmp	#LR__4162
2c47c                 | LR__4163
2c47c     1E 13 02 F6 | 	mov	arg01, local12
2c480     14 DC BF FD | 	call	#__system____builtin_ilogb
2c484     FD 3E 02 F6 | 	mov	local13, result1
2c488     1E 41 02 F6 | 	mov	local14, local12
2c48c     17 41 06 F4 | 	bitl	local14, #279
2c490     17 40 26 F4 | 	bith	local14, #23
2c494     1F 41 62 F0 | 	shl	local14, local13
2c498     02 2E 0E F2 | 	cmp	local05, #2 wz
2c49c     02 2C 66 A0 |  if_e	shl	local04, #2
2c4a0     00 42 06 F6 | 	mov	local15, #0
2c4a4     00 2C 56 F2 | 	cmps	local04, #0 wc
2c4a8     10 00 90 3D |  if_ae	jmp	#LR__4164
2c4ac     1C 2D C2 F2 | 	subr	local04, local10
2c4b0     00 2C 56 F2 | 	cmps	local04, #0 wc
2c4b4     A0 00 90 CD |  if_b	jmp	#LR__4171
2c4b8     04 00 90 FD | 	jmp	#LR__4165
2c4bc                 | LR__4164
2c4bc     01 2C 06 F1 | 	add	local04, #1
2c4c0                 | LR__4165
2c4c0     1D 2D 7A F3 | 	fles	local04, local11 wcz
2c4c4     01 44 06 F6 | 	mov	local16, #1
2c4c8     97 22 48 FB | 	callpa	#(@LR__4167-@LR__4166)>>2,fcache_load_ptr_
2c4cc                 | LR__4166
2c4cc     00 40 00 FF 
2c4d0     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2c4d4     38 00 90 3D |  if_ae	jmp	#LR__4168
2c4d8     01 2C 56 F2 | 	cmps	local04, #1 wc
2c4dc     01 2C 86 F1 | 	sub	local04, #1
2c4e0     2C 00 90 CD |  if_b	jmp	#LR__4168
2c4e4     17 43 02 FD | 	qmul	local15, local05
2c4e8     20 3F 02 F6 | 	mov	local13, local14
2c4ec     17 3E 46 F0 | 	shr	local13, #23
2c4f0     17 41 06 F4 | 	bitl	local14, #279
2c4f4     18 42 62 FD | 	getqx	local15
2c4f8     17 45 02 FD | 	qmul	local16, local05
2c4fc     18 44 62 FD | 	getqx	local16
2c500     17 41 02 FD | 	qmul	local14, local05
2c504     1F 43 02 F1 | 	add	local15, local13
2c508     18 40 62 FD | 	getqx	local14
2c50c     BC FF 9F FD | 	jmp	#LR__4166
2c510                 | LR__4167
2c510                 | LR__4168
2c510     17 37 02 F6 | 	mov	local09, local05
2c514     17 36 66 F0 | 	shl	local09, #23
2c518     1B 3F 52 F6 | 	abs	local13, local09 wc
2c51c     01 3E 46 F0 | 	shr	local13, #1
2c520     1F 3F 82 F6 | 	negc	local13, local13
2c524     1F 41 1A F2 | 	cmp	local14, local13 wcz
2c528     20 00 90 1D |  if_a	jmp	#LR__4169
2c52c     17 2E 66 F0 | 	shl	local05, #23
2c530     17 3F 52 F6 | 	abs	local13, local05 wc
2c534     01 3E 46 F0 | 	shr	local13, #1
2c538     1F 3F 82 F6 | 	negc	local13, local13
2c53c     1F 41 0A F2 | 	cmp	local14, local13 wz
2c540     14 00 90 5D |  if_ne	jmp	#LR__4170
2c544     01 42 CE F7 | 	test	local15, #1 wz
2c548     0C 00 90 AD |  if_e	jmp	#LR__4170
2c54c                 | LR__4169
2c54c     01 42 06 F1 | 	add	local15, #1
2c550     22 43 0A F2 | 	cmp	local15, local16 wz
2c554     01 38 06 A1 |  if_e	add	local10, #1
2c558                 | LR__4170
2c558                 | LR__4171
2c558     14 43 62 FC | 	wrlong	local15, local02
2c55c     15 39 62 FC | 	wrlong	local10, local03
2c560                 | LR__4172
2c560     A7 F0 03 F6 | 	mov	ptra, fp
2c564     B2 00 A0 FD | 	call	#popregs_
2c568                 | __system__disassemble_0562_ret
2c568     2D 00 64 FD | 	ret
2c56c                 | 
2c56c                 | __system__emitsign_0564
2c56c     00 FA 05 F6 | 	mov	result1, #0
2c570     00 14 0E F2 | 	cmp	arg02, #0 wz
2c574     09 01 02 56 |  if_ne	mov	_var01, arg01
2c578     01 12 06 51 |  if_ne	add	arg01, #1
2c57c     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2c580     01 FA 05 56 |  if_ne	mov	result1, #1
2c584     00 16 0E F2 | 	cmp	arg03, #0 wz
2c588     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2c58c     01 12 06 51 |  if_ne	add	arg01, #1
2c590     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2c594     02 FA 05 51 |  if_ne	add	result1, #2
2c598                 | __system__emitsign_0564_ret
2c598     2D 00 64 FD | 	ret
2c59c                 | 
2c59c                 | __system___getiolock_0602
2c59c     01 4A 05 F6 | 	mov	COUNT_, #1
2c5a0     A8 00 A0 FD | 	call	#pushregs_
2c5a4     A0 F8 BF FD | 	call	#__system____getftab
2c5a8     FD 26 0A F6 | 	mov	local01, result1 wz
2c5ac     10 00 90 AD |  if_e	jmp	#LR__4180
2c5b0     08 26 06 F1 | 	add	local01, #8
2c5b4     13 FB 09 FB | 	rdlong	result1, local01 wz
2c5b8     08 26 86 F1 | 	sub	local01, #8
2c5bc     18 00 90 5D |  if_ne	jmp	#LR__4181
2c5c0                 | LR__4180
2c5c0     01 00 00 FF 
2c5c4     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2c5c8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2c5cc     01 00 00 FF 
2c5d0     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2c5d4     08 00 90 FD | 	jmp	#LR__4182
2c5d8                 | LR__4181
2c5d8     0C 26 06 F1 | 	add	local01, #12
2c5dc     13 FB 01 F6 | 	mov	result1, local01
2c5e0                 | LR__4182
2c5e0     A7 F0 03 F6 | 	mov	ptra, fp
2c5e4     B2 00 A0 FD | 	call	#popregs_
2c5e8                 | __system___getiolock_0602_ret
2c5e8     2D 00 64 FD | 	ret
2c5ec                 | 
2c5ec                 | __system___gettxfunc
2c5ec     01 4A 05 F6 | 	mov	COUNT_, #1
2c5f0     A8 00 A0 FD | 	call	#pushregs_
2c5f4     50 F8 BF FD | 	call	#__system____getftab
2c5f8     FD 26 0A F6 | 	mov	local01, result1 wz
2c5fc     10 00 90 AD |  if_e	jmp	#LR__4190
2c600     08 26 06 F1 | 	add	local01, #8
2c604     13 15 0A FB | 	rdlong	arg02, local01 wz
2c608     08 26 86 F1 | 	sub	local01, #8
2c60c     08 00 90 5D |  if_ne	jmp	#LR__4191
2c610                 | LR__4190
2c610     00 FA 05 F6 | 	mov	result1, #0
2c614     0C 00 90 FD | 	jmp	#LR__4192
2c618                 | LR__4191
2c618     00 28 05 FF 
2c61c     00 26 46 F5 | 	or	local01, ##173015040
2c620     13 FB 01 F6 | 	mov	result1, local01
2c624                 | LR__4192
2c624     A7 F0 03 F6 | 	mov	ptra, fp
2c628     B2 00 A0 FD | 	call	#popregs_
2c62c                 | __system___gettxfunc_ret
2c62c     2D 00 64 FD | 	ret
2c630                 | 
2c630                 | __system___getrxfunc
2c630     01 4A 05 F6 | 	mov	COUNT_, #1
2c634     A8 00 A0 FD | 	call	#pushregs_
2c638     0C F8 BF FD | 	call	#__system____getftab
2c63c     FD 26 0A F6 | 	mov	local01, result1 wz
2c640     10 00 90 AD |  if_e	jmp	#LR__4200
2c644     08 26 06 F1 | 	add	local01, #8
2c648     13 15 0A FB | 	rdlong	arg02, local01 wz
2c64c     08 26 86 F1 | 	sub	local01, #8
2c650     08 00 90 5D |  if_ne	jmp	#LR__4201
2c654                 | LR__4200
2c654     00 FA 05 F6 | 	mov	result1, #0
2c658     0C 00 90 FD | 	jmp	#LR__4202
2c65c                 | LR__4201
2c65c     00 30 05 FF 
2c660     00 26 46 F5 | 	or	local01, ##174063616
2c664     13 FB 01 F6 | 	mov	result1, local01
2c668                 | LR__4202
2c668     A7 F0 03 F6 | 	mov	ptra, fp
2c66c     B2 00 A0 FD | 	call	#popregs_
2c670                 | __system___getrxfunc_ret
2c670     2D 00 64 FD | 	ret
2c674                 | 
2c674                 | __system____ScanForChar
2c674     09 01 02 F6 | 	mov	_var01, arg01
2c678     09 03 02 F6 | 	mov	_var02, arg01
2c67c     97 06 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2c680                 | LR__4210
2c680     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2c684     01 02 06 51 |  if_ne	add	_var02, #1
2c688     F4 FF 9F 5D |  if_ne	jmp	#LR__4210
2c68c                 | LR__4211
2c68c     09 03 82 F1 | 	sub	_var02, arg01
2c690     01 FB 01 F6 | 	mov	result1, _var02
2c694     FD 12 0A F6 | 	mov	arg01, result1 wz
2c698     00 FA 05 A6 |  if_e	mov	result1, #0
2c69c     B8 00 90 AD |  if_e	jmp	#LR__4218
2c6a0     0A 05 02 F6 | 	mov	_var03, arg02
2c6a4     07 04 4E F7 | 	zerox	_var03, #7 wz
2c6a8     00 FA 05 A6 |  if_e	mov	result1, #0
2c6ac     A8 00 90 AD |  if_e	jmp	#LR__4218
2c6b0     01 16 16 F2 | 	cmp	arg03, #1 wc
2c6b4     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2c6b8     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2c6bc     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2c6c0     94 00 90 4D |  if_c_and_nz	jmp	#LR__4218
2c6c4     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2c6c8     10 00 90 ED |  if_be	jmp	#LR__4212
2c6cc     00 18 0E F2 | 	cmp	arg04, #0 wz
2c6d0     00 FA 05 A6 |  if_e	mov	result1, #0
2c6d4     80 00 90 AD |  if_e	jmp	#LR__4218
2c6d8     09 17 02 F6 | 	mov	arg03, arg01
2c6dc                 | LR__4212
2c6dc     01 16 86 F1 | 	sub	arg03, #1
2c6e0     00 18 0E F2 | 	cmp	arg04, #0 wz
2c6e4     38 00 90 5D |  if_ne	jmp	#LR__4214
2c6e8     0B 07 02 F6 | 	mov	_var04, arg03
2c6ec     09 09 02 F6 | 	mov	_var05, arg01
2c6f0                 | LR__4213
2c6f0     04 07 12 F2 | 	cmp	_var04, _var05 wc
2c6f4     5C 00 90 3D |  if_ae	jmp	#LR__4217
2c6f8     03 05 02 F6 | 	mov	_var03, _var04
2c6fc     00 05 02 F1 | 	add	_var03, _var01
2c700     02 05 C2 FA | 	rdbyte	_var03, _var03
2c704     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2c708     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2c70c     01 06 06 A1 |  if_e	add	_var04, #1
2c710     03 FB 01 A6 |  if_e	mov	result1, _var04
2c714     40 00 90 AD |  if_e	jmp	#LR__4218
2c718     01 06 06 F1 | 	add	_var04, #1
2c71c     D0 FF 9F FD | 	jmp	#LR__4213
2c720                 | LR__4214
2c720     0B 07 02 F6 | 	mov	_var04, arg03
2c724                 | LR__4215
2c724     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2c728     28 00 90 1D |  if_a	jmp	#LR__4216
2c72c     03 09 02 F6 | 	mov	_var05, _var04
2c730     00 09 02 F1 | 	add	_var05, _var01
2c734     04 05 C2 FA | 	rdbyte	_var03, _var05
2c738     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2c73c     04 05 0A F2 | 	cmp	_var03, _var05 wz
2c740     01 06 06 A1 |  if_e	add	_var04, #1
2c744     03 FB 01 A6 |  if_e	mov	result1, _var04
2c748     0C 00 90 AD |  if_e	jmp	#LR__4218
2c74c     01 06 86 F1 | 	sub	_var04, #1
2c750     D0 FF 9F FD | 	jmp	#LR__4215
2c754                 | LR__4216
2c754                 | LR__4217
2c754     00 FA 05 F6 | 	mov	result1, #0
2c758                 | LR__4218
2c758                 | __system____ScanForChar_ret
2c758     2D 00 64 FD | 	ret
2c75c                 | 
2c75c                 | __system___basic_dir
2c75c     05 4A 05 F6 | 	mov	COUNT_, #5
2c760     A8 00 A0 FD | 	call	#pushregs_
2c764     4C F0 07 F1 | 	add	ptra, #76
2c768     04 4E 05 F1 | 	add	fp, #4
2c76c     A7 12 62 FC | 	wrlong	arg01, fp
2c770     04 4E 05 F1 | 	add	fp, #4
2c774     A7 14 62 FC | 	wrlong	arg02, fp
2c778     04 4E 85 F1 | 	sub	fp, #4
2c77c     A7 14 0A FB | 	rdlong	arg02, fp wz
2c780     04 4E 85 F1 | 	sub	fp, #4
2c784     04 4E 05 51 |  if_ne	add	fp, #4
2c788     A7 26 02 5B |  if_ne	rdlong	local01, fp
2c78c     04 4E 85 51 |  if_ne	sub	fp, #4
2c790     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2c794     70 00 90 AD |  if_e	jmp	#LR__4220
2c798     03 00 00 FF 
2c79c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c7a0     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c7a4     03 00 00 FF 
2c7a8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c7ac     03 00 00 5F 
2c7b0     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2c7b4     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2c7b8     03 00 00 5F 
2c7bc     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2c7c0     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2c7c4     B2 01 00 FF 
2c7c8     74 12 06 F6 | 	mov	arg01, ##@LR__5388
2c7cc     E0 E8 BF FD | 	call	#__system__opendir
2c7d0     03 00 00 FF 
2c7d4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c7d8     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2c7dc     08 4E 05 F1 | 	add	fp, #8
2c7e0     A7 28 02 FB | 	rdlong	local02, fp
2c7e4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2c7e8     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2c7ec     04 4E 85 F1 | 	sub	fp, #4
2c7f0     A7 28 02 FB | 	rdlong	local02, fp
2c7f4     04 4E 85 F1 | 	sub	fp, #4
2c7f8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2c7fc     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2c800     03 00 00 FF 
2c804     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2c808                 | LR__4220
2c808     03 00 00 FF 
2c80c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c810     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c814     03 00 00 FF 
2c818     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c81c     B2 01 00 AF 
2c820     76 FA 05 A6 |  if_e	mov	result1, ##@LR__5389
2c824     84 02 90 AD |  if_e	jmp	#LR__4233
2c828                 | LR__4221
2c828     03 00 00 FF 
2c82c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c830     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2c834     03 00 00 FF 
2c838     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c83c     D0 E9 BF FD | 	call	#__system__readdir
2c840     0C 4E 05 F1 | 	add	fp, #12
2c844     A7 FA 61 FC | 	wrlong	result1, fp
2c848     0C 4E 85 F1 | 	sub	fp, #12
2c84c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c850     38 00 90 5D |  if_ne	jmp	#LR__4222
2c854     03 00 00 FF 
2c858     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c85c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2c860     03 00 00 FF 
2c864     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c868     30 E9 BF FD | 	call	#__system__closedir
2c86c     03 00 00 FF 
2c870     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c874     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2c878     03 00 00 FF 
2c87c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c880     B2 01 00 FF 
2c884     78 FA 05 F6 | 	mov	result1, ##@LR__5390
2c888     20 02 90 FD | 	jmp	#LR__4233
2c88c                 | LR__4222
2c88c     0C 4E 05 F1 | 	add	fp, #12
2c890     A7 12 02 FB | 	rdlong	arg01, fp
2c894     0C 4E 85 F1 | 	sub	fp, #12
2c898     03 00 00 FF 
2c89c     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2c8a0     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2c8a4     03 00 00 FF 
2c8a8     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2c8ac     10 09 B0 FD | 	call	#__system___pat_match
2c8b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8b4     70 FF 9F AD |  if_e	jmp	#LR__4221
2c8b8     03 00 00 FF 
2c8bc     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2c8c0     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c8c4     03 00 00 FF 
2c8c8     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2c8cc     78 01 90 AD |  if_e	jmp	#LR__4229
2c8d0     0C 4E 05 F1 | 	add	fp, #12
2c8d4     A7 12 02 FB | 	rdlong	arg01, fp
2c8d8     04 4E 05 F1 | 	add	fp, #4
2c8dc     A7 14 02 F6 | 	mov	arg02, fp
2c8e0     10 4E 85 F1 | 	sub	fp, #16
2c8e4     2C F2 BF FD | 	call	#__system__stat
2c8e8     40 4E 05 F1 | 	add	fp, #64
2c8ec     A7 FA 61 FC | 	wrlong	result1, fp
2c8f0     40 4E 85 F1 | 	sub	fp, #64
2c8f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8f8     B2 01 00 5F 
2c8fc     7A FA 05 56 |  if_ne	mov	result1, ##@LR__5391
2c900     A8 01 90 5D |  if_ne	jmp	#LR__4233
2c904     18 4E 05 F1 | 	add	fp, #24
2c908     A7 28 02 FB | 	rdlong	local02, fp
2c90c     78 00 00 FF 
2c910     00 28 06 F5 | 	and	local02, ##61440
2c914     2C 4E 05 F1 | 	add	fp, #44
2c918     A7 28 62 FC | 	wrlong	local02, fp
2c91c     38 4E 85 F1 | 	sub	fp, #56
2c920     A7 28 02 FB | 	rdlong	local02, fp
2c924     0C 4E 85 F1 | 	sub	fp, #12
2c928     14 29 C2 FA | 	rdbyte	local02, local02
2c92c     2E 28 0E F2 | 	cmp	local02, #46 wz
2c930     08 4E 05 A1 |  if_e	add	fp, #8
2c934     A7 04 68 AC |  if_e	wrlong	#2, fp
2c938     08 4E C5 F3 | 	sumz	fp, #8
2c93c     A7 00 68 5C |  if_ne	wrlong	#0, fp
2c940     08 4E 85 51 |  if_ne	sub	fp, #8
2c944     44 4E 05 F1 | 	add	fp, #68
2c948     A7 28 02 FB | 	rdlong	local02, fp
2c94c     44 4E 85 F1 | 	sub	fp, #68
2c950     08 00 00 FF 
2c954     00 28 0E F2 | 	cmp	local02, ##4096 wz
2c958     18 00 90 5D |  if_ne	jmp	#LR__4223
2c95c     08 4E 05 F1 | 	add	fp, #8
2c960     A7 28 02 FB | 	rdlong	local02, fp
2c964     10 28 46 F5 | 	or	local02, #16
2c968     A7 28 62 FC | 	wrlong	local02, fp
2c96c     08 4E 85 F1 | 	sub	fp, #8
2c970     AC 00 90 FD | 	jmp	#LR__4228
2c974                 | LR__4223
2c974     44 4E 05 F1 | 	add	fp, #68
2c978     A7 28 02 FB | 	rdlong	local02, fp
2c97c     44 4E 85 F1 | 	sub	fp, #68
2c980     10 00 00 FF 
2c984     00 28 0E F2 | 	cmp	local02, ##8192 wz
2c988     44 4E 05 51 |  if_ne	add	fp, #68
2c98c     A7 26 02 5B |  if_ne	rdlong	local01, fp
2c990     44 4E 85 51 |  if_ne	sub	fp, #68
2c994     18 00 00 5F 
2c998     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2c99c     44 4E 05 51 |  if_ne	add	fp, #68
2c9a0     13 2B 02 56 |  if_ne	mov	local03, local01
2c9a4     44 4E 85 51 |  if_ne	sub	fp, #68
2c9a8     20 00 00 5F 
2c9ac     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2c9b0     18 00 90 5D |  if_ne	jmp	#LR__4224
2c9b4     08 4E 05 F1 | 	add	fp, #8
2c9b8     A7 28 02 FB | 	rdlong	local02, fp
2c9bc     04 28 46 F5 | 	or	local02, #4
2c9c0     A7 28 62 FC | 	wrlong	local02, fp
2c9c4     08 4E 85 F1 | 	sub	fp, #8
2c9c8     54 00 90 FD | 	jmp	#LR__4227
2c9cc                 | LR__4224
2c9cc     18 4E 05 F1 | 	add	fp, #24
2c9d0     A7 28 02 FB | 	rdlong	local02, fp
2c9d4     18 4E 85 F1 | 	sub	fp, #24
2c9d8     92 28 CE F7 | 	test	local02, #146 wz
2c9dc     18 00 90 5D |  if_ne	jmp	#LR__4225
2c9e0     08 4E 05 F1 | 	add	fp, #8
2c9e4     A7 28 02 FB | 	rdlong	local02, fp
2c9e8     01 28 46 F5 | 	or	local02, #1
2c9ec     A7 28 62 FC | 	wrlong	local02, fp
2c9f0     08 4E 85 F1 | 	sub	fp, #8
2c9f4     28 00 90 FD | 	jmp	#LR__4226
2c9f8                 | LR__4225
2c9f8     44 4E 05 F1 | 	add	fp, #68
2c9fc     A7 2C 02 FB | 	rdlong	local04, fp
2ca00     44 4E 85 F1 | 	sub	fp, #68
2ca04     08 00 00 FF 
2ca08     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2ca0c     08 4E 05 51 |  if_ne	add	fp, #8
2ca10     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2ca14     20 2C 46 55 |  if_ne	or	local04, #32
2ca18     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2ca1c     08 4E 85 51 |  if_ne	sub	fp, #8
2ca20                 | LR__4226
2ca20                 | LR__4227
2ca20                 | LR__4228
2ca20     08 4E 05 F1 | 	add	fp, #8
2ca24     A7 2C 02 FB | 	rdlong	local04, fp
2ca28     08 4E 85 F1 | 	sub	fp, #8
2ca2c     03 00 00 FF 
2ca30     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2ca34     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2ca38     03 00 00 FF 
2ca3c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2ca40     13 2D CA F7 | 	test	local04, local01 wz
2ca44     E0 FD 9F AD |  if_e	jmp	#LR__4221
2ca48                 | LR__4229
2ca48     0C 4E 05 F1 | 	add	fp, #12
2ca4c     A7 12 02 FB | 	rdlong	arg01, fp
2ca50     0C 4E 85 F1 | 	sub	fp, #12
2ca54     09 2F 02 F6 | 	mov	local05, arg01
2ca58     97 06 48 FB | 	callpa	#(@LR__4231-@LR__4230)>>2,fcache_load_ptr_
2ca5c                 | LR__4230
2ca5c     17 FB C9 FA | 	rdbyte	result1, local05 wz
2ca60     01 2E 06 51 |  if_ne	add	local05, #1
2ca64     F4 FF 9F 5D |  if_ne	jmp	#LR__4230
2ca68                 | LR__4231
2ca68     17 13 C2 F2 | 	subr	arg01, local05
2ca6c     01 12 06 F1 | 	add	arg01, #1
2ca70     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2ca74     48 4E 05 F1 | 	add	fp, #72
2ca78     A7 FA 61 FC | 	wrlong	result1, fp
2ca7c     48 4E 85 F1 | 	sub	fp, #72
2ca80     00 FA 0D F2 | 	cmp	result1, #0 wz
2ca84     18 00 90 AD |  if_e	jmp	#LR__4232
2ca88     48 4E 05 F1 | 	add	fp, #72
2ca8c     A7 12 02 FB | 	rdlong	arg01, fp
2ca90     3C 4E 85 F1 | 	sub	fp, #60
2ca94     A7 14 02 FB | 	rdlong	arg02, fp
2ca98     0C 4E 85 F1 | 	sub	fp, #12
2ca9c     0C 9E BF FD | 	call	#__system____builtin_strcpy
2caa0                 | LR__4232
2caa0     48 4E 05 F1 | 	add	fp, #72
2caa4     A7 FA 01 FB | 	rdlong	result1, fp
2caa8     48 4E 85 F1 | 	sub	fp, #72
2caac                 | LR__4233
2caac     A7 F0 03 F6 | 	mov	ptra, fp
2cab0     B2 00 A0 FD | 	call	#popregs_
2cab4                 | __system___basic_dir_ret
2cab4     2D 00 64 FD | 	ret
2cab8                 | 
2cab8                 | __system__pack_0677
2cab8     09 01 02 F6 | 	mov	_var01, arg01
2cabc     7F 16 06 F1 | 	add	arg03, #127
2cac0     04 18 CE F7 | 	test	arg04, #4 wz
2cac4     10 00 90 AD |  if_e	jmp	#LR__4240
2cac8     00 00 0E F2 | 	cmp	_var01, #0 wz
2cacc     16 00 C6 A9 |  if_e	decod	_var01, #22
2cad0     F7 00 26 F4 | 	bith	_var01, #247
2cad4     B4 00 90 FD | 	jmp	#LR__4249
2cad8                 | LR__4240
2cad8     02 18 CE F7 | 	test	arg04, #2 wz
2cadc     00 C0 3F 5F 
2cae0     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2cae4     00 14 06 56 |  if_ne	mov	arg02, #0
2cae8     A0 00 90 5D |  if_ne	jmp	#LR__4248
2caec     08 18 CE F7 | 	test	arg04, #8 wz
2caf0     00 00 06 56 |  if_ne	mov	_var01, #0
2caf4     94 00 90 5D |  if_ne	jmp	#LR__4247
2caf8     FF 16 56 F2 | 	cmps	arg03, #255 wc
2cafc     00 C0 3F 3F 
2cb00     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2cb04     00 14 06 36 |  if_ae	mov	arg02, #0
2cb08     80 00 90 3D |  if_ae	jmp	#LR__4246
2cb0c     01 16 56 F2 | 	cmps	arg03, #1 wc
2cb10     6C 00 90 3D |  if_ae	jmp	#LR__4244
2cb14     01 14 46 F0 | 	shr	arg02, #1
2cb18     00 03 02 F6 | 	mov	_var02, _var01
2cb1c     01 02 06 F5 | 	and	_var02, #1
2cb20     1F 02 66 F0 | 	shl	_var02, #31
2cb24     01 15 42 F5 | 	or	arg02, _var02
2cb28     01 00 46 F0 | 	shr	_var01, #1
2cb2c     97 1E 48 FB | 	callpa	#(@LR__4242-@LR__4241)>>2,fcache_load_ptr_
2cb30                 | LR__4241
2cb30     00 16 56 F2 | 	cmps	arg03, #0 wc
2cb34     34 00 90 3D |  if_ae	jmp	#LR__4243
2cb38     00 00 0E F2 | 	cmp	_var01, #0 wz
2cb3c     2C 00 90 AD |  if_e	jmp	#LR__4243
2cb40     0A 13 02 F6 | 	mov	arg01, arg02
2cb44     01 12 06 F5 | 	and	arg01, #1
2cb48     01 16 06 F1 | 	add	arg03, #1
2cb4c     01 14 46 F0 | 	shr	arg02, #1
2cb50     00 03 02 F6 | 	mov	_var02, _var01
2cb54     01 02 06 F5 | 	and	_var02, #1
2cb58     1F 02 66 F0 | 	shl	_var02, #31
2cb5c     01 15 42 F5 | 	or	arg02, _var02
2cb60     09 15 42 F5 | 	or	arg02, arg01
2cb64     01 00 46 F0 | 	shr	_var01, #1
2cb68     C4 FF 9F FD | 	jmp	#LR__4241
2cb6c                 | LR__4242
2cb6c                 | LR__4243
2cb6c     00 16 56 F2 | 	cmps	arg03, #0 wc
2cb70     18 00 90 3D |  if_ae	jmp	#LR__4245
2cb74     00 14 0E F2 | 	cmp	arg02, #0 wz
2cb78     6F 14 62 FD | 	wrnz	arg02
2cb7c     0C 00 90 FD | 	jmp	#LR__4245
2cb80                 | LR__4244
2cb80     17 01 06 F4 | 	bitl	_var01, #279
2cb84     17 16 66 F0 | 	shl	arg03, #23
2cb88     0B 01 42 F5 | 	or	_var01, arg03
2cb8c                 | LR__4245
2cb8c                 | LR__4246
2cb8c                 | LR__4247
2cb8c                 | LR__4248
2cb8c                 | LR__4249
2cb8c     01 00 CE F7 | 	test	_var01, #1 wz
2cb90     01 14 46 55 |  if_ne	or	arg02, #1
2cb94     0A 17 02 F6 | 	mov	arg03, arg02
2cb98     00 02 06 F6 | 	mov	_var02, #0
2cb9c     FF FF 3F FF 
2cba0     FF 15 06 F1 | 	add	arg02, ##2147483647
2cba4     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2cba8     01 02 06 C6 |  if_b	mov	_var02, #1
2cbac     01 01 02 F1 | 	add	_var01, _var02
2cbb0     01 18 CE F7 | 	test	arg04, #1 wz
2cbb4     1F 00 26 54 |  if_ne	bith	_var01, #31
2cbb8     00 FB 01 F6 | 	mov	result1, _var01
2cbbc                 | __system__pack_0677_ret
2cbbc     2D 00 64 FD | 	ret
2cbc0                 | 
2cbc0                 | __system___rxtxioctl_0767
2cbc0     00 15 0E F2 | 	cmp	arg02, #256 wz
2cbc4     0C 00 90 AD |  if_e	jmp	#LR__4250
2cbc8     01 15 0E F2 | 	cmp	arg02, #257 wz
2cbcc     1C 00 90 AD |  if_e	jmp	#LR__4251
2cbd0     30 00 90 FD | 	jmp	#LR__4252
2cbd4                 | LR__4250
2cbd4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2cbd8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2cbdc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2cbe0     0B FB 61 FC | 	wrlong	result1, arg03
2cbe4     00 FA 05 F6 | 	mov	result1, #0
2cbe8     28 00 90 FD | 	jmp	#LR__4253
2cbec                 | LR__4251
2cbec     0B 13 02 FB | 	rdlong	arg01, arg03
2cbf0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2cbf4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cbf8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2cbfc     00 FA 05 F6 | 	mov	result1, #0
2cc00     10 00 90 FD | 	jmp	#LR__4253
2cc04                 | LR__4252
2cc04     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cc08     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2cc0c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cc10     01 FA 65 F6 | 	neg	result1, #1
2cc14                 | LR__4253
2cc14                 | __system___rxtxioctl_0767_ret
2cc14     2D 00 64 FD | 	ret
2cc18                 | 
2cc18                 | __system____dummy_flush_0768
2cc18     00 FA 05 F6 | 	mov	result1, #0
2cc1c                 | __system____dummy_flush_0768_ret
2cc1c     2D 00 64 FD | 	ret
2cc20                 | 
2cc20                 | __system___vfswrite
2cc20     09 4A 05 F6 | 	mov	COUNT_, #9
2cc24     A8 00 A0 FD | 	call	#pushregs_
2cc28     09 27 02 F6 | 	mov	local01, arg01
2cc2c     0A 29 02 F6 | 	mov	local02, arg02
2cc30     0B 2B 02 F6 | 	mov	local03, arg03
2cc34     14 2D 02 F6 | 	mov	local04, local02
2cc38     08 26 06 F1 | 	add	local01, #8
2cc3c     13 13 02 FB | 	rdlong	arg01, local01
2cc40     08 26 86 F1 | 	sub	local01, #8
2cc44     02 12 CE F7 | 	test	arg01, #2 wz
2cc48     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cc4c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cc50     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cc54     01 FA 65 A6 |  if_e	neg	result1, #1
2cc58     80 01 90 AD |  if_e	jmp	#LR__4266
2cc5c     08 26 06 F1 | 	add	local01, #8
2cc60     13 FB 01 FB | 	rdlong	result1, local01
2cc64     08 26 86 F1 | 	sub	local01, #8
2cc68     40 FA CD F7 | 	test	result1, #64 wz
2cc6c     68 00 90 AD |  if_e	jmp	#LR__4261
2cc70     08 26 06 F1 | 	add	local01, #8
2cc74     13 15 02 FB | 	rdlong	arg02, local01
2cc78     08 26 86 F1 | 	sub	local01, #8
2cc7c     80 14 CE F7 | 	test	arg02, #128 wz
2cc80     54 00 90 AD |  if_e	jmp	#LR__4260
2cc84     30 26 06 F1 | 	add	local01, #48
2cc88     13 2F 02 FB | 	rdlong	local05, local01
2cc8c     17 31 02 F6 | 	mov	local06, local05
2cc90     30 26 86 F1 | 	sub	local01, #48
2cc94     13 30 46 F7 | 	zerox	local06, #19
2cc98     14 2E 46 F0 | 	shr	local05, #20
2cc9c     02 2E 66 F0 | 	shl	local05, #2
2cca0     ED 2E 02 F1 | 	add	local05, __methods__
2cca4     17 2F 02 FB | 	rdlong	local05, local05
2cca8     13 13 02 F6 | 	mov	arg01, local01
2ccac     00 14 06 F6 | 	mov	arg02, #0
2ccb0     02 16 06 F6 | 	mov	arg03, #2
2ccb4     F2 32 02 F6 | 	mov	local07, objptr
2ccb8     18 E5 01 F6 | 	mov	objptr, local06
2ccbc     2D 2E 62 FD | 	call	local05
2ccc0     19 E5 01 F6 | 	mov	objptr, local07
2ccc4     08 26 06 F1 | 	add	local01, #8
2ccc8     13 33 02 FB | 	rdlong	local07, local01
2cccc     80 32 26 F5 | 	andn	local07, #128
2ccd0     13 33 62 FC | 	wrlong	local07, local01
2ccd4     08 26 86 F1 | 	sub	local01, #8
2ccd8                 | LR__4260
2ccd8                 | LR__4261
2ccd8     18 26 06 F1 | 	add	local01, #24
2ccdc     13 33 0A FB | 	rdlong	local07, local01 wz
2cce0     18 26 86 F1 | 	sub	local01, #24
2cce4     80 00 90 AD |  if_e	jmp	#LR__4263
2cce8     18 26 06 F1 | 	add	local01, #24
2ccec     13 2F 02 FB | 	rdlong	local05, local01
2ccf0     17 31 02 F6 | 	mov	local06, local05
2ccf4     18 26 86 F1 | 	sub	local01, #24
2ccf8     13 30 46 F7 | 	zerox	local06, #19
2ccfc     14 2E 46 F0 | 	shr	local05, #20
2cd00     02 2E 66 F0 | 	shl	local05, #2
2cd04     ED 2E 02 F1 | 	add	local05, __methods__
2cd08     17 2F 02 FB | 	rdlong	local05, local05
2cd0c     14 15 02 F6 | 	mov	arg02, local02
2cd10     15 17 02 F6 | 	mov	arg03, local03
2cd14     13 13 02 F6 | 	mov	arg01, local01
2cd18     F2 32 02 F6 | 	mov	local07, objptr
2cd1c     18 E5 01 F6 | 	mov	objptr, local06
2cd20     2D 2E 62 FD | 	call	local05
2cd24     19 E5 01 F6 | 	mov	objptr, local07
2cd28     FD 34 02 F6 | 	mov	local08, result1
2cd2c     00 34 56 F2 | 	cmps	local08, #0 wc
2cd30     2C 00 90 3D |  if_ae	jmp	#LR__4262
2cd34     08 26 06 F1 | 	add	local01, #8
2cd38     13 33 02 FB | 	rdlong	local07, local01
2cd3c     20 32 46 F5 | 	or	local07, #32
2cd40     13 33 62 FC | 	wrlong	local07, local01
2cd44     00 34 4E F2 | 	cmps	local08, #0 wz
2cd48     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cd4c     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2cd50     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cd54     01 FA 65 56 |  if_ne	neg	result1, #1
2cd58     00 FA 05 A6 |  if_e	mov	result1, #0
2cd5c     7C 00 90 FD | 	jmp	#LR__4266
2cd60                 | LR__4262
2cd60     1A FB 01 F6 | 	mov	result1, local08
2cd64     74 00 90 FD | 	jmp	#LR__4266
2cd68                 | LR__4263
2cd68     1C 26 06 F1 | 	add	local01, #28
2cd6c     13 37 0A FB | 	rdlong	local09, local01 wz
2cd70     1C 26 86 F1 | 	sub	local01, #28
2cd74     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cd78     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cd7c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cd80     01 FA 65 A6 |  if_e	neg	result1, #1
2cd84     54 00 90 AD |  if_e	jmp	#LR__4266
2cd88     00 34 06 F6 | 	mov	local08, #0
2cd8c                 | LR__4264
2cd8c     01 2A 16 F2 | 	cmp	local03, #1 wc
2cd90     44 00 90 CD |  if_b	jmp	#LR__4265
2cd94     1B 31 02 F6 | 	mov	local06, local09
2cd98     1B 2F 02 F6 | 	mov	local05, local09
2cd9c     13 30 46 F7 | 	zerox	local06, #19
2cda0     14 2E 46 F0 | 	shr	local05, #20
2cda4     02 2E 66 F0 | 	shl	local05, #2
2cda8     ED 2E 02 F1 | 	add	local05, __methods__
2cdac     17 2F 02 FB | 	rdlong	local05, local05
2cdb0     16 13 C2 FA | 	rdbyte	arg01, local04
2cdb4     13 15 02 F6 | 	mov	arg02, local01
2cdb8     F2 32 02 F6 | 	mov	local07, objptr
2cdbc     18 E5 01 F6 | 	mov	objptr, local06
2cdc0     01 2C 06 F1 | 	add	local04, #1
2cdc4     2D 2E 62 FD | 	call	local05
2cdc8     19 E5 01 F6 | 	mov	objptr, local07
2cdcc     FD 34 02 F1 | 	add	local08, result1
2cdd0     01 2A 86 F1 | 	sub	local03, #1
2cdd4     B4 FF 9F FD | 	jmp	#LR__4264
2cdd8                 | LR__4265
2cdd8     1A FB 01 F6 | 	mov	result1, local08
2cddc                 | LR__4266
2cddc     A7 F0 03 F6 | 	mov	ptra, fp
2cde0     B2 00 A0 FD | 	call	#popregs_
2cde4                 | __system___vfswrite_ret
2cde4     2D 00 64 FD | 	ret
2cde8                 | 
2cde8                 | __system___vfsread
2cde8     03 4A 05 F6 | 	mov	COUNT_, #3
2cdec     A8 00 A0 FD | 	call	#pushregs_
2cdf0     28 F0 07 F1 | 	add	ptra, #40
2cdf4     04 4E 05 F1 | 	add	fp, #4
2cdf8     A7 12 62 FC | 	wrlong	arg01, fp
2cdfc     04 4E 05 F1 | 	add	fp, #4
2ce00     A7 14 62 FC | 	wrlong	arg02, fp
2ce04     04 4E 05 F1 | 	add	fp, #4
2ce08     A7 16 62 FC | 	wrlong	arg03, fp
2ce0c     04 4E 85 F1 | 	sub	fp, #4
2ce10     A7 FA 01 FB | 	rdlong	result1, fp
2ce14     14 4E 05 F1 | 	add	fp, #20
2ce18     A7 FA 61 FC | 	wrlong	result1, fp
2ce1c     04 4E 05 F1 | 	add	fp, #4
2ce20     A7 00 68 FC | 	wrlong	#0, fp
2ce24     1C 4E 85 F1 | 	sub	fp, #28
2ce28     A7 12 02 FB | 	rdlong	arg01, fp
2ce2c     04 4E 85 F1 | 	sub	fp, #4
2ce30     08 12 06 F1 | 	add	arg01, #8
2ce34     09 FB 01 FB | 	rdlong	result1, arg01
2ce38     01 FA CD F7 | 	test	result1, #1 wz
2ce3c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ce40     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2ce44     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ce48     01 FA 65 A6 |  if_e	neg	result1, #1
2ce4c     74 02 90 AD |  if_e	jmp	#LR__4276
2ce50     04 4E 05 F1 | 	add	fp, #4
2ce54     A7 12 02 FB | 	rdlong	arg01, fp
2ce58     04 4E 85 F1 | 	sub	fp, #4
2ce5c     14 12 06 F1 | 	add	arg01, #20
2ce60     09 FB 09 FB | 	rdlong	result1, arg01 wz
2ce64     B8 00 90 AD |  if_e	jmp	#LR__4271
2ce68     04 4E 05 F1 | 	add	fp, #4
2ce6c     A7 12 02 FB | 	rdlong	arg01, fp
2ce70     09 17 02 F6 | 	mov	arg03, arg01
2ce74     14 16 06 F1 | 	add	arg03, #20
2ce78     0B 27 02 FB | 	rdlong	local01, arg03
2ce7c     13 29 02 F6 | 	mov	local02, local01
2ce80     13 26 46 F7 | 	zerox	local01, #19
2ce84     14 28 46 F0 | 	shr	local02, #20
2ce88     02 28 66 F0 | 	shl	local02, #2
2ce8c     ED 28 02 F1 | 	add	local02, __methods__
2ce90     14 29 02 FB | 	rdlong	local02, local02
2ce94     04 4E 05 F1 | 	add	fp, #4
2ce98     A7 14 02 FB | 	rdlong	arg02, fp
2ce9c     04 4E 05 F1 | 	add	fp, #4
2cea0     A7 16 02 FB | 	rdlong	arg03, fp
2cea4     0C 4E 85 F1 | 	sub	fp, #12
2cea8     F2 2A 02 F6 | 	mov	local03, objptr
2ceac     13 E5 01 F6 | 	mov	objptr, local01
2ceb0     2D 28 62 FD | 	call	local02
2ceb4     15 E5 01 F6 | 	mov	objptr, local03
2ceb8     10 4E 05 F1 | 	add	fp, #16
2cebc     A7 FA 61 FC | 	wrlong	result1, fp
2cec0     10 4E 85 F1 | 	sub	fp, #16
2cec4     00 FA 55 F2 | 	cmps	result1, #0 wc
2cec8     44 00 90 3D |  if_ae	jmp	#LR__4270
2cecc     04 4E 05 F1 | 	add	fp, #4
2ced0     A7 2A 02 FB | 	rdlong	local03, fp
2ced4     15 27 02 F6 | 	mov	local01, local03
2ced8     08 2A 06 F1 | 	add	local03, #8
2cedc     15 29 02 FB | 	rdlong	local02, local03
2cee0     20 28 46 F5 | 	or	local02, #32
2cee4     08 26 06 F1 | 	add	local01, #8
2cee8     13 29 62 FC | 	wrlong	local02, local01
2ceec     0C 4E 05 F1 | 	add	fp, #12
2cef0     A7 12 0A FB | 	rdlong	arg01, fp wz
2cef4     10 4E 85 F1 | 	sub	fp, #16
2cef8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cefc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cf00     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cf04     01 FA 65 56 |  if_ne	neg	result1, #1
2cf08     00 FA 05 A6 |  if_e	mov	result1, #0
2cf0c     B4 01 90 FD | 	jmp	#LR__4276
2cf10                 | LR__4270
2cf10     10 4E 05 F1 | 	add	fp, #16
2cf14     A7 FA 01 FB | 	rdlong	result1, fp
2cf18     10 4E 85 F1 | 	sub	fp, #16
2cf1c     A4 01 90 FD | 	jmp	#LR__4276
2cf20                 | LR__4271
2cf20     04 4E 05 F1 | 	add	fp, #4
2cf24     A7 12 02 FB | 	rdlong	arg01, fp
2cf28     20 12 06 F1 | 	add	arg01, #32
2cf2c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2cf30     14 4E 05 F1 | 	add	fp, #20
2cf34     A7 12 62 FC | 	wrlong	arg01, fp
2cf38     18 4E 85 F1 | 	sub	fp, #24
2cf3c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cf40     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cf44     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cf48     01 FA 65 A6 |  if_e	neg	result1, #1
2cf4c     74 01 90 AD |  if_e	jmp	#LR__4276
2cf50     04 4E 05 F1 | 	add	fp, #4
2cf54     A7 2A 02 FB | 	rdlong	local03, fp
2cf58     04 4E 85 F1 | 	sub	fp, #4
2cf5c     28 2A 06 F1 | 	add	local03, #40
2cf60     15 29 0A FB | 	rdlong	local02, local03 wz
2cf64     7C 00 90 AD |  if_e	jmp	#LR__4273
2cf68     04 4E 05 F1 | 	add	fp, #4
2cf6c     A7 12 02 FB | 	rdlong	arg01, fp
2cf70     09 2B 02 F6 | 	mov	local03, arg01
2cf74     28 2A 06 F1 | 	add	local03, #40
2cf78     15 27 02 FB | 	rdlong	local01, local03
2cf7c     13 29 02 F6 | 	mov	local02, local01
2cf80     13 26 46 F7 | 	zerox	local01, #19
2cf84     14 28 46 F0 | 	shr	local02, #20
2cf88     02 28 66 F0 | 	shl	local02, #2
2cf8c     ED 28 02 F1 | 	add	local02, __methods__
2cf90     14 29 02 FB | 	rdlong	local02, local02
2cf94     20 4E 05 F1 | 	add	fp, #32
2cf98     A7 16 02 F6 | 	mov	arg03, fp
2cf9c     24 4E 85 F1 | 	sub	fp, #36
2cfa0     00 15 06 F6 | 	mov	arg02, #256
2cfa4     F2 2A 02 F6 | 	mov	local03, objptr
2cfa8     13 E5 01 F6 | 	mov	objptr, local01
2cfac     2D 28 62 FD | 	call	local02
2cfb0     15 E5 01 F6 | 	mov	objptr, local03
2cfb4     10 4E 05 F1 | 	add	fp, #16
2cfb8     A7 FA 61 FC | 	wrlong	result1, fp
2cfbc     00 FA 4D F2 | 	cmps	result1, #0 wz
2cfc0     10 4E 85 F1 | 	sub	fp, #16
2cfc4     1C 00 90 5D |  if_ne	jmp	#LR__4272
2cfc8     24 4E 05 F1 | 	add	fp, #36
2cfcc     A7 28 02 FB | 	rdlong	local02, fp
2cfd0     24 4E 85 F1 | 	sub	fp, #36
2cfd4     02 28 CE F7 | 	test	local02, #2 wz
2cfd8     20 4E 05 51 |  if_ne	add	fp, #32
2cfdc     A7 02 68 5C |  if_ne	wrlong	#1, fp
2cfe0     20 4E 85 51 |  if_ne	sub	fp, #32
2cfe4                 | LR__4272
2cfe4                 | LR__4273
2cfe4     10 4E 05 F1 | 	add	fp, #16
2cfe8     A7 00 68 FC | 	wrlong	#0, fp
2cfec     10 4E 85 F1 | 	sub	fp, #16
2cff0                 | LR__4274
2cff0     0C 4E 05 F1 | 	add	fp, #12
2cff4     A7 2A 02 FB | 	rdlong	local03, fp
2cff8     0C 4E 85 F1 | 	sub	fp, #12
2cffc     01 2A 16 F2 | 	cmp	local03, #1 wc
2d000     B4 00 90 CD |  if_b	jmp	#LR__4275
2d004     18 4E 05 F1 | 	add	fp, #24
2d008     A7 28 02 FB | 	rdlong	local02, fp
2d00c     14 2B 02 F6 | 	mov	local03, local02
2d010     13 2A 46 F7 | 	zerox	local03, #19
2d014     14 28 46 F0 | 	shr	local02, #20
2d018     02 28 66 F0 | 	shl	local02, #2
2d01c     ED 28 02 F1 | 	add	local02, __methods__
2d020     14 29 02 FB | 	rdlong	local02, local02
2d024     14 4E 85 F1 | 	sub	fp, #20
2d028     A7 12 02 FB | 	rdlong	arg01, fp
2d02c     04 4E 85 F1 | 	sub	fp, #4
2d030     F2 26 02 F6 | 	mov	local01, objptr
2d034     15 E5 01 F6 | 	mov	objptr, local03
2d038     2D 28 62 FD | 	call	local02
2d03c     13 E5 01 F6 | 	mov	objptr, local01
2d040     14 4E 05 F1 | 	add	fp, #20
2d044     A7 FA 61 FC | 	wrlong	result1, fp
2d048     14 4E 85 F1 | 	sub	fp, #20
2d04c     00 FA 55 F2 | 	cmps	result1, #0 wc
2d050     64 00 90 CD |  if_b	jmp	#LR__4275
2d054     1C 4E 05 F1 | 	add	fp, #28
2d058     A7 2A 02 FB | 	rdlong	local03, fp
2d05c     15 29 02 F6 | 	mov	local02, local03
2d060     01 28 06 F1 | 	add	local02, #1
2d064     A7 28 62 FC | 	wrlong	local02, fp
2d068     08 4E 85 F1 | 	sub	fp, #8
2d06c     A7 28 02 FB | 	rdlong	local02, fp
2d070     15 29 42 FC | 	wrbyte	local02, local03
2d074     04 4E 85 F1 | 	sub	fp, #4
2d078     A7 2A 02 FB | 	rdlong	local03, fp
2d07c     01 2A 06 F1 | 	add	local03, #1
2d080     A7 2A 62 FC | 	wrlong	local03, fp
2d084     04 4E 85 F1 | 	sub	fp, #4
2d088     A7 2A 02 FB | 	rdlong	local03, fp
2d08c     01 2A 86 F1 | 	sub	local03, #1
2d090     A7 2A 62 FC | 	wrlong	local03, fp
2d094     14 4E 05 F1 | 	add	fp, #20
2d098     A7 2A 0A FB | 	rdlong	local03, fp wz
2d09c     20 4E 85 F1 | 	sub	fp, #32
2d0a0     4C FF 9F AD |  if_e	jmp	#LR__4274
2d0a4     14 4E 05 F1 | 	add	fp, #20
2d0a8     A7 28 02 FB | 	rdlong	local02, fp
2d0ac     14 4E 85 F1 | 	sub	fp, #20
2d0b0     0A 28 0E F2 | 	cmp	local02, #10 wz
2d0b4     38 FF 9F 5D |  if_ne	jmp	#LR__4274
2d0b8                 | LR__4275
2d0b8     10 4E 05 F1 | 	add	fp, #16
2d0bc     A7 FA 01 FB | 	rdlong	result1, fp
2d0c0     10 4E 85 F1 | 	sub	fp, #16
2d0c4                 | LR__4276
2d0c4     A7 F0 03 F6 | 	mov	ptra, fp
2d0c8     B2 00 A0 FD | 	call	#popregs_
2d0cc                 | __system___vfsread_ret
2d0cc     2D 00 64 FD | 	ret
2d0d0                 | 
2d0d0                 | __system____default_filbuf
2d0d0     04 4A 05 F6 | 	mov	COUNT_, #4
2d0d4     A8 00 A0 FD | 	call	#pushregs_
2d0d8     09 27 02 F6 | 	mov	local01, arg01
2d0dc     13 29 02 FB | 	rdlong	local02, local01
2d0e0     0C 28 06 F1 | 	add	local02, #12
2d0e4     14 FB 09 FB | 	rdlong	result1, local02 wz
2d0e8     0C 28 86 F1 | 	sub	local02, #12
2d0ec     20 00 90 5D |  if_ne	jmp	#LR__4280
2d0f0     14 28 06 F1 | 	add	local02, #20
2d0f4     14 FB 01 F6 | 	mov	result1, local02
2d0f8     04 28 86 F1 | 	sub	local02, #4
2d0fc     14 FB 61 FC | 	wrlong	result1, local02
2d100     04 28 86 F1 | 	sub	local02, #4
2d104     02 00 80 FF 
2d108     14 01 68 FC | 	wrlong	##1024, local02
2d10c     0C 28 86 F1 | 	sub	local02, #12
2d110                 | LR__4280
2d110     14 26 06 F1 | 	add	local01, #20
2d114     13 2B 02 FB | 	rdlong	local03, local01
2d118     15 2D 02 F6 | 	mov	local04, local03
2d11c     14 26 86 F1 | 	sub	local01, #20
2d120     13 2C 46 F7 | 	zerox	local04, #19
2d124     14 2A 46 F0 | 	shr	local03, #20
2d128     02 2A 66 F0 | 	shl	local03, #2
2d12c     ED 2A 02 F1 | 	add	local03, __methods__
2d130     15 2B 02 FB | 	rdlong	local03, local03
2d134     10 28 06 F1 | 	add	local02, #16
2d138     14 15 02 FB | 	rdlong	arg02, local02
2d13c     04 28 86 F1 | 	sub	local02, #4
2d140     14 17 02 FB | 	rdlong	arg03, local02
2d144     0C 28 86 F1 | 	sub	local02, #12
2d148     13 13 02 F6 | 	mov	arg01, local01
2d14c     F2 26 02 F6 | 	mov	local01, objptr
2d150     16 E5 01 F6 | 	mov	objptr, local04
2d154     2D 2A 62 FD | 	call	local03
2d158     13 E5 01 F6 | 	mov	objptr, local01
2d15c     FD 2C 02 F6 | 	mov	local04, result1
2d160     00 2C 56 F2 | 	cmps	local04, #0 wc
2d164     01 FA 65 C6 |  if_b	neg	result1, #1
2d168     28 00 90 CD |  if_b	jmp	#LR__4281
2d16c     14 2D 62 FC | 	wrlong	local04, local02
2d170     10 28 06 F1 | 	add	local02, #16
2d174     14 2B 02 FB | 	rdlong	local03, local02
2d178     0C 28 86 F1 | 	sub	local02, #12
2d17c     14 2B 62 FC | 	wrlong	local03, local02
2d180     04 28 06 F1 | 	add	local02, #4
2d184     14 2B 02 FB | 	rdlong	local03, local02
2d188     01 2A 46 F5 | 	or	local03, #1
2d18c     14 2B 62 FC | 	wrlong	local03, local02
2d190     16 FB 01 F6 | 	mov	result1, local04
2d194                 | LR__4281
2d194     A7 F0 03 F6 | 	mov	ptra, fp
2d198     B2 00 A0 FD | 	call	#popregs_
2d19c                 | __system____default_filbuf_ret
2d19c     2D 00 64 FD | 	ret
2d1a0                 | 
2d1a0                 | __system__getlower_1157
2d1a0     41 12 56 F2 | 	cmps	arg01, #65 wc
2d1a4     10 00 90 CD |  if_b	jmp	#LR__4290
2d1a8     5B 12 56 F2 | 	cmps	arg01, #91 wc
2d1ac     09 FB 01 C6 |  if_b	mov	result1, arg01
2d1b0     20 FA 05 C1 |  if_b	add	result1, #32
2d1b4     04 00 90 CD |  if_b	jmp	#__system__getlower_1157_ret
2d1b8                 | LR__4290
2d1b8     09 FB 01 F6 | 	mov	result1, arg01
2d1bc                 | __system__getlower_1157_ret
2d1bc     2D 00 64 FD | 	ret
2d1c0                 | 
2d1c0                 | __system___pat_match
2d1c0     08 4A 05 F6 | 	mov	COUNT_, #8
2d1c4     A8 00 A0 FD | 	call	#pushregs_
2d1c8     09 27 02 F6 | 	mov	local01, arg01
2d1cc                 | LR__4300
2d1cc     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2d1d0     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2d1d4     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2d1d8     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2d1dc     2C 00 90 AD |  if_e	jmp	#LR__4301
2d1e0     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d1e4     B8 FF BF FD | 	call	#__system__getlower_1157
2d1e8     FD 2A 02 F6 | 	mov	local03, result1
2d1ec     13 13 C2 FA | 	rdbyte	arg01, local01
2d1f0     AC FF BF FD | 	call	#__system__getlower_1157
2d1f4     15 FB 09 F2 | 	cmp	result1, local03 wz
2d1f8     00 FA 05 56 |  if_ne	mov	result1, #0
2d1fc     FC 00 90 5D |  if_ne	jmp	#LR__4309
2d200     01 26 06 F1 | 	add	local01, #1
2d204     01 14 06 F1 | 	add	arg02, #1
2d208     C0 FF 9F FD | 	jmp	#LR__4300
2d20c                 | LR__4301
2d20c     0A 2B C2 FA | 	rdbyte	local03, arg02
2d210     2A 2A 0E F2 | 	cmp	local03, #42 wz
2d214     D4 00 90 5D |  if_ne	jmp	#LR__4308
2d218     01 14 06 F1 | 	add	arg02, #1
2d21c     0A 29 C2 FA | 	rdbyte	local02, arg02
2d220     01 14 86 F1 | 	sub	arg02, #1
2d224     2E 28 0E F2 | 	cmp	local02, #46 wz
2d228     28 00 90 5D |  if_ne	jmp	#LR__4302
2d22c     02 14 06 F1 | 	add	arg02, #2
2d230     0A 29 C2 FA | 	rdbyte	local02, arg02
2d234     02 14 86 F1 | 	sub	arg02, #2
2d238     2A 28 0E F2 | 	cmp	local02, #42 wz
2d23c     03 14 06 A1 |  if_e	add	arg02, #3
2d240     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2d244     03 14 86 A1 |  if_e	sub	arg02, #3
2d248     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2d24c     01 FA 05 A6 |  if_e	mov	result1, #1
2d250     A8 00 90 AD |  if_e	jmp	#LR__4309
2d254                 | LR__4302
2d254     01 14 06 F1 | 	add	arg02, #1
2d258     00 30 06 F6 | 	mov	local06, #0
2d25c     97 1E 48 FB | 	callpa	#(@LR__4305-@LR__4303)>>2,fcache_load_ptr_
2d260                 | LR__4303
2d260     18 33 02 F6 | 	mov	local07, local06
2d264     0A 33 02 F1 | 	add	local07, arg02
2d268     19 33 CA FA | 	rdbyte	local07, local07 wz
2d26c     18 2F 02 56 |  if_ne	mov	local05, local06
2d270     01 2E 06 51 |  if_ne	add	local05, #1
2d274     17 31 02 56 |  if_ne	mov	local06, local05
2d278     E4 FF 9F 5D |  if_ne	jmp	#LR__4303
2d27c     00 34 06 F6 | 	mov	local08, #0
2d280                 | LR__4304
2d280     1A 33 02 F6 | 	mov	local07, local08
2d284     13 33 02 F1 | 	add	local07, local01
2d288     19 33 CA FA | 	rdbyte	local07, local07 wz
2d28c     1A 2F 02 56 |  if_ne	mov	local05, local08
2d290     01 2E 06 51 |  if_ne	add	local05, #1
2d294     17 35 02 56 |  if_ne	mov	local08, local05
2d298     E4 FF 9F 5D |  if_ne	jmp	#LR__4304
2d29c                 | LR__4305
2d29c     18 35 52 F2 | 	cmps	local08, local06 wc
2d2a0     00 FA 05 C6 |  if_b	mov	result1, #0
2d2a4     54 00 90 CD |  if_b	jmp	#LR__4309
2d2a8     1A 29 02 F6 | 	mov	local02, local08
2d2ac     18 29 82 F1 | 	sub	local02, local06
2d2b0     14 27 02 F1 | 	add	local01, local02
2d2b4                 | LR__4306
2d2b4     01 30 56 F2 | 	cmps	local06, #1 wc
2d2b8     30 00 90 CD |  if_b	jmp	#LR__4307
2d2bc     13 13 C2 FA | 	rdbyte	arg01, local01
2d2c0     DC FE BF FD | 	call	#__system__getlower_1157
2d2c4     FD 34 02 F6 | 	mov	local08, result1
2d2c8     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d2cc     D0 FE BF FD | 	call	#__system__getlower_1157
2d2d0     FD 34 0A F2 | 	cmp	local08, result1 wz
2d2d4     00 FA 05 56 |  if_ne	mov	result1, #0
2d2d8     20 00 90 5D |  if_ne	jmp	#LR__4309
2d2dc     01 26 06 F1 | 	add	local01, #1
2d2e0     01 14 06 F1 | 	add	arg02, #1
2d2e4     01 30 86 F1 | 	sub	local06, #1
2d2e8     C8 FF 9F FD | 	jmp	#LR__4306
2d2ec                 | LR__4307
2d2ec                 | LR__4308
2d2ec     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2d2f0     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2d2f4     01 FA 05 A6 |  if_e	mov	result1, #1
2d2f8     00 FA 05 56 |  if_ne	mov	result1, #0
2d2fc                 | LR__4309
2d2fc     A7 F0 03 F6 | 	mov	ptra, fp
2d300     B2 00 A0 FD | 	call	#popregs_
2d304                 | __system___pat_match_ret
2d304     2D 00 64 FD | 	ret
2d308                 | 
2d308                 | _fatfs_cc_ff_uni2oem
2d308     00 00 06 F6 | 	mov	_var01, #0
2d30c     80 12 16 F2 | 	cmp	arg01, #128 wc
2d310     09 01 02 C6 |  if_b	mov	_var01, arg01
2d314     58 00 90 CD |  if_b	jmp	#LR__4314
2d318     80 00 00 FF 
2d31c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d320     4C 00 90 3D |  if_ae	jmp	#LR__4313
2d324     0A FB 31 F9 | 	getword	result1, arg02, #0
2d328     01 00 00 FF 
2d32c     52 FB 0D F2 | 	cmp	result1, ##850 wz
2d330     3C 00 90 5D |  if_ne	jmp	#LR__4313
2d334                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2d334     00 00 06 F6 | 	mov	_var01, #0
2d338     97 14 48 FB | 	callpa	#(@LR__4311-@LR__4310)>>2,fcache_load_ptr_
2d33c                 | LR__4310
2d33c     00 FB 31 F9 | 	getword	result1, _var01, #0
2d340     80 FA 15 F2 | 	cmp	result1, #128 wc
2d344     1C 00 90 3D |  if_ae	jmp	#LR__4312
2d348     00 FB 31 F9 | 	getword	result1, _var01, #0
2d34c     01 FA 65 F0 | 	shl	result1, #1
2d350     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2d354     FD FA E1 FA | 	rdword	result1, result1
2d358     FD 12 0A F2 | 	cmp	arg01, result1 wz
2d35c     01 00 06 51 |  if_ne	add	_var01, #1
2d360     D8 FF 9F 5D |  if_ne	jmp	#LR__4310
2d364                 | LR__4311
2d364                 | LR__4312
2d364     00 01 32 F9 | 	getword	_var01, _var01, #0
2d368     80 00 06 F1 | 	add	_var01, #128
2d36c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2d370                 | LR__4313
2d370                 | LR__4314
2d370                 | ' 			c = (c + 0x80) & 0xFF;
2d370                 | ' 		}
2d370                 | ' 	}
2d370                 | ' 
2d370                 | ' 	return c;
2d370     00 FB 01 F6 | 	mov	result1, _var01
2d374                 | _fatfs_cc_ff_uni2oem_ret
2d374     2D 00 64 FD | 	ret
2d378                 | 
2d378                 | _fatfs_cc_ff_oem2uni
2d378     00 00 06 F6 | 	mov	_var01, #0
2d37c     09 FB 31 F9 | 	getword	result1, arg01, #0
2d380     80 FA 15 F2 | 	cmp	result1, #128 wc
2d384     09 01 02 C6 |  if_b	mov	_var01, arg01
2d388     2C 00 90 CD |  if_b	jmp	#LR__4321
2d38c     0A 15 32 F9 | 	getword	arg02, arg02, #0
2d390     01 00 00 FF 
2d394     52 15 0E F2 | 	cmp	arg02, ##850 wz
2d398     1C 00 90 5D |  if_ne	jmp	#LR__4320
2d39c     09 FB 31 F9 | 	getword	result1, arg01, #0
2d3a0     00 FB 15 F2 | 	cmp	result1, #256 wc
2d3a4     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2d3a8     80 12 86 C1 |  if_b	sub	arg01, #128
2d3ac     01 12 66 C0 |  if_b	shl	arg01, #1
2d3b0     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2d3b4     09 01 E2 CA |  if_b	rdword	_var01, arg01
2d3b8                 | LR__4320
2d3b8                 | LR__4321
2d3b8                 | ' 		}
2d3b8                 | ' 	}
2d3b8                 | ' 
2d3b8                 | ' 	return c;
2d3b8     00 FB 01 F6 | 	mov	result1, _var01
2d3bc                 | _fatfs_cc_ff_oem2uni_ret
2d3bc     2D 00 64 FD | 	ret
2d3c0                 | 
2d3c0                 | _fatfs_cc_ff_wtoupper
2d3c0     09 01 02 F6 | 	mov	_var01, arg01
2d3c4     80 00 00 FF 
2d3c8     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2d3cc     60 01 90 3D |  if_ae	jmp	#LR__4343
2d3d0     00 03 02 F6 | 	mov	_var02, _var01
2d3d4     01 01 32 F9 | 	getword	_var01, _var02, #0
2d3d8     08 00 00 FF 
2d3dc     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2d3e0     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2d3e4     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2d3e8     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2d3ec     01 00 00 3F 
2d3f0     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2d3f4     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2d3f8     01 00 00 3F 
2d3fc     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2d400     02 07 02 F6 | 	mov	_var04, _var03
2d404                 | ' 		uc = (WORD)uni;
2d404                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2d404                 | ' 		for (;;) {
2d404                 | LR__4330
2d404     03 09 E2 FA | 	rdword	_var05, _var04
2d408     04 05 02 F6 | 	mov	_var03, _var05
2d40c     0F 04 4E F7 | 	zerox	_var03, #15 wz
2d410     02 06 06 F1 | 	add	_var04, #2
2d414     14 01 90 AD |  if_e	jmp	#LR__4342
2d418     01 05 32 F9 | 	getword	_var03, _var02, #0
2d41c     04 01 32 F9 | 	getword	_var01, _var05, #0
2d420     00 05 12 F2 | 	cmp	_var03, _var01 wc
2d424     04 01 90 CD |  if_b	jmp	#LR__4342
2d428     03 0B E2 FA | 	rdword	_var06, _var04
2d42c     05 0D 32 F9 | 	getword	_var07, _var06, #0
2d430     08 0C 46 F0 | 	shr	_var07, #8
2d434     05 0B 32 F9 | 	getword	_var06, _var06, #0
2d438     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2d43c     01 05 32 F9 | 	getword	_var03, _var02, #0
2d440     04 0F 32 F9 | 	getword	_var08, _var05, #0
2d444     05 01 32 F9 | 	getword	_var01, _var06, #0
2d448     00 0F 02 F1 | 	add	_var08, _var01
2d44c     07 05 52 F2 | 	cmps	_var03, _var08 wc
2d450     02 06 06 F1 | 	add	_var04, #2
2d454     C4 00 90 3D |  if_ae	jmp	#LR__4341
2d458                 | ' 				switch (cmd) {
2d458     06 11 32 F9 | 	getword	_var09, _var07, #0
2d45c     09 10 26 F3 | 	fle	_var09, #9
2d460     30 10 62 FD | 	jmprel	_var09
2d464                 | LR__4331
2d464     24 00 90 FD | 	jmp	#LR__4332
2d468     3C 00 90 FD | 	jmp	#LR__4333
2d46c     54 00 90 FD | 	jmp	#LR__4334
2d470     5C 00 90 FD | 	jmp	#LR__4335
2d474     64 00 90 FD | 	jmp	#LR__4336
2d478     6C 00 90 FD | 	jmp	#LR__4337
2d47c     74 00 90 FD | 	jmp	#LR__4338
2d480     7C 00 90 FD | 	jmp	#LR__4339
2d484     84 00 90 FD | 	jmp	#LR__4340
2d488     A0 00 90 FD | 	jmp	#LR__4342
2d48c                 | LR__4332
2d48c     01 03 32 F9 | 	getword	_var02, _var02, #0
2d490     04 09 32 F9 | 	getword	_var05, _var05, #0
2d494     04 03 82 F1 | 	sub	_var02, _var05
2d498     01 02 66 F0 | 	shl	_var02, #1
2d49c     03 03 02 F1 | 	add	_var02, _var04
2d4a0     01 03 E2 FA | 	rdword	_var02, _var02
2d4a4     84 00 90 FD | 	jmp	#LR__4342
2d4a8                 | LR__4333
2d4a8     01 05 32 F9 | 	getword	_var03, _var02, #0
2d4ac     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4b0     04 09 32 F9 | 	getword	_var05, _var05, #0
2d4b4     04 03 82 F1 | 	sub	_var02, _var05
2d4b8     01 02 06 F5 | 	and	_var02, #1
2d4bc     02 03 C2 F2 | 	subr	_var02, _var03
2d4c0     68 00 90 FD | 	jmp	#LR__4342
2d4c4                 | LR__4334
2d4c4     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4c8     10 02 86 F1 | 	sub	_var02, #16
2d4cc     5C 00 90 FD | 	jmp	#LR__4342
2d4d0                 | LR__4335
2d4d0     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4d4     20 02 86 F1 | 	sub	_var02, #32
2d4d8     50 00 90 FD | 	jmp	#LR__4342
2d4dc                 | LR__4336
2d4dc     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4e0     30 02 86 F1 | 	sub	_var02, #48
2d4e4     44 00 90 FD | 	jmp	#LR__4342
2d4e8                 | LR__4337
2d4e8     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4ec     1A 02 86 F1 | 	sub	_var02, #26
2d4f0     38 00 90 FD | 	jmp	#LR__4342
2d4f4                 | LR__4338
2d4f4     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4f8     08 02 06 F1 | 	add	_var02, #8
2d4fc     2C 00 90 FD | 	jmp	#LR__4342
2d500                 | LR__4339
2d500     01 03 32 F9 | 	getword	_var02, _var02, #0
2d504     50 02 86 F1 | 	sub	_var02, #80
2d508     20 00 90 FD | 	jmp	#LR__4342
2d50c                 | LR__4340
2d50c     01 03 32 F9 | 	getword	_var02, _var02, #0
2d510     0E 00 00 FF 
2d514     60 02 86 F1 | 	sub	_var02, ##7264
2d518                 | ' 				}
2d518                 | ' 				break;
2d518     10 00 90 FD | 	jmp	#LR__4342
2d51c                 | LR__4341
2d51c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2d520     02 0A 06 AA |  if_e	mul	_var06, #2
2d524     05 07 02 A1 |  if_e	add	_var04, _var06
2d528     D8 FE 9F FD | 	jmp	#LR__4330
2d52c                 | LR__4342
2d52c     01 01 32 F9 | 	getword	_var01, _var02, #0
2d530                 | LR__4343
2d530                 | ' 		}
2d530                 | ' 		uni = uc;
2d530                 | ' 	}
2d530                 | ' 
2d530                 | ' 	return uni;
2d530     00 FB 01 F6 | 	mov	result1, _var01
2d534                 | _fatfs_cc_ff_wtoupper_ret
2d534     2D 00 64 FD | 	ret
2d538                 | 
2d538                 | _fatfs_cc_strncpy
2d538     09 01 02 F6 | 	mov	_var01, arg01
2d53c     97 12 48 FB | 	callpa	#(@LR__4351-@LR__4350)>>2,fcache_load_ptr_
2d540                 | ' 
2d540                 | ' 	dscan = dst;
2d540                 | ' 	sscan = src;
2d540                 | ' 	count = n;
2d540                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2d540                 | LR__4350
2d540     01 16 86 F1 | 	sub	arg03, #1
2d544     00 16 56 F2 | 	cmps	arg03, #0 wc
2d548     18 00 90 CD |  if_b	jmp	#LR__4352
2d54c     0A FB C1 FA | 	rdbyte	result1, arg02
2d550     00 FB 41 FC | 	wrbyte	result1, _var01
2d554     01 14 06 F1 | 	add	arg02, #1
2d558     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d55c                 | ' 		continue;
2d55c     01 00 06 F1 | 	add	_var01, #1
2d560     DC FF 9F 5D |  if_ne	jmp	#LR__4350
2d564                 | LR__4351
2d564                 | LR__4352
2d564     97 0C 48 FB | 	callpa	#(@LR__4354-@LR__4353)>>2,fcache_load_ptr_
2d568                 | ' 	while (--count >= 0)
2d568                 | LR__4353
2d568     01 16 86 F1 | 	sub	arg03, #1
2d56c     00 16 56 F2 | 	cmps	arg03, #0 wc
2d570     00 03 02 36 |  if_ae	mov	_var02, _var01
2d574     01 00 06 31 |  if_ae	add	_var01, #1
2d578     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2d57c     E8 FF 9F 3D |  if_ae	jmp	#LR__4353
2d580                 | LR__4354
2d580                 | ' 		*dscan++ = '\0';
2d580                 | ' 	return(dst);
2d580     09 FB 01 F6 | 	mov	result1, arg01
2d584                 | _fatfs_cc_strncpy_ret
2d584     2D 00 64 FD | 	ret
2d588                 | 
2d588                 | _fatfs_cc_memcmp
2d588                 | ' 	for (n = size; n > 0; n--)
2d588     00 16 0E F2 | 	cmp	arg03, #0 wz
2d58c     28 00 90 AD |  if_e	jmp	#LR__4361
2d590                 | LR__4360
2d590     09 01 C2 FA | 	rdbyte	_var01, arg01
2d594     0A 03 C2 FA | 	rdbyte	_var02, arg02
2d598     01 01 0A F2 | 	cmp	_var01, _var02 wz
2d59c     01 12 06 A1 |  if_e	add	arg01, #1
2d5a0     01 14 06 A1 |  if_e	add	arg02, #1
2d5a4                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2d5a4     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2d5a8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2d5ac     01 FB 81 51 |  if_ne	sub	result1, _var02
2d5b0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2d5b4     F6 17 6E FB | 	djnz	arg03, #LR__4360
2d5b8                 | LR__4361
2d5b8                 | ' 
2d5b8                 | ' 	return(0);
2d5b8     00 FA 05 F6 | 	mov	result1, #0
2d5bc                 | _fatfs_cc_memcmp_ret
2d5bc     2D 00 64 FD | 	ret
2d5c0                 | 
2d5c0                 | _fatfs_cc_strncmp
2d5c0     09 01 0A F6 | 	mov	_var01, arg01 wz
2d5c4     14 00 90 5D |  if_ne	jmp	#LR__4370
2d5c8                 | ' 		return scan2 ? -1 : 0;
2d5c8     00 14 0E F2 | 	cmp	arg02, #0 wz
2d5cc     01 02 66 56 |  if_ne	neg	_var02, #1
2d5d0     00 02 06 A6 |  if_e	mov	_var02, #0
2d5d4     01 FB 01 F6 | 	mov	result1, _var02
2d5d8     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2d5dc                 | LR__4370
2d5dc     00 14 0E F2 | 	cmp	arg02, #0 wz
2d5e0     01 FA 05 A6 |  if_e	mov	result1, #1
2d5e4     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d5e8     0B 05 02 F6 | 	mov	_var03, arg03
2d5ec     97 16 48 FB | 	callpa	#(@LR__4372-@LR__4371)>>2,fcache_load_ptr_
2d5f0                 | ' 	count = n;
2d5f0                 | ' 	do {
2d5f0                 | LR__4371
2d5f0     00 07 C2 FA | 	rdbyte	_var04, _var01
2d5f4     0A 09 02 F6 | 	mov	_var05, arg02
2d5f8     04 0B C2 FA | 	rdbyte	_var06, _var05
2d5fc     01 04 86 F1 | 	sub	_var03, #1
2d600     00 04 56 F2 | 	cmps	_var03, #0 wc
2d604     01 00 06 F1 | 	add	_var01, #1
2d608     01 14 06 F1 | 	add	arg02, #1
2d60c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2d610     08 00 90 2D |  if_nc_and_z	jmp	#LR__4373
2d614     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2d618     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4371
2d61c                 | LR__4372
2d61c                 | LR__4373
2d61c     00 04 56 F2 | 	cmps	_var03, #0 wc
2d620                 | ' 		return(0);
2d620     00 FA 05 C6 |  if_b	mov	result1, #0
2d624     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2d628     05 07 0A F2 | 	cmp	_var04, _var06 wz
2d62c                 | ' 		return(0);
2d62c     00 FA 05 A6 |  if_e	mov	result1, #0
2d630     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d634     00 06 0E F2 | 	cmp	_var04, #0 wz
2d638                 | ' 		return(-1);
2d638     01 FA 65 A6 |  if_e	neg	result1, #1
2d63c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d640     00 0A 0E F2 | 	cmp	_var06, #0 wz
2d644                 | ' 		return(1);
2d644     01 FA 05 A6 |  if_e	mov	result1, #1
2d648                 | ' 		return(c1 - c2);
2d648     03 FB 01 56 |  if_ne	mov	result1, _var04
2d64c     05 FB 81 51 |  if_ne	sub	result1, _var06
2d650                 | _fatfs_cc_strncmp_ret
2d650     2D 00 64 FD | 	ret
2d654                 | 
2d654                 | _fatfs_cc_strchr
2d654                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2d654                 | ' 	while ((c = *s++) != (char) charwanted)
2d654                 | LR__4380
2d654     09 01 02 F6 | 	mov	_var01, arg01
2d658     00 03 C2 FA | 	rdbyte	_var02, _var01
2d65c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2d660     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2d664     03 05 0A F2 | 	cmp	_var03, _var04 wz
2d668     01 12 06 F1 | 	add	arg01, #1
2d66c     14 00 90 AD |  if_e	jmp	#LR__4381
2d670     01 05 02 F6 | 	mov	_var03, _var02
2d674     07 04 4E F7 | 	zerox	_var03, #7 wz
2d678     00 FA 05 A6 |  if_e	mov	result1, #0
2d67c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2d680     D0 FF 9F FD | 	jmp	#LR__4380
2d684                 | LR__4381
2d684                 | ' 	return((char *)--s);
2d684     01 12 86 F1 | 	sub	arg01, #1
2d688     09 FB 01 F6 | 	mov	result1, arg01
2d68c                 | _fatfs_cc_strchr_ret
2d68c     2D 00 64 FD | 	ret
2d690                 | 
2d690                 | _fatfs_cc_disk_initialize
2d690     04 4A 05 F6 | 	mov	COUNT_, #4
2d694     A8 00 A0 FD | 	call	#pushregs_
2d698     40 F0 07 F1 | 	add	ptra, #64
2d69c     04 4E 05 F1 | 	add	fp, #4
2d6a0     A7 12 42 FC | 	wrbyte	arg01, fp
2d6a4     01 00 00 FF 
2d6a8     14 E4 05 F1 | 	add	objptr, ##532
2d6ac     F2 18 02 FB | 	rdlong	arg04, objptr
2d6b0     2C 4E 05 F1 | 	add	fp, #44
2d6b4     A7 18 62 FC | 	wrlong	arg04, fp
2d6b8     04 E4 85 F1 | 	sub	objptr, #4
2d6bc     F2 18 02 FB | 	rdlong	arg04, objptr
2d6c0     04 4E 05 F1 | 	add	fp, #4
2d6c4     A7 18 62 FC | 	wrlong	arg04, fp
2d6c8     08 E4 05 F1 | 	add	objptr, #8
2d6cc     F2 18 02 FB | 	rdlong	arg04, objptr
2d6d0     04 4E 05 F1 | 	add	fp, #4
2d6d4     A7 18 62 FC | 	wrlong	arg04, fp
2d6d8     04 E4 05 F1 | 	add	objptr, #4
2d6dc     F2 18 02 FB | 	rdlong	arg04, objptr
2d6e0     04 4E 05 F1 | 	add	fp, #4
2d6e4     A7 18 62 FC | 	wrlong	arg04, fp
2d6e8     04 E4 05 F1 | 	add	objptr, #4
2d6ec     F2 02 48 FC | 	wrbyte	#1, objptr
2d6f0     01 00 00 FF 
2d6f4     20 E4 85 F1 | 	sub	objptr, ##544
2d6f8     38 4E 85 F1 | 	sub	fp, #56
2d6fc     A7 18 CA FA | 	rdbyte	arg04, fp wz
2d700     04 4E 85 F1 | 	sub	fp, #4
2d704                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d704                 | '             return RES_NOTRDY;
2d704     03 FA 05 56 |  if_ne	mov	result1, #3
2d708     D8 05 90 5D |  if_ne	jmp	#LR__4408
2d70c     13 00 00 FF 
2d710     10 13 06 F6 | 	mov	arg01, ##10000
2d714     40 95 BF FD | 	call	#__system___waitus
2d718     30 4E 05 F1 | 	add	fp, #48
2d71c     A7 12 02 FB | 	rdlong	arg01, fp
2d720     09 01 08 FC | 	wrpin	#0, arg01
2d724     04 4E 05 F1 | 	add	fp, #4
2d728     A7 12 02 FB | 	rdlong	arg01, fp
2d72c     09 01 08 FC | 	wrpin	#0, arg01
2d730     04 4E 05 F1 | 	add	fp, #4
2d734     A7 12 02 FB | 	rdlong	arg01, fp
2d738     09 01 08 FC | 	wrpin	#0, arg01
2d73c     04 4E 05 F1 | 	add	fp, #4
2d740     A7 12 02 FB | 	rdlong	arg01, fp
2d744     09 00 80 FF 
2d748     09 01 08 FC | 	wrpin	##4608, arg01
2d74c     0C 4E 85 F1 | 	sub	fp, #12
2d750     A7 12 02 FB | 	rdlong	arg01, fp
2d754     59 12 62 FD | 	drvh	arg01
2d758     04 4E 05 F1 | 	add	fp, #4
2d75c     A7 12 02 FB | 	rdlong	arg01, fp
2d760     59 12 62 FD | 	drvh	arg01
2d764     04 4E 05 F1 | 	add	fp, #4
2d768     A7 12 02 FB | 	rdlong	arg01, fp
2d76c     59 12 62 FD | 	drvh	arg01
2d770     04 4E 05 F1 | 	add	fp, #4
2d774     A7 12 02 FB | 	rdlong	arg01, fp
2d778     59 12 62 FD | 	drvh	arg01
2d77c     20 4E 85 F1 | 	sub	fp, #32
2d780     00 04 80 FF 
2d784     A7 20 68 FC | 	wrlong	##524304, fp
2d788     04 4E 05 F1 | 	add	fp, #4
2d78c     20 03 80 FF 
2d790     A7 90 68 FC | 	wrlong	##409672, fp
2d794     14 4E 05 F1 | 	add	fp, #20
2d798     A7 26 02 FB | 	rdlong	local01, fp
2d79c     18 4E 85 F1 | 	sub	fp, #24
2d7a0     A7 16 02 FB | 	rdlong	arg03, fp
2d7a4     40 26 62 FD | 	dirl	local01
2d7a8     A0 03 80 FF 
2d7ac     13 91 08 FC | 	wrpin	##475208, local01
2d7b0     13 17 12 FC | 	wxpin	arg03, local01
2d7b4     13 01 28 FC | 	wypin	#0, local01
2d7b8     41 26 62 FD | 	dirh	local01
2d7bc     1C 4E 05 F1 | 	add	fp, #28
2d7c0     A7 28 02 FB | 	rdlong	local02, fp
2d7c4     14 27 82 F1 | 	sub	local01, local02
2d7c8     07 26 06 F5 | 	and	local01, #7
2d7cc     18 26 66 F0 | 	shl	local01, #24
2d7d0     78 14 06 F6 | 	mov	arg02, #120
2d7d4     13 15 42 F5 | 	or	arg02, local01
2d7d8     14 4E 85 F1 | 	sub	fp, #20
2d7dc     A7 14 62 FC | 	wrlong	arg02, fp
2d7e0     14 4E 05 F1 | 	add	fp, #20
2d7e4     A7 12 02 FB | 	rdlong	arg01, fp
2d7e8     10 14 26 F4 | 	bith	arg02, #16
2d7ec     40 12 62 FD | 	dirl	arg01
2d7f0     09 15 02 FC | 	wrpin	arg02, arg01
2d7f4     09 3F 18 FC | 	wxpin	#31, arg01
2d7f8     FF FF FF FF 
2d7fc     09 FF 2B FC | 	wypin	##-1, arg01
2d800     41 12 62 FD | 	dirh	arg01
2d804     04 4E 85 F1 | 	sub	fp, #4
2d808     A7 14 02 FB | 	rdlong	arg02, fp
2d80c     08 4E 05 F1 | 	add	fp, #8
2d810     A7 2A 02 FB | 	rdlong	local03, fp
2d814     15 15 82 F1 | 	sub	arg02, local03
2d818     07 14 06 F5 | 	and	arg02, #7
2d81c     18 14 66 F0 | 	shl	arg02, #24
2d820     14 4E 85 F1 | 	sub	fp, #20
2d824     A7 14 62 FC | 	wrlong	arg02, fp
2d828     29 00 00 FF 
2d82c     7A 14 46 F5 | 	or	arg02, ##21114
2d830     A7 14 62 FC | 	wrlong	arg02, fp
2d834     14 4E 05 F1 | 	add	fp, #20
2d838     A7 12 02 FB | 	rdlong	arg01, fp
2d83c     40 12 62 FD | 	dirl	arg01
2d840     09 15 02 FC | 	wrpin	arg02, arg01
2d844     09 4F 18 FC | 	wxpin	#39, arg01
2d848     09 01 28 FC | 	wypin	#0, arg01
2d84c     41 12 62 FD | 	dirh	arg01
2d850     28 4E 85 F1 | 	sub	fp, #40
2d854     A7 12 02 F6 | 	mov	arg01, fp
2d858     14 4E 85 F1 | 	sub	fp, #20
2d85c     0A 14 06 F6 | 	mov	arg02, #10
2d860     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1191
2d864     00 12 06 F6 | 	mov	arg01, #0
2d868     00 14 06 F6 | 	mov	arg02, #0
2d86c     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2d870     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1201
2d874     64 12 06 F6 | 	mov	arg01, #100
2d878     DC 93 BF FD | 	call	#__system___waitus
2d87c     14 4E 05 F1 | 	add	fp, #20
2d880     A7 12 02 F6 | 	mov	arg01, fp
2d884     14 4E 85 F1 | 	sub	fp, #20
2d888     0A 14 06 F6 | 	mov	arg02, #10
2d88c     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1191
2d890     0C 4E 05 F1 | 	add	fp, #12
2d894     A7 00 48 FC | 	wrbyte	#0, fp
2d898     0C 4E 85 F1 | 	sub	fp, #12
2d89c     00 12 06 F6 | 	mov	arg01, #0
2d8a0     00 14 06 F6 | 	mov	arg02, #0
2d8a4     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2d8a8     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2d8ac     01 18 0E F2 | 	cmp	arg04, #1 wz
2d8b0     B8 03 90 5D |  if_ne	jmp	#LR__4407
2d8b4     08 12 06 F6 | 	mov	arg01, #8
2d8b8     AA 15 06 F6 | 	mov	arg02, #426
2d8bc     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2d8c0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d8c4     01 FA 0D F2 | 	cmp	result1, #1 wz
2d8c8     98 01 90 5D |  if_ne	jmp	#LR__4393
2d8cc     14 4E 05 F1 | 	add	fp, #20
2d8d0     A7 12 02 F6 | 	mov	arg01, fp
2d8d4     14 4E 85 F1 | 	sub	fp, #20
2d8d8     04 14 06 F6 | 	mov	arg02, #4
2d8dc     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1191
2d8e0     16 4E 05 F1 | 	add	fp, #22
2d8e4     A7 2C C2 FA | 	rdbyte	local04, fp
2d8e8     16 4E 85 F1 | 	sub	fp, #22
2d8ec     01 2C 0E F2 | 	cmp	local04, #1 wz
2d8f0     17 4E 05 A1 |  if_e	add	fp, #23
2d8f4     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2d8f8     17 4E 85 A1 |  if_e	sub	fp, #23
2d8fc     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2d900     68 03 90 5D |  if_ne	jmp	#LR__4406
2d904                 | ' 				for (tmr = 1000; tmr; tmr--) {
2d904     18 4E 05 F1 | 	add	fp, #24
2d908     01 00 80 FF 
2d90c     A7 D0 6B FC | 	wrlong	##1000, fp
2d910     18 4E 85 F1 | 	sub	fp, #24
2d914                 | LR__4390
2d914     18 4E 05 F1 | 	add	fp, #24
2d918     A7 26 0A FB | 	rdlong	local01, fp wz
2d91c     18 4E 85 F1 | 	sub	fp, #24
2d920     3C 00 90 AD |  if_e	jmp	#LR__4391
2d924     A9 12 06 F6 | 	mov	arg01, #169
2d928     1E 14 C6 F9 | 	decod	arg02, #30
2d92c     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2d930     FD 2C 02 F6 | 	mov	local04, result1
2d934     07 2C 4E F7 | 	zerox	local04, #7 wz
2d938     24 00 90 AD |  if_e	jmp	#LR__4391
2d93c     01 00 00 FF 
2d940     E8 13 06 F6 | 	mov	arg01, ##1000
2d944     10 93 BF FD | 	call	#__system___waitus
2d948     18 4E 05 F1 | 	add	fp, #24
2d94c     A7 2C 02 FB | 	rdlong	local04, fp
2d950     01 2C 86 F1 | 	sub	local04, #1
2d954     A7 2C 62 FC | 	wrlong	local04, fp
2d958     18 4E 85 F1 | 	sub	fp, #24
2d95c     B4 FF 9F FD | 	jmp	#LR__4390
2d960                 | LR__4391
2d960     18 4E 05 F1 | 	add	fp, #24
2d964     A7 2C 0A FB | 	rdlong	local04, fp wz
2d968     18 4E 85 F1 | 	sub	fp, #24
2d96c     4C 00 90 AD |  if_e	jmp	#LR__4392
2d970     3A 12 06 F6 | 	mov	arg01, #58
2d974     00 14 06 F6 | 	mov	arg02, #0
2d978     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2d97c     FD 2A 02 F6 | 	mov	local03, result1
2d980     07 2A 4E F7 | 	zerox	local03, #7 wz
2d984     34 00 90 5D |  if_ne	jmp	#LR__4392
2d988     14 4E 05 F1 | 	add	fp, #20
2d98c     A7 12 02 F6 | 	mov	arg01, fp
2d990     14 4E 85 F1 | 	sub	fp, #20
2d994     04 14 06 F6 | 	mov	arg02, #4
2d998     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1191
2d99c     14 4E 05 F1 | 	add	fp, #20
2d9a0     A7 26 C2 FA | 	rdbyte	local01, fp
2d9a4     40 26 CE F7 | 	test	local01, #64 wz
2d9a8     0C 2C 06 56 |  if_ne	mov	local04, #12
2d9ac     04 2C 06 A6 |  if_e	mov	local04, #4
2d9b0     08 4E 85 F1 | 	sub	fp, #8
2d9b4     A7 2C 42 FC | 	wrbyte	local04, fp
2d9b8     0C 4E 85 F1 | 	sub	fp, #12
2d9bc                 | LR__4392
2d9bc     14 2C 06 FB | 	rdlong	local04, #20
2d9c0     18 4E 05 F1 | 	add	fp, #24
2d9c4     A7 2C 62 FC | 	wrlong	local04, fp
2d9c8     0C 4E 05 F1 | 	add	fp, #12
2d9cc     A7 2C 02 FB | 	rdlong	local04, fp
2d9d0     1B 2C 26 F4 | 	bith	local04, #27
2d9d4     A7 2C 62 FC | 	wrlong	local04, fp
2d9d8     0C 4E 85 F1 | 	sub	fp, #12
2d9dc     A7 2C 02 FB | 	rdlong	local04, fp
2d9e0     18 4E 85 F1 | 	sub	fp, #24
2d9e4     68 78 04 FF 
2d9e8     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2d9ec     1C 4E 05 C1 |  if_b	add	fp, #28
2d9f0     00 01 80 CF 
2d9f4     A7 08 68 CC |  if_b	wrlong	##131076, fp
2d9f8     1C 4E 85 C1 |  if_b	sub	fp, #28
2d9fc     6C 02 90 CD |  if_b	jmp	#LR__4406
2da00     18 4E 05 F1 | 	add	fp, #24
2da04     A7 2C 02 FB | 	rdlong	local04, fp
2da08     18 4E 85 F1 | 	sub	fp, #24
2da0c     E1 F5 05 FF 
2da10     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2da14     1C 4E 05 C1 |  if_b	add	fp, #28
2da18     00 01 80 CF 
2da1c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2da20     1C 4E 85 C1 |  if_b	sub	fp, #28
2da24     44 02 90 CD |  if_b	jmp	#LR__4406
2da28     18 4E 05 F1 | 	add	fp, #24
2da2c     A7 2C 02 FB | 	rdlong	local04, fp
2da30     18 4E 85 F1 | 	sub	fp, #24
2da34     3B 58 08 FF 
2da38     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2da3c     1C 4E 05 C1 |  if_b	add	fp, #28
2da40     00 01 80 CF 
2da44     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2da48     1C 4E 85 C1 |  if_b	sub	fp, #28
2da4c     1C 02 90 CD |  if_b	jmp	#LR__4406
2da50     1C 4E 05 F1 | 	add	fp, #28
2da54     80 01 80 FF 
2da58     A7 10 68 FC | 	wrlong	##196616, fp
2da5c     1C 4E 85 F1 | 	sub	fp, #28
2da60     08 02 90 FD | 	jmp	#LR__4406
2da64                 | LR__4393
2da64     A9 12 06 F6 | 	mov	arg01, #169
2da68     00 14 06 F6 | 	mov	arg02, #0
2da6c     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2da70     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2da74     02 2C 16 F2 | 	cmp	local04, #2 wc
2da78     18 00 90 3D |  if_ae	jmp	#LR__4394
2da7c     0C 4E 05 F1 | 	add	fp, #12
2da80     A7 04 48 FC | 	wrbyte	#2, fp
2da84     04 4E 05 F1 | 	add	fp, #4
2da88     A7 52 49 FC | 	wrbyte	#169, fp
2da8c     10 4E 85 F1 | 	sub	fp, #16
2da90     14 00 90 FD | 	jmp	#LR__4395
2da94                 | LR__4394
2da94     0C 4E 05 F1 | 	add	fp, #12
2da98     A7 02 48 FC | 	wrbyte	#1, fp
2da9c     04 4E 05 F1 | 	add	fp, #4
2daa0     A7 02 48 FC | 	wrbyte	#1, fp
2daa4     10 4E 85 F1 | 	sub	fp, #16
2daa8                 | LR__4395
2daa8                 | ' 				ty =  0x01 ; cmd =  (1) ;
2daa8                 | ' 			}
2daa8                 | ' 			for (tmr = 1000; tmr; tmr--) {
2daa8     18 4E 05 F1 | 	add	fp, #24
2daac     01 00 80 FF 
2dab0     A7 D0 6B FC | 	wrlong	##1000, fp
2dab4     18 4E 85 F1 | 	sub	fp, #24
2dab8                 | LR__4396
2dab8     18 4E 05 F1 | 	add	fp, #24
2dabc     A7 2A 0A FB | 	rdlong	local03, fp wz
2dac0     18 4E 85 F1 | 	sub	fp, #24
2dac4     44 00 90 AD |  if_e	jmp	#LR__4397
2dac8     10 4E 05 F1 | 	add	fp, #16
2dacc     A7 12 C2 FA | 	rdbyte	arg01, fp
2dad0     10 4E 85 F1 | 	sub	fp, #16
2dad4     00 14 06 F6 | 	mov	arg02, #0
2dad8     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2dadc     FD 2C 02 F6 | 	mov	local04, result1
2dae0     07 2C 4E F7 | 	zerox	local04, #7 wz
2dae4     24 00 90 AD |  if_e	jmp	#LR__4397
2dae8     01 00 00 FF 
2daec     E8 13 06 F6 | 	mov	arg01, ##1000
2daf0     64 91 BF FD | 	call	#__system___waitus
2daf4     18 4E 05 F1 | 	add	fp, #24
2daf8     A7 2C 02 FB | 	rdlong	local04, fp
2dafc     01 2C 86 F1 | 	sub	local04, #1
2db00     A7 2C 62 FC | 	wrlong	local04, fp
2db04     18 4E 85 F1 | 	sub	fp, #24
2db08     AC FF 9F FD | 	jmp	#LR__4396
2db0c                 | LR__4397
2db0c     18 4E 05 F1 | 	add	fp, #24
2db10     A7 2C 0A FB | 	rdlong	local04, fp wz
2db14     18 4E 85 F1 | 	sub	fp, #24
2db18     14 00 90 AD |  if_e	jmp	#LR__4398
2db1c     10 12 06 F6 | 	mov	arg01, #16
2db20     09 14 C6 F9 | 	decod	arg02, #9
2db24     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2db28     07 FA 4D F7 | 	zerox	result1, #7 wz
2db2c     0C 00 90 AD |  if_e	jmp	#LR__4399
2db30                 | LR__4398
2db30     0C 4E 05 F1 | 	add	fp, #12
2db34     A7 00 48 FC | 	wrbyte	#0, fp
2db38     0C 4E 85 F1 | 	sub	fp, #12
2db3c                 | LR__4399
2db3c     14 2C 06 FB | 	rdlong	local04, #20
2db40     18 4E 05 F1 | 	add	fp, #24
2db44     A7 2C 62 FC | 	wrlong	local04, fp
2db48     18 4E 85 F1 | 	sub	fp, #24
2db4c     F0 FA 02 FF 
2db50     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2db54     18 00 90 3D |  if_ae	jmp	#LR__4400
2db58     24 4E 05 F1 | 	add	fp, #36
2db5c     A7 2C 02 FB | 	rdlong	local04, fp
2db60     1B 2C 26 F4 | 	bith	local04, #27
2db64     A7 2C 62 FC | 	wrlong	local04, fp
2db68     24 4E 85 F1 | 	sub	fp, #36
2db6c     2C 00 90 FD | 	jmp	#LR__4401
2db70                 | LR__4400
2db70     18 4E 05 F1 | 	add	fp, #24
2db74     A7 2C 02 FB | 	rdlong	local04, fp
2db78     18 4E 85 F1 | 	sub	fp, #24
2db7c     E1 F5 05 FF 
2db80     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2db84     24 4E 05 C1 |  if_b	add	fp, #36
2db88     A7 2C 02 CB |  if_b	rdlong	local04, fp
2db8c     80 00 04 CF 
2db90     00 2C 46 C5 |  if_b	or	local04, ##134283264
2db94     A7 2C 62 CC |  if_b	wrlong	local04, fp
2db98     24 4E 85 C1 |  if_b	sub	fp, #36
2db9c                 | LR__4401
2db9c     18 4E 05 F1 | 	add	fp, #24
2dba0     A7 2C 02 FB | 	rdlong	local04, fp
2dba4     18 4E 85 F1 | 	sub	fp, #24
2dba8     F0 FA 02 FF 
2dbac     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2dbb0     1C 4E 05 C1 |  if_b	add	fp, #28
2dbb4     00 01 80 CF 
2dbb8     A7 08 68 CC |  if_b	wrlong	##131076, fp
2dbbc     1C 4E 85 C1 |  if_b	sub	fp, #28
2dbc0     A8 00 90 CD |  if_b	jmp	#LR__4405
2dbc4     18 4E 05 F1 | 	add	fp, #24
2dbc8     A7 2C 02 FB | 	rdlong	local04, fp
2dbcc     18 4E 85 F1 | 	sub	fp, #24
2dbd0     68 78 04 FF 
2dbd4     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2dbd8     1C 4E 05 C1 |  if_b	add	fp, #28
2dbdc     80 01 80 CF 
2dbe0     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2dbe4     1C 4E 85 C1 |  if_b	sub	fp, #28
2dbe8     80 00 90 CD |  if_b	jmp	#LR__4404
2dbec     18 4E 05 F1 | 	add	fp, #24
2dbf0     A7 2C 02 FB | 	rdlong	local04, fp
2dbf4     18 4E 85 F1 | 	sub	fp, #24
2dbf8     E1 F5 05 FF 
2dbfc     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2dc00     1C 4E 05 C1 |  if_b	add	fp, #28
2dc04     00 02 80 CF 
2dc08     A7 10 68 CC |  if_b	wrlong	##262152, fp
2dc0c     1C 4E 85 C1 |  if_b	sub	fp, #28
2dc10     58 00 90 CD |  if_b	jmp	#LR__4403
2dc14     18 4E 05 F1 | 	add	fp, #24
2dc18     A7 2C 02 FB | 	rdlong	local04, fp
2dc1c     18 4E 85 F1 | 	sub	fp, #24
2dc20     59 73 07 FF 
2dc24     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2dc28     1C 4E 05 C1 |  if_b	add	fp, #28
2dc2c     80 02 80 CF 
2dc30     A7 14 68 CC |  if_b	wrlong	##327690, fp
2dc34     1C 4E 85 C1 |  if_b	sub	fp, #28
2dc38     30 00 90 CD |  if_b	jmp	#LR__4402
2dc3c     18 4E 05 F1 | 	add	fp, #24
2dc40     A7 2C 02 FB | 	rdlong	local04, fp
2dc44     18 4E 85 F1 | 	sub	fp, #24
2dc48     D1 F0 08 FF 
2dc4c     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2dc50     1C 4E 05 C1 |  if_b	add	fp, #28
2dc54     00 03 80 CF 
2dc58     A7 18 68 CC |  if_b	wrlong	##393228, fp
2dc5c     1C 4E 85 F3 | 	sumc	fp, #28
2dc60     80 03 80 3F 
2dc64     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2dc68     1C 4E 85 31 |  if_ae	sub	fp, #28
2dc6c                 | LR__4402
2dc6c                 | LR__4403
2dc6c                 | LR__4404
2dc6c                 | LR__4405
2dc6c                 | LR__4406
2dc6c                 | LR__4407
2dc6c     0C 4E 05 F1 | 	add	fp, #12
2dc70     A7 2C C2 FA | 	rdbyte	local04, fp
2dc74     01 00 00 FF 
2dc78     21 E4 05 F1 | 	add	objptr, ##545
2dc7c     F2 2C 42 FC | 	wrbyte	local04, objptr
2dc80     A7 26 CA FA | 	rdbyte	local01, fp wz
2dc84     00 2C 06 56 |  if_ne	mov	local04, #0
2dc88     01 2C 06 A6 |  if_e	mov	local04, #1
2dc8c     20 4E 05 F1 | 	add	fp, #32
2dc90     A7 2C 42 FC | 	wrbyte	local04, fp
2dc94     A7 2C C2 FA | 	rdbyte	local04, fp
2dc98     2C 4E 85 F1 | 	sub	fp, #44
2dc9c     01 E4 85 F1 | 	sub	objptr, #1
2dca0     F2 2C 42 FC | 	wrbyte	local04, objptr
2dca4     01 00 00 FF 
2dca8     20 E4 85 F1 | 	sub	objptr, ##544
2dcac     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1201
2dcb0     34 4E 05 F1 | 	add	fp, #52
2dcb4     A7 12 02 FB | 	rdlong	arg01, fp
2dcb8     18 4E 85 F1 | 	sub	fp, #24
2dcbc     A7 14 02 FB | 	rdlong	arg02, fp
2dcc0     09 15 12 FC | 	wxpin	arg02, arg01
2dcc4     1C 4E 05 F1 | 	add	fp, #28
2dcc8     A7 12 02 FB | 	rdlong	arg01, fp
2dccc     14 4E 85 F1 | 	sub	fp, #20
2dcd0     A7 14 02 FB | 	rdlong	arg02, fp
2dcd4     09 15 02 FC | 	wrpin	arg02, arg01
2dcd8                 | ' 
2dcd8                 | ' 		}
2dcd8                 | ' 	}
2dcd8                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dcd8                 | ' 	CardType = ty;
2dcd8                 | ' 	s = ty ? 0 :  0x01 ;
2dcd8                 | ' 	Stat = s;
2dcd8                 | ' 
2dcd8                 | ' 	deselect();
2dcd8                 | ' 
2dcd8                 | ' 
2dcd8                 | ' 	_wxpin( PIN_CLK, ck_div );
2dcd8                 | ' 	_wrpin( PIN_DI, spm_tx );
2dcd8                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dcd8                 | ' 	return s;
2dcd8     08 4E 05 F1 | 	add	fp, #8
2dcdc     A7 FA C1 FA | 	rdbyte	result1, fp
2dce0     2C 4E 85 F1 | 	sub	fp, #44
2dce4                 | LR__4408
2dce4     A7 F0 03 F6 | 	mov	ptra, fp
2dce8     B2 00 A0 FD | 	call	#popregs_
2dcec                 | _fatfs_cc_disk_initialize_ret
2dcec     2D 00 64 FD | 	ret
2dcf0                 | 
2dcf0                 | _fatfs_cc_disk_read
2dcf0     05 4A 05 F6 | 	mov	COUNT_, #5
2dcf4     A8 00 A0 FD | 	call	#pushregs_
2dcf8     0A 27 02 F6 | 	mov	local01, arg02
2dcfc     0B 29 02 F6 | 	mov	local02, arg03
2dd00     0C 2B 02 F6 | 	mov	local03, arg04
2dd04     00 12 0E F2 | 	cmp	arg01, #0 wz
2dd08     01 FA 05 56 |  if_ne	mov	result1, #1
2dd0c                 | ' 
2dd0c                 | ' 	return Stat;
2dd0c     01 00 00 AF 
2dd10     20 E4 05 A1 |  if_e	add	objptr, ##544
2dd14     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2dd18     01 00 00 AF 
2dd1c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2dd20     FD FA E1 F8 | 	getbyte	result1, result1, #0
2dd24     01 FA CD F7 | 	test	result1, #1 wz
2dd28     03 FA 05 56 |  if_ne	mov	result1, #3
2dd2c     84 00 90 5D |  if_ne	jmp	#LR__4412
2dd30     01 00 00 FF 
2dd34     21 E4 05 F1 | 	add	objptr, ##545
2dd38     F2 2C C2 FA | 	rdbyte	local04, objptr
2dd3c     01 00 00 FF 
2dd40     21 E4 85 F1 | 	sub	objptr, ##545
2dd44     08 2C CE F7 | 	test	local04, #8 wz
2dd48     09 28 66 A0 |  if_e	shl	local02, #9
2dd4c     02 2A 16 F2 | 	cmp	local03, #2 wc
2dd50     12 2C 06 36 |  if_ae	mov	local04, #18
2dd54     11 2C 06 C6 |  if_b	mov	local04, #17
2dd58     14 15 02 F6 | 	mov	arg02, local02
2dd5c     16 13 02 F6 | 	mov	arg01, local04
2dd60     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2dd64     FD 2E 02 F6 | 	mov	local05, result1
2dd68     07 2E 4E F7 | 	zerox	local05, #7 wz
2dd6c     30 00 90 5D |  if_ne	jmp	#LR__4411
2dd70                 | ' 		do {
2dd70                 | LR__4410
2dd70     13 13 02 F6 | 	mov	arg01, local01
2dd74     09 14 C6 F9 | 	decod	arg02, #9
2dd78     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1209
2dd7c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd80     01 00 00 5F 
2dd84     00 26 06 51 |  if_ne	add	local01, ##512
2dd88     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4410
2dd8c     16 2D E2 F8 | 	getbyte	local04, local04, #0
2dd90     12 2C 0E F2 | 	cmp	local04, #18 wz
2dd94     0C 12 06 A6 |  if_e	mov	arg01, #12
2dd98     00 14 06 A6 |  if_e	mov	arg02, #0
2dd9c     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1215
2dda0                 | LR__4411
2dda0     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1201
2dda4                 | ' 	}
2dda4                 | ' 	deselect();
2dda4                 | ' 
2dda4                 | ' 	return count ? RES_ERROR : RES_OK;
2dda4     00 2A 0E F2 | 	cmp	local03, #0 wz
2dda8     01 2E 06 56 |  if_ne	mov	local05, #1
2ddac     00 2E 06 A6 |  if_e	mov	local05, #0
2ddb0     17 FB 01 F6 | 	mov	result1, local05
2ddb4                 | LR__4412
2ddb4     A7 F0 03 F6 | 	mov	ptra, fp
2ddb8     B2 00 A0 FD | 	call	#popregs_
2ddbc                 | _fatfs_cc_disk_read_ret
2ddbc     2D 00 64 FD | 	ret
2ddc0                 | 
2ddc0                 | _fatfs_cc_disk_write
2ddc0     04 4A 05 F6 | 	mov	COUNT_, #4
2ddc4     A8 00 A0 FD | 	call	#pushregs_
2ddc8     0A 27 02 F6 | 	mov	local01, arg02
2ddcc     0C 29 02 F6 | 	mov	local02, arg04
2ddd0     0B 2B 02 F6 | 	mov	local03, arg03
2ddd4     00 12 0E F2 | 	cmp	arg01, #0 wz
2ddd8     01 FA 05 56 |  if_ne	mov	result1, #1
2dddc                 | ' 
2dddc                 | ' 	return Stat;
2dddc     01 00 00 AF 
2dde0     20 E4 05 A1 |  if_e	add	objptr, ##544
2dde4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2dde8     01 00 00 AF 
2ddec     20 E4 85 A1 |  if_e	sub	objptr, ##544
2ddf0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ddf4     01 FA CD F7 | 	test	result1, #1 wz
2ddf8     03 FA 05 56 |  if_ne	mov	result1, #3
2ddfc     D4 00 90 5D |  if_ne	jmp	#LR__4424
2de00     01 00 00 FF 
2de04     21 E4 05 F1 | 	add	objptr, ##545
2de08     F2 16 C2 FA | 	rdbyte	arg03, objptr
2de0c     01 00 00 FF 
2de10     21 E4 85 F1 | 	sub	objptr, ##545
2de14     08 16 CE F7 | 	test	arg03, #8 wz
2de18     09 2A 66 A0 |  if_e	shl	local03, #9
2de1c     01 28 0E F2 | 	cmp	local02, #1 wz
2de20     30 00 90 5D |  if_ne	jmp	#LR__4420
2de24     18 12 06 F6 | 	mov	arg01, #24
2de28     15 15 02 F6 | 	mov	arg02, local03
2de2c     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2de30     FD 2C 02 F6 | 	mov	local04, result1
2de34     07 2C 4E F7 | 	zerox	local04, #7 wz
2de38     84 00 90 5D |  if_ne	jmp	#LR__4423
2de3c     13 13 02 F6 | 	mov	arg01, local01
2de40     FE 14 06 F6 | 	mov	arg02, #254
2de44     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1211
2de48     00 FA 0D F2 | 	cmp	result1, #0 wz
2de4c     00 28 06 56 |  if_ne	mov	local02, #0
2de50     6C 00 90 FD | 	jmp	#LR__4423
2de54                 | LR__4420
2de54     01 00 00 FF 
2de58     21 E4 05 F1 | 	add	objptr, ##545
2de5c     F2 2C C2 FA | 	rdbyte	local04, objptr
2de60     01 00 00 FF 
2de64     21 E4 85 F1 | 	sub	objptr, ##545
2de68     06 2C CE F7 | 	test	local04, #6 wz
2de6c     97 12 06 56 |  if_ne	mov	arg01, #151
2de70     14 15 02 56 |  if_ne	mov	arg02, local02
2de74     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1215
2de78     15 15 02 F6 | 	mov	arg02, local03
2de7c     19 12 06 F6 | 	mov	arg01, #25
2de80     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2de84     FD 2C 02 F6 | 	mov	local04, result1
2de88     07 2C 4E F7 | 	zerox	local04, #7 wz
2de8c     30 00 90 5D |  if_ne	jmp	#LR__4422
2de90                 | ' 			do {
2de90                 | LR__4421
2de90     13 13 02 F6 | 	mov	arg01, local01
2de94     FC 14 06 F6 | 	mov	arg02, #252
2de98     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1211
2de9c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dea0     01 00 00 5F 
2dea4     00 26 06 51 |  if_ne	add	local01, ##512
2dea8     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4421
2deac     00 12 06 F6 | 	mov	arg01, #0
2deb0     FD 14 06 F6 | 	mov	arg02, #253
2deb4     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1211
2deb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2debc     01 28 06 A6 |  if_e	mov	local02, #1
2dec0                 | LR__4422
2dec0                 | LR__4423
2dec0     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1201
2dec4                 | ' 				count = 1;
2dec4                 | ' 		}
2dec4                 | ' 	}
2dec4                 | ' 	deselect();
2dec4                 | ' 
2dec4                 | ' 	return count ? RES_ERROR : RES_OK;
2dec4     00 28 0E F2 | 	cmp	local02, #0 wz
2dec8     01 2C 06 56 |  if_ne	mov	local04, #1
2decc     00 2C 06 A6 |  if_e	mov	local04, #0
2ded0     16 FB 01 F6 | 	mov	result1, local04
2ded4                 | LR__4424
2ded4     A7 F0 03 F6 | 	mov	ptra, fp
2ded8     B2 00 A0 FD | 	call	#popregs_
2dedc                 | _fatfs_cc_disk_write_ret
2dedc     2D 00 64 FD | 	ret
2dee0                 | 
2dee0                 | _fatfs_cc_disk_ioctl
2dee0     01 4A 05 F6 | 	mov	COUNT_, #1
2dee4     A8 00 A0 FD | 	call	#pushregs_
2dee8     30 F0 07 F1 | 	add	ptra, #48
2deec     04 4E 05 F1 | 	add	fp, #4
2def0     A7 12 42 FC | 	wrbyte	arg01, fp
2def4     04 4E 05 F1 | 	add	fp, #4
2def8     A7 14 42 FC | 	wrbyte	arg02, fp
2defc     04 4E 05 F1 | 	add	fp, #4
2df00     A7 16 62 FC | 	wrlong	arg03, fp
2df04     08 4E 85 F1 | 	sub	fp, #8
2df08     A7 12 CA FA | 	rdbyte	arg01, fp wz
2df0c     04 4E 85 F1 | 	sub	fp, #4
2df10     01 FA 05 56 |  if_ne	mov	result1, #1
2df14                 | ' 
2df14                 | ' 	return Stat;
2df14     01 00 00 AF 
2df18     20 E4 05 A1 |  if_e	add	objptr, ##544
2df1c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2df20     01 00 00 AF 
2df24     20 E4 85 A1 |  if_e	sub	objptr, ##544
2df28     FD FA E1 F8 | 	getbyte	result1, result1, #0
2df2c     01 FA CD F7 | 	test	result1, #1 wz
2df30     03 FA 05 56 |  if_ne	mov	result1, #3
2df34     E4 01 90 5D |  if_ne	jmp	#LR__4438
2df38     10 4E 05 F1 | 	add	fp, #16
2df3c     A7 02 68 FC | 	wrlong	#1, fp
2df40                 | ' 
2df40                 | ' 	res = RES_ERROR;
2df40                 | ' 	switch (ctrl) {
2df40     08 4E 85 F1 | 	sub	fp, #8
2df44     A7 26 C2 FA | 	rdbyte	local01, fp
2df48     08 4E 85 F1 | 	sub	fp, #8
2df4c     04 26 26 F3 | 	fle	local01, #4
2df50     30 26 62 FD | 	jmprel	local01
2df54                 | LR__4430
2df54     10 00 90 FD | 	jmp	#LR__4431
2df58     24 00 90 FD | 	jmp	#LR__4432
2df5c     A0 01 90 FD | 	jmp	#LR__4436
2df60     80 01 90 FD | 	jmp	#LR__4435
2df64     98 01 90 FD | 	jmp	#LR__4436
2df68                 | LR__4431
2df68     B4 79 B0 FD | 	call	#_fatfs_cc_select_1205
2df6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2df70     10 4E 05 51 |  if_ne	add	fp, #16
2df74     A7 00 68 5C |  if_ne	wrlong	#0, fp
2df78     10 4E 85 51 |  if_ne	sub	fp, #16
2df7c                 | ' 			break;
2df7c     8C 01 90 FD | 	jmp	#LR__4437
2df80                 | LR__4432
2df80     09 12 06 F6 | 	mov	arg01, #9
2df84     00 14 06 F6 | 	mov	arg02, #0
2df88     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1215
2df8c     FD 26 02 F6 | 	mov	local01, result1
2df90     07 26 4E F7 | 	zerox	local01, #7 wz
2df94     74 01 90 5D |  if_ne	jmp	#LR__4437
2df98     18 4E 05 F1 | 	add	fp, #24
2df9c     A7 12 02 F6 | 	mov	arg01, fp
2dfa0     18 4E 85 F1 | 	sub	fp, #24
2dfa4     10 14 06 F6 | 	mov	arg02, #16
2dfa8     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1209
2dfac     00 FA 0D F2 | 	cmp	result1, #0 wz
2dfb0     58 01 90 AD |  if_e	jmp	#LR__4437
2dfb4     18 4E 05 F1 | 	add	fp, #24
2dfb8     A7 26 C2 FA | 	rdbyte	local01, fp
2dfbc     18 4E 85 F1 | 	sub	fp, #24
2dfc0     06 26 46 F0 | 	shr	local01, #6
2dfc4     01 26 0E F2 | 	cmp	local01, #1 wz
2dfc8     5C 00 90 5D |  if_ne	jmp	#LR__4433
2dfcc     21 4E 05 F1 | 	add	fp, #33
2dfd0     A7 26 C2 FA | 	rdbyte	local01, fp
2dfd4     01 4E 85 F1 | 	sub	fp, #1
2dfd8     A7 FA C1 FA | 	rdbyte	result1, fp
2dfdc     FD FA 31 F9 | 	getword	result1, result1, #0
2dfe0     08 FA 65 F0 | 	shl	result1, #8
2dfe4     FD 26 02 F1 | 	add	local01, result1
2dfe8     01 4E 85 F1 | 	sub	fp, #1
2dfec     A7 FA C1 FA | 	rdbyte	result1, fp
2dff0     3F FA 05 F5 | 	and	result1, #63
2dff4     10 FA 65 F0 | 	shl	result1, #16
2dff8     FD 26 02 F1 | 	add	local01, result1
2dffc     01 26 06 F1 | 	add	local01, #1
2e000     09 4E 05 F1 | 	add	fp, #9
2e004     A7 26 62 FC | 	wrlong	local01, fp
2e008     1C 4E 85 F1 | 	sub	fp, #28
2e00c     A7 26 02 FB | 	rdlong	local01, fp
2e010     1C 4E 05 F1 | 	add	fp, #28
2e014     A7 FA 01 FB | 	rdlong	result1, fp
2e018     28 4E 85 F1 | 	sub	fp, #40
2e01c     0A FA 65 F0 | 	shl	result1, #10
2e020     13 FB 61 FC | 	wrlong	result1, local01
2e024     AC 00 90 FD | 	jmp	#LR__4434
2e028                 | LR__4433
2e028     1D 4E 05 F1 | 	add	fp, #29
2e02c     A7 26 C2 FA | 	rdbyte	local01, fp
2e030     13 27 42 F8 | 	getnib	local01, local01, #0
2e034     05 4E 05 F1 | 	add	fp, #5
2e038     A7 FA C1 FA | 	rdbyte	result1, fp
2e03c     80 FA 05 F5 | 	and	result1, #128
2e040     07 FA C5 F0 | 	sar	result1, #7
2e044     FD 26 02 F1 | 	add	local01, result1
2e048     01 4E 85 F1 | 	sub	fp, #1
2e04c     A7 FA C1 FA | 	rdbyte	result1, fp
2e050     03 FA 05 F5 | 	and	result1, #3
2e054     01 FA 65 F0 | 	shl	result1, #1
2e058     FD 26 02 F1 | 	add	local01, result1
2e05c     02 26 06 F1 | 	add	local01, #2
2e060     0D 4E 85 F1 | 	sub	fp, #13
2e064     A7 26 42 FC | 	wrbyte	local01, fp
2e068     0C 4E 05 F1 | 	add	fp, #12
2e06c     A7 26 C2 FA | 	rdbyte	local01, fp
2e070     06 26 46 F0 | 	shr	local01, #6
2e074     01 4E 85 F1 | 	sub	fp, #1
2e078     A7 FA C1 FA | 	rdbyte	result1, fp
2e07c     FD FA 31 F9 | 	getword	result1, result1, #0
2e080     02 FA 65 F0 | 	shl	result1, #2
2e084     FD 26 02 F1 | 	add	local01, result1
2e088     01 4E 85 F1 | 	sub	fp, #1
2e08c     A7 FA C1 FA | 	rdbyte	result1, fp
2e090     03 FA 05 F5 | 	and	result1, #3
2e094     FD FA 31 F9 | 	getword	result1, result1, #0
2e098     0A FA 65 F0 | 	shl	result1, #10
2e09c     FD 26 02 F1 | 	add	local01, result1
2e0a0     01 26 06 F1 | 	add	local01, #1
2e0a4     0A 4E 05 F1 | 	add	fp, #10
2e0a8     A7 26 62 FC | 	wrlong	local01, fp
2e0ac     1C 4E 85 F1 | 	sub	fp, #28
2e0b0     A7 26 02 FB | 	rdlong	local01, fp
2e0b4     1C 4E 05 F1 | 	add	fp, #28
2e0b8     A7 FA 01 FB | 	rdlong	result1, fp
2e0bc     14 4E 85 F1 | 	sub	fp, #20
2e0c0     A7 16 C2 FA | 	rdbyte	arg03, fp
2e0c4     14 4E 85 F1 | 	sub	fp, #20
2e0c8     09 16 86 F1 | 	sub	arg03, #9
2e0cc     0B FB 61 F0 | 	shl	result1, arg03
2e0d0     13 FB 61 FC | 	wrlong	result1, local01
2e0d4                 | LR__4434
2e0d4     10 4E 05 F1 | 	add	fp, #16
2e0d8     A7 00 68 FC | 	wrlong	#0, fp
2e0dc     10 4E 85 F1 | 	sub	fp, #16
2e0e0                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2e0e0                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2e0e0                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2e0e0                 | ' 				}
2e0e0                 | ' 				res = RES_OK;
2e0e0                 | ' 			}
2e0e0                 | ' 			break;
2e0e0     28 00 90 FD | 	jmp	#LR__4437
2e0e4                 | LR__4435
2e0e4     0C 4E 05 F1 | 	add	fp, #12
2e0e8     A7 26 02 FB | 	rdlong	local01, fp
2e0ec     13 01 69 FC | 	wrlong	#128, local01
2e0f0     04 4E 05 F1 | 	add	fp, #4
2e0f4     A7 00 68 FC | 	wrlong	#0, fp
2e0f8     10 4E 85 F1 | 	sub	fp, #16
2e0fc                 | ' 			*(DWORD*)buff = 128;
2e0fc                 | ' 			res = RES_OK;
2e0fc                 | ' 			break;
2e0fc     0C 00 90 FD | 	jmp	#LR__4437
2e100                 | LR__4436
2e100     10 4E 05 F1 | 	add	fp, #16
2e104     A7 08 68 FC | 	wrlong	#4, fp
2e108     10 4E 85 F1 | 	sub	fp, #16
2e10c                 | LR__4437
2e10c     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1201
2e110                 | ' 			res = RES_PARERR;
2e110                 | ' 	}
2e110                 | ' 
2e110                 | ' 	deselect();
2e110                 | ' 
2e110                 | ' 	return res;
2e110     10 4E 05 F1 | 	add	fp, #16
2e114     A7 FA 01 FB | 	rdlong	result1, fp
2e118     10 4E 85 F1 | 	sub	fp, #16
2e11c                 | LR__4438
2e11c     A7 F0 03 F6 | 	mov	ptra, fp
2e120     B2 00 A0 FD | 	call	#popregs_
2e124                 | _fatfs_cc_disk_ioctl_ret
2e124     2D 00 64 FD | 	ret
2e128                 | 
2e128                 | _fatfs_cc_disk_setpins
2e128     00 12 0E F2 | 	cmp	arg01, #0 wz
2e12c     01 FA 65 56 |  if_ne	neg	result1, #1
2e130     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2e134     01 00 00 FF 
2e138     10 E4 05 F1 | 	add	objptr, ##528
2e13c     F2 14 62 FC | 	wrlong	arg02, objptr
2e140     04 E4 05 F1 | 	add	objptr, #4
2e144     F2 16 62 FC | 	wrlong	arg03, objptr
2e148     04 E4 05 F1 | 	add	objptr, #4
2e14c     F2 18 62 FC | 	wrlong	arg04, objptr
2e150     04 E4 05 F1 | 	add	objptr, #4
2e154     F2 1A 62 FC | 	wrlong	arg05, objptr
2e158     01 00 00 FF 
2e15c     1C E4 85 F1 | 	sub	objptr, ##540
2e160     00 FA 05 F6 | 	mov	result1, #0
2e164                 | _fatfs_cc_disk_setpins_ret
2e164     2D 00 64 FD | 	ret
2e168                 | 
2e168                 | _fatfs_cc_tchar2uni
2e168     09 01 02 FB | 	rdlong	_var01, arg01
2e16c     00 03 02 F6 | 	mov	_var02, _var01
2e170     01 00 06 F1 | 	add	_var01, #1
2e174     00 05 02 F6 | 	mov	_var03, _var01
2e178     01 07 C2 FA | 	rdbyte	_var04, _var02
2e17c     80 06 CE F7 | 	test	_var04, #128 wz
2e180     E8 00 90 AD |  if_e	jmp	#LR__4447
2e184     03 09 02 F6 | 	mov	_var05, _var04
2e188     E0 08 06 F5 | 	and	_var05, #224
2e18c     C0 08 0E F2 | 	cmp	_var05, #192 wz
2e190     1F 06 06 A5 |  if_e	and	_var04, #31
2e194     01 0A 06 A6 |  if_e	mov	_var06, #1
2e198     34 00 90 AD |  if_e	jmp	#LR__4441
2e19c     03 09 02 F6 | 	mov	_var05, _var04
2e1a0     F0 08 06 F5 | 	and	_var05, #240
2e1a4     E0 08 0E F2 | 	cmp	_var05, #224 wz
2e1a8     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2e1ac     02 0A 06 A6 |  if_e	mov	_var06, #2
2e1b0     1C 00 90 AD |  if_e	jmp	#LR__4440
2e1b4     03 09 02 F6 | 	mov	_var05, _var04
2e1b8     F8 08 06 F5 | 	and	_var05, #248
2e1bc     F0 08 0E F2 | 	cmp	_var05, #240 wz
2e1c0     07 06 06 A5 |  if_e	and	_var04, #7
2e1c4     03 0A 06 A6 |  if_e	mov	_var06, #3
2e1c8                 | ' 			return 0xFFFFFFFF;
2e1c8     01 FA 65 56 |  if_ne	neg	result1, #1
2e1cc     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e1d0                 | LR__4440
2e1d0                 | LR__4441
2e1d0                 | ' 		}
2e1d0                 | ' 		do {
2e1d0                 | LR__4442
2e1d0     02 0D C2 FA | 	rdbyte	_var07, _var03
2e1d4     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2e1d8     C0 08 06 F5 | 	and	_var05, #192
2e1dc     80 08 0E F2 | 	cmp	_var05, #128 wz
2e1e0     01 04 06 F1 | 	add	_var03, #1
2e1e4     01 FA 65 56 |  if_ne	neg	result1, #1
2e1e8     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e1ec     06 06 66 F0 | 	shl	_var04, #6
2e1f0     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2e1f4     3F 02 06 F5 | 	and	_var02, #63
2e1f8     01 07 42 F5 | 	or	_var04, _var02
2e1fc     F4 0B 6E FB | 	djnz	_var06, #LR__4442
2e200     80 06 16 F2 | 	cmp	_var04, #128 wc
2e204     24 00 90 CD |  if_b	jmp	#LR__4444
2e208     6C 00 00 FF 
2e20c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2e210     0C 00 90 CD |  if_b	jmp	#LR__4443
2e214     70 00 00 FF 
2e218     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2e21c     0C 00 90 CD |  if_b	jmp	#LR__4444
2e220                 | LR__4443
2e220     80 08 00 FF 
2e224     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2e228     08 00 90 CD |  if_b	jmp	#LR__4445
2e22c                 | LR__4444
2e22c     01 FA 65 F6 | 	neg	result1, #1
2e230     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2e234                 | LR__4445
2e234     80 00 00 FF 
2e238     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2e23c     2C 00 90 CD |  if_b	jmp	#LR__4446
2e240     03 03 02 F6 | 	mov	_var02, _var04
2e244     80 00 00 FF 
2e248     00 02 86 F1 | 	sub	_var02, ##65536
2e24c     06 02 66 F0 | 	shl	_var02, #6
2e250     80 FF 01 FF 
2e254     00 02 06 F5 | 	and	_var02, ##67043328
2e258     6E 00 6C FF 
2e25c     00 08 06 F6 | 	mov	_var05, ##-671032320
2e260     01 09 42 F5 | 	or	_var05, _var02
2e264     09 06 46 F7 | 	zerox	_var04, #9
2e268     04 07 42 F5 | 	or	_var04, _var05
2e26c                 | LR__4446
2e26c                 | LR__4447
2e26c     09 05 62 FC | 	wrlong	_var03, arg01
2e270                 | ' 	}
2e270                 | ' #line 811 "ff.c"
2e270                 | ' 	*str = p;
2e270                 | ' 	return uc;
2e270     03 FB 01 F6 | 	mov	result1, _var04
2e274                 | _fatfs_cc_tchar2uni_ret
2e274     2D 00 64 FD | 	ret
2e278                 | 
2e278                 | _fatfs_cc_put_utf
2e278     80 12 16 F2 | 	cmp	arg01, #128 wc
2e27c     18 00 90 3D |  if_ae	jmp	#LR__4450
2e280     01 16 16 F2 | 	cmp	arg03, #1 wc
2e284     00 FA 05 C6 |  if_b	mov	result1, #0
2e288     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e28c     0A 13 42 FC | 	wrbyte	arg01, arg02
2e290                 | ' 		*buf = (TCHAR)chr;
2e290                 | ' 		return 1;
2e290     01 FA 05 F6 | 	mov	result1, #1
2e294     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e298                 | LR__4450
2e298     04 00 00 FF 
2e29c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2e2a0     40 00 90 3D |  if_ae	jmp	#LR__4451
2e2a4     02 16 16 F2 | 	cmp	arg03, #2 wc
2e2a8     00 FA 05 C6 |  if_b	mov	result1, #0
2e2ac     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e2b0     09 FB 01 F6 | 	mov	result1, arg01
2e2b4     06 FA 45 F0 | 	shr	result1, #6
2e2b8     1F FA 05 F5 | 	and	result1, #31
2e2bc     C0 16 06 F6 | 	mov	arg03, #192
2e2c0     FD 16 42 F5 | 	or	arg03, result1
2e2c4     0A 17 42 FC | 	wrbyte	arg03, arg02
2e2c8     01 14 06 F1 | 	add	arg02, #1
2e2cc     3F 12 06 F5 | 	and	arg01, #63
2e2d0     80 FA 05 F6 | 	mov	result1, #128
2e2d4     09 FB 41 F5 | 	or	result1, arg01
2e2d8     0A FB 41 FC | 	wrbyte	result1, arg02
2e2dc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2e2dc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e2dc                 | ' 		return 2;
2e2dc     02 FA 05 F6 | 	mov	result1, #2
2e2e0     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e2e4                 | LR__4451
2e2e4     80 00 00 FF 
2e2e8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2e2ec     70 00 90 3D |  if_ae	jmp	#LR__4454
2e2f0     03 16 16 F2 | 	cmp	arg03, #3 wc
2e2f4     18 00 90 CD |  if_b	jmp	#LR__4452
2e2f8     6C 00 00 FF 
2e2fc     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2e300     14 00 90 CD |  if_b	jmp	#LR__4453
2e304     70 00 00 FF 
2e308     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2e30c     08 00 90 3D |  if_ae	jmp	#LR__4453
2e310                 | LR__4452
2e310     00 FA 05 F6 | 	mov	result1, #0
2e314     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e318                 | LR__4453
2e318     09 FB 59 F8 | 	getnib	result1, arg01, #3
2e31c     E0 16 06 F6 | 	mov	arg03, #224
2e320     FD 16 42 F5 | 	or	arg03, result1
2e324     0A 17 42 FC | 	wrbyte	arg03, arg02
2e328     01 14 06 F1 | 	add	arg02, #1
2e32c     09 FB 01 F6 | 	mov	result1, arg01
2e330     06 FA 45 F0 | 	shr	result1, #6
2e334     3F FA 05 F5 | 	and	result1, #63
2e338     80 16 06 F6 | 	mov	arg03, #128
2e33c     FD 16 42 F5 | 	or	arg03, result1
2e340     0A 17 42 FC | 	wrbyte	arg03, arg02
2e344     01 14 06 F1 | 	add	arg02, #1
2e348     3F 12 06 F5 | 	and	arg01, #63
2e34c     80 FA 05 F6 | 	mov	result1, #128
2e350     09 FB 41 F5 | 	or	result1, arg01
2e354     0A FB 41 FC | 	wrbyte	result1, arg02
2e358                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2e358                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e358                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e358                 | ' 		return 3;
2e358     03 FA 05 F6 | 	mov	result1, #3
2e35c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e360                 | LR__4454
2e360     04 16 16 F2 | 	cmp	arg03, #4 wc
2e364     00 FA 05 C6 |  if_b	mov	result1, #0
2e368     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e36c     09 01 02 F6 | 	mov	_var01, arg01
2e370     E0 01 06 F4 | 	bitl	_var01, #480
2e374     00 00 6C FF 
2e378     00 00 86 F1 | 	sub	_var01, ##-671088640
2e37c     06 00 46 F0 | 	shr	_var01, #6
2e380     09 13 32 F9 | 	getword	arg01, arg01, #0
2e384     6E 00 00 FF 
2e388     00 12 86 F1 | 	sub	arg01, ##56320
2e38c     00 08 00 FF 
2e390     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2e394     02 00 00 CF 
2e398     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2e39c     00 FA 05 36 |  if_ae	mov	result1, #0
2e3a0     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2e3a4     09 01 42 F5 | 	or	_var01, arg01
2e3a8     80 00 00 FF 
2e3ac     00 00 06 F1 | 	add	_var01, ##65536
2e3b0     00 FB 01 F6 | 	mov	result1, _var01
2e3b4     12 FA 45 F0 | 	shr	result1, #18
2e3b8     07 FA 05 F5 | 	and	result1, #7
2e3bc     F0 16 06 F6 | 	mov	arg03, #240
2e3c0     FD 16 42 F5 | 	or	arg03, result1
2e3c4     0A 17 42 FC | 	wrbyte	arg03, arg02
2e3c8     01 14 06 F1 | 	add	arg02, #1
2e3cc     00 FB 01 F6 | 	mov	result1, _var01
2e3d0     0C FA 45 F0 | 	shr	result1, #12
2e3d4     3F FA 05 F5 | 	and	result1, #63
2e3d8     80 16 06 F6 | 	mov	arg03, #128
2e3dc     FD 16 42 F5 | 	or	arg03, result1
2e3e0     0A 17 42 FC | 	wrbyte	arg03, arg02
2e3e4     01 14 06 F1 | 	add	arg02, #1
2e3e8     00 FB 01 F6 | 	mov	result1, _var01
2e3ec     06 FA 45 F0 | 	shr	result1, #6
2e3f0     3F FA 05 F5 | 	and	result1, #63
2e3f4     80 16 06 F6 | 	mov	arg03, #128
2e3f8     FD 16 42 F5 | 	or	arg03, result1
2e3fc     0A 17 42 FC | 	wrbyte	arg03, arg02
2e400     01 14 06 F1 | 	add	arg02, #1
2e404     3F 00 06 F5 | 	and	_var01, #63
2e408     80 FA 05 F6 | 	mov	result1, #128
2e40c     00 FB 41 F5 | 	or	result1, _var01
2e410     0A FB 41 FC | 	wrbyte	result1, arg02
2e414                 | ' 	chr = (hc | chr) + 0x10000;
2e414                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2e414                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2e414                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e414                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e414                 | ' 	return 4;
2e414     04 FA 05 F6 | 	mov	result1, #4
2e418                 | _fatfs_cc_put_utf_ret
2e418     2D 00 64 FD | 	ret
2e41c                 | 
2e41c                 | _fatfs_cc_sync_window
2e41c     02 4A 05 F6 | 	mov	COUNT_, #2
2e420     A8 00 A0 FD | 	call	#pushregs_
2e424     09 27 02 F6 | 	mov	local01, arg01
2e428     00 28 06 F6 | 	mov	local02, #0
2e42c     03 26 06 F1 | 	add	local01, #3
2e430     13 FB C9 FA | 	rdbyte	result1, local01 wz
2e434     03 26 86 F1 | 	sub	local01, #3
2e438     A4 00 90 AD |  if_e	jmp	#LR__4462
2e43c     01 26 06 F1 | 	add	local01, #1
2e440     13 13 C2 FA | 	rdbyte	arg01, local01
2e444     33 26 06 F1 | 	add	local01, #51
2e448     13 15 02 F6 | 	mov	arg02, local01
2e44c     04 26 86 F1 | 	sub	local01, #4
2e450     13 17 02 FB | 	rdlong	arg03, local01
2e454     30 26 86 F1 | 	sub	local01, #48
2e458     01 18 06 F6 | 	mov	arg04, #1
2e45c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2e460     00 FA 0D F2 | 	cmp	result1, #0 wz
2e464     74 00 90 5D |  if_ne	jmp	#LR__4460
2e468     03 26 06 F1 | 	add	local01, #3
2e46c     13 01 48 FC | 	wrbyte	#0, local01
2e470     2D 26 06 F1 | 	add	local01, #45
2e474     13 FB 01 FB | 	rdlong	result1, local01
2e478     0C 26 86 F1 | 	sub	local01, #12
2e47c     13 19 02 FB | 	rdlong	arg04, local01
2e480     0C FB 81 F1 | 	sub	result1, arg04
2e484     08 26 86 F1 | 	sub	local01, #8
2e488     13 19 02 FB | 	rdlong	arg04, local01
2e48c     1C 26 86 F1 | 	sub	local01, #28
2e490     0C FB 11 F2 | 	cmp	result1, arg04 wc
2e494     48 00 90 3D |  if_ae	jmp	#LR__4461
2e498     02 26 06 F1 | 	add	local01, #2
2e49c     13 19 C2 FA | 	rdbyte	arg04, local01
2e4a0     02 26 86 F1 | 	sub	local01, #2
2e4a4     02 18 0E F2 | 	cmp	arg04, #2 wz
2e4a8     34 00 90 5D |  if_ne	jmp	#LR__4461
2e4ac     01 26 06 F1 | 	add	local01, #1
2e4b0     13 13 C2 FA | 	rdbyte	arg01, local01
2e4b4     33 26 06 F1 | 	add	local01, #51
2e4b8     13 15 02 F6 | 	mov	arg02, local01
2e4bc     04 26 86 F1 | 	sub	local01, #4
2e4c0     13 17 02 FB | 	rdlong	arg03, local01
2e4c4     14 26 86 F1 | 	sub	local01, #20
2e4c8     13 27 02 FB | 	rdlong	local01, local01
2e4cc     13 17 02 F1 | 	add	arg03, local01
2e4d0     01 18 06 F6 | 	mov	arg04, #1
2e4d4     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2e4d8     04 00 90 FD | 	jmp	#LR__4461
2e4dc                 | LR__4460
2e4dc     01 28 06 F6 | 	mov	local02, #1
2e4e0                 | LR__4461
2e4e0                 | LR__4462
2e4e0                 | ' 			res = FR_DISK_ERR;
2e4e0                 | ' 		}
2e4e0                 | ' 	}
2e4e0                 | ' 	return res;
2e4e0     14 FB 01 F6 | 	mov	result1, local02
2e4e4     A7 F0 03 F6 | 	mov	ptra, fp
2e4e8     B2 00 A0 FD | 	call	#popregs_
2e4ec                 | _fatfs_cc_sync_window_ret
2e4ec     2D 00 64 FD | 	ret
2e4f0                 | 
2e4f0                 | _fatfs_cc_move_window
2e4f0     03 4A 05 F6 | 	mov	COUNT_, #3
2e4f4     A8 00 A0 FD | 	call	#pushregs_
2e4f8     09 27 02 F6 | 	mov	local01, arg01
2e4fc     0A 29 02 F6 | 	mov	local02, arg02
2e500     00 2A 06 F6 | 	mov	local03, #0
2e504     30 26 06 F1 | 	add	local01, #48
2e508     13 19 02 FB | 	rdlong	arg04, local01
2e50c     30 26 86 F1 | 	sub	local01, #48
2e510     0C 29 0A F2 | 	cmp	local02, arg04 wz
2e514     40 00 90 AD |  if_e	jmp	#LR__4471
2e518     13 13 02 F6 | 	mov	arg01, local01
2e51c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2e520     FD 2A 0A F6 | 	mov	local03, result1 wz
2e524     30 00 90 5D |  if_ne	jmp	#LR__4470
2e528     01 26 06 F1 | 	add	local01, #1
2e52c     13 13 C2 FA | 	rdbyte	arg01, local01
2e530     33 26 06 F1 | 	add	local01, #51
2e534     13 15 02 F6 | 	mov	arg02, local01
2e538     14 17 02 F6 | 	mov	arg03, local02
2e53c     01 18 06 F6 | 	mov	arg04, #1
2e540     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2e544     00 FA 0D F2 | 	cmp	result1, #0 wz
2e548     01 28 66 56 |  if_ne	neg	local02, #1
2e54c     01 2A 06 56 |  if_ne	mov	local03, #1
2e550     04 26 86 F1 | 	sub	local01, #4
2e554     13 29 62 FC | 	wrlong	local02, local01
2e558                 | LR__4470
2e558                 | LR__4471
2e558                 | ' 				sect = (LBA_t)0 - 1;
2e558                 | ' 				res = FR_DISK_ERR;
2e558                 | ' 			}
2e558                 | ' 			fs->winsect = sect;
2e558                 | ' 		}
2e558                 | ' 	}
2e558                 | ' 	return res;
2e558     15 FB 01 F6 | 	mov	result1, local03
2e55c     A7 F0 03 F6 | 	mov	ptra, fp
2e560     B2 00 A0 FD | 	call	#popregs_
2e564                 | _fatfs_cc_move_window_ret
2e564     2D 00 64 FD | 	ret
2e568                 | 
2e568                 | _fatfs_cc_sync_fs
2e568     02 4A 05 F6 | 	mov	COUNT_, #2
2e56c     A8 00 A0 FD | 	call	#pushregs_
2e570     09 27 02 F6 | 	mov	local01, arg01
2e574     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2e578     FD 28 0A F6 | 	mov	local02, result1 wz
2e57c     D8 00 90 5D |  if_ne	jmp	#LR__4481
2e580     13 19 C2 FA | 	rdbyte	arg04, local01
2e584     03 18 0E F2 | 	cmp	arg04, #3 wz
2e588     04 26 06 A1 |  if_e	add	local01, #4
2e58c     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2e590     04 26 86 A1 |  if_e	sub	local01, #4
2e594     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2e598     A0 00 90 5D |  if_ne	jmp	#LR__4480
2e59c     34 26 06 F1 | 	add	local01, #52
2e5a0     13 13 02 F6 | 	mov	arg01, local01
2e5a4     00 14 06 F6 | 	mov	arg02, #0
2e5a8     09 16 C6 F9 | 	decod	arg03, #9
2e5ac     98 00 A0 FD | 	call	#\builtin_bytefill_
2e5b0     13 13 02 F6 | 	mov	arg01, local01
2e5b4     FE 13 06 F1 | 	add	arg01, #510
2e5b8     55 00 80 FF 
2e5bc     09 AB 58 FC | 	wrword	##43605, arg01
2e5c0     A9 B0 A0 FF 
2e5c4     13 A5 68 FC | 	wrlong	##1096897106, local01
2e5c8     13 13 02 F6 | 	mov	arg01, local01
2e5cc     E4 13 06 F1 | 	add	arg01, #484
2e5d0     B9 A0 B0 FF 
2e5d4     09 E5 68 FC | 	wrlong	##1631679090, arg01
2e5d8     13 13 02 F6 | 	mov	arg01, local01
2e5dc     E8 13 06 F1 | 	add	arg01, #488
2e5e0     20 26 86 F1 | 	sub	local01, #32
2e5e4     13 15 02 FB | 	rdlong	arg02, local01
2e5e8     09 15 62 FC | 	wrlong	arg02, arg01
2e5ec     20 26 06 F1 | 	add	local01, #32
2e5f0     13 13 02 F6 | 	mov	arg01, local01
2e5f4     EC 13 06 F1 | 	add	arg01, #492
2e5f8     24 26 86 F1 | 	sub	local01, #36
2e5fc     13 15 02 FB | 	rdlong	arg02, local01
2e600     09 15 62 FC | 	wrlong	arg02, arg01
2e604     10 26 06 F1 | 	add	local01, #16
2e608     13 17 02 FB | 	rdlong	arg03, local01
2e60c     01 16 06 F1 | 	add	arg03, #1
2e610     10 26 06 F1 | 	add	local01, #16
2e614     13 17 62 FC | 	wrlong	arg03, local01
2e618     2F 26 86 F1 | 	sub	local01, #47
2e61c     13 13 C2 FA | 	rdbyte	arg01, local01
2e620     33 26 06 F1 | 	add	local01, #51
2e624     13 15 02 F6 | 	mov	arg02, local01
2e628     01 18 06 F6 | 	mov	arg04, #1
2e62c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2e630     30 26 86 F1 | 	sub	local01, #48
2e634     13 01 48 FC | 	wrbyte	#0, local01
2e638     04 26 86 F1 | 	sub	local01, #4
2e63c                 | LR__4480
2e63c     01 26 06 F1 | 	add	local01, #1
2e640     13 13 C2 FA | 	rdbyte	arg01, local01
2e644     00 14 06 F6 | 	mov	arg02, #0
2e648     00 16 06 F6 | 	mov	arg03, #0
2e64c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2e650     00 FA 0D F2 | 	cmp	result1, #0 wz
2e654     01 28 06 56 |  if_ne	mov	local02, #1
2e658                 | LR__4481
2e658                 | ' 	}
2e658                 | ' 
2e658                 | ' 	return res;
2e658     14 FB 01 F6 | 	mov	result1, local02
2e65c     A7 F0 03 F6 | 	mov	ptra, fp
2e660     B2 00 A0 FD | 	call	#popregs_
2e664                 | _fatfs_cc_sync_fs_ret
2e664     2D 00 64 FD | 	ret
2e668                 | 
2e668                 | _fatfs_cc_clst2sect
2e668     02 14 86 F1 | 	sub	arg02, #2
2e66c     18 12 06 F1 | 	add	arg01, #24
2e670     09 01 02 FB | 	rdlong	_var01, arg01
2e674     18 12 86 F1 | 	sub	arg01, #24
2e678     02 00 86 F1 | 	sub	_var01, #2
2e67c     00 15 12 F2 | 	cmp	arg02, _var01 wc
2e680     00 FA 05 36 |  if_ae	mov	result1, #0
2e684     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2e688     0A 12 06 F1 | 	add	arg01, #10
2e68c     09 01 E2 FA | 	rdword	_var01, arg01
2e690     0A 01 02 FD | 	qmul	_var01, arg02
2e694                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2e694     22 12 06 F1 | 	add	arg01, #34
2e698     09 FB 01 FB | 	rdlong	result1, arg01
2e69c     18 00 62 FD | 	getqx	_var01
2e6a0     00 FB 01 F1 | 	add	result1, _var01
2e6a4                 | _fatfs_cc_clst2sect_ret
2e6a4     2D 00 64 FD | 	ret
2e6a8                 | 
2e6a8                 | _fatfs_cc_get_fat
2e6a8     07 4A 05 F6 | 	mov	COUNT_, #7
2e6ac     A8 00 A0 FD | 	call	#pushregs_
2e6b0     0A 27 02 F6 | 	mov	local01, arg02
2e6b4     09 29 02 FB | 	rdlong	local02, arg01
2e6b8     02 26 16 F2 | 	cmp	local01, #2 wc
2e6bc     14 00 90 CD |  if_b	jmp	#LR__4490
2e6c0     18 28 06 F1 | 	add	local02, #24
2e6c4     14 2B 02 FB | 	rdlong	local03, local02
2e6c8     18 28 86 F1 | 	sub	local02, #24
2e6cc     15 27 12 F2 | 	cmp	local01, local03 wc
2e6d0     08 00 90 CD |  if_b	jmp	#LR__4491
2e6d4                 | LR__4490
2e6d4     01 2C 06 F6 | 	mov	local04, #1
2e6d8     60 01 90 FD | 	jmp	#LR__4498
2e6dc                 | LR__4491
2e6dc     01 2C 66 F6 | 	neg	local04, #1
2e6e0                 | ' 		val = 0xFFFFFFFF;
2e6e0                 | ' 
2e6e0                 | ' 		switch (fs->fs_type) {
2e6e0     14 2F C2 FA | 	rdbyte	local05, local02
2e6e4     01 2E 86 F1 | 	sub	local05, #1
2e6e8     03 2E 26 F3 | 	fle	local05, #3
2e6ec     30 2E 62 FD | 	jmprel	local05
2e6f0                 | LR__4492
2e6f0     0C 00 90 FD | 	jmp	#LR__4493
2e6f4     B8 00 90 FD | 	jmp	#LR__4494
2e6f8     F8 00 90 FD | 	jmp	#LR__4495
2e6fc     38 01 90 FD | 	jmp	#LR__4496
2e700                 | LR__4493
2e700     13 2F 02 F6 | 	mov	local05, local01
2e704     13 13 02 F6 | 	mov	arg01, local01
2e708     01 12 46 F0 | 	shr	arg01, #1
2e70c     09 2F 02 F1 | 	add	local05, arg01
2e710     14 13 02 F6 | 	mov	arg01, local02
2e714     17 31 02 F6 | 	mov	local06, local05
2e718     09 30 46 F0 | 	shr	local06, #9
2e71c     24 28 06 F1 | 	add	local02, #36
2e720     14 15 02 FB | 	rdlong	arg02, local02
2e724     24 28 86 F1 | 	sub	local02, #36
2e728     18 15 02 F1 | 	add	arg02, local06
2e72c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2e730     00 FA 0D F2 | 	cmp	result1, #0 wz
2e734     04 01 90 5D |  if_ne	jmp	#LR__4497
2e738     17 31 02 F6 | 	mov	local06, local05
2e73c     FF 31 06 F5 | 	and	local06, #511
2e740     34 28 06 F1 | 	add	local02, #52
2e744     14 31 02 F1 | 	add	local06, local02
2e748     18 33 C2 FA | 	rdbyte	local07, local06
2e74c     34 28 86 F1 | 	sub	local02, #52
2e750     14 13 02 F6 | 	mov	arg01, local02
2e754     01 2E 06 F1 | 	add	local05, #1
2e758     17 31 02 F6 | 	mov	local06, local05
2e75c     09 30 46 F0 | 	shr	local06, #9
2e760     24 28 06 F1 | 	add	local02, #36
2e764     14 15 02 FB | 	rdlong	arg02, local02
2e768     24 28 86 F1 | 	sub	local02, #36
2e76c     18 15 02 F1 | 	add	arg02, local06
2e770     7C FD BF FD | 	call	#_fatfs_cc_move_window
2e774     00 FA 0D F2 | 	cmp	result1, #0 wz
2e778     C0 00 90 5D |  if_ne	jmp	#LR__4497
2e77c     FF 2F 06 F5 | 	and	local05, #511
2e780     34 28 06 F1 | 	add	local02, #52
2e784     14 2F 02 F1 | 	add	local05, local02
2e788     17 31 C2 FA | 	rdbyte	local06, local05
2e78c     08 30 66 F0 | 	shl	local06, #8
2e790     18 33 42 F5 | 	or	local07, local06
2e794     01 26 CE F7 | 	test	local01, #1 wz
2e798     04 32 46 50 |  if_ne	shr	local07, #4
2e79c     19 2B 02 56 |  if_ne	mov	local03, local07
2e7a0     0B 32 46 A7 |  if_e	zerox	local07, #11
2e7a4     19 2B 02 A6 |  if_e	mov	local03, local07
2e7a8     15 2D 02 F6 | 	mov	local04, local03
2e7ac                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2e7ac                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2e7ac                 | ' 			break;
2e7ac     8C 00 90 FD | 	jmp	#LR__4497
2e7b0                 | LR__4494
2e7b0     14 13 02 F6 | 	mov	arg01, local02
2e7b4     13 31 02 F6 | 	mov	local06, local01
2e7b8     08 30 46 F0 | 	shr	local06, #8
2e7bc     24 28 06 F1 | 	add	local02, #36
2e7c0     14 15 02 FB | 	rdlong	arg02, local02
2e7c4     24 28 86 F1 | 	sub	local02, #36
2e7c8     18 15 02 F1 | 	add	arg02, local06
2e7cc     20 FD BF FD | 	call	#_fatfs_cc_move_window
2e7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7d4     64 00 90 5D |  if_ne	jmp	#LR__4497
2e7d8     34 28 06 F1 | 	add	local02, #52
2e7dc     01 26 66 F0 | 	shl	local01, #1
2e7e0     FF 27 06 F5 | 	and	local01, #511
2e7e4     13 29 02 F1 | 	add	local02, local01
2e7e8                 | ' {
2e7e8                 | ' 
2e7e8                 | ' 	return *((WORD*)ptr);
2e7e8     14 FB E1 FA | 	rdword	result1, local02
2e7ec     FD 2C 32 F9 | 	getword	local04, result1, #0
2e7f0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2e7f0                 | ' 			break;
2e7f0     48 00 90 FD | 	jmp	#LR__4497
2e7f4                 | LR__4495
2e7f4     14 13 02 F6 | 	mov	arg01, local02
2e7f8     13 31 02 F6 | 	mov	local06, local01
2e7fc     07 30 46 F0 | 	shr	local06, #7
2e800     24 28 06 F1 | 	add	local02, #36
2e804     14 15 02 FB | 	rdlong	arg02, local02
2e808     24 28 86 F1 | 	sub	local02, #36
2e80c     18 15 02 F1 | 	add	arg02, local06
2e810     DC FC BF FD | 	call	#_fatfs_cc_move_window
2e814     00 FA 0D F2 | 	cmp	result1, #0 wz
2e818     20 00 90 5D |  if_ne	jmp	#LR__4497
2e81c     34 28 06 F1 | 	add	local02, #52
2e820     02 26 66 F0 | 	shl	local01, #2
2e824     FF 27 06 F5 | 	and	local01, #511
2e828     13 29 02 F1 | 	add	local02, local01
2e82c                 | ' {
2e82c                 | ' 
2e82c                 | ' 	return *((DWORD*)ptr);
2e82c     14 2D 02 FB | 	rdlong	local04, local02
2e830     7C 2C 06 F4 | 	bitl	local04, #124
2e834                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2e834                 | ' 			break;
2e834     04 00 90 FD | 	jmp	#LR__4497
2e838                 | LR__4496
2e838     01 2C 06 F6 | 	mov	local04, #1
2e83c                 | LR__4497
2e83c                 | LR__4498
2e83c                 | ' 			val = 1;
2e83c                 | ' 		}
2e83c                 | ' 	}
2e83c                 | ' 
2e83c                 | ' 	return val;
2e83c     16 FB 01 F6 | 	mov	result1, local04
2e840     A7 F0 03 F6 | 	mov	ptra, fp
2e844     B2 00 A0 FD | 	call	#popregs_
2e848                 | _fatfs_cc_get_fat_ret
2e848     2D 00 64 FD | 	ret
2e84c                 | 
2e84c                 | _fatfs_cc_put_fat
2e84c     08 4A 05 F6 | 	mov	COUNT_, #8
2e850     A8 00 A0 FD | 	call	#pushregs_
2e854     09 27 02 F6 | 	mov	local01, arg01
2e858     0A 29 02 F6 | 	mov	local02, arg02
2e85c     0B 2B 02 F6 | 	mov	local03, arg03
2e860     02 2C 06 F6 | 	mov	local04, #2
2e864     02 28 16 F2 | 	cmp	local02, #2 wc
2e868     E0 01 90 CD |  if_b	jmp	#LR__4507
2e86c     18 26 06 F1 | 	add	local01, #24
2e870     13 2F 02 FB | 	rdlong	local05, local01
2e874     18 26 86 F1 | 	sub	local01, #24
2e878     17 29 12 F2 | 	cmp	local02, local05 wc
2e87c     CC 01 90 3D |  if_ae	jmp	#LR__4507
2e880                 | ' 		switch (fs->fs_type) {
2e880     13 31 C2 FA | 	rdbyte	local06, local01
2e884     01 30 86 F1 | 	sub	local06, #1
2e888     03 30 26 F3 | 	fle	local06, #3
2e88c     30 30 62 FD | 	jmprel	local06
2e890                 | LR__4500
2e890     0C 00 90 FD | 	jmp	#LR__4501
2e894     F8 00 90 FD | 	jmp	#LR__4504
2e898     40 01 90 FD | 	jmp	#LR__4505
2e89c     AC 01 90 FD | 	jmp	#LR__4506
2e8a0                 | LR__4501
2e8a0     14 33 02 F6 | 	mov	local07, local02
2e8a4     14 2F 02 F6 | 	mov	local05, local02
2e8a8     01 2E 46 F0 | 	shr	local05, #1
2e8ac     17 33 02 F1 | 	add	local07, local05
2e8b0     13 13 02 F6 | 	mov	arg01, local01
2e8b4     19 31 02 F6 | 	mov	local06, local07
2e8b8     09 30 46 F0 | 	shr	local06, #9
2e8bc     24 26 06 F1 | 	add	local01, #36
2e8c0     13 15 02 FB | 	rdlong	arg02, local01
2e8c4     24 26 86 F1 | 	sub	local01, #36
2e8c8     18 15 02 F1 | 	add	arg02, local06
2e8cc     20 FC BF FD | 	call	#_fatfs_cc_move_window
2e8d0     FD 2C 0A F6 | 	mov	local04, result1 wz
2e8d4     74 01 90 5D |  if_ne	jmp	#LR__4506
2e8d8     34 26 06 F1 | 	add	local01, #52
2e8dc     13 35 02 F6 | 	mov	local08, local01
2e8e0     19 2F 02 F6 | 	mov	local05, local07
2e8e4     FF 2F 06 F5 | 	and	local05, #511
2e8e8     17 35 02 F1 | 	add	local08, local05
2e8ec     01 28 CE F7 | 	test	local02, #1 wz
2e8f0     34 26 86 F1 | 	sub	local01, #52
2e8f4     01 32 06 F1 | 	add	local07, #1
2e8f8     18 00 90 AD |  if_e	jmp	#LR__4502
2e8fc     1A 2F C2 FA | 	rdbyte	local05, local08
2e900     17 2F 42 F8 | 	getnib	local05, local05, #0
2e904     15 31 E2 F8 | 	getbyte	local06, local03, #0
2e908     04 30 66 F0 | 	shl	local06, #4
2e90c     18 2F 42 F5 | 	or	local05, local06
2e910     04 00 90 FD | 	jmp	#LR__4503
2e914                 | LR__4502
2e914     15 2F 02 F6 | 	mov	local05, local03
2e918                 | LR__4503
2e918     1A 2F 42 FC | 	wrbyte	local05, local08
2e91c     03 26 06 F1 | 	add	local01, #3
2e920     13 03 48 FC | 	wrbyte	#1, local01
2e924     03 26 86 F1 | 	sub	local01, #3
2e928     13 13 02 F6 | 	mov	arg01, local01
2e92c     19 35 02 F6 | 	mov	local08, local07
2e930     09 34 46 F0 | 	shr	local08, #9
2e934     24 26 06 F1 | 	add	local01, #36
2e938     13 15 02 FB | 	rdlong	arg02, local01
2e93c     24 26 86 F1 | 	sub	local01, #36
2e940     1A 15 02 F1 | 	add	arg02, local08
2e944     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2e948     FD 2C 0A F6 | 	mov	local04, result1 wz
2e94c     FC 00 90 5D |  if_ne	jmp	#LR__4506
2e950     34 26 06 F1 | 	add	local01, #52
2e954     13 35 02 F6 | 	mov	local08, local01
2e958     FF 33 06 F5 | 	and	local07, #511
2e95c     19 35 02 F1 | 	add	local08, local07
2e960     01 28 CE F7 | 	test	local02, #1 wz
2e964     04 2A 46 50 |  if_ne	shr	local03, #4
2e968     15 2F 02 56 |  if_ne	mov	local05, local03
2e96c     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2e970     F0 2E 06 A5 |  if_e	and	local05, #240
2e974     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2e978     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2e97c     15 2F 42 A5 |  if_e	or	local05, local03
2e980     1A 2F 42 FC | 	wrbyte	local05, local08
2e984     31 26 86 F1 | 	sub	local01, #49
2e988     13 03 48 FC | 	wrbyte	#1, local01
2e98c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2e98c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2e98c                 | ' 			fs->wflag = 1;
2e98c                 | ' 			break;
2e98c     BC 00 90 FD | 	jmp	#LR__4506
2e990                 | LR__4504
2e990     13 13 02 F6 | 	mov	arg01, local01
2e994     14 35 02 F6 | 	mov	local08, local02
2e998     08 34 46 F0 | 	shr	local08, #8
2e99c     24 26 06 F1 | 	add	local01, #36
2e9a0     13 15 02 FB | 	rdlong	arg02, local01
2e9a4     24 26 86 F1 | 	sub	local01, #36
2e9a8     1A 15 02 F1 | 	add	arg02, local08
2e9ac     40 FB BF FD | 	call	#_fatfs_cc_move_window
2e9b0     FD 2C 0A F6 | 	mov	local04, result1 wz
2e9b4     94 00 90 5D |  if_ne	jmp	#LR__4506
2e9b8     34 26 06 F1 | 	add	local01, #52
2e9bc     13 13 02 F6 | 	mov	arg01, local01
2e9c0     01 28 66 F0 | 	shl	local02, #1
2e9c4     FF 29 06 F5 | 	and	local02, #511
2e9c8     14 13 02 F1 | 	add	arg01, local02
2e9cc     09 2B 52 FC | 	wrword	local03, arg01
2e9d0     31 26 86 F1 | 	sub	local01, #49
2e9d4     13 03 48 FC | 	wrbyte	#1, local01
2e9d8                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2e9d8                 | ' 			fs->wflag = 1;
2e9d8                 | ' 			break;
2e9d8     70 00 90 FD | 	jmp	#LR__4506
2e9dc                 | LR__4505
2e9dc     13 13 02 F6 | 	mov	arg01, local01
2e9e0     14 35 02 F6 | 	mov	local08, local02
2e9e4     07 34 46 F0 | 	shr	local08, #7
2e9e8     24 26 06 F1 | 	add	local01, #36
2e9ec     13 15 02 FB | 	rdlong	arg02, local01
2e9f0     24 26 86 F1 | 	sub	local01, #36
2e9f4     1A 15 02 F1 | 	add	arg02, local08
2e9f8     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2e9fc     FD 2C 0A F6 | 	mov	local04, result1 wz
2ea00     48 00 90 5D |  if_ne	jmp	#LR__4506
2ea04     7C 2A 06 F4 | 	bitl	local03, #124
2ea08     34 26 06 F1 | 	add	local01, #52
2ea0c     14 35 02 F6 | 	mov	local08, local02
2ea10     02 34 66 F0 | 	shl	local08, #2
2ea14     FF 35 06 F5 | 	and	local08, #511
2ea18     13 13 02 F6 | 	mov	arg01, local01
2ea1c     1A 13 02 F1 | 	add	arg01, local08
2ea20                 | ' {
2ea20                 | ' 
2ea20                 | ' 	return *((DWORD*)ptr);
2ea20     09 35 02 FB | 	rdlong	local08, arg01
2ea24     00 00 78 FF 
2ea28     00 34 06 F5 | 	and	local08, ##-268435456
2ea2c     1A 2B 42 F5 | 	or	local03, local08
2ea30     13 13 02 F6 | 	mov	arg01, local01
2ea34     02 28 66 F0 | 	shl	local02, #2
2ea38     FF 29 06 F5 | 	and	local02, #511
2ea3c     14 13 02 F1 | 	add	arg01, local02
2ea40     09 2B 62 FC | 	wrlong	local03, arg01
2ea44     31 26 86 F1 | 	sub	local01, #49
2ea48     13 03 48 FC | 	wrbyte	#1, local01
2ea4c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2ea4c                 | ' 			}
2ea4c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2ea4c                 | ' 			fs->wflag = 1;
2ea4c                 | ' 			break;
2ea4c                 | LR__4506
2ea4c                 | LR__4507
2ea4c                 | ' 		}
2ea4c                 | ' 	}
2ea4c                 | ' 	return res;
2ea4c     16 FB 01 F6 | 	mov	result1, local04
2ea50     A7 F0 03 F6 | 	mov	ptra, fp
2ea54     B2 00 A0 FD | 	call	#popregs_
2ea58                 | _fatfs_cc_put_fat_ret
2ea58     2D 00 64 FD | 	ret
2ea5c                 | 
2ea5c                 | _fatfs_cc_remove_chain
2ea5c     05 4A 05 F6 | 	mov	COUNT_, #5
2ea60     A8 00 A0 FD | 	call	#pushregs_
2ea64     09 27 02 F6 | 	mov	local01, arg01
2ea68     0A 29 02 F6 | 	mov	local02, arg02
2ea6c     0B 2B 02 F6 | 	mov	local03, arg03
2ea70     13 2D 02 FB | 	rdlong	local04, local01
2ea74     02 28 16 F2 | 	cmp	local02, #2 wc
2ea78     14 00 90 CD |  if_b	jmp	#LR__4510
2ea7c     18 2C 06 F1 | 	add	local04, #24
2ea80     16 FB 01 FB | 	rdlong	result1, local04
2ea84     18 2C 86 F1 | 	sub	local04, #24
2ea88     FD 28 12 F2 | 	cmp	local02, result1 wc
2ea8c     08 00 90 CD |  if_b	jmp	#LR__4511
2ea90                 | LR__4510
2ea90     02 FA 05 F6 | 	mov	result1, #2
2ea94     CC 00 90 FD | 	jmp	#LR__4516
2ea98                 | LR__4511
2ea98     00 2A 0E F2 | 	cmp	local03, #0 wz
2ea9c     18 00 90 AD |  if_e	jmp	#LR__4512
2eaa0     15 15 02 F6 | 	mov	arg02, local03
2eaa4     16 13 02 F6 | 	mov	arg01, local04
2eaa8     01 16 66 F6 | 	neg	arg03, #1
2eaac     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2eab0     00 FA 0D F2 | 	cmp	result1, #0 wz
2eab4     AC 00 90 5D |  if_ne	jmp	#LR__4516
2eab8                 | LR__4512
2eab8                 | ' 	}
2eab8                 | ' 
2eab8                 | ' 
2eab8                 | ' 	do {
2eab8                 | LR__4513
2eab8     14 15 02 F6 | 	mov	arg02, local02
2eabc     13 13 02 F6 | 	mov	arg01, local01
2eac0     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2eac4     FD 2E 0A F6 | 	mov	local05, result1 wz
2eac8     94 00 90 AD |  if_e	jmp	#LR__4515
2eacc     01 2E 0E F2 | 	cmp	local05, #1 wz
2ead0     02 FA 05 A6 |  if_e	mov	result1, #2
2ead4     8C 00 90 AD |  if_e	jmp	#LR__4516
2ead8     FF FF 7F FF 
2eadc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2eae0     01 FA 05 A6 |  if_e	mov	result1, #1
2eae4     7C 00 90 AD |  if_e	jmp	#LR__4516
2eae8     14 15 02 F6 | 	mov	arg02, local02
2eaec     16 13 02 F6 | 	mov	arg01, local04
2eaf0     00 16 06 F6 | 	mov	arg03, #0
2eaf4     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2eaf8     FD 2A 0A F6 | 	mov	local03, result1 wz
2eafc     15 FB 01 56 |  if_ne	mov	result1, local03
2eb00     60 00 90 5D |  if_ne	jmp	#LR__4516
2eb04     18 2C 06 F1 | 	add	local04, #24
2eb08     16 2B 02 FB | 	rdlong	local03, local04
2eb0c     02 2A 86 F1 | 	sub	local03, #2
2eb10     04 2C 86 F1 | 	sub	local04, #4
2eb14     16 29 02 FB | 	rdlong	local02, local04
2eb18     14 2C 86 F1 | 	sub	local04, #20
2eb1c     15 29 12 F2 | 	cmp	local02, local03 wc
2eb20     24 00 90 3D |  if_ae	jmp	#LR__4514
2eb24     14 2C 06 F1 | 	add	local04, #20
2eb28     16 2B 02 FB | 	rdlong	local03, local04
2eb2c     01 2A 06 F1 | 	add	local03, #1
2eb30     16 2B 62 FC | 	wrlong	local03, local04
2eb34     10 2C 86 F1 | 	sub	local04, #16
2eb38     16 2B C2 FA | 	rdbyte	local03, local04
2eb3c     01 2A 46 F5 | 	or	local03, #1
2eb40     16 2B 42 FC | 	wrbyte	local03, local04
2eb44     04 2C 86 F1 | 	sub	local04, #4
2eb48                 | LR__4514
2eb48     17 29 02 F6 | 	mov	local02, local05
2eb4c     18 2C 06 F1 | 	add	local04, #24
2eb50     16 2F 02 FB | 	rdlong	local05, local04
2eb54     18 2C 86 F1 | 	sub	local04, #24
2eb58     17 29 12 F2 | 	cmp	local02, local05 wc
2eb5c     58 FF 9F CD |  if_b	jmp	#LR__4513
2eb60                 | LR__4515
2eb60                 | ' #line 1500 "ff.c"
2eb60                 | ' 	return FR_OK;
2eb60     00 FA 05 F6 | 	mov	result1, #0
2eb64                 | LR__4516
2eb64     A7 F0 03 F6 | 	mov	ptra, fp
2eb68     B2 00 A0 FD | 	call	#popregs_
2eb6c                 | _fatfs_cc_remove_chain_ret
2eb6c     2D 00 64 FD | 	ret
2eb70                 | 
2eb70                 | _fatfs_cc_create_chain
2eb70     09 4A 05 F6 | 	mov	COUNT_, #9
2eb74     A8 00 A0 FD | 	call	#pushregs_
2eb78     09 27 02 F6 | 	mov	local01, arg01
2eb7c     0A 29 0A F6 | 	mov	local02, arg02 wz
2eb80     13 2B 02 FB | 	rdlong	local03, local01
2eb84     28 00 90 5D |  if_ne	jmp	#LR__4520
2eb88     10 2A 06 F1 | 	add	local03, #16
2eb8c     15 2D 0A FB | 	rdlong	local04, local03 wz
2eb90     10 2A 86 F1 | 	sub	local03, #16
2eb94     18 2A 06 51 |  if_ne	add	local03, #24
2eb98     15 2F 02 5B |  if_ne	rdlong	local05, local03
2eb9c     18 2A 86 51 |  if_ne	sub	local03, #24
2eba0     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2eba4     50 00 90 4D |  if_c_and_nz	jmp	#LR__4521
2eba8     01 2C 06 F6 | 	mov	local04, #1
2ebac     48 00 90 FD | 	jmp	#LR__4521
2ebb0                 | LR__4520
2ebb0     14 15 02 F6 | 	mov	arg02, local02
2ebb4     13 13 02 F6 | 	mov	arg01, local01
2ebb8     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2ebbc     FD 2C 02 F6 | 	mov	local04, result1
2ebc0     02 2C 16 F2 | 	cmp	local04, #2 wc
2ebc4     01 FA 05 C6 |  if_b	mov	result1, #1
2ebc8     BC 01 90 CD |  if_b	jmp	#LR__4531
2ebcc     FF FF 7F FF 
2ebd0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2ebd4     16 FB 01 A6 |  if_e	mov	result1, local04
2ebd8     AC 01 90 AD |  if_e	jmp	#LR__4531
2ebdc     18 2A 06 F1 | 	add	local03, #24
2ebe0     15 2F 02 FB | 	rdlong	local05, local03
2ebe4     18 2A 86 F1 | 	sub	local03, #24
2ebe8     17 2D 12 F2 | 	cmp	local04, local05 wc
2ebec     16 FB 01 C6 |  if_b	mov	result1, local04
2ebf0     94 01 90 CD |  if_b	jmp	#LR__4531
2ebf4     14 2D 02 F6 | 	mov	local04, local02
2ebf8                 | LR__4521
2ebf8     14 2A 06 F1 | 	add	local03, #20
2ebfc     15 2F 0A FB | 	rdlong	local05, local03 wz
2ec00     14 2A 86 F1 | 	sub	local03, #20
2ec04     00 FA 05 A6 |  if_e	mov	result1, #0
2ec08     7C 01 90 AD |  if_e	jmp	#LR__4531
2ec0c     00 30 06 F6 | 	mov	local06, #0
2ec10     14 2D 0A F2 | 	cmp	local04, local02 wz
2ec14     74 00 90 5D |  if_ne	jmp	#LR__4524
2ec18     16 31 02 F6 | 	mov	local06, local04
2ec1c     01 30 06 F1 | 	add	local06, #1
2ec20     18 2A 06 F1 | 	add	local03, #24
2ec24     15 2F 02 FB | 	rdlong	local05, local03
2ec28     18 2A 86 F1 | 	sub	local03, #24
2ec2c     17 31 12 F2 | 	cmp	local06, local05 wc
2ec30     02 30 06 36 |  if_ae	mov	local06, #2
2ec34     18 15 02 F6 | 	mov	arg02, local06
2ec38     13 13 02 F6 | 	mov	arg01, local01
2ec3c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2ec40     FD 2E 02 F6 | 	mov	local05, result1
2ec44     01 2E 0E F2 | 	cmp	local05, #1 wz
2ec48     FF FF 7F 5F 
2ec4c     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2ec50     17 FB 01 A6 |  if_e	mov	result1, local05
2ec54     30 01 90 AD |  if_e	jmp	#LR__4531
2ec58     00 2E 0E F2 | 	cmp	local05, #0 wz
2ec5c     2C 00 90 AD |  if_e	jmp	#LR__4523
2ec60     10 2A 06 F1 | 	add	local03, #16
2ec64     15 33 02 FB | 	rdlong	local07, local03
2ec68     10 2A 86 F1 | 	sub	local03, #16
2ec6c     02 32 16 F2 | 	cmp	local07, #2 wc
2ec70     14 00 90 CD |  if_b	jmp	#LR__4522
2ec74     18 2A 06 F1 | 	add	local03, #24
2ec78     15 2F 02 FB | 	rdlong	local05, local03
2ec7c     18 2A 86 F1 | 	sub	local03, #24
2ec80     17 33 12 F2 | 	cmp	local07, local05 wc
2ec84     19 2D 02 C6 |  if_b	mov	local04, local07
2ec88                 | LR__4522
2ec88     00 30 06 F6 | 	mov	local06, #0
2ec8c                 | LR__4523
2ec8c                 | LR__4524
2ec8c     00 30 0E F2 | 	cmp	local06, #0 wz
2ec90     60 00 90 5D |  if_ne	jmp	#LR__4527
2ec94     16 31 02 F6 | 	mov	local06, local04
2ec98                 | ' 			ncl = scl;
2ec98                 | ' 			for (;;) {
2ec98                 | LR__4525
2ec98     01 30 06 F1 | 	add	local06, #1
2ec9c     18 2A 06 F1 | 	add	local03, #24
2eca0     15 2F 02 FB | 	rdlong	local05, local03
2eca4     18 2A 86 F1 | 	sub	local03, #24
2eca8     17 31 12 F2 | 	cmp	local06, local05 wc
2ecac     02 30 06 36 |  if_ae	mov	local06, #2
2ecb0     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2ecb4     00 FA 05 16 |  if_a	mov	result1, #0
2ecb8     CC 00 90 1D |  if_a	jmp	#LR__4531
2ecbc     18 15 02 F6 | 	mov	arg02, local06
2ecc0     13 13 02 F6 | 	mov	arg01, local01
2ecc4     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2ecc8     FD 32 0A F6 | 	mov	local07, result1 wz
2eccc     24 00 90 AD |  if_e	jmp	#LR__4526
2ecd0     01 32 0E F2 | 	cmp	local07, #1 wz
2ecd4     FF FF 7F 5F 
2ecd8     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2ecdc     19 FB 01 A6 |  if_e	mov	result1, local07
2ece0     A4 00 90 AD |  if_e	jmp	#LR__4531
2ece4     16 31 0A F2 | 	cmp	local06, local04 wz
2ece8     00 FA 05 A6 |  if_e	mov	result1, #0
2ecec     98 00 90 AD |  if_e	jmp	#LR__4531
2ecf0     A4 FF 9F FD | 	jmp	#LR__4525
2ecf4                 | LR__4526
2ecf4                 | LR__4527
2ecf4     15 13 02 F6 | 	mov	arg01, local03
2ecf8     18 15 02 F6 | 	mov	arg02, local06
2ecfc     01 16 66 F6 | 	neg	arg03, #1
2ed00     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2ed04     FD 34 0A F6 | 	mov	local08, result1 wz
2ed08     1C 00 90 5D |  if_ne	jmp	#LR__4528
2ed0c     00 28 0E F2 | 	cmp	local02, #0 wz
2ed10     14 00 90 AD |  if_e	jmp	#LR__4528
2ed14     15 13 02 F6 | 	mov	arg01, local03
2ed18     14 15 02 F6 | 	mov	arg02, local02
2ed1c     18 17 02 F6 | 	mov	arg03, local06
2ed20     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2ed24     FD 34 02 F6 | 	mov	local08, result1
2ed28                 | LR__4528
2ed28     00 34 0E F2 | 	cmp	local08, #0 wz
2ed2c     4C 00 90 5D |  if_ne	jmp	#LR__4529
2ed30     10 2A 06 F1 | 	add	local03, #16
2ed34     15 31 62 FC | 	wrlong	local06, local03
2ed38     08 2A 06 F1 | 	add	local03, #8
2ed3c     15 2F 02 FB | 	rdlong	local05, local03
2ed40     02 2E 86 F1 | 	sub	local05, #2
2ed44     04 2A 86 F1 | 	sub	local03, #4
2ed48     15 37 02 FB | 	rdlong	local09, local03
2ed4c     14 2A 86 F1 | 	sub	local03, #20
2ed50     17 37 1A F2 | 	cmp	local09, local05 wcz
2ed54     14 2A 06 E1 |  if_be	add	local03, #20
2ed58     15 37 02 EB |  if_be	rdlong	local09, local03
2ed5c     01 36 86 E1 |  if_be	sub	local09, #1
2ed60     15 37 62 EC |  if_be	wrlong	local09, local03
2ed64     14 2A 86 E1 |  if_be	sub	local03, #20
2ed68     04 2A 06 F1 | 	add	local03, #4
2ed6c     15 2F C2 FA | 	rdbyte	local05, local03
2ed70     01 2E 46 F5 | 	or	local05, #1
2ed74     15 2F 42 FC | 	wrbyte	local05, local03
2ed78     08 00 90 FD | 	jmp	#LR__4530
2ed7c                 | LR__4529
2ed7c     01 34 0E F2 | 	cmp	local08, #1 wz
2ed80     01 30 C6 F6 | 	negz	local06, #1
2ed84                 | LR__4530
2ed84                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2ed84                 | ' 	}
2ed84                 | ' 
2ed84                 | ' 	return ncl;
2ed84     18 FB 01 F6 | 	mov	result1, local06
2ed88                 | LR__4531
2ed88     A7 F0 03 F6 | 	mov	ptra, fp
2ed8c     B2 00 A0 FD | 	call	#popregs_
2ed90                 | _fatfs_cc_create_chain_ret
2ed90     2D 00 64 FD | 	ret
2ed94                 | 
2ed94                 | _fatfs_cc_dir_clear
2ed94     06 4A 05 F6 | 	mov	COUNT_, #6
2ed98     A8 00 A0 FD | 	call	#pushregs_
2ed9c     09 27 02 F6 | 	mov	local01, arg01
2eda0     0A 29 02 F6 | 	mov	local02, arg02
2eda4     13 13 02 F6 | 	mov	arg01, local01
2eda8     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2edac     00 FA 0D F2 | 	cmp	result1, #0 wz
2edb0     01 FA 05 56 |  if_ne	mov	result1, #1
2edb4     90 00 90 5D |  if_ne	jmp	#LR__4542
2edb8     13 13 02 F6 | 	mov	arg01, local01
2edbc     14 15 02 F6 | 	mov	arg02, local02
2edc0     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2edc4     FD 2A 02 F6 | 	mov	local03, result1
2edc8     30 26 06 F1 | 	add	local01, #48
2edcc     13 2B 62 FC | 	wrlong	local03, local01
2edd0     04 26 06 F1 | 	add	local01, #4
2edd4     13 13 02 F6 | 	mov	arg01, local01
2edd8     00 14 06 F6 | 	mov	arg02, #0
2eddc     09 16 C6 F9 | 	decod	arg03, #9
2ede0     98 00 A0 FD | 	call	#\builtin_bytefill_
2ede4     13 2D 02 F6 | 	mov	local04, local01
2ede8                 | ' #line 1667 "ff.c"
2ede8                 | ' 	{
2ede8                 | ' 		ibuf = fs->win; szb = 1;
2ede8                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2ede8     00 2E 06 F6 | 	mov	local05, #0
2edec     34 26 86 F1 | 	sub	local01, #52
2edf0                 | LR__4540
2edf0     0A 26 06 F1 | 	add	local01, #10
2edf4     13 31 E2 FA | 	rdword	local06, local01
2edf8     0A 26 86 F1 | 	sub	local01, #10
2edfc     18 2F 12 F2 | 	cmp	local05, local06 wc
2ee00     2C 00 90 3D |  if_ae	jmp	#LR__4541
2ee04     01 26 06 F1 | 	add	local01, #1
2ee08     13 13 C2 FA | 	rdbyte	arg01, local01
2ee0c     01 26 86 F1 | 	sub	local01, #1
2ee10     16 15 02 F6 | 	mov	arg02, local04
2ee14     15 17 02 F6 | 	mov	arg03, local03
2ee18     17 17 02 F1 | 	add	arg03, local05
2ee1c     01 18 06 F6 | 	mov	arg04, #1
2ee20     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2ee24     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee28     01 2E 06 A1 |  if_e	add	local05, #1
2ee2c     C0 FF 9F AD |  if_e	jmp	#LR__4540
2ee30                 | LR__4541
2ee30                 | ' 	}
2ee30                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2ee30     0A 26 06 F1 | 	add	local01, #10
2ee34     13 2D E2 FA | 	rdword	local04, local01
2ee38     16 2F 0A F2 | 	cmp	local05, local04 wz
2ee3c     00 30 06 A6 |  if_e	mov	local06, #0
2ee40     01 30 06 56 |  if_ne	mov	local06, #1
2ee44     18 FB 01 F6 | 	mov	result1, local06
2ee48                 | LR__4542
2ee48     A7 F0 03 F6 | 	mov	ptra, fp
2ee4c     B2 00 A0 FD | 	call	#popregs_
2ee50                 | _fatfs_cc_dir_clear_ret
2ee50     2D 00 64 FD | 	ret
2ee54                 | 
2ee54                 | _fatfs_cc_dir_sdi
2ee54     06 4A 05 F6 | 	mov	COUNT_, #6
2ee58     A8 00 A0 FD | 	call	#pushregs_
2ee5c     09 27 02 F6 | 	mov	local01, arg01
2ee60     0A 29 02 F6 | 	mov	local02, arg02
2ee64     13 2B 02 FB | 	rdlong	local03, local01
2ee68     00 10 00 FF 
2ee6c     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2ee70     1F 28 CE C7 |  if_b	test	local02, #31 wz
2ee74                 | ' 		return FR_INT_ERR;
2ee74     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2ee78     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4556
2ee7c     10 26 06 F1 | 	add	local01, #16
2ee80     13 29 62 FC | 	wrlong	local02, local01
2ee84     08 26 86 F1 | 	sub	local01, #8
2ee88     13 2D 0A FB | 	rdlong	local04, local01 wz
2ee8c     08 26 86 F1 | 	sub	local01, #8
2ee90     15 2F C2 AA |  if_e	rdbyte	local05, local03
2ee94     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2ee98     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2ee9c     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2eea0     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2eea4     00 2C 0E F2 | 	cmp	local04, #0 wz
2eea8     3C 00 90 5D |  if_ne	jmp	#LR__4550
2eeac     14 2F 02 F6 | 	mov	local05, local02
2eeb0     05 2E 46 F0 | 	shr	local05, #5
2eeb4     08 2A 06 F1 | 	add	local03, #8
2eeb8     15 15 E2 FA | 	rdword	arg02, local03
2eebc     08 2A 86 F1 | 	sub	local03, #8
2eec0     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2eec4     02 FA 05 36 |  if_ae	mov	result1, #2
2eec8     E4 00 90 3D |  if_ae	jmp	#LR__4556
2eecc     28 2A 06 F1 | 	add	local03, #40
2eed0     15 2F 02 FB | 	rdlong	local05, local03
2eed4     28 2A 86 F1 | 	sub	local03, #40
2eed8     18 26 06 F1 | 	add	local01, #24
2eedc     13 2F 62 FC | 	wrlong	local05, local01
2eee0     18 26 86 F1 | 	sub	local01, #24
2eee4     7C 00 90 FD | 	jmp	#LR__4555
2eee8                 | LR__4550
2eee8     0A 2A 06 F1 | 	add	local03, #10
2eeec     15 31 E2 FA | 	rdword	local06, local03
2eef0     0A 2A 86 F1 | 	sub	local03, #10
2eef4     09 30 66 F0 | 	shl	local06, #9
2eef8                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2eef8                 | ' 		while (ofs >= csz) {
2eef8                 | LR__4551
2eef8     18 29 12 F2 | 	cmp	local02, local06 wc
2eefc     4C 00 90 CD |  if_b	jmp	#LR__4554
2ef00     13 13 02 F6 | 	mov	arg01, local01
2ef04     16 15 02 F6 | 	mov	arg02, local04
2ef08     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2ef0c     FD 2C 02 F6 | 	mov	local04, result1
2ef10     FF FF 7F FF 
2ef14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2ef18     01 FA 05 A6 |  if_e	mov	result1, #1
2ef1c     90 00 90 AD |  if_e	jmp	#LR__4556
2ef20     02 2C 16 F2 | 	cmp	local04, #2 wc
2ef24     14 00 90 CD |  if_b	jmp	#LR__4552
2ef28     18 2A 06 F1 | 	add	local03, #24
2ef2c     15 2F 02 FB | 	rdlong	local05, local03
2ef30     18 2A 86 F1 | 	sub	local03, #24
2ef34     17 2D 12 F2 | 	cmp	local04, local05 wc
2ef38     08 00 90 CD |  if_b	jmp	#LR__4553
2ef3c                 | LR__4552
2ef3c     02 FA 05 F6 | 	mov	result1, #2
2ef40     6C 00 90 FD | 	jmp	#LR__4556
2ef44                 | LR__4553
2ef44     18 29 82 F1 | 	sub	local02, local06
2ef48     AC FF 9F FD | 	jmp	#LR__4551
2ef4c                 | LR__4554
2ef4c     15 13 02 F6 | 	mov	arg01, local03
2ef50     16 15 02 F6 | 	mov	arg02, local04
2ef54     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2ef58     18 26 06 F1 | 	add	local01, #24
2ef5c     13 FB 61 FC | 	wrlong	result1, local01
2ef60     18 26 86 F1 | 	sub	local01, #24
2ef64                 | LR__4555
2ef64     14 26 06 F1 | 	add	local01, #20
2ef68     13 2D 62 FC | 	wrlong	local04, local01
2ef6c     04 26 06 F1 | 	add	local01, #4
2ef70     13 2F 0A FB | 	rdlong	local05, local01 wz
2ef74     18 26 86 F1 | 	sub	local01, #24
2ef78     02 FA 05 A6 |  if_e	mov	result1, #2
2ef7c     30 00 90 AD |  if_e	jmp	#LR__4556
2ef80     14 31 02 F6 | 	mov	local06, local02
2ef84     09 30 46 F0 | 	shr	local06, #9
2ef88     18 26 06 F1 | 	add	local01, #24
2ef8c     13 2F 02 FB | 	rdlong	local05, local01
2ef90     18 2F 02 F1 | 	add	local05, local06
2ef94     13 2F 62 FC | 	wrlong	local05, local01
2ef98     34 2A 06 F1 | 	add	local03, #52
2ef9c     FF 29 06 F5 | 	and	local02, #511
2efa0     14 2B 02 F1 | 	add	local03, local02
2efa4     04 26 06 F1 | 	add	local01, #4
2efa8     13 2B 62 FC | 	wrlong	local03, local01
2efac                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2efac                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2efac                 | ' 
2efac                 | ' 	return FR_OK;
2efac     00 FA 05 F6 | 	mov	result1, #0
2efb0                 | LR__4556
2efb0     A7 F0 03 F6 | 	mov	ptra, fp
2efb4     B2 00 A0 FD | 	call	#popregs_
2efb8                 | _fatfs_cc_dir_sdi_ret
2efb8     2D 00 64 FD | 	ret
2efbc                 | 
2efbc                 | _fatfs_cc_dir_next
2efbc     05 4A 05 F6 | 	mov	COUNT_, #5
2efc0     A8 00 A0 FD | 	call	#pushregs_
2efc4     09 27 02 F6 | 	mov	local01, arg01
2efc8     0A 29 02 F6 | 	mov	local02, arg02
2efcc     13 2B 02 FB | 	rdlong	local03, local01
2efd0     10 26 06 F1 | 	add	local01, #16
2efd4     13 2D 02 FB | 	rdlong	local04, local01
2efd8     10 26 86 F1 | 	sub	local01, #16
2efdc     20 2C 06 F1 | 	add	local04, #32
2efe0     00 10 00 FF 
2efe4     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2efe8     18 26 06 31 |  if_ae	add	local01, #24
2efec     13 01 68 3C |  if_ae	wrlong	#0, local01
2eff0     18 26 86 31 |  if_ae	sub	local01, #24
2eff4     18 26 06 F1 | 	add	local01, #24
2eff8     13 15 0A FB | 	rdlong	arg02, local01 wz
2effc     18 26 86 F1 | 	sub	local01, #24
2f000     04 FA 05 A6 |  if_e	mov	result1, #4
2f004     64 01 90 AD |  if_e	jmp	#LR__4565
2f008     FF 2D CE F7 | 	test	local04, #511 wz
2f00c     3C 01 90 5D |  if_ne	jmp	#LR__4564
2f010     18 26 06 F1 | 	add	local01, #24
2f014     13 15 02 FB | 	rdlong	arg02, local01
2f018     01 14 06 F1 | 	add	arg02, #1
2f01c     13 15 62 FC | 	wrlong	arg02, local01
2f020     04 26 86 F1 | 	sub	local01, #4
2f024     13 15 0A FB | 	rdlong	arg02, local01 wz
2f028     14 26 86 F1 | 	sub	local01, #20
2f02c     2C 00 90 5D |  if_ne	jmp	#LR__4560
2f030     16 15 02 F6 | 	mov	arg02, local04
2f034     05 14 46 F0 | 	shr	arg02, #5
2f038     08 2A 06 F1 | 	add	local03, #8
2f03c     15 29 E2 FA | 	rdword	local02, local03
2f040     08 2A 86 F1 | 	sub	local03, #8
2f044     14 15 12 F2 | 	cmp	arg02, local02 wc
2f048     18 26 06 31 |  if_ae	add	local01, #24
2f04c     13 01 68 3C |  if_ae	wrlong	#0, local01
2f050                 | ' 				dp->sect = 0; return FR_NO_FILE;
2f050     04 FA 05 36 |  if_ae	mov	result1, #4
2f054     14 01 90 3D |  if_ae	jmp	#LR__4565
2f058     F0 00 90 FD | 	jmp	#LR__4563
2f05c                 | LR__4560
2f05c     16 13 02 F6 | 	mov	arg01, local04
2f060     09 12 46 F0 | 	shr	arg01, #9
2f064     0A 2A 06 F1 | 	add	local03, #10
2f068     15 15 E2 FA | 	rdword	arg02, local03
2f06c     0A 2A 86 F1 | 	sub	local03, #10
2f070     01 14 86 F1 | 	sub	arg02, #1
2f074     0A 13 CA F7 | 	test	arg01, arg02 wz
2f078     D0 00 90 5D |  if_ne	jmp	#LR__4562
2f07c     13 13 02 F6 | 	mov	arg01, local01
2f080     14 26 06 F1 | 	add	local01, #20
2f084     13 15 02 FB | 	rdlong	arg02, local01
2f088     14 26 86 F1 | 	sub	local01, #20
2f08c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2f090     FD 2E 02 F6 | 	mov	local05, result1
2f094     02 2E 16 F2 | 	cmp	local05, #2 wc
2f098     02 FA 05 C6 |  if_b	mov	result1, #2
2f09c     CC 00 90 CD |  if_b	jmp	#LR__4565
2f0a0     FF FF 7F FF 
2f0a4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f0a8     01 FA 05 A6 |  if_e	mov	result1, #1
2f0ac     BC 00 90 AD |  if_e	jmp	#LR__4565
2f0b0     18 2A 06 F1 | 	add	local03, #24
2f0b4     15 15 02 FB | 	rdlong	arg02, local03
2f0b8     18 2A 86 F1 | 	sub	local03, #24
2f0bc     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f0c0     68 00 90 CD |  if_b	jmp	#LR__4561
2f0c4     00 28 0E F2 | 	cmp	local02, #0 wz
2f0c8     18 26 06 A1 |  if_e	add	local01, #24
2f0cc     13 01 68 AC |  if_e	wrlong	#0, local01
2f0d0                 | ' 						dp->sect = 0; return FR_NO_FILE;
2f0d0     04 FA 05 A6 |  if_e	mov	result1, #4
2f0d4     94 00 90 AD |  if_e	jmp	#LR__4565
2f0d8     13 13 02 F6 | 	mov	arg01, local01
2f0dc     14 26 06 F1 | 	add	local01, #20
2f0e0     13 15 02 FB | 	rdlong	arg02, local01
2f0e4     14 26 86 F1 | 	sub	local01, #20
2f0e8     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2f0ec     FD 2E 0A F6 | 	mov	local05, result1 wz
2f0f0     07 FA 05 A6 |  if_e	mov	result1, #7
2f0f4     74 00 90 AD |  if_e	jmp	#LR__4565
2f0f8     01 2E 0E F2 | 	cmp	local05, #1 wz
2f0fc     02 FA 05 A6 |  if_e	mov	result1, #2
2f100     68 00 90 AD |  if_e	jmp	#LR__4565
2f104     FF FF 7F FF 
2f108     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f10c     01 FA 05 A6 |  if_e	mov	result1, #1
2f110     58 00 90 AD |  if_e	jmp	#LR__4565
2f114     17 15 02 F6 | 	mov	arg02, local05
2f118     15 13 02 F6 | 	mov	arg01, local03
2f11c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2f120     00 FA 0D F2 | 	cmp	result1, #0 wz
2f124     01 FA 05 56 |  if_ne	mov	result1, #1
2f128     40 00 90 5D |  if_ne	jmp	#LR__4565
2f12c                 | LR__4561
2f12c     14 26 06 F1 | 	add	local01, #20
2f130     13 2F 62 FC | 	wrlong	local05, local01
2f134     15 13 02 F6 | 	mov	arg01, local03
2f138     17 15 02 F6 | 	mov	arg02, local05
2f13c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2f140     04 26 06 F1 | 	add	local01, #4
2f144     13 FB 61 FC | 	wrlong	result1, local01
2f148     18 26 86 F1 | 	sub	local01, #24
2f14c                 | LR__4562
2f14c                 | LR__4563
2f14c                 | LR__4564
2f14c     10 26 06 F1 | 	add	local01, #16
2f150     13 2D 62 FC | 	wrlong	local04, local01
2f154     34 2A 06 F1 | 	add	local03, #52
2f158     FF 2D 06 F5 | 	and	local04, #511
2f15c     16 2B 02 F1 | 	add	local03, local04
2f160     0C 26 06 F1 | 	add	local01, #12
2f164     13 2B 62 FC | 	wrlong	local03, local01
2f168                 | ' #line 1771 "ff.c"
2f168                 | ' 				}
2f168                 | ' 				dp->clust = clst;
2f168                 | ' 				dp->sect = clst2sect(fs, clst);
2f168                 | ' 			}
2f168                 | ' 		}
2f168                 | ' 	}
2f168                 | ' 	dp->dptr = ofs;
2f168                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2f168                 | ' 
2f168                 | ' 	return FR_OK;
2f168     00 FA 05 F6 | 	mov	result1, #0
2f16c                 | LR__4565
2f16c     A7 F0 03 F6 | 	mov	ptra, fp
2f170     B2 00 A0 FD | 	call	#popregs_
2f174                 | _fatfs_cc_dir_next_ret
2f174     2D 00 64 FD | 	ret
2f178                 | 
2f178                 | _fatfs_cc_dir_alloc
2f178     08 4A 05 F6 | 	mov	COUNT_, #8
2f17c     A8 00 A0 FD | 	call	#pushregs_
2f180     09 27 02 F6 | 	mov	local01, arg01
2f184     0A 29 02 F6 | 	mov	local02, arg02
2f188     13 2B 02 FB | 	rdlong	local03, local01
2f18c     13 13 02 F6 | 	mov	arg01, local01
2f190     00 14 06 F6 | 	mov	arg02, #0
2f194     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2f198     FD 2C 0A F6 | 	mov	local04, result1 wz
2f19c     70 00 90 5D |  if_ne	jmp	#LR__4574
2f1a0     00 2E 06 F6 | 	mov	local05, #0
2f1a4                 | ' 		n = 0;
2f1a4                 | ' 		do {
2f1a4                 | LR__4570
2f1a4     18 26 06 F1 | 	add	local01, #24
2f1a8     13 15 02 FB | 	rdlong	arg02, local01
2f1ac     18 26 86 F1 | 	sub	local01, #24
2f1b0     15 13 02 F6 | 	mov	arg01, local03
2f1b4     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2f1b8     FD 2C 0A F6 | 	mov	local04, result1 wz
2f1bc     50 00 90 5D |  if_ne	jmp	#LR__4573
2f1c0     1C 26 06 F1 | 	add	local01, #28
2f1c4     13 31 02 FB | 	rdlong	local06, local01
2f1c8     1C 26 86 F1 | 	sub	local01, #28
2f1cc     18 31 C2 FA | 	rdbyte	local06, local06
2f1d0     E5 30 0E F2 | 	cmp	local06, #229 wz
2f1d4     1C 26 06 51 |  if_ne	add	local01, #28
2f1d8     13 33 02 5B |  if_ne	rdlong	local07, local01
2f1dc     1C 26 86 51 |  if_ne	sub	local01, #28
2f1e0     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2f1e4     10 00 90 5D |  if_ne	jmp	#LR__4571
2f1e8     01 2E 06 F1 | 	add	local05, #1
2f1ec     14 2F 0A F2 | 	cmp	local05, local02 wz
2f1f0     1C 00 90 AD |  if_e	jmp	#LR__4573
2f1f4     04 00 90 FD | 	jmp	#LR__4572
2f1f8                 | LR__4571
2f1f8     00 2E 06 F6 | 	mov	local05, #0
2f1fc                 | LR__4572
2f1fc     13 13 02 F6 | 	mov	arg01, local01
2f200     01 14 06 F6 | 	mov	arg02, #1
2f204     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2f208     FD 2C 0A F6 | 	mov	local04, result1 wz
2f20c     94 FF 9F AD |  if_e	jmp	#LR__4570
2f210                 | LR__4573
2f210                 | LR__4574
2f210     04 2C 0E F2 | 	cmp	local04, #4 wz
2f214     07 2C 06 A6 |  if_e	mov	local04, #7
2f218                 | ' 	return res;
2f218     16 FB 01 F6 | 	mov	result1, local04
2f21c     A7 F0 03 F6 | 	mov	ptra, fp
2f220     B2 00 A0 FD | 	call	#popregs_
2f224                 | _fatfs_cc_dir_alloc_ret
2f224     2D 00 64 FD | 	ret
2f228                 | 
2f228                 | _fatfs_cc_ld_clust
2f228     09 01 02 F6 | 	mov	_var01, arg01
2f22c     0A 13 02 F6 | 	mov	arg01, arg02
2f230     1A 12 06 F1 | 	add	arg01, #26
2f234                 | ' {
2f234                 | ' 
2f234                 | ' 	return *((WORD*)ptr);
2f234     09 FB E1 FA | 	rdword	result1, arg01
2f238     FD 12 32 F9 | 	getword	arg01, result1, #0
2f23c     00 01 C2 FA | 	rdbyte	_var01, _var01
2f240     03 00 0E F2 | 	cmp	_var01, #3 wz
2f244     14 14 06 A1 |  if_e	add	arg02, #20
2f248                 | ' {
2f248                 | ' 
2f248                 | ' 	return *((WORD*)ptr);
2f248     0A FB E1 AA |  if_e	rdword	result1, arg02
2f24c     10 FA 65 A0 |  if_e	shl	result1, #16
2f250     FD 12 42 A5 |  if_e	or	arg01, result1
2f254                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2f254                 | ' 	}
2f254                 | ' 
2f254                 | ' 	return cl;
2f254     09 FB 01 F6 | 	mov	result1, arg01
2f258                 | _fatfs_cc_ld_clust_ret
2f258     2D 00 64 FD | 	ret
2f25c                 | 
2f25c                 | _fatfs_cc_st_clust
2f25c     09 01 02 F6 | 	mov	_var01, arg01
2f260     0A 13 02 F6 | 	mov	arg01, arg02
2f264     1A 12 06 F1 | 	add	arg01, #26
2f268     09 17 52 FC | 	wrword	arg03, arg01
2f26c     00 01 C2 FA | 	rdbyte	_var01, _var01
2f270     03 00 0E F2 | 	cmp	_var01, #3 wz
2f274     14 14 06 A1 |  if_e	add	arg02, #20
2f278     10 16 46 A0 |  if_e	shr	arg03, #16
2f27c     0A 17 52 AC |  if_e	wrword	arg03, arg02
2f280                 | _fatfs_cc_st_clust_ret
2f280     2D 00 64 FD | 	ret
2f284                 | 
2f284                 | _fatfs_cc_cmp_lfn
2f284     07 4A 05 F6 | 	mov	COUNT_, #7
2f288     A8 00 A0 FD | 	call	#pushregs_
2f28c     09 27 02 F6 | 	mov	local01, arg01
2f290     0A 13 02 F6 | 	mov	arg01, arg02
2f294     1A 12 06 F1 | 	add	arg01, #26
2f298                 | ' {
2f298                 | ' 
2f298                 | ' 	return *((WORD*)ptr);
2f298     09 FB E9 FA | 	rdword	result1, arg01 wz
2f29c     00 FA 05 56 |  if_ne	mov	result1, #0
2f2a0     E0 00 90 5D |  if_ne	jmp	#LR__4586
2f2a4     0A 29 C2 FA | 	rdbyte	local02, arg02
2f2a8     3F 28 06 F5 | 	and	local02, #63
2f2ac     01 28 86 F1 | 	sub	local02, #1
2f2b0     0D 28 06 FD | 	qmul	local02, #13
2f2b4                 | ' 
2f2b4                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2f2b4                 | ' 
2f2b4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f2b4     01 2A 06 F6 | 	mov	local03, #1
2f2b8     00 2C 06 F6 | 	mov	local04, #0
2f2bc     18 2E 62 FD | 	getqx	local05
2f2c0                 | LR__4580
2f2c0     0D 2C 16 F2 | 	cmp	local04, #13 wc
2f2c4     9C 00 90 3D |  if_ae	jmp	#LR__4585
2f2c8     0A 13 02 F6 | 	mov	arg01, arg02
2f2cc     16 29 02 F6 | 	mov	local02, local04
2f2d0     01 00 00 FF 
2f2d4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f2d8     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2f2dc     14 29 C2 FA | 	rdbyte	local02, local02
2f2e0     01 28 06 FA | 	mul	local02, #1
2f2e4     14 13 02 F1 | 	add	arg01, local02
2f2e8     01 00 00 FF 
2f2ec     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f2f0                 | ' {
2f2f0                 | ' 
2f2f0                 | ' 	return *((WORD*)ptr);
2f2f0     09 FB E1 FA | 	rdword	result1, arg01
2f2f4     FD 30 02 F6 | 	mov	local06, result1
2f2f8     15 29 02 F6 | 	mov	local02, local03
2f2fc     0F 28 4E F7 | 	zerox	local02, #15 wz
2f300     44 00 90 AD |  if_e	jmp	#LR__4583
2f304     00 2F 16 F2 | 	cmp	local05, #256 wc
2f308     2C 00 90 3D |  if_ae	jmp	#LR__4581
2f30c     18 13 32 F9 | 	getword	arg01, local06, #0
2f310     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f314     FD 28 02 F6 | 	mov	local02, result1
2f318     17 2B 02 F6 | 	mov	local03, local05
2f31c     01 2A 66 F0 | 	shl	local03, #1
2f320     13 2B 02 F1 | 	add	local03, local01
2f324     15 13 E2 FA | 	rdword	arg01, local03
2f328     01 2E 06 F1 | 	add	local05, #1
2f32c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f330     FD 28 0A F2 | 	cmp	local02, result1 wz
2f334     08 00 90 AD |  if_e	jmp	#LR__4582
2f338                 | LR__4581
2f338                 | ' 				return 0;
2f338     00 FA 05 F6 | 	mov	result1, #0
2f33c     44 00 90 FD | 	jmp	#LR__4586
2f340                 | LR__4582
2f340     18 2B 02 F6 | 	mov	local03, local06
2f344     14 00 90 FD | 	jmp	#LR__4584
2f348                 | LR__4583
2f348     18 31 32 F9 | 	getword	local06, local06, #0
2f34c     7F 00 00 FF 
2f350     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2f354     00 FA 05 56 |  if_ne	mov	result1, #0
2f358     28 00 90 5D |  if_ne	jmp	#LR__4586
2f35c                 | LR__4584
2f35c     01 2C 06 F1 | 	add	local04, #1
2f360     5C FF 9F FD | 	jmp	#LR__4580
2f364                 | LR__4585
2f364     0A 29 C2 FA | 	rdbyte	local02, arg02
2f368     40 28 CE F7 | 	test	local02, #64 wz
2f36c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2f370     01 2E 66 50 |  if_ne	shl	local05, #1
2f374     13 2F 02 51 |  if_ne	add	local05, local01
2f378     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2f37c     00 FA 05 56 |  if_ne	mov	result1, #0
2f380                 | ' 
2f380                 | ' 	return 1;
2f380     01 FA 05 A6 |  if_e	mov	result1, #1
2f384                 | LR__4586
2f384     A7 F0 03 F6 | 	mov	ptra, fp
2f388     B2 00 A0 FD | 	call	#popregs_
2f38c                 | _fatfs_cc_cmp_lfn_ret
2f38c     2D 00 64 FD | 	ret
2f390                 | 
2f390                 | _fatfs_cc_pick_lfn
2f390     09 01 02 F6 | 	mov	_var01, arg01
2f394     0A 13 02 F6 | 	mov	arg01, arg02
2f398     1A 12 06 F1 | 	add	arg01, #26
2f39c                 | ' {
2f39c                 | ' 
2f39c                 | ' 	return *((WORD*)ptr);
2f39c     09 FB E9 FA | 	rdword	result1, arg01 wz
2f3a0     00 FA 05 56 |  if_ne	mov	result1, #0
2f3a4     D4 00 90 5D |  if_ne	jmp	#LR__4595
2f3a8     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f3ac     40 02 26 F5 | 	andn	_var02, #64
2f3b0     01 02 86 F1 | 	sub	_var02, #1
2f3b4     0D 02 06 FD | 	qmul	_var02, #13
2f3b8                 | ' 
2f3b8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2f3b8                 | ' 
2f3b8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f3b8     01 04 06 F6 | 	mov	_var03, #1
2f3bc     00 06 06 F6 | 	mov	_var04, #0
2f3c0     18 08 62 FD | 	getqx	_var05
2f3c4                 | LR__4590
2f3c4     0D 06 16 F2 | 	cmp	_var04, #13 wc
2f3c8     80 00 90 3D |  if_ae	jmp	#LR__4593
2f3cc     0A 13 02 F6 | 	mov	arg01, arg02
2f3d0     03 03 02 F6 | 	mov	_var02, _var04
2f3d4     01 00 00 FF 
2f3d8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f3dc     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2f3e0     01 03 C2 FA | 	rdbyte	_var02, _var02
2f3e4     01 02 06 FA | 	mul	_var02, #1
2f3e8     01 13 02 F1 | 	add	arg01, _var02
2f3ec     01 00 00 FF 
2f3f0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f3f4                 | ' {
2f3f4                 | ' 
2f3f4                 | ' 	return *((WORD*)ptr);
2f3f4     09 FB E1 FA | 	rdword	result1, arg01
2f3f8     FD 0A 02 F6 | 	mov	_var06, result1
2f3fc     02 03 02 F6 | 	mov	_var02, _var03
2f400     0F 02 4E F7 | 	zerox	_var02, #15 wz
2f404     28 00 90 AD |  if_e	jmp	#LR__4591
2f408     00 09 16 F2 | 	cmp	_var05, #256 wc
2f40c     00 FA 05 36 |  if_ae	mov	result1, #0
2f410     68 00 90 3D |  if_ae	jmp	#LR__4595
2f414     04 03 02 F6 | 	mov	_var02, _var05
2f418     01 02 66 F0 | 	shl	_var02, #1
2f41c     00 03 02 F1 | 	add	_var02, _var01
2f420     05 05 02 F6 | 	mov	_var03, _var06
2f424     01 05 52 FC | 	wrword	_var03, _var02
2f428     01 08 06 F1 | 	add	_var05, #1
2f42c     14 00 90 FD | 	jmp	#LR__4592
2f430                 | LR__4591
2f430     05 0B 32 F9 | 	getword	_var06, _var06, #0
2f434     7F 00 00 FF 
2f438     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2f43c     00 FA 05 56 |  if_ne	mov	result1, #0
2f440     38 00 90 5D |  if_ne	jmp	#LR__4595
2f444                 | LR__4592
2f444     01 06 06 F1 | 	add	_var04, #1
2f448     78 FF 9F FD | 	jmp	#LR__4590
2f44c                 | LR__4593
2f44c     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f450     40 02 CE F7 | 	test	_var02, #64 wz
2f454     02 0D 02 56 |  if_ne	mov	_var07, _var03
2f458     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2f45c     18 00 90 AD |  if_e	jmp	#LR__4594
2f460     00 09 16 F2 | 	cmp	_var05, #256 wc
2f464     00 FA 05 36 |  if_ae	mov	result1, #0
2f468     10 00 90 3D |  if_ae	jmp	#LR__4595
2f46c     01 08 66 F0 | 	shl	_var05, #1
2f470     00 09 02 F1 | 	add	_var05, _var01
2f474     04 01 58 FC | 	wrword	#0, _var05
2f478                 | LR__4594
2f478                 | ' 		lfnbuf[i] = 0;
2f478                 | ' 	}
2f478                 | ' 
2f478                 | ' 	return 1;
2f478     01 FA 05 F6 | 	mov	result1, #1
2f47c                 | LR__4595
2f47c                 | _fatfs_cc_pick_lfn_ret
2f47c     2D 00 64 FD | 	ret
2f480                 | 
2f480                 | _fatfs_cc_put_lfn
2f480     0D 14 06 F1 | 	add	arg02, #13
2f484     0A 19 42 FC | 	wrbyte	arg04, arg02
2f488     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2f48c     01 18 86 F1 | 	sub	arg04, #1
2f490     0D 18 06 FD | 	qmul	arg04, #13
2f494     09 01 02 F6 | 	mov	_var01, arg01
2f498     02 14 86 F1 | 	sub	arg02, #2
2f49c     0A 1F 48 FC | 	wrbyte	#15, arg02
2f4a0     01 14 06 F1 | 	add	arg02, #1
2f4a4     0A 01 48 FC | 	wrbyte	#0, arg02
2f4a8     0C 14 86 F1 | 	sub	arg02, #12
2f4ac     0A 13 02 F6 | 	mov	arg01, arg02
2f4b0     1A 12 06 F1 | 	add	arg01, #26
2f4b4     09 01 58 FC | 	wrword	#0, arg01
2f4b8     00 02 06 F6 | 	mov	_var02, #0
2f4bc     00 04 06 F6 | 	mov	_var03, #0
2f4c0                 | ' 	BYTE* dir,
2f4c0                 | ' 	BYTE ord,
2f4c0                 | ' 	BYTE sum
2f4c0                 | ' )
2f4c0                 | ' {
2f4c0                 | ' 	UINT i, s;
2f4c0                 | ' 	WCHAR wc;
2f4c0                 | ' 
2f4c0                 | ' 
2f4c0                 | ' 	dir[ 13 ] = sum;
2f4c0                 | ' 	dir[ 11 ] =  0x0F ;
2f4c0                 | ' 	dir[ 12 ] = 0;
2f4c0                 | ' 	st_word(dir +  26 , 0);
2f4c0                 | ' 
2f4c0                 | ' 	i = (ord - 1) * 13;
2f4c0                 | ' 	s = wc = 0;
2f4c0                 | ' 	do {
2f4c0     01 00 00 FF 
2f4c4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f4c8     18 06 62 FD | 	getqx	_var04
2f4cc     97 2A 48 FB | 	callpa	#(@LR__4601-@LR__4600)>>2,fcache_load_ptr_
2f4d0                 | LR__4600
2f4d0     01 19 32 F9 | 	getword	arg04, _var02, #0
2f4d4     7F 00 00 FF 
2f4d8     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2f4dc     03 13 02 56 |  if_ne	mov	arg01, _var04
2f4e0     01 06 06 51 |  if_ne	add	_var04, #1
2f4e4     01 12 66 50 |  if_ne	shl	arg01, #1
2f4e8     00 13 02 51 |  if_ne	add	arg01, _var01
2f4ec     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2f4f0     0A 13 02 F6 | 	mov	arg01, arg02
2f4f4     02 19 02 F6 | 	mov	arg04, _var03
2f4f8     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2f4fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f500     01 18 06 FA | 	mul	arg04, #1
2f504     0C 13 02 F1 | 	add	arg01, arg04
2f508     09 03 52 FC | 	wrword	_var02, arg01
2f50c     01 19 02 F6 | 	mov	arg04, _var02
2f510     0F 18 4E F7 | 	zerox	arg04, #15 wz
2f514     0F 02 CE A9 |  if_e	bmask	_var02, #15
2f518     01 04 06 F1 | 	add	_var03, #1
2f51c     0D 04 16 F2 | 	cmp	_var03, #13 wc
2f520     AC FF 9F CD |  if_b	jmp	#LR__4600
2f524                 | LR__4601
2f524     01 00 00 FF 
2f528     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f52c     01 03 32 F9 | 	getword	_var02, _var02, #0
2f530     7F 00 00 FF 
2f534     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2f538     01 06 66 50 |  if_ne	shl	_var04, #1
2f53c     00 07 02 51 |  if_ne	add	_var04, _var01
2f540     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2f544     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2f548     40 16 46 A5 |  if_e	or	arg03, #64
2f54c     0A 17 42 FC | 	wrbyte	arg03, arg02
2f550                 | _fatfs_cc_put_lfn_ret
2f550     2D 00 64 FD | 	ret
2f554                 | 
2f554                 | _fatfs_cc_gen_numname
2f554     08 4A 05 F6 | 	mov	COUNT_, #8
2f558     A8 00 A0 FD | 	call	#pushregs_
2f55c     2C F0 07 F1 | 	add	ptra, #44
2f560     09 27 02 F6 | 	mov	local01, arg01
2f564     0A 29 02 F6 | 	mov	local02, arg02
2f568     0B 2B 02 F6 | 	mov	local03, arg03
2f56c     0C 2D 02 F6 | 	mov	local04, arg04
2f570     13 13 02 F6 | 	mov	arg01, local01
2f574     14 15 02 F6 | 	mov	arg02, local02
2f578     0B 16 06 F6 | 	mov	arg03, #11
2f57c     98 72 BF FD | 	call	#__system____builtin_memmove
2f580     06 2C 16 F2 | 	cmp	local04, #6 wc
2f584     48 00 90 CD |  if_b	jmp	#LR__4615
2f588     16 2F 02 F6 | 	mov	local05, local04
2f58c     97 1E 48 FB | 	callpa	#(@LR__4613-@LR__4610)>>2,fcache_load_ptr_
2f590                 | ' 		sreg = seq;
2f590                 | ' 		while (*lfn) {
2f590                 | LR__4610
2f590     15 31 EA FA | 	rdword	local06, local03 wz
2f594     34 00 90 AD |  if_e	jmp	#LR__4614
2f598     15 33 E2 FA | 	rdword	local07, local03
2f59c                 | ' 			wc = *lfn++;
2f59c                 | ' 			for (i = 0; i < 16; i++) {
2f59c     02 2A 06 F1 | 	add	local03, #2
2f5a0     10 12 DC FC | 	rep	@LR__4612, #16
2f5a4                 | LR__4611
2f5a4     01 2E 66 F0 | 	shl	local05, #1
2f5a8     19 31 32 F9 | 	getword	local06, local07, #0
2f5ac     01 30 06 F5 | 	and	local06, #1
2f5b0     18 2F 02 F1 | 	add	local05, local06
2f5b4     19 33 32 F9 | 	getword	local07, local07, #0
2f5b8     01 32 46 F0 | 	shr	local07, #1
2f5bc     10 2E 2E F4 | 	testbn	local05, #16 wz
2f5c0     88 00 00 5F 
2f5c4     21 2E 66 55 |  if_ne	xor	local05, ##69665
2f5c8                 | LR__4612
2f5c8     C4 FF 9F FD | 	jmp	#LR__4610
2f5cc                 | LR__4613
2f5cc                 | LR__4614
2f5cc     17 2D 02 F6 | 	mov	local04, local05
2f5d0                 | LR__4615
2f5d0     07 32 06 F6 | 	mov	local07, #7
2f5d4                 | ' 			}
2f5d4                 | ' 		}
2f5d4                 | ' 		seq = (UINT)sreg;
2f5d4                 | ' 	}
2f5d4                 | ' 
2f5d4                 | ' 
2f5d4                 | ' 	i = 7;
2f5d4                 | ' 	do {
2f5d4     10 4E 05 F1 | 	add	fp, #16
2f5d8     97 1A 48 FB | 	callpa	#(@LR__4617-@LR__4616)>>2,fcache_load_ptr_
2f5dc                 | LR__4616
2f5dc     16 2F 42 F8 | 	getnib	local05, local04, #0
2f5e0     30 2E 06 F1 | 	add	local05, #48
2f5e4     04 2C 46 F0 | 	shr	local04, #4
2f5e8     17 31 E2 F8 | 	getbyte	local06, local05, #0
2f5ec     3A 30 16 F2 | 	cmp	local06, #58 wc
2f5f0     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2f5f4     07 2E 06 31 |  if_ae	add	local05, #7
2f5f8     19 31 02 F6 | 	mov	local06, local07
2f5fc     01 32 8E F1 | 	sub	local07, #1 wz
2f600     A7 30 02 F1 | 	add	local06, fp
2f604     18 2F 42 FC | 	wrbyte	local05, local06
2f608     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2f60c     CC FF 9F 5D |  if_ne	jmp	#LR__4616
2f610                 | LR__4617
2f610     19 31 02 F6 | 	mov	local06, local07
2f614     A7 30 02 F1 | 	add	local06, fp
2f618     18 FD 48 FC | 	wrbyte	#126, local06
2f61c                 | ' 	ns[i] = '~';
2f61c                 | ' 
2f61c                 | ' 
2f61c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2f61c     00 2E 06 F6 | 	mov	local05, #0
2f620     10 4E 85 F1 | 	sub	fp, #16
2f624     97 2A 48 FB | 	callpa	#(@LR__4620-@LR__4618)>>2,fcache_load_ptr_
2f628                 | LR__4618
2f628     19 2F 12 F2 | 	cmp	local05, local07 wc
2f62c     4C 00 90 3D |  if_ae	jmp	#LR__4621
2f630     17 31 02 F6 | 	mov	local06, local05
2f634     13 31 02 F1 | 	add	local06, local01
2f638     18 31 C2 FA | 	rdbyte	local06, local06
2f63c     20 30 0E F2 | 	cmp	local06, #32 wz
2f640     38 00 90 AD |  if_e	jmp	#LR__4621
2f644     17 13 02 F6 | 	mov	arg01, local05
2f648     13 13 02 F1 | 	add	arg01, local01
2f64c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2f650     00 FA 05 56 |  if_ne	mov	result1, #0
2f654                 | ' 
2f654                 | ' 	return 0;
2f654     00 FA 05 A6 |  if_e	mov	result1, #0
2f658     00 FA 0D F2 | 	cmp	result1, #0 wz
2f65c     14 00 90 AD |  if_e	jmp	#LR__4619
2f660     19 31 02 F6 | 	mov	local06, local07
2f664     01 30 86 F1 | 	sub	local06, #1
2f668     18 2F 0A F2 | 	cmp	local05, local06 wz
2f66c     0C 00 90 AD |  if_e	jmp	#LR__4621
2f670     01 2E 06 F1 | 	add	local05, #1
2f674                 | LR__4619
2f674     01 2E 06 F1 | 	add	local05, #1
2f678     AC FF 9F FD | 	jmp	#LR__4618
2f67c                 | LR__4620
2f67c                 | LR__4621
2f67c     97 20 48 FB | 	callpa	#(@LR__4625-@LR__4622)>>2,fcache_load_ptr_
2f680                 | ' 			j++;
2f680                 | ' 		}
2f680                 | ' 	}
2f680                 | ' 	do {
2f680                 | LR__4622
2f680     17 31 02 F6 | 	mov	local06, local05
2f684     13 31 02 F1 | 	add	local06, local01
2f688     08 32 16 F2 | 	cmp	local07, #8 wc
2f68c     01 2E 06 F1 | 	add	local05, #1
2f690     1C 00 90 3D |  if_ae	jmp	#LR__4623
2f694     19 2D 02 F6 | 	mov	local04, local07
2f698     10 4E 05 F1 | 	add	fp, #16
2f69c     A7 2C 02 F1 | 	add	local04, fp
2f6a0     16 35 C2 FA | 	rdbyte	local08, local04
2f6a4     01 32 06 F1 | 	add	local07, #1
2f6a8     10 4E 85 F1 | 	sub	fp, #16
2f6ac     04 00 90 FD | 	jmp	#LR__4624
2f6b0                 | LR__4623
2f6b0     20 34 06 F6 | 	mov	local08, #32
2f6b4                 | LR__4624
2f6b4     18 35 42 FC | 	wrbyte	local08, local06
2f6b8     08 2E 16 F2 | 	cmp	local05, #8 wc
2f6bc     C0 FF 9F CD |  if_b	jmp	#LR__4622
2f6c0                 | LR__4625
2f6c0     A7 F0 03 F6 | 	mov	ptra, fp
2f6c4     B2 00 A0 FD | 	call	#popregs_
2f6c8                 | _fatfs_cc_gen_numname_ret
2f6c8     2D 00 64 FD | 	ret
2f6cc                 | 
2f6cc                 | _fatfs_cc_sum_sfn
2f6cc     00 00 06 F6 | 	mov	_var01, #0
2f6d0                 | ' )
2f6d0                 | ' {
2f6d0                 | ' 	BYTE sum = 0;
2f6d0                 | ' 	UINT n = 11;
2f6d0                 | ' 
2f6d0                 | ' 	do {
2f6d0     97 12 48 FB | 	callpa	#(@LR__4632-@LR__4630)>>2,fcache_load_ptr_
2f6d4                 | LR__4630
2f6d4     0B 10 DC FC | 	rep	@LR__4633, #11
2f6d8                 | LR__4631
2f6d8     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2f6dc     01 FA 45 F0 | 	shr	result1, #1
2f6e0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2f6e4     07 00 66 F0 | 	shl	_var01, #7
2f6e8     00 FB 01 F1 | 	add	result1, _var01
2f6ec     09 01 C2 FA | 	rdbyte	_var01, arg01
2f6f0     FD 00 02 F1 | 	add	_var01, result1
2f6f4     01 12 06 F1 | 	add	arg01, #1
2f6f8                 | LR__4632
2f6f8                 | LR__4633
2f6f8                 | ' 	return sum;
2f6f8     00 FB 01 F6 | 	mov	result1, _var01
2f6fc                 | _fatfs_cc_sum_sfn_ret
2f6fc     2D 00 64 FD | 	ret
2f700                 | 
2f700                 | _fatfs_cc_dir_read
2f700     0C 4A 05 F6 | 	mov	COUNT_, #12
2f704     A8 00 A0 FD | 	call	#pushregs_
2f708     09 27 02 F6 | 	mov	local01, arg01
2f70c     0A 29 02 F6 | 	mov	local02, arg02
2f710     04 2A 06 F6 | 	mov	local03, #4
2f714     13 2D 02 FB | 	rdlong	local04, local01
2f718     FF 2E 06 F6 | 	mov	local05, #255
2f71c     FF 30 06 F6 | 	mov	local06, #255
2f720                 | ' )
2f720                 | ' {
2f720                 | ' 	FRESULT res = FR_NO_FILE;
2f720                 | ' 	FATFS *fs = dp->obj.fs;
2f720                 | ' 	BYTE attr, b;
2f720                 | ' 
2f720                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2f720                 | ' 
2f720                 | ' 
2f720                 | ' 	while (dp->sect) {
2f720                 | LR__4640
2f720     18 26 06 F1 | 	add	local01, #24
2f724     13 FB 09 FB | 	rdlong	result1, local01 wz
2f728     18 26 86 F1 | 	sub	local01, #24
2f72c     AC 01 90 AD |  if_e	jmp	#LR__4650
2f730     18 26 06 F1 | 	add	local01, #24
2f734     13 15 02 FB | 	rdlong	arg02, local01
2f738     18 26 86 F1 | 	sub	local01, #24
2f73c     16 13 02 F6 | 	mov	arg01, local04
2f740     AC ED BF FD | 	call	#_fatfs_cc_move_window
2f744     FD 2A 0A F6 | 	mov	local03, result1 wz
2f748     90 01 90 5D |  if_ne	jmp	#LR__4650
2f74c     1C 26 06 F1 | 	add	local01, #28
2f750     13 FB 01 FB | 	rdlong	result1, local01
2f754     1C 26 86 F1 | 	sub	local01, #28
2f758     FD 32 C2 FA | 	rdbyte	local07, result1
2f75c     19 FB 01 F6 | 	mov	result1, local07
2f760     07 FA 4D F7 | 	zerox	result1, #7 wz
2f764     04 2A 06 A6 |  if_e	mov	local03, #4
2f768                 | ' 			res = FR_NO_FILE; break;
2f768     70 01 90 AD |  if_e	jmp	#LR__4650
2f76c     1C 26 06 F1 | 	add	local01, #28
2f770     13 35 02 FB | 	rdlong	local08, local01
2f774     0B 34 06 F1 | 	add	local08, #11
2f778     1A 37 C2 FA | 	rdbyte	local09, local08
2f77c     3F 36 06 F5 | 	and	local09, #63
2f780     16 26 86 F1 | 	sub	local01, #22
2f784     13 37 42 FC | 	wrbyte	local09, local01
2f788     06 26 86 F1 | 	sub	local01, #6
2f78c     19 FB E1 F8 | 	getbyte	result1, local07, #0
2f790     E5 FA 0D F2 | 	cmp	result1, #229 wz
2f794     19 35 02 56 |  if_ne	mov	local08, local07
2f798     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2f79c     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2f7a0     1C 00 90 AD |  if_e	jmp	#LR__4641
2f7a4     00 38 06 F6 | 	mov	local10, #0
2f7a8     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2f7ac     20 34 26 F5 | 	andn	local08, #32
2f7b0     08 34 0E F2 | 	cmp	local08, #8 wz
2f7b4     01 38 06 A6 |  if_e	mov	local10, #1
2f7b8     14 39 0A F2 | 	cmp	local10, local02 wz
2f7bc     08 00 90 AD |  if_e	jmp	#LR__4642
2f7c0                 | LR__4641
2f7c0     FF 2E 06 F6 | 	mov	local05, #255
2f7c4     00 01 90 FD | 	jmp	#LR__4649
2f7c8                 | LR__4642
2f7c8     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2f7cc     0F 36 0E F2 | 	cmp	local09, #15 wz
2f7d0     B4 00 90 5D |  if_ne	jmp	#LR__4646
2f7d4     19 3B E2 F8 | 	getbyte	local11, local07, #0
2f7d8     40 3A CE F7 | 	test	local11, #64 wz
2f7dc     30 00 90 AD |  if_e	jmp	#LR__4643
2f7e0     1C 26 06 F1 | 	add	local01, #28
2f7e4     13 3B 02 FB | 	rdlong	local11, local01
2f7e8     0D 3A 06 F1 | 	add	local11, #13
2f7ec     1D 31 C2 FA | 	rdbyte	local06, local11
2f7f0     19 33 E2 F8 | 	getbyte	local07, local07, #0
2f7f4     BF 32 06 F5 | 	and	local07, #191
2f7f8     19 2F 02 F6 | 	mov	local05, local07
2f7fc     0C 26 86 F1 | 	sub	local01, #12
2f800     13 3B 02 FB | 	rdlong	local11, local01
2f804     1C 26 06 F1 | 	add	local01, #28
2f808     13 3B 62 FC | 	wrlong	local11, local01
2f80c     2C 26 86 F1 | 	sub	local01, #44
2f810                 | LR__4643
2f810     19 35 E2 F8 | 	getbyte	local08, local07, #0
2f814     17 39 E2 F8 | 	getbyte	local10, local05, #0
2f818     1C 35 0A F2 | 	cmp	local08, local10 wz
2f81c     5C 00 90 5D |  if_ne	jmp	#LR__4644
2f820     18 39 E2 F8 | 	getbyte	local10, local06, #0
2f824     1C 26 06 F1 | 	add	local01, #28
2f828     13 37 02 FB | 	rdlong	local09, local01
2f82c     1C 26 86 F1 | 	sub	local01, #28
2f830     0D 36 06 F1 | 	add	local09, #13
2f834     1B 35 C2 FA | 	rdbyte	local08, local09
2f838     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2f83c     1B 39 0A F2 | 	cmp	local10, local09 wz
2f840     38 00 90 5D |  if_ne	jmp	#LR__4644
2f844     0C 2C 06 F1 | 	add	local04, #12
2f848     16 13 02 FB | 	rdlong	arg01, local04
2f84c     0C 2C 86 F1 | 	sub	local04, #12
2f850     1C 26 06 F1 | 	add	local01, #28
2f854     13 3D 02 FB | 	rdlong	local12, local01
2f858     1C 26 86 F1 | 	sub	local01, #28
2f85c     1E 15 02 F6 | 	mov	arg02, local12
2f860     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2f864     00 FA 4D F2 | 	cmps	result1, #0 wz
2f868     17 3D 02 56 |  if_ne	mov	local12, local05
2f86c     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2f870     01 3C 86 51 |  if_ne	sub	local12, #1
2f874     1E 3B 02 56 |  if_ne	mov	local11, local12
2f878     04 00 90 5D |  if_ne	jmp	#LR__4645
2f87c                 | LR__4644
2f87c     FF 3A 06 F6 | 	mov	local11, #255
2f880                 | LR__4645
2f880     1D 2F 02 F6 | 	mov	local05, local11
2f884     40 00 90 FD | 	jmp	#LR__4648
2f888                 | LR__4646
2f888     17 3B 02 F6 | 	mov	local11, local05
2f88c     07 3A 4E F7 | 	zerox	local11, #7 wz
2f890     20 00 90 5D |  if_ne	jmp	#LR__4647
2f894     18 31 E2 F8 | 	getbyte	local06, local06, #0
2f898     1C 26 06 F1 | 	add	local01, #28
2f89c     13 13 02 FB | 	rdlong	arg01, local01
2f8a0     1C 26 86 F1 | 	sub	local01, #28
2f8a4     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2f8a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f8ac     FD 30 0A F2 | 	cmp	local06, result1 wz
2f8b0     28 00 90 AD |  if_e	jmp	#LR__4650
2f8b4                 | LR__4647
2f8b4     2C 26 06 F1 | 	add	local01, #44
2f8b8     FF FF FF FF 
2f8bc     13 FF 6B FC | 	wrlong	##-1, local01
2f8c0     2C 26 86 F1 | 	sub	local01, #44
2f8c4                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2f8c4                 | ' 					}
2f8c4                 | ' 					break;
2f8c4     14 00 90 FD | 	jmp	#LR__4650
2f8c8                 | LR__4648
2f8c8                 | LR__4649
2f8c8     13 13 02 F6 | 	mov	arg01, local01
2f8cc     00 14 06 F6 | 	mov	arg02, #0
2f8d0     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2f8d4     FD 2A 0A F6 | 	mov	local03, result1 wz
2f8d8     44 FE 9F AD |  if_e	jmp	#LR__4640
2f8dc                 | LR__4650
2f8dc     00 2A 0E F2 | 	cmp	local03, #0 wz
2f8e0     18 26 06 51 |  if_ne	add	local01, #24
2f8e4     13 01 68 5C |  if_ne	wrlong	#0, local01
2f8e8                 | ' 	return res;
2f8e8     15 FB 01 F6 | 	mov	result1, local03
2f8ec     A7 F0 03 F6 | 	mov	ptra, fp
2f8f0     B2 00 A0 FD | 	call	#popregs_
2f8f4                 | _fatfs_cc_dir_read_ret
2f8f4     2D 00 64 FD | 	ret
2f8f8                 | 
2f8f8                 | _fatfs_cc_dir_find
2f8f8     0B 4A 05 F6 | 	mov	COUNT_, #11
2f8fc     A8 00 A0 FD | 	call	#pushregs_
2f900     09 27 02 F6 | 	mov	local01, arg01
2f904     13 29 02 FB | 	rdlong	local02, local01
2f908     13 13 02 F6 | 	mov	arg01, local01
2f90c     00 14 06 F6 | 	mov	arg02, #0
2f910     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2f914     00 FA 0D F2 | 	cmp	result1, #0 wz
2f918     18 02 90 5D |  if_ne	jmp	#LR__4672
2f91c     FF 2A 06 F6 | 	mov	local03, #255
2f920     FF 2C 06 F6 | 	mov	local04, #255
2f924     2C 26 06 F1 | 	add	local01, #44
2f928     FF FF FF FF 
2f92c     13 FF 6B FC | 	wrlong	##-1, local01
2f930     2C 26 86 F1 | 	sub	local01, #44
2f934                 | ' #line 2404 "ff.c"
2f934                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2f934                 | ' 
2f934                 | ' 	do {
2f934                 | LR__4660
2f934     18 26 06 F1 | 	add	local01, #24
2f938     13 15 02 FB | 	rdlong	arg02, local01
2f93c     18 26 86 F1 | 	sub	local01, #24
2f940     14 13 02 F6 | 	mov	arg01, local02
2f944     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2f948     FD 2E 0A F6 | 	mov	local05, result1 wz
2f94c     E0 01 90 5D |  if_ne	jmp	#LR__4671
2f950     1C 26 06 F1 | 	add	local01, #28
2f954     13 17 02 FB | 	rdlong	arg03, local01
2f958     1C 26 86 F1 | 	sub	local01, #28
2f95c     0B 31 C2 FA | 	rdbyte	local06, arg03
2f960     18 17 02 F6 | 	mov	arg03, local06
2f964     07 16 4E F7 | 	zerox	arg03, #7 wz
2f968     04 2E 06 A6 |  if_e	mov	local05, #4
2f96c     C0 01 90 AD |  if_e	jmp	#LR__4671
2f970     1C 26 06 F1 | 	add	local01, #28
2f974     13 33 02 FB | 	rdlong	local07, local01
2f978     19 17 02 F6 | 	mov	arg03, local07
2f97c     0B 16 06 F1 | 	add	arg03, #11
2f980     0B 35 C2 FA | 	rdbyte	local08, arg03
2f984     3F 34 06 F5 | 	and	local08, #63
2f988     16 26 86 F1 | 	sub	local01, #22
2f98c     13 35 42 FC | 	wrbyte	local08, local01
2f990     06 26 86 F1 | 	sub	local01, #6
2f994     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2f998     E5 16 0E F2 | 	cmp	arg03, #229 wz
2f99c     18 00 90 AD |  if_e	jmp	#LR__4661
2f9a0     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2f9a4     08 16 CE F7 | 	test	arg03, #8 wz
2f9a8     1A 33 02 56 |  if_ne	mov	local07, local08
2f9ac     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2f9b0     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2f9b4     18 00 90 AD |  if_e	jmp	#LR__4662
2f9b8                 | LR__4661
2f9b8     FF 2C 06 F6 | 	mov	local04, #255
2f9bc     2C 26 06 F1 | 	add	local01, #44
2f9c0     FF FF FF FF 
2f9c4     13 FF 6B FC | 	wrlong	##-1, local01
2f9c8     2C 26 86 F1 | 	sub	local01, #44
2f9cc     4C 01 90 FD | 	jmp	#LR__4670
2f9d0                 | LR__4662
2f9d0     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2f9d4     0F 34 0E F2 | 	cmp	local08, #15 wz
2f9d8     C8 00 90 5D |  if_ne	jmp	#LR__4666
2f9dc     2B 26 06 F1 | 	add	local01, #43
2f9e0     13 35 C2 FA | 	rdbyte	local08, local01
2f9e4     2B 26 86 F1 | 	sub	local01, #43
2f9e8     40 34 CE F7 | 	test	local08, #64 wz
2f9ec     2C 01 90 5D |  if_ne	jmp	#LR__4669
2f9f0     18 37 E2 F8 | 	getbyte	local09, local06, #0
2f9f4     40 36 CE F7 | 	test	local09, #64 wz
2f9f8     30 00 90 AD |  if_e	jmp	#LR__4663
2f9fc     1C 26 06 F1 | 	add	local01, #28
2fa00     13 37 02 FB | 	rdlong	local09, local01
2fa04     0D 36 06 F1 | 	add	local09, #13
2fa08     1B 2B C2 FA | 	rdbyte	local03, local09
2fa0c     18 31 E2 F8 | 	getbyte	local06, local06, #0
2fa10     BF 30 06 F5 | 	and	local06, #191
2fa14     18 2D 02 F6 | 	mov	local04, local06
2fa18     0C 26 86 F1 | 	sub	local01, #12
2fa1c     13 37 02 FB | 	rdlong	local09, local01
2fa20     1C 26 06 F1 | 	add	local01, #28
2fa24     13 37 62 FC | 	wrlong	local09, local01
2fa28     2C 26 86 F1 | 	sub	local01, #44
2fa2c                 | LR__4663
2fa2c     18 39 E2 F8 | 	getbyte	local10, local06, #0
2fa30     16 33 E2 F8 | 	getbyte	local07, local04, #0
2fa34     19 39 0A F2 | 	cmp	local10, local07 wz
2fa38     5C 00 90 5D |  if_ne	jmp	#LR__4664
2fa3c     15 35 E2 F8 | 	getbyte	local08, local03, #0
2fa40     1C 26 06 F1 | 	add	local01, #28
2fa44     13 33 02 FB | 	rdlong	local07, local01
2fa48     1C 26 86 F1 | 	sub	local01, #28
2fa4c     0D 32 06 F1 | 	add	local07, #13
2fa50     19 31 C2 FA | 	rdbyte	local06, local07
2fa54     18 33 E2 F8 | 	getbyte	local07, local06, #0
2fa58     19 35 0A F2 | 	cmp	local08, local07 wz
2fa5c     38 00 90 5D |  if_ne	jmp	#LR__4664
2fa60     0C 28 06 F1 | 	add	local02, #12
2fa64     14 13 02 FB | 	rdlong	arg01, local02
2fa68     0C 28 86 F1 | 	sub	local02, #12
2fa6c     1C 26 06 F1 | 	add	local01, #28
2fa70     13 3B 02 FB | 	rdlong	local11, local01
2fa74     1C 26 86 F1 | 	sub	local01, #28
2fa78     1D 15 02 F6 | 	mov	arg02, local11
2fa7c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2fa80     00 FA 4D F2 | 	cmps	result1, #0 wz
2fa84     16 3B 02 56 |  if_ne	mov	local11, local04
2fa88     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2fa8c     01 3A 86 51 |  if_ne	sub	local11, #1
2fa90     1D 37 02 56 |  if_ne	mov	local09, local11
2fa94     04 00 90 5D |  if_ne	jmp	#LR__4665
2fa98                 | LR__4664
2fa98     FF 36 06 F6 | 	mov	local09, #255
2fa9c                 | LR__4665
2fa9c     1B 2D 02 F6 | 	mov	local04, local09
2faa0     78 00 90 FD | 	jmp	#LR__4669
2faa4                 | LR__4666
2faa4     16 37 02 F6 | 	mov	local09, local04
2faa8     07 36 4E F7 | 	zerox	local09, #7 wz
2faac     20 00 90 5D |  if_ne	jmp	#LR__4667
2fab0     15 39 E2 F8 | 	getbyte	local10, local03, #0
2fab4     1C 26 06 F1 | 	add	local01, #28
2fab8     13 13 02 FB | 	rdlong	arg01, local01
2fabc     1C 26 86 F1 | 	sub	local01, #28
2fac0     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2fac4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2fac8     FD 38 0A F2 | 	cmp	local10, result1 wz
2facc     60 00 90 AD |  if_e	jmp	#LR__4671
2fad0                 | LR__4667
2fad0     2B 26 06 F1 | 	add	local01, #43
2fad4     13 37 C2 FA | 	rdbyte	local09, local01
2fad8     2B 26 86 F1 | 	sub	local01, #43
2fadc     01 36 CE F7 | 	test	local09, #1 wz
2fae0     24 00 90 5D |  if_ne	jmp	#LR__4668
2fae4     1C 26 06 F1 | 	add	local01, #28
2fae8     13 13 02 FB | 	rdlong	arg01, local01
2faec     04 26 06 F1 | 	add	local01, #4
2faf0     13 15 02 F6 | 	mov	arg02, local01
2faf4     20 26 86 F1 | 	sub	local01, #32
2faf8     0B 16 06 F6 | 	mov	arg03, #11
2fafc     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2fb00     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb04     28 00 90 AD |  if_e	jmp	#LR__4671
2fb08                 | LR__4668
2fb08     FF 2C 06 F6 | 	mov	local04, #255
2fb0c     2C 26 06 F1 | 	add	local01, #44
2fb10     FF FF FF FF 
2fb14     13 FF 6B FC | 	wrlong	##-1, local01
2fb18     2C 26 86 F1 | 	sub	local01, #44
2fb1c                 | LR__4669
2fb1c                 | LR__4670
2fb1c     13 13 02 F6 | 	mov	arg01, local01
2fb20     00 14 06 F6 | 	mov	arg02, #0
2fb24     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2fb28     FD 2E 0A F6 | 	mov	local05, result1 wz
2fb2c     04 FE 9F AD |  if_e	jmp	#LR__4660
2fb30                 | LR__4671
2fb30                 | ' 
2fb30                 | ' 	return res;
2fb30     17 FB 01 F6 | 	mov	result1, local05
2fb34                 | LR__4672
2fb34     A7 F0 03 F6 | 	mov	ptra, fp
2fb38     B2 00 A0 FD | 	call	#popregs_
2fb3c                 | _fatfs_cc_dir_find_ret
2fb3c     2D 00 64 FD | 	ret
2fb40                 | 
2fb40                 | _fatfs_cc_dir_register
2fb40     0A 4A 05 F6 | 	mov	COUNT_, #10
2fb44     A8 00 A0 FD | 	call	#pushregs_
2fb48     2C F0 07 F1 | 	add	ptra, #44
2fb4c     04 4E 05 F1 | 	add	fp, #4
2fb50     A7 12 62 FC | 	wrlong	arg01, fp
2fb54     09 27 02 FB | 	rdlong	local01, arg01
2fb58     08 4E 05 F1 | 	add	fp, #8
2fb5c     A7 26 62 FC | 	wrlong	local01, fp
2fb60     08 4E 85 F1 | 	sub	fp, #8
2fb64     A7 28 02 FB | 	rdlong	local02, fp
2fb68     04 4E 85 F1 | 	sub	fp, #4
2fb6c     2B 28 06 F1 | 	add	local02, #43
2fb70     14 29 C2 FA | 	rdbyte	local02, local02
2fb74     A0 28 CE F7 | 	test	local02, #160 wz
2fb78     06 FA 05 56 |  if_ne	mov	result1, #6
2fb7c     F8 03 90 5D |  if_ne	jmp	#LR__4695
2fb80                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2fb80     14 4E 05 F1 | 	add	fp, #20
2fb84     A7 00 68 FC | 	wrlong	#0, fp
2fb88     14 4E 85 F1 | 	sub	fp, #20
2fb8c     97 28 48 FB | 	callpa	#(@LR__4681-@LR__4680)>>2,fcache_load_ptr_
2fb90                 | LR__4680
2fb90     0C 4E 05 F1 | 	add	fp, #12
2fb94     A7 28 02 FB | 	rdlong	local02, fp
2fb98     0C 28 06 F1 | 	add	local02, #12
2fb9c     14 2B 02 FB | 	rdlong	local03, local02
2fba0     08 4E 05 F1 | 	add	fp, #8
2fba4     A7 2C 02 FB | 	rdlong	local04, fp
2fba8     14 4E 85 F1 | 	sub	fp, #20
2fbac     01 2C 66 F0 | 	shl	local04, #1
2fbb0     15 2D 02 F1 | 	add	local04, local03
2fbb4     16 29 EA FA | 	rdword	local02, local04 wz
2fbb8     24 00 90 AD |  if_e	jmp	#LR__4682
2fbbc     14 4E 05 F1 | 	add	fp, #20
2fbc0     A7 2E 02 FB | 	rdlong	local05, fp
2fbc4     17 31 02 F6 | 	mov	local06, local05
2fbc8     17 33 02 F6 | 	mov	local07, local05
2fbcc     19 35 02 F6 | 	mov	local08, local07
2fbd0     01 34 06 F1 | 	add	local08, #1
2fbd4     A7 34 62 FC | 	wrlong	local08, fp
2fbd8     14 4E 85 F1 | 	sub	fp, #20
2fbdc     B0 FF 9F FD | 	jmp	#LR__4680
2fbe0                 | LR__4681
2fbe0                 | LR__4682
2fbe0     1C 4E 05 F1 | 	add	fp, #28
2fbe4     A7 12 02 F6 | 	mov	arg01, fp
2fbe8     18 4E 85 F1 | 	sub	fp, #24
2fbec     A7 14 02 FB | 	rdlong	arg02, fp
2fbf0     04 4E 85 F1 | 	sub	fp, #4
2fbf4     20 14 06 F1 | 	add	arg02, #32
2fbf8     0C 16 06 F6 | 	mov	arg03, #12
2fbfc     18 6C BF FD | 	call	#__system____builtin_memmove
2fc00     27 4E 05 F1 | 	add	fp, #39
2fc04     A7 36 C2 FA | 	rdbyte	local09, fp
2fc08     27 4E 85 F1 | 	sub	fp, #39
2fc0c     01 36 CE F7 | 	test	local09, #1 wz
2fc10     F4 00 90 AD |  if_e	jmp	#LR__4685
2fc14     04 4E 05 F1 | 	add	fp, #4
2fc18     A7 38 02 FB | 	rdlong	local10, fp
2fc1c     2B 38 06 F1 | 	add	local10, #43
2fc20     1C 81 48 FC | 	wrbyte	#64, local10
2fc24                 | ' 		dp->fn[ 11 ] =  0x40 ;
2fc24                 | ' 		for (n = 1; n < 100; n++) {
2fc24     0C 4E 05 F1 | 	add	fp, #12
2fc28     A7 02 68 FC | 	wrlong	#1, fp
2fc2c     10 4E 85 F1 | 	sub	fp, #16
2fc30                 | LR__4683
2fc30     10 4E 05 F1 | 	add	fp, #16
2fc34     A7 28 02 FB | 	rdlong	local02, fp
2fc38     10 4E 85 F1 | 	sub	fp, #16
2fc3c     64 28 16 F2 | 	cmp	local02, #100 wc
2fc40     70 00 90 3D |  if_ae	jmp	#LR__4684
2fc44     04 4E 05 F1 | 	add	fp, #4
2fc48     A7 12 02 FB | 	rdlong	arg01, fp
2fc4c     20 12 06 F1 | 	add	arg01, #32
2fc50     18 4E 05 F1 | 	add	fp, #24
2fc54     A7 14 02 F6 | 	mov	arg02, fp
2fc58     10 4E 85 F1 | 	sub	fp, #16
2fc5c     A7 38 02 FB | 	rdlong	local10, fp
2fc60     0C 38 06 F1 | 	add	local10, #12
2fc64     1C 17 02 FB | 	rdlong	arg03, local10
2fc68     04 4E 05 F1 | 	add	fp, #4
2fc6c     A7 18 02 FB | 	rdlong	arg04, fp
2fc70     10 4E 85 F1 | 	sub	fp, #16
2fc74     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2fc78     04 4E 05 F1 | 	add	fp, #4
2fc7c     A7 12 02 FB | 	rdlong	arg01, fp
2fc80     04 4E 85 F1 | 	sub	fp, #4
2fc84     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2fc88     08 4E 05 F1 | 	add	fp, #8
2fc8c     A7 FA 61 FC | 	wrlong	result1, fp
2fc90     00 FA 4D F2 | 	cmps	result1, #0 wz
2fc94     08 4E 85 F1 | 	sub	fp, #8
2fc98     18 00 90 5D |  if_ne	jmp	#LR__4684
2fc9c     10 4E 05 F1 | 	add	fp, #16
2fca0     A7 38 02 FB | 	rdlong	local10, fp
2fca4     01 38 06 F1 | 	add	local10, #1
2fca8     A7 38 62 FC | 	wrlong	local10, fp
2fcac     10 4E 85 F1 | 	sub	fp, #16
2fcb0     7C FF 9F FD | 	jmp	#LR__4683
2fcb4                 | LR__4684
2fcb4     10 4E 05 F1 | 	add	fp, #16
2fcb8     A7 38 02 FB | 	rdlong	local10, fp
2fcbc     10 4E 85 F1 | 	sub	fp, #16
2fcc0     64 38 0E F2 | 	cmp	local10, #100 wz
2fcc4     07 FA 05 A6 |  if_e	mov	result1, #7
2fcc8     AC 02 90 AD |  if_e	jmp	#LR__4695
2fccc     08 4E 05 F1 | 	add	fp, #8
2fcd0     A7 38 02 FB | 	rdlong	local10, fp
2fcd4     08 4E 85 F1 | 	sub	fp, #8
2fcd8     04 38 0E F2 | 	cmp	local10, #4 wz
2fcdc     08 4E 05 51 |  if_ne	add	fp, #8
2fce0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2fce4     08 4E 85 51 |  if_ne	sub	fp, #8
2fce8     8C 02 90 5D |  if_ne	jmp	#LR__4695
2fcec     04 4E 05 F1 | 	add	fp, #4
2fcf0     A7 38 02 FB | 	rdlong	local10, fp
2fcf4     23 4E 05 F1 | 	add	fp, #35
2fcf8     A7 26 C2 FA | 	rdbyte	local01, fp
2fcfc     27 4E 85 F1 | 	sub	fp, #39
2fd00     2B 38 06 F1 | 	add	local10, #43
2fd04     1C 27 42 FC | 	wrbyte	local01, local10
2fd08                 | LR__4685
2fd08     27 4E 05 F1 | 	add	fp, #39
2fd0c     A7 28 C2 FA | 	rdbyte	local02, fp
2fd10     27 4E 85 F1 | 	sub	fp, #39
2fd14     02 28 CE F7 | 	test	local02, #2 wz
2fd18     20 00 90 AD |  if_e	jmp	#LR__4686
2fd1c     14 4E 05 F1 | 	add	fp, #20
2fd20     A7 38 02 FB | 	rdlong	local10, fp
2fd24     0C 38 06 F1 | 	add	local10, #12
2fd28     0D 38 16 FD | 	qdiv	local10, #13
2fd2c     14 4E 85 F1 | 	sub	fp, #20
2fd30     18 38 62 FD | 	getqx	local10
2fd34     01 38 06 F1 | 	add	local10, #1
2fd38     04 00 90 FD | 	jmp	#LR__4687
2fd3c                 | LR__4686
2fd3c     01 38 06 F6 | 	mov	local10, #1
2fd40                 | LR__4687
2fd40     18 4E 05 F1 | 	add	fp, #24
2fd44     A7 38 62 FC | 	wrlong	local10, fp
2fd48     14 4E 85 F1 | 	sub	fp, #20
2fd4c     A7 12 02 FB | 	rdlong	arg01, fp
2fd50     1C 15 02 F6 | 	mov	arg02, local10
2fd54     04 4E 85 F1 | 	sub	fp, #4
2fd58     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2fd5c     08 4E 05 F1 | 	add	fp, #8
2fd60     A7 FA 61 FC | 	wrlong	result1, fp
2fd64     08 4E 85 F1 | 	sub	fp, #8
2fd68     00 FA 0D F2 | 	cmp	result1, #0 wz
2fd6c     38 01 90 5D |  if_ne	jmp	#LR__4692
2fd70     18 4E 05 F1 | 	add	fp, #24
2fd74     A7 38 02 FB | 	rdlong	local10, fp
2fd78     01 38 8E F1 | 	sub	local10, #1 wz
2fd7c     A7 38 62 FC | 	wrlong	local10, fp
2fd80     18 4E 85 F1 | 	sub	fp, #24
2fd84     20 01 90 AD |  if_e	jmp	#LR__4692
2fd88     04 4E 05 F1 | 	add	fp, #4
2fd8c     A7 38 02 FB | 	rdlong	local10, fp
2fd90     1C 13 02 F6 | 	mov	arg01, local10
2fd94     14 4E 05 F1 | 	add	fp, #20
2fd98     A7 18 02 FB | 	rdlong	arg04, fp
2fd9c     18 4E 85 F1 | 	sub	fp, #24
2fda0     05 18 66 F0 | 	shl	arg04, #5
2fda4     10 38 06 F1 | 	add	local10, #16
2fda8     1C 15 02 FB | 	rdlong	arg02, local10
2fdac     0C 15 82 F1 | 	sub	arg02, arg04
2fdb0     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2fdb4     08 4E 05 F1 | 	add	fp, #8
2fdb8     A7 FA 61 FC | 	wrlong	result1, fp
2fdbc     08 4E 85 F1 | 	sub	fp, #8
2fdc0     00 FA 0D F2 | 	cmp	result1, #0 wz
2fdc4     E0 00 90 5D |  if_ne	jmp	#LR__4691
2fdc8     04 4E 05 F1 | 	add	fp, #4
2fdcc     A7 12 02 FB | 	rdlong	arg01, fp
2fdd0     04 4E 85 F1 | 	sub	fp, #4
2fdd4     20 12 06 F1 | 	add	arg01, #32
2fdd8     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2fddc     FD 38 02 F6 | 	mov	local10, result1
2fde0     28 4E 05 F1 | 	add	fp, #40
2fde4     A7 38 42 FC | 	wrbyte	local10, fp
2fde8     28 4E 85 F1 | 	sub	fp, #40
2fdec                 | ' 			sum = sum_sfn(dp->fn);
2fdec                 | ' 			do {
2fdec                 | LR__4688
2fdec     0C 4E 05 F1 | 	add	fp, #12
2fdf0     A7 12 02 FB | 	rdlong	arg01, fp
2fdf4     08 4E 85 F1 | 	sub	fp, #8
2fdf8     A7 26 02 FB | 	rdlong	local01, fp
2fdfc     04 4E 85 F1 | 	sub	fp, #4
2fe00     18 26 06 F1 | 	add	local01, #24
2fe04     13 15 02 FB | 	rdlong	arg02, local01
2fe08     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2fe0c     08 4E 05 F1 | 	add	fp, #8
2fe10     A7 FA 61 FC | 	wrlong	result1, fp
2fe14     00 FA 4D F2 | 	cmps	result1, #0 wz
2fe18     08 4E 85 F1 | 	sub	fp, #8
2fe1c     88 00 90 5D |  if_ne	jmp	#LR__4690
2fe20     0C 4E 05 F1 | 	add	fp, #12
2fe24     A7 28 02 FB | 	rdlong	local02, fp
2fe28     0C 28 06 F1 | 	add	local02, #12
2fe2c     14 13 02 FB | 	rdlong	arg01, local02
2fe30     08 4E 85 F1 | 	sub	fp, #8
2fe34     A7 26 02 FB | 	rdlong	local01, fp
2fe38     1C 26 06 F1 | 	add	local01, #28
2fe3c     13 15 02 FB | 	rdlong	arg02, local01
2fe40     14 4E 05 F1 | 	add	fp, #20
2fe44     A7 16 02 FB | 	rdlong	arg03, fp
2fe48     10 4E 05 F1 | 	add	fp, #16
2fe4c     A7 18 C2 FA | 	rdbyte	arg04, fp
2fe50     28 4E 85 F1 | 	sub	fp, #40
2fe54     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2fe58     0C 4E 05 F1 | 	add	fp, #12
2fe5c     A7 38 02 FB | 	rdlong	local10, fp
2fe60     03 38 06 F1 | 	add	local10, #3
2fe64     1C 03 48 FC | 	wrbyte	#1, local10
2fe68     08 4E 85 F1 | 	sub	fp, #8
2fe6c     A7 12 02 FB | 	rdlong	arg01, fp
2fe70     04 4E 85 F1 | 	sub	fp, #4
2fe74     00 14 06 F6 | 	mov	arg02, #0
2fe78     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2fe7c     08 4E 05 F1 | 	add	fp, #8
2fe80     A7 FA 61 FC | 	wrlong	result1, fp
2fe84     00 FA 4D F2 | 	cmps	result1, #0 wz
2fe88     08 4E 85 F1 | 	sub	fp, #8
2fe8c     18 00 90 5D |  if_ne	jmp	#LR__4689
2fe90     18 4E 05 F1 | 	add	fp, #24
2fe94     A7 38 02 FB | 	rdlong	local10, fp
2fe98     01 38 8E F1 | 	sub	local10, #1 wz
2fe9c     A7 38 62 FC | 	wrlong	local10, fp
2fea0     18 4E 85 F1 | 	sub	fp, #24
2fea4     44 FF 9F 5D |  if_ne	jmp	#LR__4688
2fea8                 | LR__4689
2fea8                 | LR__4690
2fea8                 | LR__4691
2fea8                 | LR__4692
2fea8     08 4E 05 F1 | 	add	fp, #8
2feac     A7 38 0A FB | 	rdlong	local10, fp wz
2feb0     08 4E 85 F1 | 	sub	fp, #8
2feb4     B4 00 90 5D |  if_ne	jmp	#LR__4694
2feb8     0C 4E 05 F1 | 	add	fp, #12
2febc     A7 12 02 FB | 	rdlong	arg01, fp
2fec0     08 4E 85 F1 | 	sub	fp, #8
2fec4     A7 26 02 FB | 	rdlong	local01, fp
2fec8     04 4E 85 F1 | 	sub	fp, #4
2fecc     18 26 06 F1 | 	add	local01, #24
2fed0     13 15 02 FB | 	rdlong	arg02, local01
2fed4     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2fed8     08 4E 05 F1 | 	add	fp, #8
2fedc     A7 FA 61 FC | 	wrlong	result1, fp
2fee0     08 4E 85 F1 | 	sub	fp, #8
2fee4     00 FA 0D F2 | 	cmp	result1, #0 wz
2fee8     80 00 90 5D |  if_ne	jmp	#LR__4693
2feec     04 4E 05 F1 | 	add	fp, #4
2fef0     A7 28 02 FB | 	rdlong	local02, fp
2fef4     04 4E 85 F1 | 	sub	fp, #4
2fef8     1C 28 06 F1 | 	add	local02, #28
2fefc     14 13 02 FB | 	rdlong	arg01, local02
2ff00     00 14 06 F6 | 	mov	arg02, #0
2ff04     20 16 06 F6 | 	mov	arg03, #32
2ff08     98 00 A0 FD | 	call	#\builtin_bytefill_
2ff0c     04 4E 05 F1 | 	add	fp, #4
2ff10     A7 14 02 FB | 	rdlong	arg02, fp
2ff14     0A 27 02 F6 | 	mov	local01, arg02
2ff18     1C 26 06 F1 | 	add	local01, #28
2ff1c     13 13 02 FB | 	rdlong	arg01, local01
2ff20     04 4E 85 F1 | 	sub	fp, #4
2ff24     20 14 06 F1 | 	add	arg02, #32
2ff28     0B 16 06 F6 | 	mov	arg03, #11
2ff2c     E8 68 BF FD | 	call	#__system____builtin_memmove
2ff30     04 4E 05 F1 | 	add	fp, #4
2ff34     A7 36 02 FB | 	rdlong	local09, fp
2ff38     1B 39 02 F6 | 	mov	local10, local09
2ff3c     1C 38 06 F1 | 	add	local10, #28
2ff40     1C 27 02 FB | 	rdlong	local01, local10
2ff44     2B 36 06 F1 | 	add	local09, #43
2ff48     1B 39 C2 FA | 	rdbyte	local10, local09
2ff4c     18 38 06 F5 | 	and	local10, #24
2ff50     0C 26 06 F1 | 	add	local01, #12
2ff54     13 39 42 FC | 	wrbyte	local10, local01
2ff58     08 4E 05 F1 | 	add	fp, #8
2ff5c     A7 38 02 FB | 	rdlong	local10, fp
2ff60     0C 4E 85 F1 | 	sub	fp, #12
2ff64     03 38 06 F1 | 	add	local10, #3
2ff68     1C 03 48 FC | 	wrbyte	#1, local10
2ff6c                 | LR__4693
2ff6c                 | LR__4694
2ff6c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2ff6c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2ff6c                 | ' 
2ff6c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2ff6c                 | ' 
2ff6c                 | ' 			fs->wflag = 1;
2ff6c                 | ' 		}
2ff6c                 | ' 	}
2ff6c                 | ' 
2ff6c                 | ' 	return res;
2ff6c     08 4E 05 F1 | 	add	fp, #8
2ff70     A7 FA 01 FB | 	rdlong	result1, fp
2ff74     08 4E 85 F1 | 	sub	fp, #8
2ff78                 | LR__4695
2ff78     A7 F0 03 F6 | 	mov	ptra, fp
2ff7c     B2 00 A0 FD | 	call	#popregs_
2ff80                 | _fatfs_cc_dir_register_ret
2ff80     2D 00 64 FD | 	ret
2ff84                 | 
2ff84                 | _fatfs_cc_dir_remove
2ff84     05 4A 05 F6 | 	mov	COUNT_, #5
2ff88     A8 00 A0 FD | 	call	#pushregs_
2ff8c     09 27 02 F6 | 	mov	local01, arg01
2ff90     13 29 02 FB | 	rdlong	local02, local01
2ff94     10 26 06 F1 | 	add	local01, #16
2ff98     13 2B 02 FB | 	rdlong	local03, local01
2ff9c     1C 26 06 F1 | 	add	local01, #28
2ffa0     13 15 02 FB | 	rdlong	arg02, local01
2ffa4     2C 26 86 F1 | 	sub	local01, #44
2ffa8     FF FF 7F FF 
2ffac     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2ffb0     00 2C 06 A6 |  if_e	mov	local04, #0
2ffb4     18 00 90 AD |  if_e	jmp	#LR__4700
2ffb8     13 13 02 F6 | 	mov	arg01, local01
2ffbc     2C 26 06 F1 | 	add	local01, #44
2ffc0     13 15 02 FB | 	rdlong	arg02, local01
2ffc4     2C 26 86 F1 | 	sub	local01, #44
2ffc8     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2ffcc     FD 2C 02 F6 | 	mov	local04, result1
2ffd0                 | LR__4700
2ffd0     16 2F 0A F6 | 	mov	local05, local04 wz
2ffd4     64 00 90 5D |  if_ne	jmp	#LR__4703
2ffd8                 | ' 		do {
2ffd8                 | LR__4701
2ffd8     18 26 06 F1 | 	add	local01, #24
2ffdc     13 15 02 FB | 	rdlong	arg02, local01
2ffe0     18 26 86 F1 | 	sub	local01, #24
2ffe4     14 13 02 F6 | 	mov	arg01, local02
2ffe8     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2ffec     FD 2E 0A F6 | 	mov	local05, result1 wz
2fff0     40 00 90 5D |  if_ne	jmp	#LR__4702
2fff4     1C 26 06 F1 | 	add	local01, #28
2fff8     13 2D 02 FB | 	rdlong	local04, local01
2fffc     16 CB 49 FC | 	wrbyte	#229, local04
30000     03 28 06 F1 | 	add	local02, #3
30004     14 03 48 FC | 	wrbyte	#1, local02
30008     03 28 86 F1 | 	sub	local02, #3
3000c     0C 26 86 F1 | 	sub	local01, #12
30010     13 2D 02 FB | 	rdlong	local04, local01
30014     10 26 86 F1 | 	sub	local01, #16
30018     15 2D 12 F2 | 	cmp	local04, local03 wc
3001c     14 00 90 3D |  if_ae	jmp	#LR__4702
30020     13 13 02 F6 | 	mov	arg01, local01
30024     00 14 06 F6 | 	mov	arg02, #0
30028     90 EF BF FD | 	call	#_fatfs_cc_dir_next
3002c     FD 2E 0A F6 | 	mov	local05, result1 wz
30030     A4 FF 9F AD |  if_e	jmp	#LR__4701
30034                 | LR__4702
30034     04 2E 0E F2 | 	cmp	local05, #4 wz
30038     02 2E 06 A6 |  if_e	mov	local05, #2
3003c                 | LR__4703
3003c                 | ' 	}
3003c                 | ' #line 2590 "ff.c"
3003c                 | ' 	return res;
3003c     17 FB 01 F6 | 	mov	result1, local05
30040     A7 F0 03 F6 | 	mov	ptra, fp
30044     B2 00 A0 FD | 	call	#popregs_
30048                 | _fatfs_cc_dir_remove_ret
30048     2D 00 64 FD | 	ret
3004c                 | 
3004c                 | _fatfs_cc_get_fileinfo
3004c     0F 4A 05 F6 | 	mov	COUNT_, #15
30050     A8 00 A0 FD | 	call	#pushregs_
30054     09 27 02 F6 | 	mov	local01, arg01
30058     0A 29 02 F6 | 	mov	local02, arg02
3005c     13 2B 02 FB | 	rdlong	local03, local01
30060     1C 28 06 F1 | 	add	local02, #28
30064     14 01 48 FC | 	wrbyte	#0, local02
30068     1C 28 86 F1 | 	sub	local02, #28
3006c     18 26 06 F1 | 	add	local01, #24
30070     13 2D 0A FB | 	rdlong	local04, local01 wz
30074     18 26 86 F1 | 	sub	local01, #24
30078     90 03 90 AD |  if_e	jmp	#LR__4724
3007c     2C 26 06 F1 | 	add	local01, #44
30080     13 2D 02 FB | 	rdlong	local04, local01
30084     2C 26 86 F1 | 	sub	local01, #44
30088     FF FF 7F FF 
3008c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
30090     D8 00 90 AD |  if_e	jmp	#LR__4713
30094     00 2E 06 F6 | 	mov	local05, #0
30098     00 30 06 F6 | 	mov	local06, #0
3009c     00 32 06 F6 | 	mov	local07, #0
300a0                 | ' 			si = di = 0;
300a0                 | ' 			hs = 0;
300a0                 | ' 			while (fs->lfnbuf[si] != 0) {
300a0                 | LR__4710
300a0     0C 2A 06 F1 | 	add	local03, #12
300a4     15 2D 02 FB | 	rdlong	local04, local03
300a8     0C 2A 86 F1 | 	sub	local03, #12
300ac     18 35 02 F6 | 	mov	local08, local06
300b0     01 34 66 F0 | 	shl	local08, #1
300b4     16 35 02 F1 | 	add	local08, local04
300b8     1A 2D EA FA | 	rdword	local04, local08 wz
300bc     90 00 90 AD |  if_e	jmp	#LR__4712
300c0     0C 2A 06 F1 | 	add	local03, #12
300c4     15 37 02 FB | 	rdlong	local09, local03
300c8     0C 2A 86 F1 | 	sub	local03, #12
300cc     18 39 02 F6 | 	mov	local10, local06
300d0     01 38 66 F0 | 	shl	local10, #1
300d4     1B 39 02 F1 | 	add	local10, local09
300d8     1C 3B E2 FA | 	rdword	local11, local10
300dc     19 2D 02 F6 | 	mov	local04, local07
300e0     0F 2C 4E F7 | 	zerox	local04, #15 wz
300e4     01 30 06 F1 | 	add	local06, #1
300e8     24 00 90 5D |  if_ne	jmp	#LR__4711
300ec     1D 3D 32 F9 | 	getword	local12, local11, #0
300f0     6C 00 00 FF 
300f4     00 3C 16 F2 | 	cmp	local12, ##55296 wc
300f8     14 00 90 CD |  if_b	jmp	#LR__4711
300fc     1D 3F 32 F9 | 	getword	local13, local11, #0
30100     70 00 00 FF 
30104     00 3E 16 F2 | 	cmp	local13, ##57344 wc
30108     1D 33 02 C6 |  if_b	mov	local07, local11
3010c                 | ' 					hs = wc; continue;
3010c     90 FF 9F CD |  if_b	jmp	#LR__4710
30110                 | LR__4711
30110     19 13 32 F9 | 	getword	arg01, local07, #0
30114     10 12 66 F0 | 	shl	arg01, #16
30118     1D 3B 32 F9 | 	getword	local11, local11, #0
3011c     1D 13 42 F5 | 	or	arg01, local11
30120     17 15 02 F6 | 	mov	arg02, local05
30124     1C 28 06 F1 | 	add	local02, #28
30128     14 15 02 F1 | 	add	arg02, local02
3012c     FF 16 06 F6 | 	mov	arg03, #255
30130     17 17 82 F1 | 	sub	arg03, local05
30134     1C 28 86 F1 | 	sub	local02, #28
30138     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
3013c     FD 40 0A F6 | 	mov	local14, result1 wz
30140     00 2E 06 A6 |  if_e	mov	local05, #0
30144     20 2F 02 51 |  if_ne	add	local05, local14
30148     00 32 06 56 |  if_ne	mov	local07, #0
3014c     50 FF 9F 5D |  if_ne	jmp	#LR__4710
30150                 | LR__4712
30150     19 2D 02 F6 | 	mov	local04, local07
30154     0F 2C 4E F7 | 	zerox	local04, #15 wz
30158     00 2E 06 56 |  if_ne	mov	local05, #0
3015c     1C 28 06 F1 | 	add	local02, #28
30160     14 2F 02 F1 | 	add	local05, local02
30164     17 01 48 FC | 	wrbyte	#0, local05
30168     1C 28 86 F1 | 	sub	local02, #28
3016c                 | LR__4713
3016c     00 2E 06 F6 | 	mov	local05, #0
30170     00 30 06 F6 | 	mov	local06, #0
30174                 | ' 			fno->fname[di] = 0;
30174                 | ' 		}
30174                 | ' 	}
30174                 | ' 
30174                 | ' 	si = di = 0;
30174                 | ' 	while (si < 11) {
30174                 | LR__4714
30174     0B 30 16 F2 | 	cmp	local06, #11 wc
30178     20 01 90 3D |  if_ae	jmp	#LR__4717
3017c     1C 26 06 F1 | 	add	local01, #28
30180     13 37 02 FB | 	rdlong	local09, local01
30184     1C 26 86 F1 | 	sub	local01, #28
30188     18 39 02 F6 | 	mov	local10, local06
3018c     1B 39 02 F1 | 	add	local10, local09
30190     1C 3B C2 FA | 	rdbyte	local11, local10
30194     1D 2D 32 F9 | 	getword	local04, local11, #0
30198     20 2C 0E F2 | 	cmp	local04, #32 wz
3019c     01 30 06 F1 | 	add	local06, #1
301a0     D0 FF 9F AD |  if_e	jmp	#LR__4714
301a4     1D 2D 32 F9 | 	getword	local04, local11, #0
301a8     05 2C 0E F2 | 	cmp	local04, #5 wz
301ac     E5 3A 06 A6 |  if_e	mov	local11, #229
301b0     09 30 0E F2 | 	cmp	local06, #9 wz
301b4     20 00 90 5D |  if_ne	jmp	#LR__4715
301b8     0C 2E 16 F2 | 	cmp	local05, #12 wc
301bc     18 00 90 3D |  if_ae	jmp	#LR__4715
301c0     17 3F 02 F6 | 	mov	local13, local05
301c4     0C 28 06 F1 | 	add	local02, #12
301c8     14 3F 02 F1 | 	add	local13, local02
301cc     1F 5D 48 FC | 	wrbyte	#46, local13
301d0     01 2E 06 F1 | 	add	local05, #1
301d4     0C 28 86 F1 | 	sub	local02, #12
301d8                 | LR__4715
301d8     1D 13 32 F9 | 	getword	arg01, local11, #0
301dc     07 12 4E F7 | 	zerox	arg01, #7 wz
301e0     00 FA 05 56 |  if_ne	mov	result1, #0
301e4                 | ' 
301e4                 | ' 	return 0;
301e4     00 FA 05 A6 |  if_e	mov	result1, #0
301e8     00 FA 0D F2 | 	cmp	result1, #0 wz
301ec     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
301f0     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
301f4     50 00 90 AD |  if_e	jmp	#LR__4716
301f8     1C 26 06 F1 | 	add	local01, #28
301fc     13 39 02 FB | 	rdlong	local10, local01
30200     1C 26 86 F1 | 	sub	local01, #28
30204     18 35 02 F6 | 	mov	local08, local06
30208     1C 35 02 F1 | 	add	local08, local10
3020c     1A 13 CA FA | 	rdbyte	arg01, local08 wz
30210     00 FA 05 56 |  if_ne	mov	result1, #0
30214                 | ' 
30214                 | ' 	return 0;
30214     00 FA 05 A6 |  if_e	mov	result1, #0
30218     00 FA 0D F2 | 	cmp	result1, #0 wz
3021c     28 00 90 AD |  if_e	jmp	#LR__4716
30220     1D 3B 32 F9 | 	getword	local11, local11, #0
30224     08 3A 66 F0 | 	shl	local11, #8
30228     1C 26 06 F1 | 	add	local01, #28
3022c     13 41 02 FB | 	rdlong	local14, local01
30230     1C 26 86 F1 | 	sub	local01, #28
30234     18 37 02 F6 | 	mov	local09, local06
30238     20 37 02 F1 | 	add	local09, local14
3023c     1B 3D C2 FA | 	rdbyte	local12, local09
30240     1E 3B 42 F5 | 	or	local11, local12
30244     01 30 06 F1 | 	add	local06, #1
30248                 | LR__4716
30248     1D 13 02 F6 | 	mov	arg01, local11
3024c     01 00 00 FF 
30250     52 15 06 F6 | 	mov	arg02, ##850
30254     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
30258     FD 3A 02 F6 | 	mov	local11, result1
3025c     1D 2D 02 F6 | 	mov	local04, local11
30260     0F 2C 4E F7 | 	zerox	local04, #15 wz
30264     00 2E 06 A6 |  if_e	mov	local05, #0
30268     30 00 90 AD |  if_e	jmp	#LR__4717
3026c     1D 13 32 F9 | 	getword	arg01, local11, #0
30270     17 15 02 F6 | 	mov	arg02, local05
30274     0C 28 06 F1 | 	add	local02, #12
30278     14 15 02 F1 | 	add	arg02, local02
3027c     0C 16 06 F6 | 	mov	arg03, #12
30280     17 17 82 F1 | 	sub	arg03, local05
30284     0C 28 86 F1 | 	sub	local02, #12
30288     EC DF BF FD | 	call	#_fatfs_cc_put_utf
3028c     FD 40 0A F6 | 	mov	local14, result1 wz
30290     00 2E 06 A6 |  if_e	mov	local05, #0
30294     20 2F 02 51 |  if_ne	add	local05, local14
30298     D8 FE 9F 5D |  if_ne	jmp	#LR__4714
3029c                 | LR__4717
3029c     17 2D 02 F6 | 	mov	local04, local05
302a0     0C 28 06 F1 | 	add	local02, #12
302a4     14 2D 02 F1 | 	add	local04, local02
302a8     16 01 48 FC | 	wrbyte	#0, local04
302ac     10 28 06 F1 | 	add	local02, #16
302b0     14 2D CA FA | 	rdbyte	local04, local02 wz
302b4     1C 28 86 F1 | 	sub	local02, #28
302b8     F8 00 90 5D |  if_ne	jmp	#LR__4723
302bc     00 2E 0E F2 | 	cmp	local05, #0 wz
302c0     1C 00 90 5D |  if_ne	jmp	#LR__4718
302c4     17 3F 02 F6 | 	mov	local13, local05
302c8     1C 28 06 F1 | 	add	local02, #28
302cc     14 3F 02 F1 | 	add	local13, local02
302d0     1F 7F 48 FC | 	wrbyte	#63, local13
302d4     01 2E 06 F1 | 	add	local05, #1
302d8     1C 28 86 F1 | 	sub	local02, #28
302dc     A4 00 90 FD | 	jmp	#LR__4722
302e0                 | LR__4718
302e0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
302e0     00 2E 06 F6 | 	mov	local05, #0
302e4     00 30 06 F6 | 	mov	local06, #0
302e8     08 42 06 F6 | 	mov	local15, #8
302ec                 | LR__4719
302ec     18 2D 02 F6 | 	mov	local04, local06
302f0     0C 28 06 F1 | 	add	local02, #12
302f4     14 2D 02 F1 | 	add	local04, local02
302f8     16 3F CA FA | 	rdbyte	local13, local04 wz
302fc     0C 28 86 F1 | 	sub	local02, #12
30300     80 00 90 AD |  if_e	jmp	#LR__4721
30304     18 35 02 F6 | 	mov	local08, local06
30308     0C 28 06 F1 | 	add	local02, #12
3030c     14 35 02 F1 | 	add	local08, local02
30310     1A 3B C2 FA | 	rdbyte	local11, local08
30314     1D 41 32 F9 | 	getword	local14, local11, #0
30318     2E 40 0E F2 | 	cmp	local14, #46 wz
3031c     0C 28 86 F1 | 	sub	local02, #12
30320     10 42 06 A6 |  if_e	mov	local15, #16
30324     1D 41 32 F9 | 	getword	local14, local11, #0
30328     41 40 16 F2 | 	cmp	local14, #65 wc
3032c     30 00 90 CD |  if_b	jmp	#LR__4720
30330     1D 35 32 F9 | 	getword	local08, local11, #0
30334     5B 34 16 F2 | 	cmp	local08, #91 wc
30338     24 00 90 3D |  if_ae	jmp	#LR__4720
3033c     1C 26 06 F1 | 	add	local01, #28
30340     13 37 02 FB | 	rdlong	local09, local01
30344     1C 26 86 F1 | 	sub	local01, #28
30348     0C 36 06 F1 | 	add	local09, #12
3034c     1B 39 C2 FA | 	rdbyte	local10, local09
30350     21 41 E2 F8 | 	getbyte	local14, local15, #0
30354     20 39 CA F7 | 	test	local10, local14 wz
30358     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
3035c     20 3A 06 51 |  if_ne	add	local11, #32
30360                 | LR__4720
30360     17 41 02 F6 | 	mov	local14, local05
30364     1C 28 06 F1 | 	add	local02, #28
30368     14 41 02 F1 | 	add	local14, local02
3036c     1D 3B 32 F9 | 	getword	local11, local11, #0
30370     20 3B 42 FC | 	wrbyte	local11, local14
30374     01 30 06 F1 | 	add	local06, #1
30378     01 2E 06 F1 | 	add	local05, #1
3037c     1C 28 86 F1 | 	sub	local02, #28
30380     68 FF 9F FD | 	jmp	#LR__4719
30384                 | LR__4721
30384                 | LR__4722
30384     1C 28 06 F1 | 	add	local02, #28
30388     14 2F 02 F1 | 	add	local05, local02
3038c     17 01 48 FC | 	wrbyte	#0, local05
30390     1C 26 06 F1 | 	add	local01, #28
30394     13 2D 02 FB | 	rdlong	local04, local01
30398     1C 26 86 F1 | 	sub	local01, #28
3039c     0C 2C 06 F1 | 	add	local04, #12
303a0     16 3F CA FA | 	rdbyte	local13, local04 wz
303a4     1C 28 86 F1 | 	sub	local02, #28
303a8     0C 28 06 A1 |  if_e	add	local02, #12
303ac     14 01 48 AC |  if_e	wrbyte	#0, local02
303b0     0C 28 86 A1 |  if_e	sub	local02, #12
303b4                 | LR__4723
303b4     1C 26 06 F1 | 	add	local01, #28
303b8     13 3D 02 FB | 	rdlong	local12, local01
303bc     0B 3C 06 F1 | 	add	local12, #11
303c0     1E 2D C2 FA | 	rdbyte	local04, local12
303c4     3F 2C 06 F5 | 	and	local04, #63
303c8     08 28 06 F1 | 	add	local02, #8
303cc     14 2D 42 FC | 	wrbyte	local04, local02
303d0     08 28 86 F1 | 	sub	local02, #8
303d4     13 13 02 FB | 	rdlong	arg01, local01
303d8     1C 12 06 F1 | 	add	arg01, #28
303dc                 | ' {
303dc                 | ' 
303dc                 | ' 	return *((DWORD*)ptr);
303dc     09 FB 01 FB | 	rdlong	result1, arg01
303e0     14 FB 61 FC | 	wrlong	result1, local02
303e4     13 13 02 FB | 	rdlong	arg01, local01
303e8     16 12 06 F1 | 	add	arg01, #22
303ec                 | ' {
303ec                 | ' 
303ec                 | ' 	return *((WORD*)ptr);
303ec     09 FB E1 FA | 	rdword	result1, arg01
303f0     06 28 06 F1 | 	add	local02, #6
303f4     14 FB 51 FC | 	wrword	result1, local02
303f8     13 13 02 FB | 	rdlong	arg01, local01
303fc     18 12 06 F1 | 	add	arg01, #24
30400                 | ' {
30400                 | ' 
30400                 | ' 	return *((WORD*)ptr);
30400     09 FB E1 FA | 	rdword	result1, arg01
30404     02 28 86 F1 | 	sub	local02, #2
30408     14 FB 51 FC | 	wrword	result1, local02
3040c                 | LR__4724
3040c     A7 F0 03 F6 | 	mov	ptra, fp
30410     B2 00 A0 FD | 	call	#popregs_
30414                 | _fatfs_cc_get_fileinfo_ret
30414     2D 00 64 FD | 	ret
30418                 | 
30418                 | _fatfs_cc_create_name
30418     0D 4A 05 F6 | 	mov	COUNT_, #13
3041c     A8 00 A0 FD | 	call	#pushregs_
30420     34 F0 07 F1 | 	add	ptra, #52
30424     04 4E 05 F1 | 	add	fp, #4
30428     A7 12 62 FC | 	wrlong	arg01, fp
3042c     04 4E 05 F1 | 	add	fp, #4
30430     A7 14 62 FC | 	wrlong	arg02, fp
30434     0A FB 01 FB | 	rdlong	result1, arg02
30438     28 4E 05 F1 | 	add	fp, #40
3043c     A7 FA 61 FC | 	wrlong	result1, fp
30440     2C 4E 85 F1 | 	sub	fp, #44
30444     A7 FA 01 FB | 	rdlong	result1, fp
30448     FD 26 02 FB | 	rdlong	local01, result1
3044c     0C 26 06 F1 | 	add	local01, #12
30450     13 29 02 FB | 	rdlong	local02, local01
30454     14 4E 05 F1 | 	add	fp, #20
30458     A7 28 62 FC | 	wrlong	local02, fp
3045c     14 4E 05 F1 | 	add	fp, #20
30460     A7 00 68 FC | 	wrlong	#0, fp
30464     2C 4E 85 F1 | 	sub	fp, #44
30468                 | ' 
30468                 | ' 
30468                 | ' 
30468                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
30468                 | ' 	for (;;) {
30468                 | LR__4730
30468     30 4E 05 F1 | 	add	fp, #48
3046c     A7 12 02 F6 | 	mov	arg01, fp
30470     30 4E 85 F1 | 	sub	fp, #48
30474     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
30478     1C 4E 05 F1 | 	add	fp, #28
3047c     A7 FA 61 FC | 	wrlong	result1, fp
30480     1C 4E 85 F1 | 	sub	fp, #28
30484     FF FF 7F FF 
30488     FF FB 0D F2 | 	cmp	result1, ##-1 wz
3048c     06 FA 05 A6 |  if_e	mov	result1, #6
30490     74 08 90 AD |  if_e	jmp	#LR__4770
30494     1C 4E 05 F1 | 	add	fp, #28
30498     A7 26 02 FB | 	rdlong	local01, fp
3049c     1C 4E 85 F1 | 	sub	fp, #28
304a0     80 00 00 FF 
304a4     00 26 16 F2 | 	cmp	local01, ##65536 wc
304a8     3C 00 90 CD |  if_b	jmp	#LR__4731
304ac     18 4E 05 F1 | 	add	fp, #24
304b0     A7 2A 02 FB | 	rdlong	local03, fp
304b4     14 4E 05 F1 | 	add	fp, #20
304b8     A7 26 02 FB | 	rdlong	local01, fp
304bc     13 2D 02 F6 | 	mov	local04, local01
304c0     01 2C 06 F1 | 	add	local04, #1
304c4     A7 2C 62 FC | 	wrlong	local04, fp
304c8     01 26 66 F0 | 	shl	local01, #1
304cc     15 27 02 F1 | 	add	local01, local03
304d0     10 4E 85 F1 | 	sub	fp, #16
304d4     A7 2E 02 FB | 	rdlong	local05, fp
304d8     1C 4E 85 F1 | 	sub	fp, #28
304dc     17 31 02 F6 | 	mov	local06, local05
304e0     10 30 46 F0 | 	shr	local06, #16
304e4     13 31 52 FC | 	wrword	local06, local01
304e8                 | LR__4731
304e8     1C 4E 05 F1 | 	add	fp, #28
304ec     A7 26 02 FB | 	rdlong	local01, fp
304f0     08 4E 85 F1 | 	sub	fp, #8
304f4     A7 26 52 FC | 	wrword	local01, fp
304f8     A7 26 E2 FA | 	rdword	local01, fp
304fc     14 4E 85 F1 | 	sub	fp, #20
30500     20 26 16 F2 | 	cmp	local01, #32 wc
30504     B0 00 90 CD |  if_b	jmp	#LR__4733
30508     14 4E 05 F1 | 	add	fp, #20
3050c     A7 26 E2 FA | 	rdword	local01, fp
30510     14 4E 85 F1 | 	sub	fp, #20
30514     2F 26 0E F2 | 	cmp	local01, #47 wz
30518     14 4E 05 51 |  if_ne	add	fp, #20
3051c     A7 2C E2 5A |  if_ne	rdword	local04, fp
30520     14 4E 85 51 |  if_ne	sub	fp, #20
30524     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
30528     8C 00 90 AD |  if_e	jmp	#LR__4733
3052c     14 4E 05 F1 | 	add	fp, #20
30530     A7 12 E2 FA | 	rdword	arg01, fp
30534     14 4E 85 F1 | 	sub	fp, #20
30538     80 12 16 F2 | 	cmp	arg01, #128 wc
3053c     24 00 90 3D |  if_ae	jmp	#LR__4732
30540     B2 01 00 FF 
30544     7C 12 06 F6 | 	mov	arg01, ##@LR__5392
30548     14 4E 05 F1 | 	add	fp, #20
3054c     A7 14 E2 FA | 	rdword	arg02, fp
30550     14 4E 85 F1 | 	sub	fp, #20
30554     FC D0 BF FD | 	call	#_fatfs_cc_strchr
30558     00 FA 0D F2 | 	cmp	result1, #0 wz
3055c     06 FA 05 56 |  if_ne	mov	result1, #6
30560     A4 07 90 5D |  if_ne	jmp	#LR__4770
30564                 | LR__4732
30564     2C 4E 05 F1 | 	add	fp, #44
30568     A7 30 02 FB | 	rdlong	local06, fp
3056c     2C 4E 85 F1 | 	sub	fp, #44
30570     FF 30 16 F2 | 	cmp	local06, #255 wc
30574     06 FA 05 36 |  if_ae	mov	result1, #6
30578     8C 07 90 3D |  if_ae	jmp	#LR__4770
3057c     18 4E 05 F1 | 	add	fp, #24
30580     A7 2A 02 FB | 	rdlong	local03, fp
30584     14 4E 05 F1 | 	add	fp, #20
30588     A7 28 02 FB | 	rdlong	local02, fp
3058c     14 2D 02 F6 | 	mov	local04, local02
30590     01 2C 06 F1 | 	add	local04, #1
30594     A7 2C 62 FC | 	wrlong	local04, fp
30598     14 27 02 F6 | 	mov	local01, local02
3059c     01 26 66 F0 | 	shl	local01, #1
305a0     15 27 02 F1 | 	add	local01, local03
305a4     18 4E 85 F1 | 	sub	fp, #24
305a8     A7 30 E2 FA | 	rdword	local06, fp
305ac     14 4E 85 F1 | 	sub	fp, #20
305b0     13 31 52 FC | 	wrword	local06, local01
305b4     B0 FE 9F FD | 	jmp	#LR__4730
305b8                 | LR__4733
305b8     14 4E 05 F1 | 	add	fp, #20
305bc     A7 32 E2 FA | 	rdword	local07, fp
305c0     14 4E 85 F1 | 	sub	fp, #20
305c4     20 32 16 F2 | 	cmp	local07, #32 wc
305c8     10 4E 05 C1 |  if_b	add	fp, #16
305cc     A7 08 48 CC |  if_b	wrbyte	#4, fp
305d0     10 4E 85 C1 |  if_b	sub	fp, #16
305d4     74 00 90 CD |  if_b	jmp	#LR__4738
305d8     97 24 48 FB | 	callpa	#(@LR__4736-@LR__4734)>>2,fcache_load_ptr_
305dc                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
305dc                 | LR__4734
305dc     30 4E 05 F1 | 	add	fp, #48
305e0     A7 2C 02 FB | 	rdlong	local04, fp
305e4     30 4E 85 F1 | 	sub	fp, #48
305e8     16 33 C2 FA | 	rdbyte	local07, local04
305ec     2F 32 0E F2 | 	cmp	local07, #47 wz
305f0     18 00 90 AD |  if_e	jmp	#LR__4735
305f4     30 4E 05 F1 | 	add	fp, #48
305f8     A7 2C 02 FB | 	rdlong	local04, fp
305fc     30 4E 85 F1 | 	sub	fp, #48
30600     16 29 C2 FA | 	rdbyte	local02, local04
30604     5C 28 0E F2 | 	cmp	local02, #92 wz
30608     18 00 90 5D |  if_ne	jmp	#LR__4737
3060c                 | LR__4735
3060c     30 4E 05 F1 | 	add	fp, #48
30610     A7 26 02 FB | 	rdlong	local01, fp
30614     01 26 06 F1 | 	add	local01, #1
30618     A7 26 62 FC | 	wrlong	local01, fp
3061c     30 4E 85 F1 | 	sub	fp, #48
30620     B8 FF 9F FD | 	jmp	#LR__4734
30624                 | LR__4736
30624                 | LR__4737
30624     10 4E 05 F1 | 	add	fp, #16
30628     A7 00 48 FC | 	wrbyte	#0, fp
3062c     20 4E 05 F1 | 	add	fp, #32
30630     A7 30 02 FB | 	rdlong	local06, fp
30634     30 4E 85 F1 | 	sub	fp, #48
30638     18 33 C2 FA | 	rdbyte	local07, local06
3063c     20 32 16 F2 | 	cmp	local07, #32 wc
30640     10 4E 05 C1 |  if_b	add	fp, #16
30644     A7 08 48 CC |  if_b	wrbyte	#4, fp
30648     10 4E 85 C1 |  if_b	sub	fp, #16
3064c                 | LR__4738
3064c     08 4E 05 F1 | 	add	fp, #8
30650     A7 32 02 FB | 	rdlong	local07, fp
30654     28 4E 05 F1 | 	add	fp, #40
30658     A7 26 02 FB | 	rdlong	local01, fp
3065c     30 4E 85 F1 | 	sub	fp, #48
30660     19 27 62 FC | 	wrlong	local01, local07
30664     97 38 48 FB | 	callpa	#(@LR__4740-@LR__4739)>>2,fcache_load_ptr_
30668                 | ' 	}
30668                 | ' 	*path = p;
30668                 | ' #line 2862 "ff.c"
30668                 | ' 	while (di) {
30668                 | LR__4739
30668     2C 4E 05 F1 | 	add	fp, #44
3066c     A7 32 0A FB | 	rdlong	local07, fp wz
30670     2C 4E 85 F1 | 	sub	fp, #44
30674     60 00 90 AD |  if_e	jmp	#LR__4741
30678     18 4E 05 F1 | 	add	fp, #24
3067c     A7 30 02 FB | 	rdlong	local06, fp
30680     14 4E 05 F1 | 	add	fp, #20
30684     A7 2C 02 FB | 	rdlong	local04, fp
30688     01 2C 86 F1 | 	sub	local04, #1
3068c     01 2C 66 F0 | 	shl	local04, #1
30690     18 2D 02 F1 | 	add	local04, local06
30694     16 31 E2 FA | 	rdword	local06, local04
30698     18 4E 85 F1 | 	sub	fp, #24
3069c     A7 30 52 FC | 	wrword	local06, fp
306a0     A7 32 E2 FA | 	rdword	local07, fp
306a4     14 4E 85 F1 | 	sub	fp, #20
306a8     20 32 0E F2 | 	cmp	local07, #32 wz
306ac     14 4E 05 51 |  if_ne	add	fp, #20
306b0     A7 26 E2 5A |  if_ne	rdword	local01, fp
306b4     14 4E 85 51 |  if_ne	sub	fp, #20
306b8     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
306bc     18 00 90 5D |  if_ne	jmp	#LR__4741
306c0     2C 4E 05 F1 | 	add	fp, #44
306c4     A7 26 02 FB | 	rdlong	local01, fp
306c8     01 26 86 F1 | 	sub	local01, #1
306cc     A7 26 62 FC | 	wrlong	local01, fp
306d0     2C 4E 85 F1 | 	sub	fp, #44
306d4     90 FF 9F FD | 	jmp	#LR__4739
306d8                 | LR__4740
306d8                 | LR__4741
306d8     18 4E 05 F1 | 	add	fp, #24
306dc     A7 34 02 FB | 	rdlong	local08, fp
306e0     14 4E 05 F1 | 	add	fp, #20
306e4     A7 2C 02 FB | 	rdlong	local04, fp
306e8     01 2C 66 F0 | 	shl	local04, #1
306ec     1A 2D 02 F1 | 	add	local04, local08
306f0     16 01 58 FC | 	wrword	#0, local04
306f4     A7 32 0A FB | 	rdlong	local07, fp wz
306f8     2C 4E 85 F1 | 	sub	fp, #44
306fc     06 FA 05 A6 |  if_e	mov	result1, #6
30700     04 06 90 AD |  if_e	jmp	#LR__4770
30704                 | ' 
30704                 | ' 
30704                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
30704     28 4E 05 F1 | 	add	fp, #40
30708     A7 00 68 FC | 	wrlong	#0, fp
3070c     28 4E 85 F1 | 	sub	fp, #40
30710     97 22 48 FB | 	callpa	#(@LR__4743-@LR__4742)>>2,fcache_load_ptr_
30714                 | LR__4742
30714     18 4E 05 F1 | 	add	fp, #24
30718     A7 36 02 FB | 	rdlong	local09, fp
3071c     10 4E 05 F1 | 	add	fp, #16
30720     A7 38 02 FB | 	rdlong	local10, fp
30724     28 4E 85 F1 | 	sub	fp, #40
30728     01 38 66 F0 | 	shl	local10, #1
3072c     1B 39 02 F1 | 	add	local10, local09
30730     1C 3B E2 FA | 	rdword	local11, local10
30734     20 3A 0E F2 | 	cmp	local11, #32 wz
30738     1C 00 90 5D |  if_ne	jmp	#LR__4744
3073c     28 4E 05 F1 | 	add	fp, #40
30740     A7 3C 02 FB | 	rdlong	local12, fp
30744     1E 2F 02 F6 | 	mov	local05, local12
30748     01 2E 06 F1 | 	add	local05, #1
3074c     A7 2E 62 FC | 	wrlong	local05, fp
30750     28 4E 85 F1 | 	sub	fp, #40
30754     BC FF 9F FD | 	jmp	#LR__4742
30758                 | LR__4743
30758                 | LR__4744
30758     28 4E 05 F1 | 	add	fp, #40
3075c     A7 32 02 FB | 	rdlong	local07, fp
30760     28 4E 85 F1 | 	sub	fp, #40
30764     01 32 16 F2 | 	cmp	local07, #1 wc
30768     28 00 90 3D |  if_ae	jmp	#LR__4745
3076c     18 4E 05 F1 | 	add	fp, #24
30770     A7 2A 02 FB | 	rdlong	local03, fp
30774     10 4E 05 F1 | 	add	fp, #16
30778     A7 36 02 FB | 	rdlong	local09, fp
3077c     28 4E 85 F1 | 	sub	fp, #40
30780     01 36 66 F0 | 	shl	local09, #1
30784     15 37 02 F1 | 	add	local09, local03
30788     1B 27 E2 FA | 	rdword	local01, local09
3078c     2E 26 0E F2 | 	cmp	local01, #46 wz
30790     14 00 90 5D |  if_ne	jmp	#LR__4746
30794                 | LR__4745
30794     10 4E 05 F1 | 	add	fp, #16
30798     A7 32 C2 FA | 	rdbyte	local07, fp
3079c     03 32 46 F5 | 	or	local07, #3
307a0     A7 32 42 FC | 	wrbyte	local07, fp
307a4     10 4E 85 F1 | 	sub	fp, #16
307a8                 | LR__4746
307a8     97 2C 48 FB | 	callpa	#(@LR__4748-@LR__4747)>>2,fcache_load_ptr_
307ac                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
307ac                 | LR__4747
307ac     2C 4E 05 F1 | 	add	fp, #44
307b0     A7 32 02 FB | 	rdlong	local07, fp
307b4     2C 4E 85 F1 | 	sub	fp, #44
307b8     01 32 16 F2 | 	cmp	local07, #1 wc
307bc     44 00 90 CD |  if_b	jmp	#LR__4749
307c0     18 4E 05 F1 | 	add	fp, #24
307c4     A7 30 02 FB | 	rdlong	local06, fp
307c8     14 4E 05 F1 | 	add	fp, #20
307cc     A7 2A 02 FB | 	rdlong	local03, fp
307d0     2C 4E 85 F1 | 	sub	fp, #44
307d4     01 2A 86 F1 | 	sub	local03, #1
307d8     01 2A 66 F0 | 	shl	local03, #1
307dc     18 2B 02 F1 | 	add	local03, local06
307e0     15 27 E2 FA | 	rdword	local01, local03
307e4     2E 26 0E F2 | 	cmp	local01, #46 wz
307e8     18 00 90 AD |  if_e	jmp	#LR__4749
307ec     2C 4E 05 F1 | 	add	fp, #44
307f0     A7 26 02 FB | 	rdlong	local01, fp
307f4     01 26 86 F1 | 	sub	local01, #1
307f8     A7 26 62 FC | 	wrlong	local01, fp
307fc     2C 4E 85 F1 | 	sub	fp, #44
30800     A8 FF 9F FD | 	jmp	#LR__4747
30804                 | LR__4748
30804                 | LR__4749
30804     04 4E 05 F1 | 	add	fp, #4
30808     A7 12 02 FB | 	rdlong	arg01, fp
3080c     04 4E 85 F1 | 	sub	fp, #4
30810     20 12 06 F1 | 	add	arg01, #32
30814     20 14 06 F6 | 	mov	arg02, #32
30818     0B 16 06 F6 | 	mov	arg03, #11
3081c     09 3F 02 F6 | 	mov	local13, arg01
30820     98 00 A0 FD | 	call	#\builtin_bytefill_
30824     1F FB 01 F6 | 	mov	result1, local13
30828     0C 4E 05 F1 | 	add	fp, #12
3082c     A7 00 48 FC | 	wrbyte	#0, fp
30830     A7 32 C2 FA | 	rdbyte	local07, fp
30834     14 4E 05 F1 | 	add	fp, #20
30838     A7 32 62 FC | 	wrlong	local07, fp
3083c     04 4E 05 F1 | 	add	fp, #4
30840     A7 10 68 FC | 	wrlong	#8, fp
30844     24 4E 85 F1 | 	sub	fp, #36
30848                 | ' 
30848                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
30848                 | ' 	i = b = 0; ni = 8;
30848                 | ' 	for (;;) {
30848                 | LR__4750
30848     18 4E 05 F1 | 	add	fp, #24
3084c     A7 2A 02 FB | 	rdlong	local03, fp
30850     10 4E 05 F1 | 	add	fp, #16
30854     A7 36 02 FB | 	rdlong	local09, fp
30858     1B 2D 02 F6 | 	mov	local04, local09
3085c     01 2C 06 F1 | 	add	local04, #1
30860     A7 2C 62 FC | 	wrlong	local04, fp
30864     01 36 66 F0 | 	shl	local09, #1
30868     15 37 02 F1 | 	add	local09, local03
3086c     1B 31 E2 FA | 	rdword	local06, local09
30870     14 4E 85 F1 | 	sub	fp, #20
30874     A7 30 52 FC | 	wrword	local06, fp
30878     A7 32 EA FA | 	rdword	local07, fp wz
3087c     14 4E 85 F1 | 	sub	fp, #20
30880     74 03 90 AD |  if_e	jmp	#LR__4766
30884     14 4E 05 F1 | 	add	fp, #20
30888     A7 32 E2 FA | 	rdword	local07, fp
3088c     14 4E 85 F1 | 	sub	fp, #20
30890     20 32 0E F2 | 	cmp	local07, #32 wz
30894     30 00 90 AD |  if_e	jmp	#LR__4751
30898     14 4E 05 F1 | 	add	fp, #20
3089c     A7 26 E2 FA | 	rdword	local01, fp
308a0     14 4E 85 F1 | 	sub	fp, #20
308a4     2E 26 0E F2 | 	cmp	local01, #46 wz
308a8     34 00 90 5D |  if_ne	jmp	#LR__4752
308ac     28 4E 05 F1 | 	add	fp, #40
308b0     A7 2C 02 FB | 	rdlong	local04, fp
308b4     04 4E 05 F1 | 	add	fp, #4
308b8     A7 38 02 FB | 	rdlong	local10, fp
308bc     2C 4E 85 F1 | 	sub	fp, #44
308c0     1C 2D 0A F2 | 	cmp	local04, local10 wz
308c4     18 00 90 AD |  if_e	jmp	#LR__4752
308c8                 | LR__4751
308c8     10 4E 05 F1 | 	add	fp, #16
308cc     A7 32 C2 FA | 	rdbyte	local07, fp
308d0     03 32 46 F5 | 	or	local07, #3
308d4     A7 32 42 FC | 	wrbyte	local07, fp
308d8     10 4E 85 F1 | 	sub	fp, #16
308dc                 | ' 			cf |=  0x01  |  0x02 ;
308dc                 | ' 			continue;
308dc     68 FF 9F FD | 	jmp	#LR__4750
308e0                 | LR__4752
308e0     20 4E 05 F1 | 	add	fp, #32
308e4     A7 32 02 FB | 	rdlong	local07, fp
308e8     04 4E 05 F1 | 	add	fp, #4
308ec     A7 26 02 FB | 	rdlong	local01, fp
308f0     24 4E 85 F1 | 	sub	fp, #36
308f4     13 33 12 F2 | 	cmp	local07, local01 wc
308f8     1C 00 90 3D |  if_ae	jmp	#LR__4753
308fc     28 4E 05 F1 | 	add	fp, #40
30900     A7 34 02 FB | 	rdlong	local08, fp
30904     04 4E 05 F1 | 	add	fp, #4
30908     A7 38 02 FB | 	rdlong	local10, fp
3090c     2C 4E 85 F1 | 	sub	fp, #44
30910     1C 35 0A F2 | 	cmp	local08, local10 wz
30914     B0 00 90 5D |  if_ne	jmp	#LR__4755
30918                 | LR__4753
30918     24 4E 05 F1 | 	add	fp, #36
3091c     A7 32 02 FB | 	rdlong	local07, fp
30920     24 4E 85 F1 | 	sub	fp, #36
30924     0B 32 0E F2 | 	cmp	local07, #11 wz
30928     18 00 90 5D |  if_ne	jmp	#LR__4754
3092c     10 4E 05 F1 | 	add	fp, #16
30930     A7 32 C2 FA | 	rdbyte	local07, fp
30934     03 32 46 F5 | 	or	local07, #3
30938     A7 32 42 FC | 	wrbyte	local07, fp
3093c     10 4E 85 F1 | 	sub	fp, #16
30940                 | ' 				cf |=  0x01  |  0x02 ;
30940                 | ' 				break;
30940     B4 02 90 FD | 	jmp	#LR__4766
30944                 | LR__4754
30944     28 4E 05 F1 | 	add	fp, #40
30948     A7 32 02 FB | 	rdlong	local07, fp
3094c     04 4E 05 F1 | 	add	fp, #4
30950     A7 26 02 FB | 	rdlong	local01, fp
30954     2C 4E 85 F1 | 	sub	fp, #44
30958     13 33 0A F2 | 	cmp	local07, local01 wz
3095c     10 4E 05 51 |  if_ne	add	fp, #16
30960     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30964     03 32 46 55 |  if_ne	or	local07, #3
30968     A7 32 42 5C |  if_ne	wrbyte	local07, fp
3096c     10 4E 85 51 |  if_ne	sub	fp, #16
30970     28 4E 05 F1 | 	add	fp, #40
30974     A7 32 02 FB | 	rdlong	local07, fp
30978     04 4E 05 F1 | 	add	fp, #4
3097c     A7 28 02 FB | 	rdlong	local02, fp
30980     2C 4E 85 F1 | 	sub	fp, #44
30984     14 33 1A F2 | 	cmp	local07, local02 wcz
30988     6C 02 90 1D |  if_a	jmp	#LR__4766
3098c     2C 4E 05 F1 | 	add	fp, #44
30990     A7 32 02 FB | 	rdlong	local07, fp
30994     04 4E 85 F1 | 	sub	fp, #4
30998     A7 32 62 FC | 	wrlong	local07, fp
3099c     08 4E 85 F1 | 	sub	fp, #8
309a0     A7 10 68 FC | 	wrlong	#8, fp
309a4     04 4E 05 F1 | 	add	fp, #4
309a8     A7 16 68 FC | 	wrlong	#11, fp
309ac     18 4E 85 F1 | 	sub	fp, #24
309b0     A7 3A C2 FA | 	rdbyte	local11, fp
309b4     1D 33 E2 F8 | 	getbyte	local07, local11, #0
309b8     02 32 66 F0 | 	shl	local07, #2
309bc     A7 32 42 FC | 	wrbyte	local07, fp
309c0     0C 4E 85 F1 | 	sub	fp, #12
309c4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
309c4                 | ' 			continue;
309c4     80 FE 9F FD | 	jmp	#LR__4750
309c8                 | LR__4755
309c8     14 4E 05 F1 | 	add	fp, #20
309cc     A7 32 E2 FA | 	rdword	local07, fp
309d0     14 4E 85 F1 | 	sub	fp, #20
309d4     80 32 16 F2 | 	cmp	local07, #128 wc
309d8     6C 00 90 CD |  if_b	jmp	#LR__4757
309dc     10 4E 05 F1 | 	add	fp, #16
309e0     A7 32 C2 FA | 	rdbyte	local07, fp
309e4     02 32 46 F5 | 	or	local07, #2
309e8     A7 32 42 FC | 	wrbyte	local07, fp
309ec     04 4E 05 F1 | 	add	fp, #4
309f0     A7 12 E2 FA | 	rdword	arg01, fp
309f4     14 4E 85 F1 | 	sub	fp, #20
309f8     01 00 00 FF 
309fc     52 15 06 F6 | 	mov	arg02, ##850
30a00     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
30a04     14 4E 05 F1 | 	add	fp, #20
30a08     A7 FA 51 FC | 	wrword	result1, fp
30a0c     A7 32 E2 FA | 	rdword	local07, fp
30a10     14 4E 85 F1 | 	sub	fp, #20
30a14     80 32 CE F7 | 	test	local07, #128 wz
30a18     2C 00 90 AD |  if_e	jmp	#LR__4756
30a1c     14 4E 05 F1 | 	add	fp, #20
30a20     A7 28 E2 FA | 	rdword	local02, fp
30a24     7F 28 06 F5 | 	and	local02, #127
30a28     01 00 00 FF 
30a2c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
30a30     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
30a34     14 33 C2 FA | 	rdbyte	local07, local02
30a38     A7 32 52 FC | 	wrword	local07, fp
30a3c     14 4E 85 F1 | 	sub	fp, #20
30a40     01 00 00 FF 
30a44     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
30a48                 | LR__4756
30a48                 | LR__4757
30a48     14 4E 05 F1 | 	add	fp, #20
30a4c     A7 32 E2 FA | 	rdword	local07, fp
30a50     14 4E 85 F1 | 	sub	fp, #20
30a54     00 33 16 F2 | 	cmp	local07, #256 wc
30a58     88 00 90 CD |  if_b	jmp	#LR__4759
30a5c     24 4E 05 F1 | 	add	fp, #36
30a60     A7 32 02 FB | 	rdlong	local07, fp
30a64     01 32 86 F1 | 	sub	local07, #1
30a68     04 4E 85 F1 | 	sub	fp, #4
30a6c     A7 28 02 FB | 	rdlong	local02, fp
30a70     20 4E 85 F1 | 	sub	fp, #32
30a74     19 29 12 F2 | 	cmp	local02, local07 wc
30a78     2C 00 90 CD |  if_b	jmp	#LR__4758
30a7c     10 4E 05 F1 | 	add	fp, #16
30a80     A7 3A C2 FA | 	rdbyte	local11, fp
30a84     1D 33 E2 F8 | 	getbyte	local07, local11, #0
30a88     03 32 46 F5 | 	or	local07, #3
30a8c     A7 32 42 FC | 	wrbyte	local07, fp
30a90     14 4E 05 F1 | 	add	fp, #20
30a94     A7 32 02 FB | 	rdlong	local07, fp
30a98     04 4E 85 F1 | 	sub	fp, #4
30a9c     A7 32 62 FC | 	wrlong	local07, fp
30aa0     20 4E 85 F1 | 	sub	fp, #32
30aa4                 | ' 				cf |=  0x01  |  0x02 ;
30aa4                 | ' 				i = ni; continue;
30aa4     A0 FD 9F FD | 	jmp	#LR__4750
30aa8                 | LR__4758
30aa8     04 4E 05 F1 | 	add	fp, #4
30aac     A7 36 02 FB | 	rdlong	local09, fp
30ab0     1C 4E 05 F1 | 	add	fp, #28
30ab4     A7 38 02 FB | 	rdlong	local10, fp
30ab8     1C 2D 02 F6 | 	mov	local04, local10
30abc     01 2C 06 F1 | 	add	local04, #1
30ac0     A7 2C 62 FC | 	wrlong	local04, fp
30ac4     20 36 06 F1 | 	add	local09, #32
30ac8     1B 39 02 F1 | 	add	local10, local09
30acc     0C 4E 85 F1 | 	sub	fp, #12
30ad0     A7 2A E2 FA | 	rdword	local03, fp
30ad4     14 4E 85 F1 | 	sub	fp, #20
30ad8     08 2A 46 F0 | 	shr	local03, #8
30adc     1C 2B 42 FC | 	wrbyte	local03, local10
30ae0     D4 00 90 FD | 	jmp	#LR__4765
30ae4                 | LR__4759
30ae4     14 4E 05 F1 | 	add	fp, #20
30ae8     A7 32 EA FA | 	rdword	local07, fp wz
30aec     14 4E 85 F1 | 	sub	fp, #20
30af0     20 00 90 AD |  if_e	jmp	#LR__4760
30af4     B2 01 00 FF 
30af8     85 12 06 F6 | 	mov	arg01, ##@LR__5393
30afc     14 4E 05 F1 | 	add	fp, #20
30b00     A7 14 E2 FA | 	rdword	arg02, fp
30b04     14 4E 85 F1 | 	sub	fp, #20
30b08     48 CB BF FD | 	call	#_fatfs_cc_strchr
30b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
30b10     20 00 90 AD |  if_e	jmp	#LR__4761
30b14                 | LR__4760
30b14     14 4E 05 F1 | 	add	fp, #20
30b18     A7 BE 58 FC | 	wrword	#95, fp
30b1c     04 4E 85 F1 | 	sub	fp, #4
30b20     A7 32 C2 FA | 	rdbyte	local07, fp
30b24     03 32 46 F5 | 	or	local07, #3
30b28     A7 32 42 FC | 	wrbyte	local07, fp
30b2c     10 4E 85 F1 | 	sub	fp, #16
30b30     84 00 90 FD | 	jmp	#LR__4764
30b34                 | LR__4761
30b34     14 4E 05 F1 | 	add	fp, #20
30b38     A7 32 E2 FA | 	rdword	local07, fp
30b3c     14 4E 85 F1 | 	sub	fp, #20
30b40     41 32 16 F2 | 	cmp	local07, #65 wc
30b44     24 00 90 CD |  if_b	jmp	#LR__4762
30b48     14 4E 05 F1 | 	add	fp, #20
30b4c     A7 26 E2 FA | 	rdword	local01, fp
30b50     14 4E 85 F1 | 	sub	fp, #20
30b54     5B 26 16 F2 | 	cmp	local01, #91 wc
30b58     0C 4E 05 C1 |  if_b	add	fp, #12
30b5c     A7 32 C2 CA |  if_b	rdbyte	local07, fp
30b60     02 32 46 C5 |  if_b	or	local07, #2
30b64     A7 32 42 CC |  if_b	wrbyte	local07, fp
30b68     0C 4E 85 C1 |  if_b	sub	fp, #12
30b6c                 | LR__4762
30b6c     14 4E 05 F1 | 	add	fp, #20
30b70     A7 32 E2 FA | 	rdword	local07, fp
30b74     14 4E 85 F1 | 	sub	fp, #20
30b78     61 32 16 F2 | 	cmp	local07, #97 wc
30b7c     38 00 90 CD |  if_b	jmp	#LR__4763
30b80     14 4E 05 F1 | 	add	fp, #20
30b84     A7 26 E2 FA | 	rdword	local01, fp
30b88     14 4E 85 F1 | 	sub	fp, #20
30b8c     7B 26 16 F2 | 	cmp	local01, #123 wc
30b90     24 00 90 3D |  if_ae	jmp	#LR__4763
30b94     0C 4E 05 F1 | 	add	fp, #12
30b98     A7 32 C2 FA | 	rdbyte	local07, fp
30b9c     01 32 46 F5 | 	or	local07, #1
30ba0     A7 32 42 FC | 	wrbyte	local07, fp
30ba4     08 4E 05 F1 | 	add	fp, #8
30ba8     A7 32 E2 FA | 	rdword	local07, fp
30bac     20 32 86 F1 | 	sub	local07, #32
30bb0     A7 32 52 FC | 	wrword	local07, fp
30bb4     14 4E 85 F1 | 	sub	fp, #20
30bb8                 | LR__4763
30bb8                 | LR__4764
30bb8                 | LR__4765
30bb8     04 4E 05 F1 | 	add	fp, #4
30bbc     A7 3A 02 FB | 	rdlong	local11, fp
30bc0     1D 37 02 F6 | 	mov	local09, local11
30bc4     1C 4E 05 F1 | 	add	fp, #28
30bc8     A7 28 02 FB | 	rdlong	local02, fp
30bcc     14 2D 02 F6 | 	mov	local04, local02
30bd0     01 2C 06 F1 | 	add	local04, #1
30bd4     A7 2C 62 FC | 	wrlong	local04, fp
30bd8     14 39 02 F6 | 	mov	local10, local02
30bdc     20 36 06 F1 | 	add	local09, #32
30be0     1B 39 02 F1 | 	add	local10, local09
30be4     0C 4E 85 F1 | 	sub	fp, #12
30be8     A7 2A E2 FA | 	rdword	local03, fp
30bec     14 4E 85 F1 | 	sub	fp, #20
30bf0     1C 2B 42 FC | 	wrbyte	local03, local10
30bf4     50 FC 9F FD | 	jmp	#LR__4750
30bf8                 | LR__4766
30bf8     04 4E 05 F1 | 	add	fp, #4
30bfc     A7 3A 02 FB | 	rdlong	local11, fp
30c00     04 4E 85 F1 | 	sub	fp, #4
30c04     20 3A 06 F1 | 	add	local11, #32
30c08     1D 33 C2 FA | 	rdbyte	local07, local11
30c0c     E5 32 0E F2 | 	cmp	local07, #229 wz
30c10     04 4E 05 A1 |  if_e	add	fp, #4
30c14     A7 32 02 AB |  if_e	rdlong	local07, fp
30c18     04 4E 85 A1 |  if_e	sub	fp, #4
30c1c     20 32 06 A1 |  if_e	add	local07, #32
30c20     19 0B 48 AC |  if_e	wrbyte	#5, local07
30c24     24 4E 05 F1 | 	add	fp, #36
30c28     A7 32 02 FB | 	rdlong	local07, fp
30c2c     24 4E 85 F1 | 	sub	fp, #36
30c30     08 32 0E F2 | 	cmp	local07, #8 wz
30c34     0C 4E 05 A1 |  if_e	add	fp, #12
30c38     A7 32 C2 AA |  if_e	rdbyte	local07, fp
30c3c     02 32 66 A0 |  if_e	shl	local07, #2
30c40     A7 32 42 AC |  if_e	wrbyte	local07, fp
30c44     0C 4E 85 A1 |  if_e	sub	fp, #12
30c48     0C 4E 05 F1 | 	add	fp, #12
30c4c     A7 32 C2 FA | 	rdbyte	local07, fp
30c50     0C 4E 85 F1 | 	sub	fp, #12
30c54     0C 32 06 F5 | 	and	local07, #12
30c58     0C 32 0E F2 | 	cmp	local07, #12 wz
30c5c     18 00 90 AD |  if_e	jmp	#LR__4767
30c60     0C 4E 05 F1 | 	add	fp, #12
30c64     A7 26 C2 FA | 	rdbyte	local01, fp
30c68     0C 4E 85 F1 | 	sub	fp, #12
30c6c     03 26 06 F5 | 	and	local01, #3
30c70     03 26 0E F2 | 	cmp	local01, #3 wz
30c74     14 00 90 5D |  if_ne	jmp	#LR__4768
30c78                 | LR__4767
30c78     10 4E 05 F1 | 	add	fp, #16
30c7c     A7 32 C2 FA | 	rdbyte	local07, fp
30c80     02 32 46 F5 | 	or	local07, #2
30c84     A7 32 42 FC | 	wrbyte	local07, fp
30c88     10 4E 85 F1 | 	sub	fp, #16
30c8c                 | LR__4768
30c8c     10 4E 05 F1 | 	add	fp, #16
30c90     A7 32 C2 FA | 	rdbyte	local07, fp
30c94     10 4E 85 F1 | 	sub	fp, #16
30c98     02 32 CE F7 | 	test	local07, #2 wz
30c9c     48 00 90 5D |  if_ne	jmp	#LR__4769
30ca0     0C 4E 05 F1 | 	add	fp, #12
30ca4     A7 32 C2 FA | 	rdbyte	local07, fp
30ca8     0C 4E 85 F1 | 	sub	fp, #12
30cac     01 32 CE F7 | 	test	local07, #1 wz
30cb0     10 4E 05 51 |  if_ne	add	fp, #16
30cb4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30cb8     10 32 46 55 |  if_ne	or	local07, #16
30cbc     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30cc0     10 4E 85 51 |  if_ne	sub	fp, #16
30cc4     0C 4E 05 F1 | 	add	fp, #12
30cc8     A7 32 C2 FA | 	rdbyte	local07, fp
30ccc     0C 4E 85 F1 | 	sub	fp, #12
30cd0     04 32 CE F7 | 	test	local07, #4 wz
30cd4     10 4E 05 51 |  if_ne	add	fp, #16
30cd8     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30cdc     08 32 46 55 |  if_ne	or	local07, #8
30ce0     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30ce4     10 4E 85 51 |  if_ne	sub	fp, #16
30ce8                 | LR__4769
30ce8     04 4E 05 F1 | 	add	fp, #4
30cec     A7 32 02 FB | 	rdlong	local07, fp
30cf0     0C 4E 05 F1 | 	add	fp, #12
30cf4     A7 26 C2 FA | 	rdbyte	local01, fp
30cf8     10 4E 85 F1 | 	sub	fp, #16
30cfc     2B 32 06 F1 | 	add	local07, #43
30d00     19 27 42 FC | 	wrbyte	local01, local07
30d04                 | ' 	}
30d04                 | ' 
30d04                 | ' 	dp->fn[ 11 ] = cf;
30d04                 | ' 
30d04                 | ' 	return FR_OK;
30d04     00 FA 05 F6 | 	mov	result1, #0
30d08                 | LR__4770
30d08     A7 F0 03 F6 | 	mov	ptra, fp
30d0c     B2 00 A0 FD | 	call	#popregs_
30d10                 | _fatfs_cc_create_name_ret
30d10     2D 00 64 FD | 	ret
30d14                 | 
30d14                 | _fatfs_cc_follow_path
30d14     02 4A 05 F6 | 	mov	COUNT_, #2
30d18     A8 00 A0 FD | 	call	#pushregs_
30d1c     18 F0 07 F1 | 	add	ptra, #24
30d20     04 4E 05 F1 | 	add	fp, #4
30d24     A7 12 62 FC | 	wrlong	arg01, fp
30d28     04 4E 05 F1 | 	add	fp, #4
30d2c     A7 14 62 FC | 	wrlong	arg02, fp
30d30     04 4E 85 F1 | 	sub	fp, #4
30d34     A7 FA 01 FB | 	rdlong	result1, fp
30d38     FD 26 02 FB | 	rdlong	local01, result1
30d3c     10 4E 05 F1 | 	add	fp, #16
30d40     A7 26 62 FC | 	wrlong	local01, fp
30d44     14 4E 85 F1 | 	sub	fp, #20
30d48     97 24 48 FB | 	callpa	#(@LR__4782-@LR__4780)>>2,fcache_load_ptr_
30d4c                 | ' )
30d4c                 | ' {
30d4c                 | ' 	FRESULT res;
30d4c                 | ' 	BYTE ns;
30d4c                 | ' 	FATFS *fs = dp->obj.fs;
30d4c                 | ' #line 3034 "ff.c"
30d4c                 | ' 	{
30d4c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
30d4c                 | LR__4780
30d4c     08 4E 05 F1 | 	add	fp, #8
30d50     A7 26 02 FB | 	rdlong	local01, fp
30d54     08 4E 85 F1 | 	sub	fp, #8
30d58     13 27 C2 FA | 	rdbyte	local01, local01
30d5c     2F 26 0E F2 | 	cmp	local01, #47 wz
30d60     18 00 90 AD |  if_e	jmp	#LR__4781
30d64     08 4E 05 F1 | 	add	fp, #8
30d68     A7 26 02 FB | 	rdlong	local01, fp
30d6c     08 4E 85 F1 | 	sub	fp, #8
30d70     13 27 C2 FA | 	rdbyte	local01, local01
30d74     5C 26 0E F2 | 	cmp	local01, #92 wz
30d78     18 00 90 5D |  if_ne	jmp	#LR__4783
30d7c                 | LR__4781
30d7c     08 4E 05 F1 | 	add	fp, #8
30d80     A7 26 02 FB | 	rdlong	local01, fp
30d84     01 26 06 F1 | 	add	local01, #1
30d88     A7 26 62 FC | 	wrlong	local01, fp
30d8c     08 4E 85 F1 | 	sub	fp, #8
30d90     B8 FF 9F FD | 	jmp	#LR__4780
30d94                 | LR__4782
30d94                 | LR__4783
30d94     04 4E 05 F1 | 	add	fp, #4
30d98     A7 26 02 FB | 	rdlong	local01, fp
30d9c     08 26 06 F1 | 	add	local01, #8
30da0     13 01 68 FC | 	wrlong	#0, local01
30da4     04 4E 05 F1 | 	add	fp, #4
30da8     A7 26 02 FB | 	rdlong	local01, fp
30dac     08 4E 85 F1 | 	sub	fp, #8
30db0     13 27 C2 FA | 	rdbyte	local01, local01
30db4     20 26 16 F2 | 	cmp	local01, #32 wc
30db8     30 00 90 3D |  if_ae	jmp	#LR__4784
30dbc     04 4E 05 F1 | 	add	fp, #4
30dc0     A7 26 02 FB | 	rdlong	local01, fp
30dc4     2B 26 06 F1 | 	add	local01, #43
30dc8     13 01 49 FC | 	wrbyte	#128, local01
30dcc     A7 12 02 FB | 	rdlong	arg01, fp
30dd0     04 4E 85 F1 | 	sub	fp, #4
30dd4     00 14 06 F6 | 	mov	arg02, #0
30dd8     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
30ddc     0C 4E 05 F1 | 	add	fp, #12
30de0     A7 FA 61 FC | 	wrlong	result1, fp
30de4     0C 4E 85 F1 | 	sub	fp, #12
30de8     1C 01 90 FD | 	jmp	#LR__4788
30dec                 | LR__4784
30dec                 | ' 		for (;;) {
30dec                 | LR__4785
30dec     04 4E 05 F1 | 	add	fp, #4
30df0     A7 12 02 FB | 	rdlong	arg01, fp
30df4     04 4E 05 F1 | 	add	fp, #4
30df8     A7 14 02 F6 | 	mov	arg02, fp
30dfc     08 4E 85 F1 | 	sub	fp, #8
30e00     14 F6 BF FD | 	call	#_fatfs_cc_create_name
30e04     0C 4E 05 F1 | 	add	fp, #12
30e08     A7 FA 61 FC | 	wrlong	result1, fp
30e0c     00 FA 4D F2 | 	cmps	result1, #0 wz
30e10     0C 4E 85 F1 | 	sub	fp, #12
30e14     F0 00 90 5D |  if_ne	jmp	#LR__4787
30e18     04 4E 05 F1 | 	add	fp, #4
30e1c     A7 12 02 FB | 	rdlong	arg01, fp
30e20     04 4E 85 F1 | 	sub	fp, #4
30e24     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
30e28     0C 4E 05 F1 | 	add	fp, #12
30e2c     A7 FA 61 FC | 	wrlong	result1, fp
30e30     08 4E 85 F1 | 	sub	fp, #8
30e34     A7 26 02 FB | 	rdlong	local01, fp
30e38     2B 26 06 F1 | 	add	local01, #43
30e3c     13 27 C2 FA | 	rdbyte	local01, local01
30e40     0C 4E 05 F1 | 	add	fp, #12
30e44     A7 26 42 FC | 	wrbyte	local01, fp
30e48     04 4E 85 F1 | 	sub	fp, #4
30e4c     A7 26 0A FB | 	rdlong	local01, fp wz
30e50     0C 4E 85 F1 | 	sub	fp, #12
30e54     34 00 90 AD |  if_e	jmp	#LR__4786
30e58     0C 4E 05 F1 | 	add	fp, #12
30e5c     A7 26 02 FB | 	rdlong	local01, fp
30e60     0C 4E 85 F1 | 	sub	fp, #12
30e64     04 26 0E F2 | 	cmp	local01, #4 wz
30e68     9C 00 90 5D |  if_ne	jmp	#LR__4787
30e6c     10 4E 05 F1 | 	add	fp, #16
30e70     A7 26 C2 FA | 	rdbyte	local01, fp
30e74     10 4E 85 F1 | 	sub	fp, #16
30e78     04 26 CE F7 | 	test	local01, #4 wz
30e7c     0C 4E 05 A1 |  if_e	add	fp, #12
30e80     A7 0A 68 AC |  if_e	wrlong	#5, fp
30e84     0C 4E 85 A1 |  if_e	sub	fp, #12
30e88                 | ' 					}
30e88                 | ' 				}
30e88                 | ' 				break;
30e88     7C 00 90 FD | 	jmp	#LR__4787
30e8c                 | LR__4786
30e8c     10 4E 05 F1 | 	add	fp, #16
30e90     A7 26 C2 FA | 	rdbyte	local01, fp
30e94     10 4E 85 F1 | 	sub	fp, #16
30e98     04 26 CE F7 | 	test	local01, #4 wz
30e9c     68 00 90 5D |  if_ne	jmp	#LR__4787
30ea0     04 4E 05 F1 | 	add	fp, #4
30ea4     A7 26 02 FB | 	rdlong	local01, fp
30ea8     04 4E 85 F1 | 	sub	fp, #4
30eac     06 26 06 F1 | 	add	local01, #6
30eb0     13 27 C2 FA | 	rdbyte	local01, local01
30eb4     10 26 CE F7 | 	test	local01, #16 wz
30eb8     0C 4E 05 A1 |  if_e	add	fp, #12
30ebc     A7 0A 68 AC |  if_e	wrlong	#5, fp
30ec0     0C 4E 85 A1 |  if_e	sub	fp, #12
30ec4                 | ' 				res = FR_NO_PATH; break;
30ec4     40 00 90 AD |  if_e	jmp	#LR__4787
30ec8     04 4E 05 F1 | 	add	fp, #4
30ecc     A7 28 02 FB | 	rdlong	local02, fp
30ed0     14 27 02 F6 | 	mov	local01, local02
30ed4     10 4E 05 F1 | 	add	fp, #16
30ed8     A7 14 02 FB | 	rdlong	arg02, fp
30edc     0A 13 02 F6 | 	mov	arg01, arg02
30ee0     34 14 06 F1 | 	add	arg02, #52
30ee4     14 4E 85 F1 | 	sub	fp, #20
30ee8     10 28 06 F1 | 	add	local02, #16
30eec     14 29 02 FB | 	rdlong	local02, local02
30ef0     FF 29 06 F5 | 	and	local02, #511
30ef4     14 15 02 F1 | 	add	arg02, local02
30ef8     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
30efc     08 26 06 F1 | 	add	local01, #8
30f00     13 FB 61 FC | 	wrlong	result1, local01
30f04     E4 FE 9F FD | 	jmp	#LR__4785
30f08                 | LR__4787
30f08                 | LR__4788
30f08                 | ' 			}
30f08                 | ' #line 3090 "ff.c"
30f08                 | ' 			{
30f08                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
30f08                 | ' 			}
30f08                 | ' 		}
30f08                 | ' 	}
30f08                 | ' 
30f08                 | ' 	return res;
30f08     0C 4E 05 F1 | 	add	fp, #12
30f0c     A7 FA 01 FB | 	rdlong	result1, fp
30f10     0C 4E 85 F1 | 	sub	fp, #12
30f14     A7 F0 03 F6 | 	mov	ptra, fp
30f18     B2 00 A0 FD | 	call	#popregs_
30f1c                 | _fatfs_cc_follow_path_ret
30f1c     2D 00 64 FD | 	ret
30f20                 | 
30f20                 | _fatfs_cc_get_ldnumber
30f20     01 00 66 F6 | 	neg	_var01, #1
30f24     09 03 0A FB | 	rdlong	_var02, arg01 wz
30f28     01 05 02 F6 | 	mov	_var03, _var02
30f2c     01 FA 65 A6 |  if_e	neg	result1, #1
30f30     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
30f34     97 10 48 FB | 	callpa	#(@LR__4791-@LR__4790)>>2,fcache_load_ptr_
30f38                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
30f38                 | LR__4790
30f38     02 07 C2 FA | 	rdbyte	_var04, _var03
30f3c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
30f40     20 FA 15 F2 | 	cmp	result1, #32 wc
30f44     01 04 06 F1 | 	add	_var03, #1
30f48     03 09 02 36 |  if_ae	mov	_var05, _var04
30f4c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
30f50     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
30f54     E0 FF 9F 1D |  if_a	jmp	#LR__4790
30f58                 | LR__4791
30f58     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
30f5c     3A 06 0E F2 | 	cmp	_var04, #58 wz
30f60     40 00 90 5D |  if_ne	jmp	#LR__4793
30f64     01 0A 06 F6 | 	mov	_var06, #1
30f68     01 09 C2 FA | 	rdbyte	_var05, _var02
30f6c     30 08 16 F2 | 	cmp	_var05, #48 wc
30f70     1C 00 90 CD |  if_b	jmp	#LR__4792
30f74     01 09 C2 FA | 	rdbyte	_var05, _var02
30f78     3A 08 16 F2 | 	cmp	_var05, #58 wc
30f7c     01 0D 02 C6 |  if_b	mov	_var07, _var02
30f80     02 0C 06 C1 |  if_b	add	_var07, #2
30f84     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
30f88     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
30f8c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
30f90                 | LR__4792
30f90     01 0A 56 F2 | 	cmps	_var06, #1 wc
30f94     05 01 02 C6 |  if_b	mov	_var01, _var06
30f98     09 05 62 CC |  if_b	wrlong	_var03, arg01
30f9c                 | ' 			vol = i;
30f9c                 | ' 			*path = tt;
30f9c                 | ' 		}
30f9c                 | ' 		return vol;
30f9c     00 FB 01 F6 | 	mov	result1, _var01
30fa0     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
30fa4                 | LR__4793
30fa4                 | ' 	}
30fa4                 | ' #line 3170 "ff.c"
30fa4                 | ' 	vol = 0;
30fa4                 | ' 
30fa4                 | ' 	return vol;
30fa4     00 FA 05 F6 | 	mov	result1, #0
30fa8                 | _fatfs_cc_get_ldnumber_ret
30fa8     2D 00 64 FD | 	ret
30fac                 | 
30fac                 | _fatfs_cc_check_fs
30fac     04 4A 05 F6 | 	mov	COUNT_, #4
30fb0     A8 00 A0 FD | 	call	#pushregs_
30fb4     09 27 02 F6 | 	mov	local01, arg01
30fb8     03 26 06 F1 | 	add	local01, #3
30fbc     13 01 48 FC | 	wrbyte	#0, local01
30fc0     2D 26 06 F1 | 	add	local01, #45
30fc4     FF FF FF FF 
30fc8     13 FF 6B FC | 	wrlong	##-1, local01
30fcc     30 26 86 F1 | 	sub	local01, #48
30fd0     13 13 02 F6 | 	mov	arg01, local01
30fd4     18 D5 BF FD | 	call	#_fatfs_cc_move_window
30fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
30fdc     04 FA 05 56 |  if_ne	mov	result1, #4
30fe0     94 01 90 5D |  if_ne	jmp	#LR__4804
30fe4     34 26 06 F1 | 	add	local01, #52
30fe8     13 13 02 F6 | 	mov	arg01, local01
30fec     FE 13 06 F1 | 	add	arg01, #510
30ff0                 | ' {
30ff0                 | ' 
30ff0                 | ' 	return *((WORD*)ptr);
30ff0     09 29 E2 FA | 	rdword	local02, arg01
30ff4     13 2B C2 FA | 	rdbyte	local03, local01
30ff8     34 26 86 F1 | 	sub	local01, #52
30ffc     15 2D E2 F8 | 	getbyte	local04, local03, #0
31000     EB 2C 0E F2 | 	cmp	local04, #235 wz
31004     15 17 02 56 |  if_ne	mov	arg03, local03
31008     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
3100c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
31010     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
31014     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
31018     44 01 90 5D |  if_ne	jmp	#LR__4803
3101c     14 2D 32 F9 | 	getword	local04, local02, #0
31020     55 00 00 FF 
31024     55 2C 0E F2 | 	cmp	local04, ##43605 wz
31028     2C 00 90 5D |  if_ne	jmp	#LR__4800
3102c     34 26 06 F1 | 	add	local01, #52
31030     13 13 02 F6 | 	mov	arg01, local01
31034     34 26 86 F1 | 	sub	local01, #52
31038     52 12 06 F1 | 	add	arg01, #82
3103c     B2 01 00 FF 
31040     8C 14 06 F6 | 	mov	arg02, ##@LR__5394
31044     08 16 06 F6 | 	mov	arg03, #8
31048     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
3104c     00 FA 0D F2 | 	cmp	result1, #0 wz
31050                 | ' 			return 0;
31050     00 FA 05 A6 |  if_e	mov	result1, #0
31054     20 01 90 AD |  if_e	jmp	#LR__4804
31058                 | LR__4800
31058     34 26 06 F1 | 	add	local01, #52
3105c     13 13 02 F6 | 	mov	arg01, local01
31060     0B 12 06 F1 | 	add	arg01, #11
31064                 | ' {
31064                 | ' 
31064                 | ' 	return *((WORD*)ptr);
31064     09 FB E1 FA | 	rdword	result1, arg01
31068     0D 26 06 F1 | 	add	local01, #13
3106c     13 2B C2 FA | 	rdbyte	local03, local01
31070     41 26 86 F1 | 	sub	local01, #65
31074     FD 2C 32 F9 | 	getword	local04, result1, #0
31078     FD 14 32 F9 | 	getword	arg02, result1, #0
3107c     01 14 86 F1 | 	sub	arg02, #1
31080     0A 2D CA F7 | 	test	local04, arg02 wz
31084     D8 00 90 5D |  if_ne	jmp	#LR__4802
31088     FD 14 32 F9 | 	getword	arg02, result1, #0
3108c     01 00 00 FF 
31090     00 14 16 F2 | 	cmp	arg02, ##512 wc
31094     C8 00 90 CD |  if_b	jmp	#LR__4802
31098     FD 14 32 F9 | 	getword	arg02, result1, #0
3109c     01 00 00 FF 
310a0     01 14 16 F2 | 	cmp	arg02, ##513 wc
310a4     B8 00 90 3D |  if_ae	jmp	#LR__4802
310a8     15 13 02 F6 | 	mov	arg01, local03
310ac     07 12 4E F7 | 	zerox	arg01, #7 wz
310b0     AC 00 90 AD |  if_e	jmp	#LR__4802
310b4     15 13 E2 F8 | 	getbyte	arg01, local03, #0
310b8     15 2B E2 F8 | 	getbyte	local03, local03, #0
310bc     01 2A 86 F1 | 	sub	local03, #1
310c0     15 13 CA F7 | 	test	arg01, local03 wz
310c4     98 00 90 5D |  if_ne	jmp	#LR__4802
310c8     34 26 06 F1 | 	add	local01, #52
310cc     13 13 02 F6 | 	mov	arg01, local01
310d0     34 26 86 F1 | 	sub	local01, #52
310d4     0E 12 06 F1 | 	add	arg01, #14
310d8                 | ' {
310d8                 | ' 
310d8                 | ' 	return *((WORD*)ptr);
310d8     09 FB E9 FA | 	rdword	result1, arg01 wz
310dc     80 00 90 AD |  if_e	jmp	#LR__4802
310e0     44 26 06 F1 | 	add	local01, #68
310e4     13 13 C2 FA | 	rdbyte	arg01, local01
310e8     44 26 86 F1 | 	sub	local01, #68
310ec     01 12 86 F1 | 	sub	arg01, #1
310f0     02 12 16 F2 | 	cmp	arg01, #2 wc
310f4     68 00 90 3D |  if_ae	jmp	#LR__4802
310f8     34 26 06 F1 | 	add	local01, #52
310fc     13 13 02 F6 | 	mov	arg01, local01
31100     34 26 86 F1 | 	sub	local01, #52
31104     11 12 06 F1 | 	add	arg01, #17
31108                 | ' {
31108                 | ' 
31108                 | ' 	return *((WORD*)ptr);
31108     09 FB E9 FA | 	rdword	result1, arg01 wz
3110c     50 00 90 AD |  if_e	jmp	#LR__4802
31110     34 26 06 F1 | 	add	local01, #52
31114     13 13 02 F6 | 	mov	arg01, local01
31118     34 26 86 F1 | 	sub	local01, #52
3111c     13 12 06 F1 | 	add	arg01, #19
31120                 | ' {
31120                 | ' 
31120                 | ' 	return *((WORD*)ptr);
31120     09 FB E1 FA | 	rdword	result1, arg01
31124     FD 2A 32 F9 | 	getword	local03, result1, #0
31128     80 2A 16 F2 | 	cmp	local03, #128 wc
3112c     20 00 90 3D |  if_ae	jmp	#LR__4801
31130     34 26 06 F1 | 	add	local01, #52
31134     13 13 02 F6 | 	mov	arg01, local01
31138     34 26 86 F1 | 	sub	local01, #52
3113c     20 12 06 F1 | 	add	arg01, #32
31140                 | ' {
31140                 | ' 
31140                 | ' 	return *((DWORD*)ptr);
31140     09 FB 01 FB | 	rdlong	result1, arg01
31144     80 00 00 FF 
31148     00 FA 15 F2 | 	cmp	result1, ##65536 wc
3114c     10 00 90 CD |  if_b	jmp	#LR__4802
31150                 | LR__4801
31150     4A 26 06 F1 | 	add	local01, #74
31154                 | ' {
31154                 | ' 
31154                 | ' 	return *((WORD*)ptr);
31154     13 FB E9 FA | 	rdword	result1, local01 wz
31158                 | ' 			&& b != 0 && (b & (b - 1)) == 0
31158                 | ' 			&& ld_word(fs->win +  14 ) != 0
31158                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
31158                 | ' 			&& ld_word(fs->win +  17 ) != 0
31158                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
31158                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
31158                 | ' 				return 0;
31158     00 FA 05 56 |  if_ne	mov	result1, #0
3115c     18 00 90 5D |  if_ne	jmp	#LR__4804
31160                 | LR__4802
31160                 | LR__4803
31160                 | ' 		}
31160                 | ' 	}
31160                 | ' 	return sign == 0xAA55 ? 2 : 3;
31160     14 2B 32 F9 | 	getword	local03, local02, #0
31164     55 00 00 FF 
31168     55 2A 0E F2 | 	cmp	local03, ##43605 wz
3116c     02 2C 06 A6 |  if_e	mov	local04, #2
31170     03 2C 06 56 |  if_ne	mov	local04, #3
31174     16 FB 01 F6 | 	mov	result1, local04
31178                 | LR__4804
31178     A7 F0 03 F6 | 	mov	ptra, fp
3117c     B2 00 A0 FD | 	call	#popregs_
31180                 | _fatfs_cc_check_fs_ret
31180     2D 00 64 FD | 	ret
31184                 | 
31184                 | _fatfs_cc_find_volume
31184     05 4A 05 F6 | 	mov	COUNT_, #5
31188     A8 00 A0 FD | 	call	#pushregs_
3118c     24 F0 07 F1 | 	add	ptra, #36
31190     09 27 02 F6 | 	mov	local01, arg01
31194     0A 29 02 F6 | 	mov	local02, arg02
31198     13 13 02 F6 | 	mov	arg01, local01
3119c     00 14 06 F6 | 	mov	arg02, #0
311a0     08 FE BF FD | 	call	#_fatfs_cc_check_fs
311a4     02 FA 0D F2 | 	cmp	result1, #2 wz
311a8     0C 00 90 AD |  if_e	jmp	#LR__4810
311ac     03 FA 15 F2 | 	cmp	result1, #3 wc
311b0     00 28 0E C2 |  if_b	cmp	local02, #0 wz
311b4     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4818
311b8                 | LR__4810
311b8                 | ' 	for (i = 0; i < 4; i++) {
311b8     00 2A 06 F6 | 	mov	local03, #0
311bc     97 26 48 FB | 	callpa	#(@LR__4812-@LR__4811)>>2,fcache_load_ptr_
311c0                 | LR__4811
311c0     04 2A 16 F2 | 	cmp	local03, #4 wc
311c4     44 00 90 3D |  if_ae	jmp	#LR__4813
311c8     15 2D 02 F6 | 	mov	local04, local03
311cc     02 2C 66 F0 | 	shl	local04, #2
311d0     14 4E 05 F1 | 	add	fp, #20
311d4     A7 2C 02 F1 | 	add	local04, fp
311d8     34 26 06 F1 | 	add	local01, #52
311dc     13 13 02 F6 | 	mov	arg01, local01
311e0     34 26 86 F1 | 	sub	local01, #52
311e4     BE 13 06 F1 | 	add	arg01, #446
311e8     15 15 02 F6 | 	mov	arg02, local03
311ec     04 14 66 F0 | 	shl	arg02, #4
311f0     0A 13 02 F1 | 	add	arg01, arg02
311f4     08 12 06 F1 | 	add	arg01, #8
311f8                 | ' {
311f8                 | ' 
311f8                 | ' 	return *((DWORD*)ptr);
311f8     09 FB 01 FB | 	rdlong	result1, arg01
311fc     14 4E 85 F1 | 	sub	fp, #20
31200     16 FB 61 FC | 	wrlong	result1, local04
31204     01 2A 06 F1 | 	add	local03, #1
31208     B4 FF 9F FD | 	jmp	#LR__4811
3120c                 | LR__4812
3120c                 | LR__4813
3120c     00 28 0E F2 | 	cmp	local02, #0 wz
31210     14 2D 02 56 |  if_ne	mov	local04, local02
31214     01 2C 86 51 |  if_ne	sub	local04, #1
31218     00 2C 06 A6 |  if_e	mov	local04, #0
3121c     16 2B 02 F6 | 	mov	local03, local04
31220                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
31220                 | ' 	}
31220                 | ' 	i = part ? part - 1 : 0;
31220                 | ' 	do {
31220                 | LR__4814
31220     15 2D 02 F6 | 	mov	local04, local03
31224     02 2C 66 F0 | 	shl	local04, #2
31228     14 4E 05 F1 | 	add	fp, #20
3122c     A7 2C 02 F1 | 	add	local04, fp
31230     16 2D 0A FB | 	rdlong	local04, local04 wz
31234     14 4E 85 F1 | 	sub	fp, #20
31238     28 00 90 AD |  if_e	jmp	#LR__4815
3123c     15 2D 02 F6 | 	mov	local04, local03
31240     02 2C 66 F0 | 	shl	local04, #2
31244     14 4E 05 F1 | 	add	fp, #20
31248     A7 2C 02 F1 | 	add	local04, fp
3124c     16 15 02 FB | 	rdlong	arg02, local04
31250     13 13 02 F6 | 	mov	arg01, local01
31254     14 4E 85 F1 | 	sub	fp, #20
31258     50 FD BF FD | 	call	#_fatfs_cc_check_fs
3125c     FD 2C 02 F6 | 	mov	local04, result1
31260     04 00 90 FD | 	jmp	#LR__4816
31264                 | LR__4815
31264     03 2C 06 F6 | 	mov	local04, #3
31268                 | LR__4816
31268     16 2F 02 F6 | 	mov	local05, local04
3126c     00 28 0E F2 | 	cmp	local02, #0 wz
31270     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
31274     0C 00 90 8D |  if_c_and_z	jmp	#LR__4817
31278     01 2A 06 A1 |  if_e	add	local03, #1
3127c     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
31280     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4814
31284                 | LR__4817
31284                 | ' 	return fmt;
31284     17 FB 01 F6 | 	mov	result1, local05
31288                 | LR__4818
31288     A7 F0 03 F6 | 	mov	ptra, fp
3128c     B2 00 A0 FD | 	call	#popregs_
31290                 | _fatfs_cc_find_volume_ret
31290     2D 00 64 FD | 	ret
31294                 | 
31294                 | _fatfs_cc_mount_volume
31294     0B 4A 05 F6 | 	mov	COUNT_, #11
31298     A8 00 A0 FD | 	call	#pushregs_
3129c     0A 27 02 F6 | 	mov	local01, arg02
312a0     0B 29 02 F6 | 	mov	local02, arg03
312a4     13 01 68 FC | 	wrlong	#0, local01
312a8     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
312ac     FD 2A 02 F6 | 	mov	local03, result1
312b0     00 2A 56 F2 | 	cmps	local03, #0 wc
312b4     0B FA 05 C6 |  if_b	mov	result1, #11
312b8     3C 05 90 CD |  if_b	jmp	#LR__4830
312bc     15 17 02 F6 | 	mov	arg03, local03
312c0     02 16 66 F0 | 	shl	arg03, #2
312c4     F2 16 02 F1 | 	add	arg03, objptr
312c8     0B 2D 0A FB | 	rdlong	local04, arg03 wz
312cc     0C FA 05 A6 |  if_e	mov	result1, #12
312d0     24 05 90 AD |  if_e	jmp	#LR__4830
312d4     13 2D 62 FC | 	wrlong	local04, local01
312d8     14 29 E2 F8 | 	getbyte	local02, local02, #0
312dc     FE 28 06 F5 | 	and	local02, #254
312e0     16 17 CA FA | 	rdbyte	arg03, local04 wz
312e4     4C 00 90 AD |  if_e	jmp	#LR__4821
312e8     01 2C 06 F1 | 	add	local04, #1
312ec     16 13 CA FA | 	rdbyte	arg01, local04 wz
312f0     01 2C 86 F1 | 	sub	local04, #1
312f4     01 FA 05 56 |  if_ne	mov	result1, #1
312f8                 | ' 
312f8                 | ' 	return Stat;
312f8     01 00 00 AF 
312fc     20 E4 05 A1 |  if_e	add	objptr, ##544
31300     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31304     01 00 00 AF 
31308     20 E4 85 A1 |  if_e	sub	objptr, ##544
3130c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
31310     01 16 CE F7 | 	test	arg03, #1 wz
31314     1C 00 90 5D |  if_ne	jmp	#LR__4820
31318     00 28 0E F2 | 	cmp	local02, #0 wz
3131c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
31320     04 FA CD 57 |  if_ne	test	result1, #4 wz
31324                 | ' 				return FR_WRITE_PROTECTED;
31324     0A FA 05 56 |  if_ne	mov	result1, #10
31328     CC 04 90 5D |  if_ne	jmp	#LR__4830
3132c                 | ' 			}
3132c                 | ' 			return FR_OK;
3132c     00 FA 05 F6 | 	mov	result1, #0
31330     C4 04 90 FD | 	jmp	#LR__4830
31334                 | LR__4820
31334                 | LR__4821
31334     16 01 48 FC | 	wrbyte	#0, local04
31338     01 2C 06 F1 | 	add	local04, #1
3133c     16 2B 42 FC | 	wrbyte	local03, local04
31340     16 13 C2 FA | 	rdbyte	arg01, local04
31344     01 2C 86 F1 | 	sub	local04, #1
31348     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
3134c     FD 16 02 F6 | 	mov	arg03, result1
31350     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
31354     01 2E CE F7 | 	test	local05, #1 wz
31358                 | ' 		return FR_NOT_READY;
31358     03 FA 05 56 |  if_ne	mov	result1, #3
3135c     98 04 90 5D |  if_ne	jmp	#LR__4830
31360     00 28 0E F2 | 	cmp	local02, #0 wz
31364     0B 2F 02 56 |  if_ne	mov	local05, arg03
31368     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
3136c     04 2E CE 57 |  if_ne	test	local05, #4 wz
31370                 | ' 		return FR_WRITE_PROTECTED;
31370     0A FA 05 56 |  if_ne	mov	result1, #10
31374     80 04 90 5D |  if_ne	jmp	#LR__4830
31378     16 13 02 F6 | 	mov	arg01, local04
3137c     00 14 06 F6 | 	mov	arg02, #0
31380     00 FE BF FD | 	call	#_fatfs_cc_find_volume
31384     FD 12 02 F6 | 	mov	arg01, result1
31388     04 12 0E F2 | 	cmp	arg01, #4 wz
3138c     01 FA 05 A6 |  if_e	mov	result1, #1
31390     64 04 90 AD |  if_e	jmp	#LR__4830
31394     02 12 16 F2 | 	cmp	arg01, #2 wc
31398     0D FA 05 36 |  if_ae	mov	result1, #13
3139c     58 04 90 3D |  if_ae	jmp	#LR__4830
313a0     30 2C 06 F1 | 	add	local04, #48
313a4     16 31 02 FB | 	rdlong	local06, local04
313a8     04 2C 06 F1 | 	add	local04, #4
313ac     16 13 02 F6 | 	mov	arg01, local04
313b0     34 2C 86 F1 | 	sub	local04, #52
313b4     0B 12 06 F1 | 	add	arg01, #11
313b8                 | ' {
313b8                 | ' 
313b8                 | ' 	return *((WORD*)ptr);
313b8     09 FB E1 FA | 	rdword	result1, arg01
313bc     01 00 00 FF 
313c0     00 FA 0D F2 | 	cmp	result1, ##512 wz
313c4     0D FA 05 56 |  if_ne	mov	result1, #13
313c8     2C 04 90 5D |  if_ne	jmp	#LR__4830
313cc     34 2C 06 F1 | 	add	local04, #52
313d0     16 13 02 F6 | 	mov	arg01, local04
313d4     34 2C 86 F1 | 	sub	local04, #52
313d8     16 12 06 F1 | 	add	arg01, #22
313dc                 | ' {
313dc                 | ' 
313dc                 | ' 	return *((WORD*)ptr);
313dc     09 FB E1 FA | 	rdword	result1, arg01
313e0     FD 32 0A F6 | 	mov	local07, result1 wz
313e4     18 00 90 5D |  if_ne	jmp	#LR__4822
313e8     34 2C 06 F1 | 	add	local04, #52
313ec     16 13 02 F6 | 	mov	arg01, local04
313f0     34 2C 86 F1 | 	sub	local04, #52
313f4     24 12 06 F1 | 	add	arg01, #36
313f8                 | ' {
313f8                 | ' 
313f8                 | ' 	return *((DWORD*)ptr);
313f8     09 FB 01 FB | 	rdlong	result1, arg01
313fc     FD 32 02 F6 | 	mov	local07, result1
31400                 | LR__4822
31400     1C 2C 06 F1 | 	add	local04, #28
31404     16 33 62 FC | 	wrlong	local07, local04
31408     28 2C 06 F1 | 	add	local04, #40
3140c     16 2F C2 FA | 	rdbyte	local05, local04
31410     42 2C 86 F1 | 	sub	local04, #66
31414     16 2F 42 FC | 	wrbyte	local05, local04
31418     16 2F C2 FA | 	rdbyte	local05, local04
3141c     02 2C 86 F1 | 	sub	local04, #2
31420     01 2E 0E F2 | 	cmp	local05, #1 wz
31424     02 2C 06 51 |  if_ne	add	local04, #2
31428     16 2F C2 5A |  if_ne	rdbyte	local05, local04
3142c     02 2C 86 51 |  if_ne	sub	local04, #2
31430     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
31434     0D FA 05 56 |  if_ne	mov	result1, #13
31438     BC 03 90 5D |  if_ne	jmp	#LR__4830
3143c     02 2C 06 F1 | 	add	local04, #2
31440     16 2F C2 FA | 	rdbyte	local05, local04
31444     17 33 02 FD | 	qmul	local07, local05
31448     3F 2C 06 F1 | 	add	local04, #63
3144c     16 2F C2 FA | 	rdbyte	local05, local04
31450     37 2C 86 F1 | 	sub	local04, #55
31454     16 2F 52 FC | 	wrword	local05, local04
31458     16 2F EA FA | 	rdword	local05, local04 wz
3145c     0A 2C 86 F1 | 	sub	local04, #10
31460     18 32 62 FD | 	getqx	local07
31464     20 00 90 AD |  if_e	jmp	#LR__4823
31468     0A 2C 06 F1 | 	add	local04, #10
3146c     16 2F E2 FA | 	rdword	local05, local04
31470     17 2B 32 F9 | 	getword	local03, local05, #0
31474     0A 2C 86 F1 | 	sub	local04, #10
31478     17 2F 32 F9 | 	getword	local05, local05, #0
3147c     01 2E 86 F1 | 	sub	local05, #1
31480     17 2B CA F7 | 	test	local03, local05 wz
31484     08 00 90 AD |  if_e	jmp	#LR__4824
31488                 | LR__4823
31488     0D FA 05 F6 | 	mov	result1, #13
3148c     68 03 90 FD | 	jmp	#LR__4830
31490                 | LR__4824
31490     34 2C 06 F1 | 	add	local04, #52
31494     16 13 02 F6 | 	mov	arg01, local04
31498     11 12 06 F1 | 	add	arg01, #17
3149c                 | ' {
3149c                 | ' 
3149c                 | ' 	return *((WORD*)ptr);
3149c     09 FB E1 FA | 	rdword	result1, arg01
314a0     2C 2C 86 F1 | 	sub	local04, #44
314a4     16 FB 51 FC | 	wrword	result1, local04
314a8     16 2F E2 FA | 	rdword	local05, local04
314ac     08 2C 86 F1 | 	sub	local04, #8
314b0     17 13 52 F6 | 	abs	arg01, local05 wc
314b4     09 13 42 F8 | 	getnib	arg01, arg01, #0
314b8     09 13 8A F6 | 	negc	arg01, arg01 wz
314bc     0D FA 05 56 |  if_ne	mov	result1, #13
314c0     34 03 90 5D |  if_ne	jmp	#LR__4830
314c4     34 2C 06 F1 | 	add	local04, #52
314c8     16 13 02 F6 | 	mov	arg01, local04
314cc     34 2C 86 F1 | 	sub	local04, #52
314d0     13 12 06 F1 | 	add	arg01, #19
314d4                 | ' {
314d4                 | ' 
314d4                 | ' 	return *((WORD*)ptr);
314d4     09 FB E1 FA | 	rdword	result1, arg01
314d8     FD 34 0A F6 | 	mov	local08, result1 wz
314dc     34 2C 06 A1 |  if_e	add	local04, #52
314e0     16 13 02 A6 |  if_e	mov	arg01, local04
314e4     34 2C 86 A1 |  if_e	sub	local04, #52
314e8     20 12 06 A1 |  if_e	add	arg01, #32
314ec                 | ' {
314ec                 | ' 
314ec                 | ' 	return *((DWORD*)ptr);
314ec     09 35 02 AB |  if_e	rdlong	local08, arg01
314f0     34 2C 06 F1 | 	add	local04, #52
314f4     16 13 02 F6 | 	mov	arg01, local04
314f8     34 2C 86 F1 | 	sub	local04, #52
314fc     0E 12 06 F1 | 	add	arg01, #14
31500                 | ' {
31500                 | ' 
31500                 | ' 	return *((WORD*)ptr);
31500     09 FB E1 FA | 	rdword	result1, arg01
31504     FD 12 02 F6 | 	mov	arg01, result1
31508     09 2F 02 F6 | 	mov	local05, arg01
3150c     0F 2E 4E F7 | 	zerox	local05, #15 wz
31510     0D FA 05 A6 |  if_e	mov	result1, #13
31514     E0 02 90 AD |  if_e	jmp	#LR__4830
31518     09 37 32 F9 | 	getword	local09, arg01, #0
3151c     19 37 02 F1 | 	add	local09, local07
31520     08 2C 06 F1 | 	add	local04, #8
31524     16 2F E2 FA | 	rdword	local05, local04
31528     08 2C 86 F1 | 	sub	local04, #8
3152c     17 2F 52 F6 | 	abs	local05, local05 wc
31530     04 2E 46 F0 | 	shr	local05, #4
31534     17 37 82 F3 | 	sumc	local09, local05
31538     1B 35 12 F2 | 	cmp	local08, local09 wc
3153c     0D FA 05 C6 |  if_b	mov	result1, #13
31540     B4 02 90 CD |  if_b	jmp	#LR__4830
31544     1B 35 82 F1 | 	sub	local08, local09
31548     0A 2C 06 F1 | 	add	local04, #10
3154c     16 2F E2 FA | 	rdword	local05, local04
31550     17 35 12 FD | 	qdiv	local08, local05
31554     0A 2C 86 F1 | 	sub	local04, #10
31558     18 2E 62 FD | 	getqx	local05
3155c     00 2E 0E F2 | 	cmp	local05, #0 wz
31560     0D FA 05 A6 |  if_e	mov	result1, #13
31564     90 02 90 AD |  if_e	jmp	#LR__4830
31568     00 38 06 F6 | 	mov	local10, #0
3156c     FF FF 07 FF 
31570     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
31574     03 38 06 C6 |  if_b	mov	local10, #3
31578     7F 00 00 FF 
3157c     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
31580     02 38 06 C6 |  if_b	mov	local10, #2
31584     07 00 00 FF 
31588     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
3158c     01 38 06 C6 |  if_b	mov	local10, #1
31590     00 38 0E F2 | 	cmp	local10, #0 wz
31594     0D FA 05 A6 |  if_e	mov	result1, #13
31598     5C 02 90 AD |  if_e	jmp	#LR__4830
3159c     02 2E 06 F1 | 	add	local05, #2
315a0     18 2C 06 F1 | 	add	local04, #24
315a4     16 2F 62 FC | 	wrlong	local05, local04
315a8     08 2C 06 F1 | 	add	local04, #8
315ac     16 31 62 FC | 	wrlong	local06, local04
315b0     18 2F 02 F6 | 	mov	local05, local06
315b4     09 13 32 F9 | 	getword	arg01, arg01, #0
315b8     09 2F 02 F1 | 	add	local05, arg01
315bc     04 2C 06 F1 | 	add	local04, #4
315c0     16 2F 62 FC | 	wrlong	local05, local04
315c4     18 2F 02 F6 | 	mov	local05, local06
315c8     1B 2F 02 F1 | 	add	local05, local09
315cc     08 2C 06 F1 | 	add	local04, #8
315d0     16 2F 62 FC | 	wrlong	local05, local04
315d4     2C 2C 86 F1 | 	sub	local04, #44
315d8     03 38 0E F2 | 	cmp	local10, #3 wz
315dc     5C 00 90 5D |  if_ne	jmp	#LR__4825
315e0     34 2C 06 F1 | 	add	local04, #52
315e4     16 13 02 F6 | 	mov	arg01, local04
315e8     34 2C 86 F1 | 	sub	local04, #52
315ec     2A 12 06 F1 | 	add	arg01, #42
315f0                 | ' {
315f0                 | ' 
315f0                 | ' 	return *((WORD*)ptr);
315f0     09 FB E9 FA | 	rdword	result1, arg01 wz
315f4     0D FA 05 56 |  if_ne	mov	result1, #13
315f8     FC 01 90 5D |  if_ne	jmp	#LR__4830
315fc     08 2C 06 F1 | 	add	local04, #8
31600     16 2F EA FA | 	rdword	local05, local04 wz
31604     08 2C 86 F1 | 	sub	local04, #8
31608     0D FA 05 56 |  if_ne	mov	result1, #13
3160c     E8 01 90 5D |  if_ne	jmp	#LR__4830
31610     34 2C 06 F1 | 	add	local04, #52
31614     16 13 02 F6 | 	mov	arg01, local04
31618     2C 12 06 F1 | 	add	arg01, #44
3161c                 | ' {
3161c                 | ' 
3161c                 | ' 	return *((DWORD*)ptr);
3161c     09 FB 01 FB | 	rdlong	result1, arg01
31620     0C 2C 86 F1 | 	sub	local04, #12
31624     16 FB 61 FC | 	wrlong	result1, local04
31628     10 2C 86 F1 | 	sub	local04, #16
3162c     16 3B 02 FB | 	rdlong	local11, local04
31630     18 2C 86 F1 | 	sub	local04, #24
31634     02 3A 66 F0 | 	shl	local11, #2
31638     6C 00 90 FD | 	jmp	#LR__4827
3163c                 | LR__4825
3163c     08 2C 06 F1 | 	add	local04, #8
31640     16 2F EA FA | 	rdword	local05, local04 wz
31644     08 2C 86 F1 | 	sub	local04, #8
31648     0D FA 05 A6 |  if_e	mov	result1, #13
3164c     A8 01 90 AD |  if_e	jmp	#LR__4830
31650     24 2C 06 F1 | 	add	local04, #36
31654     16 2F 02 FB | 	rdlong	local05, local04
31658     19 2F 02 F1 | 	add	local05, local07
3165c     04 2C 06 F1 | 	add	local04, #4
31660     16 2F 62 FC | 	wrlong	local05, local04
31664     28 2C 86 F1 | 	sub	local04, #40
31668     02 38 0E F2 | 	cmp	local10, #2 wz
3166c     18 2C 06 A1 |  if_e	add	local04, #24
31670     16 2F 02 AB |  if_e	rdlong	local05, local04
31674     18 2C 86 A1 |  if_e	sub	local04, #24
31678     01 2E 66 A0 |  if_e	shl	local05, #1
3167c     24 00 90 AD |  if_e	jmp	#LR__4826
31680     18 2C 06 F1 | 	add	local04, #24
31684     16 3B 02 FB | 	rdlong	local11, local04
31688     1D 2F 02 F6 | 	mov	local05, local11
3168c     01 2E 66 F0 | 	shl	local05, #1
31690     1D 2F 02 F1 | 	add	local05, local11
31694     01 2E 46 F0 | 	shr	local05, #1
31698     18 2C 86 F1 | 	sub	local04, #24
3169c     01 3A 06 F5 | 	and	local11, #1
316a0     1D 2F 02 F1 | 	add	local05, local11
316a4                 | LR__4826
316a4     17 3B 02 F6 | 	mov	local11, local05
316a8                 | LR__4827
316a8     FF 3B 06 F1 | 	add	local11, #511
316ac     09 3A 46 F0 | 	shr	local11, #9
316b0     1C 2C 06 F1 | 	add	local04, #28
316b4     16 17 02 FB | 	rdlong	arg03, local04
316b8     1C 2C 86 F1 | 	sub	local04, #28
316bc     1D 17 12 F2 | 	cmp	arg03, local11 wc
316c0     0D FA 05 C6 |  if_b	mov	result1, #13
316c4     30 01 90 CD |  if_b	jmp	#LR__4830
316c8     14 2C 06 F1 | 	add	local04, #20
316cc     FF FF FF FF 
316d0     16 FF 6B FC | 	wrlong	##-1, local04
316d4     04 2C 86 F1 | 	sub	local04, #4
316d8     FF FF FF FF 
316dc     16 FF 6B FC | 	wrlong	##-1, local04
316e0     0C 2C 86 F1 | 	sub	local04, #12
316e4     16 01 49 FC | 	wrbyte	#128, local04
316e8     04 2C 86 F1 | 	sub	local04, #4
316ec     03 38 0E F2 | 	cmp	local10, #3 wz
316f0     D0 00 90 5D |  if_ne	jmp	#LR__4829
316f4     34 2C 06 F1 | 	add	local04, #52
316f8     16 13 02 F6 | 	mov	arg01, local04
316fc     34 2C 86 F1 | 	sub	local04, #52
31700     30 12 06 F1 | 	add	arg01, #48
31704                 | ' {
31704                 | ' 
31704                 | ' 	return *((WORD*)ptr);
31704     09 FB E1 FA | 	rdword	result1, arg01
31708     FD 2E 32 F9 | 	getword	local05, result1, #0
3170c     01 2E 0E F2 | 	cmp	local05, #1 wz
31710     B0 00 90 5D |  if_ne	jmp	#LR__4829
31714     01 30 06 F1 | 	add	local06, #1
31718     16 13 02 F6 | 	mov	arg01, local04
3171c     18 15 02 F6 | 	mov	arg02, local06
31720     CC CD BF FD | 	call	#_fatfs_cc_move_window
31724     00 FA 0D F2 | 	cmp	result1, #0 wz
31728     98 00 90 5D |  if_ne	jmp	#LR__4829
3172c     04 2C 06 F1 | 	add	local04, #4
31730     16 01 48 FC | 	wrbyte	#0, local04
31734     30 2C 06 F1 | 	add	local04, #48
31738     16 13 02 F6 | 	mov	arg01, local04
3173c     34 2C 86 F1 | 	sub	local04, #52
31740     FE 13 06 F1 | 	add	arg01, #510
31744                 | ' {
31744                 | ' 
31744                 | ' 	return *((WORD*)ptr);
31744     09 FB E1 FA | 	rdword	result1, arg01
31748     FD 2E 32 F9 | 	getword	local05, result1, #0
3174c     55 00 00 FF 
31750     55 2E 0E F2 | 	cmp	local05, ##43605 wz
31754     34 2C 06 A1 |  if_e	add	local04, #52
31758     16 13 02 A6 |  if_e	mov	arg01, local04
3175c     34 2C 86 A1 |  if_e	sub	local04, #52
31760                 | ' {
31760                 | ' 
31760                 | ' 	return *((DWORD*)ptr);
31760     09 FB 01 AB |  if_e	rdlong	result1, arg01
31764     A9 B0 20 AF 
31768     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
3176c     54 00 90 5D |  if_ne	jmp	#LR__4828
31770     34 2C 06 F1 | 	add	local04, #52
31774     16 13 02 F6 | 	mov	arg01, local04
31778     34 2C 86 F1 | 	sub	local04, #52
3177c     E4 13 06 F1 | 	add	arg01, #484
31780                 | ' {
31780                 | ' 
31780                 | ' 	return *((DWORD*)ptr);
31780     09 FB 01 FB | 	rdlong	result1, arg01
31784     B9 A0 30 FF 
31788     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
3178c     34 00 90 5D |  if_ne	jmp	#LR__4828
31790     34 2C 06 F1 | 	add	local04, #52
31794     16 13 02 F6 | 	mov	arg01, local04
31798     E8 13 06 F1 | 	add	arg01, #488
3179c                 | ' {
3179c                 | ' 
3179c                 | ' 	return *((DWORD*)ptr);
3179c     09 FB 01 FB | 	rdlong	result1, arg01
317a0     20 2C 86 F1 | 	sub	local04, #32
317a4     16 FB 61 FC | 	wrlong	result1, local04
317a8     20 2C 06 F1 | 	add	local04, #32
317ac     16 13 02 F6 | 	mov	arg01, local04
317b0     EC 13 06 F1 | 	add	arg01, #492
317b4                 | ' {
317b4                 | ' 
317b4                 | ' 	return *((DWORD*)ptr);
317b4     09 FB 01 FB | 	rdlong	result1, arg01
317b8     24 2C 86 F1 | 	sub	local04, #36
317bc     16 FB 61 FC | 	wrlong	result1, local04
317c0     10 2C 86 F1 | 	sub	local04, #16
317c4                 | LR__4828
317c4                 | LR__4829
317c4     16 39 42 FC | 	wrbyte	local10, local04
317c8     04 E4 05 F1 | 	add	objptr, #4
317cc     F2 2E E2 FA | 	rdword	local05, objptr
317d0     01 2E 06 F1 | 	add	local05, #1
317d4     F2 2E 52 FC | 	wrword	local05, objptr
317d8     F2 3A E2 FA | 	rdword	local11, objptr
317dc     06 2C 06 F1 | 	add	local04, #6
317e0     16 3B 52 FC | 	wrword	local11, local04
317e4     04 E4 05 F1 | 	add	objptr, #4
317e8     06 2C 06 F1 | 	add	local04, #6
317ec     16 E5 61 FC | 	wrlong	objptr, local04
317f0                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
317f0                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
317f0                 | ' 			{
317f0                 | ' 
317f0                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
317f0                 | ' 
317f0                 | ' 
317f0                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
317f0                 | ' 
317f0                 | ' 			}
317f0                 | ' 		}
317f0                 | ' 
317f0                 | ' 
317f0                 | ' 	}
317f0                 | ' 
317f0                 | ' 	fs->fs_type = (BYTE)fmt;
317f0                 | ' 	fs->id = ++Fsid;
317f0                 | ' 
317f0                 | ' 	fs->lfnbuf = LfnBuf;
317f0                 | ' #line 3567 "ff.c"
317f0                 | ' 	return FR_OK;
317f0     00 FA 05 F6 | 	mov	result1, #0
317f4     08 E4 85 F1 | 	sub	objptr, #8
317f8                 | LR__4830
317f8     A7 F0 03 F6 | 	mov	ptra, fp
317fc     B2 00 A0 FD | 	call	#popregs_
31800                 | _fatfs_cc_mount_volume_ret
31800     2D 00 64 FD | 	ret
31804                 | 
31804                 | _fatfs_cc_validate
31804     09 01 0A F6 | 	mov	_var01, arg01 wz
31808     09 02 06 F6 | 	mov	_var02, #9
3180c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
31810     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
31814     50 00 90 AD |  if_e	jmp	#LR__4840
31818     04 00 06 F1 | 	add	_var01, #4
3181c     00 07 E2 FA | 	rdword	_var04, _var01
31820     04 00 86 F1 | 	sub	_var01, #4
31824     00 13 02 FB | 	rdlong	arg01, _var01
31828     06 12 06 F1 | 	add	arg01, #6
3182c     09 FB E1 FA | 	rdword	result1, arg01
31830     FD 06 0A F2 | 	cmp	_var04, result1 wz
31834     30 00 90 5D |  if_ne	jmp	#LR__4840
31838     00 07 02 FB | 	rdlong	_var04, _var01
3183c     01 06 06 F1 | 	add	_var04, #1
31840     03 13 CA FA | 	rdbyte	arg01, _var04 wz
31844     01 FA 05 56 |  if_ne	mov	result1, #1
31848                 | ' 
31848                 | ' 	return Stat;
31848     01 00 00 AF 
3184c     20 E4 05 A1 |  if_e	add	objptr, ##544
31850     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31854     01 00 00 AF 
31858     20 E4 85 A1 |  if_e	sub	objptr, ##544
3185c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
31860     01 04 CE F7 | 	test	_var03, #1 wz
31864     00 02 06 A6 |  if_e	mov	_var02, #0
31868                 | LR__4840
31868     00 02 0E F2 | 	cmp	_var02, #0 wz
3186c     00 05 02 AB |  if_e	rdlong	_var03, _var01
31870     00 04 06 56 |  if_ne	mov	_var03, #0
31874     0A 05 62 FC | 	wrlong	_var03, arg02
31878                 | ' 			res = FR_OK;
31878                 | ' 		}
31878                 | ' 
31878                 | ' 	}
31878                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
31878                 | ' 	return res;
31878     01 FB 01 F6 | 	mov	result1, _var02
3187c                 | _fatfs_cc_validate_ret
3187c     2D 00 64 FD | 	ret
31880                 | 
31880                 | _fatfs_cc_f_mount
31880     01 4A 05 F6 | 	mov	COUNT_, #1
31884     A8 00 A0 FD | 	call	#pushregs_
31888     20 F0 07 F1 | 	add	ptra, #32
3188c     04 4E 05 F1 | 	add	fp, #4
31890     A7 12 62 FC | 	wrlong	arg01, fp
31894     04 4E 05 F1 | 	add	fp, #4
31898     A7 14 62 FC | 	wrlong	arg02, fp
3189c     04 4E 05 F1 | 	add	fp, #4
318a0     A7 16 42 FC | 	wrbyte	arg03, fp
318a4     04 4E 85 F1 | 	sub	fp, #4
318a8     A7 16 02 FB | 	rdlong	arg03, fp
318ac     14 4E 05 F1 | 	add	fp, #20
318b0     A7 16 62 FC | 	wrlong	arg03, fp
318b4     A7 12 02 F6 | 	mov	arg01, fp
318b8     1C 4E 85 F1 | 	sub	fp, #28
318bc     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
318c0     14 4E 05 F1 | 	add	fp, #20
318c4     A7 FA 61 FC | 	wrlong	result1, fp
318c8     14 4E 85 F1 | 	sub	fp, #20
318cc     00 FA 55 F2 | 	cmps	result1, #0 wc
318d0     0B FA 05 C6 |  if_b	mov	result1, #11
318d4     C0 00 90 CD |  if_b	jmp	#LR__4851
318d8     14 4E 05 F1 | 	add	fp, #20
318dc     A7 16 02 FB | 	rdlong	arg03, fp
318e0     02 16 66 F0 | 	shl	arg03, #2
318e4     F2 16 02 F1 | 	add	arg03, objptr
318e8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
318ec     04 4E 85 F1 | 	sub	fp, #4
318f0     A7 16 62 FC | 	wrlong	arg03, fp
318f4     10 4E 85 F1 | 	sub	fp, #16
318f8     28 00 90 AD |  if_e	jmp	#LR__4850
318fc     10 4E 05 F1 | 	add	fp, #16
31900     A7 16 02 FB | 	rdlong	arg03, fp
31904     10 4E 85 F1 | 	sub	fp, #16
31908     01 16 06 F1 | 	add	arg03, #1
3190c     0B 13 C2 FA | 	rdbyte	arg01, arg03
31910     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
31914     10 4E 05 F1 | 	add	fp, #16
31918     A7 16 02 FB | 	rdlong	arg03, fp
3191c     10 4E 85 F1 | 	sub	fp, #16
31920     0B 01 48 FC | 	wrbyte	#0, arg03
31924                 | LR__4850
31924     04 4E 05 F1 | 	add	fp, #4
31928     A7 26 0A FB | 	rdlong	local01, fp wz
3192c     04 4E 85 F1 | 	sub	fp, #4
31930     04 4E 05 51 |  if_ne	add	fp, #4
31934     A7 26 02 5B |  if_ne	rdlong	local01, fp
31938     04 4E 85 51 |  if_ne	sub	fp, #4
3193c     13 01 48 5C |  if_ne	wrbyte	#0, local01
31940     14 4E 05 F1 | 	add	fp, #20
31944     A7 26 02 FB | 	rdlong	local01, fp
31948     02 26 66 F0 | 	shl	local01, #2
3194c     F2 26 02 F1 | 	add	local01, objptr
31950     10 4E 85 F1 | 	sub	fp, #16
31954     A7 16 02 FB | 	rdlong	arg03, fp
31958     13 17 62 FC | 	wrlong	arg03, local01
3195c     08 4E 05 F1 | 	add	fp, #8
31960     A7 26 CA FA | 	rdbyte	local01, fp wz
31964     0C 4E 85 F1 | 	sub	fp, #12
31968     00 FA 05 A6 |  if_e	mov	result1, #0
3196c     28 00 90 AD |  if_e	jmp	#LR__4851
31970     08 4E 05 F1 | 	add	fp, #8
31974     A7 12 02 F6 | 	mov	arg01, fp
31978     04 4E 85 F1 | 	sub	fp, #4
3197c     A7 14 02 F6 | 	mov	arg02, fp
31980     04 4E 85 F1 | 	sub	fp, #4
31984     00 16 06 F6 | 	mov	arg03, #0
31988     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
3198c     18 4E 05 F1 | 	add	fp, #24
31990     A7 FA 61 FC | 	wrlong	result1, fp
31994                 | ' 
31994                 | ' 	res = mount_volume(&path, &fs, 0);
31994                 | ' 	return res ;
31994     18 4E 85 F1 | 	sub	fp, #24
31998                 | LR__4851
31998     A7 F0 03 F6 | 	mov	ptra, fp
3199c     B2 00 A0 FD | 	call	#popregs_
319a0                 | _fatfs_cc_f_mount_ret
319a0     2D 00 64 FD | 	ret
319a4                 | 
319a4                 | _fatfs_cc_f_open
319a4     02 4A 05 F6 | 	mov	COUNT_, #2
319a8     A8 00 A0 FD | 	call	#pushregs_
319ac     60 F0 07 F1 | 	add	ptra, #96
319b0     04 4E 05 F1 | 	add	fp, #4
319b4     A7 12 62 FC | 	wrlong	arg01, fp
319b8     04 4E 05 F1 | 	add	fp, #4
319bc     A7 14 62 FC | 	wrlong	arg02, fp
319c0     04 4E 05 F1 | 	add	fp, #4
319c4     A7 16 42 FC | 	wrbyte	arg03, fp
319c8     08 4E 85 F1 | 	sub	fp, #8
319cc     A7 18 0A FB | 	rdlong	arg04, fp wz
319d0     04 4E 85 F1 | 	sub	fp, #4
319d4     09 FA 05 A6 |  if_e	mov	result1, #9
319d8     98 06 90 AD |  if_e	jmp	#LR__4877
319dc     0C 4E 05 F1 | 	add	fp, #12
319e0     A7 18 C2 FA | 	rdbyte	arg04, fp
319e4     3F 18 06 F5 | 	and	arg04, #63
319e8     A7 18 42 FC | 	wrbyte	arg04, fp
319ec     04 4E 85 F1 | 	sub	fp, #4
319f0     A7 12 02 F6 | 	mov	arg01, fp
319f4     3C 4E 05 F1 | 	add	fp, #60
319f8     A7 14 02 F6 | 	mov	arg02, fp
319fc     38 4E 85 F1 | 	sub	fp, #56
31a00     A7 16 C2 FA | 	rdbyte	arg03, fp
31a04     0C 4E 85 F1 | 	sub	fp, #12
31a08     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
31a0c     10 4E 05 F1 | 	add	fp, #16
31a10     A7 FA 61 FC | 	wrlong	result1, fp
31a14     10 4E 85 F1 | 	sub	fp, #16
31a18     00 FA 0D F2 | 	cmp	result1, #0 wz
31a1c     2C 06 90 5D |  if_ne	jmp	#LR__4876
31a20     44 4E 05 F1 | 	add	fp, #68
31a24     A7 18 02 FB | 	rdlong	arg04, fp
31a28     30 4E 85 F1 | 	sub	fp, #48
31a2c     A7 18 62 FC | 	wrlong	arg04, fp
31a30     A7 12 02 F6 | 	mov	arg01, fp
31a34     0C 4E 85 F1 | 	sub	fp, #12
31a38     A7 26 02 FB | 	rdlong	local01, fp
31a3c     08 4E 85 F1 | 	sub	fp, #8
31a40     13 15 02 F6 | 	mov	arg02, local01
31a44     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
31a48     10 4E 05 F1 | 	add	fp, #16
31a4c     A7 FA 61 FC | 	wrlong	result1, fp
31a50     10 4E 85 F1 | 	sub	fp, #16
31a54     00 FA 0D F2 | 	cmp	result1, #0 wz
31a58     1C 00 90 5D |  if_ne	jmp	#LR__4860
31a5c     3F 4E 05 F1 | 	add	fp, #63
31a60     A7 18 C2 FA | 	rdbyte	arg04, fp
31a64     3F 4E 85 F1 | 	sub	fp, #63
31a68     80 18 CE F7 | 	test	arg04, #128 wz
31a6c     10 4E 05 51 |  if_ne	add	fp, #16
31a70     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31a74     10 4E 85 51 |  if_ne	sub	fp, #16
31a78                 | LR__4860
31a78     0C 4E 05 F1 | 	add	fp, #12
31a7c     A7 18 C2 FA | 	rdbyte	arg04, fp
31a80     0C 4E 85 F1 | 	sub	fp, #12
31a84     1C 18 CE F7 | 	test	arg04, #28 wz
31a88     F0 01 90 AD |  if_e	jmp	#LR__4865
31a8c     10 4E 05 F1 | 	add	fp, #16
31a90     A7 26 0A FB | 	rdlong	local01, fp wz
31a94     10 4E 85 F1 | 	sub	fp, #16
31a98     48 00 90 AD |  if_e	jmp	#LR__4862
31a9c     10 4E 05 F1 | 	add	fp, #16
31aa0     A7 18 02 FB | 	rdlong	arg04, fp
31aa4     10 4E 85 F1 | 	sub	fp, #16
31aa8     04 18 0E F2 | 	cmp	arg04, #4 wz
31aac     1C 00 90 5D |  if_ne	jmp	#LR__4861
31ab0     14 4E 05 F1 | 	add	fp, #20
31ab4     A7 12 02 F6 | 	mov	arg01, fp
31ab8     14 4E 85 F1 | 	sub	fp, #20
31abc     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
31ac0     10 4E 05 F1 | 	add	fp, #16
31ac4     A7 FA 61 FC | 	wrlong	result1, fp
31ac8     10 4E 85 F1 | 	sub	fp, #16
31acc                 | LR__4861
31acc     0C 4E 05 F1 | 	add	fp, #12
31ad0     A7 26 C2 FA | 	rdbyte	local01, fp
31ad4     08 26 46 F5 | 	or	local01, #8
31ad8     A7 26 42 FC | 	wrbyte	local01, fp
31adc     0C 4E 85 F1 | 	sub	fp, #12
31ae0     3C 00 90 FD | 	jmp	#LR__4864
31ae4                 | LR__4862
31ae4     1A 4E 05 F1 | 	add	fp, #26
31ae8     A7 26 C2 FA | 	rdbyte	local01, fp
31aec     1A 4E 85 F1 | 	sub	fp, #26
31af0     11 26 CE F7 | 	test	local01, #17 wz
31af4     10 4E 05 51 |  if_ne	add	fp, #16
31af8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31afc     10 4E 85 51 |  if_ne	sub	fp, #16
31b00     1C 00 90 5D |  if_ne	jmp	#LR__4863
31b04     0C 4E 05 F1 | 	add	fp, #12
31b08     A7 26 C2 FA | 	rdbyte	local01, fp
31b0c     0C 4E 85 F1 | 	sub	fp, #12
31b10     04 26 CE F7 | 	test	local01, #4 wz
31b14     10 4E 05 51 |  if_ne	add	fp, #16
31b18     A7 10 68 5C |  if_ne	wrlong	#8, fp
31b1c     10 4E 85 51 |  if_ne	sub	fp, #16
31b20                 | LR__4863
31b20                 | LR__4864
31b20     10 4E 05 F1 | 	add	fp, #16
31b24     A7 26 0A FB | 	rdlong	local01, fp wz
31b28     10 4E 85 F1 | 	sub	fp, #16
31b2c     A8 01 90 5D |  if_ne	jmp	#LR__4868
31b30     0C 4E 05 F1 | 	add	fp, #12
31b34     A7 26 C2 FA | 	rdbyte	local01, fp
31b38     0C 4E 85 F1 | 	sub	fp, #12
31b3c     08 26 CE F7 | 	test	local01, #8 wz
31b40     94 01 90 AD |  if_e	jmp	#LR__4868
31b44     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
31b48     54 4E 05 F1 | 	add	fp, #84
31b4c     A7 FA 61 FC | 	wrlong	result1, fp
31b50     24 4E 85 F1 | 	sub	fp, #36
31b54     A7 12 02 FB | 	rdlong	arg01, fp
31b58     0E 12 06 F1 | 	add	arg01, #14
31b5c     09 FB 61 FC | 	wrlong	result1, arg01
31b60     A7 12 02 FB | 	rdlong	arg01, fp
31b64     16 12 06 F1 | 	add	arg01, #22
31b68     24 4E 05 F1 | 	add	fp, #36
31b6c     A7 14 02 FB | 	rdlong	arg02, fp
31b70     09 15 62 FC | 	wrlong	arg02, arg01
31b74     10 4E 85 F1 | 	sub	fp, #16
31b78     A7 12 02 FB | 	rdlong	arg01, fp
31b7c     14 4E 85 F1 | 	sub	fp, #20
31b80     A7 14 02 FB | 	rdlong	arg02, fp
31b84     30 4E 85 F1 | 	sub	fp, #48
31b88     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
31b8c     48 4E 05 F1 | 	add	fp, #72
31b90     A7 FA 61 FC | 	wrlong	result1, fp
31b94     18 4E 85 F1 | 	sub	fp, #24
31b98     A7 26 02 FB | 	rdlong	local01, fp
31b9c     0B 26 06 F1 | 	add	local01, #11
31ba0     13 41 48 FC | 	wrbyte	#32, local01
31ba4     14 4E 05 F1 | 	add	fp, #20
31ba8     A7 12 02 FB | 	rdlong	arg01, fp
31bac     14 4E 85 F1 | 	sub	fp, #20
31bb0     A7 14 02 FB | 	rdlong	arg02, fp
31bb4     30 4E 85 F1 | 	sub	fp, #48
31bb8     00 16 06 F6 | 	mov	arg03, #0
31bbc     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
31bc0     30 4E 05 F1 | 	add	fp, #48
31bc4     A7 12 02 FB | 	rdlong	arg01, fp
31bc8     1C 12 06 F1 | 	add	arg01, #28
31bcc     09 01 68 FC | 	wrlong	#0, arg01
31bd0     14 4E 05 F1 | 	add	fp, #20
31bd4     A7 26 02 FB | 	rdlong	local01, fp
31bd8     03 26 06 F1 | 	add	local01, #3
31bdc     13 03 48 FC | 	wrbyte	#1, local01
31be0     04 4E 05 F1 | 	add	fp, #4
31be4     A7 26 0A FB | 	rdlong	local01, fp wz
31be8     48 4E 85 F1 | 	sub	fp, #72
31bec     E8 00 90 AD |  if_e	jmp	#LR__4868
31bf0     44 4E 05 F1 | 	add	fp, #68
31bf4     A7 26 02 FB | 	rdlong	local01, fp
31bf8     30 26 06 F1 | 	add	local01, #48
31bfc     13 27 02 FB | 	rdlong	local01, local01
31c00     14 4E 05 F1 | 	add	fp, #20
31c04     A7 26 62 FC | 	wrlong	local01, fp
31c08     44 4E 85 F1 | 	sub	fp, #68
31c0c     A7 12 02 F6 | 	mov	arg01, fp
31c10     34 4E 05 F1 | 	add	fp, #52
31c14     A7 14 02 FB | 	rdlong	arg02, fp
31c18     48 4E 85 F1 | 	sub	fp, #72
31c1c     00 16 06 F6 | 	mov	arg03, #0
31c20     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
31c24     10 4E 05 F1 | 	add	fp, #16
31c28     A7 FA 61 FC | 	wrlong	result1, fp
31c2c     10 4E 85 F1 | 	sub	fp, #16
31c30     00 FA 0D F2 | 	cmp	result1, #0 wz
31c34     A0 00 90 5D |  if_ne	jmp	#LR__4868
31c38     44 4E 05 F1 | 	add	fp, #68
31c3c     A7 12 02 FB | 	rdlong	arg01, fp
31c40     14 4E 05 F1 | 	add	fp, #20
31c44     A7 14 02 FB | 	rdlong	arg02, fp
31c48     58 4E 85 F1 | 	sub	fp, #88
31c4c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
31c50     10 4E 05 F1 | 	add	fp, #16
31c54     A7 FA 61 FC | 	wrlong	result1, fp
31c58     34 4E 05 F1 | 	add	fp, #52
31c5c     A7 18 02 FB | 	rdlong	arg04, fp
31c60     04 4E 05 F1 | 	add	fp, #4
31c64     A7 26 02 FB | 	rdlong	local01, fp
31c68     48 4E 85 F1 | 	sub	fp, #72
31c6c     01 26 86 F1 | 	sub	local01, #1
31c70     10 18 06 F1 | 	add	arg04, #16
31c74     0C 27 62 FC | 	wrlong	local01, arg04
31c78     5C 00 90 FD | 	jmp	#LR__4868
31c7c                 | LR__4865
31c7c     10 4E 05 F1 | 	add	fp, #16
31c80     A7 18 0A FB | 	rdlong	arg04, fp wz
31c84     10 4E 85 F1 | 	sub	fp, #16
31c88     4C 00 90 5D |  if_ne	jmp	#LR__4867
31c8c     1A 4E 05 F1 | 	add	fp, #26
31c90     A7 18 C2 FA | 	rdbyte	arg04, fp
31c94     1A 4E 85 F1 | 	sub	fp, #26
31c98     10 18 CE F7 | 	test	arg04, #16 wz
31c9c     10 4E 05 51 |  if_ne	add	fp, #16
31ca0     A7 08 68 5C |  if_ne	wrlong	#4, fp
31ca4     10 4E 85 51 |  if_ne	sub	fp, #16
31ca8     2C 00 90 5D |  if_ne	jmp	#LR__4866
31cac     0C 4E 05 F1 | 	add	fp, #12
31cb0     A7 18 C2 FA | 	rdbyte	arg04, fp
31cb4     0C 4E 85 F1 | 	sub	fp, #12
31cb8     02 18 CE F7 | 	test	arg04, #2 wz
31cbc     1A 4E 05 51 |  if_ne	add	fp, #26
31cc0     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
31cc4     1A 4E 85 51 |  if_ne	sub	fp, #26
31cc8     01 26 CE 57 |  if_ne	test	local01, #1 wz
31ccc     10 4E 05 51 |  if_ne	add	fp, #16
31cd0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31cd4     10 4E 85 51 |  if_ne	sub	fp, #16
31cd8                 | LR__4866
31cd8                 | LR__4867
31cd8                 | LR__4868
31cd8     10 4E 05 F1 | 	add	fp, #16
31cdc     A7 26 0A FB | 	rdlong	local01, fp wz
31ce0     10 4E 85 F1 | 	sub	fp, #16
31ce4     60 00 90 5D |  if_ne	jmp	#LR__4869
31ce8     0C 4E 05 F1 | 	add	fp, #12
31cec     A7 28 C2 FA | 	rdbyte	local02, fp
31cf0     0C 4E 85 F1 | 	sub	fp, #12
31cf4     08 28 CE F7 | 	test	local02, #8 wz
31cf8     0C 4E 05 51 |  if_ne	add	fp, #12
31cfc     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
31d00     40 28 46 55 |  if_ne	or	local02, #64
31d04     A7 28 42 5C |  if_ne	wrbyte	local02, fp
31d08     0C 4E 85 51 |  if_ne	sub	fp, #12
31d0c     04 4E 05 F1 | 	add	fp, #4
31d10     A7 28 02 FB | 	rdlong	local02, fp
31d14     40 4E 05 F1 | 	add	fp, #64
31d18     A7 26 02 FB | 	rdlong	local01, fp
31d1c     30 26 06 F1 | 	add	local01, #48
31d20     13 27 02 FB | 	rdlong	local01, local01
31d24     20 28 06 F1 | 	add	local02, #32
31d28     14 27 62 FC | 	wrlong	local01, local02
31d2c     40 4E 85 F1 | 	sub	fp, #64
31d30     A7 28 02 FB | 	rdlong	local02, fp
31d34     2C 4E 05 F1 | 	add	fp, #44
31d38     A7 26 02 FB | 	rdlong	local01, fp
31d3c     30 4E 85 F1 | 	sub	fp, #48
31d40     24 28 06 F1 | 	add	local02, #36
31d44     14 27 62 FC | 	wrlong	local01, local02
31d48                 | LR__4869
31d48     10 4E 05 F1 | 	add	fp, #16
31d4c     A7 28 0A FB | 	rdlong	local02, fp wz
31d50     10 4E 85 F1 | 	sub	fp, #16
31d54     F4 02 90 5D |  if_ne	jmp	#LR__4875
31d58     04 4E 05 F1 | 	add	fp, #4
31d5c     A7 28 02 FB | 	rdlong	local02, fp
31d60     40 4E 05 F1 | 	add	fp, #64
31d64     A7 12 02 FB | 	rdlong	arg01, fp
31d68     14 4E 85 F1 | 	sub	fp, #20
31d6c     A7 14 02 FB | 	rdlong	arg02, fp
31d70     30 4E 85 F1 | 	sub	fp, #48
31d74     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
31d78     08 28 06 F1 | 	add	local02, #8
31d7c     14 FB 61 FC | 	wrlong	result1, local02
31d80     04 4E 05 F1 | 	add	fp, #4
31d84     A7 28 02 FB | 	rdlong	local02, fp
31d88     2C 4E 05 F1 | 	add	fp, #44
31d8c     A7 12 02 FB | 	rdlong	arg01, fp
31d90     1C 12 06 F1 | 	add	arg01, #28
31d94                 | ' {
31d94                 | ' 
31d94                 | ' 	return *((DWORD*)ptr);
31d94     09 FB 01 FB | 	rdlong	result1, arg01
31d98     0C 28 06 F1 | 	add	local02, #12
31d9c     14 FB 61 FC | 	wrlong	result1, local02
31da0     2C 4E 85 F1 | 	sub	fp, #44
31da4     A7 28 02 FB | 	rdlong	local02, fp
31da8     40 4E 05 F1 | 	add	fp, #64
31dac     A7 26 02 FB | 	rdlong	local01, fp
31db0     14 27 62 FC | 	wrlong	local01, local02
31db4     40 4E 85 F1 | 	sub	fp, #64
31db8     A7 28 02 FB | 	rdlong	local02, fp
31dbc     40 4E 05 F1 | 	add	fp, #64
31dc0     A7 26 02 FB | 	rdlong	local01, fp
31dc4     06 26 06 F1 | 	add	local01, #6
31dc8     13 27 E2 FA | 	rdword	local01, local01
31dcc     04 28 06 F1 | 	add	local02, #4
31dd0     14 27 52 FC | 	wrword	local01, local02
31dd4     40 4E 85 F1 | 	sub	fp, #64
31dd8     A7 28 02 FB | 	rdlong	local02, fp
31ddc     08 4E 05 F1 | 	add	fp, #8
31de0     A7 26 C2 FA | 	rdbyte	local01, fp
31de4     10 28 06 F1 | 	add	local02, #16
31de8     14 27 42 FC | 	wrbyte	local01, local02
31dec     08 4E 85 F1 | 	sub	fp, #8
31df0     A7 28 02 FB | 	rdlong	local02, fp
31df4     11 28 06 F1 | 	add	local02, #17
31df8     14 01 48 FC | 	wrbyte	#0, local02
31dfc     A7 28 02 FB | 	rdlong	local02, fp
31e00     1C 28 06 F1 | 	add	local02, #28
31e04     14 01 68 FC | 	wrlong	#0, local02
31e08     A7 28 02 FB | 	rdlong	local02, fp
31e0c     14 28 06 F1 | 	add	local02, #20
31e10     14 01 68 FC | 	wrlong	#0, local02
31e14     A7 12 02 FB | 	rdlong	arg01, fp
31e18     04 4E 85 F1 | 	sub	fp, #4
31e1c     28 12 06 F1 | 	add	arg01, #40
31e20     00 14 06 F6 | 	mov	arg02, #0
31e24     09 16 C6 F9 | 	decod	arg03, #9
31e28     98 00 A0 FD | 	call	#\builtin_bytefill_
31e2c     0C 4E 05 F1 | 	add	fp, #12
31e30     A7 28 C2 FA | 	rdbyte	local02, fp
31e34     0C 4E 85 F1 | 	sub	fp, #12
31e38     20 28 CE F7 | 	test	local02, #32 wz
31e3c     0C 02 90 AD |  if_e	jmp	#LR__4874
31e40     04 4E 05 F1 | 	add	fp, #4
31e44     A7 26 02 FB | 	rdlong	local01, fp
31e48     04 4E 85 F1 | 	sub	fp, #4
31e4c     0C 26 06 F1 | 	add	local01, #12
31e50     13 29 02 FB | 	rdlong	local02, local01
31e54     01 28 16 F2 | 	cmp	local02, #1 wc
31e58     F0 01 90 CD |  if_b	jmp	#LR__4874
31e5c     04 4E 05 F1 | 	add	fp, #4
31e60     A7 26 02 FB | 	rdlong	local01, fp
31e64     13 29 02 F6 | 	mov	local02, local01
31e68     0C 26 06 F1 | 	add	local01, #12
31e6c     13 27 02 FB | 	rdlong	local01, local01
31e70     14 28 06 F1 | 	add	local02, #20
31e74     14 27 62 FC | 	wrlong	local01, local02
31e78     40 4E 05 F1 | 	add	fp, #64
31e7c     A7 28 02 FB | 	rdlong	local02, fp
31e80     0A 28 06 F1 | 	add	local02, #10
31e84     14 29 E2 FA | 	rdword	local02, local02
31e88     09 28 66 F0 | 	shl	local02, #9
31e8c     08 4E 05 F1 | 	add	fp, #8
31e90     A7 28 62 FC | 	wrlong	local02, fp
31e94     48 4E 85 F1 | 	sub	fp, #72
31e98     A7 28 02 FB | 	rdlong	local02, fp
31e9c     08 28 06 F1 | 	add	local02, #8
31ea0     14 27 02 FB | 	rdlong	local01, local02
31ea4     4C 4E 05 F1 | 	add	fp, #76
31ea8     A7 26 62 FC | 	wrlong	local01, fp
31eac                 | ' 				fp->fptr = fp->obj.objsize;
31eac                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
31eac                 | ' 				clst = fp->obj.sclust;
31eac                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
31eac     4C 4E 85 F1 | 	sub	fp, #76
31eb0     A7 28 02 FB | 	rdlong	local02, fp
31eb4     0C 28 06 F1 | 	add	local02, #12
31eb8     14 27 02 FB | 	rdlong	local01, local02
31ebc     58 4E 05 F1 | 	add	fp, #88
31ec0     A7 26 62 FC | 	wrlong	local01, fp
31ec4     5C 4E 85 F1 | 	sub	fp, #92
31ec8                 | LR__4870
31ec8     10 4E 05 F1 | 	add	fp, #16
31ecc     A7 28 0A FB | 	rdlong	local02, fp wz
31ed0     10 4E 85 F1 | 	sub	fp, #16
31ed4     94 00 90 5D |  if_ne	jmp	#LR__4871
31ed8     5C 4E 05 F1 | 	add	fp, #92
31edc     A7 28 02 FB | 	rdlong	local02, fp
31ee0     10 4E 85 F1 | 	sub	fp, #16
31ee4     A7 26 02 FB | 	rdlong	local01, fp
31ee8     4C 4E 85 F1 | 	sub	fp, #76
31eec     13 29 1A F2 | 	cmp	local02, local01 wcz
31ef0     78 00 90 ED |  if_be	jmp	#LR__4871
31ef4     04 4E 05 F1 | 	add	fp, #4
31ef8     A7 12 02 FB | 	rdlong	arg01, fp
31efc     4C 4E 05 F1 | 	add	fp, #76
31f00     A7 14 02 FB | 	rdlong	arg02, fp
31f04     50 4E 85 F1 | 	sub	fp, #80
31f08     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
31f0c     50 4E 05 F1 | 	add	fp, #80
31f10     A7 FA 61 FC | 	wrlong	result1, fp
31f14     50 4E 85 F1 | 	sub	fp, #80
31f18     02 FA 15 F2 | 	cmp	result1, #2 wc
31f1c     10 4E 05 C1 |  if_b	add	fp, #16
31f20     A7 04 68 CC |  if_b	wrlong	#2, fp
31f24     10 4E 85 C1 |  if_b	sub	fp, #16
31f28     50 4E 05 F1 | 	add	fp, #80
31f2c     A7 28 02 FB | 	rdlong	local02, fp
31f30     50 4E 85 F1 | 	sub	fp, #80
31f34     FF FF 7F FF 
31f38     FF 29 0E F2 | 	cmp	local02, ##-1 wz
31f3c     10 4E 05 A1 |  if_e	add	fp, #16
31f40     A7 02 68 AC |  if_e	wrlong	#1, fp
31f44     10 4E 85 A1 |  if_e	sub	fp, #16
31f48     5C 4E 05 F1 | 	add	fp, #92
31f4c     A7 28 02 FB | 	rdlong	local02, fp
31f50     10 4E 85 F1 | 	sub	fp, #16
31f54     A7 26 02 FB | 	rdlong	local01, fp
31f58     13 29 82 F1 | 	sub	local02, local01
31f5c     10 4E 05 F1 | 	add	fp, #16
31f60     A7 28 62 FC | 	wrlong	local02, fp
31f64     5C 4E 85 F1 | 	sub	fp, #92
31f68     5C FF 9F FD | 	jmp	#LR__4870
31f6c                 | LR__4871
31f6c     04 4E 05 F1 | 	add	fp, #4
31f70     A7 28 02 FB | 	rdlong	local02, fp
31f74     4C 4E 05 F1 | 	add	fp, #76
31f78     A7 26 02 FB | 	rdlong	local01, fp
31f7c     18 28 06 F1 | 	add	local02, #24
31f80     14 27 62 FC | 	wrlong	local01, local02
31f84     40 4E 85 F1 | 	sub	fp, #64
31f88     A7 28 0A FB | 	rdlong	local02, fp wz
31f8c     10 4E 85 F1 | 	sub	fp, #16
31f90     B8 00 90 5D |  if_ne	jmp	#LR__4873
31f94     5C 4E 05 F1 | 	add	fp, #92
31f98     A7 26 02 FB | 	rdlong	local01, fp
31f9c     5C 4E 85 F1 | 	sub	fp, #92
31fa0     FF 27 CE F7 | 	test	local01, #511 wz
31fa4     A4 00 90 AD |  if_e	jmp	#LR__4873
31fa8     44 4E 05 F1 | 	add	fp, #68
31fac     A7 12 02 FB | 	rdlong	arg01, fp
31fb0     0C 4E 05 F1 | 	add	fp, #12
31fb4     A7 14 02 FB | 	rdlong	arg02, fp
31fb8     50 4E 85 F1 | 	sub	fp, #80
31fbc     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
31fc0     58 4E 05 F1 | 	add	fp, #88
31fc4     A7 FA 61 FC | 	wrlong	result1, fp
31fc8     00 FA 4D F2 | 	cmps	result1, #0 wz
31fcc     58 4E 85 F1 | 	sub	fp, #88
31fd0     10 4E 05 A1 |  if_e	add	fp, #16
31fd4     A7 04 68 AC |  if_e	wrlong	#2, fp
31fd8     10 4E 85 A1 |  if_e	sub	fp, #16
31fdc     6C 00 90 AD |  if_e	jmp	#LR__4872
31fe0     04 4E 05 F1 | 	add	fp, #4
31fe4     A7 28 02 FB | 	rdlong	local02, fp
31fe8     54 4E 05 F1 | 	add	fp, #84
31fec     A7 26 02 FB | 	rdlong	local01, fp
31ff0     04 4E 05 F1 | 	add	fp, #4
31ff4     A7 18 02 FB | 	rdlong	arg04, fp
31ff8     09 18 46 F0 | 	shr	arg04, #9
31ffc     0C 27 02 F1 | 	add	local01, arg04
32000     1C 28 06 F1 | 	add	local02, #28
32004     14 27 62 FC | 	wrlong	local01, local02
32008     18 4E 85 F1 | 	sub	fp, #24
3200c     A7 28 02 FB | 	rdlong	local02, fp
32010     01 28 06 F1 | 	add	local02, #1
32014     14 13 C2 FA | 	rdbyte	arg01, local02
32018     40 4E 85 F1 | 	sub	fp, #64
3201c     A7 28 02 FB | 	rdlong	local02, fp
32020     14 15 02 F6 | 	mov	arg02, local02
32024     28 14 06 F1 | 	add	arg02, #40
32028     04 4E 85 F1 | 	sub	fp, #4
3202c     1C 28 06 F1 | 	add	local02, #28
32030     14 17 02 FB | 	rdlong	arg03, local02
32034     01 18 06 F6 | 	mov	arg04, #1
32038     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
3203c     00 FA 0D F2 | 	cmp	result1, #0 wz
32040     10 4E 05 51 |  if_ne	add	fp, #16
32044     A7 02 68 5C |  if_ne	wrlong	#1, fp
32048     10 4E 85 51 |  if_ne	sub	fp, #16
3204c                 | LR__4872
3204c                 | LR__4873
3204c                 | LR__4874
3204c                 | LR__4875
3204c                 | LR__4876
3204c     10 4E 05 F1 | 	add	fp, #16
32050     A7 28 0A FB | 	rdlong	local02, fp wz
32054     10 4E 85 F1 | 	sub	fp, #16
32058     04 4E 05 51 |  if_ne	add	fp, #4
3205c     A7 28 02 5B |  if_ne	rdlong	local02, fp
32060     04 4E 85 51 |  if_ne	sub	fp, #4
32064     14 01 68 5C |  if_ne	wrlong	#0, local02
32068                 | ' 
32068                 | ' 	return res ;
32068     10 4E 05 F1 | 	add	fp, #16
3206c     A7 FA 01 FB | 	rdlong	result1, fp
32070     10 4E 85 F1 | 	sub	fp, #16
32074                 | LR__4877
32074     A7 F0 03 F6 | 	mov	ptra, fp
32078     B2 00 A0 FD | 	call	#popregs_
3207c                 | _fatfs_cc_f_open_ret
3207c     2D 00 64 FD | 	ret
32080                 | 
32080                 | _fatfs_cc_f_read
32080     0E 4A 05 F6 | 	mov	COUNT_, #14
32084     A8 00 A0 FD | 	call	#pushregs_
32088     38 F0 07 F1 | 	add	ptra, #56
3208c     04 4E 05 F1 | 	add	fp, #4
32090     A7 12 62 FC | 	wrlong	arg01, fp
32094     04 4E 05 F1 | 	add	fp, #4
32098     A7 14 62 FC | 	wrlong	arg02, fp
3209c     04 4E 05 F1 | 	add	fp, #4
320a0     A7 16 62 FC | 	wrlong	arg03, fp
320a4     04 4E 05 F1 | 	add	fp, #4
320a8     A7 18 62 FC | 	wrlong	arg04, fp
320ac     08 4E 85 F1 | 	sub	fp, #8
320b0     A7 FA 01 FB | 	rdlong	result1, fp
320b4     2C 4E 05 F1 | 	add	fp, #44
320b8     A7 FA 61 FC | 	wrlong	result1, fp
320bc     24 4E 85 F1 | 	sub	fp, #36
320c0     A7 FA 01 FB | 	rdlong	result1, fp
320c4     FD 00 68 FC | 	wrlong	#0, result1
320c8     0C 4E 85 F1 | 	sub	fp, #12
320cc     A7 12 02 FB | 	rdlong	arg01, fp
320d0     14 4E 05 F1 | 	add	fp, #20
320d4     A7 14 02 F6 | 	mov	arg02, fp
320d8     18 4E 85 F1 | 	sub	fp, #24
320dc     24 F7 BF FD | 	call	#_fatfs_cc_validate
320e0     14 4E 05 F1 | 	add	fp, #20
320e4     A7 FA 61 FC | 	wrlong	result1, fp
320e8     00 FA 4D F2 | 	cmps	result1, #0 wz
320ec     14 4E 85 F1 | 	sub	fp, #20
320f0     20 00 90 5D |  if_ne	jmp	#LR__4880
320f4     04 4E 05 F1 | 	add	fp, #4
320f8     A7 14 02 FB | 	rdlong	arg02, fp
320fc     11 14 06 F1 | 	add	arg02, #17
32100     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32104     10 4E 05 F1 | 	add	fp, #16
32108     A7 14 62 FC | 	wrlong	arg02, fp
3210c     14 4E 85 F1 | 	sub	fp, #20
32110     10 00 90 AD |  if_e	jmp	#LR__4881
32114                 | LR__4880
32114     14 4E 05 F1 | 	add	fp, #20
32118     A7 FA 01 FB | 	rdlong	result1, fp
3211c     14 4E 85 F1 | 	sub	fp, #20
32120     EC 05 90 FD | 	jmp	#LR__4900
32124                 | LR__4881
32124     04 4E 05 F1 | 	add	fp, #4
32128     A7 18 02 FB | 	rdlong	arg04, fp
3212c     04 4E 85 F1 | 	sub	fp, #4
32130     10 18 06 F1 | 	add	arg04, #16
32134     0C 19 C2 FA | 	rdbyte	arg04, arg04
32138     01 18 CE F7 | 	test	arg04, #1 wz
3213c     07 FA 05 A6 |  if_e	mov	result1, #7
32140     CC 05 90 AD |  if_e	jmp	#LR__4900
32144     04 4E 05 F1 | 	add	fp, #4
32148     A7 26 02 FB | 	rdlong	local01, fp
3214c     13 29 02 F6 | 	mov	local02, local01
32150     0C 28 06 F1 | 	add	local02, #12
32154     14 2B 02 FB | 	rdlong	local03, local02
32158     14 26 06 F1 | 	add	local01, #20
3215c     13 27 02 FB | 	rdlong	local01, local01
32160     13 2B 82 F1 | 	sub	local03, local01
32164     20 4E 05 F1 | 	add	fp, #32
32168     A7 2A 62 FC | 	wrlong	local03, fp
3216c     18 4E 85 F1 | 	sub	fp, #24
32170     A7 2C 02 FB | 	rdlong	local04, fp
32174     0C 4E 85 F1 | 	sub	fp, #12
32178     15 2D 1A F2 | 	cmp	local04, local03 wcz
3217c     24 4E 05 11 |  if_a	add	fp, #36
32180     A7 2C 02 1B |  if_a	rdlong	local04, fp
32184     18 4E 85 11 |  if_a	sub	fp, #24
32188     A7 2C 62 1C |  if_a	wrlong	local04, fp
3218c     0C 4E 85 11 |  if_a	sub	fp, #12
32190                 | ' 
32190                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
32190                 | LR__4882
32190     0C 4E 05 F1 | 	add	fp, #12
32194     A7 28 02 FB | 	rdlong	local02, fp
32198     0C 4E 85 F1 | 	sub	fp, #12
3219c     14 2D 02 F6 | 	mov	local04, local02
321a0     01 2C 16 F2 | 	cmp	local04, #1 wc
321a4     64 05 90 CD |  if_b	jmp	#LR__4899
321a8     04 4E 05 F1 | 	add	fp, #4
321ac     A7 2A 02 FB | 	rdlong	local03, fp
321b0     04 4E 85 F1 | 	sub	fp, #4
321b4     14 2A 06 F1 | 	add	local03, #20
321b8     15 2B 02 FB | 	rdlong	local03, local03
321bc     FF 2B CE F7 | 	test	local03, #511 wz
321c0     3C 04 90 5D |  if_ne	jmp	#LR__4897
321c4     04 4E 05 F1 | 	add	fp, #4
321c8     A7 26 02 FB | 	rdlong	local01, fp
321cc     14 26 06 F1 | 	add	local01, #20
321d0     13 2B 02 FB | 	rdlong	local03, local01
321d4     09 2A 46 F0 | 	shr	local03, #9
321d8     14 4E 05 F1 | 	add	fp, #20
321dc     A7 2E 02 FB | 	rdlong	local05, fp
321e0     17 31 02 F6 | 	mov	local06, local05
321e4     0A 30 06 F1 | 	add	local06, #10
321e8     18 33 E2 FA | 	rdword	local07, local06
321ec     0A 30 86 F1 | 	sub	local06, #10
321f0     19 35 32 F9 | 	getword	local08, local07, #0
321f4     01 34 86 F1 | 	sub	local08, #1
321f8     1A 2B 0A F5 | 	and	local03, local08 wz
321fc     18 4E 05 F1 | 	add	fp, #24
32200     A7 2A 62 FC | 	wrlong	local03, fp
32204     30 4E 85 F1 | 	sub	fp, #48
32208     E0 00 90 5D |  if_ne	jmp	#LR__4887
3220c     04 4E 05 F1 | 	add	fp, #4
32210     A7 2A 02 FB | 	rdlong	local03, fp
32214     04 4E 85 F1 | 	sub	fp, #4
32218     14 2A 06 F1 | 	add	local03, #20
3221c     15 2B 0A FB | 	rdlong	local03, local03 wz
32220     20 00 90 5D |  if_ne	jmp	#LR__4883
32224     04 4E 05 F1 | 	add	fp, #4
32228     A7 2A 02 FB | 	rdlong	local03, fp
3222c     08 2A 06 F1 | 	add	local03, #8
32230     15 2B 02 FB | 	rdlong	local03, local03
32234     18 4E 05 F1 | 	add	fp, #24
32238     A7 2A 62 FC | 	wrlong	local03, fp
3223c     1C 4E 85 F1 | 	sub	fp, #28
32240     28 00 90 FD | 	jmp	#LR__4884
32244                 | LR__4883
32244     04 4E 05 F1 | 	add	fp, #4
32248     A7 34 02 FB | 	rdlong	local08, fp
3224c     1A 13 02 F6 | 	mov	arg01, local08
32250     04 4E 85 F1 | 	sub	fp, #4
32254     18 34 06 F1 | 	add	local08, #24
32258     1A 15 02 FB | 	rdlong	arg02, local08
3225c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
32260     1C 4E 05 F1 | 	add	fp, #28
32264     A7 FA 61 FC | 	wrlong	result1, fp
32268     1C 4E 85 F1 | 	sub	fp, #28
3226c                 | LR__4884
3226c     1C 4E 05 F1 | 	add	fp, #28
32270     A7 2A 02 FB | 	rdlong	local03, fp
32274     1C 4E 85 F1 | 	sub	fp, #28
32278     02 2A 16 F2 | 	cmp	local03, #2 wc
3227c     1C 00 90 3D |  if_ae	jmp	#LR__4885
32280     04 4E 05 F1 | 	add	fp, #4
32284     A7 2A 02 FB | 	rdlong	local03, fp
32288     04 4E 85 F1 | 	sub	fp, #4
3228c     11 2A 06 F1 | 	add	local03, #17
32290     15 05 48 FC | 	wrbyte	#2, local03
32294     02 FA 05 F6 | 	mov	result1, #2
32298     74 04 90 FD | 	jmp	#LR__4900
3229c                 | LR__4885
3229c     1C 4E 05 F1 | 	add	fp, #28
322a0     A7 2A 02 FB | 	rdlong	local03, fp
322a4     1C 4E 85 F1 | 	sub	fp, #28
322a8     FF FF 7F FF 
322ac     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
322b0     1C 00 90 5D |  if_ne	jmp	#LR__4886
322b4     04 4E 05 F1 | 	add	fp, #4
322b8     A7 2A 02 FB | 	rdlong	local03, fp
322bc     04 4E 85 F1 | 	sub	fp, #4
322c0     11 2A 06 F1 | 	add	local03, #17
322c4     15 03 48 FC | 	wrbyte	#1, local03
322c8     01 FA 05 F6 | 	mov	result1, #1
322cc     40 04 90 FD | 	jmp	#LR__4900
322d0                 | LR__4886
322d0     04 4E 05 F1 | 	add	fp, #4
322d4     A7 2A 02 FB | 	rdlong	local03, fp
322d8     18 4E 05 F1 | 	add	fp, #24
322dc     A7 34 02 FB | 	rdlong	local08, fp
322e0     1C 4E 85 F1 | 	sub	fp, #28
322e4     18 2A 06 F1 | 	add	local03, #24
322e8     15 35 62 FC | 	wrlong	local08, local03
322ec                 | LR__4887
322ec     18 4E 05 F1 | 	add	fp, #24
322f0     A7 12 02 FB | 	rdlong	arg01, fp
322f4     14 4E 85 F1 | 	sub	fp, #20
322f8     A7 2A 02 FB | 	rdlong	local03, fp
322fc     04 4E 85 F1 | 	sub	fp, #4
32300     18 2A 06 F1 | 	add	local03, #24
32304     15 15 02 FB | 	rdlong	arg02, local03
32308     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
3230c     20 4E 05 F1 | 	add	fp, #32
32310     A7 FA 61 FC | 	wrlong	result1, fp
32314     20 4E 85 F1 | 	sub	fp, #32
32318     00 FA 0D F2 | 	cmp	result1, #0 wz
3231c     1C 00 90 5D |  if_ne	jmp	#LR__4888
32320     04 4E 05 F1 | 	add	fp, #4
32324     A7 2A 02 FB | 	rdlong	local03, fp
32328     04 4E 85 F1 | 	sub	fp, #4
3232c     11 2A 06 F1 | 	add	local03, #17
32330     15 05 48 FC | 	wrbyte	#2, local03
32334     02 FA 05 F6 | 	mov	result1, #2
32338     D4 03 90 FD | 	jmp	#LR__4900
3233c                 | LR__4888
3233c     20 4E 05 F1 | 	add	fp, #32
32340     A7 2A 02 FB | 	rdlong	local03, fp
32344     10 4E 05 F1 | 	add	fp, #16
32348     A7 34 02 FB | 	rdlong	local08, fp
3234c     1A 2B 02 F1 | 	add	local03, local08
32350     10 4E 85 F1 | 	sub	fp, #16
32354     A7 2A 62 FC | 	wrlong	local03, fp
32358     14 4E 85 F1 | 	sub	fp, #20
3235c     A7 2A 02 FB | 	rdlong	local03, fp
32360     09 2A 46 F0 | 	shr	local03, #9
32364     20 4E 05 F1 | 	add	fp, #32
32368     A7 2A 62 FC | 	wrlong	local03, fp
3236c     2C 4E 85 F1 | 	sub	fp, #44
32370     01 2A 16 F2 | 	cmp	local03, #1 wc
32374     5C 01 90 CD |  if_b	jmp	#LR__4892
32378     30 4E 05 F1 | 	add	fp, #48
3237c     A7 2A 02 FB | 	rdlong	local03, fp
32380     04 4E 85 F1 | 	sub	fp, #4
32384     A7 34 02 FB | 	rdlong	local08, fp
32388     1A 2B 02 F1 | 	add	local03, local08
3238c     14 4E 85 F1 | 	sub	fp, #20
32390     A7 34 02 FB | 	rdlong	local08, fp
32394     18 4E 85 F1 | 	sub	fp, #24
32398     0A 34 06 F1 | 	add	local08, #10
3239c     1A 35 E2 FA | 	rdword	local08, local08
323a0     1A 2B 1A F2 | 	cmp	local03, local08 wcz
323a4     28 00 90 ED |  if_be	jmp	#LR__4889
323a8     18 4E 05 F1 | 	add	fp, #24
323ac     A7 26 02 FB | 	rdlong	local01, fp
323b0     0A 26 06 F1 | 	add	local01, #10
323b4     13 2B E2 FA | 	rdword	local03, local01
323b8     18 4E 05 F1 | 	add	fp, #24
323bc     A7 34 02 FB | 	rdlong	local08, fp
323c0     1A 2B 82 F1 | 	sub	local03, local08
323c4     04 4E 85 F1 | 	sub	fp, #4
323c8     A7 2A 62 FC | 	wrlong	local03, fp
323cc     2C 4E 85 F1 | 	sub	fp, #44
323d0                 | LR__4889
323d0     18 4E 05 F1 | 	add	fp, #24
323d4     A7 26 02 FB | 	rdlong	local01, fp
323d8     01 26 06 F1 | 	add	local01, #1
323dc     13 13 C2 FA | 	rdbyte	arg01, local01
323e0     1C 4E 05 F1 | 	add	fp, #28
323e4     A7 14 02 FB | 	rdlong	arg02, fp
323e8     14 4E 85 F1 | 	sub	fp, #20
323ec     A7 16 02 FB | 	rdlong	arg03, fp
323f0     0C 4E 05 F1 | 	add	fp, #12
323f4     A7 18 02 FB | 	rdlong	arg04, fp
323f8     2C 4E 85 F1 | 	sub	fp, #44
323fc     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
32400     00 FA 0D F2 | 	cmp	result1, #0 wz
32404     1C 00 90 AD |  if_e	jmp	#LR__4890
32408     04 4E 05 F1 | 	add	fp, #4
3240c     A7 2A 02 FB | 	rdlong	local03, fp
32410     04 4E 85 F1 | 	sub	fp, #4
32414     11 2A 06 F1 | 	add	local03, #17
32418     15 03 48 FC | 	wrbyte	#1, local03
3241c     01 FA 05 F6 | 	mov	result1, #1
32420     EC 02 90 FD | 	jmp	#LR__4900
32424                 | LR__4890
32424     04 4E 05 F1 | 	add	fp, #4
32428     A7 26 02 FB | 	rdlong	local01, fp
3242c     04 4E 85 F1 | 	sub	fp, #4
32430     10 26 06 F1 | 	add	local01, #16
32434     13 2B C2 FA | 	rdbyte	local03, local01
32438     80 2A CE F7 | 	test	local03, #128 wz
3243c     78 00 90 AD |  if_e	jmp	#LR__4891
32440     04 4E 05 F1 | 	add	fp, #4
32444     A7 34 02 FB | 	rdlong	local08, fp
32448     1C 34 06 F1 | 	add	local08, #28
3244c     1A 35 02 FB | 	rdlong	local08, local08
32450     1C 4E 05 F1 | 	add	fp, #28
32454     A7 36 02 FB | 	rdlong	local09, fp
32458     1B 35 82 F1 | 	sub	local08, local09
3245c     0C 4E 05 F1 | 	add	fp, #12
32460     A7 38 02 FB | 	rdlong	local10, fp
32464     2C 4E 85 F1 | 	sub	fp, #44
32468     1C 3B 02 F6 | 	mov	local11, local10
3246c     1D 35 12 F2 | 	cmp	local08, local11 wc
32470     44 00 90 3D |  if_ae	jmp	#LR__4891
32474     34 4E 05 F1 | 	add	fp, #52
32478     A7 12 02 FB | 	rdlong	arg01, fp
3247c     30 4E 85 F1 | 	sub	fp, #48
32480     A7 14 02 FB | 	rdlong	arg02, fp
32484     0A 3B 02 F6 | 	mov	local11, arg02
32488     1C 3A 06 F1 | 	add	local11, #28
3248c     1D 37 02 FB | 	rdlong	local09, local11
32490     1C 4E 05 F1 | 	add	fp, #28
32494     A7 2E 02 FB | 	rdlong	local05, fp
32498     17 37 82 F1 | 	sub	local09, local05
3249c     09 36 66 F0 | 	shl	local09, #9
324a0     1B 3B 02 F6 | 	mov	local11, local09
324a4     1B 13 02 F1 | 	add	arg01, local09
324a8     20 4E 85 F1 | 	sub	fp, #32
324ac     28 14 06 F1 | 	add	arg02, #40
324b0     09 16 C6 F9 | 	decod	arg03, #9
324b4     60 43 BF FD | 	call	#__system____builtin_memmove
324b8                 | LR__4891
324b8     2C 4E 05 F1 | 	add	fp, #44
324bc     A7 2A 02 FB | 	rdlong	local03, fp
324c0     09 2A 66 F0 | 	shl	local03, #9
324c4     04 4E 85 F1 | 	sub	fp, #4
324c8     A7 2A 62 FC | 	wrlong	local03, fp
324cc     28 4E 85 F1 | 	sub	fp, #40
324d0                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
324d0                 | ' 				}
324d0                 | ' 
324d0                 | ' 
324d0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
324d0                 | ' 				continue;
324d0     B4 01 90 FD | 	jmp	#LR__4898
324d4                 | LR__4892
324d4     04 4E 05 F1 | 	add	fp, #4
324d8     A7 2A 02 FB | 	rdlong	local03, fp
324dc     1C 2A 06 F1 | 	add	local03, #28
324e0     15 2B 02 FB | 	rdlong	local03, local03
324e4     1C 4E 05 F1 | 	add	fp, #28
324e8     A7 26 02 FB | 	rdlong	local01, fp
324ec     20 4E 85 F1 | 	sub	fp, #32
324f0     13 2B 0A F2 | 	cmp	local03, local01 wz
324f4     EC 00 90 AD |  if_e	jmp	#LR__4896
324f8     04 4E 05 F1 | 	add	fp, #4
324fc     A7 26 02 FB | 	rdlong	local01, fp
32500     04 4E 85 F1 | 	sub	fp, #4
32504     10 26 06 F1 | 	add	local01, #16
32508     13 2B C2 FA | 	rdbyte	local03, local01
3250c     80 2A CE F7 | 	test	local03, #128 wz
32510     7C 00 90 AD |  if_e	jmp	#LR__4894
32514     18 4E 05 F1 | 	add	fp, #24
32518     A7 26 02 FB | 	rdlong	local01, fp
3251c     01 26 06 F1 | 	add	local01, #1
32520     13 13 C2 FA | 	rdbyte	arg01, local01
32524     14 4E 85 F1 | 	sub	fp, #20
32528     A7 2A 02 FB | 	rdlong	local03, fp
3252c     15 15 02 F6 | 	mov	arg02, local03
32530     28 14 06 F1 | 	add	arg02, #40
32534     04 4E 85 F1 | 	sub	fp, #4
32538     1C 2A 06 F1 | 	add	local03, #28
3253c     15 17 02 FB | 	rdlong	arg03, local03
32540     01 18 06 F6 | 	mov	arg04, #1
32544     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
32548     00 FA 0D F2 | 	cmp	result1, #0 wz
3254c     1C 00 90 AD |  if_e	jmp	#LR__4893
32550     04 4E 05 F1 | 	add	fp, #4
32554     A7 2A 02 FB | 	rdlong	local03, fp
32558     04 4E 85 F1 | 	sub	fp, #4
3255c     11 2A 06 F1 | 	add	local03, #17
32560     15 03 48 FC | 	wrbyte	#1, local03
32564     01 FA 05 F6 | 	mov	result1, #1
32568     A4 01 90 FD | 	jmp	#LR__4900
3256c                 | LR__4893
3256c     04 4E 05 F1 | 	add	fp, #4
32570     A7 3A 02 FB | 	rdlong	local11, fp
32574     1D 2B 02 F6 | 	mov	local03, local11
32578     04 4E 85 F1 | 	sub	fp, #4
3257c     10 3A 06 F1 | 	add	local11, #16
32580     1D 3B C2 FA | 	rdbyte	local11, local11
32584     7F 3A 06 F5 | 	and	local11, #127
32588     10 2A 06 F1 | 	add	local03, #16
3258c     15 3B 42 FC | 	wrbyte	local11, local03
32590                 | LR__4894
32590     18 4E 05 F1 | 	add	fp, #24
32594     A7 26 02 FB | 	rdlong	local01, fp
32598     01 26 06 F1 | 	add	local01, #1
3259c     13 13 C2 FA | 	rdbyte	arg01, local01
325a0     14 4E 85 F1 | 	sub	fp, #20
325a4     A7 14 02 FB | 	rdlong	arg02, fp
325a8     28 14 06 F1 | 	add	arg02, #40
325ac     1C 4E 05 F1 | 	add	fp, #28
325b0     A7 16 02 FB | 	rdlong	arg03, fp
325b4     20 4E 85 F1 | 	sub	fp, #32
325b8     01 18 06 F6 | 	mov	arg04, #1
325bc     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
325c0     00 FA 0D F2 | 	cmp	result1, #0 wz
325c4     1C 00 90 AD |  if_e	jmp	#LR__4895
325c8     04 4E 05 F1 | 	add	fp, #4
325cc     A7 2A 02 FB | 	rdlong	local03, fp
325d0     04 4E 85 F1 | 	sub	fp, #4
325d4     11 2A 06 F1 | 	add	local03, #17
325d8     15 03 48 FC | 	wrbyte	#1, local03
325dc     01 FA 05 F6 | 	mov	result1, #1
325e0     2C 01 90 FD | 	jmp	#LR__4900
325e4                 | LR__4895
325e4                 | LR__4896
325e4     04 4E 05 F1 | 	add	fp, #4
325e8     A7 2A 02 FB | 	rdlong	local03, fp
325ec     1C 4E 05 F1 | 	add	fp, #28
325f0     A7 3A 02 FB | 	rdlong	local11, fp
325f4     20 4E 85 F1 | 	sub	fp, #32
325f8     1C 2A 06 F1 | 	add	local03, #28
325fc     15 3B 62 FC | 	wrlong	local11, local03
32600                 | LR__4897
32600     04 4E 05 F1 | 	add	fp, #4
32604     A7 26 02 FB | 	rdlong	local01, fp
32608     14 26 06 F1 | 	add	local01, #20
3260c     13 3B 02 FB | 	rdlong	local11, local01
32610     FF 3B 06 F5 | 	and	local11, #511
32614     09 2A C6 F9 | 	decod	local03, #9
32618     1D 2B 82 F1 | 	sub	local03, local11
3261c     24 4E 05 F1 | 	add	fp, #36
32620     A7 2A 62 FC | 	wrlong	local03, fp
32624     1C 4E 85 F1 | 	sub	fp, #28
32628     A7 3A 02 FB | 	rdlong	local11, fp
3262c     0C 4E 85 F1 | 	sub	fp, #12
32630     1D 2B 1A F2 | 	cmp	local03, local11 wcz
32634     0C 4E 05 11 |  if_a	add	fp, #12
32638     A7 2A 02 1B |  if_a	rdlong	local03, fp
3263c     1C 4E 05 11 |  if_a	add	fp, #28
32640     A7 2A 62 1C |  if_a	wrlong	local03, fp
32644     28 4E 85 11 |  if_a	sub	fp, #40
32648     34 4E 05 F1 | 	add	fp, #52
3264c     A7 12 02 FB | 	rdlong	arg01, fp
32650     30 4E 85 F1 | 	sub	fp, #48
32654     A7 30 02 FB | 	rdlong	local06, fp
32658     18 15 02 F6 | 	mov	arg02, local06
3265c     28 14 06 F1 | 	add	arg02, #40
32660     14 30 06 F1 | 	add	local06, #20
32664     18 3B 02 FB | 	rdlong	local11, local06
32668     1D 37 02 F6 | 	mov	local09, local11
3266c     1B 39 02 F6 | 	mov	local10, local09
32670     FF 39 06 F5 | 	and	local10, #511
32674     1C 15 02 F1 | 	add	arg02, local10
32678     24 4E 05 F1 | 	add	fp, #36
3267c     A7 16 02 FB | 	rdlong	arg03, fp
32680     28 4E 85 F1 | 	sub	fp, #40
32684     90 41 BF FD | 	call	#__system____builtin_memmove
32688                 | LR__4898
32688     0C 4E 05 F1 | 	add	fp, #12
3268c     A7 2A 02 FB | 	rdlong	local03, fp
32690     1C 4E 05 F1 | 	add	fp, #28
32694     A7 34 02 FB | 	rdlong	local08, fp
32698     1A 2B 82 F1 | 	sub	local03, local08
3269c     1C 4E 85 F1 | 	sub	fp, #28
326a0     A7 2A 62 FC | 	wrlong	local03, fp
326a4     04 4E 05 F1 | 	add	fp, #4
326a8     A7 26 02 FB | 	rdlong	local01, fp
326ac     13 33 02 FB | 	rdlong	local07, local01
326b0     18 4E 05 F1 | 	add	fp, #24
326b4     A7 34 02 FB | 	rdlong	local08, fp
326b8     1A 33 02 F1 | 	add	local07, local08
326bc     13 33 62 FC | 	wrlong	local07, local01
326c0     0C 4E 05 F1 | 	add	fp, #12
326c4     A7 2A 02 FB | 	rdlong	local03, fp
326c8     0C 4E 85 F1 | 	sub	fp, #12
326cc     A7 3C 02 FB | 	rdlong	local12, fp
326d0     1E 2B 02 F1 | 	add	local03, local12
326d4     0C 4E 05 F1 | 	add	fp, #12
326d8     A7 2A 62 FC | 	wrlong	local03, fp
326dc     30 4E 85 F1 | 	sub	fp, #48
326e0     A7 3E 02 FB | 	rdlong	local13, fp
326e4     1F 2B 02 F6 | 	mov	local03, local13
326e8     14 3E 06 F1 | 	add	local13, #20
326ec     1F 41 02 FB | 	rdlong	local14, local13
326f0     24 4E 05 F1 | 	add	fp, #36
326f4     A7 30 02 FB | 	rdlong	local06, fp
326f8     28 4E 85 F1 | 	sub	fp, #40
326fc     18 41 02 F1 | 	add	local14, local06
32700     14 2A 06 F1 | 	add	local03, #20
32704     15 41 62 FC | 	wrlong	local14, local03
32708     84 FA 9F FD | 	jmp	#LR__4882
3270c                 | LR__4899
3270c                 | ' 
3270c                 | ' 
3270c                 | ' 
3270c                 | ' 
3270c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
3270c                 | ' 
3270c                 | ' 	}
3270c                 | ' 
3270c                 | ' 	return FR_OK ;
3270c     00 FA 05 F6 | 	mov	result1, #0
32710                 | LR__4900
32710     A7 F0 03 F6 | 	mov	ptra, fp
32714     B2 00 A0 FD | 	call	#popregs_
32718                 | _fatfs_cc_f_read_ret
32718     2D 00 64 FD | 	ret
3271c                 | 
3271c                 | _fatfs_cc_f_write
3271c     15 4A 05 F6 | 	mov	COUNT_, #21
32720     A8 00 A0 FD | 	call	#pushregs_
32724     34 F0 07 F1 | 	add	ptra, #52
32728     04 4E 05 F1 | 	add	fp, #4
3272c     A7 12 62 FC | 	wrlong	arg01, fp
32730     04 4E 05 F1 | 	add	fp, #4
32734     A7 14 62 FC | 	wrlong	arg02, fp
32738     04 4E 05 F1 | 	add	fp, #4
3273c     A7 16 62 FC | 	wrlong	arg03, fp
32740     04 4E 05 F1 | 	add	fp, #4
32744     A7 18 62 FC | 	wrlong	arg04, fp
32748     08 4E 85 F1 | 	sub	fp, #8
3274c     A7 FA 01 FB | 	rdlong	result1, fp
32750     28 4E 05 F1 | 	add	fp, #40
32754     A7 FA 61 FC | 	wrlong	result1, fp
32758     20 4E 85 F1 | 	sub	fp, #32
3275c     A7 FA 01 FB | 	rdlong	result1, fp
32760     FD 00 68 FC | 	wrlong	#0, result1
32764     0C 4E 85 F1 | 	sub	fp, #12
32768     A7 12 02 FB | 	rdlong	arg01, fp
3276c     14 4E 05 F1 | 	add	fp, #20
32770     A7 14 02 F6 | 	mov	arg02, fp
32774     18 4E 85 F1 | 	sub	fp, #24
32778     88 F0 BF FD | 	call	#_fatfs_cc_validate
3277c     14 4E 05 F1 | 	add	fp, #20
32780     A7 FA 61 FC | 	wrlong	result1, fp
32784     00 FA 4D F2 | 	cmps	result1, #0 wz
32788     14 4E 85 F1 | 	sub	fp, #20
3278c     20 00 90 5D |  if_ne	jmp	#LR__4910
32790     04 4E 05 F1 | 	add	fp, #4
32794     A7 14 02 FB | 	rdlong	arg02, fp
32798     11 14 06 F1 | 	add	arg02, #17
3279c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
327a0     10 4E 05 F1 | 	add	fp, #16
327a4     A7 14 62 FC | 	wrlong	arg02, fp
327a8     14 4E 85 F1 | 	sub	fp, #20
327ac     10 00 90 AD |  if_e	jmp	#LR__4911
327b0                 | LR__4910
327b0     14 4E 05 F1 | 	add	fp, #20
327b4     A7 FA 01 FB | 	rdlong	result1, fp
327b8     14 4E 85 F1 | 	sub	fp, #20
327bc     44 07 90 FD | 	jmp	#LR__4933
327c0                 | LR__4911
327c0     04 4E 05 F1 | 	add	fp, #4
327c4     A7 14 02 FB | 	rdlong	arg02, fp
327c8     04 4E 85 F1 | 	sub	fp, #4
327cc     10 14 06 F1 | 	add	arg02, #16
327d0     0A 15 C2 FA | 	rdbyte	arg02, arg02
327d4     02 14 CE F7 | 	test	arg02, #2 wz
327d8     07 FA 05 A6 |  if_e	mov	result1, #7
327dc     24 07 90 AD |  if_e	jmp	#LR__4933
327e0     04 4E 05 F1 | 	add	fp, #4
327e4     A7 14 02 FB | 	rdlong	arg02, fp
327e8     0A 13 02 F6 | 	mov	arg01, arg02
327ec     14 12 06 F1 | 	add	arg01, #20
327f0     09 13 02 FB | 	rdlong	arg01, arg01
327f4     08 4E 05 F1 | 	add	fp, #8
327f8     A7 FA 01 FB | 	rdlong	result1, fp
327fc     FD 12 02 F1 | 	add	arg01, result1
32800     0C 4E 85 F1 | 	sub	fp, #12
32804     14 14 06 F1 | 	add	arg02, #20
32808     0A FB 01 FB | 	rdlong	result1, arg02
3280c     FD 12 12 F2 | 	cmp	arg01, result1 wc
32810     24 00 90 3D |  if_ae	jmp	#LR__4912
32814     04 4E 05 F1 | 	add	fp, #4
32818     A7 14 02 FB | 	rdlong	arg02, fp
3281c     01 FA 65 F6 | 	neg	result1, #1
32820     14 14 06 F1 | 	add	arg02, #20
32824     0A 15 02 FB | 	rdlong	arg02, arg02
32828     0A FB 81 F1 | 	sub	result1, arg02
3282c     08 4E 05 F1 | 	add	fp, #8
32830     A7 FA 61 FC | 	wrlong	result1, fp
32834     0C 4E 85 F1 | 	sub	fp, #12
32838                 | LR__4912
32838                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
32838                 | ' 	}
32838                 | ' 
32838                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
32838                 | LR__4913
32838     0C 4E 05 F1 | 	add	fp, #12
3283c     A7 FA 01 FB | 	rdlong	result1, fp
32840     0C 4E 85 F1 | 	sub	fp, #12
32844     01 FA 15 F2 | 	cmp	result1, #1 wc
32848     90 06 90 CD |  if_b	jmp	#LR__4932
3284c     04 4E 05 F1 | 	add	fp, #4
32850     A7 FA 01 FB | 	rdlong	result1, fp
32854     04 4E 85 F1 | 	sub	fp, #4
32858     14 FA 05 F1 | 	add	result1, #20
3285c     FD FA 01 FB | 	rdlong	result1, result1
32860     FF FB CD F7 | 	test	result1, #511 wz
32864     D8 04 90 5D |  if_ne	jmp	#LR__4928
32868     04 4E 05 F1 | 	add	fp, #4
3286c     A7 FA 01 FB | 	rdlong	result1, fp
32870     14 FA 05 F1 | 	add	result1, #20
32874     FD FA 01 FB | 	rdlong	result1, result1
32878     09 FA 45 F0 | 	shr	result1, #9
3287c     14 4E 05 F1 | 	add	fp, #20
32880     A7 14 02 FB | 	rdlong	arg02, fp
32884     0A 14 06 F1 | 	add	arg02, #10
32888     0A 19 E2 FA | 	rdword	arg04, arg02
3288c     0C 15 32 F9 | 	getword	arg02, arg04, #0
32890     01 14 86 F1 | 	sub	arg02, #1
32894     0A FB 09 F5 | 	and	result1, arg02 wz
32898     14 4E 05 F1 | 	add	fp, #20
3289c     A7 FA 61 FC | 	wrlong	result1, fp
328a0     2C 4E 85 F1 | 	sub	fp, #44
328a4     44 01 90 5D |  if_ne	jmp	#LR__4919
328a8     04 4E 05 F1 | 	add	fp, #4
328ac     A7 FA 01 FB | 	rdlong	result1, fp
328b0     04 4E 85 F1 | 	sub	fp, #4
328b4     14 FA 05 F1 | 	add	result1, #20
328b8     FD 14 0A FB | 	rdlong	arg02, result1 wz
328bc     44 00 90 5D |  if_ne	jmp	#LR__4914
328c0     04 4E 05 F1 | 	add	fp, #4
328c4     A7 14 02 FB | 	rdlong	arg02, fp
328c8     08 14 06 F1 | 	add	arg02, #8
328cc     0A 15 0A FB | 	rdlong	arg02, arg02 wz
328d0     18 4E 05 F1 | 	add	fp, #24
328d4     A7 14 62 FC | 	wrlong	arg02, fp
328d8     1C 4E 85 F1 | 	sub	fp, #28
328dc     4C 00 90 5D |  if_ne	jmp	#LR__4915
328e0     04 4E 05 F1 | 	add	fp, #4
328e4     A7 12 02 FB | 	rdlong	arg01, fp
328e8     04 4E 85 F1 | 	sub	fp, #4
328ec     00 14 06 F6 | 	mov	arg02, #0
328f0     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
328f4     1C 4E 05 F1 | 	add	fp, #28
328f8     A7 FA 61 FC | 	wrlong	result1, fp
328fc     1C 4E 85 F1 | 	sub	fp, #28
32900     28 00 90 FD | 	jmp	#LR__4915
32904                 | LR__4914
32904     04 4E 05 F1 | 	add	fp, #4
32908     A7 18 02 FB | 	rdlong	arg04, fp
3290c     0C 13 02 F6 | 	mov	arg01, arg04
32910     04 4E 85 F1 | 	sub	fp, #4
32914     18 18 06 F1 | 	add	arg04, #24
32918     0C 15 02 FB | 	rdlong	arg02, arg04
3291c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
32920     1C 4E 05 F1 | 	add	fp, #28
32924     A7 FA 61 FC | 	wrlong	result1, fp
32928     1C 4E 85 F1 | 	sub	fp, #28
3292c                 | LR__4915
3292c     1C 4E 05 F1 | 	add	fp, #28
32930     A7 FA 09 FB | 	rdlong	result1, fp wz
32934     1C 4E 85 F1 | 	sub	fp, #28
32938     A0 05 90 AD |  if_e	jmp	#LR__4932
3293c     1C 4E 05 F1 | 	add	fp, #28
32940     A7 FA 01 FB | 	rdlong	result1, fp
32944     1C 4E 85 F1 | 	sub	fp, #28
32948     01 FA 0D F2 | 	cmp	result1, #1 wz
3294c     1C 00 90 5D |  if_ne	jmp	#LR__4916
32950     04 4E 05 F1 | 	add	fp, #4
32954     A7 FA 01 FB | 	rdlong	result1, fp
32958     04 4E 85 F1 | 	sub	fp, #4
3295c     11 FA 05 F1 | 	add	result1, #17
32960     FD 04 48 FC | 	wrbyte	#2, result1
32964     02 FA 05 F6 | 	mov	result1, #2
32968     98 05 90 FD | 	jmp	#LR__4933
3296c                 | LR__4916
3296c     1C 4E 05 F1 | 	add	fp, #28
32970     A7 FA 01 FB | 	rdlong	result1, fp
32974     1C 4E 85 F1 | 	sub	fp, #28
32978     FF FF 7F FF 
3297c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
32980     1C 00 90 5D |  if_ne	jmp	#LR__4917
32984     04 4E 05 F1 | 	add	fp, #4
32988     A7 FA 01 FB | 	rdlong	result1, fp
3298c     04 4E 85 F1 | 	sub	fp, #4
32990     11 FA 05 F1 | 	add	result1, #17
32994     FD 02 48 FC | 	wrbyte	#1, result1
32998     01 FA 05 F6 | 	mov	result1, #1
3299c     64 05 90 FD | 	jmp	#LR__4933
329a0                 | LR__4917
329a0     04 4E 05 F1 | 	add	fp, #4
329a4     A7 FA 01 FB | 	rdlong	result1, fp
329a8     18 4E 05 F1 | 	add	fp, #24
329ac     A7 18 02 FB | 	rdlong	arg04, fp
329b0     18 FA 05 F1 | 	add	result1, #24
329b4     FD 18 62 FC | 	wrlong	arg04, result1
329b8     18 4E 85 F1 | 	sub	fp, #24
329bc     A7 FA 01 FB | 	rdlong	result1, fp
329c0     04 4E 85 F1 | 	sub	fp, #4
329c4     08 FA 05 F1 | 	add	result1, #8
329c8     FD FA 09 FB | 	rdlong	result1, result1 wz
329cc     1C 00 90 5D |  if_ne	jmp	#LR__4918
329d0     04 4E 05 F1 | 	add	fp, #4
329d4     A7 18 02 FB | 	rdlong	arg04, fp
329d8     18 4E 05 F1 | 	add	fp, #24
329dc     A7 FA 01 FB | 	rdlong	result1, fp
329e0     1C 4E 85 F1 | 	sub	fp, #28
329e4     08 18 06 F1 | 	add	arg04, #8
329e8     0C FB 61 FC | 	wrlong	result1, arg04
329ec                 | LR__4918
329ec                 | LR__4919
329ec     04 4E 05 F1 | 	add	fp, #4
329f0     A7 18 02 FB | 	rdlong	arg04, fp
329f4     04 4E 85 F1 | 	sub	fp, #4
329f8     10 18 06 F1 | 	add	arg04, #16
329fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
32a00     80 18 CE F7 | 	test	arg04, #128 wz
32a04     7C 00 90 AD |  if_e	jmp	#LR__4921
32a08     18 4E 05 F1 | 	add	fp, #24
32a0c     A7 18 02 FB | 	rdlong	arg04, fp
32a10     01 18 06 F1 | 	add	arg04, #1
32a14     0C 13 C2 FA | 	rdbyte	arg01, arg04
32a18     14 4E 85 F1 | 	sub	fp, #20
32a1c     A7 18 02 FB | 	rdlong	arg04, fp
32a20     0C 15 02 F6 | 	mov	arg02, arg04
32a24     28 14 06 F1 | 	add	arg02, #40
32a28     04 4E 85 F1 | 	sub	fp, #4
32a2c     1C 18 06 F1 | 	add	arg04, #28
32a30     0C 17 02 FB | 	rdlong	arg03, arg04
32a34     01 18 06 F6 | 	mov	arg04, #1
32a38     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
32a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
32a40     1C 00 90 AD |  if_e	jmp	#LR__4920
32a44     04 4E 05 F1 | 	add	fp, #4
32a48     A7 FA 01 FB | 	rdlong	result1, fp
32a4c     04 4E 85 F1 | 	sub	fp, #4
32a50     11 FA 05 F1 | 	add	result1, #17
32a54     FD 02 48 FC | 	wrbyte	#1, result1
32a58     01 FA 05 F6 | 	mov	result1, #1
32a5c     A4 04 90 FD | 	jmp	#LR__4933
32a60                 | LR__4920
32a60     04 4E 05 F1 | 	add	fp, #4
32a64     A7 18 02 FB | 	rdlong	arg04, fp
32a68     0C FB 01 F6 | 	mov	result1, arg04
32a6c     04 4E 85 F1 | 	sub	fp, #4
32a70     10 18 06 F1 | 	add	arg04, #16
32a74     0C 19 C2 FA | 	rdbyte	arg04, arg04
32a78     7F 18 06 F5 | 	and	arg04, #127
32a7c     10 FA 05 F1 | 	add	result1, #16
32a80     FD 18 42 FC | 	wrbyte	arg04, result1
32a84                 | LR__4921
32a84     18 4E 05 F1 | 	add	fp, #24
32a88     A7 12 02 FB | 	rdlong	arg01, fp
32a8c     14 4E 85 F1 | 	sub	fp, #20
32a90     A7 14 02 FB | 	rdlong	arg02, fp
32a94     04 4E 85 F1 | 	sub	fp, #4
32a98     18 14 06 F1 | 	add	arg02, #24
32a9c     0A 15 02 FB | 	rdlong	arg02, arg02
32aa0     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
32aa4     20 4E 05 F1 | 	add	fp, #32
32aa8     A7 FA 61 FC | 	wrlong	result1, fp
32aac     20 4E 85 F1 | 	sub	fp, #32
32ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
32ab4     1C 00 90 5D |  if_ne	jmp	#LR__4922
32ab8     04 4E 05 F1 | 	add	fp, #4
32abc     A7 FA 01 FB | 	rdlong	result1, fp
32ac0     04 4E 85 F1 | 	sub	fp, #4
32ac4     11 FA 05 F1 | 	add	result1, #17
32ac8     FD 04 48 FC | 	wrbyte	#2, result1
32acc     02 FA 05 F6 | 	mov	result1, #2
32ad0     30 04 90 FD | 	jmp	#LR__4933
32ad4                 | LR__4922
32ad4     20 4E 05 F1 | 	add	fp, #32
32ad8     A7 FA 01 FB | 	rdlong	result1, fp
32adc     0C 4E 05 F1 | 	add	fp, #12
32ae0     A7 26 02 FB | 	rdlong	local01, fp
32ae4     13 FB 01 F1 | 	add	result1, local01
32ae8     0C 4E 85 F1 | 	sub	fp, #12
32aec     A7 FA 61 FC | 	wrlong	result1, fp
32af0     14 4E 85 F1 | 	sub	fp, #20
32af4     A7 FA 01 FB | 	rdlong	result1, fp
32af8     09 FA 45 F0 | 	shr	result1, #9
32afc     1C 4E 05 F1 | 	add	fp, #28
32b00     A7 FA 61 FC | 	wrlong	result1, fp
32b04     28 4E 85 F1 | 	sub	fp, #40
32b08     01 FA 15 F2 | 	cmp	result1, #1 wc
32b0c     60 01 90 CD |  if_b	jmp	#LR__4926
32b10     2C 4E 05 F1 | 	add	fp, #44
32b14     A7 FA 01 FB | 	rdlong	result1, fp
32b18     04 4E 85 F1 | 	sub	fp, #4
32b1c     A7 18 02 FB | 	rdlong	arg04, fp
32b20     0C FB 01 F1 | 	add	result1, arg04
32b24     10 4E 85 F1 | 	sub	fp, #16
32b28     A7 18 02 FB | 	rdlong	arg04, fp
32b2c     18 4E 85 F1 | 	sub	fp, #24
32b30     0A 18 06 F1 | 	add	arg04, #10
32b34     0C 19 E2 FA | 	rdword	arg04, arg04
32b38     0C FB 19 F2 | 	cmp	result1, arg04 wcz
32b3c     28 00 90 ED |  if_be	jmp	#LR__4923
32b40     18 4E 05 F1 | 	add	fp, #24
32b44     A7 FA 01 FB | 	rdlong	result1, fp
32b48     0A FA 05 F1 | 	add	result1, #10
32b4c     FD FA E1 FA | 	rdword	result1, result1
32b50     14 4E 05 F1 | 	add	fp, #20
32b54     A7 18 02 FB | 	rdlong	arg04, fp
32b58     0C FB 81 F1 | 	sub	result1, arg04
32b5c     04 4E 85 F1 | 	sub	fp, #4
32b60     A7 FA 61 FC | 	wrlong	result1, fp
32b64     28 4E 85 F1 | 	sub	fp, #40
32b68                 | LR__4923
32b68     18 4E 05 F1 | 	add	fp, #24
32b6c     A7 18 02 FB | 	rdlong	arg04, fp
32b70     01 18 06 F1 | 	add	arg04, #1
32b74     0C 13 C2 FA | 	rdbyte	arg01, arg04
32b78     18 4E 05 F1 | 	add	fp, #24
32b7c     A7 14 02 FB | 	rdlong	arg02, fp
32b80     10 4E 85 F1 | 	sub	fp, #16
32b84     A7 16 02 FB | 	rdlong	arg03, fp
32b88     08 4E 05 F1 | 	add	fp, #8
32b8c     A7 18 02 FB | 	rdlong	arg04, fp
32b90     28 4E 85 F1 | 	sub	fp, #40
32b94     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
32b98     00 FA 0D F2 | 	cmp	result1, #0 wz
32b9c     1C 00 90 AD |  if_e	jmp	#LR__4924
32ba0     04 4E 05 F1 | 	add	fp, #4
32ba4     A7 26 02 FB | 	rdlong	local01, fp
32ba8     04 4E 85 F1 | 	sub	fp, #4
32bac     11 26 06 F1 | 	add	local01, #17
32bb0     13 03 48 FC | 	wrbyte	#1, local01
32bb4     01 FA 05 F6 | 	mov	result1, #1
32bb8     48 03 90 FD | 	jmp	#LR__4933
32bbc                 | LR__4924
32bbc     04 4E 05 F1 | 	add	fp, #4
32bc0     A7 FA 01 FB | 	rdlong	result1, fp
32bc4     1C FA 05 F1 | 	add	result1, #28
32bc8     FD FA 01 FB | 	rdlong	result1, result1
32bcc     1C 4E 05 F1 | 	add	fp, #28
32bd0     A7 28 02 FB | 	rdlong	local02, fp
32bd4     14 FB 81 F1 | 	sub	result1, local02
32bd8     08 4E 05 F1 | 	add	fp, #8
32bdc     A7 18 02 FB | 	rdlong	arg04, fp
32be0     28 4E 85 F1 | 	sub	fp, #40
32be4     0C FB 11 F2 | 	cmp	result1, arg04 wc
32be8     68 00 90 3D |  if_ae	jmp	#LR__4925
32bec     04 4E 05 F1 | 	add	fp, #4
32bf0     A7 12 02 FB | 	rdlong	arg01, fp
32bf4     28 12 06 F1 | 	add	arg01, #40
32bf8     2C 4E 05 F1 | 	add	fp, #44
32bfc     A7 14 02 FB | 	rdlong	arg02, fp
32c00     2C 4E 85 F1 | 	sub	fp, #44
32c04     A7 FA 01 FB | 	rdlong	result1, fp
32c08     1C FA 05 F1 | 	add	result1, #28
32c0c     FD 2A 02 FB | 	rdlong	local03, result1
32c10     1C 4E 05 F1 | 	add	fp, #28
32c14     A7 18 02 FB | 	rdlong	arg04, fp
32c18     20 4E 85 F1 | 	sub	fp, #32
32c1c     0C 2B 82 F1 | 	sub	local03, arg04
32c20     09 2A 66 F0 | 	shl	local03, #9
32c24     15 15 02 F1 | 	add	arg02, local03
32c28     09 16 C6 F9 | 	decod	arg03, #9
32c2c     E8 3B BF FD | 	call	#__system____builtin_memmove
32c30     04 4E 05 F1 | 	add	fp, #4
32c34     A7 18 02 FB | 	rdlong	arg04, fp
32c38     0C FB 01 F6 | 	mov	result1, arg04
32c3c     04 4E 85 F1 | 	sub	fp, #4
32c40     10 18 06 F1 | 	add	arg04, #16
32c44     0C 19 C2 FA | 	rdbyte	arg04, arg04
32c48     7F 18 06 F5 | 	and	arg04, #127
32c4c     10 FA 05 F1 | 	add	result1, #16
32c50     FD 18 42 FC | 	wrbyte	arg04, result1
32c54                 | LR__4925
32c54     28 4E 05 F1 | 	add	fp, #40
32c58     A7 FA 01 FB | 	rdlong	result1, fp
32c5c     09 FA 65 F0 | 	shl	result1, #9
32c60     04 4E 85 F1 | 	sub	fp, #4
32c64     A7 FA 61 FC | 	wrlong	result1, fp
32c68     24 4E 85 F1 | 	sub	fp, #36
32c6c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
32c6c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
32c6c                 | ' 				}
32c6c                 | ' 
32c6c                 | ' 
32c6c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
32c6c                 | ' 				continue;
32c6c     74 01 90 FD | 	jmp	#LR__4929
32c70                 | LR__4926
32c70     04 4E 05 F1 | 	add	fp, #4
32c74     A7 28 02 FB | 	rdlong	local02, fp
32c78     1C 28 06 F1 | 	add	local02, #28
32c7c     14 FB 01 FB | 	rdlong	result1, local02
32c80     1C 4E 05 F1 | 	add	fp, #28
32c84     A7 28 02 FB | 	rdlong	local02, fp
32c88     20 4E 85 F1 | 	sub	fp, #32
32c8c     14 FB 09 F2 | 	cmp	result1, local02 wz
32c90     90 00 90 AD |  if_e	jmp	#LR__4927
32c94     04 4E 05 F1 | 	add	fp, #4
32c98     A7 FA 01 FB | 	rdlong	result1, fp
32c9c     FD 2A 02 F6 | 	mov	local03, result1
32ca0     04 4E 85 F1 | 	sub	fp, #4
32ca4     14 2A 06 F1 | 	add	local03, #20
32ca8     15 2B 02 FB | 	rdlong	local03, local03
32cac     0C FA 05 F1 | 	add	result1, #12
32cb0     FD 2C 02 FB | 	rdlong	local04, result1
32cb4     16 2F 02 F6 | 	mov	local05, local04
32cb8     17 2B 12 F2 | 	cmp	local03, local05 wc
32cbc     64 00 90 3D |  if_ae	jmp	#LR__4927
32cc0     18 4E 05 F1 | 	add	fp, #24
32cc4     A7 18 02 FB | 	rdlong	arg04, fp
32cc8     01 18 06 F1 | 	add	arg04, #1
32ccc     0C 13 C2 FA | 	rdbyte	arg01, arg04
32cd0     14 4E 85 F1 | 	sub	fp, #20
32cd4     A7 30 02 FB | 	rdlong	local06, fp
32cd8     28 30 06 F1 | 	add	local06, #40
32cdc     18 33 02 F6 | 	mov	local07, local06
32ce0     1C 4E 05 F1 | 	add	fp, #28
32ce4     A7 34 02 FB | 	rdlong	local08, fp
32ce8     20 4E 85 F1 | 	sub	fp, #32
32cec     01 36 06 F6 | 	mov	local09, #1
32cf0     19 15 02 F6 | 	mov	arg02, local07
32cf4     1A 17 02 F6 | 	mov	arg03, local08
32cf8     01 18 06 F6 | 	mov	arg04, #1
32cfc     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
32d00     FD 38 0A F6 | 	mov	local10, result1 wz
32d04     1C 00 90 AD |  if_e	jmp	#LR__4927
32d08     04 4E 05 F1 | 	add	fp, #4
32d0c     A7 38 02 FB | 	rdlong	local10, fp
32d10     04 4E 85 F1 | 	sub	fp, #4
32d14     11 38 06 F1 | 	add	local10, #17
32d18     1C 03 48 FC | 	wrbyte	#1, local10
32d1c                 | ' 				fp->fptr < fp->obj.objsize &&
32d1c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
32d1c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
32d1c     01 FA 05 F6 | 	mov	result1, #1
32d20     E0 01 90 FD | 	jmp	#LR__4933
32d24                 | LR__4927
32d24     04 4E 05 F1 | 	add	fp, #4
32d28     A7 18 02 FB | 	rdlong	arg04, fp
32d2c     1C 4E 05 F1 | 	add	fp, #28
32d30     A7 FA 01 FB | 	rdlong	result1, fp
32d34     20 4E 85 F1 | 	sub	fp, #32
32d38     1C 18 06 F1 | 	add	arg04, #28
32d3c     0C FB 61 FC | 	wrlong	result1, arg04
32d40                 | LR__4928
32d40     04 4E 05 F1 | 	add	fp, #4
32d44     A7 FA 01 FB | 	rdlong	result1, fp
32d48     14 FA 05 F1 | 	add	result1, #20
32d4c     FD FA 01 FB | 	rdlong	result1, result1
32d50     FF FB 05 F5 | 	and	result1, #511
32d54     09 3A C6 F9 | 	decod	local11, #9
32d58     FD 3A 82 F1 | 	sub	local11, result1
32d5c     20 4E 05 F1 | 	add	fp, #32
32d60     A7 3A 62 FC | 	wrlong	local11, fp
32d64     18 4E 85 F1 | 	sub	fp, #24
32d68     A7 FA 01 FB | 	rdlong	result1, fp
32d6c     0C 4E 85 F1 | 	sub	fp, #12
32d70     FD 3A 1A F2 | 	cmp	local11, result1 wcz
32d74     0C 4E 05 11 |  if_a	add	fp, #12
32d78     A7 3A 02 1B |  if_a	rdlong	local11, fp
32d7c     18 4E 05 11 |  if_a	add	fp, #24
32d80     A7 3A 62 1C |  if_a	wrlong	local11, fp
32d84     24 4E 85 11 |  if_a	sub	fp, #36
32d88     04 4E 05 F1 | 	add	fp, #4
32d8c     A7 3A 02 FB | 	rdlong	local11, fp
32d90     1D 13 02 F6 | 	mov	arg01, local11
32d94     28 12 06 F1 | 	add	arg01, #40
32d98     14 3A 06 F1 | 	add	local11, #20
32d9c     1D 3B 02 FB | 	rdlong	local11, local11
32da0     FF 3B 06 F5 | 	and	local11, #511
32da4     1D 13 02 F1 | 	add	arg01, local11
32da8     2C 4E 05 F1 | 	add	fp, #44
32dac     A7 14 02 FB | 	rdlong	arg02, fp
32db0     0C 4E 85 F1 | 	sub	fp, #12
32db4     A7 16 02 FB | 	rdlong	arg03, fp
32db8     24 4E 85 F1 | 	sub	fp, #36
32dbc     58 3A BF FD | 	call	#__system____builtin_memmove
32dc0     04 4E 05 F1 | 	add	fp, #4
32dc4     A7 FA 01 FB | 	rdlong	result1, fp
32dc8     FD 3A 02 F6 | 	mov	local11, result1
32dcc     04 4E 85 F1 | 	sub	fp, #4
32dd0     10 FA 05 F1 | 	add	result1, #16
32dd4     FD FA C1 FA | 	rdbyte	result1, result1
32dd8     80 FA 45 F5 | 	or	result1, #128
32ddc     10 3A 06 F1 | 	add	local11, #16
32de0     1D FB 41 FC | 	wrbyte	result1, local11
32de4                 | LR__4929
32de4     0C 4E 05 F1 | 	add	fp, #12
32de8     A7 3A 02 FB | 	rdlong	local11, fp
32dec     18 4E 05 F1 | 	add	fp, #24
32df0     A7 FA 01 FB | 	rdlong	result1, fp
32df4     FD 3A 82 F1 | 	sub	local11, result1
32df8     18 4E 85 F1 | 	sub	fp, #24
32dfc     A7 3A 62 FC | 	wrlong	local11, fp
32e00     04 4E 05 F1 | 	add	fp, #4
32e04     A7 3C 02 FB | 	rdlong	local12, fp
32e08     1E 3B 02 FB | 	rdlong	local11, local12
32e0c     14 4E 05 F1 | 	add	fp, #20
32e10     A7 3E 02 FB | 	rdlong	local13, fp
32e14     1F 3B 02 F1 | 	add	local11, local13
32e18     1E 3B 62 FC | 	wrlong	local11, local12
32e1c     0C 4E 05 F1 | 	add	fp, #12
32e20     A7 3A 02 FB | 	rdlong	local11, fp
32e24     0C 4E 85 F1 | 	sub	fp, #12
32e28     A7 40 02 FB | 	rdlong	local14, fp
32e2c     20 3B 02 F1 | 	add	local11, local14
32e30     0C 4E 05 F1 | 	add	fp, #12
32e34     A7 3A 62 FC | 	wrlong	local11, fp
32e38     2C 4E 85 F1 | 	sub	fp, #44
32e3c     A7 42 02 FB | 	rdlong	local15, fp
32e40     21 3B 02 F6 | 	mov	local11, local15
32e44     14 42 06 F1 | 	add	local15, #20
32e48     21 43 02 FB | 	rdlong	local15, local15
32e4c     20 4E 05 F1 | 	add	fp, #32
32e50     A7 44 02 FB | 	rdlong	local16, fp
32e54     22 43 02 F1 | 	add	local15, local16
32e58     14 3A 06 F1 | 	add	local11, #20
32e5c     1D 43 62 FC | 	wrlong	local15, local11
32e60     20 4E 85 F1 | 	sub	fp, #32
32e64     A7 46 02 FB | 	rdlong	local17, fp
32e68     23 3B 02 F6 | 	mov	local11, local17
32e6c     23 49 02 F6 | 	mov	local18, local17
32e70     04 4E 85 F1 | 	sub	fp, #4
32e74     14 46 06 F1 | 	add	local17, #20
32e78     23 4B 02 FB | 	rdlong	local19, local17
32e7c     0C 48 06 F1 | 	add	local18, #12
32e80     24 4D 02 FB | 	rdlong	local20, local18
32e84     26 4B 1A F2 | 	cmp	local19, local20 wcz
32e88     24 00 90 ED |  if_be	jmp	#LR__4930
32e8c     04 4E 05 F1 | 	add	fp, #4
32e90     A7 2E 02 FB | 	rdlong	local05, fp
32e94     04 4E 85 F1 | 	sub	fp, #4
32e98     17 2B 02 F6 | 	mov	local03, local05
32e9c     14 2A 06 F1 | 	add	local03, #20
32ea0     15 2D 02 FB | 	rdlong	local04, local03
32ea4     14 2A 86 F1 | 	sub	local03, #20
32ea8     16 4F 02 F6 | 	mov	local21, local04
32eac     20 00 90 FD | 	jmp	#LR__4931
32eb0                 | LR__4930
32eb0     04 4E 05 F1 | 	add	fp, #4
32eb4     A7 32 02 FB | 	rdlong	local07, fp
32eb8     04 4E 85 F1 | 	sub	fp, #4
32ebc     19 39 02 F6 | 	mov	local10, local07
32ec0     0C 38 06 F1 | 	add	local10, #12
32ec4     1C 35 02 FB | 	rdlong	local08, local10
32ec8     0C 38 86 F1 | 	sub	local10, #12
32ecc     1A 4F 02 F6 | 	mov	local21, local08
32ed0                 | LR__4931
32ed0     0C 3A 06 F1 | 	add	local11, #12
32ed4     1D 4F 62 FC | 	wrlong	local21, local11
32ed8     5C F9 9F FD | 	jmp	#LR__4913
32edc                 | LR__4932
32edc     04 4E 05 F1 | 	add	fp, #4
32ee0     A7 3C 02 FB | 	rdlong	local12, fp
32ee4     1E 27 02 F6 | 	mov	local01, local12
32ee8     04 4E 85 F1 | 	sub	fp, #4
32eec     10 3C 06 F1 | 	add	local12, #16
32ef0     1E 3B C2 FA | 	rdbyte	local11, local12
32ef4     40 3A 46 F5 | 	or	local11, #64
32ef8     10 26 06 F1 | 	add	local01, #16
32efc     13 3B 42 FC | 	wrbyte	local11, local01
32f00                 | ' 
32f00                 | ' 
32f00                 | ' 
32f00                 | ' 
32f00                 | ' 
32f00                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
32f00                 | ' 		fp->flag |=  0x80 ;
32f00                 | ' 
32f00                 | ' 	}
32f00                 | ' 
32f00                 | ' 	fp->flag |=  0x40 ;
32f00                 | ' 
32f00                 | ' 	return FR_OK ;
32f00     00 FA 05 F6 | 	mov	result1, #0
32f04                 | LR__4933
32f04     A7 F0 03 F6 | 	mov	ptra, fp
32f08     B2 00 A0 FD | 	call	#popregs_
32f0c                 | _fatfs_cc_f_write_ret
32f0c     2D 00 64 FD | 	ret
32f10                 | 
32f10                 | _fatfs_cc_f_sync
32f10     00 4A 05 F6 | 	mov	COUNT_, #0
32f14     A8 00 A0 FD | 	call	#pushregs_
32f18     18 F0 07 F1 | 	add	ptra, #24
32f1c     04 4E 05 F1 | 	add	fp, #4
32f20     A7 12 62 FC | 	wrlong	arg01, fp
32f24     08 4E 05 F1 | 	add	fp, #8
32f28     A7 14 02 F6 | 	mov	arg02, fp
32f2c     0C 4E 85 F1 | 	sub	fp, #12
32f30     D0 E8 BF FD | 	call	#_fatfs_cc_validate
32f34     08 4E 05 F1 | 	add	fp, #8
32f38     A7 FA 61 FC | 	wrlong	result1, fp
32f3c     08 4E 85 F1 | 	sub	fp, #8
32f40     00 FA 0D F2 | 	cmp	result1, #0 wz
32f44     C0 01 90 5D |  if_ne	jmp	#LR__4943
32f48     04 4E 05 F1 | 	add	fp, #4
32f4c     A7 18 02 FB | 	rdlong	arg04, fp
32f50     04 4E 85 F1 | 	sub	fp, #4
32f54     10 18 06 F1 | 	add	arg04, #16
32f58     0C 19 C2 FA | 	rdbyte	arg04, arg04
32f5c     40 18 CE F7 | 	test	arg04, #64 wz
32f60     A4 01 90 AD |  if_e	jmp	#LR__4942
32f64     04 4E 05 F1 | 	add	fp, #4
32f68     A7 18 02 FB | 	rdlong	arg04, fp
32f6c     04 4E 85 F1 | 	sub	fp, #4
32f70     10 18 06 F1 | 	add	arg04, #16
32f74     0C 19 C2 FA | 	rdbyte	arg04, arg04
32f78     80 18 CE F7 | 	test	arg04, #128 wz
32f7c     64 00 90 AD |  if_e	jmp	#LR__4940
32f80     0C 4E 05 F1 | 	add	fp, #12
32f84     A7 18 02 FB | 	rdlong	arg04, fp
32f88     01 18 06 F1 | 	add	arg04, #1
32f8c     0C 13 C2 FA | 	rdbyte	arg01, arg04
32f90     08 4E 85 F1 | 	sub	fp, #8
32f94     A7 18 02 FB | 	rdlong	arg04, fp
32f98     0C 15 02 F6 | 	mov	arg02, arg04
32f9c     28 14 06 F1 | 	add	arg02, #40
32fa0     04 4E 85 F1 | 	sub	fp, #4
32fa4     1C 18 06 F1 | 	add	arg04, #28
32fa8     0C 17 02 FB | 	rdlong	arg03, arg04
32fac     01 18 06 F6 | 	mov	arg04, #1
32fb0     0C AE BF FD | 	call	#_fatfs_cc_disk_write
32fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
32fb8     01 FA 05 56 |  if_ne	mov	result1, #1
32fbc     54 01 90 5D |  if_ne	jmp	#LR__4944
32fc0     04 4E 05 F1 | 	add	fp, #4
32fc4     A7 18 02 FB | 	rdlong	arg04, fp
32fc8     0C 17 02 F6 | 	mov	arg03, arg04
32fcc     04 4E 85 F1 | 	sub	fp, #4
32fd0     10 18 06 F1 | 	add	arg04, #16
32fd4     0C 19 C2 FA | 	rdbyte	arg04, arg04
32fd8     7F 18 06 F5 | 	and	arg04, #127
32fdc     10 16 06 F1 | 	add	arg03, #16
32fe0     0B 19 42 FC | 	wrbyte	arg04, arg03
32fe4                 | LR__4940
32fe4     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
32fe8     10 4E 05 F1 | 	add	fp, #16
32fec     A7 FA 61 FC | 	wrlong	result1, fp
32ff0     04 4E 85 F1 | 	sub	fp, #4
32ff4     A7 12 02 FB | 	rdlong	arg01, fp
32ff8     08 4E 85 F1 | 	sub	fp, #8
32ffc     A7 18 02 FB | 	rdlong	arg04, fp
33000     04 4E 85 F1 | 	sub	fp, #4
33004     20 18 06 F1 | 	add	arg04, #32
33008     0C 15 02 FB | 	rdlong	arg02, arg04
3300c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
33010     08 4E 05 F1 | 	add	fp, #8
33014     A7 FA 61 FC | 	wrlong	result1, fp
33018     08 4E 85 F1 | 	sub	fp, #8
3301c     00 FA 0D F2 | 	cmp	result1, #0 wz
33020     E4 00 90 5D |  if_ne	jmp	#LR__4941
33024     04 4E 05 F1 | 	add	fp, #4
33028     A7 18 02 FB | 	rdlong	arg04, fp
3302c     24 18 06 F1 | 	add	arg04, #36
33030     0C 19 02 FB | 	rdlong	arg04, arg04
33034     10 4E 05 F1 | 	add	fp, #16
33038     A7 18 62 FC | 	wrlong	arg04, fp
3303c     0C 17 02 F6 | 	mov	arg03, arg04
33040     0B 16 06 F1 | 	add	arg03, #11
33044     0B 17 C2 FA | 	rdbyte	arg03, arg03
33048     20 16 46 F5 | 	or	arg03, #32
3304c     0B 18 06 F1 | 	add	arg04, #11
33050     0C 17 42 FC | 	wrbyte	arg03, arg04
33054     10 4E 85 F1 | 	sub	fp, #16
33058     A7 18 02 FB | 	rdlong	arg04, fp
3305c     0C 13 02 FB | 	rdlong	arg01, arg04
33060     10 4E 05 F1 | 	add	fp, #16
33064     A7 14 02 FB | 	rdlong	arg02, fp
33068     14 4E 85 F1 | 	sub	fp, #20
3306c     08 18 06 F1 | 	add	arg04, #8
33070     0C 17 02 FB | 	rdlong	arg03, arg04
33074     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
33078     14 4E 05 F1 | 	add	fp, #20
3307c     A7 12 02 FB | 	rdlong	arg01, fp
33080     1C 12 06 F1 | 	add	arg01, #28
33084     10 4E 85 F1 | 	sub	fp, #16
33088     A7 18 02 FB | 	rdlong	arg04, fp
3308c     0C 18 06 F1 | 	add	arg04, #12
33090     0C 15 02 FB | 	rdlong	arg02, arg04
33094     09 15 62 FC | 	wrlong	arg02, arg01
33098     10 4E 05 F1 | 	add	fp, #16
3309c     A7 12 02 FB | 	rdlong	arg01, fp
330a0     16 12 06 F1 | 	add	arg01, #22
330a4     04 4E 85 F1 | 	sub	fp, #4
330a8     A7 14 02 FB | 	rdlong	arg02, fp
330ac     09 15 62 FC | 	wrlong	arg02, arg01
330b0     04 4E 05 F1 | 	add	fp, #4
330b4     A7 12 02 FB | 	rdlong	arg01, fp
330b8     12 12 06 F1 | 	add	arg01, #18
330bc     09 01 58 FC | 	wrword	#0, arg01
330c0     08 4E 85 F1 | 	sub	fp, #8
330c4     A7 18 02 FB | 	rdlong	arg04, fp
330c8     03 18 06 F1 | 	add	arg04, #3
330cc     0C 03 48 FC | 	wrbyte	#1, arg04
330d0     A7 12 02 FB | 	rdlong	arg01, fp
330d4     0C 4E 85 F1 | 	sub	fp, #12
330d8     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
330dc     08 4E 05 F1 | 	add	fp, #8
330e0     A7 FA 61 FC | 	wrlong	result1, fp
330e4     04 4E 85 F1 | 	sub	fp, #4
330e8     A7 18 02 FB | 	rdlong	arg04, fp
330ec     0C 17 02 F6 | 	mov	arg03, arg04
330f0     04 4E 85 F1 | 	sub	fp, #4
330f4     10 18 06 F1 | 	add	arg04, #16
330f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
330fc     BF 18 06 F5 | 	and	arg04, #191
33100     10 16 06 F1 | 	add	arg03, #16
33104     0B 19 42 FC | 	wrbyte	arg04, arg03
33108                 | LR__4941
33108                 | LR__4942
33108                 | LR__4943
33108                 | ' 					dir = fp->dir_ptr;
33108                 | ' 					dir[ 11 ] |=  0x20 ;
33108                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
33108                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
33108                 | ' 					st_dword(dir +  22 , tm);
33108                 | ' 					st_word(dir +  18 , 0);
33108                 | ' 					fs->wflag = 1;
33108                 | ' 					res = sync_fs(fs);
33108                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
33108                 | ' 				}
33108                 | ' 			}
33108                 | ' 		}
33108                 | ' 	}
33108                 | ' 
33108                 | ' 	return res ;
33108     08 4E 05 F1 | 	add	fp, #8
3310c     A7 FA 01 FB | 	rdlong	result1, fp
33110     08 4E 85 F1 | 	sub	fp, #8
33114                 | LR__4944
33114     A7 F0 03 F6 | 	mov	ptra, fp
33118     B2 00 A0 FD | 	call	#popregs_
3311c                 | _fatfs_cc_f_sync_ret
3311c     2D 00 64 FD | 	ret
33120                 | 
33120                 | _fatfs_cc_f_close
33120     01 4A 05 F6 | 	mov	COUNT_, #1
33124     A8 00 A0 FD | 	call	#pushregs_
33128     10 F0 07 F1 | 	add	ptra, #16
3312c     04 4E 05 F1 | 	add	fp, #4
33130     A7 12 62 FC | 	wrlong	arg01, fp
33134     04 4E 85 F1 | 	sub	fp, #4
33138     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
3313c     08 4E 05 F1 | 	add	fp, #8
33140     A7 FA 61 FC | 	wrlong	result1, fp
33144     08 4E 85 F1 | 	sub	fp, #8
33148     00 FA 0D F2 | 	cmp	result1, #0 wz
3314c     38 00 90 5D |  if_ne	jmp	#LR__4950
33150     04 4E 05 F1 | 	add	fp, #4
33154     A7 12 02 FB | 	rdlong	arg01, fp
33158     08 4E 05 F1 | 	add	fp, #8
3315c     A7 14 02 F6 | 	mov	arg02, fp
33160     0C 4E 85 F1 | 	sub	fp, #12
33164     9C E6 BF FD | 	call	#_fatfs_cc_validate
33168     08 4E 05 F1 | 	add	fp, #8
3316c     A7 FA 61 FC | 	wrlong	result1, fp
33170     08 4E 85 F1 | 	sub	fp, #8
33174     00 FA 0D F2 | 	cmp	result1, #0 wz
33178     04 4E 05 A1 |  if_e	add	fp, #4
3317c     A7 26 02 AB |  if_e	rdlong	local01, fp
33180     04 4E 85 A1 |  if_e	sub	fp, #4
33184     13 01 68 AC |  if_e	wrlong	#0, local01
33188                 | LR__4950
33188                 | ' 
33188                 | ' 
33188                 | ' 
33188                 | ' 
33188                 | ' 			fp->obj.fs = 0;
33188                 | ' #line 4192 "ff.c"
33188                 | ' 		}
33188                 | ' 	}
33188                 | ' 	return res;
33188     08 4E 05 F1 | 	add	fp, #8
3318c     A7 FA 01 FB | 	rdlong	result1, fp
33190     08 4E 85 F1 | 	sub	fp, #8
33194     A7 F0 03 F6 | 	mov	ptra, fp
33198     B2 00 A0 FD | 	call	#popregs_
3319c                 | _fatfs_cc_f_close_ret
3319c     2D 00 64 FD | 	ret
331a0                 | 
331a0                 | _fatfs_cc_f_lseek
331a0     00 4A 05 F6 | 	mov	COUNT_, #0
331a4     A8 00 A0 FD | 	call	#pushregs_
331a8     24 F0 07 F1 | 	add	ptra, #36
331ac     04 4E 05 F1 | 	add	fp, #4
331b0     A7 12 62 FC | 	wrlong	arg01, fp
331b4     04 4E 05 F1 | 	add	fp, #4
331b8     A7 14 62 FC | 	wrlong	arg02, fp
331bc     04 4E 85 F1 | 	sub	fp, #4
331c0     A7 12 02 FB | 	rdlong	arg01, fp
331c4     0C 4E 05 F1 | 	add	fp, #12
331c8     A7 14 02 F6 | 	mov	arg02, fp
331cc     10 4E 85 F1 | 	sub	fp, #16
331d0     30 E6 BF FD | 	call	#_fatfs_cc_validate
331d4     0C 4E 05 F1 | 	add	fp, #12
331d8     A7 FA 61 FC | 	wrlong	result1, fp
331dc     0C 4E 85 F1 | 	sub	fp, #12
331e0     00 FA 0D F2 | 	cmp	result1, #0 wz
331e4     1C 00 90 5D |  if_ne	jmp	#LR__4960
331e8     04 4E 05 F1 | 	add	fp, #4
331ec     A7 18 02 FB | 	rdlong	arg04, fp
331f0     11 18 06 F1 | 	add	arg04, #17
331f4     0C 19 C2 FA | 	rdbyte	arg04, arg04
331f8     08 4E 05 F1 | 	add	fp, #8
331fc     A7 18 62 FC | 	wrlong	arg04, fp
33200     0C 4E 85 F1 | 	sub	fp, #12
33204                 | LR__4960
33204     0C 4E 05 F1 | 	add	fp, #12
33208     A7 18 0A FB | 	rdlong	arg04, fp wz
3320c     0C 4E 85 F1 | 	sub	fp, #12
33210     0C 4E 05 51 |  if_ne	add	fp, #12
33214     A7 FA 01 5B |  if_ne	rdlong	result1, fp
33218     0C 4E 85 51 |  if_ne	sub	fp, #12
3321c     40 06 90 5D |  if_ne	jmp	#LR__4983
33220     04 4E 05 F1 | 	add	fp, #4
33224     A7 18 02 FB | 	rdlong	arg04, fp
33228     04 4E 05 F1 | 	add	fp, #4
3322c     A7 16 02 FB | 	rdlong	arg03, fp
33230     08 4E 85 F1 | 	sub	fp, #8
33234     0C 18 06 F1 | 	add	arg04, #12
33238     0C 19 02 FB | 	rdlong	arg04, arg04
3323c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33240     3C 00 90 ED |  if_be	jmp	#LR__4961
33244     04 4E 05 F1 | 	add	fp, #4
33248     A7 16 02 FB | 	rdlong	arg03, fp
3324c     04 4E 85 F1 | 	sub	fp, #4
33250     10 16 06 F1 | 	add	arg03, #16
33254     0B 17 C2 FA | 	rdbyte	arg03, arg03
33258     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
3325c     02 16 CE F7 | 	test	arg03, #2 wz
33260     1C 00 90 5D |  if_ne	jmp	#LR__4961
33264     04 4E 05 F1 | 	add	fp, #4
33268     A7 16 02 FB | 	rdlong	arg03, fp
3326c     0C 16 06 F1 | 	add	arg03, #12
33270     0B 17 02 FB | 	rdlong	arg03, arg03
33274     04 4E 05 F1 | 	add	fp, #4
33278     A7 16 62 FC | 	wrlong	arg03, fp
3327c     08 4E 85 F1 | 	sub	fp, #8
33280                 | LR__4961
33280     04 4E 05 F1 | 	add	fp, #4
33284     A7 16 02 FB | 	rdlong	arg03, fp
33288     14 16 06 F1 | 	add	arg03, #20
3328c     0B 17 02 FB | 	rdlong	arg03, arg03
33290     1C 4E 05 F1 | 	add	fp, #28
33294     A7 16 62 FC | 	wrlong	arg03, fp
33298     1C 4E 85 F1 | 	sub	fp, #28
3329c     A7 16 02 FB | 	rdlong	arg03, fp
332a0     18 4E 05 F1 | 	add	fp, #24
332a4     A7 00 68 FC | 	wrlong	#0, fp
332a8     14 16 06 F1 | 	add	arg03, #20
332ac     0B 01 68 FC | 	wrlong	#0, arg03
332b0     14 4E 85 F1 | 	sub	fp, #20
332b4     A7 16 02 FB | 	rdlong	arg03, fp
332b8     08 4E 85 F1 | 	sub	fp, #8
332bc     01 16 16 F2 | 	cmp	arg03, #1 wc
332c0     E4 03 90 CD |  if_b	jmp	#LR__4977
332c4     10 4E 05 F1 | 	add	fp, #16
332c8     A7 16 02 FB | 	rdlong	arg03, fp
332cc     0A 16 06 F1 | 	add	arg03, #10
332d0     0B 19 E2 FA | 	rdword	arg04, arg03
332d4     09 18 66 F0 | 	shl	arg04, #9
332d8     08 4E 05 F1 | 	add	fp, #8
332dc     A7 18 62 FC | 	wrlong	arg04, fp
332e0     08 4E 05 F1 | 	add	fp, #8
332e4     A7 18 02 FB | 	rdlong	arg04, fp
332e8     20 4E 85 F1 | 	sub	fp, #32
332ec     01 18 16 F2 | 	cmp	arg04, #1 wc
332f0     AC 00 90 CD |  if_b	jmp	#LR__4962
332f4     08 4E 05 F1 | 	add	fp, #8
332f8     A7 18 02 FB | 	rdlong	arg04, fp
332fc     01 18 86 F1 | 	sub	arg04, #1
33300     10 4E 05 F1 | 	add	fp, #16
33304     A7 16 02 FB | 	rdlong	arg03, fp
33308     0B 19 12 FD | 	qdiv	arg04, arg03
3330c     08 4E 05 F1 | 	add	fp, #8
33310     A7 FA 01 FB | 	rdlong	result1, fp
33314     01 FA 85 F1 | 	sub	result1, #1
33318     18 18 62 FD | 	getqx	arg04
3331c     0B FB 11 FD | 	qdiv	result1, arg03
33320     20 4E 85 F1 | 	sub	fp, #32
33324     18 16 62 FD | 	getqx	arg03
33328     0B 19 12 F2 | 	cmp	arg04, arg03 wc
3332c     70 00 90 CD |  if_b	jmp	#LR__4962
33330     04 4E 05 F1 | 	add	fp, #4
33334     A7 16 02 FB | 	rdlong	arg03, fp
33338     1C 4E 05 F1 | 	add	fp, #28
3333c     A7 FA 01 FB | 	rdlong	result1, fp
33340     01 FA 85 F1 | 	sub	result1, #1
33344     08 4E 85 F1 | 	sub	fp, #8
33348     A7 18 02 FB | 	rdlong	arg04, fp
3334c     01 18 86 F1 | 	sub	arg04, #1
33350     0C FB 21 F5 | 	andn	result1, arg04
33354     14 16 06 F1 | 	add	arg03, #20
33358     0B FB 61 FC | 	wrlong	result1, arg03
3335c     10 4E 85 F1 | 	sub	fp, #16
33360     A7 16 02 FB | 	rdlong	arg03, fp
33364     04 4E 85 F1 | 	sub	fp, #4
33368     A7 18 02 FB | 	rdlong	arg04, fp
3336c     14 18 06 F1 | 	add	arg04, #20
33370     0C 19 02 FB | 	rdlong	arg04, arg04
33374     0C 17 82 F1 | 	sub	arg03, arg04
33378     04 4E 05 F1 | 	add	fp, #4
3337c     A7 16 62 FC | 	wrlong	arg03, fp
33380     04 4E 85 F1 | 	sub	fp, #4
33384     A7 16 02 FB | 	rdlong	arg03, fp
33388     18 16 06 F1 | 	add	arg03, #24
3338c     0B 17 02 FB | 	rdlong	arg03, arg03
33390     10 4E 05 F1 | 	add	fp, #16
33394     A7 16 62 FC | 	wrlong	arg03, fp
33398     14 4E 85 F1 | 	sub	fp, #20
3339c     D0 00 90 FD | 	jmp	#LR__4966
333a0                 | LR__4962
333a0     04 4E 05 F1 | 	add	fp, #4
333a4     A7 16 02 FB | 	rdlong	arg03, fp
333a8     08 16 06 F1 | 	add	arg03, #8
333ac     0B 17 0A FB | 	rdlong	arg03, arg03 wz
333b0     10 4E 05 F1 | 	add	fp, #16
333b4     A7 16 62 FC | 	wrlong	arg03, fp
333b8     14 4E 85 F1 | 	sub	fp, #20
333bc     94 00 90 5D |  if_ne	jmp	#LR__4965
333c0     04 4E 05 F1 | 	add	fp, #4
333c4     A7 12 02 FB | 	rdlong	arg01, fp
333c8     04 4E 85 F1 | 	sub	fp, #4
333cc     00 14 06 F6 | 	mov	arg02, #0
333d0     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
333d4     14 4E 05 F1 | 	add	fp, #20
333d8     A7 FA 61 FC | 	wrlong	result1, fp
333dc     14 4E 85 F1 | 	sub	fp, #20
333e0     01 FA 0D F2 | 	cmp	result1, #1 wz
333e4     1C 00 90 5D |  if_ne	jmp	#LR__4963
333e8     04 4E 05 F1 | 	add	fp, #4
333ec     A7 16 02 FB | 	rdlong	arg03, fp
333f0     04 4E 85 F1 | 	sub	fp, #4
333f4     11 16 06 F1 | 	add	arg03, #17
333f8     0B 05 48 FC | 	wrbyte	#2, arg03
333fc     02 FA 05 F6 | 	mov	result1, #2
33400     5C 04 90 FD | 	jmp	#LR__4983
33404                 | LR__4963
33404     14 4E 05 F1 | 	add	fp, #20
33408     A7 FA 01 FB | 	rdlong	result1, fp
3340c     14 4E 85 F1 | 	sub	fp, #20
33410     FF FF 7F FF 
33414     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33418     1C 00 90 5D |  if_ne	jmp	#LR__4964
3341c     04 4E 05 F1 | 	add	fp, #4
33420     A7 16 02 FB | 	rdlong	arg03, fp
33424     04 4E 85 F1 | 	sub	fp, #4
33428     11 16 06 F1 | 	add	arg03, #17
3342c     0B 03 48 FC | 	wrbyte	#1, arg03
33430     01 FA 05 F6 | 	mov	result1, #1
33434     28 04 90 FD | 	jmp	#LR__4983
33438                 | LR__4964
33438     04 4E 05 F1 | 	add	fp, #4
3343c     A7 16 02 FB | 	rdlong	arg03, fp
33440     10 4E 05 F1 | 	add	fp, #16
33444     A7 18 02 FB | 	rdlong	arg04, fp
33448     14 4E 85 F1 | 	sub	fp, #20
3344c     08 16 06 F1 | 	add	arg03, #8
33450     0B 19 62 FC | 	wrlong	arg04, arg03
33454                 | LR__4965
33454     04 4E 05 F1 | 	add	fp, #4
33458     A7 16 02 FB | 	rdlong	arg03, fp
3345c     10 4E 05 F1 | 	add	fp, #16
33460     A7 18 02 FB | 	rdlong	arg04, fp
33464     14 4E 85 F1 | 	sub	fp, #20
33468     18 16 06 F1 | 	add	arg03, #24
3346c     0B 19 62 FC | 	wrlong	arg04, arg03
33470                 | LR__4966
33470     14 4E 05 F1 | 	add	fp, #20
33474     A7 16 0A FB | 	rdlong	arg03, fp wz
33478     14 4E 85 F1 | 	sub	fp, #20
3347c     28 02 90 AD |  if_e	jmp	#LR__4976
33480                 | ' 				while (ofs > bcs) {
33480                 | LR__4967
33480     08 4E 05 F1 | 	add	fp, #8
33484     A7 18 02 FB | 	rdlong	arg04, fp
33488     10 4E 05 F1 | 	add	fp, #16
3348c     A7 16 02 FB | 	rdlong	arg03, fp
33490     18 4E 85 F1 | 	sub	fp, #24
33494     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
33498     68 01 90 ED |  if_be	jmp	#LR__4973
3349c     08 4E 05 F1 | 	add	fp, #8
334a0     A7 18 02 FB | 	rdlong	arg04, fp
334a4     10 4E 05 F1 | 	add	fp, #16
334a8     A7 16 02 FB | 	rdlong	arg03, fp
334ac     0B 19 82 F1 | 	sub	arg04, arg03
334b0     10 4E 85 F1 | 	sub	fp, #16
334b4     A7 18 62 FC | 	wrlong	arg04, fp
334b8     04 4E 85 F1 | 	sub	fp, #4
334bc     A7 18 02 FB | 	rdlong	arg04, fp
334c0     0C FB 01 F6 | 	mov	result1, arg04
334c4     14 18 06 F1 | 	add	arg04, #20
334c8     0C 19 02 FB | 	rdlong	arg04, arg04
334cc     14 4E 05 F1 | 	add	fp, #20
334d0     A7 16 02 FB | 	rdlong	arg03, fp
334d4     0B 19 02 F1 | 	add	arg04, arg03
334d8     14 FA 05 F1 | 	add	result1, #20
334dc     FD 18 62 FC | 	wrlong	arg04, result1
334e0     14 4E 85 F1 | 	sub	fp, #20
334e4     A7 16 02 FB | 	rdlong	arg03, fp
334e8     04 4E 85 F1 | 	sub	fp, #4
334ec     10 16 06 F1 | 	add	arg03, #16
334f0     0B 17 C2 FA | 	rdbyte	arg03, arg03
334f4     02 16 CE F7 | 	test	arg03, #2 wz
334f8     3C 00 90 AD |  if_e	jmp	#LR__4968
334fc     04 4E 05 F1 | 	add	fp, #4
33500     A7 12 02 FB | 	rdlong	arg01, fp
33504     10 4E 05 F1 | 	add	fp, #16
33508     A7 14 02 FB | 	rdlong	arg02, fp
3350c     14 4E 85 F1 | 	sub	fp, #20
33510     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
33514     14 4E 05 F1 | 	add	fp, #20
33518     A7 FA 61 FC | 	wrlong	result1, fp
3351c     00 FA 4D F2 | 	cmps	result1, #0 wz
33520     14 4E 85 F1 | 	sub	fp, #20
33524     08 4E 05 A1 |  if_e	add	fp, #8
33528     A7 00 68 AC |  if_e	wrlong	#0, fp
3352c     08 4E 85 A1 |  if_e	sub	fp, #8
33530                 | ' 							ofs = 0; break;
33530     D0 00 90 AD |  if_e	jmp	#LR__4973
33534     24 00 90 FD | 	jmp	#LR__4969
33538                 | LR__4968
33538     04 4E 05 F1 | 	add	fp, #4
3353c     A7 12 02 FB | 	rdlong	arg01, fp
33540     10 4E 05 F1 | 	add	fp, #16
33544     A7 14 02 FB | 	rdlong	arg02, fp
33548     14 4E 85 F1 | 	sub	fp, #20
3354c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
33550     14 4E 05 F1 | 	add	fp, #20
33554     A7 FA 61 FC | 	wrlong	result1, fp
33558     14 4E 85 F1 | 	sub	fp, #20
3355c                 | LR__4969
3355c     14 4E 05 F1 | 	add	fp, #20
33560     A7 16 02 FB | 	rdlong	arg03, fp
33564     14 4E 85 F1 | 	sub	fp, #20
33568     FF FF 7F FF 
3356c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33570     1C 00 90 5D |  if_ne	jmp	#LR__4970
33574     04 4E 05 F1 | 	add	fp, #4
33578     A7 16 02 FB | 	rdlong	arg03, fp
3357c     04 4E 85 F1 | 	sub	fp, #4
33580     11 16 06 F1 | 	add	arg03, #17
33584     0B 03 48 FC | 	wrbyte	#1, arg03
33588     01 FA 05 F6 | 	mov	result1, #1
3358c     D0 02 90 FD | 	jmp	#LR__4983
33590                 | LR__4970
33590     14 4E 05 F1 | 	add	fp, #20
33594     A7 16 02 FB | 	rdlong	arg03, fp
33598     14 4E 85 F1 | 	sub	fp, #20
3359c     02 16 16 F2 | 	cmp	arg03, #2 wc
335a0     24 00 90 CD |  if_b	jmp	#LR__4971
335a4     10 4E 05 F1 | 	add	fp, #16
335a8     A7 18 02 FB | 	rdlong	arg04, fp
335ac     04 4E 05 F1 | 	add	fp, #4
335b0     A7 16 02 FB | 	rdlong	arg03, fp
335b4     14 4E 85 F1 | 	sub	fp, #20
335b8     18 18 06 F1 | 	add	arg04, #24
335bc     0C 19 02 FB | 	rdlong	arg04, arg04
335c0     0C 17 12 F2 | 	cmp	arg03, arg04 wc
335c4     1C 00 90 CD |  if_b	jmp	#LR__4972
335c8                 | LR__4971
335c8     04 4E 05 F1 | 	add	fp, #4
335cc     A7 16 02 FB | 	rdlong	arg03, fp
335d0     04 4E 85 F1 | 	sub	fp, #4
335d4     11 16 06 F1 | 	add	arg03, #17
335d8     0B 05 48 FC | 	wrbyte	#2, arg03
335dc     02 FA 05 F6 | 	mov	result1, #2
335e0     7C 02 90 FD | 	jmp	#LR__4983
335e4                 | LR__4972
335e4     04 4E 05 F1 | 	add	fp, #4
335e8     A7 18 02 FB | 	rdlong	arg04, fp
335ec     10 4E 05 F1 | 	add	fp, #16
335f0     A7 16 02 FB | 	rdlong	arg03, fp
335f4     14 4E 85 F1 | 	sub	fp, #20
335f8     18 18 06 F1 | 	add	arg04, #24
335fc     0C 17 62 FC | 	wrlong	arg03, arg04
33600     7C FE 9F FD | 	jmp	#LR__4967
33604                 | LR__4973
33604     04 4E 05 F1 | 	add	fp, #4
33608     A7 16 02 FB | 	rdlong	arg03, fp
3360c     0B 13 02 F6 | 	mov	arg01, arg03
33610     14 16 06 F1 | 	add	arg03, #20
33614     0B 15 02 FB | 	rdlong	arg02, arg03
33618     04 4E 05 F1 | 	add	fp, #4
3361c     A7 16 02 FB | 	rdlong	arg03, fp
33620     0B 15 02 F1 | 	add	arg02, arg03
33624     14 12 06 F1 | 	add	arg01, #20
33628     09 15 62 FC | 	wrlong	arg02, arg01
3362c     A7 16 02 FB | 	rdlong	arg03, fp
33630     08 4E 85 F1 | 	sub	fp, #8
33634     FF 17 CE F7 | 	test	arg03, #511 wz
33638     6C 00 90 AD |  if_e	jmp	#LR__4975
3363c     10 4E 05 F1 | 	add	fp, #16
33640     A7 12 02 FB | 	rdlong	arg01, fp
33644     04 4E 05 F1 | 	add	fp, #4
33648     A7 14 02 FB | 	rdlong	arg02, fp
3364c     14 4E 85 F1 | 	sub	fp, #20
33650     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
33654     1C 4E 05 F1 | 	add	fp, #28
33658     A7 FA 61 FC | 	wrlong	result1, fp
3365c     1C 4E 85 F1 | 	sub	fp, #28
33660     00 FA 0D F2 | 	cmp	result1, #0 wz
33664     1C 00 90 5D |  if_ne	jmp	#LR__4974
33668     04 4E 05 F1 | 	add	fp, #4
3366c     A7 16 02 FB | 	rdlong	arg03, fp
33670     04 4E 85 F1 | 	sub	fp, #4
33674     11 16 06 F1 | 	add	arg03, #17
33678     0B 05 48 FC | 	wrbyte	#2, arg03
3367c     02 FA 05 F6 | 	mov	result1, #2
33680     DC 01 90 FD | 	jmp	#LR__4983
33684                 | LR__4974
33684     1C 4E 05 F1 | 	add	fp, #28
33688     A7 18 02 FB | 	rdlong	arg04, fp
3368c     14 4E 85 F1 | 	sub	fp, #20
33690     A7 16 02 FB | 	rdlong	arg03, fp
33694     09 16 46 F0 | 	shr	arg03, #9
33698     0B 19 02 F1 | 	add	arg04, arg03
3369c     14 4E 05 F1 | 	add	fp, #20
336a0     A7 18 62 FC | 	wrlong	arg04, fp
336a4     1C 4E 85 F1 | 	sub	fp, #28
336a8                 | LR__4975
336a8                 | LR__4976
336a8                 | LR__4977
336a8     04 4E 05 F1 | 	add	fp, #4
336ac     A7 18 02 FB | 	rdlong	arg04, fp
336b0     0C 17 02 F6 | 	mov	arg03, arg04
336b4     04 4E 85 F1 | 	sub	fp, #4
336b8     14 16 06 F1 | 	add	arg03, #20
336bc     0B 17 02 FB | 	rdlong	arg03, arg03
336c0     0C 18 06 F1 | 	add	arg04, #12
336c4     0C 19 02 FB | 	rdlong	arg04, arg04
336c8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
336cc     3C 00 90 ED |  if_be	jmp	#LR__4978
336d0     04 4E 05 F1 | 	add	fp, #4
336d4     A7 18 02 FB | 	rdlong	arg04, fp
336d8     0C 17 02 F6 | 	mov	arg03, arg04
336dc     14 18 06 F1 | 	add	arg04, #20
336e0     0C 19 02 FB | 	rdlong	arg04, arg04
336e4     0C 16 06 F1 | 	add	arg03, #12
336e8     0B 19 62 FC | 	wrlong	arg04, arg03
336ec     A7 18 02 FB | 	rdlong	arg04, fp
336f0     0C 17 02 F6 | 	mov	arg03, arg04
336f4     04 4E 85 F1 | 	sub	fp, #4
336f8     10 18 06 F1 | 	add	arg04, #16
336fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
33700     40 18 46 F5 | 	or	arg04, #64
33704     10 16 06 F1 | 	add	arg03, #16
33708     0B 19 42 FC | 	wrbyte	arg04, arg03
3370c                 | LR__4978
3370c     04 4E 05 F1 | 	add	fp, #4
33710     A7 16 02 FB | 	rdlong	arg03, fp
33714     04 4E 85 F1 | 	sub	fp, #4
33718     14 16 06 F1 | 	add	arg03, #20
3371c     0B 17 02 FB | 	rdlong	arg03, arg03
33720     FF 17 CE F7 | 	test	arg03, #511 wz
33724     2C 01 90 AD |  if_e	jmp	#LR__4982
33728     04 4E 05 F1 | 	add	fp, #4
3372c     A7 18 02 FB | 	rdlong	arg04, fp
33730     18 4E 05 F1 | 	add	fp, #24
33734     A7 16 02 FB | 	rdlong	arg03, fp
33738     1C 4E 85 F1 | 	sub	fp, #28
3373c     1C 18 06 F1 | 	add	arg04, #28
33740     0C 19 02 FB | 	rdlong	arg04, arg04
33744     0C 17 0A F2 | 	cmp	arg03, arg04 wz
33748     08 01 90 AD |  if_e	jmp	#LR__4982
3374c     04 4E 05 F1 | 	add	fp, #4
33750     A7 16 02 FB | 	rdlong	arg03, fp
33754     04 4E 85 F1 | 	sub	fp, #4
33758     10 16 06 F1 | 	add	arg03, #16
3375c     0B 17 C2 FA | 	rdbyte	arg03, arg03
33760     80 16 CE F7 | 	test	arg03, #128 wz
33764     7C 00 90 AD |  if_e	jmp	#LR__4980
33768     10 4E 05 F1 | 	add	fp, #16
3376c     A7 16 02 FB | 	rdlong	arg03, fp
33770     01 16 06 F1 | 	add	arg03, #1
33774     0B 13 C2 FA | 	rdbyte	arg01, arg03
33778     0C 4E 85 F1 | 	sub	fp, #12
3377c     A7 16 02 FB | 	rdlong	arg03, fp
33780     0B 15 02 F6 | 	mov	arg02, arg03
33784     28 14 06 F1 | 	add	arg02, #40
33788     04 4E 85 F1 | 	sub	fp, #4
3378c     1C 16 06 F1 | 	add	arg03, #28
33790     0B 17 02 FB | 	rdlong	arg03, arg03
33794     01 18 06 F6 | 	mov	arg04, #1
33798     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
3379c     00 FA 0D F2 | 	cmp	result1, #0 wz
337a0     1C 00 90 AD |  if_e	jmp	#LR__4979
337a4     04 4E 05 F1 | 	add	fp, #4
337a8     A7 16 02 FB | 	rdlong	arg03, fp
337ac     04 4E 85 F1 | 	sub	fp, #4
337b0     11 16 06 F1 | 	add	arg03, #17
337b4     0B 03 48 FC | 	wrbyte	#1, arg03
337b8     01 FA 05 F6 | 	mov	result1, #1
337bc     A0 00 90 FD | 	jmp	#LR__4983
337c0                 | LR__4979
337c0     04 4E 05 F1 | 	add	fp, #4
337c4     A7 18 02 FB | 	rdlong	arg04, fp
337c8     0C 17 02 F6 | 	mov	arg03, arg04
337cc     04 4E 85 F1 | 	sub	fp, #4
337d0     10 18 06 F1 | 	add	arg04, #16
337d4     0C 19 C2 FA | 	rdbyte	arg04, arg04
337d8     7F 18 06 F5 | 	and	arg04, #127
337dc     10 16 06 F1 | 	add	arg03, #16
337e0     0B 19 42 FC | 	wrbyte	arg04, arg03
337e4                 | LR__4980
337e4     10 4E 05 F1 | 	add	fp, #16
337e8     A7 16 02 FB | 	rdlong	arg03, fp
337ec     01 16 06 F1 | 	add	arg03, #1
337f0     0B 13 C2 FA | 	rdbyte	arg01, arg03
337f4     0C 4E 85 F1 | 	sub	fp, #12
337f8     A7 14 02 FB | 	rdlong	arg02, fp
337fc     28 14 06 F1 | 	add	arg02, #40
33800     18 4E 05 F1 | 	add	fp, #24
33804     A7 16 02 FB | 	rdlong	arg03, fp
33808     1C 4E 85 F1 | 	sub	fp, #28
3380c     01 18 06 F6 | 	mov	arg04, #1
33810     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
33814     00 FA 0D F2 | 	cmp	result1, #0 wz
33818     1C 00 90 AD |  if_e	jmp	#LR__4981
3381c     04 4E 05 F1 | 	add	fp, #4
33820     A7 16 02 FB | 	rdlong	arg03, fp
33824     04 4E 85 F1 | 	sub	fp, #4
33828     11 16 06 F1 | 	add	arg03, #17
3382c     0B 03 48 FC | 	wrbyte	#1, arg03
33830     01 FA 05 F6 | 	mov	result1, #1
33834     28 00 90 FD | 	jmp	#LR__4983
33838                 | LR__4981
33838     04 4E 05 F1 | 	add	fp, #4
3383c     A7 18 02 FB | 	rdlong	arg04, fp
33840     18 4E 05 F1 | 	add	fp, #24
33844     A7 16 02 FB | 	rdlong	arg03, fp
33848     1C 4E 85 F1 | 	sub	fp, #28
3384c     1C 18 06 F1 | 	add	arg04, #28
33850     0C 17 62 FC | 	wrlong	arg03, arg04
33854                 | LR__4982
33854                 | ' 
33854                 | ' 			fp->sect = nsect;
33854                 | ' 		}
33854                 | ' 	}
33854                 | ' 
33854                 | ' 	return res ;
33854     0C 4E 05 F1 | 	add	fp, #12
33858     A7 FA 01 FB | 	rdlong	result1, fp
3385c     0C 4E 85 F1 | 	sub	fp, #12
33860                 | LR__4983
33860     A7 F0 03 F6 | 	mov	ptra, fp
33864     B2 00 A0 FD | 	call	#popregs_
33868                 | _fatfs_cc_f_lseek_ret
33868     2D 00 64 FD | 	ret
3386c                 | 
3386c                 | _fatfs_cc_f_opendir
3386c     01 4A 05 F6 | 	mov	COUNT_, #1
33870     A8 00 A0 FD | 	call	#pushregs_
33874     14 F0 07 F1 | 	add	ptra, #20
33878     04 4E 05 F1 | 	add	fp, #4
3387c     A7 12 62 FC | 	wrlong	arg01, fp
33880     04 4E 05 F1 | 	add	fp, #4
33884     A7 14 62 FC | 	wrlong	arg02, fp
33888     04 4E 85 F1 | 	sub	fp, #4
3388c     A7 16 0A FB | 	rdlong	arg03, fp wz
33890     04 4E 85 F1 | 	sub	fp, #4
33894     09 FA 05 A6 |  if_e	mov	result1, #9
33898     78 01 90 AD |  if_e	jmp	#LR__4996
3389c     08 4E 05 F1 | 	add	fp, #8
338a0     A7 12 02 F6 | 	mov	arg01, fp
338a4     08 4E 05 F1 | 	add	fp, #8
338a8     A7 14 02 F6 | 	mov	arg02, fp
338ac     10 4E 85 F1 | 	sub	fp, #16
338b0     00 16 06 F6 | 	mov	arg03, #0
338b4     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
338b8     0C 4E 05 F1 | 	add	fp, #12
338bc     A7 FA 61 FC | 	wrlong	result1, fp
338c0     0C 4E 85 F1 | 	sub	fp, #12
338c4     00 FA 0D F2 | 	cmp	result1, #0 wz
338c8     20 01 90 5D |  if_ne	jmp	#LR__4995
338cc     04 4E 05 F1 | 	add	fp, #4
338d0     A7 16 02 FB | 	rdlong	arg03, fp
338d4     0C 4E 05 F1 | 	add	fp, #12
338d8     A7 FA 01 FB | 	rdlong	result1, fp
338dc     0B FB 61 FC | 	wrlong	result1, arg03
338e0     0C 4E 85 F1 | 	sub	fp, #12
338e4     A7 12 02 FB | 	rdlong	arg01, fp
338e8     04 4E 05 F1 | 	add	fp, #4
338ec     A7 14 02 FB | 	rdlong	arg02, fp
338f0     08 4E 85 F1 | 	sub	fp, #8
338f4     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
338f8     0C 4E 05 F1 | 	add	fp, #12
338fc     A7 FA 61 FC | 	wrlong	result1, fp
33900     0C 4E 85 F1 | 	sub	fp, #12
33904     00 FA 0D F2 | 	cmp	result1, #0 wz
33908     C4 00 90 5D |  if_ne	jmp	#LR__4994
3390c     04 4E 05 F1 | 	add	fp, #4
33910     A7 16 02 FB | 	rdlong	arg03, fp
33914     04 4E 85 F1 | 	sub	fp, #4
33918     2B 16 06 F1 | 	add	arg03, #43
3391c     0B 17 C2 FA | 	rdbyte	arg03, arg03
33920     80 16 CE F7 | 	test	arg03, #128 wz
33924     58 00 90 5D |  if_ne	jmp	#LR__4992
33928     04 4E 05 F1 | 	add	fp, #4
3392c     A7 16 02 FB | 	rdlong	arg03, fp
33930     04 4E 85 F1 | 	sub	fp, #4
33934     06 16 06 F1 | 	add	arg03, #6
33938     0B 17 C2 FA | 	rdbyte	arg03, arg03
3393c     10 16 CE F7 | 	test	arg03, #16 wz
33940     30 00 90 AD |  if_e	jmp	#LR__4990
33944     04 4E 05 F1 | 	add	fp, #4
33948     A7 16 02 FB | 	rdlong	arg03, fp
3394c     0B 27 02 F6 | 	mov	local01, arg03
33950     0C 4E 05 F1 | 	add	fp, #12
33954     A7 12 02 FB | 	rdlong	arg01, fp
33958     10 4E 85 F1 | 	sub	fp, #16
3395c     1C 16 06 F1 | 	add	arg03, #28
33960     0B 15 02 FB | 	rdlong	arg02, arg03
33964     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
33968     08 26 06 F1 | 	add	local01, #8
3396c     13 FB 61 FC | 	wrlong	result1, local01
33970     0C 00 90 FD | 	jmp	#LR__4991
33974                 | LR__4990
33974     0C 4E 05 F1 | 	add	fp, #12
33978     A7 0A 68 FC | 	wrlong	#5, fp
3397c     0C 4E 85 F1 | 	sub	fp, #12
33980                 | LR__4991
33980                 | LR__4992
33980     0C 4E 05 F1 | 	add	fp, #12
33984     A7 26 0A FB | 	rdlong	local01, fp wz
33988     0C 4E 85 F1 | 	sub	fp, #12
3398c     40 00 90 5D |  if_ne	jmp	#LR__4993
33990     04 4E 05 F1 | 	add	fp, #4
33994     A7 26 02 FB | 	rdlong	local01, fp
33998     0C 4E 05 F1 | 	add	fp, #12
3399c     A7 16 02 FB | 	rdlong	arg03, fp
339a0     06 16 06 F1 | 	add	arg03, #6
339a4     0B 17 E2 FA | 	rdword	arg03, arg03
339a8     04 26 06 F1 | 	add	local01, #4
339ac     13 17 52 FC | 	wrword	arg03, local01
339b0     0C 4E 85 F1 | 	sub	fp, #12
339b4     A7 12 02 FB | 	rdlong	arg01, fp
339b8     04 4E 85 F1 | 	sub	fp, #4
339bc     00 14 06 F6 | 	mov	arg02, #0
339c0     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
339c4     0C 4E 05 F1 | 	add	fp, #12
339c8     A7 FA 61 FC | 	wrlong	result1, fp
339cc     0C 4E 85 F1 | 	sub	fp, #12
339d0                 | LR__4993
339d0                 | LR__4994
339d0     0C 4E 05 F1 | 	add	fp, #12
339d4     A7 26 02 FB | 	rdlong	local01, fp
339d8     0C 4E 85 F1 | 	sub	fp, #12
339dc     04 26 0E F2 | 	cmp	local01, #4 wz
339e0     0C 4E 05 A1 |  if_e	add	fp, #12
339e4     A7 0A 68 AC |  if_e	wrlong	#5, fp
339e8     0C 4E 85 A1 |  if_e	sub	fp, #12
339ec                 | LR__4995
339ec     0C 4E 05 F1 | 	add	fp, #12
339f0     A7 26 0A FB | 	rdlong	local01, fp wz
339f4     0C 4E 85 F1 | 	sub	fp, #12
339f8     04 4E 05 51 |  if_ne	add	fp, #4
339fc     A7 26 02 5B |  if_ne	rdlong	local01, fp
33a00     04 4E 85 51 |  if_ne	sub	fp, #4
33a04     13 01 68 5C |  if_ne	wrlong	#0, local01
33a08                 | ' 
33a08                 | ' 	return res ;
33a08     0C 4E 05 F1 | 	add	fp, #12
33a0c     A7 FA 01 FB | 	rdlong	result1, fp
33a10     0C 4E 85 F1 | 	sub	fp, #12
33a14                 | LR__4996
33a14     A7 F0 03 F6 | 	mov	ptra, fp
33a18     B2 00 A0 FD | 	call	#popregs_
33a1c                 | _fatfs_cc_f_opendir_ret
33a1c     2D 00 64 FD | 	ret
33a20                 | 
33a20                 | _fatfs_cc_f_closedir
33a20     00 4A 05 F6 | 	mov	COUNT_, #0
33a24     A8 00 A0 FD | 	call	#pushregs_
33a28     10 F0 07 F1 | 	add	ptra, #16
33a2c     04 4E 05 F1 | 	add	fp, #4
33a30     A7 12 62 FC | 	wrlong	arg01, fp
33a34     08 4E 05 F1 | 	add	fp, #8
33a38     A7 14 02 F6 | 	mov	arg02, fp
33a3c     0C 4E 85 F1 | 	sub	fp, #12
33a40     C0 DD BF FD | 	call	#_fatfs_cc_validate
33a44     08 4E 05 F1 | 	add	fp, #8
33a48     A7 FA 61 FC | 	wrlong	result1, fp
33a4c     08 4E 85 F1 | 	sub	fp, #8
33a50     00 FA 0D F2 | 	cmp	result1, #0 wz
33a54     04 4E 05 A1 |  if_e	add	fp, #4
33a58     A7 FA 01 AB |  if_e	rdlong	result1, fp
33a5c     04 4E 85 A1 |  if_e	sub	fp, #4
33a60     FD 00 68 AC |  if_e	wrlong	#0, result1
33a64                 | ' 
33a64                 | ' 
33a64                 | ' 
33a64                 | ' 
33a64                 | ' 		dp->obj.fs = 0;
33a64                 | ' #line 4633 "ff.c"
33a64                 | ' 	}
33a64                 | ' 	return res;
33a64     08 4E 05 F1 | 	add	fp, #8
33a68     A7 FA 01 FB | 	rdlong	result1, fp
33a6c     08 4E 85 F1 | 	sub	fp, #8
33a70     A7 F0 03 F6 | 	mov	ptra, fp
33a74     B2 00 A0 FD | 	call	#popregs_
33a78                 | _fatfs_cc_f_closedir_ret
33a78     2D 00 64 FD | 	ret
33a7c                 | 
33a7c                 | _fatfs_cc_f_readdir
33a7c     00 4A 05 F6 | 	mov	COUNT_, #0
33a80     A8 00 A0 FD | 	call	#pushregs_
33a84     14 F0 07 F1 | 	add	ptra, #20
33a88     04 4E 05 F1 | 	add	fp, #4
33a8c     A7 12 62 FC | 	wrlong	arg01, fp
33a90     04 4E 05 F1 | 	add	fp, #4
33a94     A7 14 62 FC | 	wrlong	arg02, fp
33a98     04 4E 85 F1 | 	sub	fp, #4
33a9c     A7 12 02 FB | 	rdlong	arg01, fp
33aa0     0C 4E 05 F1 | 	add	fp, #12
33aa4     A7 14 02 F6 | 	mov	arg02, fp
33aa8     10 4E 85 F1 | 	sub	fp, #16
33aac     54 DD BF FD | 	call	#_fatfs_cc_validate
33ab0     0C 4E 05 F1 | 	add	fp, #12
33ab4     A7 FA 61 FC | 	wrlong	result1, fp
33ab8     0C 4E 85 F1 | 	sub	fp, #12
33abc     00 FA 0D F2 | 	cmp	result1, #0 wz
33ac0     BC 00 90 5D |  if_ne	jmp	#LR__5003
33ac4     08 4E 05 F1 | 	add	fp, #8
33ac8     A7 FA 09 FB | 	rdlong	result1, fp wz
33acc     08 4E 85 F1 | 	sub	fp, #8
33ad0     24 00 90 5D |  if_ne	jmp	#LR__5000
33ad4     04 4E 05 F1 | 	add	fp, #4
33ad8     A7 12 02 FB | 	rdlong	arg01, fp
33adc     04 4E 85 F1 | 	sub	fp, #4
33ae0     00 14 06 F6 | 	mov	arg02, #0
33ae4     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
33ae8     0C 4E 05 F1 | 	add	fp, #12
33aec     A7 FA 61 FC | 	wrlong	result1, fp
33af0     0C 4E 85 F1 | 	sub	fp, #12
33af4     88 00 90 FD | 	jmp	#LR__5002
33af8                 | LR__5000
33af8     04 4E 05 F1 | 	add	fp, #4
33afc     A7 12 02 FB | 	rdlong	arg01, fp
33b00     04 4E 85 F1 | 	sub	fp, #4
33b04     00 14 06 F6 | 	mov	arg02, #0
33b08     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
33b0c     0C 4E 05 F1 | 	add	fp, #12
33b10     A7 FA 61 FC | 	wrlong	result1, fp
33b14     0C 4E 85 F1 | 	sub	fp, #12
33b18     04 FA 0D F2 | 	cmp	result1, #4 wz
33b1c     0C 4E 05 A1 |  if_e	add	fp, #12
33b20     A7 00 68 AC |  if_e	wrlong	#0, fp
33b24     0C 4E 85 A1 |  if_e	sub	fp, #12
33b28     0C 4E 05 F1 | 	add	fp, #12
33b2c     A7 FA 09 FB | 	rdlong	result1, fp wz
33b30     0C 4E 85 F1 | 	sub	fp, #12
33b34     48 00 90 5D |  if_ne	jmp	#LR__5001
33b38     04 4E 05 F1 | 	add	fp, #4
33b3c     A7 12 02 FB | 	rdlong	arg01, fp
33b40     04 4E 05 F1 | 	add	fp, #4
33b44     A7 14 02 FB | 	rdlong	arg02, fp
33b48     08 4E 85 F1 | 	sub	fp, #8
33b4c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
33b50     04 4E 05 F1 | 	add	fp, #4
33b54     A7 12 02 FB | 	rdlong	arg01, fp
33b58     04 4E 85 F1 | 	sub	fp, #4
33b5c     00 14 06 F6 | 	mov	arg02, #0
33b60     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
33b64     0C 4E 05 F1 | 	add	fp, #12
33b68     A7 FA 61 FC | 	wrlong	result1, fp
33b6c     0C 4E 85 F1 | 	sub	fp, #12
33b70     04 FA 0D F2 | 	cmp	result1, #4 wz
33b74     0C 4E 05 A1 |  if_e	add	fp, #12
33b78     A7 00 68 AC |  if_e	wrlong	#0, fp
33b7c     0C 4E 85 A1 |  if_e	sub	fp, #12
33b80                 | LR__5001
33b80                 | LR__5002
33b80                 | LR__5003
33b80                 | ' 			}
33b80                 | ' 			;
33b80                 | ' 		}
33b80                 | ' 	}
33b80                 | ' 	return res ;
33b80     0C 4E 05 F1 | 	add	fp, #12
33b84     A7 FA 01 FB | 	rdlong	result1, fp
33b88     0C 4E 85 F1 | 	sub	fp, #12
33b8c     A7 F0 03 F6 | 	mov	ptra, fp
33b90     B2 00 A0 FD | 	call	#popregs_
33b94                 | _fatfs_cc_f_readdir_ret
33b94     2D 00 64 FD | 	ret
33b98                 | 
33b98                 | _fatfs_cc_f_stat
33b98     00 4A 05 F6 | 	mov	COUNT_, #0
33b9c     A8 00 A0 FD | 	call	#pushregs_
33ba0     40 F0 07 F1 | 	add	ptra, #64
33ba4     04 4E 05 F1 | 	add	fp, #4
33ba8     A7 12 62 FC | 	wrlong	arg01, fp
33bac     04 4E 05 F1 | 	add	fp, #4
33bb0     A7 14 62 FC | 	wrlong	arg02, fp
33bb4     04 4E 85 F1 | 	sub	fp, #4
33bb8     A7 12 02 F6 | 	mov	arg01, fp
33bbc     0C 4E 05 F1 | 	add	fp, #12
33bc0     A7 14 02 F6 | 	mov	arg02, fp
33bc4     10 4E 85 F1 | 	sub	fp, #16
33bc8     00 16 06 F6 | 	mov	arg03, #0
33bcc     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
33bd0     0C 4E 05 F1 | 	add	fp, #12
33bd4     A7 FA 61 FC | 	wrlong	result1, fp
33bd8     0C 4E 85 F1 | 	sub	fp, #12
33bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
33be0     74 00 90 5D |  if_ne	jmp	#LR__5013
33be4     10 4E 05 F1 | 	add	fp, #16
33be8     A7 12 02 F6 | 	mov	arg01, fp
33bec     0C 4E 85 F1 | 	sub	fp, #12
33bf0     A7 14 02 FB | 	rdlong	arg02, fp
33bf4     04 4E 85 F1 | 	sub	fp, #4
33bf8     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
33bfc     0C 4E 05 F1 | 	add	fp, #12
33c00     A7 FA 61 FC | 	wrlong	result1, fp
33c04     0C 4E 85 F1 | 	sub	fp, #12
33c08     00 FA 0D F2 | 	cmp	result1, #0 wz
33c0c     48 00 90 5D |  if_ne	jmp	#LR__5012
33c10     3B 4E 05 F1 | 	add	fp, #59
33c14     A7 FA C1 FA | 	rdbyte	result1, fp
33c18     3B 4E 85 F1 | 	sub	fp, #59
33c1c     80 FA CD F7 | 	test	result1, #128 wz
33c20     0C 4E 05 51 |  if_ne	add	fp, #12
33c24     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33c28     0C 4E 85 51 |  if_ne	sub	fp, #12
33c2c     28 00 90 5D |  if_ne	jmp	#LR__5011
33c30     08 4E 05 F1 | 	add	fp, #8
33c34     A7 FA 09 FB | 	rdlong	result1, fp wz
33c38     08 4E 85 F1 | 	sub	fp, #8
33c3c     18 00 90 AD |  if_e	jmp	#LR__5010
33c40     10 4E 05 F1 | 	add	fp, #16
33c44     A7 12 02 F6 | 	mov	arg01, fp
33c48     08 4E 85 F1 | 	sub	fp, #8
33c4c     A7 14 02 FB | 	rdlong	arg02, fp
33c50     08 4E 85 F1 | 	sub	fp, #8
33c54     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
33c58                 | LR__5010
33c58                 | LR__5011
33c58                 | LR__5012
33c58                 | LR__5013
33c58                 | ' 			}
33c58                 | ' 		}
33c58                 | ' 		;
33c58                 | ' 	}
33c58                 | ' 
33c58                 | ' 	return res ;
33c58     0C 4E 05 F1 | 	add	fp, #12
33c5c     A7 FA 01 FB | 	rdlong	result1, fp
33c60     0C 4E 85 F1 | 	sub	fp, #12
33c64     A7 F0 03 F6 | 	mov	ptra, fp
33c68     B2 00 A0 FD | 	call	#popregs_
33c6c                 | _fatfs_cc_f_stat_ret
33c6c     2D 00 64 FD | 	ret
33c70                 | 
33c70                 | _fatfs_cc_f_unlink
33c70     00 4A 05 F6 | 	mov	COUNT_, #0
33c74     A8 00 A0 FD | 	call	#pushregs_
33c78     74 F0 07 F1 | 	add	ptra, #116
33c7c     04 4E 05 F1 | 	add	fp, #4
33c80     A7 12 62 FC | 	wrlong	arg01, fp
33c84     68 4E 05 F1 | 	add	fp, #104
33c88     A7 00 68 FC | 	wrlong	#0, fp
33c8c     68 4E 85 F1 | 	sub	fp, #104
33c90     A7 12 02 F6 | 	mov	arg01, fp
33c94     6C 4E 05 F1 | 	add	fp, #108
33c98     A7 14 02 F6 | 	mov	arg02, fp
33c9c     70 4E 85 F1 | 	sub	fp, #112
33ca0     02 16 06 F6 | 	mov	arg03, #2
33ca4     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
33ca8     08 4E 05 F1 | 	add	fp, #8
33cac     A7 FA 61 FC | 	wrlong	result1, fp
33cb0     08 4E 85 F1 | 	sub	fp, #8
33cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
33cb8     E4 01 90 5D |  if_ne	jmp	#LR__5028
33cbc     70 4E 05 F1 | 	add	fp, #112
33cc0     A7 16 02 FB | 	rdlong	arg03, fp
33cc4     64 4E 85 F1 | 	sub	fp, #100
33cc8     A7 16 62 FC | 	wrlong	arg03, fp
33ccc     A7 12 02 F6 | 	mov	arg01, fp
33cd0     08 4E 85 F1 | 	sub	fp, #8
33cd4     A7 14 02 FB | 	rdlong	arg02, fp
33cd8     04 4E 85 F1 | 	sub	fp, #4
33cdc     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
33ce0     08 4E 05 F1 | 	add	fp, #8
33ce4     A7 FA 61 FC | 	wrlong	result1, fp
33ce8     00 FA 4D F2 | 	cmps	result1, #0 wz
33cec     08 4E 85 F1 | 	sub	fp, #8
33cf0     AC 01 90 5D |  if_ne	jmp	#LR__5027
33cf4     37 4E 05 F1 | 	add	fp, #55
33cf8     A7 FA C1 FA | 	rdbyte	result1, fp
33cfc     37 4E 85 F1 | 	sub	fp, #55
33d00     80 FA CD F7 | 	test	result1, #128 wz
33d04     08 4E 05 51 |  if_ne	add	fp, #8
33d08     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33d0c     08 4E 85 51 |  if_ne	sub	fp, #8
33d10     1C 00 90 5D |  if_ne	jmp	#LR__5020
33d14     12 4E 05 F1 | 	add	fp, #18
33d18     A7 FA C1 FA | 	rdbyte	result1, fp
33d1c     12 4E 85 F1 | 	sub	fp, #18
33d20     01 FA CD F7 | 	test	result1, #1 wz
33d24     08 4E 05 51 |  if_ne	add	fp, #8
33d28     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33d2c     08 4E 85 51 |  if_ne	sub	fp, #8
33d30                 | LR__5020
33d30     08 4E 05 F1 | 	add	fp, #8
33d34     A7 FA 09 FB | 	rdlong	result1, fp wz
33d38     08 4E 85 F1 | 	sub	fp, #8
33d3c     C8 00 90 5D |  if_ne	jmp	#LR__5023
33d40     70 4E 05 F1 | 	add	fp, #112
33d44     A7 12 02 FB | 	rdlong	arg01, fp
33d48     48 4E 85 F1 | 	sub	fp, #72
33d4c     A7 14 02 FB | 	rdlong	arg02, fp
33d50     28 4E 85 F1 | 	sub	fp, #40
33d54     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
33d58     6C 4E 05 F1 | 	add	fp, #108
33d5c     A7 FA 61 FC | 	wrlong	result1, fp
33d60     5A 4E 85 F1 | 	sub	fp, #90
33d64     A7 FA C1 FA | 	rdbyte	result1, fp
33d68     12 4E 85 F1 | 	sub	fp, #18
33d6c     10 FA CD F7 | 	test	result1, #16 wz
33d70     94 00 90 AD |  if_e	jmp	#LR__5022
33d74     70 4E 05 F1 | 	add	fp, #112
33d78     A7 FA 01 FB | 	rdlong	result1, fp
33d7c     34 4E 85 F1 | 	sub	fp, #52
33d80     A7 FA 61 FC | 	wrlong	result1, fp
33d84     30 4E 05 F1 | 	add	fp, #48
33d88     A7 16 02 FB | 	rdlong	arg03, fp
33d8c     28 4E 85 F1 | 	sub	fp, #40
33d90     A7 16 62 FC | 	wrlong	arg03, fp
33d94     08 4E 85 F1 | 	sub	fp, #8
33d98     A7 12 02 F6 | 	mov	arg01, fp
33d9c     3C 4E 85 F1 | 	sub	fp, #60
33da0     00 14 06 F6 | 	mov	arg02, #0
33da4     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
33da8     08 4E 05 F1 | 	add	fp, #8
33dac     A7 FA 61 FC | 	wrlong	result1, fp
33db0     08 4E 85 F1 | 	sub	fp, #8
33db4     00 FA 0D F2 | 	cmp	result1, #0 wz
33db8     4C 00 90 5D |  if_ne	jmp	#LR__5021
33dbc     3C 4E 05 F1 | 	add	fp, #60
33dc0     A7 12 02 F6 | 	mov	arg01, fp
33dc4     3C 4E 85 F1 | 	sub	fp, #60
33dc8     00 14 06 F6 | 	mov	arg02, #0
33dcc     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
33dd0     08 4E 05 F1 | 	add	fp, #8
33dd4     A7 FA 61 FC | 	wrlong	result1, fp
33dd8     00 FA 4D F2 | 	cmps	result1, #0 wz
33ddc     08 4E 85 F1 | 	sub	fp, #8
33de0     08 4E 05 A1 |  if_e	add	fp, #8
33de4     A7 0E 68 AC |  if_e	wrlong	#7, fp
33de8     08 4E 85 A1 |  if_e	sub	fp, #8
33dec     08 4E 05 F1 | 	add	fp, #8
33df0     A7 FA 01 FB | 	rdlong	result1, fp
33df4     08 4E 85 F1 | 	sub	fp, #8
33df8     04 FA 0D F2 | 	cmp	result1, #4 wz
33dfc     08 4E 05 A1 |  if_e	add	fp, #8
33e00     A7 00 68 AC |  if_e	wrlong	#0, fp
33e04     08 4E 85 A1 |  if_e	sub	fp, #8
33e08                 | LR__5021
33e08                 | LR__5022
33e08                 | LR__5023
33e08     08 4E 05 F1 | 	add	fp, #8
33e0c     A7 FA 09 FB | 	rdlong	result1, fp wz
33e10     08 4E 85 F1 | 	sub	fp, #8
33e14     88 00 90 5D |  if_ne	jmp	#LR__5026
33e18     0C 4E 05 F1 | 	add	fp, #12
33e1c     A7 12 02 F6 | 	mov	arg01, fp
33e20     0C 4E 85 F1 | 	sub	fp, #12
33e24     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
33e28     08 4E 05 F1 | 	add	fp, #8
33e2c     A7 FA 61 FC | 	wrlong	result1, fp
33e30     08 4E 85 F1 | 	sub	fp, #8
33e34     00 FA 0D F2 | 	cmp	result1, #0 wz
33e38     38 00 90 5D |  if_ne	jmp	#LR__5024
33e3c     6C 4E 05 F1 | 	add	fp, #108
33e40     A7 FA 09 FB | 	rdlong	result1, fp wz
33e44     6C 4E 85 F1 | 	sub	fp, #108
33e48     28 00 90 AD |  if_e	jmp	#LR__5024
33e4c     0C 4E 05 F1 | 	add	fp, #12
33e50     A7 12 02 F6 | 	mov	arg01, fp
33e54     60 4E 05 F1 | 	add	fp, #96
33e58     A7 14 02 FB | 	rdlong	arg02, fp
33e5c     6C 4E 85 F1 | 	sub	fp, #108
33e60     00 16 06 F6 | 	mov	arg03, #0
33e64     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
33e68     08 4E 05 F1 | 	add	fp, #8
33e6c     A7 FA 61 FC | 	wrlong	result1, fp
33e70     08 4E 85 F1 | 	sub	fp, #8
33e74                 | LR__5024
33e74     08 4E 05 F1 | 	add	fp, #8
33e78     A7 FA 09 FB | 	rdlong	result1, fp wz
33e7c     08 4E 85 F1 | 	sub	fp, #8
33e80     1C 00 90 5D |  if_ne	jmp	#LR__5025
33e84     70 4E 05 F1 | 	add	fp, #112
33e88     A7 12 02 FB | 	rdlong	arg01, fp
33e8c     70 4E 85 F1 | 	sub	fp, #112
33e90     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
33e94     08 4E 05 F1 | 	add	fp, #8
33e98     A7 FA 61 FC | 	wrlong	result1, fp
33e9c     08 4E 85 F1 | 	sub	fp, #8
33ea0                 | LR__5025
33ea0                 | LR__5026
33ea0                 | LR__5027
33ea0                 | LR__5028
33ea0                 | ' 			}
33ea0                 | ' 		}
33ea0                 | ' 		;
33ea0                 | ' 	}
33ea0                 | ' 
33ea0                 | ' 	return res ;
33ea0     08 4E 05 F1 | 	add	fp, #8
33ea4     A7 FA 01 FB | 	rdlong	result1, fp
33ea8     08 4E 85 F1 | 	sub	fp, #8
33eac     A7 F0 03 F6 | 	mov	ptra, fp
33eb0     B2 00 A0 FD | 	call	#popregs_
33eb4                 | _fatfs_cc_f_unlink_ret
33eb4     2D 00 64 FD | 	ret
33eb8                 | 
33eb8                 | _fatfs_cc_f_mkdir
33eb8     00 4A 05 F6 | 	mov	COUNT_, #0
33ebc     A8 00 A0 FD | 	call	#pushregs_
33ec0     5C F0 07 F1 | 	add	ptra, #92
33ec4     04 4E 05 F1 | 	add	fp, #4
33ec8     A7 12 62 FC | 	wrlong	arg01, fp
33ecc     A7 12 02 F6 | 	mov	arg01, fp
33ed0     48 4E 05 F1 | 	add	fp, #72
33ed4     A7 14 02 F6 | 	mov	arg02, fp
33ed8     4C 4E 85 F1 | 	sub	fp, #76
33edc     02 16 06 F6 | 	mov	arg03, #2
33ee0     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
33ee4     08 4E 05 F1 | 	add	fp, #8
33ee8     A7 FA 61 FC | 	wrlong	result1, fp
33eec     08 4E 85 F1 | 	sub	fp, #8
33ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
33ef4     C4 02 90 5D |  if_ne	jmp	#LR__5035
33ef8     4C 4E 05 F1 | 	add	fp, #76
33efc     A7 16 02 FB | 	rdlong	arg03, fp
33f00     40 4E 85 F1 | 	sub	fp, #64
33f04     A7 16 62 FC | 	wrlong	arg03, fp
33f08     A7 12 02 F6 | 	mov	arg01, fp
33f0c     08 4E 85 F1 | 	sub	fp, #8
33f10     A7 14 02 FB | 	rdlong	arg02, fp
33f14     04 4E 85 F1 | 	sub	fp, #4
33f18     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
33f1c     08 4E 05 F1 | 	add	fp, #8
33f20     A7 FA 61 FC | 	wrlong	result1, fp
33f24     00 FA 4D F2 | 	cmps	result1, #0 wz
33f28     08 4E 85 F1 | 	sub	fp, #8
33f2c     08 4E 05 A1 |  if_e	add	fp, #8
33f30     A7 10 68 AC |  if_e	wrlong	#8, fp
33f34     08 4E 85 A1 |  if_e	sub	fp, #8
33f38     08 4E 05 F1 | 	add	fp, #8
33f3c     A7 FA 01 FB | 	rdlong	result1, fp
33f40     08 4E 85 F1 | 	sub	fp, #8
33f44     04 FA 0D F2 | 	cmp	result1, #4 wz
33f48     70 02 90 5D |  if_ne	jmp	#LR__5034
33f4c     4C 4E 05 F1 | 	add	fp, #76
33f50     A7 16 02 FB | 	rdlong	arg03, fp
33f54     10 4E 85 F1 | 	sub	fp, #16
33f58     A7 16 62 FC | 	wrlong	arg03, fp
33f5c     A7 12 02 F6 | 	mov	arg01, fp
33f60     3C 4E 85 F1 | 	sub	fp, #60
33f64     00 14 06 F6 | 	mov	arg02, #0
33f68     04 AC BF FD | 	call	#_fatfs_cc_create_chain
33f6c     50 4E 05 F1 | 	add	fp, #80
33f70     A7 FA 61 FC | 	wrlong	result1, fp
33f74     48 4E 85 F1 | 	sub	fp, #72
33f78     A7 00 68 FC | 	wrlong	#0, fp
33f7c     48 4E 05 F1 | 	add	fp, #72
33f80     A7 FA 09 FB | 	rdlong	result1, fp wz
33f84     50 4E 85 F1 | 	sub	fp, #80
33f88     08 4E 05 A1 |  if_e	add	fp, #8
33f8c     A7 0E 68 AC |  if_e	wrlong	#7, fp
33f90     08 4E 85 A1 |  if_e	sub	fp, #8
33f94     50 4E 05 F1 | 	add	fp, #80
33f98     A7 FA 01 FB | 	rdlong	result1, fp
33f9c     50 4E 85 F1 | 	sub	fp, #80
33fa0     01 FA 0D F2 | 	cmp	result1, #1 wz
33fa4     08 4E 05 A1 |  if_e	add	fp, #8
33fa8     A7 04 68 AC |  if_e	wrlong	#2, fp
33fac     08 4E 85 A1 |  if_e	sub	fp, #8
33fb0     50 4E 05 F1 | 	add	fp, #80
33fb4     A7 16 02 FB | 	rdlong	arg03, fp
33fb8     50 4E 85 F1 | 	sub	fp, #80
33fbc     FF FF 7F FF 
33fc0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33fc4     08 4E 05 A1 |  if_e	add	fp, #8
33fc8     A7 02 68 AC |  if_e	wrlong	#1, fp
33fcc     08 4E 85 A1 |  if_e	sub	fp, #8
33fd0     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
33fd4     58 4E 05 F1 | 	add	fp, #88
33fd8     A7 FA 61 FC | 	wrlong	result1, fp
33fdc     50 4E 85 F1 | 	sub	fp, #80
33fe0     A7 FA 09 FB | 	rdlong	result1, fp wz
33fe4     08 4E 85 F1 | 	sub	fp, #8
33fe8     1C 01 90 5D |  if_ne	jmp	#LR__5031
33fec     4C 4E 05 F1 | 	add	fp, #76
33ff0     A7 12 02 FB | 	rdlong	arg01, fp
33ff4     04 4E 05 F1 | 	add	fp, #4
33ff8     A7 14 02 FB | 	rdlong	arg02, fp
33ffc     50 4E 85 F1 | 	sub	fp, #80
34000     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
34004     08 4E 05 F1 | 	add	fp, #8
34008     A7 FA 61 FC | 	wrlong	result1, fp
3400c     00 FA 4D F2 | 	cmps	result1, #0 wz
34010     08 4E 85 F1 | 	sub	fp, #8
34014     F0 00 90 5D |  if_ne	jmp	#LR__5030
34018     4C 4E 05 F1 | 	add	fp, #76
3401c     A7 12 02 FB | 	rdlong	arg01, fp
34020     4C 4E 85 F1 | 	sub	fp, #76
34024     34 12 06 F1 | 	add	arg01, #52
34028     20 14 06 F6 | 	mov	arg02, #32
3402c     0B 16 06 F6 | 	mov	arg03, #11
34030     98 00 A0 FD | 	call	#\builtin_bytefill_
34034     4C 4E 05 F1 | 	add	fp, #76
34038     A7 FA 01 FB | 	rdlong	result1, fp
3403c     34 FA 05 F1 | 	add	result1, #52
34040     FD 5C 48 FC | 	wrbyte	#46, result1
34044     A7 16 02 FB | 	rdlong	arg03, fp
34048     3F 16 06 F1 | 	add	arg03, #63
3404c     0B 21 48 FC | 	wrbyte	#16, arg03
34050     A7 12 02 FB | 	rdlong	arg01, fp
34054     4A 12 06 F1 | 	add	arg01, #74
34058     0C 4E 05 F1 | 	add	fp, #12
3405c     A7 14 02 FB | 	rdlong	arg02, fp
34060     09 15 62 FC | 	wrlong	arg02, arg01
34064     0C 4E 85 F1 | 	sub	fp, #12
34068     A7 14 02 FB | 	rdlong	arg02, fp
3406c     0A 13 02 F6 | 	mov	arg01, arg02
34070     34 14 06 F1 | 	add	arg02, #52
34074     04 4E 05 F1 | 	add	fp, #4
34078     A7 16 02 FB | 	rdlong	arg03, fp
3407c     50 4E 85 F1 | 	sub	fp, #80
34080     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
34084     4C 4E 05 F1 | 	add	fp, #76
34088     A7 14 02 FB | 	rdlong	arg02, fp
3408c     0A 13 02 F6 | 	mov	arg01, arg02
34090     54 12 06 F1 | 	add	arg01, #84
34094     4C 4E 85 F1 | 	sub	fp, #76
34098     34 14 06 F1 | 	add	arg02, #52
3409c     20 16 06 F6 | 	mov	arg03, #32
340a0     74 27 BF FD | 	call	#__system____builtin_memmove
340a4     4C 4E 05 F1 | 	add	fp, #76
340a8     A7 16 02 FB | 	rdlong	arg03, fp
340ac     55 16 06 F1 | 	add	arg03, #85
340b0     0B 5D 48 FC | 	wrbyte	#46, arg03
340b4     38 4E 85 F1 | 	sub	fp, #56
340b8     A7 16 02 FB | 	rdlong	arg03, fp
340bc     40 4E 05 F1 | 	add	fp, #64
340c0     A7 16 62 FC | 	wrlong	arg03, fp
340c4     08 4E 85 F1 | 	sub	fp, #8
340c8     A7 14 02 FB | 	rdlong	arg02, fp
340cc     0A 13 02 F6 | 	mov	arg01, arg02
340d0     54 14 06 F1 | 	add	arg02, #84
340d4     4C 4E 85 F1 | 	sub	fp, #76
340d8     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
340dc     4C 4E 05 F1 | 	add	fp, #76
340e0     A7 16 02 FB | 	rdlong	arg03, fp
340e4     03 16 06 F1 | 	add	arg03, #3
340e8     0B 03 48 FC | 	wrbyte	#1, arg03
340ec     40 4E 85 F1 | 	sub	fp, #64
340f0     A7 12 02 F6 | 	mov	arg01, fp
340f4     0C 4E 85 F1 | 	sub	fp, #12
340f8     44 BA BF FD | 	call	#_fatfs_cc_dir_register
340fc     08 4E 05 F1 | 	add	fp, #8
34100     A7 FA 61 FC | 	wrlong	result1, fp
34104     08 4E 85 F1 | 	sub	fp, #8
34108                 | LR__5030
34108                 | LR__5031
34108     08 4E 05 F1 | 	add	fp, #8
3410c     A7 FA 09 FB | 	rdlong	result1, fp wz
34110     08 4E 85 F1 | 	sub	fp, #8
34114     88 00 90 5D |  if_ne	jmp	#LR__5032
34118     28 4E 05 F1 | 	add	fp, #40
3411c     A7 12 02 FB | 	rdlong	arg01, fp
34120     16 12 06 F1 | 	add	arg01, #22
34124     30 4E 05 F1 | 	add	fp, #48
34128     A7 14 02 FB | 	rdlong	arg02, fp
3412c     09 15 62 FC | 	wrlong	arg02, arg01
34130     0C 4E 85 F1 | 	sub	fp, #12
34134     A7 12 02 FB | 	rdlong	arg01, fp
34138     24 4E 85 F1 | 	sub	fp, #36
3413c     A7 14 02 FB | 	rdlong	arg02, fp
34140     28 4E 05 F1 | 	add	fp, #40
34144     A7 16 02 FB | 	rdlong	arg03, fp
34148     50 4E 85 F1 | 	sub	fp, #80
3414c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
34150     28 4E 05 F1 | 	add	fp, #40
34154     A7 FA 01 FB | 	rdlong	result1, fp
34158     0B FA 05 F1 | 	add	result1, #11
3415c     FD 20 48 FC | 	wrbyte	#16, result1
34160     24 4E 05 F1 | 	add	fp, #36
34164     A7 FA 01 FB | 	rdlong	result1, fp
34168     03 FA 05 F1 | 	add	result1, #3
3416c     FD 02 48 FC | 	wrbyte	#1, result1
34170     44 4E 85 F1 | 	sub	fp, #68
34174     A7 FA 09 FB | 	rdlong	result1, fp wz
34178     08 4E 85 F1 | 	sub	fp, #8
3417c     3C 00 90 5D |  if_ne	jmp	#LR__5033
34180     4C 4E 05 F1 | 	add	fp, #76
34184     A7 12 02 FB | 	rdlong	arg01, fp
34188     4C 4E 85 F1 | 	sub	fp, #76
3418c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
34190     08 4E 05 F1 | 	add	fp, #8
34194     A7 FA 61 FC | 	wrlong	result1, fp
34198     08 4E 85 F1 | 	sub	fp, #8
3419c     1C 00 90 FD | 	jmp	#LR__5033
341a0                 | LR__5032
341a0     3C 4E 05 F1 | 	add	fp, #60
341a4     A7 12 02 F6 | 	mov	arg01, fp
341a8     14 4E 05 F1 | 	add	fp, #20
341ac     A7 14 02 FB | 	rdlong	arg02, fp
341b0     50 4E 85 F1 | 	sub	fp, #80
341b4     00 16 06 F6 | 	mov	arg03, #0
341b8     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
341bc                 | LR__5033
341bc                 | LR__5034
341bc                 | LR__5035
341bc                 | ' 				remove_chain(&sobj, dcl, 0);
341bc                 | ' 			}
341bc                 | ' 		}
341bc                 | ' 		;
341bc                 | ' 	}
341bc                 | ' 
341bc                 | ' 	return res ;
341bc     08 4E 05 F1 | 	add	fp, #8
341c0     A7 FA 01 FB | 	rdlong	result1, fp
341c4     08 4E 85 F1 | 	sub	fp, #8
341c8     A7 F0 03 F6 | 	mov	ptra, fp
341cc     B2 00 A0 FD | 	call	#popregs_
341d0                 | _fatfs_cc_f_mkdir_ret
341d0     2D 00 64 FD | 	ret
341d4                 | 
341d4                 | _fatfs_cc_f_rename
341d4     01 4A 05 F6 | 	mov	COUNT_, #1
341d8     A8 00 A0 FD | 	call	#pushregs_
341dc     9C F0 07 F1 | 	add	ptra, #156
341e0     04 4E 05 F1 | 	add	fp, #4
341e4     A7 12 62 FC | 	wrlong	arg01, fp
341e8     04 4E 05 F1 | 	add	fp, #4
341ec     A7 14 62 FC | 	wrlong	arg02, fp
341f0     A7 12 02 F6 | 	mov	arg01, fp
341f4     08 4E 85 F1 | 	sub	fp, #8
341f8     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
341fc     04 4E 05 F1 | 	add	fp, #4
34200     A7 12 02 F6 | 	mov	arg01, fp
34204     6C 4E 05 F1 | 	add	fp, #108
34208     A7 14 02 F6 | 	mov	arg02, fp
3420c     70 4E 85 F1 | 	sub	fp, #112
34210     02 16 06 F6 | 	mov	arg03, #2
34214     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
34218     0C 4E 05 F1 | 	add	fp, #12
3421c     A7 FA 61 FC | 	wrlong	result1, fp
34220     0C 4E 85 F1 | 	sub	fp, #12
34224     00 FA 0D F2 | 	cmp	result1, #0 wz
34228     44 03 90 5D |  if_ne	jmp	#LR__5053
3422c     70 4E 05 F1 | 	add	fp, #112
34230     A7 16 02 FB | 	rdlong	arg03, fp
34234     60 4E 85 F1 | 	sub	fp, #96
34238     A7 16 62 FC | 	wrlong	arg03, fp
3423c     A7 12 02 F6 | 	mov	arg01, fp
34240     0C 4E 85 F1 | 	sub	fp, #12
34244     A7 14 02 FB | 	rdlong	arg02, fp
34248     04 4E 85 F1 | 	sub	fp, #4
3424c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
34250     0C 4E 05 F1 | 	add	fp, #12
34254     A7 FA 61 FC | 	wrlong	result1, fp
34258     00 FA 4D F2 | 	cmps	result1, #0 wz
3425c     0C 4E 85 F1 | 	sub	fp, #12
34260     1C 00 90 5D |  if_ne	jmp	#LR__5040
34264     3B 4E 05 F1 | 	add	fp, #59
34268     A7 FA C1 FA | 	rdbyte	result1, fp
3426c     3B 4E 85 F1 | 	sub	fp, #59
34270     A0 FA CD F7 | 	test	result1, #160 wz
34274     0C 4E 05 51 |  if_ne	add	fp, #12
34278     A7 0C 68 5C |  if_ne	wrlong	#6, fp
3427c     0C 4E 85 51 |  if_ne	sub	fp, #12
34280                 | LR__5040
34280     0C 4E 05 F1 | 	add	fp, #12
34284     A7 26 0A FB | 	rdlong	local01, fp wz
34288     0C 4E 85 F1 | 	sub	fp, #12
3428c     E0 02 90 5D |  if_ne	jmp	#LR__5052
34290     74 4E 05 F1 | 	add	fp, #116
34294     A7 12 02 F6 | 	mov	arg01, fp
34298     48 4E 85 F1 | 	sub	fp, #72
3429c     A7 14 02 FB | 	rdlong	arg02, fp
342a0     2C 4E 85 F1 | 	sub	fp, #44
342a4     20 16 06 F6 | 	mov	arg03, #32
342a8     6C 25 BF FD | 	call	#__system____builtin_memmove
342ac     40 4E 05 F1 | 	add	fp, #64
342b0     A7 12 02 F6 | 	mov	arg01, fp
342b4     30 4E 85 F1 | 	sub	fp, #48
342b8     A7 14 02 F6 | 	mov	arg02, fp
342bc     10 4E 85 F1 | 	sub	fp, #16
342c0     30 16 06 F6 | 	mov	arg03, #48
342c4     50 25 BF FD | 	call	#__system____builtin_memmove
342c8     40 4E 05 F1 | 	add	fp, #64
342cc     A7 12 02 F6 | 	mov	arg01, fp
342d0     38 4E 85 F1 | 	sub	fp, #56
342d4     A7 14 02 FB | 	rdlong	arg02, fp
342d8     08 4E 85 F1 | 	sub	fp, #8
342dc     34 CA BF FD | 	call	#_fatfs_cc_follow_path
342e0     0C 4E 05 F1 | 	add	fp, #12
342e4     A7 FA 61 FC | 	wrlong	result1, fp
342e8     0C 4E 85 F1 | 	sub	fp, #12
342ec     00 FA 0D F2 | 	cmp	result1, #0 wz
342f0     4C 00 90 5D |  if_ne	jmp	#LR__5043
342f4     48 4E 05 F1 | 	add	fp, #72
342f8     A7 FA 01 FB | 	rdlong	result1, fp
342fc     30 4E 85 F1 | 	sub	fp, #48
34300     A7 16 02 FB | 	rdlong	arg03, fp
34304     18 4E 85 F1 | 	sub	fp, #24
34308     0B FB 09 F2 | 	cmp	result1, arg03 wz
3430c     20 00 90 5D |  if_ne	jmp	#LR__5041
34310     50 4E 05 F1 | 	add	fp, #80
34314     A7 FA 01 FB | 	rdlong	result1, fp
34318     30 4E 85 F1 | 	sub	fp, #48
3431c     A7 16 02 FB | 	rdlong	arg03, fp
34320     20 4E 85 F1 | 	sub	fp, #32
34324     0B FB 09 F2 | 	cmp	result1, arg03 wz
34328     04 26 06 A6 |  if_e	mov	local01, #4
3432c     04 00 90 AD |  if_e	jmp	#LR__5042
34330                 | LR__5041
34330     08 26 06 F6 | 	mov	local01, #8
34334                 | LR__5042
34334     0C 4E 05 F1 | 	add	fp, #12
34338     A7 26 62 FC | 	wrlong	local01, fp
3433c     0C 4E 85 F1 | 	sub	fp, #12
34340                 | LR__5043
34340     0C 4E 05 F1 | 	add	fp, #12
34344     A7 26 02 FB | 	rdlong	local01, fp
34348     0C 4E 85 F1 | 	sub	fp, #12
3434c     04 26 0E F2 | 	cmp	local01, #4 wz
34350     CC 01 90 5D |  if_ne	jmp	#LR__5049
34354     40 4E 05 F1 | 	add	fp, #64
34358     A7 12 02 F6 | 	mov	arg01, fp
3435c     40 4E 85 F1 | 	sub	fp, #64
34360     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
34364     0C 4E 05 F1 | 	add	fp, #12
34368     A7 FA 61 FC | 	wrlong	result1, fp
3436c     0C 4E 85 F1 | 	sub	fp, #12
34370     00 FA 0D F2 | 	cmp	result1, #0 wz
34374     A8 01 90 5D |  if_ne	jmp	#LR__5048
34378     5C 4E 05 F1 | 	add	fp, #92
3437c     A7 12 02 FB | 	rdlong	arg01, fp
34380     38 4E 05 F1 | 	add	fp, #56
34384     A7 12 62 FC | 	wrlong	arg01, fp
34388     0D 12 06 F1 | 	add	arg01, #13
3438c     20 4E 85 F1 | 	sub	fp, #32
34390     A7 14 02 F6 | 	mov	arg02, fp
34394     74 4E 85 F1 | 	sub	fp, #116
34398     0D 14 06 F1 | 	add	arg02, #13
3439c     13 16 06 F6 | 	mov	arg03, #19
343a0     74 24 BF FD | 	call	#__system____builtin_memmove
343a4     94 4E 05 F1 | 	add	fp, #148
343a8     A7 26 02 FB | 	rdlong	local01, fp
343ac     15 4E 85 F1 | 	sub	fp, #21
343b0     A7 FA C1 FA | 	rdbyte	result1, fp
343b4     0B 26 06 F1 | 	add	local01, #11
343b8     13 FB 41 FC | 	wrbyte	result1, local01
343bc     15 4E 05 F1 | 	add	fp, #21
343c0     A7 26 02 FB | 	rdlong	local01, fp
343c4     94 4E 85 F1 | 	sub	fp, #148
343c8     0B 26 06 F1 | 	add	local01, #11
343cc     13 27 C2 FA | 	rdbyte	local01, local01
343d0     10 26 CE F7 | 	test	local01, #16 wz
343d4     24 00 90 5D |  if_ne	jmp	#LR__5044
343d8     94 4E 05 F1 | 	add	fp, #148
343dc     A7 FA 01 FB | 	rdlong	result1, fp
343e0     FD 26 02 F6 | 	mov	local01, result1
343e4     94 4E 85 F1 | 	sub	fp, #148
343e8     0B FA 05 F1 | 	add	result1, #11
343ec     FD FA C1 FA | 	rdbyte	result1, result1
343f0     20 FA 45 F5 | 	or	result1, #32
343f4     0B 26 06 F1 | 	add	local01, #11
343f8     13 FB 41 FC | 	wrbyte	result1, local01
343fc                 | LR__5044
343fc     70 4E 05 F1 | 	add	fp, #112
34400     A7 26 02 FB | 	rdlong	local01, fp
34404     03 26 06 F1 | 	add	local01, #3
34408     13 03 48 FC | 	wrbyte	#1, local01
3440c     24 4E 05 F1 | 	add	fp, #36
34410     A7 26 02 FB | 	rdlong	local01, fp
34414     94 4E 85 F1 | 	sub	fp, #148
34418     0B 26 06 F1 | 	add	local01, #11
3441c     13 27 C2 FA | 	rdbyte	local01, local01
34420     10 26 CE F7 | 	test	local01, #16 wz
34424     F8 00 90 AD |  if_e	jmp	#LR__5047
34428     18 4E 05 F1 | 	add	fp, #24
3442c     A7 16 02 FB | 	rdlong	arg03, fp
34430     30 4E 05 F1 | 	add	fp, #48
34434     A7 26 02 FB | 	rdlong	local01, fp
34438     48 4E 85 F1 | 	sub	fp, #72
3443c     13 17 0A F2 | 	cmp	arg03, local01 wz
34440     DC 00 90 AD |  if_e	jmp	#LR__5047
34444     70 4E 05 F1 | 	add	fp, #112
34448     A7 12 02 FB | 	rdlong	arg01, fp
3444c     09 27 02 F6 | 	mov	local01, arg01
34450     24 4E 05 F1 | 	add	fp, #36
34454     A7 14 02 FB | 	rdlong	arg02, fp
34458     94 4E 85 F1 | 	sub	fp, #148
3445c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
34460     FD 14 02 F6 | 	mov	arg02, result1
34464     13 13 02 F6 | 	mov	arg01, local01
34468     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
3446c     98 4E 05 F1 | 	add	fp, #152
34470     A7 FA 61 FC | 	wrlong	result1, fp
34474     00 FA 4D F2 | 	cmps	result1, #0 wz
34478     98 4E 85 F1 | 	sub	fp, #152
3447c     0C 4E 05 A1 |  if_e	add	fp, #12
34480     A7 04 68 AC |  if_e	wrlong	#2, fp
34484     0C 4E 85 A1 |  if_e	sub	fp, #12
34488     94 00 90 AD |  if_e	jmp	#LR__5046
3448c     70 4E 05 F1 | 	add	fp, #112
34490     A7 12 02 FB | 	rdlong	arg01, fp
34494     28 4E 05 F1 | 	add	fp, #40
34498     A7 14 02 FB | 	rdlong	arg02, fp
3449c     98 4E 85 F1 | 	sub	fp, #152
344a0     4C A0 BF FD | 	call	#_fatfs_cc_move_window
344a4     0C 4E 05 F1 | 	add	fp, #12
344a8     A7 FA 61 FC | 	wrlong	result1, fp
344ac     64 4E 05 F1 | 	add	fp, #100
344b0     A7 26 02 FB | 	rdlong	local01, fp
344b4     54 26 06 F1 | 	add	local01, #84
344b8     24 4E 05 F1 | 	add	fp, #36
344bc     A7 26 62 FC | 	wrlong	local01, fp
344c0     88 4E 85 F1 | 	sub	fp, #136
344c4     A7 26 0A FB | 	rdlong	local01, fp wz
344c8     0C 4E 85 F1 | 	sub	fp, #12
344cc     50 00 90 5D |  if_ne	jmp	#LR__5045
344d0     94 4E 05 F1 | 	add	fp, #148
344d4     A7 26 02 FB | 	rdlong	local01, fp
344d8     94 4E 85 F1 | 	sub	fp, #148
344dc     01 26 06 F1 | 	add	local01, #1
344e0     13 27 C2 FA | 	rdbyte	local01, local01
344e4     2E 26 0E F2 | 	cmp	local01, #46 wz
344e8     34 00 90 5D |  if_ne	jmp	#LR__5045
344ec     70 4E 05 F1 | 	add	fp, #112
344f0     A7 12 02 FB | 	rdlong	arg01, fp
344f4     24 4E 05 F1 | 	add	fp, #36
344f8     A7 14 02 FB | 	rdlong	arg02, fp
344fc     4C 4E 85 F1 | 	sub	fp, #76
34500     A7 16 02 FB | 	rdlong	arg03, fp
34504     48 4E 85 F1 | 	sub	fp, #72
34508     50 AD BF FD | 	call	#_fatfs_cc_st_clust
3450c     70 4E 05 F1 | 	add	fp, #112
34510     A7 26 02 FB | 	rdlong	local01, fp
34514     70 4E 85 F1 | 	sub	fp, #112
34518     03 26 06 F1 | 	add	local01, #3
3451c     13 03 48 FC | 	wrbyte	#1, local01
34520                 | LR__5045
34520                 | LR__5046
34520                 | LR__5047
34520                 | LR__5048
34520                 | LR__5049
34520     0C 4E 05 F1 | 	add	fp, #12
34524     A7 26 0A FB | 	rdlong	local01, fp wz
34528     0C 4E 85 F1 | 	sub	fp, #12
3452c     40 00 90 5D |  if_ne	jmp	#LR__5051
34530     10 4E 05 F1 | 	add	fp, #16
34534     A7 12 02 F6 | 	mov	arg01, fp
34538     10 4E 85 F1 | 	sub	fp, #16
3453c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
34540     0C 4E 05 F1 | 	add	fp, #12
34544     A7 FA 61 FC | 	wrlong	result1, fp
34548     0C 4E 85 F1 | 	sub	fp, #12
3454c     00 FA 0D F2 | 	cmp	result1, #0 wz
34550     1C 00 90 5D |  if_ne	jmp	#LR__5050
34554     70 4E 05 F1 | 	add	fp, #112
34558     A7 12 02 FB | 	rdlong	arg01, fp
3455c     70 4E 85 F1 | 	sub	fp, #112
34560     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
34564     0C 4E 05 F1 | 	add	fp, #12
34568     A7 FA 61 FC | 	wrlong	result1, fp
3456c     0C 4E 85 F1 | 	sub	fp, #12
34570                 | LR__5050
34570                 | LR__5051
34570                 | LR__5052
34570                 | LR__5053
34570                 | ' 					res = sync_fs(fs);
34570                 | ' 				}
34570                 | ' 			}
34570                 | ' 
34570                 | ' 		}
34570                 | ' 		;
34570                 | ' 	}
34570                 | ' 
34570                 | ' 	return res ;
34570     0C 4E 05 F1 | 	add	fp, #12
34574     A7 FA 01 FB | 	rdlong	result1, fp
34578     0C 4E 85 F1 | 	sub	fp, #12
3457c     A7 F0 03 F6 | 	mov	ptra, fp
34580     B2 00 A0 FD | 	call	#popregs_
34584                 | _fatfs_cc_f_rename_ret
34584     2D 00 64 FD | 	ret
34588                 | 
34588                 | _fatfs_cc_time
34588     00 4A 05 F6 | 	mov	COUNT_, #0
3458c     A8 00 A0 FD | 	call	#pushregs_
34590     14 F0 07 F1 | 	add	ptra, #20
34594     04 4E 05 F1 | 	add	fp, #4
34598     A7 12 62 FC | 	wrlong	arg01, fp
3459c     04 4E 05 F1 | 	add	fp, #4
345a0     A7 12 02 F6 | 	mov	arg01, fp
345a4     08 4E 85 F1 | 	sub	fp, #8
345a8     00 14 06 F6 | 	mov	arg02, #0
345ac     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
345b0     08 4E 05 F1 | 	add	fp, #8
345b4     A7 FA 01 FB | 	rdlong	result1, fp
345b8     08 4E 05 F1 | 	add	fp, #8
345bc     A7 FA 61 FC | 	wrlong	result1, fp
345c0     0C 4E 85 F1 | 	sub	fp, #12
345c4     A7 FA 09 FB | 	rdlong	result1, fp wz
345c8     04 4E 85 F1 | 	sub	fp, #4
345cc     18 00 90 AD |  if_e	jmp	#LR__5060
345d0     04 4E 05 F1 | 	add	fp, #4
345d4     A7 FA 01 FB | 	rdlong	result1, fp
345d8     0C 4E 05 F1 | 	add	fp, #12
345dc     A7 14 02 FB | 	rdlong	arg02, fp
345e0     10 4E 85 F1 | 	sub	fp, #16
345e4     FD 14 62 FC | 	wrlong	arg02, result1
345e8                 | LR__5060
345e8                 | '         *tp = now;
345e8                 | '     return now;
345e8     10 4E 05 F1 | 	add	fp, #16
345ec     A7 FA 01 FB | 	rdlong	result1, fp
345f0     10 4E 85 F1 | 	sub	fp, #16
345f4     A7 F0 03 F6 | 	mov	ptra, fp
345f8     B2 00 A0 FD | 	call	#popregs_
345fc                 | _fatfs_cc_time_ret
345fc     2D 00 64 FD | 	ret
34600                 | 
34600                 | _fatfs_cc_mktime
34600     06 4A 05 F6 | 	mov	COUNT_, #6
34604     A8 00 A0 FD | 	call	#pushregs_
34608     09 27 02 F6 | 	mov	local01, arg01
3460c     14 26 06 F1 | 	add	local01, #20
34610     13 13 02 FB | 	rdlong	arg01, local01
34614     14 26 86 F1 | 	sub	local01, #20
34618     46 12 56 F2 | 	cmps	arg01, #70 wc
3461c                 | '                 return (time_t) -1;
3461c     01 FA 65 C6 |  if_b	neg	result1, #1
34620     7C 01 90 CD |  if_b	jmp	#LR__5074
34624     03 00 00 FF 
34628     6C 29 06 F6 | 	mov	local02, ##1900
3462c     14 26 06 F1 | 	add	local01, #20
34630     13 FB 01 FB | 	rdlong	result1, local01
34634     FD 28 02 F1 | 	add	local02, result1
34638     08 26 86 F1 | 	sub	local01, #8
3463c     13 2B 02 FB | 	rdlong	local03, local01
34640     01 2A 86 F1 | 	sub	local03, #1
34644     04 26 06 F1 | 	add	local01, #4
34648     13 13 02 FB | 	rdlong	arg01, local01
3464c     10 26 86 F1 | 	sub	local01, #16
34650     02 12 66 F0 | 	shl	arg01, #2
34654     02 00 00 FF 
34658     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
3465c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34660     09 FB 01 FB | 	rdlong	result1, arg01
34664     FD 2A 02 F1 | 	add	local03, result1
34668     14 13 02 F6 | 	mov	arg01, local02
3466c     02 00 00 FF 
34670     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
34674     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
34678     00 FA 0D F2 | 	cmp	result1, #0 wz
3467c     1C 00 90 AD |  if_e	jmp	#LR__5070
34680     00 2C 06 F6 | 	mov	local04, #0
34684     10 26 06 F1 | 	add	local01, #16
34688     13 FB 01 FB | 	rdlong	result1, local01
3468c     10 26 86 F1 | 	sub	local01, #16
34690     02 FA 55 F2 | 	cmps	result1, #2 wc
34694     01 2C 06 36 |  if_ae	mov	local04, #1
34698     04 00 90 FD | 	jmp	#LR__5071
3469c                 | LR__5070
3469c     00 2C 06 F6 | 	mov	local04, #0
346a0                 | LR__5071
346a0     04 26 06 F1 | 	add	local01, #4
346a4     13 FB 01 FB | 	rdlong	result1, local01
346a8     04 26 86 F1 | 	sub	local01, #4
346ac     13 2F 02 FB | 	rdlong	local05, local01
346b0     08 26 06 F1 | 	add	local01, #8
346b4     13 13 02 FB | 	rdlong	arg01, local01
346b8     07 00 00 FF 
346bc     10 12 06 FD | 	qmul	arg01, ##3600
346c0     16 2B 02 F1 | 	add	local03, local04
346c4     FD 2C 02 F6 | 	mov	local04, result1
346c8     04 2C 66 F0 | 	shl	local04, #4
346cc     FD 2C 82 F1 | 	sub	local04, result1
346d0     02 2C 66 F0 | 	shl	local04, #2
346d4     16 2F 02 F1 | 	add	local05, local04
346d8     08 26 86 F1 | 	sub	local01, #8
346dc     18 2C 62 FD | 	getqx	local04
346e0     A8 00 00 FF 
346e4     80 2B 06 FD | 	qmul	local03, ##86400
346e8     16 2F 02 F1 | 	add	local05, local04
346ec     14 2B 02 F6 | 	mov	local03, local02
346f0     03 00 00 FF 
346f4     B2 2B 86 F1 | 	sub	local03, ##1970
346f8     18 2C 62 FD | 	getqx	local04
346fc     99 F0 00 FF 
34700     80 2B 06 FD | 	qmul	local03, ##31536000
34704     16 2F 02 F1 | 	add	local05, local04
34708     14 2B 02 F6 | 	mov	local03, local02
3470c     03 00 00 FF 
34710     B1 2B 86 F1 | 	sub	local03, ##1969
34714     15 31 52 F6 | 	abs	local06, local03 wc
34718     02 30 46 F0 | 	shr	local06, #2
3471c     18 31 82 F6 | 	negc	local06, local06
34720     03 00 00 FF 
34724     D1 29 56 F2 | 	cmps	local02, ##2001 wc
34728     18 2C 62 FD | 	getqx	local04
3472c     16 2F 02 F1 | 	add	local05, local04
34730     18 00 90 CD |  if_b	jmp	#LR__5072
34734     03 00 00 FF 
34738     D0 29 86 F1 | 	sub	local02, ##2000
3473c     14 2D 52 F6 | 	abs	local04, local02 wc
34740     64 2C 16 FD | 	qdiv	local04, #100
34744     18 2C 62 FD | 	getqx	local04
34748     16 31 A2 F3 | 	sumnc	local06, local04
3474c                 | LR__5072
3474c     A8 00 00 FF 
34750     80 31 06 FD | 	qmul	local06, ##86400
34754     18 30 62 FD | 	getqx	local06
34758     18 2F 02 F1 | 	add	local05, local06
3475c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
34760     02 00 00 FF 
34764     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
34768     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
3476c     18 2F 02 F1 | 	add	local05, local06
34770     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
34774     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34778     02 00 00 FF 
3477c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
34780     01 2A 0E F2 | 	cmp	local03, #1 wz
34784     14 00 90 5D |  if_ne	jmp	#LR__5073
34788     13 13 02 F6 | 	mov	arg01, local01
3478c     DC 19 B0 FD | 	call	#_fatfs_cc___indst
34790     00 FA 0D F2 | 	cmp	result1, #0 wz
34794     07 00 00 5F 
34798     10 2E 86 51 |  if_ne	sub	local05, ##3600
3479c                 | LR__5073
3479c                 | '                 s -=  (3600L) ;
3479c                 | ' 
3479c                 | '         return s;
3479c     17 FB 01 F6 | 	mov	result1, local05
347a0                 | LR__5074
347a0     A7 F0 03 F6 | 	mov	ptra, fp
347a4     B2 00 A0 FD | 	call	#popregs_
347a8                 | _fatfs_cc_mktime_ret
347a8     2D 00 64 FD | 	ret
347ac                 | 
347ac                 | _fatfs_cc__gmtime_r
347ac     03 4A 05 F6 | 	mov	COUNT_, #3
347b0     A8 00 A0 FD | 	call	#pushregs_
347b4     09 27 02 FB | 	rdlong	local01, arg01
347b8     A8 00 00 FF 
347bc     80 27 16 FD | 	qdiv	local01, ##86400
347c0     18 FA 61 FD | 	getqx	result1
347c4     04 FA 05 F1 | 	add	result1, #4
347c8     07 FA 15 FD | 	qdiv	result1, #7
347cc     18 14 06 F1 | 	add	arg02, #24
347d0     D1 7F 27 FF 
347d4     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
347d8     D1 7F 27 3F 
347dc     00 26 86 31 |  if_ae	sub	local01, ##1325376000
347e0     03 00 00 3F 
347e4     DC 29 06 36 |  if_ae	mov	local02, ##2012
347e8     03 00 00 CF 
347ec     B2 29 06 C6 |  if_b	mov	local02, ##1970
347f0                 | ' 	  year = 1970;
347f0                 | ' 	}
347f0                 | ' 
347f0                 | ' 	for(;;) {
347f0     19 FA 61 FD | 	getqy	result1
347f4     0A FB 61 FC | 	wrlong	result1, arg02
347f8     18 14 86 F1 | 	sub	arg02, #24
347fc                 | LR__5080
347fc     14 13 02 F6 | 	mov	arg01, local02
34800     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34804     00 FA 0D F2 | 	cmp	result1, #0 wz
34808     42 F1 00 5F 
3480c     00 2B 06 56 |  if_ne	mov	local03, ##31622400
34810     99 F0 00 AF 
34814     80 2B 06 A6 |  if_e	mov	local03, ##31536000
34818     15 27 12 F2 | 	cmp	local01, local03 wc
3481c                 | ' 	    break;
3481c     01 28 06 31 |  if_ae	add	local02, #1
34820     15 27 82 31 |  if_ae	sub	local01, local03
34824     D4 FF 9F 3D |  if_ae	jmp	#LR__5080
34828     A8 00 00 FF 
3482c     80 27 16 FD | 	qdiv	local01, ##86400
34830     14 2B 02 F6 | 	mov	local03, local02
34834     03 00 00 FF 
34838     6C 2B 86 F1 | 	sub	local03, ##1900
3483c     14 14 06 F1 | 	add	arg02, #20
34840     0A 2B 62 FC | 	wrlong	local03, arg02
34844     08 14 06 F1 | 	add	arg02, #8
34848     14 13 02 F6 | 	mov	arg01, local02
3484c     18 28 62 FD | 	getqx	local02
34850     0A 29 62 FC | 	wrlong	local02, arg02
34854     1C 14 86 F1 | 	sub	arg02, #28
34858     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
3485c     00 FA 0D F2 | 	cmp	result1, #0 wz
34860     1D 2A 06 56 |  if_ne	mov	local03, #29
34864     1C 2A 06 A6 |  if_e	mov	local03, #28
34868     02 00 00 FF 
3486c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
34870     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
34874     02 00 00 FF 
34878     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
3487c                 | ' 
3487c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
3487c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
3487c     00 12 06 F6 | 	mov	arg01, #0
34880     97 2A 48 FB | 	callpa	#(@LR__5082-@LR__5081)>>2,fcache_load_ptr_
34884                 | LR__5081
34884     09 2B 02 F6 | 	mov	local03, arg01
34888     02 2A 66 F0 | 	shl	local03, #2
3488c     02 00 00 FF 
34890     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
34894     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
34898     15 2B 02 FB | 	rdlong	local03, local03
3489c     15 29 52 F2 | 	cmps	local02, local03 wc
348a0     02 00 00 FF 
348a4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
348a8     2C 00 90 CD |  if_b	jmp	#LR__5083
348ac     09 2B 02 F6 | 	mov	local03, arg01
348b0     02 2A 66 F0 | 	shl	local03, #2
348b4     02 00 00 FF 
348b8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
348bc     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
348c0     15 2B 02 FB | 	rdlong	local03, local03
348c4     15 29 82 F1 | 	sub	local02, local03
348c8     01 12 06 F1 | 	add	arg01, #1
348cc     02 00 00 FF 
348d0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
348d4     AC FF 9F FD | 	jmp	#LR__5081
348d8                 | LR__5082
348d8                 | LR__5083
348d8     A8 00 00 FF 
348dc     80 27 16 FD | 	qdiv	local01, ##86400
348e0     10 14 06 F1 | 	add	arg02, #16
348e4     0A 13 62 FC | 	wrlong	arg01, arg02
348e8     01 28 06 F1 | 	add	local02, #1
348ec     04 14 86 F1 | 	sub	arg02, #4
348f0     0A 29 62 FC | 	wrlong	local02, arg02
348f4     19 26 62 FD | 	getqy	local01
348f8     07 00 00 FF 
348fc     10 26 16 FD | 	qdiv	local01, ##3600
34900     18 2A 62 FD | 	getqx	local03
34904     07 00 00 FF 
34908     10 26 16 FD | 	qdiv	local01, ##3600
3490c     04 14 86 F1 | 	sub	arg02, #4
34910     0A 2B 62 FC | 	wrlong	local03, arg02
34914     19 26 62 FD | 	getqy	local01
34918     3C 26 16 FD | 	qdiv	local01, #60
3491c     18 2A 62 FD | 	getqx	local03
34920     3C 26 16 FD | 	qdiv	local01, #60
34924     04 14 86 F1 | 	sub	arg02, #4
34928     0A 2B 62 FC | 	wrlong	local03, arg02
3492c     04 14 86 F1 | 	sub	arg02, #4
34930                 | '         stm->tm_isdst = 0;
34930                 | ' 
34930                 | ' ;
34930                 | '         return stm;
34930     0A FB 01 F6 | 	mov	result1, arg02
34934     19 2A 62 FD | 	getqy	local03
34938     0A 2B 62 FC | 	wrlong	local03, arg02
3493c     20 14 06 F1 | 	add	arg02, #32
34940     0A 01 68 FC | 	wrlong	#0, arg02
34944     A7 F0 03 F6 | 	mov	ptra, fp
34948     B2 00 A0 FD | 	call	#popregs_
3494c                 | _fatfs_cc__gmtime_r_ret
3494c     2D 00 64 FD | 	ret
34950                 | 
34950                 | _fatfs_cc__tzset
34950     B2 01 00 FF 
34954     95 12 06 F6 | 	mov	arg01, ##@LR__5395
34958     34 00 B0 FD | 	call	#_fatfs_cc_getenv
3495c     FD 12 02 F6 | 	mov	arg01, result1
34960     02 00 00 FF 
34964     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
34968     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
3496c     02 00 00 FF 
34970     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
34974     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
34978     02 00 00 FF 
3497c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
34980     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
34984     02 00 00 FF 
34988     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
3498c                 | _fatfs_cc__tzset_ret
3498c     2D 00 64 FD | 	ret
34990                 | 
34990                 | _fatfs_cc_getenv
34990     06 4A 05 F6 | 	mov	COUNT_, #6
34994     A8 00 A0 FD | 	call	#pushregs_
34998     09 27 02 F6 | 	mov	local01, arg01
3499c     09 29 02 F6 | 	mov	local02, arg01
349a0     97 06 48 FB | 	callpa	#(@LR__5091-@LR__5090)>>2,fcache_load_ptr_
349a4                 | LR__5090
349a4     14 FB C9 FA | 	rdbyte	result1, local02 wz
349a8     01 28 06 51 |  if_ne	add	local02, #1
349ac     F4 FF 9F 5D |  if_ne	jmp	#LR__5090
349b0                 | LR__5091
349b0     09 29 82 F1 | 	sub	local02, arg01
349b4     14 FB 01 F6 | 	mov	result1, local02
349b8     02 00 00 FF 
349bc     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
349c0     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
349c4     02 00 00 FF 
349c8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
349cc                 | '             return 0;
349cc     00 FA 05 A6 |  if_e	mov	result1, #0
349d0     5C 00 90 AD |  if_e	jmp	#LR__5094
349d4                 | ' 
349d4                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
349d4     02 00 00 FF 
349d8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
349dc     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
349e0     02 00 00 FF 
349e4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
349e8                 | LR__5092
349e8     15 2D 0A FB | 	rdlong	local04, local03 wz
349ec     3C 00 90 AD |  if_e	jmp	#LR__5093
349f0     16 13 02 F6 | 	mov	arg01, local04
349f4     13 15 02 F6 | 	mov	arg02, local01
349f8     14 17 02 F6 | 	mov	arg03, local02
349fc     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
34a00     00 FA 0D F2 | 	cmp	result1, #0 wz
34a04     14 2F 02 A6 |  if_e	mov	local05, local02
34a08     16 2F 02 A1 |  if_e	add	local05, local04
34a0c     17 31 C2 AA |  if_e	rdbyte	local06, local05
34a10     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
34a14                 | ' 			return name+len+1;
34a14     14 2D 02 A1 |  if_e	add	local04, local02
34a18     01 2C 06 A1 |  if_e	add	local04, #1
34a1c     16 FB 01 A6 |  if_e	mov	result1, local04
34a20     0C 00 90 AD |  if_e	jmp	#LR__5094
34a24     04 2A 06 F1 | 	add	local03, #4
34a28     BC FF 9F FD | 	jmp	#LR__5092
34a2c                 | LR__5093
34a2c                 | ' 	}
34a2c                 | ' 	return 0;
34a2c     00 FA 05 F6 | 	mov	result1, #0
34a30                 | LR__5094
34a30     A7 F0 03 F6 | 	mov	ptra, fp
34a34     B2 00 A0 FD | 	call	#popregs_
34a38                 | _fatfs_cc_getenv_ret
34a38     2D 00 64 FD | 	ret
34a3c                 | 
34a3c                 | _fatfs_cc__get_fattime
34a3c     00 4A 05 F6 | 	mov	COUNT_, #0
34a40     A8 00 A0 FD | 	call	#pushregs_
34a44     34 F0 07 F1 | 	add	ptra, #52
34a48     00 12 06 F6 | 	mov	arg01, #0
34a4c     38 FB BF FD | 	call	#_fatfs_cc_time
34a50     04 4E 05 F1 | 	add	fp, #4
34a54     A7 FA 61 FC | 	wrlong	result1, fp
34a58     A7 12 02 F6 | 	mov	arg01, fp
34a5c     0C 4E 05 F1 | 	add	fp, #12
34a60     A7 14 02 F6 | 	mov	arg02, fp
34a64     10 4E 85 F1 | 	sub	fp, #16
34a68     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
34a6c     24 4E 05 F1 | 	add	fp, #36
34a70     A7 14 02 FB | 	rdlong	arg02, fp
34a74     50 14 86 F1 | 	sub	arg02, #80
34a78     09 14 66 F0 | 	shl	arg02, #9
34a7c     04 4E 85 F1 | 	sub	fp, #4
34a80     A7 FA 01 FB | 	rdlong	result1, fp
34a84     01 FA 05 F1 | 	add	result1, #1
34a88     05 FA 65 F0 | 	shl	result1, #5
34a8c     FD 14 42 F5 | 	or	arg02, result1
34a90     04 4E 85 F1 | 	sub	fp, #4
34a94     A7 FA 01 FB | 	rdlong	result1, fp
34a98     FD 14 42 F5 | 	or	arg02, result1
34a9c     14 4E 85 F1 | 	sub	fp, #20
34aa0     A7 14 62 FC | 	wrlong	arg02, fp
34aa4     10 4E 05 F1 | 	add	fp, #16
34aa8     A7 14 02 FB | 	rdlong	arg02, fp
34aac     0B 14 66 F0 | 	shl	arg02, #11
34ab0     04 4E 85 F1 | 	sub	fp, #4
34ab4     A7 FA 01 FB | 	rdlong	result1, fp
34ab8     05 FA 65 F0 | 	shl	result1, #5
34abc     FD 14 42 F5 | 	or	arg02, result1
34ac0     04 4E 85 F1 | 	sub	fp, #4
34ac4     A7 FA 01 FB | 	rdlong	result1, fp
34ac8     FD 14 42 F5 | 	or	arg02, result1
34acc     04 4E 85 F1 | 	sub	fp, #4
34ad0     A7 14 62 FC | 	wrlong	arg02, fp
34ad4                 | ' 
34ad4                 | '     now = time(0);
34ad4                 | '     _gmtime_r (&now, &date);
34ad4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
34ad4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
34ad4                 | '     return (ffdate << 16) | fftime;
34ad4     04 4E 85 F1 | 	sub	fp, #4
34ad8     A7 FA 01 FB | 	rdlong	result1, fp
34adc     10 FA 65 F0 | 	shl	result1, #16
34ae0     08 4E 85 F1 | 	sub	fp, #8
34ae4     0A FB 41 F5 | 	or	result1, arg02
34ae8     A7 F0 03 F6 | 	mov	ptra, fp
34aec     B2 00 A0 FD | 	call	#popregs_
34af0                 | _fatfs_cc__get_fattime_ret
34af0     2D 00 64 FD | 	ret
34af4                 | 
34af4                 | _fatfs_cc_unixtime_1031
34af4     00 4A 05 F6 | 	mov	COUNT_, #0
34af8     A8 00 A0 FD | 	call	#pushregs_
34afc     34 F0 07 F1 | 	add	ptra, #52
34b00     04 4E 05 F1 | 	add	fp, #4
34b04     A7 12 62 FC | 	wrlong	arg01, fp
34b08     04 4E 05 F1 | 	add	fp, #4
34b0c     A7 14 62 FC | 	wrlong	arg02, fp
34b10     04 4E 85 F1 | 	sub	fp, #4
34b14     A7 14 02 FB | 	rdlong	arg02, fp
34b18     09 14 46 F0 | 	shr	arg02, #9
34b1c     7F 14 06 F5 | 	and	arg02, #127
34b20     50 FA 05 F6 | 	mov	result1, #80
34b24     0A FB 01 F1 | 	add	result1, arg02
34b28     20 4E 05 F1 | 	add	fp, #32
34b2c     A7 FA 61 FC | 	wrlong	result1, fp
34b30     20 4E 85 F1 | 	sub	fp, #32
34b34     A7 FA 01 FB | 	rdlong	result1, fp
34b38     05 FA 45 F0 | 	shr	result1, #5
34b3c     FD FA 41 F8 | 	getnib	result1, result1, #0
34b40     01 FA 85 F1 | 	sub	result1, #1
34b44     1C 4E 05 F1 | 	add	fp, #28
34b48     A7 FA 61 FC | 	wrlong	result1, fp
34b4c     1C 4E 85 F1 | 	sub	fp, #28
34b50     A7 FA 01 FB | 	rdlong	result1, fp
34b54     1F FA 05 F5 | 	and	result1, #31
34b58     18 4E 05 F1 | 	add	fp, #24
34b5c     A7 FA 61 FC | 	wrlong	result1, fp
34b60     14 4E 85 F1 | 	sub	fp, #20
34b64     A7 FA 01 FB | 	rdlong	result1, fp
34b68     0B FA 45 F0 | 	shr	result1, #11
34b6c     1F FA 05 F5 | 	and	result1, #31
34b70     10 4E 05 F1 | 	add	fp, #16
34b74     A7 FA 61 FC | 	wrlong	result1, fp
34b78     10 4E 85 F1 | 	sub	fp, #16
34b7c     A7 FA 01 FB | 	rdlong	result1, fp
34b80     05 FA 45 F0 | 	shr	result1, #5
34b84     3F FA 05 F5 | 	and	result1, #63
34b88     0C 4E 05 F1 | 	add	fp, #12
34b8c     A7 FA 61 FC | 	wrlong	result1, fp
34b90     0C 4E 85 F1 | 	sub	fp, #12
34b94     A7 14 02 FB | 	rdlong	arg02, fp
34b98     1F 14 06 F5 | 	and	arg02, #31
34b9c     01 14 66 F0 | 	shl	arg02, #1
34ba0     08 4E 05 F1 | 	add	fp, #8
34ba4     A7 14 62 FC | 	wrlong	arg02, fp
34ba8     A7 12 02 F6 | 	mov	arg01, fp
34bac     10 4E 85 F1 | 	sub	fp, #16
34bb0     4C FA BF FD | 	call	#_fatfs_cc_mktime
34bb4     0C 4E 05 F1 | 	add	fp, #12
34bb8     A7 FA 61 FC | 	wrlong	result1, fp
34bbc                 | ' 
34bbc                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
34bbc                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
34bbc                 | '     date.tm_mday = (dosdate & 0x1f);
34bbc                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
34bbc                 | '     date.tm_min = (dostime >> 5) & 0x3f;
34bbc                 | '     date.tm_sec = (dostime & 0x1f) << 1;
34bbc                 | ' 
34bbc                 | '     t = mktime(&date);
34bbc                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34bbc                 | '     return t;
34bbc     0C 4E 85 F1 | 	sub	fp, #12
34bc0     A7 F0 03 F6 | 	mov	ptra, fp
34bc4     B2 00 A0 FD | 	call	#popregs_
34bc8                 | _fatfs_cc_unixtime_1031_ret
34bc8     2D 00 64 FD | 	ret
34bcc                 | 
34bcc                 | _fatfs_cc__set_dos_error_1033
34bcc     09 01 02 F6 | 	mov	_var01, arg01
34bd0                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34bd0                 | '     switch (derr) {
34bd0     14 00 26 F3 | 	fle	_var01, #20
34bd4     30 00 62 FD | 	jmprel	_var01
34bd8                 | LR__5100
34bd8     50 00 90 FD | 	jmp	#LR__5101
34bdc     84 00 90 FD | 	jmp	#LR__5115
34be0     80 00 90 FD | 	jmp	#LR__5116
34be4     7C 00 90 FD | 	jmp	#LR__5117
34be8     48 00 90 FD | 	jmp	#LR__5102
34bec     44 00 90 FD | 	jmp	#LR__5103
34bf0     40 00 90 FD | 	jmp	#LR__5104
34bf4     44 00 90 FD | 	jmp	#LR__5105
34bf8     48 00 90 FD | 	jmp	#LR__5107
34bfc     54 00 90 FD | 	jmp	#LR__5110
34c00     38 00 90 FD | 	jmp	#LR__5106
34c04     4C 00 90 FD | 	jmp	#LR__5111
34c08     48 00 90 FD | 	jmp	#LR__5112
34c0c     44 00 90 FD | 	jmp	#LR__5113
34c10     50 00 90 FD | 	jmp	#LR__5118
34c14     4C 00 90 FD | 	jmp	#LR__5118
34c18     48 00 90 FD | 	jmp	#LR__5118
34c1c     2C 00 90 FD | 	jmp	#LR__5108
34c20     38 00 90 FD | 	jmp	#LR__5114
34c24     2C 00 90 FD | 	jmp	#LR__5109
34c28     38 00 90 FD | 	jmp	#LR__5118
34c2c                 | LR__5101
34c2c     00 02 06 F6 | 	mov	_var02, #0
34c30                 | '         r = 0;
34c30                 | '         break;
34c30     34 00 90 FD | 	jmp	#LR__5119
34c34                 | LR__5102
34c34                 | LR__5103
34c34                 | LR__5104
34c34     04 02 06 F6 | 	mov	_var02, #4
34c38                 | '         r =  4 ;
34c38                 | '         break;
34c38     2C 00 90 FD | 	jmp	#LR__5119
34c3c                 | LR__5105
34c3c                 | LR__5106
34c3c     06 02 06 F6 | 	mov	_var02, #6
34c40                 | '         r =  6 ;
34c40                 | '         break;
34c40     24 00 90 FD | 	jmp	#LR__5119
34c44                 | LR__5107
34c44     09 02 06 F6 | 	mov	_var02, #9
34c48                 | '         r =  9 ;
34c48                 | '         break;
34c48     1C 00 90 FD | 	jmp	#LR__5119
34c4c                 | LR__5108
34c4c     07 02 06 F6 | 	mov	_var02, #7
34c50                 | '         r =  7 ;
34c50                 | '         break;
34c50     14 00 90 FD | 	jmp	#LR__5119
34c54                 | LR__5109
34c54                 | LR__5110
34c54                 | LR__5111
34c54                 | LR__5112
34c54                 | LR__5113
34c54     0A 02 06 F6 | 	mov	_var02, #10
34c58                 | '         r =  10 ;
34c58                 | '         break;
34c58     0C 00 90 FD | 	jmp	#LR__5119
34c5c                 | LR__5114
34c5c     0B 02 06 F6 | 	mov	_var02, #11
34c60                 | '         r =  11 ;
34c60                 | '         break;
34c60     04 00 90 FD | 	jmp	#LR__5119
34c64                 | LR__5115
34c64                 | LR__5116
34c64                 | LR__5117
34c64                 | LR__5118
34c64     0C 02 06 F6 | 	mov	_var02, #12
34c68                 | '         r =  12 ;
34c68                 | '         break;
34c68                 | LR__5119
34c68                 | '     }
34c68                 | '     return _seterror(r);
34c68     00 02 4E F2 | 	cmps	_var02, #0 wz
34c6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
34c70     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
34c74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
34c78     01 FA 65 56 |  if_ne	neg	result1, #1
34c7c     00 FA 05 A6 |  if_e	mov	result1, #0
34c80                 | _fatfs_cc__set_dos_error_1033_ret
34c80     2D 00 64 FD | 	ret
34c84                 | 
34c84                 | _fatfs_cc_v_creat
34c84     04 4A 05 F6 | 	mov	COUNT_, #4
34c88     A8 00 A0 FD | 	call	#pushregs_
34c8c     09 27 02 F6 | 	mov	local01, arg01
34c90     0A 29 02 F6 | 	mov	local02, arg02
34c94     03 00 00 FF 
34c98     3C 12 06 F6 | 	mov	arg01, ##1596
34c9c                 | '     return _gc_alloc(size);
34c9c     10 14 06 F6 | 	mov	arg02, #16
34ca0     28 5E BF FD | 	call	#__system___gc_doalloc
34ca4     FD 2A 0A F6 | 	mov	local03, result1 wz
34ca8                 | '       return _seterror( 7 );
34ca8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34cac     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34cb0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34cb4     01 FA 65 A6 |  if_e	neg	result1, #1
34cb8     58 00 90 AD |  if_e	jmp	#LR__5121
34cbc     15 13 02 F6 | 	mov	arg01, local03
34cc0     00 14 06 F6 | 	mov	arg02, #0
34cc4     03 00 00 FF 
34cc8     3C 16 06 F6 | 	mov	arg03, ##1596
34ccc     98 00 A0 FD | 	call	#\builtin_bytefill_
34cd0     02 00 00 FF 
34cd4     14 2A 06 F1 | 	add	local03, ##1044
34cd8     15 13 02 F6 | 	mov	arg01, local03
34cdc     02 00 00 FF 
34ce0     14 2A 86 F1 | 	sub	local03, ##1044
34ce4     14 15 02 F6 | 	mov	arg02, local02
34ce8     07 16 06 F6 | 	mov	arg03, #7
34cec     B4 CC BF FD | 	call	#_fatfs_cc_f_open
34cf0     FD 2C 0A F6 | 	mov	local04, result1 wz
34cf4     14 00 90 AD |  if_e	jmp	#LR__5120
34cf8     15 13 02 F6 | 	mov	arg01, local03
34cfc                 | '     return _gc_free(ptr);
34cfc     D8 5E BF FD | 	call	#__system___gc_free
34d00                 | '     free(f);
34d00                 | '     return _set_dos_error(r);
34d00     16 13 02 F6 | 	mov	arg01, local04
34d04     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1033
34d08     08 00 90 FD | 	jmp	#LR__5121
34d0c                 | LR__5120
34d0c     13 2B 62 FC | 	wrlong	local03, local01
34d10                 | '   }
34d10                 | '   fil->vfsdata = f;
34d10                 | '   return 0;
34d10     00 FA 05 F6 | 	mov	result1, #0
34d14                 | LR__5121
34d14     A7 F0 03 F6 | 	mov	ptra, fp
34d18     B2 00 A0 FD | 	call	#popregs_
34d1c                 | _fatfs_cc_v_creat_ret
34d1c     2D 00 64 FD | 	ret
34d20                 | 
34d20                 | _fatfs_cc_v_close
34d20     02 4A 05 F6 | 	mov	COUNT_, #2
34d24     A8 00 A0 FD | 	call	#pushregs_
34d28     09 27 02 FB | 	rdlong	local01, arg01
34d2c     02 00 00 FF 
34d30     14 26 06 F1 | 	add	local01, ##1044
34d34     13 13 02 F6 | 	mov	arg01, local01
34d38     02 00 00 FF 
34d3c     14 26 86 F1 | 	sub	local01, ##1044
34d40     DC E3 BF FD | 	call	#_fatfs_cc_f_close
34d44     FD 28 02 F6 | 	mov	local02, result1
34d48     13 13 02 F6 | 	mov	arg01, local01
34d4c                 | '     return _gc_free(ptr);
34d4c     88 5E BF FD | 	call	#__system___gc_free
34d50                 | '     FAT_FIL *f = fil->vfsdata;
34d50                 | '     r=f_close(&f->fil);
34d50                 | '     free(f);
34d50                 | '     return _set_dos_error(r);
34d50     14 13 02 F6 | 	mov	arg01, local02
34d54     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1033
34d58     A7 F0 03 F6 | 	mov	ptra, fp
34d5c     B2 00 A0 FD | 	call	#popregs_
34d60                 | _fatfs_cc_v_close_ret
34d60     2D 00 64 FD | 	ret
34d64                 | 
34d64                 | _fatfs_cc_v_opendir
34d64     04 4A 05 F6 | 	mov	COUNT_, #4
34d68     A8 00 A0 FD | 	call	#pushregs_
34d6c     09 27 02 F6 | 	mov	local01, arg01
34d70     0A 29 02 F6 | 	mov	local02, arg02
34d74     30 12 06 F6 | 	mov	arg01, #48
34d78                 | '     return _gc_alloc(size);
34d78     10 14 06 F6 | 	mov	arg02, #16
34d7c     4C 5D BF FD | 	call	#__system___gc_doalloc
34d80     FD 2A 0A F6 | 	mov	local03, result1 wz
34d84                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34d84                 | '       return _seterror( 7 );
34d84     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34d88     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34d8c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34d90     01 FA 65 A6 |  if_e	neg	result1, #1
34d94     34 00 90 AD |  if_e	jmp	#LR__5131
34d98     14 15 02 F6 | 	mov	arg02, local02
34d9c     15 13 02 F6 | 	mov	arg01, local03
34da0     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
34da4     FD 2C 0A F6 | 	mov	local04, result1 wz
34da8     14 00 90 AD |  if_e	jmp	#LR__5130
34dac     15 13 02 F6 | 	mov	arg01, local03
34db0                 | '     return _gc_free(ptr);
34db0     24 5E BF FD | 	call	#__system___gc_free
34db4                 | '         free(f);
34db4                 | '         return _set_dos_error(r);
34db4     16 13 02 F6 | 	mov	arg01, local04
34db8     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1033
34dbc     0C 00 90 FD | 	jmp	#LR__5131
34dc0                 | LR__5130
34dc0     04 26 06 F1 | 	add	local01, #4
34dc4     13 2B 62 FC | 	wrlong	local03, local01
34dc8                 | '     }
34dc8                 | '     dir->vfsdata = f;
34dc8                 | '     return 0;
34dc8     00 FA 05 F6 | 	mov	result1, #0
34dcc                 | LR__5131
34dcc     A7 F0 03 F6 | 	mov	ptra, fp
34dd0     B2 00 A0 FD | 	call	#popregs_
34dd4                 | _fatfs_cc_v_opendir_ret
34dd4     2D 00 64 FD | 	ret
34dd8                 | 
34dd8                 | _fatfs_cc_v_closedir
34dd8     02 4A 05 F6 | 	mov	COUNT_, #2
34ddc     A8 00 A0 FD | 	call	#pushregs_
34de0     04 12 06 F1 | 	add	arg01, #4
34de4     09 27 02 FB | 	rdlong	local01, arg01
34de8     13 13 02 F6 | 	mov	arg01, local01
34dec     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
34df0     FD 28 02 F6 | 	mov	local02, result1
34df4     13 13 02 F6 | 	mov	arg01, local01
34df8                 | '     return _gc_free(ptr);
34df8     DC 5D BF FD | 	call	#__system___gc_free
34dfc     00 28 0E F2 | 	cmp	local02, #0 wz
34e00     14 13 02 56 |  if_ne	mov	arg01, local02
34e04     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1033
34e08                 | '     return r;
34e08     14 FB 01 F6 | 	mov	result1, local02
34e0c     A7 F0 03 F6 | 	mov	ptra, fp
34e10     B2 00 A0 FD | 	call	#popregs_
34e14                 | _fatfs_cc_v_closedir_ret
34e14     2D 00 64 FD | 	ret
34e18                 | 
34e18                 | _fatfs_cc_v_readdir
34e18     01 4A 05 F6 | 	mov	COUNT_, #1
34e1c     A8 00 A0 FD | 	call	#pushregs_
34e20     2C F1 07 F1 | 	add	ptra, #300
34e24     04 4E 05 F1 | 	add	fp, #4
34e28     A7 12 62 FC | 	wrlong	arg01, fp
34e2c     04 4E 05 F1 | 	add	fp, #4
34e30     A7 14 62 FC | 	wrlong	arg02, fp
34e34     04 4E 85 F1 | 	sub	fp, #4
34e38     A7 16 02 FB | 	rdlong	arg03, fp
34e3c     04 16 06 F1 | 	add	arg03, #4
34e40     0B 13 02 FB | 	rdlong	arg01, arg03
34e44     08 4E 05 F1 | 	add	fp, #8
34e48     A7 14 02 F6 | 	mov	arg02, fp
34e4c     0C 4E 85 F1 | 	sub	fp, #12
34e50     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
34e54     28 4F 05 F1 | 	add	fp, #296
34e58     A7 FA 61 FC | 	wrlong	result1, fp
34e5c     28 4F 85 F1 | 	sub	fp, #296
34e60     00 FA 0D F2 | 	cmp	result1, #0 wz
34e64     14 00 90 AD |  if_e	jmp	#LR__5140
34e68                 | '         return _set_dos_error(r);
34e68     28 4F 05 F1 | 	add	fp, #296
34e6c     A7 12 02 FB | 	rdlong	arg01, fp
34e70     28 4F 85 F1 | 	sub	fp, #296
34e74     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1033
34e78     C4 00 90 FD | 	jmp	#LR__5143
34e7c                 | LR__5140
34e7c     28 4E 05 F1 | 	add	fp, #40
34e80     A7 16 CA FA | 	rdbyte	arg03, fp wz
34e84     28 4E 85 F1 | 	sub	fp, #40
34e88                 | '         return -1;
34e88     01 FA 65 A6 |  if_e	neg	result1, #1
34e8c     B0 00 90 AD |  if_e	jmp	#LR__5143
34e90     08 4E 05 F1 | 	add	fp, #8
34e94     A7 12 02 FB | 	rdlong	arg01, fp
34e98     20 4E 05 F1 | 	add	fp, #32
34e9c     A7 14 02 F6 | 	mov	arg02, fp
34ea0     28 4E 85 F1 | 	sub	fp, #40
34ea4     3F 16 06 F6 | 	mov	arg03, #63
34ea8     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
34eac     08 4E 05 F1 | 	add	fp, #8
34eb0     A7 16 02 FB | 	rdlong	arg03, fp
34eb4     3F 16 06 F1 | 	add	arg03, #63
34eb8     0B 01 48 FC | 	wrbyte	#0, arg03
34ebc     0C 4E 05 F1 | 	add	fp, #12
34ec0     A7 16 C2 FA | 	rdbyte	arg03, fp
34ec4     14 4E 85 F1 | 	sub	fp, #20
34ec8     10 16 CE F7 | 	test	arg03, #16 wz
34ecc     18 00 90 AD |  if_e	jmp	#LR__5141
34ed0     08 4E 05 F1 | 	add	fp, #8
34ed4     A7 16 02 FB | 	rdlong	arg03, fp
34ed8     08 4E 85 F1 | 	sub	fp, #8
34edc     50 16 06 F1 | 	add	arg03, #80
34ee0     0B 03 48 FC | 	wrbyte	#1, arg03
34ee4     14 00 90 FD | 	jmp	#LR__5142
34ee8                 | LR__5141
34ee8     08 4E 05 F1 | 	add	fp, #8
34eec     A7 16 02 FB | 	rdlong	arg03, fp
34ef0     08 4E 85 F1 | 	sub	fp, #8
34ef4     50 16 06 F1 | 	add	arg03, #80
34ef8     0B 01 48 FC | 	wrbyte	#0, arg03
34efc                 | LR__5142
34efc     08 4E 05 F1 | 	add	fp, #8
34f00     A7 16 02 FB | 	rdlong	arg03, fp
34f04     04 4E 05 F1 | 	add	fp, #4
34f08     A7 14 02 FB | 	rdlong	arg02, fp
34f0c     48 16 06 F1 | 	add	arg03, #72
34f10     0B 15 62 FC | 	wrlong	arg02, arg03
34f14     04 4E 85 F1 | 	sub	fp, #4
34f18     A7 26 02 FB | 	rdlong	local01, fp
34f1c     08 4E 05 F1 | 	add	fp, #8
34f20     A7 12 E2 FA | 	rdword	arg01, fp
34f24     02 4E 05 F1 | 	add	fp, #2
34f28     A7 14 E2 FA | 	rdword	arg02, fp
34f2c     12 4E 85 F1 | 	sub	fp, #18
34f30     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1031
34f34     4C 26 06 F1 | 	add	local01, #76
34f38     13 FB 61 FC | 	wrlong	result1, local01
34f3c                 | '         ent->d_type =  (0) ;
34f3c                 | '     }
34f3c                 | '     ent->d_size = finfo.fsize;
34f3c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
34f3c                 | '     return 0;
34f3c     00 FA 05 F6 | 	mov	result1, #0
34f40                 | LR__5143
34f40     A7 F0 03 F6 | 	mov	ptra, fp
34f44     B2 00 A0 FD | 	call	#popregs_
34f48                 | _fatfs_cc_v_readdir_ret
34f48     2D 00 64 FD | 	ret
34f4c                 | 
34f4c                 | _fatfs_cc_v_stat
34f4c     03 4A 05 F6 | 	mov	COUNT_, #3
34f50     A8 00 A0 FD | 	call	#pushregs_
34f54     30 F1 07 F1 | 	add	ptra, #304
34f58     04 4E 05 F1 | 	add	fp, #4
34f5c     A7 12 62 FC | 	wrlong	arg01, fp
34f60     04 4E 05 F1 | 	add	fp, #4
34f64     A7 14 62 FC | 	wrlong	arg02, fp
34f68     08 4E 85 F1 | 	sub	fp, #8
34f6c     0A 13 02 F6 | 	mov	arg01, arg02
34f70     00 14 06 F6 | 	mov	arg02, #0
34f74     30 16 06 F6 | 	mov	arg03, #48
34f78     98 00 A0 FD | 	call	#\builtin_bytefill_
34f7c     04 4E 05 F1 | 	add	fp, #4
34f80     A7 FA 01 FB | 	rdlong	result1, fp
34f84     04 4E 85 F1 | 	sub	fp, #4
34f88     FD FA C9 FA | 	rdbyte	result1, result1 wz
34f8c     2C 00 90 AD |  if_e	jmp	#LR__5150
34f90     04 4E 05 F1 | 	add	fp, #4
34f94     A7 FA 01 FB | 	rdlong	result1, fp
34f98     04 4E 85 F1 | 	sub	fp, #4
34f9c     FD FA C1 FA | 	rdbyte	result1, result1
34fa0     2E FA 0D F2 | 	cmp	result1, #46 wz
34fa4     04 4E 05 A1 |  if_e	add	fp, #4
34fa8     A7 26 02 AB |  if_e	rdlong	local01, fp
34fac     04 4E 85 A1 |  if_e	sub	fp, #4
34fb0     01 26 06 A1 |  if_e	add	local01, #1
34fb4     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
34fb8     18 00 90 5D |  if_ne	jmp	#LR__5151
34fbc                 | LR__5150
34fbc     18 4E 05 F1 | 	add	fp, #24
34fc0     A7 20 48 FC | 	wrbyte	#16, fp
34fc4     0C 4E 85 F1 | 	sub	fp, #12
34fc8     A7 00 68 FC | 	wrlong	#0, fp
34fcc     0C 4E 85 F1 | 	sub	fp, #12
34fd0     24 00 90 FD | 	jmp	#LR__5152
34fd4                 | LR__5151
34fd4     04 4E 05 F1 | 	add	fp, #4
34fd8     A7 12 02 FB | 	rdlong	arg01, fp
34fdc     0C 4E 05 F1 | 	add	fp, #12
34fe0     A7 14 02 F6 | 	mov	arg02, fp
34fe4     10 4E 85 F1 | 	sub	fp, #16
34fe8     AC EB BF FD | 	call	#_fatfs_cc_f_stat
34fec     0C 4E 05 F1 | 	add	fp, #12
34ff0     A7 FA 61 FC | 	wrlong	result1, fp
34ff4     0C 4E 85 F1 | 	sub	fp, #12
34ff8                 | LR__5152
34ff8     0C 4E 05 F1 | 	add	fp, #12
34ffc     A7 28 0A FB | 	rdlong	local02, fp wz
35000     0C 4E 85 F1 | 	sub	fp, #12
35004     14 00 90 AD |  if_e	jmp	#LR__5153
35008                 | '         return _set_dos_error(r);
35008     0C 4E 05 F1 | 	add	fp, #12
3500c     A7 12 02 FB | 	rdlong	arg01, fp
35010     0C 4E 85 F1 | 	sub	fp, #12
35014     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1033
35018     14 01 90 FD | 	jmp	#LR__5154
3501c                 | LR__5153
3501c     2C 4F 05 F1 | 	add	fp, #300
35020     A7 48 6A FC | 	wrlong	#292, fp
35024     14 4F 85 F1 | 	sub	fp, #276
35028     A7 2A C2 FA | 	rdbyte	local03, fp
3502c     18 4E 85 F1 | 	sub	fp, #24
35030     01 2A CE F7 | 	test	local03, #1 wz
35034     2C 4F 05 A1 |  if_e	add	fp, #300
35038     A7 2A 02 AB |  if_e	rdlong	local03, fp
3503c     92 2A 46 A5 |  if_e	or	local03, #146
35040     A7 2A 62 AC |  if_e	wrlong	local03, fp
35044     2C 4F 85 A1 |  if_e	sub	fp, #300
35048     18 4E 05 F1 | 	add	fp, #24
3504c     A7 2A C2 FA | 	rdbyte	local03, fp
35050     18 4E 85 F1 | 	sub	fp, #24
35054     10 2A CE F7 | 	test	local03, #16 wz
35058     2C 4F 05 51 |  if_ne	add	fp, #300
3505c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
35060     08 00 00 5F 
35064     49 2A 46 55 |  if_ne	or	local03, ##4169
35068     A7 2A 62 5C |  if_ne	wrlong	local03, fp
3506c     2C 4F 85 51 |  if_ne	sub	fp, #300
35070     08 4E 05 F1 | 	add	fp, #8
35074     A7 2A 02 FB | 	rdlong	local03, fp
35078     24 4F 05 F1 | 	add	fp, #292
3507c     A7 28 02 FB | 	rdlong	local02, fp
35080     08 2A 06 F1 | 	add	local03, #8
35084     15 29 62 FC | 	wrlong	local02, local03
35088     24 4F 85 F1 | 	sub	fp, #292
3508c     A7 2A 02 FB | 	rdlong	local03, fp
35090     0C 2A 06 F1 | 	add	local03, #12
35094     15 03 68 FC | 	wrlong	#1, local03
35098     A7 2A 02 FB | 	rdlong	local03, fp
3509c     08 4E 05 F1 | 	add	fp, #8
350a0     A7 28 02 FB | 	rdlong	local02, fp
350a4     18 2A 06 F1 | 	add	local03, #24
350a8     15 29 62 FC | 	wrlong	local02, local03
350ac     08 4E 85 F1 | 	sub	fp, #8
350b0     A7 2A 02 FB | 	rdlong	local03, fp
350b4     1C 2A 06 F1 | 	add	local03, #28
350b8     01 00 80 FF 
350bc     15 01 68 FC | 	wrlong	##512, local03
350c0     A7 28 02 FB | 	rdlong	local02, fp
350c4     14 2B 02 F6 | 	mov	local03, local02
350c8     18 28 06 F1 | 	add	local02, #24
350cc     14 29 02 FB | 	rdlong	local02, local02
350d0     FF 29 06 F1 | 	add	local02, #511
350d4     14 29 52 F6 | 	abs	local02, local02 wc
350d8     09 28 46 F0 | 	shr	local02, #9
350dc     14 29 82 F6 | 	negc	local02, local02
350e0     20 2A 06 F1 | 	add	local03, #32
350e4     15 29 62 FC | 	wrlong	local02, local03
350e8     A7 28 02 FB | 	rdlong	local02, fp
350ec     14 2B 02 F6 | 	mov	local03, local02
350f0     14 27 02 F6 | 	mov	local01, local02
350f4     0C 4E 05 F1 | 	add	fp, #12
350f8     A7 12 E2 FA | 	rdword	arg01, fp
350fc     02 4E 05 F1 | 	add	fp, #2
35100     A7 14 E2 FA | 	rdword	arg02, fp
35104     16 4E 85 F1 | 	sub	fp, #22
35108     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1031
3510c     2C 26 06 F1 | 	add	local01, #44
35110     13 FB 61 FC | 	wrlong	result1, local01
35114     28 28 06 F1 | 	add	local02, #40
35118     14 FB 61 FC | 	wrlong	result1, local02
3511c     24 2A 06 F1 | 	add	local03, #36
35120     15 FB 61 FC | 	wrlong	result1, local03
35124                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
35124                 | '     }
35124                 | '     buf->st_mode = mode;
35124                 | '     buf->st_nlink = 1;
35124                 | '     buf->st_size = finfo.fsize;
35124                 | '     buf->st_blksize = 512;
35124                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
35124                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
35124                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35124                 | '     return r;
35124     0C 4E 05 F1 | 	add	fp, #12
35128     A7 FA 01 FB | 	rdlong	result1, fp
3512c     0C 4E 85 F1 | 	sub	fp, #12
35130                 | LR__5154
35130     A7 F0 03 F6 | 	mov	ptra, fp
35134     B2 00 A0 FD | 	call	#popregs_
35138                 | _fatfs_cc_v_stat_ret
35138     2D 00 64 FD | 	ret
3513c                 | 
3513c                 | _fatfs_cc_v_read
3513c     00 4A 05 F6 | 	mov	COUNT_, #0
35140     A8 00 A0 FD | 	call	#pushregs_
35144     1C F0 07 F1 | 	add	ptra, #28
35148     04 4E 05 F1 | 	add	fp, #4
3514c     A7 12 62 FC | 	wrlong	arg01, fp
35150     04 4E 05 F1 | 	add	fp, #4
35154     A7 14 62 FC | 	wrlong	arg02, fp
35158     04 4E 05 F1 | 	add	fp, #4
3515c     A7 16 62 FC | 	wrlong	arg03, fp
35160     08 4E 85 F1 | 	sub	fp, #8
35164     A7 12 02 FB | 	rdlong	arg01, fp
35168     09 13 0A FB | 	rdlong	arg01, arg01 wz
3516c     0C 4E 05 F1 | 	add	fp, #12
35170     A7 12 62 FC | 	wrlong	arg01, fp
35174     10 4E 85 F1 | 	sub	fp, #16
35178                 | '         return _seterror( 5 );
35178     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3517c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35180     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35184     01 FA 65 A6 |  if_e	neg	result1, #1
35188     B8 00 90 AD |  if_e	jmp	#LR__5162
3518c     10 4E 05 F1 | 	add	fp, #16
35190     A7 12 02 FB | 	rdlong	arg01, fp
35194     02 00 00 FF 
35198     14 12 06 F1 | 	add	arg01, ##1044
3519c     08 4E 85 F1 | 	sub	fp, #8
351a0     A7 14 02 FB | 	rdlong	arg02, fp
351a4     04 4E 05 F1 | 	add	fp, #4
351a8     A7 16 02 FB | 	rdlong	arg03, fp
351ac     0C 4E 05 F1 | 	add	fp, #12
351b0     A7 18 02 F6 | 	mov	arg04, fp
351b4     18 4E 85 F1 | 	sub	fp, #24
351b8     C4 CE BF FD | 	call	#_fatfs_cc_f_read
351bc     14 4E 05 F1 | 	add	fp, #20
351c0     A7 FA 61 FC | 	wrlong	result1, fp
351c4     14 4E 85 F1 | 	sub	fp, #20
351c8     00 FA 0D F2 | 	cmp	result1, #0 wz
351cc     34 00 90 AD |  if_e	jmp	#LR__5160
351d0     04 4E 05 F1 | 	add	fp, #4
351d4     A7 18 02 FB | 	rdlong	arg04, fp
351d8     0C 17 02 F6 | 	mov	arg03, arg04
351dc     08 18 06 F1 | 	add	arg04, #8
351e0     0C 19 02 FB | 	rdlong	arg04, arg04
351e4     20 18 46 F5 | 	or	arg04, #32
351e8     08 16 06 F1 | 	add	arg03, #8
351ec     0B 19 62 FC | 	wrlong	arg04, arg03
351f0                 | '         fil->state |=  (0x20) ;
351f0                 | '         return _set_dos_error(r);
351f0     10 4E 05 F1 | 	add	fp, #16
351f4     A7 12 02 FB | 	rdlong	arg01, fp
351f8     14 4E 85 F1 | 	sub	fp, #20
351fc     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1033
35200     40 00 90 FD | 	jmp	#LR__5162
35204                 | LR__5160
35204     18 4E 05 F1 | 	add	fp, #24
35208     A7 FA 09 FB | 	rdlong	result1, fp wz
3520c     18 4E 85 F1 | 	sub	fp, #24
35210     24 00 90 5D |  if_ne	jmp	#LR__5161
35214     04 4E 05 F1 | 	add	fp, #4
35218     A7 FA 01 FB | 	rdlong	result1, fp
3521c     FD 18 02 F6 | 	mov	arg04, result1
35220     04 4E 85 F1 | 	sub	fp, #4
35224     08 FA 05 F1 | 	add	result1, #8
35228     FD FA 01 FB | 	rdlong	result1, result1
3522c     10 FA 45 F5 | 	or	result1, #16
35230     08 18 06 F1 | 	add	arg04, #8
35234     0C FB 61 FC | 	wrlong	result1, arg04
35238                 | LR__5161
35238                 | '         fil->state |=  (0x10) ;
35238                 | '     }
35238                 | '     return x;
35238     18 4E 05 F1 | 	add	fp, #24
3523c     A7 FA 01 FB | 	rdlong	result1, fp
35240     18 4E 85 F1 | 	sub	fp, #24
35244                 | LR__5162
35244     A7 F0 03 F6 | 	mov	ptra, fp
35248     B2 00 A0 FD | 	call	#popregs_
3524c                 | _fatfs_cc_v_read_ret
3524c     2D 00 64 FD | 	ret
35250                 | 
35250                 | _fatfs_cc_v_write
35250     00 4A 05 F6 | 	mov	COUNT_, #0
35254     A8 00 A0 FD | 	call	#pushregs_
35258     1C F0 07 F1 | 	add	ptra, #28
3525c     04 4E 05 F1 | 	add	fp, #4
35260     A7 12 62 FC | 	wrlong	arg01, fp
35264     04 4E 05 F1 | 	add	fp, #4
35268     A7 14 62 FC | 	wrlong	arg02, fp
3526c     04 4E 05 F1 | 	add	fp, #4
35270     A7 16 62 FC | 	wrlong	arg03, fp
35274     08 4E 85 F1 | 	sub	fp, #8
35278     A7 12 02 FB | 	rdlong	arg01, fp
3527c     09 13 0A FB | 	rdlong	arg01, arg01 wz
35280     0C 4E 05 F1 | 	add	fp, #12
35284     A7 12 62 FC | 	wrlong	arg01, fp
35288     10 4E 85 F1 | 	sub	fp, #16
3528c                 | '         return _seterror( 5 );
3528c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35290     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35294     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35298     01 FA 65 A6 |  if_e	neg	result1, #1
3529c     84 00 90 AD |  if_e	jmp	#LR__5171
352a0     10 4E 05 F1 | 	add	fp, #16
352a4     A7 12 02 FB | 	rdlong	arg01, fp
352a8     02 00 00 FF 
352ac     14 12 06 F1 | 	add	arg01, ##1044
352b0     08 4E 85 F1 | 	sub	fp, #8
352b4     A7 14 02 FB | 	rdlong	arg02, fp
352b8     04 4E 05 F1 | 	add	fp, #4
352bc     A7 16 02 FB | 	rdlong	arg03, fp
352c0     0C 4E 05 F1 | 	add	fp, #12
352c4     A7 18 02 F6 | 	mov	arg04, fp
352c8     18 4E 85 F1 | 	sub	fp, #24
352cc     4C D4 BF FD | 	call	#_fatfs_cc_f_write
352d0     14 4E 05 F1 | 	add	fp, #20
352d4     A7 FA 61 FC | 	wrlong	result1, fp
352d8     14 4E 85 F1 | 	sub	fp, #20
352dc     00 FA 0D F2 | 	cmp	result1, #0 wz
352e0     34 00 90 AD |  if_e	jmp	#LR__5170
352e4     04 4E 05 F1 | 	add	fp, #4
352e8     A7 18 02 FB | 	rdlong	arg04, fp
352ec     0C 17 02 F6 | 	mov	arg03, arg04
352f0     08 18 06 F1 | 	add	arg04, #8
352f4     0C 19 02 FB | 	rdlong	arg04, arg04
352f8     20 18 46 F5 | 	or	arg04, #32
352fc     08 16 06 F1 | 	add	arg03, #8
35300     0B 19 62 FC | 	wrlong	arg04, arg03
35304                 | '         fil->state |=  (0x20) ;
35304                 | '         return _set_dos_error(r);
35304     10 4E 05 F1 | 	add	fp, #16
35308     A7 12 02 FB | 	rdlong	arg01, fp
3530c     14 4E 85 F1 | 	sub	fp, #20
35310     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1033
35314     0C 00 90 FD | 	jmp	#LR__5171
35318                 | LR__5170
35318                 | '     }
35318                 | '     return x;
35318     18 4E 05 F1 | 	add	fp, #24
3531c     A7 FA 01 FB | 	rdlong	result1, fp
35320     18 4E 85 F1 | 	sub	fp, #24
35324                 | LR__5171
35324     A7 F0 03 F6 | 	mov	ptra, fp
35328     B2 00 A0 FD | 	call	#popregs_
3532c                 | _fatfs_cc_v_write_ret
3532c     2D 00 64 FD | 	ret
35330                 | 
35330                 | _fatfs_cc_v_lseek
35330     04 4A 05 F6 | 	mov	COUNT_, #4
35334     A8 00 A0 FD | 	call	#pushregs_
35338     0A 27 02 F6 | 	mov	local01, arg02
3533c     0B 29 02 F6 | 	mov	local02, arg03
35340     09 2B 02 FB | 	rdlong	local03, arg01
35344     02 00 00 FF 
35348     14 2A 0E F1 | 	add	local03, ##1044 wz
3534c                 | '         return _seterror( 5 );
3534c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35350     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35354     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35358     01 FA 65 A6 |  if_e	neg	result1, #1
3535c     4C 00 90 AD |  if_e	jmp	#LR__5182
35360     00 28 0E F2 | 	cmp	local02, #0 wz
35364     24 00 90 AD |  if_e	jmp	#LR__5180
35368     01 28 0E F2 | 	cmp	local02, #1 wz
3536c     14 2A 06 A1 |  if_e	add	local03, #20
35370     15 2D 02 AB |  if_e	rdlong	local04, local03
35374     14 2A 86 A1 |  if_e	sub	local03, #20
35378     16 27 02 A1 |  if_e	add	local01, local04
3537c     0C 2A 06 51 |  if_ne	add	local03, #12
35380     15 2D 02 5B |  if_ne	rdlong	local04, local03
35384     0C 2A 86 51 |  if_ne	sub	local03, #12
35388     16 27 02 51 |  if_ne	add	local01, local04
3538c                 | LR__5180
3538c     13 15 02 F6 | 	mov	arg02, local01
35390     15 13 02 F6 | 	mov	arg01, local03
35394     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
35398     FD 12 0A F6 | 	mov	arg01, result1 wz
3539c     08 00 90 AD |  if_e	jmp	#LR__5181
353a0                 | '         return _set_dos_error(result);
353a0     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1033
353a4     04 00 90 FD | 	jmp	#LR__5182
353a8                 | LR__5181
353a8                 | '     }
353a8                 | '     return offset;
353a8     13 FB 01 F6 | 	mov	result1, local01
353ac                 | LR__5182
353ac     A7 F0 03 F6 | 	mov	ptra, fp
353b0     B2 00 A0 FD | 	call	#popregs_
353b4                 | _fatfs_cc_v_lseek_ret
353b4     2D 00 64 FD | 	ret
353b8                 | 
353b8                 | _fatfs_cc_v_ioctl
353b8                 | ' {
353b8                 | '     return _seterror( 10 );
353b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
353bc     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
353c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
353c4     01 FA 65 F6 | 	neg	result1, #1
353c8                 | _fatfs_cc_v_ioctl_ret
353c8     2D 00 64 FD | 	ret
353cc                 | 
353cc                 | _fatfs_cc_v_mkdir
353cc     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
353d0     FD 12 02 F6 | 	mov	arg01, result1
353d4                 | ' 
353d4                 | '     r = f_mkdir(name);
353d4                 | '     return _set_dos_error(r);
353d4     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1033
353d8                 | _fatfs_cc_v_mkdir_ret
353d8     2D 00 64 FD | 	ret
353dc                 | 
353dc                 | _fatfs_cc_v_remove
353dc     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
353e0     FD 12 02 F6 | 	mov	arg01, result1
353e4                 | ' 
353e4                 | '     r = f_unlink(name);
353e4                 | '     return _set_dos_error(r);
353e4     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1033
353e8                 | _fatfs_cc_v_remove_ret
353e8     2D 00 64 FD | 	ret
353ec                 | 
353ec                 | _fatfs_cc_v_rmdir
353ec     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
353f0     FD 12 02 F6 | 	mov	arg01, result1
353f4                 | ' 
353f4                 | '     r = f_unlink(name);
353f4                 | '     return _set_dos_error(r);
353f4     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1033
353f8                 | _fatfs_cc_v_rmdir_ret
353f8     2D 00 64 FD | 	ret
353fc                 | 
353fc                 | _fatfs_cc_v_rename
353fc     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
35400     FD 12 02 F6 | 	mov	arg01, result1
35404                 | '     return _set_dos_error(r);
35404     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1033
35408                 | _fatfs_cc_v_rename_ret
35408     2D 00 64 FD | 	ret
3540c                 | 
3540c                 | _fatfs_cc_v_open
3540c     07 4A 05 F6 | 	mov	COUNT_, #7
35410     A8 00 A0 FD | 	call	#pushregs_
35414     09 27 02 F6 | 	mov	local01, arg01
35418     0A 29 02 F6 | 	mov	local02, arg02
3541c     0B 2B 02 F6 | 	mov	local03, arg03
35420     03 00 00 FF 
35424     3C 12 06 F6 | 	mov	arg01, ##1596
35428                 | '     return _gc_alloc(size);
35428     10 14 06 F6 | 	mov	arg02, #16
3542c     9C 56 BF FD | 	call	#__system___gc_doalloc
35430     FD 2C 0A F6 | 	mov	local04, result1 wz
35434                 | '       return _seterror( 7 );
35434     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35438     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
3543c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35440     01 FA 65 A6 |  if_e	neg	result1, #1
35444     98 00 90 AD |  if_e	jmp	#LR__5196
35448     16 13 02 F6 | 	mov	arg01, local04
3544c     00 14 06 F6 | 	mov	arg02, #0
35450     03 00 00 FF 
35454     3C 16 06 F6 | 	mov	arg03, ##1596
35458     98 00 A0 FD | 	call	#\builtin_bytefill_
3545c                 | '   switch (flags & 3) {
3545c     15 2F 02 F6 | 	mov	local05, local03
35460     03 2E 0E F5 | 	and	local05, #3 wz
35464     0C 00 90 AD |  if_e	jmp	#LR__5190
35468     01 2E 0E F2 | 	cmp	local05, #1 wz
3546c     0C 00 90 AD |  if_e	jmp	#LR__5191
35470     10 00 90 FD | 	jmp	#LR__5192
35474                 | LR__5190
35474     01 30 06 F6 | 	mov	local06, #1
35478                 | '       fs_flags =  0x01 ;
35478                 | '       break;
35478     0C 00 90 FD | 	jmp	#LR__5193
3547c                 | LR__5191
3547c     02 30 06 F6 | 	mov	local06, #2
35480                 | '       fs_flags =  0x02 ;
35480                 | '       break;
35480     04 00 90 FD | 	jmp	#LR__5193
35484                 | LR__5192
35484     03 30 06 F6 | 	mov	local06, #3
35488                 | '       fs_flags =  0x01  |  0x02 ;
35488                 | '       break;
35488                 | LR__5193
35488     08 2A CE F7 | 	test	local03, #8 wz
3548c     18 30 46 55 |  if_ne	or	local06, #24
35490     08 00 90 5D |  if_ne	jmp	#LR__5194
35494     20 2A CE F7 | 	test	local03, #32 wz
35498     30 30 46 55 |  if_ne	or	local06, #48
3549c                 | LR__5194
3549c     02 00 00 FF 
354a0     14 2C 06 F1 | 	add	local04, ##1044
354a4     16 13 02 F6 | 	mov	arg01, local04
354a8     02 00 00 FF 
354ac     14 2C 86 F1 | 	sub	local04, ##1044
354b0     14 15 02 F6 | 	mov	arg02, local02
354b4     18 17 02 F6 | 	mov	arg03, local06
354b8     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
354bc     FD 32 0A F6 | 	mov	local07, result1 wz
354c0     14 00 90 AD |  if_e	jmp	#LR__5195
354c4     16 13 02 F6 | 	mov	arg01, local04
354c8                 | '     return _gc_free(ptr);
354c8     0C 57 BF FD | 	call	#__system___gc_free
354cc                 | '     free(f);
354cc                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
354cc                 | '     return _set_dos_error(r);
354cc     19 13 02 F6 | 	mov	arg01, local07
354d0     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1033
354d4     08 00 90 FD | 	jmp	#LR__5196
354d8                 | LR__5195
354d8     13 2D 62 FC | 	wrlong	local04, local01
354dc                 | '   }
354dc                 | '   fil->vfsdata = f;
354dc                 | '   return 0;
354dc     00 FA 05 F6 | 	mov	result1, #0
354e0                 | LR__5196
354e0     A7 F0 03 F6 | 	mov	ptra, fp
354e4     B2 00 A0 FD | 	call	#popregs_
354e8                 | _fatfs_cc_v_open_ret
354e8     2D 00 64 FD | 	ret
354ec                 | 
354ec                 | _fatfs_cc_v_flush
354ec     09 13 02 FB | 	rdlong	arg01, arg01
354f0     02 00 00 FF 
354f4     14 12 0E F1 | 	add	arg01, ##1044 wz
354f8                 | '         return _seterror( 5 );
354f8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
354fc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35500     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35504     01 FA 65 A6 |  if_e	neg	result1, #1
35508     0C 00 90 AD |  if_e	jmp	#LR__5200
3550c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
35510     FD 12 02 F6 | 	mov	arg01, result1
35514                 | '     }
35514                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35514                 | '     result = f_sync(f);
35514                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35514                 | '     return _set_dos_error(result);
35514     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1033
35518                 | LR__5200
35518                 | _fatfs_cc_v_flush_ret
35518     2D 00 64 FD | 	ret
3551c                 | 
3551c                 | _fatfs_cc_v_init
3551c                 | ' {
3551c                 | '     return 0;
3551c     00 FA 05 F6 | 	mov	result1, #0
35520                 | _fatfs_cc_v_init_ret
35520     2D 00 64 FD | 	ret
35524                 | 
35524                 | _fatfs_cc_v_deinit
35524     B2 01 00 FF 
35528     98 14 06 F6 | 	mov	arg02, ##@LR__5396
3552c     00 12 06 F6 | 	mov	arg01, #0
35530     00 16 06 F6 | 	mov	arg03, #0
35534     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
35538     01 00 00 FF 
3553c     08 E4 05 F1 | 	add	objptr, ##520
35540     F2 12 02 FB | 	rdlong	arg01, objptr
35544     04 E4 05 F1 | 	add	objptr, #4
35548     F2 14 02 FB | 	rdlong	arg02, objptr
3554c     01 00 00 FF 
35550     0C E4 85 F1 | 	sub	objptr, ##524
35554     F0 3D BF FD | 	call	#__system___freepins
35558                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35558                 | '     _freepins(f_pinmask);
35558                 | '     return 0;
35558     00 FA 05 F6 | 	mov	result1, #0
3555c                 | _fatfs_cc_v_deinit_ret
3555c     2D 00 64 FD | 	ret
35560                 | 
35560                 | _fatfs_cc_get_vfs
35560     01 4A 05 F6 | 	mov	COUNT_, #1
35564     A8 00 A0 FD | 	call	#pushregs_
35568     09 27 02 F6 | 	mov	local01, arg01
3556c     50 12 06 F6 | 	mov	arg01, #80
35570     28 55 BF FD | 	call	#__system___gc_alloc_managed
35574     FD 12 02 F6 | 	mov	arg01, result1
35578     F2 FA 01 F6 | 	mov	result1, objptr
3557c     00 78 05 FF 
35580     00 FA 45 F5 | 	or	result1, ##183500800
35584     09 FB 61 FC | 	wrlong	result1, arg01
35588     F2 FA 01 F6 | 	mov	result1, objptr
3558c     00 80 05 FF 
35590     00 FA 45 F5 | 	or	result1, ##184549376
35594     04 12 06 F1 | 	add	arg01, #4
35598     09 FB 61 FC | 	wrlong	result1, arg01
3559c     F2 FA 01 F6 | 	mov	result1, objptr
355a0     00 88 05 FF 
355a4     00 FA 45 F5 | 	or	result1, ##185597952
355a8     04 12 06 F1 | 	add	arg01, #4
355ac     09 FB 61 FC | 	wrlong	result1, arg01
355b0     F2 FA 01 F6 | 	mov	result1, objptr
355b4     00 90 05 FF 
355b8     00 FA 45 F5 | 	or	result1, ##186646528
355bc     04 12 06 F1 | 	add	arg01, #4
355c0     09 FB 61 FC | 	wrlong	result1, arg01
355c4     F2 FA 01 F6 | 	mov	result1, objptr
355c8     00 98 05 FF 
355cc     00 FA 45 F5 | 	or	result1, ##187695104
355d0     04 12 06 F1 | 	add	arg01, #4
355d4     09 FB 61 FC | 	wrlong	result1, arg01
355d8     04 12 06 F1 | 	add	arg01, #4
355dc     09 01 68 FC | 	wrlong	#0, arg01
355e0     04 12 06 F1 | 	add	arg01, #4
355e4     09 27 62 FC | 	wrlong	local01, arg01
355e8     04 12 06 F1 | 	add	arg01, #4
355ec     09 01 68 FC | 	wrlong	#0, arg01
355f0     F2 FA 01 F6 | 	mov	result1, objptr
355f4     00 A0 05 FF 
355f8     00 FA 45 F5 | 	or	result1, ##188743680
355fc     04 12 06 F1 | 	add	arg01, #4
35600     09 FB 61 FC | 	wrlong	result1, arg01
35604     F2 FA 01 F6 | 	mov	result1, objptr
35608     00 A8 05 FF 
3560c     00 FA 45 F5 | 	or	result1, ##189792256
35610     04 12 06 F1 | 	add	arg01, #4
35614     09 FB 61 FC | 	wrlong	result1, arg01
35618     F2 FA 01 F6 | 	mov	result1, objptr
3561c     00 B0 05 FF 
35620     00 FA 45 F5 | 	or	result1, ##190840832
35624     04 12 06 F1 | 	add	arg01, #4
35628     09 FB 61 FC | 	wrlong	result1, arg01
3562c     F2 FA 01 F6 | 	mov	result1, objptr
35630     00 B8 05 FF 
35634     00 FA 45 F5 | 	or	result1, ##191889408
35638     04 12 06 F1 | 	add	arg01, #4
3563c     09 FB 61 FC | 	wrlong	result1, arg01
35640     F2 FA 01 F6 | 	mov	result1, objptr
35644     00 C0 05 FF 
35648     00 FA 45 F5 | 	or	result1, ##192937984
3564c     04 12 06 F1 | 	add	arg01, #4
35650     09 FB 61 FC | 	wrlong	result1, arg01
35654     F2 FA 01 F6 | 	mov	result1, objptr
35658     00 C8 05 FF 
3565c     00 FA 45 F5 | 	or	result1, ##193986560
35660     04 12 06 F1 | 	add	arg01, #4
35664     09 FB 61 FC | 	wrlong	result1, arg01
35668     F2 FA 01 F6 | 	mov	result1, objptr
3566c     00 D0 05 FF 
35670     00 FA 45 F5 | 	or	result1, ##195035136
35674     04 12 06 F1 | 	add	arg01, #4
35678     09 FB 61 FC | 	wrlong	result1, arg01
3567c     F2 FA 01 F6 | 	mov	result1, objptr
35680     00 D8 05 FF 
35684     00 FA 45 F5 | 	or	result1, ##196083712
35688     04 12 06 F1 | 	add	arg01, #4
3568c     09 FB 61 FC | 	wrlong	result1, arg01
35690     F2 FA 01 F6 | 	mov	result1, objptr
35694     00 E0 05 FF 
35698     00 FA 45 F5 | 	or	result1, ##197132288
3569c     04 12 06 F1 | 	add	arg01, #4
356a0     09 FB 61 FC | 	wrlong	result1, arg01
356a4     F2 FA 01 F6 | 	mov	result1, objptr
356a8     00 E8 05 FF 
356ac     00 FA 45 F5 | 	or	result1, ##198180864
356b0     04 12 06 F1 | 	add	arg01, #4
356b4     09 FB 61 FC | 	wrlong	result1, arg01
356b8     F2 FA 01 F6 | 	mov	result1, objptr
356bc     00 F0 05 FF 
356c0     00 FA 45 F5 | 	or	result1, ##199229440
356c4     04 12 06 F1 | 	add	arg01, #4
356c8     09 FB 61 FC | 	wrlong	result1, arg01
356cc     F2 FA 01 F6 | 	mov	result1, objptr
356d0     00 F8 05 FF 
356d4     00 FA 45 F5 | 	or	result1, ##200278016
356d8     04 12 06 F1 | 	add	arg01, #4
356dc     09 FB 61 FC | 	wrlong	result1, arg01
356e0     4C 12 86 F1 | 	sub	arg01, #76
356e4                 | ' 
356e4                 | '     v->close = &v_close;
356e4                 | '     v->read = &v_read;
356e4                 | '     v->write = &v_write;
356e4                 | '     v->lseek = &v_lseek;
356e4                 | '     v->ioctl = &v_ioctl;
356e4                 | '     v->flush = 0;
356e4                 | '     v->vfs_data = ptr;
356e4                 | '     v->reserved = 0;
356e4                 | ' 
356e4                 | '     v->open = &v_open;
356e4                 | '     v->creat = &v_creat;
356e4                 | '     v->opendir = &v_opendir;
356e4                 | '     v->closedir = &v_closedir;
356e4                 | '     v->readdir = &v_readdir;
356e4                 | '     v->stat = &v_stat;
356e4                 | ' 
356e4                 | '     v->mkdir = &v_mkdir;
356e4                 | '     v->rmdir = &v_rmdir;
356e4                 | ' 
356e4                 | '     v->remove = &v_remove;
356e4                 | '     v->rename = &v_rename;
356e4                 | ' 
356e4                 | '     v->init = &v_init;
356e4                 | '     v->deinit = &v_deinit;
356e4                 | ' 
356e4                 | '     return v;
356e4     09 FB 01 F6 | 	mov	result1, arg01
356e8     A7 F0 03 F6 | 	mov	ptra, fp
356ec     B2 00 A0 FD | 	call	#popregs_
356f0                 | _fatfs_cc_get_vfs_ret
356f0     2D 00 64 FD | 	ret
356f4                 | 
356f4                 | _fatfs_cc_xmit_mmc_1184
356f4     01 00 00 FF 
356f8     10 E4 05 F1 | 	add	objptr, ##528
356fc     F2 00 02 FB | 	rdlong	_var01, objptr
35700     08 E4 05 F1 | 	add	objptr, #8
35704     F2 02 02 FB | 	rdlong	_var02, objptr
35708     01 00 00 FF 
3570c     18 E4 85 F1 | 	sub	objptr, ##536
35710     40 02 62 FD | 	dirl	_var02
35714     28 02 64 FD | 	setq	#1
35718     09 05 02 FB | 	rdlong	_var03, arg01
3571c     69 04 62 FD | 	rev	_var03
35720     1B 04 FE F9 | 	movbyts	_var03, #27
35724     01 05 22 FC | 	wypin	_var03, _var02
35728     0A 05 02 F6 | 	mov	_var03, arg02
3572c     02 14 4E F0 | 	shr	arg02, #2 wz
35730     03 04 66 F0 | 	shl	_var03, #3
35734     00 05 22 FC | 	wypin	_var03, _var01
35738     41 02 62 FD | 	dirh	_var02
3573c     08 12 06 F1 | 	add	arg01, #8
35740     69 06 62 FD | 	rev	_var04
35744     1B 06 FE F9 | 	movbyts	_var04, #27
35748                 | LR__5210
35748     01 07 22 5C |  if_ne	wypin	_var04, _var02
3574c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
35750     04 12 06 51 |  if_ne	add	arg01, #4
35754     69 06 62 5D |  if_ne	rev	_var04
35758     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
3575c                 | LR__5211
3575c     40 02 72 5D |  if_ne	testp	_var02 wc
35760     F8 FF 9F 1D |  if_a	jmp	#LR__5211
35764     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5210
35768                 | LR__5212
35768     40 00 72 FD | 	testp	_var01 wc
3576c     F8 FF 9F 3D |  if_ae	jmp	#LR__5212
35770     40 02 62 FD | 	dirl	_var02
35774     FF FF FF FF 
35778     01 FF 2B FC | 	wypin	##-1, _var02
3577c     41 02 62 FD | 	dirh	_var02
35780                 | _fatfs_cc_xmit_mmc_1184_ret
35780     2D 00 64 FD | 	ret
35784                 | 
35784                 | _fatfs_cc_rcvr_mmc_1191
35784     01 00 00 FF 
35788     10 E4 05 F1 | 	add	objptr, ##528
3578c     F2 00 02 FB | 	rdlong	_var01, objptr
35790     0C E4 05 F1 | 	add	objptr, #12
35794     F2 02 02 FB | 	rdlong	_var02, objptr
35798     01 00 00 FF 
3579c     1C E4 85 F1 | 	sub	objptr, ##540
357a0     01 03 08 FC | 	akpin	_var02
357a4     0A 05 0A F6 | 	mov	_var03, arg02 wz
357a8     02 04 4E F0 | 	shr	_var03, #2 wz
357ac     30 00 90 AD |  if_e	jmp	#LR__5222
357b0     02 07 02 F6 | 	mov	_var04, _var03
357b4     05 06 66 F0 | 	shl	_var04, #5
357b8     00 07 22 FC | 	wypin	_var04, _var01
357bc     01 7F 18 FC | 	wxpin	#63, _var02
357c0                 | LR__5220
357c0                 | LR__5221
357c0     40 02 72 FD | 	testp	_var02 wc
357c4     F8 FF 9F 3D |  if_ae	jmp	#LR__5221
357c8     01 07 8A FA | 	rdpin	_var04, _var02
357cc     69 06 62 FD | 	rev	_var04
357d0     1B 06 FE F9 | 	movbyts	_var04, #27
357d4     09 07 62 FC | 	wrlong	_var04, arg01
357d8     04 12 06 F1 | 	add	arg01, #4
357dc     F8 05 6E FB | 	djnz	_var03, #LR__5220
357e0                 | LR__5222
357e0     03 14 0E F5 | 	and	arg02, #3 wz
357e4     24 00 90 AD |  if_e	jmp	#LR__5225
357e8     01 4F 18 FC | 	wxpin	#39, _var02
357ec                 | LR__5223
357ec     00 11 28 FC | 	wypin	#8, _var01
357f0                 | LR__5224
357f0     40 02 72 FD | 	testp	_var02 wc
357f4     F8 FF 9F 3D |  if_ae	jmp	#LR__5224
357f8     01 07 8A FA | 	rdpin	_var04, _var02
357fc     69 06 62 FD | 	rev	_var04
35800     09 07 42 FC | 	wrbyte	_var04, arg01
35804     01 12 06 F1 | 	add	arg01, #1
35808     F8 15 6E FB | 	djnz	arg02, #LR__5223
3580c                 | LR__5225
3580c                 | _fatfs_cc_rcvr_mmc_1191_ret
3580c     2D 00 64 FD | 	ret
35810                 | 
35810                 | _fatfs_cc_wait_ready_1195
35810     01 4A 05 F6 | 	mov	COUNT_, #1
35814     A8 00 A0 FD | 	call	#pushregs_
35818     10 F0 07 F1 | 	add	ptra, #16
3581c     1A FA 61 FD | 	getct	result1
35820     08 4E 05 F1 | 	add	fp, #8
35824     A7 FA 61 FC | 	wrlong	result1, fp
35828     14 26 06 FB | 	rdlong	local01, #20
3582c     01 26 46 F0 | 	shr	local01, #1
35830     04 4E 05 F1 | 	add	fp, #4
35834     A7 26 62 FC | 	wrlong	local01, fp
35838     0C 4E 85 F1 | 	sub	fp, #12
3583c                 | ' {
3583c                 | ' 	BYTE d;
3583c                 | ' 	UINT tmr, tmout;
3583c                 | ' 
3583c                 | ' 	tmr = _cnt();
3583c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
3583c                 | ' 	for(;;) {
3583c                 | LR__5230
3583c     04 4E 05 F1 | 	add	fp, #4
35840     A7 12 02 F6 | 	mov	arg01, fp
35844     04 4E 85 F1 | 	sub	fp, #4
35848     01 14 06 F6 | 	mov	arg02, #1
3584c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1191
35850     04 4E 05 F1 | 	add	fp, #4
35854     A7 26 C2 FA | 	rdbyte	local01, fp
35858     04 4E 85 F1 | 	sub	fp, #4
3585c     FF 26 0E F2 | 	cmp	local01, #255 wz
35860     01 FA 05 A6 |  if_e	mov	result1, #1
35864     28 00 90 AD |  if_e	jmp	#LR__5231
35868     1A FA 61 FD | 	getct	result1
3586c     08 4E 05 F1 | 	add	fp, #8
35870     A7 26 02 FB | 	rdlong	local01, fp
35874     13 FB 81 F1 | 	sub	result1, local01
35878     04 4E 05 F1 | 	add	fp, #4
3587c     A7 26 02 FB | 	rdlong	local01, fp
35880     0C 4E 85 F1 | 	sub	fp, #12
35884     13 FB 11 F2 | 	cmp	result1, local01 wc
35888     00 FA 05 36 |  if_ae	mov	result1, #0
3588c     AC FF 9F CD |  if_b	jmp	#LR__5230
35890                 | LR__5231
35890     A7 F0 03 F6 | 	mov	ptra, fp
35894     B2 00 A0 FD | 	call	#popregs_
35898                 | _fatfs_cc_wait_ready_1195_ret
35898     2D 00 64 FD | 	ret
3589c                 | 
3589c                 | _fatfs_cc_deselect_1201
3589c     00 4A 05 F6 | 	mov	COUNT_, #0
358a0     A8 00 A0 FD | 	call	#pushregs_
358a4     14 F0 07 F1 | 	add	ptra, #20
358a8     01 00 00 FF 
358ac     14 E4 05 F1 | 	add	objptr, ##532
358b0     F2 14 02 FB | 	rdlong	arg02, objptr
358b4     04 4E 05 F1 | 	add	fp, #4
358b8     A7 14 62 FC | 	wrlong	arg02, fp
358bc     04 E4 85 F1 | 	sub	objptr, #4
358c0     F2 14 02 FB | 	rdlong	arg02, objptr
358c4     04 4E 05 F1 | 	add	fp, #4
358c8     A7 14 62 FC | 	wrlong	arg02, fp
358cc     08 E4 05 F1 | 	add	objptr, #8
358d0     F2 14 02 FB | 	rdlong	arg02, objptr
358d4     04 4E 05 F1 | 	add	fp, #4
358d8     A7 14 62 FC | 	wrlong	arg02, fp
358dc     04 E4 05 F1 | 	add	objptr, #4
358e0     F2 14 02 FB | 	rdlong	arg02, objptr
358e4     01 00 00 FF 
358e8     1C E4 85 F1 | 	sub	objptr, ##540
358ec     04 4E 05 F1 | 	add	fp, #4
358f0     A7 14 62 FC | 	wrlong	arg02, fp
358f4     0C 4E 85 F1 | 	sub	fp, #12
358f8     A7 12 02 FB | 	rdlong	arg01, fp
358fc     04 4E 85 F1 | 	sub	fp, #4
35900     59 12 62 FD | 	drvh	arg01
35904     1F 20 64 FD | 	waitx	#16
35908     A7 12 02 F6 | 	mov	arg01, fp
3590c     01 14 06 F6 | 	mov	arg02, #1
35910     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1191
35914     A7 F0 03 F6 | 	mov	ptra, fp
35918     B2 00 A0 FD | 	call	#popregs_
3591c                 | _fatfs_cc_deselect_1201_ret
3591c     2D 00 64 FD | 	ret
35920                 | 
35920                 | _fatfs_cc_select_1205
35920     00 4A 05 F6 | 	mov	COUNT_, #0
35924     A8 00 A0 FD | 	call	#pushregs_
35928     10 F0 07 F1 | 	add	ptra, #16
3592c     01 00 00 FF 
35930     14 E4 05 F1 | 	add	objptr, ##532
35934     F2 14 02 FB | 	rdlong	arg02, objptr
35938     08 4E 05 F1 | 	add	fp, #8
3593c     A7 14 62 FC | 	wrlong	arg02, fp
35940     08 E4 05 F1 | 	add	objptr, #8
35944     F2 12 02 FB | 	rdlong	arg01, objptr
35948     01 00 00 FF 
3594c     1C E4 85 F1 | 	sub	objptr, ##540
35950     04 4E 05 F1 | 	add	fp, #4
35954     A7 12 62 FC | 	wrlong	arg01, fp
35958     50 12 62 FD | 	fltl	arg01
3595c     04 4E 85 F1 | 	sub	fp, #4
35960     A7 12 02 FB | 	rdlong	arg01, fp
35964     58 12 62 FD | 	drvl	arg01
35968     1F 20 64 FD | 	waitx	#16
3596c     04 4E 05 F1 | 	add	fp, #4
35970     A7 12 02 FB | 	rdlong	arg01, fp
35974     41 12 62 FD | 	dirh	arg01
35978     08 4E 85 F1 | 	sub	fp, #8
3597c     A7 12 02 F6 | 	mov	arg01, fp
35980     04 4E 85 F1 | 	sub	fp, #4
35984     01 14 06 F6 | 	mov	arg02, #1
35988     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1191
3598c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1195
35990     00 FA 0D F2 | 	cmp	result1, #0 wz
35994     01 FA 05 56 |  if_ne	mov	result1, #1
35998     08 00 90 5D |  if_ne	jmp	#LR__5240
3599c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1201
359a0                 | ' 
359a0                 | ' 	deselect();
359a0                 | ' 	return 0;
359a0     00 FA 05 F6 | 	mov	result1, #0
359a4                 | LR__5240
359a4     A7 F0 03 F6 | 	mov	ptra, fp
359a8     B2 00 A0 FD | 	call	#popregs_
359ac                 | _fatfs_cc_select_1205_ret
359ac     2D 00 64 FD | 	ret
359b0                 | 
359b0                 | _fatfs_cc_rcvr_datablock_1209
359b0     01 4A 05 F6 | 	mov	COUNT_, #1
359b4     A8 00 A0 FD | 	call	#pushregs_
359b8     18 F0 07 F1 | 	add	ptra, #24
359bc     04 4E 05 F1 | 	add	fp, #4
359c0     A7 12 62 FC | 	wrlong	arg01, fp
359c4     04 4E 05 F1 | 	add	fp, #4
359c8     A7 14 62 FC | 	wrlong	arg02, fp
359cc     1A FA 61 FD | 	getct	result1
359d0     08 4E 05 F1 | 	add	fp, #8
359d4     A7 FA 61 FC | 	wrlong	result1, fp
359d8     14 26 06 FB | 	rdlong	local01, #20
359dc     03 26 46 F0 | 	shr	local01, #3
359e0     04 4E 05 F1 | 	add	fp, #4
359e4     A7 26 62 FC | 	wrlong	local01, fp
359e8     14 4E 85 F1 | 	sub	fp, #20
359ec                 | ' 	BYTE *buff,
359ec                 | ' 	UINT btr
359ec                 | ' )
359ec                 | ' {
359ec                 | ' 	BYTE d[2];
359ec                 | ' 	UINT tmr, tmout;
359ec                 | ' 
359ec                 | ' 	tmr = _cnt();
359ec                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
359ec                 | ' 	for(;;) {
359ec                 | LR__5250
359ec     0C 4E 05 F1 | 	add	fp, #12
359f0     A7 12 02 F6 | 	mov	arg01, fp
359f4     0C 4E 85 F1 | 	sub	fp, #12
359f8     01 14 06 F6 | 	mov	arg02, #1
359fc     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1191
35a00     0C 4E 05 F1 | 	add	fp, #12
35a04     A7 26 C2 FA | 	rdbyte	local01, fp
35a08     0C 4E 85 F1 | 	sub	fp, #12
35a0c     FF 26 0E F2 | 	cmp	local01, #255 wz
35a10     28 00 90 5D |  if_ne	jmp	#LR__5251
35a14     1A FA 61 FD | 	getct	result1
35a18     FD 26 02 F6 | 	mov	local01, result1
35a1c     10 4E 05 F1 | 	add	fp, #16
35a20     A7 14 02 FB | 	rdlong	arg02, fp
35a24     0A 27 82 F1 | 	sub	local01, arg02
35a28     04 4E 05 F1 | 	add	fp, #4
35a2c     A7 14 02 FB | 	rdlong	arg02, fp
35a30     14 4E 85 F1 | 	sub	fp, #20
35a34     0A 27 12 F2 | 	cmp	local01, arg02 wc
35a38     B0 FF 9F CD |  if_b	jmp	#LR__5250
35a3c                 | LR__5251
35a3c     0C 4E 05 F1 | 	add	fp, #12
35a40     A7 26 C2 FA | 	rdbyte	local01, fp
35a44     0C 4E 85 F1 | 	sub	fp, #12
35a48     FE 26 0E F2 | 	cmp	local01, #254 wz
35a4c     00 FA 05 56 |  if_ne	mov	result1, #0
35a50     30 00 90 5D |  if_ne	jmp	#LR__5252
35a54     04 4E 05 F1 | 	add	fp, #4
35a58     A7 12 02 FB | 	rdlong	arg01, fp
35a5c     04 4E 05 F1 | 	add	fp, #4
35a60     A7 14 02 FB | 	rdlong	arg02, fp
35a64     08 4E 85 F1 | 	sub	fp, #8
35a68     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1191
35a6c     0C 4E 05 F1 | 	add	fp, #12
35a70     A7 12 02 F6 | 	mov	arg01, fp
35a74     0C 4E 85 F1 | 	sub	fp, #12
35a78     02 14 06 F6 | 	mov	arg02, #2
35a7c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1191
35a80                 | ' 
35a80                 | ' 	rcvr_mmc(buff, btr);
35a80                 | ' 	rcvr_mmc(d, 2);
35a80                 | ' 
35a80                 | ' 	return 1;
35a80     01 FA 05 F6 | 	mov	result1, #1
35a84                 | LR__5252
35a84     A7 F0 03 F6 | 	mov	ptra, fp
35a88     B2 00 A0 FD | 	call	#popregs_
35a8c                 | _fatfs_cc_rcvr_datablock_1209_ret
35a8c     2D 00 64 FD | 	ret
35a90                 | 
35a90                 | _fatfs_cc_xmit_datablock_1211
35a90     00 4A 05 F6 | 	mov	COUNT_, #0
35a94     A8 00 A0 FD | 	call	#pushregs_
35a98     10 F0 07 F1 | 	add	ptra, #16
35a9c     04 4E 05 F1 | 	add	fp, #4
35aa0     A7 12 62 FC | 	wrlong	arg01, fp
35aa4     04 4E 05 F1 | 	add	fp, #4
35aa8     A7 14 42 FC | 	wrbyte	arg02, fp
35aac     08 4E 85 F1 | 	sub	fp, #8
35ab0     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1195
35ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
35ab8     00 FA 05 A6 |  if_e	mov	result1, #0
35abc     90 00 90 AD |  if_e	jmp	#LR__5261
35ac0     08 4E 05 F1 | 	add	fp, #8
35ac4     A7 14 C2 FA | 	rdbyte	arg02, fp
35ac8     04 4E 05 F1 | 	add	fp, #4
35acc     A7 14 42 FC | 	wrbyte	arg02, fp
35ad0     A7 12 02 F6 | 	mov	arg01, fp
35ad4     0C 4E 85 F1 | 	sub	fp, #12
35ad8     01 14 06 F6 | 	mov	arg02, #1
35adc     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1184
35ae0     08 4E 05 F1 | 	add	fp, #8
35ae4     A7 14 C2 FA | 	rdbyte	arg02, fp
35ae8     08 4E 85 F1 | 	sub	fp, #8
35aec     FD 14 0E F2 | 	cmp	arg02, #253 wz
35af0     58 00 90 AD |  if_e	jmp	#LR__5260
35af4     04 4E 05 F1 | 	add	fp, #4
35af8     A7 12 02 FB | 	rdlong	arg01, fp
35afc     04 4E 85 F1 | 	sub	fp, #4
35b00     09 14 C6 F9 | 	decod	arg02, #9
35b04     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1184
35b08     0C 4E 05 F1 | 	add	fp, #12
35b0c     A7 12 02 F6 | 	mov	arg01, fp
35b10     0C 4E 85 F1 | 	sub	fp, #12
35b14     02 14 06 F6 | 	mov	arg02, #2
35b18     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1191
35b1c     0C 4E 05 F1 | 	add	fp, #12
35b20     A7 12 02 F6 | 	mov	arg01, fp
35b24     0C 4E 85 F1 | 	sub	fp, #12
35b28     01 14 06 F6 | 	mov	arg02, #1
35b2c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1191
35b30     0C 4E 05 F1 | 	add	fp, #12
35b34     A7 14 C2 FA | 	rdbyte	arg02, fp
35b38     0C 4E 85 F1 | 	sub	fp, #12
35b3c     1F 14 06 F5 | 	and	arg02, #31
35b40     05 14 0E F2 | 	cmp	arg02, #5 wz
35b44                 | ' 			return 0;
35b44     00 FA 05 56 |  if_ne	mov	result1, #0
35b48     04 00 90 5D |  if_ne	jmp	#LR__5261
35b4c                 | LR__5260
35b4c                 | ' 	}
35b4c                 | ' 
35b4c                 | ' 	return 1;
35b4c     01 FA 05 F6 | 	mov	result1, #1
35b50                 | LR__5261
35b50     A7 F0 03 F6 | 	mov	ptra, fp
35b54     B2 00 A0 FD | 	call	#popregs_
35b58                 | _fatfs_cc_xmit_datablock_1211_ret
35b58     2D 00 64 FD | 	ret
35b5c                 | 
35b5c                 | _fatfs_cc_send_cmd_1215
35b5c     01 4A 05 F6 | 	mov	COUNT_, #1
35b60     A8 00 A0 FD | 	call	#pushregs_
35b64     1C F0 07 F1 | 	add	ptra, #28
35b68                 | _fatfs_cc_send_cmd_1215_enter
35b68     04 4E 05 F1 | 	add	fp, #4
35b6c     A7 12 42 FC | 	wrbyte	arg01, fp
35b70     04 4E 05 F1 | 	add	fp, #4
35b74     A7 14 62 FC | 	wrlong	arg02, fp
35b78     04 4E 85 F1 | 	sub	fp, #4
35b7c     A7 FA C1 FA | 	rdbyte	result1, fp
35b80     04 4E 85 F1 | 	sub	fp, #4
35b84     80 FA CD F7 | 	test	result1, #128 wz
35b88     44 00 90 AD |  if_e	jmp	#LR__5270
35b8c     04 4E 05 F1 | 	add	fp, #4
35b90     A7 14 C2 FA | 	rdbyte	arg02, fp
35b94     7F 14 06 F5 | 	and	arg02, #127
35b98     A7 14 42 FC | 	wrbyte	arg02, fp
35b9c     04 4E 85 F1 | 	sub	fp, #4
35ba0     37 12 06 F6 | 	mov	arg01, #55
35ba4     00 14 06 F6 | 	mov	arg02, #0
35ba8     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1215
35bac     0C 4E 05 F1 | 	add	fp, #12
35bb0     A7 FA 41 FC | 	wrbyte	result1, fp
35bb4     A7 14 C2 FA | 	rdbyte	arg02, fp
35bb8     0C 4E 85 F1 | 	sub	fp, #12
35bbc     02 14 16 F2 | 	cmp	arg02, #2 wc
35bc0     0C 4E 05 31 |  if_ae	add	fp, #12
35bc4     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
35bc8     0C 4E 85 31 |  if_ae	sub	fp, #12
35bcc     6C 01 90 3D |  if_ae	jmp	#LR__5274
35bd0                 | LR__5270
35bd0     04 4E 05 F1 | 	add	fp, #4
35bd4     A7 14 C2 FA | 	rdbyte	arg02, fp
35bd8     04 4E 85 F1 | 	sub	fp, #4
35bdc     0C 14 0E F2 | 	cmp	arg02, #12 wz
35be0     14 00 90 AD |  if_e	jmp	#LR__5271
35be4     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1201
35be8     34 FD BF FD | 	call	#_fatfs_cc_select_1205
35bec     00 FA 0D F2 | 	cmp	result1, #0 wz
35bf0     FF FA 05 A6 |  if_e	mov	result1, #255
35bf4     44 01 90 AD |  if_e	jmp	#LR__5274
35bf8                 | LR__5271
35bf8     04 4E 05 F1 | 	add	fp, #4
35bfc     A7 14 C2 FA | 	rdbyte	arg02, fp
35c00     40 FA 05 F6 | 	mov	result1, #64
35c04     0A FB 41 F5 | 	or	result1, arg02
35c08     10 4E 05 F1 | 	add	fp, #16
35c0c     A7 FA 41 FC | 	wrbyte	result1, fp
35c10     0C 4E 85 F1 | 	sub	fp, #12
35c14     A7 FA 01 FB | 	rdlong	result1, fp
35c18     18 FA 45 F0 | 	shr	result1, #24
35c1c     0D 4E 05 F1 | 	add	fp, #13
35c20     A7 FA 41 FC | 	wrbyte	result1, fp
35c24     0D 4E 85 F1 | 	sub	fp, #13
35c28     A7 FA 01 FB | 	rdlong	result1, fp
35c2c     10 FA 45 F0 | 	shr	result1, #16
35c30     0E 4E 05 F1 | 	add	fp, #14
35c34     A7 FA 41 FC | 	wrbyte	result1, fp
35c38     0E 4E 85 F1 | 	sub	fp, #14
35c3c     A7 FA 01 FB | 	rdlong	result1, fp
35c40     08 FA 45 F0 | 	shr	result1, #8
35c44     0F 4E 05 F1 | 	add	fp, #15
35c48     A7 FA 41 FC | 	wrbyte	result1, fp
35c4c     0F 4E 85 F1 | 	sub	fp, #15
35c50     A7 FA 01 FB | 	rdlong	result1, fp
35c54     10 4E 05 F1 | 	add	fp, #16
35c58     A7 FA 41 FC | 	wrbyte	result1, fp
35c5c     0C 4E 85 F1 | 	sub	fp, #12
35c60     A7 02 48 FC | 	wrbyte	#1, fp
35c64     08 4E 85 F1 | 	sub	fp, #8
35c68     A7 FA C9 FA | 	rdbyte	result1, fp wz
35c6c     04 4E 85 F1 | 	sub	fp, #4
35c70     0C 4E 05 A1 |  if_e	add	fp, #12
35c74     A7 2A 49 AC |  if_e	wrbyte	#149, fp
35c78     0C 4E 85 A1 |  if_e	sub	fp, #12
35c7c     04 4E 05 F1 | 	add	fp, #4
35c80     A7 FA C1 FA | 	rdbyte	result1, fp
35c84     04 4E 85 F1 | 	sub	fp, #4
35c88     08 FA 0D F2 | 	cmp	result1, #8 wz
35c8c     0C 4E 05 A1 |  if_e	add	fp, #12
35c90     A7 0E 49 AC |  if_e	wrbyte	#135, fp
35c94     0C 4E 85 A1 |  if_e	sub	fp, #12
35c98     0C 4E 05 F1 | 	add	fp, #12
35c9c     A7 14 C2 FA | 	rdbyte	arg02, fp
35ca0     0D 4E 05 F1 | 	add	fp, #13
35ca4     A7 14 42 FC | 	wrbyte	arg02, fp
35ca8     05 4E 85 F1 | 	sub	fp, #5
35cac     A7 12 02 F6 | 	mov	arg01, fp
35cb0     14 4E 85 F1 | 	sub	fp, #20
35cb4     06 14 06 F6 | 	mov	arg02, #6
35cb8     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1184
35cbc     04 4E 05 F1 | 	add	fp, #4
35cc0     A7 26 C2 FA | 	rdbyte	local01, fp
35cc4     04 4E 85 F1 | 	sub	fp, #4
35cc8     0C 26 0E F2 | 	cmp	local01, #12 wz
35ccc     10 4E 05 A1 |  if_e	add	fp, #16
35cd0     A7 12 02 A6 |  if_e	mov	arg01, fp
35cd4     10 4E 85 A1 |  if_e	sub	fp, #16
35cd8     01 14 06 A6 |  if_e	mov	arg02, #1
35cdc     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1191
35ce0     0C 4E 05 F1 | 	add	fp, #12
35ce4     A7 14 48 FC | 	wrbyte	#10, fp
35ce8     0C 4E 85 F1 | 	sub	fp, #12
35cec                 | ' 	n = 10;
35cec                 | ' 	do
35cec                 | LR__5272
35cec     10 4E 05 F1 | 	add	fp, #16
35cf0     A7 12 02 F6 | 	mov	arg01, fp
35cf4     10 4E 85 F1 | 	sub	fp, #16
35cf8     01 14 06 F6 | 	mov	arg02, #1
35cfc     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1191
35d00     10 4E 05 F1 | 	add	fp, #16
35d04     A7 26 C2 FA | 	rdbyte	local01, fp
35d08     10 4E 85 F1 | 	sub	fp, #16
35d0c     80 26 CE F7 | 	test	local01, #128 wz
35d10     1C 00 90 AD |  if_e	jmp	#LR__5273
35d14     0C 4E 05 F1 | 	add	fp, #12
35d18     A7 26 C2 FA | 	rdbyte	local01, fp
35d1c     01 26 86 F1 | 	sub	local01, #1
35d20     A7 26 42 FC | 	wrbyte	local01, fp
35d24     A7 26 CA FA | 	rdbyte	local01, fp wz
35d28     0C 4E 85 F1 | 	sub	fp, #12
35d2c     BC FF 9F 5D |  if_ne	jmp	#LR__5272
35d30                 | LR__5273
35d30                 | ' 
35d30                 | ' 	return d;
35d30     10 4E 05 F1 | 	add	fp, #16
35d34     A7 FA C1 FA | 	rdbyte	result1, fp
35d38     10 4E 85 F1 | 	sub	fp, #16
35d3c                 | LR__5274
35d3c     A7 F0 03 F6 | 	mov	ptra, fp
35d40     B2 00 A0 FD | 	call	#popregs_
35d44                 | _fatfs_cc_send_cmd_1215_ret
35d44     2D 00 64 FD | 	ret
35d48                 | 
35d48                 | _fatfs_cc_disk_deinitialize
35d48     03 4A 05 F6 | 	mov	COUNT_, #3
35d4c     A8 00 A0 FD | 	call	#pushregs_
35d50     00 12 4E F2 | 	cmps	arg01, #0 wz
35d54     01 00 00 FF 
35d58     14 E4 05 F1 | 	add	objptr, ##532
35d5c     F2 12 02 FB | 	rdlong	arg01, objptr
35d60     04 E4 85 F1 | 	sub	objptr, #4
35d64     F2 26 02 FB | 	rdlong	local01, objptr
35d68     08 E4 05 F1 | 	add	objptr, #8
35d6c     F2 28 02 FB | 	rdlong	local02, objptr
35d70     04 E4 05 F1 | 	add	objptr, #4
35d74     F2 2A 02 FB | 	rdlong	local03, objptr
35d78     01 00 00 FF 
35d7c     1C E4 85 F1 | 	sub	objptr, ##540
35d80                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
35d80                 | '         return RES_NOTRDY;
35d80     03 FA 05 56 |  if_ne	mov	result1, #3
35d84     2C 00 90 5D |  if_ne	jmp	#LR__5280
35d88     50 12 62 FD | 	fltl	arg01
35d8c     09 01 08 FC | 	wrpin	#0, arg01
35d90     50 26 62 FD | 	fltl	local01
35d94     13 01 08 FC | 	wrpin	#0, local01
35d98     50 28 62 FD | 	fltl	local02
35d9c     14 01 08 FC | 	wrpin	#0, local02
35da0     50 2A 62 FD | 	fltl	local03
35da4     15 01 08 FC | 	wrpin	#0, local03
35da8     0A 12 06 F6 | 	mov	arg01, #10
35dac     3C 0E BF FD | 	call	#__system___waitms
35db0                 | '     }
35db0                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
35db0                 | '     _pinclear(PIN_SS);
35db0                 | '     _pinclear(PIN_CLK);
35db0                 | '     _pinclear(PIN_DI);
35db0                 | '     _pinclear(PIN_DO);
35db0                 | ' 
35db0                 | '     _waitms(10);
35db0                 | ' 
35db0                 | '     return 0;
35db0     00 FA 05 F6 | 	mov	result1, #0
35db4                 | LR__5280
35db4     A7 F0 03 F6 | 	mov	ptra, fp
35db8     B2 00 A0 FD | 	call	#popregs_
35dbc                 | _fatfs_cc_disk_deinitialize_ret
35dbc     2D 00 64 FD | 	ret
35dc0                 | 
35dc0                 | _fatfs_cc_gettimeofday
35dc0     04 4A 05 F6 | 	mov	COUNT_, #4
35dc4     A8 00 A0 FD | 	call	#pushregs_
35dc8     09 27 02 F6 | 	mov	local01, arg01
35dcc     F8 09 BF FD | 	call	#__system___getus
35dd0     FD 12 02 F6 | 	mov	arg01, result1
35dd4     02 00 00 FF 
35dd8     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
35ddc     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
35de0     09 FB 01 F6 | 	mov	result1, arg01
35de4     14 FB 81 F1 | 	sub	result1, local02
35de8     A1 07 00 FF 
35dec     40 FA 15 FD | 	qdiv	result1, ##1000000
35df0     02 00 00 FF 
35df4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35df8     18 28 62 FD | 	getqx	local02
35dfc     A1 07 00 FF 
35e00     40 FA 15 FD | 	qdiv	result1, ##1000000
35e04     00 28 0E F2 | 	cmp	local02, #0 wz
35e08     19 2A 62 FD | 	getqy	local03
35e0c     28 00 90 AD |  if_e	jmp	#LR__5290
35e10     02 00 00 FF 
35e14     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35e18     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35e1c     14 2D 02 F1 | 	add	local04, local02
35e20     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
35e24     15 13 82 F1 | 	sub	arg01, local03
35e28     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
35e2c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
35e30     02 00 00 FF 
35e34     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35e38                 | LR__5290
35e38     02 00 00 FF 
35e3c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35e40     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35e44     02 00 00 FF 
35e48     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
35e4c     13 2D 62 FC | 	wrlong	local04, local01
35e50     04 26 06 F1 | 	add	local01, #4
35e54     13 2B 62 FC | 	wrlong	local03, local01
35e58                 | '         lastsec += secs;
35e58                 | '         lastus = now - leftover;
35e58                 | '     }
35e58                 | '     tv->tv_sec = lastsec;
35e58                 | '     tv->tv_usec = leftover;
35e58                 | '     return 0;
35e58     00 FA 05 F6 | 	mov	result1, #0
35e5c     A7 F0 03 F6 | 	mov	ptra, fp
35e60     B2 00 A0 FD | 	call	#popregs_
35e64                 | _fatfs_cc_gettimeofday_ret
35e64     2D 00 64 FD | 	ret
35e68                 | 
35e68                 | _fatfs_cc__is_leap_year
35e68     09 FB 51 F6 | 	abs	result1, arg01 wc
35e6c     03 FA 05 F5 | 	and	result1, #3
35e70     FD FA 89 F6 | 	negc	result1, result1 wz
35e74     38 00 90 5D |  if_ne	jmp	#LR__5301
35e78     09 FB 51 F6 | 	abs	result1, arg01 wc
35e7c     64 FA 15 FD | 	qdiv	result1, #100
35e80     19 FA 61 FD | 	getqy	result1
35e84     FD FA 89 F6 | 	negc	result1, result1 wz
35e88     1C 00 90 5D |  if_ne	jmp	#LR__5300
35e8c     09 FB 51 F6 | 	abs	result1, arg01 wc
35e90     90 FB 15 FD | 	qdiv	result1, #400
35e94                 | '       return (0 == y % 400);
35e94     00 FA 05 F6 | 	mov	result1, #0
35e98     19 00 62 FD | 	getqy	_var01
35e9c     00 01 8A F6 | 	negc	_var01, _var01 wz
35ea0     01 FA 05 A6 |  if_e	mov	result1, #1
35ea4     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35ea8                 | LR__5300
35ea8                 | '     return 1;
35ea8     01 FA 05 F6 | 	mov	result1, #1
35eac     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35eb0                 | LR__5301
35eb0                 | '   }
35eb0                 | '   return 0;
35eb0     00 FA 05 F6 | 	mov	result1, #0
35eb4                 | _fatfs_cc__is_leap_year_ret
35eb4     2D 00 64 FD | 	ret
35eb8                 | 
35eb8                 | _fatfs_cc___tzoffset
35eb8     09 01 0A F6 | 	mov	_var01, arg01 wz
35ebc     FF FF FF FF 
35ec0     0A FF 6B FC | 	wrlong	##-1, arg02
35ec4     01 02 06 F6 | 	mov	_var02, #1
35ec8     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
35ecc                 | '                 return 0;
35ecc     00 FA 05 A6 |  if_e	mov	result1, #0
35ed0     94 02 90 AD |  if_e	jmp	#LR__5327
35ed4     0A 01 68 FC | 	wrlong	#0, arg02
35ed8     02 00 00 FF 
35edc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35ee0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
35ee4                 | ' 
35ee4                 | '        *hasdst = 0;
35ee4                 | ' 
35ee4                 | ' 	n = stdname;
35ee4                 | '         while (*s && isalpha(*s)) {
35ee4     02 00 00 FF 
35ee8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35eec     97 28 48 FB | 	callpa	#(@LR__5311-@LR__5310)>>2,fcache_load_ptr_
35ef0                 | LR__5310
35ef0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
35ef4     48 00 90 AD |  if_e	jmp	#LR__5312
35ef8     00 13 C2 FA | 	rdbyte	arg01, _var01
35efc                 | ' {
35efc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35efc     80 12 36 F3 | 	fle	arg01, #128 wc
35f00                 | '     return __ctype[c];
35f00     02 00 00 FF 
35f04     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35f08     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35f0c     09 FB C1 FA | 	rdbyte	result1, arg01
35f10     02 00 00 FF 
35f14     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35f18     0C FA CD F7 | 	test	result1, #12 wz
35f1c     20 00 90 AD |  if_e	jmp	#LR__5312
35f20     00 09 02 F6 | 	mov	_var05, _var01
35f24     00 0B 02 F6 | 	mov	_var06, _var01
35f28     01 0A 06 F1 | 	add	_var06, #1
35f2c     04 0D C2 FA | 	rdbyte	_var07, _var05
35f30     05 01 02 F6 | 	mov	_var01, _var06
35f34     03 0D 42 FC | 	wrbyte	_var07, _var04
35f38     01 06 06 F1 | 	add	_var04, #1
35f3c     B0 FF 9F FD | 	jmp	#LR__5310
35f40                 | LR__5311
35f40                 | LR__5312
35f40     03 01 48 FC | 	wrbyte	#0, _var04
35f44     00 0E 06 F6 | 	mov	_var08, #0
35f48     00 05 C2 FA | 	rdbyte	_var03, _var01
35f4c     2D 04 0E F2 | 	cmp	_var03, #45 wz
35f50     01 02 66 A6 |  if_e	neg	_var02, #1
35f54     01 00 06 A1 |  if_e	add	_var01, #1
35f58     97 28 48 FB | 	callpa	#(@LR__5314-@LR__5313)>>2,fcache_load_ptr_
35f5c                 | '                 sgn = -1;
35f5c                 | '                 s++;
35f5c                 | '         }
35f5c                 | '         while (isdigit(*s)) {
35f5c                 | LR__5313
35f5c     00 13 C2 FA | 	rdbyte	arg01, _var01
35f60                 | ' {
35f60                 | '   return  (__ctype_get(c) & 0x02 ) ;
35f60     80 12 36 F3 | 	fle	arg01, #128 wc
35f64                 | '     return __ctype[c];
35f64     02 00 00 FF 
35f68     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35f6c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35f70     09 FB C1 FA | 	rdbyte	result1, arg01
35f74     02 00 00 FF 
35f78     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35f7c     02 FA CD F7 | 	test	result1, #2 wz
35f80     28 00 90 AD |  if_e	jmp	#LR__5315
35f84     07 05 02 F6 | 	mov	_var03, _var08
35f88     02 04 66 F0 | 	shl	_var03, #2
35f8c     07 05 02 F1 | 	add	_var03, _var08
35f90     01 04 66 F0 | 	shl	_var03, #1
35f94     00 09 C2 FA | 	rdbyte	_var05, _var01
35f98     30 08 86 F1 | 	sub	_var05, #48
35f9c     04 05 02 F1 | 	add	_var03, _var05
35fa0     02 0F 02 F6 | 	mov	_var08, _var03
35fa4     01 00 06 F1 | 	add	_var01, #1
35fa8     B0 FF 9F FD | 	jmp	#LR__5313
35fac                 | LR__5314
35fac                 | LR__5315
35fac     07 00 00 FF 
35fb0     10 0E 06 FD | 	qmul	_var08, ##3600
35fb4     00 05 C2 FA | 	rdbyte	_var03, _var01
35fb8     3A 04 0E F2 | 	cmp	_var03, #58 wz
35fbc     18 10 62 FD | 	getqx	_var09
35fc0     70 00 90 5D |  if_ne	jmp	#LR__5319
35fc4     00 0E 06 F6 | 	mov	_var08, #0
35fc8     01 00 06 F1 | 	add	_var01, #1
35fcc     97 28 48 FB | 	callpa	#(@LR__5317-@LR__5316)>>2,fcache_load_ptr_
35fd0                 | '                 x = 0;
35fd0                 | '                 s++;
35fd0                 | '                 while (isdigit(*s)) {
35fd0                 | LR__5316
35fd0     00 13 C2 FA | 	rdbyte	arg01, _var01
35fd4                 | ' {
35fd4                 | '   return  (__ctype_get(c) & 0x02 ) ;
35fd4     80 12 36 F3 | 	fle	arg01, #128 wc
35fd8                 | '     return __ctype[c];
35fd8     02 00 00 FF 
35fdc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35fe0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35fe4     09 FB C1 FA | 	rdbyte	result1, arg01
35fe8     02 00 00 FF 
35fec     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35ff0     02 FA CD F7 | 	test	result1, #2 wz
35ff4     28 00 90 AD |  if_e	jmp	#LR__5318
35ff8     07 05 02 F6 | 	mov	_var03, _var08
35ffc     02 04 66 F0 | 	shl	_var03, #2
36000     07 05 02 F1 | 	add	_var03, _var08
36004     01 04 66 F0 | 	shl	_var03, #1
36008     00 09 C2 FA | 	rdbyte	_var05, _var01
3600c     30 08 86 F1 | 	sub	_var05, #48
36010     04 05 02 F1 | 	add	_var03, _var05
36014     02 0F 02 F6 | 	mov	_var08, _var03
36018     01 00 06 F1 | 	add	_var01, #1
3601c     B0 FF 9F FD | 	jmp	#LR__5316
36020                 | LR__5317
36020                 | LR__5318
36020     07 0D 02 F6 | 	mov	_var07, _var08
36024     04 0C 66 F0 | 	shl	_var07, #4
36028     07 0D 82 F1 | 	sub	_var07, _var08
3602c     02 0C 66 F0 | 	shl	_var07, #2
36030     06 11 02 F1 | 	add	_var09, _var07
36034                 | LR__5319
36034     02 00 00 FF 
36038     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3603c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
36040     00 13 C2 FA | 	rdbyte	arg01, _var01
36044                 | ' {
36044                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36044     80 12 36 F3 | 	fle	arg01, #128 wc
36048                 | '     return __ctype[c];
36048     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
3604c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36050     09 FB C1 FA | 	rdbyte	result1, arg01
36054     02 00 00 FF 
36058     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3605c     0C FA CD F7 | 	test	result1, #12 wz
36060     50 00 90 AD |  if_e	jmp	#LR__5322
36064     0A 03 68 FC | 	wrlong	#1, arg02
36068                 | '                 *hasdst = 1;
36068                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
36068                 | LR__5320
36068     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3606c     44 00 90 AD |  if_e	jmp	#LR__5321
36070     00 13 C2 FA | 	rdbyte	arg01, _var01
36074                 | ' {
36074                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36074     80 12 36 F3 | 	fle	arg01, #128 wc
36078                 | '     return __ctype[c];
36078     02 00 00 FF 
3607c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36080     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36084     09 FB C1 FA | 	rdbyte	result1, arg01
36088     02 00 00 FF 
3608c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36090     0C FA CD F7 | 	test	result1, #12 wz
36094     1C 00 90 AD |  if_e	jmp	#LR__5321
36098     00 0B 02 F6 | 	mov	_var06, _var01
3609c     01 0A 06 F1 | 	add	_var06, #1
360a0     00 0D C2 FA | 	rdbyte	_var07, _var01
360a4     05 01 02 F6 | 	mov	_var01, _var06
360a8     03 0D 42 FC | 	wrbyte	_var07, _var04
360ac     01 06 06 F1 | 	add	_var04, #1
360b0     B4 FF 9F FD | 	jmp	#LR__5320
360b4                 | LR__5321
360b4                 | LR__5322
360b4     03 01 48 FC | 	wrbyte	#0, _var04
360b8     02 00 00 FF 
360bc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
360c0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
360c4     02 00 00 FF 
360c8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
360cc     20 00 90 AD |  if_e	jmp	#LR__5323
360d0     02 00 00 FF 
360d4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
360d8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
360dc     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
360e0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
360e4     02 00 00 FF 
360e8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
360ec     1C 00 90 FD | 	jmp	#LR__5324
360f0                 | LR__5323
360f0     02 00 00 FF 
360f4     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
360f8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
360fc     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
36100     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36104     02 00 00 FF 
36108     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3610c                 | LR__5324
3610c     02 00 00 FF 
36110     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36114     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36118     02 00 00 FF 
3611c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
36120     20 00 90 AD |  if_e	jmp	#LR__5325
36124     02 00 00 FF 
36128     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3612c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36130     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
36134     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36138     02 00 00 FF 
3613c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
36140     1C 00 90 FD | 	jmp	#LR__5326
36144                 | LR__5325
36144     02 00 00 FF 
36148     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3614c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36150     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
36154     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36158     02 00 00 FF 
3615c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
36160                 | LR__5326
36160     08 03 02 FD | 	qmul	_var02, _var09
36164                 | ' 		_tzname[1] = stdname;
36164                 | ' 
36164                 | '         return sgn * off;
36164     18 FA 61 FD | 	getqx	result1
36168                 | LR__5327
36168                 | _fatfs_cc___tzoffset_ret
36168     2D 00 64 FD | 	ret
3616c                 | 
3616c                 | _fatfs_cc___indst
3616c     10 12 06 F1 | 	add	arg01, #16
36170     09 01 02 FB | 	rdlong	_var01, arg01
36174     10 12 86 F1 | 	sub	arg01, #16
36178     02 00 0E F2 | 	cmp	_var01, #2 wz
3617c     30 00 90 5D |  if_ne	jmp	#LR__5330
36180     07 00 06 F6 | 	mov	_var01, #7
36184     18 12 06 F1 | 	add	arg01, #24
36188     09 03 02 FB | 	rdlong	_var02, arg01
3618c     01 01 02 F1 | 	add	_var01, _var02
36190     0C 12 86 F1 | 	sub	arg01, #12
36194     09 05 02 FB | 	rdlong	_var03, arg01
36198     02 01 82 F1 | 	sub	_var01, _var03
3619c     00 00 56 F2 | 	cmps	_var01, #0 wc
361a0                 | '                         return 1;
361a0     01 FA 05 C6 |  if_b	mov	result1, #1
361a4     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
361a8                 | '                 return 0;
361a8     00 FA 05 F6 | 	mov	result1, #0
361ac     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
361b0                 | LR__5330
361b0     10 12 06 F1 | 	add	arg01, #16
361b4     09 01 02 FB | 	rdlong	_var01, arg01
361b8     10 12 86 F1 | 	sub	arg01, #16
361bc     0A 00 0E F2 | 	cmp	_var01, #10 wz
361c0     28 00 90 5D |  if_ne	jmp	#LR__5331
361c4     18 12 06 F1 | 	add	arg01, #24
361c8     09 01 02 FB | 	rdlong	_var01, arg01
361cc     0C 12 86 F1 | 	sub	arg01, #12
361d0     09 07 02 FB | 	rdlong	_var04, arg01
361d4     03 01 82 F1 | 	sub	_var01, _var04
361d8     00 00 56 F2 | 	cmps	_var01, #0 wc
361dc                 | '                         return 0;
361dc     00 FA 05 C6 |  if_b	mov	result1, #0
361e0     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
361e4                 | '                 return 1;
361e4     01 FA 05 F6 | 	mov	result1, #1
361e8     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
361ec                 | LR__5331
361ec                 | '         }
361ec                 | ' 
361ec                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
361ec     00 00 06 F6 | 	mov	_var01, #0
361f0     10 12 06 F1 | 	add	arg01, #16
361f4     09 03 02 FB | 	rdlong	_var02, arg01
361f8     10 12 86 F1 | 	sub	arg01, #16
361fc     03 02 56 F2 | 	cmps	_var02, #3 wc
36200     10 00 90 CD |  if_b	jmp	#LR__5332
36204     10 12 06 F1 | 	add	arg01, #16
36208     09 05 02 FB | 	rdlong	_var03, arg01
3620c     0A 04 56 F2 | 	cmps	_var03, #10 wc
36210     01 00 06 C6 |  if_b	mov	_var01, #1
36214                 | LR__5332
36214     00 FB 01 F6 | 	mov	result1, _var01
36218                 | _fatfs_cc___indst_ret
36218     2D 00 64 FD | 	ret
3621c                 | 
3621c                 | ' 	
3621c                 | ' 	FUNCTION pfunc(c as integer) as integer
3621c                 | ___strs_cl_pfunc
3621c                 | ' 		if (i < 16) then
3621c     04 E4 05 F1 | 	add	objptr, #4
36220     F2 FA 01 FB | 	rdlong	result1, objptr
36224     04 E4 85 F1 | 	sub	objptr, #4
36228     10 FA 55 F2 | 	cmps	result1, #16 wc
3622c     2C 00 90 3D |  if_ae	jmp	#LR__5340
36230     F2 FA 01 FB | 	rdlong	result1, objptr
36234     04 E4 05 F1 | 	add	objptr, #4
36238     F2 00 02 FB | 	rdlong	_var01, objptr
3623c     FD 00 02 F1 | 	add	_var01, result1
36240     00 13 42 FC | 	wrbyte	arg01, _var01
36244     F2 FA 01 FB | 	rdlong	result1, objptr
36248     01 FA 05 F1 | 	add	result1, #1
3624c     F2 FA 61 FC | 	wrlong	result1, objptr
36250     04 E4 85 F1 | 	sub	objptr, #4
36254                 | ' 			p(i) = c
36254                 | ' 			i = i+1
36254                 | ' 			return 1
36254     01 FA 05 F6 | 	mov	result1, #1
36258     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
3625c                 | LR__5340
3625c                 | ' 			return -1
3625c     01 FA 65 F6 | 	neg	result1, #1
36260                 | ___strs_cl_pfunc_ret
36260     2D 00 64 FD | 	ret
36264                 | 
36264                 | __struct__s_vfs_file_t_putchar
36264     04 4A 05 F6 | 	mov	COUNT_, #4
36268     A8 00 A0 FD | 	call	#pushregs_
3626c     1C E4 05 F1 | 	add	objptr, #28
36270     F2 26 0A FB | 	rdlong	local01, objptr wz
36274     1C E4 85 F1 | 	sub	objptr, #28
36278     00 FA 05 A6 |  if_e	mov	result1, #0
3627c     48 00 90 AD |  if_e	jmp	#LR__5350
36280     1C E4 05 F1 | 	add	objptr, #28
36284     F2 28 02 FB | 	rdlong	local02, objptr
36288     14 2B 02 F6 | 	mov	local03, local02
3628c     1C E4 85 F1 | 	sub	objptr, #28
36290     13 2A 46 F7 | 	zerox	local03, #19
36294     14 28 46 F0 | 	shr	local02, #20
36298     02 28 66 F0 | 	shl	local02, #2
3629c     ED 28 02 F1 | 	add	local02, __methods__
362a0     14 29 02 FB | 	rdlong	local02, local02
362a4     F2 14 02 F6 | 	mov	arg02, objptr
362a8     F2 2C 02 F6 | 	mov	local04, objptr
362ac     15 E5 01 F6 | 	mov	objptr, local03
362b0     2D 28 62 FD | 	call	local02
362b4     16 E5 01 F6 | 	mov	objptr, local04
362b8                 | '     return (i < 0) ? 0 : 1;
362b8     00 FA 55 F2 | 	cmps	result1, #0 wc
362bc     00 26 06 C6 |  if_b	mov	local01, #0
362c0     01 26 06 36 |  if_ae	mov	local01, #1
362c4     13 FB 01 F6 | 	mov	result1, local01
362c8                 | LR__5350
362c8     A7 F0 03 F6 | 	mov	ptra, fp
362cc     B2 00 A0 FD | 	call	#popregs_
362d0                 | __struct__s_vfs_file_t_putchar_ret
362d0     2D 00 64 FD | 	ret
362d4                 | 
362d4                 | __struct__s_vfs_file_t_getchar
362d4     03 4A 05 F6 | 	mov	COUNT_, #3
362d8     A8 00 A0 FD | 	call	#pushregs_
362dc     20 E4 05 F1 | 	add	objptr, #32
362e0     F2 12 0A FB | 	rdlong	arg01, objptr wz
362e4     20 E4 85 F1 | 	sub	objptr, #32
362e8     01 FA 65 A6 |  if_e	neg	result1, #1
362ec     38 00 90 AD |  if_e	jmp	#LR__5360
362f0                 | '     return getcf(__this);
362f0     20 E4 05 F1 | 	add	objptr, #32
362f4     F2 26 02 FB | 	rdlong	local01, objptr
362f8     13 29 02 F6 | 	mov	local02, local01
362fc     20 E4 85 F1 | 	sub	objptr, #32
36300     13 28 46 F7 | 	zerox	local02, #19
36304     14 26 46 F0 | 	shr	local01, #20
36308     02 26 66 F0 | 	shl	local01, #2
3630c     ED 26 02 F1 | 	add	local01, __methods__
36310     13 27 02 FB | 	rdlong	local01, local01
36314     F2 12 02 F6 | 	mov	arg01, objptr
36318     F2 2A 02 F6 | 	mov	local03, objptr
3631c     14 E5 01 F6 | 	mov	objptr, local02
36320     2D 26 62 FD | 	call	local01
36324     15 E5 01 F6 | 	mov	objptr, local03
36328                 | LR__5360
36328     A7 F0 03 F6 | 	mov	ptra, fp
3632c     B2 00 A0 FD | 	call	#popregs_
36330                 | __struct__s_vfs_file_t_getchar_ret
36330     2D 00 64 FD | 	ret
36334                 | 
36334                 | __struct___bas_wrap_sender_tx
36334     03 4A 05 F6 | 	mov	COUNT_, #3
36338     A8 00 A0 FD | 	call	#pushregs_
3633c     F2 26 02 FB | 	rdlong	local01, objptr
36340     13 29 02 F6 | 	mov	local02, local01
36344     13 26 46 F7 | 	zerox	local01, #19
36348     14 28 46 F0 | 	shr	local02, #20
3634c     02 28 66 F0 | 	shl	local02, #2
36350     ED 28 02 F1 | 	add	local02, __methods__
36354     14 29 02 FB | 	rdlong	local02, local02
36358     F2 2A 02 F6 | 	mov	local03, objptr
3635c     13 E5 01 F6 | 	mov	objptr, local01
36360     2D 28 62 FD | 	call	local02
36364     15 E5 01 F6 | 	mov	objptr, local03
36368     01 FA 05 F6 | 	mov	result1, #1
3636c     A7 F0 03 F6 | 	mov	ptra, fp
36370     B2 00 A0 FD | 	call	#popregs_
36374                 | __struct___bas_wrap_sender_tx_ret
36374     2D 00 64 FD | 	ret
36378                 | 
36378                 | __struct___bas_wrap_sender_rx
36378     03 4A 05 F6 | 	mov	COUNT_, #3
3637c     A8 00 A0 FD | 	call	#pushregs_
36380     04 E4 05 F1 | 	add	objptr, #4
36384     F2 26 02 FB | 	rdlong	local01, objptr
36388     13 29 02 F6 | 	mov	local02, local01
3638c     04 E4 85 F1 | 	sub	objptr, #4
36390     13 28 46 F7 | 	zerox	local02, #19
36394     14 26 46 F0 | 	shr	local01, #20
36398     02 26 66 F0 | 	shl	local01, #2
3639c     ED 26 02 F1 | 	add	local01, __methods__
363a0     13 27 02 FB | 	rdlong	local01, local01
363a4     F2 2A 02 F6 | 	mov	local03, objptr
363a8     14 E5 01 F6 | 	mov	objptr, local02
363ac     2D 26 62 FD | 	call	local01
363b0     15 E5 01 F6 | 	mov	objptr, local03
363b4     A7 F0 03 F6 | 	mov	ptra, fp
363b8     B2 00 A0 FD | 	call	#popregs_
363bc                 | __struct___bas_wrap_sender_rx_ret
363bc     2D 00 64 FD | 	ret
363c0                 | 
363c0                 | __struct___bas_wrap_sender_close
363c0     03 4A 05 F6 | 	mov	COUNT_, #3
363c4     A8 00 A0 FD | 	call	#pushregs_
363c8     08 E4 05 F1 | 	add	objptr, #8
363cc     F2 26 02 FB | 	rdlong	local01, objptr
363d0     13 29 02 F6 | 	mov	local02, local01
363d4     08 E4 85 F1 | 	sub	objptr, #8
363d8     13 28 46 F7 | 	zerox	local02, #19
363dc     14 26 46 F0 | 	shr	local01, #20
363e0     02 26 66 F0 | 	shl	local01, #2
363e4     ED 26 02 F1 | 	add	local01, __methods__
363e8     13 27 02 FB | 	rdlong	local01, local01
363ec     F2 2A 02 F6 | 	mov	local03, objptr
363f0     14 E5 01 F6 | 	mov	objptr, local02
363f4     2D 26 62 FD | 	call	local01
363f8     15 E5 01 F6 | 	mov	objptr, local03
363fc     A7 F0 03 F6 | 	mov	ptra, fp
36400     B2 00 A0 FD | 	call	#popregs_
36404                 | __struct___bas_wrap_sender_close_ret
36404     2D 00 64 FD | 	ret
36408                 | 
36408                 | LR__5370
36408     2F          | 	byte	"/"
36409     00          | 	byte	0
3640a                 | LR__5371
3640a     69 6E 66    | 	byte	"inf"
3640d     00          | 	byte	0
3640e                 | LR__5372
3640e     6E 61 6E    | 	byte	"nan"
36411     00          | 	byte	0
36412                 | LR__5373
36412                 | 	byte	
36412     00          | 	byte	0
36413                 | LR__5374
36413                 | 	byte	
36413     00          | 	byte	0
36414                 | LR__5375
36414                 | 	byte	
36414     00          | 	byte	0
36415                 | LR__5376
36415                 | 	byte	
36415     00          | 	byte	0
36416                 | LR__5377
36416                 | 	byte	
36416     00          | 	byte	0
36417                 | LR__5378
36417                 | 	byte	
36417     00          | 	byte	0
36418                 | LR__5379
36418                 | 	byte	
36418     00          | 	byte	0
36419                 | LR__5380
36419                 | 	byte	
36419     00          | 	byte	0
3641a                 | LR__5381
3641a     00          | 	byte	0
3641b     00          | 	byte	0
3641c                 | LR__5382
3641c     00          | 	byte	0
3641d     00          | 	byte	0
3641e                 | LR__5383
3641e     00          | 	byte	0
3641f     00          | 	byte	0
36420                 | LR__5384
36420     20 21 21 21 
36424     20 63 6F 72 
36428     72 75 70 74 
3642c     65 64 20 68 
36430     65 61 70 3F 
36434     3F 3F 20 21 
36438     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
3643b     00          | 	byte	0
3643c                 | LR__5385
3643c     20 21 21 21 
36440     20 6F 75 74 
36444     20 6F 66 20 
36448     68 65 61 70 
3644c     20 6D 65 6D 
36450     6F 72 79 20 
36454     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
36458     00          | 	byte	0
36459                 | LR__5386
36459     20 21 21 21 
3645d     20 63 6F 72 
36461     72 75 70 74 
36465     65 64 20 68 
36469     65 61 70 20 
3646d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
36471     00          | 	byte	0
36472                 | LR__5387
36472     00          | 	byte	0
36473     00          | 	byte	0
36474                 | LR__5388
36474     2E          | 	byte	"."
36475     00          | 	byte	0
36476                 | LR__5389
36476     00          | 	byte	0
36477     00          | 	byte	0
36478                 | LR__5390
36478     00          | 	byte	0
36479     00          | 	byte	0
3647a                 | LR__5391
3647a     00          | 	byte	0
3647b     00          | 	byte	0
3647c                 | LR__5392
3647c     2A 3A 3C 3E 
36480     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
36484     00          | 	byte	0
36485                 | LR__5393
36485     2B 2C 3B 3D 
36489     5B 5D       | 	byte	"+,;=[]"
3648b     00          | 	byte	0
3648c                 | LR__5394
3648c     46 41 54 33 
36490     32 20 20 20 | 	byte	"FAT32   "
36494     00          | 	byte	0
36495                 | LR__5395
36495     54 5A       | 	byte	"TZ"
36497     00          | 	byte	0
36498                 | LR__5396
36498     00          | 	byte	0
36499     00          | 	byte	0
3649a                 | LR__5397
3649a                 | 	byte	
3649a     00          | 	byte	0
3649b                 | LR__5398
3649b                 | 	byte	
3649b     00          | 	byte	0
3649c                 | LR__5399
3649c                 | 	byte	
3649c     00          | 	byte	0
3649d                 | LR__5400
3649d                 | 	byte	
3649d     00          | 	byte	0
3649e                 | LR__5401
3649e     22          | 	byte	34
3649f     00          | 	byte	0
364a0                 | LR__5402
364a0     22          | 	byte	34
364a1     00          | 	byte	0
364a2                 | LR__5403
364a2     3A          | 	byte	":"
364a3     00          | 	byte	0
364a4                 | LR__5404
364a4                 | 	byte	
364a4     00          | 	byte	0
364a5                 | LR__5405
364a5                 | 	byte	
364a5     00          | 	byte	0
364a6                 | LR__5406
364a6                 | 	byte	
364a6     00          | 	byte	0
364a7                 | LR__5407
364a7                 | 	byte	
364a7     00          | 	byte	0
364a8                 | LR__5408
364a8                 | 	byte	
364a8     00          | 	byte	0
364a9                 | LR__5409
364a9                 | 	byte	
364a9     00          | 	byte	0
364aa                 | LR__5410
364aa                 | 	byte	
364aa     00          | 	byte	0
364ab                 | LR__5411
364ab     30          | 	byte	"0"
364ac     00          | 	byte	0
364ad                 | LR__5412
364ad     22          | 	byte	34
364ae     00          | 	byte	0
364af                 | LR__5413
364af     22          | 	byte	34
364b0     00          | 	byte	0
364b1                 | LR__5414
364b1     22          | 	byte	34
364b2     00          | 	byte	0
364b3                 | LR__5415
364b3     22          | 	byte	34
364b4     00          | 	byte	0
364b5                 | LR__5416
364b5     22          | 	byte	34
364b6     00          | 	byte	0
364b7                 | LR__5417
364b7     3E          | 	byte	">"
364b8     00          | 	byte	0
364b9                 | LR__5418
364b9     3C          | 	byte	"<"
364ba     00          | 	byte	0
364bb                 | LR__5419
364bb     2B          | 	byte	"+"
364bc     00          | 	byte	0
364bd                 | LR__5420
364bd     2D          | 	byte	"-"
364be     00          | 	byte	0
364bf                 | LR__5421
364bf     2A          | 	byte	"*"
364c0     00          | 	byte	0
364c1                 | LR__5422
364c1     2F          | 	byte	"/"
364c2     00          | 	byte	0
364c3                 | LR__5423
364c3     5E          | 	byte	"^"
364c4     00          | 	byte	0
364c5                 | LR__5424
364c5     3D          | 	byte	"="
364c6     00          | 	byte	0
364c7                 | LR__5425
364c7     2B          | 	byte	"+"
364c8     00          | 	byte	0
364c9                 | LR__5426
364c9     2B          | 	byte	"+"
364ca     00          | 	byte	0
364cb                 | LR__5427
364cb     2D          | 	byte	"-"
364cc     00          | 	byte	0
364cd                 | LR__5428
364cd     2D          | 	byte	"-"
364ce     00          | 	byte	0
364cf                 | LR__5429
364cf     3C          | 	byte	"<"
364d0     00          | 	byte	0
364d1                 | LR__5430
364d1     3E          | 	byte	">"
364d2     00          | 	byte	0
364d3                 | LR__5431
364d3     22          | 	byte	34
364d4     00          | 	byte	0
364d5                 | LR__5432
364d5     22          | 	byte	34
364d6     00          | 	byte	0
364d7                 | LR__5433
364d7     65 6C 73 65 | 	byte	"else"
364db     00          | 	byte	0
364dc                 | LR__5434
364dc     74 68 65 6E | 	byte	"then"
364e0     00          | 	byte	0
364e1                 | LR__5435
364e1     3F          | 	byte	"?"
364e2     00          | 	byte	0
364e3                 | LR__5436
364e3     3F          | 	byte	"?"
364e4     00          | 	byte	0
364e5                 | LR__5437
364e5     2E          | 	byte	"."
364e6     00          | 	byte	0
364e7                 | LR__5438
364e7     6D 6F 75 73 
364eb     65          | 	byte	"mouse"
364ec     00          | 	byte	0
364ed                 | LR__5439
364ed     63 75 72 73 
364f1     6F 72       | 	byte	"cursor"
364f3     00          | 	byte	0
364f4                 | LR__5440
364f4     63 6C 69 63 
364f8     6B          | 	byte	"click"
364f9     00          | 	byte	0
364fa                 | LR__5441
364fa     6F 6E       | 	byte	"on"
364fc     00          | 	byte	0
364fd                 | LR__5442
364fd     31          | 	byte	"1"
364fe     00          | 	byte	0
364ff                 | LR__5443
364ff     6F 66 66    | 	byte	"off"
36502     00          | 	byte	0
36503                 | LR__5444
36503     30          | 	byte	"0"
36504     00          | 	byte	0
36505                 | LR__5445
36505     6D 6F 64 65 | 	byte	"mode"
36509     00          | 	byte	0
3650a                 | LR__5446
3650a     6D 2E       | 	byte	"m."
3650c     00          | 	byte	0
3650d                 | LR__5447
3650d     61 74 61 72 
36511     69          | 	byte	"atari"
36512     00          | 	byte	0
36513                 | LR__5448
36513     30          | 	byte	"0"
36514     00          | 	byte	0
36515                 | LR__5449
36515     70 63 5F 61 
36519     6D 62 65 72 | 	byte	"pc_amber"
3651d     00          | 	byte	0
3651e                 | LR__5450
3651e     31          | 	byte	"1"
3651f     00          | 	byte	0
36520                 | LR__5451
36520     70 63 5F 67 
36524     72 65 65 6E | 	byte	"pc_green"
36528     00          | 	byte	0
36529                 | LR__5452
36529     32          | 	byte	"2"
3652a     00          | 	byte	0
3652b                 | LR__5453
3652b     70 63 5F 77 
3652f     68 69 74 65 | 	byte	"pc_white"
36533     00          | 	byte	0
36534                 | LR__5454
36534     33          | 	byte	"3"
36535     00          | 	byte	0
36536                 | LR__5455
36536     73 74       | 	byte	"st"
36538     00          | 	byte	0
36539                 | LR__5456
36539     34          | 	byte	"4"
3653a     00          | 	byte	0
3653b                 | LR__5457
3653b                 | 	byte	
3653b     00          | 	byte	0
3653c                 | LR__5458
3653c     6C 6F 61 64 | 	byte	"load"
36540     00          | 	byte	0
36541                 | LR__5459
36541     73 61 76 65 | 	byte	"save"
36545     00          | 	byte	0
36546                 | LR__5460
36546     62 72 75 6E | 	byte	"brun"
3654a     00          | 	byte	0
3654b                 | LR__5461
3654b     72 75 6E    | 	byte	"run"
3654e     00          | 	byte	0
3654f                 | LR__5462
3654f     6C 6F 2E    | 	byte	"lo."
36552     00          | 	byte	0
36553                 | LR__5463
36553     73 2E       | 	byte	"s."
36555     00          | 	byte	0
36556                 | LR__5464
36556     62 72 2E    | 	byte	"br."
36559     00          | 	byte	0
3655a                 | LR__5465
3655a     65 6E 74 65 
3655e     72          | 	byte	"enter"
3655f     00          | 	byte	0
36560                 | LR__5466
36560     65 2E       | 	byte	"e."
36562     00          | 	byte	0
36563                 | LR__5467
36563     24          | 	byte	"$"
36564     00          | 	byte	0
36565                 | LR__5468
36565     64 65 6C 65 
36569     74 65       | 	byte	"delete"
3656b     00          | 	byte	0
3656c                 | LR__5469
3656c     6D 6B 64 69 
36570     72          | 	byte	"mkdir"
36571     00          | 	byte	0
36572                 | LR__5470
36572     24          | 	byte	"$"
36573     00          | 	byte	0
36574                 | LR__5471
36574     63 6F 70 79 | 	byte	"copy"
36578     00          | 	byte	0
36579                 | LR__5472
36579     24          | 	byte	"$"
3657a     00          | 	byte	0
3657b                 | LR__5473
3657b     63 6F 70 79 | 	byte	"copy"
3657f     00          | 	byte	0
36580                 | LR__5474
36580     24          | 	byte	"$"
36581     00          | 	byte	0
36582                 | LR__5475
36582     63 64       | 	byte	"cd"
36584     00          | 	byte	0
36585                 | LR__5476
36585     63 64 2E    | 	byte	"cd."
36588     00          | 	byte	0
36589                 | LR__5477
36589     2E          | 	byte	"."
3658a     00          | 	byte	0
3658b                 | LR__5478
3658b     2E 2E       | 	byte	".."
3658d     00          | 	byte	0
3658e                 | LR__5479
3658e     63 64       | 	byte	"cd"
36590     00          | 	byte	0
36591                 | LR__5480
36591     2F          | 	byte	"/"
36592     00          | 	byte	0
36593                 | LR__5481
36593                 | 	byte	
36593     00          | 	byte	0
36594                 | LR__5482
36594                 | 	byte	
36594     00          | 	byte	0
36595                 | LR__5483
36595                 | 	byte	
36595     00          | 	byte	0
36596                 | LR__5484
36596                 | 	byte	
36596     00          | 	byte	0
36597                 | LR__5485
36597                 | 	byte	
36597     00          | 	byte	0
36598                 | LR__5486
36598     52 65 61 64 
3659c     79          | 	byte	"Ready"
3659d     00          | 	byte	0
3659e                 | LR__5487
3659e     2B          | 	byte	"+"
3659f     00          | 	byte	0
365a0                 | LR__5488
365a0     2D          | 	byte	"-"
365a1     00          | 	byte	0
365a2                 | LR__5489
365a2     6F 72       | 	byte	"or"
365a4     00          | 	byte	0
365a5                 | LR__5490
365a5     78 6F 72    | 	byte	"xor"
365a8     00          | 	byte	0
365a9                 | LR__5491
365a9     2A          | 	byte	"*"
365aa     00          | 	byte	0
365ab                 | LR__5492
365ab     2F          | 	byte	"/"
365ac     00          | 	byte	0
365ad                 | LR__5493
365ad     61 6E 64    | 	byte	"and"
365b0     00          | 	byte	0
365b1                 | LR__5494
365b1     64 69 76    | 	byte	"div"
365b4     00          | 	byte	0
365b5                 | LR__5495
365b5     6D 6F 64    | 	byte	"mod"
365b8     00          | 	byte	0
365b9                 | LR__5496
365b9     73 68 6C    | 	byte	"shl"
365bc     00          | 	byte	0
365bd                 | LR__5497
365bd     73 68 72    | 	byte	"shr"
365c0     00          | 	byte	0
365c1                 | LR__5498
365c1     5E          | 	byte	"^"
365c2     00          | 	byte	0
365c3                 | LR__5499
365c3     6E 6F 74    | 	byte	"not"
365c6     00          | 	byte	0
365c7                 | LR__5500
365c7     40          | 	byte	"@"
365c8     00          | 	byte	0
365c9                 | LR__5501
365c9     3D          | 	byte	"="
365ca     00          | 	byte	0
365cb                 | LR__5502
365cb     3E 3D       | 	byte	">="
365cd     00          | 	byte	0
365ce                 | LR__5503
365ce     3C 3D       | 	byte	"<="
365d0     00          | 	byte	0
365d1                 | LR__5504
365d1     3C          | 	byte	"<"
365d2     00          | 	byte	0
365d3                 | LR__5505
365d3     3E          | 	byte	">"
365d4     00          | 	byte	0
365d5                 | LR__5506
365d5     3C 3E       | 	byte	"<>"
365d7     00          | 	byte	0
365d8                 | LR__5507
365d8     2B 2B       | 	byte	"++"
365da     00          | 	byte	0
365db                 | LR__5508
365db     2D 2D       | 	byte	"--"
365dd     00          | 	byte	0
365de                 | LR__5509
365de     23          | 	byte	"#"
365df     00          | 	byte	0
365e0                 | LR__5510
365e0     30          | 	byte	"0"
365e1     00          | 	byte	0
365e2                 | LR__5511
365e2     39          | 	byte	"9"
365e3     00          | 	byte	0
365e4                 | LR__5512
365e4     23 72 65 61 
365e8     64          | 	byte	"#read"
365e9     00          | 	byte	0
365ea                 | LR__5513
365ea     23 77 72 69 
365ee     74 65       | 	byte	"#write"
365f0     00          | 	byte	0
365f1                 | LR__5514
365f1     23 61 70 70 
365f5     65 6E 64    | 	byte	"#append"
365f8     00          | 	byte	0
365f9                 | LR__5515
365f9     23          | 	byte	"#"
365fa     00          | 	byte	0
365fb                 | LR__5516
365fb     23          | 	byte	"#"
365fc     00          | 	byte	0
365fd                 | LR__5517
365fd     2D          | 	byte	"-"
365fe     00          | 	byte	0
365ff                 | LR__5518
365ff     30          | 	byte	"0"
36600     00          | 	byte	0
36601                 | LR__5519
36601     63          | 	byte	"c"
36602     00          | 	byte	0
36603                 | LR__5520
36603     63 23       | 	byte	"c#"
36605     00          | 	byte	0
36606                 | LR__5521
36606     64          | 	byte	"d"
36607     00          | 	byte	0
36608                 | LR__5522
36608     64 23       | 	byte	"d#"
3660a     00          | 	byte	0
3660b                 | LR__5523
3660b     65          | 	byte	"e"
3660c     00          | 	byte	0
3660d                 | LR__5524
3660d     66          | 	byte	"f"
3660e     00          | 	byte	0
3660f                 | LR__5525
3660f     66 23       | 	byte	"f#"
36611     00          | 	byte	0
36612                 | LR__5526
36612     67          | 	byte	"g"
36613     00          | 	byte	0
36614                 | LR__5527
36614     67 23       | 	byte	"g#"
36616     00          | 	byte	0
36617                 | LR__5528
36617     61          | 	byte	"a"
36618     00          | 	byte	0
36619                 | LR__5529
36619     61 23       | 	byte	"a#"
3661b     00          | 	byte	0
3661c                 | LR__5530
3661c     68          | 	byte	"h"
3661d     00          | 	byte	0
3661e                 | LR__5531
3661e     62          | 	byte	"b"
3661f     00          | 	byte	0
36620                 | LR__5532
36620     2B          | 	byte	"+"
36621     00          | 	byte	0
36622                 | LR__5533
36622     2D          | 	byte	"-"
36623     00          | 	byte	0
36624                 | LR__5534
36624     3D          | 	byte	"="
36625     00          | 	byte	0
36626                 | LR__5535
36626     2C          | 	byte	","
36627     00          | 	byte	0
36628                 | LR__5536
36628     2A          | 	byte	"*"
36629     00          | 	byte	0
3662a                 | LR__5537
3662a     2F          | 	byte	"/"
3662b     00          | 	byte	0
3662c                 | LR__5538
3662c     3B          | 	byte	";"
3662d     00          | 	byte	0
3662e                 | LR__5539
3662e     22          | 	byte	34
3662f     00          | 	byte	0
36630                 | LR__5540
36630     5E          | 	byte	"^"
36631     00          | 	byte	0
36632                 | LR__5541
36632     29          | 	byte	")"
36633     00          | 	byte	0
36634                 | LR__5542
36634     28          | 	byte	"("
36635     00          | 	byte	0
36636                 | LR__5543
36636     3A          | 	byte	":"
36637     00          | 	byte	0
36638                 | LR__5544
36638     20          | 	byte	" "
36639     00          | 	byte	0
3663a                 | LR__5545
3663a     3E          | 	byte	">"
3663b     00          | 	byte	0
3663c                 | LR__5546
3663c     3C          | 	byte	"<"
3663d     00          | 	byte	0
3663e                 | LR__5547
3663e     3D          | 	byte	"="
3663f     00          | 	byte	0
36640                 | LR__5548
36640     62 65 65 70 | 	byte	"beep"
36644     00          | 	byte	0
36645                 | LR__5549
36645     62 2E       | 	byte	"b."
36647     00          | 	byte	0
36648                 | LR__5550
36648     62 6C 69 74 | 	byte	"blit"
3664c     00          | 	byte	0
3664d                 | LR__5551
3664d     62 6F 78    | 	byte	"box"
36650     00          | 	byte	0
36651                 | LR__5552
36651     62 72 75 6E | 	byte	"brun"
36655     00          | 	byte	0
36656                 | LR__5553
36656     62 72 2E    | 	byte	"br."
36659     00          | 	byte	0
3665a                 | LR__5554
3665a     63 64       | 	byte	"cd"
3665c     00          | 	byte	0
3665d                 | LR__5555
3665d     63 68 61 6E 
36661     67 65 66 72 
36665     65 71       | 	byte	"changefreq"
36667     00          | 	byte	0
36668                 | LR__5556
36668     63 66 2E    | 	byte	"cf."
3666b     00          | 	byte	0
3666c                 | LR__5557
3666c     63 68 61 6E 
36670     67 65 70 61 
36674     6E          | 	byte	"changepan"
36675     00          | 	byte	0
36676                 | LR__5558
36676     63 70 2E    | 	byte	"cp."
36679     00          | 	byte	0
3667a                 | LR__5559
3667a     63 68 61 6E 
3667e     67 65 76 6F 
36682     6C          | 	byte	"changevol"
36683     00          | 	byte	0
36684                 | LR__5560
36684     63 76 2E    | 	byte	"cv."
36687     00          | 	byte	0
36688                 | LR__5561
36688     63 68 61 6E 
3668c     67 65 77 61 
36690     76 65       | 	byte	"changewave"
36692     00          | 	byte	0
36693                 | LR__5562
36693     63 77 2E    | 	byte	"cw."
36696     00          | 	byte	0
36697                 | LR__5563
36697     63 69 72 63 
3669b     6C 65       | 	byte	"circle"
3669d     00          | 	byte	0
3669e                 | LR__5564
3669e     63 69 2E    | 	byte	"ci."
366a1     00          | 	byte	0
366a2                 | LR__5565
366a2     63 6C 69 63 
366a6     6B          | 	byte	"click"
366a7     00          | 	byte	0
366a8                 | LR__5566
366a8     63 6C 6F 73 
366ac     65          | 	byte	"close"
366ad     00          | 	byte	0
366ae                 | LR__5567
366ae     63 6C 73    | 	byte	"cls"
366b1     00          | 	byte	0
366b2                 | LR__5568
366b2     63 6F 67 73 
366b6     74 6F 70    | 	byte	"cogstop"
366b9     00          | 	byte	0
366ba                 | LR__5569
366ba     63 6F 6C 6F 
366be     72          | 	byte	"color"
366bf     00          | 	byte	0
366c0                 | LR__5570
366c0     63 2E       | 	byte	"c."
366c2     00          | 	byte	0
366c3                 | LR__5571
366c3     63 6F 70 79 | 	byte	"copy"
366c7     00          | 	byte	0
366c8                 | LR__5572
366c8     63 75 72 73 
366cc     6F 72       | 	byte	"cursor"
366ce     00          | 	byte	0
366cf                 | LR__5573
366cf     64 61 74 61 | 	byte	"data"
366d3     00          | 	byte	0
366d4                 | LR__5574
366d4     64 65 66 73 
366d8     6E 64       | 	byte	"defsnd"
366da     00          | 	byte	0
366db                 | LR__5575
366db     64 65 66 65 
366df     6E 76       | 	byte	"defenv"
366e1     00          | 	byte	0
366e2                 | LR__5576
366e2     64 65 66 73 
366e6     70 72 69 74 
366ea     65          | 	byte	"defsprite"
366eb     00          | 	byte	0
366ec                 | LR__5577
366ec     64 73 2E    | 	byte	"ds."
366ef     00          | 	byte	0
366f0                 | LR__5578
366f0     64 65 67    | 	byte	"deg"
366f3     00          | 	byte	0
366f4                 | LR__5579
366f4     64 65 6C 65 
366f8     74 65       | 	byte	"delete"
366fa     00          | 	byte	0
366fb                 | LR__5580
366fb     64 69 6D    | 	byte	"dim"
366fe     00          | 	byte	0
366ff                 | LR__5581
366ff     64 69 72    | 	byte	"dir"
36702     00          | 	byte	0
36703                 | LR__5582
36703     64 70 6F 6B 
36707     65          | 	byte	"dpoke"
36708     00          | 	byte	0
36709                 | LR__5583
36709     64 72 61 77 | 	byte	"draw"
3670d     00          | 	byte	0
3670e                 | LR__5584
3670e     64 72 61 77 
36712     74 6F       | 	byte	"drawto"
36714     00          | 	byte	0
36715                 | LR__5585
36715     64 72 2E    | 	byte	"dr."
36718     00          | 	byte	0
36719                 | LR__5586
36719     65 6C 73 65 | 	byte	"else"
3671d     00          | 	byte	0
3671e                 | LR__5587
3671e     65 6E 64    | 	byte	"end"
36721     00          | 	byte	0
36722                 | LR__5588
36722     65 6E 74 65 
36726     72          | 	byte	"enter"
36727     00          | 	byte	0
36728                 | LR__5589
36728     65 2E       | 	byte	"e."
3672a     00          | 	byte	0
3672b                 | LR__5590
3672b     66 63 69 72 
3672f     63 6C 65    | 	byte	"fcircle"
36732     00          | 	byte	0
36733                 | LR__5591
36733     66 63 2E    | 	byte	"fc."
36736     00          | 	byte	0
36737                 | LR__5592
36737     66 69 6C 6C | 	byte	"fill"
3673b     00          | 	byte	0
3673c                 | LR__5593
3673c     66 69 2E    | 	byte	"fi."
3673f     00          | 	byte	0
36740                 | LR__5594
36740     66 6F 6E 74 | 	byte	"font"
36744     00          | 	byte	0
36745                 | LR__5595
36745     66 6F 72    | 	byte	"for"
36748     00          | 	byte	0
36749                 | LR__5596
36749     66 2E       | 	byte	"f."
3674b     00          | 	byte	0
3674c                 | LR__5597
3674c     66 72 61 6D 
36750     65          | 	byte	"frame"
36751     00          | 	byte	0
36752                 | LR__5598
36752     66 72 2E    | 	byte	"fr."
36755     00          | 	byte	0
36756                 | LR__5599
36756     67 65 74    | 	byte	"get"
36759     00          | 	byte	0
3675a                 | LR__5600
3675a     67 6F 73 75 
3675e     62          | 	byte	"gosub"
3675f     00          | 	byte	0
36760                 | LR__5601
36760     67 6F 74 6F | 	byte	"goto"
36764     00          | 	byte	0
36765                 | LR__5602
36765     67 2E       | 	byte	"g."
36767     00          | 	byte	0
36768                 | LR__5603
36768     69 66       | 	byte	"if"
3676a     00          | 	byte	0
3676b                 | LR__5604
3676b     69 6E 6B    | 	byte	"ink"
3676e     00          | 	byte	0
3676f                 | LR__5605
3676f     69 2E       | 	byte	"i."
36771     00          | 	byte	0
36772                 | LR__5606
36772     69 6E 70 75 
36776     74          | 	byte	"input"
36777     00          | 	byte	0
36778                 | LR__5607
36778     6C 69 73 74 | 	byte	"list"
3677c     00          | 	byte	0
3677d                 | LR__5608
3677d     6C 2E       | 	byte	"l."
3677f     00          | 	byte	0
36780                 | LR__5609
36780     6C 6F 61 64 | 	byte	"load"
36784     00          | 	byte	0
36785                 | LR__5610
36785     6C 6F 2E    | 	byte	"lo."
36788     00          | 	byte	0
36789                 | LR__5611
36789     6C 70 6F 6B 
3678d     65          | 	byte	"lpoke"
3678e     00          | 	byte	0
3678f                 | LR__5612
3678f     6D 6B 64 69 
36793     72          | 	byte	"mkdir"
36794     00          | 	byte	0
36795                 | LR__5613
36795     6D 6F 64 65 | 	byte	"mode"
36799     00          | 	byte	0
3679a                 | LR__5614
3679a     6D 2E       | 	byte	"m."
3679c     00          | 	byte	0
3679d                 | LR__5615
3679d     6D 6F 75 73 
367a1     65          | 	byte	"mouse"
367a2     00          | 	byte	0
367a3                 | LR__5616
367a3     6E 65 77    | 	byte	"new"
367a6     00          | 	byte	0
367a7                 | LR__5617
367a7     6E 65 78 74 | 	byte	"next"
367ab     00          | 	byte	0
367ac                 | LR__5618
367ac     6E 2E       | 	byte	"n."
367ae     00          | 	byte	0
367af                 | LR__5619
367af     6F 6E       | 	byte	"on"
367b1     00          | 	byte	0
367b2                 | LR__5620
367b2     6F 70 65 6E | 	byte	"open"
367b6     00          | 	byte	0
367b7                 | LR__5621
367b7     70 61 70 65 
367bb     72          | 	byte	"paper"
367bc     00          | 	byte	0
367bd                 | LR__5622
367bd     70 61 2E    | 	byte	"pa."
367c0     00          | 	byte	0
367c1                 | LR__5623
367c1     70 69 6E 66 
367c5     6C 6F 61 74 | 	byte	"pinfloat"
367c9     00          | 	byte	0
367ca                 | LR__5624
367ca     70 69 6E 68 
367ce     69          | 	byte	"pinhi"
367cf     00          | 	byte	0
367d0                 | LR__5625
367d0     70 69 6E 6C 
367d4     6F          | 	byte	"pinlo"
367d5     00          | 	byte	0
367d6                 | LR__5626
367d6     70 69 6E 73 
367da     74 61 72 74 | 	byte	"pinstart"
367de     00          | 	byte	0
367df                 | LR__5627
367df     70 69 6E 74 
367e3     6F 67 67 6C 
367e7     65          | 	byte	"pintoggle"
367e8     00          | 	byte	0
367e9                 | LR__5628
367e9     70 69 6E 77 
367ed     72 69 74 65 | 	byte	"pinwrite"
367f1     00          | 	byte	0
367f2                 | LR__5629
367f2     70 6C 61 79 | 	byte	"play"
367f6     00          | 	byte	0
367f7                 | LR__5630
367f7     70 2E       | 	byte	"p."
367f9     00          | 	byte	0
367fa                 | LR__5631
367fa     70 6C 6F 74 | 	byte	"plot"
367fe     00          | 	byte	0
367ff                 | LR__5632
367ff     70 6C 2E    | 	byte	"pl."
36802     00          | 	byte	0
36803                 | LR__5633
36803     70 6F 6B 65 | 	byte	"poke"
36807     00          | 	byte	0
36808                 | LR__5634
36808     70 6F 70    | 	byte	"pop"
3680b     00          | 	byte	0
3680c                 | LR__5635
3680c     70 6F 73 69 
36810     74 69 6F 6E | 	byte	"position"
36814     00          | 	byte	0
36815                 | LR__5636
36815     70 6F 73 2E | 	byte	"pos."
36819     00          | 	byte	0
3681a                 | LR__5637
3681a     70 72 69 6E 
3681e     74          | 	byte	"print"
3681f     00          | 	byte	0
36820                 | LR__5638
36820     3F          | 	byte	"?"
36821     00          | 	byte	0
36822                 | LR__5639
36822     70 75 74    | 	byte	"put"
36825     00          | 	byte	0
36826                 | LR__5640
36826     72 61 64    | 	byte	"rad"
36829     00          | 	byte	0
3682a                 | LR__5641
3682a     72 65 61 64 | 	byte	"read"
3682e     00          | 	byte	0
3682f                 | LR__5642
3682f     72 65 6C 65 
36833     61 73 65    | 	byte	"release"
36836     00          | 	byte	0
36837                 | LR__5643
36837     72 65 6D    | 	byte	"rem"
3683a     00          | 	byte	0
3683b                 | LR__5644
3683b     27          | 	byte	"'"
3683c     00          | 	byte	0
3683d                 | LR__5645
3683d     72 65 73 74 
36841     6F 72 65    | 	byte	"restore"
36844     00          | 	byte	0
36845                 | LR__5646
36845     72 65 74 75 
36849     72 6E       | 	byte	"return"
3684b     00          | 	byte	0
3684c                 | LR__5647
3684c     72 75 6E    | 	byte	"run"
3684f     00          | 	byte	0
36850                 | LR__5648
36850     73 61 76 65 | 	byte	"save"
36854     00          | 	byte	0
36855                 | LR__5649
36855     73 2E       | 	byte	"s."
36857     00          | 	byte	0
36858                 | LR__5650
36858     73 65 74 64 
3685c     65 6C 61 79 | 	byte	"setdelay"
36860     00          | 	byte	0
36861                 | LR__5651
36861     73 64 2E    | 	byte	"sd."
36864     00          | 	byte	0
36865                 | LR__5652
36865     73 65 74 65 
36869     6E 76       | 	byte	"setenv"
3686b     00          | 	byte	0
3686c                 | LR__5653
3686c     73 65 2E    | 	byte	"se."
3686f     00          | 	byte	0
36870                 | LR__5654
36870     73 65 74 6C 
36874     65 6E       | 	byte	"setlen"
36876     00          | 	byte	0
36877                 | LR__5655
36877     73 6C 2E    | 	byte	"sl."
3687a     00          | 	byte	0
3687b                 | LR__5656
3687b     73 65 74 70 
3687f     61 6E       | 	byte	"setpan"
36881     00          | 	byte	0
36882                 | LR__5657
36882     73 70 2E    | 	byte	"sp."
36885     00          | 	byte	0
36886                 | LR__5658
36886     73 65 74 73 
3688a     75 73 74 61 
3688e     69 6E       | 	byte	"setsustain"
36890     00          | 	byte	0
36891                 | LR__5659
36891     73 73 2E    | 	byte	"ss."
36894     00          | 	byte	0
36895                 | LR__5660
36895     73 65 74 76 
36899     6F 6C       | 	byte	"setvol"
3689b     00          | 	byte	0
3689c                 | LR__5661
3689c     73 76 2E    | 	byte	"sv."
3689f     00          | 	byte	0
368a0                 | LR__5662
368a0     73 65 74 77 
368a4     61 76 65    | 	byte	"setwave"
368a7     00          | 	byte	0
368a8                 | LR__5663
368a8     73 77 2E    | 	byte	"sw."
368ab     00          | 	byte	0
368ac                 | LR__5664
368ac     73 65 74 77 
368b0     61 76       | 	byte	"setwav"
368b2     00          | 	byte	0
368b3                 | LR__5665
368b3     73 68 75 74 
368b7     75 70       | 	byte	"shutup"
368b9     00          | 	byte	0
368ba                 | LR__5666
368ba     73 68 2E    | 	byte	"sh."
368bd     00          | 	byte	0
368be                 | LR__5667
368be     73 6F 75 6E 
368c2     64          | 	byte	"sound"
368c3     00          | 	byte	0
368c4                 | LR__5668
368c4     73 6F 2E    | 	byte	"so."
368c7     00          | 	byte	0
368c8                 | LR__5669
368c8     73 70 72 69 
368cc     74 65       | 	byte	"sprite"
368ce     00          | 	byte	0
368cf                 | LR__5670
368cf     73 70 72 2E | 	byte	"spr."
368d3     00          | 	byte	0
368d4                 | LR__5671
368d4     74 68 65 6E | 	byte	"then"
368d8     00          | 	byte	0
368d9                 | LR__5672
368d9     77 61 69 74 
368dd     6D 73       | 	byte	"waitms"
368df     00          | 	byte	0
368e0                 | LR__5673
368e0     77 2E       | 	byte	"w."
368e2     00          | 	byte	0
368e3                 | LR__5674
368e3     77 61 69 74 
368e7     63 6C 6F 63 
368eb     6B          | 	byte	"waitclock"
368ec     00          | 	byte	0
368ed                 | LR__5675
368ed     77 63 2E    | 	byte	"wc."
368f0     00          | 	byte	0
368f1                 | LR__5676
368f1     77 61 69 74 
368f5     76 62 6C    | 	byte	"waitvbl"
368f8     00          | 	byte	0
368f9                 | LR__5677
368f9     77 76 2E    | 	byte	"wv."
368fc     00          | 	byte	0
368fd                 | LR__5678
368fd     77 72 70 69 
36901     6E          | 	byte	"wrpin"
36902     00          | 	byte	0
36903                 | LR__5679
36903     77 78 70 69 
36907     6E          | 	byte	"wxpin"
36908     00          | 	byte	0
36909                 | LR__5680
36909     77 79 70 69 
3690d     6E          | 	byte	"wypin"
3690e     00          | 	byte	0
3690f                 | LR__5681
3690f     61 62 73    | 	byte	"abs"
36912     00          | 	byte	0
36913                 | LR__5682
36913     61 63 6F 73 | 	byte	"acos"
36917     00          | 	byte	0
36918                 | LR__5683
36918     61 64 72    | 	byte	"adr"
3691b     00          | 	byte	0
3691c                 | LR__5684
3691c     61 64 64 72 | 	byte	"addr"
36920     00          | 	byte	0
36921                 | LR__5685
36921     61 73 63    | 	byte	"asc"
36924     00          | 	byte	0
36925                 | LR__5686
36925     61 73 69 6E | 	byte	"asin"
36929     00          | 	byte	0
3692a                 | LR__5687
3692a     61 74 6E    | 	byte	"atn"
3692d     00          | 	byte	0
3692e                 | LR__5688
3692e     62 69 6E 24 | 	byte	"bin$"
36932     00          | 	byte	0
36933                 | LR__5689
36933     63 68 72 24 | 	byte	"chr$"
36937     00          | 	byte	0
36938                 | LR__5690
36938     63 6F 67 69 
3693c     6E 69 74    | 	byte	"coginit"
3693f     00          | 	byte	0
36940                 | LR__5691
36940     63 6F 73    | 	byte	"cos"
36943     00          | 	byte	0
36944                 | LR__5692
36944     64 70 65 65 
36948     6B          | 	byte	"dpeek"
36949     00          | 	byte	0
3694a                 | LR__5693
3694a     66 72 61 6D 
3694e     65 62 75 66 | 	byte	"framebuf"
36952     00          | 	byte	0
36953                 | LR__5694
36953     66 62 2E    | 	byte	"fb."
36956     00          | 	byte	0
36957                 | LR__5695
36957     66 72 65    | 	byte	"fre"
3695a     00          | 	byte	0
3695b                 | LR__5696
3695b     67 65 74 70 
3695f     69 78 65 6C | 	byte	"getpixel"
36963     00          | 	byte	0
36964                 | LR__5697
36964     67 65 2E    | 	byte	"ge."
36967     00          | 	byte	0
36968                 | LR__5698
36968     67 65 74 65 
3696c     6E 76 73 75 
36970     73 74 61 69 
36974     6E          | 	byte	"getenvsustain"
36975     00          | 	byte	0
36976                 | LR__5699
36976     67 65 74 6E 
3697a     6F 74 65 76 
3697e     61 6C 75 65 | 	byte	"getnotevalue"
36982     00          | 	byte	0
36983                 | LR__5700
36983     67 65 74 74 
36987     69 6D 65    | 	byte	"gettime"
3698a     00          | 	byte	0
3698b                 | LR__5701
3698b     68 65 78 24 | 	byte	"hex$"
3698f     00          | 	byte	0
36990                 | LR__5702
36990     69 6E 6B 65 
36994     79 24       | 	byte	"inkey$"
36996     00          | 	byte	0
36997                 | LR__5703
36997     69 6E 74    | 	byte	"int"
3699a     00          | 	byte	0
3699b                 | LR__5704
3699b     6C 65 66 74 
3699f     24          | 	byte	"left$"
369a0     00          | 	byte	0
369a1                 | LR__5705
369a1     6C 65 6E    | 	byte	"len"
369a4     00          | 	byte	0
369a5                 | LR__5706
369a5     6C 6F 67    | 	byte	"log"
369a8     00          | 	byte	0
369a9                 | LR__5707
369a9     6C 70 65 65 
369ad     6B          | 	byte	"lpeek"
369ae     00          | 	byte	0
369af                 | LR__5708
369af     6D 69 64 24 | 	byte	"mid$"
369b3     00          | 	byte	0
369b4                 | LR__5709
369b4     6D 6F 75 73 
369b8     65 6B       | 	byte	"mousek"
369ba     00          | 	byte	0
369bb                 | LR__5710
369bb     6D 6F 75 73 
369bf     65 77       | 	byte	"mousew"
369c1     00          | 	byte	0
369c2                 | LR__5711
369c2     6D 6F 75 73 
369c6     65 78       | 	byte	"mousex"
369c8     00          | 	byte	0
369c9                 | LR__5712
369c9     6D 6F 75 73 
369cd     65 79       | 	byte	"mousey"
369cf     00          | 	byte	0
369d0                 | LR__5713
369d0     70 61 64 78 | 	byte	"padx"
369d4     00          | 	byte	0
369d5                 | LR__5714
369d5     70 61 64 79 | 	byte	"pady"
369d9     00          | 	byte	0
369da                 | LR__5715
369da     70 61 64 7A | 	byte	"padz"
369de     00          | 	byte	0
369df                 | LR__5716
369df     70 61 64 72 
369e3     78          | 	byte	"padrx"
369e4     00          | 	byte	0
369e5                 | LR__5717
369e5     70 61 64 72 
369e9     79          | 	byte	"padry"
369ea     00          | 	byte	0
369eb                 | LR__5718
369eb     70 61 64 72 
369ef     7A          | 	byte	"padrz"
369f0     00          | 	byte	0
369f1                 | LR__5719
369f1     70 61 64 68 | 	byte	"padh"
369f5     00          | 	byte	0
369f6                 | LR__5720
369f6     70 65 65 6B | 	byte	"peek"
369fa     00          | 	byte	0
369fb                 | LR__5721
369fb     70 69 6E 72 
369ff     65 61 64    | 	byte	"pinread"
36a02     00          | 	byte	0
36a03                 | LR__5722
36a03     72 64 70 69 
36a07     6E          | 	byte	"rdpin"
36a08     00          | 	byte	0
36a09                 | LR__5723
36a09     72 69 67 68 
36a0d     74 24       | 	byte	"right$"
36a0f     00          | 	byte	0
36a10                 | LR__5724
36a10     72 71 70 69 
36a14     6E          | 	byte	"rqpin"
36a15     00          | 	byte	0
36a16                 | LR__5725
36a16     72 6F 75 6E 
36a1a     64          | 	byte	"round"
36a1b     00          | 	byte	0
36a1c                 | LR__5726
36a1c     72 6E 64    | 	byte	"rnd"
36a1f     00          | 	byte	0
36a20                 | LR__5727
36a20     73 69 6E    | 	byte	"sin"
36a23     00          | 	byte	0
36a24                 | LR__5728
36a24     73 71 72    | 	byte	"sqr"
36a27     00          | 	byte	0
36a28                 | LR__5729
36a28     73 74 69 63 
36a2c     6B          | 	byte	"stick"
36a2d     00          | 	byte	0
36a2e                 | LR__5730
36a2e     73 74 72 69 
36a32     67          | 	byte	"strig"
36a33     00          | 	byte	0
36a34                 | LR__5731
36a34     73 74 72 24 | 	byte	"str$"
36a38     00          | 	byte	0
36a39                 | LR__5732
36a39     74 61 6E    | 	byte	"tan"
36a3c     00          | 	byte	0
36a3d                 | LR__5733
36a3d     76 61 6C    | 	byte	"val"
36a40     00          | 	byte	0
36a41                 | LR__5734
36a41     76 61 72 70 
36a45     74 72       | 	byte	"varptr"
36a47     00          | 	byte	0
36a48                 | LR__5735
36a48     61          | 	byte	"a"
36a49     00          | 	byte	0
36a4a                 | LR__5736
36a4a     7A          | 	byte	"z"
36a4b     00          | 	byte	0
36a4c                 | LR__5737
36a4c     5F          | 	byte	"_"
36a4d     00          | 	byte	0
36a4e                 | LR__5738
36a4e     61          | 	byte	"a"
36a4f     00          | 	byte	0
36a50                 | LR__5739
36a50     7A          | 	byte	"z"
36a51     00          | 	byte	0
36a52                 | LR__5740
36a52     30          | 	byte	"0"
36a53     00          | 	byte	0
36a54                 | LR__5741
36a54     39          | 	byte	"9"
36a55     00          | 	byte	0
36a56                 | LR__5742
36a56     5F          | 	byte	"_"
36a57     00          | 	byte	0
36a58                 | LR__5743
36a58     2E          | 	byte	"."
36a59     00          | 	byte	0
36a5a                 | LR__5744
36a5a     61          | 	byte	"a"
36a5b     00          | 	byte	0
36a5c                 | LR__5745
36a5c     7A          | 	byte	"z"
36a5d     00          | 	byte	0
36a5e                 | LR__5746
36a5e     30          | 	byte	"0"
36a5f     00          | 	byte	0
36a60                 | LR__5747
36a60     39          | 	byte	"9"
36a61     00          | 	byte	0
36a62                 | LR__5748
36a62     5F          | 	byte	"_"
36a63     00          | 	byte	0
36a64                 | LR__5749
36a64     24          | 	byte	"$"
36a65     00          | 	byte	0
36a66                 | LR__5750
36a66     25          | 	byte	"%"
36a67     00          | 	byte	0
36a68                 | LR__5751
36a68     21          | 	byte	"!"
36a69     00          | 	byte	0
36a6a                 | LR__5752
36a6a     30          | 	byte	"0"
36a6b     00          | 	byte	0
36a6c                 | LR__5753
36a6c     39          | 	byte	"9"
36a6d     00          | 	byte	0
36a6e                 | LR__5754
36a6e     2E          | 	byte	"."
36a6f     00          | 	byte	0
36a70                 | LR__5755
36a70     24          | 	byte	"$"
36a71     00          | 	byte	0
36a72                 | LR__5756
36a72     25          | 	byte	"%"
36a73     00          | 	byte	0
36a74                 | LR__5757
36a74     2D          | 	byte	"-"
36a75     00          | 	byte	0
36a76                 | LR__5758
36a76     2E          | 	byte	"."
36a77     00          | 	byte	0
36a78                 | LR__5759
36a78     24          | 	byte	"$"
36a79     00          | 	byte	0
36a7a                 | LR__5760
36a7a     25          | 	byte	"%"
36a7b     00          | 	byte	0
36a7c                 | LR__5761
36a7c     30          | 	byte	"0"
36a7d     00          | 	byte	0
36a7e                 | LR__5762
36a7e     39          | 	byte	"9"
36a7f     00          | 	byte	0
36a80                 | LR__5763
36a80     5F          | 	byte	"_"
36a81     00          | 	byte	0
36a82                 | LR__5764
36a82     2E          | 	byte	"."
36a83     00          | 	byte	0
36a84                 | LR__5765
36a84     45          | 	byte	"E"
36a85     00          | 	byte	0
36a86                 | LR__5766
36a86     65          | 	byte	"e"
36a87     00          | 	byte	0
36a88                 | LR__5767
36a88     2D          | 	byte	"-"
36a89     00          | 	byte	0
36a8a                 | LR__5768
36a8a     61          | 	byte	"a"
36a8b     00          | 	byte	0
36a8c                 | LR__5769
36a8c     66          | 	byte	"f"
36a8d     00          | 	byte	0
36a8e                 | LR__5770
36a8e     30          | 	byte	"0"
36a8f     00          | 	byte	0
36a90                 | LR__5771
36a90     31          | 	byte	"1"
36a91     00          | 	byte	0
36a92                 | LR__5772
36a92     5F          | 	byte	"_"
36a93     00          | 	byte	0
36a94                 | LR__5773
36a94     2D          | 	byte	"-"
36a95     00          | 	byte	0
36a96                 | LR__5774
36a96     65          | 	byte	"e"
36a97     00          | 	byte	0
36a98                 | LR__5775
36a98     2E          | 	byte	"."
36a99     00          | 	byte	0
36a9a                 | LR__5776
36a9a     45          | 	byte	"E"
36a9b     00          | 	byte	0
36a9c                 | LR__5777
36a9c     65          | 	byte	"e"
36a9d     00          | 	byte	0
36a9e                 | LR__5778
36a9e     30          | 	byte	"0"
36a9f     00          | 	byte	0
36aa0                 | LR__5779
36aa0     39          | 	byte	"9"
36aa1     00          | 	byte	0
36aa2                 | LR__5780
36aa2     24          | 	byte	"$"
36aa3     00          | 	byte	0
36aa4                 | LR__5781
36aa4     25          | 	byte	"%"
36aa5     00          | 	byte	0
36aa6                 | LR__5782
36aa6     2D          | 	byte	"-"
36aa7     00          | 	byte	0
36aa8                 | LR__5783
36aa8     24          | 	byte	"$"
36aa9     00          | 	byte	0
36aaa                 | LR__5784
36aaa     25          | 	byte	"%"
36aab     00          | 	byte	0
36aac                 | LR__5785
36aac     30          | 	byte	"0"
36aad     00          | 	byte	0
36aae                 | LR__5786
36aae     39          | 	byte	"9"
36aaf     00          | 	byte	0
36ab0                 | LR__5787
36ab0     5F          | 	byte	"_"
36ab1     00          | 	byte	0
36ab2                 | LR__5788
36ab2     30          | 	byte	"0"
36ab3     00          | 	byte	0
36ab4                 | LR__5789
36ab4     39          | 	byte	"9"
36ab5     00          | 	byte	0
36ab6                 | LR__5790
36ab6     61          | 	byte	"a"
36ab7     00          | 	byte	0
36ab8                 | LR__5791
36ab8     66          | 	byte	"f"
36ab9     00          | 	byte	0
36aba                 | LR__5792
36aba     5F          | 	byte	"_"
36abb     00          | 	byte	0
36abc                 | LR__5793
36abc     30          | 	byte	"0"
36abd     00          | 	byte	0
36abe                 | LR__5794
36abe     31          | 	byte	"1"
36abf     00          | 	byte	0
36ac0                 | LR__5795
36ac0     5F          | 	byte	"_"
36ac1     00          | 	byte	0
36ac2                 | LR__5796
36ac2     30          | 	byte	"0"
36ac3     00          | 	byte	0
36ac4                 | LR__5797
36ac4     39          | 	byte	"9"
36ac5     00          | 	byte	0
36ac6                 | LR__5798
36ac6     5F          | 	byte	"_"
36ac7     00          | 	byte	0
36ac8                 | LR__5799
36ac8     22          | 	byte	34
36ac9     00          | 	byte	0
36aca                 | LR__5800
36aca     22          | 	byte	34
36acb     00          | 	byte	0
36acc                 | LR__5801
36acc     44 69 6D 3A 
36ad0     20 61 74 20 
36ad4     6C 69 6E 65 
36ad8     20          | 	byte	"Dim: at line "
36ad9     00          | 	byte	0
36ada                 | LR__5802
36ada     3A 20 77 61 
36ade     72 6E 69 6E 
36ae2     67 3A 20 74 
36ae6     68 65 20 76 
36aea     61 72 69 61 
36aee     62 6C 65 20 
36af2     65 78 69 73 
36af6     74 65 64 2E | 	byte	": warning: the variable existed."
36afa     00          | 	byte	0
36afb                 | LR__5803
36afb     28          | 	byte	"("
36afc     00          | 	byte	0
36afd                 | LR__5804
36afd     61 73       | 	byte	"as"
36aff     00          | 	byte	0
36b00                 | LR__5805
36b00     61 73       | 	byte	"as"
36b02     00          | 	byte	0
36b03                 | LR__5806
36b03     2C          | 	byte	","
36b04     00          | 	byte	0
36b05                 | LR__5807
36b05     29          | 	byte	")"
36b06     00          | 	byte	0
36b07                 | LR__5808
36b07     29          | 	byte	")"
36b08     00          | 	byte	0
36b09                 | LR__5809
36b09     61 73       | 	byte	"as"
36b0b     00          | 	byte	0
36b0c                 | LR__5810
36b0c     62 79 74 65 | 	byte	"byte"
36b10     00          | 	byte	0
36b11                 | LR__5811
36b11     75 62 79 74 
36b15     65          | 	byte	"ubyte"
36b16     00          | 	byte	0
36b17                 | LR__5812
36b17     73 68 6F 72 
36b1b     74          | 	byte	"short"
36b1c     00          | 	byte	0
36b1d                 | LR__5813
36b1d     75 73 68 6F 
36b21     72 74       | 	byte	"ushort"
36b23     00          | 	byte	0
36b24                 | LR__5814
36b24     6C 6F 6E 67 | 	byte	"long"
36b28     00          | 	byte	0
36b29                 | LR__5815
36b29     69 6E 74 65 
36b2d     67 65 72    | 	byte	"integer"
36b30     00          | 	byte	0
36b31                 | LR__5816
36b31     75 6C 6F 6E 
36b35     67          | 	byte	"ulong"
36b36     00          | 	byte	0
36b37                 | LR__5817
36b37     69 6E 74 36 
36b3b     34          | 	byte	"int64"
36b3c     00          | 	byte	0
36b3d                 | LR__5818
36b3d     75 69 6E 74 
36b41     36 34       | 	byte	"uint64"
36b43     00          | 	byte	0
36b44                 | LR__5819
36b44     73 69 6E 67 
36b48     6C 65       | 	byte	"single"
36b4a     00          | 	byte	0
36b4b                 | LR__5820
36b4b     64 6F 75 62 
36b4f     6C 65       | 	byte	"double"
36b51     00          | 	byte	0
36b52                 | LR__5821
36b52     73 74 72 69 
36b56     6E 67       | 	byte	"string"
36b58     00          | 	byte	0
36b59                 | LR__5822
36b59     74 6F       | 	byte	"to"
36b5b     00          | 	byte	0
36b5c                 | LR__5823
36b5c     73 74 65 70 | 	byte	"step"
36b60     00          | 	byte	0
36b61                 | LR__5824
36b61     73 2E       | 	byte	"s."
36b63     00          | 	byte	0
36b64                 | LR__5825
36b64     73 2E       | 	byte	"s."
36b66     00          | 	byte	0
36b67                 | LR__5826
36b67     67 6F 74 6F | 	byte	"goto"
36b6b     00          | 	byte	0
36b6c                 | LR__5827
36b6c     67 6F 73 75 
36b70     62          | 	byte	"gosub"
36b71     00          | 	byte	0
36b72                 | LR__5828
36b72     24          | 	byte	"$"
36b73     00          | 	byte	0
36b74                 | LR__5829
36b74     26 68       | 	byte	"&h"
36b76     00          | 	byte	0
36b77                 | LR__5830
36b77     25          | 	byte	"%"
36b78     00          | 	byte	0
36b79                 | LR__5831
36b79     26 62       | 	byte	"&b"
36b7b     00          | 	byte	0
36b7c                 | LR__5832
36b7c                 | 	byte	
36b7c     00          | 	byte	0
36b7d                 | LR__5833
36b7d     61 63 6F 73 
36b81     3A 20       | 	byte	"acos: "
36b83     00          | 	byte	0
36b84                 | LR__5834
36b84     61 73 63 3A 
36b88     20          | 	byte	"asc: "
36b89     00          | 	byte	0
36b8a                 | LR__5835
36b8a     61 73 63 3A 
36b8e     20          | 	byte	"asc: "
36b8f     00          | 	byte	0
36b90                 | LR__5836
36b90     61 73 69 6E 
36b94     3A 20       | 	byte	"asin: "
36b96     00          | 	byte	0
36b97                 | LR__5837
36b97     61 74 6E 3A 
36b9b     20          | 	byte	"atn: "
36b9c     00          | 	byte	0
36b9d                 | LR__5838
36b9d     62 6C 69 74 
36ba1     3A 20       | 	byte	"blit: "
36ba3     00          | 	byte	0
36ba4                 | LR__5839
36ba4     62 69 6E 24 
36ba8     3A 20       | 	byte	"bin$: "
36baa     00          | 	byte	0
36bab                 | LR__5840
36bab     2F          | 	byte	"/"
36bac     00          | 	byte	0
36bad                 | LR__5841
36bad     2F 73 64 2F 
36bb1     62 69 6E 2F | 	byte	"/sd/bin/"
36bb5     00          | 	byte	0
36bb6                 | LR__5842
36bb6     53 79 73 74 
36bba     65 6D 20 65 
36bbe     72 72 6F 72 
36bc2     20          | 	byte	"System error "
36bc3     00          | 	byte	0
36bc4                 | LR__5843
36bc4     3A 20       | 	byte	": "
36bc6     00          | 	byte	0
36bc7                 | LR__5844
36bc7     2A          | 	byte	"*"
36bc8     00          | 	byte	0
36bc9                 | LR__5845
36bc9     2E 2E       | 	byte	".."
36bcb     00          | 	byte	0
36bcc                 | LR__5846
36bcc     2F          | 	byte	"/"
36bcd     00          | 	byte	0
36bce                 | LR__5847
36bce     2F          | 	byte	"/"
36bcf     00          | 	byte	0
36bd0                 | LR__5848
36bd0     53 79 73 74 
36bd4     65 6D 20 65 
36bd8     72 72 6F 72 
36bdc     20          | 	byte	"System error "
36bdd     00          | 	byte	0
36bde                 | LR__5849
36bde     3A 20       | 	byte	": "
36be0     00          | 	byte	0
36be1                 | LR__5850
36be1     43 75 72 72 
36be5     65 6E 74 20 
36be9     64 69 72 65 
36bed     63 74 6F 72 
36bf1     79 3A 20    | 	byte	"Current directory: "
36bf4     00          | 	byte	0
36bf5                 | LR__5851
36bf5     2F          | 	byte	"/"
36bf6     00          | 	byte	0
36bf7                 | LR__5852
36bf7     53 79 73 74 
36bfb     65 6D 20 65 
36bff     72 72 6F 72 
36c03     20          | 	byte	"System error "
36c04     00          | 	byte	0
36c05                 | LR__5853
36c05     3A 20       | 	byte	": "
36c07     00          | 	byte	0
36c08                 | LR__5854
36c08     43 75 72 72 
36c0c     65 6E 74 20 
36c10     64 69 72 65 
36c14     63 74 6F 72 
36c18     79 3A 20    | 	byte	"Current directory: "
36c1b     00          | 	byte	0
36c1c                 | LR__5855
36c1c     2F          | 	byte	"/"
36c1d     00          | 	byte	0
36c1e                 | LR__5856
36c1e     2F          | 	byte	"/"
36c1f     00          | 	byte	0
36c20                 | LR__5857
36c20     2F          | 	byte	"/"
36c21     00          | 	byte	0
36c22                 | LR__5858
36c22     53 79 73 74 
36c26     65 6D 20 65 
36c2a     72 72 6F 72 
36c2e     20          | 	byte	"System error "
36c2f     00          | 	byte	0
36c30                 | LR__5859
36c30     3A 20       | 	byte	": "
36c32     00          | 	byte	0
36c33                 | LR__5860
36c33     43 75 72 72 
36c37     65 6E 74 20 
36c3b     64 69 72 65 
36c3f     63 74 6F 72 
36c43     79 3A 20    | 	byte	"Current directory: "
36c46     00          | 	byte	0
36c47                 | LR__5861
36c47     63 68 72 24 
36c4b     3A 20       | 	byte	"chr$: "
36c4d     00          | 	byte	0
36c4e                 | LR__5862
36c4e     63 68 61 6E 
36c52     6E 65 6C 23 
36c56     20 65 78 70 
36c5a     65 63 74 65 
36c5e     64          | 	byte	"channel# expected"
36c5f     00          | 	byte	0
36c60                 | LR__5863
36c60     63 6F 67 69 
36c64     6E 69 74 3A 
36c68     20          | 	byte	"coginit: "
36c69     00          | 	byte	0
36c6a                 | LR__5864
36c6a     53 79 73 74 
36c6e     65 6D 20 65 
36c72     72 72 6F 72 
36c76     20 2D 20    | 	byte	"System error - "
36c79     00          | 	byte	0
36c7a                 | LR__5865
36c7a     20 69 6E 20 
36c7e     6C 69 6E 65 
36c82     20          | 	byte	" in line "
36c83     00          | 	byte	0
36c84                 | LR__5866
36c84     3A 20       | 	byte	": "
36c86     00          | 	byte	0
36c87                 | LR__5867
36c87     2C 20 66 69 
36c8b     6C 65 20 6E 
36c8f     61 6D 65 3A 
36c93     20          | 	byte	", file name: "
36c94     00          | 	byte	0
36c95                 | LR__5868
36c95     53 79 73 74 
36c99     65 6D 20 65 
36c9d     72 72 6F 72 
36ca1     20 2D 20    | 	byte	"System error - "
36ca4     00          | 	byte	0
36ca5                 | LR__5869
36ca5     20 69 6E 20 
36ca9     6C 69 6E 65 
36cad     20          | 	byte	" in line "
36cae     00          | 	byte	0
36caf                 | LR__5870
36caf     3A 20       | 	byte	": "
36cb1     00          | 	byte	0
36cb2                 | LR__5871
36cb2     2C 20 66 69 
36cb6     6C 65 20 6E 
36cba     61 6D 65 3A 
36cbe     20          | 	byte	", file name: "
36cbf     00          | 	byte	0
36cc0                 | LR__5872
36cc0     63 6F 73 3A 
36cc4     20          | 	byte	"cos: "
36cc5     00          | 	byte	0
36cc6                 | LR__5873
36cc6                 | 	byte	
36cc6     00          | 	byte	0
36cc7                 | LR__5874
36cc7                 | 	byte	
36cc7     00          | 	byte	0
36cc8                 | LR__5875
36cc8     2F 73 64 2F 
36ccc     6D 65 64 69 
36cd0     61 2F 68 2F | 	byte	"/sd/media/h/"
36cd4     00          | 	byte	0
36cd5                 | LR__5876
36cd5     53 79 73 74 
36cd9     65 6D 20 65 
36cdd     72 72 6F 72 
36ce1     20          | 	byte	"System error "
36ce2     00          | 	byte	0
36ce3                 | LR__5877
36ce3     3A 20       | 	byte	": "
36ce5     00          | 	byte	0
36ce6                 | LR__5878
36ce6                 | 	byte	
36ce6     00          | 	byte	0
36ce7                 | LR__5879
36ce7                 | 	byte	
36ce7     00          | 	byte	0
36ce8                 | LR__5880
36ce8     2F 73 64 2F 
36cec     6D 65 64 69 
36cf0     61 2F 73 2F | 	byte	"/sd/media/s/"
36cf4     00          | 	byte	0
36cf5                 | LR__5881
36cf5     53 79 73 74 
36cf9     65 6D 20 65 
36cfd     72 72 6F 72 
36d01     20          | 	byte	"System error "
36d02     00          | 	byte	0
36d03                 | LR__5882
36d03     3A 20       | 	byte	": "
36d05     00          | 	byte	0
36d06                 | LR__5883
36d06     2F          | 	byte	"/"
36d07     00          | 	byte	0
36d08                 | LR__5884
36d08     2F          | 	byte	"/"
36d09     00          | 	byte	0
36d0a                 | LR__5885
36d0a     2F          | 	byte	"/"
36d0b     00          | 	byte	0
36d0c                 | LR__5886
36d0c     43 61 6E 6E 
36d10     6F 74 20 64 
36d14     65 6C 65 74 
36d18     65 20 66 69 
36d1c     6C 65 20 6F 
36d20     72 20 66 69 
36d24     6C 65 20 64 
36d28     6F 65 73 6E 
36d2c     27 74 20 65 
36d30     78 69 73 74 
36d34     3A 20 73 79 
36d38     73 74 65 6D 
36d3c     20 65 72 72 
36d40     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
36d43     00          | 	byte	0
36d44                 | LR__5887
36d44     43 75 72 72 
36d48     65 6E 74 20 
36d4c     64 69 72 65 
36d50     63 74 6F 72 
36d54     79 3A 20    | 	byte	"Current directory: "
36d57     00          | 	byte	0
36d58                 | LR__5888
36d58                 | 	byte	
36d58     00          | 	byte	0
36d59                 | LR__5889
36d59     2A          | 	byte	"*"
36d5a     00          | 	byte	0
36d5b                 | LR__5890
36d5b                 | 	byte	
36d5b     00          | 	byte	0
36d5c                 | LR__5891
36d5c     5B 64 69 72 
36d60     5D 20       | 	byte	"[dir] "
36d62     00          | 	byte	0
36d63                 | LR__5892
36d63     4D 6F 72 65 
36d67     20 74 68 61 
36d6b     6E 20 31 32 
36d6f     38 20 65 6E 
36d73     74 72 69 65 
36d77     73 20 66 6F 
36d7b     75 6E 64 3A 
36d7f     20 63 6C 65 
36d83     61 6E 20 79 
36d87     6F 75 72 20 
36d8b     64 69 72 65 
36d8f     63 74 6F 72 
36d93     79          | 	byte	"More than 128 entries found: clean your directory"
36d94     00          | 	byte	0
36d95                 | LR__5893
36d95     2A          | 	byte	"*"
36d96     00          | 	byte	0
36d97                 | LR__5894
36d97                 | 	byte	
36d97     00          | 	byte	0
36d98                 | LR__5895
36d98     4D 6F 72 65 
36d9c     20 74 68 61 
36da0     6E 20 31 32 
36da4     38 20 65 6E 
36da8     74 72 69 65 
36dac     73 20 66 6F 
36db0     75 6E 64 3A 
36db4     20 63 6C 65 
36db8     61 6E 20 79 
36dbc     6F 75 72 20 
36dc0     64 69 72 65 
36dc4     63 74 6F 72 
36dc8     79          | 	byte	"More than 128 entries found: clean your directory"
36dc9     00          | 	byte	0
36dca                 | LR__5896
36dca     45 72 72 6F 
36dce     72 20       | 	byte	"Error "
36dd0     00          | 	byte	0
36dd1                 | LR__5897
36dd1     3A 20       | 	byte	": "
36dd3     00          | 	byte	0
36dd4                 | LR__5898
36dd4     67 65 74 65 
36dd8     6E 76 73 75 
36ddc     73 74 61 69 
36de0     6E 3A 20    | 	byte	"getenvsustain: "
36de3     00          | 	byte	0
36de4                 | LR__5899
36de4     67 65 74 70 
36de8     69 78 65 6C 
36dec     3A 20       | 	byte	"getpixel: "
36dee     00          | 	byte	0
36def                 | LR__5900
36def     68 65 78 24 
36df3     3A 20       | 	byte	"hex$: "
36df5     00          | 	byte	0
36df6                 | LR__5901
36df6                 | 	byte	
36df6     00          | 	byte	0
36df7                 | LR__5902
36df7     49 6E 20 69 
36dfb     6E 70 75 74 
36dff     3A 20       | 	byte	"In input: "
36e01     00          | 	byte	0
36e02                 | LR__5903
36e02     2C          | 	byte	","
36e03     00          | 	byte	0
36e04                 | LR__5904
36e04                 | 	byte	
36e04     00          | 	byte	0
36e05                 | LR__5905
36e05                 | 	byte	
36e05     00          | 	byte	0
36e06                 | LR__5906
36e06     6C 65 66 74 
36e0a     24 3A 20    | 	byte	"left$: "
36e0d     00          | 	byte	0
36e0e                 | LR__5907
36e0e     6C 65 66 74 
36e12     24 3A 20    | 	byte	"left$: "
36e15     00          | 	byte	0
36e16                 | LR__5908
36e16     6C 65 6E 3A 
36e1a     20          | 	byte	"len: "
36e1b     00          | 	byte	0
36e1c                 | LR__5909
36e1c     6C 65 6E 3A 
36e20     20          | 	byte	"len: "
36e21     00          | 	byte	0
36e22                 | LR__5910
36e22                 | 	byte	
36e22     00          | 	byte	0
36e23                 | LR__5911
36e23     2F          | 	byte	"/"
36e24     00          | 	byte	0
36e25                 | LR__5912
36e25     2F          | 	byte	"/"
36e26     00          | 	byte	0
36e27                 | LR__5913
36e27     2E 62 61 73 | 	byte	".bas"
36e2b     00          | 	byte	0
36e2c                 | LR__5914
36e2c     53 79 73 74 
36e30     65 6D 20 65 
36e34     72 72 6F 72 
36e38     20          | 	byte	"System error "
36e39     00          | 	byte	0
36e3a                 | LR__5915
36e3a     3A 20       | 	byte	": "
36e3c     00          | 	byte	0
36e3d                 | LR__5916
36e3d     2E 62 61 73 | 	byte	".bas"
36e41     00          | 	byte	0
36e42                 | LR__5917
36e42     2F          | 	byte	"/"
36e43     00          | 	byte	0
36e44                 | LR__5918
36e44                 | 	byte	
36e44     00          | 	byte	0
36e45                 | LR__5919
36e45     4C 6F 61 64 
36e49     65 64 20    | 	byte	"Loaded "
36e4c     00          | 	byte	0
36e4d                 | LR__5920
36e4d     2F          | 	byte	"/"
36e4e     00          | 	byte	0
36e4f                 | LR__5921
36e4f     6C 6F 67 3A 
36e53     20          | 	byte	"log: "
36e54     00          | 	byte	0
36e55                 | LR__5922
36e55     6D 69 64 24 
36e59     3A 20       | 	byte	"mid$: "
36e5b     00          | 	byte	0
36e5c                 | LR__5923
36e5c     6D 69 64 24 
36e60     3A 20       | 	byte	"mid$: "
36e62     00          | 	byte	0
36e63                 | LR__5924
36e63     43 61 6E 6E 
36e67     6F 74 20 63 
36e6b     72 65 61 74 
36e6f     65 20 61 20 
36e73     64 69 72 65 
36e77     63 74 6F 72 
36e7b     79 3A 20 73 
36e7f     79 73 74 65 
36e83     6D 20 65 72 
36e87     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
36e8b     00          | 	byte	0
36e8c                 | LR__5925
36e8c     20 42 41 53 
36e90     49 43 20 62 
36e94     79 74 65 73 
36e98     20 66 72 65 
36e9c     65          | 	byte	" BASIC bytes free"
36e9d     00          | 	byte	0
36e9e                 | LR__5926
36e9e                 | 	byte	
36e9e     00          | 	byte	0
36e9f                 | LR__5927
36e9f                 | 	byte	
36e9f     00          | 	byte	0
36ea0                 | LR__5928
36ea0                 | 	byte	
36ea0     00          | 	byte	0
36ea1                 | LR__5929
36ea1     6E 6F 6E 61 
36ea5     6D 65 2E 62 
36ea9     61 73       | 	byte	"noname.bas"
36eab     00          | 	byte	0
36eac                 | LR__5930
36eac     66 69 6C 65 
36eb0     6E 61 6D 65 
36eb4     20 65 78 70 
36eb8     65 63 74 65 
36ebc     64          | 	byte	"filename expected"
36ebd     00          | 	byte	0
36ebe                 | LR__5931
36ebe     72 65 61 64 | 	byte	"read"
36ec2     00          | 	byte	0
36ec3                 | LR__5932
36ec3     77 72 69 74 
36ec7     65          | 	byte	"write"
36ec8     00          | 	byte	0
36ec9                 | LR__5933
36ec9     61 70 70 65 
36ecd     6E 64       | 	byte	"append"
36ecf     00          | 	byte	0
36ed0                 | LR__5934
36ed0     63 68 61 6E 
36ed4     6E 65 6C 23 
36ed8     20 65 78 70 
36edc     65 63 74 65 
36ee0     64          | 	byte	"channel# expected"
36ee1     00          | 	byte	0
36ee2                 | LR__5935
36ee2     4F 70 65 6E 
36ee6     3A 20 69 6E 
36eea     76 61 6C 69 
36eee     64 20 6D 6F 
36ef2     64 65       | 	byte	"Open: invalid mode"
36ef4     00          | 	byte	0
36ef5                 | LR__5936
36ef5     70 61 64 68 
36ef9     3A 20       | 	byte	"padh: "
36efb     00          | 	byte	0
36efc                 | LR__5937
36efc     70 61 64 72 
36f00     78 3A 20    | 	byte	"padrx: "
36f03     00          | 	byte	0
36f04                 | LR__5938
36f04     70 61 64 72 
36f08     79 3A 20    | 	byte	"padry: "
36f0b     00          | 	byte	0
36f0c                 | LR__5939
36f0c     70 61 64 72 
36f10     7A 3A 20    | 	byte	"padrz: "
36f13     00          | 	byte	0
36f14                 | LR__5940
36f14     70 61 64 78 
36f18     3A 20       | 	byte	"padx: "
36f1a     00          | 	byte	0
36f1b                 | LR__5941
36f1b     70 61 64 79 
36f1f     3A 20       | 	byte	"pady: "
36f21     00          | 	byte	0
36f22                 | LR__5942
36f22     70 61 64 7A 
36f26     3A 20       | 	byte	"padz: "
36f28     00          | 	byte	0
36f29                 | LR__5943
36f29     50 72 69 6E 
36f2d     74 20 74 6F 
36f31     20 63 68 61 
36f35     6E 6E 65 6C 
36f39     20 28 6E 6F 
36f3d     74 20 79 65 
36f41     74 20 69 6D 
36f45     70 6C 65 6D 
36f49     65 6E 74 65 
36f4d     64 29       | 	byte	"Print to channel (not yet implemented)"
36f4f     00          | 	byte	0
36f50                 | LR__5944
36f50                 | 	byte	
36f50     00          | 	byte	0
36f51                 | LR__5945
36f51     64 61 74 61 | 	byte	"data"
36f55     00          | 	byte	0
36f56                 | LR__5946
36f56                 | 	byte	
36f56     00          | 	byte	0
36f57                 | LR__5947
36f57     49 6E 20 72 
36f5b     65 61 64 3A 
36f5f     20          | 	byte	"In read: "
36f60     00          | 	byte	0
36f61                 | LR__5948
36f61                 | 	byte	
36f61     00          | 	byte	0
36f62                 | LR__5949
36f62                 | 	byte	
36f62     00          | 	byte	0
36f63                 | LR__5950
36f63     27          | 	byte	"'"
36f64     00          | 	byte	0
36f65                 | LR__5951
36f65     2C          | 	byte	","
36f66     00          | 	byte	0
36f67                 | LR__5952
36f67                 | 	byte	
36f67     00          | 	byte	0
36f68                 | LR__5953
36f68                 | 	byte	
36f68     00          | 	byte	0
36f69                 | LR__5954
36f69                 | 	byte	
36f69     00          | 	byte	0
36f6a                 | LR__5955
36f6a                 | 	byte	
36f6a     00          | 	byte	0
36f6b                 | LR__5956
36f6b                 | 	byte	
36f6b     00          | 	byte	0
36f6c                 | LR__5957
36f6c     72 69 67 68 
36f70     74 24 3A 20 | 	byte	"right$: "
36f74     00          | 	byte	0
36f75                 | LR__5958
36f75     72 69 67 68 
36f79     74 24 3A 20 | 	byte	"right$: "
36f7d     00          | 	byte	0
36f7e                 | LR__5959
36f7e     72 6E 64 3A 
36f82     20          | 	byte	"rnd: "
36f83     00          | 	byte	0
36f84                 | LR__5960
36f84     72 6E 64 3A 
36f88     20          | 	byte	"rnd: "
36f89     00          | 	byte	0
36f8a                 | LR__5961
36f8a                 | 	byte	
36f8a     00          | 	byte	0
36f8b                 | LR__5962
36f8b     53 74 6F 70 
36f8f     70 65 64 20 
36f93     61 74 20 6C 
36f97     69 6E 65 20 | 	byte	"Stopped at line "
36f9b     00          | 	byte	0
36f9c                 | LR__5963
36f9c                 | 	byte	
36f9c     00          | 	byte	0
36f9d                 | LR__5964
36f9d     2F          | 	byte	"/"
36f9e     00          | 	byte	0
36f9f                 | LR__5965
36f9f                 | 	byte	
36f9f     00          | 	byte	0
36fa0                 | LR__5966
36fa0     53 61 76 65 
36fa4     64 20 61 73 
36fa8     20          | 	byte	"Saved as "
36fa9     00          | 	byte	0
36faa                 | LR__5967
36faa     2F          | 	byte	"/"
36fab     00          | 	byte	0
36fac                 | LR__5968
36fac     73 69 6E 3A 
36fb0     20          | 	byte	"sin: "
36fb1     00          | 	byte	0
36fb2                 | LR__5969
36fb2     73 71 72 3A 
36fb6     20          | 	byte	"sqr: "
36fb7     00          | 	byte	0
36fb8                 | LR__5970
36fb8     73 74 69 63 
36fbc     6B 3A 20    | 	byte	"stick: "
36fbf     00          | 	byte	0
36fc0                 | LR__5971
36fc0     73 74 72 69 
36fc4     67 3A 20    | 	byte	"strig: "
36fc7     00          | 	byte	0
36fc8                 | LR__5972
36fc8     74 61 6E 3A 
36fcc     20          | 	byte	"tan: "
36fcd     00          | 	byte	0
36fce                 | LR__5973
36fce     76 61 6C 3A 
36fd2     20          | 	byte	"val: "
36fd3     00          | 	byte	0
36fd4                 | LR__5974
36fd4     76 61 6C 3A 
36fd8     20          | 	byte	"val: "
36fd9     00          | 	byte	0
36fda                 | LR__5975
36fda     24          | 	byte	"$"
36fdb     00          | 	byte	0
36fdc                 | LR__5976
36fdc     26 68       | 	byte	"&h"
36fde     00          | 	byte	0
36fdf                 | LR__5977
36fdf     25          | 	byte	"%"
36fe0     00          | 	byte	0
36fe1                 | LR__5978
36fe1     26 62       | 	byte	"&b"
36fe3     00          | 	byte	0
36fe4                 | LR__5979
36fe4                 | 	byte	
36fe4     00          | 	byte	0
36fe5                 | LR__5980
36fe5     45 78 70 65 
36fe9     63 74 65 64 
36fed     20 6E 75 6D 
36ff1     62 65 72 2C 
36ff5     20 67 6F 74 
36ff9     20 73 6F 6D 
36ffd     65 74 68 69 
37001     6E 67 20 65 
37005     6C 73 65    | 	byte	"Expected number, got something else"
37008     00          | 	byte	0
37009                 | LR__5981
37009     43 61 6E 6E 
3700d     6F 74 20 61 
37011     64 64 20 61 
37015     20 6E 75 6D 
37019     62 65 72 20 
3701d     74 6F 20 61 
37021     20 73 74 72 
37025     69 6E 67    | 	byte	"Cannot add a number to a string"
37028     00          | 	byte	0
37029                 | LR__5982
37029     43 61 6E 6E 
3702d     6F 74 20 73 
37031     75 62 73 74 
37035     72 61 63 74 
37039     20 73 74 72 
3703d     69 6E 67 73 | 	byte	"Cannot substract strings"
37041     00          | 	byte	0
37042                 | LR__5983
37042     55 6E 6B 6E 
37046     6F 77 6E 20 
3704a     65 72 72 6F 
3704e     72 20 77 68 
37052     69 6C 65 20 
37056     61 64 64 69 
3705a     6E 67       | 	byte	"Unknown error while adding"
3705c     00          | 	byte	0
3705d                 | LR__5984
3705d     55 6E 6B 6E 
37061     6F 77 6E 20 
37065     65 72 72 6F 
37069     72 20 77 68 
3706d     69 6C 65 20 
37071     73 75 62 73 
37075     74 72 61 63 
37079     74 69 6E 67 | 	byte	"Unknown error while substracting"
3707d     00          | 	byte	0
3707e                 | LR__5985
3707e     43 61 6E 6E 
37082     6F 74 20 64 
37086     6F 20 6C 6F 
3708a     67 69 63 20 
3708e     6F 70 65 72 
37092     61 74 69 6F 
37096     6E 20 6F 6E 
3709a     20 73 74 72 
3709e     69 6E 67 20 
370a2     6F 72 20 66 
370a6     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
370aa     00          | 	byte	0
370ab                 | LR__5986
370ab     55 6E 6B 6E 
370af     6F 77 6E 20 
370b3     65 72 72 6F 
370b7     72 20 77 68 
370bb     69 6C 65 20 
370bf     64 6F 69 6E 
370c3     67 20 6C 6F 
370c7     67 69 63 20 
370cb     6F 70 65 72 
370cf     61 74 69 6F 
370d3     6E          | 	byte	"Unknown error while doing logic operation"
370d4     00          | 	byte	0
370d5                 | LR__5987
370d5     43 61 6E 6E 
370d9     6F 74 20 6D 
370dd     75 6C 74 69 
370e1     70 6C 79 20 
370e5     73 74 72 69 
370e9     6E 67 73    | 	byte	"Cannot multiply strings"
370ec     00          | 	byte	0
370ed                 | LR__5988
370ed     55 6E 6B 6E 
370f1     6F 77 6E 20 
370f5     65 72 72 6F 
370f9     72 20 77 68 
370fd     69 6C 65 20 
37101     6D 75 6C 74 
37105     69 70 6C 79 
37109     69 6E 67    | 	byte	"Unknown error while multiplying"
3710c     00          | 	byte	0
3710d                 | LR__5989
3710d     43 61 6E 6E 
37111     6F 74 20 64 
37115     69 76 69 64 
37119     65 20 73 74 
3711d     72 69 6E 67 
37121     73          | 	byte	"Cannot divide strings"
37122     00          | 	byte	0
37123                 | LR__5990
37123     55 6E 6B 6E 
37127     6F 77 6E 20 
3712b     65 72 72 6F 
3712f     72 20 77 68 
37133     69 6C 65 20 
37137     64 69 76 69 
3713b     64 69 6E 67 | 	byte	"Unknown error while dividing"
3713f     00          | 	byte	0
37140                 | LR__5991
37140     43 61 6E 6E 
37144     6F 74 20 63 
37148     6F 6D 70 75 
3714c     74 65 20 61 
37150     20 70 6F 77 
37154     65 72 20 6F 
37158     66 20 61 20 
3715c     73 74 72 69 
37160     6E 67       | 	byte	"Cannot compute a power of a string"
37162     00          | 	byte	0
37163                 | LR__5992
37163     55 6E 6B 6E 
37167     6F 77 6E 20 
3716b     65 72 72 6F 
3716f     72 20 77 68 
37173     69 6C 65 20 
37177     63 6F 6D 70 
3717b     75 74 69 6E 
3717f     67 20 61 20 
37183     70 6F 77 65 
37187     72          | 	byte	"Unknown error while computing a power"
37188     00          | 	byte	0
37189                 | LR__5993
37189     52 69 67 68 
3718d     74 20 70 61 
37191     72 65 6E 74 
37195     68 65 73 69 
37199     73 20 65 78 
3719d     70 65 63 74 
371a1     65 64       | 	byte	"Right parenthesis expected"
371a3     00          | 	byte	0
371a4                 | LR__5994
371a4     45 78 70 65 
371a8     63 74 65 64 
371ac     20 73 74 72 
371b0     69 6E 67    | 	byte	"Expected string"
371b3     00          | 	byte	0
371b4                 | LR__5995
371b4     45 78 70 65 
371b8     63 74 65 64 
371bc     20 66 6C 6F 
371c0     61 74       | 	byte	"Expected float"
371c2     00          | 	byte	0
371c3                 | LR__5996
371c3     45 78 70 65 
371c7     63 74 65 64 
371cb     20 75 6E 73 
371cf     69 67 6E 65 
371d3     64 20 69 6E 
371d7     74 65 67 65 
371db     72          | 	byte	"Expected unsigned integer"
371dc     00          | 	byte	0
371dd                 | LR__5997
371dd     45 78 70 65 
371e1     63 74 65 64 
371e5     20 69 6E 74 
371e9     65 67 65 72 | 	byte	"Expected integer"
371ed     00          | 	byte	0
371ee                 | LR__5998
371ee     4E 6F 20 6D 
371f2     6F 72 65 20 
371f6     76 61 72 69 
371fa     61 62 6C 65 
371fe     20 73 6C 6F 
37202     74 73       | 	byte	"No more variable slots"
37204     00          | 	byte	0
37205                 | LR__5999
37205     56 61 72 69 
37209     61 62 6C 65 
3720d     20 6E 6F 74 
37211     20 66 6F 75 
37215     6E 64       | 	byte	"Variable not found"
37217     00          | 	byte	0
37218                 | LR__6000
37218     43 6F 6D 6D 
3721c     61 20 65 78 
37220     70 65 63 74 
37224     65 64       | 	byte	"Comma expected"
37226     00          | 	byte	0
37227                 | LR__6001
37227     43 6F 6D 6D 
3722b     61 20 6F 72 
3722f     20 73 65 6D 
37233     69 63 6F 6C 
37237     6F 6E 20 65 
3723b     78 70 65 63 
3723f     74 65 64    | 	byte	"Comma or semicolon expected"
37242     00          | 	byte	0
37243                 | LR__6002
37243     55 6E 6B 6E 
37247     6F 77 6E 20 
3724b     63 6F 6D 6D 
3724f     61 6E 64    | 	byte	"Unknown command"
37252     00          | 	byte	0
37253                 | LR__6003
37253     53 74 61 63 
37257     6B 20 75 6E 
3725b     64 65 72 66 
3725f     6C 6F 77    | 	byte	"Stack underflow"
37262     00          | 	byte	0
37263                 | LR__6004
37263     43 61 6E 6E 
37267     6F 74 20 65 
3726b     78 65 63 75 
3726f     74 65 20 67 
37273     6F 74 6F 20 
37277     6F 72 20 67 
3727b     6F 73 75 62 
3727f     20 69 6E 20 
37283     74 68 65 20 
37287     69 6D 6D 65 
3728b     64 69 61 74 
3728f     65 20 6D 6F 
37293     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
37295     00          | 	byte	0
37296                 | LR__6005
37296     43 61 6E 6E 
3729a     6F 74 20 6C 
3729e     6F 61 64 20 
372a2     66 72 6F 6D 
372a6     20 74 68 69 
372aa     73 20 66 69 
372ae     6C 65       | 	byte	"Cannot load from this file"
372b0     00          | 	byte	0
372b1                 | LR__6006
372b1     54 68 65 20 
372b5     70 72 6F 67 
372b9     72 61 6D 20 
372bd     69 73 20 65 
372c1     6D 70 74 79 | 	byte	"The program is empty"
372c5     00          | 	byte	0
372c6                 | LR__6007
372c6     49 66 20 61 
372ca     66 74 65 72 
372ce     20 69 66    | 	byte	"If after if"
372d1     00          | 	byte	0
372d2                 | LR__6008
372d2     45 6D 70 74 
372d6     79 20 65 78 
372da     70 72 65 73 
372de     73 69 6F 6E | 	byte	"Empty expression"
372e2     00          | 	byte	0
372e3                 | LR__6009
372e3     53 74 72 69 
372e7     6E 67 20 65 
372eb     78 70 65 63 
372ef     74 65 64    | 	byte	"String expected"
372f2     00          | 	byte	0
372f3                 | LR__6010
372f3     49 6E 74 65 
372f7     72 70 72 65 
372fb     74 65 72 20 
372ff     69 6E 74 65 
37303     72 6E 61 6C 
37307     20 65 72 72 
3730b     6F 72       | 	byte	"Interpreter internal error"
3730d     00          | 	byte	0
3730e                 | LR__6011
3730e     45 78 70 65 
37312     63 74 65 64 
37316     20 61 73 73 
3731a     69 67 6E    | 	byte	"Expected assign"
3731d     00          | 	byte	0
3731e                 | LR__6012
3731e     45 78 70 65 
37322     63 74 65 64 
37326     20 27 74 6F 
3732a     27          | 	byte	"Expected 'to'"
3732b     00          | 	byte	0
3732c                 | LR__6013
3732c     45 78 70 65 
37330     63 74 65 64 
37334     20 69 6E 74 
37338     65 67 65 72 
3733c     20 76 61 72 
37340     69 61 62 6C 
37344     65          | 	byte	"Expected integer variable"
37345     00          | 	byte	0
37346                 | LR__6014
37346     55 6E 69 6E 
3734a     69 74 69 61 
3734e     6C 69 7A 65 
37352     64 20 76 61 
37356     72 69 61 62 
3735a     6C 65 20 69 
3735e     6E 20 27 6E 
37362     65 78 74 27 
37366     2C 20 75 73 
3736a     65 20 27 66 
3736e     6F 72 27 20 
37372     62 65 66 6F 
37376     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
37378     00          | 	byte	0
37379                 | LR__6015
37379     4E 6F 20 6D 
3737d     6F 72 65 20 
37381     73 6C 6F 74 
37385     73 20 66 6F 
37389     72 20 27 66 
3738d     6F 72 27    | 	byte	"No more slots for 'for'"
37390     00          | 	byte	0
37391                 | LR__6016
37391     27 4E 65 78 
37395     74 27 20 64 
37399     6F 65 73 6E 
3739d     27 74 20 6D 
373a1     61 74 63 68 
373a5     20 27 66 6F 
373a9     72 27       | 	byte	"'Next' doesn't match 'for'"
373ab     00          | 	byte	0
373ac                 | LR__6017
373ac     27 47 6F 74 
373b0     6F 27 20 74 
373b4     61 72 67 65 
373b8     74 20 6C 69 
373bc     6E 65 20 6E 
373c0     6F 74 20 66 
373c4     6F 75 6E 64 | 	byte	"'Goto' target line not found"
373c8     00          | 	byte	0
373c9                 | LR__6018
373c9     42 61 64 20 
373cd     6E 75 6D 62 
373d1     65 72 20 6F 
373d5     66 20 70 61 
373d9     72 61 6D 65 
373dd     74 65 72 73 | 	byte	"Bad number of parameters"
373e1     00          | 	byte	0
373e2                 | LR__6019
373e2     46 75 6E 63 
373e6     74 69 6F 6E 
373ea     20 75 6E 64 
373ee     65 66 69 6E 
373f2     65 64 20 66 
373f6     6F 72 20 73 
373fa     74 72 69 6E 
373fe     67 73       | 	byte	"Function undefined for strings"
37400     00          | 	byte	0
37401                 | LR__6020
37401     42 61 64 20 
37405     70 61 72 61 
37409     6D 65 74 65 
3740d     72          | 	byte	"Bad parameter"
3740e     00          | 	byte	0
3740f                 | LR__6021
3740f     43 61 6E 6E 
37413     6F 74 20 64 
37417     65 63 6C 61 
3741b     72 65 20 61 
3741f     6E 20 61 72 
37423     72 61 79 3A 
37427     20 74 68 65 
3742b     20 76 61 72 
3742f     69 61 62 6C 
37433     65 20 65 78 
37437     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
3743b     00          | 	byte	0
3743c                 | LR__6022
3743c     45 78 70 65 
37440     63 74 65 64 
37444     20 27 28 27 | 	byte	"Expected '('"
37448     00          | 	byte	0
37449                 | LR__6023
37449     45 78 70 65 
3744d     63 74 65 64 
37451     20 27 29 27 
37455     20 6F 72 20 
37459     27 2C 27    | 	byte	"Expected ')' or ','"
3745c     00          | 	byte	0
3745d                 | LR__6024
3745d     4E 6F 20 6D 
37461     6F 72 65 20 
37465     74 68 61 6E 
37469     20 33 20 64 
3746d     69 6D 65 6E 
37471     73 69 6F 6E 
37475     73 20 73 75 
37479     70 70 6F 72 
3747d     74 65 64    | 	byte	"No more than 3 dimensions supported"
37480     00          | 	byte	0
37481                 | LR__6025
37481     56 61 72 69 
37485     61 62 6C 65 
37489     20 6E 61 6D 
3748d     65 20 65 78 
37491     70 65 63 74 
37495     65 64       | 	byte	"Variable name expected"
37497     00          | 	byte	0
37498                 | LR__6026
37498     54 79 70 65 
3749c     20 6E 61 6D 
374a0     65 20 65 78 
374a4     70 65 63 74 
374a8     65 64       | 	byte	"Type name expected"
374aa     00          | 	byte	0
374ab                 | LR__6027
374ab     54 79 70 65 
374af     20 6E 6F 74 
374b3     20 73 75 70 
374b7     70 6F 72 74 
374bb     65 64 20 79 
374bf     65 74       | 	byte	"Type not supported yet"
374c1     00          | 	byte	0
374c2                 | LR__6028
374c2     41 72 72 61 
374c6     79 20 69 6E 
374ca     64 65 78 20 
374ce     6F 75 74 20 
374d2     6F 66 20 72 
374d6     61 6E 67 65 | 	byte	"Array index out of range"
374da     00          | 	byte	0
374db                 | LR__6029
374db     42 61 64 20 
374df     74 79 70 65 
374e3     20 77 68 69 
374e7     6C 65 20 61 
374eb     73 73 69 67 
374ef     6E 69 6E 67 
374f3     20 74 6F 20 
374f7     61 72 72 61 
374fb     79          | 	byte	"Bad type while assigning to array"
374fc     00          | 	byte	0
374fd                 | LR__6030
374fd     54 6F 6F 20 
37501     6D 61 6E 79 
37505     20 76 61 72 
37509     69 61 62 6C 
3750d     65 73       | 	byte	"Too many variables"
3750f     00          | 	byte	0
37510                 | LR__6031
37510     27 54 68 65 
37514     6E 27 20 65 
37518     78 70 65 63 
3751c     74 65 64    | 	byte	"'Then' expected"
3751f     00          | 	byte	0
37520                 | LR__6032
37520     44 69 72 65 
37524     63 74 6F 72 
37528     79 20 64 6F 
3752c     65 73 6E 27 
37530     74 20 65 78 
37534     69 73 74    | 	byte	"Directory doesn't exist"
37537     00          | 	byte	0
37538                 | LR__6033
37538     55 6E 65 78 
3753c     70 65 63 74 
37540     65 64 20 65 
37544     6E 64 20 6F 
37548     66 20 6C 69 
3754c     6E 65       | 	byte	"Unexpected end of line"
3754e     00          | 	byte	0
3754f                 | LR__6034
3754f     4E 6F 20 6D 
37553     6F 72 65 20 
37557     64 61 74 61 | 	byte	"No more data"
3755b     00          | 	byte	0
3755c                 | LR__6035
3755c     45 72 72 6F 
37560     72 20       | 	byte	"Error "
37562     00          | 	byte	0
37563                 | LR__6036
37563     20 2D 20    | 	byte	" - "
37566     00          | 	byte	0
37567                 | LR__6037
37567     20 69 6E 20 
3756b     6C 69 6E 65 
3756f     20          | 	byte	" in line "
37570     00          | 	byte	0
37571                 | LR__6038
37571                 | 	byte	
37571     00          | 	byte	0
37572                 | LR__6039
37572     2F 73 64    | 	byte	"/sd"
37575     00          | 	byte	0
37576                 | LR__6040
37576     2F 73 64 2F 
3757a     62 61 73    | 	byte	"/sd/bas"
3757d     00          | 	byte	0
3757e                 | LR__6041
3757e     2F 73 64 2F 
37582     62 61 73    | 	byte	"/sd/bas"
37585     00          | 	byte	0
37586                 | LR__6042
37586     20 42 41 53 
3758a     49 43 20 62 
3758e     79 74 65 73 
37592     20 66 72 65 
37596     65          | 	byte	" BASIC bytes free"
37597     00          | 	byte	0
37598                 | LR__6043
37598     52 65 61 64 
3759c     79          | 	byte	"Ready"
3759d     00          | 	byte	0
3759e                 | LR__6044
3759e     6E 6F 6E 61 
375a2     6D 65 2E 62 
375a6     61 73       | 	byte	"noname.bas"
375a8     00          | 	byte	0
375a9                 | LR__6045
375a9     2F 73 64 2F 
375ad     62 61 73 2F 
375b1     61 75 74 6F 
375b5     72 75 6E 2E 
375b9     62 61 73    | 	byte	"/sd/bas/autorun.bas"
375bc     00          | 	byte	0
375bd                 | LR__6046
375bd     72 75 6E 20 
375c1     61 75 74 6F 
375c5     72 75 6E 2E 
375c9     62 61 73    | 	byte	"run autorun.bas"
375cc     00          | 	byte	0
375cd                 | LR__6047
375cd                 | 	byte	
375cd     00          | 	byte	0
375ce     00 00       | 	alignl
375d0                 | _dat_
375d0     00 00 00 00 
375d4     00 00 00 00 
375d8     00 00 00 00 
375dc     00 00 00 00 | 	byte	$00[16]
375e0     61 41 17 0E 
375e4     62 42 00 00 
375e8     63 43 19 10 
375ec     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
375f0     65 45 18 0F 
375f4     66 46 00 00 
375f8     67 47 00 00 
375fc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
37600     69 49 00 00 
37604     6A 4A 00 00 
37608     6B 4B 00 00 
3760c     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
37610     6D 4D 00 00 
37614     6E 4E 1A 11 
37618     6F 4F 1E 15 
3761c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
37620     71 51 00 00 
37624     72 52 00 00 
37628     73 53 1B 12 
3762c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
37630     75 55 00 00 
37634     76 56 00 00 
37638     77 57 00 00 
3763c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
37640     79 59 00 00 
37644     7A 5A 1D 14 
37648     31 21 04 00 
3764c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
37650     33 23 06 00 
37654     34 24 07 00 
37658     35 25 08 00 
3765c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
37660     37 26 0A 00 
37664     38 2A 0B 00 
37668     39 28 0C 00 
3766c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
37670     8D 8D 00 00 
37674     9B 9B 00 00 
37678     88 88 00 00 
3767c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
37680     20 20 00 00 
37684     2D 5F 00 00 
37688     3D 2B 00 00 
3768c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
37690     5D 7D 00 00 
37694     5C 7C 00 00 
37698     23 7E 00 00 
3769c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
376a0     27 22 00 00 
376a4     60 7E 03 00 
376a8     2C 3C 00 00 
376ac     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
376b0     2F 3F 00 00 
376b4     B9 B9 00 00 
376b8     BA 00 00 00 
376bc     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
376c0     BC 00 00 00 
376c4     BD 00 00 00 
376c8     BE 00 00 00 
376cc     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
376d0     C0 00 00 00 
376d4     C1 00 00 00 
376d8     C2 00 00 00 
376dc     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
376e0     C4 00 00 00 
376e4     C5 00 00 00 
376e8     C6 00 00 00 
376ec     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
376f0     C8 00 00 00 
376f4     C9 00 00 00 
376f8     CA 00 00 00 
376fc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
37700     7F 7F 00 00 
37704     CC 00 00 00 
37708     CD 00 00 00 
3770c     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
37710     CF 00 00 00 
37714     D0 00 00 00 
37718     D1 00 00 00 
3771c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
37720     2F 2F 00 00 
37724     2A 2A 00 00 
37728     2D 2D 00 00 
3772c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
37730     8D 8D 00 00 
37734     31 31 00 00 
37738     32 32 00 00 
3773c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
37740     34 34 00 00 
37744     35 35 00 00 
37748     36 36 00 00 
3774c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
37750     38 38 00 00 
37754     39 39 00 00 
37758     30 30 00 00 
3775c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
37760     5C 7C 00 00 
37764     00 00 00 00 
37768     00 00 00 00 
3776c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
37770     00 00 00 00 
      ...             
377c8     00 00 00 00 
377cc     00 00 00 00 | 	byte	$00[96]
377d0     2B 00 A6 F2 
377d4     24 A7 09 80 
377d8     5B 88 4D 89 
377dc     80 88 A5 88 | atari_spl file "atari.spl"
377e0     6D 88 B8 88 
377e4     80 88 CB 88 
377e8     92 88 A5 88 
377ec     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
377f0     A5 88 CA 88 
377f4     A6 88 DD 88 
377f8     B8 88 AB 89 
377fc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
37800     C8 AD C6 F1 
37804     91 06 B6 FF 
37808     13 00 4A 00 
3780c     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
37810     5D 00 5E 00 
37814     5D 00 5E 00 
37818     5E 00 5D 00 
3781c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
37820     38 00 83 00 
37824     25 00 83 00 
37828     C3 FE D1 04 
3782c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
37830     48 88 38 85 
37834     41 8A CB 88 
37838     28 89 B8 88 
3783c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
37840     15 89 03 89 
37844     02 89 15 89 
37848     16 89 15 89 
3784c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
37850     15 89 3A 89 
37854     72 89 E3 89 
37858     52 83 AD 97 
3785c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
37860     0C 02 B6 FF 
37864     E1 00 A8 00 
37868     F3 00 A8 00 
3786c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
37870     CE 00 CD 00 
37874     CD 00 BA 00 
37878     E1 00 BB 00 
3787c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
37880     DF 00 C9 FF 
37884     E6 01 B6 06 
37888     EE DD 8D 98 
3788c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
37890     97 89 73 89 
37894     3B 89 60 89 
37898     60 89 60 89 
3789c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
378a0     73 89 72 89 
378a4     85 89 73 89 
378a8     AA 89 60 89 
378ac     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
378b0     E8 8A 18 86 
378b4     92 88 A5 C2 
378b8     E0 00 C3 05 
378bc     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
378c0     F2 00 64 01 
378c4     06 01 3E 01 
378c8     2B 01 2B 01 
378cc     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
378d0     2B 01 2A 01 
378d4     2B 01 2B 01 
378d8     2B 01 18 01 
378dc     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
378e0     39 07 61 F3 
378e4     C0 AF 37 85 
378e8     0F 88 8B 8A 
378ec     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
378f0     AB 89 D0 89 
378f4     AB 89 D0 89 
378f8     D0 89 CF 89 
378fc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
37900     D0 89 F5 89 
37904     BD 89 08 8A 
37908     CF 89 E8 8A 
3790c     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
37910     53 B3 0D F8 
37914     F4 07 38 00 
37918     63 01 63 01 
3791c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
37920     88 01 88 01 
37924     76 01 88 01 
37928     88 01 89 01 
3792c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
37930     75 01 AE 01 
37934     76 01 88 01 
37938     4A 00 46 06 
3793c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
37940     08 8A 9A 86 
37944     33 8B 08 8A 
37948     2D 8A F5 89 
3794c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
37950     2D 8A 2D 8A 
37954     2E 8A 1B 8A 
37958     40 8A 2D 8A 
3795c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
37960     2E 8A 79 8A 
37964     66 8A C8 8B 
37968     72 82 2B 97 
3796c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
37970     1D 02 05 01 
37974     F8 01 C0 01 
37978     0B 02 C0 01 
3797c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
37980     F9 01 D3 01 
37984     F8 01 D3 01 
37988     F8 01 D2 01 
3798c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
37990     E6 01 2B 01 
37994     8E 02 5F 07 
37998     F7 E2 ED 9C 
3799c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
379a0     E8 8A 78 8A 
379a4     78 8A 65 8A 
379a8     8B 8A 78 8A 
379ac     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
379b0     8B 8A 9D 8A 
379b4     9D 8A 8B 8A 
379b8     C2 8A 78 8A 
379bc     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
379c0     70 8C 18 86 
379c4     8B 8A 23 C9 
379c8     CB 03 C4 05 
379cc     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
379d0     0B 02 7B 02 
379d4     1E 02 55 02 
379d8     30 02 43 02 
379dc     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
379e0     43 02 44 02 
379e4     43 02 30 02 
379e8     68 02 31 02 
379ec     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
379f0     07 08 3F F7 
379f4     73 B2 13 85 
379f8     15 89 ED 8B 
379fc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
37a00     B0 8A FB 8A 
37a04     D5 8A FA 8A 
37a08     E8 8A FB 8A 
37a0c     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
37a10     E8 8A 21 8B 
37a14     E7 8A 33 8B 
37a18     E8 8A 26 8C 
37a1c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
37a20     8D B0 27 F6 
37a24     9C 08 AD 01 
37a28     7B 02 8D 02 
37a2c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
37a30     A1 02 A0 02 
37a34     A1 02 A0 02 
37a38     A0 02 A0 02 
37a3c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
37a40     7B 02 D8 02 
37a44     7B 02 C6 02 
37a48     3E 01 C3 05 
37a4c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
37a50     00 8C 2A 86 
37a54     E0 8C FA 8A 
37a58     6A 8B FB 8A 
37a5c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
37a60     45 8B 45 8B 
37a64     45 8B 6B 8B 
37a68     46 8B 59 8B 
37a6c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
37a70     6B 8B 6B 8B 
37a74     6B 8B 6B 8B 
37a78     7D 8B 7D 8B 
37a7c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
37a80     90 8B 91 8B 
37a84     90 8B 90 8B 
37a88     A3 8B A3 8B 
37a8c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
37a90     B5 8B B6 8B 
37a94     B5 8B B5 8B 
37a98     B6 8B C8 8B 
37a9c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
37aa0     C8 8B DA 8B 
37aa4     DB 8B DB 8B 
37aa8     DB 8B DC 8B 
37aac     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
37ab0     EE 8B EE 8B 
37ab4     00 8C 01 8C 
37ab8     00 8C 01 8C 
37abc     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
37ac0     12 8C 13 8C 
37ac4     13 8C 26 8C 
37ac8     26 8C 26 8C 
37acc     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
37ad0     38 8C 38 8C 
37ad4     38 8C 38 8C 
37ad8     4B 8C 4B 8C 
37adc     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
37ae0     5E 8C 5E 8C 
37ae4     5E 8C 5E 8C 
37ae8     70 8C 70 8C 
37aec     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
37af0     70 8C 83 8C 
37af4     83 8C 83 8C 
37af8     83 8C 96 8C 
37afc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
37b00     95 8C A9 8C 
37b04     A9 8C A8 8C 
37b08     A8 8C A8 8C 
37b0c     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
37b10     BB 8C BB 8C 
37b14     BB 8C CE 8C 
37b18     CE 8C CE 8C 
37b1c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
37b20     E0 8C E1 8C 
37b24     E1 8C E0 8C 
37b28     F4 8C F2 8C 
37b2c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
37b30     05 8D 05 8D 
37b34     06 8D 06 8D 
37b38     19 8D 19 8D 
37b3c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
37b40     18 8D 2B 8D 
37b44     2B 8D 2B 8D 
37b48     2A 8D 3E 8D 
37b4c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
37b50     3E 8D 51 8D 
37b54     50 8D 50 8D 
37b58     50 8D 51 8D 
37b5c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
37b60     63 8D 64 8D 
37b64     76 8D 75 8D 
37b68     75 8D 76 8D 
37b6c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
37b70     88 8D 88 8D 
37b74     89 8D 9B 8D 
37b78     9A 8D 9B 8D 
37b7c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
37b80     AD 8D AE 8D 
37b84     AD 8D AE 8D 
37b88     C1 8D C1 8D 
37b8c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
37b90     D3 8D D3 8D 
37b94     D3 8D D3 8D 
37b98     D3 8D E6 8D 
37b9c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
37ba0     E6 8D E6 8D 
37ba4     F9 8D F9 8D 
37ba8     F9 8D F8 8D 
37bac     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
37bb0     0B 8E 0B 8E 
37bb4     1D 8E 1D 8E 
37bb8     1E 8E 1E 8E 
37bbc     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
37bc0     31 8E 31 8E 
37bc4     31 8E 42 8E 
37bc8     43 8E 43 8E 
37bcc     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
37bd0     56 8E 56 8E 
37bd4     55 8E 56 8E 
37bd8     68 8E 69 8E 
37bdc     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
37be0     69 8E 7B 8E 
37be4     7C 8E 7B 8E 
37be8     7B 8E 8D 8E 
37bec     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
37bf0     8D 8E A1 8E 
37bf4     A0 8E A1 8E 
37bf8     A1 8E A0 8E 
37bfc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
37c00     B3 8E B3 8E 
37c04     C6 8E C5 8E 
37c08     C6 8E C6 8E 
37c0c     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
37c10     D8 8E D9 8E 
37c14     D8 8E EC 8E 
37c18     EB 8E EC 8E 
37c1c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
37c20     FE 8E FE 8E 
37c24     FE 8E FE 8E 
37c28     10 8F 10 8F 
37c2c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
37c30     11 8F 23 8F 
37c34     24 8F 23 8F 
37c38     24 8F 37 8F 
37c3c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
37c40     36 8F 36 8F 
37c44     48 8F 49 8F 
37c48     49 8F 49 8F 
37c4c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
37c50     5B 8F 5C 8F 
37c54     5B 8F 6E 8F 
37c58     6E 8F 6E 8F 
37c5c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
37c60     81 8F 81 8F 
37c64     81 8F 81 8F 
37c68     93 8F 93 8F 
37c6c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
37c70     93 8F A6 8F 
37c74     A6 8F A6 8F 
37c78     A6 8F B9 8F 
37c7c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
37c80     B9 8F B9 8F 
37c84     CC 8F CB 8F 
37c88     CB 8F CC 8F 
37c8c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
37c90     DF 8F DE 8F 
37c94     DE 8F F1 8F 
37c98     F1 8F F1 8F 
37c9c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
37ca0     03 90 04 90 
37ca4     04 90 04 90 
37ca8     16 90 17 90 
37cac     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
37cb0     29 90 28 90 
37cb4     29 90 28 90 
37cb8     29 90 3C 90 
37cbc     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
37cc0     3C 90 4F 90 
37cc4     4E 90 4E 90 
37cc8     4E 90 4E 90 
37ccc     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
37cd0     61 90 61 90 
37cd4     73 90 74 90 
37cd8     74 90 74 90 
37cdc     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
37ce0     87 90 86 90 
37ce4     87 90 86 90 
37ce8     99 90 99 90 
37cec     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
37cf0     AB 90 AB 90 
37cf4     AC 90 AB 90 
37cf8     AB 90 BF 90 
37cfc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
37d00     BE 90 D1 90 
37d04     D0 90 D1 90 
37d08     D1 90 D1 90 
37d0c     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
37d10     E3 90 E4 90 
37d14     F6 90 F6 90 
37d18     F6 90 F6 90 
37d1c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
37d20     09 91 0A 91 
37d24     0A 91 1C 91 
37d28     1C 91 1C 91 
37d2c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
37d30     2F 91 2E 91 
37d34     2F 91 2F 91 
37d38     2E 91 41 91 
37d3c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
37d40     41 91 53 91 
37d44     54 91 54 91 
37d48     53 91 54 91 
37d4c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
37d50     67 91 67 91 
37d54     79 91 7A 91 
37d58     79 91 78 91 
37d5c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
37d60     8C 91 8B 91 
37d64     8C 91 8C 91 
37d68     9E 91 9E 91 
37d6c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
37d70     B1 91 B1 91 
37d74     B2 91 B1 91 
37d78     B1 91 C4 91 
37d7c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
37d80     C4 91 D6 91 
37d84     D7 91 D7 91 
37d88     D7 91 D6 91 
37d8c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
37d90     EA 91 EA 91 
37d94     EA 91 FC 91 
37d98     FC 91 FB 91 
37d9c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
37da0     0E 92 0F 92 
37da4     0F 92 0E 92 
37da8     21 92 21 92 
37dac     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
37db0     21 92 34 92 
37db4     33 92 34 92 
37db8     34 92 47 92 
37dbc     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
37dc0     46 92 47 92 
37dc4     59 92 59 92 
37dc8     59 92 59 92 
37dcc     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
37dd0     6C 92 6C 92 
37dd4     6B 92 7E 92 
37dd8     7E 92 7E 92 
37ddc     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
37de0     92 92 91 92 
37de4     91 92 90 92 
37de8     91 92 A4 92 
37dec     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
37df0     A3 92 B6 92 
37df4     B6 92 B7 92 
37df8     B7 92 B6 92 
37dfc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
37e00     CA 92 C9 92 
37e04     CA 92 DC 92 
37e08     DC 92 DC 92 
37e0c     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
37e10     EF 92 EF 92 
37e14     EF 92 EF 92 
37e18     01 93 01 93 
37e1c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
37e20     15 93 14 93 
37e24     14 93 14 93 
37e28     14 93 27 93 
37e2c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
37e30     27 93 39 93 
37e34     3A 93 39 93 
37e38     39 93 39 93 
37e3c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
37e40     4B 93 4C 93 
37e44     5F 93 5F 93 
37e48     5F 93 5E 93 
37e4c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
37e50     5F 93 84 93 
37e54     4C 93 96 93 
37e58     5F 93 AE 94 
37e5c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
37e60     7B C1 00 00 
37e64     00 00 00 00 
37e68     00 00 00 00 
37e6c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37e70     00 00 00 00 | 	byte	$00, $00, $00, $00
37e74     7A D7 00 80 
37e78     87 8A 48 8F 
37e7c     EC 8C 76 8D 
37e80     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
37e84     3C 8D 82 8D 
37e88     42 8D 88 8D 
37e8c     8C 8D 8E 8D 
37e90     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
37e94     97 8D DE 8D 
37e98     E1 8D F1 8E 
37e9c     D8 8C A3 83 
37ea0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
37ea4     65 71 C9 65 
37ea8     FC 64 C4 65 
37eac     C1 65 BF 65 
37eb0     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
37eb4     B6 65 B4 65 
37eb8     B2 65 AE 65 
37ebc     AC 65 ED 65 
37ec0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
37ec4     5E 65 25 66 
37ec8     FA 62 23 6B 
37ecc     B5 6C 61 0A 
37ed0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
37ed4     5D 90 BE 8D 
37ed8     47 8E C3 8D 
37edc     09 8E C9 8D 
37ee0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
37ee4     15 8E 19 8E 
37ee8     1B 8E 62 8E 
37eec     64 8E 68 8E 
37ef0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
37ef4     B5 8E 4C 90 
37ef8     FA 84 3C 9D 
37efc     98 13 79 6D 
37f00     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
37f04     D9 66 50 66 
37f08     D4 66 4B 66 
37f0c     8C 66 46 66 
37f10     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
37f14     81 66 3A 66 
37f18     7C 66 36 66 
37f1c     76 66 30 66 
37f20     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
37f24     6B 66 88 72 
37f28     BF 37 E7 B7 
37f2c     75 83 8B 8E 
37f30     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
37f34     94 8E 96 8E 
37f38     DD 8E 9C 8E 
37f3c     E2 8E A2 8E 
37f40     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
37f44     EE 8E AE 8E 
37f48     38 8F B5 8E 
37f4c     3F 8F FD 8E 
37f50     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
37f54     A5 87 1E E3 
37f58     6D 5D FA 71 
37f5c     41 64 25 67 
37f60     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
37f64     D9 66 1A 67 
37f68     18 67 15 67 
37f6c     12 67 0F 67 
37f70     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
37f74     07 67 C0 66 
37f78     01 67 BC 66 
37f7c     B8 66 DE 64 
37f80     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
37f84     43 E5 1F 8B 
37f88     14 8A F1 90 
37f8c     1C 8F 63 8F 
37f90     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
37f94     29 8F 6E 8F 
37f98     72 8F 75 8F 
37f9c     34 8F BE 8F 
37fa0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
37fa4     84 8F 87 8F 
37fa8     CC 8F 56 90 
37fac     67 91 49 80 
37fb0     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
37fb4     46 77 A6 66 
37fb8     E8 66 B0 67 
37fbc     AD 67 ED 67 
37fc0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
37fc4     A2 67 E3 67 
37fc8     9D 67 9A 67 
37fcc     98 67 94 67 
37fd0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
37fd4     49 67 CD 67 
37fd8     28 65 5F 6E 
37fdc     82 67 3A 01 
37fe0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
37fe4     C2 91 A9 8F 
37fe8     EF 8F AE 8F 
37fec     F4 8F B5 8F 
37ff0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
37ff4     01 90 03 90 
37ff8     07 90 09 90 
37ffc     0C 90 53 90 
38000     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
38004     18 90 44 93 
38008     85 84 D6 9D 
3800c     87 1F 2F 75 
38010     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
38014     C4 68 F6 67 
38018     BE 68 F1 67 
3801c     76 68 2E 68 
38020     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
38024     27 68 24 68 
38028     64 68 1E 68 
3802c     5F 68 19 68 
38030     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
38034     DC 68 56 72 
38038     7E 36 C2 B8 
3803c     D7 84 73 90 
38040     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
38044     7B 90 7F 90 
38048     82 90 84 90 
3804c     CB 90 8B 90 
38050     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
38054     D7 90 96 90 
38058     20 91 59 90 
3805c     25 91 A2 90 
38060     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
38064     D0 89 40 EE 
38068     12 64 C4 71 
3806c     29 66 0C 69 
38070     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
38074     C0 68 02 69 
38078     FE 68 FB 68 
3807c     F9 68 F6 68 
38080     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
38084     EE 68 A8 68 
38088     2C 69 5F 68 
3808c     E2 68 81 66 
38090     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
38094     1E EB A6 8A 
38098     73 8B 5E 93 
3809c     7B 90 48 91 
380a0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
380a4     0D 91 11 91 
380a8     14 91 16 91 
380ac     5C 91 1C 91 
380b0     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
380b4     68 91 AF 91 
380b8     2A 91 B5 91 
380bc     75 91 1A 94 
380c0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
380c4     70 0E CB 6C 
380c8     5D 6E C4 67 
380cc     99 69 54 69 
380d0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
380d4     D2 69 49 69 
380d8     89 69 86 69 
380dc     40 69 C4 69 
380e0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
380e4     35 69 76 69 
380e8     58 67 EB 6D 
380ec     E9 6D 89 0F 
380f0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
380f4     33 94 94 91 
380f8     D9 91 56 91 
380fc     E0 91 9F 91 
38100     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
38104     EC 91 EE 91 
38108     F1 91 F4 91 
3810c     F7 91 3D 92 
38110     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
38114     46 92 21 94 
38118     11 89 A4 9D 
3811c     FD 0E 8F 6C 
38120     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
38124     28 6A E1 69 
38128     65 6A 1F 6A 
3812c     5F 6A 1A 6A 
38130     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
38134     54 6A 0F 6A 
38138     4F 6A 09 6A 
3813c     06 6A 03 6A 
38140     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
38144     23 68 69 77 
38148     3A 4D 38 CA 
3814c     38 86 4E 91 
38150     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
38154     64 92 24 92 
38158     6A 92 2A 92 
3815c     70 92 30 92 
38160     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
38164     7B 92 7E 92 
38168     C5 92 84 92 
3816c     CB 92 8A 92 
38170     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
38174     4D 8D F9 E2 
38178     97 59 FE 74 
3817c     DB 68 6D 6A 
38180     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
38184     A8 6A A5 6A 
38188     A3 6A 9F 6A 
3818c     9D 6A 9B 6A 
38190     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
38194     D6 6A 8F 6A 
38198     CF 6A 46 6A 
3819c     CA 6A E1 67 
381a0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
381a4     D3 F7 15 92 
381a8     90 8C BF 94 
381ac     A6 92 EB 92 
381b0     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
381b4     B1 92 F7 92 
381b8     FA 92 FD 92 
381bc     00 93 02 93 
381c0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
381c4     4F 93 52 93 
381c8     54 93 22 94 
381cc     5A 93 8F 88 
381d0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
381d4     1C 77 07 6C 
381d8     E8 69 7A 6B 
381dc     34 6B 75 6B 
381e0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
381e4     29 6B 26 6B 
381e8     24 6B 21 6B 
381ec     1D 6B 5E 6B 
381f0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
381f4     12 6B 52 6B 
381f8     34 69 34 6E 
381fc     BA 73 A4 24 
38200     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
38204     7A 94 B3 93 
38208     72 93 31 93 
3820c     78 93 7A 93 
38210     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
38214     83 93 86 93 
38218     89 93 D0 93 
3821c     D2 93 D5 93 
38220     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
38224     DD 93 40 96 
38228     30 8B 99 9C 
3822c     52 10 94 71 
38230     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
38234     46 6C 79 6B 
38238     40 6C B7 6B 
3823c     F7 6B B1 6B 
38240     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
38244     EC 6B A5 6B 
38248     A2 6B 9F 6B 
3824c     9D 6B 9A 6B 
38250     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
38254     C8 6A E4 76 
38258     20 4B F9 CE 
3825c     2E 8A 1A 92 
38260     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
38264     FB 93 BA 93 
38268     01 94 03 94 
3826c     4A 94 09 94 
38270     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
38274     55 94 14 94 
38278     9E 94 1A 94 
3827c     61 94 20 94 
38280     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
38284     3E 87 E5 CD 
38288     5F 50 6C 78 
3828c     B5 6A 04 6C 
38290     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
38294     83 6C 7F 6C 
38298     7C 6C 36 6C 
3829c     76 6C 74 6C 
382a0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
382a4     6B 6C 25 6C 
382a8     66 6C 1F 6C 
382ac     1D 6C 41 6A 
382b0     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
382b4     BA FA FC 94 
382b8     5B 8D 97 96 
382bc     3B 94 C5 94 
382c0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
382c4     89 94 8C 94 
382c8     8F 94 92 94 
382cc     94 94 DB 94 
382d0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
382d4     E4 94 E7 94 
382d8     2D 95 74 95 
382dc     C8 96 15 89 
382e0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
382e4     CB 75 31 6F 
382e8     7E 6B 10 6D 
382ec     C9 6C 0A 6D 
382f0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
382f4     BD 6C FF 6C 
382f8     FB 6C F9 6C 
382fc     B2 6C F3 6C 
38300     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
38304     A7 6C E8 6C 
38308     0D 6B 85 6F 
3830c     C7 74 10 28 
38310     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
38314     96 96 47 95 
38318     06 95 0A 95 
3831c     0C 95 0F 95 
38320     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
38324     17 95 5E 95 
38328     61 95 63 95 
3832c     22 95 AC 95 
38330     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
38334     72 95 17 98 
38338     59 8E 01 96 
3833c     CF FC 5A 68 
38340     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
38344     96 6D 50 6D 
38348     D5 6D 4A 6D 
3834c     8C 6D 89 6D 
38350     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
38354     80 6D 3A 6D 
38358     7A 6D 77 6D 
3835c     75 6D 71 6D 
38360     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
38364     18 6C BC 78 
38368     9A 4F 7E CF 
3836c     1F 89 F1 93 
38370     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
38374     D2 95 4E 95 
38378     D7 95 53 95 
3837c     DD 95 E0 95 
38380     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
38384     A5 95 EB 95 
38388     EE 95 F0 95 
3838c     37 96 B3 95 
38390     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
38394     1A 98 D5 8D 
38398     C5 9F CD 0F 
3839c     0F 71 F3 73 
383a0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
383a4     D9 6D 5E 6E 
383a8     D3 6D 58 6E 
383ac     12 6E 0F 6E 
383b0     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
383b4     49 6E BF 6D 
383b8     87 6E 76 6D 
383bc     81 6E 11 6B 
383c0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
383c4     3F 09 44 95 
383c8     E5 8D 3F 99 
383cc     D4 95 A2 96 
383d0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
383d4     23 96 69 96 
383d8     6B 96 6E 96 
383dc     71 96 74 96 
383e0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
383e4     BF 96 3C 96 
383e8     C6 96 C8 96 
383ec     A3 98 51 8D 
383f0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
383f4     CF 75 29 73 
383f8     90 6C EC 6E 
383fc     62 6E E7 6E 
38400     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
38404     9A 6E 98 6E 
38408     95 6E 91 6E 
3840c     8E 6E CF 6E 
38410     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
38414     40 6E C3 6E 
38418     E8 6C 45 6F 
3841c     A5 7B C9 35 
38420     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
38424     2D 98 23 97 
38428     E1 96 A0 96 
3842c     A4 96 EA 96 
38430     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
38434     AF 96 F4 96 
38438     F8 96 3E 97 
3843c     FD 96 43 97 
38440     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
38444     08 97 6B 99 
38448     D6 92 88 91 
3844c     D8 EE 84 66 
38450     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
38454     2E 6F E7 6E 
38458     6C 6F 24 6F 
3845c     21 6F 1F 6F 
38460     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
38464     17 6F 13 6F 
38468     54 6F 0E 6F 
3846c     0B 6F 4B 6F 
38470     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
38474     27 6D 1C 7B 
38478     19 59 9F DB 
3847c     66 8E BC 94 
38480     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
38484     67 97 26 97 
38488     6D 97 2B 97 
3848c     72 97 32 97 
38490     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
38494     C1 97 7F 97 
38498     C6 97 85 97 
3849c     CB 97 CE 97 
384a0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
384a4     EC 8A C4 C6 
384a8     68 4C F4 7D 
384ac     63 6E E8 6E 
384b0     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
384b4     ED 6F A7 6F 
384b8     E7 6F A0 6F 
384bc     E1 6F 9B 6F 
384c0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
384c4     D5 6F 8F 6F 
384c8     CE 6F 45 6F 
384cc     86 6F 68 6D 
384d0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
384d4     C0 13 AD A2 
384d8     A7 8E 79 99 
384dc     E6 97 E8 97 
384e0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
384e4     F1 97 F3 97 
384e8     F6 97 F9 97 
384ec     FB 97 FE 97 
384f0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
384f4     4A 98 0A 98 
384f8     93 98 0F 98 
384fc     7F 9B BF 8C 
38500     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
38504     91 7B 62 73 
38508     1A 6E B9 70 
3850c     EB 6F B3 70 
38510     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
38514     25 70 20 70 
38518     1E 70 1B 70 
3851c     18 70 15 70 
38520     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
38524     0D 70 09 70 
38528     07 70 03 70 
3852c     01 70 FD 6F 
38530     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
38534     F6 6F F2 6F 
38538     EF 6F EC 6F 
3853c     2C 70 E6 6F 
38540     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
38544     DD 6F 97 6F 
38548     D7 6F 84 6E 
3854c     8F 6F 3F 7D 
38550     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
38552     FF FF FF FF 
38556     FF FF       | atarist_spl file "atarist.spl" '512
38558     00 00 00 00 
3855c     00 00 00 00 
38560     00 00       | 	byte	$00[10]
38562     17 7F F2 7F 
38566     B2 7F 72 7F 
3856a     33 7F F4 7E 
3856e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
38572     36 7E F5 7D 
38576     E9 51 F2 0D 
3857a     8E 00 F3 FD 
3857e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
38582     57 FD 58 FD 
38586     5B FD 5C FD 
3858a     5C FD 60 7D 
3858e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
38592     D6 7C 98 7C 
38596     59 7C 1A 7C 
3859a     DC 7B 9E 7B 
3859e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
385a2     F3 05 00 FD 
385a6     41 FB EA FA 
385aa     D9 FA DB FA 
385ae     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
385b2     E4 FA 9B 36 
385b6     F8 7A C0 7A 
385ba     84 7A 45 7A 
385be     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
385c2     8E 79 51 79 
385c6     15 79 D7 78 
385ca     3C 1F EB FF 
385ce     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
385d2     6D F8 65 F8 
385d6     68 F8 6D F8 
385da     70 F8 74 F8 
385de     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
385e2     AB 60 79 60 
385e6     4B 60 1A 60 
385ea     E9 5F B9 5F 
385ee     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
385f2     FB 59 B2 0B 
385f6     92 FA 3A F7 
385fa     96 F6 79 F6 
385fe     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
38602     82 F6 86 F6 
38606     8C F6 DB 5D 
3860a     F1 5E C1 5E 
3860e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
38612     34 5E 04 5E 
38616     D6 5D A6 5D 
3861a     78 5D D4 3E 
3861e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
38622     27 F5 BA F4 
38626     AB F4 AD F4 
3862a     B2 F4 B8 F4 
3862e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
38632     26 5D 2B 5D 
38636     FC 5C CD 5C 
3863a     9F 5C 70 5C 
3863e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
38642     E5 5B B8 5B 
38646     DB 24 A7 FC 
3864a     D1 F4 4D F3 
3864e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
38652     04 F3 0B F3 
38656     11 F3 16 F3 
3865a     DE 18 98 5B 
3865e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
38662     4E 4A 29 48 
38666     A0 47 6A 47 
3866a     43 47 20 47 
3866e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
38672     E2 F6 98 F2 
38676     C5 F1 A3 F1 
3867a     A3 F1 A8 F1 
3867e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
38682     BF F1 00 3D 
38686     EF 46 CD 46 
3868a     AA 46 86 46 
3868e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
38692     1C 46 F9 45 
38696     D7 45 EE 43 
3869a     DE 02 E8 F3 
3869e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
386a2     61 F0 65 F0 
386a6     6D F0 74 F0 
386aa     7C F0 84 F0 
386ae     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
386b2     8E 45 6D 45 
386b6     49 45 27 45 
386ba     05 45 E1 44 
386be     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
386c2     F1 2F A9 FB 
386c6     8B F1 9B EF 
386ca     40 EF 36 EF 
386ce     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
386d2     4D EF 56 EF 
386d6     5E EF 7B 44 
386da     8C 44 69 44 
386de     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
386e2     03 44 E1 43 
386e6     C0 43 F5 37 
386ea     69 33 0F 11 
386ee     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
386f2     66 EE 37 EE 
386f6     38 EE 40 EE 
386fa     48 EE 51 EE 
386fe     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
38702     7D 32 6A 32 
38706     51 32 37 32 
3870a     1F 32 05 32 
3870e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
38712     B9 31 A1 31 
38716     F1 04 F4 F1 
3871a     50 EE A0 ED 
3871e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
38722     93 ED 9A ED 
38726     A4 ED AD ED 
3872a     F4 27 C1 31 
3872e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
38732     78 31 5F 31 
38736     46 31 2E 31 
3873a     15 31 FC 30 
3873e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
38742     C4 EF 4A ED 
38746     DC EC CB EC 
3874a     D2 EC DA EC 
3874e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
38752     F9 EC 64 2F 
38756     0A 31 F1 30 
3875a     D9 30 C0 30 
3875e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
38762     78 30 5F 30 
38766     46 30 38 23 
3876a     A6 F6 19 EE 
3876e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
38772     20 EC 28 EC 
38776     32 EC 3C EC 
3877a     47 EC 51 EC 
3877e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
38782     A3 22 93 22 
38786     7F 22 6E 22 
3878a     5D 22 4C 22 
3878e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
38792     77 09 76 F1 
38796     CC EC F0 EB 
3879a     CD EB CE EB 
3879e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
387a2     ED EB F5 EB 
387a6     3E F6 6B 22 
387aa     5F 22 4E 22 
387ae     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
387b2     1B 22 0B 22 
387b6     FA 21 E9 21 
387ba     D8 21 4D FF 
387be     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
387c2     92 EB 7B EB 
387c6     82 EB 8C EB 
387ca     97 EB A1 EB 
387ce     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
387d2     15 22 04 22 
387d6     F3 21 E3 21 
387da     D2 21 C0 21 
387de     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
387e2     8E 21 7D 21 
387e6     9A F8 A4 ED 
387ea     8E EB 2F EB 
387ee     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
387f2     37 EB 42 EB 
387f6     4C EB 57 EB 
387fa     B2 17 22 19 
387fe     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
38802     FD 18 EF 18 
38806     E3 18 D6 18 
3880a     CA 18 BD 18 
3880e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
38812     60 EC 35 EB 
38816     01 EB 01 EB 
3881a     0C EB 16 EB 
3881e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
38822     34 EB D0 18 
38826     00 19 F4 18 
3882a     E8 18 DA 18 
3882e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
38832     B6 18 A9 18 
38836     9D 18 91 05 
3883a     F0 EF CA EB 
3883e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
38842     E8 EA F2 EA 
38846     FE EA 07 EB 
3884a     12 EB C2 EF 
3884e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
38852     D9 18 CD 18 
38856     C0 18 B3 18 
3885a     A7 18 9B 18 
3885e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
38862     B8 FC 30 EE 
38866     61 EB DC EA 
3886a     CD EA D2 EA 
3886e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
38872     F3 EA FE EA 
38876     D2 09 D1 18 
3887a     C3 18 17 18 
3887e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
38882     66 11 52 11 
38886     49 11 41 11 
3888a     38 11 E0 F4 
3888e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
38892     C9 EA C5 EA 
38896     CF EA DB EA 
3889a     E6 EA EF EA 
3889e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
388a2     89 11 80 11 
388a6     78 11 6E 11 
388aa     67 11 5D 11 
388ae     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
388b2     43 11 32 0D 
388b6     9C F1 07 EC 
388ba     F8 EA CD EA 
388be     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
388c2     E4 EA ED EA 
388c6     F8 EA 02 EB 
388ca     55 11 91 11 
388ce     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
388d2     75 11 6E 11 
388d6     64 11 5E 11 
388da     54 11 4A 11 
388de     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
388e2     A8 EB F1 EA 
388e6     D9 EA DC EA 
388ea     E8 EA F1 EA 
388ee     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
388f2     A6 EB 9E 11 
388f6     A0 11 96 11 
388fa     8D 11 85 11 
388fe     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
38902     6A 11 CA 0D 
38906     36 0B 57 F8 
3890a     6C ED 57 EB 
3890e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
38912     F4 EA FF EA 
38916     09 EB 15 EB 
3891a     1E EB 1A FD 
3891e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
38922     ED 0A E8 0A 
38926     E2 0A DC 0A 
3892a     D6 0A D1 0A 
3892e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
38932     F8 F3 BC EC 
38936     57 EB 1E EB 
3893a     18 EB 24 EB 
3893e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
38942     42 EB 4D EB 
38946     08 09 20 0B 
3894a     1A 0B 14 0B 
3894e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
38952     04 0B FE 0A 
38956     F9 0A F2 0A 
3895a     84 08 3A F1 
3895e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
38962     42 EB 42 EB 
38966     4E EB 57 EB 
3896a     62 EB 6B EB 
3896e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
38972     48 0B 43 0B 
38976     3C 0B 36 0B 
3897a     31 0B 2C 0B 
3897e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
38982     1B 0B 5C 00 
38986     6A EF 1B EC 
3898a     81 EB 6A EB 
3898e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
38992     85 EB 8E EB 
38996     99 EB A3 EB 
3899a     DD 05 E5 05 
3899e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
389a2     DB 05 D8 05 
389a6     D5 05 D1 05 
389aa     D0 05 CB 05 
389ae     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
389b2     0C EC BB EB 
389b6     B3 EB BB EB 
389ba     C5 EB D0 EB 
389be     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
389c2     E4 F7 2C 06 
389c6     28 06 24 06 
389ca     22 06 1F 06 
389ce     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
389d2     16 06 14 06 
389d6     0F 06 D0 F3 
389da     65 ED 2D EC 
389de     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
389e2     01 EC 0A EC 
389e6     14 EC 1E EC 
389ea     29 EC FB 03 
389ee     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
389f2     63 06 60 06 
389f6     5E 06 59 06 
389fa     58 06 54 06 
389fe     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
38a02     69 F1 21 ED 
38a06     55 EC 33 EC 
38a0a     36 EC 40 EC 
38a0e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
38a12     5C EC 68 EC 
38a16     92 02 D9 02 
38a1a     D7 02 D7 02 
38a1e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
38a22     D1 02 D1 02 
38a26     CE 02 CD 02 
38a2a     5D FC 80 EF 
38a2e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
38a32     83 EC 8A EC 
38a36     93 EC 9C EC 
38a3a     A5 EC B1 EC 
38a3e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
38a42     2B 03 2A 03 
38a46     29 03 26 03 
38a4a     25 03 24 03 
38a4e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
38a52     1F 03 70 F7 
38a56     D0 EE 27 ED 
38a5a     DB EC D4 EC 
38a5e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
38a62     F0 EC FA EC 
38a66     02 ED F9 F4 
38a6a     7B 03 7C 03 
38a6e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
38a72     75 03 73 03 
38a76     72 03 70 03 
38a7a     6D 03 6C 03 
38a7e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
38a82     54 ED 22 ED 
38a86     22 ED 2C ED 
38a8a     35 ED 3F ED 
38a8e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
38a92     14 01 C3 03 
38a96     C1 03 C0 03 
38a9a     5F 01 A5 00 
38a9e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
38aa2     7B 00 7C 00 
38aa6     20 00 85 F1 
38aaa     2A EE 89 ED 
38aae     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
38ab2     80 ED 87 ED 
38ab6     90 ED 9A ED 
38aba     A3 ED 73 00 
38abe     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
38ac2     D0 00 D0 00 
38ac6     D0 00 D0 00 
38aca     D0 00 CF 00 
38ace     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
38ad2     80 F0 3D EE 
38ad6     D5 ED C7 ED 
38ada     CD ED D6 ED 
38ade     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
38ae2     F2 ED FA ED 
38ae6     1D 01 29 01 
38aea     27 01 27 01 
38aee     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
38af2     25 01 26 01 
38af6     26 01 23 01 
38afa     D0 F7 EC EF 
38afe     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
38b02     1C EE 24 EE 
38b06     2D EE 37 EE 
38b0a     40 EE 47 EE 
38b0e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
38b12     7D 01 7B 01 
38b16     7A 01 7A 01 
38b1a     79 01 78 01 
38b1e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
38b22     84 FE DE F3 
38b26     6C EF 93 EE 
38b2a     72 EE 72 EE 
38b2e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
38b32     8B EE 95 EE 
38b36     9E EE 15 FC 
38b3a     67 FE 67 FE 
38b3e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
38b42     6B FE 6B FE 
38b46     6D FE 6D FE 
38b4a     6D FE 6F FE 
38b4e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
38b52     DF EE CC EE 
38b56     CF EE D9 EE 
38b5a     E1 EE EA EE 
38b5e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
38b62     5A FE C4 FE 
38b66     C3 FE C5 FE 
38b6a     C6 FE C6 FE 
38b6e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
38b72     C8 FE C7 FE 
38b76     DA FB 85 F1 
38b7a     8D EF 31 EF 
38b7e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
38b82     34 EF 3E EF 
38b86     46 EF 4F EF 
38b8a     57 EF 0D FF 
38b8e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
38b92     1F FF 1F FF 
38b96     21 FF 21 FF 
38b9a     21 FF 21 FF 
38b9e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
38ba2     15 F1 BE EF 
38ba6     84 EF 7E EF 
38baa     88 EF 8F EF 
38bae     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
38bb2     A9 EF 06 F2 
38bb6     A6 FC AB FC 
38bba     AD FC AE FC 
38bbe     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
38bc2     B2 FC B4 FC 
38bc6     B6 FC B7 FC 
38bca     8B F4 BD F0 
38bce     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
38bd2     E4 EF EE EF 
38bd6     F6 EF FD EF 
38bda     04 F0 0E F0 
38bde     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
38be2     0B FD 0D FD 
38be6     0F FD 11 FD 
38bea     11 FD 13 FD 
38bee     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
38bf2     17 FD 64 F3 
38bf6     CD F0 52 F0 
38bfa     41 F0 45 F0 
38bfe     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
38c02     5B F0 64 F0 
38c06     6D F0 FB FC 
38c0a     65 FD 68 FD 
38c0e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
38c12     6C FD 6D FD 
38c16     6F FD 70 FD 
38c1a     72 FD B3 FB 
38c1e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
38c22     A4 F0 99 F0 
38c26     A0 F0 A8 F0 
38c2a     AE F0 B9 F0 
38c2e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
38c32     CB FB DD FB 
38c36     DE FB E0 FB 
38c3a     E3 FB E3 FB 
38c3e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
38c42     E9 FB EC FB 
38c46     62 F7 27 F2 
38c4a     2A F1 FF F0 
38c4e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
38c52     0C F1 13 F1 
38c56     1B F1 23 F1 
38c5a     33 F2 3C FC 
38c5e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
38c62     42 FC 45 FC 
38c66     47 FC 48 FC 
38c6a     4A FC 4C FC 
38c6e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
38c72     20 F2 77 F1 
38c76     5C F1 5F F1 
38c7a     64 F1 6C F1 
38c7e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
38c82     83 F1 DC F8 
38c86     9A FC 9A FC 
38c8a     9B FC 9E FC 
38c8e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
38c92     A3 FC A4 FC 
38c96     A6 FC A9 FC 
38c9a     90 F4 33 F2 
38c9e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
38ca2     BA F1 BF F1 
38ca6     C7 F1 CE F1 
38caa     D6 F1 DC F1 
38cae     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
38cb2     F3 FC F5 FC 
38cb6     FE FB 79 FB 
38cba     62 FB 5F FB 
38cbe     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
38cc2     6F FA AF F3 
38cc6     53 F2 12 F2 
38cca     0F F2 15 F2 
38cce     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
38cd2     2A F2 32 F2 
38cd6     38 F2 9A FB 
38cda     AF FB B1 FB 
38cde     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
38ce2     B7 FB B8 FB 
38ce6     BA FB BC FB 
38cea     C1 FB 3B F8 
38cee     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
38cf2     6E F2 6C F2 
38cf6     74 F2 7A F2 
38cfa     81 F2 87 F2 
38cfe     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
38d02     06 FC 09 FC 
38d06     0C FC 0E FC 
38d0a     0F FC 12 FC 
38d0e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
38d12     17 FC 1A FC 
38d16     B2 F6 7B F3 
38d1a     DD F2 C5 F2 
38d1e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
38d22     D4 F2 DB F2 
38d26     E0 F2 E8 F2 
38d2a     28 F8 60 FC 
38d2e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
38d32     64 FC 66 FC 
38d36     68 FC 6A FC 
38d3a     6D FC 52 FC 
38d3e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
38d42     78 F3 24 F3 
38d46     1A F3 1E F3 
38d4a     24 F3 2A F3 
38d4e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
38d52     3D F3 80 FA 
38d56     0C FB 0F FB 
38d5a     10 FB 14 FB 
38d5e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
38d62     1B FB 1D FB 
38d66     1F FB 92 FA 
38d6a     DE F4 AE F3 
38d6e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
38d72     79 F3 7E F3 
38d76     84 F3 8C F3 
38d7a     92 F3 97 F3 
38d7e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
38d82     67 FB 69 FB 
38d86     6B FB 6F FB 
38d8a     71 FB 72 FB 
38d8e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
38d92     E3 F8 BA F4 
38d96     EE F3 CC F3 
38d9a     CA F3 CF F3 
38d9e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
38da2     E2 F3 E8 F3 
38da6     ED F3 B7 FB 
38daa     BC FB BE FB 
38dae     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
38db2     C4 FB C6 FB 
38db6     C8 FB C9 FB 
38dba     CC FB 8F F7 
38dbe     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
38dc2     1E F4 1E F4 
38dc6     24 F4 2A F4 
38dca     30 F4 38 F4 
38dce     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
38dd2     AD FA B1 FA 
38dd6     B4 FA B6 FA 
38dda     BA FA BB FA 
38dde     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
38de2     C2 FA C6 FA 
38de6     55 F6 C6 F4 
38dea     7D F4 72 F4 
38dee     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
38df2     83 F4 89 F4 
38df6     8F F4 94 F4 
38dfa     66 FA 03 FB 
38dfe     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
38e02     0A FB 0E FB 
38e06     10 FB 11 FB 
38e0a     16 FB 18 FB 
38e0e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
38e12     F9 F4 CA F4 
38e16     C5 F4 CB F4 
38e1a     D1 F4 D7 F4 
38e1e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
38e22     E8 F4 3F FB 
38e26     56 FB 58 FB 
38e2a     5A FB 5E FB 
38e2e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
38e32     64 FB 64 FB 
38e36     69 FB 99 F9 
38e3a     E9 F5 33 F5 
38e3e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
38e42     1D F5 22 F5 
38e46     27 F5 2E F5 
38e4a     32 F5 37 F5 
38e4e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
38e52     BC FA BC FA 
38e56     C1 FA C2 FA 
38e5a     C4 FA C8 FA 
38e5e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
38e62     F9 F7 DB F5 
38e66     78 F5 69 F5 
38e6a     6A F5 70 F5 
38e6e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
38e72     7F F5 85 F5 
38e76     6E F7 06 FB 
38e7a     0A FB 0B FB 
38e7e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
38e82     14 FB 15 FB 
38e86     18 FB 1B FB 
38e8a     1D FB 70 F7 
38e8e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
38e92     B6 F5 BB F5 
38e96     C0 F5 C6 F5 
38e9a     CA F5 CF F5 
38e9e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
38ea2     54 FB 56 FB 
38ea6     5A FB 5B FB 
38eaa     5E FB 5F FB 
38eae     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
38eb2     67 FB 52 FB 
38eb6     29 F7 33 F6 
38eba     06 F6 02 F6 
38ebe     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
38ec2     10 F6 16 F6 
38ec6     1A F6 1F F6 
38eca     81 FB 9F FB 
38ece     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
38ed2     51 FB F2 FA 
38ed6     E3 FA E3 FA 
38eda     E5 FA E9 FA 
38ede     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
38ee2     64 F6 4D F6 
38ee6     4D F6 53 F6 
38eea     57 F6 5C F6 
38eee     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
38ef2     6A F6 19 FB 
38ef6     1E FB 22 FB 
38efa     23 FB 24 FB 
38efe     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
38f02     2C FB 2E FB 
38f06     32 FB F0 F8 
38f0a     01 F7 A5 F6 
38f0e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
38f12     9F F6 A3 F6 
38f16     A6 F6 AC F6 
38f1a     B0 F6 EB F7 
38f1e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
38f22     68 FB 6C FB 
38f26     6E FB 71 FB 
38f2a     72 FB 74 FB 
38f2e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
38f32     71 F8 21 F7 
38f36     E5 F6 DD F6 
38f3a     E1 F6 E6 F6 
38f3e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
38f42     F5 F6 F7 F6 
38f46     F7 FA AB FB 
38f4a     AD FB AF FB 
38f4e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
38f52     B6 FB B9 FB 
38f56     BB FB BC FB 
38f5a     21 FB 07 F8 
38f5e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
38f62     22 F7 26 F7 
38f66     2B F7 2E F7 
38f6a     34 F7 38 F7 
38f6e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
38f72     13 FB 16 FB 
38f76     17 FB 1B FB 
38f7a     1E FB 20 FB 
38f7e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
38f82     26 FB 77 FA 
38f86     F3 F7 7C F7 
38f8a     67 F7 6A F7 
38f8e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
38f92     74 F7 7A F7 
38f96     7E F7 82 F7 
38f9a     53 FB 5A FB 
38f9e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
38fa2     5F FB 63 FB 
38fa6     65 FB 67 FB 
38faa     69 FB 6A FB 
38fae     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
38fb2     B5 F7 A9 F7 
38fb6     AD F7 B0 F7 
38fba     B5 F7 B8 F7 
38fbe     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
38fc2     6E F8 99 FB 
38fc6     9C FB 9D FB 
38fca     9F FB A4 FB 
38fce     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
38fd2     A9 FB AB FB 
38fd6     AD FB 46 F9 
38fda     26 F8 F0 F7 
38fde     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
38fe2     F4 F7 F8 F7 
38fe6     FB F7 FF F7 
38fea     03 F8 65 FA 
38fee     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
38ff2     2B FB 2F FB 
38ff6     30 FB 32 FB 
38ffa     34 FB 38 FB 
38ffe     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
39002     E9 F8 4A F8 
39006     2E F8 2C F8 
3900a     2F F8 36 F8 
3900e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
39012     41 F8 44 F8 
39016     4A FB 67 FB 
3901a     68 FB 6B FB 
3901e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
39022     73 FB 74 FB 
39026     78 FB 7A FB 
3902a     14 FB E7 F8 
3902e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
39032     6D F8 70 F8 
39036     73 F8 78 F8 
3903a     7C F8 80 F8 
3903e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
39042     A6 FB A7 FB 
39046     A9 FB AC FB 
3904a     AF FB B1 FB 
3904e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
39052     B7 FB 73 FA 
39056     F8 F8 B4 F8 
3905a     A9 F8 AB F8 
3905e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
39062     B4 F8 B8 F8 
39066     BB F8 FA F8 
3906a     64 FB 65 FB 
3906e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
39072     6D FB 6F FB 
39076     70 FB 74 FB 
3907a     77 FB 77 FB 
3907e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
39082     E9 F8 E4 F8 
39086     E8 F8 EB F8 
3908a     EE F8 F2 F8 
3908e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
39092     B5 FA 9F FB 
39096     A1 FB A4 FB 
3909a     A5 FB A9 FB 
3909e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
390a2     AE FB B1 FB 
390a6     B2 FB C7 F9 
390aa     39 F9 22 F9 
390ae     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
390b2     26 F9 2A F9 
390b6     2E F9 32 F9 
390ba     33 F9 BA FB 
390be     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
390c2     DE FB E1 FB 
390c6     E2 FB E4 FB 
390ca     E5 FB E7 FB 
390ce     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
390d2     C5 F9 67 F9 
390d6     57 F9 56 F9 
390da     5B F9 5F F9 
390de     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
390e2     68 F9 6C F9 
390e6     0B FC 11 FC 
390ea     14 FC 15 FC 
390ee     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
390f2     B5 FB B5 FB 
390f6     B6 FB B8 FB 
390fa     E9 FA C8 F9 
390fe     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
39102     90 F9 94 F9 
39106     95 F9 99 F9 
3910a     9D F9 9F F9 
3910e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
39112     DE FB DF FB 
39116     E2 FB E4 FB 
3911a     E6 FB E8 FB 
3911e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
39122     EF FB AC FA 
39126     E9 F9 C7 F9 
3912a     C3 F9 C8 F9 
3912e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
39132     D0 F9 D4 F9 
39136     D6 F9 0E FB 
3913a     11 FC 13 FC 
3913e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
39142     19 FC 1B FC 
39146     1D FC 1E FC 
3914a     21 FC 22 FC 
3914e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
39152     F7 F9 F7 F9 
39156     FB F9 FE F9 
3915a     00 FA 03 FA 
3915e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
39162     1B FC 45 FC 
39166     46 FC 48 FC 
3916a     4A FC 4B FC 
3916e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
39172     52 FC 54 FC 
39176     F3 FB 82 FA 
3917a     35 FA 28 FA 
3917e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
39182     31 FA 32 FA 
39186     37 FA 37 FA 
3918a     3C FA 00 FC 
3918e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
39192     09 FC 0B FC 
39196     0F FC 12 FC 
3919a     12 FC 15 FC 
3919e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
391a2     8D FA 60 FA 
391a6     5B FA 5C FA 
391aa     60 FA 61 FA 
391ae     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
391b2     6C FA 6D FA 
391b6     37 FC 3A FC 
391ba     3B FC 3D FC 
391be     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
391c2     43 FC 44 FC 
391c6     45 FC 47 FC 
391ca     51 FB AB FA 
391ce     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
391d2     8E FA 91 FA 
391d6     93 FA 95 FA 
391da     98 FA 9B FA 
391de     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
391e2     68 FC 6A FC 
391e6     6C FC 6E FC 
391ea     70 FC 72 FC 
391ee     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
391f2     76 FC 3B FB 
391f6     D0 FA BB FA 
391fa     B9 FA BD FA 
391fe     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
39202     C4 FA C6 FA 
39206     CA FA 13 FC 
3920a     3A FC 3A FC 
3920e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
39212     41 FC 43 FC 
39216     44 FC 47 FC 
3921a     48 FC 3C FC 
3921e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
39222     E6 FA E8 FA 
39226     EB FA EE FA 
3922a     F0 FA F2 FA 
3922e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
39232     61 FC 66 FC 
39236     68 FC 6B FC 
3923a     6C FC 6E FC 
3923e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
39242     73 FC 75 FC 
39246     13 FC 3F FB 
3924a     17 FB 12 FB 
3924e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
39252     1A FB 1D FB 
39256     1F FB 20 FB 
3925a     23 FB 92 FC 
3925e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
39262     96 FC 97 FC 
39266     9A FC 9C FC 
3926a     9E FC 9F FC 
3926e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
39272     5A FB 41 FB 
39276     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3927a     73 32 00 04 
3927e     00 00 10 00 
39282     00 00 00 00 
39286     00 00 00 00 | atari2 file "atari2.s2"
3928a     43 87 43 87 
3928e     43 87 44 87 
39292     43 87 44 87 
39296     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3929a     43 87 43 87 
3929e     43 87 44 87 
392a2     43 87 43 87 
392a6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
392aa     44 87 43 87 
392ae     44 87 43 87 
392b2     43 87 43 87 
392b6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
392ba     43 87 43 87 
392be     44 87 43 87 
392c2     44 87 44 87 
392c6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
392ca     43 87 43 87 
392ce     44 87 43 87 
392d2     43 87 42 87 
392d6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
392da     43 87 43 87 
392de     43 87 43 87 
392e2     44 87 43 87 
392e6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
392ea     44 87 44 87 
392ee     43 87 44 87 
392f2     43 87 44 87 
392f6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
392fa     44 87 43 87 
392fe     44 87 44 87 
39302     43 87 43 87 
39306     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3930a     43 87 44 87 
3930e     44 87 43 87 
39312     43 87 44 87 
39316     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3931a     43 87 43 87 
3931e     43 87 43 87 
39322     43 87 43 87 
39326     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3932a     42 87 43 87 
3932e     44 87 42 87 
39332     43 87 43 87 
39336     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3933a     43 87 44 87 
3933e     44 87 43 87 
39342     43 87 43 87 
39346     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3934a     43 87 5C 87 
3934e     EE 86 AC 87 
39352     4C 7C A3 78 
39356     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3935a     BC 78 BB 78 
3935e     BD 78 BC 78 
39362     BB 78 BD 78 
39366     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3936a     BB 78 BB 78 
3936e     BC 78 BC 78 
39372     BC 78 BB 78 
39376     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3937a     BC 78 BC 78 
3937e     BC 78 BC 78 
39382     BC 78 BC 78 
39386     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3938a     BB 78 BC 78 
3938e     A0 78 4C 7C 
39392     11 7A 29 89 
39396     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3939a     44 87 43 87 
3939e     44 87 43 87 
393a2     43 87 42 87 
393a6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
393aa     43 87 43 87 
393ae     44 87 ED 85 
393b2     71 85 52 79 
393b6     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
393ba     BC 78 BC 78 
393be     BC 78 BC 78 
393c2     BC 78 BC 78 
393c6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
393ca     BC 78 BC 78 
393ce     BC 78 A0 78 
393d2     CF 7A B9 81 
393d6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
393da     44 87 43 87 
393de     43 87 44 87 
393e2     43 87 44 87 
393e6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
393ea     43 87 43 87 
393ee     43 87 43 87 
393f2     44 87 43 87 
393f6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
393fa     43 87 43 87 
393fe     44 87 43 87 
39402     44 87 43 87 
39406     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3940a     44 87 43 87 
3940e     43 87 43 87 
39412     5A 87 39 81 
39416     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3941a     A5 78 BC 78 
3941e     BB 78 BC 78 
39422     BB 78 BC 78 
39426     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3942a     BC 78 BC 78 
3942e     BC 78 BC 78 
39432     BC 78 8F 79 
39436     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3943a     09 85 47 87 
3943e     43 87 43 87 
39442     42 87 42 87 
39446     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3944a     43 87 43 87 
3944e     43 87 43 87 
39452     43 87 44 87 
39456     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3945a     43 87 43 87 
3945e     44 87 43 87 
39462     42 87 43 87 
39466     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3946a     44 87 43 87 
3946e     43 87 43 87 
39472     44 87 44 87 
39476     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3947a     94 78 55 7A 
3947e     B9 78 BC 78 
39482     BC 78 BC 78 
39486     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3948a     BC 78 BB 78 
3948e     BC 78 BC 78 
39492     BC 78 BC 78 
39496     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3949a     BB 78 BC 78 
3949e     BC 78 BC 78 
394a2     BB 78 BC 78 
394a6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
394aa     BC 78 BC 78 
394ae     BD 78 BC 78 
394b2     BC 78 BB 78 
394b6     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
394ba     94 78 B3 84 
394be     36 84 4A 87 
394c2     43 87 43 87 
394c6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
394ca     43 87 44 87 
394ce     43 87 43 87 
394d2     43 87 43 87 
394d6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
394da     43 87 44 87 
394de     43 87 44 87 
394e2     43 87 43 87 
394e6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
394ea     43 87 43 87 
394ee     43 87 45 87 
394f2     43 87 43 87 
394f6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
394fa     43 87 44 87 
394fe     44 87 44 87 
39502     43 87 43 87 
39506     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3950a     43 87 42 87 
3950e     43 87 43 87 
39512     44 87 43 87 
39516     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3951a     54 87 3C 82 
3951e     36 83 52 79 
39522     C6 78 BC 78 
39526     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3952a     BB 78 BB 78 
3952e     BC 78 BC 78 
39532     BC 78 BC 78 
39536     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3953a     BD 78 ED 78 
3953e     1B 79 F4 83 
39542     4D 83 4E 87 
39546     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3954a     44 87 43 87 
3954e     42 87 44 87 
39552     43 87 42 87 
39556     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3955a     43 87 54 87 
3955e     26 82 B3 84 
39562     D6 77 BB 78 
39566     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3956a     BC 78 BB 78 
3956e     BB 78 BB 78 
39572     BB 78 BB 78 
39576     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3957a     BC 78 BC 78 
3957e     26 79 18 75 
39582     36 83 1F 84 
39586     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3958a     43 87 43 87 
3958e     43 87 43 87 
39592     43 87 44 87 
39596     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3959a     43 87 44 87 
3959e     44 87 43 87 
395a2     43 87 43 87 
395a6     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
395aa     43 87 43 87 
395ae     43 87 43 87 
395b2     44 87 44 87 
395b6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
395ba     44 87 43 87 
395be     43 87 43 87 
395c2     43 87 44 87 
395c6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
395ca     44 87 44 87 
395ce     44 87 43 87 
395d2     44 87 43 87 
395d6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
395da     43 87 43 87 
395de     43 87 44 87 
395e2     44 87 43 87 
395e6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
395ea     43 87 43 87 
395ee     43 87 43 87 
395f2     43 87 44 87 
395f6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
395fa     43 87 44 87 
395fe     43 87 44 87 
39602     19 87 7D 86 
39606     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3960a     B1 78 BC 78 
3960e     BC 78 BC 78 
39612     BC 78 BC 78 
39616     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3961a     BC 78 BC 78 
3961e     BD 78 BC 78 
39622     B7 78 3B 7B 
39626     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3962a     96 86 44 87 
3962e     43 87 43 87 
39632     43 87 43 87 
39636     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3963a     44 87 44 87 
3963e     43 87 44 87 
39642     43 87 44 87 
39646     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3964a     43 87 44 87 
3964e     43 87 44 87 
39652     43 87 44 87 
39656     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3965a     43 87 44 87 
3965e     43 87 43 87 
39662     44 87 43 87 
39666     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3966a     44 87 44 87 
3966e     43 87 43 87 
39672     43 87 44 87 
39676     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3967a     43 87 43 87 
3967e     43 87 43 87 
39682     44 87 44 87 
39686     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3968a     36 83 CF 7A 
3968e     AB 78 BB 78 
39692     BC 78 BC 78 
39696     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3969a     BB 78 BC 78 
3969e     BC 78 BC 78 
396a2     BC 78 BC 78 
396a6     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
396aa     BC 78 BC 78 
396ae     BC 78 BB 78 
396b2     BC 78 BC 78 
396b6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
396ba     BB 78 BC 78 
396be     BB 78 BC 78 
396c2     BC 78 BD 78 
396c6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
396ca     BC 78 BC 78 
396ce     BC 78 BC 78 
396d2     BC 78 BD 78 
396d6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
396da     BC 78 BB 78 
396de     BC 78 BB 78 
396e2     BB 78 BC 78 
396e6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
396ea     BC 78 BC 78 
396ee     BC 78 BC 78 
396f2     BC 78 BB 78 
396f6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
396fa     BC 78 BC 78 
396fe     BC 78 BD 78 
39702     BB 78 BC 78 
39706     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3970a     BC 78 BC 78 
3970e     BC 78 BB 78 
39712     BC 78 BB 78 
39716     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3971a     BB 78 BC 78 
3971e     BC 78 BC 78 
39722     BC 78 BB 78 
39726     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3972a     BC 78 BC 78 
3972e     BC 78 BB 78 
39732     BC 78 BB 78 
39736     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3973a     BC 78 BC 78 
3973e     BC 78 BC 78 
39742     BB 78 BC 78 
39746     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3974a     BC 78 9F 78 
3974e     52 79 B3 84 
39752     2F 86 60 87 
39756     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3975a     44 87 43 87 
3975e     43 87 43 87 
39762     43 87 43 87 
39766     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3976a     43 87 43 87 
3976e     43 87 44 87 
39772     43 87 43 87 
39776     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3977a     43 87 43 87 
3977e     43 87 43 87 
39782     43 87 44 87 
39786     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3978a     44 87 44 87 
3978e     5E 87 BC 80 
39792     FB 80 94 78 
39796     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3979a     BD 78 BC 78 
3979e     BB 78 BC 78 
397a2     BB 78 BB 78 
397a6     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
397aa     BC 78 BB 78 
397ae     BB 78 6B 79 
397b2     D6 77 AC 87 
397b6     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
397ba     43 87 44 87 
397be     43 87 43 87 
397c2     44 87 43 87 
397c6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
397ca     43 87 44 87 
397ce     43 87 5C 87 
397d2     E7 80 00 80 
397d6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
397da     BC 78 BD 78 
397de     BC 78 BC 78 
397e2     BC 78 BB 78 
397e6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
397ea     BC 78 BC 78 
397ee     BB 78 BC 78 
397f2     BB 78 BC 78 
397f6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
397fa     BB 78 BC 78 
397fe     BC 78 BC 78 
39802     BC 78 BC 78 
39806     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3980a     BC 78 BC 78 
3980e     BC 78 BC 78 
39812     A0 78 8D 7B 
39816     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3981a     60 87 43 87 
3981e     44 87 44 87 
39822     43 87 43 87 
39826     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3982a     44 87 43 87 
3982e     43 87 43 87 
39832     44 87 73 86 
39836     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3983a     51 7B B6 78 
3983e     BC 78 BD 78 
39842     BC 78 BC 78 
39846     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3984a     BB 78 BC 78 
3984e     BD 78 BB 78 
39852     BC 78 BB 78 
39856     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3985a     BC 78 BC 78 
3985e     BC 78 BC 78 
39862     BB 78 BC 78 
39866     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3986a     BC 78 BB 78 
3986e     BB 78 BC 78 
39872     BC 78 BB 78 
39876     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3987a     22 8C AF 84 
3987e     48 87 43 87 
39882     44 87 43 87 
39886     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3988a     43 87 42 87 
3988e     43 87 43 87 
39892     44 87 43 87 
39896     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3989a     43 87 43 87 
3989e     44 87 44 87 
398a2     43 87 43 87 
398a6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
398aa     43 87 43 87 
398ae     43 87 43 87 
398b2     44 87 43 87 
398b6     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
398ba     9F 8B D6 77 
398be     16 7C B3 78 
398c2     BC 78 BB 78 
398c6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
398ca     BB 78 BC 78 
398ce     BB 78 BC 78 
398d2     BC 78 BC 78 
398d6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
398da     BC 78 BB 78 
398de     BB 78 BC 78 
398e2     BB 78 BC 78 
398e6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
398ea     BB 78 BB 78 
398ee     BC 78 BC 78 
398f2     BC 78 BB 78 
398f6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
398fa     BC 78 BC 78 
398fe     BC 78 BD 78 
39902     BB 78 BC 78 
39906     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3990a     BC 78 BC 78 
3990e     BC 78 BB 78 
39912     BC 78 BC 78 
39916     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3991a     A8 78 54 7E 
3991e     F4 83 17 82 
39922     50 87 43 87 
39926     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3992a     44 87 43 87 
3992e     44 87 43 87 
39932     43 87 44 87 
39936     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3993a     43 87 28 87 
3993e     20 85 CF 7A 
39942     70 7D AD 78 
39946     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3994a     BB 78 BC 78 
3994e     BC 78 BC 78 
39952     BB 78 BB 78 
39956     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3995a     BB 78 B2 78 
3995e     9A 7C CF 7A 
39962     4A 87 0D 87 
39966     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3996a     43 87 44 87 
3996e     43 87 44 87 
39972     43 87 43 87 
39976     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3997a     44 87 43 87 
3997e     28 87 51 85 
39982     11 7A 1E 7D 
39986     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3998a     BC 78 BB 78 
3998e     BC 78 BC 78 
39992     BC 78 BC 78 
39996     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3999a     BB 78 BC 78 
3999e     BB 78 BC 78 
399a2     BC 78 BC 78 
399a6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
399aa     BB 78 BC 78 
399ae     BC 78 BC 78 
399b2     BD 78 BB 78 
399b6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
399ba     BC 78 BB 78 
399be     BC 78 BC 78 
399c2     BC 78 BB 78 
399c6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
399ca     BC 78 BC 78 
399ce     BC 78 BC 78 
399d2     BB 78 BC 78 
399d6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
399da     BC 78 BD 78 
399de     BC 78 BC 78 
399e2     BC 78 BB 78 
399e6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
399ea     BC 78 BB 78 
399ee     BB 78 BC 78 
399f2     BC 78 BB 78 
399f6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
399fa     BB 78 BB 78 
399fe     BB 78 BC 78 
39a02     B6 78 48 7D 
39a06     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
39a0a     56 87 43 87 
39a0e     42 87 44 87 
39a12     44 87 43 87 
39a16     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39a1a     43 87 44 87 
39a1e     43 87 44 87 
39a22     4C 87 7E 83 
39a26     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
39a2a     F7 78 BC 78 
39a2e     BC 78 BB 78 
39a32     BB 78 BC 78 
39a36     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39a3a     BC 78 BB 78 
39a3e     BC 78 BC 78 
39a42     BB 78 BC 78 
39a46     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39a4a     BB 78 BC 78 
39a4e     BC 78 BC 78 
39a52     BC 78 BB 78 
39a56     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a5a     BC 78 BC 78 
39a5e     BC 78 BC 78 
39a62     BC 78 BB 78 
39a66     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a6a     BC 78 BB 78 
39a6e     BB 78 BC 78 
39a72     BC 78 BB 78 
39a76     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a7a     BC 78 BC 78 
39a7e     BB 78 BC 78 
39a82     BC 78 BC 78 
39a86     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
39a8a     73 32 00 04 
39a8e     00 00 10 00 
39a92     00 00 00 00 
39a96     00 00 00 00 | atari12 file "atari12.s2"
39a9a     00 6D 00 6D 
39a9e     00 6D 00 6D 
39aa2     00 6D 00 6D 
39aa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39aaa     00 6D 00 6D 
39aae     00 6D 00 6D 
39ab2     00 6D 00 6D 
39ab6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39aba     00 6D 00 6D 
39abe     00 6D 00 6D 
39ac2     00 6D 00 6D 
39ac6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39aca     00 6D 00 6D 
39ace     00 6D 00 6D 
39ad2     00 6D 00 6D 
39ad6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ada     00 6D 00 6D 
39ade     00 6D 00 6D 
39ae2     00 6D 00 6D 
39ae6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
39aea     00 6C 00 6C 
39aee     00 6C 00 6C 
39af2     00 6C 00 6C 
39af6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39afa     00 6C 00 6C 
39afe     00 6C 00 6C 
39b02     00 6C 00 6C 
39b06     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b0a     00 6C 00 6C 
39b0e     00 6C 00 6C 
39b12     00 6C 00 6C 
39b16     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b1a     00 6C 00 6C 
39b1e     00 6C 00 6C 
39b22     00 6C 00 6C 
39b26     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b2a     00 6C 00 6C 
39b2e     00 6C 00 6C 
39b32     00 6C 00 6C 
39b36     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b3a     00 6C 00 6C 
39b3e     00 6C 00 6C 
39b42     00 6C 00 6C 
39b46     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b4a     00 6C 00 6C 
39b4e     00 6C 00 6C 
39b52     00 6C 00 6C 
39b56     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b5a     00 6C 00 6C 
39b5e     00 6C 00 6C 
39b62     00 6C 00 6C 
39b66     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b6a     00 6C 00 6C 
39b6e     00 6C 00 6C 
39b72     00 6C 00 6C 
39b76     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b7a     00 6C 00 6C 
39b7e     00 6C 00 6C 
39b82     00 6C 00 6C 
39b86     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b8a     00 6C 00 6C 
39b8e     00 6C 00 6C 
39b92     00 6C 00 6C 
39b96     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b9a     00 6C 00 6B 
39b9e     00 6B 00 6B 
39ba2     00 6B 00 6B 
39ba6     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39baa     00 6B 00 6B 
39bae     00 6B 00 6B 
39bb2     00 6B 00 6B 
39bb6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39bba     00 6B 00 6B 
39bbe     00 6B 00 6B 
39bc2     00 6B 00 6B 
39bc6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39bca     00 6B 00 6B 
39bce     00 6B 00 6B 
39bd2     00 6B 00 6B 
39bd6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39bda     00 6B 00 6B 
39bde     00 6B 00 6B 
39be2     00 6B 00 6B 
39be6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39bea     00 6B 00 6B 
39bee     00 6B 00 6B 
39bf2     00 6B 00 6B 
39bf6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39bfa     00 6B 00 6B 
39bfe     00 6B 00 6B 
39c02     00 6B 00 6B 
39c06     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c0a     00 6B 00 6B 
39c0e     00 6B 00 6B 
39c12     00 6B 00 6B 
39c16     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c1a     00 6B 00 6B 
39c1e     00 6B 00 6B 
39c22     00 6B 00 6B 
39c26     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c2a     00 6B 00 6B 
39c2e     00 6B 00 6B 
39c32     00 6A 00 9D 
39c36     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
39c3a     00 9E 00 9E 
39c3e     00 9E 00 9E 
39c42     00 9E 00 9E 
39c46     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39c4a     00 9E 00 9E 
39c4e     00 9E 00 9E 
39c52     00 9E 00 9E 
39c56     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39c5a     00 9E 00 9E 
39c5e     00 9E 00 9E 
39c62     00 9E 00 9E 
39c66     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39c6a     00 9E 00 9E 
39c6e     00 9E 00 9E 
39c72     00 9E 00 9E 
39c76     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39c7a     00 9E 00 9E 
39c7e     00 9E 00 9E 
39c82     00 9E 00 9E 
39c86     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39c8a     00 9E 00 9E 
39c8e     00 9E 00 9E 
39c92     00 9E 00 9E 
39c96     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39c9a     00 9E 00 9E 
39c9e     00 9E 00 9E 
39ca2     00 9E 00 9E 
39ca6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39caa     00 9E 00 9E 
39cae     00 9E 00 9E 
39cb2     00 9E 00 9E 
39cb6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39cba     00 9E 00 9E 
39cbe     00 9E 00 9E 
39cc2     00 9E 00 9E 
39cc6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
39cca     00 9F 00 9F 
39cce     00 9F 00 9F 
39cd2     00 9F 00 9F 
39cd6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39cda     00 9F 00 9F 
39cde     00 9F 00 9F 
39ce2     00 9F 00 9F 
39ce6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39cea     00 9F 00 9F 
39cee     00 9F 00 9F 
39cf2     00 9F 00 9F 
39cf6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39cfa     00 9F 00 9F 
39cfe     00 9F 00 9F 
39d02     00 9F 00 9F 
39d06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d0a     00 9F 00 9F 
39d0e     00 9F 00 9F 
39d12     00 9F 00 9F 
39d16     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d1a     00 9F 00 9F 
39d1e     00 9F 00 9F 
39d22     00 9F 00 9F 
39d26     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d2a     00 9F 00 9F 
39d2e     00 9F 00 9F 
39d32     00 9F 00 9F 
39d36     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d3a     00 9F 00 9F 
39d3e     00 9F 00 9F 
39d42     00 9F 00 9F 
39d46     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d4a     00 9F 00 9F 
39d4e     00 9F 00 9F 
39d52     00 9F 00 9F 
39d56     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d5a     00 9F 00 9F 
39d5e     00 9F 00 9F 
39d62     00 9F 00 9F 
39d66     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d6a     00 9F 00 9F 
39d6e     00 9F 00 9F 
39d72     00 9F 00 9F 
39d76     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d7a     00 9F 00 9F 
39d7e     00 9F 00 9F 
39d82     00 9F 00 9F 
39d86     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d8a     00 9F 00 9F 
39d8e     00 9F 00 A0 
39d92     00 A0 00 A0 
39d96     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d9a     00 A0 00 A0 
39d9e     00 A0 00 A0 
39da2     00 A0 00 A0 
39da6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39daa     00 A0 00 A0 
39dae     00 A0 00 A0 
39db2     00 A0 00 A0 
39db6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dba     00 A0 00 A0 
39dbe     00 A0 00 A0 
39dc2     00 A0 00 A0 
39dc6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dca     00 A0 00 A0 
39dce     00 A0 00 A0 
39dd2     00 A0 00 A0 
39dd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dda     00 A0 00 A0 
39dde     00 A0 00 A0 
39de2     00 A0 00 A0 
39de6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dea     00 A0 00 A0 
39dee     00 A0 00 A0 
39df2     00 A0 00 A0 
39df6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dfa     00 A0 00 A0 
39dfe     00 A0 00 A0 
39e02     00 A0 00 A0 
39e06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e0a     00 A0 00 A0 
39e0e     00 A0 00 A0 
39e12     00 A0 00 A0 
39e16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e1a     00 A0 00 A0 
39e1e     00 A0 00 A0 
39e22     00 A0 00 A0 
39e26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e2a     00 A0 00 A0 
39e2e     00 A0 00 A0 
39e32     00 A0 00 A0 
39e36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e3a     00 A0 00 A0 
39e3e     00 A0 00 A0 
39e42     00 A0 00 A0 
39e46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e4a     00 A0 00 A0 
39e4e     00 A0 00 A0 
39e52     00 A0 00 A0 
39e56     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
39e5a     00 6D 00 6D 
39e5e     00 6D 00 6D 
39e62     00 6D 00 6D 
39e66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39e6a     00 6D 00 6D 
39e6e     00 6D 00 6D 
39e72     00 6D 00 6D 
39e76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39e7a     00 6D 00 6D 
39e7e     00 6D 00 6D 
39e82     00 6D 00 6D 
39e86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39e8a     00 6D 00 6D 
39e8e     00 6D 00 6D 
39e92     00 6D 00 6D 
39e96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39e9a     00 6D 00 6D 
39e9e     00 6D 00 6D 
39ea2     00 6D 00 6D 
39ea6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39eaa     00 6D 00 6D 
39eae     00 6D 00 6D 
39eb2     00 6D 00 6D 
39eb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39eba     00 6D 00 6D 
39ebe     00 6D 00 6D 
39ec2     00 6D 00 6D 
39ec6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39eca     00 6D 00 6D 
39ece     00 6D 00 6D 
39ed2     00 6D 00 6D 
39ed6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39eda     00 6D 00 6D 
39ede     00 A0 00 A0 
39ee2     00 A0 00 A0 
39ee6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39eea     00 A0 00 A0 
39eee     00 A0 00 A0 
39ef2     00 A0 00 A0 
39ef6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39efa     00 A0 00 A0 
39efe     00 A0 00 A0 
39f02     00 A0 00 A0 
39f06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f0a     00 A0 00 A0 
39f0e     00 A0 00 A0 
39f12     00 A0 00 A0 
39f16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f1a     00 A0 00 A0 
39f1e     00 A0 00 A0 
39f22     00 A0 00 A0 
39f26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f2a     00 A0 00 A0 
39f2e     00 A0 00 A0 
39f32     00 A0 00 A0 
39f36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f3a     00 A0 00 A0 
39f3e     00 A0 00 A0 
39f42     00 A0 00 A0 
39f46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f4a     00 A0 00 A0 
39f4e     00 A0 00 A0 
39f52     00 A0 00 A0 
39f56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f5a     00 A0 00 A0 
39f5e     00 A0 00 A0 
39f62     00 A0 00 A0 
39f66     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
39f6a     00 6D 00 6D 
39f6e     00 6D 00 6D 
39f72     00 6D 00 6D 
39f76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f7a     00 6D 00 6D 
39f7e     00 6D 00 6D 
39f82     00 6D 00 6D 
39f86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f8a     00 6D 00 6D 
39f8e     00 6D 00 6D 
39f92     00 6D 00 6D 
39f96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f9a     00 6D 00 6D 
39f9e     00 6D 00 6D 
39fa2     00 6D 00 6D 
39fa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39faa     00 6D 00 6D 
39fae     00 6D 00 6D 
39fb2     00 6D 00 6D 
39fb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fba     00 6D 00 6D 
39fbe     00 6D 00 6D 
39fc2     00 6D 00 6D 
39fc6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fca     00 6D 00 6D 
39fce     00 6D 00 6D 
39fd2     00 6D 00 6D 
39fd6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fda     00 6D 00 6D 
39fde     00 6D 00 6D 
39fe2     00 6D 00 6D 
39fe6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fea     00 6D 00 6D 
39fee     00 6C 00 A0 
39ff2     00 9F 00 A0 
39ff6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
39ffa     00 A0 00 A0 
39ffe     00 A0 00 A0 
3a002     00 A0 00 A0 
3a006     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a00a     00 A0 00 A0 
3a00e     00 A0 00 A0 
3a012     00 A0 00 A0 
3a016     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a01a     00 A0 00 A0 
3a01e     00 A0 00 A0 
3a022     00 A0 00 A0 
3a026     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a02a     00 A0 00 A0 
3a02e     00 A0 00 A0 
3a032     00 A0 00 A0 
3a036     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a03a     00 A0 00 A0 
3a03e     00 A0 00 A0 
3a042     00 A0 00 A0 
3a046     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a04a     00 A0 00 A0 
3a04e     00 A0 00 A0 
3a052     00 A0 00 A0 
3a056     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a05a     00 A0 00 A0 
3a05e     00 A0 00 A0 
3a062     00 A0 00 A0 
3a066     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a06a     00 A0 00 A0 
3a06e     00 A0 00 A0 
3a072     00 A0 00 A0 
3a076     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a07a     00 A0 00 A0 
3a07e     00 A0 00 A0 
3a082     00 A0 00 A0 
3a086     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a08a     00 A0 00 A0 
3a08e     00 A0 00 A0 
3a092     00 A0 00 A0 
3a096     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a09a     00 A0 00 A0 
3a09e     00 A0 00 A0 
3a0a2     00 A0 00 A0 
3a0a6     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3a0aa     00 A1 00 A1 
3a0ae     00 A1 00 A1 
3a0b2     00 A1 00 A1 
3a0b6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a0ba     00 A1 00 A1 
3a0be     00 A1 00 A1 
3a0c2     00 A1 00 A1 
3a0c6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a0ca     00 A1 00 A1 
3a0ce     00 A1 00 A1 
3a0d2     00 A1 00 A1 
3a0d6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a0da     00 A1 00 A1 
3a0de     00 A1 00 A1 
3a0e2     00 A1 00 A1 
3a0e6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a0ea     00 A1 00 A1 
3a0ee     00 A1 00 A1 
3a0f2     00 A1 00 A1 
3a0f6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a0fa     00 A1 00 A1 
3a0fe     00 A1 00 A1 
3a102     00 6E 00 6E 
3a106     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a10a     00 6E 00 6E 
3a10e     00 6E 00 6E 
3a112     00 6E 00 6E 
3a116     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a11a     00 6E 00 6E 
3a11e     00 6E 00 6E 
3a122     00 6E 00 6E 
3a126     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a12a     00 6E 00 6E 
3a12e     00 6E 00 6E 
3a132     00 6E 00 6E 
3a136     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a13a     00 6E 00 6D 
3a13e     00 6D 00 6D 
3a142     00 6D 00 6D 
3a146     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a14a     00 6D 00 6D 
3a14e     00 6D 00 6D 
3a152     00 6D 00 6D 
3a156     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a15a     00 6D 00 6D 
3a15e     00 6D 00 6D 
3a162     00 6D 00 6D 
3a166     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a16a     00 6D 00 6D 
3a16e     00 6D 00 6D 
3a172     00 6D 00 6D 
3a176     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a17a     00 6D 00 6D 
3a17e     00 6D 00 6D 
3a182     00 6D 00 6D 
3a186     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a18a     00 6D 00 6D 
3a18e     00 6D 00 6D 
3a192     00 6D 00 6D 
3a196     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a19a     00 6D 00 6D 
3a19e     00 6D 00 6D 
3a1a2     00 6D 00 6D 
3a1a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1aa     00 6D 00 6D 
3a1ae     00 6D 00 6D 
3a1b2     00 6D 00 6D 
3a1b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1ba     00 6D 00 6D 
3a1be     00 6D 00 6D 
3a1c2     00 6D 00 6D 
3a1c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1ca     00 6D 00 6D 
3a1ce     00 6D 00 6D 
3a1d2     00 6D 00 6D 
3a1d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1da     00 6D 00 6D 
3a1de     00 6D 00 6D 
3a1e2     00 6D 00 6D 
3a1e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1ea     00 6D 00 6D 
3a1ee     00 6C 00 6C 
3a1f2     00 6C 00 6C 
3a1f6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a1fa     00 6C 00 6C 
3a1fe     00 6C 00 6C 
3a202     00 6C 00 6C 
3a206     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a20a     00 6C 00 6C 
3a20e     00 6C 00 6C 
3a212     00 9D 00 9F 
3a216     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3a21a     00 9F 00 9F 
3a21e     00 9F 00 9F 
3a222     00 A0 00 A0 
3a226     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a22a     00 A0 00 A0 
3a22e     00 A0 00 A0 
3a232     00 A0 00 A0 
3a236     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a23a     00 A0 00 A0 
3a23e     00 A0 00 A0 
3a242     00 A0 00 A0 
3a246     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a24a     00 A0 00 A0 
3a24e     00 A0 00 A0 
3a252     00 A0 00 A0 
3a256     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a25a     00 A0 00 A0 
3a25e     00 A0 00 A0 
3a262     00 A0 00 A0 
3a266     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a26a     00 A0 00 A0 
3a26e     00 A0 00 A0 
3a272     00 A0 00 A0 
3a276     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a27a     00 A0 00 A0 
3a27e     00 A0 00 A0 
3a282     00 A0 00 A0 
3a286     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a28a     00 A0 00 A0 
3a28e     00 A0 00 A0 
3a292     00 A0 00 A0 
3a296     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a29a     01 00 00 00 
3a29e     00 00 00 00 
3a2a2     00 00 00 00 
3a2a6     00 00 00 00 | mouse  file "mouse2.def"
3a2aa     00 00 00 00 
3a2ae     00 00 00 00 
3a2b2     00 00 00 00 
3a2b6     00 00 00 00 | 	byte	$00[16]
3a2ba     01 01 00 00 
3a2be     00 00 00 00 
3a2c2     00 00 00 00 
3a2c6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a2ca     00 00 00 00 
3a2ce     00 00 00 00 
3a2d2     00 00 00 00 
3a2d6     00 00 00 00 | 	byte	$00[16]
3a2da     01 0D 01 00 
3a2de     00 00 00 00 
3a2e2     00 00 00 00 
3a2e6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a2ea     00 00 00 00 
3a2ee     00 00 00 00 
3a2f2     00 00 00 00 
3a2f6     00 00 00 00 | 	byte	$00[16]
3a2fa     01 0D 0D 01 
3a2fe     00 00 00 00 
3a302     00 00 00 00 
3a306     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a30a     00 00 00 00 
3a30e     00 00 00 00 
3a312     00 00 00 00 
3a316     00 00 00 00 | 	byte	$00[16]
3a31a     01 0D 0D 0D 
3a31e     01 00 00 00 
3a322     00 00 00 00 
3a326     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a32a     00 00 00 00 
3a32e     00 00 00 00 
3a332     00 00 00 00 
3a336     00 00 00 00 | 	byte	$00[16]
3a33a     01 0D 0D 0D 
3a33e     0D 01 00 00 
3a342     00 00 00 00 
3a346     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a34a     00 00 00 00 
3a34e     00 00 00 00 
3a352     00 00 00 00 
3a356     00 00 00 00 | 	byte	$00[16]
3a35a     01 0D 0D 0D 
3a35e     0D 0D 01 00 
3a362     00 00 00 00 
3a366     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a36a     00 00 00 00 
3a36e     00 00 00 00 
3a372     00 00 00 00 
3a376     00 00 00 00 | 	byte	$00[16]
3a37a     01 0D 0D 0D 
3a37e     0D 0D 0D 01 
3a382     00 00 00 00 
3a386     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3a38a     00 00 00 00 
3a38e     00 00 00 00 
3a392     00 00 00 00 
3a396     00 00 00 00 | 	byte	$00[16]
3a39a     01 0D 0D 0D 
3a39e     0D 0D 0D 0C 
3a3a2     01 00 00 00 
3a3a6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3a3aa     00 00 00 00 
3a3ae     00 00 00 00 
3a3b2     00 00 00 00 
3a3b6     00 00 00 00 | 	byte	$00[16]
3a3ba     01 0D 0D 0D 
3a3be     0D 0D 0D 0D 
3a3c2     0C 01 00 00 
3a3c6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3a3ca     00 00 00 00 
3a3ce     00 00 00 00 
3a3d2     00 00 00 00 
3a3d6     00 00 00 00 | 	byte	$00[16]
3a3da     01 0D 0D 0D 
3a3de     0D 0D 0D 0D 
3a3e2     0D 0C 01 00 
3a3e6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3a3ea     00 00 00 00 
3a3ee     00 00 00 00 
3a3f2     00 00 00 00 
3a3f6     00 00 00 00 | 	byte	$00[16]
3a3fa     01 0D 0D 0D 
3a3fe     0D 0D 0D 0D 
3a402     0D 0D 0B 01 
3a406     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3a40a     00 00 00 00 
3a40e     00 00 00 00 
3a412     00 00 00 00 
3a416     00 00 00 00 | 	byte	$00[16]
3a41a     01 0D 0D 0D 
3a41e     0C 0D 0D 03 
3a422     01 01 01 01 
3a426     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3a42a     00 00 00 00 
3a42e     00 00 00 00 
3a432     00 00 00 00 
3a436     00 00 00 00 | 	byte	$00[16]
3a43a     01 0D 0D 0C 
3a43e     01 09 0D 03 
3a442     00 00 00 00 
3a446     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3a44a     00 00 00 00 
3a44e     00 00 00 00 
3a452     00 00 00 00 
3a456     00 00 00 00 | 	byte	$00[16]
3a45a     01 0D 0C 01 
3a45e     00 01 0D 0B 
3a462     01 00 00 00 
3a466     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3a46a     00 00 00 00 
3a46e     00 00 00 00 
3a472     00 00 00 00 
3a476     00 00 00 00 | 	byte	$00[16]
3a47a     01 0C 01 00 
3a47e     00 01 0A 0D 
3a482     01 00 00 00 
3a486     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3a48a     00 00 00 00 
3a48e     00 00 00 00 
3a492     00 00 00 00 
3a496     00 00 00 00 | 	byte	$00[16]
3a49a     01 01 00 00 
3a49e     00 00 01 0D 
3a4a2     0B 01 00 00 
3a4a6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3a4aa     00 00 00 00 
3a4ae     00 00 00 00 
3a4b2     00 00 00 00 
3a4b6     00 00 00 00 
3a4ba     00 00 00 00 
3a4be     00 00       | 	byte	$00[22]
3a4c0     01 0B 0D 01 
3a4c4     00 00 00 00 
3a4c8     00 00 00 00 
3a4cc     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a4d0     00 00 00 00 
3a4d4     00 00 00 00 
3a4d8     00 00 00 00 
3a4dc     00 00 00 00 
3a4e0     00          | 	byte	$00[17]
3a4e1     01 01 00 00 
3a4e5     00 00 00 00 
3a4e9     00 00 00 00 
3a4ed     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a4f1     00 00 00 00 
      ...             
3a695     00 00 00 00 
3a699     00          | 	byte	$00[425]
3a69a                 | 
3a69a     00 00       |              	org
3a69c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3a6a0 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3a6a4 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3a6a8 003             | 
3a6a8 003 00 30 04 F6 |                 mov     psramaddr,#0
3a6ac 004             | 
3a6ac 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3a6b0 005 20 00 00 FF 
3a6b4 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3a6b8 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3a6bc 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3a6c0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3a6c4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3a6c8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3a6cc 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3a6d0 00d             | 
3a6d0 00d 20 00 00 FF 
3a6d4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3a6d8 00f E0 03 00 FF 
3a6dc 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3a6e0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3a6e4 012             | 
3a6e4 012             |                 
3a6e4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3a6e8 013             |     
3a6e8 013 01 2C 60 FD |                 cogid 	t11				' get id
3a6ec 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3a6f0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3a6f4 016             | 
3a6f4 016 00 00 00 00 | t11 		long 	0
3a6f8 017 00 FF 07 00 | mailbox 	long 	$7FF00
3a6fc 018 00 00 00 00 | psramaddr 	long 	0
3a700 019 00 00 00 00 | pslockval	long 	0
3a704 01a 00 00 00 00 | cmd             long    0
3a708 01b 00 00 00 00 | buf1            long    0
3a70c 01c 00 40 00 00 | buf2            long    16384
3a710 01d 14 A7 03 00 | 	long	@@@_dat_ + 12612
3a714 01e 50 32 20 52 
3a718 01f 65 74 72 6F 
3a71c 020 6D 61 63 68 
3a720 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3a724 022 42 41 53 49 
3a728 023 43 20 76 65 
3a72c 024 72 73 69 6F 
3a730 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3a734 026 34 39 20 2D 
3a738 027 2D 2D 20 42 
3a73c 028 45 54 41 20 
3a740 029 31 00 00 00 | 	byte	$34, $39, $20, $2d, $2d, $2d, $20, $42, $45, $54, $41, $20, $31, $00, $00, $00
3a744 02a             | 	alignl
3a744 02a             | _hg010b_spin2_dat_
3a744 02a             | 
3a744 02a 00 00 00 00 
3a748 02b 00 00 00 00 
3a74c 02c 00 00 00 00 
3a750 02d 00 00 00 00 
3a754 02e 00 00 00    | vga_font       file "vgafont.def"
3a757 02e 7E 81 A5 81 
3a75b 02f 81 BD 99 81 
3a75f 030 81 7E 00 00 
3a763 031 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3a767 032 7E FF DB FF 
3a76b 033 FF C3 E7 FF 
3a76f 034 FF 7E 00 00 
3a773 035 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3a777 036 00 36 7F 7F 
3a77b 037 7F 7F 3E 1C 
3a77f 038 08 00 00 00 
3a783 039 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3a787 03a 00 08 1C 3E 
3a78b 03b 7F 3E 1C 08 
3a78f 03c 00 00 00 00 
3a793 03d 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3a797 03e 18 3C 3C E7 
3a79b 03f E7 E7 18 18 
3a79f 040 3C 00 00 00 
3a7a3 041 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a7a7 042 18 3C 7E FF 
3a7ab 043 FF 7E 18 18 
3a7af 044 3C 00 00 00 
3a7b3 045 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a7b7 046 00 00 00 18 
3a7bb 047 3C 3C 18 00 
3a7bf 048 00 00 00 00 
3a7c3 049 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a7c7 04a FF FF FF E7 
3a7cb 04b C3 C3 E7 FF 
3a7cf 04c FF FF FF FF 
3a7d3 04d FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a7d7 04e 00 00 3C 66 
3a7db 04f 42 42 66 3C 
3a7df 050 00 00 00 00 
3a7e3 051 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a7e7 052 FF FF C3 99 
3a7eb 053 BD BD 99 C3 
3a7ef 054 FF FF FF FF 
3a7f3 055 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a7f7 056 78 70 58 4C 
3a7fb 057 1E 33 33 33 
3a7ff 058 33 1E 00 00 
3a803 059 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3a807 05a 3C 66 66 66 
3a80b 05b 66 3C 18 7E 
3a80f 05c 18 18 00 00 
3a813 05d 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3a817 05e FC CC FC 0C 
3a81b 05f 0C 0C 0C 0E 
3a81f 060 0F 07 00 00 
3a823 061 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3a827 062 FE C6 FE C6 
3a82b 063 C6 C6 C6 E6 
3a82f 064 E7 67 03 00 
3a833 065 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3a837 066 18 18 DB 3C 
3a83b 067 E7 3C DB 18 
3a83f 068 18 00 00 00 
3a843 069 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3a847 06a 03 07 0F 1F 
3a84b 06b 7F 1F 0F 07 
3a84f 06c 03 01 00 00 
3a853 06d 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3a857 06e 60 70 78 7C 
3a85b 06f 7F 7C 78 70 
3a85f 070 60 40 00 00 
3a863 071 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3a867 072 18 3C 7E 18 
3a86b 073 18 18 7E 3C 
3a86f 074 18 00 00 00 
3a873 075 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3a877 076 66 66 66 66 
3a87b 077 66 66 66    | 	byte	$66[7]
3a87e 078 00 66 66 00 
3a882 079 00 00 00 00 
3a886 07a 00 FE DB DB 
3a88a 07b DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3a88e 07c D8 D8 D8 00 
3a892 07d 00 00 00 3E 
3a896 07e 63 06 1C 36 
3a89a 07f 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3a89e 080 30 63 3E 00 
3a8a2 081 00 00 00 00 
3a8a6 082 00 00 00 00 
3a8aa 083 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a8ae 084 7F 7F 7F 00 
3a8b2 085 00 00 00 00 
3a8b6 086 00 18 3C 7E 
3a8ba 087 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3a8be 088 3C 18 7E 00 
3a8c2 089 00 00 00 00 
3a8c6 08a 00 18 3C 7E 
3a8ca 08b 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3a8ce 08c 18 18 18 00 
3a8d2 08d 00 00 00 00 
3a8d6 08e 00 18 18 18 
3a8da 08f 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a8de 090 7E 3C 18 00 
3a8e2 091 00 00 00 00 
3a8e6 092 00 00 00 18 
3a8ea 093 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3a8ee 094 00 00 00 00 
3a8f2 095 00 00 00 00 
3a8f6 096 00 00 00    | 	byte	$00[11]
3a8f9 097 0C 06 7F 06 
3a8fd 098 0C 00 00 00 
3a901 099 00 00 00 00 
3a905 09a 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a909 09b 00 03 03 03 
3a90d 09c 7F 00 00 00 
3a911 09d 00 00 00 00 
3a915 09e 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a919 09f 14 36 7F 36 
3a91d 0a0 14 00 00 00 
3a921 0a1 00 00 00 00 
3a925 0a2 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3a929 0a3 1C 1C 3E 3E 
3a92d 0a4 7F 7F 00 00 
3a931 0a5 00 00 00 00 
3a935 0a6 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a939 0a7 7F 3E 3E 1C 
3a93d 0a8 1C 08 00 00 
3a941 0a9 00 00 00 00 
3a945 0aa 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a949 0ab 00 00 00 00 
3a94d 0ac 00 00 00 00 
3a951 0ad 00 00 00 00 
3a955 0ae 00 00       | 	byte	$00[14]
3a957 0ae 18 3C 3C 3C 
3a95b 0af 18 18 18 00 
3a95f 0b0 18 18 00 00 
3a963 0b1 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3a967 0b2 66 24 00 00 
3a96b 0b3 00 00 00 00 
3a96f 0b4 00 00 00 00 
3a973 0b5 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a977 0b6 00 36 36 7F 
3a97b 0b7 36 36 36 7F 
3a97f 0b8 36 36 00 00 
3a983 0b9 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3a987 0ba 3E 63 43 03 
3a98b 0bb 3E 60 60 61 
3a98f 0bc 63 3E 18 18 
3a993 0bd 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3a997 0be 00 00 43 63 
3a99b 0bf 30 18 0C 06 
3a99f 0c0 63 61 00 00 
3a9a3 0c1 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3a9a7 0c2 1C 36 36 1C 
3a9ab 0c3 6E 3B 33 33 
3a9af 0c4 33 6E 00 00 
3a9b3 0c5 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3a9b7 0c6 0C 0C 0C 06 
3a9bb 0c7 00 00 00 00 
3a9bf 0c8 00 00 00 00 
3a9c3 0c9 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9c7 0ca 30 18 0C 0C 
3a9cb 0cb 0C 0C 0C 0C 
3a9cf 0cc 18 30 00 00 
3a9d3 0cd 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3a9d7 0ce 0C 18 30 30 
3a9db 0cf 30 30 30 30 
3a9df 0d0 18 0C 00 00 
3a9e3 0d1 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3a9e7 0d2 00 00 00 66 
3a9eb 0d3 3C FF 3C 66 
3a9ef 0d4 00 00 00 00 
3a9f3 0d5 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3a9f7 0d6 00 00 00 18 
3a9fb 0d7 18 7E 18 18 
3a9ff 0d8 00 00 00 00 
3aa03 0d9 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3aa07 0da 00 00 00 00 
3aa0b 0db 00 00 00 00 | 	byte	$00[8]
3aa0f 0dc 18 18 18 0C 
3aa13 0dd 00 00 00 00 
3aa17 0de 00 00 00 00 
3aa1b 0df 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3aa1f 0e0 00 00 00 00 
3aa23 0e1 00 00 00 00 
3aa27 0e2 00 00 00 00 
3aa2b 0e3 00 00 00 00 | 	byte	$00[16]
3aa2f 0e4 18 18 00 00 
3aa33 0e5 00 00 00 00 
3aa37 0e6 00 00 40 60 
3aa3b 0e7 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3aa3f 0e8 03 01 00 00 
3aa43 0e9 00 00 00 00 
3aa47 0ea 1C 36 63 63 
3aa4b 0eb 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3aa4f 0ec 36 1C 00 00 
3aa53 0ed 00 00 00 00 
3aa57 0ee 18 1C 1E 18 
3aa5b 0ef 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3aa5f 0f0 18 7E 00 00 
3aa63 0f1 00 00 00 00 
3aa67 0f2 3E 63 60 30 
3aa6b 0f3 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3aa6f 0f4 63 7F 00 00 
3aa73 0f5 00 00 00 00 
3aa77 0f6 3E 63 60 60 
3aa7b 0f7 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3aa7f 0f8 63 3E 00 00 
3aa83 0f9 00 00 00 00 
3aa87 0fa 30 38 3C 36 
3aa8b 0fb 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3aa8f 0fc 30 78 00 00 
3aa93 0fd 00 00 00 00 
3aa97 0fe 7F 03 03 03 
3aa9b 0ff 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3aa9f 100 63 3E 00 00 
3aaa3 101 00 00 00 00 
3aaa7 102 1C 06 03 03 
3aaab 103 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3aaaf 104 63 3E 00 00 
3aab3 105 00 00 00 00 
3aab7 106 7F 63 60 60 
3aabb 107 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3aabf 108 0C 0C 00 00 
3aac3 109 00 00 00 00 
3aac7 10a 3E 63 63 63 
3aacb 10b 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3aacf 10c 63 3E 00 00 
3aad3 10d 00 00 00 00 
3aad7 10e 3E 63 63 63 
3aadb 10f 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3aadf 110 30 1E 00 00 
3aae3 111 00 00 00 00 
3aae7 112 00 00 00 18 
3aaeb 113 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3aaef 114 18 18 00 00 
3aaf3 115 00 00 00 00 
3aaf7 116 00 00 00 18 
3aafb 117 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3aaff 118 18 18 0C 00 
3ab03 119 00 00 00 00 
3ab07 11a 00 60 30 18 
3ab0b 11b 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3ab0f 11c 30 60 00 00 
3ab13 11d 00 00 00 00 
3ab17 11e 00 00 00 7E 
3ab1b 11f 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3ab1f 120 00 00 00 00 
3ab23 121 00 00 00 00 
3ab27 122 00          | 	byte	$00[9]
3ab28 123 06 0C 18 30 
3ab2c 124 60 30 18 0C 
3ab30 125 06 00 00 00 
3ab34 126 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3ab38 127 63 63 30 18 
3ab3c 128 18 18 00 18 
3ab40 129 18 00 00 00 
3ab44 12a 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ab48 12b 3E 63 63 7B 
3ab4c 12c 7B 7B 3B 03 
3ab50 12d 3E 00 00 00 
3ab54 12e 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3ab58 12f 1C 36 63 63 
3ab5c 130 7F 63 63 63 
3ab60 131 63 00 00 00 
3ab64 132 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3ab68 133 66 66 66 3E 
3ab6c 134 66 66 66 66 
3ab70 135 3F 00 00 00 
3ab74 136 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3ab78 137 66 43 03 03 
3ab7c 138 03 03 43 66 
3ab80 139 3C 00 00 00 
3ab84 13a 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3ab88 13b 36 66 66 66 
3ab8c 13c 66 66 66 36 
3ab90 13d 1F 00 00 00 
3ab94 13e 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3ab98 13f 66 46 16 1E 
3ab9c 140 16 06 46 66 
3aba0 141 7F 00 00 00 
3aba4 142 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3aba8 143 66 46 16 1E 
3abac 144 16 06 06 06 
3abb0 145 0F 00 00 00 
3abb4 146 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3abb8 147 66 43 03 03 
3abbc 148 7B 63 63 66 
3abc0 149 5C 00 00 00 
3abc4 14a 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3abc8 14b 63 63 63 7F 
3abcc 14c 63 63 63 63 
3abd0 14d 63 00 00 00 
3abd4 14e 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3abd8 14f 18 18 18 18 
3abdc 150 18 18 18 18 | 	byte	$18[8]
3abe0 151 3C 00 00 00 
3abe4 152 00 00 00 78 
3abe8 153 30 30 30 30 
3abec 154 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3abf0 155 1E 00 00 00 
3abf4 156 00 00 00 67 
3abf8 157 66 66 36 1E 
3abfc 158 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3ac00 159 67 00 00 00 
3ac04 15a 00 00 00 0F 
3ac08 15b 06 06 06 06 
3ac0c 15c 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3ac10 15d 7F 00 00 00 
3ac14 15e 00 00 00 63 
3ac18 15f 77 7F 7F 6B 
3ac1c 160 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3ac20 161 63 00 00 00 
3ac24 162 00 00 00 63 
3ac28 163 67 6F 7F 7B 
3ac2c 164 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3ac30 165 63 00 00 00 
3ac34 166 00 00 00 3E 
3ac38 167 63 63 63 63 
3ac3c 168 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3ac40 169 3E 00 00 00 
3ac44 16a 00 00 00 3F 
3ac48 16b 66 66 66 3E 
3ac4c 16c 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3ac50 16d 0F 00 00 00 
3ac54 16e 00 00 00 3E 
3ac58 16f 63 63 63 63 
3ac5c 170 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3ac60 171 3E 30 70 00 
3ac64 172 00 00 00 3F 
3ac68 173 66 66 66 3E 
3ac6c 174 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3ac70 175 67 00 00 00 
3ac74 176 00 00 00 3E 
3ac78 177 63 63 06 1C 
3ac7c 178 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3ac80 179 3E 00 00 00 
3ac84 17a 00 00 00 7E 
3ac88 17b 7E 5A 18 18 
3ac8c 17c 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3ac90 17d 3C 00 00 00 
3ac94 17e 00 00 00 63 
3ac98 17f 63 63 63 63 
3ac9c 180 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3aca0 181 3E 00 00 00 
3aca4 182 00 00 00 63 
3aca8 183 63 63 63 63 
3acac 184 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3acb0 185 08 00 00 00 
3acb4 186 00 00 00 63 
3acb8 187 63 63 63 6B 
3acbc 188 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3acc0 189 36 00 00 00 
3acc4 18a 00 00 00 63 
3acc8 18b 63 36 3E 1C 
3accc 18c 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3acd0 18d 63 00 00 00 
3acd4 18e 00 00 00 66 
3acd8 18f 66 66 66 3C 
3acdc 190 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3ace0 191 3C 00 00 00 
3ace4 192 00 00 00 7F 
3ace8 193 63 61 30 18 
3acec 194 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3acf0 195 7F 00 00 00 
3acf4 196 00 00 00 3C 
3acf8 197 0C 0C 0C 0C 
3acfc 198 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3ad00 199 3C 00 00 00 
3ad04 19a 00 00 00 00 
3ad08 19b 01 03 07 0E 
3ad0c 19c 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3ad10 19d 40 00 00 00 
3ad14 19e 00 00 00 3C 
3ad18 19f 30 30 30 30 
3ad1c 1a0 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3ad20 1a1 3C 00 00 00 
3ad24 1a2 1C 36 00 00 
3ad28 1a3 00 00 00 00 
3ad2c 1a4 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad30 1a5 00 00 00 00 
3ad34 1a6 00 00 00 00 
3ad38 1a7 00 00 00 00 
3ad3c 1a8 00 00 00 00 
3ad40 1a9 00          | 	byte	$00[17]
3ad41 1a9 FF 00 00 0C 
3ad45 1aa 18 00 00 00 
3ad49 1ab 00 00 00 00 
3ad4d 1ac 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad51 1ad 00 00 00 00 
3ad55 1ae 00 00 00 00 
3ad59 1af 00          | 	byte	$00[9]
3ad5a 1af 1E 30 3E 33 
3ad5e 1b0 33 33 6E 00 
3ad62 1b1 00 00 00 00 
3ad66 1b2 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3ad6a 1b3 1E 36 66 66 
3ad6e 1b4 66 66 3E 00 
3ad72 1b5 00 00 00 00 
3ad76 1b6 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad7a 1b7 3E 63 03 03 
3ad7e 1b8 03 63 3E 00 
3ad82 1b9 00 00 00 00 
3ad86 1ba 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3ad8a 1bb 3C 36 33 33 
3ad8e 1bc 33 33 6E 00 
3ad92 1bd 00 00 00 00 
3ad96 1be 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad9a 1bf 3E 63 7F 03 
3ad9e 1c0 03 63 3E 00 
3ada2 1c1 00 00 00 00 
3ada6 1c2 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3adaa 1c3 0C 1E 0C 0C 
3adae 1c4 0C 0C 1E 00 
3adb2 1c5 00 00 00 00 
3adb6 1c6 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3adba 1c7 6E 33 33 33 
3adbe 1c8 33 33 3E 30 
3adc2 1c9 33 1E 00 00 
3adc6 1ca 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3adca 1cb 36 6E 66 66 
3adce 1cc 66 66 67 00 
3add2 1cd 00 00 00 00 
3add6 1ce 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3adda 1cf 1C 18 18 18 
3adde 1d0 18 18 3C 00 
3ade2 1d1 00 00 00 00 
3ade6 1d2 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3adea 1d3 70 60 60 60 
3adee 1d4 60 60 60 66 
3adf2 1d5 66 3C 00 00 
3adf6 1d6 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3adfa 1d7 66 36 1E 1E 
3adfe 1d8 36 66 67 00 
3ae02 1d9 00 00 00 00 
3ae06 1da 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3ae0a 1db 18 18 18 18 
3ae0e 1dc 18 18       | 	byte	$18[6]
3ae10 1dd 3C 00 00 00 
3ae14 1de 00 00 00 00 
3ae18 1df 00 00 37 7F 
3ae1c 1e0 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3ae20 1e1 63 00 00 00 
3ae24 1e2 00 00 00 00 
3ae28 1e3 00 00 3B 66 
3ae2c 1e4 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ae30 1e5 66 00 00 00 
3ae34 1e6 00 00 00 00 
3ae38 1e7 00 00 3E 63 
3ae3c 1e8 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3ae40 1e9 3E 00 00 00 
3ae44 1ea 00 00 00 00 
3ae48 1eb 00 00 3B 66 
3ae4c 1ec 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ae50 1ed 3E 06 06 0F 
3ae54 1ee 00 00 00 00 
3ae58 1ef 00 00 6E 33 
3ae5c 1f0 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3ae60 1f1 3E 30 30 78 
3ae64 1f2 00 00 00 00 
3ae68 1f3 00 00 3B 6E 
3ae6c 1f4 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3ae70 1f5 0F 00 00 00 
3ae74 1f6 00 00 00 00 
3ae78 1f7 00 00 3E 63 
3ae7c 1f8 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3ae80 1f9 3E 00 00 00 
3ae84 1fa 00 00 00 08 
3ae88 1fb 0C 0C 3F 0C 
3ae8c 1fc 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3ae90 1fd 38 00 00 00 
3ae94 1fe 00 00 00 00 
3ae98 1ff 00 00 33 33 
3ae9c 200 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3aea0 201 6E 00 00 00 
3aea4 202 00 00 00 00 
3aea8 203 00 00 63 63 
3aeac 204 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3aeb0 205 1C 00 00 00 
3aeb4 206 00 00 00 00 
3aeb8 207 00 00 63 63 
3aebc 208 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3aec0 209 36 00 00 00 
3aec4 20a 00 00 00 00 
3aec8 20b 00 00 63 36 
3aecc 20c 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3aed0 20d 63 00 00 00 
3aed4 20e 00 00 00 00 
3aed8 20f 00 00 63 63 
3aedc 210 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3aee0 211 7E 60 30 1F 
3aee4 212 00 00 00 00 
3aee8 213 00 00 7F 33 
3aeec 214 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3aef0 215 7F 00 00 00 
3aef4 216 00 00 00 70 
3aef8 217 18 18 18 0E 
3aefc 218 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3af00 219 70 00 00 00 
3af04 21a 00 00 00 18 
3af08 21b 18 18 18 18 
3af0c 21c 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3af10 21d 18 00 00 00 
3af14 21e 00 00 00 0E 
3af18 21f 18 18 18 70 
3af1c 220 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3af20 221 0E 00 00 00 
3af24 222 6E 3B 00 00 
3af28 223 00 00 00 00 
3af2c 224 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af30 225 00 00 00 00 
3af34 226 00 00 00 00 
3af38 227 00 00       | 	byte	$00[10]
3af3a 227 08 1C 36 63 
3af3e 228 63 63 7F 00 
3af42 229 00 00 00 00 
3af46 22a 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3af4a 22b 03 03 03 03 
3af4e 22c 43 66 3C 18 
3af52 22d 30 1E 00 00 
3af56 22e 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3af5a 22f 33 33 33 33 
3af5e 230 33 33       | 	byte	$33[6]
3af60 231 6E 00 00 00 
3af64 232 00 00 60 30 
3af68 233 18 00 3E 63 
3af6c 234 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3af70 235 3E 00 00 00 
3af74 236 00 00 08 1C 
3af78 237 36 00 1E 30 
3af7c 238 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3af80 239 6E 00 00 00 
3af84 23a 00 00 00 00 
3af88 23b 33 00 1E 30 
3af8c 23c 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3af90 23d 6E 00 00 00 
3af94 23e 00 00 1C 36 
3af98 23f 1C 00 33 33 
3af9c 240 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3afa0 241 6E 00 00 00 
3afa4 242 00 00 60 30 
3afa8 243 18 00 3E 63 
3afac 244 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3afb0 245 3E 00 00 00 
3afb4 246 00 00 00 00 
3afb8 247 00 00 3E 63 
3afbc 248 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3afc0 249 3E 18 30 1E 
3afc4 24a 00 00 00 1C 
3afc8 24b 58 78 38 18 
3afcc 24c 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3afd0 24d 3C 00 00 00 
3afd4 24e 00 00 00 00 
3afd8 24f 63 00 3E 63 
3afdc 250 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3afe0 251 3E 00 00 00 
3afe4 252 66 33 00 3E 
3afe8 253 63 63 63 63 
3afec 254 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3aff0 255 3E 00 00 00 
3aff4 256 00 00 CC 66 
3aff8 257 33 00 3E 63 
3affc 258 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3b000 259 3E 00 00 00 
3b004 25a 00 00 18 3C 
3b008 25b 66 00 1C 18 
3b00c 25c 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3b010 25d 3C 00 00 00 
3b014 25e 30 18 00 7F 
3b018 25f 63 61 30 18 
3b01c 260 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b020 261 7F 00 00 00 
3b024 262 00 63 00 08 
3b028 263 1C 36 63 63 
3b02c 264 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3b030 265 63 00 00 00 
3b034 266 30 18 00 3C 
3b038 267 66 43 03 03 
3b03c 268 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3b040 269 3C 00 00 00 
3b044 26a 30 18 00 7F 
3b048 26b 66 46 16 1E 
3b04c 26c 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3b050 26d 7F 00 00 00 
3b054 26e 0C 06 00 0F 
3b058 26f 06 06 06 06 
3b05c 270 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b060 271 7F 00 00 00 
3b064 272 30 18 00 1C 
3b068 273 18 18 18 18 
3b06c 274 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3b070 275 3C 00 00 00 
3b074 276 00 00 08 1C 
3b078 277 36 00 3E 63 
3b07c 278 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3b080 279 3E 00 00 00 
3b084 27a 00 00 00 00 
3b088 27b 63 00 3E 63 
3b08c 27c 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3b090 27d 3E 00 00 00 
3b094 27e 00 00 00 6F 
3b098 27f 46 26 06 06 
3b09c 280 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3b0a0 281 7F 00 00 00 
3b0a4 282 00 00 00 6E 
3b0a8 283 4C 2C 0C 0C 
3b0ac 284 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3b0b0 285 1E 00 00 00 
3b0b4 286 30 18 00 3E 
3b0b8 287 63 63 06 1C 
3b0bc 288 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b0c0 289 3E 00 00 00 
3b0c4 28a 00 00 60 30 
3b0c8 28b 18 00 3E 63 
3b0cc 28c 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3b0d0 28d 3E 00 00 00 
3b0d4 28e 00 63 00 3E 
3b0d8 28f 63 63 63 63 
3b0dc 290 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b0e0 291 3E 00 00 00 
3b0e4 292 00 63 00 63 
3b0e8 293 63 63 63 63 
3b0ec 294 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b0f0 295 3E 00 00 00 
3b0f4 296 6C 38 00 7E 
3b0f8 297 7E 5A 18 18 
3b0fc 298 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b100 299 3C 00 00 00 
3b104 29a 00 00 60 48 
3b108 29b 2C 0C 3F 0C 
3b10c 29c 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b110 29d 38 00 00 00 
3b114 29e 00 00 00 0F 
3b118 29f 26 36 1E 0E 
3b11c 2a0 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3b120 2a1 7F 00 00 00 
3b124 2a2 00 00 00 00 
3b128 2a3 00 63 36 1C 
3b12c 2a4 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3b130 2a5 00 00 00 00 
3b134 2a6 00 00       | 	byte	$00[6]
3b136 2a6 36 1C 08 00 
3b13a 2a7 3E 63 03 03 
3b13e 2a8 03 63 3E 00 
3b142 2a9 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3b146 2aa 30 18 0C 00 
3b14a 2ab 1E 30 3E 33 
3b14e 2ac 33 33 6E 00 
3b152 2ad 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b156 2ae 60 30 18 00 
3b15a 2af 1C 18 18 18 
3b15e 2b0 18 18 3C 00 
3b162 2b1 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3b166 2b2 60 30 18 00 
3b16a 2b3 3E 63 63 63 
3b16e 2b4 63 63 3E 00 
3b172 2b5 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3b176 2b6 30 18 0C 00 
3b17a 2b7 33 33 33 33 
3b17e 2b8 33 33 6E 00 
3b182 2b9 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b186 2ba 00 08 1C 36 
3b18a 2bb 63 63 7F 63 
3b18e 2bc 63 63 63 18 
3b192 2bd 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3b196 2be 00 00 00 00 
3b19a 2bf 1E 30 3E 33 
3b19e 2c0 33 33 6E 18 
3b1a2 2c1 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3b1a6 2c2 00 7F 63 61 
3b1aa 2c3 30 18 0C 06 
3b1ae 2c4 43 63 7F 00 
3b1b2 2c5 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3b1b6 2c6 36 1C 08 00 
3b1ba 2c7 7F 33 18 0C 
3b1be 2c8 06 63 7F 00 
3b1c2 2c9 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3b1c6 2ca 00 7F 66 46 
3b1ca 2cb 16 1E 16 06 
3b1ce 2cc 46 66 7F 18 
3b1d2 2cd 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3b1d6 2ce 00 00 00 00 
3b1da 2cf 3E 63 7F 03 
3b1de 2d0 03 63 3E 18 
3b1e2 2d1 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3b1e6 2d2 00 3C 66 03 
3b1ea 2d3 1F 03 0F 03 
3b1ee 2d4 03 66 3C 00 
3b1f2 2d5 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3b1f6 2d6 60 30 18 00 
3b1fa 2d7 7F 33 18 0C 
3b1fe 2d8 06 63 7F 00 
3b202 2d9 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3b206 2da 00 3C 66 43 
3b20a 2db 03 03 03 03 
3b20e 2dc 43 66 3C 00 
3b212 2dd 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3b216 2de 00 00 00 00 
3b21a 2df 3E 63 06 1C 
3b21e 2e0 30 63 3E 18 
3b222 2e1 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3b226 2e2 00 00 00 00 
3b22a 2e3 00 00       | 	byte	$00[6]
3b22c 2e4 6C 36 1B 36 
3b230 2e5 6C 00 00 00 
3b234 2e6 00 00 00 00 
3b238 2e7 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b23c 2e8 1B 36 6C 36 
3b240 2e9 1B 00 00 00 
3b244 2ea 88 22 88 22 
3b248 2eb 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3b24c 2ec 88 22 88 22 
3b250 2ed 88 22 88 22 
3b254 2ee AA 55 AA 55 
3b258 2ef AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3b25c 2f0 AA 55 AA 55 
3b260 2f1 AA 55 AA 55 
3b264 2f2 BB EE BB EE 
3b268 2f3 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3b26c 2f4 BB EE BB EE 
3b270 2f5 BB EE BB EE 
3b274 2f6 18 18 18 18 
3b278 2f7 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3b27c 2f8 18 18 18 18 
3b280 2f9 18 18 18 18 
3b284 2fa 18 18 18 18 
3b288 2fb 18 18 18    | 	byte	$18[15]
3b28b 2fb 1F 18 18 18 
3b28f 2fc 18 18 18 18 
3b293 2fd 18 30 18 00 
3b297 2fe 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3b29b 2ff 63 7F 63 63 
3b29f 300 63 63 00 00 
3b2a3 301 00 1C 36 00 
3b2a7 302 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3b2ab 303 63 7F 63 63 
3b2af 304 63 63 00 00 
3b2b3 305 00 36 1C 00 
3b2b7 306 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3b2bb 307 1E 16 06 46 
3b2bf 308 66 7F 00 00 
3b2c3 309 00 00 00 00 
3b2c7 30a 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3b2cb 30b 1C 30 60 63 
3b2cf 30c 63 3E 18 30 
3b2d3 30d 1E 6C 6C 6C 
3b2d7 30e 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3b2db 30f 6F 6C 6C 6C 
3b2df 310 6C 6C 6C 6C 
3b2e3 311 6C 6C 6C 6C 
3b2e7 312 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b2eb 313 6C 6C 6C 6C 
3b2ef 314 6C 6C 6C 6C 
3b2f3 315 6C          | 	byte	$6c[9]
3b2f4 316 00 00 00 00 
3b2f8 317 00          | 	byte	$00[5]
3b2f9 317 7F 60 6F 6C 
3b2fd 318 6C 6C 6C 6C 
3b301 319 6C 6C 6C 6C 
3b305 31a 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b309 31b 6F 60 7F 00 
3b30d 31c 00 00 00 00 
3b311 31d 00 00 00 18 
3b315 31e 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3b319 31f 61 30 18 0C 
3b31d 320 06 43 63 7F 
3b321 321 00 00 00 00 
3b325 322 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3b329 323 00 7F 33 18 
3b32d 324 0C 06 63 7F 
3b331 325 00 00 00 00 
3b335 326 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3b339 327 00 00 1F 18 
3b33d 328 18 18 18 18 
3b341 329 18 18 18 18 
3b345 32a 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b349 32b 18 18 F8 00 
3b34d 32c 00 00 00 00 
3b351 32d 00 00 00 18 
3b355 32e 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b359 32f 18 18 FF 00 
3b35d 330 00 00 00 00 
3b361 331 00 00 00 00 
3b365 332 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b369 333 00 00 FF 18 
3b36d 334 18 18 18 18 
3b371 335 18 18 18 18 
3b375 336 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b379 337 18 18 F8 18 
3b37d 338 18 18 18 18 
3b381 339 18 18 18 00 
3b385 33a 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3b389 33b 00 00 FF 00 
3b38d 33c 00 00 00 00 
3b391 33d 00 00 00 18 
3b395 33e 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b399 33f 18 18 FF 18 
3b39d 340 18 18 18 18 
3b3a1 341 18 18 18 63 
3b3a5 342 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3b3a9 343 36 63 63 7F 
3b3ad 344 63 63 63 63 
3b3b1 345 00 00 00 00 
3b3b5 346 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3b3b9 347 00 1E 30 3E 
3b3bd 348 33 33 33 6E 
3b3c1 349 00 00 00 6C 
3b3c5 34a 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b3c9 34b EC 0C FC 00 
3b3cd 34c 00 00 00 00 
3b3d1 34d 00 00 00 00 
3b3d5 34e 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b3d9 34f FC 0C EC 6C 
3b3dd 350 6C 6C 6C 6C 
3b3e1 351 6C 6C 6C 6C 
3b3e5 352 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b3e9 353 EF 00 FF 00 
3b3ed 354 00 00 00 00 
3b3f1 355 00 00 00 00 
3b3f5 356 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b3f9 357 FF 00 EF 6C 
3b3fd 358 6C 6C 6C 6C 
3b401 359 6C 6C 6C 6C 
3b405 35a 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b409 35b EC 0C EC 6C 
3b40d 35c 6C 6C 6C 6C 
3b411 35d 6C 6C 6C 00 
3b415 35e 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b419 35f FF 00 FF 00 
3b41d 360 00 00 00 00 
3b421 361 00 00 00 6C 
3b425 362 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b429 363 EF 00 EF 6C 
3b42d 364 6C 6C 6C 6C 
3b431 365 6C 6C 6C 00 
3b435 366 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b439 367 63 3E 63 63 
3b43d 368 63 63 3E 63 
3b441 369 00 00 00 00 
3b445 36a 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3b449 36b 30 3C 36 33 
3b44d 36c 33 33 33 6E 
3b451 36d 00 00 00 00 
3b455 36e 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3b459 36f 66 66 6F 66 
3b45d 370 66 66 36 1F 
3b461 371 00 00 00 36 
3b465 372 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3b469 373 66 66 66 66 
3b46d 374 66 66       | 	byte	$66[6]
3b46f 374 36 1F 00 00 
3b473 375 00 00 63 00 
3b477 376 7F 66 46 16 
3b47b 377 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3b47f 378 66 7F 00 00 
3b483 379 00 6C 38 00 
3b487 37a 38 30 30 3C 
3b48b 37b 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3b48f 37c 33 6E 00 00 
3b493 37d 00 36 1C 00 
3b497 37e 63 67 6F 7F 
3b49b 37f 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3b49f 380 63 63 00 00 
3b4a3 381 00 30 18 00 
3b4a7 382 3C 18 18 18 
3b4ab 383 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b4af 384 18 3C 00 00 
3b4b3 385 00 3C 66 00 
3b4b7 386 3C 18 18 18 
3b4bb 387 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b4bf 388 18 3C 00 00 
3b4c3 389 00 00 00 36 
3b4c7 38a 1C 08 00 3E 
3b4cb 38b 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3b4cf 38c 63 3E 00 00 
3b4d3 38d 00 18 18 18 
3b4d7 38e 18 18 18 18 
3b4db 38f 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3b4df 390 00 00 00 00 
3b4e3 391 00 00 00 00 
3b4e7 392 00 00 00 00 | 	byte	$00[12]
3b4eb 393 F8 18 18 18 
3b4ef 394 18 18 18 18 
3b4f3 395 18 FF FF FF 
3b4f7 396 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3b4fb 397 FF FF FF FF 
3b4ff 398 FF FF FF FF 
3b503 399 FF          | 	byte	$ff[9]
3b504 39a 00 00 00 00 
3b508 39b 00 00 00    | 	byte	$00[7]
3b50b 39b FF FF FF FF 
3b50f 39c FF FF FF FF 
3b513 39d FF          | 	byte	$ff[9]
3b514 39e 00 00 00 7E 
3b518 39f 7E 5A 18 18 
3b51c 3a0 18 18 18 18 
3b520 3a1 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3b524 3a2 1C 36 1C 63 
3b528 3a3 63 63 63 63 
3b52c 3a4 63 63 63 63 
3b530 3a5 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b534 3a6 FF FF FF FF 
3b538 3a7 FF FF FF    | 	byte	$ff[7]
3b53b 3a7 00 00 00 00 
3b53f 3a8 00 00 00 00 
3b543 3a9 00          | 	byte	$00[9]
3b544 3aa 30 18 00 3E 
3b548 3ab 63 63 63 63 
3b54c 3ac 63 63 63 63 
3b550 3ad 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b554 3ae 00 00 00 1E 
3b558 3af 33 33 33 1B 
3b55c 3b0 33 63 63 63 
3b560 3b1 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3b564 3b2 1C 36 00 3E 
3b568 3b3 63 63 63 63 
3b56c 3b4 63 63 63 63 
3b570 3b5 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b574 3b6 30 18 00 63 
3b578 3b7 67 6F 7F 7B 
3b57c 3b8 73 63 63 63 
3b580 3b9 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3b584 3ba 00 00 60 30 
3b588 3bb 18 00 3B 66 
3b58c 3bc 66 66 66 66 
3b590 3bd 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b594 3be 00 00 36 1C 
3b598 3bf 08 00 3B 66 
3b59c 3c0 66 66 66 66 
3b5a0 3c1 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b5a4 3c2 36 1C 00 3E 
3b5a8 3c3 63 63 06 1C 
3b5ac 3c4 30 60 63 63 
3b5b0 3c5 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3b5b4 3c6 00 00 36 1C 
3b5b8 3c7 08 00 3E 63 
3b5bc 3c8 06 1C 30 63 
3b5c0 3c9 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3b5c4 3ca 30 18 00 3F 
3b5c8 3cb 66 66 66 3E 
3b5cc 3cc 36 66 66 66 
3b5d0 3cd 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3b5d4 3ce 30 18 00 63 
3b5d8 3cf 63 63 63 63 
3b5dc 3d0 63 63 63 63 
3b5e0 3d1 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b5e4 3d2 00 00 60 30 
3b5e8 3d3 18 00 3B 6E 
3b5ec 3d4 66 06 06 06 
3b5f0 3d5 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3b5f4 3d6 66 33 00 63 
3b5f8 3d7 63 63 63 63 
3b5fc 3d8 63 63 63 63 
3b600 3d9 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b604 3da 00 00 60 30 
3b608 3db 18 00 63 63 
3b60c 3dc 63 63 63 63 
3b610 3dd 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3b614 3de 30 18 00 66 
3b618 3df 66 66 66 3C 
3b61c 3e0 18 18 18 18 
3b620 3e1 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3b624 3e2 00 00 00 08 
3b628 3e3 0C 0C 3F 0C 
3b62c 3e4 0C 0C 0C 6C 
3b630 3e5 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3b634 3e6 30 18 00 00 
3b638 3e7 00 00 00 00 
3b63c 3e8 00 00 00 00 
3b640 3e9 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b644 3ea 00 00 00 00 
3b648 3eb 00 00 00 00 | 	byte	$00[8]
3b64c 3ec 7F 00 00 00 
3b650 3ed 00 00 00 00 
3b654 3ee 66 33 00 00 
3b658 3ef 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3b65c 3f0 00 00 00 00 
3b660 3f1 00 00 00 00 
3b664 3f2 00 00 00 00 
3b668 3f3 00 00 00 00 
3b66c 3f4 00 00 00 00 
3b670 3f5 00          | 	byte	$00[21]
3b671 3f5 0C 06 3C 36 
3b675 3f6 1C 00 00 00 
3b679 3f7 00 00 00 00 
3b67d 3f8 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b681 3f9 00 00 00 63 
3b685 3fa 3E 00 00 00 
3b689 3fb 00 00 00 00 
3b68d 3fc 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b691 3fd 00 00 00 00 
3b695 3fe 3E 63 06 1C 
3b699 3ff 36 63 63 36 
3b69d 400 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3b6a1 401 00 00 00 00 
3b6a5 402 00 00 00 00 | 	byte	$00[8]
3b6a9 403 18 00 7E 00 
3b6ad 404 18 00 00 00 
3b6b1 405 00 00 00 00 
3b6b5 406 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6b9 407 00 00 00 00 
3b6bd 408 00 00 00 00 | 	byte	$00[8]
3b6c1 409 18 30 1E 00 
3b6c5 40a 00 00 1C 36 
3b6c9 40b 36 1C 00 00 
3b6cd 40c 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3b6d1 40d 00 00 00 00 
3b6d5 40e 63 00 00 00 
3b6d9 40f 00 00 00 00 
3b6dd 410 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6e1 411 00 00 00 18 
3b6e5 412 18 00 00 00 
3b6e9 413 00 00 00 00 
3b6ed 414 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6f1 415 00 00 00 00 
3b6f5 416 00          | 	byte	$00[5]
3b6f6 416 CC 66 33 00 
3b6fa 417 33 33 33 33 
3b6fe 418 33 33 6E 00 
3b702 419 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3b706 41a 00 3F 66 66 
3b70a 41b 66 3E 36 66 
3b70e 41c 66 66 6F 00 
3b712 41d 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3b716 41e 36 1C 08 00 
3b71a 41f 3B 6E 66 06 
3b71e 420 06 06 0F 00 
3b722 421 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3b726 422 00 00 00 7E 
3b72a 423 7E 7E 7E 7E 
3b72e 424 7E 7E 00 00 
3b732 425 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3b736 426 00 00 00 00 
3b73a 427 00 00 00 00 
3b73e 428 00 00 00 00 
3b742 429 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b744 42a             | 'vga_font       file "vgafont.def"
3b744 42a 00 00 00 00 
      ...             
3b774 436 00 00 00 00 
3b778 437 00 00 00    | st_font        file "st4font.def"
3b77b 437 FF FF 00 00 
3b77f 438 00 00 00 00 
3b783 439 00 18 18 18 
3b787 43a 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b78b 43b 18 18 18 18 
3b78f 43c 18 18 18 18 
3b793 43d 18          | 	byte	$18[9]
3b794 43e 00 00 00 00 
3b798 43f 00 00 00    | 	byte	$00[7]
3b79b 43f FF FF 18 18 
3b79f 440 18 18 18 18 
3b7a3 441 18 18 18 18 
3b7a7 442 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b7ab 443 FF FF 00 00 
3b7af 444 00 00 00 00 
3b7b3 445 00 18 18 18 
3b7b7 446 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b7bb 447 1F 1F 18 18 
3b7bf 448 18 18 18 18 
3b7c3 449 18 18 18 18 
3b7c7 44a 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b7cb 44b F8 F8 18 18 
3b7cf 44c 18 18 18 18 
3b7d3 44d 18 00 00 00 
3b7d7 44e 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b7db 44f 1F 1F 18 18 
3b7df 450 18 18 18 18 
3b7e3 451 18 00 00 00 
3b7e7 452 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b7eb 453 F8 F8 18 18 
3b7ef 454 18 18 18 18 
3b7f3 455 18 18 18 18 
3b7f7 456 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b7fb 457 1F 1F 00 00 
3b7ff 458 00 00 00 00 
3b803 459 00 18 18 18 
3b807 45a 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b80b 45b F8 F8 00 00 
3b80f 45c 00 00 00 00 
3b813 45d 00 18 18 18 
3b817 45e 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b81b 45f FF FF 18 18 
3b81f 460 18 18 18 18 
3b823 461 18 00 00 18 
3b827 462 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3b82b 463 66 7E 7E 66 
3b82f 464 66 66 66 30 
3b833 465 18 00 00 7E 
3b837 466 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3b83b 467 3E 06 06 06 
3b83f 468 06 7E 7E 18 
3b843 469 0C 30 18 3C 
3b847 46a 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3b84b 46b 06 06 06 66 
3b84f 46c 66 7E 3C 00 
3b853 46d 00 30 18 66 
3b857 46e 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3b85b 46f 7E 7E 76 76 
3b85f 470 66 66 66 00 
3b863 471 00 30 18 7C 
3b867 472 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3b86b 473 1C 38 70 60 
3b86f 474 60 7E 3E 00 
3b873 475 00 30 18 7E 
3b877 476 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3b87b 477 18 0C 0C 06 
3b87f 478 06 7E 7E 00 
3b883 479 00 18 18 00 
3b887 47a 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3b88b 47b 18 18 0C 0C 
3b88f 47c 06 7E 7E 00 
3b893 47d 00 30 18 3C 
3b897 47e 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3b89b 47f 66 66 66 66 
3b89f 480 66          | 	byte	$66[5]
3b8a0 481 7E 3C 00 00 
3b8a4 482 00 00 06 06 
3b8a8 483 06 06 16 1E 
3b8ac 484 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3b8b0 485 7E 7E 00 00 
3b8b4 486 00 00 00 00 
3b8b8 487 00 3C 7C 60 
3b8bc 488 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3b8c0 489 7E 7C 30 18 
3b8c4 48a 00 00 00 00 
3b8c8 48b 00 3C 7E 66 
3b8cc 48c 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3b8d0 48d 7E 7C 18 0C 
3b8d4 48e 00 00 30 18 
3b8d8 48f 00 3C 3E 06 
3b8dc 490 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3b8e0 491 7E 7C 00 00 
3b8e4 492 00 00 30 18 
3b8e8 493 00 3E 7E 66 
3b8ec 494 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3b8f0 495 66 66 00 00 
3b8f4 496 00 00 30 18 
3b8f8 497 00 7C 7E 06 
3b8fc 498 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3b900 499 7E 3E 00 00 
3b904 49a 00 00 30 18 
3b908 49b 00 7E 7E 30 
3b90c 49c 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b910 49d 7E 7E 00 00 
3b914 49e 00 00 18 18 
3b918 49f 00 7E 7E 30 
3b91c 4a0 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b920 4a1 7E 7E 00 00 
3b924 4a2 00 00 30 18 
3b928 4a3 00 3C 7E 66 
3b92c 4a4 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3b930 4a5 7E 3C 00 00 
3b934 4a6 00 00 1C 1C 
3b938 4a7 18 18 38 3C 
3b93c 4a8 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3b940 4a9 3C 3C 00 00 
3b944 4aa 00 00 00 00 
3b948 4ab 00 00 00 00 
3b94c 4ac 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b950 4ad 00 00 00 00 
3b954 4ae 00 00       | 	byte	$00[6]
3b956 4ae 18 18 18 18 
3b95a 4af 18 18 18 18 | 	byte	$18[8]
3b95e 4b0 00 00 18 18 
3b962 4b1 00 00 00 00 
3b966 4b2 66 66 66 66 
3b96a 4b3 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3b96e 4b4 00 00 00 00 
3b972 4b5 00 00 00 00 
3b976 4b6 00          | 	byte	$00[9]
3b977 4b6 66 66 FF FF 
3b97b 4b7 66 66 FF FF 
3b97f 4b8 66 66 00 00 
3b983 4b9 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3b987 4ba 7C 7E 06 06 
3b98b 4bb 3E 7C 60 60 
3b98f 4bc 7E 3E 18 18 
3b993 4bd 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3b997 4be 66 30 30 18 
3b99b 4bf 18 0C 0C 66 
3b99f 4c0 66 00 00 00 
3b9a3 4c1 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3b9a7 4c2 66 66 3C 1C 
3b9ab 4c3 1C FC FE 66 
3b9af 4c4 66 FE FC 00 
3b9b3 4c5 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3b9b7 4c6 18 18 18 18 
3b9bb 4c7 00 00 00 00 
3b9bf 4c8 00 00 00 00 
3b9c3 4c9 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3b9c7 4ca 18 1C 0C 0C 
3b9cb 4cb 0C 0C 0C 0C 
3b9cf 4cc 1C 18 30 00 
3b9d3 4cd 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3b9d7 4ce 18 38 30 30 
3b9db 4cf 30 30 30 30 
3b9df 4d0 38 18 0C 00 
3b9e3 4d1 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3b9e7 4d2 66 66 3C 3C 
3b9eb 4d3 FF FF 3C 3C 
3b9ef 4d4 66 66 00 00 
3b9f3 4d5 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3b9f7 4d6 00 18 18 18 
3b9fb 4d7 7E 7E 18 18 
3b9ff 4d8 18 00 00 00 
3ba03 4d9 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ba07 4da 00 00 00 00 
3ba0b 4db 00 00       | 	byte	$00[6]
3ba0d 4dc 18 18 18 18 
3ba11 4dd 18          | 	byte	$18[5]
3ba12 4dd 0C 04 00 00 
3ba16 4de 00 00 00 00 
3ba1a 4df 7E 7E 00 00 
3ba1e 4e0 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3ba22 4e1 00 00 00 00 
3ba26 4e2 00 00 00 00 
3ba2a 4e3 00 00 00 00 
3ba2e 4e4 00          | 	byte	$00[13]
3ba2f 4e4 18 18 18 00 
3ba33 4e5 00 00 00 60 
3ba37 4e6 60 60 30 30 
3ba3b 4e7 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3ba3f 4e8 06 06 06 00 
3ba43 4e9 00 00 00 3C 
3ba47 4ea 7E 66 66 66 
3ba4b 4eb 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3ba4f 4ec 66 7E 3C 00 
3ba53 4ed 00 00 00 18 
3ba57 4ee 18 1C 1C 18 
3ba5b 4ef 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3ba5f 4f0 18 7E 7E 00 
3ba63 4f1 00 00 00 3C 
3ba67 4f2 7E 66 66 30 
3ba6b 4f3 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3ba6f 4f4 0C 7E 7E 00 
3ba73 4f5 00 00 00 7E 
3ba77 4f6 7E 30 30 18 
3ba7b 4f7 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3ba7f 4f8 66 7E 3C 00 
3ba83 4f9 00 00 00 30 
3ba87 4fa 30 38 38 3C 
3ba8b 4fb 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3ba8f 4fc 7E 30 30 00 
3ba93 4fd 00 00 00 7E 
3ba97 4fe 7E 06 06 3E 
3ba9b 4ff 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3ba9f 500 66 7E 3C 00 
3baa3 501 00 00 00 38 
3baa7 502 3C 0E 06 06 
3baab 503 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3baaf 504 66 7E 3C 00 
3bab3 505 00 00 00 7E 
3bab7 506 7E 60 60 30 
3babb 507 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3babf 508 0C 0C 0C 00 
3bac3 509 00 00 00 3C 
3bac7 50a 7E 66 66 3C 
3bacb 50b 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3bacf 50c 66 7E 3C 00 
3bad3 50d 00 00 00 3C 
3bad7 50e 7E 66 66 7E 
3badb 50f 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3badf 510 70 3C 1C 00 
3bae3 511 00 00 00 00 
3bae7 512 00 00 18 18 
3baeb 513 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3baef 514 18 18 18 00 
3baf3 515 00 00 00 00 
3baf7 516 00 00 18 18 
3bafb 517 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3baff 518 18 18 18 0C 
3bb03 519 04 00 00 00 
3bb07 51a 70 38 1C 0E 
3bb0b 51b 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3bb0f 51c 70 00 00 00 
3bb13 51d 00 00 00 00 
3bb17 51e 00 00 7E 7E 
3bb1b 51f 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3bb1f 520 00 00 00 00 
3bb23 521 00 00 00 00 | 	byte	$00[8]
3bb27 522 0E 1C 38 70 
3bb2b 523 E0 70 38 1C 
3bb2f 524 0E 00 00 00 
3bb33 525 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3bb37 526 7E 66 66 30 
3bb3b 527 30 18 18 18 
3bb3f 528 00 18 18 00 
3bb43 529 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3bb47 52a 7E 66 66 66 
3bb4b 52b 66 36 06 66 
3bb4f 52c 66 7E 3C 00 
3bb53 52d 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3bb57 52e 3C 7E 66 66 
3bb5b 52f 66 7E 7E 66 
3bb5f 530 66 66 66 00 
3bb63 531 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3bb67 532 7E 66 66 7E 
3bb6b 533 3E 66 66 66 
3bb6f 534 66 7E 3E 00 
3bb73 535 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3bb77 536 7E 66 66 06 
3bb7b 537 06 06 06 66 
3bb7f 538 66 7E 3C 00 
3bb83 539 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3bb87 53a 7E 66 66 66 
3bb8b 53b 66 66 66 66 
3bb8f 53c 66 7E 3E 00 
3bb93 53d 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3bb97 53e 7E 06 06 3E 
3bb9b 53f 3E 06 06 06 
3bb9f 540 06 7E 7E 00 
3bba3 541 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3bba7 542 7E 06 06 3E 
3bbab 543 3E 06 06 06 
3bbaf 544 06 06 06 00 
3bbb3 545 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3bbb7 546 7E 06 06 76 
3bbbb 547 76 66 66 66 
3bbbf 548 66 7E 3C 00 
3bbc3 549 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3bbc7 54a 66 66 66 7E 
3bbcb 54b 7E 66 66 66 
3bbcf 54c 66 66 66 00 
3bbd3 54d 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3bbd7 54e 7E 18 18 18 
3bbdb 54f 18 18 18 18 
3bbdf 550 18 7E 7E 00 
3bbe3 551 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3bbe7 552 60 60 60 60 
3bbeb 553 60 60 60    | 	byte	$60[7]
3bbee 554 66 66 7E 3C 
3bbf2 555 00 00 00 00 
3bbf6 556 66 66 36 36 
3bbfa 557 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3bbfe 558 66 66 C6 C6 
3bc02 559 00 00 00 00 
3bc06 55a 06 06 06 06 
3bc0a 55b 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3bc0e 55c 06 06 7E 7E 
3bc12 55d 00 00 00 00 
3bc16 55e C6 C6 EE EE 
3bc1a 55f FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3bc1e 560 C6 C6 C6 C6 
3bc22 561 00 00 00 00 
3bc26 562 66 66 66 6E 
3bc2a 563 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3bc2e 564 76 66 66 66 
3bc32 565 00 00 00 00 
3bc36 566 3C 7E 66 66 
3bc3a 567 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3bc3e 568 66 66 7E 3C 
3bc42 569 00 00 00 00 
3bc46 56a 3E 7E 66 66 
3bc4a 56b 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3bc4e 56c 06 06 06 06 
3bc52 56d 00 00 00 00 
3bc56 56e 3C 7E 66 66 
3bc5a 56f 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3bc5e 570 66 56 3E 6C 
3bc62 571 00 00 00 00 
3bc66 572 3E 7E 66 66 
3bc6a 573 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3bc6e 574 66 66 C6 C6 
3bc72 575 00 00 00 00 
3bc76 576 7C 7E 06 06 
3bc7a 577 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3bc7e 578 60 60 7E 3E 
3bc82 579 00 00 00 00 
3bc86 57a 7E 7E 18 18 
3bc8a 57b 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3bc8e 57c 18 18 18 18 
3bc92 57d 00 00 00 00 
3bc96 57e 66 66 66 66 
3bc9a 57f 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3bc9e 580 66 66 7E 3C 
3bca2 581 00 00 00 00 
3bca6 582 66 66 66 66 
3bcaa 583 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3bcae 584 3C 3C 18 18 
3bcb2 585 00 00 00 00 
3bcb6 586 C6 C6 C6 C6 
3bcba 587 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3bcbe 588 FE EE C6 82 
3bcc2 589 00 00 00 00 
3bcc6 58a 66 66 66 3C 
3bcca 58b 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3bcce 58c 3C 66 66 66 
3bcd2 58d 00 00 00 00 
3bcd6 58e 66 66 66 66 
3bcda 58f 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3bcde 590 18 18 18 18 
3bce2 591 00 00 00 00 
3bce6 592 7E 7E 30 30 
3bcea 593 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3bcee 594 06 06 7E 7E 
3bcf2 595 00 00 00 00 
3bcf6 596 3C 3C 0C 0C 
3bcfa 597 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3bcfe 598 0C 0C 3C 3C 
3bd02 599 00 00 00 00 
3bd06 59a 06 06 0C 0C 
3bd0a 59b 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3bd0e 59c 60 60 C0 C0 
3bd12 59d 00 00 00 00 
3bd16 59e 3C 3C 30 30 
3bd1a 59f 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3bd1e 5a0 30 30 3C 3C 
3bd22 5a1 00 00 00 00 
3bd26 5a2 18 18 3C 3C 
3bd2a 5a3 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3bd2e 5a4 00 00 00 00 
3bd32 5a5 00 00 00 00 
3bd36 5a6 00 00 00 00 
3bd3a 5a7 00 00 00 00 
3bd3e 5a8 00 00       | 	byte	$00[18]
3bd40 5a9 FE FE 00 00 
3bd44 5aa 00 00 0C 0C 
3bd48 5ab 18 18 00 00 
3bd4c 5ac 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3bd50 5ad 00 00 00 00 
3bd54 5ae 00 00 00 00 
3bd58 5af 00          | 	byte	$00[9]
3bd59 5af 3C 7C 60 7C 
3bd5d 5b0 7E 66 66 7E 
3bd61 5b1 7C 00 00 00 
3bd65 5b2 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3bd69 5b3 3E 7E 66 66 
3bd6d 5b4 66 66 66 7E 
3bd71 5b5 3E 00 00 00 
3bd75 5b6 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3bd79 5b7 3C 3E 06 06 
3bd7d 5b8 06 06 06 7E 
3bd81 5b9 7C 00 00 00 
3bd85 5ba 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3bd89 5bb 7C 7E 66 66 
3bd8d 5bc 66 66 66 7E 
3bd91 5bd 7C 00 00 00 
3bd95 5be 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3bd99 5bf 3C 7E 66 66 
3bd9d 5c0 7E 06 06 7E 
3bda1 5c1 7C 00 00 00 
3bda5 5c2 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3bda9 5c3 18 7E 7E 18 
3bdad 5c4 18 18 18 18 
3bdb1 5c5 18 00 00 00 
3bdb5 5c6 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bdb9 5c7 7C 7E 66 66 
3bdbd 5c8 66 66 7E 7C 
3bdc1 5c9 60 7E 3E 00 
3bdc5 5ca 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3bdc9 5cb 3E 7E 66 66 
3bdcd 5cc 66 66 66 66 
3bdd1 5cd 66 00 00 00 
3bdd5 5ce 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3bdd9 5cf 1C 1C 18 18 
3bddd 5d0 18 18 18 3C 
3bde1 5d1 3C 00 00 00 
3bde5 5d2 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3bde9 5d3 30 30 30 30 
3bded 5d4 30 30 30 30 
3bdf1 5d5 30          | 	byte	$30[9]
3bdf2 5d5 3E 1E 00 00 
3bdf6 5d6 06 06 06 36 
3bdfa 5d7 36 1E 1E 1E 
3bdfe 5d8 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3be02 5d9 00 00 00 00 
3be06 5da 1C 1C 18 18 
3be0a 5db 18 18 18 18 
3be0e 5dc 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3be12 5dd 00 00 00 00 
3be16 5de 00 00 00    | 	byte	$00[7]
3be19 5df 6C FE FE D6 
3be1d 5e0 D6 C6 C6 C6 
3be21 5e1 C6 00 00 00 
3be25 5e2 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3be29 5e3 3E 7E 66 66 
3be2d 5e4 66 66 66 66 
3be31 5e5 66 00 00 00 
3be35 5e6 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3be39 5e7 3C 7E 66 66 
3be3d 5e8 66 66 66 7E 
3be41 5e9 3C 00 00 00 
3be45 5ea 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3be49 5eb 3E 7E 66 66 
3be4d 5ec 66 66 66 7E 
3be51 5ed 3E 06 06 00 
3be55 5ee 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3be59 5ef 7C 7E 66 66 
3be5d 5f0 66 66 66 7E 
3be61 5f1 7C 60 60 00 
3be65 5f2 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3be69 5f3 3E 7E 66 06 
3be6d 5f4 06 06 06 06 
3be71 5f5 06 00 00 00 
3be75 5f6 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3be79 5f7 7C 7E 06 0E 
3be7d 5f8 3C 70 60 7E 
3be81 5f9 3E 00 00 00 
3be85 5fa 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3be89 5fb 7E 7E 18 18 
3be8d 5fc 18 18 18 78 
3be91 5fd 70 00 00 00 
3be95 5fe 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3be99 5ff 66 66 66 66 
3be9d 600 66 66 66    | 	byte	$66[7]
3bea0 601 7E 7C 00 00 
3bea4 602 00 00 00 00 
3bea8 603 00 66 66 66 
3beac 604 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3beb0 605 18 18 00 00 
3beb4 606 00 00 00 00 
3beb8 607 00 C6 C6 D6 
3bebc 608 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3bec0 609 C6 82 00 00 
3bec4 60a 00 00 00 00 
3bec8 60b 00 66 66 3C 
3becc 60c 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3bed0 60d 66 66 00 00 
3bed4 60e 00 00 00 00 
3bed8 60f 00 66 66 66 
3bedc 610 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3bee0 611 7C 60 7E 3E 
3bee4 612 00 00 00 00 
3bee8 613 00 7E 7E 30 
3beec 614 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3bef0 615 7E 7E 00 00 
3bef4 616 00 00 30 18 
3bef8 617 18 18 18 0C 
3befc 618 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3bf00 619 18 30 00 00 
3bf04 61a 00 00 18 18 
3bf08 61b 18 18 18 18 
3bf0c 61c 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bf10 61d 18 18 00 00 
3bf14 61e 00 00 0C 18 
3bf18 61f 18 18 18 30 
3bf1c 620 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3bf20 621 18 0C 00 00 
3bf24 622 00 00 6C 7E 
3bf28 623 36 00 00 00 
3bf2c 624 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3bf30 625 00 00 00 00 
3bf34 626 00 00 00 00 
3bf38 627 00          | 	byte	$00[9]
3bf39 627 18 18 18 18 
3bf3d 628 18 18 00 00 
3bf41 629 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3bf44 62a             | 'amiga_font     file "amigafont.def"
3bf44 62a 00 6C FE FE 
3bf48 62b 7C 38 10 00 
3bf4c 62c 18 18 18 F8 
3bf50 62d F8 18 18 18 | a8_font        file "atari8.fnt"
3bf54 62e C0 C0 C0 C0 
3bf58 62f C0 C0 C0 C0 | 	byte	$c0[8]
3bf5c 630 18 18 18 1F 
3bf60 631 1F 00 00 00 
3bf64 632 18 18 18 1F 
3bf68 633 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3bf6c 634 00 00 00 1F 
3bf70 635 1F 18 18 18 
3bf74 636 C0 E0 70 38 
3bf78 637 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3bf7c 638 03 07 0E 1C 
3bf80 639 38 70 E0 C0 
3bf84 63a 80 C0 E0 F0 
3bf88 63b F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3bf8c 63c 00 00 00 00 
3bf90 63d F0 F0 F0 F0 
3bf94 63e 01 03 07 0F 
3bf98 63f 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3bf9c 640 F0 F0 F0 F0 
3bfa0 641 00 00 00 00 
3bfa4 642 0F 0F 0F 0F 
3bfa8 643 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3bfac 644 FF FF 00 00 
3bfb0 645 00 00 00 00 
3bfb4 646 00 00 00 00 
3bfb8 647 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3bfbc 648 00 00 00 00 
3bfc0 649 0F 0F 0F 0F 
3bfc4 64a 00 38 38 EE 
3bfc8 64b EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3bfcc 64c 00 00 00 F8 
3bfd0 64d F8 18 18 18 
3bfd4 64e 00 00 00 FF 
3bfd8 64f FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3bfdc 650 18 18 18 FF 
3bfe0 651 FF 18 18 18 
3bfe4 652 00 00 3C 7E 
3bfe8 653 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3bfec 654 00 00 00 00 
3bff0 655 FF FF FF FF 
3bff4 656 03 03 03 03 
3bff8 657 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3bffc 658 00 00 00 FF 
3c000 659 FF 18 18 18 
3c004 65a 18 18 18 FF 
3c008 65b FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3c00c 65c 0F 0F 0F 0F 
3c010 65d 0F 0F 0F 0F | 	byte	$0f[8]
3c014 65e 18 18 18 F8 
3c018 65f F8 00 00 00 
3c01c 660 1E 06 1E 06 
3c020 661 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3c024 662 00 18 3C 7E 
3c028 663 18 18 18 00 
3c02c 664 00 18 18 18 
3c030 665 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3c034 666 00 18 0C 7E 
3c038 667 0C 18 00 00 
3c03c 668 00 18 30 7E 
3c040 669 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3c044 66a 00 00 00 00 
3c048 66b 00 00 00 00 
3c04c 66c 00          | 	byte	$00[9]
3c04d 66c 18 18 18 18 
3c051 66d 00 18 00 00 
3c055 66e 66 66 66 00 
3c059 66f 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3c05d 670 66 FF 66 66 
3c061 671 FF 66 00 18 
3c065 672 7C 06 3C 60 
3c069 673 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3c06d 674 66 36 18 0C 
3c071 675 66 62 00 38 
3c075 676 6C 38 1C F6 
3c079 677 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3c07d 678 18 18 18 00 
3c081 679 00 00 00 00 
3c085 67a 70 38 18 18 
3c089 67b 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3c08d 67c 0E 1C 18 18 
3c091 67d 1C 0E 00 00 
3c095 67e 66 3C FF 3C 
3c099 67f 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3c09d 680 18 18 7E 18 
3c0a1 681 18 00 00 00 
3c0a5 682 00 00 00 00 
3c0a9 683 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3c0ad 684 00 00 7E 00 
3c0b1 685 00 00 00 00 
3c0b5 686 00 00 00 00 
3c0b9 687 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3c0bd 688 60 30 18 0C 
3c0c1 689 06 02 00 00 
3c0c5 68a 3C 66 76 6E 
3c0c9 68b 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3c0cd 68c 18 1C 18 18 
3c0d1 68d 18 7E 00 00 
3c0d5 68e 3C 66 30 18 
3c0d9 68f 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3c0dd 690 7E 30 18 30 
3c0e1 691 66 3C 00 00 
3c0e5 692 30 38 3C 36 
3c0e9 693 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3c0ed 694 7E 06 3E 60 
3c0f1 695 66 3C 00 00 
3c0f5 696 3C 06 3E 66 
3c0f9 697 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3c0fd 698 7E 60 30 18 
3c101 699 0C 0C 00 00 
3c105 69a 3C 66 3C 66 
3c109 69b 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3c10d 69c 3C 66 7C 60 
3c111 69d 30 1C 00 00 
3c115 69e 00 18 18 00 
3c119 69f 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3c11d 6a0 00 18 18 00 
3c121 6a1 18 18 0C 60 
3c125 6a2 30 18 0C 18 
3c129 6a3 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3c12d 6a4 00 7E 00 00 
3c131 6a5 7E 00 00 06 
3c135 6a6 0C 18 30 18 
3c139 6a7 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3c13d 6a8 3C 66 30 18 
3c141 6a9 00 18 00 00 
3c145 6aa 3C 66 76 76 
3c149 6ab 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3c14d 6ac 18 3C 66 66 
3c151 6ad 7E 66 00 00 
3c155 6ae 3E 66 3E 66 
3c159 6af 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3c15d 6b0 3C 66 06 06 
3c161 6b1 66 3C 00 00 
3c165 6b2 1E 36 66 66 
3c169 6b3 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3c16d 6b4 7E 06 3E 06 
3c171 6b5 06 7E 00 00 
3c175 6b6 7E 06 3E 06 
3c179 6b7 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3c17d 6b8 7C 06 06 76 
3c181 6b9 66 7C 00 00 
3c185 6ba 66 66 7E 66 
3c189 6bb 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3c18d 6bc 7E 18 18 18 
3c191 6bd 18 7E 00 00 
3c195 6be 60 60 60 60 
3c199 6bf 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3c19d 6c0 66 36 1E 1E 
3c1a1 6c1 36 66 00 00 
3c1a5 6c2 06 06 06 06 
3c1a9 6c3 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3c1ad 6c4 C6 EE FE D6 
3c1b1 6c5 C6 C6 00 00 
3c1b5 6c6 66 6E 7E 7E 
3c1b9 6c7 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3c1bd 6c8 3C 66 66 66 
3c1c1 6c9 66 3C 00 00 
3c1c5 6ca 3E 66 66 3E 
3c1c9 6cb 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3c1cd 6cc 3C 66 66 66 
3c1d1 6cd 36 6C 00 00 
3c1d5 6ce 3E 66 66 3E 
3c1d9 6cf 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3c1dd 6d0 3C 06 3C 60 
3c1e1 6d1 60 3C 00 00 
3c1e5 6d2 7E 18 18 18 
3c1e9 6d3 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3c1ed 6d4 66 66 66 66 
3c1f1 6d5 66          | 	byte	$66[5]
3c1f2 6d5 7E 00 00 66 
3c1f6 6d6 66 66 66 3C 
3c1fa 6d7 18 00 00 C6 
3c1fe 6d8 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3c202 6d9 C6 00 00 66 
3c206 6da 66 3C 3C 66 
3c20a 6db 66 00 00 66 
3c20e 6dc 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3c212 6dd 18 00 00 7E 
3c216 6de 30 18 0C 06 
3c21a 6df 7E 00 00 78 
3c21e 6e0 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3c222 6e1 78 00 00 02 
3c226 6e2 06 0C 18 30 
3c22a 6e3 60 00 00 1E 
3c22e 6e4 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3c232 6e5 1E 00 00 10 
3c236 6e6 38 6C C6 00 
3c23a 6e7 00 00 00 00 
3c23e 6e8 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c242 6e9 FF 00 00 18 
3c246 6ea 3C 7E 7E 3C 
3c24a 6eb 18 00 00 00 
3c24e 6ec 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3c252 6ed 7C 00 00 06 
3c256 6ee 06 3E 66 66 
3c25a 6ef 3E 00 00 00 
3c25e 6f0 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3c262 6f1 3C 00 00 60 
3c266 6f2 60 7C 66 66 
3c26a 6f3 7C 00 00 00 
3c26e 6f4 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3c272 6f5 3C 00 00 70 
3c276 6f6 18 7C 18 18 
3c27a 6f7 18 00 00 00 
3c27e 6f8 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3c282 6f9 60 3E 00 06 
3c286 6fa 06 3E 66 66 
3c28a 6fb 66 00 00 18 
3c28e 6fc 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3c292 6fd 3C 00 00 60 
3c296 6fe 00 60 60 60 
3c29a 6ff 60 3C 00 06 
3c29e 700 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3c2a2 701 66 00 00 1C 
3c2a6 702 18 18 18 18 
3c2aa 703 3C 00 00 00 
3c2ae 704 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3c2b2 705 C6 00 00 00 
3c2b6 706 3E 66 66 66 
3c2ba 707 66 00 00 00 
3c2be 708 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3c2c2 709 3C 00 00 00 
3c2c6 70a 3E 66 66 3E 
3c2ca 70b 06 06 00 00 
3c2ce 70c 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3c2d2 70d 60 60 00 00 
3c2d6 70e 3E 66 06 06 
3c2da 70f 06 00 00 00 
3c2de 710 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3c2e2 711 3E 00 00 18 
3c2e6 712 7E 18 18 18 
3c2ea 713 70 00 00 00 
3c2ee 714 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3c2f2 715 7C 00 00 00 
3c2f6 716 66 66 66 3C 
3c2fa 717 18 00 00 00 
3c2fe 718 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3c302 719 6C 00 00 00 
3c306 71a 66 3C 18 3C 
3c30a 71b 66 00 00 00 
3c30e 71c 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3c312 71d 30 1E 00 00 
3c316 71e 7E 30 18 0C 
3c31a 71f 7E 00 00 18 
3c31e 720 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3c322 721 3C 00 18 18 
3c326 722 18 18 18 18 
3c32a 723 18 18 00 7E 
3c32e 724 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3c332 725 60 00 10 18 
3c336 726 1C 1E 1C 18 
3c33a 727 10 00 08 18 
3c33e 728 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3c342 729 08 00       | 	byte	$08, $00
3c344 72a 00 00 00 00 
3c348 72b 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3c349 72b 80 00 00 00 
3c34d 72c 00 80 00 00 
3c351 72d 80 80 00 00 
3c355 72e 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3c359 72f 80 00 80 00 
3c35d 730 00 40 80 00 
3c361 731 AA AA AA 00 
3c365 732 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3c369 733 FF 00 00 00 
3c36d 734 00 FF 00 00 
3c371 735 FF FF 00 00 
3c375 736 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3c379 737 FF 00 FF 00 
3c37d 738 00 FF FF 00 
3c381 739 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3c384 73a 00 00 00 00 
3c388 73b 00          | ataripalette   file "ataripalettep2.def"
3c389 73b 11 11 11 00 
3c38d 73c 22 22 22 00 
3c391 73d 33 33 33 00 
3c395 73e 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3c399 73f 55 55 55 00 
3c39d 740 66 66 66 00 
3c3a1 741 77 77 77 00 
3c3a5 742 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3c3a9 743 99 99 99 00 
3c3ad 744 AA AA AA 00 
3c3b1 745 BB BB BB 00 
3c3b5 746 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3c3b9 747 DD DD DD 00 
3c3bd 748 EE EE EE 00 
3c3c1 749 FF FF FF 00 
3c3c5 74a 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3c3c9 74b 00 14 40 00 
3c3cd 74c 00 1E 60 00 
3c3d1 74d 00 28 80 00 
3c3d5 74e 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3c3d9 74f 00 3C BF 00 
3c3dd 750 00 46 DF 00 
3c3e1 751 00 50 FF 00 
3c3e5 752 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3c3e9 753 39 77 FF 00 
3c3ed 754 55 8A FF 00 
3c3f1 755 71 9E FF 00 
3c3f5 756 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3c3f9 757 AA C5 FF 00 
3c3fd 758 C6 D8 FF 00 
3c401 759 E3 EC FF 00 
3c405 75a 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3c409 75b 00 00 40 00 
3c40d 75c 00 00 60 00 
3c411 75d 00 00 80 00 
3c415 75e 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3c419 75f 00 00 BF 00 
3c41d 760 00 00 DF 00 
3c421 761 00 00 FF 00 
3c425 762 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3c429 763 39 39 FF 00 
3c42d 764 55 55 FF 00 
3c431 765 71 71 FF 00 
3c435 766 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3c439 767 AA AA FF 00 
3c43d 768 C6 C6 FF 00 
3c441 769 E3 E3 FF 00 
3c445 76a 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3c449 76b 20 00 40 00 
3c44d 76c 30 00 60 00 
3c451 76d 40 00 80 00 
3c455 76e 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3c459 76f 60 00 BF 00 
3c45d 770 70 00 DF 00 
3c461 771 80 00 FF 00 
3c465 772 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3c469 773 9C 39 FF 00 
3c46d 774 AA 55 FF 00 
3c471 775 B8 71 FF 00 
3c475 776 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3c479 777 D5 AA FF 00 
3c47d 778 E3 C6 FF 00 
3c481 779 F1 E3 FF 00 
3c485 77a 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3c489 77b 40 00 40 00 
3c48d 77c 60 00 60 00 
3c491 77d 80 00 80 00 
3c495 77e 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3c499 77f BF 00 BF 00 
3c49d 780 DF 00 DF 00 
3c4a1 781 FF 00 FF 00 
3c4a5 782 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3c4a9 783 FF 39 FF 00 
3c4ad 784 FF 55 FF 00 
3c4b1 785 FF 71 FF 00 
3c4b5 786 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3c4b9 787 FF AA FF 00 
3c4bd 788 FF C6 FF 00 
3c4c1 789 FF E3 FF 00 
3c4c5 78a 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3c4c9 78b 40 00 20 00 
3c4cd 78c 60 00 30 00 
3c4d1 78d 80 00 40 00 
3c4d5 78e 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3c4d9 78f BF 00 60 00 
3c4dd 790 DF 00 70 00 
3c4e1 791 FF 00 80 00 
3c4e5 792 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3c4e9 793 FF 39 9C 00 
3c4ed 794 FF 55 AA 00 
3c4f1 795 FF 71 B8 00 
3c4f5 796 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3c4f9 797 FF AA D5 00 
3c4fd 798 FF C6 E3 00 
3c501 799 FF E3 F1 00 
3c505 79a 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3c509 79b 40 00 00 00 
3c50d 79c 60 00 00 00 
3c511 79d 80 00 00 00 
3c515 79e 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3c519 79f BF 00 00 00 
3c51d 7a0 DF 00 00 00 
3c521 7a1 FF 00 00 00 
3c525 7a2 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3c529 7a3 FF 39 39 00 
3c52d 7a4 FF 55 55 00 
3c531 7a5 FF 71 71 00 
3c535 7a6 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3c539 7a7 FF AA AA 00 
3c53d 7a8 FF C6 C6 00 
3c541 7a9 FF E3 E3 00 
3c545 7aa 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3c549 7ab 40 10 00 00 
3c54d 7ac 60 18 00 00 
3c551 7ad 80 20 00 00 
3c555 7ae 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3c559 7af BF 30 00 00 
3c55d 7b0 DF 38 00 00 
3c561 7b1 FF 40 00 00 
3c565 7b2 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3c569 7b3 FF 6A 39 00 
3c56d 7b4 FF 80 55 00 
3c571 7b5 FF 95 71 00 
3c575 7b6 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3c579 7b7 FF BF AA 00 
3c57d 7b8 FF D5 C6 00 
3c581 7b9 FF EA E3 00 
3c585 7ba 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3c589 7bb 40 20 00 00 
3c58d 7bc 60 30 00 00 
3c591 7bd 80 40 00 00 
3c595 7be 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3c599 7bf BF 60 00 00 
3c59d 7c0 DF 70 00 00 
3c5a1 7c1 FF 80 00 00 
3c5a5 7c2 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3c5a9 7c3 FF 9C 39 00 
3c5ad 7c4 FF AA 55 00 
3c5b1 7c5 FF B8 71 00 
3c5b5 7c6 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3c5b9 7c7 FF D5 AA 00 
3c5bd 7c8 FF E3 C6 00 
3c5c1 7c9 FF F1 E3 00 
3c5c5 7ca 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3c5c9 7cb 40 30 00 00 
3c5cd 7cc 60 48 00 00 
3c5d1 7cd 80 60 00 00 
3c5d5 7ce 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3c5d9 7cf BF 90 00 00 
3c5dd 7d0 DF A8 00 00 
3c5e1 7d1 FF C0 00 00 
3c5e5 7d2 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3c5e9 7d3 FF CE 39 00 
3c5ed 7d4 FF D5 55 00 
3c5f1 7d5 FF DC 71 00 
3c5f5 7d6 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3c5f9 7d7 FF EA AA 00 
3c5fd 7d8 FF F1 C6 00 
3c601 7d9 FF F8 E3 00 
3c605 7da 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3c609 7db 30 40 00 00 
3c60d 7dc 48 60 00 00 
3c611 7dd 60 80 00 00 
3c615 7de 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3c619 7df 90 BF 00 00 
3c61d 7e0 A8 DF 00 00 
3c621 7e1 C0 FF 00 00 
3c625 7e2 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3c629 7e3 CE FF 39 00 
3c62d 7e4 D5 FF 55 00 
3c631 7e5 DC FF 71 00 
3c635 7e6 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3c639 7e7 EA FF AA 00 
3c63d 7e8 F1 FF C6 00 
3c641 7e9 F8 FF E3 00 
3c645 7ea 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3c649 7eb 00 40 00 00 
3c64d 7ec 00 60 00 00 
3c651 7ed 00 80 00 00 
3c655 7ee 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3c659 7ef 00 BF 00 00 
3c65d 7f0 00 DF 00 00 
3c661 7f1 00 FF 00 00 
3c665 7f2 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3c669 7f3 39 FF 39 00 
3c66d 7f4 55 FF 55 00 
3c671 7f5 71 FF 71 00 
3c675 7f6 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3c679 7f7 AA FF AA 00 
3c67d 7f8 C6 FF C6 00 
3c681 7f9 E3 FF E3 00 
3c685 7fa 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3c689 7fb 00 40 14 00 
3c68d 7fc 00 60 1E 00 
3c691 7fd 00 80 28 00 
3c695 7fe 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3c699 7ff 00 BF 3C 00 
3c69d 800 00 DF 46 00 
3c6a1 801 00 FF 50 00 
3c6a5 802 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3c6a9 803 39 FF 77 00 
3c6ad 804 55 FF 8A 00 
3c6b1 805 71 FF 9E 00 
3c6b5 806 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3c6b9 807 AA FF C5 00 
3c6bd 808 C6 FF D8 00 
3c6c1 809 E3 FF EC 00 
3c6c5 80a 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3c6c9 80b 00 40 28 00 
3c6cd 80c 00 60 3C 00 
3c6d1 80d 00 80 50 00 
3c6d5 80e 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3c6d9 80f 00 BF 78 00 
3c6dd 810 00 DF 8C 00 
3c6e1 811 00 FF A0 00 
3c6e5 812 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3c6e9 813 39 FF B5 00 
3c6ed 814 55 FF C0 00 
3c6f1 815 71 FF CA 00 
3c6f5 816 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3c6f9 817 AA FF DF 00 
3c6fd 818 C6 FF EA 00 
3c701 819 E3 FF F4 00 
3c705 81a 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3c709 81b 00 40 40 00 
3c70d 81c 00 60 60 00 
3c711 81d 00 80 80 00 
3c715 81e 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3c719 81f 00 BF BF 00 
3c71d 820 00 DF DF 00 
3c721 821 00 FF FF 00 
3c725 822 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3c729 823 39 FF FF 00 
3c72d 824 55 FF FF 00 
3c731 825 71 FF FF 00 
3c735 826 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3c739 827 AA FF FF 00 
3c73d 828 C6 FF FF 00 
3c741 829 E3 FF FF 00 
3c745 82a 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3c749 82b 00 28 40 00 
3c74d 82c 00 3C 60 00 
3c751 82d 00 50 80 00 
3c755 82e 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3c759 82f 00 78 BF 00 
3c75d 830 00 8C DF 00 
3c761 831 00 A0 FF 00 
3c765 832 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3c769 833 39 B5 FF 00 
3c76d 834 55 C0 FF 00 
3c771 835 71 CA FF 00 
3c775 836 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3c779 837 AA DF FF 00 
3c77d 838 C6 EA FF 00 
3c781 839 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3c784 83a             | 
3c784 83a             | '**********************************************************************************
3c784 83a             | '
3c784 83a             | '        Timings and colors definitions
3c784 83a             | '
3c784 83a             | '**********************************************************************************
3c784 83a             | 
3c784 83a             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3c784 83a 08 00 00 00 
3c788 83b 3C 00 00 00 
3c78c 83c 08 00 00 00 
3c790 83d 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3c794 83e 07 00 00 00 
3c798 83f 04 00 00 00 
3c79c 840 01 00 00 00 
3c7a0 841 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3c7a4 842 58 02 00 00 
3c7a8 843 20 9E 4B 14 
3c7ac 844 FB A8 9E 01 
3c7b0 845 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3c7b4 846 00 00 00 00 
3c7b8 847 C0 00 00 00 
3c7bc 848 00 00 00 00 
3c7c0 849 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c7c4 84a             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3c7c4 84a 00 75 C7 97 
3c7c8 84b 27 47 F6 0A 
3c7cc 84c 05 79 CB 9B 
3c7d0 84d 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3c7d4 84e             | 
3c7d4 84e             | ''--------  Initialization  ----------------------------------------------------------------
3c7d4 84e             | 
3c7d4 84e 28 0C 64 FD | hdmi            setq    #6
3c7d8 84f 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3c7dc 850 28 10 64 FD |                 setq    #8
3c7e0 851 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3c7e4 852             | 
3c7e4 852 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3c7e8 853 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3c7ec 854 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3c7f0 855 D6 C6 01 F1 |                 add     t1,hbase
3c7f4 856 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3c7f8 857 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3c7fc 858 7B 0B 80 5F 
3c800 859 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3c804 85a 66 66 86 FF 
3c808 85b 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3c80c 85c             | '
3c80c 85c D6 C6 01 F6 |                 mov 	t1,hbase			   '
3c810 85d 11 C6 65 F0 |                 shl 	t1,#17                             '
3c814 85e E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3c818 85f 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3c81c 860             | 
3c81c 860 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3c820 861 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3c824 862 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3c828 863             | 
3c828 863             | ''--------  frame rendering main loop  ---------------------------------------------------
3c828 863             | 
3c828 863 28 06 64 FD | p101            setq 	#3
3c82c 864 00 A5 05 FB | 		rdlong  vblankptr,ptra
3c830 865 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3c834 866 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3c838 867 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3c83c 868 00 A0 05 F6 |                 mov     dlinum, #0
3c840 869 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3c844 86a D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3c848 86b             | 
3c848 86b             | 
3c848 86b 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3c84c 86c 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3c850 86d ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3c854 86e             |                 
3c854 86e             | 
3c854 86e             | 
3c854 86e             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3c854 86e             |   
3c854 86e 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3c858 86f 29 FE 65 3D |          if_nc  setq2   #255
3c85c 870 D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3c860 871             | 
3c860 871             | '' -----   up porch (before the picture)
3c860 871             | 
3c860 871 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3c864 872 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3c868 873 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3c86c 874 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3c870 875             |  
3c870 875             |    
3c870 875             |  
3c870 875 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3c874 876 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c878 877 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3c87c 878 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c880 879 E1 90 C1 FC |                 xcont   m_vi,hsync0
3c884 87a DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3c888 87b             | 
3c888 87b E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3c88c 87c E2 8C B1 FC |                 xzero   m_sn,hsync1
3c890 87d 48 00 B0 FD | 		call    #dli
3c894 87e E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c898 87f E1 90 C1 FC |                 xcont   m_vi,hsync0
3c89c 880 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3c8a0 881             |                 	
3c8a0 881             |                 
3c8a0 881             | 
3c8a0 881             |  
3c8a0 881             | '' ------- the main screen drawing starts here
3c8a0 881             | 
3c8a0 881 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3c8a4 882 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3c8a8 883 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3c8ac 884 E1 8E C1 FC |                 xcont   m_bv,hsync0
3c8b0 885 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3c8b4 886 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3c8b8 887 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3c8bc 888             |               
3c8bc 888             | 
3c8bc 888 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3c8c0 889 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3c8c4 88a             | 
3c8c4 88a             | ' ---------------- All visible lines displayed now, start vblank  
3c8c4 88a             | 
3c8c4 88a D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3c8c8 88b 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3c8cc 88c C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3c8d0 88d C3 C4 01 F6 |                 mov     hsync1,sync_223
3c8d4 88e 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3c8d8 88f 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3c8dc 890             | 
3c8dc 890             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3c8dc 890             | 
3c8dc 890             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3c8dc 890             | 
3c8dc 890 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3c8e0 891             | 
3c8e0 891 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3c8e4 892 04 B8 05 A1 |     if_z        add     dlptr2,#4
3c8e8 893 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3c8ec 894             | 
3c8ec 894 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3c8f0 895 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3c8f4 896 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3c8f8 897 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3c8fc 898 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3c900 899             | 
3c900 899 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3c904 89a DD C6 41 F8 |                 getnib  t1,dl,#0
3c908 89b 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3c90c 89c 70 00 90 AD |     if_z        jmp     #preload
3c910 89d 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3c914 89e 94 00 90 AD |     if_z        jmp     #preload2
3c918 89f 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3c91c 8a0 0C 00 90 AD |     if_z        jmp     #p390
3c920 8a1 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3c924 8a2 28 00 90 AD |     if_z        jmp     #p391  
3c928 8a3             | 
3c928 8a3 2D 00 64 FD | p308            ret
3c92c 8a4             |    
3c92c 8a4 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3c930 8a5 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3c934 8a6 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3c938 8a7 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3c93c 8a8 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3c940 8a9 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3c944 8aa 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3c948 8ab 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3c94c 8ac 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3c950 8ad             |  
3c950 8ad             | '' --------  Reload palette. To do 
3c950 8ad             | 
3c950 8ad E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3c954 8ae 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3c958 8af 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3c95c 8b0 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3c960 8b1 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3c964 8b2 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3c968 8b3 70 FF 9F FD |         	jmp     #dli                
3c96c 8b4             |       
3c96c 8b4             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3c96c 8b4             | 
3c96c 8b4             | 
3c96c 8b4             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3c96c 8b4             | 
3c96c 8b4 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3c970 8b5 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c974 8b6 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c978 8b7 E1 90 C1 FC |                 xcont   m_vi,hsync0
3c97c 8b8 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3c980 8b9             |         
3c980 8b9             | '' -------------- Preload a line from PSRAM        
3c980 8b9             |         
3c980 8b9 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3c984 8ba 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3c988 8bb DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3c98c 8bc DE B4 01 F6 |                 mov     buf1,buf1c
3c990 8bd 03 A0 05 F7 |                 incmod  dlinum,#3
3c994 8be             | 
3c994 8be 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3c998 8bf 32 B7 01 F6 |                 mov     buf2,a1024
3c99c 8c0 E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3c9a0 8c1 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3c9a4 8c2 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3c9a8 8c3 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3c9ac 8c4             |  
3c9ac 8c4             |  
3c9ac 8c4             | preload2      '  incmod  dlinum,#3
3c9ac 8c4 04 C0 45 F0 |                 shr 	framebuf2,#4
3c9b0 8c5 ED B2 01 F6 |                 mov 	cmd,affffffff
3c9b4 8c6 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3c9b8 8c7 28 02 64 FD |                 setq	#1
3c9bc 8c8 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3c9c0 8c9             |                 
3c9c0 8c9             | 
3c9c0 8c9             | '' -------------- Draw sprites
3c9c0 8c9             | 
3c9c0 8c9 CF 5C 02 F6 | sprite          mov t8,frames
3c9c4 8ca 10 5C 0E F5 | 		and t8,#16 wz
3c9c8 8cb 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3c9cc 8cc 10 48 06 A6 | 	if_z    mov spritenum, #16	
3c9d0 8cd             | 		
3c9d0 8cd             | 
3c9d0 8cd 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3c9d4 8ce 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3c9d8 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3c9dc 8d0 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3c9e0 8d1 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3c9e4 8d2 EF 56 96 F9 |                 alts    t5,#sprite1xy
3c9e8 8d3 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3c9ec 8d4 0F 4C 66 F7 |                 signx	sprite_x,#15
3c9f0 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3c9f4 8d6 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3c9f8 8d7 01 52 86 F1 |                 sub     sprite_h,#1
3c9fc 8d8 F0 56 96 F9 |                 alts    t5,#sprite1wh
3ca00 8d9 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3ca04 8da             | 
3ca04 8da             | 
3ca04 8da 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3ca08 8db BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3ca0c 8dc 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3ca10 8dd B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3ca14 8de 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3ca18 8df AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3ca1c 8e0 00 5E 06 F6 |                 mov 	t9,#0
3ca20 8e1 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3ca24 8e2 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3ca28 8e3 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3ca2c 8e4             |      
3ca2c 8e4 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3ca30 8e5 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3ca34 8e6 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3ca38 8e7 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3ca3c 8e8 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3ca40 8e9             |                 
3ca40 8e9 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3ca44 8ea 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3ca48 8eb DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3ca4c 8ec             |   		
3ca4c 8ec 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3ca50 8ed 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3ca54 8ee             | 
3ca54 8ee 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3ca58 8ef 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3ca5c 8f0 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3ca60 8f1             |  
3ca60 8f1 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3ca64 8f2 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3ca68 8f3 10 00 90 CD |      if_c 	jmp     #p899		
3ca6c 8f4             | 	
3ca6c 8f4             | 	
3ca6c 8f4 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3ca70 8f5 28 CD 01 F1 | 		add	t4,sprite_w
3ca74 8f6 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3ca78 8f7             | 
3ca78 8f7 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3ca7c 8f8             | 
3ca7c 8f8 28 59 02 F6 | p899		mov 	t6,sprite_w
3ca80 8f9 01 58 86 F1 | 	 	sub     t6,#1
3ca84 8fa 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3ca88 8fb             | 
3ca88 8fb 28 58 62 FD |                 setq   	t6
3ca8c 8fc E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3ca90 8fd 28 5D 02 F6 |                 mov t8,sprite_w
3ca94 8fe 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3ca98 8ff 24 00 90 AD |         if_z    jmp #p898
3ca9c 900             |          
3ca9c 900             |         
3ca9c 900 70 5F 06 F6 |                 mov  t9,#368
3caa0 901 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3caa4 902             | 
3caa4 902 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3caa8 903 08 5C 06 FA |                 mul t8,#8				' bits to shr
3caac 904 FF FF 7F FF 
3cab0 905 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3cab4 906 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3cab8 907 00 5E 8E F9 |                 altd t9,#0				' and mask 
3cabc 908 2D 01 00 F5 |                 and 0-0, t7
3cac0 909             |                
3cac0 909             | 
3cac0 909 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3cac4 90a E5 E0 7A FA |                 wmlong 368,t3				
3cac8 90b             |                 
3cac8 90b C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3cacc 90c 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3cad0 90d 2D 00 64 FD |                 ret
3cad4 90e             | 	
3cad4 90e             | 	
3cad4 90e             |                
3cad4 90e             |  
3cad4 90e             | '' -------------- Graphics line ------------------------------------------------------------
3cad4 90e             |  
3cad4 90e             | 
3cad4 90e             | '' consts and vars
3cad4 90e             | 
3cad4 90e 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3cad8 90f AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3cadc 910 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3cae0 911 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3cae4 912             | 
3cae4 912 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3cae8 913             | 
3cae8 913             | '------ these longs will be set by setmode function
3cae8 913             | 
3cae8 913 00 00 00 00 | m_bs            long    0        'blanks before sync
3caec 914 00 00 00 00 | m_sn            long    0        'sync
3caf0 915 00 00 00 00 | m_bv            long    0        'blanks before visible
3caf4 916 00 00 00 00 | m_vi            long    0        'visible pixels #
3caf8 917             | 'm_border        long    0        'left/right borders
3caf8 917 00 00 00 00 | i_upporch       long    0        'up porch lines
3cafc 918 00 00 00 00 | i_vsync         long    0        'vsync lines
3cb00 919 00 00 00 00 | i_downporch     long    0        'down porch lines
3cb04 91a 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3cb08 91b 00 00 00 00 | i_totalvis      long    0
3cb0c 91c             | 
3cb0c 91c             | '-------------------------------------
3cb0c 91c             |  
3cb0c 91c 00 00 00 00 | linenum         long    0
3cb10 91d 00 00 00 00 | frames          long    0
3cb14 91e 00 00 00 00 | dlinum long 0
3cb18 91f 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3cb1c 920             | 
3cb1c 920 00 00 00 00 | vblankptr       long    0
3cb20 921 00 00 00 00 | modeptr         long    0
3cb24 922 00 00 00 00 | paletteptr      long    0
3cb28 923 00 00 00 00 | dlptr           long    0
3cb2c 924 01 00 00 00 | hbase           long    1
3cb30 925 00 00 00 00 | mailbox         long    0
3cb34 926 00 00 00 00 | spriteptr          long 0
3cb38 927             | 
3cb38 927 00 00 00 00 | cmd             long    0
3cb3c 928 00 B0 07 00 | buf1            long    $80000-16384-4096
3cb40 929 00 04 00 00 | buf2            long    1024
3cb44 92a 01 00 00 00 | dlptr2          long    1
3cb48 92b 01 00 00 00 | dl              long    1
3cb4c 92c             | 
3cb4c 92c 00 00 00 00 | buf1c long 0
3cb50 92d 00 B0 07 00 | buf1d            long    $80000-16384-4096
3cb54 92e 01 00 00 00 | framebuf2       long    1
3cb58 92f 01 00 00 00 | hsync0          long    1
3cb5c 930 01 00 00 00 | hsync1          long    1
3cb60 931             | 
3cb60 931 01 00 00 00 | t1              long    1
3cb64 932 00 00 00 00 | t2 long 0
3cb68 933 00 00 00 00 | t3 long 0
3cb6c 934 00 00 00 00 | t4 long 0
3cb70 935             | 
3cb70 935 00 00 00 00 | rcnt            long    0  'dl repeat count
3cb74 936 00 00 00 00 | rcnt2           long    0
3cb78 937 00 00 00 00 | rcnt2a          long    0
3cb7c 938 00 00 00 00 | roffset         long    0
3cb80 939 00 00 00 00 | rdl             long    0  'dl repeat line
3cb84 93a 00 00 00 00 | dlc             long    0  'dl command
3cb88 93b             | 
3cb88 93b FF FF FF FF | affffffff       long    $ffffffff
3cb8c 93c 00 00 00 00 | sprite1pointer long 0
3cb90 93d 00 00 00 00 | sprite1xy      long 0
3cb94 93e 00 00 00 00 | sprite1wh      long 0
3cb98 93f 00 00 00 00 | sprite2pointer long 0
3cb9c 940 00 00 00 00 | sprite2xy      long 0
3cba0 941 00 00 00 00 | sprite2wh      long 0
3cba4 942 00 00 00 00 | sprite3pointer long 0
3cba8 943 00 00 00 00 | sprite3xy      long 0
3cbac 944 00 00 00 00 | sprite3wh      long 0
3cbb0 945 00 00 00 00 | sprite4pointer long 0
3cbb4 946 00 00 00 00 | sprite4xy      long 0
3cbb8 947 00 00 00 00 | sprite4wh      long 0
3cbbc 948 00 00 00 00 | sprite5pointer long 0
3cbc0 949 00 00 00 00 | sprite5xy      long 0
3cbc4 94a 00 00 00 00 | sprite5wh      long 0
3cbc8 94b 00 00 00 00 | sprite6pointer long 0
3cbcc 94c 00 00 00 00 | sprite6xy      long 0
3cbd0 94d 00 00 00 00 | sprite6wh      long 0
3cbd4 94e 00 00 00 00 | sprite7pointer long 0
3cbd8 94f 00 00 00 00 | sprite7xy      long 0
3cbdc 950 00 00 00 00 | sprite7wh      long 0
3cbe0 951 00 00 00 00 | sprite8pointer long 0
3cbe4 952 00 00 00 00 | sprite8xy      long 0
3cbe8 953 00 00 00 00 | sprite8wh      long 0
3cbec 954 00 00 00 00 | sprite9pointer long 0
3cbf0 955 00 00 00 00 | sprite9xy      long 0
3cbf4 956 00 00 00 00 | sprite9wh      long 0
3cbf8 957 00 00 00 00 | sprite10pointer long 0
3cbfc 958 00 00 00 00 | sprite10xy      long 0
3cc00 959 00 00 00 00 | sprite10wh      long 0
3cc04 95a 00 00 00 00 | sprite11pointer long 0
3cc08 95b 00 00 00 00 | sprite11xy      long 0
3cc0c 95c 00 00 00 00 | sprite11wh      long 0
3cc10 95d 00 00 00 00 | sprite12pointer long 0
3cc14 95e 00 00 00 00 | sprite12xy      long 0
3cc18 95f 00 00 00 00 | sprite12wh      long 0
3cc1c 960 00 00 00 00 | sprite13pointer long 0
3cc20 961 00 00 00 00 | sprite13xy      long 0
3cc24 962 00 00 00 00 | sprite13wh      long 0
3cc28 963 00 00 00 00 | sprite14pointer long 0
3cc2c 964 00 00 00 00 | sprite14xy      long 0
3cc30 965 00 00 00 00 | sprite14wh      long 0
3cc34 966 00 00 00 00 | sprite15pointer long 0
3cc38 967 00 00 00 00 | sprite15xy      long 0
3cc3c 968 00 00 00 00 | sprite15wh      long 0
3cc40 969 00 00 00 00 | sprite16pointer long 0
3cc44 96a 00 00 00 00 | sprite16xy      long 0
3cc48 96b 00 00 00 00 | sprite16wh      long 0
3cc4c 96c 00 00 00 00 | sprite17pointer long 0
3cc50 96d 00 00 00 00 | sprite17xy      long 0
3cc54 96e 00 00 00 00 | sprite17wh      long 0
3cc58 96f 00 00 00 00 | sprite18pointer long 0
3cc5c 970 00 00 00 00 | sprite18xy      long 0
3cc60 971 00 00 00 00 | sprite18wh      long 0
3cc64 972 00 00 00 00 | spritenum long 0
3cc68 973             | 
3cc68 973 00 00 00 00 | spriteline long 0
3cc6c 974 84 03 00 00 | sprite_x long 900
3cc70 975 00 00 00 00 | sprite_y long 0
3cc74 976 10 00 00 00 | sprite_w long 16
3cc78 977 40 00 00 00 | sprite_h long 64
3cc7c 978 00 00 00 00 | l2 long 0
3cc80 979 00 00 00 00 | t5 long 0
3cc84 97a 00 00 00 00 | t6 long 0
3cc88 97b 00 00 00 00 | t7 long 0
3cc8c 97c 00 00 00 00 | t8 long 0
3cc90 97d 00 00 00 00 | t9 long 0
3cc94 97e 00 00 00 00 | preloadaddr long 0
3cc98 97f 00 00 00 00 | preloadlineaddr long 0
3cc9c 980 00 04 00 00 | a1024 long 1024
3cca0 981             | 
3cca0 981 E0 03 00 00 | aa long 992
3cca4 982 FF 03 00 00 | a1023 long 1023
3cca8 983 00 10 00 00 | a4096 long 4096
3ccac 984             |  fit 368
3ccac 984             | _psram_spin2_dat_
3ccac 984 00 00 00 00 
      ...             
3cda4 9c2 00 00 00 00 
3cda8 9c3 00 00 00 00 |     listdata long 0[8*8]
3cdac 9c4             |             orgh
3cdac                 | 
3cdac                 | ' driver state
3cdac     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3cdb0     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3cdb4                 | 
3cdb4                 | ' delay profile
3cdb4     07 00 00 00 
3cdb8     00 CF 7B 05 
3cdbc     80 D1 F0 08 
3cdc0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3cdc4     80 C4 60 0F 
3cdc8     80 39 7A 12 
3cdcc     40 2D D9 13 
3cdd0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3cdd4                 | 
3cdd4                 | ' data to be passed to driver when starting it
3cdd4                 | startupData
3cdd4     00 00 00 00 |     long    0           ' current frequency
3cdd8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3cddc     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3cde0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3cde4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3cde8     F4 CD 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3cdec     74 CE 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3cdf0     94 CE 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3cdf4                 | 
3cdf4                 | ' data for memory
3cdf4                 | deviceData
3cdf4                 |     ' 16 bank parameters follow (16MB per bank)
3cdf4     00 00 00 00 
      ...             
3ce2c     00 00 00 00 
3ce30     00 00 00 00 |     long    0[16]                               ' banks 0-15
3ce34                 |     ' 16 banks of pin parameters follow
3ce34     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3ce38     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3ce3c     FF FF FF FF 
      ...             
3ce6c     FF FF FF FF 
3ce70     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3ce74                 | 
3ce74                 | ' data for COG polling
3ce74                 | qosData 
3ce74     00 00 FF FF 
3ce78     00 00 FF FF 
3ce7c     00 00 FF FF 
3ce80     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3ce84     00 00 FF FF 
3ce88     00 00 FF FF 
3ce8c     00 00 FF FF 
3ce90     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3ce94                 |     
3ce94                 | ' mailbox storage
3ce94                 | 
3ce94                 | mailboxes
3ce94     00 00 00 00 
      ...             
3ceec     00 00 00 00 
3cef0     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3cef4                 | 	alignl
3cef4                 | _psram16drv_spin2_dat_
3cef4                 |                             orgh
3cef4     00 00 00 00 
      ...             
3cf0c     00 00 00 00 
3cf10     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3cf14                 | 
3cf14                 | driver_start
3cf14                 |                             org
3cf14 000             | '..................................................................................................
3cf14 000             | ' Memory layout for COG RAM once operational:
3cf14 000             | '
3cf14 000             | '  COG RAM address      Usage
3cf14 000             | '  ---------------      ----
3cf14 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3cf14 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3cf14 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3cf14 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3cf14 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3cf14 000             | '  ~$198-$1F3           State and register variables
3cf14 000             | '
3cf14 000             | ' Also during driver COG startup:
3cf14 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3cf14 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3cf14 000             | '..................................................................................................
3cf14 000             |                             
3cf14 000             | ' Mailbox storage after vector initialization
3cf14 000             | 
3cf14 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3cf18 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3cf1c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3cf20 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3cf24 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3cf28 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3cf2c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3cf30 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3cf34 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3cf38 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3cf3c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3cf40 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3cf44 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3cf48 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3cf4c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3cf50 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3cf54 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3cf58 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3cf5c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3cf60 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3cf64 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3cf68 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3cf6c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3cf70 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3cf74 018             | 
3cf74 018             | ' Mailbox parameter addresses per COG once patched
3cf74 018             |                             
3cf74 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3cf78 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3cf7c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3cf80 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3cf84 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3cf88 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3cf8c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3cf90 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3cf94 020             | 
3cf94 020             | '..................................................................................................
3cf94 020             | ' Per COG request and state setup and service branching
3cf94 020             |         
3cf94 020             | cog0                 
3cf94 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3cf98 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3cf9c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3cfa0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3cfa4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3cfa8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3cfac 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3cfb0 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3cfb4 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3cfb8 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3cfbc 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3cfc0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3cfc4 02c             | cog1                        
3cfc4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3cfc8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3cfcc 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3cfd0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3cfd4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3cfd8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3cfdc 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3cfe0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3cfe4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3cfe8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3cfec 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3cff0 037 33 CA 63 FD |                             execf   request-0               'jump to service
3cff4 038             | cog2                         
3cff4 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3cff8 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3cffc 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3d000 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3d004 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d008 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d00c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3d010 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3d014 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3d018 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d01c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d020 043 33 CA 63 FD |                             execf   request-0               'jump to service
3d024 044             | cog3                        
3d024 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3d028 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3d02c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3d030 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3d034 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d038 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d03c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3d040 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3d044 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3d048 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d04c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d050 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3d054 050             | cog4                        
3d054 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3d058 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3d05c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3d060 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3d064 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d068 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d06c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3d070 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3d074 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3d078 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d07c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d080 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3d084 05c             | cog5                        
3d084 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3d088 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3d08c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3d090 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3d094 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d098 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d09c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3d0a0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3d0a4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3d0a8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d0ac 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d0b0 067 33 CA 63 FD |                             execf   request-0               'jump to service
3d0b4 068             | cog6                        
3d0b4 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3d0b8 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3d0bc 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3d0c0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3d0c4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d0c8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d0cc 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3d0d0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3d0d4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3d0d8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d0dc 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d0e0 073 33 CA 63 FD |                             execf   request-0               'jump to service
3d0e4 074             | cog7                        
3d0e4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3d0e8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3d0ec 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3d0f0 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3d0f4 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d0f8 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d0fc 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3d100 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3d104 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3d108 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d10c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d110 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3d114 080             |                             fit     128
3d114 080             | 
3d114 080             |                             fit     128
3d114 080             | pad                         long    0[128-$]                'align init code to $80
3d114 080             | 
3d114 080             | '..................................................................................................
3d114 080             | 
3d114 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3d114 080             | 
3d114 080             | init                        
3d114 080             |                             ' get driver scratch long address in hub
3d114 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3d118 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3d11c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3d120 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3d124 084             |                     
3d124 084             |                             ' read in the additional LUT RAM code
3d124 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3d128 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3d12c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3d130 087             | 
3d130 087             |                             ' read the startup parameters
3d130 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3d134 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3d138 089             | 
3d138 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3d138 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3d13c 08a             | 
3d13c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3d140 08b 01 00 00 5F 
3d144 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3d148 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3d14c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3d150 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3d154 090             | 
3d154 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3d154 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3d158 091 01 00 00 FF 
3d15c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3d160 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3d164 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3d168 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3d16c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3d170 097 08 DE 47 F5 |                             or      a, #8
3d174 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3d178 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3d17c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3d180 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3d184 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3d188 09d 01 DE 07 F1 |                             add     a, #1
3d18c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3d190 09f             |  
3d190 09f             |                             ' setup device control pin states
3d190 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3d194 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3d198 0a1 01 00 00 FF 
3d19c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3d1a0 0a3             | 
3d1a0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3d1a4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3d1a8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3d1ac 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3d1b0 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3d1b4 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3d1b8 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3d1bc 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3d1c0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3d1c4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3d1c8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3d1cc 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3d1d0 0af             | pinloop
3d1d0 0af             |                             ' generate minimum CE high time before access
3d1d0 0af A1 07 00 FF 
3d1d4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3d1d8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3d1dc 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3d1e0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3d1e4 0b4 1F DE 63 FD |                             waitx   a                       'delay
3d1e8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3d1ec 0b6             | 
3d1ec 0b6             |                             ' setup the COG mailboxes and addresses 
3d1ec 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3d1f0 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3d1f4 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3d1f8 0b9             | 
3d1f8 0b9 28 2E 64 FD |                             setq    #24-1
3d1fc 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3d200 0bb             | 
3d200 0bb             |                             ' setup the polling loop for active COGs 
3d200 0bb 01 C2 63 FD |                             cogid   id
3d204 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3d208 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3d20c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3d210 0bf 0A F0 07 F6 |                             mov     ptra, #10
3d214 0c0 E1 F1 03 FA |                             mul     ptra, id
3d218 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3d21c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3d220 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3d224 0c4 03 C2 07 FA |                             mul     id, #3
3d228 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3d22c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3d230 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3d234 0c8 D8 01 B0 FD |                             call    #reloadcogs
3d238 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3d23c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3d240 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3d240 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3d244 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3d248 0cd 08 04 DC FC |                             rep     #2, #8
3d24c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3d250 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3d254 0d0             | 
3d254 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3d254 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3d254 0d0 01 C2 63 FD |                             cogid   id
3d258 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3d25c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3d260 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3d264 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3d268 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3d26c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3d270 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3d274 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3d278 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3d27c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d280 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3d284 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3d288 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3d28c 0de A5 E5 03 F1 |                             add     d, const512
3d290 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d294 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3d298 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3d29c 0e2             |                             
3d29c 0e2             |                             ' setup register values for control vector loop setup after we return
3d29c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3d2a0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3d2a4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3d2a8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3d2ac 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3d2b0 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3d2b4 0e8 D0 C3 8F F9 |                             altd    id, #id0
3d2b8 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3d2bc 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3d2c0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3d2c4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3d2c8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3d2cc 0ee             |  
3d2cc 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3d2d0 0ef 07 CA 07 F5 |                             and     request, #7
3d2d4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3d2d8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3d2dc 0f2             |                             fit     $100                    'ensure all init code fits this space
3d2dc 0f2             | 
3d2dc 0f2             |                             fit     $100                    'ensure all init code fits this space
3d2dc 0f2             | 
3d2dc 0f2 00 00 00 00 
      ...             
3d30c 0fe 00 00 00 00 
3d310 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3d314 100             | 
3d314 100             | '..................................................................................................
3d314 100             | ' Error result handling and COG notification of request completion
3d314 100             | 
3d314 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3d318 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3d31c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3d320 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3d324 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3d328 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3d32c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3d330 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3d334 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3d338 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3d33c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3d340 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3d344 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3d348 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3d34c 10e             | ' Poller re-starts here after a COG is serviced
3d34c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3d350 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3d354 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3d358 111             | ' Main dynamic polling loop repeats until a request arrives
3d358 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3d35c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3d360 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3d364 114             | 
3d364 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3d368 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3d36c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3d370 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3d374 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3d378 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3d37c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3d380 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3d384 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3d388 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3d38c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3d390 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3d394 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3d398 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3d39c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3d3a0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3d3a4 124             | 
3d3a4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3d3a8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3d3ac 126             |  
3d3ac 126             | '..................................................................................................
3d3ac 126             | ' List handler                               
3d3ac 126             | 
3d3ac 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3d3b0 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3d3b4 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3d3b8 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3d3bc 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3d3c0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3d3c4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3d3c8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3d3cc 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3d3d0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3d3d4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3d3d8 131 33 00 60 FD |                             execf   0-0                     'process the request 
3d3dc 132             | 
3d3dc 132             | '..................................................................................................
3d3dc 132             | ' Restoring per COG state and resuming where we left off
3d3dc 132             | 
3d3dc 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3d3e0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3d3e4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3d3e8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3d3ec 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3d3f0 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3d3f4 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3d3f8 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3d3fc 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3d400 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3d404 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3d408 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3d40c 13e             |                    
3d40c 13e             | '..................................................................................................
3d40c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3d40c 13e             | 
3d40c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3d410 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3d414 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3d418 141 D0 DF B7 F9 |                             setd    a, #id0
3d41c 142 D8 DF BF F9 |                             sets    a, #addr1
3d420 143 FE FF FF FF 
3d424 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3d428 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3d42c 146 3F DE A7 F9 |                             alti    a, #%111_111 
3d430 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3d434 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3d438 149 01 E2 63 FD |                             cogid   c
3d43c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3d440 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3d444 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3d448 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3d44c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3d450 14f 00 E0 03 F6 |                             mov     b, 0-0
3d454 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3d458 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3d45c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3d460 153 0C 00 90 AD |             if_z            jmp     #excluded               
3d464 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3d468 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3d46c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3d470 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3d474 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3d478 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3d47c 15a             | 
3d47c 15a             | 'determine priority cogs and build instructions for the polling sequence
3d47c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3d480 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3d484 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3d488 15d             | 
3d488 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3d48c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3d490 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3d494 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3d498 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3d49c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3d4a0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3d4a4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3d4a8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3d4ac 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3d4b0 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3d4b4 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3d4b8 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3d4bc 16a             | endprioloop
3d4bc 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3d4c0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3d4c4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3d4c8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3d4cc 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3d4d0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3d4d4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3d4d8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3d4dc 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3d4e0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3d4e4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3d4e8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3d4ec 176             | 
3d4ec 176             | ' populate the round robin COG polling instructions
3d4ec 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3d4f0 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3d4f4 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3d4f8 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3d4fc 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3d500 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3d504 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3d508 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3d50c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3d510 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3d514 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3d518 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3d51c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3d520 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3d524 184             | '..................................................................................................
3d524 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3d524 184             | 
3d524 184             | set_latency                                                 '            (a) set latency
3d524 184             | get_latency                                                 '            (b) get latency
3d524 184             | set_burst                                                   '            (c) set burst size of bank
3d524 184             | get_burst                                                   '            (d) get burst size of bank
3d524 184             |                                                             '            (e) dump state
3d524 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3d528 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3d52c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3d530 187             |                                                             ' | | | | e  account for following AUGS
3d530 187 04 00 00 FF 
3d534 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3d538 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3d53c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3d540 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3d544 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3d548 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3d54c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3d550 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3d554 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3d558 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3d55c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3d560 193             | 
3d560 193             | '..................................................................................................
3d560 193             | ' Misc EXECF code
3d560 193             | 
3d560 193 33 72 63 FD | start_read_exec             execf   newburstr
3d564 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3d568 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3d56c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3d570 197             | 
3d570 197             | '..................................................................................................
3d570 197             | ' Variables
3d570 197             | 
3d570 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3d574 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3d578 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3d57c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3d580 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3d584 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3d588 19d             | 
3d588 19d 00 00 00 80 | xfreq1          long    $80000000
3d58c 19e 00 00 00 40 | xfreq2          long    $40000000
3d590 19f 03 00 00 00 | delay           long    3
3d594 1a0             | 
3d594 1a0             | lutcodeaddr                 
3d594 1a0             | startupparams
3d594 1a0             | excludedcogs                                    'careful: shared register use!
3d594 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3d598 1a1 00 00 00 00 | flags           long    0
3d59c 1a2             | mask                                            'careful: shared register use!
3d59c 1a2 00 00 00 00 | resetmaskA      long    0
3d5a0 1a3             | limit                                           'careful: shared register use!
3d5a0 1a3 00 00 00 00 | resetmaskB      long    0
3d5a4 1a4 00 00 00 00 | datapins        long    0
3d5a8 1a5             | const512                                        'careful: shared register use!
3d5a8 1a5 00 00 00 00 | devicelist      long    0
3d5ac 1a6 00 00 00 00 | coglist         long    0
3d5b0 1a7 00 00 00 00 | mbox            long    0 
3d5b4 1a8             | 
3d5b4 1a8             | clkpin                                          'shared with code patched during init
3d5b4 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3d5b8 1a9             | cspin                                           'shared with code patched during init
3d5b8 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3d5bc 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3d5c0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3d5c4 1ac 01 00 00 00 | clkdelay        long    1
3d5c8 1ad 00 00 00 00 | regdatabus      long    0
3d5cc 1ae             | 
3d5cc 1ae 10 00 00 00 | deviceaddr      long    $10
3d5d0 1af             | rrcounter
3d5d0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3d5d4 1b0             | 
3d5d4 1b0             | ' jump addresses for the per COG handlers
3d5d4 1b0 20 00 00 00 | cog0_handler    long    cog0
3d5d8 1b1 2C 00 00 00 | cog1_handler    long    cog1
3d5dc 1b2 38 00 00 00 | cog2_handler    long    cog2
3d5e0 1b3 44 00 00 00 | cog3_handler    long    cog3
3d5e4 1b4 50 00 00 00 | cog4_handler    long    cog4
3d5e8 1b5 5C 00 00 00 | cog5_handler    long    cog5
3d5ec 1b6 68 00 00 00 | cog6_handler    long    cog6
3d5f0 1b7 74 00 00 00 | cog7_handler    long    cog7
3d5f4 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3d5f8 1b9             | 
3d5f8 1b9             | ' EXECF sequences
3d5f8 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3d5fc 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3d600 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3d604 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3d608 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3d60c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3d610 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3d614 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3d614 1c0             | 
3d614 1c0             | 
3d614 1c0             | ' SKIPF sequences
3d614 1c0             | skiptable
3d614 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3d618 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3d61c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3d620 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3d624 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3d628 1c5 00 00 00 00 | pattern2        long    0
3d62c 1c6 00 00 00 00 | pattern3        long    0
3d630 1c7 77 02 00 00 | singlelong      long    %1001110111  
3d634 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3d638 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3d63c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3d640 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3d644 1cc             | 
3d644 1cc             | ' LUT RAM address values
3d644 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3d648 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3d64c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3d650 1cf F6 02 00 00 | noread          long    noread_lut
3d654 1d0             | 
3d654 1d0 00 00 00 00 | id0             long    0
3d658 1d1 01 00 00 00 | id1             long    1
3d65c 1d2 02 00 00 00 | id2             long    2
3d660 1d3 03 00 00 00 | id3             long    3
3d664 1d4 04 00 00 00 | id4             long    4
3d668 1d5 05 00 00 00 | id5             long    5
3d66c 1d6 06 00 00 00 | id6             long    6
3d670 1d7 07 00 00 00 | id7             long    7
3d674 1d8             | 
3d674 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3d674 1d8             | 'and COG updates and need to follow immediately after id0-id7
3d674 1d8 00 00 00 00 | addr1           long    0
3d678 1d9 00 00 00 00 | hubdata         long    0
3d67c 1da 00 00 00 00 | count           long    0
3d680 1db 00 00 00 00 | addr2           long    0
3d684 1dc 00 00 00 00 | total           long    0
3d688 1dd 00 00 00 00 | offset1         long    0
3d68c 1de 00 00 00 00 | offset2         long    0
3d690 1df 00 00 00 00 | link            long    0
3d694 1e0             | 
3d694 1e0             | burstwrite                                      'note shared register use during init
3d694 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3d698 1e1 00 00 00 00 | id              long    0
3d69c 1e2             | 
3d69c 1e2 00 00 00 00 | header          long    0
3d6a0 1e3 00 00 00 00 | trailer         long    0
3d6a4 1e4 00 00 00 00 | cmdaddr         long    0
3d6a8 1e5 00 00 00 00 | request         long    0
3d6ac 1e6 00 00 00 00 | rrlimit         long    0
3d6b0 1e7 00 00 00 00 | pinconfig       long    0
3d6b4 1e8 00 00 00 00 | clks            long    0
3d6b8 1e9 00 00 00 00 | resume          long    0
3d6bc 1ea 00 00 00 00 | orighubsize     long    0
3d6c0 1eb 00 00 00 00 | wrclks          long    0
3d6c4 1ec             | 
3d6c4 1ec 00 00 00 00 | pattern         long    0
3d6c8 1ed 00 00 00 00 | hubscratch      long    0
3d6cc 1ee 00 10 00 00 | val4k           long    4096
3d6d0 1ef             | 
3d6d0 1ef             | ' temporary general purpose regs
3d6d0 1ef 00 00 00 00 | a               long    0
3d6d4 1f0 00 00 00 00 | b               long    0
3d6d8 1f1 00 00 00 00 | c               long    0
3d6dc 1f2 00 00 00 00 | d               long    0
3d6e0 1f3             |                 fit     502
3d6e0 1f3             | 
3d6e0 1f3             |                 fit     502
3d6e0 1f3             | 
3d6e0 1f3             | '..................................................................................................
3d6e0 1f3             | 
3d6e0 1f3             |             orgh
3d6e0                 | 
3d6e0                 | lut_code
3d6e0                 | 'HW init code up to 80 longs
3d6e0                 | 
3d6e0                 | '..................................................................................................
3d6e0                 | ' Memory layout for LUT RAM once operational:
3d6e0                 | '
3d6e0                 | '  LUT RAM address      Usage
3d6e0                 | '  ---------------      ----
3d6e0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3d6e0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3d6e0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3d6e0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3d6e0                 | '
3d6e0                 | ' Also during driver COG startup:
3d6e0                 | ' $230-$24F is used for HW init setup
3d6e0                 | ' $250-$26F is used as temporary vector storage 
3d6e0                 | '..................................................................................................
3d6e0                 | 
3d6e0                 |                 org $230    
3d6e0 230             | 
3d6e0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3d6e0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3d6e4 231 24 16 60 FD |                             pollxfi
3d6e8 232 FF AA 2A FF 
3d6ec 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3d6f0 234 28 00 B0 FD |                             call    #sendqspi
3d6f4 235 07 F8 07 FF 
3d6f8 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3d6fc 237 28 00 B0 FD |                             call    #sendspi
3d700 238 F8 07 78 FF 
3d704 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3d708 23a 1C 00 B0 FD |                             call    #sendspi
3d70c 23b 7F 78 78 FF 
3d710 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3d714 23d 10 00 B0 FD |                             call    #sendspi 
3d718 23e 2D 00 64 FD |                             ret
3d71c 23f             | 
3d71c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3d720 240 32 0C 64 FD |                             skipf   #%110
3d724 241 9C EF 03 F6 |                             mov     pb, xsendimm
3d728 242             | 
3d728 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3d72c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3d730 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3d734 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3d738 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3d73c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3d740 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3d744 249 50 48 63 FD |                             fltl    datapins                'float data bus
3d748 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3d74c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3d750 24c             | 
3d750 24c 00 00 00 00 
3d754 24d 00 00 00 00 
3d758 24e 00 00 00 00 
3d75c 24f 00 00 00 00 |                 long    0[$270-32-$]
3d760 250             |                 fit     $270-32  ' keep room for 32 vector longs
3d760 250             |     
3d760 250             |                 fit     $270-32  ' keep room for 32 vector longs
3d760 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3d760 250             | rw_vect ' PSRAM jump vectors
3d760 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d764 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d768 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3d76c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3d770 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3d774 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3d778 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3d77c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3d780 258             | ro_vect ' R/O PSRAM jump vectors
3d780 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d784 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d788 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3d78c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3d790 25c 00 01 00 00 |                 long    unsupported
3d794 25d 00 01 00 00 |                 long    unsupported
3d798 25e 00 01 00 00 |                 long    unsupported
3d79c 25f 00 01 00 00 |                 long    unsupported
3d7a0 260             | ctrl_vect ' Control jump vectors
3d7a0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3d7a4 261 00 01 00 00 |                 long    unsupported
3d7a8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3d7ac 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3d7b0 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3d7b4 265 00 01 00 00 |                 long    unsupported
3d7b8 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3d7bc 267 3E 01 00 00 |                 long    reconfig 
3d7c0 268             | no_vect ' Invalid bank jump vectors
3d7c0 268 01 01 00 00 |                 long    invalidbank
3d7c4 269 01 01 00 00 |                 long    invalidbank
3d7c8 26a 01 01 00 00 |                 long    invalidbank
3d7cc 26b 01 01 00 00 |                 long    invalidbank
3d7d0 26c 01 01 00 00 |                 long    invalidbank
3d7d4 26d 01 01 00 00 |                 long    invalidbank
3d7d8 26e 01 01 00 00 |                 long    invalidbank
3d7dc 26f 01 01 00 00 |                 long    invalidbank
3d7e0 270             |                 fit     $270
3d7e0 270             | 
3d7e0 270             |                 fit     $270
3d7e0 270             | '..................................................................................................
3d7e0 270             | ' PSRAM READS
3d7e0 270             |                                                             ' a b c d e f
3d7e0 270             |                                                             ' B W L B R L  (a) byte read
3d7e0 270             |                                                             ' Y O O U E O  (b) word read
3d7e0 270             |                                                             ' T R N R S C  (c) long read
3d7e0 270             |                                                             ' E D G S U K  (d) new burst read
3d7e0 270             |                                                             '       T M E  (e) resumed sub-burst
3d7e0 270             |                                                             '         E D  (f) locked sub-burst
3d7e0 270             | 
3d7e0 270             | 
3d7e0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3d7e4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3d7e8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3d7ec 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3d7f0 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3d7f4 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3d7f8 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3d7fc 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3d800 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3d804 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3d808 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3d80c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3d810 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3d814 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3d818 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3d81c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3d820 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3d824 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3d828 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3d82c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3d830 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3d834 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3d838 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3d83c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3d840 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3d844 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3d848 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3d84c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3d850 28c             | 
3d850 28c             |                             ' fall through to read bursts
3d850 28c             |                         
3d850 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3d850 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3d854 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3d858 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3d85c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3d860 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3d864 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3d868 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3d86c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3d870 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3d874 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3d878 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3d87c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3d880 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3d884 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3d888 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3d88c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3d890 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3d894 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3d898 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3d89c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3d8a0 2a0 E8 D1 03 F1 |                             add     clks, clks
3d8a4 2a1             | readcommon
3d8a4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3d8a8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3d8ac 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3d8b0 2a4             | 
3d8b0 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3d8b4 2a5 69 C8 63 FD |                             rev     cmdaddr
3d8b8 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3d8bc 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3d8c0 2a8             | 
3d8c0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3d8c4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3d8c8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3d8c8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3d8cc 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3d8d0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3d8d4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3d8d8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3d8d8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3d8dc 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3d8e0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3d8e4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3d8e8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3d8ec 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3d8f0 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3d8f0 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3d8f4 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3d8f8 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3d8fc 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3d900 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3d904 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3d908 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3d90c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3d910 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3d914 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3d918 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3d91c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3d920 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3d924 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3d928 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3d928 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3d92c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3d930 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3d934 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3d938 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3d93c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3d940 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3d944 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3d948 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3d94c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3d950 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3d954 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3d958 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3d95c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3d960 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3d964 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3d968 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3d96c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3d970 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3d974 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3d978 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3d97c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3d980 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3d984 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3d988 2da 10 03 90 FD |                             jmp     #writecommon
3d98c 2db             | 
3d98c 2db             | '..................................................................................................
3d98c 2db             | ' Burst continuation testing
3d98c 2db             | 
3d98c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3d990 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3d994 2dd             | continue_read_lut          
3d994 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3d998 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3d99c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3d9a0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3d9a4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3d9a8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3d9ac 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3d9b0 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3d9b4 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3d9b8 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3d9bc 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3d9c0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3d9c4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3d9c8 2ea             | 
3d9c8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3d9cc 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3d9d0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3d9d4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3d9d8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3d9dc 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3d9e0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3d9e4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3d9e8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3d9ec 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3d9f0 2f4 2A 1C 66 0D |             _ret_           push    #poller
3d9f4 2f5             | 
3d9f4 2f5             | 
3d9f4 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3d9f8 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3d9f8 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3d9fc 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3da00 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3da04 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3da08 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3da0c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3da10 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3da14 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3da18 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3da1c 2ff             | '..................................................................................................
3da1c 2ff             | ' Completion of requests
3da1c 2ff             | 
3da1c 2ff             | complete_rw_lut             
3da1c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3da20 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3da24 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3da28 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3da2c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3da30 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3da34 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3da38 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3da3c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3da40 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3da44 309 32 62 64 AD |             if_z            skipf   #%110001
3da48 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3da4c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3da50 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3da54 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3da58 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3da5c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3da60 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3da64 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3da68 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3da6c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3da70 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3da74 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3da78 316             |                                                             ' skipcase (a) gfx copy to/from hub
3da78 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3da78 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3da78 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3da7c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3da80 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3da84 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3da88 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3da8c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3da90 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3da94 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3da98 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3da9c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3daa0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3daa4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3daa8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3daac 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3dab0 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3dab4 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3dab8 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3dabc 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3dac0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3dac4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3dac8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3dacc 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3dad0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3dad4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3dad8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3dadc 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3dae0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3dae4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3dae8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3daec 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3daf0 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3daf4 335 DF B7 03 A6 |             if_z            mov     addr2, link
3daf8 336 34 FF 9F AD |             if_z            jmp     #checknext
3dafc 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3db00 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3db04 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3db08 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3db0c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3db10 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3db14 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3db18 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3db1c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3db20 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3db24 341             | 
3db24 341             | '..................................................................................................
3db24 341             | ' PSRAM WRITES
3db24 341             |                                                             '  a b c d e f g h
3db24 341             | 
3db24 341             |                                                             '  B W L F B R L L (a) byte write(s)
3db24 341             |                                                             '  Y O O I U E O O (b) word write(s)
3db24 341             |                                                             '  T R N L R S C C (c) long write(s)
3db24 341             |                                                             '  E D G L S U K K (d) resumed fill
3db24 341             |                                                             '          T M E E (e) new burst write
3db24 341             |                                                             '            E D D (f) resumed burst
3db24 341             |                                                             '              F B (g) locked fill
3db24 341             |                                                             '              I U (h) locked burst write
3db24 341             |                                                             '              L R 
3db24 341             |                                                             '              L S 
3db24 341             |                                                             '                T 
3db24 341             | 
3db24 341             | w_single                   
3db24 341             | w_fill_cont           
3db24 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3db28 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3db2c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3db30 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3db34 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3db38 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3db3c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3db40 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3db44 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3db48 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3db4c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3db50 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3db54 34d             |                ' disable call to r_resume_burst for single longs when z=0
3db54 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3db58 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3db5c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3db60 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3db64 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3db68 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3db6c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3db70 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3db74 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3db78 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3db7c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3db80 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3db84 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3db88 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3db8c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3db90 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3db94 35d             |         
3db94 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3db94 35d             |             '
3db94 35d             |             '  At least one of these 3 optional components will be sent
3db94 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3db94 35d             |             '     body - N x full longs of data
3db94 35d             |             '     trailer - last partial long of data
3db94 35d             |             '
3db94 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3db94 35d             |             '
3db94 35d             |             'Case    Type                           Sends
3db94 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3db94 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3db94 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3db94 35d             |             ' 4)     Multiple long fill             body only
3db94 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3db94 35d             | 
3db94 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3db94 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3db98 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3db9c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3dba0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3dba4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3dba8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3dbac 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3dbb0 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3dbb4 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3dbb8 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3dbbc 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3dbc0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3dbc4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3dbc8 36a             |                             
3dbc8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3dbcc 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3dbd0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3dbd4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3dbd8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3dbdc 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3dbe0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3dbe4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3dbe8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3dbec 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3dbf0 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3dbf4 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3dbf8 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3dbfc 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3dc00 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3dc04 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3dc08 37a             | 
3dc08 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3dc0c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3dc10 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3dc14 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3dc18 37e             |                  
3dc18 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3dc1c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3dc20 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3dc24 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3dc28 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3dc2c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3dc30 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3dc34 385             | 
3dc34 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3dc38 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3dc3c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3dc40 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3dc44 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3dc48 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3dc4c 38b             | 
3dc4c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3dc4c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3dc50 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3dc54 38d 2A B0 63 FD |                             push    addr1                   'save address
3dc58 38e             | 
3dc58 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3dc58 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3dc5c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3dc60 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3dc64 391             |             
3dc64 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3dc68 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3dc6c 393 2B B0 63 FD |                             pop     addr1                   'restore address
3dc70 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3dc74 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3dc78 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3dc7c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3dc80 398             | 
3dc80 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3dc84 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3dc88 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3dc8c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3dc90 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3dc94 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3dc98 39e             | 
3dc98 39e             |                             'trailer is done
3dc98 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3dc9c 39f             | 
3dc9c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3dca0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3dca4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3dca8 3a2             | 
3dca8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3dcac 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3dcb0 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3dcb4 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3dcb8 3a6             |                             
3dcb8 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3dcbc 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3dcc0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3dcc4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3dcc8 3aa             |                                                          
3dcc8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3dccc 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3dcd0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3dcd4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3dcd8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3dcdc 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3dce0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3dce4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3dce8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3dcec 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3dcf0 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3dcf4 3b5             |  
3dcf4 3b5 59 52 63 FD |                             drvh    cspin
3dcf8 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3dcfc 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3dd00 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3dd04 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3dd08 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3dd0c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3dd10 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3dd14 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3dd18 3be EA E5 03 F6 |                             mov     d, orighubsize
3dd1c 3bf EF E5 63 F0 |                             shl     d, a
3dd20 3c0 F2 E3 83 F1 |                             sub     c, d
3dd24 3c1 DD E3 03 F1 |                             add     c, offset1
3dd28 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3dd2c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3dd30 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3dd34 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3dd38 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3dd3c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3dd40 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3dd44 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3dd48 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3dd4c 3cb BB D3 03 F6 |                             mov     resume, restorefill
3dd50 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3dd54 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3dd58 3ce 6C FC BF CD |             if_c            call    #yield
3dd5c 3cf 2D 00 64 FD |                             ret
3dd60 3d0             |                            
3dd60 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3dd60 3d0             |                       '     rczl    pa                      'rotate left into address offset
3dd60 3d0             |                       '     rczl    c wcz                   'restore count and flags
3dd60 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3dd64 3d1 02 EC 67 F0 |                             shl     pa, #2
3dd68 3d2 28 06 64 AD |             if_z            setq    #3
3dd6c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3dd70 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3dd74 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3dd78 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3dd7c 3d7             | 
3dd7c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3dd80 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3dd84 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3dd88 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3dd8c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3dd90 3dc             |                 fit 1024-32
3dd90 3dc             |         
3dd90 3dc             | 
3dd90 3dc             | '..................................................................................................
3dd90 3dc             | 
3dd90 3dc             |                 fit 1024-32
3dd90 3dc 00 00 00 00 
3dd94 3dd 00 00 00 00 
3dd98 3de 00 00 00 00 
3dd9c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3dda0 3e0             |                 org 1024-32
3dda0 000             | 
3dda0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3dda0 000 00 00 00 00 |                 long $0000
3dda4 001 11 11 00 00 |                 long $1111
3dda8 002 22 22 00 00 |                 long $2222
3ddac 003 33 33 00 00 |                 long $3333
3ddb0 004 44 44 00 00 |                 long $4444
3ddb4 005 55 55 00 00 |                 long $5555
3ddb8 006 66 66 00 00 |                 long $6666
3ddbc 007 77 77 00 00 |                 long $7777
3ddc0 008 88 88 00 00 |                 long $8888
3ddc4 009 99 99 00 00 |                 long $9999
3ddc8 00a AA AA 00 00 |                 long $aaaa
3ddcc 00b BB BB 00 00 |                 long $bbbb
3ddd0 00c CC CC 00 00 |                 long $cccc
3ddd4 00d DD DD 00 00 |                 long $dddd
3ddd8 00e EE EE 00 00 |                 long $eeee
3dddc 00f FF FF 00 00 |                 long $ffff
3dde0 010             | 
3dde0 010             | 'masks
3dde0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3dde4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3dde8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3ddec 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3ddf0 014             | 
3ddf0 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3ddf4 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3ddf8 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3ddfc 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3de00 018             | 
3de00 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3de04 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3de08 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3de0c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3de10 01c             | 
3de10 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3de14 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3de18 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3de1c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3de20 020             |         fit 1024
3de20 020             | 
3de20 020             |         fit 1024
3de20 020             | 
3de20 020             | '--------------------------------------------------------------------------------------------------
3de20 020             |         orgh
3de20                 | 
3de20                 | gfxexpansion
3de20                 |                             'simple line drawing graphics expansion of memory driver
3de20                 |                             'jmp     #donerepeats                'just return for now
3de20                 | 
3de20     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3de24     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3de28     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3de2c     DD E1 03 F6 |                             mov     b, offset1              'get error term
3de30     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3de34     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3de38     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3de3c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3de40     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3de44     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3de48     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3de4c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3de50     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3de54     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3de58     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3de5c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3de60     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3de64     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3de68     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3de6c     DC E5 33 F9 |                             getword d, total, #0            'get line width
3de70     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3de74     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3de78     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3de7c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3de80     C3 03 80 FD |                             jmp     #readmask               'continue filling
3de84                 | 	alignl
3de84                 | _usbnew_spin2_dat_
3de84                 |                 org     $000
3de84 000             | 
3de84 000             | usb_host_start
3de84 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3de88 001             | 
3de88 001 03 00 00 FF 
3de8c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3de90 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3de94 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3de98 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3de9c 006 29 70 63 FD |                 setq2   htmp
3dea0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3dea4 008             | 
3dea4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3dea8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3deac 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3deb0 00b             | 
3deb0 00b             | '------------------------------------------------------------------------------
3deb0 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3deb0 00b             | ' special because the receiving function must not respond with either STALL or
3deb0 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3deb0 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3deb0 00b             | ' corrupt packet, it must ignore the transaction
3deb0 00b             | '------------------------------------------------------------------------------
3deb0 00b             | ' On entry:
3deb0 00b             | '   PTRA - start address of the SETUP data struct.
3deb0 00b             | ' On exit:
3deb0 00b             | '   retval - PID_ACK on success, otherwise error code.
3deb0 00b             | '------------------------------------------------------------------------------
3deb0 00b             | txn_setup
3deb0 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3deb4 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3deb8 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3debc 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3dec0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3dec4 010             | .setup
3dec4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3dec8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3decc 012 2D 00 64 AD |         if_z    ret
3ded0 013 7C 0B B0 FD |                 call    #retry_wait
3ded4 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ded8 015 2D 00 64 AD |         if_z    ret
3dedc 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3dee0 017 E0 FF 9F FD |                 jmp     #.setup
3dee4 018             | 
3dee4 018             | '------------------------------------------------------------------------------
3dee4 018             | ' IN/INTERRUPT transaction.
3dee4 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3dee4 018             | '------------------------------------------------------------------------------
3dee4 018             | ' On entry:
3dee4 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3dee4 018             | '     CRC(b19..23).
3dee4 018             | ' On exit:
3dee4 018             | '------------------------------------------------------------------------------
3dee4 018             | txn_in
3dee4 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3dee8 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3deec 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3def0 01b             | 
3def0 01b             |                 ' Fall through to urx_packet
3def0 01b             | 
3def0 01b             | '------------------------------------------------------------------------------
3def0 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3def0 01b             | ' received are handshakes and IN DATAx.
3def0 01b             | '------------------------------------------------------------------------------
3def0 01b             | ' On entry:
3def0 01b             | ' On exit:
3def0 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3def0 01b             | '     returned.
3def0 01b             | '------------------------------------------------------------------------------
3def0 01b             | urx_packet
3def0 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3def4 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3def8 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3defc 01e 1A 92 63 FD |                 getct   hct2
3df00 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3df04 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3df08 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3df0c 022             | .wait_sop
3df0c 022 22 A7 8A FA |                 rdpin   urx, dm
3df10 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3df14 024 08 00 90 CD |         if_c    jmp     #.get_pid
3df18 025 FC 25 CC FB |                 jnct2   #.wait_sop
3df1c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3df20 027             | .get_pid
3df20 027 28 02 B0 FD |                 call    #urx_next
3df24 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3df28 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3df2c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3df30 02b             | .chk_pid
3df30 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3df34 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3df38 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3df3c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3df40 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3df44 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3df48 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3df4c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3df50 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3df54 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3df58 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3df5c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3df60 037             | .ack_resend
3df60 037 22 A7 82 FA |                 rqpin   urx, dm
3df64 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3df68 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3df6c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3df70 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3df74 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3df78 03d             | .chk_eop
3df78 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3df7c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3df80 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3df84 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3df88 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3df8c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3df90 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3df94 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3df98 045 2D 00 64 FD |                 ret
3df9c 046             | .idle
3df9c 046 22 A7 82 FA |                 rqpin   urx, dm
3dfa0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3dfa4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3dfa8 049 2D 00 64 FD |                 ret
3dfac 04a             | 
3dfac 04a             | '------------------------------------------------------------------------------
3dfac 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3dfac 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3dfac 04a             | ' if one is required.
3dfac 04a             | '------------------------------------------------------------------------------
3dfac 04a             | ' On entry:
3dfac 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3dfac 04a             | ' On exit:
3dfac 04a             | '------------------------------------------------------------------------------
3dfac 04a             | utx_token
3dfac 04a 22 A7 82 FA |                 rqpin   urx, dm
3dfb0 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3dfb4 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3dfb8 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3dfbc 04e 34 0D B0 CD |         if_c    call    #utx_pre
3dfc0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3dfc4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3dfc8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3dfcc 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3dfd0 053             | .next_byte
3dfd0 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3dfd4 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3dfd8 055             | .wait
3dfd8 055 40 46 72 FD |                 testp   dp                      wc
3dfdc 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3dfe0 057 23 03 08 FC |                 akpin   dp
3dfe4 058 22 A5 22 FC |                 wypin   utx, dm
3dfe8 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3dfec 05a             | 
3dfec 05a             | '------------------------------------------------------------------------------
3dfec 05a             | ' SETUP/OUT/INTERRUPT transaction.
3dfec 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3dfec 05a             | '------------------------------------------------------------------------------
3dfec 05a             | ' On entry:
3dfec 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3dfec 05a             | '     CRC(b19..23).
3dfec 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3dfec 05a             | '   pkt_data - count of DATAx payload bytes to send.
3dfec 05a             | ' On exit:
3dfec 05a             | '------------------------------------------------------------------------------
3dfec 05a             | txn_out
3dfec 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3dff0 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3dff4 05c 00 00 C0 FF 
3dff8 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3dffc 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3e000 05f             | 
3e000 05f             |                 ' Fall through to utx_data
3e000 05f             | 
3e000 05f             | '------------------------------------------------------------------------------
3e000 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3e000 05f             | ' calculated while the data byte is being shifted out. Since data stage
3e000 05f             | ' success/fail is not determined until the status stage of the transaction,
3e000 05f             | ' this routine is only concerned about the current DATAx packet.
3e000 05f             | '------------------------------------------------------------------------------
3e000 05f             | ' On entry:
3e000 05f             | '   PTRA - hub start address of the data to read.
3e000 05f             | '   pkt_cnt - data payload size.
3e000 05f             | ' On exit:
3e000 05f             | '------------------------------------------------------------------------------
3e000 05f             | utx_data
3e000 05f 22 A7 82 FA |                 rqpin   urx, dm
3e004 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e008 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3e00c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3e010 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3e014 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e018 065 D8 0C B0 CD |         if_c    call    #utx_pre
3e01c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e020 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3e024 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3e028 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3e02c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3e030 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3e034 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3e038 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3e03c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3e040 06f             | .read_byte
3e040 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3e044 070 F0 00 B0 FD |                 call    #utx_byte
3e048 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3e04c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3e050 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3e054 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3e058 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3e05c 076             | .send_crc
3e05c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3e060 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3e064 078 D0 00 B0 FD |                 call    #utx_byte
3e068 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3e06c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3e070 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3e074 07c             | 
3e074 07c             | '------------------------------------------------------------------------------
3e074 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3e074 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3e074 07c             | ' expects that the packet includes at least the CRC word.
3e074 07c             | '
3e074 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3e074 07c             | ' was requested, which makes it difficult to determine where the data stops
3e074 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3e074 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3e074 07c             | ' USB-16 expected residual value of 0xB001.
3e074 07c             | '
3e074 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3e074 07c             | ' so the caller can verify IN success before writing the data to its final
3e074 07c             | ' destination.
3e074 07c             | '------------------------------------------------------------------------------
3e074 07c             | ' On entry:
3e074 07c             | '   pkt_data - max byte count expected to be in the packet.
3e074 07c             | '   newb_flg - signals new byte ready when toggled.
3e074 07c             | ' On exit:
3e074 07c             | '   pkt_cnt - actual number of bytes read.
3e074 07c             | '------------------------------------------------------------------------------
3e074 07c             | urx_data
3e074 07c F7 75 03 F6 |                 mov     htmp2, pb
3e078 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3e07c 07e 00 00 C0 FF 
3e080 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3e084 080 BA EF 03 F6 |                 mov     pb, htmp2
3e088 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3e08c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3e090 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3e094 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3e098 085             | .wait_byte
3e098 085             | ' In-line rx for max speed
3e098 085 22 A7 82 FA |                 rqpin   urx, dm
3e09c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3e0a0 087 53 A5 02 F5 |                 and     utx, urx
3e0a4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3e0a8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3e0ac 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3e0b0 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3e0b4 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3e0b8 08d DC FF 9F FD |                 jmp     #.wait_byte
3e0bc 08e             | .get_byte
3e0bc 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3e0c0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3e0c4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3e0c8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3e0cc 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3e0d0 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3e0d4 094             | .end_crc
3e0d4 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3e0d8 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3e0dc 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3e0e0 097 2D 00 64 1D |         if_a    ret
3e0e4 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3e0e4 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3e0e4 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3e0e4 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3e0e4 098 22 A7 82 FA |                 rqpin   urx, dm
3e0e8 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3e0ec 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3e0f0 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3e0f0 09b             | .chk_crc
3e0f0 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3e0f4 09c 58 00 00 FF 
3e0f8 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3e0fc 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3e100 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3e104 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3e108 0a1 34 09 B0 FD |                 call    #poll_waitx
3e10c 0a2             | 
3e10c 0a2             |                 ' Fall through to utx_handshake
3e10c 0a2             | 
3e10c 0a2             | '------------------------------------------------------------------------------
3e10c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3e10c 0a2             | ' the appropriate IP delay has been inserted.
3e10c 0a2             | '------------------------------------------------------------------------------
3e10c 0a2             | ' On entry:
3e10c 0a2             | '   retval - handshake PID to send.
3e10c 0a2             | ' On exit:
3e10c 0a2             | '   retval unchanged.
3e10c 0a2             | '------------------------------------------------------------------------------
3e10c 0a2             | utx_handshake
3e10c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e110 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3e114 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e118 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3e11c 0a6 5F A5 02 F6 |                 mov     utx, retval
3e120 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3e124 0a8             | .idle
3e124 0a8 22 A7 82 FA |                 rqpin   urx, dm
3e128 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3e12c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3e130 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3e134 0ac 08 09 90 FD |                 jmp     #poll_waitx
3e138 0ad             | 
3e138 0ad             | '------------------------------------------------------------------------------
3e138 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3e138 0ad             | '------------------------------------------------------------------------------
3e138 0ad             | ' On entry:
3e138 0ad             | '   utx - byte to transmit.
3e138 0ad             | ' On exit:
3e138 0ad             | '------------------------------------------------------------------------------
3e138 0ad             | utx_byte
3e138 0ad 40 46 72 FD |                 testp   dp                      wc
3e13c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3e140 0af 23 03 08 FC |                 akpin   dp
3e144 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3e148 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3e14c 0b2             | 
3e14c 0b2             | '------------------------------------------------------------------------------
3e14c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3e14c 0b2             | '------------------------------------------------------------------------------
3e14c 0b2             | ' On entry:
3e14c 0b2             | ' On exit:
3e14c 0b2             | '   retval - the byte read.
3e14c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3e14c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3e14c 0b2             | '     received.
3e14c 0b2             | '------------------------------------------------------------------------------
3e14c 0b2             | urx_next
3e14c 0b2 22 A7 8A FA |                 rdpin   urx, dm
3e150 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3e154 0b4 53 A5 02 F5 |                 and     utx, urx
3e158 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3e15c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3e160 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3e164 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3e168 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e16c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3e170 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3e174 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3e178 0bd 2D 00 64 FD |                 ret
3e17c 0be             | 
3e17c 0be             | '------------------------------------------------------------------------------
3e17c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3e17c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3e17c 0be             | ' length, and the PID is not included in the CRC calculation:
3e17c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3e17c 0be             | '  CRC5  ENDP ADDRESS PID
3e17c 0be             | ' %00000_1111_1111111_xxxxxxxx
3e17c 0be             | '------------------------------------------------------------------------------
3e17c 0be             | ' On entry:
3e17c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3e17c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3e17c 0be             | ' On exit:
3e17c 0be             | '   ep_addr_pid - CRC value appended to the packet.
3e17c 0be             | '------------------------------------------------------------------------------
3e17c 0be             | calc_crc5
3e17c 0be FF 03 00 FF 
3e180 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3e184 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3e188 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3e18c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3e190 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3e194 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3e198 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3e19c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3e1a0 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3e1a4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3e1a8 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3e1ac 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3e1b0 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3e1b4 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3e1b8 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3e1bc 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3e1c0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3e1c4 0d0             | 
3e1c4 0d0             | '------------------------------------------------------------------------------
3e1c4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3e1c4 0d0             | '------------------------------------------------------------------------------
3e1c4 0d0             | isr1_fsframe
3e1c4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3e1c8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e1cc 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e1d0 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e1d4 0d4             | .wait
3e1d4 0d4 40 46 72 FD |                 testp   dp                      wc
3e1d8 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e1dc 0d6 23 03 08 FC |                 akpin   dp
3e1e0 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3e1e4 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3e1e8 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3e1ec 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3e1f0 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3e1f4 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3e1f8 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3e1fc 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3e200 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3e204 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3e208 0e1 2C FF BF FD |                 call    #utx_byte
3e20c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3e210 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3e214 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3e218 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3e21c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3e220 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3e224 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3e228 0e9 5B A5 42 F5 |                 or      utx, icrc
3e22c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3e230 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3e234 0ec 20 00 90 FD |                 jmp     #isr1_wait
3e238 0ed             | isr1_lsframe
3e238 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3e23c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e240 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e244 0f0             | .wait
3e244 0f0 40 46 72 FD |                 testp   dp                      wc
3e248 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e24c 0f2 23 03 08 FC |                 akpin   dp
3e250 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3e254 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3e258 0f5             | isr1_wait
3e258 0f5 22 A5 82 FA |                 rqpin   utx, dm
3e25c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3e260 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3e264 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3e268 0f9 03 00 00 FF 
3e26c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3e270 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3e274 0fc F5 FF 3B FB |                 reti1
3e278 0fd             | 
3e278 0fd             | '------------------------------------------------------------------------------
3e278 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3e278 0fd             | ' transaction will complete before the next frame is triggered.
3e278 0fd             | '------------------------------------------------------------------------------
3e278 0fd             | ' On entry:
3e278 0fd             | ' On exit:
3e278 0fd             | '------------------------------------------------------------------------------
3e278 0fd             | wait_txn_ok
3e278 0fd 1A 74 63 FD |                 getct   htmp2
3e27c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3e280 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e284 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3e288 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3e28c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3e290 103 2D 00 64 FD |                 ret
3e294 104             | 
3e294 104             | '------------------------------------------------------------------------------
3e294 104             | ' A device connection was detected, or a bus reset was requested by the USB
3e294 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3e294 104             | ' and perform a reset sequence prior to device enumeration.
3e294 104             | '------------------------------------------------------------------------------
3e294 104             | dev_reset
3e294 104 22 A7 82 FA |                 rqpin   urx, dm
3e298 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3e29c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3e2a0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3e2a4 108             | reset
3e2a4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3e2a8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3e2ac 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3e2b0 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e2b4 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3e2b8 10d 1A 92 62 FD |                 getct   iframe_ct_base
3e2bc 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e2c0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e2c4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3e2c8 111 24 70 07 F1 |                 add     htmp, #36
3e2cc 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3e2d0 113             | .framewait
3e2d0 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3e2d4 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3e2d8 115 2D 00 64 FD |                 ret
3e2dc 116             | 
3e2dc 116             | '------------------------------------------------------------------------------
3e2dc 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3e2dc 116             | '------------------------------------------------------------------------------
3e2dc 116             | ' On entry:
3e2dc 116             | '   PTRA - source address.
3e2dc 116             | '   PB - destination address.
3e2dc 116             | '   hr0 - length of copy, in bytes.
3e2dc 116             | ' On exit:
3e2dc 116             | '------------------------------------------------------------------------------
3e2dc 116             | hmemcpy
3e2dc 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3e2e0 117 F7 71 43 FC |                 wrbyte  htmp, pb
3e2e4 118 01 EE 07 F1 |                 add     pb, #1
3e2e8 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3e2ec 11a             | 
3e2ec 11a             | '------------------------------------------------------------------------------
3e2ec 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3e2ec 11a             | ' loop until the errant device is disconnected.
3e2ec 11a             | '------------------------------------------------------------------------------
3e2ec 11a             | ' On entry:
3e2ec 11a             | ' On exit:
3e2ec 11a             | '------------------------------------------------------------------------------
3e2ec 11a             | host_error
3e2ec 11a             |           if ERROR_LED >= 0
3e2ec 11a             |           end
3e2ec 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3e2f0 11b             | 
3e2f0 11b             | '------------------------------------------------------------------------------
3e2f0 11b             | ' Get HID descriptor buffer for current port
3e2f0 11b             | '------------------------------------------------------------------------------
3e2f0 11b             | ' On entry:
3e2f0 11b             | ' On exit:
3e2f0 11b             | '   PB - HID descriptor buffer pointer
3e2f0 11b             | '------------------------------------------------------------------------------
3e2f0 11b             | get_hid_descr_buffer
3e2f0 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3e2f4 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3e2f8 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3e2fc 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3e300 11f             | 
3e300 11f             | 
3e300 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3e304 120             | 
3e304 120             | ' USB commands and error codes
3e304 120 00 00 00 00 | cmd_data        long    0
3e308 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3e30c 122             | 
3e30c 122             | ' Parameters block assigned at cog startup
3e30c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3e310 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3e314 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3e318 125             | if ACTIVITY_LED >= 0
3e318 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3e318 125             | end
3e318 125             | if ERROR_LED >= 0
3e318 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3e318 125             | end
3e318 125 00 00 00 00 | hid_descr_p     long    0
3e31c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3e31c 126             | 'hkbd_report_p   long    0
3e31c 126 00 00 00 00 | hub_descr_p     long    0
3e320 127 00 00 00 00 | urx_buff_p      long    0
3e324 128 00 00 00 00 | dev_desc_buff_p long    0
3e328 129 00 00 00 00 | con_desc_buff_p long    0
3e32c 12a 00 00 00 00 | cache_start_p   long    0
3e330 12b 00 00 00 00 | cache_end_p     long    0
3e334 12c             | if EMUPAD_MAX_PLAYER > 0
3e334 12c             | emupad_out_ptr  long    0
3e334 12c             | end
3e334 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3e338 12d             | 
3e338 12d             | hdev_init_start
3e338 12d             | hdev_port       res     1
3e338 12d             | hdev_port       res     1
3e338 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e338 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e338 12d             | kbm_next_datax  res     1
3e338 12d             | kbm_next_datax  res     1
3e338 12d             | hub_intf_num    res     1
3e338 12d             | hub_intf_num    res     1
3e338 12d             | hub_next_datax  res     1
3e338 12d             | hub_next_datax  res     1
3e338 12d             | hub_status_chg  res     1
3e338 12d             | hub_status_chg  res     1
3e338 12d             | hub_port_status res     1
3e338 12d             | hub_port_status res     1
3e338 12d             | if HAVE_MOUSE
3e338 12d             | ms_intf_num     res     1
3e338 12d             | ms_intf_num     res     1
3e338 12d             | ms_in_max_pkt   res     1
3e338 12d             | ms_in_max_pkt   res     1
3e338 12d             | end
3e338 12d             | kb_intf_num     res     1
3e338 12d             | kb_intf_num     res     1
3e338 12d             | kb_interval     res     1
3e338 12d             | kb_interval     res     1
3e338 12d             | kb_in_max_pkt   res     1
3e338 12d             | kb_in_max_pkt   res     1
3e338 12d             | kb_max_index    res     1
3e338 12d             | kb_max_index    res     1
3e338 12d             | kb_led_states   res     1
3e338 12d             | kb_led_states   res     1
3e338 12d             | gp_intf_num     res     1
3e338 12d             | gp_intf_num     res     1
3e338 12d             | gp_interval     res     1
3e338 12d             | gp_interval     res     1
3e338 12d             | gp_max_index    res     1
3e338 12d             | gp_max_index    res     1
3e338 12d             | gp_descr_len    res     1+MAX_DEVICES
3e338 12d             | gp_descr_len    res     1+MAX_DEVICES
3e338 12d             | hdev_init_end
3e338 12d             | 
3e338 12d             | ' Initialized at cog startup:
3e338 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e338 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e338 12d             | iframe_ct_new   res     1
3e338 12d             | iframe_ct_new   res     1
3e338 12d             | iframe_ct_base  res     1
3e338 12d             | iframe_ct_base  res     1
3e338 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e338 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e338 12d             | 
3e338 12d             | ' This register block is reset to zero when a USB device connects
3e338 12d             | hreg_init_start
3e338 12d             | hstatus         res     1         ' Host status flags
3e338 12d             | hstatus         res     1         ' Host status flags
3e338 12d             | hctwait         res     1         ' Poll-based wait clocks
3e338 12d             | hctwait         res     1         ' Poll-based wait clocks
3e338 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e338 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e338 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e338 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e338 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e338 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e338 12d             | xfer_retry      res     1         ' Control transfer retry count
3e338 12d             | xfer_retry      res     1         ' Control transfer retry count
3e338 12d             | retry           res     1         ' Transaction retry count
3e338 12d             | retry           res     1         ' Transaction retry count
3e338 12d             | utx             res     1         ' Byte to transmit on USB
3e338 12d             | utx             res     1         ' Byte to transmit on USB
3e338 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e338 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e338 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e338 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e338 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e338 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e338 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e338 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e338 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e338 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e338 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e338 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e338 12d             | frame           res     1         ' USB 1ms frame counter value
3e338 12d             | frame           res     1         ' USB 1ms frame counter value
3e338 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e338 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e338 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e338 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e338 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e338 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e338 12d             | crc             res     1         ' Used for CRC16 calculation
3e338 12d             | crc             res     1         ' Used for CRC16 calculation
3e338 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e338 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e338 12d             | retval          res     1         ' Global success/fail return parameter
3e338 12d             | retval          res     1         ' Global success/fail return parameter
3e338 12d             | context_retval  res     1         ' Operation contextual return parameter
3e338 12d             | context_retval  res     1         ' Operation contextual return parameter
3e338 12d             | ' Device stuff
3e338 12d             | hdev_id         res     1+MAX_DEVICES
3e338 12d             | hdev_id         res     1+MAX_DEVICES
3e338 12d             | hdev_bcd        res     1
3e338 12d             | hdev_bcd        res     1
3e338 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e338 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e338 12d             | ' Keyboard/mouse stuff
3e338 12d             | hctrl_ep_addr   res     1
3e338 12d             | hctrl_ep_addr   res     1
3e338 12d             | hctrl_max_pkt   res     1
3e338 12d             | hctrl_max_pkt   res     1
3e338 12d             | hconfig_base    res     1
3e338 12d             | hconfig_base    res     1
3e338 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e338 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e338 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e338 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e338 12d             | hdev_class      res     1
3e338 12d             | hdev_class      res     1
3e338 12d             | hdev_subclass   res     1
3e338 12d             | hdev_subclass   res     1
3e338 12d             | hdev_protocol   res     1
3e338 12d             | hdev_protocol   res     1
3e338 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e338 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e338 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e338 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e338 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e338 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e338 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e338 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e338 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e338 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e338 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e338 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e338 12d             | if HAVE_MOUSE
3e338 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e338 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e338 12d             | end
3e338 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e338 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e338 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e338 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e338 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e338 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e338 12d             | hdev_out_addr   res     1
3e338 12d             | hdev_out_addr   res     1
3e338 12d             | 
3e338 12d             | if EMUPAD_MAX_PLAYER > 0
3e338 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3e338 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3e338 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3e338 12d             | end
3e338 12d             | 
3e338 12d             | hreg_init_end
3e338 12d             | 
3e338 12d             | hidr_start
3e338 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e338 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e338 12d             | hidr_flags      res     1
3e338 12d             | hidr_flags      res     1
3e338 12d             | hidr_axis       res     3
3e338 12d             | hidr_axis       res     3
3e338 12d             | hidr_buttons    res     1
3e338 12d             | hidr_buttons    res     1
3e338 12d             | hidr_hats       res     1
3e338 12d             | hidr_hats       res     1
3e338 12d             | '' Above are actually useful values, 6 longs
3e338 12d             | hidr_id         res     1
3e338 12d             | hidr_id         res     1
3e338 12d             | hidr_state      res     1
3e338 12d             | hidr_state      res     1
3e338 12d             | hidr_size       res     1
3e338 12d             | hidr_size       res     1
3e338 12d             | hidr_count      res     1
3e338 12d             | hidr_count      res     1
3e338 12d             | hidr_offset     res     1
3e338 12d             | hidr_offset     res     1
3e338 12d             | hidr_usage_idx  res     1
3e338 12d             | hidr_usage_idx  res     1
3e338 12d             | hidr_lminmax    res     1
3e338 12d             | hidr_lminmax    res     1
3e338 12d             | hidr_pminmax    res     1
3e338 12d             | hidr_pminmax    res     1
3e338 12d             | hidr_type       res     1
3e338 12d             | hidr_type       res     1
3e338 12d             | hidr_end
3e338 12d             | 
3e338 12d             | ' Variables dependent on the system freqency
3e338 12d             | _var_64_lower_  res     1
3e338 12d             | _var_64_lower_  res     1
3e338 12d             | _var_64_upper_  res     1
3e338 12d             | _var_64_upper_  res     1
3e338 12d             | _12Mbps_        res     1
3e338 12d             | _12Mbps_        res     1
3e338 12d             | _1_5Mbps_       res     1
3e338 12d             | _1_5Mbps_       res     1
3e338 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e338 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e338 12d             | _1us_           res     1         ' 1us
3e338 12d             | _1us_           res     1         ' 1us
3e338 12d             | _10us_          res     1         ' 10us
3e338 12d             | _10us_          res     1         ' 10us
3e338 12d             | _33us_          res     1         ' 33us
3e338 12d             | _33us_          res     1         ' 33us
3e338 12d             | _txn_err_       res     1         ' 250us
3e338 12d             | _txn_err_       res     1         ' 250us
3e338 12d             | _500us_         res     1         ' 500us
3e338 12d             | _500us_         res     1         ' 500us
3e338 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e338 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e338 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e338 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e338 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e338 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e338 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e338 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e338 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e338 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e338 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e338 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e338 12d             | _preamble_wait_ res     1
3e338 12d             | _preamble_wait_ res     1
3e338 12d             | _1ms_           res     1         ' 1ms
3e338 12d             | _1ms_           res     1         ' 1ms
3e338 12d             | _2ms_           res     1         ' 2ms
3e338 12d             | _2ms_           res     1         ' 2ms
3e338 12d             | _suspend_wait_  res     1         ' 3ms
3e338 12d             | _suspend_wait_  res     1         ' 3ms
3e338 12d             | _4ms_           res     1         ' 4ms
3e338 12d             | _4ms_           res     1         ' 4ms
3e338 12d             | _xfer_wait_     res     1         ' 5ms
3e338 12d             | _xfer_wait_     res     1         ' 5ms
3e338 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e338 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e338 12d             | _reset_hold_    res     1         ' 15ms
3e338 12d             | _reset_hold_    res     1         ' 15ms
3e338 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e338 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e338 12d             | _21ms_          res     1         ' 21ms
3e338 12d             | _21ms_          res     1         ' 21ms
3e338 12d             | _100ms_         res     1         ' 100ms
3e338 12d             | _100ms_         res     1         ' 100ms
3e338 12d             | _500ms_         res     1         ' 500ms
3e338 12d             | _500ms_         res     1         ' 500ms
3e338 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e338 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e338 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e338 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e338 12d             | '------------------------------------------------------------------------------
3e338 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e338 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e338 12d             | _usb_d_ls_nco_  res     1
3e338 12d             | _usb_d_ls_nco_  res     1
3e338 12d             | _usb_h_fs_nco_  res     1
3e338 12d             | _usb_h_fs_nco_  res     1
3e338 12d             | _usb_d_fs_nco_  res     1
3e338 12d             | _usb_d_fs_nco_  res     1
3e338 12d             | '------------------------------------------------------------------------------
3e338 12d             | ' Scratch registers
3e338 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e338 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e338 12d             | htmp1           res     1
3e338 12d             | htmp1           res     1
3e338 12d             | htmp2           res     1
3e338 12d             | htmp2           res     1
3e338 12d             | htmp3           res     1
3e338 12d             | htmp3           res     1
3e338 12d             | hrep            res     1         ' Repeat count
3e338 12d             | hrep            res     1         ' Repeat count
3e338 12d             | hsave0          res     1         ' Subroutine parameter saves
3e338 12d             | hsave0          res     1         ' Subroutine parameter saves
3e338 12d             | hsave1          res     1
3e338 12d             | hsave1          res     1
3e338 12d             | hsave2          res     1
3e338 12d             | hsave2          res     1
3e338 12d             | isrtmp1         res     1
3e338 12d             | isrtmp1         res     1
3e338 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e338 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e338 12d             | hr0             res     1         ' Multi-purpose registers
3e338 12d             | hr0             res     1         ' Multi-purpose registers
3e338 12d             | hr1             res     1
3e338 12d             | hr1             res     1
3e338 12d             | hr2             res     1
3e338 12d             | hr2             res     1
3e338 12d             | hr3             res     1
3e338 12d             | hr3             res     1
3e338 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e338 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e338 12d             | hpar2           res     1
3e338 12d             | hpar2           res     1
3e338 12d             | hpar3           res     1
3e338 12d             | hpar3           res     1
3e338 12d             | hct2            res     1         ' Function response bus turn-around timer
3e338 12d             | hct2            res     1         ' Function response bus turn-around timer
3e338 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e338 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e338 12d             | mod_cnt         res     1         ' Used in idle loops
3e338 12d             | mod_cnt         res     1         ' Used in idle loops
3e338 12d             |                 fit     $1F0
3e338 12d             |                 org     $200
3e338 200             | hlut_start
3e338 200             | 
3e338 200             | '------------------------------------------------------------------------------
3e338 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3e338 200             | ' settings to startup defaults.
3e338 200             | '------------------------------------------------------------------------------
3e338 200             | ' On entry:
3e338 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3e338 200             | '------------------------------------------------------------------------------
3e338 200             | set_speed_full
3e338 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3e33c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3e340 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3e344 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3e348 204             | '                ret                             wcz     ' Restore caller flags on exit
3e348 204             | 
3e348 204             | '------------------------------------------------------------------------------
3e348 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3e348 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3e348 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3e348 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3e348 204             | ' putting the smart pins into reset.
3e348 204             | '------------------------------------------------------------------------------
3e348 204             | ' On entry:
3e348 204             | ' On exit: CZ flags restored to caller states
3e348 204             | '------------------------------------------------------------------------------
3e348 204             | set_speed_low
3e348 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3e34c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3e350 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3e354 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3e358 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3e35c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3e360 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3e364 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3e368 20c             | 
3e368 20c             | '------------------------------------------------------------------------------
3e368 20c             | ' Perform configuration stuff required when a device intitially connects.
3e368 20c             | '------------------------------------------------------------------------------
3e368 20c             | ' On entry:
3e368 20c             | ' On exit:
3e368 20c             | '------------------------------------------------------------------------------
3e368 20c             | on_connect
3e368 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3e36c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3e370 20e             | .retry
3e370 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e374 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3e378 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3e37c 211 00 08 00 FF 
3e380 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3e384 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3e388 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e38c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3e390 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3e394 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3e398 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e39c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3e3a0 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3e3a4 21b 4C 03 B0 FD |                 call    #poll_waitx
3e3a8 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3e3ac 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3e3b0 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3e3b4 21f B8 FF 9F FD |                 jmp     #.retry
3e3b8 220             | .get_dev_desc
3e3b8 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3e3bc 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3e3c0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3e3c4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3e3c8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3e3cc 225 88 FB BF FD |                 call    #reset
3e3d0 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3e3d4 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e3d8 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3e3dc 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3e3e0 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e3e4 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e3e8 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3e3ec 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3e3f0 22e 04 00 00 FF 
3e3f4 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3e3f8 230 34 FA BF FD |                 call    #calc_crc5
3e3fc 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3e400 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e404 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3e408 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3e40c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3e410 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3e414 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e418 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e41c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3e420 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3e424 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3e428 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3e42c 23d C4 02 B0 FD |                 call    #poll_waitx
3e430 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3e434 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e438 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3e43c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3e440 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3e444 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e448 244 2D 00 64 5D |         if_nz   ret
3e44c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3e450 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3e454 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3e458 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3e45c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3e460 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3e464 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3e468 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3e46c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3e470 24e 2C FB 9F CD |         if_b    jmp     #host_error
3e474 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3e478 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e47c 251 2D EC 63 FD |                 call    pa
3e480 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3e484 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e488 254 2C EC 63 FD |                 jmp     pa
3e48c 255             | 
3e48c 255             | '------------------------------------------------------------------------------
3e48c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3e48c 255             | ' Status reporting is always in the function-to-host direction.
3e48c 255             | '------------------------------------------------------------------------------
3e48c 255             | ' On entry:
3e48c 255             | '   PTRA - start address of the SETUP data in hub.
3e48c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3e48c 255             | '     stage.
3e48c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3e48c 255             | ' On exit:
3e48c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3e48c 255             | '     contains the count of data stage bytes actually received, which must
3e48c 255             | '     always be <= the count requested.
3e48c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3e48c 255             | '     more specific USB operation error code.
3e48c 255             | '------------------------------------------------------------------------------
3e48c 255             | control_read
3e48c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3e490 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3e494 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3e498 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3e49c 259             | .xfer_start
3e49c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3e4a0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3e4a4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e4a8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3e4ac 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3e4b0 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3e4b4 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3e4b8 260 61 00 00 FF 
3e4bc 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3e4c0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3e4c4 263             | .data
3e4c4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3e4c8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3e4cc 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3e4d0 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3e4d4 267             | .nak_retry
3e4d4 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3e4d8 268             | .in_retry
3e4d8 268 BC F6 BF FD |                 call    #txn_in
3e4dc 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3e4e0 26a 28 00 90 AD |         if_z    jmp     #.commit
3e4e4 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e4e8 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3e4ec 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e4f0 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e4f4 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3e4f8 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3e4fc 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3e500 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e504 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3e508 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3e50c 275             | .commit
3e50c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3e510 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3e514 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3e518 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3e51c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3e520 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3e524 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3e528 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3e52c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3e530 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3e534 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3e538 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3e53c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3e540 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3e544 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3e548 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3e54c 285             | .pre_status
3e54c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3e550 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3e554 287 00 B0 06 F6 |                 mov     pkt_data, #0
3e558 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3e55c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e560 28a 61 00 00 FF 
3e564 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3e568 28c             | .out_retry
3e568 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3e56c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e570 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3e574 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e578 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3e57c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e580 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3e584 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3e588 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e58c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3e590 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3e594 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3e594 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3e594 297             | ' ControlRead() transfer gets things unstuck most of the time...
3e594 297             | .xfer_retry
3e594 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3e598 298 58 01 B0 FD |                 call    #poll_waitx
3e59c 299 8C F9 BF FD |                 call    #wait_txn_ok
3e5a0 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3e5a4 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3e5a8 29c C8 EF 03 F6 |                 mov     pb, hpar3
3e5ac 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3e5b0 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3e5b4 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3e5b8 2a0             | 
3e5b8 2a0             | '------------------------------------------------------------------------------
3e5b8 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3e5b8 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3e5b8 2a0             | ' the SETUP data struct is filled with the required values.
3e5b8 2a0             | '------------------------------------------------------------------------------
3e5b8 2a0             | ' On entry:
3e5b8 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3e5b8 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3e5b8 2a0             | '     stage.
3e5b8 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3e5b8 2a0             | ' On exit:
3e5b8 2a0             | '   retval - used to convey the success/failure of each stage.
3e5b8 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3e5b8 2a0             | '     more specific USB operation error code.
3e5b8 2a0             | '------------------------------------------------------------------------------
3e5b8 2a0             | control_write
3e5b8 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e5bc 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3e5c0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3e5c4 2a3             | 
3e5c4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3e5c8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3e5cc 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3e5d0 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3e5d4 2a7             | .xfer_start
3e5d4 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3e5d8 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3e5dc 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3e5e0 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e5e4 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3e5e8 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3e5ec 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3e5f0 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3e5f4 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3e5f8 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3e5fc 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e600 2b2             | .data
3e600 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3e604 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3e608 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3e60c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3e610 2b6             | .out_retry
3e610 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3e614 2b7 88 F6 BF FD |                 call    #txn_out
3e618 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e61c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3e620 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e624 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3e628 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3e62c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3e630 2be             | .commit
3e630 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3e634 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3e638 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3e63c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3e640 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3e644 2c3             | pre_status_in
3e644 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3e648 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e64c 2c5             | .status_retry
3e64c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3e650 2c6 44 F5 BF FD |                 call    #txn_in
3e654 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3e658 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3e65c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3e660 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3e664 2cb 2D 00 64 AD |         if_z    ret
3e668 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3e66c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e670 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3e674 2cf             | '               ret                                     ' Caller must handle transfer retirement
3e674 2cf             | 
3e674 2cf             | '------------------------------------------------------------------------------
3e674 2cf             | ' Execute an IN interrupt transaction.
3e674 2cf             | '------------------------------------------------------------------------------
3e674 2cf             | ' On entry:
3e674 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3e674 2cf             | '   hpar2 - Address of the IN data buffer
3e674 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3e674 2cf             | ' On exit:
3e674 2cf             | '   retval - the result of the operation.
3e674 2cf             | '   hpar3 - the count of IN data bytes actually received.
3e674 2cf             | '------------------------------------------------------------------------------
3e674 2cf             | do_int_in
3e674 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e678 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3e67c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3e680 2d2             | 
3e680 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3e684 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3e688 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3e68c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3e690 2d6             | .retry
3e690 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3e694 2d7 00 F5 BF FD |                 call    #txn_in
3e698 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3e69c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3e6a0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3e6a4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3e6a8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3e6ac 2dd 54 00 B0 FD |                 call    #retry_wait
3e6b0 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e6b4 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3e6b8 2e0 D4 FF 9F FD |                 jmp     #.retry
3e6bc 2e1             | .commit
3e6bc 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3e6c0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3e6c4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3e6c8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3e6cc 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3e6d0 2e6             | .post_ret
3e6d0 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3e6d4 2e7             | 
3e6d4 2e7             | 
3e6d4 2e7             | '------------------------------------------------------------------------------
3e6d4 2e7             | ' Resets the downstream hub port to FS
3e6d4 2e7             | '------------------------------------------------------------------------------
3e6d4 2e7             | dwnstream_reset
3e6d4 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e6d8 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3e6dc 2e9             | 
3e6dc 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3e6e0 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3e6e4 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e6e8 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3e6ec 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3e6f0 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3e6f4 2ef             | 
3e6f4 2ef             | '------------------------------------------------------------------------------
3e6f4 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3e6f4 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3e6f4 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3e6f4 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3e6f4 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3e6f4 2ef             | '------------------------------------------------------------------------------
3e6f4 2ef             | ' On entry:
3e6f4 2ef             | '   hctwait - wait interval in sysclocks.
3e6f4 2ef             | ' On exit:
3e6f4 2ef             | '------------------------------------------------------------------------------
3e6f4 2ef             | poll_waitx
3e6f4 2ef 1A 92 63 FD |                 getct   hct2
3e6f8 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3e6fc 2f1             | .wait
3e6fc 2f1 FF 25 CC FB |                 jnct2   #.wait
3e700 2f2 2D 00 64 FD |                 ret
3e704 2f3             | 
3e704 2f3             | '------------------------------------------------------------------------------
3e704 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3e704 2f3             | '------------------------------------------------------------------------------
3e704 2f3             | ' On entry:
3e704 2f3             | '   retval - transaction response PID or error code.
3e704 2f3             | ' On exit:
3e704 2f3             | '------------------------------------------------------------------------------
3e704 2f3             | retry_wait
3e704 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e708 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3e70c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e710 2f6 14 00 90 AD |         if_z    jmp     #.nak
3e714 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3e718 2f8 D8 FF BF FD |                 call    #poll_waitx
3e71c 2f9             | .dec
3e71c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3e720 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3e724 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3e728 2fc             | .nak
3e728 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3e72c 2fd C4 FF BF FD |                 call    #poll_waitx
3e730 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3e734 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3e738 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3e73c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3e740 302 2D 00 64 FD |                 ret
3e744 303             | 
3e744 303             | host_reset
3e744 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3e748 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3e74c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3e74c 305 BD 01 05 FF 
3e750 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3e754 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3e758 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3e75c 309             | ' Check to see if the system clock has been changed.
3e75c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3e760 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3e764 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3e768 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3e76c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3e770 30e 40 46 62 FD |                 dirl    dp
3e774 30f             | 
3e774 30f 28 02 64 FD |                 setq    #1
3e778 310 80 00 80 FF 
3e77c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3e780 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3e784 313             | .enable
3e784 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3e788 314 41 46 62 FD |                 dirh    dp
3e78c 315 1F 36 63 FD |                 waitx   _1us_
3e790 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e794 317             | 
3e794 317             |                 ' Handle Port protection enable and startup delay
3e794 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3e798 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3e79c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3e7a0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3e7a4 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3e7a8 31c             | 
3e7a8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3e7ac 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3e7b0 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3e7b4 31f 00 00 04 F6 |                 mov     0-0, #0
3e7b8 320             | .regloop
3e7b8 320             | 
3e7b8 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3e7b8 320             | 
3e7b8 320             | discon_entry
3e7b8 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3e7bc 321             | 
3e7bc 321             |               
3e7bc 321             |         if HAVE_HIDPAD
3e7bc 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3e7c0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e7c4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3e7c8 324 F7 01 68 FC |                 wrlong  #0,pb
3e7cc 325             |         end
3e7cc 325             |         if EMUPAD_MAX_PLAYER > 0
3e7cc 325             |         end
3e7cc 325             | 
3e7cc 325             |                 ' Fall through to disconnected loop
3e7cc 325             | 
3e7cc 325             | '-----------------------------------------------------------------------------------------------------------------
3e7cc 325             | ' Device connect handling (Section 7.1.7.3).
3e7cc 325             | '-----------------------------------------------------------------------------------------------------------------
3e7cc 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3e7cc 325             | ' device to connect (Section 7.1.7.3).
3e7cc 325             | '-----------------------------------------------------------------------------------------------------------------
3e7cc 325             | disconnected
3e7cc 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3e7d0 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3e7d4 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3e7d8 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3e7dc 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3e7e0 32a             |         if ACTIVITY_LED >= 0
3e7e0 32a             |         end
3e7e0 32a 22 A7 82 FA |                 rqpin   urx, dm
3e7e4 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3e7e8 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3e7ec 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3e7f0 32e             | .se1_test
3e7f0 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3e7f4 32f FC FE BF FD |                 call    #poll_waitx
3e7f8 330 22 A7 82 FA |                 rqpin   urx, dm
3e7fc 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3e800 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3e804 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3e808 334             | .se1            'SE1 is a fatal error condition
3e808 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3e80c 335 E4 FE BF FD |                 call    #poll_waitx
3e810 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3e814 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3e818 338             | .connect_test                                           ' Test lines until stable J/K state seen
3e818 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3e81c 339 22 A7 82 FA |                 rqpin   urx, dm
3e820 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3e824 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3e828 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3e82c 33d             | connected
3e82c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3e830 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3e834 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3e838 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3e83c 341             | .set_pulse
3e83c 341 1A 64 63 FD |                 getct   _pulse_time_
3e840 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3e844 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3e844 343             | ' of 1ms and make a correction, if necessary.
3e844 343             | '                mov     htmp, _1ms_
3e844 343             | '                subs    htmp, iframe_delta
3e844 343             | '                adds    _frame1ms_clks_, htmp
3e844 343             | '                debug(udec(_frame1ms_clks_))
3e844 343             | 
3e844 343             |                 ' Fall through to idle/processing loop
3e844 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3e848 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3e84c 345             | 
3e84c 345             | hidle
3e84c 345 22 A7 82 FA |                 rqpin   urx, dm
3e850 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3e854 347 98 00 90 CD |         if_c    jmp     #.se0_test
3e858 348 24 06 70 FD |                 pollct3                         wc
3e85c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3e860 34a 1A 94 63 FD |                 getct   hct3
3e864 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3e868 34c             | 
3e868 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3e86c 34d 00 70 E3 F8 |                 getbyte htmp
3e870 34e             | 
3e870 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3e874 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3e878 350 40 00 90 AD |         if_z    jmp     #.poll
3e87c 351             | 
3e87c 351             |         if _HAVE_GAMEPAD
3e87c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3e880 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3e884 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3e888 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3e88c 355 2C 00 90 AD |         if_z    jmp     #.poll
3e890 356             |         end
3e890 356             | 
3e890 356             |         if HAVE_MOUSE
3e890 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3e894 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3e898 358 20 00 90 AD |         if_z    jmp     #.poll
3e89c 359             |         end
3e89c 359             | 
3e89c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3e8a0 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3e8a4 35b 14 00 90 AD |         if_z    jmp     #.poll
3e8a8 35c             | 
3e8a8 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3e8ac 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3e8b0 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3e8b4 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3e8b8 360             |         if HAVE_MOUSE
3e8b8 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3e8bc 361             |         else
3e8bc 361             |         end
3e8bc 361             | 
3e8bc 361             | .poll
3e8bc 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e8c0 362 2D EC 63 FD |                 call    pa
3e8c4 363             | .skip_poll
3e8c4 363             | 
3e8c4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3e8c8 364             | 
3e8c8 364             | .nopoll
3e8c8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3e8cc 365 44 00 90 AD |         if_z    jmp     #hsuspend
3e8d0 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3e8d4 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3e8d8 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3e8dc 369 1A 84 63 FD |                 getct   hr0
3e8e0 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3e8e4 36b             |         if ACTIVITY_LED >= 0
3e8e4 36b             |         end
3e8e4 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3e8e8 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3e8ec 36d 5C FF 9F FD |                 jmp     #hidle
3e8f0 36e             | ' Check for extended SE0 state on the bus
3e8f0 36e             | .se0_test
3e8f0 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3e8f4 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3e8f8 370 22 A7 82 FA |                 rqpin   urx, dm
3e8fc 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3e900 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3e904 373 24 F6 BF FD |                 call    #wait_txn_ok
3e908 374 00 00 80 FF 
3e90c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3e910 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3e910 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3e914 377             | 
3e914 377             | hsuspend
3e914 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3e918 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3e91c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3e920 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3e924 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3e928 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3e92c 37d             | 
3e92c 37d             |                 ' Fall through to resume wait loop
3e92c 37d             | 
3e92c 37d             | hwait_resume
3e92c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3e930 37e 02 86 47 F0 |                 shr     hr1, #2
3e934 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3e938 380             |         if ACTIVITY_LED >= 0
3e938 380             |         end
3e938 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3e93c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3e940 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3e944 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3e948 384 18 00 90 AD |         if_z    jmp     #.resume
3e94c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3e950 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e954 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3e958 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e95c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3e960 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3e964 38b             | .resume
3e964 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3e968 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3e96c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3e970 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3e974 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3e978 390 1F 70 63 FD |                 waitx   htmp
3e97c 391 22 07 28 FC |                 wypin   #OUT_J, dm
3e980 392 01 70 47 F0 |                 shr     htmp, #1
3e984 393 1F 70 63 FD |                 waitx   htmp
3e988 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e98c 395 1A 92 62 FD |                 getct   iframe_ct_base
3e990 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e994 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e998 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3e99c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3e9a0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3e9a4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3e9a8 39c             | 
3e9a8 39c             | '------------------------------------------------------------------------------
3e9a8 39c             | ' Send preamble to enable low-speed HUB ports
3e9a8 39c             | '------------------------------------------------------------------------------
3e9a8 39c             | ' On entry:
3e9a8 39c             | ' On exit:
3e9a8 39c             | '   USB baud rate set to low-speed
3e9a8 39c             | '------------------------------------------------------------------------------
3e9a8 39c             | utx_pre
3e9a8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3e9ac 39d 40 46 62 FD |                 dirl    dp
3e9b0 39e 28 02 64 FD |                 setq    #1
3e9b4 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3e9b8 3a0 58 44 62 FD |                 drvl    dm
3e9bc 3a1 59 46 62 FD |                 drvh    dp
3e9c0 3a2             | 
3e9c0 3a2 1E 00 00 FF 
3e9c4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3e9c8 3a4             | 
3e9c8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3e9cc 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3e9d0 3a6 28 02 64 3D |         if_nc   setq    #1
3e9d4 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3e9d8 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3e9dc 3a9             | .l1
3e9dc 3a9             | 
3e9dc 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3e9e0 3aa 40 46 62 FD |                 dirl    dp
3e9e4 3ab 28 02 64 FD |                 setq    #1
3e9e8 3ac 80 00 80 FF 
3e9ec 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3e9f0 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3e9f4 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3e9f8 3b0 41 46 62 FD |                 dirh    dp
3e9fc 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ea00 3b2             | 
3ea00 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3ea04 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3ea08 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3ea0c 3b5             | 
3ea0c 3b5             | hlut_end
3ea0c 3b5             |                 fit     $400
3ea0c 3b5             |                 orgh
3ea0c                 | if OVERLAP_MEMORY
3ea0c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3ea0c                 | end
3ea0c                 | '------------------------------------------------------------------------------
3ea0c                 | ' Routines called from cog space.
3ea0c                 | '------------------------------------------------------------------------------
3ea0c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3ea0c                 | '------------------------------------------------------------------------------
3ea0c                 | 
3ea0c                 | '------------------------------------------------------------------------------
3ea0c                 | ' USB host cog initialization.
3ea0c                 | '------------------------------------------------------------------------------
3ea0c                 | usb_host_init
3ea0c                 |                 ' Initialize buffer pointers
3ea0c                 |         if OVERLAP_MEMORY
3ea0c                 |         else
3ea0c     3C 15 B0 FE |                 loc     pb, #hid_descr
3ea10                 |         end
3ea10     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3ea14                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3ea14                 |                 {
3ea14                 |                 }
3ea14                 |         
3ea14                 |                 {
3ea14                 |                 }
3ea14                 |                 'loc     pb,#hkbd_report
3ea14                 |                 'mov     hkbd_report_p,pb
3ea14                 | 
3ea14     04 1D B0 FE |                 loc     pb, #hub_descr
3ea18     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3ea1c     19 1D B0 FE |                 loc     pb, #urx_buff
3ea20     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3ea24     91 1D B0 FE |                 loc     pb, #dev_desc_buff
3ea28     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3ea2c     9B 1D B0 FE |                 loc     pb, #con_desc_buff
3ea30     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3ea34     14 15 B0 FE |                 loc     pb, #usb_cache_start
3ea38     F7 55 02 F6 |                 mov     cache_start_p, pb
3ea3c     E5 1C B0 FE |                 loc     pb, #usb_cache_end
3ea40     F7 57 02 F6 |                 mov     cache_end_p, pb
3ea44                 | 
3ea44                 |         if ERROR_LED >= 0
3ea44                 |         end
3ea44                 | 
3ea44                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3ea44                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3ea44                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3ea44                 | ' Configure and enable the Serial Host USB port.
3ea44     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3ea48                 | 
3ea48                 | '------------------------------------------------------------------------------
3ea48                 | ' Timing calculations happen before any interrupt(s) are enabled.
3ea48                 | '------------------------------------------------------------------------------
3ea48                 | ' On entry:
3ea48                 | '   htmp - current CLKFREQ value.
3ea48                 | '------------------------------------------------------------------------------
3ea48                 | hinit_usb_timings
3ea48                 | '                getct   htmp2
3ea48     B8 59 02 F6 |                 mov     save_sysclk, htmp
3ea4c     8D 5B 80 FF 
3ea50     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3ea54     18 30 63 FD |                 getqx   _12Mbps_
3ea58     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3ea5c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3ea60     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3ea64     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3ea68     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3ea6c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3ea70     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3ea74     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3ea78     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3ea7c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3ea80     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3ea84     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3ea88     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3ea8c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3ea90     80 00 00 FF 
3ea94     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3ea98     18 2C 63 FD |                 getqx   _var_64_lower_
3ea9c     19 2E 63 FD |                 getqy   _var_64_upper_
3eaa0     28 2C 63 FD |                 setq    _var_64_lower_
3eaa4     65 CD 1D FF 
3eaa8     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3eaac     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3eab0     01 00 00 FF 
3eab4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3eab8     18 2C 63 FD |                 getqx   _var_64_lower_
3eabc     19 2E 63 FD |                 getqy   _var_64_upper_
3eac0     28 2C 63 FD |                 setq    _var_64_lower_
3eac4     A1 07 00 FF 
3eac8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3eacc     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3ead0     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3ead4     09 36 57 F0 |                 shr     _1us_, #9               wc
3ead8     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3eadc     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3eae0     18 38 63 FD |                 getqx   _10us_
3eae4     09 38 57 F0 |                 shr     _10us_, #9              wc
3eae8     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3eaec     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3eaf0     18 3A 63 FD |                 getqx   _33us_
3eaf4     09 3A 57 F0 |                 shr     _33us_, #9              wc
3eaf8     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3eafc     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3eb00     18 3C 63 FD |                 getqx   _txn_err_
3eb04     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3eb08     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3eb0c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3eb10     18 3E 63 FD |                 getqx   _500us_
3eb14     09 3E 57 F0 |                 shr     _500us_, #9             wc
3eb18     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3eb1c     01 00 00 FF 
3eb20     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3eb24     18 40 63 FD |                 getqx   _txn_ok_ls_
3eb28     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3eb2c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3eb30     01 00 00 FF 
3eb34     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3eb38     18 42 63 FD |                 getqx   _txn_ok_fs_
3eb3c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3eb40     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3eb44     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3eb48     05 00 00 FF 
3eb4c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3eb50     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3eb54     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3eb58     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3eb5c     1C 00 00 FF 
3eb60     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3eb64     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3eb68     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3eb6c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3eb70     00 00 00 FF 
3eb74     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3eb78     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3eb7c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3eb80     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3eb84     04 00 00 FF 
3eb88     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3eb8c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3eb90     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3eb94     8D 5B 00 FF 
3eb98     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3eb9c     18 4C 63 FD |                 getqx   _preamble_wait_
3eba0     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3eba4     01 00 00 FF 
3eba8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3ebac     18 2C 63 FD |                 getqx   _var_64_lower_
3ebb0     19 2E 63 FD |                 getqy   _var_64_upper_
3ebb4     28 2C 63 FD |                 setq    _var_64_lower_
3ebb8     01 00 00 FF 
3ebbc     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3ebc0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3ebc4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3ebc8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3ebcc     FF FF 7F FF 
3ebd0     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3ebd4     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3ebd8     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3ebdc     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3ebe0     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3ebe4     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3ebe8     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3ebec     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3ebf0     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3ebf4     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3ebf8     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3ebfc     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3ec00     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3ec04     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3ec08     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3ec0c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3ec10     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3ec14     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3ec18     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3ec1c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3ec20     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3ec24     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3ec28     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3ec2c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3ec30     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3ec34     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3ec38     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3ec3c                 | '        _ret_   mov     _1sec_, save_sysclk
3ec3c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3ec3c                 | '                ret
3ec3c                 | {
3ec3c                 | }
3ec3c                 | 
3ec3c                 | '------------------------------------------------------------------------------
3ec3c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3ec3c                 | ' one. If it is, start the task progression that will configure the device for
3ec3c                 | ' use.
3ec3c                 | '------------------------------------------------------------------------------
3ec3c                 | ' On entry:
3ec3c                 | '   hconfig_base - start address of the cached config descriptor chain.
3ec3c                 | ' On exit:
3ec3c                 | '------------------------------------------------------------------------------
3ec3c                 | hparse_con_desc
3ec3c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3ec40     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3ec44     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3ec48     4E 70 FF F9 |                 movbyts htmp,#%%1032
3ec4c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3ec50                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3ec50                 | 
3ec50     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3ec54     6E ED 03 F1 |                 add     pa, hconfig_base
3ec58     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3ec5c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3ec5c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3ec5c                 | ' that defines a keyboard and/or mouse.
3ec5c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3ec60                 | .next_intf
3ec60     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3ec64     B8 01 90 3D |         if_ae   jmp     #hset_config
3ec68     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3ec6c     75 F3 03 F1 |                 add     ptrb, hnext_desc
3ec70     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3ec74     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3ec78     0C 00 90 AD |         if_z    jmp     #.intf
3ec7c     80 71 C7 FA |                 rdbyte  htmp, ptrb
3ec80     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3ec84     D8 FF 9F FD |                 jmp     #.next_intf
3ec88                 | .intf
3ec88     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3ec8c     00 90 07 F6 |                 mov     hpar3, #0
3ec90     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3ec94     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3ec98     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3ec9c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3eca0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3eca0                 | 
3eca0                 | .endp
3eca0     80 71 C7 FA |                 rdbyte  htmp, ptrb
3eca4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3eca8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3ecac     78 00 90 3D |         if_ae   jmp     #.get_device
3ecb0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3ecb4     75 F3 03 F1 |                 add     ptrb, hnext_desc
3ecb8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3ecbc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3ecc0     64 00 90 AD |         if_z    jmp     #.get_device
3ecc4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3ecc8     04 00 90 AD |         if_z    jmp     #.get_ep
3eccc     D0 FF 9F FD |                 jmp     #.endp
3ecd0                 | .get_ep
3ecd0     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3ecd4     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3ecd8     0F 86 67 F0 |                 shl     hr1, #8 + 7
3ecdc     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3ece0     3F 00 00 FF 
3ece4     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3ece8     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3ecec     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3ecf0     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3ecf4     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ecf8     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3ecfc     A0 FF 9F FD |                 jmp     #.endp
3ed00                 | .in_ep
3ed00     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3ed04     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3ed08                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3ed08     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3ed0c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3ed10     8C FF 9F FD |                 jmp     #.endp
3ed14                 | .out_ep
3ed14     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3ed18     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3ed1c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3ed1c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3ed20     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3ed24     78 FF 9F FD |                 jmp     #.endp
3ed28                 | 
3ed28                 | .get_device
3ed28     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3ed2c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3ed30     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3ed34     64 00 90 AD |         if_z    jmp     #.gamepad
3ed38     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3ed3c     A8 00 90 AD |         if_z    jmp     #.hub
3ed40     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3ed44     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3ed48                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3ed48     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3ed4c     4C 00 90 AD |         if_z    jmp     #.gamepad
3ed50     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3ed54     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3ed58                 | .keyboard
3ed58     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3ed5c                 |         if HAVE_MOUSE
3ed5c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3ed60                 |         else
3ed60                 |         end
3ed60     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3ed64     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3ed68     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ed6c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3ed70     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3ed74     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3ed78                 |                 'debug(udec(kb_intf_num))
3ed78                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3ed78     E4 FE 9F FD |                 jmp     #.next_intf
3ed7c                 | if HAVE_MOUSE
3ed7c                 | .mouse
3ed7c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3ed80     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3ed84     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3ed88     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3ed8c     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ed90                 |                 'getbyte ms_interval, hr2, #3
3ed90     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3ed94     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3ed98                 |                 'debug(udec(kb_intf_num))
3ed98                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3ed98     C4 FE 9F FD |                 jmp     #.next_intf
3ed9c                 | end
3ed9c                 | .gamepad
3ed9c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3eda0     C7 71 63 F5 |                 xor     htmp, hpar2
3eda4     3F 00 00 FF 
3eda8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3edac     B0 FE 9F AD |         if_z    jmp     #.next_intf
3edb0                 |         if HAVE_MOUSE
3edb0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3edb4     C7 71 63 F5 |                 xor     htmp, hpar2
3edb8     3F 00 00 FF 
3edbc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3edc0     9C FE 9F AD |         if_z    jmp     #.next_intf
3edc4                 |         end
3edc4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3edc8     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3edcc     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3edd0                 | 
3edd0     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3edd4     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3edd8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3eddc     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3ede0     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3ede4                 |                 'debug(udec(gp_intf_num))
3ede4                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3ede4     78 FE 9F FD |                 jmp     #.next_intf
3ede8                 | .hub
3ede8     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3edec     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3edf0     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3edf4     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3edf8     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3edfc     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3ee00     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3ee04     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3ee08     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3ee0c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3ee10     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ee14     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3ee18     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3ee1c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3ee1c     40 FE 9F FD |                 jmp     #.next_intf
3ee20                 | 
3ee20                 | '------------------------------------------------------------------------------
3ee20                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3ee20                 | ' it according to its function, or functions. In the case of this boot protocol
3ee20                 | ' keyboard/mouse class driver:
3ee20                 | ' - SetConfiguration(config_num)
3ee20                 | ' - SetProtocol(boot)
3ee20                 | ' - SetIdle(indefinite)
3ee20                 | ' - Enter the device interrupt IN polling task stage.
3ee20                 | '------------------------------------------------------------------------------
3ee20                 | ' On entry:
3ee20                 | ' On exit:
3ee20                 | '------------------------------------------------------------------------------
3ee20                 | hset_config
3ee20                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3ee20                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3ee20     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3ee24     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ee28     00 00 0C F2 |                 cmp     0-0, #0                 wz
3ee2c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3ee30                 |         if HAVE_MOUSE
3ee30     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3ee34                 |         end
3ee34     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3ee38     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3ee3c                 | .set_config
3ee3c     6C 0E D0 FE |                 loc     ptra, #set_config
3ee40     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3ee44     6E ED 03 F1 |                 add     pa, hconfig_base
3ee48     F6 8D C3 FA |                 rdbyte  hpar1, pa
3ee4c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3ee50     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3ee54     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3ee58     A0 02 A0 FD |                 call    #control_write
3ee5c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ee60     2D 00 64 5D |         if_nz   ret
3ee64                 | .kbd_config
3ee64     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3ee68     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3ee6c                 | 
3ee6c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3ee70     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3ee74     3F 00 00 FF 
3ee78     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ee7c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3ee80                 | 
3ee80     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3ee84     34 0E D0 FE |                 loc     ptra, #set_protocol
3ee88     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3ee8c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3ee90     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3ee94     A0 02 A0 FD |                 call    #control_write
3ee98     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ee9c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3eea0     E4 02 90 5D |         if_nz   jmp     #.notify_client
3eea4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3eea8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3eeac     30 03 B0 FD |                 call    #hset_idle
3eeb0                 |                 'cmp     retval, #PID_ACK        wz
3eeb0                 |         'if_nz   mov     hkbd_ep_addr, #0
3eeb0                 |         'if_nz   jmp     #.notify_client
3eeb0     A8 99 02 F6 |                 mov     hctwait, _2ms_
3eeb4     EF 02 A0 FD |                 call    #poll_waitx
3eeb8     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3eebc     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3eec0     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3eec4     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3eec8     2C 03 B0 FD |                 call    #hset_kbdled_report
3eecc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eed0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3eed4     B0 02 90 5D |         if_nz   jmp     #.notify_client
3eed8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3eedc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3eee0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3eee4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3eee8     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3eeec     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3eef0     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3eef4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3eef8     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3eefc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3ef00     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3ef04                 |         if !!HAVE_MOUSE
3ef04                 |         end
3ef04                 | 
3ef04                 | .mouse_config
3ef04                 | if HAVE_MOUSE
3ef04     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3ef08     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ef0c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3ef10     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3ef14     3F 00 00 FF 
3ef18     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ef1c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ef20                 | 
3ef20                 |                 debug("mouse passed addr check")
3ef20                 | 
3ef20     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3ef24     00 00 80 FF 
3ef28     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3ef2c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3ef30     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ef34     55 02 A0 FD |                 call    #control_read
3ef38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ef3c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3ef40     44 02 90 5D |         if_nz   jmp     #.notify_client
3ef44     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3ef48     56 01 00 F6 |                 mov     0-0, total_data
3ef4c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ef50                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3ef50                 | 
3ef50     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3ef54     64 0D D0 FE |                 loc     ptra, #set_protocol
3ef58     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3ef5c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3ef60     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3ef64     A0 02 A0 FD |                 call    #control_write
3ef68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ef6c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3ef70     14 02 90 5D |         if_nz   jmp     #.notify_client
3ef74                 |                 debug("mouse passed SetProtocol")
3ef74     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3ef78     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3ef7c     60 02 B0 FD |                 call    #hset_idle
3ef80                 |                 'cmp     retval, #PID_ACK        wz
3ef80                 |         'if_nz   mov     hmouse_ep_addr, #0
3ef80                 |         'if_nz   jmp     #.notify_client
3ef80                 |                 debug("mouse passed SetIdle")
3ef80     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3ef84     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ef88     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ef8c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3ef90     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3ef94     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3ef98     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3ef9c     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3efa0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3efa4     3F 00 00 FF 
3efa8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3efac     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3efb0     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3efb4     D0 01 90 FD |                 jmp     #.notify_client
3efb8                 | end
3efb8                 | .gamepad_config
3efb8                 | if _HAVE_GAMEPAD
3efb8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3efbc     00 00 0C F2 |                 cmp     0-0, #0                 wz
3efc0     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3efc4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3efc8     00 70 03 F6 |                 mov     htmp, 0-0
3efcc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3efd0     3F 00 00 FF 
3efd4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3efd8     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3efdc                 | 
3efdc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3efe0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3efe4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3efe8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3efec     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3eff0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3eff4     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3eff8     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3effc     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3f000     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f004     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f008     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3f00c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3f010     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3f014                 | 
3f014                 |                 if EMUPAD_MAX_PLAYER > 0
3f014                 |                 
3f014                 | .rule_loop           
3f014                 |                 end
3f014                 | 
3f014     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3f018     5C 00 90 AD |         if_e    jmp     #.xinput
3f01c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3f020     00 70 03 F6 |                 mov     htmp,0-0
3f024     01 A6 02 FF 
3f028     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3f02c     7C 00 90 AD |         if_e    jmp     #.ps3
3f030                 | 
3f030     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3f034     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3f038     00 00 80 5F 
3f03c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3f040     03 00 80 AF 
3f044     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3f048     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3f04c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f050     55 02 A0 FD |                 call    #control_read
3f054     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f058     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3f05c     00 00 04 56 |         if_nz   mov     0-0, #0
3f060     24 01 90 5D |         if_nz   jmp     #.notify_client
3f064     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3f068     56 01 00 F6 |                 mov     0-0, total_data
3f06c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f070                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3f070                 | 
3f070     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3f074     10 01 90 FD |                 jmp     #.notify_client
3f078                 | .xinput
3f078     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3f07c     2D EF 03 F6 |                 mov     pb,hdev_port
3f080     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3f084     03 EE 27 F3 |                 fle     pb,#3
3f088     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3f08c     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3f090                 | 
3f090     03 B0 06 F6 |                 mov     pkt_data, #3
3f094     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3f098     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3f09c     5A 00 A0 FD |                 call    #txn_out
3f0a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3f0a4                 | 
3f0a4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3f0a8     DC 00 90 FD |                 jmp     #.notify_client
3f0ac                 | .ps3
3f0ac     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3f0b0     2D EF 03 F6 |                 mov     pb,hdev_port
3f0b4     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3f0b8     04 EE 27 F3 |                 fle     pb,#4
3f0bc     F7 EF C3 F9 |                 decod   pb
3f0c0     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3f0c4                 | 
3f0c4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3f0c8     00 0C D0 FE |                 loc     ptra, #set_report
3f0cc     01 00 80 FF 
3f0d0     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3f0d4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f0d8     03 61 5C FC |                 wrword  #48, ptra[wLength]
3f0dc     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3f0e0     A0 02 A0 FD |                 call    #control_write
3f0e4                 | 
3f0e4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3f0e8     E0 0B D0 FE |                 loc     ptra, #set_report
3f0ec     01 00 80 FF 
3f0f0     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3f0f4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f0f8     03 09 5C FC |                 wrword  #4, ptra[wLength]
3f0fc     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3f100     A0 02 A0 FD |                 call    #control_write
3f104     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3f108     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3f10c     00 00 04 56 |         if_nz   mov     0-0, #0
3f110     74 00 90 5D |         if_nz   jmp     #.notify_client
3f114                 | 
3f114     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3f118     6C 00 90 FD |                 jmp     #.notify_client
3f11c                 | end
3f11c                 | 
3f11c                 | .hub_config
3f11c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3f120     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3f124     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3f128     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3f12c     3F 00 00 FF 
3f130     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f134     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3f138                 | 
3f138     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3f13c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3f140     26 EF 03 F6 |                 mov     pb, hub_descr_p
3f144     55 02 A0 FD |                 call    #control_read
3f148     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f14c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3f150     34 00 90 5D |         if_nz   jmp     #.notify_client
3f154                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3f154                 | 
3f154     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3f158     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3f15c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3f160                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3f160                 | .pwr_loop
3f160     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3f164     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3f168     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3f16c     A0 02 A0 FD |                 call    #control_write
3f170     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3f174                 | 
3f174     B1 99 02 F6 |                 mov     hctwait, _500ms_
3f178     B0 99 02 F1 |                 add     hctwait, _100ms_
3f17c     EF 02 A0 FD |                 call    #poll_waitx
3f180                 | 
3f180     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3f184     00 00 90 FD |                 jmp     #.notify_client
3f188                 | 
3f188                 | .notify_client
3f188     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3f18c     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3f190                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3f190                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3f190     2D 00 64 FD |                 ret
3f194                 | 
3f194                 | '------------------------------------------------------------------------------
3f194                 | ' Initialize the keyboard/mouse data area to start-up values.
3f194                 | '------------------------------------------------------------------------------
3f194                 | ' On entry:
3f194                 | ' On exit:
3f194                 | '------------------------------------------------------------------------------
3f194                 | init_kbdm_data
3f194     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3f198     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3f19c                 | 
3f19c     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3f1a0     2B ED 03 F6 |                 mov     pa, cache_end_p
3f1a4                 | .loop
3f1a4     61 01 4C FC |                 wrbyte  #0, ptra++
3f1a8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3f1ac     F4 FF 9F CD |         if_b    jmp     #.loop
3f1b0                 |         
3f1b0                 |         if EMUPAD_MAX_PLAYER > 0
3f1b0                 |         end
3f1b0                 | 
3f1b0                 | 
3f1b0     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3f1b4                 | .regloop
3f1b4     00 EC 8F F9 |                 altd    pa
3f1b8     00 00 04 F6 |                 mov     0-0, #0
3f1bc     01 EC 07 F1 |                 add     pa, #1
3f1c0     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3f1c4     EC FF 9F 5D |         if_nz   jmp     #.regloop
3f1c8                 | 
3f1c8     E1 E1 61 FF 
3f1cc     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3f1d0     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3f1d4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3f1d8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3f1dc                 | 
3f1dc     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3f1e0                 | 
3f1e0                 | '------------------------------------------------------------------------------
3f1e0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3f1e0                 | ' function.
3f1e0                 | '------------------------------------------------------------------------------
3f1e0                 | ' On entry:
3f1e0                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3f1e0                 | '   hpar2 - index number of the target interface.
3f1e0                 | ' On exit:
3f1e0                 | '------------------------------------------------------------------------------
3f1e0                 | hset_idle
3f1e0     A8 99 02 F6 |                 mov     hctwait, _2ms_
3f1e4     EF 02 A0 FD |                 call    #poll_waitx
3f1e8     D8 0A D0 FE |                 loc     ptra, #set_idle
3f1ec     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3f1f0     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3f1f4     A0 02 80 FD |                 jmp     #control_write
3f1f8                 | 
3f1f8                 | '------------------------------------------------------------------------------
3f1f8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3f1f8                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3f1f8                 | '------------------------------------------------------------------------------
3f1f8                 | ' On entry:
3f1f8                 | '   ep_addr_pid - device address and enpoint for the request.
3f1f8                 | ' On exit:
3f1f8                 | '   retval - transaction result.
3f1f8                 | '------------------------------------------------------------------------------
3f1f8                 | hset_kbdled_report
3f1f8     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3f1fc     CC 0A D0 FE |                 loc     ptra, #set_report
3f200     01 00 80 FF 
3f204     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3f208     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f20c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3f210     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f214     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3f218     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3f21c                 | 
3f21c                 | '------------------------------------------------------------------------------
3f21c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3f21c                 | '------------------------------------------------------------------------------
3f21c                 | ' On entry:
3f21c                 | ' On exit:
3f21c                 | '------------------------------------------------------------------------------
3f21c                 | hget_kbd_in_report
3f21c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3f220     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f224     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3f228     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3f22c     CF 02 A0 FD |                 call    #do_int_in
3f230     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f234     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f238                 | 
3f238     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f23c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f240                 | 
3f240     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3f244     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f248     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3f24c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3f250                 | 
3f250     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3f254     18 00 B0 FD |                 call    #hkbd_compare
3f258                 |         if EMUPAD_MAX_PLAYER > 0
3f258                 |         end
3f258                 | 
3f258                 | .led_check
3f258     3B 71 03 F6 |                 mov     htmp, kb_led_states
3f25c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3f260     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3f264     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3f268     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3f26c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3f270                 | 
3f270                 | '------------------------------------------------------------------------------
3f270                 | ' Compare current and previous keyboard data buffers for keypress changes.
3f270                 | '------------------------------------------------------------------------------
3f270                 | hkbd_compare
3f270     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f274     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3f278     61 73 07 FB |                 rdlong  htmp1, ptra++
3f27c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f280     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3f284     61 73 07 FB |                 rdlong  htmp1, ptra++
3f288     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f28c     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3f290     2D 00 64 AD |         if_z    ret
3f294                 | 
3f294     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3f298                 | 
3f298                 |                 ' Handle modifiers
3f298     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3f29c     00 87 C7 FA |                 rdbyte  hr1, ptra
3f2a0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3f2a4     63 86 63 FD |                 mergew  hr1
3f2a8     08 EC 07 F6 |                 mov     pa,#8
3f2ac                 | .modloop
3f2ac     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3f2b0     E8 8C 07 F6 |                 mov     hpar1,#$E8
3f2b4     F6 8D 83 F1 |                 sub     hpar1,pa
3f2b8     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3f2bc     FB ED 6F FB |                 djnz    pa,#.modloop
3f2c0                 | 
3f2c0     6F E0 75 FD | .release        modc    _set    wc
3f2c4                 |                 'alts    hdev_port, #hid_report_p
3f2c4                 |                 'mov     ptra, hid_report_p
3f2c4     02 F0 07 F1 |                 add     ptra, #2
3f2c8     06 EC 07 F6 |                 mov     pa, #6
3f2cc     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3f2d0     20 00 90 AD |         if_z    jmp     #.rl3
3f2d4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3f2d8     02 F2 07 F1 |                 add     ptrb, #2
3f2dc     06 EE 07 F6 |                 mov     pb, #6
3f2e0     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3f2e4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f2e8     08 00 90 AD |         if_z    jmp     #.rl3
3f2ec     FC EF 6F FB |                 djnz    pb, #.rl2
3f2f0     68 00 B0 FD |                 call    #hkbd_translate
3f2f4     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3f2f8                 | 
3f2f8     00 90 07 F6 |                 mov     hpar3, #0
3f2fc     1F 90 27 F4 |                 bith    hpar3, #31
3f300                 | 
3f300     6F 00 74 FD | .press          modc    _clr    wc
3f304     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f308     02 F0 07 F1 |                 add     ptra, #2
3f30c     06 EC 07 F6 |                 mov     pa, #6
3f310     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3f314     20 00 90 AD |         if_z    jmp     #.pl3
3f318     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3f31c     02 F2 07 F1 |                 add     ptrb, #2
3f320     06 EE 07 F6 |                 mov     pb, #6
3f324     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3f328     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f32c     08 00 90 AD |         if_z    jmp     #.pl3
3f330     FC EF 6F FB |                 djnz    pb, #.pl2
3f334     24 00 B0 FD |                 call    #hkbd_translate
3f338     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3f33c                 | 
3f33c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3f340     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3f344     28 02 64 FD |                 setq #1
3f348     61 73 07 FB |                 rdlong  htmp1, ptra++
3f34c     28 02 64 FD |                 setq #1
3f350     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3f354     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3f358                 | 
3f358     2D 00 64 FD |                 ret
3f35c                 | 
3f35c                 | '------------------------------------------------------------------------------
3f35c                 | ' Translate keyboard scancode to ASCII
3f35c                 | '------------------------------------------------------------------------------
3f35c                 | ' On entry:
3f35c                 | '   hpar1 - scancode
3f35c                 | '   hpar2 - key modifiers state
3f35c                 | '       c - pressed (0) or released (1) flag
3f35c                 | ' On exit:
3f35c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3f35c                 | '               30..17 = unused
3f35c                 | '                   18 = scroll-lock state 
3f35c                 | '                   17 = caps-lock state
3f35c                 | '                   16 = num-lock state 
3f35c                 | '                15..8 = key modifiers state
3f35c                 | '                 7..0 = scancode
3f35c                 | '------------------------------------------------------------------------------
3f35c                 | hkbd_translate
3f35c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3f360     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3f364     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3f368     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3f36c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3f370     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3f374                 | 
3f374                 |         if EMUPAD_MAX_PLAYER > 0
3f374                 | 
3f374                 |         if EMUPAD_BT0_BIT >= 0
3f374                 |         end
3f374                 |         if EMUPAD_BT1_BIT >= 0
3f374                 |         end
3f374                 |         if EMUPAD_BT2_BIT >= 0
3f374                 |         end
3f374                 |         if EMUPAD_BT3_BIT >= 0
3f374                 |         end
3f374                 |         if EMUPAD_BT4_BIT >= 0
3f374                 |         end
3f374                 |         if EMUPAD_BT5_BIT >= 0
3f374                 |         end
3f374                 |         if EMUPAD_BT6_BIT >= 0
3f374                 |         end
3f374                 |         if EMUPAD_BT7_BIT >= 0
3f374                 |         end
3f374                 |         if EMUPAD_BT8_BIT >= 0
3f374                 |         end
3f374                 |         if EMUPAD_BT9_BIT >= 0
3f374                 |         end
3f374                 | 
3f374                 |         end
3f374     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3f378     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3f37c     1F 8C 47 F4 |                 bitc    hpar1, #31
3f380                 |         if KEYQUEUE_SIZE > 0
3f380     C4 09 B0 FE |                 loc pb,#keyq_head
3f384     F7 71 E3 FA |                 rdword htmp,pb
3f388     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3f38c     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3f390     B8 75 03 F6 |                 mov htmp2,htmp
3f394     04 74 07 FA |                 mul htmp2,#4
3f398     F7 75 03 F1 |                 add htmp2,pb
3f39c     02 74 07 F1 |                 add htmp2,#2
3f3a0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3f3a4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3f3a8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3f3ac     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3f3b0                 |         end
3f3b0     2D 00 7C FD |                 ret wcz
3f3b4                 | 
3f3b4                 | if HAVE_MOUSE
3f3b4                 | '------------------------------------------------------------------------------
3f3b4                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3f3b4                 | '------------------------------------------------------------------------------
3f3b4                 | ' On entry:
3f3b4                 | ' On exit:
3f3b4                 | '------------------------------------------------------------------------------
3f3b4                 | hget_mouse_in_report
3f3b4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3f3b8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f3bc     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3f3c0     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3f3c4     CF 02 A0 FD |                 call    #do_int_in
3f3c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f3cc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f3d0                 | 
3f3d0     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f3d4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f3d8                 | 
3f3d8     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3f3dc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f3e0     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3f3e4     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3f3e8                 | 
3f3e8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f3ec     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3f3f0     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3f3f4     01 90 87 31 |         if_ae   sub     hpar3, #1
3f3f8                 | 
3f3f8     40 09 90 FE |                 loc     pa, #mouse_limits
3f3fc     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3f400                 | 
3f400                 |                 ' load xacc,yacc,zacc
3f400     28 04 64 FD |                 setq    #3-1
3f404     80 87 07 FB |                 rdlong  hr1,ptrb
3f408                 |                 ' load limits and outptr
3f408     28 04 64 FD |                 setq    #3-1
3f40c     F6 73 03 FB |                 rdlong  htmp1,pa
3f410                 | 
3f410     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3f414     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3f418     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3f41c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3f420     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3f424     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3f428     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3f42c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3f430                 |               
3f430                 | 
3f430     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3f434     07 70 67 F7 |                 signx   htmp, #7
3f438     B8 87 03 F1 |                 add     hr1,htmp
3f43c     00 72 0F F2 |                 cmp     htmp1,#0 wz
3f440     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3f444     00 86 47 53 |         if_ne   fges    hr1,#0
3f448                 | 
3f448     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3f44c     07 70 67 F7 |                 signx   htmp, #7
3f450     B8 89 03 F1 |                 add     hr2,htmp
3f454     00 74 0F F2 |                 cmp     htmp2,#0 wz
3f458     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3f45c     00 88 47 53 |         if_ne   fges    hr2,#0
3f460                 |                 
3f460                 | 
3f460     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3f464     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3f468     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3f46c     B8 8B 03 A1 |         if_z    add     hr3,htmp
3f470                 | 
3f470     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3f474     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3f478                 | 
3f478                 |                 ' write back accumulators
3f478     28 04 64 FD |                 setq    #3-1
3f47c     80 87 67 FC |                 wrlong  hr1,ptrb
3f480                 |                 ' if outptr set, write X/Y words
3f480     00 76 0F F2 |                 cmp htmp3,#0                    wz
3f484     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3f488     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3f48c     2D 00 64 FD |                 ret
3f490                 | end
3f490                 | 
3f490                 | '------------------------------------------------------------------------------
3f490                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3f490                 | '------------------------------------------------------------------------------
3f490                 | ' On entry:
3f490                 | ' On exit:
3f490                 | '------------------------------------------------------------------------------
3f490                 | if _HAVE_GAMEPAD
3f490                 | hget_gp_in_report
3f490     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3f494     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3f498                 | 
3f498     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f49c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3f4a0     00 90 E3 F8 |                 getbyte hpar3
3f4a4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3f4a8     CF 02 A0 FD |                 call    #do_int_in
3f4ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f4b0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f4b4                 | 
3f4b4     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f4b8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f4bc                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3f4bc                 | 
3f4bc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3f4c0     00 70 E3 F8 |                 getbyte htmp                            ' |
3f4c4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f4c8     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3f4cc     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3f4d0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3f4d4     B8 01 C0 F8 |                 setbyte htmp                            ' |
3f4d8                 | 
3f4d8                 | ' Note: the following code compares the current and previous reports
3f4d8                 | ' and process the data if there are changes to ease the debug output.
3f4d8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3f4d8                 | ' gpPreReport buffer.
3f4d8                 | 
3f4d8                 |                 ' ----- start of block to remove
3f4d8                 |                 {
3f4d8                 |                 }
3f4d8                 |                 ' ----- end of block to remove
3f4d8     F4 04 90 FE |                 loc pa,#hpad_translate
3f4dc     2A EC 63 FD |                 push pa
3f4e0                 | 
3f4e0                 |                 ' FALL THROUGH !!!!
3f4e0                 | 
3f4e0                 | '------------------------------------------------------------------------------
3f4e0                 | ' Decode controller report
3f4e0                 | '------------------------------------------------------------------------------
3f4e0                 | hid_decode
3f4e0                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3f4e0     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3f4e4     00 04 00 FF 
3f4e8     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3f4ec                 | 
3f4ec     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3f4f0                 | 
3f4f0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3f4f4     00 2A E3 F8 |                 getbyte hidr_type
3f4f8     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3f4fc     34 02 90 AD |         if_z    jmp     #hpad_xinput
3f500     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3f504     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3f508     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3f50c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3f510     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3f514                 |                 
3f514                 | 
3f514                 | '------------------------------------------------------------------------------
3f514                 | ' Handle HID controller (or mouse now
3f514                 | ' On entry:
3f514                 | '   ptrb - controller report
3f514                 | '------------------------------------------------------------------------------
3f514                 | hpad_hid
3f514     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f518     F7 F1 03 F6 |                 mov     ptra, pb
3f51c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3f520     00 EC 03 F6 |                 mov     pa, 0-0
3f524                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3f524     19 2A 3B FF 
3f528     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3f52c                 | 
3f52c                 | .next
3f52c     00 EC 5F F2 |                 cmps    pa, #0      wcz
3f530     2D 00 7C ED |         if_be   ret     wcz
3f534                 | 
3f534     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3f538     01 EC 87 F1 |                 sub     pa, #1
3f53c     00 8E 07 F6 |                 mov     hpar2, #0
3f540                 | 
3f540     C6 71 03 F6 |                 mov     htmp, hpar1
3f544     03 70 07 F5 |                 and     htmp, #$03
3f548     01 70 0F F2 |                 cmp     htmp, #1    wz
3f54c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3f550     07 8E 67 A7 |         if_z    signx   hpar2,#7
3f554     01 EC 87 A1 |         if_z    sub     pa, #1
3f558     02 70 0F F2 |                 cmp     htmp, #2    wz
3f55c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3f560     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3f564     02 EC 87 A1 |         if_z    sub     pa, #2
3f568     03 70 0F F2 |                 cmp     htmp, #3    wz
3f56c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3f570     04 EC 87 A1 |         if_z    sub     pa, #4
3f574                 | 
3f574     FC 8C 07 F5 |                 and     hpar1, #$FC
3f578                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3f578                 | 
3f578     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3f57c     0C 01 90 AD |         if_z    jmp     #.report_id
3f580     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3f584     24 01 90 AD |         if_z    jmp     #.usage_page
3f588     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3f58c     2C 01 90 AD |         if_z    jmp     #.usage
3f590     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3f594     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3f598     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3f59c     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3f5a0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3f5a4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3f5a8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3f5ac     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3f5b0     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3f5b4     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3f5b8     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3f5bc     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3f5c0     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3f5c4     64 FF 9F 5D |         if_nz   jmp     #.next
3f5c8                 | 
3f5c8     D8 1D A7 FB |                 tjf     hidr_state,#.next
3f5cc                 | 
3f5cc     03 8E 07 F5 |                 and     hpar2, #$03
3f5d0     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3f5d4     18 00 90 5D |         if_nz   jmp     #.skip
3f5d8                 | 
3f5d8     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3f5dc     20 00 90 AD |         if_z    jmp     #.axes
3f5e0     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3f5e4     5C 00 90 AD |         if_z    jmp     #.hats
3f5e8     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3f5ec     70 00 90 AD |         if_z    jmp     #.buttons
3f5f0                 | .skip
3f5f0     8F 71 03 F6 |                 mov     htmp, hidr_size
3f5f4     90 71 03 FA |                 mul     htmp, hidr_count
3f5f8     B8 23 03 F1 |                 add     hidr_offset, htmp
3f5fc     2C FF 9F FD |                 jmp     #.next
3f600                 | .axes
3f600                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3f600     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3f604     90 87 03 F6 |                 mov     hr1, hidr_count
3f608                 | .l1
3f608     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f60c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f610     04 03 B0 FD |                 call    #hpad_getbits
3f614     64 03 B0 FD |                 call    #hpad_normalize
3f618     06 84 1F F2 |                 cmp     hr0, #6         wcz
3f61c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3f620     00 88 43 C8 |         if_b    getnib  hr2
3f624     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3f628     5F 01 20 C9 |         if_b    setword retval
3f62c     01 84 07 C1 |         if_b    add     hr0, #1
3f630     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3f634     F4 87 6F FB |                 djnz    hr1, #.l1
3f638                 | 
3f638     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3f63c     01 1C 07 F6 |                 mov     hidr_state, #1
3f640     E8 FE 9F FD |                 jmp     #.next
3f644                 | .hats
3f644                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3f644     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f648     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f64c     C8 02 B0 FD |                 call    #hpad_getbits
3f650     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3f654     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f658     01 1C 07 F6 |                 mov     hidr_state, #1
3f65c     90 FF 9F FD |                 jmp     #.skip
3f660                 | .buttons
3f660                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3f660     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f664     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f668     90 8F 03 FA |                 mul     hpar2, hidr_count
3f66c     A8 02 B0 FD |                 call    #hpad_getbits
3f670     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3f674     B8 BF 62 F0 |                 shl     retval, htmp
3f678     5F 17 43 F5 |                 or      hidr_buttons, retval
3f67c     90 71 03 F1 |                 add     htmp, hidr_count
3f680     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3f684     01 1C 07 F6 |                 mov     hidr_state, #1
3f688     64 FF 9F FD |                 jmp     #.skip
3f68c                 | .report_id
3f68c     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3f690     2D 00 7C 5D |         if_nz   ret     wcz
3f694     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3f698     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3f69c     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3f6a0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3f6a4     01 F2 87 51 |         if_nz   sub     ptrb,#1
3f6a8     80 FE 9F FD |                 jmp     #.next
3f6ac                 | .usage_page
3f6ac     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3f6b0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3f6b4     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3f6b8     70 FE 9F FD |                 jmp     #.next
3f6bc                 | .usage
3f6bc     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3f6c0     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3f6c4     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3f6c8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3f6cc     5C FE 9F AD |         if_z    jmp     #.next
3f6d0     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3f6d4     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3f6d8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3f6dc     4C FE 9F AD |         if_z    jmp     #.next
3f6e0     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3f6e4     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3f6e8     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3f6ec     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3f6f0     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3f6f4     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3f6f8     10 00 90 AD |         if_z    jmp     #.usage_axis
3f6fc     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3f700     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3f704     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3f708     20 FE 9F FD |                 jmp     #.next
3f70c                 | .usage_axis
3f70c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3f710     18 FE 9F CD |         if_b    jmp     #.next
3f714     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3f718     C7 01 00 F8 |                 setnib  hpar2
3f71c                 | 
3f71c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3f720     C7 8F C3 F9 |                 decod   hpar2
3f724     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3f728                 | 
3f728     01 24 07 F1 |                 add     hidr_usage_idx, #1
3f72c     02 1C 07 F6 |                 mov     hidr_state, #2
3f730     F8 FD 9F FD |                 jmp     #.next
3f734                 | 
3f734                 | '------------------------------------------------------------------------------
3f734                 | ' Handle XInput controller
3f734                 | ' On entry:
3f734                 | '   ptrb - controller report
3f734                 | '------------------------------------------------------------------------------
3f734                 | '   Default implementation translates the report to a pseudo-defacto hid
3f734                 | '   standard and jumps to hpad_translate for actions.
3f734                 | '   Implementors may take specific actions for this kind of controller.
3f734                 | '------------------------------------------------------------------------------
3f734                 | hpad_xinput
3f734     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3f738     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3f73c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3f740     14 70 0F F2 |                 cmp     htmp, #$14      wz
3f744     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3f748                 | 
3f748                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3f748                 | 
3f748     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3f74c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3f750                 | 
3f750     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3f754     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3f758     5F BF 22 F6 |                 not     retval
3f75c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3f760     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3f764     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3f768     5F BF 22 F6 |                 not     retval
3f76c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3f770                 | 
3f770     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3f774     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3f778     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3f77c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3f780     F8 01 B0 FD |                 call    #hpad_normalize
3f784     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3f788     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3f78c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3f790     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3f794     E4 01 B0 FD |                 call    #hpad_normalize
3f798     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3f79c                 | 
3f79c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3f7a0     81 BF E6 FA |                 rdword  retval, ptrb[1]
3f7a4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3f7a8     00 16 47 F4 |                 bitc    hidr_buttons, #0
3f7ac     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3f7b0     01 16 47 F4 |                 bitc    hidr_buttons, #1
3f7b4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3f7b8     02 16 47 F4 |                 bitc    hidr_buttons, #2
3f7bc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3f7c0     03 16 47 F4 |                 bitc    hidr_buttons, #3
3f7c4     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3f7c8     04 16 47 F4 |                 bitc    hidr_buttons, #4
3f7cc     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3f7d0     05 16 47 F4 |                 bitc    hidr_buttons, #5
3f7d4     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3f7d8     08 16 47 F4 |                 bitc    hidr_buttons, #8
3f7dc     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3f7e0     09 16 47 F4 |                 bitc    hidr_buttons, #9
3f7e4     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3f7e8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3f7ec     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3f7f0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3f7f4     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3f7f8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3f7fc                 | 
3f7fc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f800     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3f804     7A BB 7A FF 
3f808     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3f80c     F9 FF 7F FF 
3f810     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3f814     B9 71 5F F9 |                 altgn   htmp, #htmp1
3f818     00 70 43 F8 |                 getnib  htmp
3f81c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3f820                 | 
3f820     AC 01 90 FD |                 jmp     #hpad_translate
3f824                 | 
3f824                 | '------------------------------------------------------------------------------
3f824                 | ' Handle PS3 controller
3f824                 | ' On entry:
3f824                 | '   ptrb - controller report
3f824                 | '------------------------------------------------------------------------------
3f824                 | '   Default implementation translates the report to a pseudo-defacto hid
3f824                 | '   standard and jumps to hpad_translate for actions.
3f824                 | '   Implementors may take specific actions for this kind of controller.
3f824                 | '------------------------------------------------------------------------------
3f824                 | hpad_ps3
3f824     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3f828     01 70 0F F2 |                 cmp     htmp, #$01      wz
3f82c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3f830                 | 
3f830                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3f830                 | 
3f830     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3f834     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3f838     40 01 B0 FD |                 call    #hpad_normalize
3f83c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3f840     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3f844     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3f848     30 01 B0 FD |                 call    #hpad_normalize
3f84c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3f850     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3f854     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3f858     20 01 B0 FD |                 call    #hpad_normalize
3f85c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3f860     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3f864     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3f868     10 01 B0 FD |                 call    #hpad_normalize
3f86c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3f870     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3f874     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3f878                 | 
3f878     08 8C 07 F6 |                 mov     hpar1, #8
3f87c     13 8E 07 F6 |                 mov     hpar2, #19
3f880     94 00 B0 FD |                 call    #hpad_getbits
3f884                 | 
3f884     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3f888     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3f88c     00 16 47 F4 |                 bitc    hidr_buttons, #0
3f890     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3f894     01 16 47 F4 |                 bitc    hidr_buttons, #1
3f898     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3f89c     02 16 47 F4 |                 bitc    hidr_buttons, #2
3f8a0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3f8a4     03 16 47 F4 |                 bitc    hidr_buttons, #3
3f8a8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3f8ac     04 16 47 F4 |                 bitc    hidr_buttons, #4
3f8b0     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3f8b4     05 16 47 F4 |                 bitc    hidr_buttons, #5
3f8b8     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3f8bc     06 16 47 F4 |                 bitc    hidr_buttons, #6
3f8c0     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3f8c4     07 16 47 F4 |                 bitc    hidr_buttons, #7
3f8c8     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3f8cc     08 16 47 F4 |                 bitc    hidr_buttons, #8
3f8d0     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3f8d4     09 16 47 F4 |                 bitc    hidr_buttons, #9
3f8d8     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3f8dc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3f8e0     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3f8e4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3f8e8     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3f8ec     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3f8f0                 | 
3f8f0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f8f4     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3f8f8     09 FA 79 FF 
3f8fc     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3f900     FF FA 7F FF 
3f904     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3f908     B9 71 5F F9 |                 altgn   htmp, #htmp1
3f90c     00 70 43 F8 |                 getnib  htmp
3f910     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3f914                 | 
3f914     B8 00 90 FD |                 jmp     #hpad_translate
3f918                 | 
3f918                 | '------------------------------------------------------------------------------
3f918                 | ' Read bits from report data buffer
3f918                 | '------------------------------------------------------------------------------
3f918                 | ' On entry:
3f918                 | '   PTRB - report buffer
3f918                 | '   hpar1 - start bit
3f918                 | '   hpar2 - number of bits
3f918                 | ' On exit:
3f918                 | '   retval - bits
3f918                 | '------------------------------------------------------------------------------
3f918                 | hpad_getbits
3f918     C6 71 03 F6 |                 mov     htmp, hpar1
3f91c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3f920     F9 71 03 F1 |                 add     htmp, ptrb
3f924     B8 BF 02 FB |                 rdlong  retval, htmp
3f928                 | 
3f928     C6 73 03 F6 |                 mov     htmp1, hpar1
3f92c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3f930     B9 BF 42 F0 |                 shr     retval, htmp1
3f934                 | 
3f934     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3f938     10 00 90 1D |         if_a    jmp     #.l1
3f93c                 | 
3f93c     C7 8F C3 F9 |                 decod   hpar2
3f940     01 8E 87 F1 |                 sub     hpar2, #1
3f944     C7 BF 02 F5 |                 and     retval, hpar2
3f948     2D 00 64 FD |                 ret
3f94c                 | .l1
3f94c     FF 7F 00 FF 
3f950     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3f954     03 70 07 F1 |                 add     htmp, #3
3f958     B8 75 03 FB |                 rdlong  htmp2, htmp
3f95c     18 8E 87 F1 |                 sub     hpar2, #24
3f960     C7 8F C3 F9 |                 decod   hpar2
3f964     01 8E 87 F1 |                 sub     hpar2, #1
3f968     B9 75 43 F0 |                 shr     htmp2, htmp1
3f96c     C7 75 03 F5 |                 and     htmp2, hpar2
3f970     18 74 67 F0 |                 shl     htmp2, #24
3f974     BA BF 42 F5 |                 or      retval, htmp2
3f978     2D 00 64 FD |                 ret
3f97c                 | 
3f97c                 | '------------------------------------------------------------------------------
3f97c                 | ' Normalize value to signed word (-32768 / 32767)
3f97c                 | '------------------------------------------------------------------------------
3f97c                 | ' On entry:
3f97c                 | '   retval - value to normalize
3f97c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3f97c                 | '   - or -
3f97c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3f97c                 | '   hidr_size - value bits length
3f97c                 | ' On exit:
3f97c                 | '   retval - normalized value
3f97c                 | '------------------------------------------------------------------------------
3f97c                 | hpad_normalize
3f97c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3f980     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3f984     2D 00 64 AD |         if_z    ret
3f988     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3f98c     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3f990     0F 72 77 F7 |                 signx   htmp1, #15      wc
3f994     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3f998     00 BE 66 C7 |         if_c    signx   retval, #0-0
3f99c     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3f9a0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3f9a4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3f9a8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3f9ac     B8 71 53 F6 |                 abs     htmp            wc
3f9b0     1F BE 0E F4 |                 testb   retval, #31     wz
3f9b4     5F BF 42 F6 |                 abs     retval
3f9b8     B8 BF 12 FD |                 qdiv    retval, htmp
3f9bc     18 BE 62 FD |                 getqx   retval
3f9c0     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3f9c4     C0 FF 7F FF 
3f9c8     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3f9cc     2D 00 64 FD |                 ret
3f9d0                 | 
3f9d0                 | '------------------------------------------------------------------------------
3f9d0                 | ' Perform controller actions
3f9d0                 | ' On entry:
3f9d0                 | '    hidr_id        report id
3f9d0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3f9d0                 | '                      X = hidr_axis+0, #0
3f9d0                 | '                      Y = hidr_axis+0, #1
3f9d0                 | '                      Z = hidr_axis+1, #0
3f9d0                 | '                     RX = hidr_axis+1, #1
3f9d0                 | '                     RY = hidr_axis+2, #0
3f9d0                 | '                     RZ = hidr_axis+2, #1
3f9d0                 | '    hidr_buttons   buttons state (bits 0 to 31)
3f9d0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3f9d0                 | '
3f9d0                 | '                     -------3 -------2 -------1 -------0 byte
3f9d0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3f9d0                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3f9d0                 | '                                zyx||| |||||||| ++++++++ n. buttons
3f9d0                 | '                                |||||| ||||++++--------- n. axes
3f9d0                 | '                                |||||| ++++------------- n. hats
3f9d0                 | '                                ++++++------------------ valid axes
3f9d0                 | '------------------------------------------------------------------------------
3f9d0                 | hpad_translate
3f9d0                 | 
3f9d0                 | 
3f9d0                 |         if HAVE_HIDPAD
3f9d0     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3f9d4     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3f9d8     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3f9dc     01 70 E7 F2 |                 cmpsub  htmp,#1
3f9e0     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3f9e4     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3f9e8     2D 00 7C 3D |         if_ae   ret     wcz
3f9ec     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3f9f0     B8 F3 03 F1 |                 add     ptrb,htmp
3f9f4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3f9f8     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3f9fc     28 0C 64 FD |                 setq    #7-1
3fa00     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3fa04                 |         end
3fa04                 | 
3fa04                 | 
3fa04                 |         if EMUPAD_MAX_PLAYER > 0
3fa04                 | .emupad_no_hat
3fa04                 |         if EMUPAD_BT0_BIT >= 0
3fa04                 |         end
3fa04                 |         if EMUPAD_BT1_BIT >= 0
3fa04                 |         end
3fa04                 |         if EMUPAD_BT2_BIT >= 0
3fa04                 |         end
3fa04                 |         if EMUPAD_BT3_BIT >= 0
3fa04                 |         end
3fa04                 |         if EMUPAD_BT4_BIT >= 0
3fa04                 |         end
3fa04                 |         if EMUPAD_BT5_BIT >= 0
3fa04                 |         end
3fa04                 |         if EMUPAD_BT6_BIT >= 0
3fa04                 |         end
3fa04                 |         if EMUPAD_BT7_BIT >= 0
3fa04                 |         end
3fa04                 |         if EMUPAD_BT8_BIT >= 0
3fa04                 |         end
3fa04                 |         if EMUPAD_BT9_BIT >= 0
3fa04                 |         end
3fa04                 | .emupad_slot_over
3fa04                 |         end
3fa04                 | 
3fa04                 |         if 0
3fa04                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3fa04                 | 
3fa04                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3fa04                 | 
3fa04                 |         end
3fa04     2D 00 64 FD |                 ret
3fa08                 | end
3fa08                 | 
3fa08                 | if EMUPAD_MAX_PLAYER > 0
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | ' Clear EmuPad state
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | emupad_reset
3fa08                 | 
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | ' Get EmuPad Player number for current device (into retval)
3fa08                 | ' Z flag is also set if current device is valid
3fa08                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | emupad_getnum
3fa08                 | .loop
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | emupad_discon
3fa08                 | .loop         
3fa08                 |         
3fa08                 |         ' FALL THROUGH!!!
3fa08                 | 
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | ' Update EmuPad reports (all of them...)
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | emupad_write_reports
3fa08                 | .devloop
3fa08                 | 
3fa08                 | end
3fa08                 | 
3fa08                 | 
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | ' On entry:
3fa08                 | ' On exit:
3fa08                 | '------------------------------------------------------------------------------
3fa08                 | hget_hub_status
3fa08     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3fa0c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3fa10     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3fa14     01 90 2F F9 |                 setword hpar3, #1, #1
3fa18     CF 02 A0 FD |                 call    #do_int_in
3fa1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fa20     0C 00 90 AD |         if_z    jmp     #.data
3fa24     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3fa28     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3fa2c     2D 00 64 FD |                 ret
3fa30                 | .data
3fa30     00 90 0F F2 |                 cmp     hpar3, #0               wz
3fa34     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3fa38                 | 
3fa38     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3fa3c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3fa40     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3fa44     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3fa48                 |                 debug(ubin_long(hub_status_chg))
3fa48                 | 
3fa48     01 5A 06 F6 |                 mov     hdev_port, #1
3fa4c                 | .loop
3fa4c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3fa50     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3fa54     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3fa58     F0 FF 9F 3D |         if_nc   jmp     #.loop
3fa5c     2D 00 64 FD |                 ret
3fa60                 | 
3fa60                 | hub_port_handler
3fa60     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3fa64     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fa68     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fa6c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fa70     55 02 A0 FD |                 call    #control_read
3fa74     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3fa78                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3fa78                 | 
3fa78     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3fa7c     50 01 90 5D |         if_x0   jmp     #.other
3fa80     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3fa84     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3fa88     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fa8c     A0 02 A0 FD |                 call    #control_write
3fa90     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3fa94     7C 01 90 5D |         if_x0   jmp     #.disconnect
3fa98     B0 99 02 F6 |                 mov     hctwait, _100ms_
3fa9c     EF 02 A0 FD |                 call    #poll_waitx
3faa0                 | 
3faa0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3faa4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3faa8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3faac     A0 02 A0 FD |                 call    #control_write
3fab0                 | 
3fab0     02 76 07 F6 |                 mov     htmp3, #2
3fab4                 | .wait_reset
3fab4     AC 99 02 F6 |                 mov     hctwait, _8ms_
3fab8     EF 02 A0 FD |                 call    #poll_waitx
3fabc     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fac0     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fac4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fac8     55 02 A0 FD |                 call    #control_read
3facc     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3fad0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3fad4     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3fad8                 | 
3fad8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3fadc     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3fae0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fae4     A0 02 A0 FD |                 call    #control_write
3fae8                 | 
3fae8     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3faec                 | .wait_recover
3faec     A7 99 02 F6 |                 mov     hctwait, _1ms_
3faf0     EF 02 A0 FD |                 call    #poll_waitx
3faf4     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3faf8                 | 
3faf8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3fafc     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3fb00     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3fb04                 | 
3fb04     00 08 00 FF 
3fb08     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3fb0c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3fb10     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3fb14     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3fb18     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3fb1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fb20     48 01 90 5D |         if_nz   jmp     #.done
3fb24                 | .get_dev_desc
3fb24     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3fb28     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3fb2c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3fb30     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3fb34     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3fb38     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3fb3c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3fb40     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fb44     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3fb48     AC 99 02 F6 |                 mov     hctwait, _8ms_
3fb4c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3fb50     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3fb54     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3fb58     BE 00 A0 FD |                 call    #calc_crc5
3fb5c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3fb60     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3fb64     F7 AD C2 FA |                 rdbyte  total_data, pb
3fb68     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3fb6c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3fb70     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fb74     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3fb78     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3fb7c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3fb80                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3fb80     9F 99 02 F6 |                 mov     hctwait, _500us_
3fb84     EF 02 A0 FD |                 call    #poll_waitx
3fb88     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3fb8c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3fb90     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3fb94     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3fb98     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fb9c     CC 00 90 5D |         if_nz   jmp     #.done
3fba0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3fba4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3fba8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3fbac     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3fbb0     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3fbb4     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3fbb8     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3fbbc     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3fbc0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3fbc4     A4 00 90 CD |         if_b    jmp     #.done
3fbc8     70 F0 BF FD |                 call    #hparse_con_desc
3fbcc     9C 00 90 FD |                 jmp     #.done
3fbd0                 | 
3fbd0                 | .other
3fbd0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3fbd4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3fbd8     28 00 90 AD |         if_x1   jmp     #.reset_feature
3fbdc     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3fbe0     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3fbe4     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3fbe8     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3fbec     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3fbf0     10 00 90 AD |         if_x1   jmp     #.reset_feature
3fbf4     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3fbf8     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3fbfc     04 00 90 AD |         if_x1   jmp     #.reset_feature
3fc00     68 00 90 FD |                 jmp     #.done
3fc04                 | .reset_feature
3fc04     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3fc08     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fc0c     A0 02 A0 FD |                 call    #control_write
3fc10     58 00 90 FD |                 jmp     #.done
3fc14                 | .disconnect
3fc14                 | 
3fc14     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3fc18     00 70 E3 F8 |                 getbyte htmp
3fc1c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3fc20     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3fc24     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3fc28     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3fc2c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3fc30     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3fc34                 |         if EMUPAD_MAX_PLAYER > 0
3fc34                 |         end
3fc34                 |         if HAVE_MOUSE
3fc34     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3fc38     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3fc3c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3fc40                 |         end
3fc40                 |         if HAVE_HIDPAD
3fc40     14 0A F0 FE |                 loc ptrb,#hidpad_report
3fc44     2D 71 03 F6 |                 mov htmp,hdev_port
3fc48     01 70 E7 F2 |                 cmpsub htmp,#1
3fc4c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3fc50     B8 F3 03 F1 |                 add ptrb,htmp
3fc54     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3fc58     80 01 6C FC |                 wrlong #0,ptrb
3fc5c                 |         end
3fc5c                 | 
3fc5c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3fc60     00 00 C4 F8 |                 setbyte #0
3fc64     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3fc68     00 00 04 F6 |                 mov     0-0, #0
3fc6c                 | 
3fc6c                 | .done
3fc6c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3fc70     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3fc74     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3fc78     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3fc7c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3fc80     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3fc84                 | 
3fc84     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fc88     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fc8c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fc90     55 02 A0 FD |                 call    #control_read
3fc94     00 69 06 FB |                 rdlong  hub_port_status, ptra
3fc98                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3fc98     2D 00 64 FD |                 ret
3fc9c                 | 
3fc9c                 | '------------------------------------------------------------------------------
3fc9c                 | ' Partially populated SETUP packets
3fc9c                 | '------------------------------------------------------------------------------
3fc9c     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3fc9d     06          |                 byte    REQ_GET_DESC
3fc9e     00 01       |                 word    TYPE_DEVICE << 8
3fca0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fca2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fca4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3fca5     06          |                 byte    REQ_GET_DESC
3fca6     00 02       |                 word    TYPE_CONFIG << 8
3fca8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fcaa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fcac     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3fcad     09          |                 byte    REQ_SET_CONFIG
3fcae     00 00       |                 word    0       ' Configuration value
3fcb0     00 00       |                 word    0       ' Zero
3fcb2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3fcb4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3fcb5     05          |                 byte    REQ_SET_ADDR
3fcb6     00 00       |                 word    0       ' Zero
3fcb8     00 00       |                 word    0       ' Zero
3fcba     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3fcbc                 | '------------------------------------------------------------------------------
3fcbc                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3fcbc                 | ' wValue field dictates which protocol should be used.
3fcbc                 | '
3fcbc                 | ' When initialized, all devices default to report protocol. However the host
3fcbc                 | ' should not make any assumptions about the device state and should set the
3fcbc                 | ' desired protocol whenever initializing a device.
3fcbc                 | '------------------------------------------------------------------------------
3fcbc     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fcbd     0B          |                 byte    HID_SET_PROTO
3fcbe     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3fcc0                 |                                                 ' (HID 1.11 Section 7.2.6).
3fcc0     00 00       |                 word    0               ' Interface index number.
3fcc2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3fcc4                 | '------------------------------------------------------------------------------
3fcc4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fcc5     0A          |                 byte    HID_SET_IDLE
3fcc6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3fcc8                 |                                         ' reporting until a change is detected in the report data
3fcc8                 | 
3fcc8                 |                                         ' (HID 1.11 Section 7.2.4).
3fcc8     00 00       |                 word    0       ' Interface index number.
3fcca     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3fccc     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fccd     09          |                 byte    HID_SET_REPORT
3fcce     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3fcd0                 |                                         ' (HID 1.11 Section 7.2.2).
3fcd0     00 00       |                 word    0       ' Interface index number.
3fcd2     00 00       |                 word    0       ' Size of the report, in bytes.
3fcd4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3fcd5     06          |                 byte    REQ_GET_DESC
3fcd6     00 22       |                 word    TYPE_REPORT << 8
3fcd8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fcda     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fcdc                 | '------------------------------------------------------------------------------
3fcdc     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3fcdd     06          |                 byte    REQ_GET_DESC
3fcde     00 29       |                 word    TYPE_HUB << 8
3fce0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fce2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fce4     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3fce5     03          |                 byte    REQ_SET_FEATURE
3fce6     00 00       |                 word    0       ' port power
3fce8     01 00       |                 word    1       ' Port index number (1+)
3fcea     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fcec     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3fced     01          |                 byte    REQ_CLEAR_FEATURE
3fcee     00 00       |                 word    0       ' port power
3fcf0     01 00       |                 word    1       ' Port index number (1+)
3fcf2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fcf4     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3fcf5     00          |                 byte    REQ_GET_STATUS
3fcf6     00 00       |                 word    0
3fcf8     01 00       |                 word    1       ' Port index number (1+)
3fcfa     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3fcfc                 | '------------------------------------------------------------------------------
3fcfc                 | if _HAVE_GAMEPAD
3fcfc     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3fd00                 | ps3_command_buff
3fd00     00 00 00 00 
3fd04     00          |                 byte    $00, $00, $00, $00, $00
3fd05     00 00 00 00 
3fd09     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3fd0a     FF 27 10 00 
3fd0e     32          |                 byte    $FF, $27, $10, $00, $32
3fd0f     FF 27 10 00 
3fd13     32          |                 byte    $FF, $27, $10, $00, $32
3fd14     FF 27 10 00 
3fd18     32          |                 byte    $FF, $27, $10, $00, $32
3fd19     FF 27 10 00 
3fd1d     32          |                 byte    $FF, $27, $10, $00, $32
3fd1e     00 00 00 00 
3fd22     00          |                 byte    $00, $00, $00, $00, $00
3fd23     00 00 00 00 
3fd27     00          |                 byte    $00, $00, $00, $00, $00
3fd28     00 00 00 00 
3fd2c     00          |                 byte    $00, $00, $00, $00, $00
3fd2d     00 00 00    |                 byte    $00, $00, $00
3fd30                 | '------------------------------------------------------------------------------
3fd30     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3fd33                 |                                         ' 0x01 All blinking
3fd33                 |                                         ' 0x02 1 flashes, then on
3fd33                 |                                         ' 0x03 2 flashes, then on
3fd33                 |                                         ' 0x04 3 flashes, then on
3fd33                 |                                         ' 0x05 4 flashes, then on
3fd33                 |                                         ' 0x06 1 on
3fd33                 |                                         ' 0x07 2 on
3fd33                 |                                         ' 0x08 3 on
3fd33                 |                                         ' 0x09 4 on
3fd33                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3fd33                 |                                         ' 0x0B Blinking*
3fd33                 |                                         ' 0x0C Slow blinking*
3fd33                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3fd33     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3fd36     00          |                 byte    $00             ' Left rumble
3fd37     00          |                 byte    $00             ' Right rumble
3fd38     00 00 00    |                 byte    $00, $00, $00
3fd3b     00          | end
3fd3c                 | alignl
3fd3c                 | 
3fd3c                 | if HAVE_MOUSE
3fd3c     00 00 00 00 
3fd40     00 00 00 00 | mouse_limits long 0[2]
3fd44     00 00 00 00 | mouse_outptr long 0
3fd48                 | end
3fd48                 | 
3fd48                 | if KEYQUEUE_SIZE > 0
3fd48     00          | keyq_head byte 0
3fd49     00          | keyq_tail byte 0
3fd4a     00 00 00 00 
      ...             
3ff46     00 00 00 00 
3ff4a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3ff4c                 | alignl
3ff4c                 | end
3ff4c                 | 
3ff4c                 | if EMUPAD_MAX_PLAYER > 0
3ff4c                 | emupad_rule_buffer
3ff4c                 | if EMUPAD_BUILTIN_RULES
3ff4c                 | file "padmap_builtin.dat"
3ff4c                 | end
3ff4c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3ff4c                 | '' Default rule directly follows!
3ff4c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3ff4c                 | end
3ff4c                 | 
3ff4c                 | '------------------------------------------------------------------------------
3ff4c                 | ' The USB data cache area gets zero-filled at every device disconnect
3ff4c                 | '------------------------------------------------------------------------------
3ff4c                 | usb_cache_start
3ff4c                 | 
3ff4c                 | ' HID descriptor and report buffers
3ff4c                 | if !!OVERLAP_MEMORY
3ff4c     00 00 00 00 
      ...             
40644     00 00 00 00 
40648     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
4064c                 | end
4064c     00 00 00 00 
40650     00 00 00 00 | hkbd_report     byte    0[8]
40654     00 00 00 00 | hkbd_led_rep    byte    0
40658                 | alignl
40658                 | 
40658                 | if HAVE_HIDPAD
40658     00 00 00 00 
      ...             
40714     00 00 00 00 
40718     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
4071c                 | end
4071c                 | 
4071c                 | ' HUB descriptor
4071c     00          | hub_descr       byte    0   ' bDescLength
4071d     00          |                 byte    0   ' bDescriptorType
4071e     00          |                 byte    0   ' bNbrPorts
4071f     00 00       |                 word    0   ' wHubCharacteristics
40721     00          |                 byte    0   ' bPwrOn2PwrGood
40722     00          |                 byte    0   ' bHubContrCurrent
40723     00          |                 byte    0   ' DeviceRemoveable
40724     00          |                 byte    0   ' PortPwrCtrlMask
40725                 | 
40725                 | usb_cache_end
40725                 | 
40725                 | if HAVE_MOUSE
40725     00 00 00 00 | mouse_xacc      long 0
40729     00 00 00 00 | mouse_yacc      long 0
4072d     00 00 00 00 | mouse_zacc      long 0
40731     00          | mouse_bstate    byte 0
40732     00          | mouse_lpending  byte 0
40733     00          | mouse_rpending  byte 0
40734     00          | mouse_mpending  byte 0
40735     00          | mouse_lock      byte 0
40736     00 00 00    |                 byte 0[3] ' padding
40739                 | end
40739                 | 
40739     00 00 00 00 
      ...             
407b1     00 00 00 00 
407b5     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
407b9     00 00 00 00 
407bd     00 00 00 00 
407c1     00 00 00 00 
407c5     00 00 00 00 
407c9     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
407cb     00 00 00 00 
      ...             
408c3     00 00 00 00 
408c7     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
408cb                 | 
408cb     00          | driver_cog      byte    0                       ' Current driver cog + 1
408cc                 | 	alignl
408cc                 | _audio096_spin2_dat_
408cc                 | 
408cc                 | audio       org     0
408cc                 | 
408cc     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
408d0     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
408d4     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
408d8                 |  
408d8     01 EC 63 FD |             cogid   pa                   ' compute cogid
408dc     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
408e0     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
408e4     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
408e8                 | 
408e8     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
408ec     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
408f0     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
408f4     0F 24 06 FC |             wrpin   dac2,#right
408f8     0F 00 1E FC |             wxpin   #256,#right    
408fc     41 9C 64 FD |             dirh    #left addpins 1
40900     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
40904     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
40908     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
4090c                 |             
4090c                 | '---------------------------------------------------------------------------------        
4090c                 | '----------------- The main loop -------------------------------------------------
4090c                 | '---------------------------------------------------------------------------------
4090c                 | 
4090c     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
40910     10 00 90 CD |       if_c  jmp     #loop1
40914                 |   
40914     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
40918     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
4091c     D5 00 80 F1 |             sub     0-0,a40000000
40920     FD 01 6E FB |             djnz    cn,#p402
40924                 |     
40924     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
40928     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
4092c     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
40930     01 00 06 C6 |     if_c    mov     cn,#1
40934     DA 02 3A F3 |             fle     ct,time3 wcz
40938     02 00 06 C6 |     if_c    mov     cn,#2     
4093c     DB 02 3A F3 |             fle     ct,time4 wcz
40940     03 00 06 C6 |     if_c    mov     cn,#3
40944     DC 02 3A F3 |             fle     ct,time5 wcz
40948     04 00 06 C6 |     if_c    mov     cn,#4
4094c     DD 02 3A F3 |             fle     ct,time6 wcz
40950     05 00 06 C6 |     if_c    mov     cn,#5
40954     DE 02 3A F3 |             fle     ct,time7 wcz
40958     06 00 06 C6 |     if_c    mov     cn,#6
4095c     DF 02 3A F3 |             fle     ct,time8 wcz
40960     07 00 06 C6 |     if_c    mov     cn,#7
40964                 | 
40964                 | 
40964                 | '----------------------------------------------------------------------------------
40964                 | '------------- Compute channel samples --------------------------------------------
40964                 | '----------------------------------------------------------------------------------
40964                 | 
40964                 | 
40964     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
40968     06 C0 65 F0 |             shl     channeladd,#6
4096c     E0 F0 03 F1 |             add     ptra,channeladd
40970                 | 
40970     28 16 64 FD |             setq    #11                        	' read parameters
40974     00 D7 05 FB |             rdlong  pointer0,ptra
40978                 |     	    
40978     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
4097c     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
40980     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
40984     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
40988     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
4098c     00 C4 0D F2 |             cmp     qq,#0 wz                         
40990     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
40994     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
40998                 |             
40998     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
4099c     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
409a0     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
409a4                 | 
409a4     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
409a8     EC 08 3A F9 |             getword oldrs,sample0,#1
409ac     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
409b0     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
409b4     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
409b8     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
409bc                 | 
409bc     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
409c0     00 04 02 F6 |             mov     dt0,0-0    
409c4     D7 04 82 F1 |             sub     dt0,time0
409c8                 |             
409c8     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
409cc     FB 00 00 F1 |             add     0-0,afreq0  	
409d0                 |             
409d0                 | '---- envelopes
409d0                 |             
409d0     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
409d4     20 00 00 AF 
409d8     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
409dc     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
409e0                 | 
409e0     FB 48 02 F6 |             mov     envs1,afreq0
409e4     F5 48 02 FA |             mul     envs1,envspd0
409e8     24 E7 01 F1 |             add     envph0,envs1 
409ec                 | 
409ec     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
409f0     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
409f4     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
409f8     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
409fc     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
40a00     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
40a04     00 46 06 36 |     if_ge   mov     envlo,#0
40a08     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
40a0c     16 E6 65 30 |     if_ge   shl     envph0,#22
40a10                 | 
40a10     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
40a14     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
40a18     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
40a1c     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
40a20     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
40a24     24 49 32 F9 |             getword envs1,envs1,#0		' current value
40a28     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
40a2c     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
40a30     23 49 02 FA |             mul     envs1,envlo
40a34     25 49 02 F1 |             add     envs1,envs2
40a38     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
40a3c                 |             
40a3c     1B DA 0D F4 | p410        testb   sstart0, #27 wz
40a40     1B C6 61 AD |     if_z    getrnd  spl
40a44     58 00 90 AD |     if_z    jmp     #p406
40a48                 |  
40a48     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
40a4c     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
40a50     08 D6 45 F0 |             shr     pointer0,#8
40a54                 |          
40a54     1F DA 0D F4 |             testb   sstart0,#31 wz            
40a58     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40a5c     1C DA 0D F4 |             testb   sstart0,#28 wz            
40a60     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40a64                 |         
40a64     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
40a68     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
40a6c     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
40a70                 |             
40a70     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
40a74     ED C4 01 F1 |             add     qq,sstart0            
40a78                 | 
40a78     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
40a7c     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
40a80     1C 01 B0 1D |     if_gt   call    #cache_read
40a84                 |          
40a84     1F DA 0D F4 |             testb   sstart0,#31 wz 
40a88     08 C6 65 50 |     if_nz   shl     spl,#8
40a8c     08 D6 65 50 |     if_nz   shl     pointer0,#8
40a90     07 D6 65 A0 |     if_z    shl     pointer0,#7
40a94     1C DA 0D F4 |             testb   sstart0,#28 wz            
40a98     01 D6 45 A0 |     if_z    shr     pointer0,#1    
40a9c     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
40aa0                 | 
40aa0                 | 
40aa0     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
40aa4     00 C6 01 F6 |             mov     spl,0-0
40aa8     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
40aac     00 C6 01 F6 |             mov     spl,0-0
40ab0                 | 
40ab0     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
40ab4     00 0A 02 F6 |             mov     ls0,0-0
40ab8     20 00 00 FF 
40abc     00 C4 05 F6 |             mov     qq,##16384
40ac0     FE C4 81 F1 |             sub     qq,apan0
40ac4     E2 C6 31 FA |             scas    spl,qq
40ac8     00 0C 02 F6 |             mov     rs0, 0-0
40acc                 | 
40acc     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
40ad0     06 11 02 F1 |             add     rs,rs0
40ad4     03 0F 82 F1 |             sub     ls,oldls
40ad8     05 0F 02 F1 |             add     ls,ls0
40adc                 |    
40adc     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
40ae0     05 D9 21 F9 |             setword sample0,ls0,#0
40ae4                 |             
40ae4     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
40ae8     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
40aec     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
40af0                 |   '  if_z    mov     sample0,#0
40af0     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
40af4     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
40af8     04 00 00 AF 
40afc     00 B0 05 A1 |     if_z    add     time1,##2048
40b00     D8 B2 01 A6 |     if_z    mov     time2,time1
40b04     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
40b08                 | 
40b08     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
40b0c     00 D7 65 FC |             wrlong  pointer0,ptra
40b10     08 E7 65 FC |             wrlong  envph0,ptra[8]
40b14     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
40b18                 |                       
40b18     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
40b1c     FF C3 25 A7 |     if_z    decmod  front, #511          
40b20                 |          
40b20     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
40b24     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
40b28     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
40b2c     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
40b30                 | 	    
40b30                 | 		    
40b30     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
40b34     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
40b38     04 15 02 F6 |             mov     newsample, oldrs       
40b3c                 | 
40b3c     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
40b40     02 AF 01 F1 |             add     time0,dt0    
40b44                 |                                      
40b44     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
40b48     D8 FD 9F AD |     if_z    jmp     #loop1
40b4c     02 C5 01 F6 |             mov     qq,dt0
40b50                 | 
40b50                 |     
40b50                 |             
40b50     01 4E 36 F0 | p301        rol     dropper,#1 wc
40b54     40 00 90 3D |     if_nc   jmp     #p399
40b58     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
40b5c     00 C2 9D F2 |             cmpr    front, #0-0 wcz
40b60     F4 FF 9F AD |     if_e    jmp     #p398   
40b64                 | 		
40b64     00 1A 0E F2 | 	    cmp     scbase,#0 wz
40b68     20 00 90 AD |     if_z    jmp     #p302	   
40b6c                 |   
40b6c     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
40b70     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
40b74     02 1E 66 C0 |     if_c    shl     scptr2,#2
40b78     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
40b7c     60 1E 66 FC |             wrlong  scptr2,#$60
40b80     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
40b84     01 00 00 CF 
40b88     7F 1C 06 C7 |     if_c    incmod  scptr,##639
40b8c                 | 			    
40b8c     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
40b90     00 00 00 FF 
40b94     FF C3 05 F7 |             incmod  front, ##511
40b98     ED C5 6D FB | p399        djnz    qq,#p301
40b9c                 |             
40b9c     6C FD 9F FD |             jmp     #loop            'loop
40ba0                 | 
40ba0                 | '----------------------------------------------------------------------------------
40ba0                 | '------------- This is the end of the main loop -----------------------------------
40ba0                 | '----------------------------------------------------------------------------------
40ba0                 | 
40ba0                 | '----------------------------------------------------------------------------------
40ba0                 | '------------- PSRAM cache ----------- --------------------------------------------
40ba0                 | '----------------------------------------------------------------------------------
40ba0                 | 
40ba0                 | ' There are 8 cache pointers for 8 channels
40ba0                 | ' if 24 higher bits of address=cache, then get a word from the cache
40ba0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
40ba0                 | 
40ba0                 | 
40ba0     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
40ba4                 |             
40ba4     E2 40 02 F6 | 	    mov     addrhi,qq		
40ba8     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
40bac     14 01 96 F9 | 	    alts    cn,#cache1            
40bb0     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
40bb4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
40bb8                 | 	
40bb8     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
40bbc     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
40bc0     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
40bc4     08 38 66 F0 | 	    shl     cmd,#8
40bc8     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
40bcc     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
40bd0     08 3A 66 F0 |             shl     hubaddr,#8                  '
40bd4     13 3B 02 F1 |             add     hubaddr,hubptr 
40bd8     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
40bdc     28 04 64 FD |             setq    #2                          ' write 3 longs
40be0     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
40be4     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
40be8     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
40bec                 |             
40bec                 | 	
40bec     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
40bf0     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
40bf4     13 C5 01 F1 | 	    add     qq,hubptr
40bf8     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
40bfc     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
40c00                 |           
40c00                 | 
40c00                 | '--------------------------------------------------------------------------
40c00                 | '------ Interrupt service -------------------------------------------------
40c00                 | '------ Output the sample, get the next one if exists ---------------------
40c00                 | '--------------------------------------------------------------------------
40c00                 | 
40c00     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
40c04     0F D0 25 FC |             wypin   rsample,#right       '4
40c08     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
40c0c     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
40c10     FF F3 07 57 |     if_ne   incmod  ptrb,#511
40c14     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
40c18     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
40c1c                 |     
40c1c     F5 FF 3B FB |             reti1                        '17/19 
40c20                 |           
40c20                 | '---------------------------------------------------------------------------
40c20                 | '-------- End of interrupt -------------------------------------------------
40c20                 | '---------------------------------------------------------------------------    
40c20                 | 
40c20                 | 
40c20                 | '---------------------------------------------------------------------------
40c20                 | '------- Variables ---------------------------------------------------------
40c20                 | '---------------------------------------------------------------------------
40c20                 | 
40c20                 | ' constants
40c20                 | 
40c20     00 00 00 40 | a40000000   long $40000000
40c24     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
40c28                 | 
40c28                 | ' Time variables
40c28                 | 
40c28     00 00 00 00 | time0       long 0    ' Global sample computing time
40c2c     01 00 00 00 | time1       long 1    ' Local channels time
40c30     02 00 00 00 | time2       long 2
40c34     03 00 00 00 | time3       long 3
40c38     04 00 00 00 | time4       long 4
40c3c     05 00 00 00 | time5       long 5
40c40     06 00 00 00 | time6       long 6
40c44     07 00 00 00 | time7       long 7
40c48     08 00 00 00 | time8       long 8
40c4c                 | 
40c4c     00 00 00 00 | channeladd long 0
40c50                 | 
40c50     00 00 00 00 | front       long 0
40c54                 | 
40c54                 | ' temporary variables 
40c54     00 00 00 00 | qq          long 0
40c58     00 00 00 00 | spl         long 0
40c5c     00 00 00 00 | zero        long 0
40c60     00 00 00 00 | mailbox     long 0
40c64     00 00 00 00 | mailbox2 long 0
40c68                 | 
40c68                 | ' Interrupt ISR variables
40c68                 | 
40c68     00 00 00 00 | lsample     long 0
40c6c     00 00 00 00 | rsample     long 0
40c70     00 00 00 00 | lsnext      long 0
40c74     00 00 00 00 | rsnext      long 0 
40c78                 | 
40c78                 | ' channel parameter block
40c78                 | 
40c78     00 00 00 00 | pointer0    long 0     
40c7c     00 00 00 00 | sample0     long 0
40c80     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
40c84     00 00 00 00 | lstart0     long 0
40c88     00 00 00 00 | lend0       long 0
40c8c     00 00 00 00 | volpan0     long 0
40c90     00 00 00 00 | freqskip0   long 0
40c94     00 00 00 00 | command0    long 0
40c98     00 00 00 00 | envph0	    long 0
40c9c     00 00 00 00 | envptr0	    long 0
40ca0     00 00 00 00 | envspd0	    long 0
40ca4     00 00 00 00 | envlen0	    long 0
40ca8     00 00 00 00 | res5	    long 0
40cac     00 00 00 00 | res6	    long 0
40cb0     00 00 00 00 | res7	    long 0
40cb4     00 00 00 00 | res8	    long 0
40cb8                 | 
40cb8     00 00 00 00 | afreq0      long 0
40cbc     00 00 00 00 | askip0      long 0
40cc0     00 00 00 00 | avol0       long 0
40cc4     00 00 00 00 | apan0       long 0
40cc8                 | 
40cc8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
40ccc     00 00 00 00 | cn          long 0
40cd0     00 00 00 00 | ct          long 0
40cd4     00 00 00 00 | dt0         long 0
40cd8                 | 
40cd8                 | ' Samples
40cd8     00 00 00 00 | oldls       long 0
40cdc     00 00 00 00 | oldrs       long 0
40ce0                 | 
40ce0     00 00 00 00 | ls0         long 0
40ce4     00 00 00 00 | rs0         long 0
40ce8                 | 
40ce8     00 00 00 00 | ls          long 0    
40cec     00 00 00 00 | rs          long 0
40cf0                 | 
40cf0     00 00 00 00 | oldsample   long 0
40cf4     00 00 00 00 | newsample   long 0
40cf8                 | 
40cf8     00 00 00 00 | nrsample    long 0
40cfc     00 00 00 00 | nlsample    long 0
40d00                 | 
40d00     00 00 00 00 | scbase long 0
40d04     00 00 00 00 | scptr long 0
40d08     00 00 00 00 | scptr2 long 0
40d0c     00 00 00 00 | scope long 0
40d10                 | 
40d10     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
40d14     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
40d18                 | 
40d18     00 18 07 00 | hubptr      long $71800
40d1c     00 00 00 00 | cache1      long 0
40d20     00 00 00 00 | cache2      long 0
40d24     00 00 00 00 | cache3      long 0
40d28     00 00 00 00 | cache4      long 0
40d2c     00 00 00 00 | cache5      long 0
40d30     00 00 00 00 | cache6      long 0
40d34     00 00 00 00 | cache7      long 0
40d38     00 00 00 00 | cache8      long 0
40d3c                 | 
40d3c                 | 
40d3c     00 00 00 00 | cmd         long 0
40d40     00 00 00 00 | hubaddr     long 0
40d44     00 01 00 00 | count       long 256
40d48     00 00 00 00 | addrlo long 0
40d4c     00 00 00 00 | addrhi long 0
40d50     00 00 00 00 | pointer00 long 0
40d54     00 00 00 00 | envhi long 0
40d58     00 00 00 00 | envlo long 0
40d5c     00 00 00 00 | envs1 long 0
40d60     00 00 00 00 | envs2 long 0
40d64     00 00 00 00 | noise0 long 0
40d68     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
40d6c     00 00 00 00 
40d70     00 00 00 00 | null  			long 	0,0           ' for channel reset
40d74                 | 	alignl
40d74                 | __system__dat_
40d74     00 00 00 00 
40d78     00 00 00 00 | 	byte	$00[8]
40d7c     03 00 00 00 
40d80     00 00 00 00 
40d84     00 00 00 00 
40d88     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40d8c     00 00 00 00 
      ...             
41018     00 00 00 00 
4101c     00 00 00 00 | 	byte	$00[660]
41020     00 00 80 0A | 	long	(168 {__system____root_opendir})<<20
41024     00 00 90 0A | 	long	(169 {__system____root_closedir})<<20
41028     00 00 A0 0A | 	long	(170 {__system____root_readdir})<<20
4102c     00 00 B0 0A | 	long	(171 {__system____root_stat})<<20
41030     00 00 00 00 
41034     00 00 00 00 
41038     00 00 00 00 
4103c     00 00 00 00 
41040     00 00 00 00 
41044     00 00 00 00 
41048     00 00 00 00 | 	byte	$00[28]
4104c     B4 10 04 00 | 	long	@@@__system__dat_ + 832
41050     B7 10 04 00 | 	long	@@@__system__dat_ + 835
41054     D8 10 04 00 | 	long	@@@__system__dat_ + 868
41058     F1 10 04 00 | 	long	@@@__system__dat_ + 893
4105c     0C 11 04 00 | 	long	@@@__system__dat_ + 920
41060     26 11 04 00 | 	long	@@@__system__dat_ + 946
41064     36 11 04 00 | 	long	@@@__system__dat_ + 962
41068     48 11 04 00 | 	long	@@@__system__dat_ + 980
4106c     5A 11 04 00 | 	long	@@@__system__dat_ + 998
41070     6C 11 04 00 | 	long	@@@__system__dat_ + 1016
41074     78 11 04 00 | 	long	@@@__system__dat_ + 1028
41078     89 11 04 00 | 	long	@@@__system__dat_ + 1045
4107c     9D 11 04 00 | 	long	@@@__system__dat_ + 1065
41080     A7 11 04 00 | 	long	@@@__system__dat_ + 1075
41084     B7 11 04 00 | 	long	@@@__system__dat_ + 1091
41088     C6 11 04 00 | 	long	@@@__system__dat_ + 1106
4108c     DC 11 04 00 | 	long	@@@__system__dat_ + 1128
41090     F5 11 04 00 | 	long	@@@__system__dat_ + 1153
41094     09 12 04 00 | 	long	@@@__system__dat_ + 1173
41098     17 12 04 00 | 	long	@@@__system__dat_ + 1187
4109c     2B 12 04 00 | 	long	@@@__system__dat_ + 1207
410a0     37 12 04 00 | 	long	@@@__system__dat_ + 1219
410a4     49 12 04 00 | 	long	@@@__system__dat_ + 1237
410a8     61 12 04 00 | 	long	@@@__system__dat_ + 1261
410ac     73 12 04 00 | 	long	@@@__system__dat_ + 1279
410b0     86 12 04 00 | 	long	@@@__system__dat_ + 1298
410b4     4F 4B 00 4E 
410b8     75 6D 65 72 
410bc     69 63 61 6C 
410c0     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
410c4     75 6D 65 6E 
410c8     74 20 6F 75 
410cc     74 20 6F 66 
410d0     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
410d4     61 69 6E 00 
410d8     52 65 73 75 
410dc     6C 74 20 6E 
410e0     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
410e4     65 70 72 65 
410e8     73 65 6E 74 
410ec     61 62 6C 65 
410f0     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
410f4     65 67 61 6C 
410f8     20 6D 75 6C 
410fc     74 69 62 79 
41100     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
41104     65 71 75 65 
41108     6E 63 65 00 
4110c     4E 6F 20 73 
41110     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
41114     66 69 6C 65 
41118     20 6F 72 20 
4111c     64 69 72 65 
41120     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
41124     79 00 42 61 
41128     64 20 66 69 
4112c     6C 65 20 6E 
41130     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
41134     72 00 50 65 
41138     72 6D 69 73 
4113c     73 69 6F 6E 
41140     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
41144     69 65 64 00 
41148     4E 6F 74 20 
4114c     65 6E 6F 75 
41150     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
41154     65 6D 6F 72 
41158     79 00 54 65 
4115c     6D 70 6F 72 
41160     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
41164     66 61 69 6C 
41168     75 72 65 00 
4116c     46 69 6C 65 
41170     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
41174     73 74 73 00 
41178     49 6E 76 61 
4117c     6C 69 64 20 
41180     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
41184     6D 65 6E 74 
41188     00 54 6F 6F 
4118c     20 6D 61 6E 
41190     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
41194     65 6E 20 66 
41198     69 6C 65 73 
4119c     00 49 2F 4F 
411a0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
411a4     6F 72 00 4E 
411a8     6F 74 20 61 
411ac     20 64 69 72 
411b0     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
411b4     72 79 00 49 
411b8     73 20 61 20 
411bc     64 69 72 65 
411c0     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
411c4     79 00 52 65 
411c8     61 64 20 6F 
411cc     6E 6C 79 20 
411d0     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
411d4     20 73 79 73 
411d8     74 65 6D 00 
411dc     46 75 6E 63 
411e0     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
411e4     20 6E 6F 74 
411e8     20 69 6D 70 
411ec     6C 65 6D 65 
411f0     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
411f4     00 44 69 72 
411f8     65 63 74 6F 
411fc     72 79 20 6E 
41200     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
41204     6D 70 74 79 
41208     00 4E 61 6D 
4120c     65 20 74 6F 
41210     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
41214     6E 67 00 44 
41218     65 76 69 63 
4121c     65 20 6E 6F 
41220     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
41224     65 6B 61 62 
41228     6C 65 00 42 
4122c     61 64 20 61 
41230     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
41234     73 73 00 42 
41238     72 6F 6B 65 
4123c     6E 20 63 6F 
41240     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
41244     74 69 6F 6E 
41248     00 44 65 76 
4124c     69 63 65 20 
41250     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
41254     65 73 6F 75 
41258     72 63 65 20 
4125c     62 75 73 79 
41260     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
41264     73 73 20 64 
41268     65 76 69 63 
4126c     65 20 6C 69 
41270     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
41274     6F 20 73 70 
41278     61 63 65 20 
4127c     6F 6E 20 64 
41280     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
41284     65 00 55 6E 
41288     6B 6E 6F 77 
4128c     6E 20 65 72 
41290     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
41294     00 00 00 00 
41298     00 00 00 00 
4129c     00 00 00 00 | 	byte	$00[12]
412a0     05 00 00 00 
412a4     00 00 00 00 
412a8     00 00 00 00 
412ac     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
412b0     00 00 00 00 | 	byte	$00, $00, $00, $00
412b4     00 00 00 0C | 	long	(192 {__system___tx})<<20
412b8     00 00 10 0C | 	long	(193 {__system___rx})<<20
412bc     00 00 00 00 | 	byte	$00, $00, $00, $00
412c0     00 00 20 0C | 	long	(194 {__system___rxtxioctl_0767})<<20
412c4     00 00 30 0C | 	long	(195 {__system____dummy_flush_0768})<<20
412c8     00 00 00 00 
412cc     00 00 00 00 | 	byte	$00[8]
412d0     01 00 00 00 
412d4     06 00 00 00 
412d8     00 00 00 00 
412dc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
412e0     00 00 00 00 
412e4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
412e8     00 00 00 0C | 	long	(192 {__system___tx})<<20
412ec     00 00 10 0C | 	long	(193 {__system___rx})<<20
412f0     00 00 00 00 | 	byte	$00, $00, $00, $00
412f4     00 00 20 0C | 	long	(194 {__system___rxtxioctl_0767})<<20
412f8     00 00 30 0C | 	long	(195 {__system____dummy_flush_0768})<<20
412fc     00 00 00 00 
41300     00 00 00 00 | 	byte	$00[8]
41304     01 00 00 00 
41308     06 00 00 00 
4130c     00 00 00 00 
41310     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41314     00 00 00 00 
41318     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
4131c     00 00 00 0C | 	long	(192 {__system___tx})<<20
41320     00 00 10 0C | 	long	(193 {__system___rx})<<20
41324     00 00 00 00 | 	byte	$00, $00, $00, $00
41328     00 00 20 0C | 	long	(194 {__system___rxtxioctl_0767})<<20
4132c     00 00 30 0C | 	long	(195 {__system____dummy_flush_0768})<<20
41330     00 00 00 00 
      ...             
414a0     00 00 00 00 
414a4     00 00 00 00 | 	byte	$00[376]
414a8     AC 14 04 00 | 	long	@@@__system__dat_ + 1848
414ac     00 00 00 00 
414b0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
414b4                 | 	alignl
414b4                 | _fatfs_cc_dat_
414b4     C7 00 FC 00 
414b8     E9 00 E2 00 
414bc     E4 00 E0 00 
414c0     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
414c4     EA 00 EB 00 
414c8     E8 00 EF 00 
414cc     EE 00 EC 00 
414d0     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
414d4     C9 00 E6 00 
414d8     C6 00 F4 00 
414dc     F6 00 F2 00 
414e0     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
414e4     FF 00 D6 00 
414e8     DC 00 F8 00 
414ec     A3 00 D8 00 
414f0     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
414f4     E1 00 ED 00 
414f8     F3 00 FA 00 
414fc     F1 00 D1 00 
41500     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
41504     BF 00 AE 00 
41508     AC 00 BD 00 
4150c     BC 00 A1 00 
41510     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
41514     91 25 92 25 
41518     93 25 02 25 
4151c     24 25 C1 00 
41520     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
41524     A9 00 63 25 
41528     51 25 57 25 
4152c     5D 25 A2 00 
41530     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
41534     14 25 34 25 
41538     2C 25 1C 25 
4153c     00 25 3C 25 
41540     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
41544     5A 25 54 25 
41548     69 25 66 25 
4154c     60 25 50 25 
41550     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
41554     F0 00 D0 00 
41558     CA 00 CB 00 
4155c     C8 00 31 01 
41560     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
41564     CF 00 18 25 
41568     0C 25 88 25 
4156c     84 25 A6 00 
41570     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
41574     D3 00 DF 00 
41578     D4 00 D2 00 
4157c     F5 00 D5 00 
41580     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
41584     DE 00 DA 00 
41588     DB 00 D9 00 
4158c     FD 00 DD 00 
41590     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
41594     AD 00 B1 00 
41598     17 20 BE 00 
4159c     B6 00 A7 00 
415a0     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
415a4     B0 00 A8 00 
415a8     B7 00 B9 00 
415ac     B3 00 B2 00 
415b0     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
415b4     61 00 1A 03 
415b8     E0 00 17 03 
415bc     F8 00 07 03 
415c0     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
415c4     78 01 00 01 
415c8     30 01 32 01 
415cc     06 01 39 01 
415d0     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
415d4     2E 01 79 01 
415d8     06 01 80 01 
415dc     4D 00 43 02 
415e0     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
415e4     82 01 84 01 
415e8     84 01 86 01 
415ec     87 01 87 01 
415f0     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
415f4     8B 01 8B 01 
415f8     8D 01 8E 01 
415fc     8F 01 90 01 
41600     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
41604     93 01 94 01 
41608     F6 01 96 01 
4160c     97 01 98 01 
41610     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
41614     9B 01 9C 01 
41618     9D 01 20 02 
4161c     9F 01 A0 01 
41620     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
41624     A2 01 A4 01 
41628     A4 01 A6 01 
4162c     A7 01 A7 01 
41630     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
41634     AB 01 AC 01 
41638     AC 01 AE 01 
4163c     AF 01 AF 01 
41640     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
41644     B3 01 B3 01 
41648     B5 01 B5 01 
4164c     B7 01 B8 01 
41650     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
41654     BB 01 BC 01 
41658     BC 01 BE 01 
4165c     F7 01 C0 01 
41660     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
41664     C3 01 C4 01 
41668     C5 01 C4 01 
4166c     C7 01 C8 01 
41670     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
41674     CB 01 CA 01 
41678     CD 01 10 01 
4167c     DD 01 01 00 
41680     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
41684     12 01 F3 01 
41688     03 00 F1 01 
4168c     F4 01 F4 01 
41690     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
41694     22 02 12 01 
41698     3A 02 09 00 
4169c     65 2C 3B 02 
416a0     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
416a4     66 2C 3F 02 
416a8     40 02 41 02 
416ac     41 02 46 02 
416b0     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
416b4     40 00 81 01 
416b8     86 01 55 02 
416bc     89 01 8A 01 
416c0     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
416c4     5A 02 90 01 
416c8     5C 02 5D 02 
416cc     5E 02 5F 02 
416d0     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
416d4     62 02 94 01 
416d8     64 02 65 02 
416dc     66 02 67 02 
416e0     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
416e4     6A 02 62 2C 
416e8     6C 02 6D 02 
416ec     6E 02 9C 01 
416f0     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
416f4     9D 01 73 02 
416f8     74 02 9F 01 
416fc     76 02 77 02 
41700     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
41704     7A 02 7B 02 
41708     7C 02 64 2C 
4170c     7E 02 7F 02 
41710     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
41714     82 02 A9 01 
41718     84 02 85 02 
4171c     86 02 87 02 
41720     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
41724     B1 01 B2 01 
41728     45 02 8D 02 
4172c     8E 02 8F 02 
41730     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
41734     B7 01 7B 03 
41738     03 00 FD 03 
4173c     FE 03 FF 03 
41740     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
41744     86 03 88 03 
41748     89 03 8A 03 
4174c     B1 03 11 03 
41750     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
41754     A3 03 A3 03 
41758     C4 03 08 03 
4175c     CC 03 03 00 
41760     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
41764     8F 03 D8 03 
41768     18 01 F2 03 
4176c     0A 00 F9 03 
41770     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
41774     F5 03 F6 03 
41778     F7 03 F7 03 
4177c     F9 03 FA 03 
41780     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
41784     20 03 50 04 
41788     10 07 60 04 
4178c     22 01 8A 04 
41790     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
41794     0E 01 CF 04 
41798     01 00 C0 04 
4179c     D0 04 44 01 
417a0     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
417a4     00 00 7D 1D 
417a8     01 00 63 2C 
417ac     00 1E 96 01 
417b0     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
417b4     00 1F 08 06 
417b8     10 1F 06 06 
417bc     20 1F 08 06 
417c0     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
417c4     40 1F 06 06 
417c8     51 1F 07 00 
417cc     59 1F 52 1F 
417d0     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
417d4     5D 1F 56 1F 
417d8     5F 1F 60 1F 
417dc     08 06 70 1F 
417e0     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
417e4     BB 1F C8 1F 
417e8     C9 1F CA 1F 
417ec     CB 1F DA 1F 
417f0     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
417f4     F9 1F EA 1F 
417f8     EB 1F FA 1F 
417fc     FB 1F 80 1F 
41800     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
41804     08 06 A0 1F 
41808     08 06 B0 1F 
4180c     04 00 B8 1F 
41810     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
41814     BC 1F CC 1F 
41818     01 00 C3 1F 
4181c     D0 1F 02 06 
41820     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
41824     E5 1F 01 00 
41828     EC 1F F3 1F 
4182c     01 00 FC 1F 
41830     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
41834     32 21 70 21 
41838     10 02 84 21 
4183c     01 00 83 21 
41840     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
41844     30 2C 2F 04 
41848     60 2C 02 01 
4184c     67 2C 06 01 
41850     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
41854     80 2C 64 01 
41858     00 2D 26 08 
4185c     41 FF 1A 03 
41860     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
41864     05 07 09 0E 
41868     10 12 14 16 
4186c     18 1C 1E 43 
41870     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
41874     41 41 43 45 
41878     45 45 49 49 
4187c     49 41 41 45 
41880     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
41884     4F 55 55 59 
41888     4F 55 4F 9C 
4188c     4F 9E 9F 41 
41890     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
41894     A5 A6 A7 A8 
41898     A9 AA AB AC 
4189c     AD AE AF B0 
418a0     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
418a4     41 41 41 B8 
418a8     B9 BA BB BC 
418ac     BD BE BF C0 
418b0     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
418b4     C5 41 41 C8 
418b8     C9 CA CB CC 
418bc     CD CE CF D1 
418c0     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
418c4     49 49 49 49 
418c8     D9 DA DB DC 
418cc     DD 49 DF 4F 
418d0     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
418d4     4F E6 E8 E8 
418d8     55 55 55 59 
418dc     59 EE EF F0 
418e0     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
418e4     F5 F6 F7 F8 
418e8     F9 FA FB FC 
418ec     FD FE FF 00 
418f0     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
418f4     00 00 00 00 | 	byte	$00, $00, $00, $00
418f8     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_close})<<20
418fc     00 00 00 0B | 	long	(176 {_fatfs_cc_v_read})<<20
41900     00 00 10 0B | 	long	(177 {_fatfs_cc_v_write})<<20
41904     00 00 20 0B | 	long	(178 {_fatfs_cc_v_lseek})<<20
41908     00 00 30 0B | 	long	(179 {_fatfs_cc_v_ioctl})<<20
4190c     00 00 40 0C | 	long	(196 {_fatfs_cc_v_flush})<<20
41910     00 00 00 00 
41914     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41918     00 00 40 0B | 	long	(180 {_fatfs_cc_v_open})<<20
4191c     00 00 50 0B | 	long	(181 {_fatfs_cc_v_creat})<<20
41920     00 00 60 0B | 	long	(182 {_fatfs_cc_v_opendir})<<20
41924     00 00 70 0B | 	long	(183 {_fatfs_cc_v_closedir})<<20
41928     00 00 80 0B | 	long	(184 {_fatfs_cc_v_readdir})<<20
4192c     00 00 90 0B | 	long	(185 {_fatfs_cc_v_stat})<<20
41930     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_mkdir})<<20
41934     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_rmdir})<<20
41938     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_remove})<<20
4193c     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_rename})<<20
41940     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_init})<<20
41944     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_deinit})<<20
41948     FF FF FF FF 
4194c     1F 00 00 00 
41950     1C 00 00 00 
41954     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
41958     1E 00 00 00 
4195c     1F 00 00 00 
41960     1E 00 00 00 
41964     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
41968     1F 00 00 00 
4196c     1E 00 00 00 
41970     1F 00 00 00 
41974     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
41978     1F 00 00 00 
4197c     00 00 00 00 
41980     1F 00 00 00 
41984     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
41988     5A 00 00 00 
4198c     78 00 00 00 
41990     97 00 00 00 
41994     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
41998     D4 00 00 00 
4199c     F3 00 00 00 
419a0     11 01 00 00 
419a4     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
419a8     4E 01 00 00 
419ac     6D 01 00 00 
419b0     FF FF FF FF 
419b4     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
419b8     00 00 00 00 
      ...             
419d0     00 00 00 00 
419d4     00 00 00 00 | 	byte	$00[32]
419d8     F6 19 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
419dc     FA 19 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
419e0     00 00 00 00 
419e4     00 00 00 00 
419e8     00 00 00 00 
419ec     00 00 00 00 
419f0     00 00       | 	byte	$00[18]
419f2     3F 3F 3F 00 
419f6     55 43 54 00 
419fa     55 43 54 00 
419fe     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
41a02     00 00 00 00 
41a06     00 00 00    | 	byte	$00[7]
41a09     CA 9A 3B 00 
41a0d     00 00 00 01 
41a11     01 01 01 01 
41a15     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
41a19     91 11 11 11 
41a1d     11 01 01 01 
41a21     01 01 01 01 
41a25     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
41a29     01 01 01 01 
41a2d     01 01 01    | 	byte	$01[7]
41a30     90 20 20 20 
41a34     20 20 20 20 
41a38     20 20 20 20 
41a3c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
41a40     42 42 42 42 
41a44     42 42 42 42 
41a48     42 42       | 	byte	$42[10]
41a4a     20 20 20 20 
41a4e     20 20 20    | 	byte	$20[7]
41a51     44 44 44 44 
41a55     44 44       | 	byte	$44[6]
41a57     04 04 04 04 
41a5b     04 04 04 04 
41a5f     04 04 04 04 
41a63     04 04 04 04 
41a67     04 04 04 04 | 	byte	$04[20]
41a6b     20 20 20 20 
41a6f     20 20       | 	byte	$20[6]
41a71     48 48 48 48 
41a75     48 48       | 	byte	$48[6]
41a77     08 08 08 08 
41a7b     08 08 08 08 
41a7f     08 08 08 08 
41a83     08 08 08 08 
41a87     08 08 08 08 | 	byte	$08[20]
41a8b     20 20 20 20 
41a8f     01 00 00 00 
41a93     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
41a94                 | __methodtable__
41a94     44 63 01 00 | 	long	@_do_no_command
41a98     DC 04 02 00 | 	long	@_do_plus
41a9c     FC F4 01 00 | 	long	@_do_minus
41aa0     C4 03 02 00 | 	long	@_do_or
41aa4     7C FB 01 00 | 	long	@_do_mul
41aa8     C0 DF 01 00 | 	long	@_do_fdiv
41aac     AC D7 01 00 | 	long	@_do_and
41ab0     C4 D8 01 00 | 	long	@_do_div
41ab4     5C F9 01 00 | 	long	@_do_mod
41ab8     90 0B 02 00 | 	long	@_do_shl
41abc     A8 0C 02 00 | 	long	@_do_shr
41ac0     C8 09 02 00 | 	long	@_do_power
41ac4     64 CD 01 00 | 	long	@_do_getvar
41ac8     80 90 01 00 | 	long	@_do_push
41acc     5C C7 01 00 | 	long	@_do_assign
41ad0     7C F5 00 00 | 	long	@_do_cls
41ad4     10 5D 01 00 | 	long	@_do_new
41ad8     C4 88 01 00 | 	long	@_do_plot
41adc     E4 1D 01 00 | 	long	@_do_draw
41ae0     2C 8B 01 00 | 	long	@_do_print
41ae4     5C F3 00 00 | 	long	@_do_circle
41ae8     18 20 01 00 | 	long	@_do_fcircle
41aec     40 E2 00 00 | 	long	@_do_box
41af0     FC 24 01 00 | 	long	@_do_frame
41af4     38 F8 00 00 | 	long	@_do_color
41af8     8C 22 01 00 | 	long	@_do_for
41afc     7C 5F 01 00 | 	long	@_do_next
41b00     40 4B 01 00 | 	long	@_do_list
41b04     9C AC 01 00 | 	long	@_do_run
41b08     40 1F 01 00 | 	long	@_do_error
41b0c     48 31 01 00 | 	long	@_do_fast_goto
41b10     38 32 01 00 | 	long	@_do_find_goto
41b14     4C 34 01 00 | 	long	@_do_slow_goto
41b18     64 63 01 00 | 	long	@_do_nothing
41b1c     B8 B0 01 00 | 	long	@_do_save
41b20     DC 4D 01 00 | 	long	@_do_load
41b24     00 7C 01 00 | 	long	@_do_pinwrite
41b28     9C C4 01 00 | 	long	@_do_waitms
41b2c     D0 C5 01 00 | 	long	@_do_waitvbl
41b30     40 37 01 00 | 	long	@_do_if
41b34     D8 1E 01 00 | 	long	@_do_else
41b38     E4 DA 01 00 | 	long	@_do_eq
41b3c     88 E1 01 00 | 	long	@_do_ge
41b40     54 EB 01 00 | 	long	@_do_le
41b44     70 E6 01 00 | 	long	@_do_gt
41b48     30 F0 01 00 | 	long	@_do_lt
41b4c     E8 FE 01 00 | 	long	@_do_ne
41b50     04 AA 01 00 | 	long	@_do_rnd
41b54     28 E4 00 00 | 	long	@_do_brun
41b58     C4 DD 00 00 | 	long	@_do_beep
41b5c     74 16 01 00 | 	long	@_do_dir
41b60     34 78 01 00 | 	long	@_do_paper
41b64     FC 3A 01 00 | 	long	@_do_ink
41b68     10 22 01 00 | 	long	@_do_font
41b6c     20 58 01 00 | 	long	@_do_mode
41b70     CC 5B 01 00 | 	long	@_do_mouse
41b74     C8 2F 01 00 | 	long	@_do_gettime
41b78     74 FD 00 00 | 	long	@_do_cursor
41b7c     D4 F4 00 00 | 	long	@_do_click
41b80     88 5C 01 00 | 	long	@_do_mousex
41b84     CC 5C 01 00 | 	long	@_do_mousey
41b88     00 5C 01 00 | 	long	@_do_mousek
41b8c     44 5C 01 00 | 	long	@_do_mousew
41b90     04 BA 01 00 | 	long	@_do_sin
41b94     3C BD 01 00 | 	long	@_do_stick
41b98     CC BE 01 00 | 	long	@_do_strig
41b9c     5C BB 01 00 | 	long	@_do_sprite
41ba0     98 11 01 00 | 	long	@_do_defsprite
41ba4     74 2E 01 00 | 	long	@_do_getpixel
41ba8     78 C4 01 00 | 	long	@_do_waitclock
41bac     AC F8 01 00 | 	long	@_do_negative
41bb0     04 97 01 00 | 	long	@_do_rdpin
41bb4     28 AC 01 00 | 	long	@_do_rqpin
41bb8     2C 7A 01 00 | 	long	@_do_pinread
41bbc     DC C5 01 00 | 	long	@_do_wrpin
41bc0     5C C6 01 00 | 	long	@_do_wxpin
41bc4     DC C6 01 00 | 	long	@_do_wypin
41bc8     6C 79 01 00 | 	long	@_do_pinfloat
41bcc     EC 79 01 00 | 	long	@_do_pinlo
41bd0     AC 79 01 00 | 	long	@_do_pinhi
41bd4     B0 7A 01 00 | 	long	@_do_pinstart
41bd8     C0 7B 01 00 | 	long	@_do_pintoggle
41bdc     A4 8A 01 00 | 	long	@_do_position
41be0     50 FC 00 00 | 	long	@_do_cos
41be4     5C C0 01 00 | 	long	@_do_tan
41be8     AC DC 00 00 | 	long	@_do_atn
41bec     9C DB 00 00 | 	long	@_do_asin
41bf0     2C D9 00 00 | 	long	@_do_acos
41bf4     48 BC 01 00 | 	long	@_do_sqr
41bf8     FC 20 01 00 | 	long	@_do_fill
41bfc     A8 08 01 00 | 	long	@_do_defsnd
41c00     A8 FD 00 00 | 	long	@_do_defenv
41c04     DC 96 01 00 | 	long	@_do_rad
41c08     0C 15 01 00 | 	long	@_do_deg
41c0c     7C 3B 01 00 | 	long	@_do_int
41c10     88 7C 01 00 | 	long	@_do_play
41c14     5C B4 01 00 | 	long	@_do_setdelay
41c18     04 B5 01 00 | 	long	@_do_setenv
41c1c     AC B5 01 00 | 	long	@_do_setlen
41c20     54 B6 01 00 | 	long	@_do_setpan
41c24     A4 B7 01 00 | 	long	@_do_setvol
41c28     4C B8 01 00 | 	long	@_do_setwave
41c2c     FC B6 01 00 | 	long	@_do_setsustain
41c30     FC A6 01 00 | 	long	@_do_release
41c34     60 2C 01 00 | 	long	@_do_getenvsustain
41c38     94 89 01 00 | 	long	@_do_poke
41c3c     0C 1D 01 00 | 	long	@_do_dpoke
41c40     BC 54 01 00 | 	long	@_do_lpoke
41c44     BC 78 01 00 | 	long	@_do_peek
41c48     60 1C 01 00 | 	long	@_do_dpeek
41c4c     10 54 01 00 | 	long	@_do_lpeek
41c50     58 26 01 00 | 	long	@_do_fre
41c54     70 2D 01 00 | 	long	@_do_getnotevalue
41c58     1C D3 01 00 | 	long	@_do_getaddr
41c5c     24 38 01 00 | 	long	@_do_inkey
41c60     AC D8 00 00 | 	long	@_do_abs
41c64     DC 35 01 00 | 	long	@_do_hex
41c68     DC E0 00 00 | 	long	@_do_bin
41c6c     6C C1 01 00 | 	long	@_do_val
41c70     5C F2 00 00 | 	long	@_do_chr
41c74     3C DA 00 00 | 	long	@_do_asc
41c78     40 48 01 00 | 	long	@_do_left
41c7c     78 A8 01 00 | 	long	@_do_right
41c80     94 55 01 00 | 	long	@_do_mid
41c84     CC 49 01 00 | 	long	@_do_len
41c88     30 30 01 00 | 	long	@_do_gosub
41c8c     CC A7 01 00 | 	long	@_do_return
41c90     FC 1E 01 00 | 	long	@_do_end
41c94     6C 8A 01 00 | 	long	@_do_pop
41c98     94 52 01 00 | 	long	@_do_log
41c9c     50 F0 00 00 | 	long	@_do_changevol
41ca0     30 F1 00 00 | 	long	@_do_changewav
41ca4     40 EF 00 00 | 	long	@_do_changepan
41ca8     24 EC 00 00 | 	long	@_do_changefreq
41cac     F4 B8 01 00 | 	long	@_do_shutup
41cb0     D4 AB 01 00 | 	long	@_do_round
41cb4     30 1F 01 00 | 	long	@_do_enter
41cb8     8C 64 01 00 | 	long	@_do_open
41cbc     00 F5 00 00 | 	long	@_do_close
41cc0     BC 26 01 00 | 	long	@_do_get
41cc4     9C 91 01 00 | 	long	@_do_put
41cc8     64 E6 00 00 | 	long	@_do_cd
41ccc     34 15 01 00 | 	long	@_do_delete
41cd0     60 57 01 00 | 	long	@_do_mkdir
41cd4     D8 DE 00 00 | 	long	@_do_blit
41cd8     24 26 01 00 | 	long	@_do_framebuf
41cdc     68 63 01 00 | 	long	@_do_on
41ce0     14 BB 01 00 | 	long	@_do_skip
41ce4     38 3C 01 00 | 	long	@_do_input
41ce8     68 99 01 00 | 	long	@_do_read
41cec     94 A7 01 00 | 	long	@_do_restore
41cf0     B4 70 01 00 | 	long	@_do_padx
41cf4     34 73 01 00 | 	long	@_do_pady
41cf8     B4 75 01 00 | 	long	@_do_padz
41cfc     34 69 01 00 | 	long	@_do_padrx
41d00     B4 6B 01 00 | 	long	@_do_padry
41d04     34 6E 01 00 | 	long	@_do_padrz
41d08     A4 67 01 00 | 	long	@_do_padh
41d0c     70 F8 00 00 | 	long	@_do_copy
41d10     BC F5 00 00 | 	long	@_do_coginit
41d14     F8 F7 00 00 | 	long	@_do_cogstop
41d18     48 4D 02 00 | 	long	@_hg010b_spin2_putchar
41d1c     34 63 03 00 | 	long	@__struct___bas_wrap_sender_tx
41d20     78 63 03 00 | 	long	@__struct___bas_wrap_sender_rx
41d24     C0 63 03 00 | 	long	@__struct___bas_wrap_sender_close
41d28     64 62 03 00 | 	long	@__struct__s_vfs_file_t_putchar
41d2c     D4 62 03 00 | 	long	@__struct__s_vfs_file_t_getchar
41d30     1C 62 03 00 | 	long	@___strs_cl_pfunc
41d34     B0 BF 02 00 | 	long	@__system____root_opendir
41d38     4C C0 02 00 | 	long	@__system____root_closedir
41d3c     C8 BF 02 00 | 	long	@__system____root_readdir
41d40     54 C0 02 00 | 	long	@__system____root_stat
41d44     A0 B8 02 00 | 	long	@__system____default_putc
41d48     24 B8 02 00 | 	long	@__system____default_getc
41d4c     48 B9 02 00 | 	long	@__system____default_flush
41d50     20 4D 03 00 | 	long	@_fatfs_cc_v_close
41d54     3C 51 03 00 | 	long	@_fatfs_cc_v_read
41d58     50 52 03 00 | 	long	@_fatfs_cc_v_write
41d5c     30 53 03 00 | 	long	@_fatfs_cc_v_lseek
41d60     B8 53 03 00 | 	long	@_fatfs_cc_v_ioctl
41d64     0C 54 03 00 | 	long	@_fatfs_cc_v_open
41d68     84 4C 03 00 | 	long	@_fatfs_cc_v_creat
41d6c     64 4D 03 00 | 	long	@_fatfs_cc_v_opendir
41d70     D8 4D 03 00 | 	long	@_fatfs_cc_v_closedir
41d74     18 4E 03 00 | 	long	@_fatfs_cc_v_readdir
41d78     4C 4F 03 00 | 	long	@_fatfs_cc_v_stat
41d7c     CC 53 03 00 | 	long	@_fatfs_cc_v_mkdir
41d80     EC 53 03 00 | 	long	@_fatfs_cc_v_rmdir
41d84     DC 53 03 00 | 	long	@_fatfs_cc_v_remove
41d88     FC 53 03 00 | 	long	@_fatfs_cc_v_rename
41d8c     1C 55 03 00 | 	long	@_fatfs_cc_v_init
41d90     24 55 03 00 | 	long	@_fatfs_cc_v_deinit
41d94     F0 69 02 00 | 	long	@__system___tx
41d98     30 6A 02 00 | 	long	@__system___rx
41d9c     C0 CB 02 00 | 	long	@__system___rxtxioctl_0767
41da0     18 CC 02 00 | 	long	@__system____dummy_flush_0768
41da4     EC 54 03 00 | 	long	@_fatfs_cc_v_flush
41da8                 | __heap_base
41da8     00 00 00 00 
      ...             
594a8     00 00 00 00 
594ac     00 00 00 00 | 	long	0[24002]
594b0                 | objmem
594b0     00 00 00 00 
      ...             
639c8     00 00 00 00 
639cc     00 00 00 00 | 	long	0[10568]
639d0                 | stackspace
639d0     00 00 00 00 | 	long	0[1]
639d4 100             | 	org	COG_BSS_START
639d4 100             | _var01
639d4 100             | 	res	1
639d4 101             | _var02
639d4 101             | 	res	1
639d4 102             | _var03
639d4 102             | 	res	1
639d4 103             | _var04
639d4 103             | 	res	1
639d4 104             | _var05
639d4 104             | 	res	1
639d4 105             | _var06
639d4 105             | 	res	1
639d4 106             | _var07
639d4 106             | 	res	1
639d4 107             | _var08
639d4 107             | 	res	1
639d4 108             | _var09
639d4 108             | 	res	1
639d4 109             | arg01
639d4 109             | 	res	1
639d4 10a             | arg02
639d4 10a             | 	res	1
639d4 10b             | arg03
639d4 10b             | 	res	1
639d4 10c             | arg04
639d4 10c             | 	res	1
639d4 10d             | arg05
639d4 10d             | 	res	1
639d4 10e             | arg06
639d4 10e             | 	res	1
639d4 10f             | arg07
639d4 10f             | 	res	1
639d4 110             | arg08
639d4 110             | 	res	1
639d4 111             | arg09
639d4 111             | 	res	1
639d4 112             | arg10
639d4 112             | 	res	1
639d4 113             | local01
639d4 113             | 	res	1
639d4 114             | local02
639d4 114             | 	res	1
639d4 115             | local03
639d4 115             | 	res	1
639d4 116             | local04
639d4 116             | 	res	1
639d4 117             | local05
639d4 117             | 	res	1
639d4 118             | local06
639d4 118             | 	res	1
639d4 119             | local07
639d4 119             | 	res	1
639d4 11a             | local08
639d4 11a             | 	res	1
639d4 11b             | local09
639d4 11b             | 	res	1
639d4 11c             | local10
639d4 11c             | 	res	1
639d4 11d             | local11
639d4 11d             | 	res	1
639d4 11e             | local12
639d4 11e             | 	res	1
639d4 11f             | local13
639d4 11f             | 	res	1
639d4 120             | local14
639d4 120             | 	res	1
639d4 121             | local15
639d4 121             | 	res	1
639d4 122             | local16
639d4 122             | 	res	1
639d4 123             | local17
639d4 123             | 	res	1
639d4 124             | local18
639d4 124             | 	res	1
639d4 125             | local19
639d4 125             | 	res	1
639d4 126             | local20
639d4 126             | 	res	1
639d4 127             | local21
639d4 127             | 	res	1
639d4 128             | local22
639d4 128             | 	res	1
639d4 129             | local23
639d4 129             | 	res	1
639d4 12a             | local24
639d4 12a             | 	res	1
639d4 12b             | local25
639d4 12b             | 	res	1
639d4 12c             | local26
639d4 12c             | 	res	1
639d4 12d             | local27
639d4 12d             | 	res	1
639d4 12e             | local28
639d4 12e             | 	res	1
639d4 12f             | local29
639d4 12f             | 	res	1
639d4 130             | local30
639d4 130             | 	res	1
639d4 131             | local31
639d4 131             | 	res	1
639d4 132             | local32
639d4 132             | 	res	1
639d4 133             | local33
639d4 133             | 	res	1
639d4 134             | local34
639d4 134             | 	res	1
639d4 135             | local35
639d4 135             | 	res	1
639d4 136             | local36
639d4 136             | 	res	1
639d4 137             | local37
639d4 137             | 	res	1
639d4 138             | local38
639d4 138             | 	res	1
639d4 139             | local39
639d4 139             | 	res	1
639d4 13a             | local40
639d4 13a             | 	res	1
639d4 13b             | local41
639d4 13b             | 	res	1
639d4 13c             | local42
639d4 13c             | 	res	1
639d4 13d             | local43
639d4 13d             | 	res	1
639d4 13e             | local44
639d4 13e             | 	res	1
639d4 13f             | local45
639d4 13f             | 	res	1
639d4 140             | local46
639d4 140             | 	res	1
639d4 141             | local47
639d4 141             | 	res	1
639d4 142             | local48
639d4 142             | 	res	1
639d4 143             | local49
639d4 143             | 	res	1
639d4 144             | local50
639d4 144             | 	res	1
639d4 145             | local51
639d4 145             | 	res	1
639d4 146             | local52
639d4 146             | 	res	1
639d4 147             | local53
639d4 147             | 	res	1
639d4 148             | muldiva_
639d4 148             | 	res	1
639d4 149             | muldivb_
639d4 149             | 	res	1
639d4 14a             | 	fit	480
639d4 14a             | 
